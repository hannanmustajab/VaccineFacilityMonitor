
/Users/abdulhannanmustajab/Desktop/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/4.0.0/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007b80  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbba0  000bbba0  0000bba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000804  2003f400  000bbbc4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002ac  2003e1f8  000bc3c8  0001e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  2003e4a8  2003e4a8  0002e4a8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bc674  000bc674  0002c674  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bc6a0  000bc6a0  0002c6a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00153610  00000000  00000000  0002c6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00016eb0  00000000  00000000  0017fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00041930  00000000  00000000  00196b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003450  00000000  00000000  001d8494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b9b8  00000000  00000000  001db8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e8c9  00000000  00000000  001e729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004c1a3  00000000  00000000  00225b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013efac  00000000  00000000  00271d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009b60  00000000  00000000  003b0cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fe4f 	bl	b8cd4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fe71 	bl	b8d24 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e1f8 	.word	0x2003e1f8
   b404c:	000bc3c8 	.word	0x000bc3c8
   b4050:	2003e4a4 	.word	0x2003e4a4
   b4054:	2003e4a8 	.word	0x2003e4a8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 ffb9 	bl	b7fd8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bbb6c 	.word	0x000bbb6c
   b4080:	000bbb98 	.word	0x000bbb98

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf16 	b.w	b4eb4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fe09 	bl	b4ca0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bf59 	b.w	b7f48 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bdab 	b.w	b6bf0 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bda9 	b.w	b6bf0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bdaf 	b.w	b6c00 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fc68 	bl	b6980 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b66c1 	.word	0x000b66c1
   b40b8:	000bada8 	.word	0x000bada8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z11watchdogISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003e645 	.word	0x2003e645

000b40d8 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   b40d8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b40da:	4904      	ldr	r1, [pc, #16]	; (b40ec <_Z10measureNow6String+0x14>)
   b40dc:	f003 fc4f 	bl	b797e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   b40e0:	b118      	cbz	r0, b40ea <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   b40e2:	4b03      	ldr	r3, [pc, #12]	; (b40f0 <_Z10measureNow6String+0x18>)
   b40e4:	2203      	movs	r2, #3
   b40e6:	701a      	strb	r2, [r3, #0]
    return 1;
   b40e8:	2001      	movs	r0, #1
  }
  else return 0;
}
   b40ea:	bd08      	pop	{r3, pc}
   b40ec:	000badf8 	.word	0x000badf8
   b40f0:	2003e5e4 	.word	0x2003e5e4

000b40f4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b40f4:	b510      	push	{r4, lr}
   b40f6:	4b03      	ldr	r3, [pc, #12]	; (b4104 <_ZN8MB85RC64D1Ev+0x10>)
   b40f8:	6003      	str	r3, [r0, #0]
   b40fa:	4604      	mov	r4, r0
   b40fc:	f001 f91e 	bl	b533c <_ZN6MB85RCD1Ev>
   b4100:	4620      	mov	r0, r4
   b4102:	bd10      	pop	{r4, pc}
   b4104:	000bb254 	.word	0x000bb254

000b4108 <_ZN8MB85RC64D0Ev>:
   b4108:	b510      	push	{r4, lr}
   b410a:	4604      	mov	r4, r0
   b410c:	f7ff fff2 	bl	b40f4 <_ZN8MB85RC64D1Ev>
   b4110:	4620      	mov	r0, r4
   b4112:	2110      	movs	r1, #16
   b4114:	f7ff ffc3 	bl	b409e <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   b411c:	b510      	push	{r4, lr}
   b411e:	4b03      	ldr	r3, [pc, #12]	; (b412c <_ZN17PublishQueueAsyncD1Ev+0x10>)
   b4120:	6003      	str	r3, [r0, #0]
   b4122:	4604      	mov	r4, r0
   b4124:	f002 f80c 	bl	b6140 <_ZN25PublishQueueAsyncRetainedD1Ev>
   b4128:	4620      	mov	r0, r4
   b412a:	bd10      	pop	{r4, pc}
   b412c:	000bb22c 	.word	0x000bb22c

000b4130 <_ZN17PublishQueueAsyncD0Ev>:
   b4130:	b510      	push	{r4, lr}
   b4132:	4604      	mov	r4, r0
   b4134:	f7ff fff2 	bl	b411c <_ZN17PublishQueueAsyncD1Ev>
   b4138:	4620      	mov	r0, r4
   b413a:	2138      	movs	r1, #56	; 0x38
   b413c:	f7ff ffaf 	bl	b409e <_ZdlPvj>
   b4140:	4620      	mov	r0, r4
   b4142:	bd10      	pop	{r4, pc}

000b4144 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4144:	6943      	ldr	r3, [r0, #20]
   b4146:	b113      	cbz	r3, b414e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4148:	6983      	ldr	r3, [r0, #24]
   b414a:	300c      	adds	r0, #12
   b414c:	4718      	bx	r3
            callback();
        }
    }
   b414e:	4770      	bx	lr

000b4150 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4150:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4152:	2100      	movs	r1, #0
   b4154:	4604      	mov	r4, r0
   b4156:	4608      	mov	r0, r1
   b4158:	f002 fa42 	bl	b65e0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b415c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b415e:	4620      	mov	r0, r4
   b4160:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4162:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4164:	f002 fa54 	bl	b6610 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4168:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b416a:	b10c      	cbz	r4, b4170 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b416c:	2301      	movs	r3, #1
   b416e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4170:	2100      	movs	r1, #0
   b4172:	2001      	movs	r0, #1
   b4174:	f002 fa34 	bl	b65e0 <os_thread_scheduling>
            }
        }
        if (t) {
   b4178:	b12c      	cbz	r4, b4186 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b417a:	6823      	ldr	r3, [r4, #0]
   b417c:	4620      	mov	r0, r4
   b417e:	689b      	ldr	r3, [r3, #8]
   b4180:	4798      	blx	r3
            t->running = false;
   b4182:	2300      	movs	r3, #0
   b4184:	7123      	strb	r3, [r4, #4]
        }
    }
   b4186:	b002      	add	sp, #8
   b4188:	bd10      	pop	{r4, pc}

000b418a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b418a:	2a01      	cmp	r2, #1
   b418c:	d102      	bne.n	b4194 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b418e:	6001      	str	r1, [r0, #0]
      }
   b4190:	2000      	movs	r0, #0
   b4192:	4770      	bx	lr
	  switch (__op)
   b4194:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4196:	bf04      	itt	eq
   b4198:	680b      	ldreq	r3, [r1, #0]
   b419a:	6003      	streq	r3, [r0, #0]
	      break;
   b419c:	e7f8      	b.n	b4190 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b419e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b419e:	6803      	ldr	r3, [r0, #0]
   b41a0:	4718      	bx	r3

000b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b41a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b41a4:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b41a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b41aa:	f88d 3000 	strb.w	r3, [sp]
   b41ae:	f88d 5004 	strb.w	r5, [sp, #4]
   b41b2:	68e4      	ldr	r4, [r4, #12]
   b41b4:	233c      	movs	r3, #60	; 0x3c
   b41b6:	47a0      	blx	r4
	}
   b41b8:	b003      	add	sp, #12
   b41ba:	bd30      	pop	{r4, r5, pc}

000b41bc <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   b41bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b41be:	4916      	ldr	r1, [pc, #88]	; (b4218 <_Z14setVerboseMode6String+0x5c>)
   b41c0:	4605      	mov	r5, r0
   b41c2:	f003 fbdc 	bl	b797e <_ZNK6String6equalsEPKc>
  if (command == "1")
   b41c6:	4604      	mov	r4, r0
   b41c8:	b188      	cbz	r0, b41ee <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   b41ca:	4b14      	ldr	r3, [pc, #80]	; (b421c <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b41cc:	4814      	ldr	r0, [pc, #80]	; (b4220 <_Z14setVerboseMode6String+0x64>)
   b41ce:	4a15      	ldr	r2, [pc, #84]	; (b4224 <_Z14setVerboseMode6String+0x68>)
   b41d0:	4915      	ldr	r1, [pc, #84]	; (b4228 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   b41d2:	2401      	movs	r4, #1
   b41d4:	725c      	strb	r4, [r3, #9]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b41d6:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b41d8:	f88d 3000 	strb.w	r3, [sp]
   b41dc:	4b13      	ldr	r3, [pc, #76]	; (b422c <_Z14setVerboseMode6String+0x70>)
   b41de:	781b      	ldrb	r3, [r3, #0]
   b41e0:	f7ff ffdf 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b41e4:	4b12      	ldr	r3, [pc, #72]	; (b4230 <_Z14setVerboseMode6String+0x74>)
    return 1;
   b41e6:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   b41e8:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   b41ea:	b003      	add	sp, #12
   b41ec:	bd30      	pop	{r4, r5, pc}
   b41ee:	4911      	ldr	r1, [pc, #68]	; (b4234 <_Z14setVerboseMode6String+0x78>)
   b41f0:	4628      	mov	r0, r5
   b41f2:	f003 fbc4 	bl	b797e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b41f6:	2800      	cmp	r0, #0
   b41f8:	d0f7      	beq.n	b41ea <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   b41fa:	4b08      	ldr	r3, [pc, #32]	; (b421c <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b41fc:	4808      	ldr	r0, [pc, #32]	; (b4220 <_Z14setVerboseMode6String+0x64>)
    sysStatus.verboseMode = false;
   b41fe:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b4200:	4b0a      	ldr	r3, [pc, #40]	; (b422c <_Z14setVerboseMode6String+0x70>)
   b4202:	f88d 4000 	strb.w	r4, [sp]
   b4206:	781b      	ldrb	r3, [r3, #0]
   b4208:	4a0b      	ldr	r2, [pc, #44]	; (b4238 <_Z14setVerboseMode6String+0x7c>)
   b420a:	4907      	ldr	r1, [pc, #28]	; (b4228 <_Z14setVerboseMode6String+0x6c>)
   b420c:	f7ff ffc9 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4210:	4b07      	ldr	r3, [pc, #28]	; (b4230 <_Z14setVerboseMode6String+0x74>)
   b4212:	2001      	movs	r0, #1
   b4214:	7018      	strb	r0, [r3, #0]
    return 1;
   b4216:	e7e8      	b.n	b41ea <_Z14setVerboseMode6String+0x2e>
   b4218:	000badf8 	.word	0x000badf8
   b421c:	2003e5e8 	.word	0x2003e5e8
   b4220:	2003e568 	.word	0x2003e568
   b4224:	000badfa 	.word	0x000badfa
   b4228:	000bae1d 	.word	0x000bae1d
   b422c:	2003e4b5 	.word	0x2003e4b5
   b4230:	2003e604 	.word	0x2003e604
   b4234:	000bae0b 	.word	0x000bae0b
   b4238:	000bae0d 	.word	0x000bae0d

000b423c <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   b423c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b423e:	4d1a      	ldr	r5, [pc, #104]	; (b42a8 <_Z14UbidotsHandlerPKcS0_+0x6c>)
  if (!data) {                                                                    // First check to see if there is any data
   b4240:	460c      	mov	r4, r1
   b4242:	b959      	cbnz	r1, b425c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   b4244:	7a6b      	ldrb	r3, [r5, #9]
   b4246:	b31b      	cbz	r3, b4290 <_Z14UbidotsHandlerPKcS0_+0x54>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   b4248:	4b18      	ldr	r3, [pc, #96]	; (b42ac <_Z14UbidotsHandlerPKcS0_+0x70>)
   b424a:	f88d 1000 	strb.w	r1, [sp]
   b424e:	781b      	ldrb	r3, [r3, #0]
   b4250:	4a17      	ldr	r2, [pc, #92]	; (b42b0 <_Z14UbidotsHandlerPKcS0_+0x74>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   b4252:	4918      	ldr	r1, [pc, #96]	; (b42b4 <_Z14UbidotsHandlerPKcS0_+0x78>)
   b4254:	4818      	ldr	r0, [pc, #96]	; (b42b8 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b4256:	f7ff ffa4 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b425a:	e019      	b.n	b4290 <_Z14UbidotsHandlerPKcS0_+0x54>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   b425c:	4608      	mov	r0, r1
   b425e:	f004 fd16 	bl	b8c8e <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   b4262:	38c8      	subs	r0, #200	; 0xc8
   b4264:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   b4266:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   b4268:	d814      	bhi.n	b4294 <_Z14UbidotsHandlerPKcS0_+0x58>
    if (sysStatus.verboseMode) {
   b426a:	b14b      	cbz	r3, b4280 <_Z14UbidotsHandlerPKcS0_+0x44>
   b426c:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   b426e:	f88d 3000 	strb.w	r3, [sp]
   b4272:	4b0e      	ldr	r3, [pc, #56]	; (b42ac <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4274:	4a11      	ldr	r2, [pc, #68]	; (b42bc <_Z14UbidotsHandlerPKcS0_+0x80>)
   b4276:	781b      	ldrb	r3, [r3, #0]
   b4278:	4911      	ldr	r1, [pc, #68]	; (b42c0 <_Z14UbidotsHandlerPKcS0_+0x84>)
   b427a:	480f      	ldr	r0, [pc, #60]	; (b42b8 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b427c:	f7ff ff91 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    alertsStatus.upperTemperatureThresholdCrossed = false;
   b4280:	4a10      	ldr	r2, [pc, #64]	; (b42c4 <_Z14UbidotsHandlerPKcS0_+0x88>)
   b4282:	2300      	movs	r3, #0
   b4284:	6013      	str	r3, [r2, #0]
    alertsStatusWriteNeeded = true;
   b4286:	4a10      	ldr	r2, [pc, #64]	; (b42c8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   b4288:	2101      	movs	r1, #1
   b428a:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   b428c:	4a0f      	ldr	r2, [pc, #60]	; (b42cc <_Z14UbidotsHandlerPKcS0_+0x90>)
   b428e:	7013      	strb	r3, [r2, #0]
}
   b4290:	b003      	add	sp, #12
   b4292:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   b4294:	2b00      	cmp	r3, #0
   b4296:	d0fb      	beq.n	b4290 <_Z14UbidotsHandlerPKcS0_+0x54>
   b4298:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   b429a:	f88d 3000 	strb.w	r3, [sp]
   b429e:	4b03      	ldr	r3, [pc, #12]	; (b42ac <_Z14UbidotsHandlerPKcS0_+0x70>)
   b42a0:	4622      	mov	r2, r4
   b42a2:	781b      	ldrb	r3, [r3, #0]
   b42a4:	e7d5      	b.n	b4252 <_Z14UbidotsHandlerPKcS0_+0x16>
   b42a6:	bf00      	nop
   b42a8:	2003e5e8 	.word	0x2003e5e8
   b42ac:	2003e4b5 	.word	0x2003e4b5
   b42b0:	000bae22 	.word	0x000bae22
   b42b4:	000bae2a 	.word	0x000bae2a
   b42b8:	2003e568 	.word	0x2003e568
   b42bc:	000bae37 	.word	0x000bae37
   b42c0:	000bae49 	.word	0x000bae49
   b42c4:	2003e4bc 	.word	0x2003e4bc
   b42c8:	2003e4d4 	.word	0x2003e4d4
   b42cc:	2003e4f5 	.word	0x2003e4f5

000b42d0 <_ZN5Timer12changePeriodEjj.isra.0>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b42d0:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b42d2:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b42d4:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b42d6:	b130      	cbz	r0, b42e6 <_ZN5Timer12changePeriodEjj.isra.0+0x16>
   b42d8:	2100      	movs	r1, #0
   b42da:	e9cd 2100 	strd	r2, r1, [sp]
   b42de:	460a      	mov	r2, r1
   b42e0:	2103      	movs	r1, #3
   b42e2:	f002 f99d 	bl	b6620 <os_timer_change>
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b42e6:	b003      	add	sp, #12
   b42e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b42ec <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   b42ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b42ee:	4b10      	ldr	r3, [pc, #64]	; (b4330 <_Z16keepAliveMessagev+0x44>)
   b42f0:	4a10      	ldr	r2, [pc, #64]	; (b4334 <_Z16keepAliveMessagev+0x48>)
   b42f2:	781b      	ldrb	r3, [r3, #0]
   b42f4:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42f6:	4910      	ldr	r1, [pc, #64]	; (b4338 <_Z16keepAliveMessagev+0x4c>)
   b42f8:	4313      	orrs	r3, r2
   b42fa:	f88d 3000 	strb.w	r3, [sp]
   b42fe:	2200      	movs	r2, #0
   b4300:	233c      	movs	r3, #60	; 0x3c
   b4302:	a802      	add	r0, sp, #8
   b4304:	f002 fed0 	bl	b70a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4308:	9c03      	ldr	r4, [sp, #12]
   b430a:	b17c      	cbz	r4, b432c <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   b430c:	6863      	ldr	r3, [r4, #4]
   b430e:	3b01      	subs	r3, #1
   b4310:	6063      	str	r3, [r4, #4]
   b4312:	b95b      	cbnz	r3, b432c <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   b4314:	6823      	ldr	r3, [r4, #0]
   b4316:	4620      	mov	r0, r4
   b4318:	689b      	ldr	r3, [r3, #8]
   b431a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b431c:	68a3      	ldr	r3, [r4, #8]
   b431e:	3b01      	subs	r3, #1
   b4320:	60a3      	str	r3, [r4, #8]
   b4322:	b91b      	cbnz	r3, b432c <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   b4324:	6823      	ldr	r3, [r4, #0]
   b4326:	4620      	mov	r0, r4
   b4328:	68db      	ldr	r3, [r3, #12]
   b432a:	4798      	blx	r3
}
   b432c:	b004      	add	sp, #16
   b432e:	bd10      	pop	{r4, pc}
   b4330:	2003e4b4 	.word	0x2003e4b4
   b4334:	2003e4b5 	.word	0x2003e4b5
   b4338:	000bae4f 	.word	0x000bae4f

000b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b433c:	2300      	movs	r3, #0
   b433e:	2204      	movs	r2, #4
   b4340:	f002 bb96 	b.w	b6a70 <spark_variable>

000b4344 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4344:	b510      	push	{r4, lr}
      if (_M_manager)
   b4346:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4348:	4604      	mov	r4, r0
      if (_M_manager)
   b434a:	b113      	cbz	r3, b4352 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b434c:	2203      	movs	r2, #3
   b434e:	4601      	mov	r1, r0
   b4350:	4798      	blx	r3
    }
   b4352:	4620      	mov	r0, r4
   b4354:	bd10      	pop	{r4, pc}
	...

000b4358 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4358:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b435a:	4b13      	ldr	r3, [pc, #76]	; (b43a8 <_ZN5TimerD1Ev+0x50>)
   b435c:	6003      	str	r3, [r0, #0]
   b435e:	4604      	mov	r4, r0
        if (handle) {
   b4360:	6880      	ldr	r0, [r0, #8]
   b4362:	b1c8      	cbz	r0, b4398 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4364:	2500      	movs	r5, #0
   b4366:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b436a:	e9cd 3500 	strd	r3, r5, [sp]
   b436e:	2102      	movs	r1, #2
   b4370:	462b      	mov	r3, r5
   b4372:	462a      	mov	r2, r5
   b4374:	f002 f954 	bl	b6620 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4378:	68a0      	ldr	r0, [r4, #8]
   b437a:	4629      	mov	r1, r5
   b437c:	f002 f980 	bl	b6680 <os_timer_set_id>
            while (running) {
   b4380:	7923      	ldrb	r3, [r4, #4]
   b4382:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4386:	b113      	cbz	r3, b438e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4388:	f002 f922 	bl	b65d0 <os_thread_yield>
            while (running) {
   b438c:	e7f8      	b.n	b4380 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b438e:	68a0      	ldr	r0, [r4, #8]
   b4390:	4629      	mov	r1, r5
   b4392:	f002 f935 	bl	b6600 <os_timer_destroy>
            handle = nullptr;
   b4396:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4398:	f104 000c 	add.w	r0, r4, #12
   b439c:	f7ff ffd2 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
    }
   b43a0:	4620      	mov	r0, r4
   b43a2:	b003      	add	sp, #12
   b43a4:	bd30      	pop	{r4, r5, pc}
   b43a6:	bf00      	nop
   b43a8:	000bb218 	.word	0x000bb218

000b43ac <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43ac:	b510      	push	{r4, lr}
   b43ae:	4604      	mov	r4, r0
    }
   b43b0:	f7ff ffd2 	bl	b4358 <_ZN5TimerD1Ev>
   b43b4:	4620      	mov	r0, r4
   b43b6:	211c      	movs	r1, #28
   b43b8:	f7ff fe71 	bl	b409e <_ZdlPvj>
   b43bc:	4620      	mov	r0, r4
   b43be:	bd10      	pop	{r4, pc}

000b43c0 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   b43c0:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b43c2:	2301      	movs	r3, #1
   b43c4:	2208      	movs	r2, #8
   b43c6:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b43ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b43ce:	2300      	movs	r3, #0
   b43d0:	4341      	muls	r1, r0
   b43d2:	466a      	mov	r2, sp
   b43d4:	4618      	mov	r0, r3
   b43d6:	f002 fb9b 	bl	b6b10 <spark_set_connection_property>
    }
   b43da:	b003      	add	sp, #12
   b43dc:	f85d fb04 	ldr.w	pc, [sp], #4

000b43e0 <_Z16setThirdPartySim6String>:
  updateThresholdValue();
  return 1;
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   b43e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43e2:	491c      	ldr	r1, [pc, #112]	; (b4454 <_Z16setThirdPartySim6String+0x74>)
   b43e4:	4605      	mov	r5, r0
   b43e6:	f003 faca 	bl	b797e <_ZNK6String6equalsEPKc>
  if (command == "1")
   b43ea:	4604      	mov	r4, r0
   b43ec:	b300      	cbz	r0, b4430 <_Z16setThirdPartySim6String+0x50>
  {
    sysStatus.thirdPartySim = true;
   b43ee:	4c1a      	ldr	r4, [pc, #104]	; (b4458 <_Z16setThirdPartySim6String+0x78>)
   b43f0:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b43f2:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   b43f4:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b43f6:	f7ff ffe3 	bl	b43c0 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b43fa:	6863      	ldr	r3, [r4, #4]
   b43fc:	4817      	ldr	r0, [pc, #92]	; (b445c <_Z16setThirdPartySim6String+0x7c>)
   b43fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4402:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4406:	4359      	muls	r1, r3
   b4408:	f7ff ff62 	bl	b42d0 <_ZN5Timer12changePeriodEjj.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b440c:	f002 fb48 	bl	b6aa0 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   b4410:	b148      	cbz	r0, b4426 <_Z16setThirdPartySim6String+0x46>
        val_(0) {
   b4412:	2300      	movs	r3, #0
   b4414:	f88d 3000 	strb.w	r3, [sp]
   b4418:	4b11      	ldr	r3, [pc, #68]	; (b4460 <_Z16setThirdPartySim6String+0x80>)
   b441a:	4a12      	ldr	r2, [pc, #72]	; (b4464 <_Z16setThirdPartySim6String+0x84>)
   b441c:	781b      	ldrb	r3, [r3, #0]
   b441e:	4912      	ldr	r1, [pc, #72]	; (b4468 <_Z16setThirdPartySim6String+0x88>)
   b4420:	4812      	ldr	r0, [pc, #72]	; (b446c <_Z16setThirdPartySim6String+0x8c>)
   b4422:	f7ff febe 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4426:	4b12      	ldr	r3, [pc, #72]	; (b4470 <_Z16setThirdPartySim6String+0x90>)
   b4428:	2001      	movs	r0, #1
   b442a:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   b442c:	b003      	add	sp, #12
   b442e:	bd30      	pop	{r4, r5, pc}
   b4430:	4910      	ldr	r1, [pc, #64]	; (b4474 <_Z16setThirdPartySim6String+0x94>)
   b4432:	4628      	mov	r0, r5
   b4434:	f003 faa3 	bl	b797e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4438:	2800      	cmp	r0, #0
   b443a:	d0f7      	beq.n	b442c <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   b443c:	4b06      	ldr	r3, [pc, #24]	; (b4458 <_Z16setThirdPartySim6String+0x78>)
   b443e:	705c      	strb	r4, [r3, #1]
   b4440:	f002 fb2e 	bl	b6aa0 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   b4444:	2800      	cmp	r0, #0
   b4446:	d0ee      	beq.n	b4426 <_Z16setThirdPartySim6String+0x46>
   b4448:	4b05      	ldr	r3, [pc, #20]	; (b4460 <_Z16setThirdPartySim6String+0x80>)
   b444a:	f88d 4000 	strb.w	r4, [sp]
   b444e:	781b      	ldrb	r3, [r3, #0]
   b4450:	4a09      	ldr	r2, [pc, #36]	; (b4478 <_Z16setThirdPartySim6String+0x98>)
   b4452:	e7e4      	b.n	b441e <_Z16setThirdPartySim6String+0x3e>
   b4454:	000badf8 	.word	0x000badf8
   b4458:	2003e5e8 	.word	0x2003e5e8
   b445c:	2003e518 	.word	0x2003e518
   b4460:	2003e4b5 	.word	0x2003e4b5
   b4464:	000bae51 	.word	0x000bae51
   b4468:	000bae1d 	.word	0x000bae1d
   b446c:	2003e568 	.word	0x2003e568
   b4470:	2003e604 	.word	0x2003e604
   b4474:	000bae0b 	.word	0x000bae0b
   b4478:	000bae66 	.word	0x000bae66

000b447c <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   b447c:	b510      	push	{r4, lr}
   b447e:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   b4480:	6800      	ldr	r0, [r0, #0]
   b4482:	220a      	movs	r2, #10
   b4484:	a903      	add	r1, sp, #12
   b4486:	f005 fb93 	bl	b9bb0 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b448a:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   b448e:	d822      	bhi.n	b44d6 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   b4490:	4c12      	ldr	r4, [pc, #72]	; (b44dc <_Z12setKeepAlive6String+0x60>)
   b4492:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4494:	f7ff ff94 	bl	b43c0 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b4498:	6863      	ldr	r3, [r4, #4]
   b449a:	4811      	ldr	r0, [pc, #68]	; (b44e0 <_Z12setKeepAlive6String+0x64>)
   b449c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b44a0:	4359      	muls	r1, r3
   b44a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b44a6:	f7ff ff13 	bl	b42d0 <_ZN5Timer12changePeriodEjj.isra.0>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   b44aa:	6863      	ldr	r3, [r4, #4]
   b44ac:	4a0d      	ldr	r2, [pc, #52]	; (b44e4 <_Z12setKeepAlive6String+0x68>)
   b44ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   b44b2:	a804      	add	r0, sp, #16
   b44b4:	f002 fbbc 	bl	b6c30 <snprintf>
   b44b8:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   b44ba:	f88d 3000 	strb.w	r3, [sp]
   b44be:	4b0a      	ldr	r3, [pc, #40]	; (b44e8 <_Z12setKeepAlive6String+0x6c>)
   b44c0:	480a      	ldr	r0, [pc, #40]	; (b44ec <_Z12setKeepAlive6String+0x70>)
   b44c2:	781b      	ldrb	r3, [r3, #0]
   b44c4:	490a      	ldr	r1, [pc, #40]	; (b44f0 <_Z12setKeepAlive6String+0x74>)
   b44c6:	aa04      	add	r2, sp, #16
   b44c8:	f7ff fe6b 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   b44cc:	4b09      	ldr	r3, [pc, #36]	; (b44f4 <_Z12setKeepAlive6String+0x78>)
   b44ce:	2001      	movs	r0, #1
   b44d0:	7018      	strb	r0, [r3, #0]
  return 1;
}
   b44d2:	b044      	add	sp, #272	; 0x110
   b44d4:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b44d6:	2000      	movs	r0, #0
   b44d8:	e7fb      	b.n	b44d2 <_Z12setKeepAlive6String+0x56>
   b44da:	bf00      	nop
   b44dc:	2003e5e8 	.word	0x2003e5e8
   b44e0:	2003e518 	.word	0x2003e518
   b44e4:	000bae7a 	.word	0x000bae7a
   b44e8:	2003e4b5 	.word	0x2003e4b5
   b44ec:	2003e568 	.word	0x2003e568
   b44f0:	000bae93 	.word	0x000bae93
   b44f4:	2003e604 	.word	0x2003e604

000b44f8 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   b44f8:	b507      	push	{r0, r1, r2, lr}
   b44fa:	f002 fad1 	bl	b6aa0 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   b44fe:	b148      	cbz	r0, b4514 <_Z18loadSystemDefaultsv+0x1c>
   b4500:	2300      	movs	r3, #0
   b4502:	f88d 3000 	strb.w	r3, [sp]
   b4506:	4b0c      	ldr	r3, [pc, #48]	; (b4538 <_Z18loadSystemDefaultsv+0x40>)
   b4508:	4a0c      	ldr	r2, [pc, #48]	; (b453c <_Z18loadSystemDefaultsv+0x44>)
   b450a:	781b      	ldrb	r3, [r3, #0]
   b450c:	490c      	ldr	r1, [pc, #48]	; (b4540 <_Z18loadSystemDefaultsv+0x48>)
   b450e:	480d      	ldr	r0, [pc, #52]	; (b4544 <_Z18loadSystemDefaultsv+0x4c>)
   b4510:	f7ff fe47 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatus.keepAlive = 120;
   b4514:	4a0c      	ldr	r2, [pc, #48]	; (b4548 <_Z18loadSystemDefaultsv+0x50>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b4516:	480d      	ldr	r0, [pc, #52]	; (b454c <_Z18loadSystemDefaultsv+0x54>)
   b4518:	2378      	movs	r3, #120	; 0x78
   b451a:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   b451c:	f240 1301 	movw	r3, #257	; 0x101
   b4520:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   b4522:	2300      	movs	r3, #0
   b4524:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   b4526:	7293      	strb	r3, [r2, #10]
   b4528:	2101      	movs	r1, #1
   b452a:	231c      	movs	r3, #28
}
   b452c:	b003      	add	sp, #12
   b452e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4532:	f000 bfbe 	b.w	b54b2 <_ZN6MB85RC9writeDataEjPKhj>
   b4536:	bf00      	nop
   b4538:	2003e4b5 	.word	0x2003e4b5
   b453c:	000bae9e 	.word	0x000bae9e
   b4540:	000bae1d 	.word	0x000bae1d
   b4544:	2003e568 	.word	0x2003e568
   b4548:	2003e5e8 	.word	0x2003e5e8
   b454c:	2003e4f8 	.word	0x2003e4f8

000b4550 <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                                                  // Default settings for the device - connected, not-low power and always on
   b4550:	b507      	push	{r0, r1, r2, lr}
   b4552:	f002 faa5 	bl	b6aa0 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   b4556:	b148      	cbz	r0, b456c <_Z17loadAlertDefaultsv+0x1c>
   b4558:	2300      	movs	r3, #0
   b455a:	f88d 3000 	strb.w	r3, [sp]
   b455e:	4b0c      	ldr	r3, [pc, #48]	; (b4590 <_Z17loadAlertDefaultsv+0x40>)
   b4560:	4a0c      	ldr	r2, [pc, #48]	; (b4594 <_Z17loadAlertDefaultsv+0x44>)
   b4562:	781b      	ldrb	r3, [r3, #0]
   b4564:	490c      	ldr	r1, [pc, #48]	; (b4598 <_Z17loadAlertDefaultsv+0x48>)
   b4566:	480d      	ldr	r0, [pc, #52]	; (b459c <_Z17loadAlertDefaultsv+0x4c>)
   b4568:	f7ff fe1b 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  alertsStatus.upperTemperatureThreshold = 30;
   b456c:	4a0c      	ldr	r2, [pc, #48]	; (b45a0 <_Z17loadAlertDefaultsv+0x50>)
   b456e:	4b0d      	ldr	r3, [pc, #52]	; (b45a4 <_Z17loadAlertDefaultsv+0x54>)
   b4570:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   b4572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b4576:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   b4578:	4b0b      	ldr	r3, [pc, #44]	; (b45a8 <_Z17loadAlertDefaultsv+0x58>)
   b457a:	6113      	str	r3, [r2, #16]
   b457c:	480b      	ldr	r0, [pc, #44]	; (b45ac <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   b457e:	4b0c      	ldr	r3, [pc, #48]	; (b45b0 <_Z17loadAlertDefaultsv+0x60>)
   b4580:	6153      	str	r3, [r2, #20]
   b4582:	2150      	movs	r1, #80	; 0x50
   b4584:	2318      	movs	r3, #24
}
   b4586:	b003      	add	sp, #12
   b4588:	f85d eb04 	ldr.w	lr, [sp], #4
   b458c:	f000 bf91 	b.w	b54b2 <_ZN6MB85RC9writeDataEjPKhj>
   b4590:	2003e4b5 	.word	0x2003e4b5
   b4594:	000baeb6 	.word	0x000baeb6
   b4598:	000bae1d 	.word	0x000bae1d
   b459c:	2003e568 	.word	0x2003e568
   b45a0:	2003e4bc 	.word	0x2003e4bc
   b45a4:	41f00000 	.word	0x41f00000
   b45a8:	42b40000 	.word	0x42b40000
   b45ac:	2003e4f8 	.word	0x2003e4f8
   b45b0:	40a00000 	.word	0x40a00000

000b45b4 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   b45b4:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   b45b6:	4c12      	ldr	r4, [pc, #72]	; (b4600 <_Z17checkSystemValuesv+0x4c>)
   b45b8:	7a23      	ldrb	r3, [r4, #8]
   b45ba:	2b01      	cmp	r3, #1
   b45bc:	d904      	bls.n	b45c8 <_Z17checkSystemValuesv+0x14>
   b45be:	f002 fa6f 	bl	b6aa0 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   b45c2:	b1d8      	cbz	r0, b45fc <_Z17checkSystemValuesv+0x48>
   b45c4:	2301      	movs	r3, #1
   b45c6:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   b45c8:	6863      	ldr	r3, [r4, #4]
   b45ca:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   b45ce:	bf84      	itt	hi
   b45d0:	f44f 7316 	movhi.w	r3, #600	; 0x258
   b45d4:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   b45d6:	7a63      	ldrb	r3, [r4, #9]
   b45d8:	2b01      	cmp	r3, #1
   b45da:	bf84      	itt	hi
   b45dc:	2300      	movhi	r3, #0
   b45de:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   b45e0:	7aa3      	ldrb	r3, [r4, #10]
   b45e2:	2b01      	cmp	r3, #1
   b45e4:	bf84      	itt	hi
   b45e6:	2300      	movhi	r3, #0
   b45e8:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b45ea:	6963      	ldr	r3, [r4, #20]
   b45ec:	2bff      	cmp	r3, #255	; 0xff
   b45ee:	bf84      	itt	hi
   b45f0:	2300      	movhi	r3, #0
   b45f2:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   b45f4:	4b03      	ldr	r3, [pc, #12]	; (b4604 <_Z17checkSystemValuesv+0x50>)
   b45f6:	2201      	movs	r2, #1
   b45f8:	701a      	strb	r2, [r3, #0]
}
   b45fa:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   b45fc:	7220      	strb	r0, [r4, #8]
   b45fe:	e7e3      	b.n	b45c8 <_Z17checkSystemValuesv+0x14>
   b4600:	2003e5e8 	.word	0x2003e5e8
   b4604:	2003e604 	.word	0x2003e604

000b4608 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0.0  || alertsStatus.lowerTemperatureThreshold > 20.0) alertsStatus.lowerTemperatureThreshold = 3.0;
   b4608:	4b22      	ldr	r3, [pc, #136]	; (b4694 <_Z17checkAlertsValuesv+0x8c>)
   b460a:	ed93 7a03 	vldr	s14, [r3, #12]
   b460e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   b4612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4616:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   b461a:	d404      	bmi.n	b4626 <_Z17checkAlertsValuesv+0x1e>
   b461c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4624:	dd01      	ble.n	b462a <_Z17checkAlertsValuesv+0x22>
   b4626:	4a1c      	ldr	r2, [pc, #112]	; (b4698 <_Z17checkAlertsValuesv+0x90>)
   b4628:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20.0 || alertsStatus.upperTemperatureThreshold > 90.0) alertsStatus.upperTemperatureThreshold = 33.0;
   b462a:	ed93 7a02 	vldr	s14, [r3, #8]
   b462e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4636:	d406      	bmi.n	b4646 <_Z17checkAlertsValuesv+0x3e>
   b4638:	eddf 6a18 	vldr	s13, [pc, #96]	; b469c <_Z17checkAlertsValuesv+0x94>
   b463c:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4644:	dd01      	ble.n	b464a <_Z17checkAlertsValuesv+0x42>
   b4646:	4a16      	ldr	r2, [pc, #88]	; (b46a0 <_Z17checkAlertsValuesv+0x98>)
   b4648:	609a      	str	r2, [r3, #8]
  if (alertsStatus.lowerHumidityThreshold < 0.0     || alertsStatus.lowerHumidityThreshold > 50.0)    alertsStatus.lowerHumidityThreshold = 13.0;
   b464a:	ed93 7a05 	vldr	s14, [r3, #20]
   b464e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   b4652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4656:	d406      	bmi.n	b4666 <_Z17checkAlertsValuesv+0x5e>
   b4658:	eddf 6a12 	vldr	s13, [pc, #72]	; b46a4 <_Z17checkAlertsValuesv+0x9c>
   b465c:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4664:	dd01      	ble.n	b466a <_Z17checkAlertsValuesv+0x62>
   b4666:	4a10      	ldr	r2, [pc, #64]	; (b46a8 <_Z17checkAlertsValuesv+0xa0>)
   b4668:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20.0    || alertsStatus.upperHumidityThreshold > 90.0)    alertsStatus.upperHumidityThreshold = 63.0;
   b466a:	ed93 7a04 	vldr	s14, [r3, #16]
   b466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4676:	d406      	bmi.n	b4686 <_Z17checkAlertsValuesv+0x7e>
   b4678:	eddf 7a08 	vldr	s15, [pc, #32]	; b469c <_Z17checkAlertsValuesv+0x94>
   b467c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4684:	dd01      	ble.n	b468a <_Z17checkAlertsValuesv+0x82>
   b4686:	4a09      	ldr	r2, [pc, #36]	; (b46ac <_Z17checkAlertsValuesv+0xa4>)
   b4688:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   b468a:	4b09      	ldr	r3, [pc, #36]	; (b46b0 <_Z17checkAlertsValuesv+0xa8>)
   b468c:	2201      	movs	r2, #1
   b468e:	701a      	strb	r2, [r3, #0]
}
   b4690:	4770      	bx	lr
   b4692:	bf00      	nop
   b4694:	2003e4bc 	.word	0x2003e4bc
   b4698:	40400000 	.word	0x40400000
   b469c:	42b40000 	.word	0x42b40000
   b46a0:	42040000 	.word	0x42040000
   b46a4:	42480000 	.word	0x42480000
   b46a8:	41500000 	.word	0x41500000
   b46ac:	427c0000 	.word	0x427c0000
   b46b0:	2003e4d4 	.word	0x2003e4d4

000b46b4 <_Z11petWatchdogv>:
{
   b46b4:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   b46b6:	2101      	movs	r1, #1
   b46b8:	2005      	movs	r0, #5
   b46ba:	f003 fd26 	bl	b810a <digitalWrite>
  digitalWrite(donePin, LOW);
   b46be:	2100      	movs	r1, #0
   b46c0:	2005      	movs	r0, #5
   b46c2:	f003 fd22 	bl	b810a <digitalWrite>
  watchdogFlag = false;
   b46c6:	4a09      	ldr	r2, [pc, #36]	; (b46ec <_Z11petWatchdogv+0x38>)
   b46c8:	2300      	movs	r3, #0
   b46ca:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   b46cc:	4a08      	ldr	r2, [pc, #32]	; (b46f0 <_Z11petWatchdogv+0x3c>)
   b46ce:	7a52      	ldrb	r2, [r2, #9]
   b46d0:	b142      	cbz	r2, b46e4 <_Z11petWatchdogv+0x30>
   b46d2:	f88d 3000 	strb.w	r3, [sp]
   b46d6:	4b07      	ldr	r3, [pc, #28]	; (b46f4 <_Z11petWatchdogv+0x40>)
   b46d8:	4a07      	ldr	r2, [pc, #28]	; (b46f8 <_Z11petWatchdogv+0x44>)
   b46da:	781b      	ldrb	r3, [r3, #0]
   b46dc:	4907      	ldr	r1, [pc, #28]	; (b46fc <_Z11petWatchdogv+0x48>)
   b46de:	4808      	ldr	r0, [pc, #32]	; (b4700 <_Z11petWatchdogv+0x4c>)
   b46e0:	f7ff fd5f 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b46e4:	b003      	add	sp, #12
   b46e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b46ea:	bf00      	nop
   b46ec:	2003e645 	.word	0x2003e645
   b46f0:	2003e5e8 	.word	0x2003e5e8
   b46f4:	2003e4b5 	.word	0x2003e4b5
   b46f8:	000baecd 	.word	0x000baecd
   b46fc:	000baed4 	.word	0x000baed4
   b4700:	2003e568 	.word	0x2003e568

000b4704 <_Z9sendEventv>:
{
   b4704:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   b4706:	4c13      	ldr	r4, [pc, #76]	; (b4754 <_Z9sendEventv+0x50>)
{
   b4708:	b0a0      	sub	sp, #128	; 0x80
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   b470a:	6923      	ldr	r3, [r4, #16]
   b470c:	68e0      	ldr	r0, [r4, #12]
   b470e:	9304      	str	r3, [sp, #16]
   b4710:	f003 ff0e 	bl	b8530 <__aeabi_f2d>
   b4714:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4718:	68a0      	ldr	r0, [r4, #8]
   b471a:	f003 ff09 	bl	b8530 <__aeabi_f2d>
   b471e:	4a0e      	ldr	r2, [pc, #56]	; (b4758 <_Z9sendEventv+0x54>)
   b4720:	e9cd 0100 	strd	r0, r1, [sp]
   b4724:	2164      	movs	r1, #100	; 0x64
   b4726:	a807      	add	r0, sp, #28
   b4728:	f002 fa82 	bl	b6c30 <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   b472c:	2300      	movs	r3, #0
   b472e:	f88d 3000 	strb.w	r3, [sp]
   b4732:	4b0a      	ldr	r3, [pc, #40]	; (b475c <_Z9sendEventv+0x58>)
   b4734:	490a      	ldr	r1, [pc, #40]	; (b4760 <_Z9sendEventv+0x5c>)
   b4736:	781b      	ldrb	r3, [r3, #0]
   b4738:	480a      	ldr	r0, [pc, #40]	; (b4764 <_Z9sendEventv+0x60>)
   b473a:	aa07      	add	r2, sp, #28
   b473c:	f7ff fd31 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  dataInFlight = true;                                                                      // set the data inflight flag
   b4740:	4b09      	ldr	r3, [pc, #36]	; (b4768 <_Z9sendEventv+0x64>)
   b4742:	2201      	movs	r2, #1
   b4744:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4746:	f001 ffc3 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   b474a:	4b08      	ldr	r3, [pc, #32]	; (b476c <_Z9sendEventv+0x68>)
   b474c:	6018      	str	r0, [r3, #0]
}
   b474e:	b020      	add	sp, #128	; 0x80
   b4750:	bd10      	pop	{r4, pc}
   b4752:	bf00      	nop
   b4754:	2003e5c0 	.word	0x2003e5c0
   b4758:	000baedd 	.word	0x000baedd
   b475c:	2003e4b5 	.word	0x2003e4b5
   b4760:	000baf12 	.word	0x000baf12
   b4764:	2003e568 	.word	0x2003e568
   b4768:	2003e4f5 	.word	0x2003e4f5
   b476c:	2003e648 	.word	0x2003e648

000b4770 <_Z8blinkLEDi>:
{
   b4770:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   b4772:	4d0b      	ldr	r5, [pc, #44]	; (b47a0 <_Z8blinkLEDi+0x30>)
{
   b4774:	4604      	mov	r4, r0
   b4776:	f001 ffab 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   b477a:	682b      	ldr	r3, [r5, #0]
   b477c:	1ac0      	subs	r0, r0, r3
   b477e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4782:	d90c      	bls.n	b479e <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   b4784:	b2a4      	uxth	r4, r4
   b4786:	4620      	mov	r0, r4
   b4788:	f003 fcd8 	bl	b813c <digitalRead>
   b478c:	fab0 f180 	clz	r1, r0
   b4790:	0949      	lsrs	r1, r1, #5
   b4792:	4620      	mov	r0, r4
   b4794:	f003 fcb9 	bl	b810a <digitalWrite>
   b4798:	f001 ff9a 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   b479c:	6028      	str	r0, [r5, #0]
}
   b479e:	bd38      	pop	{r3, r4, r5, pc}
   b47a0:	2003e4b8 	.word	0x2003e4b8

000b47a4 <_Z22publishStateTransitionv>:
{
   b47a4:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47a6:	4d11      	ldr	r5, [pc, #68]	; (b47ec <_Z22publishStateTransitionv+0x48>)
   b47a8:	4c11      	ldr	r4, [pc, #68]	; (b47f0 <_Z22publishStateTransitionv+0x4c>)
   b47aa:	4912      	ldr	r1, [pc, #72]	; (b47f4 <_Z22publishStateTransitionv+0x50>)
   b47ac:	782a      	ldrb	r2, [r5, #0]
   b47ae:	7820      	ldrb	r0, [r4, #0]
{
   b47b0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b47b2:	231a      	movs	r3, #26
   b47b4:	fb03 1202 	mla	r2, r3, r2, r1
   b47b8:	9200      	str	r2, [sp, #0]
   b47ba:	fb03 1300 	mla	r3, r3, r0, r1
   b47be:	4a0e      	ldr	r2, [pc, #56]	; (b47f8 <_Z22publishStateTransitionv+0x54>)
   b47c0:	2128      	movs	r1, #40	; 0x28
   b47c2:	a802      	add	r0, sp, #8
   b47c4:	f002 fa34 	bl	b6c30 <snprintf>
  oldState = state;
   b47c8:	782b      	ldrb	r3, [r5, #0]
   b47ca:	7023      	strb	r3, [r4, #0]
   b47cc:	f002 f968 	bl	b6aa0 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   b47d0:	b148      	cbz	r0, b47e6 <_Z22publishStateTransitionv+0x42>
   b47d2:	2300      	movs	r3, #0
   b47d4:	f88d 3000 	strb.w	r3, [sp]
   b47d8:	4b08      	ldr	r3, [pc, #32]	; (b47fc <_Z22publishStateTransitionv+0x58>)
   b47da:	4909      	ldr	r1, [pc, #36]	; (b4800 <_Z22publishStateTransitionv+0x5c>)
   b47dc:	781b      	ldrb	r3, [r3, #0]
   b47de:	4809      	ldr	r0, [pc, #36]	; (b4804 <_Z22publishStateTransitionv+0x60>)
   b47e0:	aa02      	add	r2, sp, #8
   b47e2:	f7ff fcde 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b47e6:	b00d      	add	sp, #52	; 0x34
   b47e8:	bd30      	pop	{r4, r5, pc}
   b47ea:	bf00      	nop
   b47ec:	2003e5e4 	.word	0x2003e5e4
   b47f0:	2003e564 	.word	0x2003e564
   b47f4:	2003e1f8 	.word	0x2003e1f8
   b47f8:	000baf28 	.word	0x000baf28
   b47fc:	2003e4b5 	.word	0x2003e4b5
   b4800:	000baf36 	.word	0x000baf36
   b4804:	2003e568 	.word	0x2003e568

000b4808 <_Z20updateThresholdValuev>:

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   b4808:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   b480a:	4c17      	ldr	r4, [pc, #92]	; (b4868 <_Z20updateThresholdValuev+0x60>)
   b480c:	68a0      	ldr	r0, [r4, #8]
   b480e:	f003 fe8f 	bl	b8530 <__aeabi_f2d>
   b4812:	4a16      	ldr	r2, [pc, #88]	; (b486c <_Z20updateThresholdValuev+0x64>)
   b4814:	e9cd 0100 	strd	r0, r1, [sp]
   b4818:	2118      	movs	r1, #24
   b481a:	4815      	ldr	r0, [pc, #84]	; (b4870 <_Z20updateThresholdValuev+0x68>)
   b481c:	f002 fa08 	bl	b6c30 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   b4820:	68e0      	ldr	r0, [r4, #12]
   b4822:	f003 fe85 	bl	b8530 <__aeabi_f2d>
   b4826:	4a13      	ldr	r2, [pc, #76]	; (b4874 <_Z20updateThresholdValuev+0x6c>)
   b4828:	e9cd 0100 	strd	r0, r1, [sp]
   b482c:	2118      	movs	r1, #24
   b482e:	4812      	ldr	r0, [pc, #72]	; (b4878 <_Z20updateThresholdValuev+0x70>)
   b4830:	f002 f9fe 	bl	b6c30 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   b4834:	6920      	ldr	r0, [r4, #16]
   b4836:	f003 fe7b 	bl	b8530 <__aeabi_f2d>
   b483a:	4a10      	ldr	r2, [pc, #64]	; (b487c <_Z20updateThresholdValuev+0x74>)
   b483c:	e9cd 0100 	strd	r0, r1, [sp]
   b4840:	2118      	movs	r1, #24
   b4842:	480f      	ldr	r0, [pc, #60]	; (b4880 <_Z20updateThresholdValuev+0x78>)
   b4844:	f002 f9f4 	bl	b6c30 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   b4848:	6960      	ldr	r0, [r4, #20]
   b484a:	f003 fe71 	bl	b8530 <__aeabi_f2d>
   b484e:	4a0d      	ldr	r2, [pc, #52]	; (b4884 <_Z20updateThresholdValuev+0x7c>)
   b4850:	e9cd 0100 	strd	r0, r1, [sp]
   b4854:	2118      	movs	r1, #24
   b4856:	480c      	ldr	r0, [pc, #48]	; (b4888 <_Z20updateThresholdValuev+0x80>)
   b4858:	f002 f9ea 	bl	b6c30 <snprintf>
    alertsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   b485c:	4b0b      	ldr	r3, [pc, #44]	; (b488c <_Z20updateThresholdValuev+0x84>)
   b485e:	2201      	movs	r2, #1
   b4860:	701a      	strb	r2, [r3, #0]
} 
   b4862:	b002      	add	sp, #8
   b4864:	bd10      	pop	{r4, pc}
   b4866:	bf00      	nop
   b4868:	2003e4bc 	.word	0x2003e4bc
   b486c:	000baf47 	.word	0x000baf47
   b4870:	2003e62d 	.word	0x2003e62d
   b4874:	000baf58 	.word	0x000baf58
   b4878:	2003e54c 	.word	0x2003e54c
   b487c:	000baf69 	.word	0x000baf69
   b4880:	2003e615 	.word	0x2003e615
   b4884:	000baf7d 	.word	0x000baf7d
   b4888:	2003e534 	.word	0x2003e534
   b488c:	2003e4d4 	.word	0x2003e4d4

000b4890 <_Z17setUpperTempLimit6String>:
{
   b4890:	b500      	push	{lr}
   b4892:	b089      	sub	sp, #36	; 0x24
   b4894:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   b4896:	f003 f89d 	bl	b79d4 <_ZNK6String7toFloatEv>
   b489a:	4b0d      	ldr	r3, [pc, #52]	; (b48d0 <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   b489c:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   b489e:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   b48a2:	a804      	add	r0, sp, #16
   b48a4:	f003 f860 	bl	b7968 <_ZN6StringC1ERKS_>
   b48a8:	2300      	movs	r3, #0
   b48aa:	f88d 3000 	strb.w	r3, [sp]
   b48ae:	4b09      	ldr	r3, [pc, #36]	; (b48d4 <_Z17setUpperTempLimit6String+0x44>)
   b48b0:	9a04      	ldr	r2, [sp, #16]
   b48b2:	781b      	ldrb	r3, [r3, #0]
   b48b4:	4908      	ldr	r1, [pc, #32]	; (b48d8 <_Z17setUpperTempLimit6String+0x48>)
   b48b6:	4809      	ldr	r0, [pc, #36]	; (b48dc <_Z17setUpperTempLimit6String+0x4c>)
   b48b8:	f7ff fc73 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b48bc:	a804      	add	r0, sp, #16
   b48be:	f002 ffe5 	bl	b788c <_ZN6StringD1Ev>
  updateThresholdValue();
   b48c2:	f7ff ffa1 	bl	b4808 <_Z20updateThresholdValuev>
}
   b48c6:	2001      	movs	r0, #1
   b48c8:	b009      	add	sp, #36	; 0x24
   b48ca:	f85d fb04 	ldr.w	pc, [sp], #4
   b48ce:	bf00      	nop
   b48d0:	2003e4bc 	.word	0x2003e4bc
   b48d4:	2003e4b5 	.word	0x2003e4b5
   b48d8:	000baf92 	.word	0x000baf92
   b48dc:	2003e568 	.word	0x2003e568

000b48e0 <_Z17setLowerTempLimit6String>:
{
   b48e0:	b500      	push	{lr}
   b48e2:	b089      	sub	sp, #36	; 0x24
   b48e4:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   b48e6:	f003 f875 	bl	b79d4 <_ZNK6String7toFloatEv>
   b48ea:	4b0d      	ldr	r3, [pc, #52]	; (b4920 <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   b48ec:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   b48ee:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   b48f2:	a804      	add	r0, sp, #16
   b48f4:	f003 f838 	bl	b7968 <_ZN6StringC1ERKS_>
   b48f8:	2300      	movs	r3, #0
   b48fa:	f88d 3000 	strb.w	r3, [sp]
   b48fe:	4b09      	ldr	r3, [pc, #36]	; (b4924 <_Z17setLowerTempLimit6String+0x44>)
   b4900:	9a04      	ldr	r2, [sp, #16]
   b4902:	781b      	ldrb	r3, [r3, #0]
   b4904:	4908      	ldr	r1, [pc, #32]	; (b4928 <_Z17setLowerTempLimit6String+0x48>)
   b4906:	4809      	ldr	r0, [pc, #36]	; (b492c <_Z17setLowerTempLimit6String+0x4c>)
   b4908:	f7ff fc4b 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b490c:	a804      	add	r0, sp, #16
   b490e:	f002 ffbd 	bl	b788c <_ZN6StringD1Ev>
  updateThresholdValue();
   b4912:	f7ff ff79 	bl	b4808 <_Z20updateThresholdValuev>
}
   b4916:	2001      	movs	r0, #1
   b4918:	b009      	add	sp, #36	; 0x24
   b491a:	f85d fb04 	ldr.w	pc, [sp], #4
   b491e:	bf00      	nop
   b4920:	2003e4bc 	.word	0x2003e4bc
   b4924:	2003e4b5 	.word	0x2003e4b5
   b4928:	000bafb2 	.word	0x000bafb2
   b492c:	2003e568 	.word	0x2003e568

000b4930 <_Z21setUpperHumidityLimit6String>:
{
   b4930:	b500      	push	{lr}
   b4932:	b089      	sub	sp, #36	; 0x24
   b4934:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   b4936:	f003 f84d 	bl	b79d4 <_ZNK6String7toFloatEv>
   b493a:	4b0d      	ldr	r3, [pc, #52]	; (b4970 <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   b493c:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   b493e:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   b4942:	a804      	add	r0, sp, #16
   b4944:	f003 f810 	bl	b7968 <_ZN6StringC1ERKS_>
   b4948:	2300      	movs	r3, #0
   b494a:	f88d 3000 	strb.w	r3, [sp]
   b494e:	4b09      	ldr	r3, [pc, #36]	; (b4974 <_Z21setUpperHumidityLimit6String+0x44>)
   b4950:	9a04      	ldr	r2, [sp, #16]
   b4952:	781b      	ldrb	r3, [r3, #0]
   b4954:	4908      	ldr	r1, [pc, #32]	; (b4978 <_Z21setUpperHumidityLimit6String+0x48>)
   b4956:	4809      	ldr	r0, [pc, #36]	; (b497c <_Z21setUpperHumidityLimit6String+0x4c>)
   b4958:	f7ff fc23 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b495c:	a804      	add	r0, sp, #16
   b495e:	f002 ff95 	bl	b788c <_ZN6StringD1Ev>
  updateThresholdValue();
   b4962:	f7ff ff51 	bl	b4808 <_Z20updateThresholdValuev>
}
   b4966:	2001      	movs	r0, #1
   b4968:	b009      	add	sp, #36	; 0x24
   b496a:	f85d fb04 	ldr.w	pc, [sp], #4
   b496e:	bf00      	nop
   b4970:	2003e4bc 	.word	0x2003e4bc
   b4974:	2003e4b5 	.word	0x2003e4b5
   b4978:	000bafd2 	.word	0x000bafd2
   b497c:	2003e568 	.word	0x2003e568

000b4980 <_Z21setLowerHumidityLimit6String>:
{
   b4980:	b500      	push	{lr}
   b4982:	b089      	sub	sp, #36	; 0x24
   b4984:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   b4986:	f003 f825 	bl	b79d4 <_ZNK6String7toFloatEv>
   b498a:	4b0d      	ldr	r3, [pc, #52]	; (b49c0 <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   b498c:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   b498e:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   b4992:	a804      	add	r0, sp, #16
   b4994:	f002 ffe8 	bl	b7968 <_ZN6StringC1ERKS_>
   b4998:	2300      	movs	r3, #0
   b499a:	f88d 3000 	strb.w	r3, [sp]
   b499e:	4b09      	ldr	r3, [pc, #36]	; (b49c4 <_Z21setLowerHumidityLimit6String+0x44>)
   b49a0:	9a04      	ldr	r2, [sp, #16]
   b49a2:	781b      	ldrb	r3, [r3, #0]
   b49a4:	4908      	ldr	r1, [pc, #32]	; (b49c8 <_Z21setLowerHumidityLimit6String+0x48>)
   b49a6:	4809      	ldr	r0, [pc, #36]	; (b49cc <_Z21setLowerHumidityLimit6String+0x4c>)
   b49a8:	f7ff fbfb 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b49ac:	a804      	add	r0, sp, #16
   b49ae:	f002 ff6d 	bl	b788c <_ZN6StringD1Ev>
  updateThresholdValue();
   b49b2:	f7ff ff29 	bl	b4808 <_Z20updateThresholdValuev>
}
   b49b6:	2001      	movs	r0, #1
   b49b8:	b009      	add	sp, #36	; 0x24
   b49ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b49be:	bf00      	nop
   b49c0:	2003e4bc 	.word	0x2003e4bc
   b49c4:	2003e4b5 	.word	0x2003e4b5
   b49c8:	000bafef 	.word	0x000bafef
   b49cc:	2003e568 	.word	0x2003e568

000b49d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b49d0:	b530      	push	{r4, r5, lr}
   b49d2:	b085      	sub	sp, #20
   b49d4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b49d6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b49d8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b49da:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b49dc:	f001 ffe0 	bl	b69a0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b49e0:	b990      	cbnz	r0, b4a08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b49e2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b49e4:	b10c      	cbz	r4, b49ea <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b49e6:	6923      	ldr	r3, [r4, #16]
   b49e8:	b923      	cbnz	r3, b49f4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b49ea:	4a08      	ldr	r2, [pc, #32]	; (b4a0c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b49ec:	4908      	ldr	r1, [pc, #32]	; (b4a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b49ee:	200a      	movs	r0, #10
   b49f0:	f001 ffc6 	bl	b6980 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b49f4:	230c      	movs	r3, #12
   b49f6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b49fa:	2304      	movs	r3, #4
   b49fc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b49fe:	aa01      	add	r2, sp, #4
   b4a00:	6923      	ldr	r3, [r4, #16]
   b4a02:	2101      	movs	r1, #1
   b4a04:	4620      	mov	r0, r4
   b4a06:	4798      	blx	r3
}
   b4a08:	b005      	add	sp, #20
   b4a0a:	bd30      	pop	{r4, r5, pc}
   b4a0c:	000b66c1 	.word	0x000b66c1
   b4a10:	000bb00c 	.word	0x000bb00c

000b4a14 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   b4a14:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4a16:	4d11      	ldr	r5, [pc, #68]	; (b4a5c <_Z17getBatteryContextv+0x48>)
   b4a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   b4a1a:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b4a1c:	ac01      	add	r4, sp, #4
   b4a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b4a28:	4669      	mov	r1, sp
   b4a2a:	2007      	movs	r0, #7
   b4a2c:	f7ff ffd0 	bl	b49d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   b4a30:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   b4a32:	bfa8      	it	ge
   b4a34:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  sysStatus.batteryState = System.batteryState();
   b4a36:	4b0a      	ldr	r3, [pc, #40]	; (b4a60 <_Z17getBatteryContextv+0x4c>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   b4a38:	4a0a      	ldr	r2, [pc, #40]	; (b4a64 <_Z17getBatteryContextv+0x50>)
  sysStatus.batteryState = System.batteryState();
   b4a3a:	7418      	strb	r0, [r3, #16]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   b4a3c:	ab08      	add	r3, sp, #32
   b4a3e:	b2c0      	uxtb	r0, r0
   b4a40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b4a44:	2110      	movs	r1, #16
   b4a46:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   b4a4a:	4807      	ldr	r0, [pc, #28]	; (b4a68 <_Z17getBatteryContextv+0x54>)
   b4a4c:	f002 f8f0 	bl	b6c30 <snprintf>
  sysStatusWriteNeeded = true;
   b4a50:	4b06      	ldr	r3, [pc, #24]	; (b4a6c <_Z17getBatteryContextv+0x58>)
   b4a52:	2201      	movs	r2, #1
   b4a54:	701a      	strb	r2, [r3, #0]
}
   b4a56:	b009      	add	sp, #36	; 0x24
   b4a58:	bd30      	pop	{r4, r5, pc}
   b4a5a:	bf00      	nop
   b4a5c:	000bb268 	.word	0x000bb268
   b4a60:	2003e5e8 	.word	0x2003e5e8
   b4a64:	000bb384 	.word	0x000bb384
   b4a68:	2003e4d5 	.word	0x2003e4d5
   b4a6c:	2003e604 	.word	0x2003e604

000b4a70 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   b4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a72:	ed2d 8b02 	vpush	{d8}
  char thresholdMessage[64] = "All within thresholds";
   b4a76:	4b77      	ldr	r3, [pc, #476]	; (b4c54 <_Z16takeMeasurementsv+0x1e4>)
bool takeMeasurements() {
   b4a78:	b097      	sub	sp, #92	; 0x5c
  char thresholdMessage[64] = "All within thresholds";
   b4a7a:	aa06      	add	r2, sp, #24
   b4a7c:	f103 0510 	add.w	r5, r3, #16
   b4a80:	4617      	mov	r7, r2
   b4a82:	6818      	ldr	r0, [r3, #0]
   b4a84:	6859      	ldr	r1, [r3, #4]
   b4a86:	4614      	mov	r4, r2
   b4a88:	c403      	stmia	r4!, {r0, r1}
   b4a8a:	3308      	adds	r3, #8
   b4a8c:	42ab      	cmp	r3, r5
   b4a8e:	4622      	mov	r2, r4
   b4a90:	d1f7      	bne.n	b4a82 <_Z16takeMeasurementsv+0x12>
   b4a92:	6818      	ldr	r0, [r3, #0]
   b4a94:	889b      	ldrh	r3, [r3, #4]
   b4a96:	6020      	str	r0, [r4, #0]
   b4a98:	80a3      	strh	r3, [r4, #4]
   b4a9a:	222a      	movs	r2, #42	; 0x2a
   b4a9c:	2100      	movs	r1, #0
  sensorData.validData = false;
   b4a9e:	4d6e      	ldr	r5, [pc, #440]	; (b4c58 <_Z16takeMeasurementsv+0x1e8>)
  char thresholdMessage[64] = "All within thresholds";
   b4aa0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   b4aa4:	f004 f93e 	bl	b8d24 <memset>
  sensorData.validData = false;
   b4aa8:	2400      	movs	r4, #0
  if (sht31.readTemperature()){
   b4aaa:	486c      	ldr	r0, [pc, #432]	; (b4c5c <_Z16takeMeasurementsv+0x1ec>)
  sensorData.validData = false;
   b4aac:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   b4aae:	f001 fd6b 	bl	b6588 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4ab2:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4aba:	f000 80aa 	beq.w	b4c12 <_Z16takeMeasurementsv+0x1a2>
    sensorData.temperatureInC = sht31.readTemperature();
   b4abe:	4867      	ldr	r0, [pc, #412]	; (b4c5c <_Z16takeMeasurementsv+0x1ec>)
   b4ac0:	f001 fd62 	bl	b6588 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b4ac4:	ee10 0a10 	vmov	r0, s0
   b4ac8:	ed85 0a02 	vstr	s0, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   b4acc:	f003 fd30 	bl	b8530 <__aeabi_f2d>
   b4ad0:	4a63      	ldr	r2, [pc, #396]	; (b4c60 <_Z16takeMeasurementsv+0x1f0>)
   b4ad2:	e9cd 0100 	strd	r0, r1, [sp]
   b4ad6:	2110      	movs	r1, #16
   b4ad8:	4862      	ldr	r0, [pc, #392]	; (b4c64 <_Z16takeMeasurementsv+0x1f4>)
   b4ada:	f002 f8a9 	bl	b6c30 <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   b4ade:	485f      	ldr	r0, [pc, #380]	; (b4c5c <_Z16takeMeasurementsv+0x1ec>)
   b4ae0:	f001 fd60 	bl	b65a4 <_ZN14Adafruit_SHT3112readHumidityEv>
   b4ae4:	ee10 0a10 	vmov	r0, s0
   b4ae8:	ed85 0a03 	vstr	s0, [r5, #12]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   b4aec:	f003 fd20 	bl	b8530 <__aeabi_f2d>
   b4af0:	4a5d      	ldr	r2, [pc, #372]	; (b4c68 <_Z16takeMeasurementsv+0x1f8>)
   b4af2:	e9cd 0100 	strd	r0, r1, [sp]
   b4af6:	2110      	movs	r1, #16
   b4af8:	485c      	ldr	r0, [pc, #368]	; (b4c6c <_Z16takeMeasurementsv+0x1fc>)
   b4afa:	f002 f899 	bl	b6c30 <snprintf>
   b4afe:	a905      	add	r1, sp, #20
   b4b00:	2003      	movs	r0, #3
   b4b02:	f7ff ff65 	bl	b49d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4b06:	2800      	cmp	r0, #0
   b4b08:	f040 809e 	bne.w	b4c48 <_Z16takeMeasurementsv+0x1d8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4b0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   b4b10:	ee07 3a90 	vmov	s15, r3
   b4b14:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   b4b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   b4b1c:	4e54      	ldr	r6, [pc, #336]	; (b4c70 <_Z16takeMeasurementsv+0x200>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   b4b1e:	4a55      	ldr	r2, [pc, #340]	; (b4c74 <_Z16takeMeasurementsv+0x204>)
   b4b20:	4855      	ldr	r0, [pc, #340]	; (b4c78 <_Z16takeMeasurementsv+0x208>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   b4b22:	edc5 7a04 	vstr	s15, [r5, #16]
   b4b26:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   b4b2a:	2110      	movs	r1, #16
   b4b2c:	f002 f880 	bl	b6c30 <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   b4b30:	ed95 8a02 	vldr	s16, [r5, #8]
   b4b34:	edd6 7a03 	vldr	s15, [r6, #12]
   b4b38:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b40:	f140 8085 	bpl.w	b4c4e <_Z16takeMeasurementsv+0x1de>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   b4b44:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   b4b46:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   b4b4a:	7074      	strb	r4, [r6, #1]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   b4b4c:	f003 fcf0 	bl	b8530 <__aeabi_f2d>
   b4b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4b54:	ee18 0a10 	vmov	r0, s16
   b4b58:	f003 fcea 	bl	b8530 <__aeabi_f2d>
   b4b5c:	4a47      	ldr	r2, [pc, #284]	; (b4c7c <_Z16takeMeasurementsv+0x20c>)
   b4b5e:	e9cd 0100 	strd	r0, r1, [sp]
   b4b62:	2140      	movs	r1, #64	; 0x40
   b4b64:	4638      	mov	r0, r7
   b4b66:	f002 f863 	bl	b6c30 <snprintf>
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   b4b6a:	ed95 8a02 	vldr	s16, [r5, #8]
   b4b6e:	edd6 7a02 	vldr	s15, [r6, #8]
   b4b72:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b7a:	dd12      	ble.n	b4ba2 <_Z16takeMeasurementsv+0x132>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   b4b7c:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   b4b7e:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperTemperatureThresholdCrossed = true;
   b4b82:	7034      	strb	r4, [r6, #0]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   b4b84:	f003 fcd4 	bl	b8530 <__aeabi_f2d>
   b4b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4b8c:	ee18 0a10 	vmov	r0, s16
   b4b90:	f003 fcce 	bl	b8530 <__aeabi_f2d>
   b4b94:	4a3a      	ldr	r2, [pc, #232]	; (b4c80 <_Z16takeMeasurementsv+0x210>)
   b4b96:	e9cd 0100 	strd	r0, r1, [sp]
   b4b9a:	2140      	movs	r1, #64	; 0x40
   b4b9c:	4638      	mov	r0, r7
   b4b9e:	f002 f847 	bl	b6c30 <snprintf>
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   b4ba2:	ed95 8a03 	vldr	s16, [r5, #12]
   b4ba6:	edd6 7a05 	vldr	s15, [r6, #20]
   b4baa:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bb2:	d512      	bpl.n	b4bda <_Z16takeMeasurementsv+0x16a>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   b4bb4:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   b4bb6:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerHumidityThresholdCrossed = true;
   b4bba:	70f4      	strb	r4, [r6, #3]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   b4bbc:	f003 fcb8 	bl	b8530 <__aeabi_f2d>
   b4bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4bc4:	ee18 0a10 	vmov	r0, s16
   b4bc8:	f003 fcb2 	bl	b8530 <__aeabi_f2d>
   b4bcc:	4a2d      	ldr	r2, [pc, #180]	; (b4c84 <_Z16takeMeasurementsv+0x214>)
   b4bce:	e9cd 0100 	strd	r0, r1, [sp]
   b4bd2:	2140      	movs	r1, #64	; 0x40
   b4bd4:	4638      	mov	r0, r7
   b4bd6:	f002 f82b 	bl	b6c30 <snprintf>
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   b4bda:	ed95 8a03 	vldr	s16, [r5, #12]
   b4bde:	edd6 7a04 	vldr	s15, [r6, #16]
   b4be2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bea:	dd12      	ble.n	b4c12 <_Z16takeMeasurementsv+0x1a2>
      alertsStatus.upperHumidityThresholdCrossed = true;
   b4bec:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   b4bee:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperHumidityThresholdCrossed = true;
   b4bf2:	70b4      	strb	r4, [r6, #2]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   b4bf4:	f003 fc9c 	bl	b8530 <__aeabi_f2d>
   b4bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4bfc:	ee18 0a10 	vmov	r0, s16
   b4c00:	f003 fc96 	bl	b8530 <__aeabi_f2d>
   b4c04:	4a20      	ldr	r2, [pc, #128]	; (b4c88 <_Z16takeMeasurementsv+0x218>)
   b4c06:	e9cd 0100 	strd	r0, r1, [sp]
   b4c0a:	2140      	movs	r1, #64	; 0x40
   b4c0c:	4638      	mov	r0, r7
   b4c0e:	f002 f80f 	bl	b6c30 <snprintf>
    sensorData.validData = true;
   b4c12:	2601      	movs	r6, #1
    getBatteryContext();                                                                    // Check what the battery is doing.
   b4c14:	f7ff fefe 	bl	b4a14 <_Z17getBatteryContextv>
    sensorData.validData = true;
   b4c18:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   b4c1a:	f003 f86e 	bl	b7cfa <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   b4c1e:	4b1b      	ldr	r3, [pc, #108]	; (b4c8c <_Z16takeMeasurementsv+0x21c>)
    sensorData.timeStamp = Time.now();
   b4c20:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   b4c22:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   b4c24:	4b1a      	ldr	r3, [pc, #104]	; (b4c90 <_Z16takeMeasurementsv+0x220>)
   b4c26:	701e      	strb	r6, [r3, #0]
    if (haveAnyAlertsBeenSet) publishQueue.publish("Alerts", thresholdMessage,PRIVATE);
   b4c28:	b14c      	cbz	r4, b4c3e <_Z16takeMeasurementsv+0x1ce>
   b4c2a:	2300      	movs	r3, #0
   b4c2c:	f88d 3000 	strb.w	r3, [sp]
   b4c30:	4b18      	ldr	r3, [pc, #96]	; (b4c94 <_Z16takeMeasurementsv+0x224>)
   b4c32:	4919      	ldr	r1, [pc, #100]	; (b4c98 <_Z16takeMeasurementsv+0x228>)
   b4c34:	781b      	ldrb	r3, [r3, #0]
   b4c36:	4819      	ldr	r0, [pc, #100]	; (b4c9c <_Z16takeMeasurementsv+0x22c>)
   b4c38:	463a      	mov	r2, r7
   b4c3a:	f7ff fab2 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b4c3e:	4620      	mov	r0, r4
   b4c40:	b017      	add	sp, #92	; 0x5c
   b4c42:	ecbd 8b02 	vpop	{d8}
   b4c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   b4c48:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4c4c:	e764      	b.n	b4b18 <_Z16takeMeasurementsv+0xa8>
  bool haveAnyAlertsBeenSet = false;
   b4c4e:	2400      	movs	r4, #0
   b4c50:	e78b      	b.n	b4b6a <_Z16takeMeasurementsv+0xfa>
   b4c52:	bf00      	nop
   b4c54:	000bb284 	.word	0x000bb284
   b4c58:	2003e5c0 	.word	0x2003e5c0
   b4c5c:	2003e5d8 	.word	0x2003e5d8
   b4c60:	000bb032 	.word	0x000bb032
   b4c64:	2003e605 	.word	0x2003e605
   b4c68:	000bb03a 	.word	0x000bb03a
   b4c6c:	2003e508 	.word	0x2003e508
   b4c70:	2003e4bc 	.word	0x2003e4bc
   b4c74:	000bb042 	.word	0x000bb042
   b4c78:	2003e4e5 	.word	0x2003e4e5
   b4c7c:	000bb048 	.word	0x000bb048
   b4c80:	000bb065 	.word	0x000bb065
   b4c84:	000bb083 	.word	0x000bb083
   b4c88:	000bb0a4 	.word	0x000bb0a4
   b4c8c:	2003e5d4 	.word	0x2003e5d4
   b4c90:	2003e4d4 	.word	0x2003e4d4
   b4c94:	2003e4b5 	.word	0x2003e4b5
   b4c98:	000bb0c6 	.word	0x000bb0c6
   b4c9c:	2003e568 	.word	0x2003e568

000b4ca0 <loop>:
{
   b4ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch(state) {
   b4ca2:	4c70      	ldr	r4, [pc, #448]	; (b4e64 <loop+0x1c4>)
   b4ca4:	4e70      	ldr	r6, [pc, #448]	; (b4e68 <loop+0x1c8>)
   b4ca6:	7823      	ldrb	r3, [r4, #0]
   b4ca8:	4d70      	ldr	r5, [pc, #448]	; (b4e6c <loop+0x1cc>)
   b4caa:	3b01      	subs	r3, #1
   b4cac:	2b04      	cmp	r3, #4
   b4cae:	d852      	bhi.n	b4d56 <loop+0xb6>
   b4cb0:	e8df f003 	tbb	[pc, r3]
   b4cb4:	311903b4 	.word	0x311903b4
   b4cb8:	80          	.byte	0x80
   b4cb9:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4cba:	4b6d      	ldr	r3, [pc, #436]	; (b4e70 <loop+0x1d0>)
   b4cbc:	7a5b      	ldrb	r3, [r3, #9]
   b4cbe:	b12b      	cbz	r3, b4ccc <loop+0x2c>
   b4cc0:	4b6c      	ldr	r3, [pc, #432]	; (b4e74 <loop+0x1d4>)
   b4cc2:	781b      	ldrb	r3, [r3, #0]
   b4cc4:	2b02      	cmp	r3, #2
   b4cc6:	d001      	beq.n	b4ccc <loop+0x2c>
   b4cc8:	f7ff fd6c 	bl	b47a4 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   b4ccc:	f003 f815 	bl	b7cfa <_ZN9TimeClass3nowEv>
   b4cd0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b4cd4:	fb90 f2f3 	sdiv	r2, r0, r3
   b4cd8:	fb02 0013 	mls	r0, r2, r3, r0
   b4cdc:	2800      	cmp	r0, #0
   b4cde:	d13a      	bne.n	b4d56 <loop+0xb6>
   b4ce0:	2303      	movs	r3, #3
     state = IDLE_STATE;
   b4ce2:	7023      	strb	r3, [r4, #0]
   b4ce4:	e037      	b.n	b4d56 <loop+0xb6>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4ce6:	4b62      	ldr	r3, [pc, #392]	; (b4e70 <loop+0x1d0>)
   b4ce8:	7a5b      	ldrb	r3, [r3, #9]
   b4cea:	b12b      	cbz	r3, b4cf8 <loop+0x58>
   b4cec:	4b61      	ldr	r3, [pc, #388]	; (b4e74 <loop+0x1d4>)
   b4cee:	781b      	ldrb	r3, [r3, #0]
   b4cf0:	2b03      	cmp	r3, #3
   b4cf2:	d001      	beq.n	b4cf8 <loop+0x58>
   b4cf4:	f7ff fd56 	bl	b47a4 <_Z22publishStateTransitionv>
    if (takeMeasurements()) alertsStatus.thresholdCrossedFlag = true;                       // A return of a "true" value indicates that one of the thresholds have been crossed
   b4cf8:	f7ff feba 	bl	b4a70 <_Z16takeMeasurementsv>
   b4cfc:	4601      	mov	r1, r0
   b4cfe:	b128      	cbz	r0, b4d0c <loop+0x6c>
   b4d00:	2301      	movs	r3, #1
   b4d02:	7133      	strb	r3, [r6, #4]
    alertsStatusWriteNeeded = true;
   b4d04:	2301      	movs	r3, #1
   b4d06:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   b4d08:	2304      	movs	r3, #4
   b4d0a:	e7ea      	b.n	b4ce2 <loop+0x42>
      alertsStatus.thresholdCrossedFlag = false;
   b4d0c:	7130      	strb	r0, [r6, #4]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   b4d0e:	2007      	movs	r0, #7
   b4d10:	f003 f9fb 	bl	b810a <digitalWrite>
   b4d14:	e7f6      	b.n	b4d04 <loop+0x64>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   b4d16:	4b56      	ldr	r3, [pc, #344]	; (b4e70 <loop+0x1d0>)
   b4d18:	7a5b      	ldrb	r3, [r3, #9]
   b4d1a:	b12b      	cbz	r3, b4d28 <loop+0x88>
   b4d1c:	4b55      	ldr	r3, [pc, #340]	; (b4e74 <loop+0x1d4>)
   b4d1e:	781b      	ldrb	r3, [r3, #0]
   b4d20:	2b04      	cmp	r3, #4
   b4d22:	d001      	beq.n	b4d28 <loop+0x88>
   b4d24:	f7ff fd3e 	bl	b47a4 <_Z22publishStateTransitionv>
   b4d28:	f001 feba 	bl	b6aa0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b4d2c:	b168      	cbz	r0, b4d4a <loop+0xaa>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   b4d2e:	f002 fff5 	bl	b7d1c <_ZN9TimeClass4hourEv>
   b4d32:	280c      	cmp	r0, #12
   b4d34:	d105      	bne.n	b4d42 <loop+0xa2>
   b4d36:	f001 feb3 	bl	b6aa0 <spark_cloud_flag_connected>
        if (!connected()) {
   b4d3a:	b110      	cbz	r0, b4d42 <loop+0xa2>
        return spark_sync_time(NULL);
   b4d3c:	2000      	movs	r0, #0
   b4d3e:	f001 fecf 	bl	b6ae0 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   b4d42:	f7ff fcdf 	bl	b4704 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   b4d46:	2305      	movs	r3, #5
   b4d48:	e7cb      	b.n	b4ce2 <loop+0x42>
      state = ERROR_STATE;
   b4d4a:	2301      	movs	r3, #1
   b4d4c:	7023      	strb	r3, [r4, #0]
   b4d4e:	f001 fcbf 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b4d52:	4b49      	ldr	r3, [pc, #292]	; (b4e78 <loop+0x1d8>)
   b4d54:	6018      	str	r0, [r3, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   b4d56:	4849      	ldr	r0, [pc, #292]	; (b4e7c <loop+0x1dc>)
   b4d58:	f000 ffae 	bl	b5cb8 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   b4d5c:	4b48      	ldr	r3, [pc, #288]	; (b4e80 <loop+0x1e0>)
   b4d5e:	781b      	ldrb	r3, [r3, #0]
   b4d60:	b10b      	cbz	r3, b4d66 <loop+0xc6>
   b4d62:	f7ff fca7 	bl	b46b4 <_Z11petWatchdogv>
  if (alertsStatus.thresholdCrossedFlag) blinkLED(blueLED);
   b4d66:	7933      	ldrb	r3, [r6, #4]
   b4d68:	b113      	cbz	r3, b4d70 <loop+0xd0>
   b4d6a:	2007      	movs	r0, #7
   b4d6c:	f7ff fd00 	bl	b4770 <_Z8blinkLEDi>
  if (sysStatusWriteNeeded) {
   b4d70:	4c44      	ldr	r4, [pc, #272]	; (b4e84 <loop+0x1e4>)
   b4d72:	7823      	ldrb	r3, [r4, #0]
   b4d74:	b13b      	cbz	r3, b4d86 <loop+0xe6>
   b4d76:	231c      	movs	r3, #28
   b4d78:	4a3d      	ldr	r2, [pc, #244]	; (b4e70 <loop+0x1d0>)
   b4d7a:	4843      	ldr	r0, [pc, #268]	; (b4e88 <loop+0x1e8>)
   b4d7c:	2101      	movs	r1, #1
   b4d7e:	f000 fb98 	bl	b54b2 <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   b4d82:	2300      	movs	r3, #0
   b4d84:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   b4d86:	782b      	ldrb	r3, [r5, #0]
   b4d88:	b13b      	cbz	r3, b4d9a <loop+0xfa>
   b4d8a:	2318      	movs	r3, #24
   b4d8c:	4a36      	ldr	r2, [pc, #216]	; (b4e68 <loop+0x1c8>)
   b4d8e:	483e      	ldr	r0, [pc, #248]	; (b4e88 <loop+0x1e8>)
   b4d90:	2150      	movs	r1, #80	; 0x50
   b4d92:	f000 fb8e 	bl	b54b2 <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   b4d96:	2300      	movs	r3, #0
   b4d98:	702b      	strb	r3, [r5, #0]
  if (sensorDataWriteNeeded) {
   b4d9a:	4c3c      	ldr	r4, [pc, #240]	; (b4e8c <loop+0x1ec>)
   b4d9c:	7823      	ldrb	r3, [r4, #0]
   b4d9e:	b13b      	cbz	r3, b4db0 <loop+0x110>
   b4da0:	2314      	movs	r3, #20
   b4da2:	4a3b      	ldr	r2, [pc, #236]	; (b4e90 <loop+0x1f0>)
   b4da4:	4838      	ldr	r0, [pc, #224]	; (b4e88 <loop+0x1e8>)
   b4da6:	21a0      	movs	r1, #160	; 0xa0
   b4da8:	f000 fb83 	bl	b54b2 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   b4dac:	2300      	movs	r3, #0
   b4dae:	7023      	strb	r3, [r4, #0]
}
   b4db0:	b003      	add	sp, #12
   b4db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b4db4:	4b2e      	ldr	r3, [pc, #184]	; (b4e70 <loop+0x1d0>)
   b4db6:	7a5b      	ldrb	r3, [r3, #9]
   b4db8:	b12b      	cbz	r3, b4dc6 <loop+0x126>
   b4dba:	4b2e      	ldr	r3, [pc, #184]	; (b4e74 <loop+0x1d4>)
   b4dbc:	781b      	ldrb	r3, [r3, #0]
   b4dbe:	2b05      	cmp	r3, #5
   b4dc0:	d001      	beq.n	b4dc6 <loop+0x126>
   b4dc2:	f7ff fcef 	bl	b47a4 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   b4dc6:	4b33      	ldr	r3, [pc, #204]	; (b4e94 <loop+0x1f4>)
   b4dc8:	781b      	ldrb	r3, [r3, #0]
   b4dca:	b953      	cbnz	r3, b4de2 <loop+0x142>
   b4dcc:	f002 ff95 	bl	b7cfa <_ZN9TimeClass3nowEv>
   b4dd0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b4dd4:	fb90 f2f3 	sdiv	r2, r0, r3
   b4dd8:	fb02 0013 	mls	r0, r2, r3, r0
   b4ddc:	b108      	cbz	r0, b4de2 <loop+0x142>
     state = IDLE_STATE;
   b4dde:	2302      	movs	r3, #2
   b4de0:	e77f      	b.n	b4ce2 <loop+0x42>
   b4de2:	f001 fc75 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   b4de6:	4b2c      	ldr	r3, [pc, #176]	; (b4e98 <loop+0x1f8>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	1ac0      	subs	r0, r0, r3
   b4dec:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   b4df0:	4298      	cmp	r0, r3
   b4df2:	d9b0      	bls.n	b4d56 <loop+0xb6>
   b4df4:	f001 fc6c 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
   b4df8:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b4dfa:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   b4dfe:	4f1e      	ldr	r7, [pc, #120]	; (b4e78 <loop+0x1d8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b4e00:	4b26      	ldr	r3, [pc, #152]	; (b4e9c <loop+0x1fc>)
   b4e02:	4a27      	ldr	r2, [pc, #156]	; (b4ea0 <loop+0x200>)
   b4e04:	781b      	ldrb	r3, [r3, #0]
   b4e06:	4927      	ldr	r1, [pc, #156]	; (b4ea4 <loop+0x204>)
      resetTimeStamp = millis();
   b4e08:	6038      	str	r0, [r7, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b4e0a:	4827      	ldr	r0, [pc, #156]	; (b4ea8 <loop+0x208>)
   b4e0c:	f7ff f9c9 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      state = ERROR_STATE;                                                                  // Response timed out
   b4e10:	2301      	movs	r3, #1
   b4e12:	7023      	strb	r3, [r4, #0]
   b4e14:	f001 fc5c 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b4e18:	6038      	str	r0, [r7, #0]
   b4e1a:	e79c      	b.n	b4d56 <loop+0xb6>
    if (state != oldState) publishStateTransition();
   b4e1c:	4b15      	ldr	r3, [pc, #84]	; (b4e74 <loop+0x1d4>)
   b4e1e:	781b      	ldrb	r3, [r3, #0]
   b4e20:	2b01      	cmp	r3, #1
   b4e22:	d001      	beq.n	b4e28 <loop+0x188>
   b4e24:	f7ff fcbe 	bl	b47a4 <_Z22publishStateTransitionv>
   b4e28:	f001 fc52 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   b4e2c:	4b12      	ldr	r3, [pc, #72]	; (b4e78 <loop+0x1d8>)
   b4e2e:	681b      	ldr	r3, [r3, #0]
   b4e30:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   b4e34:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   b4e38:	4283      	cmp	r3, r0
   b4e3a:	d28c      	bcs.n	b4d56 <loop+0xb6>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e3c:	f001 fe30 	bl	b6aa0 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   b4e40:	b148      	cbz	r0, b4e56 <loop+0x1b6>
   b4e42:	2300      	movs	r3, #0
   b4e44:	f88d 3000 	strb.w	r3, [sp]
   b4e48:	4b14      	ldr	r3, [pc, #80]	; (b4e9c <loop+0x1fc>)
   b4e4a:	4a18      	ldr	r2, [pc, #96]	; (b4eac <loop+0x20c>)
   b4e4c:	781b      	ldrb	r3, [r3, #0]
   b4e4e:	4918      	ldr	r1, [pc, #96]	; (b4eb0 <loop+0x210>)
   b4e50:	4815      	ldr	r0, [pc, #84]	; (b4ea8 <loop+0x208>)
   b4e52:	f7ff f9a6 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      delay(2000);
   b4e56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e5a:	f001 ff39 	bl	b6cd0 <delay>
      System.reset();
   b4e5e:	f002 fddb 	bl	b7a18 <_ZN11SystemClass5resetEv>
   b4e62:	e778      	b.n	b4d56 <loop+0xb6>
   b4e64:	2003e5e4 	.word	0x2003e5e4
   b4e68:	2003e4bc 	.word	0x2003e4bc
   b4e6c:	2003e4d4 	.word	0x2003e4d4
   b4e70:	2003e5e8 	.word	0x2003e5e8
   b4e74:	2003e564 	.word	0x2003e564
   b4e78:	2003e5a0 	.word	0x2003e5a0
   b4e7c:	2003e5a4 	.word	0x2003e5a4
   b4e80:	2003e645 	.word	0x2003e645
   b4e84:	2003e604 	.word	0x2003e604
   b4e88:	2003e4f8 	.word	0x2003e4f8
   b4e8c:	2003e5d4 	.word	0x2003e5d4
   b4e90:	2003e5c0 	.word	0x2003e5c0
   b4e94:	2003e4f5 	.word	0x2003e4f5
   b4e98:	2003e648 	.word	0x2003e648
   b4e9c:	2003e4b5 	.word	0x2003e4b5
   b4ea0:	000bb728 	.word	0x000bb728
   b4ea4:	000bb0cd 	.word	0x000bb0cd
   b4ea8:	2003e568 	.word	0x2003e568
   b4eac:	000bb0e6 	.word	0x000bb0e6
   b4eb0:	000bae49 	.word	0x000bae49

000b4eb4 <setup>:
{
   b4eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b4eb8:	2100      	movs	r1, #0
{
   b4eba:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b4ebc:	2008      	movs	r0, #8
   b4ebe:	f003 f913 	bl	b80e8 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   b4ec2:	2101      	movs	r1, #1
   b4ec4:	2005      	movs	r0, #5
   b4ec6:	f003 f90f 	bl	b80e8 <pinMode>
  pinMode(blueLED, OUTPUT);                                                                 // declare the Blue LED Pin as an output
   b4eca:	2101      	movs	r1, #1
   b4ecc:	2007      	movs	r0, #7
   b4ece:	f003 f90b 	bl	b80e8 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   b4ed2:	f7ff fbef 	bl	b46b4 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   b4ed6:	2300      	movs	r3, #0
   b4ed8:	9300      	str	r3, [sp, #0]
   b4eda:	2201      	movs	r2, #1
   b4edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4ee0:	4995      	ldr	r1, [pc, #596]	; (b5138 <setup+0x284>)
   b4ee2:	2008      	movs	r0, #8
   b4ee4:	f002 fb1c 	bl	b7520 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b4ee8:	4b94      	ldr	r3, [pc, #592]	; (b513c <setup+0x288>)
   b4eea:	aa0a      	add	r2, sp, #40	; 0x28
   b4eec:	f103 0510 	add.w	r5, r3, #16
   b4ef0:	4617      	mov	r7, r2
   b4ef2:	6818      	ldr	r0, [r3, #0]
   b4ef4:	6859      	ldr	r1, [r3, #4]
   b4ef6:	4614      	mov	r4, r2
   b4ef8:	c403      	stmia	r4!, {r0, r1}
   b4efa:	3308      	adds	r3, #8
   b4efc:	42ab      	cmp	r3, r5
   b4efe:	4622      	mov	r2, r4
   b4f00:	d1f7      	bne.n	b4ef2 <setup+0x3e>
   b4f02:	8819      	ldrh	r1, [r3, #0]
   b4f04:	789b      	ldrb	r3, [r3, #2]
   b4f06:	70a3      	strb	r3, [r4, #2]
   b4f08:	8021      	strh	r1, [r4, #0]
   b4f0a:	222d      	movs	r2, #45	; 0x2d
   b4f0c:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   b4f0e:	4d8c      	ldr	r5, [pc, #560]	; (b5140 <setup+0x28c>)
   b4f10:	f8df 82fc 	ldr.w	r8, [pc, #764]	; b5210 <setup+0x35c>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b4f14:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   b4f18:	2400      	movs	r4, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b4f1a:	f003 ff03 	bl	b8d24 <memset>
        return spark_deviceID();
   b4f1e:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   b4f20:	702c      	strb	r4, [r5, #0]
   b4f22:	f001 fdc5 	bl	b6ab0 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4f26:	4623      	mov	r3, r4
   b4f28:	227d      	movs	r2, #125	; 0x7d
   b4f2a:	a91a      	add	r1, sp, #104	; 0x68
   b4f2c:	a802      	add	r0, sp, #8
   b4f2e:	f002 fd38 	bl	b79a2 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4f32:	4623      	mov	r3, r4
   b4f34:	4622      	mov	r2, r4
   b4f36:	4983      	ldr	r1, [pc, #524]	; (b5144 <setup+0x290>)
   b4f38:	e9cd 4400 	strd	r4, r4, [sp]
   b4f3c:	a81a      	add	r0, sp, #104	; 0x68
   b4f3e:	f001 fdc7 	bl	b6ad0 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b4f42:	4981      	ldr	r1, [pc, #516]	; (b5148 <setup+0x294>)
   b4f44:	4881      	ldr	r0, [pc, #516]	; (b514c <setup+0x298>)
   b4f46:	f7ff f9f9 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f4a:	4981      	ldr	r1, [pc, #516]	; (b5150 <setup+0x29c>)
   b4f4c:	4881      	ldr	r0, [pc, #516]	; (b5154 <setup+0x2a0>)
   b4f4e:	f7ff f9f5 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f52:	4981      	ldr	r1, [pc, #516]	; (b5158 <setup+0x2a4>)
   b4f54:	4881      	ldr	r0, [pc, #516]	; (b515c <setup+0x2a8>)
   b4f56:	f7ff f9f1 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f5a:	4981      	ldr	r1, [pc, #516]	; (b5160 <setup+0x2ac>)
   b4f5c:	4881      	ldr	r0, [pc, #516]	; (b5164 <setup+0x2b0>)
   b4f5e:	f7ff f9ed 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f62:	4981      	ldr	r1, [pc, #516]	; (b5168 <setup+0x2b4>)
   b4f64:	4881      	ldr	r0, [pc, #516]	; (b516c <setup+0x2b8>)
   b4f66:	f7ff f9e9 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f6a:	4981      	ldr	r1, [pc, #516]	; (b5170 <setup+0x2bc>)
   b4f6c:	4881      	ldr	r0, [pc, #516]	; (b5174 <setup+0x2c0>)
   b4f6e:	f7ff f9e5 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f72:	4981      	ldr	r1, [pc, #516]	; (b5178 <setup+0x2c4>)
   b4f74:	4881      	ldr	r0, [pc, #516]	; (b517c <setup+0x2c8>)
   b4f76:	f7ff f9e1 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f7a:	4981      	ldr	r1, [pc, #516]	; (b5180 <setup+0x2cc>)
   b4f7c:	4881      	ldr	r0, [pc, #516]	; (b5184 <setup+0x2d0>)
   b4f7e:	f7ff f9dd 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b4f82:	4981      	ldr	r1, [pc, #516]	; (b5188 <setup+0x2d4>)
   b4f84:	4881      	ldr	r0, [pc, #516]	; (b518c <setup+0x2d8>)
   b4f86:	f7ff f9d9 	bl	b433c <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4f8a:	4981      	ldr	r1, [pc, #516]	; (b5190 <setup+0x2dc>)
   b4f8c:	4881      	ldr	r0, [pc, #516]	; (b5194 <setup+0x2e0>)
   b4f8e:	4623      	mov	r3, r4
   b4f90:	2202      	movs	r2, #2
   b4f92:	f001 fd6d 	bl	b6a70 <spark_variable>
   b4f96:	4623      	mov	r3, r4
   b4f98:	497f      	ldr	r1, [pc, #508]	; (b5198 <setup+0x2e4>)
   b4f9a:	4880      	ldr	r0, [pc, #512]	; (b519c <setup+0x2e8>)
   b4f9c:	2201      	movs	r2, #1
   b4f9e:	f001 fd67 	bl	b6a70 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4fa2:	4a7f      	ldr	r2, [pc, #508]	; (b51a0 <setup+0x2ec>)
   b4fa4:	497f      	ldr	r1, [pc, #508]	; (b51a4 <setup+0x2f0>)
   b4fa6:	4880      	ldr	r0, [pc, #512]	; (b51a8 <setup+0x2f4>)
   b4fa8:	f001 ff87 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fac:	4a7f      	ldr	r2, [pc, #508]	; (b51ac <setup+0x2f8>)
   b4fae:	4980      	ldr	r1, [pc, #512]	; (b51b0 <setup+0x2fc>)
   b4fb0:	487d      	ldr	r0, [pc, #500]	; (b51a8 <setup+0x2f4>)
   b4fb2:	f001 ff82 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fb6:	4a7f      	ldr	r2, [pc, #508]	; (b51b4 <setup+0x300>)
   b4fb8:	497f      	ldr	r1, [pc, #508]	; (b51b8 <setup+0x304>)
   b4fba:	487b      	ldr	r0, [pc, #492]	; (b51a8 <setup+0x2f4>)
   b4fbc:	f001 ff7d 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fc0:	4a7e      	ldr	r2, [pc, #504]	; (b51bc <setup+0x308>)
   b4fc2:	497f      	ldr	r1, [pc, #508]	; (b51c0 <setup+0x30c>)
   b4fc4:	4878      	ldr	r0, [pc, #480]	; (b51a8 <setup+0x2f4>)
   b4fc6:	f001 ff78 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fca:	4a7e      	ldr	r2, [pc, #504]	; (b51c4 <setup+0x310>)
   b4fcc:	497e      	ldr	r1, [pc, #504]	; (b51c8 <setup+0x314>)
   b4fce:	4876      	ldr	r0, [pc, #472]	; (b51a8 <setup+0x2f4>)
   b4fd0:	f001 ff73 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fd4:	4a7d      	ldr	r2, [pc, #500]	; (b51cc <setup+0x318>)
   b4fd6:	497e      	ldr	r1, [pc, #504]	; (b51d0 <setup+0x31c>)
   b4fd8:	4873      	ldr	r0, [pc, #460]	; (b51a8 <setup+0x2f4>)
   b4fda:	f001 ff6e 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fde:	4a7d      	ldr	r2, [pc, #500]	; (b51d4 <setup+0x320>)
   b4fe0:	497d      	ldr	r1, [pc, #500]	; (b51d8 <setup+0x324>)
   b4fe2:	4871      	ldr	r0, [pc, #452]	; (b51a8 <setup+0x2f4>)
   b4fe4:	f001 ff69 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4fe8:	4a6c      	ldr	r2, [pc, #432]	; (b519c <setup+0x2e8>)
   b4fea:	497c      	ldr	r1, [pc, #496]	; (b51dc <setup+0x328>)
   b4fec:	486e      	ldr	r0, [pc, #440]	; (b51a8 <setup+0x2f4>)
   b4fee:	f001 ff64 	bl	b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                        // Start the real time clock
   b4ff2:	487b      	ldr	r0, [pc, #492]	; (b51e0 <setup+0x32c>)
   b4ff4:	f000 fd58 	bl	b5aa8 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   b4ff8:	4621      	mov	r1, r4
   b4ffa:	4879      	ldr	r0, [pc, #484]	; (b51e0 <setup+0x32c>)
   b4ffc:	f000 fe93 	bl	b5d26 <_ZN8MCP7941010clearAlarmEi>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   b5000:	f002 fe7b 	bl	b7cfa <_ZN9TimeClass3nowEv>
   b5004:	4602      	mov	r2, r0
   b5006:	17c3      	asrs	r3, r0, #31
   b5008:	a806      	add	r0, sp, #24
   b500a:	f002 fd71 	bl	b7af0 <_ZN9TimeClass7timeStrEx>
   b500e:	4975      	ldr	r1, [pc, #468]	; (b51e4 <setup+0x330>)
   b5010:	f898 3000 	ldrb.w	r3, [r8]
   b5014:	9a06      	ldr	r2, [sp, #24]
   b5016:	4874      	ldr	r0, [pc, #464]	; (b51e8 <setup+0x334>)
   b5018:	f88d 4000 	strb.w	r4, [sp]
   b501c:	f7ff f8c1 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5020:	a806      	add	r0, sp, #24
   b5022:	f002 fc33 	bl	b788c <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   b5026:	4871      	ldr	r0, [pc, #452]	; (b51ec <setup+0x338>)
   b5028:	2144      	movs	r1, #68	; 0x44
   b502a:	f001 fa16 	bl	b645a <_ZN14Adafruit_SHT315beginEh>
   b502e:	b948      	cbnz	r0, b5044 <setup+0x190>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   b5030:	496f      	ldr	r1, [pc, #444]	; (b51f0 <setup+0x33c>)
   b5032:	4638      	mov	r0, r7
   b5034:	f003 feb6 	bl	b8da4 <strcpy>
    state = ERROR_STATE;
   b5038:	2301      	movs	r3, #1
   b503a:	702b      	strb	r3, [r5, #0]
   b503c:	f001 fb48 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5040:	4b6c      	ldr	r3, [pc, #432]	; (b51f4 <setup+0x340>)
   b5042:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   b5044:	486c      	ldr	r0, [pc, #432]	; (b51f8 <setup+0x344>)
   b5046:	f000 f9a7 	bl	b5398 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b504a:	2301      	movs	r3, #1
   b504c:	486a      	ldr	r0, [pc, #424]	; (b51f8 <setup+0x344>)
   b504e:	aa06      	add	r2, sp, #24
   b5050:	2100      	movs	r1, #0
   b5052:	f000 f9e3 	bl	b541c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   b5056:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b505a:	2b05      	cmp	r3, #5
   b505c:	d036      	beq.n	b50cc <setup+0x218>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   b505e:	4866      	ldr	r0, [pc, #408]	; (b51f8 <setup+0x344>)
   b5060:	f000 f9a4 	bl	b53ac <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5064:	4a65      	ldr	r2, [pc, #404]	; (b51fc <setup+0x348>)
   b5066:	4864      	ldr	r0, [pc, #400]	; (b51f8 <setup+0x344>)
   b5068:	2304      	movs	r3, #4
   b506a:	2100      	movs	r1, #0
   b506c:	f000 fa21 	bl	b54b2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5070:	2301      	movs	r3, #1
   b5072:	4861      	ldr	r0, [pc, #388]	; (b51f8 <setup+0x344>)
   b5074:	aa06      	add	r2, sp, #24
   b5076:	2100      	movs	r1, #0
   b5078:	f000 f9d0 	bl	b541c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   b507c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5080:	2b05      	cmp	r3, #5
   b5082:	d01e      	beq.n	b50c2 <setup+0x20e>
   b5084:	2301      	movs	r3, #1
   b5086:	702b      	strb	r3, [r5, #0]
  if (sysStatus.thirdPartySim) {
   b5088:	4c5d      	ldr	r4, [pc, #372]	; (b5200 <setup+0x34c>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   b508a:	f7ff fa93 	bl	b45b4 <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   b508e:	f7ff fabb 	bl	b4608 <_Z17checkAlertsValuesv>
  if (sysStatus.thirdPartySim) {
   b5092:	7863      	ldrb	r3, [r4, #1]
   b5094:	b3ab      	cbz	r3, b5102 <setup+0x24e>
        return hal_timer_millis(nullptr);
   b5096:	2000      	movs	r0, #0
   b5098:	f001 fb2a 	bl	b66f0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b509c:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b50a0:	4606      	mov	r6, r0
   b50a2:	2000      	movs	r0, #0
   b50a4:	f001 fb24 	bl	b66f0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b50a8:	1b80      	subs	r0, r0, r6
   b50aa:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b50ae:	4548      	cmp	r0, r9
   b50b0:	f171 0300 	sbcs.w	r3, r1, #0
   b50b4:	d217      	bcs.n	b50e6 <setup+0x232>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50b6:	f001 fcf3 	bl	b6aa0 <spark_cloud_flag_connected>
   b50ba:	b9a0      	cbnz	r0, b50e6 <setup+0x232>
            spark_process();
   b50bc:	f001 fce8 	bl	b6a90 <spark_process>
        while (_while() && !_condition()) {
   b50c0:	e7ef      	b.n	b50a2 <setup+0x1ee>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   b50c2:	f7ff fa19 	bl	b44f8 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   b50c6:	f7ff fa43 	bl	b4550 <_Z17loadAlertDefaultsv>
   b50ca:	e7dd      	b.n	b5088 <setup+0x1d4>
   b50cc:	4a4c      	ldr	r2, [pc, #304]	; (b5200 <setup+0x34c>)
   b50ce:	484a      	ldr	r0, [pc, #296]	; (b51f8 <setup+0x344>)
   b50d0:	231c      	movs	r3, #28
   b50d2:	2101      	movs	r1, #1
   b50d4:	f000 f9a2 	bl	b541c <_ZN6MB85RC8readDataEjPhj>
   b50d8:	4a4a      	ldr	r2, [pc, #296]	; (b5204 <setup+0x350>)
   b50da:	4847      	ldr	r0, [pc, #284]	; (b51f8 <setup+0x344>)
   b50dc:	2318      	movs	r3, #24
   b50de:	2150      	movs	r1, #80	; 0x50
   b50e0:	f000 f99c 	bl	b541c <_ZN6MB85RC8readDataEjPhj>
        return t;
   b50e4:	e7d0      	b.n	b5088 <setup+0x1d4>
   b50e6:	f001 fcdb 	bl	b6aa0 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   b50ea:	6860      	ldr	r0, [r4, #4]
   b50ec:	f7ff f968 	bl	b43c0 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b50f0:	6863      	ldr	r3, [r4, #4]
   b50f2:	4845      	ldr	r0, [pc, #276]	; (b5208 <setup+0x354>)
   b50f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b50f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b50fc:	4359      	muls	r1, r3
   b50fe:	f7ff f8e7 	bl	b42d0 <_ZN5Timer12changePeriodEjj.isra.0>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   b5102:	f7ff fcb5 	bl	b4a70 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   b5106:	f7ff fb7f 	bl	b4808 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   b510a:	7a63      	ldrb	r3, [r4, #9]
   b510c:	b14b      	cbz	r3, b5122 <setup+0x26e>
   b510e:	2300      	movs	r3, #0
   b5110:	f88d 3000 	strb.w	r3, [sp]
   b5114:	493d      	ldr	r1, [pc, #244]	; (b520c <setup+0x358>)
   b5116:	f898 3000 	ldrb.w	r3, [r8]
   b511a:	4833      	ldr	r0, [pc, #204]	; (b51e8 <setup+0x334>)
   b511c:	463a      	mov	r2, r7
   b511e:	f7ff f840 	bl	b41a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   b5122:	782b      	ldrb	r3, [r5, #0]
   b5124:	b90b      	cbnz	r3, b512a <setup+0x276>
   b5126:	2302      	movs	r3, #2
   b5128:	702b      	strb	r3, [r5, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   b512a:	a802      	add	r0, sp, #8
   b512c:	f002 fbae 	bl	b788c <_ZN6StringD1Ev>
}
   b5130:	b03b      	add	sp, #236	; 0xec
   b5132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5136:	bf00      	nop
   b5138:	000b40cd 	.word	0x000b40cd
   b513c:	000bb2c4 	.word	0x000bb2c4
   b5140:	2003e5e4 	.word	0x2003e5e4
   b5144:	000b423d 	.word	0x000b423d
   b5148:	000bb304 	.word	0x000bb304
   b514c:	000bb0fa 	.word	0x000bb0fa
   b5150:	2003e605 	.word	0x2003e605
   b5154:	000bb102 	.word	0x000bb102
   b5158:	2003e508 	.word	0x2003e508
   b515c:	000bb10e 	.word	0x000bb10e
   b5160:	2003e62d 	.word	0x2003e62d
   b5164:	000bb117 	.word	0x000bb117
   b5168:	2003e54c 	.word	0x2003e54c
   b516c:	000bb129 	.word	0x000bb129
   b5170:	2003e615 	.word	0x2003e615
   b5174:	000bb13b 	.word	0x000bb13b
   b5178:	2003e534 	.word	0x2003e534
   b517c:	000bb14a 	.word	0x000bb14a
   b5180:	2003e4e5 	.word	0x2003e4e5
   b5184:	000bb159 	.word	0x000bb159
   b5188:	2003e4d5 	.word	0x2003e4d5
   b518c:	000bb161 	.word	0x000bb161
   b5190:	2003e5ec 	.word	0x2003e5ec
   b5194:	000bb170 	.word	0x000bb170
   b5198:	2003e5e9 	.word	0x2003e5e9
   b519c:	000bae58 	.word	0x000bae58
   b51a0:	000bb17f 	.word	0x000bb17f
   b51a4:	000b40d9 	.word	0x000b40d9
   b51a8:	000b6e8f 	.word	0x000b6e8f
   b51ac:	000bb18b 	.word	0x000bb18b
   b51b0:	000b41bd 	.word	0x000b41bd
   b51b4:	000bb198 	.word	0x000bb198
   b51b8:	000b4891 	.word	0x000b4891
   b51bc:	000bb1a9 	.word	0x000bb1a9
   b51c0:	000b48e1 	.word	0x000b48e1
   b51c4:	000bb1ba 	.word	0x000bb1ba
   b51c8:	000b4981 	.word	0x000b4981
   b51cc:	000bb1cf 	.word	0x000bb1cf
   b51d0:	000b4931 	.word	0x000b4931
   b51d4:	000bae93 	.word	0x000bae93
   b51d8:	000b447d 	.word	0x000b447d
   b51dc:	000b43e1 	.word	0x000b43e1
   b51e0:	2003e5a4 	.word	0x2003e5a4
   b51e4:	000bb1e3 	.word	0x000bb1e3
   b51e8:	2003e568 	.word	0x2003e568
   b51ec:	2003e5d8 	.word	0x2003e5d8
   b51f0:	000bb1e8 	.word	0x000bb1e8
   b51f4:	2003e5a0 	.word	0x2003e5a0
   b51f8:	2003e4f8 	.word	0x2003e4f8
   b51fc:	000bb30c 	.word	0x000bb30c
   b5200:	2003e5e8 	.word	0x2003e5e8
   b5204:	2003e4bc 	.word	0x2003e4bc
   b5208:	2003e518 	.word	0x2003e518
   b520c:	000bb205 	.word	0x000bb205
   b5210:	2003e4b5 	.word	0x2003e4b5

000b5214 <_GLOBAL__sub_I___appProductVersion>:
}
   b5214:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b5216:	4b38      	ldr	r3, [pc, #224]	; (b52f8 <_GLOBAL__sub_I___appProductVersion+0xe4>)
   b5218:	2501      	movs	r5, #1
   b521a:	701d      	strb	r5, [r3, #0]
   b521c:	4b37      	ldr	r3, [pc, #220]	; (b52fc <_GLOBAL__sub_I___appProductVersion+0xe8>)
   b521e:	2202      	movs	r2, #2
   b5220:	b088      	sub	sp, #32
   b5222:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5224:	f002 ff0a 	bl	b803c <spark_protocol_instance>
   b5228:	2300      	movs	r3, #0
   b522a:	461a      	mov	r2, r3
   b522c:	2112      	movs	r1, #18
   b522e:	f002 ff15 	bl	b805c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5232:	f002 ff03 	bl	b803c <spark_protocol_instance>
   b5236:	2300      	movs	r3, #0
   b5238:	461a      	mov	r2, r3
   b523a:	210d      	movs	r1, #13
   b523c:	f002 ff06 	bl	b804c <spark_protocol_set_product_id>
              error_(SYSTEM_ERROR_NONE) {
   b5240:	4b2f      	ldr	r3, [pc, #188]	; (b5300 <_GLOBAL__sub_I___appProductVersion+0xec>)
    SleepResult() {}
   b5242:	4a30      	ldr	r2, [pc, #192]	; (b5304 <_GLOBAL__sub_I___appProductVersion+0xf0>)
   b5244:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5246:	2400      	movs	r4, #0
   b5248:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b524c:	4628      	mov	r0, r5
   b524e:	f001 fbb9 	bl	b69c4 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b5252:	4621      	mov	r1, r4
   b5254:	4628      	mov	r0, r5
   b5256:	f001 fbc5 	bl	b69e4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b525a:	4629      	mov	r1, r5
   b525c:	2004      	movs	r0, #4
   b525e:	f001 fa17 	bl	b6690 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   b5262:	4829      	ldr	r0, [pc, #164]	; (b5308 <_GLOBAL__sub_I___appProductVersion+0xf4>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5264:	4d29      	ldr	r5, [pc, #164]	; (b530c <_GLOBAL__sub_I___appProductVersion+0xf8>)
   b5266:	f001 f8d3 	bl	b6410 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   b526a:	f002 ff91 	bl	b8190 <_Z19__fetch_global_Wirev>
   b526e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5272:	4601      	mov	r1, r0
   b5274:	4623      	mov	r3, r4
   b5276:	4628      	mov	r0, r5
   b5278:	f000 f884 	bl	b5384 <_ZN6MB85RCC1ER7TwoWireji>
   b527c:	4b24      	ldr	r3, [pc, #144]	; (b5310 <_GLOBAL__sub_I___appProductVersion+0xfc>)
   b527e:	602b      	str	r3, [r5, #0]
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   b5280:	f002 ff86 	bl	b8190 <_Z19__fetch_global_Wirev>
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   b5284:	4d23      	ldr	r5, [pc, #140]	; (b5314 <_GLOBAL__sub_I___appProductVersion+0x100>)
   b5286:	4601      	mov	r1, r0
   b5288:	4823      	ldr	r0, [pc, #140]	; (b5318 <_GLOBAL__sub_I___appProductVersion+0x104>)
   b528a:	f000 faf5 	bl	b5878 <_ZN8MCP79410C1ER7TwoWire>
   b528e:	4923      	ldr	r1, [pc, #140]	; (b531c <_GLOBAL__sub_I___appProductVersion+0x108>)
   b5290:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b5294:	4628      	mov	r0, r5
   b5296:	f001 f87b 	bl	b6390 <_ZN25PublishQueueAsyncRetainedC1EPht>
   b529a:	4b21      	ldr	r3, [pc, #132]	; (b5320 <_GLOBAL__sub_I___appProductVersion+0x10c>)
   b529c:	602b      	str	r3, [r5, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b529e:	4b21      	ldr	r3, [pc, #132]	; (b5324 <_GLOBAL__sub_I___appProductVersion+0x110>)
   b52a0:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52a2:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b52a4:	4b20      	ldr	r3, [pc, #128]	; (b5328 <_GLOBAL__sub_I___appProductVersion+0x114>)
   b52a6:	4a21      	ldr	r2, [pc, #132]	; (b532c <_GLOBAL__sub_I___appProductVersion+0x118>)
   b52a8:	601a      	str	r2, [r3, #0]
   b52aa:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b52ae:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52b2:	ae02      	add	r6, sp, #8
   b52b4:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b52b8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b52bc:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b52c0:	e896 0003 	ldmia.w	r6, {r0, r1}
   b52c4:	e882 0003 	stmia.w	r2, {r0, r1}
   b52c8:	4a19      	ldr	r2, [pc, #100]	; (b5330 <_GLOBAL__sub_I___appProductVersion+0x11c>)
   b52ca:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b52cc:	699a      	ldr	r2, [r3, #24]
   b52ce:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b52d0:	4a18      	ldr	r2, [pc, #96]	; (b5334 <_GLOBAL__sub_I___appProductVersion+0x120>)
   b52d2:	619a      	str	r2, [r3, #24]
   b52d4:	711c      	strb	r4, [r3, #4]
   b52d6:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b52d8:	4a17      	ldr	r2, [pc, #92]	; (b5338 <_GLOBAL__sub_I___appProductVersion+0x124>)
      __a = _GLIBCXX_MOVE(__b);
   b52da:	9406      	str	r4, [sp, #24]
   b52dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b52e0:	f103 0008 	add.w	r0, r3, #8
   b52e4:	e9cd 4400 	strd	r4, r4, [sp]
   b52e8:	f001 f982 	bl	b65f0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b52ec:	4628      	mov	r0, r5
   b52ee:	f7ff f829 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
}
   b52f2:	b008      	add	sp, #32
   b52f4:	bd70      	pop	{r4, r5, r6, pc}
   b52f6:	bf00      	nop
   b52f8:	2003e4b5 	.word	0x2003e4b5
   b52fc:	2003e4b4 	.word	0x2003e4b4
   b5300:	2003e4a8 	.word	0x2003e4a8
   b5304:	ffff0000 	.word	0xffff0000
   b5308:	2003e5d8 	.word	0x2003e5d8
   b530c:	2003e4f8 	.word	0x2003e4f8
   b5310:	000bb254 	.word	0x000bb254
   b5314:	2003e568 	.word	0x2003e568
   b5318:	2003e5a4 	.word	0x2003e5a4
   b531c:	2003f400 	.word	0x2003f400
   b5320:	000bb22c 	.word	0x000bb22c
   b5324:	000b42ed 	.word	0x000b42ed
   b5328:	2003e518 	.word	0x2003e518
   b532c:	000bb218 	.word	0x000bb218
   b5330:	000b418b 	.word	0x000b418b
   b5334:	000b419f 	.word	0x000b419f
   b5338:	000b4151 	.word	0x000b4151

000b533c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b533c:	4770      	bx	lr

000b533e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b533e:	b510      	push	{r4, lr}
}
   b5340:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b5342:	4604      	mov	r4, r0
}
   b5344:	f7fe feab 	bl	b409e <_ZdlPvj>
   b5348:	4620      	mov	r0, r4
   b534a:	bd10      	pop	{r4, pc}

000b534c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b534c:	6803      	ldr	r3, [r0, #0]
   b534e:	b2c9      	uxtb	r1, r1
   b5350:	689b      	ldr	r3, [r3, #8]
   b5352:	4718      	bx	r3

000b5354 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b5354:	b40e      	push	{r1, r2, r3}
   b5356:	b500      	push	{lr}
   b5358:	b08c      	sub	sp, #48	; 0x30
   b535a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b535c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b5360:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b5364:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5366:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b536a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b536c:	6801      	ldr	r1, [r0, #0]
   b536e:	aa04      	add	r2, sp, #16
   b5370:	201e      	movs	r0, #30
    attr.flags = 0;
   b5372:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5376:	f001 fb0b 	bl	b6990 <log_message_v>
}
   b537a:	b00c      	add	sp, #48	; 0x30
   b537c:	f85d eb04 	ldr.w	lr, [sp], #4
   b5380:	b003      	add	sp, #12
   b5382:	4770      	bx	lr

000b5384 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b5384:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b5386:	4d03      	ldr	r5, [pc, #12]	; (b5394 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b5388:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b538c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b5390:	bd30      	pop	{r4, r5, pc}
   b5392:	bf00      	nop
   b5394:	000bb344 	.word	0x000bb344

000b5398 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b5398:	6840      	ldr	r0, [r0, #4]
   b539a:	f002 b86d 	b.w	b7478 <_ZN7TwoWire5beginEv>

000b539e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b539e:	b510      	push	{r4, lr}
   b53a0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b53a2:	6800      	ldr	r0, [r0, #0]
   b53a4:	f002 f8b1 	bl	b750a <_ZN7TwoWire6unlockEv>
   b53a8:	4620      	mov	r0, r4
   b53aa:	bd10      	pop	{r4, pc}

000b53ac <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b53ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b53b0:	b08a      	sub	sp, #40	; 0x28
   b53b2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b53b4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b53b8:	f002 f89e 	bl	b74f8 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b53bc:	221e      	movs	r2, #30
   b53be:	2100      	movs	r1, #0
   b53c0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b53c2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b53c4:	f003 fcae 	bl	b8d24 <memset>
		size_t framAddr = 0;
   b53c8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b53ca:	b1ef      	cbz	r7, b5408 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b53cc:	6823      	ldr	r3, [r4, #0]
   b53ce:	2f1e      	cmp	r7, #30
   b53d0:	46b8      	mov	r8, r7
   b53d2:	bf28      	it	cs
   b53d4:	f04f 081e 	movcs.w	r8, #30
   b53d8:	68dd      	ldr	r5, [r3, #12]
   b53da:	aa02      	add	r2, sp, #8
   b53dc:	4643      	mov	r3, r8
   b53de:	4631      	mov	r1, r6
   b53e0:	4620      	mov	r0, r4
   b53e2:	47a8      	blx	r5
			if (!result) {
   b53e4:	4605      	mov	r5, r0
   b53e6:	b958      	cbnz	r0, b5400 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b53e8:	480a      	ldr	r0, [pc, #40]	; (b5414 <_ZN6MB85RC5eraseEv+0x68>)
   b53ea:	490b      	ldr	r1, [pc, #44]	; (b5418 <_ZN6MB85RC5eraseEv+0x6c>)
   b53ec:	4632      	mov	r2, r6
   b53ee:	f7ff ffb1 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b53f2:	a801      	add	r0, sp, #4
   b53f4:	f7ff ffd3 	bl	b539e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b53f8:	4628      	mov	r0, r5
   b53fa:	b00a      	add	sp, #40	; 0x28
   b53fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b5400:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b5404:	4446      	add	r6, r8
		while(totalLen > 0) {
   b5406:	e7e0      	b.n	b53ca <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b5408:	a801      	add	r0, sp, #4
   b540a:	f7ff ffc8 	bl	b539e <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b540e:	2501      	movs	r5, #1
   b5410:	e7f2      	b.n	b53f8 <_ZN6MB85RC5eraseEv+0x4c>
   b5412:	bf00      	nop
   b5414:	2003e690 	.word	0x2003e690
   b5418:	000bb310 	.word	0x000bb310

000b541c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b541c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5420:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5422:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5424:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5426:	460d      	mov	r5, r1
   b5428:	4616      	mov	r6, r2
   b542a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b542c:	f002 f864 	bl	b74f8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b5430:	b1a7      	cbz	r7, b545c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5432:	68e1      	ldr	r1, [r4, #12]
   b5434:	6860      	ldr	r0, [r4, #4]
   b5436:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b543a:	f002 f853 	bl	b74e4 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b543e:	0a29      	lsrs	r1, r5, #8
   b5440:	6860      	ldr	r0, [r4, #4]
   b5442:	f7ff ff83 	bl	b534c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5446:	4629      	mov	r1, r5
   b5448:	6860      	ldr	r0, [r4, #4]
   b544a:	f7ff ff7f 	bl	b534c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b544e:	6860      	ldr	r0, [r4, #4]
   b5450:	2100      	movs	r1, #0
   b5452:	f002 f84a 	bl	b74ea <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5456:	b148      	cbz	r0, b546c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b5458:	2400      	movs	r4, #0
   b545a:	e000      	b.n	b545e <_ZN6MB85RC8readDataEjPhj+0x42>
   b545c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b545e:	a801      	add	r0, sp, #4
   b5460:	f7ff ff9d 	bl	b539e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b5464:	4620      	mov	r0, r4
   b5466:	b003      	add	sp, #12
   b5468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b546c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b546e:	7b21      	ldrb	r1, [r4, #12]
   b5470:	6860      	ldr	r0, [r4, #4]
   b5472:	46b8      	mov	r8, r7
   b5474:	bf28      	it	cs
   b5476:	f04f 0820 	movcs.w	r8, #32
   b547a:	2301      	movs	r3, #1
   b547c:	4642      	mov	r2, r8
   b547e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5482:	f002 f816 	bl	b74b2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b5486:	f002 fe83 	bl	b8190 <_Z19__fetch_global_Wirev>
   b548a:	6803      	ldr	r3, [r0, #0]
   b548c:	691b      	ldr	r3, [r3, #16]
   b548e:	4798      	blx	r3
   b5490:	4540      	cmp	r0, r8
   b5492:	dbe1      	blt.n	b5458 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b5494:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b5498:	f002 fe7a 	bl	b8190 <_Z19__fetch_global_Wirev>
   b549c:	6803      	ldr	r3, [r0, #0]
   b549e:	695b      	ldr	r3, [r3, #20]
   b54a0:	4798      	blx	r3
   b54a2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b54a6:	454e      	cmp	r6, r9
   b54a8:	d1f6      	bne.n	b5498 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b54aa:	4445      	add	r5, r8
				dataLen--;
   b54ac:	eba7 0708 	sub.w	r7, r7, r8
   b54b0:	e7be      	b.n	b5430 <_ZN6MB85RC8readDataEjPhj+0x14>

000b54b2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b54b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54b6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b54b8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b54ba:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b54bc:	460e      	mov	r6, r1
   b54be:	4690      	mov	r8, r2
   b54c0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b54c2:	f002 f819 	bl	b74f8 <_ZN7TwoWire4lockEv>
   b54c6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b54ca:	f1b9 0f00 	cmp.w	r9, #0
   b54ce:	d02a      	beq.n	b5526 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b54d0:	b34d      	cbz	r5, b5526 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b54d2:	68e1      	ldr	r1, [r4, #12]
   b54d4:	6860      	ldr	r0, [r4, #4]
   b54d6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b54da:	f002 f803 	bl	b74e4 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b54de:	0a31      	lsrs	r1, r6, #8
   b54e0:	6860      	ldr	r0, [r4, #4]
   b54e2:	f7ff ff33 	bl	b534c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b54e6:	6860      	ldr	r0, [r4, #4]
   b54e8:	4631      	mov	r1, r6
   b54ea:	f7ff ff2f 	bl	b534c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b54ee:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b54f2:	4647      	mov	r7, r8
   b54f4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b54f8:	6860      	ldr	r0, [r4, #4]
   b54fa:	f817 1b01 	ldrb.w	r1, [r7], #1
   b54fe:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b5500:	3d01      	subs	r5, #1
				wire.write(*data);
   b5502:	689b      	ldr	r3, [r3, #8]
   b5504:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5506:	4555      	cmp	r5, sl
   b5508:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b550c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b550e:	d001      	beq.n	b5514 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b5510:	2d00      	cmp	r5, #0
   b5512:	d1f1      	bne.n	b54f8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b5514:	6860      	ldr	r0, [r4, #4]
   b5516:	2101      	movs	r1, #1
   b5518:	f001 ffe7 	bl	b74ea <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b551c:	2800      	cmp	r0, #0
   b551e:	d0d7      	beq.n	b54d0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b5520:	f04f 0900 	mov.w	r9, #0
   b5524:	e7d1      	b.n	b54ca <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b5526:	a801      	add	r0, sp, #4
   b5528:	f7ff ff39 	bl	b539e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b552c:	4648      	mov	r0, r9
   b552e:	b003      	add	sp, #12
   b5530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5534 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5538:	b08b      	sub	sp, #44	; 0x2c
   b553a:	460e      	mov	r6, r1
   b553c:	4615      	mov	r5, r2
   b553e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b5540:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5542:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5544:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b5546:	f001 ffd7 	bl	b74f8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b554a:	42ae      	cmp	r6, r5
   b554c:	d229      	bcs.n	b55a2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b554e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b5550:	4425      	add	r5, r4
			while(numBytes > 0) {
   b5552:	b18c      	cbz	r4, b5578 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b5554:	2c1e      	cmp	r4, #30
   b5556:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b5558:	f8d8 3000 	ldr.w	r3, [r8]
   b555c:	bf28      	it	cs
   b555e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b5560:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b5562:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5566:	aa02      	add	r2, sp, #8
   b5568:	463b      	mov	r3, r7
   b556a:	4631      	mov	r1, r6
   b556c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b556e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b5570:	47c8      	blx	r9
				if (!result) {
   b5572:	b948      	cbnz	r0, b5588 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5574:	2400      	movs	r4, #0
   b5576:	e000      	b.n	b557a <_ZN6MB85RC8moveDataEjjj+0x46>
   b5578:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b557a:	a801      	add	r0, sp, #4
   b557c:	f7ff ff0f 	bl	b539e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b5580:	4620      	mov	r0, r4
   b5582:	b00b      	add	sp, #44	; 0x2c
   b5584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b5588:	f8d8 3000 	ldr.w	r3, [r8]
   b558c:	aa02      	add	r2, sp, #8
   b558e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5592:	4629      	mov	r1, r5
   b5594:	463b      	mov	r3, r7
   b5596:	4640      	mov	r0, r8
   b5598:	47c8      	blx	r9
				if (!result) {
   b559a:	2800      	cmp	r0, #0
   b559c:	d0ea      	beq.n	b5574 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b559e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b55a0:	e7d7      	b.n	b5552 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b55a2:	d9e9      	bls.n	b5578 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b55a4:	2c00      	cmp	r4, #0
   b55a6:	d0e7      	beq.n	b5578 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b55a8:	f8d8 3000 	ldr.w	r3, [r8]
   b55ac:	2c1e      	cmp	r4, #30
   b55ae:	4627      	mov	r7, r4
   b55b0:	bf28      	it	cs
   b55b2:	271e      	movcs	r7, #30
   b55b4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b55b8:	aa02      	add	r2, sp, #8
   b55ba:	463b      	mov	r3, r7
   b55bc:	4631      	mov	r1, r6
   b55be:	4640      	mov	r0, r8
   b55c0:	47c8      	blx	r9
				if (!result) {
   b55c2:	2800      	cmp	r0, #0
   b55c4:	d0d6      	beq.n	b5574 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b55c6:	f8d8 3000 	ldr.w	r3, [r8]
   b55ca:	aa02      	add	r2, sp, #8
   b55cc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b55d0:	4629      	mov	r1, r5
   b55d2:	463b      	mov	r3, r7
   b55d4:	4640      	mov	r0, r8
   b55d6:	47c8      	blx	r9
				if (!result) {
   b55d8:	2800      	cmp	r0, #0
   b55da:	d0cb      	beq.n	b5574 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b55dc:	443e      	add	r6, r7
				framAddrTo += count;
   b55de:	443d      	add	r5, r7
				numBytes -= count;
   b55e0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b55e2:	e7df      	b.n	b55a4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b55e4 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   b55e4:	2040      	movs	r0, #64	; 0x40
   b55e6:	4770      	bx	lr

000b55e8 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   b55e8:	2000      	movs	r0, #0
   b55ea:	4770      	bx	lr

000b55ec <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   b55ec:	2080      	movs	r0, #128	; 0x80
   b55ee:	4770      	bx	lr

000b55f0 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   b55f0:	20ff      	movs	r0, #255	; 0xff
   b55f2:	4770      	bx	lr

000b55f4 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   b55f4:	4770      	bx	lr

000b55f6 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   b55f6:	4770      	bx	lr

000b55f8 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   b55f8:	4770      	bx	lr

000b55fa <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   b55fa:	4770      	bx	lr

000b55fc <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   b55fc:	b510      	push	{r4, lr}
}
   b55fe:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   b5600:	4604      	mov	r4, r0
}
   b5602:	f7fe fd4c 	bl	b409e <_ZdlPvj>
   b5606:	4620      	mov	r0, r4
   b5608:	bd10      	pop	{r4, pc}

000b560a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   b560a:	b510      	push	{r4, lr}
}
   b560c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   b560e:	4604      	mov	r4, r0
}
   b5610:	f7fe fd45 	bl	b409e <_ZdlPvj>
   b5614:	4620      	mov	r0, r4
   b5616:	bd10      	pop	{r4, pc}

000b5618 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   b5618:	b510      	push	{r4, lr}
}
   b561a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   b561c:	4604      	mov	r4, r0
}
   b561e:	f7fe fd3e 	bl	b409e <_ZdlPvj>
   b5622:	4620      	mov	r0, r4
   b5624:	bd10      	pop	{r4, pc}

000b5626 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   b5626:	b510      	push	{r4, lr}
}
   b5628:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   b562a:	4604      	mov	r4, r0
}
   b562c:	f7fe fd37 	bl	b409e <_ZdlPvj>
   b5630:	4620      	mov	r0, r4
   b5632:	bd10      	pop	{r4, pc}

000b5634 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   b5634:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   b5638:	6803      	ldr	r3, [r0, #0]
   b563a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   b563c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   b563e:	4798      	blx	r3
   b5640:	2210      	movs	r2, #16
   b5642:	4601      	mov	r1, r0
   b5644:	4668      	mov	r0, sp
   b5646:	f003 fb6d 	bl	b8d24 <memset>
	size_t len = length();
   b564a:	6823      	ldr	r3, [r4, #0]
   b564c:	4620      	mov	r0, r4
   b564e:	689b      	ldr	r3, [r3, #8]
   b5650:	4798      	blx	r3
	size_t offset = 0;
   b5652:	2500      	movs	r5, #0
	size_t len = length();
   b5654:	4607      	mov	r7, r0
	bool bResult = false;
   b5656:	4628      	mov	r0, r5
	while(offset < len) {
   b5658:	42bd      	cmp	r5, r7
   b565a:	d20e      	bcs.n	b567a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   b565c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   b565e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   b5660:	2e10      	cmp	r6, #16
   b5662:	bf28      	it	cs
   b5664:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   b5666:	f8d3 8018 	ldr.w	r8, [r3, #24]
   b566a:	466a      	mov	r2, sp
   b566c:	4633      	mov	r3, r6
   b566e:	4629      	mov	r1, r5
   b5670:	4620      	mov	r0, r4
   b5672:	47c0      	blx	r8
		if (!bResult) {
   b5674:	b108      	cbz	r0, b567a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   b5676:	4435      	add	r5, r6
	while(offset < len) {
   b5678:	e7ee      	b.n	b5658 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   b567a:	b004      	add	sp, #16
   b567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5680 <_ZN7TwoWire5writeEj.isra.0>:
   b5680:	6803      	ldr	r3, [r0, #0]
   b5682:	b2c9      	uxtb	r1, r1
   b5684:	689b      	ldr	r3, [r3, #8]
   b5686:	4718      	bx	r3

000b5688 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   b5688:	f44f 7380 	mov.w	r3, #256	; 0x100
   b568c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   b568e:	f240 1301 	movw	r3, #257	; 0x101
   b5692:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   b5694:	2300      	movs	r3, #0
   b5696:	8203      	strh	r3, [r0, #16]
}
   b5698:	4770      	bx	lr
	...

000b569c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   b569c:	4a06      	ldr	r2, [pc, #24]	; (b56b8 <_ZN12MCP79410TimeC1Ev+0x1c>)
   b569e:	6002      	str	r2, [r0, #0]
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4a06      	ldr	r2, [pc, #24]	; (b56bc <_ZN12MCP79410TimeC1Ev+0x20>)
   b56a4:	6042      	str	r2, [r0, #4]
   b56a6:	f240 7204 	movw	r2, #1796	; 0x704
   b56aa:	8102      	strh	r2, [r0, #8]
   b56ac:	2200      	movs	r2, #0
   b56ae:	7442      	strb	r2, [r0, #17]
	clear();
   b56b0:	f7ff ffea 	bl	b5688 <_ZN12MCP79410Time5clearEv>
}
   b56b4:	bd08      	pop	{r3, pc}
   b56b6:	bf00      	nop
   b56b8:	000bb424 	.word	0x000bb424
   b56bc:	03020100 	.word	0x03020100

000b56c0 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b56c0:	0903      	lsrs	r3, r0, #4
}
   b56c2:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b56c4:	f000 000f 	and.w	r0, r0, #15
}
   b56c8:	fb02 0003 	mla	r0, r2, r3, r0
   b56cc:	4770      	bx	lr

000b56ce <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   b56ce:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   b56d0:	7a80      	ldrb	r0, [r0, #10]
   b56d2:	f7ff fff5 	bl	b56c0 <_ZN12MCP79410Time8bcdToIntEh>
}
   b56d6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   b56da:	bd08      	pop	{r3, pc}

000b56dc <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   b56dc:	7ac0      	ldrb	r0, [r0, #11]
   b56de:	f000 001f 	and.w	r0, r0, #31
   b56e2:	f7ff bfed 	b.w	b56c0 <_ZN12MCP79410Time8bcdToIntEh>

000b56e6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   b56e6:	7b00      	ldrb	r0, [r0, #12]
   b56e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   b56ec:	f7ff bfe8 	b.w	b56c0 <_ZN12MCP79410Time8bcdToIntEh>

000b56f0 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   b56f0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   b56f2:	7b81      	ldrb	r1, [r0, #14]
   b56f4:	064a      	lsls	r2, r1, #25
   b56f6:	d50d      	bpl.n	b5714 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   b56f8:	f001 001f 	and.w	r0, r1, #31
   b56fc:	f7ff ffe0 	bl	b56c0 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   b5700:	068b      	lsls	r3, r1, #26
   b5702:	d503      	bpl.n	b570c <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   b5704:	280c      	cmp	r0, #12
   b5706:	d000      	beq.n	b570a <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   b5708:	300c      	adds	r0, #12
}
   b570a:	bd08      	pop	{r3, pc}
				return 0;
   b570c:	280c      	cmp	r0, #12
   b570e:	bf08      	it	eq
   b5710:	2000      	moveq	r0, #0
   b5712:	e7fa      	b.n	b570a <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   b5714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   b5718:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   b571c:	f7ff bfd0 	b.w	b56c0 <_ZN12MCP79410Time8bcdToIntEh>

000b5720 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   b5720:	7bc0      	ldrb	r0, [r0, #15]
   b5722:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b5726:	f7ff bfcb 	b.w	b56c0 <_ZN12MCP79410Time8bcdToIntEh>

000b572a <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   b572a:	7c00      	ldrb	r0, [r0, #16]
   b572c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b5730:	f7ff bfc6 	b.w	b56c0 <_ZN12MCP79410Time8bcdToIntEh>

000b5734 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   b5734:	b510      	push	{r4, lr}
   b5736:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   b5738:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   b573a:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   b573c:	2100      	movs	r1, #0
   b573e:	a801      	add	r0, sp, #4
   b5740:	f003 faf0 	bl	b8d24 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   b5744:	4620      	mov	r0, r4
   b5746:	f7ff ffc2 	bl	b56ce <_ZNK12MCP79410Time7getYearEv>
   b574a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   b574e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ffc3 	bl	b56dc <_ZNK12MCP79410Time8getMonthEv>
   b5756:	3801      	subs	r0, #1
   b5758:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   b575a:	4620      	mov	r0, r4
   b575c:	f7ff ffc3 	bl	b56e6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   b5760:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   b5762:	4620      	mov	r0, r4
   b5764:	f7ff ffc4 	bl	b56f0 <_ZNK12MCP79410Time7getHourEv>
   b5768:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   b576a:	4620      	mov	r0, r4
   b576c:	f7ff ffd8 	bl	b5720 <_ZNK12MCP79410Time9getMinuteEv>
   b5770:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   b5772:	4620      	mov	r0, r4
   b5774:	f7ff ffd9 	bl	b572a <_ZNK12MCP79410Time9getSecondEv>
   b5778:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   b577a:	a801      	add	r0, sp, #4
   b577c:	f001 faa0 	bl	b6cc0 <mktime>
}
   b5780:	b00a      	add	sp, #40	; 0x28
   b5782:	bd10      	pop	{r4, pc}

000b5784 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   b5784:	220a      	movs	r2, #10
   b5786:	fb90 f1f2 	sdiv	r1, r0, r2
   b578a:	fb91 f3f2 	sdiv	r3, r1, r2
   b578e:	fb02 1313 	mls	r3, r2, r3, r1
   b5792:	011b      	lsls	r3, r3, #4
   b5794:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   b5796:	fb02 0011 	mls	r0, r2, r1, r0
   b579a:	4318      	orrs	r0, r3
}
   b579c:	b2c0      	uxtb	r0, r0
   b579e:	4770      	bx	lr

000b57a0 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   b57a0:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   b57a2:	b510      	push	{r4, lr}
   b57a4:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   b57a6:	fb91 f0f3 	sdiv	r0, r1, r3
   b57aa:	fb00 1013 	mls	r0, r0, r3, r1
   b57ae:	f7ff ffe9 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
   b57b2:	72a0      	strb	r0, [r4, #10]
}
   b57b4:	bd10      	pop	{r4, pc}

000b57b6 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   b57b6:	b510      	push	{r4, lr}
   b57b8:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   b57ba:	4608      	mov	r0, r1
   b57bc:	f7ff ffe2 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
   b57c0:	72e0      	strb	r0, [r4, #11]
}
   b57c2:	bd10      	pop	{r4, pc}

000b57c4 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   b57c4:	b510      	push	{r4, lr}
   b57c6:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   b57c8:	4608      	mov	r0, r1
   b57ca:	f7ff ffdb 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   b57ce:	7b23      	ldrb	r3, [r4, #12]
   b57d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   b57d4:	4318      	orrs	r0, r3
   b57d6:	7320      	strb	r0, [r4, #12]
}
   b57d8:	bd10      	pop	{r4, pc}

000b57da <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   b57da:	b510      	push	{r4, lr}
   b57dc:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   b57de:	1c48      	adds	r0, r1, #1
   b57e0:	f7ff ffd0 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   b57e4:	7b63      	ldrb	r3, [r4, #13]
   b57e6:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   b57ea:	4318      	orrs	r0, r3
   b57ec:	7360      	strb	r0, [r4, #13]
}
   b57ee:	bd10      	pop	{r4, pc}

000b57f0 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   b57f0:	b510      	push	{r4, lr}
   b57f2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   b57f4:	4608      	mov	r0, r1
   b57f6:	f7ff ffc5 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
   b57fa:	73a0      	strb	r0, [r4, #14]
}
   b57fc:	bd10      	pop	{r4, pc}

000b57fe <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   b57fe:	b510      	push	{r4, lr}
   b5800:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   b5802:	4608      	mov	r0, r1
   b5804:	f7ff ffbe 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
   b5808:	73e0      	strb	r0, [r4, #15]
}
   b580a:	bd10      	pop	{r4, pc}

000b580c <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   b580c:	b510      	push	{r4, lr}
   b580e:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   b5810:	4608      	mov	r0, r1
   b5812:	f7ff ffb7 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   b5816:	7c23      	ldrb	r3, [r4, #16]
   b5818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   b581c:	4318      	orrs	r0, r3
   b581e:	7420      	strb	r0, [r4, #16]
}
   b5820:	bd10      	pop	{r4, pc}

000b5822 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   b5822:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5824:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   b5826:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   b5828:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   b582c:	f003 fa34 	bl	b8c98 <gmtime>
   b5830:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   b5832:	6941      	ldr	r1, [r0, #20]
   b5834:	4620      	mov	r0, r4
   b5836:	f7ff ffb3 	bl	b57a0 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   b583a:	6929      	ldr	r1, [r5, #16]
   b583c:	4620      	mov	r0, r4
   b583e:	3101      	adds	r1, #1
   b5840:	f7ff ffb9 	bl	b57b6 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   b5844:	68e9      	ldr	r1, [r5, #12]
   b5846:	4620      	mov	r0, r4
   b5848:	f7ff ffbc 	bl	b57c4 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   b584c:	69a9      	ldr	r1, [r5, #24]
   b584e:	4620      	mov	r0, r4
   b5850:	f7ff ffc3 	bl	b57da <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   b5854:	68a9      	ldr	r1, [r5, #8]
   b5856:	4620      	mov	r0, r4
   b5858:	f7ff ffca 	bl	b57f0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   b585c:	6869      	ldr	r1, [r5, #4]
   b585e:	4620      	mov	r0, r4
   b5860:	f7ff ffcd 	bl	b57fe <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   b5864:	6829      	ldr	r1, [r5, #0]
   b5866:	293b      	cmp	r1, #59	; 0x3b
   b5868:	bfa8      	it	ge
   b586a:	213b      	movge	r1, #59	; 0x3b
   b586c:	4620      	mov	r0, r4
   b586e:	f7ff ffcd 	bl	b580c <_ZN12MCP79410Time9setSecondEi>
}
   b5872:	b003      	add	sp, #12
   b5874:	bd30      	pop	{r4, r5, pc}
	...

000b5878 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b5878:	4a05      	ldr	r2, [pc, #20]	; (b5890 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b587a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b587c:	e9c0 2100 	strd	r2, r1, [r0]
   b5880:	4a04      	ldr	r2, [pc, #16]	; (b5894 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   b5882:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b5884:	4a04      	ldr	r2, [pc, #16]	; (b5898 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   b5886:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b5888:	4a04      	ldr	r2, [pc, #16]	; (b589c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b588a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b588c:	6142      	str	r2, [r0, #20]
}
   b588e:	4770      	bx	lr
   b5890:	000bb458 	.word	0x000bb458
   b5894:	03010000 	.word	0x03010000
   b5898:	000bb400 	.word	0x000bb400
   b589c:	000bb434 	.word	0x000bb434

000b58a0 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   b58a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58a4:	4604      	mov	r4, r0
   b58a6:	460f      	mov	r7, r1
   b58a8:	4690      	mov	r8, r2
   b58aa:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b58ac:	2600      	movs	r6, #0

	while(offset < bufLen) {
   b58ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b58b0:	429e      	cmp	r6, r3
   b58b2:	d231      	bcs.n	b5918 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   b58b4:	6860      	ldr	r0, [r4, #4]
   b58b6:	4639      	mov	r1, r7
   b58b8:	f001 fe10 	bl	b74dc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b58bc:	6860      	ldr	r0, [r4, #4]
   b58be:	eb08 0106 	add.w	r1, r8, r6
   b58c2:	f7ff fedd 	bl	b5680 <_ZN7TwoWire5writeEj.isra.0>
		stat = wire.endTransmission(false);
   b58c6:	6860      	ldr	r0, [r4, #4]
   b58c8:	2100      	movs	r1, #0
   b58ca:	f001 fe0e 	bl	b74ea <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b58ce:	4605      	mov	r5, r0
   b58d0:	b9d0      	cbnz	r0, b5908 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   b58d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b58d4:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   b58d6:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b58d8:	2a20      	cmp	r2, #32
   b58da:	f04f 0301 	mov.w	r3, #1
   b58de:	bf28      	it	cs
   b58e0:	2220      	movcs	r2, #32
   b58e2:	4639      	mov	r1, r7
   b58e4:	f001 fde5 	bl	b74b2 <_ZN7TwoWire11requestFromEhjh>
   b58e8:	eb09 0b06 	add.w	fp, r9, r6
   b58ec:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   b58ee:	eb0b 0a00 	add.w	sl, fp, r0
   b58f2:	45da      	cmp	sl, fp
   b58f4:	d006      	beq.n	b5904 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   b58f6:	6860      	ldr	r0, [r4, #4]
   b58f8:	6803      	ldr	r3, [r0, #0]
   b58fa:	695b      	ldr	r3, [r3, #20]
   b58fc:	4798      	blx	r3
   b58fe:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   b5902:	e7f6      	b.n	b58f2 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   b5904:	442e      	add	r6, r5
	while(offset < bufLen) {
   b5906:	e7d2      	b.n	b58ae <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   b5908:	4602      	mov	r2, r0
   b590a:	4904      	ldr	r1, [pc, #16]	; (b591c <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   b590c:	4804      	ldr	r0, [pc, #16]	; (b5920 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   b590e:	f7ff fd21 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   b5912:	4628      	mov	r0, r5
   b5914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5918:	2500      	movs	r5, #0
	return stat;
   b591a:	e7fa      	b.n	b5912 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   b591c:	000bb358 	.word	0x000bb358
   b5920:	2003e64c 	.word	0x2003e64c

000b5924 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b5928:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b592c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b592e:	6803      	ldr	r3, [r0, #0]
   b5930:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5932:	4605      	mov	r5, r0
   b5934:	460c      	mov	r4, r1
   b5936:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b5938:	4798      	blx	r3
   b593a:	4580      	cmp	r8, r0
   b593c:	d80d      	bhi.n	b595a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b593e:	3420      	adds	r4, #32
   b5940:	6868      	ldr	r0, [r5, #4]
   b5942:	9600      	str	r6, [sp, #0]
   b5944:	463b      	mov	r3, r7
   b5946:	b2e2      	uxtb	r2, r4
   b5948:	216f      	movs	r1, #111	; 0x6f
   b594a:	f7ff ffa9 	bl	b58a0 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b594e:	fab0 f080 	clz	r0, r0
   b5952:	0940      	lsrs	r0, r0, #5
}
   b5954:	b002      	add	sp, #8
   b5956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b595a:	2000      	movs	r0, #0
   b595c:	e7fa      	b.n	b5954 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000b595e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b595e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b5962:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b5966:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b5968:	6803      	ldr	r3, [r0, #0]
   b596a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b596c:	4604      	mov	r4, r0
   b596e:	460d      	mov	r5, r1
   b5970:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b5972:	4798      	blx	r3
   b5974:	4580      	cmp	r8, r0
   b5976:	d80c      	bhi.n	b5992 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   b5978:	6860      	ldr	r0, [r4, #4]
   b597a:	9600      	str	r6, [sp, #0]
   b597c:	463b      	mov	r3, r7
   b597e:	b2ea      	uxtb	r2, r5
   b5980:	2157      	movs	r1, #87	; 0x57
   b5982:	f7ff ff8d 	bl	b58a0 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b5986:	fab0 f080 	clz	r0, r0
   b598a:	0940      	lsrs	r0, r0, #5
}
   b598c:	b002      	add	sp, #8
   b598e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b5992:	2000      	movs	r0, #0
   b5994:	e7fa      	b.n	b598c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000b5996 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>:
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b5996:	2b01      	cmp	r3, #1
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   b5998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b599a:	4614      	mov	r4, r2
   b599c:	461e      	mov	r6, r3
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b599e:	d824      	bhi.n	b59ea <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x54>
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   b59a0:	2b00      	cmp	r3, #0
   b59a2:	bf0c      	ite	eq
   b59a4:	2307      	moveq	r3, #7
   b59a6:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   b59a8:	9300      	str	r3, [sp, #0]
   b59aa:	460a      	mov	r2, r1
   b59ac:	ab02      	add	r3, sp, #8
   b59ae:	216f      	movs	r1, #111	; 0x6f
   b59b0:	f7ff ff76 	bl	b58a0 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b59b4:	4605      	mov	r5, r0
   b59b6:	b9a8      	cbnz	r0, b59e4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawSecond = buf[0];
   b59b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b59bc:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   b59be:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b59c2:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   b59c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b59c8:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   b59ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b59ce:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   b59d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b59d4:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   b59d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b59da:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   b59dc:	b9f6      	cbnz	r6, b5a1c <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x86>
				time.rawYear = buf[6];
   b59de:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b59e2:	72a3      	strb	r3, [r4, #10]
}
   b59e4:	4628      	mov	r0, r5
   b59e6:	b004      	add	sp, #16
   b59e8:	bd70      	pop	{r4, r5, r6, pc}
	if (timeMode == TIME_MODE_POWER) {
   b59ea:	2b02      	cmp	r3, #2
   b59ec:	d11c      	bne.n	b5a28 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x92>
		stat = deviceRead(REG_I2C_ADDR, addr, buf, 4);
   b59ee:	2304      	movs	r3, #4
   b59f0:	9300      	str	r3, [sp, #0]
   b59f2:	460a      	mov	r2, r1
   b59f4:	ab02      	add	r3, sp, #8
   b59f6:	216f      	movs	r1, #111	; 0x6f
   b59f8:	f7ff ff52 	bl	b58a0 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b59fc:	4605      	mov	r5, r0
   b59fe:	2800      	cmp	r0, #0
   b5a00:	d1f0      	bne.n	b59e4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawMinute = buf[0];
   b5a02:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b5a06:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[1];
   b5a08:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b5a0c:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfMonth = buf[2];
   b5a0e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b5a12:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[3];
   b5a14:	f89d 300b 	ldrb.w	r3, [sp, #11]
			time.rawSecond = 0;
   b5a18:	7420      	strb	r0, [r4, #16]
			time.rawMonth = buf[3];
   b5a1a:	72e3      	strb	r3, [r4, #11]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
   b5a1c:	f002 f98a 	bl	b7d34 <_ZN9TimeClass4yearEv>
   b5a20:	f7ff feb0 	bl	b5784 <_ZN12MCP79410Time8intToBcdEi>
   b5a24:	72a0      	strb	r0, [r4, #10]
   b5a26:	e7dd      	b.n	b59e4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
	int stat = -1;
   b5a28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	return stat;
   b5a2c:	e7da      	b.n	b59e4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>

000b5a2e <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b5a2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b5a30:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b5a32:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b5a34:	9300      	str	r3, [sp, #0]
   b5a36:	216f      	movs	r1, #111	; 0x6f
   b5a38:	ab03      	add	r3, sp, #12
   b5a3a:	f7ff ff31 	bl	b58a0 <_ZNK8MCP7941010deviceReadEhhPhj>
   b5a3e:	b920      	cbnz	r0, b5a4a <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   b5a40:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   b5a44:	b005      	add	sp, #20
   b5a46:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   b5a4a:	2000      	movs	r0, #0
   b5a4c:	e7fa      	b.n	b5a44 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000b5a4e <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   b5a4e:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   b5a50:	2103      	movs	r1, #3
   b5a52:	f7ff ffec 	bl	b5a2e <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   b5a56:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b5a5a:	bd08      	pop	{r3, pc}

000b5a5c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b5a5c:	b538      	push	{r3, r4, r5, lr}
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b5a5e:	2300      	movs	r3, #0
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b5a60:	460c      	mov	r4, r1
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b5a62:	460a      	mov	r2, r1
   b5a64:	4619      	mov	r1, r3
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b5a66:	4605      	mov	r5, r0
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b5a68:	f7ff ff95 	bl	b5996 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>
	if (stat == 0) {
   b5a6c:	b930      	cbnz	r0, b5a7c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b5a6e:	7aa3      	ldrb	r3, [r4, #10]
   b5a70:	b123      	cbz	r3, b5a7c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   b5a72:	4628      	mov	r0, r5
}
   b5a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b5a78:	f7ff bfe9 	b.w	b5a4e <_ZNK8MCP7941020getOscillatorRunningEv>
}
   b5a7c:	2000      	movs	r0, #0
   b5a7e:	bd38      	pop	{r3, r4, r5, pc}

000b5a80 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   b5a80:	b510      	push	{r4, lr}
   b5a82:	b086      	sub	sp, #24
   b5a84:	4604      	mov	r4, r0
	MCP79410Time time;
   b5a86:	a801      	add	r0, sp, #4
   b5a88:	f7ff fe08 	bl	b569c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   b5a8c:	a901      	add	r1, sp, #4
   b5a8e:	4620      	mov	r0, r4
   b5a90:	f7ff ffe4 	bl	b5a5c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   b5a94:	b120      	cbz	r0, b5aa0 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   b5a96:	a801      	add	r0, sp, #4
   b5a98:	f7ff fe4c 	bl	b5734 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   b5a9c:	b006      	add	sp, #24
   b5a9e:	bd10      	pop	{r4, pc}
		return 0;
   b5aa0:	2000      	movs	r0, #0
   b5aa2:	4601      	mov	r1, r0
   b5aa4:	e7fa      	b.n	b5a9c <_ZNK8MCP7941010getRTCTimeEv+0x1c>
	...

000b5aa8 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   b5aa8:	b570      	push	{r4, r5, r6, lr}
   b5aaa:	4604      	mov	r4, r0
   b5aac:	b086      	sub	sp, #24
	wire.begin();
   b5aae:	6840      	ldr	r0, [r0, #4]
   b5ab0:	f001 fce2 	bl	b7478 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   b5ab4:	f002 f904 	bl	b7cc0 <_ZN9TimeClass7isValidEv>
   b5ab8:	b9e8      	cbnz	r0, b5af6 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   b5aba:	7ae3      	ldrb	r3, [r4, #11]
   b5abc:	079b      	lsls	r3, r3, #30
   b5abe:	d51a      	bpl.n	b5af6 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	f7ff ffdd 	bl	b5a80 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   b5ac6:	ea50 0301 	orrs.w	r3, r0, r1
			time_t rtcTime = getRTCTime();
   b5aca:	4606      	mov	r6, r0
   b5acc:	460d      	mov	r5, r1
			if (rtcTime != 0) {
   b5ace:	d012      	beq.n	b5af6 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   b5ad0:	f001 fffb 	bl	b7aca <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   b5ad4:	4b0a      	ldr	r3, [pc, #40]	; (b5b00 <_ZN8MCP794105setupEv+0x58>)
   b5ad6:	490b      	ldr	r1, [pc, #44]	; (b5b04 <_ZN8MCP794105setupEv+0x5c>)
   b5ad8:	681b      	ldr	r3, [r3, #0]
   b5ada:	9300      	str	r3, [sp, #0]
   b5adc:	4632      	mov	r2, r6
   b5ade:	462b      	mov	r3, r5
   b5ae0:	a802      	add	r0, sp, #8
   b5ae2:	f002 f8ab 	bl	b7c3c <_ZN9TimeClass6formatExPKc>
   b5ae6:	4808      	ldr	r0, [pc, #32]	; (b5b08 <_ZN8MCP794105setupEv+0x60>)
   b5ae8:	9a02      	ldr	r2, [sp, #8]
   b5aea:	4908      	ldr	r1, [pc, #32]	; (b5b0c <_ZN8MCP794105setupEv+0x64>)
   b5aec:	f7ff fc32 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
   b5af0:	a802      	add	r0, sp, #8
   b5af2:	f001 fecb 	bl	b788c <_ZN6StringD1Ev>
	setupDone = true;
   b5af6:	2301      	movs	r3, #1
   b5af8:	7223      	strb	r3, [r4, #8]
}
   b5afa:	b006      	add	sp, #24
   b5afc:	bd70      	pop	{r4, r5, r6, pc}
   b5afe:	bf00      	nop
   b5b00:	2003e2c8 	.word	0x2003e2c8
   b5b04:	2003e6bc 	.word	0x2003e6bc
   b5b08:	2003e64c 	.word	0x2003e64c
   b5b0c:	000bb372 	.word	0x000bb372

000b5b10 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b5b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b14:	4606      	mov	r6, r0
   b5b16:	4688      	mov	r8, r1
   b5b18:	4691      	mov	r9, r2
   b5b1a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b5b1c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   b5b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5b20:	429d      	cmp	r5, r3
   b5b22:	d229      	bcs.n	b5b78 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   b5b24:	6870      	ldr	r0, [r6, #4]
   b5b26:	4641      	mov	r1, r8
   b5b28:	f001 fcd8 	bl	b74dc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b5b2c:	6870      	ldr	r0, [r6, #4]
   b5b2e:	eb09 0105 	add.w	r1, r9, r5
   b5b32:	f7ff fda5 	bl	b5680 <_ZN7TwoWire5writeEj.isra.0>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   b5b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5b38:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   b5b3a:	2f1f      	cmp	r7, #31
   b5b3c:	bf28      	it	cs
   b5b3e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   b5b40:	eb0a 0405 	add.w	r4, sl, r5
   b5b44:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   b5b48:	6870      	ldr	r0, [r6, #4]
   b5b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5b4e:	6802      	ldr	r2, [r0, #0]
   b5b50:	6892      	ldr	r2, [r2, #8]
   b5b52:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   b5b54:	45a3      	cmp	fp, r4
   b5b56:	d1f7      	bne.n	b5b48 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   b5b58:	6870      	ldr	r0, [r6, #4]
   b5b5a:	2101      	movs	r1, #1
   b5b5c:	f001 fcc5 	bl	b74ea <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b5b60:	4604      	mov	r4, r0
   b5b62:	b138      	cbz	r0, b5b74 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   b5b64:	4602      	mov	r2, r0
   b5b66:	4905      	ldr	r1, [pc, #20]	; (b5b7c <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   b5b68:	4805      	ldr	r0, [pc, #20]	; (b5b80 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   b5b6a:	f7ff fbf3 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   b5b6e:	4620      	mov	r0, r4
   b5b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   b5b74:	443d      	add	r5, r7
	while(offset < bufLen) {
   b5b76:	e7d2      	b.n	b5b1e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   b5b78:	2400      	movs	r4, #0
	return stat;
   b5b7a:	e7f8      	b.n	b5b6e <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   b5b7c:	000bb387 	.word	0x000bb387
   b5b80:	2003e64c 	.word	0x2003e64c

000b5b84 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b5b88:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5b8c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b5b8e:	6803      	ldr	r3, [r0, #0]
   b5b90:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5b92:	4605      	mov	r5, r0
   b5b94:	460c      	mov	r4, r1
   b5b96:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b5b98:	4798      	blx	r3
   b5b9a:	4580      	cmp	r8, r0
   b5b9c:	d80d      	bhi.n	b5bba <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b5b9e:	3420      	adds	r4, #32
   b5ba0:	6868      	ldr	r0, [r5, #4]
   b5ba2:	9600      	str	r6, [sp, #0]
   b5ba4:	463b      	mov	r3, r7
   b5ba6:	b2e2      	uxtb	r2, r4
   b5ba8:	216f      	movs	r1, #111	; 0x6f
   b5baa:	f7ff ffb1 	bl	b5b10 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   b5bae:	fab0 f080 	clz	r0, r0
   b5bb2:	0940      	lsrs	r0, r0, #5
}
   b5bb4:	b002      	add	sp, #8
   b5bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b5bba:	2000      	movs	r0, #0
   b5bbc:	e7fa      	b.n	b5bb4 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000b5bbe <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   b5bbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   b5bc0:	7c13      	ldrb	r3, [r2, #16]
   b5bc2:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   b5bc6:	7bd3      	ldrb	r3, [r2, #15]
   b5bc8:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   b5bcc:	7b93      	ldrb	r3, [r2, #14]
   b5bce:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   b5bd2:	7b53      	ldrb	r3, [r2, #13]
   b5bd4:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   b5bd8:	7b13      	ldrb	r3, [r2, #12]
   b5bda:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   b5bde:	7ad3      	ldrb	r3, [r2, #11]
   b5be0:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   b5be4:	7a93      	ldrb	r3, [r2, #10]
   b5be6:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   b5bea:	2307      	movs	r3, #7
   b5bec:	9300      	str	r3, [sp, #0]
   b5bee:	460a      	mov	r2, r1
   b5bf0:	ab02      	add	r3, sp, #8
   b5bf2:	216f      	movs	r1, #111	; 0x6f
   b5bf4:	f7ff ff8c 	bl	b5b10 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b5bf8:	b005      	add	sp, #20
   b5bfa:	f85d fb04 	ldr.w	pc, [sp], #4

000b5bfe <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   b5bfe:	b510      	push	{r4, lr}
   b5c00:	b088      	sub	sp, #32
   b5c02:	4604      	mov	r4, r0
	MCP79410Time time;
   b5c04:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   b5c06:	e9cd 3200 	strd	r3, r2, [sp]
	MCP79410Time time;
   b5c0a:	f7ff fd47 	bl	b569c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   b5c0e:	e9dd 3200 	ldrd	r3, r2, [sp]
   b5c12:	a803      	add	r0, sp, #12
   b5c14:	f7ff fe05 	bl	b5822 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b5c18:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   b5c1c:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b5c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b5c22:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   b5c26:	f89d 3019 	ldrb.w	r3, [sp, #25]
   b5c2a:	b16a      	cbz	r2, b5c48 <_ZN8MCP7941010setRTCTimeEx+0x4a>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   b5c2c:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   b5c30:	aa03      	add	r2, sp, #12
   b5c32:	2100      	movs	r1, #0
   b5c34:	4620      	mov	r0, r4
   b5c36:	f88d 3019 	strb.w	r3, [sp, #25]
   b5c3a:	f7ff ffc0 	bl	b5bbe <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   b5c3e:	fab0 f080 	clz	r0, r0
   b5c42:	0940      	lsrs	r0, r0, #5
   b5c44:	b008      	add	sp, #32
   b5c46:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   b5c48:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   b5c4c:	e7f0      	b.n	b5c30 <_ZN8MCP7941010setRTCTimeEx+0x32>
	...

000b5c50 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   b5c50:	b530      	push	{r4, r5, lr}
   b5c52:	b089      	sub	sp, #36	; 0x24
   b5c54:	4605      	mov	r5, r0
	if (Time.isValid()) {
   b5c56:	f002 f833 	bl	b7cc0 <_ZN9TimeClass7isValidEv>
   b5c5a:	4604      	mov	r4, r0
   b5c5c:	b1e8      	cbz	r0, b5c9a <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   b5c5e:	f002 f84c 	bl	b7cfa <_ZN9TimeClass3nowEv>
   b5c62:	17c3      	asrs	r3, r0, #31
		bResult = setRTCTime(now);
   b5c64:	e9cd 3002 	strd	r3, r0, [sp, #8]
		time_t now = Time.now();
   b5c68:	4602      	mov	r2, r0
		bResult = setRTCTime(now);
   b5c6a:	4628      	mov	r0, r5
   b5c6c:	f7ff ffc7 	bl	b5bfe <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b5c70:	490c      	ldr	r1, [pc, #48]	; (b5ca4 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   b5c72:	6809      	ldr	r1, [r1, #0]
   b5c74:	9100      	str	r1, [sp, #0]
   b5c76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b5c7a:	490b      	ldr	r1, [pc, #44]	; (b5ca8 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
		bResult = setRTCTime(now);
   b5c7c:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b5c7e:	a804      	add	r0, sp, #16
   b5c80:	f001 ffdc 	bl	b7c3c <_ZN9TimeClass6formatExPKc>
   b5c84:	4809      	ldr	r0, [pc, #36]	; (b5cac <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b5c86:	9a04      	ldr	r2, [sp, #16]
   b5c88:	4909      	ldr	r1, [pc, #36]	; (b5cb0 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   b5c8a:	f7ff fb63 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
   b5c8e:	a804      	add	r0, sp, #16
   b5c90:	f001 fdfc 	bl	b788c <_ZN6StringD1Ev>
}
   b5c94:	4620      	mov	r0, r4
   b5c96:	b009      	add	sp, #36	; 0x24
   b5c98:	bd30      	pop	{r4, r5, pc}
		log.info("cloud time not valid");
   b5c9a:	4906      	ldr	r1, [pc, #24]	; (b5cb4 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   b5c9c:	4803      	ldr	r0, [pc, #12]	; (b5cac <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b5c9e:	f7ff fb59 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
   b5ca2:	e7f7      	b.n	b5c94 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   b5ca4:	2003e2c8 	.word	0x2003e2c8
   b5ca8:	2003e6bc 	.word	0x2003e6bc
   b5cac:	2003e64c 	.word	0x2003e64c
   b5cb0:	000bb3a2 	.word	0x000bb3a2
   b5cb4:	000bb3b8 	.word	0x000bb3b8

000b5cb8 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   b5cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   b5cba:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   b5cbc:	4604      	mov	r4, r0
	if (!timeSet) {
   b5cbe:	b99d      	cbnz	r5, b5ce8 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   b5cc0:	f001 fffe 	bl	b7cc0 <_ZN9TimeClass7isValidEv>
   b5cc4:	b180      	cbz	r0, b5ce8 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   b5cc6:	2200      	movs	r2, #0
   b5cc8:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   b5cca:	4669      	mov	r1, sp
   b5ccc:	4628      	mov	r0, r5
        tm = 0;
   b5cce:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   b5cd2:	f000 ff15 	bl	b6b00 <spark_sync_time_last>
			if (lastSync != 0) {
   b5cd6:	b138      	cbz	r0, b5ce8 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   b5cd8:	7ae3      	ldrb	r3, [r4, #11]
   b5cda:	07db      	lsls	r3, r3, #31
   b5cdc:	d502      	bpl.n	b5ce4 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   b5cde:	4620      	mov	r0, r4
   b5ce0:	f7ff ffb6 	bl	b5c50 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   b5ce4:	2301      	movs	r3, #1
   b5ce6:	7263      	strb	r3, [r4, #9]
}
   b5ce8:	b003      	add	sp, #12
   b5cea:	bd30      	pop	{r4, r5, pc}

000b5cec <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   b5cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b5cee:	2301      	movs	r3, #1
	buf[0] = value;
   b5cf0:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b5cf4:	9300      	str	r3, [sp, #0]
   b5cf6:	460a      	mov	r2, r1
   b5cf8:	ab03      	add	r3, sp, #12
   b5cfa:	216f      	movs	r1, #111	; 0x6f
   b5cfc:	f7ff ff08 	bl	b5b10 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b5d00:	b005      	add	sp, #20
   b5d02:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d06 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   b5d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d08:	4617      	mov	r7, r2
   b5d0a:	4604      	mov	r4, r0
   b5d0c:	460d      	mov	r5, r1
   b5d0e:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   b5d10:	f7ff fe8d 	bl	b5a2e <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   b5d14:	4038      	ands	r0, r7
	return deviceWriteRegisterByte(addr, value);
   b5d16:	ea40 0206 	orr.w	r2, r0, r6
   b5d1a:	4629      	mov	r1, r5
   b5d1c:	4620      	mov	r0, r4
}
   b5d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   b5d22:	f7ff bfe3 	b.w	b5cec <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000b5d26 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   b5d26:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   b5d28:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   b5d2a:	d80d      	bhi.n	b5d48 <_ZN8MCP7941010clearAlarmEi+0x22>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   b5d2c:	2900      	cmp	r1, #0
   b5d2e:	bf0c      	ite	eq
   b5d30:	2210      	moveq	r2, #16
   b5d32:	2220      	movne	r2, #32
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   b5d34:	2300      	movs	r3, #0
   b5d36:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   b5d3a:	2107      	movs	r1, #7
   b5d3c:	f7ff ffe3 	bl	b5d06 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   b5d40:	fab0 f080 	clz	r0, r0
   b5d44:	0940      	lsrs	r0, r0, #5
}
   b5d46:	bd08      	pop	{r3, pc}
		return false;
   b5d48:	2000      	movs	r0, #0
   b5d4a:	e7fc      	b.n	b5d46 <_ZN8MCP7941010clearAlarmEi+0x20>

000b5d4c <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   b5d4c:	b538      	push	{r3, r4, r5, lr}
   b5d4e:	4604      	mov	r4, r0
   b5d50:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b5d52:	6860      	ldr	r0, [r4, #4]
   b5d54:	2157      	movs	r1, #87	; 0x57
   b5d56:	f001 fbc1 	bl	b74dc <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   b5d5a:	6860      	ldr	r0, [r4, #4]
   b5d5c:	2101      	movs	r1, #1
   b5d5e:	f001 fbc4 	bl	b74ea <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b5d62:	b108      	cbz	r0, b5d68 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   b5d64:	3d01      	subs	r5, #1
   b5d66:	d1f4      	bne.n	b5d52 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   b5d68:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5d6c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b5d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d70:	4604      	mov	r4, r0
   b5d72:	460f      	mov	r7, r1
   b5d74:	4616      	mov	r6, r2
   b5d76:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   b5d7a:	45b0      	cmp	r8, r6
   b5d7c:	d020      	beq.n	b5dc0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b5d7e:	6860      	ldr	r0, [r4, #4]
   b5d80:	2157      	movs	r1, #87	; 0x57
   b5d82:	f001 fbab 	bl	b74dc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b5d86:	4639      	mov	r1, r7
   b5d88:	6860      	ldr	r0, [r4, #4]
   b5d8a:	f7ff fc79 	bl	b5680 <_ZN7TwoWire5writeEj.isra.0>
			wire.write(buf[ii + offset]);
   b5d8e:	6860      	ldr	r0, [r4, #4]
   b5d90:	f816 1b01 	ldrb.w	r1, [r6], #1
   b5d94:	6803      	ldr	r3, [r0, #0]
   b5d96:	689b      	ldr	r3, [r3, #8]
   b5d98:	4798      	blx	r3
		stat = wire.endTransmission(true);
   b5d9a:	6860      	ldr	r0, [r4, #4]
   b5d9c:	2101      	movs	r1, #1
   b5d9e:	f001 fba4 	bl	b74ea <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b5da2:	3701      	adds	r7, #1
   b5da4:	4605      	mov	r5, r0
   b5da6:	b138      	cbz	r0, b5db8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   b5da8:	4602      	mov	r2, r0
   b5daa:	4906      	ldr	r1, [pc, #24]	; (b5dc4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   b5dac:	4806      	ldr	r0, [pc, #24]	; (b5dc8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   b5dae:	f7ff fad1 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
}
   b5db2:	4628      	mov	r0, r5
   b5db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   b5db8:	4620      	mov	r0, r4
   b5dba:	f7ff ffc7 	bl	b5d4c <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   b5dbe:	e7dc      	b.n	b5d7a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   b5dc0:	2500      	movs	r5, #0
	return stat;
   b5dc2:	e7f6      	b.n	b5db2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   b5dc4:	000bb3cd 	.word	0x000bb3cd
   b5dc8:	2003e64c 	.word	0x2003e64c

000b5dcc <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   b5dce:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5dd0:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b5dd2:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5dd4:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   b5dd6:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b5dd8:	4604      	mov	r4, r0
   b5dda:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   b5ddc:	4798      	blx	r3
   b5dde:	4287      	cmp	r7, r0
   b5de0:	d80a      	bhi.n	b5df8 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   b5de2:	9a01      	ldr	r2, [sp, #4]
   b5de4:	6860      	ldr	r0, [r4, #4]
   b5de6:	4633      	mov	r3, r6
   b5de8:	b2e9      	uxtb	r1, r5
   b5dea:	f7ff ffbf 	bl	b5d6c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   b5dee:	fab0 f080 	clz	r0, r0
   b5df2:	0940      	lsrs	r0, r0, #5
}
   b5df4:	b003      	add	sp, #12
   b5df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   b5df8:	2000      	movs	r0, #0
   b5dfa:	e7fb      	b.n	b5df4 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000b5dfc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   b5dfc:	4b01      	ldr	r3, [pc, #4]	; (b5e04 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   b5dfe:	4a02      	ldr	r2, [pc, #8]	; (b5e08 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   b5e00:	601a      	str	r2, [r3, #0]
}
   b5e02:	4770      	bx	lr
   b5e04:	2003e64c 	.word	0x2003e64c
   b5e08:	000bb3ee 	.word	0x000bb3ee

000b5e0c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b5e0c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b5e0e:	2301      	movs	r3, #1
   b5e10:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b5e12:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b5e14:	4604      	mov	r4, r0
        if (th->func) {
   b5e16:	b143      	cbz	r3, b5e2a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b5e18:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5e1a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b5e1c:	2301      	movs	r3, #1
   b5e1e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b5e20:	2000      	movs	r0, #0
    }
   b5e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b5e26:	f000 bc23 	b.w	b6670 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5e2a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b5e2c:	2800      	cmp	r0, #0
   b5e2e:	d0f5      	beq.n	b5e1c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b5e30:	6883      	ldr	r3, [r0, #8]
   b5e32:	b90b      	cbnz	r3, b5e38 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b5e34:	f002 fa14 	bl	b8260 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5e38:	68c3      	ldr	r3, [r0, #12]
   b5e3a:	e7ee      	b.n	b5e1a <_ZN6Thread3runEPv+0xe>

000b5e3c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5e3c:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b5e3e:	6842      	ldr	r2, [r0, #4]
   b5e40:	4603      	mov	r3, r0
   b5e42:	1054      	asrs	r4, r2, #1
   b5e44:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b5e48:	07d2      	lsls	r2, r2, #31
   b5e4a:	bf48      	it	mi
   b5e4c:	590a      	ldrmi	r2, [r1, r4]
   b5e4e:	681b      	ldr	r3, [r3, #0]
      }
   b5e50:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5e54:	bf48      	it	mi
   b5e56:	58d3      	ldrmi	r3, [r2, r3]
   b5e58:	4718      	bx	r3

000b5e5a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b5e5a:	2a01      	cmp	r2, #1
   b5e5c:	d102      	bne.n	b5e64 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5e5e:	6001      	str	r1, [r0, #0]
      }
   b5e60:	2000      	movs	r0, #0
   b5e62:	4770      	bx	lr
	  switch (__op)
   b5e64:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5e66:	bf04      	itt	eq
   b5e68:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b5e6c:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b5e70:	e7f6      	b.n	b5e60 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	...

000b5e74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b5e74:	b510      	push	{r4, lr}
   b5e76:	4603      	mov	r3, r0
   b5e78:	e9d1 0200 	ldrd	r0, r2, [r1]
   b5e7c:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b5e7e:	2100      	movs	r1, #0
   b5e80:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   b5e82:	b908      	cbnz	r0, b5e88 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x14>
   b5e84:	07d1      	lsls	r1, r2, #31
   b5e86:	d505      	bpl.n	b5e94 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5e88:	e9cd 0202 	strd	r0, r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b5e8c:	4a0f      	ldr	r2, [pc, #60]	; (b5ecc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x58>)
   b5e8e:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b5e90:	4a0f      	ldr	r2, [pc, #60]	; (b5ed0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x5c>)
   b5e92:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e94:	aa02      	add	r2, sp, #8
   b5e96:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5e9a:	466c      	mov	r4, sp
   b5e9c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5ea4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5eac:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5eb0:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5eb2:	6898      	ldr	r0, [r3, #8]
   b5eb4:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5eb6:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5eb8:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5eba:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ebc:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5ebe:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b5ec0:	4610      	mov	r0, r2
   b5ec2:	f7fe fa3f 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
	}
   b5ec6:	b006      	add	sp, #24
   b5ec8:	bd10      	pop	{r4, pc}
   b5eca:	bf00      	nop
   b5ecc:	000b5e3d 	.word	0x000b5e3d
   b5ed0:	000b5e5b 	.word	0x000b5e5b

000b5ed4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   b5ed4:	b513      	push	{r0, r1, r4, lr}
   b5ed6:	4604      	mov	r4, r0
   b5ed8:	f000 fbfa 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   b5edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5ede:	1ac0      	subs	r0, r0, r3
   b5ee0:	68e3      	ldr	r3, [r4, #12]
   b5ee2:	4298      	cmp	r0, r3
   b5ee4:	d308      	bcc.n	b5ef8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b5ee6:	4b05      	ldr	r3, [pc, #20]	; (b5efc <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   b5ee8:	9300      	str	r3, [sp, #0]
   b5eea:	4669      	mov	r1, sp
   b5eec:	2300      	movs	r3, #0
   b5eee:	f104 0010 	add.w	r0, r4, #16
   b5ef2:	9301      	str	r3, [sp, #4]
   b5ef4:	f7ff ffbe 	bl	b5e74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
	}
}
   b5ef8:	b002      	add	sp, #8
   b5efa:	bd10      	pop	{r4, pc}
   b5efc:	000b5fdd 	.word	0x000b5fdd

000b5f00 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   b5f00:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b5f02:	4b05      	ldr	r3, [pc, #20]	; (b5f18 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   b5f04:	9300      	str	r3, [sp, #0]
   b5f06:	4669      	mov	r1, sp
   b5f08:	2300      	movs	r3, #0
   b5f0a:	3010      	adds	r0, #16
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	f7ff ffb1 	bl	b5e74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b5f12:	b003      	add	sp, #12
   b5f14:	f85d fb04 	ldr.w	pc, [sp], #4
   b5f18:	000b5fdd 	.word	0x000b5fdd

000b5f1c <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b5f1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5f20:	4604      	mov	r4, r0
   b5f22:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b5f24:	2014      	movs	r0, #20
   b5f26:	491c      	ldr	r1, [pc, #112]	; (b5f98 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x7c>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b5f28:	4690      	mov	r8, r2
   b5f2a:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b5f2c:	f002 f994 	bl	b8258 <_ZnwjRKSt9nothrow_t>
   b5f30:	b130      	cbz	r0, b5f40 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b5f32:	2500      	movs	r5, #0
            exited(false) {
   b5f34:	e9c0 5500 	strd	r5, r5, [r0]
   b5f38:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5f3c:	7405      	strb	r5, [r0, #16]
   b5f3e:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5f40:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b5f42:	b198      	cbz	r0, b5f6c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b5f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5f46:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b5f4a:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b5f4e:	4631      	mov	r1, r6
   b5f50:	e9cd 0300 	strd	r0, r3, [sp]
   b5f54:	4b11      	ldr	r3, [pc, #68]	; (b5f9c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
   b5f56:	3004      	adds	r0, #4
   b5f58:	f000 fb32 	bl	b65c0 <os_thread_create>
   b5f5c:	b930      	cbnz	r0, b5f6c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5f5e:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b5f60:	7c1b      	ldrb	r3, [r3, #16]
   b5f62:	b9a3      	cbnz	r3, b5f8e <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
            HAL_Delay_Milliseconds(1);
   b5f64:	2001      	movs	r0, #1
   b5f66:	f000 fba3 	bl	b66b0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b5f6a:	e7f8      	b.n	b5f5e <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b5f6c:	6825      	ldr	r5, [r4, #0]
	_M_ptr() = __p;
   b5f6e:	2300      	movs	r3, #0
   b5f70:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b5f72:	b165      	cbz	r5, b5f8e <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b5f74:	682e      	ldr	r6, [r5, #0]
   b5f76:	b136      	cbz	r6, b5f86 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x6a>
    class function<_Res(_ArgTypes...)>
   b5f78:	4630      	mov	r0, r6
   b5f7a:	f7fe f9e3 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b5f7e:	2110      	movs	r1, #16
   b5f80:	4630      	mov	r0, r6
   b5f82:	f7fe f88c 	bl	b409e <_ZdlPvj>
   b5f86:	2114      	movs	r1, #20
   b5f88:	4628      	mov	r0, r5
   b5f8a:	f7fe f888 	bl	b409e <_ZdlPvj>
    }
   b5f8e:	4620      	mov	r0, r4
   b5f90:	b002      	add	sp, #8
   b5f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f96:	bf00      	nop
   b5f98:	000bb708 	.word	0x000bb708
   b5f9c:	000b5e0d 	.word	0x000b5e0d

000b5fa0 <_ZN21PublishQueueAsyncBase5setupEv>:
	haveSetup = true;
   b5fa0:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   b5fa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	haveSetup = true;
   b5fa4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   b5fa8:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5faa:	3008      	adds	r0, #8
   b5fac:	f000 fb40 	bl	b6630 <os_mutex_create>
	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   b5fb0:	2004      	movs	r0, #4
   b5fb2:	f7fe f870 	bl	b4096 <_Znwj>
   b5fb6:	4605      	mov	r5, r0
   b5fb8:	b148      	cbz	r0, b5fce <_ZN21PublishQueueAsyncBase5setupEv+0x2e>
   b5fba:	2302      	movs	r3, #2
   b5fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b5fc0:	e9cd 3200 	strd	r3, r2, [sp]
   b5fc4:	4903      	ldr	r1, [pc, #12]	; (b5fd4 <_ZN21PublishQueueAsyncBase5setupEv+0x34>)
   b5fc6:	4a04      	ldr	r2, [pc, #16]	; (b5fd8 <_ZN21PublishQueueAsyncBase5setupEv+0x38>)
   b5fc8:	4623      	mov	r3, r4
   b5fca:	f7ff ffa7 	bl	b5f1c <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b5fce:	6065      	str	r5, [r4, #4]
}
   b5fd0:	b003      	add	sp, #12
   b5fd2:	bd30      	pop	{r4, r5, pc}
   b5fd4:	000bb460 	.word	0x000bb460
   b5fd8:	000b62f7 	.word	0x000b62f7

000b5fdc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   b5fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b5fe0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   b5fe4:	b086      	sub	sp, #24
   b5fe6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b5fe8:	2b00      	cmp	r3, #0
   b5fea:	d164      	bne.n	b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5fec:	f000 fd58 	bl	b6aa0 <spark_cloud_flag_connected>
   b5ff0:	2800      	cmp	r0, #0
   b5ff2:	d060      	beq.n	b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   b5ff4:	f000 fb6c 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
   b5ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5ffa:	1ac0      	subs	r0, r0, r3
   b5ffc:	f240 33f1 	movw	r3, #1009	; 0x3f1
   b6000:	4298      	cmp	r0, r3
   b6002:	d958      	bls.n	b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   b6004:	6823      	ldr	r3, [r4, #0]
   b6006:	4620      	mov	r0, r4
   b6008:	695b      	ldr	r3, [r3, #20]
   b600a:	4798      	blx	r3
		if (data) {
   b600c:	4605      	mov	r5, r0
   b600e:	2800      	cmp	r0, #0
   b6010:	d051      	beq.n	b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   b6012:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   b6016:	2301      	movs	r3, #1
   b6018:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   b601c:	4638      	mov	r0, r7
   b601e:	f002 fee6 	bl	b8dee <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   b6022:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b6026:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   b602a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b602c:	682b      	ldr	r3, [r5, #0]
   b602e:	492b      	ldr	r1, [pc, #172]	; (b60dc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   b6030:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   b6032:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b6034:	4633      	mov	r3, r6
   b6036:	482a      	ldr	r0, [pc, #168]	; (b60e0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6038:	463a      	mov	r2, r7
   b603a:	f7ff f98b 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   b603e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6040:	f88d 8000 	strb.w	r8, [sp]
   b6044:	4632      	mov	r2, r6
   b6046:	4639      	mov	r1, r7
   b6048:	a802      	add	r0, sp, #8
   b604a:	f001 f82d 	bl	b70a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b604e:	9d02      	ldr	r5, [sp, #8]
   b6050:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   b6052:	b91b      	cbnz	r3, b605c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   b6054:	2001      	movs	r0, #1
   b6056:	f000 fe3b 	bl	b6cd0 <delay>
			while(!request.isDone()) {
   b605a:	e7f8      	b.n	b604e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b605c:	2000      	movs	r0, #0
   b605e:	f000 fcc9 	bl	b69f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6062:	b120      	cbz	r0, b606e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   b6064:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b6066:	b913      	cbnz	r3, b606e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   b6068:	f000 fd12 	bl	b6a90 <spark_process>
    }
   b606c:	e7fa      	b.n	b6064 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b606e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   b6070:	2b01      	cmp	r3, #1
   b6072:	d123      	bne.n	b60bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   b6074:	491b      	ldr	r1, [pc, #108]	; (b60e4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   b6076:	481a      	ldr	r0, [pc, #104]	; (b60e0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6078:	f7ff f96c 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   b607c:	6823      	ldr	r3, [r4, #0]
   b607e:	2100      	movs	r1, #0
   b6080:	699b      	ldr	r3, [r3, #24]
   b6082:	4620      	mov	r0, r4
   b6084:	4798      	blx	r3
			isSending = false;
   b6086:	2300      	movs	r3, #0
   b6088:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   b608c:	f000 fb20 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   b6090:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   b6092:	9c03      	ldr	r4, [sp, #12]
   b6094:	b17c      	cbz	r4, b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   b6096:	6863      	ldr	r3, [r4, #4]
   b6098:	3b01      	subs	r3, #1
   b609a:	6063      	str	r3, [r4, #4]
   b609c:	b95b      	cbnz	r3, b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   b609e:	6823      	ldr	r3, [r4, #0]
   b60a0:	4620      	mov	r0, r4
   b60a2:	689b      	ldr	r3, [r3, #8]
   b60a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b60a6:	68a3      	ldr	r3, [r4, #8]
   b60a8:	3b01      	subs	r3, #1
   b60aa:	60a3      	str	r3, [r4, #8]
   b60ac:	b91b      	cbnz	r3, b60b6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   b60ae:	6823      	ldr	r3, [r4, #0]
   b60b0:	4620      	mov	r0, r4
   b60b2:	68db      	ldr	r3, [r3, #12]
   b60b4:	4798      	blx	r3
}
   b60b6:	b006      	add	sp, #24
   b60b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   b60bc:	68e2      	ldr	r2, [r4, #12]
   b60be:	490a      	ldr	r1, [pc, #40]	; (b60e8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   b60c0:	4807      	ldr	r0, [pc, #28]	; (b60e0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b60c2:	f7ff f947 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   b60c6:	4b09      	ldr	r3, [pc, #36]	; (b60ec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   b60c8:	9304      	str	r3, [sp, #16]
   b60ca:	a904      	add	r1, sp, #16
   b60cc:	2300      	movs	r3, #0
   b60ce:	f104 0010 	add.w	r0, r4, #16
   b60d2:	9305      	str	r3, [sp, #20]
   b60d4:	f7ff fece 	bl	b5e74 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b60d8:	e7d5      	b.n	b6086 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   b60da:	bf00      	nop
   b60dc:	000bb472 	.word	0x000bb472
   b60e0:	2003e650 	.word	0x2003e650
   b60e4:	000bb493 	.word	0x000bb493
   b60e8:	000bb4aa 	.word	0x000bb4aa
   b60ec:	000b5ed5 	.word	0x000b5ed5

000b60f0 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   b60f0:	f247 5130 	movw	r1, #30000	; 0x7530
   b60f4:	4a08      	ldr	r2, [pc, #32]	; (b6118 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   b60f6:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b60f8:	4908      	ldr	r1, [pc, #32]	; (b611c <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   b60fa:	6002      	str	r2, [r0, #0]
   b60fc:	2200      	movs	r2, #0
   b60fe:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6102:	4907      	ldr	r1, [pc, #28]	; (b6120 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   b6104:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   b6106:	4907      	ldr	r1, [pc, #28]	; (b6124 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   b6108:	6042      	str	r2, [r0, #4]
   b610a:	e9c0 2208 	strd	r2, r2, [r0, #32]
   b610e:	6181      	str	r1, [r0, #24]
   b6110:	8502      	strh	r2, [r0, #40]	; 0x28
   b6112:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   b6116:	4770      	bx	lr
   b6118:	000bb524 	.word	0x000bb524
   b611c:	000b5f01 	.word	0x000b5f01
   b6120:	000b5e3d 	.word	0x000b5e3d
   b6124:	000b5e5b 	.word	0x000b5e5b

000b6128 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   b6128:	b510      	push	{r4, lr}
   b612a:	4b04      	ldr	r3, [pc, #16]	; (b613c <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   b612c:	4604      	mov	r4, r0
   b612e:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   b6132:	f7fe f907 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
}
   b6136:	4620      	mov	r0, r4
   b6138:	bd10      	pop	{r4, pc}
   b613a:	bf00      	nop
   b613c:	000bb524 	.word	0x000bb524

000b6140 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b6140:	b510      	push	{r4, lr}
   b6142:	4b03      	ldr	r3, [pc, #12]	; (b6150 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   b6144:	6003      	str	r3, [r0, #0]
   b6146:	4604      	mov	r4, r0
   b6148:	f7ff ffee 	bl	b6128 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   b614c:	4620      	mov	r0, r4
   b614e:	bd10      	pop	{r4, pc}
   b6150:	000bb54c 	.word	0x000bb54c

000b6154 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b6154:	b510      	push	{r4, lr}
   b6156:	4604      	mov	r4, r0
}
   b6158:	f7ff fff2 	bl	b6140 <_ZN25PublishQueueAsyncRetainedD1Ev>
   b615c:	4620      	mov	r0, r4
   b615e:	2138      	movs	r1, #56	; 0x38
   b6160:	f7fd ff9d 	bl	b409e <_ZdlPvj>
   b6164:	4620      	mov	r0, r4
   b6166:	bd10      	pop	{r4, pc}

000b6168 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   b6168:	6880      	ldr	r0, [r0, #8]
   b616a:	f000 ba69 	b.w	b6640 <os_mutex_lock>

000b616e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   b616e:	6880      	ldr	r0, [r0, #8]
   b6170:	f000 ba6e 	b.w	b6650 <os_mutex_unlock>

000b6174 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   b6174:	b510      	push	{r4, lr}
   b6176:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   b6178:	6800      	ldr	r0, [r0, #0]
   b617a:	f7ff fff8 	bl	b616e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   b617e:	4620      	mov	r0, r4
   b6180:	bd10      	pop	{r4, pc}

000b6182 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   b6182:	b513      	push	{r0, r1, r4, lr}
   b6184:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6186:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6188:	f7ff ffee 	bl	b6168 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b618c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   b618e:	88dc      	ldrh	r4, [r3, #6]
   b6190:	b2a4      	uxth	r4, r4
   b6192:	b10c      	cbz	r4, b6198 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   b6194:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   b6198:	a801      	add	r0, sp, #4
   b619a:	f7ff ffeb 	bl	b6174 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   b619e:	4620      	mov	r0, r4
   b61a0:	b002      	add	sp, #8
   b61a2:	bd10      	pop	{r4, pc}

000b61a4 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   b61a4:	b513      	push	{r0, r1, r4, lr}
   b61a6:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b61a8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b61aa:	f7ff ffdd 	bl	b6168 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   b61ae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b61b2:	b943      	cbnz	r3, b61c6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b61b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   b61b6:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   b61b8:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   b61ba:	a801      	add	r0, sp, #4
   b61bc:	f7ff ffda 	bl	b6174 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   b61c0:	4620      	mov	r0, r4
   b61c2:	b002      	add	sp, #8
   b61c4:	bd10      	pop	{r4, pc}
	bool result = false;
   b61c6:	2400      	movs	r4, #0
   b61c8:	e7f7      	b.n	b61ba <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000b61ca <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   b61ca:	b513      	push	{r0, r1, r4, lr}
   b61cc:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b61ce:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b61d0:	f7ff ffca 	bl	b6168 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   b61d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   b61d6:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   b61d8:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   b61da:	f7ff ffcb 	bl	b6174 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   b61de:	4620      	mov	r0, r4
   b61e0:	b002      	add	sp, #8
   b61e2:	bd10      	pop	{r4, pc}

000b61e4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b61e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b61e8:	4699      	mov	r9, r3
   b61ea:	b086      	sub	sp, #24
	if (!haveSetup) {
   b61ec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b61f0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   b61f4:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b61f8:	4604      	mov	r4, r0
   b61fa:	460f      	mov	r7, r1
   b61fc:	4616      	mov	r6, r2
	if (!haveSetup) {
   b61fe:	b913      	cbnz	r3, b6206 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   b6200:	6803      	ldr	r3, [r0, #0]
   b6202:	689b      	ldr	r3, [r3, #8]
   b6204:	4798      	blx	r3
		data = "";
   b6206:	4b31      	ldr	r3, [pc, #196]	; (b62cc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6208:	4638      	mov	r0, r7
		data = "";
   b620a:	2e00      	cmp	r6, #0
   b620c:	bf08      	it	eq
   b620e:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6210:	f002 fded 	bl	b8dee <strlen>
   b6214:	4605      	mov	r5, r0
   b6216:	4630      	mov	r0, r6
   b6218:	f002 fde9 	bl	b8dee <strlen>
   b621c:	4428      	add	r0, r5
   b621e:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   b6222:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   b6224:	bf1c      	itt	ne
   b6226:	f025 0503 	bicne.w	r5, r5, #3
   b622a:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   b622c:	4633      	mov	r3, r6
   b622e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6232:	e9cd 9a00 	strd	r9, sl, [sp]
   b6236:	4926      	ldr	r1, [pc, #152]	; (b62d0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   b6238:	4826      	ldr	r0, [pc, #152]	; (b62d4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   b623a:	463a      	mov	r2, r7
   b623c:	f7ff f88a 	bl	b5354 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   b6240:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b6242:	3b08      	subs	r3, #8
   b6244:	42ab      	cmp	r3, r5
   b6246:	d212      	bcs.n	b626e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   b6248:	2400      	movs	r4, #0
}
   b624a:	4620      	mov	r0, r4
   b624c:	b006      	add	sp, #24
   b624e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   b6252:	88cb      	ldrh	r3, [r1, #6]
   b6254:	2b01      	cmp	r3, #1
   b6256:	d036      	beq.n	b62c6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   b6258:	a805      	add	r0, sp, #20
   b625a:	f7ff ff8b 	bl	b6174 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   b625e:	6823      	ldr	r3, [r4, #0]
   b6260:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   b6264:	699b      	ldr	r3, [r3, #24]
   b6266:	4620      	mov	r0, r4
   b6268:	4798      	blx	r3
   b626a:	2800      	cmp	r0, #0
   b626c:	d0ec      	beq.n	b6248 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   b626e:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6270:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   b6272:	f7ff ff79 	bl	b6168 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6276:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6278:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   b627a:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b627c:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   b627e:	1ad2      	subs	r2, r2, r3
   b6280:	42aa      	cmp	r2, r5
   b6282:	d3e6      	bcc.n	b6252 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   b6284:	ea48 080a 	orr.w	r8, r8, sl
   b6288:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   b628c:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   b6290:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   b6292:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   b6296:	4639      	mov	r1, r7
   b6298:	4640      	mov	r0, r8
   b629a:	f002 fd83 	bl	b8da4 <strcpy>
				cp += strlen(cp) + 1;
   b629e:	4640      	mov	r0, r8
   b62a0:	f002 fda5 	bl	b8dee <strlen>
   b62a4:	3001      	adds	r0, #1
				strcpy(cp, data);
   b62a6:	4631      	mov	r1, r6
   b62a8:	4440      	add	r0, r8
   b62aa:	f002 fd7b 	bl	b8da4 <strcpy>
				nextFree += size;
   b62ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b62b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   b62b2:	442b      	add	r3, r5
   b62b4:	6363      	str	r3, [r4, #52]	; 0x34
				hdr->numEvents++;
   b62b6:	88d3      	ldrh	r3, [r2, #6]
   b62b8:	3301      	adds	r3, #1
   b62ba:	80d3      	strh	r3, [r2, #6]
				return true;
   b62bc:	2401      	movs	r4, #1
   b62be:	a805      	add	r0, sp, #20
   b62c0:	f7ff ff58 	bl	b6174 <_ZN11StMutexLockD1Ev>
   b62c4:	e7c1      	b.n	b624a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   b62c6:	2400      	movs	r4, #0
   b62c8:	e7f9      	b.n	b62be <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   b62ca:	bf00      	nop
   b62cc:	000bb728 	.word	0x000bb728
   b62d0:	000bb4d1 	.word	0x000bb4d1
   b62d4:	2003e650 	.word	0x2003e650

000b62d8 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   b62d8:	b508      	push	{r3, lr}
   b62da:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b62dc:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   b62e0:	69a3      	ldr	r3, [r4, #24]
   b62e2:	b90b      	cbnz	r3, b62e8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   b62e4:	f001 ffbc 	bl	b8260 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b62e8:	69e3      	ldr	r3, [r4, #28]
   b62ea:	4621      	mov	r1, r4
   b62ec:	4628      	mov	r0, r5
   b62ee:	4798      	blx	r3
		os_thread_yield();
   b62f0:	f000 f96e 	bl	b65d0 <os_thread_yield>
	while(true) {
   b62f4:	e7f4      	b.n	b62e0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000b62f6 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   b62f6:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   b62f8:	f7ff ffee 	bl	b62d8 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000b62fc <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b62fc:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   b62fe:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b6302:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6304:	4628      	mov	r0, r5
   b6306:	f002 fd72 	bl	b8dee <strlen>
   b630a:	3001      	adds	r0, #1
   b630c:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b630e:	4628      	mov	r0, r5
   b6310:	f002 fd6d 	bl	b8dee <strlen>
	size_t offset = start - retainedBuffer;
   b6314:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6316:	3001      	adds	r0, #1
   b6318:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   b631a:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   b631c:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   b6320:	bf1c      	itt	ne
   b6322:	f1c3 0304 	rsbne	r3, r3, #4
   b6326:	18c0      	addne	r0, r0, r3
}
   b6328:	bd68      	pop	{r3, r5, r6, pc}

000b632a <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   b632a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b632c:	4604      	mov	r4, r0
   b632e:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6330:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6332:	f7ff ff19 	bl	b6168 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6336:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6338:	88fb      	ldrh	r3, [r7, #6]
   b633a:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   b633e:	b1e6      	cbz	r6, b637a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   b6340:	2b01      	cmp	r3, #1
   b6342:	d922      	bls.n	b638a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   b6344:	4629      	mov	r1, r5
   b6346:	4620      	mov	r0, r4
   b6348:	f7ff ffd8 	bl	b62fc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   b634c:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   b634e:	4629      	mov	r1, r5
   b6350:	4620      	mov	r0, r4
   b6352:	f7ff ffd3 	bl	b62fc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6356:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   b6358:	443a      	add	r2, r7
	if (after > 0) {
   b635a:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   b635c:	4601      	mov	r1, r0
	size_t len = next - start;
   b635e:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   b6362:	d002      	beq.n	b636a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   b6364:	4628      	mov	r0, r5
   b6366:	f002 fcc3 	bl	b8cf0 <memmove>
	nextFree -= len;
   b636a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b636c:	1b9b      	subs	r3, r3, r6
   b636e:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   b6370:	88fb      	ldrh	r3, [r7, #6]
   b6372:	3b01      	subs	r3, #1
   b6374:	80fb      	strh	r3, [r7, #6]
	return true;
   b6376:	2601      	movs	r6, #1
   b6378:	e001      	b.n	b637e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   b637a:	2b00      	cmp	r3, #0
   b637c:	d1e7      	bne.n	b634e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   b637e:	a801      	add	r0, sp, #4
   b6380:	f7ff fef8 	bl	b6174 <_ZN11StMutexLockD1Ev>
}
   b6384:	4630      	mov	r0, r6
   b6386:	b003      	add	sp, #12
   b6388:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   b638a:	2600      	movs	r6, #0
   b638c:	e7f7      	b.n	b637e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000b6390 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6394:	460d      	mov	r5, r1
   b6396:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6398:	462f      	mov	r7, r5
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b639a:	4b17      	ldr	r3, [pc, #92]	; (b63f8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b639c:	f8df 905c 	ldr.w	r9, [pc, #92]	; b63fc <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b63a0:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b63a2:	f7ff fea5 	bl	b60f0 <_ZN21PublishQueueAsyncBaseC1Ev>
   b63a6:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b63a8:	f857 3b08 	ldr.w	r3, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b63ac:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b63ae:	454b      	cmp	r3, r9
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b63b0:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b63b2:	d117      	bne.n	b63e4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   b63b4:	88ab      	ldrh	r3, [r5, #4]
   b63b6:	b29b      	uxth	r3, r3
   b63b8:	42b3      	cmp	r3, r6
   b63ba:	d113      	bne.n	b63e4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   b63bc:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b63c0:	6367      	str	r7, [r4, #52]	; 0x34
   b63c2:	f04f 0800 	mov.w	r8, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   b63c6:	88eb      	ldrh	r3, [r5, #6]
   b63c8:	fa1f f288 	uxth.w	r2, r8
   b63cc:	b29b      	uxth	r3, r3
   b63ce:	429a      	cmp	r2, r3
   b63d0:	d20e      	bcs.n	b63f0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   b63d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b63d4:	4620      	mov	r0, r4
   b63d6:	f7ff ff91 	bl	b62fc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   b63da:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   b63dc:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   b63de:	f108 0801 	add.w	r8, r8, #1
   b63e2:	d9f0      	bls.n	b63c6 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   b63e4:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   b63e6:	f8c5 9000 	str.w	r9, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b63ea:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   b63ec:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   b63ee:	80eb      	strh	r3, [r5, #6]
}
   b63f0:	4620      	mov	r0, r4
   b63f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b63f6:	bf00      	nop
   b63f8:	000bb54c 	.word	0x000bb54c
   b63fc:	d19cab61 	.word	0xd19cab61

000b6400 <_GLOBAL__sub_I_pubqLogger>:
   b6400:	4b01      	ldr	r3, [pc, #4]	; (b6408 <_GLOBAL__sub_I_pubqLogger+0x8>)
   b6402:	4a02      	ldr	r2, [pc, #8]	; (b640c <_GLOBAL__sub_I_pubqLogger+0xc>)
   b6404:	601a      	str	r2, [r3, #0]
}
   b6406:	4770      	bx	lr
   b6408:	2003e650 	.word	0x2003e650
   b640c:	000bb512 	.word	0x000bb512

000b6410 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   b6410:	4770      	bx	lr

000b6412 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   b6412:	b538      	push	{r3, r4, r5, lr}
   b6414:	4605      	mov	r5, r0
   b6416:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b6418:	f001 feba 	bl	b8190 <_Z19__fetch_global_Wirev>
   b641c:	7829      	ldrb	r1, [r5, #0]
   b641e:	f001 f85d 	bl	b74dc <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   b6422:	f001 feb5 	bl	b8190 <_Z19__fetch_global_Wirev>
  inline size_t write(int n) { return write((uint8_t)n); }
   b6426:	6803      	ldr	r3, [r0, #0]
   b6428:	0a21      	lsrs	r1, r4, #8
   b642a:	689b      	ldr	r3, [r3, #8]
   b642c:	4798      	blx	r3
  Wire.write(cmd & 0xFF);
   b642e:	f001 feaf 	bl	b8190 <_Z19__fetch_global_Wirev>
   b6432:	6803      	ldr	r3, [r0, #0]
   b6434:	b2e1      	uxtb	r1, r4
   b6436:	689b      	ldr	r3, [r3, #8]
   b6438:	4798      	blx	r3
  Wire.endTransmission();  
   b643a:	f001 fea9 	bl	b8190 <_Z19__fetch_global_Wirev>
}
   b643e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   b6442:	f001 b856 	b.w	b74f2 <_ZN7TwoWire15endTransmissionEv>

000b6446 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   b6446:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   b6448:	f243 01a2 	movw	r1, #12450	; 0x30a2
   b644c:	f7ff ffe1 	bl	b6412 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   b6450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   b6454:	200a      	movs	r0, #10
   b6456:	f000 bc3b 	b.w	b6cd0 <delay>

000b645a <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   b645a:	b538      	push	{r3, r4, r5, lr}
   b645c:	4604      	mov	r4, r0
   b645e:	460d      	mov	r5, r1
  Wire.begin();
   b6460:	f001 fe96 	bl	b8190 <_Z19__fetch_global_Wirev>
   b6464:	f001 f808 	bl	b7478 <_ZN7TwoWire5beginEv>
  reset();
   b6468:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   b646a:	7025      	strb	r5, [r4, #0]
  reset();
   b646c:	f7ff ffeb 	bl	b6446 <_ZN14Adafruit_SHT315resetEv>
}
   b6470:	2001      	movs	r0, #1
   b6472:	bd38      	pop	{r3, r4, r5, pc}

000b6474 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   b6474:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   b6476:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   b6478:	4291      	cmp	r1, r2
   b647a:	d00e      	beq.n	b649a <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   b647c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6480:	4058      	eors	r0, r3
   b6482:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   b6484:	f010 0f80 	tst.w	r0, #128	; 0x80
   b6488:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   b648c:	bf18      	it	ne
   b648e:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   b6492:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   b6494:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   b6496:	d1f5      	bne.n	b6484 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   b6498:	e7ee      	b.n	b6478 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   b649a:	4770      	bx	lr
   b649c:	0000      	movs	r0, r0
	...

000b64a0 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   b64a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   b64a2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   b64a6:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   b64a8:	f7ff ffb3 	bl	b6412 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   b64ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b64b0:	f000 fc0e 	bl	b6cd0 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   b64b4:	f001 fe6c 	bl	b8190 <_Z19__fetch_global_Wirev>
   b64b8:	7829      	ldrb	r1, [r5, #0]
   b64ba:	2206      	movs	r2, #6
   b64bc:	f001 f80b 	bl	b74d6 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   b64c0:	f001 fe66 	bl	b8190 <_Z19__fetch_global_Wirev>
   b64c4:	6803      	ldr	r3, [r0, #0]
   b64c6:	691b      	ldr	r3, [r3, #16]
   b64c8:	4798      	blx	r3
   b64ca:	2806      	cmp	r0, #6
   b64cc:	4604      	mov	r4, r0
   b64ce:	d002      	beq.n	b64d6 <_ZN14Adafruit_SHT3111readTempHumEv+0x36>
    return false;
   b64d0:	2000      	movs	r0, #0
}
   b64d2:	b002      	add	sp, #8
   b64d4:	bd70      	pop	{r4, r5, r6, pc}
   b64d6:	466e      	mov	r6, sp
    readbuffer[i] = Wire.read();
   b64d8:	f001 fe5a 	bl	b8190 <_Z19__fetch_global_Wirev>
   b64dc:	6803      	ldr	r3, [r0, #0]
   b64de:	695b      	ldr	r3, [r3, #20]
   b64e0:	4798      	blx	r3
  for (uint8_t i=0; i<6; i++) {
   b64e2:	3c01      	subs	r4, #1
   b64e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   b64e8:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   b64ec:	4669      	mov	r1, sp
   b64ee:	d1f3      	bne.n	b64d8 <_ZN14Adafruit_SHT3111readTempHumEv+0x38>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   b64f0:	2202      	movs	r2, #2
   b64f2:	4628      	mov	r0, r5
   b64f4:	f7ff ffbe 	bl	b6474 <_ZN14Adafruit_SHT314crc8EPKhi>
   b64f8:	f89d 4002 	ldrb.w	r4, [sp, #2]
   b64fc:	4284      	cmp	r4, r0
   b64fe:	d1e7      	bne.n	b64d0 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   b6500:	2202      	movs	r2, #2
   b6502:	f10d 0103 	add.w	r1, sp, #3
   b6506:	4628      	mov	r0, r5
   b6508:	f7ff ffb4 	bl	b6474 <_ZN14Adafruit_SHT314crc8EPKhi>
   b650c:	f89d 4005 	ldrb.w	r4, [sp, #5]
   b6510:	4284      	cmp	r4, r0
   b6512:	d1dd      	bne.n	b64d0 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  double stemp = ST;
   b6514:	f8bd 0000 	ldrh.w	r0, [sp]
   b6518:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   b651c:	ba40      	rev16	r0, r0
   b651e:	b280      	uxth	r0, r0
   b6520:	f001 ffe4 	bl	b84ec <__aeabi_ui2d>
  stemp *= 175;
   b6524:	a316      	add	r3, pc, #88	; (adr r3, b6580 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   b6526:	e9d3 2300 	ldrd	r2, r3, [r3]
   b652a:	f002 f859 	bl	b85e0 <__aeabi_dmul>
  stemp /= 0xffff;
   b652e:	a310      	add	r3, pc, #64	; (adr r3, b6570 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6530:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6534:	f002 f97e 	bl	b8834 <__aeabi_ddiv>
  stemp = -45 + stemp;
   b6538:	4b0f      	ldr	r3, [pc, #60]	; (b6578 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   b653a:	2200      	movs	r2, #0
   b653c:	f001 fe98 	bl	b8270 <__aeabi_dsub>
  temp = stemp;
   b6540:	f002 fb08 	bl	b8b54 <__aeabi_d2f>
   b6544:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   b6546:	ba60      	rev16	r0, r4
   b6548:	b280      	uxth	r0, r0
   b654a:	f001 ffcf 	bl	b84ec <__aeabi_ui2d>
  shum *= 100;
   b654e:	4b0b      	ldr	r3, [pc, #44]	; (b657c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   b6550:	2200      	movs	r2, #0
   b6552:	f002 f845 	bl	b85e0 <__aeabi_dmul>
  shum /= 0xFFFF;
   b6556:	a306      	add	r3, pc, #24	; (adr r3, b6570 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6558:	e9d3 2300 	ldrd	r2, r3, [r3]
   b655c:	f002 f96a 	bl	b8834 <__aeabi_ddiv>
  humidity = shum;
   b6560:	f002 faf8 	bl	b8b54 <__aeabi_d2f>
   b6564:	6068      	str	r0, [r5, #4]
  return true;
   b6566:	2001      	movs	r0, #1
   b6568:	e7b3      	b.n	b64d2 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
   b656a:	bf00      	nop
   b656c:	f3af 8000 	nop.w
   b6570:	00000000 	.word	0x00000000
   b6574:	40efffe0 	.word	0x40efffe0
   b6578:	40468000 	.word	0x40468000
   b657c:	40590000 	.word	0x40590000
   b6580:	00000000 	.word	0x00000000
   b6584:	4065e000 	.word	0x4065e000

000b6588 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   b6588:	b510      	push	{r4, lr}
   b658a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b658c:	f7ff ff88 	bl	b64a0 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6590:	b110      	cbz	r0, b6598 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   b6592:	ed94 0a02 	vldr	s0, [r4, #8]
}
   b6596:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6598:	ed9f 0a01 	vldr	s0, [pc, #4]	; b65a0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   b659c:	e7fb      	b.n	b6596 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   b659e:	bf00      	nop
   b65a0:	7fc00000 	.word	0x7fc00000

000b65a4 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   b65a4:	b510      	push	{r4, lr}
   b65a6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b65a8:	f7ff ff7a 	bl	b64a0 <_ZN14Adafruit_SHT3111readTempHumEv>
   b65ac:	b110      	cbz	r0, b65b4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   b65ae:	ed94 0a01 	vldr	s0, [r4, #4]
}
   b65b2:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b65b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b65bc <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   b65b8:	e7fb      	b.n	b65b2 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   b65ba:	bf00      	nop
   b65bc:	7fc00000 	.word	0x7fc00000

000b65c0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <os_thread_create+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	685b      	ldr	r3, [r3, #4]
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	00030248 	.word	0x00030248

000b65d0 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b02      	ldr	r3, [pc, #8]	; (b65dc <os_thread_yield+0xc>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	68db      	ldr	r3, [r3, #12]
   b65d8:	9301      	str	r3, [sp, #4]
   b65da:	bd08      	pop	{r3, pc}
   b65dc:	00030248 	.word	0x00030248

000b65e0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b65e0:	b508      	push	{r3, lr}
   b65e2:	4b02      	ldr	r3, [pc, #8]	; (b65ec <os_thread_scheduling+0xc>)
   b65e4:	681b      	ldr	r3, [r3, #0]
   b65e6:	69db      	ldr	r3, [r3, #28]
   b65e8:	9301      	str	r3, [sp, #4]
   b65ea:	bd08      	pop	{r3, pc}
   b65ec:	00030248 	.word	0x00030248

000b65f0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b65f0:	b508      	push	{r3, lr}
   b65f2:	4b02      	ldr	r3, [pc, #8]	; (b65fc <os_timer_create+0xc>)
   b65f4:	681b      	ldr	r3, [r3, #0]
   b65f6:	6a1b      	ldr	r3, [r3, #32]
   b65f8:	9301      	str	r3, [sp, #4]
   b65fa:	bd08      	pop	{r3, pc}
   b65fc:	00030248 	.word	0x00030248

000b6600 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <os_timer_destroy+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	00030248 	.word	0x00030248

000b6610 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <os_timer_get_id+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	00030248 	.word	0x00030248

000b6620 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <os_timer_change+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	00030248 	.word	0x00030248

000b6630 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <os_mutex_create+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	00030248 	.word	0x00030248

000b6640 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <os_mutex_lock+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	00030248 	.word	0x00030248

000b6650 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <os_mutex_unlock+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	00030248 	.word	0x00030248

000b6660 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <os_mutex_recursive_create+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	00030248 	.word	0x00030248

000b6670 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <os_thread_exit+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	00030248 	.word	0x00030248

000b6680 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <os_timer_set_id+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	00030248 	.word	0x00030248

000b6690 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <HAL_Feature_Set+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	00030234 	.word	0x00030234

000b66a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <HAL_RNG_GetRandomNumber+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	685b      	ldr	r3, [r3, #4]
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	00030218 	.word	0x00030218

000b66b0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <HAL_Delay_Milliseconds+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	689b      	ldr	r3, [r3, #8]
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	00030218 	.word	0x00030218

000b66c0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b66c0:	b508      	push	{r3, lr}
   b66c2:	4b02      	ldr	r3, [pc, #8]	; (b66cc <HAL_Delay_Microseconds+0xc>)
   b66c4:	681b      	ldr	r3, [r3, #0]
   b66c6:	68db      	ldr	r3, [r3, #12]
   b66c8:	9301      	str	r3, [sp, #4]
   b66ca:	bd08      	pop	{r3, pc}
   b66cc:	00030218 	.word	0x00030218

000b66d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b66d0:	b508      	push	{r3, lr}
   b66d2:	4b02      	ldr	r3, [pc, #8]	; (b66dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b66d4:	681b      	ldr	r3, [r3, #0]
   b66d6:	695b      	ldr	r3, [r3, #20]
   b66d8:	9301      	str	r3, [sp, #4]
   b66da:	bd08      	pop	{r3, pc}
   b66dc:	00030218 	.word	0x00030218

000b66e0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b66e0:	b508      	push	{r3, lr}
   b66e2:	4b02      	ldr	r3, [pc, #8]	; (b66ec <hal_rtc_time_is_valid+0xc>)
   b66e4:	681b      	ldr	r3, [r3, #0]
   b66e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b66e8:	9301      	str	r3, [sp, #4]
   b66ea:	bd08      	pop	{r3, pc}
   b66ec:	00030218 	.word	0x00030218

000b66f0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b66f0:	b508      	push	{r3, lr}
   b66f2:	4b02      	ldr	r3, [pc, #8]	; (b66fc <hal_timer_millis+0xc>)
   b66f4:	681b      	ldr	r3, [r3, #0]
   b66f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b66f8:	9301      	str	r3, [sp, #4]
   b66fa:	bd08      	pop	{r3, pc}
   b66fc:	00030218 	.word	0x00030218

000b6700 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6700:	b508      	push	{r3, lr}
   b6702:	4b02      	ldr	r3, [pc, #8]	; (b670c <hal_rtc_get_time+0xc>)
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6708:	9301      	str	r3, [sp, #4]
   b670a:	bd08      	pop	{r3, pc}
   b670c:	00030218 	.word	0x00030218

000b6710 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b6710:	b508      	push	{r3, lr}
   b6712:	4b02      	ldr	r3, [pc, #8]	; (b671c <hal_rtc_set_time+0xc>)
   b6714:	681b      	ldr	r3, [r3, #0]
   b6716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b6718:	9301      	str	r3, [sp, #4]
   b671a:	bd08      	pop	{r3, pc}
   b671c:	00030218 	.word	0x00030218

000b6720 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6720:	b508      	push	{r3, lr}
   b6722:	4b02      	ldr	r3, [pc, #8]	; (b672c <HAL_Pin_Mode+0xc>)
   b6724:	681b      	ldr	r3, [r3, #0]
   b6726:	689b      	ldr	r3, [r3, #8]
   b6728:	9301      	str	r3, [sp, #4]
   b672a:	bd08      	pop	{r3, pc}
   b672c:	0003022c 	.word	0x0003022c

000b6730 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6730:	b508      	push	{r3, lr}
   b6732:	4b02      	ldr	r3, [pc, #8]	; (b673c <HAL_Get_Pin_Mode+0xc>)
   b6734:	681b      	ldr	r3, [r3, #0]
   b6736:	68db      	ldr	r3, [r3, #12]
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	bd08      	pop	{r3, pc}
   b673c:	0003022c 	.word	0x0003022c

000b6740 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6740:	b508      	push	{r3, lr}
   b6742:	4b02      	ldr	r3, [pc, #8]	; (b674c <HAL_GPIO_Write+0xc>)
   b6744:	681b      	ldr	r3, [r3, #0]
   b6746:	691b      	ldr	r3, [r3, #16]
   b6748:	9301      	str	r3, [sp, #4]
   b674a:	bd08      	pop	{r3, pc}
   b674c:	0003022c 	.word	0x0003022c

000b6750 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <HAL_GPIO_Read+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	695b      	ldr	r3, [r3, #20]
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	0003022c 	.word	0x0003022c

000b6760 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <HAL_Interrupts_Attach+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	699b      	ldr	r3, [r3, #24]
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	0003022c 	.word	0x0003022c

000b6770 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <HAL_Interrupts_Detach+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	69db      	ldr	r3, [r3, #28]
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	0003022c 	.word	0x0003022c

000b6780 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <hal_i2c_begin+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	68db      	ldr	r3, [r3, #12]
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	00030228 	.word	0x00030228

000b6790 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <hal_i2c_begin_transmission+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	699b      	ldr	r3, [r3, #24]
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	00030228 	.word	0x00030228

000b67a0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <hal_i2c_end_transmission+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	69db      	ldr	r3, [r3, #28]
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	00030228 	.word	0x00030228

000b67b0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <hal_i2c_write+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	6a1b      	ldr	r3, [r3, #32]
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	00030228 	.word	0x00030228

000b67c0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <hal_i2c_available+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	00030228 	.word	0x00030228

000b67d0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <hal_i2c_read+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	00030228 	.word	0x00030228

000b67e0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <hal_i2c_peek+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	00030228 	.word	0x00030228

000b67f0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <hal_i2c_flush+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	00030228 	.word	0x00030228

000b6800 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <hal_i2c_is_enabled+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	00030228 	.word	0x00030228

000b6810 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <hal_i2c_init+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	00030228 	.word	0x00030228

000b6820 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <hal_i2c_lock+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	00030228 	.word	0x00030228

000b6830 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <hal_i2c_unlock+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030228 	.word	0x00030228

000b6840 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <hal_i2c_request_ex+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030228 	.word	0x00030228

000b6850 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <inet_inet_ntop+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	695b      	ldr	r3, [r3, #20]
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030264 	.word	0x00030264

000b6860 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <netdb_freeaddrinfo+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	689b      	ldr	r3, [r3, #8]
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	00030268 	.word	0x00030268

000b6870 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <netdb_getaddrinfo+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	68db      	ldr	r3, [r3, #12]
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	00030268 	.word	0x00030268

000b6880 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b02      	ldr	r3, [pc, #8]	; (b688c <hal_spi_init+0xc>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	69db      	ldr	r3, [r3, #28]
   b6888:	9301      	str	r3, [sp, #4]
   b688a:	bd08      	pop	{r3, pc}
   b688c:	00030230 	.word	0x00030230

000b6890 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b02      	ldr	r3, [pc, #8]	; (b689c <hal_spi_is_enabled+0xc>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	6a1b      	ldr	r3, [r3, #32]
   b6898:	9301      	str	r3, [sp, #4]
   b689a:	bd08      	pop	{r3, pc}
   b689c:	00030230 	.word	0x00030230

000b68a0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b02      	ldr	r3, [pc, #8]	; (b68ac <hal_usart_write+0xc>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	68db      	ldr	r3, [r3, #12]
   b68a8:	9301      	str	r3, [sp, #4]
   b68aa:	bd08      	pop	{r3, pc}
   b68ac:	0003023c 	.word	0x0003023c

000b68b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <hal_usart_available+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	691b      	ldr	r3, [r3, #16]
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	0003023c 	.word	0x0003023c

000b68c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <hal_usart_read+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	695b      	ldr	r3, [r3, #20]
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	0003023c 	.word	0x0003023c

000b68d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <hal_usart_peek+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	699b      	ldr	r3, [r3, #24]
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	0003023c 	.word	0x0003023c

000b68e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <hal_usart_flush+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	69db      	ldr	r3, [r3, #28]
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	0003023c 	.word	0x0003023c

000b68f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <hal_usart_is_enabled+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	6a1b      	ldr	r3, [r3, #32]
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	0003023c 	.word	0x0003023c

000b6900 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <hal_usart_available_data_for_write+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	0003023c 	.word	0x0003023c

000b6910 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <hal_usart_init_ex+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	0003023c 	.word	0x0003023c

000b6920 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <HAL_USB_USART_Init+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	681b      	ldr	r3, [r3, #0]
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	0003024c 	.word	0x0003024c

000b6930 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <HAL_USB_USART_Available_Data+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	691b      	ldr	r3, [r3, #16]
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	0003024c 	.word	0x0003024c

000b6940 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	695b      	ldr	r3, [r3, #20]
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	0003024c 	.word	0x0003024c

000b6950 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <HAL_USB_USART_Receive_Data+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	699b      	ldr	r3, [r3, #24]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	0003024c 	.word	0x0003024c

000b6960 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <HAL_USB_USART_Send_Data+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	69db      	ldr	r3, [r3, #28]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	0003024c 	.word	0x0003024c

000b6970 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <HAL_USB_USART_Flush_Data+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	6a1b      	ldr	r3, [r3, #32]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	0003024c 	.word	0x0003024c

000b6980 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <panic_+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	00030260 	.word	0x00030260

000b6990 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <log_message_v+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	00030260 	.word	0x00030260

000b69a0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b03      	ldr	r3, [pc, #12]	; (b69b0 <diag_get_source+0x10>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b69aa:	9301      	str	r3, [sp, #4]
   b69ac:	bd08      	pop	{r3, pc}
   b69ae:	0000      	.short	0x0000
   b69b0:	00030260 	.word	0x00030260

000b69b4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b69b4:	b508      	push	{r3, lr}
   b69b6:	4b02      	ldr	r3, [pc, #8]	; (b69c0 <system_mode+0xc>)
   b69b8:	681b      	ldr	r3, [r3, #0]
   b69ba:	681b      	ldr	r3, [r3, #0]
   b69bc:	9301      	str	r3, [sp, #4]
   b69be:	bd08      	pop	{r3, pc}
   b69c0:	00030220 	.word	0x00030220

000b69c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b69c4:	b508      	push	{r3, lr}
   b69c6:	4b02      	ldr	r3, [pc, #8]	; (b69d0 <set_system_mode+0xc>)
   b69c8:	681b      	ldr	r3, [r3, #0]
   b69ca:	685b      	ldr	r3, [r3, #4]
   b69cc:	9301      	str	r3, [sp, #4]
   b69ce:	bd08      	pop	{r3, pc}
   b69d0:	00030220 	.word	0x00030220

000b69d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b69d4:	b508      	push	{r3, lr}
   b69d6:	4b02      	ldr	r3, [pc, #8]	; (b69e0 <system_delay_ms+0xc>)
   b69d8:	681b      	ldr	r3, [r3, #0]
   b69da:	695b      	ldr	r3, [r3, #20]
   b69dc:	9301      	str	r3, [sp, #4]
   b69de:	bd08      	pop	{r3, pc}
   b69e0:	00030220 	.word	0x00030220

000b69e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <system_thread_set_state+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	00030220 	.word	0x00030220

000b69f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <application_thread_current+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	00030220 	.word	0x00030220

000b6a04 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <application_thread_invoke+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	00030220 	.word	0x00030220

000b6a14 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <system_thread_get_state+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	00030220 	.word	0x00030220

000b6a24 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b02      	ldr	r3, [pc, #8]	; (b6a30 <system_notify_time_changed+0xc>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6a2c:	9301      	str	r3, [sp, #4]
   b6a2e:	bd08      	pop	{r3, pc}
   b6a30:	00030220 	.word	0x00030220

000b6a34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6a34:	b508      	push	{r3, lr}
   b6a36:	4b03      	ldr	r3, [pc, #12]	; (b6a44 <system_ctrl_set_app_request_handler+0x10>)
   b6a38:	681b      	ldr	r3, [r3, #0]
   b6a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6a3e:	9301      	str	r3, [sp, #4]
   b6a40:	bd08      	pop	{r3, pc}
   b6a42:	0000      	.short	0x0000
   b6a44:	00030220 	.word	0x00030220

000b6a48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6a48:	b508      	push	{r3, lr}
   b6a4a:	4b03      	ldr	r3, [pc, #12]	; (b6a58 <system_ctrl_set_result+0x10>)
   b6a4c:	681b      	ldr	r3, [r3, #0]
   b6a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6a52:	9301      	str	r3, [sp, #4]
   b6a54:	bd08      	pop	{r3, pc}
   b6a56:	0000      	.short	0x0000
   b6a58:	00030220 	.word	0x00030220

000b6a5c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b03      	ldr	r3, [pc, #12]	; (b6a6c <system_reset+0x10>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b6a66:	9301      	str	r3, [sp, #4]
   b6a68:	bd08      	pop	{r3, pc}
   b6a6a:	0000      	.short	0x0000
   b6a6c:	00030220 	.word	0x00030220

000b6a70 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <spark_variable+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	681b      	ldr	r3, [r3, #0]
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030244 	.word	0x00030244

000b6a80 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <spark_function+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	685b      	ldr	r3, [r3, #4]
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030244 	.word	0x00030244

000b6a90 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <spark_process+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	689b      	ldr	r3, [r3, #8]
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030244 	.word	0x00030244

000b6aa0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <spark_cloud_flag_connected+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	695b      	ldr	r3, [r3, #20]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	00030244 	.word	0x00030244

000b6ab0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <spark_deviceID+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	69db      	ldr	r3, [r3, #28]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	00030244 	.word	0x00030244

000b6ac0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <spark_send_event+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	6a1b      	ldr	r3, [r3, #32]
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	00030244 	.word	0x00030244

000b6ad0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <spark_subscribe+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	00030244 	.word	0x00030244

000b6ae0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <spark_sync_time+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	00030244 	.word	0x00030244

000b6af0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b02      	ldr	r3, [pc, #8]	; (b6afc <spark_sync_time_pending+0xc>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6af8:	9301      	str	r3, [sp, #4]
   b6afa:	bd08      	pop	{r3, pc}
   b6afc:	00030244 	.word	0x00030244

000b6b00 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <spark_sync_time_last+0xc>)
   b6b04:	681b      	ldr	r3, [r3, #0]
   b6b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b08:	9301      	str	r3, [sp, #4]
   b6b0a:	bd08      	pop	{r3, pc}
   b6b0c:	00030244 	.word	0x00030244

000b6b10 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b02      	ldr	r3, [pc, #8]	; (b6b1c <spark_set_connection_property+0xc>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b18:	9301      	str	r3, [sp, #4]
   b6b1a:	bd08      	pop	{r3, pc}
   b6b1c:	00030244 	.word	0x00030244

000b6b20 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6b20:	b508      	push	{r3, lr}
   b6b22:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6b24:	681b      	ldr	r3, [r3, #0]
   b6b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b28:	9301      	str	r3, [sp, #4]
   b6b2a:	bd08      	pop	{r3, pc}
   b6b2c:	00030244 	.word	0x00030244

000b6b30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b30:	b508      	push	{r3, lr}
   b6b32:	4b02      	ldr	r3, [pc, #8]	; (b6b3c <network_connect+0xc>)
   b6b34:	681b      	ldr	r3, [r3, #0]
   b6b36:	685b      	ldr	r3, [r3, #4]
   b6b38:	9301      	str	r3, [sp, #4]
   b6b3a:	bd08      	pop	{r3, pc}
   b6b3c:	00030240 	.word	0x00030240

000b6b40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b02      	ldr	r3, [pc, #8]	; (b6b4c <network_connecting+0xc>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	689b      	ldr	r3, [r3, #8]
   b6b48:	9301      	str	r3, [sp, #4]
   b6b4a:	bd08      	pop	{r3, pc}
   b6b4c:	00030240 	.word	0x00030240

000b6b50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6b50:	b508      	push	{r3, lr}
   b6b52:	4b02      	ldr	r3, [pc, #8]	; (b6b5c <network_disconnect+0xc>)
   b6b54:	681b      	ldr	r3, [r3, #0]
   b6b56:	68db      	ldr	r3, [r3, #12]
   b6b58:	9301      	str	r3, [sp, #4]
   b6b5a:	bd08      	pop	{r3, pc}
   b6b5c:	00030240 	.word	0x00030240

000b6b60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6b60:	b508      	push	{r3, lr}
   b6b62:	4b02      	ldr	r3, [pc, #8]	; (b6b6c <network_ready+0xc>)
   b6b64:	681b      	ldr	r3, [r3, #0]
   b6b66:	691b      	ldr	r3, [r3, #16]
   b6b68:	9301      	str	r3, [sp, #4]
   b6b6a:	bd08      	pop	{r3, pc}
   b6b6c:	00030240 	.word	0x00030240

000b6b70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b70:	b508      	push	{r3, lr}
   b6b72:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <network_on+0xc>)
   b6b74:	681b      	ldr	r3, [r3, #0]
   b6b76:	695b      	ldr	r3, [r3, #20]
   b6b78:	9301      	str	r3, [sp, #4]
   b6b7a:	bd08      	pop	{r3, pc}
   b6b7c:	00030240 	.word	0x00030240

000b6b80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b80:	b508      	push	{r3, lr}
   b6b82:	4b02      	ldr	r3, [pc, #8]	; (b6b8c <network_off+0xc>)
   b6b84:	681b      	ldr	r3, [r3, #0]
   b6b86:	699b      	ldr	r3, [r3, #24]
   b6b88:	9301      	str	r3, [sp, #4]
   b6b8a:	bd08      	pop	{r3, pc}
   b6b8c:	00030240 	.word	0x00030240

000b6b90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b02      	ldr	r3, [pc, #8]	; (b6b9c <network_listen+0xc>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	69db      	ldr	r3, [r3, #28]
   b6b98:	9301      	str	r3, [sp, #4]
   b6b9a:	bd08      	pop	{r3, pc}
   b6b9c:	00030240 	.word	0x00030240

000b6ba0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6ba0:	b508      	push	{r3, lr}
   b6ba2:	4b02      	ldr	r3, [pc, #8]	; (b6bac <network_listening+0xc>)
   b6ba4:	681b      	ldr	r3, [r3, #0]
   b6ba6:	6a1b      	ldr	r3, [r3, #32]
   b6ba8:	9301      	str	r3, [sp, #4]
   b6baa:	bd08      	pop	{r3, pc}
   b6bac:	00030240 	.word	0x00030240

000b6bb0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <network_set_listen_timeout+0xc>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bb8:	9301      	str	r3, [sp, #4]
   b6bba:	bd08      	pop	{r3, pc}
   b6bbc:	00030240 	.word	0x00030240

000b6bc0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6bc0:	b508      	push	{r3, lr}
   b6bc2:	4b02      	ldr	r3, [pc, #8]	; (b6bcc <network_get_listen_timeout+0xc>)
   b6bc4:	681b      	ldr	r3, [r3, #0]
   b6bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6bc8:	9301      	str	r3, [sp, #4]
   b6bca:	bd08      	pop	{r3, pc}
   b6bcc:	00030240 	.word	0x00030240

000b6bd0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6bd0:	b508      	push	{r3, lr}
   b6bd2:	4b02      	ldr	r3, [pc, #8]	; (b6bdc <network_is_on+0xc>)
   b6bd4:	681b      	ldr	r3, [r3, #0]
   b6bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6bd8:	9301      	str	r3, [sp, #4]
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	00030240 	.word	0x00030240

000b6be0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b02      	ldr	r3, [pc, #8]	; (b6bec <network_is_off+0xc>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6be8:	9301      	str	r3, [sp, #4]
   b6bea:	bd08      	pop	{r3, pc}
   b6bec:	00030240 	.word	0x00030240

000b6bf0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6bf0:	b508      	push	{r3, lr}
   b6bf2:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <malloc+0xc>)
   b6bf4:	681b      	ldr	r3, [r3, #0]
   b6bf6:	681b      	ldr	r3, [r3, #0]
   b6bf8:	9301      	str	r3, [sp, #4]
   b6bfa:	bd08      	pop	{r3, pc}
   b6bfc:	0003021c 	.word	0x0003021c

000b6c00 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6c00:	b508      	push	{r3, lr}
   b6c02:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <free+0xc>)
   b6c04:	681b      	ldr	r3, [r3, #0]
   b6c06:	685b      	ldr	r3, [r3, #4]
   b6c08:	9301      	str	r3, [sp, #4]
   b6c0a:	bd08      	pop	{r3, pc}
   b6c0c:	0003021c 	.word	0x0003021c

000b6c10 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6c10:	b508      	push	{r3, lr}
   b6c12:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <realloc+0xc>)
   b6c14:	681b      	ldr	r3, [r3, #0]
   b6c16:	689b      	ldr	r3, [r3, #8]
   b6c18:	9301      	str	r3, [sp, #4]
   b6c1a:	bd08      	pop	{r3, pc}
   b6c1c:	0003021c 	.word	0x0003021c

000b6c20 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b6c20:	b508      	push	{r3, lr}
   b6c22:	4b02      	ldr	r3, [pc, #8]	; (b6c2c <siprintf+0xc>)
   b6c24:	681b      	ldr	r3, [r3, #0]
   b6c26:	691b      	ldr	r3, [r3, #16]
   b6c28:	9301      	str	r3, [sp, #4]
   b6c2a:	bd08      	pop	{r3, pc}
   b6c2c:	0003021c 	.word	0x0003021c

000b6c30 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <snprintf+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	69db      	ldr	r3, [r3, #28]
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	0003021c 	.word	0x0003021c

000b6c40 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <abort+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	0003021c 	.word	0x0003021c

000b6c50 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <_malloc_r+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	0003021c 	.word	0x0003021c

000b6c60 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <__errno+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	0003021c 	.word	0x0003021c

000b6c70 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <__assert_func+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	0003021c 	.word	0x0003021c

000b6c80 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <newlib_impure_ptr_callback+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	0003021c 	.word	0x0003021c

000b6c90 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <strftime+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	0003021c 	.word	0x0003021c

000b6ca0 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <localtime_r+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	0003021c 	.word	0x0003021c

000b6cb0 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <gmtime_r+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	0003021c 	.word	0x0003021c

000b6cc0 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <mktime+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	0003021c 	.word	0x0003021c

000b6cd0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6cd0:	2100      	movs	r1, #0
   b6cd2:	f7ff be7f 	b.w	b69d4 <system_delay_ms>

000b6cd6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6cd6:	b510      	push	{r4, lr}
      if (_M_empty())
   b6cd8:	6883      	ldr	r3, [r0, #8]
   b6cda:	4604      	mov	r4, r0
   b6cdc:	b90b      	cbnz	r3, b6ce2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6cde:	f001 fabf 	bl	b8260 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6ce2:	68c3      	ldr	r3, [r0, #12]
   b6ce4:	4798      	blx	r3
      if (_M_manager)
   b6ce6:	68a3      	ldr	r3, [r4, #8]
   b6ce8:	b11b      	cbz	r3, b6cf2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6cea:	2203      	movs	r2, #3
   b6cec:	4621      	mov	r1, r4
   b6cee:	4620      	mov	r0, r4
   b6cf0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6cf2:	4620      	mov	r0, r4
   b6cf4:	2110      	movs	r1, #16
}
   b6cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6cfa:	f7fd b9d0 	b.w	b409e <_ZdlPvj>

000b6cfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6cfe:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6d00:	6843      	ldr	r3, [r0, #4]
   b6d02:	3b01      	subs	r3, #1
    {
   b6d04:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6d06:	6043      	str	r3, [r0, #4]
   b6d08:	b963      	cbnz	r3, b6d24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6d0a:	6803      	ldr	r3, [r0, #0]
   b6d0c:	689b      	ldr	r3, [r3, #8]
   b6d0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6d10:	68a3      	ldr	r3, [r4, #8]
   b6d12:	3b01      	subs	r3, #1
   b6d14:	60a3      	str	r3, [r4, #8]
   b6d16:	b92b      	cbnz	r3, b6d24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6d18:	6823      	ldr	r3, [r4, #0]
   b6d1a:	4620      	mov	r0, r4
   b6d1c:	68db      	ldr	r3, [r3, #12]
    }
   b6d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6d22:	4718      	bx	r3
    }
   b6d24:	bd10      	pop	{r4, pc}

000b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6d26:	b510      	push	{r4, lr}
   b6d28:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6d2a:	6800      	ldr	r0, [r0, #0]
   b6d2c:	b108      	cbz	r0, b6d32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6d2e:	f7ff ffe6 	bl	b6cfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6d32:	4620      	mov	r0, r4
   b6d34:	bd10      	pop	{r4, pc}

000b6d36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6d36:	b513      	push	{r0, r1, r4, lr}
   b6d38:	460b      	mov	r3, r1
   b6d3a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d3c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d40:	466c      	mov	r4, sp
   b6d42:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6d46:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6d4a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6d52:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6d56:	b002      	add	sp, #8
   b6d58:	bd10      	pop	{r4, pc}
	...

000b6d5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6d5c:	4802      	ldr	r0, [pc, #8]	; (b6d68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6d5e:	2300      	movs	r3, #0
   b6d60:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6d62:	f7ff bc7d 	b.w	b6660 <os_mutex_recursive_create>
   b6d66:	bf00      	nop
   b6d68:	2003e654 	.word	0x2003e654

000b6d6c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6d6c:	2200      	movs	r2, #0
   b6d6e:	6840      	ldr	r0, [r0, #4]
   b6d70:	4611      	mov	r1, r2
   b6d72:	f7ff bef5 	b.w	b6b60 <network_ready>

000b6d76 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6d76:	2200      	movs	r2, #0
   b6d78:	6840      	ldr	r0, [r0, #4]
   b6d7a:	4611      	mov	r1, r2
   b6d7c:	f7ff bf10 	b.w	b6ba0 <network_listening>

000b6d80 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6d80:	2200      	movs	r2, #0
   b6d82:	6840      	ldr	r0, [r0, #4]
   b6d84:	4611      	mov	r1, r2
   b6d86:	f7ff bf1b 	b.w	b6bc0 <network_get_listen_timeout>

000b6d8a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d8a:	6840      	ldr	r0, [r0, #4]
   b6d8c:	2200      	movs	r2, #0
   b6d8e:	f7ff bf0f 	b.w	b6bb0 <network_set_listen_timeout>

000b6d92 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d92:	6840      	ldr	r0, [r0, #4]
   b6d94:	2200      	movs	r2, #0
   b6d96:	f081 0101 	eor.w	r1, r1, #1
   b6d9a:	f7ff bef9 	b.w	b6b90 <network_listen>

000b6d9e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6d9e:	2300      	movs	r3, #0
   b6da0:	6840      	ldr	r0, [r0, #4]
   b6da2:	461a      	mov	r2, r3
   b6da4:	4619      	mov	r1, r3
   b6da6:	f7ff beeb 	b.w	b6b80 <network_off>

000b6daa <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6daa:	2300      	movs	r3, #0
   b6dac:	6840      	ldr	r0, [r0, #4]
   b6dae:	461a      	mov	r2, r3
   b6db0:	4619      	mov	r1, r3
   b6db2:	f7ff bedd 	b.w	b6b70 <network_on>

000b6db6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6db6:	2200      	movs	r2, #0
   b6db8:	6840      	ldr	r0, [r0, #4]
   b6dba:	4611      	mov	r1, r2
   b6dbc:	f7ff bec0 	b.w	b6b40 <network_connecting>

000b6dc0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6dc0:	6840      	ldr	r0, [r0, #4]
   b6dc2:	2200      	movs	r2, #0
   b6dc4:	2102      	movs	r1, #2
   b6dc6:	f7ff bec3 	b.w	b6b50 <network_disconnect>

000b6dca <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6dca:	2300      	movs	r3, #0
   b6dcc:	6840      	ldr	r0, [r0, #4]
   b6dce:	461a      	mov	r2, r3
   b6dd0:	f7ff beae 	b.w	b6b30 <network_connect>

000b6dd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6dd4:	4b08      	ldr	r3, [pc, #32]	; (b6df8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6dd6:	b510      	push	{r4, lr}
   b6dd8:	2428      	movs	r4, #40	; 0x28
   b6dda:	4622      	mov	r2, r4
   b6ddc:	4618      	mov	r0, r3
   b6dde:	2100      	movs	r1, #0
   b6de0:	f001 ffa0 	bl	b8d24 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6de4:	4b05      	ldr	r3, [pc, #20]	; (b6dfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6de6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6dec:	6042      	str	r2, [r0, #4]
   b6dee:	2204      	movs	r2, #4
   b6df0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b6df2:	4a03      	ldr	r2, [pc, #12]	; (b6e00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6df4:	601a      	str	r2, [r3, #0]
   b6df6:	bd10      	pop	{r4, pc}
   b6df8:	2003e660 	.word	0x2003e660
   b6dfc:	2003e658 	.word	0x2003e658
   b6e00:	000bb574 	.word	0x000bb574

000b6e04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6e04:	4770      	bx	lr

000b6e06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6e06:	2000      	movs	r0, #0
   b6e08:	4770      	bx	lr

000b6e0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6e0a:	b510      	push	{r4, lr}
   b6e0c:	2110      	movs	r1, #16
   b6e0e:	4604      	mov	r4, r0
   b6e10:	f7fd f945 	bl	b409e <_ZdlPvj>
   b6e14:	4620      	mov	r0, r4
   b6e16:	bd10      	pop	{r4, pc}

000b6e18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6e18:	b508      	push	{r3, lr}
      { delete this; }
   b6e1a:	f7ff fff6 	bl	b6e0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6e1e:	bd08      	pop	{r3, pc}

000b6e20 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6e20:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6e22:	2200      	movs	r2, #0
   b6e24:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6e28:	6002      	str	r2, [r0, #0]
   b6e2a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6e2c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e2e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6e30:	680c      	ldr	r4, [r1, #0]
   b6e32:	8085      	strh	r5, [r0, #4]
   b6e34:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e36:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6e38:	bd30      	pop	{r4, r5, pc}

000b6e3a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6e3a:	b510      	push	{r4, lr}
   b6e3c:	4604      	mov	r4, r0
    free((void*)msg_);
   b6e3e:	6800      	ldr	r0, [r0, #0]
   b6e40:	f7ff fede 	bl	b6c00 <free>
}
   b6e44:	4620      	mov	r0, r4
   b6e46:	bd10      	pop	{r4, pc}

000b6e48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6e48:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6e4a:	68c4      	ldr	r4, [r0, #12]
   b6e4c:	b1f4      	cbz	r4, b6e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b6e4e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6e50:	2b02      	cmp	r3, #2
   b6e52:	d103      	bne.n	b6e5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6e54:	f104 000c 	add.w	r0, r4, #12
   b6e58:	f7ff ffef 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6e5c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6e5e:	b135      	cbz	r5, b6e6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6e60:	4628      	mov	r0, r5
   b6e62:	f7fd fa6f 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
   b6e66:	2110      	movs	r1, #16
   b6e68:	4628      	mov	r0, r5
   b6e6a:	f7fd f918 	bl	b409e <_ZdlPvj>
   b6e6e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6e70:	b135      	cbz	r5, b6e80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6e72:	4628      	mov	r0, r5
   b6e74:	f7fd fa66 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
   b6e78:	2110      	movs	r1, #16
   b6e7a:	4628      	mov	r0, r5
   b6e7c:	f7fd f90f 	bl	b409e <_ZdlPvj>
   b6e80:	4620      	mov	r0, r4
   b6e82:	2114      	movs	r1, #20
   b6e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6e88:	f7fd b909 	b.w	b409e <_ZdlPvj>
   b6e8c:	bd38      	pop	{r3, r4, r5, pc}

000b6e8e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b6e8e:	b510      	push	{r4, lr}
   b6e90:	b088      	sub	sp, #32
   b6e92:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b6e94:	4668      	mov	r0, sp
   b6e96:	f000 fd44 	bl	b7922 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b6e9a:	4669      	mov	r1, sp
   b6e9c:	a804      	add	r0, sp, #16
   b6e9e:	f000 fd63 	bl	b7968 <_ZN6StringC1ERKS_>
   b6ea2:	a804      	add	r0, sp, #16
   b6ea4:	47a0      	blx	r4
   b6ea6:	4604      	mov	r4, r0
   b6ea8:	a804      	add	r0, sp, #16
   b6eaa:	f000 fcef 	bl	b788c <_ZN6StringD1Ev>
    String p(param);
   b6eae:	4668      	mov	r0, sp
   b6eb0:	f000 fcec 	bl	b788c <_ZN6StringD1Ev>
}
   b6eb4:	4620      	mov	r0, r4
   b6eb6:	b008      	add	sp, #32
   b6eb8:	bd10      	pop	{r4, pc}

000b6eba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b6eba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b6ebc:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b6ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b6ec2:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b6ec4:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b6ec6:	461a      	mov	r2, r3
   b6ec8:	4669      	mov	r1, sp
   b6eca:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b6ecc:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b6ed0:	f8ad 4000 	strh.w	r4, [sp]
   b6ed4:	f7ff fdd4 	bl	b6a80 <spark_function>
}
   b6ed8:	b004      	add	sp, #16
   b6eda:	bd10      	pop	{r4, pc}

000b6edc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6edc:	680b      	ldr	r3, [r1, #0]
   b6ede:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6ee0:	684b      	ldr	r3, [r1, #4]
   b6ee2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6ee4:	b113      	cbz	r3, b6eec <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6ee6:	685a      	ldr	r2, [r3, #4]
   b6ee8:	3201      	adds	r2, #1
   b6eea:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6eec:	4770      	bx	lr

000b6eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ef0:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6ef2:	4668      	mov	r0, sp
   b6ef4:	460d      	mov	r5, r1
   b6ef6:	f7ff fff1 	bl	b6edc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6efa:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6efc:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6efe:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6f00:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6f02:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6f04:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6f06:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6f08:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6f0a:	f7ff ff0c 	bl	b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6f0e:	b135      	cbz	r5, b6f1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6f10:	1d28      	adds	r0, r5, #4
   b6f12:	f7ff ff08 	bl	b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f16:	2108      	movs	r1, #8
   b6f18:	4628      	mov	r0, r5
   b6f1a:	f7fd f8c0 	bl	b409e <_ZdlPvj>
        return p;
    }
   b6f1e:	4620      	mov	r0, r4
   b6f20:	b003      	add	sp, #12
   b6f22:	bd30      	pop	{r4, r5, pc}

000b6f24 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6f24:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6f26:	b510      	push	{r4, lr}
      if (_M_empty())
   b6f28:	b90a      	cbnz	r2, b6f2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6f2a:	f001 f999 	bl	b8260 <_ZSt25__throw_bad_function_callv>
    }
   b6f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f32:	68c3      	ldr	r3, [r0, #12]
   b6f34:	4718      	bx	r3

000b6f36 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6f36:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6f38:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6f3a:	f100 0110 	add.w	r1, r0, #16
   b6f3e:	f7ff fff1 	bl	b6f24 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6f42:	bd08      	pop	{r3, pc}

000b6f44 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6f44:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6f46:	b510      	push	{r4, lr}
      if (_M_empty())
   b6f48:	b90a      	cbnz	r2, b6f4e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6f4a:	f001 f989 	bl	b8260 <_ZSt25__throw_bad_function_callv>
    }
   b6f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f52:	68c3      	ldr	r3, [r0, #12]
   b6f54:	4718      	bx	r3

000b6f56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6f56:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6f58:	6800      	ldr	r0, [r0, #0]
   b6f5a:	f100 0110 	add.w	r1, r0, #16
   b6f5e:	f7ff fff1 	bl	b6f44 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6f62:	bd08      	pop	{r3, pc}

000b6f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6f64:	b538      	push	{r3, r4, r5, lr}
   b6f66:	2300      	movs	r3, #0
   b6f68:	4604      	mov	r4, r0
   b6f6a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6f6c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6f6e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6f70:	f7fd f891 	bl	b4096 <_Znwj>
   b6f74:	b128      	cbz	r0, b6f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6f76:	2301      	movs	r3, #1
   b6f78:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6f7c:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6f7e:	6003      	str	r3, [r0, #0]
   b6f80:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6f82:	6020      	str	r0, [r4, #0]
	}
   b6f84:	4620      	mov	r0, r4
   b6f86:	bd38      	pop	{r3, r4, r5, pc}
   b6f88:	000bb5b0 	.word	0x000bb5b0

000b6f8c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6f8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6f8e:	2300      	movs	r3, #0
   b6f90:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6f92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6f94:	4604      	mov	r4, r0
   b6f96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6f98:	b12b      	cbz	r3, b6fa6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6f9a:	2202      	movs	r2, #2
   b6f9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6f9e:	68eb      	ldr	r3, [r5, #12]
   b6fa0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6fa2:	68ab      	ldr	r3, [r5, #8]
   b6fa4:	60a3      	str	r3, [r4, #8]
    }
   b6fa6:	4620      	mov	r0, r4
   b6fa8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6fac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6fae:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6fb0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6fb2:	4668      	mov	r0, sp
   b6fb4:	f7ff ff34 	bl	b6e20 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6fb8:	f04f 0302 	mov.w	r3, #2
   b6fbc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6fc0:	2a00      	cmp	r2, #0
   b6fc2:	d103      	bne.n	b6fcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6fc4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6fc8:	2900      	cmp	r1, #0
   b6fca:	d1f7      	bne.n	b6fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6fcc:	d125      	bne.n	b701a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6fce:	f104 050c 	add.w	r5, r4, #12
   b6fd2:	4669      	mov	r1, sp
   b6fd4:	4628      	mov	r0, r5
   b6fd6:	f7ff ff23 	bl	b6e20 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6fda:	f3bf 8f5b 	dmb	ish
   b6fde:	2301      	movs	r3, #1
   b6fe0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6fe2:	2000      	movs	r0, #0
   b6fe4:	f104 0308 	add.w	r3, r4, #8
   b6fe8:	f3bf 8f5b 	dmb	ish
   b6fec:	e853 6f00 	ldrex	r6, [r3]
   b6ff0:	e843 0200 	strex	r2, r0, [r3]
   b6ff4:	2a00      	cmp	r2, #0
   b6ff6:	d1f9      	bne.n	b6fec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6ff8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6ffc:	b16e      	cbz	r6, b701a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6ffe:	f7ff fcf9 	bl	b69f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7002:	b178      	cbz	r0, b7024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7004:	4629      	mov	r1, r5
   b7006:	4630      	mov	r0, r6
   b7008:	f7ff ff8c 	bl	b6f24 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b700c:	4630      	mov	r0, r6
   b700e:	f7fd f999 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7012:	2110      	movs	r1, #16
   b7014:	4630      	mov	r0, r6
   b7016:	f7fd f842 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b701a:	4668      	mov	r0, sp
   b701c:	f7ff ff0d 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
    }
   b7020:	b009      	add	sp, #36	; 0x24
   b7022:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7024:	4631      	mov	r1, r6
   b7026:	a802      	add	r0, sp, #8
   b7028:	f7ff ffb0 	bl	b6f8c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b702c:	68e0      	ldr	r0, [r4, #12]
   b702e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7032:	b108      	cbz	r0, b7038 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7034:	f001 febe 	bl	b8db4 <strdup>
        type_(type) {
   b7038:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b703a:	2010      	movs	r0, #16
   b703c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7040:	f7fd f829 	bl	b4096 <_Znwj>
   b7044:	4605      	mov	r5, r0
   b7046:	b1e8      	cbz	r0, b7084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7048:	2700      	movs	r7, #0
   b704a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b704c:	2018      	movs	r0, #24
   b704e:	f7fd f822 	bl	b4096 <_Znwj>
   b7052:	4604      	mov	r4, r0
   b7054:	b188      	cbz	r0, b707a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7056:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7058:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b705a:	a802      	add	r0, sp, #8
   b705c:	f7ff fe6b 	bl	b6d36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7060:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7062:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7064:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7066:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7068:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b706a:	a906      	add	r1, sp, #24
   b706c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b706e:	60e3      	str	r3, [r4, #12]
   b7070:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7074:	9205      	str	r2, [sp, #20]
   b7076:	f7ff fed3 	bl	b6e20 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b707a:	4b08      	ldr	r3, [pc, #32]	; (b709c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b707c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b707e:	4b08      	ldr	r3, [pc, #32]	; (b70a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7080:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7082:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7084:	a806      	add	r0, sp, #24
   b7086:	f7ff fed8 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b708a:	a802      	add	r0, sp, #8
   b708c:	f7fd f95a 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7090:	2200      	movs	r2, #0
   b7092:	4629      	mov	r1, r5
   b7094:	4803      	ldr	r0, [pc, #12]	; (b70a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7096:	f7ff fcb5 	bl	b6a04 <application_thread_invoke>
   b709a:	e7b7      	b.n	b700c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b709c:	000b6f37 	.word	0x000b6f37
   b70a0:	000b71b9 	.word	0x000b71b9
   b70a4:	000b6cd7 	.word	0x000b6cd7

000b70a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b70a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b70ac:	b08b      	sub	sp, #44	; 0x2c
   b70ae:	4605      	mov	r5, r0
   b70b0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b70b4:	460f      	mov	r7, r1
   b70b6:	4690      	mov	r8, r2
   b70b8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b70ba:	f7ff fcf1 	bl	b6aa0 <spark_cloud_flag_connected>
   b70be:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b70c0:	4683      	mov	fp, r0
   b70c2:	bb38      	cbnz	r0, b7114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b70c4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b70c8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b70ca:	a905      	add	r1, sp, #20
   b70cc:	4630      	mov	r0, r6
   b70ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   b70d2:	f7ff fea5 	bl	b6e20 <_ZN8particle5ErrorC1EOS0_>
   b70d6:	2014      	movs	r0, #20
   b70d8:	f7fc ffdd 	bl	b4096 <_Znwj>
   b70dc:	4604      	mov	r4, r0
   b70de:	b148      	cbz	r0, b70f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b70e0:	2302      	movs	r3, #2
   b70e2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b70e4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b70e6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b70ea:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b70ec:	4631      	mov	r1, r6
   b70ee:	300c      	adds	r0, #12
   b70f0:	f7ff fe96 	bl	b6e20 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b70f4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b70f6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b70f8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b70fc:	f7ff ff32 	bl	b6f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7100:	4630      	mov	r0, r6
   b7102:	f7ff fe9a 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7106:	a805      	add	r0, sp, #20
   b7108:	f7ff fe97 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b710c:	4628      	mov	r0, r5
   b710e:	b00b      	add	sp, #44	; 0x2c
   b7110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7114:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7116:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7118:	2014      	movs	r0, #20
   b711a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b711e:	9307      	str	r3, [sp, #28]
   b7120:	f7fc ffb9 	bl	b4096 <_Znwj>
   b7124:	4601      	mov	r1, r0
   b7126:	b118      	cbz	r0, b7130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7128:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b712c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b712e:	7044      	strb	r4, [r0, #1]
   b7130:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7132:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7134:	f7ff ff16 	bl	b6f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7138:	4b1e      	ldr	r3, [pc, #120]	; (b71b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b713a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b713c:	2008      	movs	r0, #8
   b713e:	f7fc ffaa 	bl	b4096 <_Znwj>
   b7142:	4604      	mov	r4, r0
   b7144:	b110      	cbz	r0, b714c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b7146:	a903      	add	r1, sp, #12
   b7148:	f7ff fec8 	bl	b6edc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b714c:	9600      	str	r6, [sp, #0]
   b714e:	fa5f f38a 	uxtb.w	r3, sl
   b7152:	464a      	mov	r2, r9
   b7154:	4641      	mov	r1, r8
   b7156:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7158:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b715a:	f7ff fcb1 	bl	b6ac0 <spark_send_event>
   b715e:	b9b8      	cbnz	r0, b7190 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7160:	9b03      	ldr	r3, [sp, #12]
   b7162:	785b      	ldrb	r3, [r3, #1]
   b7164:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7168:	b993      	cbnz	r3, b7190 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b716a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b716e:	a905      	add	r1, sp, #20
   b7170:	a803      	add	r0, sp, #12
   b7172:	9205      	str	r2, [sp, #20]
   b7174:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7178:	f7ff ff18 	bl	b6fac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b717c:	a805      	add	r0, sp, #20
   b717e:	f7ff fe5c 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b7182:	a805      	add	r0, sp, #20
   b7184:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7186:	f7ff feb2 	bl	b6eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b718a:	a806      	add	r0, sp, #24
   b718c:	f7ff fdcb 	bl	b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7190:	a903      	add	r1, sp, #12
   b7192:	a805      	add	r0, sp, #20
   b7194:	f7ff fea2 	bl	b6edc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7198:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b719a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b719c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b719e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b71a0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b71a2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b71a4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b71a6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b71a8:	f7ff fdbd 	bl	b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71ac:	a804      	add	r0, sp, #16
   b71ae:	f7ff fdba 	bl	b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b71b2:	e7ab      	b.n	b710c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b71b4:	000b7235 	.word	0x000b7235

000b71b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b71b8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b71ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71bc:	4605      	mov	r5, r0
	switch (__op)
   b71be:	d103      	bne.n	b71c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b71c0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b71c2:	6003      	str	r3, [r0, #0]
      }
   b71c4:	2000      	movs	r0, #0
   b71c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b71c8:	2a02      	cmp	r2, #2
   b71ca:	d010      	beq.n	b71ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b71cc:	2a03      	cmp	r2, #3
   b71ce:	d1f9      	bne.n	b71c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b71d0:	6804      	ldr	r4, [r0, #0]
   b71d2:	2c00      	cmp	r4, #0
   b71d4:	d0f6      	beq.n	b71c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b71d6:	f104 0010 	add.w	r0, r4, #16
   b71da:	f7ff fe2e 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b71de:	4620      	mov	r0, r4
   b71e0:	f7fd f8b0 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b71e4:	2118      	movs	r1, #24
   b71e6:	4620      	mov	r0, r4
   b71e8:	f7fc ff59 	bl	b409e <_ZdlPvj>
   b71ec:	e7ea      	b.n	b71c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b71ee:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b71f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b71f2:	f7fc ff50 	bl	b4096 <_Znwj>
   b71f6:	4604      	mov	r4, r0
   b71f8:	b150      	cbz	r0, b7210 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b71fa:	4631      	mov	r1, r6
   b71fc:	f7ff fec6 	bl	b6f8c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7200:	6930      	ldr	r0, [r6, #16]
   b7202:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7206:	b108      	cbz	r0, b720c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7208:	f001 fdd4 	bl	b8db4 <strdup>
        type_(type) {
   b720c:	6120      	str	r0, [r4, #16]
   b720e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7210:	602c      	str	r4, [r5, #0]
	}
   b7212:	e7d7      	b.n	b71c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7214 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7214:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7216:	2300      	movs	r3, #0
   b7218:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b721a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b721c:	4604      	mov	r4, r0
   b721e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7220:	b12b      	cbz	r3, b722e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7222:	2202      	movs	r2, #2
   b7224:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7226:	68eb      	ldr	r3, [r5, #12]
   b7228:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b722a:	68ab      	ldr	r3, [r5, #8]
   b722c:	60a3      	str	r3, [r4, #8]
    }
   b722e:	4620      	mov	r0, r4
   b7230:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7234 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7234:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7236:	b089      	sub	sp, #36	; 0x24
   b7238:	4604      	mov	r4, r0
   b723a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b723c:	a801      	add	r0, sp, #4
   b723e:	4611      	mov	r1, r2
   b7240:	f7ff fe55 	bl	b6eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7244:	b1a4      	cbz	r4, b7270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7246:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7248:	b11d      	cbz	r5, b7252 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b724a:	4628      	mov	r0, r5
   b724c:	f001 fdb2 	bl	b8db4 <strdup>
   b7250:	4605      	mov	r5, r0
   b7252:	a801      	add	r0, sp, #4
   b7254:	a903      	add	r1, sp, #12
        type_(type) {
   b7256:	9503      	str	r5, [sp, #12]
   b7258:	f8ad 4010 	strh.w	r4, [sp, #16]
   b725c:	f7ff fea6 	bl	b6fac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7260:	a803      	add	r0, sp, #12
   b7262:	f7ff fdea 	bl	b6e3a <_ZN8particle5ErrorD1Ev>
   b7266:	a802      	add	r0, sp, #8
   b7268:	f7ff fd5d 	bl	b6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b726c:	b009      	add	sp, #36	; 0x24
   b726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7270:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7272:	2301      	movs	r3, #1
   b7274:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7278:	2a00      	cmp	r2, #0
   b727a:	d103      	bne.n	b7284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b727c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7280:	2900      	cmp	r1, #0
   b7282:	d1f7      	bne.n	b7274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7284:	d1ef      	bne.n	b7266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7286:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7288:	f3bf 8f5b 	dmb	ish
   b728c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b728e:	1d2b      	adds	r3, r5, #4
   b7290:	f3bf 8f5b 	dmb	ish
   b7294:	e853 6f00 	ldrex	r6, [r3]
   b7298:	e843 4200 	strex	r2, r4, [r3]
   b729c:	2a00      	cmp	r2, #0
   b729e:	d1f9      	bne.n	b7294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b72a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b72a4:	2e00      	cmp	r6, #0
   b72a6:	d0de      	beq.n	b7266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b72a8:	4620      	mov	r0, r4
   b72aa:	f7ff fba3 	bl	b69f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b72ae:	4607      	mov	r7, r0
   b72b0:	b160      	cbz	r0, b72cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b72b2:	f105 010c 	add.w	r1, r5, #12
   b72b6:	4630      	mov	r0, r6
   b72b8:	f7ff fe44 	bl	b6f44 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b72bc:	4630      	mov	r0, r6
   b72be:	f7fd f841 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b72c2:	2110      	movs	r1, #16
   b72c4:	4630      	mov	r0, r6
   b72c6:	f7fc feea 	bl	b409e <_ZdlPvj>
   b72ca:	e7cc      	b.n	b7266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b72cc:	4631      	mov	r1, r6
   b72ce:	a803      	add	r0, sp, #12
   b72d0:	f7ff ffa0 	bl	b7214 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b72d4:	7b2b      	ldrb	r3, [r5, #12]
   b72d6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b72da:	2010      	movs	r0, #16
   b72dc:	f7fc fedb 	bl	b4096 <_Znwj>
   b72e0:	4605      	mov	r5, r0
   b72e2:	b1d0      	cbz	r0, b731a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b72e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72e6:	2014      	movs	r0, #20
   b72e8:	f7fc fed5 	bl	b4096 <_Znwj>
   b72ec:	4604      	mov	r4, r0
   b72ee:	b178      	cbz	r0, b7310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b72f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b72f2:	4601      	mov	r1, r0
   b72f4:	a803      	add	r0, sp, #12
   b72f6:	f7ff fd1e 	bl	b6d36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b72fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b72fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b72fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7300:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7302:	9205      	str	r2, [sp, #20]
   b7304:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7306:	60e3      	str	r3, [r4, #12]
   b7308:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b730c:	9206      	str	r2, [sp, #24]
   b730e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7310:	4b06      	ldr	r3, [pc, #24]	; (b732c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7312:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7314:	4b06      	ldr	r3, [pc, #24]	; (b7330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7316:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7318:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b731a:	a803      	add	r0, sp, #12
   b731c:	f7fd f812 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7320:	2200      	movs	r2, #0
   b7322:	4629      	mov	r1, r5
   b7324:	4803      	ldr	r0, [pc, #12]	; (b7334 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7326:	f7ff fb6d 	bl	b6a04 <application_thread_invoke>
   b732a:	e7c7      	b.n	b72bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b732c:	000b6f57 	.word	0x000b6f57
   b7330:	000b7339 	.word	0x000b7339
   b7334:	000b6cd7 	.word	0x000b6cd7

000b7338 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7338:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b733a:	b570      	push	{r4, r5, r6, lr}
   b733c:	4604      	mov	r4, r0
	switch (__op)
   b733e:	d103      	bne.n	b7348 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7340:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7342:	6003      	str	r3, [r0, #0]
      }
   b7344:	2000      	movs	r0, #0
   b7346:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7348:	2a02      	cmp	r2, #2
   b734a:	d00c      	beq.n	b7366 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b734c:	2a03      	cmp	r2, #3
   b734e:	d1f9      	bne.n	b7344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7350:	6804      	ldr	r4, [r0, #0]
   b7352:	2c00      	cmp	r4, #0
   b7354:	d0f6      	beq.n	b7344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7356:	4620      	mov	r0, r4
   b7358:	f7fc fff4 	bl	b4344 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b735c:	2114      	movs	r1, #20
   b735e:	4620      	mov	r0, r4
   b7360:	f7fc fe9d 	bl	b409e <_ZdlPvj>
   b7364:	e7ee      	b.n	b7344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7366:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7368:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b736a:	f7fc fe94 	bl	b4096 <_Znwj>
   b736e:	4605      	mov	r5, r0
   b7370:	b120      	cbz	r0, b737c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7372:	4631      	mov	r1, r6
   b7374:	f7ff ff4e 	bl	b7214 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7378:	7c33      	ldrb	r3, [r6, #16]
   b737a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b737c:	6025      	str	r5, [r4, #0]
	}
   b737e:	e7e1      	b.n	b7344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7380 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7380:	2200      	movs	r2, #0
   b7382:	6840      	ldr	r0, [r0, #4]
   b7384:	4611      	mov	r1, r2
   b7386:	f7ff bc0b 	b.w	b6ba0 <network_listening>

000b738a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b738a:	2200      	movs	r2, #0
   b738c:	6840      	ldr	r0, [r0, #4]
   b738e:	4611      	mov	r1, r2
   b7390:	f7ff bc16 	b.w	b6bc0 <network_get_listen_timeout>

000b7394 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7394:	6840      	ldr	r0, [r0, #4]
   b7396:	2200      	movs	r2, #0
   b7398:	f7ff bc0a 	b.w	b6bb0 <network_set_listen_timeout>

000b739c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b739c:	6840      	ldr	r0, [r0, #4]
   b739e:	2200      	movs	r2, #0
   b73a0:	f081 0101 	eor.w	r1, r1, #1
   b73a4:	f7ff bbf4 	b.w	b6b90 <network_listen>

000b73a8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b73a8:	2300      	movs	r3, #0
   b73aa:	6840      	ldr	r0, [r0, #4]
   b73ac:	461a      	mov	r2, r3
   b73ae:	4619      	mov	r1, r3
   b73b0:	f7ff bbe6 	b.w	b6b80 <network_off>

000b73b4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b73b4:	2300      	movs	r3, #0
   b73b6:	6840      	ldr	r0, [r0, #4]
   b73b8:	461a      	mov	r2, r3
   b73ba:	4619      	mov	r1, r3
   b73bc:	f7ff bbd8 	b.w	b6b70 <network_on>

000b73c0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b73c0:	2200      	movs	r2, #0
   b73c2:	6840      	ldr	r0, [r0, #4]
   b73c4:	4611      	mov	r1, r2
   b73c6:	f7ff bbcb 	b.w	b6b60 <network_ready>

000b73ca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b73ca:	2200      	movs	r2, #0
   b73cc:	6840      	ldr	r0, [r0, #4]
   b73ce:	4611      	mov	r1, r2
   b73d0:	f7ff bbb6 	b.w	b6b40 <network_connecting>

000b73d4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b73d4:	6840      	ldr	r0, [r0, #4]
   b73d6:	2200      	movs	r2, #0
   b73d8:	2102      	movs	r1, #2
   b73da:	f7ff bbb9 	b.w	b6b50 <network_disconnect>

000b73de <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b73de:	2300      	movs	r3, #0
   b73e0:	6840      	ldr	r0, [r0, #4]
   b73e2:	461a      	mov	r2, r3
   b73e4:	f7ff bba4 	b.w	b6b30 <network_connect>

000b73e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b73e8:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b73ea:	2203      	movs	r2, #3
   b73ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b73ee:	4a02      	ldr	r2, [pc, #8]	; (b73f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b73f0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b73f2:	4770      	bx	lr
   b73f4:	2003e688 	.word	0x2003e688
   b73f8:	000bb5cc 	.word	0x000bb5cc

000b73fc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b73fc:	4770      	bx	lr

000b73fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b73fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7400:	4606      	mov	r6, r0
   b7402:	4615      	mov	r5, r2
   b7404:	460c      	mov	r4, r1
   b7406:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7408:	42bc      	cmp	r4, r7
   b740a:	d006      	beq.n	b741a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b740c:	6833      	ldr	r3, [r6, #0]
   b740e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7412:	689b      	ldr	r3, [r3, #8]
   b7414:	4630      	mov	r0, r6
   b7416:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7418:	e7f6      	b.n	b7408 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b741a:	4628      	mov	r0, r5
   b741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b741e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b741e:	7c00      	ldrb	r0, [r0, #16]
   b7420:	2200      	movs	r2, #0
   b7422:	f7ff b9c5 	b.w	b67b0 <hal_i2c_write>

000b7426 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7426:	7c00      	ldrb	r0, [r0, #16]
   b7428:	2100      	movs	r1, #0
   b742a:	f7ff b9c9 	b.w	b67c0 <hal_i2c_available>

000b742e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b742e:	7c00      	ldrb	r0, [r0, #16]
   b7430:	2100      	movs	r1, #0
   b7432:	f7ff b9cd 	b.w	b67d0 <hal_i2c_read>

000b7436 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7436:	7c00      	ldrb	r0, [r0, #16]
   b7438:	2100      	movs	r1, #0
   b743a:	f7ff b9d1 	b.w	b67e0 <hal_i2c_peek>

000b743e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b743e:	7c00      	ldrb	r0, [r0, #16]
   b7440:	2100      	movs	r1, #0
   b7442:	f7ff b9d5 	b.w	b67f0 <hal_i2c_flush>

000b7446 <_ZN7TwoWireD0Ev>:
   b7446:	b510      	push	{r4, lr}
   b7448:	2114      	movs	r1, #20
   b744a:	4604      	mov	r4, r0
   b744c:	f7fc fe27 	bl	b409e <_ZdlPvj>
   b7450:	4620      	mov	r0, r4
   b7452:	bd10      	pop	{r4, pc}

000b7454 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7454:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b745a:	4604      	mov	r4, r0
   b745c:	4608      	mov	r0, r1
   b745e:	2100      	movs	r1, #0
   b7460:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7464:	4b03      	ldr	r3, [pc, #12]	; (b7474 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7466:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7468:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b746a:	4611      	mov	r1, r2
   b746c:	f7ff f9d0 	bl	b6810 <hal_i2c_init>
}
   b7470:	4620      	mov	r0, r4
   b7472:	bd10      	pop	{r4, pc}
   b7474:	000bb608 	.word	0x000bb608

000b7478 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7478:	2300      	movs	r3, #0
   b747a:	7c00      	ldrb	r0, [r0, #16]
   b747c:	461a      	mov	r2, r3
   b747e:	4619      	mov	r1, r3
   b7480:	f7ff b97e 	b.w	b6780 <hal_i2c_begin>

000b7484 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7486:	2200      	movs	r2, #0
   b7488:	2314      	movs	r3, #20
   b748a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b748e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7492:	780b      	ldrb	r3, [r1, #0]
   b7494:	f88d 3008 	strb.w	r3, [sp, #8]
   b7498:	684b      	ldr	r3, [r1, #4]
   b749a:	9303      	str	r3, [sp, #12]
   b749c:	68cb      	ldr	r3, [r1, #12]
   b749e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b74a0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b74a2:	7a0b      	ldrb	r3, [r1, #8]
   b74a4:	9305      	str	r3, [sp, #20]
   b74a6:	a901      	add	r1, sp, #4
   b74a8:	f7ff f9ca 	bl	b6840 <hal_i2c_request_ex>
}
   b74ac:	b007      	add	sp, #28
   b74ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b74b2 <_ZN7TwoWire11requestFromEhjh>:
{
   b74b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b74b4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b74b6:	f88d 1000 	strb.w	r1, [sp]
   b74ba:	f04f 0164 	mov.w	r1, #100	; 0x64
   b74be:	9103      	str	r1, [sp, #12]
   b74c0:	bf18      	it	ne
   b74c2:	2301      	movne	r3, #1
   b74c4:	4669      	mov	r1, sp
    size_ = size;
   b74c6:	9201      	str	r2, [sp, #4]
   b74c8:	f88d 3008 	strb.w	r3, [sp, #8]
   b74cc:	f7ff ffda 	bl	b7484 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b74d0:	b005      	add	sp, #20
   b74d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b74d6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b74d6:	2301      	movs	r3, #1
   b74d8:	f7ff bfeb 	b.w	b74b2 <_ZN7TwoWire11requestFromEhjh>

000b74dc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b74dc:	7c00      	ldrb	r0, [r0, #16]
   b74de:	2200      	movs	r2, #0
   b74e0:	f7ff b956 	b.w	b6790 <hal_i2c_begin_transmission>

000b74e4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b74e4:	b2c9      	uxtb	r1, r1
   b74e6:	f7ff bff9 	b.w	b74dc <_ZN7TwoWire17beginTransmissionEh>

000b74ea <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b74ea:	7c00      	ldrb	r0, [r0, #16]
   b74ec:	2200      	movs	r2, #0
   b74ee:	f7ff b957 	b.w	b67a0 <hal_i2c_end_transmission>

000b74f2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b74f2:	2101      	movs	r1, #1
   b74f4:	f7ff bff9 	b.w	b74ea <_ZN7TwoWire15endTransmissionEh>

000b74f8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b74f8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b74fa:	2100      	movs	r1, #0
   b74fc:	7c00      	ldrb	r0, [r0, #16]
   b74fe:	f7ff f98f 	bl	b6820 <hal_i2c_lock>
}
   b7502:	fab0 f080 	clz	r0, r0
   b7506:	0940      	lsrs	r0, r0, #5
   b7508:	bd08      	pop	{r3, pc}

000b750a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b750a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b750c:	2100      	movs	r1, #0
   b750e:	7c00      	ldrb	r0, [r0, #16]
   b7510:	f7ff f98e 	bl	b6830 <hal_i2c_unlock>
}
   b7514:	fab0 f080 	clz	r0, r0
   b7518:	0940      	lsrs	r0, r0, #5
   b751a:	bd08      	pop	{r3, pc}

000b751c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b751c:	4700      	bx	r0
	...

000b7520 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b7520:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b7524:	2400      	movs	r4, #0
{
   b7526:	461d      	mov	r5, r3
   b7528:	460f      	mov	r7, r1
   b752a:	4690      	mov	r8, r2
   b752c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b752e:	f7ff f91f 	bl	b6770 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b7532:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7534:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b7538:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b753c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b7540:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b7544:	bfa2      	ittt	ge
   b7546:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b754a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b754e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7550:	4907      	ldr	r1, [pc, #28]	; (b7570 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b7552:	9400      	str	r4, [sp, #0]
   b7554:	4643      	mov	r3, r8
   b7556:	463a      	mov	r2, r7
   b7558:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b755a:	bfa8      	it	ge
   b755c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7560:	f7ff f8fe 	bl	b6760 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b7564:	fab0 f080 	clz	r0, r0
   b7568:	0940      	lsrs	r0, r0, #5
   b756a:	b004      	add	sp, #16
   b756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7570:	000b751d 	.word	0x000b751d

000b7574 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7574:	4770      	bx	lr

000b7576 <_ZN9IPAddressD0Ev>:
   b7576:	b510      	push	{r4, lr}
   b7578:	2118      	movs	r1, #24
   b757a:	4604      	mov	r4, r0
   b757c:	f7fc fd8f 	bl	b409e <_ZdlPvj>
   b7580:	4620      	mov	r0, r4
   b7582:	bd10      	pop	{r4, pc}

000b7584 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7584:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7586:	7d03      	ldrb	r3, [r0, #20]
   b7588:	2b06      	cmp	r3, #6
{
   b758a:	b08d      	sub	sp, #52	; 0x34
   b758c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b758e:	f100 0704 	add.w	r7, r0, #4
   b7592:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7596:	d012      	beq.n	b75be <_ZNK9IPAddress7printToER5Print+0x3a>
   b7598:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b759c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b75a0:	220a      	movs	r2, #10
   b75a2:	4630      	mov	r0, r6
   b75a4:	f000 f943 	bl	b782e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b75a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b75aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b75ac:	d019      	beq.n	b75e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b75ae:	2c00      	cmp	r4, #0
   b75b0:	d0f4      	beq.n	b759c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b75b2:	212e      	movs	r1, #46	; 0x2e
   b75b4:	4630      	mov	r0, r6
   b75b6:	f000 f937 	bl	b7828 <_ZN5Print5printEc>
   b75ba:	4404      	add	r4, r0
   b75bc:	e7ee      	b.n	b759c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b75be:	232f      	movs	r3, #47	; 0x2f
   b75c0:	466a      	mov	r2, sp
   b75c2:	4639      	mov	r1, r7
   b75c4:	200a      	movs	r0, #10
		buf[0] = 0;
   b75c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b75ca:	f7ff f941 	bl	b6850 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b75ce:	4668      	mov	r0, sp
   b75d0:	f001 fc0d 	bl	b8dee <strlen>
   b75d4:	6833      	ldr	r3, [r6, #0]
   b75d6:	4602      	mov	r2, r0
   b75d8:	68db      	ldr	r3, [r3, #12]
   b75da:	4669      	mov	r1, sp
   b75dc:	4630      	mov	r0, r6
   b75de:	4798      	blx	r3
   b75e0:	4604      	mov	r4, r0
    }
    return n;
}
   b75e2:	4620      	mov	r0, r4
   b75e4:	b00d      	add	sp, #52	; 0x34
   b75e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b75e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b75e8:	b510      	push	{r4, lr}
   b75ea:	4b05      	ldr	r3, [pc, #20]	; (b7600 <_ZN9IPAddressC1Ev+0x18>)
   b75ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b75ee:	2211      	movs	r2, #17
   b75f0:	f840 3b04 	str.w	r3, [r0], #4
   b75f4:	2100      	movs	r1, #0
   b75f6:	f001 fb95 	bl	b8d24 <memset>
}
   b75fa:	4620      	mov	r0, r4
   b75fc:	bd10      	pop	{r4, pc}
   b75fe:	bf00      	nop
   b7600:	000bb630 	.word	0x000bb630

000b7604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7604:	4603      	mov	r3, r0
   b7606:	4a07      	ldr	r2, [pc, #28]	; (b7624 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7608:	b510      	push	{r4, lr}
   b760a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b760e:	f101 0210 	add.w	r2, r1, #16
   b7612:	f851 4b04 	ldr.w	r4, [r1], #4
   b7616:	f843 4b04 	str.w	r4, [r3], #4
   b761a:	4291      	cmp	r1, r2
   b761c:	d1f9      	bne.n	b7612 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b761e:	780a      	ldrb	r2, [r1, #0]
   b7620:	701a      	strb	r2, [r3, #0]
}
   b7622:	bd10      	pop	{r4, pc}
   b7624:	000bb630 	.word	0x000bb630

000b7628 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7628:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b762a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b762e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7632:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7636:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b763a:	2304      	movs	r3, #4
   b763c:	6041      	str	r1, [r0, #4]
   b763e:	7503      	strb	r3, [r0, #20]
}
   b7640:	bd10      	pop	{r4, pc}
	...

000b7644 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7644:	b507      	push	{r0, r1, r2, lr}
   b7646:	4b06      	ldr	r3, [pc, #24]	; (b7660 <_ZN9IPAddressC1EPKh+0x1c>)
   b7648:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b764a:	78cb      	ldrb	r3, [r1, #3]
   b764c:	9300      	str	r3, [sp, #0]
   b764e:	788b      	ldrb	r3, [r1, #2]
   b7650:	784a      	ldrb	r2, [r1, #1]
   b7652:	7809      	ldrb	r1, [r1, #0]
   b7654:	f7ff ffe8 	bl	b7628 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7658:	b003      	add	sp, #12
   b765a:	f85d fb04 	ldr.w	pc, [sp], #4
   b765e:	bf00      	nop
   b7660:	000bb630 	.word	0x000bb630

000b7664 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7664:	4b01      	ldr	r3, [pc, #4]	; (b766c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7666:	4a02      	ldr	r2, [pc, #8]	; (b7670 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7668:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b766a:	4770      	bx	lr
   b766c:	2003e690 	.word	0x2003e690
   b7670:	000bb63c 	.word	0x000bb63c

000b7674 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7674:	2300      	movs	r3, #0
   b7676:	6840      	ldr	r0, [r0, #4]
   b7678:	461a      	mov	r2, r3
   b767a:	f7ff ba59 	b.w	b6b30 <network_connect>

000b767e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b767e:	6840      	ldr	r0, [r0, #4]
   b7680:	2200      	movs	r2, #0
   b7682:	2102      	movs	r1, #2
   b7684:	f7ff ba64 	b.w	b6b50 <network_disconnect>

000b7688 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7688:	2200      	movs	r2, #0
   b768a:	6840      	ldr	r0, [r0, #4]
   b768c:	4611      	mov	r1, r2
   b768e:	f7ff ba57 	b.w	b6b40 <network_connecting>

000b7692 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7692:	2200      	movs	r2, #0
   b7694:	6840      	ldr	r0, [r0, #4]
   b7696:	4611      	mov	r1, r2
   b7698:	f7ff ba62 	b.w	b6b60 <network_ready>

000b769c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b769c:	2300      	movs	r3, #0
   b769e:	6840      	ldr	r0, [r0, #4]
   b76a0:	461a      	mov	r2, r3
   b76a2:	4619      	mov	r1, r3
   b76a4:	f7ff ba64 	b.w	b6b70 <network_on>

000b76a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b76a8:	2300      	movs	r3, #0
   b76aa:	6840      	ldr	r0, [r0, #4]
   b76ac:	461a      	mov	r2, r3
   b76ae:	4619      	mov	r1, r3
   b76b0:	f7ff ba66 	b.w	b6b80 <network_off>

000b76b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b76b4:	6840      	ldr	r0, [r0, #4]
   b76b6:	2100      	movs	r1, #0
   b76b8:	f7ff ba8a 	b.w	b6bd0 <network_is_on>

000b76bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b76bc:	6840      	ldr	r0, [r0, #4]
   b76be:	2100      	movs	r1, #0
   b76c0:	f7ff ba8e 	b.w	b6be0 <network_is_off>

000b76c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b76c4:	6840      	ldr	r0, [r0, #4]
   b76c6:	2200      	movs	r2, #0
   b76c8:	f081 0101 	eor.w	r1, r1, #1
   b76cc:	f7ff ba60 	b.w	b6b90 <network_listen>

000b76d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b76d0:	6840      	ldr	r0, [r0, #4]
   b76d2:	2200      	movs	r2, #0
   b76d4:	f7ff ba6c 	b.w	b6bb0 <network_set_listen_timeout>

000b76d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b76d8:	2200      	movs	r2, #0
   b76da:	6840      	ldr	r0, [r0, #4]
   b76dc:	4611      	mov	r1, r2
   b76de:	f7ff ba6f 	b.w	b6bc0 <network_get_listen_timeout>

000b76e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b76e2:	2200      	movs	r2, #0
   b76e4:	6840      	ldr	r0, [r0, #4]
   b76e6:	4611      	mov	r1, r2
   b76e8:	f7ff ba5a 	b.w	b6ba0 <network_listening>

000b76ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b76ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76f0:	b095      	sub	sp, #84	; 0x54
   b76f2:	4614      	mov	r4, r2
   b76f4:	460d      	mov	r5, r1
   b76f6:	4607      	mov	r7, r0
    IPAddress addr;
   b76f8:	f7ff ff76 	bl	b75e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b76fc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b76fe:	221c      	movs	r2, #28
   b7700:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7702:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7704:	f001 fb0e 	bl	b8d24 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7708:	2340      	movs	r3, #64	; 0x40
   b770a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b770c:	4620      	mov	r0, r4
   b770e:	466b      	mov	r3, sp
   b7710:	aa0c      	add	r2, sp, #48	; 0x30
   b7712:	2100      	movs	r1, #0
   b7714:	f7ff f8ac 	bl	b6870 <netdb_getaddrinfo>
    if (!r) {
   b7718:	4604      	mov	r4, r0
   b771a:	2800      	cmp	r0, #0
   b771c:	d14b      	bne.n	b77b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b771e:	4602      	mov	r2, r0
   b7720:	2101      	movs	r1, #1
   b7722:	6868      	ldr	r0, [r5, #4]
   b7724:	f7ff fa1c 	bl	b6b60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7728:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b772a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b772c:	4622      	mov	r2, r4
   b772e:	6868      	ldr	r0, [r5, #4]
   b7730:	f7ff fa16 	bl	b6b60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7734:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7736:	4681      	mov	r9, r0
        bool ok = false;
   b7738:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b773a:	2e00      	cmp	r6, #0
   b773c:	d03b      	beq.n	b77b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b773e:	2900      	cmp	r1, #0
   b7740:	d139      	bne.n	b77b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7742:	6873      	ldr	r3, [r6, #4]
   b7744:	2b02      	cmp	r3, #2
   b7746:	d003      	beq.n	b7750 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7748:	2b0a      	cmp	r3, #10
   b774a:	d011      	beq.n	b7770 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b774c:	69f6      	ldr	r6, [r6, #28]
   b774e:	e7f4      	b.n	b773a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7750:	f1b8 0f00 	cmp.w	r8, #0
   b7754:	d0fa      	beq.n	b774c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7756:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7758:	a806      	add	r0, sp, #24
   b775a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b775c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b775e:	f7ff ff71 	bl	b7644 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7764:	1d3c      	adds	r4, r7, #4
   b7766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7768:	682b      	ldr	r3, [r5, #0]
   b776a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b776c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b776e:	e7ed      	b.n	b774c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7770:	f1b9 0f00 	cmp.w	r9, #0
   b7774:	d0ea      	beq.n	b774c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7776:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7778:	2210      	movs	r2, #16
   b777a:	a801      	add	r0, sp, #4
   b777c:	f001 fad2 	bl	b8d24 <memset>
                    a.v = 6;
   b7780:	2306      	movs	r3, #6
   b7782:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7786:	ad01      	add	r5, sp, #4
   b7788:	f104 0308 	add.w	r3, r4, #8
   b778c:	3418      	adds	r4, #24
   b778e:	6818      	ldr	r0, [r3, #0]
   b7790:	6859      	ldr	r1, [r3, #4]
   b7792:	462a      	mov	r2, r5
   b7794:	c203      	stmia	r2!, {r0, r1}
   b7796:	3308      	adds	r3, #8
   b7798:	42a3      	cmp	r3, r4
   b779a:	4615      	mov	r5, r2
   b779c:	d1f7      	bne.n	b778e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b779e:	a901      	add	r1, sp, #4
   b77a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b77a2:	ad07      	add	r5, sp, #28
   b77a4:	f7ff ff2e 	bl	b7604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b77a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77aa:	1d3c      	adds	r4, r7, #4
   b77ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77ae:	682b      	ldr	r3, [r5, #0]
   b77b0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b77b2:	4649      	mov	r1, r9
   b77b4:	e7ca      	b.n	b774c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b77b6:	9800      	ldr	r0, [sp, #0]
   b77b8:	f7ff f852 	bl	b6860 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b77bc:	4638      	mov	r0, r7
   b77be:	b015      	add	sp, #84	; 0x54
   b77c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b77c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b77c4:	4b02      	ldr	r3, [pc, #8]	; (b77d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b77c6:	4a03      	ldr	r2, [pc, #12]	; (b77d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b77c8:	601a      	str	r2, [r3, #0]
   b77ca:	2200      	movs	r2, #0
   b77cc:	605a      	str	r2, [r3, #4]

} // spark
   b77ce:	4770      	bx	lr
   b77d0:	2003e694 	.word	0x2003e694
   b77d4:	000bb648 	.word	0x000bb648

000b77d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b77d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77da:	4606      	mov	r6, r0
   b77dc:	460d      	mov	r5, r1
  size_t n = 0;
   b77de:	188f      	adds	r7, r1, r2
   b77e0:	2400      	movs	r4, #0
  while (size--) {
   b77e2:	42bd      	cmp	r5, r7
   b77e4:	d00c      	beq.n	b7800 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b77e6:	6833      	ldr	r3, [r6, #0]
   b77e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b77ec:	689b      	ldr	r3, [r3, #8]
   b77ee:	4630      	mov	r0, r6
   b77f0:	4798      	blx	r3
     if (chunk>=0)
   b77f2:	1e03      	subs	r3, r0, #0
   b77f4:	db01      	blt.n	b77fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b77f6:	441c      	add	r4, r3
  while (size--) {
   b77f8:	e7f3      	b.n	b77e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b77fa:	2c00      	cmp	r4, #0
   b77fc:	bf08      	it	eq
   b77fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7800:	4620      	mov	r0, r4
   b7802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7804 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7804:	b513      	push	{r0, r1, r4, lr}
   b7806:	4604      	mov	r4, r0
    }
   b7808:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b780a:	b159      	cbz	r1, b7824 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b780c:	9101      	str	r1, [sp, #4]
   b780e:	f001 faee 	bl	b8dee <strlen>
   b7812:	6823      	ldr	r3, [r4, #0]
   b7814:	9901      	ldr	r1, [sp, #4]
   b7816:	68db      	ldr	r3, [r3, #12]
   b7818:	4602      	mov	r2, r0
   b781a:	4620      	mov	r0, r4
    }
   b781c:	b002      	add	sp, #8
   b781e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7822:	4718      	bx	r3
    }
   b7824:	b002      	add	sp, #8
   b7826:	bd10      	pop	{r4, pc}

000b7828 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7828:	6803      	ldr	r3, [r0, #0]
   b782a:	689b      	ldr	r3, [r3, #8]
   b782c:	4718      	bx	r3

000b782e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b782e:	b530      	push	{r4, r5, lr}
   b7830:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7832:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7834:	2a01      	cmp	r2, #1
  *str = '\0';
   b7836:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b783a:	bf98      	it	ls
   b783c:	220a      	movls	r2, #10
   b783e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7840:	460d      	mov	r5, r1
   b7842:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7846:	fb01 5312 	mls	r3, r1, r2, r5
   b784a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b784e:	2b09      	cmp	r3, #9
   b7850:	bf94      	ite	ls
   b7852:	3330      	addls	r3, #48	; 0x30
   b7854:	3337      	addhi	r3, #55	; 0x37
   b7856:	b2db      	uxtb	r3, r3
  } while(n);
   b7858:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b785a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b785e:	d9ef      	bls.n	b7840 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7860:	4621      	mov	r1, r4
   b7862:	f7ff ffcf 	bl	b7804 <_ZN5Print5writeEPKc>
}
   b7866:	b00b      	add	sp, #44	; 0x2c
   b7868:	bd30      	pop	{r4, r5, pc}
	...

000b786c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b786c:	4b01      	ldr	r3, [pc, #4]	; (b7874 <_GLOBAL__sub_I_RGB+0x8>)
   b786e:	2200      	movs	r2, #0
   b7870:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7872:	4770      	bx	lr
   b7874:	2003e69c 	.word	0x2003e69c

000b7878 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7878:	b510      	push	{r4, lr}
   b787a:	4604      	mov	r4, r0
   b787c:	4608      	mov	r0, r1
{
    _spi = spi;
   b787e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7880:	f7fe fffe 	bl	b6880 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7884:	2300      	movs	r3, #0
   b7886:	6063      	str	r3, [r4, #4]
}
   b7888:	4620      	mov	r0, r4
   b788a:	bd10      	pop	{r4, pc}

000b788c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b788c:	b510      	push	{r4, lr}
   b788e:	4604      	mov	r4, r0
{
	free(buffer);
   b7890:	6800      	ldr	r0, [r0, #0]
   b7892:	f7ff f9b5 	bl	b6c00 <free>
}
   b7896:	4620      	mov	r0, r4
   b7898:	bd10      	pop	{r4, pc}

000b789a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b789a:	b510      	push	{r4, lr}
   b789c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b789e:	6800      	ldr	r0, [r0, #0]
   b78a0:	b108      	cbz	r0, b78a6 <_ZN6String10invalidateEv+0xc>
   b78a2:	f7ff f9ad 	bl	b6c00 <free>
	buffer = NULL;
   b78a6:	2300      	movs	r3, #0
	capacity = len = 0;
   b78a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b78ac:	6023      	str	r3, [r4, #0]
}
   b78ae:	bd10      	pop	{r4, pc}

000b78b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b78b0:	b538      	push	{r3, r4, r5, lr}
   b78b2:	4604      	mov	r4, r0
   b78b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b78b6:	6800      	ldr	r0, [r0, #0]
   b78b8:	3101      	adds	r1, #1
   b78ba:	f7ff f9a9 	bl	b6c10 <realloc>
	if (newbuffer) {
   b78be:	b110      	cbz	r0, b78c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b78c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b78c4:	2001      	movs	r0, #1
	}
	return 0;
}
   b78c6:	bd38      	pop	{r3, r4, r5, pc}

000b78c8 <_ZN6String7reserveEj>:
{
   b78c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b78ca:	6803      	ldr	r3, [r0, #0]
{
   b78cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b78ce:	b123      	cbz	r3, b78da <_ZN6String7reserveEj+0x12>
   b78d0:	6843      	ldr	r3, [r0, #4]
   b78d2:	428b      	cmp	r3, r1
   b78d4:	d301      	bcc.n	b78da <_ZN6String7reserveEj+0x12>
   b78d6:	2001      	movs	r0, #1
}
   b78d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b78da:	4620      	mov	r0, r4
   b78dc:	f7ff ffe8 	bl	b78b0 <_ZN6String12changeBufferEj>
   b78e0:	2800      	cmp	r0, #0
   b78e2:	d0f9      	beq.n	b78d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b78e4:	68a3      	ldr	r3, [r4, #8]
   b78e6:	2b00      	cmp	r3, #0
   b78e8:	d1f5      	bne.n	b78d6 <_ZN6String7reserveEj+0xe>
   b78ea:	6822      	ldr	r2, [r4, #0]
   b78ec:	7013      	strb	r3, [r2, #0]
   b78ee:	e7f2      	b.n	b78d6 <_ZN6String7reserveEj+0xe>

000b78f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b78f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b78f2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b78f4:	4611      	mov	r1, r2
   b78f6:	9201      	str	r2, [sp, #4]
{
   b78f8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b78fa:	f7ff ffe5 	bl	b78c8 <_ZN6String7reserveEj>
   b78fe:	9a01      	ldr	r2, [sp, #4]
   b7900:	b928      	cbnz	r0, b790e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7902:	4620      	mov	r0, r4
   b7904:	f7ff ffc9 	bl	b789a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7908:	4620      	mov	r0, r4
   b790a:	b003      	add	sp, #12
   b790c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b790e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7910:	4629      	mov	r1, r5
   b7912:	6820      	ldr	r0, [r4, #0]
   b7914:	f001 f9de 	bl	b8cd4 <memcpy>
	buffer[len] = 0;
   b7918:	6822      	ldr	r2, [r4, #0]
   b791a:	68a3      	ldr	r3, [r4, #8]
   b791c:	2100      	movs	r1, #0
   b791e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7920:	e7f2      	b.n	b7908 <_ZN6String4copyEPKcj+0x18>

000b7922 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7922:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7924:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7926:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b792a:	4604      	mov	r4, r0
	len = 0;
   b792c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b792e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7930:	b141      	cbz	r1, b7944 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7932:	4608      	mov	r0, r1
   b7934:	9101      	str	r1, [sp, #4]
   b7936:	f001 fa5a 	bl	b8dee <strlen>
   b793a:	9901      	ldr	r1, [sp, #4]
   b793c:	4602      	mov	r2, r0
   b793e:	4620      	mov	r0, r4
   b7940:	f7ff ffd6 	bl	b78f0 <_ZN6String4copyEPKcj>
}
   b7944:	4620      	mov	r0, r4
   b7946:	b002      	add	sp, #8
   b7948:	bd10      	pop	{r4, pc}

000b794a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b794a:	4288      	cmp	r0, r1
{
   b794c:	b510      	push	{r4, lr}
   b794e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7950:	d005      	beq.n	b795e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7952:	680b      	ldr	r3, [r1, #0]
   b7954:	b12b      	cbz	r3, b7962 <_ZN6StringaSERKS_+0x18>
   b7956:	688a      	ldr	r2, [r1, #8]
   b7958:	4619      	mov	r1, r3
   b795a:	f7ff ffc9 	bl	b78f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b795e:	4620      	mov	r0, r4
   b7960:	bd10      	pop	{r4, pc}
	else invalidate();
   b7962:	f7ff ff9a 	bl	b789a <_ZN6String10invalidateEv>
   b7966:	e7fa      	b.n	b795e <_ZN6StringaSERKS_+0x14>

000b7968 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7968:	b510      	push	{r4, lr}
	buffer = NULL;
   b796a:	2300      	movs	r3, #0
String::String(const String &value)
   b796c:	4604      	mov	r4, r0
	capacity = 0;
   b796e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7972:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7974:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7976:	f7ff ffe8 	bl	b794a <_ZN6StringaSERKS_>
}
   b797a:	4620      	mov	r0, r4
   b797c:	bd10      	pop	{r4, pc}

000b797e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b797e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7980:	6882      	ldr	r2, [r0, #8]
   b7982:	b93a      	cbnz	r2, b7994 <_ZNK6String6equalsEPKc+0x16>
   b7984:	b121      	cbz	r1, b7990 <_ZNK6String6equalsEPKc+0x12>
   b7986:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b7988:	fab0 f080 	clz	r0, r0
   b798c:	0940      	lsrs	r0, r0, #5
   b798e:	e000      	b.n	b7992 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7990:	2001      	movs	r0, #1
}
   b7992:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7994:	6800      	ldr	r0, [r0, #0]
   b7996:	b909      	cbnz	r1, b799c <_ZNK6String6equalsEPKc+0x1e>
   b7998:	7800      	ldrb	r0, [r0, #0]
   b799a:	e7f5      	b.n	b7988 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b799c:	f001 f9f8 	bl	b8d90 <strcmp>
   b79a0:	e7f2      	b.n	b7988 <_ZNK6String6equalsEPKc+0xa>

000b79a2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b79a2:	b558      	push	{r3, r4, r6, lr}
   b79a4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b79a6:	b12a      	cbz	r2, b79b4 <_ZNK6String8getBytesEPhjj+0x12>
   b79a8:	b121      	cbz	r1, b79b4 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b79aa:	6884      	ldr	r4, [r0, #8]
   b79ac:	42a3      	cmp	r3, r4
   b79ae:	d302      	bcc.n	b79b6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b79b0:	2300      	movs	r3, #0
   b79b2:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b79b4:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b79b6:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b79b8:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b79ba:	6801      	ldr	r1, [r0, #0]
   b79bc:	4294      	cmp	r4, r2
   b79be:	bf28      	it	cs
   b79c0:	4614      	movcs	r4, r2
   b79c2:	4419      	add	r1, r3
   b79c4:	4622      	mov	r2, r4
   b79c6:	4630      	mov	r0, r6
   b79c8:	f001 fa2d 	bl	b8e26 <strncpy>
	buf[n] = 0;
   b79cc:	2300      	movs	r3, #0
   b79ce:	5533      	strb	r3, [r6, r4]
   b79d0:	e7f0      	b.n	b79b4 <_ZNK6String8getBytesEPhjj+0x12>
	...

000b79d4 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b79d4:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b79d6:	6800      	ldr	r0, [r0, #0]
   b79d8:	b140      	cbz	r0, b79ec <_ZNK6String7toFloatEv+0x18>
   b79da:	f001 f955 	bl	b8c88 <atof>
   b79de:	ec51 0b10 	vmov	r0, r1, d0
   b79e2:	f001 f8b7 	bl	b8b54 <__aeabi_d2f>
   b79e6:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b79ea:	bd08      	pop	{r3, pc}
	return 0;
   b79ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; b79f4 <_ZNK6String7toFloatEv+0x20>
   b79f0:	e7fb      	b.n	b79ea <_ZNK6String7toFloatEv+0x16>
   b79f2:	bf00      	nop
   b79f4:	00000000 	.word	0x00000000

000b79f8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b79f8:	b507      	push	{r0, r1, r2, lr}
   b79fa:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b79fc:	2100      	movs	r1, #0
{
   b79fe:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b7a00:	9100      	str	r1, [sp, #0]
   b7a02:	2001      	movs	r0, #1
   b7a04:	218c      	movs	r1, #140	; 0x8c
   b7a06:	f7ff f829 	bl	b6a5c <system_reset>
}
   b7a0a:	b003      	add	sp, #12
   b7a0c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a10 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b7a10:	4601      	mov	r1, r0
    reset(0, flags);
   b7a12:	2000      	movs	r0, #0
   b7a14:	f7ff bff0 	b.w	b79f8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b7a18 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b7a18:	2000      	movs	r0, #0
   b7a1a:	f7ff bff9 	b.w	b7a10 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b7a20 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7a20:	4b05      	ldr	r3, [pc, #20]	; (b7a38 <_GLOBAL__sub_I_System+0x18>)
   b7a22:	2202      	movs	r2, #2
   b7a24:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7a26:	4b05      	ldr	r3, [pc, #20]	; (b7a3c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7a28:	4a05      	ldr	r2, [pc, #20]	; (b7a40 <_GLOBAL__sub_I_System+0x20>)
   b7a2a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7a2c:	2000      	movs	r0, #0
   b7a2e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7a32:	f7fe bfc7 	b.w	b69c4 <set_system_mode>
   b7a36:	bf00      	nop
   b7a38:	2003e6b8 	.word	0x2003e6b8
   b7a3c:	2003e6ac 	.word	0x2003e6ac
   b7a40:	ffff0000 	.word	0xffff0000

000b7a44 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7a48:	4a15      	ldr	r2, [pc, #84]	; (b7aa0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7a4a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7aac <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7a4e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7a52:	1980      	adds	r0, r0, r6
   b7a54:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7a58:	4b12      	ldr	r3, [pc, #72]	; (b7aa4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7a5a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7a5e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7a62:	1986      	adds	r6, r0, r6
   b7a64:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7a68:	42bb      	cmp	r3, r7
   b7a6a:	bf08      	it	eq
   b7a6c:	42b2      	cmpeq	r2, r6
{
   b7a6e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7a70:	d013      	beq.n	b7a9a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7a72:	a903      	add	r1, sp, #12
   b7a74:	4668      	mov	r0, sp
   b7a76:	e9cd 6700 	strd	r6, r7, [sp]
   b7a7a:	f7ff f911 	bl	b6ca0 <localtime_r>
	calendar_time.tm_year += 1900;
   b7a7e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a80:	4d09      	ldr	r5, [pc, #36]	; (b7aa8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7a82:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a86:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7a88:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7a92:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a96:	6823      	ldr	r3, [r4, #0]
   b7a98:	602b      	str	r3, [r5, #0]
    }
}
   b7a9a:	b00c      	add	sp, #48	; 0x30
   b7a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7aa0:	2003e6f0 	.word	0x2003e6f0
   b7aa4:	2003e6e8 	.word	0x2003e6e8
   b7aa8:	2003e6c4 	.word	0x2003e6c4
   b7aac:	2003e6f8 	.word	0x2003e6f8

000b7ab0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b7ab0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ab2:	2000      	movs	r0, #0
   b7ab4:	f7ff f81c 	bl	b6af0 <spark_sync_time_pending>
   b7ab8:	b128      	cbz	r0, b7ac6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7aba:	f7fe fff1 	bl	b6aa0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7abe:	f080 0001 	eor.w	r0, r0, #1
   b7ac2:	b2c0      	uxtb	r0, r0
    }
   b7ac4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ac6:	2001      	movs	r0, #1
   b7ac8:	e7fc      	b.n	b7ac4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b7aca <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b7aca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7acc:	4602      	mov	r2, r0
   b7ace:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b7ad0:	4668      	mov	r0, sp
    struct timeval tv = {
   b7ad2:	2100      	movs	r1, #0
    };
   b7ad4:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b7ad8:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b7adc:	f7fe fe18 	bl	b6710 <hal_rtc_set_time>
   b7ae0:	4602      	mov	r2, r0
   b7ae2:	b910      	cbnz	r0, b7aea <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b7ae4:	4601      	mov	r1, r0
   b7ae6:	f7fe ff9d 	bl	b6a24 <system_notify_time_changed>
    }
}
   b7aea:	b005      	add	sp, #20
   b7aec:	f85d fb04 	ldr.w	pc, [sp], #4

000b7af0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b7af0:	b530      	push	{r4, r5, lr}
   b7af2:	b093      	sub	sp, #76	; 0x4c
   b7af4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b7af8:	4b19      	ldr	r3, [pc, #100]	; (b7b60 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b7afa:	4604      	mov	r4, r0
    t += time_zone_cache;
   b7afc:	e9d3 1000 	ldrd	r1, r0, [r3]
   b7b00:	9b01      	ldr	r3, [sp, #4]
   b7b02:	1852      	adds	r2, r2, r1
   b7b04:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b7b08:	4816      	ldr	r0, [pc, #88]	; (b7b64 <_ZN9TimeClass7timeStrEx+0x74>)
   b7b0a:	e9d0 1000 	ldrd	r1, r0, [r0]
   b7b0e:	1852      	adds	r2, r2, r1
   b7b10:	eb43 0300 	adc.w	r3, r3, r0
   b7b14:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b7b18:	2224      	movs	r2, #36	; 0x24
   b7b1a:	eb0d 0002 	add.w	r0, sp, r2
   b7b1e:	2100      	movs	r1, #0
   b7b20:	f001 f900 	bl	b8d24 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b7b24:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b7b26:	a909      	add	r1, sp, #36	; 0x24
   b7b28:	4668      	mov	r0, sp
   b7b2a:	f7ff f8b9 	bl	b6ca0 <localtime_r>
    char ascstr[26] = {};
   b7b2e:	2216      	movs	r2, #22
   b7b30:	4629      	mov	r1, r5
   b7b32:	a803      	add	r0, sp, #12
   b7b34:	9502      	str	r5, [sp, #8]
   b7b36:	f001 f8f5 	bl	b8d24 <memset>
    asctime_r(&calendar_time, ascstr);
   b7b3a:	a902      	add	r1, sp, #8
   b7b3c:	a809      	add	r0, sp, #36	; 0x24
   b7b3e:	f001 f877 	bl	b8c30 <asctime_r>
    int len = strlen(ascstr);
   b7b42:	a802      	add	r0, sp, #8
   b7b44:	f001 f953 	bl	b8dee <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7b48:	ab12      	add	r3, sp, #72	; 0x48
   b7b4a:	4418      	add	r0, r3
    return String(ascstr);
   b7b4c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b7b4e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b7b52:	4620      	mov	r0, r4
   b7b54:	f7ff fee5 	bl	b7922 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7b58:	4620      	mov	r0, r4
   b7b5a:	b013      	add	sp, #76	; 0x4c
   b7b5c:	bd30      	pop	{r4, r5, pc}
   b7b5e:	bf00      	nop
   b7b60:	2003e6f0 	.word	0x2003e6f0
   b7b64:	2003e6e8 	.word	0x2003e6e8

000b7b68 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b7b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7b6c:	b0a4      	sub	sp, #144	; 0x90
   b7b6e:	4607      	mov	r7, r0
   b7b70:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b7b72:	a814      	add	r0, sp, #80	; 0x50
{
   b7b74:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b7b76:	223f      	movs	r2, #63	; 0x3f
{
   b7b78:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b7b7a:	f001 f954 	bl	b8e26 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7b7e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7b80:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b7b82:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b7b86:	f001 f932 	bl	b8dee <strlen>
   b7b8a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b7b8c:	bb4c      	cbnz	r4, b7be2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b7b8e:	4929      	ldr	r1, [pc, #164]	; (b7c34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b7b90:	a803      	add	r0, sp, #12
   b7b92:	f001 f907 	bl	b8da4 <strcpy>
   b7b96:	ac14      	add	r4, sp, #80	; 0x50
{
   b7b98:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b7b9a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   b7b9e:	45b1      	cmp	r9, r6
   b7ba0:	d934      	bls.n	b7c0c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b7ba2:	7823      	ldrb	r3, [r4, #0]
   b7ba4:	2b25      	cmp	r3, #37	; 0x25
   b7ba6:	f106 0a01 	add.w	sl, r6, #1
   b7baa:	d117      	bne.n	b7bdc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b7bac:	7863      	ldrb	r3, [r4, #1]
   b7bae:	2b7a      	cmp	r3, #122	; 0x7a
   b7bb0:	d114      	bne.n	b7bdc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b7bb2:	a803      	add	r0, sp, #12
   b7bb4:	f001 f91b 	bl	b8dee <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7bb8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b7bba:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b7bbc:	1830      	adds	r0, r6, r0
   b7bbe:	4418      	add	r0, r3
   b7bc0:	eba9 0206 	sub.w	r2, r9, r6
   b7bc4:	1ca1      	adds	r1, r4, #2
   b7bc6:	f001 f885 	bl	b8cd4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b7bca:	462a      	mov	r2, r5
   b7bcc:	a903      	add	r1, sp, #12
   b7bce:	4620      	mov	r0, r4
   b7bd0:	f001 f880 	bl	b8cd4 <memcpy>
            len = strlen(format_str);
   b7bd4:	a814      	add	r0, sp, #80	; 0x50
   b7bd6:	f001 f90a 	bl	b8dee <strlen>
   b7bda:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b7bdc:	3401      	adds	r4, #1
   b7bde:	4656      	mov	r6, sl
   b7be0:	e7db      	b.n	b7b9a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b7be2:	233c      	movs	r3, #60	; 0x3c
   b7be4:	fb94 f2f3 	sdiv	r2, r4, r3
   b7be8:	2a00      	cmp	r2, #0
   b7bea:	bfb8      	it	lt
   b7bec:	4252      	neglt	r2, r2
   b7bee:	fbb2 f1f3 	udiv	r1, r2, r3
   b7bf2:	fb03 2211 	mls	r2, r3, r1, r2
   b7bf6:	9200      	str	r2, [sp, #0]
   b7bf8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b7bfc:	4a0e      	ldr	r2, [pc, #56]	; (b7c38 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b7bfe:	fb94 f3f3 	sdiv	r3, r4, r3
   b7c02:	2110      	movs	r1, #16
   b7c04:	a803      	add	r0, sp, #12
   b7c06:	f7ff f813 	bl	b6c30 <snprintf>
   b7c0a:	e7c4      	b.n	b7b96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b7c0c:	2100      	movs	r1, #0
   b7c0e:	222e      	movs	r2, #46	; 0x2e
   b7c10:	a808      	add	r0, sp, #32
   b7c12:	9107      	str	r1, [sp, #28]
   b7c14:	f001 f886 	bl	b8d24 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b7c18:	4643      	mov	r3, r8
   b7c1a:	aa14      	add	r2, sp, #80	; 0x50
   b7c1c:	2132      	movs	r1, #50	; 0x32
   b7c1e:	a807      	add	r0, sp, #28
   b7c20:	f7ff f836 	bl	b6c90 <strftime>
    return String(buf);
   b7c24:	a907      	add	r1, sp, #28
   b7c26:	4638      	mov	r0, r7
   b7c28:	f7ff fe7b 	bl	b7922 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7c2c:	4638      	mov	r0, r7
   b7c2e:	b024      	add	sp, #144	; 0x90
   b7c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7c34:	000bb67c 	.word	0x000bb67c
   b7c38:	000bb67e 	.word	0x000bb67e

000b7c3c <_ZN9TimeClass6formatExPKc>:
{
   b7c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c3e:	b08d      	sub	sp, #52	; 0x34
   b7c40:	e9cd 2300 	strd	r2, r3, [sp]
   b7c44:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b7c46:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b7c48:	b915      	cbnz	r5, b7c50 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b7c4a:	4b19      	ldr	r3, [pc, #100]	; (b7cb0 <_ZN9TimeClass6formatExPKc+0x74>)
   b7c4c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b7c4e:	b12d      	cbz	r5, b7c5c <_ZN9TimeClass6formatExPKc+0x20>
   b7c50:	4b18      	ldr	r3, [pc, #96]	; (b7cb4 <_ZN9TimeClass6formatExPKc+0x78>)
   b7c52:	4628      	mov	r0, r5
   b7c54:	6819      	ldr	r1, [r3, #0]
   b7c56:	f001 f89b 	bl	b8d90 <strcmp>
   b7c5a:	b938      	cbnz	r0, b7c6c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b7c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
   b7c60:	4620      	mov	r0, r4
   b7c62:	f7ff ff45 	bl	b7af0 <_ZN9TimeClass7timeStrEx>
}
   b7c66:	4620      	mov	r0, r4
   b7c68:	b00d      	add	sp, #52	; 0x34
   b7c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b7c6c:	4e12      	ldr	r6, [pc, #72]	; (b7cb8 <_ZN9TimeClass6formatExPKc+0x7c>)
   b7c6e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b7c70:	4f12      	ldr	r7, [pc, #72]	; (b7cbc <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b7c72:	e9d6 3200 	ldrd	r3, r2, [r6]
   b7c76:	185b      	adds	r3, r3, r1
   b7c78:	9901      	ldr	r1, [sp, #4]
   b7c7a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b7c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b7c82:	181b      	adds	r3, r3, r0
   b7c84:	eb42 0201 	adc.w	r2, r2, r1
   b7c88:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b7c8c:	2100      	movs	r1, #0
   b7c8e:	2224      	movs	r2, #36	; 0x24
   b7c90:	a803      	add	r0, sp, #12
   b7c92:	f001 f847 	bl	b8d24 <memset>
    localtime_r(&t, &calendar_time);
   b7c96:	a903      	add	r1, sp, #12
   b7c98:	4668      	mov	r0, sp
   b7c9a:	f7ff f801 	bl	b6ca0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b7c9e:	6832      	ldr	r2, [r6, #0]
   b7ca0:	683b      	ldr	r3, [r7, #0]
   b7ca2:	a903      	add	r1, sp, #12
   b7ca4:	4413      	add	r3, r2
   b7ca6:	4620      	mov	r0, r4
   b7ca8:	462a      	mov	r2, r5
   b7caa:	f7ff ff5d 	bl	b7b68 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b7cae:	e7da      	b.n	b7c66 <_ZN9TimeClass6formatExPKc+0x2a>
   b7cb0:	2003e6c0 	.word	0x2003e6c0
   b7cb4:	2003e2c8 	.word	0x2003e2c8
   b7cb8:	2003e6f0 	.word	0x2003e6f0
   b7cbc:	2003e6e8 	.word	0x2003e6e8

000b7cc0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b7cc0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7cc2:	2000      	movs	r0, #0
   b7cc4:	f7fe fd0c 	bl	b66e0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7cc8:	4604      	mov	r4, r0
   b7cca:	b9a0      	cbnz	r0, b7cf6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7ccc:	f7fe fe72 	bl	b69b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7cd0:	2801      	cmp	r0, #1
   b7cd2:	d110      	bne.n	b7cf6 <_ZN9TimeClass7isValidEv+0x36>
   b7cd4:	4620      	mov	r0, r4
   b7cd6:	f7fe fe9d 	bl	b6a14 <system_thread_get_state>
   b7cda:	b960      	cbnz	r0, b7cf6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7cdc:	f7ff fee8 	bl	b7ab0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7ce0:	b910      	cbnz	r0, b7ce8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7ce2:	f7fe fed5 	bl	b6a90 <spark_process>
        while (_while() && !_condition()) {
   b7ce6:	e7f9      	b.n	b7cdc <_ZN9TimeClass7isValidEv+0x1c>
   b7ce8:	f7ff fee2 	bl	b7ab0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7cf0:	2000      	movs	r0, #0
   b7cf2:	f7fe bcf5 	b.w	b66e0 <hal_rtc_time_is_valid>
}
   b7cf6:	4620      	mov	r0, r4
   b7cf8:	bd10      	pop	{r4, pc}

000b7cfa <_ZN9TimeClass3nowEv>:
{
   b7cfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7cfc:	f7ff ffe0 	bl	b7cc0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7d00:	2210      	movs	r2, #16
   b7d02:	2100      	movs	r1, #0
   b7d04:	4668      	mov	r0, sp
   b7d06:	f001 f80d 	bl	b8d24 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7d0a:	2100      	movs	r1, #0
   b7d0c:	4668      	mov	r0, sp
   b7d0e:	f7fe fcf7 	bl	b6700 <hal_rtc_get_time>
}
   b7d12:	9800      	ldr	r0, [sp, #0]
   b7d14:	b005      	add	sp, #20
   b7d16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d1c <_ZN9TimeClass4hourEv>:
{
   b7d1c:	b508      	push	{r3, lr}
	return hour(now());
   b7d1e:	f7ff ffec 	bl	b7cfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7d22:	17c1      	asrs	r1, r0, #31
   b7d24:	f7ff fe8e 	bl	b7a44 <_ZL22Refresh_UnixTime_Cachex>
}
   b7d28:	4b01      	ldr	r3, [pc, #4]	; (b7d30 <_ZN9TimeClass4hourEv+0x14>)
   b7d2a:	6898      	ldr	r0, [r3, #8]
   b7d2c:	bd08      	pop	{r3, pc}
   b7d2e:	bf00      	nop
   b7d30:	2003e6c4 	.word	0x2003e6c4

000b7d34 <_ZN9TimeClass4yearEv>:
{
   b7d34:	b508      	push	{r3, lr}
	return year(now());
   b7d36:	f7ff ffe0 	bl	b7cfa <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7d3a:	17c1      	asrs	r1, r0, #31
   b7d3c:	f7ff fe82 	bl	b7a44 <_ZL22Refresh_UnixTime_Cachex>
}
   b7d40:	4b01      	ldr	r3, [pc, #4]	; (b7d48 <_ZN9TimeClass4yearEv+0x14>)
   b7d42:	6958      	ldr	r0, [r3, #20]
   b7d44:	bd08      	pop	{r3, pc}
   b7d46:	bf00      	nop
   b7d48:	2003e6c4 	.word	0x2003e6c4

000b7d4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7d4c:	4b02      	ldr	r3, [pc, #8]	; (b7d58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7d4e:	681a      	ldr	r2, [r3, #0]
   b7d50:	4b02      	ldr	r3, [pc, #8]	; (b7d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7d52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7d54:	4770      	bx	lr
   b7d56:	bf00      	nop
   b7d58:	2003e2c8 	.word	0x2003e2c8
   b7d5c:	2003e6c0 	.word	0x2003e6c0

000b7d60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7d60:	4770      	bx	lr

000b7d62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d62:	7441      	strb	r1, [r0, #17]
}
   b7d64:	4770      	bx	lr

000b7d66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7d66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7d68:	7c00      	ldrb	r0, [r0, #16]
   b7d6a:	f7fe fdc9 	bl	b6900 <hal_usart_available_data_for_write>
}
   b7d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d72:	bd08      	pop	{r3, pc}

000b7d74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7d74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7d76:	7c00      	ldrb	r0, [r0, #16]
   b7d78:	f7fe fd9a 	bl	b68b0 <hal_usart_available>
}
   b7d7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d80:	bd08      	pop	{r3, pc}

000b7d82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7d82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7d84:	7c00      	ldrb	r0, [r0, #16]
   b7d86:	f7fe fda3 	bl	b68d0 <hal_usart_peek>
}
   b7d8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d8e:	bd08      	pop	{r3, pc}

000b7d90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7d90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7d92:	7c00      	ldrb	r0, [r0, #16]
   b7d94:	f7fe fd94 	bl	b68c0 <hal_usart_read>
}
   b7d98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d9c:	bd08      	pop	{r3, pc}

000b7d9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7d9e:	7c00      	ldrb	r0, [r0, #16]
   b7da0:	f7fe bd9e 	b.w	b68e0 <hal_usart_flush>

000b7da4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7da6:	7c45      	ldrb	r5, [r0, #17]
{
   b7da8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7daa:	b12d      	cbz	r5, b7db8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7dac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7dae:	b003      	add	sp, #12
   b7db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7db4:	f7fe bd74 	b.w	b68a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7db8:	7c00      	ldrb	r0, [r0, #16]
   b7dba:	9101      	str	r1, [sp, #4]
   b7dbc:	f7fe fda0 	bl	b6900 <hal_usart_available_data_for_write>
   b7dc0:	2800      	cmp	r0, #0
   b7dc2:	9901      	ldr	r1, [sp, #4]
   b7dc4:	dcf2      	bgt.n	b7dac <_ZN11USARTSerial5writeEh+0x8>
}
   b7dc6:	4628      	mov	r0, r5
   b7dc8:	b003      	add	sp, #12
   b7dca:	bd30      	pop	{r4, r5, pc}

000b7dcc <_ZN11USARTSerialD0Ev>:
   b7dcc:	b510      	push	{r4, lr}
   b7dce:	2114      	movs	r1, #20
   b7dd0:	4604      	mov	r4, r0
   b7dd2:	f7fc f964 	bl	b409e <_ZdlPvj>
   b7dd6:	4620      	mov	r0, r4
   b7dd8:	bd10      	pop	{r4, pc}
	...

000b7ddc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ddc:	b510      	push	{r4, lr}
   b7dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7de2:	4604      	mov	r4, r0
   b7de4:	4608      	mov	r0, r1
   b7de6:	4611      	mov	r1, r2
   b7de8:	2200      	movs	r2, #0
   b7dea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7dee:	4b04      	ldr	r3, [pc, #16]	; (b7e00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7df0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7df2:	2301      	movs	r3, #1
  _serial = serial;
   b7df4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7df6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7df8:	f7fe fd8a 	bl	b6910 <hal_usart_init_ex>
}
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	bd10      	pop	{r4, pc}
   b7e00:	000bb6b0 	.word	0x000bb6b0

000b7e04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e04:	7441      	strb	r1, [r0, #17]
}
   b7e06:	4770      	bx	lr

000b7e08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e08:	4770      	bx	lr

000b7e0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7e0a:	4770      	bx	lr

000b7e0c <_ZN9USBSerial4readEv>:
{
   b7e0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7e0e:	2100      	movs	r1, #0
   b7e10:	7c00      	ldrb	r0, [r0, #16]
   b7e12:	f7fe fd9d 	bl	b6950 <HAL_USB_USART_Receive_Data>
}
   b7e16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e1a:	bd08      	pop	{r3, pc}

000b7e1c <_ZN9USBSerial4peekEv>:
{
   b7e1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7e1e:	2101      	movs	r1, #1
   b7e20:	7c00      	ldrb	r0, [r0, #16]
   b7e22:	f7fe fd95 	bl	b6950 <HAL_USB_USART_Receive_Data>
}
   b7e26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e2a:	bd08      	pop	{r3, pc}

000b7e2c <_ZN9USBSerial17availableForWriteEv>:
{
   b7e2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7e2e:	7c00      	ldrb	r0, [r0, #16]
   b7e30:	f7fe fd86 	bl	b6940 <HAL_USB_USART_Available_Data_For_Write>
}
   b7e34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e38:	bd08      	pop	{r3, pc}

000b7e3a <_ZN9USBSerial9availableEv>:
{
   b7e3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7e3c:	7c00      	ldrb	r0, [r0, #16]
   b7e3e:	f7fe fd77 	bl	b6930 <HAL_USB_USART_Available_Data>
}
   b7e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e46:	bd08      	pop	{r3, pc}

000b7e48 <_ZN9USBSerial5writeEh>:
{
   b7e48:	b513      	push	{r0, r1, r4, lr}
   b7e4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e4c:	7c00      	ldrb	r0, [r0, #16]
{
   b7e4e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e50:	f7fe fd76 	bl	b6940 <HAL_USB_USART_Available_Data_For_Write>
   b7e54:	2800      	cmp	r0, #0
   b7e56:	9901      	ldr	r1, [sp, #4]
   b7e58:	dc01      	bgt.n	b7e5e <_ZN9USBSerial5writeEh+0x16>
   b7e5a:	7c60      	ldrb	r0, [r4, #17]
   b7e5c:	b120      	cbz	r0, b7e68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7e5e:	7c20      	ldrb	r0, [r4, #16]
   b7e60:	f7fe fd7e 	bl	b6960 <HAL_USB_USART_Send_Data>
   b7e64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7e68:	b002      	add	sp, #8
   b7e6a:	bd10      	pop	{r4, pc}

000b7e6c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7e6c:	7c00      	ldrb	r0, [r0, #16]
   b7e6e:	f7fe bd7f 	b.w	b6970 <HAL_USB_USART_Flush_Data>

000b7e72 <_ZN9USBSerialD0Ev>:
   b7e72:	b510      	push	{r4, lr}
   b7e74:	2114      	movs	r1, #20
   b7e76:	4604      	mov	r4, r0
   b7e78:	f7fc f911 	bl	b409e <_ZdlPvj>
   b7e7c:	4620      	mov	r0, r4
   b7e7e:	bd10      	pop	{r4, pc}

000b7e80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7e80:	b510      	push	{r4, lr}
   b7e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e86:	4604      	mov	r4, r0
   b7e88:	4608      	mov	r0, r1
   b7e8a:	2100      	movs	r1, #0
   b7e8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7e90:	4b04      	ldr	r3, [pc, #16]	; (b7ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7e92:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7e94:	2301      	movs	r3, #1
  _serial = serial;
   b7e96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7e98:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7e9a:	4611      	mov	r1, r2
   b7e9c:	f7fe fd40 	bl	b6920 <HAL_USB_USART_Init>
}
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	bd10      	pop	{r4, pc}
   b7ea4:	000bb6e0 	.word	0x000bb6e0

000b7ea8 <_Z19acquireSerialBufferv>:
{
   b7ea8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7eaa:	2214      	movs	r2, #20
{
   b7eac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7eae:	2100      	movs	r1, #0
   b7eb0:	f000 ff38 	bl	b8d24 <memset>
}
   b7eb4:	4620      	mov	r0, r4
   b7eb6:	bd10      	pop	{r4, pc}

000b7eb8 <_Z16_fetch_usbserialv>:
{
   b7eb8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7eba:	4c0f      	ldr	r4, [pc, #60]	; (b7ef8 <_Z16_fetch_usbserialv+0x40>)
{
   b7ebc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7ebe:	a803      	add	r0, sp, #12
   b7ec0:	f7ff fff2 	bl	b7ea8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ec4:	7821      	ldrb	r1, [r4, #0]
   b7ec6:	f3bf 8f5b 	dmb	ish
   b7eca:	f011 0101 	ands.w	r1, r1, #1
   b7ece:	d10f      	bne.n	b7ef0 <_Z16_fetch_usbserialv+0x38>
   b7ed0:	4620      	mov	r0, r4
   b7ed2:	9101      	str	r1, [sp, #4]
   b7ed4:	f7fc f8f2 	bl	b40bc <__cxa_guard_acquire>
   b7ed8:	9901      	ldr	r1, [sp, #4]
   b7eda:	b148      	cbz	r0, b7ef0 <_Z16_fetch_usbserialv+0x38>
   b7edc:	aa03      	add	r2, sp, #12
   b7ede:	4807      	ldr	r0, [pc, #28]	; (b7efc <_Z16_fetch_usbserialv+0x44>)
   b7ee0:	f7ff ffce 	bl	b7e80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7ee4:	4620      	mov	r0, r4
   b7ee6:	f7fc f8ee 	bl	b40c6 <__cxa_guard_release>
   b7eea:	4805      	ldr	r0, [pc, #20]	; (b7f00 <_Z16_fetch_usbserialv+0x48>)
   b7eec:	f000 fec6 	bl	b8c7c <atexit>
	return _usbserial;
}
   b7ef0:	4802      	ldr	r0, [pc, #8]	; (b7efc <_Z16_fetch_usbserialv+0x44>)
   b7ef2:	b008      	add	sp, #32
   b7ef4:	bd10      	pop	{r4, pc}
   b7ef6:	bf00      	nop
   b7ef8:	2003e700 	.word	0x2003e700
   b7efc:	2003e704 	.word	0x2003e704
   b7f00:	000b7e09 	.word	0x000b7e09

000b7f04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7f04:	4b01      	ldr	r3, [pc, #4]	; (b7f0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7f06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7f08:	4770      	bx	lr
   b7f0a:	bf00      	nop
   b7f0c:	2003e2cc 	.word	0x2003e2cc

000b7f10 <serialEventRun>:
{
   b7f10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7f12:	4b0b      	ldr	r3, [pc, #44]	; (b7f40 <serialEventRun+0x30>)
   b7f14:	b143      	cbz	r3, b7f28 <serialEventRun+0x18>
   b7f16:	f7ff ffcf 	bl	b7eb8 <_Z16_fetch_usbserialv>
   b7f1a:	6803      	ldr	r3, [r0, #0]
   b7f1c:	691b      	ldr	r3, [r3, #16]
   b7f1e:	4798      	blx	r3
   b7f20:	2800      	cmp	r0, #0
   b7f22:	dd01      	ble.n	b7f28 <serialEventRun+0x18>
        serialEvent();
   b7f24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7f28:	4b06      	ldr	r3, [pc, #24]	; (b7f44 <serialEventRun+0x34>)
   b7f2a:	b143      	cbz	r3, b7f3e <serialEventRun+0x2e>
   b7f2c:	f000 f970 	bl	b8210 <_Z22__fetch_global_Serial1v>
   b7f30:	6803      	ldr	r3, [r0, #0]
   b7f32:	691b      	ldr	r3, [r3, #16]
   b7f34:	4798      	blx	r3
   b7f36:	2800      	cmp	r0, #0
   b7f38:	dd01      	ble.n	b7f3e <serialEventRun+0x2e>
        serialEvent1();
   b7f3a:	f3af 8000 	nop.w
}
   b7f3e:	bd08      	pop	{r3, pc}
	...

000b7f48 <_post_loop>:
{
   b7f48:	b508      	push	{r3, lr}
	serialEventRun();
   b7f4a:	f7ff ffe1 	bl	b7f10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7f4e:	f7fe fbbf 	bl	b66d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7f52:	4b01      	ldr	r3, [pc, #4]	; (b7f58 <_post_loop+0x10>)
   b7f54:	6018      	str	r0, [r3, #0]
}
   b7f56:	bd08      	pop	{r3, pc}
   b7f58:	2003e72c 	.word	0x2003e72c

000b7f5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7f5c:	4805      	ldr	r0, [pc, #20]	; (b7f74 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7f5e:	4a06      	ldr	r2, [pc, #24]	; (b7f78 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7f60:	4906      	ldr	r1, [pc, #24]	; (b7f7c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7f62:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7f64:	1a12      	subs	r2, r2, r0
   b7f66:	f000 feb5 	bl	b8cd4 <memcpy>
    __backup_sram_signature = signature;
   b7f6a:	4b05      	ldr	r3, [pc, #20]	; (b7f80 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7f6c:	4a05      	ldr	r2, [pc, #20]	; (b7f84 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7f6e:	601a      	str	r2, [r3, #0]
}
   b7f70:	bd08      	pop	{r3, pc}
   b7f72:	bf00      	nop
   b7f74:	2003f400 	.word	0x2003f400
   b7f78:	2003fc04 	.word	0x2003fc04
   b7f7c:	000bbbc4 	.word	0x000bbbc4
   b7f80:	2003fc00 	.word	0x2003fc00
   b7f84:	9a271c1e 	.word	0x9a271c1e

000b7f88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7f88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7f8a:	2300      	movs	r3, #0
   b7f8c:	9300      	str	r3, [sp, #0]
   b7f8e:	461a      	mov	r2, r3
   b7f90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7f94:	f7fe fd58 	bl	b6a48 <system_ctrl_set_result>
}
   b7f98:	b003      	add	sp, #12
   b7f9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7fa0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7fa0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7fa2:	8843      	ldrh	r3, [r0, #2]
   b7fa4:	2b0a      	cmp	r3, #10
   b7fa6:	d008      	beq.n	b7fba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7fa8:	2b50      	cmp	r3, #80	; 0x50
   b7faa:	d10b      	bne.n	b7fc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7fac:	4b09      	ldr	r3, [pc, #36]	; (b7fd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7fae:	681b      	ldr	r3, [r3, #0]
   b7fb0:	b14b      	cbz	r3, b7fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7fb2:	b003      	add	sp, #12
   b7fb4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7fb8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7fba:	f7ff ffe5 	bl	b7f88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7fbe:	b003      	add	sp, #12
   b7fc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7fc4:	2300      	movs	r3, #0
   b7fc6:	9300      	str	r3, [sp, #0]
   b7fc8:	461a      	mov	r2, r3
   b7fca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7fce:	f7fe fd3b 	bl	b6a48 <system_ctrl_set_result>
}
   b7fd2:	e7f4      	b.n	b7fbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7fd4:	2003e71c 	.word	0x2003e71c

000b7fd8 <module_user_init_hook>:
{
   b7fd8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7fda:	4812      	ldr	r0, [pc, #72]	; (b8024 <module_user_init_hook+0x4c>)
   b7fdc:	2100      	movs	r1, #0
   b7fde:	f7fe fe4f 	bl	b6c80 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7fe2:	4b11      	ldr	r3, [pc, #68]	; (b8028 <module_user_init_hook+0x50>)
   b7fe4:	681a      	ldr	r2, [r3, #0]
   b7fe6:	4b11      	ldr	r3, [pc, #68]	; (b802c <module_user_init_hook+0x54>)
   b7fe8:	429a      	cmp	r2, r3
   b7fea:	4b11      	ldr	r3, [pc, #68]	; (b8030 <module_user_init_hook+0x58>)
   b7fec:	bf0c      	ite	eq
   b7fee:	2201      	moveq	r2, #1
   b7ff0:	2200      	movne	r2, #0
   b7ff2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7ff4:	d001      	beq.n	b7ffa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7ff6:	f7ff ffb1 	bl	b7f5c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7ffa:	f7fe fb51 	bl	b66a0 <HAL_RNG_GetRandomNumber>
   b7ffe:	4604      	mov	r4, r0
    srand(seed);
   b8000:	f000 fe98 	bl	b8d34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8004:	4b0b      	ldr	r3, [pc, #44]	; (b8034 <module_user_init_hook+0x5c>)
   b8006:	b113      	cbz	r3, b800e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8008:	4620      	mov	r0, r4
   b800a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b800e:	2100      	movs	r1, #0
   b8010:	4808      	ldr	r0, [pc, #32]	; (b8034 <module_user_init_hook+0x5c>)
   b8012:	f7fe fd85 	bl	b6b20 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b801a:	4807      	ldr	r0, [pc, #28]	; (b8038 <module_user_init_hook+0x60>)
   b801c:	2100      	movs	r1, #0
   b801e:	f7fe bd09 	b.w	b6a34 <system_ctrl_set_app_request_handler>
   b8022:	bf00      	nop
   b8024:	000b7f05 	.word	0x000b7f05
   b8028:	2003fc00 	.word	0x2003fc00
   b802c:	9a271c1e 	.word	0x9a271c1e
   b8030:	2003e718 	.word	0x2003e718
   b8034:	00000000 	.word	0x00000000
   b8038:	000b7fa1 	.word	0x000b7fa1

000b803c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b803c:	b508      	push	{r3, lr}
   b803e:	4b02      	ldr	r3, [pc, #8]	; (b8048 <spark_protocol_instance+0xc>)
   b8040:	681b      	ldr	r3, [r3, #0]
   b8042:	681b      	ldr	r3, [r3, #0]
   b8044:	9301      	str	r3, [sp, #4]
   b8046:	bd08      	pop	{r3, pc}
   b8048:	0003025c 	.word	0x0003025c

000b804c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b804c:	b508      	push	{r3, lr}
   b804e:	4b02      	ldr	r3, [pc, #8]	; (b8058 <spark_protocol_set_product_id+0xc>)
   b8050:	681b      	ldr	r3, [r3, #0]
   b8052:	685b      	ldr	r3, [r3, #4]
   b8054:	9301      	str	r3, [sp, #4]
   b8056:	bd08      	pop	{r3, pc}
   b8058:	0003025c 	.word	0x0003025c

000b805c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b805c:	b508      	push	{r3, lr}
   b805e:	4b02      	ldr	r3, [pc, #8]	; (b8068 <spark_protocol_set_product_firmware_version+0xc>)
   b8060:	681b      	ldr	r3, [r3, #0]
   b8062:	689b      	ldr	r3, [r3, #8]
   b8064:	9301      	str	r3, [sp, #4]
   b8066:	bd08      	pop	{r3, pc}
   b8068:	0003025c 	.word	0x0003025c

000b806c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b806c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b806e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8070:	d902      	bls.n	b8078 <pinAvailable+0xc>
    return false;
   b8072:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8074:	b002      	add	sp, #8
   b8076:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8078:	f1a0 030b 	sub.w	r3, r0, #11
   b807c:	2b02      	cmp	r3, #2
   b807e:	d81a      	bhi.n	b80b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8080:	4c17      	ldr	r4, [pc, #92]	; (b80e0 <pinAvailable+0x74>)
   b8082:	7821      	ldrb	r1, [r4, #0]
   b8084:	f3bf 8f5b 	dmb	ish
   b8088:	f011 0101 	ands.w	r1, r1, #1
   b808c:	d10b      	bne.n	b80a6 <pinAvailable+0x3a>
   b808e:	4620      	mov	r0, r4
   b8090:	9101      	str	r1, [sp, #4]
   b8092:	f7fc f813 	bl	b40bc <__cxa_guard_acquire>
   b8096:	9901      	ldr	r1, [sp, #4]
   b8098:	b128      	cbz	r0, b80a6 <pinAvailable+0x3a>
   b809a:	4812      	ldr	r0, [pc, #72]	; (b80e4 <pinAvailable+0x78>)
   b809c:	f7ff fbec 	bl	b7878 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b80a0:	4620      	mov	r0, r4
   b80a2:	f7fc f810 	bl	b40c6 <__cxa_guard_release>
   b80a6:	4b0f      	ldr	r3, [pc, #60]	; (b80e4 <pinAvailable+0x78>)
   b80a8:	7818      	ldrb	r0, [r3, #0]
   b80aa:	f7fe fbf1 	bl	b6890 <hal_spi_is_enabled>
   b80ae:	2800      	cmp	r0, #0
   b80b0:	d1df      	bne.n	b8072 <pinAvailable+0x6>
  return true; // 'pin' is available
   b80b2:	2001      	movs	r0, #1
   b80b4:	e7de      	b.n	b8074 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b80b6:	2801      	cmp	r0, #1
   b80b8:	d809      	bhi.n	b80ce <pinAvailable+0x62>
   b80ba:	f000 f869 	bl	b8190 <_Z19__fetch_global_Wirev>
   b80be:	2100      	movs	r1, #0
   b80c0:	7c00      	ldrb	r0, [r0, #16]
   b80c2:	f7fe fb9d 	bl	b6800 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b80c6:	f080 0001 	eor.w	r0, r0, #1
   b80ca:	b2c0      	uxtb	r0, r0
   b80cc:	e7d2      	b.n	b8074 <pinAvailable+0x8>
   b80ce:	3809      	subs	r0, #9
   b80d0:	2801      	cmp	r0, #1
   b80d2:	d8ee      	bhi.n	b80b2 <pinAvailable+0x46>
   b80d4:	f000 f89c 	bl	b8210 <_Z22__fetch_global_Serial1v>
   b80d8:	7c00      	ldrb	r0, [r0, #16]
   b80da:	f7fe fc09 	bl	b68f0 <hal_usart_is_enabled>
   b80de:	e7f2      	b.n	b80c6 <pinAvailable+0x5a>
   b80e0:	2003e720 	.word	0x2003e720
   b80e4:	2003e724 	.word	0x2003e724

000b80e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b80e8:	2823      	cmp	r0, #35	; 0x23
{
   b80ea:	b538      	push	{r3, r4, r5, lr}
   b80ec:	4604      	mov	r4, r0
   b80ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b80f0:	d80a      	bhi.n	b8108 <pinMode+0x20>
   b80f2:	29ff      	cmp	r1, #255	; 0xff
   b80f4:	d008      	beq.n	b8108 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b80f6:	f7ff ffb9 	bl	b806c <pinAvailable>
   b80fa:	b128      	cbz	r0, b8108 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b80fc:	4629      	mov	r1, r5
   b80fe:	4620      	mov	r0, r4
}
   b8100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8104:	f7fe bb0c 	b.w	b6720 <HAL_Pin_Mode>
}
   b8108:	bd38      	pop	{r3, r4, r5, pc}

000b810a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b810a:	b538      	push	{r3, r4, r5, lr}
   b810c:	4604      	mov	r4, r0
   b810e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8110:	f7fe fb0e 	bl	b6730 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8114:	28ff      	cmp	r0, #255	; 0xff
   b8116:	d010      	beq.n	b813a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8118:	2806      	cmp	r0, #6
   b811a:	d804      	bhi.n	b8126 <digitalWrite+0x1c>
   b811c:	234d      	movs	r3, #77	; 0x4d
   b811e:	fa23 f000 	lsr.w	r0, r3, r0
   b8122:	07c3      	lsls	r3, r0, #31
   b8124:	d409      	bmi.n	b813a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8126:	4620      	mov	r0, r4
   b8128:	f7ff ffa0 	bl	b806c <pinAvailable>
   b812c:	b128      	cbz	r0, b813a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b812e:	4629      	mov	r1, r5
   b8130:	4620      	mov	r0, r4
}
   b8132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8136:	f7fe bb03 	b.w	b6740 <HAL_GPIO_Write>
}
   b813a:	bd38      	pop	{r3, r4, r5, pc}

000b813c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b813c:	b510      	push	{r4, lr}
   b813e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8140:	f7fe faf6 	bl	b6730 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8144:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8146:	b2db      	uxtb	r3, r3
   b8148:	2b01      	cmp	r3, #1
   b814a:	d908      	bls.n	b815e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b814c:	4620      	mov	r0, r4
   b814e:	f7ff ff8d 	bl	b806c <pinAvailable>
   b8152:	b120      	cbz	r0, b815e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8154:	4620      	mov	r0, r4
}
   b8156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b815a:	f7fe baf9 	b.w	b6750 <HAL_GPIO_Read>
}
   b815e:	2000      	movs	r0, #0
   b8160:	bd10      	pop	{r4, pc}

000b8162 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8162:	4770      	bx	lr

000b8164 <_Z17acquireWireBufferv>:
{
   b8164:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8166:	2520      	movs	r5, #32
   b8168:	2314      	movs	r3, #20
{
   b816a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b816c:	6003      	str	r3, [r0, #0]
   b816e:	6085      	str	r5, [r0, #8]
   b8170:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8172:	4906      	ldr	r1, [pc, #24]	; (b818c <_Z17acquireWireBufferv+0x28>)
   b8174:	4628      	mov	r0, r5
   b8176:	f000 f871 	bl	b825c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b817a:	4904      	ldr	r1, [pc, #16]	; (b818c <_Z17acquireWireBufferv+0x28>)
	};
   b817c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b817e:	4628      	mov	r0, r5
   b8180:	f000 f86c 	bl	b825c <_ZnajRKSt9nothrow_t>
	};
   b8184:	60e0      	str	r0, [r4, #12]
}
   b8186:	4620      	mov	r0, r4
   b8188:	bd38      	pop	{r3, r4, r5, pc}
   b818a:	bf00      	nop
   b818c:	000bb708 	.word	0x000bb708

000b8190 <_Z19__fetch_global_Wirev>:
{
   b8190:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8192:	4d0e      	ldr	r5, [pc, #56]	; (b81cc <_Z19__fetch_global_Wirev+0x3c>)
   b8194:	7829      	ldrb	r1, [r5, #0]
   b8196:	f3bf 8f5b 	dmb	ish
   b819a:	f011 0401 	ands.w	r4, r1, #1
{
   b819e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81a0:	d111      	bne.n	b81c6 <_Z19__fetch_global_Wirev+0x36>
   b81a2:	4628      	mov	r0, r5
   b81a4:	f7fb ff8a 	bl	b40bc <__cxa_guard_acquire>
   b81a8:	b168      	cbz	r0, b81c6 <_Z19__fetch_global_Wirev+0x36>
   b81aa:	a801      	add	r0, sp, #4
   b81ac:	f7ff ffda 	bl	b8164 <_Z17acquireWireBufferv>
   b81b0:	aa01      	add	r2, sp, #4
   b81b2:	4621      	mov	r1, r4
   b81b4:	4806      	ldr	r0, [pc, #24]	; (b81d0 <_Z19__fetch_global_Wirev+0x40>)
   b81b6:	f7ff f94d 	bl	b7454 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b81ba:	4628      	mov	r0, r5
   b81bc:	f7fb ff83 	bl	b40c6 <__cxa_guard_release>
   b81c0:	4804      	ldr	r0, [pc, #16]	; (b81d4 <_Z19__fetch_global_Wirev+0x44>)
   b81c2:	f000 fd5b 	bl	b8c7c <atexit>
	return wire;
}
   b81c6:	4802      	ldr	r0, [pc, #8]	; (b81d0 <_Z19__fetch_global_Wirev+0x40>)
   b81c8:	b007      	add	sp, #28
   b81ca:	bd30      	pop	{r4, r5, pc}
   b81cc:	2003e730 	.word	0x2003e730
   b81d0:	2003e734 	.word	0x2003e734
   b81d4:	000b8163 	.word	0x000b8163

000b81d8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81d8:	4770      	bx	lr
	...

000b81dc <_Z20acquireSerial1Bufferv>:
{
   b81dc:	b538      	push	{r3, r4, r5, lr}
   b81de:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b81e0:	2514      	movs	r5, #20
   b81e2:	462a      	mov	r2, r5
   b81e4:	2100      	movs	r1, #0
   b81e6:	f000 fd9d 	bl	b8d24 <memset>
   b81ea:	8025      	strh	r5, [r4, #0]
   b81ec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81ee:	4907      	ldr	r1, [pc, #28]	; (b820c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b81f0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81f2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b81f4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81f6:	f000 f831 	bl	b825c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81fa:	4904      	ldr	r1, [pc, #16]	; (b820c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b81fc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b81fe:	4628      	mov	r0, r5
   b8200:	f000 f82c 	bl	b825c <_ZnajRKSt9nothrow_t>
    };
   b8204:	60e0      	str	r0, [r4, #12]
}
   b8206:	4620      	mov	r0, r4
   b8208:	bd38      	pop	{r3, r4, r5, pc}
   b820a:	bf00      	nop
   b820c:	000bb708 	.word	0x000bb708

000b8210 <_Z22__fetch_global_Serial1v>:
{
   b8210:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8212:	4d0e      	ldr	r5, [pc, #56]	; (b824c <_Z22__fetch_global_Serial1v+0x3c>)
   b8214:	7829      	ldrb	r1, [r5, #0]
   b8216:	f3bf 8f5b 	dmb	ish
   b821a:	f011 0401 	ands.w	r4, r1, #1
{
   b821e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8220:	d111      	bne.n	b8246 <_Z22__fetch_global_Serial1v+0x36>
   b8222:	4628      	mov	r0, r5
   b8224:	f7fb ff4a 	bl	b40bc <__cxa_guard_acquire>
   b8228:	b168      	cbz	r0, b8246 <_Z22__fetch_global_Serial1v+0x36>
   b822a:	a801      	add	r0, sp, #4
   b822c:	f7ff ffd6 	bl	b81dc <_Z20acquireSerial1Bufferv>
   b8230:	aa01      	add	r2, sp, #4
   b8232:	4621      	mov	r1, r4
   b8234:	4806      	ldr	r0, [pc, #24]	; (b8250 <_Z22__fetch_global_Serial1v+0x40>)
   b8236:	f7ff fdd1 	bl	b7ddc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b823a:	4628      	mov	r0, r5
   b823c:	f7fb ff43 	bl	b40c6 <__cxa_guard_release>
   b8240:	4804      	ldr	r0, [pc, #16]	; (b8254 <_Z22__fetch_global_Serial1v+0x44>)
   b8242:	f000 fd1b 	bl	b8c7c <atexit>
    return serial1;
}
   b8246:	4802      	ldr	r0, [pc, #8]	; (b8250 <_Z22__fetch_global_Serial1v+0x40>)
   b8248:	b007      	add	sp, #28
   b824a:	bd30      	pop	{r4, r5, pc}
   b824c:	2003e748 	.word	0x2003e748
   b8250:	2003e74c 	.word	0x2003e74c
   b8254:	000b81d9 	.word	0x000b81d9

000b8258 <_ZnwjRKSt9nothrow_t>:
   b8258:	f7fb bf1d 	b.w	b4096 <_Znwj>

000b825c <_ZnajRKSt9nothrow_t>:
   b825c:	f7fb bf1d 	b.w	b409a <_Znaj>

000b8260 <_ZSt25__throw_bad_function_callv>:
   b8260:	b508      	push	{r3, lr}
   b8262:	f7fe fced 	bl	b6c40 <abort>
	...

000b8268 <__aeabi_drsub>:
   b8268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b826c:	e002      	b.n	b8274 <__adddf3>
   b826e:	bf00      	nop

000b8270 <__aeabi_dsub>:
   b8270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8274 <__adddf3>:
   b8274:	b530      	push	{r4, r5, lr}
   b8276:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b827a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b827e:	ea94 0f05 	teq	r4, r5
   b8282:	bf08      	it	eq
   b8284:	ea90 0f02 	teqeq	r0, r2
   b8288:	bf1f      	itttt	ne
   b828a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b828e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b829a:	f000 80e2 	beq.w	b8462 <__adddf3+0x1ee>
   b829e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b82a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b82a6:	bfb8      	it	lt
   b82a8:	426d      	neglt	r5, r5
   b82aa:	dd0c      	ble.n	b82c6 <__adddf3+0x52>
   b82ac:	442c      	add	r4, r5
   b82ae:	ea80 0202 	eor.w	r2, r0, r2
   b82b2:	ea81 0303 	eor.w	r3, r1, r3
   b82b6:	ea82 0000 	eor.w	r0, r2, r0
   b82ba:	ea83 0101 	eor.w	r1, r3, r1
   b82be:	ea80 0202 	eor.w	r2, r0, r2
   b82c2:	ea81 0303 	eor.w	r3, r1, r3
   b82c6:	2d36      	cmp	r5, #54	; 0x36
   b82c8:	bf88      	it	hi
   b82ca:	bd30      	pophi	{r4, r5, pc}
   b82cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b82d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b82d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b82d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b82dc:	d002      	beq.n	b82e4 <__adddf3+0x70>
   b82de:	4240      	negs	r0, r0
   b82e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b82e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b82e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b82ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b82f0:	d002      	beq.n	b82f8 <__adddf3+0x84>
   b82f2:	4252      	negs	r2, r2
   b82f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b82f8:	ea94 0f05 	teq	r4, r5
   b82fc:	f000 80a7 	beq.w	b844e <__adddf3+0x1da>
   b8300:	f1a4 0401 	sub.w	r4, r4, #1
   b8304:	f1d5 0e20 	rsbs	lr, r5, #32
   b8308:	db0d      	blt.n	b8326 <__adddf3+0xb2>
   b830a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b830e:	fa22 f205 	lsr.w	r2, r2, r5
   b8312:	1880      	adds	r0, r0, r2
   b8314:	f141 0100 	adc.w	r1, r1, #0
   b8318:	fa03 f20e 	lsl.w	r2, r3, lr
   b831c:	1880      	adds	r0, r0, r2
   b831e:	fa43 f305 	asr.w	r3, r3, r5
   b8322:	4159      	adcs	r1, r3
   b8324:	e00e      	b.n	b8344 <__adddf3+0xd0>
   b8326:	f1a5 0520 	sub.w	r5, r5, #32
   b832a:	f10e 0e20 	add.w	lr, lr, #32
   b832e:	2a01      	cmp	r2, #1
   b8330:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8334:	bf28      	it	cs
   b8336:	f04c 0c02 	orrcs.w	ip, ip, #2
   b833a:	fa43 f305 	asr.w	r3, r3, r5
   b833e:	18c0      	adds	r0, r0, r3
   b8340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8348:	d507      	bpl.n	b835a <__adddf3+0xe6>
   b834a:	f04f 0e00 	mov.w	lr, #0
   b834e:	f1dc 0c00 	rsbs	ip, ip, #0
   b8352:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8356:	eb6e 0101 	sbc.w	r1, lr, r1
   b835a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b835e:	d31b      	bcc.n	b8398 <__adddf3+0x124>
   b8360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8364:	d30c      	bcc.n	b8380 <__adddf3+0x10c>
   b8366:	0849      	lsrs	r1, r1, #1
   b8368:	ea5f 0030 	movs.w	r0, r0, rrx
   b836c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8370:	f104 0401 	add.w	r4, r4, #1
   b8374:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b837c:	f080 809a 	bcs.w	b84b4 <__adddf3+0x240>
   b8380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8384:	bf08      	it	eq
   b8386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b838a:	f150 0000 	adcs.w	r0, r0, #0
   b838e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8392:	ea41 0105 	orr.w	r1, r1, r5
   b8396:	bd30      	pop	{r4, r5, pc}
   b8398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b839c:	4140      	adcs	r0, r0
   b839e:	eb41 0101 	adc.w	r1, r1, r1
   b83a2:	3c01      	subs	r4, #1
   b83a4:	bf28      	it	cs
   b83a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b83aa:	d2e9      	bcs.n	b8380 <__adddf3+0x10c>
   b83ac:	f091 0f00 	teq	r1, #0
   b83b0:	bf04      	itt	eq
   b83b2:	4601      	moveq	r1, r0
   b83b4:	2000      	moveq	r0, #0
   b83b6:	fab1 f381 	clz	r3, r1
   b83ba:	bf08      	it	eq
   b83bc:	3320      	addeq	r3, #32
   b83be:	f1a3 030b 	sub.w	r3, r3, #11
   b83c2:	f1b3 0220 	subs.w	r2, r3, #32
   b83c6:	da0c      	bge.n	b83e2 <__adddf3+0x16e>
   b83c8:	320c      	adds	r2, #12
   b83ca:	dd08      	ble.n	b83de <__adddf3+0x16a>
   b83cc:	f102 0c14 	add.w	ip, r2, #20
   b83d0:	f1c2 020c 	rsb	r2, r2, #12
   b83d4:	fa01 f00c 	lsl.w	r0, r1, ip
   b83d8:	fa21 f102 	lsr.w	r1, r1, r2
   b83dc:	e00c      	b.n	b83f8 <__adddf3+0x184>
   b83de:	f102 0214 	add.w	r2, r2, #20
   b83e2:	bfd8      	it	le
   b83e4:	f1c2 0c20 	rsble	ip, r2, #32
   b83e8:	fa01 f102 	lsl.w	r1, r1, r2
   b83ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   b83f0:	bfdc      	itt	le
   b83f2:	ea41 010c 	orrle.w	r1, r1, ip
   b83f6:	4090      	lslle	r0, r2
   b83f8:	1ae4      	subs	r4, r4, r3
   b83fa:	bfa2      	ittt	ge
   b83fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8400:	4329      	orrge	r1, r5
   b8402:	bd30      	popge	{r4, r5, pc}
   b8404:	ea6f 0404 	mvn.w	r4, r4
   b8408:	3c1f      	subs	r4, #31
   b840a:	da1c      	bge.n	b8446 <__adddf3+0x1d2>
   b840c:	340c      	adds	r4, #12
   b840e:	dc0e      	bgt.n	b842e <__adddf3+0x1ba>
   b8410:	f104 0414 	add.w	r4, r4, #20
   b8414:	f1c4 0220 	rsb	r2, r4, #32
   b8418:	fa20 f004 	lsr.w	r0, r0, r4
   b841c:	fa01 f302 	lsl.w	r3, r1, r2
   b8420:	ea40 0003 	orr.w	r0, r0, r3
   b8424:	fa21 f304 	lsr.w	r3, r1, r4
   b8428:	ea45 0103 	orr.w	r1, r5, r3
   b842c:	bd30      	pop	{r4, r5, pc}
   b842e:	f1c4 040c 	rsb	r4, r4, #12
   b8432:	f1c4 0220 	rsb	r2, r4, #32
   b8436:	fa20 f002 	lsr.w	r0, r0, r2
   b843a:	fa01 f304 	lsl.w	r3, r1, r4
   b843e:	ea40 0003 	orr.w	r0, r0, r3
   b8442:	4629      	mov	r1, r5
   b8444:	bd30      	pop	{r4, r5, pc}
   b8446:	fa21 f004 	lsr.w	r0, r1, r4
   b844a:	4629      	mov	r1, r5
   b844c:	bd30      	pop	{r4, r5, pc}
   b844e:	f094 0f00 	teq	r4, #0
   b8452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8456:	bf06      	itte	eq
   b8458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b845c:	3401      	addeq	r4, #1
   b845e:	3d01      	subne	r5, #1
   b8460:	e74e      	b.n	b8300 <__adddf3+0x8c>
   b8462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8466:	bf18      	it	ne
   b8468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b846c:	d029      	beq.n	b84c2 <__adddf3+0x24e>
   b846e:	ea94 0f05 	teq	r4, r5
   b8472:	bf08      	it	eq
   b8474:	ea90 0f02 	teqeq	r0, r2
   b8478:	d005      	beq.n	b8486 <__adddf3+0x212>
   b847a:	ea54 0c00 	orrs.w	ip, r4, r0
   b847e:	bf04      	itt	eq
   b8480:	4619      	moveq	r1, r3
   b8482:	4610      	moveq	r0, r2
   b8484:	bd30      	pop	{r4, r5, pc}
   b8486:	ea91 0f03 	teq	r1, r3
   b848a:	bf1e      	ittt	ne
   b848c:	2100      	movne	r1, #0
   b848e:	2000      	movne	r0, #0
   b8490:	bd30      	popne	{r4, r5, pc}
   b8492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8496:	d105      	bne.n	b84a4 <__adddf3+0x230>
   b8498:	0040      	lsls	r0, r0, #1
   b849a:	4149      	adcs	r1, r1
   b849c:	bf28      	it	cs
   b849e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b84a2:	bd30      	pop	{r4, r5, pc}
   b84a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b84a8:	bf3c      	itt	cc
   b84aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b84ae:	bd30      	popcc	{r4, r5, pc}
   b84b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b84b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b84b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b84bc:	f04f 0000 	mov.w	r0, #0
   b84c0:	bd30      	pop	{r4, r5, pc}
   b84c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b84c6:	bf1a      	itte	ne
   b84c8:	4619      	movne	r1, r3
   b84ca:	4610      	movne	r0, r2
   b84cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b84d0:	bf1c      	itt	ne
   b84d2:	460b      	movne	r3, r1
   b84d4:	4602      	movne	r2, r0
   b84d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b84da:	bf06      	itte	eq
   b84dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b84e0:	ea91 0f03 	teqeq	r1, r3
   b84e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b84e8:	bd30      	pop	{r4, r5, pc}
   b84ea:	bf00      	nop

000b84ec <__aeabi_ui2d>:
   b84ec:	f090 0f00 	teq	r0, #0
   b84f0:	bf04      	itt	eq
   b84f2:	2100      	moveq	r1, #0
   b84f4:	4770      	bxeq	lr
   b84f6:	b530      	push	{r4, r5, lr}
   b84f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b84fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8500:	f04f 0500 	mov.w	r5, #0
   b8504:	f04f 0100 	mov.w	r1, #0
   b8508:	e750      	b.n	b83ac <__adddf3+0x138>
   b850a:	bf00      	nop

000b850c <__aeabi_i2d>:
   b850c:	f090 0f00 	teq	r0, #0
   b8510:	bf04      	itt	eq
   b8512:	2100      	moveq	r1, #0
   b8514:	4770      	bxeq	lr
   b8516:	b530      	push	{r4, r5, lr}
   b8518:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b851c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8524:	bf48      	it	mi
   b8526:	4240      	negmi	r0, r0
   b8528:	f04f 0100 	mov.w	r1, #0
   b852c:	e73e      	b.n	b83ac <__adddf3+0x138>
   b852e:	bf00      	nop

000b8530 <__aeabi_f2d>:
   b8530:	0042      	lsls	r2, r0, #1
   b8532:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8536:	ea4f 0131 	mov.w	r1, r1, rrx
   b853a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b853e:	bf1f      	itttt	ne
   b8540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b854c:	4770      	bxne	lr
   b854e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8552:	bf08      	it	eq
   b8554:	4770      	bxeq	lr
   b8556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b855a:	bf04      	itt	eq
   b855c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8560:	4770      	bxeq	lr
   b8562:	b530      	push	{r4, r5, lr}
   b8564:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b856c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8570:	e71c      	b.n	b83ac <__adddf3+0x138>
   b8572:	bf00      	nop

000b8574 <__aeabi_ul2d>:
   b8574:	ea50 0201 	orrs.w	r2, r0, r1
   b8578:	bf08      	it	eq
   b857a:	4770      	bxeq	lr
   b857c:	b530      	push	{r4, r5, lr}
   b857e:	f04f 0500 	mov.w	r5, #0
   b8582:	e00a      	b.n	b859a <__aeabi_l2d+0x16>

000b8584 <__aeabi_l2d>:
   b8584:	ea50 0201 	orrs.w	r2, r0, r1
   b8588:	bf08      	it	eq
   b858a:	4770      	bxeq	lr
   b858c:	b530      	push	{r4, r5, lr}
   b858e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8592:	d502      	bpl.n	b859a <__aeabi_l2d+0x16>
   b8594:	4240      	negs	r0, r0
   b8596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b859a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b859e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b85a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b85a6:	f43f aed8 	beq.w	b835a <__adddf3+0xe6>
   b85aa:	f04f 0203 	mov.w	r2, #3
   b85ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b85b2:	bf18      	it	ne
   b85b4:	3203      	addne	r2, #3
   b85b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b85ba:	bf18      	it	ne
   b85bc:	3203      	addne	r2, #3
   b85be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b85c2:	f1c2 0320 	rsb	r3, r2, #32
   b85c6:	fa00 fc03 	lsl.w	ip, r0, r3
   b85ca:	fa20 f002 	lsr.w	r0, r0, r2
   b85ce:	fa01 fe03 	lsl.w	lr, r1, r3
   b85d2:	ea40 000e 	orr.w	r0, r0, lr
   b85d6:	fa21 f102 	lsr.w	r1, r1, r2
   b85da:	4414      	add	r4, r2
   b85dc:	e6bd      	b.n	b835a <__adddf3+0xe6>
   b85de:	bf00      	nop

000b85e0 <__aeabi_dmul>:
   b85e0:	b570      	push	{r4, r5, r6, lr}
   b85e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b85e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b85ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b85ee:	bf1d      	ittte	ne
   b85f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b85f4:	ea94 0f0c 	teqne	r4, ip
   b85f8:	ea95 0f0c 	teqne	r5, ip
   b85fc:	f000 f8de 	bleq	b87bc <__aeabi_dmul+0x1dc>
   b8600:	442c      	add	r4, r5
   b8602:	ea81 0603 	eor.w	r6, r1, r3
   b8606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b860a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b860e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8612:	bf18      	it	ne
   b8614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b861c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8620:	d038      	beq.n	b8694 <__aeabi_dmul+0xb4>
   b8622:	fba0 ce02 	umull	ip, lr, r0, r2
   b8626:	f04f 0500 	mov.w	r5, #0
   b862a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b862e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8632:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8636:	f04f 0600 	mov.w	r6, #0
   b863a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b863e:	f09c 0f00 	teq	ip, #0
   b8642:	bf18      	it	ne
   b8644:	f04e 0e01 	orrne.w	lr, lr, #1
   b8648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b864c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8654:	d204      	bcs.n	b8660 <__aeabi_dmul+0x80>
   b8656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b865a:	416d      	adcs	r5, r5
   b865c:	eb46 0606 	adc.w	r6, r6, r6
   b8660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b866c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8678:	bf88      	it	hi
   b867a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b867e:	d81e      	bhi.n	b86be <__aeabi_dmul+0xde>
   b8680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8684:	bf08      	it	eq
   b8686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b868a:	f150 0000 	adcs.w	r0, r0, #0
   b868e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8692:	bd70      	pop	{r4, r5, r6, pc}
   b8694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8698:	ea46 0101 	orr.w	r1, r6, r1
   b869c:	ea40 0002 	orr.w	r0, r0, r2
   b86a0:	ea81 0103 	eor.w	r1, r1, r3
   b86a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b86a8:	bfc2      	ittt	gt
   b86aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b86ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b86b2:	bd70      	popgt	{r4, r5, r6, pc}
   b86b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b86b8:	f04f 0e00 	mov.w	lr, #0
   b86bc:	3c01      	subs	r4, #1
   b86be:	f300 80ab 	bgt.w	b8818 <__aeabi_dmul+0x238>
   b86c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b86c6:	bfde      	ittt	le
   b86c8:	2000      	movle	r0, #0
   b86ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b86ce:	bd70      	pople	{r4, r5, r6, pc}
   b86d0:	f1c4 0400 	rsb	r4, r4, #0
   b86d4:	3c20      	subs	r4, #32
   b86d6:	da35      	bge.n	b8744 <__aeabi_dmul+0x164>
   b86d8:	340c      	adds	r4, #12
   b86da:	dc1b      	bgt.n	b8714 <__aeabi_dmul+0x134>
   b86dc:	f104 0414 	add.w	r4, r4, #20
   b86e0:	f1c4 0520 	rsb	r5, r4, #32
   b86e4:	fa00 f305 	lsl.w	r3, r0, r5
   b86e8:	fa20 f004 	lsr.w	r0, r0, r4
   b86ec:	fa01 f205 	lsl.w	r2, r1, r5
   b86f0:	ea40 0002 	orr.w	r0, r0, r2
   b86f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b86f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b86fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8700:	fa21 f604 	lsr.w	r6, r1, r4
   b8704:	eb42 0106 	adc.w	r1, r2, r6
   b8708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b870c:	bf08      	it	eq
   b870e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8712:	bd70      	pop	{r4, r5, r6, pc}
   b8714:	f1c4 040c 	rsb	r4, r4, #12
   b8718:	f1c4 0520 	rsb	r5, r4, #32
   b871c:	fa00 f304 	lsl.w	r3, r0, r4
   b8720:	fa20 f005 	lsr.w	r0, r0, r5
   b8724:	fa01 f204 	lsl.w	r2, r1, r4
   b8728:	ea40 0002 	orr.w	r0, r0, r2
   b872c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8734:	f141 0100 	adc.w	r1, r1, #0
   b8738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b873c:	bf08      	it	eq
   b873e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8742:	bd70      	pop	{r4, r5, r6, pc}
   b8744:	f1c4 0520 	rsb	r5, r4, #32
   b8748:	fa00 f205 	lsl.w	r2, r0, r5
   b874c:	ea4e 0e02 	orr.w	lr, lr, r2
   b8750:	fa20 f304 	lsr.w	r3, r0, r4
   b8754:	fa01 f205 	lsl.w	r2, r1, r5
   b8758:	ea43 0302 	orr.w	r3, r3, r2
   b875c:	fa21 f004 	lsr.w	r0, r1, r4
   b8760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8764:	fa21 f204 	lsr.w	r2, r1, r4
   b8768:	ea20 0002 	bic.w	r0, r0, r2
   b876c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8774:	bf08      	it	eq
   b8776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b877a:	bd70      	pop	{r4, r5, r6, pc}
   b877c:	f094 0f00 	teq	r4, #0
   b8780:	d10f      	bne.n	b87a2 <__aeabi_dmul+0x1c2>
   b8782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8786:	0040      	lsls	r0, r0, #1
   b8788:	eb41 0101 	adc.w	r1, r1, r1
   b878c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8790:	bf08      	it	eq
   b8792:	3c01      	subeq	r4, #1
   b8794:	d0f7      	beq.n	b8786 <__aeabi_dmul+0x1a6>
   b8796:	ea41 0106 	orr.w	r1, r1, r6
   b879a:	f095 0f00 	teq	r5, #0
   b879e:	bf18      	it	ne
   b87a0:	4770      	bxne	lr
   b87a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b87a6:	0052      	lsls	r2, r2, #1
   b87a8:	eb43 0303 	adc.w	r3, r3, r3
   b87ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b87b0:	bf08      	it	eq
   b87b2:	3d01      	subeq	r5, #1
   b87b4:	d0f7      	beq.n	b87a6 <__aeabi_dmul+0x1c6>
   b87b6:	ea43 0306 	orr.w	r3, r3, r6
   b87ba:	4770      	bx	lr
   b87bc:	ea94 0f0c 	teq	r4, ip
   b87c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b87c4:	bf18      	it	ne
   b87c6:	ea95 0f0c 	teqne	r5, ip
   b87ca:	d00c      	beq.n	b87e6 <__aeabi_dmul+0x206>
   b87cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b87d0:	bf18      	it	ne
   b87d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b87d6:	d1d1      	bne.n	b877c <__aeabi_dmul+0x19c>
   b87d8:	ea81 0103 	eor.w	r1, r1, r3
   b87dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b87e0:	f04f 0000 	mov.w	r0, #0
   b87e4:	bd70      	pop	{r4, r5, r6, pc}
   b87e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b87ea:	bf06      	itte	eq
   b87ec:	4610      	moveq	r0, r2
   b87ee:	4619      	moveq	r1, r3
   b87f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b87f4:	d019      	beq.n	b882a <__aeabi_dmul+0x24a>
   b87f6:	ea94 0f0c 	teq	r4, ip
   b87fa:	d102      	bne.n	b8802 <__aeabi_dmul+0x222>
   b87fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8800:	d113      	bne.n	b882a <__aeabi_dmul+0x24a>
   b8802:	ea95 0f0c 	teq	r5, ip
   b8806:	d105      	bne.n	b8814 <__aeabi_dmul+0x234>
   b8808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b880c:	bf1c      	itt	ne
   b880e:	4610      	movne	r0, r2
   b8810:	4619      	movne	r1, r3
   b8812:	d10a      	bne.n	b882a <__aeabi_dmul+0x24a>
   b8814:	ea81 0103 	eor.w	r1, r1, r3
   b8818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b881c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8824:	f04f 0000 	mov.w	r0, #0
   b8828:	bd70      	pop	{r4, r5, r6, pc}
   b882a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b882e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8832:	bd70      	pop	{r4, r5, r6, pc}

000b8834 <__aeabi_ddiv>:
   b8834:	b570      	push	{r4, r5, r6, lr}
   b8836:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b883a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b883e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8842:	bf1d      	ittte	ne
   b8844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8848:	ea94 0f0c 	teqne	r4, ip
   b884c:	ea95 0f0c 	teqne	r5, ip
   b8850:	f000 f8a7 	bleq	b89a2 <__aeabi_ddiv+0x16e>
   b8854:	eba4 0405 	sub.w	r4, r4, r5
   b8858:	ea81 0e03 	eor.w	lr, r1, r3
   b885c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8860:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8864:	f000 8088 	beq.w	b8978 <__aeabi_ddiv+0x144>
   b8868:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b886c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8878:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b887c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8884:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b888c:	429d      	cmp	r5, r3
   b888e:	bf08      	it	eq
   b8890:	4296      	cmpeq	r6, r2
   b8892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8896:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b889a:	d202      	bcs.n	b88a2 <__aeabi_ddiv+0x6e>
   b889c:	085b      	lsrs	r3, r3, #1
   b889e:	ea4f 0232 	mov.w	r2, r2, rrx
   b88a2:	1ab6      	subs	r6, r6, r2
   b88a4:	eb65 0503 	sbc.w	r5, r5, r3
   b88a8:	085b      	lsrs	r3, r3, #1
   b88aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b88ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b88b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b88b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b88ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b88be:	bf22      	ittt	cs
   b88c0:	1ab6      	subcs	r6, r6, r2
   b88c2:	4675      	movcs	r5, lr
   b88c4:	ea40 000c 	orrcs.w	r0, r0, ip
   b88c8:	085b      	lsrs	r3, r3, #1
   b88ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b88ce:	ebb6 0e02 	subs.w	lr, r6, r2
   b88d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b88d6:	bf22      	ittt	cs
   b88d8:	1ab6      	subcs	r6, r6, r2
   b88da:	4675      	movcs	r5, lr
   b88dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b88e0:	085b      	lsrs	r3, r3, #1
   b88e2:	ea4f 0232 	mov.w	r2, r2, rrx
   b88e6:	ebb6 0e02 	subs.w	lr, r6, r2
   b88ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b88ee:	bf22      	ittt	cs
   b88f0:	1ab6      	subcs	r6, r6, r2
   b88f2:	4675      	movcs	r5, lr
   b88f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b88f8:	085b      	lsrs	r3, r3, #1
   b88fa:	ea4f 0232 	mov.w	r2, r2, rrx
   b88fe:	ebb6 0e02 	subs.w	lr, r6, r2
   b8902:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8906:	bf22      	ittt	cs
   b8908:	1ab6      	subcs	r6, r6, r2
   b890a:	4675      	movcs	r5, lr
   b890c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8910:	ea55 0e06 	orrs.w	lr, r5, r6
   b8914:	d018      	beq.n	b8948 <__aeabi_ddiv+0x114>
   b8916:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b891a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b891e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b892a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b892e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8932:	d1c0      	bne.n	b88b6 <__aeabi_ddiv+0x82>
   b8934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8938:	d10b      	bne.n	b8952 <__aeabi_ddiv+0x11e>
   b893a:	ea41 0100 	orr.w	r1, r1, r0
   b893e:	f04f 0000 	mov.w	r0, #0
   b8942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8946:	e7b6      	b.n	b88b6 <__aeabi_ddiv+0x82>
   b8948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b894c:	bf04      	itt	eq
   b894e:	4301      	orreq	r1, r0
   b8950:	2000      	moveq	r0, #0
   b8952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8956:	bf88      	it	hi
   b8958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b895c:	f63f aeaf 	bhi.w	b86be <__aeabi_dmul+0xde>
   b8960:	ebb5 0c03 	subs.w	ip, r5, r3
   b8964:	bf04      	itt	eq
   b8966:	ebb6 0c02 	subseq.w	ip, r6, r2
   b896a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b896e:	f150 0000 	adcs.w	r0, r0, #0
   b8972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8976:	bd70      	pop	{r4, r5, r6, pc}
   b8978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b897c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8984:	bfc2      	ittt	gt
   b8986:	ebd4 050c 	rsbsgt	r5, r4, ip
   b898a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b898e:	bd70      	popgt	{r4, r5, r6, pc}
   b8990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8994:	f04f 0e00 	mov.w	lr, #0
   b8998:	3c01      	subs	r4, #1
   b899a:	e690      	b.n	b86be <__aeabi_dmul+0xde>
   b899c:	ea45 0e06 	orr.w	lr, r5, r6
   b89a0:	e68d      	b.n	b86be <__aeabi_dmul+0xde>
   b89a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b89a6:	ea94 0f0c 	teq	r4, ip
   b89aa:	bf08      	it	eq
   b89ac:	ea95 0f0c 	teqeq	r5, ip
   b89b0:	f43f af3b 	beq.w	b882a <__aeabi_dmul+0x24a>
   b89b4:	ea94 0f0c 	teq	r4, ip
   b89b8:	d10a      	bne.n	b89d0 <__aeabi_ddiv+0x19c>
   b89ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b89be:	f47f af34 	bne.w	b882a <__aeabi_dmul+0x24a>
   b89c2:	ea95 0f0c 	teq	r5, ip
   b89c6:	f47f af25 	bne.w	b8814 <__aeabi_dmul+0x234>
   b89ca:	4610      	mov	r0, r2
   b89cc:	4619      	mov	r1, r3
   b89ce:	e72c      	b.n	b882a <__aeabi_dmul+0x24a>
   b89d0:	ea95 0f0c 	teq	r5, ip
   b89d4:	d106      	bne.n	b89e4 <__aeabi_ddiv+0x1b0>
   b89d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b89da:	f43f aefd 	beq.w	b87d8 <__aeabi_dmul+0x1f8>
   b89de:	4610      	mov	r0, r2
   b89e0:	4619      	mov	r1, r3
   b89e2:	e722      	b.n	b882a <__aeabi_dmul+0x24a>
   b89e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b89e8:	bf18      	it	ne
   b89ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b89ee:	f47f aec5 	bne.w	b877c <__aeabi_dmul+0x19c>
   b89f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b89f6:	f47f af0d 	bne.w	b8814 <__aeabi_dmul+0x234>
   b89fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b89fe:	f47f aeeb 	bne.w	b87d8 <__aeabi_dmul+0x1f8>
   b8a02:	e712      	b.n	b882a <__aeabi_dmul+0x24a>

000b8a04 <__gedf2>:
   b8a04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8a08:	e006      	b.n	b8a18 <__cmpdf2+0x4>
   b8a0a:	bf00      	nop

000b8a0c <__ledf2>:
   b8a0c:	f04f 0c01 	mov.w	ip, #1
   b8a10:	e002      	b.n	b8a18 <__cmpdf2+0x4>
   b8a12:	bf00      	nop

000b8a14 <__cmpdf2>:
   b8a14:	f04f 0c01 	mov.w	ip, #1
   b8a18:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8a28:	bf18      	it	ne
   b8a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8a2e:	d01b      	beq.n	b8a68 <__cmpdf2+0x54>
   b8a30:	b001      	add	sp, #4
   b8a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8a36:	bf0c      	ite	eq
   b8a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8a3c:	ea91 0f03 	teqne	r1, r3
   b8a40:	bf02      	ittt	eq
   b8a42:	ea90 0f02 	teqeq	r0, r2
   b8a46:	2000      	moveq	r0, #0
   b8a48:	4770      	bxeq	lr
   b8a4a:	f110 0f00 	cmn.w	r0, #0
   b8a4e:	ea91 0f03 	teq	r1, r3
   b8a52:	bf58      	it	pl
   b8a54:	4299      	cmppl	r1, r3
   b8a56:	bf08      	it	eq
   b8a58:	4290      	cmpeq	r0, r2
   b8a5a:	bf2c      	ite	cs
   b8a5c:	17d8      	asrcs	r0, r3, #31
   b8a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8a62:	f040 0001 	orr.w	r0, r0, #1
   b8a66:	4770      	bx	lr
   b8a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8a70:	d102      	bne.n	b8a78 <__cmpdf2+0x64>
   b8a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8a76:	d107      	bne.n	b8a88 <__cmpdf2+0x74>
   b8a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8a80:	d1d6      	bne.n	b8a30 <__cmpdf2+0x1c>
   b8a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8a86:	d0d3      	beq.n	b8a30 <__cmpdf2+0x1c>
   b8a88:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8a8c:	4770      	bx	lr
   b8a8e:	bf00      	nop

000b8a90 <__aeabi_cdrcmple>:
   b8a90:	4684      	mov	ip, r0
   b8a92:	4610      	mov	r0, r2
   b8a94:	4662      	mov	r2, ip
   b8a96:	468c      	mov	ip, r1
   b8a98:	4619      	mov	r1, r3
   b8a9a:	4663      	mov	r3, ip
   b8a9c:	e000      	b.n	b8aa0 <__aeabi_cdcmpeq>
   b8a9e:	bf00      	nop

000b8aa0 <__aeabi_cdcmpeq>:
   b8aa0:	b501      	push	{r0, lr}
   b8aa2:	f7ff ffb7 	bl	b8a14 <__cmpdf2>
   b8aa6:	2800      	cmp	r0, #0
   b8aa8:	bf48      	it	mi
   b8aaa:	f110 0f00 	cmnmi.w	r0, #0
   b8aae:	bd01      	pop	{r0, pc}

000b8ab0 <__aeabi_dcmpeq>:
   b8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8ab4:	f7ff fff4 	bl	b8aa0 <__aeabi_cdcmpeq>
   b8ab8:	bf0c      	ite	eq
   b8aba:	2001      	moveq	r0, #1
   b8abc:	2000      	movne	r0, #0
   b8abe:	f85d fb08 	ldr.w	pc, [sp], #8
   b8ac2:	bf00      	nop

000b8ac4 <__aeabi_dcmplt>:
   b8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8ac8:	f7ff ffea 	bl	b8aa0 <__aeabi_cdcmpeq>
   b8acc:	bf34      	ite	cc
   b8ace:	2001      	movcc	r0, #1
   b8ad0:	2000      	movcs	r0, #0
   b8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   b8ad6:	bf00      	nop

000b8ad8 <__aeabi_dcmple>:
   b8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8adc:	f7ff ffe0 	bl	b8aa0 <__aeabi_cdcmpeq>
   b8ae0:	bf94      	ite	ls
   b8ae2:	2001      	movls	r0, #1
   b8ae4:	2000      	movhi	r0, #0
   b8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   b8aea:	bf00      	nop

000b8aec <__aeabi_dcmpge>:
   b8aec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8af0:	f7ff ffce 	bl	b8a90 <__aeabi_cdrcmple>
   b8af4:	bf94      	ite	ls
   b8af6:	2001      	movls	r0, #1
   b8af8:	2000      	movhi	r0, #0
   b8afa:	f85d fb08 	ldr.w	pc, [sp], #8
   b8afe:	bf00      	nop

000b8b00 <__aeabi_dcmpgt>:
   b8b00:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8b04:	f7ff ffc4 	bl	b8a90 <__aeabi_cdrcmple>
   b8b08:	bf34      	ite	cc
   b8b0a:	2001      	movcc	r0, #1
   b8b0c:	2000      	movcs	r0, #0
   b8b0e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8b12:	bf00      	nop

000b8b14 <__aeabi_d2uiz>:
   b8b14:	004a      	lsls	r2, r1, #1
   b8b16:	d211      	bcs.n	b8b3c <__aeabi_d2uiz+0x28>
   b8b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8b1c:	d211      	bcs.n	b8b42 <__aeabi_d2uiz+0x2e>
   b8b1e:	d50d      	bpl.n	b8b3c <__aeabi_d2uiz+0x28>
   b8b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8b28:	d40e      	bmi.n	b8b48 <__aeabi_d2uiz+0x34>
   b8b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8b36:	fa23 f002 	lsr.w	r0, r3, r2
   b8b3a:	4770      	bx	lr
   b8b3c:	f04f 0000 	mov.w	r0, #0
   b8b40:	4770      	bx	lr
   b8b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8b46:	d102      	bne.n	b8b4e <__aeabi_d2uiz+0x3a>
   b8b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8b4c:	4770      	bx	lr
   b8b4e:	f04f 0000 	mov.w	r0, #0
   b8b52:	4770      	bx	lr

000b8b54 <__aeabi_d2f>:
   b8b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8b5c:	bf24      	itt	cs
   b8b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8b66:	d90d      	bls.n	b8b84 <__aeabi_d2f+0x30>
   b8b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8b7c:	bf08      	it	eq
   b8b7e:	f020 0001 	biceq.w	r0, r0, #1
   b8b82:	4770      	bx	lr
   b8b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8b88:	d121      	bne.n	b8bce <__aeabi_d2f+0x7a>
   b8b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8b8e:	bfbc      	itt	lt
   b8b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8b94:	4770      	bxlt	lr
   b8b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8b9e:	f1c2 0218 	rsb	r2, r2, #24
   b8ba2:	f1c2 0c20 	rsb	ip, r2, #32
   b8ba6:	fa10 f30c 	lsls.w	r3, r0, ip
   b8baa:	fa20 f002 	lsr.w	r0, r0, r2
   b8bae:	bf18      	it	ne
   b8bb0:	f040 0001 	orrne.w	r0, r0, #1
   b8bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8bc0:	ea40 000c 	orr.w	r0, r0, ip
   b8bc4:	fa23 f302 	lsr.w	r3, r3, r2
   b8bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8bcc:	e7cc      	b.n	b8b68 <__aeabi_d2f+0x14>
   b8bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8bd2:	d107      	bne.n	b8be4 <__aeabi_d2f+0x90>
   b8bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8bd8:	bf1e      	ittt	ne
   b8bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8be2:	4770      	bxne	lr
   b8be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8bf0:	4770      	bx	lr
   b8bf2:	bf00      	nop

000b8bf4 <__aeabi_d2ulz>:
   b8bf4:	b5d0      	push	{r4, r6, r7, lr}
   b8bf6:	4b0c      	ldr	r3, [pc, #48]	; (b8c28 <__aeabi_d2ulz+0x34>)
   b8bf8:	2200      	movs	r2, #0
   b8bfa:	4606      	mov	r6, r0
   b8bfc:	460f      	mov	r7, r1
   b8bfe:	f7ff fcef 	bl	b85e0 <__aeabi_dmul>
   b8c02:	f7ff ff87 	bl	b8b14 <__aeabi_d2uiz>
   b8c06:	4604      	mov	r4, r0
   b8c08:	f7ff fc70 	bl	b84ec <__aeabi_ui2d>
   b8c0c:	4b07      	ldr	r3, [pc, #28]	; (b8c2c <__aeabi_d2ulz+0x38>)
   b8c0e:	2200      	movs	r2, #0
   b8c10:	f7ff fce6 	bl	b85e0 <__aeabi_dmul>
   b8c14:	4602      	mov	r2, r0
   b8c16:	460b      	mov	r3, r1
   b8c18:	4630      	mov	r0, r6
   b8c1a:	4639      	mov	r1, r7
   b8c1c:	f7ff fb28 	bl	b8270 <__aeabi_dsub>
   b8c20:	f7ff ff78 	bl	b8b14 <__aeabi_d2uiz>
   b8c24:	4621      	mov	r1, r4
   b8c26:	bdd0      	pop	{r4, r6, r7, pc}
   b8c28:	3df00000 	.word	0x3df00000
   b8c2c:	41f00000 	.word	0x41f00000

000b8c30 <asctime_r>:
   b8c30:	b510      	push	{r4, lr}
   b8c32:	460c      	mov	r4, r1
   b8c34:	6941      	ldr	r1, [r0, #20]
   b8c36:	6903      	ldr	r3, [r0, #16]
   b8c38:	6982      	ldr	r2, [r0, #24]
   b8c3a:	b086      	sub	sp, #24
   b8c3c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b8c40:	9104      	str	r1, [sp, #16]
   b8c42:	6801      	ldr	r1, [r0, #0]
   b8c44:	9103      	str	r1, [sp, #12]
   b8c46:	6841      	ldr	r1, [r0, #4]
   b8c48:	9102      	str	r1, [sp, #8]
   b8c4a:	6881      	ldr	r1, [r0, #8]
   b8c4c:	9101      	str	r1, [sp, #4]
   b8c4e:	68c1      	ldr	r1, [r0, #12]
   b8c50:	9100      	str	r1, [sp, #0]
   b8c52:	4907      	ldr	r1, [pc, #28]	; (b8c70 <asctime_r+0x40>)
   b8c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8c58:	440b      	add	r3, r1
   b8c5a:	4906      	ldr	r1, [pc, #24]	; (b8c74 <asctime_r+0x44>)
   b8c5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b8c60:	440a      	add	r2, r1
   b8c62:	4620      	mov	r0, r4
   b8c64:	4904      	ldr	r1, [pc, #16]	; (b8c78 <asctime_r+0x48>)
   b8c66:	f7fd ffdb 	bl	b6c20 <siprintf>
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	b006      	add	sp, #24
   b8c6e:	bd10      	pop	{r4, pc}
   b8c70:	000bb73e 	.word	0x000bb73e
   b8c74:	000bb729 	.word	0x000bb729
   b8c78:	000bb709 	.word	0x000bb709

000b8c7c <atexit>:
   b8c7c:	2300      	movs	r3, #0
   b8c7e:	4601      	mov	r1, r0
   b8c80:	461a      	mov	r2, r3
   b8c82:	4618      	mov	r0, r3
   b8c84:	f000 bf9e 	b.w	b9bc4 <__register_exitproc>

000b8c88 <atof>:
   b8c88:	2100      	movs	r1, #0
   b8c8a:	f000 bf03 	b.w	b9a94 <strtod>

000b8c8e <atoi>:
   b8c8e:	220a      	movs	r2, #10
   b8c90:	2100      	movs	r1, #0
   b8c92:	f000 bf8d 	b.w	b9bb0 <strtol>
	...

000b8c98 <gmtime>:
   b8c98:	b538      	push	{r3, r4, r5, lr}
   b8c9a:	4b0b      	ldr	r3, [pc, #44]	; (b8cc8 <gmtime+0x30>)
   b8c9c:	681d      	ldr	r5, [r3, #0]
   b8c9e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b8ca0:	4604      	mov	r4, r0
   b8ca2:	b953      	cbnz	r3, b8cba <gmtime+0x22>
   b8ca4:	2024      	movs	r0, #36	; 0x24
   b8ca6:	f7fd ffa3 	bl	b6bf0 <malloc>
   b8caa:	4602      	mov	r2, r0
   b8cac:	63e8      	str	r0, [r5, #60]	; 0x3c
   b8cae:	b920      	cbnz	r0, b8cba <gmtime+0x22>
   b8cb0:	4b06      	ldr	r3, [pc, #24]	; (b8ccc <gmtime+0x34>)
   b8cb2:	4807      	ldr	r0, [pc, #28]	; (b8cd0 <gmtime+0x38>)
   b8cb4:	2139      	movs	r1, #57	; 0x39
   b8cb6:	f7fd ffdb 	bl	b6c70 <__assert_func>
   b8cba:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b8cbc:	4620      	mov	r0, r4
   b8cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8cc2:	f7fd bff5 	b.w	b6cb0 <gmtime_r>
   b8cc6:	bf00      	nop
   b8cc8:	2003e2cc 	.word	0x2003e2cc
   b8ccc:	000bb762 	.word	0x000bb762
   b8cd0:	000bb779 	.word	0x000bb779

000b8cd4 <memcpy>:
   b8cd4:	440a      	add	r2, r1
   b8cd6:	4291      	cmp	r1, r2
   b8cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8cdc:	d100      	bne.n	b8ce0 <memcpy+0xc>
   b8cde:	4770      	bx	lr
   b8ce0:	b510      	push	{r4, lr}
   b8ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8cea:	4291      	cmp	r1, r2
   b8cec:	d1f9      	bne.n	b8ce2 <memcpy+0xe>
   b8cee:	bd10      	pop	{r4, pc}

000b8cf0 <memmove>:
   b8cf0:	4288      	cmp	r0, r1
   b8cf2:	b510      	push	{r4, lr}
   b8cf4:	eb01 0402 	add.w	r4, r1, r2
   b8cf8:	d902      	bls.n	b8d00 <memmove+0x10>
   b8cfa:	4284      	cmp	r4, r0
   b8cfc:	4623      	mov	r3, r4
   b8cfe:	d807      	bhi.n	b8d10 <memmove+0x20>
   b8d00:	1e43      	subs	r3, r0, #1
   b8d02:	42a1      	cmp	r1, r4
   b8d04:	d008      	beq.n	b8d18 <memmove+0x28>
   b8d06:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8d0e:	e7f8      	b.n	b8d02 <memmove+0x12>
   b8d10:	4402      	add	r2, r0
   b8d12:	4601      	mov	r1, r0
   b8d14:	428a      	cmp	r2, r1
   b8d16:	d100      	bne.n	b8d1a <memmove+0x2a>
   b8d18:	bd10      	pop	{r4, pc}
   b8d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8d22:	e7f7      	b.n	b8d14 <memmove+0x24>

000b8d24 <memset>:
   b8d24:	4402      	add	r2, r0
   b8d26:	4603      	mov	r3, r0
   b8d28:	4293      	cmp	r3, r2
   b8d2a:	d100      	bne.n	b8d2e <memset+0xa>
   b8d2c:	4770      	bx	lr
   b8d2e:	f803 1b01 	strb.w	r1, [r3], #1
   b8d32:	e7f9      	b.n	b8d28 <memset+0x4>

000b8d34 <srand>:
   b8d34:	b538      	push	{r3, r4, r5, lr}
   b8d36:	4b10      	ldr	r3, [pc, #64]	; (b8d78 <srand+0x44>)
   b8d38:	681d      	ldr	r5, [r3, #0]
   b8d3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d3c:	4604      	mov	r4, r0
   b8d3e:	b9b3      	cbnz	r3, b8d6e <srand+0x3a>
   b8d40:	2018      	movs	r0, #24
   b8d42:	f7fd ff55 	bl	b6bf0 <malloc>
   b8d46:	4602      	mov	r2, r0
   b8d48:	63a8      	str	r0, [r5, #56]	; 0x38
   b8d4a:	b920      	cbnz	r0, b8d56 <srand+0x22>
   b8d4c:	4b0b      	ldr	r3, [pc, #44]	; (b8d7c <srand+0x48>)
   b8d4e:	480c      	ldr	r0, [pc, #48]	; (b8d80 <srand+0x4c>)
   b8d50:	2142      	movs	r1, #66	; 0x42
   b8d52:	f7fd ff8d 	bl	b6c70 <__assert_func>
   b8d56:	490b      	ldr	r1, [pc, #44]	; (b8d84 <srand+0x50>)
   b8d58:	4b0b      	ldr	r3, [pc, #44]	; (b8d88 <srand+0x54>)
   b8d5a:	e9c0 1300 	strd	r1, r3, [r0]
   b8d5e:	4b0b      	ldr	r3, [pc, #44]	; (b8d8c <srand+0x58>)
   b8d60:	6083      	str	r3, [r0, #8]
   b8d62:	230b      	movs	r3, #11
   b8d64:	8183      	strh	r3, [r0, #12]
   b8d66:	2100      	movs	r1, #0
   b8d68:	2001      	movs	r0, #1
   b8d6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8d6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d70:	2200      	movs	r2, #0
   b8d72:	611c      	str	r4, [r3, #16]
   b8d74:	615a      	str	r2, [r3, #20]
   b8d76:	bd38      	pop	{r3, r4, r5, pc}
   b8d78:	2003e2cc 	.word	0x2003e2cc
   b8d7c:	000bb762 	.word	0x000bb762
   b8d80:	000bb7d2 	.word	0x000bb7d2
   b8d84:	abcd330e 	.word	0xabcd330e
   b8d88:	e66d1234 	.word	0xe66d1234
   b8d8c:	0005deec 	.word	0x0005deec

000b8d90 <strcmp>:
   b8d90:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8d94:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8d98:	2a01      	cmp	r2, #1
   b8d9a:	bf28      	it	cs
   b8d9c:	429a      	cmpcs	r2, r3
   b8d9e:	d0f7      	beq.n	b8d90 <strcmp>
   b8da0:	1ad0      	subs	r0, r2, r3
   b8da2:	4770      	bx	lr

000b8da4 <strcpy>:
   b8da4:	4603      	mov	r3, r0
   b8da6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8daa:	f803 2b01 	strb.w	r2, [r3], #1
   b8dae:	2a00      	cmp	r2, #0
   b8db0:	d1f9      	bne.n	b8da6 <strcpy+0x2>
   b8db2:	4770      	bx	lr

000b8db4 <strdup>:
   b8db4:	4b02      	ldr	r3, [pc, #8]	; (b8dc0 <strdup+0xc>)
   b8db6:	4601      	mov	r1, r0
   b8db8:	6818      	ldr	r0, [r3, #0]
   b8dba:	f000 b803 	b.w	b8dc4 <_strdup_r>
   b8dbe:	bf00      	nop
   b8dc0:	2003e2cc 	.word	0x2003e2cc

000b8dc4 <_strdup_r>:
   b8dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8dc6:	4604      	mov	r4, r0
   b8dc8:	4608      	mov	r0, r1
   b8dca:	460d      	mov	r5, r1
   b8dcc:	f000 f80f 	bl	b8dee <strlen>
   b8dd0:	1c42      	adds	r2, r0, #1
   b8dd2:	4611      	mov	r1, r2
   b8dd4:	4620      	mov	r0, r4
   b8dd6:	9201      	str	r2, [sp, #4]
   b8dd8:	f7fd ff3a 	bl	b6c50 <_malloc_r>
   b8ddc:	4604      	mov	r4, r0
   b8dde:	b118      	cbz	r0, b8de8 <_strdup_r+0x24>
   b8de0:	9a01      	ldr	r2, [sp, #4]
   b8de2:	4629      	mov	r1, r5
   b8de4:	f7ff ff76 	bl	b8cd4 <memcpy>
   b8de8:	4620      	mov	r0, r4
   b8dea:	b003      	add	sp, #12
   b8dec:	bd30      	pop	{r4, r5, pc}

000b8dee <strlen>:
   b8dee:	4603      	mov	r3, r0
   b8df0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8df4:	2a00      	cmp	r2, #0
   b8df6:	d1fb      	bne.n	b8df0 <strlen+0x2>
   b8df8:	1a18      	subs	r0, r3, r0
   b8dfa:	3801      	subs	r0, #1
   b8dfc:	4770      	bx	lr

000b8dfe <strncmp>:
   b8dfe:	b510      	push	{r4, lr}
   b8e00:	b17a      	cbz	r2, b8e22 <strncmp+0x24>
   b8e02:	4603      	mov	r3, r0
   b8e04:	3901      	subs	r1, #1
   b8e06:	1884      	adds	r4, r0, r2
   b8e08:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8e0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8e10:	4290      	cmp	r0, r2
   b8e12:	d101      	bne.n	b8e18 <strncmp+0x1a>
   b8e14:	42a3      	cmp	r3, r4
   b8e16:	d101      	bne.n	b8e1c <strncmp+0x1e>
   b8e18:	1a80      	subs	r0, r0, r2
   b8e1a:	bd10      	pop	{r4, pc}
   b8e1c:	2800      	cmp	r0, #0
   b8e1e:	d1f3      	bne.n	b8e08 <strncmp+0xa>
   b8e20:	e7fa      	b.n	b8e18 <strncmp+0x1a>
   b8e22:	4610      	mov	r0, r2
   b8e24:	e7f9      	b.n	b8e1a <strncmp+0x1c>

000b8e26 <strncpy>:
   b8e26:	b510      	push	{r4, lr}
   b8e28:	3901      	subs	r1, #1
   b8e2a:	4603      	mov	r3, r0
   b8e2c:	b132      	cbz	r2, b8e3c <strncpy+0x16>
   b8e2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8e32:	f803 4b01 	strb.w	r4, [r3], #1
   b8e36:	3a01      	subs	r2, #1
   b8e38:	2c00      	cmp	r4, #0
   b8e3a:	d1f7      	bne.n	b8e2c <strncpy+0x6>
   b8e3c:	441a      	add	r2, r3
   b8e3e:	2100      	movs	r1, #0
   b8e40:	4293      	cmp	r3, r2
   b8e42:	d100      	bne.n	b8e46 <strncpy+0x20>
   b8e44:	bd10      	pop	{r4, pc}
   b8e46:	f803 1b01 	strb.w	r1, [r3], #1
   b8e4a:	e7f9      	b.n	b8e40 <strncpy+0x1a>

000b8e4c <sulp>:
   b8e4c:	b570      	push	{r4, r5, r6, lr}
   b8e4e:	4604      	mov	r4, r0
   b8e50:	460d      	mov	r5, r1
   b8e52:	ec45 4b10 	vmov	d0, r4, r5
   b8e56:	4616      	mov	r6, r2
   b8e58:	f001 fe0e 	bl	baa78 <__ulp>
   b8e5c:	ec51 0b10 	vmov	r0, r1, d0
   b8e60:	b17e      	cbz	r6, b8e82 <sulp+0x36>
   b8e62:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8e66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8e6a:	2b00      	cmp	r3, #0
   b8e6c:	dd09      	ble.n	b8e82 <sulp+0x36>
   b8e6e:	051b      	lsls	r3, r3, #20
   b8e70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8e74:	2400      	movs	r4, #0
   b8e76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8e7a:	4622      	mov	r2, r4
   b8e7c:	462b      	mov	r3, r5
   b8e7e:	f7ff fbaf 	bl	b85e0 <__aeabi_dmul>
   b8e82:	bd70      	pop	{r4, r5, r6, pc}
   b8e84:	0000      	movs	r0, r0
	...

000b8e88 <_strtod_l>:
   b8e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e8c:	ed2d 8b02 	vpush	{d8}
   b8e90:	b09d      	sub	sp, #116	; 0x74
   b8e92:	461f      	mov	r7, r3
   b8e94:	2300      	movs	r3, #0
   b8e96:	9318      	str	r3, [sp, #96]	; 0x60
   b8e98:	4ba2      	ldr	r3, [pc, #648]	; (b9124 <_strtod_l+0x29c>)
   b8e9a:	9213      	str	r2, [sp, #76]	; 0x4c
   b8e9c:	681b      	ldr	r3, [r3, #0]
   b8e9e:	9305      	str	r3, [sp, #20]
   b8ea0:	4604      	mov	r4, r0
   b8ea2:	4618      	mov	r0, r3
   b8ea4:	4688      	mov	r8, r1
   b8ea6:	f7ff ffa2 	bl	b8dee <strlen>
   b8eaa:	f04f 0a00 	mov.w	sl, #0
   b8eae:	4605      	mov	r5, r0
   b8eb0:	f04f 0b00 	mov.w	fp, #0
   b8eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8eba:	781a      	ldrb	r2, [r3, #0]
   b8ebc:	2a2b      	cmp	r2, #43	; 0x2b
   b8ebe:	d04e      	beq.n	b8f5e <_strtod_l+0xd6>
   b8ec0:	d83b      	bhi.n	b8f3a <_strtod_l+0xb2>
   b8ec2:	2a0d      	cmp	r2, #13
   b8ec4:	d834      	bhi.n	b8f30 <_strtod_l+0xa8>
   b8ec6:	2a08      	cmp	r2, #8
   b8ec8:	d834      	bhi.n	b8f34 <_strtod_l+0xac>
   b8eca:	2a00      	cmp	r2, #0
   b8ecc:	d03e      	beq.n	b8f4c <_strtod_l+0xc4>
   b8ece:	2300      	movs	r3, #0
   b8ed0:	930a      	str	r3, [sp, #40]	; 0x28
   b8ed2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b8ed4:	7833      	ldrb	r3, [r6, #0]
   b8ed6:	2b30      	cmp	r3, #48	; 0x30
   b8ed8:	f040 80b0 	bne.w	b903c <_strtod_l+0x1b4>
   b8edc:	7873      	ldrb	r3, [r6, #1]
   b8ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8ee2:	2b58      	cmp	r3, #88	; 0x58
   b8ee4:	d168      	bne.n	b8fb8 <_strtod_l+0x130>
   b8ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8ee8:	9301      	str	r3, [sp, #4]
   b8eea:	ab18      	add	r3, sp, #96	; 0x60
   b8eec:	9702      	str	r7, [sp, #8]
   b8eee:	9300      	str	r3, [sp, #0]
   b8ef0:	4a8d      	ldr	r2, [pc, #564]	; (b9128 <_strtod_l+0x2a0>)
   b8ef2:	ab19      	add	r3, sp, #100	; 0x64
   b8ef4:	a917      	add	r1, sp, #92	; 0x5c
   b8ef6:	4620      	mov	r0, r4
   b8ef8:	f000 ff2e 	bl	b9d58 <__gethex>
   b8efc:	f010 0707 	ands.w	r7, r0, #7
   b8f00:	4605      	mov	r5, r0
   b8f02:	d005      	beq.n	b8f10 <_strtod_l+0x88>
   b8f04:	2f06      	cmp	r7, #6
   b8f06:	d12c      	bne.n	b8f62 <_strtod_l+0xda>
   b8f08:	3601      	adds	r6, #1
   b8f0a:	2300      	movs	r3, #0
   b8f0c:	9617      	str	r6, [sp, #92]	; 0x5c
   b8f0e:	930a      	str	r3, [sp, #40]	; 0x28
   b8f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8f12:	2b00      	cmp	r3, #0
   b8f14:	f040 8590 	bne.w	b9a38 <_strtod_l+0xbb0>
   b8f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8f1a:	b1eb      	cbz	r3, b8f58 <_strtod_l+0xd0>
   b8f1c:	4652      	mov	r2, sl
   b8f1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8f22:	ec43 2b10 	vmov	d0, r2, r3
   b8f26:	b01d      	add	sp, #116	; 0x74
   b8f28:	ecbd 8b02 	vpop	{d8}
   b8f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f30:	2a20      	cmp	r2, #32
   b8f32:	d1cc      	bne.n	b8ece <_strtod_l+0x46>
   b8f34:	3301      	adds	r3, #1
   b8f36:	9317      	str	r3, [sp, #92]	; 0x5c
   b8f38:	e7be      	b.n	b8eb8 <_strtod_l+0x30>
   b8f3a:	2a2d      	cmp	r2, #45	; 0x2d
   b8f3c:	d1c7      	bne.n	b8ece <_strtod_l+0x46>
   b8f3e:	2201      	movs	r2, #1
   b8f40:	920a      	str	r2, [sp, #40]	; 0x28
   b8f42:	1c5a      	adds	r2, r3, #1
   b8f44:	9217      	str	r2, [sp, #92]	; 0x5c
   b8f46:	785b      	ldrb	r3, [r3, #1]
   b8f48:	2b00      	cmp	r3, #0
   b8f4a:	d1c2      	bne.n	b8ed2 <_strtod_l+0x4a>
   b8f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8f4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8f52:	2b00      	cmp	r3, #0
   b8f54:	f040 856e 	bne.w	b9a34 <_strtod_l+0xbac>
   b8f58:	4652      	mov	r2, sl
   b8f5a:	465b      	mov	r3, fp
   b8f5c:	e7e1      	b.n	b8f22 <_strtod_l+0x9a>
   b8f5e:	2200      	movs	r2, #0
   b8f60:	e7ee      	b.n	b8f40 <_strtod_l+0xb8>
   b8f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8f64:	b13a      	cbz	r2, b8f76 <_strtod_l+0xee>
   b8f66:	2135      	movs	r1, #53	; 0x35
   b8f68:	a81a      	add	r0, sp, #104	; 0x68
   b8f6a:	f001 fe90 	bl	bac8e <__copybits>
   b8f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8f70:	4620      	mov	r0, r4
   b8f72:	f001 fa4f 	bl	ba414 <_Bfree>
   b8f76:	3f01      	subs	r7, #1
   b8f78:	2f04      	cmp	r7, #4
   b8f7a:	d806      	bhi.n	b8f8a <_strtod_l+0x102>
   b8f7c:	e8df f007 	tbb	[pc, r7]
   b8f80:	1714030a 	.word	0x1714030a
   b8f84:	0a          	.byte	0x0a
   b8f85:	00          	.byte	0x00
   b8f86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b8f8a:	0728      	lsls	r0, r5, #28
   b8f8c:	d5c0      	bpl.n	b8f10 <_strtod_l+0x88>
   b8f8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8f92:	e7bd      	b.n	b8f10 <_strtod_l+0x88>
   b8f94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b8f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b8f9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8fa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8fa6:	e7f0      	b.n	b8f8a <_strtod_l+0x102>
   b8fa8:	f8df b180 	ldr.w	fp, [pc, #384]	; b912c <_strtod_l+0x2a4>
   b8fac:	e7ed      	b.n	b8f8a <_strtod_l+0x102>
   b8fae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b8fb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8fb6:	e7e8      	b.n	b8f8a <_strtod_l+0x102>
   b8fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8fba:	1c5a      	adds	r2, r3, #1
   b8fbc:	9217      	str	r2, [sp, #92]	; 0x5c
   b8fbe:	785b      	ldrb	r3, [r3, #1]
   b8fc0:	2b30      	cmp	r3, #48	; 0x30
   b8fc2:	d0f9      	beq.n	b8fb8 <_strtod_l+0x130>
   b8fc4:	2b00      	cmp	r3, #0
   b8fc6:	d0a3      	beq.n	b8f10 <_strtod_l+0x88>
   b8fc8:	2301      	movs	r3, #1
   b8fca:	f04f 0900 	mov.w	r9, #0
   b8fce:	9304      	str	r3, [sp, #16]
   b8fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8fd2:	9308      	str	r3, [sp, #32]
   b8fd4:	f8cd 901c 	str.w	r9, [sp, #28]
   b8fd8:	464f      	mov	r7, r9
   b8fda:	220a      	movs	r2, #10
   b8fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b8fde:	7806      	ldrb	r6, [r0, #0]
   b8fe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b8fe4:	b2d9      	uxtb	r1, r3
   b8fe6:	2909      	cmp	r1, #9
   b8fe8:	d92a      	bls.n	b9040 <_strtod_l+0x1b8>
   b8fea:	9905      	ldr	r1, [sp, #20]
   b8fec:	462a      	mov	r2, r5
   b8fee:	f7ff ff06 	bl	b8dfe <strncmp>
   b8ff2:	b398      	cbz	r0, b905c <_strtod_l+0x1d4>
   b8ff4:	2000      	movs	r0, #0
   b8ff6:	4632      	mov	r2, r6
   b8ff8:	463d      	mov	r5, r7
   b8ffa:	9005      	str	r0, [sp, #20]
   b8ffc:	4603      	mov	r3, r0
   b8ffe:	2a65      	cmp	r2, #101	; 0x65
   b9000:	d001      	beq.n	b9006 <_strtod_l+0x17e>
   b9002:	2a45      	cmp	r2, #69	; 0x45
   b9004:	d118      	bne.n	b9038 <_strtod_l+0x1b0>
   b9006:	b91d      	cbnz	r5, b9010 <_strtod_l+0x188>
   b9008:	9a04      	ldr	r2, [sp, #16]
   b900a:	4302      	orrs	r2, r0
   b900c:	d09e      	beq.n	b8f4c <_strtod_l+0xc4>
   b900e:	2500      	movs	r5, #0
   b9010:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b9014:	f108 0201 	add.w	r2, r8, #1
   b9018:	9217      	str	r2, [sp, #92]	; 0x5c
   b901a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b901e:	2a2b      	cmp	r2, #43	; 0x2b
   b9020:	d075      	beq.n	b910e <_strtod_l+0x286>
   b9022:	2a2d      	cmp	r2, #45	; 0x2d
   b9024:	d07b      	beq.n	b911e <_strtod_l+0x296>
   b9026:	f04f 0c00 	mov.w	ip, #0
   b902a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b902e:	2909      	cmp	r1, #9
   b9030:	f240 8082 	bls.w	b9138 <_strtod_l+0x2b0>
   b9034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9038:	2600      	movs	r6, #0
   b903a:	e09d      	b.n	b9178 <_strtod_l+0x2f0>
   b903c:	2300      	movs	r3, #0
   b903e:	e7c4      	b.n	b8fca <_strtod_l+0x142>
   b9040:	2f08      	cmp	r7, #8
   b9042:	bfd8      	it	le
   b9044:	9907      	ldrle	r1, [sp, #28]
   b9046:	f100 0001 	add.w	r0, r0, #1
   b904a:	bfda      	itte	le
   b904c:	fb02 3301 	mlale	r3, r2, r1, r3
   b9050:	9307      	strle	r3, [sp, #28]
   b9052:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9056:	3701      	adds	r7, #1
   b9058:	9017      	str	r0, [sp, #92]	; 0x5c
   b905a:	e7bf      	b.n	b8fdc <_strtod_l+0x154>
   b905c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b905e:	195a      	adds	r2, r3, r5
   b9060:	9217      	str	r2, [sp, #92]	; 0x5c
   b9062:	5d5a      	ldrb	r2, [r3, r5]
   b9064:	2f00      	cmp	r7, #0
   b9066:	d037      	beq.n	b90d8 <_strtod_l+0x250>
   b9068:	9005      	str	r0, [sp, #20]
   b906a:	463d      	mov	r5, r7
   b906c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9070:	2b09      	cmp	r3, #9
   b9072:	d912      	bls.n	b909a <_strtod_l+0x212>
   b9074:	2301      	movs	r3, #1
   b9076:	e7c2      	b.n	b8ffe <_strtod_l+0x176>
   b9078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b907a:	1c5a      	adds	r2, r3, #1
   b907c:	9217      	str	r2, [sp, #92]	; 0x5c
   b907e:	785a      	ldrb	r2, [r3, #1]
   b9080:	3001      	adds	r0, #1
   b9082:	2a30      	cmp	r2, #48	; 0x30
   b9084:	d0f8      	beq.n	b9078 <_strtod_l+0x1f0>
   b9086:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b908a:	2b08      	cmp	r3, #8
   b908c:	f200 84d9 	bhi.w	b9a42 <_strtod_l+0xbba>
   b9090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9092:	9005      	str	r0, [sp, #20]
   b9094:	2000      	movs	r0, #0
   b9096:	9308      	str	r3, [sp, #32]
   b9098:	4605      	mov	r5, r0
   b909a:	3a30      	subs	r2, #48	; 0x30
   b909c:	f100 0301 	add.w	r3, r0, #1
   b90a0:	d014      	beq.n	b90cc <_strtod_l+0x244>
   b90a2:	9905      	ldr	r1, [sp, #20]
   b90a4:	4419      	add	r1, r3
   b90a6:	9105      	str	r1, [sp, #20]
   b90a8:	462b      	mov	r3, r5
   b90aa:	eb00 0e05 	add.w	lr, r0, r5
   b90ae:	210a      	movs	r1, #10
   b90b0:	4573      	cmp	r3, lr
   b90b2:	d113      	bne.n	b90dc <_strtod_l+0x254>
   b90b4:	182b      	adds	r3, r5, r0
   b90b6:	2b08      	cmp	r3, #8
   b90b8:	f105 0501 	add.w	r5, r5, #1
   b90bc:	4405      	add	r5, r0
   b90be:	dc1c      	bgt.n	b90fa <_strtod_l+0x272>
   b90c0:	9907      	ldr	r1, [sp, #28]
   b90c2:	230a      	movs	r3, #10
   b90c4:	fb03 2301 	mla	r3, r3, r1, r2
   b90c8:	9307      	str	r3, [sp, #28]
   b90ca:	2300      	movs	r3, #0
   b90cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b90ce:	1c51      	adds	r1, r2, #1
   b90d0:	9117      	str	r1, [sp, #92]	; 0x5c
   b90d2:	7852      	ldrb	r2, [r2, #1]
   b90d4:	4618      	mov	r0, r3
   b90d6:	e7c9      	b.n	b906c <_strtod_l+0x1e4>
   b90d8:	4638      	mov	r0, r7
   b90da:	e7d2      	b.n	b9082 <_strtod_l+0x1fa>
   b90dc:	2b08      	cmp	r3, #8
   b90de:	dc04      	bgt.n	b90ea <_strtod_l+0x262>
   b90e0:	9e07      	ldr	r6, [sp, #28]
   b90e2:	434e      	muls	r6, r1
   b90e4:	9607      	str	r6, [sp, #28]
   b90e6:	3301      	adds	r3, #1
   b90e8:	e7e2      	b.n	b90b0 <_strtod_l+0x228>
   b90ea:	f103 0c01 	add.w	ip, r3, #1
   b90ee:	f1bc 0f10 	cmp.w	ip, #16
   b90f2:	bfd8      	it	le
   b90f4:	fb01 f909 	mulle.w	r9, r1, r9
   b90f8:	e7f5      	b.n	b90e6 <_strtod_l+0x25e>
   b90fa:	2d10      	cmp	r5, #16
   b90fc:	bfdc      	itt	le
   b90fe:	230a      	movle	r3, #10
   b9100:	fb03 2909 	mlale	r9, r3, r9, r2
   b9104:	e7e1      	b.n	b90ca <_strtod_l+0x242>
   b9106:	2300      	movs	r3, #0
   b9108:	9305      	str	r3, [sp, #20]
   b910a:	2301      	movs	r3, #1
   b910c:	e77c      	b.n	b9008 <_strtod_l+0x180>
   b910e:	f04f 0c00 	mov.w	ip, #0
   b9112:	f108 0202 	add.w	r2, r8, #2
   b9116:	9217      	str	r2, [sp, #92]	; 0x5c
   b9118:	f898 2002 	ldrb.w	r2, [r8, #2]
   b911c:	e785      	b.n	b902a <_strtod_l+0x1a2>
   b911e:	f04f 0c01 	mov.w	ip, #1
   b9122:	e7f6      	b.n	b9112 <_strtod_l+0x28a>
   b9124:	000bba00 	.word	0x000bba00
   b9128:	000bb838 	.word	0x000bb838
   b912c:	7ff00000 	.word	0x7ff00000
   b9130:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9132:	1c51      	adds	r1, r2, #1
   b9134:	9117      	str	r1, [sp, #92]	; 0x5c
   b9136:	7852      	ldrb	r2, [r2, #1]
   b9138:	2a30      	cmp	r2, #48	; 0x30
   b913a:	d0f9      	beq.n	b9130 <_strtod_l+0x2a8>
   b913c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9140:	2908      	cmp	r1, #8
   b9142:	f63f af79 	bhi.w	b9038 <_strtod_l+0x1b0>
   b9146:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b914a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b914c:	9206      	str	r2, [sp, #24]
   b914e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9150:	1c51      	adds	r1, r2, #1
   b9152:	9117      	str	r1, [sp, #92]	; 0x5c
   b9154:	7852      	ldrb	r2, [r2, #1]
   b9156:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b915a:	2e09      	cmp	r6, #9
   b915c:	d937      	bls.n	b91ce <_strtod_l+0x346>
   b915e:	9e06      	ldr	r6, [sp, #24]
   b9160:	1b89      	subs	r1, r1, r6
   b9162:	2908      	cmp	r1, #8
   b9164:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9168:	dc02      	bgt.n	b9170 <_strtod_l+0x2e8>
   b916a:	4576      	cmp	r6, lr
   b916c:	bfa8      	it	ge
   b916e:	4676      	movge	r6, lr
   b9170:	f1bc 0f00 	cmp.w	ip, #0
   b9174:	d000      	beq.n	b9178 <_strtod_l+0x2f0>
   b9176:	4276      	negs	r6, r6
   b9178:	2d00      	cmp	r5, #0
   b917a:	d14d      	bne.n	b9218 <_strtod_l+0x390>
   b917c:	9904      	ldr	r1, [sp, #16]
   b917e:	4301      	orrs	r1, r0
   b9180:	f47f aec6 	bne.w	b8f10 <_strtod_l+0x88>
   b9184:	2b00      	cmp	r3, #0
   b9186:	f47f aee1 	bne.w	b8f4c <_strtod_l+0xc4>
   b918a:	2a69      	cmp	r2, #105	; 0x69
   b918c:	d027      	beq.n	b91de <_strtod_l+0x356>
   b918e:	dc24      	bgt.n	b91da <_strtod_l+0x352>
   b9190:	2a49      	cmp	r2, #73	; 0x49
   b9192:	d024      	beq.n	b91de <_strtod_l+0x356>
   b9194:	2a4e      	cmp	r2, #78	; 0x4e
   b9196:	f47f aed9 	bne.w	b8f4c <_strtod_l+0xc4>
   b919a:	499f      	ldr	r1, [pc, #636]	; (b9418 <_strtod_l+0x590>)
   b919c:	a817      	add	r0, sp, #92	; 0x5c
   b919e:	f001 f833 	bl	ba208 <__match>
   b91a2:	2800      	cmp	r0, #0
   b91a4:	f43f aed2 	beq.w	b8f4c <_strtod_l+0xc4>
   b91a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b91aa:	781b      	ldrb	r3, [r3, #0]
   b91ac:	2b28      	cmp	r3, #40	; 0x28
   b91ae:	d12d      	bne.n	b920c <_strtod_l+0x384>
   b91b0:	499a      	ldr	r1, [pc, #616]	; (b941c <_strtod_l+0x594>)
   b91b2:	aa1a      	add	r2, sp, #104	; 0x68
   b91b4:	a817      	add	r0, sp, #92	; 0x5c
   b91b6:	f001 f83b 	bl	ba230 <__hexnan>
   b91ba:	2805      	cmp	r0, #5
   b91bc:	d126      	bne.n	b920c <_strtod_l+0x384>
   b91be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b91c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b91c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b91c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b91cc:	e6a0      	b.n	b8f10 <_strtod_l+0x88>
   b91ce:	210a      	movs	r1, #10
   b91d0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b91d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b91d8:	e7b9      	b.n	b914e <_strtod_l+0x2c6>
   b91da:	2a6e      	cmp	r2, #110	; 0x6e
   b91dc:	e7db      	b.n	b9196 <_strtod_l+0x30e>
   b91de:	4990      	ldr	r1, [pc, #576]	; (b9420 <_strtod_l+0x598>)
   b91e0:	a817      	add	r0, sp, #92	; 0x5c
   b91e2:	f001 f811 	bl	ba208 <__match>
   b91e6:	2800      	cmp	r0, #0
   b91e8:	f43f aeb0 	beq.w	b8f4c <_strtod_l+0xc4>
   b91ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b91ee:	498d      	ldr	r1, [pc, #564]	; (b9424 <_strtod_l+0x59c>)
   b91f0:	3b01      	subs	r3, #1
   b91f2:	a817      	add	r0, sp, #92	; 0x5c
   b91f4:	9317      	str	r3, [sp, #92]	; 0x5c
   b91f6:	f001 f807 	bl	ba208 <__match>
   b91fa:	b910      	cbnz	r0, b9202 <_strtod_l+0x37a>
   b91fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b91fe:	3301      	adds	r3, #1
   b9200:	9317      	str	r3, [sp, #92]	; 0x5c
   b9202:	f8df b230 	ldr.w	fp, [pc, #560]	; b9434 <_strtod_l+0x5ac>
   b9206:	f04f 0a00 	mov.w	sl, #0
   b920a:	e681      	b.n	b8f10 <_strtod_l+0x88>
   b920c:	4886      	ldr	r0, [pc, #536]	; (b9428 <_strtod_l+0x5a0>)
   b920e:	f001 fd93 	bl	bad38 <nan>
   b9212:	ec5b ab10 	vmov	sl, fp, d0
   b9216:	e67b      	b.n	b8f10 <_strtod_l+0x88>
   b9218:	9b05      	ldr	r3, [sp, #20]
   b921a:	9807      	ldr	r0, [sp, #28]
   b921c:	1af3      	subs	r3, r6, r3
   b921e:	2f00      	cmp	r7, #0
   b9220:	bf08      	it	eq
   b9222:	462f      	moveq	r7, r5
   b9224:	2d10      	cmp	r5, #16
   b9226:	9306      	str	r3, [sp, #24]
   b9228:	46a8      	mov	r8, r5
   b922a:	bfa8      	it	ge
   b922c:	f04f 0810 	movge.w	r8, #16
   b9230:	f7ff f95c 	bl	b84ec <__aeabi_ui2d>
   b9234:	2d09      	cmp	r5, #9
   b9236:	4682      	mov	sl, r0
   b9238:	468b      	mov	fp, r1
   b923a:	dd13      	ble.n	b9264 <_strtod_l+0x3dc>
   b923c:	4b7b      	ldr	r3, [pc, #492]	; (b942c <_strtod_l+0x5a4>)
   b923e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9242:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9246:	f7ff f9cb 	bl	b85e0 <__aeabi_dmul>
   b924a:	4682      	mov	sl, r0
   b924c:	4648      	mov	r0, r9
   b924e:	468b      	mov	fp, r1
   b9250:	f7ff f94c 	bl	b84ec <__aeabi_ui2d>
   b9254:	4602      	mov	r2, r0
   b9256:	460b      	mov	r3, r1
   b9258:	4650      	mov	r0, sl
   b925a:	4659      	mov	r1, fp
   b925c:	f7ff f80a 	bl	b8274 <__adddf3>
   b9260:	4682      	mov	sl, r0
   b9262:	468b      	mov	fp, r1
   b9264:	2d0f      	cmp	r5, #15
   b9266:	dc38      	bgt.n	b92da <_strtod_l+0x452>
   b9268:	9b06      	ldr	r3, [sp, #24]
   b926a:	2b00      	cmp	r3, #0
   b926c:	f43f ae50 	beq.w	b8f10 <_strtod_l+0x88>
   b9270:	dd24      	ble.n	b92bc <_strtod_l+0x434>
   b9272:	2b16      	cmp	r3, #22
   b9274:	dc0b      	bgt.n	b928e <_strtod_l+0x406>
   b9276:	496d      	ldr	r1, [pc, #436]	; (b942c <_strtod_l+0x5a4>)
   b9278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b927c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9280:	4652      	mov	r2, sl
   b9282:	465b      	mov	r3, fp
   b9284:	f7ff f9ac 	bl	b85e0 <__aeabi_dmul>
   b9288:	4682      	mov	sl, r0
   b928a:	468b      	mov	fp, r1
   b928c:	e640      	b.n	b8f10 <_strtod_l+0x88>
   b928e:	9a06      	ldr	r2, [sp, #24]
   b9290:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9294:	4293      	cmp	r3, r2
   b9296:	db20      	blt.n	b92da <_strtod_l+0x452>
   b9298:	4c64      	ldr	r4, [pc, #400]	; (b942c <_strtod_l+0x5a4>)
   b929a:	f1c5 050f 	rsb	r5, r5, #15
   b929e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b92a2:	4652      	mov	r2, sl
   b92a4:	465b      	mov	r3, fp
   b92a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b92aa:	f7ff f999 	bl	b85e0 <__aeabi_dmul>
   b92ae:	9b06      	ldr	r3, [sp, #24]
   b92b0:	1b5d      	subs	r5, r3, r5
   b92b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b92b6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b92ba:	e7e3      	b.n	b9284 <_strtod_l+0x3fc>
   b92bc:	9b06      	ldr	r3, [sp, #24]
   b92be:	3316      	adds	r3, #22
   b92c0:	db0b      	blt.n	b92da <_strtod_l+0x452>
   b92c2:	9b05      	ldr	r3, [sp, #20]
   b92c4:	1b9e      	subs	r6, r3, r6
   b92c6:	4b59      	ldr	r3, [pc, #356]	; (b942c <_strtod_l+0x5a4>)
   b92c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b92cc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b92d0:	4650      	mov	r0, sl
   b92d2:	4659      	mov	r1, fp
   b92d4:	f7ff faae 	bl	b8834 <__aeabi_ddiv>
   b92d8:	e7d6      	b.n	b9288 <_strtod_l+0x400>
   b92da:	9b06      	ldr	r3, [sp, #24]
   b92dc:	eba5 0808 	sub.w	r8, r5, r8
   b92e0:	4498      	add	r8, r3
   b92e2:	f1b8 0f00 	cmp.w	r8, #0
   b92e6:	dd74      	ble.n	b93d2 <_strtod_l+0x54a>
   b92e8:	f018 030f 	ands.w	r3, r8, #15
   b92ec:	d00a      	beq.n	b9304 <_strtod_l+0x47c>
   b92ee:	494f      	ldr	r1, [pc, #316]	; (b942c <_strtod_l+0x5a4>)
   b92f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b92f4:	4652      	mov	r2, sl
   b92f6:	465b      	mov	r3, fp
   b92f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b92fc:	f7ff f970 	bl	b85e0 <__aeabi_dmul>
   b9300:	4682      	mov	sl, r0
   b9302:	468b      	mov	fp, r1
   b9304:	f038 080f 	bics.w	r8, r8, #15
   b9308:	d04f      	beq.n	b93aa <_strtod_l+0x522>
   b930a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b930e:	dd22      	ble.n	b9356 <_strtod_l+0x4ce>
   b9310:	2500      	movs	r5, #0
   b9312:	462e      	mov	r6, r5
   b9314:	9507      	str	r5, [sp, #28]
   b9316:	9505      	str	r5, [sp, #20]
   b9318:	2322      	movs	r3, #34	; 0x22
   b931a:	f8df b118 	ldr.w	fp, [pc, #280]	; b9434 <_strtod_l+0x5ac>
   b931e:	6023      	str	r3, [r4, #0]
   b9320:	f04f 0a00 	mov.w	sl, #0
   b9324:	9b07      	ldr	r3, [sp, #28]
   b9326:	2b00      	cmp	r3, #0
   b9328:	f43f adf2 	beq.w	b8f10 <_strtod_l+0x88>
   b932c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b932e:	4620      	mov	r0, r4
   b9330:	f001 f870 	bl	ba414 <_Bfree>
   b9334:	9905      	ldr	r1, [sp, #20]
   b9336:	4620      	mov	r0, r4
   b9338:	f001 f86c 	bl	ba414 <_Bfree>
   b933c:	4631      	mov	r1, r6
   b933e:	4620      	mov	r0, r4
   b9340:	f001 f868 	bl	ba414 <_Bfree>
   b9344:	9907      	ldr	r1, [sp, #28]
   b9346:	4620      	mov	r0, r4
   b9348:	f001 f864 	bl	ba414 <_Bfree>
   b934c:	4629      	mov	r1, r5
   b934e:	4620      	mov	r0, r4
   b9350:	f001 f860 	bl	ba414 <_Bfree>
   b9354:	e5dc      	b.n	b8f10 <_strtod_l+0x88>
   b9356:	4b36      	ldr	r3, [pc, #216]	; (b9430 <_strtod_l+0x5a8>)
   b9358:	9304      	str	r3, [sp, #16]
   b935a:	2300      	movs	r3, #0
   b935c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9360:	4650      	mov	r0, sl
   b9362:	4659      	mov	r1, fp
   b9364:	4699      	mov	r9, r3
   b9366:	f1b8 0f01 	cmp.w	r8, #1
   b936a:	dc21      	bgt.n	b93b0 <_strtod_l+0x528>
   b936c:	b10b      	cbz	r3, b9372 <_strtod_l+0x4ea>
   b936e:	4682      	mov	sl, r0
   b9370:	468b      	mov	fp, r1
   b9372:	4b2f      	ldr	r3, [pc, #188]	; (b9430 <_strtod_l+0x5a8>)
   b9374:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9378:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b937c:	4652      	mov	r2, sl
   b937e:	465b      	mov	r3, fp
   b9380:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9384:	f7ff f92c 	bl	b85e0 <__aeabi_dmul>
   b9388:	4b2a      	ldr	r3, [pc, #168]	; (b9434 <_strtod_l+0x5ac>)
   b938a:	460a      	mov	r2, r1
   b938c:	400b      	ands	r3, r1
   b938e:	492a      	ldr	r1, [pc, #168]	; (b9438 <_strtod_l+0x5b0>)
   b9390:	428b      	cmp	r3, r1
   b9392:	4682      	mov	sl, r0
   b9394:	d8bc      	bhi.n	b9310 <_strtod_l+0x488>
   b9396:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b939a:	428b      	cmp	r3, r1
   b939c:	bf86      	itte	hi
   b939e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b943c <_strtod_l+0x5b4>
   b93a2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b93a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b93aa:	2300      	movs	r3, #0
   b93ac:	9304      	str	r3, [sp, #16]
   b93ae:	e084      	b.n	b94ba <_strtod_l+0x632>
   b93b0:	f018 0f01 	tst.w	r8, #1
   b93b4:	d005      	beq.n	b93c2 <_strtod_l+0x53a>
   b93b6:	9b04      	ldr	r3, [sp, #16]
   b93b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b93bc:	f7ff f910 	bl	b85e0 <__aeabi_dmul>
   b93c0:	2301      	movs	r3, #1
   b93c2:	9a04      	ldr	r2, [sp, #16]
   b93c4:	3208      	adds	r2, #8
   b93c6:	f109 0901 	add.w	r9, r9, #1
   b93ca:	ea4f 0868 	mov.w	r8, r8, asr #1
   b93ce:	9204      	str	r2, [sp, #16]
   b93d0:	e7c9      	b.n	b9366 <_strtod_l+0x4de>
   b93d2:	d0ea      	beq.n	b93aa <_strtod_l+0x522>
   b93d4:	f1c8 0800 	rsb	r8, r8, #0
   b93d8:	f018 020f 	ands.w	r2, r8, #15
   b93dc:	d00a      	beq.n	b93f4 <_strtod_l+0x56c>
   b93de:	4b13      	ldr	r3, [pc, #76]	; (b942c <_strtod_l+0x5a4>)
   b93e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b93e4:	4650      	mov	r0, sl
   b93e6:	4659      	mov	r1, fp
   b93e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b93ec:	f7ff fa22 	bl	b8834 <__aeabi_ddiv>
   b93f0:	4682      	mov	sl, r0
   b93f2:	468b      	mov	fp, r1
   b93f4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b93f8:	d0d7      	beq.n	b93aa <_strtod_l+0x522>
   b93fa:	f1b8 0f1f 	cmp.w	r8, #31
   b93fe:	dd1f      	ble.n	b9440 <_strtod_l+0x5b8>
   b9400:	2500      	movs	r5, #0
   b9402:	462e      	mov	r6, r5
   b9404:	9507      	str	r5, [sp, #28]
   b9406:	9505      	str	r5, [sp, #20]
   b9408:	2322      	movs	r3, #34	; 0x22
   b940a:	f04f 0a00 	mov.w	sl, #0
   b940e:	f04f 0b00 	mov.w	fp, #0
   b9412:	6023      	str	r3, [r4, #0]
   b9414:	e786      	b.n	b9324 <_strtod_l+0x49c>
   b9416:	bf00      	nop
   b9418:	000bb834 	.word	0x000bb834
   b941c:	000bb84c 	.word	0x000bb84c
   b9420:	000bb82b 	.word	0x000bb82b
   b9424:	000bb82e 	.word	0x000bb82e
   b9428:	000bb728 	.word	0x000bb728
   b942c:	000bba98 	.word	0x000bba98
   b9430:	000bba70 	.word	0x000bba70
   b9434:	7ff00000 	.word	0x7ff00000
   b9438:	7ca00000 	.word	0x7ca00000
   b943c:	7fefffff 	.word	0x7fefffff
   b9440:	f018 0310 	ands.w	r3, r8, #16
   b9444:	bf18      	it	ne
   b9446:	236a      	movne	r3, #106	; 0x6a
   b9448:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b97f8 <_strtod_l+0x970>
   b944c:	9304      	str	r3, [sp, #16]
   b944e:	4650      	mov	r0, sl
   b9450:	4659      	mov	r1, fp
   b9452:	2300      	movs	r3, #0
   b9454:	f018 0f01 	tst.w	r8, #1
   b9458:	d004      	beq.n	b9464 <_strtod_l+0x5dc>
   b945a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b945e:	f7ff f8bf 	bl	b85e0 <__aeabi_dmul>
   b9462:	2301      	movs	r3, #1
   b9464:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9468:	f109 0908 	add.w	r9, r9, #8
   b946c:	d1f2      	bne.n	b9454 <_strtod_l+0x5cc>
   b946e:	b10b      	cbz	r3, b9474 <_strtod_l+0x5ec>
   b9470:	4682      	mov	sl, r0
   b9472:	468b      	mov	fp, r1
   b9474:	9b04      	ldr	r3, [sp, #16]
   b9476:	b1c3      	cbz	r3, b94aa <_strtod_l+0x622>
   b9478:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b947c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9480:	2b00      	cmp	r3, #0
   b9482:	4659      	mov	r1, fp
   b9484:	dd11      	ble.n	b94aa <_strtod_l+0x622>
   b9486:	2b1f      	cmp	r3, #31
   b9488:	f340 8124 	ble.w	b96d4 <_strtod_l+0x84c>
   b948c:	2b34      	cmp	r3, #52	; 0x34
   b948e:	bfde      	ittt	le
   b9490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9494:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b9498:	fa03 f202 	lslle.w	r2, r3, r2
   b949c:	f04f 0a00 	mov.w	sl, #0
   b94a0:	bfcc      	ite	gt
   b94a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b94a6:	ea02 0b01 	andle.w	fp, r2, r1
   b94aa:	2200      	movs	r2, #0
   b94ac:	2300      	movs	r3, #0
   b94ae:	4650      	mov	r0, sl
   b94b0:	4659      	mov	r1, fp
   b94b2:	f7ff fafd 	bl	b8ab0 <__aeabi_dcmpeq>
   b94b6:	2800      	cmp	r0, #0
   b94b8:	d1a2      	bne.n	b9400 <_strtod_l+0x578>
   b94ba:	9b07      	ldr	r3, [sp, #28]
   b94bc:	9300      	str	r3, [sp, #0]
   b94be:	9908      	ldr	r1, [sp, #32]
   b94c0:	462b      	mov	r3, r5
   b94c2:	463a      	mov	r2, r7
   b94c4:	4620      	mov	r0, r4
   b94c6:	f001 f80d 	bl	ba4e4 <__s2b>
   b94ca:	9007      	str	r0, [sp, #28]
   b94cc:	2800      	cmp	r0, #0
   b94ce:	f43f af1f 	beq.w	b9310 <_strtod_l+0x488>
   b94d2:	9b05      	ldr	r3, [sp, #20]
   b94d4:	1b9e      	subs	r6, r3, r6
   b94d6:	9b06      	ldr	r3, [sp, #24]
   b94d8:	2b00      	cmp	r3, #0
   b94da:	bfb4      	ite	lt
   b94dc:	4633      	movlt	r3, r6
   b94de:	2300      	movge	r3, #0
   b94e0:	930c      	str	r3, [sp, #48]	; 0x30
   b94e2:	9b06      	ldr	r3, [sp, #24]
   b94e4:	2500      	movs	r5, #0
   b94e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b94ea:	9312      	str	r3, [sp, #72]	; 0x48
   b94ec:	462e      	mov	r6, r5
   b94ee:	9b07      	ldr	r3, [sp, #28]
   b94f0:	4620      	mov	r0, r4
   b94f2:	6859      	ldr	r1, [r3, #4]
   b94f4:	f000 ff4e 	bl	ba394 <_Balloc>
   b94f8:	9005      	str	r0, [sp, #20]
   b94fa:	2800      	cmp	r0, #0
   b94fc:	f43f af0c 	beq.w	b9318 <_strtod_l+0x490>
   b9500:	9b07      	ldr	r3, [sp, #28]
   b9502:	691a      	ldr	r2, [r3, #16]
   b9504:	3202      	adds	r2, #2
   b9506:	f103 010c 	add.w	r1, r3, #12
   b950a:	0092      	lsls	r2, r2, #2
   b950c:	300c      	adds	r0, #12
   b950e:	f7ff fbe1 	bl	b8cd4 <memcpy>
   b9512:	ec4b ab10 	vmov	d0, sl, fp
   b9516:	aa1a      	add	r2, sp, #104	; 0x68
   b9518:	a919      	add	r1, sp, #100	; 0x64
   b951a:	4620      	mov	r0, r4
   b951c:	f001 fb28 	bl	bab70 <__d2b>
   b9520:	ec4b ab18 	vmov	d8, sl, fp
   b9524:	9018      	str	r0, [sp, #96]	; 0x60
   b9526:	2800      	cmp	r0, #0
   b9528:	f43f aef6 	beq.w	b9318 <_strtod_l+0x490>
   b952c:	2101      	movs	r1, #1
   b952e:	4620      	mov	r0, r4
   b9530:	f001 f872 	bl	ba618 <__i2b>
   b9534:	4606      	mov	r6, r0
   b9536:	2800      	cmp	r0, #0
   b9538:	f43f aeee 	beq.w	b9318 <_strtod_l+0x490>
   b953c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b953e:	9904      	ldr	r1, [sp, #16]
   b9540:	2b00      	cmp	r3, #0
   b9542:	bfab      	itete	ge
   b9544:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9546:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b954a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b954e:	bfac      	ite	ge
   b9550:	eb03 0902 	addge.w	r9, r3, r2
   b9554:	1ad7      	sublt	r7, r2, r3
   b9556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9558:	eba3 0801 	sub.w	r8, r3, r1
   b955c:	4490      	add	r8, r2
   b955e:	4ba1      	ldr	r3, [pc, #644]	; (b97e4 <_strtod_l+0x95c>)
   b9560:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9564:	4598      	cmp	r8, r3
   b9566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b956a:	f280 80c7 	bge.w	b96fc <_strtod_l+0x874>
   b956e:	eba3 0308 	sub.w	r3, r3, r8
   b9572:	2b1f      	cmp	r3, #31
   b9574:	eba2 0203 	sub.w	r2, r2, r3
   b9578:	f04f 0101 	mov.w	r1, #1
   b957c:	f300 80b1 	bgt.w	b96e2 <_strtod_l+0x85a>
   b9580:	fa01 f303 	lsl.w	r3, r1, r3
   b9584:	930d      	str	r3, [sp, #52]	; 0x34
   b9586:	2300      	movs	r3, #0
   b9588:	9308      	str	r3, [sp, #32]
   b958a:	eb09 0802 	add.w	r8, r9, r2
   b958e:	9b04      	ldr	r3, [sp, #16]
   b9590:	45c1      	cmp	r9, r8
   b9592:	4417      	add	r7, r2
   b9594:	441f      	add	r7, r3
   b9596:	464b      	mov	r3, r9
   b9598:	bfa8      	it	ge
   b959a:	4643      	movge	r3, r8
   b959c:	42bb      	cmp	r3, r7
   b959e:	bfa8      	it	ge
   b95a0:	463b      	movge	r3, r7
   b95a2:	2b00      	cmp	r3, #0
   b95a4:	bfc2      	ittt	gt
   b95a6:	eba8 0803 	subgt.w	r8, r8, r3
   b95aa:	1aff      	subgt	r7, r7, r3
   b95ac:	eba9 0903 	subgt.w	r9, r9, r3
   b95b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b95b2:	2b00      	cmp	r3, #0
   b95b4:	dd17      	ble.n	b95e6 <_strtod_l+0x75e>
   b95b6:	4631      	mov	r1, r6
   b95b8:	461a      	mov	r2, r3
   b95ba:	4620      	mov	r0, r4
   b95bc:	f001 f8ec 	bl	ba798 <__pow5mult>
   b95c0:	4606      	mov	r6, r0
   b95c2:	2800      	cmp	r0, #0
   b95c4:	f43f aea8 	beq.w	b9318 <_strtod_l+0x490>
   b95c8:	4601      	mov	r1, r0
   b95ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b95cc:	4620      	mov	r0, r4
   b95ce:	f001 f839 	bl	ba644 <__multiply>
   b95d2:	900b      	str	r0, [sp, #44]	; 0x2c
   b95d4:	2800      	cmp	r0, #0
   b95d6:	f43f ae9f 	beq.w	b9318 <_strtod_l+0x490>
   b95da:	9918      	ldr	r1, [sp, #96]	; 0x60
   b95dc:	4620      	mov	r0, r4
   b95de:	f000 ff19 	bl	ba414 <_Bfree>
   b95e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b95e4:	9318      	str	r3, [sp, #96]	; 0x60
   b95e6:	f1b8 0f00 	cmp.w	r8, #0
   b95ea:	f300 808c 	bgt.w	b9706 <_strtod_l+0x87e>
   b95ee:	9b06      	ldr	r3, [sp, #24]
   b95f0:	2b00      	cmp	r3, #0
   b95f2:	dd08      	ble.n	b9606 <_strtod_l+0x77e>
   b95f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b95f6:	9905      	ldr	r1, [sp, #20]
   b95f8:	4620      	mov	r0, r4
   b95fa:	f001 f8cd 	bl	ba798 <__pow5mult>
   b95fe:	9005      	str	r0, [sp, #20]
   b9600:	2800      	cmp	r0, #0
   b9602:	f43f ae89 	beq.w	b9318 <_strtod_l+0x490>
   b9606:	2f00      	cmp	r7, #0
   b9608:	dd08      	ble.n	b961c <_strtod_l+0x794>
   b960a:	9905      	ldr	r1, [sp, #20]
   b960c:	463a      	mov	r2, r7
   b960e:	4620      	mov	r0, r4
   b9610:	f001 f91c 	bl	ba84c <__lshift>
   b9614:	9005      	str	r0, [sp, #20]
   b9616:	2800      	cmp	r0, #0
   b9618:	f43f ae7e 	beq.w	b9318 <_strtod_l+0x490>
   b961c:	f1b9 0f00 	cmp.w	r9, #0
   b9620:	dd08      	ble.n	b9634 <_strtod_l+0x7ac>
   b9622:	4631      	mov	r1, r6
   b9624:	464a      	mov	r2, r9
   b9626:	4620      	mov	r0, r4
   b9628:	f001 f910 	bl	ba84c <__lshift>
   b962c:	4606      	mov	r6, r0
   b962e:	2800      	cmp	r0, #0
   b9630:	f43f ae72 	beq.w	b9318 <_strtod_l+0x490>
   b9634:	9a05      	ldr	r2, [sp, #20]
   b9636:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9638:	4620      	mov	r0, r4
   b963a:	f001 f993 	bl	ba964 <__mdiff>
   b963e:	4605      	mov	r5, r0
   b9640:	2800      	cmp	r0, #0
   b9642:	f43f ae69 	beq.w	b9318 <_strtod_l+0x490>
   b9646:	68c3      	ldr	r3, [r0, #12]
   b9648:	930b      	str	r3, [sp, #44]	; 0x2c
   b964a:	2300      	movs	r3, #0
   b964c:	60c3      	str	r3, [r0, #12]
   b964e:	4631      	mov	r1, r6
   b9650:	f001 f96c 	bl	ba92c <__mcmp>
   b9654:	2800      	cmp	r0, #0
   b9656:	da60      	bge.n	b971a <_strtod_l+0x892>
   b9658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b965a:	ea53 030a 	orrs.w	r3, r3, sl
   b965e:	f040 8082 	bne.w	b9766 <_strtod_l+0x8de>
   b9662:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9666:	2b00      	cmp	r3, #0
   b9668:	d17d      	bne.n	b9766 <_strtod_l+0x8de>
   b966a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b966e:	0d1b      	lsrs	r3, r3, #20
   b9670:	051b      	lsls	r3, r3, #20
   b9672:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9676:	d976      	bls.n	b9766 <_strtod_l+0x8de>
   b9678:	696b      	ldr	r3, [r5, #20]
   b967a:	b913      	cbnz	r3, b9682 <_strtod_l+0x7fa>
   b967c:	692b      	ldr	r3, [r5, #16]
   b967e:	2b01      	cmp	r3, #1
   b9680:	dd71      	ble.n	b9766 <_strtod_l+0x8de>
   b9682:	4629      	mov	r1, r5
   b9684:	2201      	movs	r2, #1
   b9686:	4620      	mov	r0, r4
   b9688:	f001 f8e0 	bl	ba84c <__lshift>
   b968c:	4631      	mov	r1, r6
   b968e:	4605      	mov	r5, r0
   b9690:	f001 f94c 	bl	ba92c <__mcmp>
   b9694:	2800      	cmp	r0, #0
   b9696:	dd66      	ble.n	b9766 <_strtod_l+0x8de>
   b9698:	9904      	ldr	r1, [sp, #16]
   b969a:	4a53      	ldr	r2, [pc, #332]	; (b97e8 <_strtod_l+0x960>)
   b969c:	465b      	mov	r3, fp
   b969e:	2900      	cmp	r1, #0
   b96a0:	f000 8081 	beq.w	b97a6 <_strtod_l+0x91e>
   b96a4:	ea02 010b 	and.w	r1, r2, fp
   b96a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b96ac:	dc7b      	bgt.n	b97a6 <_strtod_l+0x91e>
   b96ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b96b2:	f77f aea9 	ble.w	b9408 <_strtod_l+0x580>
   b96b6:	4b4d      	ldr	r3, [pc, #308]	; (b97ec <_strtod_l+0x964>)
   b96b8:	4650      	mov	r0, sl
   b96ba:	4659      	mov	r1, fp
   b96bc:	2200      	movs	r2, #0
   b96be:	f7fe ff8f 	bl	b85e0 <__aeabi_dmul>
   b96c2:	460b      	mov	r3, r1
   b96c4:	4303      	orrs	r3, r0
   b96c6:	bf08      	it	eq
   b96c8:	2322      	moveq	r3, #34	; 0x22
   b96ca:	4682      	mov	sl, r0
   b96cc:	468b      	mov	fp, r1
   b96ce:	bf08      	it	eq
   b96d0:	6023      	streq	r3, [r4, #0]
   b96d2:	e62b      	b.n	b932c <_strtod_l+0x4a4>
   b96d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b96d8:	fa02 f303 	lsl.w	r3, r2, r3
   b96dc:	ea03 0a0a 	and.w	sl, r3, sl
   b96e0:	e6e3      	b.n	b94aa <_strtod_l+0x622>
   b96e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b96e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b96ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b96ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b96f2:	fa01 f308 	lsl.w	r3, r1, r8
   b96f6:	9308      	str	r3, [sp, #32]
   b96f8:	910d      	str	r1, [sp, #52]	; 0x34
   b96fa:	e746      	b.n	b958a <_strtod_l+0x702>
   b96fc:	2300      	movs	r3, #0
   b96fe:	9308      	str	r3, [sp, #32]
   b9700:	2301      	movs	r3, #1
   b9702:	930d      	str	r3, [sp, #52]	; 0x34
   b9704:	e741      	b.n	b958a <_strtod_l+0x702>
   b9706:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9708:	4642      	mov	r2, r8
   b970a:	4620      	mov	r0, r4
   b970c:	f001 f89e 	bl	ba84c <__lshift>
   b9710:	9018      	str	r0, [sp, #96]	; 0x60
   b9712:	2800      	cmp	r0, #0
   b9714:	f47f af6b 	bne.w	b95ee <_strtod_l+0x766>
   b9718:	e5fe      	b.n	b9318 <_strtod_l+0x490>
   b971a:	465f      	mov	r7, fp
   b971c:	d16e      	bne.n	b97fc <_strtod_l+0x974>
   b971e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9720:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9724:	b342      	cbz	r2, b9778 <_strtod_l+0x8f0>
   b9726:	4a32      	ldr	r2, [pc, #200]	; (b97f0 <_strtod_l+0x968>)
   b9728:	4293      	cmp	r3, r2
   b972a:	d128      	bne.n	b977e <_strtod_l+0x8f6>
   b972c:	9b04      	ldr	r3, [sp, #16]
   b972e:	4651      	mov	r1, sl
   b9730:	b1eb      	cbz	r3, b976e <_strtod_l+0x8e6>
   b9732:	4b2d      	ldr	r3, [pc, #180]	; (b97e8 <_strtod_l+0x960>)
   b9734:	403b      	ands	r3, r7
   b9736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b973a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b973e:	d819      	bhi.n	b9774 <_strtod_l+0x8ec>
   b9740:	0d1b      	lsrs	r3, r3, #20
   b9742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9746:	fa02 f303 	lsl.w	r3, r2, r3
   b974a:	4299      	cmp	r1, r3
   b974c:	d117      	bne.n	b977e <_strtod_l+0x8f6>
   b974e:	4b29      	ldr	r3, [pc, #164]	; (b97f4 <_strtod_l+0x96c>)
   b9750:	429f      	cmp	r7, r3
   b9752:	d102      	bne.n	b975a <_strtod_l+0x8d2>
   b9754:	3101      	adds	r1, #1
   b9756:	f43f addf 	beq.w	b9318 <_strtod_l+0x490>
   b975a:	4b23      	ldr	r3, [pc, #140]	; (b97e8 <_strtod_l+0x960>)
   b975c:	403b      	ands	r3, r7
   b975e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9762:	f04f 0a00 	mov.w	sl, #0
   b9766:	9b04      	ldr	r3, [sp, #16]
   b9768:	2b00      	cmp	r3, #0
   b976a:	d1a4      	bne.n	b96b6 <_strtod_l+0x82e>
   b976c:	e5de      	b.n	b932c <_strtod_l+0x4a4>
   b976e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9772:	e7ea      	b.n	b974a <_strtod_l+0x8c2>
   b9774:	4613      	mov	r3, r2
   b9776:	e7e8      	b.n	b974a <_strtod_l+0x8c2>
   b9778:	ea53 030a 	orrs.w	r3, r3, sl
   b977c:	d08c      	beq.n	b9698 <_strtod_l+0x810>
   b977e:	9b08      	ldr	r3, [sp, #32]
   b9780:	b1db      	cbz	r3, b97ba <_strtod_l+0x932>
   b9782:	423b      	tst	r3, r7
   b9784:	d0ef      	beq.n	b9766 <_strtod_l+0x8de>
   b9786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9788:	9a04      	ldr	r2, [sp, #16]
   b978a:	4650      	mov	r0, sl
   b978c:	4659      	mov	r1, fp
   b978e:	b1c3      	cbz	r3, b97c2 <_strtod_l+0x93a>
   b9790:	f7ff fb5c 	bl	b8e4c <sulp>
   b9794:	4602      	mov	r2, r0
   b9796:	460b      	mov	r3, r1
   b9798:	ec51 0b18 	vmov	r0, r1, d8
   b979c:	f7fe fd6a 	bl	b8274 <__adddf3>
   b97a0:	4682      	mov	sl, r0
   b97a2:	468b      	mov	fp, r1
   b97a4:	e7df      	b.n	b9766 <_strtod_l+0x8de>
   b97a6:	4013      	ands	r3, r2
   b97a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b97ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b97b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b97b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b97b8:	e7d5      	b.n	b9766 <_strtod_l+0x8de>
   b97ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b97bc:	ea13 0f0a 	tst.w	r3, sl
   b97c0:	e7e0      	b.n	b9784 <_strtod_l+0x8fc>
   b97c2:	f7ff fb43 	bl	b8e4c <sulp>
   b97c6:	4602      	mov	r2, r0
   b97c8:	460b      	mov	r3, r1
   b97ca:	ec51 0b18 	vmov	r0, r1, d8
   b97ce:	f7fe fd4f 	bl	b8270 <__aeabi_dsub>
   b97d2:	2200      	movs	r2, #0
   b97d4:	2300      	movs	r3, #0
   b97d6:	4682      	mov	sl, r0
   b97d8:	468b      	mov	fp, r1
   b97da:	f7ff f969 	bl	b8ab0 <__aeabi_dcmpeq>
   b97de:	2800      	cmp	r0, #0
   b97e0:	d0c1      	beq.n	b9766 <_strtod_l+0x8de>
   b97e2:	e611      	b.n	b9408 <_strtod_l+0x580>
   b97e4:	fffffc02 	.word	0xfffffc02
   b97e8:	7ff00000 	.word	0x7ff00000
   b97ec:	39500000 	.word	0x39500000
   b97f0:	000fffff 	.word	0x000fffff
   b97f4:	7fefffff 	.word	0x7fefffff
   b97f8:	000bb860 	.word	0x000bb860
   b97fc:	4631      	mov	r1, r6
   b97fe:	4628      	mov	r0, r5
   b9800:	f001 fa12 	bl	bac28 <__ratio>
   b9804:	ec59 8b10 	vmov	r8, r9, d0
   b9808:	ee10 0a10 	vmov	r0, s0
   b980c:	2200      	movs	r2, #0
   b980e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9812:	4649      	mov	r1, r9
   b9814:	f7ff f960 	bl	b8ad8 <__aeabi_dcmple>
   b9818:	2800      	cmp	r0, #0
   b981a:	d07a      	beq.n	b9912 <_strtod_l+0xa8a>
   b981c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b981e:	2b00      	cmp	r3, #0
   b9820:	d04a      	beq.n	b98b8 <_strtod_l+0xa30>
   b9822:	4b95      	ldr	r3, [pc, #596]	; (b9a78 <_strtod_l+0xbf0>)
   b9824:	2200      	movs	r2, #0
   b9826:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b982a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9a78 <_strtod_l+0xbf0>
   b982e:	f04f 0800 	mov.w	r8, #0
   b9832:	4b92      	ldr	r3, [pc, #584]	; (b9a7c <_strtod_l+0xbf4>)
   b9834:	403b      	ands	r3, r7
   b9836:	930d      	str	r3, [sp, #52]	; 0x34
   b9838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b983a:	4b91      	ldr	r3, [pc, #580]	; (b9a80 <_strtod_l+0xbf8>)
   b983c:	429a      	cmp	r2, r3
   b983e:	f040 80b0 	bne.w	b99a2 <_strtod_l+0xb1a>
   b9842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9846:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b984a:	ec4b ab10 	vmov	d0, sl, fp
   b984e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9852:	f001 f911 	bl	baa78 <__ulp>
   b9856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b985a:	ec53 2b10 	vmov	r2, r3, d0
   b985e:	f7fe febf 	bl	b85e0 <__aeabi_dmul>
   b9862:	4652      	mov	r2, sl
   b9864:	465b      	mov	r3, fp
   b9866:	f7fe fd05 	bl	b8274 <__adddf3>
   b986a:	460b      	mov	r3, r1
   b986c:	4983      	ldr	r1, [pc, #524]	; (b9a7c <_strtod_l+0xbf4>)
   b986e:	4a85      	ldr	r2, [pc, #532]	; (b9a84 <_strtod_l+0xbfc>)
   b9870:	4019      	ands	r1, r3
   b9872:	4291      	cmp	r1, r2
   b9874:	4682      	mov	sl, r0
   b9876:	d960      	bls.n	b993a <_strtod_l+0xab2>
   b9878:	ee18 3a90 	vmov	r3, s17
   b987c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9880:	4293      	cmp	r3, r2
   b9882:	d104      	bne.n	b988e <_strtod_l+0xa06>
   b9884:	ee18 3a10 	vmov	r3, s16
   b9888:	3301      	adds	r3, #1
   b988a:	f43f ad45 	beq.w	b9318 <_strtod_l+0x490>
   b988e:	f8df b200 	ldr.w	fp, [pc, #512]	; b9a90 <_strtod_l+0xc08>
   b9892:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9896:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9898:	4620      	mov	r0, r4
   b989a:	f000 fdbb 	bl	ba414 <_Bfree>
   b989e:	9905      	ldr	r1, [sp, #20]
   b98a0:	4620      	mov	r0, r4
   b98a2:	f000 fdb7 	bl	ba414 <_Bfree>
   b98a6:	4631      	mov	r1, r6
   b98a8:	4620      	mov	r0, r4
   b98aa:	f000 fdb3 	bl	ba414 <_Bfree>
   b98ae:	4629      	mov	r1, r5
   b98b0:	4620      	mov	r0, r4
   b98b2:	f000 fdaf 	bl	ba414 <_Bfree>
   b98b6:	e61a      	b.n	b94ee <_strtod_l+0x666>
   b98b8:	f1ba 0f00 	cmp.w	sl, #0
   b98bc:	d11b      	bne.n	b98f6 <_strtod_l+0xa6e>
   b98be:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b98c2:	b9f3      	cbnz	r3, b9902 <_strtod_l+0xa7a>
   b98c4:	4b6c      	ldr	r3, [pc, #432]	; (b9a78 <_strtod_l+0xbf0>)
   b98c6:	2200      	movs	r2, #0
   b98c8:	4640      	mov	r0, r8
   b98ca:	4649      	mov	r1, r9
   b98cc:	f7ff f8fa 	bl	b8ac4 <__aeabi_dcmplt>
   b98d0:	b9d0      	cbnz	r0, b9908 <_strtod_l+0xa80>
   b98d2:	4640      	mov	r0, r8
   b98d4:	4649      	mov	r1, r9
   b98d6:	4b6c      	ldr	r3, [pc, #432]	; (b9a88 <_strtod_l+0xc00>)
   b98d8:	2200      	movs	r2, #0
   b98da:	f7fe fe81 	bl	b85e0 <__aeabi_dmul>
   b98de:	4680      	mov	r8, r0
   b98e0:	4689      	mov	r9, r1
   b98e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b98e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b98ea:	9315      	str	r3, [sp, #84]	; 0x54
   b98ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b98f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b98f4:	e79d      	b.n	b9832 <_strtod_l+0x9aa>
   b98f6:	f1ba 0f01 	cmp.w	sl, #1
   b98fa:	d102      	bne.n	b9902 <_strtod_l+0xa7a>
   b98fc:	2f00      	cmp	r7, #0
   b98fe:	f43f ad83 	beq.w	b9408 <_strtod_l+0x580>
   b9902:	4b62      	ldr	r3, [pc, #392]	; (b9a8c <_strtod_l+0xc04>)
   b9904:	2200      	movs	r2, #0
   b9906:	e78e      	b.n	b9826 <_strtod_l+0x99e>
   b9908:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9a88 <_strtod_l+0xc00>
   b990c:	f04f 0800 	mov.w	r8, #0
   b9910:	e7e7      	b.n	b98e2 <_strtod_l+0xa5a>
   b9912:	4b5d      	ldr	r3, [pc, #372]	; (b9a88 <_strtod_l+0xc00>)
   b9914:	4640      	mov	r0, r8
   b9916:	4649      	mov	r1, r9
   b9918:	2200      	movs	r2, #0
   b991a:	f7fe fe61 	bl	b85e0 <__aeabi_dmul>
   b991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9920:	4680      	mov	r8, r0
   b9922:	4689      	mov	r9, r1
   b9924:	b933      	cbnz	r3, b9934 <_strtod_l+0xaac>
   b9926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b992a:	900e      	str	r0, [sp, #56]	; 0x38
   b992c:	930f      	str	r3, [sp, #60]	; 0x3c
   b992e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9932:	e7dd      	b.n	b98f0 <_strtod_l+0xa68>
   b9934:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9938:	e7f9      	b.n	b992e <_strtod_l+0xaa6>
   b993a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b993e:	9b04      	ldr	r3, [sp, #16]
   b9940:	2b00      	cmp	r3, #0
   b9942:	d1a8      	bne.n	b9896 <_strtod_l+0xa0e>
   b9944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b994a:	0d1b      	lsrs	r3, r3, #20
   b994c:	051b      	lsls	r3, r3, #20
   b994e:	429a      	cmp	r2, r3
   b9950:	d1a1      	bne.n	b9896 <_strtod_l+0xa0e>
   b9952:	4640      	mov	r0, r8
   b9954:	4649      	mov	r1, r9
   b9956:	f001 fa05 	bl	bad64 <__aeabi_d2lz>
   b995a:	f7fe fe13 	bl	b8584 <__aeabi_l2d>
   b995e:	4602      	mov	r2, r0
   b9960:	460b      	mov	r3, r1
   b9962:	4640      	mov	r0, r8
   b9964:	4649      	mov	r1, r9
   b9966:	f7fe fc83 	bl	b8270 <__aeabi_dsub>
   b996a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b996c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9970:	ea43 030a 	orr.w	r3, r3, sl
   b9974:	4313      	orrs	r3, r2
   b9976:	4680      	mov	r8, r0
   b9978:	4689      	mov	r9, r1
   b997a:	d055      	beq.n	b9a28 <_strtod_l+0xba0>
   b997c:	a336      	add	r3, pc, #216	; (adr r3, b9a58 <_strtod_l+0xbd0>)
   b997e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9982:	f7ff f89f 	bl	b8ac4 <__aeabi_dcmplt>
   b9986:	2800      	cmp	r0, #0
   b9988:	f47f acd0 	bne.w	b932c <_strtod_l+0x4a4>
   b998c:	a334      	add	r3, pc, #208	; (adr r3, b9a60 <_strtod_l+0xbd8>)
   b998e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9992:	4640      	mov	r0, r8
   b9994:	4649      	mov	r1, r9
   b9996:	f7ff f8b3 	bl	b8b00 <__aeabi_dcmpgt>
   b999a:	2800      	cmp	r0, #0
   b999c:	f43f af7b 	beq.w	b9896 <_strtod_l+0xa0e>
   b99a0:	e4c4      	b.n	b932c <_strtod_l+0x4a4>
   b99a2:	9b04      	ldr	r3, [sp, #16]
   b99a4:	b333      	cbz	r3, b99f4 <_strtod_l+0xb6c>
   b99a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b99a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b99ac:	d822      	bhi.n	b99f4 <_strtod_l+0xb6c>
   b99ae:	a32e      	add	r3, pc, #184	; (adr r3, b9a68 <_strtod_l+0xbe0>)
   b99b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b99b4:	4640      	mov	r0, r8
   b99b6:	4649      	mov	r1, r9
   b99b8:	f7ff f88e 	bl	b8ad8 <__aeabi_dcmple>
   b99bc:	b1a0      	cbz	r0, b99e8 <_strtod_l+0xb60>
   b99be:	4649      	mov	r1, r9
   b99c0:	4640      	mov	r0, r8
   b99c2:	f7ff f8a7 	bl	b8b14 <__aeabi_d2uiz>
   b99c6:	2801      	cmp	r0, #1
   b99c8:	bf38      	it	cc
   b99ca:	2001      	movcc	r0, #1
   b99cc:	f7fe fd8e 	bl	b84ec <__aeabi_ui2d>
   b99d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b99d2:	4680      	mov	r8, r0
   b99d4:	4689      	mov	r9, r1
   b99d6:	bb23      	cbnz	r3, b9a22 <_strtod_l+0xb9a>
   b99d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b99dc:	9010      	str	r0, [sp, #64]	; 0x40
   b99de:	9311      	str	r3, [sp, #68]	; 0x44
   b99e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b99e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b99e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b99ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b99ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b99f0:	1a9b      	subs	r3, r3, r2
   b99f2:	9309      	str	r3, [sp, #36]	; 0x24
   b99f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b99f8:	eeb0 0a48 	vmov.f32	s0, s16
   b99fc:	eef0 0a68 	vmov.f32	s1, s17
   b9a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9a04:	f001 f838 	bl	baa78 <__ulp>
   b9a08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9a0c:	ec53 2b10 	vmov	r2, r3, d0
   b9a10:	f7fe fde6 	bl	b85e0 <__aeabi_dmul>
   b9a14:	ec53 2b18 	vmov	r2, r3, d8
   b9a18:	f7fe fc2c 	bl	b8274 <__adddf3>
   b9a1c:	4682      	mov	sl, r0
   b9a1e:	468b      	mov	fp, r1
   b9a20:	e78d      	b.n	b993e <_strtod_l+0xab6>
   b9a22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9a26:	e7db      	b.n	b99e0 <_strtod_l+0xb58>
   b9a28:	a311      	add	r3, pc, #68	; (adr r3, b9a70 <_strtod_l+0xbe8>)
   b9a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a2e:	f7ff f849 	bl	b8ac4 <__aeabi_dcmplt>
   b9a32:	e7b2      	b.n	b999a <_strtod_l+0xb12>
   b9a34:	2300      	movs	r3, #0
   b9a36:	930a      	str	r3, [sp, #40]	; 0x28
   b9a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a3c:	6013      	str	r3, [r2, #0]
   b9a3e:	f7ff ba6b 	b.w	b8f18 <_strtod_l+0x90>
   b9a42:	2a65      	cmp	r2, #101	; 0x65
   b9a44:	f43f ab5f 	beq.w	b9106 <_strtod_l+0x27e>
   b9a48:	2a45      	cmp	r2, #69	; 0x45
   b9a4a:	f43f ab5c 	beq.w	b9106 <_strtod_l+0x27e>
   b9a4e:	2301      	movs	r3, #1
   b9a50:	f7ff bb94 	b.w	b917c <_strtod_l+0x2f4>
   b9a54:	f3af 8000 	nop.w
   b9a58:	94a03595 	.word	0x94a03595
   b9a5c:	3fdfffff 	.word	0x3fdfffff
   b9a60:	35afe535 	.word	0x35afe535
   b9a64:	3fe00000 	.word	0x3fe00000
   b9a68:	ffc00000 	.word	0xffc00000
   b9a6c:	41dfffff 	.word	0x41dfffff
   b9a70:	94a03595 	.word	0x94a03595
   b9a74:	3fcfffff 	.word	0x3fcfffff
   b9a78:	3ff00000 	.word	0x3ff00000
   b9a7c:	7ff00000 	.word	0x7ff00000
   b9a80:	7fe00000 	.word	0x7fe00000
   b9a84:	7c9fffff 	.word	0x7c9fffff
   b9a88:	3fe00000 	.word	0x3fe00000
   b9a8c:	bff00000 	.word	0xbff00000
   b9a90:	7fefffff 	.word	0x7fefffff

000b9a94 <strtod>:
   b9a94:	460a      	mov	r2, r1
   b9a96:	4601      	mov	r1, r0
   b9a98:	4802      	ldr	r0, [pc, #8]	; (b9aa4 <strtod+0x10>)
   b9a9a:	4b03      	ldr	r3, [pc, #12]	; (b9aa8 <strtod+0x14>)
   b9a9c:	6800      	ldr	r0, [r0, #0]
   b9a9e:	f7ff b9f3 	b.w	b8e88 <_strtod_l>
   b9aa2:	bf00      	nop
   b9aa4:	2003e2cc 	.word	0x2003e2cc
   b9aa8:	2003e338 	.word	0x2003e338

000b9aac <_strtol_l.constprop.0>:
   b9aac:	2b01      	cmp	r3, #1
   b9aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ab2:	d001      	beq.n	b9ab8 <_strtol_l.constprop.0+0xc>
   b9ab4:	2b24      	cmp	r3, #36	; 0x24
   b9ab6:	d906      	bls.n	b9ac6 <_strtol_l.constprop.0+0x1a>
   b9ab8:	f7fd f8d2 	bl	b6c60 <__errno>
   b9abc:	2316      	movs	r3, #22
   b9abe:	6003      	str	r3, [r0, #0]
   b9ac0:	2000      	movs	r0, #0
   b9ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9ac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9bac <_strtol_l.constprop.0+0x100>
   b9aca:	460d      	mov	r5, r1
   b9acc:	462e      	mov	r6, r5
   b9ace:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9ad2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9ad6:	f017 0708 	ands.w	r7, r7, #8
   b9ada:	d1f7      	bne.n	b9acc <_strtol_l.constprop.0+0x20>
   b9adc:	2c2d      	cmp	r4, #45	; 0x2d
   b9ade:	d132      	bne.n	b9b46 <_strtol_l.constprop.0+0x9a>
   b9ae0:	782c      	ldrb	r4, [r5, #0]
   b9ae2:	2701      	movs	r7, #1
   b9ae4:	1cb5      	adds	r5, r6, #2
   b9ae6:	2b00      	cmp	r3, #0
   b9ae8:	d05b      	beq.n	b9ba2 <_strtol_l.constprop.0+0xf6>
   b9aea:	2b10      	cmp	r3, #16
   b9aec:	d109      	bne.n	b9b02 <_strtol_l.constprop.0+0x56>
   b9aee:	2c30      	cmp	r4, #48	; 0x30
   b9af0:	d107      	bne.n	b9b02 <_strtol_l.constprop.0+0x56>
   b9af2:	782c      	ldrb	r4, [r5, #0]
   b9af4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9af8:	2c58      	cmp	r4, #88	; 0x58
   b9afa:	d14d      	bne.n	b9b98 <_strtol_l.constprop.0+0xec>
   b9afc:	786c      	ldrb	r4, [r5, #1]
   b9afe:	2310      	movs	r3, #16
   b9b00:	3502      	adds	r5, #2
   b9b02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9b06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9b0a:	f04f 0c00 	mov.w	ip, #0
   b9b0e:	fbb8 f9f3 	udiv	r9, r8, r3
   b9b12:	4666      	mov	r6, ip
   b9b14:	fb03 8a19 	mls	sl, r3, r9, r8
   b9b18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9b1c:	f1be 0f09 	cmp.w	lr, #9
   b9b20:	d816      	bhi.n	b9b50 <_strtol_l.constprop.0+0xa4>
   b9b22:	4674      	mov	r4, lr
   b9b24:	42a3      	cmp	r3, r4
   b9b26:	dd24      	ble.n	b9b72 <_strtol_l.constprop.0+0xc6>
   b9b28:	f1bc 0f00 	cmp.w	ip, #0
   b9b2c:	db1e      	blt.n	b9b6c <_strtol_l.constprop.0+0xc0>
   b9b2e:	45b1      	cmp	r9, r6
   b9b30:	d31c      	bcc.n	b9b6c <_strtol_l.constprop.0+0xc0>
   b9b32:	d101      	bne.n	b9b38 <_strtol_l.constprop.0+0x8c>
   b9b34:	45a2      	cmp	sl, r4
   b9b36:	db19      	blt.n	b9b6c <_strtol_l.constprop.0+0xc0>
   b9b38:	fb06 4603 	mla	r6, r6, r3, r4
   b9b3c:	f04f 0c01 	mov.w	ip, #1
   b9b40:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9b44:	e7e8      	b.n	b9b18 <_strtol_l.constprop.0+0x6c>
   b9b46:	2c2b      	cmp	r4, #43	; 0x2b
   b9b48:	bf04      	itt	eq
   b9b4a:	782c      	ldrbeq	r4, [r5, #0]
   b9b4c:	1cb5      	addeq	r5, r6, #2
   b9b4e:	e7ca      	b.n	b9ae6 <_strtol_l.constprop.0+0x3a>
   b9b50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9b54:	f1be 0f19 	cmp.w	lr, #25
   b9b58:	d801      	bhi.n	b9b5e <_strtol_l.constprop.0+0xb2>
   b9b5a:	3c37      	subs	r4, #55	; 0x37
   b9b5c:	e7e2      	b.n	b9b24 <_strtol_l.constprop.0+0x78>
   b9b5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9b62:	f1be 0f19 	cmp.w	lr, #25
   b9b66:	d804      	bhi.n	b9b72 <_strtol_l.constprop.0+0xc6>
   b9b68:	3c57      	subs	r4, #87	; 0x57
   b9b6a:	e7db      	b.n	b9b24 <_strtol_l.constprop.0+0x78>
   b9b6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9b70:	e7e6      	b.n	b9b40 <_strtol_l.constprop.0+0x94>
   b9b72:	f1bc 0f00 	cmp.w	ip, #0
   b9b76:	da05      	bge.n	b9b84 <_strtol_l.constprop.0+0xd8>
   b9b78:	2322      	movs	r3, #34	; 0x22
   b9b7a:	6003      	str	r3, [r0, #0]
   b9b7c:	4646      	mov	r6, r8
   b9b7e:	b942      	cbnz	r2, b9b92 <_strtol_l.constprop.0+0xe6>
   b9b80:	4630      	mov	r0, r6
   b9b82:	e79e      	b.n	b9ac2 <_strtol_l.constprop.0+0x16>
   b9b84:	b107      	cbz	r7, b9b88 <_strtol_l.constprop.0+0xdc>
   b9b86:	4276      	negs	r6, r6
   b9b88:	2a00      	cmp	r2, #0
   b9b8a:	d0f9      	beq.n	b9b80 <_strtol_l.constprop.0+0xd4>
   b9b8c:	f1bc 0f00 	cmp.w	ip, #0
   b9b90:	d000      	beq.n	b9b94 <_strtol_l.constprop.0+0xe8>
   b9b92:	1e69      	subs	r1, r5, #1
   b9b94:	6011      	str	r1, [r2, #0]
   b9b96:	e7f3      	b.n	b9b80 <_strtol_l.constprop.0+0xd4>
   b9b98:	2430      	movs	r4, #48	; 0x30
   b9b9a:	2b00      	cmp	r3, #0
   b9b9c:	d1b1      	bne.n	b9b02 <_strtol_l.constprop.0+0x56>
   b9b9e:	2308      	movs	r3, #8
   b9ba0:	e7af      	b.n	b9b02 <_strtol_l.constprop.0+0x56>
   b9ba2:	2c30      	cmp	r4, #48	; 0x30
   b9ba4:	d0a5      	beq.n	b9af2 <_strtol_l.constprop.0+0x46>
   b9ba6:	230a      	movs	r3, #10
   b9ba8:	e7ab      	b.n	b9b02 <_strtol_l.constprop.0+0x56>
   b9baa:	bf00      	nop
   b9bac:	000bb889 	.word	0x000bb889

000b9bb0 <strtol>:
   b9bb0:	4613      	mov	r3, r2
   b9bb2:	460a      	mov	r2, r1
   b9bb4:	4601      	mov	r1, r0
   b9bb6:	4802      	ldr	r0, [pc, #8]	; (b9bc0 <strtol+0x10>)
   b9bb8:	6800      	ldr	r0, [r0, #0]
   b9bba:	f7ff bf77 	b.w	b9aac <_strtol_l.constprop.0>
   b9bbe:	bf00      	nop
   b9bc0:	2003e2cc 	.word	0x2003e2cc

000b9bc4 <__register_exitproc>:
   b9bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9bc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9c84 <__register_exitproc+0xc0>
   b9bcc:	4606      	mov	r6, r0
   b9bce:	f8d8 0000 	ldr.w	r0, [r8]
   b9bd2:	461f      	mov	r7, r3
   b9bd4:	460d      	mov	r5, r1
   b9bd6:	4691      	mov	r9, r2
   b9bd8:	f000 fbc6 	bl	ba368 <__retarget_lock_acquire_recursive>
   b9bdc:	4b25      	ldr	r3, [pc, #148]	; (b9c74 <__register_exitproc+0xb0>)
   b9bde:	681c      	ldr	r4, [r3, #0]
   b9be0:	b934      	cbnz	r4, b9bf0 <__register_exitproc+0x2c>
   b9be2:	4c25      	ldr	r4, [pc, #148]	; (b9c78 <__register_exitproc+0xb4>)
   b9be4:	601c      	str	r4, [r3, #0]
   b9be6:	4b25      	ldr	r3, [pc, #148]	; (b9c7c <__register_exitproc+0xb8>)
   b9be8:	b113      	cbz	r3, b9bf0 <__register_exitproc+0x2c>
   b9bea:	681b      	ldr	r3, [r3, #0]
   b9bec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9bf0:	6863      	ldr	r3, [r4, #4]
   b9bf2:	2b1f      	cmp	r3, #31
   b9bf4:	dd07      	ble.n	b9c06 <__register_exitproc+0x42>
   b9bf6:	f8d8 0000 	ldr.w	r0, [r8]
   b9bfa:	f000 fbb7 	bl	ba36c <__retarget_lock_release_recursive>
   b9bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9c06:	b34e      	cbz	r6, b9c5c <__register_exitproc+0x98>
   b9c08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9c0c:	b988      	cbnz	r0, b9c32 <__register_exitproc+0x6e>
   b9c0e:	4b1c      	ldr	r3, [pc, #112]	; (b9c80 <__register_exitproc+0xbc>)
   b9c10:	b923      	cbnz	r3, b9c1c <__register_exitproc+0x58>
   b9c12:	f8d8 0000 	ldr.w	r0, [r8]
   b9c16:	f000 fba8 	bl	ba36a <__retarget_lock_release>
   b9c1a:	e7f0      	b.n	b9bfe <__register_exitproc+0x3a>
   b9c1c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9c20:	f7fc ffe6 	bl	b6bf0 <malloc>
   b9c24:	2800      	cmp	r0, #0
   b9c26:	d0f4      	beq.n	b9c12 <__register_exitproc+0x4e>
   b9c28:	2300      	movs	r3, #0
   b9c2a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9c2e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9c32:	6863      	ldr	r3, [r4, #4]
   b9c34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9c38:	2201      	movs	r2, #1
   b9c3a:	409a      	lsls	r2, r3
   b9c3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9c40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9c44:	4313      	orrs	r3, r2
   b9c46:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9c4a:	2e02      	cmp	r6, #2
   b9c4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9c50:	bf02      	ittt	eq
   b9c52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9c56:	4313      	orreq	r3, r2
   b9c58:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9c5c:	6863      	ldr	r3, [r4, #4]
   b9c5e:	f8d8 0000 	ldr.w	r0, [r8]
   b9c62:	1c5a      	adds	r2, r3, #1
   b9c64:	3302      	adds	r3, #2
   b9c66:	6062      	str	r2, [r4, #4]
   b9c68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9c6c:	f000 fb7e 	bl	ba36c <__retarget_lock_release_recursive>
   b9c70:	2000      	movs	r0, #0
   b9c72:	e7c6      	b.n	b9c02 <__register_exitproc+0x3e>
   b9c74:	2003e7ec 	.word	0x2003e7ec
   b9c78:	2003e760 	.word	0x2003e760
   b9c7c:	00000000 	.word	0x00000000
   b9c80:	000b6bf1 	.word	0x000b6bf1
   b9c84:	2003e330 	.word	0x2003e330

000b9c88 <rshift>:
   b9c88:	6903      	ldr	r3, [r0, #16]
   b9c8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9c8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9c92:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9c96:	f100 0414 	add.w	r4, r0, #20
   b9c9a:	dd45      	ble.n	b9d28 <rshift+0xa0>
   b9c9c:	f011 011f 	ands.w	r1, r1, #31
   b9ca0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9ca4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9ca8:	d10c      	bne.n	b9cc4 <rshift+0x3c>
   b9caa:	f100 0710 	add.w	r7, r0, #16
   b9cae:	4629      	mov	r1, r5
   b9cb0:	42b1      	cmp	r1, r6
   b9cb2:	d334      	bcc.n	b9d1e <rshift+0x96>
   b9cb4:	1a9b      	subs	r3, r3, r2
   b9cb6:	009b      	lsls	r3, r3, #2
   b9cb8:	1eea      	subs	r2, r5, #3
   b9cba:	4296      	cmp	r6, r2
   b9cbc:	bf38      	it	cc
   b9cbe:	2300      	movcc	r3, #0
   b9cc0:	4423      	add	r3, r4
   b9cc2:	e015      	b.n	b9cf0 <rshift+0x68>
   b9cc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9cc8:	f1c1 0820 	rsb	r8, r1, #32
   b9ccc:	40cf      	lsrs	r7, r1
   b9cce:	f105 0e04 	add.w	lr, r5, #4
   b9cd2:	46a1      	mov	r9, r4
   b9cd4:	4576      	cmp	r6, lr
   b9cd6:	46f4      	mov	ip, lr
   b9cd8:	d815      	bhi.n	b9d06 <rshift+0x7e>
   b9cda:	1a9a      	subs	r2, r3, r2
   b9cdc:	0092      	lsls	r2, r2, #2
   b9cde:	3a04      	subs	r2, #4
   b9ce0:	3501      	adds	r5, #1
   b9ce2:	42ae      	cmp	r6, r5
   b9ce4:	bf38      	it	cc
   b9ce6:	2200      	movcc	r2, #0
   b9ce8:	18a3      	adds	r3, r4, r2
   b9cea:	50a7      	str	r7, [r4, r2]
   b9cec:	b107      	cbz	r7, b9cf0 <rshift+0x68>
   b9cee:	3304      	adds	r3, #4
   b9cf0:	1b1a      	subs	r2, r3, r4
   b9cf2:	42a3      	cmp	r3, r4
   b9cf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9cf8:	bf08      	it	eq
   b9cfa:	2300      	moveq	r3, #0
   b9cfc:	6102      	str	r2, [r0, #16]
   b9cfe:	bf08      	it	eq
   b9d00:	6143      	streq	r3, [r0, #20]
   b9d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9d06:	f8dc c000 	ldr.w	ip, [ip]
   b9d0a:	fa0c fc08 	lsl.w	ip, ip, r8
   b9d0e:	ea4c 0707 	orr.w	r7, ip, r7
   b9d12:	f849 7b04 	str.w	r7, [r9], #4
   b9d16:	f85e 7b04 	ldr.w	r7, [lr], #4
   b9d1a:	40cf      	lsrs	r7, r1
   b9d1c:	e7da      	b.n	b9cd4 <rshift+0x4c>
   b9d1e:	f851 cb04 	ldr.w	ip, [r1], #4
   b9d22:	f847 cf04 	str.w	ip, [r7, #4]!
   b9d26:	e7c3      	b.n	b9cb0 <rshift+0x28>
   b9d28:	4623      	mov	r3, r4
   b9d2a:	e7e1      	b.n	b9cf0 <rshift+0x68>

000b9d2c <__hexdig_fun>:
   b9d2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9d30:	2b09      	cmp	r3, #9
   b9d32:	d802      	bhi.n	b9d3a <__hexdig_fun+0xe>
   b9d34:	3820      	subs	r0, #32
   b9d36:	b2c0      	uxtb	r0, r0
   b9d38:	4770      	bx	lr
   b9d3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9d3e:	2b05      	cmp	r3, #5
   b9d40:	d801      	bhi.n	b9d46 <__hexdig_fun+0x1a>
   b9d42:	3847      	subs	r0, #71	; 0x47
   b9d44:	e7f7      	b.n	b9d36 <__hexdig_fun+0xa>
   b9d46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9d4a:	2b05      	cmp	r3, #5
   b9d4c:	d801      	bhi.n	b9d52 <__hexdig_fun+0x26>
   b9d4e:	3827      	subs	r0, #39	; 0x27
   b9d50:	e7f1      	b.n	b9d36 <__hexdig_fun+0xa>
   b9d52:	2000      	movs	r0, #0
   b9d54:	4770      	bx	lr
	...

000b9d58 <__gethex>:
   b9d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d5c:	ed2d 8b02 	vpush	{d8}
   b9d60:	b089      	sub	sp, #36	; 0x24
   b9d62:	ee08 0a10 	vmov	s16, r0
   b9d66:	9304      	str	r3, [sp, #16]
   b9d68:	4bb4      	ldr	r3, [pc, #720]	; (ba03c <__gethex+0x2e4>)
   b9d6a:	681b      	ldr	r3, [r3, #0]
   b9d6c:	9301      	str	r3, [sp, #4]
   b9d6e:	4618      	mov	r0, r3
   b9d70:	468b      	mov	fp, r1
   b9d72:	4690      	mov	r8, r2
   b9d74:	f7ff f83b 	bl	b8dee <strlen>
   b9d78:	9b01      	ldr	r3, [sp, #4]
   b9d7a:	f8db 2000 	ldr.w	r2, [fp]
   b9d7e:	4403      	add	r3, r0
   b9d80:	4682      	mov	sl, r0
   b9d82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9d86:	9305      	str	r3, [sp, #20]
   b9d88:	1c93      	adds	r3, r2, #2
   b9d8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9d8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9d92:	32fe      	adds	r2, #254	; 0xfe
   b9d94:	18d1      	adds	r1, r2, r3
   b9d96:	461f      	mov	r7, r3
   b9d98:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9d9c:	9100      	str	r1, [sp, #0]
   b9d9e:	2830      	cmp	r0, #48	; 0x30
   b9da0:	d0f8      	beq.n	b9d94 <__gethex+0x3c>
   b9da2:	f7ff ffc3 	bl	b9d2c <__hexdig_fun>
   b9da6:	4604      	mov	r4, r0
   b9da8:	2800      	cmp	r0, #0
   b9daa:	d13a      	bne.n	b9e22 <__gethex+0xca>
   b9dac:	9901      	ldr	r1, [sp, #4]
   b9dae:	4652      	mov	r2, sl
   b9db0:	4638      	mov	r0, r7
   b9db2:	f7ff f824 	bl	b8dfe <strncmp>
   b9db6:	4605      	mov	r5, r0
   b9db8:	2800      	cmp	r0, #0
   b9dba:	d168      	bne.n	b9e8e <__gethex+0x136>
   b9dbc:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9dc0:	eb07 060a 	add.w	r6, r7, sl
   b9dc4:	f7ff ffb2 	bl	b9d2c <__hexdig_fun>
   b9dc8:	2800      	cmp	r0, #0
   b9dca:	d062      	beq.n	b9e92 <__gethex+0x13a>
   b9dcc:	4633      	mov	r3, r6
   b9dce:	7818      	ldrb	r0, [r3, #0]
   b9dd0:	2830      	cmp	r0, #48	; 0x30
   b9dd2:	461f      	mov	r7, r3
   b9dd4:	f103 0301 	add.w	r3, r3, #1
   b9dd8:	d0f9      	beq.n	b9dce <__gethex+0x76>
   b9dda:	f7ff ffa7 	bl	b9d2c <__hexdig_fun>
   b9dde:	2301      	movs	r3, #1
   b9de0:	fab0 f480 	clz	r4, r0
   b9de4:	0964      	lsrs	r4, r4, #5
   b9de6:	4635      	mov	r5, r6
   b9de8:	9300      	str	r3, [sp, #0]
   b9dea:	463a      	mov	r2, r7
   b9dec:	4616      	mov	r6, r2
   b9dee:	3201      	adds	r2, #1
   b9df0:	7830      	ldrb	r0, [r6, #0]
   b9df2:	f7ff ff9b 	bl	b9d2c <__hexdig_fun>
   b9df6:	2800      	cmp	r0, #0
   b9df8:	d1f8      	bne.n	b9dec <__gethex+0x94>
   b9dfa:	9901      	ldr	r1, [sp, #4]
   b9dfc:	4652      	mov	r2, sl
   b9dfe:	4630      	mov	r0, r6
   b9e00:	f7fe fffd 	bl	b8dfe <strncmp>
   b9e04:	b980      	cbnz	r0, b9e28 <__gethex+0xd0>
   b9e06:	b94d      	cbnz	r5, b9e1c <__gethex+0xc4>
   b9e08:	eb06 050a 	add.w	r5, r6, sl
   b9e0c:	462a      	mov	r2, r5
   b9e0e:	4616      	mov	r6, r2
   b9e10:	3201      	adds	r2, #1
   b9e12:	7830      	ldrb	r0, [r6, #0]
   b9e14:	f7ff ff8a 	bl	b9d2c <__hexdig_fun>
   b9e18:	2800      	cmp	r0, #0
   b9e1a:	d1f8      	bne.n	b9e0e <__gethex+0xb6>
   b9e1c:	1bad      	subs	r5, r5, r6
   b9e1e:	00ad      	lsls	r5, r5, #2
   b9e20:	e004      	b.n	b9e2c <__gethex+0xd4>
   b9e22:	2400      	movs	r4, #0
   b9e24:	4625      	mov	r5, r4
   b9e26:	e7e0      	b.n	b9dea <__gethex+0x92>
   b9e28:	2d00      	cmp	r5, #0
   b9e2a:	d1f7      	bne.n	b9e1c <__gethex+0xc4>
   b9e2c:	7833      	ldrb	r3, [r6, #0]
   b9e2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9e32:	2b50      	cmp	r3, #80	; 0x50
   b9e34:	d13b      	bne.n	b9eae <__gethex+0x156>
   b9e36:	7873      	ldrb	r3, [r6, #1]
   b9e38:	2b2b      	cmp	r3, #43	; 0x2b
   b9e3a:	d02c      	beq.n	b9e96 <__gethex+0x13e>
   b9e3c:	2b2d      	cmp	r3, #45	; 0x2d
   b9e3e:	d02e      	beq.n	b9e9e <__gethex+0x146>
   b9e40:	1c71      	adds	r1, r6, #1
   b9e42:	f04f 0900 	mov.w	r9, #0
   b9e46:	7808      	ldrb	r0, [r1, #0]
   b9e48:	f7ff ff70 	bl	b9d2c <__hexdig_fun>
   b9e4c:	1e43      	subs	r3, r0, #1
   b9e4e:	b2db      	uxtb	r3, r3
   b9e50:	2b18      	cmp	r3, #24
   b9e52:	d82c      	bhi.n	b9eae <__gethex+0x156>
   b9e54:	f1a0 0210 	sub.w	r2, r0, #16
   b9e58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9e5c:	f7ff ff66 	bl	b9d2c <__hexdig_fun>
   b9e60:	1e43      	subs	r3, r0, #1
   b9e62:	b2db      	uxtb	r3, r3
   b9e64:	2b18      	cmp	r3, #24
   b9e66:	d91d      	bls.n	b9ea4 <__gethex+0x14c>
   b9e68:	f1b9 0f00 	cmp.w	r9, #0
   b9e6c:	d000      	beq.n	b9e70 <__gethex+0x118>
   b9e6e:	4252      	negs	r2, r2
   b9e70:	4415      	add	r5, r2
   b9e72:	f8cb 1000 	str.w	r1, [fp]
   b9e76:	b1e4      	cbz	r4, b9eb2 <__gethex+0x15a>
   b9e78:	9b00      	ldr	r3, [sp, #0]
   b9e7a:	2b00      	cmp	r3, #0
   b9e7c:	bf14      	ite	ne
   b9e7e:	2700      	movne	r7, #0
   b9e80:	2706      	moveq	r7, #6
   b9e82:	4638      	mov	r0, r7
   b9e84:	b009      	add	sp, #36	; 0x24
   b9e86:	ecbd 8b02 	vpop	{d8}
   b9e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9e8e:	463e      	mov	r6, r7
   b9e90:	4625      	mov	r5, r4
   b9e92:	2401      	movs	r4, #1
   b9e94:	e7ca      	b.n	b9e2c <__gethex+0xd4>
   b9e96:	f04f 0900 	mov.w	r9, #0
   b9e9a:	1cb1      	adds	r1, r6, #2
   b9e9c:	e7d3      	b.n	b9e46 <__gethex+0xee>
   b9e9e:	f04f 0901 	mov.w	r9, #1
   b9ea2:	e7fa      	b.n	b9e9a <__gethex+0x142>
   b9ea4:	230a      	movs	r3, #10
   b9ea6:	fb03 0202 	mla	r2, r3, r2, r0
   b9eaa:	3a10      	subs	r2, #16
   b9eac:	e7d4      	b.n	b9e58 <__gethex+0x100>
   b9eae:	4631      	mov	r1, r6
   b9eb0:	e7df      	b.n	b9e72 <__gethex+0x11a>
   b9eb2:	1bf3      	subs	r3, r6, r7
   b9eb4:	3b01      	subs	r3, #1
   b9eb6:	4621      	mov	r1, r4
   b9eb8:	2b07      	cmp	r3, #7
   b9eba:	dc0b      	bgt.n	b9ed4 <__gethex+0x17c>
   b9ebc:	ee18 0a10 	vmov	r0, s16
   b9ec0:	f000 fa68 	bl	ba394 <_Balloc>
   b9ec4:	4604      	mov	r4, r0
   b9ec6:	b940      	cbnz	r0, b9eda <__gethex+0x182>
   b9ec8:	4b5d      	ldr	r3, [pc, #372]	; (ba040 <__gethex+0x2e8>)
   b9eca:	4602      	mov	r2, r0
   b9ecc:	21de      	movs	r1, #222	; 0xde
   b9ece:	485d      	ldr	r0, [pc, #372]	; (ba044 <__gethex+0x2ec>)
   b9ed0:	f7fc fece 	bl	b6c70 <__assert_func>
   b9ed4:	3101      	adds	r1, #1
   b9ed6:	105b      	asrs	r3, r3, #1
   b9ed8:	e7ee      	b.n	b9eb8 <__gethex+0x160>
   b9eda:	f100 0914 	add.w	r9, r0, #20
   b9ede:	f04f 0b00 	mov.w	fp, #0
   b9ee2:	f1ca 0301 	rsb	r3, sl, #1
   b9ee6:	f8cd 9008 	str.w	r9, [sp, #8]
   b9eea:	f8cd b000 	str.w	fp, [sp]
   b9eee:	9306      	str	r3, [sp, #24]
   b9ef0:	42b7      	cmp	r7, r6
   b9ef2:	d340      	bcc.n	b9f76 <__gethex+0x21e>
   b9ef4:	9802      	ldr	r0, [sp, #8]
   b9ef6:	9b00      	ldr	r3, [sp, #0]
   b9ef8:	f840 3b04 	str.w	r3, [r0], #4
   b9efc:	eba0 0009 	sub.w	r0, r0, r9
   b9f00:	1080      	asrs	r0, r0, #2
   b9f02:	0146      	lsls	r6, r0, #5
   b9f04:	6120      	str	r0, [r4, #16]
   b9f06:	4618      	mov	r0, r3
   b9f08:	f000 fb36 	bl	ba578 <__hi0bits>
   b9f0c:	1a30      	subs	r0, r6, r0
   b9f0e:	f8d8 6000 	ldr.w	r6, [r8]
   b9f12:	42b0      	cmp	r0, r6
   b9f14:	dd63      	ble.n	b9fde <__gethex+0x286>
   b9f16:	1b87      	subs	r7, r0, r6
   b9f18:	4639      	mov	r1, r7
   b9f1a:	4620      	mov	r0, r4
   b9f1c:	f000 feda 	bl	bacd4 <__any_on>
   b9f20:	4682      	mov	sl, r0
   b9f22:	b1a8      	cbz	r0, b9f50 <__gethex+0x1f8>
   b9f24:	1e7b      	subs	r3, r7, #1
   b9f26:	1159      	asrs	r1, r3, #5
   b9f28:	f003 021f 	and.w	r2, r3, #31
   b9f2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9f30:	f04f 0a01 	mov.w	sl, #1
   b9f34:	fa0a f202 	lsl.w	r2, sl, r2
   b9f38:	420a      	tst	r2, r1
   b9f3a:	d009      	beq.n	b9f50 <__gethex+0x1f8>
   b9f3c:	4553      	cmp	r3, sl
   b9f3e:	dd05      	ble.n	b9f4c <__gethex+0x1f4>
   b9f40:	1eb9      	subs	r1, r7, #2
   b9f42:	4620      	mov	r0, r4
   b9f44:	f000 fec6 	bl	bacd4 <__any_on>
   b9f48:	2800      	cmp	r0, #0
   b9f4a:	d145      	bne.n	b9fd8 <__gethex+0x280>
   b9f4c:	f04f 0a02 	mov.w	sl, #2
   b9f50:	4639      	mov	r1, r7
   b9f52:	4620      	mov	r0, r4
   b9f54:	f7ff fe98 	bl	b9c88 <rshift>
   b9f58:	443d      	add	r5, r7
   b9f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9f5e:	42ab      	cmp	r3, r5
   b9f60:	da4c      	bge.n	b9ffc <__gethex+0x2a4>
   b9f62:	ee18 0a10 	vmov	r0, s16
   b9f66:	4621      	mov	r1, r4
   b9f68:	f000 fa54 	bl	ba414 <_Bfree>
   b9f6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9f6e:	2300      	movs	r3, #0
   b9f70:	6013      	str	r3, [r2, #0]
   b9f72:	27a3      	movs	r7, #163	; 0xa3
   b9f74:	e785      	b.n	b9e82 <__gethex+0x12a>
   b9f76:	1e73      	subs	r3, r6, #1
   b9f78:	9a05      	ldr	r2, [sp, #20]
   b9f7a:	9303      	str	r3, [sp, #12]
   b9f7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9f80:	4293      	cmp	r3, r2
   b9f82:	d019      	beq.n	b9fb8 <__gethex+0x260>
   b9f84:	f1bb 0f20 	cmp.w	fp, #32
   b9f88:	d107      	bne.n	b9f9a <__gethex+0x242>
   b9f8a:	9b02      	ldr	r3, [sp, #8]
   b9f8c:	9a00      	ldr	r2, [sp, #0]
   b9f8e:	f843 2b04 	str.w	r2, [r3], #4
   b9f92:	9302      	str	r3, [sp, #8]
   b9f94:	2300      	movs	r3, #0
   b9f96:	9300      	str	r3, [sp, #0]
   b9f98:	469b      	mov	fp, r3
   b9f9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b9f9e:	f7ff fec5 	bl	b9d2c <__hexdig_fun>
   b9fa2:	9b00      	ldr	r3, [sp, #0]
   b9fa4:	f000 000f 	and.w	r0, r0, #15
   b9fa8:	fa00 f00b 	lsl.w	r0, r0, fp
   b9fac:	4303      	orrs	r3, r0
   b9fae:	9300      	str	r3, [sp, #0]
   b9fb0:	f10b 0b04 	add.w	fp, fp, #4
   b9fb4:	9b03      	ldr	r3, [sp, #12]
   b9fb6:	e00d      	b.n	b9fd4 <__gethex+0x27c>
   b9fb8:	9b03      	ldr	r3, [sp, #12]
   b9fba:	9a06      	ldr	r2, [sp, #24]
   b9fbc:	4413      	add	r3, r2
   b9fbe:	42bb      	cmp	r3, r7
   b9fc0:	d3e0      	bcc.n	b9f84 <__gethex+0x22c>
   b9fc2:	4618      	mov	r0, r3
   b9fc4:	9901      	ldr	r1, [sp, #4]
   b9fc6:	9307      	str	r3, [sp, #28]
   b9fc8:	4652      	mov	r2, sl
   b9fca:	f7fe ff18 	bl	b8dfe <strncmp>
   b9fce:	9b07      	ldr	r3, [sp, #28]
   b9fd0:	2800      	cmp	r0, #0
   b9fd2:	d1d7      	bne.n	b9f84 <__gethex+0x22c>
   b9fd4:	461e      	mov	r6, r3
   b9fd6:	e78b      	b.n	b9ef0 <__gethex+0x198>
   b9fd8:	f04f 0a03 	mov.w	sl, #3
   b9fdc:	e7b8      	b.n	b9f50 <__gethex+0x1f8>
   b9fde:	da0a      	bge.n	b9ff6 <__gethex+0x29e>
   b9fe0:	1a37      	subs	r7, r6, r0
   b9fe2:	4621      	mov	r1, r4
   b9fe4:	ee18 0a10 	vmov	r0, s16
   b9fe8:	463a      	mov	r2, r7
   b9fea:	f000 fc2f 	bl	ba84c <__lshift>
   b9fee:	1bed      	subs	r5, r5, r7
   b9ff0:	4604      	mov	r4, r0
   b9ff2:	f100 0914 	add.w	r9, r0, #20
   b9ff6:	f04f 0a00 	mov.w	sl, #0
   b9ffa:	e7ae      	b.n	b9f5a <__gethex+0x202>
   b9ffc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba000:	42a8      	cmp	r0, r5
   ba002:	dd72      	ble.n	ba0ea <__gethex+0x392>
   ba004:	1b45      	subs	r5, r0, r5
   ba006:	42ae      	cmp	r6, r5
   ba008:	dc36      	bgt.n	ba078 <__gethex+0x320>
   ba00a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba00e:	2b02      	cmp	r3, #2
   ba010:	d02a      	beq.n	ba068 <__gethex+0x310>
   ba012:	2b03      	cmp	r3, #3
   ba014:	d02c      	beq.n	ba070 <__gethex+0x318>
   ba016:	2b01      	cmp	r3, #1
   ba018:	d11c      	bne.n	ba054 <__gethex+0x2fc>
   ba01a:	42ae      	cmp	r6, r5
   ba01c:	d11a      	bne.n	ba054 <__gethex+0x2fc>
   ba01e:	2e01      	cmp	r6, #1
   ba020:	d112      	bne.n	ba048 <__gethex+0x2f0>
   ba022:	9a04      	ldr	r2, [sp, #16]
   ba024:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba028:	6013      	str	r3, [r2, #0]
   ba02a:	2301      	movs	r3, #1
   ba02c:	6123      	str	r3, [r4, #16]
   ba02e:	f8c9 3000 	str.w	r3, [r9]
   ba032:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba034:	2762      	movs	r7, #98	; 0x62
   ba036:	601c      	str	r4, [r3, #0]
   ba038:	e723      	b.n	b9e82 <__gethex+0x12a>
   ba03a:	bf00      	nop
   ba03c:	000bba00 	.word	0x000bba00
   ba040:	000bb989 	.word	0x000bb989
   ba044:	000bb99a 	.word	0x000bb99a
   ba048:	1e71      	subs	r1, r6, #1
   ba04a:	4620      	mov	r0, r4
   ba04c:	f000 fe42 	bl	bacd4 <__any_on>
   ba050:	2800      	cmp	r0, #0
   ba052:	d1e6      	bne.n	ba022 <__gethex+0x2ca>
   ba054:	ee18 0a10 	vmov	r0, s16
   ba058:	4621      	mov	r1, r4
   ba05a:	f000 f9db 	bl	ba414 <_Bfree>
   ba05e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba060:	2300      	movs	r3, #0
   ba062:	6013      	str	r3, [r2, #0]
   ba064:	2750      	movs	r7, #80	; 0x50
   ba066:	e70c      	b.n	b9e82 <__gethex+0x12a>
   ba068:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba06a:	2b00      	cmp	r3, #0
   ba06c:	d1f2      	bne.n	ba054 <__gethex+0x2fc>
   ba06e:	e7d8      	b.n	ba022 <__gethex+0x2ca>
   ba070:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba072:	2b00      	cmp	r3, #0
   ba074:	d1d5      	bne.n	ba022 <__gethex+0x2ca>
   ba076:	e7ed      	b.n	ba054 <__gethex+0x2fc>
   ba078:	1e6f      	subs	r7, r5, #1
   ba07a:	f1ba 0f00 	cmp.w	sl, #0
   ba07e:	d131      	bne.n	ba0e4 <__gethex+0x38c>
   ba080:	b127      	cbz	r7, ba08c <__gethex+0x334>
   ba082:	4639      	mov	r1, r7
   ba084:	4620      	mov	r0, r4
   ba086:	f000 fe25 	bl	bacd4 <__any_on>
   ba08a:	4682      	mov	sl, r0
   ba08c:	117b      	asrs	r3, r7, #5
   ba08e:	2101      	movs	r1, #1
   ba090:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba094:	f007 071f 	and.w	r7, r7, #31
   ba098:	fa01 f707 	lsl.w	r7, r1, r7
   ba09c:	421f      	tst	r7, r3
   ba09e:	4629      	mov	r1, r5
   ba0a0:	4620      	mov	r0, r4
   ba0a2:	bf18      	it	ne
   ba0a4:	f04a 0a02 	orrne.w	sl, sl, #2
   ba0a8:	1b76      	subs	r6, r6, r5
   ba0aa:	f7ff fded 	bl	b9c88 <rshift>
   ba0ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba0b2:	2702      	movs	r7, #2
   ba0b4:	f1ba 0f00 	cmp.w	sl, #0
   ba0b8:	d048      	beq.n	ba14c <__gethex+0x3f4>
   ba0ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba0be:	2b02      	cmp	r3, #2
   ba0c0:	d015      	beq.n	ba0ee <__gethex+0x396>
   ba0c2:	2b03      	cmp	r3, #3
   ba0c4:	d017      	beq.n	ba0f6 <__gethex+0x39e>
   ba0c6:	2b01      	cmp	r3, #1
   ba0c8:	d109      	bne.n	ba0de <__gethex+0x386>
   ba0ca:	f01a 0f02 	tst.w	sl, #2
   ba0ce:	d006      	beq.n	ba0de <__gethex+0x386>
   ba0d0:	f8d9 0000 	ldr.w	r0, [r9]
   ba0d4:	ea4a 0a00 	orr.w	sl, sl, r0
   ba0d8:	f01a 0f01 	tst.w	sl, #1
   ba0dc:	d10e      	bne.n	ba0fc <__gethex+0x3a4>
   ba0de:	f047 0710 	orr.w	r7, r7, #16
   ba0e2:	e033      	b.n	ba14c <__gethex+0x3f4>
   ba0e4:	f04f 0a01 	mov.w	sl, #1
   ba0e8:	e7d0      	b.n	ba08c <__gethex+0x334>
   ba0ea:	2701      	movs	r7, #1
   ba0ec:	e7e2      	b.n	ba0b4 <__gethex+0x35c>
   ba0ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba0f0:	f1c3 0301 	rsb	r3, r3, #1
   ba0f4:	9315      	str	r3, [sp, #84]	; 0x54
   ba0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba0f8:	2b00      	cmp	r3, #0
   ba0fa:	d0f0      	beq.n	ba0de <__gethex+0x386>
   ba0fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba100:	f104 0314 	add.w	r3, r4, #20
   ba104:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba108:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba10c:	f04f 0c00 	mov.w	ip, #0
   ba110:	4618      	mov	r0, r3
   ba112:	f853 2b04 	ldr.w	r2, [r3], #4
   ba116:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ba11a:	d01c      	beq.n	ba156 <__gethex+0x3fe>
   ba11c:	3201      	adds	r2, #1
   ba11e:	6002      	str	r2, [r0, #0]
   ba120:	2f02      	cmp	r7, #2
   ba122:	f104 0314 	add.w	r3, r4, #20
   ba126:	d13f      	bne.n	ba1a8 <__gethex+0x450>
   ba128:	f8d8 2000 	ldr.w	r2, [r8]
   ba12c:	3a01      	subs	r2, #1
   ba12e:	42b2      	cmp	r2, r6
   ba130:	d10a      	bne.n	ba148 <__gethex+0x3f0>
   ba132:	1171      	asrs	r1, r6, #5
   ba134:	2201      	movs	r2, #1
   ba136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba13a:	f006 061f 	and.w	r6, r6, #31
   ba13e:	fa02 f606 	lsl.w	r6, r2, r6
   ba142:	421e      	tst	r6, r3
   ba144:	bf18      	it	ne
   ba146:	4617      	movne	r7, r2
   ba148:	f047 0720 	orr.w	r7, r7, #32
   ba14c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba14e:	601c      	str	r4, [r3, #0]
   ba150:	9b04      	ldr	r3, [sp, #16]
   ba152:	601d      	str	r5, [r3, #0]
   ba154:	e695      	b.n	b9e82 <__gethex+0x12a>
   ba156:	4299      	cmp	r1, r3
   ba158:	f843 cc04 	str.w	ip, [r3, #-4]
   ba15c:	d8d8      	bhi.n	ba110 <__gethex+0x3b8>
   ba15e:	68a3      	ldr	r3, [r4, #8]
   ba160:	459b      	cmp	fp, r3
   ba162:	db19      	blt.n	ba198 <__gethex+0x440>
   ba164:	6861      	ldr	r1, [r4, #4]
   ba166:	ee18 0a10 	vmov	r0, s16
   ba16a:	3101      	adds	r1, #1
   ba16c:	f000 f912 	bl	ba394 <_Balloc>
   ba170:	4681      	mov	r9, r0
   ba172:	b918      	cbnz	r0, ba17c <__gethex+0x424>
   ba174:	4b1a      	ldr	r3, [pc, #104]	; (ba1e0 <__gethex+0x488>)
   ba176:	4602      	mov	r2, r0
   ba178:	2184      	movs	r1, #132	; 0x84
   ba17a:	e6a8      	b.n	b9ece <__gethex+0x176>
   ba17c:	6922      	ldr	r2, [r4, #16]
   ba17e:	3202      	adds	r2, #2
   ba180:	f104 010c 	add.w	r1, r4, #12
   ba184:	0092      	lsls	r2, r2, #2
   ba186:	300c      	adds	r0, #12
   ba188:	f7fe fda4 	bl	b8cd4 <memcpy>
   ba18c:	4621      	mov	r1, r4
   ba18e:	ee18 0a10 	vmov	r0, s16
   ba192:	f000 f93f 	bl	ba414 <_Bfree>
   ba196:	464c      	mov	r4, r9
   ba198:	6923      	ldr	r3, [r4, #16]
   ba19a:	1c5a      	adds	r2, r3, #1
   ba19c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba1a0:	6122      	str	r2, [r4, #16]
   ba1a2:	2201      	movs	r2, #1
   ba1a4:	615a      	str	r2, [r3, #20]
   ba1a6:	e7bb      	b.n	ba120 <__gethex+0x3c8>
   ba1a8:	6922      	ldr	r2, [r4, #16]
   ba1aa:	455a      	cmp	r2, fp
   ba1ac:	dd0b      	ble.n	ba1c6 <__gethex+0x46e>
   ba1ae:	2101      	movs	r1, #1
   ba1b0:	4620      	mov	r0, r4
   ba1b2:	f7ff fd69 	bl	b9c88 <rshift>
   ba1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba1ba:	3501      	adds	r5, #1
   ba1bc:	42ab      	cmp	r3, r5
   ba1be:	f6ff aed0 	blt.w	b9f62 <__gethex+0x20a>
   ba1c2:	2701      	movs	r7, #1
   ba1c4:	e7c0      	b.n	ba148 <__gethex+0x3f0>
   ba1c6:	f016 061f 	ands.w	r6, r6, #31
   ba1ca:	d0fa      	beq.n	ba1c2 <__gethex+0x46a>
   ba1cc:	4453      	add	r3, sl
   ba1ce:	f1c6 0620 	rsb	r6, r6, #32
   ba1d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba1d6:	f000 f9cf 	bl	ba578 <__hi0bits>
   ba1da:	42b0      	cmp	r0, r6
   ba1dc:	dbe7      	blt.n	ba1ae <__gethex+0x456>
   ba1de:	e7f0      	b.n	ba1c2 <__gethex+0x46a>
   ba1e0:	000bb989 	.word	0x000bb989

000ba1e4 <L_shift>:
   ba1e4:	f1c2 0208 	rsb	r2, r2, #8
   ba1e8:	0092      	lsls	r2, r2, #2
   ba1ea:	b570      	push	{r4, r5, r6, lr}
   ba1ec:	f1c2 0620 	rsb	r6, r2, #32
   ba1f0:	6843      	ldr	r3, [r0, #4]
   ba1f2:	6804      	ldr	r4, [r0, #0]
   ba1f4:	fa03 f506 	lsl.w	r5, r3, r6
   ba1f8:	432c      	orrs	r4, r5
   ba1fa:	40d3      	lsrs	r3, r2
   ba1fc:	6004      	str	r4, [r0, #0]
   ba1fe:	f840 3f04 	str.w	r3, [r0, #4]!
   ba202:	4288      	cmp	r0, r1
   ba204:	d3f4      	bcc.n	ba1f0 <L_shift+0xc>
   ba206:	bd70      	pop	{r4, r5, r6, pc}

000ba208 <__match>:
   ba208:	b530      	push	{r4, r5, lr}
   ba20a:	6803      	ldr	r3, [r0, #0]
   ba20c:	3301      	adds	r3, #1
   ba20e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba212:	b914      	cbnz	r4, ba21a <__match+0x12>
   ba214:	6003      	str	r3, [r0, #0]
   ba216:	2001      	movs	r0, #1
   ba218:	bd30      	pop	{r4, r5, pc}
   ba21a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba21e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba222:	2d19      	cmp	r5, #25
   ba224:	bf98      	it	ls
   ba226:	3220      	addls	r2, #32
   ba228:	42a2      	cmp	r2, r4
   ba22a:	d0f0      	beq.n	ba20e <__match+0x6>
   ba22c:	2000      	movs	r0, #0
   ba22e:	e7f3      	b.n	ba218 <__match+0x10>

000ba230 <__hexnan>:
   ba230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba234:	680b      	ldr	r3, [r1, #0]
   ba236:	115e      	asrs	r6, r3, #5
   ba238:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba23c:	f013 031f 	ands.w	r3, r3, #31
   ba240:	b087      	sub	sp, #28
   ba242:	bf18      	it	ne
   ba244:	3604      	addne	r6, #4
   ba246:	2500      	movs	r5, #0
   ba248:	1f37      	subs	r7, r6, #4
   ba24a:	4690      	mov	r8, r2
   ba24c:	6802      	ldr	r2, [r0, #0]
   ba24e:	9301      	str	r3, [sp, #4]
   ba250:	4682      	mov	sl, r0
   ba252:	f846 5c04 	str.w	r5, [r6, #-4]
   ba256:	46b9      	mov	r9, r7
   ba258:	463c      	mov	r4, r7
   ba25a:	9502      	str	r5, [sp, #8]
   ba25c:	46ab      	mov	fp, r5
   ba25e:	7851      	ldrb	r1, [r2, #1]
   ba260:	1c53      	adds	r3, r2, #1
   ba262:	9303      	str	r3, [sp, #12]
   ba264:	b341      	cbz	r1, ba2b8 <__hexnan+0x88>
   ba266:	4608      	mov	r0, r1
   ba268:	9205      	str	r2, [sp, #20]
   ba26a:	9104      	str	r1, [sp, #16]
   ba26c:	f7ff fd5e 	bl	b9d2c <__hexdig_fun>
   ba270:	2800      	cmp	r0, #0
   ba272:	d14f      	bne.n	ba314 <__hexnan+0xe4>
   ba274:	9904      	ldr	r1, [sp, #16]
   ba276:	9a05      	ldr	r2, [sp, #20]
   ba278:	2920      	cmp	r1, #32
   ba27a:	d818      	bhi.n	ba2ae <__hexnan+0x7e>
   ba27c:	9b02      	ldr	r3, [sp, #8]
   ba27e:	459b      	cmp	fp, r3
   ba280:	dd13      	ble.n	ba2aa <__hexnan+0x7a>
   ba282:	454c      	cmp	r4, r9
   ba284:	d206      	bcs.n	ba294 <__hexnan+0x64>
   ba286:	2d07      	cmp	r5, #7
   ba288:	dc04      	bgt.n	ba294 <__hexnan+0x64>
   ba28a:	462a      	mov	r2, r5
   ba28c:	4649      	mov	r1, r9
   ba28e:	4620      	mov	r0, r4
   ba290:	f7ff ffa8 	bl	ba1e4 <L_shift>
   ba294:	4544      	cmp	r4, r8
   ba296:	d950      	bls.n	ba33a <__hexnan+0x10a>
   ba298:	2300      	movs	r3, #0
   ba29a:	f1a4 0904 	sub.w	r9, r4, #4
   ba29e:	f844 3c04 	str.w	r3, [r4, #-4]
   ba2a2:	f8cd b008 	str.w	fp, [sp, #8]
   ba2a6:	464c      	mov	r4, r9
   ba2a8:	461d      	mov	r5, r3
   ba2aa:	9a03      	ldr	r2, [sp, #12]
   ba2ac:	e7d7      	b.n	ba25e <__hexnan+0x2e>
   ba2ae:	2929      	cmp	r1, #41	; 0x29
   ba2b0:	d156      	bne.n	ba360 <__hexnan+0x130>
   ba2b2:	3202      	adds	r2, #2
   ba2b4:	f8ca 2000 	str.w	r2, [sl]
   ba2b8:	f1bb 0f00 	cmp.w	fp, #0
   ba2bc:	d050      	beq.n	ba360 <__hexnan+0x130>
   ba2be:	454c      	cmp	r4, r9
   ba2c0:	d206      	bcs.n	ba2d0 <__hexnan+0xa0>
   ba2c2:	2d07      	cmp	r5, #7
   ba2c4:	dc04      	bgt.n	ba2d0 <__hexnan+0xa0>
   ba2c6:	462a      	mov	r2, r5
   ba2c8:	4649      	mov	r1, r9
   ba2ca:	4620      	mov	r0, r4
   ba2cc:	f7ff ff8a 	bl	ba1e4 <L_shift>
   ba2d0:	4544      	cmp	r4, r8
   ba2d2:	d934      	bls.n	ba33e <__hexnan+0x10e>
   ba2d4:	f1a8 0204 	sub.w	r2, r8, #4
   ba2d8:	4623      	mov	r3, r4
   ba2da:	f853 1b04 	ldr.w	r1, [r3], #4
   ba2de:	f842 1f04 	str.w	r1, [r2, #4]!
   ba2e2:	429f      	cmp	r7, r3
   ba2e4:	d2f9      	bcs.n	ba2da <__hexnan+0xaa>
   ba2e6:	1b3b      	subs	r3, r7, r4
   ba2e8:	f023 0303 	bic.w	r3, r3, #3
   ba2ec:	3304      	adds	r3, #4
   ba2ee:	3401      	adds	r4, #1
   ba2f0:	3e03      	subs	r6, #3
   ba2f2:	42b4      	cmp	r4, r6
   ba2f4:	bf88      	it	hi
   ba2f6:	2304      	movhi	r3, #4
   ba2f8:	4443      	add	r3, r8
   ba2fa:	2200      	movs	r2, #0
   ba2fc:	f843 2b04 	str.w	r2, [r3], #4
   ba300:	429f      	cmp	r7, r3
   ba302:	d2fb      	bcs.n	ba2fc <__hexnan+0xcc>
   ba304:	683b      	ldr	r3, [r7, #0]
   ba306:	b91b      	cbnz	r3, ba310 <__hexnan+0xe0>
   ba308:	4547      	cmp	r7, r8
   ba30a:	d127      	bne.n	ba35c <__hexnan+0x12c>
   ba30c:	2301      	movs	r3, #1
   ba30e:	603b      	str	r3, [r7, #0]
   ba310:	2005      	movs	r0, #5
   ba312:	e026      	b.n	ba362 <__hexnan+0x132>
   ba314:	3501      	adds	r5, #1
   ba316:	2d08      	cmp	r5, #8
   ba318:	f10b 0b01 	add.w	fp, fp, #1
   ba31c:	dd06      	ble.n	ba32c <__hexnan+0xfc>
   ba31e:	4544      	cmp	r4, r8
   ba320:	d9c3      	bls.n	ba2aa <__hexnan+0x7a>
   ba322:	2300      	movs	r3, #0
   ba324:	f844 3c04 	str.w	r3, [r4, #-4]
   ba328:	2501      	movs	r5, #1
   ba32a:	3c04      	subs	r4, #4
   ba32c:	6822      	ldr	r2, [r4, #0]
   ba32e:	f000 000f 	and.w	r0, r0, #15
   ba332:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba336:	6022      	str	r2, [r4, #0]
   ba338:	e7b7      	b.n	ba2aa <__hexnan+0x7a>
   ba33a:	2508      	movs	r5, #8
   ba33c:	e7b5      	b.n	ba2aa <__hexnan+0x7a>
   ba33e:	9b01      	ldr	r3, [sp, #4]
   ba340:	2b00      	cmp	r3, #0
   ba342:	d0df      	beq.n	ba304 <__hexnan+0xd4>
   ba344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba348:	f1c3 0320 	rsb	r3, r3, #32
   ba34c:	fa22 f303 	lsr.w	r3, r2, r3
   ba350:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba354:	401a      	ands	r2, r3
   ba356:	f846 2c04 	str.w	r2, [r6, #-4]
   ba35a:	e7d3      	b.n	ba304 <__hexnan+0xd4>
   ba35c:	3f04      	subs	r7, #4
   ba35e:	e7d1      	b.n	ba304 <__hexnan+0xd4>
   ba360:	2004      	movs	r0, #4
   ba362:	b007      	add	sp, #28
   ba364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba368 <__retarget_lock_acquire_recursive>:
   ba368:	4770      	bx	lr

000ba36a <__retarget_lock_release>:
   ba36a:	4770      	bx	lr

000ba36c <__retarget_lock_release_recursive>:
   ba36c:	4770      	bx	lr

000ba36e <__ascii_mbtowc>:
   ba36e:	b082      	sub	sp, #8
   ba370:	b901      	cbnz	r1, ba374 <__ascii_mbtowc+0x6>
   ba372:	a901      	add	r1, sp, #4
   ba374:	b142      	cbz	r2, ba388 <__ascii_mbtowc+0x1a>
   ba376:	b14b      	cbz	r3, ba38c <__ascii_mbtowc+0x1e>
   ba378:	7813      	ldrb	r3, [r2, #0]
   ba37a:	600b      	str	r3, [r1, #0]
   ba37c:	7812      	ldrb	r2, [r2, #0]
   ba37e:	1e10      	subs	r0, r2, #0
   ba380:	bf18      	it	ne
   ba382:	2001      	movne	r0, #1
   ba384:	b002      	add	sp, #8
   ba386:	4770      	bx	lr
   ba388:	4610      	mov	r0, r2
   ba38a:	e7fb      	b.n	ba384 <__ascii_mbtowc+0x16>
   ba38c:	f06f 0001 	mvn.w	r0, #1
   ba390:	e7f8      	b.n	ba384 <__ascii_mbtowc+0x16>
	...

000ba394 <_Balloc>:
   ba394:	b570      	push	{r4, r5, r6, lr}
   ba396:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba398:	4604      	mov	r4, r0
   ba39a:	460d      	mov	r5, r1
   ba39c:	b976      	cbnz	r6, ba3bc <_Balloc+0x28>
   ba39e:	2010      	movs	r0, #16
   ba3a0:	f7fc fc26 	bl	b6bf0 <malloc>
   ba3a4:	4602      	mov	r2, r0
   ba3a6:	6260      	str	r0, [r4, #36]	; 0x24
   ba3a8:	b920      	cbnz	r0, ba3b4 <_Balloc+0x20>
   ba3aa:	4b18      	ldr	r3, [pc, #96]	; (ba40c <_Balloc+0x78>)
   ba3ac:	4818      	ldr	r0, [pc, #96]	; (ba410 <_Balloc+0x7c>)
   ba3ae:	2166      	movs	r1, #102	; 0x66
   ba3b0:	f7fc fc5e 	bl	b6c70 <__assert_func>
   ba3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba3b8:	6006      	str	r6, [r0, #0]
   ba3ba:	60c6      	str	r6, [r0, #12]
   ba3bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba3be:	68f3      	ldr	r3, [r6, #12]
   ba3c0:	b183      	cbz	r3, ba3e4 <_Balloc+0x50>
   ba3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba3c4:	68db      	ldr	r3, [r3, #12]
   ba3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba3ca:	b9b8      	cbnz	r0, ba3fc <_Balloc+0x68>
   ba3cc:	2101      	movs	r1, #1
   ba3ce:	fa01 f605 	lsl.w	r6, r1, r5
   ba3d2:	1d72      	adds	r2, r6, #5
   ba3d4:	0092      	lsls	r2, r2, #2
   ba3d6:	4620      	mov	r0, r4
   ba3d8:	f000 fc9d 	bl	bad16 <_calloc_r>
   ba3dc:	b160      	cbz	r0, ba3f8 <_Balloc+0x64>
   ba3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba3e2:	e00e      	b.n	ba402 <_Balloc+0x6e>
   ba3e4:	2221      	movs	r2, #33	; 0x21
   ba3e6:	2104      	movs	r1, #4
   ba3e8:	4620      	mov	r0, r4
   ba3ea:	f000 fc94 	bl	bad16 <_calloc_r>
   ba3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba3f0:	60f0      	str	r0, [r6, #12]
   ba3f2:	68db      	ldr	r3, [r3, #12]
   ba3f4:	2b00      	cmp	r3, #0
   ba3f6:	d1e4      	bne.n	ba3c2 <_Balloc+0x2e>
   ba3f8:	2000      	movs	r0, #0
   ba3fa:	bd70      	pop	{r4, r5, r6, pc}
   ba3fc:	6802      	ldr	r2, [r0, #0]
   ba3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba402:	2300      	movs	r3, #0
   ba404:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba408:	e7f7      	b.n	ba3fa <_Balloc+0x66>
   ba40a:	bf00      	nop
   ba40c:	000bb762 	.word	0x000bb762
   ba410:	000bba12 	.word	0x000bba12

000ba414 <_Bfree>:
   ba414:	b570      	push	{r4, r5, r6, lr}
   ba416:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba418:	4605      	mov	r5, r0
   ba41a:	460c      	mov	r4, r1
   ba41c:	b976      	cbnz	r6, ba43c <_Bfree+0x28>
   ba41e:	2010      	movs	r0, #16
   ba420:	f7fc fbe6 	bl	b6bf0 <malloc>
   ba424:	4602      	mov	r2, r0
   ba426:	6268      	str	r0, [r5, #36]	; 0x24
   ba428:	b920      	cbnz	r0, ba434 <_Bfree+0x20>
   ba42a:	4b09      	ldr	r3, [pc, #36]	; (ba450 <_Bfree+0x3c>)
   ba42c:	4809      	ldr	r0, [pc, #36]	; (ba454 <_Bfree+0x40>)
   ba42e:	218a      	movs	r1, #138	; 0x8a
   ba430:	f7fc fc1e 	bl	b6c70 <__assert_func>
   ba434:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba438:	6006      	str	r6, [r0, #0]
   ba43a:	60c6      	str	r6, [r0, #12]
   ba43c:	b13c      	cbz	r4, ba44e <_Bfree+0x3a>
   ba43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba440:	6862      	ldr	r2, [r4, #4]
   ba442:	68db      	ldr	r3, [r3, #12]
   ba444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba448:	6021      	str	r1, [r4, #0]
   ba44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba44e:	bd70      	pop	{r4, r5, r6, pc}
   ba450:	000bb762 	.word	0x000bb762
   ba454:	000bba12 	.word	0x000bba12

000ba458 <__multadd>:
   ba458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba45c:	690d      	ldr	r5, [r1, #16]
   ba45e:	4607      	mov	r7, r0
   ba460:	460c      	mov	r4, r1
   ba462:	461e      	mov	r6, r3
   ba464:	f101 0c14 	add.w	ip, r1, #20
   ba468:	2000      	movs	r0, #0
   ba46a:	f8dc 3000 	ldr.w	r3, [ip]
   ba46e:	b299      	uxth	r1, r3
   ba470:	fb02 6101 	mla	r1, r2, r1, r6
   ba474:	0c1e      	lsrs	r6, r3, #16
   ba476:	0c0b      	lsrs	r3, r1, #16
   ba478:	fb02 3306 	mla	r3, r2, r6, r3
   ba47c:	b289      	uxth	r1, r1
   ba47e:	3001      	adds	r0, #1
   ba480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba484:	4285      	cmp	r5, r0
   ba486:	f84c 1b04 	str.w	r1, [ip], #4
   ba48a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba48e:	dcec      	bgt.n	ba46a <__multadd+0x12>
   ba490:	b30e      	cbz	r6, ba4d6 <__multadd+0x7e>
   ba492:	68a3      	ldr	r3, [r4, #8]
   ba494:	42ab      	cmp	r3, r5
   ba496:	dc19      	bgt.n	ba4cc <__multadd+0x74>
   ba498:	6861      	ldr	r1, [r4, #4]
   ba49a:	4638      	mov	r0, r7
   ba49c:	3101      	adds	r1, #1
   ba49e:	f7ff ff79 	bl	ba394 <_Balloc>
   ba4a2:	4680      	mov	r8, r0
   ba4a4:	b928      	cbnz	r0, ba4b2 <__multadd+0x5a>
   ba4a6:	4602      	mov	r2, r0
   ba4a8:	4b0c      	ldr	r3, [pc, #48]	; (ba4dc <__multadd+0x84>)
   ba4aa:	480d      	ldr	r0, [pc, #52]	; (ba4e0 <__multadd+0x88>)
   ba4ac:	21b5      	movs	r1, #181	; 0xb5
   ba4ae:	f7fc fbdf 	bl	b6c70 <__assert_func>
   ba4b2:	6922      	ldr	r2, [r4, #16]
   ba4b4:	3202      	adds	r2, #2
   ba4b6:	f104 010c 	add.w	r1, r4, #12
   ba4ba:	0092      	lsls	r2, r2, #2
   ba4bc:	300c      	adds	r0, #12
   ba4be:	f7fe fc09 	bl	b8cd4 <memcpy>
   ba4c2:	4621      	mov	r1, r4
   ba4c4:	4638      	mov	r0, r7
   ba4c6:	f7ff ffa5 	bl	ba414 <_Bfree>
   ba4ca:	4644      	mov	r4, r8
   ba4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba4d0:	3501      	adds	r5, #1
   ba4d2:	615e      	str	r6, [r3, #20]
   ba4d4:	6125      	str	r5, [r4, #16]
   ba4d6:	4620      	mov	r0, r4
   ba4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba4dc:	000bb989 	.word	0x000bb989
   ba4e0:	000bba12 	.word	0x000bba12

000ba4e4 <__s2b>:
   ba4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba4e8:	460c      	mov	r4, r1
   ba4ea:	4615      	mov	r5, r2
   ba4ec:	461f      	mov	r7, r3
   ba4ee:	2209      	movs	r2, #9
   ba4f0:	3308      	adds	r3, #8
   ba4f2:	4606      	mov	r6, r0
   ba4f4:	fb93 f3f2 	sdiv	r3, r3, r2
   ba4f8:	2100      	movs	r1, #0
   ba4fa:	2201      	movs	r2, #1
   ba4fc:	429a      	cmp	r2, r3
   ba4fe:	db09      	blt.n	ba514 <__s2b+0x30>
   ba500:	4630      	mov	r0, r6
   ba502:	f7ff ff47 	bl	ba394 <_Balloc>
   ba506:	b940      	cbnz	r0, ba51a <__s2b+0x36>
   ba508:	4602      	mov	r2, r0
   ba50a:	4b19      	ldr	r3, [pc, #100]	; (ba570 <__s2b+0x8c>)
   ba50c:	4819      	ldr	r0, [pc, #100]	; (ba574 <__s2b+0x90>)
   ba50e:	21ce      	movs	r1, #206	; 0xce
   ba510:	f7fc fbae 	bl	b6c70 <__assert_func>
   ba514:	0052      	lsls	r2, r2, #1
   ba516:	3101      	adds	r1, #1
   ba518:	e7f0      	b.n	ba4fc <__s2b+0x18>
   ba51a:	9b08      	ldr	r3, [sp, #32]
   ba51c:	6143      	str	r3, [r0, #20]
   ba51e:	2d09      	cmp	r5, #9
   ba520:	f04f 0301 	mov.w	r3, #1
   ba524:	6103      	str	r3, [r0, #16]
   ba526:	dd16      	ble.n	ba556 <__s2b+0x72>
   ba528:	f104 0909 	add.w	r9, r4, #9
   ba52c:	46c8      	mov	r8, r9
   ba52e:	442c      	add	r4, r5
   ba530:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba534:	4601      	mov	r1, r0
   ba536:	3b30      	subs	r3, #48	; 0x30
   ba538:	220a      	movs	r2, #10
   ba53a:	4630      	mov	r0, r6
   ba53c:	f7ff ff8c 	bl	ba458 <__multadd>
   ba540:	45a0      	cmp	r8, r4
   ba542:	d1f5      	bne.n	ba530 <__s2b+0x4c>
   ba544:	f1a5 0408 	sub.w	r4, r5, #8
   ba548:	444c      	add	r4, r9
   ba54a:	1b2d      	subs	r5, r5, r4
   ba54c:	1963      	adds	r3, r4, r5
   ba54e:	42bb      	cmp	r3, r7
   ba550:	db04      	blt.n	ba55c <__s2b+0x78>
   ba552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba556:	340a      	adds	r4, #10
   ba558:	2509      	movs	r5, #9
   ba55a:	e7f6      	b.n	ba54a <__s2b+0x66>
   ba55c:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba560:	4601      	mov	r1, r0
   ba562:	3b30      	subs	r3, #48	; 0x30
   ba564:	220a      	movs	r2, #10
   ba566:	4630      	mov	r0, r6
   ba568:	f7ff ff76 	bl	ba458 <__multadd>
   ba56c:	e7ee      	b.n	ba54c <__s2b+0x68>
   ba56e:	bf00      	nop
   ba570:	000bb989 	.word	0x000bb989
   ba574:	000bba12 	.word	0x000bba12

000ba578 <__hi0bits>:
   ba578:	0c03      	lsrs	r3, r0, #16
   ba57a:	041b      	lsls	r3, r3, #16
   ba57c:	b9d3      	cbnz	r3, ba5b4 <__hi0bits+0x3c>
   ba57e:	0400      	lsls	r0, r0, #16
   ba580:	2310      	movs	r3, #16
   ba582:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba586:	bf04      	itt	eq
   ba588:	0200      	lsleq	r0, r0, #8
   ba58a:	3308      	addeq	r3, #8
   ba58c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba590:	bf04      	itt	eq
   ba592:	0100      	lsleq	r0, r0, #4
   ba594:	3304      	addeq	r3, #4
   ba596:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba59a:	bf04      	itt	eq
   ba59c:	0080      	lsleq	r0, r0, #2
   ba59e:	3302      	addeq	r3, #2
   ba5a0:	2800      	cmp	r0, #0
   ba5a2:	db05      	blt.n	ba5b0 <__hi0bits+0x38>
   ba5a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba5a8:	f103 0301 	add.w	r3, r3, #1
   ba5ac:	bf08      	it	eq
   ba5ae:	2320      	moveq	r3, #32
   ba5b0:	4618      	mov	r0, r3
   ba5b2:	4770      	bx	lr
   ba5b4:	2300      	movs	r3, #0
   ba5b6:	e7e4      	b.n	ba582 <__hi0bits+0xa>

000ba5b8 <__lo0bits>:
   ba5b8:	6803      	ldr	r3, [r0, #0]
   ba5ba:	f013 0207 	ands.w	r2, r3, #7
   ba5be:	4601      	mov	r1, r0
   ba5c0:	d00b      	beq.n	ba5da <__lo0bits+0x22>
   ba5c2:	07da      	lsls	r2, r3, #31
   ba5c4:	d423      	bmi.n	ba60e <__lo0bits+0x56>
   ba5c6:	0798      	lsls	r0, r3, #30
   ba5c8:	bf49      	itett	mi
   ba5ca:	085b      	lsrmi	r3, r3, #1
   ba5cc:	089b      	lsrpl	r3, r3, #2
   ba5ce:	2001      	movmi	r0, #1
   ba5d0:	600b      	strmi	r3, [r1, #0]
   ba5d2:	bf5c      	itt	pl
   ba5d4:	600b      	strpl	r3, [r1, #0]
   ba5d6:	2002      	movpl	r0, #2
   ba5d8:	4770      	bx	lr
   ba5da:	b298      	uxth	r0, r3
   ba5dc:	b9a8      	cbnz	r0, ba60a <__lo0bits+0x52>
   ba5de:	0c1b      	lsrs	r3, r3, #16
   ba5e0:	2010      	movs	r0, #16
   ba5e2:	b2da      	uxtb	r2, r3
   ba5e4:	b90a      	cbnz	r2, ba5ea <__lo0bits+0x32>
   ba5e6:	3008      	adds	r0, #8
   ba5e8:	0a1b      	lsrs	r3, r3, #8
   ba5ea:	071a      	lsls	r2, r3, #28
   ba5ec:	bf04      	itt	eq
   ba5ee:	091b      	lsreq	r3, r3, #4
   ba5f0:	3004      	addeq	r0, #4
   ba5f2:	079a      	lsls	r2, r3, #30
   ba5f4:	bf04      	itt	eq
   ba5f6:	089b      	lsreq	r3, r3, #2
   ba5f8:	3002      	addeq	r0, #2
   ba5fa:	07da      	lsls	r2, r3, #31
   ba5fc:	d403      	bmi.n	ba606 <__lo0bits+0x4e>
   ba5fe:	085b      	lsrs	r3, r3, #1
   ba600:	f100 0001 	add.w	r0, r0, #1
   ba604:	d005      	beq.n	ba612 <__lo0bits+0x5a>
   ba606:	600b      	str	r3, [r1, #0]
   ba608:	4770      	bx	lr
   ba60a:	4610      	mov	r0, r2
   ba60c:	e7e9      	b.n	ba5e2 <__lo0bits+0x2a>
   ba60e:	2000      	movs	r0, #0
   ba610:	4770      	bx	lr
   ba612:	2020      	movs	r0, #32
   ba614:	4770      	bx	lr
	...

000ba618 <__i2b>:
   ba618:	b510      	push	{r4, lr}
   ba61a:	460c      	mov	r4, r1
   ba61c:	2101      	movs	r1, #1
   ba61e:	f7ff feb9 	bl	ba394 <_Balloc>
   ba622:	4602      	mov	r2, r0
   ba624:	b928      	cbnz	r0, ba632 <__i2b+0x1a>
   ba626:	4b05      	ldr	r3, [pc, #20]	; (ba63c <__i2b+0x24>)
   ba628:	4805      	ldr	r0, [pc, #20]	; (ba640 <__i2b+0x28>)
   ba62a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba62e:	f7fc fb1f 	bl	b6c70 <__assert_func>
   ba632:	2301      	movs	r3, #1
   ba634:	6144      	str	r4, [r0, #20]
   ba636:	6103      	str	r3, [r0, #16]
   ba638:	bd10      	pop	{r4, pc}
   ba63a:	bf00      	nop
   ba63c:	000bb989 	.word	0x000bb989
   ba640:	000bba12 	.word	0x000bba12

000ba644 <__multiply>:
   ba644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba648:	4691      	mov	r9, r2
   ba64a:	690a      	ldr	r2, [r1, #16]
   ba64c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba650:	429a      	cmp	r2, r3
   ba652:	bfb8      	it	lt
   ba654:	460b      	movlt	r3, r1
   ba656:	460c      	mov	r4, r1
   ba658:	bfbc      	itt	lt
   ba65a:	464c      	movlt	r4, r9
   ba65c:	4699      	movlt	r9, r3
   ba65e:	6927      	ldr	r7, [r4, #16]
   ba660:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba664:	68a3      	ldr	r3, [r4, #8]
   ba666:	6861      	ldr	r1, [r4, #4]
   ba668:	eb07 060a 	add.w	r6, r7, sl
   ba66c:	42b3      	cmp	r3, r6
   ba66e:	b085      	sub	sp, #20
   ba670:	bfb8      	it	lt
   ba672:	3101      	addlt	r1, #1
   ba674:	f7ff fe8e 	bl	ba394 <_Balloc>
   ba678:	b930      	cbnz	r0, ba688 <__multiply+0x44>
   ba67a:	4602      	mov	r2, r0
   ba67c:	4b44      	ldr	r3, [pc, #272]	; (ba790 <__multiply+0x14c>)
   ba67e:	4845      	ldr	r0, [pc, #276]	; (ba794 <__multiply+0x150>)
   ba680:	f240 115d 	movw	r1, #349	; 0x15d
   ba684:	f7fc faf4 	bl	b6c70 <__assert_func>
   ba688:	f100 0514 	add.w	r5, r0, #20
   ba68c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba690:	462b      	mov	r3, r5
   ba692:	2200      	movs	r2, #0
   ba694:	4543      	cmp	r3, r8
   ba696:	d321      	bcc.n	ba6dc <__multiply+0x98>
   ba698:	f104 0314 	add.w	r3, r4, #20
   ba69c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba6a0:	f109 0314 	add.w	r3, r9, #20
   ba6a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba6a8:	9202      	str	r2, [sp, #8]
   ba6aa:	1b3a      	subs	r2, r7, r4
   ba6ac:	3a15      	subs	r2, #21
   ba6ae:	f022 0203 	bic.w	r2, r2, #3
   ba6b2:	3204      	adds	r2, #4
   ba6b4:	f104 0115 	add.w	r1, r4, #21
   ba6b8:	428f      	cmp	r7, r1
   ba6ba:	bf38      	it	cc
   ba6bc:	2204      	movcc	r2, #4
   ba6be:	9201      	str	r2, [sp, #4]
   ba6c0:	9a02      	ldr	r2, [sp, #8]
   ba6c2:	9303      	str	r3, [sp, #12]
   ba6c4:	429a      	cmp	r2, r3
   ba6c6:	d80c      	bhi.n	ba6e2 <__multiply+0x9e>
   ba6c8:	2e00      	cmp	r6, #0
   ba6ca:	dd03      	ble.n	ba6d4 <__multiply+0x90>
   ba6cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba6d0:	2b00      	cmp	r3, #0
   ba6d2:	d05a      	beq.n	ba78a <__multiply+0x146>
   ba6d4:	6106      	str	r6, [r0, #16]
   ba6d6:	b005      	add	sp, #20
   ba6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba6dc:	f843 2b04 	str.w	r2, [r3], #4
   ba6e0:	e7d8      	b.n	ba694 <__multiply+0x50>
   ba6e2:	f8b3 a000 	ldrh.w	sl, [r3]
   ba6e6:	f1ba 0f00 	cmp.w	sl, #0
   ba6ea:	d024      	beq.n	ba736 <__multiply+0xf2>
   ba6ec:	f104 0e14 	add.w	lr, r4, #20
   ba6f0:	46a9      	mov	r9, r5
   ba6f2:	f04f 0c00 	mov.w	ip, #0
   ba6f6:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba6fa:	f8d9 1000 	ldr.w	r1, [r9]
   ba6fe:	fa1f fb82 	uxth.w	fp, r2
   ba702:	b289      	uxth	r1, r1
   ba704:	fb0a 110b 	mla	r1, sl, fp, r1
   ba708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba70c:	f8d9 2000 	ldr.w	r2, [r9]
   ba710:	4461      	add	r1, ip
   ba712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba716:	fb0a c20b 	mla	r2, sl, fp, ip
   ba71a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   ba71e:	b289      	uxth	r1, r1
   ba720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   ba724:	4577      	cmp	r7, lr
   ba726:	f849 1b04 	str.w	r1, [r9], #4
   ba72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba72e:	d8e2      	bhi.n	ba6f6 <__multiply+0xb2>
   ba730:	9a01      	ldr	r2, [sp, #4]
   ba732:	f845 c002 	str.w	ip, [r5, r2]
   ba736:	9a03      	ldr	r2, [sp, #12]
   ba738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   ba73c:	3304      	adds	r3, #4
   ba73e:	f1b9 0f00 	cmp.w	r9, #0
   ba742:	d020      	beq.n	ba786 <__multiply+0x142>
   ba744:	6829      	ldr	r1, [r5, #0]
   ba746:	f104 0c14 	add.w	ip, r4, #20
   ba74a:	46ae      	mov	lr, r5
   ba74c:	f04f 0a00 	mov.w	sl, #0
   ba750:	f8bc b000 	ldrh.w	fp, [ip]
   ba754:	f8be 2002 	ldrh.w	r2, [lr, #2]
   ba758:	fb09 220b 	mla	r2, r9, fp, r2
   ba75c:	4492      	add	sl, r2
   ba75e:	b289      	uxth	r1, r1
   ba760:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   ba764:	f84e 1b04 	str.w	r1, [lr], #4
   ba768:	f85c 2b04 	ldr.w	r2, [ip], #4
   ba76c:	f8be 1000 	ldrh.w	r1, [lr]
   ba770:	0c12      	lsrs	r2, r2, #16
   ba772:	fb09 1102 	mla	r1, r9, r2, r1
   ba776:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   ba77a:	4567      	cmp	r7, ip
   ba77c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   ba780:	d8e6      	bhi.n	ba750 <__multiply+0x10c>
   ba782:	9a01      	ldr	r2, [sp, #4]
   ba784:	50a9      	str	r1, [r5, r2]
   ba786:	3504      	adds	r5, #4
   ba788:	e79a      	b.n	ba6c0 <__multiply+0x7c>
   ba78a:	3e01      	subs	r6, #1
   ba78c:	e79c      	b.n	ba6c8 <__multiply+0x84>
   ba78e:	bf00      	nop
   ba790:	000bb989 	.word	0x000bb989
   ba794:	000bba12 	.word	0x000bba12

000ba798 <__pow5mult>:
   ba798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba79c:	4615      	mov	r5, r2
   ba79e:	f012 0203 	ands.w	r2, r2, #3
   ba7a2:	4606      	mov	r6, r0
   ba7a4:	460f      	mov	r7, r1
   ba7a6:	d007      	beq.n	ba7b8 <__pow5mult+0x20>
   ba7a8:	4c25      	ldr	r4, [pc, #148]	; (ba840 <__pow5mult+0xa8>)
   ba7aa:	3a01      	subs	r2, #1
   ba7ac:	2300      	movs	r3, #0
   ba7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ba7b2:	f7ff fe51 	bl	ba458 <__multadd>
   ba7b6:	4607      	mov	r7, r0
   ba7b8:	10ad      	asrs	r5, r5, #2
   ba7ba:	d03d      	beq.n	ba838 <__pow5mult+0xa0>
   ba7bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba7be:	b97c      	cbnz	r4, ba7e0 <__pow5mult+0x48>
   ba7c0:	2010      	movs	r0, #16
   ba7c2:	f7fc fa15 	bl	b6bf0 <malloc>
   ba7c6:	4602      	mov	r2, r0
   ba7c8:	6270      	str	r0, [r6, #36]	; 0x24
   ba7ca:	b928      	cbnz	r0, ba7d8 <__pow5mult+0x40>
   ba7cc:	4b1d      	ldr	r3, [pc, #116]	; (ba844 <__pow5mult+0xac>)
   ba7ce:	481e      	ldr	r0, [pc, #120]	; (ba848 <__pow5mult+0xb0>)
   ba7d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   ba7d4:	f7fc fa4c 	bl	b6c70 <__assert_func>
   ba7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba7dc:	6004      	str	r4, [r0, #0]
   ba7de:	60c4      	str	r4, [r0, #12]
   ba7e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ba7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ba7e8:	b94c      	cbnz	r4, ba7fe <__pow5mult+0x66>
   ba7ea:	f240 2171 	movw	r1, #625	; 0x271
   ba7ee:	4630      	mov	r0, r6
   ba7f0:	f7ff ff12 	bl	ba618 <__i2b>
   ba7f4:	2300      	movs	r3, #0
   ba7f6:	f8c8 0008 	str.w	r0, [r8, #8]
   ba7fa:	4604      	mov	r4, r0
   ba7fc:	6003      	str	r3, [r0, #0]
   ba7fe:	f04f 0900 	mov.w	r9, #0
   ba802:	07eb      	lsls	r3, r5, #31
   ba804:	d50a      	bpl.n	ba81c <__pow5mult+0x84>
   ba806:	4639      	mov	r1, r7
   ba808:	4622      	mov	r2, r4
   ba80a:	4630      	mov	r0, r6
   ba80c:	f7ff ff1a 	bl	ba644 <__multiply>
   ba810:	4639      	mov	r1, r7
   ba812:	4680      	mov	r8, r0
   ba814:	4630      	mov	r0, r6
   ba816:	f7ff fdfd 	bl	ba414 <_Bfree>
   ba81a:	4647      	mov	r7, r8
   ba81c:	106d      	asrs	r5, r5, #1
   ba81e:	d00b      	beq.n	ba838 <__pow5mult+0xa0>
   ba820:	6820      	ldr	r0, [r4, #0]
   ba822:	b938      	cbnz	r0, ba834 <__pow5mult+0x9c>
   ba824:	4622      	mov	r2, r4
   ba826:	4621      	mov	r1, r4
   ba828:	4630      	mov	r0, r6
   ba82a:	f7ff ff0b 	bl	ba644 <__multiply>
   ba82e:	6020      	str	r0, [r4, #0]
   ba830:	f8c0 9000 	str.w	r9, [r0]
   ba834:	4604      	mov	r4, r0
   ba836:	e7e4      	b.n	ba802 <__pow5mult+0x6a>
   ba838:	4638      	mov	r0, r7
   ba83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba83e:	bf00      	nop
   ba840:	000bbb60 	.word	0x000bbb60
   ba844:	000bb762 	.word	0x000bb762
   ba848:	000bba12 	.word	0x000bba12

000ba84c <__lshift>:
   ba84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba850:	460c      	mov	r4, r1
   ba852:	6849      	ldr	r1, [r1, #4]
   ba854:	6923      	ldr	r3, [r4, #16]
   ba856:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ba85a:	68a3      	ldr	r3, [r4, #8]
   ba85c:	4607      	mov	r7, r0
   ba85e:	4691      	mov	r9, r2
   ba860:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ba864:	f108 0601 	add.w	r6, r8, #1
   ba868:	42b3      	cmp	r3, r6
   ba86a:	db0b      	blt.n	ba884 <__lshift+0x38>
   ba86c:	4638      	mov	r0, r7
   ba86e:	f7ff fd91 	bl	ba394 <_Balloc>
   ba872:	4605      	mov	r5, r0
   ba874:	b948      	cbnz	r0, ba88a <__lshift+0x3e>
   ba876:	4602      	mov	r2, r0
   ba878:	4b2a      	ldr	r3, [pc, #168]	; (ba924 <__lshift+0xd8>)
   ba87a:	482b      	ldr	r0, [pc, #172]	; (ba928 <__lshift+0xdc>)
   ba87c:	f240 11d9 	movw	r1, #473	; 0x1d9
   ba880:	f7fc f9f6 	bl	b6c70 <__assert_func>
   ba884:	3101      	adds	r1, #1
   ba886:	005b      	lsls	r3, r3, #1
   ba888:	e7ee      	b.n	ba868 <__lshift+0x1c>
   ba88a:	2300      	movs	r3, #0
   ba88c:	f100 0114 	add.w	r1, r0, #20
   ba890:	f100 0210 	add.w	r2, r0, #16
   ba894:	4618      	mov	r0, r3
   ba896:	4553      	cmp	r3, sl
   ba898:	db37      	blt.n	ba90a <__lshift+0xbe>
   ba89a:	6920      	ldr	r0, [r4, #16]
   ba89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ba8a0:	f104 0314 	add.w	r3, r4, #20
   ba8a4:	f019 091f 	ands.w	r9, r9, #31
   ba8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ba8ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   ba8b0:	d02f      	beq.n	ba912 <__lshift+0xc6>
   ba8b2:	f1c9 0e20 	rsb	lr, r9, #32
   ba8b6:	468a      	mov	sl, r1
   ba8b8:	f04f 0c00 	mov.w	ip, #0
   ba8bc:	681a      	ldr	r2, [r3, #0]
   ba8be:	fa02 f209 	lsl.w	r2, r2, r9
   ba8c2:	ea42 020c 	orr.w	r2, r2, ip
   ba8c6:	f84a 2b04 	str.w	r2, [sl], #4
   ba8ca:	f853 2b04 	ldr.w	r2, [r3], #4
   ba8ce:	4298      	cmp	r0, r3
   ba8d0:	fa22 fc0e 	lsr.w	ip, r2, lr
   ba8d4:	d8f2      	bhi.n	ba8bc <__lshift+0x70>
   ba8d6:	1b03      	subs	r3, r0, r4
   ba8d8:	3b15      	subs	r3, #21
   ba8da:	f023 0303 	bic.w	r3, r3, #3
   ba8de:	3304      	adds	r3, #4
   ba8e0:	f104 0215 	add.w	r2, r4, #21
   ba8e4:	4290      	cmp	r0, r2
   ba8e6:	bf38      	it	cc
   ba8e8:	2304      	movcc	r3, #4
   ba8ea:	f841 c003 	str.w	ip, [r1, r3]
   ba8ee:	f1bc 0f00 	cmp.w	ip, #0
   ba8f2:	d001      	beq.n	ba8f8 <__lshift+0xac>
   ba8f4:	f108 0602 	add.w	r6, r8, #2
   ba8f8:	3e01      	subs	r6, #1
   ba8fa:	4638      	mov	r0, r7
   ba8fc:	612e      	str	r6, [r5, #16]
   ba8fe:	4621      	mov	r1, r4
   ba900:	f7ff fd88 	bl	ba414 <_Bfree>
   ba904:	4628      	mov	r0, r5
   ba906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba90a:	f842 0f04 	str.w	r0, [r2, #4]!
   ba90e:	3301      	adds	r3, #1
   ba910:	e7c1      	b.n	ba896 <__lshift+0x4a>
   ba912:	3904      	subs	r1, #4
   ba914:	f853 2b04 	ldr.w	r2, [r3], #4
   ba918:	f841 2f04 	str.w	r2, [r1, #4]!
   ba91c:	4298      	cmp	r0, r3
   ba91e:	d8f9      	bhi.n	ba914 <__lshift+0xc8>
   ba920:	e7ea      	b.n	ba8f8 <__lshift+0xac>
   ba922:	bf00      	nop
   ba924:	000bb989 	.word	0x000bb989
   ba928:	000bba12 	.word	0x000bba12

000ba92c <__mcmp>:
   ba92c:	b530      	push	{r4, r5, lr}
   ba92e:	6902      	ldr	r2, [r0, #16]
   ba930:	690c      	ldr	r4, [r1, #16]
   ba932:	1b12      	subs	r2, r2, r4
   ba934:	d10e      	bne.n	ba954 <__mcmp+0x28>
   ba936:	f100 0314 	add.w	r3, r0, #20
   ba93a:	3114      	adds	r1, #20
   ba93c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ba940:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ba944:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ba948:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ba94c:	42a5      	cmp	r5, r4
   ba94e:	d003      	beq.n	ba958 <__mcmp+0x2c>
   ba950:	d305      	bcc.n	ba95e <__mcmp+0x32>
   ba952:	2201      	movs	r2, #1
   ba954:	4610      	mov	r0, r2
   ba956:	bd30      	pop	{r4, r5, pc}
   ba958:	4283      	cmp	r3, r0
   ba95a:	d3f3      	bcc.n	ba944 <__mcmp+0x18>
   ba95c:	e7fa      	b.n	ba954 <__mcmp+0x28>
   ba95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba962:	e7f7      	b.n	ba954 <__mcmp+0x28>

000ba964 <__mdiff>:
   ba964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba968:	460c      	mov	r4, r1
   ba96a:	4606      	mov	r6, r0
   ba96c:	4611      	mov	r1, r2
   ba96e:	4620      	mov	r0, r4
   ba970:	4690      	mov	r8, r2
   ba972:	f7ff ffdb 	bl	ba92c <__mcmp>
   ba976:	1e05      	subs	r5, r0, #0
   ba978:	d110      	bne.n	ba99c <__mdiff+0x38>
   ba97a:	4629      	mov	r1, r5
   ba97c:	4630      	mov	r0, r6
   ba97e:	f7ff fd09 	bl	ba394 <_Balloc>
   ba982:	b930      	cbnz	r0, ba992 <__mdiff+0x2e>
   ba984:	4b3a      	ldr	r3, [pc, #232]	; (baa70 <__mdiff+0x10c>)
   ba986:	4602      	mov	r2, r0
   ba988:	f240 2132 	movw	r1, #562	; 0x232
   ba98c:	4839      	ldr	r0, [pc, #228]	; (baa74 <__mdiff+0x110>)
   ba98e:	f7fc f96f 	bl	b6c70 <__assert_func>
   ba992:	2301      	movs	r3, #1
   ba994:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ba998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba99c:	bfa4      	itt	ge
   ba99e:	4643      	movge	r3, r8
   ba9a0:	46a0      	movge	r8, r4
   ba9a2:	4630      	mov	r0, r6
   ba9a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ba9a8:	bfa6      	itte	ge
   ba9aa:	461c      	movge	r4, r3
   ba9ac:	2500      	movge	r5, #0
   ba9ae:	2501      	movlt	r5, #1
   ba9b0:	f7ff fcf0 	bl	ba394 <_Balloc>
   ba9b4:	b920      	cbnz	r0, ba9c0 <__mdiff+0x5c>
   ba9b6:	4b2e      	ldr	r3, [pc, #184]	; (baa70 <__mdiff+0x10c>)
   ba9b8:	4602      	mov	r2, r0
   ba9ba:	f44f 7110 	mov.w	r1, #576	; 0x240
   ba9be:	e7e5      	b.n	ba98c <__mdiff+0x28>
   ba9c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   ba9c4:	6926      	ldr	r6, [r4, #16]
   ba9c6:	60c5      	str	r5, [r0, #12]
   ba9c8:	f104 0914 	add.w	r9, r4, #20
   ba9cc:	f108 0514 	add.w	r5, r8, #20
   ba9d0:	f100 0e14 	add.w	lr, r0, #20
   ba9d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   ba9d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   ba9dc:	f108 0210 	add.w	r2, r8, #16
   ba9e0:	46f2      	mov	sl, lr
   ba9e2:	2100      	movs	r1, #0
   ba9e4:	f859 3b04 	ldr.w	r3, [r9], #4
   ba9e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ba9ec:	fa1f f883 	uxth.w	r8, r3
   ba9f0:	fa11 f18b 	uxtah	r1, r1, fp
   ba9f4:	0c1b      	lsrs	r3, r3, #16
   ba9f6:	eba1 0808 	sub.w	r8, r1, r8
   ba9fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba9fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   baa02:	fa1f f888 	uxth.w	r8, r8
   baa06:	1419      	asrs	r1, r3, #16
   baa08:	454e      	cmp	r6, r9
   baa0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   baa0e:	f84a 3b04 	str.w	r3, [sl], #4
   baa12:	d8e7      	bhi.n	ba9e4 <__mdiff+0x80>
   baa14:	1b33      	subs	r3, r6, r4
   baa16:	3b15      	subs	r3, #21
   baa18:	f023 0303 	bic.w	r3, r3, #3
   baa1c:	3304      	adds	r3, #4
   baa1e:	3415      	adds	r4, #21
   baa20:	42a6      	cmp	r6, r4
   baa22:	bf38      	it	cc
   baa24:	2304      	movcc	r3, #4
   baa26:	441d      	add	r5, r3
   baa28:	4473      	add	r3, lr
   baa2a:	469e      	mov	lr, r3
   baa2c:	462e      	mov	r6, r5
   baa2e:	4566      	cmp	r6, ip
   baa30:	d30e      	bcc.n	baa50 <__mdiff+0xec>
   baa32:	f10c 0203 	add.w	r2, ip, #3
   baa36:	1b52      	subs	r2, r2, r5
   baa38:	f022 0203 	bic.w	r2, r2, #3
   baa3c:	3d03      	subs	r5, #3
   baa3e:	45ac      	cmp	ip, r5
   baa40:	bf38      	it	cc
   baa42:	2200      	movcc	r2, #0
   baa44:	441a      	add	r2, r3
   baa46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   baa4a:	b17b      	cbz	r3, baa6c <__mdiff+0x108>
   baa4c:	6107      	str	r7, [r0, #16]
   baa4e:	e7a3      	b.n	ba998 <__mdiff+0x34>
   baa50:	f856 8b04 	ldr.w	r8, [r6], #4
   baa54:	fa11 f288 	uxtah	r2, r1, r8
   baa58:	1414      	asrs	r4, r2, #16
   baa5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   baa5e:	b292      	uxth	r2, r2
   baa60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   baa64:	f84e 2b04 	str.w	r2, [lr], #4
   baa68:	1421      	asrs	r1, r4, #16
   baa6a:	e7e0      	b.n	baa2e <__mdiff+0xca>
   baa6c:	3f01      	subs	r7, #1
   baa6e:	e7ea      	b.n	baa46 <__mdiff+0xe2>
   baa70:	000bb989 	.word	0x000bb989
   baa74:	000bba12 	.word	0x000bba12

000baa78 <__ulp>:
   baa78:	b082      	sub	sp, #8
   baa7a:	ed8d 0b00 	vstr	d0, [sp]
   baa7e:	9b01      	ldr	r3, [sp, #4]
   baa80:	4912      	ldr	r1, [pc, #72]	; (baacc <__ulp+0x54>)
   baa82:	4019      	ands	r1, r3
   baa84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   baa88:	2900      	cmp	r1, #0
   baa8a:	dd05      	ble.n	baa98 <__ulp+0x20>
   baa8c:	2200      	movs	r2, #0
   baa8e:	460b      	mov	r3, r1
   baa90:	ec43 2b10 	vmov	d0, r2, r3
   baa94:	b002      	add	sp, #8
   baa96:	4770      	bx	lr
   baa98:	4249      	negs	r1, r1
   baa9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   baa9e:	ea4f 5021 	mov.w	r0, r1, asr #20
   baaa2:	f04f 0200 	mov.w	r2, #0
   baaa6:	f04f 0300 	mov.w	r3, #0
   baaaa:	da04      	bge.n	baab6 <__ulp+0x3e>
   baaac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   baab0:	fa41 f300 	asr.w	r3, r1, r0
   baab4:	e7ec      	b.n	baa90 <__ulp+0x18>
   baab6:	f1a0 0114 	sub.w	r1, r0, #20
   baaba:	291e      	cmp	r1, #30
   baabc:	bfda      	itte	le
   baabe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   baac2:	fa20 f101 	lsrle.w	r1, r0, r1
   baac6:	2101      	movgt	r1, #1
   baac8:	460a      	mov	r2, r1
   baaca:	e7e1      	b.n	baa90 <__ulp+0x18>
   baacc:	7ff00000 	.word	0x7ff00000

000baad0 <__b2d>:
   baad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baad2:	6905      	ldr	r5, [r0, #16]
   baad4:	f100 0714 	add.w	r7, r0, #20
   baad8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   baadc:	1f2e      	subs	r6, r5, #4
   baade:	f855 4c04 	ldr.w	r4, [r5, #-4]
   baae2:	4620      	mov	r0, r4
   baae4:	f7ff fd48 	bl	ba578 <__hi0bits>
   baae8:	f1c0 0320 	rsb	r3, r0, #32
   baaec:	280a      	cmp	r0, #10
   baaee:	f8df c07c 	ldr.w	ip, [pc, #124]	; bab6c <__b2d+0x9c>
   baaf2:	600b      	str	r3, [r1, #0]
   baaf4:	dc14      	bgt.n	bab20 <__b2d+0x50>
   baaf6:	f1c0 0e0b 	rsb	lr, r0, #11
   baafa:	fa24 f10e 	lsr.w	r1, r4, lr
   baafe:	42b7      	cmp	r7, r6
   bab00:	ea41 030c 	orr.w	r3, r1, ip
   bab04:	bf34      	ite	cc
   bab06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bab0a:	2100      	movcs	r1, #0
   bab0c:	3015      	adds	r0, #21
   bab0e:	fa04 f000 	lsl.w	r0, r4, r0
   bab12:	fa21 f10e 	lsr.w	r1, r1, lr
   bab16:	ea40 0201 	orr.w	r2, r0, r1
   bab1a:	ec43 2b10 	vmov	d0, r2, r3
   bab1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bab20:	42b7      	cmp	r7, r6
   bab22:	bf3a      	itte	cc
   bab24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bab28:	f1a5 0608 	subcc.w	r6, r5, #8
   bab2c:	2100      	movcs	r1, #0
   bab2e:	380b      	subs	r0, #11
   bab30:	d017      	beq.n	bab62 <__b2d+0x92>
   bab32:	f1c0 0c20 	rsb	ip, r0, #32
   bab36:	fa04 f500 	lsl.w	r5, r4, r0
   bab3a:	42be      	cmp	r6, r7
   bab3c:	fa21 f40c 	lsr.w	r4, r1, ip
   bab40:	ea45 0504 	orr.w	r5, r5, r4
   bab44:	bf8c      	ite	hi
   bab46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bab4a:	2400      	movls	r4, #0
   bab4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bab50:	fa01 f000 	lsl.w	r0, r1, r0
   bab54:	fa24 f40c 	lsr.w	r4, r4, ip
   bab58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bab5c:	ea40 0204 	orr.w	r2, r0, r4
   bab60:	e7db      	b.n	bab1a <__b2d+0x4a>
   bab62:	ea44 030c 	orr.w	r3, r4, ip
   bab66:	460a      	mov	r2, r1
   bab68:	e7d7      	b.n	bab1a <__b2d+0x4a>
   bab6a:	bf00      	nop
   bab6c:	3ff00000 	.word	0x3ff00000

000bab70 <__d2b>:
   bab70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bab74:	4689      	mov	r9, r1
   bab76:	2101      	movs	r1, #1
   bab78:	ec57 6b10 	vmov	r6, r7, d0
   bab7c:	4690      	mov	r8, r2
   bab7e:	f7ff fc09 	bl	ba394 <_Balloc>
   bab82:	4604      	mov	r4, r0
   bab84:	b930      	cbnz	r0, bab94 <__d2b+0x24>
   bab86:	4602      	mov	r2, r0
   bab88:	4b25      	ldr	r3, [pc, #148]	; (bac20 <__d2b+0xb0>)
   bab8a:	4826      	ldr	r0, [pc, #152]	; (bac24 <__d2b+0xb4>)
   bab8c:	f240 310a 	movw	r1, #778	; 0x30a
   bab90:	f7fc f86e 	bl	b6c70 <__assert_func>
   bab94:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bab98:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bab9c:	bb35      	cbnz	r5, babec <__d2b+0x7c>
   bab9e:	2e00      	cmp	r6, #0
   baba0:	9301      	str	r3, [sp, #4]
   baba2:	d028      	beq.n	babf6 <__d2b+0x86>
   baba4:	4668      	mov	r0, sp
   baba6:	9600      	str	r6, [sp, #0]
   baba8:	f7ff fd06 	bl	ba5b8 <__lo0bits>
   babac:	9900      	ldr	r1, [sp, #0]
   babae:	b300      	cbz	r0, babf2 <__d2b+0x82>
   babb0:	9a01      	ldr	r2, [sp, #4]
   babb2:	f1c0 0320 	rsb	r3, r0, #32
   babb6:	fa02 f303 	lsl.w	r3, r2, r3
   babba:	430b      	orrs	r3, r1
   babbc:	40c2      	lsrs	r2, r0
   babbe:	6163      	str	r3, [r4, #20]
   babc0:	9201      	str	r2, [sp, #4]
   babc2:	9b01      	ldr	r3, [sp, #4]
   babc4:	61a3      	str	r3, [r4, #24]
   babc6:	2b00      	cmp	r3, #0
   babc8:	bf14      	ite	ne
   babca:	2202      	movne	r2, #2
   babcc:	2201      	moveq	r2, #1
   babce:	6122      	str	r2, [r4, #16]
   babd0:	b1d5      	cbz	r5, bac08 <__d2b+0x98>
   babd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   babd6:	4405      	add	r5, r0
   babd8:	f8c9 5000 	str.w	r5, [r9]
   babdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   babe0:	f8c8 0000 	str.w	r0, [r8]
   babe4:	4620      	mov	r0, r4
   babe6:	b003      	add	sp, #12
   babe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   babec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   babf0:	e7d5      	b.n	bab9e <__d2b+0x2e>
   babf2:	6161      	str	r1, [r4, #20]
   babf4:	e7e5      	b.n	babc2 <__d2b+0x52>
   babf6:	a801      	add	r0, sp, #4
   babf8:	f7ff fcde 	bl	ba5b8 <__lo0bits>
   babfc:	9b01      	ldr	r3, [sp, #4]
   babfe:	6163      	str	r3, [r4, #20]
   bac00:	2201      	movs	r2, #1
   bac02:	6122      	str	r2, [r4, #16]
   bac04:	3020      	adds	r0, #32
   bac06:	e7e3      	b.n	babd0 <__d2b+0x60>
   bac08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bac0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bac10:	f8c9 0000 	str.w	r0, [r9]
   bac14:	6918      	ldr	r0, [r3, #16]
   bac16:	f7ff fcaf 	bl	ba578 <__hi0bits>
   bac1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bac1e:	e7df      	b.n	babe0 <__d2b+0x70>
   bac20:	000bb989 	.word	0x000bb989
   bac24:	000bba12 	.word	0x000bba12

000bac28 <__ratio>:
   bac28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac2c:	4688      	mov	r8, r1
   bac2e:	4669      	mov	r1, sp
   bac30:	4681      	mov	r9, r0
   bac32:	f7ff ff4d 	bl	baad0 <__b2d>
   bac36:	a901      	add	r1, sp, #4
   bac38:	4640      	mov	r0, r8
   bac3a:	ec55 4b10 	vmov	r4, r5, d0
   bac3e:	f7ff ff47 	bl	baad0 <__b2d>
   bac42:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bac46:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bac4a:	eba3 0c02 	sub.w	ip, r3, r2
   bac4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bac52:	1a9b      	subs	r3, r3, r2
   bac54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bac58:	ec51 0b10 	vmov	r0, r1, d0
   bac5c:	2b00      	cmp	r3, #0
   bac5e:	bfd6      	itet	le
   bac60:	460a      	movle	r2, r1
   bac62:	462a      	movgt	r2, r5
   bac64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bac68:	468b      	mov	fp, r1
   bac6a:	462f      	mov	r7, r5
   bac6c:	bfd4      	ite	le
   bac6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bac72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bac76:	4620      	mov	r0, r4
   bac78:	ee10 2a10 	vmov	r2, s0
   bac7c:	465b      	mov	r3, fp
   bac7e:	4639      	mov	r1, r7
   bac80:	f7fd fdd8 	bl	b8834 <__aeabi_ddiv>
   bac84:	ec41 0b10 	vmov	d0, r0, r1
   bac88:	b003      	add	sp, #12
   bac8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bac8e <__copybits>:
   bac8e:	3901      	subs	r1, #1
   bac90:	b570      	push	{r4, r5, r6, lr}
   bac92:	1149      	asrs	r1, r1, #5
   bac94:	6914      	ldr	r4, [r2, #16]
   bac96:	3101      	adds	r1, #1
   bac98:	f102 0314 	add.w	r3, r2, #20
   bac9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   baca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   baca4:	1f05      	subs	r5, r0, #4
   baca6:	42a3      	cmp	r3, r4
   baca8:	d30c      	bcc.n	bacc4 <__copybits+0x36>
   bacaa:	1aa3      	subs	r3, r4, r2
   bacac:	3b11      	subs	r3, #17
   bacae:	f023 0303 	bic.w	r3, r3, #3
   bacb2:	3211      	adds	r2, #17
   bacb4:	42a2      	cmp	r2, r4
   bacb6:	bf88      	it	hi
   bacb8:	2300      	movhi	r3, #0
   bacba:	4418      	add	r0, r3
   bacbc:	2300      	movs	r3, #0
   bacbe:	4288      	cmp	r0, r1
   bacc0:	d305      	bcc.n	bacce <__copybits+0x40>
   bacc2:	bd70      	pop	{r4, r5, r6, pc}
   bacc4:	f853 6b04 	ldr.w	r6, [r3], #4
   bacc8:	f845 6f04 	str.w	r6, [r5, #4]!
   baccc:	e7eb      	b.n	baca6 <__copybits+0x18>
   bacce:	f840 3b04 	str.w	r3, [r0], #4
   bacd2:	e7f4      	b.n	bacbe <__copybits+0x30>

000bacd4 <__any_on>:
   bacd4:	f100 0214 	add.w	r2, r0, #20
   bacd8:	6900      	ldr	r0, [r0, #16]
   bacda:	114b      	asrs	r3, r1, #5
   bacdc:	4298      	cmp	r0, r3
   bacde:	b510      	push	{r4, lr}
   bace0:	db11      	blt.n	bad06 <__any_on+0x32>
   bace2:	dd0a      	ble.n	bacfa <__any_on+0x26>
   bace4:	f011 011f 	ands.w	r1, r1, #31
   bace8:	d007      	beq.n	bacfa <__any_on+0x26>
   bacea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bacee:	fa24 f001 	lsr.w	r0, r4, r1
   bacf2:	fa00 f101 	lsl.w	r1, r0, r1
   bacf6:	428c      	cmp	r4, r1
   bacf8:	d10b      	bne.n	bad12 <__any_on+0x3e>
   bacfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bacfe:	4293      	cmp	r3, r2
   bad00:	d803      	bhi.n	bad0a <__any_on+0x36>
   bad02:	2000      	movs	r0, #0
   bad04:	bd10      	pop	{r4, pc}
   bad06:	4603      	mov	r3, r0
   bad08:	e7f7      	b.n	bacfa <__any_on+0x26>
   bad0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bad0e:	2900      	cmp	r1, #0
   bad10:	d0f5      	beq.n	bacfe <__any_on+0x2a>
   bad12:	2001      	movs	r0, #1
   bad14:	e7f6      	b.n	bad04 <__any_on+0x30>

000bad16 <_calloc_r>:
   bad16:	b513      	push	{r0, r1, r4, lr}
   bad18:	434a      	muls	r2, r1
   bad1a:	4611      	mov	r1, r2
   bad1c:	9201      	str	r2, [sp, #4]
   bad1e:	f7fb ff97 	bl	b6c50 <_malloc_r>
   bad22:	4604      	mov	r4, r0
   bad24:	b118      	cbz	r0, bad2e <_calloc_r+0x18>
   bad26:	9a01      	ldr	r2, [sp, #4]
   bad28:	2100      	movs	r1, #0
   bad2a:	f7fd fffb 	bl	b8d24 <memset>
   bad2e:	4620      	mov	r0, r4
   bad30:	b002      	add	sp, #8
   bad32:	bd10      	pop	{r4, pc}
   bad34:	0000      	movs	r0, r0
	...

000bad38 <nan>:
   bad38:	ed9f 0b01 	vldr	d0, [pc, #4]	; bad40 <nan+0x8>
   bad3c:	4770      	bx	lr
   bad3e:	bf00      	nop
   bad40:	00000000 	.word	0x00000000
   bad44:	7ff80000 	.word	0x7ff80000

000bad48 <__ascii_wctomb>:
   bad48:	b149      	cbz	r1, bad5e <__ascii_wctomb+0x16>
   bad4a:	2aff      	cmp	r2, #255	; 0xff
   bad4c:	bf85      	ittet	hi
   bad4e:	238a      	movhi	r3, #138	; 0x8a
   bad50:	6003      	strhi	r3, [r0, #0]
   bad52:	700a      	strbls	r2, [r1, #0]
   bad54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bad58:	bf98      	it	ls
   bad5a:	2001      	movls	r0, #1
   bad5c:	4770      	bx	lr
   bad5e:	4608      	mov	r0, r1
   bad60:	4770      	bx	lr
	...

000bad64 <__aeabi_d2lz>:
   bad64:	b538      	push	{r3, r4, r5, lr}
   bad66:	2200      	movs	r2, #0
   bad68:	2300      	movs	r3, #0
   bad6a:	4604      	mov	r4, r0
   bad6c:	460d      	mov	r5, r1
   bad6e:	f7fd fea9 	bl	b8ac4 <__aeabi_dcmplt>
   bad72:	b928      	cbnz	r0, bad80 <__aeabi_d2lz+0x1c>
   bad74:	4620      	mov	r0, r4
   bad76:	4629      	mov	r1, r5
   bad78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bad7c:	f7fd bf3a 	b.w	b8bf4 <__aeabi_d2ulz>
   bad80:	4620      	mov	r0, r4
   bad82:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bad86:	f7fd ff35 	bl	b8bf4 <__aeabi_d2ulz>
   bad8a:	4240      	negs	r0, r0
   bad8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bad90:	bd38      	pop	{r3, r4, r5, pc}
   bad92:	bf00      	nop

000bad94 <dynalib_user>:
   bad94:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bada4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   badb4:	7620 7269 7574 6c61 5500 6b6e 6f6e 6e77      virtual.Unknown
   badc4:	4e00 746f 4320 6168 6772 6e69 0067 6843     .Not Charging.Ch
   badd4:	7261 6567 0064 6944 6373 6168 6772 6e69     arged.Dischargin
   bade4:	0067 6146 6c75 0074 6944 6f63 6e6e 6365     g.Fault.Diconnec
   badf4:	6574 0064 0031 6553 2074 6556 6272 736f     ted.1.Set Verbos
   bae04:	2065 6f4d 6564 3000 4300 656c 7261 6465     e Mode.0.Cleared
   bae14:	5620 7265 6f62 6573 4d20 646f 0065 6f4e      Verbose Mode.No
   bae24:	4420 7461 0061 6255 6469 746f 2073 6f48      Data.Ubidots Ho
   bae34:	6b6f 5200 7365 6f70 736e 2065 6552 6563     ok.Response Rece
   bae44:	7669 6465 5300 6174 6574 2a00 5300 7465     ived.State.*.Set
   bae54:	7420 206f 7233 2064 6150 7472 2079 6953      to 3rd Party Si
   bae64:	006d 6553 2074 6f74 5020 7261 6974 6c63     m.Set to Particl
   bae74:	2065 6953 006d 654b 7065 4120 696c 6576     e Sim.Keep Alive
   bae84:	7320 7465 7420 206f 6925 7320 6365 4b00      set to %i sec.K
   bae94:	6565 2070 6c41 7669 0065 6f4c 6461 6e69     eep Alive.Loadin
   baea4:	2067 7953 7473 6d65 4420 6665 7561 746c     g System Default
   baeb4:	0073 6f4c 6461 6e69 2067 6c41 7265 2074     s.Loading Alert 
   baec4:	6544 6166 6c75 7374 5000 7465 6574 0064     Defaults.Petted.
   baed4:	6157 6374 6468 676f 7b00 5422 6d65 6570     Watchdog.{"Tempe
   baee4:	6172 7574 6572 3a22 3425 312e 2c66 2220     rature":%4.1f, "
   baef4:	7548 696d 6964 7974 3a22 3425 312e 2c66     Humidity":%4.1f,
   baf04:	4222 7461 6574 7972 3a22 6925 007d 7473     "Battery":%i}.st
   baf14:	726f 6761 2d65 6166 6963 696c 7974 682d     orage-facility-h
   baf24:	6f6f 006b 7246 6d6f 2520 2073 6f74 2520     ook.From %s to %
   baf34:	0073 7453 7461 2065 7254 6e61 6973 6974     s.State Transiti
   baf44:	6e6f 5400 6d65 5f70 614d 2078 203a 3325     on.Temp_Max : %3
   baf54:	312e 0066 6554 706d 4d5f 6e69 3a20 2520     .1f.Temp_Min : %
   baf64:	2e33 6631 4800 6d75 6469 7469 5f79 614d     3.1f.Humidity_Ma
   baf74:	3a78 2520 2e33 6631 4800 6d75 6469 7469     x: %3.1f.Humidit
   baf84:	5f79 694d 206e 203a 3325 312e 0066 7055     y_Min : %3.1f.Up
   baf94:	6570 2072 6554 706d 7265 7461 7275 2065     per Temperature 
   bafa4:	6854 6572 6873 6c6f 2064 6553 0074 6f4c     Threshold Set.Lo
   bafb4:	6577 2072 6554 706d 7265 7461 7275 2065     wer Temperature 
   bafc4:	6854 6572 6873 6c6f 2064 6553 0074 7055     Threshold Set.Up
   bafd4:	6570 2072 7548 696d 6964 7974 5420 7268     per Humidity Thr
   bafe4:	7365 6f68 646c 5320 7465 4c00 776f 7265     eshold Set.Lower
   baff4:	4820 6d75 6469 7469 2079 6854 6572 6873      Humidity Thresh
   bb004:	6c6f 2064 6553 0074 7341 6573 7472 6f69     old Set.Assertio
   bb014:	466e 6961 756c 6572 7320 6372 2620 2026     nFailure src && 
   bb024:	7273 2d63 633e 6c61 626c 6361 006b 3425     src->callback.%4
   bb034:	312e 2a66 0043 3425 312e 2566 0025 6925     .1f*C.%4.1f%%.%i
   bb044:	2520 0025 6f4c 2077 6554 706d 4120 656c      %%.Low Temp Ale
   bb054:	7472 2520 2e34 6632 3c20 2520 2e34 6632     rt %4.2f < %4.2f
   bb064:	4800 6769 2068 6554 706d 4120 656c 7472     .High Temp Alert
   bb074:	2520 2e34 6632 3e20 2520 2e34 6632 4c00      %4.2f > %4.2f.L
   bb084:	776f 4820 6d75 6469 7469 2079 6c41 7265     ow Humidity Aler
   bb094:	2074 3425 322e 2066 203c 3425 322e 0066     t %4.2f < %4.2f.
   bb0a4:	6948 6867 4820 6d75 6469 7469 2079 6c41     High Humidity Al
   bb0b4:	7265 2074 3425 322e 2066 203c 3425 322e     ert %4.2f < %4.2
   bb0c4:	0066 6c41 7265 7374 7300 6170 6b72 642f     f.Alerts.spark/d
   bb0d4:	7665 6369 2f65 6573 7373 6f69 2f6e 6e65     evice/session/en
   bb0e4:	0064 7245 6f72 2072 7453 7461 2065 202d     d.Error State - 
   bb0f4:	6552 6573 0074 6552 656c 7361 0065 6574     Reset.Release.te
   bb104:	706d 7265 7461 7275 0065 7568 696d 6964     mperature.humidi
   bb114:	7974 7400 6d65 6570 6172 7574 6572 552d     ty.temperature-U
   bb124:	7070 7265 7400 6d65 6570 6172 7574 6572     pper.temperature
   bb134:	6c2d 776f 7265 6800 6d75 6469 7469 2d79     -lower.humidity-
   bb144:	7075 6570 0072 7568 696d 6964 7974 6c2d     upper.humidity-l
   bb154:	776f 7265 4200 7461 6574 7972 4200 7461     ower.Battery.Bat
   bb164:	6574 7972 6f43 746e 7865 0074 654b 7065     teryContext.Keep
   bb174:	4120 696c 6576 5320 6365 4d00 6165 7573      Alive Sec.Measu
   bb184:	6572 4e2d 776f 5600 7265 6f62 6573 4d2d     re-Now.Verbose-M
   bb194:	646f 0065 6554 706d 552d 7070 7265 4c2d     ode.Temp-Upper-L
   bb1a4:	6d69 7469 5400 6d65 2d70 6f4c 6577 2d72     imit.Temp-Lower-
   bb1b4:	694c 696d 0074 7548 696d 6964 7974 4c2d     Limit.Humidity-L
   bb1c4:	776f 7265 4c2d 6d69 7469 4800 6d75 6469     ower-Limit.Humid
   bb1d4:	7974 752d 7070 7265 4c2d 6d69 7469 5400     ty-upper-Limit.T
   bb1e4:	6d69 0065 7245 6f72 2072 202d 4853 3354     ime.Error - SHT3
   bb1f4:	2031 6e49 7469 6169 696c 617a 6974 6e6f     1 Initialization
   bb204:	5300 6174 7472 7075 0000 0000               .Startup....

000bb210 <_ZTV5Timer>:
	...
   bb218:	4359 000b 43ad 000b 4145 000b               YC...C..EA..

000bb224 <_ZTV17PublishQueueAsync>:
	...
   bb22c:	411d 000b 4131 000b 5fa1 000b 61e5 000b     .A..1A..._...a..
   bb23c:	61a5 000b 6183 000b 632b 000b 61cb 000b     .a...a..+c...a..

000bb24c <_ZTV8MB85RC64>:
	...
   bb254:	40f5 000b 4109 000b 541d 000b 54b3 000b     .@...A...T...T..
   bb264:	5535 000b adbd 000b adc5 000b adc9 000b     5U..............
   bb274:	add2 000b adda 000b ade6 000b adec 000b     ................
   bb284:	6c41 206c 6977 6874 6e69 7420 7268 7365     All within thres
   bb294:	6f68 646c 0073 0000 0000 0000 0000 0000     holds...........
	...
   bb2c4:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   bb2d4:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000bb304 <_ZL13releaseNumber>:
   bb304:	3931 302e 0030 0000                         19.00...

000bb30c <_ZL17FRAMversionNumber>:
   bb30c:	0005 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   bb31c:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   bb32c:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000bb33c <_ZTV6MB85RC>:
	...
   bb344:	533d 000b 533f 000b 541d 000b 54b3 000b     =S..?S...T...T..
   bb354:	5535 000b 6564 6976 6563 6552 6461 6620     5U..deviceRead f
   bb364:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   bb374:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   bb384:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   bb394:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   bb3a4:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   bb3b4:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   bb3c4:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   bb3d4:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   bb3e4:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   bb3f4:	0063 0000                                   c...

000bb3f8 <_ZTV12MCP79410SRAM>:
	...
   bb400:	55f5 000b 560b 000b 55e5 000b 55e9 000b     .U...V...U...U..
   bb410:	5635 000b 5925 000b 5b85 000b               5V..%Y...[..

000bb41c <_ZTV12MCP79410Time>:
	...
   bb424:	55f9 000b 55fd 000b                         .U...U..

000bb42c <_ZTV14MCP79410EEPROM>:
	...
   bb434:	55f7 000b 5619 000b 55ed 000b 55f1 000b     .U...V...U...U..
   bb444:	5635 000b 595f 000b 5dcd 000b               5V.._Y...]..

000bb450 <_ZTV8MCP79410>:
	...
   bb458:	55fb 000b 5627 000b 7550 6c62 7369 5168     .U..'V..PublishQ
   bb468:	6575 6575 7341 6e79 0063 7570 6c62 7369     ueueAsync.publis
   bb478:	6968 676e 2520 2073 7325 7420 6c74 253d     hing %s %s ttl=%
   bb488:	2064 6c66 6761 3d73 7825 7000 6275 696c     d flags=%x.publi
   bb498:	6873 6465 7320 6375 6563 7373 7566 6c6c     shed successfull
   bb4a8:	0079 7570 6c62 7369 6568 2064 6166 6c69     y.published fail
   bb4b8:	6465 202c 6977 6c6c 7220 7465 7972 6920     ed, will retry i
   bb4c8:	206e 6c25 2075 736d 7100 6575 6575 6e69     n %lu ms.queuein
   bb4d8:	2067 7665 6e65 4e74 6d61 3d65 7325 6420     g eventName=%s d
   bb4e8:	7461 3d61 7325 7420 6c74 253d 2064 6c66     ata=%s ttl=%d fl
   bb4f8:	6761 3173 253d 2064 6c66 6761 3273 253d     ags1=%d flags2=%
   bb508:	2064 6973 657a 253d 0064 7061 2e70 7570     d size=%d.app.pu
   bb518:	7162 0000                                   bq..

000bb51c <_ZTV21PublishQueueAsyncBase>:
	...
   bb52c:	5fa1 000b 40a5 000b 40a5 000b 40a5 000b     ._...@...@...@..
   bb53c:	40a5 000b 40a5 000b                         .@...@..

000bb544 <_ZTV25PublishQueueAsyncRetained>:
	...
   bb54c:	6141 000b 6155 000b 5fa1 000b 61e5 000b     Aa..Ua..._...a..
   bb55c:	61a5 000b 6183 000b 632b 000b 61cb 000b     .a...a..+c...a..

000bb56c <_ZTVN5spark13CellularClassE>:
	...
   bb574:	6dcb 000b 6dc1 000b 6db7 000b 6d6d 000b     .m...m...m..mm..
   bb584:	6dab 000b 6d9f 000b 76b5 000b 76bd 000b     .m...m...v...v..
   bb594:	6d93 000b 6d8b 000b 6d81 000b 6d77 000b     .m...m...m..wm..
   bb5a4:	76ed 000b                                   .v..

000bb5a8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb5b0:	6e05 000b 6e0b 000b 6e49 000b 6e19 000b     .n...n..In...n..
   bb5c0:	6e07 000b                                   .n..

000bb5c4 <_ZTVN5spark13EthernetClassE>:
	...
   bb5cc:	73df 000b 73d5 000b 73cb 000b 73c1 000b     .s...s...s...s..
   bb5dc:	73b5 000b 73a9 000b 76b5 000b 76bd 000b     .s...s...v...v..
   bb5ec:	739d 000b 7395 000b 738b 000b 7381 000b     .s...s...s...s..
   bb5fc:	76ed 000b                                   .v..

000bb600 <_ZTV7TwoWire>:
	...
   bb608:	73fd 000b 7447 000b 741f 000b 73ff 000b     .s..Gt...t...s..
   bb618:	7427 000b 742f 000b 7437 000b 743f 000b     't../t..7t..?t..

000bb628 <_ZTV9IPAddress>:
	...
   bb630:	7585 000b 7575 000b 7577 000b 7061 0070     .u..uu..wu..app.

000bb640 <_ZTVN5spark12NetworkClassE>:
	...
   bb648:	7675 000b 767f 000b 7689 000b 7693 000b     uv...v...v...v..
   bb658:	769d 000b 76a9 000b 76b5 000b 76bd 000b     .v...v...v...v..
   bb668:	76c5 000b 76d1 000b 76d9 000b 76e3 000b     .v...v...v...v..
   bb678:	76ed 000b 005a 2b25 3330 3a64 3025 7532     .v..Z.%+03d:%02u
   bb688:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   bb698:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000bb6a8 <_ZTV11USARTSerial>:
	...
   bb6b0:	7d61 000b 7dcd 000b 7da5 000b 77d9 000b     a}...}...}...w..
   bb6c0:	7d75 000b 7d91 000b 7d83 000b 7d9f 000b     u}...}...}...}..
   bb6d0:	7d63 000b 7d67 000b                         c}..g}..

000bb6d8 <_ZTV9USBSerial>:
	...
   bb6e0:	7e0b 000b 7e73 000b 7e49 000b 77d9 000b     .~..s~..I~...w..
   bb6f0:	7e3b 000b 7e0d 000b 7e1d 000b 7e6d 000b     ;~...~...~..m~..
   bb700:	7e2d 000b 7e05 000b                         -~...~..

000bb708 <_ZSt7nothrow>:
   bb708:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bb718:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bb729 <day_name.1>:
   bb729:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bb739:	6972 6153                                    riSat

000bb73e <mon_name.0>:
   bb73e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bb74e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bb75e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bb76e:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bb77e:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bb78e:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bb79e:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bb7ae:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bb7be:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bb7ce:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bb7de:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bb7ee:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bb7fe:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bb80e:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bb81e:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bb82e:	6e69 7469 0079 6e61 0000                    inity.an..

000bb838 <fpi.1>:
   bb838:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bb848:	0000 0000                                   ....

000bb84c <fpinan.0>:
   bb84c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bb85c:	0000 0000                                   ....

000bb860 <tinytens>:
   bb860:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bb870:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bb880:	6f43 64ac 0628 1168                         Co.d(.h.

000bb888 <_ctype_>:
   bb888:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb898:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb8a8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb8b8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb8c8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb8d8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb8e8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb8f8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb908:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bb988:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bb998:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bb9a8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bb9b8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bb9c8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bb9d8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bb9e8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bb9f8:	632e 2e00 0000 0000                         .c......

000bba00 <_C_numeric_locale>:
   bba00:	b9fb 000b b728 000b e334 2003 4f50 4953     ....(...4.. POSI
   bba10:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   bba20:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bba30:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bba40:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bba50:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bba60:	696c 2f62 706d 6572 2e63 0063 0000 0000     lib/mprec.c.....

000bba70 <__mprec_bigtens>:
   bba70:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bba80:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bba90:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bba98 <__mprec_tens>:
   bba98:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bbaa8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bbab8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bbac8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bbad8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bbae8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bbaf8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bbb08:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bbb18:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bbb28:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bbb38:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bbb48:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bbb58:	9db4 79d9 7843 44ea                         ...yCx.D

000bbb60 <p05.0>:
   bbb60:	0005 0000 0019 0000 007d 0000               ........}...

000bbb6c <link_const_variable_data_end>:
   bbb6c:	000b5215 	.word	0x000b5215
   bbb70:	000b5dfd 	.word	0x000b5dfd
   bbb74:	000b6401 	.word	0x000b6401
   bbb78:	000b6d5d 	.word	0x000b6d5d
   bbb7c:	000b6dd5 	.word	0x000b6dd5
   bbb80:	000b73e9 	.word	0x000b73e9
   bbb84:	000b7665 	.word	0x000b7665
   bbb88:	000b77c5 	.word	0x000b77c5
   bbb8c:	000b786d 	.word	0x000b786d
   bbb90:	000b7a21 	.word	0x000b7a21
   bbb94:	000b7d4d 	.word	0x000b7d4d

000bbb98 <link_constructors_end>:
	...
