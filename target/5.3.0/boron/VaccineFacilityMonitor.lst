
/Users/abdulhannanmustajab/Desktop/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/5.3.0/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007928  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb948  000bb948  0000b948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000002ac  2003e210  000bb96c  0000e210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000334  2003e4c0  2003e4c0  0001e4c0  2**3
                  ALLOC
  6 .backup       00000804  2003f400  000bbc18  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc41c  000bc41c  0001c41c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_suffix 00000024  000bc422  000bc422  0001c422  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc446  000bc446  0001c446  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001608fb  00000000  00000000  0001c44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000174db  00000000  00000000  0017cd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00043653  00000000  00000000  00194220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003538  00000000  00000000  001d7873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bf18  00000000  00000000  001dadab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fa15  00000000  00000000  001e6cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004ed39  00000000  00000000  002266d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00146e12  00000000  00000000  00275411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009ec0  00000000  00000000  003bc224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f004 f851 	bl	b8af4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f004 f873 	bl	b8b44 <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e210 	.word	0x2003e210
   b4a68:	000bb96c 	.word	0x000bb96c
   b4a6c:	2003e4bc 	.word	0x2003e4bc
   b4a70:	2003e4c0 	.word	0x2003e4c0
   b4a74:	2003e7f4 	.word	0x2003e7f4

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f003 fe9b 	bl	b87b8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bb91c 	.word	0x000bb91c
   b4a9c:	000bb948 	.word	0x000bb948

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 be5e 	b.w	b5760 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 fd51 	bl	b554c <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f003 be3b 	b.w	b8728 <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f002 bc81 	b.w	b73b8 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f002 bc7f 	b.w	b73b8 <malloc>

000b4aba <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4aba:	f002 bc85 	b.w	b73c8 <free>
	...

000b4ac0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac2:	4a03      	ldr	r2, [pc, #12]	; (b4ad0 <__cxa_pure_virtual+0x10>)
   b4ac4:	4903      	ldr	r1, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x14>)
   b4ac6:	200c      	movs	r0, #12
   b4ac8:	f002 fb3e 	bl	b7148 <panic_>
  while (1);
   b4acc:	e7fe      	b.n	b4acc <__cxa_pure_virtual+0xc>
   b4ace:	bf00      	nop
   b4ad0:	000b6e89 	.word	0x000b6e89
   b4ad4:	000bac0c 	.word	0x000bac0c

000b4ad8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ad8:	7800      	ldrb	r0, [r0, #0]
   b4ada:	fab0 f080 	clz	r0, r0
   b4ade:	0940      	lsrs	r0, r0, #5
   b4ae0:	4770      	bx	lr

000b4ae2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae2:	2301      	movs	r3, #1
   b4ae4:	7003      	strb	r3, [r0, #0]
   b4ae6:	4770      	bx	lr

000b4ae8 <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   b4ae8:	4b01      	ldr	r3, [pc, #4]	; (b4af0 <_Z11watchdogISRv+0x8>)
   b4aea:	2201      	movs	r2, #1
   b4aec:	701a      	strb	r2, [r3, #0]
}
   b4aee:	4770      	bx	lr
   b4af0:	2003e641 	.word	0x2003e641

000b4af4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   b4af4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4af6:	4904      	ldr	r1, [pc, #16]	; (b4b08 <_Z10measureNow6String+0x14>)
   b4af8:	f003 fb31 	bl	b815e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   b4afc:	b118      	cbz	r0, b4b06 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   b4afe:	4b03      	ldr	r3, [pc, #12]	; (b4b0c <_Z10measureNow6String+0x18>)
   b4b00:	2203      	movs	r2, #3
   b4b02:	701a      	strb	r2, [r3, #0]
    return 1;
   b4b04:	2001      	movs	r0, #1
  }
  else return 0;
}
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	000bac5c 	.word	0x000bac5c
   b4b0c:	2003e5e0 	.word	0x2003e5e0

000b4b10 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b4b10:	b510      	push	{r4, lr}
   b4b12:	4b03      	ldr	r3, [pc, #12]	; (b4b20 <_ZN8MB85RC64D1Ev+0x10>)
   b4b14:	6003      	str	r3, [r0, #0]
   b4b16:	4604      	mov	r4, r0
   b4b18:	f001 f81c 	bl	b5b54 <_ZN6MB85RCD1Ev>
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	bd10      	pop	{r4, pc}
   b4b20:	000bb0a0 	.word	0x000bb0a0

000b4b24 <_ZN8MB85RC64D0Ev>:
   b4b24:	b510      	push	{r4, lr}
   b4b26:	4604      	mov	r4, r0
   b4b28:	f7ff fff2 	bl	b4b10 <_ZN8MB85RC64D1Ev>
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	2110      	movs	r1, #16
   b4b30:	f7ff ffc3 	bl	b4aba <_ZdlPvj>
   b4b34:	4620      	mov	r0, r4
   b4b36:	bd10      	pop	{r4, pc}

000b4b38 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   b4b38:	b510      	push	{r4, lr}
   b4b3a:	4b03      	ldr	r3, [pc, #12]	; (b4b48 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   b4b3c:	6003      	str	r3, [r0, #0]
   b4b3e:	4604      	mov	r4, r0
   b4b40:	f001 ff12 	bl	b6968 <_ZN25PublishQueueAsyncRetainedD1Ev>
   b4b44:	4620      	mov	r0, r4
   b4b46:	bd10      	pop	{r4, pc}
   b4b48:	000bb078 	.word	0x000bb078

000b4b4c <_ZN17PublishQueueAsyncD0Ev>:
   b4b4c:	b510      	push	{r4, lr}
   b4b4e:	4604      	mov	r4, r0
   b4b50:	f7ff fff2 	bl	b4b38 <_ZN17PublishQueueAsyncD1Ev>
   b4b54:	4620      	mov	r0, r4
   b4b56:	2138      	movs	r1, #56	; 0x38
   b4b58:	f7ff ffaf 	bl	b4aba <_ZdlPvj>
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	bd10      	pop	{r4, pc}

000b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4b62:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4b64:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4b68:	f88d 3000 	strb.w	r3, [sp]
   b4b6c:	f88d 5004 	strb.w	r5, [sp, #4]
   b4b70:	68e4      	ldr	r4, [r4, #12]
   b4b72:	233c      	movs	r3, #60	; 0x3c
   b4b74:	47a0      	blx	r4
	}
   b4b76:	b003      	add	sp, #12
   b4b78:	bd30      	pop	{r4, r5, pc}
	...

000b4b7c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   b4b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b7e:	4916      	ldr	r1, [pc, #88]	; (b4bd8 <_Z14setVerboseMode6String+0x5c>)
   b4b80:	4605      	mov	r5, r0
   b4b82:	f003 faec 	bl	b815e <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4b86:	4604      	mov	r4, r0
   b4b88:	b188      	cbz	r0, b4bae <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   b4b8a:	4b14      	ldr	r3, [pc, #80]	; (b4bdc <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b4b8c:	4814      	ldr	r0, [pc, #80]	; (b4be0 <_Z14setVerboseMode6String+0x64>)
   b4b8e:	4a15      	ldr	r2, [pc, #84]	; (b4be4 <_Z14setVerboseMode6String+0x68>)
   b4b90:	4915      	ldr	r1, [pc, #84]	; (b4be8 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   b4b92:	2401      	movs	r4, #1
   b4b94:	725c      	strb	r4, [r3, #9]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b4b96:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b4b98:	f88d 3000 	strb.w	r3, [sp]
   b4b9c:	4b13      	ldr	r3, [pc, #76]	; (b4bec <_Z14setVerboseMode6String+0x70>)
   b4b9e:	781b      	ldrb	r3, [r3, #0]
   b4ba0:	f7ff ffde 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4ba4:	4b12      	ldr	r3, [pc, #72]	; (b4bf0 <_Z14setVerboseMode6String+0x74>)
    return 1;
   b4ba6:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   b4ba8:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   b4baa:	b003      	add	sp, #12
   b4bac:	bd30      	pop	{r4, r5, pc}
   b4bae:	4911      	ldr	r1, [pc, #68]	; (b4bf4 <_Z14setVerboseMode6String+0x78>)
   b4bb0:	4628      	mov	r0, r5
   b4bb2:	f003 fad4 	bl	b815e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4bb6:	2800      	cmp	r0, #0
   b4bb8:	d0f7      	beq.n	b4baa <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   b4bba:	4b08      	ldr	r3, [pc, #32]	; (b4bdc <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b4bbc:	4808      	ldr	r0, [pc, #32]	; (b4be0 <_Z14setVerboseMode6String+0x64>)
    sysStatus.verboseMode = false;
   b4bbe:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b4bc0:	4b0a      	ldr	r3, [pc, #40]	; (b4bec <_Z14setVerboseMode6String+0x70>)
   b4bc2:	f88d 4000 	strb.w	r4, [sp]
   b4bc6:	781b      	ldrb	r3, [r3, #0]
   b4bc8:	4a0b      	ldr	r2, [pc, #44]	; (b4bf8 <_Z14setVerboseMode6String+0x7c>)
   b4bca:	4907      	ldr	r1, [pc, #28]	; (b4be8 <_Z14setVerboseMode6String+0x6c>)
   b4bcc:	f7ff ffc8 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4bd0:	4b07      	ldr	r3, [pc, #28]	; (b4bf0 <_Z14setVerboseMode6String+0x74>)
   b4bd2:	2001      	movs	r0, #1
   b4bd4:	7018      	strb	r0, [r3, #0]
    return 1;
   b4bd6:	e7e8      	b.n	b4baa <_Z14setVerboseMode6String+0x2e>
   b4bd8:	000bac5c 	.word	0x000bac5c
   b4bdc:	2003e5e4 	.word	0x2003e5e4
   b4be0:	2003e564 	.word	0x2003e564
   b4be4:	000bac5e 	.word	0x000bac5e
   b4be8:	000bac81 	.word	0x000bac81
   b4bec:	2003e4cc 	.word	0x2003e4cc
   b4bf0:	2003e600 	.word	0x2003e600
   b4bf4:	000bac6f 	.word	0x000bac6f
   b4bf8:	000bac71 	.word	0x000bac71

000b4bfc <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   b4bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4bfe:	4d1a      	ldr	r5, [pc, #104]	; (b4c68 <_Z14UbidotsHandlerPKcS0_+0x6c>)
  if (!data) {                                                                    // First check to see if there is any data
   b4c00:	460c      	mov	r4, r1
   b4c02:	b959      	cbnz	r1, b4c1c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   b4c04:	7a6b      	ldrb	r3, [r5, #9]
   b4c06:	b31b      	cbz	r3, b4c50 <_Z14UbidotsHandlerPKcS0_+0x54>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   b4c08:	4b18      	ldr	r3, [pc, #96]	; (b4c6c <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4c0a:	f88d 1000 	strb.w	r1, [sp]
   b4c0e:	781b      	ldrb	r3, [r3, #0]
   b4c10:	4a17      	ldr	r2, [pc, #92]	; (b4c70 <_Z14UbidotsHandlerPKcS0_+0x74>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   b4c12:	4918      	ldr	r1, [pc, #96]	; (b4c74 <_Z14UbidotsHandlerPKcS0_+0x78>)
   b4c14:	4818      	ldr	r0, [pc, #96]	; (b4c78 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b4c16:	f7ff ffa3 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4c1a:	e019      	b.n	b4c50 <_Z14UbidotsHandlerPKcS0_+0x54>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   b4c1c:	4608      	mov	r0, r1
   b4c1e:	f003 ff46 	bl	b8aae <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   b4c22:	38c8      	subs	r0, #200	; 0xc8
   b4c24:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   b4c26:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   b4c28:	d814      	bhi.n	b4c54 <_Z14UbidotsHandlerPKcS0_+0x58>
    if (sysStatus.verboseMode) {
   b4c2a:	b14b      	cbz	r3, b4c40 <_Z14UbidotsHandlerPKcS0_+0x44>
   b4c2c:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   b4c2e:	f88d 3000 	strb.w	r3, [sp]
   b4c32:	4b0e      	ldr	r3, [pc, #56]	; (b4c6c <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4c34:	4a11      	ldr	r2, [pc, #68]	; (b4c7c <_Z14UbidotsHandlerPKcS0_+0x80>)
   b4c36:	781b      	ldrb	r3, [r3, #0]
   b4c38:	4911      	ldr	r1, [pc, #68]	; (b4c80 <_Z14UbidotsHandlerPKcS0_+0x84>)
   b4c3a:	480f      	ldr	r0, [pc, #60]	; (b4c78 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b4c3c:	f7ff ff90 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    alertsStatus.upperTemperatureThresholdCrossed = false;
   b4c40:	4a10      	ldr	r2, [pc, #64]	; (b4c84 <_Z14UbidotsHandlerPKcS0_+0x88>)
   b4c42:	2300      	movs	r3, #0
   b4c44:	6013      	str	r3, [r2, #0]
    alertsStatusWriteNeeded = true;
   b4c46:	4a10      	ldr	r2, [pc, #64]	; (b4c88 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   b4c48:	2101      	movs	r1, #1
   b4c4a:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   b4c4c:	4a0f      	ldr	r2, [pc, #60]	; (b4c8c <_Z14UbidotsHandlerPKcS0_+0x90>)
   b4c4e:	7013      	strb	r3, [r2, #0]
}
   b4c50:	b003      	add	sp, #12
   b4c52:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   b4c54:	2b00      	cmp	r3, #0
   b4c56:	d0fb      	beq.n	b4c50 <_Z14UbidotsHandlerPKcS0_+0x54>
   b4c58:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   b4c5a:	f88d 3000 	strb.w	r3, [sp]
   b4c5e:	4b03      	ldr	r3, [pc, #12]	; (b4c6c <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4c60:	4622      	mov	r2, r4
   b4c62:	781b      	ldrb	r3, [r3, #0]
   b4c64:	e7d5      	b.n	b4c12 <_Z14UbidotsHandlerPKcS0_+0x16>
   b4c66:	bf00      	nop
   b4c68:	2003e5e4 	.word	0x2003e5e4
   b4c6c:	2003e4cc 	.word	0x2003e4cc
   b4c70:	000bac86 	.word	0x000bac86
   b4c74:	000bac8e 	.word	0x000bac8e
   b4c78:	2003e564 	.word	0x2003e564
   b4c7c:	000bac9b 	.word	0x000bac9b
   b4c80:	000bacad 	.word	0x000bacad
   b4c84:	2003e4d4 	.word	0x2003e4d4
   b4c88:	2003e4ec 	.word	0x2003e4ec
   b4c8c:	2003e50d 	.word	0x2003e50d

000b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4c90:	2300      	movs	r3, #0
   b4c92:	2204      	movs	r2, #4
   b4c94:	f002 bad0 	b.w	b7238 <spark_variable>

000b4c98 <_ZN10CloudClass9keepAliveEj>:
            return spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   b4c98:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b4c9a:	2301      	movs	r3, #1
   b4c9c:	2208      	movs	r2, #8
   b4c9e:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b4ca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4ca6:	2300      	movs	r3, #0
   b4ca8:	4341      	muls	r1, r0
   b4caa:	466a      	mov	r2, sp
   b4cac:	4618      	mov	r0, r3
   b4cae:	f002 fb13 	bl	b72d8 <spark_set_connection_property>
    }
   b4cb2:	b003      	add	sp, #12
   b4cb4:	f85d fb04 	ldr.w	pc, [sp], #4

000b4cb8 <_Z16setThirdPartySim6String>:
  updateThresholdValue();
  return 1;
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   b4cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4cba:	4918      	ldr	r1, [pc, #96]	; (b4d1c <_Z16setThirdPartySim6String+0x64>)
   b4cbc:	4605      	mov	r5, r0
   b4cbe:	f003 fa4e 	bl	b815e <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4cc2:	4604      	mov	r4, r0
   b4cc4:	b1b8      	cbz	r0, b4cf6 <_Z16setThirdPartySim6String+0x3e>
  {
    sysStatus.thirdPartySim = true;
   b4cc6:	4b16      	ldr	r3, [pc, #88]	; (b4d20 <_Z16setThirdPartySim6String+0x68>)
   b4cc8:	2201      	movs	r2, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4cca:	6858      	ldr	r0, [r3, #4]
    sysStatus.thirdPartySim = true;
   b4ccc:	705a      	strb	r2, [r3, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4cce:	f7ff ffe3 	bl	b4c98 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4cd2:	f002 fac9 	bl	b7268 <spark_cloud_flag_connected>
    // keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   b4cd6:	b148      	cbz	r0, b4cec <_Z16setThirdPartySim6String+0x34>
   b4cd8:	2300      	movs	r3, #0
   b4cda:	f88d 3000 	strb.w	r3, [sp]
   b4cde:	4b11      	ldr	r3, [pc, #68]	; (b4d24 <_Z16setThirdPartySim6String+0x6c>)
   b4ce0:	4a11      	ldr	r2, [pc, #68]	; (b4d28 <_Z16setThirdPartySim6String+0x70>)
   b4ce2:	781b      	ldrb	r3, [r3, #0]
   b4ce4:	4911      	ldr	r1, [pc, #68]	; (b4d2c <_Z16setThirdPartySim6String+0x74>)
   b4ce6:	4812      	ldr	r0, [pc, #72]	; (b4d30 <_Z16setThirdPartySim6String+0x78>)
   b4ce8:	f7ff ff3a 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4cec:	4b11      	ldr	r3, [pc, #68]	; (b4d34 <_Z16setThirdPartySim6String+0x7c>)
   b4cee:	2001      	movs	r0, #1
   b4cf0:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   b4cf2:	b003      	add	sp, #12
   b4cf4:	bd30      	pop	{r4, r5, pc}
   b4cf6:	4910      	ldr	r1, [pc, #64]	; (b4d38 <_Z16setThirdPartySim6String+0x80>)
   b4cf8:	4628      	mov	r0, r5
   b4cfa:	f003 fa30 	bl	b815e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4cfe:	2800      	cmp	r0, #0
   b4d00:	d0f7      	beq.n	b4cf2 <_Z16setThirdPartySim6String+0x3a>
    sysStatus.thirdPartySim = false;
   b4d02:	4b07      	ldr	r3, [pc, #28]	; (b4d20 <_Z16setThirdPartySim6String+0x68>)
   b4d04:	705c      	strb	r4, [r3, #1]
   b4d06:	f002 faaf 	bl	b7268 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   b4d0a:	2800      	cmp	r0, #0
   b4d0c:	d0ee      	beq.n	b4cec <_Z16setThirdPartySim6String+0x34>
   b4d0e:	4b05      	ldr	r3, [pc, #20]	; (b4d24 <_Z16setThirdPartySim6String+0x6c>)
   b4d10:	f88d 4000 	strb.w	r4, [sp]
   b4d14:	781b      	ldrb	r3, [r3, #0]
   b4d16:	4a09      	ldr	r2, [pc, #36]	; (b4d3c <_Z16setThirdPartySim6String+0x84>)
   b4d18:	e7e4      	b.n	b4ce4 <_Z16setThirdPartySim6String+0x2c>
   b4d1a:	bf00      	nop
   b4d1c:	000bac5c 	.word	0x000bac5c
   b4d20:	2003e5e4 	.word	0x2003e5e4
   b4d24:	2003e4cc 	.word	0x2003e4cc
   b4d28:	000bacb3 	.word	0x000bacb3
   b4d2c:	000bac81 	.word	0x000bac81
   b4d30:	2003e564 	.word	0x2003e564
   b4d34:	2003e600 	.word	0x2003e600
   b4d38:	000bac6f 	.word	0x000bac6f
   b4d3c:	000bacc8 	.word	0x000bacc8

000b4d40 <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   b4d40:	b510      	push	{r4, lr}
   b4d42:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   b4d44:	6800      	ldr	r0, [r0, #0]
   b4d46:	220a      	movs	r2, #10
   b4d48:	a903      	add	r1, sp, #12
   b4d4a:	f004 fe2d 	bl	b99a8 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b4d4e:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   b4d52:	d819      	bhi.n	b4d88 <_Z12setKeepAlive6String+0x48>
  sysStatus.keepAlive = tempTime;
   b4d54:	4c0d      	ldr	r4, [pc, #52]	; (b4d8c <_Z12setKeepAlive6String+0x4c>)
   b4d56:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4d58:	f7ff ff9e 	bl	b4c98 <_ZN10CloudClass9keepAliveEj>
  // keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   b4d5c:	6863      	ldr	r3, [r4, #4]
   b4d5e:	4a0c      	ldr	r2, [pc, #48]	; (b4d90 <_Z12setKeepAlive6String+0x50>)
   b4d60:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4d64:	a804      	add	r0, sp, #16
   b4d66:	f002 fb47 	bl	b73f8 <snprintf>
   b4d6a:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   b4d6c:	f88d 3000 	strb.w	r3, [sp]
   b4d70:	4b08      	ldr	r3, [pc, #32]	; (b4d94 <_Z12setKeepAlive6String+0x54>)
   b4d72:	4809      	ldr	r0, [pc, #36]	; (b4d98 <_Z12setKeepAlive6String+0x58>)
   b4d74:	781b      	ldrb	r3, [r3, #0]
   b4d76:	4909      	ldr	r1, [pc, #36]	; (b4d9c <_Z12setKeepAlive6String+0x5c>)
   b4d78:	aa04      	add	r2, sp, #16
   b4d7a:	f7ff fef1 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   b4d7e:	4b08      	ldr	r3, [pc, #32]	; (b4da0 <_Z12setKeepAlive6String+0x60>)
   b4d80:	2001      	movs	r0, #1
   b4d82:	7018      	strb	r0, [r3, #0]
  return 1;
}
   b4d84:	b044      	add	sp, #272	; 0x110
   b4d86:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b4d88:	2000      	movs	r0, #0
   b4d8a:	e7fb      	b.n	b4d84 <_Z12setKeepAlive6String+0x44>
   b4d8c:	2003e5e4 	.word	0x2003e5e4
   b4d90:	000bacdc 	.word	0x000bacdc
   b4d94:	2003e4cc 	.word	0x2003e4cc
   b4d98:	2003e564 	.word	0x2003e564
   b4d9c:	000bacf5 	.word	0x000bacf5
   b4da0:	2003e600 	.word	0x2003e600

000b4da4 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   b4da4:	b507      	push	{r0, r1, r2, lr}
   b4da6:	f002 fa5f 	bl	b7268 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   b4daa:	b148      	cbz	r0, b4dc0 <_Z18loadSystemDefaultsv+0x1c>
   b4dac:	2300      	movs	r3, #0
   b4dae:	f88d 3000 	strb.w	r3, [sp]
   b4db2:	4b0c      	ldr	r3, [pc, #48]	; (b4de4 <_Z18loadSystemDefaultsv+0x40>)
   b4db4:	4a0c      	ldr	r2, [pc, #48]	; (b4de8 <_Z18loadSystemDefaultsv+0x44>)
   b4db6:	781b      	ldrb	r3, [r3, #0]
   b4db8:	490c      	ldr	r1, [pc, #48]	; (b4dec <_Z18loadSystemDefaultsv+0x48>)
   b4dba:	480d      	ldr	r0, [pc, #52]	; (b4df0 <_Z18loadSystemDefaultsv+0x4c>)
   b4dbc:	f7ff fed0 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatus.keepAlive = 120;
   b4dc0:	4a0c      	ldr	r2, [pc, #48]	; (b4df4 <_Z18loadSystemDefaultsv+0x50>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b4dc2:	480d      	ldr	r0, [pc, #52]	; (b4df8 <_Z18loadSystemDefaultsv+0x54>)
   b4dc4:	2378      	movs	r3, #120	; 0x78
   b4dc6:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   b4dc8:	f240 1301 	movw	r3, #257	; 0x101
   b4dcc:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   b4dce:	2300      	movs	r3, #0
   b4dd0:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   b4dd2:	7293      	strb	r3, [r2, #10]
   b4dd4:	2101      	movs	r1, #1
   b4dd6:	231c      	movs	r3, #28
}
   b4dd8:	b003      	add	sp, #12
   b4dda:	f85d eb04 	ldr.w	lr, [sp], #4
   b4dde:	f000 bf74 	b.w	b5cca <_ZN6MB85RC9writeDataEjPKhj>
   b4de2:	bf00      	nop
   b4de4:	2003e4cc 	.word	0x2003e4cc
   b4de8:	000bad00 	.word	0x000bad00
   b4dec:	000bac81 	.word	0x000bac81
   b4df0:	2003e564 	.word	0x2003e564
   b4df4:	2003e5e4 	.word	0x2003e5e4
   b4df8:	2003e510 	.word	0x2003e510

000b4dfc <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                                                  // Default settings for the device - connected, not-low power and always on
   b4dfc:	b507      	push	{r0, r1, r2, lr}
   b4dfe:	f002 fa33 	bl	b7268 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   b4e02:	b148      	cbz	r0, b4e18 <_Z17loadAlertDefaultsv+0x1c>
   b4e04:	2300      	movs	r3, #0
   b4e06:	f88d 3000 	strb.w	r3, [sp]
   b4e0a:	4b0c      	ldr	r3, [pc, #48]	; (b4e3c <_Z17loadAlertDefaultsv+0x40>)
   b4e0c:	4a0c      	ldr	r2, [pc, #48]	; (b4e40 <_Z17loadAlertDefaultsv+0x44>)
   b4e0e:	781b      	ldrb	r3, [r3, #0]
   b4e10:	490c      	ldr	r1, [pc, #48]	; (b4e44 <_Z17loadAlertDefaultsv+0x48>)
   b4e12:	480d      	ldr	r0, [pc, #52]	; (b4e48 <_Z17loadAlertDefaultsv+0x4c>)
   b4e14:	f7ff fea4 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  alertsStatus.upperTemperatureThreshold = 30;
   b4e18:	4a0c      	ldr	r2, [pc, #48]	; (b4e4c <_Z17loadAlertDefaultsv+0x50>)
   b4e1a:	4b0d      	ldr	r3, [pc, #52]	; (b4e50 <_Z17loadAlertDefaultsv+0x54>)
   b4e1c:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   b4e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b4e22:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   b4e24:	4b0b      	ldr	r3, [pc, #44]	; (b4e54 <_Z17loadAlertDefaultsv+0x58>)
   b4e26:	6113      	str	r3, [r2, #16]
   b4e28:	480b      	ldr	r0, [pc, #44]	; (b4e58 <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   b4e2a:	4b0c      	ldr	r3, [pc, #48]	; (b4e5c <_Z17loadAlertDefaultsv+0x60>)
   b4e2c:	6153      	str	r3, [r2, #20]
   b4e2e:	2150      	movs	r1, #80	; 0x50
   b4e30:	2318      	movs	r3, #24
}
   b4e32:	b003      	add	sp, #12
   b4e34:	f85d eb04 	ldr.w	lr, [sp], #4
   b4e38:	f000 bf47 	b.w	b5cca <_ZN6MB85RC9writeDataEjPKhj>
   b4e3c:	2003e4cc 	.word	0x2003e4cc
   b4e40:	000bad18 	.word	0x000bad18
   b4e44:	000bac81 	.word	0x000bac81
   b4e48:	2003e564 	.word	0x2003e564
   b4e4c:	2003e4d4 	.word	0x2003e4d4
   b4e50:	41f00000 	.word	0x41f00000
   b4e54:	42b40000 	.word	0x42b40000
   b4e58:	2003e510 	.word	0x2003e510
   b4e5c:	40a00000 	.word	0x40a00000

000b4e60 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   b4e60:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   b4e62:	4c12      	ldr	r4, [pc, #72]	; (b4eac <_Z17checkSystemValuesv+0x4c>)
   b4e64:	7a23      	ldrb	r3, [r4, #8]
   b4e66:	2b01      	cmp	r3, #1
   b4e68:	d904      	bls.n	b4e74 <_Z17checkSystemValuesv+0x14>
   b4e6a:	f002 f9fd 	bl	b7268 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   b4e6e:	b1d8      	cbz	r0, b4ea8 <_Z17checkSystemValuesv+0x48>
   b4e70:	2301      	movs	r3, #1
   b4e72:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   b4e74:	6863      	ldr	r3, [r4, #4]
   b4e76:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   b4e7a:	bf84      	itt	hi
   b4e7c:	f44f 7316 	movhi.w	r3, #600	; 0x258
   b4e80:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   b4e82:	7a63      	ldrb	r3, [r4, #9]
   b4e84:	2b01      	cmp	r3, #1
   b4e86:	bf84      	itt	hi
   b4e88:	2300      	movhi	r3, #0
   b4e8a:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   b4e8c:	7aa3      	ldrb	r3, [r4, #10]
   b4e8e:	2b01      	cmp	r3, #1
   b4e90:	bf84      	itt	hi
   b4e92:	2300      	movhi	r3, #0
   b4e94:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b4e96:	6963      	ldr	r3, [r4, #20]
   b4e98:	2bff      	cmp	r3, #255	; 0xff
   b4e9a:	bf84      	itt	hi
   b4e9c:	2300      	movhi	r3, #0
   b4e9e:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   b4ea0:	4b03      	ldr	r3, [pc, #12]	; (b4eb0 <_Z17checkSystemValuesv+0x50>)
   b4ea2:	2201      	movs	r2, #1
   b4ea4:	701a      	strb	r2, [r3, #0]
}
   b4ea6:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   b4ea8:	7220      	strb	r0, [r4, #8]
   b4eaa:	e7e3      	b.n	b4e74 <_Z17checkSystemValuesv+0x14>
   b4eac:	2003e5e4 	.word	0x2003e5e4
   b4eb0:	2003e600 	.word	0x2003e600

000b4eb4 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0.0  || alertsStatus.lowerTemperatureThreshold > 20.0) alertsStatus.lowerTemperatureThreshold = 3.0;
   b4eb4:	4b22      	ldr	r3, [pc, #136]	; (b4f40 <_Z17checkAlertsValuesv+0x8c>)
   b4eb6:	ed93 7a03 	vldr	s14, [r3, #12]
   b4eba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   b4ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ec2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   b4ec6:	d404      	bmi.n	b4ed2 <_Z17checkAlertsValuesv+0x1e>
   b4ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ed0:	dd01      	ble.n	b4ed6 <_Z17checkAlertsValuesv+0x22>
   b4ed2:	4a1c      	ldr	r2, [pc, #112]	; (b4f44 <_Z17checkAlertsValuesv+0x90>)
   b4ed4:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20.0 || alertsStatus.upperTemperatureThreshold > 90.0) alertsStatus.upperTemperatureThreshold = 33.0;
   b4ed6:	ed93 7a02 	vldr	s14, [r3, #8]
   b4eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ee2:	d406      	bmi.n	b4ef2 <_Z17checkAlertsValuesv+0x3e>
   b4ee4:	eddf 6a18 	vldr	s13, [pc, #96]	; b4f48 <_Z17checkAlertsValuesv+0x94>
   b4ee8:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ef0:	dd01      	ble.n	b4ef6 <_Z17checkAlertsValuesv+0x42>
   b4ef2:	4a16      	ldr	r2, [pc, #88]	; (b4f4c <_Z17checkAlertsValuesv+0x98>)
   b4ef4:	609a      	str	r2, [r3, #8]
  if (alertsStatus.lowerHumidityThreshold < 0.0     || alertsStatus.lowerHumidityThreshold > 50.0)    alertsStatus.lowerHumidityThreshold = 13.0;
   b4ef6:	ed93 7a05 	vldr	s14, [r3, #20]
   b4efa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   b4efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f02:	d406      	bmi.n	b4f12 <_Z17checkAlertsValuesv+0x5e>
   b4f04:	eddf 6a12 	vldr	s13, [pc, #72]	; b4f50 <_Z17checkAlertsValuesv+0x9c>
   b4f08:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f10:	dd01      	ble.n	b4f16 <_Z17checkAlertsValuesv+0x62>
   b4f12:	4a10      	ldr	r2, [pc, #64]	; (b4f54 <_Z17checkAlertsValuesv+0xa0>)
   b4f14:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20.0    || alertsStatus.upperHumidityThreshold > 90.0)    alertsStatus.upperHumidityThreshold = 63.0;
   b4f16:	ed93 7a04 	vldr	s14, [r3, #16]
   b4f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f22:	d406      	bmi.n	b4f32 <_Z17checkAlertsValuesv+0x7e>
   b4f24:	eddf 7a08 	vldr	s15, [pc, #32]	; b4f48 <_Z17checkAlertsValuesv+0x94>
   b4f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f30:	dd01      	ble.n	b4f36 <_Z17checkAlertsValuesv+0x82>
   b4f32:	4a09      	ldr	r2, [pc, #36]	; (b4f58 <_Z17checkAlertsValuesv+0xa4>)
   b4f34:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   b4f36:	4b09      	ldr	r3, [pc, #36]	; (b4f5c <_Z17checkAlertsValuesv+0xa8>)
   b4f38:	2201      	movs	r2, #1
   b4f3a:	701a      	strb	r2, [r3, #0]
}
   b4f3c:	4770      	bx	lr
   b4f3e:	bf00      	nop
   b4f40:	2003e4d4 	.word	0x2003e4d4
   b4f44:	40400000 	.word	0x40400000
   b4f48:	42b40000 	.word	0x42b40000
   b4f4c:	42040000 	.word	0x42040000
   b4f50:	42480000 	.word	0x42480000
   b4f54:	41500000 	.word	0x41500000
   b4f58:	427c0000 	.word	0x427c0000
   b4f5c:	2003e4ec 	.word	0x2003e4ec

000b4f60 <_Z11petWatchdogv>:
{
   b4f60:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   b4f62:	2101      	movs	r1, #1
   b4f64:	2005      	movs	r0, #5
   b4f66:	f003 fcc0 	bl	b88ea <digitalWrite>
  digitalWrite(donePin, LOW);
   b4f6a:	2100      	movs	r1, #0
   b4f6c:	2005      	movs	r0, #5
   b4f6e:	f003 fcbc 	bl	b88ea <digitalWrite>
  watchdogFlag = false;
   b4f72:	4a09      	ldr	r2, [pc, #36]	; (b4f98 <_Z11petWatchdogv+0x38>)
   b4f74:	2300      	movs	r3, #0
   b4f76:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   b4f78:	4a08      	ldr	r2, [pc, #32]	; (b4f9c <_Z11petWatchdogv+0x3c>)
   b4f7a:	7a52      	ldrb	r2, [r2, #9]
   b4f7c:	b142      	cbz	r2, b4f90 <_Z11petWatchdogv+0x30>
   b4f7e:	f88d 3000 	strb.w	r3, [sp]
   b4f82:	4b07      	ldr	r3, [pc, #28]	; (b4fa0 <_Z11petWatchdogv+0x40>)
   b4f84:	4a07      	ldr	r2, [pc, #28]	; (b4fa4 <_Z11petWatchdogv+0x44>)
   b4f86:	781b      	ldrb	r3, [r3, #0]
   b4f88:	4907      	ldr	r1, [pc, #28]	; (b4fa8 <_Z11petWatchdogv+0x48>)
   b4f8a:	4808      	ldr	r0, [pc, #32]	; (b4fac <_Z11petWatchdogv+0x4c>)
   b4f8c:	f7ff fde8 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b4f90:	b003      	add	sp, #12
   b4f92:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f96:	bf00      	nop
   b4f98:	2003e641 	.word	0x2003e641
   b4f9c:	2003e5e4 	.word	0x2003e5e4
   b4fa0:	2003e4cc 	.word	0x2003e4cc
   b4fa4:	000bad2f 	.word	0x000bad2f
   b4fa8:	000bad36 	.word	0x000bad36
   b4fac:	2003e564 	.word	0x2003e564

000b4fb0 <_Z9sendEventv>:
{
   b4fb0:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   b4fb2:	4c13      	ldr	r4, [pc, #76]	; (b5000 <_Z9sendEventv+0x50>)
{
   b4fb4:	b0a0      	sub	sp, #128	; 0x80
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   b4fb6:	6923      	ldr	r3, [r4, #16]
   b4fb8:	68e0      	ldr	r0, [r4, #12]
   b4fba:	9304      	str	r3, [sp, #16]
   b4fbc:	f7ff f994 	bl	b42e8 <__aeabi_f2d>
   b4fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4fc4:	68a0      	ldr	r0, [r4, #8]
   b4fc6:	f7ff f98f 	bl	b42e8 <__aeabi_f2d>
   b4fca:	4a0e      	ldr	r2, [pc, #56]	; (b5004 <_Z9sendEventv+0x54>)
   b4fcc:	e9cd 0100 	strd	r0, r1, [sp]
   b4fd0:	2164      	movs	r1, #100	; 0x64
   b4fd2:	a807      	add	r0, sp, #28
   b4fd4:	f002 fa10 	bl	b73f8 <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   b4fd8:	2300      	movs	r3, #0
   b4fda:	f88d 3000 	strb.w	r3, [sp]
   b4fde:	4b0a      	ldr	r3, [pc, #40]	; (b5008 <_Z9sendEventv+0x58>)
   b4fe0:	490a      	ldr	r1, [pc, #40]	; (b500c <_Z9sendEventv+0x5c>)
   b4fe2:	781b      	ldrb	r3, [r3, #0]
   b4fe4:	480a      	ldr	r0, [pc, #40]	; (b5010 <_Z9sendEventv+0x60>)
   b4fe6:	aa07      	add	r2, sp, #28
   b4fe8:	f7ff fdba 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  dataInFlight = true;                                                                      // set the data inflight flag
   b4fec:	4b09      	ldr	r3, [pc, #36]	; (b5014 <_Z9sendEventv+0x64>)
   b4fee:	2201      	movs	r2, #1
   b4ff0:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4ff2:	f001 ff51 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   b4ff6:	4b08      	ldr	r3, [pc, #32]	; (b5018 <_Z9sendEventv+0x68>)
   b4ff8:	6018      	str	r0, [r3, #0]
}
   b4ffa:	b020      	add	sp, #128	; 0x80
   b4ffc:	bd10      	pop	{r4, pc}
   b4ffe:	bf00      	nop
   b5000:	2003e5bc 	.word	0x2003e5bc
   b5004:	000bad3f 	.word	0x000bad3f
   b5008:	2003e4cc 	.word	0x2003e4cc
   b500c:	000bad74 	.word	0x000bad74
   b5010:	2003e564 	.word	0x2003e564
   b5014:	2003e50d 	.word	0x2003e50d
   b5018:	2003e644 	.word	0x2003e644

000b501c <_Z8blinkLEDi>:
{
   b501c:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   b501e:	4d0b      	ldr	r5, [pc, #44]	; (b504c <_Z8blinkLEDi+0x30>)
{
   b5020:	4604      	mov	r4, r0
   b5022:	f001 ff39 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   b5026:	682b      	ldr	r3, [r5, #0]
   b5028:	1ac0      	subs	r0, r0, r3
   b502a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b502e:	d90c      	bls.n	b504a <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   b5030:	b2a4      	uxth	r4, r4
   b5032:	4620      	mov	r0, r4
   b5034:	f003 fc72 	bl	b891c <digitalRead>
   b5038:	fab0 f180 	clz	r1, r0
   b503c:	0949      	lsrs	r1, r1, #5
   b503e:	4620      	mov	r0, r4
   b5040:	f003 fc53 	bl	b88ea <digitalWrite>
   b5044:	f001 ff28 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   b5048:	6028      	str	r0, [r5, #0]
}
   b504a:	bd38      	pop	{r3, r4, r5, pc}
   b504c:	2003e4d0 	.word	0x2003e4d0

000b5050 <_Z22publishStateTransitionv>:
{
   b5050:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b5052:	4d11      	ldr	r5, [pc, #68]	; (b5098 <_Z22publishStateTransitionv+0x48>)
   b5054:	4c11      	ldr	r4, [pc, #68]	; (b509c <_Z22publishStateTransitionv+0x4c>)
   b5056:	4912      	ldr	r1, [pc, #72]	; (b50a0 <_Z22publishStateTransitionv+0x50>)
   b5058:	782a      	ldrb	r2, [r5, #0]
   b505a:	7820      	ldrb	r0, [r4, #0]
{
   b505c:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b505e:	231a      	movs	r3, #26
   b5060:	fb03 1202 	mla	r2, r3, r2, r1
   b5064:	9200      	str	r2, [sp, #0]
   b5066:	fb03 1300 	mla	r3, r3, r0, r1
   b506a:	4a0e      	ldr	r2, [pc, #56]	; (b50a4 <_Z22publishStateTransitionv+0x54>)
   b506c:	2128      	movs	r1, #40	; 0x28
   b506e:	a802      	add	r0, sp, #8
   b5070:	f002 f9c2 	bl	b73f8 <snprintf>
  oldState = state;
   b5074:	782b      	ldrb	r3, [r5, #0]
   b5076:	7023      	strb	r3, [r4, #0]
   b5078:	f002 f8f6 	bl	b7268 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   b507c:	b148      	cbz	r0, b5092 <_Z22publishStateTransitionv+0x42>
   b507e:	2300      	movs	r3, #0
   b5080:	f88d 3000 	strb.w	r3, [sp]
   b5084:	4b08      	ldr	r3, [pc, #32]	; (b50a8 <_Z22publishStateTransitionv+0x58>)
   b5086:	4909      	ldr	r1, [pc, #36]	; (b50ac <_Z22publishStateTransitionv+0x5c>)
   b5088:	781b      	ldrb	r3, [r3, #0]
   b508a:	4809      	ldr	r0, [pc, #36]	; (b50b0 <_Z22publishStateTransitionv+0x60>)
   b508c:	aa02      	add	r2, sp, #8
   b508e:	f7ff fd67 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b5092:	b00d      	add	sp, #52	; 0x34
   b5094:	bd30      	pop	{r4, r5, pc}
   b5096:	bf00      	nop
   b5098:	2003e5e0 	.word	0x2003e5e0
   b509c:	2003e560 	.word	0x2003e560
   b50a0:	2003e210 	.word	0x2003e210
   b50a4:	000bad8a 	.word	0x000bad8a
   b50a8:	2003e4cc 	.word	0x2003e4cc
   b50ac:	000bad98 	.word	0x000bad98
   b50b0:	2003e564 	.word	0x2003e564

000b50b4 <_Z20updateThresholdValuev>:

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   b50b4:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   b50b6:	4c17      	ldr	r4, [pc, #92]	; (b5114 <_Z20updateThresholdValuev+0x60>)
   b50b8:	68a0      	ldr	r0, [r4, #8]
   b50ba:	f7ff f915 	bl	b42e8 <__aeabi_f2d>
   b50be:	4a16      	ldr	r2, [pc, #88]	; (b5118 <_Z20updateThresholdValuev+0x64>)
   b50c0:	e9cd 0100 	strd	r0, r1, [sp]
   b50c4:	2118      	movs	r1, #24
   b50c6:	4815      	ldr	r0, [pc, #84]	; (b511c <_Z20updateThresholdValuev+0x68>)
   b50c8:	f002 f996 	bl	b73f8 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   b50cc:	68e0      	ldr	r0, [r4, #12]
   b50ce:	f7ff f90b 	bl	b42e8 <__aeabi_f2d>
   b50d2:	4a13      	ldr	r2, [pc, #76]	; (b5120 <_Z20updateThresholdValuev+0x6c>)
   b50d4:	e9cd 0100 	strd	r0, r1, [sp]
   b50d8:	2118      	movs	r1, #24
   b50da:	4812      	ldr	r0, [pc, #72]	; (b5124 <_Z20updateThresholdValuev+0x70>)
   b50dc:	f002 f98c 	bl	b73f8 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   b50e0:	6920      	ldr	r0, [r4, #16]
   b50e2:	f7ff f901 	bl	b42e8 <__aeabi_f2d>
   b50e6:	4a10      	ldr	r2, [pc, #64]	; (b5128 <_Z20updateThresholdValuev+0x74>)
   b50e8:	e9cd 0100 	strd	r0, r1, [sp]
   b50ec:	2118      	movs	r1, #24
   b50ee:	480f      	ldr	r0, [pc, #60]	; (b512c <_Z20updateThresholdValuev+0x78>)
   b50f0:	f002 f982 	bl	b73f8 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   b50f4:	6960      	ldr	r0, [r4, #20]
   b50f6:	f7ff f8f7 	bl	b42e8 <__aeabi_f2d>
   b50fa:	4a0d      	ldr	r2, [pc, #52]	; (b5130 <_Z20updateThresholdValuev+0x7c>)
   b50fc:	e9cd 0100 	strd	r0, r1, [sp]
   b5100:	2118      	movs	r1, #24
   b5102:	480c      	ldr	r0, [pc, #48]	; (b5134 <_Z20updateThresholdValuev+0x80>)
   b5104:	f002 f978 	bl	b73f8 <snprintf>
    alertsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   b5108:	4b0b      	ldr	r3, [pc, #44]	; (b5138 <_Z20updateThresholdValuev+0x84>)
   b510a:	2201      	movs	r2, #1
   b510c:	701a      	strb	r2, [r3, #0]
} 
   b510e:	b002      	add	sp, #8
   b5110:	bd10      	pop	{r4, pc}
   b5112:	bf00      	nop
   b5114:	2003e4d4 	.word	0x2003e4d4
   b5118:	000bada9 	.word	0x000bada9
   b511c:	2003e629 	.word	0x2003e629
   b5120:	000badba 	.word	0x000badba
   b5124:	2003e548 	.word	0x2003e548
   b5128:	000badcb 	.word	0x000badcb
   b512c:	2003e611 	.word	0x2003e611
   b5130:	000baddf 	.word	0x000baddf
   b5134:	2003e530 	.word	0x2003e530
   b5138:	2003e4ec 	.word	0x2003e4ec

000b513c <_Z17setUpperTempLimit6String>:
{
   b513c:	b500      	push	{lr}
   b513e:	b089      	sub	sp, #36	; 0x24
   b5140:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   b5142:	f003 f837 	bl	b81b4 <_ZNK6String7toFloatEv>
   b5146:	4b0d      	ldr	r3, [pc, #52]	; (b517c <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   b5148:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   b514a:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   b514e:	a804      	add	r0, sp, #16
   b5150:	f002 fffa 	bl	b8148 <_ZN6StringC1ERKS_>
   b5154:	2300      	movs	r3, #0
   b5156:	f88d 3000 	strb.w	r3, [sp]
   b515a:	4b09      	ldr	r3, [pc, #36]	; (b5180 <_Z17setUpperTempLimit6String+0x44>)
   b515c:	9a04      	ldr	r2, [sp, #16]
   b515e:	781b      	ldrb	r3, [r3, #0]
   b5160:	4908      	ldr	r1, [pc, #32]	; (b5184 <_Z17setUpperTempLimit6String+0x48>)
   b5162:	4809      	ldr	r0, [pc, #36]	; (b5188 <_Z17setUpperTempLimit6String+0x4c>)
   b5164:	f7ff fcfc 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5168:	a804      	add	r0, sp, #16
   b516a:	f002 ff7f 	bl	b806c <_ZN6StringD1Ev>
  updateThresholdValue();
   b516e:	f7ff ffa1 	bl	b50b4 <_Z20updateThresholdValuev>
}
   b5172:	2001      	movs	r0, #1
   b5174:	b009      	add	sp, #36	; 0x24
   b5176:	f85d fb04 	ldr.w	pc, [sp], #4
   b517a:	bf00      	nop
   b517c:	2003e4d4 	.word	0x2003e4d4
   b5180:	2003e4cc 	.word	0x2003e4cc
   b5184:	000badf4 	.word	0x000badf4
   b5188:	2003e564 	.word	0x2003e564

000b518c <_Z17setLowerTempLimit6String>:
{
   b518c:	b500      	push	{lr}
   b518e:	b089      	sub	sp, #36	; 0x24
   b5190:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   b5192:	f003 f80f 	bl	b81b4 <_ZNK6String7toFloatEv>
   b5196:	4b0d      	ldr	r3, [pc, #52]	; (b51cc <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   b5198:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   b519a:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   b519e:	a804      	add	r0, sp, #16
   b51a0:	f002 ffd2 	bl	b8148 <_ZN6StringC1ERKS_>
   b51a4:	2300      	movs	r3, #0
   b51a6:	f88d 3000 	strb.w	r3, [sp]
   b51aa:	4b09      	ldr	r3, [pc, #36]	; (b51d0 <_Z17setLowerTempLimit6String+0x44>)
   b51ac:	9a04      	ldr	r2, [sp, #16]
   b51ae:	781b      	ldrb	r3, [r3, #0]
   b51b0:	4908      	ldr	r1, [pc, #32]	; (b51d4 <_Z17setLowerTempLimit6String+0x48>)
   b51b2:	4809      	ldr	r0, [pc, #36]	; (b51d8 <_Z17setLowerTempLimit6String+0x4c>)
   b51b4:	f7ff fcd4 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b51b8:	a804      	add	r0, sp, #16
   b51ba:	f002 ff57 	bl	b806c <_ZN6StringD1Ev>
  updateThresholdValue();
   b51be:	f7ff ff79 	bl	b50b4 <_Z20updateThresholdValuev>
}
   b51c2:	2001      	movs	r0, #1
   b51c4:	b009      	add	sp, #36	; 0x24
   b51c6:	f85d fb04 	ldr.w	pc, [sp], #4
   b51ca:	bf00      	nop
   b51cc:	2003e4d4 	.word	0x2003e4d4
   b51d0:	2003e4cc 	.word	0x2003e4cc
   b51d4:	000bae14 	.word	0x000bae14
   b51d8:	2003e564 	.word	0x2003e564

000b51dc <_Z21setUpperHumidityLimit6String>:
{
   b51dc:	b500      	push	{lr}
   b51de:	b089      	sub	sp, #36	; 0x24
   b51e0:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   b51e2:	f002 ffe7 	bl	b81b4 <_ZNK6String7toFloatEv>
   b51e6:	4b0d      	ldr	r3, [pc, #52]	; (b521c <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   b51e8:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   b51ea:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   b51ee:	a804      	add	r0, sp, #16
   b51f0:	f002 ffaa 	bl	b8148 <_ZN6StringC1ERKS_>
   b51f4:	2300      	movs	r3, #0
   b51f6:	f88d 3000 	strb.w	r3, [sp]
   b51fa:	4b09      	ldr	r3, [pc, #36]	; (b5220 <_Z21setUpperHumidityLimit6String+0x44>)
   b51fc:	9a04      	ldr	r2, [sp, #16]
   b51fe:	781b      	ldrb	r3, [r3, #0]
   b5200:	4908      	ldr	r1, [pc, #32]	; (b5224 <_Z21setUpperHumidityLimit6String+0x48>)
   b5202:	4809      	ldr	r0, [pc, #36]	; (b5228 <_Z21setUpperHumidityLimit6String+0x4c>)
   b5204:	f7ff fcac 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5208:	a804      	add	r0, sp, #16
   b520a:	f002 ff2f 	bl	b806c <_ZN6StringD1Ev>
  updateThresholdValue();
   b520e:	f7ff ff51 	bl	b50b4 <_Z20updateThresholdValuev>
}
   b5212:	2001      	movs	r0, #1
   b5214:	b009      	add	sp, #36	; 0x24
   b5216:	f85d fb04 	ldr.w	pc, [sp], #4
   b521a:	bf00      	nop
   b521c:	2003e4d4 	.word	0x2003e4d4
   b5220:	2003e4cc 	.word	0x2003e4cc
   b5224:	000bae34 	.word	0x000bae34
   b5228:	2003e564 	.word	0x2003e564

000b522c <_Z21setLowerHumidityLimit6String>:
{
   b522c:	b500      	push	{lr}
   b522e:	b089      	sub	sp, #36	; 0x24
   b5230:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   b5232:	f002 ffbf 	bl	b81b4 <_ZNK6String7toFloatEv>
   b5236:	4b0d      	ldr	r3, [pc, #52]	; (b526c <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   b5238:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   b523a:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   b523e:	a804      	add	r0, sp, #16
   b5240:	f002 ff82 	bl	b8148 <_ZN6StringC1ERKS_>
   b5244:	2300      	movs	r3, #0
   b5246:	f88d 3000 	strb.w	r3, [sp]
   b524a:	4b09      	ldr	r3, [pc, #36]	; (b5270 <_Z21setLowerHumidityLimit6String+0x44>)
   b524c:	9a04      	ldr	r2, [sp, #16]
   b524e:	781b      	ldrb	r3, [r3, #0]
   b5250:	4908      	ldr	r1, [pc, #32]	; (b5274 <_Z21setLowerHumidityLimit6String+0x48>)
   b5252:	4809      	ldr	r0, [pc, #36]	; (b5278 <_Z21setLowerHumidityLimit6String+0x4c>)
   b5254:	f7ff fc84 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5258:	a804      	add	r0, sp, #16
   b525a:	f002 ff07 	bl	b806c <_ZN6StringD1Ev>
  updateThresholdValue();
   b525e:	f7ff ff29 	bl	b50b4 <_Z20updateThresholdValuev>
}
   b5262:	2001      	movs	r0, #1
   b5264:	b009      	add	sp, #36	; 0x24
   b5266:	f85d fb04 	ldr.w	pc, [sp], #4
   b526a:	bf00      	nop
   b526c:	2003e4d4 	.word	0x2003e4d4
   b5270:	2003e4cc 	.word	0x2003e4cc
   b5274:	000bae51 	.word	0x000bae51
   b5278:	2003e564 	.word	0x2003e564

000b527c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b527c:	b530      	push	{r4, r5, lr}
   b527e:	b085      	sub	sp, #20
   b5280:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5282:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5284:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5286:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5288:	f001 ff6e 	bl	b7168 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b528c:	b990      	cbnz	r0, b52b4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b528e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5290:	b10c      	cbz	r4, b5296 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5292:	6923      	ldr	r3, [r4, #16]
   b5294:	b923      	cbnz	r3, b52a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5296:	4a08      	ldr	r2, [pc, #32]	; (b52b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5298:	4908      	ldr	r1, [pc, #32]	; (b52bc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b529a:	200a      	movs	r0, #10
   b529c:	f001 ff54 	bl	b7148 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b52a0:	230c      	movs	r3, #12
   b52a2:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b52a6:	2304      	movs	r3, #4
   b52a8:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b52aa:	aa01      	add	r2, sp, #4
   b52ac:	6923      	ldr	r3, [r4, #16]
   b52ae:	2101      	movs	r1, #1
   b52b0:	4620      	mov	r0, r4
   b52b2:	4798      	blx	r3
}
   b52b4:	b005      	add	sp, #20
   b52b6:	bd30      	pop	{r4, r5, pc}
   b52b8:	000b6e89 	.word	0x000b6e89
   b52bc:	000bae6e 	.word	0x000bae6e

000b52c0 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   b52c0:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b52c2:	4d11      	ldr	r5, [pc, #68]	; (b5308 <_Z17getBatteryContextv+0x48>)
   b52c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   b52c6:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b52c8:	ac01      	add	r4, sp, #4
   b52ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b52d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b52d4:	4669      	mov	r1, sp
   b52d6:	2007      	movs	r0, #7
   b52d8:	f7ff ffd0 	bl	b527c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   b52dc:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   b52de:	bfa8      	it	ge
   b52e0:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  sysStatus.batteryState = System.batteryState();
   b52e2:	4b0a      	ldr	r3, [pc, #40]	; (b530c <_Z17getBatteryContextv+0x4c>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   b52e4:	4a0a      	ldr	r2, [pc, #40]	; (b5310 <_Z17getBatteryContextv+0x50>)
  sysStatus.batteryState = System.batteryState();
   b52e6:	7418      	strb	r0, [r3, #16]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   b52e8:	ab08      	add	r3, sp, #32
   b52ea:	b2c0      	uxtb	r0, r0
   b52ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b52f0:	2110      	movs	r1, #16
   b52f2:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   b52f6:	4807      	ldr	r0, [pc, #28]	; (b5314 <_Z17getBatteryContextv+0x54>)
   b52f8:	f002 f87e 	bl	b73f8 <snprintf>
  sysStatusWriteNeeded = true;
   b52fc:	4b06      	ldr	r3, [pc, #24]	; (b5318 <_Z17getBatteryContextv+0x58>)
   b52fe:	2201      	movs	r2, #1
   b5300:	701a      	strb	r2, [r3, #0]
}
   b5302:	b009      	add	sp, #36	; 0x24
   b5304:	bd30      	pop	{r4, r5, pc}
   b5306:	bf00      	nop
   b5308:	000bab5c 	.word	0x000bab5c
   b530c:	2003e5e4 	.word	0x2003e5e4
   b5310:	000bb134 	.word	0x000bb134
   b5314:	2003e4ed 	.word	0x2003e4ed
   b5318:	2003e600 	.word	0x2003e600

000b531c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   b531c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b531e:	ed2d 8b02 	vpush	{d8}
  char thresholdMessage[64] = "All within thresholds";
   b5322:	4b77      	ldr	r3, [pc, #476]	; (b5500 <_Z16takeMeasurementsv+0x1e4>)
bool takeMeasurements() {
   b5324:	b097      	sub	sp, #92	; 0x5c
  char thresholdMessage[64] = "All within thresholds";
   b5326:	aa06      	add	r2, sp, #24
   b5328:	f103 0510 	add.w	r5, r3, #16
   b532c:	4617      	mov	r7, r2
   b532e:	6818      	ldr	r0, [r3, #0]
   b5330:	6859      	ldr	r1, [r3, #4]
   b5332:	4614      	mov	r4, r2
   b5334:	c403      	stmia	r4!, {r0, r1}
   b5336:	3308      	adds	r3, #8
   b5338:	42ab      	cmp	r3, r5
   b533a:	4622      	mov	r2, r4
   b533c:	d1f7      	bne.n	b532e <_Z16takeMeasurementsv+0x12>
   b533e:	6818      	ldr	r0, [r3, #0]
   b5340:	889b      	ldrh	r3, [r3, #4]
   b5342:	6020      	str	r0, [r4, #0]
   b5344:	80a3      	strh	r3, [r4, #4]
   b5346:	222a      	movs	r2, #42	; 0x2a
   b5348:	2100      	movs	r1, #0
  sensorData.validData = false;
   b534a:	4d6e      	ldr	r5, [pc, #440]	; (b5504 <_Z16takeMeasurementsv+0x1e8>)
  char thresholdMessage[64] = "All within thresholds";
   b534c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   b5350:	f003 fbf8 	bl	b8b44 <memset>
  sensorData.validData = false;
   b5354:	2400      	movs	r4, #0
  if (sht31.readTemperature()){
   b5356:	486c      	ldr	r0, [pc, #432]	; (b5508 <_Z16takeMeasurementsv+0x1ec>)
  sensorData.validData = false;
   b5358:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   b535a:	f001 fd29 	bl	b6db0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b535e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b5362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5366:	f000 80aa 	beq.w	b54be <_Z16takeMeasurementsv+0x1a2>
    sensorData.temperatureInC = sht31.readTemperature();
   b536a:	4867      	ldr	r0, [pc, #412]	; (b5508 <_Z16takeMeasurementsv+0x1ec>)
   b536c:	f001 fd20 	bl	b6db0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b5370:	ee10 0a10 	vmov	r0, s0
   b5374:	ed85 0a02 	vstr	s0, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   b5378:	f7fe ffb6 	bl	b42e8 <__aeabi_f2d>
   b537c:	4a63      	ldr	r2, [pc, #396]	; (b550c <_Z16takeMeasurementsv+0x1f0>)
   b537e:	e9cd 0100 	strd	r0, r1, [sp]
   b5382:	2110      	movs	r1, #16
   b5384:	4862      	ldr	r0, [pc, #392]	; (b5510 <_Z16takeMeasurementsv+0x1f4>)
   b5386:	f002 f837 	bl	b73f8 <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   b538a:	485f      	ldr	r0, [pc, #380]	; (b5508 <_Z16takeMeasurementsv+0x1ec>)
   b538c:	f001 fd1e 	bl	b6dcc <_ZN14Adafruit_SHT3112readHumidityEv>
   b5390:	ee10 0a10 	vmov	r0, s0
   b5394:	ed85 0a03 	vstr	s0, [r5, #12]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   b5398:	f7fe ffa6 	bl	b42e8 <__aeabi_f2d>
   b539c:	4a5d      	ldr	r2, [pc, #372]	; (b5514 <_Z16takeMeasurementsv+0x1f8>)
   b539e:	e9cd 0100 	strd	r0, r1, [sp]
   b53a2:	2110      	movs	r1, #16
   b53a4:	485c      	ldr	r0, [pc, #368]	; (b5518 <_Z16takeMeasurementsv+0x1fc>)
   b53a6:	f002 f827 	bl	b73f8 <snprintf>
   b53aa:	a905      	add	r1, sp, #20
   b53ac:	2003      	movs	r0, #3
   b53ae:	f7ff ff65 	bl	b527c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b53b2:	2800      	cmp	r0, #0
   b53b4:	f040 809e 	bne.w	b54f4 <_Z16takeMeasurementsv+0x1d8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b53b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   b53bc:	ee07 3a90 	vmov	s15, r3
   b53c0:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   b53c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   b53c8:	4e54      	ldr	r6, [pc, #336]	; (b551c <_Z16takeMeasurementsv+0x200>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   b53ca:	4a55      	ldr	r2, [pc, #340]	; (b5520 <_Z16takeMeasurementsv+0x204>)
   b53cc:	4855      	ldr	r0, [pc, #340]	; (b5524 <_Z16takeMeasurementsv+0x208>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   b53ce:	edc5 7a04 	vstr	s15, [r5, #16]
   b53d2:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   b53d6:	2110      	movs	r1, #16
   b53d8:	f002 f80e 	bl	b73f8 <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   b53dc:	ed95 8a02 	vldr	s16, [r5, #8]
   b53e0:	edd6 7a03 	vldr	s15, [r6, #12]
   b53e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53ec:	f140 8085 	bpl.w	b54fa <_Z16takeMeasurementsv+0x1de>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   b53f0:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   b53f2:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   b53f6:	7074      	strb	r4, [r6, #1]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   b53f8:	f7fe ff76 	bl	b42e8 <__aeabi_f2d>
   b53fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5400:	ee18 0a10 	vmov	r0, s16
   b5404:	f7fe ff70 	bl	b42e8 <__aeabi_f2d>
   b5408:	4a47      	ldr	r2, [pc, #284]	; (b5528 <_Z16takeMeasurementsv+0x20c>)
   b540a:	e9cd 0100 	strd	r0, r1, [sp]
   b540e:	2140      	movs	r1, #64	; 0x40
   b5410:	4638      	mov	r0, r7
   b5412:	f001 fff1 	bl	b73f8 <snprintf>
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   b5416:	ed95 8a02 	vldr	s16, [r5, #8]
   b541a:	edd6 7a02 	vldr	s15, [r6, #8]
   b541e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5426:	dd12      	ble.n	b544e <_Z16takeMeasurementsv+0x132>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   b5428:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   b542a:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperTemperatureThresholdCrossed = true;
   b542e:	7034      	strb	r4, [r6, #0]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   b5430:	f7fe ff5a 	bl	b42e8 <__aeabi_f2d>
   b5434:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5438:	ee18 0a10 	vmov	r0, s16
   b543c:	f7fe ff54 	bl	b42e8 <__aeabi_f2d>
   b5440:	4a3a      	ldr	r2, [pc, #232]	; (b552c <_Z16takeMeasurementsv+0x210>)
   b5442:	e9cd 0100 	strd	r0, r1, [sp]
   b5446:	2140      	movs	r1, #64	; 0x40
   b5448:	4638      	mov	r0, r7
   b544a:	f001 ffd5 	bl	b73f8 <snprintf>
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   b544e:	ed95 8a03 	vldr	s16, [r5, #12]
   b5452:	edd6 7a05 	vldr	s15, [r6, #20]
   b5456:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b545e:	d512      	bpl.n	b5486 <_Z16takeMeasurementsv+0x16a>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   b5460:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   b5462:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerHumidityThresholdCrossed = true;
   b5466:	70f4      	strb	r4, [r6, #3]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   b5468:	f7fe ff3e 	bl	b42e8 <__aeabi_f2d>
   b546c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5470:	ee18 0a10 	vmov	r0, s16
   b5474:	f7fe ff38 	bl	b42e8 <__aeabi_f2d>
   b5478:	4a2d      	ldr	r2, [pc, #180]	; (b5530 <_Z16takeMeasurementsv+0x214>)
   b547a:	e9cd 0100 	strd	r0, r1, [sp]
   b547e:	2140      	movs	r1, #64	; 0x40
   b5480:	4638      	mov	r0, r7
   b5482:	f001 ffb9 	bl	b73f8 <snprintf>
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   b5486:	ed95 8a03 	vldr	s16, [r5, #12]
   b548a:	edd6 7a04 	vldr	s15, [r6, #16]
   b548e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5496:	dd12      	ble.n	b54be <_Z16takeMeasurementsv+0x1a2>
      alertsStatus.upperHumidityThresholdCrossed = true;
   b5498:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   b549a:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperHumidityThresholdCrossed = true;
   b549e:	70b4      	strb	r4, [r6, #2]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   b54a0:	f7fe ff22 	bl	b42e8 <__aeabi_f2d>
   b54a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b54a8:	ee18 0a10 	vmov	r0, s16
   b54ac:	f7fe ff1c 	bl	b42e8 <__aeabi_f2d>
   b54b0:	4a20      	ldr	r2, [pc, #128]	; (b5534 <_Z16takeMeasurementsv+0x218>)
   b54b2:	e9cd 0100 	strd	r0, r1, [sp]
   b54b6:	2140      	movs	r1, #64	; 0x40
   b54b8:	4638      	mov	r0, r7
   b54ba:	f001 ff9d 	bl	b73f8 <snprintf>
    sensorData.validData = true;
   b54be:	2601      	movs	r6, #1
    getBatteryContext();                                                                    // Check what the battery is doing.
   b54c0:	f7ff fefe 	bl	b52c0 <_Z17getBatteryContextv>
    sensorData.validData = true;
   b54c4:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   b54c6:	f003 f808 	bl	b84da <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   b54ca:	4b1b      	ldr	r3, [pc, #108]	; (b5538 <_Z16takeMeasurementsv+0x21c>)
    sensorData.timeStamp = Time.now();
   b54cc:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   b54ce:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   b54d0:	4b1a      	ldr	r3, [pc, #104]	; (b553c <_Z16takeMeasurementsv+0x220>)
   b54d2:	701e      	strb	r6, [r3, #0]
    if (haveAnyAlertsBeenSet) publishQueue.publish("Alerts", thresholdMessage,PRIVATE);
   b54d4:	b14c      	cbz	r4, b54ea <_Z16takeMeasurementsv+0x1ce>
   b54d6:	2300      	movs	r3, #0
   b54d8:	f88d 3000 	strb.w	r3, [sp]
   b54dc:	4b18      	ldr	r3, [pc, #96]	; (b5540 <_Z16takeMeasurementsv+0x224>)
   b54de:	4919      	ldr	r1, [pc, #100]	; (b5544 <_Z16takeMeasurementsv+0x228>)
   b54e0:	781b      	ldrb	r3, [r3, #0]
   b54e2:	4819      	ldr	r0, [pc, #100]	; (b5548 <_Z16takeMeasurementsv+0x22c>)
   b54e4:	463a      	mov	r2, r7
   b54e6:	f7ff fb3b 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b54ea:	4620      	mov	r0, r4
   b54ec:	b017      	add	sp, #92	; 0x5c
   b54ee:	ecbd 8b02 	vpop	{d8}
   b54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   b54f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b54f8:	e764      	b.n	b53c4 <_Z16takeMeasurementsv+0xa8>
  bool haveAnyAlertsBeenSet = false;
   b54fa:	2400      	movs	r4, #0
   b54fc:	e78b      	b.n	b5416 <_Z16takeMeasurementsv+0xfa>
   b54fe:	bf00      	nop
   b5500:	000bab78 	.word	0x000bab78
   b5504:	2003e5bc 	.word	0x2003e5bc
   b5508:	2003e5d4 	.word	0x2003e5d4
   b550c:	000bae94 	.word	0x000bae94
   b5510:	2003e601 	.word	0x2003e601
   b5514:	000bae9c 	.word	0x000bae9c
   b5518:	2003e520 	.word	0x2003e520
   b551c:	2003e4d4 	.word	0x2003e4d4
   b5520:	000baea4 	.word	0x000baea4
   b5524:	2003e4fd 	.word	0x2003e4fd
   b5528:	000baeaa 	.word	0x000baeaa
   b552c:	000baec7 	.word	0x000baec7
   b5530:	000baee5 	.word	0x000baee5
   b5534:	000baf06 	.word	0x000baf06
   b5538:	2003e5d0 	.word	0x2003e5d0
   b553c:	2003e4ec 	.word	0x2003e4ec
   b5540:	2003e4cc 	.word	0x2003e4cc
   b5544:	000baf28 	.word	0x000baf28
   b5548:	2003e564 	.word	0x2003e564

000b554c <loop>:
{
   b554c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch(state) {
   b554e:	4c70      	ldr	r4, [pc, #448]	; (b5710 <loop+0x1c4>)
   b5550:	4e70      	ldr	r6, [pc, #448]	; (b5714 <loop+0x1c8>)
   b5552:	7823      	ldrb	r3, [r4, #0]
   b5554:	4d70      	ldr	r5, [pc, #448]	; (b5718 <loop+0x1cc>)
   b5556:	3b01      	subs	r3, #1
   b5558:	2b04      	cmp	r3, #4
   b555a:	d852      	bhi.n	b5602 <loop+0xb6>
   b555c:	e8df f003 	tbb	[pc, r3]
   b5560:	311903b4 	.word	0x311903b4
   b5564:	80          	.byte	0x80
   b5565:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b5566:	4b6d      	ldr	r3, [pc, #436]	; (b571c <loop+0x1d0>)
   b5568:	7a5b      	ldrb	r3, [r3, #9]
   b556a:	b12b      	cbz	r3, b5578 <loop+0x2c>
   b556c:	4b6c      	ldr	r3, [pc, #432]	; (b5720 <loop+0x1d4>)
   b556e:	781b      	ldrb	r3, [r3, #0]
   b5570:	2b02      	cmp	r3, #2
   b5572:	d001      	beq.n	b5578 <loop+0x2c>
   b5574:	f7ff fd6c 	bl	b5050 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   b5578:	f002 ffaf 	bl	b84da <_ZN9TimeClass3nowEv>
   b557c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b5580:	fb90 f2f3 	sdiv	r2, r0, r3
   b5584:	fb02 0013 	mls	r0, r2, r3, r0
   b5588:	2800      	cmp	r0, #0
   b558a:	d13a      	bne.n	b5602 <loop+0xb6>
   b558c:	2303      	movs	r3, #3
     state = IDLE_STATE;
   b558e:	7023      	strb	r3, [r4, #0]
   b5590:	e037      	b.n	b5602 <loop+0xb6>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b5592:	4b62      	ldr	r3, [pc, #392]	; (b571c <loop+0x1d0>)
   b5594:	7a5b      	ldrb	r3, [r3, #9]
   b5596:	b12b      	cbz	r3, b55a4 <loop+0x58>
   b5598:	4b61      	ldr	r3, [pc, #388]	; (b5720 <loop+0x1d4>)
   b559a:	781b      	ldrb	r3, [r3, #0]
   b559c:	2b03      	cmp	r3, #3
   b559e:	d001      	beq.n	b55a4 <loop+0x58>
   b55a0:	f7ff fd56 	bl	b5050 <_Z22publishStateTransitionv>
    if (takeMeasurements()) alertsStatus.thresholdCrossedFlag = true;                       // A return of a "true" value indicates that one of the thresholds have been crossed
   b55a4:	f7ff feba 	bl	b531c <_Z16takeMeasurementsv>
   b55a8:	4601      	mov	r1, r0
   b55aa:	b128      	cbz	r0, b55b8 <loop+0x6c>
   b55ac:	2301      	movs	r3, #1
   b55ae:	7133      	strb	r3, [r6, #4]
    alertsStatusWriteNeeded = true;
   b55b0:	2301      	movs	r3, #1
   b55b2:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   b55b4:	2304      	movs	r3, #4
   b55b6:	e7ea      	b.n	b558e <loop+0x42>
      alertsStatus.thresholdCrossedFlag = false;
   b55b8:	7130      	strb	r0, [r6, #4]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   b55ba:	2007      	movs	r0, #7
   b55bc:	f003 f995 	bl	b88ea <digitalWrite>
   b55c0:	e7f6      	b.n	b55b0 <loop+0x64>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   b55c2:	4b56      	ldr	r3, [pc, #344]	; (b571c <loop+0x1d0>)
   b55c4:	7a5b      	ldrb	r3, [r3, #9]
   b55c6:	b12b      	cbz	r3, b55d4 <loop+0x88>
   b55c8:	4b55      	ldr	r3, [pc, #340]	; (b5720 <loop+0x1d4>)
   b55ca:	781b      	ldrb	r3, [r3, #0]
   b55cc:	2b04      	cmp	r3, #4
   b55ce:	d001      	beq.n	b55d4 <loop+0x88>
   b55d0:	f7ff fd3e 	bl	b5050 <_Z22publishStateTransitionv>
   b55d4:	f001 fe48 	bl	b7268 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b55d8:	b168      	cbz	r0, b55f6 <loop+0xaa>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   b55da:	f002 ff8f 	bl	b84fc <_ZN9TimeClass4hourEv>
   b55de:	280c      	cmp	r0, #12
   b55e0:	d105      	bne.n	b55ee <loop+0xa2>
   b55e2:	f001 fe41 	bl	b7268 <spark_cloud_flag_connected>
        if (!connected()) {
   b55e6:	b110      	cbz	r0, b55ee <loop+0xa2>
        return spark_sync_time(NULL);
   b55e8:	2000      	movs	r0, #0
   b55ea:	f001 fe5d 	bl	b72a8 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   b55ee:	f7ff fcdf 	bl	b4fb0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   b55f2:	2305      	movs	r3, #5
   b55f4:	e7cb      	b.n	b558e <loop+0x42>
      state = ERROR_STATE;
   b55f6:	2301      	movs	r3, #1
   b55f8:	7023      	strb	r3, [r4, #0]
   b55fa:	f001 fc4d 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b55fe:	4b49      	ldr	r3, [pc, #292]	; (b5724 <loop+0x1d8>)
   b5600:	6018      	str	r0, [r3, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   b5602:	4849      	ldr	r0, [pc, #292]	; (b5728 <loop+0x1dc>)
   b5604:	f000 ff64 	bl	b64d0 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   b5608:	4b48      	ldr	r3, [pc, #288]	; (b572c <loop+0x1e0>)
   b560a:	781b      	ldrb	r3, [r3, #0]
   b560c:	b10b      	cbz	r3, b5612 <loop+0xc6>
   b560e:	f7ff fca7 	bl	b4f60 <_Z11petWatchdogv>
  if (alertsStatus.thresholdCrossedFlag) blinkLED(blueLED);
   b5612:	7933      	ldrb	r3, [r6, #4]
   b5614:	b113      	cbz	r3, b561c <loop+0xd0>
   b5616:	2007      	movs	r0, #7
   b5618:	f7ff fd00 	bl	b501c <_Z8blinkLEDi>
  if (sysStatusWriteNeeded) {
   b561c:	4c44      	ldr	r4, [pc, #272]	; (b5730 <loop+0x1e4>)
   b561e:	7823      	ldrb	r3, [r4, #0]
   b5620:	b13b      	cbz	r3, b5632 <loop+0xe6>
   b5622:	231c      	movs	r3, #28
   b5624:	4a3d      	ldr	r2, [pc, #244]	; (b571c <loop+0x1d0>)
   b5626:	4843      	ldr	r0, [pc, #268]	; (b5734 <loop+0x1e8>)
   b5628:	2101      	movs	r1, #1
   b562a:	f000 fb4e 	bl	b5cca <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   b562e:	2300      	movs	r3, #0
   b5630:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   b5632:	782b      	ldrb	r3, [r5, #0]
   b5634:	b13b      	cbz	r3, b5646 <loop+0xfa>
   b5636:	2318      	movs	r3, #24
   b5638:	4a36      	ldr	r2, [pc, #216]	; (b5714 <loop+0x1c8>)
   b563a:	483e      	ldr	r0, [pc, #248]	; (b5734 <loop+0x1e8>)
   b563c:	2150      	movs	r1, #80	; 0x50
   b563e:	f000 fb44 	bl	b5cca <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   b5642:	2300      	movs	r3, #0
   b5644:	702b      	strb	r3, [r5, #0]
  if (sensorDataWriteNeeded) {
   b5646:	4c3c      	ldr	r4, [pc, #240]	; (b5738 <loop+0x1ec>)
   b5648:	7823      	ldrb	r3, [r4, #0]
   b564a:	b13b      	cbz	r3, b565c <loop+0x110>
   b564c:	2314      	movs	r3, #20
   b564e:	4a3b      	ldr	r2, [pc, #236]	; (b573c <loop+0x1f0>)
   b5650:	4838      	ldr	r0, [pc, #224]	; (b5734 <loop+0x1e8>)
   b5652:	21a0      	movs	r1, #160	; 0xa0
   b5654:	f000 fb39 	bl	b5cca <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   b5658:	2300      	movs	r3, #0
   b565a:	7023      	strb	r3, [r4, #0]
}
   b565c:	b003      	add	sp, #12
   b565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b5660:	4b2e      	ldr	r3, [pc, #184]	; (b571c <loop+0x1d0>)
   b5662:	7a5b      	ldrb	r3, [r3, #9]
   b5664:	b12b      	cbz	r3, b5672 <loop+0x126>
   b5666:	4b2e      	ldr	r3, [pc, #184]	; (b5720 <loop+0x1d4>)
   b5668:	781b      	ldrb	r3, [r3, #0]
   b566a:	2b05      	cmp	r3, #5
   b566c:	d001      	beq.n	b5672 <loop+0x126>
   b566e:	f7ff fcef 	bl	b5050 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   b5672:	4b33      	ldr	r3, [pc, #204]	; (b5740 <loop+0x1f4>)
   b5674:	781b      	ldrb	r3, [r3, #0]
   b5676:	b953      	cbnz	r3, b568e <loop+0x142>
   b5678:	f002 ff2f 	bl	b84da <_ZN9TimeClass3nowEv>
   b567c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b5680:	fb90 f2f3 	sdiv	r2, r0, r3
   b5684:	fb02 0013 	mls	r0, r2, r3, r0
   b5688:	b108      	cbz	r0, b568e <loop+0x142>
     state = IDLE_STATE;
   b568a:	2302      	movs	r3, #2
   b568c:	e77f      	b.n	b558e <loop+0x42>
   b568e:	f001 fc03 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   b5692:	4b2c      	ldr	r3, [pc, #176]	; (b5744 <loop+0x1f8>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	1ac0      	subs	r0, r0, r3
   b5698:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   b569c:	4298      	cmp	r0, r3
   b569e:	d9b0      	bls.n	b5602 <loop+0xb6>
   b56a0:	f001 fbfa 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
   b56a4:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b56a6:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   b56aa:	4f1e      	ldr	r7, [pc, #120]	; (b5724 <loop+0x1d8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b56ac:	4b26      	ldr	r3, [pc, #152]	; (b5748 <loop+0x1fc>)
   b56ae:	4a27      	ldr	r2, [pc, #156]	; (b574c <loop+0x200>)
   b56b0:	781b      	ldrb	r3, [r3, #0]
   b56b2:	4927      	ldr	r1, [pc, #156]	; (b5750 <loop+0x204>)
      resetTimeStamp = millis();
   b56b4:	6038      	str	r0, [r7, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b56b6:	4827      	ldr	r0, [pc, #156]	; (b5754 <loop+0x208>)
   b56b8:	f7ff fa52 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      state = ERROR_STATE;                                                                  // Response timed out
   b56bc:	2301      	movs	r3, #1
   b56be:	7023      	strb	r3, [r4, #0]
   b56c0:	f001 fbea 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b56c4:	6038      	str	r0, [r7, #0]
   b56c6:	e79c      	b.n	b5602 <loop+0xb6>
    if (state != oldState) publishStateTransition();
   b56c8:	4b15      	ldr	r3, [pc, #84]	; (b5720 <loop+0x1d4>)
   b56ca:	781b      	ldrb	r3, [r3, #0]
   b56cc:	2b01      	cmp	r3, #1
   b56ce:	d001      	beq.n	b56d4 <loop+0x188>
   b56d0:	f7ff fcbe 	bl	b5050 <_Z22publishStateTransitionv>
   b56d4:	f001 fbe0 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   b56d8:	4b12      	ldr	r3, [pc, #72]	; (b5724 <loop+0x1d8>)
   b56da:	681b      	ldr	r3, [r3, #0]
   b56dc:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   b56e0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   b56e4:	4283      	cmp	r3, r0
   b56e6:	d28c      	bcs.n	b5602 <loop+0xb6>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b56e8:	f001 fdbe 	bl	b7268 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   b56ec:	b148      	cbz	r0, b5702 <loop+0x1b6>
   b56ee:	2300      	movs	r3, #0
   b56f0:	f88d 3000 	strb.w	r3, [sp]
   b56f4:	4b14      	ldr	r3, [pc, #80]	; (b5748 <loop+0x1fc>)
   b56f6:	4a18      	ldr	r2, [pc, #96]	; (b5758 <loop+0x20c>)
   b56f8:	781b      	ldrb	r3, [r3, #0]
   b56fa:	4918      	ldr	r1, [pc, #96]	; (b575c <loop+0x210>)
   b56fc:	4815      	ldr	r0, [pc, #84]	; (b5754 <loop+0x208>)
   b56fe:	f7ff fa2f 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      delay(2000);
   b5702:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5706:	f001 fec7 	bl	b7498 <delay>
      System.reset();
   b570a:	f002 fd75 	bl	b81f8 <_ZN11SystemClass5resetEv>
   b570e:	e778      	b.n	b5602 <loop+0xb6>
   b5710:	2003e5e0 	.word	0x2003e5e0
   b5714:	2003e4d4 	.word	0x2003e4d4
   b5718:	2003e4ec 	.word	0x2003e4ec
   b571c:	2003e5e4 	.word	0x2003e5e4
   b5720:	2003e560 	.word	0x2003e560
   b5724:	2003e59c 	.word	0x2003e59c
   b5728:	2003e5a0 	.word	0x2003e5a0
   b572c:	2003e641 	.word	0x2003e641
   b5730:	2003e600 	.word	0x2003e600
   b5734:	2003e510 	.word	0x2003e510
   b5738:	2003e5d0 	.word	0x2003e5d0
   b573c:	2003e5bc 	.word	0x2003e5bc
   b5740:	2003e50d 	.word	0x2003e50d
   b5744:	2003e644 	.word	0x2003e644
   b5748:	2003e4cc 	.word	0x2003e4cc
   b574c:	000bb4d8 	.word	0x000bb4d8
   b5750:	000baf2f 	.word	0x000baf2f
   b5754:	2003e564 	.word	0x2003e564
   b5758:	000baf48 	.word	0x000baf48
   b575c:	000bacad 	.word	0x000bacad

000b5760 <setup>:
{
   b5760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b5764:	2100      	movs	r1, #0
{
   b5766:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b5768:	2008      	movs	r0, #8
   b576a:	f003 f8ad 	bl	b88c8 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   b576e:	2101      	movs	r1, #1
   b5770:	2005      	movs	r0, #5
   b5772:	f003 f8a9 	bl	b88c8 <pinMode>
  pinMode(blueLED, OUTPUT);                                                                 // declare the Blue LED Pin as an output
   b5776:	2101      	movs	r1, #1
   b5778:	2007      	movs	r0, #7
   b577a:	f003 f8a5 	bl	b88c8 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   b577e:	f7ff fbef 	bl	b4f60 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   b5782:	2300      	movs	r3, #0
   b5784:	9300      	str	r3, [sp, #0]
   b5786:	2201      	movs	r2, #1
   b5788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b578c:	4990      	ldr	r1, [pc, #576]	; (b59d0 <setup+0x270>)
   b578e:	2008      	movs	r0, #8
   b5790:	f002 fab6 	bl	b7d00 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5794:	4b8f      	ldr	r3, [pc, #572]	; (b59d4 <setup+0x274>)
   b5796:	aa0a      	add	r2, sp, #40	; 0x28
   b5798:	f103 0510 	add.w	r5, r3, #16
   b579c:	4616      	mov	r6, r2
   b579e:	6818      	ldr	r0, [r3, #0]
   b57a0:	6859      	ldr	r1, [r3, #4]
   b57a2:	4614      	mov	r4, r2
   b57a4:	c403      	stmia	r4!, {r0, r1}
   b57a6:	3308      	adds	r3, #8
   b57a8:	42ab      	cmp	r3, r5
   b57aa:	4622      	mov	r2, r4
   b57ac:	d1f7      	bne.n	b579e <setup+0x3e>
   b57ae:	8819      	ldrh	r1, [r3, #0]
   b57b0:	789b      	ldrb	r3, [r3, #2]
   b57b2:	70a3      	strb	r3, [r4, #2]
   b57b4:	8021      	strh	r1, [r4, #0]
   b57b6:	222d      	movs	r2, #45	; 0x2d
   b57b8:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   b57ba:	4d87      	ldr	r5, [pc, #540]	; (b59d8 <setup+0x278>)
   b57bc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; b5aa4 <setup+0x344>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b57c0:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   b57c4:	2400      	movs	r4, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b57c6:	f003 f9bd 	bl	b8b44 <memset>
        return spark_deviceID();
   b57ca:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   b57cc:	702c      	strb	r4, [r5, #0]
   b57ce:	f001 fd53 	bl	b7278 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b57d2:	4623      	mov	r3, r4
   b57d4:	227d      	movs	r2, #125	; 0x7d
   b57d6:	a91a      	add	r1, sp, #104	; 0x68
   b57d8:	a802      	add	r0, sp, #8
   b57da:	f002 fcd2 	bl	b8182 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b57de:	4623      	mov	r3, r4
   b57e0:	4622      	mov	r2, r4
   b57e2:	497e      	ldr	r1, [pc, #504]	; (b59dc <setup+0x27c>)
   b57e4:	e9cd 4400 	strd	r4, r4, [sp]
   b57e8:	a81a      	add	r0, sp, #104	; 0x68
   b57ea:	f001 fd55 	bl	b7298 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b57ee:	497c      	ldr	r1, [pc, #496]	; (b59e0 <setup+0x280>)
   b57f0:	487c      	ldr	r0, [pc, #496]	; (b59e4 <setup+0x284>)
   b57f2:	f7ff fa4d 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b57f6:	497c      	ldr	r1, [pc, #496]	; (b59e8 <setup+0x288>)
   b57f8:	487c      	ldr	r0, [pc, #496]	; (b59ec <setup+0x28c>)
   b57fa:	f7ff fa49 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b57fe:	497c      	ldr	r1, [pc, #496]	; (b59f0 <setup+0x290>)
   b5800:	487c      	ldr	r0, [pc, #496]	; (b59f4 <setup+0x294>)
   b5802:	f7ff fa45 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5806:	497c      	ldr	r1, [pc, #496]	; (b59f8 <setup+0x298>)
   b5808:	487c      	ldr	r0, [pc, #496]	; (b59fc <setup+0x29c>)
   b580a:	f7ff fa41 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b580e:	497c      	ldr	r1, [pc, #496]	; (b5a00 <setup+0x2a0>)
   b5810:	487c      	ldr	r0, [pc, #496]	; (b5a04 <setup+0x2a4>)
   b5812:	f7ff fa3d 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5816:	497c      	ldr	r1, [pc, #496]	; (b5a08 <setup+0x2a8>)
   b5818:	487c      	ldr	r0, [pc, #496]	; (b5a0c <setup+0x2ac>)
   b581a:	f7ff fa39 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b581e:	497c      	ldr	r1, [pc, #496]	; (b5a10 <setup+0x2b0>)
   b5820:	487c      	ldr	r0, [pc, #496]	; (b5a14 <setup+0x2b4>)
   b5822:	f7ff fa35 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5826:	497c      	ldr	r1, [pc, #496]	; (b5a18 <setup+0x2b8>)
   b5828:	487c      	ldr	r0, [pc, #496]	; (b5a1c <setup+0x2bc>)
   b582a:	f7ff fa31 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b582e:	497c      	ldr	r1, [pc, #496]	; (b5a20 <setup+0x2c0>)
   b5830:	487c      	ldr	r0, [pc, #496]	; (b5a24 <setup+0x2c4>)
   b5832:	f7ff fa2d 	bl	b4c90 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5836:	497c      	ldr	r1, [pc, #496]	; (b5a28 <setup+0x2c8>)
   b5838:	487c      	ldr	r0, [pc, #496]	; (b5a2c <setup+0x2cc>)
   b583a:	4623      	mov	r3, r4
   b583c:	2202      	movs	r2, #2
   b583e:	f001 fcfb 	bl	b7238 <spark_variable>
   b5842:	4623      	mov	r3, r4
   b5844:	497a      	ldr	r1, [pc, #488]	; (b5a30 <setup+0x2d0>)
   b5846:	487b      	ldr	r0, [pc, #492]	; (b5a34 <setup+0x2d4>)
   b5848:	2201      	movs	r2, #1
   b584a:	f001 fcf5 	bl	b7238 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b584e:	4a7a      	ldr	r2, [pc, #488]	; (b5a38 <setup+0x2d8>)
   b5850:	497a      	ldr	r1, [pc, #488]	; (b5a3c <setup+0x2dc>)
   b5852:	487b      	ldr	r0, [pc, #492]	; (b5a40 <setup+0x2e0>)
   b5854:	f001 ff15 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5858:	4a7a      	ldr	r2, [pc, #488]	; (b5a44 <setup+0x2e4>)
   b585a:	497b      	ldr	r1, [pc, #492]	; (b5a48 <setup+0x2e8>)
   b585c:	4878      	ldr	r0, [pc, #480]	; (b5a40 <setup+0x2e0>)
   b585e:	f001 ff10 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5862:	4a7a      	ldr	r2, [pc, #488]	; (b5a4c <setup+0x2ec>)
   b5864:	497a      	ldr	r1, [pc, #488]	; (b5a50 <setup+0x2f0>)
   b5866:	4876      	ldr	r0, [pc, #472]	; (b5a40 <setup+0x2e0>)
   b5868:	f001 ff0b 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b586c:	4a79      	ldr	r2, [pc, #484]	; (b5a54 <setup+0x2f4>)
   b586e:	497a      	ldr	r1, [pc, #488]	; (b5a58 <setup+0x2f8>)
   b5870:	4873      	ldr	r0, [pc, #460]	; (b5a40 <setup+0x2e0>)
   b5872:	f001 ff06 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5876:	4a79      	ldr	r2, [pc, #484]	; (b5a5c <setup+0x2fc>)
   b5878:	4979      	ldr	r1, [pc, #484]	; (b5a60 <setup+0x300>)
   b587a:	4871      	ldr	r0, [pc, #452]	; (b5a40 <setup+0x2e0>)
   b587c:	f001 ff01 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5880:	4a78      	ldr	r2, [pc, #480]	; (b5a64 <setup+0x304>)
   b5882:	4979      	ldr	r1, [pc, #484]	; (b5a68 <setup+0x308>)
   b5884:	486e      	ldr	r0, [pc, #440]	; (b5a40 <setup+0x2e0>)
   b5886:	f001 fefc 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b588a:	4a78      	ldr	r2, [pc, #480]	; (b5a6c <setup+0x30c>)
   b588c:	4978      	ldr	r1, [pc, #480]	; (b5a70 <setup+0x310>)
   b588e:	486c      	ldr	r0, [pc, #432]	; (b5a40 <setup+0x2e0>)
   b5890:	f001 fef7 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5894:	4a67      	ldr	r2, [pc, #412]	; (b5a34 <setup+0x2d4>)
   b5896:	4977      	ldr	r1, [pc, #476]	; (b5a74 <setup+0x314>)
   b5898:	4869      	ldr	r0, [pc, #420]	; (b5a40 <setup+0x2e0>)
   b589a:	f001 fef2 	bl	b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                        // Start the real time clock
   b589e:	4876      	ldr	r0, [pc, #472]	; (b5a78 <setup+0x318>)
   b58a0:	f000 fd0e 	bl	b62c0 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   b58a4:	4621      	mov	r1, r4
   b58a6:	4874      	ldr	r0, [pc, #464]	; (b5a78 <setup+0x318>)
   b58a8:	f000 fe49 	bl	b653e <_ZN8MCP7941010clearAlarmEi>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   b58ac:	f002 fe15 	bl	b84da <_ZN9TimeClass3nowEv>
   b58b0:	4602      	mov	r2, r0
   b58b2:	17c3      	asrs	r3, r0, #31
   b58b4:	a806      	add	r0, sp, #24
   b58b6:	f002 fd0b 	bl	b82d0 <_ZN9TimeClass7timeStrEx>
   b58ba:	4970      	ldr	r1, [pc, #448]	; (b5a7c <setup+0x31c>)
   b58bc:	f898 3000 	ldrb.w	r3, [r8]
   b58c0:	9a06      	ldr	r2, [sp, #24]
   b58c2:	486f      	ldr	r0, [pc, #444]	; (b5a80 <setup+0x320>)
   b58c4:	f88d 4000 	strb.w	r4, [sp]
   b58c8:	f7ff f94a 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b58cc:	a806      	add	r0, sp, #24
   b58ce:	f002 fbcd 	bl	b806c <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   b58d2:	486c      	ldr	r0, [pc, #432]	; (b5a84 <setup+0x324>)
   b58d4:	2144      	movs	r1, #68	; 0x44
   b58d6:	f001 f9d4 	bl	b6c82 <_ZN14Adafruit_SHT315beginEh>
   b58da:	b948      	cbnz	r0, b58f0 <setup+0x190>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   b58dc:	496a      	ldr	r1, [pc, #424]	; (b5a88 <setup+0x328>)
   b58de:	4630      	mov	r0, r6
   b58e0:	f003 f966 	bl	b8bb0 <strcpy>
    state = ERROR_STATE;
   b58e4:	2301      	movs	r3, #1
   b58e6:	702b      	strb	r3, [r5, #0]
   b58e8:	f001 fad6 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b58ec:	4b67      	ldr	r3, [pc, #412]	; (b5a8c <setup+0x32c>)
   b58ee:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   b58f0:	4867      	ldr	r0, [pc, #412]	; (b5a90 <setup+0x330>)
   b58f2:	f000 f95d 	bl	b5bb0 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b58f6:	2301      	movs	r3, #1
   b58f8:	4865      	ldr	r0, [pc, #404]	; (b5a90 <setup+0x330>)
   b58fa:	aa06      	add	r2, sp, #24
   b58fc:	2100      	movs	r1, #0
   b58fe:	f000 f999 	bl	b5c34 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   b5902:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5906:	2b05      	cmp	r3, #5
   b5908:	d036      	beq.n	b5978 <setup+0x218>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   b590a:	4861      	ldr	r0, [pc, #388]	; (b5a90 <setup+0x330>)
   b590c:	f000 f95a 	bl	b5bc4 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5910:	4a60      	ldr	r2, [pc, #384]	; (b5a94 <setup+0x334>)
   b5912:	485f      	ldr	r0, [pc, #380]	; (b5a90 <setup+0x330>)
   b5914:	2304      	movs	r3, #4
   b5916:	2100      	movs	r1, #0
   b5918:	f000 f9d7 	bl	b5cca <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b591c:	2301      	movs	r3, #1
   b591e:	485c      	ldr	r0, [pc, #368]	; (b5a90 <setup+0x330>)
   b5920:	aa06      	add	r2, sp, #24
   b5922:	2100      	movs	r1, #0
   b5924:	f000 f986 	bl	b5c34 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   b5928:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b592c:	2b05      	cmp	r3, #5
   b592e:	d01e      	beq.n	b596e <setup+0x20e>
   b5930:	2301      	movs	r3, #1
   b5932:	702b      	strb	r3, [r5, #0]
  if (sysStatus.thirdPartySim) {
   b5934:	4f58      	ldr	r7, [pc, #352]	; (b5a98 <setup+0x338>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   b5936:	f7ff fa93 	bl	b4e60 <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   b593a:	f7ff fabb 	bl	b4eb4 <_Z17checkAlertsValuesv>
  if (sysStatus.thirdPartySim) {
   b593e:	787b      	ldrb	r3, [r7, #1]
   b5940:	b363      	cbz	r3, b599c <setup+0x23c>
        return hal_timer_millis(nullptr);
   b5942:	2000      	movs	r0, #0
   b5944:	f001 fab8 	bl	b6eb8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5948:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b594c:	4604      	mov	r4, r0
   b594e:	2000      	movs	r0, #0
   b5950:	f001 fab2 	bl	b6eb8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5954:	1b00      	subs	r0, r0, r4
   b5956:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b595a:	4548      	cmp	r0, r9
   b595c:	f171 0300 	sbcs.w	r3, r1, #0
   b5960:	d217      	bcs.n	b5992 <setup+0x232>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5962:	f001 fc81 	bl	b7268 <spark_cloud_flag_connected>
   b5966:	b9a0      	cbnz	r0, b5992 <setup+0x232>
            spark_process();
   b5968:	f001 fc76 	bl	b7258 <spark_process>
        while (_while() && !_condition()) {
   b596c:	e7ef      	b.n	b594e <setup+0x1ee>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   b596e:	f7ff fa19 	bl	b4da4 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   b5972:	f7ff fa43 	bl	b4dfc <_Z17loadAlertDefaultsv>
   b5976:	e7dd      	b.n	b5934 <setup+0x1d4>
   b5978:	4a47      	ldr	r2, [pc, #284]	; (b5a98 <setup+0x338>)
   b597a:	4845      	ldr	r0, [pc, #276]	; (b5a90 <setup+0x330>)
   b597c:	231c      	movs	r3, #28
   b597e:	2101      	movs	r1, #1
   b5980:	f000 f958 	bl	b5c34 <_ZN6MB85RC8readDataEjPhj>
   b5984:	4a45      	ldr	r2, [pc, #276]	; (b5a9c <setup+0x33c>)
   b5986:	4842      	ldr	r0, [pc, #264]	; (b5a90 <setup+0x330>)
   b5988:	2318      	movs	r3, #24
   b598a:	2150      	movs	r1, #80	; 0x50
   b598c:	f000 f952 	bl	b5c34 <_ZN6MB85RC8readDataEjPhj>
        return t;
   b5990:	e7d0      	b.n	b5934 <setup+0x1d4>
   b5992:	f001 fc69 	bl	b7268 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   b5996:	6878      	ldr	r0, [r7, #4]
   b5998:	f7ff f97e 	bl	b4c98 <_ZN10CloudClass9keepAliveEj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   b599c:	f7ff fcbe 	bl	b531c <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   b59a0:	f7ff fb88 	bl	b50b4 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   b59a4:	7a7b      	ldrb	r3, [r7, #9]
   b59a6:	b14b      	cbz	r3, b59bc <setup+0x25c>
   b59a8:	2300      	movs	r3, #0
   b59aa:	f88d 3000 	strb.w	r3, [sp]
   b59ae:	493c      	ldr	r1, [pc, #240]	; (b5aa0 <setup+0x340>)
   b59b0:	f898 3000 	ldrb.w	r3, [r8]
   b59b4:	4832      	ldr	r0, [pc, #200]	; (b5a80 <setup+0x320>)
   b59b6:	4632      	mov	r2, r6
   b59b8:	f7ff f8d2 	bl	b4b60 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   b59bc:	782b      	ldrb	r3, [r5, #0]
   b59be:	b90b      	cbnz	r3, b59c4 <setup+0x264>
   b59c0:	2302      	movs	r3, #2
   b59c2:	702b      	strb	r3, [r5, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   b59c4:	a802      	add	r0, sp, #8
   b59c6:	f002 fb51 	bl	b806c <_ZN6StringD1Ev>
}
   b59ca:	b03b      	add	sp, #236	; 0xec
   b59cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b59d0:	000b4ae9 	.word	0x000b4ae9
   b59d4:	000babb8 	.word	0x000babb8
   b59d8:	2003e5e0 	.word	0x2003e5e0
   b59dc:	000b4bfd 	.word	0x000b4bfd
   b59e0:	000bb0b4 	.word	0x000bb0b4
   b59e4:	000baf5c 	.word	0x000baf5c
   b59e8:	2003e601 	.word	0x2003e601
   b59ec:	000baf64 	.word	0x000baf64
   b59f0:	2003e520 	.word	0x2003e520
   b59f4:	000baf70 	.word	0x000baf70
   b59f8:	2003e629 	.word	0x2003e629
   b59fc:	000baf79 	.word	0x000baf79
   b5a00:	2003e548 	.word	0x2003e548
   b5a04:	000baf8b 	.word	0x000baf8b
   b5a08:	2003e611 	.word	0x2003e611
   b5a0c:	000baf9d 	.word	0x000baf9d
   b5a10:	2003e530 	.word	0x2003e530
   b5a14:	000bafac 	.word	0x000bafac
   b5a18:	2003e4fd 	.word	0x2003e4fd
   b5a1c:	000bafbb 	.word	0x000bafbb
   b5a20:	2003e4ed 	.word	0x2003e4ed
   b5a24:	000bafc3 	.word	0x000bafc3
   b5a28:	2003e5e8 	.word	0x2003e5e8
   b5a2c:	000bafd2 	.word	0x000bafd2
   b5a30:	2003e5e5 	.word	0x2003e5e5
   b5a34:	000bacba 	.word	0x000bacba
   b5a38:	000bafe1 	.word	0x000bafe1
   b5a3c:	000b4af5 	.word	0x000b4af5
   b5a40:	000b7657 	.word	0x000b7657
   b5a44:	000bafed 	.word	0x000bafed
   b5a48:	000b4b7d 	.word	0x000b4b7d
   b5a4c:	000baffa 	.word	0x000baffa
   b5a50:	000b513d 	.word	0x000b513d
   b5a54:	000bb00b 	.word	0x000bb00b
   b5a58:	000b518d 	.word	0x000b518d
   b5a5c:	000bb01c 	.word	0x000bb01c
   b5a60:	000b522d 	.word	0x000b522d
   b5a64:	000bb031 	.word	0x000bb031
   b5a68:	000b51dd 	.word	0x000b51dd
   b5a6c:	000bacf5 	.word	0x000bacf5
   b5a70:	000b4d41 	.word	0x000b4d41
   b5a74:	000b4cb9 	.word	0x000b4cb9
   b5a78:	2003e5a0 	.word	0x2003e5a0
   b5a7c:	000bb045 	.word	0x000bb045
   b5a80:	2003e564 	.word	0x2003e564
   b5a84:	2003e5d4 	.word	0x2003e5d4
   b5a88:	000bb04a 	.word	0x000bb04a
   b5a8c:	2003e59c 	.word	0x2003e59c
   b5a90:	2003e510 	.word	0x2003e510
   b5a94:	000bb0bc 	.word	0x000bb0bc
   b5a98:	2003e5e4 	.word	0x2003e5e4
   b5a9c:	2003e4d4 	.word	0x2003e4d4
   b5aa0:	000bb067 	.word	0x000bb067
   b5aa4:	2003e4cc 	.word	0x2003e4cc

000b5aa8 <_GLOBAL__sub_I___appProductVersion>:
}
   b5aa8:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b5aaa:	4b20      	ldr	r3, [pc, #128]	; (b5b2c <_GLOBAL__sub_I___appProductVersion+0x84>)
   b5aac:	2501      	movs	r5, #1
   b5aae:	701d      	strb	r5, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5ab0:	f002 feb4 	bl	b881c <spark_protocol_instance>
   b5ab4:	2300      	movs	r3, #0
   b5ab6:	461a      	mov	r2, r3
   b5ab8:	2112      	movs	r1, #18
   b5aba:	f002 febf 	bl	b883c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5abe:	f002 fead 	bl	b881c <spark_protocol_instance>
   b5ac2:	2300      	movs	r3, #0
   b5ac4:	461a      	mov	r2, r3
   b5ac6:	210d      	movs	r1, #13
   b5ac8:	f002 feb0 	bl	b882c <spark_protocol_set_product_id>
              error_(SYSTEM_ERROR_NONE) {
   b5acc:	4b18      	ldr	r3, [pc, #96]	; (b5b30 <_GLOBAL__sub_I___appProductVersion+0x88>)
    SleepResult() {}
   b5ace:	4a19      	ldr	r2, [pc, #100]	; (b5b34 <_GLOBAL__sub_I___appProductVersion+0x8c>)
   b5ad0:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ad2:	2400      	movs	r4, #0
   b5ad4:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5ad8:	4628      	mov	r0, r5
   b5ada:	f001 fb57 	bl	b718c <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b5ade:	4621      	mov	r1, r4
   b5ae0:	4628      	mov	r0, r5
   b5ae2:	f001 fb63 	bl	b71ac <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5ae6:	4629      	mov	r1, r5
   b5ae8:	2004      	movs	r0, #4
   b5aea:	f001 f9b5 	bl	b6e58 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   b5aee:	4812      	ldr	r0, [pc, #72]	; (b5b38 <_GLOBAL__sub_I___appProductVersion+0x90>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5af0:	4d12      	ldr	r5, [pc, #72]	; (b5b3c <_GLOBAL__sub_I___appProductVersion+0x94>)
   b5af2:	f001 f8a1 	bl	b6c38 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   b5af6:	f002 ff3f 	bl	b8978 <_Z19__fetch_global_Wirev>
   b5afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5afe:	4601      	mov	r1, r0
   b5b00:	4623      	mov	r3, r4
   b5b02:	4628      	mov	r0, r5
   b5b04:	f000 f84a 	bl	b5b9c <_ZN6MB85RCC1ER7TwoWireji>
   b5b08:	4b0d      	ldr	r3, [pc, #52]	; (b5b40 <_GLOBAL__sub_I___appProductVersion+0x98>)
   b5b0a:	602b      	str	r3, [r5, #0]
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   b5b0c:	f002 ff34 	bl	b8978 <_Z19__fetch_global_Wirev>
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   b5b10:	4c0c      	ldr	r4, [pc, #48]	; (b5b44 <_GLOBAL__sub_I___appProductVersion+0x9c>)
   b5b12:	4601      	mov	r1, r0
   b5b14:	480c      	ldr	r0, [pc, #48]	; (b5b48 <_GLOBAL__sub_I___appProductVersion+0xa0>)
   b5b16:	f000 fabb 	bl	b6090 <_ZN8MCP79410C1ER7TwoWire>
   b5b1a:	490c      	ldr	r1, [pc, #48]	; (b5b4c <_GLOBAL__sub_I___appProductVersion+0xa4>)
   b5b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b5b20:	4620      	mov	r0, r4
   b5b22:	f001 f849 	bl	b6bb8 <_ZN25PublishQueueAsyncRetainedC1EPht>
   b5b26:	4b0a      	ldr	r3, [pc, #40]	; (b5b50 <_GLOBAL__sub_I___appProductVersion+0xa8>)
   b5b28:	6023      	str	r3, [r4, #0]
}
   b5b2a:	bd38      	pop	{r3, r4, r5, pc}
   b5b2c:	2003e4cc 	.word	0x2003e4cc
   b5b30:	2003e4c0 	.word	0x2003e4c0
   b5b34:	ffff0000 	.word	0xffff0000
   b5b38:	2003e5d4 	.word	0x2003e5d4
   b5b3c:	2003e510 	.word	0x2003e510
   b5b40:	000bb0a0 	.word	0x000bb0a0
   b5b44:	2003e564 	.word	0x2003e564
   b5b48:	2003e5a0 	.word	0x2003e5a0
   b5b4c:	2003f400 	.word	0x2003f400
   b5b50:	000bb078 	.word	0x000bb078

000b5b54 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b5b54:	4770      	bx	lr

000b5b56 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b5b56:	b510      	push	{r4, lr}
}
   b5b58:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b5b5a:	4604      	mov	r4, r0
}
   b5b5c:	f7fe ffad 	bl	b4aba <_ZdlPvj>
   b5b60:	4620      	mov	r0, r4
   b5b62:	bd10      	pop	{r4, pc}

000b5b64 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b5b64:	6803      	ldr	r3, [r0, #0]
   b5b66:	b2c9      	uxtb	r1, r1
   b5b68:	689b      	ldr	r3, [r3, #8]
   b5b6a:	4718      	bx	r3

000b5b6c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b5b6c:	b40e      	push	{r1, r2, r3}
   b5b6e:	b500      	push	{lr}
   b5b70:	b08c      	sub	sp, #48	; 0x30
   b5b72:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b5b74:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b5b78:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b5b7c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5b7e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b5b82:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5b84:	6801      	ldr	r1, [r0, #0]
   b5b86:	aa04      	add	r2, sp, #16
   b5b88:	201e      	movs	r0, #30
    attr.flags = 0;
   b5b8a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5b8e:	f001 fae3 	bl	b7158 <log_message_v>
}
   b5b92:	b00c      	add	sp, #48	; 0x30
   b5b94:	f85d eb04 	ldr.w	lr, [sp], #4
   b5b98:	b003      	add	sp, #12
   b5b9a:	4770      	bx	lr

000b5b9c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b5b9c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b5b9e:	4d03      	ldr	r5, [pc, #12]	; (b5bac <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b5ba0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b5ba4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b5ba8:	bd30      	pop	{r4, r5, pc}
   b5baa:	bf00      	nop
   b5bac:	000bb0f4 	.word	0x000bb0f4

000b5bb0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b5bb0:	6840      	ldr	r0, [r0, #4]
   b5bb2:	f002 b851 	b.w	b7c58 <_ZN7TwoWire5beginEv>

000b5bb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5bb6:	b510      	push	{r4, lr}
   b5bb8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b5bba:	6800      	ldr	r0, [r0, #0]
   b5bbc:	f002 f895 	bl	b7cea <_ZN7TwoWire6unlockEv>
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	bd10      	pop	{r4, pc}

000b5bc4 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b5bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5bc8:	b08a      	sub	sp, #40	; 0x28
   b5bca:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b5bcc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5bce:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5bd0:	f002 f882 	bl	b7cd8 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b5bd4:	221e      	movs	r2, #30
   b5bd6:	2100      	movs	r1, #0
   b5bd8:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b5bda:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b5bdc:	f002 ffb2 	bl	b8b44 <memset>
		size_t framAddr = 0;
   b5be0:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b5be2:	b1ef      	cbz	r7, b5c20 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b5be4:	6823      	ldr	r3, [r4, #0]
   b5be6:	2f1e      	cmp	r7, #30
   b5be8:	46b8      	mov	r8, r7
   b5bea:	bf28      	it	cs
   b5bec:	f04f 081e 	movcs.w	r8, #30
   b5bf0:	68dd      	ldr	r5, [r3, #12]
   b5bf2:	aa02      	add	r2, sp, #8
   b5bf4:	4643      	mov	r3, r8
   b5bf6:	4631      	mov	r1, r6
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	47a8      	blx	r5
			if (!result) {
   b5bfc:	4605      	mov	r5, r0
   b5bfe:	b958      	cbnz	r0, b5c18 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b5c00:	480a      	ldr	r0, [pc, #40]	; (b5c2c <_ZN6MB85RC5eraseEv+0x68>)
   b5c02:	490b      	ldr	r1, [pc, #44]	; (b5c30 <_ZN6MB85RC5eraseEv+0x6c>)
   b5c04:	4632      	mov	r2, r6
   b5c06:	f7ff ffb1 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b5c0a:	a801      	add	r0, sp, #4
   b5c0c:	f7ff ffd3 	bl	b5bb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b5c10:	4628      	mov	r0, r5
   b5c12:	b00a      	add	sp, #40	; 0x28
   b5c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b5c18:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b5c1c:	4446      	add	r6, r8
		while(totalLen > 0) {
   b5c1e:	e7e0      	b.n	b5be2 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b5c20:	a801      	add	r0, sp, #4
   b5c22:	f7ff ffc8 	bl	b5bb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b5c26:	2501      	movs	r5, #1
   b5c28:	e7f2      	b.n	b5c10 <_ZN6MB85RC5eraseEv+0x4c>
   b5c2a:	bf00      	nop
   b5c2c:	2003e68c 	.word	0x2003e68c
   b5c30:	000bb0c0 	.word	0x000bb0c0

000b5c34 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5c38:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5c3a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c3c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5c3e:	460d      	mov	r5, r1
   b5c40:	4616      	mov	r6, r2
   b5c42:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b5c44:	f002 f848 	bl	b7cd8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b5c48:	b1a7      	cbz	r7, b5c74 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5c4a:	68e1      	ldr	r1, [r4, #12]
   b5c4c:	6860      	ldr	r0, [r4, #4]
   b5c4e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5c52:	f002 f837 	bl	b7cc4 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5c56:	0a29      	lsrs	r1, r5, #8
   b5c58:	6860      	ldr	r0, [r4, #4]
   b5c5a:	f7ff ff83 	bl	b5b64 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5c5e:	4629      	mov	r1, r5
   b5c60:	6860      	ldr	r0, [r4, #4]
   b5c62:	f7ff ff7f 	bl	b5b64 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b5c66:	6860      	ldr	r0, [r4, #4]
   b5c68:	2100      	movs	r1, #0
   b5c6a:	f002 f82e 	bl	b7cca <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5c6e:	b148      	cbz	r0, b5c84 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b5c70:	2400      	movs	r4, #0
   b5c72:	e000      	b.n	b5c76 <_ZN6MB85RC8readDataEjPhj+0x42>
   b5c74:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5c76:	a801      	add	r0, sp, #4
   b5c78:	f7ff ff9d 	bl	b5bb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	b003      	add	sp, #12
   b5c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b5c84:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b5c86:	7b21      	ldrb	r1, [r4, #12]
   b5c88:	6860      	ldr	r0, [r4, #4]
   b5c8a:	46b8      	mov	r8, r7
   b5c8c:	bf28      	it	cs
   b5c8e:	f04f 0820 	movcs.w	r8, #32
   b5c92:	2301      	movs	r3, #1
   b5c94:	4642      	mov	r2, r8
   b5c96:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5c9a:	f001 fffa 	bl	b7c92 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b5c9e:	f002 fe6b 	bl	b8978 <_Z19__fetch_global_Wirev>
   b5ca2:	6803      	ldr	r3, [r0, #0]
   b5ca4:	691b      	ldr	r3, [r3, #16]
   b5ca6:	4798      	blx	r3
   b5ca8:	4540      	cmp	r0, r8
   b5caa:	dbe1      	blt.n	b5c70 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b5cac:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b5cb0:	f002 fe62 	bl	b8978 <_Z19__fetch_global_Wirev>
   b5cb4:	6803      	ldr	r3, [r0, #0]
   b5cb6:	695b      	ldr	r3, [r3, #20]
   b5cb8:	4798      	blx	r3
   b5cba:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b5cbe:	454e      	cmp	r6, r9
   b5cc0:	d1f6      	bne.n	b5cb0 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b5cc2:	4445      	add	r5, r8
				dataLen--;
   b5cc4:	eba7 0708 	sub.w	r7, r7, r8
   b5cc8:	e7be      	b.n	b5c48 <_ZN6MB85RC8readDataEjPhj+0x14>

000b5cca <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b5cca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cce:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5cd0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5cd2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b5cd4:	460e      	mov	r6, r1
   b5cd6:	4690      	mov	r8, r2
   b5cd8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b5cda:	f001 fffd 	bl	b7cd8 <_ZN7TwoWire4lockEv>
   b5cde:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b5ce2:	f1b9 0f00 	cmp.w	r9, #0
   b5ce6:	d02a      	beq.n	b5d3e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b5ce8:	b34d      	cbz	r5, b5d3e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5cea:	68e1      	ldr	r1, [r4, #12]
   b5cec:	6860      	ldr	r0, [r4, #4]
   b5cee:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5cf2:	f001 ffe7 	bl	b7cc4 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5cf6:	0a31      	lsrs	r1, r6, #8
   b5cf8:	6860      	ldr	r0, [r4, #4]
   b5cfa:	f7ff ff33 	bl	b5b64 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5cfe:	6860      	ldr	r0, [r4, #4]
   b5d00:	4631      	mov	r1, r6
   b5d02:	f7ff ff2f 	bl	b5b64 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5d06:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b5d0a:	4647      	mov	r7, r8
   b5d0c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b5d10:	6860      	ldr	r0, [r4, #4]
   b5d12:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5d16:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b5d18:	3d01      	subs	r5, #1
				wire.write(*data);
   b5d1a:	689b      	ldr	r3, [r3, #8]
   b5d1c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5d1e:	4555      	cmp	r5, sl
   b5d20:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b5d24:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5d26:	d001      	beq.n	b5d2c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b5d28:	2d00      	cmp	r5, #0
   b5d2a:	d1f1      	bne.n	b5d10 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b5d2c:	6860      	ldr	r0, [r4, #4]
   b5d2e:	2101      	movs	r1, #1
   b5d30:	f001 ffcb 	bl	b7cca <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5d34:	2800      	cmp	r0, #0
   b5d36:	d0d7      	beq.n	b5ce8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b5d38:	f04f 0900 	mov.w	r9, #0
   b5d3c:	e7d1      	b.n	b5ce2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b5d3e:	a801      	add	r0, sp, #4
   b5d40:	f7ff ff39 	bl	b5bb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b5d44:	4648      	mov	r0, r9
   b5d46:	b003      	add	sp, #12
   b5d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5d4c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d50:	b08b      	sub	sp, #44	; 0x2c
   b5d52:	460e      	mov	r6, r1
   b5d54:	4615      	mov	r5, r2
   b5d56:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b5d58:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5d5a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5d5c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b5d5e:	f001 ffbb 	bl	b7cd8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b5d62:	42ae      	cmp	r6, r5
   b5d64:	d229      	bcs.n	b5dba <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b5d66:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b5d68:	4425      	add	r5, r4
			while(numBytes > 0) {
   b5d6a:	b18c      	cbz	r4, b5d90 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b5d6c:	2c1e      	cmp	r4, #30
   b5d6e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b5d70:	f8d8 3000 	ldr.w	r3, [r8]
   b5d74:	bf28      	it	cs
   b5d76:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b5d78:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b5d7a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5d7e:	aa02      	add	r2, sp, #8
   b5d80:	463b      	mov	r3, r7
   b5d82:	4631      	mov	r1, r6
   b5d84:	4640      	mov	r0, r8
				framAddrTo -= count;
   b5d86:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b5d88:	47c8      	blx	r9
				if (!result) {
   b5d8a:	b948      	cbnz	r0, b5da0 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5d8c:	2400      	movs	r4, #0
   b5d8e:	e000      	b.n	b5d92 <_ZN6MB85RC8moveDataEjjj+0x46>
   b5d90:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5d92:	a801      	add	r0, sp, #4
   b5d94:	f7ff ff0f 	bl	b5bb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b5d98:	4620      	mov	r0, r4
   b5d9a:	b00b      	add	sp, #44	; 0x2c
   b5d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b5da0:	f8d8 3000 	ldr.w	r3, [r8]
   b5da4:	aa02      	add	r2, sp, #8
   b5da6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5daa:	4629      	mov	r1, r5
   b5dac:	463b      	mov	r3, r7
   b5dae:	4640      	mov	r0, r8
   b5db0:	47c8      	blx	r9
				if (!result) {
   b5db2:	2800      	cmp	r0, #0
   b5db4:	d0ea      	beq.n	b5d8c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b5db6:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b5db8:	e7d7      	b.n	b5d6a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b5dba:	d9e9      	bls.n	b5d90 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b5dbc:	2c00      	cmp	r4, #0
   b5dbe:	d0e7      	beq.n	b5d90 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b5dc0:	f8d8 3000 	ldr.w	r3, [r8]
   b5dc4:	2c1e      	cmp	r4, #30
   b5dc6:	4627      	mov	r7, r4
   b5dc8:	bf28      	it	cs
   b5dca:	271e      	movcs	r7, #30
   b5dcc:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5dd0:	aa02      	add	r2, sp, #8
   b5dd2:	463b      	mov	r3, r7
   b5dd4:	4631      	mov	r1, r6
   b5dd6:	4640      	mov	r0, r8
   b5dd8:	47c8      	blx	r9
				if (!result) {
   b5dda:	2800      	cmp	r0, #0
   b5ddc:	d0d6      	beq.n	b5d8c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b5dde:	f8d8 3000 	ldr.w	r3, [r8]
   b5de2:	aa02      	add	r2, sp, #8
   b5de4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5de8:	4629      	mov	r1, r5
   b5dea:	463b      	mov	r3, r7
   b5dec:	4640      	mov	r0, r8
   b5dee:	47c8      	blx	r9
				if (!result) {
   b5df0:	2800      	cmp	r0, #0
   b5df2:	d0cb      	beq.n	b5d8c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b5df4:	443e      	add	r6, r7
				framAddrTo += count;
   b5df6:	443d      	add	r5, r7
				numBytes -= count;
   b5df8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b5dfa:	e7df      	b.n	b5dbc <_ZN6MB85RC8moveDataEjjj+0x70>

000b5dfc <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   b5dfc:	2040      	movs	r0, #64	; 0x40
   b5dfe:	4770      	bx	lr

000b5e00 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   b5e00:	2000      	movs	r0, #0
   b5e02:	4770      	bx	lr

000b5e04 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   b5e04:	2080      	movs	r0, #128	; 0x80
   b5e06:	4770      	bx	lr

000b5e08 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   b5e08:	20ff      	movs	r0, #255	; 0xff
   b5e0a:	4770      	bx	lr

000b5e0c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   b5e0c:	4770      	bx	lr

000b5e0e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   b5e0e:	4770      	bx	lr

000b5e10 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   b5e10:	4770      	bx	lr

000b5e12 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   b5e12:	4770      	bx	lr

000b5e14 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   b5e14:	b510      	push	{r4, lr}
}
   b5e16:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   b5e18:	4604      	mov	r4, r0
}
   b5e1a:	f7fe fe4e 	bl	b4aba <_ZdlPvj>
   b5e1e:	4620      	mov	r0, r4
   b5e20:	bd10      	pop	{r4, pc}

000b5e22 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   b5e22:	b510      	push	{r4, lr}
}
   b5e24:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   b5e26:	4604      	mov	r4, r0
}
   b5e28:	f7fe fe47 	bl	b4aba <_ZdlPvj>
   b5e2c:	4620      	mov	r0, r4
   b5e2e:	bd10      	pop	{r4, pc}

000b5e30 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   b5e30:	b510      	push	{r4, lr}
}
   b5e32:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   b5e34:	4604      	mov	r4, r0
}
   b5e36:	f7fe fe40 	bl	b4aba <_ZdlPvj>
   b5e3a:	4620      	mov	r0, r4
   b5e3c:	bd10      	pop	{r4, pc}

000b5e3e <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   b5e3e:	b510      	push	{r4, lr}
}
   b5e40:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   b5e42:	4604      	mov	r4, r0
}
   b5e44:	f7fe fe39 	bl	b4aba <_ZdlPvj>
   b5e48:	4620      	mov	r0, r4
   b5e4a:	bd10      	pop	{r4, pc}

000b5e4c <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   b5e4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   b5e50:	6803      	ldr	r3, [r0, #0]
   b5e52:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   b5e54:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   b5e56:	4798      	blx	r3
   b5e58:	2210      	movs	r2, #16
   b5e5a:	4601      	mov	r1, r0
   b5e5c:	4668      	mov	r0, sp
   b5e5e:	f002 fe71 	bl	b8b44 <memset>
	size_t len = length();
   b5e62:	6823      	ldr	r3, [r4, #0]
   b5e64:	4620      	mov	r0, r4
   b5e66:	689b      	ldr	r3, [r3, #8]
   b5e68:	4798      	blx	r3
	size_t offset = 0;
   b5e6a:	2500      	movs	r5, #0
	size_t len = length();
   b5e6c:	4607      	mov	r7, r0
	bool bResult = false;
   b5e6e:	4628      	mov	r0, r5
	while(offset < len) {
   b5e70:	42bd      	cmp	r5, r7
   b5e72:	d20e      	bcs.n	b5e92 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   b5e74:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   b5e76:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   b5e78:	2e10      	cmp	r6, #16
   b5e7a:	bf28      	it	cs
   b5e7c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   b5e7e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   b5e82:	466a      	mov	r2, sp
   b5e84:	4633      	mov	r3, r6
   b5e86:	4629      	mov	r1, r5
   b5e88:	4620      	mov	r0, r4
   b5e8a:	47c0      	blx	r8
		if (!bResult) {
   b5e8c:	b108      	cbz	r0, b5e92 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   b5e8e:	4435      	add	r5, r6
	while(offset < len) {
   b5e90:	e7ee      	b.n	b5e70 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   b5e92:	b004      	add	sp, #16
   b5e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5e98 <_ZN7TwoWire5writeEj.isra.0>:
   b5e98:	6803      	ldr	r3, [r0, #0]
   b5e9a:	b2c9      	uxtb	r1, r1
   b5e9c:	689b      	ldr	r3, [r3, #8]
   b5e9e:	4718      	bx	r3

000b5ea0 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   b5ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
   b5ea4:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   b5ea6:	f240 1301 	movw	r3, #257	; 0x101
   b5eaa:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   b5eac:	2300      	movs	r3, #0
   b5eae:	8203      	strh	r3, [r0, #16]
}
   b5eb0:	4770      	bx	lr
	...

000b5eb4 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   b5eb4:	4a06      	ldr	r2, [pc, #24]	; (b5ed0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   b5eb6:	6002      	str	r2, [r0, #0]
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4a06      	ldr	r2, [pc, #24]	; (b5ed4 <_ZN12MCP79410TimeC1Ev+0x20>)
   b5ebc:	6042      	str	r2, [r0, #4]
   b5ebe:	f240 7204 	movw	r2, #1796	; 0x704
   b5ec2:	8102      	strh	r2, [r0, #8]
   b5ec4:	2200      	movs	r2, #0
   b5ec6:	7442      	strb	r2, [r0, #17]
	clear();
   b5ec8:	f7ff ffea 	bl	b5ea0 <_ZN12MCP79410Time5clearEv>
}
   b5ecc:	bd08      	pop	{r3, pc}
   b5ece:	bf00      	nop
   b5ed0:	000bb1d4 	.word	0x000bb1d4
   b5ed4:	03020100 	.word	0x03020100

000b5ed8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b5ed8:	0903      	lsrs	r3, r0, #4
}
   b5eda:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b5edc:	f000 000f 	and.w	r0, r0, #15
}
   b5ee0:	fb02 0003 	mla	r0, r2, r3, r0
   b5ee4:	4770      	bx	lr

000b5ee6 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   b5ee6:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   b5ee8:	7a80      	ldrb	r0, [r0, #10]
   b5eea:	f7ff fff5 	bl	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>
}
   b5eee:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   b5ef2:	bd08      	pop	{r3, pc}

000b5ef4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   b5ef4:	7ac0      	ldrb	r0, [r0, #11]
   b5ef6:	f000 001f 	and.w	r0, r0, #31
   b5efa:	f7ff bfed 	b.w	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>

000b5efe <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   b5efe:	7b00      	ldrb	r0, [r0, #12]
   b5f00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   b5f04:	f7ff bfe8 	b.w	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>

000b5f08 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   b5f08:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   b5f0a:	7b81      	ldrb	r1, [r0, #14]
   b5f0c:	064a      	lsls	r2, r1, #25
   b5f0e:	d50d      	bpl.n	b5f2c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   b5f10:	f001 001f 	and.w	r0, r1, #31
   b5f14:	f7ff ffe0 	bl	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   b5f18:	068b      	lsls	r3, r1, #26
   b5f1a:	d503      	bpl.n	b5f24 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   b5f1c:	280c      	cmp	r0, #12
   b5f1e:	d000      	beq.n	b5f22 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   b5f20:	300c      	adds	r0, #12
}
   b5f22:	bd08      	pop	{r3, pc}
				return 0;
   b5f24:	280c      	cmp	r0, #12
   b5f26:	bf08      	it	eq
   b5f28:	2000      	moveq	r0, #0
   b5f2a:	e7fa      	b.n	b5f22 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   b5f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   b5f30:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   b5f34:	f7ff bfd0 	b.w	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>

000b5f38 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   b5f38:	7bc0      	ldrb	r0, [r0, #15]
   b5f3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b5f3e:	f7ff bfcb 	b.w	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>

000b5f42 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   b5f42:	7c00      	ldrb	r0, [r0, #16]
   b5f44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b5f48:	f7ff bfc6 	b.w	b5ed8 <_ZN12MCP79410Time8bcdToIntEh>

000b5f4c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   b5f4c:	b510      	push	{r4, lr}
   b5f4e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   b5f50:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   b5f52:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   b5f54:	2100      	movs	r1, #0
   b5f56:	a801      	add	r0, sp, #4
   b5f58:	f002 fdf4 	bl	b8b44 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	f7ff ffc2 	bl	b5ee6 <_ZNK12MCP79410Time7getYearEv>
   b5f62:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   b5f66:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   b5f68:	4620      	mov	r0, r4
   b5f6a:	f7ff ffc3 	bl	b5ef4 <_ZNK12MCP79410Time8getMonthEv>
   b5f6e:	3801      	subs	r0, #1
   b5f70:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   b5f72:	4620      	mov	r0, r4
   b5f74:	f7ff ffc3 	bl	b5efe <_ZNK12MCP79410Time13getDayOfMonthEv>
   b5f78:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   b5f7a:	4620      	mov	r0, r4
   b5f7c:	f7ff ffc4 	bl	b5f08 <_ZNK12MCP79410Time7getHourEv>
   b5f80:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   b5f82:	4620      	mov	r0, r4
   b5f84:	f7ff ffd8 	bl	b5f38 <_ZNK12MCP79410Time9getMinuteEv>
   b5f88:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   b5f8a:	4620      	mov	r0, r4
   b5f8c:	f7ff ffd9 	bl	b5f42 <_ZNK12MCP79410Time9getSecondEv>
   b5f90:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   b5f92:	a801      	add	r0, sp, #4
   b5f94:	f001 fa78 	bl	b7488 <mktime>
}
   b5f98:	b00a      	add	sp, #40	; 0x28
   b5f9a:	bd10      	pop	{r4, pc}

000b5f9c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   b5f9c:	220a      	movs	r2, #10
   b5f9e:	fb90 f1f2 	sdiv	r1, r0, r2
   b5fa2:	fb91 f3f2 	sdiv	r3, r1, r2
   b5fa6:	fb02 1313 	mls	r3, r2, r3, r1
   b5faa:	011b      	lsls	r3, r3, #4
   b5fac:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   b5fae:	fb02 0011 	mls	r0, r2, r1, r0
   b5fb2:	4318      	orrs	r0, r3
}
   b5fb4:	b2c0      	uxtb	r0, r0
   b5fb6:	4770      	bx	lr

000b5fb8 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   b5fb8:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   b5fba:	b510      	push	{r4, lr}
   b5fbc:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   b5fbe:	fb91 f0f3 	sdiv	r0, r1, r3
   b5fc2:	fb00 1013 	mls	r0, r0, r3, r1
   b5fc6:	f7ff ffe9 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
   b5fca:	72a0      	strb	r0, [r4, #10]
}
   b5fcc:	bd10      	pop	{r4, pc}

000b5fce <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   b5fce:	b510      	push	{r4, lr}
   b5fd0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   b5fd2:	4608      	mov	r0, r1
   b5fd4:	f7ff ffe2 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
   b5fd8:	72e0      	strb	r0, [r4, #11]
}
   b5fda:	bd10      	pop	{r4, pc}

000b5fdc <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   b5fdc:	b510      	push	{r4, lr}
   b5fde:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   b5fe0:	4608      	mov	r0, r1
   b5fe2:	f7ff ffdb 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   b5fe6:	7b23      	ldrb	r3, [r4, #12]
   b5fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   b5fec:	4318      	orrs	r0, r3
   b5fee:	7320      	strb	r0, [r4, #12]
}
   b5ff0:	bd10      	pop	{r4, pc}

000b5ff2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   b5ff2:	b510      	push	{r4, lr}
   b5ff4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   b5ff6:	1c48      	adds	r0, r1, #1
   b5ff8:	f7ff ffd0 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   b5ffc:	7b63      	ldrb	r3, [r4, #13]
   b5ffe:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   b6002:	4318      	orrs	r0, r3
   b6004:	7360      	strb	r0, [r4, #13]
}
   b6006:	bd10      	pop	{r4, pc}

000b6008 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   b6008:	b510      	push	{r4, lr}
   b600a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   b600c:	4608      	mov	r0, r1
   b600e:	f7ff ffc5 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
   b6012:	73a0      	strb	r0, [r4, #14]
}
   b6014:	bd10      	pop	{r4, pc}

000b6016 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   b6016:	b510      	push	{r4, lr}
   b6018:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   b601a:	4608      	mov	r0, r1
   b601c:	f7ff ffbe 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
   b6020:	73e0      	strb	r0, [r4, #15]
}
   b6022:	bd10      	pop	{r4, pc}

000b6024 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   b6024:	b510      	push	{r4, lr}
   b6026:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   b6028:	4608      	mov	r0, r1
   b602a:	f7ff ffb7 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   b602e:	7c23      	ldrb	r3, [r4, #16]
   b6030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   b6034:	4318      	orrs	r0, r3
   b6036:	7420      	strb	r0, [r4, #16]
}
   b6038:	bd10      	pop	{r4, pc}

000b603a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   b603a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b603c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   b603e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   b6040:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   b6044:	f002 fd38 	bl	b8ab8 <gmtime>
   b6048:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   b604a:	6941      	ldr	r1, [r0, #20]
   b604c:	4620      	mov	r0, r4
   b604e:	f7ff ffb3 	bl	b5fb8 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   b6052:	6929      	ldr	r1, [r5, #16]
   b6054:	4620      	mov	r0, r4
   b6056:	3101      	adds	r1, #1
   b6058:	f7ff ffb9 	bl	b5fce <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   b605c:	68e9      	ldr	r1, [r5, #12]
   b605e:	4620      	mov	r0, r4
   b6060:	f7ff ffbc 	bl	b5fdc <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   b6064:	69a9      	ldr	r1, [r5, #24]
   b6066:	4620      	mov	r0, r4
   b6068:	f7ff ffc3 	bl	b5ff2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   b606c:	68a9      	ldr	r1, [r5, #8]
   b606e:	4620      	mov	r0, r4
   b6070:	f7ff ffca 	bl	b6008 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   b6074:	6869      	ldr	r1, [r5, #4]
   b6076:	4620      	mov	r0, r4
   b6078:	f7ff ffcd 	bl	b6016 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   b607c:	6829      	ldr	r1, [r5, #0]
   b607e:	293b      	cmp	r1, #59	; 0x3b
   b6080:	bfa8      	it	ge
   b6082:	213b      	movge	r1, #59	; 0x3b
   b6084:	4620      	mov	r0, r4
   b6086:	f7ff ffcd 	bl	b6024 <_ZN12MCP79410Time9setSecondEi>
}
   b608a:	b003      	add	sp, #12
   b608c:	bd30      	pop	{r4, r5, pc}
	...

000b6090 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b6090:	4a05      	ldr	r2, [pc, #20]	; (b60a8 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b6092:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b6094:	e9c0 2100 	strd	r2, r1, [r0]
   b6098:	4a04      	ldr	r2, [pc, #16]	; (b60ac <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   b609a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b609c:	4a04      	ldr	r2, [pc, #16]	; (b60b0 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   b609e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b60a0:	4a04      	ldr	r2, [pc, #16]	; (b60b4 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b60a2:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b60a4:	6142      	str	r2, [r0, #20]
}
   b60a6:	4770      	bx	lr
   b60a8:	000bb208 	.word	0x000bb208
   b60ac:	03010000 	.word	0x03010000
   b60b0:	000bb1b0 	.word	0x000bb1b0
   b60b4:	000bb1e4 	.word	0x000bb1e4

000b60b8 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   b60b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60bc:	4604      	mov	r4, r0
   b60be:	460f      	mov	r7, r1
   b60c0:	4690      	mov	r8, r2
   b60c2:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b60c4:	2600      	movs	r6, #0

	while(offset < bufLen) {
   b60c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b60c8:	429e      	cmp	r6, r3
   b60ca:	d231      	bcs.n	b6130 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   b60cc:	6860      	ldr	r0, [r4, #4]
   b60ce:	4639      	mov	r1, r7
   b60d0:	f001 fdf4 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b60d4:	6860      	ldr	r0, [r4, #4]
   b60d6:	eb08 0106 	add.w	r1, r8, r6
   b60da:	f7ff fedd 	bl	b5e98 <_ZN7TwoWire5writeEj.isra.0>
		stat = wire.endTransmission(false);
   b60de:	6860      	ldr	r0, [r4, #4]
   b60e0:	2100      	movs	r1, #0
   b60e2:	f001 fdf2 	bl	b7cca <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b60e6:	4605      	mov	r5, r0
   b60e8:	b9d0      	cbnz	r0, b6120 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   b60ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b60ec:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   b60ee:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b60f0:	2a20      	cmp	r2, #32
   b60f2:	f04f 0301 	mov.w	r3, #1
   b60f6:	bf28      	it	cs
   b60f8:	2220      	movcs	r2, #32
   b60fa:	4639      	mov	r1, r7
   b60fc:	f001 fdc9 	bl	b7c92 <_ZN7TwoWire11requestFromEhjh>
   b6100:	eb09 0b06 	add.w	fp, r9, r6
   b6104:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   b6106:	eb0b 0a00 	add.w	sl, fp, r0
   b610a:	45da      	cmp	sl, fp
   b610c:	d006      	beq.n	b611c <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   b610e:	6860      	ldr	r0, [r4, #4]
   b6110:	6803      	ldr	r3, [r0, #0]
   b6112:	695b      	ldr	r3, [r3, #20]
   b6114:	4798      	blx	r3
   b6116:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   b611a:	e7f6      	b.n	b610a <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   b611c:	442e      	add	r6, r5
	while(offset < bufLen) {
   b611e:	e7d2      	b.n	b60c6 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   b6120:	4602      	mov	r2, r0
   b6122:	4904      	ldr	r1, [pc, #16]	; (b6134 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   b6124:	4804      	ldr	r0, [pc, #16]	; (b6138 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   b6126:	f7ff fd21 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   b612a:	4628      	mov	r0, r5
   b612c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6130:	2500      	movs	r5, #0
	return stat;
   b6132:	e7fa      	b.n	b612a <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   b6134:	000bb108 	.word	0x000bb108
   b6138:	2003e648 	.word	0x2003e648

000b613c <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b613c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b6140:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6144:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b6146:	6803      	ldr	r3, [r0, #0]
   b6148:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b614a:	4605      	mov	r5, r0
   b614c:	460c      	mov	r4, r1
   b614e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b6150:	4798      	blx	r3
   b6152:	4580      	cmp	r8, r0
   b6154:	d80d      	bhi.n	b6172 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b6156:	3420      	adds	r4, #32
   b6158:	6868      	ldr	r0, [r5, #4]
   b615a:	9600      	str	r6, [sp, #0]
   b615c:	463b      	mov	r3, r7
   b615e:	b2e2      	uxtb	r2, r4
   b6160:	216f      	movs	r1, #111	; 0x6f
   b6162:	f7ff ffa9 	bl	b60b8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b6166:	fab0 f080 	clz	r0, r0
   b616a:	0940      	lsrs	r0, r0, #5
}
   b616c:	b002      	add	sp, #8
   b616e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b6172:	2000      	movs	r0, #0
   b6174:	e7fa      	b.n	b616c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000b6176 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6176:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b617a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b617e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b6180:	6803      	ldr	r3, [r0, #0]
   b6182:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6184:	4604      	mov	r4, r0
   b6186:	460d      	mov	r5, r1
   b6188:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b618a:	4798      	blx	r3
   b618c:	4580      	cmp	r8, r0
   b618e:	d80c      	bhi.n	b61aa <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   b6190:	6860      	ldr	r0, [r4, #4]
   b6192:	9600      	str	r6, [sp, #0]
   b6194:	463b      	mov	r3, r7
   b6196:	b2ea      	uxtb	r2, r5
   b6198:	2157      	movs	r1, #87	; 0x57
   b619a:	f7ff ff8d 	bl	b60b8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b619e:	fab0 f080 	clz	r0, r0
   b61a2:	0940      	lsrs	r0, r0, #5
}
   b61a4:	b002      	add	sp, #8
   b61a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b61aa:	2000      	movs	r0, #0
   b61ac:	e7fa      	b.n	b61a4 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000b61ae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>:
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b61ae:	2b01      	cmp	r3, #1
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   b61b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b61b2:	4614      	mov	r4, r2
   b61b4:	461e      	mov	r6, r3
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b61b6:	d824      	bhi.n	b6202 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x54>
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   b61b8:	2b00      	cmp	r3, #0
   b61ba:	bf0c      	ite	eq
   b61bc:	2307      	moveq	r3, #7
   b61be:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   b61c0:	9300      	str	r3, [sp, #0]
   b61c2:	460a      	mov	r2, r1
   b61c4:	ab02      	add	r3, sp, #8
   b61c6:	216f      	movs	r1, #111	; 0x6f
   b61c8:	f7ff ff76 	bl	b60b8 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b61cc:	4605      	mov	r5, r0
   b61ce:	b9a8      	cbnz	r0, b61fc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawSecond = buf[0];
   b61d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b61d4:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   b61d6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b61da:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   b61dc:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b61e0:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   b61e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b61e6:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   b61e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b61ec:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   b61ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b61f2:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   b61f4:	b9f6      	cbnz	r6, b6234 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x86>
				time.rawYear = buf[6];
   b61f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b61fa:	72a3      	strb	r3, [r4, #10]
}
   b61fc:	4628      	mov	r0, r5
   b61fe:	b004      	add	sp, #16
   b6200:	bd70      	pop	{r4, r5, r6, pc}
	if (timeMode == TIME_MODE_POWER) {
   b6202:	2b02      	cmp	r3, #2
   b6204:	d11c      	bne.n	b6240 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x92>
		stat = deviceRead(REG_I2C_ADDR, addr, buf, 4);
   b6206:	2304      	movs	r3, #4
   b6208:	9300      	str	r3, [sp, #0]
   b620a:	460a      	mov	r2, r1
   b620c:	ab02      	add	r3, sp, #8
   b620e:	216f      	movs	r1, #111	; 0x6f
   b6210:	f7ff ff52 	bl	b60b8 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b6214:	4605      	mov	r5, r0
   b6216:	2800      	cmp	r0, #0
   b6218:	d1f0      	bne.n	b61fc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawMinute = buf[0];
   b621a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b621e:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[1];
   b6220:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b6224:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfMonth = buf[2];
   b6226:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b622a:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[3];
   b622c:	f89d 300b 	ldrb.w	r3, [sp, #11]
			time.rawSecond = 0;
   b6230:	7420      	strb	r0, [r4, #16]
			time.rawMonth = buf[3];
   b6232:	72e3      	strb	r3, [r4, #11]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
   b6234:	f002 f96e 	bl	b8514 <_ZN9TimeClass4yearEv>
   b6238:	f7ff feb0 	bl	b5f9c <_ZN12MCP79410Time8intToBcdEi>
   b623c:	72a0      	strb	r0, [r4, #10]
   b623e:	e7dd      	b.n	b61fc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
	int stat = -1;
   b6240:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	return stat;
   b6244:	e7da      	b.n	b61fc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>

000b6246 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b6246:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b6248:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b624a:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b624c:	9300      	str	r3, [sp, #0]
   b624e:	216f      	movs	r1, #111	; 0x6f
   b6250:	ab03      	add	r3, sp, #12
   b6252:	f7ff ff31 	bl	b60b8 <_ZNK8MCP7941010deviceReadEhhPhj>
   b6256:	b920      	cbnz	r0, b6262 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   b6258:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   b625c:	b005      	add	sp, #20
   b625e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   b6262:	2000      	movs	r0, #0
   b6264:	e7fa      	b.n	b625c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000b6266 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   b6266:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   b6268:	2103      	movs	r1, #3
   b626a:	f7ff ffec 	bl	b6246 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   b626e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b6272:	bd08      	pop	{r3, pc}

000b6274 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b6274:	b538      	push	{r3, r4, r5, lr}
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b6276:	2300      	movs	r3, #0
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b6278:	460c      	mov	r4, r1
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b627a:	460a      	mov	r2, r1
   b627c:	4619      	mov	r1, r3
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b627e:	4605      	mov	r5, r0
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b6280:	f7ff ff95 	bl	b61ae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>
	if (stat == 0) {
   b6284:	b930      	cbnz	r0, b6294 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b6286:	7aa3      	ldrb	r3, [r4, #10]
   b6288:	b123      	cbz	r3, b6294 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   b628a:	4628      	mov	r0, r5
}
   b628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b6290:	f7ff bfe9 	b.w	b6266 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   b6294:	2000      	movs	r0, #0
   b6296:	bd38      	pop	{r3, r4, r5, pc}

000b6298 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   b6298:	b510      	push	{r4, lr}
   b629a:	b086      	sub	sp, #24
   b629c:	4604      	mov	r4, r0
	MCP79410Time time;
   b629e:	a801      	add	r0, sp, #4
   b62a0:	f7ff fe08 	bl	b5eb4 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   b62a4:	a901      	add	r1, sp, #4
   b62a6:	4620      	mov	r0, r4
   b62a8:	f7ff ffe4 	bl	b6274 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   b62ac:	b120      	cbz	r0, b62b8 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   b62ae:	a801      	add	r0, sp, #4
   b62b0:	f7ff fe4c 	bl	b5f4c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   b62b4:	b006      	add	sp, #24
   b62b6:	bd10      	pop	{r4, pc}
		return 0;
   b62b8:	2000      	movs	r0, #0
   b62ba:	4601      	mov	r1, r0
   b62bc:	e7fa      	b.n	b62b4 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
	...

000b62c0 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   b62c0:	b570      	push	{r4, r5, r6, lr}
   b62c2:	4604      	mov	r4, r0
   b62c4:	b086      	sub	sp, #24
	wire.begin();
   b62c6:	6840      	ldr	r0, [r0, #4]
   b62c8:	f001 fcc6 	bl	b7c58 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   b62cc:	f002 f8e8 	bl	b84a0 <_ZN9TimeClass7isValidEv>
   b62d0:	b9e8      	cbnz	r0, b630e <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   b62d2:	7ae3      	ldrb	r3, [r4, #11]
   b62d4:	079b      	lsls	r3, r3, #30
   b62d6:	d51a      	bpl.n	b630e <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   b62d8:	4620      	mov	r0, r4
   b62da:	f7ff ffdd 	bl	b6298 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   b62de:	ea50 0301 	orrs.w	r3, r0, r1
			time_t rtcTime = getRTCTime();
   b62e2:	4606      	mov	r6, r0
   b62e4:	460d      	mov	r5, r1
			if (rtcTime != 0) {
   b62e6:	d012      	beq.n	b630e <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   b62e8:	f001 ffdf 	bl	b82aa <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   b62ec:	4b0a      	ldr	r3, [pc, #40]	; (b6318 <_ZN8MCP794105setupEv+0x58>)
   b62ee:	490b      	ldr	r1, [pc, #44]	; (b631c <_ZN8MCP794105setupEv+0x5c>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	9300      	str	r3, [sp, #0]
   b62f4:	4632      	mov	r2, r6
   b62f6:	462b      	mov	r3, r5
   b62f8:	a802      	add	r0, sp, #8
   b62fa:	f002 f88f 	bl	b841c <_ZN9TimeClass6formatExPKc>
   b62fe:	4808      	ldr	r0, [pc, #32]	; (b6320 <_ZN8MCP794105setupEv+0x60>)
   b6300:	9a02      	ldr	r2, [sp, #8]
   b6302:	4908      	ldr	r1, [pc, #32]	; (b6324 <_ZN8MCP794105setupEv+0x64>)
   b6304:	f7ff fc32 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
   b6308:	a802      	add	r0, sp, #8
   b630a:	f001 feaf 	bl	b806c <_ZN6StringD1Ev>
	setupDone = true;
   b630e:	2301      	movs	r3, #1
   b6310:	7223      	strb	r3, [r4, #8]
}
   b6312:	b006      	add	sp, #24
   b6314:	bd70      	pop	{r4, r5, r6, pc}
   b6316:	bf00      	nop
   b6318:	2003e2e0 	.word	0x2003e2e0
   b631c:	2003e6b8 	.word	0x2003e6b8
   b6320:	2003e648 	.word	0x2003e648
   b6324:	000bb122 	.word	0x000bb122

000b6328 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b6328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b632c:	4606      	mov	r6, r0
   b632e:	4688      	mov	r8, r1
   b6330:	4691      	mov	r9, r2
   b6332:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b6334:	2500      	movs	r5, #0

	while(offset < bufLen) {
   b6336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6338:	429d      	cmp	r5, r3
   b633a:	d229      	bcs.n	b6390 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   b633c:	6870      	ldr	r0, [r6, #4]
   b633e:	4641      	mov	r1, r8
   b6340:	f001 fcbc 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b6344:	6870      	ldr	r0, [r6, #4]
   b6346:	eb09 0105 	add.w	r1, r9, r5
   b634a:	f7ff fda5 	bl	b5e98 <_ZN7TwoWire5writeEj.isra.0>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   b634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6350:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   b6352:	2f1f      	cmp	r7, #31
   b6354:	bf28      	it	cs
   b6356:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   b6358:	eb0a 0405 	add.w	r4, sl, r5
   b635c:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   b6360:	6870      	ldr	r0, [r6, #4]
   b6362:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6366:	6802      	ldr	r2, [r0, #0]
   b6368:	6892      	ldr	r2, [r2, #8]
   b636a:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   b636c:	45a3      	cmp	fp, r4
   b636e:	d1f7      	bne.n	b6360 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   b6370:	6870      	ldr	r0, [r6, #4]
   b6372:	2101      	movs	r1, #1
   b6374:	f001 fca9 	bl	b7cca <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b6378:	4604      	mov	r4, r0
   b637a:	b138      	cbz	r0, b638c <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   b637c:	4602      	mov	r2, r0
   b637e:	4905      	ldr	r1, [pc, #20]	; (b6394 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   b6380:	4805      	ldr	r0, [pc, #20]	; (b6398 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   b6382:	f7ff fbf3 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   b6386:	4620      	mov	r0, r4
   b6388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   b638c:	443d      	add	r5, r7
	while(offset < bufLen) {
   b638e:	e7d2      	b.n	b6336 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   b6390:	2400      	movs	r4, #0
	return stat;
   b6392:	e7f8      	b.n	b6386 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   b6394:	000bb137 	.word	0x000bb137
   b6398:	2003e648 	.word	0x2003e648

000b639c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b639c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b63a0:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b63a4:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b63a6:	6803      	ldr	r3, [r0, #0]
   b63a8:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b63aa:	4605      	mov	r5, r0
   b63ac:	460c      	mov	r4, r1
   b63ae:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b63b0:	4798      	blx	r3
   b63b2:	4580      	cmp	r8, r0
   b63b4:	d80d      	bhi.n	b63d2 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b63b6:	3420      	adds	r4, #32
   b63b8:	6868      	ldr	r0, [r5, #4]
   b63ba:	9600      	str	r6, [sp, #0]
   b63bc:	463b      	mov	r3, r7
   b63be:	b2e2      	uxtb	r2, r4
   b63c0:	216f      	movs	r1, #111	; 0x6f
   b63c2:	f7ff ffb1 	bl	b6328 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   b63c6:	fab0 f080 	clz	r0, r0
   b63ca:	0940      	lsrs	r0, r0, #5
}
   b63cc:	b002      	add	sp, #8
   b63ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b63d2:	2000      	movs	r0, #0
   b63d4:	e7fa      	b.n	b63cc <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000b63d6 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   b63d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   b63d8:	7c13      	ldrb	r3, [r2, #16]
   b63da:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   b63de:	7bd3      	ldrb	r3, [r2, #15]
   b63e0:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   b63e4:	7b93      	ldrb	r3, [r2, #14]
   b63e6:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   b63ea:	7b53      	ldrb	r3, [r2, #13]
   b63ec:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   b63f0:	7b13      	ldrb	r3, [r2, #12]
   b63f2:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   b63f6:	7ad3      	ldrb	r3, [r2, #11]
   b63f8:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   b63fc:	7a93      	ldrb	r3, [r2, #10]
   b63fe:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   b6402:	2307      	movs	r3, #7
   b6404:	9300      	str	r3, [sp, #0]
   b6406:	460a      	mov	r2, r1
   b6408:	ab02      	add	r3, sp, #8
   b640a:	216f      	movs	r1, #111	; 0x6f
   b640c:	f7ff ff8c 	bl	b6328 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b6410:	b005      	add	sp, #20
   b6412:	f85d fb04 	ldr.w	pc, [sp], #4

000b6416 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   b6416:	b510      	push	{r4, lr}
   b6418:	b088      	sub	sp, #32
   b641a:	4604      	mov	r4, r0
	MCP79410Time time;
   b641c:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   b641e:	e9cd 3200 	strd	r3, r2, [sp]
	MCP79410Time time;
   b6422:	f7ff fd47 	bl	b5eb4 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   b6426:	e9dd 3200 	ldrd	r3, r2, [sp]
   b642a:	a803      	add	r0, sp, #12
   b642c:	f7ff fe05 	bl	b603a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b6430:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   b6434:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b6436:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b643a:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   b643e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   b6442:	b16a      	cbz	r2, b6460 <_ZN8MCP7941010setRTCTimeEx+0x4a>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   b6444:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   b6448:	aa03      	add	r2, sp, #12
   b644a:	2100      	movs	r1, #0
   b644c:	4620      	mov	r0, r4
   b644e:	f88d 3019 	strb.w	r3, [sp, #25]
   b6452:	f7ff ffc0 	bl	b63d6 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   b6456:	fab0 f080 	clz	r0, r0
   b645a:	0940      	lsrs	r0, r0, #5
   b645c:	b008      	add	sp, #32
   b645e:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   b6460:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   b6464:	e7f0      	b.n	b6448 <_ZN8MCP7941010setRTCTimeEx+0x32>
	...

000b6468 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   b6468:	b530      	push	{r4, r5, lr}
   b646a:	b089      	sub	sp, #36	; 0x24
   b646c:	4605      	mov	r5, r0
	if (Time.isValid()) {
   b646e:	f002 f817 	bl	b84a0 <_ZN9TimeClass7isValidEv>
   b6472:	4604      	mov	r4, r0
   b6474:	b1e8      	cbz	r0, b64b2 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   b6476:	f002 f830 	bl	b84da <_ZN9TimeClass3nowEv>
   b647a:	17c3      	asrs	r3, r0, #31
		bResult = setRTCTime(now);
   b647c:	e9cd 3002 	strd	r3, r0, [sp, #8]
		time_t now = Time.now();
   b6480:	4602      	mov	r2, r0
		bResult = setRTCTime(now);
   b6482:	4628      	mov	r0, r5
   b6484:	f7ff ffc7 	bl	b6416 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b6488:	490c      	ldr	r1, [pc, #48]	; (b64bc <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   b648a:	6809      	ldr	r1, [r1, #0]
   b648c:	9100      	str	r1, [sp, #0]
   b648e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b6492:	490b      	ldr	r1, [pc, #44]	; (b64c0 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
		bResult = setRTCTime(now);
   b6494:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b6496:	a804      	add	r0, sp, #16
   b6498:	f001 ffc0 	bl	b841c <_ZN9TimeClass6formatExPKc>
   b649c:	4809      	ldr	r0, [pc, #36]	; (b64c4 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b649e:	9a04      	ldr	r2, [sp, #16]
   b64a0:	4909      	ldr	r1, [pc, #36]	; (b64c8 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   b64a2:	f7ff fb63 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
   b64a6:	a804      	add	r0, sp, #16
   b64a8:	f001 fde0 	bl	b806c <_ZN6StringD1Ev>
}
   b64ac:	4620      	mov	r0, r4
   b64ae:	b009      	add	sp, #36	; 0x24
   b64b0:	bd30      	pop	{r4, r5, pc}
		log.info("cloud time not valid");
   b64b2:	4906      	ldr	r1, [pc, #24]	; (b64cc <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   b64b4:	4803      	ldr	r0, [pc, #12]	; (b64c4 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b64b6:	f7ff fb59 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
   b64ba:	e7f7      	b.n	b64ac <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   b64bc:	2003e2e0 	.word	0x2003e2e0
   b64c0:	2003e6b8 	.word	0x2003e6b8
   b64c4:	2003e648 	.word	0x2003e648
   b64c8:	000bb152 	.word	0x000bb152
   b64cc:	000bb168 	.word	0x000bb168

000b64d0 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   b64d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   b64d2:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   b64d4:	4604      	mov	r4, r0
	if (!timeSet) {
   b64d6:	b99d      	cbnz	r5, b6500 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   b64d8:	f001 ffe2 	bl	b84a0 <_ZN9TimeClass7isValidEv>
   b64dc:	b180      	cbz	r0, b6500 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   b64de:	2200      	movs	r2, #0
   b64e0:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   b64e2:	4669      	mov	r1, sp
   b64e4:	4628      	mov	r0, r5
        tm = 0;
   b64e6:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   b64ea:	f000 feed 	bl	b72c8 <spark_sync_time_last>
			if (lastSync != 0) {
   b64ee:	b138      	cbz	r0, b6500 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   b64f0:	7ae3      	ldrb	r3, [r4, #11]
   b64f2:	07db      	lsls	r3, r3, #31
   b64f4:	d502      	bpl.n	b64fc <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   b64f6:	4620      	mov	r0, r4
   b64f8:	f7ff ffb6 	bl	b6468 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   b64fc:	2301      	movs	r3, #1
   b64fe:	7263      	strb	r3, [r4, #9]
}
   b6500:	b003      	add	sp, #12
   b6502:	bd30      	pop	{r4, r5, pc}

000b6504 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   b6504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b6506:	2301      	movs	r3, #1
	buf[0] = value;
   b6508:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b650c:	9300      	str	r3, [sp, #0]
   b650e:	460a      	mov	r2, r1
   b6510:	ab03      	add	r3, sp, #12
   b6512:	216f      	movs	r1, #111	; 0x6f
   b6514:	f7ff ff08 	bl	b6328 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b6518:	b005      	add	sp, #20
   b651a:	f85d fb04 	ldr.w	pc, [sp], #4

000b651e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   b651e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6520:	4617      	mov	r7, r2
   b6522:	4604      	mov	r4, r0
   b6524:	460d      	mov	r5, r1
   b6526:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   b6528:	f7ff fe8d 	bl	b6246 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   b652c:	4038      	ands	r0, r7
	return deviceWriteRegisterByte(addr, value);
   b652e:	ea40 0206 	orr.w	r2, r0, r6
   b6532:	4629      	mov	r1, r5
   b6534:	4620      	mov	r0, r4
}
   b6536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   b653a:	f7ff bfe3 	b.w	b6504 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000b653e <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   b653e:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   b6540:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   b6542:	d80d      	bhi.n	b6560 <_ZN8MCP7941010clearAlarmEi+0x22>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   b6544:	2900      	cmp	r1, #0
   b6546:	bf0c      	ite	eq
   b6548:	2210      	moveq	r2, #16
   b654a:	2220      	movne	r2, #32
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   b654c:	2300      	movs	r3, #0
   b654e:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   b6552:	2107      	movs	r1, #7
   b6554:	f7ff ffe3 	bl	b651e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   b6558:	fab0 f080 	clz	r0, r0
   b655c:	0940      	lsrs	r0, r0, #5
}
   b655e:	bd08      	pop	{r3, pc}
		return false;
   b6560:	2000      	movs	r0, #0
   b6562:	e7fc      	b.n	b655e <_ZN8MCP7941010clearAlarmEi+0x20>

000b6564 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   b6564:	b538      	push	{r3, r4, r5, lr}
   b6566:	4604      	mov	r4, r0
   b6568:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b656a:	6860      	ldr	r0, [r4, #4]
   b656c:	2157      	movs	r1, #87	; 0x57
   b656e:	f001 fba5 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   b6572:	6860      	ldr	r0, [r4, #4]
   b6574:	2101      	movs	r1, #1
   b6576:	f001 fba8 	bl	b7cca <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b657a:	b108      	cbz	r0, b6580 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   b657c:	3d01      	subs	r5, #1
   b657e:	d1f4      	bne.n	b656a <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   b6580:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6584 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b6584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6588:	4604      	mov	r4, r0
   b658a:	460f      	mov	r7, r1
   b658c:	4616      	mov	r6, r2
   b658e:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   b6592:	45b0      	cmp	r8, r6
   b6594:	d020      	beq.n	b65d8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b6596:	6860      	ldr	r0, [r4, #4]
   b6598:	2157      	movs	r1, #87	; 0x57
   b659a:	f001 fb8f 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b659e:	4639      	mov	r1, r7
   b65a0:	6860      	ldr	r0, [r4, #4]
   b65a2:	f7ff fc79 	bl	b5e98 <_ZN7TwoWire5writeEj.isra.0>
			wire.write(buf[ii + offset]);
   b65a6:	6860      	ldr	r0, [r4, #4]
   b65a8:	f816 1b01 	ldrb.w	r1, [r6], #1
   b65ac:	6803      	ldr	r3, [r0, #0]
   b65ae:	689b      	ldr	r3, [r3, #8]
   b65b0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   b65b2:	6860      	ldr	r0, [r4, #4]
   b65b4:	2101      	movs	r1, #1
   b65b6:	f001 fb88 	bl	b7cca <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b65ba:	3701      	adds	r7, #1
   b65bc:	4605      	mov	r5, r0
   b65be:	b138      	cbz	r0, b65d0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   b65c0:	4602      	mov	r2, r0
   b65c2:	4906      	ldr	r1, [pc, #24]	; (b65dc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   b65c4:	4806      	ldr	r0, [pc, #24]	; (b65e0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   b65c6:	f7ff fad1 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
}
   b65ca:	4628      	mov	r0, r5
   b65cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   b65d0:	4620      	mov	r0, r4
   b65d2:	f7ff ffc7 	bl	b6564 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   b65d6:	e7dc      	b.n	b6592 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   b65d8:	2500      	movs	r5, #0
	return stat;
   b65da:	e7f6      	b.n	b65ca <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   b65dc:	000bb17d 	.word	0x000bb17d
   b65e0:	2003e648 	.word	0x2003e648

000b65e4 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   b65e6:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65e8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b65ea:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65ec:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   b65ee:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65f0:	4604      	mov	r4, r0
   b65f2:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   b65f4:	4798      	blx	r3
   b65f6:	4287      	cmp	r7, r0
   b65f8:	d80a      	bhi.n	b6610 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   b65fa:	9a01      	ldr	r2, [sp, #4]
   b65fc:	6860      	ldr	r0, [r4, #4]
   b65fe:	4633      	mov	r3, r6
   b6600:	b2e9      	uxtb	r1, r5
   b6602:	f7ff ffbf 	bl	b6584 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   b6606:	fab0 f080 	clz	r0, r0
   b660a:	0940      	lsrs	r0, r0, #5
}
   b660c:	b003      	add	sp, #12
   b660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   b6610:	2000      	movs	r0, #0
   b6612:	e7fb      	b.n	b660c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000b6614 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   b6614:	4b01      	ldr	r3, [pc, #4]	; (b661c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   b6616:	4a02      	ldr	r2, [pc, #8]	; (b6620 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   b6618:	601a      	str	r2, [r3, #0]
}
   b661a:	4770      	bx	lr
   b661c:	2003e648 	.word	0x2003e648
   b6620:	000bb19e 	.word	0x000bb19e

000b6624 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6624:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b6626:	2301      	movs	r3, #1
   b6628:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b662a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b662c:	4604      	mov	r4, r0
        if (th->func) {
   b662e:	b143      	cbz	r3, b6642 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6630:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6632:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6634:	2301      	movs	r3, #1
   b6636:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b6638:	2000      	movs	r0, #0
    }
   b663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b663e:	f000 bc03 	b.w	b6e48 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6642:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6644:	2800      	cmp	r0, #0
   b6646:	d0f5      	beq.n	b6634 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b6648:	6883      	ldr	r3, [r0, #8]
   b664a:	b90b      	cbnz	r3, b6650 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b664c:	f002 f9fc 	bl	b8a48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6650:	68c3      	ldr	r3, [r0, #12]
   b6652:	e7ee      	b.n	b6632 <_ZN6Thread3runEPv+0xe>

000b6654 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6654:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b6656:	6842      	ldr	r2, [r0, #4]
   b6658:	4603      	mov	r3, r0
   b665a:	1054      	asrs	r4, r2, #1
   b665c:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b6660:	07d2      	lsls	r2, r2, #31
   b6662:	bf48      	it	mi
   b6664:	590a      	ldrmi	r2, [r1, r4]
   b6666:	681b      	ldr	r3, [r3, #0]
      }
   b6668:	f85d 4b04 	ldr.w	r4, [sp], #4
   b666c:	bf48      	it	mi
   b666e:	58d3      	ldrmi	r3, [r2, r3]
   b6670:	4718      	bx	r3

000b6672 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b6672:	2a01      	cmp	r2, #1
   b6674:	d102      	bne.n	b667c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6676:	6001      	str	r1, [r0, #0]
      }
   b6678:	2000      	movs	r0, #0
   b667a:	4770      	bx	lr
	  switch (__op)
   b667c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b667e:	bf04      	itt	eq
   b6680:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b6684:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b6688:	e7f6      	b.n	b6678 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000b668a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b668a:	b510      	push	{r4, lr}
      if (_M_manager)
   b668c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b668e:	4604      	mov	r4, r0
      if (_M_manager)
   b6690:	b113      	cbz	r3, b6698 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6692:	2203      	movs	r2, #3
   b6694:	4601      	mov	r1, r0
   b6696:	4798      	blx	r3
    }
   b6698:	4620      	mov	r0, r4
   b669a:	bd10      	pop	{r4, pc}

000b669c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b669c:	b510      	push	{r4, lr}
   b669e:	4603      	mov	r3, r0
   b66a0:	e9d1 0200 	ldrd	r0, r2, [r1]
   b66a4:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b66a6:	2100      	movs	r1, #0
   b66a8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   b66aa:	b908      	cbnz	r0, b66b0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x14>
   b66ac:	07d1      	lsls	r1, r2, #31
   b66ae:	d505      	bpl.n	b66bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b66b0:	e9cd 0202 	strd	r0, r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b66b4:	4a0f      	ldr	r2, [pc, #60]	; (b66f4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x58>)
   b66b6:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b66b8:	4a0f      	ldr	r2, [pc, #60]	; (b66f8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x5c>)
   b66ba:	9204      	str	r2, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66bc:	aa02      	add	r2, sp, #8
   b66be:	e892 0003 	ldmia.w	r2, {r0, r1}
   b66c2:	466c      	mov	r4, sp
   b66c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b66c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b66cc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b66d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b66d4:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66d8:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b66da:	6898      	ldr	r0, [r3, #8]
   b66dc:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b66de:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b66e0:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66e2:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b66e4:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b66e6:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b66e8:	4610      	mov	r0, r2
   b66ea:	f7ff ffce 	bl	b668a <_ZNSt14_Function_baseD1Ev>
	}
   b66ee:	b006      	add	sp, #24
   b66f0:	bd10      	pop	{r4, pc}
   b66f2:	bf00      	nop
   b66f4:	000b6655 	.word	0x000b6655
   b66f8:	000b6673 	.word	0x000b6673

000b66fc <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   b66fc:	b513      	push	{r0, r1, r4, lr}
   b66fe:	4604      	mov	r4, r0
   b6700:	f000 fbca 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   b6704:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6706:	1ac0      	subs	r0, r0, r3
   b6708:	68e3      	ldr	r3, [r4, #12]
   b670a:	4298      	cmp	r0, r3
   b670c:	d308      	bcc.n	b6720 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b670e:	4b05      	ldr	r3, [pc, #20]	; (b6724 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   b6710:	9300      	str	r3, [sp, #0]
   b6712:	4669      	mov	r1, sp
   b6714:	2300      	movs	r3, #0
   b6716:	f104 0010 	add.w	r0, r4, #16
   b671a:	9301      	str	r3, [sp, #4]
   b671c:	f7ff ffbe 	bl	b669c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
	}
}
   b6720:	b002      	add	sp, #8
   b6722:	bd10      	pop	{r4, pc}
   b6724:	000b6805 	.word	0x000b6805

000b6728 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   b6728:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b672a:	4b05      	ldr	r3, [pc, #20]	; (b6740 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   b672c:	9300      	str	r3, [sp, #0]
   b672e:	4669      	mov	r1, sp
   b6730:	2300      	movs	r3, #0
   b6732:	3010      	adds	r0, #16
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	f7ff ffb1 	bl	b669c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b673a:	b003      	add	sp, #12
   b673c:	f85d fb04 	ldr.w	pc, [sp], #4
   b6740:	000b6805 	.word	0x000b6805

000b6744 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b6744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6748:	4604      	mov	r4, r0
   b674a:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b674c:	2014      	movs	r0, #20
   b674e:	491c      	ldr	r1, [pc, #112]	; (b67c0 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x7c>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b6750:	4690      	mov	r8, r2
   b6752:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b6754:	f002 f974 	bl	b8a40 <_ZnwjRKSt9nothrow_t>
   b6758:	b130      	cbz	r0, b6768 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b675a:	2500      	movs	r5, #0
            exited(false) {
   b675c:	e9c0 5500 	strd	r5, r5, [r0]
   b6760:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6764:	7405      	strb	r5, [r0, #16]
   b6766:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6768:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b676a:	b198      	cbz	r0, b6794 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b676e:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b6772:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6776:	4631      	mov	r1, r6
   b6778:	e9cd 0300 	strd	r0, r3, [sp]
   b677c:	4b11      	ldr	r3, [pc, #68]	; (b67c4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
   b677e:	3004      	adds	r0, #4
   b6780:	f000 fb32 	bl	b6de8 <os_thread_create>
   b6784:	b930      	cbnz	r0, b6794 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6786:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b6788:	7c1b      	ldrb	r3, [r3, #16]
   b678a:	b9a3      	cbnz	r3, b67b6 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
            HAL_Delay_Milliseconds(1);
   b678c:	2001      	movs	r0, #1
   b678e:	f000 fb73 	bl	b6e78 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6792:	e7f8      	b.n	b6786 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b6794:	6825      	ldr	r5, [r4, #0]
	_M_ptr() = __p;
   b6796:	2300      	movs	r3, #0
   b6798:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b679a:	b165      	cbz	r5, b67b6 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b679c:	682e      	ldr	r6, [r5, #0]
   b679e:	b136      	cbz	r6, b67ae <_ZN6ThreadC1EPKcPFvPvES2_hj+0x6a>
    class function<_Res(_ArgTypes...)>
   b67a0:	4630      	mov	r0, r6
   b67a2:	f7ff ff72 	bl	b668a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b67a6:	2110      	movs	r1, #16
   b67a8:	4630      	mov	r0, r6
   b67aa:	f7fe f986 	bl	b4aba <_ZdlPvj>
   b67ae:	2114      	movs	r1, #20
   b67b0:	4628      	mov	r0, r5
   b67b2:	f7fe f982 	bl	b4aba <_ZdlPvj>
    }
   b67b6:	4620      	mov	r0, r4
   b67b8:	b002      	add	sp, #8
   b67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67be:	bf00      	nop
   b67c0:	000bb4b8 	.word	0x000bb4b8
   b67c4:	000b6625 	.word	0x000b6625

000b67c8 <_ZN21PublishQueueAsyncBase5setupEv>:
	haveSetup = true;
   b67c8:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   b67ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	haveSetup = true;
   b67cc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   b67d0:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b67d2:	3008      	adds	r0, #8
   b67d4:	f000 fb18 	bl	b6e08 <os_mutex_create>
	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   b67d8:	2004      	movs	r0, #4
   b67da:	f7fe f96a 	bl	b4ab2 <_Znwj>
   b67de:	4605      	mov	r5, r0
   b67e0:	b148      	cbz	r0, b67f6 <_ZN21PublishQueueAsyncBase5setupEv+0x2e>
   b67e2:	2302      	movs	r3, #2
   b67e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b67e8:	e9cd 3200 	strd	r3, r2, [sp]
   b67ec:	4903      	ldr	r1, [pc, #12]	; (b67fc <_ZN21PublishQueueAsyncBase5setupEv+0x34>)
   b67ee:	4a04      	ldr	r2, [pc, #16]	; (b6800 <_ZN21PublishQueueAsyncBase5setupEv+0x38>)
   b67f0:	4623      	mov	r3, r4
   b67f2:	f7ff ffa7 	bl	b6744 <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b67f6:	6065      	str	r5, [r4, #4]
}
   b67f8:	b003      	add	sp, #12
   b67fa:	bd30      	pop	{r4, r5, pc}
   b67fc:	000bb210 	.word	0x000bb210
   b6800:	000b6b1f 	.word	0x000b6b1f

000b6804 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   b6804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b6808:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   b680c:	b086      	sub	sp, #24
   b680e:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b6810:	2b00      	cmp	r3, #0
   b6812:	d164      	bne.n	b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6814:	f000 fd28 	bl	b7268 <spark_cloud_flag_connected>
   b6818:	2800      	cmp	r0, #0
   b681a:	d060      	beq.n	b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   b681c:	f000 fb3c 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
   b6820:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6822:	1ac0      	subs	r0, r0, r3
   b6824:	f240 33f1 	movw	r3, #1009	; 0x3f1
   b6828:	4298      	cmp	r0, r3
   b682a:	d958      	bls.n	b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   b682c:	6823      	ldr	r3, [r4, #0]
   b682e:	4620      	mov	r0, r4
   b6830:	695b      	ldr	r3, [r3, #20]
   b6832:	4798      	blx	r3
		if (data) {
   b6834:	4605      	mov	r5, r0
   b6836:	2800      	cmp	r0, #0
   b6838:	d051      	beq.n	b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   b683a:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   b683e:	2301      	movs	r3, #1
   b6840:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   b6844:	4638      	mov	r0, r7
   b6846:	f7fe f8d9 	bl	b49fc <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   b684a:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b684e:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   b6852:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b6854:	682b      	ldr	r3, [r5, #0]
   b6856:	492b      	ldr	r1, [pc, #172]	; (b6904 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   b6858:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   b685a:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b685c:	4633      	mov	r3, r6
   b685e:	482a      	ldr	r0, [pc, #168]	; (b6908 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6860:	463a      	mov	r2, r7
   b6862:	f7ff f983 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   b6866:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6868:	f88d 8000 	strb.w	r8, [sp]
   b686c:	4632      	mov	r2, r6
   b686e:	4639      	mov	r1, r7
   b6870:	a802      	add	r0, sp, #8
   b6872:	f000 fffd 	bl	b7870 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b6876:	9d02      	ldr	r5, [sp, #8]
   b6878:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   b687a:	b91b      	cbnz	r3, b6884 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   b687c:	2001      	movs	r0, #1
   b687e:	f000 fe0b 	bl	b7498 <delay>
			while(!request.isDone()) {
   b6882:	e7f8      	b.n	b6876 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b6884:	2000      	movs	r0, #0
   b6886:	f000 fc99 	bl	b71bc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b688a:	b120      	cbz	r0, b6896 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   b688c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b688e:	b913      	cbnz	r3, b6896 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   b6890:	f000 fce2 	bl	b7258 <spark_process>
    }
   b6894:	e7fa      	b.n	b688c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6896:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   b6898:	2b01      	cmp	r3, #1
   b689a:	d123      	bne.n	b68e4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   b689c:	491b      	ldr	r1, [pc, #108]	; (b690c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   b689e:	481a      	ldr	r0, [pc, #104]	; (b6908 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b68a0:	f7ff f964 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   b68a4:	6823      	ldr	r3, [r4, #0]
   b68a6:	2100      	movs	r1, #0
   b68a8:	699b      	ldr	r3, [r3, #24]
   b68aa:	4620      	mov	r0, r4
   b68ac:	4798      	blx	r3
			isSending = false;
   b68ae:	2300      	movs	r3, #0
   b68b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   b68b4:	f000 faf0 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   b68b8:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b68ba:	9c03      	ldr	r4, [sp, #12]
   b68bc:	b17c      	cbz	r4, b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   b68be:	6863      	ldr	r3, [r4, #4]
   b68c0:	3b01      	subs	r3, #1
   b68c2:	6063      	str	r3, [r4, #4]
   b68c4:	b95b      	cbnz	r3, b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   b68c6:	6823      	ldr	r3, [r4, #0]
   b68c8:	4620      	mov	r0, r4
   b68ca:	689b      	ldr	r3, [r3, #8]
   b68cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b68ce:	68a3      	ldr	r3, [r4, #8]
   b68d0:	3b01      	subs	r3, #1
   b68d2:	60a3      	str	r3, [r4, #8]
   b68d4:	b91b      	cbnz	r3, b68de <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   b68d6:	6823      	ldr	r3, [r4, #0]
   b68d8:	4620      	mov	r0, r4
   b68da:	68db      	ldr	r3, [r3, #12]
   b68dc:	4798      	blx	r3
}
   b68de:	b006      	add	sp, #24
   b68e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   b68e4:	68e2      	ldr	r2, [r4, #12]
   b68e6:	490a      	ldr	r1, [pc, #40]	; (b6910 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   b68e8:	4807      	ldr	r0, [pc, #28]	; (b6908 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b68ea:	f7ff f93f 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   b68ee:	4b09      	ldr	r3, [pc, #36]	; (b6914 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   b68f0:	9304      	str	r3, [sp, #16]
   b68f2:	a904      	add	r1, sp, #16
   b68f4:	2300      	movs	r3, #0
   b68f6:	f104 0010 	add.w	r0, r4, #16
   b68fa:	9305      	str	r3, [sp, #20]
   b68fc:	f7ff fece 	bl	b669c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b6900:	e7d5      	b.n	b68ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   b6902:	bf00      	nop
   b6904:	000bb222 	.word	0x000bb222
   b6908:	2003e64c 	.word	0x2003e64c
   b690c:	000bb243 	.word	0x000bb243
   b6910:	000bb25a 	.word	0x000bb25a
   b6914:	000b66fd 	.word	0x000b66fd

000b6918 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   b6918:	f247 5130 	movw	r1, #30000	; 0x7530
   b691c:	4a08      	ldr	r2, [pc, #32]	; (b6940 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   b691e:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6920:	4908      	ldr	r1, [pc, #32]	; (b6944 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   b6922:	6002      	str	r2, [r0, #0]
   b6924:	2200      	movs	r2, #0
   b6926:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b692a:	4907      	ldr	r1, [pc, #28]	; (b6948 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   b692c:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   b692e:	4907      	ldr	r1, [pc, #28]	; (b694c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   b6930:	6042      	str	r2, [r0, #4]
   b6932:	e9c0 2208 	strd	r2, r2, [r0, #32]
   b6936:	6181      	str	r1, [r0, #24]
   b6938:	8502      	strh	r2, [r0, #40]	; 0x28
   b693a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   b693e:	4770      	bx	lr
   b6940:	000bb2d4 	.word	0x000bb2d4
   b6944:	000b6729 	.word	0x000b6729
   b6948:	000b6655 	.word	0x000b6655
   b694c:	000b6673 	.word	0x000b6673

000b6950 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   b6950:	b510      	push	{r4, lr}
   b6952:	4b04      	ldr	r3, [pc, #16]	; (b6964 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   b6954:	4604      	mov	r4, r0
   b6956:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   b695a:	f7ff fe96 	bl	b668a <_ZNSt14_Function_baseD1Ev>
}
   b695e:	4620      	mov	r0, r4
   b6960:	bd10      	pop	{r4, pc}
   b6962:	bf00      	nop
   b6964:	000bb2d4 	.word	0x000bb2d4

000b6968 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b6968:	b510      	push	{r4, lr}
   b696a:	4b03      	ldr	r3, [pc, #12]	; (b6978 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   b696c:	6003      	str	r3, [r0, #0]
   b696e:	4604      	mov	r4, r0
   b6970:	f7ff ffee 	bl	b6950 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   b6974:	4620      	mov	r0, r4
   b6976:	bd10      	pop	{r4, pc}
   b6978:	000bb2fc 	.word	0x000bb2fc

000b697c <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b697c:	b510      	push	{r4, lr}
   b697e:	4604      	mov	r4, r0
}
   b6980:	f7ff fff2 	bl	b6968 <_ZN25PublishQueueAsyncRetainedD1Ev>
   b6984:	4620      	mov	r0, r4
   b6986:	2138      	movs	r1, #56	; 0x38
   b6988:	f7fe f897 	bl	b4aba <_ZdlPvj>
   b698c:	4620      	mov	r0, r4
   b698e:	bd10      	pop	{r4, pc}

000b6990 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   b6990:	6880      	ldr	r0, [r0, #8]
   b6992:	f000 ba41 	b.w	b6e18 <os_mutex_lock>

000b6996 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   b6996:	6880      	ldr	r0, [r0, #8]
   b6998:	f000 ba46 	b.w	b6e28 <os_mutex_unlock>

000b699c <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   b699c:	b510      	push	{r4, lr}
   b699e:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   b69a0:	6800      	ldr	r0, [r0, #0]
   b69a2:	f7ff fff8 	bl	b6996 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   b69a6:	4620      	mov	r0, r4
   b69a8:	bd10      	pop	{r4, pc}

000b69aa <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   b69aa:	b513      	push	{r0, r1, r4, lr}
   b69ac:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b69ae:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b69b0:	f7ff ffee 	bl	b6990 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b69b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   b69b6:	88dc      	ldrh	r4, [r3, #6]
   b69b8:	b2a4      	uxth	r4, r4
   b69ba:	b10c      	cbz	r4, b69c0 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   b69bc:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   b69c0:	a801      	add	r0, sp, #4
   b69c2:	f7ff ffeb 	bl	b699c <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   b69c6:	4620      	mov	r0, r4
   b69c8:	b002      	add	sp, #8
   b69ca:	bd10      	pop	{r4, pc}

000b69cc <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   b69cc:	b513      	push	{r0, r1, r4, lr}
   b69ce:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b69d0:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b69d2:	f7ff ffdd 	bl	b6990 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   b69d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b69da:	b943      	cbnz	r3, b69ee <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b69dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   b69de:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   b69e0:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   b69e2:	a801      	add	r0, sp, #4
   b69e4:	f7ff ffda 	bl	b699c <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   b69e8:	4620      	mov	r0, r4
   b69ea:	b002      	add	sp, #8
   b69ec:	bd10      	pop	{r4, pc}
	bool result = false;
   b69ee:	2400      	movs	r4, #0
   b69f0:	e7f7      	b.n	b69e2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000b69f2 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   b69f2:	b513      	push	{r0, r1, r4, lr}
   b69f4:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b69f6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b69f8:	f7ff ffca 	bl	b6990 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   b69fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   b69fe:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   b6a00:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   b6a02:	f7ff ffcb 	bl	b699c <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   b6a06:	4620      	mov	r0, r4
   b6a08:	b002      	add	sp, #8
   b6a0a:	bd10      	pop	{r4, pc}

000b6a0c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b6a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a10:	4699      	mov	r9, r3
   b6a12:	b086      	sub	sp, #24
	if (!haveSetup) {
   b6a14:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b6a18:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   b6a1c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b6a20:	4604      	mov	r4, r0
   b6a22:	460f      	mov	r7, r1
   b6a24:	4616      	mov	r6, r2
	if (!haveSetup) {
   b6a26:	b913      	cbnz	r3, b6a2e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   b6a28:	6803      	ldr	r3, [r0, #0]
   b6a2a:	689b      	ldr	r3, [r3, #8]
   b6a2c:	4798      	blx	r3
		data = "";
   b6a2e:	4b31      	ldr	r3, [pc, #196]	; (b6af4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6a30:	4638      	mov	r0, r7
		data = "";
   b6a32:	2e00      	cmp	r6, #0
   b6a34:	bf08      	it	eq
   b6a36:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6a38:	f7fd ffe0 	bl	b49fc <strlen>
   b6a3c:	4605      	mov	r5, r0
   b6a3e:	4630      	mov	r0, r6
   b6a40:	f7fd ffdc 	bl	b49fc <strlen>
   b6a44:	4428      	add	r0, r5
   b6a46:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   b6a4a:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   b6a4c:	bf1c      	itt	ne
   b6a4e:	f025 0503 	bicne.w	r5, r5, #3
   b6a52:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   b6a54:	4633      	mov	r3, r6
   b6a56:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6a5a:	e9cd 9a00 	strd	r9, sl, [sp]
   b6a5e:	4926      	ldr	r1, [pc, #152]	; (b6af8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   b6a60:	4826      	ldr	r0, [pc, #152]	; (b6afc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   b6a62:	463a      	mov	r2, r7
   b6a64:	f7ff f882 	bl	b5b6c <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   b6a68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b6a6a:	3b08      	subs	r3, #8
   b6a6c:	42ab      	cmp	r3, r5
   b6a6e:	d212      	bcs.n	b6a96 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   b6a70:	2400      	movs	r4, #0
}
   b6a72:	4620      	mov	r0, r4
   b6a74:	b006      	add	sp, #24
   b6a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   b6a7a:	88cb      	ldrh	r3, [r1, #6]
   b6a7c:	2b01      	cmp	r3, #1
   b6a7e:	d036      	beq.n	b6aee <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   b6a80:	a805      	add	r0, sp, #20
   b6a82:	f7ff ff8b 	bl	b699c <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   b6a86:	6823      	ldr	r3, [r4, #0]
   b6a88:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   b6a8c:	699b      	ldr	r3, [r3, #24]
   b6a8e:	4620      	mov	r0, r4
   b6a90:	4798      	blx	r3
   b6a92:	2800      	cmp	r0, #0
   b6a94:	d0ec      	beq.n	b6a70 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   b6a96:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6a98:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   b6a9a:	f7ff ff79 	bl	b6990 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6a9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6aa0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   b6aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6aa4:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   b6aa6:	1ad2      	subs	r2, r2, r3
   b6aa8:	42aa      	cmp	r2, r5
   b6aaa:	d3e6      	bcc.n	b6a7a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   b6aac:	ea48 080a 	orr.w	r8, r8, sl
   b6ab0:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   b6ab4:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   b6ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   b6aba:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   b6abe:	4639      	mov	r1, r7
   b6ac0:	4640      	mov	r0, r8
   b6ac2:	f002 f875 	bl	b8bb0 <strcpy>
				cp += strlen(cp) + 1;
   b6ac6:	4640      	mov	r0, r8
   b6ac8:	f7fd ff98 	bl	b49fc <strlen>
   b6acc:	3001      	adds	r0, #1
				strcpy(cp, data);
   b6ace:	4631      	mov	r1, r6
   b6ad0:	4440      	add	r0, r8
   b6ad2:	f002 f86d 	bl	b8bb0 <strcpy>
				nextFree += size;
   b6ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6ad8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   b6ada:	442b      	add	r3, r5
   b6adc:	6363      	str	r3, [r4, #52]	; 0x34
				hdr->numEvents++;
   b6ade:	88d3      	ldrh	r3, [r2, #6]
   b6ae0:	3301      	adds	r3, #1
   b6ae2:	80d3      	strh	r3, [r2, #6]
				return true;
   b6ae4:	2401      	movs	r4, #1
   b6ae6:	a805      	add	r0, sp, #20
   b6ae8:	f7ff ff58 	bl	b699c <_ZN11StMutexLockD1Ev>
   b6aec:	e7c1      	b.n	b6a72 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   b6aee:	2400      	movs	r4, #0
   b6af0:	e7f9      	b.n	b6ae6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   b6af2:	bf00      	nop
   b6af4:	000bb4d8 	.word	0x000bb4d8
   b6af8:	000bb281 	.word	0x000bb281
   b6afc:	2003e64c 	.word	0x2003e64c

000b6b00 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6b04:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   b6b08:	69a3      	ldr	r3, [r4, #24]
   b6b0a:	b90b      	cbnz	r3, b6b10 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   b6b0c:	f001 ff9c 	bl	b8a48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6b10:	69e3      	ldr	r3, [r4, #28]
   b6b12:	4621      	mov	r1, r4
   b6b14:	4628      	mov	r0, r5
   b6b16:	4798      	blx	r3
		os_thread_yield();
   b6b18:	f000 f96e 	bl	b6df8 <os_thread_yield>
	while(true) {
   b6b1c:	e7f4      	b.n	b6b08 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000b6b1e <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   b6b1e:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   b6b20:	f7ff ffee 	bl	b6b00 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000b6b24 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b6b24:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   b6b26:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b6b2a:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6b2c:	4628      	mov	r0, r5
   b6b2e:	f7fd ff65 	bl	b49fc <strlen>
   b6b32:	3001      	adds	r0, #1
   b6b34:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6b36:	4628      	mov	r0, r5
   b6b38:	f7fd ff60 	bl	b49fc <strlen>
	size_t offset = start - retainedBuffer;
   b6b3c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6b3e:	3001      	adds	r0, #1
   b6b40:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   b6b42:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   b6b44:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   b6b48:	bf1c      	itt	ne
   b6b4a:	f1c3 0304 	rsbne	r3, r3, #4
   b6b4e:	18c0      	addne	r0, r0, r3
}
   b6b50:	bd68      	pop	{r3, r5, r6, pc}

000b6b52 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   b6b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6b54:	4604      	mov	r4, r0
   b6b56:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6b58:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6b5a:	f7ff ff19 	bl	b6990 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6b5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6b60:	88fb      	ldrh	r3, [r7, #6]
   b6b62:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   b6b66:	b1e6      	cbz	r6, b6ba2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   b6b68:	2b01      	cmp	r3, #1
   b6b6a:	d922      	bls.n	b6bb2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   b6b6c:	4629      	mov	r1, r5
   b6b6e:	4620      	mov	r0, r4
   b6b70:	f7ff ffd8 	bl	b6b24 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   b6b74:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   b6b76:	4629      	mov	r1, r5
   b6b78:	4620      	mov	r0, r4
   b6b7a:	f7ff ffd3 	bl	b6b24 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6b7e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   b6b80:	443a      	add	r2, r7
	if (after > 0) {
   b6b82:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   b6b84:	4601      	mov	r1, r0
	size_t len = next - start;
   b6b86:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   b6b8a:	d002      	beq.n	b6b92 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   b6b8c:	4628      	mov	r0, r5
   b6b8e:	f001 ffbf 	bl	b8b10 <memmove>
	nextFree -= len;
   b6b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b6b94:	1b9b      	subs	r3, r3, r6
   b6b96:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   b6b98:	88fb      	ldrh	r3, [r7, #6]
   b6b9a:	3b01      	subs	r3, #1
   b6b9c:	80fb      	strh	r3, [r7, #6]
	return true;
   b6b9e:	2601      	movs	r6, #1
   b6ba0:	e001      	b.n	b6ba6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   b6ba2:	2b00      	cmp	r3, #0
   b6ba4:	d1e7      	bne.n	b6b76 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   b6ba6:	a801      	add	r0, sp, #4
   b6ba8:	f7ff fef8 	bl	b699c <_ZN11StMutexLockD1Ev>
}
   b6bac:	4630      	mov	r0, r6
   b6bae:	b003      	add	sp, #12
   b6bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   b6bb2:	2600      	movs	r6, #0
   b6bb4:	e7f7      	b.n	b6ba6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000b6bb8 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6bbc:	460d      	mov	r5, r1
   b6bbe:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6bc0:	462f      	mov	r7, r5
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6bc2:	4b17      	ldr	r3, [pc, #92]	; (b6c20 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6bc4:	f8df 905c 	ldr.w	r9, [pc, #92]	; b6c24 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6bc8:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6bca:	f7ff fea5 	bl	b6918 <_ZN21PublishQueueAsyncBaseC1Ev>
   b6bce:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6bd0:	f857 3b08 	ldr.w	r3, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6bd4:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6bd6:	454b      	cmp	r3, r9
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6bd8:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6bda:	d117      	bne.n	b6c0c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   b6bdc:	88ab      	ldrh	r3, [r5, #4]
   b6bde:	b29b      	uxth	r3, r3
   b6be0:	42b3      	cmp	r3, r6
   b6be2:	d113      	bne.n	b6c0c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6be4:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6be8:	6367      	str	r7, [r4, #52]	; 0x34
   b6bea:	f04f 0800 	mov.w	r8, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   b6bee:	88eb      	ldrh	r3, [r5, #6]
   b6bf0:	fa1f f288 	uxth.w	r2, r8
   b6bf4:	b29b      	uxth	r3, r3
   b6bf6:	429a      	cmp	r2, r3
   b6bf8:	d20e      	bcs.n	b6c18 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   b6bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b6bfc:	4620      	mov	r0, r4
   b6bfe:	f7ff ff91 	bl	b6b24 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   b6c02:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   b6c04:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   b6c06:	f108 0801 	add.w	r8, r8, #1
   b6c0a:	d9f0      	bls.n	b6bee <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   b6c0c:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   b6c0e:	f8c5 9000 	str.w	r9, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6c12:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   b6c14:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   b6c16:	80eb      	strh	r3, [r5, #6]
}
   b6c18:	4620      	mov	r0, r4
   b6c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c1e:	bf00      	nop
   b6c20:	000bb2fc 	.word	0x000bb2fc
   b6c24:	d19cab61 	.word	0xd19cab61

000b6c28 <_GLOBAL__sub_I_pubqLogger>:
   b6c28:	4b01      	ldr	r3, [pc, #4]	; (b6c30 <_GLOBAL__sub_I_pubqLogger+0x8>)
   b6c2a:	4a02      	ldr	r2, [pc, #8]	; (b6c34 <_GLOBAL__sub_I_pubqLogger+0xc>)
   b6c2c:	601a      	str	r2, [r3, #0]
}
   b6c2e:	4770      	bx	lr
   b6c30:	2003e64c 	.word	0x2003e64c
   b6c34:	000bb2c2 	.word	0x000bb2c2

000b6c38 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   b6c38:	4770      	bx	lr

000b6c3a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   b6c3a:	b538      	push	{r3, r4, r5, lr}
   b6c3c:	4605      	mov	r5, r0
   b6c3e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b6c40:	f001 fe9a 	bl	b8978 <_Z19__fetch_global_Wirev>
   b6c44:	7829      	ldrb	r1, [r5, #0]
   b6c46:	f001 f839 	bl	b7cbc <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   b6c4a:	f001 fe95 	bl	b8978 <_Z19__fetch_global_Wirev>
  inline size_t write(int n) { return write((uint8_t)n); }
   b6c4e:	6803      	ldr	r3, [r0, #0]
   b6c50:	0a21      	lsrs	r1, r4, #8
   b6c52:	689b      	ldr	r3, [r3, #8]
   b6c54:	4798      	blx	r3
  Wire.write(cmd & 0xFF);
   b6c56:	f001 fe8f 	bl	b8978 <_Z19__fetch_global_Wirev>
   b6c5a:	6803      	ldr	r3, [r0, #0]
   b6c5c:	b2e1      	uxtb	r1, r4
   b6c5e:	689b      	ldr	r3, [r3, #8]
   b6c60:	4798      	blx	r3
  Wire.endTransmission();  
   b6c62:	f001 fe89 	bl	b8978 <_Z19__fetch_global_Wirev>
}
   b6c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   b6c6a:	f001 b832 	b.w	b7cd2 <_ZN7TwoWire15endTransmissionEv>

000b6c6e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   b6c6e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   b6c70:	f243 01a2 	movw	r1, #12450	; 0x30a2
   b6c74:	f7ff ffe1 	bl	b6c3a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   b6c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   b6c7c:	200a      	movs	r0, #10
   b6c7e:	f000 bc0b 	b.w	b7498 <delay>

000b6c82 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   b6c82:	b538      	push	{r3, r4, r5, lr}
   b6c84:	4604      	mov	r4, r0
   b6c86:	460d      	mov	r5, r1
  Wire.begin();
   b6c88:	f001 fe76 	bl	b8978 <_Z19__fetch_global_Wirev>
   b6c8c:	f000 ffe4 	bl	b7c58 <_ZN7TwoWire5beginEv>
  reset();
   b6c90:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   b6c92:	7025      	strb	r5, [r4, #0]
  reset();
   b6c94:	f7ff ffeb 	bl	b6c6e <_ZN14Adafruit_SHT315resetEv>
}
   b6c98:	2001      	movs	r0, #1
   b6c9a:	bd38      	pop	{r3, r4, r5, pc}

000b6c9c <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   b6c9c:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   b6c9e:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   b6ca0:	4291      	cmp	r1, r2
   b6ca2:	d00e      	beq.n	b6cc2 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   b6ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6ca8:	4058      	eors	r0, r3
   b6caa:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   b6cac:	f010 0f80 	tst.w	r0, #128	; 0x80
   b6cb0:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   b6cb4:	bf18      	it	ne
   b6cb6:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   b6cba:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   b6cbc:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   b6cbe:	d1f5      	bne.n	b6cac <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   b6cc0:	e7ee      	b.n	b6ca0 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   b6cc2:	4770      	bx	lr
   b6cc4:	0000      	movs	r0, r0
	...

000b6cc8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   b6cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   b6cca:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   b6cce:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   b6cd0:	f7ff ffb3 	bl	b6c3a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   b6cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6cd8:	f000 fbde 	bl	b7498 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   b6cdc:	f001 fe4c 	bl	b8978 <_Z19__fetch_global_Wirev>
   b6ce0:	7829      	ldrb	r1, [r5, #0]
   b6ce2:	2206      	movs	r2, #6
   b6ce4:	f000 ffe7 	bl	b7cb6 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   b6ce8:	f001 fe46 	bl	b8978 <_Z19__fetch_global_Wirev>
   b6cec:	6803      	ldr	r3, [r0, #0]
   b6cee:	691b      	ldr	r3, [r3, #16]
   b6cf0:	4798      	blx	r3
   b6cf2:	2806      	cmp	r0, #6
   b6cf4:	4604      	mov	r4, r0
   b6cf6:	d002      	beq.n	b6cfe <_ZN14Adafruit_SHT3111readTempHumEv+0x36>
    return false;
   b6cf8:	2000      	movs	r0, #0
}
   b6cfa:	b002      	add	sp, #8
   b6cfc:	bd70      	pop	{r4, r5, r6, pc}
   b6cfe:	466e      	mov	r6, sp
    readbuffer[i] = Wire.read();
   b6d00:	f001 fe3a 	bl	b8978 <_Z19__fetch_global_Wirev>
   b6d04:	6803      	ldr	r3, [r0, #0]
   b6d06:	695b      	ldr	r3, [r3, #20]
   b6d08:	4798      	blx	r3
  for (uint8_t i=0; i<6; i++) {
   b6d0a:	3c01      	subs	r4, #1
   b6d0c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   b6d10:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   b6d14:	4669      	mov	r1, sp
   b6d16:	d1f3      	bne.n	b6d00 <_ZN14Adafruit_SHT3111readTempHumEv+0x38>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   b6d18:	2202      	movs	r2, #2
   b6d1a:	4628      	mov	r0, r5
   b6d1c:	f7ff ffbe 	bl	b6c9c <_ZN14Adafruit_SHT314crc8EPKhi>
   b6d20:	f89d 4002 	ldrb.w	r4, [sp, #2]
   b6d24:	4284      	cmp	r4, r0
   b6d26:	d1e7      	bne.n	b6cf8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   b6d28:	2202      	movs	r2, #2
   b6d2a:	f10d 0103 	add.w	r1, sp, #3
   b6d2e:	4628      	mov	r0, r5
   b6d30:	f7ff ffb4 	bl	b6c9c <_ZN14Adafruit_SHT314crc8EPKhi>
   b6d34:	f89d 4005 	ldrb.w	r4, [sp, #5]
   b6d38:	4284      	cmp	r4, r0
   b6d3a:	d1dd      	bne.n	b6cf8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  double stemp = ST;
   b6d3c:	f8bd 0000 	ldrh.w	r0, [sp]
   b6d40:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   b6d44:	ba40      	rev16	r0, r0
   b6d46:	b280      	uxth	r0, r0
   b6d48:	f7fd faac 	bl	b42a4 <__aeabi_ui2d>
  stemp *= 175;
   b6d4c:	a316      	add	r3, pc, #88	; (adr r3, b6da8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   b6d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d52:	f7fd fb21 	bl	b4398 <__aeabi_dmul>
  stemp /= 0xffff;
   b6d56:	a310      	add	r3, pc, #64	; (adr r3, b6d98 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6d58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d5c:	f7fd fc46 	bl	b45ec <__aeabi_ddiv>
  stemp = -45 + stemp;
   b6d60:	4b0f      	ldr	r3, [pc, #60]	; (b6da0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   b6d62:	2200      	movs	r2, #0
   b6d64:	f7fd f960 	bl	b4028 <__aeabi_dsub>
  temp = stemp;
   b6d68:	f7fd fdd0 	bl	b490c <__aeabi_d2f>
   b6d6c:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   b6d6e:	ba60      	rev16	r0, r4
   b6d70:	b280      	uxth	r0, r0
   b6d72:	f7fd fa97 	bl	b42a4 <__aeabi_ui2d>
  shum *= 100;
   b6d76:	4b0b      	ldr	r3, [pc, #44]	; (b6da4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   b6d78:	2200      	movs	r2, #0
   b6d7a:	f7fd fb0d 	bl	b4398 <__aeabi_dmul>
  shum /= 0xFFFF;
   b6d7e:	a306      	add	r3, pc, #24	; (adr r3, b6d98 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d84:	f7fd fc32 	bl	b45ec <__aeabi_ddiv>
  humidity = shum;
   b6d88:	f7fd fdc0 	bl	b490c <__aeabi_d2f>
   b6d8c:	6068      	str	r0, [r5, #4]
  return true;
   b6d8e:	2001      	movs	r0, #1
   b6d90:	e7b3      	b.n	b6cfa <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
   b6d92:	bf00      	nop
   b6d94:	f3af 8000 	nop.w
   b6d98:	00000000 	.word	0x00000000
   b6d9c:	40efffe0 	.word	0x40efffe0
   b6da0:	40468000 	.word	0x40468000
   b6da4:	40590000 	.word	0x40590000
   b6da8:	00000000 	.word	0x00000000
   b6dac:	4065e000 	.word	0x4065e000

000b6db0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   b6db0:	b510      	push	{r4, lr}
   b6db2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6db4:	f7ff ff88 	bl	b6cc8 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6db8:	b110      	cbz	r0, b6dc0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   b6dba:	ed94 0a02 	vldr	s0, [r4, #8]
}
   b6dbe:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6dc8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   b6dc4:	e7fb      	b.n	b6dbe <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   b6dc6:	bf00      	nop
   b6dc8:	7fc00000 	.word	0x7fc00000

000b6dcc <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   b6dcc:	b510      	push	{r4, lr}
   b6dce:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6dd0:	f7ff ff7a 	bl	b6cc8 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6dd4:	b110      	cbz	r0, b6ddc <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   b6dd6:	ed94 0a01 	vldr	s0, [r4, #4]
}
   b6dda:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6ddc:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6de4 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   b6de0:	e7fb      	b.n	b6dda <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   b6de2:	bf00      	nop
   b6de4:	7fc00000 	.word	0x7fc00000

000b6de8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <os_thread_create+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	685b      	ldr	r3, [r3, #4]
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030248 	.word	0x00030248

000b6df8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <os_thread_yield+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	68db      	ldr	r3, [r3, #12]
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030248 	.word	0x00030248

000b6e08 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <os_mutex_create+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	00030248 	.word	0x00030248

000b6e18 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <os_mutex_lock+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	00030248 	.word	0x00030248

000b6e28 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <os_mutex_unlock+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	00030248 	.word	0x00030248

000b6e38 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <os_mutex_recursive_create+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	00030248 	.word	0x00030248

000b6e48 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <os_thread_exit+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	00030248 	.word	0x00030248

000b6e58 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <HAL_Feature_Set+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	00030234 	.word	0x00030234

000b6e68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <HAL_RNG_GetRandomNumber+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	685b      	ldr	r3, [r3, #4]
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	00030218 	.word	0x00030218

000b6e78 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <HAL_Delay_Milliseconds+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	689b      	ldr	r3, [r3, #8]
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	00030218 	.word	0x00030218

000b6e88 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6e88:	b508      	push	{r3, lr}
   b6e8a:	4b02      	ldr	r3, [pc, #8]	; (b6e94 <HAL_Delay_Microseconds+0xc>)
   b6e8c:	681b      	ldr	r3, [r3, #0]
   b6e8e:	68db      	ldr	r3, [r3, #12]
   b6e90:	9301      	str	r3, [sp, #4]
   b6e92:	bd08      	pop	{r3, pc}
   b6e94:	00030218 	.word	0x00030218

000b6e98 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6e98:	b508      	push	{r3, lr}
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6e9c:	681b      	ldr	r3, [r3, #0]
   b6e9e:	695b      	ldr	r3, [r3, #20]
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	bd08      	pop	{r3, pc}
   b6ea4:	00030218 	.word	0x00030218

000b6ea8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <hal_rtc_time_is_valid+0xc>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6eb0:	9301      	str	r3, [sp, #4]
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	00030218 	.word	0x00030218

000b6eb8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b6eb8:	b508      	push	{r3, lr}
   b6eba:	4b02      	ldr	r3, [pc, #8]	; (b6ec4 <hal_timer_millis+0xc>)
   b6ebc:	681b      	ldr	r3, [r3, #0]
   b6ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6ec0:	9301      	str	r3, [sp, #4]
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	00030218 	.word	0x00030218

000b6ec8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6ec8:	b508      	push	{r3, lr}
   b6eca:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <hal_rtc_get_time+0xc>)
   b6ecc:	681b      	ldr	r3, [r3, #0]
   b6ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6ed0:	9301      	str	r3, [sp, #4]
   b6ed2:	bd08      	pop	{r3, pc}
   b6ed4:	00030218 	.word	0x00030218

000b6ed8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b02      	ldr	r3, [pc, #8]	; (b6ee4 <hal_rtc_set_time+0xc>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b6ee0:	9301      	str	r3, [sp, #4]
   b6ee2:	bd08      	pop	{r3, pc}
   b6ee4:	00030218 	.word	0x00030218

000b6ee8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6ee8:	b508      	push	{r3, lr}
   b6eea:	4b02      	ldr	r3, [pc, #8]	; (b6ef4 <hal_gpio_mode+0xc>)
   b6eec:	681b      	ldr	r3, [r3, #0]
   b6eee:	689b      	ldr	r3, [r3, #8]
   b6ef0:	9301      	str	r3, [sp, #4]
   b6ef2:	bd08      	pop	{r3, pc}
   b6ef4:	0003022c 	.word	0x0003022c

000b6ef8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <hal_gpio_get_mode+0xc>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	68db      	ldr	r3, [r3, #12]
   b6f00:	9301      	str	r3, [sp, #4]
   b6f02:	bd08      	pop	{r3, pc}
   b6f04:	0003022c 	.word	0x0003022c

000b6f08 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6f08:	b508      	push	{r3, lr}
   b6f0a:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <hal_gpio_write+0xc>)
   b6f0c:	681b      	ldr	r3, [r3, #0]
   b6f0e:	691b      	ldr	r3, [r3, #16]
   b6f10:	9301      	str	r3, [sp, #4]
   b6f12:	bd08      	pop	{r3, pc}
   b6f14:	0003022c 	.word	0x0003022c

000b6f18 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6f18:	b508      	push	{r3, lr}
   b6f1a:	4b02      	ldr	r3, [pc, #8]	; (b6f24 <hal_gpio_read+0xc>)
   b6f1c:	681b      	ldr	r3, [r3, #0]
   b6f1e:	695b      	ldr	r3, [r3, #20]
   b6f20:	9301      	str	r3, [sp, #4]
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	0003022c 	.word	0x0003022c

000b6f28 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b02      	ldr	r3, [pc, #8]	; (b6f34 <hal_interrupt_attach+0xc>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	699b      	ldr	r3, [r3, #24]
   b6f30:	9301      	str	r3, [sp, #4]
   b6f32:	bd08      	pop	{r3, pc}
   b6f34:	0003022c 	.word	0x0003022c

000b6f38 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b6f38:	b508      	push	{r3, lr}
   b6f3a:	4b02      	ldr	r3, [pc, #8]	; (b6f44 <hal_interrupt_detach+0xc>)
   b6f3c:	681b      	ldr	r3, [r3, #0]
   b6f3e:	69db      	ldr	r3, [r3, #28]
   b6f40:	9301      	str	r3, [sp, #4]
   b6f42:	bd08      	pop	{r3, pc}
   b6f44:	0003022c 	.word	0x0003022c

000b6f48 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b02      	ldr	r3, [pc, #8]	; (b6f54 <hal_i2c_begin+0xc>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	68db      	ldr	r3, [r3, #12]
   b6f50:	9301      	str	r3, [sp, #4]
   b6f52:	bd08      	pop	{r3, pc}
   b6f54:	00030228 	.word	0x00030228

000b6f58 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <hal_i2c_begin_transmission+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	699b      	ldr	r3, [r3, #24]
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	00030228 	.word	0x00030228

000b6f68 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <hal_i2c_end_transmission+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	69db      	ldr	r3, [r3, #28]
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	00030228 	.word	0x00030228

000b6f78 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <hal_i2c_write+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	6a1b      	ldr	r3, [r3, #32]
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	00030228 	.word	0x00030228

000b6f88 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <hal_i2c_available+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	00030228 	.word	0x00030228

000b6f98 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <hal_i2c_read+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	00030228 	.word	0x00030228

000b6fa8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <hal_i2c_peek+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	00030228 	.word	0x00030228

000b6fb8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <hal_i2c_flush+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	00030228 	.word	0x00030228

000b6fc8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <hal_i2c_is_enabled+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	00030228 	.word	0x00030228

000b6fd8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <hal_i2c_init+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	00030228 	.word	0x00030228

000b6fe8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <hal_i2c_lock+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	00030228 	.word	0x00030228

000b6ff8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <hal_i2c_unlock+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	00030228 	.word	0x00030228

000b7008 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <hal_i2c_request_ex+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	00030228 	.word	0x00030228

000b7018 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <inet_inet_ntop+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	695b      	ldr	r3, [r3, #20]
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	00030264 	.word	0x00030264

000b7028 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <netdb_freeaddrinfo+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	689b      	ldr	r3, [r3, #8]
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	00030268 	.word	0x00030268

000b7038 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <netdb_getaddrinfo+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	68db      	ldr	r3, [r3, #12]
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	00030268 	.word	0x00030268

000b7048 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <hal_spi_init+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	69db      	ldr	r3, [r3, #28]
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	00030230 	.word	0x00030230

000b7058 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b02      	ldr	r3, [pc, #8]	; (b7064 <hal_spi_is_enabled+0xc>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	6a1b      	ldr	r3, [r3, #32]
   b7060:	9301      	str	r3, [sp, #4]
   b7062:	bd08      	pop	{r3, pc}
   b7064:	00030230 	.word	0x00030230

000b7068 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b02      	ldr	r3, [pc, #8]	; (b7074 <hal_usart_write+0xc>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	68db      	ldr	r3, [r3, #12]
   b7070:	9301      	str	r3, [sp, #4]
   b7072:	bd08      	pop	{r3, pc}
   b7074:	0003023c 	.word	0x0003023c

000b7078 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7078:	b508      	push	{r3, lr}
   b707a:	4b02      	ldr	r3, [pc, #8]	; (b7084 <hal_usart_available+0xc>)
   b707c:	681b      	ldr	r3, [r3, #0]
   b707e:	691b      	ldr	r3, [r3, #16]
   b7080:	9301      	str	r3, [sp, #4]
   b7082:	bd08      	pop	{r3, pc}
   b7084:	0003023c 	.word	0x0003023c

000b7088 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7088:	b508      	push	{r3, lr}
   b708a:	4b02      	ldr	r3, [pc, #8]	; (b7094 <hal_usart_read+0xc>)
   b708c:	681b      	ldr	r3, [r3, #0]
   b708e:	695b      	ldr	r3, [r3, #20]
   b7090:	9301      	str	r3, [sp, #4]
   b7092:	bd08      	pop	{r3, pc}
   b7094:	0003023c 	.word	0x0003023c

000b7098 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7098:	b508      	push	{r3, lr}
   b709a:	4b02      	ldr	r3, [pc, #8]	; (b70a4 <hal_usart_peek+0xc>)
   b709c:	681b      	ldr	r3, [r3, #0]
   b709e:	699b      	ldr	r3, [r3, #24]
   b70a0:	9301      	str	r3, [sp, #4]
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	0003023c 	.word	0x0003023c

000b70a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b70a8:	b508      	push	{r3, lr}
   b70aa:	4b02      	ldr	r3, [pc, #8]	; (b70b4 <hal_usart_flush+0xc>)
   b70ac:	681b      	ldr	r3, [r3, #0]
   b70ae:	69db      	ldr	r3, [r3, #28]
   b70b0:	9301      	str	r3, [sp, #4]
   b70b2:	bd08      	pop	{r3, pc}
   b70b4:	0003023c 	.word	0x0003023c

000b70b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b70b8:	b508      	push	{r3, lr}
   b70ba:	4b02      	ldr	r3, [pc, #8]	; (b70c4 <hal_usart_is_enabled+0xc>)
   b70bc:	681b      	ldr	r3, [r3, #0]
   b70be:	6a1b      	ldr	r3, [r3, #32]
   b70c0:	9301      	str	r3, [sp, #4]
   b70c2:	bd08      	pop	{r3, pc}
   b70c4:	0003023c 	.word	0x0003023c

000b70c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b70c8:	b508      	push	{r3, lr}
   b70ca:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <hal_usart_available_data_for_write+0xc>)
   b70cc:	681b      	ldr	r3, [r3, #0]
   b70ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70d0:	9301      	str	r3, [sp, #4]
   b70d2:	bd08      	pop	{r3, pc}
   b70d4:	0003023c 	.word	0x0003023c

000b70d8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <hal_usart_init_ex+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	0003023c 	.word	0x0003023c

000b70e8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <HAL_USB_USART_Init+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	681b      	ldr	r3, [r3, #0]
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	0003024c 	.word	0x0003024c

000b70f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <HAL_USB_USART_Available_Data+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	691b      	ldr	r3, [r3, #16]
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	0003024c 	.word	0x0003024c

000b7108 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	695b      	ldr	r3, [r3, #20]
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	0003024c 	.word	0x0003024c

000b7118 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <HAL_USB_USART_Receive_Data+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	699b      	ldr	r3, [r3, #24]
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	0003024c 	.word	0x0003024c

000b7128 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <HAL_USB_USART_Send_Data+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	69db      	ldr	r3, [r3, #28]
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	0003024c 	.word	0x0003024c

000b7138 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <HAL_USB_USART_Flush_Data+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	6a1b      	ldr	r3, [r3, #32]
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	0003024c 	.word	0x0003024c

000b7148 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <panic_+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	00030260 	.word	0x00030260

000b7158 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <log_message_v+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	00030260 	.word	0x00030260

000b7168 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b03      	ldr	r3, [pc, #12]	; (b7178 <diag_get_source+0x10>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7172:	9301      	str	r3, [sp, #4]
   b7174:	bd08      	pop	{r3, pc}
   b7176:	0000      	.short	0x0000
   b7178:	00030260 	.word	0x00030260

000b717c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <system_mode+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	681b      	ldr	r3, [r3, #0]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	00030220 	.word	0x00030220

000b718c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <set_system_mode+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	685b      	ldr	r3, [r3, #4]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	00030220 	.word	0x00030220

000b719c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <system_delay_ms+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	695b      	ldr	r3, [r3, #20]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	00030220 	.word	0x00030220

000b71ac <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <system_thread_set_state+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	00030220 	.word	0x00030220

000b71bc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <application_thread_current+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	00030220 	.word	0x00030220

000b71cc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <application_thread_invoke+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	00030220 	.word	0x00030220

000b71dc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <system_thread_get_state+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	00030220 	.word	0x00030220

000b71ec <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <system_notify_time_changed+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	00030220 	.word	0x00030220

000b71fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b03      	ldr	r3, [pc, #12]	; (b720c <system_ctrl_set_app_request_handler+0x10>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7206:	9301      	str	r3, [sp, #4]
   b7208:	bd08      	pop	{r3, pc}
   b720a:	0000      	.short	0x0000
   b720c:	00030220 	.word	0x00030220

000b7210 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b03      	ldr	r3, [pc, #12]	; (b7220 <system_ctrl_set_result+0x10>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b721a:	9301      	str	r3, [sp, #4]
   b721c:	bd08      	pop	{r3, pc}
   b721e:	0000      	.short	0x0000
   b7220:	00030220 	.word	0x00030220

000b7224 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b03      	ldr	r3, [pc, #12]	; (b7234 <system_reset+0x10>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b722e:	9301      	str	r3, [sp, #4]
   b7230:	bd08      	pop	{r3, pc}
   b7232:	0000      	.short	0x0000
   b7234:	00030220 	.word	0x00030220

000b7238 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b7238:	b508      	push	{r3, lr}
   b723a:	4b02      	ldr	r3, [pc, #8]	; (b7244 <spark_variable+0xc>)
   b723c:	681b      	ldr	r3, [r3, #0]
   b723e:	681b      	ldr	r3, [r3, #0]
   b7240:	9301      	str	r3, [sp, #4]
   b7242:	bd08      	pop	{r3, pc}
   b7244:	00030244 	.word	0x00030244

000b7248 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b7248:	b508      	push	{r3, lr}
   b724a:	4b02      	ldr	r3, [pc, #8]	; (b7254 <spark_function+0xc>)
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	685b      	ldr	r3, [r3, #4]
   b7250:	9301      	str	r3, [sp, #4]
   b7252:	bd08      	pop	{r3, pc}
   b7254:	00030244 	.word	0x00030244

000b7258 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7258:	b508      	push	{r3, lr}
   b725a:	4b02      	ldr	r3, [pc, #8]	; (b7264 <spark_process+0xc>)
   b725c:	681b      	ldr	r3, [r3, #0]
   b725e:	689b      	ldr	r3, [r3, #8]
   b7260:	9301      	str	r3, [sp, #4]
   b7262:	bd08      	pop	{r3, pc}
   b7264:	00030244 	.word	0x00030244

000b7268 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7268:	b508      	push	{r3, lr}
   b726a:	4b02      	ldr	r3, [pc, #8]	; (b7274 <spark_cloud_flag_connected+0xc>)
   b726c:	681b      	ldr	r3, [r3, #0]
   b726e:	695b      	ldr	r3, [r3, #20]
   b7270:	9301      	str	r3, [sp, #4]
   b7272:	bd08      	pop	{r3, pc}
   b7274:	00030244 	.word	0x00030244

000b7278 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7278:	b508      	push	{r3, lr}
   b727a:	4b02      	ldr	r3, [pc, #8]	; (b7284 <spark_deviceID+0xc>)
   b727c:	681b      	ldr	r3, [r3, #0]
   b727e:	69db      	ldr	r3, [r3, #28]
   b7280:	9301      	str	r3, [sp, #4]
   b7282:	bd08      	pop	{r3, pc}
   b7284:	00030244 	.word	0x00030244

000b7288 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7288:	b508      	push	{r3, lr}
   b728a:	4b02      	ldr	r3, [pc, #8]	; (b7294 <spark_send_event+0xc>)
   b728c:	681b      	ldr	r3, [r3, #0]
   b728e:	6a1b      	ldr	r3, [r3, #32]
   b7290:	9301      	str	r3, [sp, #4]
   b7292:	bd08      	pop	{r3, pc}
   b7294:	00030244 	.word	0x00030244

000b7298 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7298:	b508      	push	{r3, lr}
   b729a:	4b02      	ldr	r3, [pc, #8]	; (b72a4 <spark_subscribe+0xc>)
   b729c:	681b      	ldr	r3, [r3, #0]
   b729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b72a0:	9301      	str	r3, [sp, #4]
   b72a2:	bd08      	pop	{r3, pc}
   b72a4:	00030244 	.word	0x00030244

000b72a8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b72a8:	b508      	push	{r3, lr}
   b72aa:	4b02      	ldr	r3, [pc, #8]	; (b72b4 <spark_sync_time+0xc>)
   b72ac:	681b      	ldr	r3, [r3, #0]
   b72ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b72b0:	9301      	str	r3, [sp, #4]
   b72b2:	bd08      	pop	{r3, pc}
   b72b4:	00030244 	.word	0x00030244

000b72b8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b72b8:	b508      	push	{r3, lr}
   b72ba:	4b02      	ldr	r3, [pc, #8]	; (b72c4 <spark_sync_time_pending+0xc>)
   b72bc:	681b      	ldr	r3, [r3, #0]
   b72be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72c0:	9301      	str	r3, [sp, #4]
   b72c2:	bd08      	pop	{r3, pc}
   b72c4:	00030244 	.word	0x00030244

000b72c8 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b72c8:	b508      	push	{r3, lr}
   b72ca:	4b02      	ldr	r3, [pc, #8]	; (b72d4 <spark_sync_time_last+0xc>)
   b72cc:	681b      	ldr	r3, [r3, #0]
   b72ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b72d0:	9301      	str	r3, [sp, #4]
   b72d2:	bd08      	pop	{r3, pc}
   b72d4:	00030244 	.word	0x00030244

000b72d8 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b72d8:	b508      	push	{r3, lr}
   b72da:	4b02      	ldr	r3, [pc, #8]	; (b72e4 <spark_set_connection_property+0xc>)
   b72dc:	681b      	ldr	r3, [r3, #0]
   b72de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b72e0:	9301      	str	r3, [sp, #4]
   b72e2:	bd08      	pop	{r3, pc}
   b72e4:	00030244 	.word	0x00030244

000b72e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b72e8:	b508      	push	{r3, lr}
   b72ea:	4b02      	ldr	r3, [pc, #8]	; (b72f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b72ec:	681b      	ldr	r3, [r3, #0]
   b72ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b72f0:	9301      	str	r3, [sp, #4]
   b72f2:	bd08      	pop	{r3, pc}
   b72f4:	00030244 	.word	0x00030244

000b72f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b72f8:	b508      	push	{r3, lr}
   b72fa:	4b02      	ldr	r3, [pc, #8]	; (b7304 <network_connect+0xc>)
   b72fc:	681b      	ldr	r3, [r3, #0]
   b72fe:	685b      	ldr	r3, [r3, #4]
   b7300:	9301      	str	r3, [sp, #4]
   b7302:	bd08      	pop	{r3, pc}
   b7304:	00030240 	.word	0x00030240

000b7308 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7308:	b508      	push	{r3, lr}
   b730a:	4b02      	ldr	r3, [pc, #8]	; (b7314 <network_connecting+0xc>)
   b730c:	681b      	ldr	r3, [r3, #0]
   b730e:	689b      	ldr	r3, [r3, #8]
   b7310:	9301      	str	r3, [sp, #4]
   b7312:	bd08      	pop	{r3, pc}
   b7314:	00030240 	.word	0x00030240

000b7318 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7318:	b508      	push	{r3, lr}
   b731a:	4b02      	ldr	r3, [pc, #8]	; (b7324 <network_disconnect+0xc>)
   b731c:	681b      	ldr	r3, [r3, #0]
   b731e:	68db      	ldr	r3, [r3, #12]
   b7320:	9301      	str	r3, [sp, #4]
   b7322:	bd08      	pop	{r3, pc}
   b7324:	00030240 	.word	0x00030240

000b7328 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7328:	b508      	push	{r3, lr}
   b732a:	4b02      	ldr	r3, [pc, #8]	; (b7334 <network_ready+0xc>)
   b732c:	681b      	ldr	r3, [r3, #0]
   b732e:	691b      	ldr	r3, [r3, #16]
   b7330:	9301      	str	r3, [sp, #4]
   b7332:	bd08      	pop	{r3, pc}
   b7334:	00030240 	.word	0x00030240

000b7338 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7338:	b508      	push	{r3, lr}
   b733a:	4b02      	ldr	r3, [pc, #8]	; (b7344 <network_on+0xc>)
   b733c:	681b      	ldr	r3, [r3, #0]
   b733e:	695b      	ldr	r3, [r3, #20]
   b7340:	9301      	str	r3, [sp, #4]
   b7342:	bd08      	pop	{r3, pc}
   b7344:	00030240 	.word	0x00030240

000b7348 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7348:	b508      	push	{r3, lr}
   b734a:	4b02      	ldr	r3, [pc, #8]	; (b7354 <network_off+0xc>)
   b734c:	681b      	ldr	r3, [r3, #0]
   b734e:	699b      	ldr	r3, [r3, #24]
   b7350:	9301      	str	r3, [sp, #4]
   b7352:	bd08      	pop	{r3, pc}
   b7354:	00030240 	.word	0x00030240

000b7358 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7358:	b508      	push	{r3, lr}
   b735a:	4b02      	ldr	r3, [pc, #8]	; (b7364 <network_listen+0xc>)
   b735c:	681b      	ldr	r3, [r3, #0]
   b735e:	69db      	ldr	r3, [r3, #28]
   b7360:	9301      	str	r3, [sp, #4]
   b7362:	bd08      	pop	{r3, pc}
   b7364:	00030240 	.word	0x00030240

000b7368 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7368:	b508      	push	{r3, lr}
   b736a:	4b02      	ldr	r3, [pc, #8]	; (b7374 <network_listening+0xc>)
   b736c:	681b      	ldr	r3, [r3, #0]
   b736e:	6a1b      	ldr	r3, [r3, #32]
   b7370:	9301      	str	r3, [sp, #4]
   b7372:	bd08      	pop	{r3, pc}
   b7374:	00030240 	.word	0x00030240

000b7378 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7378:	b508      	push	{r3, lr}
   b737a:	4b02      	ldr	r3, [pc, #8]	; (b7384 <network_set_listen_timeout+0xc>)
   b737c:	681b      	ldr	r3, [r3, #0]
   b737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7380:	9301      	str	r3, [sp, #4]
   b7382:	bd08      	pop	{r3, pc}
   b7384:	00030240 	.word	0x00030240

000b7388 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7388:	b508      	push	{r3, lr}
   b738a:	4b02      	ldr	r3, [pc, #8]	; (b7394 <network_get_listen_timeout+0xc>)
   b738c:	681b      	ldr	r3, [r3, #0]
   b738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7390:	9301      	str	r3, [sp, #4]
   b7392:	bd08      	pop	{r3, pc}
   b7394:	00030240 	.word	0x00030240

000b7398 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7398:	b508      	push	{r3, lr}
   b739a:	4b02      	ldr	r3, [pc, #8]	; (b73a4 <network_is_on+0xc>)
   b739c:	681b      	ldr	r3, [r3, #0]
   b739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73a0:	9301      	str	r3, [sp, #4]
   b73a2:	bd08      	pop	{r3, pc}
   b73a4:	00030240 	.word	0x00030240

000b73a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b73a8:	b508      	push	{r3, lr}
   b73aa:	4b02      	ldr	r3, [pc, #8]	; (b73b4 <network_is_off+0xc>)
   b73ac:	681b      	ldr	r3, [r3, #0]
   b73ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73b0:	9301      	str	r3, [sp, #4]
   b73b2:	bd08      	pop	{r3, pc}
   b73b4:	00030240 	.word	0x00030240

000b73b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b73b8:	b508      	push	{r3, lr}
   b73ba:	4b02      	ldr	r3, [pc, #8]	; (b73c4 <malloc+0xc>)
   b73bc:	681b      	ldr	r3, [r3, #0]
   b73be:	681b      	ldr	r3, [r3, #0]
   b73c0:	9301      	str	r3, [sp, #4]
   b73c2:	bd08      	pop	{r3, pc}
   b73c4:	0003021c 	.word	0x0003021c

000b73c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b73c8:	b508      	push	{r3, lr}
   b73ca:	4b02      	ldr	r3, [pc, #8]	; (b73d4 <free+0xc>)
   b73cc:	681b      	ldr	r3, [r3, #0]
   b73ce:	685b      	ldr	r3, [r3, #4]
   b73d0:	9301      	str	r3, [sp, #4]
   b73d2:	bd08      	pop	{r3, pc}
   b73d4:	0003021c 	.word	0x0003021c

000b73d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b73d8:	b508      	push	{r3, lr}
   b73da:	4b02      	ldr	r3, [pc, #8]	; (b73e4 <realloc+0xc>)
   b73dc:	681b      	ldr	r3, [r3, #0]
   b73de:	689b      	ldr	r3, [r3, #8]
   b73e0:	9301      	str	r3, [sp, #4]
   b73e2:	bd08      	pop	{r3, pc}
   b73e4:	0003021c 	.word	0x0003021c

000b73e8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b73e8:	b508      	push	{r3, lr}
   b73ea:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <siprintf+0xc>)
   b73ec:	681b      	ldr	r3, [r3, #0]
   b73ee:	691b      	ldr	r3, [r3, #16]
   b73f0:	9301      	str	r3, [sp, #4]
   b73f2:	bd08      	pop	{r3, pc}
   b73f4:	0003021c 	.word	0x0003021c

000b73f8 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b73f8:	b508      	push	{r3, lr}
   b73fa:	4b02      	ldr	r3, [pc, #8]	; (b7404 <snprintf+0xc>)
   b73fc:	681b      	ldr	r3, [r3, #0]
   b73fe:	69db      	ldr	r3, [r3, #28]
   b7400:	9301      	str	r3, [sp, #4]
   b7402:	bd08      	pop	{r3, pc}
   b7404:	0003021c 	.word	0x0003021c

000b7408 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7408:	b508      	push	{r3, lr}
   b740a:	4b02      	ldr	r3, [pc, #8]	; (b7414 <abort+0xc>)
   b740c:	681b      	ldr	r3, [r3, #0]
   b740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7410:	9301      	str	r3, [sp, #4]
   b7412:	bd08      	pop	{r3, pc}
   b7414:	0003021c 	.word	0x0003021c

000b7418 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7418:	b508      	push	{r3, lr}
   b741a:	4b02      	ldr	r3, [pc, #8]	; (b7424 <_malloc_r+0xc>)
   b741c:	681b      	ldr	r3, [r3, #0]
   b741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7420:	9301      	str	r3, [sp, #4]
   b7422:	bd08      	pop	{r3, pc}
   b7424:	0003021c 	.word	0x0003021c

000b7428 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7428:	b508      	push	{r3, lr}
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <__errno+0xc>)
   b742c:	681b      	ldr	r3, [r3, #0]
   b742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7430:	9301      	str	r3, [sp, #4]
   b7432:	bd08      	pop	{r3, pc}
   b7434:	0003021c 	.word	0x0003021c

000b7438 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7438:	b508      	push	{r3, lr}
   b743a:	4b02      	ldr	r3, [pc, #8]	; (b7444 <__assert_func+0xc>)
   b743c:	681b      	ldr	r3, [r3, #0]
   b743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7440:	9301      	str	r3, [sp, #4]
   b7442:	bd08      	pop	{r3, pc}
   b7444:	0003021c 	.word	0x0003021c

000b7448 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7448:	b508      	push	{r3, lr}
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <newlib_impure_ptr_callback+0xc>)
   b744c:	681b      	ldr	r3, [r3, #0]
   b744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7450:	9301      	str	r3, [sp, #4]
   b7452:	bd08      	pop	{r3, pc}
   b7454:	0003021c 	.word	0x0003021c

000b7458 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b7458:	b508      	push	{r3, lr}
   b745a:	4b02      	ldr	r3, [pc, #8]	; (b7464 <strftime+0xc>)
   b745c:	681b      	ldr	r3, [r3, #0]
   b745e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7460:	9301      	str	r3, [sp, #4]
   b7462:	bd08      	pop	{r3, pc}
   b7464:	0003021c 	.word	0x0003021c

000b7468 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <localtime_r+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	0003021c 	.word	0x0003021c

000b7478 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <gmtime_r+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	0003021c 	.word	0x0003021c

000b7488 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <mktime+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	0003021c 	.word	0x0003021c

000b7498 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7498:	2100      	movs	r1, #0
   b749a:	f7ff be7f 	b.w	b719c <system_delay_ms>

000b749e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b749e:	b510      	push	{r4, lr}
      if (_M_empty())
   b74a0:	6883      	ldr	r3, [r0, #8]
   b74a2:	4604      	mov	r4, r0
   b74a4:	b90b      	cbnz	r3, b74aa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b74a6:	f001 facf 	bl	b8a48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74aa:	68c3      	ldr	r3, [r0, #12]
   b74ac:	4798      	blx	r3
      if (_M_manager)
   b74ae:	68a3      	ldr	r3, [r4, #8]
   b74b0:	b11b      	cbz	r3, b74ba <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b74b2:	2203      	movs	r2, #3
   b74b4:	4621      	mov	r1, r4
   b74b6:	4620      	mov	r0, r4
   b74b8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b74ba:	4620      	mov	r0, r4
   b74bc:	2110      	movs	r1, #16
}
   b74be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b74c2:	f7fd bafa 	b.w	b4aba <_ZdlPvj>

000b74c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b74c6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b74c8:	6843      	ldr	r3, [r0, #4]
   b74ca:	3b01      	subs	r3, #1
    {
   b74cc:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b74ce:	6043      	str	r3, [r0, #4]
   b74d0:	b963      	cbnz	r3, b74ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b74d2:	6803      	ldr	r3, [r0, #0]
   b74d4:	689b      	ldr	r3, [r3, #8]
   b74d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b74d8:	68a3      	ldr	r3, [r4, #8]
   b74da:	3b01      	subs	r3, #1
   b74dc:	60a3      	str	r3, [r4, #8]
   b74de:	b92b      	cbnz	r3, b74ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b74e0:	6823      	ldr	r3, [r4, #0]
   b74e2:	4620      	mov	r0, r4
   b74e4:	68db      	ldr	r3, [r3, #12]
    }
   b74e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b74ea:	4718      	bx	r3
    }
   b74ec:	bd10      	pop	{r4, pc}

000b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b74ee:	b510      	push	{r4, lr}
   b74f0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b74f2:	6800      	ldr	r0, [r0, #0]
   b74f4:	b108      	cbz	r0, b74fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b74f6:	f7ff ffe6 	bl	b74c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b74fa:	4620      	mov	r0, r4
   b74fc:	bd10      	pop	{r4, pc}

000b74fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b74fe:	b513      	push	{r0, r1, r4, lr}
   b7500:	460b      	mov	r3, r1
   b7502:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7504:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7508:	466c      	mov	r4, sp
   b750a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b750e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7512:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7516:	e894 0003 	ldmia.w	r4, {r0, r1}
   b751a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b751e:	b002      	add	sp, #8
   b7520:	bd10      	pop	{r4, pc}
	...

000b7524 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7524:	4802      	ldr	r0, [pc, #8]	; (b7530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7526:	2300      	movs	r3, #0
   b7528:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b752a:	f7ff bc85 	b.w	b6e38 <os_mutex_recursive_create>
   b752e:	bf00      	nop
   b7530:	2003e650 	.word	0x2003e650

000b7534 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7534:	2200      	movs	r2, #0
   b7536:	6840      	ldr	r0, [r0, #4]
   b7538:	4611      	mov	r1, r2
   b753a:	f7ff bef5 	b.w	b7328 <network_ready>

000b753e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b753e:	2200      	movs	r2, #0
   b7540:	6840      	ldr	r0, [r0, #4]
   b7542:	4611      	mov	r1, r2
   b7544:	f7ff bf10 	b.w	b7368 <network_listening>

000b7548 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7548:	2200      	movs	r2, #0
   b754a:	6840      	ldr	r0, [r0, #4]
   b754c:	4611      	mov	r1, r2
   b754e:	f7ff bf1b 	b.w	b7388 <network_get_listen_timeout>

000b7552 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7552:	6840      	ldr	r0, [r0, #4]
   b7554:	2200      	movs	r2, #0
   b7556:	f7ff bf0f 	b.w	b7378 <network_set_listen_timeout>

000b755a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b755a:	6840      	ldr	r0, [r0, #4]
   b755c:	2200      	movs	r2, #0
   b755e:	f081 0101 	eor.w	r1, r1, #1
   b7562:	f7ff bef9 	b.w	b7358 <network_listen>

000b7566 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7566:	2300      	movs	r3, #0
   b7568:	6840      	ldr	r0, [r0, #4]
   b756a:	461a      	mov	r2, r3
   b756c:	4619      	mov	r1, r3
   b756e:	f7ff beeb 	b.w	b7348 <network_off>

000b7572 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7572:	2300      	movs	r3, #0
   b7574:	6840      	ldr	r0, [r0, #4]
   b7576:	461a      	mov	r2, r3
   b7578:	4619      	mov	r1, r3
   b757a:	f7ff bedd 	b.w	b7338 <network_on>

000b757e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b757e:	2200      	movs	r2, #0
   b7580:	6840      	ldr	r0, [r0, #4]
   b7582:	4611      	mov	r1, r2
   b7584:	f7ff bec0 	b.w	b7308 <network_connecting>

000b7588 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7588:	6840      	ldr	r0, [r0, #4]
   b758a:	2200      	movs	r2, #0
   b758c:	2102      	movs	r1, #2
   b758e:	f7ff bec3 	b.w	b7318 <network_disconnect>

000b7592 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7592:	2300      	movs	r3, #0
   b7594:	6840      	ldr	r0, [r0, #4]
   b7596:	461a      	mov	r2, r3
   b7598:	f7ff beae 	b.w	b72f8 <network_connect>

000b759c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b759c:	4b08      	ldr	r3, [pc, #32]	; (b75c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b759e:	b510      	push	{r4, lr}
   b75a0:	2428      	movs	r4, #40	; 0x28
   b75a2:	4622      	mov	r2, r4
   b75a4:	4618      	mov	r0, r3
   b75a6:	2100      	movs	r1, #0
   b75a8:	f001 facc 	bl	b8b44 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b75ac:	4b05      	ldr	r3, [pc, #20]	; (b75c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b75ae:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b75b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b75b4:	6042      	str	r2, [r0, #4]
   b75b6:	2204      	movs	r2, #4
   b75b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b75ba:	4a03      	ldr	r2, [pc, #12]	; (b75c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b75bc:	601a      	str	r2, [r3, #0]
   b75be:	bd10      	pop	{r4, pc}
   b75c0:	2003e65c 	.word	0x2003e65c
   b75c4:	2003e654 	.word	0x2003e654
   b75c8:	000bb324 	.word	0x000bb324

000b75cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b75cc:	4770      	bx	lr

000b75ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b75ce:	2000      	movs	r0, #0
   b75d0:	4770      	bx	lr

000b75d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b75d2:	b510      	push	{r4, lr}
   b75d4:	2110      	movs	r1, #16
   b75d6:	4604      	mov	r4, r0
   b75d8:	f7fd fa6f 	bl	b4aba <_ZdlPvj>
   b75dc:	4620      	mov	r0, r4
   b75de:	bd10      	pop	{r4, pc}

000b75e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b75e0:	b508      	push	{r3, lr}
      { delete this; }
   b75e2:	f7ff fff6 	bl	b75d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b75e6:	bd08      	pop	{r3, pc}

000b75e8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b75e8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b75ea:	2200      	movs	r2, #0
   b75ec:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b75f0:	6002      	str	r2, [r0, #0]
   b75f2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b75f4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b75f6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b75f8:	680c      	ldr	r4, [r1, #0]
   b75fa:	8085      	strh	r5, [r0, #4]
   b75fc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b75fe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7600:	bd30      	pop	{r4, r5, pc}

000b7602 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7602:	b510      	push	{r4, lr}
   b7604:	4604      	mov	r4, r0
    free((void*)msg_);
   b7606:	6800      	ldr	r0, [r0, #0]
   b7608:	f7ff fede 	bl	b73c8 <free>
}
   b760c:	4620      	mov	r0, r4
   b760e:	bd10      	pop	{r4, pc}

000b7610 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7610:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7612:	68c4      	ldr	r4, [r0, #12]
   b7614:	b1f4      	cbz	r4, b7654 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b7616:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7618:	2b02      	cmp	r3, #2
   b761a:	d103      	bne.n	b7624 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b761c:	f104 000c 	add.w	r0, r4, #12
   b7620:	f7ff ffef 	bl	b7602 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7624:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7626:	b135      	cbz	r5, b7636 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7628:	4628      	mov	r0, r5
   b762a:	f7ff f82e 	bl	b668a <_ZNSt14_Function_baseD1Ev>
   b762e:	2110      	movs	r1, #16
   b7630:	4628      	mov	r0, r5
   b7632:	f7fd fa42 	bl	b4aba <_ZdlPvj>
   b7636:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7638:	b135      	cbz	r5, b7648 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b763a:	4628      	mov	r0, r5
   b763c:	f7ff f825 	bl	b668a <_ZNSt14_Function_baseD1Ev>
   b7640:	2110      	movs	r1, #16
   b7642:	4628      	mov	r0, r5
   b7644:	f7fd fa39 	bl	b4aba <_ZdlPvj>
   b7648:	4620      	mov	r0, r4
   b764a:	2114      	movs	r1, #20
   b764c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7650:	f7fd ba33 	b.w	b4aba <_ZdlPvj>
   b7654:	bd38      	pop	{r3, r4, r5, pc}

000b7656 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b7656:	b510      	push	{r4, lr}
   b7658:	b088      	sub	sp, #32
   b765a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b765c:	4668      	mov	r0, sp
   b765e:	f000 fd50 	bl	b8102 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b7662:	4669      	mov	r1, sp
   b7664:	a804      	add	r0, sp, #16
   b7666:	f000 fd6f 	bl	b8148 <_ZN6StringC1ERKS_>
   b766a:	a804      	add	r0, sp, #16
   b766c:	47a0      	blx	r4
   b766e:	4604      	mov	r4, r0
   b7670:	a804      	add	r0, sp, #16
   b7672:	f000 fcfb 	bl	b806c <_ZN6StringD1Ev>
    String p(param);
   b7676:	4668      	mov	r0, sp
   b7678:	f000 fcf8 	bl	b806c <_ZN6StringD1Ev>
}
   b767c:	4620      	mov	r0, r4
   b767e:	b008      	add	sp, #32
   b7680:	bd10      	pop	{r4, pc}

000b7682 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b7682:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b7684:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b7686:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b768a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b768c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b768e:	461a      	mov	r2, r3
   b7690:	4669      	mov	r1, sp
   b7692:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b7694:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b7698:	f8ad 4000 	strh.w	r4, [sp]
   b769c:	f7ff fdd4 	bl	b7248 <spark_function>
}
   b76a0:	b004      	add	sp, #16
   b76a2:	bd10      	pop	{r4, pc}

000b76a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b76a4:	680b      	ldr	r3, [r1, #0]
   b76a6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b76a8:	684b      	ldr	r3, [r1, #4]
   b76aa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b76ac:	b113      	cbz	r3, b76b4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b76ae:	685a      	ldr	r2, [r3, #4]
   b76b0:	3201      	adds	r2, #1
   b76b2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b76b4:	4770      	bx	lr

000b76b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b76b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b76b8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b76ba:	4668      	mov	r0, sp
   b76bc:	460d      	mov	r5, r1
   b76be:	f7ff fff1 	bl	b76a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b76c2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b76c4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b76c6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b76c8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b76ca:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b76cc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b76ce:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b76d0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b76d2:	f7ff ff0c 	bl	b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b76d6:	b135      	cbz	r5, b76e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b76d8:	1d28      	adds	r0, r5, #4
   b76da:	f7ff ff08 	bl	b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b76de:	2108      	movs	r1, #8
   b76e0:	4628      	mov	r0, r5
   b76e2:	f7fd f9ea 	bl	b4aba <_ZdlPvj>
        return p;
    }
   b76e6:	4620      	mov	r0, r4
   b76e8:	b003      	add	sp, #12
   b76ea:	bd30      	pop	{r4, r5, pc}

000b76ec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b76ec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b76ee:	b510      	push	{r4, lr}
      if (_M_empty())
   b76f0:	b90a      	cbnz	r2, b76f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b76f2:	f001 f9a9 	bl	b8a48 <_ZSt25__throw_bad_function_callv>
    }
   b76f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b76fa:	68c3      	ldr	r3, [r0, #12]
   b76fc:	4718      	bx	r3

000b76fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b76fe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7700:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7702:	f100 0110 	add.w	r1, r0, #16
   b7706:	f7ff fff1 	bl	b76ec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b770a:	bd08      	pop	{r3, pc}

000b770c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b770c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b770e:	b510      	push	{r4, lr}
      if (_M_empty())
   b7710:	b90a      	cbnz	r2, b7716 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7712:	f001 f999 	bl	b8a48 <_ZSt25__throw_bad_function_callv>
    }
   b7716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b771a:	68c3      	ldr	r3, [r0, #12]
   b771c:	4718      	bx	r3

000b771e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b771e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7720:	6800      	ldr	r0, [r0, #0]
   b7722:	f100 0110 	add.w	r1, r0, #16
   b7726:	f7ff fff1 	bl	b770c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b772a:	bd08      	pop	{r3, pc}

000b772c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b772c:	b538      	push	{r3, r4, r5, lr}
   b772e:	2300      	movs	r3, #0
   b7730:	4604      	mov	r4, r0
   b7732:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7734:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7736:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7738:	f7fd f9bb 	bl	b4ab2 <_Znwj>
   b773c:	b128      	cbz	r0, b774a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b773e:	2301      	movs	r3, #1
   b7740:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7744:	4b02      	ldr	r3, [pc, #8]	; (b7750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7746:	6003      	str	r3, [r0, #0]
   b7748:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b774a:	6020      	str	r0, [r4, #0]
	}
   b774c:	4620      	mov	r0, r4
   b774e:	bd38      	pop	{r3, r4, r5, pc}
   b7750:	000bb360 	.word	0x000bb360

000b7754 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7754:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7756:	2300      	movs	r3, #0
   b7758:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b775a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b775c:	4604      	mov	r4, r0
   b775e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7760:	b12b      	cbz	r3, b776e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7762:	2202      	movs	r2, #2
   b7764:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7766:	68eb      	ldr	r3, [r5, #12]
   b7768:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b776a:	68ab      	ldr	r3, [r5, #8]
   b776c:	60a3      	str	r3, [r4, #8]
    }
   b776e:	4620      	mov	r0, r4
   b7770:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7774:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7776:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7778:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b777a:	4668      	mov	r0, sp
   b777c:	f7ff ff34 	bl	b75e8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7780:	f04f 0302 	mov.w	r3, #2
   b7784:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7788:	2a00      	cmp	r2, #0
   b778a:	d103      	bne.n	b7794 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b778c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7790:	2900      	cmp	r1, #0
   b7792:	d1f7      	bne.n	b7784 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7794:	d125      	bne.n	b77e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7796:	f104 050c 	add.w	r5, r4, #12
   b779a:	4669      	mov	r1, sp
   b779c:	4628      	mov	r0, r5
   b779e:	f7ff ff23 	bl	b75e8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b77a2:	f3bf 8f5b 	dmb	ish
   b77a6:	2301      	movs	r3, #1
   b77a8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b77aa:	2000      	movs	r0, #0
   b77ac:	f104 0308 	add.w	r3, r4, #8
   b77b0:	f3bf 8f5b 	dmb	ish
   b77b4:	e853 6f00 	ldrex	r6, [r3]
   b77b8:	e843 0200 	strex	r2, r0, [r3]
   b77bc:	2a00      	cmp	r2, #0
   b77be:	d1f9      	bne.n	b77b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b77c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b77c4:	b16e      	cbz	r6, b77e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b77c6:	f7ff fcf9 	bl	b71bc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b77ca:	b178      	cbz	r0, b77ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b77cc:	4629      	mov	r1, r5
   b77ce:	4630      	mov	r0, r6
   b77d0:	f7ff ff8c 	bl	b76ec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b77d4:	4630      	mov	r0, r6
   b77d6:	f7fe ff58 	bl	b668a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b77da:	2110      	movs	r1, #16
   b77dc:	4630      	mov	r0, r6
   b77de:	f7fd f96c 	bl	b4aba <_ZdlPvj>
        p_->setError(std::move(error));
   b77e2:	4668      	mov	r0, sp
   b77e4:	f7ff ff0d 	bl	b7602 <_ZN8particle5ErrorD1Ev>
    }
   b77e8:	b009      	add	sp, #36	; 0x24
   b77ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b77ec:	4631      	mov	r1, r6
   b77ee:	a802      	add	r0, sp, #8
   b77f0:	f7ff ffb0 	bl	b7754 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b77f4:	68e0      	ldr	r0, [r4, #12]
   b77f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b77fa:	b108      	cbz	r0, b7800 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b77fc:	f001 f9e0 	bl	b8bc0 <strdup>
        type_(type) {
   b7800:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7802:	2010      	movs	r0, #16
   b7804:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7808:	f7fd f953 	bl	b4ab2 <_Znwj>
   b780c:	4605      	mov	r5, r0
   b780e:	b1e8      	cbz	r0, b784c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7810:	2700      	movs	r7, #0
   b7812:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7814:	2018      	movs	r0, #24
   b7816:	f7fd f94c 	bl	b4ab2 <_Znwj>
   b781a:	4604      	mov	r4, r0
   b781c:	b188      	cbz	r0, b7842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b781e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7820:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7822:	a802      	add	r0, sp, #8
   b7824:	f7ff fe6b 	bl	b74fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7828:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b782a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b782c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b782e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7830:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7832:	a906      	add	r1, sp, #24
   b7834:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7836:	60e3      	str	r3, [r4, #12]
   b7838:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b783c:	9205      	str	r2, [sp, #20]
   b783e:	f7ff fed3 	bl	b75e8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7842:	4b08      	ldr	r3, [pc, #32]	; (b7864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7844:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7846:	4b08      	ldr	r3, [pc, #32]	; (b7868 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7848:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b784a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b784c:	a806      	add	r0, sp, #24
   b784e:	f7ff fed8 	bl	b7602 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7852:	a802      	add	r0, sp, #8
   b7854:	f7fe ff19 	bl	b668a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7858:	2200      	movs	r2, #0
   b785a:	4629      	mov	r1, r5
   b785c:	4803      	ldr	r0, [pc, #12]	; (b786c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b785e:	f7ff fcb5 	bl	b71cc <application_thread_invoke>
   b7862:	e7b7      	b.n	b77d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7864:	000b76ff 	.word	0x000b76ff
   b7868:	000b7981 	.word	0x000b7981
   b786c:	000b749f 	.word	0x000b749f

000b7870 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7874:	b08b      	sub	sp, #44	; 0x2c
   b7876:	4605      	mov	r5, r0
   b7878:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b787c:	460f      	mov	r7, r1
   b787e:	4690      	mov	r8, r2
   b7880:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7882:	f7ff fcf1 	bl	b7268 <spark_cloud_flag_connected>
   b7886:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7888:	4683      	mov	fp, r0
   b788a:	bb38      	cbnz	r0, b78dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b788c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7890:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7892:	a905      	add	r1, sp, #20
   b7894:	4630      	mov	r0, r6
   b7896:	f8ad 3018 	strh.w	r3, [sp, #24]
   b789a:	f7ff fea5 	bl	b75e8 <_ZN8particle5ErrorC1EOS0_>
   b789e:	2014      	movs	r0, #20
   b78a0:	f7fd f907 	bl	b4ab2 <_Znwj>
   b78a4:	4604      	mov	r4, r0
   b78a6:	b148      	cbz	r0, b78bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b78a8:	2302      	movs	r3, #2
   b78aa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b78ac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b78ae:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b78b2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b78b4:	4631      	mov	r1, r6
   b78b6:	300c      	adds	r0, #12
   b78b8:	f7ff fe96 	bl	b75e8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b78bc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b78be:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b78c0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b78c4:	f7ff ff32 	bl	b772c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b78c8:	4630      	mov	r0, r6
   b78ca:	f7ff fe9a 	bl	b7602 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b78ce:	a805      	add	r0, sp, #20
   b78d0:	f7ff fe97 	bl	b7602 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b78d4:	4628      	mov	r0, r5
   b78d6:	b00b      	add	sp, #44	; 0x2c
   b78d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b78dc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b78de:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b78e0:	2014      	movs	r0, #20
   b78e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b78e6:	9307      	str	r3, [sp, #28]
   b78e8:	f7fd f8e3 	bl	b4ab2 <_Znwj>
   b78ec:	4601      	mov	r1, r0
   b78ee:	b118      	cbz	r0, b78f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b78f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b78f4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b78f6:	7044      	strb	r4, [r0, #1]
   b78f8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b78fa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b78fc:	f7ff ff16 	bl	b772c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7900:	4b1e      	ldr	r3, [pc, #120]	; (b797c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7902:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7904:	2008      	movs	r0, #8
   b7906:	f7fd f8d4 	bl	b4ab2 <_Znwj>
   b790a:	4604      	mov	r4, r0
   b790c:	b110      	cbz	r0, b7914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b790e:	a903      	add	r1, sp, #12
   b7910:	f7ff fec8 	bl	b76a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7914:	9600      	str	r6, [sp, #0]
   b7916:	fa5f f38a 	uxtb.w	r3, sl
   b791a:	464a      	mov	r2, r9
   b791c:	4641      	mov	r1, r8
   b791e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7920:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7922:	f7ff fcb1 	bl	b7288 <spark_send_event>
   b7926:	b9b8      	cbnz	r0, b7958 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7928:	9b03      	ldr	r3, [sp, #12]
   b792a:	785b      	ldrb	r3, [r3, #1]
   b792c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7930:	b993      	cbnz	r3, b7958 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7932:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7936:	a905      	add	r1, sp, #20
   b7938:	a803      	add	r0, sp, #12
   b793a:	9205      	str	r2, [sp, #20]
   b793c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7940:	f7ff ff18 	bl	b7774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7944:	a805      	add	r0, sp, #20
   b7946:	f7ff fe5c 	bl	b7602 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b794a:	a805      	add	r0, sp, #20
   b794c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b794e:	f7ff feb2 	bl	b76b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b7952:	a806      	add	r0, sp, #24
   b7954:	f7ff fdcb 	bl	b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7958:	a903      	add	r1, sp, #12
   b795a:	a805      	add	r0, sp, #20
   b795c:	f7ff fea2 	bl	b76a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7960:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7962:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7964:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b7966:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b7968:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b796a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b796c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b796e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b7970:	f7ff fdbd 	bl	b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7974:	a804      	add	r0, sp, #16
   b7976:	f7ff fdba 	bl	b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b797a:	e7ab      	b.n	b78d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b797c:	000b79fd 	.word	0x000b79fd

000b7980 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b7980:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7984:	4605      	mov	r5, r0
	switch (__op)
   b7986:	d103      	bne.n	b7990 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7988:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b798a:	6003      	str	r3, [r0, #0]
      }
   b798c:	2000      	movs	r0, #0
   b798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7990:	2a02      	cmp	r2, #2
   b7992:	d010      	beq.n	b79b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b7994:	2a03      	cmp	r2, #3
   b7996:	d1f9      	bne.n	b798c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7998:	6804      	ldr	r4, [r0, #0]
   b799a:	2c00      	cmp	r4, #0
   b799c:	d0f6      	beq.n	b798c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b799e:	f104 0010 	add.w	r0, r4, #16
   b79a2:	f7ff fe2e 	bl	b7602 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b79a6:	4620      	mov	r0, r4
   b79a8:	f7fe fe6f 	bl	b668a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b79ac:	2118      	movs	r1, #24
   b79ae:	4620      	mov	r0, r4
   b79b0:	f7fd f883 	bl	b4aba <_ZdlPvj>
   b79b4:	e7ea      	b.n	b798c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b79b6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b79b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b79ba:	f7fd f87a 	bl	b4ab2 <_Znwj>
   b79be:	4604      	mov	r4, r0
   b79c0:	b150      	cbz	r0, b79d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b79c2:	4631      	mov	r1, r6
   b79c4:	f7ff fec6 	bl	b7754 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b79c8:	6930      	ldr	r0, [r6, #16]
   b79ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b79ce:	b108      	cbz	r0, b79d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b79d0:	f001 f8f6 	bl	b8bc0 <strdup>
        type_(type) {
   b79d4:	6120      	str	r0, [r4, #16]
   b79d6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b79d8:	602c      	str	r4, [r5, #0]
	}
   b79da:	e7d7      	b.n	b798c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b79dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b79dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b79de:	2300      	movs	r3, #0
   b79e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b79e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b79e4:	4604      	mov	r4, r0
   b79e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b79e8:	b12b      	cbz	r3, b79f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b79ea:	2202      	movs	r2, #2
   b79ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b79ee:	68eb      	ldr	r3, [r5, #12]
   b79f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b79f2:	68ab      	ldr	r3, [r5, #8]
   b79f4:	60a3      	str	r3, [r4, #8]
    }
   b79f6:	4620      	mov	r0, r4
   b79f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b79fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b79fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b79fe:	b089      	sub	sp, #36	; 0x24
   b7a00:	4604      	mov	r4, r0
   b7a02:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7a04:	a801      	add	r0, sp, #4
   b7a06:	4611      	mov	r1, r2
   b7a08:	f7ff fe55 	bl	b76b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7a0c:	b1a4      	cbz	r4, b7a38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7a0e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7a10:	b11d      	cbz	r5, b7a1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b7a12:	4628      	mov	r0, r5
   b7a14:	f001 f8d4 	bl	b8bc0 <strdup>
   b7a18:	4605      	mov	r5, r0
   b7a1a:	a801      	add	r0, sp, #4
   b7a1c:	a903      	add	r1, sp, #12
        type_(type) {
   b7a1e:	9503      	str	r5, [sp, #12]
   b7a20:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7a24:	f7ff fea6 	bl	b7774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7a28:	a803      	add	r0, sp, #12
   b7a2a:	f7ff fdea 	bl	b7602 <_ZN8particle5ErrorD1Ev>
   b7a2e:	a802      	add	r0, sp, #8
   b7a30:	f7ff fd5d 	bl	b74ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a34:	b009      	add	sp, #36	; 0x24
   b7a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7a38:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7a3a:	2301      	movs	r3, #1
   b7a3c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7a40:	2a00      	cmp	r2, #0
   b7a42:	d103      	bne.n	b7a4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7a44:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7a48:	2900      	cmp	r1, #0
   b7a4a:	d1f7      	bne.n	b7a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7a4c:	d1ef      	bne.n	b7a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7a4e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7a50:	f3bf 8f5b 	dmb	ish
   b7a54:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7a56:	1d2b      	adds	r3, r5, #4
   b7a58:	f3bf 8f5b 	dmb	ish
   b7a5c:	e853 6f00 	ldrex	r6, [r3]
   b7a60:	e843 4200 	strex	r2, r4, [r3]
   b7a64:	2a00      	cmp	r2, #0
   b7a66:	d1f9      	bne.n	b7a5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b7a68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7a6c:	2e00      	cmp	r6, #0
   b7a6e:	d0de      	beq.n	b7a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b7a70:	4620      	mov	r0, r4
   b7a72:	f7ff fba3 	bl	b71bc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7a76:	4607      	mov	r7, r0
   b7a78:	b160      	cbz	r0, b7a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7a7a:	f105 010c 	add.w	r1, r5, #12
   b7a7e:	4630      	mov	r0, r6
   b7a80:	f7ff fe44 	bl	b770c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b7a84:	4630      	mov	r0, r6
   b7a86:	f7fe fe00 	bl	b668a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7a8a:	2110      	movs	r1, #16
   b7a8c:	4630      	mov	r0, r6
   b7a8e:	f7fd f814 	bl	b4aba <_ZdlPvj>
   b7a92:	e7cc      	b.n	b7a2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7a94:	4631      	mov	r1, r6
   b7a96:	a803      	add	r0, sp, #12
   b7a98:	f7ff ffa0 	bl	b79dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7a9c:	7b2b      	ldrb	r3, [r5, #12]
   b7a9e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7aa2:	2010      	movs	r0, #16
   b7aa4:	f7fd f805 	bl	b4ab2 <_Znwj>
   b7aa8:	4605      	mov	r5, r0
   b7aaa:	b1d0      	cbz	r0, b7ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7aac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7aae:	2014      	movs	r0, #20
   b7ab0:	f7fc ffff 	bl	b4ab2 <_Znwj>
   b7ab4:	4604      	mov	r4, r0
   b7ab6:	b178      	cbz	r0, b7ad8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7ab8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7aba:	4601      	mov	r1, r0
   b7abc:	a803      	add	r0, sp, #12
   b7abe:	f7ff fd1e 	bl	b74fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ac2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7ac4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ac6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ac8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7aca:	9205      	str	r2, [sp, #20]
   b7acc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ace:	60e3      	str	r3, [r4, #12]
   b7ad0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b7ad4:	9206      	str	r2, [sp, #24]
   b7ad6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7ad8:	4b06      	ldr	r3, [pc, #24]	; (b7af4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7ada:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7adc:	4b06      	ldr	r3, [pc, #24]	; (b7af8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7ade:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7ae0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b7ae2:	a803      	add	r0, sp, #12
   b7ae4:	f7fe fdd1 	bl	b668a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7ae8:	2200      	movs	r2, #0
   b7aea:	4629      	mov	r1, r5
   b7aec:	4803      	ldr	r0, [pc, #12]	; (b7afc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7aee:	f7ff fb6d 	bl	b71cc <application_thread_invoke>
   b7af2:	e7c7      	b.n	b7a84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7af4:	000b771f 	.word	0x000b771f
   b7af8:	000b7b01 	.word	0x000b7b01
   b7afc:	000b749f 	.word	0x000b749f

000b7b00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7b00:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7b02:	b570      	push	{r4, r5, r6, lr}
   b7b04:	4604      	mov	r4, r0
	switch (__op)
   b7b06:	d103      	bne.n	b7b10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7b08:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7b0a:	6003      	str	r3, [r0, #0]
      }
   b7b0c:	2000      	movs	r0, #0
   b7b0e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7b10:	2a02      	cmp	r2, #2
   b7b12:	d00c      	beq.n	b7b2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7b14:	2a03      	cmp	r2, #3
   b7b16:	d1f9      	bne.n	b7b0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7b18:	6804      	ldr	r4, [r0, #0]
   b7b1a:	2c00      	cmp	r4, #0
   b7b1c:	d0f6      	beq.n	b7b0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7b1e:	4620      	mov	r0, r4
   b7b20:	f7fe fdb3 	bl	b668a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7b24:	2114      	movs	r1, #20
   b7b26:	4620      	mov	r0, r4
   b7b28:	f7fc ffc7 	bl	b4aba <_ZdlPvj>
   b7b2c:	e7ee      	b.n	b7b0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7b2e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7b30:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7b32:	f7fc ffbe 	bl	b4ab2 <_Znwj>
   b7b36:	4605      	mov	r5, r0
   b7b38:	b120      	cbz	r0, b7b44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7b3a:	4631      	mov	r1, r6
   b7b3c:	f7ff ff4e 	bl	b79dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7b40:	7c33      	ldrb	r3, [r6, #16]
   b7b42:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7b44:	6025      	str	r5, [r4, #0]
	}
   b7b46:	e7e1      	b.n	b7b0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7b48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7b48:	2200      	movs	r2, #0
   b7b4a:	6840      	ldr	r0, [r0, #4]
   b7b4c:	4611      	mov	r1, r2
   b7b4e:	f7ff bc0b 	b.w	b7368 <network_listening>

000b7b52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7b52:	2200      	movs	r2, #0
   b7b54:	6840      	ldr	r0, [r0, #4]
   b7b56:	4611      	mov	r1, r2
   b7b58:	f7ff bc16 	b.w	b7388 <network_get_listen_timeout>

000b7b5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7b5c:	6840      	ldr	r0, [r0, #4]
   b7b5e:	2200      	movs	r2, #0
   b7b60:	f7ff bc0a 	b.w	b7378 <network_set_listen_timeout>

000b7b64 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7b64:	6840      	ldr	r0, [r0, #4]
   b7b66:	2200      	movs	r2, #0
   b7b68:	f081 0101 	eor.w	r1, r1, #1
   b7b6c:	f7ff bbf4 	b.w	b7358 <network_listen>

000b7b70 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7b70:	2300      	movs	r3, #0
   b7b72:	6840      	ldr	r0, [r0, #4]
   b7b74:	461a      	mov	r2, r3
   b7b76:	4619      	mov	r1, r3
   b7b78:	f7ff bbe6 	b.w	b7348 <network_off>

000b7b7c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7b7c:	2300      	movs	r3, #0
   b7b7e:	6840      	ldr	r0, [r0, #4]
   b7b80:	461a      	mov	r2, r3
   b7b82:	4619      	mov	r1, r3
   b7b84:	f7ff bbd8 	b.w	b7338 <network_on>

000b7b88 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7b88:	2200      	movs	r2, #0
   b7b8a:	6840      	ldr	r0, [r0, #4]
   b7b8c:	4611      	mov	r1, r2
   b7b8e:	f7ff bbcb 	b.w	b7328 <network_ready>

000b7b92 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7b92:	2200      	movs	r2, #0
   b7b94:	6840      	ldr	r0, [r0, #4]
   b7b96:	4611      	mov	r1, r2
   b7b98:	f7ff bbb6 	b.w	b7308 <network_connecting>

000b7b9c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7b9c:	6840      	ldr	r0, [r0, #4]
   b7b9e:	2200      	movs	r2, #0
   b7ba0:	2102      	movs	r1, #2
   b7ba2:	f7ff bbb9 	b.w	b7318 <network_disconnect>

000b7ba6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7ba6:	2300      	movs	r3, #0
   b7ba8:	6840      	ldr	r0, [r0, #4]
   b7baa:	461a      	mov	r2, r3
   b7bac:	f7ff bba4 	b.w	b72f8 <network_connect>

000b7bb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7bb0:	4b02      	ldr	r3, [pc, #8]	; (b7bbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7bb2:	2203      	movs	r2, #3
   b7bb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7bb6:	4a02      	ldr	r2, [pc, #8]	; (b7bc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7bb8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7bba:	4770      	bx	lr
   b7bbc:	2003e684 	.word	0x2003e684
   b7bc0:	000bb37c 	.word	0x000bb37c

000b7bc4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7bc4:	4770      	bx	lr

000b7bc6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bc8:	4606      	mov	r6, r0
   b7bca:	4615      	mov	r5, r2
   b7bcc:	460c      	mov	r4, r1
   b7bce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7bd0:	42bc      	cmp	r4, r7
   b7bd2:	d006      	beq.n	b7be2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7bd4:	6833      	ldr	r3, [r6, #0]
   b7bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7bda:	689b      	ldr	r3, [r3, #8]
   b7bdc:	4630      	mov	r0, r6
   b7bde:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7be0:	e7f6      	b.n	b7bd0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7be2:	4628      	mov	r0, r5
   b7be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7be6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7be6:	7c00      	ldrb	r0, [r0, #16]
   b7be8:	2200      	movs	r2, #0
   b7bea:	f7ff b9c5 	b.w	b6f78 <hal_i2c_write>

000b7bee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7bee:	7c00      	ldrb	r0, [r0, #16]
   b7bf0:	2100      	movs	r1, #0
   b7bf2:	f7ff b9c9 	b.w	b6f88 <hal_i2c_available>

000b7bf6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7bf6:	7c00      	ldrb	r0, [r0, #16]
   b7bf8:	2100      	movs	r1, #0
   b7bfa:	f7ff b9cd 	b.w	b6f98 <hal_i2c_read>

000b7bfe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7bfe:	7c00      	ldrb	r0, [r0, #16]
   b7c00:	2100      	movs	r1, #0
   b7c02:	f7ff b9d1 	b.w	b6fa8 <hal_i2c_peek>

000b7c06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7c06:	7c00      	ldrb	r0, [r0, #16]
   b7c08:	2100      	movs	r1, #0
   b7c0a:	f7ff b9d5 	b.w	b6fb8 <hal_i2c_flush>

000b7c0e <_ZN7TwoWireD0Ev>:
   b7c0e:	b510      	push	{r4, lr}
   b7c10:	2114      	movs	r1, #20
   b7c12:	4604      	mov	r4, r0
   b7c14:	f7fc ff51 	bl	b4aba <_ZdlPvj>
   b7c18:	4620      	mov	r0, r4
   b7c1a:	bd10      	pop	{r4, pc}

000b7c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7c1c:	b538      	push	{r3, r4, r5, lr}
   b7c1e:	4604      	mov	r4, r0
   b7c20:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c26:	2200      	movs	r2, #0
   b7c28:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7c2c:	4b09      	ldr	r3, [pc, #36]	; (b7c54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7c2e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7c30:	4608      	mov	r0, r1
   b7c32:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7c34:	4629      	mov	r1, r5
   b7c36:	f7ff f9cf 	bl	b6fd8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7c3a:	30bf      	adds	r0, #191	; 0xbf
   b7c3c:	d108      	bne.n	b7c50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7c3e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7c40:	07db      	lsls	r3, r3, #31
   b7c42:	d505      	bpl.n	b7c50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7c44:	6868      	ldr	r0, [r5, #4]
   b7c46:	f7ff fbbf 	bl	b73c8 <free>
    free(conf.tx_buffer);
   b7c4a:	68e8      	ldr	r0, [r5, #12]
   b7c4c:	f7ff fbbc 	bl	b73c8 <free>
}
   b7c50:	4620      	mov	r0, r4
   b7c52:	bd38      	pop	{r3, r4, r5, pc}
   b7c54:	000bb3b8 	.word	0x000bb3b8

000b7c58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7c58:	2300      	movs	r3, #0
   b7c5a:	7c00      	ldrb	r0, [r0, #16]
   b7c5c:	461a      	mov	r2, r3
   b7c5e:	4619      	mov	r1, r3
   b7c60:	f7ff b972 	b.w	b6f48 <hal_i2c_begin>

000b7c64 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7c64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7c66:	2200      	movs	r2, #0
   b7c68:	2314      	movs	r3, #20
   b7c6a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7c6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7c72:	780b      	ldrb	r3, [r1, #0]
   b7c74:	f88d 3008 	strb.w	r3, [sp, #8]
   b7c78:	684b      	ldr	r3, [r1, #4]
   b7c7a:	9303      	str	r3, [sp, #12]
   b7c7c:	68cb      	ldr	r3, [r1, #12]
   b7c7e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7c80:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7c82:	7a0b      	ldrb	r3, [r1, #8]
   b7c84:	9305      	str	r3, [sp, #20]
   b7c86:	a901      	add	r1, sp, #4
   b7c88:	f7ff f9be 	bl	b7008 <hal_i2c_request_ex>
}
   b7c8c:	b007      	add	sp, #28
   b7c8e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7c92 <_ZN7TwoWire11requestFromEhjh>:
{
   b7c92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7c94:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7c96:	f88d 1000 	strb.w	r1, [sp]
   b7c9a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7c9e:	9103      	str	r1, [sp, #12]
   b7ca0:	bf18      	it	ne
   b7ca2:	2301      	movne	r3, #1
   b7ca4:	4669      	mov	r1, sp
    size_ = size;
   b7ca6:	9201      	str	r2, [sp, #4]
   b7ca8:	f88d 3008 	strb.w	r3, [sp, #8]
   b7cac:	f7ff ffda 	bl	b7c64 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7cb0:	b005      	add	sp, #20
   b7cb2:	f85d fb04 	ldr.w	pc, [sp], #4

000b7cb6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7cb6:	2301      	movs	r3, #1
   b7cb8:	f7ff bfeb 	b.w	b7c92 <_ZN7TwoWire11requestFromEhjh>

000b7cbc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7cbc:	7c00      	ldrb	r0, [r0, #16]
   b7cbe:	2200      	movs	r2, #0
   b7cc0:	f7ff b94a 	b.w	b6f58 <hal_i2c_begin_transmission>

000b7cc4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7cc4:	b2c9      	uxtb	r1, r1
   b7cc6:	f7ff bff9 	b.w	b7cbc <_ZN7TwoWire17beginTransmissionEh>

000b7cca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7cca:	7c00      	ldrb	r0, [r0, #16]
   b7ccc:	2200      	movs	r2, #0
   b7cce:	f7ff b94b 	b.w	b6f68 <hal_i2c_end_transmission>

000b7cd2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7cd2:	2101      	movs	r1, #1
   b7cd4:	f7ff bff9 	b.w	b7cca <_ZN7TwoWire15endTransmissionEh>

000b7cd8 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7cd8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7cda:	2100      	movs	r1, #0
   b7cdc:	7c00      	ldrb	r0, [r0, #16]
   b7cde:	f7ff f983 	bl	b6fe8 <hal_i2c_lock>
}
   b7ce2:	fab0 f080 	clz	r0, r0
   b7ce6:	0940      	lsrs	r0, r0, #5
   b7ce8:	bd08      	pop	{r3, pc}

000b7cea <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b7cea:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7cec:	2100      	movs	r1, #0
   b7cee:	7c00      	ldrb	r0, [r0, #16]
   b7cf0:	f7ff f982 	bl	b6ff8 <hal_i2c_unlock>
}
   b7cf4:	fab0 f080 	clz	r0, r0
   b7cf8:	0940      	lsrs	r0, r0, #5
   b7cfa:	bd08      	pop	{r3, pc}

000b7cfc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b7cfc:	4700      	bx	r0
	...

000b7d00 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b7d00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b7d04:	2400      	movs	r4, #0
{
   b7d06:	461d      	mov	r5, r3
   b7d08:	460f      	mov	r7, r1
   b7d0a:	4690      	mov	r8, r2
   b7d0c:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b7d0e:	f7ff f913 	bl	b6f38 <hal_interrupt_detach>
  if (priority >= 0) {
   b7d12:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7d14:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b7d18:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7d1c:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b7d20:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b7d24:	bfa2      	ittt	ge
   b7d26:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b7d2a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b7d2e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7d30:	4907      	ldr	r1, [pc, #28]	; (b7d50 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b7d32:	9400      	str	r4, [sp, #0]
   b7d34:	4643      	mov	r3, r8
   b7d36:	463a      	mov	r2, r7
   b7d38:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b7d3a:	bfa8      	it	ge
   b7d3c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7d40:	f7ff f8f2 	bl	b6f28 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b7d44:	fab0 f080 	clz	r0, r0
   b7d48:	0940      	lsrs	r0, r0, #5
   b7d4a:	b004      	add	sp, #16
   b7d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7d50:	000b7cfd 	.word	0x000b7cfd

000b7d54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7d54:	4770      	bx	lr

000b7d56 <_ZN9IPAddressD0Ev>:
   b7d56:	b510      	push	{r4, lr}
   b7d58:	2118      	movs	r1, #24
   b7d5a:	4604      	mov	r4, r0
   b7d5c:	f7fc fead 	bl	b4aba <_ZdlPvj>
   b7d60:	4620      	mov	r0, r4
   b7d62:	bd10      	pop	{r4, pc}

000b7d64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7d64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7d66:	7d03      	ldrb	r3, [r0, #20]
   b7d68:	2b06      	cmp	r3, #6
{
   b7d6a:	b08d      	sub	sp, #52	; 0x34
   b7d6c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d6e:	f100 0704 	add.w	r7, r0, #4
   b7d72:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7d76:	d012      	beq.n	b7d9e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7d78:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7d7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7d80:	220a      	movs	r2, #10
   b7d82:	4630      	mov	r0, r6
   b7d84:	f000 f943 	bl	b800e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7d88:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7d8a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7d8c:	d019      	beq.n	b7dc2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7d8e:	2c00      	cmp	r4, #0
   b7d90:	d0f4      	beq.n	b7d7c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7d92:	212e      	movs	r1, #46	; 0x2e
   b7d94:	4630      	mov	r0, r6
   b7d96:	f000 f937 	bl	b8008 <_ZN5Print5printEc>
   b7d9a:	4404      	add	r4, r0
   b7d9c:	e7ee      	b.n	b7d7c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7d9e:	232f      	movs	r3, #47	; 0x2f
   b7da0:	466a      	mov	r2, sp
   b7da2:	4639      	mov	r1, r7
   b7da4:	200a      	movs	r0, #10
		buf[0] = 0;
   b7da6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7daa:	f7ff f935 	bl	b7018 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7dae:	4668      	mov	r0, sp
   b7db0:	f7fc fe24 	bl	b49fc <strlen>
   b7db4:	6833      	ldr	r3, [r6, #0]
   b7db6:	4602      	mov	r2, r0
   b7db8:	68db      	ldr	r3, [r3, #12]
   b7dba:	4669      	mov	r1, sp
   b7dbc:	4630      	mov	r0, r6
   b7dbe:	4798      	blx	r3
   b7dc0:	4604      	mov	r4, r0
    }
    return n;
}
   b7dc2:	4620      	mov	r0, r4
   b7dc4:	b00d      	add	sp, #52	; 0x34
   b7dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7dc8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7dc8:	b510      	push	{r4, lr}
   b7dca:	4b05      	ldr	r3, [pc, #20]	; (b7de0 <_ZN9IPAddressC1Ev+0x18>)
   b7dcc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7dce:	2211      	movs	r2, #17
   b7dd0:	f840 3b04 	str.w	r3, [r0], #4
   b7dd4:	2100      	movs	r1, #0
   b7dd6:	f000 feb5 	bl	b8b44 <memset>
}
   b7dda:	4620      	mov	r0, r4
   b7ddc:	bd10      	pop	{r4, pc}
   b7dde:	bf00      	nop
   b7de0:	000bb3e0 	.word	0x000bb3e0

000b7de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7de4:	4603      	mov	r3, r0
   b7de6:	4a07      	ldr	r2, [pc, #28]	; (b7e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7de8:	b510      	push	{r4, lr}
   b7dea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7dee:	f101 0210 	add.w	r2, r1, #16
   b7df2:	f851 4b04 	ldr.w	r4, [r1], #4
   b7df6:	f843 4b04 	str.w	r4, [r3], #4
   b7dfa:	4291      	cmp	r1, r2
   b7dfc:	d1f9      	bne.n	b7df2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7dfe:	780a      	ldrb	r2, [r1, #0]
   b7e00:	701a      	strb	r2, [r3, #0]
}
   b7e02:	bd10      	pop	{r4, pc}
   b7e04:	000bb3e0 	.word	0x000bb3e0

000b7e08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7e08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7e0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7e0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7e12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7e16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7e1a:	2304      	movs	r3, #4
   b7e1c:	6041      	str	r1, [r0, #4]
   b7e1e:	7503      	strb	r3, [r0, #20]
}
   b7e20:	bd10      	pop	{r4, pc}
	...

000b7e24 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7e24:	b507      	push	{r0, r1, r2, lr}
   b7e26:	4b06      	ldr	r3, [pc, #24]	; (b7e40 <_ZN9IPAddressC1EPKh+0x1c>)
   b7e28:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7e2a:	78cb      	ldrb	r3, [r1, #3]
   b7e2c:	9300      	str	r3, [sp, #0]
   b7e2e:	788b      	ldrb	r3, [r1, #2]
   b7e30:	784a      	ldrb	r2, [r1, #1]
   b7e32:	7809      	ldrb	r1, [r1, #0]
   b7e34:	f7ff ffe8 	bl	b7e08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7e38:	b003      	add	sp, #12
   b7e3a:	f85d fb04 	ldr.w	pc, [sp], #4
   b7e3e:	bf00      	nop
   b7e40:	000bb3e0 	.word	0x000bb3e0

000b7e44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7e44:	4b01      	ldr	r3, [pc, #4]	; (b7e4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7e46:	4a02      	ldr	r2, [pc, #8]	; (b7e50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7e48:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7e4a:	4770      	bx	lr
   b7e4c:	2003e68c 	.word	0x2003e68c
   b7e50:	000bb3ec 	.word	0x000bb3ec

000b7e54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7e54:	2300      	movs	r3, #0
   b7e56:	6840      	ldr	r0, [r0, #4]
   b7e58:	461a      	mov	r2, r3
   b7e5a:	f7ff ba4d 	b.w	b72f8 <network_connect>

000b7e5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7e5e:	6840      	ldr	r0, [r0, #4]
   b7e60:	2200      	movs	r2, #0
   b7e62:	2102      	movs	r1, #2
   b7e64:	f7ff ba58 	b.w	b7318 <network_disconnect>

000b7e68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7e68:	2200      	movs	r2, #0
   b7e6a:	6840      	ldr	r0, [r0, #4]
   b7e6c:	4611      	mov	r1, r2
   b7e6e:	f7ff ba4b 	b.w	b7308 <network_connecting>

000b7e72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7e72:	2200      	movs	r2, #0
   b7e74:	6840      	ldr	r0, [r0, #4]
   b7e76:	4611      	mov	r1, r2
   b7e78:	f7ff ba56 	b.w	b7328 <network_ready>

000b7e7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7e7c:	2300      	movs	r3, #0
   b7e7e:	6840      	ldr	r0, [r0, #4]
   b7e80:	461a      	mov	r2, r3
   b7e82:	4619      	mov	r1, r3
   b7e84:	f7ff ba58 	b.w	b7338 <network_on>

000b7e88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7e88:	2300      	movs	r3, #0
   b7e8a:	6840      	ldr	r0, [r0, #4]
   b7e8c:	461a      	mov	r2, r3
   b7e8e:	4619      	mov	r1, r3
   b7e90:	f7ff ba5a 	b.w	b7348 <network_off>

000b7e94 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7e94:	6840      	ldr	r0, [r0, #4]
   b7e96:	2100      	movs	r1, #0
   b7e98:	f7ff ba7e 	b.w	b7398 <network_is_on>

000b7e9c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7e9c:	6840      	ldr	r0, [r0, #4]
   b7e9e:	2100      	movs	r1, #0
   b7ea0:	f7ff ba82 	b.w	b73a8 <network_is_off>

000b7ea4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7ea4:	6840      	ldr	r0, [r0, #4]
   b7ea6:	2200      	movs	r2, #0
   b7ea8:	f081 0101 	eor.w	r1, r1, #1
   b7eac:	f7ff ba54 	b.w	b7358 <network_listen>

000b7eb0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7eb0:	6840      	ldr	r0, [r0, #4]
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	f7ff ba60 	b.w	b7378 <network_set_listen_timeout>

000b7eb8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7eb8:	2200      	movs	r2, #0
   b7eba:	6840      	ldr	r0, [r0, #4]
   b7ebc:	4611      	mov	r1, r2
   b7ebe:	f7ff ba63 	b.w	b7388 <network_get_listen_timeout>

000b7ec2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7ec2:	2200      	movs	r2, #0
   b7ec4:	6840      	ldr	r0, [r0, #4]
   b7ec6:	4611      	mov	r1, r2
   b7ec8:	f7ff ba4e 	b.w	b7368 <network_listening>

000b7ecc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ed0:	b095      	sub	sp, #84	; 0x54
   b7ed2:	4614      	mov	r4, r2
   b7ed4:	460d      	mov	r5, r1
   b7ed6:	4607      	mov	r7, r0
    IPAddress addr;
   b7ed8:	f7ff ff76 	bl	b7dc8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7edc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7ede:	221c      	movs	r2, #28
   b7ee0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7ee2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7ee4:	f000 fe2e 	bl	b8b44 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7ee8:	2340      	movs	r3, #64	; 0x40
   b7eea:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7eec:	4620      	mov	r0, r4
   b7eee:	466b      	mov	r3, sp
   b7ef0:	aa0c      	add	r2, sp, #48	; 0x30
   b7ef2:	2100      	movs	r1, #0
   b7ef4:	f7ff f8a0 	bl	b7038 <netdb_getaddrinfo>
    if (!r) {
   b7ef8:	4604      	mov	r4, r0
   b7efa:	2800      	cmp	r0, #0
   b7efc:	d14b      	bne.n	b7f96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7efe:	4602      	mov	r2, r0
   b7f00:	2101      	movs	r1, #1
   b7f02:	6868      	ldr	r0, [r5, #4]
   b7f04:	f7ff fa10 	bl	b7328 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f08:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7f0a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f0c:	4622      	mov	r2, r4
   b7f0e:	6868      	ldr	r0, [r5, #4]
   b7f10:	f7ff fa0a 	bl	b7328 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f14:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7f16:	4681      	mov	r9, r0
        bool ok = false;
   b7f18:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f1a:	2e00      	cmp	r6, #0
   b7f1c:	d03b      	beq.n	b7f96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7f1e:	2900      	cmp	r1, #0
   b7f20:	d139      	bne.n	b7f96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7f22:	6873      	ldr	r3, [r6, #4]
   b7f24:	2b02      	cmp	r3, #2
   b7f26:	d003      	beq.n	b7f30 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7f28:	2b0a      	cmp	r3, #10
   b7f2a:	d011      	beq.n	b7f50 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7f2c:	69f6      	ldr	r6, [r6, #28]
   b7f2e:	e7f4      	b.n	b7f1a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7f30:	f1b8 0f00 	cmp.w	r8, #0
   b7f34:	d0fa      	beq.n	b7f2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7f36:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7f38:	a806      	add	r0, sp, #24
   b7f3a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7f3c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7f3e:	f7ff ff71 	bl	b7e24 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f44:	1d3c      	adds	r4, r7, #4
   b7f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f48:	682b      	ldr	r3, [r5, #0]
   b7f4a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7f4c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7f4e:	e7ed      	b.n	b7f2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7f50:	f1b9 0f00 	cmp.w	r9, #0
   b7f54:	d0ea      	beq.n	b7f2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7f56:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7f58:	2210      	movs	r2, #16
   b7f5a:	a801      	add	r0, sp, #4
   b7f5c:	f000 fdf2 	bl	b8b44 <memset>
                    a.v = 6;
   b7f60:	2306      	movs	r3, #6
   b7f62:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7f66:	ad01      	add	r5, sp, #4
   b7f68:	f104 0308 	add.w	r3, r4, #8
   b7f6c:	3418      	adds	r4, #24
   b7f6e:	6818      	ldr	r0, [r3, #0]
   b7f70:	6859      	ldr	r1, [r3, #4]
   b7f72:	462a      	mov	r2, r5
   b7f74:	c203      	stmia	r2!, {r0, r1}
   b7f76:	3308      	adds	r3, #8
   b7f78:	42a3      	cmp	r3, r4
   b7f7a:	4615      	mov	r5, r2
   b7f7c:	d1f7      	bne.n	b7f6e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7f7e:	a901      	add	r1, sp, #4
   b7f80:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7f82:	ad07      	add	r5, sp, #28
   b7f84:	f7ff ff2e 	bl	b7de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f8a:	1d3c      	adds	r4, r7, #4
   b7f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f8e:	682b      	ldr	r3, [r5, #0]
   b7f90:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7f92:	4649      	mov	r1, r9
   b7f94:	e7ca      	b.n	b7f2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7f96:	9800      	ldr	r0, [sp, #0]
   b7f98:	f7ff f846 	bl	b7028 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7f9c:	4638      	mov	r0, r7
   b7f9e:	b015      	add	sp, #84	; 0x54
   b7fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7fa4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7fa4:	4b02      	ldr	r3, [pc, #8]	; (b7fb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7fa6:	4a03      	ldr	r2, [pc, #12]	; (b7fb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7fa8:	601a      	str	r2, [r3, #0]
   b7faa:	2200      	movs	r2, #0
   b7fac:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7fae:	4770      	bx	lr
   b7fb0:	2003e690 	.word	0x2003e690
   b7fb4:	000bb3f8 	.word	0x000bb3f8

000b7fb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fba:	4606      	mov	r6, r0
   b7fbc:	460d      	mov	r5, r1
  size_t n = 0;
   b7fbe:	188f      	adds	r7, r1, r2
   b7fc0:	2400      	movs	r4, #0
  while (size--) {
   b7fc2:	42bd      	cmp	r5, r7
   b7fc4:	d00c      	beq.n	b7fe0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7fc6:	6833      	ldr	r3, [r6, #0]
   b7fc8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7fcc:	689b      	ldr	r3, [r3, #8]
   b7fce:	4630      	mov	r0, r6
   b7fd0:	4798      	blx	r3
     if (chunk>=0)
   b7fd2:	1e03      	subs	r3, r0, #0
   b7fd4:	db01      	blt.n	b7fda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7fd6:	441c      	add	r4, r3
  while (size--) {
   b7fd8:	e7f3      	b.n	b7fc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7fda:	2c00      	cmp	r4, #0
   b7fdc:	bf08      	it	eq
   b7fde:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7fe4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7fe4:	b513      	push	{r0, r1, r4, lr}
   b7fe6:	4604      	mov	r4, r0
    }
   b7fe8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7fea:	b159      	cbz	r1, b8004 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7fec:	9101      	str	r1, [sp, #4]
   b7fee:	f7fc fd05 	bl	b49fc <strlen>
   b7ff2:	6823      	ldr	r3, [r4, #0]
   b7ff4:	9901      	ldr	r1, [sp, #4]
   b7ff6:	68db      	ldr	r3, [r3, #12]
   b7ff8:	4602      	mov	r2, r0
   b7ffa:	4620      	mov	r0, r4
    }
   b7ffc:	b002      	add	sp, #8
   b7ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8002:	4718      	bx	r3
    }
   b8004:	b002      	add	sp, #8
   b8006:	bd10      	pop	{r4, pc}

000b8008 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8008:	6803      	ldr	r3, [r0, #0]
   b800a:	689b      	ldr	r3, [r3, #8]
   b800c:	4718      	bx	r3

000b800e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b800e:	b530      	push	{r4, r5, lr}
   b8010:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8012:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8014:	2a01      	cmp	r2, #1
  *str = '\0';
   b8016:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b801a:	bf98      	it	ls
   b801c:	220a      	movls	r2, #10
   b801e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8020:	460d      	mov	r5, r1
   b8022:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8026:	fb01 5312 	mls	r3, r1, r2, r5
   b802a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b802e:	2b09      	cmp	r3, #9
   b8030:	bf94      	ite	ls
   b8032:	3330      	addls	r3, #48	; 0x30
   b8034:	3337      	addhi	r3, #55	; 0x37
   b8036:	b2db      	uxtb	r3, r3
  } while(n);
   b8038:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b803a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b803e:	d9ef      	bls.n	b8020 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8040:	4621      	mov	r1, r4
   b8042:	f7ff ffcf 	bl	b7fe4 <_ZN5Print5writeEPKc>
}
   b8046:	b00b      	add	sp, #44	; 0x2c
   b8048:	bd30      	pop	{r4, r5, pc}
	...

000b804c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b804c:	4b01      	ldr	r3, [pc, #4]	; (b8054 <_GLOBAL__sub_I_RGB+0x8>)
   b804e:	2200      	movs	r2, #0
   b8050:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8052:	4770      	bx	lr
   b8054:	2003e698 	.word	0x2003e698

000b8058 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8058:	b510      	push	{r4, lr}
   b805a:	4604      	mov	r4, r0
   b805c:	4608      	mov	r0, r1
{
    _spi = spi;
   b805e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8060:	f7fe fff2 	bl	b7048 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8064:	2300      	movs	r3, #0
   b8066:	6063      	str	r3, [r4, #4]
}
   b8068:	4620      	mov	r0, r4
   b806a:	bd10      	pop	{r4, pc}

000b806c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b806c:	b510      	push	{r4, lr}
   b806e:	4604      	mov	r4, r0
{
	free(buffer);
   b8070:	6800      	ldr	r0, [r0, #0]
   b8072:	f7ff f9a9 	bl	b73c8 <free>
}
   b8076:	4620      	mov	r0, r4
   b8078:	bd10      	pop	{r4, pc}

000b807a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b807a:	b510      	push	{r4, lr}
   b807c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b807e:	6800      	ldr	r0, [r0, #0]
   b8080:	b108      	cbz	r0, b8086 <_ZN6String10invalidateEv+0xc>
   b8082:	f7ff f9a1 	bl	b73c8 <free>
	buffer = NULL;
   b8086:	2300      	movs	r3, #0
	capacity = len = 0;
   b8088:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b808c:	6023      	str	r3, [r4, #0]
}
   b808e:	bd10      	pop	{r4, pc}

000b8090 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8090:	b538      	push	{r3, r4, r5, lr}
   b8092:	4604      	mov	r4, r0
   b8094:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8096:	6800      	ldr	r0, [r0, #0]
   b8098:	3101      	adds	r1, #1
   b809a:	f7ff f99d 	bl	b73d8 <realloc>
	if (newbuffer) {
   b809e:	b110      	cbz	r0, b80a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b80a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b80a4:	2001      	movs	r0, #1
	}
	return 0;
}
   b80a6:	bd38      	pop	{r3, r4, r5, pc}

000b80a8 <_ZN6String7reserveEj>:
{
   b80a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b80aa:	6803      	ldr	r3, [r0, #0]
{
   b80ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b80ae:	b123      	cbz	r3, b80ba <_ZN6String7reserveEj+0x12>
   b80b0:	6843      	ldr	r3, [r0, #4]
   b80b2:	428b      	cmp	r3, r1
   b80b4:	d301      	bcc.n	b80ba <_ZN6String7reserveEj+0x12>
   b80b6:	2001      	movs	r0, #1
}
   b80b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b80ba:	4620      	mov	r0, r4
   b80bc:	f7ff ffe8 	bl	b8090 <_ZN6String12changeBufferEj>
   b80c0:	2800      	cmp	r0, #0
   b80c2:	d0f9      	beq.n	b80b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b80c4:	68a3      	ldr	r3, [r4, #8]
   b80c6:	2b00      	cmp	r3, #0
   b80c8:	d1f5      	bne.n	b80b6 <_ZN6String7reserveEj+0xe>
   b80ca:	6822      	ldr	r2, [r4, #0]
   b80cc:	7013      	strb	r3, [r2, #0]
   b80ce:	e7f2      	b.n	b80b6 <_ZN6String7reserveEj+0xe>

000b80d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b80d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b80d4:	4611      	mov	r1, r2
   b80d6:	9201      	str	r2, [sp, #4]
{
   b80d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b80da:	f7ff ffe5 	bl	b80a8 <_ZN6String7reserveEj>
   b80de:	9a01      	ldr	r2, [sp, #4]
   b80e0:	b928      	cbnz	r0, b80ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b80e2:	4620      	mov	r0, r4
   b80e4:	f7ff ffc9 	bl	b807a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b80e8:	4620      	mov	r0, r4
   b80ea:	b003      	add	sp, #12
   b80ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   b80ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b80f0:	4629      	mov	r1, r5
   b80f2:	6820      	ldr	r0, [r4, #0]
   b80f4:	f000 fcfe 	bl	b8af4 <memcpy>
	buffer[len] = 0;
   b80f8:	6822      	ldr	r2, [r4, #0]
   b80fa:	68a3      	ldr	r3, [r4, #8]
   b80fc:	2100      	movs	r1, #0
   b80fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8100:	e7f2      	b.n	b80e8 <_ZN6String4copyEPKcj+0x18>

000b8102 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8102:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8104:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8106:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b810a:	4604      	mov	r4, r0
	len = 0;
   b810c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b810e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8110:	b141      	cbz	r1, b8124 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8112:	4608      	mov	r0, r1
   b8114:	9101      	str	r1, [sp, #4]
   b8116:	f7fc fc71 	bl	b49fc <strlen>
   b811a:	9901      	ldr	r1, [sp, #4]
   b811c:	4602      	mov	r2, r0
   b811e:	4620      	mov	r0, r4
   b8120:	f7ff ffd6 	bl	b80d0 <_ZN6String4copyEPKcj>
}
   b8124:	4620      	mov	r0, r4
   b8126:	b002      	add	sp, #8
   b8128:	bd10      	pop	{r4, pc}

000b812a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b812a:	4288      	cmp	r0, r1
{
   b812c:	b510      	push	{r4, lr}
   b812e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8130:	d005      	beq.n	b813e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8132:	680b      	ldr	r3, [r1, #0]
   b8134:	b12b      	cbz	r3, b8142 <_ZN6StringaSERKS_+0x18>
   b8136:	688a      	ldr	r2, [r1, #8]
   b8138:	4619      	mov	r1, r3
   b813a:	f7ff ffc9 	bl	b80d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b813e:	4620      	mov	r0, r4
   b8140:	bd10      	pop	{r4, pc}
	else invalidate();
   b8142:	f7ff ff9a 	bl	b807a <_ZN6String10invalidateEv>
   b8146:	e7fa      	b.n	b813e <_ZN6StringaSERKS_+0x14>

000b8148 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8148:	b510      	push	{r4, lr}
	buffer = NULL;
   b814a:	2300      	movs	r3, #0
String::String(const String &value)
   b814c:	4604      	mov	r4, r0
	capacity = 0;
   b814e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8152:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8154:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8156:	f7ff ffe8 	bl	b812a <_ZN6StringaSERKS_>
}
   b815a:	4620      	mov	r0, r4
   b815c:	bd10      	pop	{r4, pc}

000b815e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b815e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8160:	6882      	ldr	r2, [r0, #8]
   b8162:	b93a      	cbnz	r2, b8174 <_ZNK6String6equalsEPKc+0x16>
   b8164:	b121      	cbz	r1, b8170 <_ZNK6String6equalsEPKc+0x12>
   b8166:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8168:	fab0 f080 	clz	r0, r0
   b816c:	0940      	lsrs	r0, r0, #5
   b816e:	e000      	b.n	b8172 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8170:	2001      	movs	r0, #1
}
   b8172:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8174:	6800      	ldr	r0, [r0, #0]
   b8176:	b909      	cbnz	r1, b817c <_ZNK6String6equalsEPKc+0x1e>
   b8178:	7800      	ldrb	r0, [r0, #0]
   b817a:	e7f5      	b.n	b8168 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b817c:	f7fc fc34 	bl	b49e8 <strcmp>
   b8180:	e7f2      	b.n	b8168 <_ZNK6String6equalsEPKc+0xa>

000b8182 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b8182:	b558      	push	{r3, r4, r6, lr}
   b8184:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b8186:	b12a      	cbz	r2, b8194 <_ZNK6String8getBytesEPhjj+0x12>
   b8188:	b121      	cbz	r1, b8194 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b818a:	6884      	ldr	r4, [r0, #8]
   b818c:	42a3      	cmp	r3, r4
   b818e:	d302      	bcc.n	b8196 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b8190:	2300      	movs	r3, #0
   b8192:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b8194:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b8196:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b8198:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b819a:	6801      	ldr	r1, [r0, #0]
   b819c:	4294      	cmp	r4, r2
   b819e:	bf28      	it	cs
   b81a0:	4614      	movcs	r4, r2
   b81a2:	4419      	add	r1, r3
   b81a4:	4622      	mov	r2, r4
   b81a6:	4630      	mov	r0, r6
   b81a8:	f000 fd3b 	bl	b8c22 <strncpy>
	buf[n] = 0;
   b81ac:	2300      	movs	r3, #0
   b81ae:	5533      	strb	r3, [r6, r4]
   b81b0:	e7f0      	b.n	b8194 <_ZNK6String8getBytesEPhjj+0x12>
	...

000b81b4 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b81b4:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b81b6:	6800      	ldr	r0, [r0, #0]
   b81b8:	b140      	cbz	r0, b81cc <_ZNK6String7toFloatEv+0x18>
   b81ba:	f000 fc75 	bl	b8aa8 <atof>
   b81be:	ec51 0b10 	vmov	r0, r1, d0
   b81c2:	f7fc fba3 	bl	b490c <__aeabi_d2f>
   b81c6:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b81ca:	bd08      	pop	{r3, pc}
	return 0;
   b81cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; b81d4 <_ZNK6String7toFloatEv+0x20>
   b81d0:	e7fb      	b.n	b81ca <_ZNK6String7toFloatEv+0x16>
   b81d2:	bf00      	nop
   b81d4:	00000000 	.word	0x00000000

000b81d8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b81d8:	b507      	push	{r0, r1, r2, lr}
   b81da:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b81dc:	2100      	movs	r1, #0
{
   b81de:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b81e0:	9100      	str	r1, [sp, #0]
   b81e2:	2001      	movs	r0, #1
   b81e4:	218c      	movs	r1, #140	; 0x8c
   b81e6:	f7ff f81d 	bl	b7224 <system_reset>
}
   b81ea:	b003      	add	sp, #12
   b81ec:	f85d fb04 	ldr.w	pc, [sp], #4

000b81f0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b81f0:	4601      	mov	r1, r0
    reset(0, flags);
   b81f2:	2000      	movs	r0, #0
   b81f4:	f7ff bff0 	b.w	b81d8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b81f8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b81f8:	2000      	movs	r0, #0
   b81fa:	f7ff bff9 	b.w	b81f0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b8200 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8200:	4b05      	ldr	r3, [pc, #20]	; (b8218 <_GLOBAL__sub_I_System+0x18>)
   b8202:	2202      	movs	r2, #2
   b8204:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8206:	4b05      	ldr	r3, [pc, #20]	; (b821c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8208:	4a05      	ldr	r2, [pc, #20]	; (b8220 <_GLOBAL__sub_I_System+0x20>)
   b820a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b820c:	2000      	movs	r0, #0
   b820e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8212:	f7fe bfbb 	b.w	b718c <set_system_mode>
   b8216:	bf00      	nop
   b8218:	2003e6b4 	.word	0x2003e6b4
   b821c:	2003e6a8 	.word	0x2003e6a8
   b8220:	ffff0000 	.word	0xffff0000

000b8224 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b8228:	4a15      	ldr	r2, [pc, #84]	; (b8280 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b822a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b828c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b822e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8232:	1980      	adds	r0, r0, r6
   b8234:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b8238:	4b12      	ldr	r3, [pc, #72]	; (b8284 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b823a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b823e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8242:	1986      	adds	r6, r0, r6
   b8244:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8248:	42bb      	cmp	r3, r7
   b824a:	bf08      	it	eq
   b824c:	42b2      	cmpeq	r2, r6
{
   b824e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8250:	d013      	beq.n	b827a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8252:	a903      	add	r1, sp, #12
   b8254:	4668      	mov	r0, sp
   b8256:	e9cd 6700 	strd	r6, r7, [sp]
   b825a:	f7ff f905 	bl	b7468 <localtime_r>
	calendar_time.tm_year += 1900;
   b825e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8260:	4d09      	ldr	r5, [pc, #36]	; (b8288 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8262:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8266:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b8268:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b826a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b826c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b826e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8272:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8276:	6823      	ldr	r3, [r4, #0]
   b8278:	602b      	str	r3, [r5, #0]
    }
}
   b827a:	b00c      	add	sp, #48	; 0x30
   b827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8280:	2003e6f0 	.word	0x2003e6f0
   b8284:	2003e6e8 	.word	0x2003e6e8
   b8288:	2003e6c0 	.word	0x2003e6c0
   b828c:	2003e6f8 	.word	0x2003e6f8

000b8290 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b8290:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8292:	2000      	movs	r0, #0
   b8294:	f7ff f810 	bl	b72b8 <spark_sync_time_pending>
   b8298:	b128      	cbz	r0, b82a6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b829a:	f7fe ffe5 	bl	b7268 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b829e:	f080 0001 	eor.w	r0, r0, #1
   b82a2:	b2c0      	uxtb	r0, r0
    }
   b82a4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b82a6:	2001      	movs	r0, #1
   b82a8:	e7fc      	b.n	b82a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b82aa <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b82aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b82ac:	4602      	mov	r2, r0
   b82ae:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b82b0:	4668      	mov	r0, sp
    struct timeval tv = {
   b82b2:	2100      	movs	r1, #0
    };
   b82b4:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b82b8:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b82bc:	f7fe fe0c 	bl	b6ed8 <hal_rtc_set_time>
   b82c0:	4602      	mov	r2, r0
   b82c2:	b910      	cbnz	r0, b82ca <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b82c4:	4601      	mov	r1, r0
   b82c6:	f7fe ff91 	bl	b71ec <system_notify_time_changed>
    }
}
   b82ca:	b005      	add	sp, #20
   b82cc:	f85d fb04 	ldr.w	pc, [sp], #4

000b82d0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b82d0:	b530      	push	{r4, r5, lr}
   b82d2:	b093      	sub	sp, #76	; 0x4c
   b82d4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b82d8:	4b19      	ldr	r3, [pc, #100]	; (b8340 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b82da:	4604      	mov	r4, r0
    t += time_zone_cache;
   b82dc:	e9d3 1000 	ldrd	r1, r0, [r3]
   b82e0:	9b01      	ldr	r3, [sp, #4]
   b82e2:	1852      	adds	r2, r2, r1
   b82e4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b82e8:	4816      	ldr	r0, [pc, #88]	; (b8344 <_ZN9TimeClass7timeStrEx+0x74>)
   b82ea:	e9d0 1000 	ldrd	r1, r0, [r0]
   b82ee:	1852      	adds	r2, r2, r1
   b82f0:	eb43 0300 	adc.w	r3, r3, r0
   b82f4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b82f8:	2224      	movs	r2, #36	; 0x24
   b82fa:	eb0d 0002 	add.w	r0, sp, r2
   b82fe:	2100      	movs	r1, #0
   b8300:	f000 fc20 	bl	b8b44 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8304:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b8306:	a909      	add	r1, sp, #36	; 0x24
   b8308:	4668      	mov	r0, sp
   b830a:	f7ff f8ad 	bl	b7468 <localtime_r>
    char ascstr[26] = {};
   b830e:	2216      	movs	r2, #22
   b8310:	4629      	mov	r1, r5
   b8312:	a803      	add	r0, sp, #12
   b8314:	9502      	str	r5, [sp, #8]
   b8316:	f000 fc15 	bl	b8b44 <memset>
    asctime_r(&calendar_time, ascstr);
   b831a:	a902      	add	r1, sp, #8
   b831c:	a809      	add	r0, sp, #36	; 0x24
   b831e:	f000 fb97 	bl	b8a50 <asctime_r>
    int len = strlen(ascstr);
   b8322:	a802      	add	r0, sp, #8
   b8324:	f7fc fb6a 	bl	b49fc <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8328:	ab12      	add	r3, sp, #72	; 0x48
   b832a:	4418      	add	r0, r3
    return String(ascstr);
   b832c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b832e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8332:	4620      	mov	r0, r4
   b8334:	f7ff fee5 	bl	b8102 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8338:	4620      	mov	r0, r4
   b833a:	b013      	add	sp, #76	; 0x4c
   b833c:	bd30      	pop	{r4, r5, pc}
   b833e:	bf00      	nop
   b8340:	2003e6f0 	.word	0x2003e6f0
   b8344:	2003e6e8 	.word	0x2003e6e8

000b8348 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b8348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b834c:	b0a4      	sub	sp, #144	; 0x90
   b834e:	4607      	mov	r7, r0
   b8350:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b8352:	a814      	add	r0, sp, #80	; 0x50
{
   b8354:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b8356:	223f      	movs	r2, #63	; 0x3f
{
   b8358:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b835a:	f000 fc62 	bl	b8c22 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b835e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8360:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b8362:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b8366:	f7fc fb49 	bl	b49fc <strlen>
   b836a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b836c:	bb4c      	cbnz	r4, b83c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b836e:	4929      	ldr	r1, [pc, #164]	; (b8414 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b8370:	a803      	add	r0, sp, #12
   b8372:	f000 fc1d 	bl	b8bb0 <strcpy>
   b8376:	ac14      	add	r4, sp, #80	; 0x50
{
   b8378:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b837a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   b837e:	45b1      	cmp	r9, r6
   b8380:	d934      	bls.n	b83ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b8382:	7823      	ldrb	r3, [r4, #0]
   b8384:	2b25      	cmp	r3, #37	; 0x25
   b8386:	f106 0a01 	add.w	sl, r6, #1
   b838a:	d117      	bne.n	b83bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b838c:	7863      	ldrb	r3, [r4, #1]
   b838e:	2b7a      	cmp	r3, #122	; 0x7a
   b8390:	d114      	bne.n	b83bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b8392:	a803      	add	r0, sp, #12
   b8394:	f7fc fb32 	bl	b49fc <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b8398:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b839a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b839c:	1830      	adds	r0, r6, r0
   b839e:	4418      	add	r0, r3
   b83a0:	eba9 0206 	sub.w	r2, r9, r6
   b83a4:	1ca1      	adds	r1, r4, #2
   b83a6:	f000 fba5 	bl	b8af4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b83aa:	462a      	mov	r2, r5
   b83ac:	a903      	add	r1, sp, #12
   b83ae:	4620      	mov	r0, r4
   b83b0:	f000 fba0 	bl	b8af4 <memcpy>
            len = strlen(format_str);
   b83b4:	a814      	add	r0, sp, #80	; 0x50
   b83b6:	f7fc fb21 	bl	b49fc <strlen>
   b83ba:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b83bc:	3401      	adds	r4, #1
   b83be:	4656      	mov	r6, sl
   b83c0:	e7db      	b.n	b837a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b83c2:	233c      	movs	r3, #60	; 0x3c
   b83c4:	fb94 f2f3 	sdiv	r2, r4, r3
   b83c8:	2a00      	cmp	r2, #0
   b83ca:	bfb8      	it	lt
   b83cc:	4252      	neglt	r2, r2
   b83ce:	fbb2 f1f3 	udiv	r1, r2, r3
   b83d2:	fb03 2211 	mls	r2, r3, r1, r2
   b83d6:	9200      	str	r2, [sp, #0]
   b83d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b83dc:	4a0e      	ldr	r2, [pc, #56]	; (b8418 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b83de:	fb94 f3f3 	sdiv	r3, r4, r3
   b83e2:	2110      	movs	r1, #16
   b83e4:	a803      	add	r0, sp, #12
   b83e6:	f7ff f807 	bl	b73f8 <snprintf>
   b83ea:	e7c4      	b.n	b8376 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b83ec:	2100      	movs	r1, #0
   b83ee:	222e      	movs	r2, #46	; 0x2e
   b83f0:	a808      	add	r0, sp, #32
   b83f2:	9107      	str	r1, [sp, #28]
   b83f4:	f000 fba6 	bl	b8b44 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b83f8:	4643      	mov	r3, r8
   b83fa:	aa14      	add	r2, sp, #80	; 0x50
   b83fc:	2132      	movs	r1, #50	; 0x32
   b83fe:	a807      	add	r0, sp, #28
   b8400:	f7ff f82a 	bl	b7458 <strftime>
    return String(buf);
   b8404:	a907      	add	r1, sp, #28
   b8406:	4638      	mov	r0, r7
   b8408:	f7ff fe7b 	bl	b8102 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b840c:	4638      	mov	r0, r7
   b840e:	b024      	add	sp, #144	; 0x90
   b8410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8414:	000bb42c 	.word	0x000bb42c
   b8418:	000bb42e 	.word	0x000bb42e

000b841c <_ZN9TimeClass6formatExPKc>:
{
   b841c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b841e:	b08d      	sub	sp, #52	; 0x34
   b8420:	e9cd 2300 	strd	r2, r3, [sp]
   b8424:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b8426:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b8428:	b915      	cbnz	r5, b8430 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b842a:	4b19      	ldr	r3, [pc, #100]	; (b8490 <_ZN9TimeClass6formatExPKc+0x74>)
   b842c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b842e:	b12d      	cbz	r5, b843c <_ZN9TimeClass6formatExPKc+0x20>
   b8430:	4b18      	ldr	r3, [pc, #96]	; (b8494 <_ZN9TimeClass6formatExPKc+0x78>)
   b8432:	4628      	mov	r0, r5
   b8434:	6819      	ldr	r1, [r3, #0]
   b8436:	f7fc fad7 	bl	b49e8 <strcmp>
   b843a:	b938      	cbnz	r0, b844c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b843c:	e9dd 2300 	ldrd	r2, r3, [sp]
   b8440:	4620      	mov	r0, r4
   b8442:	f7ff ff45 	bl	b82d0 <_ZN9TimeClass7timeStrEx>
}
   b8446:	4620      	mov	r0, r4
   b8448:	b00d      	add	sp, #52	; 0x34
   b844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b844c:	4e12      	ldr	r6, [pc, #72]	; (b8498 <_ZN9TimeClass6formatExPKc+0x7c>)
   b844e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b8450:	4f12      	ldr	r7, [pc, #72]	; (b849c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b8452:	e9d6 3200 	ldrd	r3, r2, [r6]
   b8456:	185b      	adds	r3, r3, r1
   b8458:	9901      	ldr	r1, [sp, #4]
   b845a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b845e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b8462:	181b      	adds	r3, r3, r0
   b8464:	eb42 0201 	adc.w	r2, r2, r1
   b8468:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b846c:	2100      	movs	r1, #0
   b846e:	2224      	movs	r2, #36	; 0x24
   b8470:	a803      	add	r0, sp, #12
   b8472:	f000 fb67 	bl	b8b44 <memset>
    localtime_r(&t, &calendar_time);
   b8476:	a903      	add	r1, sp, #12
   b8478:	4668      	mov	r0, sp
   b847a:	f7fe fff5 	bl	b7468 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b847e:	6832      	ldr	r2, [r6, #0]
   b8480:	683b      	ldr	r3, [r7, #0]
   b8482:	a903      	add	r1, sp, #12
   b8484:	4413      	add	r3, r2
   b8486:	4620      	mov	r0, r4
   b8488:	462a      	mov	r2, r5
   b848a:	f7ff ff5d 	bl	b8348 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b848e:	e7da      	b.n	b8446 <_ZN9TimeClass6formatExPKc+0x2a>
   b8490:	2003e6bc 	.word	0x2003e6bc
   b8494:	2003e2e0 	.word	0x2003e2e0
   b8498:	2003e6f0 	.word	0x2003e6f0
   b849c:	2003e6e8 	.word	0x2003e6e8

000b84a0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b84a0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b84a2:	2000      	movs	r0, #0
   b84a4:	f7fe fd00 	bl	b6ea8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b84a8:	4604      	mov	r4, r0
   b84aa:	b9a0      	cbnz	r0, b84d6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b84ac:	f7fe fe66 	bl	b717c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b84b0:	2801      	cmp	r0, #1
   b84b2:	d110      	bne.n	b84d6 <_ZN9TimeClass7isValidEv+0x36>
   b84b4:	4620      	mov	r0, r4
   b84b6:	f7fe fe91 	bl	b71dc <system_thread_get_state>
   b84ba:	b960      	cbnz	r0, b84d6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b84bc:	f7ff fee8 	bl	b8290 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b84c0:	b910      	cbnz	r0, b84c8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b84c2:	f7fe fec9 	bl	b7258 <spark_process>
        while (_while() && !_condition()) {
   b84c6:	e7f9      	b.n	b84bc <_ZN9TimeClass7isValidEv+0x1c>
   b84c8:	f7ff fee2 	bl	b8290 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b84cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b84d0:	2000      	movs	r0, #0
   b84d2:	f7fe bce9 	b.w	b6ea8 <hal_rtc_time_is_valid>
}
   b84d6:	4620      	mov	r0, r4
   b84d8:	bd10      	pop	{r4, pc}

000b84da <_ZN9TimeClass3nowEv>:
{
   b84da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b84dc:	f7ff ffe0 	bl	b84a0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b84e0:	2210      	movs	r2, #16
   b84e2:	2100      	movs	r1, #0
   b84e4:	4668      	mov	r0, sp
   b84e6:	f000 fb2d 	bl	b8b44 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b84ea:	2100      	movs	r1, #0
   b84ec:	4668      	mov	r0, sp
   b84ee:	f7fe fceb 	bl	b6ec8 <hal_rtc_get_time>
}
   b84f2:	9800      	ldr	r0, [sp, #0]
   b84f4:	b005      	add	sp, #20
   b84f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b84fc <_ZN9TimeClass4hourEv>:
{
   b84fc:	b508      	push	{r3, lr}
	return hour(now());
   b84fe:	f7ff ffec 	bl	b84da <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8502:	17c1      	asrs	r1, r0, #31
   b8504:	f7ff fe8e 	bl	b8224 <_ZL22Refresh_UnixTime_Cachex>
}
   b8508:	4b01      	ldr	r3, [pc, #4]	; (b8510 <_ZN9TimeClass4hourEv+0x14>)
   b850a:	6898      	ldr	r0, [r3, #8]
   b850c:	bd08      	pop	{r3, pc}
   b850e:	bf00      	nop
   b8510:	2003e6c0 	.word	0x2003e6c0

000b8514 <_ZN9TimeClass4yearEv>:
{
   b8514:	b508      	push	{r3, lr}
	return year(now());
   b8516:	f7ff ffe0 	bl	b84da <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b851a:	17c1      	asrs	r1, r0, #31
   b851c:	f7ff fe82 	bl	b8224 <_ZL22Refresh_UnixTime_Cachex>
}
   b8520:	4b01      	ldr	r3, [pc, #4]	; (b8528 <_ZN9TimeClass4yearEv+0x14>)
   b8522:	6958      	ldr	r0, [r3, #20]
   b8524:	bd08      	pop	{r3, pc}
   b8526:	bf00      	nop
   b8528:	2003e6c0 	.word	0x2003e6c0

000b852c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b852c:	4b02      	ldr	r3, [pc, #8]	; (b8538 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b852e:	681a      	ldr	r2, [r3, #0]
   b8530:	4b02      	ldr	r3, [pc, #8]	; (b853c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8532:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8534:	4770      	bx	lr
   b8536:	bf00      	nop
   b8538:	2003e2e0 	.word	0x2003e2e0
   b853c:	2003e6bc 	.word	0x2003e6bc

000b8540 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8540:	4770      	bx	lr

000b8542 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8542:	7441      	strb	r1, [r0, #17]
}
   b8544:	4770      	bx	lr

000b8546 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8546:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8548:	7c00      	ldrb	r0, [r0, #16]
   b854a:	f7fe fdbd 	bl	b70c8 <hal_usart_available_data_for_write>
}
   b854e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8552:	bd08      	pop	{r3, pc}

000b8554 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8554:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8556:	7c00      	ldrb	r0, [r0, #16]
   b8558:	f7fe fd8e 	bl	b7078 <hal_usart_available>
}
   b855c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8560:	bd08      	pop	{r3, pc}

000b8562 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8562:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8564:	7c00      	ldrb	r0, [r0, #16]
   b8566:	f7fe fd97 	bl	b7098 <hal_usart_peek>
}
   b856a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b856e:	bd08      	pop	{r3, pc}

000b8570 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8570:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8572:	7c00      	ldrb	r0, [r0, #16]
   b8574:	f7fe fd88 	bl	b7088 <hal_usart_read>
}
   b8578:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b857c:	bd08      	pop	{r3, pc}

000b857e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b857e:	7c00      	ldrb	r0, [r0, #16]
   b8580:	f7fe bd92 	b.w	b70a8 <hal_usart_flush>

000b8584 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8584:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8586:	7c45      	ldrb	r5, [r0, #17]
{
   b8588:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b858a:	b12d      	cbz	r5, b8598 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b858c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b858e:	b003      	add	sp, #12
   b8590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8594:	f7fe bd68 	b.w	b7068 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8598:	7c00      	ldrb	r0, [r0, #16]
   b859a:	9101      	str	r1, [sp, #4]
   b859c:	f7fe fd94 	bl	b70c8 <hal_usart_available_data_for_write>
   b85a0:	2800      	cmp	r0, #0
   b85a2:	9901      	ldr	r1, [sp, #4]
   b85a4:	dcf2      	bgt.n	b858c <_ZN11USARTSerial5writeEh+0x8>
}
   b85a6:	4628      	mov	r0, r5
   b85a8:	b003      	add	sp, #12
   b85aa:	bd30      	pop	{r4, r5, pc}

000b85ac <_ZN11USARTSerialD0Ev>:
   b85ac:	b510      	push	{r4, lr}
   b85ae:	2114      	movs	r1, #20
   b85b0:	4604      	mov	r4, r0
   b85b2:	f7fc fa82 	bl	b4aba <_ZdlPvj>
   b85b6:	4620      	mov	r0, r4
   b85b8:	bd10      	pop	{r4, pc}
	...

000b85bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b85bc:	b510      	push	{r4, lr}
   b85be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b85c2:	4604      	mov	r4, r0
   b85c4:	4608      	mov	r0, r1
   b85c6:	4611      	mov	r1, r2
   b85c8:	2200      	movs	r2, #0
   b85ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b85ce:	4b04      	ldr	r3, [pc, #16]	; (b85e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b85d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b85d2:	2301      	movs	r3, #1
  _serial = serial;
   b85d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b85d8:	f7fe fd7e 	bl	b70d8 <hal_usart_init_ex>
}
   b85dc:	4620      	mov	r0, r4
   b85de:	bd10      	pop	{r4, pc}
   b85e0:	000bb460 	.word	0x000bb460

000b85e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b85e4:	7441      	strb	r1, [r0, #17]
}
   b85e6:	4770      	bx	lr

000b85e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b85e8:	4770      	bx	lr

000b85ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b85ea:	4770      	bx	lr

000b85ec <_ZN9USBSerial4readEv>:
{
   b85ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b85ee:	2100      	movs	r1, #0
   b85f0:	7c00      	ldrb	r0, [r0, #16]
   b85f2:	f7fe fd91 	bl	b7118 <HAL_USB_USART_Receive_Data>
}
   b85f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b85fa:	bd08      	pop	{r3, pc}

000b85fc <_ZN9USBSerial4peekEv>:
{
   b85fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b85fe:	2101      	movs	r1, #1
   b8600:	7c00      	ldrb	r0, [r0, #16]
   b8602:	f7fe fd89 	bl	b7118 <HAL_USB_USART_Receive_Data>
}
   b8606:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b860a:	bd08      	pop	{r3, pc}

000b860c <_ZN9USBSerial17availableForWriteEv>:
{
   b860c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b860e:	7c00      	ldrb	r0, [r0, #16]
   b8610:	f7fe fd7a 	bl	b7108 <HAL_USB_USART_Available_Data_For_Write>
}
   b8614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8618:	bd08      	pop	{r3, pc}

000b861a <_ZN9USBSerial9availableEv>:
{
   b861a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b861c:	7c00      	ldrb	r0, [r0, #16]
   b861e:	f7fe fd6b 	bl	b70f8 <HAL_USB_USART_Available_Data>
}
   b8622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8626:	bd08      	pop	{r3, pc}

000b8628 <_ZN9USBSerial5writeEh>:
{
   b8628:	b513      	push	{r0, r1, r4, lr}
   b862a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b862c:	7c00      	ldrb	r0, [r0, #16]
{
   b862e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8630:	f7fe fd6a 	bl	b7108 <HAL_USB_USART_Available_Data_For_Write>
   b8634:	2800      	cmp	r0, #0
   b8636:	9901      	ldr	r1, [sp, #4]
   b8638:	dc01      	bgt.n	b863e <_ZN9USBSerial5writeEh+0x16>
   b863a:	7c60      	ldrb	r0, [r4, #17]
   b863c:	b120      	cbz	r0, b8648 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b863e:	7c20      	ldrb	r0, [r4, #16]
   b8640:	f7fe fd72 	bl	b7128 <HAL_USB_USART_Send_Data>
   b8644:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8648:	b002      	add	sp, #8
   b864a:	bd10      	pop	{r4, pc}

000b864c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b864c:	7c00      	ldrb	r0, [r0, #16]
   b864e:	f7fe bd73 	b.w	b7138 <HAL_USB_USART_Flush_Data>

000b8652 <_ZN9USBSerialD0Ev>:
   b8652:	b510      	push	{r4, lr}
   b8654:	2114      	movs	r1, #20
   b8656:	4604      	mov	r4, r0
   b8658:	f7fc fa2f 	bl	b4aba <_ZdlPvj>
   b865c:	4620      	mov	r0, r4
   b865e:	bd10      	pop	{r4, pc}

000b8660 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8660:	b510      	push	{r4, lr}
   b8662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8666:	4604      	mov	r4, r0
   b8668:	4608      	mov	r0, r1
   b866a:	2100      	movs	r1, #0
   b866c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8670:	4b04      	ldr	r3, [pc, #16]	; (b8684 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8672:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8674:	2301      	movs	r3, #1
  _serial = serial;
   b8676:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8678:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b867a:	4611      	mov	r1, r2
   b867c:	f7fe fd34 	bl	b70e8 <HAL_USB_USART_Init>
}
   b8680:	4620      	mov	r0, r4
   b8682:	bd10      	pop	{r4, pc}
   b8684:	000bb490 	.word	0x000bb490

000b8688 <_Z19acquireSerialBufferv>:
{
   b8688:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b868a:	2214      	movs	r2, #20
{
   b868c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b868e:	2100      	movs	r1, #0
   b8690:	f000 fa58 	bl	b8b44 <memset>
}
   b8694:	4620      	mov	r0, r4
   b8696:	bd10      	pop	{r4, pc}

000b8698 <_Z16_fetch_usbserialv>:
{
   b8698:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b869a:	4c0f      	ldr	r4, [pc, #60]	; (b86d8 <_Z16_fetch_usbserialv+0x40>)
{
   b869c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b869e:	a803      	add	r0, sp, #12
   b86a0:	f7ff fff2 	bl	b8688 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b86a4:	7821      	ldrb	r1, [r4, #0]
   b86a6:	f3bf 8f5b 	dmb	ish
   b86aa:	f011 0101 	ands.w	r1, r1, #1
   b86ae:	d10f      	bne.n	b86d0 <_Z16_fetch_usbserialv+0x38>
   b86b0:	4620      	mov	r0, r4
   b86b2:	9101      	str	r1, [sp, #4]
   b86b4:	f7fc fa10 	bl	b4ad8 <__cxa_guard_acquire>
   b86b8:	9901      	ldr	r1, [sp, #4]
   b86ba:	b148      	cbz	r0, b86d0 <_Z16_fetch_usbserialv+0x38>
   b86bc:	aa03      	add	r2, sp, #12
   b86be:	4807      	ldr	r0, [pc, #28]	; (b86dc <_Z16_fetch_usbserialv+0x44>)
   b86c0:	f7ff ffce 	bl	b8660 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b86c4:	4620      	mov	r0, r4
   b86c6:	f7fc fa0c 	bl	b4ae2 <__cxa_guard_release>
   b86ca:	4805      	ldr	r0, [pc, #20]	; (b86e0 <_Z16_fetch_usbserialv+0x48>)
   b86cc:	f000 f9e6 	bl	b8a9c <atexit>
	return _usbserial;
}
   b86d0:	4802      	ldr	r0, [pc, #8]	; (b86dc <_Z16_fetch_usbserialv+0x44>)
   b86d2:	b008      	add	sp, #32
   b86d4:	bd10      	pop	{r4, pc}
   b86d6:	bf00      	nop
   b86d8:	2003e700 	.word	0x2003e700
   b86dc:	2003e704 	.word	0x2003e704
   b86e0:	000b85e9 	.word	0x000b85e9

000b86e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b86e4:	4b01      	ldr	r3, [pc, #4]	; (b86ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b86e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b86e8:	4770      	bx	lr
   b86ea:	bf00      	nop
   b86ec:	2003e2e4 	.word	0x2003e2e4

000b86f0 <serialEventRun>:
{
   b86f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b86f2:	4b0b      	ldr	r3, [pc, #44]	; (b8720 <serialEventRun+0x30>)
   b86f4:	b143      	cbz	r3, b8708 <serialEventRun+0x18>
   b86f6:	f7ff ffcf 	bl	b8698 <_Z16_fetch_usbserialv>
   b86fa:	6803      	ldr	r3, [r0, #0]
   b86fc:	691b      	ldr	r3, [r3, #16]
   b86fe:	4798      	blx	r3
   b8700:	2800      	cmp	r0, #0
   b8702:	dd01      	ble.n	b8708 <serialEventRun+0x18>
        serialEvent();
   b8704:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8708:	4b06      	ldr	r3, [pc, #24]	; (b8724 <serialEventRun+0x34>)
   b870a:	b143      	cbz	r3, b871e <serialEventRun+0x2e>
   b870c:	f000 f974 	bl	b89f8 <_Z22__fetch_global_Serial1v>
   b8710:	6803      	ldr	r3, [r0, #0]
   b8712:	691b      	ldr	r3, [r3, #16]
   b8714:	4798      	blx	r3
   b8716:	2800      	cmp	r0, #0
   b8718:	dd01      	ble.n	b871e <serialEventRun+0x2e>
        serialEvent1();
   b871a:	f3af 8000 	nop.w
}
   b871e:	bd08      	pop	{r3, pc}
	...

000b8728 <_post_loop>:
{
   b8728:	b508      	push	{r3, lr}
	serialEventRun();
   b872a:	f7ff ffe1 	bl	b86f0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b872e:	f7fe fbb3 	bl	b6e98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8732:	4b01      	ldr	r3, [pc, #4]	; (b8738 <_post_loop+0x10>)
   b8734:	6018      	str	r0, [r3, #0]
}
   b8736:	bd08      	pop	{r3, pc}
   b8738:	2003e72c 	.word	0x2003e72c

000b873c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b873c:	4805      	ldr	r0, [pc, #20]	; (b8754 <_Z33system_initialize_user_backup_ramv+0x18>)
   b873e:	4a06      	ldr	r2, [pc, #24]	; (b8758 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8740:	4906      	ldr	r1, [pc, #24]	; (b875c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8742:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8744:	1a12      	subs	r2, r2, r0
   b8746:	f000 f9d5 	bl	b8af4 <memcpy>
    __backup_sram_signature = signature;
   b874a:	4b05      	ldr	r3, [pc, #20]	; (b8760 <_Z33system_initialize_user_backup_ramv+0x24>)
   b874c:	4a05      	ldr	r2, [pc, #20]	; (b8764 <_Z33system_initialize_user_backup_ramv+0x28>)
   b874e:	601a      	str	r2, [r3, #0]
}
   b8750:	bd08      	pop	{r3, pc}
   b8752:	bf00      	nop
   b8754:	2003f400 	.word	0x2003f400
   b8758:	2003fc04 	.word	0x2003fc04
   b875c:	000bbc18 	.word	0x000bbc18
   b8760:	2003fc00 	.word	0x2003fc00
   b8764:	9a271c1e 	.word	0x9a271c1e

000b8768 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8768:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b876a:	2300      	movs	r3, #0
   b876c:	9300      	str	r3, [sp, #0]
   b876e:	461a      	mov	r2, r3
   b8770:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8774:	f7fe fd4c 	bl	b7210 <system_ctrl_set_result>
}
   b8778:	b003      	add	sp, #12
   b877a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8780 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8780:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8782:	8843      	ldrh	r3, [r0, #2]
   b8784:	2b0a      	cmp	r3, #10
   b8786:	d008      	beq.n	b879a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8788:	2b50      	cmp	r3, #80	; 0x50
   b878a:	d10b      	bne.n	b87a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b878c:	4b09      	ldr	r3, [pc, #36]	; (b87b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b878e:	681b      	ldr	r3, [r3, #0]
   b8790:	b14b      	cbz	r3, b87a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8792:	b003      	add	sp, #12
   b8794:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8798:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b879a:	f7ff ffe5 	bl	b8768 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b879e:	b003      	add	sp, #12
   b87a0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b87a4:	2300      	movs	r3, #0
   b87a6:	9300      	str	r3, [sp, #0]
   b87a8:	461a      	mov	r2, r3
   b87aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b87ae:	f7fe fd2f 	bl	b7210 <system_ctrl_set_result>
}
   b87b2:	e7f4      	b.n	b879e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b87b4:	2003e71c 	.word	0x2003e71c

000b87b8 <module_user_init_hook>:
{
   b87b8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b87ba:	4812      	ldr	r0, [pc, #72]	; (b8804 <module_user_init_hook+0x4c>)
   b87bc:	2100      	movs	r1, #0
   b87be:	f7fe fe43 	bl	b7448 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b87c2:	4b11      	ldr	r3, [pc, #68]	; (b8808 <module_user_init_hook+0x50>)
   b87c4:	681a      	ldr	r2, [r3, #0]
   b87c6:	4b11      	ldr	r3, [pc, #68]	; (b880c <module_user_init_hook+0x54>)
   b87c8:	429a      	cmp	r2, r3
   b87ca:	4b11      	ldr	r3, [pc, #68]	; (b8810 <module_user_init_hook+0x58>)
   b87cc:	bf0c      	ite	eq
   b87ce:	2201      	moveq	r2, #1
   b87d0:	2200      	movne	r2, #0
   b87d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b87d4:	d001      	beq.n	b87da <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b87d6:	f7ff ffb1 	bl	b873c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b87da:	f7fe fb45 	bl	b6e68 <HAL_RNG_GetRandomNumber>
   b87de:	4604      	mov	r4, r0
    srand(seed);
   b87e0:	f000 f9b8 	bl	b8b54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b87e4:	4b0b      	ldr	r3, [pc, #44]	; (b8814 <module_user_init_hook+0x5c>)
   b87e6:	b113      	cbz	r3, b87ee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b87e8:	4620      	mov	r0, r4
   b87ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b87ee:	2100      	movs	r1, #0
   b87f0:	4808      	ldr	r0, [pc, #32]	; (b8814 <module_user_init_hook+0x5c>)
   b87f2:	f7fe fd79 	bl	b72e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b87f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b87fa:	4807      	ldr	r0, [pc, #28]	; (b8818 <module_user_init_hook+0x60>)
   b87fc:	2100      	movs	r1, #0
   b87fe:	f7fe bcfd 	b.w	b71fc <system_ctrl_set_app_request_handler>
   b8802:	bf00      	nop
   b8804:	000b86e5 	.word	0x000b86e5
   b8808:	2003fc00 	.word	0x2003fc00
   b880c:	9a271c1e 	.word	0x9a271c1e
   b8810:	2003e718 	.word	0x2003e718
   b8814:	00000000 	.word	0x00000000
   b8818:	000b8781 	.word	0x000b8781

000b881c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b881c:	b508      	push	{r3, lr}
   b881e:	4b02      	ldr	r3, [pc, #8]	; (b8828 <spark_protocol_instance+0xc>)
   b8820:	681b      	ldr	r3, [r3, #0]
   b8822:	681b      	ldr	r3, [r3, #0]
   b8824:	9301      	str	r3, [sp, #4]
   b8826:	bd08      	pop	{r3, pc}
   b8828:	0003025c 	.word	0x0003025c

000b882c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b882c:	b508      	push	{r3, lr}
   b882e:	4b02      	ldr	r3, [pc, #8]	; (b8838 <spark_protocol_set_product_id+0xc>)
   b8830:	681b      	ldr	r3, [r3, #0]
   b8832:	685b      	ldr	r3, [r3, #4]
   b8834:	9301      	str	r3, [sp, #4]
   b8836:	bd08      	pop	{r3, pc}
   b8838:	0003025c 	.word	0x0003025c

000b883c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b883c:	b508      	push	{r3, lr}
   b883e:	4b02      	ldr	r3, [pc, #8]	; (b8848 <spark_protocol_set_product_firmware_version+0xc>)
   b8840:	681b      	ldr	r3, [r3, #0]
   b8842:	689b      	ldr	r3, [r3, #8]
   b8844:	9301      	str	r3, [sp, #4]
   b8846:	bd08      	pop	{r3, pc}
   b8848:	0003025c 	.word	0x0003025c

000b884c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b884c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b884e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8850:	d902      	bls.n	b8858 <pinAvailable+0xc>
    return false;
   b8852:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8854:	b002      	add	sp, #8
   b8856:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8858:	f1a0 030b 	sub.w	r3, r0, #11
   b885c:	2b02      	cmp	r3, #2
   b885e:	d81a      	bhi.n	b8896 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8860:	4c17      	ldr	r4, [pc, #92]	; (b88c0 <pinAvailable+0x74>)
   b8862:	7821      	ldrb	r1, [r4, #0]
   b8864:	f3bf 8f5b 	dmb	ish
   b8868:	f011 0101 	ands.w	r1, r1, #1
   b886c:	d10b      	bne.n	b8886 <pinAvailable+0x3a>
   b886e:	4620      	mov	r0, r4
   b8870:	9101      	str	r1, [sp, #4]
   b8872:	f7fc f931 	bl	b4ad8 <__cxa_guard_acquire>
   b8876:	9901      	ldr	r1, [sp, #4]
   b8878:	b128      	cbz	r0, b8886 <pinAvailable+0x3a>
   b887a:	4812      	ldr	r0, [pc, #72]	; (b88c4 <pinAvailable+0x78>)
   b887c:	f7ff fbec 	bl	b8058 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8880:	4620      	mov	r0, r4
   b8882:	f7fc f92e 	bl	b4ae2 <__cxa_guard_release>
   b8886:	4b0f      	ldr	r3, [pc, #60]	; (b88c4 <pinAvailable+0x78>)
   b8888:	7818      	ldrb	r0, [r3, #0]
   b888a:	f7fe fbe5 	bl	b7058 <hal_spi_is_enabled>
   b888e:	2800      	cmp	r0, #0
   b8890:	d1df      	bne.n	b8852 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8892:	2001      	movs	r0, #1
   b8894:	e7de      	b.n	b8854 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8896:	2801      	cmp	r0, #1
   b8898:	d809      	bhi.n	b88ae <pinAvailable+0x62>
   b889a:	f000 f86d 	bl	b8978 <_Z19__fetch_global_Wirev>
   b889e:	2100      	movs	r1, #0
   b88a0:	7c00      	ldrb	r0, [r0, #16]
   b88a2:	f7fe fb91 	bl	b6fc8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b88a6:	f080 0001 	eor.w	r0, r0, #1
   b88aa:	b2c0      	uxtb	r0, r0
   b88ac:	e7d2      	b.n	b8854 <pinAvailable+0x8>
   b88ae:	3809      	subs	r0, #9
   b88b0:	2801      	cmp	r0, #1
   b88b2:	d8ee      	bhi.n	b8892 <pinAvailable+0x46>
   b88b4:	f000 f8a0 	bl	b89f8 <_Z22__fetch_global_Serial1v>
   b88b8:	7c00      	ldrb	r0, [r0, #16]
   b88ba:	f7fe fbfd 	bl	b70b8 <hal_usart_is_enabled>
   b88be:	e7f2      	b.n	b88a6 <pinAvailable+0x5a>
   b88c0:	2003e720 	.word	0x2003e720
   b88c4:	2003e724 	.word	0x2003e724

000b88c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88c8:	2823      	cmp	r0, #35	; 0x23
{
   b88ca:	b538      	push	{r3, r4, r5, lr}
   b88cc:	4604      	mov	r4, r0
   b88ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b88d0:	d80a      	bhi.n	b88e8 <pinMode+0x20>
   b88d2:	29ff      	cmp	r1, #255	; 0xff
   b88d4:	d008      	beq.n	b88e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b88d6:	f7ff ffb9 	bl	b884c <pinAvailable>
   b88da:	b128      	cbz	r0, b88e8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b88dc:	4629      	mov	r1, r5
   b88de:	4620      	mov	r0, r4
}
   b88e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b88e4:	f7fe bb00 	b.w	b6ee8 <hal_gpio_mode>
}
   b88e8:	bd38      	pop	{r3, r4, r5, pc}

000b88ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b88ea:	b538      	push	{r3, r4, r5, lr}
   b88ec:	4604      	mov	r4, r0
   b88ee:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b88f0:	f7fe fb02 	bl	b6ef8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b88f4:	28ff      	cmp	r0, #255	; 0xff
   b88f6:	d010      	beq.n	b891a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b88f8:	2806      	cmp	r0, #6
   b88fa:	d804      	bhi.n	b8906 <digitalWrite+0x1c>
   b88fc:	234d      	movs	r3, #77	; 0x4d
   b88fe:	fa23 f000 	lsr.w	r0, r3, r0
   b8902:	07c3      	lsls	r3, r0, #31
   b8904:	d409      	bmi.n	b891a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8906:	4620      	mov	r0, r4
   b8908:	f7ff ffa0 	bl	b884c <pinAvailable>
   b890c:	b128      	cbz	r0, b891a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b890e:	4629      	mov	r1, r5
   b8910:	4620      	mov	r0, r4
}
   b8912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8916:	f7fe baf7 	b.w	b6f08 <hal_gpio_write>
}
   b891a:	bd38      	pop	{r3, r4, r5, pc}

000b891c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b891c:	b510      	push	{r4, lr}
   b891e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8920:	f7fe faea 	bl	b6ef8 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8924:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8926:	b2db      	uxtb	r3, r3
   b8928:	2b01      	cmp	r3, #1
   b892a:	d908      	bls.n	b893e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b892c:	4620      	mov	r0, r4
   b892e:	f7ff ff8d 	bl	b884c <pinAvailable>
   b8932:	b120      	cbz	r0, b893e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8934:	4620      	mov	r0, r4
}
   b8936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b893a:	f7fe baed 	b.w	b6f18 <hal_gpio_read>
}
   b893e:	2000      	movs	r0, #0
   b8940:	bd10      	pop	{r4, pc}

000b8942 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8942:	4770      	bx	lr

000b8944 <_Z17acquireWireBufferv>:
{
   b8944:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8946:	4b0a      	ldr	r3, [pc, #40]	; (b8970 <_Z17acquireWireBufferv+0x2c>)
   b8948:	6003      	str	r3, [r0, #0]
   b894a:	2301      	movs	r3, #1
{
   b894c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b894e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8950:	4908      	ldr	r1, [pc, #32]	; (b8974 <_Z17acquireWireBufferv+0x30>)
   b8952:	2020      	movs	r0, #32
   b8954:	f000 f876 	bl	b8a44 <_ZnajRKSt9nothrow_t>
	};
   b8958:	2520      	movs	r5, #32
   b895a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b895c:	4905      	ldr	r1, [pc, #20]	; (b8974 <_Z17acquireWireBufferv+0x30>)
	};
   b895e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8960:	4628      	mov	r0, r5
   b8962:	f000 f86f 	bl	b8a44 <_ZnajRKSt9nothrow_t>
	};
   b8966:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b896a:	4620      	mov	r0, r4
   b896c:	bd38      	pop	{r3, r4, r5, pc}
   b896e:	bf00      	nop
   b8970:	00010018 	.word	0x00010018
   b8974:	000bb4b8 	.word	0x000bb4b8

000b8978 <_Z19__fetch_global_Wirev>:
{
   b8978:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b897a:	4d0e      	ldr	r5, [pc, #56]	; (b89b4 <_Z19__fetch_global_Wirev+0x3c>)
   b897c:	7829      	ldrb	r1, [r5, #0]
   b897e:	f3bf 8f5b 	dmb	ish
   b8982:	f011 0401 	ands.w	r4, r1, #1
{
   b8986:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8988:	d111      	bne.n	b89ae <_Z19__fetch_global_Wirev+0x36>
   b898a:	4628      	mov	r0, r5
   b898c:	f7fc f8a4 	bl	b4ad8 <__cxa_guard_acquire>
   b8990:	b168      	cbz	r0, b89ae <_Z19__fetch_global_Wirev+0x36>
   b8992:	4668      	mov	r0, sp
   b8994:	f7ff ffd6 	bl	b8944 <_Z17acquireWireBufferv>
   b8998:	466a      	mov	r2, sp
   b899a:	4621      	mov	r1, r4
   b899c:	4806      	ldr	r0, [pc, #24]	; (b89b8 <_Z19__fetch_global_Wirev+0x40>)
   b899e:	f7ff f93d 	bl	b7c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b89a2:	4628      	mov	r0, r5
   b89a4:	f7fc f89d 	bl	b4ae2 <__cxa_guard_release>
   b89a8:	4804      	ldr	r0, [pc, #16]	; (b89bc <_Z19__fetch_global_Wirev+0x44>)
   b89aa:	f000 f877 	bl	b8a9c <atexit>
	return wire;
}
   b89ae:	4802      	ldr	r0, [pc, #8]	; (b89b8 <_Z19__fetch_global_Wirev+0x40>)
   b89b0:	b007      	add	sp, #28
   b89b2:	bd30      	pop	{r4, r5, pc}
   b89b4:	2003e730 	.word	0x2003e730
   b89b8:	2003e734 	.word	0x2003e734
   b89bc:	000b8943 	.word	0x000b8943

000b89c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89c0:	4770      	bx	lr
	...

000b89c4 <_Z20acquireSerial1Bufferv>:
{
   b89c4:	b538      	push	{r3, r4, r5, lr}
   b89c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b89c8:	2514      	movs	r5, #20
   b89ca:	462a      	mov	r2, r5
   b89cc:	2100      	movs	r1, #0
   b89ce:	f000 f8b9 	bl	b8b44 <memset>
   b89d2:	8025      	strh	r5, [r4, #0]
   b89d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89d6:	4907      	ldr	r1, [pc, #28]	; (b89f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b89d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b89dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89de:	f000 f831 	bl	b8a44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89e2:	4904      	ldr	r1, [pc, #16]	; (b89f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b89e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b89e6:	4628      	mov	r0, r5
   b89e8:	f000 f82c 	bl	b8a44 <_ZnajRKSt9nothrow_t>
    };
   b89ec:	60e0      	str	r0, [r4, #12]
}
   b89ee:	4620      	mov	r0, r4
   b89f0:	bd38      	pop	{r3, r4, r5, pc}
   b89f2:	bf00      	nop
   b89f4:	000bb4b8 	.word	0x000bb4b8

000b89f8 <_Z22__fetch_global_Serial1v>:
{
   b89f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b89fa:	4d0e      	ldr	r5, [pc, #56]	; (b8a34 <_Z22__fetch_global_Serial1v+0x3c>)
   b89fc:	7829      	ldrb	r1, [r5, #0]
   b89fe:	f3bf 8f5b 	dmb	ish
   b8a02:	f011 0401 	ands.w	r4, r1, #1
{
   b8a06:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a08:	d111      	bne.n	b8a2e <_Z22__fetch_global_Serial1v+0x36>
   b8a0a:	4628      	mov	r0, r5
   b8a0c:	f7fc f864 	bl	b4ad8 <__cxa_guard_acquire>
   b8a10:	b168      	cbz	r0, b8a2e <_Z22__fetch_global_Serial1v+0x36>
   b8a12:	a801      	add	r0, sp, #4
   b8a14:	f7ff ffd6 	bl	b89c4 <_Z20acquireSerial1Bufferv>
   b8a18:	aa01      	add	r2, sp, #4
   b8a1a:	4621      	mov	r1, r4
   b8a1c:	4806      	ldr	r0, [pc, #24]	; (b8a38 <_Z22__fetch_global_Serial1v+0x40>)
   b8a1e:	f7ff fdcd 	bl	b85bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8a22:	4628      	mov	r0, r5
   b8a24:	f7fc f85d 	bl	b4ae2 <__cxa_guard_release>
   b8a28:	4804      	ldr	r0, [pc, #16]	; (b8a3c <_Z22__fetch_global_Serial1v+0x44>)
   b8a2a:	f000 f837 	bl	b8a9c <atexit>
    return serial1;
}
   b8a2e:	4802      	ldr	r0, [pc, #8]	; (b8a38 <_Z22__fetch_global_Serial1v+0x40>)
   b8a30:	b007      	add	sp, #28
   b8a32:	bd30      	pop	{r4, r5, pc}
   b8a34:	2003e748 	.word	0x2003e748
   b8a38:	2003e74c 	.word	0x2003e74c
   b8a3c:	000b89c1 	.word	0x000b89c1

000b8a40 <_ZnwjRKSt9nothrow_t>:
   b8a40:	f7fc b837 	b.w	b4ab2 <_Znwj>

000b8a44 <_ZnajRKSt9nothrow_t>:
   b8a44:	f7fc b837 	b.w	b4ab6 <_Znaj>

000b8a48 <_ZSt25__throw_bad_function_callv>:
   b8a48:	b508      	push	{r3, lr}
   b8a4a:	f7fe fcdd 	bl	b7408 <abort>
	...

000b8a50 <asctime_r>:
   b8a50:	b510      	push	{r4, lr}
   b8a52:	460c      	mov	r4, r1
   b8a54:	6941      	ldr	r1, [r0, #20]
   b8a56:	6903      	ldr	r3, [r0, #16]
   b8a58:	6982      	ldr	r2, [r0, #24]
   b8a5a:	b086      	sub	sp, #24
   b8a5c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b8a60:	9104      	str	r1, [sp, #16]
   b8a62:	6801      	ldr	r1, [r0, #0]
   b8a64:	9103      	str	r1, [sp, #12]
   b8a66:	6841      	ldr	r1, [r0, #4]
   b8a68:	9102      	str	r1, [sp, #8]
   b8a6a:	6881      	ldr	r1, [r0, #8]
   b8a6c:	9101      	str	r1, [sp, #4]
   b8a6e:	68c1      	ldr	r1, [r0, #12]
   b8a70:	9100      	str	r1, [sp, #0]
   b8a72:	4907      	ldr	r1, [pc, #28]	; (b8a90 <asctime_r+0x40>)
   b8a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8a78:	440b      	add	r3, r1
   b8a7a:	4906      	ldr	r1, [pc, #24]	; (b8a94 <asctime_r+0x44>)
   b8a7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b8a80:	440a      	add	r2, r1
   b8a82:	4620      	mov	r0, r4
   b8a84:	4904      	ldr	r1, [pc, #16]	; (b8a98 <asctime_r+0x48>)
   b8a86:	f7fe fcaf 	bl	b73e8 <siprintf>
   b8a8a:	4620      	mov	r0, r4
   b8a8c:	b006      	add	sp, #24
   b8a8e:	bd10      	pop	{r4, pc}
   b8a90:	000bb4ee 	.word	0x000bb4ee
   b8a94:	000bb4d9 	.word	0x000bb4d9
   b8a98:	000bb4b9 	.word	0x000bb4b9

000b8a9c <atexit>:
   b8a9c:	2300      	movs	r3, #0
   b8a9e:	4601      	mov	r1, r0
   b8aa0:	461a      	mov	r2, r3
   b8aa2:	4618      	mov	r0, r3
   b8aa4:	f000 bf8a 	b.w	b99bc <__register_exitproc>

000b8aa8 <atof>:
   b8aa8:	2100      	movs	r1, #0
   b8aaa:	f000 beef 	b.w	b988c <strtod>

000b8aae <atoi>:
   b8aae:	220a      	movs	r2, #10
   b8ab0:	2100      	movs	r1, #0
   b8ab2:	f000 bf79 	b.w	b99a8 <strtol>
	...

000b8ab8 <gmtime>:
   b8ab8:	b538      	push	{r3, r4, r5, lr}
   b8aba:	4b0b      	ldr	r3, [pc, #44]	; (b8ae8 <gmtime+0x30>)
   b8abc:	681d      	ldr	r5, [r3, #0]
   b8abe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b8ac0:	4604      	mov	r4, r0
   b8ac2:	b953      	cbnz	r3, b8ada <gmtime+0x22>
   b8ac4:	2024      	movs	r0, #36	; 0x24
   b8ac6:	f7fe fc77 	bl	b73b8 <malloc>
   b8aca:	4602      	mov	r2, r0
   b8acc:	63e8      	str	r0, [r5, #60]	; 0x3c
   b8ace:	b920      	cbnz	r0, b8ada <gmtime+0x22>
   b8ad0:	4b06      	ldr	r3, [pc, #24]	; (b8aec <gmtime+0x34>)
   b8ad2:	4807      	ldr	r0, [pc, #28]	; (b8af0 <gmtime+0x38>)
   b8ad4:	2139      	movs	r1, #57	; 0x39
   b8ad6:	f7fe fcaf 	bl	b7438 <__assert_func>
   b8ada:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b8adc:	4620      	mov	r0, r4
   b8ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8ae2:	f7fe bcc9 	b.w	b7478 <gmtime_r>
   b8ae6:	bf00      	nop
   b8ae8:	2003e2e4 	.word	0x2003e2e4
   b8aec:	000bb512 	.word	0x000bb512
   b8af0:	000bb529 	.word	0x000bb529

000b8af4 <memcpy>:
   b8af4:	440a      	add	r2, r1
   b8af6:	4291      	cmp	r1, r2
   b8af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8afc:	d100      	bne.n	b8b00 <memcpy+0xc>
   b8afe:	4770      	bx	lr
   b8b00:	b510      	push	{r4, lr}
   b8b02:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8b06:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8b0a:	4291      	cmp	r1, r2
   b8b0c:	d1f9      	bne.n	b8b02 <memcpy+0xe>
   b8b0e:	bd10      	pop	{r4, pc}

000b8b10 <memmove>:
   b8b10:	4288      	cmp	r0, r1
   b8b12:	b510      	push	{r4, lr}
   b8b14:	eb01 0402 	add.w	r4, r1, r2
   b8b18:	d902      	bls.n	b8b20 <memmove+0x10>
   b8b1a:	4284      	cmp	r4, r0
   b8b1c:	4623      	mov	r3, r4
   b8b1e:	d807      	bhi.n	b8b30 <memmove+0x20>
   b8b20:	1e43      	subs	r3, r0, #1
   b8b22:	42a1      	cmp	r1, r4
   b8b24:	d008      	beq.n	b8b38 <memmove+0x28>
   b8b26:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8b2e:	e7f8      	b.n	b8b22 <memmove+0x12>
   b8b30:	4402      	add	r2, r0
   b8b32:	4601      	mov	r1, r0
   b8b34:	428a      	cmp	r2, r1
   b8b36:	d100      	bne.n	b8b3a <memmove+0x2a>
   b8b38:	bd10      	pop	{r4, pc}
   b8b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8b42:	e7f7      	b.n	b8b34 <memmove+0x24>

000b8b44 <memset>:
   b8b44:	4402      	add	r2, r0
   b8b46:	4603      	mov	r3, r0
   b8b48:	4293      	cmp	r3, r2
   b8b4a:	d100      	bne.n	b8b4e <memset+0xa>
   b8b4c:	4770      	bx	lr
   b8b4e:	f803 1b01 	strb.w	r1, [r3], #1
   b8b52:	e7f9      	b.n	b8b48 <memset+0x4>

000b8b54 <srand>:
   b8b54:	b538      	push	{r3, r4, r5, lr}
   b8b56:	4b10      	ldr	r3, [pc, #64]	; (b8b98 <srand+0x44>)
   b8b58:	681d      	ldr	r5, [r3, #0]
   b8b5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b5c:	4604      	mov	r4, r0
   b8b5e:	b9b3      	cbnz	r3, b8b8e <srand+0x3a>
   b8b60:	2018      	movs	r0, #24
   b8b62:	f7fe fc29 	bl	b73b8 <malloc>
   b8b66:	4602      	mov	r2, r0
   b8b68:	63a8      	str	r0, [r5, #56]	; 0x38
   b8b6a:	b920      	cbnz	r0, b8b76 <srand+0x22>
   b8b6c:	4b0b      	ldr	r3, [pc, #44]	; (b8b9c <srand+0x48>)
   b8b6e:	480c      	ldr	r0, [pc, #48]	; (b8ba0 <srand+0x4c>)
   b8b70:	2142      	movs	r1, #66	; 0x42
   b8b72:	f7fe fc61 	bl	b7438 <__assert_func>
   b8b76:	490b      	ldr	r1, [pc, #44]	; (b8ba4 <srand+0x50>)
   b8b78:	4b0b      	ldr	r3, [pc, #44]	; (b8ba8 <srand+0x54>)
   b8b7a:	e9c0 1300 	strd	r1, r3, [r0]
   b8b7e:	4b0b      	ldr	r3, [pc, #44]	; (b8bac <srand+0x58>)
   b8b80:	6083      	str	r3, [r0, #8]
   b8b82:	230b      	movs	r3, #11
   b8b84:	8183      	strh	r3, [r0, #12]
   b8b86:	2100      	movs	r1, #0
   b8b88:	2001      	movs	r0, #1
   b8b8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8b8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b90:	2200      	movs	r2, #0
   b8b92:	611c      	str	r4, [r3, #16]
   b8b94:	615a      	str	r2, [r3, #20]
   b8b96:	bd38      	pop	{r3, r4, r5, pc}
   b8b98:	2003e2e4 	.word	0x2003e2e4
   b8b9c:	000bb512 	.word	0x000bb512
   b8ba0:	000bb582 	.word	0x000bb582
   b8ba4:	abcd330e 	.word	0xabcd330e
   b8ba8:	e66d1234 	.word	0xe66d1234
   b8bac:	0005deec 	.word	0x0005deec

000b8bb0 <strcpy>:
   b8bb0:	4603      	mov	r3, r0
   b8bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8bb6:	f803 2b01 	strb.w	r2, [r3], #1
   b8bba:	2a00      	cmp	r2, #0
   b8bbc:	d1f9      	bne.n	b8bb2 <strcpy+0x2>
   b8bbe:	4770      	bx	lr

000b8bc0 <strdup>:
   b8bc0:	4b02      	ldr	r3, [pc, #8]	; (b8bcc <strdup+0xc>)
   b8bc2:	4601      	mov	r1, r0
   b8bc4:	6818      	ldr	r0, [r3, #0]
   b8bc6:	f000 b803 	b.w	b8bd0 <_strdup_r>
   b8bca:	bf00      	nop
   b8bcc:	2003e2e4 	.word	0x2003e2e4

000b8bd0 <_strdup_r>:
   b8bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8bd2:	4604      	mov	r4, r0
   b8bd4:	4608      	mov	r0, r1
   b8bd6:	460d      	mov	r5, r1
   b8bd8:	f7fb ff10 	bl	b49fc <strlen>
   b8bdc:	1c42      	adds	r2, r0, #1
   b8bde:	4611      	mov	r1, r2
   b8be0:	4620      	mov	r0, r4
   b8be2:	9201      	str	r2, [sp, #4]
   b8be4:	f7fe fc18 	bl	b7418 <_malloc_r>
   b8be8:	4604      	mov	r4, r0
   b8bea:	b118      	cbz	r0, b8bf4 <_strdup_r+0x24>
   b8bec:	9a01      	ldr	r2, [sp, #4]
   b8bee:	4629      	mov	r1, r5
   b8bf0:	f7ff ff80 	bl	b8af4 <memcpy>
   b8bf4:	4620      	mov	r0, r4
   b8bf6:	b003      	add	sp, #12
   b8bf8:	bd30      	pop	{r4, r5, pc}

000b8bfa <strncmp>:
   b8bfa:	b510      	push	{r4, lr}
   b8bfc:	b17a      	cbz	r2, b8c1e <strncmp+0x24>
   b8bfe:	4603      	mov	r3, r0
   b8c00:	3901      	subs	r1, #1
   b8c02:	1884      	adds	r4, r0, r2
   b8c04:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8c08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8c0c:	4290      	cmp	r0, r2
   b8c0e:	d101      	bne.n	b8c14 <strncmp+0x1a>
   b8c10:	42a3      	cmp	r3, r4
   b8c12:	d101      	bne.n	b8c18 <strncmp+0x1e>
   b8c14:	1a80      	subs	r0, r0, r2
   b8c16:	bd10      	pop	{r4, pc}
   b8c18:	2800      	cmp	r0, #0
   b8c1a:	d1f3      	bne.n	b8c04 <strncmp+0xa>
   b8c1c:	e7fa      	b.n	b8c14 <strncmp+0x1a>
   b8c1e:	4610      	mov	r0, r2
   b8c20:	e7f9      	b.n	b8c16 <strncmp+0x1c>

000b8c22 <strncpy>:
   b8c22:	b510      	push	{r4, lr}
   b8c24:	3901      	subs	r1, #1
   b8c26:	4603      	mov	r3, r0
   b8c28:	b132      	cbz	r2, b8c38 <strncpy+0x16>
   b8c2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8c2e:	f803 4b01 	strb.w	r4, [r3], #1
   b8c32:	3a01      	subs	r2, #1
   b8c34:	2c00      	cmp	r4, #0
   b8c36:	d1f7      	bne.n	b8c28 <strncpy+0x6>
   b8c38:	441a      	add	r2, r3
   b8c3a:	2100      	movs	r1, #0
   b8c3c:	4293      	cmp	r3, r2
   b8c3e:	d100      	bne.n	b8c42 <strncpy+0x20>
   b8c40:	bd10      	pop	{r4, pc}
   b8c42:	f803 1b01 	strb.w	r1, [r3], #1
   b8c46:	e7f9      	b.n	b8c3c <strncpy+0x1a>

000b8c48 <sulp>:
   b8c48:	b570      	push	{r4, r5, r6, lr}
   b8c4a:	4604      	mov	r4, r0
   b8c4c:	460d      	mov	r5, r1
   b8c4e:	ec45 4b10 	vmov	d0, r4, r5
   b8c52:	4616      	mov	r6, r2
   b8c54:	f001 fe0c 	bl	ba870 <__ulp>
   b8c58:	ec51 0b10 	vmov	r0, r1, d0
   b8c5c:	b17e      	cbz	r6, b8c7e <sulp+0x36>
   b8c5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8c62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8c66:	2b00      	cmp	r3, #0
   b8c68:	dd09      	ble.n	b8c7e <sulp+0x36>
   b8c6a:	051b      	lsls	r3, r3, #20
   b8c6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8c70:	2400      	movs	r4, #0
   b8c72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8c76:	4622      	mov	r2, r4
   b8c78:	462b      	mov	r3, r5
   b8c7a:	f7fb fb8d 	bl	b4398 <__aeabi_dmul>
   b8c7e:	bd70      	pop	{r4, r5, r6, pc}

000b8c80 <_strtod_l>:
   b8c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c84:	ed2d 8b02 	vpush	{d8}
   b8c88:	b09d      	sub	sp, #116	; 0x74
   b8c8a:	461f      	mov	r7, r3
   b8c8c:	2300      	movs	r3, #0
   b8c8e:	9318      	str	r3, [sp, #96]	; 0x60
   b8c90:	4ba2      	ldr	r3, [pc, #648]	; (b8f1c <_strtod_l+0x29c>)
   b8c92:	9213      	str	r2, [sp, #76]	; 0x4c
   b8c94:	681b      	ldr	r3, [r3, #0]
   b8c96:	9305      	str	r3, [sp, #20]
   b8c98:	4604      	mov	r4, r0
   b8c9a:	4618      	mov	r0, r3
   b8c9c:	4688      	mov	r8, r1
   b8c9e:	f7fb fead 	bl	b49fc <strlen>
   b8ca2:	f04f 0a00 	mov.w	sl, #0
   b8ca6:	4605      	mov	r5, r0
   b8ca8:	f04f 0b00 	mov.w	fp, #0
   b8cac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8cb2:	781a      	ldrb	r2, [r3, #0]
   b8cb4:	2a2b      	cmp	r2, #43	; 0x2b
   b8cb6:	d04e      	beq.n	b8d56 <_strtod_l+0xd6>
   b8cb8:	d83b      	bhi.n	b8d32 <_strtod_l+0xb2>
   b8cba:	2a0d      	cmp	r2, #13
   b8cbc:	d834      	bhi.n	b8d28 <_strtod_l+0xa8>
   b8cbe:	2a08      	cmp	r2, #8
   b8cc0:	d834      	bhi.n	b8d2c <_strtod_l+0xac>
   b8cc2:	2a00      	cmp	r2, #0
   b8cc4:	d03e      	beq.n	b8d44 <_strtod_l+0xc4>
   b8cc6:	2300      	movs	r3, #0
   b8cc8:	930a      	str	r3, [sp, #40]	; 0x28
   b8cca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b8ccc:	7833      	ldrb	r3, [r6, #0]
   b8cce:	2b30      	cmp	r3, #48	; 0x30
   b8cd0:	f040 80b0 	bne.w	b8e34 <_strtod_l+0x1b4>
   b8cd4:	7873      	ldrb	r3, [r6, #1]
   b8cd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8cda:	2b58      	cmp	r3, #88	; 0x58
   b8cdc:	d168      	bne.n	b8db0 <_strtod_l+0x130>
   b8cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8ce0:	9301      	str	r3, [sp, #4]
   b8ce2:	ab18      	add	r3, sp, #96	; 0x60
   b8ce4:	9702      	str	r7, [sp, #8]
   b8ce6:	9300      	str	r3, [sp, #0]
   b8ce8:	4a8d      	ldr	r2, [pc, #564]	; (b8f20 <_strtod_l+0x2a0>)
   b8cea:	ab19      	add	r3, sp, #100	; 0x64
   b8cec:	a917      	add	r1, sp, #92	; 0x5c
   b8cee:	4620      	mov	r0, r4
   b8cf0:	f000 ff2e 	bl	b9b50 <__gethex>
   b8cf4:	f010 0707 	ands.w	r7, r0, #7
   b8cf8:	4605      	mov	r5, r0
   b8cfa:	d005      	beq.n	b8d08 <_strtod_l+0x88>
   b8cfc:	2f06      	cmp	r7, #6
   b8cfe:	d12c      	bne.n	b8d5a <_strtod_l+0xda>
   b8d00:	3601      	adds	r6, #1
   b8d02:	2300      	movs	r3, #0
   b8d04:	9617      	str	r6, [sp, #92]	; 0x5c
   b8d06:	930a      	str	r3, [sp, #40]	; 0x28
   b8d08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8d0a:	2b00      	cmp	r3, #0
   b8d0c:	f040 8590 	bne.w	b9830 <_strtod_l+0xbb0>
   b8d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8d12:	b1eb      	cbz	r3, b8d50 <_strtod_l+0xd0>
   b8d14:	4652      	mov	r2, sl
   b8d16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8d1a:	ec43 2b10 	vmov	d0, r2, r3
   b8d1e:	b01d      	add	sp, #116	; 0x74
   b8d20:	ecbd 8b02 	vpop	{d8}
   b8d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d28:	2a20      	cmp	r2, #32
   b8d2a:	d1cc      	bne.n	b8cc6 <_strtod_l+0x46>
   b8d2c:	3301      	adds	r3, #1
   b8d2e:	9317      	str	r3, [sp, #92]	; 0x5c
   b8d30:	e7be      	b.n	b8cb0 <_strtod_l+0x30>
   b8d32:	2a2d      	cmp	r2, #45	; 0x2d
   b8d34:	d1c7      	bne.n	b8cc6 <_strtod_l+0x46>
   b8d36:	2201      	movs	r2, #1
   b8d38:	920a      	str	r2, [sp, #40]	; 0x28
   b8d3a:	1c5a      	adds	r2, r3, #1
   b8d3c:	9217      	str	r2, [sp, #92]	; 0x5c
   b8d3e:	785b      	ldrb	r3, [r3, #1]
   b8d40:	2b00      	cmp	r3, #0
   b8d42:	d1c2      	bne.n	b8cca <_strtod_l+0x4a>
   b8d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8d46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8d4a:	2b00      	cmp	r3, #0
   b8d4c:	f040 856e 	bne.w	b982c <_strtod_l+0xbac>
   b8d50:	4652      	mov	r2, sl
   b8d52:	465b      	mov	r3, fp
   b8d54:	e7e1      	b.n	b8d1a <_strtod_l+0x9a>
   b8d56:	2200      	movs	r2, #0
   b8d58:	e7ee      	b.n	b8d38 <_strtod_l+0xb8>
   b8d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8d5c:	b13a      	cbz	r2, b8d6e <_strtod_l+0xee>
   b8d5e:	2135      	movs	r1, #53	; 0x35
   b8d60:	a81a      	add	r0, sp, #104	; 0x68
   b8d62:	f001 fe90 	bl	baa86 <__copybits>
   b8d66:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d68:	4620      	mov	r0, r4
   b8d6a:	f001 fa4f 	bl	ba20c <_Bfree>
   b8d6e:	3f01      	subs	r7, #1
   b8d70:	2f04      	cmp	r7, #4
   b8d72:	d806      	bhi.n	b8d82 <_strtod_l+0x102>
   b8d74:	e8df f007 	tbb	[pc, r7]
   b8d78:	1714030a 	.word	0x1714030a
   b8d7c:	0a          	.byte	0x0a
   b8d7d:	00          	.byte	0x00
   b8d7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b8d82:	0728      	lsls	r0, r5, #28
   b8d84:	d5c0      	bpl.n	b8d08 <_strtod_l+0x88>
   b8d86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8d8a:	e7bd      	b.n	b8d08 <_strtod_l+0x88>
   b8d8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8d90:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b8d92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b8d96:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8d9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8d9e:	e7f0      	b.n	b8d82 <_strtod_l+0x102>
   b8da0:	f8df b180 	ldr.w	fp, [pc, #384]	; b8f24 <_strtod_l+0x2a4>
   b8da4:	e7ed      	b.n	b8d82 <_strtod_l+0x102>
   b8da6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b8daa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8dae:	e7e8      	b.n	b8d82 <_strtod_l+0x102>
   b8db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8db2:	1c5a      	adds	r2, r3, #1
   b8db4:	9217      	str	r2, [sp, #92]	; 0x5c
   b8db6:	785b      	ldrb	r3, [r3, #1]
   b8db8:	2b30      	cmp	r3, #48	; 0x30
   b8dba:	d0f9      	beq.n	b8db0 <_strtod_l+0x130>
   b8dbc:	2b00      	cmp	r3, #0
   b8dbe:	d0a3      	beq.n	b8d08 <_strtod_l+0x88>
   b8dc0:	2301      	movs	r3, #1
   b8dc2:	f04f 0900 	mov.w	r9, #0
   b8dc6:	9304      	str	r3, [sp, #16]
   b8dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8dca:	9308      	str	r3, [sp, #32]
   b8dcc:	f8cd 901c 	str.w	r9, [sp, #28]
   b8dd0:	464f      	mov	r7, r9
   b8dd2:	220a      	movs	r2, #10
   b8dd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b8dd6:	7806      	ldrb	r6, [r0, #0]
   b8dd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b8ddc:	b2d9      	uxtb	r1, r3
   b8dde:	2909      	cmp	r1, #9
   b8de0:	d92a      	bls.n	b8e38 <_strtod_l+0x1b8>
   b8de2:	9905      	ldr	r1, [sp, #20]
   b8de4:	462a      	mov	r2, r5
   b8de6:	f7ff ff08 	bl	b8bfa <strncmp>
   b8dea:	b398      	cbz	r0, b8e54 <_strtod_l+0x1d4>
   b8dec:	2000      	movs	r0, #0
   b8dee:	4632      	mov	r2, r6
   b8df0:	463d      	mov	r5, r7
   b8df2:	9005      	str	r0, [sp, #20]
   b8df4:	4603      	mov	r3, r0
   b8df6:	2a65      	cmp	r2, #101	; 0x65
   b8df8:	d001      	beq.n	b8dfe <_strtod_l+0x17e>
   b8dfa:	2a45      	cmp	r2, #69	; 0x45
   b8dfc:	d118      	bne.n	b8e30 <_strtod_l+0x1b0>
   b8dfe:	b91d      	cbnz	r5, b8e08 <_strtod_l+0x188>
   b8e00:	9a04      	ldr	r2, [sp, #16]
   b8e02:	4302      	orrs	r2, r0
   b8e04:	d09e      	beq.n	b8d44 <_strtod_l+0xc4>
   b8e06:	2500      	movs	r5, #0
   b8e08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b8e0c:	f108 0201 	add.w	r2, r8, #1
   b8e10:	9217      	str	r2, [sp, #92]	; 0x5c
   b8e12:	f898 2001 	ldrb.w	r2, [r8, #1]
   b8e16:	2a2b      	cmp	r2, #43	; 0x2b
   b8e18:	d075      	beq.n	b8f06 <_strtod_l+0x286>
   b8e1a:	2a2d      	cmp	r2, #45	; 0x2d
   b8e1c:	d07b      	beq.n	b8f16 <_strtod_l+0x296>
   b8e1e:	f04f 0c00 	mov.w	ip, #0
   b8e22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b8e26:	2909      	cmp	r1, #9
   b8e28:	f240 8082 	bls.w	b8f30 <_strtod_l+0x2b0>
   b8e2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8e30:	2600      	movs	r6, #0
   b8e32:	e09d      	b.n	b8f70 <_strtod_l+0x2f0>
   b8e34:	2300      	movs	r3, #0
   b8e36:	e7c4      	b.n	b8dc2 <_strtod_l+0x142>
   b8e38:	2f08      	cmp	r7, #8
   b8e3a:	bfd8      	it	le
   b8e3c:	9907      	ldrle	r1, [sp, #28]
   b8e3e:	f100 0001 	add.w	r0, r0, #1
   b8e42:	bfda      	itte	le
   b8e44:	fb02 3301 	mlale	r3, r2, r1, r3
   b8e48:	9307      	strle	r3, [sp, #28]
   b8e4a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8e4e:	3701      	adds	r7, #1
   b8e50:	9017      	str	r0, [sp, #92]	; 0x5c
   b8e52:	e7bf      	b.n	b8dd4 <_strtod_l+0x154>
   b8e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8e56:	195a      	adds	r2, r3, r5
   b8e58:	9217      	str	r2, [sp, #92]	; 0x5c
   b8e5a:	5d5a      	ldrb	r2, [r3, r5]
   b8e5c:	2f00      	cmp	r7, #0
   b8e5e:	d037      	beq.n	b8ed0 <_strtod_l+0x250>
   b8e60:	9005      	str	r0, [sp, #20]
   b8e62:	463d      	mov	r5, r7
   b8e64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8e68:	2b09      	cmp	r3, #9
   b8e6a:	d912      	bls.n	b8e92 <_strtod_l+0x212>
   b8e6c:	2301      	movs	r3, #1
   b8e6e:	e7c2      	b.n	b8df6 <_strtod_l+0x176>
   b8e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8e72:	1c5a      	adds	r2, r3, #1
   b8e74:	9217      	str	r2, [sp, #92]	; 0x5c
   b8e76:	785a      	ldrb	r2, [r3, #1]
   b8e78:	3001      	adds	r0, #1
   b8e7a:	2a30      	cmp	r2, #48	; 0x30
   b8e7c:	d0f8      	beq.n	b8e70 <_strtod_l+0x1f0>
   b8e7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b8e82:	2b08      	cmp	r3, #8
   b8e84:	f200 84d9 	bhi.w	b983a <_strtod_l+0xbba>
   b8e88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8e8a:	9005      	str	r0, [sp, #20]
   b8e8c:	2000      	movs	r0, #0
   b8e8e:	9308      	str	r3, [sp, #32]
   b8e90:	4605      	mov	r5, r0
   b8e92:	3a30      	subs	r2, #48	; 0x30
   b8e94:	f100 0301 	add.w	r3, r0, #1
   b8e98:	d014      	beq.n	b8ec4 <_strtod_l+0x244>
   b8e9a:	9905      	ldr	r1, [sp, #20]
   b8e9c:	4419      	add	r1, r3
   b8e9e:	9105      	str	r1, [sp, #20]
   b8ea0:	462b      	mov	r3, r5
   b8ea2:	eb00 0e05 	add.w	lr, r0, r5
   b8ea6:	210a      	movs	r1, #10
   b8ea8:	4573      	cmp	r3, lr
   b8eaa:	d113      	bne.n	b8ed4 <_strtod_l+0x254>
   b8eac:	182b      	adds	r3, r5, r0
   b8eae:	2b08      	cmp	r3, #8
   b8eb0:	f105 0501 	add.w	r5, r5, #1
   b8eb4:	4405      	add	r5, r0
   b8eb6:	dc1c      	bgt.n	b8ef2 <_strtod_l+0x272>
   b8eb8:	9907      	ldr	r1, [sp, #28]
   b8eba:	230a      	movs	r3, #10
   b8ebc:	fb03 2301 	mla	r3, r3, r1, r2
   b8ec0:	9307      	str	r3, [sp, #28]
   b8ec2:	2300      	movs	r3, #0
   b8ec4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8ec6:	1c51      	adds	r1, r2, #1
   b8ec8:	9117      	str	r1, [sp, #92]	; 0x5c
   b8eca:	7852      	ldrb	r2, [r2, #1]
   b8ecc:	4618      	mov	r0, r3
   b8ece:	e7c9      	b.n	b8e64 <_strtod_l+0x1e4>
   b8ed0:	4638      	mov	r0, r7
   b8ed2:	e7d2      	b.n	b8e7a <_strtod_l+0x1fa>
   b8ed4:	2b08      	cmp	r3, #8
   b8ed6:	dc04      	bgt.n	b8ee2 <_strtod_l+0x262>
   b8ed8:	9e07      	ldr	r6, [sp, #28]
   b8eda:	434e      	muls	r6, r1
   b8edc:	9607      	str	r6, [sp, #28]
   b8ede:	3301      	adds	r3, #1
   b8ee0:	e7e2      	b.n	b8ea8 <_strtod_l+0x228>
   b8ee2:	f103 0c01 	add.w	ip, r3, #1
   b8ee6:	f1bc 0f10 	cmp.w	ip, #16
   b8eea:	bfd8      	it	le
   b8eec:	fb01 f909 	mulle.w	r9, r1, r9
   b8ef0:	e7f5      	b.n	b8ede <_strtod_l+0x25e>
   b8ef2:	2d10      	cmp	r5, #16
   b8ef4:	bfdc      	itt	le
   b8ef6:	230a      	movle	r3, #10
   b8ef8:	fb03 2909 	mlale	r9, r3, r9, r2
   b8efc:	e7e1      	b.n	b8ec2 <_strtod_l+0x242>
   b8efe:	2300      	movs	r3, #0
   b8f00:	9305      	str	r3, [sp, #20]
   b8f02:	2301      	movs	r3, #1
   b8f04:	e77c      	b.n	b8e00 <_strtod_l+0x180>
   b8f06:	f04f 0c00 	mov.w	ip, #0
   b8f0a:	f108 0202 	add.w	r2, r8, #2
   b8f0e:	9217      	str	r2, [sp, #92]	; 0x5c
   b8f10:	f898 2002 	ldrb.w	r2, [r8, #2]
   b8f14:	e785      	b.n	b8e22 <_strtod_l+0x1a2>
   b8f16:	f04f 0c01 	mov.w	ip, #1
   b8f1a:	e7f6      	b.n	b8f0a <_strtod_l+0x28a>
   b8f1c:	000bb7b0 	.word	0x000bb7b0
   b8f20:	000bb5e8 	.word	0x000bb5e8
   b8f24:	7ff00000 	.word	0x7ff00000
   b8f28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8f2a:	1c51      	adds	r1, r2, #1
   b8f2c:	9117      	str	r1, [sp, #92]	; 0x5c
   b8f2e:	7852      	ldrb	r2, [r2, #1]
   b8f30:	2a30      	cmp	r2, #48	; 0x30
   b8f32:	d0f9      	beq.n	b8f28 <_strtod_l+0x2a8>
   b8f34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8f38:	2908      	cmp	r1, #8
   b8f3a:	f63f af79 	bhi.w	b8e30 <_strtod_l+0x1b0>
   b8f3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b8f42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8f44:	9206      	str	r2, [sp, #24]
   b8f46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8f48:	1c51      	adds	r1, r2, #1
   b8f4a:	9117      	str	r1, [sp, #92]	; 0x5c
   b8f4c:	7852      	ldrb	r2, [r2, #1]
   b8f4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b8f52:	2e09      	cmp	r6, #9
   b8f54:	d937      	bls.n	b8fc6 <_strtod_l+0x346>
   b8f56:	9e06      	ldr	r6, [sp, #24]
   b8f58:	1b89      	subs	r1, r1, r6
   b8f5a:	2908      	cmp	r1, #8
   b8f5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8f60:	dc02      	bgt.n	b8f68 <_strtod_l+0x2e8>
   b8f62:	4576      	cmp	r6, lr
   b8f64:	bfa8      	it	ge
   b8f66:	4676      	movge	r6, lr
   b8f68:	f1bc 0f00 	cmp.w	ip, #0
   b8f6c:	d000      	beq.n	b8f70 <_strtod_l+0x2f0>
   b8f6e:	4276      	negs	r6, r6
   b8f70:	2d00      	cmp	r5, #0
   b8f72:	d14d      	bne.n	b9010 <_strtod_l+0x390>
   b8f74:	9904      	ldr	r1, [sp, #16]
   b8f76:	4301      	orrs	r1, r0
   b8f78:	f47f aec6 	bne.w	b8d08 <_strtod_l+0x88>
   b8f7c:	2b00      	cmp	r3, #0
   b8f7e:	f47f aee1 	bne.w	b8d44 <_strtod_l+0xc4>
   b8f82:	2a69      	cmp	r2, #105	; 0x69
   b8f84:	d027      	beq.n	b8fd6 <_strtod_l+0x356>
   b8f86:	dc24      	bgt.n	b8fd2 <_strtod_l+0x352>
   b8f88:	2a49      	cmp	r2, #73	; 0x49
   b8f8a:	d024      	beq.n	b8fd6 <_strtod_l+0x356>
   b8f8c:	2a4e      	cmp	r2, #78	; 0x4e
   b8f8e:	f47f aed9 	bne.w	b8d44 <_strtod_l+0xc4>
   b8f92:	499f      	ldr	r1, [pc, #636]	; (b9210 <_strtod_l+0x590>)
   b8f94:	a817      	add	r0, sp, #92	; 0x5c
   b8f96:	f001 f833 	bl	ba000 <__match>
   b8f9a:	2800      	cmp	r0, #0
   b8f9c:	f43f aed2 	beq.w	b8d44 <_strtod_l+0xc4>
   b8fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8fa2:	781b      	ldrb	r3, [r3, #0]
   b8fa4:	2b28      	cmp	r3, #40	; 0x28
   b8fa6:	d12d      	bne.n	b9004 <_strtod_l+0x384>
   b8fa8:	499a      	ldr	r1, [pc, #616]	; (b9214 <_strtod_l+0x594>)
   b8faa:	aa1a      	add	r2, sp, #104	; 0x68
   b8fac:	a817      	add	r0, sp, #92	; 0x5c
   b8fae:	f001 f83b 	bl	ba028 <__hexnan>
   b8fb2:	2805      	cmp	r0, #5
   b8fb4:	d126      	bne.n	b9004 <_strtod_l+0x384>
   b8fb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b8fb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b8fbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b8fc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b8fc4:	e6a0      	b.n	b8d08 <_strtod_l+0x88>
   b8fc6:	210a      	movs	r1, #10
   b8fc8:	fb01 2e0e 	mla	lr, r1, lr, r2
   b8fcc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b8fd0:	e7b9      	b.n	b8f46 <_strtod_l+0x2c6>
   b8fd2:	2a6e      	cmp	r2, #110	; 0x6e
   b8fd4:	e7db      	b.n	b8f8e <_strtod_l+0x30e>
   b8fd6:	4990      	ldr	r1, [pc, #576]	; (b9218 <_strtod_l+0x598>)
   b8fd8:	a817      	add	r0, sp, #92	; 0x5c
   b8fda:	f001 f811 	bl	ba000 <__match>
   b8fde:	2800      	cmp	r0, #0
   b8fe0:	f43f aeb0 	beq.w	b8d44 <_strtod_l+0xc4>
   b8fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8fe6:	498d      	ldr	r1, [pc, #564]	; (b921c <_strtod_l+0x59c>)
   b8fe8:	3b01      	subs	r3, #1
   b8fea:	a817      	add	r0, sp, #92	; 0x5c
   b8fec:	9317      	str	r3, [sp, #92]	; 0x5c
   b8fee:	f001 f807 	bl	ba000 <__match>
   b8ff2:	b910      	cbnz	r0, b8ffa <_strtod_l+0x37a>
   b8ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8ff6:	3301      	adds	r3, #1
   b8ff8:	9317      	str	r3, [sp, #92]	; 0x5c
   b8ffa:	f8df b230 	ldr.w	fp, [pc, #560]	; b922c <_strtod_l+0x5ac>
   b8ffe:	f04f 0a00 	mov.w	sl, #0
   b9002:	e681      	b.n	b8d08 <_strtod_l+0x88>
   b9004:	4886      	ldr	r0, [pc, #536]	; (b9220 <_strtod_l+0x5a0>)
   b9006:	f001 fd93 	bl	bab30 <nan>
   b900a:	ec5b ab10 	vmov	sl, fp, d0
   b900e:	e67b      	b.n	b8d08 <_strtod_l+0x88>
   b9010:	9b05      	ldr	r3, [sp, #20]
   b9012:	9807      	ldr	r0, [sp, #28]
   b9014:	1af3      	subs	r3, r6, r3
   b9016:	2f00      	cmp	r7, #0
   b9018:	bf08      	it	eq
   b901a:	462f      	moveq	r7, r5
   b901c:	2d10      	cmp	r5, #16
   b901e:	9306      	str	r3, [sp, #24]
   b9020:	46a8      	mov	r8, r5
   b9022:	bfa8      	it	ge
   b9024:	f04f 0810 	movge.w	r8, #16
   b9028:	f7fb f93c 	bl	b42a4 <__aeabi_ui2d>
   b902c:	2d09      	cmp	r5, #9
   b902e:	4682      	mov	sl, r0
   b9030:	468b      	mov	fp, r1
   b9032:	dd13      	ble.n	b905c <_strtod_l+0x3dc>
   b9034:	4b7b      	ldr	r3, [pc, #492]	; (b9224 <_strtod_l+0x5a4>)
   b9036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b903a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b903e:	f7fb f9ab 	bl	b4398 <__aeabi_dmul>
   b9042:	4682      	mov	sl, r0
   b9044:	4648      	mov	r0, r9
   b9046:	468b      	mov	fp, r1
   b9048:	f7fb f92c 	bl	b42a4 <__aeabi_ui2d>
   b904c:	4602      	mov	r2, r0
   b904e:	460b      	mov	r3, r1
   b9050:	4650      	mov	r0, sl
   b9052:	4659      	mov	r1, fp
   b9054:	f7fa ffea 	bl	b402c <__adddf3>
   b9058:	4682      	mov	sl, r0
   b905a:	468b      	mov	fp, r1
   b905c:	2d0f      	cmp	r5, #15
   b905e:	dc38      	bgt.n	b90d2 <_strtod_l+0x452>
   b9060:	9b06      	ldr	r3, [sp, #24]
   b9062:	2b00      	cmp	r3, #0
   b9064:	f43f ae50 	beq.w	b8d08 <_strtod_l+0x88>
   b9068:	dd24      	ble.n	b90b4 <_strtod_l+0x434>
   b906a:	2b16      	cmp	r3, #22
   b906c:	dc0b      	bgt.n	b9086 <_strtod_l+0x406>
   b906e:	496d      	ldr	r1, [pc, #436]	; (b9224 <_strtod_l+0x5a4>)
   b9070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9074:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9078:	4652      	mov	r2, sl
   b907a:	465b      	mov	r3, fp
   b907c:	f7fb f98c 	bl	b4398 <__aeabi_dmul>
   b9080:	4682      	mov	sl, r0
   b9082:	468b      	mov	fp, r1
   b9084:	e640      	b.n	b8d08 <_strtod_l+0x88>
   b9086:	9a06      	ldr	r2, [sp, #24]
   b9088:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b908c:	4293      	cmp	r3, r2
   b908e:	db20      	blt.n	b90d2 <_strtod_l+0x452>
   b9090:	4c64      	ldr	r4, [pc, #400]	; (b9224 <_strtod_l+0x5a4>)
   b9092:	f1c5 050f 	rsb	r5, r5, #15
   b9096:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b909a:	4652      	mov	r2, sl
   b909c:	465b      	mov	r3, fp
   b909e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b90a2:	f7fb f979 	bl	b4398 <__aeabi_dmul>
   b90a6:	9b06      	ldr	r3, [sp, #24]
   b90a8:	1b5d      	subs	r5, r3, r5
   b90aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b90ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   b90b2:	e7e3      	b.n	b907c <_strtod_l+0x3fc>
   b90b4:	9b06      	ldr	r3, [sp, #24]
   b90b6:	3316      	adds	r3, #22
   b90b8:	db0b      	blt.n	b90d2 <_strtod_l+0x452>
   b90ba:	9b05      	ldr	r3, [sp, #20]
   b90bc:	1b9e      	subs	r6, r3, r6
   b90be:	4b59      	ldr	r3, [pc, #356]	; (b9224 <_strtod_l+0x5a4>)
   b90c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b90c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   b90c8:	4650      	mov	r0, sl
   b90ca:	4659      	mov	r1, fp
   b90cc:	f7fb fa8e 	bl	b45ec <__aeabi_ddiv>
   b90d0:	e7d6      	b.n	b9080 <_strtod_l+0x400>
   b90d2:	9b06      	ldr	r3, [sp, #24]
   b90d4:	eba5 0808 	sub.w	r8, r5, r8
   b90d8:	4498      	add	r8, r3
   b90da:	f1b8 0f00 	cmp.w	r8, #0
   b90de:	dd74      	ble.n	b91ca <_strtod_l+0x54a>
   b90e0:	f018 030f 	ands.w	r3, r8, #15
   b90e4:	d00a      	beq.n	b90fc <_strtod_l+0x47c>
   b90e6:	494f      	ldr	r1, [pc, #316]	; (b9224 <_strtod_l+0x5a4>)
   b90e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b90ec:	4652      	mov	r2, sl
   b90ee:	465b      	mov	r3, fp
   b90f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b90f4:	f7fb f950 	bl	b4398 <__aeabi_dmul>
   b90f8:	4682      	mov	sl, r0
   b90fa:	468b      	mov	fp, r1
   b90fc:	f038 080f 	bics.w	r8, r8, #15
   b9100:	d04f      	beq.n	b91a2 <_strtod_l+0x522>
   b9102:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9106:	dd22      	ble.n	b914e <_strtod_l+0x4ce>
   b9108:	2500      	movs	r5, #0
   b910a:	462e      	mov	r6, r5
   b910c:	9507      	str	r5, [sp, #28]
   b910e:	9505      	str	r5, [sp, #20]
   b9110:	2322      	movs	r3, #34	; 0x22
   b9112:	f8df b118 	ldr.w	fp, [pc, #280]	; b922c <_strtod_l+0x5ac>
   b9116:	6023      	str	r3, [r4, #0]
   b9118:	f04f 0a00 	mov.w	sl, #0
   b911c:	9b07      	ldr	r3, [sp, #28]
   b911e:	2b00      	cmp	r3, #0
   b9120:	f43f adf2 	beq.w	b8d08 <_strtod_l+0x88>
   b9124:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9126:	4620      	mov	r0, r4
   b9128:	f001 f870 	bl	ba20c <_Bfree>
   b912c:	9905      	ldr	r1, [sp, #20]
   b912e:	4620      	mov	r0, r4
   b9130:	f001 f86c 	bl	ba20c <_Bfree>
   b9134:	4631      	mov	r1, r6
   b9136:	4620      	mov	r0, r4
   b9138:	f001 f868 	bl	ba20c <_Bfree>
   b913c:	9907      	ldr	r1, [sp, #28]
   b913e:	4620      	mov	r0, r4
   b9140:	f001 f864 	bl	ba20c <_Bfree>
   b9144:	4629      	mov	r1, r5
   b9146:	4620      	mov	r0, r4
   b9148:	f001 f860 	bl	ba20c <_Bfree>
   b914c:	e5dc      	b.n	b8d08 <_strtod_l+0x88>
   b914e:	4b36      	ldr	r3, [pc, #216]	; (b9228 <_strtod_l+0x5a8>)
   b9150:	9304      	str	r3, [sp, #16]
   b9152:	2300      	movs	r3, #0
   b9154:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9158:	4650      	mov	r0, sl
   b915a:	4659      	mov	r1, fp
   b915c:	4699      	mov	r9, r3
   b915e:	f1b8 0f01 	cmp.w	r8, #1
   b9162:	dc21      	bgt.n	b91a8 <_strtod_l+0x528>
   b9164:	b10b      	cbz	r3, b916a <_strtod_l+0x4ea>
   b9166:	4682      	mov	sl, r0
   b9168:	468b      	mov	fp, r1
   b916a:	4b2f      	ldr	r3, [pc, #188]	; (b9228 <_strtod_l+0x5a8>)
   b916c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9170:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9174:	4652      	mov	r2, sl
   b9176:	465b      	mov	r3, fp
   b9178:	e9d9 0100 	ldrd	r0, r1, [r9]
   b917c:	f7fb f90c 	bl	b4398 <__aeabi_dmul>
   b9180:	4b2a      	ldr	r3, [pc, #168]	; (b922c <_strtod_l+0x5ac>)
   b9182:	460a      	mov	r2, r1
   b9184:	400b      	ands	r3, r1
   b9186:	492a      	ldr	r1, [pc, #168]	; (b9230 <_strtod_l+0x5b0>)
   b9188:	428b      	cmp	r3, r1
   b918a:	4682      	mov	sl, r0
   b918c:	d8bc      	bhi.n	b9108 <_strtod_l+0x488>
   b918e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9192:	428b      	cmp	r3, r1
   b9194:	bf86      	itte	hi
   b9196:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9234 <_strtod_l+0x5b4>
   b919a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b919e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b91a2:	2300      	movs	r3, #0
   b91a4:	9304      	str	r3, [sp, #16]
   b91a6:	e084      	b.n	b92b2 <_strtod_l+0x632>
   b91a8:	f018 0f01 	tst.w	r8, #1
   b91ac:	d005      	beq.n	b91ba <_strtod_l+0x53a>
   b91ae:	9b04      	ldr	r3, [sp, #16]
   b91b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b91b4:	f7fb f8f0 	bl	b4398 <__aeabi_dmul>
   b91b8:	2301      	movs	r3, #1
   b91ba:	9a04      	ldr	r2, [sp, #16]
   b91bc:	3208      	adds	r2, #8
   b91be:	f109 0901 	add.w	r9, r9, #1
   b91c2:	ea4f 0868 	mov.w	r8, r8, asr #1
   b91c6:	9204      	str	r2, [sp, #16]
   b91c8:	e7c9      	b.n	b915e <_strtod_l+0x4de>
   b91ca:	d0ea      	beq.n	b91a2 <_strtod_l+0x522>
   b91cc:	f1c8 0800 	rsb	r8, r8, #0
   b91d0:	f018 020f 	ands.w	r2, r8, #15
   b91d4:	d00a      	beq.n	b91ec <_strtod_l+0x56c>
   b91d6:	4b13      	ldr	r3, [pc, #76]	; (b9224 <_strtod_l+0x5a4>)
   b91d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b91dc:	4650      	mov	r0, sl
   b91de:	4659      	mov	r1, fp
   b91e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b91e4:	f7fb fa02 	bl	b45ec <__aeabi_ddiv>
   b91e8:	4682      	mov	sl, r0
   b91ea:	468b      	mov	fp, r1
   b91ec:	ea5f 1828 	movs.w	r8, r8, asr #4
   b91f0:	d0d7      	beq.n	b91a2 <_strtod_l+0x522>
   b91f2:	f1b8 0f1f 	cmp.w	r8, #31
   b91f6:	dd1f      	ble.n	b9238 <_strtod_l+0x5b8>
   b91f8:	2500      	movs	r5, #0
   b91fa:	462e      	mov	r6, r5
   b91fc:	9507      	str	r5, [sp, #28]
   b91fe:	9505      	str	r5, [sp, #20]
   b9200:	2322      	movs	r3, #34	; 0x22
   b9202:	f04f 0a00 	mov.w	sl, #0
   b9206:	f04f 0b00 	mov.w	fp, #0
   b920a:	6023      	str	r3, [r4, #0]
   b920c:	e786      	b.n	b911c <_strtod_l+0x49c>
   b920e:	bf00      	nop
   b9210:	000bb5e4 	.word	0x000bb5e4
   b9214:	000bb5fc 	.word	0x000bb5fc
   b9218:	000bb5db 	.word	0x000bb5db
   b921c:	000bb5de 	.word	0x000bb5de
   b9220:	000bb4d8 	.word	0x000bb4d8
   b9224:	000bb848 	.word	0x000bb848
   b9228:	000bb820 	.word	0x000bb820
   b922c:	7ff00000 	.word	0x7ff00000
   b9230:	7ca00000 	.word	0x7ca00000
   b9234:	7fefffff 	.word	0x7fefffff
   b9238:	f018 0310 	ands.w	r3, r8, #16
   b923c:	bf18      	it	ne
   b923e:	236a      	movne	r3, #106	; 0x6a
   b9240:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b95f0 <_strtod_l+0x970>
   b9244:	9304      	str	r3, [sp, #16]
   b9246:	4650      	mov	r0, sl
   b9248:	4659      	mov	r1, fp
   b924a:	2300      	movs	r3, #0
   b924c:	f018 0f01 	tst.w	r8, #1
   b9250:	d004      	beq.n	b925c <_strtod_l+0x5dc>
   b9252:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9256:	f7fb f89f 	bl	b4398 <__aeabi_dmul>
   b925a:	2301      	movs	r3, #1
   b925c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9260:	f109 0908 	add.w	r9, r9, #8
   b9264:	d1f2      	bne.n	b924c <_strtod_l+0x5cc>
   b9266:	b10b      	cbz	r3, b926c <_strtod_l+0x5ec>
   b9268:	4682      	mov	sl, r0
   b926a:	468b      	mov	fp, r1
   b926c:	9b04      	ldr	r3, [sp, #16]
   b926e:	b1c3      	cbz	r3, b92a2 <_strtod_l+0x622>
   b9270:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9274:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9278:	2b00      	cmp	r3, #0
   b927a:	4659      	mov	r1, fp
   b927c:	dd11      	ble.n	b92a2 <_strtod_l+0x622>
   b927e:	2b1f      	cmp	r3, #31
   b9280:	f340 8124 	ble.w	b94cc <_strtod_l+0x84c>
   b9284:	2b34      	cmp	r3, #52	; 0x34
   b9286:	bfde      	ittt	le
   b9288:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b928c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b9290:	fa03 f202 	lslle.w	r2, r3, r2
   b9294:	f04f 0a00 	mov.w	sl, #0
   b9298:	bfcc      	ite	gt
   b929a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b929e:	ea02 0b01 	andle.w	fp, r2, r1
   b92a2:	2200      	movs	r2, #0
   b92a4:	2300      	movs	r3, #0
   b92a6:	4650      	mov	r0, sl
   b92a8:	4659      	mov	r1, fp
   b92aa:	f7fb fadd 	bl	b4868 <__aeabi_dcmpeq>
   b92ae:	2800      	cmp	r0, #0
   b92b0:	d1a2      	bne.n	b91f8 <_strtod_l+0x578>
   b92b2:	9b07      	ldr	r3, [sp, #28]
   b92b4:	9300      	str	r3, [sp, #0]
   b92b6:	9908      	ldr	r1, [sp, #32]
   b92b8:	462b      	mov	r3, r5
   b92ba:	463a      	mov	r2, r7
   b92bc:	4620      	mov	r0, r4
   b92be:	f001 f80d 	bl	ba2dc <__s2b>
   b92c2:	9007      	str	r0, [sp, #28]
   b92c4:	2800      	cmp	r0, #0
   b92c6:	f43f af1f 	beq.w	b9108 <_strtod_l+0x488>
   b92ca:	9b05      	ldr	r3, [sp, #20]
   b92cc:	1b9e      	subs	r6, r3, r6
   b92ce:	9b06      	ldr	r3, [sp, #24]
   b92d0:	2b00      	cmp	r3, #0
   b92d2:	bfb4      	ite	lt
   b92d4:	4633      	movlt	r3, r6
   b92d6:	2300      	movge	r3, #0
   b92d8:	930c      	str	r3, [sp, #48]	; 0x30
   b92da:	9b06      	ldr	r3, [sp, #24]
   b92dc:	2500      	movs	r5, #0
   b92de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b92e2:	9312      	str	r3, [sp, #72]	; 0x48
   b92e4:	462e      	mov	r6, r5
   b92e6:	9b07      	ldr	r3, [sp, #28]
   b92e8:	4620      	mov	r0, r4
   b92ea:	6859      	ldr	r1, [r3, #4]
   b92ec:	f000 ff4e 	bl	ba18c <_Balloc>
   b92f0:	9005      	str	r0, [sp, #20]
   b92f2:	2800      	cmp	r0, #0
   b92f4:	f43f af0c 	beq.w	b9110 <_strtod_l+0x490>
   b92f8:	9b07      	ldr	r3, [sp, #28]
   b92fa:	691a      	ldr	r2, [r3, #16]
   b92fc:	3202      	adds	r2, #2
   b92fe:	f103 010c 	add.w	r1, r3, #12
   b9302:	0092      	lsls	r2, r2, #2
   b9304:	300c      	adds	r0, #12
   b9306:	f7ff fbf5 	bl	b8af4 <memcpy>
   b930a:	ec4b ab10 	vmov	d0, sl, fp
   b930e:	aa1a      	add	r2, sp, #104	; 0x68
   b9310:	a919      	add	r1, sp, #100	; 0x64
   b9312:	4620      	mov	r0, r4
   b9314:	f001 fb28 	bl	ba968 <__d2b>
   b9318:	ec4b ab18 	vmov	d8, sl, fp
   b931c:	9018      	str	r0, [sp, #96]	; 0x60
   b931e:	2800      	cmp	r0, #0
   b9320:	f43f aef6 	beq.w	b9110 <_strtod_l+0x490>
   b9324:	2101      	movs	r1, #1
   b9326:	4620      	mov	r0, r4
   b9328:	f001 f872 	bl	ba410 <__i2b>
   b932c:	4606      	mov	r6, r0
   b932e:	2800      	cmp	r0, #0
   b9330:	f43f aeee 	beq.w	b9110 <_strtod_l+0x490>
   b9334:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9336:	9904      	ldr	r1, [sp, #16]
   b9338:	2b00      	cmp	r3, #0
   b933a:	bfab      	itete	ge
   b933c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b933e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9340:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9342:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9346:	bfac      	ite	ge
   b9348:	eb03 0902 	addge.w	r9, r3, r2
   b934c:	1ad7      	sublt	r7, r2, r3
   b934e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9350:	eba3 0801 	sub.w	r8, r3, r1
   b9354:	4490      	add	r8, r2
   b9356:	4ba1      	ldr	r3, [pc, #644]	; (b95dc <_strtod_l+0x95c>)
   b9358:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b935c:	4598      	cmp	r8, r3
   b935e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9362:	f280 80c7 	bge.w	b94f4 <_strtod_l+0x874>
   b9366:	eba3 0308 	sub.w	r3, r3, r8
   b936a:	2b1f      	cmp	r3, #31
   b936c:	eba2 0203 	sub.w	r2, r2, r3
   b9370:	f04f 0101 	mov.w	r1, #1
   b9374:	f300 80b1 	bgt.w	b94da <_strtod_l+0x85a>
   b9378:	fa01 f303 	lsl.w	r3, r1, r3
   b937c:	930d      	str	r3, [sp, #52]	; 0x34
   b937e:	2300      	movs	r3, #0
   b9380:	9308      	str	r3, [sp, #32]
   b9382:	eb09 0802 	add.w	r8, r9, r2
   b9386:	9b04      	ldr	r3, [sp, #16]
   b9388:	45c1      	cmp	r9, r8
   b938a:	4417      	add	r7, r2
   b938c:	441f      	add	r7, r3
   b938e:	464b      	mov	r3, r9
   b9390:	bfa8      	it	ge
   b9392:	4643      	movge	r3, r8
   b9394:	42bb      	cmp	r3, r7
   b9396:	bfa8      	it	ge
   b9398:	463b      	movge	r3, r7
   b939a:	2b00      	cmp	r3, #0
   b939c:	bfc2      	ittt	gt
   b939e:	eba8 0803 	subgt.w	r8, r8, r3
   b93a2:	1aff      	subgt	r7, r7, r3
   b93a4:	eba9 0903 	subgt.w	r9, r9, r3
   b93a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b93aa:	2b00      	cmp	r3, #0
   b93ac:	dd17      	ble.n	b93de <_strtod_l+0x75e>
   b93ae:	4631      	mov	r1, r6
   b93b0:	461a      	mov	r2, r3
   b93b2:	4620      	mov	r0, r4
   b93b4:	f001 f8ec 	bl	ba590 <__pow5mult>
   b93b8:	4606      	mov	r6, r0
   b93ba:	2800      	cmp	r0, #0
   b93bc:	f43f aea8 	beq.w	b9110 <_strtod_l+0x490>
   b93c0:	4601      	mov	r1, r0
   b93c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b93c4:	4620      	mov	r0, r4
   b93c6:	f001 f839 	bl	ba43c <__multiply>
   b93ca:	900b      	str	r0, [sp, #44]	; 0x2c
   b93cc:	2800      	cmp	r0, #0
   b93ce:	f43f ae9f 	beq.w	b9110 <_strtod_l+0x490>
   b93d2:	9918      	ldr	r1, [sp, #96]	; 0x60
   b93d4:	4620      	mov	r0, r4
   b93d6:	f000 ff19 	bl	ba20c <_Bfree>
   b93da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b93dc:	9318      	str	r3, [sp, #96]	; 0x60
   b93de:	f1b8 0f00 	cmp.w	r8, #0
   b93e2:	f300 808c 	bgt.w	b94fe <_strtod_l+0x87e>
   b93e6:	9b06      	ldr	r3, [sp, #24]
   b93e8:	2b00      	cmp	r3, #0
   b93ea:	dd08      	ble.n	b93fe <_strtod_l+0x77e>
   b93ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b93ee:	9905      	ldr	r1, [sp, #20]
   b93f0:	4620      	mov	r0, r4
   b93f2:	f001 f8cd 	bl	ba590 <__pow5mult>
   b93f6:	9005      	str	r0, [sp, #20]
   b93f8:	2800      	cmp	r0, #0
   b93fa:	f43f ae89 	beq.w	b9110 <_strtod_l+0x490>
   b93fe:	2f00      	cmp	r7, #0
   b9400:	dd08      	ble.n	b9414 <_strtod_l+0x794>
   b9402:	9905      	ldr	r1, [sp, #20]
   b9404:	463a      	mov	r2, r7
   b9406:	4620      	mov	r0, r4
   b9408:	f001 f91c 	bl	ba644 <__lshift>
   b940c:	9005      	str	r0, [sp, #20]
   b940e:	2800      	cmp	r0, #0
   b9410:	f43f ae7e 	beq.w	b9110 <_strtod_l+0x490>
   b9414:	f1b9 0f00 	cmp.w	r9, #0
   b9418:	dd08      	ble.n	b942c <_strtod_l+0x7ac>
   b941a:	4631      	mov	r1, r6
   b941c:	464a      	mov	r2, r9
   b941e:	4620      	mov	r0, r4
   b9420:	f001 f910 	bl	ba644 <__lshift>
   b9424:	4606      	mov	r6, r0
   b9426:	2800      	cmp	r0, #0
   b9428:	f43f ae72 	beq.w	b9110 <_strtod_l+0x490>
   b942c:	9a05      	ldr	r2, [sp, #20]
   b942e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9430:	4620      	mov	r0, r4
   b9432:	f001 f993 	bl	ba75c <__mdiff>
   b9436:	4605      	mov	r5, r0
   b9438:	2800      	cmp	r0, #0
   b943a:	f43f ae69 	beq.w	b9110 <_strtod_l+0x490>
   b943e:	68c3      	ldr	r3, [r0, #12]
   b9440:	930b      	str	r3, [sp, #44]	; 0x2c
   b9442:	2300      	movs	r3, #0
   b9444:	60c3      	str	r3, [r0, #12]
   b9446:	4631      	mov	r1, r6
   b9448:	f001 f96c 	bl	ba724 <__mcmp>
   b944c:	2800      	cmp	r0, #0
   b944e:	da60      	bge.n	b9512 <_strtod_l+0x892>
   b9450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9452:	ea53 030a 	orrs.w	r3, r3, sl
   b9456:	f040 8082 	bne.w	b955e <_strtod_l+0x8de>
   b945a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b945e:	2b00      	cmp	r3, #0
   b9460:	d17d      	bne.n	b955e <_strtod_l+0x8de>
   b9462:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9466:	0d1b      	lsrs	r3, r3, #20
   b9468:	051b      	lsls	r3, r3, #20
   b946a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b946e:	d976      	bls.n	b955e <_strtod_l+0x8de>
   b9470:	696b      	ldr	r3, [r5, #20]
   b9472:	b913      	cbnz	r3, b947a <_strtod_l+0x7fa>
   b9474:	692b      	ldr	r3, [r5, #16]
   b9476:	2b01      	cmp	r3, #1
   b9478:	dd71      	ble.n	b955e <_strtod_l+0x8de>
   b947a:	4629      	mov	r1, r5
   b947c:	2201      	movs	r2, #1
   b947e:	4620      	mov	r0, r4
   b9480:	f001 f8e0 	bl	ba644 <__lshift>
   b9484:	4631      	mov	r1, r6
   b9486:	4605      	mov	r5, r0
   b9488:	f001 f94c 	bl	ba724 <__mcmp>
   b948c:	2800      	cmp	r0, #0
   b948e:	dd66      	ble.n	b955e <_strtod_l+0x8de>
   b9490:	9904      	ldr	r1, [sp, #16]
   b9492:	4a53      	ldr	r2, [pc, #332]	; (b95e0 <_strtod_l+0x960>)
   b9494:	465b      	mov	r3, fp
   b9496:	2900      	cmp	r1, #0
   b9498:	f000 8081 	beq.w	b959e <_strtod_l+0x91e>
   b949c:	ea02 010b 	and.w	r1, r2, fp
   b94a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b94a4:	dc7b      	bgt.n	b959e <_strtod_l+0x91e>
   b94a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b94aa:	f77f aea9 	ble.w	b9200 <_strtod_l+0x580>
   b94ae:	4b4d      	ldr	r3, [pc, #308]	; (b95e4 <_strtod_l+0x964>)
   b94b0:	4650      	mov	r0, sl
   b94b2:	4659      	mov	r1, fp
   b94b4:	2200      	movs	r2, #0
   b94b6:	f7fa ff6f 	bl	b4398 <__aeabi_dmul>
   b94ba:	460b      	mov	r3, r1
   b94bc:	4303      	orrs	r3, r0
   b94be:	bf08      	it	eq
   b94c0:	2322      	moveq	r3, #34	; 0x22
   b94c2:	4682      	mov	sl, r0
   b94c4:	468b      	mov	fp, r1
   b94c6:	bf08      	it	eq
   b94c8:	6023      	streq	r3, [r4, #0]
   b94ca:	e62b      	b.n	b9124 <_strtod_l+0x4a4>
   b94cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b94d0:	fa02 f303 	lsl.w	r3, r2, r3
   b94d4:	ea03 0a0a 	and.w	sl, r3, sl
   b94d8:	e6e3      	b.n	b92a2 <_strtod_l+0x622>
   b94da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b94de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b94e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b94e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b94ea:	fa01 f308 	lsl.w	r3, r1, r8
   b94ee:	9308      	str	r3, [sp, #32]
   b94f0:	910d      	str	r1, [sp, #52]	; 0x34
   b94f2:	e746      	b.n	b9382 <_strtod_l+0x702>
   b94f4:	2300      	movs	r3, #0
   b94f6:	9308      	str	r3, [sp, #32]
   b94f8:	2301      	movs	r3, #1
   b94fa:	930d      	str	r3, [sp, #52]	; 0x34
   b94fc:	e741      	b.n	b9382 <_strtod_l+0x702>
   b94fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9500:	4642      	mov	r2, r8
   b9502:	4620      	mov	r0, r4
   b9504:	f001 f89e 	bl	ba644 <__lshift>
   b9508:	9018      	str	r0, [sp, #96]	; 0x60
   b950a:	2800      	cmp	r0, #0
   b950c:	f47f af6b 	bne.w	b93e6 <_strtod_l+0x766>
   b9510:	e5fe      	b.n	b9110 <_strtod_l+0x490>
   b9512:	465f      	mov	r7, fp
   b9514:	d16e      	bne.n	b95f4 <_strtod_l+0x974>
   b9516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9518:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b951c:	b342      	cbz	r2, b9570 <_strtod_l+0x8f0>
   b951e:	4a32      	ldr	r2, [pc, #200]	; (b95e8 <_strtod_l+0x968>)
   b9520:	4293      	cmp	r3, r2
   b9522:	d128      	bne.n	b9576 <_strtod_l+0x8f6>
   b9524:	9b04      	ldr	r3, [sp, #16]
   b9526:	4651      	mov	r1, sl
   b9528:	b1eb      	cbz	r3, b9566 <_strtod_l+0x8e6>
   b952a:	4b2d      	ldr	r3, [pc, #180]	; (b95e0 <_strtod_l+0x960>)
   b952c:	403b      	ands	r3, r7
   b952e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9536:	d819      	bhi.n	b956c <_strtod_l+0x8ec>
   b9538:	0d1b      	lsrs	r3, r3, #20
   b953a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b953e:	fa02 f303 	lsl.w	r3, r2, r3
   b9542:	4299      	cmp	r1, r3
   b9544:	d117      	bne.n	b9576 <_strtod_l+0x8f6>
   b9546:	4b29      	ldr	r3, [pc, #164]	; (b95ec <_strtod_l+0x96c>)
   b9548:	429f      	cmp	r7, r3
   b954a:	d102      	bne.n	b9552 <_strtod_l+0x8d2>
   b954c:	3101      	adds	r1, #1
   b954e:	f43f addf 	beq.w	b9110 <_strtod_l+0x490>
   b9552:	4b23      	ldr	r3, [pc, #140]	; (b95e0 <_strtod_l+0x960>)
   b9554:	403b      	ands	r3, r7
   b9556:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b955a:	f04f 0a00 	mov.w	sl, #0
   b955e:	9b04      	ldr	r3, [sp, #16]
   b9560:	2b00      	cmp	r3, #0
   b9562:	d1a4      	bne.n	b94ae <_strtod_l+0x82e>
   b9564:	e5de      	b.n	b9124 <_strtod_l+0x4a4>
   b9566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b956a:	e7ea      	b.n	b9542 <_strtod_l+0x8c2>
   b956c:	4613      	mov	r3, r2
   b956e:	e7e8      	b.n	b9542 <_strtod_l+0x8c2>
   b9570:	ea53 030a 	orrs.w	r3, r3, sl
   b9574:	d08c      	beq.n	b9490 <_strtod_l+0x810>
   b9576:	9b08      	ldr	r3, [sp, #32]
   b9578:	b1db      	cbz	r3, b95b2 <_strtod_l+0x932>
   b957a:	423b      	tst	r3, r7
   b957c:	d0ef      	beq.n	b955e <_strtod_l+0x8de>
   b957e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9580:	9a04      	ldr	r2, [sp, #16]
   b9582:	4650      	mov	r0, sl
   b9584:	4659      	mov	r1, fp
   b9586:	b1c3      	cbz	r3, b95ba <_strtod_l+0x93a>
   b9588:	f7ff fb5e 	bl	b8c48 <sulp>
   b958c:	4602      	mov	r2, r0
   b958e:	460b      	mov	r3, r1
   b9590:	ec51 0b18 	vmov	r0, r1, d8
   b9594:	f7fa fd4a 	bl	b402c <__adddf3>
   b9598:	4682      	mov	sl, r0
   b959a:	468b      	mov	fp, r1
   b959c:	e7df      	b.n	b955e <_strtod_l+0x8de>
   b959e:	4013      	ands	r3, r2
   b95a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b95a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b95a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b95ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b95b0:	e7d5      	b.n	b955e <_strtod_l+0x8de>
   b95b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b95b4:	ea13 0f0a 	tst.w	r3, sl
   b95b8:	e7e0      	b.n	b957c <_strtod_l+0x8fc>
   b95ba:	f7ff fb45 	bl	b8c48 <sulp>
   b95be:	4602      	mov	r2, r0
   b95c0:	460b      	mov	r3, r1
   b95c2:	ec51 0b18 	vmov	r0, r1, d8
   b95c6:	f7fa fd2f 	bl	b4028 <__aeabi_dsub>
   b95ca:	2200      	movs	r2, #0
   b95cc:	2300      	movs	r3, #0
   b95ce:	4682      	mov	sl, r0
   b95d0:	468b      	mov	fp, r1
   b95d2:	f7fb f949 	bl	b4868 <__aeabi_dcmpeq>
   b95d6:	2800      	cmp	r0, #0
   b95d8:	d0c1      	beq.n	b955e <_strtod_l+0x8de>
   b95da:	e611      	b.n	b9200 <_strtod_l+0x580>
   b95dc:	fffffc02 	.word	0xfffffc02
   b95e0:	7ff00000 	.word	0x7ff00000
   b95e4:	39500000 	.word	0x39500000
   b95e8:	000fffff 	.word	0x000fffff
   b95ec:	7fefffff 	.word	0x7fefffff
   b95f0:	000bb610 	.word	0x000bb610
   b95f4:	4631      	mov	r1, r6
   b95f6:	4628      	mov	r0, r5
   b95f8:	f001 fa12 	bl	baa20 <__ratio>
   b95fc:	ec59 8b10 	vmov	r8, r9, d0
   b9600:	ee10 0a10 	vmov	r0, s0
   b9604:	2200      	movs	r2, #0
   b9606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b960a:	4649      	mov	r1, r9
   b960c:	f7fb f940 	bl	b4890 <__aeabi_dcmple>
   b9610:	2800      	cmp	r0, #0
   b9612:	d07a      	beq.n	b970a <_strtod_l+0xa8a>
   b9614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9616:	2b00      	cmp	r3, #0
   b9618:	d04a      	beq.n	b96b0 <_strtod_l+0xa30>
   b961a:	4b95      	ldr	r3, [pc, #596]	; (b9870 <_strtod_l+0xbf0>)
   b961c:	2200      	movs	r2, #0
   b961e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9622:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9870 <_strtod_l+0xbf0>
   b9626:	f04f 0800 	mov.w	r8, #0
   b962a:	4b92      	ldr	r3, [pc, #584]	; (b9874 <_strtod_l+0xbf4>)
   b962c:	403b      	ands	r3, r7
   b962e:	930d      	str	r3, [sp, #52]	; 0x34
   b9630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9632:	4b91      	ldr	r3, [pc, #580]	; (b9878 <_strtod_l+0xbf8>)
   b9634:	429a      	cmp	r2, r3
   b9636:	f040 80b0 	bne.w	b979a <_strtod_l+0xb1a>
   b963a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b963e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9642:	ec4b ab10 	vmov	d0, sl, fp
   b9646:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b964a:	f001 f911 	bl	ba870 <__ulp>
   b964e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9652:	ec53 2b10 	vmov	r2, r3, d0
   b9656:	f7fa fe9f 	bl	b4398 <__aeabi_dmul>
   b965a:	4652      	mov	r2, sl
   b965c:	465b      	mov	r3, fp
   b965e:	f7fa fce5 	bl	b402c <__adddf3>
   b9662:	460b      	mov	r3, r1
   b9664:	4983      	ldr	r1, [pc, #524]	; (b9874 <_strtod_l+0xbf4>)
   b9666:	4a85      	ldr	r2, [pc, #532]	; (b987c <_strtod_l+0xbfc>)
   b9668:	4019      	ands	r1, r3
   b966a:	4291      	cmp	r1, r2
   b966c:	4682      	mov	sl, r0
   b966e:	d960      	bls.n	b9732 <_strtod_l+0xab2>
   b9670:	ee18 3a90 	vmov	r3, s17
   b9674:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9678:	4293      	cmp	r3, r2
   b967a:	d104      	bne.n	b9686 <_strtod_l+0xa06>
   b967c:	ee18 3a10 	vmov	r3, s16
   b9680:	3301      	adds	r3, #1
   b9682:	f43f ad45 	beq.w	b9110 <_strtod_l+0x490>
   b9686:	f8df b200 	ldr.w	fp, [pc, #512]	; b9888 <_strtod_l+0xc08>
   b968a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b968e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9690:	4620      	mov	r0, r4
   b9692:	f000 fdbb 	bl	ba20c <_Bfree>
   b9696:	9905      	ldr	r1, [sp, #20]
   b9698:	4620      	mov	r0, r4
   b969a:	f000 fdb7 	bl	ba20c <_Bfree>
   b969e:	4631      	mov	r1, r6
   b96a0:	4620      	mov	r0, r4
   b96a2:	f000 fdb3 	bl	ba20c <_Bfree>
   b96a6:	4629      	mov	r1, r5
   b96a8:	4620      	mov	r0, r4
   b96aa:	f000 fdaf 	bl	ba20c <_Bfree>
   b96ae:	e61a      	b.n	b92e6 <_strtod_l+0x666>
   b96b0:	f1ba 0f00 	cmp.w	sl, #0
   b96b4:	d11b      	bne.n	b96ee <_strtod_l+0xa6e>
   b96b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b96ba:	b9f3      	cbnz	r3, b96fa <_strtod_l+0xa7a>
   b96bc:	4b6c      	ldr	r3, [pc, #432]	; (b9870 <_strtod_l+0xbf0>)
   b96be:	2200      	movs	r2, #0
   b96c0:	4640      	mov	r0, r8
   b96c2:	4649      	mov	r1, r9
   b96c4:	f7fb f8da 	bl	b487c <__aeabi_dcmplt>
   b96c8:	b9d0      	cbnz	r0, b9700 <_strtod_l+0xa80>
   b96ca:	4640      	mov	r0, r8
   b96cc:	4649      	mov	r1, r9
   b96ce:	4b6c      	ldr	r3, [pc, #432]	; (b9880 <_strtod_l+0xc00>)
   b96d0:	2200      	movs	r2, #0
   b96d2:	f7fa fe61 	bl	b4398 <__aeabi_dmul>
   b96d6:	4680      	mov	r8, r0
   b96d8:	4689      	mov	r9, r1
   b96da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b96de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b96e2:	9315      	str	r3, [sp, #84]	; 0x54
   b96e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b96e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b96ec:	e79d      	b.n	b962a <_strtod_l+0x9aa>
   b96ee:	f1ba 0f01 	cmp.w	sl, #1
   b96f2:	d102      	bne.n	b96fa <_strtod_l+0xa7a>
   b96f4:	2f00      	cmp	r7, #0
   b96f6:	f43f ad83 	beq.w	b9200 <_strtod_l+0x580>
   b96fa:	4b62      	ldr	r3, [pc, #392]	; (b9884 <_strtod_l+0xc04>)
   b96fc:	2200      	movs	r2, #0
   b96fe:	e78e      	b.n	b961e <_strtod_l+0x99e>
   b9700:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9880 <_strtod_l+0xc00>
   b9704:	f04f 0800 	mov.w	r8, #0
   b9708:	e7e7      	b.n	b96da <_strtod_l+0xa5a>
   b970a:	4b5d      	ldr	r3, [pc, #372]	; (b9880 <_strtod_l+0xc00>)
   b970c:	4640      	mov	r0, r8
   b970e:	4649      	mov	r1, r9
   b9710:	2200      	movs	r2, #0
   b9712:	f7fa fe41 	bl	b4398 <__aeabi_dmul>
   b9716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9718:	4680      	mov	r8, r0
   b971a:	4689      	mov	r9, r1
   b971c:	b933      	cbnz	r3, b972c <_strtod_l+0xaac>
   b971e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9722:	900e      	str	r0, [sp, #56]	; 0x38
   b9724:	930f      	str	r3, [sp, #60]	; 0x3c
   b9726:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b972a:	e7dd      	b.n	b96e8 <_strtod_l+0xa68>
   b972c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9730:	e7f9      	b.n	b9726 <_strtod_l+0xaa6>
   b9732:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9736:	9b04      	ldr	r3, [sp, #16]
   b9738:	2b00      	cmp	r3, #0
   b973a:	d1a8      	bne.n	b968e <_strtod_l+0xa0e>
   b973c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9742:	0d1b      	lsrs	r3, r3, #20
   b9744:	051b      	lsls	r3, r3, #20
   b9746:	429a      	cmp	r2, r3
   b9748:	d1a1      	bne.n	b968e <_strtod_l+0xa0e>
   b974a:	4640      	mov	r0, r8
   b974c:	4649      	mov	r1, r9
   b974e:	f7fb f95d 	bl	b4a0c <__aeabi_d2lz>
   b9752:	f7fa fdf3 	bl	b433c <__aeabi_l2d>
   b9756:	4602      	mov	r2, r0
   b9758:	460b      	mov	r3, r1
   b975a:	4640      	mov	r0, r8
   b975c:	4649      	mov	r1, r9
   b975e:	f7fa fc63 	bl	b4028 <__aeabi_dsub>
   b9762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9764:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9768:	ea43 030a 	orr.w	r3, r3, sl
   b976c:	4313      	orrs	r3, r2
   b976e:	4680      	mov	r8, r0
   b9770:	4689      	mov	r9, r1
   b9772:	d055      	beq.n	b9820 <_strtod_l+0xba0>
   b9774:	a336      	add	r3, pc, #216	; (adr r3, b9850 <_strtod_l+0xbd0>)
   b9776:	e9d3 2300 	ldrd	r2, r3, [r3]
   b977a:	f7fb f87f 	bl	b487c <__aeabi_dcmplt>
   b977e:	2800      	cmp	r0, #0
   b9780:	f47f acd0 	bne.w	b9124 <_strtod_l+0x4a4>
   b9784:	a334      	add	r3, pc, #208	; (adr r3, b9858 <_strtod_l+0xbd8>)
   b9786:	e9d3 2300 	ldrd	r2, r3, [r3]
   b978a:	4640      	mov	r0, r8
   b978c:	4649      	mov	r1, r9
   b978e:	f7fb f893 	bl	b48b8 <__aeabi_dcmpgt>
   b9792:	2800      	cmp	r0, #0
   b9794:	f43f af7b 	beq.w	b968e <_strtod_l+0xa0e>
   b9798:	e4c4      	b.n	b9124 <_strtod_l+0x4a4>
   b979a:	9b04      	ldr	r3, [sp, #16]
   b979c:	b333      	cbz	r3, b97ec <_strtod_l+0xb6c>
   b979e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b97a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b97a4:	d822      	bhi.n	b97ec <_strtod_l+0xb6c>
   b97a6:	a32e      	add	r3, pc, #184	; (adr r3, b9860 <_strtod_l+0xbe0>)
   b97a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b97ac:	4640      	mov	r0, r8
   b97ae:	4649      	mov	r1, r9
   b97b0:	f7fb f86e 	bl	b4890 <__aeabi_dcmple>
   b97b4:	b1a0      	cbz	r0, b97e0 <_strtod_l+0xb60>
   b97b6:	4649      	mov	r1, r9
   b97b8:	4640      	mov	r0, r8
   b97ba:	f7fb f887 	bl	b48cc <__aeabi_d2uiz>
   b97be:	2801      	cmp	r0, #1
   b97c0:	bf38      	it	cc
   b97c2:	2001      	movcc	r0, #1
   b97c4:	f7fa fd6e 	bl	b42a4 <__aeabi_ui2d>
   b97c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b97ca:	4680      	mov	r8, r0
   b97cc:	4689      	mov	r9, r1
   b97ce:	bb23      	cbnz	r3, b981a <_strtod_l+0xb9a>
   b97d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b97d4:	9010      	str	r0, [sp, #64]	; 0x40
   b97d6:	9311      	str	r3, [sp, #68]	; 0x44
   b97d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b97dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b97e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b97e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b97e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b97e8:	1a9b      	subs	r3, r3, r2
   b97ea:	9309      	str	r3, [sp, #36]	; 0x24
   b97ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b97f0:	eeb0 0a48 	vmov.f32	s0, s16
   b97f4:	eef0 0a68 	vmov.f32	s1, s17
   b97f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b97fc:	f001 f838 	bl	ba870 <__ulp>
   b9800:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9804:	ec53 2b10 	vmov	r2, r3, d0
   b9808:	f7fa fdc6 	bl	b4398 <__aeabi_dmul>
   b980c:	ec53 2b18 	vmov	r2, r3, d8
   b9810:	f7fa fc0c 	bl	b402c <__adddf3>
   b9814:	4682      	mov	sl, r0
   b9816:	468b      	mov	fp, r1
   b9818:	e78d      	b.n	b9736 <_strtod_l+0xab6>
   b981a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b981e:	e7db      	b.n	b97d8 <_strtod_l+0xb58>
   b9820:	a311      	add	r3, pc, #68	; (adr r3, b9868 <_strtod_l+0xbe8>)
   b9822:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9826:	f7fb f829 	bl	b487c <__aeabi_dcmplt>
   b982a:	e7b2      	b.n	b9792 <_strtod_l+0xb12>
   b982c:	2300      	movs	r3, #0
   b982e:	930a      	str	r3, [sp, #40]	; 0x28
   b9830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9834:	6013      	str	r3, [r2, #0]
   b9836:	f7ff ba6b 	b.w	b8d10 <_strtod_l+0x90>
   b983a:	2a65      	cmp	r2, #101	; 0x65
   b983c:	f43f ab5f 	beq.w	b8efe <_strtod_l+0x27e>
   b9840:	2a45      	cmp	r2, #69	; 0x45
   b9842:	f43f ab5c 	beq.w	b8efe <_strtod_l+0x27e>
   b9846:	2301      	movs	r3, #1
   b9848:	f7ff bb94 	b.w	b8f74 <_strtod_l+0x2f4>
   b984c:	f3af 8000 	nop.w
   b9850:	94a03595 	.word	0x94a03595
   b9854:	3fdfffff 	.word	0x3fdfffff
   b9858:	35afe535 	.word	0x35afe535
   b985c:	3fe00000 	.word	0x3fe00000
   b9860:	ffc00000 	.word	0xffc00000
   b9864:	41dfffff 	.word	0x41dfffff
   b9868:	94a03595 	.word	0x94a03595
   b986c:	3fcfffff 	.word	0x3fcfffff
   b9870:	3ff00000 	.word	0x3ff00000
   b9874:	7ff00000 	.word	0x7ff00000
   b9878:	7fe00000 	.word	0x7fe00000
   b987c:	7c9fffff 	.word	0x7c9fffff
   b9880:	3fe00000 	.word	0x3fe00000
   b9884:	bff00000 	.word	0xbff00000
   b9888:	7fefffff 	.word	0x7fefffff

000b988c <strtod>:
   b988c:	460a      	mov	r2, r1
   b988e:	4601      	mov	r1, r0
   b9890:	4802      	ldr	r0, [pc, #8]	; (b989c <strtod+0x10>)
   b9892:	4b03      	ldr	r3, [pc, #12]	; (b98a0 <strtod+0x14>)
   b9894:	6800      	ldr	r0, [r0, #0]
   b9896:	f7ff b9f3 	b.w	b8c80 <_strtod_l>
   b989a:	bf00      	nop
   b989c:	2003e2e4 	.word	0x2003e2e4
   b98a0:	2003e350 	.word	0x2003e350

000b98a4 <_strtol_l.constprop.0>:
   b98a4:	2b01      	cmp	r3, #1
   b98a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b98aa:	d001      	beq.n	b98b0 <_strtol_l.constprop.0+0xc>
   b98ac:	2b24      	cmp	r3, #36	; 0x24
   b98ae:	d906      	bls.n	b98be <_strtol_l.constprop.0+0x1a>
   b98b0:	f7fd fdba 	bl	b7428 <__errno>
   b98b4:	2316      	movs	r3, #22
   b98b6:	6003      	str	r3, [r0, #0]
   b98b8:	2000      	movs	r0, #0
   b98ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b98be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b99a4 <_strtol_l.constprop.0+0x100>
   b98c2:	460d      	mov	r5, r1
   b98c4:	462e      	mov	r6, r5
   b98c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b98ca:	f814 700c 	ldrb.w	r7, [r4, ip]
   b98ce:	f017 0708 	ands.w	r7, r7, #8
   b98d2:	d1f7      	bne.n	b98c4 <_strtol_l.constprop.0+0x20>
   b98d4:	2c2d      	cmp	r4, #45	; 0x2d
   b98d6:	d132      	bne.n	b993e <_strtol_l.constprop.0+0x9a>
   b98d8:	782c      	ldrb	r4, [r5, #0]
   b98da:	2701      	movs	r7, #1
   b98dc:	1cb5      	adds	r5, r6, #2
   b98de:	2b00      	cmp	r3, #0
   b98e0:	d05b      	beq.n	b999a <_strtol_l.constprop.0+0xf6>
   b98e2:	2b10      	cmp	r3, #16
   b98e4:	d109      	bne.n	b98fa <_strtol_l.constprop.0+0x56>
   b98e6:	2c30      	cmp	r4, #48	; 0x30
   b98e8:	d107      	bne.n	b98fa <_strtol_l.constprop.0+0x56>
   b98ea:	782c      	ldrb	r4, [r5, #0]
   b98ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b98f0:	2c58      	cmp	r4, #88	; 0x58
   b98f2:	d14d      	bne.n	b9990 <_strtol_l.constprop.0+0xec>
   b98f4:	786c      	ldrb	r4, [r5, #1]
   b98f6:	2310      	movs	r3, #16
   b98f8:	3502      	adds	r5, #2
   b98fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b98fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9902:	f04f 0c00 	mov.w	ip, #0
   b9906:	fbb8 f9f3 	udiv	r9, r8, r3
   b990a:	4666      	mov	r6, ip
   b990c:	fb03 8a19 	mls	sl, r3, r9, r8
   b9910:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9914:	f1be 0f09 	cmp.w	lr, #9
   b9918:	d816      	bhi.n	b9948 <_strtol_l.constprop.0+0xa4>
   b991a:	4674      	mov	r4, lr
   b991c:	42a3      	cmp	r3, r4
   b991e:	dd24      	ble.n	b996a <_strtol_l.constprop.0+0xc6>
   b9920:	f1bc 0f00 	cmp.w	ip, #0
   b9924:	db1e      	blt.n	b9964 <_strtol_l.constprop.0+0xc0>
   b9926:	45b1      	cmp	r9, r6
   b9928:	d31c      	bcc.n	b9964 <_strtol_l.constprop.0+0xc0>
   b992a:	d101      	bne.n	b9930 <_strtol_l.constprop.0+0x8c>
   b992c:	45a2      	cmp	sl, r4
   b992e:	db19      	blt.n	b9964 <_strtol_l.constprop.0+0xc0>
   b9930:	fb06 4603 	mla	r6, r6, r3, r4
   b9934:	f04f 0c01 	mov.w	ip, #1
   b9938:	f815 4b01 	ldrb.w	r4, [r5], #1
   b993c:	e7e8      	b.n	b9910 <_strtol_l.constprop.0+0x6c>
   b993e:	2c2b      	cmp	r4, #43	; 0x2b
   b9940:	bf04      	itt	eq
   b9942:	782c      	ldrbeq	r4, [r5, #0]
   b9944:	1cb5      	addeq	r5, r6, #2
   b9946:	e7ca      	b.n	b98de <_strtol_l.constprop.0+0x3a>
   b9948:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b994c:	f1be 0f19 	cmp.w	lr, #25
   b9950:	d801      	bhi.n	b9956 <_strtol_l.constprop.0+0xb2>
   b9952:	3c37      	subs	r4, #55	; 0x37
   b9954:	e7e2      	b.n	b991c <_strtol_l.constprop.0+0x78>
   b9956:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b995a:	f1be 0f19 	cmp.w	lr, #25
   b995e:	d804      	bhi.n	b996a <_strtol_l.constprop.0+0xc6>
   b9960:	3c57      	subs	r4, #87	; 0x57
   b9962:	e7db      	b.n	b991c <_strtol_l.constprop.0+0x78>
   b9964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9968:	e7e6      	b.n	b9938 <_strtol_l.constprop.0+0x94>
   b996a:	f1bc 0f00 	cmp.w	ip, #0
   b996e:	da05      	bge.n	b997c <_strtol_l.constprop.0+0xd8>
   b9970:	2322      	movs	r3, #34	; 0x22
   b9972:	6003      	str	r3, [r0, #0]
   b9974:	4646      	mov	r6, r8
   b9976:	b942      	cbnz	r2, b998a <_strtol_l.constprop.0+0xe6>
   b9978:	4630      	mov	r0, r6
   b997a:	e79e      	b.n	b98ba <_strtol_l.constprop.0+0x16>
   b997c:	b107      	cbz	r7, b9980 <_strtol_l.constprop.0+0xdc>
   b997e:	4276      	negs	r6, r6
   b9980:	2a00      	cmp	r2, #0
   b9982:	d0f9      	beq.n	b9978 <_strtol_l.constprop.0+0xd4>
   b9984:	f1bc 0f00 	cmp.w	ip, #0
   b9988:	d000      	beq.n	b998c <_strtol_l.constprop.0+0xe8>
   b998a:	1e69      	subs	r1, r5, #1
   b998c:	6011      	str	r1, [r2, #0]
   b998e:	e7f3      	b.n	b9978 <_strtol_l.constprop.0+0xd4>
   b9990:	2430      	movs	r4, #48	; 0x30
   b9992:	2b00      	cmp	r3, #0
   b9994:	d1b1      	bne.n	b98fa <_strtol_l.constprop.0+0x56>
   b9996:	2308      	movs	r3, #8
   b9998:	e7af      	b.n	b98fa <_strtol_l.constprop.0+0x56>
   b999a:	2c30      	cmp	r4, #48	; 0x30
   b999c:	d0a5      	beq.n	b98ea <_strtol_l.constprop.0+0x46>
   b999e:	230a      	movs	r3, #10
   b99a0:	e7ab      	b.n	b98fa <_strtol_l.constprop.0+0x56>
   b99a2:	bf00      	nop
   b99a4:	000bb639 	.word	0x000bb639

000b99a8 <strtol>:
   b99a8:	4613      	mov	r3, r2
   b99aa:	460a      	mov	r2, r1
   b99ac:	4601      	mov	r1, r0
   b99ae:	4802      	ldr	r0, [pc, #8]	; (b99b8 <strtol+0x10>)
   b99b0:	6800      	ldr	r0, [r0, #0]
   b99b2:	f7ff bf77 	b.w	b98a4 <_strtol_l.constprop.0>
   b99b6:	bf00      	nop
   b99b8:	2003e2e4 	.word	0x2003e2e4

000b99bc <__register_exitproc>:
   b99bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b99c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9a7c <__register_exitproc+0xc0>
   b99c4:	4606      	mov	r6, r0
   b99c6:	f8d8 0000 	ldr.w	r0, [r8]
   b99ca:	461f      	mov	r7, r3
   b99cc:	460d      	mov	r5, r1
   b99ce:	4691      	mov	r9, r2
   b99d0:	f000 fbc6 	bl	ba160 <__retarget_lock_acquire_recursive>
   b99d4:	4b25      	ldr	r3, [pc, #148]	; (b9a6c <__register_exitproc+0xb0>)
   b99d6:	681c      	ldr	r4, [r3, #0]
   b99d8:	b934      	cbnz	r4, b99e8 <__register_exitproc+0x2c>
   b99da:	4c25      	ldr	r4, [pc, #148]	; (b9a70 <__register_exitproc+0xb4>)
   b99dc:	601c      	str	r4, [r3, #0]
   b99de:	4b25      	ldr	r3, [pc, #148]	; (b9a74 <__register_exitproc+0xb8>)
   b99e0:	b113      	cbz	r3, b99e8 <__register_exitproc+0x2c>
   b99e2:	681b      	ldr	r3, [r3, #0]
   b99e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b99e8:	6863      	ldr	r3, [r4, #4]
   b99ea:	2b1f      	cmp	r3, #31
   b99ec:	dd07      	ble.n	b99fe <__register_exitproc+0x42>
   b99ee:	f8d8 0000 	ldr.w	r0, [r8]
   b99f2:	f000 fbb7 	bl	ba164 <__retarget_lock_release_recursive>
   b99f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b99fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b99fe:	b34e      	cbz	r6, b9a54 <__register_exitproc+0x98>
   b9a00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9a04:	b988      	cbnz	r0, b9a2a <__register_exitproc+0x6e>
   b9a06:	4b1c      	ldr	r3, [pc, #112]	; (b9a78 <__register_exitproc+0xbc>)
   b9a08:	b923      	cbnz	r3, b9a14 <__register_exitproc+0x58>
   b9a0a:	f8d8 0000 	ldr.w	r0, [r8]
   b9a0e:	f000 fba8 	bl	ba162 <__retarget_lock_release>
   b9a12:	e7f0      	b.n	b99f6 <__register_exitproc+0x3a>
   b9a14:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9a18:	f7fd fcce 	bl	b73b8 <malloc>
   b9a1c:	2800      	cmp	r0, #0
   b9a1e:	d0f4      	beq.n	b9a0a <__register_exitproc+0x4e>
   b9a20:	2300      	movs	r3, #0
   b9a22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9a26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9a2a:	6863      	ldr	r3, [r4, #4]
   b9a2c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9a30:	2201      	movs	r2, #1
   b9a32:	409a      	lsls	r2, r3
   b9a34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9a38:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9a3c:	4313      	orrs	r3, r2
   b9a3e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9a42:	2e02      	cmp	r6, #2
   b9a44:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9a48:	bf02      	ittt	eq
   b9a4a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9a4e:	4313      	orreq	r3, r2
   b9a50:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9a54:	6863      	ldr	r3, [r4, #4]
   b9a56:	f8d8 0000 	ldr.w	r0, [r8]
   b9a5a:	1c5a      	adds	r2, r3, #1
   b9a5c:	3302      	adds	r3, #2
   b9a5e:	6062      	str	r2, [r4, #4]
   b9a60:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9a64:	f000 fb7e 	bl	ba164 <__retarget_lock_release_recursive>
   b9a68:	2000      	movs	r0, #0
   b9a6a:	e7c6      	b.n	b99fa <__register_exitproc+0x3e>
   b9a6c:	2003e7ec 	.word	0x2003e7ec
   b9a70:	2003e760 	.word	0x2003e760
   b9a74:	00000000 	.word	0x00000000
   b9a78:	000b73b9 	.word	0x000b73b9
   b9a7c:	2003e348 	.word	0x2003e348

000b9a80 <rshift>:
   b9a80:	6903      	ldr	r3, [r0, #16]
   b9a82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9a86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9a8a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9a8e:	f100 0414 	add.w	r4, r0, #20
   b9a92:	dd45      	ble.n	b9b20 <rshift+0xa0>
   b9a94:	f011 011f 	ands.w	r1, r1, #31
   b9a98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9a9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9aa0:	d10c      	bne.n	b9abc <rshift+0x3c>
   b9aa2:	f100 0710 	add.w	r7, r0, #16
   b9aa6:	4629      	mov	r1, r5
   b9aa8:	42b1      	cmp	r1, r6
   b9aaa:	d334      	bcc.n	b9b16 <rshift+0x96>
   b9aac:	1a9b      	subs	r3, r3, r2
   b9aae:	009b      	lsls	r3, r3, #2
   b9ab0:	1eea      	subs	r2, r5, #3
   b9ab2:	4296      	cmp	r6, r2
   b9ab4:	bf38      	it	cc
   b9ab6:	2300      	movcc	r3, #0
   b9ab8:	4423      	add	r3, r4
   b9aba:	e015      	b.n	b9ae8 <rshift+0x68>
   b9abc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9ac0:	f1c1 0820 	rsb	r8, r1, #32
   b9ac4:	40cf      	lsrs	r7, r1
   b9ac6:	f105 0e04 	add.w	lr, r5, #4
   b9aca:	46a1      	mov	r9, r4
   b9acc:	4576      	cmp	r6, lr
   b9ace:	46f4      	mov	ip, lr
   b9ad0:	d815      	bhi.n	b9afe <rshift+0x7e>
   b9ad2:	1a9a      	subs	r2, r3, r2
   b9ad4:	0092      	lsls	r2, r2, #2
   b9ad6:	3a04      	subs	r2, #4
   b9ad8:	3501      	adds	r5, #1
   b9ada:	42ae      	cmp	r6, r5
   b9adc:	bf38      	it	cc
   b9ade:	2200      	movcc	r2, #0
   b9ae0:	18a3      	adds	r3, r4, r2
   b9ae2:	50a7      	str	r7, [r4, r2]
   b9ae4:	b107      	cbz	r7, b9ae8 <rshift+0x68>
   b9ae6:	3304      	adds	r3, #4
   b9ae8:	1b1a      	subs	r2, r3, r4
   b9aea:	42a3      	cmp	r3, r4
   b9aec:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9af0:	bf08      	it	eq
   b9af2:	2300      	moveq	r3, #0
   b9af4:	6102      	str	r2, [r0, #16]
   b9af6:	bf08      	it	eq
   b9af8:	6143      	streq	r3, [r0, #20]
   b9afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9afe:	f8dc c000 	ldr.w	ip, [ip]
   b9b02:	fa0c fc08 	lsl.w	ip, ip, r8
   b9b06:	ea4c 0707 	orr.w	r7, ip, r7
   b9b0a:	f849 7b04 	str.w	r7, [r9], #4
   b9b0e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b9b12:	40cf      	lsrs	r7, r1
   b9b14:	e7da      	b.n	b9acc <rshift+0x4c>
   b9b16:	f851 cb04 	ldr.w	ip, [r1], #4
   b9b1a:	f847 cf04 	str.w	ip, [r7, #4]!
   b9b1e:	e7c3      	b.n	b9aa8 <rshift+0x28>
   b9b20:	4623      	mov	r3, r4
   b9b22:	e7e1      	b.n	b9ae8 <rshift+0x68>

000b9b24 <__hexdig_fun>:
   b9b24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9b28:	2b09      	cmp	r3, #9
   b9b2a:	d802      	bhi.n	b9b32 <__hexdig_fun+0xe>
   b9b2c:	3820      	subs	r0, #32
   b9b2e:	b2c0      	uxtb	r0, r0
   b9b30:	4770      	bx	lr
   b9b32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9b36:	2b05      	cmp	r3, #5
   b9b38:	d801      	bhi.n	b9b3e <__hexdig_fun+0x1a>
   b9b3a:	3847      	subs	r0, #71	; 0x47
   b9b3c:	e7f7      	b.n	b9b2e <__hexdig_fun+0xa>
   b9b3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9b42:	2b05      	cmp	r3, #5
   b9b44:	d801      	bhi.n	b9b4a <__hexdig_fun+0x26>
   b9b46:	3827      	subs	r0, #39	; 0x27
   b9b48:	e7f1      	b.n	b9b2e <__hexdig_fun+0xa>
   b9b4a:	2000      	movs	r0, #0
   b9b4c:	4770      	bx	lr
	...

000b9b50 <__gethex>:
   b9b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b54:	ed2d 8b02 	vpush	{d8}
   b9b58:	b089      	sub	sp, #36	; 0x24
   b9b5a:	ee08 0a10 	vmov	s16, r0
   b9b5e:	9304      	str	r3, [sp, #16]
   b9b60:	4bb4      	ldr	r3, [pc, #720]	; (b9e34 <__gethex+0x2e4>)
   b9b62:	681b      	ldr	r3, [r3, #0]
   b9b64:	9301      	str	r3, [sp, #4]
   b9b66:	4618      	mov	r0, r3
   b9b68:	468b      	mov	fp, r1
   b9b6a:	4690      	mov	r8, r2
   b9b6c:	f7fa ff46 	bl	b49fc <strlen>
   b9b70:	9b01      	ldr	r3, [sp, #4]
   b9b72:	f8db 2000 	ldr.w	r2, [fp]
   b9b76:	4403      	add	r3, r0
   b9b78:	4682      	mov	sl, r0
   b9b7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9b7e:	9305      	str	r3, [sp, #20]
   b9b80:	1c93      	adds	r3, r2, #2
   b9b82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9b86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9b8a:	32fe      	adds	r2, #254	; 0xfe
   b9b8c:	18d1      	adds	r1, r2, r3
   b9b8e:	461f      	mov	r7, r3
   b9b90:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9b94:	9100      	str	r1, [sp, #0]
   b9b96:	2830      	cmp	r0, #48	; 0x30
   b9b98:	d0f8      	beq.n	b9b8c <__gethex+0x3c>
   b9b9a:	f7ff ffc3 	bl	b9b24 <__hexdig_fun>
   b9b9e:	4604      	mov	r4, r0
   b9ba0:	2800      	cmp	r0, #0
   b9ba2:	d13a      	bne.n	b9c1a <__gethex+0xca>
   b9ba4:	9901      	ldr	r1, [sp, #4]
   b9ba6:	4652      	mov	r2, sl
   b9ba8:	4638      	mov	r0, r7
   b9baa:	f7ff f826 	bl	b8bfa <strncmp>
   b9bae:	4605      	mov	r5, r0
   b9bb0:	2800      	cmp	r0, #0
   b9bb2:	d168      	bne.n	b9c86 <__gethex+0x136>
   b9bb4:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9bb8:	eb07 060a 	add.w	r6, r7, sl
   b9bbc:	f7ff ffb2 	bl	b9b24 <__hexdig_fun>
   b9bc0:	2800      	cmp	r0, #0
   b9bc2:	d062      	beq.n	b9c8a <__gethex+0x13a>
   b9bc4:	4633      	mov	r3, r6
   b9bc6:	7818      	ldrb	r0, [r3, #0]
   b9bc8:	2830      	cmp	r0, #48	; 0x30
   b9bca:	461f      	mov	r7, r3
   b9bcc:	f103 0301 	add.w	r3, r3, #1
   b9bd0:	d0f9      	beq.n	b9bc6 <__gethex+0x76>
   b9bd2:	f7ff ffa7 	bl	b9b24 <__hexdig_fun>
   b9bd6:	2301      	movs	r3, #1
   b9bd8:	fab0 f480 	clz	r4, r0
   b9bdc:	0964      	lsrs	r4, r4, #5
   b9bde:	4635      	mov	r5, r6
   b9be0:	9300      	str	r3, [sp, #0]
   b9be2:	463a      	mov	r2, r7
   b9be4:	4616      	mov	r6, r2
   b9be6:	3201      	adds	r2, #1
   b9be8:	7830      	ldrb	r0, [r6, #0]
   b9bea:	f7ff ff9b 	bl	b9b24 <__hexdig_fun>
   b9bee:	2800      	cmp	r0, #0
   b9bf0:	d1f8      	bne.n	b9be4 <__gethex+0x94>
   b9bf2:	9901      	ldr	r1, [sp, #4]
   b9bf4:	4652      	mov	r2, sl
   b9bf6:	4630      	mov	r0, r6
   b9bf8:	f7fe ffff 	bl	b8bfa <strncmp>
   b9bfc:	b980      	cbnz	r0, b9c20 <__gethex+0xd0>
   b9bfe:	b94d      	cbnz	r5, b9c14 <__gethex+0xc4>
   b9c00:	eb06 050a 	add.w	r5, r6, sl
   b9c04:	462a      	mov	r2, r5
   b9c06:	4616      	mov	r6, r2
   b9c08:	3201      	adds	r2, #1
   b9c0a:	7830      	ldrb	r0, [r6, #0]
   b9c0c:	f7ff ff8a 	bl	b9b24 <__hexdig_fun>
   b9c10:	2800      	cmp	r0, #0
   b9c12:	d1f8      	bne.n	b9c06 <__gethex+0xb6>
   b9c14:	1bad      	subs	r5, r5, r6
   b9c16:	00ad      	lsls	r5, r5, #2
   b9c18:	e004      	b.n	b9c24 <__gethex+0xd4>
   b9c1a:	2400      	movs	r4, #0
   b9c1c:	4625      	mov	r5, r4
   b9c1e:	e7e0      	b.n	b9be2 <__gethex+0x92>
   b9c20:	2d00      	cmp	r5, #0
   b9c22:	d1f7      	bne.n	b9c14 <__gethex+0xc4>
   b9c24:	7833      	ldrb	r3, [r6, #0]
   b9c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9c2a:	2b50      	cmp	r3, #80	; 0x50
   b9c2c:	d13b      	bne.n	b9ca6 <__gethex+0x156>
   b9c2e:	7873      	ldrb	r3, [r6, #1]
   b9c30:	2b2b      	cmp	r3, #43	; 0x2b
   b9c32:	d02c      	beq.n	b9c8e <__gethex+0x13e>
   b9c34:	2b2d      	cmp	r3, #45	; 0x2d
   b9c36:	d02e      	beq.n	b9c96 <__gethex+0x146>
   b9c38:	1c71      	adds	r1, r6, #1
   b9c3a:	f04f 0900 	mov.w	r9, #0
   b9c3e:	7808      	ldrb	r0, [r1, #0]
   b9c40:	f7ff ff70 	bl	b9b24 <__hexdig_fun>
   b9c44:	1e43      	subs	r3, r0, #1
   b9c46:	b2db      	uxtb	r3, r3
   b9c48:	2b18      	cmp	r3, #24
   b9c4a:	d82c      	bhi.n	b9ca6 <__gethex+0x156>
   b9c4c:	f1a0 0210 	sub.w	r2, r0, #16
   b9c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9c54:	f7ff ff66 	bl	b9b24 <__hexdig_fun>
   b9c58:	1e43      	subs	r3, r0, #1
   b9c5a:	b2db      	uxtb	r3, r3
   b9c5c:	2b18      	cmp	r3, #24
   b9c5e:	d91d      	bls.n	b9c9c <__gethex+0x14c>
   b9c60:	f1b9 0f00 	cmp.w	r9, #0
   b9c64:	d000      	beq.n	b9c68 <__gethex+0x118>
   b9c66:	4252      	negs	r2, r2
   b9c68:	4415      	add	r5, r2
   b9c6a:	f8cb 1000 	str.w	r1, [fp]
   b9c6e:	b1e4      	cbz	r4, b9caa <__gethex+0x15a>
   b9c70:	9b00      	ldr	r3, [sp, #0]
   b9c72:	2b00      	cmp	r3, #0
   b9c74:	bf14      	ite	ne
   b9c76:	2700      	movne	r7, #0
   b9c78:	2706      	moveq	r7, #6
   b9c7a:	4638      	mov	r0, r7
   b9c7c:	b009      	add	sp, #36	; 0x24
   b9c7e:	ecbd 8b02 	vpop	{d8}
   b9c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c86:	463e      	mov	r6, r7
   b9c88:	4625      	mov	r5, r4
   b9c8a:	2401      	movs	r4, #1
   b9c8c:	e7ca      	b.n	b9c24 <__gethex+0xd4>
   b9c8e:	f04f 0900 	mov.w	r9, #0
   b9c92:	1cb1      	adds	r1, r6, #2
   b9c94:	e7d3      	b.n	b9c3e <__gethex+0xee>
   b9c96:	f04f 0901 	mov.w	r9, #1
   b9c9a:	e7fa      	b.n	b9c92 <__gethex+0x142>
   b9c9c:	230a      	movs	r3, #10
   b9c9e:	fb03 0202 	mla	r2, r3, r2, r0
   b9ca2:	3a10      	subs	r2, #16
   b9ca4:	e7d4      	b.n	b9c50 <__gethex+0x100>
   b9ca6:	4631      	mov	r1, r6
   b9ca8:	e7df      	b.n	b9c6a <__gethex+0x11a>
   b9caa:	1bf3      	subs	r3, r6, r7
   b9cac:	3b01      	subs	r3, #1
   b9cae:	4621      	mov	r1, r4
   b9cb0:	2b07      	cmp	r3, #7
   b9cb2:	dc0b      	bgt.n	b9ccc <__gethex+0x17c>
   b9cb4:	ee18 0a10 	vmov	r0, s16
   b9cb8:	f000 fa68 	bl	ba18c <_Balloc>
   b9cbc:	4604      	mov	r4, r0
   b9cbe:	b940      	cbnz	r0, b9cd2 <__gethex+0x182>
   b9cc0:	4b5d      	ldr	r3, [pc, #372]	; (b9e38 <__gethex+0x2e8>)
   b9cc2:	4602      	mov	r2, r0
   b9cc4:	21de      	movs	r1, #222	; 0xde
   b9cc6:	485d      	ldr	r0, [pc, #372]	; (b9e3c <__gethex+0x2ec>)
   b9cc8:	f7fd fbb6 	bl	b7438 <__assert_func>
   b9ccc:	3101      	adds	r1, #1
   b9cce:	105b      	asrs	r3, r3, #1
   b9cd0:	e7ee      	b.n	b9cb0 <__gethex+0x160>
   b9cd2:	f100 0914 	add.w	r9, r0, #20
   b9cd6:	f04f 0b00 	mov.w	fp, #0
   b9cda:	f1ca 0301 	rsb	r3, sl, #1
   b9cde:	f8cd 9008 	str.w	r9, [sp, #8]
   b9ce2:	f8cd b000 	str.w	fp, [sp]
   b9ce6:	9306      	str	r3, [sp, #24]
   b9ce8:	42b7      	cmp	r7, r6
   b9cea:	d340      	bcc.n	b9d6e <__gethex+0x21e>
   b9cec:	9802      	ldr	r0, [sp, #8]
   b9cee:	9b00      	ldr	r3, [sp, #0]
   b9cf0:	f840 3b04 	str.w	r3, [r0], #4
   b9cf4:	eba0 0009 	sub.w	r0, r0, r9
   b9cf8:	1080      	asrs	r0, r0, #2
   b9cfa:	0146      	lsls	r6, r0, #5
   b9cfc:	6120      	str	r0, [r4, #16]
   b9cfe:	4618      	mov	r0, r3
   b9d00:	f000 fb36 	bl	ba370 <__hi0bits>
   b9d04:	1a30      	subs	r0, r6, r0
   b9d06:	f8d8 6000 	ldr.w	r6, [r8]
   b9d0a:	42b0      	cmp	r0, r6
   b9d0c:	dd63      	ble.n	b9dd6 <__gethex+0x286>
   b9d0e:	1b87      	subs	r7, r0, r6
   b9d10:	4639      	mov	r1, r7
   b9d12:	4620      	mov	r0, r4
   b9d14:	f000 feda 	bl	baacc <__any_on>
   b9d18:	4682      	mov	sl, r0
   b9d1a:	b1a8      	cbz	r0, b9d48 <__gethex+0x1f8>
   b9d1c:	1e7b      	subs	r3, r7, #1
   b9d1e:	1159      	asrs	r1, r3, #5
   b9d20:	f003 021f 	and.w	r2, r3, #31
   b9d24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9d28:	f04f 0a01 	mov.w	sl, #1
   b9d2c:	fa0a f202 	lsl.w	r2, sl, r2
   b9d30:	420a      	tst	r2, r1
   b9d32:	d009      	beq.n	b9d48 <__gethex+0x1f8>
   b9d34:	4553      	cmp	r3, sl
   b9d36:	dd05      	ble.n	b9d44 <__gethex+0x1f4>
   b9d38:	1eb9      	subs	r1, r7, #2
   b9d3a:	4620      	mov	r0, r4
   b9d3c:	f000 fec6 	bl	baacc <__any_on>
   b9d40:	2800      	cmp	r0, #0
   b9d42:	d145      	bne.n	b9dd0 <__gethex+0x280>
   b9d44:	f04f 0a02 	mov.w	sl, #2
   b9d48:	4639      	mov	r1, r7
   b9d4a:	4620      	mov	r0, r4
   b9d4c:	f7ff fe98 	bl	b9a80 <rshift>
   b9d50:	443d      	add	r5, r7
   b9d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9d56:	42ab      	cmp	r3, r5
   b9d58:	da4c      	bge.n	b9df4 <__gethex+0x2a4>
   b9d5a:	ee18 0a10 	vmov	r0, s16
   b9d5e:	4621      	mov	r1, r4
   b9d60:	f000 fa54 	bl	ba20c <_Bfree>
   b9d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9d66:	2300      	movs	r3, #0
   b9d68:	6013      	str	r3, [r2, #0]
   b9d6a:	27a3      	movs	r7, #163	; 0xa3
   b9d6c:	e785      	b.n	b9c7a <__gethex+0x12a>
   b9d6e:	1e73      	subs	r3, r6, #1
   b9d70:	9a05      	ldr	r2, [sp, #20]
   b9d72:	9303      	str	r3, [sp, #12]
   b9d74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9d78:	4293      	cmp	r3, r2
   b9d7a:	d019      	beq.n	b9db0 <__gethex+0x260>
   b9d7c:	f1bb 0f20 	cmp.w	fp, #32
   b9d80:	d107      	bne.n	b9d92 <__gethex+0x242>
   b9d82:	9b02      	ldr	r3, [sp, #8]
   b9d84:	9a00      	ldr	r2, [sp, #0]
   b9d86:	f843 2b04 	str.w	r2, [r3], #4
   b9d8a:	9302      	str	r3, [sp, #8]
   b9d8c:	2300      	movs	r3, #0
   b9d8e:	9300      	str	r3, [sp, #0]
   b9d90:	469b      	mov	fp, r3
   b9d92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b9d96:	f7ff fec5 	bl	b9b24 <__hexdig_fun>
   b9d9a:	9b00      	ldr	r3, [sp, #0]
   b9d9c:	f000 000f 	and.w	r0, r0, #15
   b9da0:	fa00 f00b 	lsl.w	r0, r0, fp
   b9da4:	4303      	orrs	r3, r0
   b9da6:	9300      	str	r3, [sp, #0]
   b9da8:	f10b 0b04 	add.w	fp, fp, #4
   b9dac:	9b03      	ldr	r3, [sp, #12]
   b9dae:	e00d      	b.n	b9dcc <__gethex+0x27c>
   b9db0:	9b03      	ldr	r3, [sp, #12]
   b9db2:	9a06      	ldr	r2, [sp, #24]
   b9db4:	4413      	add	r3, r2
   b9db6:	42bb      	cmp	r3, r7
   b9db8:	d3e0      	bcc.n	b9d7c <__gethex+0x22c>
   b9dba:	4618      	mov	r0, r3
   b9dbc:	9901      	ldr	r1, [sp, #4]
   b9dbe:	9307      	str	r3, [sp, #28]
   b9dc0:	4652      	mov	r2, sl
   b9dc2:	f7fe ff1a 	bl	b8bfa <strncmp>
   b9dc6:	9b07      	ldr	r3, [sp, #28]
   b9dc8:	2800      	cmp	r0, #0
   b9dca:	d1d7      	bne.n	b9d7c <__gethex+0x22c>
   b9dcc:	461e      	mov	r6, r3
   b9dce:	e78b      	b.n	b9ce8 <__gethex+0x198>
   b9dd0:	f04f 0a03 	mov.w	sl, #3
   b9dd4:	e7b8      	b.n	b9d48 <__gethex+0x1f8>
   b9dd6:	da0a      	bge.n	b9dee <__gethex+0x29e>
   b9dd8:	1a37      	subs	r7, r6, r0
   b9dda:	4621      	mov	r1, r4
   b9ddc:	ee18 0a10 	vmov	r0, s16
   b9de0:	463a      	mov	r2, r7
   b9de2:	f000 fc2f 	bl	ba644 <__lshift>
   b9de6:	1bed      	subs	r5, r5, r7
   b9de8:	4604      	mov	r4, r0
   b9dea:	f100 0914 	add.w	r9, r0, #20
   b9dee:	f04f 0a00 	mov.w	sl, #0
   b9df2:	e7ae      	b.n	b9d52 <__gethex+0x202>
   b9df4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b9df8:	42a8      	cmp	r0, r5
   b9dfa:	dd72      	ble.n	b9ee2 <__gethex+0x392>
   b9dfc:	1b45      	subs	r5, r0, r5
   b9dfe:	42ae      	cmp	r6, r5
   b9e00:	dc36      	bgt.n	b9e70 <__gethex+0x320>
   b9e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b9e06:	2b02      	cmp	r3, #2
   b9e08:	d02a      	beq.n	b9e60 <__gethex+0x310>
   b9e0a:	2b03      	cmp	r3, #3
   b9e0c:	d02c      	beq.n	b9e68 <__gethex+0x318>
   b9e0e:	2b01      	cmp	r3, #1
   b9e10:	d11c      	bne.n	b9e4c <__gethex+0x2fc>
   b9e12:	42ae      	cmp	r6, r5
   b9e14:	d11a      	bne.n	b9e4c <__gethex+0x2fc>
   b9e16:	2e01      	cmp	r6, #1
   b9e18:	d112      	bne.n	b9e40 <__gethex+0x2f0>
   b9e1a:	9a04      	ldr	r2, [sp, #16]
   b9e1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9e20:	6013      	str	r3, [r2, #0]
   b9e22:	2301      	movs	r3, #1
   b9e24:	6123      	str	r3, [r4, #16]
   b9e26:	f8c9 3000 	str.w	r3, [r9]
   b9e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9e2c:	2762      	movs	r7, #98	; 0x62
   b9e2e:	601c      	str	r4, [r3, #0]
   b9e30:	e723      	b.n	b9c7a <__gethex+0x12a>
   b9e32:	bf00      	nop
   b9e34:	000bb7b0 	.word	0x000bb7b0
   b9e38:	000bb739 	.word	0x000bb739
   b9e3c:	000bb74a 	.word	0x000bb74a
   b9e40:	1e71      	subs	r1, r6, #1
   b9e42:	4620      	mov	r0, r4
   b9e44:	f000 fe42 	bl	baacc <__any_on>
   b9e48:	2800      	cmp	r0, #0
   b9e4a:	d1e6      	bne.n	b9e1a <__gethex+0x2ca>
   b9e4c:	ee18 0a10 	vmov	r0, s16
   b9e50:	4621      	mov	r1, r4
   b9e52:	f000 f9db 	bl	ba20c <_Bfree>
   b9e56:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9e58:	2300      	movs	r3, #0
   b9e5a:	6013      	str	r3, [r2, #0]
   b9e5c:	2750      	movs	r7, #80	; 0x50
   b9e5e:	e70c      	b.n	b9c7a <__gethex+0x12a>
   b9e60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9e62:	2b00      	cmp	r3, #0
   b9e64:	d1f2      	bne.n	b9e4c <__gethex+0x2fc>
   b9e66:	e7d8      	b.n	b9e1a <__gethex+0x2ca>
   b9e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9e6a:	2b00      	cmp	r3, #0
   b9e6c:	d1d5      	bne.n	b9e1a <__gethex+0x2ca>
   b9e6e:	e7ed      	b.n	b9e4c <__gethex+0x2fc>
   b9e70:	1e6f      	subs	r7, r5, #1
   b9e72:	f1ba 0f00 	cmp.w	sl, #0
   b9e76:	d131      	bne.n	b9edc <__gethex+0x38c>
   b9e78:	b127      	cbz	r7, b9e84 <__gethex+0x334>
   b9e7a:	4639      	mov	r1, r7
   b9e7c:	4620      	mov	r0, r4
   b9e7e:	f000 fe25 	bl	baacc <__any_on>
   b9e82:	4682      	mov	sl, r0
   b9e84:	117b      	asrs	r3, r7, #5
   b9e86:	2101      	movs	r1, #1
   b9e88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9e8c:	f007 071f 	and.w	r7, r7, #31
   b9e90:	fa01 f707 	lsl.w	r7, r1, r7
   b9e94:	421f      	tst	r7, r3
   b9e96:	4629      	mov	r1, r5
   b9e98:	4620      	mov	r0, r4
   b9e9a:	bf18      	it	ne
   b9e9c:	f04a 0a02 	orrne.w	sl, sl, #2
   b9ea0:	1b76      	subs	r6, r6, r5
   b9ea2:	f7ff fded 	bl	b9a80 <rshift>
   b9ea6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9eaa:	2702      	movs	r7, #2
   b9eac:	f1ba 0f00 	cmp.w	sl, #0
   b9eb0:	d048      	beq.n	b9f44 <__gethex+0x3f4>
   b9eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b9eb6:	2b02      	cmp	r3, #2
   b9eb8:	d015      	beq.n	b9ee6 <__gethex+0x396>
   b9eba:	2b03      	cmp	r3, #3
   b9ebc:	d017      	beq.n	b9eee <__gethex+0x39e>
   b9ebe:	2b01      	cmp	r3, #1
   b9ec0:	d109      	bne.n	b9ed6 <__gethex+0x386>
   b9ec2:	f01a 0f02 	tst.w	sl, #2
   b9ec6:	d006      	beq.n	b9ed6 <__gethex+0x386>
   b9ec8:	f8d9 0000 	ldr.w	r0, [r9]
   b9ecc:	ea4a 0a00 	orr.w	sl, sl, r0
   b9ed0:	f01a 0f01 	tst.w	sl, #1
   b9ed4:	d10e      	bne.n	b9ef4 <__gethex+0x3a4>
   b9ed6:	f047 0710 	orr.w	r7, r7, #16
   b9eda:	e033      	b.n	b9f44 <__gethex+0x3f4>
   b9edc:	f04f 0a01 	mov.w	sl, #1
   b9ee0:	e7d0      	b.n	b9e84 <__gethex+0x334>
   b9ee2:	2701      	movs	r7, #1
   b9ee4:	e7e2      	b.n	b9eac <__gethex+0x35c>
   b9ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9ee8:	f1c3 0301 	rsb	r3, r3, #1
   b9eec:	9315      	str	r3, [sp, #84]	; 0x54
   b9eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9ef0:	2b00      	cmp	r3, #0
   b9ef2:	d0f0      	beq.n	b9ed6 <__gethex+0x386>
   b9ef4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b9ef8:	f104 0314 	add.w	r3, r4, #20
   b9efc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9f00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b9f04:	f04f 0c00 	mov.w	ip, #0
   b9f08:	4618      	mov	r0, r3
   b9f0a:	f853 2b04 	ldr.w	r2, [r3], #4
   b9f0e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b9f12:	d01c      	beq.n	b9f4e <__gethex+0x3fe>
   b9f14:	3201      	adds	r2, #1
   b9f16:	6002      	str	r2, [r0, #0]
   b9f18:	2f02      	cmp	r7, #2
   b9f1a:	f104 0314 	add.w	r3, r4, #20
   b9f1e:	d13f      	bne.n	b9fa0 <__gethex+0x450>
   b9f20:	f8d8 2000 	ldr.w	r2, [r8]
   b9f24:	3a01      	subs	r2, #1
   b9f26:	42b2      	cmp	r2, r6
   b9f28:	d10a      	bne.n	b9f40 <__gethex+0x3f0>
   b9f2a:	1171      	asrs	r1, r6, #5
   b9f2c:	2201      	movs	r2, #1
   b9f2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b9f32:	f006 061f 	and.w	r6, r6, #31
   b9f36:	fa02 f606 	lsl.w	r6, r2, r6
   b9f3a:	421e      	tst	r6, r3
   b9f3c:	bf18      	it	ne
   b9f3e:	4617      	movne	r7, r2
   b9f40:	f047 0720 	orr.w	r7, r7, #32
   b9f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9f46:	601c      	str	r4, [r3, #0]
   b9f48:	9b04      	ldr	r3, [sp, #16]
   b9f4a:	601d      	str	r5, [r3, #0]
   b9f4c:	e695      	b.n	b9c7a <__gethex+0x12a>
   b9f4e:	4299      	cmp	r1, r3
   b9f50:	f843 cc04 	str.w	ip, [r3, #-4]
   b9f54:	d8d8      	bhi.n	b9f08 <__gethex+0x3b8>
   b9f56:	68a3      	ldr	r3, [r4, #8]
   b9f58:	459b      	cmp	fp, r3
   b9f5a:	db19      	blt.n	b9f90 <__gethex+0x440>
   b9f5c:	6861      	ldr	r1, [r4, #4]
   b9f5e:	ee18 0a10 	vmov	r0, s16
   b9f62:	3101      	adds	r1, #1
   b9f64:	f000 f912 	bl	ba18c <_Balloc>
   b9f68:	4681      	mov	r9, r0
   b9f6a:	b918      	cbnz	r0, b9f74 <__gethex+0x424>
   b9f6c:	4b1a      	ldr	r3, [pc, #104]	; (b9fd8 <__gethex+0x488>)
   b9f6e:	4602      	mov	r2, r0
   b9f70:	2184      	movs	r1, #132	; 0x84
   b9f72:	e6a8      	b.n	b9cc6 <__gethex+0x176>
   b9f74:	6922      	ldr	r2, [r4, #16]
   b9f76:	3202      	adds	r2, #2
   b9f78:	f104 010c 	add.w	r1, r4, #12
   b9f7c:	0092      	lsls	r2, r2, #2
   b9f7e:	300c      	adds	r0, #12
   b9f80:	f7fe fdb8 	bl	b8af4 <memcpy>
   b9f84:	4621      	mov	r1, r4
   b9f86:	ee18 0a10 	vmov	r0, s16
   b9f8a:	f000 f93f 	bl	ba20c <_Bfree>
   b9f8e:	464c      	mov	r4, r9
   b9f90:	6923      	ldr	r3, [r4, #16]
   b9f92:	1c5a      	adds	r2, r3, #1
   b9f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9f98:	6122      	str	r2, [r4, #16]
   b9f9a:	2201      	movs	r2, #1
   b9f9c:	615a      	str	r2, [r3, #20]
   b9f9e:	e7bb      	b.n	b9f18 <__gethex+0x3c8>
   b9fa0:	6922      	ldr	r2, [r4, #16]
   b9fa2:	455a      	cmp	r2, fp
   b9fa4:	dd0b      	ble.n	b9fbe <__gethex+0x46e>
   b9fa6:	2101      	movs	r1, #1
   b9fa8:	4620      	mov	r0, r4
   b9faa:	f7ff fd69 	bl	b9a80 <rshift>
   b9fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9fb2:	3501      	adds	r5, #1
   b9fb4:	42ab      	cmp	r3, r5
   b9fb6:	f6ff aed0 	blt.w	b9d5a <__gethex+0x20a>
   b9fba:	2701      	movs	r7, #1
   b9fbc:	e7c0      	b.n	b9f40 <__gethex+0x3f0>
   b9fbe:	f016 061f 	ands.w	r6, r6, #31
   b9fc2:	d0fa      	beq.n	b9fba <__gethex+0x46a>
   b9fc4:	4453      	add	r3, sl
   b9fc6:	f1c6 0620 	rsb	r6, r6, #32
   b9fca:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9fce:	f000 f9cf 	bl	ba370 <__hi0bits>
   b9fd2:	42b0      	cmp	r0, r6
   b9fd4:	dbe7      	blt.n	b9fa6 <__gethex+0x456>
   b9fd6:	e7f0      	b.n	b9fba <__gethex+0x46a>
   b9fd8:	000bb739 	.word	0x000bb739

000b9fdc <L_shift>:
   b9fdc:	f1c2 0208 	rsb	r2, r2, #8
   b9fe0:	0092      	lsls	r2, r2, #2
   b9fe2:	b570      	push	{r4, r5, r6, lr}
   b9fe4:	f1c2 0620 	rsb	r6, r2, #32
   b9fe8:	6843      	ldr	r3, [r0, #4]
   b9fea:	6804      	ldr	r4, [r0, #0]
   b9fec:	fa03 f506 	lsl.w	r5, r3, r6
   b9ff0:	432c      	orrs	r4, r5
   b9ff2:	40d3      	lsrs	r3, r2
   b9ff4:	6004      	str	r4, [r0, #0]
   b9ff6:	f840 3f04 	str.w	r3, [r0, #4]!
   b9ffa:	4288      	cmp	r0, r1
   b9ffc:	d3f4      	bcc.n	b9fe8 <L_shift+0xc>
   b9ffe:	bd70      	pop	{r4, r5, r6, pc}

000ba000 <__match>:
   ba000:	b530      	push	{r4, r5, lr}
   ba002:	6803      	ldr	r3, [r0, #0]
   ba004:	3301      	adds	r3, #1
   ba006:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba00a:	b914      	cbnz	r4, ba012 <__match+0x12>
   ba00c:	6003      	str	r3, [r0, #0]
   ba00e:	2001      	movs	r0, #1
   ba010:	bd30      	pop	{r4, r5, pc}
   ba012:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba016:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba01a:	2d19      	cmp	r5, #25
   ba01c:	bf98      	it	ls
   ba01e:	3220      	addls	r2, #32
   ba020:	42a2      	cmp	r2, r4
   ba022:	d0f0      	beq.n	ba006 <__match+0x6>
   ba024:	2000      	movs	r0, #0
   ba026:	e7f3      	b.n	ba010 <__match+0x10>

000ba028 <__hexnan>:
   ba028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba02c:	680b      	ldr	r3, [r1, #0]
   ba02e:	115e      	asrs	r6, r3, #5
   ba030:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba034:	f013 031f 	ands.w	r3, r3, #31
   ba038:	b087      	sub	sp, #28
   ba03a:	bf18      	it	ne
   ba03c:	3604      	addne	r6, #4
   ba03e:	2500      	movs	r5, #0
   ba040:	1f37      	subs	r7, r6, #4
   ba042:	4690      	mov	r8, r2
   ba044:	6802      	ldr	r2, [r0, #0]
   ba046:	9301      	str	r3, [sp, #4]
   ba048:	4682      	mov	sl, r0
   ba04a:	f846 5c04 	str.w	r5, [r6, #-4]
   ba04e:	46b9      	mov	r9, r7
   ba050:	463c      	mov	r4, r7
   ba052:	9502      	str	r5, [sp, #8]
   ba054:	46ab      	mov	fp, r5
   ba056:	7851      	ldrb	r1, [r2, #1]
   ba058:	1c53      	adds	r3, r2, #1
   ba05a:	9303      	str	r3, [sp, #12]
   ba05c:	b341      	cbz	r1, ba0b0 <__hexnan+0x88>
   ba05e:	4608      	mov	r0, r1
   ba060:	9205      	str	r2, [sp, #20]
   ba062:	9104      	str	r1, [sp, #16]
   ba064:	f7ff fd5e 	bl	b9b24 <__hexdig_fun>
   ba068:	2800      	cmp	r0, #0
   ba06a:	d14f      	bne.n	ba10c <__hexnan+0xe4>
   ba06c:	9904      	ldr	r1, [sp, #16]
   ba06e:	9a05      	ldr	r2, [sp, #20]
   ba070:	2920      	cmp	r1, #32
   ba072:	d818      	bhi.n	ba0a6 <__hexnan+0x7e>
   ba074:	9b02      	ldr	r3, [sp, #8]
   ba076:	459b      	cmp	fp, r3
   ba078:	dd13      	ble.n	ba0a2 <__hexnan+0x7a>
   ba07a:	454c      	cmp	r4, r9
   ba07c:	d206      	bcs.n	ba08c <__hexnan+0x64>
   ba07e:	2d07      	cmp	r5, #7
   ba080:	dc04      	bgt.n	ba08c <__hexnan+0x64>
   ba082:	462a      	mov	r2, r5
   ba084:	4649      	mov	r1, r9
   ba086:	4620      	mov	r0, r4
   ba088:	f7ff ffa8 	bl	b9fdc <L_shift>
   ba08c:	4544      	cmp	r4, r8
   ba08e:	d950      	bls.n	ba132 <__hexnan+0x10a>
   ba090:	2300      	movs	r3, #0
   ba092:	f1a4 0904 	sub.w	r9, r4, #4
   ba096:	f844 3c04 	str.w	r3, [r4, #-4]
   ba09a:	f8cd b008 	str.w	fp, [sp, #8]
   ba09e:	464c      	mov	r4, r9
   ba0a0:	461d      	mov	r5, r3
   ba0a2:	9a03      	ldr	r2, [sp, #12]
   ba0a4:	e7d7      	b.n	ba056 <__hexnan+0x2e>
   ba0a6:	2929      	cmp	r1, #41	; 0x29
   ba0a8:	d156      	bne.n	ba158 <__hexnan+0x130>
   ba0aa:	3202      	adds	r2, #2
   ba0ac:	f8ca 2000 	str.w	r2, [sl]
   ba0b0:	f1bb 0f00 	cmp.w	fp, #0
   ba0b4:	d050      	beq.n	ba158 <__hexnan+0x130>
   ba0b6:	454c      	cmp	r4, r9
   ba0b8:	d206      	bcs.n	ba0c8 <__hexnan+0xa0>
   ba0ba:	2d07      	cmp	r5, #7
   ba0bc:	dc04      	bgt.n	ba0c8 <__hexnan+0xa0>
   ba0be:	462a      	mov	r2, r5
   ba0c0:	4649      	mov	r1, r9
   ba0c2:	4620      	mov	r0, r4
   ba0c4:	f7ff ff8a 	bl	b9fdc <L_shift>
   ba0c8:	4544      	cmp	r4, r8
   ba0ca:	d934      	bls.n	ba136 <__hexnan+0x10e>
   ba0cc:	f1a8 0204 	sub.w	r2, r8, #4
   ba0d0:	4623      	mov	r3, r4
   ba0d2:	f853 1b04 	ldr.w	r1, [r3], #4
   ba0d6:	f842 1f04 	str.w	r1, [r2, #4]!
   ba0da:	429f      	cmp	r7, r3
   ba0dc:	d2f9      	bcs.n	ba0d2 <__hexnan+0xaa>
   ba0de:	1b3b      	subs	r3, r7, r4
   ba0e0:	f023 0303 	bic.w	r3, r3, #3
   ba0e4:	3304      	adds	r3, #4
   ba0e6:	3401      	adds	r4, #1
   ba0e8:	3e03      	subs	r6, #3
   ba0ea:	42b4      	cmp	r4, r6
   ba0ec:	bf88      	it	hi
   ba0ee:	2304      	movhi	r3, #4
   ba0f0:	4443      	add	r3, r8
   ba0f2:	2200      	movs	r2, #0
   ba0f4:	f843 2b04 	str.w	r2, [r3], #4
   ba0f8:	429f      	cmp	r7, r3
   ba0fa:	d2fb      	bcs.n	ba0f4 <__hexnan+0xcc>
   ba0fc:	683b      	ldr	r3, [r7, #0]
   ba0fe:	b91b      	cbnz	r3, ba108 <__hexnan+0xe0>
   ba100:	4547      	cmp	r7, r8
   ba102:	d127      	bne.n	ba154 <__hexnan+0x12c>
   ba104:	2301      	movs	r3, #1
   ba106:	603b      	str	r3, [r7, #0]
   ba108:	2005      	movs	r0, #5
   ba10a:	e026      	b.n	ba15a <__hexnan+0x132>
   ba10c:	3501      	adds	r5, #1
   ba10e:	2d08      	cmp	r5, #8
   ba110:	f10b 0b01 	add.w	fp, fp, #1
   ba114:	dd06      	ble.n	ba124 <__hexnan+0xfc>
   ba116:	4544      	cmp	r4, r8
   ba118:	d9c3      	bls.n	ba0a2 <__hexnan+0x7a>
   ba11a:	2300      	movs	r3, #0
   ba11c:	f844 3c04 	str.w	r3, [r4, #-4]
   ba120:	2501      	movs	r5, #1
   ba122:	3c04      	subs	r4, #4
   ba124:	6822      	ldr	r2, [r4, #0]
   ba126:	f000 000f 	and.w	r0, r0, #15
   ba12a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba12e:	6022      	str	r2, [r4, #0]
   ba130:	e7b7      	b.n	ba0a2 <__hexnan+0x7a>
   ba132:	2508      	movs	r5, #8
   ba134:	e7b5      	b.n	ba0a2 <__hexnan+0x7a>
   ba136:	9b01      	ldr	r3, [sp, #4]
   ba138:	2b00      	cmp	r3, #0
   ba13a:	d0df      	beq.n	ba0fc <__hexnan+0xd4>
   ba13c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba140:	f1c3 0320 	rsb	r3, r3, #32
   ba144:	fa22 f303 	lsr.w	r3, r2, r3
   ba148:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba14c:	401a      	ands	r2, r3
   ba14e:	f846 2c04 	str.w	r2, [r6, #-4]
   ba152:	e7d3      	b.n	ba0fc <__hexnan+0xd4>
   ba154:	3f04      	subs	r7, #4
   ba156:	e7d1      	b.n	ba0fc <__hexnan+0xd4>
   ba158:	2004      	movs	r0, #4
   ba15a:	b007      	add	sp, #28
   ba15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba160 <__retarget_lock_acquire_recursive>:
   ba160:	4770      	bx	lr

000ba162 <__retarget_lock_release>:
   ba162:	4770      	bx	lr

000ba164 <__retarget_lock_release_recursive>:
   ba164:	4770      	bx	lr

000ba166 <__ascii_mbtowc>:
   ba166:	b082      	sub	sp, #8
   ba168:	b901      	cbnz	r1, ba16c <__ascii_mbtowc+0x6>
   ba16a:	a901      	add	r1, sp, #4
   ba16c:	b142      	cbz	r2, ba180 <__ascii_mbtowc+0x1a>
   ba16e:	b14b      	cbz	r3, ba184 <__ascii_mbtowc+0x1e>
   ba170:	7813      	ldrb	r3, [r2, #0]
   ba172:	600b      	str	r3, [r1, #0]
   ba174:	7812      	ldrb	r2, [r2, #0]
   ba176:	1e10      	subs	r0, r2, #0
   ba178:	bf18      	it	ne
   ba17a:	2001      	movne	r0, #1
   ba17c:	b002      	add	sp, #8
   ba17e:	4770      	bx	lr
   ba180:	4610      	mov	r0, r2
   ba182:	e7fb      	b.n	ba17c <__ascii_mbtowc+0x16>
   ba184:	f06f 0001 	mvn.w	r0, #1
   ba188:	e7f8      	b.n	ba17c <__ascii_mbtowc+0x16>
	...

000ba18c <_Balloc>:
   ba18c:	b570      	push	{r4, r5, r6, lr}
   ba18e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba190:	4604      	mov	r4, r0
   ba192:	460d      	mov	r5, r1
   ba194:	b976      	cbnz	r6, ba1b4 <_Balloc+0x28>
   ba196:	2010      	movs	r0, #16
   ba198:	f7fd f90e 	bl	b73b8 <malloc>
   ba19c:	4602      	mov	r2, r0
   ba19e:	6260      	str	r0, [r4, #36]	; 0x24
   ba1a0:	b920      	cbnz	r0, ba1ac <_Balloc+0x20>
   ba1a2:	4b18      	ldr	r3, [pc, #96]	; (ba204 <_Balloc+0x78>)
   ba1a4:	4818      	ldr	r0, [pc, #96]	; (ba208 <_Balloc+0x7c>)
   ba1a6:	2166      	movs	r1, #102	; 0x66
   ba1a8:	f7fd f946 	bl	b7438 <__assert_func>
   ba1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba1b0:	6006      	str	r6, [r0, #0]
   ba1b2:	60c6      	str	r6, [r0, #12]
   ba1b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba1b6:	68f3      	ldr	r3, [r6, #12]
   ba1b8:	b183      	cbz	r3, ba1dc <_Balloc+0x50>
   ba1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba1bc:	68db      	ldr	r3, [r3, #12]
   ba1be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba1c2:	b9b8      	cbnz	r0, ba1f4 <_Balloc+0x68>
   ba1c4:	2101      	movs	r1, #1
   ba1c6:	fa01 f605 	lsl.w	r6, r1, r5
   ba1ca:	1d72      	adds	r2, r6, #5
   ba1cc:	0092      	lsls	r2, r2, #2
   ba1ce:	4620      	mov	r0, r4
   ba1d0:	f000 fc9d 	bl	bab0e <_calloc_r>
   ba1d4:	b160      	cbz	r0, ba1f0 <_Balloc+0x64>
   ba1d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba1da:	e00e      	b.n	ba1fa <_Balloc+0x6e>
   ba1dc:	2221      	movs	r2, #33	; 0x21
   ba1de:	2104      	movs	r1, #4
   ba1e0:	4620      	mov	r0, r4
   ba1e2:	f000 fc94 	bl	bab0e <_calloc_r>
   ba1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba1e8:	60f0      	str	r0, [r6, #12]
   ba1ea:	68db      	ldr	r3, [r3, #12]
   ba1ec:	2b00      	cmp	r3, #0
   ba1ee:	d1e4      	bne.n	ba1ba <_Balloc+0x2e>
   ba1f0:	2000      	movs	r0, #0
   ba1f2:	bd70      	pop	{r4, r5, r6, pc}
   ba1f4:	6802      	ldr	r2, [r0, #0]
   ba1f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba1fa:	2300      	movs	r3, #0
   ba1fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba200:	e7f7      	b.n	ba1f2 <_Balloc+0x66>
   ba202:	bf00      	nop
   ba204:	000bb512 	.word	0x000bb512
   ba208:	000bb7c2 	.word	0x000bb7c2

000ba20c <_Bfree>:
   ba20c:	b570      	push	{r4, r5, r6, lr}
   ba20e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba210:	4605      	mov	r5, r0
   ba212:	460c      	mov	r4, r1
   ba214:	b976      	cbnz	r6, ba234 <_Bfree+0x28>
   ba216:	2010      	movs	r0, #16
   ba218:	f7fd f8ce 	bl	b73b8 <malloc>
   ba21c:	4602      	mov	r2, r0
   ba21e:	6268      	str	r0, [r5, #36]	; 0x24
   ba220:	b920      	cbnz	r0, ba22c <_Bfree+0x20>
   ba222:	4b09      	ldr	r3, [pc, #36]	; (ba248 <_Bfree+0x3c>)
   ba224:	4809      	ldr	r0, [pc, #36]	; (ba24c <_Bfree+0x40>)
   ba226:	218a      	movs	r1, #138	; 0x8a
   ba228:	f7fd f906 	bl	b7438 <__assert_func>
   ba22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba230:	6006      	str	r6, [r0, #0]
   ba232:	60c6      	str	r6, [r0, #12]
   ba234:	b13c      	cbz	r4, ba246 <_Bfree+0x3a>
   ba236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba238:	6862      	ldr	r2, [r4, #4]
   ba23a:	68db      	ldr	r3, [r3, #12]
   ba23c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba240:	6021      	str	r1, [r4, #0]
   ba242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba246:	bd70      	pop	{r4, r5, r6, pc}
   ba248:	000bb512 	.word	0x000bb512
   ba24c:	000bb7c2 	.word	0x000bb7c2

000ba250 <__multadd>:
   ba250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba254:	690d      	ldr	r5, [r1, #16]
   ba256:	4607      	mov	r7, r0
   ba258:	460c      	mov	r4, r1
   ba25a:	461e      	mov	r6, r3
   ba25c:	f101 0c14 	add.w	ip, r1, #20
   ba260:	2000      	movs	r0, #0
   ba262:	f8dc 3000 	ldr.w	r3, [ip]
   ba266:	b299      	uxth	r1, r3
   ba268:	fb02 6101 	mla	r1, r2, r1, r6
   ba26c:	0c1e      	lsrs	r6, r3, #16
   ba26e:	0c0b      	lsrs	r3, r1, #16
   ba270:	fb02 3306 	mla	r3, r2, r6, r3
   ba274:	b289      	uxth	r1, r1
   ba276:	3001      	adds	r0, #1
   ba278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba27c:	4285      	cmp	r5, r0
   ba27e:	f84c 1b04 	str.w	r1, [ip], #4
   ba282:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba286:	dcec      	bgt.n	ba262 <__multadd+0x12>
   ba288:	b30e      	cbz	r6, ba2ce <__multadd+0x7e>
   ba28a:	68a3      	ldr	r3, [r4, #8]
   ba28c:	42ab      	cmp	r3, r5
   ba28e:	dc19      	bgt.n	ba2c4 <__multadd+0x74>
   ba290:	6861      	ldr	r1, [r4, #4]
   ba292:	4638      	mov	r0, r7
   ba294:	3101      	adds	r1, #1
   ba296:	f7ff ff79 	bl	ba18c <_Balloc>
   ba29a:	4680      	mov	r8, r0
   ba29c:	b928      	cbnz	r0, ba2aa <__multadd+0x5a>
   ba29e:	4602      	mov	r2, r0
   ba2a0:	4b0c      	ldr	r3, [pc, #48]	; (ba2d4 <__multadd+0x84>)
   ba2a2:	480d      	ldr	r0, [pc, #52]	; (ba2d8 <__multadd+0x88>)
   ba2a4:	21b5      	movs	r1, #181	; 0xb5
   ba2a6:	f7fd f8c7 	bl	b7438 <__assert_func>
   ba2aa:	6922      	ldr	r2, [r4, #16]
   ba2ac:	3202      	adds	r2, #2
   ba2ae:	f104 010c 	add.w	r1, r4, #12
   ba2b2:	0092      	lsls	r2, r2, #2
   ba2b4:	300c      	adds	r0, #12
   ba2b6:	f7fe fc1d 	bl	b8af4 <memcpy>
   ba2ba:	4621      	mov	r1, r4
   ba2bc:	4638      	mov	r0, r7
   ba2be:	f7ff ffa5 	bl	ba20c <_Bfree>
   ba2c2:	4644      	mov	r4, r8
   ba2c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba2c8:	3501      	adds	r5, #1
   ba2ca:	615e      	str	r6, [r3, #20]
   ba2cc:	6125      	str	r5, [r4, #16]
   ba2ce:	4620      	mov	r0, r4
   ba2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba2d4:	000bb739 	.word	0x000bb739
   ba2d8:	000bb7c2 	.word	0x000bb7c2

000ba2dc <__s2b>:
   ba2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba2e0:	460c      	mov	r4, r1
   ba2e2:	4615      	mov	r5, r2
   ba2e4:	461f      	mov	r7, r3
   ba2e6:	2209      	movs	r2, #9
   ba2e8:	3308      	adds	r3, #8
   ba2ea:	4606      	mov	r6, r0
   ba2ec:	fb93 f3f2 	sdiv	r3, r3, r2
   ba2f0:	2100      	movs	r1, #0
   ba2f2:	2201      	movs	r2, #1
   ba2f4:	429a      	cmp	r2, r3
   ba2f6:	db09      	blt.n	ba30c <__s2b+0x30>
   ba2f8:	4630      	mov	r0, r6
   ba2fa:	f7ff ff47 	bl	ba18c <_Balloc>
   ba2fe:	b940      	cbnz	r0, ba312 <__s2b+0x36>
   ba300:	4602      	mov	r2, r0
   ba302:	4b19      	ldr	r3, [pc, #100]	; (ba368 <__s2b+0x8c>)
   ba304:	4819      	ldr	r0, [pc, #100]	; (ba36c <__s2b+0x90>)
   ba306:	21ce      	movs	r1, #206	; 0xce
   ba308:	f7fd f896 	bl	b7438 <__assert_func>
   ba30c:	0052      	lsls	r2, r2, #1
   ba30e:	3101      	adds	r1, #1
   ba310:	e7f0      	b.n	ba2f4 <__s2b+0x18>
   ba312:	9b08      	ldr	r3, [sp, #32]
   ba314:	6143      	str	r3, [r0, #20]
   ba316:	2d09      	cmp	r5, #9
   ba318:	f04f 0301 	mov.w	r3, #1
   ba31c:	6103      	str	r3, [r0, #16]
   ba31e:	dd16      	ble.n	ba34e <__s2b+0x72>
   ba320:	f104 0909 	add.w	r9, r4, #9
   ba324:	46c8      	mov	r8, r9
   ba326:	442c      	add	r4, r5
   ba328:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba32c:	4601      	mov	r1, r0
   ba32e:	3b30      	subs	r3, #48	; 0x30
   ba330:	220a      	movs	r2, #10
   ba332:	4630      	mov	r0, r6
   ba334:	f7ff ff8c 	bl	ba250 <__multadd>
   ba338:	45a0      	cmp	r8, r4
   ba33a:	d1f5      	bne.n	ba328 <__s2b+0x4c>
   ba33c:	f1a5 0408 	sub.w	r4, r5, #8
   ba340:	444c      	add	r4, r9
   ba342:	1b2d      	subs	r5, r5, r4
   ba344:	1963      	adds	r3, r4, r5
   ba346:	42bb      	cmp	r3, r7
   ba348:	db04      	blt.n	ba354 <__s2b+0x78>
   ba34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba34e:	340a      	adds	r4, #10
   ba350:	2509      	movs	r5, #9
   ba352:	e7f6      	b.n	ba342 <__s2b+0x66>
   ba354:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba358:	4601      	mov	r1, r0
   ba35a:	3b30      	subs	r3, #48	; 0x30
   ba35c:	220a      	movs	r2, #10
   ba35e:	4630      	mov	r0, r6
   ba360:	f7ff ff76 	bl	ba250 <__multadd>
   ba364:	e7ee      	b.n	ba344 <__s2b+0x68>
   ba366:	bf00      	nop
   ba368:	000bb739 	.word	0x000bb739
   ba36c:	000bb7c2 	.word	0x000bb7c2

000ba370 <__hi0bits>:
   ba370:	0c03      	lsrs	r3, r0, #16
   ba372:	041b      	lsls	r3, r3, #16
   ba374:	b9d3      	cbnz	r3, ba3ac <__hi0bits+0x3c>
   ba376:	0400      	lsls	r0, r0, #16
   ba378:	2310      	movs	r3, #16
   ba37a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba37e:	bf04      	itt	eq
   ba380:	0200      	lsleq	r0, r0, #8
   ba382:	3308      	addeq	r3, #8
   ba384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba388:	bf04      	itt	eq
   ba38a:	0100      	lsleq	r0, r0, #4
   ba38c:	3304      	addeq	r3, #4
   ba38e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba392:	bf04      	itt	eq
   ba394:	0080      	lsleq	r0, r0, #2
   ba396:	3302      	addeq	r3, #2
   ba398:	2800      	cmp	r0, #0
   ba39a:	db05      	blt.n	ba3a8 <__hi0bits+0x38>
   ba39c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba3a0:	f103 0301 	add.w	r3, r3, #1
   ba3a4:	bf08      	it	eq
   ba3a6:	2320      	moveq	r3, #32
   ba3a8:	4618      	mov	r0, r3
   ba3aa:	4770      	bx	lr
   ba3ac:	2300      	movs	r3, #0
   ba3ae:	e7e4      	b.n	ba37a <__hi0bits+0xa>

000ba3b0 <__lo0bits>:
   ba3b0:	6803      	ldr	r3, [r0, #0]
   ba3b2:	f013 0207 	ands.w	r2, r3, #7
   ba3b6:	4601      	mov	r1, r0
   ba3b8:	d00b      	beq.n	ba3d2 <__lo0bits+0x22>
   ba3ba:	07da      	lsls	r2, r3, #31
   ba3bc:	d423      	bmi.n	ba406 <__lo0bits+0x56>
   ba3be:	0798      	lsls	r0, r3, #30
   ba3c0:	bf49      	itett	mi
   ba3c2:	085b      	lsrmi	r3, r3, #1
   ba3c4:	089b      	lsrpl	r3, r3, #2
   ba3c6:	2001      	movmi	r0, #1
   ba3c8:	600b      	strmi	r3, [r1, #0]
   ba3ca:	bf5c      	itt	pl
   ba3cc:	600b      	strpl	r3, [r1, #0]
   ba3ce:	2002      	movpl	r0, #2
   ba3d0:	4770      	bx	lr
   ba3d2:	b298      	uxth	r0, r3
   ba3d4:	b9a8      	cbnz	r0, ba402 <__lo0bits+0x52>
   ba3d6:	0c1b      	lsrs	r3, r3, #16
   ba3d8:	2010      	movs	r0, #16
   ba3da:	b2da      	uxtb	r2, r3
   ba3dc:	b90a      	cbnz	r2, ba3e2 <__lo0bits+0x32>
   ba3de:	3008      	adds	r0, #8
   ba3e0:	0a1b      	lsrs	r3, r3, #8
   ba3e2:	071a      	lsls	r2, r3, #28
   ba3e4:	bf04      	itt	eq
   ba3e6:	091b      	lsreq	r3, r3, #4
   ba3e8:	3004      	addeq	r0, #4
   ba3ea:	079a      	lsls	r2, r3, #30
   ba3ec:	bf04      	itt	eq
   ba3ee:	089b      	lsreq	r3, r3, #2
   ba3f0:	3002      	addeq	r0, #2
   ba3f2:	07da      	lsls	r2, r3, #31
   ba3f4:	d403      	bmi.n	ba3fe <__lo0bits+0x4e>
   ba3f6:	085b      	lsrs	r3, r3, #1
   ba3f8:	f100 0001 	add.w	r0, r0, #1
   ba3fc:	d005      	beq.n	ba40a <__lo0bits+0x5a>
   ba3fe:	600b      	str	r3, [r1, #0]
   ba400:	4770      	bx	lr
   ba402:	4610      	mov	r0, r2
   ba404:	e7e9      	b.n	ba3da <__lo0bits+0x2a>
   ba406:	2000      	movs	r0, #0
   ba408:	4770      	bx	lr
   ba40a:	2020      	movs	r0, #32
   ba40c:	4770      	bx	lr
	...

000ba410 <__i2b>:
   ba410:	b510      	push	{r4, lr}
   ba412:	460c      	mov	r4, r1
   ba414:	2101      	movs	r1, #1
   ba416:	f7ff feb9 	bl	ba18c <_Balloc>
   ba41a:	4602      	mov	r2, r0
   ba41c:	b928      	cbnz	r0, ba42a <__i2b+0x1a>
   ba41e:	4b05      	ldr	r3, [pc, #20]	; (ba434 <__i2b+0x24>)
   ba420:	4805      	ldr	r0, [pc, #20]	; (ba438 <__i2b+0x28>)
   ba422:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba426:	f7fd f807 	bl	b7438 <__assert_func>
   ba42a:	2301      	movs	r3, #1
   ba42c:	6144      	str	r4, [r0, #20]
   ba42e:	6103      	str	r3, [r0, #16]
   ba430:	bd10      	pop	{r4, pc}
   ba432:	bf00      	nop
   ba434:	000bb739 	.word	0x000bb739
   ba438:	000bb7c2 	.word	0x000bb7c2

000ba43c <__multiply>:
   ba43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba440:	4691      	mov	r9, r2
   ba442:	690a      	ldr	r2, [r1, #16]
   ba444:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba448:	429a      	cmp	r2, r3
   ba44a:	bfb8      	it	lt
   ba44c:	460b      	movlt	r3, r1
   ba44e:	460c      	mov	r4, r1
   ba450:	bfbc      	itt	lt
   ba452:	464c      	movlt	r4, r9
   ba454:	4699      	movlt	r9, r3
   ba456:	6927      	ldr	r7, [r4, #16]
   ba458:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba45c:	68a3      	ldr	r3, [r4, #8]
   ba45e:	6861      	ldr	r1, [r4, #4]
   ba460:	eb07 060a 	add.w	r6, r7, sl
   ba464:	42b3      	cmp	r3, r6
   ba466:	b085      	sub	sp, #20
   ba468:	bfb8      	it	lt
   ba46a:	3101      	addlt	r1, #1
   ba46c:	f7ff fe8e 	bl	ba18c <_Balloc>
   ba470:	b930      	cbnz	r0, ba480 <__multiply+0x44>
   ba472:	4602      	mov	r2, r0
   ba474:	4b44      	ldr	r3, [pc, #272]	; (ba588 <__multiply+0x14c>)
   ba476:	4845      	ldr	r0, [pc, #276]	; (ba58c <__multiply+0x150>)
   ba478:	f240 115d 	movw	r1, #349	; 0x15d
   ba47c:	f7fc ffdc 	bl	b7438 <__assert_func>
   ba480:	f100 0514 	add.w	r5, r0, #20
   ba484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba488:	462b      	mov	r3, r5
   ba48a:	2200      	movs	r2, #0
   ba48c:	4543      	cmp	r3, r8
   ba48e:	d321      	bcc.n	ba4d4 <__multiply+0x98>
   ba490:	f104 0314 	add.w	r3, r4, #20
   ba494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba498:	f109 0314 	add.w	r3, r9, #20
   ba49c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba4a0:	9202      	str	r2, [sp, #8]
   ba4a2:	1b3a      	subs	r2, r7, r4
   ba4a4:	3a15      	subs	r2, #21
   ba4a6:	f022 0203 	bic.w	r2, r2, #3
   ba4aa:	3204      	adds	r2, #4
   ba4ac:	f104 0115 	add.w	r1, r4, #21
   ba4b0:	428f      	cmp	r7, r1
   ba4b2:	bf38      	it	cc
   ba4b4:	2204      	movcc	r2, #4
   ba4b6:	9201      	str	r2, [sp, #4]
   ba4b8:	9a02      	ldr	r2, [sp, #8]
   ba4ba:	9303      	str	r3, [sp, #12]
   ba4bc:	429a      	cmp	r2, r3
   ba4be:	d80c      	bhi.n	ba4da <__multiply+0x9e>
   ba4c0:	2e00      	cmp	r6, #0
   ba4c2:	dd03      	ble.n	ba4cc <__multiply+0x90>
   ba4c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba4c8:	2b00      	cmp	r3, #0
   ba4ca:	d05a      	beq.n	ba582 <__multiply+0x146>
   ba4cc:	6106      	str	r6, [r0, #16]
   ba4ce:	b005      	add	sp, #20
   ba4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba4d4:	f843 2b04 	str.w	r2, [r3], #4
   ba4d8:	e7d8      	b.n	ba48c <__multiply+0x50>
   ba4da:	f8b3 a000 	ldrh.w	sl, [r3]
   ba4de:	f1ba 0f00 	cmp.w	sl, #0
   ba4e2:	d024      	beq.n	ba52e <__multiply+0xf2>
   ba4e4:	f104 0e14 	add.w	lr, r4, #20
   ba4e8:	46a9      	mov	r9, r5
   ba4ea:	f04f 0c00 	mov.w	ip, #0
   ba4ee:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba4f2:	f8d9 1000 	ldr.w	r1, [r9]
   ba4f6:	fa1f fb82 	uxth.w	fp, r2
   ba4fa:	b289      	uxth	r1, r1
   ba4fc:	fb0a 110b 	mla	r1, sl, fp, r1
   ba500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba504:	f8d9 2000 	ldr.w	r2, [r9]
   ba508:	4461      	add	r1, ip
   ba50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba50e:	fb0a c20b 	mla	r2, sl, fp, ip
   ba512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   ba516:	b289      	uxth	r1, r1
   ba518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   ba51c:	4577      	cmp	r7, lr
   ba51e:	f849 1b04 	str.w	r1, [r9], #4
   ba522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba526:	d8e2      	bhi.n	ba4ee <__multiply+0xb2>
   ba528:	9a01      	ldr	r2, [sp, #4]
   ba52a:	f845 c002 	str.w	ip, [r5, r2]
   ba52e:	9a03      	ldr	r2, [sp, #12]
   ba530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   ba534:	3304      	adds	r3, #4
   ba536:	f1b9 0f00 	cmp.w	r9, #0
   ba53a:	d020      	beq.n	ba57e <__multiply+0x142>
   ba53c:	6829      	ldr	r1, [r5, #0]
   ba53e:	f104 0c14 	add.w	ip, r4, #20
   ba542:	46ae      	mov	lr, r5
   ba544:	f04f 0a00 	mov.w	sl, #0
   ba548:	f8bc b000 	ldrh.w	fp, [ip]
   ba54c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   ba550:	fb09 220b 	mla	r2, r9, fp, r2
   ba554:	4492      	add	sl, r2
   ba556:	b289      	uxth	r1, r1
   ba558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   ba55c:	f84e 1b04 	str.w	r1, [lr], #4
   ba560:	f85c 2b04 	ldr.w	r2, [ip], #4
   ba564:	f8be 1000 	ldrh.w	r1, [lr]
   ba568:	0c12      	lsrs	r2, r2, #16
   ba56a:	fb09 1102 	mla	r1, r9, r2, r1
   ba56e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   ba572:	4567      	cmp	r7, ip
   ba574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   ba578:	d8e6      	bhi.n	ba548 <__multiply+0x10c>
   ba57a:	9a01      	ldr	r2, [sp, #4]
   ba57c:	50a9      	str	r1, [r5, r2]
   ba57e:	3504      	adds	r5, #4
   ba580:	e79a      	b.n	ba4b8 <__multiply+0x7c>
   ba582:	3e01      	subs	r6, #1
   ba584:	e79c      	b.n	ba4c0 <__multiply+0x84>
   ba586:	bf00      	nop
   ba588:	000bb739 	.word	0x000bb739
   ba58c:	000bb7c2 	.word	0x000bb7c2

000ba590 <__pow5mult>:
   ba590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba594:	4615      	mov	r5, r2
   ba596:	f012 0203 	ands.w	r2, r2, #3
   ba59a:	4606      	mov	r6, r0
   ba59c:	460f      	mov	r7, r1
   ba59e:	d007      	beq.n	ba5b0 <__pow5mult+0x20>
   ba5a0:	4c25      	ldr	r4, [pc, #148]	; (ba638 <__pow5mult+0xa8>)
   ba5a2:	3a01      	subs	r2, #1
   ba5a4:	2300      	movs	r3, #0
   ba5a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ba5aa:	f7ff fe51 	bl	ba250 <__multadd>
   ba5ae:	4607      	mov	r7, r0
   ba5b0:	10ad      	asrs	r5, r5, #2
   ba5b2:	d03d      	beq.n	ba630 <__pow5mult+0xa0>
   ba5b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba5b6:	b97c      	cbnz	r4, ba5d8 <__pow5mult+0x48>
   ba5b8:	2010      	movs	r0, #16
   ba5ba:	f7fc fefd 	bl	b73b8 <malloc>
   ba5be:	4602      	mov	r2, r0
   ba5c0:	6270      	str	r0, [r6, #36]	; 0x24
   ba5c2:	b928      	cbnz	r0, ba5d0 <__pow5mult+0x40>
   ba5c4:	4b1d      	ldr	r3, [pc, #116]	; (ba63c <__pow5mult+0xac>)
   ba5c6:	481e      	ldr	r0, [pc, #120]	; (ba640 <__pow5mult+0xb0>)
   ba5c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   ba5cc:	f7fc ff34 	bl	b7438 <__assert_func>
   ba5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba5d4:	6004      	str	r4, [r0, #0]
   ba5d6:	60c4      	str	r4, [r0, #12]
   ba5d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ba5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ba5e0:	b94c      	cbnz	r4, ba5f6 <__pow5mult+0x66>
   ba5e2:	f240 2171 	movw	r1, #625	; 0x271
   ba5e6:	4630      	mov	r0, r6
   ba5e8:	f7ff ff12 	bl	ba410 <__i2b>
   ba5ec:	2300      	movs	r3, #0
   ba5ee:	f8c8 0008 	str.w	r0, [r8, #8]
   ba5f2:	4604      	mov	r4, r0
   ba5f4:	6003      	str	r3, [r0, #0]
   ba5f6:	f04f 0900 	mov.w	r9, #0
   ba5fa:	07eb      	lsls	r3, r5, #31
   ba5fc:	d50a      	bpl.n	ba614 <__pow5mult+0x84>
   ba5fe:	4639      	mov	r1, r7
   ba600:	4622      	mov	r2, r4
   ba602:	4630      	mov	r0, r6
   ba604:	f7ff ff1a 	bl	ba43c <__multiply>
   ba608:	4639      	mov	r1, r7
   ba60a:	4680      	mov	r8, r0
   ba60c:	4630      	mov	r0, r6
   ba60e:	f7ff fdfd 	bl	ba20c <_Bfree>
   ba612:	4647      	mov	r7, r8
   ba614:	106d      	asrs	r5, r5, #1
   ba616:	d00b      	beq.n	ba630 <__pow5mult+0xa0>
   ba618:	6820      	ldr	r0, [r4, #0]
   ba61a:	b938      	cbnz	r0, ba62c <__pow5mult+0x9c>
   ba61c:	4622      	mov	r2, r4
   ba61e:	4621      	mov	r1, r4
   ba620:	4630      	mov	r0, r6
   ba622:	f7ff ff0b 	bl	ba43c <__multiply>
   ba626:	6020      	str	r0, [r4, #0]
   ba628:	f8c0 9000 	str.w	r9, [r0]
   ba62c:	4604      	mov	r4, r0
   ba62e:	e7e4      	b.n	ba5fa <__pow5mult+0x6a>
   ba630:	4638      	mov	r0, r7
   ba632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba636:	bf00      	nop
   ba638:	000bb910 	.word	0x000bb910
   ba63c:	000bb512 	.word	0x000bb512
   ba640:	000bb7c2 	.word	0x000bb7c2

000ba644 <__lshift>:
   ba644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba648:	460c      	mov	r4, r1
   ba64a:	6849      	ldr	r1, [r1, #4]
   ba64c:	6923      	ldr	r3, [r4, #16]
   ba64e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ba652:	68a3      	ldr	r3, [r4, #8]
   ba654:	4607      	mov	r7, r0
   ba656:	4691      	mov	r9, r2
   ba658:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ba65c:	f108 0601 	add.w	r6, r8, #1
   ba660:	42b3      	cmp	r3, r6
   ba662:	db0b      	blt.n	ba67c <__lshift+0x38>
   ba664:	4638      	mov	r0, r7
   ba666:	f7ff fd91 	bl	ba18c <_Balloc>
   ba66a:	4605      	mov	r5, r0
   ba66c:	b948      	cbnz	r0, ba682 <__lshift+0x3e>
   ba66e:	4602      	mov	r2, r0
   ba670:	4b2a      	ldr	r3, [pc, #168]	; (ba71c <__lshift+0xd8>)
   ba672:	482b      	ldr	r0, [pc, #172]	; (ba720 <__lshift+0xdc>)
   ba674:	f240 11d9 	movw	r1, #473	; 0x1d9
   ba678:	f7fc fede 	bl	b7438 <__assert_func>
   ba67c:	3101      	adds	r1, #1
   ba67e:	005b      	lsls	r3, r3, #1
   ba680:	e7ee      	b.n	ba660 <__lshift+0x1c>
   ba682:	2300      	movs	r3, #0
   ba684:	f100 0114 	add.w	r1, r0, #20
   ba688:	f100 0210 	add.w	r2, r0, #16
   ba68c:	4618      	mov	r0, r3
   ba68e:	4553      	cmp	r3, sl
   ba690:	db37      	blt.n	ba702 <__lshift+0xbe>
   ba692:	6920      	ldr	r0, [r4, #16]
   ba694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ba698:	f104 0314 	add.w	r3, r4, #20
   ba69c:	f019 091f 	ands.w	r9, r9, #31
   ba6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ba6a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   ba6a8:	d02f      	beq.n	ba70a <__lshift+0xc6>
   ba6aa:	f1c9 0e20 	rsb	lr, r9, #32
   ba6ae:	468a      	mov	sl, r1
   ba6b0:	f04f 0c00 	mov.w	ip, #0
   ba6b4:	681a      	ldr	r2, [r3, #0]
   ba6b6:	fa02 f209 	lsl.w	r2, r2, r9
   ba6ba:	ea42 020c 	orr.w	r2, r2, ip
   ba6be:	f84a 2b04 	str.w	r2, [sl], #4
   ba6c2:	f853 2b04 	ldr.w	r2, [r3], #4
   ba6c6:	4298      	cmp	r0, r3
   ba6c8:	fa22 fc0e 	lsr.w	ip, r2, lr
   ba6cc:	d8f2      	bhi.n	ba6b4 <__lshift+0x70>
   ba6ce:	1b03      	subs	r3, r0, r4
   ba6d0:	3b15      	subs	r3, #21
   ba6d2:	f023 0303 	bic.w	r3, r3, #3
   ba6d6:	3304      	adds	r3, #4
   ba6d8:	f104 0215 	add.w	r2, r4, #21
   ba6dc:	4290      	cmp	r0, r2
   ba6de:	bf38      	it	cc
   ba6e0:	2304      	movcc	r3, #4
   ba6e2:	f841 c003 	str.w	ip, [r1, r3]
   ba6e6:	f1bc 0f00 	cmp.w	ip, #0
   ba6ea:	d001      	beq.n	ba6f0 <__lshift+0xac>
   ba6ec:	f108 0602 	add.w	r6, r8, #2
   ba6f0:	3e01      	subs	r6, #1
   ba6f2:	4638      	mov	r0, r7
   ba6f4:	612e      	str	r6, [r5, #16]
   ba6f6:	4621      	mov	r1, r4
   ba6f8:	f7ff fd88 	bl	ba20c <_Bfree>
   ba6fc:	4628      	mov	r0, r5
   ba6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba702:	f842 0f04 	str.w	r0, [r2, #4]!
   ba706:	3301      	adds	r3, #1
   ba708:	e7c1      	b.n	ba68e <__lshift+0x4a>
   ba70a:	3904      	subs	r1, #4
   ba70c:	f853 2b04 	ldr.w	r2, [r3], #4
   ba710:	f841 2f04 	str.w	r2, [r1, #4]!
   ba714:	4298      	cmp	r0, r3
   ba716:	d8f9      	bhi.n	ba70c <__lshift+0xc8>
   ba718:	e7ea      	b.n	ba6f0 <__lshift+0xac>
   ba71a:	bf00      	nop
   ba71c:	000bb739 	.word	0x000bb739
   ba720:	000bb7c2 	.word	0x000bb7c2

000ba724 <__mcmp>:
   ba724:	b530      	push	{r4, r5, lr}
   ba726:	6902      	ldr	r2, [r0, #16]
   ba728:	690c      	ldr	r4, [r1, #16]
   ba72a:	1b12      	subs	r2, r2, r4
   ba72c:	d10e      	bne.n	ba74c <__mcmp+0x28>
   ba72e:	f100 0314 	add.w	r3, r0, #20
   ba732:	3114      	adds	r1, #20
   ba734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ba738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ba73c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ba740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ba744:	42a5      	cmp	r5, r4
   ba746:	d003      	beq.n	ba750 <__mcmp+0x2c>
   ba748:	d305      	bcc.n	ba756 <__mcmp+0x32>
   ba74a:	2201      	movs	r2, #1
   ba74c:	4610      	mov	r0, r2
   ba74e:	bd30      	pop	{r4, r5, pc}
   ba750:	4283      	cmp	r3, r0
   ba752:	d3f3      	bcc.n	ba73c <__mcmp+0x18>
   ba754:	e7fa      	b.n	ba74c <__mcmp+0x28>
   ba756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba75a:	e7f7      	b.n	ba74c <__mcmp+0x28>

000ba75c <__mdiff>:
   ba75c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba760:	460c      	mov	r4, r1
   ba762:	4606      	mov	r6, r0
   ba764:	4611      	mov	r1, r2
   ba766:	4620      	mov	r0, r4
   ba768:	4690      	mov	r8, r2
   ba76a:	f7ff ffdb 	bl	ba724 <__mcmp>
   ba76e:	1e05      	subs	r5, r0, #0
   ba770:	d110      	bne.n	ba794 <__mdiff+0x38>
   ba772:	4629      	mov	r1, r5
   ba774:	4630      	mov	r0, r6
   ba776:	f7ff fd09 	bl	ba18c <_Balloc>
   ba77a:	b930      	cbnz	r0, ba78a <__mdiff+0x2e>
   ba77c:	4b3a      	ldr	r3, [pc, #232]	; (ba868 <__mdiff+0x10c>)
   ba77e:	4602      	mov	r2, r0
   ba780:	f240 2132 	movw	r1, #562	; 0x232
   ba784:	4839      	ldr	r0, [pc, #228]	; (ba86c <__mdiff+0x110>)
   ba786:	f7fc fe57 	bl	b7438 <__assert_func>
   ba78a:	2301      	movs	r3, #1
   ba78c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ba790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba794:	bfa4      	itt	ge
   ba796:	4643      	movge	r3, r8
   ba798:	46a0      	movge	r8, r4
   ba79a:	4630      	mov	r0, r6
   ba79c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ba7a0:	bfa6      	itte	ge
   ba7a2:	461c      	movge	r4, r3
   ba7a4:	2500      	movge	r5, #0
   ba7a6:	2501      	movlt	r5, #1
   ba7a8:	f7ff fcf0 	bl	ba18c <_Balloc>
   ba7ac:	b920      	cbnz	r0, ba7b8 <__mdiff+0x5c>
   ba7ae:	4b2e      	ldr	r3, [pc, #184]	; (ba868 <__mdiff+0x10c>)
   ba7b0:	4602      	mov	r2, r0
   ba7b2:	f44f 7110 	mov.w	r1, #576	; 0x240
   ba7b6:	e7e5      	b.n	ba784 <__mdiff+0x28>
   ba7b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   ba7bc:	6926      	ldr	r6, [r4, #16]
   ba7be:	60c5      	str	r5, [r0, #12]
   ba7c0:	f104 0914 	add.w	r9, r4, #20
   ba7c4:	f108 0514 	add.w	r5, r8, #20
   ba7c8:	f100 0e14 	add.w	lr, r0, #20
   ba7cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   ba7d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   ba7d4:	f108 0210 	add.w	r2, r8, #16
   ba7d8:	46f2      	mov	sl, lr
   ba7da:	2100      	movs	r1, #0
   ba7dc:	f859 3b04 	ldr.w	r3, [r9], #4
   ba7e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ba7e4:	fa1f f883 	uxth.w	r8, r3
   ba7e8:	fa11 f18b 	uxtah	r1, r1, fp
   ba7ec:	0c1b      	lsrs	r3, r3, #16
   ba7ee:	eba1 0808 	sub.w	r8, r1, r8
   ba7f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba7f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ba7fa:	fa1f f888 	uxth.w	r8, r8
   ba7fe:	1419      	asrs	r1, r3, #16
   ba800:	454e      	cmp	r6, r9
   ba802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ba806:	f84a 3b04 	str.w	r3, [sl], #4
   ba80a:	d8e7      	bhi.n	ba7dc <__mdiff+0x80>
   ba80c:	1b33      	subs	r3, r6, r4
   ba80e:	3b15      	subs	r3, #21
   ba810:	f023 0303 	bic.w	r3, r3, #3
   ba814:	3304      	adds	r3, #4
   ba816:	3415      	adds	r4, #21
   ba818:	42a6      	cmp	r6, r4
   ba81a:	bf38      	it	cc
   ba81c:	2304      	movcc	r3, #4
   ba81e:	441d      	add	r5, r3
   ba820:	4473      	add	r3, lr
   ba822:	469e      	mov	lr, r3
   ba824:	462e      	mov	r6, r5
   ba826:	4566      	cmp	r6, ip
   ba828:	d30e      	bcc.n	ba848 <__mdiff+0xec>
   ba82a:	f10c 0203 	add.w	r2, ip, #3
   ba82e:	1b52      	subs	r2, r2, r5
   ba830:	f022 0203 	bic.w	r2, r2, #3
   ba834:	3d03      	subs	r5, #3
   ba836:	45ac      	cmp	ip, r5
   ba838:	bf38      	it	cc
   ba83a:	2200      	movcc	r2, #0
   ba83c:	441a      	add	r2, r3
   ba83e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba842:	b17b      	cbz	r3, ba864 <__mdiff+0x108>
   ba844:	6107      	str	r7, [r0, #16]
   ba846:	e7a3      	b.n	ba790 <__mdiff+0x34>
   ba848:	f856 8b04 	ldr.w	r8, [r6], #4
   ba84c:	fa11 f288 	uxtah	r2, r1, r8
   ba850:	1414      	asrs	r4, r2, #16
   ba852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba856:	b292      	uxth	r2, r2
   ba858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba85c:	f84e 2b04 	str.w	r2, [lr], #4
   ba860:	1421      	asrs	r1, r4, #16
   ba862:	e7e0      	b.n	ba826 <__mdiff+0xca>
   ba864:	3f01      	subs	r7, #1
   ba866:	e7ea      	b.n	ba83e <__mdiff+0xe2>
   ba868:	000bb739 	.word	0x000bb739
   ba86c:	000bb7c2 	.word	0x000bb7c2

000ba870 <__ulp>:
   ba870:	b082      	sub	sp, #8
   ba872:	ed8d 0b00 	vstr	d0, [sp]
   ba876:	9b01      	ldr	r3, [sp, #4]
   ba878:	4912      	ldr	r1, [pc, #72]	; (ba8c4 <__ulp+0x54>)
   ba87a:	4019      	ands	r1, r3
   ba87c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba880:	2900      	cmp	r1, #0
   ba882:	dd05      	ble.n	ba890 <__ulp+0x20>
   ba884:	2200      	movs	r2, #0
   ba886:	460b      	mov	r3, r1
   ba888:	ec43 2b10 	vmov	d0, r2, r3
   ba88c:	b002      	add	sp, #8
   ba88e:	4770      	bx	lr
   ba890:	4249      	negs	r1, r1
   ba892:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba896:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba89a:	f04f 0200 	mov.w	r2, #0
   ba89e:	f04f 0300 	mov.w	r3, #0
   ba8a2:	da04      	bge.n	ba8ae <__ulp+0x3e>
   ba8a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba8a8:	fa41 f300 	asr.w	r3, r1, r0
   ba8ac:	e7ec      	b.n	ba888 <__ulp+0x18>
   ba8ae:	f1a0 0114 	sub.w	r1, r0, #20
   ba8b2:	291e      	cmp	r1, #30
   ba8b4:	bfda      	itte	le
   ba8b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba8ba:	fa20 f101 	lsrle.w	r1, r0, r1
   ba8be:	2101      	movgt	r1, #1
   ba8c0:	460a      	mov	r2, r1
   ba8c2:	e7e1      	b.n	ba888 <__ulp+0x18>
   ba8c4:	7ff00000 	.word	0x7ff00000

000ba8c8 <__b2d>:
   ba8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba8ca:	6905      	ldr	r5, [r0, #16]
   ba8cc:	f100 0714 	add.w	r7, r0, #20
   ba8d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba8d4:	1f2e      	subs	r6, r5, #4
   ba8d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba8da:	4620      	mov	r0, r4
   ba8dc:	f7ff fd48 	bl	ba370 <__hi0bits>
   ba8e0:	f1c0 0320 	rsb	r3, r0, #32
   ba8e4:	280a      	cmp	r0, #10
   ba8e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba964 <__b2d+0x9c>
   ba8ea:	600b      	str	r3, [r1, #0]
   ba8ec:	dc14      	bgt.n	ba918 <__b2d+0x50>
   ba8ee:	f1c0 0e0b 	rsb	lr, r0, #11
   ba8f2:	fa24 f10e 	lsr.w	r1, r4, lr
   ba8f6:	42b7      	cmp	r7, r6
   ba8f8:	ea41 030c 	orr.w	r3, r1, ip
   ba8fc:	bf34      	ite	cc
   ba8fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba902:	2100      	movcs	r1, #0
   ba904:	3015      	adds	r0, #21
   ba906:	fa04 f000 	lsl.w	r0, r4, r0
   ba90a:	fa21 f10e 	lsr.w	r1, r1, lr
   ba90e:	ea40 0201 	orr.w	r2, r0, r1
   ba912:	ec43 2b10 	vmov	d0, r2, r3
   ba916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba918:	42b7      	cmp	r7, r6
   ba91a:	bf3a      	itte	cc
   ba91c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba920:	f1a5 0608 	subcc.w	r6, r5, #8
   ba924:	2100      	movcs	r1, #0
   ba926:	380b      	subs	r0, #11
   ba928:	d017      	beq.n	ba95a <__b2d+0x92>
   ba92a:	f1c0 0c20 	rsb	ip, r0, #32
   ba92e:	fa04 f500 	lsl.w	r5, r4, r0
   ba932:	42be      	cmp	r6, r7
   ba934:	fa21 f40c 	lsr.w	r4, r1, ip
   ba938:	ea45 0504 	orr.w	r5, r5, r4
   ba93c:	bf8c      	ite	hi
   ba93e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba942:	2400      	movls	r4, #0
   ba944:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba948:	fa01 f000 	lsl.w	r0, r1, r0
   ba94c:	fa24 f40c 	lsr.w	r4, r4, ip
   ba950:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba954:	ea40 0204 	orr.w	r2, r0, r4
   ba958:	e7db      	b.n	ba912 <__b2d+0x4a>
   ba95a:	ea44 030c 	orr.w	r3, r4, ip
   ba95e:	460a      	mov	r2, r1
   ba960:	e7d7      	b.n	ba912 <__b2d+0x4a>
   ba962:	bf00      	nop
   ba964:	3ff00000 	.word	0x3ff00000

000ba968 <__d2b>:
   ba968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba96c:	4689      	mov	r9, r1
   ba96e:	2101      	movs	r1, #1
   ba970:	ec57 6b10 	vmov	r6, r7, d0
   ba974:	4690      	mov	r8, r2
   ba976:	f7ff fc09 	bl	ba18c <_Balloc>
   ba97a:	4604      	mov	r4, r0
   ba97c:	b930      	cbnz	r0, ba98c <__d2b+0x24>
   ba97e:	4602      	mov	r2, r0
   ba980:	4b25      	ldr	r3, [pc, #148]	; (baa18 <__d2b+0xb0>)
   ba982:	4826      	ldr	r0, [pc, #152]	; (baa1c <__d2b+0xb4>)
   ba984:	f240 310a 	movw	r1, #778	; 0x30a
   ba988:	f7fc fd56 	bl	b7438 <__assert_func>
   ba98c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba990:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba994:	bb35      	cbnz	r5, ba9e4 <__d2b+0x7c>
   ba996:	2e00      	cmp	r6, #0
   ba998:	9301      	str	r3, [sp, #4]
   ba99a:	d028      	beq.n	ba9ee <__d2b+0x86>
   ba99c:	4668      	mov	r0, sp
   ba99e:	9600      	str	r6, [sp, #0]
   ba9a0:	f7ff fd06 	bl	ba3b0 <__lo0bits>
   ba9a4:	9900      	ldr	r1, [sp, #0]
   ba9a6:	b300      	cbz	r0, ba9ea <__d2b+0x82>
   ba9a8:	9a01      	ldr	r2, [sp, #4]
   ba9aa:	f1c0 0320 	rsb	r3, r0, #32
   ba9ae:	fa02 f303 	lsl.w	r3, r2, r3
   ba9b2:	430b      	orrs	r3, r1
   ba9b4:	40c2      	lsrs	r2, r0
   ba9b6:	6163      	str	r3, [r4, #20]
   ba9b8:	9201      	str	r2, [sp, #4]
   ba9ba:	9b01      	ldr	r3, [sp, #4]
   ba9bc:	61a3      	str	r3, [r4, #24]
   ba9be:	2b00      	cmp	r3, #0
   ba9c0:	bf14      	ite	ne
   ba9c2:	2202      	movne	r2, #2
   ba9c4:	2201      	moveq	r2, #1
   ba9c6:	6122      	str	r2, [r4, #16]
   ba9c8:	b1d5      	cbz	r5, baa00 <__d2b+0x98>
   ba9ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba9ce:	4405      	add	r5, r0
   ba9d0:	f8c9 5000 	str.w	r5, [r9]
   ba9d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba9d8:	f8c8 0000 	str.w	r0, [r8]
   ba9dc:	4620      	mov	r0, r4
   ba9de:	b003      	add	sp, #12
   ba9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba9e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba9e8:	e7d5      	b.n	ba996 <__d2b+0x2e>
   ba9ea:	6161      	str	r1, [r4, #20]
   ba9ec:	e7e5      	b.n	ba9ba <__d2b+0x52>
   ba9ee:	a801      	add	r0, sp, #4
   ba9f0:	f7ff fcde 	bl	ba3b0 <__lo0bits>
   ba9f4:	9b01      	ldr	r3, [sp, #4]
   ba9f6:	6163      	str	r3, [r4, #20]
   ba9f8:	2201      	movs	r2, #1
   ba9fa:	6122      	str	r2, [r4, #16]
   ba9fc:	3020      	adds	r0, #32
   ba9fe:	e7e3      	b.n	ba9c8 <__d2b+0x60>
   baa00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   baa04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   baa08:	f8c9 0000 	str.w	r0, [r9]
   baa0c:	6918      	ldr	r0, [r3, #16]
   baa0e:	f7ff fcaf 	bl	ba370 <__hi0bits>
   baa12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   baa16:	e7df      	b.n	ba9d8 <__d2b+0x70>
   baa18:	000bb739 	.word	0x000bb739
   baa1c:	000bb7c2 	.word	0x000bb7c2

000baa20 <__ratio>:
   baa20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa24:	4688      	mov	r8, r1
   baa26:	4669      	mov	r1, sp
   baa28:	4681      	mov	r9, r0
   baa2a:	f7ff ff4d 	bl	ba8c8 <__b2d>
   baa2e:	a901      	add	r1, sp, #4
   baa30:	4640      	mov	r0, r8
   baa32:	ec55 4b10 	vmov	r4, r5, d0
   baa36:	f7ff ff47 	bl	ba8c8 <__b2d>
   baa3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   baa3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   baa42:	eba3 0c02 	sub.w	ip, r3, r2
   baa46:	e9dd 3200 	ldrd	r3, r2, [sp]
   baa4a:	1a9b      	subs	r3, r3, r2
   baa4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   baa50:	ec51 0b10 	vmov	r0, r1, d0
   baa54:	2b00      	cmp	r3, #0
   baa56:	bfd6      	itet	le
   baa58:	460a      	movle	r2, r1
   baa5a:	462a      	movgt	r2, r5
   baa5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   baa60:	468b      	mov	fp, r1
   baa62:	462f      	mov	r7, r5
   baa64:	bfd4      	ite	le
   baa66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   baa6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   baa6e:	4620      	mov	r0, r4
   baa70:	ee10 2a10 	vmov	r2, s0
   baa74:	465b      	mov	r3, fp
   baa76:	4639      	mov	r1, r7
   baa78:	f7f9 fdb8 	bl	b45ec <__aeabi_ddiv>
   baa7c:	ec41 0b10 	vmov	d0, r0, r1
   baa80:	b003      	add	sp, #12
   baa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baa86 <__copybits>:
   baa86:	3901      	subs	r1, #1
   baa88:	b570      	push	{r4, r5, r6, lr}
   baa8a:	1149      	asrs	r1, r1, #5
   baa8c:	6914      	ldr	r4, [r2, #16]
   baa8e:	3101      	adds	r1, #1
   baa90:	f102 0314 	add.w	r3, r2, #20
   baa94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   baa98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   baa9c:	1f05      	subs	r5, r0, #4
   baa9e:	42a3      	cmp	r3, r4
   baaa0:	d30c      	bcc.n	baabc <__copybits+0x36>
   baaa2:	1aa3      	subs	r3, r4, r2
   baaa4:	3b11      	subs	r3, #17
   baaa6:	f023 0303 	bic.w	r3, r3, #3
   baaaa:	3211      	adds	r2, #17
   baaac:	42a2      	cmp	r2, r4
   baaae:	bf88      	it	hi
   baab0:	2300      	movhi	r3, #0
   baab2:	4418      	add	r0, r3
   baab4:	2300      	movs	r3, #0
   baab6:	4288      	cmp	r0, r1
   baab8:	d305      	bcc.n	baac6 <__copybits+0x40>
   baaba:	bd70      	pop	{r4, r5, r6, pc}
   baabc:	f853 6b04 	ldr.w	r6, [r3], #4
   baac0:	f845 6f04 	str.w	r6, [r5, #4]!
   baac4:	e7eb      	b.n	baa9e <__copybits+0x18>
   baac6:	f840 3b04 	str.w	r3, [r0], #4
   baaca:	e7f4      	b.n	baab6 <__copybits+0x30>

000baacc <__any_on>:
   baacc:	f100 0214 	add.w	r2, r0, #20
   baad0:	6900      	ldr	r0, [r0, #16]
   baad2:	114b      	asrs	r3, r1, #5
   baad4:	4298      	cmp	r0, r3
   baad6:	b510      	push	{r4, lr}
   baad8:	db11      	blt.n	baafe <__any_on+0x32>
   baada:	dd0a      	ble.n	baaf2 <__any_on+0x26>
   baadc:	f011 011f 	ands.w	r1, r1, #31
   baae0:	d007      	beq.n	baaf2 <__any_on+0x26>
   baae2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   baae6:	fa24 f001 	lsr.w	r0, r4, r1
   baaea:	fa00 f101 	lsl.w	r1, r0, r1
   baaee:	428c      	cmp	r4, r1
   baaf0:	d10b      	bne.n	bab0a <__any_on+0x3e>
   baaf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   baaf6:	4293      	cmp	r3, r2
   baaf8:	d803      	bhi.n	bab02 <__any_on+0x36>
   baafa:	2000      	movs	r0, #0
   baafc:	bd10      	pop	{r4, pc}
   baafe:	4603      	mov	r3, r0
   bab00:	e7f7      	b.n	baaf2 <__any_on+0x26>
   bab02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bab06:	2900      	cmp	r1, #0
   bab08:	d0f5      	beq.n	baaf6 <__any_on+0x2a>
   bab0a:	2001      	movs	r0, #1
   bab0c:	e7f6      	b.n	baafc <__any_on+0x30>

000bab0e <_calloc_r>:
   bab0e:	b513      	push	{r0, r1, r4, lr}
   bab10:	434a      	muls	r2, r1
   bab12:	4611      	mov	r1, r2
   bab14:	9201      	str	r2, [sp, #4]
   bab16:	f7fc fc7f 	bl	b7418 <_malloc_r>
   bab1a:	4604      	mov	r4, r0
   bab1c:	b118      	cbz	r0, bab26 <_calloc_r+0x18>
   bab1e:	9a01      	ldr	r2, [sp, #4]
   bab20:	2100      	movs	r1, #0
   bab22:	f7fe f80f 	bl	b8b44 <memset>
   bab26:	4620      	mov	r0, r4
   bab28:	b002      	add	sp, #8
   bab2a:	bd10      	pop	{r4, pc}
   bab2c:	0000      	movs	r0, r0
	...

000bab30 <nan>:
   bab30:	ed9f 0b01 	vldr	d0, [pc, #4]	; bab38 <nan+0x8>
   bab34:	4770      	bx	lr
   bab36:	bf00      	nop
   bab38:	00000000 	.word	0x00000000
   bab3c:	7ff80000 	.word	0x7ff80000

000bab40 <__ascii_wctomb>:
   bab40:	b149      	cbz	r1, bab56 <__ascii_wctomb+0x16>
   bab42:	2aff      	cmp	r2, #255	; 0xff
   bab44:	bf85      	ittet	hi
   bab46:	238a      	movhi	r3, #138	; 0x8a
   bab48:	6003      	strhi	r3, [r0, #0]
   bab4a:	700a      	strbls	r2, [r1, #0]
   bab4c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bab50:	bf98      	it	ls
   bab52:	2001      	movls	r0, #1
   bab54:	4770      	bx	lr
   bab56:	4608      	mov	r0, r1
   bab58:	4770      	bx	lr

000bab5a <link_code_end>:
	...

000bab5c <link_const_data_start>:
   bab5c:	000bac21 	.word	0x000bac21
   bab60:	000bac29 	.word	0x000bac29
   bab64:	000bac2d 	.word	0x000bac2d
   bab68:	000bac36 	.word	0x000bac36
   bab6c:	000bac3e 	.word	0x000bac3e
   bab70:	000bac4a 	.word	0x000bac4a
   bab74:	000bac50 	.word	0x000bac50
   bab78:	206c6c41 	.word	0x206c6c41
   bab7c:	68746977 	.word	0x68746977
   bab80:	74206e69 	.word	0x74206e69
   bab84:	73657268 	.word	0x73657268
   bab88:	646c6f68 	.word	0x646c6f68
   bab8c:	00000073 	.word	0x00000073
	...
   babb8:	72617453 	.word	0x72617453
   babbc:	20707574 	.word	0x20707574
   babc0:	63637553 	.word	0x63637553
   babc4:	66737365 	.word	0x66737365
   babc8:	00006c75 	.word	0x00006c75
	...

000babf8 <dynalib_user>:
   babf8:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   bac08:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bac18:	72697620 6c617574 6b6e5500 6e776f6e      virtual.Unknown
   bac28:	746f4e00 61684320 6e696772 68430067     .Not Charging.Ch
   bac38:	65677261 69440064 61686373 6e696772     arged.Dischargin
   bac48:	61460067 00746c75 6f636944 63656e6e     g.Fault.Diconnec
   bac58:	00646574 65530031 65562074 736f6272     ted.1.Set Verbos
   bac68:	6f4d2065 30006564 656c4300 64657261     e Mode.0.Cleared
   bac78:	72655620 65736f62 646f4d20 6f4e0065      Verbose Mode.No
   bac88:	74614420 62550061 746f6469 6f482073      Data.Ubidots Ho
   bac98:	52006b6f 6f707365 2065736e 65636552     ok.Response Rece
   baca8:	64657669 61745300 53006574 74207465     ived.State.Set t
   bacb8:	7233206f 61502064 20797472 006d6953     o 3rd Party Sim.
   bacc8:	20746553 50206f74 69747261 20656c63     Set to Particle 
   bacd8:	006d6953 7065654b 696c4120 73206576     Sim.Keep Alive s
   bace8:	74207465 6925206f 63657320 65654b00     et to %i sec.Kee
   bacf8:	6c412070 00657669 64616f4c 20676e69     p Alive.Loading 
   bad08:	74737953 44206d65 75616665 0073746c     System Defaults.
   bad18:	64616f4c 20676e69 72656c41 65442074     Loading Alert De
   bad28:	6c756166 50007374 65747465 61570064     faults.Petted.Wa
   bad38:	64686374 7b00676f 6d655422 61726570     tchdog.{"Tempera
   bad48:	65727574 34253a22 2c66312e 75482220     ture":%4.1f, "Hu
   bad58:	6964696d 3a227974 312e3425 42222c66     midity":%4.1f,"B
   bad68:	65747461 3a227972 007d6925 726f7473     attery":%i}.stor
   bad78:	2d656761 69636166 7974696c 6f6f682d     age-facility-hoo
   bad88:	7246006b 25206d6f 6f742073 00732520     k.From %s to %s.
   bad98:	74617453 72542065 69736e61 6e6f6974     State Transition
   bada8:	6d655400 614d5f70 203a2078 312e3325     .Temp_Max : %3.1
   badb8:	65540066 4d5f706d 3a206e69 2e332520     f.Temp_Min : %3.
   badc8:	48006631 64696d75 5f797469 3a78614d     1f.Humidity_Max:
   badd8:	2e332520 48006631 64696d75 5f797469      %3.1f.Humidity_
   bade8:	206e694d 3325203a 0066312e 65707055     Min : %3.1f.Uppe
   badf8:	65542072 7265706d 72757461 68542065     r Temperature Th
   bae08:	68736572 20646c6f 00746553 65776f4c     reshold Set.Lowe
   bae18:	65542072 7265706d 72757461 68542065     r Temperature Th
   bae28:	68736572 20646c6f 00746553 65707055     reshold Set.Uppe
   bae38:	75482072 6964696d 54207974 73657268     r Humidity Thres
   bae48:	646c6f68 74655320 776f4c00 48207265     hold Set.Lower H
   bae58:	64696d75 20797469 65726854 6c6f6873     umidity Threshol
   bae68:	65532064 73410074 74726573 466e6f69     d Set.AssertionF
   bae78:	756c6961 73206572 26206372 72732026     ailure src && sr
   bae88:	633e2d63 626c6c61 006b6361 312e3425     c->callback.%4.1
   bae98:	00432a66 312e3425 00252566 25206925     f*C.%4.1f%%.%i %
   baea8:	6f4c0025 65542077 4120706d 7472656c     %.Low Temp Alert
   baeb8:	2e342520 3c206632 2e342520 48006632      %4.2f < %4.2f.H
   baec8:	20686769 706d6554 656c4120 25207472     igh Temp Alert %
   baed8:	66322e34 25203e20 66322e34 776f4c00     4.2f > %4.2f.Low
   baee8:	6d754820 74696469 6c412079 20747265      Humidity Alert 
   baef8:	322e3425 203c2066 322e3425 69480066     %4.2f < %4.2f.Hi
   baf08:	48206867 64696d75 20797469 72656c41     gh Humidity Aler
   baf18:	34252074 2066322e 3425203c 0066322e     t %4.2f < %4.2f.
   baf28:	72656c41 73007374 6b726170 7665642f     Alerts.spark/dev
   baf38:	2f656369 73736573 2f6e6f69 00646e65     ice/session/end.
   baf48:	6f727245 74532072 20657461 6552202d     Error State - Re
   baf58:	00746573 656c6552 00657361 706d6574     set.Release.temp
   baf68:	74617265 00657275 696d7568 79746964     erature.humidity
   baf78:	6d657400 61726570 65727574 7070552d     .temperature-Upp
   baf88:	74007265 65706d65 75746172 6c2d6572     er.temperature-l
   baf98:	7265776f 6d756800 74696469 70752d79     ower.humidity-up
   bafa8:	00726570 696d7568 79746964 776f6c2d     per.humidity-low
   bafb8:	42007265 65747461 42007972 65747461     er.Battery.Batte
   bafc8:	6f437972 7865746e 654b0074 41207065     ryContext.Keep A
   bafd8:	6576696c 63655320 61654d00 65727573     live Sec.Measure
   bafe8:	776f4e2d 72655600 65736f62 646f4d2d     -Now.Verbose-Mod
   baff8:	65540065 552d706d 72657070 6d694c2d     e.Temp-Upper-Lim
   bb008:	54007469 2d706d65 65776f4c 694c2d72     it.Temp-Lower-Li
   bb018:	0074696d 696d7548 79746964 776f4c2d     mit.Humidity-Low
   bb028:	4c2d7265 74696d69 6d754800 79746469     er-Limit.Humidty
   bb038:	7070752d 4c2d7265 74696d69 6d695400     -upper-Limit.Tim
   bb048:	72450065 20726f72 4853202d 20313354     e.Error - SHT31 
   bb058:	74696e49 696c6169 6974617a 53006e6f     Initialization.S
   bb068:	74726174 00007075                       tartup..

000bb070 <_ZTV17PublishQueueAsync>:
	...
   bb078:	000b4b39 000b4b4d 000b67c9 000b6a0d     9K..MK...g...j..
   bb088:	000b69cd 000b69ab 000b6b53 000b69f3     .i...i..Sk...i..

000bb098 <_ZTV8MB85RC64>:
	...
   bb0a0:	000b4b11 000b4b25 000b5c35 000b5ccb     .K..%K..5\...\..
   bb0b0:	000b5d4d                                M]..

000bb0b4 <_ZL13releaseNumber>:
   bb0b4:	302e3931 00000030                       19.00...

000bb0bc <_ZL17FRAMversionNumber>:
   bb0bc:	00000005 74697277 74614465 61662061     ....writeData fa
   bb0cc:	64656c69 72756420 20676e69 73617265     iled during eras
   bb0dc:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

000bb0ec <_ZTV6MB85RC>:
	...
   bb0f4:	000b5b55 000b5b57 000b5c35 000b5ccb     U[..W[..5\...\..
   bb104:	000b5d4d 69766564 65526563 66206461     M]..deviceRead f
   bb114:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   bb124:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   bb134:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   bb144:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   bb154:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   bb164:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   bb174:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   bb184:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   bb194:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   bb1a4:	00000063                                c...

000bb1a8 <_ZTV12MCP79410SRAM>:
	...
   bb1b0:	000b5e0d 000b5e23 000b5dfd 000b5e01     .^..#^...]...^..
   bb1c0:	000b5e4d 000b613d 000b639d              M^..=a...c..

000bb1cc <_ZTV12MCP79410Time>:
	...
   bb1d4:	000b5e11 000b5e15                       .^...^..

000bb1dc <_ZTV14MCP79410EEPROM>:
	...
   bb1e4:	000b5e0f 000b5e31 000b5e05 000b5e09     .^..1^...^...^..
   bb1f4:	000b5e4d 000b6177 000b65e5              M^..wa...e..

000bb200 <_ZTV8MCP79410>:
	...
   bb208:	000b5e13 000b5e3f 6c627550 51687369     .^..?^..PublishQ
   bb218:	65756575 6e797341 75700063 73696c62     ueueAsync.publis
   bb228:	676e6968 20732520 74207325 253d6c74     hing %s %s ttl=%
   bb238:	6c662064 3d736761 70007825 696c6275     d flags=%x.publi
   bb248:	64656873 63757320 73736563 6c6c7566     shed successfull
   bb258:	75700079 73696c62 20646568 6c696166     y.published fail
   bb268:	202c6465 6c6c6977 74657220 69207972     ed, will retry i
   bb278:	6c25206e 736d2075 65757100 6e696575     n %lu ms.queuein
   bb288:	76652067 4e746e65 3d656d61 64207325     g eventName=%s d
   bb298:	3d617461 74207325 253d6c74 6c662064     ata=%s ttl=%d fl
   bb2a8:	31736761 2064253d 67616c66 253d3273     ags1=%d flags2=%
   bb2b8:	69732064 253d657a 70610064 75702e70     d size=%d.app.pu
   bb2c8:	00007162                                bq..

000bb2cc <_ZTV21PublishQueueAsyncBase>:
	...
   bb2dc:	000b67c9 000b4ac1 000b4ac1 000b4ac1     .g...J...J...J..
   bb2ec:	000b4ac1 000b4ac1                       .J...J..

000bb2f4 <_ZTV25PublishQueueAsyncRetained>:
	...
   bb2fc:	000b6969 000b697d 000b67c9 000b6a0d     ii..}i...g...j..
   bb30c:	000b69cd 000b69ab 000b6b53 000b69f3     .i...i..Sk...i..

000bb31c <_ZTVN5spark13CellularClassE>:
	...
   bb324:	000b7593 000b7589 000b757f 000b7535     .u...u...u..5u..
   bb334:	000b7573 000b7567 000b7e95 000b7e9d     su..gu...~...~..
   bb344:	000b755b 000b7553 000b7549 000b753f     [u..Su..Iu..?u..
   bb354:	000b7ecd                                .~..

000bb358 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb360:	000b75cd 000b75d3 000b7611 000b75e1     .u...u...v...u..
   bb370:	000b75cf                                .u..

000bb374 <_ZTVN5spark13EthernetClassE>:
	...
   bb37c:	000b7ba7 000b7b9d 000b7b93 000b7b89     .{...{...{...{..
   bb38c:	000b7b7d 000b7b71 000b7e95 000b7e9d     }{..q{...~...~..
   bb39c:	000b7b65 000b7b5d 000b7b53 000b7b49     e{..]{..S{..I{..
   bb3ac:	000b7ecd                                .~..

000bb3b0 <_ZTV7TwoWire>:
	...
   bb3b8:	000b7bc5 000b7c0f 000b7be7 000b7bc7     .{...|...{...{..
   bb3c8:	000b7bef 000b7bf7 000b7bff 000b7c07     .{...{...{...|..

000bb3d8 <_ZTV9IPAddress>:
	...
   bb3e0:	000b7d65 000b7d55 000b7d57 00707061     e}..U}..W}..app.

000bb3f0 <_ZTVN5spark12NetworkClassE>:
	...
   bb3f8:	000b7e55 000b7e5f 000b7e69 000b7e73     U~.._~..i~..s~..
   bb408:	000b7e7d 000b7e89 000b7e95 000b7e9d     }~...~...~...~..
   bb418:	000b7ea5 000b7eb1 000b7eb9 000b7ec3     .~...~...~...~..
   bb428:	000b7ecd 2b25005a 3a643330 75323025     .~..Z.%+03d:%02u
   bb438:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
   bb448:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

000bb458 <_ZTV11USARTSerial>:
	...
   bb460:	000b8541 000b85ad 000b8585 000b7fb9     A...............
   bb470:	000b8555 000b8571 000b8563 000b857f     U...q...c.......
   bb480:	000b8543 000b8547                       C...G...

000bb488 <_ZTV9USBSerial>:
	...
   bb490:	000b85eb 000b8653 000b8629 000b7fb9     ....S...).......
   bb4a0:	000b861b 000b85ed 000b85fd 000b864d     ............M...
   bb4b0:	000b860d 000b85e5                       ........

000bb4b8 <_ZSt7nothrow>:
   bb4b8:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   bb4c8:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000bb4d9 <day_name.1>:
   bb4d9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bb4e9:	61536972                                 riSat

000bb4ee <mon_name.0>:
   bb4ee:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bb4fe:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bb50e:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bb51e:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bb52e:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bb53e:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bb54e:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bb55e:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bb56e:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   bb57e:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   bb58e:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bb59e:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bb5ae:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bb5be:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bb5ce:	696c6474 61722f62 632e646e 00666e00     tdlib/rand.c.nf.
   bb5de:	74696e69 6e610079                        inity.an..

000bb5e8 <fpi.1>:
   bb5e8:	00000035 fffffbce 000003cb 00000001     5...............
   bb5f8:	00000000                                ....

000bb5fc <fpinan.0>:
   bb5fc:	00000034 fffffbce 000003cb 00000001     4...............
   bb60c:	00000000                                ....

000bb610 <tinytens>:
   bb610:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bb620:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bb630:	64ac6f43 11680628                       Co.d(.h.

000bb638 <_ctype_>:
   bb638:	20202000 20202020 28282020 20282828     .         ((((( 
   bb648:	20202020 20202020 20202020 20202020                     
   bb658:	10108820 10101010 10101010 10101010      ...............
   bb668:	04040410 04040404 10040404 10101010     ................
   bb678:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bb688:	01010101 01010101 01010101 10101010     ................
   bb698:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bb6a8:	02020202 02020202 02020202 10101010     ................
   bb6b8:	00000020 00000000 00000000 00000000      ...............
	...
   bb738:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bb748:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bb758:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bb768:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bb778:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bb788:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bb798:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bb7a8:	2e00632e 00000000                       .c......

000bb7b0 <_C_numeric_locale>:
   bb7b0:	000bb7ab 000bb4d8 2003e34c 49534f50     ........L.. POSI
   bb7c0:	742f0058 6a2f706d 696b6e65 472d736e     X./tmp/jenkins-G
   bb7d0:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bb7e0:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bb7f0:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bb800:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bb810:	2f62696c 6572706d 00632e63 00000000     lib/mprec.c.....

000bb820 <__mprec_bigtens>:
   bb820:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bb830:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bb840:	7f73bf3c 75154fdd                       <.s..O.u

000bb848 <__mprec_tens>:
   bb848:	00000000 3ff00000 00000000 40240000     .......?......$@
   bb858:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bb868:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bb878:	00000000 412e8480 00000000 416312d0     .......A......cA
   bb888:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bb898:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bb8a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bb8b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bb8c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bb8d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bb8e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bb8f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bb908:	79d99db4 44ea7843                       ...yCx.D

000bb910 <p05.0>:
   bb910:	00000005 00000019 0000007d              ........}...

000bb91c <link_const_data_end>:
   bb91c:	000b5aa9 	.word	0x000b5aa9
   bb920:	000b6615 	.word	0x000b6615
   bb924:	000b6c29 	.word	0x000b6c29
   bb928:	000b7525 	.word	0x000b7525
   bb92c:	000b759d 	.word	0x000b759d
   bb930:	000b7bb1 	.word	0x000b7bb1
   bb934:	000b7e45 	.word	0x000b7e45
   bb938:	000b7fa5 	.word	0x000b7fa5
   bb93c:	000b804d 	.word	0x000b804d
   bb940:	000b8201 	.word	0x000b8201
   bb944:	000b852d 	.word	0x000b852d
