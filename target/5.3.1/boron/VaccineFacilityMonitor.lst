
/Users/abdulhannanmustajab/Desktop/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/5.3.1/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007b90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbbb0  000bbbb0  0000bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000002ac  2003e1f8  000bbbd4  0000e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000034c  2003e4a8  2003e4a8  0001e4a8  2**3
                  ALLOC
  6 .backup       00000804  2003f400  000bbe80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc684  000bc684  0001c684  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_suffix 00000024  000bc68a  000bc68a  0001c68a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc6ae  000bc6ae  0001c6ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00162af1  00000000  00000000  0001c6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017647  00000000  00000000  0017f1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004423a  00000000  00000000  001967ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003580  00000000  00000000  001daa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c238  00000000  00000000  001ddfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fa75  00000000  00000000  001ea1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004f36b  00000000  00000000  00229c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001479c3  00000000  00000000  00278fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009f90  00000000  00000000  003c0980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f004 f979 	bl	b8d44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f004 f99b 	bl	b8d94 <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e1f8 	.word	0x2003e1f8
   b4a68:	000bbbd4 	.word	0x000bbbd4
   b4a6c:	2003e4a4 	.word	0x2003e4a4
   b4a70:	2003e4a8 	.word	0x2003e4a8
   b4a74:	2003e7f4 	.word	0x2003e7f4

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f003 ffc3 	bl	b8a08 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bbb84 	.word	0x000bbb84
   b4a9c:	000bbbb0 	.word	0x000bbbb0

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 bf16 	b.w	b58d0 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 fe09 	bl	b56bc <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f003 bf63 	b.w	b8978 <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f002 bda9 	b.w	b7608 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f002 bda7 	b.w	b7608 <malloc>

000b4aba <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4aba:	f002 bdad 	b.w	b7618 <free>
	...

000b4ac0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac2:	4a03      	ldr	r2, [pc, #12]	; (b4ad0 <__cxa_pure_virtual+0x10>)
   b4ac4:	4903      	ldr	r1, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x14>)
   b4ac6:	200c      	movs	r0, #12
   b4ac8:	f002 fc66 	bl	b7398 <panic_>
  while (1);
   b4acc:	e7fe      	b.n	b4acc <__cxa_pure_virtual+0xc>
   b4ace:	bf00      	nop
   b4ad0:	000b70d9 	.word	0x000b70d9
   b4ad4:	000bae5c 	.word	0x000bae5c

000b4ad8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ad8:	7800      	ldrb	r0, [r0, #0]
   b4ada:	fab0 f080 	clz	r0, r0
   b4ade:	0940      	lsrs	r0, r0, #5
   b4ae0:	4770      	bx	lr

000b4ae2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae2:	2301      	movs	r3, #1
   b4ae4:	7003      	strb	r3, [r0, #0]
   b4ae6:	4770      	bx	lr

000b4ae8 <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   b4ae8:	4b01      	ldr	r3, [pc, #4]	; (b4af0 <_Z11watchdogISRv+0x8>)
   b4aea:	2201      	movs	r2, #1
   b4aec:	701a      	strb	r2, [r3, #0]
}
   b4aee:	4770      	bx	lr
   b4af0:	2003e645 	.word	0x2003e645

000b4af4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   b4af4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4af6:	4904      	ldr	r1, [pc, #16]	; (b4b08 <_Z10measureNow6String+0x14>)
   b4af8:	f003 fc59 	bl	b83ae <_ZNK6String6equalsEPKc>
  if (command == "1") {
   b4afc:	b118      	cbz	r0, b4b06 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   b4afe:	4b03      	ldr	r3, [pc, #12]	; (b4b0c <_Z10measureNow6String+0x18>)
   b4b00:	2203      	movs	r2, #3
   b4b02:	701a      	strb	r2, [r3, #0]
    return 1;
   b4b04:	2001      	movs	r0, #1
  }
  else return 0;
}
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	000baeac 	.word	0x000baeac
   b4b0c:	2003e5e4 	.word	0x2003e5e4

000b4b10 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b4b10:	b510      	push	{r4, lr}
   b4b12:	4b03      	ldr	r3, [pc, #12]	; (b4b20 <_ZN8MB85RC64D1Ev+0x10>)
   b4b14:	6003      	str	r3, [r0, #0]
   b4b16:	4604      	mov	r4, r0
   b4b18:	f001 f91e 	bl	b5d58 <_ZN6MB85RCD1Ev>
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	bd10      	pop	{r4, pc}
   b4b20:	000bb308 	.word	0x000bb308

000b4b24 <_ZN8MB85RC64D0Ev>:
   b4b24:	b510      	push	{r4, lr}
   b4b26:	4604      	mov	r4, r0
   b4b28:	f7ff fff2 	bl	b4b10 <_ZN8MB85RC64D1Ev>
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	2110      	movs	r1, #16
   b4b30:	f7ff ffc3 	bl	b4aba <_ZdlPvj>
   b4b34:	4620      	mov	r0, r4
   b4b36:	bd10      	pop	{r4, pc}

000b4b38 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   b4b38:	b510      	push	{r4, lr}
   b4b3a:	4b03      	ldr	r3, [pc, #12]	; (b4b48 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   b4b3c:	6003      	str	r3, [r0, #0]
   b4b3e:	4604      	mov	r4, r0
   b4b40:	f002 f80c 	bl	b6b5c <_ZN25PublishQueueAsyncRetainedD1Ev>
   b4b44:	4620      	mov	r0, r4
   b4b46:	bd10      	pop	{r4, pc}
   b4b48:	000bb2e0 	.word	0x000bb2e0

000b4b4c <_ZN17PublishQueueAsyncD0Ev>:
   b4b4c:	b510      	push	{r4, lr}
   b4b4e:	4604      	mov	r4, r0
   b4b50:	f7ff fff2 	bl	b4b38 <_ZN17PublishQueueAsyncD1Ev>
   b4b54:	4620      	mov	r0, r4
   b4b56:	2138      	movs	r1, #56	; 0x38
   b4b58:	f7ff ffaf 	bl	b4aba <_ZdlPvj>
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	bd10      	pop	{r4, pc}

000b4b60 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4b60:	6943      	ldr	r3, [r0, #20]
   b4b62:	b113      	cbz	r3, b4b6a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b64:	6983      	ldr	r3, [r0, #24]
   b4b66:	300c      	adds	r0, #12
   b4b68:	4718      	bx	r3
            callback();
        }
    }
   b4b6a:	4770      	bx	lr

000b4b6c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4b6c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4b6e:	2100      	movs	r1, #0
   b4b70:	4604      	mov	r4, r0
   b4b72:	4608      	mov	r0, r1
   b4b74:	f002 fa40 	bl	b6ff8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4b78:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4b7e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4b80:	f002 fa52 	bl	b7028 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4b84:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4b86:	b10c      	cbz	r4, b4b8c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4b88:	2301      	movs	r3, #1
   b4b8a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4b8c:	2100      	movs	r1, #0
   b4b8e:	2001      	movs	r0, #1
   b4b90:	f002 fa32 	bl	b6ff8 <os_thread_scheduling>
            }
        }
        if (t) {
   b4b94:	b12c      	cbz	r4, b4ba2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4b96:	6823      	ldr	r3, [r4, #0]
   b4b98:	4620      	mov	r0, r4
   b4b9a:	689b      	ldr	r3, [r3, #8]
   b4b9c:	4798      	blx	r3
            t->running = false;
   b4b9e:	2300      	movs	r3, #0
   b4ba0:	7123      	strb	r3, [r4, #4]
        }
    }
   b4ba2:	b002      	add	sp, #8
   b4ba4:	bd10      	pop	{r4, pc}

000b4ba6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4ba6:	2a01      	cmp	r2, #1
   b4ba8:	d102      	bne.n	b4bb0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4baa:	6001      	str	r1, [r0, #0]
      }
   b4bac:	2000      	movs	r0, #0
   b4bae:	4770      	bx	lr
	  switch (__op)
   b4bb0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4bb2:	bf04      	itt	eq
   b4bb4:	680b      	ldreq	r3, [r1, #0]
   b4bb6:	6003      	streq	r3, [r0, #0]
	      break;
   b4bb8:	e7f8      	b.n	b4bac <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4bba <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bba:	6803      	ldr	r3, [r0, #0]
   b4bbc:	4718      	bx	r3

000b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4bc0:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   b4bc2:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   b4bc6:	f88d 3000 	strb.w	r3, [sp]
   b4bca:	f88d 5004 	strb.w	r5, [sp, #4]
   b4bce:	68e4      	ldr	r4, [r4, #12]
   b4bd0:	233c      	movs	r3, #60	; 0x3c
   b4bd2:	47a0      	blx	r4
	}
   b4bd4:	b003      	add	sp, #12
   b4bd6:	bd30      	pop	{r4, r5, pc}

000b4bd8 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   b4bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4bda:	4916      	ldr	r1, [pc, #88]	; (b4c34 <_Z14setVerboseMode6String+0x5c>)
   b4bdc:	4605      	mov	r5, r0
   b4bde:	f003 fbe6 	bl	b83ae <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4be2:	4604      	mov	r4, r0
   b4be4:	b188      	cbz	r0, b4c0a <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   b4be6:	4b14      	ldr	r3, [pc, #80]	; (b4c38 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b4be8:	4814      	ldr	r0, [pc, #80]	; (b4c3c <_Z14setVerboseMode6String+0x64>)
   b4bea:	4a15      	ldr	r2, [pc, #84]	; (b4c40 <_Z14setVerboseMode6String+0x68>)
   b4bec:	4915      	ldr	r1, [pc, #84]	; (b4c44 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   b4bee:	2401      	movs	r4, #1
   b4bf0:	725c      	strb	r4, [r3, #9]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   b4bf2:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   b4bf4:	f88d 3000 	strb.w	r3, [sp]
   b4bf8:	4b13      	ldr	r3, [pc, #76]	; (b4c48 <_Z14setVerboseMode6String+0x70>)
   b4bfa:	781b      	ldrb	r3, [r3, #0]
   b4bfc:	f7ff ffdf 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4c00:	4b12      	ldr	r3, [pc, #72]	; (b4c4c <_Z14setVerboseMode6String+0x74>)
    return 1;
   b4c02:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   b4c04:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   b4c06:	b003      	add	sp, #12
   b4c08:	bd30      	pop	{r4, r5, pc}
   b4c0a:	4911      	ldr	r1, [pc, #68]	; (b4c50 <_Z14setVerboseMode6String+0x78>)
   b4c0c:	4628      	mov	r0, r5
   b4c0e:	f003 fbce 	bl	b83ae <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4c12:	2800      	cmp	r0, #0
   b4c14:	d0f7      	beq.n	b4c06 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   b4c16:	4b08      	ldr	r3, [pc, #32]	; (b4c38 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b4c18:	4808      	ldr	r0, [pc, #32]	; (b4c3c <_Z14setVerboseMode6String+0x64>)
    sysStatus.verboseMode = false;
   b4c1a:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   b4c1c:	4b0a      	ldr	r3, [pc, #40]	; (b4c48 <_Z14setVerboseMode6String+0x70>)
   b4c1e:	f88d 4000 	strb.w	r4, [sp]
   b4c22:	781b      	ldrb	r3, [r3, #0]
   b4c24:	4a0b      	ldr	r2, [pc, #44]	; (b4c54 <_Z14setVerboseMode6String+0x7c>)
   b4c26:	4907      	ldr	r1, [pc, #28]	; (b4c44 <_Z14setVerboseMode6String+0x6c>)
   b4c28:	f7ff ffc9 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4c2c:	4b07      	ldr	r3, [pc, #28]	; (b4c4c <_Z14setVerboseMode6String+0x74>)
   b4c2e:	2001      	movs	r0, #1
   b4c30:	7018      	strb	r0, [r3, #0]
    return 1;
   b4c32:	e7e8      	b.n	b4c06 <_Z14setVerboseMode6String+0x2e>
   b4c34:	000baeac 	.word	0x000baeac
   b4c38:	2003e5e8 	.word	0x2003e5e8
   b4c3c:	2003e568 	.word	0x2003e568
   b4c40:	000baeae 	.word	0x000baeae
   b4c44:	000baed1 	.word	0x000baed1
   b4c48:	2003e4b5 	.word	0x2003e4b5
   b4c4c:	2003e604 	.word	0x2003e604
   b4c50:	000baebf 	.word	0x000baebf
   b4c54:	000baec1 	.word	0x000baec1

000b4c58 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   b4c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c5a:	4d1a      	ldr	r5, [pc, #104]	; (b4cc4 <_Z14UbidotsHandlerPKcS0_+0x6c>)
  if (!data) {                                                                    // First check to see if there is any data
   b4c5c:	460c      	mov	r4, r1
   b4c5e:	b959      	cbnz	r1, b4c78 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   b4c60:	7a6b      	ldrb	r3, [r5, #9]
   b4c62:	b31b      	cbz	r3, b4cac <_Z14UbidotsHandlerPKcS0_+0x54>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   b4c64:	4b18      	ldr	r3, [pc, #96]	; (b4cc8 <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4c66:	f88d 1000 	strb.w	r1, [sp]
   b4c6a:	781b      	ldrb	r3, [r3, #0]
   b4c6c:	4a17      	ldr	r2, [pc, #92]	; (b4ccc <_Z14UbidotsHandlerPKcS0_+0x74>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   b4c6e:	4918      	ldr	r1, [pc, #96]	; (b4cd0 <_Z14UbidotsHandlerPKcS0_+0x78>)
   b4c70:	4818      	ldr	r0, [pc, #96]	; (b4cd4 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b4c72:	f7ff ffa4 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4c76:	e019      	b.n	b4cac <_Z14UbidotsHandlerPKcS0_+0x54>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   b4c78:	4608      	mov	r0, r1
   b4c7a:	f004 f840 	bl	b8cfe <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   b4c7e:	38c8      	subs	r0, #200	; 0xc8
   b4c80:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   b4c82:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   b4c84:	d814      	bhi.n	b4cb0 <_Z14UbidotsHandlerPKcS0_+0x58>
    if (sysStatus.verboseMode) {
   b4c86:	b14b      	cbz	r3, b4c9c <_Z14UbidotsHandlerPKcS0_+0x44>
   b4c88:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   b4c8a:	f88d 3000 	strb.w	r3, [sp]
   b4c8e:	4b0e      	ldr	r3, [pc, #56]	; (b4cc8 <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4c90:	4a11      	ldr	r2, [pc, #68]	; (b4cd8 <_Z14UbidotsHandlerPKcS0_+0x80>)
   b4c92:	781b      	ldrb	r3, [r3, #0]
   b4c94:	4911      	ldr	r1, [pc, #68]	; (b4cdc <_Z14UbidotsHandlerPKcS0_+0x84>)
   b4c96:	480f      	ldr	r0, [pc, #60]	; (b4cd4 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   b4c98:	f7ff ff91 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    alertsStatus.upperTemperatureThresholdCrossed = false;
   b4c9c:	4a10      	ldr	r2, [pc, #64]	; (b4ce0 <_Z14UbidotsHandlerPKcS0_+0x88>)
   b4c9e:	2300      	movs	r3, #0
   b4ca0:	6013      	str	r3, [r2, #0]
    alertsStatusWriteNeeded = true;
   b4ca2:	4a10      	ldr	r2, [pc, #64]	; (b4ce4 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   b4ca4:	2101      	movs	r1, #1
   b4ca6:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   b4ca8:	4a0f      	ldr	r2, [pc, #60]	; (b4ce8 <_Z14UbidotsHandlerPKcS0_+0x90>)
   b4caa:	7013      	strb	r3, [r2, #0]
}
   b4cac:	b003      	add	sp, #12
   b4cae:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   b4cb0:	2b00      	cmp	r3, #0
   b4cb2:	d0fb      	beq.n	b4cac <_Z14UbidotsHandlerPKcS0_+0x54>
   b4cb4:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   b4cb6:	f88d 3000 	strb.w	r3, [sp]
   b4cba:	4b03      	ldr	r3, [pc, #12]	; (b4cc8 <_Z14UbidotsHandlerPKcS0_+0x70>)
   b4cbc:	4622      	mov	r2, r4
   b4cbe:	781b      	ldrb	r3, [r3, #0]
   b4cc0:	e7d5      	b.n	b4c6e <_Z14UbidotsHandlerPKcS0_+0x16>
   b4cc2:	bf00      	nop
   b4cc4:	2003e5e8 	.word	0x2003e5e8
   b4cc8:	2003e4b5 	.word	0x2003e4b5
   b4ccc:	000baed6 	.word	0x000baed6
   b4cd0:	000baede 	.word	0x000baede
   b4cd4:	2003e568 	.word	0x2003e568
   b4cd8:	000baeeb 	.word	0x000baeeb
   b4cdc:	000baefd 	.word	0x000baefd
   b4ce0:	2003e4bc 	.word	0x2003e4bc
   b4ce4:	2003e4d4 	.word	0x2003e4d4
   b4ce8:	2003e4f5 	.word	0x2003e4f5

000b4cec <_ZN5Timer12changePeriodEjj.isra.0>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4cec:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4cee:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4cf0:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4cf2:	b130      	cbz	r0, b4d02 <_ZN5Timer12changePeriodEjj.isra.0+0x16>
   b4cf4:	2100      	movs	r1, #0
   b4cf6:	e9cd 2100 	strd	r2, r1, [sp]
   b4cfa:	460a      	mov	r2, r1
   b4cfc:	2103      	movs	r1, #3
   b4cfe:	f002 f99b 	bl	b7038 <os_timer_change>
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   b4d02:	b003      	add	sp, #12
   b4d04:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d08 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   b4d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4d0a:	4b10      	ldr	r3, [pc, #64]	; (b4d4c <_Z16keepAliveMessagev+0x44>)
   b4d0c:	4a10      	ldr	r2, [pc, #64]	; (b4d50 <_Z16keepAliveMessagev+0x48>)
   b4d0e:	781b      	ldrb	r3, [r3, #0]
   b4d10:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d12:	4910      	ldr	r1, [pc, #64]	; (b4d54 <_Z16keepAliveMessagev+0x4c>)
   b4d14:	4313      	orrs	r3, r2
   b4d16:	f88d 3000 	strb.w	r3, [sp]
   b4d1a:	2200      	movs	r2, #0
   b4d1c:	233c      	movs	r3, #60	; 0x3c
   b4d1e:	a802      	add	r0, sp, #8
   b4d20:	f002 fece 	bl	b7ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4d24:	9c03      	ldr	r4, [sp, #12]
   b4d26:	b17c      	cbz	r4, b4d48 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   b4d28:	6863      	ldr	r3, [r4, #4]
   b4d2a:	3b01      	subs	r3, #1
   b4d2c:	6063      	str	r3, [r4, #4]
   b4d2e:	b95b      	cbnz	r3, b4d48 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   b4d30:	6823      	ldr	r3, [r4, #0]
   b4d32:	4620      	mov	r0, r4
   b4d34:	689b      	ldr	r3, [r3, #8]
   b4d36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d38:	68a3      	ldr	r3, [r4, #8]
   b4d3a:	3b01      	subs	r3, #1
   b4d3c:	60a3      	str	r3, [r4, #8]
   b4d3e:	b91b      	cbnz	r3, b4d48 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   b4d40:	6823      	ldr	r3, [r4, #0]
   b4d42:	4620      	mov	r0, r4
   b4d44:	68db      	ldr	r3, [r3, #12]
   b4d46:	4798      	blx	r3
}
   b4d48:	b004      	add	sp, #16
   b4d4a:	bd10      	pop	{r4, pc}
   b4d4c:	2003e4b4 	.word	0x2003e4b4
   b4d50:	2003e4b5 	.word	0x2003e4b5
   b4d54:	000baf03 	.word	0x000baf03

000b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4d58:	2300      	movs	r3, #0
   b4d5a:	2204      	movs	r2, #4
   b4d5c:	f002 bb94 	b.w	b7488 <spark_variable>

000b4d60 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4d60:	b510      	push	{r4, lr}
      if (_M_manager)
   b4d62:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d64:	4604      	mov	r4, r0
      if (_M_manager)
   b4d66:	b113      	cbz	r3, b4d6e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d68:	2203      	movs	r2, #3
   b4d6a:	4601      	mov	r1, r0
   b4d6c:	4798      	blx	r3
    }
   b4d6e:	4620      	mov	r0, r4
   b4d70:	bd10      	pop	{r4, pc}
	...

000b4d74 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d76:	4b13      	ldr	r3, [pc, #76]	; (b4dc4 <_ZN5TimerD1Ev+0x50>)
   b4d78:	6003      	str	r3, [r0, #0]
   b4d7a:	4604      	mov	r4, r0
        if (handle) {
   b4d7c:	6880      	ldr	r0, [r0, #8]
   b4d7e:	b1c8      	cbz	r0, b4db4 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4d80:	2500      	movs	r5, #0
   b4d82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4d86:	e9cd 3500 	strd	r3, r5, [sp]
   b4d8a:	2102      	movs	r1, #2
   b4d8c:	462b      	mov	r3, r5
   b4d8e:	462a      	mov	r2, r5
   b4d90:	f002 f952 	bl	b7038 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4d94:	68a0      	ldr	r0, [r4, #8]
   b4d96:	4629      	mov	r1, r5
   b4d98:	f002 f97e 	bl	b7098 <os_timer_set_id>
            while (running) {
   b4d9c:	7923      	ldrb	r3, [r4, #4]
   b4d9e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4da2:	b113      	cbz	r3, b4daa <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4da4:	f002 f920 	bl	b6fe8 <os_thread_yield>
            while (running) {
   b4da8:	e7f8      	b.n	b4d9c <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4daa:	68a0      	ldr	r0, [r4, #8]
   b4dac:	4629      	mov	r1, r5
   b4dae:	f002 f933 	bl	b7018 <os_timer_destroy>
            handle = nullptr;
   b4db2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4db4:	f104 000c 	add.w	r0, r4, #12
   b4db8:	f7ff ffd2 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
    }
   b4dbc:	4620      	mov	r0, r4
   b4dbe:	b003      	add	sp, #12
   b4dc0:	bd30      	pop	{r4, r5, pc}
   b4dc2:	bf00      	nop
   b4dc4:	000bb2cc 	.word	0x000bb2cc

000b4dc8 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4dc8:	b510      	push	{r4, lr}
   b4dca:	4604      	mov	r4, r0
    }
   b4dcc:	f7ff ffd2 	bl	b4d74 <_ZN5TimerD1Ev>
   b4dd0:	4620      	mov	r0, r4
   b4dd2:	211c      	movs	r1, #28
   b4dd4:	f7ff fe71 	bl	b4aba <_ZdlPvj>
   b4dd8:	4620      	mov	r0, r4
   b4dda:	bd10      	pop	{r4, pc}

000b4ddc <_ZN10CloudClass9keepAliveEj>:
            return spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   b4ddc:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   b4dde:	2301      	movs	r3, #1
   b4de0:	2208      	movs	r2, #8
   b4de2:	e9cd 2300 	strd	r2, r3, [sp]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   b4de6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4dea:	2300      	movs	r3, #0
   b4dec:	4341      	muls	r1, r0
   b4dee:	466a      	mov	r2, sp
   b4df0:	4618      	mov	r0, r3
   b4df2:	f002 fb99 	bl	b7528 <spark_set_connection_property>
    }
   b4df6:	b003      	add	sp, #12
   b4df8:	f85d fb04 	ldr.w	pc, [sp], #4

000b4dfc <_Z16setThirdPartySim6String>:
  updateThresholdValue();
  return 1;
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   b4dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4dfe:	491c      	ldr	r1, [pc, #112]	; (b4e70 <_Z16setThirdPartySim6String+0x74>)
   b4e00:	4605      	mov	r5, r0
   b4e02:	f003 fad4 	bl	b83ae <_ZNK6String6equalsEPKc>
  if (command == "1")
   b4e06:	4604      	mov	r4, r0
   b4e08:	b300      	cbz	r0, b4e4c <_Z16setThirdPartySim6String+0x50>
  {
    sysStatus.thirdPartySim = true;
   b4e0a:	4c1a      	ldr	r4, [pc, #104]	; (b4e74 <_Z16setThirdPartySim6String+0x78>)
   b4e0c:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4e0e:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   b4e10:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4e12:	f7ff ffe3 	bl	b4ddc <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b4e16:	6863      	ldr	r3, [r4, #4]
   b4e18:	4817      	ldr	r0, [pc, #92]	; (b4e78 <_Z16setThirdPartySim6String+0x7c>)
   b4e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4e1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4e22:	4359      	muls	r1, r3
   b4e24:	f7ff ff62 	bl	b4cec <_ZN5Timer12changePeriodEjj.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e28:	f002 fb46 	bl	b74b8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   b4e2c:	b148      	cbz	r0, b4e42 <_Z16setThirdPartySim6String+0x46>
        val_(0) {
   b4e2e:	2300      	movs	r3, #0
   b4e30:	f88d 3000 	strb.w	r3, [sp]
   b4e34:	4b11      	ldr	r3, [pc, #68]	; (b4e7c <_Z16setThirdPartySim6String+0x80>)
   b4e36:	4a12      	ldr	r2, [pc, #72]	; (b4e80 <_Z16setThirdPartySim6String+0x84>)
   b4e38:	781b      	ldrb	r3, [r3, #0]
   b4e3a:	4912      	ldr	r1, [pc, #72]	; (b4e84 <_Z16setThirdPartySim6String+0x88>)
   b4e3c:	4812      	ldr	r0, [pc, #72]	; (b4e88 <_Z16setThirdPartySim6String+0x8c>)
   b4e3e:	f7ff febe 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
    sysStatusWriteNeeded = true;
   b4e42:	4b12      	ldr	r3, [pc, #72]	; (b4e8c <_Z16setThirdPartySim6String+0x90>)
   b4e44:	2001      	movs	r0, #1
   b4e46:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   b4e48:	b003      	add	sp, #12
   b4e4a:	bd30      	pop	{r4, r5, pc}
   b4e4c:	4910      	ldr	r1, [pc, #64]	; (b4e90 <_Z16setThirdPartySim6String+0x94>)
   b4e4e:	4628      	mov	r0, r5
   b4e50:	f003 faad 	bl	b83ae <_ZNK6String6equalsEPKc>
  else if (command == "0")
   b4e54:	2800      	cmp	r0, #0
   b4e56:	d0f7      	beq.n	b4e48 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   b4e58:	4b06      	ldr	r3, [pc, #24]	; (b4e74 <_Z16setThirdPartySim6String+0x78>)
   b4e5a:	705c      	strb	r4, [r3, #1]
   b4e5c:	f002 fb2c 	bl	b74b8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   b4e60:	2800      	cmp	r0, #0
   b4e62:	d0ee      	beq.n	b4e42 <_Z16setThirdPartySim6String+0x46>
   b4e64:	4b05      	ldr	r3, [pc, #20]	; (b4e7c <_Z16setThirdPartySim6String+0x80>)
   b4e66:	f88d 4000 	strb.w	r4, [sp]
   b4e6a:	781b      	ldrb	r3, [r3, #0]
   b4e6c:	4a09      	ldr	r2, [pc, #36]	; (b4e94 <_Z16setThirdPartySim6String+0x98>)
   b4e6e:	e7e4      	b.n	b4e3a <_Z16setThirdPartySim6String+0x3e>
   b4e70:	000baeac 	.word	0x000baeac
   b4e74:	2003e5e8 	.word	0x2003e5e8
   b4e78:	2003e518 	.word	0x2003e518
   b4e7c:	2003e4b5 	.word	0x2003e4b5
   b4e80:	000baf05 	.word	0x000baf05
   b4e84:	000baed1 	.word	0x000baed1
   b4e88:	2003e568 	.word	0x2003e568
   b4e8c:	2003e604 	.word	0x2003e604
   b4e90:	000baebf 	.word	0x000baebf
   b4e94:	000baf1a 	.word	0x000baf1a

000b4e98 <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   b4e98:	b510      	push	{r4, lr}
   b4e9a:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   b4e9c:	6800      	ldr	r0, [r0, #0]
   b4e9e:	220a      	movs	r2, #10
   b4ea0:	a903      	add	r1, sp, #12
   b4ea2:	f004 fea9 	bl	b9bf8 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b4ea6:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   b4eaa:	d822      	bhi.n	b4ef2 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   b4eac:	4c12      	ldr	r4, [pc, #72]	; (b4ef8 <_Z12setKeepAlive6String+0x60>)
   b4eae:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   b4eb0:	f7ff ff94 	bl	b4ddc <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b4eb4:	6863      	ldr	r3, [r4, #4]
   b4eb6:	4811      	ldr	r0, [pc, #68]	; (b4efc <_Z12setKeepAlive6String+0x64>)
   b4eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4ebc:	4359      	muls	r1, r3
   b4ebe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4ec2:	f7ff ff13 	bl	b4cec <_ZN5Timer12changePeriodEjj.isra.0>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   b4ec6:	6863      	ldr	r3, [r4, #4]
   b4ec8:	4a0d      	ldr	r2, [pc, #52]	; (b4f00 <_Z12setKeepAlive6String+0x68>)
   b4eca:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4ece:	a804      	add	r0, sp, #16
   b4ed0:	f002 fbba 	bl	b7648 <snprintf>
   b4ed4:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   b4ed6:	f88d 3000 	strb.w	r3, [sp]
   b4eda:	4b0a      	ldr	r3, [pc, #40]	; (b4f04 <_Z12setKeepAlive6String+0x6c>)
   b4edc:	480a      	ldr	r0, [pc, #40]	; (b4f08 <_Z12setKeepAlive6String+0x70>)
   b4ede:	781b      	ldrb	r3, [r3, #0]
   b4ee0:	490a      	ldr	r1, [pc, #40]	; (b4f0c <_Z12setKeepAlive6String+0x74>)
   b4ee2:	aa04      	add	r2, sp, #16
   b4ee4:	f7ff fe6b 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   b4ee8:	4b09      	ldr	r3, [pc, #36]	; (b4f10 <_Z12setKeepAlive6String+0x78>)
   b4eea:	2001      	movs	r0, #1
   b4eec:	7018      	strb	r0, [r3, #0]
  return 1;
}
   b4eee:	b044      	add	sp, #272	; 0x110
   b4ef0:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   b4ef2:	2000      	movs	r0, #0
   b4ef4:	e7fb      	b.n	b4eee <_Z12setKeepAlive6String+0x56>
   b4ef6:	bf00      	nop
   b4ef8:	2003e5e8 	.word	0x2003e5e8
   b4efc:	2003e518 	.word	0x2003e518
   b4f00:	000baf2e 	.word	0x000baf2e
   b4f04:	2003e4b5 	.word	0x2003e4b5
   b4f08:	2003e568 	.word	0x2003e568
   b4f0c:	000baf47 	.word	0x000baf47
   b4f10:	2003e604 	.word	0x2003e604

000b4f14 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   b4f14:	b507      	push	{r0, r1, r2, lr}
   b4f16:	f002 facf 	bl	b74b8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   b4f1a:	b148      	cbz	r0, b4f30 <_Z18loadSystemDefaultsv+0x1c>
   b4f1c:	2300      	movs	r3, #0
   b4f1e:	f88d 3000 	strb.w	r3, [sp]
   b4f22:	4b0c      	ldr	r3, [pc, #48]	; (b4f54 <_Z18loadSystemDefaultsv+0x40>)
   b4f24:	4a0c      	ldr	r2, [pc, #48]	; (b4f58 <_Z18loadSystemDefaultsv+0x44>)
   b4f26:	781b      	ldrb	r3, [r3, #0]
   b4f28:	490c      	ldr	r1, [pc, #48]	; (b4f5c <_Z18loadSystemDefaultsv+0x48>)
   b4f2a:	480d      	ldr	r0, [pc, #52]	; (b4f60 <_Z18loadSystemDefaultsv+0x4c>)
   b4f2c:	f7ff fe47 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatus.keepAlive = 120;
   b4f30:	4a0c      	ldr	r2, [pc, #48]	; (b4f64 <_Z18loadSystemDefaultsv+0x50>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b4f32:	480d      	ldr	r0, [pc, #52]	; (b4f68 <_Z18loadSystemDefaultsv+0x54>)
   b4f34:	2378      	movs	r3, #120	; 0x78
   b4f36:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   b4f38:	f240 1301 	movw	r3, #257	; 0x101
   b4f3c:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   b4f3e:	2300      	movs	r3, #0
   b4f40:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   b4f42:	7293      	strb	r3, [r2, #10]
   b4f44:	2101      	movs	r1, #1
   b4f46:	231c      	movs	r3, #28
}
   b4f48:	b003      	add	sp, #12
   b4f4a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4f4e:	f000 bfbe 	b.w	b5ece <_ZN6MB85RC9writeDataEjPKhj>
   b4f52:	bf00      	nop
   b4f54:	2003e4b5 	.word	0x2003e4b5
   b4f58:	000baf52 	.word	0x000baf52
   b4f5c:	000baed1 	.word	0x000baed1
   b4f60:	2003e568 	.word	0x2003e568
   b4f64:	2003e5e8 	.word	0x2003e5e8
   b4f68:	2003e4f8 	.word	0x2003e4f8

000b4f6c <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                                                  // Default settings for the device - connected, not-low power and always on
   b4f6c:	b507      	push	{r0, r1, r2, lr}
   b4f6e:	f002 faa3 	bl	b74b8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   b4f72:	b148      	cbz	r0, b4f88 <_Z17loadAlertDefaultsv+0x1c>
   b4f74:	2300      	movs	r3, #0
   b4f76:	f88d 3000 	strb.w	r3, [sp]
   b4f7a:	4b0c      	ldr	r3, [pc, #48]	; (b4fac <_Z17loadAlertDefaultsv+0x40>)
   b4f7c:	4a0c      	ldr	r2, [pc, #48]	; (b4fb0 <_Z17loadAlertDefaultsv+0x44>)
   b4f7e:	781b      	ldrb	r3, [r3, #0]
   b4f80:	490c      	ldr	r1, [pc, #48]	; (b4fb4 <_Z17loadAlertDefaultsv+0x48>)
   b4f82:	480d      	ldr	r0, [pc, #52]	; (b4fb8 <_Z17loadAlertDefaultsv+0x4c>)
   b4f84:	f7ff fe1b 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  alertsStatus.upperTemperatureThreshold = 30;
   b4f88:	4a0c      	ldr	r2, [pc, #48]	; (b4fbc <_Z17loadAlertDefaultsv+0x50>)
   b4f8a:	4b0d      	ldr	r3, [pc, #52]	; (b4fc0 <_Z17loadAlertDefaultsv+0x54>)
   b4f8c:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   b4f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b4f92:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   b4f94:	4b0b      	ldr	r3, [pc, #44]	; (b4fc4 <_Z17loadAlertDefaultsv+0x58>)
   b4f96:	6113      	str	r3, [r2, #16]
   b4f98:	480b      	ldr	r0, [pc, #44]	; (b4fc8 <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   b4f9a:	4b0c      	ldr	r3, [pc, #48]	; (b4fcc <_Z17loadAlertDefaultsv+0x60>)
   b4f9c:	6153      	str	r3, [r2, #20]
   b4f9e:	2150      	movs	r1, #80	; 0x50
   b4fa0:	2318      	movs	r3, #24
}
   b4fa2:	b003      	add	sp, #12
   b4fa4:	f85d eb04 	ldr.w	lr, [sp], #4
   b4fa8:	f000 bf91 	b.w	b5ece <_ZN6MB85RC9writeDataEjPKhj>
   b4fac:	2003e4b5 	.word	0x2003e4b5
   b4fb0:	000baf6a 	.word	0x000baf6a
   b4fb4:	000baed1 	.word	0x000baed1
   b4fb8:	2003e568 	.word	0x2003e568
   b4fbc:	2003e4bc 	.word	0x2003e4bc
   b4fc0:	41f00000 	.word	0x41f00000
   b4fc4:	42b40000 	.word	0x42b40000
   b4fc8:	2003e4f8 	.word	0x2003e4f8
   b4fcc:	40a00000 	.word	0x40a00000

000b4fd0 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   b4fd0:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   b4fd2:	4c12      	ldr	r4, [pc, #72]	; (b501c <_Z17checkSystemValuesv+0x4c>)
   b4fd4:	7a23      	ldrb	r3, [r4, #8]
   b4fd6:	2b01      	cmp	r3, #1
   b4fd8:	d904      	bls.n	b4fe4 <_Z17checkSystemValuesv+0x14>
   b4fda:	f002 fa6d 	bl	b74b8 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   b4fde:	b1d8      	cbz	r0, b5018 <_Z17checkSystemValuesv+0x48>
   b4fe0:	2301      	movs	r3, #1
   b4fe2:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   b4fe4:	6863      	ldr	r3, [r4, #4]
   b4fe6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   b4fea:	bf84      	itt	hi
   b4fec:	f44f 7316 	movhi.w	r3, #600	; 0x258
   b4ff0:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   b4ff2:	7a63      	ldrb	r3, [r4, #9]
   b4ff4:	2b01      	cmp	r3, #1
   b4ff6:	bf84      	itt	hi
   b4ff8:	2300      	movhi	r3, #0
   b4ffa:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   b4ffc:	7aa3      	ldrb	r3, [r4, #10]
   b4ffe:	2b01      	cmp	r3, #1
   b5000:	bf84      	itt	hi
   b5002:	2300      	movhi	r3, #0
   b5004:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   b5006:	6963      	ldr	r3, [r4, #20]
   b5008:	2bff      	cmp	r3, #255	; 0xff
   b500a:	bf84      	itt	hi
   b500c:	2300      	movhi	r3, #0
   b500e:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   b5010:	4b03      	ldr	r3, [pc, #12]	; (b5020 <_Z17checkSystemValuesv+0x50>)
   b5012:	2201      	movs	r2, #1
   b5014:	701a      	strb	r2, [r3, #0]
}
   b5016:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   b5018:	7220      	strb	r0, [r4, #8]
   b501a:	e7e3      	b.n	b4fe4 <_Z17checkSystemValuesv+0x14>
   b501c:	2003e5e8 	.word	0x2003e5e8
   b5020:	2003e604 	.word	0x2003e604

000b5024 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0.0  || alertsStatus.lowerTemperatureThreshold > 20.0) alertsStatus.lowerTemperatureThreshold = 3.0;
   b5024:	4b22      	ldr	r3, [pc, #136]	; (b50b0 <_Z17checkAlertsValuesv+0x8c>)
   b5026:	ed93 7a03 	vldr	s14, [r3, #12]
   b502a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   b502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5032:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   b5036:	d404      	bmi.n	b5042 <_Z17checkAlertsValuesv+0x1e>
   b5038:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5040:	dd01      	ble.n	b5046 <_Z17checkAlertsValuesv+0x22>
   b5042:	4a1c      	ldr	r2, [pc, #112]	; (b50b4 <_Z17checkAlertsValuesv+0x90>)
   b5044:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20.0 || alertsStatus.upperTemperatureThreshold > 90.0) alertsStatus.upperTemperatureThreshold = 33.0;
   b5046:	ed93 7a02 	vldr	s14, [r3, #8]
   b504a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5052:	d406      	bmi.n	b5062 <_Z17checkAlertsValuesv+0x3e>
   b5054:	eddf 6a18 	vldr	s13, [pc, #96]	; b50b8 <_Z17checkAlertsValuesv+0x94>
   b5058:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5060:	dd01      	ble.n	b5066 <_Z17checkAlertsValuesv+0x42>
   b5062:	4a16      	ldr	r2, [pc, #88]	; (b50bc <_Z17checkAlertsValuesv+0x98>)
   b5064:	609a      	str	r2, [r3, #8]
  if (alertsStatus.lowerHumidityThreshold < 0.0     || alertsStatus.lowerHumidityThreshold > 50.0)    alertsStatus.lowerHumidityThreshold = 13.0;
   b5066:	ed93 7a05 	vldr	s14, [r3, #20]
   b506a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   b506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5072:	d406      	bmi.n	b5082 <_Z17checkAlertsValuesv+0x5e>
   b5074:	eddf 6a12 	vldr	s13, [pc, #72]	; b50c0 <_Z17checkAlertsValuesv+0x9c>
   b5078:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5080:	dd01      	ble.n	b5086 <_Z17checkAlertsValuesv+0x62>
   b5082:	4a10      	ldr	r2, [pc, #64]	; (b50c4 <_Z17checkAlertsValuesv+0xa0>)
   b5084:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20.0    || alertsStatus.upperHumidityThreshold > 90.0)    alertsStatus.upperHumidityThreshold = 63.0;
   b5086:	ed93 7a04 	vldr	s14, [r3, #16]
   b508a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5092:	d406      	bmi.n	b50a2 <_Z17checkAlertsValuesv+0x7e>
   b5094:	eddf 7a08 	vldr	s15, [pc, #32]	; b50b8 <_Z17checkAlertsValuesv+0x94>
   b5098:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b50a0:	dd01      	ble.n	b50a6 <_Z17checkAlertsValuesv+0x82>
   b50a2:	4a09      	ldr	r2, [pc, #36]	; (b50c8 <_Z17checkAlertsValuesv+0xa4>)
   b50a4:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   b50a6:	4b09      	ldr	r3, [pc, #36]	; (b50cc <_Z17checkAlertsValuesv+0xa8>)
   b50a8:	2201      	movs	r2, #1
   b50aa:	701a      	strb	r2, [r3, #0]
}
   b50ac:	4770      	bx	lr
   b50ae:	bf00      	nop
   b50b0:	2003e4bc 	.word	0x2003e4bc
   b50b4:	40400000 	.word	0x40400000
   b50b8:	42b40000 	.word	0x42b40000
   b50bc:	42040000 	.word	0x42040000
   b50c0:	42480000 	.word	0x42480000
   b50c4:	41500000 	.word	0x41500000
   b50c8:	427c0000 	.word	0x427c0000
   b50cc:	2003e4d4 	.word	0x2003e4d4

000b50d0 <_Z11petWatchdogv>:
{
   b50d0:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   b50d2:	2101      	movs	r1, #1
   b50d4:	2005      	movs	r0, #5
   b50d6:	f003 fd30 	bl	b8b3a <digitalWrite>
  digitalWrite(donePin, LOW);
   b50da:	2100      	movs	r1, #0
   b50dc:	2005      	movs	r0, #5
   b50de:	f003 fd2c 	bl	b8b3a <digitalWrite>
  watchdogFlag = false;
   b50e2:	4a09      	ldr	r2, [pc, #36]	; (b5108 <_Z11petWatchdogv+0x38>)
   b50e4:	2300      	movs	r3, #0
   b50e6:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   b50e8:	4a08      	ldr	r2, [pc, #32]	; (b510c <_Z11petWatchdogv+0x3c>)
   b50ea:	7a52      	ldrb	r2, [r2, #9]
   b50ec:	b142      	cbz	r2, b5100 <_Z11petWatchdogv+0x30>
   b50ee:	f88d 3000 	strb.w	r3, [sp]
   b50f2:	4b07      	ldr	r3, [pc, #28]	; (b5110 <_Z11petWatchdogv+0x40>)
   b50f4:	4a07      	ldr	r2, [pc, #28]	; (b5114 <_Z11petWatchdogv+0x44>)
   b50f6:	781b      	ldrb	r3, [r3, #0]
   b50f8:	4907      	ldr	r1, [pc, #28]	; (b5118 <_Z11petWatchdogv+0x48>)
   b50fa:	4808      	ldr	r0, [pc, #32]	; (b511c <_Z11petWatchdogv+0x4c>)
   b50fc:	f7ff fd5f 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b5100:	b003      	add	sp, #12
   b5102:	f85d fb04 	ldr.w	pc, [sp], #4
   b5106:	bf00      	nop
   b5108:	2003e645 	.word	0x2003e645
   b510c:	2003e5e8 	.word	0x2003e5e8
   b5110:	2003e4b5 	.word	0x2003e4b5
   b5114:	000baf81 	.word	0x000baf81
   b5118:	000baf88 	.word	0x000baf88
   b511c:	2003e568 	.word	0x2003e568

000b5120 <_Z9sendEventv>:
{
   b5120:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   b5122:	4c13      	ldr	r4, [pc, #76]	; (b5170 <_Z9sendEventv+0x50>)
{
   b5124:	b0a0      	sub	sp, #128	; 0x80
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   b5126:	6923      	ldr	r3, [r4, #16]
   b5128:	68e0      	ldr	r0, [r4, #12]
   b512a:	9304      	str	r3, [sp, #16]
   b512c:	f7ff f8dc 	bl	b42e8 <__aeabi_f2d>
   b5130:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5134:	68a0      	ldr	r0, [r4, #8]
   b5136:	f7ff f8d7 	bl	b42e8 <__aeabi_f2d>
   b513a:	4a0e      	ldr	r2, [pc, #56]	; (b5174 <_Z9sendEventv+0x54>)
   b513c:	e9cd 0100 	strd	r0, r1, [sp]
   b5140:	2164      	movs	r1, #100	; 0x64
   b5142:	a807      	add	r0, sp, #28
   b5144:	f002 fa80 	bl	b7648 <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   b5148:	2300      	movs	r3, #0
   b514a:	f88d 3000 	strb.w	r3, [sp]
   b514e:	4b0a      	ldr	r3, [pc, #40]	; (b5178 <_Z9sendEventv+0x58>)
   b5150:	490a      	ldr	r1, [pc, #40]	; (b517c <_Z9sendEventv+0x5c>)
   b5152:	781b      	ldrb	r3, [r3, #0]
   b5154:	480a      	ldr	r0, [pc, #40]	; (b5180 <_Z9sendEventv+0x60>)
   b5156:	aa07      	add	r2, sp, #28
   b5158:	f7ff fd31 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  dataInFlight = true;                                                                      // set the data inflight flag
   b515c:	4b09      	ldr	r3, [pc, #36]	; (b5184 <_Z9sendEventv+0x64>)
   b515e:	2201      	movs	r2, #1
   b5160:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5162:	f001 ffc1 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   b5166:	4b08      	ldr	r3, [pc, #32]	; (b5188 <_Z9sendEventv+0x68>)
   b5168:	6018      	str	r0, [r3, #0]
}
   b516a:	b020      	add	sp, #128	; 0x80
   b516c:	bd10      	pop	{r4, pc}
   b516e:	bf00      	nop
   b5170:	2003e5c0 	.word	0x2003e5c0
   b5174:	000baf91 	.word	0x000baf91
   b5178:	2003e4b5 	.word	0x2003e4b5
   b517c:	000bafc6 	.word	0x000bafc6
   b5180:	2003e568 	.word	0x2003e568
   b5184:	2003e4f5 	.word	0x2003e4f5
   b5188:	2003e648 	.word	0x2003e648

000b518c <_Z8blinkLEDi>:
{
   b518c:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   b518e:	4d0b      	ldr	r5, [pc, #44]	; (b51bc <_Z8blinkLEDi+0x30>)
{
   b5190:	4604      	mov	r4, r0
   b5192:	f001 ffa9 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   b5196:	682b      	ldr	r3, [r5, #0]
   b5198:	1ac0      	subs	r0, r0, r3
   b519a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b519e:	d90c      	bls.n	b51ba <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   b51a0:	b2a4      	uxth	r4, r4
   b51a2:	4620      	mov	r0, r4
   b51a4:	f003 fce2 	bl	b8b6c <digitalRead>
   b51a8:	fab0 f180 	clz	r1, r0
   b51ac:	0949      	lsrs	r1, r1, #5
   b51ae:	4620      	mov	r0, r4
   b51b0:	f003 fcc3 	bl	b8b3a <digitalWrite>
   b51b4:	f001 ff98 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   b51b8:	6028      	str	r0, [r5, #0]
}
   b51ba:	bd38      	pop	{r3, r4, r5, pc}
   b51bc:	2003e4b8 	.word	0x2003e4b8

000b51c0 <_Z22publishStateTransitionv>:
{
   b51c0:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b51c2:	4d11      	ldr	r5, [pc, #68]	; (b5208 <_Z22publishStateTransitionv+0x48>)
   b51c4:	4c11      	ldr	r4, [pc, #68]	; (b520c <_Z22publishStateTransitionv+0x4c>)
   b51c6:	4912      	ldr	r1, [pc, #72]	; (b5210 <_Z22publishStateTransitionv+0x50>)
   b51c8:	782a      	ldrb	r2, [r5, #0]
   b51ca:	7820      	ldrb	r0, [r4, #0]
{
   b51cc:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b51ce:	231a      	movs	r3, #26
   b51d0:	fb03 1202 	mla	r2, r3, r2, r1
   b51d4:	9200      	str	r2, [sp, #0]
   b51d6:	fb03 1300 	mla	r3, r3, r0, r1
   b51da:	4a0e      	ldr	r2, [pc, #56]	; (b5214 <_Z22publishStateTransitionv+0x54>)
   b51dc:	2128      	movs	r1, #40	; 0x28
   b51de:	a802      	add	r0, sp, #8
   b51e0:	f002 fa32 	bl	b7648 <snprintf>
  oldState = state;
   b51e4:	782b      	ldrb	r3, [r5, #0]
   b51e6:	7023      	strb	r3, [r4, #0]
   b51e8:	f002 f966 	bl	b74b8 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   b51ec:	b148      	cbz	r0, b5202 <_Z22publishStateTransitionv+0x42>
   b51ee:	2300      	movs	r3, #0
   b51f0:	f88d 3000 	strb.w	r3, [sp]
   b51f4:	4b08      	ldr	r3, [pc, #32]	; (b5218 <_Z22publishStateTransitionv+0x58>)
   b51f6:	4909      	ldr	r1, [pc, #36]	; (b521c <_Z22publishStateTransitionv+0x5c>)
   b51f8:	781b      	ldrb	r3, [r3, #0]
   b51fa:	4809      	ldr	r0, [pc, #36]	; (b5220 <_Z22publishStateTransitionv+0x60>)
   b51fc:	aa02      	add	r2, sp, #8
   b51fe:	f7ff fcde 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b5202:	b00d      	add	sp, #52	; 0x34
   b5204:	bd30      	pop	{r4, r5, pc}
   b5206:	bf00      	nop
   b5208:	2003e5e4 	.word	0x2003e5e4
   b520c:	2003e564 	.word	0x2003e564
   b5210:	2003e1f8 	.word	0x2003e1f8
   b5214:	000bafdc 	.word	0x000bafdc
   b5218:	2003e4b5 	.word	0x2003e4b5
   b521c:	000bafea 	.word	0x000bafea
   b5220:	2003e568 	.word	0x2003e568

000b5224 <_Z20updateThresholdValuev>:

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   b5224:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   b5226:	4c17      	ldr	r4, [pc, #92]	; (b5284 <_Z20updateThresholdValuev+0x60>)
   b5228:	68a0      	ldr	r0, [r4, #8]
   b522a:	f7ff f85d 	bl	b42e8 <__aeabi_f2d>
   b522e:	4a16      	ldr	r2, [pc, #88]	; (b5288 <_Z20updateThresholdValuev+0x64>)
   b5230:	e9cd 0100 	strd	r0, r1, [sp]
   b5234:	2118      	movs	r1, #24
   b5236:	4815      	ldr	r0, [pc, #84]	; (b528c <_Z20updateThresholdValuev+0x68>)
   b5238:	f002 fa06 	bl	b7648 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   b523c:	68e0      	ldr	r0, [r4, #12]
   b523e:	f7ff f853 	bl	b42e8 <__aeabi_f2d>
   b5242:	4a13      	ldr	r2, [pc, #76]	; (b5290 <_Z20updateThresholdValuev+0x6c>)
   b5244:	e9cd 0100 	strd	r0, r1, [sp]
   b5248:	2118      	movs	r1, #24
   b524a:	4812      	ldr	r0, [pc, #72]	; (b5294 <_Z20updateThresholdValuev+0x70>)
   b524c:	f002 f9fc 	bl	b7648 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   b5250:	6920      	ldr	r0, [r4, #16]
   b5252:	f7ff f849 	bl	b42e8 <__aeabi_f2d>
   b5256:	4a10      	ldr	r2, [pc, #64]	; (b5298 <_Z20updateThresholdValuev+0x74>)
   b5258:	e9cd 0100 	strd	r0, r1, [sp]
   b525c:	2118      	movs	r1, #24
   b525e:	480f      	ldr	r0, [pc, #60]	; (b529c <_Z20updateThresholdValuev+0x78>)
   b5260:	f002 f9f2 	bl	b7648 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   b5264:	6960      	ldr	r0, [r4, #20]
   b5266:	f7ff f83f 	bl	b42e8 <__aeabi_f2d>
   b526a:	4a0d      	ldr	r2, [pc, #52]	; (b52a0 <_Z20updateThresholdValuev+0x7c>)
   b526c:	e9cd 0100 	strd	r0, r1, [sp]
   b5270:	2118      	movs	r1, #24
   b5272:	480c      	ldr	r0, [pc, #48]	; (b52a4 <_Z20updateThresholdValuev+0x80>)
   b5274:	f002 f9e8 	bl	b7648 <snprintf>
    alertsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   b5278:	4b0b      	ldr	r3, [pc, #44]	; (b52a8 <_Z20updateThresholdValuev+0x84>)
   b527a:	2201      	movs	r2, #1
   b527c:	701a      	strb	r2, [r3, #0]
} 
   b527e:	b002      	add	sp, #8
   b5280:	bd10      	pop	{r4, pc}
   b5282:	bf00      	nop
   b5284:	2003e4bc 	.word	0x2003e4bc
   b5288:	000baffb 	.word	0x000baffb
   b528c:	2003e62d 	.word	0x2003e62d
   b5290:	000bb00c 	.word	0x000bb00c
   b5294:	2003e54c 	.word	0x2003e54c
   b5298:	000bb01d 	.word	0x000bb01d
   b529c:	2003e615 	.word	0x2003e615
   b52a0:	000bb031 	.word	0x000bb031
   b52a4:	2003e534 	.word	0x2003e534
   b52a8:	2003e4d4 	.word	0x2003e4d4

000b52ac <_Z17setUpperTempLimit6String>:
{
   b52ac:	b500      	push	{lr}
   b52ae:	b089      	sub	sp, #36	; 0x24
   b52b0:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   b52b2:	f003 f8a7 	bl	b8404 <_ZNK6String7toFloatEv>
   b52b6:	4b0d      	ldr	r3, [pc, #52]	; (b52ec <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   b52b8:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   b52ba:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   b52be:	a804      	add	r0, sp, #16
   b52c0:	f003 f86a 	bl	b8398 <_ZN6StringC1ERKS_>
   b52c4:	2300      	movs	r3, #0
   b52c6:	f88d 3000 	strb.w	r3, [sp]
   b52ca:	4b09      	ldr	r3, [pc, #36]	; (b52f0 <_Z17setUpperTempLimit6String+0x44>)
   b52cc:	9a04      	ldr	r2, [sp, #16]
   b52ce:	781b      	ldrb	r3, [r3, #0]
   b52d0:	4908      	ldr	r1, [pc, #32]	; (b52f4 <_Z17setUpperTempLimit6String+0x48>)
   b52d2:	4809      	ldr	r0, [pc, #36]	; (b52f8 <_Z17setUpperTempLimit6String+0x4c>)
   b52d4:	f7ff fc73 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b52d8:	a804      	add	r0, sp, #16
   b52da:	f002 ffef 	bl	b82bc <_ZN6StringD1Ev>
  updateThresholdValue();
   b52de:	f7ff ffa1 	bl	b5224 <_Z20updateThresholdValuev>
}
   b52e2:	2001      	movs	r0, #1
   b52e4:	b009      	add	sp, #36	; 0x24
   b52e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b52ea:	bf00      	nop
   b52ec:	2003e4bc 	.word	0x2003e4bc
   b52f0:	2003e4b5 	.word	0x2003e4b5
   b52f4:	000bb046 	.word	0x000bb046
   b52f8:	2003e568 	.word	0x2003e568

000b52fc <_Z17setLowerTempLimit6String>:
{
   b52fc:	b500      	push	{lr}
   b52fe:	b089      	sub	sp, #36	; 0x24
   b5300:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   b5302:	f003 f87f 	bl	b8404 <_ZNK6String7toFloatEv>
   b5306:	4b0d      	ldr	r3, [pc, #52]	; (b533c <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   b5308:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   b530a:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   b530e:	a804      	add	r0, sp, #16
   b5310:	f003 f842 	bl	b8398 <_ZN6StringC1ERKS_>
   b5314:	2300      	movs	r3, #0
   b5316:	f88d 3000 	strb.w	r3, [sp]
   b531a:	4b09      	ldr	r3, [pc, #36]	; (b5340 <_Z17setLowerTempLimit6String+0x44>)
   b531c:	9a04      	ldr	r2, [sp, #16]
   b531e:	781b      	ldrb	r3, [r3, #0]
   b5320:	4908      	ldr	r1, [pc, #32]	; (b5344 <_Z17setLowerTempLimit6String+0x48>)
   b5322:	4809      	ldr	r0, [pc, #36]	; (b5348 <_Z17setLowerTempLimit6String+0x4c>)
   b5324:	f7ff fc4b 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5328:	a804      	add	r0, sp, #16
   b532a:	f002 ffc7 	bl	b82bc <_ZN6StringD1Ev>
  updateThresholdValue();
   b532e:	f7ff ff79 	bl	b5224 <_Z20updateThresholdValuev>
}
   b5332:	2001      	movs	r0, #1
   b5334:	b009      	add	sp, #36	; 0x24
   b5336:	f85d fb04 	ldr.w	pc, [sp], #4
   b533a:	bf00      	nop
   b533c:	2003e4bc 	.word	0x2003e4bc
   b5340:	2003e4b5 	.word	0x2003e4b5
   b5344:	000bb066 	.word	0x000bb066
   b5348:	2003e568 	.word	0x2003e568

000b534c <_Z21setUpperHumidityLimit6String>:
{
   b534c:	b500      	push	{lr}
   b534e:	b089      	sub	sp, #36	; 0x24
   b5350:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   b5352:	f003 f857 	bl	b8404 <_ZNK6String7toFloatEv>
   b5356:	4b0d      	ldr	r3, [pc, #52]	; (b538c <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   b5358:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   b535a:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   b535e:	a804      	add	r0, sp, #16
   b5360:	f003 f81a 	bl	b8398 <_ZN6StringC1ERKS_>
   b5364:	2300      	movs	r3, #0
   b5366:	f88d 3000 	strb.w	r3, [sp]
   b536a:	4b09      	ldr	r3, [pc, #36]	; (b5390 <_Z21setUpperHumidityLimit6String+0x44>)
   b536c:	9a04      	ldr	r2, [sp, #16]
   b536e:	781b      	ldrb	r3, [r3, #0]
   b5370:	4908      	ldr	r1, [pc, #32]	; (b5394 <_Z21setUpperHumidityLimit6String+0x48>)
   b5372:	4809      	ldr	r0, [pc, #36]	; (b5398 <_Z21setUpperHumidityLimit6String+0x4c>)
   b5374:	f7ff fc23 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5378:	a804      	add	r0, sp, #16
   b537a:	f002 ff9f 	bl	b82bc <_ZN6StringD1Ev>
  updateThresholdValue();
   b537e:	f7ff ff51 	bl	b5224 <_Z20updateThresholdValuev>
}
   b5382:	2001      	movs	r0, #1
   b5384:	b009      	add	sp, #36	; 0x24
   b5386:	f85d fb04 	ldr.w	pc, [sp], #4
   b538a:	bf00      	nop
   b538c:	2003e4bc 	.word	0x2003e4bc
   b5390:	2003e4b5 	.word	0x2003e4b5
   b5394:	000bb086 	.word	0x000bb086
   b5398:	2003e568 	.word	0x2003e568

000b539c <_Z21setLowerHumidityLimit6String>:
{
   b539c:	b500      	push	{lr}
   b539e:	b089      	sub	sp, #36	; 0x24
   b53a0:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   b53a2:	f003 f82f 	bl	b8404 <_ZNK6String7toFloatEv>
   b53a6:	4b0d      	ldr	r3, [pc, #52]	; (b53dc <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   b53a8:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   b53aa:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   b53ae:	a804      	add	r0, sp, #16
   b53b0:	f002 fff2 	bl	b8398 <_ZN6StringC1ERKS_>
   b53b4:	2300      	movs	r3, #0
   b53b6:	f88d 3000 	strb.w	r3, [sp]
   b53ba:	4b09      	ldr	r3, [pc, #36]	; (b53e0 <_Z21setLowerHumidityLimit6String+0x44>)
   b53bc:	9a04      	ldr	r2, [sp, #16]
   b53be:	781b      	ldrb	r3, [r3, #0]
   b53c0:	4908      	ldr	r1, [pc, #32]	; (b53e4 <_Z21setLowerHumidityLimit6String+0x48>)
   b53c2:	4809      	ldr	r0, [pc, #36]	; (b53e8 <_Z21setLowerHumidityLimit6String+0x4c>)
   b53c4:	f7ff fbfb 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b53c8:	a804      	add	r0, sp, #16
   b53ca:	f002 ff77 	bl	b82bc <_ZN6StringD1Ev>
  updateThresholdValue();
   b53ce:	f7ff ff29 	bl	b5224 <_Z20updateThresholdValuev>
}
   b53d2:	2001      	movs	r0, #1
   b53d4:	b009      	add	sp, #36	; 0x24
   b53d6:	f85d fb04 	ldr.w	pc, [sp], #4
   b53da:	bf00      	nop
   b53dc:	2003e4bc 	.word	0x2003e4bc
   b53e0:	2003e4b5 	.word	0x2003e4b5
   b53e4:	000bb0a3 	.word	0x000bb0a3
   b53e8:	2003e568 	.word	0x2003e568

000b53ec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b53ec:	b530      	push	{r4, r5, lr}
   b53ee:	b085      	sub	sp, #20
   b53f0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b53f2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b53f4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b53f6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b53f8:	f001 ffde 	bl	b73b8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b53fc:	b990      	cbnz	r0, b5424 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b53fe:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5400:	b10c      	cbz	r4, b5406 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5402:	6923      	ldr	r3, [r4, #16]
   b5404:	b923      	cbnz	r3, b5410 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5406:	4a08      	ldr	r2, [pc, #32]	; (b5428 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5408:	4908      	ldr	r1, [pc, #32]	; (b542c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b540a:	200a      	movs	r0, #10
   b540c:	f001 ffc4 	bl	b7398 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5410:	230c      	movs	r3, #12
   b5412:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5416:	2304      	movs	r3, #4
   b5418:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b541a:	aa01      	add	r2, sp, #4
   b541c:	6923      	ldr	r3, [r4, #16]
   b541e:	2101      	movs	r1, #1
   b5420:	4620      	mov	r0, r4
   b5422:	4798      	blx	r3
}
   b5424:	b005      	add	sp, #20
   b5426:	bd30      	pop	{r4, r5, pc}
   b5428:	000b70d9 	.word	0x000b70d9
   b542c:	000bb0c0 	.word	0x000bb0c0

000b5430 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   b5430:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5432:	4d11      	ldr	r5, [pc, #68]	; (b5478 <_Z17getBatteryContextv+0x48>)
   b5434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   b5436:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b5438:	ac01      	add	r4, sp, #4
   b543a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b543c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b5440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5444:	4669      	mov	r1, sp
   b5446:	2007      	movs	r0, #7
   b5448:	f7ff ffd0 	bl	b53ec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   b544c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   b544e:	bfa8      	it	ge
   b5450:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  sysStatus.batteryState = System.batteryState();
   b5452:	4b0a      	ldr	r3, [pc, #40]	; (b547c <_Z17getBatteryContextv+0x4c>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   b5454:	4a0a      	ldr	r2, [pc, #40]	; (b5480 <_Z17getBatteryContextv+0x50>)
  sysStatus.batteryState = System.batteryState();
   b5456:	7418      	strb	r0, [r3, #16]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   b5458:	ab08      	add	r3, sp, #32
   b545a:	b2c0      	uxtb	r0, r0
   b545c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b5460:	2110      	movs	r1, #16
   b5462:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   b5466:	4807      	ldr	r0, [pc, #28]	; (b5484 <_Z17getBatteryContextv+0x54>)
   b5468:	f002 f8ee 	bl	b7648 <snprintf>
  sysStatusWriteNeeded = true;
   b546c:	4b06      	ldr	r3, [pc, #24]	; (b5488 <_Z17getBatteryContextv+0x58>)
   b546e:	2201      	movs	r2, #1
   b5470:	701a      	strb	r2, [r3, #0]
}
   b5472:	b009      	add	sp, #36	; 0x24
   b5474:	bd30      	pop	{r4, r5, pc}
   b5476:	bf00      	nop
   b5478:	000badac 	.word	0x000badac
   b547c:	2003e5e8 	.word	0x2003e5e8
   b5480:	000bb39c 	.word	0x000bb39c
   b5484:	2003e4d5 	.word	0x2003e4d5
   b5488:	2003e604 	.word	0x2003e604

000b548c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   b548c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b548e:	ed2d 8b02 	vpush	{d8}
  char thresholdMessage[64] = "All within thresholds";
   b5492:	4b77      	ldr	r3, [pc, #476]	; (b5670 <_Z16takeMeasurementsv+0x1e4>)
bool takeMeasurements() {
   b5494:	b097      	sub	sp, #92	; 0x5c
  char thresholdMessage[64] = "All within thresholds";
   b5496:	aa06      	add	r2, sp, #24
   b5498:	f103 0510 	add.w	r5, r3, #16
   b549c:	4617      	mov	r7, r2
   b549e:	6818      	ldr	r0, [r3, #0]
   b54a0:	6859      	ldr	r1, [r3, #4]
   b54a2:	4614      	mov	r4, r2
   b54a4:	c403      	stmia	r4!, {r0, r1}
   b54a6:	3308      	adds	r3, #8
   b54a8:	42ab      	cmp	r3, r5
   b54aa:	4622      	mov	r2, r4
   b54ac:	d1f7      	bne.n	b549e <_Z16takeMeasurementsv+0x12>
   b54ae:	6818      	ldr	r0, [r3, #0]
   b54b0:	889b      	ldrh	r3, [r3, #4]
   b54b2:	6020      	str	r0, [r4, #0]
   b54b4:	80a3      	strh	r3, [r4, #4]
   b54b6:	222a      	movs	r2, #42	; 0x2a
   b54b8:	2100      	movs	r1, #0
  sensorData.validData = false;
   b54ba:	4d6e      	ldr	r5, [pc, #440]	; (b5674 <_Z16takeMeasurementsv+0x1e8>)
  char thresholdMessage[64] = "All within thresholds";
   b54bc:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   b54c0:	f003 fc68 	bl	b8d94 <memset>
  sensorData.validData = false;
   b54c4:	2400      	movs	r4, #0
  if (sht31.readTemperature()){
   b54c6:	486c      	ldr	r0, [pc, #432]	; (b5678 <_Z16takeMeasurementsv+0x1ec>)
  sensorData.validData = false;
   b54c8:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   b54ca:	f001 fd69 	bl	b6fa0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b54ce:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b54d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54d6:	f000 80aa 	beq.w	b562e <_Z16takeMeasurementsv+0x1a2>
    sensorData.temperatureInC = sht31.readTemperature();
   b54da:	4867      	ldr	r0, [pc, #412]	; (b5678 <_Z16takeMeasurementsv+0x1ec>)
   b54dc:	f001 fd60 	bl	b6fa0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   b54e0:	ee10 0a10 	vmov	r0, s0
   b54e4:	ed85 0a02 	vstr	s0, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   b54e8:	f7fe fefe 	bl	b42e8 <__aeabi_f2d>
   b54ec:	4a63      	ldr	r2, [pc, #396]	; (b567c <_Z16takeMeasurementsv+0x1f0>)
   b54ee:	e9cd 0100 	strd	r0, r1, [sp]
   b54f2:	2110      	movs	r1, #16
   b54f4:	4862      	ldr	r0, [pc, #392]	; (b5680 <_Z16takeMeasurementsv+0x1f4>)
   b54f6:	f002 f8a7 	bl	b7648 <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   b54fa:	485f      	ldr	r0, [pc, #380]	; (b5678 <_Z16takeMeasurementsv+0x1ec>)
   b54fc:	f001 fd5e 	bl	b6fbc <_ZN14Adafruit_SHT3112readHumidityEv>
   b5500:	ee10 0a10 	vmov	r0, s0
   b5504:	ed85 0a03 	vstr	s0, [r5, #12]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   b5508:	f7fe feee 	bl	b42e8 <__aeabi_f2d>
   b550c:	4a5d      	ldr	r2, [pc, #372]	; (b5684 <_Z16takeMeasurementsv+0x1f8>)
   b550e:	e9cd 0100 	strd	r0, r1, [sp]
   b5512:	2110      	movs	r1, #16
   b5514:	485c      	ldr	r0, [pc, #368]	; (b5688 <_Z16takeMeasurementsv+0x1fc>)
   b5516:	f002 f897 	bl	b7648 <snprintf>
   b551a:	a905      	add	r1, sp, #20
   b551c:	2003      	movs	r0, #3
   b551e:	f7ff ff65 	bl	b53ec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b5522:	2800      	cmp	r0, #0
   b5524:	f040 809e 	bne.w	b5664 <_Z16takeMeasurementsv+0x1d8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b5528:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   b552c:	ee07 3a90 	vmov	s15, r3
   b5530:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   b5534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   b5538:	4e54      	ldr	r6, [pc, #336]	; (b568c <_Z16takeMeasurementsv+0x200>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   b553a:	4a55      	ldr	r2, [pc, #340]	; (b5690 <_Z16takeMeasurementsv+0x204>)
   b553c:	4855      	ldr	r0, [pc, #340]	; (b5694 <_Z16takeMeasurementsv+0x208>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   b553e:	edc5 7a04 	vstr	s15, [r5, #16]
   b5542:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   b5546:	2110      	movs	r1, #16
   b5548:	f002 f87e 	bl	b7648 <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   b554c:	ed95 8a02 	vldr	s16, [r5, #8]
   b5550:	edd6 7a03 	vldr	s15, [r6, #12]
   b5554:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b555c:	f140 8085 	bpl.w	b566a <_Z16takeMeasurementsv+0x1de>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   b5560:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   b5562:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   b5566:	7074      	strb	r4, [r6, #1]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   b5568:	f7fe febe 	bl	b42e8 <__aeabi_f2d>
   b556c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5570:	ee18 0a10 	vmov	r0, s16
   b5574:	f7fe feb8 	bl	b42e8 <__aeabi_f2d>
   b5578:	4a47      	ldr	r2, [pc, #284]	; (b5698 <_Z16takeMeasurementsv+0x20c>)
   b557a:	e9cd 0100 	strd	r0, r1, [sp]
   b557e:	2140      	movs	r1, #64	; 0x40
   b5580:	4638      	mov	r0, r7
   b5582:	f002 f861 	bl	b7648 <snprintf>
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   b5586:	ed95 8a02 	vldr	s16, [r5, #8]
   b558a:	edd6 7a02 	vldr	s15, [r6, #8]
   b558e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5596:	dd12      	ble.n	b55be <_Z16takeMeasurementsv+0x132>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   b5598:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   b559a:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperTemperatureThresholdCrossed = true;
   b559e:	7034      	strb	r4, [r6, #0]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   b55a0:	f7fe fea2 	bl	b42e8 <__aeabi_f2d>
   b55a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b55a8:	ee18 0a10 	vmov	r0, s16
   b55ac:	f7fe fe9c 	bl	b42e8 <__aeabi_f2d>
   b55b0:	4a3a      	ldr	r2, [pc, #232]	; (b569c <_Z16takeMeasurementsv+0x210>)
   b55b2:	e9cd 0100 	strd	r0, r1, [sp]
   b55b6:	2140      	movs	r1, #64	; 0x40
   b55b8:	4638      	mov	r0, r7
   b55ba:	f002 f845 	bl	b7648 <snprintf>
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   b55be:	ed95 8a03 	vldr	s16, [r5, #12]
   b55c2:	edd6 7a05 	vldr	s15, [r6, #20]
   b55c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b55ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b55ce:	d512      	bpl.n	b55f6 <_Z16takeMeasurementsv+0x16a>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   b55d0:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   b55d2:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerHumidityThresholdCrossed = true;
   b55d6:	70f4      	strb	r4, [r6, #3]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   b55d8:	f7fe fe86 	bl	b42e8 <__aeabi_f2d>
   b55dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b55e0:	ee18 0a10 	vmov	r0, s16
   b55e4:	f7fe fe80 	bl	b42e8 <__aeabi_f2d>
   b55e8:	4a2d      	ldr	r2, [pc, #180]	; (b56a0 <_Z16takeMeasurementsv+0x214>)
   b55ea:	e9cd 0100 	strd	r0, r1, [sp]
   b55ee:	2140      	movs	r1, #64	; 0x40
   b55f0:	4638      	mov	r0, r7
   b55f2:	f002 f829 	bl	b7648 <snprintf>
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   b55f6:	ed95 8a03 	vldr	s16, [r5, #12]
   b55fa:	edd6 7a04 	vldr	s15, [r6, #16]
   b55fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5606:	dd12      	ble.n	b562e <_Z16takeMeasurementsv+0x1a2>
      alertsStatus.upperHumidityThresholdCrossed = true;
   b5608:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   b560a:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperHumidityThresholdCrossed = true;
   b560e:	70b4      	strb	r4, [r6, #2]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   b5610:	f7fe fe6a 	bl	b42e8 <__aeabi_f2d>
   b5614:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5618:	ee18 0a10 	vmov	r0, s16
   b561c:	f7fe fe64 	bl	b42e8 <__aeabi_f2d>
   b5620:	4a20      	ldr	r2, [pc, #128]	; (b56a4 <_Z16takeMeasurementsv+0x218>)
   b5622:	e9cd 0100 	strd	r0, r1, [sp]
   b5626:	2140      	movs	r1, #64	; 0x40
   b5628:	4638      	mov	r0, r7
   b562a:	f002 f80d 	bl	b7648 <snprintf>
    sensorData.validData = true;
   b562e:	2601      	movs	r6, #1
    getBatteryContext();                                                                    // Check what the battery is doing.
   b5630:	f7ff fefe 	bl	b5430 <_Z17getBatteryContextv>
    sensorData.validData = true;
   b5634:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   b5636:	f003 f878 	bl	b872a <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   b563a:	4b1b      	ldr	r3, [pc, #108]	; (b56a8 <_Z16takeMeasurementsv+0x21c>)
    sensorData.timeStamp = Time.now();
   b563c:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   b563e:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   b5640:	4b1a      	ldr	r3, [pc, #104]	; (b56ac <_Z16takeMeasurementsv+0x220>)
   b5642:	701e      	strb	r6, [r3, #0]
    if (haveAnyAlertsBeenSet) publishQueue.publish("Alerts", thresholdMessage,PRIVATE);
   b5644:	b14c      	cbz	r4, b565a <_Z16takeMeasurementsv+0x1ce>
   b5646:	2300      	movs	r3, #0
   b5648:	f88d 3000 	strb.w	r3, [sp]
   b564c:	4b18      	ldr	r3, [pc, #96]	; (b56b0 <_Z16takeMeasurementsv+0x224>)
   b564e:	4919      	ldr	r1, [pc, #100]	; (b56b4 <_Z16takeMeasurementsv+0x228>)
   b5650:	781b      	ldrb	r3, [r3, #0]
   b5652:	4819      	ldr	r0, [pc, #100]	; (b56b8 <_Z16takeMeasurementsv+0x22c>)
   b5654:	463a      	mov	r2, r7
   b5656:	f7ff fab2 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
}
   b565a:	4620      	mov	r0, r4
   b565c:	b017      	add	sp, #92	; 0x5c
   b565e:	ecbd 8b02 	vpop	{d8}
   b5662:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   b5664:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5668:	e764      	b.n	b5534 <_Z16takeMeasurementsv+0xa8>
  bool haveAnyAlertsBeenSet = false;
   b566a:	2400      	movs	r4, #0
   b566c:	e78b      	b.n	b5586 <_Z16takeMeasurementsv+0xfa>
   b566e:	bf00      	nop
   b5670:	000badc8 	.word	0x000badc8
   b5674:	2003e5c0 	.word	0x2003e5c0
   b5678:	2003e5d8 	.word	0x2003e5d8
   b567c:	000bb0e6 	.word	0x000bb0e6
   b5680:	2003e605 	.word	0x2003e605
   b5684:	000bb0ee 	.word	0x000bb0ee
   b5688:	2003e508 	.word	0x2003e508
   b568c:	2003e4bc 	.word	0x2003e4bc
   b5690:	000bb0f6 	.word	0x000bb0f6
   b5694:	2003e4e5 	.word	0x2003e4e5
   b5698:	000bb0fc 	.word	0x000bb0fc
   b569c:	000bb119 	.word	0x000bb119
   b56a0:	000bb137 	.word	0x000bb137
   b56a4:	000bb158 	.word	0x000bb158
   b56a8:	2003e5d4 	.word	0x2003e5d4
   b56ac:	2003e4d4 	.word	0x2003e4d4
   b56b0:	2003e4b5 	.word	0x2003e4b5
   b56b4:	000bb17a 	.word	0x000bb17a
   b56b8:	2003e568 	.word	0x2003e568

000b56bc <loop>:
{
   b56bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch(state) {
   b56be:	4c70      	ldr	r4, [pc, #448]	; (b5880 <loop+0x1c4>)
   b56c0:	4e70      	ldr	r6, [pc, #448]	; (b5884 <loop+0x1c8>)
   b56c2:	7823      	ldrb	r3, [r4, #0]
   b56c4:	4d70      	ldr	r5, [pc, #448]	; (b5888 <loop+0x1cc>)
   b56c6:	3b01      	subs	r3, #1
   b56c8:	2b04      	cmp	r3, #4
   b56ca:	d852      	bhi.n	b5772 <loop+0xb6>
   b56cc:	e8df f003 	tbb	[pc, r3]
   b56d0:	311903b4 	.word	0x311903b4
   b56d4:	80          	.byte	0x80
   b56d5:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b56d6:	4b6d      	ldr	r3, [pc, #436]	; (b588c <loop+0x1d0>)
   b56d8:	7a5b      	ldrb	r3, [r3, #9]
   b56da:	b12b      	cbz	r3, b56e8 <loop+0x2c>
   b56dc:	4b6c      	ldr	r3, [pc, #432]	; (b5890 <loop+0x1d4>)
   b56de:	781b      	ldrb	r3, [r3, #0]
   b56e0:	2b02      	cmp	r3, #2
   b56e2:	d001      	beq.n	b56e8 <loop+0x2c>
   b56e4:	f7ff fd6c 	bl	b51c0 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   b56e8:	f003 f81f 	bl	b872a <_ZN9TimeClass3nowEv>
   b56ec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b56f0:	fb90 f2f3 	sdiv	r2, r0, r3
   b56f4:	fb02 0013 	mls	r0, r2, r3, r0
   b56f8:	2800      	cmp	r0, #0
   b56fa:	d13a      	bne.n	b5772 <loop+0xb6>
   b56fc:	2303      	movs	r3, #3
     state = IDLE_STATE;
   b56fe:	7023      	strb	r3, [r4, #0]
   b5700:	e037      	b.n	b5772 <loop+0xb6>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b5702:	4b62      	ldr	r3, [pc, #392]	; (b588c <loop+0x1d0>)
   b5704:	7a5b      	ldrb	r3, [r3, #9]
   b5706:	b12b      	cbz	r3, b5714 <loop+0x58>
   b5708:	4b61      	ldr	r3, [pc, #388]	; (b5890 <loop+0x1d4>)
   b570a:	781b      	ldrb	r3, [r3, #0]
   b570c:	2b03      	cmp	r3, #3
   b570e:	d001      	beq.n	b5714 <loop+0x58>
   b5710:	f7ff fd56 	bl	b51c0 <_Z22publishStateTransitionv>
    if (takeMeasurements()) alertsStatus.thresholdCrossedFlag = true;                       // A return of a "true" value indicates that one of the thresholds have been crossed
   b5714:	f7ff feba 	bl	b548c <_Z16takeMeasurementsv>
   b5718:	4601      	mov	r1, r0
   b571a:	b128      	cbz	r0, b5728 <loop+0x6c>
   b571c:	2301      	movs	r3, #1
   b571e:	7133      	strb	r3, [r6, #4]
    alertsStatusWriteNeeded = true;
   b5720:	2301      	movs	r3, #1
   b5722:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   b5724:	2304      	movs	r3, #4
   b5726:	e7ea      	b.n	b56fe <loop+0x42>
      alertsStatus.thresholdCrossedFlag = false;
   b5728:	7130      	strb	r0, [r6, #4]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   b572a:	2007      	movs	r0, #7
   b572c:	f003 fa05 	bl	b8b3a <digitalWrite>
   b5730:	e7f6      	b.n	b5720 <loop+0x64>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   b5732:	4b56      	ldr	r3, [pc, #344]	; (b588c <loop+0x1d0>)
   b5734:	7a5b      	ldrb	r3, [r3, #9]
   b5736:	b12b      	cbz	r3, b5744 <loop+0x88>
   b5738:	4b55      	ldr	r3, [pc, #340]	; (b5890 <loop+0x1d4>)
   b573a:	781b      	ldrb	r3, [r3, #0]
   b573c:	2b04      	cmp	r3, #4
   b573e:	d001      	beq.n	b5744 <loop+0x88>
   b5740:	f7ff fd3e 	bl	b51c0 <_Z22publishStateTransitionv>
   b5744:	f001 feb8 	bl	b74b8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   b5748:	b168      	cbz	r0, b5766 <loop+0xaa>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   b574a:	f002 ffff 	bl	b874c <_ZN9TimeClass4hourEv>
   b574e:	280c      	cmp	r0, #12
   b5750:	d105      	bne.n	b575e <loop+0xa2>
   b5752:	f001 feb1 	bl	b74b8 <spark_cloud_flag_connected>
        if (!connected()) {
   b5756:	b110      	cbz	r0, b575e <loop+0xa2>
        return spark_sync_time(NULL);
   b5758:	2000      	movs	r0, #0
   b575a:	f001 fecd 	bl	b74f8 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   b575e:	f7ff fcdf 	bl	b5120 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   b5762:	2305      	movs	r3, #5
   b5764:	e7cb      	b.n	b56fe <loop+0x42>
      state = ERROR_STATE;
   b5766:	2301      	movs	r3, #1
   b5768:	7023      	strb	r3, [r4, #0]
   b576a:	f001 fcbd 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b576e:	4b49      	ldr	r3, [pc, #292]	; (b5894 <loop+0x1d8>)
   b5770:	6018      	str	r0, [r3, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   b5772:	4849      	ldr	r0, [pc, #292]	; (b5898 <loop+0x1dc>)
   b5774:	f000 ffae 	bl	b66d4 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   b5778:	4b48      	ldr	r3, [pc, #288]	; (b589c <loop+0x1e0>)
   b577a:	781b      	ldrb	r3, [r3, #0]
   b577c:	b10b      	cbz	r3, b5782 <loop+0xc6>
   b577e:	f7ff fca7 	bl	b50d0 <_Z11petWatchdogv>
  if (alertsStatus.thresholdCrossedFlag) blinkLED(blueLED);
   b5782:	7933      	ldrb	r3, [r6, #4]
   b5784:	b113      	cbz	r3, b578c <loop+0xd0>
   b5786:	2007      	movs	r0, #7
   b5788:	f7ff fd00 	bl	b518c <_Z8blinkLEDi>
  if (sysStatusWriteNeeded) {
   b578c:	4c44      	ldr	r4, [pc, #272]	; (b58a0 <loop+0x1e4>)
   b578e:	7823      	ldrb	r3, [r4, #0]
   b5790:	b13b      	cbz	r3, b57a2 <loop+0xe6>
   b5792:	231c      	movs	r3, #28
   b5794:	4a3d      	ldr	r2, [pc, #244]	; (b588c <loop+0x1d0>)
   b5796:	4843      	ldr	r0, [pc, #268]	; (b58a4 <loop+0x1e8>)
   b5798:	2101      	movs	r1, #1
   b579a:	f000 fb98 	bl	b5ece <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   b579e:	2300      	movs	r3, #0
   b57a0:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   b57a2:	782b      	ldrb	r3, [r5, #0]
   b57a4:	b13b      	cbz	r3, b57b6 <loop+0xfa>
   b57a6:	2318      	movs	r3, #24
   b57a8:	4a36      	ldr	r2, [pc, #216]	; (b5884 <loop+0x1c8>)
   b57aa:	483e      	ldr	r0, [pc, #248]	; (b58a4 <loop+0x1e8>)
   b57ac:	2150      	movs	r1, #80	; 0x50
   b57ae:	f000 fb8e 	bl	b5ece <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   b57b2:	2300      	movs	r3, #0
   b57b4:	702b      	strb	r3, [r5, #0]
  if (sensorDataWriteNeeded) {
   b57b6:	4c3c      	ldr	r4, [pc, #240]	; (b58a8 <loop+0x1ec>)
   b57b8:	7823      	ldrb	r3, [r4, #0]
   b57ba:	b13b      	cbz	r3, b57cc <loop+0x110>
   b57bc:	2314      	movs	r3, #20
   b57be:	4a3b      	ldr	r2, [pc, #236]	; (b58ac <loop+0x1f0>)
   b57c0:	4838      	ldr	r0, [pc, #224]	; (b58a4 <loop+0x1e8>)
   b57c2:	21a0      	movs	r1, #160	; 0xa0
   b57c4:	f000 fb83 	bl	b5ece <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   b57c8:	2300      	movs	r3, #0
   b57ca:	7023      	strb	r3, [r4, #0]
}
   b57cc:	b003      	add	sp, #12
   b57ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   b57d0:	4b2e      	ldr	r3, [pc, #184]	; (b588c <loop+0x1d0>)
   b57d2:	7a5b      	ldrb	r3, [r3, #9]
   b57d4:	b12b      	cbz	r3, b57e2 <loop+0x126>
   b57d6:	4b2e      	ldr	r3, [pc, #184]	; (b5890 <loop+0x1d4>)
   b57d8:	781b      	ldrb	r3, [r3, #0]
   b57da:	2b05      	cmp	r3, #5
   b57dc:	d001      	beq.n	b57e2 <loop+0x126>
   b57de:	f7ff fcef 	bl	b51c0 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   b57e2:	4b33      	ldr	r3, [pc, #204]	; (b58b0 <loop+0x1f4>)
   b57e4:	781b      	ldrb	r3, [r3, #0]
   b57e6:	b953      	cbnz	r3, b57fe <loop+0x142>
   b57e8:	f002 ff9f 	bl	b872a <_ZN9TimeClass3nowEv>
   b57ec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   b57f0:	fb90 f2f3 	sdiv	r2, r0, r3
   b57f4:	fb02 0013 	mls	r0, r2, r3, r0
   b57f8:	b108      	cbz	r0, b57fe <loop+0x142>
     state = IDLE_STATE;
   b57fa:	2302      	movs	r3, #2
   b57fc:	e77f      	b.n	b56fe <loop+0x42>
   b57fe:	f001 fc73 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   b5802:	4b2c      	ldr	r3, [pc, #176]	; (b58b4 <loop+0x1f8>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	1ac0      	subs	r0, r0, r3
   b5808:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   b580c:	4298      	cmp	r0, r3
   b580e:	d9b0      	bls.n	b5772 <loop+0xb6>
   b5810:	f001 fc6a 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
   b5814:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b5816:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   b581a:	4f1e      	ldr	r7, [pc, #120]	; (b5894 <loop+0x1d8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b581c:	4b26      	ldr	r3, [pc, #152]	; (b58b8 <loop+0x1fc>)
   b581e:	4a27      	ldr	r2, [pc, #156]	; (b58bc <loop+0x200>)
   b5820:	781b      	ldrb	r3, [r3, #0]
   b5822:	4927      	ldr	r1, [pc, #156]	; (b58c0 <loop+0x204>)
      resetTimeStamp = millis();
   b5824:	6038      	str	r0, [r7, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   b5826:	4827      	ldr	r0, [pc, #156]	; (b58c4 <loop+0x208>)
   b5828:	f7ff f9c9 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      state = ERROR_STATE;                                                                  // Response timed out
   b582c:	2301      	movs	r3, #1
   b582e:	7023      	strb	r3, [r4, #0]
   b5830:	f001 fc5a 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   b5834:	6038      	str	r0, [r7, #0]
   b5836:	e79c      	b.n	b5772 <loop+0xb6>
    if (state != oldState) publishStateTransition();
   b5838:	4b15      	ldr	r3, [pc, #84]	; (b5890 <loop+0x1d4>)
   b583a:	781b      	ldrb	r3, [r3, #0]
   b583c:	2b01      	cmp	r3, #1
   b583e:	d001      	beq.n	b5844 <loop+0x188>
   b5840:	f7ff fcbe 	bl	b51c0 <_Z22publishStateTransitionv>
   b5844:	f001 fc50 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   b5848:	4b12      	ldr	r3, [pc, #72]	; (b5894 <loop+0x1d8>)
   b584a:	681b      	ldr	r3, [r3, #0]
   b584c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   b5850:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   b5854:	4283      	cmp	r3, r0
   b5856:	d28c      	bcs.n	b5772 <loop+0xb6>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5858:	f001 fe2e 	bl	b74b8 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   b585c:	b148      	cbz	r0, b5872 <loop+0x1b6>
   b585e:	2300      	movs	r3, #0
   b5860:	f88d 3000 	strb.w	r3, [sp]
   b5864:	4b14      	ldr	r3, [pc, #80]	; (b58b8 <loop+0x1fc>)
   b5866:	4a18      	ldr	r2, [pc, #96]	; (b58c8 <loop+0x20c>)
   b5868:	781b      	ldrb	r3, [r3, #0]
   b586a:	4918      	ldr	r1, [pc, #96]	; (b58cc <loop+0x210>)
   b586c:	4815      	ldr	r0, [pc, #84]	; (b58c4 <loop+0x208>)
   b586e:	f7ff f9a6 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
      delay(2000);
   b5872:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5876:	f001 ff37 	bl	b76e8 <delay>
      System.reset();
   b587a:	f002 fde5 	bl	b8448 <_ZN11SystemClass5resetEv>
   b587e:	e778      	b.n	b5772 <loop+0xb6>
   b5880:	2003e5e4 	.word	0x2003e5e4
   b5884:	2003e4bc 	.word	0x2003e4bc
   b5888:	2003e4d4 	.word	0x2003e4d4
   b588c:	2003e5e8 	.word	0x2003e5e8
   b5890:	2003e564 	.word	0x2003e564
   b5894:	2003e5a0 	.word	0x2003e5a0
   b5898:	2003e5a4 	.word	0x2003e5a4
   b589c:	2003e645 	.word	0x2003e645
   b58a0:	2003e604 	.word	0x2003e604
   b58a4:	2003e4f8 	.word	0x2003e4f8
   b58a8:	2003e5d4 	.word	0x2003e5d4
   b58ac:	2003e5c0 	.word	0x2003e5c0
   b58b0:	2003e4f5 	.word	0x2003e4f5
   b58b4:	2003e648 	.word	0x2003e648
   b58b8:	2003e4b5 	.word	0x2003e4b5
   b58bc:	000bb740 	.word	0x000bb740
   b58c0:	000bb181 	.word	0x000bb181
   b58c4:	2003e568 	.word	0x2003e568
   b58c8:	000bb19a 	.word	0x000bb19a
   b58cc:	000baefd 	.word	0x000baefd

000b58d0 <setup>:
{
   b58d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b58d4:	2100      	movs	r1, #0
{
   b58d6:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   b58d8:	2008      	movs	r0, #8
   b58da:	f003 f91d 	bl	b8b18 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   b58de:	2101      	movs	r1, #1
   b58e0:	2005      	movs	r0, #5
   b58e2:	f003 f919 	bl	b8b18 <pinMode>
  pinMode(blueLED, OUTPUT);                                                                 // declare the Blue LED Pin as an output
   b58e6:	2101      	movs	r1, #1
   b58e8:	2007      	movs	r0, #7
   b58ea:	f003 f915 	bl	b8b18 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   b58ee:	f7ff fbef 	bl	b50d0 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   b58f2:	2300      	movs	r3, #0
   b58f4:	9300      	str	r3, [sp, #0]
   b58f6:	2201      	movs	r2, #1
   b58f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b58fc:	4995      	ldr	r1, [pc, #596]	; (b5b54 <setup+0x284>)
   b58fe:	2008      	movs	r0, #8
   b5900:	f002 fb26 	bl	b7f50 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5904:	4b94      	ldr	r3, [pc, #592]	; (b5b58 <setup+0x288>)
   b5906:	aa0a      	add	r2, sp, #40	; 0x28
   b5908:	f103 0510 	add.w	r5, r3, #16
   b590c:	4617      	mov	r7, r2
   b590e:	6818      	ldr	r0, [r3, #0]
   b5910:	6859      	ldr	r1, [r3, #4]
   b5912:	4614      	mov	r4, r2
   b5914:	c403      	stmia	r4!, {r0, r1}
   b5916:	3308      	adds	r3, #8
   b5918:	42ab      	cmp	r3, r5
   b591a:	4622      	mov	r2, r4
   b591c:	d1f7      	bne.n	b590e <setup+0x3e>
   b591e:	8819      	ldrh	r1, [r3, #0]
   b5920:	789b      	ldrb	r3, [r3, #2]
   b5922:	70a3      	strb	r3, [r4, #2]
   b5924:	8021      	strh	r1, [r4, #0]
   b5926:	222d      	movs	r2, #45	; 0x2d
   b5928:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   b592a:	4d8c      	ldr	r5, [pc, #560]	; (b5b5c <setup+0x28c>)
   b592c:	f8df 82fc 	ldr.w	r8, [pc, #764]	; b5c2c <setup+0x35c>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5930:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   b5934:	2400      	movs	r4, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   b5936:	f003 fa2d 	bl	b8d94 <memset>
        return spark_deviceID();
   b593a:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   b593c:	702c      	strb	r4, [r5, #0]
   b593e:	f001 fdc3 	bl	b74c8 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b5942:	4623      	mov	r3, r4
   b5944:	227d      	movs	r2, #125	; 0x7d
   b5946:	a91a      	add	r1, sp, #104	; 0x68
   b5948:	a802      	add	r0, sp, #8
   b594a:	f002 fd42 	bl	b83d2 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b594e:	4623      	mov	r3, r4
   b5950:	4622      	mov	r2, r4
   b5952:	4983      	ldr	r1, [pc, #524]	; (b5b60 <setup+0x290>)
   b5954:	e9cd 4400 	strd	r4, r4, [sp]
   b5958:	a81a      	add	r0, sp, #104	; 0x68
   b595a:	f001 fdc5 	bl	b74e8 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b595e:	4981      	ldr	r1, [pc, #516]	; (b5b64 <setup+0x294>)
   b5960:	4881      	ldr	r0, [pc, #516]	; (b5b68 <setup+0x298>)
   b5962:	f7ff f9f9 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5966:	4981      	ldr	r1, [pc, #516]	; (b5b6c <setup+0x29c>)
   b5968:	4881      	ldr	r0, [pc, #516]	; (b5b70 <setup+0x2a0>)
   b596a:	f7ff f9f5 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b596e:	4981      	ldr	r1, [pc, #516]	; (b5b74 <setup+0x2a4>)
   b5970:	4881      	ldr	r0, [pc, #516]	; (b5b78 <setup+0x2a8>)
   b5972:	f7ff f9f1 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5976:	4981      	ldr	r1, [pc, #516]	; (b5b7c <setup+0x2ac>)
   b5978:	4881      	ldr	r0, [pc, #516]	; (b5b80 <setup+0x2b0>)
   b597a:	f7ff f9ed 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b597e:	4981      	ldr	r1, [pc, #516]	; (b5b84 <setup+0x2b4>)
   b5980:	4881      	ldr	r0, [pc, #516]	; (b5b88 <setup+0x2b8>)
   b5982:	f7ff f9e9 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5986:	4981      	ldr	r1, [pc, #516]	; (b5b8c <setup+0x2bc>)
   b5988:	4881      	ldr	r0, [pc, #516]	; (b5b90 <setup+0x2c0>)
   b598a:	f7ff f9e5 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b598e:	4981      	ldr	r1, [pc, #516]	; (b5b94 <setup+0x2c4>)
   b5990:	4881      	ldr	r0, [pc, #516]	; (b5b98 <setup+0x2c8>)
   b5992:	f7ff f9e1 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b5996:	4981      	ldr	r1, [pc, #516]	; (b5b9c <setup+0x2cc>)
   b5998:	4881      	ldr	r0, [pc, #516]	; (b5ba0 <setup+0x2d0>)
   b599a:	f7ff f9dd 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
   b599e:	4981      	ldr	r1, [pc, #516]	; (b5ba4 <setup+0x2d4>)
   b59a0:	4881      	ldr	r0, [pc, #516]	; (b5ba8 <setup+0x2d8>)
   b59a2:	f7ff f9d9 	bl	b4d58 <_ZN10CloudClass9_variableEPKcS1_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b59a6:	4981      	ldr	r1, [pc, #516]	; (b5bac <setup+0x2dc>)
   b59a8:	4881      	ldr	r0, [pc, #516]	; (b5bb0 <setup+0x2e0>)
   b59aa:	4623      	mov	r3, r4
   b59ac:	2202      	movs	r2, #2
   b59ae:	f001 fd6b 	bl	b7488 <spark_variable>
   b59b2:	4623      	mov	r3, r4
   b59b4:	497f      	ldr	r1, [pc, #508]	; (b5bb4 <setup+0x2e4>)
   b59b6:	4880      	ldr	r0, [pc, #512]	; (b5bb8 <setup+0x2e8>)
   b59b8:	2201      	movs	r2, #1
   b59ba:	f001 fd65 	bl	b7488 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b59be:	4a7f      	ldr	r2, [pc, #508]	; (b5bbc <setup+0x2ec>)
   b59c0:	497f      	ldr	r1, [pc, #508]	; (b5bc0 <setup+0x2f0>)
   b59c2:	4880      	ldr	r0, [pc, #512]	; (b5bc4 <setup+0x2f4>)
   b59c4:	f001 ff85 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59c8:	4a7f      	ldr	r2, [pc, #508]	; (b5bc8 <setup+0x2f8>)
   b59ca:	4980      	ldr	r1, [pc, #512]	; (b5bcc <setup+0x2fc>)
   b59cc:	487d      	ldr	r0, [pc, #500]	; (b5bc4 <setup+0x2f4>)
   b59ce:	f001 ff80 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59d2:	4a7f      	ldr	r2, [pc, #508]	; (b5bd0 <setup+0x300>)
   b59d4:	497f      	ldr	r1, [pc, #508]	; (b5bd4 <setup+0x304>)
   b59d6:	487b      	ldr	r0, [pc, #492]	; (b5bc4 <setup+0x2f4>)
   b59d8:	f001 ff7b 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59dc:	4a7e      	ldr	r2, [pc, #504]	; (b5bd8 <setup+0x308>)
   b59de:	497f      	ldr	r1, [pc, #508]	; (b5bdc <setup+0x30c>)
   b59e0:	4878      	ldr	r0, [pc, #480]	; (b5bc4 <setup+0x2f4>)
   b59e2:	f001 ff76 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59e6:	4a7e      	ldr	r2, [pc, #504]	; (b5be0 <setup+0x310>)
   b59e8:	497e      	ldr	r1, [pc, #504]	; (b5be4 <setup+0x314>)
   b59ea:	4876      	ldr	r0, [pc, #472]	; (b5bc4 <setup+0x2f4>)
   b59ec:	f001 ff71 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59f0:	4a7d      	ldr	r2, [pc, #500]	; (b5be8 <setup+0x318>)
   b59f2:	497e      	ldr	r1, [pc, #504]	; (b5bec <setup+0x31c>)
   b59f4:	4873      	ldr	r0, [pc, #460]	; (b5bc4 <setup+0x2f4>)
   b59f6:	f001 ff6c 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b59fa:	4a7d      	ldr	r2, [pc, #500]	; (b5bf0 <setup+0x320>)
   b59fc:	497d      	ldr	r1, [pc, #500]	; (b5bf4 <setup+0x324>)
   b59fe:	4871      	ldr	r0, [pc, #452]	; (b5bc4 <setup+0x2f4>)
   b5a00:	f001 ff67 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b5a04:	4a6c      	ldr	r2, [pc, #432]	; (b5bb8 <setup+0x2e8>)
   b5a06:	497c      	ldr	r1, [pc, #496]	; (b5bf8 <setup+0x328>)
   b5a08:	486e      	ldr	r0, [pc, #440]	; (b5bc4 <setup+0x2f4>)
   b5a0a:	f001 ff62 	bl	b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                        // Start the real time clock
   b5a0e:	487b      	ldr	r0, [pc, #492]	; (b5bfc <setup+0x32c>)
   b5a10:	f000 fd58 	bl	b64c4 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   b5a14:	4621      	mov	r1, r4
   b5a16:	4879      	ldr	r0, [pc, #484]	; (b5bfc <setup+0x32c>)
   b5a18:	f000 fe93 	bl	b6742 <_ZN8MCP7941010clearAlarmEi>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   b5a1c:	f002 fe85 	bl	b872a <_ZN9TimeClass3nowEv>
   b5a20:	4602      	mov	r2, r0
   b5a22:	17c3      	asrs	r3, r0, #31
   b5a24:	a806      	add	r0, sp, #24
   b5a26:	f002 fd7b 	bl	b8520 <_ZN9TimeClass7timeStrEx>
   b5a2a:	4975      	ldr	r1, [pc, #468]	; (b5c00 <setup+0x330>)
   b5a2c:	f898 3000 	ldrb.w	r3, [r8]
   b5a30:	9a06      	ldr	r2, [sp, #24]
   b5a32:	4874      	ldr	r0, [pc, #464]	; (b5c04 <setup+0x334>)
   b5a34:	f88d 4000 	strb.w	r4, [sp]
   b5a38:	f7ff f8c1 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b5a3c:	a806      	add	r0, sp, #24
   b5a3e:	f002 fc3d 	bl	b82bc <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   b5a42:	4871      	ldr	r0, [pc, #452]	; (b5c08 <setup+0x338>)
   b5a44:	2144      	movs	r1, #68	; 0x44
   b5a46:	f001 fa16 	bl	b6e76 <_ZN14Adafruit_SHT315beginEh>
   b5a4a:	b948      	cbnz	r0, b5a60 <setup+0x190>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   b5a4c:	496f      	ldr	r1, [pc, #444]	; (b5c0c <setup+0x33c>)
   b5a4e:	4638      	mov	r0, r7
   b5a50:	f003 f9d6 	bl	b8e00 <strcpy>
    state = ERROR_STATE;
   b5a54:	2301      	movs	r3, #1
   b5a56:	702b      	strb	r3, [r5, #0]
   b5a58:	f001 fb46 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   b5a5c:	4b6c      	ldr	r3, [pc, #432]	; (b5c10 <setup+0x340>)
   b5a5e:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   b5a60:	486c      	ldr	r0, [pc, #432]	; (b5c14 <setup+0x344>)
   b5a62:	f000 f9a7 	bl	b5db4 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5a66:	2301      	movs	r3, #1
   b5a68:	486a      	ldr	r0, [pc, #424]	; (b5c14 <setup+0x344>)
   b5a6a:	aa06      	add	r2, sp, #24
   b5a6c:	2100      	movs	r1, #0
   b5a6e:	f000 f9e3 	bl	b5e38 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   b5a72:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5a76:	2b05      	cmp	r3, #5
   b5a78:	d036      	beq.n	b5ae8 <setup+0x218>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   b5a7a:	4866      	ldr	r0, [pc, #408]	; (b5c14 <setup+0x344>)
   b5a7c:	f000 f9a4 	bl	b5dc8 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b5a80:	4a65      	ldr	r2, [pc, #404]	; (b5c18 <setup+0x348>)
   b5a82:	4864      	ldr	r0, [pc, #400]	; (b5c14 <setup+0x344>)
   b5a84:	2304      	movs	r3, #4
   b5a86:	2100      	movs	r1, #0
   b5a88:	f000 fa21 	bl	b5ece <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5a8c:	2301      	movs	r3, #1
   b5a8e:	4861      	ldr	r0, [pc, #388]	; (b5c14 <setup+0x344>)
   b5a90:	aa06      	add	r2, sp, #24
   b5a92:	2100      	movs	r1, #0
   b5a94:	f000 f9d0 	bl	b5e38 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   b5a98:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5a9c:	2b05      	cmp	r3, #5
   b5a9e:	d01e      	beq.n	b5ade <setup+0x20e>
   b5aa0:	2301      	movs	r3, #1
   b5aa2:	702b      	strb	r3, [r5, #0]
  if (sysStatus.thirdPartySim) {
   b5aa4:	4c5d      	ldr	r4, [pc, #372]	; (b5c1c <setup+0x34c>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   b5aa6:	f7ff fa93 	bl	b4fd0 <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   b5aaa:	f7ff fabb 	bl	b5024 <_Z17checkAlertsValuesv>
  if (sysStatus.thirdPartySim) {
   b5aae:	7863      	ldrb	r3, [r4, #1]
   b5ab0:	b3ab      	cbz	r3, b5b1e <setup+0x24e>
        return hal_timer_millis(nullptr);
   b5ab2:	2000      	movs	r0, #0
   b5ab4:	f001 fb28 	bl	b7108 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5ab8:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b5abc:	4606      	mov	r6, r0
   b5abe:	2000      	movs	r0, #0
   b5ac0:	f001 fb22 	bl	b7108 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5ac4:	1b80      	subs	r0, r0, r6
   b5ac6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5aca:	4548      	cmp	r0, r9
   b5acc:	f171 0300 	sbcs.w	r3, r1, #0
   b5ad0:	d217      	bcs.n	b5b02 <setup+0x232>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5ad2:	f001 fcf1 	bl	b74b8 <spark_cloud_flag_connected>
   b5ad6:	b9a0      	cbnz	r0, b5b02 <setup+0x232>
            spark_process();
   b5ad8:	f001 fce6 	bl	b74a8 <spark_process>
        while (_while() && !_condition()) {
   b5adc:	e7ef      	b.n	b5abe <setup+0x1ee>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   b5ade:	f7ff fa19 	bl	b4f14 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   b5ae2:	f7ff fa43 	bl	b4f6c <_Z17loadAlertDefaultsv>
   b5ae6:	e7dd      	b.n	b5aa4 <setup+0x1d4>
   b5ae8:	4a4c      	ldr	r2, [pc, #304]	; (b5c1c <setup+0x34c>)
   b5aea:	484a      	ldr	r0, [pc, #296]	; (b5c14 <setup+0x344>)
   b5aec:	231c      	movs	r3, #28
   b5aee:	2101      	movs	r1, #1
   b5af0:	f000 f9a2 	bl	b5e38 <_ZN6MB85RC8readDataEjPhj>
   b5af4:	4a4a      	ldr	r2, [pc, #296]	; (b5c20 <setup+0x350>)
   b5af6:	4847      	ldr	r0, [pc, #284]	; (b5c14 <setup+0x344>)
   b5af8:	2318      	movs	r3, #24
   b5afa:	2150      	movs	r1, #80	; 0x50
   b5afc:	f000 f99c 	bl	b5e38 <_ZN6MB85RC8readDataEjPhj>
        return t;
   b5b00:	e7d0      	b.n	b5aa4 <setup+0x1d4>
   b5b02:	f001 fcd9 	bl	b74b8 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   b5b06:	6860      	ldr	r0, [r4, #4]
   b5b08:	f7ff f968 	bl	b4ddc <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   b5b0c:	6863      	ldr	r3, [r4, #4]
   b5b0e:	4845      	ldr	r0, [pc, #276]	; (b5c24 <setup+0x354>)
   b5b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5b14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5b18:	4359      	muls	r1, r3
   b5b1a:	f7ff f8e7 	bl	b4cec <_ZN5Timer12changePeriodEjj.isra.0>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   b5b1e:	f7ff fcb5 	bl	b548c <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   b5b22:	f7ff fb7f 	bl	b5224 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   b5b26:	7a63      	ldrb	r3, [r4, #9]
   b5b28:	b14b      	cbz	r3, b5b3e <setup+0x26e>
   b5b2a:	2300      	movs	r3, #0
   b5b2c:	f88d 3000 	strb.w	r3, [sp]
   b5b30:	493d      	ldr	r1, [pc, #244]	; (b5c28 <setup+0x358>)
   b5b32:	f898 3000 	ldrb.w	r3, [r8]
   b5b36:	4833      	ldr	r0, [pc, #204]	; (b5c04 <setup+0x334>)
   b5b38:	463a      	mov	r2, r7
   b5b3a:	f7ff f840 	bl	b4bbe <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   b5b3e:	782b      	ldrb	r3, [r5, #0]
   b5b40:	b90b      	cbnz	r3, b5b46 <setup+0x276>
   b5b42:	2302      	movs	r3, #2
   b5b44:	702b      	strb	r3, [r5, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   b5b46:	a802      	add	r0, sp, #8
   b5b48:	f002 fbb8 	bl	b82bc <_ZN6StringD1Ev>
}
   b5b4c:	b03b      	add	sp, #236	; 0xec
   b5b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5b52:	bf00      	nop
   b5b54:	000b4ae9 	.word	0x000b4ae9
   b5b58:	000bae08 	.word	0x000bae08
   b5b5c:	2003e5e4 	.word	0x2003e5e4
   b5b60:	000b4c59 	.word	0x000b4c59
   b5b64:	000bb31c 	.word	0x000bb31c
   b5b68:	000bb1ae 	.word	0x000bb1ae
   b5b6c:	2003e605 	.word	0x2003e605
   b5b70:	000bb1b6 	.word	0x000bb1b6
   b5b74:	2003e508 	.word	0x2003e508
   b5b78:	000bb1c2 	.word	0x000bb1c2
   b5b7c:	2003e62d 	.word	0x2003e62d
   b5b80:	000bb1cb 	.word	0x000bb1cb
   b5b84:	2003e54c 	.word	0x2003e54c
   b5b88:	000bb1dd 	.word	0x000bb1dd
   b5b8c:	2003e615 	.word	0x2003e615
   b5b90:	000bb1ef 	.word	0x000bb1ef
   b5b94:	2003e534 	.word	0x2003e534
   b5b98:	000bb1fe 	.word	0x000bb1fe
   b5b9c:	2003e4e5 	.word	0x2003e4e5
   b5ba0:	000bb20d 	.word	0x000bb20d
   b5ba4:	2003e4d5 	.word	0x2003e4d5
   b5ba8:	000bb215 	.word	0x000bb215
   b5bac:	2003e5ec 	.word	0x2003e5ec
   b5bb0:	000bb224 	.word	0x000bb224
   b5bb4:	2003e5e9 	.word	0x2003e5e9
   b5bb8:	000baf0c 	.word	0x000baf0c
   b5bbc:	000bb233 	.word	0x000bb233
   b5bc0:	000b4af5 	.word	0x000b4af5
   b5bc4:	000b78a7 	.word	0x000b78a7
   b5bc8:	000bb23f 	.word	0x000bb23f
   b5bcc:	000b4bd9 	.word	0x000b4bd9
   b5bd0:	000bb24c 	.word	0x000bb24c
   b5bd4:	000b52ad 	.word	0x000b52ad
   b5bd8:	000bb25d 	.word	0x000bb25d
   b5bdc:	000b52fd 	.word	0x000b52fd
   b5be0:	000bb26e 	.word	0x000bb26e
   b5be4:	000b539d 	.word	0x000b539d
   b5be8:	000bb283 	.word	0x000bb283
   b5bec:	000b534d 	.word	0x000b534d
   b5bf0:	000baf47 	.word	0x000baf47
   b5bf4:	000b4e99 	.word	0x000b4e99
   b5bf8:	000b4dfd 	.word	0x000b4dfd
   b5bfc:	2003e5a4 	.word	0x2003e5a4
   b5c00:	000bb297 	.word	0x000bb297
   b5c04:	2003e568 	.word	0x2003e568
   b5c08:	2003e5d8 	.word	0x2003e5d8
   b5c0c:	000bb29c 	.word	0x000bb29c
   b5c10:	2003e5a0 	.word	0x2003e5a0
   b5c14:	2003e4f8 	.word	0x2003e4f8
   b5c18:	000bb324 	.word	0x000bb324
   b5c1c:	2003e5e8 	.word	0x2003e5e8
   b5c20:	2003e4bc 	.word	0x2003e4bc
   b5c24:	2003e518 	.word	0x2003e518
   b5c28:	000bb2b9 	.word	0x000bb2b9
   b5c2c:	2003e4b5 	.word	0x2003e4b5

000b5c30 <_GLOBAL__sub_I___appProductVersion>:
}
   b5c30:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b5c32:	4b38      	ldr	r3, [pc, #224]	; (b5d14 <_GLOBAL__sub_I___appProductVersion+0xe4>)
   b5c34:	2501      	movs	r5, #1
   b5c36:	701d      	strb	r5, [r3, #0]
   b5c38:	4b37      	ldr	r3, [pc, #220]	; (b5d18 <_GLOBAL__sub_I___appProductVersion+0xe8>)
   b5c3a:	2202      	movs	r2, #2
   b5c3c:	b088      	sub	sp, #32
   b5c3e:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b5c40:	f002 ff14 	bl	b8a6c <spark_protocol_instance>
   b5c44:	2300      	movs	r3, #0
   b5c46:	461a      	mov	r2, r3
   b5c48:	2112      	movs	r1, #18
   b5c4a:	f002 ff1f 	bl	b8a8c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5c4e:	f002 ff0d 	bl	b8a6c <spark_protocol_instance>
   b5c52:	2300      	movs	r3, #0
   b5c54:	461a      	mov	r2, r3
   b5c56:	210d      	movs	r1, #13
   b5c58:	f002 ff10 	bl	b8a7c <spark_protocol_set_product_id>
              error_(SYSTEM_ERROR_NONE) {
   b5c5c:	4b2f      	ldr	r3, [pc, #188]	; (b5d1c <_GLOBAL__sub_I___appProductVersion+0xec>)
    SleepResult() {}
   b5c5e:	4a30      	ldr	r2, [pc, #192]	; (b5d20 <_GLOBAL__sub_I___appProductVersion+0xf0>)
   b5c60:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5c62:	2400      	movs	r4, #0
   b5c64:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5c68:	4628      	mov	r0, r5
   b5c6a:	f001 fbb7 	bl	b73dc <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b5c6e:	4621      	mov	r1, r4
   b5c70:	4628      	mov	r0, r5
   b5c72:	f001 fbc3 	bl	b73fc <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5c76:	4629      	mov	r1, r5
   b5c78:	2004      	movs	r0, #4
   b5c7a:	f001 fa15 	bl	b70a8 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   b5c7e:	4829      	ldr	r0, [pc, #164]	; (b5d24 <_GLOBAL__sub_I___appProductVersion+0xf4>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5c80:	4d29      	ldr	r5, [pc, #164]	; (b5d28 <_GLOBAL__sub_I___appProductVersion+0xf8>)
   b5c82:	f001 f8d3 	bl	b6e2c <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   b5c86:	f002 ff9f 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b5c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5c8e:	4601      	mov	r1, r0
   b5c90:	4623      	mov	r3, r4
   b5c92:	4628      	mov	r0, r5
   b5c94:	f000 f884 	bl	b5da0 <_ZN6MB85RCC1ER7TwoWireji>
   b5c98:	4b24      	ldr	r3, [pc, #144]	; (b5d2c <_GLOBAL__sub_I___appProductVersion+0xfc>)
   b5c9a:	602b      	str	r3, [r5, #0]
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   b5c9c:	f002 ff94 	bl	b8bc8 <_Z19__fetch_global_Wirev>
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   b5ca0:	4d23      	ldr	r5, [pc, #140]	; (b5d30 <_GLOBAL__sub_I___appProductVersion+0x100>)
   b5ca2:	4601      	mov	r1, r0
   b5ca4:	4823      	ldr	r0, [pc, #140]	; (b5d34 <_GLOBAL__sub_I___appProductVersion+0x104>)
   b5ca6:	f000 faf5 	bl	b6294 <_ZN8MCP79410C1ER7TwoWire>
   b5caa:	4923      	ldr	r1, [pc, #140]	; (b5d38 <_GLOBAL__sub_I___appProductVersion+0x108>)
   b5cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b5cb0:	4628      	mov	r0, r5
   b5cb2:	f001 f87b 	bl	b6dac <_ZN25PublishQueueAsyncRetainedC1EPht>
   b5cb6:	4b21      	ldr	r3, [pc, #132]	; (b5d3c <_GLOBAL__sub_I___appProductVersion+0x10c>)
   b5cb8:	602b      	str	r3, [r5, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5cba:	4b21      	ldr	r3, [pc, #132]	; (b5d40 <_GLOBAL__sub_I___appProductVersion+0x110>)
   b5cbc:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5cbe:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5cc0:	4b20      	ldr	r3, [pc, #128]	; (b5d44 <_GLOBAL__sub_I___appProductVersion+0x114>)
   b5cc2:	4a21      	ldr	r2, [pc, #132]	; (b5d48 <_GLOBAL__sub_I___appProductVersion+0x118>)
   b5cc4:	601a      	str	r2, [r3, #0]
   b5cc6:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5cca:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5cce:	ae02      	add	r6, sp, #8
   b5cd0:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5cd8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5cdc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5ce0:	e882 0003 	stmia.w	r2, {r0, r1}
   b5ce4:	4a19      	ldr	r2, [pc, #100]	; (b5d4c <_GLOBAL__sub_I___appProductVersion+0x11c>)
   b5ce6:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5ce8:	699a      	ldr	r2, [r3, #24]
   b5cea:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b5cec:	4a18      	ldr	r2, [pc, #96]	; (b5d50 <_GLOBAL__sub_I___appProductVersion+0x120>)
   b5cee:	619a      	str	r2, [r3, #24]
   b5cf0:	711c      	strb	r4, [r3, #4]
   b5cf2:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5cf4:	4a17      	ldr	r2, [pc, #92]	; (b5d54 <_GLOBAL__sub_I___appProductVersion+0x124>)
      __a = _GLIBCXX_MOVE(__b);
   b5cf6:	9406      	str	r4, [sp, #24]
   b5cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5cfc:	f103 0008 	add.w	r0, r3, #8
   b5d00:	e9cd 4400 	strd	r4, r4, [sp]
   b5d04:	f001 f980 	bl	b7008 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5d08:	4628      	mov	r0, r5
   b5d0a:	f7ff f829 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
}
   b5d0e:	b008      	add	sp, #32
   b5d10:	bd70      	pop	{r4, r5, r6, pc}
   b5d12:	bf00      	nop
   b5d14:	2003e4b5 	.word	0x2003e4b5
   b5d18:	2003e4b4 	.word	0x2003e4b4
   b5d1c:	2003e4a8 	.word	0x2003e4a8
   b5d20:	ffff0000 	.word	0xffff0000
   b5d24:	2003e5d8 	.word	0x2003e5d8
   b5d28:	2003e4f8 	.word	0x2003e4f8
   b5d2c:	000bb308 	.word	0x000bb308
   b5d30:	2003e568 	.word	0x2003e568
   b5d34:	2003e5a4 	.word	0x2003e5a4
   b5d38:	2003f400 	.word	0x2003f400
   b5d3c:	000bb2e0 	.word	0x000bb2e0
   b5d40:	000b4d09 	.word	0x000b4d09
   b5d44:	2003e518 	.word	0x2003e518
   b5d48:	000bb2cc 	.word	0x000bb2cc
   b5d4c:	000b4ba7 	.word	0x000b4ba7
   b5d50:	000b4bbb 	.word	0x000b4bbb
   b5d54:	000b4b6d 	.word	0x000b4b6d

000b5d58 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b5d58:	4770      	bx	lr

000b5d5a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b5d5a:	b510      	push	{r4, lr}
}
   b5d5c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b5d5e:	4604      	mov	r4, r0
}
   b5d60:	f7fe feab 	bl	b4aba <_ZdlPvj>
   b5d64:	4620      	mov	r0, r4
   b5d66:	bd10      	pop	{r4, pc}

000b5d68 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b5d68:	6803      	ldr	r3, [r0, #0]
   b5d6a:	b2c9      	uxtb	r1, r1
   b5d6c:	689b      	ldr	r3, [r3, #8]
   b5d6e:	4718      	bx	r3

000b5d70 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b5d70:	b40e      	push	{r1, r2, r3}
   b5d72:	b500      	push	{lr}
   b5d74:	b08c      	sub	sp, #48	; 0x30
   b5d76:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b5d78:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b5d7c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b5d80:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5d82:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b5d86:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5d88:	6801      	ldr	r1, [r0, #0]
   b5d8a:	aa04      	add	r2, sp, #16
   b5d8c:	201e      	movs	r0, #30
    attr.flags = 0;
   b5d8e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5d92:	f001 fb09 	bl	b73a8 <log_message_v>
}
   b5d96:	b00c      	add	sp, #48	; 0x30
   b5d98:	f85d eb04 	ldr.w	lr, [sp], #4
   b5d9c:	b003      	add	sp, #12
   b5d9e:	4770      	bx	lr

000b5da0 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b5da0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b5da2:	4d03      	ldr	r5, [pc, #12]	; (b5db0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b5da4:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b5da8:	e9c0 5100 	strd	r5, r1, [r0]
}
   b5dac:	bd30      	pop	{r4, r5, pc}
   b5dae:	bf00      	nop
   b5db0:	000bb35c 	.word	0x000bb35c

000b5db4 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b5db4:	6840      	ldr	r0, [r0, #4]
   b5db6:	f002 b877 	b.w	b7ea8 <_ZN7TwoWire5beginEv>

000b5dba <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5dba:	b510      	push	{r4, lr}
   b5dbc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b5dbe:	6800      	ldr	r0, [r0, #0]
   b5dc0:	f002 f8bb 	bl	b7f3a <_ZN7TwoWire6unlockEv>
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	bd10      	pop	{r4, pc}

000b5dc8 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b5dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5dcc:	b08a      	sub	sp, #40	; 0x28
   b5dce:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b5dd0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5dd2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b5dd4:	f002 f8a8 	bl	b7f28 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b5dd8:	221e      	movs	r2, #30
   b5dda:	2100      	movs	r1, #0
   b5ddc:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b5dde:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b5de0:	f002 ffd8 	bl	b8d94 <memset>
		size_t framAddr = 0;
   b5de4:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b5de6:	b1ef      	cbz	r7, b5e24 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b5de8:	6823      	ldr	r3, [r4, #0]
   b5dea:	2f1e      	cmp	r7, #30
   b5dec:	46b8      	mov	r8, r7
   b5dee:	bf28      	it	cs
   b5df0:	f04f 081e 	movcs.w	r8, #30
   b5df4:	68dd      	ldr	r5, [r3, #12]
   b5df6:	aa02      	add	r2, sp, #8
   b5df8:	4643      	mov	r3, r8
   b5dfa:	4631      	mov	r1, r6
   b5dfc:	4620      	mov	r0, r4
   b5dfe:	47a8      	blx	r5
			if (!result) {
   b5e00:	4605      	mov	r5, r0
   b5e02:	b958      	cbnz	r0, b5e1c <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b5e04:	480a      	ldr	r0, [pc, #40]	; (b5e30 <_ZN6MB85RC5eraseEv+0x68>)
   b5e06:	490b      	ldr	r1, [pc, #44]	; (b5e34 <_ZN6MB85RC5eraseEv+0x6c>)
   b5e08:	4632      	mov	r2, r6
   b5e0a:	f7ff ffb1 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b5e0e:	a801      	add	r0, sp, #4
   b5e10:	f7ff ffd3 	bl	b5dba <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b5e14:	4628      	mov	r0, r5
   b5e16:	b00a      	add	sp, #40	; 0x28
   b5e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b5e1c:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b5e20:	4446      	add	r6, r8
		while(totalLen > 0) {
   b5e22:	e7e0      	b.n	b5de6 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b5e24:	a801      	add	r0, sp, #4
   b5e26:	f7ff ffc8 	bl	b5dba <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b5e2a:	2501      	movs	r5, #1
   b5e2c:	e7f2      	b.n	b5e14 <_ZN6MB85RC5eraseEv+0x4c>
   b5e2e:	bf00      	nop
   b5e30:	2003e690 	.word	0x2003e690
   b5e34:	000bb328 	.word	0x000bb328

000b5e38 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5e3c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5e3e:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5e40:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5e42:	460d      	mov	r5, r1
   b5e44:	4616      	mov	r6, r2
   b5e46:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b5e48:	f002 f86e 	bl	b7f28 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b5e4c:	b1a7      	cbz	r7, b5e78 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5e4e:	68e1      	ldr	r1, [r4, #12]
   b5e50:	6860      	ldr	r0, [r4, #4]
   b5e52:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5e56:	f002 f85d 	bl	b7f14 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5e5a:	0a29      	lsrs	r1, r5, #8
   b5e5c:	6860      	ldr	r0, [r4, #4]
   b5e5e:	f7ff ff83 	bl	b5d68 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5e62:	4629      	mov	r1, r5
   b5e64:	6860      	ldr	r0, [r4, #4]
   b5e66:	f7ff ff7f 	bl	b5d68 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b5e6a:	6860      	ldr	r0, [r4, #4]
   b5e6c:	2100      	movs	r1, #0
   b5e6e:	f002 f854 	bl	b7f1a <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5e72:	b148      	cbz	r0, b5e88 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b5e74:	2400      	movs	r4, #0
   b5e76:	e000      	b.n	b5e7a <_ZN6MB85RC8readDataEjPhj+0x42>
   b5e78:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5e7a:	a801      	add	r0, sp, #4
   b5e7c:	f7ff ff9d 	bl	b5dba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b5e80:	4620      	mov	r0, r4
   b5e82:	b003      	add	sp, #12
   b5e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b5e88:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b5e8a:	7b21      	ldrb	r1, [r4, #12]
   b5e8c:	6860      	ldr	r0, [r4, #4]
   b5e8e:	46b8      	mov	r8, r7
   b5e90:	bf28      	it	cs
   b5e92:	f04f 0820 	movcs.w	r8, #32
   b5e96:	2301      	movs	r3, #1
   b5e98:	4642      	mov	r2, r8
   b5e9a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5e9e:	f002 f820 	bl	b7ee2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b5ea2:	f002 fe91 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b5ea6:	6803      	ldr	r3, [r0, #0]
   b5ea8:	691b      	ldr	r3, [r3, #16]
   b5eaa:	4798      	blx	r3
   b5eac:	4540      	cmp	r0, r8
   b5eae:	dbe1      	blt.n	b5e74 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b5eb0:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b5eb4:	f002 fe88 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b5eb8:	6803      	ldr	r3, [r0, #0]
   b5eba:	695b      	ldr	r3, [r3, #20]
   b5ebc:	4798      	blx	r3
   b5ebe:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b5ec2:	454e      	cmp	r6, r9
   b5ec4:	d1f6      	bne.n	b5eb4 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b5ec6:	4445      	add	r5, r8
				dataLen--;
   b5ec8:	eba7 0708 	sub.w	r7, r7, r8
   b5ecc:	e7be      	b.n	b5e4c <_ZN6MB85RC8readDataEjPhj+0x14>

000b5ece <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b5ece:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ed2:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5ed4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ed6:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b5ed8:	460e      	mov	r6, r1
   b5eda:	4690      	mov	r8, r2
   b5edc:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b5ede:	f002 f823 	bl	b7f28 <_ZN7TwoWire4lockEv>
   b5ee2:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b5ee6:	f1b9 0f00 	cmp.w	r9, #0
   b5eea:	d02a      	beq.n	b5f42 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b5eec:	b34d      	cbz	r5, b5f42 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5eee:	68e1      	ldr	r1, [r4, #12]
   b5ef0:	6860      	ldr	r0, [r4, #4]
   b5ef2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5ef6:	f002 f80d 	bl	b7f14 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5efa:	0a31      	lsrs	r1, r6, #8
   b5efc:	6860      	ldr	r0, [r4, #4]
   b5efe:	f7ff ff33 	bl	b5d68 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5f02:	6860      	ldr	r0, [r4, #4]
   b5f04:	4631      	mov	r1, r6
   b5f06:	f7ff ff2f 	bl	b5d68 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5f0a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b5f0e:	4647      	mov	r7, r8
   b5f10:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b5f14:	6860      	ldr	r0, [r4, #4]
   b5f16:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5f1a:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b5f1c:	3d01      	subs	r5, #1
				wire.write(*data);
   b5f1e:	689b      	ldr	r3, [r3, #8]
   b5f20:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5f22:	4555      	cmp	r5, sl
   b5f24:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b5f28:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b5f2a:	d001      	beq.n	b5f30 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b5f2c:	2d00      	cmp	r5, #0
   b5f2e:	d1f1      	bne.n	b5f14 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b5f30:	6860      	ldr	r0, [r4, #4]
   b5f32:	2101      	movs	r1, #1
   b5f34:	f001 fff1 	bl	b7f1a <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5f38:	2800      	cmp	r0, #0
   b5f3a:	d0d7      	beq.n	b5eec <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b5f3c:	f04f 0900 	mov.w	r9, #0
   b5f40:	e7d1      	b.n	b5ee6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b5f42:	a801      	add	r0, sp, #4
   b5f44:	f7ff ff39 	bl	b5dba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b5f48:	4648      	mov	r0, r9
   b5f4a:	b003      	add	sp, #12
   b5f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5f50 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f54:	b08b      	sub	sp, #44	; 0x2c
   b5f56:	460e      	mov	r6, r1
   b5f58:	4615      	mov	r5, r2
   b5f5a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b5f5c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5f5e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5f60:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b5f62:	f001 ffe1 	bl	b7f28 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b5f66:	42ae      	cmp	r6, r5
   b5f68:	d229      	bcs.n	b5fbe <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b5f6a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b5f6c:	4425      	add	r5, r4
			while(numBytes > 0) {
   b5f6e:	b18c      	cbz	r4, b5f94 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b5f70:	2c1e      	cmp	r4, #30
   b5f72:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b5f74:	f8d8 3000 	ldr.w	r3, [r8]
   b5f78:	bf28      	it	cs
   b5f7a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b5f7c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b5f7e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5f82:	aa02      	add	r2, sp, #8
   b5f84:	463b      	mov	r3, r7
   b5f86:	4631      	mov	r1, r6
   b5f88:	4640      	mov	r0, r8
				framAddrTo -= count;
   b5f8a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b5f8c:	47c8      	blx	r9
				if (!result) {
   b5f8e:	b948      	cbnz	r0, b5fa4 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b5f90:	2400      	movs	r4, #0
   b5f92:	e000      	b.n	b5f96 <_ZN6MB85RC8moveDataEjjj+0x46>
   b5f94:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5f96:	a801      	add	r0, sp, #4
   b5f98:	f7ff ff0f 	bl	b5dba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	b00b      	add	sp, #44	; 0x2c
   b5fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b5fa4:	f8d8 3000 	ldr.w	r3, [r8]
   b5fa8:	aa02      	add	r2, sp, #8
   b5faa:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5fae:	4629      	mov	r1, r5
   b5fb0:	463b      	mov	r3, r7
   b5fb2:	4640      	mov	r0, r8
   b5fb4:	47c8      	blx	r9
				if (!result) {
   b5fb6:	2800      	cmp	r0, #0
   b5fb8:	d0ea      	beq.n	b5f90 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b5fba:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b5fbc:	e7d7      	b.n	b5f6e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b5fbe:	d9e9      	bls.n	b5f94 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b5fc0:	2c00      	cmp	r4, #0
   b5fc2:	d0e7      	beq.n	b5f94 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b5fc4:	f8d8 3000 	ldr.w	r3, [r8]
   b5fc8:	2c1e      	cmp	r4, #30
   b5fca:	4627      	mov	r7, r4
   b5fcc:	bf28      	it	cs
   b5fce:	271e      	movcs	r7, #30
   b5fd0:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b5fd4:	aa02      	add	r2, sp, #8
   b5fd6:	463b      	mov	r3, r7
   b5fd8:	4631      	mov	r1, r6
   b5fda:	4640      	mov	r0, r8
   b5fdc:	47c8      	blx	r9
				if (!result) {
   b5fde:	2800      	cmp	r0, #0
   b5fe0:	d0d6      	beq.n	b5f90 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b5fe2:	f8d8 3000 	ldr.w	r3, [r8]
   b5fe6:	aa02      	add	r2, sp, #8
   b5fe8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b5fec:	4629      	mov	r1, r5
   b5fee:	463b      	mov	r3, r7
   b5ff0:	4640      	mov	r0, r8
   b5ff2:	47c8      	blx	r9
				if (!result) {
   b5ff4:	2800      	cmp	r0, #0
   b5ff6:	d0cb      	beq.n	b5f90 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b5ff8:	443e      	add	r6, r7
				framAddrTo += count;
   b5ffa:	443d      	add	r5, r7
				numBytes -= count;
   b5ffc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b5ffe:	e7df      	b.n	b5fc0 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6000 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   b6000:	2040      	movs	r0, #64	; 0x40
   b6002:	4770      	bx	lr

000b6004 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   b6004:	2000      	movs	r0, #0
   b6006:	4770      	bx	lr

000b6008 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   b6008:	2080      	movs	r0, #128	; 0x80
   b600a:	4770      	bx	lr

000b600c <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   b600c:	20ff      	movs	r0, #255	; 0xff
   b600e:	4770      	bx	lr

000b6010 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   b6010:	4770      	bx	lr

000b6012 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   b6012:	4770      	bx	lr

000b6014 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   b6014:	4770      	bx	lr

000b6016 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   b6016:	4770      	bx	lr

000b6018 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   b6018:	b510      	push	{r4, lr}
}
   b601a:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   b601c:	4604      	mov	r4, r0
}
   b601e:	f7fe fd4c 	bl	b4aba <_ZdlPvj>
   b6022:	4620      	mov	r0, r4
   b6024:	bd10      	pop	{r4, pc}

000b6026 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   b6026:	b510      	push	{r4, lr}
}
   b6028:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   b602a:	4604      	mov	r4, r0
}
   b602c:	f7fe fd45 	bl	b4aba <_ZdlPvj>
   b6030:	4620      	mov	r0, r4
   b6032:	bd10      	pop	{r4, pc}

000b6034 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   b6034:	b510      	push	{r4, lr}
}
   b6036:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   b6038:	4604      	mov	r4, r0
}
   b603a:	f7fe fd3e 	bl	b4aba <_ZdlPvj>
   b603e:	4620      	mov	r0, r4
   b6040:	bd10      	pop	{r4, pc}

000b6042 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   b6042:	b510      	push	{r4, lr}
}
   b6044:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   b6046:	4604      	mov	r4, r0
}
   b6048:	f7fe fd37 	bl	b4aba <_ZdlPvj>
   b604c:	4620      	mov	r0, r4
   b604e:	bd10      	pop	{r4, pc}

000b6050 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   b6050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   b6054:	6803      	ldr	r3, [r0, #0]
   b6056:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   b6058:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   b605a:	4798      	blx	r3
   b605c:	2210      	movs	r2, #16
   b605e:	4601      	mov	r1, r0
   b6060:	4668      	mov	r0, sp
   b6062:	f002 fe97 	bl	b8d94 <memset>
	size_t len = length();
   b6066:	6823      	ldr	r3, [r4, #0]
   b6068:	4620      	mov	r0, r4
   b606a:	689b      	ldr	r3, [r3, #8]
   b606c:	4798      	blx	r3
	size_t offset = 0;
   b606e:	2500      	movs	r5, #0
	size_t len = length();
   b6070:	4607      	mov	r7, r0
	bool bResult = false;
   b6072:	4628      	mov	r0, r5
	while(offset < len) {
   b6074:	42bd      	cmp	r5, r7
   b6076:	d20e      	bcs.n	b6096 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   b6078:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   b607a:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   b607c:	2e10      	cmp	r6, #16
   b607e:	bf28      	it	cs
   b6080:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   b6082:	f8d3 8018 	ldr.w	r8, [r3, #24]
   b6086:	466a      	mov	r2, sp
   b6088:	4633      	mov	r3, r6
   b608a:	4629      	mov	r1, r5
   b608c:	4620      	mov	r0, r4
   b608e:	47c0      	blx	r8
		if (!bResult) {
   b6090:	b108      	cbz	r0, b6096 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   b6092:	4435      	add	r5, r6
	while(offset < len) {
   b6094:	e7ee      	b.n	b6074 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   b6096:	b004      	add	sp, #16
   b6098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b609c <_ZN7TwoWire5writeEj.isra.0>:
   b609c:	6803      	ldr	r3, [r0, #0]
   b609e:	b2c9      	uxtb	r1, r1
   b60a0:	689b      	ldr	r3, [r3, #8]
   b60a2:	4718      	bx	r3

000b60a4 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   b60a4:	f44f 7380 	mov.w	r3, #256	; 0x100
   b60a8:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   b60aa:	f240 1301 	movw	r3, #257	; 0x101
   b60ae:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   b60b0:	2300      	movs	r3, #0
   b60b2:	8203      	strh	r3, [r0, #16]
}
   b60b4:	4770      	bx	lr
	...

000b60b8 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   b60b8:	4a06      	ldr	r2, [pc, #24]	; (b60d4 <_ZN12MCP79410TimeC1Ev+0x1c>)
   b60ba:	6002      	str	r2, [r0, #0]
   b60bc:	b508      	push	{r3, lr}
   b60be:	4a06      	ldr	r2, [pc, #24]	; (b60d8 <_ZN12MCP79410TimeC1Ev+0x20>)
   b60c0:	6042      	str	r2, [r0, #4]
   b60c2:	f240 7204 	movw	r2, #1796	; 0x704
   b60c6:	8102      	strh	r2, [r0, #8]
   b60c8:	2200      	movs	r2, #0
   b60ca:	7442      	strb	r2, [r0, #17]
	clear();
   b60cc:	f7ff ffea 	bl	b60a4 <_ZN12MCP79410Time5clearEv>
}
   b60d0:	bd08      	pop	{r3, pc}
   b60d2:	bf00      	nop
   b60d4:	000bb43c 	.word	0x000bb43c
   b60d8:	03020100 	.word	0x03020100

000b60dc <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b60dc:	0903      	lsrs	r3, r0, #4
}
   b60de:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   b60e0:	f000 000f 	and.w	r0, r0, #15
}
   b60e4:	fb02 0003 	mla	r0, r2, r3, r0
   b60e8:	4770      	bx	lr

000b60ea <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   b60ea:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   b60ec:	7a80      	ldrb	r0, [r0, #10]
   b60ee:	f7ff fff5 	bl	b60dc <_ZN12MCP79410Time8bcdToIntEh>
}
   b60f2:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   b60f6:	bd08      	pop	{r3, pc}

000b60f8 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   b60f8:	7ac0      	ldrb	r0, [r0, #11]
   b60fa:	f000 001f 	and.w	r0, r0, #31
   b60fe:	f7ff bfed 	b.w	b60dc <_ZN12MCP79410Time8bcdToIntEh>

000b6102 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   b6102:	7b00      	ldrb	r0, [r0, #12]
   b6104:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   b6108:	f7ff bfe8 	b.w	b60dc <_ZN12MCP79410Time8bcdToIntEh>

000b610c <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   b610c:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   b610e:	7b81      	ldrb	r1, [r0, #14]
   b6110:	064a      	lsls	r2, r1, #25
   b6112:	d50d      	bpl.n	b6130 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   b6114:	f001 001f 	and.w	r0, r1, #31
   b6118:	f7ff ffe0 	bl	b60dc <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   b611c:	068b      	lsls	r3, r1, #26
   b611e:	d503      	bpl.n	b6128 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   b6120:	280c      	cmp	r0, #12
   b6122:	d000      	beq.n	b6126 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   b6124:	300c      	adds	r0, #12
}
   b6126:	bd08      	pop	{r3, pc}
				return 0;
   b6128:	280c      	cmp	r0, #12
   b612a:	bf08      	it	eq
   b612c:	2000      	moveq	r0, #0
   b612e:	e7fa      	b.n	b6126 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   b6130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   b6134:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   b6138:	f7ff bfd0 	b.w	b60dc <_ZN12MCP79410Time8bcdToIntEh>

000b613c <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   b613c:	7bc0      	ldrb	r0, [r0, #15]
   b613e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b6142:	f7ff bfcb 	b.w	b60dc <_ZN12MCP79410Time8bcdToIntEh>

000b6146 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   b6146:	7c00      	ldrb	r0, [r0, #16]
   b6148:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   b614c:	f7ff bfc6 	b.w	b60dc <_ZN12MCP79410Time8bcdToIntEh>

000b6150 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   b6150:	b510      	push	{r4, lr}
   b6152:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   b6154:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   b6156:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   b6158:	2100      	movs	r1, #0
   b615a:	a801      	add	r0, sp, #4
   b615c:	f002 fe1a 	bl	b8d94 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   b6160:	4620      	mov	r0, r4
   b6162:	f7ff ffc2 	bl	b60ea <_ZNK12MCP79410Time7getYearEv>
   b6166:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   b616a:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   b616c:	4620      	mov	r0, r4
   b616e:	f7ff ffc3 	bl	b60f8 <_ZNK12MCP79410Time8getMonthEv>
   b6172:	3801      	subs	r0, #1
   b6174:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   b6176:	4620      	mov	r0, r4
   b6178:	f7ff ffc3 	bl	b6102 <_ZNK12MCP79410Time13getDayOfMonthEv>
   b617c:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   b617e:	4620      	mov	r0, r4
   b6180:	f7ff ffc4 	bl	b610c <_ZNK12MCP79410Time7getHourEv>
   b6184:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   b6186:	4620      	mov	r0, r4
   b6188:	f7ff ffd8 	bl	b613c <_ZNK12MCP79410Time9getMinuteEv>
   b618c:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   b618e:	4620      	mov	r0, r4
   b6190:	f7ff ffd9 	bl	b6146 <_ZNK12MCP79410Time9getSecondEv>
   b6194:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   b6196:	a801      	add	r0, sp, #4
   b6198:	f001 fa9e 	bl	b76d8 <mktime>
}
   b619c:	b00a      	add	sp, #40	; 0x28
   b619e:	bd10      	pop	{r4, pc}

000b61a0 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   b61a0:	220a      	movs	r2, #10
   b61a2:	fb90 f1f2 	sdiv	r1, r0, r2
   b61a6:	fb91 f3f2 	sdiv	r3, r1, r2
   b61aa:	fb02 1313 	mls	r3, r2, r3, r1
   b61ae:	011b      	lsls	r3, r3, #4
   b61b0:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   b61b2:	fb02 0011 	mls	r0, r2, r1, r0
   b61b6:	4318      	orrs	r0, r3
}
   b61b8:	b2c0      	uxtb	r0, r0
   b61ba:	4770      	bx	lr

000b61bc <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   b61bc:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   b61be:	b510      	push	{r4, lr}
   b61c0:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   b61c2:	fb91 f0f3 	sdiv	r0, r1, r3
   b61c6:	fb00 1013 	mls	r0, r0, r3, r1
   b61ca:	f7ff ffe9 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
   b61ce:	72a0      	strb	r0, [r4, #10]
}
   b61d0:	bd10      	pop	{r4, pc}

000b61d2 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   b61d2:	b510      	push	{r4, lr}
   b61d4:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   b61d6:	4608      	mov	r0, r1
   b61d8:	f7ff ffe2 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
   b61dc:	72e0      	strb	r0, [r4, #11]
}
   b61de:	bd10      	pop	{r4, pc}

000b61e0 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   b61e0:	b510      	push	{r4, lr}
   b61e2:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   b61e4:	4608      	mov	r0, r1
   b61e6:	f7ff ffdb 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   b61ea:	7b23      	ldrb	r3, [r4, #12]
   b61ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   b61f0:	4318      	orrs	r0, r3
   b61f2:	7320      	strb	r0, [r4, #12]
}
   b61f4:	bd10      	pop	{r4, pc}

000b61f6 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   b61f6:	b510      	push	{r4, lr}
   b61f8:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   b61fa:	1c48      	adds	r0, r1, #1
   b61fc:	f7ff ffd0 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   b6200:	7b63      	ldrb	r3, [r4, #13]
   b6202:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   b6206:	4318      	orrs	r0, r3
   b6208:	7360      	strb	r0, [r4, #13]
}
   b620a:	bd10      	pop	{r4, pc}

000b620c <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   b620c:	b510      	push	{r4, lr}
   b620e:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   b6210:	4608      	mov	r0, r1
   b6212:	f7ff ffc5 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
   b6216:	73a0      	strb	r0, [r4, #14]
}
   b6218:	bd10      	pop	{r4, pc}

000b621a <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   b621a:	b510      	push	{r4, lr}
   b621c:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   b621e:	4608      	mov	r0, r1
   b6220:	f7ff ffbe 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
   b6224:	73e0      	strb	r0, [r4, #15]
}
   b6226:	bd10      	pop	{r4, pc}

000b6228 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   b6228:	b510      	push	{r4, lr}
   b622a:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   b622c:	4608      	mov	r0, r1
   b622e:	f7ff ffb7 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   b6232:	7c23      	ldrb	r3, [r4, #16]
   b6234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   b6238:	4318      	orrs	r0, r3
   b623a:	7420      	strb	r0, [r4, #16]
}
   b623c:	bd10      	pop	{r4, pc}

000b623e <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   b623e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6240:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   b6242:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   b6244:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   b6248:	f002 fd5e 	bl	b8d08 <gmtime>
   b624c:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   b624e:	6941      	ldr	r1, [r0, #20]
   b6250:	4620      	mov	r0, r4
   b6252:	f7ff ffb3 	bl	b61bc <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   b6256:	6929      	ldr	r1, [r5, #16]
   b6258:	4620      	mov	r0, r4
   b625a:	3101      	adds	r1, #1
   b625c:	f7ff ffb9 	bl	b61d2 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   b6260:	68e9      	ldr	r1, [r5, #12]
   b6262:	4620      	mov	r0, r4
   b6264:	f7ff ffbc 	bl	b61e0 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   b6268:	69a9      	ldr	r1, [r5, #24]
   b626a:	4620      	mov	r0, r4
   b626c:	f7ff ffc3 	bl	b61f6 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   b6270:	68a9      	ldr	r1, [r5, #8]
   b6272:	4620      	mov	r0, r4
   b6274:	f7ff ffca 	bl	b620c <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   b6278:	6869      	ldr	r1, [r5, #4]
   b627a:	4620      	mov	r0, r4
   b627c:	f7ff ffcd 	bl	b621a <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   b6280:	6829      	ldr	r1, [r5, #0]
   b6282:	293b      	cmp	r1, #59	; 0x3b
   b6284:	bfa8      	it	ge
   b6286:	213b      	movge	r1, #59	; 0x3b
   b6288:	4620      	mov	r0, r4
   b628a:	f7ff ffcd 	bl	b6228 <_ZN12MCP79410Time9setSecondEi>
}
   b628e:	b003      	add	sp, #12
   b6290:	bd30      	pop	{r4, r5, pc}
	...

000b6294 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b6294:	4a05      	ldr	r2, [pc, #20]	; (b62ac <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b6296:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   b6298:	e9c0 2100 	strd	r2, r1, [r0]
   b629c:	4a04      	ldr	r2, [pc, #16]	; (b62b0 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   b629e:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b62a0:	4a04      	ldr	r2, [pc, #16]	; (b62b4 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   b62a2:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b62a4:	4a04      	ldr	r2, [pc, #16]	; (b62b8 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   b62a6:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   b62a8:	6142      	str	r2, [r0, #20]
}
   b62aa:	4770      	bx	lr
   b62ac:	000bb470 	.word	0x000bb470
   b62b0:	03010000 	.word	0x03010000
   b62b4:	000bb418 	.word	0x000bb418
   b62b8:	000bb44c 	.word	0x000bb44c

000b62bc <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   b62bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62c0:	4604      	mov	r4, r0
   b62c2:	460f      	mov	r7, r1
   b62c4:	4690      	mov	r8, r2
   b62c6:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b62c8:	2600      	movs	r6, #0

	while(offset < bufLen) {
   b62ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b62cc:	429e      	cmp	r6, r3
   b62ce:	d231      	bcs.n	b6334 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   b62d0:	6860      	ldr	r0, [r4, #4]
   b62d2:	4639      	mov	r1, r7
   b62d4:	f001 fe1a 	bl	b7f0c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b62d8:	6860      	ldr	r0, [r4, #4]
   b62da:	eb08 0106 	add.w	r1, r8, r6
   b62de:	f7ff fedd 	bl	b609c <_ZN7TwoWire5writeEj.isra.0>
		stat = wire.endTransmission(false);
   b62e2:	6860      	ldr	r0, [r4, #4]
   b62e4:	2100      	movs	r1, #0
   b62e6:	f001 fe18 	bl	b7f1a <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b62ea:	4605      	mov	r5, r0
   b62ec:	b9d0      	cbnz	r0, b6324 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   b62ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b62f0:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   b62f2:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   b62f4:	2a20      	cmp	r2, #32
   b62f6:	f04f 0301 	mov.w	r3, #1
   b62fa:	bf28      	it	cs
   b62fc:	2220      	movcs	r2, #32
   b62fe:	4639      	mov	r1, r7
   b6300:	f001 fdef 	bl	b7ee2 <_ZN7TwoWire11requestFromEhjh>
   b6304:	eb09 0b06 	add.w	fp, r9, r6
   b6308:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   b630a:	eb0b 0a00 	add.w	sl, fp, r0
   b630e:	45da      	cmp	sl, fp
   b6310:	d006      	beq.n	b6320 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   b6312:	6860      	ldr	r0, [r4, #4]
   b6314:	6803      	ldr	r3, [r0, #0]
   b6316:	695b      	ldr	r3, [r3, #20]
   b6318:	4798      	blx	r3
   b631a:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   b631e:	e7f6      	b.n	b630e <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   b6320:	442e      	add	r6, r5
	while(offset < bufLen) {
   b6322:	e7d2      	b.n	b62ca <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   b6324:	4602      	mov	r2, r0
   b6326:	4904      	ldr	r1, [pc, #16]	; (b6338 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   b6328:	4804      	ldr	r0, [pc, #16]	; (b633c <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   b632a:	f7ff fd21 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   b632e:	4628      	mov	r0, r5
   b6330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6334:	2500      	movs	r5, #0
	return stat;
   b6336:	e7fa      	b.n	b632e <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   b6338:	000bb370 	.word	0x000bb370
   b633c:	2003e64c 	.word	0x2003e64c

000b6340 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b6344:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6348:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b634a:	6803      	ldr	r3, [r0, #0]
   b634c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b634e:	4605      	mov	r5, r0
   b6350:	460c      	mov	r4, r1
   b6352:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b6354:	4798      	blx	r3
   b6356:	4580      	cmp	r8, r0
   b6358:	d80d      	bhi.n	b6376 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b635a:	3420      	adds	r4, #32
   b635c:	6868      	ldr	r0, [r5, #4]
   b635e:	9600      	str	r6, [sp, #0]
   b6360:	463b      	mov	r3, r7
   b6362:	b2e2      	uxtb	r2, r4
   b6364:	216f      	movs	r1, #111	; 0x6f
   b6366:	f7ff ffa9 	bl	b62bc <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b636a:	fab0 f080 	clz	r0, r0
   b636e:	0940      	lsrs	r0, r0, #5
}
   b6370:	b002      	add	sp, #8
   b6372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b6376:	2000      	movs	r0, #0
   b6378:	e7fa      	b.n	b6370 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000b637a <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b637a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b637e:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6382:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b6384:	6803      	ldr	r3, [r0, #0]
   b6386:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   b6388:	4604      	mov	r4, r0
   b638a:	460d      	mov	r5, r1
   b638c:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b638e:	4798      	blx	r3
   b6390:	4580      	cmp	r8, r0
   b6392:	d80c      	bhi.n	b63ae <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   b6394:	6860      	ldr	r0, [r4, #4]
   b6396:	9600      	str	r6, [sp, #0]
   b6398:	463b      	mov	r3, r7
   b639a:	b2ea      	uxtb	r2, r5
   b639c:	2157      	movs	r1, #87	; 0x57
   b639e:	f7ff ff8d 	bl	b62bc <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   b63a2:	fab0 f080 	clz	r0, r0
   b63a6:	0940      	lsrs	r0, r0, #5
}
   b63a8:	b002      	add	sp, #8
   b63aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b63ae:	2000      	movs	r0, #0
   b63b0:	e7fa      	b.n	b63a8 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000b63b2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>:
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b63b2:	2b01      	cmp	r3, #1
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   b63b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b63b6:	4614      	mov	r4, r2
   b63b8:	461e      	mov	r6, r3
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   b63ba:	d824      	bhi.n	b6406 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x54>
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   b63bc:	2b00      	cmp	r3, #0
   b63be:	bf0c      	ite	eq
   b63c0:	2307      	moveq	r3, #7
   b63c2:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   b63c4:	9300      	str	r3, [sp, #0]
   b63c6:	460a      	mov	r2, r1
   b63c8:	ab02      	add	r3, sp, #8
   b63ca:	216f      	movs	r1, #111	; 0x6f
   b63cc:	f7ff ff76 	bl	b62bc <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b63d0:	4605      	mov	r5, r0
   b63d2:	b9a8      	cbnz	r0, b6400 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawSecond = buf[0];
   b63d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b63d8:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   b63da:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b63de:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   b63e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b63e4:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   b63e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b63ea:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   b63ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b63f0:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   b63f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b63f6:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   b63f8:	b9f6      	cbnz	r6, b6438 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x86>
				time.rawYear = buf[6];
   b63fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b63fe:	72a3      	strb	r3, [r4, #10]
}
   b6400:	4628      	mov	r0, r5
   b6402:	b004      	add	sp, #16
   b6404:	bd70      	pop	{r4, r5, r6, pc}
	if (timeMode == TIME_MODE_POWER) {
   b6406:	2b02      	cmp	r3, #2
   b6408:	d11c      	bne.n	b6444 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x92>
		stat = deviceRead(REG_I2C_ADDR, addr, buf, 4);
   b640a:	2304      	movs	r3, #4
   b640c:	9300      	str	r3, [sp, #0]
   b640e:	460a      	mov	r2, r1
   b6410:	ab02      	add	r3, sp, #8
   b6412:	216f      	movs	r1, #111	; 0x6f
   b6414:	f7ff ff52 	bl	b62bc <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   b6418:	4605      	mov	r5, r0
   b641a:	2800      	cmp	r0, #0
   b641c:	d1f0      	bne.n	b6400 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
			time.rawMinute = buf[0];
   b641e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6422:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[1];
   b6424:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b6428:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfMonth = buf[2];
   b642a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   b642e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[3];
   b6430:	f89d 300b 	ldrb.w	r3, [sp, #11]
			time.rawSecond = 0;
   b6434:	7420      	strb	r0, [r4, #16]
			time.rawMonth = buf[3];
   b6436:	72e3      	strb	r3, [r4, #11]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
   b6438:	f002 f994 	bl	b8764 <_ZN9TimeClass4yearEv>
   b643c:	f7ff feb0 	bl	b61a0 <_ZN12MCP79410Time8intToBcdEi>
   b6440:	72a0      	strb	r0, [r4, #10]
   b6442:	e7dd      	b.n	b6400 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>
	int stat = -1;
   b6444:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	return stat;
   b6448:	e7da      	b.n	b6400 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei+0x4e>

000b644a <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b644a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b644c:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   b644e:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   b6450:	9300      	str	r3, [sp, #0]
   b6452:	216f      	movs	r1, #111	; 0x6f
   b6454:	ab03      	add	r3, sp, #12
   b6456:	f7ff ff31 	bl	b62bc <_ZNK8MCP7941010deviceReadEhhPhj>
   b645a:	b920      	cbnz	r0, b6466 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   b645c:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   b6460:	b005      	add	sp, #20
   b6462:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   b6466:	2000      	movs	r0, #0
   b6468:	e7fa      	b.n	b6460 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000b646a <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   b646a:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   b646c:	2103      	movs	r1, #3
   b646e:	f7ff ffec 	bl	b644a <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   b6472:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b6476:	bd08      	pop	{r3, pc}

000b6478 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b6478:	b538      	push	{r3, r4, r5, lr}
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b647a:	2300      	movs	r3, #0
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b647c:	460c      	mov	r4, r1
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b647e:	460a      	mov	r2, r1
   b6480:	4619      	mov	r1, r3
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   b6482:	4605      	mov	r5, r0
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
   b6484:	f7ff ff95 	bl	b63b2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei>
	if (stat == 0) {
   b6488:	b930      	cbnz	r0, b6498 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b648a:	7aa3      	ldrb	r3, [r4, #10]
   b648c:	b123      	cbz	r3, b6498 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   b648e:	4628      	mov	r0, r5
}
   b6490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   b6494:	f7ff bfe9 	b.w	b646a <_ZNK8MCP7941020getOscillatorRunningEv>
}
   b6498:	2000      	movs	r0, #0
   b649a:	bd38      	pop	{r3, r4, r5, pc}

000b649c <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   b649c:	b510      	push	{r4, lr}
   b649e:	b086      	sub	sp, #24
   b64a0:	4604      	mov	r4, r0
	MCP79410Time time;
   b64a2:	a801      	add	r0, sp, #4
   b64a4:	f7ff fe08 	bl	b60b8 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   b64a8:	a901      	add	r1, sp, #4
   b64aa:	4620      	mov	r0, r4
   b64ac:	f7ff ffe4 	bl	b6478 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   b64b0:	b120      	cbz	r0, b64bc <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   b64b2:	a801      	add	r0, sp, #4
   b64b4:	f7ff fe4c 	bl	b6150 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   b64b8:	b006      	add	sp, #24
   b64ba:	bd10      	pop	{r4, pc}
		return 0;
   b64bc:	2000      	movs	r0, #0
   b64be:	4601      	mov	r1, r0
   b64c0:	e7fa      	b.n	b64b8 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
	...

000b64c4 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   b64c4:	b570      	push	{r4, r5, r6, lr}
   b64c6:	4604      	mov	r4, r0
   b64c8:	b086      	sub	sp, #24
	wire.begin();
   b64ca:	6840      	ldr	r0, [r0, #4]
   b64cc:	f001 fcec 	bl	b7ea8 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   b64d0:	f002 f90e 	bl	b86f0 <_ZN9TimeClass7isValidEv>
   b64d4:	b9e8      	cbnz	r0, b6512 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   b64d6:	7ae3      	ldrb	r3, [r4, #11]
   b64d8:	079b      	lsls	r3, r3, #30
   b64da:	d51a      	bpl.n	b6512 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   b64dc:	4620      	mov	r0, r4
   b64de:	f7ff ffdd 	bl	b649c <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   b64e2:	ea50 0301 	orrs.w	r3, r0, r1
			time_t rtcTime = getRTCTime();
   b64e6:	4606      	mov	r6, r0
   b64e8:	460d      	mov	r5, r1
			if (rtcTime != 0) {
   b64ea:	d012      	beq.n	b6512 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   b64ec:	f002 f805 	bl	b84fa <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   b64f0:	4b0a      	ldr	r3, [pc, #40]	; (b651c <_ZN8MCP794105setupEv+0x58>)
   b64f2:	490b      	ldr	r1, [pc, #44]	; (b6520 <_ZN8MCP794105setupEv+0x5c>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	9300      	str	r3, [sp, #0]
   b64f8:	4632      	mov	r2, r6
   b64fa:	462b      	mov	r3, r5
   b64fc:	a802      	add	r0, sp, #8
   b64fe:	f002 f8b5 	bl	b866c <_ZN9TimeClass6formatExPKc>
   b6502:	4808      	ldr	r0, [pc, #32]	; (b6524 <_ZN8MCP794105setupEv+0x60>)
   b6504:	9a02      	ldr	r2, [sp, #8]
   b6506:	4908      	ldr	r1, [pc, #32]	; (b6528 <_ZN8MCP794105setupEv+0x64>)
   b6508:	f7ff fc32 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
   b650c:	a802      	add	r0, sp, #8
   b650e:	f001 fed5 	bl	b82bc <_ZN6StringD1Ev>
	setupDone = true;
   b6512:	2301      	movs	r3, #1
   b6514:	7223      	strb	r3, [r4, #8]
}
   b6516:	b006      	add	sp, #24
   b6518:	bd70      	pop	{r4, r5, r6, pc}
   b651a:	bf00      	nop
   b651c:	2003e2c8 	.word	0x2003e2c8
   b6520:	2003e6bc 	.word	0x2003e6bc
   b6524:	2003e64c 	.word	0x2003e64c
   b6528:	000bb38a 	.word	0x000bb38a

000b652c <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b652c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6530:	4606      	mov	r6, r0
   b6532:	4688      	mov	r8, r1
   b6534:	4691      	mov	r9, r2
   b6536:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   b6538:	2500      	movs	r5, #0

	while(offset < bufLen) {
   b653a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b653c:	429d      	cmp	r5, r3
   b653e:	d229      	bcs.n	b6594 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   b6540:	6870      	ldr	r0, [r6, #4]
   b6542:	4641      	mov	r1, r8
   b6544:	f001 fce2 	bl	b7f0c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b6548:	6870      	ldr	r0, [r6, #4]
   b654a:	eb09 0105 	add.w	r1, r9, r5
   b654e:	f7ff fda5 	bl	b609c <_ZN7TwoWire5writeEj.isra.0>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   b6552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6554:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   b6556:	2f1f      	cmp	r7, #31
   b6558:	bf28      	it	cs
   b655a:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   b655c:	eb0a 0405 	add.w	r4, sl, r5
   b6560:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   b6564:	6870      	ldr	r0, [r6, #4]
   b6566:	f814 1b01 	ldrb.w	r1, [r4], #1
   b656a:	6802      	ldr	r2, [r0, #0]
   b656c:	6892      	ldr	r2, [r2, #8]
   b656e:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   b6570:	45a3      	cmp	fp, r4
   b6572:	d1f7      	bne.n	b6564 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   b6574:	6870      	ldr	r0, [r6, #4]
   b6576:	2101      	movs	r1, #1
   b6578:	f001 fccf 	bl	b7f1a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b657c:	4604      	mov	r4, r0
   b657e:	b138      	cbz	r0, b6590 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   b6580:	4602      	mov	r2, r0
   b6582:	4905      	ldr	r1, [pc, #20]	; (b6598 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   b6584:	4805      	ldr	r0, [pc, #20]	; (b659c <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   b6586:	f7ff fbf3 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   b658a:	4620      	mov	r0, r4
   b658c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   b6590:	443d      	add	r5, r7
	while(offset < bufLen) {
   b6592:	e7d2      	b.n	b653a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   b6594:	2400      	movs	r4, #0
	return stat;
   b6596:	e7f8      	b.n	b658a <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   b6598:	000bb39f 	.word	0x000bb39f
   b659c:	2003e64c 	.word	0x2003e64c

000b65a0 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   b65a4:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65a8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b65aa:	6803      	ldr	r3, [r0, #0]
   b65ac:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b65ae:	4605      	mov	r5, r0
   b65b0:	460c      	mov	r4, r1
   b65b2:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   b65b4:	4798      	blx	r3
   b65b6:	4580      	cmp	r8, r0
   b65b8:	d80d      	bhi.n	b65d6 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   b65ba:	3420      	adds	r4, #32
   b65bc:	6868      	ldr	r0, [r5, #4]
   b65be:	9600      	str	r6, [sp, #0]
   b65c0:	463b      	mov	r3, r7
   b65c2:	b2e2      	uxtb	r2, r4
   b65c4:	216f      	movs	r1, #111	; 0x6f
   b65c6:	f7ff ffb1 	bl	b652c <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   b65ca:	fab0 f080 	clz	r0, r0
   b65ce:	0940      	lsrs	r0, r0, #5
}
   b65d0:	b002      	add	sp, #8
   b65d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   b65d6:	2000      	movs	r0, #0
   b65d8:	e7fa      	b.n	b65d0 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000b65da <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   b65da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   b65dc:	7c13      	ldrb	r3, [r2, #16]
   b65de:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   b65e2:	7bd3      	ldrb	r3, [r2, #15]
   b65e4:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   b65e8:	7b93      	ldrb	r3, [r2, #14]
   b65ea:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   b65ee:	7b53      	ldrb	r3, [r2, #13]
   b65f0:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   b65f4:	7b13      	ldrb	r3, [r2, #12]
   b65f6:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   b65fa:	7ad3      	ldrb	r3, [r2, #11]
   b65fc:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   b6600:	7a93      	ldrb	r3, [r2, #10]
   b6602:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   b6606:	2307      	movs	r3, #7
   b6608:	9300      	str	r3, [sp, #0]
   b660a:	460a      	mov	r2, r1
   b660c:	ab02      	add	r3, sp, #8
   b660e:	216f      	movs	r1, #111	; 0x6f
   b6610:	f7ff ff8c 	bl	b652c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b6614:	b005      	add	sp, #20
   b6616:	f85d fb04 	ldr.w	pc, [sp], #4

000b661a <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   b661a:	b510      	push	{r4, lr}
   b661c:	b088      	sub	sp, #32
   b661e:	4604      	mov	r4, r0
	MCP79410Time time;
   b6620:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   b6622:	e9cd 3200 	strd	r3, r2, [sp]
	MCP79410Time time;
   b6626:	f7ff fd47 	bl	b60b8 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   b662a:	e9dd 3200 	ldrd	r3, r2, [sp]
   b662e:	a803      	add	r0, sp, #12
   b6630:	f7ff fe05 	bl	b623e <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b6634:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   b6638:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   b663a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b663e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   b6642:	f89d 3019 	ldrb.w	r3, [sp, #25]
   b6646:	b16a      	cbz	r2, b6664 <_ZN8MCP7941010setRTCTimeEx+0x4a>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   b6648:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   b664c:	aa03      	add	r2, sp, #12
   b664e:	2100      	movs	r1, #0
   b6650:	4620      	mov	r0, r4
   b6652:	f88d 3019 	strb.w	r3, [sp, #25]
   b6656:	f7ff ffc0 	bl	b65da <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   b665a:	fab0 f080 	clz	r0, r0
   b665e:	0940      	lsrs	r0, r0, #5
   b6660:	b008      	add	sp, #32
   b6662:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   b6664:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   b6668:	e7f0      	b.n	b664c <_ZN8MCP7941010setRTCTimeEx+0x32>
	...

000b666c <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   b666c:	b530      	push	{r4, r5, lr}
   b666e:	b089      	sub	sp, #36	; 0x24
   b6670:	4605      	mov	r5, r0
	if (Time.isValid()) {
   b6672:	f002 f83d 	bl	b86f0 <_ZN9TimeClass7isValidEv>
   b6676:	4604      	mov	r4, r0
   b6678:	b1e8      	cbz	r0, b66b6 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   b667a:	f002 f856 	bl	b872a <_ZN9TimeClass3nowEv>
   b667e:	17c3      	asrs	r3, r0, #31
		bResult = setRTCTime(now);
   b6680:	e9cd 3002 	strd	r3, r0, [sp, #8]
		time_t now = Time.now();
   b6684:	4602      	mov	r2, r0
		bResult = setRTCTime(now);
   b6686:	4628      	mov	r0, r5
   b6688:	f7ff ffc7 	bl	b661a <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b668c:	490c      	ldr	r1, [pc, #48]	; (b66c0 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   b668e:	6809      	ldr	r1, [r1, #0]
   b6690:	9100      	str	r1, [sp, #0]
   b6692:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b6696:	490b      	ldr	r1, [pc, #44]	; (b66c4 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
		bResult = setRTCTime(now);
   b6698:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   b669a:	a804      	add	r0, sp, #16
   b669c:	f001 ffe6 	bl	b866c <_ZN9TimeClass6formatExPKc>
   b66a0:	4809      	ldr	r0, [pc, #36]	; (b66c8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b66a2:	9a04      	ldr	r2, [sp, #16]
   b66a4:	4909      	ldr	r1, [pc, #36]	; (b66cc <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   b66a6:	f7ff fb63 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
   b66aa:	a804      	add	r0, sp, #16
   b66ac:	f001 fe06 	bl	b82bc <_ZN6StringD1Ev>
}
   b66b0:	4620      	mov	r0, r4
   b66b2:	b009      	add	sp, #36	; 0x24
   b66b4:	bd30      	pop	{r4, r5, pc}
		log.info("cloud time not valid");
   b66b6:	4906      	ldr	r1, [pc, #24]	; (b66d0 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   b66b8:	4803      	ldr	r0, [pc, #12]	; (b66c8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   b66ba:	f7ff fb59 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
   b66be:	e7f7      	b.n	b66b0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   b66c0:	2003e2c8 	.word	0x2003e2c8
   b66c4:	2003e6bc 	.word	0x2003e6bc
   b66c8:	2003e64c 	.word	0x2003e64c
   b66cc:	000bb3ba 	.word	0x000bb3ba
   b66d0:	000bb3d0 	.word	0x000bb3d0

000b66d4 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   b66d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   b66d6:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   b66d8:	4604      	mov	r4, r0
	if (!timeSet) {
   b66da:	b99d      	cbnz	r5, b6704 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   b66dc:	f002 f808 	bl	b86f0 <_ZN9TimeClass7isValidEv>
   b66e0:	b180      	cbz	r0, b6704 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   b66e2:	2200      	movs	r2, #0
   b66e4:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   b66e6:	4669      	mov	r1, sp
   b66e8:	4628      	mov	r0, r5
        tm = 0;
   b66ea:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   b66ee:	f000 ff13 	bl	b7518 <spark_sync_time_last>
			if (lastSync != 0) {
   b66f2:	b138      	cbz	r0, b6704 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   b66f4:	7ae3      	ldrb	r3, [r4, #11]
   b66f6:	07db      	lsls	r3, r3, #31
   b66f8:	d502      	bpl.n	b6700 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   b66fa:	4620      	mov	r0, r4
   b66fc:	f7ff ffb6 	bl	b666c <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   b6700:	2301      	movs	r3, #1
   b6702:	7263      	strb	r3, [r4, #9]
}
   b6704:	b003      	add	sp, #12
   b6706:	bd30      	pop	{r4, r5, pc}

000b6708 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   b6708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b670a:	2301      	movs	r3, #1
	buf[0] = value;
   b670c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   b6710:	9300      	str	r3, [sp, #0]
   b6712:	460a      	mov	r2, r1
   b6714:	ab03      	add	r3, sp, #12
   b6716:	216f      	movs	r1, #111	; 0x6f
   b6718:	f7ff ff08 	bl	b652c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   b671c:	b005      	add	sp, #20
   b671e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6722 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   b6722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6724:	4617      	mov	r7, r2
   b6726:	4604      	mov	r4, r0
   b6728:	460d      	mov	r5, r1
   b672a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   b672c:	f7ff fe8d 	bl	b644a <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   b6730:	4038      	ands	r0, r7
	return deviceWriteRegisterByte(addr, value);
   b6732:	ea40 0206 	orr.w	r2, r0, r6
   b6736:	4629      	mov	r1, r5
   b6738:	4620      	mov	r0, r4
}
   b673a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   b673e:	f7ff bfe3 	b.w	b6708 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000b6742 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   b6742:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   b6744:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   b6746:	d80d      	bhi.n	b6764 <_ZN8MCP7941010clearAlarmEi+0x22>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   b6748:	2900      	cmp	r1, #0
   b674a:	bf0c      	ite	eq
   b674c:	2210      	moveq	r2, #16
   b674e:	2220      	movne	r2, #32
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   b6750:	2300      	movs	r3, #0
   b6752:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
   b6756:	2107      	movs	r1, #7
   b6758:	f7ff ffe3 	bl	b6722 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   b675c:	fab0 f080 	clz	r0, r0
   b6760:	0940      	lsrs	r0, r0, #5
}
   b6762:	bd08      	pop	{r3, pc}
		return false;
   b6764:	2000      	movs	r0, #0
   b6766:	e7fc      	b.n	b6762 <_ZN8MCP7941010clearAlarmEi+0x20>

000b6768 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   b6768:	b538      	push	{r3, r4, r5, lr}
   b676a:	4604      	mov	r4, r0
   b676c:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b676e:	6860      	ldr	r0, [r4, #4]
   b6770:	2157      	movs	r1, #87	; 0x57
   b6772:	f001 fbcb 	bl	b7f0c <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   b6776:	6860      	ldr	r0, [r4, #4]
   b6778:	2101      	movs	r1, #1
   b677a:	f001 fbce 	bl	b7f1a <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   b677e:	b108      	cbz	r0, b6784 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   b6780:	3d01      	subs	r5, #1
   b6782:	d1f4      	bne.n	b676e <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   b6784:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6788 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   b6788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b678c:	4604      	mov	r4, r0
   b678e:	460f      	mov	r7, r1
   b6790:	4616      	mov	r6, r2
   b6792:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   b6796:	45b0      	cmp	r8, r6
   b6798:	d020      	beq.n	b67dc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   b679a:	6860      	ldr	r0, [r4, #4]
   b679c:	2157      	movs	r1, #87	; 0x57
   b679e:	f001 fbb5 	bl	b7f0c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   b67a2:	4639      	mov	r1, r7
   b67a4:	6860      	ldr	r0, [r4, #4]
   b67a6:	f7ff fc79 	bl	b609c <_ZN7TwoWire5writeEj.isra.0>
			wire.write(buf[ii + offset]);
   b67aa:	6860      	ldr	r0, [r4, #4]
   b67ac:	f816 1b01 	ldrb.w	r1, [r6], #1
   b67b0:	6803      	ldr	r3, [r0, #0]
   b67b2:	689b      	ldr	r3, [r3, #8]
   b67b4:	4798      	blx	r3
		stat = wire.endTransmission(true);
   b67b6:	6860      	ldr	r0, [r4, #4]
   b67b8:	2101      	movs	r1, #1
   b67ba:	f001 fbae 	bl	b7f1a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   b67be:	3701      	adds	r7, #1
   b67c0:	4605      	mov	r5, r0
   b67c2:	b138      	cbz	r0, b67d4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   b67c4:	4602      	mov	r2, r0
   b67c6:	4906      	ldr	r1, [pc, #24]	; (b67e0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   b67c8:	4806      	ldr	r0, [pc, #24]	; (b67e4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   b67ca:	f7ff fad1 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
}
   b67ce:	4628      	mov	r0, r5
   b67d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   b67d4:	4620      	mov	r0, r4
   b67d6:	f7ff ffc7 	bl	b6768 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   b67da:	e7dc      	b.n	b6796 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   b67dc:	2500      	movs	r5, #0
	return stat;
   b67de:	e7f6      	b.n	b67ce <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   b67e0:	000bb3e5 	.word	0x000bb3e5
   b67e4:	2003e64c 	.word	0x2003e64c

000b67e8 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b67e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   b67ea:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b67ec:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   b67ee:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b67f0:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   b67f2:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   b67f4:	4604      	mov	r4, r0
   b67f6:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   b67f8:	4798      	blx	r3
   b67fa:	4287      	cmp	r7, r0
   b67fc:	d80a      	bhi.n	b6814 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   b67fe:	9a01      	ldr	r2, [sp, #4]
   b6800:	6860      	ldr	r0, [r4, #4]
   b6802:	4633      	mov	r3, r6
   b6804:	b2e9      	uxtb	r1, r5
   b6806:	f7ff ffbf 	bl	b6788 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   b680a:	fab0 f080 	clz	r0, r0
   b680e:	0940      	lsrs	r0, r0, #5
}
   b6810:	b003      	add	sp, #12
   b6812:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   b6814:	2000      	movs	r0, #0
   b6816:	e7fb      	b.n	b6810 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000b6818 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   b6818:	4b01      	ldr	r3, [pc, #4]	; (b6820 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   b681a:	4a02      	ldr	r2, [pc, #8]	; (b6824 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   b681c:	601a      	str	r2, [r3, #0]
}
   b681e:	4770      	bx	lr
   b6820:	2003e64c 	.word	0x2003e64c
   b6824:	000bb406 	.word	0x000bb406

000b6828 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b6828:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b682a:	2301      	movs	r3, #1
   b682c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b682e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b6830:	4604      	mov	r4, r0
        if (th->func) {
   b6832:	b143      	cbz	r3, b6846 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b6834:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6836:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b6838:	2301      	movs	r3, #1
   b683a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b683c:	2000      	movs	r0, #0
    }
   b683e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b6842:	f000 bc21 	b.w	b7088 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6846:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b6848:	2800      	cmp	r0, #0
   b684a:	d0f5      	beq.n	b6838 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b684c:	6883      	ldr	r3, [r0, #8]
   b684e:	b90b      	cbnz	r3, b6854 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b6850:	f002 fa22 	bl	b8c98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6854:	68c3      	ldr	r3, [r0, #12]
   b6856:	e7ee      	b.n	b6836 <_ZN6Thread3runEPv+0xe>

000b6858 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6858:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   b685a:	6842      	ldr	r2, [r0, #4]
   b685c:	4603      	mov	r3, r0
   b685e:	1054      	asrs	r4, r2, #1
   b6860:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b6864:	07d2      	lsls	r2, r2, #31
   b6866:	bf48      	it	mi
   b6868:	590a      	ldrmi	r2, [r1, r4]
   b686a:	681b      	ldr	r3, [r3, #0]
      }
   b686c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6870:	bf48      	it	mi
   b6872:	58d3      	ldrmi	r3, [r2, r3]
   b6874:	4718      	bx	r3

000b6876 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   b6876:	2a01      	cmp	r2, #1
   b6878:	d102      	bne.n	b6880 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b687a:	6001      	str	r1, [r0, #0]
      }
   b687c:	2000      	movs	r0, #0
   b687e:	4770      	bx	lr
	  switch (__op)
   b6880:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6882:	bf04      	itt	eq
   b6884:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   b6888:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   b688c:	e7f6      	b.n	b687c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	...

000b6890 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   b6890:	b510      	push	{r4, lr}
   b6892:	4603      	mov	r3, r0
   b6894:	e9d1 0200 	ldrd	r0, r2, [r1]
   b6898:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   b689a:	2100      	movs	r1, #0
   b689c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   b689e:	b908      	cbnz	r0, b68a4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x14>
   b68a0:	07d1      	lsls	r1, r2, #31
   b68a2:	d505      	bpl.n	b68b0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b68a4:	e9cd 0202 	strd	r0, r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   b68a8:	4a0f      	ldr	r2, [pc, #60]	; (b68e8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x58>)
   b68aa:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   b68ac:	4a0f      	ldr	r2, [pc, #60]	; (b68ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x5c>)
   b68ae:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68b0:	aa02      	add	r2, sp, #8
   b68b2:	e892 0003 	ldmia.w	r2, {r0, r1}
   b68b6:	466c      	mov	r4, sp
   b68b8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b68bc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b68c0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b68c4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b68c8:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68cc:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b68ce:	6898      	ldr	r0, [r3, #8]
   b68d0:	9004      	str	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b68d2:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
   b68d4:	68d8      	ldr	r0, [r3, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68d6:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b68d8:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
   b68da:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
   b68dc:	4610      	mov	r0, r2
   b68de:	f7fe fa3f 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
	}
   b68e2:	b006      	add	sp, #24
   b68e4:	bd10      	pop	{r4, pc}
   b68e6:	bf00      	nop
   b68e8:	000b6859 	.word	0x000b6859
   b68ec:	000b6877 	.word	0x000b6877

000b68f0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   b68f0:	b513      	push	{r0, r1, r4, lr}
   b68f2:	4604      	mov	r4, r0
   b68f4:	f000 fbf8 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   b68f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b68fa:	1ac0      	subs	r0, r0, r3
   b68fc:	68e3      	ldr	r3, [r4, #12]
   b68fe:	4298      	cmp	r0, r3
   b6900:	d308      	bcc.n	b6914 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b6902:	4b05      	ldr	r3, [pc, #20]	; (b6918 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   b6904:	9300      	str	r3, [sp, #0]
   b6906:	4669      	mov	r1, sp
   b6908:	2300      	movs	r3, #0
   b690a:	f104 0010 	add.w	r0, r4, #16
   b690e:	9301      	str	r3, [sp, #4]
   b6910:	f7ff ffbe 	bl	b6890 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
	}
}
   b6914:	b002      	add	sp, #8
   b6916:	bd10      	pop	{r4, pc}
   b6918:	000b69f9 	.word	0x000b69f9

000b691c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   b691c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   b691e:	4b05      	ldr	r3, [pc, #20]	; (b6934 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   b6920:	9300      	str	r3, [sp, #0]
   b6922:	4669      	mov	r1, sp
   b6924:	2300      	movs	r3, #0
   b6926:	3010      	adds	r0, #16
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	f7ff ffb1 	bl	b6890 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   b692e:	b003      	add	sp, #12
   b6930:	f85d fb04 	ldr.w	pc, [sp], #4
   b6934:	000b69f9 	.word	0x000b69f9

000b6938 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b6938:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b693c:	4604      	mov	r4, r0
   b693e:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
   b6940:	2014      	movs	r0, #20
   b6942:	491c      	ldr	r1, [pc, #112]	; (b69b4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x7c>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
   b6944:	4690      	mov	r8, r2
   b6946:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
   b6948:	f002 f9a2 	bl	b8c90 <_ZnwjRKSt9nothrow_t>
   b694c:	b130      	cbz	r0, b695c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   b694e:	2500      	movs	r5, #0
            exited(false) {
   b6950:	e9c0 5500 	strd	r5, r5, [r0]
   b6954:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6958:	7405      	strb	r5, [r0, #16]
   b695a:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b695c:	6020      	str	r0, [r4, #0]
        if (!d_) {
   b695e:	b198      	cbz	r0, b6988 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b6960:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6962:	f89d 2020 	ldrb.w	r2, [sp, #32]
        d_->func_param = function_param;
   b6966:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b696a:	4631      	mov	r1, r6
   b696c:	e9cd 0300 	strd	r0, r3, [sp]
   b6970:	4b11      	ldr	r3, [pc, #68]	; (b69b8 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x80>)
   b6972:	3004      	adds	r0, #4
   b6974:	f000 fb30 	bl	b6fd8 <os_thread_create>
   b6978:	b930      	cbnz	r0, b6988 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b697a:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   b697c:	7c1b      	ldrb	r3, [r3, #16]
   b697e:	b9a3      	cbnz	r3, b69aa <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
            HAL_Delay_Milliseconds(1);
   b6980:	2001      	movs	r0, #1
   b6982:	f000 fba1 	bl	b70c8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b6986:	e7f8      	b.n	b697a <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   b6988:	6825      	ldr	r5, [r4, #0]
	_M_ptr() = __p;
   b698a:	2300      	movs	r3, #0
   b698c:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b698e:	b165      	cbz	r5, b69aa <_ZN6ThreadC1EPKcPFvPvES2_hj+0x72>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b6990:	682e      	ldr	r6, [r5, #0]
   b6992:	b136      	cbz	r6, b69a2 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x6a>
    class function<_Res(_ArgTypes...)>
   b6994:	4630      	mov	r0, r6
   b6996:	f7fe f9e3 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b699a:	2110      	movs	r1, #16
   b699c:	4630      	mov	r0, r6
   b699e:	f7fe f88c 	bl	b4aba <_ZdlPvj>
   b69a2:	2114      	movs	r1, #20
   b69a4:	4628      	mov	r0, r5
   b69a6:	f7fe f888 	bl	b4aba <_ZdlPvj>
    }
   b69aa:	4620      	mov	r0, r4
   b69ac:	b002      	add	sp, #8
   b69ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b69b2:	bf00      	nop
   b69b4:	000bb720 	.word	0x000bb720
   b69b8:	000b6829 	.word	0x000b6829

000b69bc <_ZN21PublishQueueAsyncBase5setupEv>:
	haveSetup = true;
   b69bc:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   b69be:	b537      	push	{r0, r1, r2, r4, r5, lr}
	haveSetup = true;
   b69c0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   b69c4:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b69c6:	3008      	adds	r0, #8
   b69c8:	f000 fb3e 	bl	b7048 <os_mutex_create>
	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   b69cc:	2004      	movs	r0, #4
   b69ce:	f7fe f870 	bl	b4ab2 <_Znwj>
   b69d2:	4605      	mov	r5, r0
   b69d4:	b148      	cbz	r0, b69ea <_ZN21PublishQueueAsyncBase5setupEv+0x2e>
   b69d6:	2302      	movs	r3, #2
   b69d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b69dc:	e9cd 3200 	strd	r3, r2, [sp]
   b69e0:	4903      	ldr	r1, [pc, #12]	; (b69f0 <_ZN21PublishQueueAsyncBase5setupEv+0x34>)
   b69e2:	4a04      	ldr	r2, [pc, #16]	; (b69f4 <_ZN21PublishQueueAsyncBase5setupEv+0x38>)
   b69e4:	4623      	mov	r3, r4
   b69e6:	f7ff ffa7 	bl	b6938 <_ZN6ThreadC1EPKcPFvPvES2_hj>
   b69ea:	6065      	str	r5, [r4, #4]
}
   b69ec:	b003      	add	sp, #12
   b69ee:	bd30      	pop	{r4, r5, pc}
   b69f0:	000bb478 	.word	0x000bb478
   b69f4:	000b6d13 	.word	0x000b6d13

000b69f8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   b69f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b69fc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   b6a00:	b086      	sub	sp, #24
   b6a02:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   b6a04:	2b00      	cmp	r3, #0
   b6a06:	d164      	bne.n	b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6a08:	f000 fd56 	bl	b74b8 <spark_cloud_flag_connected>
   b6a0c:	2800      	cmp	r0, #0
   b6a0e:	d060      	beq.n	b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   b6a10:	f000 fb6a 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
   b6a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6a16:	1ac0      	subs	r0, r0, r3
   b6a18:	f240 33f1 	movw	r3, #1009	; 0x3f1
   b6a1c:	4298      	cmp	r0, r3
   b6a1e:	d958      	bls.n	b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   b6a20:	6823      	ldr	r3, [r4, #0]
   b6a22:	4620      	mov	r0, r4
   b6a24:	695b      	ldr	r3, [r3, #20]
   b6a26:	4798      	blx	r3
		if (data) {
   b6a28:	4605      	mov	r5, r0
   b6a2a:	2800      	cmp	r0, #0
   b6a2c:	d051      	beq.n	b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   b6a2e:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   b6a32:	2301      	movs	r3, #1
   b6a34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   b6a38:	4638      	mov	r0, r7
   b6a3a:	f7fd ffdf 	bl	b49fc <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   b6a3e:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b6a42:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   b6a46:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b6a48:	682b      	ldr	r3, [r5, #0]
   b6a4a:	492b      	ldr	r1, [pc, #172]	; (b6af8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   b6a4c:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   b6a4e:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   b6a50:	4633      	mov	r3, r6
   b6a52:	482a      	ldr	r0, [pc, #168]	; (b6afc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6a54:	463a      	mov	r2, r7
   b6a56:	f7ff f98b 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   b6a5a:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6a5c:	f88d 8000 	strb.w	r8, [sp]
   b6a60:	4632      	mov	r2, r6
   b6a62:	4639      	mov	r1, r7
   b6a64:	a802      	add	r0, sp, #8
   b6a66:	f001 f82b 	bl	b7ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b6a6a:	9d02      	ldr	r5, [sp, #8]
   b6a6c:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   b6a6e:	b91b      	cbnz	r3, b6a78 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   b6a70:	2001      	movs	r0, #1
   b6a72:	f000 fe39 	bl	b76e8 <delay>
			while(!request.isDone()) {
   b6a76:	e7f8      	b.n	b6a6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b6a78:	2000      	movs	r0, #0
   b6a7a:	f000 fcc7 	bl	b740c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6a7e:	b120      	cbz	r0, b6a8a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   b6a80:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b6a82:	b913      	cbnz	r3, b6a8a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   b6a84:	f000 fd10 	bl	b74a8 <spark_process>
    }
   b6a88:	e7fa      	b.n	b6a80 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6a8a:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   b6a8c:	2b01      	cmp	r3, #1
   b6a8e:	d123      	bne.n	b6ad8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   b6a90:	491b      	ldr	r1, [pc, #108]	; (b6b00 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   b6a92:	481a      	ldr	r0, [pc, #104]	; (b6afc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6a94:	f7ff f96c 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   b6a98:	6823      	ldr	r3, [r4, #0]
   b6a9a:	2100      	movs	r1, #0
   b6a9c:	699b      	ldr	r3, [r3, #24]
   b6a9e:	4620      	mov	r0, r4
   b6aa0:	4798      	blx	r3
			isSending = false;
   b6aa2:	2300      	movs	r3, #0
   b6aa4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   b6aa8:	f000 fb1e 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   b6aac:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   b6aae:	9c03      	ldr	r4, [sp, #12]
   b6ab0:	b17c      	cbz	r4, b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   b6ab2:	6863      	ldr	r3, [r4, #4]
   b6ab4:	3b01      	subs	r3, #1
   b6ab6:	6063      	str	r3, [r4, #4]
   b6ab8:	b95b      	cbnz	r3, b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   b6aba:	6823      	ldr	r3, [r4, #0]
   b6abc:	4620      	mov	r0, r4
   b6abe:	689b      	ldr	r3, [r3, #8]
   b6ac0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6ac2:	68a3      	ldr	r3, [r4, #8]
   b6ac4:	3b01      	subs	r3, #1
   b6ac6:	60a3      	str	r3, [r4, #8]
   b6ac8:	b91b      	cbnz	r3, b6ad2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   b6aca:	6823      	ldr	r3, [r4, #0]
   b6acc:	4620      	mov	r0, r4
   b6ace:	68db      	ldr	r3, [r3, #12]
   b6ad0:	4798      	blx	r3
}
   b6ad2:	b006      	add	sp, #24
   b6ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   b6ad8:	68e2      	ldr	r2, [r4, #12]
   b6ada:	490a      	ldr	r1, [pc, #40]	; (b6b04 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   b6adc:	4807      	ldr	r0, [pc, #28]	; (b6afc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   b6ade:	f7ff f947 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   b6ae2:	4b09      	ldr	r3, [pc, #36]	; (b6b08 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   b6ae4:	9304      	str	r3, [sp, #16]
   b6ae6:	a904      	add	r1, sp, #16
   b6ae8:	2300      	movs	r3, #0
   b6aea:	f104 0010 	add.w	r0, r4, #16
   b6aee:	9305      	str	r3, [sp, #20]
   b6af0:	f7ff fece 	bl	b6890 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   b6af4:	e7d5      	b.n	b6aa2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   b6af6:	bf00      	nop
   b6af8:	000bb48a 	.word	0x000bb48a
   b6afc:	2003e650 	.word	0x2003e650
   b6b00:	000bb4ab 	.word	0x000bb4ab
   b6b04:	000bb4c2 	.word	0x000bb4c2
   b6b08:	000b68f1 	.word	0x000b68f1

000b6b0c <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   b6b0c:	f247 5130 	movw	r1, #30000	; 0x7530
   b6b10:	4a08      	ldr	r2, [pc, #32]	; (b6b34 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   b6b12:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6b14:	4908      	ldr	r1, [pc, #32]	; (b6b38 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   b6b16:	6002      	str	r2, [r0, #0]
   b6b18:	2200      	movs	r2, #0
   b6b1a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b1e:	4907      	ldr	r1, [pc, #28]	; (b6b3c <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   b6b20:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   b6b22:	4907      	ldr	r1, [pc, #28]	; (b6b40 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   b6b24:	6042      	str	r2, [r0, #4]
   b6b26:	e9c0 2208 	strd	r2, r2, [r0, #32]
   b6b2a:	6181      	str	r1, [r0, #24]
   b6b2c:	8502      	strh	r2, [r0, #40]	; 0x28
   b6b2e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   b6b32:	4770      	bx	lr
   b6b34:	000bb53c 	.word	0x000bb53c
   b6b38:	000b691d 	.word	0x000b691d
   b6b3c:	000b6859 	.word	0x000b6859
   b6b40:	000b6877 	.word	0x000b6877

000b6b44 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   b6b44:	b510      	push	{r4, lr}
   b6b46:	4b04      	ldr	r3, [pc, #16]	; (b6b58 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   b6b48:	4604      	mov	r4, r0
   b6b4a:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   b6b4e:	f7fe f907 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
}
   b6b52:	4620      	mov	r0, r4
   b6b54:	bd10      	pop	{r4, pc}
   b6b56:	bf00      	nop
   b6b58:	000bb53c 	.word	0x000bb53c

000b6b5c <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b6b5c:	b510      	push	{r4, lr}
   b6b5e:	4b03      	ldr	r3, [pc, #12]	; (b6b6c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   b6b60:	6003      	str	r3, [r0, #0]
   b6b62:	4604      	mov	r4, r0
   b6b64:	f7ff ffee 	bl	b6b44 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   b6b68:	4620      	mov	r0, r4
   b6b6a:	bd10      	pop	{r4, pc}
   b6b6c:	000bb564 	.word	0x000bb564

000b6b70 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   b6b70:	b510      	push	{r4, lr}
   b6b72:	4604      	mov	r4, r0
}
   b6b74:	f7ff fff2 	bl	b6b5c <_ZN25PublishQueueAsyncRetainedD1Ev>
   b6b78:	4620      	mov	r0, r4
   b6b7a:	2138      	movs	r1, #56	; 0x38
   b6b7c:	f7fd ff9d 	bl	b4aba <_ZdlPvj>
   b6b80:	4620      	mov	r0, r4
   b6b82:	bd10      	pop	{r4, pc}

000b6b84 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   b6b84:	6880      	ldr	r0, [r0, #8]
   b6b86:	f000 ba67 	b.w	b7058 <os_mutex_lock>

000b6b8a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   b6b8a:	6880      	ldr	r0, [r0, #8]
   b6b8c:	f000 ba6c 	b.w	b7068 <os_mutex_unlock>

000b6b90 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   b6b90:	b510      	push	{r4, lr}
   b6b92:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   b6b94:	6800      	ldr	r0, [r0, #0]
   b6b96:	f7ff fff8 	bl	b6b8a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   b6b9a:	4620      	mov	r0, r4
   b6b9c:	bd10      	pop	{r4, pc}

000b6b9e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   b6b9e:	b513      	push	{r0, r1, r4, lr}
   b6ba0:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6ba2:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6ba4:	f7ff ffee 	bl	b6b84 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6ba8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   b6baa:	88dc      	ldrh	r4, [r3, #6]
   b6bac:	b2a4      	uxth	r4, r4
   b6bae:	b10c      	cbz	r4, b6bb4 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   b6bb0:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   b6bb4:	a801      	add	r0, sp, #4
   b6bb6:	f7ff ffeb 	bl	b6b90 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   b6bba:	4620      	mov	r0, r4
   b6bbc:	b002      	add	sp, #8
   b6bbe:	bd10      	pop	{r4, pc}

000b6bc0 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   b6bc0:	b513      	push	{r0, r1, r4, lr}
   b6bc2:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6bc4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6bc6:	f7ff ffdd 	bl	b6b84 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   b6bca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b6bce:	b943      	cbnz	r3, b6be2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6bd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   b6bd2:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   b6bd4:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   b6bd6:	a801      	add	r0, sp, #4
   b6bd8:	f7ff ffda 	bl	b6b90 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   b6bdc:	4620      	mov	r0, r4
   b6bde:	b002      	add	sp, #8
   b6be0:	bd10      	pop	{r4, pc}
	bool result = false;
   b6be2:	2400      	movs	r4, #0
   b6be4:	e7f7      	b.n	b6bd6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000b6be6 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   b6be6:	b513      	push	{r0, r1, r4, lr}
   b6be8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6bea:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6bec:	f7ff ffca 	bl	b6b84 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   b6bf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   b6bf2:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   b6bf4:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   b6bf6:	f7ff ffcb 	bl	b6b90 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	b002      	add	sp, #8
   b6bfe:	bd10      	pop	{r4, pc}

000b6c00 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b6c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6c04:	4699      	mov	r9, r3
   b6c06:	b086      	sub	sp, #24
	if (!haveSetup) {
   b6c08:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b6c0c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   b6c10:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   b6c14:	4604      	mov	r4, r0
   b6c16:	460f      	mov	r7, r1
   b6c18:	4616      	mov	r6, r2
	if (!haveSetup) {
   b6c1a:	b913      	cbnz	r3, b6c22 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   b6c1c:	6803      	ldr	r3, [r0, #0]
   b6c1e:	689b      	ldr	r3, [r3, #8]
   b6c20:	4798      	blx	r3
		data = "";
   b6c22:	4b31      	ldr	r3, [pc, #196]	; (b6ce8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6c24:	4638      	mov	r0, r7
		data = "";
   b6c26:	2e00      	cmp	r6, #0
   b6c28:	bf08      	it	eq
   b6c2a:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   b6c2c:	f7fd fee6 	bl	b49fc <strlen>
   b6c30:	4605      	mov	r5, r0
   b6c32:	4630      	mov	r0, r6
   b6c34:	f7fd fee2 	bl	b49fc <strlen>
   b6c38:	4428      	add	r0, r5
   b6c3a:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   b6c3e:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   b6c40:	bf1c      	itt	ne
   b6c42:	f025 0503 	bicne.w	r5, r5, #3
   b6c46:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   b6c48:	4633      	mov	r3, r6
   b6c4a:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6c4e:	e9cd 9a00 	strd	r9, sl, [sp]
   b6c52:	4926      	ldr	r1, [pc, #152]	; (b6cec <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   b6c54:	4826      	ldr	r0, [pc, #152]	; (b6cf0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   b6c56:	463a      	mov	r2, r7
   b6c58:	f7ff f88a 	bl	b5d70 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   b6c5c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   b6c5e:	3b08      	subs	r3, #8
   b6c60:	42ab      	cmp	r3, r5
   b6c62:	d212      	bcs.n	b6c8a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   b6c64:	2400      	movs	r4, #0
}
   b6c66:	4620      	mov	r0, r4
   b6c68:	b006      	add	sp, #24
   b6c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   b6c6e:	88cb      	ldrh	r3, [r1, #6]
   b6c70:	2b01      	cmp	r3, #1
   b6c72:	d036      	beq.n	b6ce2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   b6c74:	a805      	add	r0, sp, #20
   b6c76:	f7ff ff8b 	bl	b6b90 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   b6c7a:	6823      	ldr	r3, [r4, #0]
   b6c7c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   b6c80:	699b      	ldr	r3, [r3, #24]
   b6c82:	4620      	mov	r0, r4
   b6c84:	4798      	blx	r3
   b6c86:	2800      	cmp	r0, #0
   b6c88:	d0ec      	beq.n	b6c64 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   b6c8a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6c8c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   b6c8e:	f7ff ff79 	bl	b6b84 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6c92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6c94:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   b6c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6c98:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   b6c9a:	1ad2      	subs	r2, r2, r3
   b6c9c:	42aa      	cmp	r2, r5
   b6c9e:	d3e6      	bcc.n	b6c6e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   b6ca0:	ea48 080a 	orr.w	r8, r8, sl
   b6ca4:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   b6ca8:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   b6cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   b6cae:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   b6cb2:	4639      	mov	r1, r7
   b6cb4:	4640      	mov	r0, r8
   b6cb6:	f002 f8a3 	bl	b8e00 <strcpy>
				cp += strlen(cp) + 1;
   b6cba:	4640      	mov	r0, r8
   b6cbc:	f7fd fe9e 	bl	b49fc <strlen>
   b6cc0:	3001      	adds	r0, #1
				strcpy(cp, data);
   b6cc2:	4631      	mov	r1, r6
   b6cc4:	4440      	add	r0, r8
   b6cc6:	f002 f89b 	bl	b8e00 <strcpy>
				nextFree += size;
   b6cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6ccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   b6cce:	442b      	add	r3, r5
   b6cd0:	6363      	str	r3, [r4, #52]	; 0x34
				hdr->numEvents++;
   b6cd2:	88d3      	ldrh	r3, [r2, #6]
   b6cd4:	3301      	adds	r3, #1
   b6cd6:	80d3      	strh	r3, [r2, #6]
				return true;
   b6cd8:	2401      	movs	r4, #1
   b6cda:	a805      	add	r0, sp, #20
   b6cdc:	f7ff ff58 	bl	b6b90 <_ZN11StMutexLockD1Ev>
   b6ce0:	e7c1      	b.n	b6c66 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   b6ce2:	2400      	movs	r4, #0
   b6ce4:	e7f9      	b.n	b6cda <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   b6ce6:	bf00      	nop
   b6ce8:	000bb740 	.word	0x000bb740
   b6cec:	000bb4e9 	.word	0x000bb4e9
   b6cf0:	2003e650 	.word	0x2003e650

000b6cf4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6cf8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   b6cfc:	69a3      	ldr	r3, [r4, #24]
   b6cfe:	b90b      	cbnz	r3, b6d04 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   b6d00:	f001 ffca 	bl	b8c98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d04:	69e3      	ldr	r3, [r4, #28]
   b6d06:	4621      	mov	r1, r4
   b6d08:	4628      	mov	r0, r5
   b6d0a:	4798      	blx	r3
		os_thread_yield();
   b6d0c:	f000 f96c 	bl	b6fe8 <os_thread_yield>
	while(true) {
   b6d10:	e7f4      	b.n	b6cfc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000b6d12 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   b6d12:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   b6d14:	f7ff ffee 	bl	b6cf4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000b6d18 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b6d18:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   b6d1a:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   b6d1e:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6d20:	4628      	mov	r0, r5
   b6d22:	f7fd fe6b 	bl	b49fc <strlen>
   b6d26:	3001      	adds	r0, #1
   b6d28:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6d2a:	4628      	mov	r0, r5
   b6d2c:	f7fd fe66 	bl	b49fc <strlen>
	size_t offset = start - retainedBuffer;
   b6d30:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   b6d32:	3001      	adds	r0, #1
   b6d34:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   b6d36:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   b6d38:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   b6d3c:	bf1c      	itt	ne
   b6d3e:	f1c3 0304 	rsbne	r3, r3, #4
   b6d42:	18c0      	addne	r0, r0, r3
}
   b6d44:	bd68      	pop	{r3, r5, r6, pc}

000b6d46 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   b6d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6d48:	4604      	mov	r4, r0
   b6d4a:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   b6d4c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   b6d4e:	f7ff ff19 	bl	b6b84 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   b6d52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6d54:	88fb      	ldrh	r3, [r7, #6]
   b6d56:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   b6d5a:	b1e6      	cbz	r6, b6d96 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   b6d5c:	2b01      	cmp	r3, #1
   b6d5e:	d922      	bls.n	b6da6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   b6d60:	4629      	mov	r1, r5
   b6d62:	4620      	mov	r0, r4
   b6d64:	f7ff ffd8 	bl	b6d18 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   b6d68:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   b6d6a:	4629      	mov	r1, r5
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	f7ff ffd3 	bl	b6d18 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6d72:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   b6d74:	443a      	add	r2, r7
	if (after > 0) {
   b6d76:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   b6d78:	4601      	mov	r1, r0
	size_t len = next - start;
   b6d7a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   b6d7e:	d002      	beq.n	b6d86 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   b6d80:	4628      	mov	r0, r5
   b6d82:	f001 ffed 	bl	b8d60 <memmove>
	nextFree -= len;
   b6d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b6d88:	1b9b      	subs	r3, r3, r6
   b6d8a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   b6d8c:	88fb      	ldrh	r3, [r7, #6]
   b6d8e:	3b01      	subs	r3, #1
   b6d90:	80fb      	strh	r3, [r7, #6]
	return true;
   b6d92:	2601      	movs	r6, #1
   b6d94:	e001      	b.n	b6d9a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   b6d96:	2b00      	cmp	r3, #0
   b6d98:	d1e7      	bne.n	b6d6a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   b6d9a:	a801      	add	r0, sp, #4
   b6d9c:	f7ff fef8 	bl	b6b90 <_ZN11StMutexLockD1Ev>
}
   b6da0:	4630      	mov	r0, r6
   b6da2:	b003      	add	sp, #12
   b6da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   b6da6:	2600      	movs	r6, #0
   b6da8:	e7f7      	b.n	b6d9a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000b6dac <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6db0:	460d      	mov	r5, r1
   b6db2:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6db4:	462f      	mov	r7, r5
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6db6:	4b17      	ldr	r3, [pc, #92]	; (b6e14 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6db8:	f8df 905c 	ldr.w	r9, [pc, #92]	; b6e18 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   b6dbc:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6dbe:	f7ff fea5 	bl	b6b0c <_ZN21PublishQueueAsyncBaseC1Ev>
   b6dc2:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6dc4:	f857 3b08 	ldr.w	r3, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6dc8:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6dca:	454b      	cmp	r3, r9
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   b6dcc:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   b6dce:	d117      	bne.n	b6e00 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   b6dd0:	88ab      	ldrh	r3, [r5, #4]
   b6dd2:	b29b      	uxth	r3, r3
   b6dd4:	42b3      	cmp	r3, r6
   b6dd6:	d113      	bne.n	b6e00 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   b6dd8:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6ddc:	6367      	str	r7, [r4, #52]	; 0x34
   b6dde:	f04f 0800 	mov.w	r8, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   b6de2:	88eb      	ldrh	r3, [r5, #6]
   b6de4:	fa1f f288 	uxth.w	r2, r8
   b6de8:	b29b      	uxth	r3, r3
   b6dea:	429a      	cmp	r2, r3
   b6dec:	d20e      	bcs.n	b6e0c <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   b6dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b6df0:	4620      	mov	r0, r4
   b6df2:	f7ff ff91 	bl	b6d18 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   b6df6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   b6df8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   b6dfa:	f108 0801 	add.w	r8, r8, #1
   b6dfe:	d9f0      	bls.n	b6de2 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   b6e00:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   b6e02:	f8c5 9000 	str.w	r9, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   b6e06:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   b6e08:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   b6e0a:	80eb      	strh	r3, [r5, #6]
}
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6e12:	bf00      	nop
   b6e14:	000bb564 	.word	0x000bb564
   b6e18:	d19cab61 	.word	0xd19cab61

000b6e1c <_GLOBAL__sub_I_pubqLogger>:
   b6e1c:	4b01      	ldr	r3, [pc, #4]	; (b6e24 <_GLOBAL__sub_I_pubqLogger+0x8>)
   b6e1e:	4a02      	ldr	r2, [pc, #8]	; (b6e28 <_GLOBAL__sub_I_pubqLogger+0xc>)
   b6e20:	601a      	str	r2, [r3, #0]
}
   b6e22:	4770      	bx	lr
   b6e24:	2003e650 	.word	0x2003e650
   b6e28:	000bb52a 	.word	0x000bb52a

000b6e2c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   b6e2c:	4770      	bx	lr

000b6e2e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   b6e2e:	b538      	push	{r3, r4, r5, lr}
   b6e30:	4605      	mov	r5, r0
   b6e32:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b6e34:	f001 fec8 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b6e38:	7829      	ldrb	r1, [r5, #0]
   b6e3a:	f001 f867 	bl	b7f0c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   b6e3e:	f001 fec3 	bl	b8bc8 <_Z19__fetch_global_Wirev>
  inline size_t write(int n) { return write((uint8_t)n); }
   b6e42:	6803      	ldr	r3, [r0, #0]
   b6e44:	0a21      	lsrs	r1, r4, #8
   b6e46:	689b      	ldr	r3, [r3, #8]
   b6e48:	4798      	blx	r3
  Wire.write(cmd & 0xFF);
   b6e4a:	f001 febd 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b6e4e:	6803      	ldr	r3, [r0, #0]
   b6e50:	b2e1      	uxtb	r1, r4
   b6e52:	689b      	ldr	r3, [r3, #8]
   b6e54:	4798      	blx	r3
  Wire.endTransmission();  
   b6e56:	f001 feb7 	bl	b8bc8 <_Z19__fetch_global_Wirev>
}
   b6e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   b6e5e:	f001 b860 	b.w	b7f22 <_ZN7TwoWire15endTransmissionEv>

000b6e62 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   b6e62:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   b6e64:	f243 01a2 	movw	r1, #12450	; 0x30a2
   b6e68:	f7ff ffe1 	bl	b6e2e <_ZN14Adafruit_SHT3112writeCommandEt>
}
   b6e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   b6e70:	200a      	movs	r0, #10
   b6e72:	f000 bc39 	b.w	b76e8 <delay>

000b6e76 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   b6e76:	b538      	push	{r3, r4, r5, lr}
   b6e78:	4604      	mov	r4, r0
   b6e7a:	460d      	mov	r5, r1
  Wire.begin();
   b6e7c:	f001 fea4 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b6e80:	f001 f812 	bl	b7ea8 <_ZN7TwoWire5beginEv>
  reset();
   b6e84:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   b6e86:	7025      	strb	r5, [r4, #0]
  reset();
   b6e88:	f7ff ffeb 	bl	b6e62 <_ZN14Adafruit_SHT315resetEv>
}
   b6e8c:	2001      	movs	r0, #1
   b6e8e:	bd38      	pop	{r3, r4, r5, pc}

000b6e90 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   b6e90:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   b6e92:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   b6e94:	4291      	cmp	r1, r2
   b6e96:	d00e      	beq.n	b6eb6 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   b6e98:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6e9c:	4058      	eors	r0, r3
   b6e9e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   b6ea0:	f010 0f80 	tst.w	r0, #128	; 0x80
   b6ea4:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   b6ea8:	bf18      	it	ne
   b6eaa:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   b6eae:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   b6eb0:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   b6eb2:	d1f5      	bne.n	b6ea0 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   b6eb4:	e7ee      	b.n	b6e94 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   b6eb6:	4770      	bx	lr

000b6eb8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   b6eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   b6eba:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   b6ebe:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   b6ec0:	f7ff ffb5 	bl	b6e2e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   b6ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6ec8:	f000 fc0e 	bl	b76e8 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   b6ecc:	f001 fe7c 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b6ed0:	7829      	ldrb	r1, [r5, #0]
   b6ed2:	2206      	movs	r2, #6
   b6ed4:	f001 f817 	bl	b7f06 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   b6ed8:	f001 fe76 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b6edc:	6803      	ldr	r3, [r0, #0]
   b6ede:	691b      	ldr	r3, [r3, #16]
   b6ee0:	4798      	blx	r3
   b6ee2:	2806      	cmp	r0, #6
   b6ee4:	4604      	mov	r4, r0
   b6ee6:	d002      	beq.n	b6eee <_ZN14Adafruit_SHT3111readTempHumEv+0x36>
    return false;
   b6ee8:	2000      	movs	r0, #0
}
   b6eea:	b002      	add	sp, #8
   b6eec:	bd70      	pop	{r4, r5, r6, pc}
   b6eee:	466e      	mov	r6, sp
    readbuffer[i] = Wire.read();
   b6ef0:	f001 fe6a 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b6ef4:	6803      	ldr	r3, [r0, #0]
   b6ef6:	695b      	ldr	r3, [r3, #20]
   b6ef8:	4798      	blx	r3
  for (uint8_t i=0; i<6; i++) {
   b6efa:	3c01      	subs	r4, #1
   b6efc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   b6f00:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   b6f04:	4669      	mov	r1, sp
   b6f06:	d1f3      	bne.n	b6ef0 <_ZN14Adafruit_SHT3111readTempHumEv+0x38>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   b6f08:	2202      	movs	r2, #2
   b6f0a:	4628      	mov	r0, r5
   b6f0c:	f7ff ffc0 	bl	b6e90 <_ZN14Adafruit_SHT314crc8EPKhi>
   b6f10:	f89d 4002 	ldrb.w	r4, [sp, #2]
   b6f14:	4284      	cmp	r4, r0
   b6f16:	d1e7      	bne.n	b6ee8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   b6f18:	2202      	movs	r2, #2
   b6f1a:	f10d 0103 	add.w	r1, sp, #3
   b6f1e:	4628      	mov	r0, r5
   b6f20:	f7ff ffb6 	bl	b6e90 <_ZN14Adafruit_SHT314crc8EPKhi>
   b6f24:	f89d 4005 	ldrb.w	r4, [sp, #5]
   b6f28:	4284      	cmp	r4, r0
   b6f2a:	d1dd      	bne.n	b6ee8 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  double stemp = ST;
   b6f2c:	f8bd 0000 	ldrh.w	r0, [sp]
   b6f30:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   b6f34:	ba40      	rev16	r0, r0
   b6f36:	b280      	uxth	r0, r0
   b6f38:	f7fd f9b4 	bl	b42a4 <__aeabi_ui2d>
  stemp *= 175;
   b6f3c:	a316      	add	r3, pc, #88	; (adr r3, b6f98 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   b6f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f42:	f7fd fa29 	bl	b4398 <__aeabi_dmul>
  stemp /= 0xffff;
   b6f46:	a310      	add	r3, pc, #64	; (adr r3, b6f88 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f4c:	f7fd fb4e 	bl	b45ec <__aeabi_ddiv>
  stemp = -45 + stemp;
   b6f50:	4b0f      	ldr	r3, [pc, #60]	; (b6f90 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   b6f52:	2200      	movs	r2, #0
   b6f54:	f7fd f868 	bl	b4028 <__aeabi_dsub>
  temp = stemp;
   b6f58:	f7fd fcd8 	bl	b490c <__aeabi_d2f>
   b6f5c:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   b6f5e:	ba60      	rev16	r0, r4
   b6f60:	b280      	uxth	r0, r0
   b6f62:	f7fd f99f 	bl	b42a4 <__aeabi_ui2d>
  shum *= 100;
   b6f66:	4b0b      	ldr	r3, [pc, #44]	; (b6f94 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   b6f68:	2200      	movs	r2, #0
   b6f6a:	f7fd fa15 	bl	b4398 <__aeabi_dmul>
  shum /= 0xFFFF;
   b6f6e:	a306      	add	r3, pc, #24	; (adr r3, b6f88 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   b6f70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f74:	f7fd fb3a 	bl	b45ec <__aeabi_ddiv>
  humidity = shum;
   b6f78:	f7fd fcc8 	bl	b490c <__aeabi_d2f>
   b6f7c:	6068      	str	r0, [r5, #4]
  return true;
   b6f7e:	2001      	movs	r0, #1
   b6f80:	e7b3      	b.n	b6eea <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
   b6f82:	bf00      	nop
   b6f84:	f3af 8000 	nop.w
   b6f88:	00000000 	.word	0x00000000
   b6f8c:	40efffe0 	.word	0x40efffe0
   b6f90:	40468000 	.word	0x40468000
   b6f94:	40590000 	.word	0x40590000
   b6f98:	00000000 	.word	0x00000000
   b6f9c:	4065e000 	.word	0x4065e000

000b6fa0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   b6fa0:	b510      	push	{r4, lr}
   b6fa2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6fa4:	f7ff ff88 	bl	b6eb8 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6fa8:	b110      	cbz	r0, b6fb0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   b6faa:	ed94 0a02 	vldr	s0, [r4, #8]
}
   b6fae:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6fb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6fb8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   b6fb4:	e7fb      	b.n	b6fae <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   b6fb6:	bf00      	nop
   b6fb8:	7fc00000 	.word	0x7fc00000

000b6fbc <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   b6fbc:	b510      	push	{r4, lr}
   b6fbe:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   b6fc0:	f7ff ff7a 	bl	b6eb8 <_ZN14Adafruit_SHT3111readTempHumEv>
   b6fc4:	b110      	cbz	r0, b6fcc <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   b6fc6:	ed94 0a01 	vldr	s0, [r4, #4]
}
   b6fca:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   b6fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6fd4 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   b6fd0:	e7fb      	b.n	b6fca <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   b6fd2:	bf00      	nop
   b6fd4:	7fc00000 	.word	0x7fc00000

000b6fd8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <os_thread_create+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	685b      	ldr	r3, [r3, #4]
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	00030248 	.word	0x00030248

000b6fe8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <os_thread_yield+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	68db      	ldr	r3, [r3, #12]
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	00030248 	.word	0x00030248

000b6ff8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <os_thread_scheduling+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	69db      	ldr	r3, [r3, #28]
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	00030248 	.word	0x00030248

000b7008 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <os_timer_create+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	6a1b      	ldr	r3, [r3, #32]
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	00030248 	.word	0x00030248

000b7018 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <os_timer_destroy+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	00030248 	.word	0x00030248

000b7028 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <os_timer_get_id+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	00030248 	.word	0x00030248

000b7038 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <os_timer_change+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	00030248 	.word	0x00030248

000b7048 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <os_mutex_create+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	00030248 	.word	0x00030248

000b7058 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b02      	ldr	r3, [pc, #8]	; (b7064 <os_mutex_lock+0xc>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7060:	9301      	str	r3, [sp, #4]
   b7062:	bd08      	pop	{r3, pc}
   b7064:	00030248 	.word	0x00030248

000b7068 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b02      	ldr	r3, [pc, #8]	; (b7074 <os_mutex_unlock+0xc>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7070:	9301      	str	r3, [sp, #4]
   b7072:	bd08      	pop	{r3, pc}
   b7074:	00030248 	.word	0x00030248

000b7078 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7078:	b508      	push	{r3, lr}
   b707a:	4b02      	ldr	r3, [pc, #8]	; (b7084 <os_mutex_recursive_create+0xc>)
   b707c:	681b      	ldr	r3, [r3, #0]
   b707e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7080:	9301      	str	r3, [sp, #4]
   b7082:	bd08      	pop	{r3, pc}
   b7084:	00030248 	.word	0x00030248

000b7088 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   b7088:	b508      	push	{r3, lr}
   b708a:	4b02      	ldr	r3, [pc, #8]	; (b7094 <os_thread_exit+0xc>)
   b708c:	681b      	ldr	r3, [r3, #0]
   b708e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7090:	9301      	str	r3, [sp, #4]
   b7092:	bd08      	pop	{r3, pc}
   b7094:	00030248 	.word	0x00030248

000b7098 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7098:	b508      	push	{r3, lr}
   b709a:	4b02      	ldr	r3, [pc, #8]	; (b70a4 <os_timer_set_id+0xc>)
   b709c:	681b      	ldr	r3, [r3, #0]
   b709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b70a0:	9301      	str	r3, [sp, #4]
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	00030248 	.word	0x00030248

000b70a8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b70a8:	b508      	push	{r3, lr}
   b70aa:	4b02      	ldr	r3, [pc, #8]	; (b70b4 <HAL_Feature_Set+0xc>)
   b70ac:	681b      	ldr	r3, [r3, #0]
   b70ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b70b0:	9301      	str	r3, [sp, #4]
   b70b2:	bd08      	pop	{r3, pc}
   b70b4:	00030234 	.word	0x00030234

000b70b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b70b8:	b508      	push	{r3, lr}
   b70ba:	4b02      	ldr	r3, [pc, #8]	; (b70c4 <HAL_RNG_GetRandomNumber+0xc>)
   b70bc:	681b      	ldr	r3, [r3, #0]
   b70be:	685b      	ldr	r3, [r3, #4]
   b70c0:	9301      	str	r3, [sp, #4]
   b70c2:	bd08      	pop	{r3, pc}
   b70c4:	00030218 	.word	0x00030218

000b70c8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   b70c8:	b508      	push	{r3, lr}
   b70ca:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <HAL_Delay_Milliseconds+0xc>)
   b70cc:	681b      	ldr	r3, [r3, #0]
   b70ce:	689b      	ldr	r3, [r3, #8]
   b70d0:	9301      	str	r3, [sp, #4]
   b70d2:	bd08      	pop	{r3, pc}
   b70d4:	00030218 	.word	0x00030218

000b70d8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <HAL_Delay_Microseconds+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	68db      	ldr	r3, [r3, #12]
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	00030218 	.word	0x00030218

000b70e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	695b      	ldr	r3, [r3, #20]
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	00030218 	.word	0x00030218

000b70f8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <hal_rtc_time_is_valid+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	00030218 	.word	0x00030218

000b7108 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <hal_timer_millis+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	00030218 	.word	0x00030218

000b7118 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <hal_rtc_get_time+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	00030218 	.word	0x00030218

000b7128 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <hal_rtc_set_time+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	00030218 	.word	0x00030218

000b7138 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <hal_gpio_mode+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	689b      	ldr	r3, [r3, #8]
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	0003022c 	.word	0x0003022c

000b7148 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <hal_gpio_get_mode+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	68db      	ldr	r3, [r3, #12]
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	0003022c 	.word	0x0003022c

000b7158 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <hal_gpio_write+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	691b      	ldr	r3, [r3, #16]
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	0003022c 	.word	0x0003022c

000b7168 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b02      	ldr	r3, [pc, #8]	; (b7174 <hal_gpio_read+0xc>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	695b      	ldr	r3, [r3, #20]
   b7170:	9301      	str	r3, [sp, #4]
   b7172:	bd08      	pop	{r3, pc}
   b7174:	0003022c 	.word	0x0003022c

000b7178 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b7178:	b508      	push	{r3, lr}
   b717a:	4b02      	ldr	r3, [pc, #8]	; (b7184 <hal_interrupt_attach+0xc>)
   b717c:	681b      	ldr	r3, [r3, #0]
   b717e:	699b      	ldr	r3, [r3, #24]
   b7180:	9301      	str	r3, [sp, #4]
   b7182:	bd08      	pop	{r3, pc}
   b7184:	0003022c 	.word	0x0003022c

000b7188 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b7188:	b508      	push	{r3, lr}
   b718a:	4b02      	ldr	r3, [pc, #8]	; (b7194 <hal_interrupt_detach+0xc>)
   b718c:	681b      	ldr	r3, [r3, #0]
   b718e:	69db      	ldr	r3, [r3, #28]
   b7190:	9301      	str	r3, [sp, #4]
   b7192:	bd08      	pop	{r3, pc}
   b7194:	0003022c 	.word	0x0003022c

000b7198 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7198:	b508      	push	{r3, lr}
   b719a:	4b02      	ldr	r3, [pc, #8]	; (b71a4 <hal_i2c_begin+0xc>)
   b719c:	681b      	ldr	r3, [r3, #0]
   b719e:	68db      	ldr	r3, [r3, #12]
   b71a0:	9301      	str	r3, [sp, #4]
   b71a2:	bd08      	pop	{r3, pc}
   b71a4:	00030228 	.word	0x00030228

000b71a8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b71a8:	b508      	push	{r3, lr}
   b71aa:	4b02      	ldr	r3, [pc, #8]	; (b71b4 <hal_i2c_begin_transmission+0xc>)
   b71ac:	681b      	ldr	r3, [r3, #0]
   b71ae:	699b      	ldr	r3, [r3, #24]
   b71b0:	9301      	str	r3, [sp, #4]
   b71b2:	bd08      	pop	{r3, pc}
   b71b4:	00030228 	.word	0x00030228

000b71b8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b71b8:	b508      	push	{r3, lr}
   b71ba:	4b02      	ldr	r3, [pc, #8]	; (b71c4 <hal_i2c_end_transmission+0xc>)
   b71bc:	681b      	ldr	r3, [r3, #0]
   b71be:	69db      	ldr	r3, [r3, #28]
   b71c0:	9301      	str	r3, [sp, #4]
   b71c2:	bd08      	pop	{r3, pc}
   b71c4:	00030228 	.word	0x00030228

000b71c8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b71c8:	b508      	push	{r3, lr}
   b71ca:	4b02      	ldr	r3, [pc, #8]	; (b71d4 <hal_i2c_write+0xc>)
   b71cc:	681b      	ldr	r3, [r3, #0]
   b71ce:	6a1b      	ldr	r3, [r3, #32]
   b71d0:	9301      	str	r3, [sp, #4]
   b71d2:	bd08      	pop	{r3, pc}
   b71d4:	00030228 	.word	0x00030228

000b71d8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b71d8:	b508      	push	{r3, lr}
   b71da:	4b02      	ldr	r3, [pc, #8]	; (b71e4 <hal_i2c_available+0xc>)
   b71dc:	681b      	ldr	r3, [r3, #0]
   b71de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71e0:	9301      	str	r3, [sp, #4]
   b71e2:	bd08      	pop	{r3, pc}
   b71e4:	00030228 	.word	0x00030228

000b71e8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b71e8:	b508      	push	{r3, lr}
   b71ea:	4b02      	ldr	r3, [pc, #8]	; (b71f4 <hal_i2c_read+0xc>)
   b71ec:	681b      	ldr	r3, [r3, #0]
   b71ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b71f0:	9301      	str	r3, [sp, #4]
   b71f2:	bd08      	pop	{r3, pc}
   b71f4:	00030228 	.word	0x00030228

000b71f8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b71f8:	b508      	push	{r3, lr}
   b71fa:	4b02      	ldr	r3, [pc, #8]	; (b7204 <hal_i2c_peek+0xc>)
   b71fc:	681b      	ldr	r3, [r3, #0]
   b71fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7200:	9301      	str	r3, [sp, #4]
   b7202:	bd08      	pop	{r3, pc}
   b7204:	00030228 	.word	0x00030228

000b7208 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7208:	b508      	push	{r3, lr}
   b720a:	4b02      	ldr	r3, [pc, #8]	; (b7214 <hal_i2c_flush+0xc>)
   b720c:	681b      	ldr	r3, [r3, #0]
   b720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7210:	9301      	str	r3, [sp, #4]
   b7212:	bd08      	pop	{r3, pc}
   b7214:	00030228 	.word	0x00030228

000b7218 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7218:	b508      	push	{r3, lr}
   b721a:	4b02      	ldr	r3, [pc, #8]	; (b7224 <hal_i2c_is_enabled+0xc>)
   b721c:	681b      	ldr	r3, [r3, #0]
   b721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7220:	9301      	str	r3, [sp, #4]
   b7222:	bd08      	pop	{r3, pc}
   b7224:	00030228 	.word	0x00030228

000b7228 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7228:	b508      	push	{r3, lr}
   b722a:	4b02      	ldr	r3, [pc, #8]	; (b7234 <hal_i2c_init+0xc>)
   b722c:	681b      	ldr	r3, [r3, #0]
   b722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7230:	9301      	str	r3, [sp, #4]
   b7232:	bd08      	pop	{r3, pc}
   b7234:	00030228 	.word	0x00030228

000b7238 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b7238:	b508      	push	{r3, lr}
   b723a:	4b02      	ldr	r3, [pc, #8]	; (b7244 <hal_i2c_lock+0xc>)
   b723c:	681b      	ldr	r3, [r3, #0]
   b723e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7240:	9301      	str	r3, [sp, #4]
   b7242:	bd08      	pop	{r3, pc}
   b7244:	00030228 	.word	0x00030228

000b7248 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b7248:	b508      	push	{r3, lr}
   b724a:	4b02      	ldr	r3, [pc, #8]	; (b7254 <hal_i2c_unlock+0xc>)
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7250:	9301      	str	r3, [sp, #4]
   b7252:	bd08      	pop	{r3, pc}
   b7254:	00030228 	.word	0x00030228

000b7258 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7258:	b508      	push	{r3, lr}
   b725a:	4b02      	ldr	r3, [pc, #8]	; (b7264 <hal_i2c_request_ex+0xc>)
   b725c:	681b      	ldr	r3, [r3, #0]
   b725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7260:	9301      	str	r3, [sp, #4]
   b7262:	bd08      	pop	{r3, pc}
   b7264:	00030228 	.word	0x00030228

000b7268 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7268:	b508      	push	{r3, lr}
   b726a:	4b02      	ldr	r3, [pc, #8]	; (b7274 <inet_inet_ntop+0xc>)
   b726c:	681b      	ldr	r3, [r3, #0]
   b726e:	695b      	ldr	r3, [r3, #20]
   b7270:	9301      	str	r3, [sp, #4]
   b7272:	bd08      	pop	{r3, pc}
   b7274:	00030264 	.word	0x00030264

000b7278 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7278:	b508      	push	{r3, lr}
   b727a:	4b02      	ldr	r3, [pc, #8]	; (b7284 <netdb_freeaddrinfo+0xc>)
   b727c:	681b      	ldr	r3, [r3, #0]
   b727e:	689b      	ldr	r3, [r3, #8]
   b7280:	9301      	str	r3, [sp, #4]
   b7282:	bd08      	pop	{r3, pc}
   b7284:	00030268 	.word	0x00030268

000b7288 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7288:	b508      	push	{r3, lr}
   b728a:	4b02      	ldr	r3, [pc, #8]	; (b7294 <netdb_getaddrinfo+0xc>)
   b728c:	681b      	ldr	r3, [r3, #0]
   b728e:	68db      	ldr	r3, [r3, #12]
   b7290:	9301      	str	r3, [sp, #4]
   b7292:	bd08      	pop	{r3, pc}
   b7294:	00030268 	.word	0x00030268

000b7298 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7298:	b508      	push	{r3, lr}
   b729a:	4b02      	ldr	r3, [pc, #8]	; (b72a4 <hal_spi_init+0xc>)
   b729c:	681b      	ldr	r3, [r3, #0]
   b729e:	69db      	ldr	r3, [r3, #28]
   b72a0:	9301      	str	r3, [sp, #4]
   b72a2:	bd08      	pop	{r3, pc}
   b72a4:	00030230 	.word	0x00030230

000b72a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b72a8:	b508      	push	{r3, lr}
   b72aa:	4b02      	ldr	r3, [pc, #8]	; (b72b4 <hal_spi_is_enabled+0xc>)
   b72ac:	681b      	ldr	r3, [r3, #0]
   b72ae:	6a1b      	ldr	r3, [r3, #32]
   b72b0:	9301      	str	r3, [sp, #4]
   b72b2:	bd08      	pop	{r3, pc}
   b72b4:	00030230 	.word	0x00030230

000b72b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b72b8:	b508      	push	{r3, lr}
   b72ba:	4b02      	ldr	r3, [pc, #8]	; (b72c4 <hal_usart_write+0xc>)
   b72bc:	681b      	ldr	r3, [r3, #0]
   b72be:	68db      	ldr	r3, [r3, #12]
   b72c0:	9301      	str	r3, [sp, #4]
   b72c2:	bd08      	pop	{r3, pc}
   b72c4:	0003023c 	.word	0x0003023c

000b72c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b72c8:	b508      	push	{r3, lr}
   b72ca:	4b02      	ldr	r3, [pc, #8]	; (b72d4 <hal_usart_available+0xc>)
   b72cc:	681b      	ldr	r3, [r3, #0]
   b72ce:	691b      	ldr	r3, [r3, #16]
   b72d0:	9301      	str	r3, [sp, #4]
   b72d2:	bd08      	pop	{r3, pc}
   b72d4:	0003023c 	.word	0x0003023c

000b72d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b72d8:	b508      	push	{r3, lr}
   b72da:	4b02      	ldr	r3, [pc, #8]	; (b72e4 <hal_usart_read+0xc>)
   b72dc:	681b      	ldr	r3, [r3, #0]
   b72de:	695b      	ldr	r3, [r3, #20]
   b72e0:	9301      	str	r3, [sp, #4]
   b72e2:	bd08      	pop	{r3, pc}
   b72e4:	0003023c 	.word	0x0003023c

000b72e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b72e8:	b508      	push	{r3, lr}
   b72ea:	4b02      	ldr	r3, [pc, #8]	; (b72f4 <hal_usart_peek+0xc>)
   b72ec:	681b      	ldr	r3, [r3, #0]
   b72ee:	699b      	ldr	r3, [r3, #24]
   b72f0:	9301      	str	r3, [sp, #4]
   b72f2:	bd08      	pop	{r3, pc}
   b72f4:	0003023c 	.word	0x0003023c

000b72f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b72f8:	b508      	push	{r3, lr}
   b72fa:	4b02      	ldr	r3, [pc, #8]	; (b7304 <hal_usart_flush+0xc>)
   b72fc:	681b      	ldr	r3, [r3, #0]
   b72fe:	69db      	ldr	r3, [r3, #28]
   b7300:	9301      	str	r3, [sp, #4]
   b7302:	bd08      	pop	{r3, pc}
   b7304:	0003023c 	.word	0x0003023c

000b7308 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7308:	b508      	push	{r3, lr}
   b730a:	4b02      	ldr	r3, [pc, #8]	; (b7314 <hal_usart_is_enabled+0xc>)
   b730c:	681b      	ldr	r3, [r3, #0]
   b730e:	6a1b      	ldr	r3, [r3, #32]
   b7310:	9301      	str	r3, [sp, #4]
   b7312:	bd08      	pop	{r3, pc}
   b7314:	0003023c 	.word	0x0003023c

000b7318 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7318:	b508      	push	{r3, lr}
   b731a:	4b02      	ldr	r3, [pc, #8]	; (b7324 <hal_usart_available_data_for_write+0xc>)
   b731c:	681b      	ldr	r3, [r3, #0]
   b731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7320:	9301      	str	r3, [sp, #4]
   b7322:	bd08      	pop	{r3, pc}
   b7324:	0003023c 	.word	0x0003023c

000b7328 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7328:	b508      	push	{r3, lr}
   b732a:	4b02      	ldr	r3, [pc, #8]	; (b7334 <hal_usart_init_ex+0xc>)
   b732c:	681b      	ldr	r3, [r3, #0]
   b732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7330:	9301      	str	r3, [sp, #4]
   b7332:	bd08      	pop	{r3, pc}
   b7334:	0003023c 	.word	0x0003023c

000b7338 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7338:	b508      	push	{r3, lr}
   b733a:	4b02      	ldr	r3, [pc, #8]	; (b7344 <HAL_USB_USART_Init+0xc>)
   b733c:	681b      	ldr	r3, [r3, #0]
   b733e:	681b      	ldr	r3, [r3, #0]
   b7340:	9301      	str	r3, [sp, #4]
   b7342:	bd08      	pop	{r3, pc}
   b7344:	0003024c 	.word	0x0003024c

000b7348 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7348:	b508      	push	{r3, lr}
   b734a:	4b02      	ldr	r3, [pc, #8]	; (b7354 <HAL_USB_USART_Available_Data+0xc>)
   b734c:	681b      	ldr	r3, [r3, #0]
   b734e:	691b      	ldr	r3, [r3, #16]
   b7350:	9301      	str	r3, [sp, #4]
   b7352:	bd08      	pop	{r3, pc}
   b7354:	0003024c 	.word	0x0003024c

000b7358 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7358:	b508      	push	{r3, lr}
   b735a:	4b02      	ldr	r3, [pc, #8]	; (b7364 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b735c:	681b      	ldr	r3, [r3, #0]
   b735e:	695b      	ldr	r3, [r3, #20]
   b7360:	9301      	str	r3, [sp, #4]
   b7362:	bd08      	pop	{r3, pc}
   b7364:	0003024c 	.word	0x0003024c

000b7368 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7368:	b508      	push	{r3, lr}
   b736a:	4b02      	ldr	r3, [pc, #8]	; (b7374 <HAL_USB_USART_Receive_Data+0xc>)
   b736c:	681b      	ldr	r3, [r3, #0]
   b736e:	699b      	ldr	r3, [r3, #24]
   b7370:	9301      	str	r3, [sp, #4]
   b7372:	bd08      	pop	{r3, pc}
   b7374:	0003024c 	.word	0x0003024c

000b7378 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7378:	b508      	push	{r3, lr}
   b737a:	4b02      	ldr	r3, [pc, #8]	; (b7384 <HAL_USB_USART_Send_Data+0xc>)
   b737c:	681b      	ldr	r3, [r3, #0]
   b737e:	69db      	ldr	r3, [r3, #28]
   b7380:	9301      	str	r3, [sp, #4]
   b7382:	bd08      	pop	{r3, pc}
   b7384:	0003024c 	.word	0x0003024c

000b7388 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7388:	b508      	push	{r3, lr}
   b738a:	4b02      	ldr	r3, [pc, #8]	; (b7394 <HAL_USB_USART_Flush_Data+0xc>)
   b738c:	681b      	ldr	r3, [r3, #0]
   b738e:	6a1b      	ldr	r3, [r3, #32]
   b7390:	9301      	str	r3, [sp, #4]
   b7392:	bd08      	pop	{r3, pc}
   b7394:	0003024c 	.word	0x0003024c

000b7398 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7398:	b508      	push	{r3, lr}
   b739a:	4b02      	ldr	r3, [pc, #8]	; (b73a4 <panic_+0xc>)
   b739c:	681b      	ldr	r3, [r3, #0]
   b739e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b73a0:	9301      	str	r3, [sp, #4]
   b73a2:	bd08      	pop	{r3, pc}
   b73a4:	00030260 	.word	0x00030260

000b73a8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b73a8:	b508      	push	{r3, lr}
   b73aa:	4b02      	ldr	r3, [pc, #8]	; (b73b4 <log_message_v+0xc>)
   b73ac:	681b      	ldr	r3, [r3, #0]
   b73ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b73b0:	9301      	str	r3, [sp, #4]
   b73b2:	bd08      	pop	{r3, pc}
   b73b4:	00030260 	.word	0x00030260

000b73b8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b73b8:	b508      	push	{r3, lr}
   b73ba:	4b03      	ldr	r3, [pc, #12]	; (b73c8 <diag_get_source+0x10>)
   b73bc:	681b      	ldr	r3, [r3, #0]
   b73be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b73c2:	9301      	str	r3, [sp, #4]
   b73c4:	bd08      	pop	{r3, pc}
   b73c6:	0000      	.short	0x0000
   b73c8:	00030260 	.word	0x00030260

000b73cc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b73cc:	b508      	push	{r3, lr}
   b73ce:	4b02      	ldr	r3, [pc, #8]	; (b73d8 <system_mode+0xc>)
   b73d0:	681b      	ldr	r3, [r3, #0]
   b73d2:	681b      	ldr	r3, [r3, #0]
   b73d4:	9301      	str	r3, [sp, #4]
   b73d6:	bd08      	pop	{r3, pc}
   b73d8:	00030220 	.word	0x00030220

000b73dc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b73dc:	b508      	push	{r3, lr}
   b73de:	4b02      	ldr	r3, [pc, #8]	; (b73e8 <set_system_mode+0xc>)
   b73e0:	681b      	ldr	r3, [r3, #0]
   b73e2:	685b      	ldr	r3, [r3, #4]
   b73e4:	9301      	str	r3, [sp, #4]
   b73e6:	bd08      	pop	{r3, pc}
   b73e8:	00030220 	.word	0x00030220

000b73ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b73ec:	b508      	push	{r3, lr}
   b73ee:	4b02      	ldr	r3, [pc, #8]	; (b73f8 <system_delay_ms+0xc>)
   b73f0:	681b      	ldr	r3, [r3, #0]
   b73f2:	695b      	ldr	r3, [r3, #20]
   b73f4:	9301      	str	r3, [sp, #4]
   b73f6:	bd08      	pop	{r3, pc}
   b73f8:	00030220 	.word	0x00030220

000b73fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b73fc:	b508      	push	{r3, lr}
   b73fe:	4b02      	ldr	r3, [pc, #8]	; (b7408 <system_thread_set_state+0xc>)
   b7400:	681b      	ldr	r3, [r3, #0]
   b7402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7404:	9301      	str	r3, [sp, #4]
   b7406:	bd08      	pop	{r3, pc}
   b7408:	00030220 	.word	0x00030220

000b740c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b740c:	b508      	push	{r3, lr}
   b740e:	4b02      	ldr	r3, [pc, #8]	; (b7418 <application_thread_current+0xc>)
   b7410:	681b      	ldr	r3, [r3, #0]
   b7412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7414:	9301      	str	r3, [sp, #4]
   b7416:	bd08      	pop	{r3, pc}
   b7418:	00030220 	.word	0x00030220

000b741c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b741c:	b508      	push	{r3, lr}
   b741e:	4b02      	ldr	r3, [pc, #8]	; (b7428 <application_thread_invoke+0xc>)
   b7420:	681b      	ldr	r3, [r3, #0]
   b7422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7424:	9301      	str	r3, [sp, #4]
   b7426:	bd08      	pop	{r3, pc}
   b7428:	00030220 	.word	0x00030220

000b742c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b742c:	b508      	push	{r3, lr}
   b742e:	4b02      	ldr	r3, [pc, #8]	; (b7438 <system_thread_get_state+0xc>)
   b7430:	681b      	ldr	r3, [r3, #0]
   b7432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7434:	9301      	str	r3, [sp, #4]
   b7436:	bd08      	pop	{r3, pc}
   b7438:	00030220 	.word	0x00030220

000b743c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b743c:	b508      	push	{r3, lr}
   b743e:	4b02      	ldr	r3, [pc, #8]	; (b7448 <system_notify_time_changed+0xc>)
   b7440:	681b      	ldr	r3, [r3, #0]
   b7442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7444:	9301      	str	r3, [sp, #4]
   b7446:	bd08      	pop	{r3, pc}
   b7448:	00030220 	.word	0x00030220

000b744c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b744c:	b508      	push	{r3, lr}
   b744e:	4b03      	ldr	r3, [pc, #12]	; (b745c <system_ctrl_set_app_request_handler+0x10>)
   b7450:	681b      	ldr	r3, [r3, #0]
   b7452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7456:	9301      	str	r3, [sp, #4]
   b7458:	bd08      	pop	{r3, pc}
   b745a:	0000      	.short	0x0000
   b745c:	00030220 	.word	0x00030220

000b7460 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7460:	b508      	push	{r3, lr}
   b7462:	4b03      	ldr	r3, [pc, #12]	; (b7470 <system_ctrl_set_result+0x10>)
   b7464:	681b      	ldr	r3, [r3, #0]
   b7466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b746a:	9301      	str	r3, [sp, #4]
   b746c:	bd08      	pop	{r3, pc}
   b746e:	0000      	.short	0x0000
   b7470:	00030220 	.word	0x00030220

000b7474 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b7474:	b508      	push	{r3, lr}
   b7476:	4b03      	ldr	r3, [pc, #12]	; (b7484 <system_reset+0x10>)
   b7478:	681b      	ldr	r3, [r3, #0]
   b747a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b747e:	9301      	str	r3, [sp, #4]
   b7480:	bd08      	pop	{r3, pc}
   b7482:	0000      	.short	0x0000
   b7484:	00030220 	.word	0x00030220

000b7488 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <spark_variable+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	681b      	ldr	r3, [r3, #0]
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	00030244 	.word	0x00030244

000b7498 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <spark_function+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	685b      	ldr	r3, [r3, #4]
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030244 	.word	0x00030244

000b74a8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <spark_process+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	689b      	ldr	r3, [r3, #8]
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	00030244 	.word	0x00030244

000b74b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <spark_cloud_flag_connected+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	695b      	ldr	r3, [r3, #20]
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	00030244 	.word	0x00030244

000b74c8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <spark_deviceID+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	69db      	ldr	r3, [r3, #28]
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	00030244 	.word	0x00030244

000b74d8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <spark_send_event+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	6a1b      	ldr	r3, [r3, #32]
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	00030244 	.word	0x00030244

000b74e8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <spark_subscribe+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	00030244 	.word	0x00030244

000b74f8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <spark_sync_time+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	00030244 	.word	0x00030244

000b7508 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <spark_sync_time_pending+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	00030244 	.word	0x00030244

000b7518 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <spark_sync_time_last+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	00030244 	.word	0x00030244

000b7528 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b7528:	b508      	push	{r3, lr}
   b752a:	4b02      	ldr	r3, [pc, #8]	; (b7534 <spark_set_connection_property+0xc>)
   b752c:	681b      	ldr	r3, [r3, #0]
   b752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7530:	9301      	str	r3, [sp, #4]
   b7532:	bd08      	pop	{r3, pc}
   b7534:	00030244 	.word	0x00030244

000b7538 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7538:	b508      	push	{r3, lr}
   b753a:	4b02      	ldr	r3, [pc, #8]	; (b7544 <spark_set_random_seed_from_cloud_handler+0xc>)
   b753c:	681b      	ldr	r3, [r3, #0]
   b753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7540:	9301      	str	r3, [sp, #4]
   b7542:	bd08      	pop	{r3, pc}
   b7544:	00030244 	.word	0x00030244

000b7548 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7548:	b508      	push	{r3, lr}
   b754a:	4b02      	ldr	r3, [pc, #8]	; (b7554 <network_connect+0xc>)
   b754c:	681b      	ldr	r3, [r3, #0]
   b754e:	685b      	ldr	r3, [r3, #4]
   b7550:	9301      	str	r3, [sp, #4]
   b7552:	bd08      	pop	{r3, pc}
   b7554:	00030240 	.word	0x00030240

000b7558 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7558:	b508      	push	{r3, lr}
   b755a:	4b02      	ldr	r3, [pc, #8]	; (b7564 <network_connecting+0xc>)
   b755c:	681b      	ldr	r3, [r3, #0]
   b755e:	689b      	ldr	r3, [r3, #8]
   b7560:	9301      	str	r3, [sp, #4]
   b7562:	bd08      	pop	{r3, pc}
   b7564:	00030240 	.word	0x00030240

000b7568 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7568:	b508      	push	{r3, lr}
   b756a:	4b02      	ldr	r3, [pc, #8]	; (b7574 <network_disconnect+0xc>)
   b756c:	681b      	ldr	r3, [r3, #0]
   b756e:	68db      	ldr	r3, [r3, #12]
   b7570:	9301      	str	r3, [sp, #4]
   b7572:	bd08      	pop	{r3, pc}
   b7574:	00030240 	.word	0x00030240

000b7578 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7578:	b508      	push	{r3, lr}
   b757a:	4b02      	ldr	r3, [pc, #8]	; (b7584 <network_ready+0xc>)
   b757c:	681b      	ldr	r3, [r3, #0]
   b757e:	691b      	ldr	r3, [r3, #16]
   b7580:	9301      	str	r3, [sp, #4]
   b7582:	bd08      	pop	{r3, pc}
   b7584:	00030240 	.word	0x00030240

000b7588 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7588:	b508      	push	{r3, lr}
   b758a:	4b02      	ldr	r3, [pc, #8]	; (b7594 <network_on+0xc>)
   b758c:	681b      	ldr	r3, [r3, #0]
   b758e:	695b      	ldr	r3, [r3, #20]
   b7590:	9301      	str	r3, [sp, #4]
   b7592:	bd08      	pop	{r3, pc}
   b7594:	00030240 	.word	0x00030240

000b7598 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7598:	b508      	push	{r3, lr}
   b759a:	4b02      	ldr	r3, [pc, #8]	; (b75a4 <network_off+0xc>)
   b759c:	681b      	ldr	r3, [r3, #0]
   b759e:	699b      	ldr	r3, [r3, #24]
   b75a0:	9301      	str	r3, [sp, #4]
   b75a2:	bd08      	pop	{r3, pc}
   b75a4:	00030240 	.word	0x00030240

000b75a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b75a8:	b508      	push	{r3, lr}
   b75aa:	4b02      	ldr	r3, [pc, #8]	; (b75b4 <network_listen+0xc>)
   b75ac:	681b      	ldr	r3, [r3, #0]
   b75ae:	69db      	ldr	r3, [r3, #28]
   b75b0:	9301      	str	r3, [sp, #4]
   b75b2:	bd08      	pop	{r3, pc}
   b75b4:	00030240 	.word	0x00030240

000b75b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b75b8:	b508      	push	{r3, lr}
   b75ba:	4b02      	ldr	r3, [pc, #8]	; (b75c4 <network_listening+0xc>)
   b75bc:	681b      	ldr	r3, [r3, #0]
   b75be:	6a1b      	ldr	r3, [r3, #32]
   b75c0:	9301      	str	r3, [sp, #4]
   b75c2:	bd08      	pop	{r3, pc}
   b75c4:	00030240 	.word	0x00030240

000b75c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b75c8:	b508      	push	{r3, lr}
   b75ca:	4b02      	ldr	r3, [pc, #8]	; (b75d4 <network_set_listen_timeout+0xc>)
   b75cc:	681b      	ldr	r3, [r3, #0]
   b75ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b75d0:	9301      	str	r3, [sp, #4]
   b75d2:	bd08      	pop	{r3, pc}
   b75d4:	00030240 	.word	0x00030240

000b75d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b75d8:	b508      	push	{r3, lr}
   b75da:	4b02      	ldr	r3, [pc, #8]	; (b75e4 <network_get_listen_timeout+0xc>)
   b75dc:	681b      	ldr	r3, [r3, #0]
   b75de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b75e0:	9301      	str	r3, [sp, #4]
   b75e2:	bd08      	pop	{r3, pc}
   b75e4:	00030240 	.word	0x00030240

000b75e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b75e8:	b508      	push	{r3, lr}
   b75ea:	4b02      	ldr	r3, [pc, #8]	; (b75f4 <network_is_on+0xc>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b75f0:	9301      	str	r3, [sp, #4]
   b75f2:	bd08      	pop	{r3, pc}
   b75f4:	00030240 	.word	0x00030240

000b75f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b75f8:	b508      	push	{r3, lr}
   b75fa:	4b02      	ldr	r3, [pc, #8]	; (b7604 <network_is_off+0xc>)
   b75fc:	681b      	ldr	r3, [r3, #0]
   b75fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7600:	9301      	str	r3, [sp, #4]
   b7602:	bd08      	pop	{r3, pc}
   b7604:	00030240 	.word	0x00030240

000b7608 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7608:	b508      	push	{r3, lr}
   b760a:	4b02      	ldr	r3, [pc, #8]	; (b7614 <malloc+0xc>)
   b760c:	681b      	ldr	r3, [r3, #0]
   b760e:	681b      	ldr	r3, [r3, #0]
   b7610:	9301      	str	r3, [sp, #4]
   b7612:	bd08      	pop	{r3, pc}
   b7614:	0003021c 	.word	0x0003021c

000b7618 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7618:	b508      	push	{r3, lr}
   b761a:	4b02      	ldr	r3, [pc, #8]	; (b7624 <free+0xc>)
   b761c:	681b      	ldr	r3, [r3, #0]
   b761e:	685b      	ldr	r3, [r3, #4]
   b7620:	9301      	str	r3, [sp, #4]
   b7622:	bd08      	pop	{r3, pc}
   b7624:	0003021c 	.word	0x0003021c

000b7628 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7628:	b508      	push	{r3, lr}
   b762a:	4b02      	ldr	r3, [pc, #8]	; (b7634 <realloc+0xc>)
   b762c:	681b      	ldr	r3, [r3, #0]
   b762e:	689b      	ldr	r3, [r3, #8]
   b7630:	9301      	str	r3, [sp, #4]
   b7632:	bd08      	pop	{r3, pc}
   b7634:	0003021c 	.word	0x0003021c

000b7638 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b7638:	b508      	push	{r3, lr}
   b763a:	4b02      	ldr	r3, [pc, #8]	; (b7644 <siprintf+0xc>)
   b763c:	681b      	ldr	r3, [r3, #0]
   b763e:	691b      	ldr	r3, [r3, #16]
   b7640:	9301      	str	r3, [sp, #4]
   b7642:	bd08      	pop	{r3, pc}
   b7644:	0003021c 	.word	0x0003021c

000b7648 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7648:	b508      	push	{r3, lr}
   b764a:	4b02      	ldr	r3, [pc, #8]	; (b7654 <snprintf+0xc>)
   b764c:	681b      	ldr	r3, [r3, #0]
   b764e:	69db      	ldr	r3, [r3, #28]
   b7650:	9301      	str	r3, [sp, #4]
   b7652:	bd08      	pop	{r3, pc}
   b7654:	0003021c 	.word	0x0003021c

000b7658 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7658:	b508      	push	{r3, lr}
   b765a:	4b02      	ldr	r3, [pc, #8]	; (b7664 <abort+0xc>)
   b765c:	681b      	ldr	r3, [r3, #0]
   b765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7660:	9301      	str	r3, [sp, #4]
   b7662:	bd08      	pop	{r3, pc}
   b7664:	0003021c 	.word	0x0003021c

000b7668 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7668:	b508      	push	{r3, lr}
   b766a:	4b02      	ldr	r3, [pc, #8]	; (b7674 <_malloc_r+0xc>)
   b766c:	681b      	ldr	r3, [r3, #0]
   b766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7670:	9301      	str	r3, [sp, #4]
   b7672:	bd08      	pop	{r3, pc}
   b7674:	0003021c 	.word	0x0003021c

000b7678 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7678:	b508      	push	{r3, lr}
   b767a:	4b02      	ldr	r3, [pc, #8]	; (b7684 <__errno+0xc>)
   b767c:	681b      	ldr	r3, [r3, #0]
   b767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7680:	9301      	str	r3, [sp, #4]
   b7682:	bd08      	pop	{r3, pc}
   b7684:	0003021c 	.word	0x0003021c

000b7688 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7688:	b508      	push	{r3, lr}
   b768a:	4b02      	ldr	r3, [pc, #8]	; (b7694 <__assert_func+0xc>)
   b768c:	681b      	ldr	r3, [r3, #0]
   b768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7690:	9301      	str	r3, [sp, #4]
   b7692:	bd08      	pop	{r3, pc}
   b7694:	0003021c 	.word	0x0003021c

000b7698 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7698:	b508      	push	{r3, lr}
   b769a:	4b02      	ldr	r3, [pc, #8]	; (b76a4 <newlib_impure_ptr_callback+0xc>)
   b769c:	681b      	ldr	r3, [r3, #0]
   b769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76a0:	9301      	str	r3, [sp, #4]
   b76a2:	bd08      	pop	{r3, pc}
   b76a4:	0003021c 	.word	0x0003021c

000b76a8 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b76a8:	b508      	push	{r3, lr}
   b76aa:	4b02      	ldr	r3, [pc, #8]	; (b76b4 <strftime+0xc>)
   b76ac:	681b      	ldr	r3, [r3, #0]
   b76ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b76b0:	9301      	str	r3, [sp, #4]
   b76b2:	bd08      	pop	{r3, pc}
   b76b4:	0003021c 	.word	0x0003021c

000b76b8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b76b8:	b508      	push	{r3, lr}
   b76ba:	4b02      	ldr	r3, [pc, #8]	; (b76c4 <localtime_r+0xc>)
   b76bc:	681b      	ldr	r3, [r3, #0]
   b76be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b76c0:	9301      	str	r3, [sp, #4]
   b76c2:	bd08      	pop	{r3, pc}
   b76c4:	0003021c 	.word	0x0003021c

000b76c8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b76c8:	b508      	push	{r3, lr}
   b76ca:	4b02      	ldr	r3, [pc, #8]	; (b76d4 <gmtime_r+0xc>)
   b76cc:	681b      	ldr	r3, [r3, #0]
   b76ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b76d0:	9301      	str	r3, [sp, #4]
   b76d2:	bd08      	pop	{r3, pc}
   b76d4:	0003021c 	.word	0x0003021c

000b76d8 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b76d8:	b508      	push	{r3, lr}
   b76da:	4b02      	ldr	r3, [pc, #8]	; (b76e4 <mktime+0xc>)
   b76dc:	681b      	ldr	r3, [r3, #0]
   b76de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b76e0:	9301      	str	r3, [sp, #4]
   b76e2:	bd08      	pop	{r3, pc}
   b76e4:	0003021c 	.word	0x0003021c

000b76e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b76e8:	2100      	movs	r1, #0
   b76ea:	f7ff be7f 	b.w	b73ec <system_delay_ms>

000b76ee <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b76ee:	b510      	push	{r4, lr}
      if (_M_empty())
   b76f0:	6883      	ldr	r3, [r0, #8]
   b76f2:	4604      	mov	r4, r0
   b76f4:	b90b      	cbnz	r3, b76fa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b76f6:	f001 facf 	bl	b8c98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b76fa:	68c3      	ldr	r3, [r0, #12]
   b76fc:	4798      	blx	r3
      if (_M_manager)
   b76fe:	68a3      	ldr	r3, [r4, #8]
   b7700:	b11b      	cbz	r3, b770a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7702:	2203      	movs	r2, #3
   b7704:	4621      	mov	r1, r4
   b7706:	4620      	mov	r0, r4
   b7708:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b770a:	4620      	mov	r0, r4
   b770c:	2110      	movs	r1, #16
}
   b770e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7712:	f7fd b9d2 	b.w	b4aba <_ZdlPvj>

000b7716 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7716:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7718:	6843      	ldr	r3, [r0, #4]
   b771a:	3b01      	subs	r3, #1
    {
   b771c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b771e:	6043      	str	r3, [r0, #4]
   b7720:	b963      	cbnz	r3, b773c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7722:	6803      	ldr	r3, [r0, #0]
   b7724:	689b      	ldr	r3, [r3, #8]
   b7726:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7728:	68a3      	ldr	r3, [r4, #8]
   b772a:	3b01      	subs	r3, #1
   b772c:	60a3      	str	r3, [r4, #8]
   b772e:	b92b      	cbnz	r3, b773c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7730:	6823      	ldr	r3, [r4, #0]
   b7732:	4620      	mov	r0, r4
   b7734:	68db      	ldr	r3, [r3, #12]
    }
   b7736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b773a:	4718      	bx	r3
    }
   b773c:	bd10      	pop	{r4, pc}

000b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b773e:	b510      	push	{r4, lr}
   b7740:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7742:	6800      	ldr	r0, [r0, #0]
   b7744:	b108      	cbz	r0, b774a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7746:	f7ff ffe6 	bl	b7716 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b774a:	4620      	mov	r0, r4
   b774c:	bd10      	pop	{r4, pc}

000b774e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b774e:	b513      	push	{r0, r1, r4, lr}
   b7750:	460b      	mov	r3, r1
   b7752:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7754:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7758:	466c      	mov	r4, sp
   b775a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b775e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7762:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7766:	e894 0003 	ldmia.w	r4, {r0, r1}
   b776a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b776e:	b002      	add	sp, #8
   b7770:	bd10      	pop	{r4, pc}
	...

000b7774 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7774:	4802      	ldr	r0, [pc, #8]	; (b7780 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7776:	2300      	movs	r3, #0
   b7778:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b777a:	f7ff bc7d 	b.w	b7078 <os_mutex_recursive_create>
   b777e:	bf00      	nop
   b7780:	2003e654 	.word	0x2003e654

000b7784 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7784:	2200      	movs	r2, #0
   b7786:	6840      	ldr	r0, [r0, #4]
   b7788:	4611      	mov	r1, r2
   b778a:	f7ff bef5 	b.w	b7578 <network_ready>

000b778e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b778e:	2200      	movs	r2, #0
   b7790:	6840      	ldr	r0, [r0, #4]
   b7792:	4611      	mov	r1, r2
   b7794:	f7ff bf10 	b.w	b75b8 <network_listening>

000b7798 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7798:	2200      	movs	r2, #0
   b779a:	6840      	ldr	r0, [r0, #4]
   b779c:	4611      	mov	r1, r2
   b779e:	f7ff bf1b 	b.w	b75d8 <network_get_listen_timeout>

000b77a2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77a2:	6840      	ldr	r0, [r0, #4]
   b77a4:	2200      	movs	r2, #0
   b77a6:	f7ff bf0f 	b.w	b75c8 <network_set_listen_timeout>

000b77aa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77aa:	6840      	ldr	r0, [r0, #4]
   b77ac:	2200      	movs	r2, #0
   b77ae:	f081 0101 	eor.w	r1, r1, #1
   b77b2:	f7ff bef9 	b.w	b75a8 <network_listen>

000b77b6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77b6:	2300      	movs	r3, #0
   b77b8:	6840      	ldr	r0, [r0, #4]
   b77ba:	461a      	mov	r2, r3
   b77bc:	4619      	mov	r1, r3
   b77be:	f7ff beeb 	b.w	b7598 <network_off>

000b77c2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b77c2:	2300      	movs	r3, #0
   b77c4:	6840      	ldr	r0, [r0, #4]
   b77c6:	461a      	mov	r2, r3
   b77c8:	4619      	mov	r1, r3
   b77ca:	f7ff bedd 	b.w	b7588 <network_on>

000b77ce <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b77ce:	2200      	movs	r2, #0
   b77d0:	6840      	ldr	r0, [r0, #4]
   b77d2:	4611      	mov	r1, r2
   b77d4:	f7ff bec0 	b.w	b7558 <network_connecting>

000b77d8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b77d8:	6840      	ldr	r0, [r0, #4]
   b77da:	2200      	movs	r2, #0
   b77dc:	2102      	movs	r1, #2
   b77de:	f7ff bec3 	b.w	b7568 <network_disconnect>

000b77e2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b77e2:	2300      	movs	r3, #0
   b77e4:	6840      	ldr	r0, [r0, #4]
   b77e6:	461a      	mov	r2, r3
   b77e8:	f7ff beae 	b.w	b7548 <network_connect>

000b77ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b77ec:	4b08      	ldr	r3, [pc, #32]	; (b7810 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b77ee:	b510      	push	{r4, lr}
   b77f0:	2428      	movs	r4, #40	; 0x28
   b77f2:	4622      	mov	r2, r4
   b77f4:	4618      	mov	r0, r3
   b77f6:	2100      	movs	r1, #0
   b77f8:	f001 facc 	bl	b8d94 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b77fc:	4b05      	ldr	r3, [pc, #20]	; (b7814 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b77fe:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7804:	6042      	str	r2, [r0, #4]
   b7806:	2204      	movs	r2, #4
   b7808:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b780a:	4a03      	ldr	r2, [pc, #12]	; (b7818 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b780c:	601a      	str	r2, [r3, #0]
   b780e:	bd10      	pop	{r4, pc}
   b7810:	2003e660 	.word	0x2003e660
   b7814:	2003e658 	.word	0x2003e658
   b7818:	000bb58c 	.word	0x000bb58c

000b781c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b781c:	4770      	bx	lr

000b781e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b781e:	2000      	movs	r0, #0
   b7820:	4770      	bx	lr

000b7822 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7822:	b510      	push	{r4, lr}
   b7824:	2110      	movs	r1, #16
   b7826:	4604      	mov	r4, r0
   b7828:	f7fd f947 	bl	b4aba <_ZdlPvj>
   b782c:	4620      	mov	r0, r4
   b782e:	bd10      	pop	{r4, pc}

000b7830 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7830:	b508      	push	{r3, lr}
      { delete this; }
   b7832:	f7ff fff6 	bl	b7822 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7836:	bd08      	pop	{r3, pc}

000b7838 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7838:	b530      	push	{r4, r5, lr}
        type_(type) {
   b783a:	2200      	movs	r2, #0
   b783c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7840:	6002      	str	r2, [r0, #0]
   b7842:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7844:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7846:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7848:	680c      	ldr	r4, [r1, #0]
   b784a:	8085      	strh	r5, [r0, #4]
   b784c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b784e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7850:	bd30      	pop	{r4, r5, pc}

000b7852 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7852:	b510      	push	{r4, lr}
   b7854:	4604      	mov	r4, r0
    free((void*)msg_);
   b7856:	6800      	ldr	r0, [r0, #0]
   b7858:	f7ff fede 	bl	b7618 <free>
}
   b785c:	4620      	mov	r0, r4
   b785e:	bd10      	pop	{r4, pc}

000b7860 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7860:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7862:	68c4      	ldr	r4, [r0, #12]
   b7864:	b1f4      	cbz	r4, b78a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b7866:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7868:	2b02      	cmp	r3, #2
   b786a:	d103      	bne.n	b7874 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b786c:	f104 000c 	add.w	r0, r4, #12
   b7870:	f7ff ffef 	bl	b7852 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7874:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7876:	b135      	cbz	r5, b7886 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7878:	4628      	mov	r0, r5
   b787a:	f7fd fa71 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
   b787e:	2110      	movs	r1, #16
   b7880:	4628      	mov	r0, r5
   b7882:	f7fd f91a 	bl	b4aba <_ZdlPvj>
   b7886:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7888:	b135      	cbz	r5, b7898 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b788a:	4628      	mov	r0, r5
   b788c:	f7fd fa68 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
   b7890:	2110      	movs	r1, #16
   b7892:	4628      	mov	r0, r5
   b7894:	f7fd f911 	bl	b4aba <_ZdlPvj>
   b7898:	4620      	mov	r0, r4
   b789a:	2114      	movs	r1, #20
   b789c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b78a0:	f7fd b90b 	b.w	b4aba <_ZdlPvj>
   b78a4:	bd38      	pop	{r3, r4, r5, pc}

000b78a6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b78a6:	b510      	push	{r4, lr}
   b78a8:	b088      	sub	sp, #32
   b78aa:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b78ac:	4668      	mov	r0, sp
   b78ae:	f000 fd50 	bl	b8352 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b78b2:	4669      	mov	r1, sp
   b78b4:	a804      	add	r0, sp, #16
   b78b6:	f000 fd6f 	bl	b8398 <_ZN6StringC1ERKS_>
   b78ba:	a804      	add	r0, sp, #16
   b78bc:	47a0      	blx	r4
   b78be:	4604      	mov	r4, r0
   b78c0:	a804      	add	r0, sp, #16
   b78c2:	f000 fcfb 	bl	b82bc <_ZN6StringD1Ev>
    String p(param);
   b78c6:	4668      	mov	r0, sp
   b78c8:	f000 fcf8 	bl	b82bc <_ZN6StringD1Ev>
}
   b78cc:	4620      	mov	r0, r4
   b78ce:	b008      	add	sp, #32
   b78d0:	bd10      	pop	{r4, pc}

000b78d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b78d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b78d4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b78d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b78da:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b78dc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b78de:	461a      	mov	r2, r3
   b78e0:	4669      	mov	r1, sp
   b78e2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b78e4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b78e8:	f8ad 4000 	strh.w	r4, [sp]
   b78ec:	f7ff fdd4 	bl	b7498 <spark_function>
}
   b78f0:	b004      	add	sp, #16
   b78f2:	bd10      	pop	{r4, pc}

000b78f4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b78f4:	680b      	ldr	r3, [r1, #0]
   b78f6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b78f8:	684b      	ldr	r3, [r1, #4]
   b78fa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b78fc:	b113      	cbz	r3, b7904 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b78fe:	685a      	ldr	r2, [r3, #4]
   b7900:	3201      	adds	r2, #1
   b7902:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7904:	4770      	bx	lr

000b7906 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7906:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7908:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b790a:	4668      	mov	r0, sp
   b790c:	460d      	mov	r5, r1
   b790e:	f7ff fff1 	bl	b78f4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7912:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7914:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7916:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7918:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b791a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b791c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b791e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b7920:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7922:	f7ff ff0c 	bl	b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7926:	b135      	cbz	r5, b7936 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7928:	1d28      	adds	r0, r5, #4
   b792a:	f7ff ff08 	bl	b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b792e:	2108      	movs	r1, #8
   b7930:	4628      	mov	r0, r5
   b7932:	f7fd f8c2 	bl	b4aba <_ZdlPvj>
        return p;
    }
   b7936:	4620      	mov	r0, r4
   b7938:	b003      	add	sp, #12
   b793a:	bd30      	pop	{r4, r5, pc}

000b793c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b793c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b793e:	b510      	push	{r4, lr}
      if (_M_empty())
   b7940:	b90a      	cbnz	r2, b7946 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7942:	f001 f9a9 	bl	b8c98 <_ZSt25__throw_bad_function_callv>
    }
   b7946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b794a:	68c3      	ldr	r3, [r0, #12]
   b794c:	4718      	bx	r3

000b794e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b794e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7950:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7952:	f100 0110 	add.w	r1, r0, #16
   b7956:	f7ff fff1 	bl	b793c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b795a:	bd08      	pop	{r3, pc}

000b795c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b795c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b795e:	b510      	push	{r4, lr}
      if (_M_empty())
   b7960:	b90a      	cbnz	r2, b7966 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7962:	f001 f999 	bl	b8c98 <_ZSt25__throw_bad_function_callv>
    }
   b7966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b796a:	68c3      	ldr	r3, [r0, #12]
   b796c:	4718      	bx	r3

000b796e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b796e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7970:	6800      	ldr	r0, [r0, #0]
   b7972:	f100 0110 	add.w	r1, r0, #16
   b7976:	f7ff fff1 	bl	b795c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b797a:	bd08      	pop	{r3, pc}

000b797c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b797c:	b538      	push	{r3, r4, r5, lr}
   b797e:	2300      	movs	r3, #0
   b7980:	4604      	mov	r4, r0
   b7982:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7984:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7986:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7988:	f7fd f893 	bl	b4ab2 <_Znwj>
   b798c:	b128      	cbz	r0, b799a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b798e:	2301      	movs	r3, #1
   b7990:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7994:	4b02      	ldr	r3, [pc, #8]	; (b79a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7996:	6003      	str	r3, [r0, #0]
   b7998:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b799a:	6020      	str	r0, [r4, #0]
	}
   b799c:	4620      	mov	r0, r4
   b799e:	bd38      	pop	{r3, r4, r5, pc}
   b79a0:	000bb5c8 	.word	0x000bb5c8

000b79a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b79a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b79a6:	2300      	movs	r3, #0
   b79a8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b79aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b79ac:	4604      	mov	r4, r0
   b79ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b79b0:	b12b      	cbz	r3, b79be <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b79b2:	2202      	movs	r2, #2
   b79b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b79b6:	68eb      	ldr	r3, [r5, #12]
   b79b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b79ba:	68ab      	ldr	r3, [r5, #8]
   b79bc:	60a3      	str	r3, [r4, #8]
    }
   b79be:	4620      	mov	r0, r4
   b79c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b79c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b79c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b79c6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b79c8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b79ca:	4668      	mov	r0, sp
   b79cc:	f7ff ff34 	bl	b7838 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b79d0:	f04f 0302 	mov.w	r3, #2
   b79d4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b79d8:	2a00      	cmp	r2, #0
   b79da:	d103      	bne.n	b79e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b79dc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b79e0:	2900      	cmp	r1, #0
   b79e2:	d1f7      	bne.n	b79d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b79e4:	d125      	bne.n	b7a32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b79e6:	f104 050c 	add.w	r5, r4, #12
   b79ea:	4669      	mov	r1, sp
   b79ec:	4628      	mov	r0, r5
   b79ee:	f7ff ff23 	bl	b7838 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b79f2:	f3bf 8f5b 	dmb	ish
   b79f6:	2301      	movs	r3, #1
   b79f8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b79fa:	2000      	movs	r0, #0
   b79fc:	f104 0308 	add.w	r3, r4, #8
   b7a00:	f3bf 8f5b 	dmb	ish
   b7a04:	e853 6f00 	ldrex	r6, [r3]
   b7a08:	e843 0200 	strex	r2, r0, [r3]
   b7a0c:	2a00      	cmp	r2, #0
   b7a0e:	d1f9      	bne.n	b7a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7a10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7a14:	b16e      	cbz	r6, b7a32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7a16:	f7ff fcf9 	bl	b740c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7a1a:	b178      	cbz	r0, b7a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7a1c:	4629      	mov	r1, r5
   b7a1e:	4630      	mov	r0, r6
   b7a20:	f7ff ff8c 	bl	b793c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7a24:	4630      	mov	r0, r6
   b7a26:	f7fd f99b 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7a2a:	2110      	movs	r1, #16
   b7a2c:	4630      	mov	r0, r6
   b7a2e:	f7fd f844 	bl	b4aba <_ZdlPvj>
        p_->setError(std::move(error));
   b7a32:	4668      	mov	r0, sp
   b7a34:	f7ff ff0d 	bl	b7852 <_ZN8particle5ErrorD1Ev>
    }
   b7a38:	b009      	add	sp, #36	; 0x24
   b7a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7a3c:	4631      	mov	r1, r6
   b7a3e:	a802      	add	r0, sp, #8
   b7a40:	f7ff ffb0 	bl	b79a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7a44:	68e0      	ldr	r0, [r4, #12]
   b7a46:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7a4a:	b108      	cbz	r0, b7a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7a4c:	f001 f9e0 	bl	b8e10 <strdup>
        type_(type) {
   b7a50:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7a52:	2010      	movs	r0, #16
   b7a54:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7a58:	f7fd f82b 	bl	b4ab2 <_Znwj>
   b7a5c:	4605      	mov	r5, r0
   b7a5e:	b1e8      	cbz	r0, b7a9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7a60:	2700      	movs	r7, #0
   b7a62:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a64:	2018      	movs	r0, #24
   b7a66:	f7fd f824 	bl	b4ab2 <_Znwj>
   b7a6a:	4604      	mov	r4, r0
   b7a6c:	b188      	cbz	r0, b7a92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7a6e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7a70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7a72:	a802      	add	r0, sp, #8
   b7a74:	f7ff fe6b 	bl	b774e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a78:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7a7a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a7c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7a80:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7a82:	a906      	add	r1, sp, #24
   b7a84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a86:	60e3      	str	r3, [r4, #12]
   b7a88:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7a8c:	9205      	str	r2, [sp, #20]
   b7a8e:	f7ff fed3 	bl	b7838 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7a92:	4b08      	ldr	r3, [pc, #32]	; (b7ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7a94:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7a96:	4b08      	ldr	r3, [pc, #32]	; (b7ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7a98:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7a9a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7a9c:	a806      	add	r0, sp, #24
   b7a9e:	f7ff fed8 	bl	b7852 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7aa2:	a802      	add	r0, sp, #8
   b7aa4:	f7fd f95c 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7aa8:	2200      	movs	r2, #0
   b7aaa:	4629      	mov	r1, r5
   b7aac:	4803      	ldr	r0, [pc, #12]	; (b7abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7aae:	f7ff fcb5 	bl	b741c <application_thread_invoke>
   b7ab2:	e7b7      	b.n	b7a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7ab4:	000b794f 	.word	0x000b794f
   b7ab8:	000b7bd1 	.word	0x000b7bd1
   b7abc:	000b76ef 	.word	0x000b76ef

000b7ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ac4:	b08b      	sub	sp, #44	; 0x2c
   b7ac6:	4605      	mov	r5, r0
   b7ac8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7acc:	460f      	mov	r7, r1
   b7ace:	4690      	mov	r8, r2
   b7ad0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7ad2:	f7ff fcf1 	bl	b74b8 <spark_cloud_flag_connected>
   b7ad6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7ad8:	4683      	mov	fp, r0
   b7ada:	bb38      	cbnz	r0, b7b2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7adc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7ae0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7ae2:	a905      	add	r1, sp, #20
   b7ae4:	4630      	mov	r0, r6
   b7ae6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7aea:	f7ff fea5 	bl	b7838 <_ZN8particle5ErrorC1EOS0_>
   b7aee:	2014      	movs	r0, #20
   b7af0:	f7fc ffdf 	bl	b4ab2 <_Znwj>
   b7af4:	4604      	mov	r4, r0
   b7af6:	b148      	cbz	r0, b7b0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7af8:	2302      	movs	r3, #2
   b7afa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7afc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7afe:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7b02:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7b04:	4631      	mov	r1, r6
   b7b06:	300c      	adds	r0, #12
   b7b08:	f7ff fe96 	bl	b7838 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7b0c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7b0e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7b10:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7b14:	f7ff ff32 	bl	b797c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7b18:	4630      	mov	r0, r6
   b7b1a:	f7ff fe9a 	bl	b7852 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7b1e:	a805      	add	r0, sp, #20
   b7b20:	f7ff fe97 	bl	b7852 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7b24:	4628      	mov	r0, r5
   b7b26:	b00b      	add	sp, #44	; 0x2c
   b7b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7b2c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7b2e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7b30:	2014      	movs	r0, #20
   b7b32:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7b36:	9307      	str	r3, [sp, #28]
   b7b38:	f7fc ffbb 	bl	b4ab2 <_Znwj>
   b7b3c:	4601      	mov	r1, r0
   b7b3e:	b118      	cbz	r0, b7b48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7b44:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7b46:	7044      	strb	r4, [r0, #1]
   b7b48:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7b4a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7b4c:	f7ff ff16 	bl	b797c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7b50:	4b1e      	ldr	r3, [pc, #120]	; (b7bcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7b52:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7b54:	2008      	movs	r0, #8
   b7b56:	f7fc ffac 	bl	b4ab2 <_Znwj>
   b7b5a:	4604      	mov	r4, r0
   b7b5c:	b110      	cbz	r0, b7b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b7b5e:	a903      	add	r1, sp, #12
   b7b60:	f7ff fec8 	bl	b78f4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7b64:	9600      	str	r6, [sp, #0]
   b7b66:	fa5f f38a 	uxtb.w	r3, sl
   b7b6a:	464a      	mov	r2, r9
   b7b6c:	4641      	mov	r1, r8
   b7b6e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7b70:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7b72:	f7ff fcb1 	bl	b74d8 <spark_send_event>
   b7b76:	b9b8      	cbnz	r0, b7ba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7b78:	9b03      	ldr	r3, [sp, #12]
   b7b7a:	785b      	ldrb	r3, [r3, #1]
   b7b7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7b80:	b993      	cbnz	r3, b7ba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7b82:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7b86:	a905      	add	r1, sp, #20
   b7b88:	a803      	add	r0, sp, #12
   b7b8a:	9205      	str	r2, [sp, #20]
   b7b8c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7b90:	f7ff ff18 	bl	b79c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7b94:	a805      	add	r0, sp, #20
   b7b96:	f7ff fe5c 	bl	b7852 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b7b9a:	a805      	add	r0, sp, #20
   b7b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7b9e:	f7ff feb2 	bl	b7906 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b7ba2:	a806      	add	r0, sp, #24
   b7ba4:	f7ff fdcb 	bl	b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ba8:	a903      	add	r1, sp, #12
   b7baa:	a805      	add	r0, sp, #20
   b7bac:	f7ff fea2 	bl	b78f4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7bb0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7bb2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7bb4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b7bb6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b7bb8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7bba:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b7bbc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b7bbe:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b7bc0:	f7ff fdbd 	bl	b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7bc4:	a804      	add	r0, sp, #16
   b7bc6:	f7ff fdba 	bl	b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b7bca:	e7ab      	b.n	b7b24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b7bcc:	000b7c4d 	.word	0x000b7c4d

000b7bd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b7bd0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bd4:	4605      	mov	r5, r0
	switch (__op)
   b7bd6:	d103      	bne.n	b7be0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7bd8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7bda:	6003      	str	r3, [r0, #0]
      }
   b7bdc:	2000      	movs	r0, #0
   b7bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7be0:	2a02      	cmp	r2, #2
   b7be2:	d010      	beq.n	b7c06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b7be4:	2a03      	cmp	r2, #3
   b7be6:	d1f9      	bne.n	b7bdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7be8:	6804      	ldr	r4, [r0, #0]
   b7bea:	2c00      	cmp	r4, #0
   b7bec:	d0f6      	beq.n	b7bdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b7bee:	f104 0010 	add.w	r0, r4, #16
   b7bf2:	f7ff fe2e 	bl	b7852 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7bf6:	4620      	mov	r0, r4
   b7bf8:	f7fd f8b2 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7bfc:	2118      	movs	r1, #24
   b7bfe:	4620      	mov	r0, r4
   b7c00:	f7fc ff5b 	bl	b4aba <_ZdlPvj>
   b7c04:	e7ea      	b.n	b7bdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7c06:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7c08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7c0a:	f7fc ff52 	bl	b4ab2 <_Znwj>
   b7c0e:	4604      	mov	r4, r0
   b7c10:	b150      	cbz	r0, b7c28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b7c12:	4631      	mov	r1, r6
   b7c14:	f7ff fec6 	bl	b79a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7c18:	6930      	ldr	r0, [r6, #16]
   b7c1a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7c1e:	b108      	cbz	r0, b7c24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7c20:	f001 f8f6 	bl	b8e10 <strdup>
        type_(type) {
   b7c24:	6120      	str	r0, [r4, #16]
   b7c26:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7c28:	602c      	str	r4, [r5, #0]
	}
   b7c2a:	e7d7      	b.n	b7bdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7c2c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7c2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7c2e:	2300      	movs	r3, #0
   b7c30:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7c32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7c34:	4604      	mov	r4, r0
   b7c36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7c38:	b12b      	cbz	r3, b7c46 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7c3a:	2202      	movs	r2, #2
   b7c3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7c3e:	68eb      	ldr	r3, [r5, #12]
   b7c40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7c42:	68ab      	ldr	r3, [r5, #8]
   b7c44:	60a3      	str	r3, [r4, #8]
    }
   b7c46:	4620      	mov	r0, r4
   b7c48:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7c4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c4e:	b089      	sub	sp, #36	; 0x24
   b7c50:	4604      	mov	r4, r0
   b7c52:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7c54:	a801      	add	r0, sp, #4
   b7c56:	4611      	mov	r1, r2
   b7c58:	f7ff fe55 	bl	b7906 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7c5c:	b1a4      	cbz	r4, b7c88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7c5e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7c60:	b11d      	cbz	r5, b7c6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b7c62:	4628      	mov	r0, r5
   b7c64:	f001 f8d4 	bl	b8e10 <strdup>
   b7c68:	4605      	mov	r5, r0
   b7c6a:	a801      	add	r0, sp, #4
   b7c6c:	a903      	add	r1, sp, #12
        type_(type) {
   b7c6e:	9503      	str	r5, [sp, #12]
   b7c70:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7c74:	f7ff fea6 	bl	b79c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7c78:	a803      	add	r0, sp, #12
   b7c7a:	f7ff fdea 	bl	b7852 <_ZN8particle5ErrorD1Ev>
   b7c7e:	a802      	add	r0, sp, #8
   b7c80:	f7ff fd5d 	bl	b773e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c84:	b009      	add	sp, #36	; 0x24
   b7c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7c88:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7c8a:	2301      	movs	r3, #1
   b7c8c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7c90:	2a00      	cmp	r2, #0
   b7c92:	d103      	bne.n	b7c9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7c94:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7c98:	2900      	cmp	r1, #0
   b7c9a:	d1f7      	bne.n	b7c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7c9c:	d1ef      	bne.n	b7c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7c9e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7ca0:	f3bf 8f5b 	dmb	ish
   b7ca4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7ca6:	1d2b      	adds	r3, r5, #4
   b7ca8:	f3bf 8f5b 	dmb	ish
   b7cac:	e853 6f00 	ldrex	r6, [r3]
   b7cb0:	e843 4200 	strex	r2, r4, [r3]
   b7cb4:	2a00      	cmp	r2, #0
   b7cb6:	d1f9      	bne.n	b7cac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b7cb8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7cbc:	2e00      	cmp	r6, #0
   b7cbe:	d0de      	beq.n	b7c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b7cc0:	4620      	mov	r0, r4
   b7cc2:	f7ff fba3 	bl	b740c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7cc6:	4607      	mov	r7, r0
   b7cc8:	b160      	cbz	r0, b7ce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7cca:	f105 010c 	add.w	r1, r5, #12
   b7cce:	4630      	mov	r0, r6
   b7cd0:	f7ff fe44 	bl	b795c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b7cd4:	4630      	mov	r0, r6
   b7cd6:	f7fd f843 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7cda:	2110      	movs	r1, #16
   b7cdc:	4630      	mov	r0, r6
   b7cde:	f7fc feec 	bl	b4aba <_ZdlPvj>
   b7ce2:	e7cc      	b.n	b7c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7ce4:	4631      	mov	r1, r6
   b7ce6:	a803      	add	r0, sp, #12
   b7ce8:	f7ff ffa0 	bl	b7c2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7cec:	7b2b      	ldrb	r3, [r5, #12]
   b7cee:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7cf2:	2010      	movs	r0, #16
   b7cf4:	f7fc fedd 	bl	b4ab2 <_Znwj>
   b7cf8:	4605      	mov	r5, r0
   b7cfa:	b1d0      	cbz	r0, b7d32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7cfc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7cfe:	2014      	movs	r0, #20
   b7d00:	f7fc fed7 	bl	b4ab2 <_Znwj>
   b7d04:	4604      	mov	r4, r0
   b7d06:	b178      	cbz	r0, b7d28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7d08:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7d0a:	4601      	mov	r1, r0
   b7d0c:	a803      	add	r0, sp, #12
   b7d0e:	f7ff fd1e 	bl	b774e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d12:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7d14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d16:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d18:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7d1a:	9205      	str	r2, [sp, #20]
   b7d1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d1e:	60e3      	str	r3, [r4, #12]
   b7d20:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b7d24:	9206      	str	r2, [sp, #24]
   b7d26:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7d28:	4b06      	ldr	r3, [pc, #24]	; (b7d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7d2a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7d2c:	4b06      	ldr	r3, [pc, #24]	; (b7d48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d2e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7d30:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b7d32:	a803      	add	r0, sp, #12
   b7d34:	f7fd f814 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7d38:	2200      	movs	r2, #0
   b7d3a:	4629      	mov	r1, r5
   b7d3c:	4803      	ldr	r0, [pc, #12]	; (b7d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7d3e:	f7ff fb6d 	bl	b741c <application_thread_invoke>
   b7d42:	e7c7      	b.n	b7cd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7d44:	000b796f 	.word	0x000b796f
   b7d48:	000b7d51 	.word	0x000b7d51
   b7d4c:	000b76ef 	.word	0x000b76ef

000b7d50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7d50:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7d52:	b570      	push	{r4, r5, r6, lr}
   b7d54:	4604      	mov	r4, r0
	switch (__op)
   b7d56:	d103      	bne.n	b7d60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7d58:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7d5a:	6003      	str	r3, [r0, #0]
      }
   b7d5c:	2000      	movs	r0, #0
   b7d5e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7d60:	2a02      	cmp	r2, #2
   b7d62:	d00c      	beq.n	b7d7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7d64:	2a03      	cmp	r2, #3
   b7d66:	d1f9      	bne.n	b7d5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7d68:	6804      	ldr	r4, [r0, #0]
   b7d6a:	2c00      	cmp	r4, #0
   b7d6c:	d0f6      	beq.n	b7d5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7d6e:	4620      	mov	r0, r4
   b7d70:	f7fc fff6 	bl	b4d60 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7d74:	2114      	movs	r1, #20
   b7d76:	4620      	mov	r0, r4
   b7d78:	f7fc fe9f 	bl	b4aba <_ZdlPvj>
   b7d7c:	e7ee      	b.n	b7d5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d7e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7d80:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7d82:	f7fc fe96 	bl	b4ab2 <_Znwj>
   b7d86:	4605      	mov	r5, r0
   b7d88:	b120      	cbz	r0, b7d94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7d8a:	4631      	mov	r1, r6
   b7d8c:	f7ff ff4e 	bl	b7c2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7d90:	7c33      	ldrb	r3, [r6, #16]
   b7d92:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7d94:	6025      	str	r5, [r4, #0]
	}
   b7d96:	e7e1      	b.n	b7d5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7d98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d98:	2200      	movs	r2, #0
   b7d9a:	6840      	ldr	r0, [r0, #4]
   b7d9c:	4611      	mov	r1, r2
   b7d9e:	f7ff bc0b 	b.w	b75b8 <network_listening>

000b7da2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7da2:	2200      	movs	r2, #0
   b7da4:	6840      	ldr	r0, [r0, #4]
   b7da6:	4611      	mov	r1, r2
   b7da8:	f7ff bc16 	b.w	b75d8 <network_get_listen_timeout>

000b7dac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7dac:	6840      	ldr	r0, [r0, #4]
   b7dae:	2200      	movs	r2, #0
   b7db0:	f7ff bc0a 	b.w	b75c8 <network_set_listen_timeout>

000b7db4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7db4:	6840      	ldr	r0, [r0, #4]
   b7db6:	2200      	movs	r2, #0
   b7db8:	f081 0101 	eor.w	r1, r1, #1
   b7dbc:	f7ff bbf4 	b.w	b75a8 <network_listen>

000b7dc0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7dc0:	2300      	movs	r3, #0
   b7dc2:	6840      	ldr	r0, [r0, #4]
   b7dc4:	461a      	mov	r2, r3
   b7dc6:	4619      	mov	r1, r3
   b7dc8:	f7ff bbe6 	b.w	b7598 <network_off>

000b7dcc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7dcc:	2300      	movs	r3, #0
   b7dce:	6840      	ldr	r0, [r0, #4]
   b7dd0:	461a      	mov	r2, r3
   b7dd2:	4619      	mov	r1, r3
   b7dd4:	f7ff bbd8 	b.w	b7588 <network_on>

000b7dd8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7dd8:	2200      	movs	r2, #0
   b7dda:	6840      	ldr	r0, [r0, #4]
   b7ddc:	4611      	mov	r1, r2
   b7dde:	f7ff bbcb 	b.w	b7578 <network_ready>

000b7de2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7de2:	2200      	movs	r2, #0
   b7de4:	6840      	ldr	r0, [r0, #4]
   b7de6:	4611      	mov	r1, r2
   b7de8:	f7ff bbb6 	b.w	b7558 <network_connecting>

000b7dec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7dec:	6840      	ldr	r0, [r0, #4]
   b7dee:	2200      	movs	r2, #0
   b7df0:	2102      	movs	r1, #2
   b7df2:	f7ff bbb9 	b.w	b7568 <network_disconnect>

000b7df6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7df6:	2300      	movs	r3, #0
   b7df8:	6840      	ldr	r0, [r0, #4]
   b7dfa:	461a      	mov	r2, r3
   b7dfc:	f7ff bba4 	b.w	b7548 <network_connect>

000b7e00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7e00:	4b02      	ldr	r3, [pc, #8]	; (b7e0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7e02:	2203      	movs	r2, #3
   b7e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7e06:	4a02      	ldr	r2, [pc, #8]	; (b7e10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7e08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7e0a:	4770      	bx	lr
   b7e0c:	2003e688 	.word	0x2003e688
   b7e10:	000bb5e4 	.word	0x000bb5e4

000b7e14 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7e14:	4770      	bx	lr

000b7e16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e18:	4606      	mov	r6, r0
   b7e1a:	4615      	mov	r5, r2
   b7e1c:	460c      	mov	r4, r1
   b7e1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7e20:	42bc      	cmp	r4, r7
   b7e22:	d006      	beq.n	b7e32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7e24:	6833      	ldr	r3, [r6, #0]
   b7e26:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7e2a:	689b      	ldr	r3, [r3, #8]
   b7e2c:	4630      	mov	r0, r6
   b7e2e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7e30:	e7f6      	b.n	b7e20 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7e32:	4628      	mov	r0, r5
   b7e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e36 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7e36:	7c00      	ldrb	r0, [r0, #16]
   b7e38:	2200      	movs	r2, #0
   b7e3a:	f7ff b9c5 	b.w	b71c8 <hal_i2c_write>

000b7e3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7e3e:	7c00      	ldrb	r0, [r0, #16]
   b7e40:	2100      	movs	r1, #0
   b7e42:	f7ff b9c9 	b.w	b71d8 <hal_i2c_available>

000b7e46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7e46:	7c00      	ldrb	r0, [r0, #16]
   b7e48:	2100      	movs	r1, #0
   b7e4a:	f7ff b9cd 	b.w	b71e8 <hal_i2c_read>

000b7e4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7e4e:	7c00      	ldrb	r0, [r0, #16]
   b7e50:	2100      	movs	r1, #0
   b7e52:	f7ff b9d1 	b.w	b71f8 <hal_i2c_peek>

000b7e56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7e56:	7c00      	ldrb	r0, [r0, #16]
   b7e58:	2100      	movs	r1, #0
   b7e5a:	f7ff b9d5 	b.w	b7208 <hal_i2c_flush>

000b7e5e <_ZN7TwoWireD0Ev>:
   b7e5e:	b510      	push	{r4, lr}
   b7e60:	2114      	movs	r1, #20
   b7e62:	4604      	mov	r4, r0
   b7e64:	f7fc fe29 	bl	b4aba <_ZdlPvj>
   b7e68:	4620      	mov	r0, r4
   b7e6a:	bd10      	pop	{r4, pc}

000b7e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7e6c:	b538      	push	{r3, r4, r5, lr}
   b7e6e:	4604      	mov	r4, r0
   b7e70:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e76:	2200      	movs	r2, #0
   b7e78:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7e7c:	4b09      	ldr	r3, [pc, #36]	; (b7ea4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7e7e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7e80:	4608      	mov	r0, r1
   b7e82:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7e84:	4629      	mov	r1, r5
   b7e86:	f7ff f9cf 	bl	b7228 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7e8a:	30bf      	adds	r0, #191	; 0xbf
   b7e8c:	d108      	bne.n	b7ea0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7e8e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7e90:	07db      	lsls	r3, r3, #31
   b7e92:	d505      	bpl.n	b7ea0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7e94:	6868      	ldr	r0, [r5, #4]
   b7e96:	f7ff fbbf 	bl	b7618 <free>
    free(conf.tx_buffer);
   b7e9a:	68e8      	ldr	r0, [r5, #12]
   b7e9c:	f7ff fbbc 	bl	b7618 <free>
}
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	bd38      	pop	{r3, r4, r5, pc}
   b7ea4:	000bb620 	.word	0x000bb620

000b7ea8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7ea8:	2300      	movs	r3, #0
   b7eaa:	7c00      	ldrb	r0, [r0, #16]
   b7eac:	461a      	mov	r2, r3
   b7eae:	4619      	mov	r1, r3
   b7eb0:	f7ff b972 	b.w	b7198 <hal_i2c_begin>

000b7eb4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7eb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7eb6:	2200      	movs	r2, #0
   b7eb8:	2314      	movs	r3, #20
   b7eba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7ebe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7ec2:	780b      	ldrb	r3, [r1, #0]
   b7ec4:	f88d 3008 	strb.w	r3, [sp, #8]
   b7ec8:	684b      	ldr	r3, [r1, #4]
   b7eca:	9303      	str	r3, [sp, #12]
   b7ecc:	68cb      	ldr	r3, [r1, #12]
   b7ece:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7ed0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7ed2:	7a0b      	ldrb	r3, [r1, #8]
   b7ed4:	9305      	str	r3, [sp, #20]
   b7ed6:	a901      	add	r1, sp, #4
   b7ed8:	f7ff f9be 	bl	b7258 <hal_i2c_request_ex>
}
   b7edc:	b007      	add	sp, #28
   b7ede:	f85d fb04 	ldr.w	pc, [sp], #4

000b7ee2 <_ZN7TwoWire11requestFromEhjh>:
{
   b7ee2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7ee4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7ee6:	f88d 1000 	strb.w	r1, [sp]
   b7eea:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7eee:	9103      	str	r1, [sp, #12]
   b7ef0:	bf18      	it	ne
   b7ef2:	2301      	movne	r3, #1
   b7ef4:	4669      	mov	r1, sp
    size_ = size;
   b7ef6:	9201      	str	r2, [sp, #4]
   b7ef8:	f88d 3008 	strb.w	r3, [sp, #8]
   b7efc:	f7ff ffda 	bl	b7eb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7f00:	b005      	add	sp, #20
   b7f02:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f06 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7f06:	2301      	movs	r3, #1
   b7f08:	f7ff bfeb 	b.w	b7ee2 <_ZN7TwoWire11requestFromEhjh>

000b7f0c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7f0c:	7c00      	ldrb	r0, [r0, #16]
   b7f0e:	2200      	movs	r2, #0
   b7f10:	f7ff b94a 	b.w	b71a8 <hal_i2c_begin_transmission>

000b7f14 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7f14:	b2c9      	uxtb	r1, r1
   b7f16:	f7ff bff9 	b.w	b7f0c <_ZN7TwoWire17beginTransmissionEh>

000b7f1a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7f1a:	7c00      	ldrb	r0, [r0, #16]
   b7f1c:	2200      	movs	r2, #0
   b7f1e:	f7ff b94b 	b.w	b71b8 <hal_i2c_end_transmission>

000b7f22 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7f22:	2101      	movs	r1, #1
   b7f24:	f7ff bff9 	b.w	b7f1a <_ZN7TwoWire15endTransmissionEh>

000b7f28 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7f28:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7f2a:	2100      	movs	r1, #0
   b7f2c:	7c00      	ldrb	r0, [r0, #16]
   b7f2e:	f7ff f983 	bl	b7238 <hal_i2c_lock>
}
   b7f32:	fab0 f080 	clz	r0, r0
   b7f36:	0940      	lsrs	r0, r0, #5
   b7f38:	bd08      	pop	{r3, pc}

000b7f3a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b7f3a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7f3c:	2100      	movs	r1, #0
   b7f3e:	7c00      	ldrb	r0, [r0, #16]
   b7f40:	f7ff f982 	bl	b7248 <hal_i2c_unlock>
}
   b7f44:	fab0 f080 	clz	r0, r0
   b7f48:	0940      	lsrs	r0, r0, #5
   b7f4a:	bd08      	pop	{r3, pc}

000b7f4c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b7f4c:	4700      	bx	r0
	...

000b7f50 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b7f50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b7f54:	2400      	movs	r4, #0
{
   b7f56:	461d      	mov	r5, r3
   b7f58:	460f      	mov	r7, r1
   b7f5a:	4690      	mov	r8, r2
   b7f5c:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b7f5e:	f7ff f913 	bl	b7188 <hal_interrupt_detach>
  if (priority >= 0) {
   b7f62:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7f64:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b7f68:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7f6c:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b7f70:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b7f74:	bfa2      	ittt	ge
   b7f76:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b7f7a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b7f7e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7f80:	4907      	ldr	r1, [pc, #28]	; (b7fa0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b7f82:	9400      	str	r4, [sp, #0]
   b7f84:	4643      	mov	r3, r8
   b7f86:	463a      	mov	r2, r7
   b7f88:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b7f8a:	bfa8      	it	ge
   b7f8c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7f90:	f7ff f8f2 	bl	b7178 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b7f94:	fab0 f080 	clz	r0, r0
   b7f98:	0940      	lsrs	r0, r0, #5
   b7f9a:	b004      	add	sp, #16
   b7f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7fa0:	000b7f4d 	.word	0x000b7f4d

000b7fa4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7fa4:	4770      	bx	lr

000b7fa6 <_ZN9IPAddressD0Ev>:
   b7fa6:	b510      	push	{r4, lr}
   b7fa8:	2118      	movs	r1, #24
   b7faa:	4604      	mov	r4, r0
   b7fac:	f7fc fd85 	bl	b4aba <_ZdlPvj>
   b7fb0:	4620      	mov	r0, r4
   b7fb2:	bd10      	pop	{r4, pc}

000b7fb4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7fb6:	7d03      	ldrb	r3, [r0, #20]
   b7fb8:	2b06      	cmp	r3, #6
{
   b7fba:	b08d      	sub	sp, #52	; 0x34
   b7fbc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7fbe:	f100 0704 	add.w	r7, r0, #4
   b7fc2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7fc6:	d012      	beq.n	b7fee <_ZNK9IPAddress7printToER5Print+0x3a>
   b7fc8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7fcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7fd0:	220a      	movs	r2, #10
   b7fd2:	4630      	mov	r0, r6
   b7fd4:	f000 f943 	bl	b825e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7fd8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7fda:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7fdc:	d019      	beq.n	b8012 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7fde:	2c00      	cmp	r4, #0
   b7fe0:	d0f4      	beq.n	b7fcc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7fe2:	212e      	movs	r1, #46	; 0x2e
   b7fe4:	4630      	mov	r0, r6
   b7fe6:	f000 f937 	bl	b8258 <_ZN5Print5printEc>
   b7fea:	4404      	add	r4, r0
   b7fec:	e7ee      	b.n	b7fcc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7fee:	232f      	movs	r3, #47	; 0x2f
   b7ff0:	466a      	mov	r2, sp
   b7ff2:	4639      	mov	r1, r7
   b7ff4:	200a      	movs	r0, #10
		buf[0] = 0;
   b7ff6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7ffa:	f7ff f935 	bl	b7268 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7ffe:	4668      	mov	r0, sp
   b8000:	f7fc fcfc 	bl	b49fc <strlen>
   b8004:	6833      	ldr	r3, [r6, #0]
   b8006:	4602      	mov	r2, r0
   b8008:	68db      	ldr	r3, [r3, #12]
   b800a:	4669      	mov	r1, sp
   b800c:	4630      	mov	r0, r6
   b800e:	4798      	blx	r3
   b8010:	4604      	mov	r4, r0
    }
    return n;
}
   b8012:	4620      	mov	r0, r4
   b8014:	b00d      	add	sp, #52	; 0x34
   b8016:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8018 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8018:	b510      	push	{r4, lr}
   b801a:	4b05      	ldr	r3, [pc, #20]	; (b8030 <_ZN9IPAddressC1Ev+0x18>)
   b801c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b801e:	2211      	movs	r2, #17
   b8020:	f840 3b04 	str.w	r3, [r0], #4
   b8024:	2100      	movs	r1, #0
   b8026:	f000 feb5 	bl	b8d94 <memset>
}
   b802a:	4620      	mov	r0, r4
   b802c:	bd10      	pop	{r4, pc}
   b802e:	bf00      	nop
   b8030:	000bb648 	.word	0x000bb648

000b8034 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8034:	4603      	mov	r3, r0
   b8036:	4a07      	ldr	r2, [pc, #28]	; (b8054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8038:	b510      	push	{r4, lr}
   b803a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b803e:	f101 0210 	add.w	r2, r1, #16
   b8042:	f851 4b04 	ldr.w	r4, [r1], #4
   b8046:	f843 4b04 	str.w	r4, [r3], #4
   b804a:	4291      	cmp	r1, r2
   b804c:	d1f9      	bne.n	b8042 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b804e:	780a      	ldrb	r2, [r1, #0]
   b8050:	701a      	strb	r2, [r3, #0]
}
   b8052:	bd10      	pop	{r4, pc}
   b8054:	000bb648 	.word	0x000bb648

000b8058 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8058:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b805a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b805e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8062:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8066:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b806a:	2304      	movs	r3, #4
   b806c:	6041      	str	r1, [r0, #4]
   b806e:	7503      	strb	r3, [r0, #20]
}
   b8070:	bd10      	pop	{r4, pc}
	...

000b8074 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8074:	b507      	push	{r0, r1, r2, lr}
   b8076:	4b06      	ldr	r3, [pc, #24]	; (b8090 <_ZN9IPAddressC1EPKh+0x1c>)
   b8078:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b807a:	78cb      	ldrb	r3, [r1, #3]
   b807c:	9300      	str	r3, [sp, #0]
   b807e:	788b      	ldrb	r3, [r1, #2]
   b8080:	784a      	ldrb	r2, [r1, #1]
   b8082:	7809      	ldrb	r1, [r1, #0]
   b8084:	f7ff ffe8 	bl	b8058 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8088:	b003      	add	sp, #12
   b808a:	f85d fb04 	ldr.w	pc, [sp], #4
   b808e:	bf00      	nop
   b8090:	000bb648 	.word	0x000bb648

000b8094 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8094:	4b01      	ldr	r3, [pc, #4]	; (b809c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8096:	4a02      	ldr	r2, [pc, #8]	; (b80a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8098:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b809a:	4770      	bx	lr
   b809c:	2003e690 	.word	0x2003e690
   b80a0:	000bb654 	.word	0x000bb654

000b80a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b80a4:	2300      	movs	r3, #0
   b80a6:	6840      	ldr	r0, [r0, #4]
   b80a8:	461a      	mov	r2, r3
   b80aa:	f7ff ba4d 	b.w	b7548 <network_connect>

000b80ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b80ae:	6840      	ldr	r0, [r0, #4]
   b80b0:	2200      	movs	r2, #0
   b80b2:	2102      	movs	r1, #2
   b80b4:	f7ff ba58 	b.w	b7568 <network_disconnect>

000b80b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b80b8:	2200      	movs	r2, #0
   b80ba:	6840      	ldr	r0, [r0, #4]
   b80bc:	4611      	mov	r1, r2
   b80be:	f7ff ba4b 	b.w	b7558 <network_connecting>

000b80c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b80c2:	2200      	movs	r2, #0
   b80c4:	6840      	ldr	r0, [r0, #4]
   b80c6:	4611      	mov	r1, r2
   b80c8:	f7ff ba56 	b.w	b7578 <network_ready>

000b80cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b80cc:	2300      	movs	r3, #0
   b80ce:	6840      	ldr	r0, [r0, #4]
   b80d0:	461a      	mov	r2, r3
   b80d2:	4619      	mov	r1, r3
   b80d4:	f7ff ba58 	b.w	b7588 <network_on>

000b80d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b80d8:	2300      	movs	r3, #0
   b80da:	6840      	ldr	r0, [r0, #4]
   b80dc:	461a      	mov	r2, r3
   b80de:	4619      	mov	r1, r3
   b80e0:	f7ff ba5a 	b.w	b7598 <network_off>

000b80e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b80e4:	6840      	ldr	r0, [r0, #4]
   b80e6:	2100      	movs	r1, #0
   b80e8:	f7ff ba7e 	b.w	b75e8 <network_is_on>

000b80ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b80ec:	6840      	ldr	r0, [r0, #4]
   b80ee:	2100      	movs	r1, #0
   b80f0:	f7ff ba82 	b.w	b75f8 <network_is_off>

000b80f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b80f4:	6840      	ldr	r0, [r0, #4]
   b80f6:	2200      	movs	r2, #0
   b80f8:	f081 0101 	eor.w	r1, r1, #1
   b80fc:	f7ff ba54 	b.w	b75a8 <network_listen>

000b8100 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8100:	6840      	ldr	r0, [r0, #4]
   b8102:	2200      	movs	r2, #0
   b8104:	f7ff ba60 	b.w	b75c8 <network_set_listen_timeout>

000b8108 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8108:	2200      	movs	r2, #0
   b810a:	6840      	ldr	r0, [r0, #4]
   b810c:	4611      	mov	r1, r2
   b810e:	f7ff ba63 	b.w	b75d8 <network_get_listen_timeout>

000b8112 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8112:	2200      	movs	r2, #0
   b8114:	6840      	ldr	r0, [r0, #4]
   b8116:	4611      	mov	r1, r2
   b8118:	f7ff ba4e 	b.w	b75b8 <network_listening>

000b811c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b811c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8120:	b095      	sub	sp, #84	; 0x54
   b8122:	4614      	mov	r4, r2
   b8124:	460d      	mov	r5, r1
   b8126:	4607      	mov	r7, r0
    IPAddress addr;
   b8128:	f7ff ff76 	bl	b8018 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b812c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b812e:	221c      	movs	r2, #28
   b8130:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8132:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8134:	f000 fe2e 	bl	b8d94 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8138:	2340      	movs	r3, #64	; 0x40
   b813a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b813c:	4620      	mov	r0, r4
   b813e:	466b      	mov	r3, sp
   b8140:	aa0c      	add	r2, sp, #48	; 0x30
   b8142:	2100      	movs	r1, #0
   b8144:	f7ff f8a0 	bl	b7288 <netdb_getaddrinfo>
    if (!r) {
   b8148:	4604      	mov	r4, r0
   b814a:	2800      	cmp	r0, #0
   b814c:	d14b      	bne.n	b81e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b814e:	4602      	mov	r2, r0
   b8150:	2101      	movs	r1, #1
   b8152:	6868      	ldr	r0, [r5, #4]
   b8154:	f7ff fa10 	bl	b7578 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8158:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b815a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b815c:	4622      	mov	r2, r4
   b815e:	6868      	ldr	r0, [r5, #4]
   b8160:	f7ff fa0a 	bl	b7578 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8164:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8166:	4681      	mov	r9, r0
        bool ok = false;
   b8168:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b816a:	2e00      	cmp	r6, #0
   b816c:	d03b      	beq.n	b81e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b816e:	2900      	cmp	r1, #0
   b8170:	d139      	bne.n	b81e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8172:	6873      	ldr	r3, [r6, #4]
   b8174:	2b02      	cmp	r3, #2
   b8176:	d003      	beq.n	b8180 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8178:	2b0a      	cmp	r3, #10
   b817a:	d011      	beq.n	b81a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b817c:	69f6      	ldr	r6, [r6, #28]
   b817e:	e7f4      	b.n	b816a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8180:	f1b8 0f00 	cmp.w	r8, #0
   b8184:	d0fa      	beq.n	b817c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8186:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8188:	a806      	add	r0, sp, #24
   b818a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b818c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b818e:	f7ff ff71 	bl	b8074 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8194:	1d3c      	adds	r4, r7, #4
   b8196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8198:	682b      	ldr	r3, [r5, #0]
   b819a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b819c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b819e:	e7ed      	b.n	b817c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b81a0:	f1b9 0f00 	cmp.w	r9, #0
   b81a4:	d0ea      	beq.n	b817c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b81a6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b81a8:	2210      	movs	r2, #16
   b81aa:	a801      	add	r0, sp, #4
   b81ac:	f000 fdf2 	bl	b8d94 <memset>
                    a.v = 6;
   b81b0:	2306      	movs	r3, #6
   b81b2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b81b6:	ad01      	add	r5, sp, #4
   b81b8:	f104 0308 	add.w	r3, r4, #8
   b81bc:	3418      	adds	r4, #24
   b81be:	6818      	ldr	r0, [r3, #0]
   b81c0:	6859      	ldr	r1, [r3, #4]
   b81c2:	462a      	mov	r2, r5
   b81c4:	c203      	stmia	r2!, {r0, r1}
   b81c6:	3308      	adds	r3, #8
   b81c8:	42a3      	cmp	r3, r4
   b81ca:	4615      	mov	r5, r2
   b81cc:	d1f7      	bne.n	b81be <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b81ce:	a901      	add	r1, sp, #4
   b81d0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b81d2:	ad07      	add	r5, sp, #28
   b81d4:	f7ff ff2e 	bl	b8034 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b81d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81da:	1d3c      	adds	r4, r7, #4
   b81dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b81de:	682b      	ldr	r3, [r5, #0]
   b81e0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b81e2:	4649      	mov	r1, r9
   b81e4:	e7ca      	b.n	b817c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b81e6:	9800      	ldr	r0, [sp, #0]
   b81e8:	f7ff f846 	bl	b7278 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b81ec:	4638      	mov	r0, r7
   b81ee:	b015      	add	sp, #84	; 0x54
   b81f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b81f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b81f4:	4b02      	ldr	r3, [pc, #8]	; (b8200 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b81f6:	4a03      	ldr	r2, [pc, #12]	; (b8204 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b81f8:	601a      	str	r2, [r3, #0]
   b81fa:	2200      	movs	r2, #0
   b81fc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b81fe:	4770      	bx	lr
   b8200:	2003e694 	.word	0x2003e694
   b8204:	000bb660 	.word	0x000bb660

000b8208 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b820a:	4606      	mov	r6, r0
   b820c:	460d      	mov	r5, r1
  size_t n = 0;
   b820e:	188f      	adds	r7, r1, r2
   b8210:	2400      	movs	r4, #0
  while (size--) {
   b8212:	42bd      	cmp	r5, r7
   b8214:	d00c      	beq.n	b8230 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8216:	6833      	ldr	r3, [r6, #0]
   b8218:	f815 1b01 	ldrb.w	r1, [r5], #1
   b821c:	689b      	ldr	r3, [r3, #8]
   b821e:	4630      	mov	r0, r6
   b8220:	4798      	blx	r3
     if (chunk>=0)
   b8222:	1e03      	subs	r3, r0, #0
   b8224:	db01      	blt.n	b822a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8226:	441c      	add	r4, r3
  while (size--) {
   b8228:	e7f3      	b.n	b8212 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b822a:	2c00      	cmp	r4, #0
   b822c:	bf08      	it	eq
   b822e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8230:	4620      	mov	r0, r4
   b8232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8234 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8234:	b513      	push	{r0, r1, r4, lr}
   b8236:	4604      	mov	r4, r0
    }
   b8238:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b823a:	b159      	cbz	r1, b8254 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b823c:	9101      	str	r1, [sp, #4]
   b823e:	f7fc fbdd 	bl	b49fc <strlen>
   b8242:	6823      	ldr	r3, [r4, #0]
   b8244:	9901      	ldr	r1, [sp, #4]
   b8246:	68db      	ldr	r3, [r3, #12]
   b8248:	4602      	mov	r2, r0
   b824a:	4620      	mov	r0, r4
    }
   b824c:	b002      	add	sp, #8
   b824e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8252:	4718      	bx	r3
    }
   b8254:	b002      	add	sp, #8
   b8256:	bd10      	pop	{r4, pc}

000b8258 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8258:	6803      	ldr	r3, [r0, #0]
   b825a:	689b      	ldr	r3, [r3, #8]
   b825c:	4718      	bx	r3

000b825e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b825e:	b530      	push	{r4, r5, lr}
   b8260:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8262:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8264:	2a01      	cmp	r2, #1
  *str = '\0';
   b8266:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b826a:	bf98      	it	ls
   b826c:	220a      	movls	r2, #10
   b826e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8270:	460d      	mov	r5, r1
   b8272:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8276:	fb01 5312 	mls	r3, r1, r2, r5
   b827a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b827e:	2b09      	cmp	r3, #9
   b8280:	bf94      	ite	ls
   b8282:	3330      	addls	r3, #48	; 0x30
   b8284:	3337      	addhi	r3, #55	; 0x37
   b8286:	b2db      	uxtb	r3, r3
  } while(n);
   b8288:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b828a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b828e:	d9ef      	bls.n	b8270 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8290:	4621      	mov	r1, r4
   b8292:	f7ff ffcf 	bl	b8234 <_ZN5Print5writeEPKc>
}
   b8296:	b00b      	add	sp, #44	; 0x2c
   b8298:	bd30      	pop	{r4, r5, pc}
	...

000b829c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b829c:	4b01      	ldr	r3, [pc, #4]	; (b82a4 <_GLOBAL__sub_I_RGB+0x8>)
   b829e:	2200      	movs	r2, #0
   b82a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b82a2:	4770      	bx	lr
   b82a4:	2003e69c 	.word	0x2003e69c

000b82a8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b82a8:	b510      	push	{r4, lr}
   b82aa:	4604      	mov	r4, r0
   b82ac:	4608      	mov	r0, r1
{
    _spi = spi;
   b82ae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b82b0:	f7fe fff2 	bl	b7298 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b82b4:	2300      	movs	r3, #0
   b82b6:	6063      	str	r3, [r4, #4]
}
   b82b8:	4620      	mov	r0, r4
   b82ba:	bd10      	pop	{r4, pc}

000b82bc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b82bc:	b510      	push	{r4, lr}
   b82be:	4604      	mov	r4, r0
{
	free(buffer);
   b82c0:	6800      	ldr	r0, [r0, #0]
   b82c2:	f7ff f9a9 	bl	b7618 <free>
}
   b82c6:	4620      	mov	r0, r4
   b82c8:	bd10      	pop	{r4, pc}

000b82ca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b82ca:	b510      	push	{r4, lr}
   b82cc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b82ce:	6800      	ldr	r0, [r0, #0]
   b82d0:	b108      	cbz	r0, b82d6 <_ZN6String10invalidateEv+0xc>
   b82d2:	f7ff f9a1 	bl	b7618 <free>
	buffer = NULL;
   b82d6:	2300      	movs	r3, #0
	capacity = len = 0;
   b82d8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b82dc:	6023      	str	r3, [r4, #0]
}
   b82de:	bd10      	pop	{r4, pc}

000b82e0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b82e0:	b538      	push	{r3, r4, r5, lr}
   b82e2:	4604      	mov	r4, r0
   b82e4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b82e6:	6800      	ldr	r0, [r0, #0]
   b82e8:	3101      	adds	r1, #1
   b82ea:	f7ff f99d 	bl	b7628 <realloc>
	if (newbuffer) {
   b82ee:	b110      	cbz	r0, b82f6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b82f0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b82f4:	2001      	movs	r0, #1
	}
	return 0;
}
   b82f6:	bd38      	pop	{r3, r4, r5, pc}

000b82f8 <_ZN6String7reserveEj>:
{
   b82f8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b82fa:	6803      	ldr	r3, [r0, #0]
{
   b82fc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b82fe:	b123      	cbz	r3, b830a <_ZN6String7reserveEj+0x12>
   b8300:	6843      	ldr	r3, [r0, #4]
   b8302:	428b      	cmp	r3, r1
   b8304:	d301      	bcc.n	b830a <_ZN6String7reserveEj+0x12>
   b8306:	2001      	movs	r0, #1
}
   b8308:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b830a:	4620      	mov	r0, r4
   b830c:	f7ff ffe8 	bl	b82e0 <_ZN6String12changeBufferEj>
   b8310:	2800      	cmp	r0, #0
   b8312:	d0f9      	beq.n	b8308 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8314:	68a3      	ldr	r3, [r4, #8]
   b8316:	2b00      	cmp	r3, #0
   b8318:	d1f5      	bne.n	b8306 <_ZN6String7reserveEj+0xe>
   b831a:	6822      	ldr	r2, [r4, #0]
   b831c:	7013      	strb	r3, [r2, #0]
   b831e:	e7f2      	b.n	b8306 <_ZN6String7reserveEj+0xe>

000b8320 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8320:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8322:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8324:	4611      	mov	r1, r2
   b8326:	9201      	str	r2, [sp, #4]
{
   b8328:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b832a:	f7ff ffe5 	bl	b82f8 <_ZN6String7reserveEj>
   b832e:	9a01      	ldr	r2, [sp, #4]
   b8330:	b928      	cbnz	r0, b833e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8332:	4620      	mov	r0, r4
   b8334:	f7ff ffc9 	bl	b82ca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8338:	4620      	mov	r0, r4
   b833a:	b003      	add	sp, #12
   b833c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b833e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8340:	4629      	mov	r1, r5
   b8342:	6820      	ldr	r0, [r4, #0]
   b8344:	f000 fcfe 	bl	b8d44 <memcpy>
	buffer[len] = 0;
   b8348:	6822      	ldr	r2, [r4, #0]
   b834a:	68a3      	ldr	r3, [r4, #8]
   b834c:	2100      	movs	r1, #0
   b834e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8350:	e7f2      	b.n	b8338 <_ZN6String4copyEPKcj+0x18>

000b8352 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8352:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8354:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8356:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b835a:	4604      	mov	r4, r0
	len = 0;
   b835c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b835e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8360:	b141      	cbz	r1, b8374 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8362:	4608      	mov	r0, r1
   b8364:	9101      	str	r1, [sp, #4]
   b8366:	f7fc fb49 	bl	b49fc <strlen>
   b836a:	9901      	ldr	r1, [sp, #4]
   b836c:	4602      	mov	r2, r0
   b836e:	4620      	mov	r0, r4
   b8370:	f7ff ffd6 	bl	b8320 <_ZN6String4copyEPKcj>
}
   b8374:	4620      	mov	r0, r4
   b8376:	b002      	add	sp, #8
   b8378:	bd10      	pop	{r4, pc}

000b837a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b837a:	4288      	cmp	r0, r1
{
   b837c:	b510      	push	{r4, lr}
   b837e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8380:	d005      	beq.n	b838e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8382:	680b      	ldr	r3, [r1, #0]
   b8384:	b12b      	cbz	r3, b8392 <_ZN6StringaSERKS_+0x18>
   b8386:	688a      	ldr	r2, [r1, #8]
   b8388:	4619      	mov	r1, r3
   b838a:	f7ff ffc9 	bl	b8320 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b838e:	4620      	mov	r0, r4
   b8390:	bd10      	pop	{r4, pc}
	else invalidate();
   b8392:	f7ff ff9a 	bl	b82ca <_ZN6String10invalidateEv>
   b8396:	e7fa      	b.n	b838e <_ZN6StringaSERKS_+0x14>

000b8398 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8398:	b510      	push	{r4, lr}
	buffer = NULL;
   b839a:	2300      	movs	r3, #0
String::String(const String &value)
   b839c:	4604      	mov	r4, r0
	capacity = 0;
   b839e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b83a2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b83a4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b83a6:	f7ff ffe8 	bl	b837a <_ZN6StringaSERKS_>
}
   b83aa:	4620      	mov	r0, r4
   b83ac:	bd10      	pop	{r4, pc}

000b83ae <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b83ae:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b83b0:	6882      	ldr	r2, [r0, #8]
   b83b2:	b93a      	cbnz	r2, b83c4 <_ZNK6String6equalsEPKc+0x16>
   b83b4:	b121      	cbz	r1, b83c0 <_ZNK6String6equalsEPKc+0x12>
   b83b6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b83b8:	fab0 f080 	clz	r0, r0
   b83bc:	0940      	lsrs	r0, r0, #5
   b83be:	e000      	b.n	b83c2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b83c0:	2001      	movs	r0, #1
}
   b83c2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b83c4:	6800      	ldr	r0, [r0, #0]
   b83c6:	b909      	cbnz	r1, b83cc <_ZNK6String6equalsEPKc+0x1e>
   b83c8:	7800      	ldrb	r0, [r0, #0]
   b83ca:	e7f5      	b.n	b83b8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b83cc:	f7fc fb0c 	bl	b49e8 <strcmp>
   b83d0:	e7f2      	b.n	b83b8 <_ZNK6String6equalsEPKc+0xa>

000b83d2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b83d2:	b558      	push	{r3, r4, r6, lr}
   b83d4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b83d6:	b12a      	cbz	r2, b83e4 <_ZNK6String8getBytesEPhjj+0x12>
   b83d8:	b121      	cbz	r1, b83e4 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b83da:	6884      	ldr	r4, [r0, #8]
   b83dc:	42a3      	cmp	r3, r4
   b83de:	d302      	bcc.n	b83e6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b83e0:	2300      	movs	r3, #0
   b83e2:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b83e4:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b83e6:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b83e8:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b83ea:	6801      	ldr	r1, [r0, #0]
   b83ec:	4294      	cmp	r4, r2
   b83ee:	bf28      	it	cs
   b83f0:	4614      	movcs	r4, r2
   b83f2:	4419      	add	r1, r3
   b83f4:	4622      	mov	r2, r4
   b83f6:	4630      	mov	r0, r6
   b83f8:	f000 fd3b 	bl	b8e72 <strncpy>
	buf[n] = 0;
   b83fc:	2300      	movs	r3, #0
   b83fe:	5533      	strb	r3, [r6, r4]
   b8400:	e7f0      	b.n	b83e4 <_ZNK6String8getBytesEPhjj+0x12>
	...

000b8404 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b8404:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b8406:	6800      	ldr	r0, [r0, #0]
   b8408:	b140      	cbz	r0, b841c <_ZNK6String7toFloatEv+0x18>
   b840a:	f000 fc75 	bl	b8cf8 <atof>
   b840e:	ec51 0b10 	vmov	r0, r1, d0
   b8412:	f7fc fa7b 	bl	b490c <__aeabi_d2f>
   b8416:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b841a:	bd08      	pop	{r3, pc}
	return 0;
   b841c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b8424 <_ZNK6String7toFloatEv+0x20>
   b8420:	e7fb      	b.n	b841a <_ZNK6String7toFloatEv+0x16>
   b8422:	bf00      	nop
   b8424:	00000000 	.word	0x00000000

000b8428 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b8428:	b507      	push	{r0, r1, r2, lr}
   b842a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b842c:	2100      	movs	r1, #0
{
   b842e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b8430:	9100      	str	r1, [sp, #0]
   b8432:	2001      	movs	r0, #1
   b8434:	218c      	movs	r1, #140	; 0x8c
   b8436:	f7ff f81d 	bl	b7474 <system_reset>
}
   b843a:	b003      	add	sp, #12
   b843c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8440 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b8440:	4601      	mov	r1, r0
    reset(0, flags);
   b8442:	2000      	movs	r0, #0
   b8444:	f7ff bff0 	b.w	b8428 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b8448 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b8448:	2000      	movs	r0, #0
   b844a:	f7ff bff9 	b.w	b8440 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b8450 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8450:	4b05      	ldr	r3, [pc, #20]	; (b8468 <_GLOBAL__sub_I_System+0x18>)
   b8452:	2202      	movs	r2, #2
   b8454:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8456:	4b05      	ldr	r3, [pc, #20]	; (b846c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8458:	4a05      	ldr	r2, [pc, #20]	; (b8470 <_GLOBAL__sub_I_System+0x20>)
   b845a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b845c:	2000      	movs	r0, #0
   b845e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8462:	f7fe bfbb 	b.w	b73dc <set_system_mode>
   b8466:	bf00      	nop
   b8468:	2003e6b8 	.word	0x2003e6b8
   b846c:	2003e6ac 	.word	0x2003e6ac
   b8470:	ffff0000 	.word	0xffff0000

000b8474 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b8478:	4a15      	ldr	r2, [pc, #84]	; (b84d0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b847a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b84dc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b847e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8482:	1980      	adds	r0, r0, r6
   b8484:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b8488:	4b12      	ldr	r3, [pc, #72]	; (b84d4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b848a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b848e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8492:	1986      	adds	r6, r0, r6
   b8494:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8498:	42bb      	cmp	r3, r7
   b849a:	bf08      	it	eq
   b849c:	42b2      	cmpeq	r2, r6
{
   b849e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b84a0:	d013      	beq.n	b84ca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b84a2:	a903      	add	r1, sp, #12
   b84a4:	4668      	mov	r0, sp
   b84a6:	e9cd 6700 	strd	r6, r7, [sp]
   b84aa:	f7ff f905 	bl	b76b8 <localtime_r>
	calendar_time.tm_year += 1900;
   b84ae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b84b0:	4d09      	ldr	r5, [pc, #36]	; (b84d8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b84b2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b84b6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b84b8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b84ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b84bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b84be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b84c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b84c2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b84c6:	6823      	ldr	r3, [r4, #0]
   b84c8:	602b      	str	r3, [r5, #0]
    }
}
   b84ca:	b00c      	add	sp, #48	; 0x30
   b84cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b84d0:	2003e6f0 	.word	0x2003e6f0
   b84d4:	2003e6e8 	.word	0x2003e6e8
   b84d8:	2003e6c4 	.word	0x2003e6c4
   b84dc:	2003e6f8 	.word	0x2003e6f8

000b84e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b84e0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b84e2:	2000      	movs	r0, #0
   b84e4:	f7ff f810 	bl	b7508 <spark_sync_time_pending>
   b84e8:	b128      	cbz	r0, b84f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b84ea:	f7fe ffe5 	bl	b74b8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b84ee:	f080 0001 	eor.w	r0, r0, #1
   b84f2:	b2c0      	uxtb	r0, r0
    }
   b84f4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b84f6:	2001      	movs	r0, #1
   b84f8:	e7fc      	b.n	b84f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b84fa <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   b84fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b84fc:	4602      	mov	r2, r0
   b84fe:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b8500:	4668      	mov	r0, sp
    struct timeval tv = {
   b8502:	2100      	movs	r1, #0
    };
   b8504:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   b8508:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   b850c:	f7fe fe0c 	bl	b7128 <hal_rtc_set_time>
   b8510:	4602      	mov	r2, r0
   b8512:	b910      	cbnz	r0, b851a <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   b8514:	4601      	mov	r1, r0
   b8516:	f7fe ff91 	bl	b743c <system_notify_time_changed>
    }
}
   b851a:	b005      	add	sp, #20
   b851c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8520 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8520:	b530      	push	{r4, r5, lr}
   b8522:	b093      	sub	sp, #76	; 0x4c
   b8524:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b8528:	4b19      	ldr	r3, [pc, #100]	; (b8590 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b852a:	4604      	mov	r4, r0
    t += time_zone_cache;
   b852c:	e9d3 1000 	ldrd	r1, r0, [r3]
   b8530:	9b01      	ldr	r3, [sp, #4]
   b8532:	1852      	adds	r2, r2, r1
   b8534:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b8538:	4816      	ldr	r0, [pc, #88]	; (b8594 <_ZN9TimeClass7timeStrEx+0x74>)
   b853a:	e9d0 1000 	ldrd	r1, r0, [r0]
   b853e:	1852      	adds	r2, r2, r1
   b8540:	eb43 0300 	adc.w	r3, r3, r0
   b8544:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b8548:	2224      	movs	r2, #36	; 0x24
   b854a:	eb0d 0002 	add.w	r0, sp, r2
   b854e:	2100      	movs	r1, #0
   b8550:	f000 fc20 	bl	b8d94 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b8554:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b8556:	a909      	add	r1, sp, #36	; 0x24
   b8558:	4668      	mov	r0, sp
   b855a:	f7ff f8ad 	bl	b76b8 <localtime_r>
    char ascstr[26] = {};
   b855e:	2216      	movs	r2, #22
   b8560:	4629      	mov	r1, r5
   b8562:	a803      	add	r0, sp, #12
   b8564:	9502      	str	r5, [sp, #8]
   b8566:	f000 fc15 	bl	b8d94 <memset>
    asctime_r(&calendar_time, ascstr);
   b856a:	a902      	add	r1, sp, #8
   b856c:	a809      	add	r0, sp, #36	; 0x24
   b856e:	f000 fb97 	bl	b8ca0 <asctime_r>
    int len = strlen(ascstr);
   b8572:	a802      	add	r0, sp, #8
   b8574:	f7fc fa42 	bl	b49fc <strlen>
    ascstr[len-1] = 0; // remove final newline
   b8578:	ab12      	add	r3, sp, #72	; 0x48
   b857a:	4418      	add	r0, r3
    return String(ascstr);
   b857c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b857e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b8582:	4620      	mov	r0, r4
   b8584:	f7ff fee5 	bl	b8352 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b8588:	4620      	mov	r0, r4
   b858a:	b013      	add	sp, #76	; 0x4c
   b858c:	bd30      	pop	{r4, r5, pc}
   b858e:	bf00      	nop
   b8590:	2003e6f0 	.word	0x2003e6f0
   b8594:	2003e6e8 	.word	0x2003e6e8

000b8598 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b8598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b859c:	b0a4      	sub	sp, #144	; 0x90
   b859e:	4607      	mov	r7, r0
   b85a0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b85a2:	a814      	add	r0, sp, #80	; 0x50
{
   b85a4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b85a6:	223f      	movs	r2, #63	; 0x3f
{
   b85a8:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b85aa:	f000 fc62 	bl	b8e72 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b85ae:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b85b0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b85b2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b85b6:	f7fc fa21 	bl	b49fc <strlen>
   b85ba:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b85bc:	bb4c      	cbnz	r4, b8612 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b85be:	4929      	ldr	r1, [pc, #164]	; (b8664 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b85c0:	a803      	add	r0, sp, #12
   b85c2:	f000 fc1d 	bl	b8e00 <strcpy>
   b85c6:	ac14      	add	r4, sp, #80	; 0x50
{
   b85c8:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b85ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   b85ce:	45b1      	cmp	r9, r6
   b85d0:	d934      	bls.n	b863c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b85d2:	7823      	ldrb	r3, [r4, #0]
   b85d4:	2b25      	cmp	r3, #37	; 0x25
   b85d6:	f106 0a01 	add.w	sl, r6, #1
   b85da:	d117      	bne.n	b860c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b85dc:	7863      	ldrb	r3, [r4, #1]
   b85de:	2b7a      	cmp	r3, #122	; 0x7a
   b85e0:	d114      	bne.n	b860c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b85e2:	a803      	add	r0, sp, #12
   b85e4:	f7fc fa0a 	bl	b49fc <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b85e8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b85ea:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b85ec:	1830      	adds	r0, r6, r0
   b85ee:	4418      	add	r0, r3
   b85f0:	eba9 0206 	sub.w	r2, r9, r6
   b85f4:	1ca1      	adds	r1, r4, #2
   b85f6:	f000 fba5 	bl	b8d44 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b85fa:	462a      	mov	r2, r5
   b85fc:	a903      	add	r1, sp, #12
   b85fe:	4620      	mov	r0, r4
   b8600:	f000 fba0 	bl	b8d44 <memcpy>
            len = strlen(format_str);
   b8604:	a814      	add	r0, sp, #80	; 0x50
   b8606:	f7fc f9f9 	bl	b49fc <strlen>
   b860a:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b860c:	3401      	adds	r4, #1
   b860e:	4656      	mov	r6, sl
   b8610:	e7db      	b.n	b85ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b8612:	233c      	movs	r3, #60	; 0x3c
   b8614:	fb94 f2f3 	sdiv	r2, r4, r3
   b8618:	2a00      	cmp	r2, #0
   b861a:	bfb8      	it	lt
   b861c:	4252      	neglt	r2, r2
   b861e:	fbb2 f1f3 	udiv	r1, r2, r3
   b8622:	fb03 2211 	mls	r2, r3, r1, r2
   b8626:	9200      	str	r2, [sp, #0]
   b8628:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b862c:	4a0e      	ldr	r2, [pc, #56]	; (b8668 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b862e:	fb94 f3f3 	sdiv	r3, r4, r3
   b8632:	2110      	movs	r1, #16
   b8634:	a803      	add	r0, sp, #12
   b8636:	f7ff f807 	bl	b7648 <snprintf>
   b863a:	e7c4      	b.n	b85c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b863c:	2100      	movs	r1, #0
   b863e:	222e      	movs	r2, #46	; 0x2e
   b8640:	a808      	add	r0, sp, #32
   b8642:	9107      	str	r1, [sp, #28]
   b8644:	f000 fba6 	bl	b8d94 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b8648:	4643      	mov	r3, r8
   b864a:	aa14      	add	r2, sp, #80	; 0x50
   b864c:	2132      	movs	r1, #50	; 0x32
   b864e:	a807      	add	r0, sp, #28
   b8650:	f7ff f82a 	bl	b76a8 <strftime>
    return String(buf);
   b8654:	a907      	add	r1, sp, #28
   b8656:	4638      	mov	r0, r7
   b8658:	f7ff fe7b 	bl	b8352 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b865c:	4638      	mov	r0, r7
   b865e:	b024      	add	sp, #144	; 0x90
   b8660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8664:	000bb694 	.word	0x000bb694
   b8668:	000bb696 	.word	0x000bb696

000b866c <_ZN9TimeClass6formatExPKc>:
{
   b866c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b866e:	b08d      	sub	sp, #52	; 0x34
   b8670:	e9cd 2300 	strd	r2, r3, [sp]
   b8674:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b8676:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b8678:	b915      	cbnz	r5, b8680 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b867a:	4b19      	ldr	r3, [pc, #100]	; (b86e0 <_ZN9TimeClass6formatExPKc+0x74>)
   b867c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b867e:	b12d      	cbz	r5, b868c <_ZN9TimeClass6formatExPKc+0x20>
   b8680:	4b18      	ldr	r3, [pc, #96]	; (b86e4 <_ZN9TimeClass6formatExPKc+0x78>)
   b8682:	4628      	mov	r0, r5
   b8684:	6819      	ldr	r1, [r3, #0]
   b8686:	f7fc f9af 	bl	b49e8 <strcmp>
   b868a:	b938      	cbnz	r0, b869c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b868c:	e9dd 2300 	ldrd	r2, r3, [sp]
   b8690:	4620      	mov	r0, r4
   b8692:	f7ff ff45 	bl	b8520 <_ZN9TimeClass7timeStrEx>
}
   b8696:	4620      	mov	r0, r4
   b8698:	b00d      	add	sp, #52	; 0x34
   b869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b869c:	4e12      	ldr	r6, [pc, #72]	; (b86e8 <_ZN9TimeClass6formatExPKc+0x7c>)
   b869e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b86a0:	4f12      	ldr	r7, [pc, #72]	; (b86ec <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b86a2:	e9d6 3200 	ldrd	r3, r2, [r6]
   b86a6:	185b      	adds	r3, r3, r1
   b86a8:	9901      	ldr	r1, [sp, #4]
   b86aa:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b86ae:	e9d7 0100 	ldrd	r0, r1, [r7]
   b86b2:	181b      	adds	r3, r3, r0
   b86b4:	eb42 0201 	adc.w	r2, r2, r1
   b86b8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b86bc:	2100      	movs	r1, #0
   b86be:	2224      	movs	r2, #36	; 0x24
   b86c0:	a803      	add	r0, sp, #12
   b86c2:	f000 fb67 	bl	b8d94 <memset>
    localtime_r(&t, &calendar_time);
   b86c6:	a903      	add	r1, sp, #12
   b86c8:	4668      	mov	r0, sp
   b86ca:	f7fe fff5 	bl	b76b8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b86ce:	6832      	ldr	r2, [r6, #0]
   b86d0:	683b      	ldr	r3, [r7, #0]
   b86d2:	a903      	add	r1, sp, #12
   b86d4:	4413      	add	r3, r2
   b86d6:	4620      	mov	r0, r4
   b86d8:	462a      	mov	r2, r5
   b86da:	f7ff ff5d 	bl	b8598 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b86de:	e7da      	b.n	b8696 <_ZN9TimeClass6formatExPKc+0x2a>
   b86e0:	2003e6c0 	.word	0x2003e6c0
   b86e4:	2003e2c8 	.word	0x2003e2c8
   b86e8:	2003e6f0 	.word	0x2003e6f0
   b86ec:	2003e6e8 	.word	0x2003e6e8

000b86f0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b86f0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b86f2:	2000      	movs	r0, #0
   b86f4:	f7fe fd00 	bl	b70f8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b86f8:	4604      	mov	r4, r0
   b86fa:	b9a0      	cbnz	r0, b8726 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b86fc:	f7fe fe66 	bl	b73cc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8700:	2801      	cmp	r0, #1
   b8702:	d110      	bne.n	b8726 <_ZN9TimeClass7isValidEv+0x36>
   b8704:	4620      	mov	r0, r4
   b8706:	f7fe fe91 	bl	b742c <system_thread_get_state>
   b870a:	b960      	cbnz	r0, b8726 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b870c:	f7ff fee8 	bl	b84e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8710:	b910      	cbnz	r0, b8718 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8712:	f7fe fec9 	bl	b74a8 <spark_process>
        while (_while() && !_condition()) {
   b8716:	e7f9      	b.n	b870c <_ZN9TimeClass7isValidEv+0x1c>
   b8718:	f7ff fee2 	bl	b84e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b871c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8720:	2000      	movs	r0, #0
   b8722:	f7fe bce9 	b.w	b70f8 <hal_rtc_time_is_valid>
}
   b8726:	4620      	mov	r0, r4
   b8728:	bd10      	pop	{r4, pc}

000b872a <_ZN9TimeClass3nowEv>:
{
   b872a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b872c:	f7ff ffe0 	bl	b86f0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8730:	2210      	movs	r2, #16
   b8732:	2100      	movs	r1, #0
   b8734:	4668      	mov	r0, sp
   b8736:	f000 fb2d 	bl	b8d94 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b873a:	2100      	movs	r1, #0
   b873c:	4668      	mov	r0, sp
   b873e:	f7fe fceb 	bl	b7118 <hal_rtc_get_time>
}
   b8742:	9800      	ldr	r0, [sp, #0]
   b8744:	b005      	add	sp, #20
   b8746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b874c <_ZN9TimeClass4hourEv>:
{
   b874c:	b508      	push	{r3, lr}
	return hour(now());
   b874e:	f7ff ffec 	bl	b872a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8752:	17c1      	asrs	r1, r0, #31
   b8754:	f7ff fe8e 	bl	b8474 <_ZL22Refresh_UnixTime_Cachex>
}
   b8758:	4b01      	ldr	r3, [pc, #4]	; (b8760 <_ZN9TimeClass4hourEv+0x14>)
   b875a:	6898      	ldr	r0, [r3, #8]
   b875c:	bd08      	pop	{r3, pc}
   b875e:	bf00      	nop
   b8760:	2003e6c4 	.word	0x2003e6c4

000b8764 <_ZN9TimeClass4yearEv>:
{
   b8764:	b508      	push	{r3, lr}
	return year(now());
   b8766:	f7ff ffe0 	bl	b872a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b876a:	17c1      	asrs	r1, r0, #31
   b876c:	f7ff fe82 	bl	b8474 <_ZL22Refresh_UnixTime_Cachex>
}
   b8770:	4b01      	ldr	r3, [pc, #4]	; (b8778 <_ZN9TimeClass4yearEv+0x14>)
   b8772:	6958      	ldr	r0, [r3, #20]
   b8774:	bd08      	pop	{r3, pc}
   b8776:	bf00      	nop
   b8778:	2003e6c4 	.word	0x2003e6c4

000b877c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b877c:	4b02      	ldr	r3, [pc, #8]	; (b8788 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b877e:	681a      	ldr	r2, [r3, #0]
   b8780:	4b02      	ldr	r3, [pc, #8]	; (b878c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8782:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8784:	4770      	bx	lr
   b8786:	bf00      	nop
   b8788:	2003e2c8 	.word	0x2003e2c8
   b878c:	2003e6c0 	.word	0x2003e6c0

000b8790 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8790:	4770      	bx	lr

000b8792 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8792:	7441      	strb	r1, [r0, #17]
}
   b8794:	4770      	bx	lr

000b8796 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8796:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8798:	7c00      	ldrb	r0, [r0, #16]
   b879a:	f7fe fdbd 	bl	b7318 <hal_usart_available_data_for_write>
}
   b879e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b87a2:	bd08      	pop	{r3, pc}

000b87a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b87a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b87a6:	7c00      	ldrb	r0, [r0, #16]
   b87a8:	f7fe fd8e 	bl	b72c8 <hal_usart_available>
}
   b87ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b87b0:	bd08      	pop	{r3, pc}

000b87b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b87b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b87b4:	7c00      	ldrb	r0, [r0, #16]
   b87b6:	f7fe fd97 	bl	b72e8 <hal_usart_peek>
}
   b87ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b87be:	bd08      	pop	{r3, pc}

000b87c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b87c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b87c2:	7c00      	ldrb	r0, [r0, #16]
   b87c4:	f7fe fd88 	bl	b72d8 <hal_usart_read>
}
   b87c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b87cc:	bd08      	pop	{r3, pc}

000b87ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b87ce:	7c00      	ldrb	r0, [r0, #16]
   b87d0:	f7fe bd92 	b.w	b72f8 <hal_usart_flush>

000b87d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b87d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b87d6:	7c45      	ldrb	r5, [r0, #17]
{
   b87d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b87da:	b12d      	cbz	r5, b87e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b87dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b87de:	b003      	add	sp, #12
   b87e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b87e4:	f7fe bd68 	b.w	b72b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b87e8:	7c00      	ldrb	r0, [r0, #16]
   b87ea:	9101      	str	r1, [sp, #4]
   b87ec:	f7fe fd94 	bl	b7318 <hal_usart_available_data_for_write>
   b87f0:	2800      	cmp	r0, #0
   b87f2:	9901      	ldr	r1, [sp, #4]
   b87f4:	dcf2      	bgt.n	b87dc <_ZN11USARTSerial5writeEh+0x8>
}
   b87f6:	4628      	mov	r0, r5
   b87f8:	b003      	add	sp, #12
   b87fa:	bd30      	pop	{r4, r5, pc}

000b87fc <_ZN11USARTSerialD0Ev>:
   b87fc:	b510      	push	{r4, lr}
   b87fe:	2114      	movs	r1, #20
   b8800:	4604      	mov	r4, r0
   b8802:	f7fc f95a 	bl	b4aba <_ZdlPvj>
   b8806:	4620      	mov	r0, r4
   b8808:	bd10      	pop	{r4, pc}
	...

000b880c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b880c:	b510      	push	{r4, lr}
   b880e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8812:	4604      	mov	r4, r0
   b8814:	4608      	mov	r0, r1
   b8816:	4611      	mov	r1, r2
   b8818:	2200      	movs	r2, #0
   b881a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b881e:	4b04      	ldr	r3, [pc, #16]	; (b8830 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8820:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8822:	2301      	movs	r3, #1
  _serial = serial;
   b8824:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8826:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8828:	f7fe fd7e 	bl	b7328 <hal_usart_init_ex>
}
   b882c:	4620      	mov	r0, r4
   b882e:	bd10      	pop	{r4, pc}
   b8830:	000bb6c8 	.word	0x000bb6c8

000b8834 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8834:	7441      	strb	r1, [r0, #17]
}
   b8836:	4770      	bx	lr

000b8838 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8838:	4770      	bx	lr

000b883a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b883a:	4770      	bx	lr

000b883c <_ZN9USBSerial4readEv>:
{
   b883c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b883e:	2100      	movs	r1, #0
   b8840:	7c00      	ldrb	r0, [r0, #16]
   b8842:	f7fe fd91 	bl	b7368 <HAL_USB_USART_Receive_Data>
}
   b8846:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b884a:	bd08      	pop	{r3, pc}

000b884c <_ZN9USBSerial4peekEv>:
{
   b884c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b884e:	2101      	movs	r1, #1
   b8850:	7c00      	ldrb	r0, [r0, #16]
   b8852:	f7fe fd89 	bl	b7368 <HAL_USB_USART_Receive_Data>
}
   b8856:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b885a:	bd08      	pop	{r3, pc}

000b885c <_ZN9USBSerial17availableForWriteEv>:
{
   b885c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b885e:	7c00      	ldrb	r0, [r0, #16]
   b8860:	f7fe fd7a 	bl	b7358 <HAL_USB_USART_Available_Data_For_Write>
}
   b8864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8868:	bd08      	pop	{r3, pc}

000b886a <_ZN9USBSerial9availableEv>:
{
   b886a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b886c:	7c00      	ldrb	r0, [r0, #16]
   b886e:	f7fe fd6b 	bl	b7348 <HAL_USB_USART_Available_Data>
}
   b8872:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8876:	bd08      	pop	{r3, pc}

000b8878 <_ZN9USBSerial5writeEh>:
{
   b8878:	b513      	push	{r0, r1, r4, lr}
   b887a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b887c:	7c00      	ldrb	r0, [r0, #16]
{
   b887e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8880:	f7fe fd6a 	bl	b7358 <HAL_USB_USART_Available_Data_For_Write>
   b8884:	2800      	cmp	r0, #0
   b8886:	9901      	ldr	r1, [sp, #4]
   b8888:	dc01      	bgt.n	b888e <_ZN9USBSerial5writeEh+0x16>
   b888a:	7c60      	ldrb	r0, [r4, #17]
   b888c:	b120      	cbz	r0, b8898 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b888e:	7c20      	ldrb	r0, [r4, #16]
   b8890:	f7fe fd72 	bl	b7378 <HAL_USB_USART_Send_Data>
   b8894:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8898:	b002      	add	sp, #8
   b889a:	bd10      	pop	{r4, pc}

000b889c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b889c:	7c00      	ldrb	r0, [r0, #16]
   b889e:	f7fe bd73 	b.w	b7388 <HAL_USB_USART_Flush_Data>

000b88a2 <_ZN9USBSerialD0Ev>:
   b88a2:	b510      	push	{r4, lr}
   b88a4:	2114      	movs	r1, #20
   b88a6:	4604      	mov	r4, r0
   b88a8:	f7fc f907 	bl	b4aba <_ZdlPvj>
   b88ac:	4620      	mov	r0, r4
   b88ae:	bd10      	pop	{r4, pc}

000b88b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b88b0:	b510      	push	{r4, lr}
   b88b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b88b6:	4604      	mov	r4, r0
   b88b8:	4608      	mov	r0, r1
   b88ba:	2100      	movs	r1, #0
   b88bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b88c0:	4b04      	ldr	r3, [pc, #16]	; (b88d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b88c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b88c4:	2301      	movs	r3, #1
  _serial = serial;
   b88c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b88c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b88ca:	4611      	mov	r1, r2
   b88cc:	f7fe fd34 	bl	b7338 <HAL_USB_USART_Init>
}
   b88d0:	4620      	mov	r0, r4
   b88d2:	bd10      	pop	{r4, pc}
   b88d4:	000bb6f8 	.word	0x000bb6f8

000b88d8 <_Z19acquireSerialBufferv>:
{
   b88d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b88da:	2214      	movs	r2, #20
{
   b88dc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b88de:	2100      	movs	r1, #0
   b88e0:	f000 fa58 	bl	b8d94 <memset>
}
   b88e4:	4620      	mov	r0, r4
   b88e6:	bd10      	pop	{r4, pc}

000b88e8 <_Z16_fetch_usbserialv>:
{
   b88e8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b88ea:	4c0f      	ldr	r4, [pc, #60]	; (b8928 <_Z16_fetch_usbserialv+0x40>)
{
   b88ec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b88ee:	a803      	add	r0, sp, #12
   b88f0:	f7ff fff2 	bl	b88d8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b88f4:	7821      	ldrb	r1, [r4, #0]
   b88f6:	f3bf 8f5b 	dmb	ish
   b88fa:	f011 0101 	ands.w	r1, r1, #1
   b88fe:	d10f      	bne.n	b8920 <_Z16_fetch_usbserialv+0x38>
   b8900:	4620      	mov	r0, r4
   b8902:	9101      	str	r1, [sp, #4]
   b8904:	f7fc f8e8 	bl	b4ad8 <__cxa_guard_acquire>
   b8908:	9901      	ldr	r1, [sp, #4]
   b890a:	b148      	cbz	r0, b8920 <_Z16_fetch_usbserialv+0x38>
   b890c:	aa03      	add	r2, sp, #12
   b890e:	4807      	ldr	r0, [pc, #28]	; (b892c <_Z16_fetch_usbserialv+0x44>)
   b8910:	f7ff ffce 	bl	b88b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8914:	4620      	mov	r0, r4
   b8916:	f7fc f8e4 	bl	b4ae2 <__cxa_guard_release>
   b891a:	4805      	ldr	r0, [pc, #20]	; (b8930 <_Z16_fetch_usbserialv+0x48>)
   b891c:	f000 f9e6 	bl	b8cec <atexit>
	return _usbserial;
}
   b8920:	4802      	ldr	r0, [pc, #8]	; (b892c <_Z16_fetch_usbserialv+0x44>)
   b8922:	b008      	add	sp, #32
   b8924:	bd10      	pop	{r4, pc}
   b8926:	bf00      	nop
   b8928:	2003e700 	.word	0x2003e700
   b892c:	2003e704 	.word	0x2003e704
   b8930:	000b8839 	.word	0x000b8839

000b8934 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8934:	4b01      	ldr	r3, [pc, #4]	; (b893c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8936:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8938:	4770      	bx	lr
   b893a:	bf00      	nop
   b893c:	2003e2cc 	.word	0x2003e2cc

000b8940 <serialEventRun>:
{
   b8940:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8942:	4b0b      	ldr	r3, [pc, #44]	; (b8970 <serialEventRun+0x30>)
   b8944:	b143      	cbz	r3, b8958 <serialEventRun+0x18>
   b8946:	f7ff ffcf 	bl	b88e8 <_Z16_fetch_usbserialv>
   b894a:	6803      	ldr	r3, [r0, #0]
   b894c:	691b      	ldr	r3, [r3, #16]
   b894e:	4798      	blx	r3
   b8950:	2800      	cmp	r0, #0
   b8952:	dd01      	ble.n	b8958 <serialEventRun+0x18>
        serialEvent();
   b8954:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8958:	4b06      	ldr	r3, [pc, #24]	; (b8974 <serialEventRun+0x34>)
   b895a:	b143      	cbz	r3, b896e <serialEventRun+0x2e>
   b895c:	f000 f974 	bl	b8c48 <_Z22__fetch_global_Serial1v>
   b8960:	6803      	ldr	r3, [r0, #0]
   b8962:	691b      	ldr	r3, [r3, #16]
   b8964:	4798      	blx	r3
   b8966:	2800      	cmp	r0, #0
   b8968:	dd01      	ble.n	b896e <serialEventRun+0x2e>
        serialEvent1();
   b896a:	f3af 8000 	nop.w
}
   b896e:	bd08      	pop	{r3, pc}
	...

000b8978 <_post_loop>:
{
   b8978:	b508      	push	{r3, lr}
	serialEventRun();
   b897a:	f7ff ffe1 	bl	b8940 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b897e:	f7fe fbb3 	bl	b70e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8982:	4b01      	ldr	r3, [pc, #4]	; (b8988 <_post_loop+0x10>)
   b8984:	6018      	str	r0, [r3, #0]
}
   b8986:	bd08      	pop	{r3, pc}
   b8988:	2003e72c 	.word	0x2003e72c

000b898c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b898c:	4805      	ldr	r0, [pc, #20]	; (b89a4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b898e:	4a06      	ldr	r2, [pc, #24]	; (b89a8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8990:	4906      	ldr	r1, [pc, #24]	; (b89ac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8992:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8994:	1a12      	subs	r2, r2, r0
   b8996:	f000 f9d5 	bl	b8d44 <memcpy>
    __backup_sram_signature = signature;
   b899a:	4b05      	ldr	r3, [pc, #20]	; (b89b0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b899c:	4a05      	ldr	r2, [pc, #20]	; (b89b4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b899e:	601a      	str	r2, [r3, #0]
}
   b89a0:	bd08      	pop	{r3, pc}
   b89a2:	bf00      	nop
   b89a4:	2003f400 	.word	0x2003f400
   b89a8:	2003fc04 	.word	0x2003fc04
   b89ac:	000bbe80 	.word	0x000bbe80
   b89b0:	2003fc00 	.word	0x2003fc00
   b89b4:	9a271c1e 	.word	0x9a271c1e

000b89b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b89b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b89ba:	2300      	movs	r3, #0
   b89bc:	9300      	str	r3, [sp, #0]
   b89be:	461a      	mov	r2, r3
   b89c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b89c4:	f7fe fd4c 	bl	b7460 <system_ctrl_set_result>
}
   b89c8:	b003      	add	sp, #12
   b89ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b89d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b89d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b89d2:	8843      	ldrh	r3, [r0, #2]
   b89d4:	2b0a      	cmp	r3, #10
   b89d6:	d008      	beq.n	b89ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b89d8:	2b50      	cmp	r3, #80	; 0x50
   b89da:	d10b      	bne.n	b89f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b89dc:	4b09      	ldr	r3, [pc, #36]	; (b8a04 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b89de:	681b      	ldr	r3, [r3, #0]
   b89e0:	b14b      	cbz	r3, b89f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b89e2:	b003      	add	sp, #12
   b89e4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b89e8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b89ea:	f7ff ffe5 	bl	b89b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b89ee:	b003      	add	sp, #12
   b89f0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b89f4:	2300      	movs	r3, #0
   b89f6:	9300      	str	r3, [sp, #0]
   b89f8:	461a      	mov	r2, r3
   b89fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b89fe:	f7fe fd2f 	bl	b7460 <system_ctrl_set_result>
}
   b8a02:	e7f4      	b.n	b89ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8a04:	2003e71c 	.word	0x2003e71c

000b8a08 <module_user_init_hook>:
{
   b8a08:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8a0a:	4812      	ldr	r0, [pc, #72]	; (b8a54 <module_user_init_hook+0x4c>)
   b8a0c:	2100      	movs	r1, #0
   b8a0e:	f7fe fe43 	bl	b7698 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8a12:	4b11      	ldr	r3, [pc, #68]	; (b8a58 <module_user_init_hook+0x50>)
   b8a14:	681a      	ldr	r2, [r3, #0]
   b8a16:	4b11      	ldr	r3, [pc, #68]	; (b8a5c <module_user_init_hook+0x54>)
   b8a18:	429a      	cmp	r2, r3
   b8a1a:	4b11      	ldr	r3, [pc, #68]	; (b8a60 <module_user_init_hook+0x58>)
   b8a1c:	bf0c      	ite	eq
   b8a1e:	2201      	moveq	r2, #1
   b8a20:	2200      	movne	r2, #0
   b8a22:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8a24:	d001      	beq.n	b8a2a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8a26:	f7ff ffb1 	bl	b898c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8a2a:	f7fe fb45 	bl	b70b8 <HAL_RNG_GetRandomNumber>
   b8a2e:	4604      	mov	r4, r0
    srand(seed);
   b8a30:	f000 f9b8 	bl	b8da4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8a34:	4b0b      	ldr	r3, [pc, #44]	; (b8a64 <module_user_init_hook+0x5c>)
   b8a36:	b113      	cbz	r3, b8a3e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8a38:	4620      	mov	r0, r4
   b8a3a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8a3e:	2100      	movs	r1, #0
   b8a40:	4808      	ldr	r0, [pc, #32]	; (b8a64 <module_user_init_hook+0x5c>)
   b8a42:	f7fe fd79 	bl	b7538 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8a4a:	4807      	ldr	r0, [pc, #28]	; (b8a68 <module_user_init_hook+0x60>)
   b8a4c:	2100      	movs	r1, #0
   b8a4e:	f7fe bcfd 	b.w	b744c <system_ctrl_set_app_request_handler>
   b8a52:	bf00      	nop
   b8a54:	000b8935 	.word	0x000b8935
   b8a58:	2003fc00 	.word	0x2003fc00
   b8a5c:	9a271c1e 	.word	0x9a271c1e
   b8a60:	2003e718 	.word	0x2003e718
   b8a64:	00000000 	.word	0x00000000
   b8a68:	000b89d1 	.word	0x000b89d1

000b8a6c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   b8a6c:	b508      	push	{r3, lr}
   b8a6e:	4b02      	ldr	r3, [pc, #8]	; (b8a78 <spark_protocol_instance+0xc>)
   b8a70:	681b      	ldr	r3, [r3, #0]
   b8a72:	681b      	ldr	r3, [r3, #0]
   b8a74:	9301      	str	r3, [sp, #4]
   b8a76:	bd08      	pop	{r3, pc}
   b8a78:	0003025c 	.word	0x0003025c

000b8a7c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   b8a7c:	b508      	push	{r3, lr}
   b8a7e:	4b02      	ldr	r3, [pc, #8]	; (b8a88 <spark_protocol_set_product_id+0xc>)
   b8a80:	681b      	ldr	r3, [r3, #0]
   b8a82:	685b      	ldr	r3, [r3, #4]
   b8a84:	9301      	str	r3, [sp, #4]
   b8a86:	bd08      	pop	{r3, pc}
   b8a88:	0003025c 	.word	0x0003025c

000b8a8c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   b8a8c:	b508      	push	{r3, lr}
   b8a8e:	4b02      	ldr	r3, [pc, #8]	; (b8a98 <spark_protocol_set_product_firmware_version+0xc>)
   b8a90:	681b      	ldr	r3, [r3, #0]
   b8a92:	689b      	ldr	r3, [r3, #8]
   b8a94:	9301      	str	r3, [sp, #4]
   b8a96:	bd08      	pop	{r3, pc}
   b8a98:	0003025c 	.word	0x0003025c

000b8a9c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8a9c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8a9e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8aa0:	d902      	bls.n	b8aa8 <pinAvailable+0xc>
    return false;
   b8aa2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8aa4:	b002      	add	sp, #8
   b8aa6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8aa8:	f1a0 030b 	sub.w	r3, r0, #11
   b8aac:	2b02      	cmp	r3, #2
   b8aae:	d81a      	bhi.n	b8ae6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8ab0:	4c17      	ldr	r4, [pc, #92]	; (b8b10 <pinAvailable+0x74>)
   b8ab2:	7821      	ldrb	r1, [r4, #0]
   b8ab4:	f3bf 8f5b 	dmb	ish
   b8ab8:	f011 0101 	ands.w	r1, r1, #1
   b8abc:	d10b      	bne.n	b8ad6 <pinAvailable+0x3a>
   b8abe:	4620      	mov	r0, r4
   b8ac0:	9101      	str	r1, [sp, #4]
   b8ac2:	f7fc f809 	bl	b4ad8 <__cxa_guard_acquire>
   b8ac6:	9901      	ldr	r1, [sp, #4]
   b8ac8:	b128      	cbz	r0, b8ad6 <pinAvailable+0x3a>
   b8aca:	4812      	ldr	r0, [pc, #72]	; (b8b14 <pinAvailable+0x78>)
   b8acc:	f7ff fbec 	bl	b82a8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8ad0:	4620      	mov	r0, r4
   b8ad2:	f7fc f806 	bl	b4ae2 <__cxa_guard_release>
   b8ad6:	4b0f      	ldr	r3, [pc, #60]	; (b8b14 <pinAvailable+0x78>)
   b8ad8:	7818      	ldrb	r0, [r3, #0]
   b8ada:	f7fe fbe5 	bl	b72a8 <hal_spi_is_enabled>
   b8ade:	2800      	cmp	r0, #0
   b8ae0:	d1df      	bne.n	b8aa2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8ae2:	2001      	movs	r0, #1
   b8ae4:	e7de      	b.n	b8aa4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8ae6:	2801      	cmp	r0, #1
   b8ae8:	d809      	bhi.n	b8afe <pinAvailable+0x62>
   b8aea:	f000 f86d 	bl	b8bc8 <_Z19__fetch_global_Wirev>
   b8aee:	2100      	movs	r1, #0
   b8af0:	7c00      	ldrb	r0, [r0, #16]
   b8af2:	f7fe fb91 	bl	b7218 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8af6:	f080 0001 	eor.w	r0, r0, #1
   b8afa:	b2c0      	uxtb	r0, r0
   b8afc:	e7d2      	b.n	b8aa4 <pinAvailable+0x8>
   b8afe:	3809      	subs	r0, #9
   b8b00:	2801      	cmp	r0, #1
   b8b02:	d8ee      	bhi.n	b8ae2 <pinAvailable+0x46>
   b8b04:	f000 f8a0 	bl	b8c48 <_Z22__fetch_global_Serial1v>
   b8b08:	7c00      	ldrb	r0, [r0, #16]
   b8b0a:	f7fe fbfd 	bl	b7308 <hal_usart_is_enabled>
   b8b0e:	e7f2      	b.n	b8af6 <pinAvailable+0x5a>
   b8b10:	2003e720 	.word	0x2003e720
   b8b14:	2003e724 	.word	0x2003e724

000b8b18 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8b18:	2823      	cmp	r0, #35	; 0x23
{
   b8b1a:	b538      	push	{r3, r4, r5, lr}
   b8b1c:	4604      	mov	r4, r0
   b8b1e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8b20:	d80a      	bhi.n	b8b38 <pinMode+0x20>
   b8b22:	29ff      	cmp	r1, #255	; 0xff
   b8b24:	d008      	beq.n	b8b38 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8b26:	f7ff ffb9 	bl	b8a9c <pinAvailable>
   b8b2a:	b128      	cbz	r0, b8b38 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8b2c:	4629      	mov	r1, r5
   b8b2e:	4620      	mov	r0, r4
}
   b8b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8b34:	f7fe bb00 	b.w	b7138 <hal_gpio_mode>
}
   b8b38:	bd38      	pop	{r3, r4, r5, pc}

000b8b3a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b8b3a:	b538      	push	{r3, r4, r5, lr}
   b8b3c:	4604      	mov	r4, r0
   b8b3e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8b40:	f7fe fb02 	bl	b7148 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8b44:	28ff      	cmp	r0, #255	; 0xff
   b8b46:	d010      	beq.n	b8b6a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8b48:	2806      	cmp	r0, #6
   b8b4a:	d804      	bhi.n	b8b56 <digitalWrite+0x1c>
   b8b4c:	234d      	movs	r3, #77	; 0x4d
   b8b4e:	fa23 f000 	lsr.w	r0, r3, r0
   b8b52:	07c3      	lsls	r3, r0, #31
   b8b54:	d409      	bmi.n	b8b6a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8b56:	4620      	mov	r0, r4
   b8b58:	f7ff ffa0 	bl	b8a9c <pinAvailable>
   b8b5c:	b128      	cbz	r0, b8b6a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8b5e:	4629      	mov	r1, r5
   b8b60:	4620      	mov	r0, r4
}
   b8b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8b66:	f7fe baf7 	b.w	b7158 <hal_gpio_write>
}
   b8b6a:	bd38      	pop	{r3, r4, r5, pc}

000b8b6c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8b6c:	b510      	push	{r4, lr}
   b8b6e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8b70:	f7fe faea 	bl	b7148 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8b74:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8b76:	b2db      	uxtb	r3, r3
   b8b78:	2b01      	cmp	r3, #1
   b8b7a:	d908      	bls.n	b8b8e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8b7c:	4620      	mov	r0, r4
   b8b7e:	f7ff ff8d 	bl	b8a9c <pinAvailable>
   b8b82:	b120      	cbz	r0, b8b8e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8b84:	4620      	mov	r0, r4
}
   b8b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b8b8a:	f7fe baed 	b.w	b7168 <hal_gpio_read>
}
   b8b8e:	2000      	movs	r0, #0
   b8b90:	bd10      	pop	{r4, pc}

000b8b92 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b92:	4770      	bx	lr

000b8b94 <_Z17acquireWireBufferv>:
{
   b8b94:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8b96:	4b0a      	ldr	r3, [pc, #40]	; (b8bc0 <_Z17acquireWireBufferv+0x2c>)
   b8b98:	6003      	str	r3, [r0, #0]
   b8b9a:	2301      	movs	r3, #1
{
   b8b9c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8b9e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8ba0:	4908      	ldr	r1, [pc, #32]	; (b8bc4 <_Z17acquireWireBufferv+0x30>)
   b8ba2:	2020      	movs	r0, #32
   b8ba4:	f000 f876 	bl	b8c94 <_ZnajRKSt9nothrow_t>
	};
   b8ba8:	2520      	movs	r5, #32
   b8baa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8bac:	4905      	ldr	r1, [pc, #20]	; (b8bc4 <_Z17acquireWireBufferv+0x30>)
	};
   b8bae:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8bb0:	4628      	mov	r0, r5
   b8bb2:	f000 f86f 	bl	b8c94 <_ZnajRKSt9nothrow_t>
	};
   b8bb6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8bba:	4620      	mov	r0, r4
   b8bbc:	bd38      	pop	{r3, r4, r5, pc}
   b8bbe:	bf00      	nop
   b8bc0:	00010018 	.word	0x00010018
   b8bc4:	000bb720 	.word	0x000bb720

000b8bc8 <_Z19__fetch_global_Wirev>:
{
   b8bc8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8bca:	4d0e      	ldr	r5, [pc, #56]	; (b8c04 <_Z19__fetch_global_Wirev+0x3c>)
   b8bcc:	7829      	ldrb	r1, [r5, #0]
   b8bce:	f3bf 8f5b 	dmb	ish
   b8bd2:	f011 0401 	ands.w	r4, r1, #1
{
   b8bd6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8bd8:	d111      	bne.n	b8bfe <_Z19__fetch_global_Wirev+0x36>
   b8bda:	4628      	mov	r0, r5
   b8bdc:	f7fb ff7c 	bl	b4ad8 <__cxa_guard_acquire>
   b8be0:	b168      	cbz	r0, b8bfe <_Z19__fetch_global_Wirev+0x36>
   b8be2:	4668      	mov	r0, sp
   b8be4:	f7ff ffd6 	bl	b8b94 <_Z17acquireWireBufferv>
   b8be8:	466a      	mov	r2, sp
   b8bea:	4621      	mov	r1, r4
   b8bec:	4806      	ldr	r0, [pc, #24]	; (b8c08 <_Z19__fetch_global_Wirev+0x40>)
   b8bee:	f7ff f93d 	bl	b7e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8bf2:	4628      	mov	r0, r5
   b8bf4:	f7fb ff75 	bl	b4ae2 <__cxa_guard_release>
   b8bf8:	4804      	ldr	r0, [pc, #16]	; (b8c0c <_Z19__fetch_global_Wirev+0x44>)
   b8bfa:	f000 f877 	bl	b8cec <atexit>
	return wire;
}
   b8bfe:	4802      	ldr	r0, [pc, #8]	; (b8c08 <_Z19__fetch_global_Wirev+0x40>)
   b8c00:	b007      	add	sp, #28
   b8c02:	bd30      	pop	{r4, r5, pc}
   b8c04:	2003e730 	.word	0x2003e730
   b8c08:	2003e734 	.word	0x2003e734
   b8c0c:	000b8b93 	.word	0x000b8b93

000b8c10 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c10:	4770      	bx	lr
	...

000b8c14 <_Z20acquireSerial1Bufferv>:
{
   b8c14:	b538      	push	{r3, r4, r5, lr}
   b8c16:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8c18:	2514      	movs	r5, #20
   b8c1a:	462a      	mov	r2, r5
   b8c1c:	2100      	movs	r1, #0
   b8c1e:	f000 f8b9 	bl	b8d94 <memset>
   b8c22:	8025      	strh	r5, [r4, #0]
   b8c24:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c26:	4907      	ldr	r1, [pc, #28]	; (b8c44 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8c28:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c2a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8c2c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c2e:	f000 f831 	bl	b8c94 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c32:	4904      	ldr	r1, [pc, #16]	; (b8c44 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8c34:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c36:	4628      	mov	r0, r5
   b8c38:	f000 f82c 	bl	b8c94 <_ZnajRKSt9nothrow_t>
    };
   b8c3c:	60e0      	str	r0, [r4, #12]
}
   b8c3e:	4620      	mov	r0, r4
   b8c40:	bd38      	pop	{r3, r4, r5, pc}
   b8c42:	bf00      	nop
   b8c44:	000bb720 	.word	0x000bb720

000b8c48 <_Z22__fetch_global_Serial1v>:
{
   b8c48:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c4a:	4d0e      	ldr	r5, [pc, #56]	; (b8c84 <_Z22__fetch_global_Serial1v+0x3c>)
   b8c4c:	7829      	ldrb	r1, [r5, #0]
   b8c4e:	f3bf 8f5b 	dmb	ish
   b8c52:	f011 0401 	ands.w	r4, r1, #1
{
   b8c56:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c58:	d111      	bne.n	b8c7e <_Z22__fetch_global_Serial1v+0x36>
   b8c5a:	4628      	mov	r0, r5
   b8c5c:	f7fb ff3c 	bl	b4ad8 <__cxa_guard_acquire>
   b8c60:	b168      	cbz	r0, b8c7e <_Z22__fetch_global_Serial1v+0x36>
   b8c62:	a801      	add	r0, sp, #4
   b8c64:	f7ff ffd6 	bl	b8c14 <_Z20acquireSerial1Bufferv>
   b8c68:	aa01      	add	r2, sp, #4
   b8c6a:	4621      	mov	r1, r4
   b8c6c:	4806      	ldr	r0, [pc, #24]	; (b8c88 <_Z22__fetch_global_Serial1v+0x40>)
   b8c6e:	f7ff fdcd 	bl	b880c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8c72:	4628      	mov	r0, r5
   b8c74:	f7fb ff35 	bl	b4ae2 <__cxa_guard_release>
   b8c78:	4804      	ldr	r0, [pc, #16]	; (b8c8c <_Z22__fetch_global_Serial1v+0x44>)
   b8c7a:	f000 f837 	bl	b8cec <atexit>
    return serial1;
}
   b8c7e:	4802      	ldr	r0, [pc, #8]	; (b8c88 <_Z22__fetch_global_Serial1v+0x40>)
   b8c80:	b007      	add	sp, #28
   b8c82:	bd30      	pop	{r4, r5, pc}
   b8c84:	2003e748 	.word	0x2003e748
   b8c88:	2003e74c 	.word	0x2003e74c
   b8c8c:	000b8c11 	.word	0x000b8c11

000b8c90 <_ZnwjRKSt9nothrow_t>:
   b8c90:	f7fb bf0f 	b.w	b4ab2 <_Znwj>

000b8c94 <_ZnajRKSt9nothrow_t>:
   b8c94:	f7fb bf0f 	b.w	b4ab6 <_Znaj>

000b8c98 <_ZSt25__throw_bad_function_callv>:
   b8c98:	b508      	push	{r3, lr}
   b8c9a:	f7fe fcdd 	bl	b7658 <abort>
	...

000b8ca0 <asctime_r>:
   b8ca0:	b510      	push	{r4, lr}
   b8ca2:	460c      	mov	r4, r1
   b8ca4:	6941      	ldr	r1, [r0, #20]
   b8ca6:	6903      	ldr	r3, [r0, #16]
   b8ca8:	6982      	ldr	r2, [r0, #24]
   b8caa:	b086      	sub	sp, #24
   b8cac:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b8cb0:	9104      	str	r1, [sp, #16]
   b8cb2:	6801      	ldr	r1, [r0, #0]
   b8cb4:	9103      	str	r1, [sp, #12]
   b8cb6:	6841      	ldr	r1, [r0, #4]
   b8cb8:	9102      	str	r1, [sp, #8]
   b8cba:	6881      	ldr	r1, [r0, #8]
   b8cbc:	9101      	str	r1, [sp, #4]
   b8cbe:	68c1      	ldr	r1, [r0, #12]
   b8cc0:	9100      	str	r1, [sp, #0]
   b8cc2:	4907      	ldr	r1, [pc, #28]	; (b8ce0 <asctime_r+0x40>)
   b8cc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8cc8:	440b      	add	r3, r1
   b8cca:	4906      	ldr	r1, [pc, #24]	; (b8ce4 <asctime_r+0x44>)
   b8ccc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b8cd0:	440a      	add	r2, r1
   b8cd2:	4620      	mov	r0, r4
   b8cd4:	4904      	ldr	r1, [pc, #16]	; (b8ce8 <asctime_r+0x48>)
   b8cd6:	f7fe fcaf 	bl	b7638 <siprintf>
   b8cda:	4620      	mov	r0, r4
   b8cdc:	b006      	add	sp, #24
   b8cde:	bd10      	pop	{r4, pc}
   b8ce0:	000bb756 	.word	0x000bb756
   b8ce4:	000bb741 	.word	0x000bb741
   b8ce8:	000bb721 	.word	0x000bb721

000b8cec <atexit>:
   b8cec:	2300      	movs	r3, #0
   b8cee:	4601      	mov	r1, r0
   b8cf0:	461a      	mov	r2, r3
   b8cf2:	4618      	mov	r0, r3
   b8cf4:	f000 bf8a 	b.w	b9c0c <__register_exitproc>

000b8cf8 <atof>:
   b8cf8:	2100      	movs	r1, #0
   b8cfa:	f000 beef 	b.w	b9adc <strtod>

000b8cfe <atoi>:
   b8cfe:	220a      	movs	r2, #10
   b8d00:	2100      	movs	r1, #0
   b8d02:	f000 bf79 	b.w	b9bf8 <strtol>
	...

000b8d08 <gmtime>:
   b8d08:	b538      	push	{r3, r4, r5, lr}
   b8d0a:	4b0b      	ldr	r3, [pc, #44]	; (b8d38 <gmtime+0x30>)
   b8d0c:	681d      	ldr	r5, [r3, #0]
   b8d0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b8d10:	4604      	mov	r4, r0
   b8d12:	b953      	cbnz	r3, b8d2a <gmtime+0x22>
   b8d14:	2024      	movs	r0, #36	; 0x24
   b8d16:	f7fe fc77 	bl	b7608 <malloc>
   b8d1a:	4602      	mov	r2, r0
   b8d1c:	63e8      	str	r0, [r5, #60]	; 0x3c
   b8d1e:	b920      	cbnz	r0, b8d2a <gmtime+0x22>
   b8d20:	4b06      	ldr	r3, [pc, #24]	; (b8d3c <gmtime+0x34>)
   b8d22:	4807      	ldr	r0, [pc, #28]	; (b8d40 <gmtime+0x38>)
   b8d24:	2139      	movs	r1, #57	; 0x39
   b8d26:	f7fe fcaf 	bl	b7688 <__assert_func>
   b8d2a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b8d2c:	4620      	mov	r0, r4
   b8d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8d32:	f7fe bcc9 	b.w	b76c8 <gmtime_r>
   b8d36:	bf00      	nop
   b8d38:	2003e2cc 	.word	0x2003e2cc
   b8d3c:	000bb77a 	.word	0x000bb77a
   b8d40:	000bb791 	.word	0x000bb791

000b8d44 <memcpy>:
   b8d44:	440a      	add	r2, r1
   b8d46:	4291      	cmp	r1, r2
   b8d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8d4c:	d100      	bne.n	b8d50 <memcpy+0xc>
   b8d4e:	4770      	bx	lr
   b8d50:	b510      	push	{r4, lr}
   b8d52:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8d56:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8d5a:	4291      	cmp	r1, r2
   b8d5c:	d1f9      	bne.n	b8d52 <memcpy+0xe>
   b8d5e:	bd10      	pop	{r4, pc}

000b8d60 <memmove>:
   b8d60:	4288      	cmp	r0, r1
   b8d62:	b510      	push	{r4, lr}
   b8d64:	eb01 0402 	add.w	r4, r1, r2
   b8d68:	d902      	bls.n	b8d70 <memmove+0x10>
   b8d6a:	4284      	cmp	r4, r0
   b8d6c:	4623      	mov	r3, r4
   b8d6e:	d807      	bhi.n	b8d80 <memmove+0x20>
   b8d70:	1e43      	subs	r3, r0, #1
   b8d72:	42a1      	cmp	r1, r4
   b8d74:	d008      	beq.n	b8d88 <memmove+0x28>
   b8d76:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8d7e:	e7f8      	b.n	b8d72 <memmove+0x12>
   b8d80:	4402      	add	r2, r0
   b8d82:	4601      	mov	r1, r0
   b8d84:	428a      	cmp	r2, r1
   b8d86:	d100      	bne.n	b8d8a <memmove+0x2a>
   b8d88:	bd10      	pop	{r4, pc}
   b8d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8d92:	e7f7      	b.n	b8d84 <memmove+0x24>

000b8d94 <memset>:
   b8d94:	4402      	add	r2, r0
   b8d96:	4603      	mov	r3, r0
   b8d98:	4293      	cmp	r3, r2
   b8d9a:	d100      	bne.n	b8d9e <memset+0xa>
   b8d9c:	4770      	bx	lr
   b8d9e:	f803 1b01 	strb.w	r1, [r3], #1
   b8da2:	e7f9      	b.n	b8d98 <memset+0x4>

000b8da4 <srand>:
   b8da4:	b538      	push	{r3, r4, r5, lr}
   b8da6:	4b10      	ldr	r3, [pc, #64]	; (b8de8 <srand+0x44>)
   b8da8:	681d      	ldr	r5, [r3, #0]
   b8daa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8dac:	4604      	mov	r4, r0
   b8dae:	b9b3      	cbnz	r3, b8dde <srand+0x3a>
   b8db0:	2018      	movs	r0, #24
   b8db2:	f7fe fc29 	bl	b7608 <malloc>
   b8db6:	4602      	mov	r2, r0
   b8db8:	63a8      	str	r0, [r5, #56]	; 0x38
   b8dba:	b920      	cbnz	r0, b8dc6 <srand+0x22>
   b8dbc:	4b0b      	ldr	r3, [pc, #44]	; (b8dec <srand+0x48>)
   b8dbe:	480c      	ldr	r0, [pc, #48]	; (b8df0 <srand+0x4c>)
   b8dc0:	2142      	movs	r1, #66	; 0x42
   b8dc2:	f7fe fc61 	bl	b7688 <__assert_func>
   b8dc6:	490b      	ldr	r1, [pc, #44]	; (b8df4 <srand+0x50>)
   b8dc8:	4b0b      	ldr	r3, [pc, #44]	; (b8df8 <srand+0x54>)
   b8dca:	e9c0 1300 	strd	r1, r3, [r0]
   b8dce:	4b0b      	ldr	r3, [pc, #44]	; (b8dfc <srand+0x58>)
   b8dd0:	6083      	str	r3, [r0, #8]
   b8dd2:	230b      	movs	r3, #11
   b8dd4:	8183      	strh	r3, [r0, #12]
   b8dd6:	2100      	movs	r1, #0
   b8dd8:	2001      	movs	r0, #1
   b8dda:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8dde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8de0:	2200      	movs	r2, #0
   b8de2:	611c      	str	r4, [r3, #16]
   b8de4:	615a      	str	r2, [r3, #20]
   b8de6:	bd38      	pop	{r3, r4, r5, pc}
   b8de8:	2003e2cc 	.word	0x2003e2cc
   b8dec:	000bb77a 	.word	0x000bb77a
   b8df0:	000bb7ea 	.word	0x000bb7ea
   b8df4:	abcd330e 	.word	0xabcd330e
   b8df8:	e66d1234 	.word	0xe66d1234
   b8dfc:	0005deec 	.word	0x0005deec

000b8e00 <strcpy>:
   b8e00:	4603      	mov	r3, r0
   b8e02:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8e06:	f803 2b01 	strb.w	r2, [r3], #1
   b8e0a:	2a00      	cmp	r2, #0
   b8e0c:	d1f9      	bne.n	b8e02 <strcpy+0x2>
   b8e0e:	4770      	bx	lr

000b8e10 <strdup>:
   b8e10:	4b02      	ldr	r3, [pc, #8]	; (b8e1c <strdup+0xc>)
   b8e12:	4601      	mov	r1, r0
   b8e14:	6818      	ldr	r0, [r3, #0]
   b8e16:	f000 b803 	b.w	b8e20 <_strdup_r>
   b8e1a:	bf00      	nop
   b8e1c:	2003e2cc 	.word	0x2003e2cc

000b8e20 <_strdup_r>:
   b8e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8e22:	4604      	mov	r4, r0
   b8e24:	4608      	mov	r0, r1
   b8e26:	460d      	mov	r5, r1
   b8e28:	f7fb fde8 	bl	b49fc <strlen>
   b8e2c:	1c42      	adds	r2, r0, #1
   b8e2e:	4611      	mov	r1, r2
   b8e30:	4620      	mov	r0, r4
   b8e32:	9201      	str	r2, [sp, #4]
   b8e34:	f7fe fc18 	bl	b7668 <_malloc_r>
   b8e38:	4604      	mov	r4, r0
   b8e3a:	b118      	cbz	r0, b8e44 <_strdup_r+0x24>
   b8e3c:	9a01      	ldr	r2, [sp, #4]
   b8e3e:	4629      	mov	r1, r5
   b8e40:	f7ff ff80 	bl	b8d44 <memcpy>
   b8e44:	4620      	mov	r0, r4
   b8e46:	b003      	add	sp, #12
   b8e48:	bd30      	pop	{r4, r5, pc}

000b8e4a <strncmp>:
   b8e4a:	b510      	push	{r4, lr}
   b8e4c:	b17a      	cbz	r2, b8e6e <strncmp+0x24>
   b8e4e:	4603      	mov	r3, r0
   b8e50:	3901      	subs	r1, #1
   b8e52:	1884      	adds	r4, r0, r2
   b8e54:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8e58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8e5c:	4290      	cmp	r0, r2
   b8e5e:	d101      	bne.n	b8e64 <strncmp+0x1a>
   b8e60:	42a3      	cmp	r3, r4
   b8e62:	d101      	bne.n	b8e68 <strncmp+0x1e>
   b8e64:	1a80      	subs	r0, r0, r2
   b8e66:	bd10      	pop	{r4, pc}
   b8e68:	2800      	cmp	r0, #0
   b8e6a:	d1f3      	bne.n	b8e54 <strncmp+0xa>
   b8e6c:	e7fa      	b.n	b8e64 <strncmp+0x1a>
   b8e6e:	4610      	mov	r0, r2
   b8e70:	e7f9      	b.n	b8e66 <strncmp+0x1c>

000b8e72 <strncpy>:
   b8e72:	b510      	push	{r4, lr}
   b8e74:	3901      	subs	r1, #1
   b8e76:	4603      	mov	r3, r0
   b8e78:	b132      	cbz	r2, b8e88 <strncpy+0x16>
   b8e7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8e7e:	f803 4b01 	strb.w	r4, [r3], #1
   b8e82:	3a01      	subs	r2, #1
   b8e84:	2c00      	cmp	r4, #0
   b8e86:	d1f7      	bne.n	b8e78 <strncpy+0x6>
   b8e88:	441a      	add	r2, r3
   b8e8a:	2100      	movs	r1, #0
   b8e8c:	4293      	cmp	r3, r2
   b8e8e:	d100      	bne.n	b8e92 <strncpy+0x20>
   b8e90:	bd10      	pop	{r4, pc}
   b8e92:	f803 1b01 	strb.w	r1, [r3], #1
   b8e96:	e7f9      	b.n	b8e8c <strncpy+0x1a>

000b8e98 <sulp>:
   b8e98:	b570      	push	{r4, r5, r6, lr}
   b8e9a:	4604      	mov	r4, r0
   b8e9c:	460d      	mov	r5, r1
   b8e9e:	ec45 4b10 	vmov	d0, r4, r5
   b8ea2:	4616      	mov	r6, r2
   b8ea4:	f001 fe0c 	bl	baac0 <__ulp>
   b8ea8:	ec51 0b10 	vmov	r0, r1, d0
   b8eac:	b17e      	cbz	r6, b8ece <sulp+0x36>
   b8eae:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8eb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8eb6:	2b00      	cmp	r3, #0
   b8eb8:	dd09      	ble.n	b8ece <sulp+0x36>
   b8eba:	051b      	lsls	r3, r3, #20
   b8ebc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8ec0:	2400      	movs	r4, #0
   b8ec2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8ec6:	4622      	mov	r2, r4
   b8ec8:	462b      	mov	r3, r5
   b8eca:	f7fb fa65 	bl	b4398 <__aeabi_dmul>
   b8ece:	bd70      	pop	{r4, r5, r6, pc}

000b8ed0 <_strtod_l>:
   b8ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ed4:	ed2d 8b02 	vpush	{d8}
   b8ed8:	b09d      	sub	sp, #116	; 0x74
   b8eda:	461f      	mov	r7, r3
   b8edc:	2300      	movs	r3, #0
   b8ede:	9318      	str	r3, [sp, #96]	; 0x60
   b8ee0:	4ba2      	ldr	r3, [pc, #648]	; (b916c <_strtod_l+0x29c>)
   b8ee2:	9213      	str	r2, [sp, #76]	; 0x4c
   b8ee4:	681b      	ldr	r3, [r3, #0]
   b8ee6:	9305      	str	r3, [sp, #20]
   b8ee8:	4604      	mov	r4, r0
   b8eea:	4618      	mov	r0, r3
   b8eec:	4688      	mov	r8, r1
   b8eee:	f7fb fd85 	bl	b49fc <strlen>
   b8ef2:	f04f 0a00 	mov.w	sl, #0
   b8ef6:	4605      	mov	r5, r0
   b8ef8:	f04f 0b00 	mov.w	fp, #0
   b8efc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8f02:	781a      	ldrb	r2, [r3, #0]
   b8f04:	2a2b      	cmp	r2, #43	; 0x2b
   b8f06:	d04e      	beq.n	b8fa6 <_strtod_l+0xd6>
   b8f08:	d83b      	bhi.n	b8f82 <_strtod_l+0xb2>
   b8f0a:	2a0d      	cmp	r2, #13
   b8f0c:	d834      	bhi.n	b8f78 <_strtod_l+0xa8>
   b8f0e:	2a08      	cmp	r2, #8
   b8f10:	d834      	bhi.n	b8f7c <_strtod_l+0xac>
   b8f12:	2a00      	cmp	r2, #0
   b8f14:	d03e      	beq.n	b8f94 <_strtod_l+0xc4>
   b8f16:	2300      	movs	r3, #0
   b8f18:	930a      	str	r3, [sp, #40]	; 0x28
   b8f1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b8f1c:	7833      	ldrb	r3, [r6, #0]
   b8f1e:	2b30      	cmp	r3, #48	; 0x30
   b8f20:	f040 80b0 	bne.w	b9084 <_strtod_l+0x1b4>
   b8f24:	7873      	ldrb	r3, [r6, #1]
   b8f26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8f2a:	2b58      	cmp	r3, #88	; 0x58
   b8f2c:	d168      	bne.n	b9000 <_strtod_l+0x130>
   b8f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8f30:	9301      	str	r3, [sp, #4]
   b8f32:	ab18      	add	r3, sp, #96	; 0x60
   b8f34:	9702      	str	r7, [sp, #8]
   b8f36:	9300      	str	r3, [sp, #0]
   b8f38:	4a8d      	ldr	r2, [pc, #564]	; (b9170 <_strtod_l+0x2a0>)
   b8f3a:	ab19      	add	r3, sp, #100	; 0x64
   b8f3c:	a917      	add	r1, sp, #92	; 0x5c
   b8f3e:	4620      	mov	r0, r4
   b8f40:	f000 ff2e 	bl	b9da0 <__gethex>
   b8f44:	f010 0707 	ands.w	r7, r0, #7
   b8f48:	4605      	mov	r5, r0
   b8f4a:	d005      	beq.n	b8f58 <_strtod_l+0x88>
   b8f4c:	2f06      	cmp	r7, #6
   b8f4e:	d12c      	bne.n	b8faa <_strtod_l+0xda>
   b8f50:	3601      	adds	r6, #1
   b8f52:	2300      	movs	r3, #0
   b8f54:	9617      	str	r6, [sp, #92]	; 0x5c
   b8f56:	930a      	str	r3, [sp, #40]	; 0x28
   b8f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8f5a:	2b00      	cmp	r3, #0
   b8f5c:	f040 8590 	bne.w	b9a80 <_strtod_l+0xbb0>
   b8f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8f62:	b1eb      	cbz	r3, b8fa0 <_strtod_l+0xd0>
   b8f64:	4652      	mov	r2, sl
   b8f66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8f6a:	ec43 2b10 	vmov	d0, r2, r3
   b8f6e:	b01d      	add	sp, #116	; 0x74
   b8f70:	ecbd 8b02 	vpop	{d8}
   b8f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f78:	2a20      	cmp	r2, #32
   b8f7a:	d1cc      	bne.n	b8f16 <_strtod_l+0x46>
   b8f7c:	3301      	adds	r3, #1
   b8f7e:	9317      	str	r3, [sp, #92]	; 0x5c
   b8f80:	e7be      	b.n	b8f00 <_strtod_l+0x30>
   b8f82:	2a2d      	cmp	r2, #45	; 0x2d
   b8f84:	d1c7      	bne.n	b8f16 <_strtod_l+0x46>
   b8f86:	2201      	movs	r2, #1
   b8f88:	920a      	str	r2, [sp, #40]	; 0x28
   b8f8a:	1c5a      	adds	r2, r3, #1
   b8f8c:	9217      	str	r2, [sp, #92]	; 0x5c
   b8f8e:	785b      	ldrb	r3, [r3, #1]
   b8f90:	2b00      	cmp	r3, #0
   b8f92:	d1c2      	bne.n	b8f1a <_strtod_l+0x4a>
   b8f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8f96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8f9a:	2b00      	cmp	r3, #0
   b8f9c:	f040 856e 	bne.w	b9a7c <_strtod_l+0xbac>
   b8fa0:	4652      	mov	r2, sl
   b8fa2:	465b      	mov	r3, fp
   b8fa4:	e7e1      	b.n	b8f6a <_strtod_l+0x9a>
   b8fa6:	2200      	movs	r2, #0
   b8fa8:	e7ee      	b.n	b8f88 <_strtod_l+0xb8>
   b8faa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8fac:	b13a      	cbz	r2, b8fbe <_strtod_l+0xee>
   b8fae:	2135      	movs	r1, #53	; 0x35
   b8fb0:	a81a      	add	r0, sp, #104	; 0x68
   b8fb2:	f001 fe90 	bl	bacd6 <__copybits>
   b8fb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8fb8:	4620      	mov	r0, r4
   b8fba:	f001 fa4f 	bl	ba45c <_Bfree>
   b8fbe:	3f01      	subs	r7, #1
   b8fc0:	2f04      	cmp	r7, #4
   b8fc2:	d806      	bhi.n	b8fd2 <_strtod_l+0x102>
   b8fc4:	e8df f007 	tbb	[pc, r7]
   b8fc8:	1714030a 	.word	0x1714030a
   b8fcc:	0a          	.byte	0x0a
   b8fcd:	00          	.byte	0x00
   b8fce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b8fd2:	0728      	lsls	r0, r5, #28
   b8fd4:	d5c0      	bpl.n	b8f58 <_strtod_l+0x88>
   b8fd6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8fda:	e7bd      	b.n	b8f58 <_strtod_l+0x88>
   b8fdc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8fe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b8fe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b8fe6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8fea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8fee:	e7f0      	b.n	b8fd2 <_strtod_l+0x102>
   b8ff0:	f8df b180 	ldr.w	fp, [pc, #384]	; b9174 <_strtod_l+0x2a4>
   b8ff4:	e7ed      	b.n	b8fd2 <_strtod_l+0x102>
   b8ff6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b8ffa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8ffe:	e7e8      	b.n	b8fd2 <_strtod_l+0x102>
   b9000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9002:	1c5a      	adds	r2, r3, #1
   b9004:	9217      	str	r2, [sp, #92]	; 0x5c
   b9006:	785b      	ldrb	r3, [r3, #1]
   b9008:	2b30      	cmp	r3, #48	; 0x30
   b900a:	d0f9      	beq.n	b9000 <_strtod_l+0x130>
   b900c:	2b00      	cmp	r3, #0
   b900e:	d0a3      	beq.n	b8f58 <_strtod_l+0x88>
   b9010:	2301      	movs	r3, #1
   b9012:	f04f 0900 	mov.w	r9, #0
   b9016:	9304      	str	r3, [sp, #16]
   b9018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b901a:	9308      	str	r3, [sp, #32]
   b901c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9020:	464f      	mov	r7, r9
   b9022:	220a      	movs	r2, #10
   b9024:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9026:	7806      	ldrb	r6, [r0, #0]
   b9028:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b902c:	b2d9      	uxtb	r1, r3
   b902e:	2909      	cmp	r1, #9
   b9030:	d92a      	bls.n	b9088 <_strtod_l+0x1b8>
   b9032:	9905      	ldr	r1, [sp, #20]
   b9034:	462a      	mov	r2, r5
   b9036:	f7ff ff08 	bl	b8e4a <strncmp>
   b903a:	b398      	cbz	r0, b90a4 <_strtod_l+0x1d4>
   b903c:	2000      	movs	r0, #0
   b903e:	4632      	mov	r2, r6
   b9040:	463d      	mov	r5, r7
   b9042:	9005      	str	r0, [sp, #20]
   b9044:	4603      	mov	r3, r0
   b9046:	2a65      	cmp	r2, #101	; 0x65
   b9048:	d001      	beq.n	b904e <_strtod_l+0x17e>
   b904a:	2a45      	cmp	r2, #69	; 0x45
   b904c:	d118      	bne.n	b9080 <_strtod_l+0x1b0>
   b904e:	b91d      	cbnz	r5, b9058 <_strtod_l+0x188>
   b9050:	9a04      	ldr	r2, [sp, #16]
   b9052:	4302      	orrs	r2, r0
   b9054:	d09e      	beq.n	b8f94 <_strtod_l+0xc4>
   b9056:	2500      	movs	r5, #0
   b9058:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b905c:	f108 0201 	add.w	r2, r8, #1
   b9060:	9217      	str	r2, [sp, #92]	; 0x5c
   b9062:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9066:	2a2b      	cmp	r2, #43	; 0x2b
   b9068:	d075      	beq.n	b9156 <_strtod_l+0x286>
   b906a:	2a2d      	cmp	r2, #45	; 0x2d
   b906c:	d07b      	beq.n	b9166 <_strtod_l+0x296>
   b906e:	f04f 0c00 	mov.w	ip, #0
   b9072:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9076:	2909      	cmp	r1, #9
   b9078:	f240 8082 	bls.w	b9180 <_strtod_l+0x2b0>
   b907c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9080:	2600      	movs	r6, #0
   b9082:	e09d      	b.n	b91c0 <_strtod_l+0x2f0>
   b9084:	2300      	movs	r3, #0
   b9086:	e7c4      	b.n	b9012 <_strtod_l+0x142>
   b9088:	2f08      	cmp	r7, #8
   b908a:	bfd8      	it	le
   b908c:	9907      	ldrle	r1, [sp, #28]
   b908e:	f100 0001 	add.w	r0, r0, #1
   b9092:	bfda      	itte	le
   b9094:	fb02 3301 	mlale	r3, r2, r1, r3
   b9098:	9307      	strle	r3, [sp, #28]
   b909a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b909e:	3701      	adds	r7, #1
   b90a0:	9017      	str	r0, [sp, #92]	; 0x5c
   b90a2:	e7bf      	b.n	b9024 <_strtod_l+0x154>
   b90a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b90a6:	195a      	adds	r2, r3, r5
   b90a8:	9217      	str	r2, [sp, #92]	; 0x5c
   b90aa:	5d5a      	ldrb	r2, [r3, r5]
   b90ac:	2f00      	cmp	r7, #0
   b90ae:	d037      	beq.n	b9120 <_strtod_l+0x250>
   b90b0:	9005      	str	r0, [sp, #20]
   b90b2:	463d      	mov	r5, r7
   b90b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b90b8:	2b09      	cmp	r3, #9
   b90ba:	d912      	bls.n	b90e2 <_strtod_l+0x212>
   b90bc:	2301      	movs	r3, #1
   b90be:	e7c2      	b.n	b9046 <_strtod_l+0x176>
   b90c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b90c2:	1c5a      	adds	r2, r3, #1
   b90c4:	9217      	str	r2, [sp, #92]	; 0x5c
   b90c6:	785a      	ldrb	r2, [r3, #1]
   b90c8:	3001      	adds	r0, #1
   b90ca:	2a30      	cmp	r2, #48	; 0x30
   b90cc:	d0f8      	beq.n	b90c0 <_strtod_l+0x1f0>
   b90ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b90d2:	2b08      	cmp	r3, #8
   b90d4:	f200 84d9 	bhi.w	b9a8a <_strtod_l+0xbba>
   b90d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b90da:	9005      	str	r0, [sp, #20]
   b90dc:	2000      	movs	r0, #0
   b90de:	9308      	str	r3, [sp, #32]
   b90e0:	4605      	mov	r5, r0
   b90e2:	3a30      	subs	r2, #48	; 0x30
   b90e4:	f100 0301 	add.w	r3, r0, #1
   b90e8:	d014      	beq.n	b9114 <_strtod_l+0x244>
   b90ea:	9905      	ldr	r1, [sp, #20]
   b90ec:	4419      	add	r1, r3
   b90ee:	9105      	str	r1, [sp, #20]
   b90f0:	462b      	mov	r3, r5
   b90f2:	eb00 0e05 	add.w	lr, r0, r5
   b90f6:	210a      	movs	r1, #10
   b90f8:	4573      	cmp	r3, lr
   b90fa:	d113      	bne.n	b9124 <_strtod_l+0x254>
   b90fc:	182b      	adds	r3, r5, r0
   b90fe:	2b08      	cmp	r3, #8
   b9100:	f105 0501 	add.w	r5, r5, #1
   b9104:	4405      	add	r5, r0
   b9106:	dc1c      	bgt.n	b9142 <_strtod_l+0x272>
   b9108:	9907      	ldr	r1, [sp, #28]
   b910a:	230a      	movs	r3, #10
   b910c:	fb03 2301 	mla	r3, r3, r1, r2
   b9110:	9307      	str	r3, [sp, #28]
   b9112:	2300      	movs	r3, #0
   b9114:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9116:	1c51      	adds	r1, r2, #1
   b9118:	9117      	str	r1, [sp, #92]	; 0x5c
   b911a:	7852      	ldrb	r2, [r2, #1]
   b911c:	4618      	mov	r0, r3
   b911e:	e7c9      	b.n	b90b4 <_strtod_l+0x1e4>
   b9120:	4638      	mov	r0, r7
   b9122:	e7d2      	b.n	b90ca <_strtod_l+0x1fa>
   b9124:	2b08      	cmp	r3, #8
   b9126:	dc04      	bgt.n	b9132 <_strtod_l+0x262>
   b9128:	9e07      	ldr	r6, [sp, #28]
   b912a:	434e      	muls	r6, r1
   b912c:	9607      	str	r6, [sp, #28]
   b912e:	3301      	adds	r3, #1
   b9130:	e7e2      	b.n	b90f8 <_strtod_l+0x228>
   b9132:	f103 0c01 	add.w	ip, r3, #1
   b9136:	f1bc 0f10 	cmp.w	ip, #16
   b913a:	bfd8      	it	le
   b913c:	fb01 f909 	mulle.w	r9, r1, r9
   b9140:	e7f5      	b.n	b912e <_strtod_l+0x25e>
   b9142:	2d10      	cmp	r5, #16
   b9144:	bfdc      	itt	le
   b9146:	230a      	movle	r3, #10
   b9148:	fb03 2909 	mlale	r9, r3, r9, r2
   b914c:	e7e1      	b.n	b9112 <_strtod_l+0x242>
   b914e:	2300      	movs	r3, #0
   b9150:	9305      	str	r3, [sp, #20]
   b9152:	2301      	movs	r3, #1
   b9154:	e77c      	b.n	b9050 <_strtod_l+0x180>
   b9156:	f04f 0c00 	mov.w	ip, #0
   b915a:	f108 0202 	add.w	r2, r8, #2
   b915e:	9217      	str	r2, [sp, #92]	; 0x5c
   b9160:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9164:	e785      	b.n	b9072 <_strtod_l+0x1a2>
   b9166:	f04f 0c01 	mov.w	ip, #1
   b916a:	e7f6      	b.n	b915a <_strtod_l+0x28a>
   b916c:	000bba18 	.word	0x000bba18
   b9170:	000bb850 	.word	0x000bb850
   b9174:	7ff00000 	.word	0x7ff00000
   b9178:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b917a:	1c51      	adds	r1, r2, #1
   b917c:	9117      	str	r1, [sp, #92]	; 0x5c
   b917e:	7852      	ldrb	r2, [r2, #1]
   b9180:	2a30      	cmp	r2, #48	; 0x30
   b9182:	d0f9      	beq.n	b9178 <_strtod_l+0x2a8>
   b9184:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9188:	2908      	cmp	r1, #8
   b918a:	f63f af79 	bhi.w	b9080 <_strtod_l+0x1b0>
   b918e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b9192:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9194:	9206      	str	r2, [sp, #24]
   b9196:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9198:	1c51      	adds	r1, r2, #1
   b919a:	9117      	str	r1, [sp, #92]	; 0x5c
   b919c:	7852      	ldrb	r2, [r2, #1]
   b919e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b91a2:	2e09      	cmp	r6, #9
   b91a4:	d937      	bls.n	b9216 <_strtod_l+0x346>
   b91a6:	9e06      	ldr	r6, [sp, #24]
   b91a8:	1b89      	subs	r1, r1, r6
   b91aa:	2908      	cmp	r1, #8
   b91ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b91b0:	dc02      	bgt.n	b91b8 <_strtod_l+0x2e8>
   b91b2:	4576      	cmp	r6, lr
   b91b4:	bfa8      	it	ge
   b91b6:	4676      	movge	r6, lr
   b91b8:	f1bc 0f00 	cmp.w	ip, #0
   b91bc:	d000      	beq.n	b91c0 <_strtod_l+0x2f0>
   b91be:	4276      	negs	r6, r6
   b91c0:	2d00      	cmp	r5, #0
   b91c2:	d14d      	bne.n	b9260 <_strtod_l+0x390>
   b91c4:	9904      	ldr	r1, [sp, #16]
   b91c6:	4301      	orrs	r1, r0
   b91c8:	f47f aec6 	bne.w	b8f58 <_strtod_l+0x88>
   b91cc:	2b00      	cmp	r3, #0
   b91ce:	f47f aee1 	bne.w	b8f94 <_strtod_l+0xc4>
   b91d2:	2a69      	cmp	r2, #105	; 0x69
   b91d4:	d027      	beq.n	b9226 <_strtod_l+0x356>
   b91d6:	dc24      	bgt.n	b9222 <_strtod_l+0x352>
   b91d8:	2a49      	cmp	r2, #73	; 0x49
   b91da:	d024      	beq.n	b9226 <_strtod_l+0x356>
   b91dc:	2a4e      	cmp	r2, #78	; 0x4e
   b91de:	f47f aed9 	bne.w	b8f94 <_strtod_l+0xc4>
   b91e2:	499f      	ldr	r1, [pc, #636]	; (b9460 <_strtod_l+0x590>)
   b91e4:	a817      	add	r0, sp, #92	; 0x5c
   b91e6:	f001 f833 	bl	ba250 <__match>
   b91ea:	2800      	cmp	r0, #0
   b91ec:	f43f aed2 	beq.w	b8f94 <_strtod_l+0xc4>
   b91f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b91f2:	781b      	ldrb	r3, [r3, #0]
   b91f4:	2b28      	cmp	r3, #40	; 0x28
   b91f6:	d12d      	bne.n	b9254 <_strtod_l+0x384>
   b91f8:	499a      	ldr	r1, [pc, #616]	; (b9464 <_strtod_l+0x594>)
   b91fa:	aa1a      	add	r2, sp, #104	; 0x68
   b91fc:	a817      	add	r0, sp, #92	; 0x5c
   b91fe:	f001 f83b 	bl	ba278 <__hexnan>
   b9202:	2805      	cmp	r0, #5
   b9204:	d126      	bne.n	b9254 <_strtod_l+0x384>
   b9206:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9208:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b920c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9210:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9214:	e6a0      	b.n	b8f58 <_strtod_l+0x88>
   b9216:	210a      	movs	r1, #10
   b9218:	fb01 2e0e 	mla	lr, r1, lr, r2
   b921c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9220:	e7b9      	b.n	b9196 <_strtod_l+0x2c6>
   b9222:	2a6e      	cmp	r2, #110	; 0x6e
   b9224:	e7db      	b.n	b91de <_strtod_l+0x30e>
   b9226:	4990      	ldr	r1, [pc, #576]	; (b9468 <_strtod_l+0x598>)
   b9228:	a817      	add	r0, sp, #92	; 0x5c
   b922a:	f001 f811 	bl	ba250 <__match>
   b922e:	2800      	cmp	r0, #0
   b9230:	f43f aeb0 	beq.w	b8f94 <_strtod_l+0xc4>
   b9234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9236:	498d      	ldr	r1, [pc, #564]	; (b946c <_strtod_l+0x59c>)
   b9238:	3b01      	subs	r3, #1
   b923a:	a817      	add	r0, sp, #92	; 0x5c
   b923c:	9317      	str	r3, [sp, #92]	; 0x5c
   b923e:	f001 f807 	bl	ba250 <__match>
   b9242:	b910      	cbnz	r0, b924a <_strtod_l+0x37a>
   b9244:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9246:	3301      	adds	r3, #1
   b9248:	9317      	str	r3, [sp, #92]	; 0x5c
   b924a:	f8df b230 	ldr.w	fp, [pc, #560]	; b947c <_strtod_l+0x5ac>
   b924e:	f04f 0a00 	mov.w	sl, #0
   b9252:	e681      	b.n	b8f58 <_strtod_l+0x88>
   b9254:	4886      	ldr	r0, [pc, #536]	; (b9470 <_strtod_l+0x5a0>)
   b9256:	f001 fd93 	bl	bad80 <nan>
   b925a:	ec5b ab10 	vmov	sl, fp, d0
   b925e:	e67b      	b.n	b8f58 <_strtod_l+0x88>
   b9260:	9b05      	ldr	r3, [sp, #20]
   b9262:	9807      	ldr	r0, [sp, #28]
   b9264:	1af3      	subs	r3, r6, r3
   b9266:	2f00      	cmp	r7, #0
   b9268:	bf08      	it	eq
   b926a:	462f      	moveq	r7, r5
   b926c:	2d10      	cmp	r5, #16
   b926e:	9306      	str	r3, [sp, #24]
   b9270:	46a8      	mov	r8, r5
   b9272:	bfa8      	it	ge
   b9274:	f04f 0810 	movge.w	r8, #16
   b9278:	f7fb f814 	bl	b42a4 <__aeabi_ui2d>
   b927c:	2d09      	cmp	r5, #9
   b927e:	4682      	mov	sl, r0
   b9280:	468b      	mov	fp, r1
   b9282:	dd13      	ble.n	b92ac <_strtod_l+0x3dc>
   b9284:	4b7b      	ldr	r3, [pc, #492]	; (b9474 <_strtod_l+0x5a4>)
   b9286:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b928a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b928e:	f7fb f883 	bl	b4398 <__aeabi_dmul>
   b9292:	4682      	mov	sl, r0
   b9294:	4648      	mov	r0, r9
   b9296:	468b      	mov	fp, r1
   b9298:	f7fb f804 	bl	b42a4 <__aeabi_ui2d>
   b929c:	4602      	mov	r2, r0
   b929e:	460b      	mov	r3, r1
   b92a0:	4650      	mov	r0, sl
   b92a2:	4659      	mov	r1, fp
   b92a4:	f7fa fec2 	bl	b402c <__adddf3>
   b92a8:	4682      	mov	sl, r0
   b92aa:	468b      	mov	fp, r1
   b92ac:	2d0f      	cmp	r5, #15
   b92ae:	dc38      	bgt.n	b9322 <_strtod_l+0x452>
   b92b0:	9b06      	ldr	r3, [sp, #24]
   b92b2:	2b00      	cmp	r3, #0
   b92b4:	f43f ae50 	beq.w	b8f58 <_strtod_l+0x88>
   b92b8:	dd24      	ble.n	b9304 <_strtod_l+0x434>
   b92ba:	2b16      	cmp	r3, #22
   b92bc:	dc0b      	bgt.n	b92d6 <_strtod_l+0x406>
   b92be:	496d      	ldr	r1, [pc, #436]	; (b9474 <_strtod_l+0x5a4>)
   b92c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b92c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b92c8:	4652      	mov	r2, sl
   b92ca:	465b      	mov	r3, fp
   b92cc:	f7fb f864 	bl	b4398 <__aeabi_dmul>
   b92d0:	4682      	mov	sl, r0
   b92d2:	468b      	mov	fp, r1
   b92d4:	e640      	b.n	b8f58 <_strtod_l+0x88>
   b92d6:	9a06      	ldr	r2, [sp, #24]
   b92d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b92dc:	4293      	cmp	r3, r2
   b92de:	db20      	blt.n	b9322 <_strtod_l+0x452>
   b92e0:	4c64      	ldr	r4, [pc, #400]	; (b9474 <_strtod_l+0x5a4>)
   b92e2:	f1c5 050f 	rsb	r5, r5, #15
   b92e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b92ea:	4652      	mov	r2, sl
   b92ec:	465b      	mov	r3, fp
   b92ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   b92f2:	f7fb f851 	bl	b4398 <__aeabi_dmul>
   b92f6:	9b06      	ldr	r3, [sp, #24]
   b92f8:	1b5d      	subs	r5, r3, r5
   b92fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b92fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9302:	e7e3      	b.n	b92cc <_strtod_l+0x3fc>
   b9304:	9b06      	ldr	r3, [sp, #24]
   b9306:	3316      	adds	r3, #22
   b9308:	db0b      	blt.n	b9322 <_strtod_l+0x452>
   b930a:	9b05      	ldr	r3, [sp, #20]
   b930c:	1b9e      	subs	r6, r3, r6
   b930e:	4b59      	ldr	r3, [pc, #356]	; (b9474 <_strtod_l+0x5a4>)
   b9310:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9314:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9318:	4650      	mov	r0, sl
   b931a:	4659      	mov	r1, fp
   b931c:	f7fb f966 	bl	b45ec <__aeabi_ddiv>
   b9320:	e7d6      	b.n	b92d0 <_strtod_l+0x400>
   b9322:	9b06      	ldr	r3, [sp, #24]
   b9324:	eba5 0808 	sub.w	r8, r5, r8
   b9328:	4498      	add	r8, r3
   b932a:	f1b8 0f00 	cmp.w	r8, #0
   b932e:	dd74      	ble.n	b941a <_strtod_l+0x54a>
   b9330:	f018 030f 	ands.w	r3, r8, #15
   b9334:	d00a      	beq.n	b934c <_strtod_l+0x47c>
   b9336:	494f      	ldr	r1, [pc, #316]	; (b9474 <_strtod_l+0x5a4>)
   b9338:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b933c:	4652      	mov	r2, sl
   b933e:	465b      	mov	r3, fp
   b9340:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9344:	f7fb f828 	bl	b4398 <__aeabi_dmul>
   b9348:	4682      	mov	sl, r0
   b934a:	468b      	mov	fp, r1
   b934c:	f038 080f 	bics.w	r8, r8, #15
   b9350:	d04f      	beq.n	b93f2 <_strtod_l+0x522>
   b9352:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9356:	dd22      	ble.n	b939e <_strtod_l+0x4ce>
   b9358:	2500      	movs	r5, #0
   b935a:	462e      	mov	r6, r5
   b935c:	9507      	str	r5, [sp, #28]
   b935e:	9505      	str	r5, [sp, #20]
   b9360:	2322      	movs	r3, #34	; 0x22
   b9362:	f8df b118 	ldr.w	fp, [pc, #280]	; b947c <_strtod_l+0x5ac>
   b9366:	6023      	str	r3, [r4, #0]
   b9368:	f04f 0a00 	mov.w	sl, #0
   b936c:	9b07      	ldr	r3, [sp, #28]
   b936e:	2b00      	cmp	r3, #0
   b9370:	f43f adf2 	beq.w	b8f58 <_strtod_l+0x88>
   b9374:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9376:	4620      	mov	r0, r4
   b9378:	f001 f870 	bl	ba45c <_Bfree>
   b937c:	9905      	ldr	r1, [sp, #20]
   b937e:	4620      	mov	r0, r4
   b9380:	f001 f86c 	bl	ba45c <_Bfree>
   b9384:	4631      	mov	r1, r6
   b9386:	4620      	mov	r0, r4
   b9388:	f001 f868 	bl	ba45c <_Bfree>
   b938c:	9907      	ldr	r1, [sp, #28]
   b938e:	4620      	mov	r0, r4
   b9390:	f001 f864 	bl	ba45c <_Bfree>
   b9394:	4629      	mov	r1, r5
   b9396:	4620      	mov	r0, r4
   b9398:	f001 f860 	bl	ba45c <_Bfree>
   b939c:	e5dc      	b.n	b8f58 <_strtod_l+0x88>
   b939e:	4b36      	ldr	r3, [pc, #216]	; (b9478 <_strtod_l+0x5a8>)
   b93a0:	9304      	str	r3, [sp, #16]
   b93a2:	2300      	movs	r3, #0
   b93a4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b93a8:	4650      	mov	r0, sl
   b93aa:	4659      	mov	r1, fp
   b93ac:	4699      	mov	r9, r3
   b93ae:	f1b8 0f01 	cmp.w	r8, #1
   b93b2:	dc21      	bgt.n	b93f8 <_strtod_l+0x528>
   b93b4:	b10b      	cbz	r3, b93ba <_strtod_l+0x4ea>
   b93b6:	4682      	mov	sl, r0
   b93b8:	468b      	mov	fp, r1
   b93ba:	4b2f      	ldr	r3, [pc, #188]	; (b9478 <_strtod_l+0x5a8>)
   b93bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b93c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b93c4:	4652      	mov	r2, sl
   b93c6:	465b      	mov	r3, fp
   b93c8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b93cc:	f7fa ffe4 	bl	b4398 <__aeabi_dmul>
   b93d0:	4b2a      	ldr	r3, [pc, #168]	; (b947c <_strtod_l+0x5ac>)
   b93d2:	460a      	mov	r2, r1
   b93d4:	400b      	ands	r3, r1
   b93d6:	492a      	ldr	r1, [pc, #168]	; (b9480 <_strtod_l+0x5b0>)
   b93d8:	428b      	cmp	r3, r1
   b93da:	4682      	mov	sl, r0
   b93dc:	d8bc      	bhi.n	b9358 <_strtod_l+0x488>
   b93de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b93e2:	428b      	cmp	r3, r1
   b93e4:	bf86      	itte	hi
   b93e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9484 <_strtod_l+0x5b4>
   b93ea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b93ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b93f2:	2300      	movs	r3, #0
   b93f4:	9304      	str	r3, [sp, #16]
   b93f6:	e084      	b.n	b9502 <_strtod_l+0x632>
   b93f8:	f018 0f01 	tst.w	r8, #1
   b93fc:	d005      	beq.n	b940a <_strtod_l+0x53a>
   b93fe:	9b04      	ldr	r3, [sp, #16]
   b9400:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9404:	f7fa ffc8 	bl	b4398 <__aeabi_dmul>
   b9408:	2301      	movs	r3, #1
   b940a:	9a04      	ldr	r2, [sp, #16]
   b940c:	3208      	adds	r2, #8
   b940e:	f109 0901 	add.w	r9, r9, #1
   b9412:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9416:	9204      	str	r2, [sp, #16]
   b9418:	e7c9      	b.n	b93ae <_strtod_l+0x4de>
   b941a:	d0ea      	beq.n	b93f2 <_strtod_l+0x522>
   b941c:	f1c8 0800 	rsb	r8, r8, #0
   b9420:	f018 020f 	ands.w	r2, r8, #15
   b9424:	d00a      	beq.n	b943c <_strtod_l+0x56c>
   b9426:	4b13      	ldr	r3, [pc, #76]	; (b9474 <_strtod_l+0x5a4>)
   b9428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b942c:	4650      	mov	r0, sl
   b942e:	4659      	mov	r1, fp
   b9430:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9434:	f7fb f8da 	bl	b45ec <__aeabi_ddiv>
   b9438:	4682      	mov	sl, r0
   b943a:	468b      	mov	fp, r1
   b943c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9440:	d0d7      	beq.n	b93f2 <_strtod_l+0x522>
   b9442:	f1b8 0f1f 	cmp.w	r8, #31
   b9446:	dd1f      	ble.n	b9488 <_strtod_l+0x5b8>
   b9448:	2500      	movs	r5, #0
   b944a:	462e      	mov	r6, r5
   b944c:	9507      	str	r5, [sp, #28]
   b944e:	9505      	str	r5, [sp, #20]
   b9450:	2322      	movs	r3, #34	; 0x22
   b9452:	f04f 0a00 	mov.w	sl, #0
   b9456:	f04f 0b00 	mov.w	fp, #0
   b945a:	6023      	str	r3, [r4, #0]
   b945c:	e786      	b.n	b936c <_strtod_l+0x49c>
   b945e:	bf00      	nop
   b9460:	000bb84c 	.word	0x000bb84c
   b9464:	000bb864 	.word	0x000bb864
   b9468:	000bb843 	.word	0x000bb843
   b946c:	000bb846 	.word	0x000bb846
   b9470:	000bb740 	.word	0x000bb740
   b9474:	000bbab0 	.word	0x000bbab0
   b9478:	000bba88 	.word	0x000bba88
   b947c:	7ff00000 	.word	0x7ff00000
   b9480:	7ca00000 	.word	0x7ca00000
   b9484:	7fefffff 	.word	0x7fefffff
   b9488:	f018 0310 	ands.w	r3, r8, #16
   b948c:	bf18      	it	ne
   b948e:	236a      	movne	r3, #106	; 0x6a
   b9490:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9840 <_strtod_l+0x970>
   b9494:	9304      	str	r3, [sp, #16]
   b9496:	4650      	mov	r0, sl
   b9498:	4659      	mov	r1, fp
   b949a:	2300      	movs	r3, #0
   b949c:	f018 0f01 	tst.w	r8, #1
   b94a0:	d004      	beq.n	b94ac <_strtod_l+0x5dc>
   b94a2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b94a6:	f7fa ff77 	bl	b4398 <__aeabi_dmul>
   b94aa:	2301      	movs	r3, #1
   b94ac:	ea5f 0868 	movs.w	r8, r8, asr #1
   b94b0:	f109 0908 	add.w	r9, r9, #8
   b94b4:	d1f2      	bne.n	b949c <_strtod_l+0x5cc>
   b94b6:	b10b      	cbz	r3, b94bc <_strtod_l+0x5ec>
   b94b8:	4682      	mov	sl, r0
   b94ba:	468b      	mov	fp, r1
   b94bc:	9b04      	ldr	r3, [sp, #16]
   b94be:	b1c3      	cbz	r3, b94f2 <_strtod_l+0x622>
   b94c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b94c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b94c8:	2b00      	cmp	r3, #0
   b94ca:	4659      	mov	r1, fp
   b94cc:	dd11      	ble.n	b94f2 <_strtod_l+0x622>
   b94ce:	2b1f      	cmp	r3, #31
   b94d0:	f340 8124 	ble.w	b971c <_strtod_l+0x84c>
   b94d4:	2b34      	cmp	r3, #52	; 0x34
   b94d6:	bfde      	ittt	le
   b94d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b94dc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b94e0:	fa03 f202 	lslle.w	r2, r3, r2
   b94e4:	f04f 0a00 	mov.w	sl, #0
   b94e8:	bfcc      	ite	gt
   b94ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b94ee:	ea02 0b01 	andle.w	fp, r2, r1
   b94f2:	2200      	movs	r2, #0
   b94f4:	2300      	movs	r3, #0
   b94f6:	4650      	mov	r0, sl
   b94f8:	4659      	mov	r1, fp
   b94fa:	f7fb f9b5 	bl	b4868 <__aeabi_dcmpeq>
   b94fe:	2800      	cmp	r0, #0
   b9500:	d1a2      	bne.n	b9448 <_strtod_l+0x578>
   b9502:	9b07      	ldr	r3, [sp, #28]
   b9504:	9300      	str	r3, [sp, #0]
   b9506:	9908      	ldr	r1, [sp, #32]
   b9508:	462b      	mov	r3, r5
   b950a:	463a      	mov	r2, r7
   b950c:	4620      	mov	r0, r4
   b950e:	f001 f80d 	bl	ba52c <__s2b>
   b9512:	9007      	str	r0, [sp, #28]
   b9514:	2800      	cmp	r0, #0
   b9516:	f43f af1f 	beq.w	b9358 <_strtod_l+0x488>
   b951a:	9b05      	ldr	r3, [sp, #20]
   b951c:	1b9e      	subs	r6, r3, r6
   b951e:	9b06      	ldr	r3, [sp, #24]
   b9520:	2b00      	cmp	r3, #0
   b9522:	bfb4      	ite	lt
   b9524:	4633      	movlt	r3, r6
   b9526:	2300      	movge	r3, #0
   b9528:	930c      	str	r3, [sp, #48]	; 0x30
   b952a:	9b06      	ldr	r3, [sp, #24]
   b952c:	2500      	movs	r5, #0
   b952e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9532:	9312      	str	r3, [sp, #72]	; 0x48
   b9534:	462e      	mov	r6, r5
   b9536:	9b07      	ldr	r3, [sp, #28]
   b9538:	4620      	mov	r0, r4
   b953a:	6859      	ldr	r1, [r3, #4]
   b953c:	f000 ff4e 	bl	ba3dc <_Balloc>
   b9540:	9005      	str	r0, [sp, #20]
   b9542:	2800      	cmp	r0, #0
   b9544:	f43f af0c 	beq.w	b9360 <_strtod_l+0x490>
   b9548:	9b07      	ldr	r3, [sp, #28]
   b954a:	691a      	ldr	r2, [r3, #16]
   b954c:	3202      	adds	r2, #2
   b954e:	f103 010c 	add.w	r1, r3, #12
   b9552:	0092      	lsls	r2, r2, #2
   b9554:	300c      	adds	r0, #12
   b9556:	f7ff fbf5 	bl	b8d44 <memcpy>
   b955a:	ec4b ab10 	vmov	d0, sl, fp
   b955e:	aa1a      	add	r2, sp, #104	; 0x68
   b9560:	a919      	add	r1, sp, #100	; 0x64
   b9562:	4620      	mov	r0, r4
   b9564:	f001 fb28 	bl	babb8 <__d2b>
   b9568:	ec4b ab18 	vmov	d8, sl, fp
   b956c:	9018      	str	r0, [sp, #96]	; 0x60
   b956e:	2800      	cmp	r0, #0
   b9570:	f43f aef6 	beq.w	b9360 <_strtod_l+0x490>
   b9574:	2101      	movs	r1, #1
   b9576:	4620      	mov	r0, r4
   b9578:	f001 f872 	bl	ba660 <__i2b>
   b957c:	4606      	mov	r6, r0
   b957e:	2800      	cmp	r0, #0
   b9580:	f43f aeee 	beq.w	b9360 <_strtod_l+0x490>
   b9584:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9586:	9904      	ldr	r1, [sp, #16]
   b9588:	2b00      	cmp	r3, #0
   b958a:	bfab      	itete	ge
   b958c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b958e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9590:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9592:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9596:	bfac      	ite	ge
   b9598:	eb03 0902 	addge.w	r9, r3, r2
   b959c:	1ad7      	sublt	r7, r2, r3
   b959e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b95a0:	eba3 0801 	sub.w	r8, r3, r1
   b95a4:	4490      	add	r8, r2
   b95a6:	4ba1      	ldr	r3, [pc, #644]	; (b982c <_strtod_l+0x95c>)
   b95a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b95ac:	4598      	cmp	r8, r3
   b95ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b95b2:	f280 80c7 	bge.w	b9744 <_strtod_l+0x874>
   b95b6:	eba3 0308 	sub.w	r3, r3, r8
   b95ba:	2b1f      	cmp	r3, #31
   b95bc:	eba2 0203 	sub.w	r2, r2, r3
   b95c0:	f04f 0101 	mov.w	r1, #1
   b95c4:	f300 80b1 	bgt.w	b972a <_strtod_l+0x85a>
   b95c8:	fa01 f303 	lsl.w	r3, r1, r3
   b95cc:	930d      	str	r3, [sp, #52]	; 0x34
   b95ce:	2300      	movs	r3, #0
   b95d0:	9308      	str	r3, [sp, #32]
   b95d2:	eb09 0802 	add.w	r8, r9, r2
   b95d6:	9b04      	ldr	r3, [sp, #16]
   b95d8:	45c1      	cmp	r9, r8
   b95da:	4417      	add	r7, r2
   b95dc:	441f      	add	r7, r3
   b95de:	464b      	mov	r3, r9
   b95e0:	bfa8      	it	ge
   b95e2:	4643      	movge	r3, r8
   b95e4:	42bb      	cmp	r3, r7
   b95e6:	bfa8      	it	ge
   b95e8:	463b      	movge	r3, r7
   b95ea:	2b00      	cmp	r3, #0
   b95ec:	bfc2      	ittt	gt
   b95ee:	eba8 0803 	subgt.w	r8, r8, r3
   b95f2:	1aff      	subgt	r7, r7, r3
   b95f4:	eba9 0903 	subgt.w	r9, r9, r3
   b95f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b95fa:	2b00      	cmp	r3, #0
   b95fc:	dd17      	ble.n	b962e <_strtod_l+0x75e>
   b95fe:	4631      	mov	r1, r6
   b9600:	461a      	mov	r2, r3
   b9602:	4620      	mov	r0, r4
   b9604:	f001 f8ec 	bl	ba7e0 <__pow5mult>
   b9608:	4606      	mov	r6, r0
   b960a:	2800      	cmp	r0, #0
   b960c:	f43f aea8 	beq.w	b9360 <_strtod_l+0x490>
   b9610:	4601      	mov	r1, r0
   b9612:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9614:	4620      	mov	r0, r4
   b9616:	f001 f839 	bl	ba68c <__multiply>
   b961a:	900b      	str	r0, [sp, #44]	; 0x2c
   b961c:	2800      	cmp	r0, #0
   b961e:	f43f ae9f 	beq.w	b9360 <_strtod_l+0x490>
   b9622:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9624:	4620      	mov	r0, r4
   b9626:	f000 ff19 	bl	ba45c <_Bfree>
   b962a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b962c:	9318      	str	r3, [sp, #96]	; 0x60
   b962e:	f1b8 0f00 	cmp.w	r8, #0
   b9632:	f300 808c 	bgt.w	b974e <_strtod_l+0x87e>
   b9636:	9b06      	ldr	r3, [sp, #24]
   b9638:	2b00      	cmp	r3, #0
   b963a:	dd08      	ble.n	b964e <_strtod_l+0x77e>
   b963c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b963e:	9905      	ldr	r1, [sp, #20]
   b9640:	4620      	mov	r0, r4
   b9642:	f001 f8cd 	bl	ba7e0 <__pow5mult>
   b9646:	9005      	str	r0, [sp, #20]
   b9648:	2800      	cmp	r0, #0
   b964a:	f43f ae89 	beq.w	b9360 <_strtod_l+0x490>
   b964e:	2f00      	cmp	r7, #0
   b9650:	dd08      	ble.n	b9664 <_strtod_l+0x794>
   b9652:	9905      	ldr	r1, [sp, #20]
   b9654:	463a      	mov	r2, r7
   b9656:	4620      	mov	r0, r4
   b9658:	f001 f91c 	bl	ba894 <__lshift>
   b965c:	9005      	str	r0, [sp, #20]
   b965e:	2800      	cmp	r0, #0
   b9660:	f43f ae7e 	beq.w	b9360 <_strtod_l+0x490>
   b9664:	f1b9 0f00 	cmp.w	r9, #0
   b9668:	dd08      	ble.n	b967c <_strtod_l+0x7ac>
   b966a:	4631      	mov	r1, r6
   b966c:	464a      	mov	r2, r9
   b966e:	4620      	mov	r0, r4
   b9670:	f001 f910 	bl	ba894 <__lshift>
   b9674:	4606      	mov	r6, r0
   b9676:	2800      	cmp	r0, #0
   b9678:	f43f ae72 	beq.w	b9360 <_strtod_l+0x490>
   b967c:	9a05      	ldr	r2, [sp, #20]
   b967e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9680:	4620      	mov	r0, r4
   b9682:	f001 f993 	bl	ba9ac <__mdiff>
   b9686:	4605      	mov	r5, r0
   b9688:	2800      	cmp	r0, #0
   b968a:	f43f ae69 	beq.w	b9360 <_strtod_l+0x490>
   b968e:	68c3      	ldr	r3, [r0, #12]
   b9690:	930b      	str	r3, [sp, #44]	; 0x2c
   b9692:	2300      	movs	r3, #0
   b9694:	60c3      	str	r3, [r0, #12]
   b9696:	4631      	mov	r1, r6
   b9698:	f001 f96c 	bl	ba974 <__mcmp>
   b969c:	2800      	cmp	r0, #0
   b969e:	da60      	bge.n	b9762 <_strtod_l+0x892>
   b96a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b96a2:	ea53 030a 	orrs.w	r3, r3, sl
   b96a6:	f040 8082 	bne.w	b97ae <_strtod_l+0x8de>
   b96aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b96ae:	2b00      	cmp	r3, #0
   b96b0:	d17d      	bne.n	b97ae <_strtod_l+0x8de>
   b96b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b96b6:	0d1b      	lsrs	r3, r3, #20
   b96b8:	051b      	lsls	r3, r3, #20
   b96ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b96be:	d976      	bls.n	b97ae <_strtod_l+0x8de>
   b96c0:	696b      	ldr	r3, [r5, #20]
   b96c2:	b913      	cbnz	r3, b96ca <_strtod_l+0x7fa>
   b96c4:	692b      	ldr	r3, [r5, #16]
   b96c6:	2b01      	cmp	r3, #1
   b96c8:	dd71      	ble.n	b97ae <_strtod_l+0x8de>
   b96ca:	4629      	mov	r1, r5
   b96cc:	2201      	movs	r2, #1
   b96ce:	4620      	mov	r0, r4
   b96d0:	f001 f8e0 	bl	ba894 <__lshift>
   b96d4:	4631      	mov	r1, r6
   b96d6:	4605      	mov	r5, r0
   b96d8:	f001 f94c 	bl	ba974 <__mcmp>
   b96dc:	2800      	cmp	r0, #0
   b96de:	dd66      	ble.n	b97ae <_strtod_l+0x8de>
   b96e0:	9904      	ldr	r1, [sp, #16]
   b96e2:	4a53      	ldr	r2, [pc, #332]	; (b9830 <_strtod_l+0x960>)
   b96e4:	465b      	mov	r3, fp
   b96e6:	2900      	cmp	r1, #0
   b96e8:	f000 8081 	beq.w	b97ee <_strtod_l+0x91e>
   b96ec:	ea02 010b 	and.w	r1, r2, fp
   b96f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b96f4:	dc7b      	bgt.n	b97ee <_strtod_l+0x91e>
   b96f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b96fa:	f77f aea9 	ble.w	b9450 <_strtod_l+0x580>
   b96fe:	4b4d      	ldr	r3, [pc, #308]	; (b9834 <_strtod_l+0x964>)
   b9700:	4650      	mov	r0, sl
   b9702:	4659      	mov	r1, fp
   b9704:	2200      	movs	r2, #0
   b9706:	f7fa fe47 	bl	b4398 <__aeabi_dmul>
   b970a:	460b      	mov	r3, r1
   b970c:	4303      	orrs	r3, r0
   b970e:	bf08      	it	eq
   b9710:	2322      	moveq	r3, #34	; 0x22
   b9712:	4682      	mov	sl, r0
   b9714:	468b      	mov	fp, r1
   b9716:	bf08      	it	eq
   b9718:	6023      	streq	r3, [r4, #0]
   b971a:	e62b      	b.n	b9374 <_strtod_l+0x4a4>
   b971c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9720:	fa02 f303 	lsl.w	r3, r2, r3
   b9724:	ea03 0a0a 	and.w	sl, r3, sl
   b9728:	e6e3      	b.n	b94f2 <_strtod_l+0x622>
   b972a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b972e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9732:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9736:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b973a:	fa01 f308 	lsl.w	r3, r1, r8
   b973e:	9308      	str	r3, [sp, #32]
   b9740:	910d      	str	r1, [sp, #52]	; 0x34
   b9742:	e746      	b.n	b95d2 <_strtod_l+0x702>
   b9744:	2300      	movs	r3, #0
   b9746:	9308      	str	r3, [sp, #32]
   b9748:	2301      	movs	r3, #1
   b974a:	930d      	str	r3, [sp, #52]	; 0x34
   b974c:	e741      	b.n	b95d2 <_strtod_l+0x702>
   b974e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9750:	4642      	mov	r2, r8
   b9752:	4620      	mov	r0, r4
   b9754:	f001 f89e 	bl	ba894 <__lshift>
   b9758:	9018      	str	r0, [sp, #96]	; 0x60
   b975a:	2800      	cmp	r0, #0
   b975c:	f47f af6b 	bne.w	b9636 <_strtod_l+0x766>
   b9760:	e5fe      	b.n	b9360 <_strtod_l+0x490>
   b9762:	465f      	mov	r7, fp
   b9764:	d16e      	bne.n	b9844 <_strtod_l+0x974>
   b9766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9768:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b976c:	b342      	cbz	r2, b97c0 <_strtod_l+0x8f0>
   b976e:	4a32      	ldr	r2, [pc, #200]	; (b9838 <_strtod_l+0x968>)
   b9770:	4293      	cmp	r3, r2
   b9772:	d128      	bne.n	b97c6 <_strtod_l+0x8f6>
   b9774:	9b04      	ldr	r3, [sp, #16]
   b9776:	4651      	mov	r1, sl
   b9778:	b1eb      	cbz	r3, b97b6 <_strtod_l+0x8e6>
   b977a:	4b2d      	ldr	r3, [pc, #180]	; (b9830 <_strtod_l+0x960>)
   b977c:	403b      	ands	r3, r7
   b977e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9786:	d819      	bhi.n	b97bc <_strtod_l+0x8ec>
   b9788:	0d1b      	lsrs	r3, r3, #20
   b978a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b978e:	fa02 f303 	lsl.w	r3, r2, r3
   b9792:	4299      	cmp	r1, r3
   b9794:	d117      	bne.n	b97c6 <_strtod_l+0x8f6>
   b9796:	4b29      	ldr	r3, [pc, #164]	; (b983c <_strtod_l+0x96c>)
   b9798:	429f      	cmp	r7, r3
   b979a:	d102      	bne.n	b97a2 <_strtod_l+0x8d2>
   b979c:	3101      	adds	r1, #1
   b979e:	f43f addf 	beq.w	b9360 <_strtod_l+0x490>
   b97a2:	4b23      	ldr	r3, [pc, #140]	; (b9830 <_strtod_l+0x960>)
   b97a4:	403b      	ands	r3, r7
   b97a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b97aa:	f04f 0a00 	mov.w	sl, #0
   b97ae:	9b04      	ldr	r3, [sp, #16]
   b97b0:	2b00      	cmp	r3, #0
   b97b2:	d1a4      	bne.n	b96fe <_strtod_l+0x82e>
   b97b4:	e5de      	b.n	b9374 <_strtod_l+0x4a4>
   b97b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b97ba:	e7ea      	b.n	b9792 <_strtod_l+0x8c2>
   b97bc:	4613      	mov	r3, r2
   b97be:	e7e8      	b.n	b9792 <_strtod_l+0x8c2>
   b97c0:	ea53 030a 	orrs.w	r3, r3, sl
   b97c4:	d08c      	beq.n	b96e0 <_strtod_l+0x810>
   b97c6:	9b08      	ldr	r3, [sp, #32]
   b97c8:	b1db      	cbz	r3, b9802 <_strtod_l+0x932>
   b97ca:	423b      	tst	r3, r7
   b97cc:	d0ef      	beq.n	b97ae <_strtod_l+0x8de>
   b97ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b97d0:	9a04      	ldr	r2, [sp, #16]
   b97d2:	4650      	mov	r0, sl
   b97d4:	4659      	mov	r1, fp
   b97d6:	b1c3      	cbz	r3, b980a <_strtod_l+0x93a>
   b97d8:	f7ff fb5e 	bl	b8e98 <sulp>
   b97dc:	4602      	mov	r2, r0
   b97de:	460b      	mov	r3, r1
   b97e0:	ec51 0b18 	vmov	r0, r1, d8
   b97e4:	f7fa fc22 	bl	b402c <__adddf3>
   b97e8:	4682      	mov	sl, r0
   b97ea:	468b      	mov	fp, r1
   b97ec:	e7df      	b.n	b97ae <_strtod_l+0x8de>
   b97ee:	4013      	ands	r3, r2
   b97f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b97f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b97f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b97fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9800:	e7d5      	b.n	b97ae <_strtod_l+0x8de>
   b9802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9804:	ea13 0f0a 	tst.w	r3, sl
   b9808:	e7e0      	b.n	b97cc <_strtod_l+0x8fc>
   b980a:	f7ff fb45 	bl	b8e98 <sulp>
   b980e:	4602      	mov	r2, r0
   b9810:	460b      	mov	r3, r1
   b9812:	ec51 0b18 	vmov	r0, r1, d8
   b9816:	f7fa fc07 	bl	b4028 <__aeabi_dsub>
   b981a:	2200      	movs	r2, #0
   b981c:	2300      	movs	r3, #0
   b981e:	4682      	mov	sl, r0
   b9820:	468b      	mov	fp, r1
   b9822:	f7fb f821 	bl	b4868 <__aeabi_dcmpeq>
   b9826:	2800      	cmp	r0, #0
   b9828:	d0c1      	beq.n	b97ae <_strtod_l+0x8de>
   b982a:	e611      	b.n	b9450 <_strtod_l+0x580>
   b982c:	fffffc02 	.word	0xfffffc02
   b9830:	7ff00000 	.word	0x7ff00000
   b9834:	39500000 	.word	0x39500000
   b9838:	000fffff 	.word	0x000fffff
   b983c:	7fefffff 	.word	0x7fefffff
   b9840:	000bb878 	.word	0x000bb878
   b9844:	4631      	mov	r1, r6
   b9846:	4628      	mov	r0, r5
   b9848:	f001 fa12 	bl	bac70 <__ratio>
   b984c:	ec59 8b10 	vmov	r8, r9, d0
   b9850:	ee10 0a10 	vmov	r0, s0
   b9854:	2200      	movs	r2, #0
   b9856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b985a:	4649      	mov	r1, r9
   b985c:	f7fb f818 	bl	b4890 <__aeabi_dcmple>
   b9860:	2800      	cmp	r0, #0
   b9862:	d07a      	beq.n	b995a <_strtod_l+0xa8a>
   b9864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9866:	2b00      	cmp	r3, #0
   b9868:	d04a      	beq.n	b9900 <_strtod_l+0xa30>
   b986a:	4b95      	ldr	r3, [pc, #596]	; (b9ac0 <_strtod_l+0xbf0>)
   b986c:	2200      	movs	r2, #0
   b986e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9872:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9ac0 <_strtod_l+0xbf0>
   b9876:	f04f 0800 	mov.w	r8, #0
   b987a:	4b92      	ldr	r3, [pc, #584]	; (b9ac4 <_strtod_l+0xbf4>)
   b987c:	403b      	ands	r3, r7
   b987e:	930d      	str	r3, [sp, #52]	; 0x34
   b9880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9882:	4b91      	ldr	r3, [pc, #580]	; (b9ac8 <_strtod_l+0xbf8>)
   b9884:	429a      	cmp	r2, r3
   b9886:	f040 80b0 	bne.w	b99ea <_strtod_l+0xb1a>
   b988a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b988e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9892:	ec4b ab10 	vmov	d0, sl, fp
   b9896:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b989a:	f001 f911 	bl	baac0 <__ulp>
   b989e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b98a2:	ec53 2b10 	vmov	r2, r3, d0
   b98a6:	f7fa fd77 	bl	b4398 <__aeabi_dmul>
   b98aa:	4652      	mov	r2, sl
   b98ac:	465b      	mov	r3, fp
   b98ae:	f7fa fbbd 	bl	b402c <__adddf3>
   b98b2:	460b      	mov	r3, r1
   b98b4:	4983      	ldr	r1, [pc, #524]	; (b9ac4 <_strtod_l+0xbf4>)
   b98b6:	4a85      	ldr	r2, [pc, #532]	; (b9acc <_strtod_l+0xbfc>)
   b98b8:	4019      	ands	r1, r3
   b98ba:	4291      	cmp	r1, r2
   b98bc:	4682      	mov	sl, r0
   b98be:	d960      	bls.n	b9982 <_strtod_l+0xab2>
   b98c0:	ee18 3a90 	vmov	r3, s17
   b98c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b98c8:	4293      	cmp	r3, r2
   b98ca:	d104      	bne.n	b98d6 <_strtod_l+0xa06>
   b98cc:	ee18 3a10 	vmov	r3, s16
   b98d0:	3301      	adds	r3, #1
   b98d2:	f43f ad45 	beq.w	b9360 <_strtod_l+0x490>
   b98d6:	f8df b200 	ldr.w	fp, [pc, #512]	; b9ad8 <_strtod_l+0xc08>
   b98da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b98de:	9918      	ldr	r1, [sp, #96]	; 0x60
   b98e0:	4620      	mov	r0, r4
   b98e2:	f000 fdbb 	bl	ba45c <_Bfree>
   b98e6:	9905      	ldr	r1, [sp, #20]
   b98e8:	4620      	mov	r0, r4
   b98ea:	f000 fdb7 	bl	ba45c <_Bfree>
   b98ee:	4631      	mov	r1, r6
   b98f0:	4620      	mov	r0, r4
   b98f2:	f000 fdb3 	bl	ba45c <_Bfree>
   b98f6:	4629      	mov	r1, r5
   b98f8:	4620      	mov	r0, r4
   b98fa:	f000 fdaf 	bl	ba45c <_Bfree>
   b98fe:	e61a      	b.n	b9536 <_strtod_l+0x666>
   b9900:	f1ba 0f00 	cmp.w	sl, #0
   b9904:	d11b      	bne.n	b993e <_strtod_l+0xa6e>
   b9906:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b990a:	b9f3      	cbnz	r3, b994a <_strtod_l+0xa7a>
   b990c:	4b6c      	ldr	r3, [pc, #432]	; (b9ac0 <_strtod_l+0xbf0>)
   b990e:	2200      	movs	r2, #0
   b9910:	4640      	mov	r0, r8
   b9912:	4649      	mov	r1, r9
   b9914:	f7fa ffb2 	bl	b487c <__aeabi_dcmplt>
   b9918:	b9d0      	cbnz	r0, b9950 <_strtod_l+0xa80>
   b991a:	4640      	mov	r0, r8
   b991c:	4649      	mov	r1, r9
   b991e:	4b6c      	ldr	r3, [pc, #432]	; (b9ad0 <_strtod_l+0xc00>)
   b9920:	2200      	movs	r2, #0
   b9922:	f7fa fd39 	bl	b4398 <__aeabi_dmul>
   b9926:	4680      	mov	r8, r0
   b9928:	4689      	mov	r9, r1
   b992a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b992e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9932:	9315      	str	r3, [sp, #84]	; 0x54
   b9934:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9938:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b993c:	e79d      	b.n	b987a <_strtod_l+0x9aa>
   b993e:	f1ba 0f01 	cmp.w	sl, #1
   b9942:	d102      	bne.n	b994a <_strtod_l+0xa7a>
   b9944:	2f00      	cmp	r7, #0
   b9946:	f43f ad83 	beq.w	b9450 <_strtod_l+0x580>
   b994a:	4b62      	ldr	r3, [pc, #392]	; (b9ad4 <_strtod_l+0xc04>)
   b994c:	2200      	movs	r2, #0
   b994e:	e78e      	b.n	b986e <_strtod_l+0x99e>
   b9950:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9ad0 <_strtod_l+0xc00>
   b9954:	f04f 0800 	mov.w	r8, #0
   b9958:	e7e7      	b.n	b992a <_strtod_l+0xa5a>
   b995a:	4b5d      	ldr	r3, [pc, #372]	; (b9ad0 <_strtod_l+0xc00>)
   b995c:	4640      	mov	r0, r8
   b995e:	4649      	mov	r1, r9
   b9960:	2200      	movs	r2, #0
   b9962:	f7fa fd19 	bl	b4398 <__aeabi_dmul>
   b9966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9968:	4680      	mov	r8, r0
   b996a:	4689      	mov	r9, r1
   b996c:	b933      	cbnz	r3, b997c <_strtod_l+0xaac>
   b996e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9972:	900e      	str	r0, [sp, #56]	; 0x38
   b9974:	930f      	str	r3, [sp, #60]	; 0x3c
   b9976:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b997a:	e7dd      	b.n	b9938 <_strtod_l+0xa68>
   b997c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9980:	e7f9      	b.n	b9976 <_strtod_l+0xaa6>
   b9982:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9986:	9b04      	ldr	r3, [sp, #16]
   b9988:	2b00      	cmp	r3, #0
   b998a:	d1a8      	bne.n	b98de <_strtod_l+0xa0e>
   b998c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9992:	0d1b      	lsrs	r3, r3, #20
   b9994:	051b      	lsls	r3, r3, #20
   b9996:	429a      	cmp	r2, r3
   b9998:	d1a1      	bne.n	b98de <_strtod_l+0xa0e>
   b999a:	4640      	mov	r0, r8
   b999c:	4649      	mov	r1, r9
   b999e:	f7fb f835 	bl	b4a0c <__aeabi_d2lz>
   b99a2:	f7fa fccb 	bl	b433c <__aeabi_l2d>
   b99a6:	4602      	mov	r2, r0
   b99a8:	460b      	mov	r3, r1
   b99aa:	4640      	mov	r0, r8
   b99ac:	4649      	mov	r1, r9
   b99ae:	f7fa fb3b 	bl	b4028 <__aeabi_dsub>
   b99b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b99b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b99b8:	ea43 030a 	orr.w	r3, r3, sl
   b99bc:	4313      	orrs	r3, r2
   b99be:	4680      	mov	r8, r0
   b99c0:	4689      	mov	r9, r1
   b99c2:	d055      	beq.n	b9a70 <_strtod_l+0xba0>
   b99c4:	a336      	add	r3, pc, #216	; (adr r3, b9aa0 <_strtod_l+0xbd0>)
   b99c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b99ca:	f7fa ff57 	bl	b487c <__aeabi_dcmplt>
   b99ce:	2800      	cmp	r0, #0
   b99d0:	f47f acd0 	bne.w	b9374 <_strtod_l+0x4a4>
   b99d4:	a334      	add	r3, pc, #208	; (adr r3, b9aa8 <_strtod_l+0xbd8>)
   b99d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b99da:	4640      	mov	r0, r8
   b99dc:	4649      	mov	r1, r9
   b99de:	f7fa ff6b 	bl	b48b8 <__aeabi_dcmpgt>
   b99e2:	2800      	cmp	r0, #0
   b99e4:	f43f af7b 	beq.w	b98de <_strtod_l+0xa0e>
   b99e8:	e4c4      	b.n	b9374 <_strtod_l+0x4a4>
   b99ea:	9b04      	ldr	r3, [sp, #16]
   b99ec:	b333      	cbz	r3, b9a3c <_strtod_l+0xb6c>
   b99ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b99f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b99f4:	d822      	bhi.n	b9a3c <_strtod_l+0xb6c>
   b99f6:	a32e      	add	r3, pc, #184	; (adr r3, b9ab0 <_strtod_l+0xbe0>)
   b99f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b99fc:	4640      	mov	r0, r8
   b99fe:	4649      	mov	r1, r9
   b9a00:	f7fa ff46 	bl	b4890 <__aeabi_dcmple>
   b9a04:	b1a0      	cbz	r0, b9a30 <_strtod_l+0xb60>
   b9a06:	4649      	mov	r1, r9
   b9a08:	4640      	mov	r0, r8
   b9a0a:	f7fa ff5f 	bl	b48cc <__aeabi_d2uiz>
   b9a0e:	2801      	cmp	r0, #1
   b9a10:	bf38      	it	cc
   b9a12:	2001      	movcc	r0, #1
   b9a14:	f7fa fc46 	bl	b42a4 <__aeabi_ui2d>
   b9a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9a1a:	4680      	mov	r8, r0
   b9a1c:	4689      	mov	r9, r1
   b9a1e:	bb23      	cbnz	r3, b9a6a <_strtod_l+0xb9a>
   b9a20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9a24:	9010      	str	r0, [sp, #64]	; 0x40
   b9a26:	9311      	str	r3, [sp, #68]	; 0x44
   b9a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9a2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9a32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9a34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9a38:	1a9b      	subs	r3, r3, r2
   b9a3a:	9309      	str	r3, [sp, #36]	; 0x24
   b9a3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9a40:	eeb0 0a48 	vmov.f32	s0, s16
   b9a44:	eef0 0a68 	vmov.f32	s1, s17
   b9a48:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9a4c:	f001 f838 	bl	baac0 <__ulp>
   b9a50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9a54:	ec53 2b10 	vmov	r2, r3, d0
   b9a58:	f7fa fc9e 	bl	b4398 <__aeabi_dmul>
   b9a5c:	ec53 2b18 	vmov	r2, r3, d8
   b9a60:	f7fa fae4 	bl	b402c <__adddf3>
   b9a64:	4682      	mov	sl, r0
   b9a66:	468b      	mov	fp, r1
   b9a68:	e78d      	b.n	b9986 <_strtod_l+0xab6>
   b9a6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9a6e:	e7db      	b.n	b9a28 <_strtod_l+0xb58>
   b9a70:	a311      	add	r3, pc, #68	; (adr r3, b9ab8 <_strtod_l+0xbe8>)
   b9a72:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a76:	f7fa ff01 	bl	b487c <__aeabi_dcmplt>
   b9a7a:	e7b2      	b.n	b99e2 <_strtod_l+0xb12>
   b9a7c:	2300      	movs	r3, #0
   b9a7e:	930a      	str	r3, [sp, #40]	; 0x28
   b9a80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9a82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a84:	6013      	str	r3, [r2, #0]
   b9a86:	f7ff ba6b 	b.w	b8f60 <_strtod_l+0x90>
   b9a8a:	2a65      	cmp	r2, #101	; 0x65
   b9a8c:	f43f ab5f 	beq.w	b914e <_strtod_l+0x27e>
   b9a90:	2a45      	cmp	r2, #69	; 0x45
   b9a92:	f43f ab5c 	beq.w	b914e <_strtod_l+0x27e>
   b9a96:	2301      	movs	r3, #1
   b9a98:	f7ff bb94 	b.w	b91c4 <_strtod_l+0x2f4>
   b9a9c:	f3af 8000 	nop.w
   b9aa0:	94a03595 	.word	0x94a03595
   b9aa4:	3fdfffff 	.word	0x3fdfffff
   b9aa8:	35afe535 	.word	0x35afe535
   b9aac:	3fe00000 	.word	0x3fe00000
   b9ab0:	ffc00000 	.word	0xffc00000
   b9ab4:	41dfffff 	.word	0x41dfffff
   b9ab8:	94a03595 	.word	0x94a03595
   b9abc:	3fcfffff 	.word	0x3fcfffff
   b9ac0:	3ff00000 	.word	0x3ff00000
   b9ac4:	7ff00000 	.word	0x7ff00000
   b9ac8:	7fe00000 	.word	0x7fe00000
   b9acc:	7c9fffff 	.word	0x7c9fffff
   b9ad0:	3fe00000 	.word	0x3fe00000
   b9ad4:	bff00000 	.word	0xbff00000
   b9ad8:	7fefffff 	.word	0x7fefffff

000b9adc <strtod>:
   b9adc:	460a      	mov	r2, r1
   b9ade:	4601      	mov	r1, r0
   b9ae0:	4802      	ldr	r0, [pc, #8]	; (b9aec <strtod+0x10>)
   b9ae2:	4b03      	ldr	r3, [pc, #12]	; (b9af0 <strtod+0x14>)
   b9ae4:	6800      	ldr	r0, [r0, #0]
   b9ae6:	f7ff b9f3 	b.w	b8ed0 <_strtod_l>
   b9aea:	bf00      	nop
   b9aec:	2003e2cc 	.word	0x2003e2cc
   b9af0:	2003e338 	.word	0x2003e338

000b9af4 <_strtol_l.constprop.0>:
   b9af4:	2b01      	cmp	r3, #1
   b9af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9afa:	d001      	beq.n	b9b00 <_strtol_l.constprop.0+0xc>
   b9afc:	2b24      	cmp	r3, #36	; 0x24
   b9afe:	d906      	bls.n	b9b0e <_strtol_l.constprop.0+0x1a>
   b9b00:	f7fd fdba 	bl	b7678 <__errno>
   b9b04:	2316      	movs	r3, #22
   b9b06:	6003      	str	r3, [r0, #0]
   b9b08:	2000      	movs	r0, #0
   b9b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9b0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9bf4 <_strtol_l.constprop.0+0x100>
   b9b12:	460d      	mov	r5, r1
   b9b14:	462e      	mov	r6, r5
   b9b16:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9b1a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9b1e:	f017 0708 	ands.w	r7, r7, #8
   b9b22:	d1f7      	bne.n	b9b14 <_strtol_l.constprop.0+0x20>
   b9b24:	2c2d      	cmp	r4, #45	; 0x2d
   b9b26:	d132      	bne.n	b9b8e <_strtol_l.constprop.0+0x9a>
   b9b28:	782c      	ldrb	r4, [r5, #0]
   b9b2a:	2701      	movs	r7, #1
   b9b2c:	1cb5      	adds	r5, r6, #2
   b9b2e:	2b00      	cmp	r3, #0
   b9b30:	d05b      	beq.n	b9bea <_strtol_l.constprop.0+0xf6>
   b9b32:	2b10      	cmp	r3, #16
   b9b34:	d109      	bne.n	b9b4a <_strtol_l.constprop.0+0x56>
   b9b36:	2c30      	cmp	r4, #48	; 0x30
   b9b38:	d107      	bne.n	b9b4a <_strtol_l.constprop.0+0x56>
   b9b3a:	782c      	ldrb	r4, [r5, #0]
   b9b3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9b40:	2c58      	cmp	r4, #88	; 0x58
   b9b42:	d14d      	bne.n	b9be0 <_strtol_l.constprop.0+0xec>
   b9b44:	786c      	ldrb	r4, [r5, #1]
   b9b46:	2310      	movs	r3, #16
   b9b48:	3502      	adds	r5, #2
   b9b4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9b4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9b52:	f04f 0c00 	mov.w	ip, #0
   b9b56:	fbb8 f9f3 	udiv	r9, r8, r3
   b9b5a:	4666      	mov	r6, ip
   b9b5c:	fb03 8a19 	mls	sl, r3, r9, r8
   b9b60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9b64:	f1be 0f09 	cmp.w	lr, #9
   b9b68:	d816      	bhi.n	b9b98 <_strtol_l.constprop.0+0xa4>
   b9b6a:	4674      	mov	r4, lr
   b9b6c:	42a3      	cmp	r3, r4
   b9b6e:	dd24      	ble.n	b9bba <_strtol_l.constprop.0+0xc6>
   b9b70:	f1bc 0f00 	cmp.w	ip, #0
   b9b74:	db1e      	blt.n	b9bb4 <_strtol_l.constprop.0+0xc0>
   b9b76:	45b1      	cmp	r9, r6
   b9b78:	d31c      	bcc.n	b9bb4 <_strtol_l.constprop.0+0xc0>
   b9b7a:	d101      	bne.n	b9b80 <_strtol_l.constprop.0+0x8c>
   b9b7c:	45a2      	cmp	sl, r4
   b9b7e:	db19      	blt.n	b9bb4 <_strtol_l.constprop.0+0xc0>
   b9b80:	fb06 4603 	mla	r6, r6, r3, r4
   b9b84:	f04f 0c01 	mov.w	ip, #1
   b9b88:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9b8c:	e7e8      	b.n	b9b60 <_strtol_l.constprop.0+0x6c>
   b9b8e:	2c2b      	cmp	r4, #43	; 0x2b
   b9b90:	bf04      	itt	eq
   b9b92:	782c      	ldrbeq	r4, [r5, #0]
   b9b94:	1cb5      	addeq	r5, r6, #2
   b9b96:	e7ca      	b.n	b9b2e <_strtol_l.constprop.0+0x3a>
   b9b98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9b9c:	f1be 0f19 	cmp.w	lr, #25
   b9ba0:	d801      	bhi.n	b9ba6 <_strtol_l.constprop.0+0xb2>
   b9ba2:	3c37      	subs	r4, #55	; 0x37
   b9ba4:	e7e2      	b.n	b9b6c <_strtol_l.constprop.0+0x78>
   b9ba6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9baa:	f1be 0f19 	cmp.w	lr, #25
   b9bae:	d804      	bhi.n	b9bba <_strtol_l.constprop.0+0xc6>
   b9bb0:	3c57      	subs	r4, #87	; 0x57
   b9bb2:	e7db      	b.n	b9b6c <_strtol_l.constprop.0+0x78>
   b9bb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9bb8:	e7e6      	b.n	b9b88 <_strtol_l.constprop.0+0x94>
   b9bba:	f1bc 0f00 	cmp.w	ip, #0
   b9bbe:	da05      	bge.n	b9bcc <_strtol_l.constprop.0+0xd8>
   b9bc0:	2322      	movs	r3, #34	; 0x22
   b9bc2:	6003      	str	r3, [r0, #0]
   b9bc4:	4646      	mov	r6, r8
   b9bc6:	b942      	cbnz	r2, b9bda <_strtol_l.constprop.0+0xe6>
   b9bc8:	4630      	mov	r0, r6
   b9bca:	e79e      	b.n	b9b0a <_strtol_l.constprop.0+0x16>
   b9bcc:	b107      	cbz	r7, b9bd0 <_strtol_l.constprop.0+0xdc>
   b9bce:	4276      	negs	r6, r6
   b9bd0:	2a00      	cmp	r2, #0
   b9bd2:	d0f9      	beq.n	b9bc8 <_strtol_l.constprop.0+0xd4>
   b9bd4:	f1bc 0f00 	cmp.w	ip, #0
   b9bd8:	d000      	beq.n	b9bdc <_strtol_l.constprop.0+0xe8>
   b9bda:	1e69      	subs	r1, r5, #1
   b9bdc:	6011      	str	r1, [r2, #0]
   b9bde:	e7f3      	b.n	b9bc8 <_strtol_l.constprop.0+0xd4>
   b9be0:	2430      	movs	r4, #48	; 0x30
   b9be2:	2b00      	cmp	r3, #0
   b9be4:	d1b1      	bne.n	b9b4a <_strtol_l.constprop.0+0x56>
   b9be6:	2308      	movs	r3, #8
   b9be8:	e7af      	b.n	b9b4a <_strtol_l.constprop.0+0x56>
   b9bea:	2c30      	cmp	r4, #48	; 0x30
   b9bec:	d0a5      	beq.n	b9b3a <_strtol_l.constprop.0+0x46>
   b9bee:	230a      	movs	r3, #10
   b9bf0:	e7ab      	b.n	b9b4a <_strtol_l.constprop.0+0x56>
   b9bf2:	bf00      	nop
   b9bf4:	000bb8a1 	.word	0x000bb8a1

000b9bf8 <strtol>:
   b9bf8:	4613      	mov	r3, r2
   b9bfa:	460a      	mov	r2, r1
   b9bfc:	4601      	mov	r1, r0
   b9bfe:	4802      	ldr	r0, [pc, #8]	; (b9c08 <strtol+0x10>)
   b9c00:	6800      	ldr	r0, [r0, #0]
   b9c02:	f7ff bf77 	b.w	b9af4 <_strtol_l.constprop.0>
   b9c06:	bf00      	nop
   b9c08:	2003e2cc 	.word	0x2003e2cc

000b9c0c <__register_exitproc>:
   b9c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9c10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9ccc <__register_exitproc+0xc0>
   b9c14:	4606      	mov	r6, r0
   b9c16:	f8d8 0000 	ldr.w	r0, [r8]
   b9c1a:	461f      	mov	r7, r3
   b9c1c:	460d      	mov	r5, r1
   b9c1e:	4691      	mov	r9, r2
   b9c20:	f000 fbc6 	bl	ba3b0 <__retarget_lock_acquire_recursive>
   b9c24:	4b25      	ldr	r3, [pc, #148]	; (b9cbc <__register_exitproc+0xb0>)
   b9c26:	681c      	ldr	r4, [r3, #0]
   b9c28:	b934      	cbnz	r4, b9c38 <__register_exitproc+0x2c>
   b9c2a:	4c25      	ldr	r4, [pc, #148]	; (b9cc0 <__register_exitproc+0xb4>)
   b9c2c:	601c      	str	r4, [r3, #0]
   b9c2e:	4b25      	ldr	r3, [pc, #148]	; (b9cc4 <__register_exitproc+0xb8>)
   b9c30:	b113      	cbz	r3, b9c38 <__register_exitproc+0x2c>
   b9c32:	681b      	ldr	r3, [r3, #0]
   b9c34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9c38:	6863      	ldr	r3, [r4, #4]
   b9c3a:	2b1f      	cmp	r3, #31
   b9c3c:	dd07      	ble.n	b9c4e <__register_exitproc+0x42>
   b9c3e:	f8d8 0000 	ldr.w	r0, [r8]
   b9c42:	f000 fbb7 	bl	ba3b4 <__retarget_lock_release_recursive>
   b9c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9c4e:	b34e      	cbz	r6, b9ca4 <__register_exitproc+0x98>
   b9c50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9c54:	b988      	cbnz	r0, b9c7a <__register_exitproc+0x6e>
   b9c56:	4b1c      	ldr	r3, [pc, #112]	; (b9cc8 <__register_exitproc+0xbc>)
   b9c58:	b923      	cbnz	r3, b9c64 <__register_exitproc+0x58>
   b9c5a:	f8d8 0000 	ldr.w	r0, [r8]
   b9c5e:	f000 fba8 	bl	ba3b2 <__retarget_lock_release>
   b9c62:	e7f0      	b.n	b9c46 <__register_exitproc+0x3a>
   b9c64:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9c68:	f7fd fcce 	bl	b7608 <malloc>
   b9c6c:	2800      	cmp	r0, #0
   b9c6e:	d0f4      	beq.n	b9c5a <__register_exitproc+0x4e>
   b9c70:	2300      	movs	r3, #0
   b9c72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9c76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9c7a:	6863      	ldr	r3, [r4, #4]
   b9c7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9c80:	2201      	movs	r2, #1
   b9c82:	409a      	lsls	r2, r3
   b9c84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9c88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9c8c:	4313      	orrs	r3, r2
   b9c8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9c92:	2e02      	cmp	r6, #2
   b9c94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9c98:	bf02      	ittt	eq
   b9c9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9c9e:	4313      	orreq	r3, r2
   b9ca0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9ca4:	6863      	ldr	r3, [r4, #4]
   b9ca6:	f8d8 0000 	ldr.w	r0, [r8]
   b9caa:	1c5a      	adds	r2, r3, #1
   b9cac:	3302      	adds	r3, #2
   b9cae:	6062      	str	r2, [r4, #4]
   b9cb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9cb4:	f000 fb7e 	bl	ba3b4 <__retarget_lock_release_recursive>
   b9cb8:	2000      	movs	r0, #0
   b9cba:	e7c6      	b.n	b9c4a <__register_exitproc+0x3e>
   b9cbc:	2003e7ec 	.word	0x2003e7ec
   b9cc0:	2003e760 	.word	0x2003e760
   b9cc4:	00000000 	.word	0x00000000
   b9cc8:	000b7609 	.word	0x000b7609
   b9ccc:	2003e330 	.word	0x2003e330

000b9cd0 <rshift>:
   b9cd0:	6903      	ldr	r3, [r0, #16]
   b9cd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9cda:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9cde:	f100 0414 	add.w	r4, r0, #20
   b9ce2:	dd45      	ble.n	b9d70 <rshift+0xa0>
   b9ce4:	f011 011f 	ands.w	r1, r1, #31
   b9ce8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9cec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9cf0:	d10c      	bne.n	b9d0c <rshift+0x3c>
   b9cf2:	f100 0710 	add.w	r7, r0, #16
   b9cf6:	4629      	mov	r1, r5
   b9cf8:	42b1      	cmp	r1, r6
   b9cfa:	d334      	bcc.n	b9d66 <rshift+0x96>
   b9cfc:	1a9b      	subs	r3, r3, r2
   b9cfe:	009b      	lsls	r3, r3, #2
   b9d00:	1eea      	subs	r2, r5, #3
   b9d02:	4296      	cmp	r6, r2
   b9d04:	bf38      	it	cc
   b9d06:	2300      	movcc	r3, #0
   b9d08:	4423      	add	r3, r4
   b9d0a:	e015      	b.n	b9d38 <rshift+0x68>
   b9d0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9d10:	f1c1 0820 	rsb	r8, r1, #32
   b9d14:	40cf      	lsrs	r7, r1
   b9d16:	f105 0e04 	add.w	lr, r5, #4
   b9d1a:	46a1      	mov	r9, r4
   b9d1c:	4576      	cmp	r6, lr
   b9d1e:	46f4      	mov	ip, lr
   b9d20:	d815      	bhi.n	b9d4e <rshift+0x7e>
   b9d22:	1a9a      	subs	r2, r3, r2
   b9d24:	0092      	lsls	r2, r2, #2
   b9d26:	3a04      	subs	r2, #4
   b9d28:	3501      	adds	r5, #1
   b9d2a:	42ae      	cmp	r6, r5
   b9d2c:	bf38      	it	cc
   b9d2e:	2200      	movcc	r2, #0
   b9d30:	18a3      	adds	r3, r4, r2
   b9d32:	50a7      	str	r7, [r4, r2]
   b9d34:	b107      	cbz	r7, b9d38 <rshift+0x68>
   b9d36:	3304      	adds	r3, #4
   b9d38:	1b1a      	subs	r2, r3, r4
   b9d3a:	42a3      	cmp	r3, r4
   b9d3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9d40:	bf08      	it	eq
   b9d42:	2300      	moveq	r3, #0
   b9d44:	6102      	str	r2, [r0, #16]
   b9d46:	bf08      	it	eq
   b9d48:	6143      	streq	r3, [r0, #20]
   b9d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9d4e:	f8dc c000 	ldr.w	ip, [ip]
   b9d52:	fa0c fc08 	lsl.w	ip, ip, r8
   b9d56:	ea4c 0707 	orr.w	r7, ip, r7
   b9d5a:	f849 7b04 	str.w	r7, [r9], #4
   b9d5e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b9d62:	40cf      	lsrs	r7, r1
   b9d64:	e7da      	b.n	b9d1c <rshift+0x4c>
   b9d66:	f851 cb04 	ldr.w	ip, [r1], #4
   b9d6a:	f847 cf04 	str.w	ip, [r7, #4]!
   b9d6e:	e7c3      	b.n	b9cf8 <rshift+0x28>
   b9d70:	4623      	mov	r3, r4
   b9d72:	e7e1      	b.n	b9d38 <rshift+0x68>

000b9d74 <__hexdig_fun>:
   b9d74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9d78:	2b09      	cmp	r3, #9
   b9d7a:	d802      	bhi.n	b9d82 <__hexdig_fun+0xe>
   b9d7c:	3820      	subs	r0, #32
   b9d7e:	b2c0      	uxtb	r0, r0
   b9d80:	4770      	bx	lr
   b9d82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9d86:	2b05      	cmp	r3, #5
   b9d88:	d801      	bhi.n	b9d8e <__hexdig_fun+0x1a>
   b9d8a:	3847      	subs	r0, #71	; 0x47
   b9d8c:	e7f7      	b.n	b9d7e <__hexdig_fun+0xa>
   b9d8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9d92:	2b05      	cmp	r3, #5
   b9d94:	d801      	bhi.n	b9d9a <__hexdig_fun+0x26>
   b9d96:	3827      	subs	r0, #39	; 0x27
   b9d98:	e7f1      	b.n	b9d7e <__hexdig_fun+0xa>
   b9d9a:	2000      	movs	r0, #0
   b9d9c:	4770      	bx	lr
	...

000b9da0 <__gethex>:
   b9da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9da4:	ed2d 8b02 	vpush	{d8}
   b9da8:	b089      	sub	sp, #36	; 0x24
   b9daa:	ee08 0a10 	vmov	s16, r0
   b9dae:	9304      	str	r3, [sp, #16]
   b9db0:	4bb4      	ldr	r3, [pc, #720]	; (ba084 <__gethex+0x2e4>)
   b9db2:	681b      	ldr	r3, [r3, #0]
   b9db4:	9301      	str	r3, [sp, #4]
   b9db6:	4618      	mov	r0, r3
   b9db8:	468b      	mov	fp, r1
   b9dba:	4690      	mov	r8, r2
   b9dbc:	f7fa fe1e 	bl	b49fc <strlen>
   b9dc0:	9b01      	ldr	r3, [sp, #4]
   b9dc2:	f8db 2000 	ldr.w	r2, [fp]
   b9dc6:	4403      	add	r3, r0
   b9dc8:	4682      	mov	sl, r0
   b9dca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9dce:	9305      	str	r3, [sp, #20]
   b9dd0:	1c93      	adds	r3, r2, #2
   b9dd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9dd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9dda:	32fe      	adds	r2, #254	; 0xfe
   b9ddc:	18d1      	adds	r1, r2, r3
   b9dde:	461f      	mov	r7, r3
   b9de0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9de4:	9100      	str	r1, [sp, #0]
   b9de6:	2830      	cmp	r0, #48	; 0x30
   b9de8:	d0f8      	beq.n	b9ddc <__gethex+0x3c>
   b9dea:	f7ff ffc3 	bl	b9d74 <__hexdig_fun>
   b9dee:	4604      	mov	r4, r0
   b9df0:	2800      	cmp	r0, #0
   b9df2:	d13a      	bne.n	b9e6a <__gethex+0xca>
   b9df4:	9901      	ldr	r1, [sp, #4]
   b9df6:	4652      	mov	r2, sl
   b9df8:	4638      	mov	r0, r7
   b9dfa:	f7ff f826 	bl	b8e4a <strncmp>
   b9dfe:	4605      	mov	r5, r0
   b9e00:	2800      	cmp	r0, #0
   b9e02:	d168      	bne.n	b9ed6 <__gethex+0x136>
   b9e04:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9e08:	eb07 060a 	add.w	r6, r7, sl
   b9e0c:	f7ff ffb2 	bl	b9d74 <__hexdig_fun>
   b9e10:	2800      	cmp	r0, #0
   b9e12:	d062      	beq.n	b9eda <__gethex+0x13a>
   b9e14:	4633      	mov	r3, r6
   b9e16:	7818      	ldrb	r0, [r3, #0]
   b9e18:	2830      	cmp	r0, #48	; 0x30
   b9e1a:	461f      	mov	r7, r3
   b9e1c:	f103 0301 	add.w	r3, r3, #1
   b9e20:	d0f9      	beq.n	b9e16 <__gethex+0x76>
   b9e22:	f7ff ffa7 	bl	b9d74 <__hexdig_fun>
   b9e26:	2301      	movs	r3, #1
   b9e28:	fab0 f480 	clz	r4, r0
   b9e2c:	0964      	lsrs	r4, r4, #5
   b9e2e:	4635      	mov	r5, r6
   b9e30:	9300      	str	r3, [sp, #0]
   b9e32:	463a      	mov	r2, r7
   b9e34:	4616      	mov	r6, r2
   b9e36:	3201      	adds	r2, #1
   b9e38:	7830      	ldrb	r0, [r6, #0]
   b9e3a:	f7ff ff9b 	bl	b9d74 <__hexdig_fun>
   b9e3e:	2800      	cmp	r0, #0
   b9e40:	d1f8      	bne.n	b9e34 <__gethex+0x94>
   b9e42:	9901      	ldr	r1, [sp, #4]
   b9e44:	4652      	mov	r2, sl
   b9e46:	4630      	mov	r0, r6
   b9e48:	f7fe ffff 	bl	b8e4a <strncmp>
   b9e4c:	b980      	cbnz	r0, b9e70 <__gethex+0xd0>
   b9e4e:	b94d      	cbnz	r5, b9e64 <__gethex+0xc4>
   b9e50:	eb06 050a 	add.w	r5, r6, sl
   b9e54:	462a      	mov	r2, r5
   b9e56:	4616      	mov	r6, r2
   b9e58:	3201      	adds	r2, #1
   b9e5a:	7830      	ldrb	r0, [r6, #0]
   b9e5c:	f7ff ff8a 	bl	b9d74 <__hexdig_fun>
   b9e60:	2800      	cmp	r0, #0
   b9e62:	d1f8      	bne.n	b9e56 <__gethex+0xb6>
   b9e64:	1bad      	subs	r5, r5, r6
   b9e66:	00ad      	lsls	r5, r5, #2
   b9e68:	e004      	b.n	b9e74 <__gethex+0xd4>
   b9e6a:	2400      	movs	r4, #0
   b9e6c:	4625      	mov	r5, r4
   b9e6e:	e7e0      	b.n	b9e32 <__gethex+0x92>
   b9e70:	2d00      	cmp	r5, #0
   b9e72:	d1f7      	bne.n	b9e64 <__gethex+0xc4>
   b9e74:	7833      	ldrb	r3, [r6, #0]
   b9e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9e7a:	2b50      	cmp	r3, #80	; 0x50
   b9e7c:	d13b      	bne.n	b9ef6 <__gethex+0x156>
   b9e7e:	7873      	ldrb	r3, [r6, #1]
   b9e80:	2b2b      	cmp	r3, #43	; 0x2b
   b9e82:	d02c      	beq.n	b9ede <__gethex+0x13e>
   b9e84:	2b2d      	cmp	r3, #45	; 0x2d
   b9e86:	d02e      	beq.n	b9ee6 <__gethex+0x146>
   b9e88:	1c71      	adds	r1, r6, #1
   b9e8a:	f04f 0900 	mov.w	r9, #0
   b9e8e:	7808      	ldrb	r0, [r1, #0]
   b9e90:	f7ff ff70 	bl	b9d74 <__hexdig_fun>
   b9e94:	1e43      	subs	r3, r0, #1
   b9e96:	b2db      	uxtb	r3, r3
   b9e98:	2b18      	cmp	r3, #24
   b9e9a:	d82c      	bhi.n	b9ef6 <__gethex+0x156>
   b9e9c:	f1a0 0210 	sub.w	r2, r0, #16
   b9ea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9ea4:	f7ff ff66 	bl	b9d74 <__hexdig_fun>
   b9ea8:	1e43      	subs	r3, r0, #1
   b9eaa:	b2db      	uxtb	r3, r3
   b9eac:	2b18      	cmp	r3, #24
   b9eae:	d91d      	bls.n	b9eec <__gethex+0x14c>
   b9eb0:	f1b9 0f00 	cmp.w	r9, #0
   b9eb4:	d000      	beq.n	b9eb8 <__gethex+0x118>
   b9eb6:	4252      	negs	r2, r2
   b9eb8:	4415      	add	r5, r2
   b9eba:	f8cb 1000 	str.w	r1, [fp]
   b9ebe:	b1e4      	cbz	r4, b9efa <__gethex+0x15a>
   b9ec0:	9b00      	ldr	r3, [sp, #0]
   b9ec2:	2b00      	cmp	r3, #0
   b9ec4:	bf14      	ite	ne
   b9ec6:	2700      	movne	r7, #0
   b9ec8:	2706      	moveq	r7, #6
   b9eca:	4638      	mov	r0, r7
   b9ecc:	b009      	add	sp, #36	; 0x24
   b9ece:	ecbd 8b02 	vpop	{d8}
   b9ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ed6:	463e      	mov	r6, r7
   b9ed8:	4625      	mov	r5, r4
   b9eda:	2401      	movs	r4, #1
   b9edc:	e7ca      	b.n	b9e74 <__gethex+0xd4>
   b9ede:	f04f 0900 	mov.w	r9, #0
   b9ee2:	1cb1      	adds	r1, r6, #2
   b9ee4:	e7d3      	b.n	b9e8e <__gethex+0xee>
   b9ee6:	f04f 0901 	mov.w	r9, #1
   b9eea:	e7fa      	b.n	b9ee2 <__gethex+0x142>
   b9eec:	230a      	movs	r3, #10
   b9eee:	fb03 0202 	mla	r2, r3, r2, r0
   b9ef2:	3a10      	subs	r2, #16
   b9ef4:	e7d4      	b.n	b9ea0 <__gethex+0x100>
   b9ef6:	4631      	mov	r1, r6
   b9ef8:	e7df      	b.n	b9eba <__gethex+0x11a>
   b9efa:	1bf3      	subs	r3, r6, r7
   b9efc:	3b01      	subs	r3, #1
   b9efe:	4621      	mov	r1, r4
   b9f00:	2b07      	cmp	r3, #7
   b9f02:	dc0b      	bgt.n	b9f1c <__gethex+0x17c>
   b9f04:	ee18 0a10 	vmov	r0, s16
   b9f08:	f000 fa68 	bl	ba3dc <_Balloc>
   b9f0c:	4604      	mov	r4, r0
   b9f0e:	b940      	cbnz	r0, b9f22 <__gethex+0x182>
   b9f10:	4b5d      	ldr	r3, [pc, #372]	; (ba088 <__gethex+0x2e8>)
   b9f12:	4602      	mov	r2, r0
   b9f14:	21de      	movs	r1, #222	; 0xde
   b9f16:	485d      	ldr	r0, [pc, #372]	; (ba08c <__gethex+0x2ec>)
   b9f18:	f7fd fbb6 	bl	b7688 <__assert_func>
   b9f1c:	3101      	adds	r1, #1
   b9f1e:	105b      	asrs	r3, r3, #1
   b9f20:	e7ee      	b.n	b9f00 <__gethex+0x160>
   b9f22:	f100 0914 	add.w	r9, r0, #20
   b9f26:	f04f 0b00 	mov.w	fp, #0
   b9f2a:	f1ca 0301 	rsb	r3, sl, #1
   b9f2e:	f8cd 9008 	str.w	r9, [sp, #8]
   b9f32:	f8cd b000 	str.w	fp, [sp]
   b9f36:	9306      	str	r3, [sp, #24]
   b9f38:	42b7      	cmp	r7, r6
   b9f3a:	d340      	bcc.n	b9fbe <__gethex+0x21e>
   b9f3c:	9802      	ldr	r0, [sp, #8]
   b9f3e:	9b00      	ldr	r3, [sp, #0]
   b9f40:	f840 3b04 	str.w	r3, [r0], #4
   b9f44:	eba0 0009 	sub.w	r0, r0, r9
   b9f48:	1080      	asrs	r0, r0, #2
   b9f4a:	0146      	lsls	r6, r0, #5
   b9f4c:	6120      	str	r0, [r4, #16]
   b9f4e:	4618      	mov	r0, r3
   b9f50:	f000 fb36 	bl	ba5c0 <__hi0bits>
   b9f54:	1a30      	subs	r0, r6, r0
   b9f56:	f8d8 6000 	ldr.w	r6, [r8]
   b9f5a:	42b0      	cmp	r0, r6
   b9f5c:	dd63      	ble.n	ba026 <__gethex+0x286>
   b9f5e:	1b87      	subs	r7, r0, r6
   b9f60:	4639      	mov	r1, r7
   b9f62:	4620      	mov	r0, r4
   b9f64:	f000 feda 	bl	bad1c <__any_on>
   b9f68:	4682      	mov	sl, r0
   b9f6a:	b1a8      	cbz	r0, b9f98 <__gethex+0x1f8>
   b9f6c:	1e7b      	subs	r3, r7, #1
   b9f6e:	1159      	asrs	r1, r3, #5
   b9f70:	f003 021f 	and.w	r2, r3, #31
   b9f74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9f78:	f04f 0a01 	mov.w	sl, #1
   b9f7c:	fa0a f202 	lsl.w	r2, sl, r2
   b9f80:	420a      	tst	r2, r1
   b9f82:	d009      	beq.n	b9f98 <__gethex+0x1f8>
   b9f84:	4553      	cmp	r3, sl
   b9f86:	dd05      	ble.n	b9f94 <__gethex+0x1f4>
   b9f88:	1eb9      	subs	r1, r7, #2
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	f000 fec6 	bl	bad1c <__any_on>
   b9f90:	2800      	cmp	r0, #0
   b9f92:	d145      	bne.n	ba020 <__gethex+0x280>
   b9f94:	f04f 0a02 	mov.w	sl, #2
   b9f98:	4639      	mov	r1, r7
   b9f9a:	4620      	mov	r0, r4
   b9f9c:	f7ff fe98 	bl	b9cd0 <rshift>
   b9fa0:	443d      	add	r5, r7
   b9fa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9fa6:	42ab      	cmp	r3, r5
   b9fa8:	da4c      	bge.n	ba044 <__gethex+0x2a4>
   b9faa:	ee18 0a10 	vmov	r0, s16
   b9fae:	4621      	mov	r1, r4
   b9fb0:	f000 fa54 	bl	ba45c <_Bfree>
   b9fb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9fb6:	2300      	movs	r3, #0
   b9fb8:	6013      	str	r3, [r2, #0]
   b9fba:	27a3      	movs	r7, #163	; 0xa3
   b9fbc:	e785      	b.n	b9eca <__gethex+0x12a>
   b9fbe:	1e73      	subs	r3, r6, #1
   b9fc0:	9a05      	ldr	r2, [sp, #20]
   b9fc2:	9303      	str	r3, [sp, #12]
   b9fc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9fc8:	4293      	cmp	r3, r2
   b9fca:	d019      	beq.n	ba000 <__gethex+0x260>
   b9fcc:	f1bb 0f20 	cmp.w	fp, #32
   b9fd0:	d107      	bne.n	b9fe2 <__gethex+0x242>
   b9fd2:	9b02      	ldr	r3, [sp, #8]
   b9fd4:	9a00      	ldr	r2, [sp, #0]
   b9fd6:	f843 2b04 	str.w	r2, [r3], #4
   b9fda:	9302      	str	r3, [sp, #8]
   b9fdc:	2300      	movs	r3, #0
   b9fde:	9300      	str	r3, [sp, #0]
   b9fe0:	469b      	mov	fp, r3
   b9fe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b9fe6:	f7ff fec5 	bl	b9d74 <__hexdig_fun>
   b9fea:	9b00      	ldr	r3, [sp, #0]
   b9fec:	f000 000f 	and.w	r0, r0, #15
   b9ff0:	fa00 f00b 	lsl.w	r0, r0, fp
   b9ff4:	4303      	orrs	r3, r0
   b9ff6:	9300      	str	r3, [sp, #0]
   b9ff8:	f10b 0b04 	add.w	fp, fp, #4
   b9ffc:	9b03      	ldr	r3, [sp, #12]
   b9ffe:	e00d      	b.n	ba01c <__gethex+0x27c>
   ba000:	9b03      	ldr	r3, [sp, #12]
   ba002:	9a06      	ldr	r2, [sp, #24]
   ba004:	4413      	add	r3, r2
   ba006:	42bb      	cmp	r3, r7
   ba008:	d3e0      	bcc.n	b9fcc <__gethex+0x22c>
   ba00a:	4618      	mov	r0, r3
   ba00c:	9901      	ldr	r1, [sp, #4]
   ba00e:	9307      	str	r3, [sp, #28]
   ba010:	4652      	mov	r2, sl
   ba012:	f7fe ff1a 	bl	b8e4a <strncmp>
   ba016:	9b07      	ldr	r3, [sp, #28]
   ba018:	2800      	cmp	r0, #0
   ba01a:	d1d7      	bne.n	b9fcc <__gethex+0x22c>
   ba01c:	461e      	mov	r6, r3
   ba01e:	e78b      	b.n	b9f38 <__gethex+0x198>
   ba020:	f04f 0a03 	mov.w	sl, #3
   ba024:	e7b8      	b.n	b9f98 <__gethex+0x1f8>
   ba026:	da0a      	bge.n	ba03e <__gethex+0x29e>
   ba028:	1a37      	subs	r7, r6, r0
   ba02a:	4621      	mov	r1, r4
   ba02c:	ee18 0a10 	vmov	r0, s16
   ba030:	463a      	mov	r2, r7
   ba032:	f000 fc2f 	bl	ba894 <__lshift>
   ba036:	1bed      	subs	r5, r5, r7
   ba038:	4604      	mov	r4, r0
   ba03a:	f100 0914 	add.w	r9, r0, #20
   ba03e:	f04f 0a00 	mov.w	sl, #0
   ba042:	e7ae      	b.n	b9fa2 <__gethex+0x202>
   ba044:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba048:	42a8      	cmp	r0, r5
   ba04a:	dd72      	ble.n	ba132 <__gethex+0x392>
   ba04c:	1b45      	subs	r5, r0, r5
   ba04e:	42ae      	cmp	r6, r5
   ba050:	dc36      	bgt.n	ba0c0 <__gethex+0x320>
   ba052:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba056:	2b02      	cmp	r3, #2
   ba058:	d02a      	beq.n	ba0b0 <__gethex+0x310>
   ba05a:	2b03      	cmp	r3, #3
   ba05c:	d02c      	beq.n	ba0b8 <__gethex+0x318>
   ba05e:	2b01      	cmp	r3, #1
   ba060:	d11c      	bne.n	ba09c <__gethex+0x2fc>
   ba062:	42ae      	cmp	r6, r5
   ba064:	d11a      	bne.n	ba09c <__gethex+0x2fc>
   ba066:	2e01      	cmp	r6, #1
   ba068:	d112      	bne.n	ba090 <__gethex+0x2f0>
   ba06a:	9a04      	ldr	r2, [sp, #16]
   ba06c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba070:	6013      	str	r3, [r2, #0]
   ba072:	2301      	movs	r3, #1
   ba074:	6123      	str	r3, [r4, #16]
   ba076:	f8c9 3000 	str.w	r3, [r9]
   ba07a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba07c:	2762      	movs	r7, #98	; 0x62
   ba07e:	601c      	str	r4, [r3, #0]
   ba080:	e723      	b.n	b9eca <__gethex+0x12a>
   ba082:	bf00      	nop
   ba084:	000bba18 	.word	0x000bba18
   ba088:	000bb9a1 	.word	0x000bb9a1
   ba08c:	000bb9b2 	.word	0x000bb9b2
   ba090:	1e71      	subs	r1, r6, #1
   ba092:	4620      	mov	r0, r4
   ba094:	f000 fe42 	bl	bad1c <__any_on>
   ba098:	2800      	cmp	r0, #0
   ba09a:	d1e6      	bne.n	ba06a <__gethex+0x2ca>
   ba09c:	ee18 0a10 	vmov	r0, s16
   ba0a0:	4621      	mov	r1, r4
   ba0a2:	f000 f9db 	bl	ba45c <_Bfree>
   ba0a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba0a8:	2300      	movs	r3, #0
   ba0aa:	6013      	str	r3, [r2, #0]
   ba0ac:	2750      	movs	r7, #80	; 0x50
   ba0ae:	e70c      	b.n	b9eca <__gethex+0x12a>
   ba0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba0b2:	2b00      	cmp	r3, #0
   ba0b4:	d1f2      	bne.n	ba09c <__gethex+0x2fc>
   ba0b6:	e7d8      	b.n	ba06a <__gethex+0x2ca>
   ba0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba0ba:	2b00      	cmp	r3, #0
   ba0bc:	d1d5      	bne.n	ba06a <__gethex+0x2ca>
   ba0be:	e7ed      	b.n	ba09c <__gethex+0x2fc>
   ba0c0:	1e6f      	subs	r7, r5, #1
   ba0c2:	f1ba 0f00 	cmp.w	sl, #0
   ba0c6:	d131      	bne.n	ba12c <__gethex+0x38c>
   ba0c8:	b127      	cbz	r7, ba0d4 <__gethex+0x334>
   ba0ca:	4639      	mov	r1, r7
   ba0cc:	4620      	mov	r0, r4
   ba0ce:	f000 fe25 	bl	bad1c <__any_on>
   ba0d2:	4682      	mov	sl, r0
   ba0d4:	117b      	asrs	r3, r7, #5
   ba0d6:	2101      	movs	r1, #1
   ba0d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba0dc:	f007 071f 	and.w	r7, r7, #31
   ba0e0:	fa01 f707 	lsl.w	r7, r1, r7
   ba0e4:	421f      	tst	r7, r3
   ba0e6:	4629      	mov	r1, r5
   ba0e8:	4620      	mov	r0, r4
   ba0ea:	bf18      	it	ne
   ba0ec:	f04a 0a02 	orrne.w	sl, sl, #2
   ba0f0:	1b76      	subs	r6, r6, r5
   ba0f2:	f7ff fded 	bl	b9cd0 <rshift>
   ba0f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba0fa:	2702      	movs	r7, #2
   ba0fc:	f1ba 0f00 	cmp.w	sl, #0
   ba100:	d048      	beq.n	ba194 <__gethex+0x3f4>
   ba102:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba106:	2b02      	cmp	r3, #2
   ba108:	d015      	beq.n	ba136 <__gethex+0x396>
   ba10a:	2b03      	cmp	r3, #3
   ba10c:	d017      	beq.n	ba13e <__gethex+0x39e>
   ba10e:	2b01      	cmp	r3, #1
   ba110:	d109      	bne.n	ba126 <__gethex+0x386>
   ba112:	f01a 0f02 	tst.w	sl, #2
   ba116:	d006      	beq.n	ba126 <__gethex+0x386>
   ba118:	f8d9 0000 	ldr.w	r0, [r9]
   ba11c:	ea4a 0a00 	orr.w	sl, sl, r0
   ba120:	f01a 0f01 	tst.w	sl, #1
   ba124:	d10e      	bne.n	ba144 <__gethex+0x3a4>
   ba126:	f047 0710 	orr.w	r7, r7, #16
   ba12a:	e033      	b.n	ba194 <__gethex+0x3f4>
   ba12c:	f04f 0a01 	mov.w	sl, #1
   ba130:	e7d0      	b.n	ba0d4 <__gethex+0x334>
   ba132:	2701      	movs	r7, #1
   ba134:	e7e2      	b.n	ba0fc <__gethex+0x35c>
   ba136:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba138:	f1c3 0301 	rsb	r3, r3, #1
   ba13c:	9315      	str	r3, [sp, #84]	; 0x54
   ba13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba140:	2b00      	cmp	r3, #0
   ba142:	d0f0      	beq.n	ba126 <__gethex+0x386>
   ba144:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba148:	f104 0314 	add.w	r3, r4, #20
   ba14c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba150:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba154:	f04f 0c00 	mov.w	ip, #0
   ba158:	4618      	mov	r0, r3
   ba15a:	f853 2b04 	ldr.w	r2, [r3], #4
   ba15e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ba162:	d01c      	beq.n	ba19e <__gethex+0x3fe>
   ba164:	3201      	adds	r2, #1
   ba166:	6002      	str	r2, [r0, #0]
   ba168:	2f02      	cmp	r7, #2
   ba16a:	f104 0314 	add.w	r3, r4, #20
   ba16e:	d13f      	bne.n	ba1f0 <__gethex+0x450>
   ba170:	f8d8 2000 	ldr.w	r2, [r8]
   ba174:	3a01      	subs	r2, #1
   ba176:	42b2      	cmp	r2, r6
   ba178:	d10a      	bne.n	ba190 <__gethex+0x3f0>
   ba17a:	1171      	asrs	r1, r6, #5
   ba17c:	2201      	movs	r2, #1
   ba17e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba182:	f006 061f 	and.w	r6, r6, #31
   ba186:	fa02 f606 	lsl.w	r6, r2, r6
   ba18a:	421e      	tst	r6, r3
   ba18c:	bf18      	it	ne
   ba18e:	4617      	movne	r7, r2
   ba190:	f047 0720 	orr.w	r7, r7, #32
   ba194:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba196:	601c      	str	r4, [r3, #0]
   ba198:	9b04      	ldr	r3, [sp, #16]
   ba19a:	601d      	str	r5, [r3, #0]
   ba19c:	e695      	b.n	b9eca <__gethex+0x12a>
   ba19e:	4299      	cmp	r1, r3
   ba1a0:	f843 cc04 	str.w	ip, [r3, #-4]
   ba1a4:	d8d8      	bhi.n	ba158 <__gethex+0x3b8>
   ba1a6:	68a3      	ldr	r3, [r4, #8]
   ba1a8:	459b      	cmp	fp, r3
   ba1aa:	db19      	blt.n	ba1e0 <__gethex+0x440>
   ba1ac:	6861      	ldr	r1, [r4, #4]
   ba1ae:	ee18 0a10 	vmov	r0, s16
   ba1b2:	3101      	adds	r1, #1
   ba1b4:	f000 f912 	bl	ba3dc <_Balloc>
   ba1b8:	4681      	mov	r9, r0
   ba1ba:	b918      	cbnz	r0, ba1c4 <__gethex+0x424>
   ba1bc:	4b1a      	ldr	r3, [pc, #104]	; (ba228 <__gethex+0x488>)
   ba1be:	4602      	mov	r2, r0
   ba1c0:	2184      	movs	r1, #132	; 0x84
   ba1c2:	e6a8      	b.n	b9f16 <__gethex+0x176>
   ba1c4:	6922      	ldr	r2, [r4, #16]
   ba1c6:	3202      	adds	r2, #2
   ba1c8:	f104 010c 	add.w	r1, r4, #12
   ba1cc:	0092      	lsls	r2, r2, #2
   ba1ce:	300c      	adds	r0, #12
   ba1d0:	f7fe fdb8 	bl	b8d44 <memcpy>
   ba1d4:	4621      	mov	r1, r4
   ba1d6:	ee18 0a10 	vmov	r0, s16
   ba1da:	f000 f93f 	bl	ba45c <_Bfree>
   ba1de:	464c      	mov	r4, r9
   ba1e0:	6923      	ldr	r3, [r4, #16]
   ba1e2:	1c5a      	adds	r2, r3, #1
   ba1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba1e8:	6122      	str	r2, [r4, #16]
   ba1ea:	2201      	movs	r2, #1
   ba1ec:	615a      	str	r2, [r3, #20]
   ba1ee:	e7bb      	b.n	ba168 <__gethex+0x3c8>
   ba1f0:	6922      	ldr	r2, [r4, #16]
   ba1f2:	455a      	cmp	r2, fp
   ba1f4:	dd0b      	ble.n	ba20e <__gethex+0x46e>
   ba1f6:	2101      	movs	r1, #1
   ba1f8:	4620      	mov	r0, r4
   ba1fa:	f7ff fd69 	bl	b9cd0 <rshift>
   ba1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba202:	3501      	adds	r5, #1
   ba204:	42ab      	cmp	r3, r5
   ba206:	f6ff aed0 	blt.w	b9faa <__gethex+0x20a>
   ba20a:	2701      	movs	r7, #1
   ba20c:	e7c0      	b.n	ba190 <__gethex+0x3f0>
   ba20e:	f016 061f 	ands.w	r6, r6, #31
   ba212:	d0fa      	beq.n	ba20a <__gethex+0x46a>
   ba214:	4453      	add	r3, sl
   ba216:	f1c6 0620 	rsb	r6, r6, #32
   ba21a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba21e:	f000 f9cf 	bl	ba5c0 <__hi0bits>
   ba222:	42b0      	cmp	r0, r6
   ba224:	dbe7      	blt.n	ba1f6 <__gethex+0x456>
   ba226:	e7f0      	b.n	ba20a <__gethex+0x46a>
   ba228:	000bb9a1 	.word	0x000bb9a1

000ba22c <L_shift>:
   ba22c:	f1c2 0208 	rsb	r2, r2, #8
   ba230:	0092      	lsls	r2, r2, #2
   ba232:	b570      	push	{r4, r5, r6, lr}
   ba234:	f1c2 0620 	rsb	r6, r2, #32
   ba238:	6843      	ldr	r3, [r0, #4]
   ba23a:	6804      	ldr	r4, [r0, #0]
   ba23c:	fa03 f506 	lsl.w	r5, r3, r6
   ba240:	432c      	orrs	r4, r5
   ba242:	40d3      	lsrs	r3, r2
   ba244:	6004      	str	r4, [r0, #0]
   ba246:	f840 3f04 	str.w	r3, [r0, #4]!
   ba24a:	4288      	cmp	r0, r1
   ba24c:	d3f4      	bcc.n	ba238 <L_shift+0xc>
   ba24e:	bd70      	pop	{r4, r5, r6, pc}

000ba250 <__match>:
   ba250:	b530      	push	{r4, r5, lr}
   ba252:	6803      	ldr	r3, [r0, #0]
   ba254:	3301      	adds	r3, #1
   ba256:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba25a:	b914      	cbnz	r4, ba262 <__match+0x12>
   ba25c:	6003      	str	r3, [r0, #0]
   ba25e:	2001      	movs	r0, #1
   ba260:	bd30      	pop	{r4, r5, pc}
   ba262:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba26a:	2d19      	cmp	r5, #25
   ba26c:	bf98      	it	ls
   ba26e:	3220      	addls	r2, #32
   ba270:	42a2      	cmp	r2, r4
   ba272:	d0f0      	beq.n	ba256 <__match+0x6>
   ba274:	2000      	movs	r0, #0
   ba276:	e7f3      	b.n	ba260 <__match+0x10>

000ba278 <__hexnan>:
   ba278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba27c:	680b      	ldr	r3, [r1, #0]
   ba27e:	115e      	asrs	r6, r3, #5
   ba280:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba284:	f013 031f 	ands.w	r3, r3, #31
   ba288:	b087      	sub	sp, #28
   ba28a:	bf18      	it	ne
   ba28c:	3604      	addne	r6, #4
   ba28e:	2500      	movs	r5, #0
   ba290:	1f37      	subs	r7, r6, #4
   ba292:	4690      	mov	r8, r2
   ba294:	6802      	ldr	r2, [r0, #0]
   ba296:	9301      	str	r3, [sp, #4]
   ba298:	4682      	mov	sl, r0
   ba29a:	f846 5c04 	str.w	r5, [r6, #-4]
   ba29e:	46b9      	mov	r9, r7
   ba2a0:	463c      	mov	r4, r7
   ba2a2:	9502      	str	r5, [sp, #8]
   ba2a4:	46ab      	mov	fp, r5
   ba2a6:	7851      	ldrb	r1, [r2, #1]
   ba2a8:	1c53      	adds	r3, r2, #1
   ba2aa:	9303      	str	r3, [sp, #12]
   ba2ac:	b341      	cbz	r1, ba300 <__hexnan+0x88>
   ba2ae:	4608      	mov	r0, r1
   ba2b0:	9205      	str	r2, [sp, #20]
   ba2b2:	9104      	str	r1, [sp, #16]
   ba2b4:	f7ff fd5e 	bl	b9d74 <__hexdig_fun>
   ba2b8:	2800      	cmp	r0, #0
   ba2ba:	d14f      	bne.n	ba35c <__hexnan+0xe4>
   ba2bc:	9904      	ldr	r1, [sp, #16]
   ba2be:	9a05      	ldr	r2, [sp, #20]
   ba2c0:	2920      	cmp	r1, #32
   ba2c2:	d818      	bhi.n	ba2f6 <__hexnan+0x7e>
   ba2c4:	9b02      	ldr	r3, [sp, #8]
   ba2c6:	459b      	cmp	fp, r3
   ba2c8:	dd13      	ble.n	ba2f2 <__hexnan+0x7a>
   ba2ca:	454c      	cmp	r4, r9
   ba2cc:	d206      	bcs.n	ba2dc <__hexnan+0x64>
   ba2ce:	2d07      	cmp	r5, #7
   ba2d0:	dc04      	bgt.n	ba2dc <__hexnan+0x64>
   ba2d2:	462a      	mov	r2, r5
   ba2d4:	4649      	mov	r1, r9
   ba2d6:	4620      	mov	r0, r4
   ba2d8:	f7ff ffa8 	bl	ba22c <L_shift>
   ba2dc:	4544      	cmp	r4, r8
   ba2de:	d950      	bls.n	ba382 <__hexnan+0x10a>
   ba2e0:	2300      	movs	r3, #0
   ba2e2:	f1a4 0904 	sub.w	r9, r4, #4
   ba2e6:	f844 3c04 	str.w	r3, [r4, #-4]
   ba2ea:	f8cd b008 	str.w	fp, [sp, #8]
   ba2ee:	464c      	mov	r4, r9
   ba2f0:	461d      	mov	r5, r3
   ba2f2:	9a03      	ldr	r2, [sp, #12]
   ba2f4:	e7d7      	b.n	ba2a6 <__hexnan+0x2e>
   ba2f6:	2929      	cmp	r1, #41	; 0x29
   ba2f8:	d156      	bne.n	ba3a8 <__hexnan+0x130>
   ba2fa:	3202      	adds	r2, #2
   ba2fc:	f8ca 2000 	str.w	r2, [sl]
   ba300:	f1bb 0f00 	cmp.w	fp, #0
   ba304:	d050      	beq.n	ba3a8 <__hexnan+0x130>
   ba306:	454c      	cmp	r4, r9
   ba308:	d206      	bcs.n	ba318 <__hexnan+0xa0>
   ba30a:	2d07      	cmp	r5, #7
   ba30c:	dc04      	bgt.n	ba318 <__hexnan+0xa0>
   ba30e:	462a      	mov	r2, r5
   ba310:	4649      	mov	r1, r9
   ba312:	4620      	mov	r0, r4
   ba314:	f7ff ff8a 	bl	ba22c <L_shift>
   ba318:	4544      	cmp	r4, r8
   ba31a:	d934      	bls.n	ba386 <__hexnan+0x10e>
   ba31c:	f1a8 0204 	sub.w	r2, r8, #4
   ba320:	4623      	mov	r3, r4
   ba322:	f853 1b04 	ldr.w	r1, [r3], #4
   ba326:	f842 1f04 	str.w	r1, [r2, #4]!
   ba32a:	429f      	cmp	r7, r3
   ba32c:	d2f9      	bcs.n	ba322 <__hexnan+0xaa>
   ba32e:	1b3b      	subs	r3, r7, r4
   ba330:	f023 0303 	bic.w	r3, r3, #3
   ba334:	3304      	adds	r3, #4
   ba336:	3401      	adds	r4, #1
   ba338:	3e03      	subs	r6, #3
   ba33a:	42b4      	cmp	r4, r6
   ba33c:	bf88      	it	hi
   ba33e:	2304      	movhi	r3, #4
   ba340:	4443      	add	r3, r8
   ba342:	2200      	movs	r2, #0
   ba344:	f843 2b04 	str.w	r2, [r3], #4
   ba348:	429f      	cmp	r7, r3
   ba34a:	d2fb      	bcs.n	ba344 <__hexnan+0xcc>
   ba34c:	683b      	ldr	r3, [r7, #0]
   ba34e:	b91b      	cbnz	r3, ba358 <__hexnan+0xe0>
   ba350:	4547      	cmp	r7, r8
   ba352:	d127      	bne.n	ba3a4 <__hexnan+0x12c>
   ba354:	2301      	movs	r3, #1
   ba356:	603b      	str	r3, [r7, #0]
   ba358:	2005      	movs	r0, #5
   ba35a:	e026      	b.n	ba3aa <__hexnan+0x132>
   ba35c:	3501      	adds	r5, #1
   ba35e:	2d08      	cmp	r5, #8
   ba360:	f10b 0b01 	add.w	fp, fp, #1
   ba364:	dd06      	ble.n	ba374 <__hexnan+0xfc>
   ba366:	4544      	cmp	r4, r8
   ba368:	d9c3      	bls.n	ba2f2 <__hexnan+0x7a>
   ba36a:	2300      	movs	r3, #0
   ba36c:	f844 3c04 	str.w	r3, [r4, #-4]
   ba370:	2501      	movs	r5, #1
   ba372:	3c04      	subs	r4, #4
   ba374:	6822      	ldr	r2, [r4, #0]
   ba376:	f000 000f 	and.w	r0, r0, #15
   ba37a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba37e:	6022      	str	r2, [r4, #0]
   ba380:	e7b7      	b.n	ba2f2 <__hexnan+0x7a>
   ba382:	2508      	movs	r5, #8
   ba384:	e7b5      	b.n	ba2f2 <__hexnan+0x7a>
   ba386:	9b01      	ldr	r3, [sp, #4]
   ba388:	2b00      	cmp	r3, #0
   ba38a:	d0df      	beq.n	ba34c <__hexnan+0xd4>
   ba38c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba390:	f1c3 0320 	rsb	r3, r3, #32
   ba394:	fa22 f303 	lsr.w	r3, r2, r3
   ba398:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba39c:	401a      	ands	r2, r3
   ba39e:	f846 2c04 	str.w	r2, [r6, #-4]
   ba3a2:	e7d3      	b.n	ba34c <__hexnan+0xd4>
   ba3a4:	3f04      	subs	r7, #4
   ba3a6:	e7d1      	b.n	ba34c <__hexnan+0xd4>
   ba3a8:	2004      	movs	r0, #4
   ba3aa:	b007      	add	sp, #28
   ba3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba3b0 <__retarget_lock_acquire_recursive>:
   ba3b0:	4770      	bx	lr

000ba3b2 <__retarget_lock_release>:
   ba3b2:	4770      	bx	lr

000ba3b4 <__retarget_lock_release_recursive>:
   ba3b4:	4770      	bx	lr

000ba3b6 <__ascii_mbtowc>:
   ba3b6:	b082      	sub	sp, #8
   ba3b8:	b901      	cbnz	r1, ba3bc <__ascii_mbtowc+0x6>
   ba3ba:	a901      	add	r1, sp, #4
   ba3bc:	b142      	cbz	r2, ba3d0 <__ascii_mbtowc+0x1a>
   ba3be:	b14b      	cbz	r3, ba3d4 <__ascii_mbtowc+0x1e>
   ba3c0:	7813      	ldrb	r3, [r2, #0]
   ba3c2:	600b      	str	r3, [r1, #0]
   ba3c4:	7812      	ldrb	r2, [r2, #0]
   ba3c6:	1e10      	subs	r0, r2, #0
   ba3c8:	bf18      	it	ne
   ba3ca:	2001      	movne	r0, #1
   ba3cc:	b002      	add	sp, #8
   ba3ce:	4770      	bx	lr
   ba3d0:	4610      	mov	r0, r2
   ba3d2:	e7fb      	b.n	ba3cc <__ascii_mbtowc+0x16>
   ba3d4:	f06f 0001 	mvn.w	r0, #1
   ba3d8:	e7f8      	b.n	ba3cc <__ascii_mbtowc+0x16>
	...

000ba3dc <_Balloc>:
   ba3dc:	b570      	push	{r4, r5, r6, lr}
   ba3de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba3e0:	4604      	mov	r4, r0
   ba3e2:	460d      	mov	r5, r1
   ba3e4:	b976      	cbnz	r6, ba404 <_Balloc+0x28>
   ba3e6:	2010      	movs	r0, #16
   ba3e8:	f7fd f90e 	bl	b7608 <malloc>
   ba3ec:	4602      	mov	r2, r0
   ba3ee:	6260      	str	r0, [r4, #36]	; 0x24
   ba3f0:	b920      	cbnz	r0, ba3fc <_Balloc+0x20>
   ba3f2:	4b18      	ldr	r3, [pc, #96]	; (ba454 <_Balloc+0x78>)
   ba3f4:	4818      	ldr	r0, [pc, #96]	; (ba458 <_Balloc+0x7c>)
   ba3f6:	2166      	movs	r1, #102	; 0x66
   ba3f8:	f7fd f946 	bl	b7688 <__assert_func>
   ba3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba400:	6006      	str	r6, [r0, #0]
   ba402:	60c6      	str	r6, [r0, #12]
   ba404:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba406:	68f3      	ldr	r3, [r6, #12]
   ba408:	b183      	cbz	r3, ba42c <_Balloc+0x50>
   ba40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba40c:	68db      	ldr	r3, [r3, #12]
   ba40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba412:	b9b8      	cbnz	r0, ba444 <_Balloc+0x68>
   ba414:	2101      	movs	r1, #1
   ba416:	fa01 f605 	lsl.w	r6, r1, r5
   ba41a:	1d72      	adds	r2, r6, #5
   ba41c:	0092      	lsls	r2, r2, #2
   ba41e:	4620      	mov	r0, r4
   ba420:	f000 fc9d 	bl	bad5e <_calloc_r>
   ba424:	b160      	cbz	r0, ba440 <_Balloc+0x64>
   ba426:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba42a:	e00e      	b.n	ba44a <_Balloc+0x6e>
   ba42c:	2221      	movs	r2, #33	; 0x21
   ba42e:	2104      	movs	r1, #4
   ba430:	4620      	mov	r0, r4
   ba432:	f000 fc94 	bl	bad5e <_calloc_r>
   ba436:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba438:	60f0      	str	r0, [r6, #12]
   ba43a:	68db      	ldr	r3, [r3, #12]
   ba43c:	2b00      	cmp	r3, #0
   ba43e:	d1e4      	bne.n	ba40a <_Balloc+0x2e>
   ba440:	2000      	movs	r0, #0
   ba442:	bd70      	pop	{r4, r5, r6, pc}
   ba444:	6802      	ldr	r2, [r0, #0]
   ba446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba44a:	2300      	movs	r3, #0
   ba44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba450:	e7f7      	b.n	ba442 <_Balloc+0x66>
   ba452:	bf00      	nop
   ba454:	000bb77a 	.word	0x000bb77a
   ba458:	000bba2a 	.word	0x000bba2a

000ba45c <_Bfree>:
   ba45c:	b570      	push	{r4, r5, r6, lr}
   ba45e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba460:	4605      	mov	r5, r0
   ba462:	460c      	mov	r4, r1
   ba464:	b976      	cbnz	r6, ba484 <_Bfree+0x28>
   ba466:	2010      	movs	r0, #16
   ba468:	f7fd f8ce 	bl	b7608 <malloc>
   ba46c:	4602      	mov	r2, r0
   ba46e:	6268      	str	r0, [r5, #36]	; 0x24
   ba470:	b920      	cbnz	r0, ba47c <_Bfree+0x20>
   ba472:	4b09      	ldr	r3, [pc, #36]	; (ba498 <_Bfree+0x3c>)
   ba474:	4809      	ldr	r0, [pc, #36]	; (ba49c <_Bfree+0x40>)
   ba476:	218a      	movs	r1, #138	; 0x8a
   ba478:	f7fd f906 	bl	b7688 <__assert_func>
   ba47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba480:	6006      	str	r6, [r0, #0]
   ba482:	60c6      	str	r6, [r0, #12]
   ba484:	b13c      	cbz	r4, ba496 <_Bfree+0x3a>
   ba486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba488:	6862      	ldr	r2, [r4, #4]
   ba48a:	68db      	ldr	r3, [r3, #12]
   ba48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba490:	6021      	str	r1, [r4, #0]
   ba492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba496:	bd70      	pop	{r4, r5, r6, pc}
   ba498:	000bb77a 	.word	0x000bb77a
   ba49c:	000bba2a 	.word	0x000bba2a

000ba4a0 <__multadd>:
   ba4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba4a4:	690d      	ldr	r5, [r1, #16]
   ba4a6:	4607      	mov	r7, r0
   ba4a8:	460c      	mov	r4, r1
   ba4aa:	461e      	mov	r6, r3
   ba4ac:	f101 0c14 	add.w	ip, r1, #20
   ba4b0:	2000      	movs	r0, #0
   ba4b2:	f8dc 3000 	ldr.w	r3, [ip]
   ba4b6:	b299      	uxth	r1, r3
   ba4b8:	fb02 6101 	mla	r1, r2, r1, r6
   ba4bc:	0c1e      	lsrs	r6, r3, #16
   ba4be:	0c0b      	lsrs	r3, r1, #16
   ba4c0:	fb02 3306 	mla	r3, r2, r6, r3
   ba4c4:	b289      	uxth	r1, r1
   ba4c6:	3001      	adds	r0, #1
   ba4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba4cc:	4285      	cmp	r5, r0
   ba4ce:	f84c 1b04 	str.w	r1, [ip], #4
   ba4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba4d6:	dcec      	bgt.n	ba4b2 <__multadd+0x12>
   ba4d8:	b30e      	cbz	r6, ba51e <__multadd+0x7e>
   ba4da:	68a3      	ldr	r3, [r4, #8]
   ba4dc:	42ab      	cmp	r3, r5
   ba4de:	dc19      	bgt.n	ba514 <__multadd+0x74>
   ba4e0:	6861      	ldr	r1, [r4, #4]
   ba4e2:	4638      	mov	r0, r7
   ba4e4:	3101      	adds	r1, #1
   ba4e6:	f7ff ff79 	bl	ba3dc <_Balloc>
   ba4ea:	4680      	mov	r8, r0
   ba4ec:	b928      	cbnz	r0, ba4fa <__multadd+0x5a>
   ba4ee:	4602      	mov	r2, r0
   ba4f0:	4b0c      	ldr	r3, [pc, #48]	; (ba524 <__multadd+0x84>)
   ba4f2:	480d      	ldr	r0, [pc, #52]	; (ba528 <__multadd+0x88>)
   ba4f4:	21b5      	movs	r1, #181	; 0xb5
   ba4f6:	f7fd f8c7 	bl	b7688 <__assert_func>
   ba4fa:	6922      	ldr	r2, [r4, #16]
   ba4fc:	3202      	adds	r2, #2
   ba4fe:	f104 010c 	add.w	r1, r4, #12
   ba502:	0092      	lsls	r2, r2, #2
   ba504:	300c      	adds	r0, #12
   ba506:	f7fe fc1d 	bl	b8d44 <memcpy>
   ba50a:	4621      	mov	r1, r4
   ba50c:	4638      	mov	r0, r7
   ba50e:	f7ff ffa5 	bl	ba45c <_Bfree>
   ba512:	4644      	mov	r4, r8
   ba514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba518:	3501      	adds	r5, #1
   ba51a:	615e      	str	r6, [r3, #20]
   ba51c:	6125      	str	r5, [r4, #16]
   ba51e:	4620      	mov	r0, r4
   ba520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba524:	000bb9a1 	.word	0x000bb9a1
   ba528:	000bba2a 	.word	0x000bba2a

000ba52c <__s2b>:
   ba52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba530:	460c      	mov	r4, r1
   ba532:	4615      	mov	r5, r2
   ba534:	461f      	mov	r7, r3
   ba536:	2209      	movs	r2, #9
   ba538:	3308      	adds	r3, #8
   ba53a:	4606      	mov	r6, r0
   ba53c:	fb93 f3f2 	sdiv	r3, r3, r2
   ba540:	2100      	movs	r1, #0
   ba542:	2201      	movs	r2, #1
   ba544:	429a      	cmp	r2, r3
   ba546:	db09      	blt.n	ba55c <__s2b+0x30>
   ba548:	4630      	mov	r0, r6
   ba54a:	f7ff ff47 	bl	ba3dc <_Balloc>
   ba54e:	b940      	cbnz	r0, ba562 <__s2b+0x36>
   ba550:	4602      	mov	r2, r0
   ba552:	4b19      	ldr	r3, [pc, #100]	; (ba5b8 <__s2b+0x8c>)
   ba554:	4819      	ldr	r0, [pc, #100]	; (ba5bc <__s2b+0x90>)
   ba556:	21ce      	movs	r1, #206	; 0xce
   ba558:	f7fd f896 	bl	b7688 <__assert_func>
   ba55c:	0052      	lsls	r2, r2, #1
   ba55e:	3101      	adds	r1, #1
   ba560:	e7f0      	b.n	ba544 <__s2b+0x18>
   ba562:	9b08      	ldr	r3, [sp, #32]
   ba564:	6143      	str	r3, [r0, #20]
   ba566:	2d09      	cmp	r5, #9
   ba568:	f04f 0301 	mov.w	r3, #1
   ba56c:	6103      	str	r3, [r0, #16]
   ba56e:	dd16      	ble.n	ba59e <__s2b+0x72>
   ba570:	f104 0909 	add.w	r9, r4, #9
   ba574:	46c8      	mov	r8, r9
   ba576:	442c      	add	r4, r5
   ba578:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba57c:	4601      	mov	r1, r0
   ba57e:	3b30      	subs	r3, #48	; 0x30
   ba580:	220a      	movs	r2, #10
   ba582:	4630      	mov	r0, r6
   ba584:	f7ff ff8c 	bl	ba4a0 <__multadd>
   ba588:	45a0      	cmp	r8, r4
   ba58a:	d1f5      	bne.n	ba578 <__s2b+0x4c>
   ba58c:	f1a5 0408 	sub.w	r4, r5, #8
   ba590:	444c      	add	r4, r9
   ba592:	1b2d      	subs	r5, r5, r4
   ba594:	1963      	adds	r3, r4, r5
   ba596:	42bb      	cmp	r3, r7
   ba598:	db04      	blt.n	ba5a4 <__s2b+0x78>
   ba59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba59e:	340a      	adds	r4, #10
   ba5a0:	2509      	movs	r5, #9
   ba5a2:	e7f6      	b.n	ba592 <__s2b+0x66>
   ba5a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba5a8:	4601      	mov	r1, r0
   ba5aa:	3b30      	subs	r3, #48	; 0x30
   ba5ac:	220a      	movs	r2, #10
   ba5ae:	4630      	mov	r0, r6
   ba5b0:	f7ff ff76 	bl	ba4a0 <__multadd>
   ba5b4:	e7ee      	b.n	ba594 <__s2b+0x68>
   ba5b6:	bf00      	nop
   ba5b8:	000bb9a1 	.word	0x000bb9a1
   ba5bc:	000bba2a 	.word	0x000bba2a

000ba5c0 <__hi0bits>:
   ba5c0:	0c03      	lsrs	r3, r0, #16
   ba5c2:	041b      	lsls	r3, r3, #16
   ba5c4:	b9d3      	cbnz	r3, ba5fc <__hi0bits+0x3c>
   ba5c6:	0400      	lsls	r0, r0, #16
   ba5c8:	2310      	movs	r3, #16
   ba5ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba5ce:	bf04      	itt	eq
   ba5d0:	0200      	lsleq	r0, r0, #8
   ba5d2:	3308      	addeq	r3, #8
   ba5d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba5d8:	bf04      	itt	eq
   ba5da:	0100      	lsleq	r0, r0, #4
   ba5dc:	3304      	addeq	r3, #4
   ba5de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba5e2:	bf04      	itt	eq
   ba5e4:	0080      	lsleq	r0, r0, #2
   ba5e6:	3302      	addeq	r3, #2
   ba5e8:	2800      	cmp	r0, #0
   ba5ea:	db05      	blt.n	ba5f8 <__hi0bits+0x38>
   ba5ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba5f0:	f103 0301 	add.w	r3, r3, #1
   ba5f4:	bf08      	it	eq
   ba5f6:	2320      	moveq	r3, #32
   ba5f8:	4618      	mov	r0, r3
   ba5fa:	4770      	bx	lr
   ba5fc:	2300      	movs	r3, #0
   ba5fe:	e7e4      	b.n	ba5ca <__hi0bits+0xa>

000ba600 <__lo0bits>:
   ba600:	6803      	ldr	r3, [r0, #0]
   ba602:	f013 0207 	ands.w	r2, r3, #7
   ba606:	4601      	mov	r1, r0
   ba608:	d00b      	beq.n	ba622 <__lo0bits+0x22>
   ba60a:	07da      	lsls	r2, r3, #31
   ba60c:	d423      	bmi.n	ba656 <__lo0bits+0x56>
   ba60e:	0798      	lsls	r0, r3, #30
   ba610:	bf49      	itett	mi
   ba612:	085b      	lsrmi	r3, r3, #1
   ba614:	089b      	lsrpl	r3, r3, #2
   ba616:	2001      	movmi	r0, #1
   ba618:	600b      	strmi	r3, [r1, #0]
   ba61a:	bf5c      	itt	pl
   ba61c:	600b      	strpl	r3, [r1, #0]
   ba61e:	2002      	movpl	r0, #2
   ba620:	4770      	bx	lr
   ba622:	b298      	uxth	r0, r3
   ba624:	b9a8      	cbnz	r0, ba652 <__lo0bits+0x52>
   ba626:	0c1b      	lsrs	r3, r3, #16
   ba628:	2010      	movs	r0, #16
   ba62a:	b2da      	uxtb	r2, r3
   ba62c:	b90a      	cbnz	r2, ba632 <__lo0bits+0x32>
   ba62e:	3008      	adds	r0, #8
   ba630:	0a1b      	lsrs	r3, r3, #8
   ba632:	071a      	lsls	r2, r3, #28
   ba634:	bf04      	itt	eq
   ba636:	091b      	lsreq	r3, r3, #4
   ba638:	3004      	addeq	r0, #4
   ba63a:	079a      	lsls	r2, r3, #30
   ba63c:	bf04      	itt	eq
   ba63e:	089b      	lsreq	r3, r3, #2
   ba640:	3002      	addeq	r0, #2
   ba642:	07da      	lsls	r2, r3, #31
   ba644:	d403      	bmi.n	ba64e <__lo0bits+0x4e>
   ba646:	085b      	lsrs	r3, r3, #1
   ba648:	f100 0001 	add.w	r0, r0, #1
   ba64c:	d005      	beq.n	ba65a <__lo0bits+0x5a>
   ba64e:	600b      	str	r3, [r1, #0]
   ba650:	4770      	bx	lr
   ba652:	4610      	mov	r0, r2
   ba654:	e7e9      	b.n	ba62a <__lo0bits+0x2a>
   ba656:	2000      	movs	r0, #0
   ba658:	4770      	bx	lr
   ba65a:	2020      	movs	r0, #32
   ba65c:	4770      	bx	lr
	...

000ba660 <__i2b>:
   ba660:	b510      	push	{r4, lr}
   ba662:	460c      	mov	r4, r1
   ba664:	2101      	movs	r1, #1
   ba666:	f7ff feb9 	bl	ba3dc <_Balloc>
   ba66a:	4602      	mov	r2, r0
   ba66c:	b928      	cbnz	r0, ba67a <__i2b+0x1a>
   ba66e:	4b05      	ldr	r3, [pc, #20]	; (ba684 <__i2b+0x24>)
   ba670:	4805      	ldr	r0, [pc, #20]	; (ba688 <__i2b+0x28>)
   ba672:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba676:	f7fd f807 	bl	b7688 <__assert_func>
   ba67a:	2301      	movs	r3, #1
   ba67c:	6144      	str	r4, [r0, #20]
   ba67e:	6103      	str	r3, [r0, #16]
   ba680:	bd10      	pop	{r4, pc}
   ba682:	bf00      	nop
   ba684:	000bb9a1 	.word	0x000bb9a1
   ba688:	000bba2a 	.word	0x000bba2a

000ba68c <__multiply>:
   ba68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba690:	4691      	mov	r9, r2
   ba692:	690a      	ldr	r2, [r1, #16]
   ba694:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba698:	429a      	cmp	r2, r3
   ba69a:	bfb8      	it	lt
   ba69c:	460b      	movlt	r3, r1
   ba69e:	460c      	mov	r4, r1
   ba6a0:	bfbc      	itt	lt
   ba6a2:	464c      	movlt	r4, r9
   ba6a4:	4699      	movlt	r9, r3
   ba6a6:	6927      	ldr	r7, [r4, #16]
   ba6a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba6ac:	68a3      	ldr	r3, [r4, #8]
   ba6ae:	6861      	ldr	r1, [r4, #4]
   ba6b0:	eb07 060a 	add.w	r6, r7, sl
   ba6b4:	42b3      	cmp	r3, r6
   ba6b6:	b085      	sub	sp, #20
   ba6b8:	bfb8      	it	lt
   ba6ba:	3101      	addlt	r1, #1
   ba6bc:	f7ff fe8e 	bl	ba3dc <_Balloc>
   ba6c0:	b930      	cbnz	r0, ba6d0 <__multiply+0x44>
   ba6c2:	4602      	mov	r2, r0
   ba6c4:	4b44      	ldr	r3, [pc, #272]	; (ba7d8 <__multiply+0x14c>)
   ba6c6:	4845      	ldr	r0, [pc, #276]	; (ba7dc <__multiply+0x150>)
   ba6c8:	f240 115d 	movw	r1, #349	; 0x15d
   ba6cc:	f7fc ffdc 	bl	b7688 <__assert_func>
   ba6d0:	f100 0514 	add.w	r5, r0, #20
   ba6d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba6d8:	462b      	mov	r3, r5
   ba6da:	2200      	movs	r2, #0
   ba6dc:	4543      	cmp	r3, r8
   ba6de:	d321      	bcc.n	ba724 <__multiply+0x98>
   ba6e0:	f104 0314 	add.w	r3, r4, #20
   ba6e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba6e8:	f109 0314 	add.w	r3, r9, #20
   ba6ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba6f0:	9202      	str	r2, [sp, #8]
   ba6f2:	1b3a      	subs	r2, r7, r4
   ba6f4:	3a15      	subs	r2, #21
   ba6f6:	f022 0203 	bic.w	r2, r2, #3
   ba6fa:	3204      	adds	r2, #4
   ba6fc:	f104 0115 	add.w	r1, r4, #21
   ba700:	428f      	cmp	r7, r1
   ba702:	bf38      	it	cc
   ba704:	2204      	movcc	r2, #4
   ba706:	9201      	str	r2, [sp, #4]
   ba708:	9a02      	ldr	r2, [sp, #8]
   ba70a:	9303      	str	r3, [sp, #12]
   ba70c:	429a      	cmp	r2, r3
   ba70e:	d80c      	bhi.n	ba72a <__multiply+0x9e>
   ba710:	2e00      	cmp	r6, #0
   ba712:	dd03      	ble.n	ba71c <__multiply+0x90>
   ba714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba718:	2b00      	cmp	r3, #0
   ba71a:	d05a      	beq.n	ba7d2 <__multiply+0x146>
   ba71c:	6106      	str	r6, [r0, #16]
   ba71e:	b005      	add	sp, #20
   ba720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba724:	f843 2b04 	str.w	r2, [r3], #4
   ba728:	e7d8      	b.n	ba6dc <__multiply+0x50>
   ba72a:	f8b3 a000 	ldrh.w	sl, [r3]
   ba72e:	f1ba 0f00 	cmp.w	sl, #0
   ba732:	d024      	beq.n	ba77e <__multiply+0xf2>
   ba734:	f104 0e14 	add.w	lr, r4, #20
   ba738:	46a9      	mov	r9, r5
   ba73a:	f04f 0c00 	mov.w	ip, #0
   ba73e:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba742:	f8d9 1000 	ldr.w	r1, [r9]
   ba746:	fa1f fb82 	uxth.w	fp, r2
   ba74a:	b289      	uxth	r1, r1
   ba74c:	fb0a 110b 	mla	r1, sl, fp, r1
   ba750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba754:	f8d9 2000 	ldr.w	r2, [r9]
   ba758:	4461      	add	r1, ip
   ba75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba75e:	fb0a c20b 	mla	r2, sl, fp, ip
   ba762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   ba766:	b289      	uxth	r1, r1
   ba768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   ba76c:	4577      	cmp	r7, lr
   ba76e:	f849 1b04 	str.w	r1, [r9], #4
   ba772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba776:	d8e2      	bhi.n	ba73e <__multiply+0xb2>
   ba778:	9a01      	ldr	r2, [sp, #4]
   ba77a:	f845 c002 	str.w	ip, [r5, r2]
   ba77e:	9a03      	ldr	r2, [sp, #12]
   ba780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   ba784:	3304      	adds	r3, #4
   ba786:	f1b9 0f00 	cmp.w	r9, #0
   ba78a:	d020      	beq.n	ba7ce <__multiply+0x142>
   ba78c:	6829      	ldr	r1, [r5, #0]
   ba78e:	f104 0c14 	add.w	ip, r4, #20
   ba792:	46ae      	mov	lr, r5
   ba794:	f04f 0a00 	mov.w	sl, #0
   ba798:	f8bc b000 	ldrh.w	fp, [ip]
   ba79c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   ba7a0:	fb09 220b 	mla	r2, r9, fp, r2
   ba7a4:	4492      	add	sl, r2
   ba7a6:	b289      	uxth	r1, r1
   ba7a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   ba7ac:	f84e 1b04 	str.w	r1, [lr], #4
   ba7b0:	f85c 2b04 	ldr.w	r2, [ip], #4
   ba7b4:	f8be 1000 	ldrh.w	r1, [lr]
   ba7b8:	0c12      	lsrs	r2, r2, #16
   ba7ba:	fb09 1102 	mla	r1, r9, r2, r1
   ba7be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   ba7c2:	4567      	cmp	r7, ip
   ba7c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   ba7c8:	d8e6      	bhi.n	ba798 <__multiply+0x10c>
   ba7ca:	9a01      	ldr	r2, [sp, #4]
   ba7cc:	50a9      	str	r1, [r5, r2]
   ba7ce:	3504      	adds	r5, #4
   ba7d0:	e79a      	b.n	ba708 <__multiply+0x7c>
   ba7d2:	3e01      	subs	r6, #1
   ba7d4:	e79c      	b.n	ba710 <__multiply+0x84>
   ba7d6:	bf00      	nop
   ba7d8:	000bb9a1 	.word	0x000bb9a1
   ba7dc:	000bba2a 	.word	0x000bba2a

000ba7e0 <__pow5mult>:
   ba7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba7e4:	4615      	mov	r5, r2
   ba7e6:	f012 0203 	ands.w	r2, r2, #3
   ba7ea:	4606      	mov	r6, r0
   ba7ec:	460f      	mov	r7, r1
   ba7ee:	d007      	beq.n	ba800 <__pow5mult+0x20>
   ba7f0:	4c25      	ldr	r4, [pc, #148]	; (ba888 <__pow5mult+0xa8>)
   ba7f2:	3a01      	subs	r2, #1
   ba7f4:	2300      	movs	r3, #0
   ba7f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ba7fa:	f7ff fe51 	bl	ba4a0 <__multadd>
   ba7fe:	4607      	mov	r7, r0
   ba800:	10ad      	asrs	r5, r5, #2
   ba802:	d03d      	beq.n	ba880 <__pow5mult+0xa0>
   ba804:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba806:	b97c      	cbnz	r4, ba828 <__pow5mult+0x48>
   ba808:	2010      	movs	r0, #16
   ba80a:	f7fc fefd 	bl	b7608 <malloc>
   ba80e:	4602      	mov	r2, r0
   ba810:	6270      	str	r0, [r6, #36]	; 0x24
   ba812:	b928      	cbnz	r0, ba820 <__pow5mult+0x40>
   ba814:	4b1d      	ldr	r3, [pc, #116]	; (ba88c <__pow5mult+0xac>)
   ba816:	481e      	ldr	r0, [pc, #120]	; (ba890 <__pow5mult+0xb0>)
   ba818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   ba81c:	f7fc ff34 	bl	b7688 <__assert_func>
   ba820:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba824:	6004      	str	r4, [r0, #0]
   ba826:	60c4      	str	r4, [r0, #12]
   ba828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ba82c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ba830:	b94c      	cbnz	r4, ba846 <__pow5mult+0x66>
   ba832:	f240 2171 	movw	r1, #625	; 0x271
   ba836:	4630      	mov	r0, r6
   ba838:	f7ff ff12 	bl	ba660 <__i2b>
   ba83c:	2300      	movs	r3, #0
   ba83e:	f8c8 0008 	str.w	r0, [r8, #8]
   ba842:	4604      	mov	r4, r0
   ba844:	6003      	str	r3, [r0, #0]
   ba846:	f04f 0900 	mov.w	r9, #0
   ba84a:	07eb      	lsls	r3, r5, #31
   ba84c:	d50a      	bpl.n	ba864 <__pow5mult+0x84>
   ba84e:	4639      	mov	r1, r7
   ba850:	4622      	mov	r2, r4
   ba852:	4630      	mov	r0, r6
   ba854:	f7ff ff1a 	bl	ba68c <__multiply>
   ba858:	4639      	mov	r1, r7
   ba85a:	4680      	mov	r8, r0
   ba85c:	4630      	mov	r0, r6
   ba85e:	f7ff fdfd 	bl	ba45c <_Bfree>
   ba862:	4647      	mov	r7, r8
   ba864:	106d      	asrs	r5, r5, #1
   ba866:	d00b      	beq.n	ba880 <__pow5mult+0xa0>
   ba868:	6820      	ldr	r0, [r4, #0]
   ba86a:	b938      	cbnz	r0, ba87c <__pow5mult+0x9c>
   ba86c:	4622      	mov	r2, r4
   ba86e:	4621      	mov	r1, r4
   ba870:	4630      	mov	r0, r6
   ba872:	f7ff ff0b 	bl	ba68c <__multiply>
   ba876:	6020      	str	r0, [r4, #0]
   ba878:	f8c0 9000 	str.w	r9, [r0]
   ba87c:	4604      	mov	r4, r0
   ba87e:	e7e4      	b.n	ba84a <__pow5mult+0x6a>
   ba880:	4638      	mov	r0, r7
   ba882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba886:	bf00      	nop
   ba888:	000bbb78 	.word	0x000bbb78
   ba88c:	000bb77a 	.word	0x000bb77a
   ba890:	000bba2a 	.word	0x000bba2a

000ba894 <__lshift>:
   ba894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba898:	460c      	mov	r4, r1
   ba89a:	6849      	ldr	r1, [r1, #4]
   ba89c:	6923      	ldr	r3, [r4, #16]
   ba89e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ba8a2:	68a3      	ldr	r3, [r4, #8]
   ba8a4:	4607      	mov	r7, r0
   ba8a6:	4691      	mov	r9, r2
   ba8a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ba8ac:	f108 0601 	add.w	r6, r8, #1
   ba8b0:	42b3      	cmp	r3, r6
   ba8b2:	db0b      	blt.n	ba8cc <__lshift+0x38>
   ba8b4:	4638      	mov	r0, r7
   ba8b6:	f7ff fd91 	bl	ba3dc <_Balloc>
   ba8ba:	4605      	mov	r5, r0
   ba8bc:	b948      	cbnz	r0, ba8d2 <__lshift+0x3e>
   ba8be:	4602      	mov	r2, r0
   ba8c0:	4b2a      	ldr	r3, [pc, #168]	; (ba96c <__lshift+0xd8>)
   ba8c2:	482b      	ldr	r0, [pc, #172]	; (ba970 <__lshift+0xdc>)
   ba8c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   ba8c8:	f7fc fede 	bl	b7688 <__assert_func>
   ba8cc:	3101      	adds	r1, #1
   ba8ce:	005b      	lsls	r3, r3, #1
   ba8d0:	e7ee      	b.n	ba8b0 <__lshift+0x1c>
   ba8d2:	2300      	movs	r3, #0
   ba8d4:	f100 0114 	add.w	r1, r0, #20
   ba8d8:	f100 0210 	add.w	r2, r0, #16
   ba8dc:	4618      	mov	r0, r3
   ba8de:	4553      	cmp	r3, sl
   ba8e0:	db37      	blt.n	ba952 <__lshift+0xbe>
   ba8e2:	6920      	ldr	r0, [r4, #16]
   ba8e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ba8e8:	f104 0314 	add.w	r3, r4, #20
   ba8ec:	f019 091f 	ands.w	r9, r9, #31
   ba8f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ba8f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   ba8f8:	d02f      	beq.n	ba95a <__lshift+0xc6>
   ba8fa:	f1c9 0e20 	rsb	lr, r9, #32
   ba8fe:	468a      	mov	sl, r1
   ba900:	f04f 0c00 	mov.w	ip, #0
   ba904:	681a      	ldr	r2, [r3, #0]
   ba906:	fa02 f209 	lsl.w	r2, r2, r9
   ba90a:	ea42 020c 	orr.w	r2, r2, ip
   ba90e:	f84a 2b04 	str.w	r2, [sl], #4
   ba912:	f853 2b04 	ldr.w	r2, [r3], #4
   ba916:	4298      	cmp	r0, r3
   ba918:	fa22 fc0e 	lsr.w	ip, r2, lr
   ba91c:	d8f2      	bhi.n	ba904 <__lshift+0x70>
   ba91e:	1b03      	subs	r3, r0, r4
   ba920:	3b15      	subs	r3, #21
   ba922:	f023 0303 	bic.w	r3, r3, #3
   ba926:	3304      	adds	r3, #4
   ba928:	f104 0215 	add.w	r2, r4, #21
   ba92c:	4290      	cmp	r0, r2
   ba92e:	bf38      	it	cc
   ba930:	2304      	movcc	r3, #4
   ba932:	f841 c003 	str.w	ip, [r1, r3]
   ba936:	f1bc 0f00 	cmp.w	ip, #0
   ba93a:	d001      	beq.n	ba940 <__lshift+0xac>
   ba93c:	f108 0602 	add.w	r6, r8, #2
   ba940:	3e01      	subs	r6, #1
   ba942:	4638      	mov	r0, r7
   ba944:	612e      	str	r6, [r5, #16]
   ba946:	4621      	mov	r1, r4
   ba948:	f7ff fd88 	bl	ba45c <_Bfree>
   ba94c:	4628      	mov	r0, r5
   ba94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba952:	f842 0f04 	str.w	r0, [r2, #4]!
   ba956:	3301      	adds	r3, #1
   ba958:	e7c1      	b.n	ba8de <__lshift+0x4a>
   ba95a:	3904      	subs	r1, #4
   ba95c:	f853 2b04 	ldr.w	r2, [r3], #4
   ba960:	f841 2f04 	str.w	r2, [r1, #4]!
   ba964:	4298      	cmp	r0, r3
   ba966:	d8f9      	bhi.n	ba95c <__lshift+0xc8>
   ba968:	e7ea      	b.n	ba940 <__lshift+0xac>
   ba96a:	bf00      	nop
   ba96c:	000bb9a1 	.word	0x000bb9a1
   ba970:	000bba2a 	.word	0x000bba2a

000ba974 <__mcmp>:
   ba974:	b530      	push	{r4, r5, lr}
   ba976:	6902      	ldr	r2, [r0, #16]
   ba978:	690c      	ldr	r4, [r1, #16]
   ba97a:	1b12      	subs	r2, r2, r4
   ba97c:	d10e      	bne.n	ba99c <__mcmp+0x28>
   ba97e:	f100 0314 	add.w	r3, r0, #20
   ba982:	3114      	adds	r1, #20
   ba984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ba988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ba98c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ba990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ba994:	42a5      	cmp	r5, r4
   ba996:	d003      	beq.n	ba9a0 <__mcmp+0x2c>
   ba998:	d305      	bcc.n	ba9a6 <__mcmp+0x32>
   ba99a:	2201      	movs	r2, #1
   ba99c:	4610      	mov	r0, r2
   ba99e:	bd30      	pop	{r4, r5, pc}
   ba9a0:	4283      	cmp	r3, r0
   ba9a2:	d3f3      	bcc.n	ba98c <__mcmp+0x18>
   ba9a4:	e7fa      	b.n	ba99c <__mcmp+0x28>
   ba9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba9aa:	e7f7      	b.n	ba99c <__mcmp+0x28>

000ba9ac <__mdiff>:
   ba9ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9b0:	460c      	mov	r4, r1
   ba9b2:	4606      	mov	r6, r0
   ba9b4:	4611      	mov	r1, r2
   ba9b6:	4620      	mov	r0, r4
   ba9b8:	4690      	mov	r8, r2
   ba9ba:	f7ff ffdb 	bl	ba974 <__mcmp>
   ba9be:	1e05      	subs	r5, r0, #0
   ba9c0:	d110      	bne.n	ba9e4 <__mdiff+0x38>
   ba9c2:	4629      	mov	r1, r5
   ba9c4:	4630      	mov	r0, r6
   ba9c6:	f7ff fd09 	bl	ba3dc <_Balloc>
   ba9ca:	b930      	cbnz	r0, ba9da <__mdiff+0x2e>
   ba9cc:	4b3a      	ldr	r3, [pc, #232]	; (baab8 <__mdiff+0x10c>)
   ba9ce:	4602      	mov	r2, r0
   ba9d0:	f240 2132 	movw	r1, #562	; 0x232
   ba9d4:	4839      	ldr	r0, [pc, #228]	; (baabc <__mdiff+0x110>)
   ba9d6:	f7fc fe57 	bl	b7688 <__assert_func>
   ba9da:	2301      	movs	r3, #1
   ba9dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ba9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba9e4:	bfa4      	itt	ge
   ba9e6:	4643      	movge	r3, r8
   ba9e8:	46a0      	movge	r8, r4
   ba9ea:	4630      	mov	r0, r6
   ba9ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ba9f0:	bfa6      	itte	ge
   ba9f2:	461c      	movge	r4, r3
   ba9f4:	2500      	movge	r5, #0
   ba9f6:	2501      	movlt	r5, #1
   ba9f8:	f7ff fcf0 	bl	ba3dc <_Balloc>
   ba9fc:	b920      	cbnz	r0, baa08 <__mdiff+0x5c>
   ba9fe:	4b2e      	ldr	r3, [pc, #184]	; (baab8 <__mdiff+0x10c>)
   baa00:	4602      	mov	r2, r0
   baa02:	f44f 7110 	mov.w	r1, #576	; 0x240
   baa06:	e7e5      	b.n	ba9d4 <__mdiff+0x28>
   baa08:	f8d8 7010 	ldr.w	r7, [r8, #16]
   baa0c:	6926      	ldr	r6, [r4, #16]
   baa0e:	60c5      	str	r5, [r0, #12]
   baa10:	f104 0914 	add.w	r9, r4, #20
   baa14:	f108 0514 	add.w	r5, r8, #20
   baa18:	f100 0e14 	add.w	lr, r0, #20
   baa1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   baa20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   baa24:	f108 0210 	add.w	r2, r8, #16
   baa28:	46f2      	mov	sl, lr
   baa2a:	2100      	movs	r1, #0
   baa2c:	f859 3b04 	ldr.w	r3, [r9], #4
   baa30:	f852 bf04 	ldr.w	fp, [r2, #4]!
   baa34:	fa1f f883 	uxth.w	r8, r3
   baa38:	fa11 f18b 	uxtah	r1, r1, fp
   baa3c:	0c1b      	lsrs	r3, r3, #16
   baa3e:	eba1 0808 	sub.w	r8, r1, r8
   baa42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   baa46:	eb03 4328 	add.w	r3, r3, r8, asr #16
   baa4a:	fa1f f888 	uxth.w	r8, r8
   baa4e:	1419      	asrs	r1, r3, #16
   baa50:	454e      	cmp	r6, r9
   baa52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   baa56:	f84a 3b04 	str.w	r3, [sl], #4
   baa5a:	d8e7      	bhi.n	baa2c <__mdiff+0x80>
   baa5c:	1b33      	subs	r3, r6, r4
   baa5e:	3b15      	subs	r3, #21
   baa60:	f023 0303 	bic.w	r3, r3, #3
   baa64:	3304      	adds	r3, #4
   baa66:	3415      	adds	r4, #21
   baa68:	42a6      	cmp	r6, r4
   baa6a:	bf38      	it	cc
   baa6c:	2304      	movcc	r3, #4
   baa6e:	441d      	add	r5, r3
   baa70:	4473      	add	r3, lr
   baa72:	469e      	mov	lr, r3
   baa74:	462e      	mov	r6, r5
   baa76:	4566      	cmp	r6, ip
   baa78:	d30e      	bcc.n	baa98 <__mdiff+0xec>
   baa7a:	f10c 0203 	add.w	r2, ip, #3
   baa7e:	1b52      	subs	r2, r2, r5
   baa80:	f022 0203 	bic.w	r2, r2, #3
   baa84:	3d03      	subs	r5, #3
   baa86:	45ac      	cmp	ip, r5
   baa88:	bf38      	it	cc
   baa8a:	2200      	movcc	r2, #0
   baa8c:	441a      	add	r2, r3
   baa8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   baa92:	b17b      	cbz	r3, baab4 <__mdiff+0x108>
   baa94:	6107      	str	r7, [r0, #16]
   baa96:	e7a3      	b.n	ba9e0 <__mdiff+0x34>
   baa98:	f856 8b04 	ldr.w	r8, [r6], #4
   baa9c:	fa11 f288 	uxtah	r2, r1, r8
   baaa0:	1414      	asrs	r4, r2, #16
   baaa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   baaa6:	b292      	uxth	r2, r2
   baaa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   baaac:	f84e 2b04 	str.w	r2, [lr], #4
   baab0:	1421      	asrs	r1, r4, #16
   baab2:	e7e0      	b.n	baa76 <__mdiff+0xca>
   baab4:	3f01      	subs	r7, #1
   baab6:	e7ea      	b.n	baa8e <__mdiff+0xe2>
   baab8:	000bb9a1 	.word	0x000bb9a1
   baabc:	000bba2a 	.word	0x000bba2a

000baac0 <__ulp>:
   baac0:	b082      	sub	sp, #8
   baac2:	ed8d 0b00 	vstr	d0, [sp]
   baac6:	9b01      	ldr	r3, [sp, #4]
   baac8:	4912      	ldr	r1, [pc, #72]	; (bab14 <__ulp+0x54>)
   baaca:	4019      	ands	r1, r3
   baacc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   baad0:	2900      	cmp	r1, #0
   baad2:	dd05      	ble.n	baae0 <__ulp+0x20>
   baad4:	2200      	movs	r2, #0
   baad6:	460b      	mov	r3, r1
   baad8:	ec43 2b10 	vmov	d0, r2, r3
   baadc:	b002      	add	sp, #8
   baade:	4770      	bx	lr
   baae0:	4249      	negs	r1, r1
   baae2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   baae6:	ea4f 5021 	mov.w	r0, r1, asr #20
   baaea:	f04f 0200 	mov.w	r2, #0
   baaee:	f04f 0300 	mov.w	r3, #0
   baaf2:	da04      	bge.n	baafe <__ulp+0x3e>
   baaf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   baaf8:	fa41 f300 	asr.w	r3, r1, r0
   baafc:	e7ec      	b.n	baad8 <__ulp+0x18>
   baafe:	f1a0 0114 	sub.w	r1, r0, #20
   bab02:	291e      	cmp	r1, #30
   bab04:	bfda      	itte	le
   bab06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bab0a:	fa20 f101 	lsrle.w	r1, r0, r1
   bab0e:	2101      	movgt	r1, #1
   bab10:	460a      	mov	r2, r1
   bab12:	e7e1      	b.n	baad8 <__ulp+0x18>
   bab14:	7ff00000 	.word	0x7ff00000

000bab18 <__b2d>:
   bab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bab1a:	6905      	ldr	r5, [r0, #16]
   bab1c:	f100 0714 	add.w	r7, r0, #20
   bab20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bab24:	1f2e      	subs	r6, r5, #4
   bab26:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bab2a:	4620      	mov	r0, r4
   bab2c:	f7ff fd48 	bl	ba5c0 <__hi0bits>
   bab30:	f1c0 0320 	rsb	r3, r0, #32
   bab34:	280a      	cmp	r0, #10
   bab36:	f8df c07c 	ldr.w	ip, [pc, #124]	; babb4 <__b2d+0x9c>
   bab3a:	600b      	str	r3, [r1, #0]
   bab3c:	dc14      	bgt.n	bab68 <__b2d+0x50>
   bab3e:	f1c0 0e0b 	rsb	lr, r0, #11
   bab42:	fa24 f10e 	lsr.w	r1, r4, lr
   bab46:	42b7      	cmp	r7, r6
   bab48:	ea41 030c 	orr.w	r3, r1, ip
   bab4c:	bf34      	ite	cc
   bab4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bab52:	2100      	movcs	r1, #0
   bab54:	3015      	adds	r0, #21
   bab56:	fa04 f000 	lsl.w	r0, r4, r0
   bab5a:	fa21 f10e 	lsr.w	r1, r1, lr
   bab5e:	ea40 0201 	orr.w	r2, r0, r1
   bab62:	ec43 2b10 	vmov	d0, r2, r3
   bab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bab68:	42b7      	cmp	r7, r6
   bab6a:	bf3a      	itte	cc
   bab6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bab70:	f1a5 0608 	subcc.w	r6, r5, #8
   bab74:	2100      	movcs	r1, #0
   bab76:	380b      	subs	r0, #11
   bab78:	d017      	beq.n	babaa <__b2d+0x92>
   bab7a:	f1c0 0c20 	rsb	ip, r0, #32
   bab7e:	fa04 f500 	lsl.w	r5, r4, r0
   bab82:	42be      	cmp	r6, r7
   bab84:	fa21 f40c 	lsr.w	r4, r1, ip
   bab88:	ea45 0504 	orr.w	r5, r5, r4
   bab8c:	bf8c      	ite	hi
   bab8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bab92:	2400      	movls	r4, #0
   bab94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bab98:	fa01 f000 	lsl.w	r0, r1, r0
   bab9c:	fa24 f40c 	lsr.w	r4, r4, ip
   baba0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   baba4:	ea40 0204 	orr.w	r2, r0, r4
   baba8:	e7db      	b.n	bab62 <__b2d+0x4a>
   babaa:	ea44 030c 	orr.w	r3, r4, ip
   babae:	460a      	mov	r2, r1
   babb0:	e7d7      	b.n	bab62 <__b2d+0x4a>
   babb2:	bf00      	nop
   babb4:	3ff00000 	.word	0x3ff00000

000babb8 <__d2b>:
   babb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   babbc:	4689      	mov	r9, r1
   babbe:	2101      	movs	r1, #1
   babc0:	ec57 6b10 	vmov	r6, r7, d0
   babc4:	4690      	mov	r8, r2
   babc6:	f7ff fc09 	bl	ba3dc <_Balloc>
   babca:	4604      	mov	r4, r0
   babcc:	b930      	cbnz	r0, babdc <__d2b+0x24>
   babce:	4602      	mov	r2, r0
   babd0:	4b25      	ldr	r3, [pc, #148]	; (bac68 <__d2b+0xb0>)
   babd2:	4826      	ldr	r0, [pc, #152]	; (bac6c <__d2b+0xb4>)
   babd4:	f240 310a 	movw	r1, #778	; 0x30a
   babd8:	f7fc fd56 	bl	b7688 <__assert_func>
   babdc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   babe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   babe4:	bb35      	cbnz	r5, bac34 <__d2b+0x7c>
   babe6:	2e00      	cmp	r6, #0
   babe8:	9301      	str	r3, [sp, #4]
   babea:	d028      	beq.n	bac3e <__d2b+0x86>
   babec:	4668      	mov	r0, sp
   babee:	9600      	str	r6, [sp, #0]
   babf0:	f7ff fd06 	bl	ba600 <__lo0bits>
   babf4:	9900      	ldr	r1, [sp, #0]
   babf6:	b300      	cbz	r0, bac3a <__d2b+0x82>
   babf8:	9a01      	ldr	r2, [sp, #4]
   babfa:	f1c0 0320 	rsb	r3, r0, #32
   babfe:	fa02 f303 	lsl.w	r3, r2, r3
   bac02:	430b      	orrs	r3, r1
   bac04:	40c2      	lsrs	r2, r0
   bac06:	6163      	str	r3, [r4, #20]
   bac08:	9201      	str	r2, [sp, #4]
   bac0a:	9b01      	ldr	r3, [sp, #4]
   bac0c:	61a3      	str	r3, [r4, #24]
   bac0e:	2b00      	cmp	r3, #0
   bac10:	bf14      	ite	ne
   bac12:	2202      	movne	r2, #2
   bac14:	2201      	moveq	r2, #1
   bac16:	6122      	str	r2, [r4, #16]
   bac18:	b1d5      	cbz	r5, bac50 <__d2b+0x98>
   bac1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bac1e:	4405      	add	r5, r0
   bac20:	f8c9 5000 	str.w	r5, [r9]
   bac24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bac28:	f8c8 0000 	str.w	r0, [r8]
   bac2c:	4620      	mov	r0, r4
   bac2e:	b003      	add	sp, #12
   bac30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bac34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bac38:	e7d5      	b.n	babe6 <__d2b+0x2e>
   bac3a:	6161      	str	r1, [r4, #20]
   bac3c:	e7e5      	b.n	bac0a <__d2b+0x52>
   bac3e:	a801      	add	r0, sp, #4
   bac40:	f7ff fcde 	bl	ba600 <__lo0bits>
   bac44:	9b01      	ldr	r3, [sp, #4]
   bac46:	6163      	str	r3, [r4, #20]
   bac48:	2201      	movs	r2, #1
   bac4a:	6122      	str	r2, [r4, #16]
   bac4c:	3020      	adds	r0, #32
   bac4e:	e7e3      	b.n	bac18 <__d2b+0x60>
   bac50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bac54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bac58:	f8c9 0000 	str.w	r0, [r9]
   bac5c:	6918      	ldr	r0, [r3, #16]
   bac5e:	f7ff fcaf 	bl	ba5c0 <__hi0bits>
   bac62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bac66:	e7df      	b.n	bac28 <__d2b+0x70>
   bac68:	000bb9a1 	.word	0x000bb9a1
   bac6c:	000bba2a 	.word	0x000bba2a

000bac70 <__ratio>:
   bac70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac74:	4688      	mov	r8, r1
   bac76:	4669      	mov	r1, sp
   bac78:	4681      	mov	r9, r0
   bac7a:	f7ff ff4d 	bl	bab18 <__b2d>
   bac7e:	a901      	add	r1, sp, #4
   bac80:	4640      	mov	r0, r8
   bac82:	ec55 4b10 	vmov	r4, r5, d0
   bac86:	f7ff ff47 	bl	bab18 <__b2d>
   bac8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bac8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bac92:	eba3 0c02 	sub.w	ip, r3, r2
   bac96:	e9dd 3200 	ldrd	r3, r2, [sp]
   bac9a:	1a9b      	subs	r3, r3, r2
   bac9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   baca0:	ec51 0b10 	vmov	r0, r1, d0
   baca4:	2b00      	cmp	r3, #0
   baca6:	bfd6      	itet	le
   baca8:	460a      	movle	r2, r1
   bacaa:	462a      	movgt	r2, r5
   bacac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bacb0:	468b      	mov	fp, r1
   bacb2:	462f      	mov	r7, r5
   bacb4:	bfd4      	ite	le
   bacb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bacba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bacbe:	4620      	mov	r0, r4
   bacc0:	ee10 2a10 	vmov	r2, s0
   bacc4:	465b      	mov	r3, fp
   bacc6:	4639      	mov	r1, r7
   bacc8:	f7f9 fc90 	bl	b45ec <__aeabi_ddiv>
   baccc:	ec41 0b10 	vmov	d0, r0, r1
   bacd0:	b003      	add	sp, #12
   bacd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bacd6 <__copybits>:
   bacd6:	3901      	subs	r1, #1
   bacd8:	b570      	push	{r4, r5, r6, lr}
   bacda:	1149      	asrs	r1, r1, #5
   bacdc:	6914      	ldr	r4, [r2, #16]
   bacde:	3101      	adds	r1, #1
   bace0:	f102 0314 	add.w	r3, r2, #20
   bace4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bace8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bacec:	1f05      	subs	r5, r0, #4
   bacee:	42a3      	cmp	r3, r4
   bacf0:	d30c      	bcc.n	bad0c <__copybits+0x36>
   bacf2:	1aa3      	subs	r3, r4, r2
   bacf4:	3b11      	subs	r3, #17
   bacf6:	f023 0303 	bic.w	r3, r3, #3
   bacfa:	3211      	adds	r2, #17
   bacfc:	42a2      	cmp	r2, r4
   bacfe:	bf88      	it	hi
   bad00:	2300      	movhi	r3, #0
   bad02:	4418      	add	r0, r3
   bad04:	2300      	movs	r3, #0
   bad06:	4288      	cmp	r0, r1
   bad08:	d305      	bcc.n	bad16 <__copybits+0x40>
   bad0a:	bd70      	pop	{r4, r5, r6, pc}
   bad0c:	f853 6b04 	ldr.w	r6, [r3], #4
   bad10:	f845 6f04 	str.w	r6, [r5, #4]!
   bad14:	e7eb      	b.n	bacee <__copybits+0x18>
   bad16:	f840 3b04 	str.w	r3, [r0], #4
   bad1a:	e7f4      	b.n	bad06 <__copybits+0x30>

000bad1c <__any_on>:
   bad1c:	f100 0214 	add.w	r2, r0, #20
   bad20:	6900      	ldr	r0, [r0, #16]
   bad22:	114b      	asrs	r3, r1, #5
   bad24:	4298      	cmp	r0, r3
   bad26:	b510      	push	{r4, lr}
   bad28:	db11      	blt.n	bad4e <__any_on+0x32>
   bad2a:	dd0a      	ble.n	bad42 <__any_on+0x26>
   bad2c:	f011 011f 	ands.w	r1, r1, #31
   bad30:	d007      	beq.n	bad42 <__any_on+0x26>
   bad32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bad36:	fa24 f001 	lsr.w	r0, r4, r1
   bad3a:	fa00 f101 	lsl.w	r1, r0, r1
   bad3e:	428c      	cmp	r4, r1
   bad40:	d10b      	bne.n	bad5a <__any_on+0x3e>
   bad42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bad46:	4293      	cmp	r3, r2
   bad48:	d803      	bhi.n	bad52 <__any_on+0x36>
   bad4a:	2000      	movs	r0, #0
   bad4c:	bd10      	pop	{r4, pc}
   bad4e:	4603      	mov	r3, r0
   bad50:	e7f7      	b.n	bad42 <__any_on+0x26>
   bad52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bad56:	2900      	cmp	r1, #0
   bad58:	d0f5      	beq.n	bad46 <__any_on+0x2a>
   bad5a:	2001      	movs	r0, #1
   bad5c:	e7f6      	b.n	bad4c <__any_on+0x30>

000bad5e <_calloc_r>:
   bad5e:	b513      	push	{r0, r1, r4, lr}
   bad60:	434a      	muls	r2, r1
   bad62:	4611      	mov	r1, r2
   bad64:	9201      	str	r2, [sp, #4]
   bad66:	f7fc fc7f 	bl	b7668 <_malloc_r>
   bad6a:	4604      	mov	r4, r0
   bad6c:	b118      	cbz	r0, bad76 <_calloc_r+0x18>
   bad6e:	9a01      	ldr	r2, [sp, #4]
   bad70:	2100      	movs	r1, #0
   bad72:	f7fe f80f 	bl	b8d94 <memset>
   bad76:	4620      	mov	r0, r4
   bad78:	b002      	add	sp, #8
   bad7a:	bd10      	pop	{r4, pc}
   bad7c:	0000      	movs	r0, r0
	...

000bad80 <nan>:
   bad80:	ed9f 0b01 	vldr	d0, [pc, #4]	; bad88 <nan+0x8>
   bad84:	4770      	bx	lr
   bad86:	bf00      	nop
   bad88:	00000000 	.word	0x00000000
   bad8c:	7ff80000 	.word	0x7ff80000

000bad90 <__ascii_wctomb>:
   bad90:	b149      	cbz	r1, bada6 <__ascii_wctomb+0x16>
   bad92:	2aff      	cmp	r2, #255	; 0xff
   bad94:	bf85      	ittet	hi
   bad96:	238a      	movhi	r3, #138	; 0x8a
   bad98:	6003      	strhi	r3, [r0, #0]
   bad9a:	700a      	strbls	r2, [r1, #0]
   bad9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bada0:	bf98      	it	ls
   bada2:	2001      	movls	r0, #1
   bada4:	4770      	bx	lr
   bada6:	4608      	mov	r0, r1
   bada8:	4770      	bx	lr

000badaa <link_code_end>:
	...

000badac <link_const_data_start>:
   badac:	000bae71 	.word	0x000bae71
   badb0:	000bae79 	.word	0x000bae79
   badb4:	000bae7d 	.word	0x000bae7d
   badb8:	000bae86 	.word	0x000bae86
   badbc:	000bae8e 	.word	0x000bae8e
   badc0:	000bae9a 	.word	0x000bae9a
   badc4:	000baea0 	.word	0x000baea0
   badc8:	206c6c41 	.word	0x206c6c41
   badcc:	68746977 	.word	0x68746977
   badd0:	74206e69 	.word	0x74206e69
   badd4:	73657268 	.word	0x73657268
   badd8:	646c6f68 	.word	0x646c6f68
   baddc:	00000073 	.word	0x00000073
	...
   bae08:	72617453 	.word	0x72617453
   bae0c:	20707574 	.word	0x20707574
   bae10:	63637553 	.word	0x63637553
   bae14:	66737365 	.word	0x66737365
   bae18:	00006c75 	.word	0x00006c75
	...

000bae48 <dynalib_user>:
   bae48:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   bae58:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bae68:	72697620 6c617574 6b6e5500 6e776f6e      virtual.Unknown
   bae78:	746f4e00 61684320 6e696772 68430067     .Not Charging.Ch
   bae88:	65677261 69440064 61686373 6e696772     arged.Dischargin
   bae98:	61460067 00746c75 6f636944 63656e6e     g.Fault.Diconnec
   baea8:	00646574 65530031 65562074 736f6272     ted.1.Set Verbos
   baeb8:	6f4d2065 30006564 656c4300 64657261     e Mode.0.Cleared
   baec8:	72655620 65736f62 646f4d20 6f4e0065      Verbose Mode.No
   baed8:	74614420 62550061 746f6469 6f482073      Data.Ubidots Ho
   baee8:	52006b6f 6f707365 2065736e 65636552     ok.Response Rece
   baef8:	64657669 61745300 2a006574 74655300     ived.State.*.Set
   baf08:	206f7420 20647233 74726150 69532079      to 3rd Party Si
   baf18:	6553006d 6f742074 72615020 6c636974     m.Set to Particl
   baf28:	69532065 654b006d 41207065 6576696c     e Sim.Keep Alive
   baf38:	74657320 206f7420 73206925 4b006365      set to %i sec.K
   baf48:	20706565 76696c41 6f4c0065 6e696461     eep Alive.Loadin
   baf58:	79532067 6d657473 66654420 746c7561     g System Default
   baf68:	6f4c0073 6e696461 6c412067 20747265     s.Loading Alert 
   baf78:	61666544 73746c75 74655000 00646574     Defaults.Petted.
   baf88:	63746157 676f6468 54227b00 65706d65     Watchdog.{"Tempe
   baf98:	75746172 3a226572 312e3425 22202c66     rature":%4.1f, "
   bafa8:	696d7548 79746964 34253a22 2c66312e     Humidity":%4.1f,
   bafb8:	74614222 79726574 69253a22 7473007d     "Battery":%i}.st
   bafc8:	6761726f 61662d65 696c6963 682d7974     orage-facility-h
   bafd8:	006b6f6f 6d6f7246 20732520 25206f74     ook.From %s to %
   bafe8:	74530073 20657461 6e617254 69746973     s.State Transiti
   baff8:	54006e6f 5f706d65 2078614d 3325203a     on.Temp_Max : %3
   bb008:	0066312e 706d6554 6e694d5f 25203a20     .1f.Temp_Min : %
   bb018:	66312e33 6d754800 74696469 614d5f79     3.1f.Humidity_Ma
   bb028:	25203a78 66312e33 6d754800 74696469     x: %3.1f.Humidit
   bb038:	694d5f79 203a206e 312e3325 70550066     y_Min : %3.1f.Up
   bb048:	20726570 706d6554 74617265 20657275     per Temperature 
   bb058:	65726854 6c6f6873 65532064 6f4c0074     Threshold Set.Lo
   bb068:	20726577 706d6554 74617265 20657275     wer Temperature 
   bb078:	65726854 6c6f6873 65532064 70550074     Threshold Set.Up
   bb088:	20726570 696d7548 79746964 72685420     per Humidity Thr
   bb098:	6f687365 5320646c 4c007465 7265776f     eshold Set.Lower
   bb0a8:	6d754820 74696469 68542079 68736572      Humidity Thresh
   bb0b8:	20646c6f 00746553 65737341 6f697472     old Set.Assertio
   bb0c8:	6961466e 6572756c 63727320 20262620     nFailure src && 
   bb0d8:	2d637273 6c61633e 6361626c 3425006b     src->callback.%4
   bb0e8:	2a66312e 34250043 2566312e 69250025     .1f*C.%4.1f%%.%i
   bb0f8:	00252520 20776f4c 706d6554 656c4120      %%.Low Temp Ale
   bb108:	25207472 66322e34 25203c20 66322e34     rt %4.2f < %4.2f
   bb118:	67694800 65542068 4120706d 7472656c     .High Temp Alert
   bb128:	2e342520 3e206632 2e342520 4c006632      %4.2f > %4.2f.L
   bb138:	4820776f 64696d75 20797469 72656c41     ow Humidity Aler
   bb148:	34252074 2066322e 3425203c 0066322e     t %4.2f < %4.2f.
   bb158:	68676948 6d754820 74696469 6c412079     High Humidity Al
   bb168:	20747265 322e3425 203c2066 322e3425     ert %4.2f < %4.2
   bb178:	6c410066 73747265 61707300 642f6b72     f.Alerts.spark/d
   bb188:	63697665 65732f65 6f697373 6e652f6e     evice/session/en
   bb198:	72450064 20726f72 74617453 202d2065     d.Error State - 
   bb1a8:	65736552 65520074 7361656c 65740065     Reset.Release.te
   bb1b8:	7265706d 72757461 75680065 6964696d     mperature.humidi
   bb1c8:	74007974 65706d65 75746172 552d6572     ty.temperature-U
   bb1d8:	72657070 6d657400 61726570 65727574     pper.temperature
   bb1e8:	776f6c2d 68007265 64696d75 2d797469     -lower.humidity-
   bb1f8:	65707075 75680072 6964696d 6c2d7974     upper.humidity-l
   bb208:	7265776f 74614200 79726574 74614200     ower.Battery.Bat
   bb218:	79726574 746e6f43 00747865 7065654b     teryContext.Keep
   bb228:	696c4120 53206576 4d006365 75736165      Alive Sec.Measu
   bb238:	4e2d6572 5600776f 6f627265 4d2d6573     re-Now.Verbose-M
   bb248:	0065646f 706d6554 7070552d 4c2d7265     ode.Temp-Upper-L
   bb258:	74696d69 6d655400 6f4c2d70 2d726577     imit.Temp-Lower-
   bb268:	696d694c 75480074 6964696d 4c2d7974     Limit.Humidity-L
   bb278:	7265776f 6d694c2d 48007469 64696d75     ower-Limit.Humid
   bb288:	752d7974 72657070 6d694c2d 54007469     ty-upper-Limit.T
   bb298:	00656d69 6f727245 202d2072 33544853     ime.Error - SHT3
   bb2a8:	6e492031 61697469 617a696c 6e6f6974     1 Initialization
   bb2b8:	61745300 70757472 00000000              .Startup....

000bb2c4 <_ZTV5Timer>:
	...
   bb2cc:	000b4d75 000b4dc9 000b4b61              uM...M..aK..

000bb2d8 <_ZTV17PublishQueueAsync>:
	...
   bb2e0:	000b4b39 000b4b4d 000b69bd 000b6c01     9K..MK...i...l..
   bb2f0:	000b6bc1 000b6b9f 000b6d47 000b6be7     .k...k..Gm...k..

000bb300 <_ZTV8MB85RC64>:
	...
   bb308:	000b4b11 000b4b25 000b5e39 000b5ecf     .K..%K..9^...^..
   bb318:	000b5f51                                Q_..

000bb31c <_ZL13releaseNumber>:
   bb31c:	302e3931 00000030                       19.00...

000bb324 <_ZL17FRAMversionNumber>:
   bb324:	00000005 74697277 74614465 61662061     ....writeData fa
   bb334:	64656c69 72756420 20676e69 73617265     iled during eras
   bb344:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

000bb354 <_ZTV6MB85RC>:
	...
   bb35c:	000b5d59 000b5d5b 000b5e39 000b5ecf     Y]..[]..9^...^..
   bb36c:	000b5f51 69766564 65526563 66206461     Q_..deviceRead f
   bb37c:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   bb38c:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   bb39c:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   bb3ac:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   bb3bc:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   bb3cc:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   bb3dc:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   bb3ec:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   bb3fc:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   bb40c:	00000063                                c...

000bb410 <_ZTV12MCP79410SRAM>:
	...
   bb418:	000b6011 000b6027 000b6001 000b6005     .`..'`...`...`..
   bb428:	000b6051 000b6341 000b65a1              Q`..Ac...e..

000bb434 <_ZTV12MCP79410Time>:
	...
   bb43c:	000b6015 000b6019                       .`...`..

000bb444 <_ZTV14MCP79410EEPROM>:
	...
   bb44c:	000b6013 000b6035 000b6009 000b600d     .`..5`...`...`..
   bb45c:	000b6051 000b637b 000b67e9              Q`..{c...g..

000bb468 <_ZTV8MCP79410>:
	...
   bb470:	000b6017 000b6043 6c627550 51687369     .`..C`..PublishQ
   bb480:	65756575 6e797341 75700063 73696c62     ueueAsync.publis
   bb490:	676e6968 20732520 74207325 253d6c74     hing %s %s ttl=%
   bb4a0:	6c662064 3d736761 70007825 696c6275     d flags=%x.publi
   bb4b0:	64656873 63757320 73736563 6c6c7566     shed successfull
   bb4c0:	75700079 73696c62 20646568 6c696166     y.published fail
   bb4d0:	202c6465 6c6c6977 74657220 69207972     ed, will retry i
   bb4e0:	6c25206e 736d2075 65757100 6e696575     n %lu ms.queuein
   bb4f0:	76652067 4e746e65 3d656d61 64207325     g eventName=%s d
   bb500:	3d617461 74207325 253d6c74 6c662064     ata=%s ttl=%d fl
   bb510:	31736761 2064253d 67616c66 253d3273     ags1=%d flags2=%
   bb520:	69732064 253d657a 70610064 75702e70     d size=%d.app.pu
   bb530:	00007162                                bq..

000bb534 <_ZTV21PublishQueueAsyncBase>:
	...
   bb544:	000b69bd 000b4ac1 000b4ac1 000b4ac1     .i...J...J...J..
   bb554:	000b4ac1 000b4ac1                       .J...J..

000bb55c <_ZTV25PublishQueueAsyncRetained>:
	...
   bb564:	000b6b5d 000b6b71 000b69bd 000b6c01     ]k..qk...i...l..
   bb574:	000b6bc1 000b6b9f 000b6d47 000b6be7     .k...k..Gm...k..

000bb584 <_ZTVN5spark13CellularClassE>:
	...
   bb58c:	000b77e3 000b77d9 000b77cf 000b7785     .w...w...w...w..
   bb59c:	000b77c3 000b77b7 000b80e5 000b80ed     .w...w..........
   bb5ac:	000b77ab 000b77a3 000b7799 000b778f     .w...w...w...w..
   bb5bc:	000b811d                                ....

000bb5c0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb5c8:	000b781d 000b7823 000b7861 000b7831     .x..#x..ax..1x..
   bb5d8:	000b781f                                .x..

000bb5dc <_ZTVN5spark13EthernetClassE>:
	...
   bb5e4:	000b7df7 000b7ded 000b7de3 000b7dd9     .}...}...}...}..
   bb5f4:	000b7dcd 000b7dc1 000b80e5 000b80ed     .}...}..........
   bb604:	000b7db5 000b7dad 000b7da3 000b7d99     .}...}...}...}..
   bb614:	000b811d                                ....

000bb618 <_ZTV7TwoWire>:
	...
   bb620:	000b7e15 000b7e5f 000b7e37 000b7e17     .~.._~..7~...~..
   bb630:	000b7e3f 000b7e47 000b7e4f 000b7e57     ?~..G~..O~..W~..

000bb640 <_ZTV9IPAddress>:
	...
   bb648:	000b7fb5 000b7fa5 000b7fa7 00707061     ............app.

000bb658 <_ZTVN5spark12NetworkClassE>:
	...
   bb660:	000b80a5 000b80af 000b80b9 000b80c3     ................
   bb670:	000b80cd 000b80d9 000b80e5 000b80ed     ................
   bb680:	000b80f5 000b8101 000b8109 000b8113     ................
   bb690:	000b811d 2b25005a 3a643330 75323025     ....Z.%+03d:%02u
   bb6a0:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
   bb6b0:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

000bb6c0 <_ZTV11USARTSerial>:
	...
   bb6c8:	000b8791 000b87fd 000b87d5 000b8209     ................
   bb6d8:	000b87a5 000b87c1 000b87b3 000b87cf     ................
   bb6e8:	000b8793 000b8797                       ........

000bb6f0 <_ZTV9USBSerial>:
	...
   bb6f8:	000b883b 000b88a3 000b8879 000b8209     ;.......y.......
   bb708:	000b886b 000b883d 000b884d 000b889d     k...=...M.......
   bb718:	000b885d 000b8835                       ]...5...

000bb720 <_ZSt7nothrow>:
   bb720:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   bb730:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000bb741 <day_name.1>:
   bb741:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   bb751:	61536972                                 riSat

000bb756 <mon_name.0>:
   bb756:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   bb766:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   bb776:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
   bb786:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
   bb796:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   bb7a6:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   bb7b6:	5f343231 36303631 36303831 732f3933     124_1606180639/s
   bb7c6:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   bb7d6:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
   bb7e6:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
   bb7f6:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bb806:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bb816:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bb826:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bb836:	696c6474 61722f62 632e646e 00666e00     tdlib/rand.c.nf.
   bb846:	74696e69 6e610079                        inity.an..

000bb850 <fpi.1>:
   bb850:	00000035 fffffbce 000003cb 00000001     5...............
   bb860:	00000000                                ....

000bb864 <fpinan.0>:
   bb864:	00000034 fffffbce 000003cb 00000001     4...............
   bb874:	00000000                                ....

000bb878 <tinytens>:
   bb878:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bb888:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bb898:	64ac6f43 11680628                       Co.d(.h.

000bb8a0 <_ctype_>:
   bb8a0:	20202000 20202020 28282020 20282828     .         ((((( 
   bb8b0:	20202020 20202020 20202020 20202020                     
   bb8c0:	10108820 10101010 10101010 10101010      ...............
   bb8d0:	04040410 04040404 10040404 10101010     ................
   bb8e0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bb8f0:	01010101 01010101 01010101 10101010     ................
   bb900:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bb910:	02020202 02020202 02020202 10101010     ................
   bb920:	00000020 00000000 00000000 00000000      ...............
	...
   bb9a0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bb9b0:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bb9c0:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bb9d0:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bb9e0:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bb9f0:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bba00:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bba10:	2e00632e 00000000                       .c......

000bba18 <_C_numeric_locale>:
   bba18:	000bba13 000bb740 2003e334 49534f50     ....@...4.. POSI
   bba28:	742f0058 6a2f706d 696b6e65 472d736e     X./tmp/jenkins-G
   bba38:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bba48:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bba58:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bba68:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bba78:	2f62696c 6572706d 00632e63 00000000     lib/mprec.c.....

000bba88 <__mprec_bigtens>:
   bba88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bba98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bbaa8:	7f73bf3c 75154fdd                       <.s..O.u

000bbab0 <__mprec_tens>:
   bbab0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bbac0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bbad0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bbae0:	00000000 412e8480 00000000 416312d0     .......A......cA
   bbaf0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bbb00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bbb10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bbb20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bbb30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bbb40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bbb50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bbb60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bbb70:	79d99db4 44ea7843                       ...yCx.D

000bbb78 <p05.0>:
   bbb78:	00000005 00000019 0000007d              ........}...

000bbb84 <link_const_data_end>:
   bbb84:	000b5c31 	.word	0x000b5c31
   bbb88:	000b6819 	.word	0x000b6819
   bbb8c:	000b6e1d 	.word	0x000b6e1d
   bbb90:	000b7775 	.word	0x000b7775
   bbb94:	000b77ed 	.word	0x000b77ed
   bbb98:	000b7e01 	.word	0x000b7e01
   bbb9c:	000b8095 	.word	0x000b8095
   bbba0:	000b81f5 	.word	0x000b81f5
   bbba4:	000b829d 	.word	0x000b829d
   bbba8:	000b8451 	.word	0x000b8451
   bbbac:	000b877d 	.word	0x000b877d
