
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/1.5.2/argon/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000065d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da5f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d0  2003e080  000da5f4  0001e080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005a0  2003e250  2003e250  0002e250  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000da7c4  000da7c4  0002a7c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da7ec  000da7ec  0002a7ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000efee6  00000000  00000000  0002a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000122de  00000000  00000000  0011a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ff1e  00000000  00000000  0012c9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027d0  00000000  00000000  0014c8d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b78  00000000  00000000  0014f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035576  00000000  00000000  00153c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bc88  00000000  00000000  00189190  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001075aa  00000000  00000000  001b4e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000deac  00000000  00000000  002bc3c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbff 	bl	d7834 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fc04 	bl	d784a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e080 	.word	0x2003e080
   d404c:	000da5f4 	.word	0x000da5f4
   d4050:	2003e250 	.word	0x2003e250
   d4054:	2003e250 	.word	0x2003e250
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fb89 	bl	d6774 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da5f0 	.word	0x000da5f0
   d4084:	000da5b4 	.word	0x000da5b4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd26 	b.w	d4ad8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb51 	bl	d4734 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bb2f 	b.w	d66f8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b9d7 	b.w	d544c <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b9dd 	b.w	d545c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b9db 	b.w	d545c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	4904      	ldr	r1, [pc, #16]	; (d40cc <_Z10measureNow6String+0x14>)
   d40bc:	f002 f8d5 	bl	d626a <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40c0:	b118      	cbz	r0, d40ca <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40c2:	4b03      	ldr	r3, [pc, #12]	; (d40d0 <_Z10measureNow6String+0x18>)
   d40c4:	2203      	movs	r2, #3
   d40c6:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c8:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	000d9f9f 	.word	0x000d9f9f
   d40d0:	2003e2b0 	.word	0x2003e2b0

000d40d4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d8:	6800      	ldr	r0, [r0, #0]
   d40da:	b108      	cbz	r0, d40e0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40dc:	f001 f9be 	bl	d545c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}

000d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40ea:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ec:	f88d 3000 	strb.w	r3, [sp]
   d40f0:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f2:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f4:	f001 fba4 	bl	d5840 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40f8:	4628      	mov	r0, r5
   d40fa:	b003      	add	sp, #12
   d40fc:	bd30      	pop	{r4, r5, pc}
	...

000d4100 <_Z17connectToParticlev>:
  return 1;
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4100:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4104:	f001 f912 	bl	d532c <spark_cloud_flag_connect>
   d4108:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d410c:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4110:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4112:	2000      	movs	r0, #0
   d4114:	f000 ff76 	bl	d5004 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4118:	f04f 0900 	mov.w	r9, #0
   d411c:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d411e:	2000      	movs	r0, #0
   d4120:	f000 ff70 	bl	d5004 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4124:	ebb0 0008 	subs.w	r0, r0, r8
   d4128:	eb61 0109 	sbc.w	r1, r1, r9
   d412c:	428f      	cmp	r7, r1
   d412e:	bf08      	it	eq
   d4130:	4286      	cmpeq	r6, r0
   d4132:	d305      	bcc.n	d4140 <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4134:	f001 f902 	bl	d533c <spark_cloud_flag_connected>
   d4138:	b910      	cbnz	r0, d4140 <_Z17connectToParticlev+0x40>
            spark_process();
   d413a:	f001 f8ef 	bl	d531c <spark_process>
   d413e:	e7ee      	b.n	d411e <_Z17connectToParticlev+0x1e>
   d4140:	f001 f8fc 	bl	d533c <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4144:	b118      	cbz	r0, d414e <_Z17connectToParticlev+0x4e>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4146:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d414a:	f001 b8f7 	b.w	d533c <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d414e:	f000 ff21 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4152:	4b03      	ldr	r3, [pc, #12]	; (d4160 <_Z17connectToParticlev+0x60>)
   d4154:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4156:	f001 f8e1 	bl	d531c <spark_process>

// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d415a:	3c01      	subs	r4, #1
   d415c:	d0f3      	beq.n	d4146 <_Z17connectToParticlev+0x46>
   d415e:	e7d8      	b.n	d4112 <_Z17connectToParticlev+0x12>
   d4160:	2003e700 	.word	0x2003e700

000d4164 <_Z8BlinkLEDi>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
   d4164:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d4166:	b284      	uxth	r4, r0
   d4168:	2101      	movs	r1, #1
   d416a:	4620      	mov	r0, r4
   d416c:	f002 fb75 	bl	d685a <digitalWrite>
  delay(1000);
   d4170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4174:	f001 f9a2 	bl	d54bc <delay>
  digitalWrite(LED,LOW);
   d4178:	4620      	mov	r0, r4
   d417a:	2100      	movs	r1, #0
   d417c:	f002 fb6d 	bl	d685a <digitalWrite>
  delay(1000);
   d4180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
  digitalWrite(LED,HIGH);
  delay(1000);
  digitalWrite(LED,LOW);
  delay(1000);
   d4188:	f001 b998 	b.w	d54bc <delay>

000d418c <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d418c:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d418e:	f000 ff01 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d4192:	4b04      	ldr	r3, [pc, #16]	; (d41a4 <_Z20meterParticlePublishv+0x18>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d4198:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d419c:	bf34      	ite	cc
   d419e:	2000      	movcc	r0, #0
   d41a0:	2001      	movcs	r0, #1
   d41a2:	bd08      	pop	{r3, pc}
   d41a4:	2003e350 	.word	0x2003e350

000d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d41a8:	b508      	push	{r3, lr}
}

int setLowerHumidityLimit(String value)
{
  sensor_data.lowerHumidityThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
   d41aa:	f7ff ffef 	bl	d418c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41ae:	b118      	cbz	r0, d41b8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d41b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41b4:	f7ff bfea 	b.w	d418c <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d41b8:	f001 f8b0 	bl	d531c <spark_process>
   d41bc:	e7f5      	b.n	d41aa <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29+0x2>
	...

000d41c0 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d41c0:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d41c2:	4c15      	ldr	r4, [pc, #84]	; (d4218 <_Z20updateThresholdValuev+0x58>)
   d41c4:	6a20      	ldr	r0, [r4, #32]
   d41c6:	f002 fe9d 	bl	d6f04 <__aeabi_f2d>
   d41ca:	4a14      	ldr	r2, [pc, #80]	; (d421c <_Z20updateThresholdValuev+0x5c>)
   d41cc:	e9cd 0100 	strd	r0, r1, [sp]
   d41d0:	2118      	movs	r1, #24
   d41d2:	4813      	ldr	r0, [pc, #76]	; (d4220 <_Z20updateThresholdValuev+0x60>)
   d41d4:	f001 f95a 	bl	d548c <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d41d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d41da:	f002 fe93 	bl	d6f04 <__aeabi_f2d>
   d41de:	4a11      	ldr	r2, [pc, #68]	; (d4224 <_Z20updateThresholdValuev+0x64>)
   d41e0:	e9cd 0100 	strd	r0, r1, [sp]
   d41e4:	2118      	movs	r1, #24
   d41e6:	4810      	ldr	r0, [pc, #64]	; (d4228 <_Z20updateThresholdValuev+0x68>)
   d41e8:	f001 f950 	bl	d548c <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d41ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d41ee:	f002 fe89 	bl	d6f04 <__aeabi_f2d>
   d41f2:	4a0e      	ldr	r2, [pc, #56]	; (d422c <_Z20updateThresholdValuev+0x6c>)
   d41f4:	e9cd 0100 	strd	r0, r1, [sp]
   d41f8:	2118      	movs	r1, #24
   d41fa:	480d      	ldr	r0, [pc, #52]	; (d4230 <_Z20updateThresholdValuev+0x70>)
   d41fc:	f001 f946 	bl	d548c <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4200:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4202:	f002 fe7f 	bl	d6f04 <__aeabi_f2d>
   d4206:	4a0b      	ldr	r2, [pc, #44]	; (d4234 <_Z20updateThresholdValuev+0x74>)
   d4208:	e9cd 0100 	strd	r0, r1, [sp]
   d420c:	2118      	movs	r1, #24
   d420e:	480a      	ldr	r0, [pc, #40]	; (d4238 <_Z20updateThresholdValuev+0x78>)
   d4210:	f001 f93c 	bl	d548c <snprintf>
} 
   d4214:	b002      	add	sp, #8
   d4216:	bd10      	pop	{r4, pc}
   d4218:	2003e2c8 	.word	0x2003e2c8
   d421c:	000d9c90 	.word	0x000d9c90
   d4220:	2003e318 	.word	0x2003e318
   d4224:	000d9ca1 	.word	0x000d9ca1
   d4228:	2003e354 	.word	0x2003e354
   d422c:	000d9cb2 	.word	0x000d9cb2
   d4230:	2003e298 	.word	0x2003e298
   d4234:	000d9cc6 	.word	0x000d9cc6
   d4238:	2003e254 	.word	0x2003e254

000d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d423c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d423e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4240:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4242:	b17c      	cbz	r4, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4244:	6863      	ldr	r3, [r4, #4]
   d4246:	3b01      	subs	r3, #1
   d4248:	6063      	str	r3, [r4, #4]
   d424a:	b95b      	cbnz	r3, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d424c:	6823      	ldr	r3, [r4, #0]
   d424e:	4620      	mov	r0, r4
   d4250:	689b      	ldr	r3, [r3, #8]
   d4252:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4254:	68a3      	ldr	r3, [r4, #8]
   d4256:	3b01      	subs	r3, #1
   d4258:	60a3      	str	r3, [r4, #8]
   d425a:	b91b      	cbnz	r3, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4620      	mov	r0, r4
   d4260:	68db      	ldr	r3, [r3, #12]
   d4262:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4264:	4628      	mov	r0, r5
   d4266:	bd38      	pop	{r3, r4, r5, pc}

000d4268 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d4268:	b530      	push	{r4, r5, lr}
   d426a:	2408      	movs	r4, #8
   d426c:	b0c7      	sub	sp, #284	; 0x11c
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d426e:	4d1f      	ldr	r5, [pc, #124]	; (d42ec <_Z9sendEventv+0x84>)
  char data[256];           
   for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4270:	f002 fb24 	bl	d68bc <_Z21__fetch_global_EEPROMv>
   d4274:	4620      	mov	r0, r4
   d4276:	2230      	movs	r2, #48	; 0x30
   d4278:	4629      	mov	r1, r5
   d427a:	3464      	adds	r4, #100	; 0x64
   d427c:	f000 feaa 	bl	d4fd4 <HAL_EEPROM_Get>
}

void sendEvent()
{
  char data[256];           
   for (int i = 0; i < 4; i++) {
   d4280:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d4284:	d1f3      	bne.n	d426e <_Z9sendEventv+0x6>
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }          
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d4286:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d428a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d428e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d4292:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4296:	e9cd 2300 	strd	r2, r3, [sp]
   d429a:	a806      	add	r0, sp, #24
   d429c:	4a14      	ldr	r2, [pc, #80]	; (d42f0 <_Z9sendEventv+0x88>)
  Particle.publish("storage-facility-hook", data, PRIVATE);
  currentCountTime = Time.now();
   d429e:	4c15      	ldr	r4, [pc, #84]	; (d42f4 <_Z9sendEventv+0x8c>)
{
  char data[256];           
   for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }          
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d42a0:	f001 f8f4 	bl	d548c <snprintf>
   d42a4:	4b14      	ldr	r3, [pc, #80]	; (d42f8 <_Z9sendEventv+0x90>)
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d42a6:	4915      	ldr	r1, [pc, #84]	; (d42fc <_Z9sendEventv+0x94>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42a8:	781b      	ldrb	r3, [r3, #0]
   d42aa:	2200      	movs	r2, #0
   d42ac:	f88d 2000 	strb.w	r2, [sp]
   d42b0:	a804      	add	r0, sp, #16
   d42b2:	aa06      	add	r2, sp, #24
   d42b4:	f7ff ff16 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42b8:	a805      	add	r0, sp, #20
   d42ba:	f7ff ffbf 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d42be:	f002 f88f 	bl	d63e0 <_ZN9TimeClass3nowEv>
   d42c2:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d42c4:	f002 fafa 	bl	d68bc <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d42c8:	7821      	ldrb	r1, [r4, #0]
   d42ca:	2003      	movs	r0, #3
   d42cc:	f000 fe7a 	bl	d4fc4 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d42d0:	f002 f88e 	bl	d63f0 <_ZN9TimeClass4hourEv>
   d42d4:	4b0a      	ldr	r3, [pc, #40]	; (d4300 <_Z9sendEventv+0x98>)
   d42d6:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d42d8:	4b0a      	ldr	r3, [pc, #40]	; (d4304 <_Z9sendEventv+0x9c>)
   d42da:	2201      	movs	r2, #1
   d42dc:	701a      	strb	r2, [r3, #0]
   d42de:	f000 fe59 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d42e2:	4b09      	ldr	r3, [pc, #36]	; (d4308 <_Z9sendEventv+0xa0>)
   d42e4:	6018      	str	r0, [r3, #0]
}
   d42e6:	b047      	add	sp, #284	; 0x11c
   d42e8:	bd30      	pop	{r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e2c8 	.word	0x2003e2c8
   d42f0:	000d9ce3 	.word	0x000d9ce3
   d42f4:	2003e294 	.word	0x2003e294
   d42f8:	2003e281 	.word	0x2003e281
   d42fc:	000d9d0b 	.word	0x000d9d0b
   d4300:	2003e2f9 	.word	0x2003e2f9
   d4304:	2003e15c 	.word	0x2003e15c
   d4308:	2003e27c 	.word	0x2003e27c

000d430c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d430c:	b530      	push	{r4, r5, lr}
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d430e:	460c      	mov	r4, r1
  dataInFlight = true;                                                                      // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4310:	b085      	sub	sp, #20
   d4312:	4d1d      	ldr	r5, [pc, #116]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x7c>)
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4314:	b951      	cbnz	r1, d432c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
   d4316:	782b      	ldrb	r3, [r5, #0]
   d4318:	2b00      	cmp	r3, #0
   d431a:	d032      	beq.n	d4382 <_Z14UbidotsHandlerPKcS0_+0x76>
      waitUntil(meterParticlePublish);
   d431c:	f7ff ff44 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4320:	4b1a      	ldr	r3, [pc, #104]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4322:	4a1b      	ldr	r2, [pc, #108]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4324:	781b      	ldrb	r3, [r3, #0]
   d4326:	f88d 4000 	strb.w	r4, [sp]
   d432a:	e023      	b.n	d4374 <_Z14UbidotsHandlerPKcS0_+0x68>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d432c:	4608      	mov	r0, r1
   d432e:	f003 f972 	bl	d7616 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4332:	38c8      	subs	r0, #200	; 0xc8
   d4334:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
   d4336:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d4338:	d813      	bhi.n	d4362 <_Z14UbidotsHandlerPKcS0_+0x56>
  {
    if (verboseMode) {
   d433a:	b173      	cbz	r3, d435a <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(meterParticlePublish);
   d433c:	f7ff ff34 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4340:	4b12      	ldr	r3, [pc, #72]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("State", "Response Received", PRIVATE);
   d4342:	4914      	ldr	r1, [pc, #80]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4344:	781b      	ldrb	r3, [r3, #0]
   d4346:	2200      	movs	r2, #0
   d4348:	f88d 2000 	strb.w	r2, [sp]
   d434c:	a802      	add	r0, sp, #8
   d434e:	4a12      	ldr	r2, [pc, #72]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4350:	f7ff fec8 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d4354:	a803      	add	r0, sp, #12
   d4356:	f7ff ff71 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    }
    dataInFlight = false;    
   d435a:	4b10      	ldr	r3, [pc, #64]	; (d439c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d435c:	2200      	movs	r2, #0
   d435e:	701a      	strb	r2, [r3, #0]
   d4360:	e00f      	b.n	d4382 <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else if (verboseMode) {
   d4362:	b173      	cbz	r3, d4382 <_Z14UbidotsHandlerPKcS0_+0x76>
    waitUntil(meterParticlePublish);      
   d4364:	f7ff ff20 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4368:	4b08      	ldr	r3, [pc, #32]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x80>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d436a:	2200      	movs	r2, #0
   d436c:	781b      	ldrb	r3, [r3, #0]
   d436e:	f88d 2000 	strb.w	r2, [sp]
   d4372:	4622      	mov	r2, r4
   d4374:	a802      	add	r0, sp, #8
   d4376:	490a      	ldr	r1, [pc, #40]	; (d43a0 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4378:	f7ff feb4 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d437c:	a803      	add	r0, sp, #12
   d437e:	f7ff ff5d 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

}
   d4382:	b005      	add	sp, #20
   d4384:	bd30      	pop	{r4, r5, pc}
   d4386:	bf00      	nop
   d4388:	2003e154 	.word	0x2003e154
   d438c:	2003e281 	.word	0x2003e281
   d4390:	000d9d21 	.word	0x000d9d21
   d4394:	000d9d48 	.word	0x000d9d48
   d4398:	000d9d36 	.word	0x000d9d36
   d439c:	2003e15c 	.word	0x2003e15c
   d43a0:	000d9d29 	.word	0x000d9d29
   d43a4:	00000000 	.word	0x00000000

000d43a8 <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d43a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  // bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  
  sensor_data.validData = false;
   d43aa:	4c59      	ldr	r4, [pc, #356]	; (d4510 <_Z16takeMeasurementsv+0x168>)

  if (sht31.readTemperature()){
   d43ac:	4859      	ldr	r0, [pc, #356]	; (d4514 <_Z16takeMeasurementsv+0x16c>)

}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d43ae:	b085      	sub	sp, #20

  // bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  
  sensor_data.validData = false;
   d43b0:	2500      	movs	r5, #0
   d43b2:	7025      	strb	r5, [r4, #0]

  if (sht31.readTemperature()){
   d43b4:	f000 fd90 	bl	d4ed8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43b8:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d43bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43c0:	f000 808e 	beq.w	d44e0 <_Z16takeMeasurementsv+0x138>
    
    int reportCycle;                                                    // Where are we in the sense and report cycle
    currentCountTime = Time.now();
   d43c4:	f002 f80c 	bl	d63e0 <_ZN9TimeClass3nowEv>
   d43c8:	4b53      	ldr	r3, [pc, #332]	; (d4518 <_Z16takeMeasurementsv+0x170>)
   d43ca:	6018      	str	r0, [r3, #0]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d43cc:	f002 f81a 	bl	d6404 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d43d0:	280f      	cmp	r0, #15
   d43d2:	d009      	beq.n	d43e8 <_Z16takeMeasurementsv+0x40>
   d43d4:	dd07      	ble.n	d43e6 <_Z16takeMeasurementsv+0x3e>
   d43d6:	281e      	cmp	r0, #30
   d43d8:	d003      	beq.n	d43e2 <_Z16takeMeasurementsv+0x3a>
   d43da:	282d      	cmp	r0, #45	; 0x2d
   d43dc:	d103      	bne.n	d43e6 <_Z16takeMeasurementsv+0x3e>
        break;  
      case 30:
        reportCycle = 1;                                                // This is the second of the sample-only periods
        break; 
      case 45:
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d43de:	2502      	movs	r5, #2
   d43e0:	e002      	b.n	d43e8 <_Z16takeMeasurementsv+0x40>
    switch (currentMinutes) {
      case 15:
        reportCycle = 0;                                                // This is the first of the sample-only periods
        break;  
      case 30:
        reportCycle = 1;                                                // This is the second of the sample-only periods
   d43e2:	2501      	movs	r5, #1
   d43e4:	e000      	b.n	d43e8 <_Z16takeMeasurementsv+0x40>
        break; 
      case 0:
        reportCycle = 3;                                                // This is the fourth of the sample-only periods
        break; 
      default:
        reportCycle = 3;  
   d43e6:	2503      	movs	r5, #3
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = sht31.readTemperature();
   d43e8:	484a      	ldr	r0, [pc, #296]	; (d4514 <_Z16takeMeasurementsv+0x16c>)
   d43ea:	f000 fd75 	bl	d4ed8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43ee:	ee10 0a10 	vmov	r0, s0
   d43f2:	f002 fd87 	bl	d6f04 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d43f6:	4a49      	ldr	r2, [pc, #292]	; (d451c <_Z16takeMeasurementsv+0x174>)
      default:
        reportCycle = 3;  
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = sht31.readTemperature();
   d43f8:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d43fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4400:	2110      	movs	r1, #16
   d4402:	4847      	ldr	r0, [pc, #284]	; (d4520 <_Z16takeMeasurementsv+0x178>)
   d4404:	f001 f842 	bl	d548c <snprintf>

    sensor_data.relativeHumidity = sht31.readHumidity();
   d4408:	4842      	ldr	r0, [pc, #264]	; (d4514 <_Z16takeMeasurementsv+0x16c>)
   d440a:	f000 fd73 	bl	d4ef4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d440e:	ee10 0a10 	vmov	r0, s0
   d4412:	f002 fd77 	bl	d6f04 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d4416:	4a43      	ldr	r2, [pc, #268]	; (d4524 <_Z16takeMeasurementsv+0x17c>)
  }

    sensor_data.temperatureInC = sht31.readTemperature();
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);

    sensor_data.relativeHumidity = sht31.readHumidity();
   d4418:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d441c:	e9cd 0100 	strd	r0, r1, [sp]
   d4420:	2110      	movs	r1, #16
   d4422:	4841      	ldr	r0, [pc, #260]	; (d4528 <_Z16takeMeasurementsv+0x180>)
   d4424:	f001 f832 	bl	d548c <snprintf>

    // Get battery voltage level
    sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
   d4428:	2021      	movs	r0, #33	; 0x21
   d442a:	f002 fa2f 	bl	d688c <analogRead>
   d442e:	f002 fd57 	bl	d6ee0 <__aeabi_i2d>
   d4432:	a335      	add	r3, pc, #212	; (adr r3, d4508 <_Z16takeMeasurementsv+0x160>)
   d4434:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4438:	f002 fdb8 	bl	d6fac <__aeabi_dmul>
   d443c:	f003 f898 	bl	d7570 <__aeabi_d2f>
   d4440:	60a0      	str	r0, [r4, #8]
    snprintf(batteryString, sizeof(batteryString), "%4.1fV", sensor_data.batteryVoltage);  // *** Volts not percent
   d4442:	f002 fd5f 	bl	d6f04 <__aeabi_f2d>
   d4446:	4a39      	ldr	r2, [pc, #228]	; (d452c <_Z16takeMeasurementsv+0x184>)
   d4448:	e9cd 0100 	strd	r0, r1, [sp]
   d444c:	2110      	movs	r1, #16
   d444e:	4838      	ldr	r0, [pc, #224]	; (d4530 <_Z16takeMeasurementsv+0x188>)
   d4450:	f001 f81c 	bl	d548c <snprintf>

    // If lower temperature threshold is crossed, Set the flag true. 
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d4454:	4b37      	ldr	r3, [pc, #220]	; (d4534 <_Z16takeMeasurementsv+0x18c>)
   d4456:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4458:	e9d3 6700 	ldrd	r6, r7, [r3]
   d445c:	f002 fd52 	bl	d6f04 <__aeabi_f2d>
   d4460:	4632      	mov	r2, r6
   d4462:	463b      	mov	r3, r7
   d4464:	f003 f832 	bl	d74cc <__aeabi_dcmpgt>
   d4468:	b110      	cbz	r0, d4470 <_Z16takeMeasurementsv+0xc8>
   d446a:	4b33      	ldr	r3, [pc, #204]	; (d4538 <_Z16takeMeasurementsv+0x190>)
   d446c:	2201      	movs	r2, #1
   d446e:	701a      	strb	r2, [r3, #0]

    // If upper temperature threshold is crossed, Set the flag true. 
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d4470:	6a20      	ldr	r0, [r4, #32]
   d4472:	f002 fd47 	bl	d6f04 <__aeabi_f2d>
   d4476:	4602      	mov	r2, r0
   d4478:	460b      	mov	r3, r1
   d447a:	4630      	mov	r0, r6
   d447c:	4639      	mov	r1, r7
   d447e:	f003 f825 	bl	d74cc <__aeabi_dcmpgt>
   d4482:	b110      	cbz	r0, d448a <_Z16takeMeasurementsv+0xe2>
   d4484:	4b2d      	ldr	r3, [pc, #180]	; (d453c <_Z16takeMeasurementsv+0x194>)
   d4486:	2201      	movs	r2, #1
   d4488:	701a      	strb	r2, [r3, #0]

    // If lower temperature threshold is crossed, Set the flag true. 
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d448a:	4b2d      	ldr	r3, [pc, #180]	; (d4540 <_Z16takeMeasurementsv+0x198>)
   d448c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d448e:	e9d3 6700 	ldrd	r6, r7, [r3]
   d4492:	f002 fd37 	bl	d6f04 <__aeabi_f2d>
   d4496:	4632      	mov	r2, r6
   d4498:	463b      	mov	r3, r7
   d449a:	f003 f817 	bl	d74cc <__aeabi_dcmpgt>
   d449e:	b110      	cbz	r0, d44a6 <_Z16takeMeasurementsv+0xfe>
   d44a0:	4b28      	ldr	r3, [pc, #160]	; (d4544 <_Z16takeMeasurementsv+0x19c>)
   d44a2:	2201      	movs	r2, #1
   d44a4:	701a      	strb	r2, [r3, #0]

    // If lower temperature threshold is crossed, Set the flag true. 
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d44a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d44a8:	f002 fd2c 	bl	d6f04 <__aeabi_f2d>
   d44ac:	4602      	mov	r2, r0
   d44ae:	460b      	mov	r3, r1
   d44b0:	4630      	mov	r0, r6
   d44b2:	4639      	mov	r1, r7
   d44b4:	f003 f80a 	bl	d74cc <__aeabi_dcmpgt>
   d44b8:	b110      	cbz	r0, d44c0 <_Z16takeMeasurementsv+0x118>
   d44ba:	4b23      	ldr	r3, [pc, #140]	; (d4548 <_Z16takeMeasurementsv+0x1a0>)
   d44bc:	2201      	movs	r2, #1
   d44be:	701a      	strb	r2, [r3, #0]

    // Indicate that this is a valid data array and store it
    sensor_data.validData = true;
   d44c0:	2601      	movs	r6, #1
   d44c2:	7026      	strb	r6, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d44c4:	f001 ff8c 	bl	d63e0 <_ZN9TimeClass3nowEv>
   d44c8:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d44ca:	f002 f9f7 	bl	d68bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d44ce:	2064      	movs	r0, #100	; 0x64
   d44d0:	4368      	muls	r0, r5
   d44d2:	3008      	adds	r0, #8
   d44d4:	2230      	movs	r2, #48	; 0x30
   d44d6:	490e      	ldr	r1, [pc, #56]	; (d4510 <_Z16takeMeasurementsv+0x168>)
   d44d8:	f000 fd84 	bl	d4fe4 <HAL_EEPROM_Put>
   d44dc:	4630      	mov	r0, r6
   d44de:	e011      	b.n	d4504 <_Z16takeMeasurementsv+0x15c>
   d44e0:	4b1a      	ldr	r3, [pc, #104]	; (d454c <_Z16takeMeasurementsv+0x1a4>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d44e2:	4a1b      	ldr	r2, [pc, #108]	; (d4550 <_Z16takeMeasurementsv+0x1a8>)
   d44e4:	781b      	ldrb	r3, [r3, #0]
   d44e6:	491b      	ldr	r1, [pc, #108]	; (d4554 <_Z16takeMeasurementsv+0x1ac>)
   d44e8:	f88d 5000 	strb.w	r5, [sp]
   d44ec:	a802      	add	r0, sp, #8
   d44ee:	f7ff fdf9 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d44f2:	a803      	add	r0, sp, #12
   d44f4:	f7ff fea2 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
  }                                                                       // Take measurement from all the sensors
  else {
        Particle.publish("Log", "Failed to perform reading :(");
        Serial.println("Failed to take reading!");
   d44f8:	f002 f87c 	bl	d65f4 <_Z16_fetch_usbserialv>
   d44fc:	4916      	ldr	r1, [pc, #88]	; (d4558 <_Z16takeMeasurementsv+0x1b0>)
   d44fe:	f001 fdf4 	bl	d60ea <_ZN5Print7printlnEPKc>
        return 0;
   d4502:	4628      	mov	r0, r5

  }
 
}
   d4504:	b005      	add	sp, #20
   d4506:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4508:	d2c10294 	.word	0xd2c10294
   d450c:	3f5263af 	.word	0x3f5263af
   d4510:	2003e2c8 	.word	0x2003e2c8
   d4514:	2003e2b4 	.word	0x2003e2b4
   d4518:	2003e294 	.word	0x2003e294
   d451c:	000d9d4e 	.word	0x000d9d4e
   d4520:	2003e26c 	.word	0x2003e26c
   d4524:	000d9d56 	.word	0x000d9d56
   d4528:	2003e330 	.word	0x2003e330
   d452c:	000d9d5e 	.word	0x000d9d5e
   d4530:	2003e340 	.word	0x2003e340
   d4534:	2003e308 	.word	0x2003e308
   d4538:	2003e310 	.word	0x2003e310
   d453c:	2003e2fa 	.word	0x2003e2fa
   d4540:	2003e288 	.word	0x2003e288
   d4544:	2003e36c 	.word	0x2003e36c
   d4548:	2003e2c0 	.word	0x2003e2c0
   d454c:	2003e2f8 	.word	0x2003e2f8
   d4550:	000d9d65 	.word	0x000d9d65
   d4554:	000d9d82 	.word	0x000d9d82
   d4558:	000d9d86 	.word	0x000d9d86

000d455c <_Z16ThresholdCrossedv>:

// Function to send sms for threshold values

bool ThresholdCrossed(){
   d455c:	b530      	push	{r4, r5, lr}
  
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d455e:	4b2d      	ldr	r3, [pc, #180]	; (d4614 <_Z16ThresholdCrossedv+0xb8>)
   d4560:	4c2d      	ldr	r4, [pc, #180]	; (d4618 <_Z16ThresholdCrossedv+0xbc>)
   d4562:	781b      	ldrb	r3, [r3, #0]
 
}

// Function to send sms for threshold values

bool ThresholdCrossed(){
   d4564:	b08d      	sub	sp, #52	; 0x34
  
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4566:	b913      	cbnz	r3, d456e <_Z16ThresholdCrossedv+0x12>
   d4568:	4b2c      	ldr	r3, [pc, #176]	; (d461c <_Z16ThresholdCrossedv+0xc0>)
   d456a:	781b      	ldrb	r3, [r3, #0]
   d456c:	b1eb      	cbz	r3, d45aa <_Z16ThresholdCrossedv+0x4e>
    char data[32];
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d456e:	4b2c      	ldr	r3, [pc, #176]	; (d4620 <_Z16ThresholdCrossedv+0xc4>)
   d4570:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4574:	2120      	movs	r1, #32
   d4576:	e9cd 2300 	strd	r2, r3, [sp]
   d457a:	a804      	add	r0, sp, #16
   d457c:	4a29      	ldr	r2, [pc, #164]	; (d4624 <_Z16ThresholdCrossedv+0xc8>)
   d457e:	f000 ff85 	bl	d548c <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d4582:	2005      	movs	r0, #5
   d4584:	f7ff fdee 	bl	d4164 <_Z8BlinkLEDi>
    // snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Temperature Threshold Crossed. Current Temperature is: %4.1f",temperatureInC);
    // Particle.publish("sms-webhook",smsString,PRIVATE);                                            // Send the webhook . 
    waitUntil(meterParticlePublish);
   d4588:	f7ff fe0e 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d458c:	4b26      	ldr	r3, [pc, #152]	; (d4628 <_Z16ThresholdCrossedv+0xcc>)
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d458e:	4927      	ldr	r1, [pc, #156]	; (d462c <_Z16ThresholdCrossedv+0xd0>)
   d4590:	781b      	ldrb	r3, [r3, #0]
   d4592:	2200      	movs	r2, #0
   d4594:	f88d 2000 	strb.w	r2, [sp]
   d4598:	a802      	add	r0, sp, #8
   d459a:	aa04      	add	r2, sp, #16
   d459c:	f7ff fda2 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d45a0:	a803      	add	r0, sp, #12
   d45a2:	f7ff fe4b 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d45a6:	2301      	movs	r3, #1
   d45a8:	7023      	strb	r3, [r4, #0]
  }

  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d45aa:	4b21      	ldr	r3, [pc, #132]	; (d4630 <_Z16ThresholdCrossedv+0xd4>)
   d45ac:	781a      	ldrb	r2, [r3, #0]
   d45ae:	461d      	mov	r5, r3
   d45b0:	b912      	cbnz	r2, d45b8 <_Z16ThresholdCrossedv+0x5c>
   d45b2:	4b20      	ldr	r3, [pc, #128]	; (d4634 <_Z16ThresholdCrossedv+0xd8>)
   d45b4:	781b      	ldrb	r3, [r3, #0]
   d45b6:	b1eb      	cbz	r3, d45f4 <_Z16ThresholdCrossedv+0x98>
    
    char humidity_data[32];
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d45b8:	4b1f      	ldr	r3, [pc, #124]	; (d4638 <_Z16ThresholdCrossedv+0xdc>)
   d45ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45be:	2120      	movs	r1, #32
   d45c0:	e9cd 2300 	strd	r2, r3, [sp]
   d45c4:	a804      	add	r0, sp, #16
   d45c6:	4a1d      	ldr	r2, [pc, #116]	; (d463c <_Z16ThresholdCrossedv+0xe0>)
   d45c8:	f000 ff60 	bl	d548c <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d45cc:	2007      	movs	r0, #7
   d45ce:	f7ff fdc9 	bl	d4164 <_Z8BlinkLEDi>
    // snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Humidity Threshold Crossed. Current Humidity is: %4.1f and Current Temperature is: %4.1f",temperatureInC,relativeHumidity);
    // Particle.publish("sms-webhook",smsString,PRIVATE);
    waitUntil(meterParticlePublish);
   d45d2:	f7ff fde9 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d45d6:	4b14      	ldr	r3, [pc, #80]	; (d4628 <_Z16ThresholdCrossedv+0xcc>)
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d45d8:	4914      	ldr	r1, [pc, #80]	; (d462c <_Z16ThresholdCrossedv+0xd0>)
   d45da:	781b      	ldrb	r3, [r3, #0]
   d45dc:	2200      	movs	r2, #0
   d45de:	f88d 2000 	strb.w	r2, [sp]
   d45e2:	a802      	add	r0, sp, #8
   d45e4:	aa04      	add	r2, sp, #16
   d45e6:	f7ff fd7d 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d45ea:	a803      	add	r0, sp, #12
   d45ec:	f7ff fe26 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d45f0:	2301      	movs	r3, #1
   d45f2:	7023      	strb	r3, [r4, #0]
  }

  thresholdTimeStamp = Time.minute();
   d45f4:	f001 ff06 	bl	d6404 <_ZN9TimeClass6minuteEv>
   d45f8:	4b11      	ldr	r3, [pc, #68]	; (d4640 <_Z16ThresholdCrossedv+0xe4>)
   d45fa:	6018      	str	r0, [r3, #0]

  if (thresholdCrossAcknowledged == true)
   d45fc:	7823      	ldrb	r3, [r4, #0]
   d45fe:	b133      	cbz	r3, d460e <_Z16ThresholdCrossedv+0xb2>
  {
    upperHumidityThresholdCrossed = false;
    lowerHumidityThresholdCrossed = false;
   d4600:	4a0c      	ldr	r2, [pc, #48]	; (d4634 <_Z16ThresholdCrossedv+0xd8>)

  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
   d4602:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d4604:	7013      	strb	r3, [r2, #0]

  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
   d4606:	702b      	strb	r3, [r5, #0]
    lowerHumidityThresholdCrossed = false;
    upperTemperatureThreshold     = false;
   d4608:	4b0e      	ldr	r3, [pc, #56]	; (d4644 <_Z16ThresholdCrossedv+0xe8>)
   d460a:	2200      	movs	r2, #0
   d460c:	601a      	str	r2, [r3, #0]
    lowerHumidityThresholdCrossed = false;
  }
  return 1;
}
   d460e:	2001      	movs	r0, #1
   d4610:	b00d      	add	sp, #52	; 0x34
   d4612:	bd30      	pop	{r4, r5, pc}
   d4614:	2003e310 	.word	0x2003e310
   d4618:	2003e290 	.word	0x2003e290
   d461c:	2003e2fa 	.word	0x2003e2fa
   d4620:	2003e308 	.word	0x2003e308
   d4624:	000d9d9e 	.word	0x000d9d9e
   d4628:	2003e281 	.word	0x2003e281
   d462c:	000d9dba 	.word	0x000d9dba
   d4630:	2003e2c0 	.word	0x2003e2c0
   d4634:	2003e36c 	.word	0x2003e36c
   d4638:	2003e288 	.word	0x2003e288
   d463c:	000d9dcb 	.word	0x000d9dcb
   d4640:	2003e2c4 	.word	0x2003e2c4
   d4644:	2003e158 	.word	0x2003e158

000d4648 <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4648:	b530      	push	{r4, r5, lr}
   d464a:	4913      	ldr	r1, [pc, #76]	; (d4698 <_Z14setVerboseMode6String+0x50>)
   d464c:	b085      	sub	sp, #20
   d464e:	4605      	mov	r5, r0
   d4650:	f001 fe0b 	bl	d626a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4654:	4604      	mov	r4, r0
   d4656:	b148      	cbz	r0, d466c <_Z14setVerboseMode6String+0x24>
  {
    verboseMode = true;
   d4658:	4b10      	ldr	r3, [pc, #64]	; (d469c <_Z14setVerboseMode6String+0x54>)
   d465a:	2401      	movs	r4, #1
   d465c:	701c      	strb	r4, [r3, #0]
   d465e:	4b10      	ldr	r3, [pc, #64]	; (d46a0 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4660:	2200      	movs	r2, #0
   d4662:	781b      	ldrb	r3, [r3, #0]
   d4664:	f88d 2000 	strb.w	r2, [sp]
   d4668:	4a0e      	ldr	r2, [pc, #56]	; (d46a4 <_Z14setVerboseMode6String+0x5c>)
   d466a:	e00b      	b.n	d4684 <_Z14setVerboseMode6String+0x3c>
   d466c:	490e      	ldr	r1, [pc, #56]	; (d46a8 <_Z14setVerboseMode6String+0x60>)
   d466e:	4628      	mov	r0, r5
   d4670:	f001 fdfb 	bl	d626a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4674:	b170      	cbz	r0, d4694 <_Z14setVerboseMode6String+0x4c>
  {
    verboseMode = false;
   d4676:	4b09      	ldr	r3, [pc, #36]	; (d469c <_Z14setVerboseMode6String+0x54>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4678:	4a0c      	ldr	r2, [pc, #48]	; (d46ac <_Z14setVerboseMode6String+0x64>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d467a:	701c      	strb	r4, [r3, #0]
   d467c:	4b08      	ldr	r3, [pc, #32]	; (d46a0 <_Z14setVerboseMode6String+0x58>)
   d467e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4680:	f88d 4000 	strb.w	r4, [sp]
   d4684:	490a      	ldr	r1, [pc, #40]	; (d46b0 <_Z14setVerboseMode6String+0x68>)
   d4686:	a802      	add	r0, sp, #8
   d4688:	f7ff fd2c 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d468c:	a803      	add	r0, sp, #12
   d468e:	f7ff fdd5 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4692:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4694:	b005      	add	sp, #20
   d4696:	bd30      	pop	{r4, r5, pc}
   d4698:	000d9f9f 	.word	0x000d9f9f
   d469c:	2003e154 	.word	0x2003e154
   d46a0:	2003e281 	.word	0x2003e281
   d46a4:	000d9de4 	.word	0x000d9de4
   d46a8:	000d9df5 	.word	0x000d9df5
   d46ac:	000d9df7 	.word	0x000d9df7
   d46b0:	000d9e07 	.word	0x000d9e07

000d46b4 <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
   d46b4:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d46b6:	4d18      	ldr	r5, [pc, #96]	; (d4718 <_Z22publishStateTransitionv+0x64>)
   d46b8:	4c18      	ldr	r4, [pc, #96]	; (d471c <_Z22publishStateTransitionv+0x68>)
   d46ba:	4919      	ldr	r1, [pc, #100]	; (d4720 <_Z22publishStateTransitionv+0x6c>)
   d46bc:	782a      	ldrb	r2, [r5, #0]
   d46be:	7820      	ldrb	r0, [r4, #0]
  else return 0;
}


void publishStateTransition(void)
{
   d46c0:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d46c2:	231a      	movs	r3, #26
   d46c4:	fb03 1202 	mla	r2, r3, r2, r1
   d46c8:	9200      	str	r2, [sp, #0]
   d46ca:	fb03 1300 	mla	r3, r3, r0, r1
   d46ce:	4a15      	ldr	r2, [pc, #84]	; (d4724 <_Z22publishStateTransitionv+0x70>)
   d46d0:	2128      	movs	r1, #40	; 0x28
   d46d2:	a804      	add	r0, sp, #16
   d46d4:	f000 feda 	bl	d548c <snprintf>
  oldState = state;
   d46d8:	782b      	ldrb	r3, [r5, #0]
   d46da:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46dc:	f000 fe2e 	bl	d533c <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d46e0:	b190      	cbz	r0, d4708 <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
   d46e2:	f7ff fd61 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d46e6:	4b10      	ldr	r3, [pc, #64]	; (d4728 <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d46e8:	4910      	ldr	r1, [pc, #64]	; (d472c <_Z22publishStateTransitionv+0x78>)
   d46ea:	781b      	ldrb	r3, [r3, #0]
   d46ec:	2200      	movs	r2, #0
   d46ee:	f88d 2000 	strb.w	r2, [sp]
   d46f2:	a802      	add	r0, sp, #8
   d46f4:	aa04      	add	r2, sp, #16
   d46f6:	f7ff fcf5 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d46fa:	a803      	add	r0, sp, #12
   d46fc:	f7ff fd9e 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4700:	f000 fc48 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4704:	4b0a      	ldr	r3, [pc, #40]	; (d4730 <_Z22publishStateTransitionv+0x7c>)
   d4706:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
   d4708:	f001 ff74 	bl	d65f4 <_Z16_fetch_usbserialv>
   d470c:	a904      	add	r1, sp, #16
   d470e:	f001 fcec 	bl	d60ea <_ZN5Print7printlnEPKc>
}
   d4712:	b00f      	add	sp, #60	; 0x3c
   d4714:	bd30      	pop	{r4, r5, pc}
   d4716:	bf00      	nop
   d4718:	2003e2b0 	.word	0x2003e2b0
   d471c:	2003e280 	.word	0x2003e280
   d4720:	2003e080 	.word	0x2003e080
   d4724:	000d9e0c 	.word	0x000d9e0c
   d4728:	2003e281 	.word	0x2003e281
   d472c:	000d9e1a 	.word	0x000d9e1a
   d4730:	2003e350 	.word	0x2003e350

000d4734 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
   d4734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
   d4736:	4c7b      	ldr	r4, [pc, #492]	; (d4924 <loop+0x1f0>)
   d4738:	7823      	ldrb	r3, [r4, #0]
   d473a:	3b01      	subs	r3, #1
   d473c:	2b05      	cmp	r3, #5
   d473e:	f200 80ee 	bhi.w	d491e <loop+0x1ea>
   d4742:	e8df f003 	tbb	[pc, r3]
   d4746:	03a8      	.short	0x03a8
   d4748:	7a591c2d 	.word	0x7a591c2d
  
  case IDLE_STATE:
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   d474c:	4b76      	ldr	r3, [pc, #472]	; (d4928 <loop+0x1f4>)
   d474e:	781b      	ldrb	r3, [r3, #0]
   d4750:	b12b      	cbz	r3, d475e <loop+0x2a>
   d4752:	4b76      	ldr	r3, [pc, #472]	; (d492c <loop+0x1f8>)
   d4754:	781b      	ldrb	r3, [r3, #0]
   d4756:	2b02      	cmp	r3, #2
   d4758:	d001      	beq.n	d475e <loop+0x2a>
   d475a:	f7ff ffab 	bl	d46b4 <_Z22publishStateTransitionv>
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d475e:	f001 fe47 	bl	d63f0 <_ZN9TimeClass4hourEv>
   d4762:	4b73      	ldr	r3, [pc, #460]	; (d4930 <loop+0x1fc>)
   d4764:	4d73      	ldr	r5, [pc, #460]	; (d4934 <loop+0x200>)
   d4766:	781b      	ldrb	r3, [r3, #0]
   d4768:	4298      	cmp	r0, r3
   d476a:	f040 80be 	bne.w	d48ea <loop+0x1b6>
   d476e:	f001 fe49 	bl	d6404 <_ZN9TimeClass6minuteEv>
   d4772:	682b      	ldr	r3, [r5, #0]
   d4774:	1ac0      	subs	r0, r0, r3
   d4776:	281d      	cmp	r0, #29
   d4778:	f300 80b7 	bgt.w	d48ea <loop+0x1b6>
   d477c:	e0ba      	b.n	d48f4 <loop+0x1c0>
      state = THRESHOLD_CROSSED;
    }
    break;

  case THRESHOLD_CROSSED:
    if (verboseMode && state != oldState) publishStateTransition();
   d477e:	4b6a      	ldr	r3, [pc, #424]	; (d4928 <loop+0x1f4>)
   d4780:	781b      	ldrb	r3, [r3, #0]
   d4782:	b12b      	cbz	r3, d4790 <loop+0x5c>
   d4784:	4b69      	ldr	r3, [pc, #420]	; (d492c <loop+0x1f8>)
   d4786:	781b      	ldrb	r3, [r3, #0]
   d4788:	2b04      	cmp	r3, #4
   d478a:	d001      	beq.n	d4790 <loop+0x5c>
   d478c:	f7ff ff92 	bl	d46b4 <_Z22publishStateTransitionv>
    
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4790:	f7ff fe0a 	bl	d43a8 <_Z16takeMeasurementsv>
   d4794:	b110      	cbz	r0, d479c <loop+0x68>
      ThresholdCrossed();
   d4796:	f7ff fee1 	bl	d455c <_Z16ThresholdCrossedv>
   d479a:	e05a      	b.n	d4852 <loop+0x11e>
      state = IDLE_STATE;
    }else
    {
      state= ERROR_STATE;
   d479c:	2301      	movs	r3, #1
   d479e:	e0bd      	b.n	d491c <loop+0x1e8>
    }
    break;

  case MEASURING_STATE:                                                                     // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
   d47a0:	4b61      	ldr	r3, [pc, #388]	; (d4928 <loop+0x1f4>)
   d47a2:	781a      	ldrb	r2, [r3, #0]
   d47a4:	461d      	mov	r5, r3
   d47a6:	b12a      	cbz	r2, d47b4 <loop+0x80>
   d47a8:	4b60      	ldr	r3, [pc, #384]	; (d492c <loop+0x1f8>)
   d47aa:	781b      	ldrb	r3, [r3, #0]
   d47ac:	2b03      	cmp	r3, #3
   d47ae:	d001      	beq.n	d47b4 <loop+0x80>
   d47b0:	f7ff ff80 	bl	d46b4 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d47b4:	f7ff fdf8 	bl	d43a8 <_Z16takeMeasurementsv>
   d47b8:	4606      	mov	r6, r0
   d47ba:	b9d8      	cbnz	r0, d47f4 <loop+0xc0>
    {
      state = ERROR_STATE;
   d47bc:	2301      	movs	r3, #1
   d47be:	7023      	strb	r3, [r4, #0]
   d47c0:	f000 fbe8 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d47c4:	4b5c      	ldr	r3, [pc, #368]	; (d4938 <loop+0x204>)
   d47c6:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d47c8:	782b      	ldrb	r3, [r5, #0]
   d47ca:	2b00      	cmp	r3, #0
   d47cc:	f000 80a7 	beq.w	d491e <loop+0x1ea>
        waitUntil(meterParticlePublish);
   d47d0:	f7ff fcea 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d47d4:	4b59      	ldr	r3, [pc, #356]	; (d493c <loop+0x208>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d47d6:	4a5a      	ldr	r2, [pc, #360]	; (d4940 <loop+0x20c>)
   d47d8:	781b      	ldrb	r3, [r3, #0]
   d47da:	495a      	ldr	r1, [pc, #360]	; (d4944 <loop+0x210>)
   d47dc:	f88d 6000 	strb.w	r6, [sp]
   d47e0:	a802      	add	r0, sp, #8
   d47e2:	f7ff fc7f 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d47e6:	a803      	add	r0, sp, #12
   d47e8:	f7ff fd28 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47ec:	f000 fbd2 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d47f0:	4b55      	ldr	r3, [pc, #340]	; (d4948 <loop+0x214>)
   d47f2:	e020      	b.n	d4836 <loop+0x102>
      }
    }
    else state = REPORTING_STATE;
   d47f4:	2305      	movs	r3, #5
   d47f6:	e091      	b.n	d491c <loop+0x1e8>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d47f8:	4b4b      	ldr	r3, [pc, #300]	; (d4928 <loop+0x1f4>)
   d47fa:	781b      	ldrb	r3, [r3, #0]
   d47fc:	b12b      	cbz	r3, d480a <loop+0xd6>
   d47fe:	4b4b      	ldr	r3, [pc, #300]	; (d492c <loop+0x1f8>)
   d4800:	781b      	ldrb	r3, [r3, #0]
   d4802:	2b05      	cmp	r3, #5
   d4804:	d001      	beq.n	d480a <loop+0xd6>
   d4806:	f7ff ff55 	bl	d46b4 <_Z22publishStateTransitionv>
   d480a:	f000 fd97 	bl	d533c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d480e:	b168      	cbz	r0, d482c <loop+0xf8>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4810:	f001 fdee 	bl	d63f0 <_ZN9TimeClass4hourEv>
   d4814:	280c      	cmp	r0, #12
   d4816:	d105      	bne.n	d4824 <loop+0xf0>
   d4818:	f000 fd90 	bl	d533c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d481c:	b110      	cbz	r0, d4824 <loop+0xf0>
            return false;
        }
        return spark_sync_time(NULL);
   d481e:	2000      	movs	r0, #0
   d4820:	f000 fdac 	bl	d537c <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4824:	f7ff fd20 	bl	d4268 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4828:	2306      	movs	r3, #6
   d482a:	e077      	b.n	d491c <loop+0x1e8>
    }
    else {
      state = ERROR_STATE;
   d482c:	2301      	movs	r3, #1
   d482e:	7023      	strb	r3, [r4, #0]
   d4830:	f000 fbb0 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4834:	4b40      	ldr	r3, [pc, #256]	; (d4938 <loop+0x204>)
   d4836:	6018      	str	r0, [r3, #0]
   d4838:	e071      	b.n	d491e <loop+0x1ea>
    }
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d483a:	4b3b      	ldr	r3, [pc, #236]	; (d4928 <loop+0x1f4>)
   d483c:	781b      	ldrb	r3, [r3, #0]
   d483e:	b12b      	cbz	r3, d484c <loop+0x118>
   d4840:	4b3a      	ldr	r3, [pc, #232]	; (d492c <loop+0x1f8>)
   d4842:	781b      	ldrb	r3, [r3, #0]
   d4844:	2b06      	cmp	r3, #6
   d4846:	d001      	beq.n	d484c <loop+0x118>
   d4848:	f7ff ff34 	bl	d46b4 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d484c:	4b3f      	ldr	r3, [pc, #252]	; (d494c <loop+0x218>)
   d484e:	781b      	ldrb	r3, [r3, #0]
   d4850:	b90b      	cbnz	r3, d4856 <loop+0x122>
    {
     state = IDLE_STATE;
   d4852:	2302      	movs	r3, #2
   d4854:	e062      	b.n	d491c <loop+0x1e8>
   d4856:	f000 fb9d 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d485a:	4b3d      	ldr	r3, [pc, #244]	; (d4950 <loop+0x21c>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	1ac0      	subs	r0, r0, r3
   d4860:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4864:	4298      	cmp	r0, r3
   d4866:	d95a      	bls.n	d491e <loop+0x1ea>
   d4868:	f000 fb94 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d486c:	4d32      	ldr	r5, [pc, #200]	; (d4938 <loop+0x204>)
   d486e:	4b33      	ldr	r3, [pc, #204]	; (d493c <loop+0x208>)
   d4870:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4872:	2200      	movs	r2, #0
   d4874:	781b      	ldrb	r3, [r3, #0]
   d4876:	4937      	ldr	r1, [pc, #220]	; (d4954 <loop+0x220>)
   d4878:	f88d 2000 	strb.w	r2, [sp]
   d487c:	a802      	add	r0, sp, #8
   d487e:	4a36      	ldr	r2, [pc, #216]	; (d4958 <loop+0x224>)
   d4880:	f7ff fc30 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d4884:	a803      	add	r0, sp, #12
   d4886:	f7ff fcd9 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d488a:	2301      	movs	r3, #1
   d488c:	7023      	strb	r3, [r4, #0]
   d488e:	f000 fb81 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4892:	6028      	str	r0, [r5, #0]
   d4894:	e043      	b.n	d491e <loop+0x1ea>
    }
    break;

  
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d4896:	4b24      	ldr	r3, [pc, #144]	; (d4928 <loop+0x1f4>)
   d4898:	781b      	ldrb	r3, [r3, #0]
   d489a:	b12b      	cbz	r3, d48a8 <loop+0x174>
   d489c:	4b23      	ldr	r3, [pc, #140]	; (d492c <loop+0x1f8>)
   d489e:	781b      	ldrb	r3, [r3, #0]
   d48a0:	2b01      	cmp	r3, #1
   d48a2:	d001      	beq.n	d48a8 <loop+0x174>
   d48a4:	f7ff ff06 	bl	d46b4 <_Z22publishStateTransitionv>
   d48a8:	f000 fb74 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d48ac:	4b22      	ldr	r3, [pc, #136]	; (d4938 <loop+0x204>)
   d48ae:	681b      	ldr	r3, [r3, #0]
   d48b0:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d48b4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d48b8:	4298      	cmp	r0, r3
   d48ba:	d930      	bls.n	d491e <loop+0x1ea>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48bc:	f000 fd3e 	bl	d533c <spark_cloud_flag_connected>
    {
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d48c0:	b160      	cbz	r0, d48dc <loop+0x1a8>
   d48c2:	4b1e      	ldr	r3, [pc, #120]	; (d493c <loop+0x208>)
   d48c4:	491f      	ldr	r1, [pc, #124]	; (d4944 <loop+0x210>)
   d48c6:	781b      	ldrb	r3, [r3, #0]
   d48c8:	2200      	movs	r2, #0
   d48ca:	f88d 2000 	strb.w	r2, [sp]
   d48ce:	a802      	add	r0, sp, #8
   d48d0:	4a22      	ldr	r2, [pc, #136]	; (d495c <loop+0x228>)
   d48d2:	f7ff fc07 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d48d6:	a803      	add	r0, sp, #12
   d48d8:	f7ff fcb0 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d48dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d48e0:	f000 fdec 	bl	d54bc <delay>
      System.reset();
   d48e4:	f001 fcfe 	bl	d62e4 <_ZN11SystemClass5resetEv>
    }
    break;
  }
}
   d48e8:	e019      	b.n	d491e <loop+0x1ea>
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
      TimePassed = Time.minute();
   d48ea:	f001 fd8b 	bl	d6404 <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d48ee:	2303      	movs	r3, #3
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
      TimePassed = Time.minute();
   d48f0:	6028      	str	r0, [r5, #0]
   d48f2:	e013      	b.n	d491c <loop+0x1e8>
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
    || upperHumidityThresholdCrossed \
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d48f4:	4b1a      	ldr	r3, [pc, #104]	; (d4960 <loop+0x22c>)
   d48f6:	781b      	ldrb	r3, [r3, #0]
   d48f8:	b943      	cbnz	r3, d490c <loop+0x1d8>
      TimePassed = Time.minute();
      state = MEASURING_STATE;                                                     
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
   d48fa:	4b1a      	ldr	r3, [pc, #104]	; (d4964 <loop+0x230>)
   d48fc:	781b      	ldrb	r3, [r3, #0]
   d48fe:	b92b      	cbnz	r3, d490c <loop+0x1d8>
    || upperHumidityThresholdCrossed \
   d4900:	4b19      	ldr	r3, [pc, #100]	; (d4968 <loop+0x234>)
   d4902:	781b      	ldrb	r3, [r3, #0]
   d4904:	b913      	cbnz	r3, d490c <loop+0x1d8>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d4906:	4b19      	ldr	r3, [pc, #100]	; (d496c <loop+0x238>)
   d4908:	781b      	ldrb	r3, [r3, #0]
   d490a:	b143      	cbz	r3, d491e <loop+0x1ea>
   d490c:	f001 fd7a 	bl	d6404 <_ZN9TimeClass6minuteEv>
   d4910:	4b17      	ldr	r3, [pc, #92]	; (d4970 <loop+0x23c>)
   d4912:	681b      	ldr	r3, [r3, #0]
   d4914:	1ac0      	subs	r0, r0, r3
   d4916:	2805      	cmp	r0, #5
   d4918:	dd01      	ble.n	d491e <loop+0x1ea>
    {
     
      state = THRESHOLD_CROSSED;
   d491a:	2304      	movs	r3, #4
   d491c:	7023      	strb	r3, [r4, #0]
      delay(2000);
      System.reset();
    }
    break;
  }
}
   d491e:	b004      	add	sp, #16
   d4920:	bd70      	pop	{r4, r5, r6, pc}
   d4922:	bf00      	nop
   d4924:	2003e2b0 	.word	0x2003e2b0
   d4928:	2003e154 	.word	0x2003e154
   d492c:	2003e280 	.word	0x2003e280
   d4930:	2003e2f9 	.word	0x2003e2f9
   d4934:	2003e284 	.word	0x2003e284
   d4938:	2003e314 	.word	0x2003e314
   d493c:	2003e281 	.word	0x2003e281
   d4940:	000d9e2b 	.word	0x000d9e2b
   d4944:	000d9d48 	.word	0x000d9d48
   d4948:	2003e350 	.word	0x2003e350
   d494c:	2003e15c 	.word	0x2003e15c
   d4950:	2003e27c 	.word	0x2003e27c
   d4954:	000d9e45 	.word	0x000d9e45
   d4958:	000da0f3 	.word	0x000da0f3
   d495c:	000d9e5e 	.word	0x000d9e5e
   d4960:	2003e2fa 	.word	0x2003e2fa
   d4964:	2003e310 	.word	0x2003e310
   d4968:	2003e2c0 	.word	0x2003e2c0
   d496c:	2003e36c 	.word	0x2003e36c
   d4970:	2003e2c4 	.word	0x2003e2c4

000d4974 <_Z17setUpperTempLimit6String>:
}

// These function will allow to change the upper and lower limits for alerting the customer. 

int setUpperTempLimit(String value)
{
   d4974:	b510      	push	{r4, lr}
   d4976:	b088      	sub	sp, #32
   d4978:	4604      	mov	r4, r0
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d497a:	f001 fca0 	bl	d62be <_ZNK6String7toFloatEv>
   d497e:	4b0f      	ldr	r3, [pc, #60]	; (d49bc <_Z17setUpperTempLimit6String+0x48>)
   d4980:	ed83 0a08 	vstr	s0, [r3, #32]
  waitUntil(meterParticlePublish);
   d4984:	f7ff fc10 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4988:	4621      	mov	r1, r4
   d498a:	a804      	add	r0, sp, #16
   d498c:	f001 fc62 	bl	d6254 <_ZN6StringC1ERKS_>
   d4990:	4b0b      	ldr	r3, [pc, #44]	; (d49c0 <_Z17setUpperTempLimit6String+0x4c>)
   d4992:	490c      	ldr	r1, [pc, #48]	; (d49c4 <_Z17setUpperTempLimit6String+0x50>)
   d4994:	781b      	ldrb	r3, [r3, #0]
   d4996:	2200      	movs	r2, #0
   d4998:	f88d 2000 	strb.w	r2, [sp]
   d499c:	a802      	add	r0, sp, #8
   d499e:	9a04      	ldr	r2, [sp, #16]
   d49a0:	f7ff fba0 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d49a4:	a803      	add	r0, sp, #12
   d49a6:	f7ff fc49 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49aa:	a804      	add	r0, sp, #16
   d49ac:	f001 fbe9 	bl	d6182 <_ZN6StringD1Ev>
  updateThresholdValue();
   d49b0:	f7ff fc06 	bl	d41c0 <_Z20updateThresholdValuev>
  return 1;
}
   d49b4:	2001      	movs	r0, #1
   d49b6:	b008      	add	sp, #32
   d49b8:	bd10      	pop	{r4, pc}
   d49ba:	bf00      	nop
   d49bc:	2003e2c8 	.word	0x2003e2c8
   d49c0:	2003e281 	.word	0x2003e281
   d49c4:	000d9e72 	.word	0x000d9e72

000d49c8 <_Z17setLowerTempLimit6String>:

int setLowerTempLimit(String value)
{
   d49c8:	b510      	push	{r4, lr}
   d49ca:	b088      	sub	sp, #32
   d49cc:	4604      	mov	r4, r0
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d49ce:	f001 fc76 	bl	d62be <_ZNK6String7toFloatEv>
   d49d2:	4b0f      	ldr	r3, [pc, #60]	; (d4a10 <_Z17setLowerTempLimit6String+0x48>)
   d49d4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  waitUntil(meterParticlePublish);
   d49d8:	f7ff fbe6 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d49dc:	4621      	mov	r1, r4
   d49de:	a804      	add	r0, sp, #16
   d49e0:	f001 fc38 	bl	d6254 <_ZN6StringC1ERKS_>
   d49e4:	4b0b      	ldr	r3, [pc, #44]	; (d4a14 <_Z17setLowerTempLimit6String+0x4c>)
   d49e6:	490c      	ldr	r1, [pc, #48]	; (d4a18 <_Z17setLowerTempLimit6String+0x50>)
   d49e8:	781b      	ldrb	r3, [r3, #0]
   d49ea:	2200      	movs	r2, #0
   d49ec:	f88d 2000 	strb.w	r2, [sp]
   d49f0:	a802      	add	r0, sp, #8
   d49f2:	9a04      	ldr	r2, [sp, #16]
   d49f4:	f7ff fb76 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d49f8:	a803      	add	r0, sp, #12
   d49fa:	f7ff fc1f 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49fe:	a804      	add	r0, sp, #16
   d4a00:	f001 fbbf 	bl	d6182 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4a04:	f7ff fbdc 	bl	d41c0 <_Z20updateThresholdValuev>

  return 1;

}
   d4a08:	2001      	movs	r0, #1
   d4a0a:	b008      	add	sp, #32
   d4a0c:	bd10      	pop	{r4, pc}
   d4a0e:	bf00      	nop
   d4a10:	2003e2c8 	.word	0x2003e2c8
   d4a14:	2003e281 	.word	0x2003e281
   d4a18:	000d9e86 	.word	0x000d9e86

000d4a1c <_Z21setUpperHumidityLimit6String>:

int setUpperHumidityLimit(String value)
{
   d4a1c:	b510      	push	{r4, lr}
   d4a1e:	b088      	sub	sp, #32
   d4a20:	4604      	mov	r4, r0
  sensor_data.upperHumidityThreshold = value.toFloat();
   d4a22:	f001 fc4c 	bl	d62be <_ZNK6String7toFloatEv>
   d4a26:	4b0f      	ldr	r3, [pc, #60]	; (d4a64 <_Z21setUpperHumidityLimit6String+0x48>)
   d4a28:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
  waitUntil(meterParticlePublish);
   d4a2c:	f7ff fbbc 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4a30:	4621      	mov	r1, r4
   d4a32:	a804      	add	r0, sp, #16
   d4a34:	f001 fc0e 	bl	d6254 <_ZN6StringC1ERKS_>
   d4a38:	4b0b      	ldr	r3, [pc, #44]	; (d4a68 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4a3a:	490c      	ldr	r1, [pc, #48]	; (d4a6c <_Z21setUpperHumidityLimit6String+0x50>)
   d4a3c:	781b      	ldrb	r3, [r3, #0]
   d4a3e:	2200      	movs	r2, #0
   d4a40:	f88d 2000 	strb.w	r2, [sp]
   d4a44:	a802      	add	r0, sp, #8
   d4a46:	9a04      	ldr	r2, [sp, #16]
   d4a48:	f7ff fb4c 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d4a4c:	a803      	add	r0, sp, #12
   d4a4e:	f7ff fbf5 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a52:	a804      	add	r0, sp, #16
   d4a54:	f001 fb95 	bl	d6182 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4a58:	f7ff fbb2 	bl	d41c0 <_Z20updateThresholdValuev>

  return 1;
}
   d4a5c:	2001      	movs	r0, #1
   d4a5e:	b008      	add	sp, #32
   d4a60:	bd10      	pop	{r4, pc}
   d4a62:	bf00      	nop
   d4a64:	2003e2c8 	.word	0x2003e2c8
   d4a68:	2003e281 	.word	0x2003e281
   d4a6c:	000d9e72 	.word	0x000d9e72

000d4a70 <_Z21setLowerHumidityLimit6String>:

int setLowerHumidityLimit(String value)
{
   d4a70:	b510      	push	{r4, lr}
   d4a72:	b088      	sub	sp, #32
   d4a74:	4604      	mov	r4, r0
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4a76:	f001 fc22 	bl	d62be <_ZNK6String7toFloatEv>
   d4a7a:	4b0f      	ldr	r3, [pc, #60]	; (d4ab8 <_Z21setLowerHumidityLimit6String+0x48>)
   d4a7c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
  waitUntil(meterParticlePublish);
   d4a80:	f7ff fb92 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4a84:	4621      	mov	r1, r4
   d4a86:	a804      	add	r0, sp, #16
   d4a88:	f001 fbe4 	bl	d6254 <_ZN6StringC1ERKS_>
   d4a8c:	4b0b      	ldr	r3, [pc, #44]	; (d4abc <_Z21setLowerHumidityLimit6String+0x4c>)
   d4a8e:	490c      	ldr	r1, [pc, #48]	; (d4ac0 <_Z21setLowerHumidityLimit6String+0x50>)
   d4a90:	781b      	ldrb	r3, [r3, #0]
   d4a92:	2200      	movs	r2, #0
   d4a94:	f88d 2000 	strb.w	r2, [sp]
   d4a98:	a802      	add	r0, sp, #8
   d4a9a:	9a04      	ldr	r2, [sp, #16]
   d4a9c:	f7ff fb22 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d4aa0:	a803      	add	r0, sp, #12
   d4aa2:	f7ff fbcb 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4aa6:	a804      	add	r0, sp, #16
   d4aa8:	f001 fb6b 	bl	d6182 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4aac:	f7ff fb88 	bl	d41c0 <_Z20updateThresholdValuev>
  return 1;
}
   d4ab0:	2001      	movs	r0, #1
   d4ab2:	b008      	add	sp, #32
   d4ab4:	bd10      	pop	{r4, pc}
   d4ab6:	bf00      	nop
   d4ab8:	2003e2c8 	.word	0x2003e2c8
   d4abc:	2003e281 	.word	0x2003e281
   d4ac0:	000d9e86 	.word	0x000d9e86

000d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4ac4:	2300      	movs	r3, #0
   d4ac6:	2204      	movs	r2, #4
   d4ac8:	f000 bc18 	b.w	d52fc <spark_variable>

000d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4acc:	4602      	mov	r2, r0
   d4ace:	4801      	ldr	r0, [pc, #4]	; (d4ad4 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4ad0:	f000 bd95 	b.w	d55fe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4ad4:	000d55d3 	.word	0x000d55d3

000d4ad8 <setup>:

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()                                                                                // Note: Disconnected Setup()
{
   d4ad8:	b570      	push	{r4, r5, r6, lr}
   d4ada:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(115200);
   d4adc:	f001 fd8a 	bl	d65f4 <_Z16_fetch_usbserialv>
   d4ae0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4ae4:	f001 fd7a 	bl	d65dc <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d4ae8:	f001 fd84 	bl	d65f4 <_Z16_fetch_usbserialv>
   d4aec:	4959      	ldr	r1, [pc, #356]	; (d4c54 <setup+0x17c>)
   d4aee:	f001 fafc 	bl	d60ea <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4af2:	4b59      	ldr	r3, [pc, #356]	; (d4c58 <setup+0x180>)
   d4af4:	aa08      	add	r2, sp, #32
   d4af6:	f103 0510 	add.w	r5, r3, #16
   d4afa:	4616      	mov	r6, r2
   d4afc:	6818      	ldr	r0, [r3, #0]
   d4afe:	6859      	ldr	r1, [r3, #4]
   d4b00:	4614      	mov	r4, r2
   d4b02:	c403      	stmia	r4!, {r0, r1}
   d4b04:	3308      	adds	r3, #8
   d4b06:	42ab      	cmp	r3, r5
   d4b08:	4622      	mov	r2, r4
   d4b0a:	d1f7      	bne.n	d4afc <setup+0x24>
   d4b0c:	8819      	ldrh	r1, [r3, #0]
   d4b0e:	789b      	ldrb	r3, [r3, #2]
   d4b10:	8021      	strh	r1, [r4, #0]
   d4b12:	222d      	movs	r2, #45	; 0x2d
   d4b14:	70a3      	strb	r3, [r4, #2]
   d4b16:	2100      	movs	r1, #0
   d4b18:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  state = IDLE_STATE;
   d4b1c:	4c4f      	ldr	r4, [pc, #316]	; (d4c5c <setup+0x184>)

void setup()                                                                                // Note: Disconnected Setup()
{
  Serial.begin(115200);
  Serial.println("SHT31 test");
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4b1e:	f002 fe94 	bl	d784a <memset>
  state = IDLE_STATE;
   d4b22:	2302      	movs	r3, #2

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4b24:	2101      	movs	r1, #1
   d4b26:	2007      	movs	r0, #7
void setup()                                                                                // Note: Disconnected Setup()
{
  Serial.begin(115200);
  Serial.println("SHT31 test");
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
  state = IDLE_STATE;
   d4b28:	7023      	strb	r3, [r4, #0]

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4b2a:	f001 fe85 	bl	d6838 <pinMode>
  pinMode(tempLED,OUTPUT);
   d4b2e:	2101      	movs	r1, #1
   d4b30:	2005      	movs	r0, #5
   d4b32:	f001 fe81 	bl	d6838 <pinMode>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4b36:	a804      	add	r0, sp, #16
   d4b38:	f000 fc08 	bl	d534c <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4b3c:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4b3e:	2300      	movs	r3, #0
   d4b40:	227d      	movs	r2, #125	; 0x7d
   d4b42:	a918      	add	r1, sp, #96	; 0x60
   d4b44:	a804      	add	r0, sp, #16
   d4b46:	f001 fba2 	bl	d628e <_ZNK6String8getBytesEPhjj>
   d4b4a:	462b      	mov	r3, r5
   d4b4c:	462a      	mov	r2, r5
   d4b4e:	4944      	ldr	r1, [pc, #272]	; (d4c60 <setup+0x188>)
   d4b50:	9501      	str	r5, [sp, #4]
   d4b52:	9500      	str	r5, [sp, #0]
   d4b54:	a818      	add	r0, sp, #96	; 0x60
   d4b56:	f000 fc09 	bl	d536c <spark_subscribe>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4b5a:	4942      	ldr	r1, [pc, #264]	; (d4c64 <setup+0x18c>)
   d4b5c:	4842      	ldr	r0, [pc, #264]	; (d4c68 <setup+0x190>)
   d4b5e:	6809      	ldr	r1, [r1, #0]
   d4b60:	462b      	mov	r3, r5
   d4b62:	2204      	movs	r2, #4
   d4b64:	f000 fbca 	bl	d52fc <spark_variable>
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
       
  Particle.variable("Release",releaseNumber);
  Particle.variable("temperature", temperatureString);
   d4b68:	4940      	ldr	r1, [pc, #256]	; (d4c6c <setup+0x194>)
   d4b6a:	4841      	ldr	r0, [pc, #260]	; (d4c70 <setup+0x198>)
   d4b6c:	f7ff ffaa 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("humidity", humidityString);
   d4b70:	4940      	ldr	r1, [pc, #256]	; (d4c74 <setup+0x19c>)
   d4b72:	4841      	ldr	r0, [pc, #260]	; (d4c78 <setup+0x1a0>)
   d4b74:	f7ff ffa6 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("temperature-Upper",upperTemperatureThresholdString);
   d4b78:	4940      	ldr	r1, [pc, #256]	; (d4c7c <setup+0x1a4>)
   d4b7a:	4841      	ldr	r0, [pc, #260]	; (d4c80 <setup+0x1a8>)
   d4b7c:	f7ff ffa2 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("temperature-lower",lowerTemperatureThresholdString);
   d4b80:	4940      	ldr	r1, [pc, #256]	; (d4c84 <setup+0x1ac>)
   d4b82:	4841      	ldr	r0, [pc, #260]	; (d4c88 <setup+0x1b0>)
   d4b84:	f7ff ff9e 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("humidity-upper",upperHumidityThresholdString);
   d4b88:	4940      	ldr	r1, [pc, #256]	; (d4c8c <setup+0x1b4>)
   d4b8a:	4841      	ldr	r0, [pc, #260]	; (d4c90 <setup+0x1b8>)
   d4b8c:	f7ff ff9a 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("humidity-lower",lowerHumidityThresholdString);
   d4b90:	4940      	ldr	r1, [pc, #256]	; (d4c94 <setup+0x1bc>)
   d4b92:	4841      	ldr	r0, [pc, #260]	; (d4c98 <setup+0x1c0>)
   d4b94:	f7ff ff96 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
   d4b98:	4940      	ldr	r1, [pc, #256]	; (d4c9c <setup+0x1c4>)
   d4b9a:	4841      	ldr	r0, [pc, #260]	; (d4ca0 <setup+0x1c8>)
   d4b9c:	f7ff ff92 	bl	d4ac4 <_ZN10CloudClass8variableIA8_cIRA16_cEEEbRKT_DpOT0_>

  
  Particle.function("Measure-Now",measureNow);
   d4ba0:	4940      	ldr	r1, [pc, #256]	; (d4ca4 <setup+0x1cc>)
   d4ba2:	4841      	ldr	r0, [pc, #260]	; (d4ca8 <setup+0x1d0>)
   d4ba4:	f7ff ff92 	bl	d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d4ba8:	4940      	ldr	r1, [pc, #256]	; (d4cac <setup+0x1d4>)
   d4baa:	4841      	ldr	r0, [pc, #260]	; (d4cb0 <setup+0x1d8>)
   d4bac:	f7ff ff8e 	bl	d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Upper-Limit",setUpperTempLimit);
   d4bb0:	4940      	ldr	r1, [pc, #256]	; (d4cb4 <setup+0x1dc>)
   d4bb2:	4841      	ldr	r0, [pc, #260]	; (d4cb8 <setup+0x1e0>)
   d4bb4:	f7ff ff8a 	bl	d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Lower-Limit",setLowerTempLimit);
   d4bb8:	4940      	ldr	r1, [pc, #256]	; (d4cbc <setup+0x1e4>)
   d4bba:	4841      	ldr	r0, [pc, #260]	; (d4cc0 <setup+0x1e8>)
   d4bbc:	f7ff ff86 	bl	d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidity-Lower-Limit",setLowerHumidityLimit);
   d4bc0:	4940      	ldr	r1, [pc, #256]	; (d4cc4 <setup+0x1ec>)
   d4bc2:	4841      	ldr	r0, [pc, #260]	; (d4cc8 <setup+0x1f0>)
   d4bc4:	f7ff ff82 	bl	d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidty-upper-Limit",setUpperHumidityLimit);
   d4bc8:	4940      	ldr	r1, [pc, #256]	; (d4ccc <setup+0x1f4>)
   d4bca:	4841      	ldr	r0, [pc, #260]	; (d4cd0 <setup+0x1f8>)
   d4bcc:	f7ff ff7e 	bl	d4acc <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>

  // And set the flags from the control register
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d4bd0:	2144      	movs	r1, #68	; 0x44
   d4bd2:	4840      	ldr	r0, [pc, #256]	; (d4cd4 <setup+0x1fc>)
   d4bd4:	f000 f8e9 	bl	d4daa <_ZN14Adafruit_SHT315beginEh>
   d4bd8:	b988      	cbnz	r0, d4bfe <setup+0x126>
   d4bda:	f000 f9db 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4bde:	4d3e      	ldr	r5, [pc, #248]	; (d4cd8 <setup+0x200>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4be0:	493e      	ldr	r1, [pc, #248]	; (d4cdc <setup+0x204>)

  // And set the flags from the control register
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
    resetTimeStamp = millis();
   d4be2:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4be4:	4630      	mov	r0, r6
   d4be6:	f002 fe6b 	bl	d78c0 <strcpy>
    Serial.println("Couldn't find SHT31");
   d4bea:	f001 fd03 	bl	d65f4 <_Z16_fetch_usbserialv>
   d4bee:	493c      	ldr	r1, [pc, #240]	; (d4ce0 <setup+0x208>)
   d4bf0:	f001 fa7b 	bl	d60ea <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d4bf4:	2301      	movs	r3, #1
   d4bf6:	7023      	strb	r3, [r4, #0]
   d4bf8:	f000 f9cc 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4bfc:	6028      	str	r0, [r5, #0]
  }

  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d4bfe:	f7ff fbd3 	bl	d43a8 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d4c02:	f7ff fadd 	bl	d41c0 <_Z20updateThresholdValuev>
 
  if(!connectToParticle()) {
   d4c06:	f7ff fa7b 	bl	d4100 <_Z17connectToParticlev>
   d4c0a:	b948      	cbnz	r0, d4c20 <setup+0x148>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d4c0c:	2301      	movs	r3, #1
   d4c0e:	7023      	strb	r3, [r4, #0]
   d4c10:	f000 f9c0 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4c14:	4b30      	ldr	r3, [pc, #192]	; (d4cd8 <setup+0x200>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4c16:	4933      	ldr	r1, [pc, #204]	; (d4ce4 <setup+0x20c>)
  takeMeasurements();                                                                      // For the benefit of monitoring the device
  updateThresholdValue();                                                                  // For checking values of each device
 
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d4c18:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4c1a:	4630      	mov	r0, r6
   d4c1c:	f002 fe50 	bl	d78c0 <strcpy>
  }

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d4c20:	4b31      	ldr	r3, [pc, #196]	; (d4ce8 <setup+0x210>)
   d4c22:	781b      	ldrb	r3, [r3, #0]
   d4c24:	b163      	cbz	r3, d4c40 <setup+0x168>
   d4c26:	4b31      	ldr	r3, [pc, #196]	; (d4cec <setup+0x214>)
   d4c28:	4931      	ldr	r1, [pc, #196]	; (d4cf0 <setup+0x218>)
   d4c2a:	781b      	ldrb	r3, [r3, #0]
   d4c2c:	2200      	movs	r2, #0
   d4c2e:	f88d 2000 	strb.w	r2, [sp]
   d4c32:	a802      	add	r0, sp, #8
   d4c34:	4632      	mov	r2, r6
   d4c36:	f7ff fa55 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.66>
   d4c3a:	a803      	add	r0, sp, #12
   d4c3c:	f7ff fafe 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c40:	f000 f9a8 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d4c44:	4b2b      	ldr	r3, [pc, #172]	; (d4cf4 <setup+0x21c>)
   d4c46:	6018      	str	r0, [r3, #0]

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
  pinMode(tempLED,OUTPUT);
  
  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4c48:	a804      	add	r0, sp, #16
   d4c4a:	f001 fa9a 	bl	d6182 <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}
   d4c4e:	b038      	add	sp, #224	; 0xe0
   d4c50:	bd70      	pop	{r4, r5, r6, pc}
   d4c52:	bf00      	nop
   d4c54:	000d9e9a 	.word	0x000d9e9a
   d4c58:	000d9c50 	.word	0x000d9c50
   d4c5c:	2003e2b0 	.word	0x2003e2b0
   d4c60:	000d430d 	.word	0x000d430d
   d4c64:	2003e150 	.word	0x2003e150
   d4c68:	000d9ea5 	.word	0x000d9ea5
   d4c6c:	2003e26c 	.word	0x2003e26c
   d4c70:	000d9ead 	.word	0x000d9ead
   d4c74:	2003e330 	.word	0x2003e330
   d4c78:	000d9eb9 	.word	0x000d9eb9
   d4c7c:	2003e318 	.word	0x2003e318
   d4c80:	000d9ec2 	.word	0x000d9ec2
   d4c84:	2003e354 	.word	0x2003e354
   d4c88:	000d9ed4 	.word	0x000d9ed4
   d4c8c:	2003e298 	.word	0x2003e298
   d4c90:	000d9ee6 	.word	0x000d9ee6
   d4c94:	2003e254 	.word	0x2003e254
   d4c98:	000d9ef5 	.word	0x000d9ef5
   d4c9c:	2003e340 	.word	0x2003e340
   d4ca0:	000d9f04 	.word	0x000d9f04
   d4ca4:	000d40b9 	.word	0x000d40b9
   d4ca8:	000d9f0c 	.word	0x000d9f0c
   d4cac:	000d4649 	.word	0x000d4649
   d4cb0:	000d9f18 	.word	0x000d9f18
   d4cb4:	000d4975 	.word	0x000d4975
   d4cb8:	000d9f25 	.word	0x000d9f25
   d4cbc:	000d49c9 	.word	0x000d49c9
   d4cc0:	000d9f36 	.word	0x000d9f36
   d4cc4:	000d4a71 	.word	0x000d4a71
   d4cc8:	000d9f47 	.word	0x000d9f47
   d4ccc:	000d4a1d 	.word	0x000d4a1d
   d4cd0:	000d9f5c 	.word	0x000d9f5c
   d4cd4:	2003e2b4 	.word	0x2003e2b4
   d4cd8:	2003e314 	.word	0x2003e314
   d4cdc:	000d9f70 	.word	0x000d9f70
   d4ce0:	000d9f8d 	.word	0x000d9f8d
   d4ce4:	000d9fa1 	.word	0x000d9fa1
   d4ce8:	2003e154 	.word	0x2003e154
   d4cec:	2003e281 	.word	0x2003e281
   d4cf0:	000d9fb3 	.word	0x000d9fb3
   d4cf4:	2003e350 	.word	0x2003e350

000d4cf8 <_GLOBAL__sub_I_sht31>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4cf8:	4b12      	ldr	r3, [pc, #72]	; (d4d44 <_GLOBAL__sub_I_sht31+0x4c>)

void getBatteryCharge()
{
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}
   d4cfa:	b570      	push	{r4, r5, r6, lr}
   d4cfc:	2400      	movs	r4, #0
   d4cfe:	701c      	strb	r4, [r3, #0]
   d4d00:	4b11      	ldr	r3, [pc, #68]	; (d4d48 <_GLOBAL__sub_I_sht31+0x50>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d02:	4d12      	ldr	r5, [pc, #72]	; (d4d4c <_GLOBAL__sub_I_sht31+0x54>)
   d4d04:	2601      	movs	r6, #1
   d4d06:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4d08:	f000 f984 	bl	d5014 <HAL_Pin_Map>
// Included Libraries
#include "math.h"
#include "adafruit-sht31.h"


Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4d0c:	4810      	ldr	r0, [pc, #64]	; (d4d50 <_GLOBAL__sub_I_sht31+0x58>)
   d4d0e:	f000 f829 	bl	d4d64 <_ZN14Adafruit_SHT31C1Ev>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d12:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d16:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d18:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d1a:	602c      	str	r4, [r5, #0]
   d4d1c:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d1e:	71ac      	strb	r4, [r5, #6]
   d4d20:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d22:	f000 faa7 	bl	d5274 <set_system_mode>


// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4d26:	4a0b      	ldr	r2, [pc, #44]	; (d4d54 <_GLOBAL__sub_I_sht31+0x5c>)
   d4d28:	490b      	ldr	r1, [pc, #44]	; (d4d58 <_GLOBAL__sub_I_sht31+0x60>)
   d4d2a:	4628      	mov	r0, r5
   d4d2c:	f001 fe1a 	bl	d6964 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4d30:	4621      	mov	r1, r4
   d4d32:	4630      	mov	r0, r6
   d4d34:	f000 faae 	bl	d5294 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d4d38:	4631      	mov	r1, r6
   d4d3a:	2004      	movs	r0, #4

void getBatteryCharge()
{
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}
   d4d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4d40:	f000 b910 	b.w	d4f64 <HAL_Feature_Set>
   d4d44:	2003e2f8 	.word	0x2003e2f8
   d4d48:	2003e281 	.word	0x2003e281
   d4d4c:	2003e2fc 	.word	0x2003e2fc
   d4d50:	2003e2b4 	.word	0x2003e2b4
   d4d54:	2003e250 	.word	0x2003e250
   d4d58:	000d40d5 	.word	0x000d40d5

000d4d5c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4d5c:	6803      	ldr	r3, [r0, #0]
   d4d5e:	b2c9      	uxtb	r1, r1
   d4d60:	689b      	ldr	r3, [r3, #8]
   d4d62:	4718      	bx	r3

000d4d64 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4d64:	4770      	bx	lr

000d4d66 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4d66:	b538      	push	{r3, r4, r5, lr}
   d4d68:	4605      	mov	r5, r0
   d4d6a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4d6c:	f001 fdd4 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4d70:	7829      	ldrb	r1, [r5, #0]
   d4d72:	f000 ff9a 	bl	d5caa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4d76:	f001 fdcf 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4d7a:	0a21      	lsrs	r1, r4, #8
   d4d7c:	f7ff ffee 	bl	d4d5c <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4d80:	f001 fdca 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4d84:	b2e1      	uxtb	r1, r4
   d4d86:	f7ff ffe9 	bl	d4d5c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4d8a:	f001 fdc5 	bl	d6918 <_Z19__fetch_global_Wirev>
}
   d4d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d4d92:	f000 bf92 	b.w	d5cba <_ZN7TwoWire15endTransmissionEv>

000d4d96 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d4d96:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4d98:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4d9c:	f7ff ffe3 	bl	d4d66 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d4da0:	200a      	movs	r0, #10
}
   d4da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d4da6:	f000 bb89 	b.w	d54bc <delay>

000d4daa <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4daa:	b538      	push	{r3, r4, r5, lr}
   d4dac:	4604      	mov	r4, r0
   d4dae:	460d      	mov	r5, r1
  Wire.begin();
   d4db0:	f001 fdb2 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4db4:	f000 ff42 	bl	d5c3c <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d4db8:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d4dba:	7025      	strb	r5, [r4, #0]
  reset();
   d4dbc:	f7ff ffeb 	bl	d4d96 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d4dc0:	2001      	movs	r0, #1
   d4dc2:	bd38      	pop	{r3, r4, r5, pc}

000d4dc4 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d4dc4:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d4dc6:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d4dc8:	4291      	cmp	r1, r2
   d4dca:	d00e      	beq.n	d4dea <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4dd0:	4058      	eors	r0, r3
   d4dd2:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4dd4:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4dd8:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4ddc:	bf18      	it	ne
   d4dde:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4de2:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4de4:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4de6:	d1f5      	bne.n	d4dd4 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4de8:	e7ee      	b.n	d4dc8 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d4dea:	4770      	bx	lr
   d4dec:	0000      	movs	r0, r0
	...

000d4df0 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4df2:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4df6:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4df8:	f7ff ffb5 	bl	d4d66 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d4dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4e00:	f000 fb5c 	bl	d54bc <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4e04:	f001 fd88 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4e08:	2206      	movs	r2, #6
   d4e0a:	7821      	ldrb	r1, [r4, #0]
   d4e0c:	f000 ff4a 	bl	d5ca4 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4e10:	f001 fd82 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4e14:	6803      	ldr	r3, [r0, #0]
   d4e16:	691b      	ldr	r3, [r3, #16]
   d4e18:	4798      	blx	r3
   d4e1a:	2806      	cmp	r0, #6
   d4e1c:	d14a      	bne.n	d4eb4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d4e1e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d4e20:	f001 fd7a 	bl	d6918 <_Z19__fetch_global_Wirev>
   d4e24:	6803      	ldr	r3, [r0, #0]
   d4e26:	695b      	ldr	r3, [r3, #20]
   d4e28:	4798      	blx	r3
   d4e2a:	f80d 0005 	strb.w	r0, [sp, r5]
   d4e2e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d4e30:	2d06      	cmp	r5, #6
   d4e32:	d1f5      	bne.n	d4e20 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4e34:	2202      	movs	r2, #2
   d4e36:	4669      	mov	r1, sp
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f7ff ffc3 	bl	d4dc4 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4e3e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d4e42:	4285      	cmp	r5, r0
   d4e44:	d136      	bne.n	d4eb4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4e46:	2202      	movs	r2, #2
   d4e48:	f10d 0103 	add.w	r1, sp, #3
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	f7ff ffb9 	bl	d4dc4 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4e52:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d4e56:	4285      	cmp	r5, r0
   d4e58:	d12c      	bne.n	d4eb4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4e5a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d4e5e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d4e62:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4e66:	ba40      	rev16	r0, r0
   d4e68:	b280      	uxth	r0, r0
   d4e6a:	f002 f829 	bl	d6ec0 <__aeabi_ui2d>
  stemp *= 175;
   d4e6e:	a318      	add	r3, pc, #96	; (adr r3, d4ed0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4e70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e74:	f002 f89a 	bl	d6fac <__aeabi_dmul>
  stemp /= 0xffff;
   d4e78:	a311      	add	r3, pc, #68	; (adr r3, d4ec0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e7e:	f002 f9bf 	bl	d7200 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d4e82:	2200      	movs	r2, #0
   d4e84:	4b10      	ldr	r3, [pc, #64]	; (d4ec8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4e86:	f001 fedd 	bl	d6c44 <__aeabi_dsub>
   d4e8a:	f002 fb71 	bl	d7570 <__aeabi_d2f>
   d4e8e:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d4e90:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d4e94:	f002 f814 	bl	d6ec0 <__aeabi_ui2d>
  shum *= 100;
   d4e98:	2200      	movs	r2, #0
   d4e9a:	4b0c      	ldr	r3, [pc, #48]	; (d4ecc <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4e9c:	f002 f886 	bl	d6fac <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d4ea0:	a307      	add	r3, pc, #28	; (adr r3, d4ec0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ea6:	f002 f9ab 	bl	d7200 <__aeabi_ddiv>
   d4eaa:	f002 fb61 	bl	d7570 <__aeabi_d2f>
   d4eae:	6060      	str	r0, [r4, #4]
  
  return true;
   d4eb0:	2001      	movs	r0, #1
   d4eb2:	e000      	b.n	d4eb6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d4eb4:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d4eb6:	b002      	add	sp, #8
   d4eb8:	bd70      	pop	{r4, r5, r6, pc}
   d4eba:	bf00      	nop
   d4ebc:	f3af 8000 	nop.w
   d4ec0:	00000000 	.word	0x00000000
   d4ec4:	40efffe0 	.word	0x40efffe0
   d4ec8:	40468000 	.word	0x40468000
   d4ecc:	40590000 	.word	0x40590000
   d4ed0:	00000000 	.word	0x00000000
   d4ed4:	4065e000 	.word	0x4065e000

000d4ed8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4ed8:	b510      	push	{r4, lr}
   d4eda:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4edc:	f7ff ff88 	bl	d4df0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4ee0:	b110      	cbz	r0, d4ee8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d4ee2:	ed94 0a02 	vldr	s0, [r4, #8]
   d4ee6:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ef0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d4eec:	bd10      	pop	{r4, pc}
   d4eee:	bf00      	nop
   d4ef0:	7fc00000 	.word	0x7fc00000

000d4ef4 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d4ef4:	b510      	push	{r4, lr}
   d4ef6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4ef8:	f7ff ff7a 	bl	d4df0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4efc:	b110      	cbz	r0, d4f04 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d4efe:	ed94 0a01 	vldr	s0, [r4, #4]
   d4f02:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d4f04:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4f0c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d4f08:	bd10      	pop	{r4, pc}
   d4f0a:	bf00      	nop
   d4f0c:	7fc00000 	.word	0x7fc00000

000d4f10 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4f10:	f000 b880 	b.w	d5014 <HAL_Pin_Map>

000d4f14 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <os_thread_is_current+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	689b      	ldr	r3, [r3, #8]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030248 	.word	0x00030248

000d4f24 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <os_thread_join+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	691b      	ldr	r3, [r3, #16]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030248 	.word	0x00030248

000d4f34 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <os_thread_cleanup+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	695b      	ldr	r3, [r3, #20]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030248 	.word	0x00030248

000d4f44 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <os_mutex_recursive_create+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030248 	.word	0x00030248

000d4f54 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <os_mutex_recursive_destroy+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030248 	.word	0x00030248

000d4f64 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_Feature_Set+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030234 	.word	0x00030234

000d4f74 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_Core_System_Reset_Ex+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030234 	.word	0x00030234

000d4f84 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_RNG_GetRandomNumber+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	685b      	ldr	r3, [r3, #4]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030218 	.word	0x00030218

000d4f94 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	695b      	ldr	r3, [r3, #20]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030218 	.word	0x00030218

000d4fa4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_RTC_Get_UnixTime+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	69db      	ldr	r3, [r3, #28]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030218 	.word	0x00030218

000d4fb4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_EEPROM_Init+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030218 	.word	0x00030218

000d4fc4 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_EEPROM_Write+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030218 	.word	0x00030218

000d4fd4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_EEPROM_Get+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030218 	.word	0x00030218

000d4fe4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_EEPROM_Put+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030218 	.word	0x00030218

000d4ff4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_RTC_Time_Is_Valid+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030218 	.word	0x00030218

000d5004 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <hal_timer_millis+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030218 	.word	0x00030218

000d5014 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_Pin_Map+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	681b      	ldr	r3, [r3, #0]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003022c 	.word	0x0003022c

000d5024 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_Validate_Pin_Function+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	685b      	ldr	r3, [r3, #4]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003022c 	.word	0x0003022c

000d5034 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_Pin_Mode+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	689b      	ldr	r3, [r3, #8]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	0003022c 	.word	0x0003022c

000d5044 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_Get_Pin_Mode+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	68db      	ldr	r3, [r3, #12]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	0003022c 	.word	0x0003022c

000d5054 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_GPIO_Write+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	691b      	ldr	r3, [r3, #16]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	0003022c 	.word	0x0003022c

000d5064 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_ADC_Read+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003022c 	.word	0x0003022c

000d5074 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_I2C_Begin+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	68db      	ldr	r3, [r3, #12]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030228 	.word	0x00030228

000d5084 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_I2C_Begin_Transmission+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	699b      	ldr	r3, [r3, #24]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030228 	.word	0x00030228

000d5094 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_I2C_End_Transmission+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	69db      	ldr	r3, [r3, #28]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030228 	.word	0x00030228

000d50a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_I2C_Write_Data+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6a1b      	ldr	r3, [r3, #32]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030228 	.word	0x00030228

000d50b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_I2C_Available_Data+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030228 	.word	0x00030228

000d50c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_I2C_Read_Data+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030228 	.word	0x00030228

000d50d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_I2C_Peek_Data+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030228 	.word	0x00030228

000d50e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_I2C_Flush_Data+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030228 	.word	0x00030228

000d50f4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_I2C_Is_Enabled+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030228 	.word	0x00030228

000d5104 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <HAL_I2C_Init+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030228 	.word	0x00030228

000d5114 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_I2C_Request_Data_Ex+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030228 	.word	0x00030228

000d5124 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <inet_inet_ntop+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	695b      	ldr	r3, [r3, #20]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030264 	.word	0x00030264

000d5134 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <netdb_freeaddrinfo+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	689b      	ldr	r3, [r3, #8]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030268 	.word	0x00030268

000d5144 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <netdb_getaddrinfo+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	68db      	ldr	r3, [r3, #12]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030268 	.word	0x00030268

000d5154 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_SPI_Init+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	69db      	ldr	r3, [r3, #28]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030230 	.word	0x00030230

000d5164 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_SPI_Is_Enabled+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6a1b      	ldr	r3, [r3, #32]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030230 	.word	0x00030230

000d5174 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_USART_Init+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	681b      	ldr	r3, [r3, #0]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003023c 	.word	0x0003023c

000d5184 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USART_Write_Data+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	68db      	ldr	r3, [r3, #12]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003023c 	.word	0x0003023c

000d5194 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USART_Available_Data+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	691b      	ldr	r3, [r3, #16]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003023c 	.word	0x0003023c

000d51a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_USART_Read_Data+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	695b      	ldr	r3, [r3, #20]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003023c 	.word	0x0003023c

000d51b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_USART_Peek_Data+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	699b      	ldr	r3, [r3, #24]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003023c 	.word	0x0003023c

000d51c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <HAL_USART_Flush_Data+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	69db      	ldr	r3, [r3, #28]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003023c 	.word	0x0003023c

000d51d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <HAL_USART_Is_Enabled+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6a1b      	ldr	r3, [r3, #32]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	0003023c 	.word	0x0003023c

000d51e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <HAL_USART_Available_Data_For_Write+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	0003023c 	.word	0x0003023c

000d51f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <HAL_USB_USART_Init+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	681b      	ldr	r3, [r3, #0]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	0003024c 	.word	0x0003024c

000d5204 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <HAL_USB_USART_Begin+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	685b      	ldr	r3, [r3, #4]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	0003024c 	.word	0x0003024c

000d5214 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <HAL_USB_USART_Available_Data+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	691b      	ldr	r3, [r3, #16]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003024c 	.word	0x0003024c

000d5224 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	695b      	ldr	r3, [r3, #20]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003024c 	.word	0x0003024c

000d5234 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <HAL_USB_USART_Receive_Data+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	699b      	ldr	r3, [r3, #24]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003024c 	.word	0x0003024c

000d5244 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <HAL_USB_USART_Send_Data+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	69db      	ldr	r3, [r3, #28]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003024c 	.word	0x0003024c

000d5254 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <HAL_USB_USART_Flush_Data+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6a1b      	ldr	r3, [r3, #32]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003024c 	.word	0x0003024c

000d5264 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <system_mode+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	681b      	ldr	r3, [r3, #0]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030220 	.word	0x00030220

000d5274 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <set_system_mode+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	685b      	ldr	r3, [r3, #4]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030220 	.word	0x00030220

000d5284 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <system_delay_ms+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	695b      	ldr	r3, [r3, #20]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030220 	.word	0x00030220

000d5294 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <system_thread_set_state+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030220 	.word	0x00030220

000d52a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <application_thread_current+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030220 	.word	0x00030220

000d52b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <application_thread_invoke+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030220 	.word	0x00030220

000d52c4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <system_thread_get_state+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030220 	.word	0x00030220

000d52d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b03      	ldr	r3, [pc, #12]	; (d52e4 <system_ctrl_set_app_request_handler+0x10>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d52de:	9301      	str	r3, [sp, #4]
   d52e0:	bd08      	pop	{r3, pc}
   d52e2:	0000      	.short	0x0000
   d52e4:	00030220 	.word	0x00030220

000d52e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b03      	ldr	r3, [pc, #12]	; (d52f8 <system_ctrl_set_result+0x10>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d52f2:	9301      	str	r3, [sp, #4]
   d52f4:	bd08      	pop	{r3, pc}
   d52f6:	0000      	.short	0x0000
   d52f8:	00030220 	.word	0x00030220

000d52fc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <spark_variable+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	681b      	ldr	r3, [r3, #0]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030244 	.word	0x00030244

000d530c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <spark_function+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	685b      	ldr	r3, [r3, #4]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030244 	.word	0x00030244

000d531c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <spark_process+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	689b      	ldr	r3, [r3, #8]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030244 	.word	0x00030244

000d532c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <spark_cloud_flag_connect+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	68db      	ldr	r3, [r3, #12]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030244 	.word	0x00030244

000d533c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <spark_cloud_flag_connected+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	695b      	ldr	r3, [r3, #20]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030244 	.word	0x00030244

000d534c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <spark_deviceID+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	69db      	ldr	r3, [r3, #28]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030244 	.word	0x00030244

000d535c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <spark_send_event+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6a1b      	ldr	r3, [r3, #32]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030244 	.word	0x00030244

000d536c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <spark_subscribe+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030244 	.word	0x00030244

000d537c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <spark_sync_time+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030244 	.word	0x00030244

000d538c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <spark_sync_time_pending+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030244 	.word	0x00030244

000d539c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030244 	.word	0x00030244

000d53ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <network_connect+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	685b      	ldr	r3, [r3, #4]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030240 	.word	0x00030240

000d53bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <network_connecting+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	689b      	ldr	r3, [r3, #8]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030240 	.word	0x00030240

000d53cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <network_disconnect+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	68db      	ldr	r3, [r3, #12]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030240 	.word	0x00030240

000d53dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <network_ready+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	691b      	ldr	r3, [r3, #16]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030240 	.word	0x00030240

000d53ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <network_on+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	695b      	ldr	r3, [r3, #20]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030240 	.word	0x00030240

000d53fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <network_off+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	699b      	ldr	r3, [r3, #24]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030240 	.word	0x00030240

000d540c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <network_listen+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	69db      	ldr	r3, [r3, #28]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030240 	.word	0x00030240

000d541c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <network_listening+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6a1b      	ldr	r3, [r3, #32]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030240 	.word	0x00030240

000d542c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <network_set_listen_timeout+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030240 	.word	0x00030240

000d543c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <network_get_listen_timeout+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030240 	.word	0x00030240

000d544c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <malloc+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	681b      	ldr	r3, [r3, #0]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	0003021c 	.word	0x0003021c

000d545c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <free+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	685b      	ldr	r3, [r3, #4]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003021c 	.word	0x0003021c

000d546c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <realloc+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	689b      	ldr	r3, [r3, #8]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003021c 	.word	0x0003021c

000d547c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <siscanf+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	699b      	ldr	r3, [r3, #24]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003021c 	.word	0x0003021c

000d548c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <snprintf+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003021c 	.word	0x0003021c

000d549c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <abort+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003021c 	.word	0x0003021c

000d54ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <_malloc_r+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003021c 	.word	0x0003021c

000d54bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d54bc:	2100      	movs	r1, #0
   d54be:	f7ff bee1 	b.w	d5284 <system_delay_ms>

000d54c2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d54c2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54c4:	6883      	ldr	r3, [r0, #8]
   d54c6:	4604      	mov	r4, r0
   d54c8:	b90b      	cbnz	r3, d54ce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d54ca:	f001 fa6c 	bl	d69a6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ce:	68c3      	ldr	r3, [r0, #12]
   d54d0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d54d2:	68a3      	ldr	r3, [r4, #8]
   d54d4:	b11b      	cbz	r3, d54de <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54d6:	2203      	movs	r2, #3
   d54d8:	4621      	mov	r1, r4
   d54da:	4620      	mov	r0, r4
   d54dc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d54de:	4620      	mov	r0, r4
   d54e0:	2110      	movs	r1, #16
}
   d54e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d54e6:	f001 ba42 	b.w	d696e <_ZdlPvj>

000d54ea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d54ea:	b510      	push	{r4, lr}
   d54ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d54ee:	6800      	ldr	r0, [r0, #0]
   d54f0:	b108      	cbz	r0, d54f6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d54f2:	f7ff fd2f 	bl	d4f54 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d54f6:	4620      	mov	r0, r4
   d54f8:	bd10      	pop	{r4, pc}

000d54fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d54fa:	680b      	ldr	r3, [r1, #0]
   d54fc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d54fe:	b113      	cbz	r3, d5506 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5500:	685a      	ldr	r2, [r3, #4]
   d5502:	3201      	adds	r2, #1
   d5504:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5506:	4770      	bx	lr

000d5508 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5508:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d550a:	4c06      	ldr	r4, [pc, #24]	; (d5524 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d550c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d550e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5510:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5512:	f7ff fd17 	bl	d4f44 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5516:	4620      	mov	r0, r4
   d5518:	4a03      	ldr	r2, [pc, #12]	; (d5528 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d551a:	4904      	ldr	r1, [pc, #16]	; (d552c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5520:	f001 ba20 	b.w	d6964 <__aeabi_atexit>
   d5524:	2003e370 	.word	0x2003e370
   d5528:	2003e250 	.word	0x2003e250
   d552c:	000d54eb 	.word	0x000d54eb

000d5530 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5530:	4770      	bx	lr

000d5532 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5532:	2000      	movs	r0, #0
   d5534:	4770      	bx	lr

000d5536 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5536:	b510      	push	{r4, lr}
   d5538:	2110      	movs	r1, #16
   d553a:	4604      	mov	r4, r0
   d553c:	f001 fa17 	bl	d696e <_ZdlPvj>
   d5540:	4620      	mov	r0, r4
   d5542:	bd10      	pop	{r4, pc}

000d5544 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5544:	b508      	push	{r3, lr}
      { delete this; }
   d5546:	b108      	cbz	r0, d554c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5548:	f7ff fff5 	bl	d5536 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d554c:	bd08      	pop	{r3, pc}

000d554e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d554e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5550:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5552:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5554:	b113      	cbz	r3, d555c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5556:	2203      	movs	r2, #3
   d5558:	4601      	mov	r1, r0
   d555a:	4798      	blx	r3
    }
   d555c:	4620      	mov	r0, r4
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5560:	2200      	movs	r2, #0
   d5562:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5564:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5566:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d556a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d556c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5570:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5572:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5574:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5576:	680c      	ldr	r4, [r1, #0]
   d5578:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d557a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d557c:	bd10      	pop	{r4, pc}

000d557e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d557e:	b510      	push	{r4, lr}
   d5580:	4604      	mov	r4, r0
    free((void*)msg_);
   d5582:	6800      	ldr	r0, [r0, #0]
   d5584:	f7ff ff6a 	bl	d545c <free>
}
   d5588:	4620      	mov	r0, r4
   d558a:	bd10      	pop	{r4, pc}

000d558c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d558c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d558e:	68c4      	ldr	r4, [r0, #12]
   d5590:	b1f4      	cbz	r4, d55d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5592:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5594:	2b02      	cmp	r3, #2
   d5596:	d103      	bne.n	d55a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5598:	f104 000c 	add.w	r0, r4, #12
   d559c:	f7ff ffef 	bl	d557e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d55a0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d55a2:	b135      	cbz	r5, d55b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55a4:	4628      	mov	r0, r5
   d55a6:	f7ff ffd2 	bl	d554e <_ZNSt14_Function_baseD1Ev>
   d55aa:	2110      	movs	r1, #16
   d55ac:	4628      	mov	r0, r5
   d55ae:	f001 f9de 	bl	d696e <_ZdlPvj>
   d55b2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d55b4:	b135      	cbz	r5, d55c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d55b6:	4628      	mov	r0, r5
   d55b8:	f7ff ffc9 	bl	d554e <_ZNSt14_Function_baseD1Ev>
   d55bc:	2110      	movs	r1, #16
   d55be:	4628      	mov	r0, r5
   d55c0:	f001 f9d5 	bl	d696e <_ZdlPvj>
   d55c4:	4620      	mov	r0, r4
   d55c6:	2114      	movs	r1, #20
   d55c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d55cc:	f001 b9cf 	b.w	d696e <_ZdlPvj>
   d55d0:	bd38      	pop	{r3, r4, r5, pc}

000d55d2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d55d2:	b510      	push	{r4, lr}
   d55d4:	b088      	sub	sp, #32
   d55d6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d55d8:	4668      	mov	r0, sp
   d55da:	f000 fe19 	bl	d6210 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d55de:	4669      	mov	r1, sp
   d55e0:	a804      	add	r0, sp, #16
   d55e2:	f000 fe37 	bl	d6254 <_ZN6StringC1ERKS_>
   d55e6:	a804      	add	r0, sp, #16
   d55e8:	47a0      	blx	r4
   d55ea:	4604      	mov	r4, r0
   d55ec:	a804      	add	r0, sp, #16
   d55ee:	f000 fdc8 	bl	d6182 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d55f2:	4668      	mov	r0, sp
   d55f4:	f000 fdc5 	bl	d6182 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d55f8:	4620      	mov	r0, r4
   d55fa:	b008      	add	sp, #32
   d55fc:	bd10      	pop	{r4, pc}

000d55fe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d55fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5600:	2410      	movs	r4, #16
   d5602:	b085      	sub	sp, #20
   d5604:	4607      	mov	r7, r0
   d5606:	460e      	mov	r6, r1
   d5608:	4615      	mov	r5, r2
   d560a:	2100      	movs	r1, #0
   d560c:	4622      	mov	r2, r4
   d560e:	4668      	mov	r0, sp
   d5610:	f002 f91b 	bl	d784a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5614:	2200      	movs	r2, #0
   d5616:	4669      	mov	r1, sp
   d5618:	4610      	mov	r0, r2
         size = sizeof(*this);
   d561a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d561e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5620:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5622:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5624:	f7ff fe72 	bl	d530c <spark_function>
}
   d5628:	b005      	add	sp, #20
   d562a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d562c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d562c:	b513      	push	{r0, r1, r4, lr}
   d562e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5630:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5634:	2300      	movs	r3, #0
   d5636:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5638:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d563a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d563c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d563e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5640:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5642:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5644:	f7fe fdfa 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5648:	4620      	mov	r0, r4
   d564a:	b002      	add	sp, #8
   d564c:	bd10      	pop	{r4, pc}

000d564e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d564e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5650:	460c      	mov	r4, r1
   d5652:	ad02      	add	r5, sp, #8
   d5654:	f854 3b04 	ldr.w	r3, [r4], #4
   d5658:	f845 3d08 	str.w	r3, [r5, #-8]!
   d565c:	4606      	mov	r6, r0
   d565e:	460f      	mov	r7, r1
   d5660:	a801      	add	r0, sp, #4
   d5662:	4621      	mov	r1, r4
   d5664:	f7ff ff49 	bl	d54fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5668:	4629      	mov	r1, r5
   d566a:	4630      	mov	r0, r6
   d566c:	f7ff ffde 	bl	d562c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5670:	a801      	add	r0, sp, #4
   d5672:	f7fe fde3 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5676:	4620      	mov	r0, r4
   d5678:	f7fe fde0 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d567c:	4638      	mov	r0, r7
   d567e:	2108      	movs	r1, #8
   d5680:	f001 f975 	bl	d696e <_ZdlPvj>
        return p;
    }
   d5684:	4630      	mov	r0, r6
   d5686:	b003      	add	sp, #12
   d5688:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d568a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d568a:	b513      	push	{r0, r1, r4, lr}
   d568c:	460b      	mov	r3, r1
   d568e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5690:	c803      	ldmia	r0, {r0, r1}
   d5692:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5696:	e893 0003 	ldmia.w	r3, {r0, r1}
   d569a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d569e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d56a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d56a6:	b002      	add	sp, #8
   d56a8:	bd10      	pop	{r4, pc}
	...

000d56ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d56ac:	b538      	push	{r3, r4, r5, lr}
   d56ae:	2300      	movs	r3, #0
   d56b0:	4604      	mov	r4, r0
   d56b2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d56b4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d56b6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d56b8:	f7fe fcef 	bl	d409a <_Znwj>
   d56bc:	b128      	cbz	r0, d56ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d56be:	2301      	movs	r3, #1
   d56c0:	6043      	str	r3, [r0, #4]
   d56c2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d56c4:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d56c6:	6003      	str	r3, [r0, #0]
   d56c8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d56ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d56cc:	4620      	mov	r0, r4
   d56ce:	bd38      	pop	{r3, r4, r5, pc}
   d56d0:	000d9fc8 	.word	0x000d9fc8

000d56d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56d4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d56d6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56d8:	b90a      	cbnz	r2, d56de <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d56da:	f001 f964 	bl	d69a6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56de:	68c3      	ldr	r3, [r0, #12]
    }
   d56e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56e4:	4718      	bx	r3

000d56e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d56e6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56e8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d56ea:	f100 0110 	add.w	r1, r0, #16
   d56ee:	f7ff fff1 	bl	d56d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d56f2:	bd08      	pop	{r3, pc}

000d56f4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56f4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d56f6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56f8:	b90a      	cbnz	r2, d56fe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d56fa:	f001 f954 	bl	d69a6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56fe:	68c3      	ldr	r3, [r0, #12]
    }
   d5700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5704:	4718      	bx	r3

000d5706 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5706:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5708:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d570a:	f100 0110 	add.w	r1, r0, #16
   d570e:	f7ff fff1 	bl	d56f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5712:	bd08      	pop	{r3, pc}

000d5714 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5714:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5716:	2300      	movs	r3, #0
   d5718:	6083      	str	r3, [r0, #8]
   d571a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d571c:	4604      	mov	r4, r0
   d571e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5720:	b12b      	cbz	r3, d572e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5722:	2202      	movs	r2, #2
   d5724:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5726:	68eb      	ldr	r3, [r5, #12]
   d5728:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d572a:	68ab      	ldr	r3, [r5, #8]
   d572c:	60a3      	str	r3, [r4, #8]
	}
    }
   d572e:	4620      	mov	r0, r4
   d5730:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5734:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5736:	b089      	sub	sp, #36	; 0x24
   d5738:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d573a:	4668      	mov	r0, sp
   d573c:	f7ff ff10 	bl	d5560 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5740:	2300      	movs	r3, #0
   d5742:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5746:	f04f 0202 	mov.w	r2, #2
   d574a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d574e:	2b00      	cmp	r3, #0
   d5750:	d103      	bne.n	d575a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5752:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5756:	2900      	cmp	r1, #0
   d5758:	d1f7      	bne.n	d574a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d575a:	d002      	beq.n	d5762 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d575c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5760:	e063      	b.n	d582a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5762:	f114 050c 	adds.w	r5, r4, #12
   d5766:	d003      	beq.n	d5770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5768:	4669      	mov	r1, sp
   d576a:	4628      	mov	r0, r5
   d576c:	f7ff fef8 	bl	d5560 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5770:	f3bf 8f5f 	dmb	sy
   d5774:	2301      	movs	r3, #1
   d5776:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5778:	2000      	movs	r0, #0
   d577a:	f104 0308 	add.w	r3, r4, #8
   d577e:	f3bf 8f5f 	dmb	sy
   d5782:	e853 6f00 	ldrex	r6, [r3]
   d5786:	e843 0200 	strex	r2, r0, [r3]
   d578a:	2a00      	cmp	r2, #0
   d578c:	d1f9      	bne.n	d5782 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d578e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5792:	2e00      	cmp	r6, #0
   d5794:	d049      	beq.n	d582a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5796:	f7ff fd85 	bl	d52a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d579a:	b120      	cbz	r0, d57a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d579c:	4629      	mov	r1, r5
   d579e:	4630      	mov	r0, r6
   d57a0:	f7ff ff98 	bl	d56d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d57a4:	e03a      	b.n	d581c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d57a6:	4631      	mov	r1, r6
   d57a8:	a802      	add	r0, sp, #8
   d57aa:	f7ff ffb3 	bl	d5714 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d57ae:	68e0      	ldr	r0, [r4, #12]
   d57b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d57b4:	b108      	cbz	r0, d57ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d57b6:	f002 f88b 	bl	d78d0 <strdup>
   d57ba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d57bc:	2010      	movs	r0, #16
   d57be:	f8ad 501c 	strh.w	r5, [sp, #28]
   d57c2:	f7fe fc6a 	bl	d409a <_Znwj>
   d57c6:	4605      	mov	r5, r0
   d57c8:	b1e8      	cbz	r0, d5806 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57ca:	2700      	movs	r7, #0
   d57cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d57ce:	2018      	movs	r0, #24
   d57d0:	f7fe fc63 	bl	d409a <_Znwj>
   d57d4:	4604      	mov	r4, r0
   d57d6:	b188      	cbz	r0, d57fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57d8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57da:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57dc:	a802      	add	r0, sp, #8
   d57de:	f7ff ff54 	bl	d568a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57e2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57e8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d57ea:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57ec:	a906      	add	r1, sp, #24
   d57ee:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d57f0:	60e3      	str	r3, [r4, #12]
   d57f2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57f6:	9205      	str	r2, [sp, #20]
   d57f8:	f7ff feb2 	bl	d5560 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d57fc:	4b0d      	ldr	r3, [pc, #52]	; (d5834 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d57fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5800:	4b0d      	ldr	r3, [pc, #52]	; (d5838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5802:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5804:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5806:	a806      	add	r0, sp, #24
   d5808:	f7ff feb9 	bl	d557e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d580c:	a802      	add	r0, sp, #8
   d580e:	f7ff fe9e 	bl	d554e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5812:	2200      	movs	r2, #0
   d5814:	4629      	mov	r1, r5
   d5816:	4809      	ldr	r0, [pc, #36]	; (d583c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5818:	f7ff fd4c 	bl	d52b4 <application_thread_invoke>
   d581c:	4630      	mov	r0, r6
   d581e:	f7ff fe96 	bl	d554e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5822:	2110      	movs	r1, #16
   d5824:	4630      	mov	r0, r6
   d5826:	f001 f8a2 	bl	d696e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d582a:	4668      	mov	r0, sp
   d582c:	f7ff fea7 	bl	d557e <_ZN8particle5ErrorD1Ev>
    }
   d5830:	b009      	add	sp, #36	; 0x24
   d5832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5834:	000d56e7 	.word	0x000d56e7
   d5838:	000d595d 	.word	0x000d595d
   d583c:	000d54c3 	.word	0x000d54c3

000d5840 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5844:	b08b      	sub	sp, #44	; 0x2c
   d5846:	4606      	mov	r6, r0
   d5848:	460f      	mov	r7, r1
   d584a:	4690      	mov	r8, r2
   d584c:	4699      	mov	r9, r3
   d584e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5852:	f7ff fd73 	bl	d533c <spark_cloud_flag_connected>
   d5856:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5858:	4683      	mov	fp, r0
   d585a:	bb30      	cbnz	r0, d58aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d585c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5860:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5862:	a905      	add	r1, sp, #20
   d5864:	4628      	mov	r0, r5
   d5866:	f8ad 3018 	strh.w	r3, [sp, #24]
   d586a:	f7ff fe79 	bl	d5560 <_ZN8particle5ErrorC1EOS0_>
   d586e:	2014      	movs	r0, #20
   d5870:	f7fe fc13 	bl	d409a <_Znwj>
   d5874:	4604      	mov	r4, r0
   d5876:	b158      	cbz	r0, d5890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5878:	2302      	movs	r3, #2
   d587a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d587c:	2301      	movs	r3, #1
   d587e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5880:	f8c0 b004 	str.w	fp, [r0, #4]
   d5884:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5888:	4629      	mov	r1, r5
   d588a:	300c      	adds	r0, #12
   d588c:	f7ff fe68 	bl	d5560 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5890:	4630      	mov	r0, r6
   d5892:	4621      	mov	r1, r4
   d5894:	f840 4b04 	str.w	r4, [r0], #4
   d5898:	f7ff ff08 	bl	d56ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d589c:	4628      	mov	r0, r5
   d589e:	f7ff fe6e 	bl	d557e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d58a2:	a805      	add	r0, sp, #20
   d58a4:	f7ff fe6b 	bl	d557e <_ZN8particle5ErrorD1Ev>
   d58a8:	e052      	b.n	d5950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d58aa:	2400      	movs	r4, #0
   d58ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d58ae:	2014      	movs	r0, #20
   d58b0:	606c      	str	r4, [r5, #4]
   d58b2:	60ac      	str	r4, [r5, #8]
   d58b4:	9307      	str	r3, [sp, #28]
   d58b6:	f7fe fbf0 	bl	d409a <_Znwj>
   d58ba:	4601      	mov	r1, r0
   d58bc:	b118      	cbz	r0, d58c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d58be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d58c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d58c2:	6044      	str	r4, [r0, #4]
   d58c4:	6084      	str	r4, [r0, #8]
   d58c6:	a804      	add	r0, sp, #16
   d58c8:	9103      	str	r1, [sp, #12]
   d58ca:	f7ff feef 	bl	d56ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d58ce:	4b22      	ldr	r3, [pc, #136]	; (d5958 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d58d0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d58d2:	2008      	movs	r0, #8
   d58d4:	f7fe fbe1 	bl	d409a <_Znwj>
   d58d8:	4604      	mov	r4, r0
   d58da:	b128      	cbz	r0, d58e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58dc:	9b03      	ldr	r3, [sp, #12]
   d58de:	f840 3b04 	str.w	r3, [r0], #4
   d58e2:	a904      	add	r1, sp, #16
   d58e4:	f7ff fe09 	bl	d54fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d58e8:	9500      	str	r5, [sp, #0]
   d58ea:	fa5f f38a 	uxtb.w	r3, sl
   d58ee:	464a      	mov	r2, r9
   d58f0:	4641      	mov	r1, r8
   d58f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d58f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d58f6:	f7ff fd31 	bl	d535c <spark_send_event>
   d58fa:	b920      	cbnz	r0, d5906 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d58fc:	9b03      	ldr	r3, [sp, #12]
   d58fe:	785b      	ldrb	r3, [r3, #1]
   d5900:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5904:	b183      	cbz	r3, d5928 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5906:	9b03      	ldr	r3, [sp, #12]
   d5908:	9305      	str	r3, [sp, #20]
   d590a:	a904      	add	r1, sp, #16
   d590c:	a806      	add	r0, sp, #24
   d590e:	f7ff fdf4 	bl	d54fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5912:	a905      	add	r1, sp, #20
   d5914:	4630      	mov	r0, r6
   d5916:	f7ff fe89 	bl	d562c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d591a:	a806      	add	r0, sp, #24
   d591c:	f7fe fc8e 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5920:	a804      	add	r0, sp, #16
   d5922:	f7fe fc8b 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5926:	e013      	b.n	d5950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5928:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d592c:	a905      	add	r1, sp, #20
   d592e:	a803      	add	r0, sp, #12
   d5930:	9205      	str	r2, [sp, #20]
   d5932:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5936:	f7ff fefd 	bl	d5734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d593a:	a805      	add	r0, sp, #20
   d593c:	f7ff fe1f 	bl	d557e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5940:	a805      	add	r0, sp, #20
   d5942:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5944:	f7ff fe83 	bl	d564e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5948:	a806      	add	r0, sp, #24
   d594a:	f7fe fc77 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d594e:	e7da      	b.n	d5906 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5950:	4630      	mov	r0, r6
   d5952:	b00b      	add	sp, #44	; 0x2c
   d5954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5958:	000d5acd 	.word	0x000d5acd

000d595c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d595c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d595e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5960:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5962:	d006      	beq.n	d5972 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5964:	2a03      	cmp	r2, #3
   d5966:	d017      	beq.n	d5998 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5968:	2a01      	cmp	r2, #1
   d596a:	d122      	bne.n	d59b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d596c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d596e:	6003      	str	r3, [r0, #0]
	      break;
   d5970:	e01f      	b.n	d59b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5972:	2018      	movs	r0, #24
   d5974:	680e      	ldr	r6, [r1, #0]
   d5976:	f7fe fb90 	bl	d409a <_Znwj>
   d597a:	4605      	mov	r5, r0
   d597c:	b150      	cbz	r0, d5994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d597e:	4631      	mov	r1, r6
   d5980:	f7ff fec8 	bl	d5714 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5984:	6930      	ldr	r0, [r6, #16]
   d5986:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d598a:	b108      	cbz	r0, d5990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d598c:	f001 ffa0 	bl	d78d0 <strdup>
   d5990:	6128      	str	r0, [r5, #16]
   d5992:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5994:	6025      	str	r5, [r4, #0]
   d5996:	e00c      	b.n	d59b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5998:	6804      	ldr	r4, [r0, #0]
   d599a:	b154      	cbz	r4, d59b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d599c:	f104 0010 	add.w	r0, r4, #16
   d59a0:	f7ff fded 	bl	d557e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59a4:	4620      	mov	r0, r4
   d59a6:	f7ff fdd2 	bl	d554e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d59aa:	2118      	movs	r1, #24
   d59ac:	4620      	mov	r0, r4
   d59ae:	f000 ffde 	bl	d696e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d59b2:	2000      	movs	r0, #0
   d59b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d59b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59b8:	2300      	movs	r3, #0
   d59ba:	6083      	str	r3, [r0, #8]
   d59bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d59be:	4604      	mov	r4, r0
   d59c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d59c2:	b12b      	cbz	r3, d59d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d59c4:	2202      	movs	r2, #2
   d59c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d59c8:	68eb      	ldr	r3, [r5, #12]
   d59ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d59cc:	68ab      	ldr	r3, [r5, #8]
   d59ce:	60a3      	str	r3, [r4, #8]
	}
    }
   d59d0:	4620      	mov	r0, r4
   d59d2:	bd38      	pop	{r3, r4, r5, pc}

000d59d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d59d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d59d6:	b570      	push	{r4, r5, r6, lr}
   d59d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d59da:	d006      	beq.n	d59ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d59dc:	2a03      	cmp	r2, #3
   d59de:	d011      	beq.n	d5a04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d59e0:	2a01      	cmp	r2, #1
   d59e2:	d118      	bne.n	d5a16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d59e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d59e6:	6003      	str	r3, [r0, #0]
	      break;
   d59e8:	e015      	b.n	d5a16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59ea:	2014      	movs	r0, #20
   d59ec:	680e      	ldr	r6, [r1, #0]
   d59ee:	f7fe fb54 	bl	d409a <_Znwj>
   d59f2:	4605      	mov	r5, r0
   d59f4:	b120      	cbz	r0, d5a00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d59f6:	4631      	mov	r1, r6
   d59f8:	f7ff ffdd 	bl	d59b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d59fc:	7c33      	ldrb	r3, [r6, #16]
   d59fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a00:	6025      	str	r5, [r4, #0]
   d5a02:	e008      	b.n	d5a16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a04:	6804      	ldr	r4, [r0, #0]
   d5a06:	b134      	cbz	r4, d5a16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a08:	4620      	mov	r0, r4
   d5a0a:	f7ff fda0 	bl	d554e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a0e:	2114      	movs	r1, #20
   d5a10:	4620      	mov	r0, r4
   d5a12:	f000 ffac 	bl	d696e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5a16:	2000      	movs	r0, #0
   d5a18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5a1c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5a1e:	2300      	movs	r3, #0
   d5a20:	b087      	sub	sp, #28
   d5a22:	460c      	mov	r4, r1
   d5a24:	f3bf 8f5f 	dmb	sy
   d5a28:	e850 6f00 	ldrex	r6, [r0]
   d5a2c:	e840 3200 	strex	r2, r3, [r0]
   d5a30:	2a00      	cmp	r2, #0
   d5a32:	d1f9      	bne.n	d5a28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5a34:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5a38:	2e00      	cmp	r6, #0
   d5a3a:	d03f      	beq.n	d5abc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a3c:	4618      	mov	r0, r3
   d5a3e:	f7ff fc31 	bl	d52a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5a42:	4607      	mov	r7, r0
   d5a44:	b120      	cbz	r0, d5a50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a46:	4621      	mov	r1, r4
   d5a48:	4630      	mov	r0, r6
   d5a4a:	f7ff fe53 	bl	d56f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5a4e:	e02e      	b.n	d5aae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a50:	4631      	mov	r1, r6
   d5a52:	a801      	add	r0, sp, #4
   d5a54:	f7ff ffaf 	bl	d59b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a58:	7823      	ldrb	r3, [r4, #0]
   d5a5a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a5e:	2010      	movs	r0, #16
   d5a60:	f7fe fb1b 	bl	d409a <_Znwj>
   d5a64:	4605      	mov	r5, r0
   d5a66:	b1d0      	cbz	r0, d5a9e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a68:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a6a:	2014      	movs	r0, #20
   d5a6c:	f7fe fb15 	bl	d409a <_Znwj>
   d5a70:	4604      	mov	r4, r0
   d5a72:	b178      	cbz	r0, d5a94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a74:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a76:	4601      	mov	r1, r0
   d5a78:	a801      	add	r0, sp, #4
   d5a7a:	f7ff fe06 	bl	d568a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a7e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a82:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a84:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a86:	9203      	str	r2, [sp, #12]
   d5a88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a8a:	60e3      	str	r3, [r4, #12]
   d5a8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a90:	9204      	str	r2, [sp, #16]
   d5a92:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a94:	4b0a      	ldr	r3, [pc, #40]	; (d5ac0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5a96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a98:	4b0a      	ldr	r3, [pc, #40]	; (d5ac4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a9a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a9c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a9e:	a801      	add	r0, sp, #4
   d5aa0:	f7ff fd55 	bl	d554e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5aa4:	2200      	movs	r2, #0
   d5aa6:	4629      	mov	r1, r5
   d5aa8:	4807      	ldr	r0, [pc, #28]	; (d5ac8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5aaa:	f7ff fc03 	bl	d52b4 <application_thread_invoke>
   d5aae:	4630      	mov	r0, r6
   d5ab0:	f7ff fd4d 	bl	d554e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5ab4:	2110      	movs	r1, #16
   d5ab6:	4630      	mov	r0, r6
   d5ab8:	f000 ff59 	bl	d696e <_ZdlPvj>
        }
    }
   d5abc:	b007      	add	sp, #28
   d5abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5ac0:	000d5707 	.word	0x000d5707
   d5ac4:	000d59d5 	.word	0x000d59d5
   d5ac8:	000d54c3 	.word	0x000d54c3

000d5acc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5acc:	b530      	push	{r4, r5, lr}
   d5ace:	b085      	sub	sp, #20
   d5ad0:	4604      	mov	r4, r0
   d5ad2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5ad4:	4668      	mov	r0, sp
   d5ad6:	4611      	mov	r1, r2
   d5ad8:	f7ff fdb9 	bl	d564e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5adc:	b17c      	cbz	r4, d5afe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5ade:	b224      	sxth	r4, r4
   d5ae0:	4628      	mov	r0, r5
   d5ae2:	b10d      	cbz	r5, d5ae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5ae4:	f001 fef4 	bl	d78d0 <strdup>
   d5ae8:	9002      	str	r0, [sp, #8]
   d5aea:	a902      	add	r1, sp, #8
   d5aec:	4668      	mov	r0, sp
   d5aee:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5af2:	f7ff fe1f 	bl	d5734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5af6:	a802      	add	r0, sp, #8
   d5af8:	f7ff fd41 	bl	d557e <_ZN8particle5ErrorD1Ev>
   d5afc:	e01d      	b.n	d5b3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5afe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5b00:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5b04:	f04f 0201 	mov.w	r2, #1
   d5b08:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5b0c:	42a3      	cmp	r3, r4
   d5b0e:	d103      	bne.n	d5b18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5b10:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5b14:	2900      	cmp	r1, #0
   d5b16:	d1f7      	bne.n	d5b08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5b18:	d002      	beq.n	d5b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5b1a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5b1e:	e00c      	b.n	d5b3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5b20:	f110 010c 	adds.w	r1, r0, #12
   d5b24:	f04f 0301 	mov.w	r3, #1
   d5b28:	bf18      	it	ne
   d5b2a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5b2c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5b30:	3004      	adds	r0, #4
   d5b32:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5b36:	f7ff ff71 	bl	d5a1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5b3a:	a801      	add	r0, sp, #4
   d5b3c:	f7fe fb7e 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5b40:	b005      	add	sp, #20
   d5b42:	bd30      	pop	{r4, r5, pc}

000d5b44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b44:	2200      	movs	r2, #0
   d5b46:	4611      	mov	r1, r2
   d5b48:	6840      	ldr	r0, [r0, #4]
   d5b4a:	f7ff bc67 	b.w	d541c <network_listening>

000d5b4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b4e:	2200      	movs	r2, #0
   d5b50:	4611      	mov	r1, r2
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	f7ff bc72 	b.w	d543c <network_get_listen_timeout>

000d5b58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b58:	2200      	movs	r2, #0
   d5b5a:	6840      	ldr	r0, [r0, #4]
   d5b5c:	f7ff bc66 	b.w	d542c <network_set_listen_timeout>

000d5b60 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b60:	2200      	movs	r2, #0
   d5b62:	f081 0101 	eor.w	r1, r1, #1
   d5b66:	6840      	ldr	r0, [r0, #4]
   d5b68:	f7ff bc50 	b.w	d540c <network_listen>

000d5b6c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b6c:	2300      	movs	r3, #0
   d5b6e:	461a      	mov	r2, r3
   d5b70:	4619      	mov	r1, r3
   d5b72:	6840      	ldr	r0, [r0, #4]
   d5b74:	f7ff bc42 	b.w	d53fc <network_off>

000d5b78 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b78:	2300      	movs	r3, #0
   d5b7a:	461a      	mov	r2, r3
   d5b7c:	4619      	mov	r1, r3
   d5b7e:	6840      	ldr	r0, [r0, #4]
   d5b80:	f7ff bc34 	b.w	d53ec <network_on>

000d5b84 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b84:	2200      	movs	r2, #0
   d5b86:	4611      	mov	r1, r2
   d5b88:	6840      	ldr	r0, [r0, #4]
   d5b8a:	f7ff bc27 	b.w	d53dc <network_ready>

000d5b8e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b8e:	2200      	movs	r2, #0
   d5b90:	4611      	mov	r1, r2
   d5b92:	6840      	ldr	r0, [r0, #4]
   d5b94:	f7ff bc12 	b.w	d53bc <network_connecting>

000d5b98 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b98:	2200      	movs	r2, #0
   d5b9a:	2102      	movs	r1, #2
   d5b9c:	6840      	ldr	r0, [r0, #4]
   d5b9e:	f7ff bc15 	b.w	d53cc <network_disconnect>

000d5ba2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ba2:	2300      	movs	r3, #0
   d5ba4:	461a      	mov	r2, r3
   d5ba6:	6840      	ldr	r0, [r0, #4]
   d5ba8:	f7ff bc00 	b.w	d53ac <network_connect>

000d5bac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5bac:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5bae:	2203      	movs	r2, #3
   d5bb0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5bb2:	4a02      	ldr	r2, [pc, #8]	; (d5bbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5bb4:	601a      	str	r2, [r3, #0]
   d5bb6:	4770      	bx	lr
   d5bb8:	2003e374 	.word	0x2003e374
   d5bbc:	000d9fe4 	.word	0x000d9fe4

000d5bc0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5bc0:	4770      	bx	lr

000d5bc2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bc4:	4606      	mov	r6, r0
   d5bc6:	4615      	mov	r5, r2
   d5bc8:	460c      	mov	r4, r1
   d5bca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5bcc:	42bc      	cmp	r4, r7
   d5bce:	d006      	beq.n	d5bde <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5bd0:	6833      	ldr	r3, [r6, #0]
   d5bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5bd6:	689b      	ldr	r3, [r3, #8]
   d5bd8:	4630      	mov	r0, r6
   d5bda:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5bdc:	e7f6      	b.n	d5bcc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5bde:	4628      	mov	r0, r5
   d5be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5be2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5be2:	2200      	movs	r2, #0
   d5be4:	7c00      	ldrb	r0, [r0, #16]
   d5be6:	f7ff ba5d 	b.w	d50a4 <HAL_I2C_Write_Data>

000d5bea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5bea:	2100      	movs	r1, #0
   d5bec:	7c00      	ldrb	r0, [r0, #16]
   d5bee:	f7ff ba61 	b.w	d50b4 <HAL_I2C_Available_Data>

000d5bf2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5bf2:	2100      	movs	r1, #0
   d5bf4:	7c00      	ldrb	r0, [r0, #16]
   d5bf6:	f7ff ba65 	b.w	d50c4 <HAL_I2C_Read_Data>

000d5bfa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5bfa:	2100      	movs	r1, #0
   d5bfc:	7c00      	ldrb	r0, [r0, #16]
   d5bfe:	f7ff ba69 	b.w	d50d4 <HAL_I2C_Peek_Data>

000d5c02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5c02:	2100      	movs	r1, #0
   d5c04:	7c00      	ldrb	r0, [r0, #16]
   d5c06:	f7ff ba6d 	b.w	d50e4 <HAL_I2C_Flush_Data>

000d5c0a <_ZN7TwoWireD0Ev>:
   d5c0a:	b510      	push	{r4, lr}
   d5c0c:	2114      	movs	r1, #20
   d5c0e:	4604      	mov	r4, r0
   d5c10:	f000 fead 	bl	d696e <_ZdlPvj>
   d5c14:	4620      	mov	r0, r4
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c18:	b510      	push	{r4, lr}
   d5c1a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c1c:	2300      	movs	r3, #0
   d5c1e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c24:	60a3      	str	r3, [r4, #8]
   d5c26:	4b04      	ldr	r3, [pc, #16]	; (d5c38 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5c28:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c2a:	4608      	mov	r0, r1
   d5c2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5c2e:	4611      	mov	r1, r2
   d5c30:	f7ff fa68 	bl	d5104 <HAL_I2C_Init>
}
   d5c34:	4620      	mov	r0, r4
   d5c36:	bd10      	pop	{r4, pc}
   d5c38:	000da018 	.word	0x000da018

000d5c3c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5c3c:	2300      	movs	r3, #0
   d5c3e:	461a      	mov	r2, r3
   d5c40:	4619      	mov	r1, r3
   d5c42:	7c00      	ldrb	r0, [r0, #16]
   d5c44:	f7ff ba16 	b.w	d5074 <HAL_I2C_Begin>

000d5c48 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5c48:	b570      	push	{r4, r5, r6, lr}
   d5c4a:	460c      	mov	r4, r1
   d5c4c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5c4e:	2514      	movs	r5, #20
   d5c50:	4606      	mov	r6, r0
   d5c52:	462a      	mov	r2, r5
   d5c54:	2100      	movs	r1, #0
   d5c56:	a801      	add	r0, sp, #4
   d5c58:	f001 fdf7 	bl	d784a <memset>
   d5c5c:	7823      	ldrb	r3, [r4, #0]
   d5c5e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c62:	6863      	ldr	r3, [r4, #4]
   d5c64:	9303      	str	r3, [sp, #12]
   d5c66:	68e3      	ldr	r3, [r4, #12]
   d5c68:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	7a23      	ldrb	r3, [r4, #8]
   d5c6e:	7c30      	ldrb	r0, [r6, #16]
   d5c70:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5c74:	a901      	add	r1, sp, #4
   d5c76:	9305      	str	r3, [sp, #20]
   d5c78:	f7ff fa4c 	bl	d5114 <HAL_I2C_Request_Data_Ex>
}
   d5c7c:	b006      	add	sp, #24
   d5c7e:	bd70      	pop	{r4, r5, r6, pc}

000d5c80 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5c82:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5c84:	f88d 1000 	strb.w	r1, [sp]
   d5c88:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5c8c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5c8e:	bf18      	it	ne
   d5c90:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5c92:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5c94:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5c96:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c9a:	f7ff ffd5 	bl	d5c48 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5c9e:	b005      	add	sp, #20
   d5ca0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ca4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5ca4:	2301      	movs	r3, #1
   d5ca6:	f7ff bfeb 	b.w	d5c80 <_ZN7TwoWire11requestFromEhjh>

000d5caa <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5caa:	2200      	movs	r2, #0
   d5cac:	7c00      	ldrb	r0, [r0, #16]
   d5cae:	f7ff b9e9 	b.w	d5084 <HAL_I2C_Begin_Transmission>

000d5cb2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5cb2:	2200      	movs	r2, #0
   d5cb4:	7c00      	ldrb	r0, [r0, #16]
   d5cb6:	f7ff b9ed 	b.w	d5094 <HAL_I2C_End_Transmission>

000d5cba <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5cba:	2101      	movs	r1, #1
   d5cbc:	f7ff bff9 	b.w	d5cb2 <_ZN7TwoWire15endTransmissionEh>

000d5cc0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5cc0:	2100      	movs	r1, #0
   d5cc2:	7c00      	ldrb	r0, [r0, #16]
   d5cc4:	f7ff ba16 	b.w	d50f4 <HAL_I2C_Is_Enabled>

000d5cc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5cc8:	4770      	bx	lr

000d5cca <_ZN9IPAddressD0Ev>:
   d5cca:	b510      	push	{r4, lr}
   d5ccc:	2118      	movs	r1, #24
   d5cce:	4604      	mov	r4, r0
   d5cd0:	f000 fe4d 	bl	d696e <_ZdlPvj>
   d5cd4:	4620      	mov	r0, r4
   d5cd6:	bd10      	pop	{r4, pc}

000d5cd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5cda:	7d03      	ldrb	r3, [r0, #20]
   d5cdc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5cde:	b08d      	sub	sp, #52	; 0x34
   d5ce0:	460e      	mov	r6, r1
   d5ce2:	f100 0704 	add.w	r7, r0, #4
   d5ce6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5cea:	d002      	beq.n	d5cf2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5cec:	f100 0508 	add.w	r5, r0, #8
   d5cf0:	e018      	b.n	d5d24 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5cf2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5cf4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5cf6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5cfa:	232f      	movs	r3, #47	; 0x2f
   d5cfc:	462a      	mov	r2, r5
   d5cfe:	200a      	movs	r0, #10
   d5d00:	f7ff fa10 	bl	d5124 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d04:	4628      	mov	r0, r5
   d5d06:	f001 fdfe 	bl	d7906 <strlen>
   d5d0a:	6833      	ldr	r3, [r6, #0]
   d5d0c:	4602      	mov	r2, r0
   d5d0e:	68db      	ldr	r3, [r3, #12]
   d5d10:	4629      	mov	r1, r5
   d5d12:	4630      	mov	r0, r6
   d5d14:	4798      	blx	r3
   d5d16:	e00f      	b.n	d5d38 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5d18:	b124      	cbz	r4, d5d24 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5d1a:	212e      	movs	r1, #46	; 0x2e
   d5d1c:	4630      	mov	r0, r6
   d5d1e:	f000 f9d5 	bl	d60cc <_ZN5Print5printEc>
   d5d22:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5d24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5d28:	220a      	movs	r2, #10
   d5d2a:	4630      	mov	r0, r6
   d5d2c:	f000 f9e7 	bl	d60fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d30:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d32:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d34:	d1f0      	bne.n	d5d18 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d36:	4620      	mov	r0, r4
    }
    return n;
}
   d5d38:	b00d      	add	sp, #52	; 0x34
   d5d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d3c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5d3c:	b510      	push	{r4, lr}
   d5d3e:	4b05      	ldr	r3, [pc, #20]	; (d5d54 <_ZN9IPAddressC1Ev+0x18>)
   d5d40:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5d42:	2211      	movs	r2, #17
   d5d44:	f840 3b04 	str.w	r3, [r0], #4
   d5d48:	2100      	movs	r1, #0
   d5d4a:	f001 fd7e 	bl	d784a <memset>
{
    clear();
}
   d5d4e:	4620      	mov	r0, r4
   d5d50:	bd10      	pop	{r4, pc}
   d5d52:	bf00      	nop
   d5d54:	000da040 	.word	0x000da040

000d5d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5d58:	4603      	mov	r3, r0
   d5d5a:	4a07      	ldr	r2, [pc, #28]	; (d5d78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5d5c:	b510      	push	{r4, lr}
   d5d5e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5d62:	f101 0210 	add.w	r2, r1, #16
   d5d66:	f851 4b04 	ldr.w	r4, [r1], #4
   d5d6a:	f843 4b04 	str.w	r4, [r3], #4
   d5d6e:	4291      	cmp	r1, r2
   d5d70:	d1f9      	bne.n	d5d66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5d72:	780a      	ldrb	r2, [r1, #0]
   d5d74:	701a      	strb	r2, [r3, #0]
}
   d5d76:	bd10      	pop	{r4, pc}
   d5d78:	000da040 	.word	0x000da040

000d5d7c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5d7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5d82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5d86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5d8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5d8e:	2304      	movs	r3, #4
   d5d90:	6041      	str	r1, [r0, #4]
   d5d92:	7503      	strb	r3, [r0, #20]
   d5d94:	bd10      	pop	{r4, pc}

000d5d96 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5d96:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5d98:	780d      	ldrb	r5, [r1, #0]
   d5d9a:	788b      	ldrb	r3, [r1, #2]
   d5d9c:	784a      	ldrb	r2, [r1, #1]
   d5d9e:	78c9      	ldrb	r1, [r1, #3]
   d5da0:	9100      	str	r1, [sp, #0]
   d5da2:	4629      	mov	r1, r5
   d5da4:	f7ff ffea 	bl	d5d7c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5da8:	b003      	add	sp, #12
   d5daa:	bd30      	pop	{r4, r5, pc}

000d5dac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5dac:	4b01      	ldr	r3, [pc, #4]	; (d5db4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5dae:	4a02      	ldr	r2, [pc, #8]	; (d5db8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5db0:	601a      	str	r2, [r3, #0]
   d5db2:	4770      	bx	lr
   d5db4:	2003e37c 	.word	0x2003e37c
   d5db8:	000da0bf 	.word	0x000da0bf

000d5dbc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	4611      	mov	r1, r2
   d5dc0:	6840      	ldr	r0, [r0, #4]
   d5dc2:	f7ff bb2b 	b.w	d541c <network_listening>

000d5dc6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dc6:	2200      	movs	r2, #0
   d5dc8:	4611      	mov	r1, r2
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7ff bb36 	b.w	d543c <network_get_listen_timeout>

000d5dd0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7ff bb2a 	b.w	d542c <network_set_listen_timeout>

000d5dd8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	f081 0101 	eor.w	r1, r1, #1
   d5dde:	6840      	ldr	r0, [r0, #4]
   d5de0:	f7ff bb14 	b.w	d540c <network_listen>

000d5de4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5de4:	2300      	movs	r3, #0
   d5de6:	461a      	mov	r2, r3
   d5de8:	2101      	movs	r1, #1
   d5dea:	6840      	ldr	r0, [r0, #4]
   d5dec:	f7ff bb06 	b.w	d53fc <network_off>

000d5df0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5df0:	2300      	movs	r3, #0
   d5df2:	461a      	mov	r2, r3
   d5df4:	4619      	mov	r1, r3
   d5df6:	6840      	ldr	r0, [r0, #4]
   d5df8:	f7ff baf8 	b.w	d53ec <network_on>

000d5dfc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5dfc:	2200      	movs	r2, #0
   d5dfe:	4611      	mov	r1, r2
   d5e00:	6840      	ldr	r0, [r0, #4]
   d5e02:	f7ff baeb 	b.w	d53dc <network_ready>

000d5e06 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e06:	2200      	movs	r2, #0
   d5e08:	4611      	mov	r1, r2
   d5e0a:	6840      	ldr	r0, [r0, #4]
   d5e0c:	f7ff bad6 	b.w	d53bc <network_connecting>

000d5e10 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e10:	2200      	movs	r2, #0
   d5e12:	2102      	movs	r1, #2
   d5e14:	6840      	ldr	r0, [r0, #4]
   d5e16:	f7ff bad9 	b.w	d53cc <network_disconnect>

000d5e1a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e1a:	2300      	movs	r3, #0
   d5e1c:	461a      	mov	r2, r3
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7ff bac4 	b.w	d53ac <network_connect>

000d5e24 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5e24:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e26:	4605      	mov	r5, r0
   d5e28:	b188      	cbz	r0, d5e4e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e2a:	6804      	ldr	r4, [r0, #0]
   d5e2c:	b14c      	cbz	r4, d5e42 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5e2e:	68a3      	ldr	r3, [r4, #8]
   d5e30:	b11b      	cbz	r3, d5e3a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e32:	2203      	movs	r2, #3
   d5e34:	4621      	mov	r1, r4
   d5e36:	4620      	mov	r0, r4
   d5e38:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e3a:	2110      	movs	r1, #16
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f000 fd96 	bl	d696e <_ZdlPvj>
   d5e42:	4628      	mov	r0, r5
   d5e44:	2114      	movs	r1, #20
      }
   d5e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e4a:	f000 bd90 	b.w	d696e <_ZdlPvj>
   d5e4e:	bd38      	pop	{r3, r4, r5, pc}

000d5e50 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5e50:	b110      	cbz	r0, d5e58 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5e52:	6803      	ldr	r3, [r0, #0]
   d5e54:	685b      	ldr	r3, [r3, #4]
   d5e56:	4718      	bx	r3
   d5e58:	4770      	bx	lr

000d5e5a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5e5a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e5c:	6803      	ldr	r3, [r0, #0]
   d5e5e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5e60:	b1bb      	cbz	r3, d5e92 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5e62:	6858      	ldr	r0, [r3, #4]
   d5e64:	f7ff f856 	bl	d4f14 <os_thread_is_current>
   d5e68:	b978      	cbnz	r0, d5e8a <_ZN6ThreadD1Ev+0x30>
   d5e6a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5e6c:	7c5a      	ldrb	r2, [r3, #17]
   d5e6e:	b912      	cbnz	r2, d5e76 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5e70:	6858      	ldr	r0, [r3, #4]
   d5e72:	f7ff f857 	bl	d4f24 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5e76:	6823      	ldr	r3, [r4, #0]
   d5e78:	6858      	ldr	r0, [r3, #4]
   d5e7a:	f7ff f85b 	bl	d4f34 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e7e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e80:	2300      	movs	r3, #0
   d5e82:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e84:	b128      	cbz	r0, d5e92 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5e86:	f7ff ffcd 	bl	d5e24 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e8a:	6820      	ldr	r0, [r4, #0]
   d5e8c:	b108      	cbz	r0, d5e92 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5e8e:	f7ff ffc9 	bl	d5e24 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5e92:	4620      	mov	r0, r4
   d5e94:	bd10      	pop	{r4, pc}

000d5e96 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5e96:	b538      	push	{r3, r4, r5, lr}
   d5e98:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e9a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5e9e:	b108      	cbz	r0, d5ea4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5ea0:	f7fe f8ff 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5ea4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5ea8:	b108      	cbz	r0, d5eae <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5eaa:	f7ff f853 	bl	d4f54 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5eae:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5eb2:	b135      	cbz	r5, d5ec2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5eb4:	4628      	mov	r0, r5
   d5eb6:	f7ff ffd0 	bl	d5e5a <_ZN6ThreadD1Ev>
   d5eba:	2104      	movs	r1, #4
   d5ebc:	4628      	mov	r0, r5
   d5ebe:	f000 fd56 	bl	d696e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ec2:	6820      	ldr	r0, [r4, #0]
   d5ec4:	b108      	cbz	r0, d5eca <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5ec6:	f7ff ffc3 	bl	d5e50 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5eca:	4620      	mov	r0, r4
   d5ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ed0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5ed0:	b510      	push	{r4, lr}
   d5ed2:	4b04      	ldr	r3, [pc, #16]	; (d5ee4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	f840 3b08 	str.w	r3, [r0], #8
   d5eda:	f7ff ffdc 	bl	d5e96 <_ZN5spark11MeshPublishD1Ev>
   d5ede:	4620      	mov	r0, r4
   d5ee0:	bd10      	pop	{r4, pc}
   d5ee2:	bf00      	nop
   d5ee4:	000da134 	.word	0x000da134

000d5ee8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5ee8:	b538      	push	{r3, r4, r5, lr}
   d5eea:	4c0e      	ldr	r4, [pc, #56]	; (d5f24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5eec:	4b0e      	ldr	r3, [pc, #56]	; (d5f28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5eee:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ef0:	2500      	movs	r5, #0
   d5ef2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ef4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5ef8:	6063      	str	r3, [r4, #4]
   d5efa:	60a5      	str	r5, [r4, #8]
   d5efc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f00:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5f04:	f7ff f81e 	bl	d4f44 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5f08:	4b08      	ldr	r3, [pc, #32]	; (d5f2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5f0a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5f0e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5f12:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5f14:	4620      	mov	r0, r4
   d5f16:	4a06      	ldr	r2, [pc, #24]	; (d5f30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5f18:	4906      	ldr	r1, [pc, #24]	; (d5f34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5f1e:	f000 bd21 	b.w	d6964 <__aeabi_atexit>
   d5f22:	bf00      	nop
   d5f24:	2003e380 	.word	0x2003e380
   d5f28:	000da168 	.word	0x000da168
   d5f2c:	000da134 	.word	0x000da134
   d5f30:	2003e250 	.word	0x2003e250
   d5f34:	000d5ed1 	.word	0x000d5ed1

000d5f38 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5f38:	2300      	movs	r3, #0
   d5f3a:	461a      	mov	r2, r3
   d5f3c:	6840      	ldr	r0, [r0, #4]
   d5f3e:	f7ff ba35 	b.w	d53ac <network_connect>

000d5f42 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5f42:	2200      	movs	r2, #0
   d5f44:	2102      	movs	r1, #2
   d5f46:	6840      	ldr	r0, [r0, #4]
   d5f48:	f7ff ba40 	b.w	d53cc <network_disconnect>

000d5f4c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5f4c:	2200      	movs	r2, #0
   d5f4e:	4611      	mov	r1, r2
   d5f50:	6840      	ldr	r0, [r0, #4]
   d5f52:	f7ff ba33 	b.w	d53bc <network_connecting>

000d5f56 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5f56:	2200      	movs	r2, #0
   d5f58:	4611      	mov	r1, r2
   d5f5a:	6840      	ldr	r0, [r0, #4]
   d5f5c:	f7ff ba3e 	b.w	d53dc <network_ready>

000d5f60 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5f60:	2300      	movs	r3, #0
   d5f62:	461a      	mov	r2, r3
   d5f64:	4619      	mov	r1, r3
   d5f66:	6840      	ldr	r0, [r0, #4]
   d5f68:	f7ff ba40 	b.w	d53ec <network_on>

000d5f6c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5f6c:	2300      	movs	r3, #0
   d5f6e:	461a      	mov	r2, r3
   d5f70:	4619      	mov	r1, r3
   d5f72:	6840      	ldr	r0, [r0, #4]
   d5f74:	f7ff ba42 	b.w	d53fc <network_off>

000d5f78 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f78:	2200      	movs	r2, #0
   d5f7a:	f081 0101 	eor.w	r1, r1, #1
   d5f7e:	6840      	ldr	r0, [r0, #4]
   d5f80:	f7ff ba44 	b.w	d540c <network_listen>

000d5f84 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f84:	2200      	movs	r2, #0
   d5f86:	6840      	ldr	r0, [r0, #4]
   d5f88:	f7ff ba50 	b.w	d542c <network_set_listen_timeout>

000d5f8c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f8c:	2200      	movs	r2, #0
   d5f8e:	4611      	mov	r1, r2
   d5f90:	6840      	ldr	r0, [r0, #4]
   d5f92:	f7ff ba53 	b.w	d543c <network_get_listen_timeout>

000d5f96 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f96:	2200      	movs	r2, #0
   d5f98:	4611      	mov	r1, r2
   d5f9a:	6840      	ldr	r0, [r0, #4]
   d5f9c:	f7ff ba3e 	b.w	d541c <network_listening>

000d5fa0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5fa4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fa6:	b095      	sub	sp, #84	; 0x54
   d5fa8:	4616      	mov	r6, r2
   d5faa:	460d      	mov	r5, r1
   d5fac:	4607      	mov	r7, r0
    IPAddress addr;
   d5fae:	f7ff fec5 	bl	d5d3c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5fb2:	4621      	mov	r1, r4
   d5fb4:	2220      	movs	r2, #32
   d5fb6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5fb8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5fba:	f001 fc46 	bl	d784a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5fbe:	2340      	movs	r3, #64	; 0x40
   d5fc0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5fc2:	4621      	mov	r1, r4
   d5fc4:	466b      	mov	r3, sp
   d5fc6:	aa0c      	add	r2, sp, #48	; 0x30
   d5fc8:	4630      	mov	r0, r6
   d5fca:	f7ff f8bb 	bl	d5144 <netdb_getaddrinfo>
    if (!r) {
   d5fce:	4604      	mov	r4, r0
   d5fd0:	2800      	cmp	r0, #0
   d5fd2:	d144      	bne.n	d605e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5fd4:	4602      	mov	r2, r0
   d5fd6:	2101      	movs	r1, #1
   d5fd8:	6868      	ldr	r0, [r5, #4]
   d5fda:	f7ff f9ff 	bl	d53dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fde:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5fe0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fe2:	4622      	mov	r2, r4
   d5fe4:	6868      	ldr	r0, [r5, #4]
   d5fe6:	f7ff f9f9 	bl	d53dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5fea:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fec:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5fee:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ff0:	2e00      	cmp	r6, #0
   d5ff2:	d034      	beq.n	d605e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ff4:	2900      	cmp	r1, #0
   d5ff6:	d132      	bne.n	d605e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ff8:	6873      	ldr	r3, [r6, #4]
   d5ffa:	2b02      	cmp	r3, #2
   d5ffc:	d002      	beq.n	d6004 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5ffe:	2b0a      	cmp	r3, #10
   d6000:	d009      	beq.n	d6016 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6002:	e02a      	b.n	d605a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6004:	f1b8 0f00 	cmp.w	r8, #0
   d6008:	d027      	beq.n	d605a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d600a:	6971      	ldr	r1, [r6, #20]
   d600c:	4638      	mov	r0, r7
   d600e:	3104      	adds	r1, #4
   d6010:	f7ff fec1 	bl	d5d96 <_ZN9IPAddressaSEPKh>
   d6014:	e020      	b.n	d6058 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6016:	f1b9 0f00 	cmp.w	r9, #0
   d601a:	d01e      	beq.n	d605a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d601c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d601e:	2211      	movs	r2, #17
   d6020:	a801      	add	r0, sp, #4
   d6022:	f001 fc12 	bl	d784a <memset>
                    a.v = 6;
   d6026:	2306      	movs	r3, #6
   d6028:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d602c:	ad01      	add	r5, sp, #4
   d602e:	f104 0308 	add.w	r3, r4, #8
   d6032:	3418      	adds	r4, #24
   d6034:	6818      	ldr	r0, [r3, #0]
   d6036:	6859      	ldr	r1, [r3, #4]
   d6038:	462a      	mov	r2, r5
   d603a:	c203      	stmia	r2!, {r0, r1}
   d603c:	3308      	adds	r3, #8
   d603e:	42a3      	cmp	r3, r4
   d6040:	4615      	mov	r5, r2
   d6042:	d1f7      	bne.n	d6034 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6044:	a901      	add	r1, sp, #4
   d6046:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6048:	ad07      	add	r5, sp, #28
   d604a:	f7ff fe85 	bl	d5d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d604e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6050:	1d3c      	adds	r4, r7, #4
   d6052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6054:	682b      	ldr	r3, [r5, #0]
   d6056:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6058:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d605a:	69f6      	ldr	r6, [r6, #28]
   d605c:	e7c8      	b.n	d5ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d605e:	9800      	ldr	r0, [sp, #0]
   d6060:	f7ff f868 	bl	d5134 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6064:	4638      	mov	r0, r7
   d6066:	b015      	add	sp, #84	; 0x54
   d6068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d606c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d606c:	4b02      	ldr	r3, [pc, #8]	; (d6078 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d606e:	4a03      	ldr	r2, [pc, #12]	; (d607c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6070:	601a      	str	r2, [r3, #0]
   d6072:	2200      	movs	r2, #0
   d6074:	605a      	str	r2, [r3, #4]
   d6076:	4770      	bx	lr
   d6078:	2003e554 	.word	0x2003e554
   d607c:	000da168 	.word	0x000da168

000d6080 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6082:	4606      	mov	r6, r0
   d6084:	460d      	mov	r5, r1
   d6086:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6088:	2400      	movs	r4, #0
  while (size--) {
   d608a:	42bd      	cmp	r5, r7
   d608c:	d00c      	beq.n	d60a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d608e:	6833      	ldr	r3, [r6, #0]
   d6090:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6094:	689b      	ldr	r3, [r3, #8]
   d6096:	4630      	mov	r0, r6
   d6098:	4798      	blx	r3
     if (chunk>=0)
   d609a:	2800      	cmp	r0, #0
   d609c:	db01      	blt.n	d60a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d609e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d60a0:	e7f3      	b.n	d608a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d60a2:	2c00      	cmp	r4, #0
   d60a4:	bf08      	it	eq
   d60a6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d60a8:	4620      	mov	r0, r4
   d60aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d60ac:	b570      	push	{r4, r5, r6, lr}
   d60ae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d60b0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d60b2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d60b4:	b149      	cbz	r1, d60ca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d60b6:	f001 fc26 	bl	d7906 <strlen>
   d60ba:	682b      	ldr	r3, [r5, #0]
   d60bc:	4602      	mov	r2, r0
   d60be:	4621      	mov	r1, r4
   d60c0:	4628      	mov	r0, r5
   d60c2:	68db      	ldr	r3, [r3, #12]
    }
   d60c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d60c8:	4718      	bx	r3
    }
   d60ca:	bd70      	pop	{r4, r5, r6, pc}

000d60cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d60cc:	6803      	ldr	r3, [r0, #0]
   d60ce:	689b      	ldr	r3, [r3, #8]
   d60d0:	4718      	bx	r3

000d60d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d60d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d60d4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d60d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d60d8:	f7ff fff8 	bl	d60cc <_ZN5Print5printEc>
  n += print('\n');
   d60dc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d60de:	4604      	mov	r4, r0
  n += print('\n');
   d60e0:	4628      	mov	r0, r5
   d60e2:	f7ff fff3 	bl	d60cc <_ZN5Print5printEc>
  return n;
}
   d60e6:	4420      	add	r0, r4
   d60e8:	bd38      	pop	{r3, r4, r5, pc}

000d60ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d60ea:	b538      	push	{r3, r4, r5, lr}
   d60ec:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60ee:	f7ff ffdd 	bl	d60ac <_ZN5Print5writeEPKc>
   d60f2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d60f4:	4628      	mov	r0, r5
   d60f6:	f7ff ffec 	bl	d60d2 <_ZN5Print7printlnEv>
  return n;
}
   d60fa:	4420      	add	r0, r4
   d60fc:	bd38      	pop	{r3, r4, r5, pc}

000d60fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d60fe:	b530      	push	{r4, r5, lr}
   d6100:	b08b      	sub	sp, #44	; 0x2c
   d6102:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6104:	2100      	movs	r1, #0
   d6106:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d610a:	2a01      	cmp	r2, #1
   d610c:	bf98      	it	ls
   d610e:	220a      	movls	r2, #10
   d6110:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6114:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6118:	fb05 3312 	mls	r3, r5, r2, r3
   d611c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6120:	2b09      	cmp	r3, #9
   d6122:	bf94      	ite	ls
   d6124:	3330      	addls	r3, #48	; 0x30
   d6126:	3337      	addhi	r3, #55	; 0x37
   d6128:	b2db      	uxtb	r3, r3
   d612a:	4621      	mov	r1, r4
   d612c:	f804 3901 	strb.w	r3, [r4], #-1
   d6130:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6132:	2d00      	cmp	r5, #0
   d6134:	d1ee      	bne.n	d6114 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6136:	f7ff ffb9 	bl	d60ac <_ZN5Print5writeEPKc>
}
   d613a:	b00b      	add	sp, #44	; 0x2c
   d613c:	bd30      	pop	{r4, r5, pc}

000d613e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d613e:	b510      	push	{r4, lr}
   d6140:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6142:	f7ff fa04 	bl	d554e <_ZNSt14_Function_baseD1Ev>
   d6146:	4620      	mov	r0, r4
   d6148:	bd10      	pop	{r4, pc}
	...

000d614c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d614c:	4803      	ldr	r0, [pc, #12]	; (d615c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d614e:	4a04      	ldr	r2, [pc, #16]	; (d6160 <_GLOBAL__sub_I_RGB+0x14>)
   d6150:	4904      	ldr	r1, [pc, #16]	; (d6164 <_GLOBAL__sub_I_RGB+0x18>)
   d6152:	2300      	movs	r3, #0
   d6154:	6083      	str	r3, [r0, #8]
   d6156:	f000 bc05 	b.w	d6964 <__aeabi_atexit>
   d615a:	bf00      	nop
   d615c:	2003e55c 	.word	0x2003e55c
   d6160:	2003e250 	.word	0x2003e250
   d6164:	000d613f 	.word	0x000d613f

000d6168 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6168:	b510      	push	{r4, lr}
   d616a:	4604      	mov	r4, r0
{
    _spi = spi;
   d616c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d616e:	4608      	mov	r0, r1
   d6170:	f7fe fff0 	bl	d5154 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6174:	2300      	movs	r3, #0
   d6176:	6063      	str	r3, [r4, #4]
}
   d6178:	4620      	mov	r0, r4
   d617a:	bd10      	pop	{r4, pc}

000d617c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d617c:	7800      	ldrb	r0, [r0, #0]
   d617e:	f7fe bff1 	b.w	d5164 <HAL_SPI_Is_Enabled>

000d6182 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6182:	b510      	push	{r4, lr}
   d6184:	4604      	mov	r4, r0
{
	free(buffer);
   d6186:	6800      	ldr	r0, [r0, #0]
   d6188:	f7ff f968 	bl	d545c <free>
}
   d618c:	4620      	mov	r0, r4
   d618e:	bd10      	pop	{r4, pc}

000d6190 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6190:	b510      	push	{r4, lr}
   d6192:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6194:	6800      	ldr	r0, [r0, #0]
   d6196:	b108      	cbz	r0, d619c <_ZN6String10invalidateEv+0xc>
   d6198:	f7ff f960 	bl	d545c <free>
	buffer = NULL;
   d619c:	2300      	movs	r3, #0
   d619e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d61a0:	60a3      	str	r3, [r4, #8]
   d61a2:	6063      	str	r3, [r4, #4]
   d61a4:	bd10      	pop	{r4, pc}

000d61a6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d61a6:	b538      	push	{r3, r4, r5, lr}
   d61a8:	4604      	mov	r4, r0
   d61aa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d61ac:	6800      	ldr	r0, [r0, #0]
   d61ae:	3101      	adds	r1, #1
   d61b0:	f7ff f95c 	bl	d546c <realloc>
	if (newbuffer) {
   d61b4:	b110      	cbz	r0, d61bc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d61b6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d61ba:	2001      	movs	r0, #1
	}
	return 0;
}
   d61bc:	bd38      	pop	{r3, r4, r5, pc}

000d61be <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d61be:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d61c0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d61c2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d61c4:	b113      	cbz	r3, d61cc <_ZN6String7reserveEj+0xe>
   d61c6:	6843      	ldr	r3, [r0, #4]
   d61c8:	428b      	cmp	r3, r1
   d61ca:	d207      	bcs.n	d61dc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d61cc:	4620      	mov	r0, r4
   d61ce:	f7ff ffea 	bl	d61a6 <_ZN6String12changeBufferEj>
   d61d2:	b120      	cbz	r0, d61de <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d61d4:	68a3      	ldr	r3, [r4, #8]
   d61d6:	b90b      	cbnz	r3, d61dc <_ZN6String7reserveEj+0x1e>
   d61d8:	6822      	ldr	r2, [r4, #0]
   d61da:	7013      	strb	r3, [r2, #0]
   d61dc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d61de:	bd10      	pop	{r4, pc}

000d61e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d61e0:	b570      	push	{r4, r5, r6, lr}
   d61e2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d61e4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d61e6:	4604      	mov	r4, r0
   d61e8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d61ea:	f7ff ffe8 	bl	d61be <_ZN6String7reserveEj>
   d61ee:	b918      	cbnz	r0, d61f8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d61f0:	4620      	mov	r0, r4
   d61f2:	f7ff ffcd 	bl	d6190 <_ZN6String10invalidateEv>
		return *this;
   d61f6:	e009      	b.n	d620c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d61f8:	462a      	mov	r2, r5
   d61fa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d61fc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d61fe:	6820      	ldr	r0, [r4, #0]
   d6200:	f001 fb18 	bl	d7834 <memcpy>
	buffer[len] = 0;
   d6204:	6822      	ldr	r2, [r4, #0]
   d6206:	68a3      	ldr	r3, [r4, #8]
   d6208:	2100      	movs	r1, #0
   d620a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d620c:	4620      	mov	r0, r4
   d620e:	bd70      	pop	{r4, r5, r6, pc}

000d6210 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6210:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6212:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6214:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6216:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6218:	6043      	str	r3, [r0, #4]
	len = 0;
   d621a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d621c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d621e:	460d      	mov	r5, r1
   d6220:	b139      	cbz	r1, d6232 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6222:	4608      	mov	r0, r1
   d6224:	f001 fb6f 	bl	d7906 <strlen>
   d6228:	4629      	mov	r1, r5
   d622a:	4602      	mov	r2, r0
   d622c:	4620      	mov	r0, r4
   d622e:	f7ff ffd7 	bl	d61e0 <_ZN6String4copyEPKcj>
}
   d6232:	4620      	mov	r0, r4
   d6234:	bd38      	pop	{r3, r4, r5, pc}

000d6236 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6236:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6238:	b510      	push	{r4, lr}
   d623a:	460b      	mov	r3, r1
   d623c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d623e:	d007      	beq.n	d6250 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6240:	6809      	ldr	r1, [r1, #0]
   d6242:	b119      	cbz	r1, d624c <_ZN6StringaSERKS_+0x16>
   d6244:	689a      	ldr	r2, [r3, #8]
   d6246:	f7ff ffcb 	bl	d61e0 <_ZN6String4copyEPKcj>
   d624a:	e001      	b.n	d6250 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d624c:	f7ff ffa0 	bl	d6190 <_ZN6String10invalidateEv>

	return *this;
}
   d6250:	4620      	mov	r0, r4
   d6252:	bd10      	pop	{r4, pc}

000d6254 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6254:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6256:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6258:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d625a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d625c:	6043      	str	r3, [r0, #4]
	len = 0;
   d625e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6260:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6262:	f7ff ffe8 	bl	d6236 <_ZN6StringaSERKS_>
}
   d6266:	4620      	mov	r0, r4
   d6268:	bd10      	pop	{r4, pc}

000d626a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d626a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d626c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d626e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6270:	b912      	cbnz	r2, d6278 <_ZNK6String6equalsEPKc+0xe>
   d6272:	b919      	cbnz	r1, d627c <_ZNK6String6equalsEPKc+0x12>
   d6274:	2001      	movs	r0, #1
   d6276:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6278:	b911      	cbnz	r1, d6280 <_ZNK6String6equalsEPKc+0x16>
   d627a:	6803      	ldr	r3, [r0, #0]
   d627c:	7818      	ldrb	r0, [r3, #0]
   d627e:	e002      	b.n	d6286 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6280:	6800      	ldr	r0, [r0, #0]
   d6282:	f001 fb13 	bl	d78ac <strcmp>
   d6286:	fab0 f080 	clz	r0, r0
   d628a:	0940      	lsrs	r0, r0, #5
}
   d628c:	bd08      	pop	{r3, pc}

000d628e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d628e:	b570      	push	{r4, r5, r6, lr}
   d6290:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6292:	b19a      	cbz	r2, d62bc <_ZNK6String8getBytesEPhjj+0x2e>
   d6294:	b191      	cbz	r1, d62bc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6296:	6885      	ldr	r5, [r0, #8]
   d6298:	429d      	cmp	r5, r3
   d629a:	d802      	bhi.n	d62a2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d629c:	2300      	movs	r3, #0
   d629e:	700b      	strb	r3, [r1, #0]
		return;
   d62a0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d62a2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d62a4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d62a6:	6801      	ldr	r1, [r0, #0]
   d62a8:	42ac      	cmp	r4, r5
   d62aa:	bf28      	it	cs
   d62ac:	462c      	movcs	r4, r5
   d62ae:	4419      	add	r1, r3
   d62b0:	4622      	mov	r2, r4
   d62b2:	4630      	mov	r0, r6
   d62b4:	f001 fb44 	bl	d7940 <strncpy>
	buf[n] = 0;
   d62b8:	2300      	movs	r3, #0
   d62ba:	5533      	strb	r3, [r6, r4]
   d62bc:	bd70      	pop	{r4, r5, r6, pc}

000d62be <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d62be:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d62c0:	6800      	ldr	r0, [r0, #0]
   d62c2:	b130      	cbz	r0, d62d2 <_ZNK6String7toFloatEv+0x14>
   d62c4:	f001 f9a4 	bl	d7610 <atof>
   d62c8:	ec51 0b10 	vmov	r0, r1, d0
   d62cc:	f001 f950 	bl	d7570 <__aeabi_d2f>
   d62d0:	e000      	b.n	d62d4 <_ZNK6String7toFloatEv+0x16>
	return 0;
   d62d2:	2000      	movs	r0, #0
}
   d62d4:	ee00 0a10 	vmov	s0, r0
   d62d8:	bd08      	pop	{r3, pc}

000d62da <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d62da:	4601      	mov	r1, r0
   d62dc:	2200      	movs	r2, #0
   d62de:	208c      	movs	r0, #140	; 0x8c
   d62e0:	f7fe be48 	b.w	d4f74 <HAL_Core_System_Reset_Ex>

000d62e4 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d62e4:	2000      	movs	r0, #0
   d62e6:	f7ff bff8 	b.w	d62da <_ZN11SystemClass5resetEm>
	...

000d62ec <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d62ec:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d62ee:	4c09      	ldr	r4, [pc, #36]	; (d6314 <_GLOBAL__sub_I_System+0x28>)
   d62f0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d62f2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d62f6:	6020      	str	r0, [r4, #0]
   d62f8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d62fa:	71a0      	strb	r0, [r4, #6]
   d62fc:	8120      	strh	r0, [r4, #8]
   d62fe:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6300:	f7fe ffb8 	bl	d5274 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6304:	4620      	mov	r0, r4
   d6306:	4a04      	ldr	r2, [pc, #16]	; (d6318 <_GLOBAL__sub_I_System+0x2c>)
   d6308:	4904      	ldr	r1, [pc, #16]	; (d631c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d630a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d630e:	f000 bb29 	b.w	d6964 <__aeabi_atexit>
   d6312:	bf00      	nop
   d6314:	2003e56c 	.word	0x2003e56c
   d6318:	2003e250 	.word	0x2003e250
   d631c:	000d40d5 	.word	0x000d40d5

000d6320 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6320:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d6322:	4b14      	ldr	r3, [pc, #80]	; (d6374 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6324:	4f14      	ldr	r7, [pc, #80]	; (d6378 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6326:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6328:	4b14      	ldr	r3, [pc, #80]	; (d637c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d632a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d632c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d632e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6330:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d6332:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6334:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6336:	d01b      	beq.n	d6370 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6338:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d633a:	ad01      	add	r5, sp, #4
   d633c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6340:	f001 f97c 	bl	d763c <localtime>
	calendar_time->tm_year += 1900;
   d6344:	6943      	ldr	r3, [r0, #20]
   d6346:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d634a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d634c:	4604      	mov	r4, r0
   d634e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6356:	f8d4 e000 	ldr.w	lr, [r4]
   d635a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d635e:	ad01      	add	r5, sp, #4
   d6360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6362:	4c07      	ldr	r4, [pc, #28]	; (d6380 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d6364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d636a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d636c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d6370:	b00b      	add	sp, #44	; 0x2c
   d6372:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6374:	2003e5a8 	.word	0x2003e5a8
   d6378:	2003e5a4 	.word	0x2003e5a4
   d637c:	2003e5a0 	.word	0x2003e5a0
   d6380:	2003e578 	.word	0x2003e578

000d6384 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6384:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6386:	2000      	movs	r0, #0
   d6388:	f7ff f800 	bl	d538c <spark_sync_time_pending>
   d638c:	b128      	cbz	r0, d639a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d638e:	f7fe ffd5 	bl	d533c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6392:	f080 0001 	eor.w	r0, r0, #1
   d6396:	b2c0      	uxtb	r0, r0
   d6398:	bd08      	pop	{r3, pc}
   d639a:	2001      	movs	r0, #1
    }
   d639c:	bd08      	pop	{r3, pc}

000d639e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d639e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d63a0:	2000      	movs	r0, #0
   d63a2:	f7fe fe27 	bl	d4ff4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d63a6:	4604      	mov	r4, r0
   d63a8:	b968      	cbnz	r0, d63c6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d63aa:	f7fe ff5b 	bl	d5264 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d63ae:	2801      	cmp	r0, #1
   d63b0:	d10b      	bne.n	d63ca <_ZN9TimeClass7isValidEv+0x2c>
   d63b2:	4620      	mov	r0, r4
   d63b4:	f7fe ff86 	bl	d52c4 <system_thread_get_state>
   d63b8:	b938      	cbnz	r0, d63ca <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d63ba:	f7ff ffe3 	bl	d6384 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d63be:	b930      	cbnz	r0, d63ce <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d63c0:	f7fe ffac 	bl	d531c <spark_process>
   d63c4:	e7f9      	b.n	d63ba <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d63c6:	2001      	movs	r0, #1
   d63c8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d63ca:	2000      	movs	r0, #0
   d63cc:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d63ce:	f7ff ffd9 	bl	d6384 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d63d2:	2000      	movs	r0, #0
   d63d4:	f7fe fe0e 	bl	d4ff4 <HAL_RTC_Time_Is_Valid>
   d63d8:	3000      	adds	r0, #0
   d63da:	bf18      	it	ne
   d63dc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d63de:	bd10      	pop	{r4, pc}

000d63e0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d63e0:	b508      	push	{r3, lr}
    (void)isValid();
   d63e2:	f7ff ffdc 	bl	d639e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d63e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d63ea:	f7fe bddb 	b.w	d4fa4 <HAL_RTC_Get_UnixTime>
	...

000d63f0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d63f0:	b508      	push	{r3, lr}
	return hour(now());
   d63f2:	f7ff fff5 	bl	d63e0 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d63f6:	f7ff ff93 	bl	d6320 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d63fa:	4b01      	ldr	r3, [pc, #4]	; (d6400 <_ZN9TimeClass4hourEv+0x10>)
   d63fc:	6898      	ldr	r0, [r3, #8]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	2003e578 	.word	0x2003e578

000d6404 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6404:	b508      	push	{r3, lr}
	return minute(now());
   d6406:	f7ff ffeb 	bl	d63e0 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d640a:	f7ff ff89 	bl	d6320 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d640e:	4b01      	ldr	r3, [pc, #4]	; (d6414 <_ZN9TimeClass6minuteEv+0x10>)
   d6410:	6858      	ldr	r0, [r3, #4]
   d6412:	bd08      	pop	{r3, pc}
   d6414:	2003e578 	.word	0x2003e578

000d6418 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6418:	4b02      	ldr	r3, [pc, #8]	; (d6424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	4b02      	ldr	r3, [pc, #8]	; (d6428 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d641e:	601a      	str	r2, [r3, #0]
   d6420:	4770      	bx	lr
   d6422:	bf00      	nop
   d6424:	2003e160 	.word	0x2003e160
   d6428:	2003e59c 	.word	0x2003e59c

000d642c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d642c:	4770      	bx	lr

000d642e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d642e:	7441      	strb	r1, [r0, #17]
   d6430:	4770      	bx	lr

000d6432 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6432:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6434:	7c00      	ldrb	r0, [r0, #16]
   d6436:	f7fe fed5 	bl	d51e4 <HAL_USART_Available_Data_For_Write>
}
   d643a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d643e:	bd08      	pop	{r3, pc}

000d6440 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6440:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6442:	7c00      	ldrb	r0, [r0, #16]
   d6444:	f7fe fea6 	bl	d5194 <HAL_USART_Available_Data>
}
   d6448:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d644c:	bd08      	pop	{r3, pc}

000d644e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d644e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6450:	7c00      	ldrb	r0, [r0, #16]
   d6452:	f7fe feaf 	bl	d51b4 <HAL_USART_Peek_Data>
}
   d6456:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d645a:	bf28      	it	cs
   d645c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6460:	bd08      	pop	{r3, pc}

000d6462 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6462:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6464:	7c00      	ldrb	r0, [r0, #16]
   d6466:	f7fe fe9d 	bl	d51a4 <HAL_USART_Read_Data>
}
   d646a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d646e:	bf28      	it	cs
   d6470:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6474:	bd08      	pop	{r3, pc}

000d6476 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6476:	7c00      	ldrb	r0, [r0, #16]
   d6478:	f7fe bea4 	b.w	d51c4 <HAL_USART_Flush_Data>

000d647c <_ZN11USARTSerialD0Ev>:
   d647c:	b510      	push	{r4, lr}
   d647e:	2114      	movs	r1, #20
   d6480:	4604      	mov	r4, r0
   d6482:	f000 fa74 	bl	d696e <_ZdlPvj>
   d6486:	4620      	mov	r0, r4
   d6488:	bd10      	pop	{r4, pc}

000d648a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d648a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d648c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d648e:	4604      	mov	r4, r0
   d6490:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6492:	b925      	cbnz	r5, d649e <_ZN11USARTSerial5writeEh+0x14>
   d6494:	7c00      	ldrb	r0, [r0, #16]
   d6496:	f7fe fea5 	bl	d51e4 <HAL_USART_Available_Data_For_Write>
   d649a:	2800      	cmp	r0, #0
   d649c:	dd05      	ble.n	d64aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d649e:	4631      	mov	r1, r6
   d64a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d64a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d64a6:	f7fe be6d 	b.w	d5184 <HAL_USART_Write_Data>
  }
  return 0;
}
   d64aa:	4628      	mov	r0, r5
   d64ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d64b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d64b0:	b510      	push	{r4, lr}
   d64b2:	4604      	mov	r4, r0
   d64b4:	4608      	mov	r0, r1
   d64b6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64b8:	2200      	movs	r2, #0
   d64ba:	6062      	str	r2, [r4, #4]
   d64bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d64c0:	60a2      	str	r2, [r4, #8]
   d64c2:	4a05      	ldr	r2, [pc, #20]	; (d64d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d64c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d64c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d64c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d64ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d64cc:	461a      	mov	r2, r3
   d64ce:	f7fe fe51 	bl	d5174 <HAL_USART_Init>
}
   d64d2:	4620      	mov	r0, r4
   d64d4:	bd10      	pop	{r4, pc}
   d64d6:	bf00      	nop
   d64d8:	000da1c4 	.word	0x000da1c4

000d64dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d64dc:	7c00      	ldrb	r0, [r0, #16]
   d64de:	f7fe be79 	b.w	d51d4 <HAL_USART_Is_Enabled>
	...

000d64e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d64e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d64e6:	4d0c      	ldr	r5, [pc, #48]	; (d6518 <_Z22__fetch_global_Serial1v+0x34>)
   d64e8:	6829      	ldr	r1, [r5, #0]
   d64ea:	f011 0401 	ands.w	r4, r1, #1
   d64ee:	d111      	bne.n	d6514 <_Z22__fetch_global_Serial1v+0x30>
   d64f0:	4628      	mov	r0, r5
   d64f2:	f7fd fdd8 	bl	d40a6 <__cxa_guard_acquire>
   d64f6:	b168      	cbz	r0, d6514 <_Z22__fetch_global_Serial1v+0x30>
   d64f8:	4a08      	ldr	r2, [pc, #32]	; (d651c <_Z22__fetch_global_Serial1v+0x38>)
   d64fa:	4b09      	ldr	r3, [pc, #36]	; (d6520 <_Z22__fetch_global_Serial1v+0x3c>)
   d64fc:	4809      	ldr	r0, [pc, #36]	; (d6524 <_Z22__fetch_global_Serial1v+0x40>)
   d64fe:	4621      	mov	r1, r4
   d6500:	f7ff ffd6 	bl	d64b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6504:	4628      	mov	r0, r5
   d6506:	f7fd fdd3 	bl	d40b0 <__cxa_guard_release>
   d650a:	4a07      	ldr	r2, [pc, #28]	; (d6528 <_Z22__fetch_global_Serial1v+0x44>)
   d650c:	4907      	ldr	r1, [pc, #28]	; (d652c <_Z22__fetch_global_Serial1v+0x48>)
   d650e:	4805      	ldr	r0, [pc, #20]	; (d6524 <_Z22__fetch_global_Serial1v+0x40>)
   d6510:	f000 fa28 	bl	d6964 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6514:	4803      	ldr	r0, [pc, #12]	; (d6524 <_Z22__fetch_global_Serial1v+0x40>)
   d6516:	bd38      	pop	{r3, r4, r5, pc}
   d6518:	2003e644 	.word	0x2003e644
   d651c:	2003e648 	.word	0x2003e648
   d6520:	2003e5c0 	.word	0x2003e5c0
   d6524:	2003e5ac 	.word	0x2003e5ac
   d6528:	2003e250 	.word	0x2003e250
   d652c:	000d642d 	.word	0x000d642d

000d6530 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6530:	7441      	strb	r1, [r0, #17]
   d6532:	4770      	bx	lr

000d6534 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6534:	4770      	bx	lr

000d6536 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6536:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6538:	2100      	movs	r1, #0
   d653a:	7c00      	ldrb	r0, [r0, #16]
   d653c:	f7fe fe7a 	bl	d5234 <HAL_USB_USART_Receive_Data>
}
   d6540:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6544:	bf28      	it	cs
   d6546:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d654a:	bd08      	pop	{r3, pc}

000d654c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d654c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d654e:	2101      	movs	r1, #1
   d6550:	7c00      	ldrb	r0, [r0, #16]
   d6552:	f7fe fe6f 	bl	d5234 <HAL_USB_USART_Receive_Data>
}
   d6556:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d655a:	bf28      	it	cs
   d655c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6560:	bd08      	pop	{r3, pc}

000d6562 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6562:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6564:	7c00      	ldrb	r0, [r0, #16]
   d6566:	f7fe fe5d 	bl	d5224 <HAL_USB_USART_Available_Data_For_Write>
}
   d656a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d656e:	bd08      	pop	{r3, pc}

000d6570 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6570:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6572:	7c00      	ldrb	r0, [r0, #16]
   d6574:	f7fe fe4e 	bl	d5214 <HAL_USB_USART_Available_Data>
}
   d6578:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d657c:	bd08      	pop	{r3, pc}

000d657e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d657e:	7c00      	ldrb	r0, [r0, #16]
   d6580:	f7fe be68 	b.w	d5254 <HAL_USB_USART_Flush_Data>

000d6584 <_ZN9USBSerialD0Ev>:
   d6584:	b510      	push	{r4, lr}
   d6586:	2114      	movs	r1, #20
   d6588:	4604      	mov	r4, r0
   d658a:	f000 f9f0 	bl	d696e <_ZdlPvj>
   d658e:	4620      	mov	r0, r4
   d6590:	bd10      	pop	{r4, pc}

000d6592 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6592:	b538      	push	{r3, r4, r5, lr}
   d6594:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6596:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6598:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d659a:	f7fe fe43 	bl	d5224 <HAL_USB_USART_Available_Data_For_Write>
   d659e:	2800      	cmp	r0, #0
   d65a0:	dc01      	bgt.n	d65a6 <_ZN9USBSerial5writeEh+0x14>
   d65a2:	7c60      	ldrb	r0, [r4, #17]
   d65a4:	b128      	cbz	r0, d65b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d65a6:	4629      	mov	r1, r5
   d65a8:	7c20      	ldrb	r0, [r4, #16]
   d65aa:	f7fe fe4b 	bl	d5244 <HAL_USB_USART_Send_Data>
   d65ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d65b2:	bd38      	pop	{r3, r4, r5, pc}

000d65b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65b4:	b510      	push	{r4, lr}
   d65b6:	4604      	mov	r4, r0
   d65b8:	2300      	movs	r3, #0
   d65ba:	6063      	str	r3, [r4, #4]
   d65bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65c0:	60a3      	str	r3, [r4, #8]
   d65c2:	4b05      	ldr	r3, [pc, #20]	; (d65d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d65c4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d65c6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65c8:	4608      	mov	r0, r1
{
  _serial = serial;
   d65ca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d65cc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d65ce:	4611      	mov	r1, r2
   d65d0:	f7fe fe10 	bl	d51f4 <HAL_USB_USART_Init>
}
   d65d4:	4620      	mov	r0, r4
   d65d6:	bd10      	pop	{r4, pc}
   d65d8:	000da1f4 	.word	0x000da1f4

000d65dc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d65dc:	2200      	movs	r2, #0
   d65de:	7c00      	ldrb	r0, [r0, #16]
   d65e0:	f7fe be10 	b.w	d5204 <HAL_USB_USART_Begin>

000d65e4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d65e6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d65ea:	2100      	movs	r1, #0
   d65ec:	f001 f92d 	bl	d784a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d65f0:	4620      	mov	r0, r4
   d65f2:	bd10      	pop	{r4, pc}

000d65f4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d65f4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65f6:	4d0e      	ldr	r5, [pc, #56]	; (d6630 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d65f8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d65fa:	a801      	add	r0, sp, #4
   d65fc:	f7ff fff2 	bl	d65e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6600:	6829      	ldr	r1, [r5, #0]
   d6602:	f011 0401 	ands.w	r4, r1, #1
   d6606:	d110      	bne.n	d662a <_Z16_fetch_usbserialv+0x36>
   d6608:	4628      	mov	r0, r5
   d660a:	f7fd fd4c 	bl	d40a6 <__cxa_guard_acquire>
   d660e:	b160      	cbz	r0, d662a <_Z16_fetch_usbserialv+0x36>
   d6610:	aa01      	add	r2, sp, #4
   d6612:	4621      	mov	r1, r4
   d6614:	4807      	ldr	r0, [pc, #28]	; (d6634 <_Z16_fetch_usbserialv+0x40>)
   d6616:	f7ff ffcd 	bl	d65b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d661a:	4628      	mov	r0, r5
   d661c:	f7fd fd48 	bl	d40b0 <__cxa_guard_release>
   d6620:	4a05      	ldr	r2, [pc, #20]	; (d6638 <_Z16_fetch_usbserialv+0x44>)
   d6622:	4906      	ldr	r1, [pc, #24]	; (d663c <_Z16_fetch_usbserialv+0x48>)
   d6624:	4803      	ldr	r0, [pc, #12]	; (d6634 <_Z16_fetch_usbserialv+0x40>)
   d6626:	f000 f99d 	bl	d6964 <__aeabi_atexit>
	return _usbserial;
}
   d662a:	4802      	ldr	r0, [pc, #8]	; (d6634 <_Z16_fetch_usbserialv+0x40>)
   d662c:	b007      	add	sp, #28
   d662e:	bd30      	pop	{r4, r5, pc}
   d6630:	2003e6cc 	.word	0x2003e6cc
   d6634:	2003e6d0 	.word	0x2003e6d0
   d6638:	2003e250 	.word	0x2003e250
   d663c:	000d6535 	.word	0x000d6535

000d6640 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6640:	2200      	movs	r2, #0
   d6642:	4611      	mov	r1, r2
   d6644:	6840      	ldr	r0, [r0, #4]
   d6646:	f7fe bec9 	b.w	d53dc <network_ready>

000d664a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d664a:	2200      	movs	r2, #0
   d664c:	4611      	mov	r1, r2
   d664e:	6840      	ldr	r0, [r0, #4]
   d6650:	f7fe bee4 	b.w	d541c <network_listening>

000d6654 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6654:	2200      	movs	r2, #0
   d6656:	4611      	mov	r1, r2
   d6658:	6840      	ldr	r0, [r0, #4]
   d665a:	f7fe beef 	b.w	d543c <network_get_listen_timeout>

000d665e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d665e:	2200      	movs	r2, #0
   d6660:	6840      	ldr	r0, [r0, #4]
   d6662:	f7fe bee3 	b.w	d542c <network_set_listen_timeout>

000d6666 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6666:	2200      	movs	r2, #0
   d6668:	f081 0101 	eor.w	r1, r1, #1
   d666c:	6840      	ldr	r0, [r0, #4]
   d666e:	f7fe becd 	b.w	d540c <network_listen>

000d6672 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6672:	2300      	movs	r3, #0
   d6674:	461a      	mov	r2, r3
   d6676:	4619      	mov	r1, r3
   d6678:	6840      	ldr	r0, [r0, #4]
   d667a:	f7fe bebf 	b.w	d53fc <network_off>

000d667e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d667e:	2300      	movs	r3, #0
   d6680:	461a      	mov	r2, r3
   d6682:	4619      	mov	r1, r3
   d6684:	6840      	ldr	r0, [r0, #4]
   d6686:	f7fe beb1 	b.w	d53ec <network_on>

000d668a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d668a:	2200      	movs	r2, #0
   d668c:	4611      	mov	r1, r2
   d668e:	6840      	ldr	r0, [r0, #4]
   d6690:	f7fe be94 	b.w	d53bc <network_connecting>

000d6694 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6694:	2200      	movs	r2, #0
   d6696:	2102      	movs	r1, #2
   d6698:	6840      	ldr	r0, [r0, #4]
   d669a:	f7fe be97 	b.w	d53cc <network_disconnect>

000d669e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d669e:	2300      	movs	r3, #0
   d66a0:	461a      	mov	r2, r3
   d66a2:	6840      	ldr	r0, [r0, #4]
   d66a4:	f7fe be82 	b.w	d53ac <network_connect>

000d66a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d66a8:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d66aa:	2204      	movs	r2, #4
   d66ac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d66ae:	4a02      	ldr	r2, [pc, #8]	; (d66b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d66b0:	601a      	str	r2, [r3, #0]
   d66b2:	4770      	bx	lr
   d66b4:	2003e6e4 	.word	0x2003e6e4
   d66b8:	000da224 	.word	0x000da224

000d66bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d66bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d66be:	4b0c      	ldr	r3, [pc, #48]	; (d66f0 <serialEventRun+0x34>)
   d66c0:	b133      	cbz	r3, d66d0 <serialEventRun+0x14>
   d66c2:	f7ff ff97 	bl	d65f4 <_Z16_fetch_usbserialv>
   d66c6:	6803      	ldr	r3, [r0, #0]
   d66c8:	691b      	ldr	r3, [r3, #16]
   d66ca:	4798      	blx	r3
   d66cc:	2800      	cmp	r0, #0
   d66ce:	dc09      	bgt.n	d66e4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d66d0:	4b08      	ldr	r3, [pc, #32]	; (d66f4 <serialEventRun+0x38>)
   d66d2:	b163      	cbz	r3, d66ee <serialEventRun+0x32>
   d66d4:	f7ff ff06 	bl	d64e4 <_Z22__fetch_global_Serial1v>
   d66d8:	6803      	ldr	r3, [r0, #0]
   d66da:	691b      	ldr	r3, [r3, #16]
   d66dc:	4798      	blx	r3
   d66de:	2800      	cmp	r0, #0
   d66e0:	dc03      	bgt.n	d66ea <serialEventRun+0x2e>
   d66e2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d66e4:	f3af 8000 	nop.w
   d66e8:	e7f2      	b.n	d66d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d66ea:	f3af 8000 	nop.w
   d66ee:	bd08      	pop	{r3, pc}
	...

000d66f8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d66f8:	b508      	push	{r3, lr}
	serialEventRun();
   d66fa:	f7ff ffdf 	bl	d66bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d66fe:	f7fe fc49 	bl	d4f94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6702:	4b01      	ldr	r3, [pc, #4]	; (d6708 <_post_loop+0x10>)
   d6704:	6018      	str	r0, [r3, #0]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	2003e700 	.word	0x2003e700

000d670c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d670c:	4802      	ldr	r0, [pc, #8]	; (d6718 <_Z33system_initialize_user_backup_ramv+0xc>)
   d670e:	4a03      	ldr	r2, [pc, #12]	; (d671c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6710:	4903      	ldr	r1, [pc, #12]	; (d6720 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6712:	1a12      	subs	r2, r2, r0
   d6714:	f001 b88e 	b.w	d7834 <memcpy>
   d6718:	2003f400 	.word	0x2003f400
   d671c:	2003f404 	.word	0x2003f404
   d6720:	000da5f0 	.word	0x000da5f0

000d6724 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6724:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6726:	2300      	movs	r3, #0
   d6728:	9300      	str	r3, [sp, #0]
   d672a:	461a      	mov	r2, r3
   d672c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6730:	f7fe fdda 	bl	d52e8 <system_ctrl_set_result>
}
   d6734:	b003      	add	sp, #12
   d6736:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d673c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d673c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d673e:	8843      	ldrh	r3, [r0, #2]
   d6740:	2b0a      	cmp	r3, #10
   d6742:	d008      	beq.n	d6756 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6744:	2b50      	cmp	r3, #80	; 0x50
   d6746:	d109      	bne.n	d675c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6748:	4b09      	ldr	r3, [pc, #36]	; (d6770 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d674a:	681b      	ldr	r3, [r3, #0]
   d674c:	b13b      	cbz	r3, d675e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d674e:	b003      	add	sp, #12
   d6750:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6754:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6756:	f7ff ffe5 	bl	d6724 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d675a:	e006      	b.n	d676a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d675c:	2300      	movs	r3, #0
   d675e:	9300      	str	r3, [sp, #0]
   d6760:	461a      	mov	r2, r3
   d6762:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6766:	f7fe fdbf 	bl	d52e8 <system_ctrl_set_result>
        break;
    }
}
   d676a:	b003      	add	sp, #12
   d676c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6770:	2003e6ec 	.word	0x2003e6ec

000d6774 <module_user_init_hook>:

void module_user_init_hook()
{
   d6774:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6776:	4c10      	ldr	r4, [pc, #64]	; (d67b8 <module_user_init_hook+0x44>)
   d6778:	4d10      	ldr	r5, [pc, #64]	; (d67bc <module_user_init_hook+0x48>)
   d677a:	6823      	ldr	r3, [r4, #0]
   d677c:	42ab      	cmp	r3, r5
   d677e:	4b10      	ldr	r3, [pc, #64]	; (d67c0 <module_user_init_hook+0x4c>)
   d6780:	bf0c      	ite	eq
   d6782:	2201      	moveq	r2, #1
   d6784:	2200      	movne	r2, #0
   d6786:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6788:	d002      	beq.n	d6790 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d678a:	f7ff ffbf 	bl	d670c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d678e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6790:	f7fe fbf8 	bl	d4f84 <HAL_RNG_GetRandomNumber>
   d6794:	4604      	mov	r4, r0
    srand(seed);
   d6796:	f001 f861 	bl	d785c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d679a:	4b0a      	ldr	r3, [pc, #40]	; (d67c4 <module_user_init_hook+0x50>)
   d679c:	b113      	cbz	r3, d67a4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d679e:	4620      	mov	r0, r4
   d67a0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d67a4:	2100      	movs	r1, #0
   d67a6:	4807      	ldr	r0, [pc, #28]	; (d67c4 <module_user_init_hook+0x50>)
   d67a8:	f7fe fdf8 	bl	d539c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67ac:	2100      	movs	r1, #0
   d67ae:	4806      	ldr	r0, [pc, #24]	; (d67c8 <module_user_init_hook+0x54>)
}
   d67b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67b4:	f7fe bd8e 	b.w	d52d4 <system_ctrl_set_app_request_handler>
   d67b8:	2003f400 	.word	0x2003f400
   d67bc:	9a271c1e 	.word	0x9a271c1e
   d67c0:	2003e6f0 	.word	0x2003e6f0
   d67c4:	00000000 	.word	0x00000000
   d67c8:	000d673d 	.word	0x000d673d

000d67cc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d67cc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d67ce:	4e18      	ldr	r6, [pc, #96]	; (d6830 <pinAvailable+0x64>)
   d67d0:	6831      	ldr	r1, [r6, #0]
   d67d2:	f011 0501 	ands.w	r5, r1, #1
   d67d6:	4604      	mov	r4, r0
   d67d8:	d10a      	bne.n	d67f0 <pinAvailable+0x24>
   d67da:	4630      	mov	r0, r6
   d67dc:	f7fd fc63 	bl	d40a6 <__cxa_guard_acquire>
   d67e0:	b130      	cbz	r0, d67f0 <pinAvailable+0x24>
   d67e2:	4629      	mov	r1, r5
   d67e4:	4813      	ldr	r0, [pc, #76]	; (d6834 <pinAvailable+0x68>)
   d67e6:	f7ff fcbf 	bl	d6168 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d67ea:	4630      	mov	r0, r6
   d67ec:	f7fd fc60 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d67f0:	4810      	ldr	r0, [pc, #64]	; (d6834 <pinAvailable+0x68>)
   d67f2:	f7ff fcc3 	bl	d617c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d67f6:	b128      	cbz	r0, d6804 <pinAvailable+0x38>
   d67f8:	f1a4 030b 	sub.w	r3, r4, #11
   d67fc:	2b02      	cmp	r3, #2
   d67fe:	d801      	bhi.n	d6804 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6800:	2000      	movs	r0, #0
   d6802:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6804:	f000 f888 	bl	d6918 <_Z19__fetch_global_Wirev>
   d6808:	f7ff fa5a 	bl	d5cc0 <_ZN7TwoWire9isEnabledEv>
   d680c:	b108      	cbz	r0, d6812 <pinAvailable+0x46>
   d680e:	2c01      	cmp	r4, #1
   d6810:	d9f6      	bls.n	d6800 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6812:	f7ff fe67 	bl	d64e4 <_Z22__fetch_global_Serial1v>
   d6816:	f7ff fe61 	bl	d64dc <_ZN11USARTSerial9isEnabledEv>
   d681a:	b118      	cbz	r0, d6824 <pinAvailable+0x58>
   d681c:	f1a4 0309 	sub.w	r3, r4, #9
   d6820:	2b01      	cmp	r3, #1
   d6822:	d9ed      	bls.n	d6800 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6824:	2c23      	cmp	r4, #35	; 0x23
   d6826:	bf8c      	ite	hi
   d6828:	2000      	movhi	r0, #0
   d682a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d682c:	bd70      	pop	{r4, r5, r6, pc}
   d682e:	bf00      	nop
   d6830:	2003e6f4 	.word	0x2003e6f4
   d6834:	2003e6f8 	.word	0x2003e6f8

000d6838 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6838:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d683a:	b538      	push	{r3, r4, r5, lr}
   d683c:	4604      	mov	r4, r0
   d683e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6840:	d80a      	bhi.n	d6858 <pinMode+0x20>
   d6842:	29ff      	cmp	r1, #255	; 0xff
   d6844:	d008      	beq.n	d6858 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6846:	f7ff ffc1 	bl	d67cc <pinAvailable>
   d684a:	b128      	cbz	r0, d6858 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d684c:	4629      	mov	r1, r5
   d684e:	4620      	mov	r0, r4
}
   d6850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6854:	f7fe bbee 	b.w	d5034 <HAL_Pin_Mode>
   d6858:	bd38      	pop	{r3, r4, r5, pc}

000d685a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d685a:	b538      	push	{r3, r4, r5, lr}
   d685c:	4604      	mov	r4, r0
   d685e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6860:	f7fe fbf0 	bl	d5044 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6864:	28ff      	cmp	r0, #255	; 0xff
   d6866:	d010      	beq.n	d688a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6868:	2806      	cmp	r0, #6
   d686a:	d804      	bhi.n	d6876 <digitalWrite+0x1c>
   d686c:	234d      	movs	r3, #77	; 0x4d
   d686e:	fa23 f000 	lsr.w	r0, r3, r0
   d6872:	07c3      	lsls	r3, r0, #31
   d6874:	d409      	bmi.n	d688a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6876:	4620      	mov	r0, r4
   d6878:	f7ff ffa8 	bl	d67cc <pinAvailable>
   d687c:	b128      	cbz	r0, d688a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d687e:	4629      	mov	r1, r5
   d6880:	4620      	mov	r0, r4
}
   d6882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6886:	f7fe bbe5 	b.w	d5054 <HAL_GPIO_Write>
   d688a:	bd38      	pop	{r3, r4, r5, pc}

000d688c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d688c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d688e:	b510      	push	{r4, lr}
   d6890:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6892:	bf9c      	itt	ls
   d6894:	340e      	addls	r4, #14
   d6896:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6898:	4620      	mov	r0, r4
   d689a:	f7ff ff97 	bl	d67cc <pinAvailable>
   d689e:	b150      	cbz	r0, d68b6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d68a0:	2103      	movs	r1, #3
   d68a2:	4620      	mov	r0, r4
   d68a4:	f7fe fbbe 	bl	d5024 <HAL_Validate_Pin_Function>
   d68a8:	2803      	cmp	r0, #3
   d68aa:	d104      	bne.n	d68b6 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d68ac:	4620      	mov	r0, r4
}
   d68ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d68b2:	f7fe bbd7 	b.w	d5064 <HAL_ADC_Read>
}
   d68b6:	2000      	movs	r0, #0
   d68b8:	bd10      	pop	{r4, pc}
	...

000d68bc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d68bc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d68be:	4c07      	ldr	r4, [pc, #28]	; (d68dc <_Z21__fetch_global_EEPROMv+0x20>)
   d68c0:	6823      	ldr	r3, [r4, #0]
   d68c2:	07db      	lsls	r3, r3, #31
   d68c4:	d408      	bmi.n	d68d8 <_Z21__fetch_global_EEPROMv+0x1c>
   d68c6:	4620      	mov	r0, r4
   d68c8:	f7fd fbed 	bl	d40a6 <__cxa_guard_acquire>
   d68cc:	b120      	cbz	r0, d68d8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d68ce:	f7fe fb71 	bl	d4fb4 <HAL_EEPROM_Init>
   d68d2:	4620      	mov	r0, r4
   d68d4:	f7fd fbec 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d68d8:	4801      	ldr	r0, [pc, #4]	; (d68e0 <_Z21__fetch_global_EEPROMv+0x24>)
   d68da:	bd10      	pop	{r4, pc}
   d68dc:	2003e704 	.word	0x2003e704
   d68e0:	2003e708 	.word	0x2003e708

000d68e4 <_Z17acquireWireBufferv>:
   d68e4:	b570      	push	{r4, r5, r6, lr}
   d68e6:	4604      	mov	r4, r0
   d68e8:	2514      	movs	r5, #20
   d68ea:	462a      	mov	r2, r5
   d68ec:	4e09      	ldr	r6, [pc, #36]	; (d6914 <_Z17acquireWireBufferv+0x30>)
   d68ee:	2100      	movs	r1, #0
   d68f0:	f000 ffab 	bl	d784a <memset>
   d68f4:	8025      	strh	r5, [r4, #0]
   d68f6:	2520      	movs	r5, #32
   d68f8:	4631      	mov	r1, r6
   d68fa:	60a5      	str	r5, [r4, #8]
   d68fc:	6125      	str	r5, [r4, #16]
   d68fe:	4628      	mov	r0, r5
   d6900:	f000 f84f 	bl	d69a2 <_ZnajRKSt9nothrow_t>
   d6904:	4631      	mov	r1, r6
   d6906:	6060      	str	r0, [r4, #4]
   d6908:	4628      	mov	r0, r5
   d690a:	f000 f84a 	bl	d69a2 <_ZnajRKSt9nothrow_t>
   d690e:	60e0      	str	r0, [r4, #12]
   d6910:	4620      	mov	r0, r4
   d6912:	bd70      	pop	{r4, r5, r6, pc}
   d6914:	000da250 	.word	0x000da250

000d6918 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6918:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d691a:	4d0e      	ldr	r5, [pc, #56]	; (d6954 <_Z19__fetch_global_Wirev+0x3c>)
   d691c:	6829      	ldr	r1, [r5, #0]
   d691e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6922:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6924:	d113      	bne.n	d694e <_Z19__fetch_global_Wirev+0x36>
   d6926:	4628      	mov	r0, r5
   d6928:	f7fd fbbd 	bl	d40a6 <__cxa_guard_acquire>
   d692c:	b178      	cbz	r0, d694e <_Z19__fetch_global_Wirev+0x36>
   d692e:	a801      	add	r0, sp, #4
   d6930:	f7ff ffd8 	bl	d68e4 <_Z17acquireWireBufferv>
   d6934:	aa01      	add	r2, sp, #4
   d6936:	4621      	mov	r1, r4
   d6938:	4807      	ldr	r0, [pc, #28]	; (d6958 <_Z19__fetch_global_Wirev+0x40>)
   d693a:	f7ff f96d 	bl	d5c18 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d693e:	4628      	mov	r0, r5
   d6940:	f7fd fbb6 	bl	d40b0 <__cxa_guard_release>
   d6944:	4a05      	ldr	r2, [pc, #20]	; (d695c <_Z19__fetch_global_Wirev+0x44>)
   d6946:	4906      	ldr	r1, [pc, #24]	; (d6960 <_Z19__fetch_global_Wirev+0x48>)
   d6948:	4803      	ldr	r0, [pc, #12]	; (d6958 <_Z19__fetch_global_Wirev+0x40>)
   d694a:	f000 f80b 	bl	d6964 <__aeabi_atexit>
	return wire;
}
   d694e:	4802      	ldr	r0, [pc, #8]	; (d6958 <_Z19__fetch_global_Wirev+0x40>)
   d6950:	b007      	add	sp, #28
   d6952:	bd30      	pop	{r4, r5, pc}
   d6954:	2003e70c 	.word	0x2003e70c
   d6958:	2003e710 	.word	0x2003e710
   d695c:	2003e250 	.word	0x2003e250
   d6960:	000d5bc1 	.word	0x000d5bc1

000d6964 <__aeabi_atexit>:
   d6964:	460b      	mov	r3, r1
   d6966:	4601      	mov	r1, r0
   d6968:	4618      	mov	r0, r3
   d696a:	f000 be59 	b.w	d7620 <__cxa_atexit>

000d696e <_ZdlPvj>:
   d696e:	f7fd bb96 	b.w	d409e <_ZdlPv>
	...

000d6974 <_ZSt15get_new_handlerv>:
   d6974:	4b02      	ldr	r3, [pc, #8]	; (d6980 <_ZSt15get_new_handlerv+0xc>)
   d6976:	6818      	ldr	r0, [r3, #0]
   d6978:	f3bf 8f5f 	dmb	sy
   d697c:	4770      	bx	lr
   d697e:	bf00      	nop
   d6980:	2003e724 	.word	0x2003e724

000d6984 <_ZnwjRKSt9nothrow_t>:
   d6984:	b510      	push	{r4, lr}
   d6986:	2800      	cmp	r0, #0
   d6988:	bf14      	ite	ne
   d698a:	4604      	movne	r4, r0
   d698c:	2401      	moveq	r4, #1
   d698e:	4620      	mov	r0, r4
   d6990:	f7fe fd5c 	bl	d544c <malloc>
   d6994:	b920      	cbnz	r0, d69a0 <_ZnwjRKSt9nothrow_t+0x1c>
   d6996:	f7ff ffed 	bl	d6974 <_ZSt15get_new_handlerv>
   d699a:	b108      	cbz	r0, d69a0 <_ZnwjRKSt9nothrow_t+0x1c>
   d699c:	4780      	blx	r0
   d699e:	e7f6      	b.n	d698e <_ZnwjRKSt9nothrow_t+0xa>
   d69a0:	bd10      	pop	{r4, pc}

000d69a2 <_ZnajRKSt9nothrow_t>:
   d69a2:	f7ff bfef 	b.w	d6984 <_ZnwjRKSt9nothrow_t>

000d69a6 <_ZSt25__throw_bad_function_callv>:
   d69a6:	b508      	push	{r3, lr}
   d69a8:	f7fe fd78 	bl	d549c <abort>

000d69ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d69ac:	4b24      	ldr	r3, [pc, #144]	; (d6a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d69ae:	681a      	ldr	r2, [r3, #0]
   d69b0:	07d0      	lsls	r0, r2, #31
   d69b2:	bf5c      	itt	pl
   d69b4:	2201      	movpl	r2, #1
   d69b6:	601a      	strpl	r2, [r3, #0]
   d69b8:	4b22      	ldr	r3, [pc, #136]	; (d6a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d69ba:	681a      	ldr	r2, [r3, #0]
   d69bc:	07d1      	lsls	r1, r2, #31
   d69be:	bf5c      	itt	pl
   d69c0:	2201      	movpl	r2, #1
   d69c2:	601a      	strpl	r2, [r3, #0]
   d69c4:	4b20      	ldr	r3, [pc, #128]	; (d6a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d69c6:	681a      	ldr	r2, [r3, #0]
   d69c8:	07d2      	lsls	r2, r2, #31
   d69ca:	bf5c      	itt	pl
   d69cc:	2201      	movpl	r2, #1
   d69ce:	601a      	strpl	r2, [r3, #0]
   d69d0:	4b1e      	ldr	r3, [pc, #120]	; (d6a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d69d2:	681a      	ldr	r2, [r3, #0]
   d69d4:	07d0      	lsls	r0, r2, #31
   d69d6:	bf5c      	itt	pl
   d69d8:	2201      	movpl	r2, #1
   d69da:	601a      	strpl	r2, [r3, #0]
   d69dc:	4b1c      	ldr	r3, [pc, #112]	; (d6a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d69de:	681a      	ldr	r2, [r3, #0]
   d69e0:	07d1      	lsls	r1, r2, #31
   d69e2:	bf5c      	itt	pl
   d69e4:	2201      	movpl	r2, #1
   d69e6:	601a      	strpl	r2, [r3, #0]
   d69e8:	4b1a      	ldr	r3, [pc, #104]	; (d6a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d69ea:	681a      	ldr	r2, [r3, #0]
   d69ec:	07d2      	lsls	r2, r2, #31
   d69ee:	bf5c      	itt	pl
   d69f0:	2201      	movpl	r2, #1
   d69f2:	601a      	strpl	r2, [r3, #0]
   d69f4:	4b18      	ldr	r3, [pc, #96]	; (d6a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d69f6:	681a      	ldr	r2, [r3, #0]
   d69f8:	07d0      	lsls	r0, r2, #31
   d69fa:	bf5c      	itt	pl
   d69fc:	2201      	movpl	r2, #1
   d69fe:	601a      	strpl	r2, [r3, #0]
   d6a00:	4b16      	ldr	r3, [pc, #88]	; (d6a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6a02:	681a      	ldr	r2, [r3, #0]
   d6a04:	07d1      	lsls	r1, r2, #31
   d6a06:	bf5c      	itt	pl
   d6a08:	2201      	movpl	r2, #1
   d6a0a:	601a      	strpl	r2, [r3, #0]
   d6a0c:	4b14      	ldr	r3, [pc, #80]	; (d6a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6a0e:	681a      	ldr	r2, [r3, #0]
   d6a10:	07d2      	lsls	r2, r2, #31
   d6a12:	bf5c      	itt	pl
   d6a14:	2201      	movpl	r2, #1
   d6a16:	601a      	strpl	r2, [r3, #0]
   d6a18:	4b12      	ldr	r3, [pc, #72]	; (d6a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6a1a:	681a      	ldr	r2, [r3, #0]
   d6a1c:	07d0      	lsls	r0, r2, #31
   d6a1e:	bf5c      	itt	pl
   d6a20:	2201      	movpl	r2, #1
   d6a22:	601a      	strpl	r2, [r3, #0]
   d6a24:	4b10      	ldr	r3, [pc, #64]	; (d6a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6a26:	681a      	ldr	r2, [r3, #0]
   d6a28:	07d1      	lsls	r1, r2, #31
   d6a2a:	bf5c      	itt	pl
   d6a2c:	2201      	movpl	r2, #1
   d6a2e:	601a      	strpl	r2, [r3, #0]
   d6a30:	4b0e      	ldr	r3, [pc, #56]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6a32:	681a      	ldr	r2, [r3, #0]
   d6a34:	07d2      	lsls	r2, r2, #31
   d6a36:	bf5c      	itt	pl
   d6a38:	2201      	movpl	r2, #1
   d6a3a:	601a      	strpl	r2, [r3, #0]
   d6a3c:	4770      	bx	lr
   d6a3e:	bf00      	nop
   d6a40:	2003e754 	.word	0x2003e754
   d6a44:	2003e750 	.word	0x2003e750
   d6a48:	2003e74c 	.word	0x2003e74c
   d6a4c:	2003e748 	.word	0x2003e748
   d6a50:	2003e744 	.word	0x2003e744
   d6a54:	2003e740 	.word	0x2003e740
   d6a58:	2003e73c 	.word	0x2003e73c
   d6a5c:	2003e738 	.word	0x2003e738
   d6a60:	2003e734 	.word	0x2003e734
   d6a64:	2003e730 	.word	0x2003e730
   d6a68:	2003e72c 	.word	0x2003e72c
   d6a6c:	2003e728 	.word	0x2003e728

000d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a70:	4b18      	ldr	r3, [pc, #96]	; (d6ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d1      	lsls	r1, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4b16      	ldr	r3, [pc, #88]	; (d6ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d2      	lsls	r2, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b14      	ldr	r3, [pc, #80]	; (d6adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d0      	lsls	r0, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b12      	ldr	r3, [pc, #72]	; (d6ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d1      	lsls	r1, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b10      	ldr	r3, [pc, #64]	; (d6ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d2      	lsls	r2, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b0e      	ldr	r3, [pc, #56]	; (d6ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d0      	lsls	r0, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b0c      	ldr	r3, [pc, #48]	; (d6aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d1      	lsls	r1, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b0a      	ldr	r3, [pc, #40]	; (d6af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d2      	lsls	r2, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4770      	bx	lr
   d6ad2:	bf00      	nop
   d6ad4:	2003e774 	.word	0x2003e774
   d6ad8:	2003e770 	.word	0x2003e770
   d6adc:	2003e76c 	.word	0x2003e76c
   d6ae0:	2003e768 	.word	0x2003e768
   d6ae4:	2003e764 	.word	0x2003e764
   d6ae8:	2003e760 	.word	0x2003e760
   d6aec:	2003e75c 	.word	0x2003e75c
   d6af0:	2003e758 	.word	0x2003e758

000d6af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6af4:	4b18      	ldr	r3, [pc, #96]	; (d6b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d1      	lsls	r1, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4b16      	ldr	r3, [pc, #88]	; (d6b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d2      	lsls	r2, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b14      	ldr	r3, [pc, #80]	; (d6b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d0      	lsls	r0, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b12      	ldr	r3, [pc, #72]	; (d6b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d1      	lsls	r1, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b10      	ldr	r3, [pc, #64]	; (d6b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d2      	lsls	r2, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b0e      	ldr	r3, [pc, #56]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d0      	lsls	r0, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b0c      	ldr	r3, [pc, #48]	; (d6b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d1      	lsls	r1, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b0a      	ldr	r3, [pc, #40]	; (d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d2      	lsls	r2, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4770      	bx	lr
   d6b56:	bf00      	nop
   d6b58:	2003e794 	.word	0x2003e794
   d6b5c:	2003e790 	.word	0x2003e790
   d6b60:	2003e78c 	.word	0x2003e78c
   d6b64:	2003e788 	.word	0x2003e788
   d6b68:	2003e784 	.word	0x2003e784
   d6b6c:	2003e780 	.word	0x2003e780
   d6b70:	2003e77c 	.word	0x2003e77c
   d6b74:	2003e778 	.word	0x2003e778

000d6b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6b78:	4b24      	ldr	r3, [pc, #144]	; (d6c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6b7a:	681a      	ldr	r2, [r3, #0]
   d6b7c:	07d0      	lsls	r0, r2, #31
   d6b7e:	bf5c      	itt	pl
   d6b80:	2201      	movpl	r2, #1
   d6b82:	601a      	strpl	r2, [r3, #0]
   d6b84:	4b22      	ldr	r3, [pc, #136]	; (d6c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6b86:	681a      	ldr	r2, [r3, #0]
   d6b88:	07d1      	lsls	r1, r2, #31
   d6b8a:	bf5c      	itt	pl
   d6b8c:	2201      	movpl	r2, #1
   d6b8e:	601a      	strpl	r2, [r3, #0]
   d6b90:	4b20      	ldr	r3, [pc, #128]	; (d6c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6b92:	681a      	ldr	r2, [r3, #0]
   d6b94:	07d2      	lsls	r2, r2, #31
   d6b96:	bf5c      	itt	pl
   d6b98:	2201      	movpl	r2, #1
   d6b9a:	601a      	strpl	r2, [r3, #0]
   d6b9c:	4b1e      	ldr	r3, [pc, #120]	; (d6c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6b9e:	681a      	ldr	r2, [r3, #0]
   d6ba0:	07d0      	lsls	r0, r2, #31
   d6ba2:	bf5c      	itt	pl
   d6ba4:	2201      	movpl	r2, #1
   d6ba6:	601a      	strpl	r2, [r3, #0]
   d6ba8:	4b1c      	ldr	r3, [pc, #112]	; (d6c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6baa:	681a      	ldr	r2, [r3, #0]
   d6bac:	07d1      	lsls	r1, r2, #31
   d6bae:	bf5c      	itt	pl
   d6bb0:	2201      	movpl	r2, #1
   d6bb2:	601a      	strpl	r2, [r3, #0]
   d6bb4:	4b1a      	ldr	r3, [pc, #104]	; (d6c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6bb6:	681a      	ldr	r2, [r3, #0]
   d6bb8:	07d2      	lsls	r2, r2, #31
   d6bba:	bf5c      	itt	pl
   d6bbc:	2201      	movpl	r2, #1
   d6bbe:	601a      	strpl	r2, [r3, #0]
   d6bc0:	4b18      	ldr	r3, [pc, #96]	; (d6c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6bc2:	681a      	ldr	r2, [r3, #0]
   d6bc4:	07d0      	lsls	r0, r2, #31
   d6bc6:	bf5c      	itt	pl
   d6bc8:	2201      	movpl	r2, #1
   d6bca:	601a      	strpl	r2, [r3, #0]
   d6bcc:	4b16      	ldr	r3, [pc, #88]	; (d6c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6bce:	681a      	ldr	r2, [r3, #0]
   d6bd0:	07d1      	lsls	r1, r2, #31
   d6bd2:	bf5c      	itt	pl
   d6bd4:	2201      	movpl	r2, #1
   d6bd6:	601a      	strpl	r2, [r3, #0]
   d6bd8:	4b14      	ldr	r3, [pc, #80]	; (d6c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6bda:	681a      	ldr	r2, [r3, #0]
   d6bdc:	07d2      	lsls	r2, r2, #31
   d6bde:	bf5c      	itt	pl
   d6be0:	2201      	movpl	r2, #1
   d6be2:	601a      	strpl	r2, [r3, #0]
   d6be4:	4b12      	ldr	r3, [pc, #72]	; (d6c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6be6:	681a      	ldr	r2, [r3, #0]
   d6be8:	07d0      	lsls	r0, r2, #31
   d6bea:	bf5c      	itt	pl
   d6bec:	2201      	movpl	r2, #1
   d6bee:	601a      	strpl	r2, [r3, #0]
   d6bf0:	4b10      	ldr	r3, [pc, #64]	; (d6c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6bf2:	681a      	ldr	r2, [r3, #0]
   d6bf4:	07d1      	lsls	r1, r2, #31
   d6bf6:	bf5c      	itt	pl
   d6bf8:	2201      	movpl	r2, #1
   d6bfa:	601a      	strpl	r2, [r3, #0]
   d6bfc:	4b0e      	ldr	r3, [pc, #56]	; (d6c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6bfe:	681a      	ldr	r2, [r3, #0]
   d6c00:	07d2      	lsls	r2, r2, #31
   d6c02:	bf5c      	itt	pl
   d6c04:	2201      	movpl	r2, #1
   d6c06:	601a      	strpl	r2, [r3, #0]
   d6c08:	4770      	bx	lr
   d6c0a:	bf00      	nop
   d6c0c:	2003e7c4 	.word	0x2003e7c4
   d6c10:	2003e7c0 	.word	0x2003e7c0
   d6c14:	2003e7bc 	.word	0x2003e7bc
   d6c18:	2003e7b8 	.word	0x2003e7b8
   d6c1c:	2003e7b4 	.word	0x2003e7b4
   d6c20:	2003e7b0 	.word	0x2003e7b0
   d6c24:	2003e7ac 	.word	0x2003e7ac
   d6c28:	2003e7a8 	.word	0x2003e7a8
   d6c2c:	2003e7a4 	.word	0x2003e7a4
   d6c30:	2003e7a0 	.word	0x2003e7a0
   d6c34:	2003e79c 	.word	0x2003e79c
   d6c38:	2003e798 	.word	0x2003e798

000d6c3c <__aeabi_drsub>:
   d6c3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6c40:	e002      	b.n	d6c48 <__adddf3>
   d6c42:	bf00      	nop

000d6c44 <__aeabi_dsub>:
   d6c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6c48 <__adddf3>:
   d6c48:	b530      	push	{r4, r5, lr}
   d6c4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6c4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6c52:	ea94 0f05 	teq	r4, r5
   d6c56:	bf08      	it	eq
   d6c58:	ea90 0f02 	teqeq	r0, r2
   d6c5c:	bf1f      	itttt	ne
   d6c5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c62:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c6e:	f000 80e2 	beq.w	d6e36 <__adddf3+0x1ee>
   d6c72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c7a:	bfb8      	it	lt
   d6c7c:	426d      	neglt	r5, r5
   d6c7e:	dd0c      	ble.n	d6c9a <__adddf3+0x52>
   d6c80:	442c      	add	r4, r5
   d6c82:	ea80 0202 	eor.w	r2, r0, r2
   d6c86:	ea81 0303 	eor.w	r3, r1, r3
   d6c8a:	ea82 0000 	eor.w	r0, r2, r0
   d6c8e:	ea83 0101 	eor.w	r1, r3, r1
   d6c92:	ea80 0202 	eor.w	r2, r0, r2
   d6c96:	ea81 0303 	eor.w	r3, r1, r3
   d6c9a:	2d36      	cmp	r5, #54	; 0x36
   d6c9c:	bf88      	it	hi
   d6c9e:	bd30      	pophi	{r4, r5, pc}
   d6ca0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6ca4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ca8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6cac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6cb0:	d002      	beq.n	d6cb8 <__adddf3+0x70>
   d6cb2:	4240      	negs	r0, r0
   d6cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6cb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6cbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6cc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6cc4:	d002      	beq.n	d6ccc <__adddf3+0x84>
   d6cc6:	4252      	negs	r2, r2
   d6cc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6ccc:	ea94 0f05 	teq	r4, r5
   d6cd0:	f000 80a7 	beq.w	d6e22 <__adddf3+0x1da>
   d6cd4:	f1a4 0401 	sub.w	r4, r4, #1
   d6cd8:	f1d5 0e20 	rsbs	lr, r5, #32
   d6cdc:	db0d      	blt.n	d6cfa <__adddf3+0xb2>
   d6cde:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6ce2:	fa22 f205 	lsr.w	r2, r2, r5
   d6ce6:	1880      	adds	r0, r0, r2
   d6ce8:	f141 0100 	adc.w	r1, r1, #0
   d6cec:	fa03 f20e 	lsl.w	r2, r3, lr
   d6cf0:	1880      	adds	r0, r0, r2
   d6cf2:	fa43 f305 	asr.w	r3, r3, r5
   d6cf6:	4159      	adcs	r1, r3
   d6cf8:	e00e      	b.n	d6d18 <__adddf3+0xd0>
   d6cfa:	f1a5 0520 	sub.w	r5, r5, #32
   d6cfe:	f10e 0e20 	add.w	lr, lr, #32
   d6d02:	2a01      	cmp	r2, #1
   d6d04:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6d08:	bf28      	it	cs
   d6d0a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6d0e:	fa43 f305 	asr.w	r3, r3, r5
   d6d12:	18c0      	adds	r0, r0, r3
   d6d14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6d18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d1c:	d507      	bpl.n	d6d2e <__adddf3+0xe6>
   d6d1e:	f04f 0e00 	mov.w	lr, #0
   d6d22:	f1dc 0c00 	rsbs	ip, ip, #0
   d6d26:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6d2a:	eb6e 0101 	sbc.w	r1, lr, r1
   d6d2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6d32:	d31b      	bcc.n	d6d6c <__adddf3+0x124>
   d6d34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6d38:	d30c      	bcc.n	d6d54 <__adddf3+0x10c>
   d6d3a:	0849      	lsrs	r1, r1, #1
   d6d3c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6d40:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6d44:	f104 0401 	add.w	r4, r4, #1
   d6d48:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6d4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6d50:	f080 809a 	bcs.w	d6e88 <__adddf3+0x240>
   d6d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d58:	bf08      	it	eq
   d6d5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d5e:	f150 0000 	adcs.w	r0, r0, #0
   d6d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d66:	ea41 0105 	orr.w	r1, r1, r5
   d6d6a:	bd30      	pop	{r4, r5, pc}
   d6d6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d70:	4140      	adcs	r0, r0
   d6d72:	eb41 0101 	adc.w	r1, r1, r1
   d6d76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d7a:	f1a4 0401 	sub.w	r4, r4, #1
   d6d7e:	d1e9      	bne.n	d6d54 <__adddf3+0x10c>
   d6d80:	f091 0f00 	teq	r1, #0
   d6d84:	bf04      	itt	eq
   d6d86:	4601      	moveq	r1, r0
   d6d88:	2000      	moveq	r0, #0
   d6d8a:	fab1 f381 	clz	r3, r1
   d6d8e:	bf08      	it	eq
   d6d90:	3320      	addeq	r3, #32
   d6d92:	f1a3 030b 	sub.w	r3, r3, #11
   d6d96:	f1b3 0220 	subs.w	r2, r3, #32
   d6d9a:	da0c      	bge.n	d6db6 <__adddf3+0x16e>
   d6d9c:	320c      	adds	r2, #12
   d6d9e:	dd08      	ble.n	d6db2 <__adddf3+0x16a>
   d6da0:	f102 0c14 	add.w	ip, r2, #20
   d6da4:	f1c2 020c 	rsb	r2, r2, #12
   d6da8:	fa01 f00c 	lsl.w	r0, r1, ip
   d6dac:	fa21 f102 	lsr.w	r1, r1, r2
   d6db0:	e00c      	b.n	d6dcc <__adddf3+0x184>
   d6db2:	f102 0214 	add.w	r2, r2, #20
   d6db6:	bfd8      	it	le
   d6db8:	f1c2 0c20 	rsble	ip, r2, #32
   d6dbc:	fa01 f102 	lsl.w	r1, r1, r2
   d6dc0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6dc4:	bfdc      	itt	le
   d6dc6:	ea41 010c 	orrle.w	r1, r1, ip
   d6dca:	4090      	lslle	r0, r2
   d6dcc:	1ae4      	subs	r4, r4, r3
   d6dce:	bfa2      	ittt	ge
   d6dd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6dd4:	4329      	orrge	r1, r5
   d6dd6:	bd30      	popge	{r4, r5, pc}
   d6dd8:	ea6f 0404 	mvn.w	r4, r4
   d6ddc:	3c1f      	subs	r4, #31
   d6dde:	da1c      	bge.n	d6e1a <__adddf3+0x1d2>
   d6de0:	340c      	adds	r4, #12
   d6de2:	dc0e      	bgt.n	d6e02 <__adddf3+0x1ba>
   d6de4:	f104 0414 	add.w	r4, r4, #20
   d6de8:	f1c4 0220 	rsb	r2, r4, #32
   d6dec:	fa20 f004 	lsr.w	r0, r0, r4
   d6df0:	fa01 f302 	lsl.w	r3, r1, r2
   d6df4:	ea40 0003 	orr.w	r0, r0, r3
   d6df8:	fa21 f304 	lsr.w	r3, r1, r4
   d6dfc:	ea45 0103 	orr.w	r1, r5, r3
   d6e00:	bd30      	pop	{r4, r5, pc}
   d6e02:	f1c4 040c 	rsb	r4, r4, #12
   d6e06:	f1c4 0220 	rsb	r2, r4, #32
   d6e0a:	fa20 f002 	lsr.w	r0, r0, r2
   d6e0e:	fa01 f304 	lsl.w	r3, r1, r4
   d6e12:	ea40 0003 	orr.w	r0, r0, r3
   d6e16:	4629      	mov	r1, r5
   d6e18:	bd30      	pop	{r4, r5, pc}
   d6e1a:	fa21 f004 	lsr.w	r0, r1, r4
   d6e1e:	4629      	mov	r1, r5
   d6e20:	bd30      	pop	{r4, r5, pc}
   d6e22:	f094 0f00 	teq	r4, #0
   d6e26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6e2a:	bf06      	itte	eq
   d6e2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6e30:	3401      	addeq	r4, #1
   d6e32:	3d01      	subne	r5, #1
   d6e34:	e74e      	b.n	d6cd4 <__adddf3+0x8c>
   d6e36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e3a:	bf18      	it	ne
   d6e3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e40:	d029      	beq.n	d6e96 <__adddf3+0x24e>
   d6e42:	ea94 0f05 	teq	r4, r5
   d6e46:	bf08      	it	eq
   d6e48:	ea90 0f02 	teqeq	r0, r2
   d6e4c:	d005      	beq.n	d6e5a <__adddf3+0x212>
   d6e4e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6e52:	bf04      	itt	eq
   d6e54:	4619      	moveq	r1, r3
   d6e56:	4610      	moveq	r0, r2
   d6e58:	bd30      	pop	{r4, r5, pc}
   d6e5a:	ea91 0f03 	teq	r1, r3
   d6e5e:	bf1e      	ittt	ne
   d6e60:	2100      	movne	r1, #0
   d6e62:	2000      	movne	r0, #0
   d6e64:	bd30      	popne	{r4, r5, pc}
   d6e66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e6a:	d105      	bne.n	d6e78 <__adddf3+0x230>
   d6e6c:	0040      	lsls	r0, r0, #1
   d6e6e:	4149      	adcs	r1, r1
   d6e70:	bf28      	it	cs
   d6e72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e76:	bd30      	pop	{r4, r5, pc}
   d6e78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e7c:	bf3c      	itt	cc
   d6e7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e82:	bd30      	popcc	{r4, r5, pc}
   d6e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e90:	f04f 0000 	mov.w	r0, #0
   d6e94:	bd30      	pop	{r4, r5, pc}
   d6e96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e9a:	bf1a      	itte	ne
   d6e9c:	4619      	movne	r1, r3
   d6e9e:	4610      	movne	r0, r2
   d6ea0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6ea4:	bf1c      	itt	ne
   d6ea6:	460b      	movne	r3, r1
   d6ea8:	4602      	movne	r2, r0
   d6eaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6eae:	bf06      	itte	eq
   d6eb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6eb4:	ea91 0f03 	teqeq	r1, r3
   d6eb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6ebc:	bd30      	pop	{r4, r5, pc}
   d6ebe:	bf00      	nop

000d6ec0 <__aeabi_ui2d>:
   d6ec0:	f090 0f00 	teq	r0, #0
   d6ec4:	bf04      	itt	eq
   d6ec6:	2100      	moveq	r1, #0
   d6ec8:	4770      	bxeq	lr
   d6eca:	b530      	push	{r4, r5, lr}
   d6ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ed4:	f04f 0500 	mov.w	r5, #0
   d6ed8:	f04f 0100 	mov.w	r1, #0
   d6edc:	e750      	b.n	d6d80 <__adddf3+0x138>
   d6ede:	bf00      	nop

000d6ee0 <__aeabi_i2d>:
   d6ee0:	f090 0f00 	teq	r0, #0
   d6ee4:	bf04      	itt	eq
   d6ee6:	2100      	moveq	r1, #0
   d6ee8:	4770      	bxeq	lr
   d6eea:	b530      	push	{r4, r5, lr}
   d6eec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ef0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ef4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6ef8:	bf48      	it	mi
   d6efa:	4240      	negmi	r0, r0
   d6efc:	f04f 0100 	mov.w	r1, #0
   d6f00:	e73e      	b.n	d6d80 <__adddf3+0x138>
   d6f02:	bf00      	nop

000d6f04 <__aeabi_f2d>:
   d6f04:	0042      	lsls	r2, r0, #1
   d6f06:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6f0a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6f0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6f12:	bf1f      	itttt	ne
   d6f14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6f18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6f1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6f20:	4770      	bxne	lr
   d6f22:	f092 0f00 	teq	r2, #0
   d6f26:	bf14      	ite	ne
   d6f28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6f2c:	4770      	bxeq	lr
   d6f2e:	b530      	push	{r4, r5, lr}
   d6f30:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f3c:	e720      	b.n	d6d80 <__adddf3+0x138>
   d6f3e:	bf00      	nop

000d6f40 <__aeabi_ul2d>:
   d6f40:	ea50 0201 	orrs.w	r2, r0, r1
   d6f44:	bf08      	it	eq
   d6f46:	4770      	bxeq	lr
   d6f48:	b530      	push	{r4, r5, lr}
   d6f4a:	f04f 0500 	mov.w	r5, #0
   d6f4e:	e00a      	b.n	d6f66 <__aeabi_l2d+0x16>

000d6f50 <__aeabi_l2d>:
   d6f50:	ea50 0201 	orrs.w	r2, r0, r1
   d6f54:	bf08      	it	eq
   d6f56:	4770      	bxeq	lr
   d6f58:	b530      	push	{r4, r5, lr}
   d6f5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f5e:	d502      	bpl.n	d6f66 <__aeabi_l2d+0x16>
   d6f60:	4240      	negs	r0, r0
   d6f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f72:	f43f aedc 	beq.w	d6d2e <__adddf3+0xe6>
   d6f76:	f04f 0203 	mov.w	r2, #3
   d6f7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f7e:	bf18      	it	ne
   d6f80:	3203      	addne	r2, #3
   d6f82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f86:	bf18      	it	ne
   d6f88:	3203      	addne	r2, #3
   d6f8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f8e:	f1c2 0320 	rsb	r3, r2, #32
   d6f92:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f96:	fa20 f002 	lsr.w	r0, r0, r2
   d6f9a:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f9e:	ea40 000e 	orr.w	r0, r0, lr
   d6fa2:	fa21 f102 	lsr.w	r1, r1, r2
   d6fa6:	4414      	add	r4, r2
   d6fa8:	e6c1      	b.n	d6d2e <__adddf3+0xe6>
   d6faa:	bf00      	nop

000d6fac <__aeabi_dmul>:
   d6fac:	b570      	push	{r4, r5, r6, lr}
   d6fae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6fb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6fb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6fba:	bf1d      	ittte	ne
   d6fbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6fc0:	ea94 0f0c 	teqne	r4, ip
   d6fc4:	ea95 0f0c 	teqne	r5, ip
   d6fc8:	f000 f8de 	bleq	d7188 <__aeabi_dmul+0x1dc>
   d6fcc:	442c      	add	r4, r5
   d6fce:	ea81 0603 	eor.w	r6, r1, r3
   d6fd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6fd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6fda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6fde:	bf18      	it	ne
   d6fe0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6fe4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6fec:	d038      	beq.n	d7060 <__aeabi_dmul+0xb4>
   d6fee:	fba0 ce02 	umull	ip, lr, r0, r2
   d6ff2:	f04f 0500 	mov.w	r5, #0
   d6ff6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6ffa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6ffe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7002:	f04f 0600 	mov.w	r6, #0
   d7006:	fbe1 5603 	umlal	r5, r6, r1, r3
   d700a:	f09c 0f00 	teq	ip, #0
   d700e:	bf18      	it	ne
   d7010:	f04e 0e01 	orrne.w	lr, lr, #1
   d7014:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7018:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d701c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7020:	d204      	bcs.n	d702c <__aeabi_dmul+0x80>
   d7022:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7026:	416d      	adcs	r5, r5
   d7028:	eb46 0606 	adc.w	r6, r6, r6
   d702c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7030:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7034:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7038:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d703c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7040:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7044:	bf88      	it	hi
   d7046:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d704a:	d81e      	bhi.n	d708a <__aeabi_dmul+0xde>
   d704c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7050:	bf08      	it	eq
   d7052:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7056:	f150 0000 	adcs.w	r0, r0, #0
   d705a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d705e:	bd70      	pop	{r4, r5, r6, pc}
   d7060:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7064:	ea46 0101 	orr.w	r1, r6, r1
   d7068:	ea40 0002 	orr.w	r0, r0, r2
   d706c:	ea81 0103 	eor.w	r1, r1, r3
   d7070:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7074:	bfc2      	ittt	gt
   d7076:	ebd4 050c 	rsbsgt	r5, r4, ip
   d707a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d707e:	bd70      	popgt	{r4, r5, r6, pc}
   d7080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7084:	f04f 0e00 	mov.w	lr, #0
   d7088:	3c01      	subs	r4, #1
   d708a:	f300 80ab 	bgt.w	d71e4 <__aeabi_dmul+0x238>
   d708e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7092:	bfde      	ittt	le
   d7094:	2000      	movle	r0, #0
   d7096:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d709a:	bd70      	pople	{r4, r5, r6, pc}
   d709c:	f1c4 0400 	rsb	r4, r4, #0
   d70a0:	3c20      	subs	r4, #32
   d70a2:	da35      	bge.n	d7110 <__aeabi_dmul+0x164>
   d70a4:	340c      	adds	r4, #12
   d70a6:	dc1b      	bgt.n	d70e0 <__aeabi_dmul+0x134>
   d70a8:	f104 0414 	add.w	r4, r4, #20
   d70ac:	f1c4 0520 	rsb	r5, r4, #32
   d70b0:	fa00 f305 	lsl.w	r3, r0, r5
   d70b4:	fa20 f004 	lsr.w	r0, r0, r4
   d70b8:	fa01 f205 	lsl.w	r2, r1, r5
   d70bc:	ea40 0002 	orr.w	r0, r0, r2
   d70c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d70c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d70c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70cc:	fa21 f604 	lsr.w	r6, r1, r4
   d70d0:	eb42 0106 	adc.w	r1, r2, r6
   d70d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70d8:	bf08      	it	eq
   d70da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70de:	bd70      	pop	{r4, r5, r6, pc}
   d70e0:	f1c4 040c 	rsb	r4, r4, #12
   d70e4:	f1c4 0520 	rsb	r5, r4, #32
   d70e8:	fa00 f304 	lsl.w	r3, r0, r4
   d70ec:	fa20 f005 	lsr.w	r0, r0, r5
   d70f0:	fa01 f204 	lsl.w	r2, r1, r4
   d70f4:	ea40 0002 	orr.w	r0, r0, r2
   d70f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7100:	f141 0100 	adc.w	r1, r1, #0
   d7104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7108:	bf08      	it	eq
   d710a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d710e:	bd70      	pop	{r4, r5, r6, pc}
   d7110:	f1c4 0520 	rsb	r5, r4, #32
   d7114:	fa00 f205 	lsl.w	r2, r0, r5
   d7118:	ea4e 0e02 	orr.w	lr, lr, r2
   d711c:	fa20 f304 	lsr.w	r3, r0, r4
   d7120:	fa01 f205 	lsl.w	r2, r1, r5
   d7124:	ea43 0302 	orr.w	r3, r3, r2
   d7128:	fa21 f004 	lsr.w	r0, r1, r4
   d712c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7130:	fa21 f204 	lsr.w	r2, r1, r4
   d7134:	ea20 0002 	bic.w	r0, r0, r2
   d7138:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d713c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7140:	bf08      	it	eq
   d7142:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7146:	bd70      	pop	{r4, r5, r6, pc}
   d7148:	f094 0f00 	teq	r4, #0
   d714c:	d10f      	bne.n	d716e <__aeabi_dmul+0x1c2>
   d714e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7152:	0040      	lsls	r0, r0, #1
   d7154:	eb41 0101 	adc.w	r1, r1, r1
   d7158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d715c:	bf08      	it	eq
   d715e:	3c01      	subeq	r4, #1
   d7160:	d0f7      	beq.n	d7152 <__aeabi_dmul+0x1a6>
   d7162:	ea41 0106 	orr.w	r1, r1, r6
   d7166:	f095 0f00 	teq	r5, #0
   d716a:	bf18      	it	ne
   d716c:	4770      	bxne	lr
   d716e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7172:	0052      	lsls	r2, r2, #1
   d7174:	eb43 0303 	adc.w	r3, r3, r3
   d7178:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d717c:	bf08      	it	eq
   d717e:	3d01      	subeq	r5, #1
   d7180:	d0f7      	beq.n	d7172 <__aeabi_dmul+0x1c6>
   d7182:	ea43 0306 	orr.w	r3, r3, r6
   d7186:	4770      	bx	lr
   d7188:	ea94 0f0c 	teq	r4, ip
   d718c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7190:	bf18      	it	ne
   d7192:	ea95 0f0c 	teqne	r5, ip
   d7196:	d00c      	beq.n	d71b2 <__aeabi_dmul+0x206>
   d7198:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d719c:	bf18      	it	ne
   d719e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d71a2:	d1d1      	bne.n	d7148 <__aeabi_dmul+0x19c>
   d71a4:	ea81 0103 	eor.w	r1, r1, r3
   d71a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71ac:	f04f 0000 	mov.w	r0, #0
   d71b0:	bd70      	pop	{r4, r5, r6, pc}
   d71b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d71b6:	bf06      	itte	eq
   d71b8:	4610      	moveq	r0, r2
   d71ba:	4619      	moveq	r1, r3
   d71bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d71c0:	d019      	beq.n	d71f6 <__aeabi_dmul+0x24a>
   d71c2:	ea94 0f0c 	teq	r4, ip
   d71c6:	d102      	bne.n	d71ce <__aeabi_dmul+0x222>
   d71c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d71cc:	d113      	bne.n	d71f6 <__aeabi_dmul+0x24a>
   d71ce:	ea95 0f0c 	teq	r5, ip
   d71d2:	d105      	bne.n	d71e0 <__aeabi_dmul+0x234>
   d71d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d71d8:	bf1c      	itt	ne
   d71da:	4610      	movne	r0, r2
   d71dc:	4619      	movne	r1, r3
   d71de:	d10a      	bne.n	d71f6 <__aeabi_dmul+0x24a>
   d71e0:	ea81 0103 	eor.w	r1, r1, r3
   d71e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d71f0:	f04f 0000 	mov.w	r0, #0
   d71f4:	bd70      	pop	{r4, r5, r6, pc}
   d71f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d71fe:	bd70      	pop	{r4, r5, r6, pc}

000d7200 <__aeabi_ddiv>:
   d7200:	b570      	push	{r4, r5, r6, lr}
   d7202:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d720a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d720e:	bf1d      	ittte	ne
   d7210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7214:	ea94 0f0c 	teqne	r4, ip
   d7218:	ea95 0f0c 	teqne	r5, ip
   d721c:	f000 f8a7 	bleq	d736e <__aeabi_ddiv+0x16e>
   d7220:	eba4 0405 	sub.w	r4, r4, r5
   d7224:	ea81 0e03 	eor.w	lr, r1, r3
   d7228:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d722c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7230:	f000 8088 	beq.w	d7344 <__aeabi_ddiv+0x144>
   d7234:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7238:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d723c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7240:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7244:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7248:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d724c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7250:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7254:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7258:	429d      	cmp	r5, r3
   d725a:	bf08      	it	eq
   d725c:	4296      	cmpeq	r6, r2
   d725e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7262:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7266:	d202      	bcs.n	d726e <__aeabi_ddiv+0x6e>
   d7268:	085b      	lsrs	r3, r3, #1
   d726a:	ea4f 0232 	mov.w	r2, r2, rrx
   d726e:	1ab6      	subs	r6, r6, r2
   d7270:	eb65 0503 	sbc.w	r5, r5, r3
   d7274:	085b      	lsrs	r3, r3, #1
   d7276:	ea4f 0232 	mov.w	r2, r2, rrx
   d727a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d727e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7282:	ebb6 0e02 	subs.w	lr, r6, r2
   d7286:	eb75 0e03 	sbcs.w	lr, r5, r3
   d728a:	bf22      	ittt	cs
   d728c:	1ab6      	subcs	r6, r6, r2
   d728e:	4675      	movcs	r5, lr
   d7290:	ea40 000c 	orrcs.w	r0, r0, ip
   d7294:	085b      	lsrs	r3, r3, #1
   d7296:	ea4f 0232 	mov.w	r2, r2, rrx
   d729a:	ebb6 0e02 	subs.w	lr, r6, r2
   d729e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72a2:	bf22      	ittt	cs
   d72a4:	1ab6      	subcs	r6, r6, r2
   d72a6:	4675      	movcs	r5, lr
   d72a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d72ac:	085b      	lsrs	r3, r3, #1
   d72ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d72b2:	ebb6 0e02 	subs.w	lr, r6, r2
   d72b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72ba:	bf22      	ittt	cs
   d72bc:	1ab6      	subcs	r6, r6, r2
   d72be:	4675      	movcs	r5, lr
   d72c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d72c4:	085b      	lsrs	r3, r3, #1
   d72c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d72ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d72ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72d2:	bf22      	ittt	cs
   d72d4:	1ab6      	subcs	r6, r6, r2
   d72d6:	4675      	movcs	r5, lr
   d72d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d72dc:	ea55 0e06 	orrs.w	lr, r5, r6
   d72e0:	d018      	beq.n	d7314 <__aeabi_ddiv+0x114>
   d72e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d72e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d72ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d72ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d72f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d72f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d72fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d72fe:	d1c0      	bne.n	d7282 <__aeabi_ddiv+0x82>
   d7300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7304:	d10b      	bne.n	d731e <__aeabi_ddiv+0x11e>
   d7306:	ea41 0100 	orr.w	r1, r1, r0
   d730a:	f04f 0000 	mov.w	r0, #0
   d730e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7312:	e7b6      	b.n	d7282 <__aeabi_ddiv+0x82>
   d7314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7318:	bf04      	itt	eq
   d731a:	4301      	orreq	r1, r0
   d731c:	2000      	moveq	r0, #0
   d731e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7322:	bf88      	it	hi
   d7324:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7328:	f63f aeaf 	bhi.w	d708a <__aeabi_dmul+0xde>
   d732c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7330:	bf04      	itt	eq
   d7332:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d733a:	f150 0000 	adcs.w	r0, r0, #0
   d733e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7342:	bd70      	pop	{r4, r5, r6, pc}
   d7344:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7348:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d734c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7350:	bfc2      	ittt	gt
   d7352:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d735a:	bd70      	popgt	{r4, r5, r6, pc}
   d735c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7360:	f04f 0e00 	mov.w	lr, #0
   d7364:	3c01      	subs	r4, #1
   d7366:	e690      	b.n	d708a <__aeabi_dmul+0xde>
   d7368:	ea45 0e06 	orr.w	lr, r5, r6
   d736c:	e68d      	b.n	d708a <__aeabi_dmul+0xde>
   d736e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7372:	ea94 0f0c 	teq	r4, ip
   d7376:	bf08      	it	eq
   d7378:	ea95 0f0c 	teqeq	r5, ip
   d737c:	f43f af3b 	beq.w	d71f6 <__aeabi_dmul+0x24a>
   d7380:	ea94 0f0c 	teq	r4, ip
   d7384:	d10a      	bne.n	d739c <__aeabi_ddiv+0x19c>
   d7386:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d738a:	f47f af34 	bne.w	d71f6 <__aeabi_dmul+0x24a>
   d738e:	ea95 0f0c 	teq	r5, ip
   d7392:	f47f af25 	bne.w	d71e0 <__aeabi_dmul+0x234>
   d7396:	4610      	mov	r0, r2
   d7398:	4619      	mov	r1, r3
   d739a:	e72c      	b.n	d71f6 <__aeabi_dmul+0x24a>
   d739c:	ea95 0f0c 	teq	r5, ip
   d73a0:	d106      	bne.n	d73b0 <__aeabi_ddiv+0x1b0>
   d73a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d73a6:	f43f aefd 	beq.w	d71a4 <__aeabi_dmul+0x1f8>
   d73aa:	4610      	mov	r0, r2
   d73ac:	4619      	mov	r1, r3
   d73ae:	e722      	b.n	d71f6 <__aeabi_dmul+0x24a>
   d73b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d73b4:	bf18      	it	ne
   d73b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73ba:	f47f aec5 	bne.w	d7148 <__aeabi_dmul+0x19c>
   d73be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d73c2:	f47f af0d 	bne.w	d71e0 <__aeabi_dmul+0x234>
   d73c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d73ca:	f47f aeeb 	bne.w	d71a4 <__aeabi_dmul+0x1f8>
   d73ce:	e712      	b.n	d71f6 <__aeabi_dmul+0x24a>

000d73d0 <__gedf2>:
   d73d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d73d4:	e006      	b.n	d73e4 <__cmpdf2+0x4>
   d73d6:	bf00      	nop

000d73d8 <__ledf2>:
   d73d8:	f04f 0c01 	mov.w	ip, #1
   d73dc:	e002      	b.n	d73e4 <__cmpdf2+0x4>
   d73de:	bf00      	nop

000d73e0 <__cmpdf2>:
   d73e0:	f04f 0c01 	mov.w	ip, #1
   d73e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d73e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73f4:	bf18      	it	ne
   d73f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d73fa:	d01b      	beq.n	d7434 <__cmpdf2+0x54>
   d73fc:	b001      	add	sp, #4
   d73fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7402:	bf0c      	ite	eq
   d7404:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7408:	ea91 0f03 	teqne	r1, r3
   d740c:	bf02      	ittt	eq
   d740e:	ea90 0f02 	teqeq	r0, r2
   d7412:	2000      	moveq	r0, #0
   d7414:	4770      	bxeq	lr
   d7416:	f110 0f00 	cmn.w	r0, #0
   d741a:	ea91 0f03 	teq	r1, r3
   d741e:	bf58      	it	pl
   d7420:	4299      	cmppl	r1, r3
   d7422:	bf08      	it	eq
   d7424:	4290      	cmpeq	r0, r2
   d7426:	bf2c      	ite	cs
   d7428:	17d8      	asrcs	r0, r3, #31
   d742a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d742e:	f040 0001 	orr.w	r0, r0, #1
   d7432:	4770      	bx	lr
   d7434:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7438:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d743c:	d102      	bne.n	d7444 <__cmpdf2+0x64>
   d743e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7442:	d107      	bne.n	d7454 <__cmpdf2+0x74>
   d7444:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7448:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d744c:	d1d6      	bne.n	d73fc <__cmpdf2+0x1c>
   d744e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7452:	d0d3      	beq.n	d73fc <__cmpdf2+0x1c>
   d7454:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7458:	4770      	bx	lr
   d745a:	bf00      	nop

000d745c <__aeabi_cdrcmple>:
   d745c:	4684      	mov	ip, r0
   d745e:	4610      	mov	r0, r2
   d7460:	4662      	mov	r2, ip
   d7462:	468c      	mov	ip, r1
   d7464:	4619      	mov	r1, r3
   d7466:	4663      	mov	r3, ip
   d7468:	e000      	b.n	d746c <__aeabi_cdcmpeq>
   d746a:	bf00      	nop

000d746c <__aeabi_cdcmpeq>:
   d746c:	b501      	push	{r0, lr}
   d746e:	f7ff ffb7 	bl	d73e0 <__cmpdf2>
   d7472:	2800      	cmp	r0, #0
   d7474:	bf48      	it	mi
   d7476:	f110 0f00 	cmnmi.w	r0, #0
   d747a:	bd01      	pop	{r0, pc}

000d747c <__aeabi_dcmpeq>:
   d747c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7480:	f7ff fff4 	bl	d746c <__aeabi_cdcmpeq>
   d7484:	bf0c      	ite	eq
   d7486:	2001      	moveq	r0, #1
   d7488:	2000      	movne	r0, #0
   d748a:	f85d fb08 	ldr.w	pc, [sp], #8
   d748e:	bf00      	nop

000d7490 <__aeabi_dcmplt>:
   d7490:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7494:	f7ff ffea 	bl	d746c <__aeabi_cdcmpeq>
   d7498:	bf34      	ite	cc
   d749a:	2001      	movcc	r0, #1
   d749c:	2000      	movcs	r0, #0
   d749e:	f85d fb08 	ldr.w	pc, [sp], #8
   d74a2:	bf00      	nop

000d74a4 <__aeabi_dcmple>:
   d74a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74a8:	f7ff ffe0 	bl	d746c <__aeabi_cdcmpeq>
   d74ac:	bf94      	ite	ls
   d74ae:	2001      	movls	r0, #1
   d74b0:	2000      	movhi	r0, #0
   d74b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d74b6:	bf00      	nop

000d74b8 <__aeabi_dcmpge>:
   d74b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74bc:	f7ff ffce 	bl	d745c <__aeabi_cdrcmple>
   d74c0:	bf94      	ite	ls
   d74c2:	2001      	movls	r0, #1
   d74c4:	2000      	movhi	r0, #0
   d74c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d74ca:	bf00      	nop

000d74cc <__aeabi_dcmpgt>:
   d74cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74d0:	f7ff ffc4 	bl	d745c <__aeabi_cdrcmple>
   d74d4:	bf34      	ite	cc
   d74d6:	2001      	movcc	r0, #1
   d74d8:	2000      	movcs	r0, #0
   d74da:	f85d fb08 	ldr.w	pc, [sp], #8
   d74de:	bf00      	nop

000d74e0 <__aeabi_d2iz>:
   d74e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74e8:	d215      	bcs.n	d7516 <__aeabi_d2iz+0x36>
   d74ea:	d511      	bpl.n	d7510 <__aeabi_d2iz+0x30>
   d74ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74f4:	d912      	bls.n	d751c <__aeabi_d2iz+0x3c>
   d74f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7502:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7506:	fa23 f002 	lsr.w	r0, r3, r2
   d750a:	bf18      	it	ne
   d750c:	4240      	negne	r0, r0
   d750e:	4770      	bx	lr
   d7510:	f04f 0000 	mov.w	r0, #0
   d7514:	4770      	bx	lr
   d7516:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d751a:	d105      	bne.n	d7528 <__aeabi_d2iz+0x48>
   d751c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7520:	bf08      	it	eq
   d7522:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7526:	4770      	bx	lr
   d7528:	f04f 0000 	mov.w	r0, #0
   d752c:	4770      	bx	lr
   d752e:	bf00      	nop

000d7530 <__aeabi_d2uiz>:
   d7530:	004a      	lsls	r2, r1, #1
   d7532:	d211      	bcs.n	d7558 <__aeabi_d2uiz+0x28>
   d7534:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7538:	d211      	bcs.n	d755e <__aeabi_d2uiz+0x2e>
   d753a:	d50d      	bpl.n	d7558 <__aeabi_d2uiz+0x28>
   d753c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7540:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7544:	d40e      	bmi.n	d7564 <__aeabi_d2uiz+0x34>
   d7546:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d754a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d754e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7552:	fa23 f002 	lsr.w	r0, r3, r2
   d7556:	4770      	bx	lr
   d7558:	f04f 0000 	mov.w	r0, #0
   d755c:	4770      	bx	lr
   d755e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7562:	d102      	bne.n	d756a <__aeabi_d2uiz+0x3a>
   d7564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7568:	4770      	bx	lr
   d756a:	f04f 0000 	mov.w	r0, #0
   d756e:	4770      	bx	lr

000d7570 <__aeabi_d2f>:
   d7570:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7574:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7578:	bf24      	itt	cs
   d757a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d757e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7582:	d90d      	bls.n	d75a0 <__aeabi_d2f+0x30>
   d7584:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7588:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d758c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7590:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7594:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7598:	bf08      	it	eq
   d759a:	f020 0001 	biceq.w	r0, r0, #1
   d759e:	4770      	bx	lr
   d75a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d75a4:	d121      	bne.n	d75ea <__aeabi_d2f+0x7a>
   d75a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d75aa:	bfbc      	itt	lt
   d75ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d75b0:	4770      	bxlt	lr
   d75b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d75b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d75ba:	f1c2 0218 	rsb	r2, r2, #24
   d75be:	f1c2 0c20 	rsb	ip, r2, #32
   d75c2:	fa10 f30c 	lsls.w	r3, r0, ip
   d75c6:	fa20 f002 	lsr.w	r0, r0, r2
   d75ca:	bf18      	it	ne
   d75cc:	f040 0001 	orrne.w	r0, r0, #1
   d75d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d75d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d75d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d75dc:	ea40 000c 	orr.w	r0, r0, ip
   d75e0:	fa23 f302 	lsr.w	r3, r3, r2
   d75e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d75e8:	e7cc      	b.n	d7584 <__aeabi_d2f+0x14>
   d75ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d75ee:	d107      	bne.n	d7600 <__aeabi_d2f+0x90>
   d75f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d75f4:	bf1e      	ittt	ne
   d75f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d75fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d75fe:	4770      	bxne	lr
   d7600:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7604:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7608:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d760c:	4770      	bx	lr
   d760e:	bf00      	nop

000d7610 <atof>:
   d7610:	2100      	movs	r1, #0
   d7612:	f000 bfc5 	b.w	d85a0 <strtod>

000d7616 <atoi>:
   d7616:	220a      	movs	r2, #10
   d7618:	2100      	movs	r1, #0
   d761a:	f001 b84f 	b.w	d86bc <strtol>
	...

000d7620 <__cxa_atexit>:
   d7620:	b510      	push	{r4, lr}
   d7622:	4c05      	ldr	r4, [pc, #20]	; (d7638 <__cxa_atexit+0x18>)
   d7624:	4613      	mov	r3, r2
   d7626:	b12c      	cbz	r4, d7634 <__cxa_atexit+0x14>
   d7628:	460a      	mov	r2, r1
   d762a:	4601      	mov	r1, r0
   d762c:	2002      	movs	r0, #2
   d762e:	f3af 8000 	nop.w
   d7632:	bd10      	pop	{r4, pc}
   d7634:	4620      	mov	r0, r4
   d7636:	bd10      	pop	{r4, pc}
   d7638:	00000000 	.word	0x00000000

000d763c <localtime>:
   d763c:	b538      	push	{r3, r4, r5, lr}
   d763e:	4b07      	ldr	r3, [pc, #28]	; (d765c <localtime+0x20>)
   d7640:	681c      	ldr	r4, [r3, #0]
   d7642:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7644:	4605      	mov	r5, r0
   d7646:	b91b      	cbnz	r3, d7650 <localtime+0x14>
   d7648:	2024      	movs	r0, #36	; 0x24
   d764a:	f7fd feff 	bl	d544c <malloc>
   d764e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7650:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7652:	4628      	mov	r0, r5
   d7654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7658:	f000 b802 	b.w	d7660 <localtime_r>
   d765c:	2003e1c8 	.word	0x2003e1c8

000d7660 <localtime_r>:
   d7660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7664:	460c      	mov	r4, r1
   d7666:	4680      	mov	r8, r0
   d7668:	f001 fe4c 	bl	d9304 <__gettzinfo>
   d766c:	4621      	mov	r1, r4
   d766e:	4607      	mov	r7, r0
   d7670:	4640      	mov	r0, r8
   d7672:	f001 fe4b 	bl	d930c <gmtime_r>
   d7676:	6946      	ldr	r6, [r0, #20]
   d7678:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d767c:	07b3      	lsls	r3, r6, #30
   d767e:	4604      	mov	r4, r0
   d7680:	d105      	bne.n	d768e <localtime_r+0x2e>
   d7682:	2264      	movs	r2, #100	; 0x64
   d7684:	fb96 f3f2 	sdiv	r3, r6, r2
   d7688:	fb02 6313 	mls	r3, r2, r3, r6
   d768c:	b94b      	cbnz	r3, d76a2 <localtime_r+0x42>
   d768e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7692:	fb96 f3f5 	sdiv	r3, r6, r5
   d7696:	fb05 6513 	mls	r5, r5, r3, r6
   d769a:	fab5 f385 	clz	r3, r5
   d769e:	095b      	lsrs	r3, r3, #5
   d76a0:	e000      	b.n	d76a4 <localtime_r+0x44>
   d76a2:	2301      	movs	r3, #1
   d76a4:	4a5f      	ldr	r2, [pc, #380]	; (d7824 <localtime_r+0x1c4>)
   d76a6:	2530      	movs	r5, #48	; 0x30
   d76a8:	fb05 2503 	mla	r5, r5, r3, r2
   d76ac:	f001 f940 	bl	d8930 <__tz_lock>
   d76b0:	f001 f940 	bl	d8934 <_tzset_unlocked>
   d76b4:	4b5c      	ldr	r3, [pc, #368]	; (d7828 <localtime_r+0x1c8>)
   d76b6:	681b      	ldr	r3, [r3, #0]
   d76b8:	b1f3      	cbz	r3, d76f8 <localtime_r+0x98>
   d76ba:	687b      	ldr	r3, [r7, #4]
   d76bc:	429e      	cmp	r6, r3
   d76be:	d105      	bne.n	d76cc <localtime_r+0x6c>
   d76c0:	6839      	ldr	r1, [r7, #0]
   d76c2:	f8d8 3000 	ldr.w	r3, [r8]
   d76c6:	69fa      	ldr	r2, [r7, #28]
   d76c8:	b941      	cbnz	r1, d76dc <localtime_r+0x7c>
   d76ca:	e00a      	b.n	d76e2 <localtime_r+0x82>
   d76cc:	4630      	mov	r0, r6
   d76ce:	f001 f887 	bl	d87e0 <__tzcalc_limits>
   d76d2:	2800      	cmp	r0, #0
   d76d4:	d1f4      	bne.n	d76c0 <localtime_r+0x60>
   d76d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d76da:	e00d      	b.n	d76f8 <localtime_r+0x98>
   d76dc:	4293      	cmp	r3, r2
   d76de:	db08      	blt.n	d76f2 <localtime_r+0x92>
   d76e0:	e001      	b.n	d76e6 <localtime_r+0x86>
   d76e2:	4293      	cmp	r3, r2
   d76e4:	da07      	bge.n	d76f6 <localtime_r+0x96>
   d76e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d76e8:	4293      	cmp	r3, r2
   d76ea:	bfac      	ite	ge
   d76ec:	2300      	movge	r3, #0
   d76ee:	2301      	movlt	r3, #1
   d76f0:	e002      	b.n	d76f8 <localtime_r+0x98>
   d76f2:	2300      	movs	r3, #0
   d76f4:	e000      	b.n	d76f8 <localtime_r+0x98>
   d76f6:	2301      	movs	r3, #1
   d76f8:	6223      	str	r3, [r4, #32]
   d76fa:	6a23      	ldr	r3, [r4, #32]
   d76fc:	2b01      	cmp	r3, #1
   d76fe:	bf0c      	ite	eq
   d7700:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7702:	6a39      	ldrne	r1, [r7, #32]
   d7704:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7708:	203c      	movs	r0, #60	; 0x3c
   d770a:	fb91 f6f3 	sdiv	r6, r1, r3
   d770e:	fb03 1316 	mls	r3, r3, r6, r1
   d7712:	6861      	ldr	r1, [r4, #4]
   d7714:	fb93 f2f0 	sdiv	r2, r3, r0
   d7718:	fb00 3012 	mls	r0, r0, r2, r3
   d771c:	6823      	ldr	r3, [r4, #0]
   d771e:	1a89      	subs	r1, r1, r2
   d7720:	68a2      	ldr	r2, [r4, #8]
   d7722:	6061      	str	r1, [r4, #4]
   d7724:	1a1b      	subs	r3, r3, r0
   d7726:	1b92      	subs	r2, r2, r6
   d7728:	2b3b      	cmp	r3, #59	; 0x3b
   d772a:	6023      	str	r3, [r4, #0]
   d772c:	60a2      	str	r2, [r4, #8]
   d772e:	dd03      	ble.n	d7738 <localtime_r+0xd8>
   d7730:	3101      	adds	r1, #1
   d7732:	6061      	str	r1, [r4, #4]
   d7734:	3b3c      	subs	r3, #60	; 0x3c
   d7736:	e004      	b.n	d7742 <localtime_r+0xe2>
   d7738:	2b00      	cmp	r3, #0
   d773a:	da03      	bge.n	d7744 <localtime_r+0xe4>
   d773c:	3901      	subs	r1, #1
   d773e:	6061      	str	r1, [r4, #4]
   d7740:	333c      	adds	r3, #60	; 0x3c
   d7742:	6023      	str	r3, [r4, #0]
   d7744:	6863      	ldr	r3, [r4, #4]
   d7746:	2b3b      	cmp	r3, #59	; 0x3b
   d7748:	dd03      	ble.n	d7752 <localtime_r+0xf2>
   d774a:	3201      	adds	r2, #1
   d774c:	60a2      	str	r2, [r4, #8]
   d774e:	3b3c      	subs	r3, #60	; 0x3c
   d7750:	e004      	b.n	d775c <localtime_r+0xfc>
   d7752:	2b00      	cmp	r3, #0
   d7754:	da03      	bge.n	d775e <localtime_r+0xfe>
   d7756:	3a01      	subs	r2, #1
   d7758:	60a2      	str	r2, [r4, #8]
   d775a:	333c      	adds	r3, #60	; 0x3c
   d775c:	6063      	str	r3, [r4, #4]
   d775e:	68a3      	ldr	r3, [r4, #8]
   d7760:	2b17      	cmp	r3, #23
   d7762:	dd22      	ble.n	d77aa <localtime_r+0x14a>
   d7764:	69e2      	ldr	r2, [r4, #28]
   d7766:	3201      	adds	r2, #1
   d7768:	61e2      	str	r2, [r4, #28]
   d776a:	69a2      	ldr	r2, [r4, #24]
   d776c:	3201      	adds	r2, #1
   d776e:	2a06      	cmp	r2, #6
   d7770:	bfc8      	it	gt
   d7772:	2200      	movgt	r2, #0
   d7774:	61a2      	str	r2, [r4, #24]
   d7776:	68e2      	ldr	r2, [r4, #12]
   d7778:	3b18      	subs	r3, #24
   d777a:	3201      	adds	r2, #1
   d777c:	60a3      	str	r3, [r4, #8]
   d777e:	6923      	ldr	r3, [r4, #16]
   d7780:	60e2      	str	r2, [r4, #12]
   d7782:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7786:	428a      	cmp	r2, r1
   d7788:	dd46      	ble.n	d7818 <localtime_r+0x1b8>
   d778a:	3301      	adds	r3, #1
   d778c:	2b0c      	cmp	r3, #12
   d778e:	bf0c      	ite	eq
   d7790:	6963      	ldreq	r3, [r4, #20]
   d7792:	6123      	strne	r3, [r4, #16]
   d7794:	eba2 0201 	sub.w	r2, r2, r1
   d7798:	60e2      	str	r2, [r4, #12]
   d779a:	bf01      	itttt	eq
   d779c:	3301      	addeq	r3, #1
   d779e:	2200      	moveq	r2, #0
   d77a0:	6122      	streq	r2, [r4, #16]
   d77a2:	6163      	streq	r3, [r4, #20]
   d77a4:	bf08      	it	eq
   d77a6:	61e2      	streq	r2, [r4, #28]
   d77a8:	e036      	b.n	d7818 <localtime_r+0x1b8>
   d77aa:	2b00      	cmp	r3, #0
   d77ac:	da34      	bge.n	d7818 <localtime_r+0x1b8>
   d77ae:	69e2      	ldr	r2, [r4, #28]
   d77b0:	3a01      	subs	r2, #1
   d77b2:	61e2      	str	r2, [r4, #28]
   d77b4:	69a2      	ldr	r2, [r4, #24]
   d77b6:	3a01      	subs	r2, #1
   d77b8:	bf48      	it	mi
   d77ba:	2206      	movmi	r2, #6
   d77bc:	61a2      	str	r2, [r4, #24]
   d77be:	68e2      	ldr	r2, [r4, #12]
   d77c0:	3318      	adds	r3, #24
   d77c2:	3a01      	subs	r2, #1
   d77c4:	60e2      	str	r2, [r4, #12]
   d77c6:	60a3      	str	r3, [r4, #8]
   d77c8:	bb32      	cbnz	r2, d7818 <localtime_r+0x1b8>
   d77ca:	6923      	ldr	r3, [r4, #16]
   d77cc:	3b01      	subs	r3, #1
   d77ce:	d401      	bmi.n	d77d4 <localtime_r+0x174>
   d77d0:	6123      	str	r3, [r4, #16]
   d77d2:	e01d      	b.n	d7810 <localtime_r+0x1b0>
   d77d4:	230b      	movs	r3, #11
   d77d6:	6123      	str	r3, [r4, #16]
   d77d8:	6963      	ldr	r3, [r4, #20]
   d77da:	1e5a      	subs	r2, r3, #1
   d77dc:	f012 0f03 	tst.w	r2, #3
   d77e0:	6162      	str	r2, [r4, #20]
   d77e2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d77e6:	d105      	bne.n	d77f4 <localtime_r+0x194>
   d77e8:	2164      	movs	r1, #100	; 0x64
   d77ea:	fb93 f2f1 	sdiv	r2, r3, r1
   d77ee:	fb01 3212 	mls	r2, r1, r2, r3
   d77f2:	b94a      	cbnz	r2, d7808 <localtime_r+0x1a8>
   d77f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d77f8:	fb93 f2f1 	sdiv	r2, r3, r1
   d77fc:	fb01 3312 	mls	r3, r1, r2, r3
   d7800:	fab3 f383 	clz	r3, r3
   d7804:	095b      	lsrs	r3, r3, #5
   d7806:	e000      	b.n	d780a <localtime_r+0x1aa>
   d7808:	2301      	movs	r3, #1
   d780a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d780e:	61e3      	str	r3, [r4, #28]
   d7810:	6923      	ldr	r3, [r4, #16]
   d7812:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7816:	60e3      	str	r3, [r4, #12]
   d7818:	f001 f88b 	bl	d8932 <__tz_unlock>
   d781c:	4620      	mov	r0, r4
   d781e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7822:	bf00      	nop
   d7824:	000da3bc 	.word	0x000da3bc
   d7828:	2003e7e4 	.word	0x2003e7e4

000d782c <_localeconv_r>:
   d782c:	4800      	ldr	r0, [pc, #0]	; (d7830 <_localeconv_r+0x4>)
   d782e:	4770      	bx	lr
   d7830:	2003e1cc 	.word	0x2003e1cc

000d7834 <memcpy>:
   d7834:	b510      	push	{r4, lr}
   d7836:	1e43      	subs	r3, r0, #1
   d7838:	440a      	add	r2, r1
   d783a:	4291      	cmp	r1, r2
   d783c:	d004      	beq.n	d7848 <memcpy+0x14>
   d783e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7842:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7846:	e7f8      	b.n	d783a <memcpy+0x6>
   d7848:	bd10      	pop	{r4, pc}

000d784a <memset>:
   d784a:	4402      	add	r2, r0
   d784c:	4603      	mov	r3, r0
   d784e:	4293      	cmp	r3, r2
   d7850:	d002      	beq.n	d7858 <memset+0xe>
   d7852:	f803 1b01 	strb.w	r1, [r3], #1
   d7856:	e7fa      	b.n	d784e <memset+0x4>
   d7858:	4770      	bx	lr
	...

000d785c <srand>:
   d785c:	b538      	push	{r3, r4, r5, lr}
   d785e:	4b12      	ldr	r3, [pc, #72]	; (d78a8 <srand+0x4c>)
   d7860:	681c      	ldr	r4, [r3, #0]
   d7862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7864:	4605      	mov	r5, r0
   d7866:	b9d3      	cbnz	r3, d789e <srand+0x42>
   d7868:	2018      	movs	r0, #24
   d786a:	f7fd fdef 	bl	d544c <malloc>
   d786e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7872:	63a0      	str	r0, [r4, #56]	; 0x38
   d7874:	8003      	strh	r3, [r0, #0]
   d7876:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d787a:	8043      	strh	r3, [r0, #2]
   d787c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7880:	8083      	strh	r3, [r0, #4]
   d7882:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7886:	80c3      	strh	r3, [r0, #6]
   d7888:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d788c:	8103      	strh	r3, [r0, #8]
   d788e:	2305      	movs	r3, #5
   d7890:	8143      	strh	r3, [r0, #10]
   d7892:	230b      	movs	r3, #11
   d7894:	8183      	strh	r3, [r0, #12]
   d7896:	2201      	movs	r2, #1
   d7898:	2300      	movs	r3, #0
   d789a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d789e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d78a0:	2200      	movs	r2, #0
   d78a2:	611d      	str	r5, [r3, #16]
   d78a4:	615a      	str	r2, [r3, #20]
   d78a6:	bd38      	pop	{r3, r4, r5, pc}
   d78a8:	2003e1c8 	.word	0x2003e1c8

000d78ac <strcmp>:
   d78ac:	f810 2b01 	ldrb.w	r2, [r0], #1
   d78b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d78b4:	2a01      	cmp	r2, #1
   d78b6:	bf28      	it	cs
   d78b8:	429a      	cmpcs	r2, r3
   d78ba:	d0f7      	beq.n	d78ac <strcmp>
   d78bc:	1ad0      	subs	r0, r2, r3
   d78be:	4770      	bx	lr

000d78c0 <strcpy>:
   d78c0:	4603      	mov	r3, r0
   d78c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d78c6:	f803 2b01 	strb.w	r2, [r3], #1
   d78ca:	2a00      	cmp	r2, #0
   d78cc:	d1f9      	bne.n	d78c2 <strcpy+0x2>
   d78ce:	4770      	bx	lr

000d78d0 <strdup>:
   d78d0:	4b02      	ldr	r3, [pc, #8]	; (d78dc <strdup+0xc>)
   d78d2:	4601      	mov	r1, r0
   d78d4:	6818      	ldr	r0, [r3, #0]
   d78d6:	f000 b803 	b.w	d78e0 <_strdup_r>
   d78da:	bf00      	nop
   d78dc:	2003e1c8 	.word	0x2003e1c8

000d78e0 <_strdup_r>:
   d78e0:	b570      	push	{r4, r5, r6, lr}
   d78e2:	4606      	mov	r6, r0
   d78e4:	4608      	mov	r0, r1
   d78e6:	460c      	mov	r4, r1
   d78e8:	f000 f80d 	bl	d7906 <strlen>
   d78ec:	1c45      	adds	r5, r0, #1
   d78ee:	4629      	mov	r1, r5
   d78f0:	4630      	mov	r0, r6
   d78f2:	f7fd fddb 	bl	d54ac <_malloc_r>
   d78f6:	4606      	mov	r6, r0
   d78f8:	b118      	cbz	r0, d7902 <_strdup_r+0x22>
   d78fa:	462a      	mov	r2, r5
   d78fc:	4621      	mov	r1, r4
   d78fe:	f7ff ff99 	bl	d7834 <memcpy>
   d7902:	4630      	mov	r0, r6
   d7904:	bd70      	pop	{r4, r5, r6, pc}

000d7906 <strlen>:
   d7906:	4603      	mov	r3, r0
   d7908:	f813 2b01 	ldrb.w	r2, [r3], #1
   d790c:	2a00      	cmp	r2, #0
   d790e:	d1fb      	bne.n	d7908 <strlen+0x2>
   d7910:	1a18      	subs	r0, r3, r0
   d7912:	3801      	subs	r0, #1
   d7914:	4770      	bx	lr

000d7916 <strncmp>:
   d7916:	b530      	push	{r4, r5, lr}
   d7918:	b182      	cbz	r2, d793c <strncmp+0x26>
   d791a:	1e45      	subs	r5, r0, #1
   d791c:	3901      	subs	r1, #1
   d791e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7922:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7926:	42a3      	cmp	r3, r4
   d7928:	d106      	bne.n	d7938 <strncmp+0x22>
   d792a:	43ec      	mvns	r4, r5
   d792c:	4414      	add	r4, r2
   d792e:	42e0      	cmn	r0, r4
   d7930:	d001      	beq.n	d7936 <strncmp+0x20>
   d7932:	2b00      	cmp	r3, #0
   d7934:	d1f3      	bne.n	d791e <strncmp+0x8>
   d7936:	461c      	mov	r4, r3
   d7938:	1b18      	subs	r0, r3, r4
   d793a:	bd30      	pop	{r4, r5, pc}
   d793c:	4610      	mov	r0, r2
   d793e:	bd30      	pop	{r4, r5, pc}

000d7940 <strncpy>:
   d7940:	b510      	push	{r4, lr}
   d7942:	4603      	mov	r3, r0
   d7944:	b142      	cbz	r2, d7958 <strncpy+0x18>
   d7946:	f811 4b01 	ldrb.w	r4, [r1], #1
   d794a:	f803 4b01 	strb.w	r4, [r3], #1
   d794e:	3a01      	subs	r2, #1
   d7950:	2c00      	cmp	r4, #0
   d7952:	d1f7      	bne.n	d7944 <strncpy+0x4>
   d7954:	441a      	add	r2, r3
   d7956:	e000      	b.n	d795a <strncpy+0x1a>
   d7958:	bd10      	pop	{r4, pc}
   d795a:	4293      	cmp	r3, r2
   d795c:	d002      	beq.n	d7964 <strncpy+0x24>
   d795e:	f803 4b01 	strb.w	r4, [r3], #1
   d7962:	e7fa      	b.n	d795a <strncpy+0x1a>
   d7964:	bd10      	pop	{r4, pc}

000d7966 <sulp>:
   d7966:	b570      	push	{r4, r5, r6, lr}
   d7968:	4604      	mov	r4, r0
   d796a:	460d      	mov	r5, r1
   d796c:	ec45 4b10 	vmov	d0, r4, r5
   d7970:	4616      	mov	r6, r2
   d7972:	f002 f829 	bl	d99c8 <__ulp>
   d7976:	ec51 0b10 	vmov	r0, r1, d0
   d797a:	b17e      	cbz	r6, d799c <sulp+0x36>
   d797c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7984:	2b00      	cmp	r3, #0
   d7986:	dd09      	ble.n	d799c <sulp+0x36>
   d7988:	051b      	lsls	r3, r3, #20
   d798a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d798e:	2400      	movs	r4, #0
   d7990:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7994:	4622      	mov	r2, r4
   d7996:	462b      	mov	r3, r5
   d7998:	f7ff fb08 	bl	d6fac <__aeabi_dmul>
   d799c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d79a0 <_strtod_r>:
   d79a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79a4:	b09d      	sub	sp, #116	; 0x74
   d79a6:	2300      	movs	r3, #0
   d79a8:	9002      	str	r0, [sp, #8]
   d79aa:	460c      	mov	r4, r1
   d79ac:	9213      	str	r2, [sp, #76]	; 0x4c
   d79ae:	9318      	str	r3, [sp, #96]	; 0x60
   d79b0:	f04f 0a00 	mov.w	sl, #0
   d79b4:	f04f 0b00 	mov.w	fp, #0
   d79b8:	9117      	str	r1, [sp, #92]	; 0x5c
   d79ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d79bc:	781a      	ldrb	r2, [r3, #0]
   d79be:	2a0d      	cmp	r2, #13
   d79c0:	d805      	bhi.n	d79ce <_strtod_r+0x2e>
   d79c2:	2a09      	cmp	r2, #9
   d79c4:	d213      	bcs.n	d79ee <_strtod_r+0x4e>
   d79c6:	2a00      	cmp	r2, #0
   d79c8:	f000 81ac 	beq.w	d7d24 <_strtod_r+0x384>
   d79cc:	e012      	b.n	d79f4 <_strtod_r+0x54>
   d79ce:	2a2b      	cmp	r2, #43	; 0x2b
   d79d0:	d004      	beq.n	d79dc <_strtod_r+0x3c>
   d79d2:	2a2d      	cmp	r2, #45	; 0x2d
   d79d4:	d004      	beq.n	d79e0 <_strtod_r+0x40>
   d79d6:	2a20      	cmp	r2, #32
   d79d8:	d10c      	bne.n	d79f4 <_strtod_r+0x54>
   d79da:	e008      	b.n	d79ee <_strtod_r+0x4e>
   d79dc:	2200      	movs	r2, #0
   d79de:	e000      	b.n	d79e2 <_strtod_r+0x42>
   d79e0:	2201      	movs	r2, #1
   d79e2:	920c      	str	r2, [sp, #48]	; 0x30
   d79e4:	1c5a      	adds	r2, r3, #1
   d79e6:	9217      	str	r2, [sp, #92]	; 0x5c
   d79e8:	785b      	ldrb	r3, [r3, #1]
   d79ea:	b92b      	cbnz	r3, d79f8 <_strtod_r+0x58>
   d79ec:	e19a      	b.n	d7d24 <_strtod_r+0x384>
   d79ee:	3301      	adds	r3, #1
   d79f0:	9317      	str	r3, [sp, #92]	; 0x5c
   d79f2:	e7e2      	b.n	d79ba <_strtod_r+0x1a>
   d79f4:	2300      	movs	r3, #0
   d79f6:	930c      	str	r3, [sp, #48]	; 0x30
   d79f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d79fa:	782b      	ldrb	r3, [r5, #0]
   d79fc:	2b30      	cmp	r3, #48	; 0x30
   d79fe:	d15c      	bne.n	d7aba <_strtod_r+0x11a>
   d7a00:	786b      	ldrb	r3, [r5, #1]
   d7a02:	2b58      	cmp	r3, #88	; 0x58
   d7a04:	d001      	beq.n	d7a0a <_strtod_r+0x6a>
   d7a06:	2b78      	cmp	r3, #120	; 0x78
   d7a08:	d14c      	bne.n	d7aa4 <_strtod_r+0x104>
   d7a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	ab18      	add	r3, sp, #96	; 0x60
   d7a10:	9300      	str	r3, [sp, #0]
   d7a12:	4aa9      	ldr	r2, [pc, #676]	; (d7cb8 <_strtod_r+0x318>)
   d7a14:	9802      	ldr	r0, [sp, #8]
   d7a16:	ab19      	add	r3, sp, #100	; 0x64
   d7a18:	a917      	add	r1, sp, #92	; 0x5c
   d7a1a:	f001 f95c 	bl	d8cd6 <__gethex>
   d7a1e:	f010 0607 	ands.w	r6, r0, #7
   d7a22:	4604      	mov	r4, r0
   d7a24:	f000 8587 	beq.w	d8536 <_strtod_r+0xb96>
   d7a28:	2e06      	cmp	r6, #6
   d7a2a:	d105      	bne.n	d7a38 <_strtod_r+0x98>
   d7a2c:	3501      	adds	r5, #1
   d7a2e:	2300      	movs	r3, #0
   d7a30:	9517      	str	r5, [sp, #92]	; 0x5c
   d7a32:	930c      	str	r3, [sp, #48]	; 0x30
   d7a34:	f000 bd7f 	b.w	d8536 <_strtod_r+0xb96>
   d7a38:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7a3a:	b13a      	cbz	r2, d7a4c <_strtod_r+0xac>
   d7a3c:	2135      	movs	r1, #53	; 0x35
   d7a3e:	a81a      	add	r0, sp, #104	; 0x68
   d7a40:	f002 f8af 	bl	d9ba2 <__copybits>
   d7a44:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7a46:	9802      	ldr	r0, [sp, #8]
   d7a48:	f001 fd2d 	bl	d94a6 <_Bfree>
   d7a4c:	2e06      	cmp	r6, #6
   d7a4e:	d822      	bhi.n	d7a96 <_strtod_r+0xf6>
   d7a50:	e8df f006 	tbb	[pc, r6]
   d7a54:	18080d04 	.word	0x18080d04
   d7a58:	0d1d      	.short	0x0d1d
   d7a5a:	04          	.byte	0x04
   d7a5b:	00          	.byte	0x00
   d7a5c:	f04f 0b00 	mov.w	fp, #0
   d7a60:	46da      	mov	sl, fp
   d7a62:	e018      	b.n	d7a96 <_strtod_r+0xf6>
   d7a64:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7a68:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d7a6c:	e013      	b.n	d7a96 <_strtod_r+0xf6>
   d7a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7a70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7a72:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7a76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d7a7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7a7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7a82:	e008      	b.n	d7a96 <_strtod_r+0xf6>
   d7a84:	f8df b234 	ldr.w	fp, [pc, #564]	; d7cbc <_strtod_r+0x31c>
   d7a88:	f04f 0a00 	mov.w	sl, #0
   d7a8c:	e003      	b.n	d7a96 <_strtod_r+0xf6>
   d7a8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7a92:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7a96:	0721      	lsls	r1, r4, #28
   d7a98:	f140 854d 	bpl.w	d8536 <_strtod_r+0xb96>
   d7a9c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7aa0:	f000 bd49 	b.w	d8536 <_strtod_r+0xb96>
   d7aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7aa6:	1c5a      	adds	r2, r3, #1
   d7aa8:	9217      	str	r2, [sp, #92]	; 0x5c
   d7aaa:	785b      	ldrb	r3, [r3, #1]
   d7aac:	2b30      	cmp	r3, #48	; 0x30
   d7aae:	d0f9      	beq.n	d7aa4 <_strtod_r+0x104>
   d7ab0:	2b00      	cmp	r3, #0
   d7ab2:	f000 8540 	beq.w	d8536 <_strtod_r+0xb96>
   d7ab6:	2301      	movs	r3, #1
   d7ab8:	e000      	b.n	d7abc <_strtod_r+0x11c>
   d7aba:	2300      	movs	r3, #0
   d7abc:	f04f 0800 	mov.w	r8, #0
   d7ac0:	9306      	str	r3, [sp, #24]
   d7ac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7ac4:	9307      	str	r3, [sp, #28]
   d7ac6:	f8cd 8014 	str.w	r8, [sp, #20]
   d7aca:	f8cd 8010 	str.w	r8, [sp, #16]
   d7ace:	220a      	movs	r2, #10
   d7ad0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7ad2:	782e      	ldrb	r6, [r5, #0]
   d7ad4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7ad8:	b2d9      	uxtb	r1, r3
   d7ada:	2909      	cmp	r1, #9
   d7adc:	d80e      	bhi.n	d7afc <_strtod_r+0x15c>
   d7ade:	9904      	ldr	r1, [sp, #16]
   d7ae0:	2908      	cmp	r1, #8
   d7ae2:	bfdd      	ittte	le
   d7ae4:	9905      	ldrle	r1, [sp, #20]
   d7ae6:	fb02 3301 	mlale	r3, r2, r1, r3
   d7aea:	9305      	strle	r3, [sp, #20]
   d7aec:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7af0:	9b04      	ldr	r3, [sp, #16]
   d7af2:	3501      	adds	r5, #1
   d7af4:	3301      	adds	r3, #1
   d7af6:	9304      	str	r3, [sp, #16]
   d7af8:	9517      	str	r5, [sp, #92]	; 0x5c
   d7afa:	e7e9      	b.n	d7ad0 <_strtod_r+0x130>
   d7afc:	9802      	ldr	r0, [sp, #8]
   d7afe:	f7ff fe95 	bl	d782c <_localeconv_r>
   d7b02:	6807      	ldr	r7, [r0, #0]
   d7b04:	9802      	ldr	r0, [sp, #8]
   d7b06:	f7ff fe91 	bl	d782c <_localeconv_r>
   d7b0a:	6800      	ldr	r0, [r0, #0]
   d7b0c:	f7ff fefb 	bl	d7906 <strlen>
   d7b10:	4639      	mov	r1, r7
   d7b12:	4602      	mov	r2, r0
   d7b14:	4628      	mov	r0, r5
   d7b16:	f7ff fefe 	bl	d7916 <strncmp>
   d7b1a:	4607      	mov	r7, r0
   d7b1c:	b128      	cbz	r0, d7b2a <_strtod_r+0x18a>
   d7b1e:	2000      	movs	r0, #0
   d7b20:	4633      	mov	r3, r6
   d7b22:	9d04      	ldr	r5, [sp, #16]
   d7b24:	4602      	mov	r2, r0
   d7b26:	4601      	mov	r1, r0
   d7b28:	e057      	b.n	d7bda <_strtod_r+0x23a>
   d7b2a:	9802      	ldr	r0, [sp, #8]
   d7b2c:	f7ff fe7e 	bl	d782c <_localeconv_r>
   d7b30:	6800      	ldr	r0, [r0, #0]
   d7b32:	f7ff fee8 	bl	d7906 <strlen>
   d7b36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7b38:	181a      	adds	r2, r3, r0
   d7b3a:	9217      	str	r2, [sp, #92]	; 0x5c
   d7b3c:	9a04      	ldr	r2, [sp, #16]
   d7b3e:	5c1b      	ldrb	r3, [r3, r0]
   d7b40:	2a00      	cmp	r2, #0
   d7b42:	d142      	bne.n	d7bca <_strtod_r+0x22a>
   d7b44:	4610      	mov	r0, r2
   d7b46:	2b30      	cmp	r3, #48	; 0x30
   d7b48:	d105      	bne.n	d7b56 <_strtod_r+0x1b6>
   d7b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7b4c:	1c5a      	adds	r2, r3, #1
   d7b4e:	9217      	str	r2, [sp, #92]	; 0x5c
   d7b50:	3001      	adds	r0, #1
   d7b52:	785b      	ldrb	r3, [r3, #1]
   d7b54:	e7f7      	b.n	d7b46 <_strtod_r+0x1a6>
   d7b56:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7b5a:	2a08      	cmp	r2, #8
   d7b5c:	d843      	bhi.n	d7be6 <_strtod_r+0x246>
   d7b5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d7b60:	9207      	str	r2, [sp, #28]
   d7b62:	4602      	mov	r2, r0
   d7b64:	2000      	movs	r0, #0
   d7b66:	4605      	mov	r5, r0
   d7b68:	3b30      	subs	r3, #48	; 0x30
   d7b6a:	f100 0101 	add.w	r1, r0, #1
   d7b6e:	d026      	beq.n	d7bbe <_strtod_r+0x21e>
   d7b70:	440a      	add	r2, r1
   d7b72:	eb05 0c00 	add.w	ip, r5, r0
   d7b76:	4629      	mov	r1, r5
   d7b78:	260a      	movs	r6, #10
   d7b7a:	4561      	cmp	r1, ip
   d7b7c:	d00e      	beq.n	d7b9c <_strtod_r+0x1fc>
   d7b7e:	3101      	adds	r1, #1
   d7b80:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d7b84:	f1be 0f08 	cmp.w	lr, #8
   d7b88:	dc03      	bgt.n	d7b92 <_strtod_r+0x1f2>
   d7b8a:	9f05      	ldr	r7, [sp, #20]
   d7b8c:	4377      	muls	r7, r6
   d7b8e:	9705      	str	r7, [sp, #20]
   d7b90:	e7f3      	b.n	d7b7a <_strtod_r+0x1da>
   d7b92:	2910      	cmp	r1, #16
   d7b94:	bfd8      	it	le
   d7b96:	fb06 f808 	mulle.w	r8, r6, r8
   d7b9a:	e7ee      	b.n	d7b7a <_strtod_r+0x1da>
   d7b9c:	4428      	add	r0, r5
   d7b9e:	2808      	cmp	r0, #8
   d7ba0:	f100 0501 	add.w	r5, r0, #1
   d7ba4:	dc05      	bgt.n	d7bb2 <_strtod_r+0x212>
   d7ba6:	9805      	ldr	r0, [sp, #20]
   d7ba8:	210a      	movs	r1, #10
   d7baa:	fb01 3300 	mla	r3, r1, r0, r3
   d7bae:	9305      	str	r3, [sp, #20]
   d7bb0:	e004      	b.n	d7bbc <_strtod_r+0x21c>
   d7bb2:	2d10      	cmp	r5, #16
   d7bb4:	bfdc      	itt	le
   d7bb6:	210a      	movle	r1, #10
   d7bb8:	fb01 3808 	mlale	r8, r1, r8, r3
   d7bbc:	2100      	movs	r1, #0
   d7bbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7bc0:	1c58      	adds	r0, r3, #1
   d7bc2:	9017      	str	r0, [sp, #92]	; 0x5c
   d7bc4:	785b      	ldrb	r3, [r3, #1]
   d7bc6:	4608      	mov	r0, r1
   d7bc8:	e002      	b.n	d7bd0 <_strtod_r+0x230>
   d7bca:	9d04      	ldr	r5, [sp, #16]
   d7bcc:	4638      	mov	r0, r7
   d7bce:	463a      	mov	r2, r7
   d7bd0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7bd4:	2909      	cmp	r1, #9
   d7bd6:	d9c7      	bls.n	d7b68 <_strtod_r+0x1c8>
   d7bd8:	2101      	movs	r1, #1
   d7bda:	2b65      	cmp	r3, #101	; 0x65
   d7bdc:	d001      	beq.n	d7be2 <_strtod_r+0x242>
   d7bde:	2b45      	cmp	r3, #69	; 0x45
   d7be0:	d151      	bne.n	d7c86 <_strtod_r+0x2e6>
   d7be2:	b96d      	cbnz	r5, d7c00 <_strtod_r+0x260>
   d7be4:	e004      	b.n	d7bf0 <_strtod_r+0x250>
   d7be6:	2b65      	cmp	r3, #101	; 0x65
   d7be8:	f040 84b3 	bne.w	d8552 <_strtod_r+0xbb2>
   d7bec:	2200      	movs	r2, #0
   d7bee:	2101      	movs	r1, #1
   d7bf0:	b928      	cbnz	r0, d7bfe <_strtod_r+0x25e>
   d7bf2:	9b06      	ldr	r3, [sp, #24]
   d7bf4:	2b00      	cmp	r3, #0
   d7bf6:	f000 8095 	beq.w	d7d24 <_strtod_r+0x384>
   d7bfa:	4605      	mov	r5, r0
   d7bfc:	e000      	b.n	d7c00 <_strtod_r+0x260>
   d7bfe:	2500      	movs	r5, #0
   d7c00:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d7c02:	1c63      	adds	r3, r4, #1
   d7c04:	9317      	str	r3, [sp, #92]	; 0x5c
   d7c06:	7863      	ldrb	r3, [r4, #1]
   d7c08:	2b2b      	cmp	r3, #43	; 0x2b
   d7c0a:	d006      	beq.n	d7c1a <_strtod_r+0x27a>
   d7c0c:	2b2d      	cmp	r3, #45	; 0x2d
   d7c0e:	d002      	beq.n	d7c16 <_strtod_r+0x276>
   d7c10:	2600      	movs	r6, #0
   d7c12:	9603      	str	r6, [sp, #12]
   d7c14:	e006      	b.n	d7c24 <_strtod_r+0x284>
   d7c16:	2301      	movs	r3, #1
   d7c18:	e000      	b.n	d7c1c <_strtod_r+0x27c>
   d7c1a:	2300      	movs	r3, #0
   d7c1c:	9303      	str	r3, [sp, #12]
   d7c1e:	1ca3      	adds	r3, r4, #2
   d7c20:	9317      	str	r3, [sp, #92]	; 0x5c
   d7c22:	78a3      	ldrb	r3, [r4, #2]
   d7c24:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7c28:	2e09      	cmp	r6, #9
   d7c2a:	d82b      	bhi.n	d7c84 <_strtod_r+0x2e4>
   d7c2c:	2b30      	cmp	r3, #48	; 0x30
   d7c2e:	d104      	bne.n	d7c3a <_strtod_r+0x29a>
   d7c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c32:	1c5e      	adds	r6, r3, #1
   d7c34:	9617      	str	r6, [sp, #92]	; 0x5c
   d7c36:	785b      	ldrb	r3, [r3, #1]
   d7c38:	e7f8      	b.n	d7c2c <_strtod_r+0x28c>
   d7c3a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d7c3e:	2e08      	cmp	r6, #8
   d7c40:	d821      	bhi.n	d7c86 <_strtod_r+0x2e6>
   d7c42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c48:	f04f 0c0a 	mov.w	ip, #10
   d7c4c:	461f      	mov	r7, r3
   d7c4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c50:	1c5e      	adds	r6, r3, #1
   d7c52:	9617      	str	r6, [sp, #92]	; 0x5c
   d7c54:	785b      	ldrb	r3, [r3, #1]
   d7c56:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d7c5a:	f1b9 0f09 	cmp.w	r9, #9
   d7c5e:	d804      	bhi.n	d7c6a <_strtod_r+0x2ca>
   d7c60:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d7c64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7c68:	e7f1      	b.n	d7c4e <_strtod_r+0x2ae>
   d7c6a:	1bf6      	subs	r6, r6, r7
   d7c6c:	2e08      	cmp	r6, #8
   d7c6e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d7c72:	dc02      	bgt.n	d7c7a <_strtod_r+0x2da>
   d7c74:	45f1      	cmp	r9, lr
   d7c76:	bfa8      	it	ge
   d7c78:	46f1      	movge	r9, lr
   d7c7a:	9e03      	ldr	r6, [sp, #12]
   d7c7c:	b12e      	cbz	r6, d7c8a <_strtod_r+0x2ea>
   d7c7e:	f1c9 0900 	rsb	r9, r9, #0
   d7c82:	e002      	b.n	d7c8a <_strtod_r+0x2ea>
   d7c84:	9417      	str	r4, [sp, #92]	; 0x5c
   d7c86:	f04f 0900 	mov.w	r9, #0
   d7c8a:	2d00      	cmp	r5, #0
   d7c8c:	d153      	bne.n	d7d36 <_strtod_r+0x396>
   d7c8e:	2800      	cmp	r0, #0
   d7c90:	f040 8451 	bne.w	d8536 <_strtod_r+0xb96>
   d7c94:	9a06      	ldr	r2, [sp, #24]
   d7c96:	2a00      	cmp	r2, #0
   d7c98:	f040 844d 	bne.w	d8536 <_strtod_r+0xb96>
   d7c9c:	2900      	cmp	r1, #0
   d7c9e:	d141      	bne.n	d7d24 <_strtod_r+0x384>
   d7ca0:	2b4e      	cmp	r3, #78	; 0x4e
   d7ca2:	d020      	beq.n	d7ce6 <_strtod_r+0x346>
   d7ca4:	dc02      	bgt.n	d7cac <_strtod_r+0x30c>
   d7ca6:	2b49      	cmp	r3, #73	; 0x49
   d7ca8:	d00a      	beq.n	d7cc0 <_strtod_r+0x320>
   d7caa:	e03b      	b.n	d7d24 <_strtod_r+0x384>
   d7cac:	2b69      	cmp	r3, #105	; 0x69
   d7cae:	d007      	beq.n	d7cc0 <_strtod_r+0x320>
   d7cb0:	2b6e      	cmp	r3, #110	; 0x6e
   d7cb2:	d018      	beq.n	d7ce6 <_strtod_r+0x346>
   d7cb4:	e036      	b.n	d7d24 <_strtod_r+0x384>
   d7cb6:	bf00      	nop
   d7cb8:	000da41c 	.word	0x000da41c
   d7cbc:	7ff00000 	.word	0x7ff00000
   d7cc0:	49a8      	ldr	r1, [pc, #672]	; (d7f64 <_strtod_r+0x5c4>)
   d7cc2:	a817      	add	r0, sp, #92	; 0x5c
   d7cc4:	f001 fa38 	bl	d9138 <__match>
   d7cc8:	b360      	cbz	r0, d7d24 <_strtod_r+0x384>
   d7cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7ccc:	49a6      	ldr	r1, [pc, #664]	; (d7f68 <_strtod_r+0x5c8>)
   d7cce:	3b01      	subs	r3, #1
   d7cd0:	a817      	add	r0, sp, #92	; 0x5c
   d7cd2:	9317      	str	r3, [sp, #92]	; 0x5c
   d7cd4:	f001 fa30 	bl	d9138 <__match>
   d7cd8:	b910      	cbnz	r0, d7ce0 <_strtod_r+0x340>
   d7cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7cdc:	3301      	adds	r3, #1
   d7cde:	9317      	str	r3, [sp, #92]	; 0x5c
   d7ce0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d7f84 <_strtod_r+0x5e4>
   d7ce4:	e01a      	b.n	d7d1c <_strtod_r+0x37c>
   d7ce6:	49a1      	ldr	r1, [pc, #644]	; (d7f6c <_strtod_r+0x5cc>)
   d7ce8:	a817      	add	r0, sp, #92	; 0x5c
   d7cea:	f001 fa25 	bl	d9138 <__match>
   d7cee:	b1c8      	cbz	r0, d7d24 <_strtod_r+0x384>
   d7cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7cf2:	781b      	ldrb	r3, [r3, #0]
   d7cf4:	2b28      	cmp	r3, #40	; 0x28
   d7cf6:	d10f      	bne.n	d7d18 <_strtod_r+0x378>
   d7cf8:	aa1a      	add	r2, sp, #104	; 0x68
   d7cfa:	499d      	ldr	r1, [pc, #628]	; (d7f70 <_strtod_r+0x5d0>)
   d7cfc:	a817      	add	r0, sp, #92	; 0x5c
   d7cfe:	f001 fa2e 	bl	d915e <__hexnan>
   d7d02:	2805      	cmp	r0, #5
   d7d04:	d108      	bne.n	d7d18 <_strtod_r+0x378>
   d7d06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7d08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7d0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7d10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7d14:	f000 bc0f 	b.w	d8536 <_strtod_r+0xb96>
   d7d18:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7f88 <_strtod_r+0x5e8>
   d7d1c:	f04f 0a00 	mov.w	sl, #0
   d7d20:	f000 bc09 	b.w	d8536 <_strtod_r+0xb96>
   d7d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7d26:	9417      	str	r4, [sp, #92]	; 0x5c
   d7d28:	2b00      	cmp	r3, #0
   d7d2a:	f000 840f 	beq.w	d854c <_strtod_r+0xbac>
   d7d2e:	2300      	movs	r3, #0
   d7d30:	930c      	str	r3, [sp, #48]	; 0x30
   d7d32:	f000 bc02 	b.w	d853a <_strtod_r+0xb9a>
   d7d36:	9b04      	ldr	r3, [sp, #16]
   d7d38:	9805      	ldr	r0, [sp, #20]
   d7d3a:	2b00      	cmp	r3, #0
   d7d3c:	bf08      	it	eq
   d7d3e:	462b      	moveq	r3, r5
   d7d40:	2d10      	cmp	r5, #16
   d7d42:	462c      	mov	r4, r5
   d7d44:	ebc2 0909 	rsb	r9, r2, r9
   d7d48:	bfa8      	it	ge
   d7d4a:	2410      	movge	r4, #16
   d7d4c:	9304      	str	r3, [sp, #16]
   d7d4e:	f7ff f8b7 	bl	d6ec0 <__aeabi_ui2d>
   d7d52:	2c09      	cmp	r4, #9
   d7d54:	4682      	mov	sl, r0
   d7d56:	468b      	mov	fp, r1
   d7d58:	dd13      	ble.n	d7d82 <_strtod_r+0x3e2>
   d7d5a:	4b86      	ldr	r3, [pc, #536]	; (d7f74 <_strtod_r+0x5d4>)
   d7d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d7d60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d7d64:	f7ff f922 	bl	d6fac <__aeabi_dmul>
   d7d68:	4606      	mov	r6, r0
   d7d6a:	4640      	mov	r0, r8
   d7d6c:	460f      	mov	r7, r1
   d7d6e:	f7ff f8a7 	bl	d6ec0 <__aeabi_ui2d>
   d7d72:	4602      	mov	r2, r0
   d7d74:	460b      	mov	r3, r1
   d7d76:	4630      	mov	r0, r6
   d7d78:	4639      	mov	r1, r7
   d7d7a:	f7fe ff65 	bl	d6c48 <__adddf3>
   d7d7e:	4682      	mov	sl, r0
   d7d80:	468b      	mov	fp, r1
   d7d82:	2d0f      	cmp	r5, #15
   d7d84:	dc36      	bgt.n	d7df4 <_strtod_r+0x454>
   d7d86:	f1b9 0f00 	cmp.w	r9, #0
   d7d8a:	f000 83d4 	beq.w	d8536 <_strtod_r+0xb96>
   d7d8e:	dd24      	ble.n	d7dda <_strtod_r+0x43a>
   d7d90:	f1b9 0f16 	cmp.w	r9, #22
   d7d94:	dc07      	bgt.n	d7da6 <_strtod_r+0x406>
   d7d96:	4d77      	ldr	r5, [pc, #476]	; (d7f74 <_strtod_r+0x5d4>)
   d7d98:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d7d9c:	4652      	mov	r2, sl
   d7d9e:	465b      	mov	r3, fp
   d7da0:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7da4:	e014      	b.n	d7dd0 <_strtod_r+0x430>
   d7da6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7daa:	4599      	cmp	r9, r3
   d7dac:	dc22      	bgt.n	d7df4 <_strtod_r+0x454>
   d7dae:	4c71      	ldr	r4, [pc, #452]	; (d7f74 <_strtod_r+0x5d4>)
   d7db0:	f1c5 050f 	rsb	r5, r5, #15
   d7db4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7db8:	ebc5 0509 	rsb	r5, r5, r9
   d7dbc:	4652      	mov	r2, sl
   d7dbe:	465b      	mov	r3, fp
   d7dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7dc4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7dc8:	f7ff f8f0 	bl	d6fac <__aeabi_dmul>
   d7dcc:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7dd0:	f7ff f8ec 	bl	d6fac <__aeabi_dmul>
   d7dd4:	4682      	mov	sl, r0
   d7dd6:	468b      	mov	fp, r1
   d7dd8:	e3ad      	b.n	d8536 <_strtod_r+0xb96>
   d7dda:	f119 0f16 	cmn.w	r9, #22
   d7dde:	db09      	blt.n	d7df4 <_strtod_r+0x454>
   d7de0:	4d64      	ldr	r5, [pc, #400]	; (d7f74 <_strtod_r+0x5d4>)
   d7de2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d7de6:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7dea:	4650      	mov	r0, sl
   d7dec:	4659      	mov	r1, fp
   d7dee:	f7ff fa07 	bl	d7200 <__aeabi_ddiv>
   d7df2:	e7ef      	b.n	d7dd4 <_strtod_r+0x434>
   d7df4:	1b2c      	subs	r4, r5, r4
   d7df6:	444c      	add	r4, r9
   d7df8:	2c00      	cmp	r4, #0
   d7dfa:	dd57      	ble.n	d7eac <_strtod_r+0x50c>
   d7dfc:	f014 010f 	ands.w	r1, r4, #15
   d7e00:	d00a      	beq.n	d7e18 <_strtod_r+0x478>
   d7e02:	4b5c      	ldr	r3, [pc, #368]	; (d7f74 <_strtod_r+0x5d4>)
   d7e04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d7e08:	4652      	mov	r2, sl
   d7e0a:	465b      	mov	r3, fp
   d7e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7e10:	f7ff f8cc 	bl	d6fac <__aeabi_dmul>
   d7e14:	4682      	mov	sl, r0
   d7e16:	468b      	mov	fp, r1
   d7e18:	f034 040f 	bics.w	r4, r4, #15
   d7e1c:	f000 80b8 	beq.w	d7f90 <_strtod_r+0x5f0>
   d7e20:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d7e24:	dd0b      	ble.n	d7e3e <_strtod_r+0x49e>
   d7e26:	2400      	movs	r4, #0
   d7e28:	4625      	mov	r5, r4
   d7e2a:	9405      	str	r4, [sp, #20]
   d7e2c:	9404      	str	r4, [sp, #16]
   d7e2e:	9a02      	ldr	r2, [sp, #8]
   d7e30:	f8df b150 	ldr.w	fp, [pc, #336]	; d7f84 <_strtod_r+0x5e4>
   d7e34:	2322      	movs	r3, #34	; 0x22
   d7e36:	6013      	str	r3, [r2, #0]
   d7e38:	f04f 0a00 	mov.w	sl, #0
   d7e3c:	e187      	b.n	d814e <_strtod_r+0x7ae>
   d7e3e:	4e4e      	ldr	r6, [pc, #312]	; (d7f78 <_strtod_r+0x5d8>)
   d7e40:	2300      	movs	r3, #0
   d7e42:	1124      	asrs	r4, r4, #4
   d7e44:	4650      	mov	r0, sl
   d7e46:	4659      	mov	r1, fp
   d7e48:	4698      	mov	r8, r3
   d7e4a:	4637      	mov	r7, r6
   d7e4c:	2c01      	cmp	r4, #1
   d7e4e:	dd0b      	ble.n	d7e68 <_strtod_r+0x4c8>
   d7e50:	07e2      	lsls	r2, r4, #31
   d7e52:	d504      	bpl.n	d7e5e <_strtod_r+0x4be>
   d7e54:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7e58:	f7ff f8a8 	bl	d6fac <__aeabi_dmul>
   d7e5c:	2301      	movs	r3, #1
   d7e5e:	f108 0801 	add.w	r8, r8, #1
   d7e62:	1064      	asrs	r4, r4, #1
   d7e64:	3608      	adds	r6, #8
   d7e66:	e7f1      	b.n	d7e4c <_strtod_r+0x4ac>
   d7e68:	b10b      	cbz	r3, d7e6e <_strtod_r+0x4ce>
   d7e6a:	4682      	mov	sl, r0
   d7e6c:	468b      	mov	fp, r1
   d7e6e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7e72:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d7e76:	4652      	mov	r2, sl
   d7e78:	465b      	mov	r3, fp
   d7e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7e7e:	f7ff f895 	bl	d6fac <__aeabi_dmul>
   d7e82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7e86:	468b      	mov	fp, r1
   d7e88:	460a      	mov	r2, r1
   d7e8a:	0d1b      	lsrs	r3, r3, #20
   d7e8c:	493b      	ldr	r1, [pc, #236]	; (d7f7c <_strtod_r+0x5dc>)
   d7e8e:	051b      	lsls	r3, r3, #20
   d7e90:	428b      	cmp	r3, r1
   d7e92:	4682      	mov	sl, r0
   d7e94:	d8c7      	bhi.n	d7e26 <_strtod_r+0x486>
   d7e96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7e9a:	428b      	cmp	r3, r1
   d7e9c:	bf86      	itte	hi
   d7e9e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d7f8c <_strtod_r+0x5ec>
   d7ea2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7ea6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7eaa:	e071      	b.n	d7f90 <_strtod_r+0x5f0>
   d7eac:	d070      	beq.n	d7f90 <_strtod_r+0x5f0>
   d7eae:	4264      	negs	r4, r4
   d7eb0:	f014 020f 	ands.w	r2, r4, #15
   d7eb4:	d00a      	beq.n	d7ecc <_strtod_r+0x52c>
   d7eb6:	4b2f      	ldr	r3, [pc, #188]	; (d7f74 <_strtod_r+0x5d4>)
   d7eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7ebc:	4650      	mov	r0, sl
   d7ebe:	4659      	mov	r1, fp
   d7ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ec4:	f7ff f99c 	bl	d7200 <__aeabi_ddiv>
   d7ec8:	4682      	mov	sl, r0
   d7eca:	468b      	mov	fp, r1
   d7ecc:	1124      	asrs	r4, r4, #4
   d7ece:	d05f      	beq.n	d7f90 <_strtod_r+0x5f0>
   d7ed0:	2c1f      	cmp	r4, #31
   d7ed2:	dd04      	ble.n	d7ede <_strtod_r+0x53e>
   d7ed4:	2400      	movs	r4, #0
   d7ed6:	4625      	mov	r5, r4
   d7ed8:	9405      	str	r4, [sp, #20]
   d7eda:	9404      	str	r4, [sp, #16]
   d7edc:	e130      	b.n	d8140 <_strtod_r+0x7a0>
   d7ede:	f014 0f10 	tst.w	r4, #16
   d7ee2:	bf0c      	ite	eq
   d7ee4:	2300      	moveq	r3, #0
   d7ee6:	236a      	movne	r3, #106	; 0x6a
   d7ee8:	4e25      	ldr	r6, [pc, #148]	; (d7f80 <_strtod_r+0x5e0>)
   d7eea:	9303      	str	r3, [sp, #12]
   d7eec:	4650      	mov	r0, sl
   d7eee:	4659      	mov	r1, fp
   d7ef0:	2300      	movs	r3, #0
   d7ef2:	2c00      	cmp	r4, #0
   d7ef4:	dd09      	ble.n	d7f0a <_strtod_r+0x56a>
   d7ef6:	07e2      	lsls	r2, r4, #31
   d7ef8:	d504      	bpl.n	d7f04 <_strtod_r+0x564>
   d7efa:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7efe:	f7ff f855 	bl	d6fac <__aeabi_dmul>
   d7f02:	2301      	movs	r3, #1
   d7f04:	1064      	asrs	r4, r4, #1
   d7f06:	3608      	adds	r6, #8
   d7f08:	e7f3      	b.n	d7ef2 <_strtod_r+0x552>
   d7f0a:	b10b      	cbz	r3, d7f10 <_strtod_r+0x570>
   d7f0c:	4682      	mov	sl, r0
   d7f0e:	468b      	mov	fp, r1
   d7f10:	9b03      	ldr	r3, [sp, #12]
   d7f12:	b1eb      	cbz	r3, d7f50 <_strtod_r+0x5b0>
   d7f14:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7f18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7f1c:	2b00      	cmp	r3, #0
   d7f1e:	4659      	mov	r1, fp
   d7f20:	dd16      	ble.n	d7f50 <_strtod_r+0x5b0>
   d7f22:	2b1f      	cmp	r3, #31
   d7f24:	dd0e      	ble.n	d7f44 <_strtod_r+0x5a4>
   d7f26:	2b34      	cmp	r3, #52	; 0x34
   d7f28:	bfde      	ittt	le
   d7f2a:	3b20      	suble	r3, #32
   d7f2c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7f30:	fa02 f303 	lslle.w	r3, r2, r3
   d7f34:	f04f 0a00 	mov.w	sl, #0
   d7f38:	bfcc      	ite	gt
   d7f3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7f3e:	ea03 0b01 	andle.w	fp, r3, r1
   d7f42:	e005      	b.n	d7f50 <_strtod_r+0x5b0>
   d7f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7f48:	fa02 f303 	lsl.w	r3, r2, r3
   d7f4c:	ea03 0a0a 	and.w	sl, r3, sl
   d7f50:	2200      	movs	r2, #0
   d7f52:	2300      	movs	r3, #0
   d7f54:	4650      	mov	r0, sl
   d7f56:	4659      	mov	r1, fp
   d7f58:	f7ff fa90 	bl	d747c <__aeabi_dcmpeq>
   d7f5c:	2800      	cmp	r0, #0
   d7f5e:	d1b9      	bne.n	d7ed4 <_strtod_r+0x534>
   d7f60:	e018      	b.n	d7f94 <_strtod_r+0x5f4>
   d7f62:	bf00      	nop
   d7f64:	000da444 	.word	0x000da444
   d7f68:	000da447 	.word	0x000da447
   d7f6c:	000da44d 	.word	0x000da44d
   d7f70:	000da430 	.word	0x000da430
   d7f74:	000da4b8 	.word	0x000da4b8
   d7f78:	000da580 	.word	0x000da580
   d7f7c:	7ca00000 	.word	0x7ca00000
   d7f80:	000da450 	.word	0x000da450
   d7f84:	7ff00000 	.word	0x7ff00000
   d7f88:	fff80000 	.word	0xfff80000
   d7f8c:	7fefffff 	.word	0x7fefffff
   d7f90:	2300      	movs	r3, #0
   d7f92:	9303      	str	r3, [sp, #12]
   d7f94:	9b05      	ldr	r3, [sp, #20]
   d7f96:	9300      	str	r3, [sp, #0]
   d7f98:	9a04      	ldr	r2, [sp, #16]
   d7f9a:	9907      	ldr	r1, [sp, #28]
   d7f9c:	9802      	ldr	r0, [sp, #8]
   d7f9e:	462b      	mov	r3, r5
   d7fa0:	f001 fad3 	bl	d954a <__s2b>
   d7fa4:	9005      	str	r0, [sp, #20]
   d7fa6:	2800      	cmp	r0, #0
   d7fa8:	f43f af3d 	beq.w	d7e26 <_strtod_r+0x486>
   d7fac:	f1b9 0f00 	cmp.w	r9, #0
   d7fb0:	f1c9 0300 	rsb	r3, r9, #0
   d7fb4:	bfa8      	it	ge
   d7fb6:	2300      	movge	r3, #0
   d7fb8:	930d      	str	r3, [sp, #52]	; 0x34
   d7fba:	2400      	movs	r4, #0
   d7fbc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7fc0:	9312      	str	r3, [sp, #72]	; 0x48
   d7fc2:	4625      	mov	r5, r4
   d7fc4:	9b05      	ldr	r3, [sp, #20]
   d7fc6:	9802      	ldr	r0, [sp, #8]
   d7fc8:	6859      	ldr	r1, [r3, #4]
   d7fca:	f001 fa37 	bl	d943c <_Balloc>
   d7fce:	9004      	str	r0, [sp, #16]
   d7fd0:	2800      	cmp	r0, #0
   d7fd2:	f43f af2c 	beq.w	d7e2e <_strtod_r+0x48e>
   d7fd6:	9b05      	ldr	r3, [sp, #20]
   d7fd8:	691a      	ldr	r2, [r3, #16]
   d7fda:	3202      	adds	r2, #2
   d7fdc:	f103 010c 	add.w	r1, r3, #12
   d7fe0:	0092      	lsls	r2, r2, #2
   d7fe2:	300c      	adds	r0, #12
   d7fe4:	f7ff fc26 	bl	d7834 <memcpy>
   d7fe8:	aa1a      	add	r2, sp, #104	; 0x68
   d7fea:	a919      	add	r1, sp, #100	; 0x64
   d7fec:	ec4b ab10 	vmov	d0, sl, fp
   d7ff0:	9802      	ldr	r0, [sp, #8]
   d7ff2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7ff6:	f001 fd5c 	bl	d9ab2 <__d2b>
   d7ffa:	9018      	str	r0, [sp, #96]	; 0x60
   d7ffc:	2800      	cmp	r0, #0
   d7ffe:	f43f af16 	beq.w	d7e2e <_strtod_r+0x48e>
   d8002:	2101      	movs	r1, #1
   d8004:	9802      	ldr	r0, [sp, #8]
   d8006:	f001 fb2b 	bl	d9660 <__i2b>
   d800a:	4605      	mov	r5, r0
   d800c:	2800      	cmp	r0, #0
   d800e:	f43f af0e 	beq.w	d7e2e <_strtod_r+0x48e>
   d8012:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8014:	9903      	ldr	r1, [sp, #12]
   d8016:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8018:	2b00      	cmp	r3, #0
   d801a:	bfad      	iteet	ge
   d801c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d801e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8020:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d8024:	eb02 0803 	addge.w	r8, r2, r3
   d8028:	bfb8      	it	lt
   d802a:	1ad2      	sublt	r2, r2, r3
   d802c:	eba3 0301 	sub.w	r3, r3, r1
   d8030:	4433      	add	r3, r6
   d8032:	49b5      	ldr	r1, [pc, #724]	; (d8308 <_strtod_r+0x968>)
   d8034:	bfa8      	it	ge
   d8036:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8038:	3b01      	subs	r3, #1
   d803a:	428b      	cmp	r3, r1
   d803c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8040:	f280 808a 	bge.w	d8158 <_strtod_r+0x7b8>
   d8044:	1ac9      	subs	r1, r1, r3
   d8046:	291f      	cmp	r1, #31
   d8048:	bfc8      	it	gt
   d804a:	4fb0      	ldrgt	r7, [pc, #704]	; (d830c <_strtod_r+0x96c>)
   d804c:	f04f 0901 	mov.w	r9, #1
   d8050:	bfd4      	ite	le
   d8052:	fa09 f301 	lslle.w	r3, r9, r1
   d8056:	1aff      	subgt	r7, r7, r3
   d8058:	eba6 0601 	sub.w	r6, r6, r1
   d805c:	bfd9      	ittee	le
   d805e:	9306      	strle	r3, [sp, #24]
   d8060:	2700      	movle	r7, #0
   d8062:	fa09 f707 	lslgt.w	r7, r9, r7
   d8066:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d806a:	eb08 0906 	add.w	r9, r8, r6
   d806e:	9b03      	ldr	r3, [sp, #12]
   d8070:	45c8      	cmp	r8, r9
   d8072:	4416      	add	r6, r2
   d8074:	441e      	add	r6, r3
   d8076:	4643      	mov	r3, r8
   d8078:	bfa8      	it	ge
   d807a:	464b      	movge	r3, r9
   d807c:	42b3      	cmp	r3, r6
   d807e:	bfa8      	it	ge
   d8080:	4633      	movge	r3, r6
   d8082:	2b00      	cmp	r3, #0
   d8084:	bfc2      	ittt	gt
   d8086:	ebc3 0909 	rsbgt	r9, r3, r9
   d808a:	1af6      	subgt	r6, r6, r3
   d808c:	ebc3 0808 	rsbgt	r8, r3, r8
   d8090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8092:	2b00      	cmp	r3, #0
   d8094:	d164      	bne.n	d8160 <_strtod_r+0x7c0>
   d8096:	f1b9 0f00 	cmp.w	r9, #0
   d809a:	dc7a      	bgt.n	d8192 <_strtod_r+0x7f2>
   d809c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d809e:	2b00      	cmp	r3, #0
   d80a0:	f040 8081 	bne.w	d81a6 <_strtod_r+0x806>
   d80a4:	2e00      	cmp	r6, #0
   d80a6:	f300 8088 	bgt.w	d81ba <_strtod_r+0x81a>
   d80aa:	f1b8 0f00 	cmp.w	r8, #0
   d80ae:	f300 808e 	bgt.w	d81ce <_strtod_r+0x82e>
   d80b2:	9a04      	ldr	r2, [sp, #16]
   d80b4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d80b6:	9802      	ldr	r0, [sp, #8]
   d80b8:	f001 fc27 	bl	d990a <__mdiff>
   d80bc:	4604      	mov	r4, r0
   d80be:	2800      	cmp	r0, #0
   d80c0:	f43f aeb5 	beq.w	d7e2e <_strtod_r+0x48e>
   d80c4:	68c3      	ldr	r3, [r0, #12]
   d80c6:	9307      	str	r3, [sp, #28]
   d80c8:	2300      	movs	r3, #0
   d80ca:	60c3      	str	r3, [r0, #12]
   d80cc:	4629      	mov	r1, r5
   d80ce:	f001 fc00 	bl	d98d2 <__mcmp>
   d80d2:	2800      	cmp	r0, #0
   d80d4:	f280 8089 	bge.w	d81ea <_strtod_r+0x84a>
   d80d8:	9b07      	ldr	r3, [sp, #28]
   d80da:	2b00      	cmp	r3, #0
   d80dc:	f040 8204 	bne.w	d84e8 <_strtod_r+0xb48>
   d80e0:	f1ba 0f00 	cmp.w	sl, #0
   d80e4:	f040 8200 	bne.w	d84e8 <_strtod_r+0xb48>
   d80e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d80ec:	2b00      	cmp	r3, #0
   d80ee:	f040 81fb 	bne.w	d84e8 <_strtod_r+0xb48>
   d80f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d80f6:	0d1b      	lsrs	r3, r3, #20
   d80f8:	051b      	lsls	r3, r3, #20
   d80fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d80fe:	f240 81f3 	bls.w	d84e8 <_strtod_r+0xb48>
   d8102:	6963      	ldr	r3, [r4, #20]
   d8104:	2b00      	cmp	r3, #0
   d8106:	d06c      	beq.n	d81e2 <_strtod_r+0x842>
   d8108:	4621      	mov	r1, r4
   d810a:	2201      	movs	r2, #1
   d810c:	9802      	ldr	r0, [sp, #8]
   d810e:	f001 fb8f 	bl	d9830 <__lshift>
   d8112:	4629      	mov	r1, r5
   d8114:	4604      	mov	r4, r0
   d8116:	f001 fbdc 	bl	d98d2 <__mcmp>
   d811a:	2800      	cmp	r0, #0
   d811c:	f340 81e4 	ble.w	d84e8 <_strtod_r+0xb48>
   d8120:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8124:	9a03      	ldr	r2, [sp, #12]
   d8126:	0d1b      	lsrs	r3, r3, #20
   d8128:	051b      	lsls	r3, r3, #20
   d812a:	2a00      	cmp	r2, #0
   d812c:	f000 808c 	beq.w	d8248 <_strtod_r+0x8a8>
   d8130:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8134:	f300 8088 	bgt.w	d8248 <_strtod_r+0x8a8>
   d8138:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d813c:	f300 81d6 	bgt.w	d84ec <_strtod_r+0xb4c>
   d8140:	9a02      	ldr	r2, [sp, #8]
   d8142:	2322      	movs	r3, #34	; 0x22
   d8144:	f04f 0a00 	mov.w	sl, #0
   d8148:	f04f 0b00 	mov.w	fp, #0
   d814c:	6013      	str	r3, [r2, #0]
   d814e:	9b05      	ldr	r3, [sp, #20]
   d8150:	2b00      	cmp	r3, #0
   d8152:	f040 81dc 	bne.w	d850e <_strtod_r+0xb6e>
   d8156:	e1ee      	b.n	d8536 <_strtod_r+0xb96>
   d8158:	2301      	movs	r3, #1
   d815a:	2700      	movs	r7, #0
   d815c:	9306      	str	r3, [sp, #24]
   d815e:	e784      	b.n	d806a <_strtod_r+0x6ca>
   d8160:	4629      	mov	r1, r5
   d8162:	461a      	mov	r2, r3
   d8164:	9802      	ldr	r0, [sp, #8]
   d8166:	f001 fb15 	bl	d9794 <__pow5mult>
   d816a:	4605      	mov	r5, r0
   d816c:	2800      	cmp	r0, #0
   d816e:	f43f ae5e 	beq.w	d7e2e <_strtod_r+0x48e>
   d8172:	4601      	mov	r1, r0
   d8174:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8176:	9802      	ldr	r0, [sp, #8]
   d8178:	f001 fa7b 	bl	d9672 <__multiply>
   d817c:	9007      	str	r0, [sp, #28]
   d817e:	2800      	cmp	r0, #0
   d8180:	f43f ae55 	beq.w	d7e2e <_strtod_r+0x48e>
   d8184:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8186:	9802      	ldr	r0, [sp, #8]
   d8188:	f001 f98d 	bl	d94a6 <_Bfree>
   d818c:	9b07      	ldr	r3, [sp, #28]
   d818e:	9318      	str	r3, [sp, #96]	; 0x60
   d8190:	e781      	b.n	d8096 <_strtod_r+0x6f6>
   d8192:	464a      	mov	r2, r9
   d8194:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8196:	9802      	ldr	r0, [sp, #8]
   d8198:	f001 fb4a 	bl	d9830 <__lshift>
   d819c:	9018      	str	r0, [sp, #96]	; 0x60
   d819e:	2800      	cmp	r0, #0
   d81a0:	f47f af7c 	bne.w	d809c <_strtod_r+0x6fc>
   d81a4:	e643      	b.n	d7e2e <_strtod_r+0x48e>
   d81a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d81a8:	9904      	ldr	r1, [sp, #16]
   d81aa:	9802      	ldr	r0, [sp, #8]
   d81ac:	f001 faf2 	bl	d9794 <__pow5mult>
   d81b0:	9004      	str	r0, [sp, #16]
   d81b2:	2800      	cmp	r0, #0
   d81b4:	f47f af76 	bne.w	d80a4 <_strtod_r+0x704>
   d81b8:	e639      	b.n	d7e2e <_strtod_r+0x48e>
   d81ba:	4632      	mov	r2, r6
   d81bc:	9904      	ldr	r1, [sp, #16]
   d81be:	9802      	ldr	r0, [sp, #8]
   d81c0:	f001 fb36 	bl	d9830 <__lshift>
   d81c4:	9004      	str	r0, [sp, #16]
   d81c6:	2800      	cmp	r0, #0
   d81c8:	f47f af6f 	bne.w	d80aa <_strtod_r+0x70a>
   d81cc:	e62f      	b.n	d7e2e <_strtod_r+0x48e>
   d81ce:	4629      	mov	r1, r5
   d81d0:	4642      	mov	r2, r8
   d81d2:	9802      	ldr	r0, [sp, #8]
   d81d4:	f001 fb2c 	bl	d9830 <__lshift>
   d81d8:	4605      	mov	r5, r0
   d81da:	2800      	cmp	r0, #0
   d81dc:	f47f af69 	bne.w	d80b2 <_strtod_r+0x712>
   d81e0:	e625      	b.n	d7e2e <_strtod_r+0x48e>
   d81e2:	6923      	ldr	r3, [r4, #16]
   d81e4:	2b01      	cmp	r3, #1
   d81e6:	dc8f      	bgt.n	d8108 <_strtod_r+0x768>
   d81e8:	e17e      	b.n	d84e8 <_strtod_r+0xb48>
   d81ea:	d161      	bne.n	d82b0 <_strtod_r+0x910>
   d81ec:	9a07      	ldr	r2, [sp, #28]
   d81ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d81f2:	b322      	cbz	r2, d823e <_strtod_r+0x89e>
   d81f4:	4946      	ldr	r1, [pc, #280]	; (d8310 <_strtod_r+0x970>)
   d81f6:	428b      	cmp	r3, r1
   d81f8:	465a      	mov	r2, fp
   d81fa:	d12e      	bne.n	d825a <_strtod_r+0x8ba>
   d81fc:	9b03      	ldr	r3, [sp, #12]
   d81fe:	4651      	mov	r1, sl
   d8200:	b163      	cbz	r3, d821c <_strtod_r+0x87c>
   d8202:	4b44      	ldr	r3, [pc, #272]	; (d8314 <_strtod_r+0x974>)
   d8204:	4013      	ands	r3, r2
   d8206:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d820a:	d807      	bhi.n	d821c <_strtod_r+0x87c>
   d820c:	0d1b      	lsrs	r3, r3, #20
   d820e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8216:	fa00 f303 	lsl.w	r3, r0, r3
   d821a:	e001      	b.n	d8220 <_strtod_r+0x880>
   d821c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8220:	428b      	cmp	r3, r1
   d8222:	d11a      	bne.n	d825a <_strtod_r+0x8ba>
   d8224:	493c      	ldr	r1, [pc, #240]	; (d8318 <_strtod_r+0x978>)
   d8226:	428a      	cmp	r2, r1
   d8228:	d102      	bne.n	d8230 <_strtod_r+0x890>
   d822a:	3301      	adds	r3, #1
   d822c:	f43f adff 	beq.w	d7e2e <_strtod_r+0x48e>
   d8230:	4b38      	ldr	r3, [pc, #224]	; (d8314 <_strtod_r+0x974>)
   d8232:	4013      	ands	r3, r2
   d8234:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8238:	f04f 0a00 	mov.w	sl, #0
   d823c:	e154      	b.n	d84e8 <_strtod_r+0xb48>
   d823e:	b963      	cbnz	r3, d825a <_strtod_r+0x8ba>
   d8240:	f1ba 0f00 	cmp.w	sl, #0
   d8244:	d109      	bne.n	d825a <_strtod_r+0x8ba>
   d8246:	e76b      	b.n	d8120 <_strtod_r+0x780>
   d8248:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d824c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8250:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d8254:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8258:	e146      	b.n	d84e8 <_strtod_r+0xb48>
   d825a:	b117      	cbz	r7, d8262 <_strtod_r+0x8c2>
   d825c:	ea17 0f0b 	tst.w	r7, fp
   d8260:	e002      	b.n	d8268 <_strtod_r+0x8c8>
   d8262:	9b06      	ldr	r3, [sp, #24]
   d8264:	ea13 0f0a 	tst.w	r3, sl
   d8268:	f000 813e 	beq.w	d84e8 <_strtod_r+0xb48>
   d826c:	9b07      	ldr	r3, [sp, #28]
   d826e:	9a03      	ldr	r2, [sp, #12]
   d8270:	4650      	mov	r0, sl
   d8272:	4659      	mov	r1, fp
   d8274:	b153      	cbz	r3, d828c <_strtod_r+0x8ec>
   d8276:	f7ff fb76 	bl	d7966 <sulp>
   d827a:	4602      	mov	r2, r0
   d827c:	460b      	mov	r3, r1
   d827e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d8282:	f7fe fce1 	bl	d6c48 <__adddf3>
   d8286:	4682      	mov	sl, r0
   d8288:	468b      	mov	fp, r1
   d828a:	e12d      	b.n	d84e8 <_strtod_r+0xb48>
   d828c:	f7ff fb6b 	bl	d7966 <sulp>
   d8290:	4602      	mov	r2, r0
   d8292:	460b      	mov	r3, r1
   d8294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d8298:	f7fe fcd4 	bl	d6c44 <__aeabi_dsub>
   d829c:	2200      	movs	r2, #0
   d829e:	2300      	movs	r3, #0
   d82a0:	4682      	mov	sl, r0
   d82a2:	468b      	mov	fp, r1
   d82a4:	f7ff f8ea 	bl	d747c <__aeabi_dcmpeq>
   d82a8:	2800      	cmp	r0, #0
   d82aa:	f47f af49 	bne.w	d8140 <_strtod_r+0x7a0>
   d82ae:	e11b      	b.n	d84e8 <_strtod_r+0xb48>
   d82b0:	4629      	mov	r1, r5
   d82b2:	4620      	mov	r0, r4
   d82b4:	f001 fc4b 	bl	d9b4e <__ratio>
   d82b8:	ec57 6b10 	vmov	r6, r7, d0
   d82bc:	2200      	movs	r2, #0
   d82be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d82c2:	ee10 0a10 	vmov	r0, s0
   d82c6:	4639      	mov	r1, r7
   d82c8:	f7ff f8ec 	bl	d74a4 <__aeabi_dcmple>
   d82cc:	2800      	cmp	r0, #0
   d82ce:	d042      	beq.n	d8356 <_strtod_r+0x9b6>
   d82d0:	9b07      	ldr	r3, [sp, #28]
   d82d2:	b123      	cbz	r3, d82de <_strtod_r+0x93e>
   d82d4:	f04f 0800 	mov.w	r8, #0
   d82d8:	f8df 9040 	ldr.w	r9, [pc, #64]	; d831c <_strtod_r+0x97c>
   d82dc:	e011      	b.n	d8302 <_strtod_r+0x962>
   d82de:	f1ba 0f00 	cmp.w	sl, #0
   d82e2:	d103      	bne.n	d82ec <_strtod_r+0x94c>
   d82e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d82e8:	b93b      	cbnz	r3, d82fa <_strtod_r+0x95a>
   d82ea:	e01b      	b.n	d8324 <_strtod_r+0x984>
   d82ec:	f1ba 0f01 	cmp.w	sl, #1
   d82f0:	d103      	bne.n	d82fa <_strtod_r+0x95a>
   d82f2:	f1bb 0f00 	cmp.w	fp, #0
   d82f6:	f43f af23 	beq.w	d8140 <_strtod_r+0x7a0>
   d82fa:	f8df 9024 	ldr.w	r9, [pc, #36]	; d8320 <_strtod_r+0x980>
   d82fe:	f04f 0800 	mov.w	r8, #0
   d8302:	2600      	movs	r6, #0
   d8304:	4f05      	ldr	r7, [pc, #20]	; (d831c <_strtod_r+0x97c>)
   d8306:	e039      	b.n	d837c <_strtod_r+0x9dc>
   d8308:	fffffc02 	.word	0xfffffc02
   d830c:	fffffbe2 	.word	0xfffffbe2
   d8310:	000fffff 	.word	0x000fffff
   d8314:	7ff00000 	.word	0x7ff00000
   d8318:	7fefffff 	.word	0x7fefffff
   d831c:	3ff00000 	.word	0x3ff00000
   d8320:	bff00000 	.word	0xbff00000
   d8324:	2200      	movs	r2, #0
   d8326:	4b98      	ldr	r3, [pc, #608]	; (d8588 <_strtod_r+0xbe8>)
   d8328:	4630      	mov	r0, r6
   d832a:	4639      	mov	r1, r7
   d832c:	f7ff f8b0 	bl	d7490 <__aeabi_dcmplt>
   d8330:	b940      	cbnz	r0, d8344 <_strtod_r+0x9a4>
   d8332:	4630      	mov	r0, r6
   d8334:	4639      	mov	r1, r7
   d8336:	2200      	movs	r2, #0
   d8338:	4b94      	ldr	r3, [pc, #592]	; (d858c <_strtod_r+0xbec>)
   d833a:	f7fe fe37 	bl	d6fac <__aeabi_dmul>
   d833e:	4606      	mov	r6, r0
   d8340:	460f      	mov	r7, r1
   d8342:	e001      	b.n	d8348 <_strtod_r+0x9a8>
   d8344:	4f91      	ldr	r7, [pc, #580]	; (d858c <_strtod_r+0xbec>)
   d8346:	2600      	movs	r6, #0
   d8348:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d834c:	9614      	str	r6, [sp, #80]	; 0x50
   d834e:	9315      	str	r3, [sp, #84]	; 0x54
   d8350:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d8354:	e012      	b.n	d837c <_strtod_r+0x9dc>
   d8356:	4b8d      	ldr	r3, [pc, #564]	; (d858c <_strtod_r+0xbec>)
   d8358:	4630      	mov	r0, r6
   d835a:	4639      	mov	r1, r7
   d835c:	2200      	movs	r2, #0
   d835e:	f7fe fe25 	bl	d6fac <__aeabi_dmul>
   d8362:	9b07      	ldr	r3, [sp, #28]
   d8364:	4606      	mov	r6, r0
   d8366:	460f      	mov	r7, r1
   d8368:	b923      	cbnz	r3, d8374 <_strtod_r+0x9d4>
   d836a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d836e:	900e      	str	r0, [sp, #56]	; 0x38
   d8370:	930f      	str	r3, [sp, #60]	; 0x3c
   d8372:	e001      	b.n	d8378 <_strtod_r+0x9d8>
   d8374:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d8378:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d837c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8380:	0d1b      	lsrs	r3, r3, #20
   d8382:	051b      	lsls	r3, r3, #20
   d8384:	9306      	str	r3, [sp, #24]
   d8386:	9a06      	ldr	r2, [sp, #24]
   d8388:	4b81      	ldr	r3, [pc, #516]	; (d8590 <_strtod_r+0xbf0>)
   d838a:	429a      	cmp	r2, r3
   d838c:	d12b      	bne.n	d83e6 <_strtod_r+0xa46>
   d838e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8392:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8396:	ec4b ab10 	vmov	d0, sl, fp
   d839a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d839e:	f001 fb13 	bl	d99c8 <__ulp>
   d83a2:	4640      	mov	r0, r8
   d83a4:	ec53 2b10 	vmov	r2, r3, d0
   d83a8:	4649      	mov	r1, r9
   d83aa:	f7fe fdff 	bl	d6fac <__aeabi_dmul>
   d83ae:	4652      	mov	r2, sl
   d83b0:	465b      	mov	r3, fp
   d83b2:	f7fe fc49 	bl	d6c48 <__adddf3>
   d83b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d83ba:	0d1b      	lsrs	r3, r3, #20
   d83bc:	4a75      	ldr	r2, [pc, #468]	; (d8594 <_strtod_r+0xbf4>)
   d83be:	051b      	lsls	r3, r3, #20
   d83c0:	4293      	cmp	r3, r2
   d83c2:	4682      	mov	sl, r0
   d83c4:	d90c      	bls.n	d83e0 <_strtod_r+0xa40>
   d83c6:	4b74      	ldr	r3, [pc, #464]	; (d8598 <_strtod_r+0xbf8>)
   d83c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d83ca:	429a      	cmp	r2, r3
   d83cc:	d103      	bne.n	d83d6 <_strtod_r+0xa36>
   d83ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d83d0:	3301      	adds	r3, #1
   d83d2:	f43f ad2c 	beq.w	d7e2e <_strtod_r+0x48e>
   d83d6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d8598 <_strtod_r+0xbf8>
   d83da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d83de:	e072      	b.n	d84c6 <_strtod_r+0xb26>
   d83e0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d83e4:	e038      	b.n	d8458 <_strtod_r+0xab8>
   d83e6:	9b03      	ldr	r3, [sp, #12]
   d83e8:	b333      	cbz	r3, d8438 <_strtod_r+0xa98>
   d83ea:	9b06      	ldr	r3, [sp, #24]
   d83ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d83f0:	d822      	bhi.n	d8438 <_strtod_r+0xa98>
   d83f2:	a35d      	add	r3, pc, #372	; (adr r3, d8568 <_strtod_r+0xbc8>)
   d83f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83f8:	4630      	mov	r0, r6
   d83fa:	4639      	mov	r1, r7
   d83fc:	f7ff f852 	bl	d74a4 <__aeabi_dcmple>
   d8400:	b1a8      	cbz	r0, d842e <_strtod_r+0xa8e>
   d8402:	4639      	mov	r1, r7
   d8404:	4630      	mov	r0, r6
   d8406:	f7ff f893 	bl	d7530 <__aeabi_d2uiz>
   d840a:	2800      	cmp	r0, #0
   d840c:	bf08      	it	eq
   d840e:	2001      	moveq	r0, #1
   d8410:	f7fe fd56 	bl	d6ec0 <__aeabi_ui2d>
   d8414:	9b07      	ldr	r3, [sp, #28]
   d8416:	4606      	mov	r6, r0
   d8418:	460f      	mov	r7, r1
   d841a:	b923      	cbnz	r3, d8426 <_strtod_r+0xa86>
   d841c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8420:	9010      	str	r0, [sp, #64]	; 0x40
   d8422:	9311      	str	r3, [sp, #68]	; 0x44
   d8424:	e001      	b.n	d842a <_strtod_r+0xa8a>
   d8426:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d842a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d842e:	9a06      	ldr	r2, [sp, #24]
   d8430:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d8434:	ebc2 0903 	rsb	r9, r2, r3
   d8438:	ed9d 0b08 	vldr	d0, [sp, #32]
   d843c:	f001 fac4 	bl	d99c8 <__ulp>
   d8440:	4640      	mov	r0, r8
   d8442:	ec53 2b10 	vmov	r2, r3, d0
   d8446:	4649      	mov	r1, r9
   d8448:	f7fe fdb0 	bl	d6fac <__aeabi_dmul>
   d844c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8450:	f7fe fbfa 	bl	d6c48 <__adddf3>
   d8454:	4682      	mov	sl, r0
   d8456:	468b      	mov	fp, r1
   d8458:	9b03      	ldr	r3, [sp, #12]
   d845a:	bba3      	cbnz	r3, d84c6 <_strtod_r+0xb26>
   d845c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8460:	0d1b      	lsrs	r3, r3, #20
   d8462:	9a06      	ldr	r2, [sp, #24]
   d8464:	051b      	lsls	r3, r3, #20
   d8466:	429a      	cmp	r2, r3
   d8468:	46d8      	mov	r8, fp
   d846a:	d12c      	bne.n	d84c6 <_strtod_r+0xb26>
   d846c:	4639      	mov	r1, r7
   d846e:	4630      	mov	r0, r6
   d8470:	f7ff f836 	bl	d74e0 <__aeabi_d2iz>
   d8474:	f7fe fd34 	bl	d6ee0 <__aeabi_i2d>
   d8478:	460b      	mov	r3, r1
   d847a:	4602      	mov	r2, r0
   d847c:	4639      	mov	r1, r7
   d847e:	4630      	mov	r0, r6
   d8480:	f7fe fbe0 	bl	d6c44 <__aeabi_dsub>
   d8484:	9b07      	ldr	r3, [sp, #28]
   d8486:	4606      	mov	r6, r0
   d8488:	460f      	mov	r7, r1
   d848a:	b92b      	cbnz	r3, d8498 <_strtod_r+0xaf8>
   d848c:	f1ba 0f00 	cmp.w	sl, #0
   d8490:	d102      	bne.n	d8498 <_strtod_r+0xaf8>
   d8492:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8496:	b183      	cbz	r3, d84ba <_strtod_r+0xb1a>
   d8498:	a335      	add	r3, pc, #212	; (adr r3, d8570 <_strtod_r+0xbd0>)
   d849a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d849e:	4630      	mov	r0, r6
   d84a0:	4639      	mov	r1, r7
   d84a2:	f7fe fff5 	bl	d7490 <__aeabi_dcmplt>
   d84a6:	2800      	cmp	r0, #0
   d84a8:	d131      	bne.n	d850e <_strtod_r+0xb6e>
   d84aa:	a333      	add	r3, pc, #204	; (adr r3, d8578 <_strtod_r+0xbd8>)
   d84ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84b0:	4630      	mov	r0, r6
   d84b2:	4639      	mov	r1, r7
   d84b4:	f7ff f80a 	bl	d74cc <__aeabi_dcmpgt>
   d84b8:	e004      	b.n	d84c4 <_strtod_r+0xb24>
   d84ba:	a331      	add	r3, pc, #196	; (adr r3, d8580 <_strtod_r+0xbe0>)
   d84bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84c0:	f7fe ffe6 	bl	d7490 <__aeabi_dcmplt>
   d84c4:	bb18      	cbnz	r0, d850e <_strtod_r+0xb6e>
   d84c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d84c8:	9802      	ldr	r0, [sp, #8]
   d84ca:	f000 ffec 	bl	d94a6 <_Bfree>
   d84ce:	9904      	ldr	r1, [sp, #16]
   d84d0:	9802      	ldr	r0, [sp, #8]
   d84d2:	f000 ffe8 	bl	d94a6 <_Bfree>
   d84d6:	4629      	mov	r1, r5
   d84d8:	9802      	ldr	r0, [sp, #8]
   d84da:	f000 ffe4 	bl	d94a6 <_Bfree>
   d84de:	4621      	mov	r1, r4
   d84e0:	9802      	ldr	r0, [sp, #8]
   d84e2:	f000 ffe0 	bl	d94a6 <_Bfree>
   d84e6:	e56d      	b.n	d7fc4 <_strtod_r+0x624>
   d84e8:	9b03      	ldr	r3, [sp, #12]
   d84ea:	b183      	cbz	r3, d850e <_strtod_r+0xb6e>
   d84ec:	4b2b      	ldr	r3, [pc, #172]	; (d859c <_strtod_r+0xbfc>)
   d84ee:	930b      	str	r3, [sp, #44]	; 0x2c
   d84f0:	2300      	movs	r3, #0
   d84f2:	930a      	str	r3, [sp, #40]	; 0x28
   d84f4:	4650      	mov	r0, sl
   d84f6:	4659      	mov	r1, fp
   d84f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d84fc:	f7fe fd56 	bl	d6fac <__aeabi_dmul>
   d8500:	4682      	mov	sl, r0
   d8502:	468b      	mov	fp, r1
   d8504:	b919      	cbnz	r1, d850e <_strtod_r+0xb6e>
   d8506:	b910      	cbnz	r0, d850e <_strtod_r+0xb6e>
   d8508:	9a02      	ldr	r2, [sp, #8]
   d850a:	2322      	movs	r3, #34	; 0x22
   d850c:	6013      	str	r3, [r2, #0]
   d850e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8510:	9802      	ldr	r0, [sp, #8]
   d8512:	f000 ffc8 	bl	d94a6 <_Bfree>
   d8516:	9904      	ldr	r1, [sp, #16]
   d8518:	9802      	ldr	r0, [sp, #8]
   d851a:	f000 ffc4 	bl	d94a6 <_Bfree>
   d851e:	4629      	mov	r1, r5
   d8520:	9802      	ldr	r0, [sp, #8]
   d8522:	f000 ffc0 	bl	d94a6 <_Bfree>
   d8526:	9905      	ldr	r1, [sp, #20]
   d8528:	9802      	ldr	r0, [sp, #8]
   d852a:	f000 ffbc 	bl	d94a6 <_Bfree>
   d852e:	4621      	mov	r1, r4
   d8530:	9802      	ldr	r0, [sp, #8]
   d8532:	f000 ffb8 	bl	d94a6 <_Bfree>
   d8536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8538:	b113      	cbz	r3, d8540 <_strtod_r+0xba0>
   d853a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d853c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d853e:	6013      	str	r3, [r2, #0]
   d8540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8542:	b11b      	cbz	r3, d854c <_strtod_r+0xbac>
   d8544:	4652      	mov	r2, sl
   d8546:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d854a:	e007      	b.n	d855c <_strtod_r+0xbbc>
   d854c:	4652      	mov	r2, sl
   d854e:	465b      	mov	r3, fp
   d8550:	e004      	b.n	d855c <_strtod_r+0xbbc>
   d8552:	2500      	movs	r5, #0
   d8554:	462a      	mov	r2, r5
   d8556:	2101      	movs	r1, #1
   d8558:	f7ff bb41 	b.w	d7bde <_strtod_r+0x23e>
   d855c:	ec43 2b10 	vmov	d0, r2, r3
   d8560:	b01d      	add	sp, #116	; 0x74
   d8562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8566:	bf00      	nop
   d8568:	ffc00000 	.word	0xffc00000
   d856c:	41dfffff 	.word	0x41dfffff
   d8570:	94a03595 	.word	0x94a03595
   d8574:	3fdfffff 	.word	0x3fdfffff
   d8578:	35afe535 	.word	0x35afe535
   d857c:	3fe00000 	.word	0x3fe00000
   d8580:	94a03595 	.word	0x94a03595
   d8584:	3fcfffff 	.word	0x3fcfffff
   d8588:	3ff00000 	.word	0x3ff00000
   d858c:	3fe00000 	.word	0x3fe00000
   d8590:	7fe00000 	.word	0x7fe00000
   d8594:	7c9fffff 	.word	0x7c9fffff
   d8598:	7fefffff 	.word	0x7fefffff
   d859c:	39500000 	.word	0x39500000

000d85a0 <strtod>:
   d85a0:	4b02      	ldr	r3, [pc, #8]	; (d85ac <strtod+0xc>)
   d85a2:	460a      	mov	r2, r1
   d85a4:	4601      	mov	r1, r0
   d85a6:	6818      	ldr	r0, [r3, #0]
   d85a8:	f7ff b9fa 	b.w	d79a0 <_strtod_r>
   d85ac:	2003e1c8 	.word	0x2003e1c8

000d85b0 <_strtol_r>:
   d85b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d85b4:	4680      	mov	r8, r0
   d85b6:	4840      	ldr	r0, [pc, #256]	; (d86b8 <_strtol_r+0x108>)
   d85b8:	f8d0 9000 	ldr.w	r9, [r0]
   d85bc:	460f      	mov	r7, r1
   d85be:	463d      	mov	r5, r7
   d85c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d85c4:	eb09 0004 	add.w	r0, r9, r4
   d85c8:	7840      	ldrb	r0, [r0, #1]
   d85ca:	f000 0008 	and.w	r0, r0, #8
   d85ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d85d2:	b108      	cbz	r0, d85d8 <_strtol_r+0x28>
   d85d4:	462f      	mov	r7, r5
   d85d6:	e7f2      	b.n	d85be <_strtol_r+0xe>
   d85d8:	2c2d      	cmp	r4, #45	; 0x2d
   d85da:	d103      	bne.n	d85e4 <_strtol_r+0x34>
   d85dc:	1cbd      	adds	r5, r7, #2
   d85de:	787c      	ldrb	r4, [r7, #1]
   d85e0:	2601      	movs	r6, #1
   d85e2:	e003      	b.n	d85ec <_strtol_r+0x3c>
   d85e4:	2c2b      	cmp	r4, #43	; 0x2b
   d85e6:	bf04      	itt	eq
   d85e8:	787c      	ldrbeq	r4, [r7, #1]
   d85ea:	1cbd      	addeq	r5, r7, #2
   d85ec:	b113      	cbz	r3, d85f4 <_strtol_r+0x44>
   d85ee:	2b10      	cmp	r3, #16
   d85f0:	d10a      	bne.n	d8608 <_strtol_r+0x58>
   d85f2:	e05b      	b.n	d86ac <_strtol_r+0xfc>
   d85f4:	2c30      	cmp	r4, #48	; 0x30
   d85f6:	d157      	bne.n	d86a8 <_strtol_r+0xf8>
   d85f8:	7828      	ldrb	r0, [r5, #0]
   d85fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d85fe:	2858      	cmp	r0, #88	; 0x58
   d8600:	d14d      	bne.n	d869e <_strtol_r+0xee>
   d8602:	786c      	ldrb	r4, [r5, #1]
   d8604:	2310      	movs	r3, #16
   d8606:	3502      	adds	r5, #2
   d8608:	2e00      	cmp	r6, #0
   d860a:	bf14      	ite	ne
   d860c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8610:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8614:	2700      	movs	r7, #0
   d8616:	fbbc faf3 	udiv	sl, ip, r3
   d861a:	4638      	mov	r0, r7
   d861c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8620:	eb09 0e04 	add.w	lr, r9, r4
   d8624:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8628:	f01e 0f04 	tst.w	lr, #4
   d862c:	d001      	beq.n	d8632 <_strtol_r+0x82>
   d862e:	3c30      	subs	r4, #48	; 0x30
   d8630:	e00b      	b.n	d864a <_strtol_r+0x9a>
   d8632:	f01e 0e03 	ands.w	lr, lr, #3
   d8636:	d01b      	beq.n	d8670 <_strtol_r+0xc0>
   d8638:	f1be 0f01 	cmp.w	lr, #1
   d863c:	bf0c      	ite	eq
   d863e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8642:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8646:	ebce 0404 	rsb	r4, lr, r4
   d864a:	42a3      	cmp	r3, r4
   d864c:	dd10      	ble.n	d8670 <_strtol_r+0xc0>
   d864e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8652:	d00a      	beq.n	d866a <_strtol_r+0xba>
   d8654:	4550      	cmp	r0, sl
   d8656:	d806      	bhi.n	d8666 <_strtol_r+0xb6>
   d8658:	d101      	bne.n	d865e <_strtol_r+0xae>
   d865a:	4564      	cmp	r4, ip
   d865c:	dc03      	bgt.n	d8666 <_strtol_r+0xb6>
   d865e:	fb03 4000 	mla	r0, r3, r0, r4
   d8662:	2701      	movs	r7, #1
   d8664:	e001      	b.n	d866a <_strtol_r+0xba>
   d8666:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d866a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d866e:	e7d7      	b.n	d8620 <_strtol_r+0x70>
   d8670:	1c7b      	adds	r3, r7, #1
   d8672:	d10c      	bne.n	d868e <_strtol_r+0xde>
   d8674:	2e00      	cmp	r6, #0
   d8676:	f04f 0322 	mov.w	r3, #34	; 0x22
   d867a:	bf14      	ite	ne
   d867c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8680:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8684:	f8c8 3000 	str.w	r3, [r8]
   d8688:	b92a      	cbnz	r2, d8696 <_strtol_r+0xe6>
   d868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d868e:	b106      	cbz	r6, d8692 <_strtol_r+0xe2>
   d8690:	4240      	negs	r0, r0
   d8692:	b172      	cbz	r2, d86b2 <_strtol_r+0x102>
   d8694:	b107      	cbz	r7, d8698 <_strtol_r+0xe8>
   d8696:	1e69      	subs	r1, r5, #1
   d8698:	6011      	str	r1, [r2, #0]
   d869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d869e:	2430      	movs	r4, #48	; 0x30
   d86a0:	2b00      	cmp	r3, #0
   d86a2:	d1b1      	bne.n	d8608 <_strtol_r+0x58>
   d86a4:	2308      	movs	r3, #8
   d86a6:	e7af      	b.n	d8608 <_strtol_r+0x58>
   d86a8:	230a      	movs	r3, #10
   d86aa:	e7ad      	b.n	d8608 <_strtol_r+0x58>
   d86ac:	2c30      	cmp	r4, #48	; 0x30
   d86ae:	d0a3      	beq.n	d85f8 <_strtol_r+0x48>
   d86b0:	e7aa      	b.n	d8608 <_strtol_r+0x58>
   d86b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86b6:	bf00      	nop
   d86b8:	2003e164 	.word	0x2003e164

000d86bc <strtol>:
   d86bc:	4613      	mov	r3, r2
   d86be:	460a      	mov	r2, r1
   d86c0:	4601      	mov	r1, r0
   d86c2:	4802      	ldr	r0, [pc, #8]	; (d86cc <strtol+0x10>)
   d86c4:	6800      	ldr	r0, [r0, #0]
   d86c6:	f7ff bf73 	b.w	d85b0 <_strtol_r>
   d86ca:	bf00      	nop
   d86cc:	2003e1c8 	.word	0x2003e1c8

000d86d0 <_strtoul_r>:
   d86d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d86d4:	4680      	mov	r8, r0
   d86d6:	483c      	ldr	r0, [pc, #240]	; (d87c8 <_strtoul_r+0xf8>)
   d86d8:	f8d0 9000 	ldr.w	r9, [r0]
   d86dc:	460e      	mov	r6, r1
   d86de:	4635      	mov	r5, r6
   d86e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d86e4:	eb09 0004 	add.w	r0, r9, r4
   d86e8:	7840      	ldrb	r0, [r0, #1]
   d86ea:	f000 0008 	and.w	r0, r0, #8
   d86ee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d86f2:	b108      	cbz	r0, d86f8 <_strtoul_r+0x28>
   d86f4:	462e      	mov	r6, r5
   d86f6:	e7f2      	b.n	d86de <_strtoul_r+0xe>
   d86f8:	2c2d      	cmp	r4, #45	; 0x2d
   d86fa:	d103      	bne.n	d8704 <_strtoul_r+0x34>
   d86fc:	1cb5      	adds	r5, r6, #2
   d86fe:	7874      	ldrb	r4, [r6, #1]
   d8700:	2701      	movs	r7, #1
   d8702:	e003      	b.n	d870c <_strtoul_r+0x3c>
   d8704:	2c2b      	cmp	r4, #43	; 0x2b
   d8706:	bf04      	itt	eq
   d8708:	7874      	ldrbeq	r4, [r6, #1]
   d870a:	1cb5      	addeq	r5, r6, #2
   d870c:	b113      	cbz	r3, d8714 <_strtoul_r+0x44>
   d870e:	2b10      	cmp	r3, #16
   d8710:	d10a      	bne.n	d8728 <_strtoul_r+0x58>
   d8712:	e053      	b.n	d87bc <_strtoul_r+0xec>
   d8714:	2c30      	cmp	r4, #48	; 0x30
   d8716:	d14f      	bne.n	d87b8 <_strtoul_r+0xe8>
   d8718:	7828      	ldrb	r0, [r5, #0]
   d871a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d871e:	2858      	cmp	r0, #88	; 0x58
   d8720:	d145      	bne.n	d87ae <_strtoul_r+0xde>
   d8722:	786c      	ldrb	r4, [r5, #1]
   d8724:	2310      	movs	r3, #16
   d8726:	3502      	adds	r5, #2
   d8728:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d872c:	2600      	movs	r6, #0
   d872e:	fbbc fcf3 	udiv	ip, ip, r3
   d8732:	fb03 fa0c 	mul.w	sl, r3, ip
   d8736:	ea6f 0a0a 	mvn.w	sl, sl
   d873a:	4630      	mov	r0, r6
   d873c:	eb09 0e04 	add.w	lr, r9, r4
   d8740:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8744:	f01e 0f04 	tst.w	lr, #4
   d8748:	d001      	beq.n	d874e <_strtoul_r+0x7e>
   d874a:	3c30      	subs	r4, #48	; 0x30
   d874c:	e00b      	b.n	d8766 <_strtoul_r+0x96>
   d874e:	f01e 0e03 	ands.w	lr, lr, #3
   d8752:	d01a      	beq.n	d878a <_strtoul_r+0xba>
   d8754:	f1be 0f01 	cmp.w	lr, #1
   d8758:	bf0c      	ite	eq
   d875a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d875e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8762:	ebce 0404 	rsb	r4, lr, r4
   d8766:	42a3      	cmp	r3, r4
   d8768:	dd0f      	ble.n	d878a <_strtoul_r+0xba>
   d876a:	2e00      	cmp	r6, #0
   d876c:	db08      	blt.n	d8780 <_strtoul_r+0xb0>
   d876e:	4560      	cmp	r0, ip
   d8770:	d806      	bhi.n	d8780 <_strtoul_r+0xb0>
   d8772:	d101      	bne.n	d8778 <_strtoul_r+0xa8>
   d8774:	4554      	cmp	r4, sl
   d8776:	dc03      	bgt.n	d8780 <_strtoul_r+0xb0>
   d8778:	fb03 4000 	mla	r0, r3, r0, r4
   d877c:	2601      	movs	r6, #1
   d877e:	e001      	b.n	d8784 <_strtoul_r+0xb4>
   d8780:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8784:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8788:	e7d8      	b.n	d873c <_strtoul_r+0x6c>
   d878a:	2e00      	cmp	r6, #0
   d878c:	da07      	bge.n	d879e <_strtoul_r+0xce>
   d878e:	2322      	movs	r3, #34	; 0x22
   d8790:	f8c8 3000 	str.w	r3, [r8]
   d8794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8798:	b92a      	cbnz	r2, d87a6 <_strtoul_r+0xd6>
   d879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d879e:	b107      	cbz	r7, d87a2 <_strtoul_r+0xd2>
   d87a0:	4240      	negs	r0, r0
   d87a2:	b172      	cbz	r2, d87c2 <_strtoul_r+0xf2>
   d87a4:	b106      	cbz	r6, d87a8 <_strtoul_r+0xd8>
   d87a6:	1e69      	subs	r1, r5, #1
   d87a8:	6011      	str	r1, [r2, #0]
   d87aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87ae:	2430      	movs	r4, #48	; 0x30
   d87b0:	2b00      	cmp	r3, #0
   d87b2:	d1b9      	bne.n	d8728 <_strtoul_r+0x58>
   d87b4:	2308      	movs	r3, #8
   d87b6:	e7b7      	b.n	d8728 <_strtoul_r+0x58>
   d87b8:	230a      	movs	r3, #10
   d87ba:	e7b5      	b.n	d8728 <_strtoul_r+0x58>
   d87bc:	2c30      	cmp	r4, #48	; 0x30
   d87be:	d0ab      	beq.n	d8718 <_strtoul_r+0x48>
   d87c0:	e7b2      	b.n	d8728 <_strtoul_r+0x58>
   d87c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87c6:	bf00      	nop
   d87c8:	2003e164 	.word	0x2003e164

000d87cc <strtoul>:
   d87cc:	4613      	mov	r3, r2
   d87ce:	460a      	mov	r2, r1
   d87d0:	4601      	mov	r1, r0
   d87d2:	4802      	ldr	r0, [pc, #8]	; (d87dc <strtoul+0x10>)
   d87d4:	6800      	ldr	r0, [r0, #0]
   d87d6:	f7ff bf7b 	b.w	d86d0 <_strtoul_r>
   d87da:	bf00      	nop
   d87dc:	2003e1c8 	.word	0x2003e1c8

000d87e0 <__tzcalc_limits>:
   d87e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87e4:	4604      	mov	r4, r0
   d87e6:	f000 fd8d 	bl	d9304 <__gettzinfo>
   d87ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d87ee:	429c      	cmp	r4, r3
   d87f0:	f340 8096 	ble.w	d8920 <__tzcalc_limits+0x140>
   d87f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d87f8:	18e3      	adds	r3, r4, r3
   d87fa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d87fe:	109b      	asrs	r3, r3, #2
   d8800:	f240 156d 	movw	r5, #365	; 0x16d
   d8804:	fb05 3502 	mla	r5, r5, r2, r3
   d8808:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d880c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8810:	fb92 f3f3 	sdiv	r3, r2, r3
   d8814:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8818:	442b      	add	r3, r5
   d881a:	18a5      	adds	r5, r4, r2
   d881c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8820:	fb95 f5f2 	sdiv	r5, r5, r2
   d8824:	441d      	add	r5, r3
   d8826:	2364      	movs	r3, #100	; 0x64
   d8828:	fb94 f7f2 	sdiv	r7, r4, r2
   d882c:	fb94 f6f3 	sdiv	r6, r4, r3
   d8830:	fb02 4717 	mls	r7, r2, r7, r4
   d8834:	fb03 4616 	mls	r6, r3, r6, r4
   d8838:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d883c:	fab7 fe87 	clz	lr, r7
   d8840:	9301      	str	r3, [sp, #4]
   d8842:	f004 0303 	and.w	r3, r4, #3
   d8846:	6044      	str	r4, [r0, #4]
   d8848:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d884c:	4601      	mov	r1, r0
   d884e:	9300      	str	r3, [sp, #0]
   d8850:	f04f 0c07 	mov.w	ip, #7
   d8854:	7a0b      	ldrb	r3, [r1, #8]
   d8856:	2b4a      	cmp	r3, #74	; 0x4a
   d8858:	d10e      	bne.n	d8878 <__tzcalc_limits+0x98>
   d885a:	694b      	ldr	r3, [r1, #20]
   d885c:	9a00      	ldr	r2, [sp, #0]
   d885e:	18ec      	adds	r4, r5, r3
   d8860:	b902      	cbnz	r2, d8864 <__tzcalc_limits+0x84>
   d8862:	b906      	cbnz	r6, d8866 <__tzcalc_limits+0x86>
   d8864:	b927      	cbnz	r7, d8870 <__tzcalc_limits+0x90>
   d8866:	2b3b      	cmp	r3, #59	; 0x3b
   d8868:	bfd4      	ite	le
   d886a:	2300      	movle	r3, #0
   d886c:	2301      	movgt	r3, #1
   d886e:	e000      	b.n	d8872 <__tzcalc_limits+0x92>
   d8870:	2300      	movs	r3, #0
   d8872:	4423      	add	r3, r4
   d8874:	3b01      	subs	r3, #1
   d8876:	e03f      	b.n	d88f8 <__tzcalc_limits+0x118>
   d8878:	2b44      	cmp	r3, #68	; 0x44
   d887a:	d102      	bne.n	d8882 <__tzcalc_limits+0xa2>
   d887c:	694b      	ldr	r3, [r1, #20]
   d887e:	442b      	add	r3, r5
   d8880:	e03a      	b.n	d88f8 <__tzcalc_limits+0x118>
   d8882:	9b00      	ldr	r3, [sp, #0]
   d8884:	b92b      	cbnz	r3, d8892 <__tzcalc_limits+0xb2>
   d8886:	2e00      	cmp	r6, #0
   d8888:	bf0c      	ite	eq
   d888a:	46f0      	moveq	r8, lr
   d888c:	f04f 0801 	movne.w	r8, #1
   d8890:	e000      	b.n	d8894 <__tzcalc_limits+0xb4>
   d8892:	46f0      	mov	r8, lr
   d8894:	4b24      	ldr	r3, [pc, #144]	; (d8928 <__tzcalc_limits+0x148>)
   d8896:	68cc      	ldr	r4, [r1, #12]
   d8898:	2230      	movs	r2, #48	; 0x30
   d889a:	fb02 3808 	mla	r8, r2, r8, r3
   d889e:	f1a8 0a04 	sub.w	sl, r8, #4
   d88a2:	46a9      	mov	r9, r5
   d88a4:	2301      	movs	r3, #1
   d88a6:	42a3      	cmp	r3, r4
   d88a8:	da04      	bge.n	d88b4 <__tzcalc_limits+0xd4>
   d88aa:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d88ae:	3301      	adds	r3, #1
   d88b0:	44d9      	add	r9, fp
   d88b2:	e7f8      	b.n	d88a6 <__tzcalc_limits+0xc6>
   d88b4:	f109 0304 	add.w	r3, r9, #4
   d88b8:	fb93 fbfc 	sdiv	fp, r3, ip
   d88bc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d88c0:	2c01      	cmp	r4, #1
   d88c2:	ebca 0a03 	rsb	sl, sl, r3
   d88c6:	694b      	ldr	r3, [r1, #20]
   d88c8:	bfb8      	it	lt
   d88ca:	2401      	movlt	r4, #1
   d88cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d88d0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d88d4:	690b      	ldr	r3, [r1, #16]
   d88d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d88da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d88de:	bf48      	it	mi
   d88e0:	f10a 0a07 	addmi.w	sl, sl, #7
   d88e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d88e8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d88ec:	4453      	add	r3, sl
   d88ee:	42a3      	cmp	r3, r4
   d88f0:	db01      	blt.n	d88f6 <__tzcalc_limits+0x116>
   d88f2:	3b07      	subs	r3, #7
   d88f4:	e7fb      	b.n	d88ee <__tzcalc_limits+0x10e>
   d88f6:	444b      	add	r3, r9
   d88f8:	698c      	ldr	r4, [r1, #24]
   d88fa:	4a0c      	ldr	r2, [pc, #48]	; (d892c <__tzcalc_limits+0x14c>)
   d88fc:	fb02 4303 	mla	r3, r2, r3, r4
   d8900:	6a0c      	ldr	r4, [r1, #32]
   d8902:	4423      	add	r3, r4
   d8904:	f841 3f1c 	str.w	r3, [r1, #28]!
   d8908:	9b01      	ldr	r3, [sp, #4]
   d890a:	4299      	cmp	r1, r3
   d890c:	d1a2      	bne.n	d8854 <__tzcalc_limits+0x74>
   d890e:	69c3      	ldr	r3, [r0, #28]
   d8910:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d8912:	4293      	cmp	r3, r2
   d8914:	bfac      	ite	ge
   d8916:	2300      	movge	r3, #0
   d8918:	2301      	movlt	r3, #1
   d891a:	6003      	str	r3, [r0, #0]
   d891c:	2001      	movs	r0, #1
   d891e:	e000      	b.n	d8922 <__tzcalc_limits+0x142>
   d8920:	2000      	movs	r0, #0
   d8922:	b003      	add	sp, #12
   d8924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8928:	000da3bc 	.word	0x000da3bc
   d892c:	00015180 	.word	0x00015180

000d8930 <__tz_lock>:
   d8930:	4770      	bx	lr

000d8932 <__tz_unlock>:
   d8932:	4770      	bx	lr

000d8934 <_tzset_unlocked>:
   d8934:	4b01      	ldr	r3, [pc, #4]	; (d893c <_tzset_unlocked+0x8>)
   d8936:	6818      	ldr	r0, [r3, #0]
   d8938:	f000 b802 	b.w	d8940 <_tzset_unlocked_r>
   d893c:	2003e1c8 	.word	0x2003e1c8

000d8940 <_tzset_unlocked_r>:
   d8940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8944:	b08d      	sub	sp, #52	; 0x34
   d8946:	4607      	mov	r7, r0
   d8948:	f000 fcdc 	bl	d9304 <__gettzinfo>
   d894c:	49b0      	ldr	r1, [pc, #704]	; (d8c10 <_tzset_unlocked_r+0x2d0>)
   d894e:	4eb1      	ldr	r6, [pc, #708]	; (d8c14 <_tzset_unlocked_r+0x2d4>)
   d8950:	4604      	mov	r4, r0
   d8952:	4638      	mov	r0, r7
   d8954:	f000 fcce 	bl	d92f4 <_getenv_r>
   d8958:	4605      	mov	r5, r0
   d895a:	b960      	cbnz	r0, d8976 <_tzset_unlocked_r+0x36>
   d895c:	4bae      	ldr	r3, [pc, #696]	; (d8c18 <_tzset_unlocked_r+0x2d8>)
   d895e:	4aaf      	ldr	r2, [pc, #700]	; (d8c1c <_tzset_unlocked_r+0x2dc>)
   d8960:	6018      	str	r0, [r3, #0]
   d8962:	4baf      	ldr	r3, [pc, #700]	; (d8c20 <_tzset_unlocked_r+0x2e0>)
   d8964:	6018      	str	r0, [r3, #0]
   d8966:	4baf      	ldr	r3, [pc, #700]	; (d8c24 <_tzset_unlocked_r+0x2e4>)
   d8968:	6830      	ldr	r0, [r6, #0]
   d896a:	601a      	str	r2, [r3, #0]
   d896c:	605a      	str	r2, [r3, #4]
   d896e:	f7fc fd75 	bl	d545c <free>
   d8972:	6035      	str	r5, [r6, #0]
   d8974:	e148      	b.n	d8c08 <_tzset_unlocked_r+0x2c8>
   d8976:	6831      	ldr	r1, [r6, #0]
   d8978:	b979      	cbnz	r1, d899a <_tzset_unlocked_r+0x5a>
   d897a:	6830      	ldr	r0, [r6, #0]
   d897c:	f7fc fd6e 	bl	d545c <free>
   d8980:	4628      	mov	r0, r5
   d8982:	f7fe ffc0 	bl	d7906 <strlen>
   d8986:	1c41      	adds	r1, r0, #1
   d8988:	4638      	mov	r0, r7
   d898a:	f7fc fd8f 	bl	d54ac <_malloc_r>
   d898e:	6030      	str	r0, [r6, #0]
   d8990:	b148      	cbz	r0, d89a6 <_tzset_unlocked_r+0x66>
   d8992:	4629      	mov	r1, r5
   d8994:	f7fe ff94 	bl	d78c0 <strcpy>
   d8998:	e005      	b.n	d89a6 <_tzset_unlocked_r+0x66>
   d899a:	f7fe ff87 	bl	d78ac <strcmp>
   d899e:	2800      	cmp	r0, #0
   d89a0:	f000 8132 	beq.w	d8c08 <_tzset_unlocked_r+0x2c8>
   d89a4:	e7e9      	b.n	d897a <_tzset_unlocked_r+0x3a>
   d89a6:	782b      	ldrb	r3, [r5, #0]
   d89a8:	4a9f      	ldr	r2, [pc, #636]	; (d8c28 <_tzset_unlocked_r+0x2e8>)
   d89aa:	49a0      	ldr	r1, [pc, #640]	; (d8c2c <_tzset_unlocked_r+0x2ec>)
   d89ac:	2b3a      	cmp	r3, #58	; 0x3a
   d89ae:	bf08      	it	eq
   d89b0:	3501      	addeq	r5, #1
   d89b2:	ae0a      	add	r6, sp, #40	; 0x28
   d89b4:	4633      	mov	r3, r6
   d89b6:	4628      	mov	r0, r5
   d89b8:	f7fc fd60 	bl	d547c <siscanf>
   d89bc:	2800      	cmp	r0, #0
   d89be:	f340 8123 	ble.w	d8c08 <_tzset_unlocked_r+0x2c8>
   d89c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d89c4:	18ef      	adds	r7, r5, r3
   d89c6:	5ceb      	ldrb	r3, [r5, r3]
   d89c8:	2b2d      	cmp	r3, #45	; 0x2d
   d89ca:	d103      	bne.n	d89d4 <_tzset_unlocked_r+0x94>
   d89cc:	3701      	adds	r7, #1
   d89ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d89d2:	e003      	b.n	d89dc <_tzset_unlocked_r+0x9c>
   d89d4:	2b2b      	cmp	r3, #43	; 0x2b
   d89d6:	bf08      	it	eq
   d89d8:	3701      	addeq	r7, #1
   d89da:	2501      	movs	r5, #1
   d89dc:	f10d 0a20 	add.w	sl, sp, #32
   d89e0:	f10d 0b1e 	add.w	fp, sp, #30
   d89e4:	f04f 0800 	mov.w	r8, #0
   d89e8:	9603      	str	r6, [sp, #12]
   d89ea:	f8cd a008 	str.w	sl, [sp, #8]
   d89ee:	9601      	str	r6, [sp, #4]
   d89f0:	f8cd b000 	str.w	fp, [sp]
   d89f4:	4633      	mov	r3, r6
   d89f6:	aa07      	add	r2, sp, #28
   d89f8:	498d      	ldr	r1, [pc, #564]	; (d8c30 <_tzset_unlocked_r+0x2f0>)
   d89fa:	f8ad 801e 	strh.w	r8, [sp, #30]
   d89fe:	4638      	mov	r0, r7
   d8a00:	f8ad 8020 	strh.w	r8, [sp, #32]
   d8a04:	f7fc fd3a 	bl	d547c <siscanf>
   d8a08:	4540      	cmp	r0, r8
   d8a0a:	f340 80fd 	ble.w	d8c08 <_tzset_unlocked_r+0x2c8>
   d8a0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8a12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8a16:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8c3c <_tzset_unlocked_r+0x2fc>
   d8a1a:	213c      	movs	r1, #60	; 0x3c
   d8a1c:	fb01 3302 	mla	r3, r1, r2, r3
   d8a20:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8a24:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8a28:	fb01 3302 	mla	r3, r1, r2, r3
   d8a2c:	435d      	muls	r5, r3
   d8a2e:	6225      	str	r5, [r4, #32]
   d8a30:	4d7c      	ldr	r5, [pc, #496]	; (d8c24 <_tzset_unlocked_r+0x2e4>)
   d8a32:	4b7d      	ldr	r3, [pc, #500]	; (d8c28 <_tzset_unlocked_r+0x2e8>)
   d8a34:	602b      	str	r3, [r5, #0]
   d8a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a38:	497c      	ldr	r1, [pc, #496]	; (d8c2c <_tzset_unlocked_r+0x2ec>)
   d8a3a:	441f      	add	r7, r3
   d8a3c:	464a      	mov	r2, r9
   d8a3e:	4633      	mov	r3, r6
   d8a40:	4638      	mov	r0, r7
   d8a42:	f7fc fd1b 	bl	d547c <siscanf>
   d8a46:	4540      	cmp	r0, r8
   d8a48:	dc08      	bgt.n	d8a5c <_tzset_unlocked_r+0x11c>
   d8a4a:	682b      	ldr	r3, [r5, #0]
   d8a4c:	606b      	str	r3, [r5, #4]
   d8a4e:	4b72      	ldr	r3, [pc, #456]	; (d8c18 <_tzset_unlocked_r+0x2d8>)
   d8a50:	6a22      	ldr	r2, [r4, #32]
   d8a52:	601a      	str	r2, [r3, #0]
   d8a54:	4b72      	ldr	r3, [pc, #456]	; (d8c20 <_tzset_unlocked_r+0x2e0>)
   d8a56:	f8c3 8000 	str.w	r8, [r3]
   d8a5a:	e0d5      	b.n	d8c08 <_tzset_unlocked_r+0x2c8>
   d8a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a5e:	f8c5 9004 	str.w	r9, [r5, #4]
   d8a62:	18fd      	adds	r5, r7, r3
   d8a64:	5cfb      	ldrb	r3, [r7, r3]
   d8a66:	2b2d      	cmp	r3, #45	; 0x2d
   d8a68:	d103      	bne.n	d8a72 <_tzset_unlocked_r+0x132>
   d8a6a:	3501      	adds	r5, #1
   d8a6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8a70:	e003      	b.n	d8a7a <_tzset_unlocked_r+0x13a>
   d8a72:	2b2b      	cmp	r3, #43	; 0x2b
   d8a74:	bf08      	it	eq
   d8a76:	3501      	addeq	r5, #1
   d8a78:	2701      	movs	r7, #1
   d8a7a:	2300      	movs	r3, #0
   d8a7c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8a80:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8a84:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8a88:	930a      	str	r3, [sp, #40]	; 0x28
   d8a8a:	9603      	str	r6, [sp, #12]
   d8a8c:	f8cd a008 	str.w	sl, [sp, #8]
   d8a90:	9601      	str	r6, [sp, #4]
   d8a92:	f8cd b000 	str.w	fp, [sp]
   d8a96:	4633      	mov	r3, r6
   d8a98:	aa07      	add	r2, sp, #28
   d8a9a:	4965      	ldr	r1, [pc, #404]	; (d8c30 <_tzset_unlocked_r+0x2f0>)
   d8a9c:	4628      	mov	r0, r5
   d8a9e:	f7fc fced 	bl	d547c <siscanf>
   d8aa2:	2800      	cmp	r0, #0
   d8aa4:	dc04      	bgt.n	d8ab0 <_tzset_unlocked_r+0x170>
   d8aa6:	6a23      	ldr	r3, [r4, #32]
   d8aa8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8aac:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8aae:	e00e      	b.n	d8ace <_tzset_unlocked_r+0x18e>
   d8ab0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8ab4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8ab8:	213c      	movs	r1, #60	; 0x3c
   d8aba:	fb01 3302 	mla	r3, r1, r2, r3
   d8abe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8ac2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8ac6:	fb01 3302 	mla	r3, r1, r2, r3
   d8aca:	435f      	muls	r7, r3
   d8acc:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8ad0:	4627      	mov	r7, r4
   d8ad2:	441d      	add	r5, r3
   d8ad4:	f04f 0900 	mov.w	r9, #0
   d8ad8:	782b      	ldrb	r3, [r5, #0]
   d8ada:	2b2c      	cmp	r3, #44	; 0x2c
   d8adc:	bf08      	it	eq
   d8ade:	3501      	addeq	r5, #1
   d8ae0:	f895 8000 	ldrb.w	r8, [r5]
   d8ae4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8ae8:	d126      	bne.n	d8b38 <_tzset_unlocked_r+0x1f8>
   d8aea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8aee:	9302      	str	r3, [sp, #8]
   d8af0:	ab09      	add	r3, sp, #36	; 0x24
   d8af2:	9300      	str	r3, [sp, #0]
   d8af4:	9603      	str	r6, [sp, #12]
   d8af6:	9601      	str	r6, [sp, #4]
   d8af8:	4633      	mov	r3, r6
   d8afa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8afe:	494d      	ldr	r1, [pc, #308]	; (d8c34 <_tzset_unlocked_r+0x2f4>)
   d8b00:	4628      	mov	r0, r5
   d8b02:	f7fc fcbb 	bl	d547c <siscanf>
   d8b06:	2803      	cmp	r0, #3
   d8b08:	d17e      	bne.n	d8c08 <_tzset_unlocked_r+0x2c8>
   d8b0a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8b0e:	1e4b      	subs	r3, r1, #1
   d8b10:	2b0b      	cmp	r3, #11
   d8b12:	d879      	bhi.n	d8c08 <_tzset_unlocked_r+0x2c8>
   d8b14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8b18:	1e53      	subs	r3, r2, #1
   d8b1a:	2b04      	cmp	r3, #4
   d8b1c:	d874      	bhi.n	d8c08 <_tzset_unlocked_r+0x2c8>
   d8b1e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8b22:	2b06      	cmp	r3, #6
   d8b24:	d870      	bhi.n	d8c08 <_tzset_unlocked_r+0x2c8>
   d8b26:	f887 8008 	strb.w	r8, [r7, #8]
   d8b2a:	60f9      	str	r1, [r7, #12]
   d8b2c:	613a      	str	r2, [r7, #16]
   d8b2e:	617b      	str	r3, [r7, #20]
   d8b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8b32:	eb05 0803 	add.w	r8, r5, r3
   d8b36:	e02a      	b.n	d8b8e <_tzset_unlocked_r+0x24e>
   d8b38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8b3c:	bf06      	itte	eq
   d8b3e:	3501      	addeq	r5, #1
   d8b40:	4643      	moveq	r3, r8
   d8b42:	2344      	movne	r3, #68	; 0x44
   d8b44:	220a      	movs	r2, #10
   d8b46:	a90b      	add	r1, sp, #44	; 0x2c
   d8b48:	4628      	mov	r0, r5
   d8b4a:	9305      	str	r3, [sp, #20]
   d8b4c:	f7ff fe3e 	bl	d87cc <strtoul>
   d8b50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8b54:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8b58:	4545      	cmp	r5, r8
   d8b5a:	9b05      	ldr	r3, [sp, #20]
   d8b5c:	d114      	bne.n	d8b88 <_tzset_unlocked_r+0x248>
   d8b5e:	234d      	movs	r3, #77	; 0x4d
   d8b60:	f1b9 0f00 	cmp.w	r9, #0
   d8b64:	d107      	bne.n	d8b76 <_tzset_unlocked_r+0x236>
   d8b66:	7223      	strb	r3, [r4, #8]
   d8b68:	2303      	movs	r3, #3
   d8b6a:	60e3      	str	r3, [r4, #12]
   d8b6c:	2302      	movs	r3, #2
   d8b6e:	6123      	str	r3, [r4, #16]
   d8b70:	f8c4 9014 	str.w	r9, [r4, #20]
   d8b74:	e00b      	b.n	d8b8e <_tzset_unlocked_r+0x24e>
   d8b76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8b7a:	230b      	movs	r3, #11
   d8b7c:	62a3      	str	r3, [r4, #40]	; 0x28
   d8b7e:	2301      	movs	r3, #1
   d8b80:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8b82:	2300      	movs	r3, #0
   d8b84:	6323      	str	r3, [r4, #48]	; 0x30
   d8b86:	e002      	b.n	d8b8e <_tzset_unlocked_r+0x24e>
   d8b88:	b280      	uxth	r0, r0
   d8b8a:	723b      	strb	r3, [r7, #8]
   d8b8c:	6178      	str	r0, [r7, #20]
   d8b8e:	2302      	movs	r3, #2
   d8b90:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8b94:	2300      	movs	r3, #0
   d8b96:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8b9a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8b9e:	930a      	str	r3, [sp, #40]	; 0x28
   d8ba0:	f898 3000 	ldrb.w	r3, [r8]
   d8ba4:	2b2f      	cmp	r3, #47	; 0x2f
   d8ba6:	d10b      	bne.n	d8bc0 <_tzset_unlocked_r+0x280>
   d8ba8:	9603      	str	r6, [sp, #12]
   d8baa:	f8cd a008 	str.w	sl, [sp, #8]
   d8bae:	9601      	str	r6, [sp, #4]
   d8bb0:	f8cd b000 	str.w	fp, [sp]
   d8bb4:	4633      	mov	r3, r6
   d8bb6:	aa07      	add	r2, sp, #28
   d8bb8:	491f      	ldr	r1, [pc, #124]	; (d8c38 <_tzset_unlocked_r+0x2f8>)
   d8bba:	4640      	mov	r0, r8
   d8bbc:	f7fc fc5e 	bl	d547c <siscanf>
   d8bc0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8bc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8bc8:	213c      	movs	r1, #60	; 0x3c
   d8bca:	fb01 3302 	mla	r3, r1, r2, r3
   d8bce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8bd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8bd6:	fb01 3302 	mla	r3, r1, r2, r3
   d8bda:	61bb      	str	r3, [r7, #24]
   d8bdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8bde:	f109 0901 	add.w	r9, r9, #1
   d8be2:	f1b9 0f02 	cmp.w	r9, #2
   d8be6:	4445      	add	r5, r8
   d8be8:	f107 071c 	add.w	r7, r7, #28
   d8bec:	f47f af74 	bne.w	d8ad8 <_tzset_unlocked_r+0x198>
   d8bf0:	6860      	ldr	r0, [r4, #4]
   d8bf2:	f7ff fdf5 	bl	d87e0 <__tzcalc_limits>
   d8bf6:	4b08      	ldr	r3, [pc, #32]	; (d8c18 <_tzset_unlocked_r+0x2d8>)
   d8bf8:	6a22      	ldr	r2, [r4, #32]
   d8bfa:	601a      	str	r2, [r3, #0]
   d8bfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8bfe:	1a9b      	subs	r3, r3, r2
   d8c00:	4a07      	ldr	r2, [pc, #28]	; (d8c20 <_tzset_unlocked_r+0x2e0>)
   d8c02:	bf18      	it	ne
   d8c04:	2301      	movne	r3, #1
   d8c06:	6013      	str	r3, [r2, #0]
   d8c08:	b00d      	add	sp, #52	; 0x34
   d8c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c0e:	bf00      	nop
   d8c10:	000da478 	.word	0x000da478
   d8c14:	2003e7e0 	.word	0x2003e7e0
   d8c18:	2003e7e8 	.word	0x2003e7e8
   d8c1c:	000da47b 	.word	0x000da47b
   d8c20:	2003e7e4 	.word	0x2003e7e4
   d8c24:	2003e204 	.word	0x2003e204
   d8c28:	2003e7d3 	.word	0x2003e7d3
   d8c2c:	000da47f 	.word	0x000da47f
   d8c30:	000da4a2 	.word	0x000da4a2
   d8c34:	000da48e 	.word	0x000da48e
   d8c38:	000da4a1 	.word	0x000da4a1
   d8c3c:	2003e7c8 	.word	0x2003e7c8

000d8c40 <rshift>:
   d8c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c42:	6906      	ldr	r6, [r0, #16]
   d8c44:	114b      	asrs	r3, r1, #5
   d8c46:	42b3      	cmp	r3, r6
   d8c48:	f100 0514 	add.w	r5, r0, #20
   d8c4c:	da27      	bge.n	d8c9e <rshift+0x5e>
   d8c4e:	f011 011f 	ands.w	r1, r1, #31
   d8c52:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d8c56:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d8c5a:	d101      	bne.n	d8c60 <rshift+0x20>
   d8c5c:	4629      	mov	r1, r5
   d8c5e:	e016      	b.n	d8c8e <rshift+0x4e>
   d8c60:	1d14      	adds	r4, r2, #4
   d8c62:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d8c66:	f1c1 0e20 	rsb	lr, r1, #32
   d8c6a:	40ca      	lsrs	r2, r1
   d8c6c:	462b      	mov	r3, r5
   d8c6e:	42b4      	cmp	r4, r6
   d8c70:	d209      	bcs.n	d8c86 <rshift+0x46>
   d8c72:	6827      	ldr	r7, [r4, #0]
   d8c74:	fa07 f70e 	lsl.w	r7, r7, lr
   d8c78:	433a      	orrs	r2, r7
   d8c7a:	f843 2b04 	str.w	r2, [r3], #4
   d8c7e:	f854 2b04 	ldr.w	r2, [r4], #4
   d8c82:	40ca      	lsrs	r2, r1
   d8c84:	e7f3      	b.n	d8c6e <rshift+0x2e>
   d8c86:	601a      	str	r2, [r3, #0]
   d8c88:	b152      	cbz	r2, d8ca0 <rshift+0x60>
   d8c8a:	3304      	adds	r3, #4
   d8c8c:	e008      	b.n	d8ca0 <rshift+0x60>
   d8c8e:	42b2      	cmp	r2, r6
   d8c90:	460b      	mov	r3, r1
   d8c92:	d205      	bcs.n	d8ca0 <rshift+0x60>
   d8c94:	f852 3b04 	ldr.w	r3, [r2], #4
   d8c98:	f841 3b04 	str.w	r3, [r1], #4
   d8c9c:	e7f7      	b.n	d8c8e <rshift+0x4e>
   d8c9e:	462b      	mov	r3, r5
   d8ca0:	1b5b      	subs	r3, r3, r5
   d8ca2:	109b      	asrs	r3, r3, #2
   d8ca4:	6103      	str	r3, [r0, #16]
   d8ca6:	b903      	cbnz	r3, d8caa <rshift+0x6a>
   d8ca8:	6143      	str	r3, [r0, #20]
   d8caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8cac <__hexdig_fun>:
   d8cac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8cb0:	2b09      	cmp	r3, #9
   d8cb2:	d801      	bhi.n	d8cb8 <__hexdig_fun+0xc>
   d8cb4:	3820      	subs	r0, #32
   d8cb6:	e00a      	b.n	d8cce <__hexdig_fun+0x22>
   d8cb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8cbc:	2b05      	cmp	r3, #5
   d8cbe:	d801      	bhi.n	d8cc4 <__hexdig_fun+0x18>
   d8cc0:	3847      	subs	r0, #71	; 0x47
   d8cc2:	e004      	b.n	d8cce <__hexdig_fun+0x22>
   d8cc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8cc8:	2b05      	cmp	r3, #5
   d8cca:	d802      	bhi.n	d8cd2 <__hexdig_fun+0x26>
   d8ccc:	3827      	subs	r0, #39	; 0x27
   d8cce:	b2c0      	uxtb	r0, r0
   d8cd0:	4770      	bx	lr
   d8cd2:	2000      	movs	r0, #0
   d8cd4:	4770      	bx	lr

000d8cd6 <__gethex>:
   d8cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8cda:	b08b      	sub	sp, #44	; 0x2c
   d8cdc:	468a      	mov	sl, r1
   d8cde:	4690      	mov	r8, r2
   d8ce0:	9306      	str	r3, [sp, #24]
   d8ce2:	9002      	str	r0, [sp, #8]
   d8ce4:	f7fe fda2 	bl	d782c <_localeconv_r>
   d8ce8:	6803      	ldr	r3, [r0, #0]
   d8cea:	9303      	str	r3, [sp, #12]
   d8cec:	4618      	mov	r0, r3
   d8cee:	f7fe fe0a 	bl	d7906 <strlen>
   d8cf2:	9b03      	ldr	r3, [sp, #12]
   d8cf4:	9001      	str	r0, [sp, #4]
   d8cf6:	4403      	add	r3, r0
   d8cf8:	f04f 0b00 	mov.w	fp, #0
   d8cfc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8d00:	9307      	str	r3, [sp, #28]
   d8d02:	f8da 3000 	ldr.w	r3, [sl]
   d8d06:	3302      	adds	r3, #2
   d8d08:	461f      	mov	r7, r3
   d8d0a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8d0e:	2830      	cmp	r0, #48	; 0x30
   d8d10:	d102      	bne.n	d8d18 <__gethex+0x42>
   d8d12:	f10b 0b01 	add.w	fp, fp, #1
   d8d16:	e7f7      	b.n	d8d08 <__gethex+0x32>
   d8d18:	f7ff ffc8 	bl	d8cac <__hexdig_fun>
   d8d1c:	4604      	mov	r4, r0
   d8d1e:	b9e0      	cbnz	r0, d8d5a <__gethex+0x84>
   d8d20:	9a01      	ldr	r2, [sp, #4]
   d8d22:	9903      	ldr	r1, [sp, #12]
   d8d24:	4638      	mov	r0, r7
   d8d26:	f7fe fdf6 	bl	d7916 <strncmp>
   d8d2a:	2800      	cmp	r0, #0
   d8d2c:	d134      	bne.n	d8d98 <__gethex+0xc2>
   d8d2e:	9b01      	ldr	r3, [sp, #4]
   d8d30:	5cf8      	ldrb	r0, [r7, r3]
   d8d32:	18fe      	adds	r6, r7, r3
   d8d34:	f7ff ffba 	bl	d8cac <__hexdig_fun>
   d8d38:	b380      	cbz	r0, d8d9c <__gethex+0xc6>
   d8d3a:	4633      	mov	r3, r6
   d8d3c:	7818      	ldrb	r0, [r3, #0]
   d8d3e:	2830      	cmp	r0, #48	; 0x30
   d8d40:	461f      	mov	r7, r3
   d8d42:	f103 0301 	add.w	r3, r3, #1
   d8d46:	d0f9      	beq.n	d8d3c <__gethex+0x66>
   d8d48:	f7ff ffb0 	bl	d8cac <__hexdig_fun>
   d8d4c:	fab0 f580 	clz	r5, r0
   d8d50:	096d      	lsrs	r5, r5, #5
   d8d52:	4634      	mov	r4, r6
   d8d54:	f04f 0b01 	mov.w	fp, #1
   d8d58:	e001      	b.n	d8d5e <__gethex+0x88>
   d8d5a:	2500      	movs	r5, #0
   d8d5c:	462c      	mov	r4, r5
   d8d5e:	463a      	mov	r2, r7
   d8d60:	4616      	mov	r6, r2
   d8d62:	3201      	adds	r2, #1
   d8d64:	7830      	ldrb	r0, [r6, #0]
   d8d66:	f7ff ffa1 	bl	d8cac <__hexdig_fun>
   d8d6a:	2800      	cmp	r0, #0
   d8d6c:	d1f8      	bne.n	d8d60 <__gethex+0x8a>
   d8d6e:	9a01      	ldr	r2, [sp, #4]
   d8d70:	9903      	ldr	r1, [sp, #12]
   d8d72:	4630      	mov	r0, r6
   d8d74:	f7fe fdcf 	bl	d7916 <strncmp>
   d8d78:	b950      	cbnz	r0, d8d90 <__gethex+0xba>
   d8d7a:	b954      	cbnz	r4, d8d92 <__gethex+0xbc>
   d8d7c:	9b01      	ldr	r3, [sp, #4]
   d8d7e:	18f4      	adds	r4, r6, r3
   d8d80:	4622      	mov	r2, r4
   d8d82:	4616      	mov	r6, r2
   d8d84:	3201      	adds	r2, #1
   d8d86:	7830      	ldrb	r0, [r6, #0]
   d8d88:	f7ff ff90 	bl	d8cac <__hexdig_fun>
   d8d8c:	2800      	cmp	r0, #0
   d8d8e:	d1f8      	bne.n	d8d82 <__gethex+0xac>
   d8d90:	b134      	cbz	r4, d8da0 <__gethex+0xca>
   d8d92:	1ba4      	subs	r4, r4, r6
   d8d94:	00a4      	lsls	r4, r4, #2
   d8d96:	e003      	b.n	d8da0 <__gethex+0xca>
   d8d98:	463e      	mov	r6, r7
   d8d9a:	e000      	b.n	d8d9e <__gethex+0xc8>
   d8d9c:	4604      	mov	r4, r0
   d8d9e:	2501      	movs	r5, #1
   d8da0:	7833      	ldrb	r3, [r6, #0]
   d8da2:	2b50      	cmp	r3, #80	; 0x50
   d8da4:	d001      	beq.n	d8daa <__gethex+0xd4>
   d8da6:	2b70      	cmp	r3, #112	; 0x70
   d8da8:	d12a      	bne.n	d8e00 <__gethex+0x12a>
   d8daa:	7873      	ldrb	r3, [r6, #1]
   d8dac:	2b2b      	cmp	r3, #43	; 0x2b
   d8dae:	d008      	beq.n	d8dc2 <__gethex+0xec>
   d8db0:	2b2d      	cmp	r3, #45	; 0x2d
   d8db2:	d003      	beq.n	d8dbc <__gethex+0xe6>
   d8db4:	1c71      	adds	r1, r6, #1
   d8db6:	f04f 0900 	mov.w	r9, #0
   d8dba:	e005      	b.n	d8dc8 <__gethex+0xf2>
   d8dbc:	f04f 0901 	mov.w	r9, #1
   d8dc0:	e001      	b.n	d8dc6 <__gethex+0xf0>
   d8dc2:	f04f 0900 	mov.w	r9, #0
   d8dc6:	1cb1      	adds	r1, r6, #2
   d8dc8:	7808      	ldrb	r0, [r1, #0]
   d8dca:	f7ff ff6f 	bl	d8cac <__hexdig_fun>
   d8dce:	1e43      	subs	r3, r0, #1
   d8dd0:	b2db      	uxtb	r3, r3
   d8dd2:	2b18      	cmp	r3, #24
   d8dd4:	d814      	bhi.n	d8e00 <__gethex+0x12a>
   d8dd6:	f1a0 0210 	sub.w	r2, r0, #16
   d8dda:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8dde:	f7ff ff65 	bl	d8cac <__hexdig_fun>
   d8de2:	1e43      	subs	r3, r0, #1
   d8de4:	b2db      	uxtb	r3, r3
   d8de6:	2b18      	cmp	r3, #24
   d8de8:	d804      	bhi.n	d8df4 <__gethex+0x11e>
   d8dea:	230a      	movs	r3, #10
   d8dec:	fb03 0202 	mla	r2, r3, r2, r0
   d8df0:	3a10      	subs	r2, #16
   d8df2:	e7f2      	b.n	d8dda <__gethex+0x104>
   d8df4:	f1b9 0f00 	cmp.w	r9, #0
   d8df8:	d000      	beq.n	d8dfc <__gethex+0x126>
   d8dfa:	4252      	negs	r2, r2
   d8dfc:	4414      	add	r4, r2
   d8dfe:	e000      	b.n	d8e02 <__gethex+0x12c>
   d8e00:	4631      	mov	r1, r6
   d8e02:	f8ca 1000 	str.w	r1, [sl]
   d8e06:	b12d      	cbz	r5, d8e14 <__gethex+0x13e>
   d8e08:	f1bb 0f00 	cmp.w	fp, #0
   d8e0c:	bf14      	ite	ne
   d8e0e:	2000      	movne	r0, #0
   d8e10:	2006      	moveq	r0, #6
   d8e12:	e17c      	b.n	d910e <__gethex+0x438>
   d8e14:	1bf3      	subs	r3, r6, r7
   d8e16:	3b01      	subs	r3, #1
   d8e18:	4629      	mov	r1, r5
   d8e1a:	2b07      	cmp	r3, #7
   d8e1c:	dd02      	ble.n	d8e24 <__gethex+0x14e>
   d8e1e:	3101      	adds	r1, #1
   d8e20:	105b      	asrs	r3, r3, #1
   d8e22:	e7fa      	b.n	d8e1a <__gethex+0x144>
   d8e24:	9802      	ldr	r0, [sp, #8]
   d8e26:	f000 fb09 	bl	d943c <_Balloc>
   d8e2a:	9b01      	ldr	r3, [sp, #4]
   d8e2c:	f100 0a14 	add.w	sl, r0, #20
   d8e30:	f04f 0900 	mov.w	r9, #0
   d8e34:	f1c3 0301 	rsb	r3, r3, #1
   d8e38:	4605      	mov	r5, r0
   d8e3a:	f8cd a010 	str.w	sl, [sp, #16]
   d8e3e:	46cb      	mov	fp, r9
   d8e40:	9308      	str	r3, [sp, #32]
   d8e42:	42b7      	cmp	r7, r6
   d8e44:	d22f      	bcs.n	d8ea6 <__gethex+0x1d0>
   d8e46:	1e73      	subs	r3, r6, #1
   d8e48:	9305      	str	r3, [sp, #20]
   d8e4a:	9a07      	ldr	r2, [sp, #28]
   d8e4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8e50:	4293      	cmp	r3, r2
   d8e52:	d00b      	beq.n	d8e6c <__gethex+0x196>
   d8e54:	f1bb 0f20 	cmp.w	fp, #32
   d8e58:	d116      	bne.n	d8e88 <__gethex+0x1b2>
   d8e5a:	9b04      	ldr	r3, [sp, #16]
   d8e5c:	f8c3 9000 	str.w	r9, [r3]
   d8e60:	3304      	adds	r3, #4
   d8e62:	f04f 0900 	mov.w	r9, #0
   d8e66:	9304      	str	r3, [sp, #16]
   d8e68:	46cb      	mov	fp, r9
   d8e6a:	e00d      	b.n	d8e88 <__gethex+0x1b2>
   d8e6c:	9b05      	ldr	r3, [sp, #20]
   d8e6e:	9a08      	ldr	r2, [sp, #32]
   d8e70:	4413      	add	r3, r2
   d8e72:	429f      	cmp	r7, r3
   d8e74:	d8ee      	bhi.n	d8e54 <__gethex+0x17e>
   d8e76:	4618      	mov	r0, r3
   d8e78:	9a01      	ldr	r2, [sp, #4]
   d8e7a:	9903      	ldr	r1, [sp, #12]
   d8e7c:	9309      	str	r3, [sp, #36]	; 0x24
   d8e7e:	f7fe fd4a 	bl	d7916 <strncmp>
   d8e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8e84:	b168      	cbz	r0, d8ea2 <__gethex+0x1cc>
   d8e86:	e7e5      	b.n	d8e54 <__gethex+0x17e>
   d8e88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8e8c:	f7ff ff0e 	bl	d8cac <__hexdig_fun>
   d8e90:	f000 000f 	and.w	r0, r0, #15
   d8e94:	fa00 f00b 	lsl.w	r0, r0, fp
   d8e98:	9b05      	ldr	r3, [sp, #20]
   d8e9a:	ea49 0900 	orr.w	r9, r9, r0
   d8e9e:	f10b 0b04 	add.w	fp, fp, #4
   d8ea2:	461e      	mov	r6, r3
   d8ea4:	e7cd      	b.n	d8e42 <__gethex+0x16c>
   d8ea6:	9804      	ldr	r0, [sp, #16]
   d8ea8:	f840 9b04 	str.w	r9, [r0], #4
   d8eac:	ebca 0000 	rsb	r0, sl, r0
   d8eb0:	1080      	asrs	r0, r0, #2
   d8eb2:	6128      	str	r0, [r5, #16]
   d8eb4:	0147      	lsls	r7, r0, #5
   d8eb6:	4648      	mov	r0, r9
   d8eb8:	f000 fb85 	bl	d95c6 <__hi0bits>
   d8ebc:	f8d8 6000 	ldr.w	r6, [r8]
   d8ec0:	1a38      	subs	r0, r7, r0
   d8ec2:	42b0      	cmp	r0, r6
   d8ec4:	dd26      	ble.n	d8f14 <__gethex+0x23e>
   d8ec6:	1b87      	subs	r7, r0, r6
   d8ec8:	4639      	mov	r1, r7
   d8eca:	4628      	mov	r0, r5
   d8ecc:	f000 fe83 	bl	d9bd6 <__any_on>
   d8ed0:	b1c8      	cbz	r0, d8f06 <__gethex+0x230>
   d8ed2:	1e7b      	subs	r3, r7, #1
   d8ed4:	1159      	asrs	r1, r3, #5
   d8ed6:	f003 021f 	and.w	r2, r3, #31
   d8eda:	f04f 0901 	mov.w	r9, #1
   d8ede:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d8ee2:	fa09 f202 	lsl.w	r2, r9, r2
   d8ee6:	420a      	tst	r2, r1
   d8ee8:	d00e      	beq.n	d8f08 <__gethex+0x232>
   d8eea:	454b      	cmp	r3, r9
   d8eec:	dc02      	bgt.n	d8ef4 <__gethex+0x21e>
   d8eee:	f04f 0902 	mov.w	r9, #2
   d8ef2:	e009      	b.n	d8f08 <__gethex+0x232>
   d8ef4:	1eb9      	subs	r1, r7, #2
   d8ef6:	4628      	mov	r0, r5
   d8ef8:	f000 fe6d 	bl	d9bd6 <__any_on>
   d8efc:	2800      	cmp	r0, #0
   d8efe:	d0f6      	beq.n	d8eee <__gethex+0x218>
   d8f00:	f04f 0903 	mov.w	r9, #3
   d8f04:	e000      	b.n	d8f08 <__gethex+0x232>
   d8f06:	4681      	mov	r9, r0
   d8f08:	4639      	mov	r1, r7
   d8f0a:	4628      	mov	r0, r5
   d8f0c:	f7ff fe98 	bl	d8c40 <rshift>
   d8f10:	443c      	add	r4, r7
   d8f12:	e00c      	b.n	d8f2e <__gethex+0x258>
   d8f14:	da09      	bge.n	d8f2a <__gethex+0x254>
   d8f16:	1a37      	subs	r7, r6, r0
   d8f18:	4629      	mov	r1, r5
   d8f1a:	463a      	mov	r2, r7
   d8f1c:	9802      	ldr	r0, [sp, #8]
   d8f1e:	f000 fc87 	bl	d9830 <__lshift>
   d8f22:	1be4      	subs	r4, r4, r7
   d8f24:	4605      	mov	r5, r0
   d8f26:	f100 0a14 	add.w	sl, r0, #20
   d8f2a:	f04f 0900 	mov.w	r9, #0
   d8f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8f32:	429c      	cmp	r4, r3
   d8f34:	dd08      	ble.n	d8f48 <__gethex+0x272>
   d8f36:	9802      	ldr	r0, [sp, #8]
   d8f38:	4629      	mov	r1, r5
   d8f3a:	f000 fab4 	bl	d94a6 <_Bfree>
   d8f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8f40:	2300      	movs	r3, #0
   d8f42:	6013      	str	r3, [r2, #0]
   d8f44:	20a3      	movs	r0, #163	; 0xa3
   d8f46:	e0e2      	b.n	d910e <__gethex+0x438>
   d8f48:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8f4c:	4284      	cmp	r4, r0
   d8f4e:	da53      	bge.n	d8ff8 <__gethex+0x322>
   d8f50:	1b04      	subs	r4, r0, r4
   d8f52:	42a6      	cmp	r6, r4
   d8f54:	dc2e      	bgt.n	d8fb4 <__gethex+0x2de>
   d8f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8f5a:	2b02      	cmp	r3, #2
   d8f5c:	d01a      	beq.n	d8f94 <__gethex+0x2be>
   d8f5e:	2b03      	cmp	r3, #3
   d8f60:	d01c      	beq.n	d8f9c <__gethex+0x2c6>
   d8f62:	2b01      	cmp	r3, #1
   d8f64:	d11d      	bne.n	d8fa2 <__gethex+0x2cc>
   d8f66:	42a6      	cmp	r6, r4
   d8f68:	d11b      	bne.n	d8fa2 <__gethex+0x2cc>
   d8f6a:	2e01      	cmp	r6, #1
   d8f6c:	dc0b      	bgt.n	d8f86 <__gethex+0x2b0>
   d8f6e:	9a06      	ldr	r2, [sp, #24]
   d8f70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8f74:	6013      	str	r3, [r2, #0]
   d8f76:	2301      	movs	r3, #1
   d8f78:	612b      	str	r3, [r5, #16]
   d8f7a:	f8ca 3000 	str.w	r3, [sl]
   d8f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8f80:	2062      	movs	r0, #98	; 0x62
   d8f82:	601d      	str	r5, [r3, #0]
   d8f84:	e0c3      	b.n	d910e <__gethex+0x438>
   d8f86:	1e71      	subs	r1, r6, #1
   d8f88:	4628      	mov	r0, r5
   d8f8a:	f000 fe24 	bl	d9bd6 <__any_on>
   d8f8e:	2800      	cmp	r0, #0
   d8f90:	d1ed      	bne.n	d8f6e <__gethex+0x298>
   d8f92:	e006      	b.n	d8fa2 <__gethex+0x2cc>
   d8f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8f96:	2b00      	cmp	r3, #0
   d8f98:	d0e9      	beq.n	d8f6e <__gethex+0x298>
   d8f9a:	e002      	b.n	d8fa2 <__gethex+0x2cc>
   d8f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8f9e:	2b00      	cmp	r3, #0
   d8fa0:	d1e5      	bne.n	d8f6e <__gethex+0x298>
   d8fa2:	9802      	ldr	r0, [sp, #8]
   d8fa4:	4629      	mov	r1, r5
   d8fa6:	f000 fa7e 	bl	d94a6 <_Bfree>
   d8faa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8fac:	2300      	movs	r3, #0
   d8fae:	6013      	str	r3, [r2, #0]
   d8fb0:	2050      	movs	r0, #80	; 0x50
   d8fb2:	e0ac      	b.n	d910e <__gethex+0x438>
   d8fb4:	1e67      	subs	r7, r4, #1
   d8fb6:	f1b9 0f00 	cmp.w	r9, #0
   d8fba:	d106      	bne.n	d8fca <__gethex+0x2f4>
   d8fbc:	b13f      	cbz	r7, d8fce <__gethex+0x2f8>
   d8fbe:	4639      	mov	r1, r7
   d8fc0:	4628      	mov	r0, r5
   d8fc2:	f000 fe08 	bl	d9bd6 <__any_on>
   d8fc6:	4681      	mov	r9, r0
   d8fc8:	e001      	b.n	d8fce <__gethex+0x2f8>
   d8fca:	f04f 0901 	mov.w	r9, #1
   d8fce:	117a      	asrs	r2, r7, #5
   d8fd0:	2301      	movs	r3, #1
   d8fd2:	f007 071f 	and.w	r7, r7, #31
   d8fd6:	fa03 f707 	lsl.w	r7, r3, r7
   d8fda:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d8fde:	4621      	mov	r1, r4
   d8fe0:	421f      	tst	r7, r3
   d8fe2:	4628      	mov	r0, r5
   d8fe4:	bf18      	it	ne
   d8fe6:	f049 0902 	orrne.w	r9, r9, #2
   d8fea:	1b36      	subs	r6, r6, r4
   d8fec:	f7ff fe28 	bl	d8c40 <rshift>
   d8ff0:	2702      	movs	r7, #2
   d8ff2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d8ff6:	e000      	b.n	d8ffa <__gethex+0x324>
   d8ff8:	2701      	movs	r7, #1
   d8ffa:	f1b9 0f00 	cmp.w	r9, #0
   d8ffe:	f000 8081 	beq.w	d9104 <__gethex+0x42e>
   d9002:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9006:	2b02      	cmp	r3, #2
   d9008:	d00e      	beq.n	d9028 <__gethex+0x352>
   d900a:	2b03      	cmp	r3, #3
   d900c:	d010      	beq.n	d9030 <__gethex+0x35a>
   d900e:	2b01      	cmp	r3, #1
   d9010:	d176      	bne.n	d9100 <__gethex+0x42a>
   d9012:	f019 0f02 	tst.w	r9, #2
   d9016:	d073      	beq.n	d9100 <__gethex+0x42a>
   d9018:	f8da 0000 	ldr.w	r0, [sl]
   d901c:	ea49 0900 	orr.w	r9, r9, r0
   d9020:	f019 0f01 	tst.w	r9, #1
   d9024:	d107      	bne.n	d9036 <__gethex+0x360>
   d9026:	e06b      	b.n	d9100 <__gethex+0x42a>
   d9028:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d902a:	f1c3 0301 	rsb	r3, r3, #1
   d902e:	9315      	str	r3, [sp, #84]	; 0x54
   d9030:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9032:	2b00      	cmp	r3, #0
   d9034:	d064      	beq.n	d9100 <__gethex+0x42a>
   d9036:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d903a:	f105 0314 	add.w	r3, r5, #20
   d903e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d9042:	eb03 0109 	add.w	r1, r3, r9
   d9046:	2000      	movs	r0, #0
   d9048:	681a      	ldr	r2, [r3, #0]
   d904a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d904e:	d002      	beq.n	d9056 <__gethex+0x380>
   d9050:	3201      	adds	r2, #1
   d9052:	601a      	str	r2, [r3, #0]
   d9054:	e020      	b.n	d9098 <__gethex+0x3c2>
   d9056:	f843 0b04 	str.w	r0, [r3], #4
   d905a:	4299      	cmp	r1, r3
   d905c:	d8f4      	bhi.n	d9048 <__gethex+0x372>
   d905e:	68ab      	ldr	r3, [r5, #8]
   d9060:	459a      	cmp	sl, r3
   d9062:	db12      	blt.n	d908a <__gethex+0x3b4>
   d9064:	6869      	ldr	r1, [r5, #4]
   d9066:	9802      	ldr	r0, [sp, #8]
   d9068:	3101      	adds	r1, #1
   d906a:	f000 f9e7 	bl	d943c <_Balloc>
   d906e:	692a      	ldr	r2, [r5, #16]
   d9070:	3202      	adds	r2, #2
   d9072:	f105 010c 	add.w	r1, r5, #12
   d9076:	4683      	mov	fp, r0
   d9078:	0092      	lsls	r2, r2, #2
   d907a:	300c      	adds	r0, #12
   d907c:	f7fe fbda 	bl	d7834 <memcpy>
   d9080:	4629      	mov	r1, r5
   d9082:	9802      	ldr	r0, [sp, #8]
   d9084:	f000 fa0f 	bl	d94a6 <_Bfree>
   d9088:	465d      	mov	r5, fp
   d908a:	692b      	ldr	r3, [r5, #16]
   d908c:	1c5a      	adds	r2, r3, #1
   d908e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d9092:	612a      	str	r2, [r5, #16]
   d9094:	2201      	movs	r2, #1
   d9096:	615a      	str	r2, [r3, #20]
   d9098:	2f02      	cmp	r7, #2
   d909a:	f105 0214 	add.w	r2, r5, #20
   d909e:	d111      	bne.n	d90c4 <__gethex+0x3ee>
   d90a0:	f8d8 3000 	ldr.w	r3, [r8]
   d90a4:	3b01      	subs	r3, #1
   d90a6:	429e      	cmp	r6, r3
   d90a8:	d127      	bne.n	d90fa <__gethex+0x424>
   d90aa:	1171      	asrs	r1, r6, #5
   d90ac:	2301      	movs	r3, #1
   d90ae:	f006 061f 	and.w	r6, r6, #31
   d90b2:	fa03 f606 	lsl.w	r6, r3, r6
   d90b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d90ba:	421e      	tst	r6, r3
   d90bc:	bf0c      	ite	eq
   d90be:	2702      	moveq	r7, #2
   d90c0:	2701      	movne	r7, #1
   d90c2:	e01a      	b.n	d90fa <__gethex+0x424>
   d90c4:	692b      	ldr	r3, [r5, #16]
   d90c6:	459a      	cmp	sl, r3
   d90c8:	da0a      	bge.n	d90e0 <__gethex+0x40a>
   d90ca:	2101      	movs	r1, #1
   d90cc:	4628      	mov	r0, r5
   d90ce:	f7ff fdb7 	bl	d8c40 <rshift>
   d90d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d90d6:	3401      	adds	r4, #1
   d90d8:	429c      	cmp	r4, r3
   d90da:	f73f af2c 	bgt.w	d8f36 <__gethex+0x260>
   d90de:	e00b      	b.n	d90f8 <__gethex+0x422>
   d90e0:	f016 061f 	ands.w	r6, r6, #31
   d90e4:	d008      	beq.n	d90f8 <__gethex+0x422>
   d90e6:	4491      	add	r9, r2
   d90e8:	f1c6 0620 	rsb	r6, r6, #32
   d90ec:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d90f0:	f000 fa69 	bl	d95c6 <__hi0bits>
   d90f4:	42b0      	cmp	r0, r6
   d90f6:	dbe8      	blt.n	d90ca <__gethex+0x3f4>
   d90f8:	2701      	movs	r7, #1
   d90fa:	f047 0720 	orr.w	r7, r7, #32
   d90fe:	e001      	b.n	d9104 <__gethex+0x42e>
   d9100:	f047 0710 	orr.w	r7, r7, #16
   d9104:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9106:	601d      	str	r5, [r3, #0]
   d9108:	9b06      	ldr	r3, [sp, #24]
   d910a:	4638      	mov	r0, r7
   d910c:	601c      	str	r4, [r3, #0]
   d910e:	b00b      	add	sp, #44	; 0x2c
   d9110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9114 <L_shift>:
   d9114:	f1c2 0208 	rsb	r2, r2, #8
   d9118:	0092      	lsls	r2, r2, #2
   d911a:	b570      	push	{r4, r5, r6, lr}
   d911c:	f1c2 0620 	rsb	r6, r2, #32
   d9120:	6843      	ldr	r3, [r0, #4]
   d9122:	6805      	ldr	r5, [r0, #0]
   d9124:	fa03 f406 	lsl.w	r4, r3, r6
   d9128:	432c      	orrs	r4, r5
   d912a:	40d3      	lsrs	r3, r2
   d912c:	6004      	str	r4, [r0, #0]
   d912e:	f840 3f04 	str.w	r3, [r0, #4]!
   d9132:	4288      	cmp	r0, r1
   d9134:	d3f4      	bcc.n	d9120 <L_shift+0xc>
   d9136:	bd70      	pop	{r4, r5, r6, pc}

000d9138 <__match>:
   d9138:	b530      	push	{r4, r5, lr}
   d913a:	6803      	ldr	r3, [r0, #0]
   d913c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9140:	3301      	adds	r3, #1
   d9142:	b14c      	cbz	r4, d9158 <__match+0x20>
   d9144:	781a      	ldrb	r2, [r3, #0]
   d9146:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d914a:	2d19      	cmp	r5, #25
   d914c:	bf98      	it	ls
   d914e:	3220      	addls	r2, #32
   d9150:	42a2      	cmp	r2, r4
   d9152:	d0f3      	beq.n	d913c <__match+0x4>
   d9154:	2000      	movs	r0, #0
   d9156:	bd30      	pop	{r4, r5, pc}
   d9158:	6003      	str	r3, [r0, #0]
   d915a:	2001      	movs	r0, #1
   d915c:	bd30      	pop	{r4, r5, pc}

000d915e <__hexnan>:
   d915e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9162:	680b      	ldr	r3, [r1, #0]
   d9164:	f8d0 b000 	ldr.w	fp, [r0]
   d9168:	115e      	asrs	r6, r3, #5
   d916a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d916e:	f013 031f 	ands.w	r3, r3, #31
   d9172:	b085      	sub	sp, #20
   d9174:	bf18      	it	ne
   d9176:	3604      	addne	r6, #4
   d9178:	1f35      	subs	r5, r6, #4
   d917a:	4617      	mov	r7, r2
   d917c:	2200      	movs	r2, #0
   d917e:	4682      	mov	sl, r0
   d9180:	9301      	str	r3, [sp, #4]
   d9182:	f846 2c04 	str.w	r2, [r6, #-4]
   d9186:	46a8      	mov	r8, r5
   d9188:	462c      	mov	r4, r5
   d918a:	9200      	str	r2, [sp, #0]
   d918c:	4691      	mov	r9, r2
   d918e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d9192:	2900      	cmp	r1, #0
   d9194:	d03c      	beq.n	d9210 <__hexnan+0xb2>
   d9196:	4608      	mov	r0, r1
   d9198:	9203      	str	r2, [sp, #12]
   d919a:	9102      	str	r1, [sp, #8]
   d919c:	f7ff fd86 	bl	d8cac <__hexdig_fun>
   d91a0:	9a03      	ldr	r2, [sp, #12]
   d91a2:	bb00      	cbnz	r0, d91e6 <__hexnan+0x88>
   d91a4:	9902      	ldr	r1, [sp, #8]
   d91a6:	2920      	cmp	r1, #32
   d91a8:	d816      	bhi.n	d91d8 <__hexnan+0x7a>
   d91aa:	9b00      	ldr	r3, [sp, #0]
   d91ac:	4599      	cmp	r9, r3
   d91ae:	ddee      	ble.n	d918e <__hexnan+0x30>
   d91b0:	4544      	cmp	r4, r8
   d91b2:	d205      	bcs.n	d91c0 <__hexnan+0x62>
   d91b4:	2a07      	cmp	r2, #7
   d91b6:	dc03      	bgt.n	d91c0 <__hexnan+0x62>
   d91b8:	4641      	mov	r1, r8
   d91ba:	4620      	mov	r0, r4
   d91bc:	f7ff ffaa 	bl	d9114 <L_shift>
   d91c0:	42bc      	cmp	r4, r7
   d91c2:	d923      	bls.n	d920c <__hexnan+0xae>
   d91c4:	2300      	movs	r3, #0
   d91c6:	f1a4 0804 	sub.w	r8, r4, #4
   d91ca:	f844 3c04 	str.w	r3, [r4, #-4]
   d91ce:	f8cd 9000 	str.w	r9, [sp]
   d91d2:	4644      	mov	r4, r8
   d91d4:	461a      	mov	r2, r3
   d91d6:	e7da      	b.n	d918e <__hexnan+0x30>
   d91d8:	2929      	cmp	r1, #41	; 0x29
   d91da:	d148      	bne.n	d926e <__hexnan+0x110>
   d91dc:	f10b 0301 	add.w	r3, fp, #1
   d91e0:	f8ca 3000 	str.w	r3, [sl]
   d91e4:	e014      	b.n	d9210 <__hexnan+0xb2>
   d91e6:	3201      	adds	r2, #1
   d91e8:	2a08      	cmp	r2, #8
   d91ea:	f109 0901 	add.w	r9, r9, #1
   d91ee:	dd06      	ble.n	d91fe <__hexnan+0xa0>
   d91f0:	42bc      	cmp	r4, r7
   d91f2:	d9cc      	bls.n	d918e <__hexnan+0x30>
   d91f4:	2300      	movs	r3, #0
   d91f6:	f844 3c04 	str.w	r3, [r4, #-4]
   d91fa:	2201      	movs	r2, #1
   d91fc:	3c04      	subs	r4, #4
   d91fe:	6821      	ldr	r1, [r4, #0]
   d9200:	f000 000f 	and.w	r0, r0, #15
   d9204:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9208:	6020      	str	r0, [r4, #0]
   d920a:	e7c0      	b.n	d918e <__hexnan+0x30>
   d920c:	2208      	movs	r2, #8
   d920e:	e7be      	b.n	d918e <__hexnan+0x30>
   d9210:	f1b9 0f00 	cmp.w	r9, #0
   d9214:	d02b      	beq.n	d926e <__hexnan+0x110>
   d9216:	4544      	cmp	r4, r8
   d9218:	d205      	bcs.n	d9226 <__hexnan+0xc8>
   d921a:	2a07      	cmp	r2, #7
   d921c:	dc03      	bgt.n	d9226 <__hexnan+0xc8>
   d921e:	4641      	mov	r1, r8
   d9220:	4620      	mov	r0, r4
   d9222:	f7ff ff77 	bl	d9114 <L_shift>
   d9226:	42bc      	cmp	r4, r7
   d9228:	d90c      	bls.n	d9244 <__hexnan+0xe6>
   d922a:	463b      	mov	r3, r7
   d922c:	f854 2b04 	ldr.w	r2, [r4], #4
   d9230:	f843 2b04 	str.w	r2, [r3], #4
   d9234:	42a5      	cmp	r5, r4
   d9236:	d2f9      	bcs.n	d922c <__hexnan+0xce>
   d9238:	2200      	movs	r2, #0
   d923a:	f843 2b04 	str.w	r2, [r3], #4
   d923e:	429d      	cmp	r5, r3
   d9240:	d2fb      	bcs.n	d923a <__hexnan+0xdc>
   d9242:	e00b      	b.n	d925c <__hexnan+0xfe>
   d9244:	9b01      	ldr	r3, [sp, #4]
   d9246:	b14b      	cbz	r3, d925c <__hexnan+0xfe>
   d9248:	f1c3 0220 	rsb	r2, r3, #32
   d924c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9250:	40d3      	lsrs	r3, r2
   d9252:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9256:	4013      	ands	r3, r2
   d9258:	f846 3c04 	str.w	r3, [r6, #-4]
   d925c:	682b      	ldr	r3, [r5, #0]
   d925e:	b943      	cbnz	r3, d9272 <__hexnan+0x114>
   d9260:	42bd      	cmp	r5, r7
   d9262:	d102      	bne.n	d926a <__hexnan+0x10c>
   d9264:	2301      	movs	r3, #1
   d9266:	602b      	str	r3, [r5, #0]
   d9268:	e003      	b.n	d9272 <__hexnan+0x114>
   d926a:	3d04      	subs	r5, #4
   d926c:	e7f6      	b.n	d925c <__hexnan+0xfe>
   d926e:	2004      	movs	r0, #4
   d9270:	e000      	b.n	d9274 <__hexnan+0x116>
   d9272:	2005      	movs	r0, #5
   d9274:	b005      	add	sp, #20
   d9276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d927c <_findenv_r>:
   d927c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9280:	4607      	mov	r7, r0
   d9282:	468b      	mov	fp, r1
   d9284:	4690      	mov	r8, r2
   d9286:	f000 fcd6 	bl	d9c36 <__env_lock>
   d928a:	4b19      	ldr	r3, [pc, #100]	; (d92f0 <_findenv_r+0x74>)
   d928c:	681d      	ldr	r5, [r3, #0]
   d928e:	469a      	mov	sl, r3
   d9290:	b13d      	cbz	r5, d92a2 <_findenv_r+0x26>
   d9292:	465c      	mov	r4, fp
   d9294:	4623      	mov	r3, r4
   d9296:	f813 2b01 	ldrb.w	r2, [r3], #1
   d929a:	b142      	cbz	r2, d92ae <_findenv_r+0x32>
   d929c:	2a3d      	cmp	r2, #61	; 0x3d
   d929e:	461c      	mov	r4, r3
   d92a0:	d1f8      	bne.n	d9294 <_findenv_r+0x18>
   d92a2:	4638      	mov	r0, r7
   d92a4:	f000 fcc8 	bl	d9c38 <__env_unlock>
   d92a8:	2000      	movs	r0, #0
   d92aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92ae:	ebcb 0404 	rsb	r4, fp, r4
   d92b2:	46a9      	mov	r9, r5
   d92b4:	f859 0b04 	ldr.w	r0, [r9], #4
   d92b8:	2800      	cmp	r0, #0
   d92ba:	d0f2      	beq.n	d92a2 <_findenv_r+0x26>
   d92bc:	4622      	mov	r2, r4
   d92be:	4659      	mov	r1, fp
   d92c0:	f7fe fb29 	bl	d7916 <strncmp>
   d92c4:	b988      	cbnz	r0, d92ea <_findenv_r+0x6e>
   d92c6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d92ca:	191e      	adds	r6, r3, r4
   d92cc:	5d1b      	ldrb	r3, [r3, r4]
   d92ce:	2b3d      	cmp	r3, #61	; 0x3d
   d92d0:	d10b      	bne.n	d92ea <_findenv_r+0x6e>
   d92d2:	f8da 3000 	ldr.w	r3, [sl]
   d92d6:	1aed      	subs	r5, r5, r3
   d92d8:	10ad      	asrs	r5, r5, #2
   d92da:	4638      	mov	r0, r7
   d92dc:	f8c8 5000 	str.w	r5, [r8]
   d92e0:	f000 fcaa 	bl	d9c38 <__env_unlock>
   d92e4:	1c70      	adds	r0, r6, #1
   d92e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92ea:	464d      	mov	r5, r9
   d92ec:	e7e1      	b.n	d92b2 <_findenv_r+0x36>
   d92ee:	bf00      	nop
   d92f0:	2003e24c 	.word	0x2003e24c

000d92f4 <_getenv_r>:
   d92f4:	b507      	push	{r0, r1, r2, lr}
   d92f6:	aa01      	add	r2, sp, #4
   d92f8:	f7ff ffc0 	bl	d927c <_findenv_r>
   d92fc:	b003      	add	sp, #12
   d92fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9304 <__gettzinfo>:
   d9304:	4800      	ldr	r0, [pc, #0]	; (d9308 <__gettzinfo+0x4>)
   d9306:	4770      	bx	lr
   d9308:	2003e20c 	.word	0x2003e20c

000d930c <gmtime_r>:
   d930c:	6802      	ldr	r2, [r0, #0]
   d930e:	4b47      	ldr	r3, [pc, #284]	; (d942c <gmtime_r+0x120>)
   d9310:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9312:	fb92 f4f3 	sdiv	r4, r2, r3
   d9316:	fb03 2214 	mls	r2, r3, r4, r2
   d931a:	2a00      	cmp	r2, #0
   d931c:	bfbc      	itt	lt
   d931e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9322:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9326:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d932a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d932e:	fb92 f3f0 	sdiv	r3, r2, r0
   d9332:	fb00 2213 	mls	r2, r0, r3, r2
   d9336:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d933a:	bfac      	ite	ge
   d933c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9340:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9344:	608b      	str	r3, [r1, #8]
   d9346:	fb92 f3f0 	sdiv	r3, r2, r0
   d934a:	fb00 2213 	mls	r2, r0, r3, r2
   d934e:	604b      	str	r3, [r1, #4]
   d9350:	600a      	str	r2, [r1, #0]
   d9352:	2307      	movs	r3, #7
   d9354:	1ce2      	adds	r2, r4, #3
   d9356:	fb92 f3f3 	sdiv	r3, r2, r3
   d935a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d935e:	1ad3      	subs	r3, r2, r3
   d9360:	618b      	str	r3, [r1, #24]
   d9362:	4b33      	ldr	r3, [pc, #204]	; (d9430 <gmtime_r+0x124>)
   d9364:	4d33      	ldr	r5, [pc, #204]	; (d9434 <gmtime_r+0x128>)
   d9366:	fb94 f5f5 	sdiv	r5, r4, r5
   d936a:	fb03 4405 	mla	r4, r3, r5, r4
   d936e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9372:	fbb4 f2f2 	udiv	r2, r4, r2
   d9376:	4422      	add	r2, r4
   d9378:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d937c:	fbb4 f3f7 	udiv	r3, r4, r7
   d9380:	1ad2      	subs	r2, r2, r3
   d9382:	482d      	ldr	r0, [pc, #180]	; (d9438 <gmtime_r+0x12c>)
   d9384:	fbb4 f0f0 	udiv	r0, r4, r0
   d9388:	f648 6694 	movw	r6, #36500	; 0x8e94
   d938c:	1a13      	subs	r3, r2, r0
   d938e:	fbb3 f6f6 	udiv	r6, r3, r6
   d9392:	4434      	add	r4, r6
   d9394:	f240 126d 	movw	r2, #365	; 0x16d
   d9398:	fbb3 f0f2 	udiv	r0, r3, r2
   d939c:	fbb3 f3f7 	udiv	r3, r3, r7
   d93a0:	1ae3      	subs	r3, r4, r3
   d93a2:	fb02 3310 	mls	r3, r2, r0, r3
   d93a6:	2499      	movs	r4, #153	; 0x99
   d93a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d93ac:	3202      	adds	r2, #2
   d93ae:	fbb2 f2f4 	udiv	r2, r2, r4
   d93b2:	2a0a      	cmp	r2, #10
   d93b4:	fb04 f402 	mul.w	r4, r4, r2
   d93b8:	f104 0602 	add.w	r6, r4, #2
   d93bc:	f04f 0405 	mov.w	r4, #5
   d93c0:	fbb6 f4f4 	udiv	r4, r6, r4
   d93c4:	bf34      	ite	cc
   d93c6:	2602      	movcc	r6, #2
   d93c8:	f06f 0609 	mvncs.w	r6, #9
   d93cc:	4416      	add	r6, r2
   d93ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d93d2:	fb02 0505 	mla	r5, r2, r5, r0
   d93d6:	1c5f      	adds	r7, r3, #1
   d93d8:	2e01      	cmp	r6, #1
   d93da:	bf98      	it	ls
   d93dc:	3501      	addls	r5, #1
   d93de:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d93e2:	eba7 0704 	sub.w	r7, r7, r4
   d93e6:	d302      	bcc.n	d93ee <gmtime_r+0xe2>
   d93e8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d93ec:	e014      	b.n	d9418 <gmtime_r+0x10c>
   d93ee:	0782      	lsls	r2, r0, #30
   d93f0:	d105      	bne.n	d93fe <gmtime_r+0xf2>
   d93f2:	2464      	movs	r4, #100	; 0x64
   d93f4:	fbb0 f2f4 	udiv	r2, r0, r4
   d93f8:	fb04 0212 	mls	r2, r4, r2, r0
   d93fc:	b94a      	cbnz	r2, d9412 <gmtime_r+0x106>
   d93fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9402:	fbb0 f4f2 	udiv	r4, r0, r2
   d9406:	fb02 0014 	mls	r0, r2, r4, r0
   d940a:	fab0 f280 	clz	r2, r0
   d940e:	0952      	lsrs	r2, r2, #5
   d9410:	e000      	b.n	d9414 <gmtime_r+0x108>
   d9412:	2201      	movs	r2, #1
   d9414:	333b      	adds	r3, #59	; 0x3b
   d9416:	441a      	add	r2, r3
   d9418:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d941c:	2300      	movs	r3, #0
   d941e:	61ca      	str	r2, [r1, #28]
   d9420:	614d      	str	r5, [r1, #20]
   d9422:	610e      	str	r6, [r1, #16]
   d9424:	60cf      	str	r7, [r1, #12]
   d9426:	620b      	str	r3, [r1, #32]
   d9428:	4608      	mov	r0, r1
   d942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d942c:	00015180 	.word	0x00015180
   d9430:	fffdc54f 	.word	0xfffdc54f
   d9434:	00023ab1 	.word	0x00023ab1
   d9438:	00023ab0 	.word	0x00023ab0

000d943c <_Balloc>:
   d943c:	b570      	push	{r4, r5, r6, lr}
   d943e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d9440:	4604      	mov	r4, r0
   d9442:	460e      	mov	r6, r1
   d9444:	b93d      	cbnz	r5, d9456 <_Balloc+0x1a>
   d9446:	2010      	movs	r0, #16
   d9448:	f7fc f800 	bl	d544c <malloc>
   d944c:	6260      	str	r0, [r4, #36]	; 0x24
   d944e:	6045      	str	r5, [r0, #4]
   d9450:	6085      	str	r5, [r0, #8]
   d9452:	6005      	str	r5, [r0, #0]
   d9454:	60c5      	str	r5, [r0, #12]
   d9456:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d9458:	68eb      	ldr	r3, [r5, #12]
   d945a:	b143      	cbz	r3, d946e <_Balloc+0x32>
   d945c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d945e:	68db      	ldr	r3, [r3, #12]
   d9460:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d9464:	b178      	cbz	r0, d9486 <_Balloc+0x4a>
   d9466:	6802      	ldr	r2, [r0, #0]
   d9468:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d946c:	e017      	b.n	d949e <_Balloc+0x62>
   d946e:	2221      	movs	r2, #33	; 0x21
   d9470:	2104      	movs	r1, #4
   d9472:	4620      	mov	r0, r4
   d9474:	f000 fbd1 	bl	d9c1a <_calloc_r>
   d9478:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d947a:	60e8      	str	r0, [r5, #12]
   d947c:	68db      	ldr	r3, [r3, #12]
   d947e:	2b00      	cmp	r3, #0
   d9480:	d1ec      	bne.n	d945c <_Balloc+0x20>
   d9482:	2000      	movs	r0, #0
   d9484:	bd70      	pop	{r4, r5, r6, pc}
   d9486:	2101      	movs	r1, #1
   d9488:	fa01 f506 	lsl.w	r5, r1, r6
   d948c:	1d6a      	adds	r2, r5, #5
   d948e:	0092      	lsls	r2, r2, #2
   d9490:	4620      	mov	r0, r4
   d9492:	f000 fbc2 	bl	d9c1a <_calloc_r>
   d9496:	2800      	cmp	r0, #0
   d9498:	d0f3      	beq.n	d9482 <_Balloc+0x46>
   d949a:	6046      	str	r6, [r0, #4]
   d949c:	6085      	str	r5, [r0, #8]
   d949e:	2300      	movs	r3, #0
   d94a0:	6103      	str	r3, [r0, #16]
   d94a2:	60c3      	str	r3, [r0, #12]
   d94a4:	bd70      	pop	{r4, r5, r6, pc}

000d94a6 <_Bfree>:
   d94a6:	b570      	push	{r4, r5, r6, lr}
   d94a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d94aa:	4606      	mov	r6, r0
   d94ac:	460d      	mov	r5, r1
   d94ae:	b93c      	cbnz	r4, d94c0 <_Bfree+0x1a>
   d94b0:	2010      	movs	r0, #16
   d94b2:	f7fb ffcb 	bl	d544c <malloc>
   d94b6:	6270      	str	r0, [r6, #36]	; 0x24
   d94b8:	6044      	str	r4, [r0, #4]
   d94ba:	6084      	str	r4, [r0, #8]
   d94bc:	6004      	str	r4, [r0, #0]
   d94be:	60c4      	str	r4, [r0, #12]
   d94c0:	b13d      	cbz	r5, d94d2 <_Bfree+0x2c>
   d94c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d94c4:	686a      	ldr	r2, [r5, #4]
   d94c6:	68db      	ldr	r3, [r3, #12]
   d94c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d94cc:	6029      	str	r1, [r5, #0]
   d94ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d94d2:	bd70      	pop	{r4, r5, r6, pc}

000d94d4 <__multadd>:
   d94d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d94d8:	690d      	ldr	r5, [r1, #16]
   d94da:	461f      	mov	r7, r3
   d94dc:	4606      	mov	r6, r0
   d94de:	460c      	mov	r4, r1
   d94e0:	f101 0e14 	add.w	lr, r1, #20
   d94e4:	2300      	movs	r3, #0
   d94e6:	f8de 0000 	ldr.w	r0, [lr]
   d94ea:	b281      	uxth	r1, r0
   d94ec:	fb02 7101 	mla	r1, r2, r1, r7
   d94f0:	0c0f      	lsrs	r7, r1, #16
   d94f2:	0c00      	lsrs	r0, r0, #16
   d94f4:	fb02 7000 	mla	r0, r2, r0, r7
   d94f8:	b289      	uxth	r1, r1
   d94fa:	3301      	adds	r3, #1
   d94fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9500:	429d      	cmp	r5, r3
   d9502:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9506:	f84e 1b04 	str.w	r1, [lr], #4
   d950a:	dcec      	bgt.n	d94e6 <__multadd+0x12>
   d950c:	b1d7      	cbz	r7, d9544 <__multadd+0x70>
   d950e:	68a3      	ldr	r3, [r4, #8]
   d9510:	429d      	cmp	r5, r3
   d9512:	db12      	blt.n	d953a <__multadd+0x66>
   d9514:	6861      	ldr	r1, [r4, #4]
   d9516:	4630      	mov	r0, r6
   d9518:	3101      	adds	r1, #1
   d951a:	f7ff ff8f 	bl	d943c <_Balloc>
   d951e:	6922      	ldr	r2, [r4, #16]
   d9520:	3202      	adds	r2, #2
   d9522:	f104 010c 	add.w	r1, r4, #12
   d9526:	4680      	mov	r8, r0
   d9528:	0092      	lsls	r2, r2, #2
   d952a:	300c      	adds	r0, #12
   d952c:	f7fe f982 	bl	d7834 <memcpy>
   d9530:	4621      	mov	r1, r4
   d9532:	4630      	mov	r0, r6
   d9534:	f7ff ffb7 	bl	d94a6 <_Bfree>
   d9538:	4644      	mov	r4, r8
   d953a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d953e:	3501      	adds	r5, #1
   d9540:	615f      	str	r7, [r3, #20]
   d9542:	6125      	str	r5, [r4, #16]
   d9544:	4620      	mov	r0, r4
   d9546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d954a <__s2b>:
   d954a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d954e:	460c      	mov	r4, r1
   d9550:	4615      	mov	r5, r2
   d9552:	461f      	mov	r7, r3
   d9554:	2209      	movs	r2, #9
   d9556:	3308      	adds	r3, #8
   d9558:	4606      	mov	r6, r0
   d955a:	fb93 f3f2 	sdiv	r3, r3, r2
   d955e:	2100      	movs	r1, #0
   d9560:	2201      	movs	r2, #1
   d9562:	429a      	cmp	r2, r3
   d9564:	da02      	bge.n	d956c <__s2b+0x22>
   d9566:	0052      	lsls	r2, r2, #1
   d9568:	3101      	adds	r1, #1
   d956a:	e7fa      	b.n	d9562 <__s2b+0x18>
   d956c:	4630      	mov	r0, r6
   d956e:	f7ff ff65 	bl	d943c <_Balloc>
   d9572:	9b08      	ldr	r3, [sp, #32]
   d9574:	6143      	str	r3, [r0, #20]
   d9576:	2d09      	cmp	r5, #9
   d9578:	f04f 0301 	mov.w	r3, #1
   d957c:	6103      	str	r3, [r0, #16]
   d957e:	dd11      	ble.n	d95a4 <__s2b+0x5a>
   d9580:	f104 0809 	add.w	r8, r4, #9
   d9584:	46c1      	mov	r9, r8
   d9586:	442c      	add	r4, r5
   d9588:	f819 3b01 	ldrb.w	r3, [r9], #1
   d958c:	4601      	mov	r1, r0
   d958e:	3b30      	subs	r3, #48	; 0x30
   d9590:	220a      	movs	r2, #10
   d9592:	4630      	mov	r0, r6
   d9594:	f7ff ff9e 	bl	d94d4 <__multadd>
   d9598:	45a1      	cmp	r9, r4
   d959a:	d1f5      	bne.n	d9588 <__s2b+0x3e>
   d959c:	eb08 0405 	add.w	r4, r8, r5
   d95a0:	3c08      	subs	r4, #8
   d95a2:	e001      	b.n	d95a8 <__s2b+0x5e>
   d95a4:	340a      	adds	r4, #10
   d95a6:	2509      	movs	r5, #9
   d95a8:	1b2d      	subs	r5, r5, r4
   d95aa:	1963      	adds	r3, r4, r5
   d95ac:	429f      	cmp	r7, r3
   d95ae:	dd08      	ble.n	d95c2 <__s2b+0x78>
   d95b0:	f814 3b01 	ldrb.w	r3, [r4], #1
   d95b4:	4601      	mov	r1, r0
   d95b6:	3b30      	subs	r3, #48	; 0x30
   d95b8:	220a      	movs	r2, #10
   d95ba:	4630      	mov	r0, r6
   d95bc:	f7ff ff8a 	bl	d94d4 <__multadd>
   d95c0:	e7f3      	b.n	d95aa <__s2b+0x60>
   d95c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d95c6 <__hi0bits>:
   d95c6:	0c03      	lsrs	r3, r0, #16
   d95c8:	041b      	lsls	r3, r3, #16
   d95ca:	b913      	cbnz	r3, d95d2 <__hi0bits+0xc>
   d95cc:	0400      	lsls	r0, r0, #16
   d95ce:	2310      	movs	r3, #16
   d95d0:	e000      	b.n	d95d4 <__hi0bits+0xe>
   d95d2:	2300      	movs	r3, #0
   d95d4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d95d8:	bf04      	itt	eq
   d95da:	0200      	lsleq	r0, r0, #8
   d95dc:	3308      	addeq	r3, #8
   d95de:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d95e2:	bf04      	itt	eq
   d95e4:	0100      	lsleq	r0, r0, #4
   d95e6:	3304      	addeq	r3, #4
   d95e8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d95ec:	bf04      	itt	eq
   d95ee:	0080      	lsleq	r0, r0, #2
   d95f0:	3302      	addeq	r3, #2
   d95f2:	2800      	cmp	r0, #0
   d95f4:	db03      	blt.n	d95fe <__hi0bits+0x38>
   d95f6:	0042      	lsls	r2, r0, #1
   d95f8:	d503      	bpl.n	d9602 <__hi0bits+0x3c>
   d95fa:	1c58      	adds	r0, r3, #1
   d95fc:	4770      	bx	lr
   d95fe:	4618      	mov	r0, r3
   d9600:	4770      	bx	lr
   d9602:	2020      	movs	r0, #32
   d9604:	4770      	bx	lr

000d9606 <__lo0bits>:
   d9606:	6803      	ldr	r3, [r0, #0]
   d9608:	f013 0207 	ands.w	r2, r3, #7
   d960c:	d00b      	beq.n	d9626 <__lo0bits+0x20>
   d960e:	07d9      	lsls	r1, r3, #31
   d9610:	d422      	bmi.n	d9658 <__lo0bits+0x52>
   d9612:	079a      	lsls	r2, r3, #30
   d9614:	bf4b      	itete	mi
   d9616:	085b      	lsrmi	r3, r3, #1
   d9618:	089b      	lsrpl	r3, r3, #2
   d961a:	6003      	strmi	r3, [r0, #0]
   d961c:	6003      	strpl	r3, [r0, #0]
   d961e:	bf4c      	ite	mi
   d9620:	2001      	movmi	r0, #1
   d9622:	2002      	movpl	r0, #2
   d9624:	4770      	bx	lr
   d9626:	b299      	uxth	r1, r3
   d9628:	b909      	cbnz	r1, d962e <__lo0bits+0x28>
   d962a:	0c1b      	lsrs	r3, r3, #16
   d962c:	2210      	movs	r2, #16
   d962e:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9632:	bf04      	itt	eq
   d9634:	0a1b      	lsreq	r3, r3, #8
   d9636:	3208      	addeq	r2, #8
   d9638:	0719      	lsls	r1, r3, #28
   d963a:	bf04      	itt	eq
   d963c:	091b      	lsreq	r3, r3, #4
   d963e:	3204      	addeq	r2, #4
   d9640:	0799      	lsls	r1, r3, #30
   d9642:	bf04      	itt	eq
   d9644:	089b      	lsreq	r3, r3, #2
   d9646:	3202      	addeq	r2, #2
   d9648:	07d9      	lsls	r1, r3, #31
   d964a:	d402      	bmi.n	d9652 <__lo0bits+0x4c>
   d964c:	085b      	lsrs	r3, r3, #1
   d964e:	d005      	beq.n	d965c <__lo0bits+0x56>
   d9650:	3201      	adds	r2, #1
   d9652:	6003      	str	r3, [r0, #0]
   d9654:	4610      	mov	r0, r2
   d9656:	4770      	bx	lr
   d9658:	2000      	movs	r0, #0
   d965a:	4770      	bx	lr
   d965c:	2020      	movs	r0, #32
   d965e:	4770      	bx	lr

000d9660 <__i2b>:
   d9660:	b510      	push	{r4, lr}
   d9662:	460c      	mov	r4, r1
   d9664:	2101      	movs	r1, #1
   d9666:	f7ff fee9 	bl	d943c <_Balloc>
   d966a:	2201      	movs	r2, #1
   d966c:	6144      	str	r4, [r0, #20]
   d966e:	6102      	str	r2, [r0, #16]
   d9670:	bd10      	pop	{r4, pc}

000d9672 <__multiply>:
   d9672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9676:	4614      	mov	r4, r2
   d9678:	690a      	ldr	r2, [r1, #16]
   d967a:	6923      	ldr	r3, [r4, #16]
   d967c:	429a      	cmp	r2, r3
   d967e:	bfb8      	it	lt
   d9680:	460b      	movlt	r3, r1
   d9682:	4688      	mov	r8, r1
   d9684:	bfbc      	itt	lt
   d9686:	46a0      	movlt	r8, r4
   d9688:	461c      	movlt	r4, r3
   d968a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d968e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9692:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9696:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d969a:	eb07 0609 	add.w	r6, r7, r9
   d969e:	429e      	cmp	r6, r3
   d96a0:	bfc8      	it	gt
   d96a2:	3101      	addgt	r1, #1
   d96a4:	f7ff feca 	bl	d943c <_Balloc>
   d96a8:	f100 0514 	add.w	r5, r0, #20
   d96ac:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d96b0:	462b      	mov	r3, r5
   d96b2:	2200      	movs	r2, #0
   d96b4:	4563      	cmp	r3, ip
   d96b6:	d202      	bcs.n	d96be <__multiply+0x4c>
   d96b8:	f843 2b04 	str.w	r2, [r3], #4
   d96bc:	e7fa      	b.n	d96b4 <__multiply+0x42>
   d96be:	f104 0214 	add.w	r2, r4, #20
   d96c2:	f108 0114 	add.w	r1, r8, #20
   d96c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d96ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d96ce:	9300      	str	r3, [sp, #0]
   d96d0:	9b00      	ldr	r3, [sp, #0]
   d96d2:	9201      	str	r2, [sp, #4]
   d96d4:	4293      	cmp	r3, r2
   d96d6:	d957      	bls.n	d9788 <__multiply+0x116>
   d96d8:	f8b2 b000 	ldrh.w	fp, [r2]
   d96dc:	f1bb 0f00 	cmp.w	fp, #0
   d96e0:	d023      	beq.n	d972a <__multiply+0xb8>
   d96e2:	4689      	mov	r9, r1
   d96e4:	46ae      	mov	lr, r5
   d96e6:	f04f 0800 	mov.w	r8, #0
   d96ea:	f859 4b04 	ldr.w	r4, [r9], #4
   d96ee:	f8be a000 	ldrh.w	sl, [lr]
   d96f2:	b2a3      	uxth	r3, r4
   d96f4:	fb0b a303 	mla	r3, fp, r3, sl
   d96f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d96fc:	f8de 4000 	ldr.w	r4, [lr]
   d9700:	4443      	add	r3, r8
   d9702:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9706:	fb0b 840a 	mla	r4, fp, sl, r8
   d970a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d970e:	46f2      	mov	sl, lr
   d9710:	b29b      	uxth	r3, r3
   d9712:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9716:	454f      	cmp	r7, r9
   d9718:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d971c:	f84a 3b04 	str.w	r3, [sl], #4
   d9720:	d901      	bls.n	d9726 <__multiply+0xb4>
   d9722:	46d6      	mov	lr, sl
   d9724:	e7e1      	b.n	d96ea <__multiply+0x78>
   d9726:	f8ce 8004 	str.w	r8, [lr, #4]
   d972a:	9b01      	ldr	r3, [sp, #4]
   d972c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9730:	3204      	adds	r2, #4
   d9732:	f1ba 0f00 	cmp.w	sl, #0
   d9736:	d021      	beq.n	d977c <__multiply+0x10a>
   d9738:	682b      	ldr	r3, [r5, #0]
   d973a:	462c      	mov	r4, r5
   d973c:	4689      	mov	r9, r1
   d973e:	f04f 0800 	mov.w	r8, #0
   d9742:	f8b9 e000 	ldrh.w	lr, [r9]
   d9746:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d974a:	fb0a be0e 	mla	lr, sl, lr, fp
   d974e:	44f0      	add	r8, lr
   d9750:	46a3      	mov	fp, r4
   d9752:	b29b      	uxth	r3, r3
   d9754:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d9758:	f84b 3b04 	str.w	r3, [fp], #4
   d975c:	f859 3b04 	ldr.w	r3, [r9], #4
   d9760:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d9764:	0c1b      	lsrs	r3, r3, #16
   d9766:	fb0a e303 	mla	r3, sl, r3, lr
   d976a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d976e:	454f      	cmp	r7, r9
   d9770:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d9774:	d901      	bls.n	d977a <__multiply+0x108>
   d9776:	465c      	mov	r4, fp
   d9778:	e7e3      	b.n	d9742 <__multiply+0xd0>
   d977a:	6063      	str	r3, [r4, #4]
   d977c:	3504      	adds	r5, #4
   d977e:	e7a7      	b.n	d96d0 <__multiply+0x5e>
   d9780:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d9784:	b913      	cbnz	r3, d978c <__multiply+0x11a>
   d9786:	3e01      	subs	r6, #1
   d9788:	2e00      	cmp	r6, #0
   d978a:	dcf9      	bgt.n	d9780 <__multiply+0x10e>
   d978c:	6106      	str	r6, [r0, #16]
   d978e:	b003      	add	sp, #12
   d9790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9794 <__pow5mult>:
   d9794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9798:	4615      	mov	r5, r2
   d979a:	f012 0203 	ands.w	r2, r2, #3
   d979e:	4606      	mov	r6, r0
   d97a0:	460f      	mov	r7, r1
   d97a2:	d007      	beq.n	d97b4 <__pow5mult+0x20>
   d97a4:	3a01      	subs	r2, #1
   d97a6:	4c21      	ldr	r4, [pc, #132]	; (d982c <__pow5mult+0x98>)
   d97a8:	2300      	movs	r3, #0
   d97aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d97ae:	f7ff fe91 	bl	d94d4 <__multadd>
   d97b2:	4607      	mov	r7, r0
   d97b4:	10ad      	asrs	r5, r5, #2
   d97b6:	d036      	beq.n	d9826 <__pow5mult+0x92>
   d97b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d97ba:	b93c      	cbnz	r4, d97cc <__pow5mult+0x38>
   d97bc:	2010      	movs	r0, #16
   d97be:	f7fb fe45 	bl	d544c <malloc>
   d97c2:	6270      	str	r0, [r6, #36]	; 0x24
   d97c4:	6044      	str	r4, [r0, #4]
   d97c6:	6084      	str	r4, [r0, #8]
   d97c8:	6004      	str	r4, [r0, #0]
   d97ca:	60c4      	str	r4, [r0, #12]
   d97cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d97d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d97d4:	b94c      	cbnz	r4, d97ea <__pow5mult+0x56>
   d97d6:	f240 2171 	movw	r1, #625	; 0x271
   d97da:	4630      	mov	r0, r6
   d97dc:	f7ff ff40 	bl	d9660 <__i2b>
   d97e0:	2300      	movs	r3, #0
   d97e2:	f8c8 0008 	str.w	r0, [r8, #8]
   d97e6:	4604      	mov	r4, r0
   d97e8:	6003      	str	r3, [r0, #0]
   d97ea:	f04f 0800 	mov.w	r8, #0
   d97ee:	07eb      	lsls	r3, r5, #31
   d97f0:	d50a      	bpl.n	d9808 <__pow5mult+0x74>
   d97f2:	4639      	mov	r1, r7
   d97f4:	4622      	mov	r2, r4
   d97f6:	4630      	mov	r0, r6
   d97f8:	f7ff ff3b 	bl	d9672 <__multiply>
   d97fc:	4639      	mov	r1, r7
   d97fe:	4681      	mov	r9, r0
   d9800:	4630      	mov	r0, r6
   d9802:	f7ff fe50 	bl	d94a6 <_Bfree>
   d9806:	464f      	mov	r7, r9
   d9808:	106d      	asrs	r5, r5, #1
   d980a:	d00c      	beq.n	d9826 <__pow5mult+0x92>
   d980c:	6820      	ldr	r0, [r4, #0]
   d980e:	b108      	cbz	r0, d9814 <__pow5mult+0x80>
   d9810:	4604      	mov	r4, r0
   d9812:	e7ec      	b.n	d97ee <__pow5mult+0x5a>
   d9814:	4622      	mov	r2, r4
   d9816:	4621      	mov	r1, r4
   d9818:	4630      	mov	r0, r6
   d981a:	f7ff ff2a 	bl	d9672 <__multiply>
   d981e:	6020      	str	r0, [r4, #0]
   d9820:	f8c0 8000 	str.w	r8, [r0]
   d9824:	e7f4      	b.n	d9810 <__pow5mult+0x7c>
   d9826:	4638      	mov	r0, r7
   d9828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d982c:	000da5a8 	.word	0x000da5a8

000d9830 <__lshift>:
   d9830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9834:	460c      	mov	r4, r1
   d9836:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d983a:	6926      	ldr	r6, [r4, #16]
   d983c:	6849      	ldr	r1, [r1, #4]
   d983e:	68a3      	ldr	r3, [r4, #8]
   d9840:	4456      	add	r6, sl
   d9842:	4607      	mov	r7, r0
   d9844:	4691      	mov	r9, r2
   d9846:	1c75      	adds	r5, r6, #1
   d9848:	42ab      	cmp	r3, r5
   d984a:	da02      	bge.n	d9852 <__lshift+0x22>
   d984c:	3101      	adds	r1, #1
   d984e:	005b      	lsls	r3, r3, #1
   d9850:	e7fa      	b.n	d9848 <__lshift+0x18>
   d9852:	4638      	mov	r0, r7
   d9854:	f7ff fdf2 	bl	d943c <_Balloc>
   d9858:	2300      	movs	r3, #0
   d985a:	4680      	mov	r8, r0
   d985c:	f100 0114 	add.w	r1, r0, #20
   d9860:	461a      	mov	r2, r3
   d9862:	4553      	cmp	r3, sl
   d9864:	da03      	bge.n	d986e <__lshift+0x3e>
   d9866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d986a:	3301      	adds	r3, #1
   d986c:	e7f9      	b.n	d9862 <__lshift+0x32>
   d986e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d9872:	6920      	ldr	r0, [r4, #16]
   d9874:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9878:	f019 091f 	ands.w	r9, r9, #31
   d987c:	f104 0114 	add.w	r1, r4, #20
   d9880:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d9884:	d014      	beq.n	d98b0 <__lshift+0x80>
   d9886:	f1c9 0c20 	rsb	ip, r9, #32
   d988a:	2200      	movs	r2, #0
   d988c:	6808      	ldr	r0, [r1, #0]
   d988e:	fa00 f009 	lsl.w	r0, r0, r9
   d9892:	4302      	orrs	r2, r0
   d9894:	469a      	mov	sl, r3
   d9896:	f843 2b04 	str.w	r2, [r3], #4
   d989a:	f851 2b04 	ldr.w	r2, [r1], #4
   d989e:	458e      	cmp	lr, r1
   d98a0:	fa22 f20c 	lsr.w	r2, r2, ip
   d98a4:	d8f2      	bhi.n	d988c <__lshift+0x5c>
   d98a6:	f8ca 2004 	str.w	r2, [sl, #4]
   d98aa:	b142      	cbz	r2, d98be <__lshift+0x8e>
   d98ac:	1cb5      	adds	r5, r6, #2
   d98ae:	e006      	b.n	d98be <__lshift+0x8e>
   d98b0:	3b04      	subs	r3, #4
   d98b2:	f851 2b04 	ldr.w	r2, [r1], #4
   d98b6:	f843 2f04 	str.w	r2, [r3, #4]!
   d98ba:	458e      	cmp	lr, r1
   d98bc:	d8f9      	bhi.n	d98b2 <__lshift+0x82>
   d98be:	3d01      	subs	r5, #1
   d98c0:	4638      	mov	r0, r7
   d98c2:	f8c8 5010 	str.w	r5, [r8, #16]
   d98c6:	4621      	mov	r1, r4
   d98c8:	f7ff fded 	bl	d94a6 <_Bfree>
   d98cc:	4640      	mov	r0, r8
   d98ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d98d2 <__mcmp>:
   d98d2:	6903      	ldr	r3, [r0, #16]
   d98d4:	690a      	ldr	r2, [r1, #16]
   d98d6:	1a9b      	subs	r3, r3, r2
   d98d8:	b510      	push	{r4, lr}
   d98da:	d111      	bne.n	d9900 <__mcmp+0x2e>
   d98dc:	0092      	lsls	r2, r2, #2
   d98de:	3014      	adds	r0, #20
   d98e0:	3114      	adds	r1, #20
   d98e2:	1883      	adds	r3, r0, r2
   d98e4:	440a      	add	r2, r1
   d98e6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d98ea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d98ee:	428c      	cmp	r4, r1
   d98f0:	d002      	beq.n	d98f8 <__mcmp+0x26>
   d98f2:	d307      	bcc.n	d9904 <__mcmp+0x32>
   d98f4:	2001      	movs	r0, #1
   d98f6:	bd10      	pop	{r4, pc}
   d98f8:	4298      	cmp	r0, r3
   d98fa:	d3f4      	bcc.n	d98e6 <__mcmp+0x14>
   d98fc:	2000      	movs	r0, #0
   d98fe:	bd10      	pop	{r4, pc}
   d9900:	4618      	mov	r0, r3
   d9902:	bd10      	pop	{r4, pc}
   d9904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9908:	bd10      	pop	{r4, pc}

000d990a <__mdiff>:
   d990a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d990e:	460c      	mov	r4, r1
   d9910:	4607      	mov	r7, r0
   d9912:	4611      	mov	r1, r2
   d9914:	4620      	mov	r0, r4
   d9916:	4615      	mov	r5, r2
   d9918:	f7ff ffdb 	bl	d98d2 <__mcmp>
   d991c:	1e06      	subs	r6, r0, #0
   d991e:	d108      	bne.n	d9932 <__mdiff+0x28>
   d9920:	4631      	mov	r1, r6
   d9922:	4638      	mov	r0, r7
   d9924:	f7ff fd8a 	bl	d943c <_Balloc>
   d9928:	2301      	movs	r3, #1
   d992a:	6103      	str	r3, [r0, #16]
   d992c:	6146      	str	r6, [r0, #20]
   d992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9932:	bfbc      	itt	lt
   d9934:	4623      	movlt	r3, r4
   d9936:	462c      	movlt	r4, r5
   d9938:	4638      	mov	r0, r7
   d993a:	6861      	ldr	r1, [r4, #4]
   d993c:	bfba      	itte	lt
   d993e:	461d      	movlt	r5, r3
   d9940:	2601      	movlt	r6, #1
   d9942:	2600      	movge	r6, #0
   d9944:	f7ff fd7a 	bl	d943c <_Balloc>
   d9948:	692b      	ldr	r3, [r5, #16]
   d994a:	60c6      	str	r6, [r0, #12]
   d994c:	6926      	ldr	r6, [r4, #16]
   d994e:	f105 0914 	add.w	r9, r5, #20
   d9952:	3414      	adds	r4, #20
   d9954:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d9958:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d995c:	f100 0514 	add.w	r5, r0, #20
   d9960:	f04f 0c00 	mov.w	ip, #0
   d9964:	f854 3b04 	ldr.w	r3, [r4], #4
   d9968:	f859 2b04 	ldr.w	r2, [r9], #4
   d996c:	fa1c f183 	uxtah	r1, ip, r3
   d9970:	fa1f fe82 	uxth.w	lr, r2
   d9974:	0c12      	lsrs	r2, r2, #16
   d9976:	ebce 0101 	rsb	r1, lr, r1
   d997a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d997e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d9982:	b289      	uxth	r1, r1
   d9984:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9988:	45c8      	cmp	r8, r9
   d998a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d998e:	46a6      	mov	lr, r4
   d9990:	f845 3b04 	str.w	r3, [r5], #4
   d9994:	d8e6      	bhi.n	d9964 <__mdiff+0x5a>
   d9996:	45be      	cmp	lr, r7
   d9998:	d20e      	bcs.n	d99b8 <__mdiff+0xae>
   d999a:	f85e 1b04 	ldr.w	r1, [lr], #4
   d999e:	fa1c f281 	uxtah	r2, ip, r1
   d99a2:	1413      	asrs	r3, r2, #16
   d99a4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d99a8:	b292      	uxth	r2, r2
   d99aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d99ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d99b2:	f845 2b04 	str.w	r2, [r5], #4
   d99b6:	e7ee      	b.n	d9996 <__mdiff+0x8c>
   d99b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d99bc:	b90b      	cbnz	r3, d99c2 <__mdiff+0xb8>
   d99be:	3e01      	subs	r6, #1
   d99c0:	e7fa      	b.n	d99b8 <__mdiff+0xae>
   d99c2:	6106      	str	r6, [r0, #16]
   d99c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d99c8 <__ulp>:
   d99c8:	4b12      	ldr	r3, [pc, #72]	; (d9a14 <__ulp+0x4c>)
   d99ca:	ee10 2a90 	vmov	r2, s1
   d99ce:	401a      	ands	r2, r3
   d99d0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d99d4:	2b00      	cmp	r3, #0
   d99d6:	dd02      	ble.n	d99de <__ulp+0x16>
   d99d8:	2000      	movs	r0, #0
   d99da:	4619      	mov	r1, r3
   d99dc:	e017      	b.n	d9a0e <__ulp+0x46>
   d99de:	425b      	negs	r3, r3
   d99e0:	151b      	asrs	r3, r3, #20
   d99e2:	2b13      	cmp	r3, #19
   d99e4:	f04f 0000 	mov.w	r0, #0
   d99e8:	f04f 0100 	mov.w	r1, #0
   d99ec:	dc04      	bgt.n	d99f8 <__ulp+0x30>
   d99ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d99f2:	fa42 f103 	asr.w	r1, r2, r3
   d99f6:	e00a      	b.n	d9a0e <__ulp+0x46>
   d99f8:	3b14      	subs	r3, #20
   d99fa:	2b1e      	cmp	r3, #30
   d99fc:	f04f 0201 	mov.w	r2, #1
   d9a00:	bfda      	itte	le
   d9a02:	f1c3 031f 	rsble	r3, r3, #31
   d9a06:	fa02 f303 	lslle.w	r3, r2, r3
   d9a0a:	4613      	movgt	r3, r2
   d9a0c:	4618      	mov	r0, r3
   d9a0e:	ec41 0b10 	vmov	d0, r0, r1
   d9a12:	4770      	bx	lr
   d9a14:	7ff00000 	.word	0x7ff00000

000d9a18 <__b2d>:
   d9a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9a1a:	6905      	ldr	r5, [r0, #16]
   d9a1c:	f100 0614 	add.w	r6, r0, #20
   d9a20:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d9a24:	1f2f      	subs	r7, r5, #4
   d9a26:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9a2a:	4620      	mov	r0, r4
   d9a2c:	f7ff fdcb 	bl	d95c6 <__hi0bits>
   d9a30:	f1c0 0320 	rsb	r3, r0, #32
   d9a34:	280a      	cmp	r0, #10
   d9a36:	600b      	str	r3, [r1, #0]
   d9a38:	dc14      	bgt.n	d9a64 <__b2d+0x4c>
   d9a3a:	f1c0 0e0b 	rsb	lr, r0, #11
   d9a3e:	fa24 f10e 	lsr.w	r1, r4, lr
   d9a42:	42be      	cmp	r6, r7
   d9a44:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d9a48:	bf34      	ite	cc
   d9a4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9a4e:	2100      	movcs	r1, #0
   d9a50:	3015      	adds	r0, #21
   d9a52:	fa04 f000 	lsl.w	r0, r4, r0
   d9a56:	fa21 f10e 	lsr.w	r1, r1, lr
   d9a5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9a5e:	ea40 0201 	orr.w	r2, r0, r1
   d9a62:	e023      	b.n	d9aac <__b2d+0x94>
   d9a64:	42be      	cmp	r6, r7
   d9a66:	bf3a      	itte	cc
   d9a68:	f1a5 0708 	subcc.w	r7, r5, #8
   d9a6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9a70:	2100      	movcs	r1, #0
   d9a72:	380b      	subs	r0, #11
   d9a74:	d015      	beq.n	d9aa2 <__b2d+0x8a>
   d9a76:	4084      	lsls	r4, r0
   d9a78:	f1c0 0520 	rsb	r5, r0, #32
   d9a7c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9a80:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9a84:	42b7      	cmp	r7, r6
   d9a86:	fa21 fe05 	lsr.w	lr, r1, r5
   d9a8a:	ea44 030e 	orr.w	r3, r4, lr
   d9a8e:	bf8c      	ite	hi
   d9a90:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9a94:	2400      	movls	r4, #0
   d9a96:	fa01 f000 	lsl.w	r0, r1, r0
   d9a9a:	40ec      	lsrs	r4, r5
   d9a9c:	ea40 0204 	orr.w	r2, r0, r4
   d9aa0:	e004      	b.n	d9aac <__b2d+0x94>
   d9aa2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d9aa6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9aaa:	460a      	mov	r2, r1
   d9aac:	ec43 2b10 	vmov	d0, r2, r3
   d9ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9ab2 <__d2b>:
   d9ab2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9ab6:	460e      	mov	r6, r1
   d9ab8:	2101      	movs	r1, #1
   d9aba:	ec59 8b10 	vmov	r8, r9, d0
   d9abe:	4615      	mov	r5, r2
   d9ac0:	f7ff fcbc 	bl	d943c <_Balloc>
   d9ac4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d9ac8:	4607      	mov	r7, r0
   d9aca:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d9ace:	b10c      	cbz	r4, d9ad4 <__d2b+0x22>
   d9ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9ad4:	9301      	str	r3, [sp, #4]
   d9ad6:	f1b8 0f00 	cmp.w	r8, #0
   d9ada:	d019      	beq.n	d9b10 <__d2b+0x5e>
   d9adc:	a802      	add	r0, sp, #8
   d9ade:	f840 8d08 	str.w	r8, [r0, #-8]!
   d9ae2:	f7ff fd90 	bl	d9606 <__lo0bits>
   d9ae6:	9b00      	ldr	r3, [sp, #0]
   d9ae8:	b148      	cbz	r0, d9afe <__d2b+0x4c>
   d9aea:	9a01      	ldr	r2, [sp, #4]
   d9aec:	f1c0 0120 	rsb	r1, r0, #32
   d9af0:	fa02 f101 	lsl.w	r1, r2, r1
   d9af4:	430b      	orrs	r3, r1
   d9af6:	40c2      	lsrs	r2, r0
   d9af8:	617b      	str	r3, [r7, #20]
   d9afa:	9201      	str	r2, [sp, #4]
   d9afc:	e000      	b.n	d9b00 <__d2b+0x4e>
   d9afe:	617b      	str	r3, [r7, #20]
   d9b00:	9b01      	ldr	r3, [sp, #4]
   d9b02:	61bb      	str	r3, [r7, #24]
   d9b04:	2b00      	cmp	r3, #0
   d9b06:	bf14      	ite	ne
   d9b08:	2102      	movne	r1, #2
   d9b0a:	2101      	moveq	r1, #1
   d9b0c:	6139      	str	r1, [r7, #16]
   d9b0e:	e007      	b.n	d9b20 <__d2b+0x6e>
   d9b10:	a801      	add	r0, sp, #4
   d9b12:	f7ff fd78 	bl	d9606 <__lo0bits>
   d9b16:	9b01      	ldr	r3, [sp, #4]
   d9b18:	617b      	str	r3, [r7, #20]
   d9b1a:	2101      	movs	r1, #1
   d9b1c:	6139      	str	r1, [r7, #16]
   d9b1e:	3020      	adds	r0, #32
   d9b20:	b134      	cbz	r4, d9b30 <__d2b+0x7e>
   d9b22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d9b26:	4404      	add	r4, r0
   d9b28:	6034      	str	r4, [r6, #0]
   d9b2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9b2e:	e009      	b.n	d9b44 <__d2b+0x92>
   d9b30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d9b34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9b38:	6030      	str	r0, [r6, #0]
   d9b3a:	6918      	ldr	r0, [r3, #16]
   d9b3c:	f7ff fd43 	bl	d95c6 <__hi0bits>
   d9b40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d9b44:	6028      	str	r0, [r5, #0]
   d9b46:	4638      	mov	r0, r7
   d9b48:	b003      	add	sp, #12
   d9b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9b4e <__ratio>:
   d9b4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9b52:	4688      	mov	r8, r1
   d9b54:	4669      	mov	r1, sp
   d9b56:	4681      	mov	r9, r0
   d9b58:	f7ff ff5e 	bl	d9a18 <__b2d>
   d9b5c:	a901      	add	r1, sp, #4
   d9b5e:	4640      	mov	r0, r8
   d9b60:	ec55 4b10 	vmov	r4, r5, d0
   d9b64:	f7ff ff58 	bl	d9a18 <__b2d>
   d9b68:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9b6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9b70:	1a9a      	subs	r2, r3, r2
   d9b72:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d9b76:	1ac9      	subs	r1, r1, r3
   d9b78:	ec57 6b10 	vmov	r6, r7, d0
   d9b7c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9b80:	2b00      	cmp	r3, #0
   d9b82:	bfcc      	ite	gt
   d9b84:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d9b88:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d9b8c:	4632      	mov	r2, r6
   d9b8e:	463b      	mov	r3, r7
   d9b90:	4620      	mov	r0, r4
   d9b92:	4629      	mov	r1, r5
   d9b94:	f7fd fb34 	bl	d7200 <__aeabi_ddiv>
   d9b98:	ec41 0b10 	vmov	d0, r0, r1
   d9b9c:	b003      	add	sp, #12
   d9b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9ba2 <__copybits>:
   d9ba2:	3901      	subs	r1, #1
   d9ba4:	b510      	push	{r4, lr}
   d9ba6:	1149      	asrs	r1, r1, #5
   d9ba8:	6914      	ldr	r4, [r2, #16]
   d9baa:	3101      	adds	r1, #1
   d9bac:	f102 0314 	add.w	r3, r2, #20
   d9bb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9bb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9bb8:	42a3      	cmp	r3, r4
   d9bba:	4602      	mov	r2, r0
   d9bbc:	d204      	bcs.n	d9bc8 <__copybits+0x26>
   d9bbe:	f853 2b04 	ldr.w	r2, [r3], #4
   d9bc2:	f840 2b04 	str.w	r2, [r0], #4
   d9bc6:	e7f7      	b.n	d9bb8 <__copybits+0x16>
   d9bc8:	2300      	movs	r3, #0
   d9bca:	428a      	cmp	r2, r1
   d9bcc:	d202      	bcs.n	d9bd4 <__copybits+0x32>
   d9bce:	f842 3b04 	str.w	r3, [r2], #4
   d9bd2:	e7fa      	b.n	d9bca <__copybits+0x28>
   d9bd4:	bd10      	pop	{r4, pc}

000d9bd6 <__any_on>:
   d9bd6:	f100 0214 	add.w	r2, r0, #20
   d9bda:	6900      	ldr	r0, [r0, #16]
   d9bdc:	114b      	asrs	r3, r1, #5
   d9bde:	4298      	cmp	r0, r3
   d9be0:	b510      	push	{r4, lr}
   d9be2:	db0c      	blt.n	d9bfe <__any_on+0x28>
   d9be4:	dd0c      	ble.n	d9c00 <__any_on+0x2a>
   d9be6:	f011 011f 	ands.w	r1, r1, #31
   d9bea:	d009      	beq.n	d9c00 <__any_on+0x2a>
   d9bec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9bf0:	fa24 f001 	lsr.w	r0, r4, r1
   d9bf4:	fa00 f101 	lsl.w	r1, r0, r1
   d9bf8:	428c      	cmp	r4, r1
   d9bfa:	d10c      	bne.n	d9c16 <__any_on+0x40>
   d9bfc:	e000      	b.n	d9c00 <__any_on+0x2a>
   d9bfe:	4603      	mov	r3, r0
   d9c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9c04:	4293      	cmp	r3, r2
   d9c06:	d904      	bls.n	d9c12 <__any_on+0x3c>
   d9c08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9c0c:	2900      	cmp	r1, #0
   d9c0e:	d0f9      	beq.n	d9c04 <__any_on+0x2e>
   d9c10:	e001      	b.n	d9c16 <__any_on+0x40>
   d9c12:	2000      	movs	r0, #0
   d9c14:	bd10      	pop	{r4, pc}
   d9c16:	2001      	movs	r0, #1
   d9c18:	bd10      	pop	{r4, pc}

000d9c1a <_calloc_r>:
   d9c1a:	b538      	push	{r3, r4, r5, lr}
   d9c1c:	fb02 f401 	mul.w	r4, r2, r1
   d9c20:	4621      	mov	r1, r4
   d9c22:	f7fb fc43 	bl	d54ac <_malloc_r>
   d9c26:	4605      	mov	r5, r0
   d9c28:	b118      	cbz	r0, d9c32 <_calloc_r+0x18>
   d9c2a:	4622      	mov	r2, r4
   d9c2c:	2100      	movs	r1, #0
   d9c2e:	f7fd fe0c 	bl	d784a <memset>
   d9c32:	4628      	mov	r0, r5
   d9c34:	bd38      	pop	{r3, r4, r5, pc}

000d9c36 <__env_lock>:
   d9c36:	4770      	bx	lr

000d9c38 <__env_unlock>:
   d9c38:	4770      	bx	lr

000d9c3a <link_code_end>:
	...

000d9c3c <dynalib_user>:
   d9c3c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9c4c:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d9c5c:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
   d9c90:	6554 706d 4d5f 7861 3a20 2520 2e33 6631     Temp_Max : %3.1f
   d9ca0:	5400 6d65 5f70 694d 2078 203a 3325 312e     .Temp_Mix : %3.1
   d9cb0:	0066 7548 696d 6964 7974 4d5f 7861 203a     f.Humidity_Max: 
   d9cc0:	3325 312e 0066 7548 696d 6964 7974 4d5f     %3.1f.Humidity_M
   d9cd0:	6e69 3a20 2520 2e33 6631 2500 2e33 6631     in : %3.1f.%3.1f
   d9ce0:	5620 7b00 5422 6d65 6570 6172 7574 6572      V.{"Temperature
   d9cf0:	3a22 3425 312e 2c66 2220 7548 696d 6964     ":%4.1f, "Humidi
   d9d00:	7974 3a22 3425 312e 7d66 7300 6f74 6172     ty":%4.1f}.stora
   d9d10:	6567 662d 6361 6c69 7469 2d79 6f68 6b6f     ge-facility-hook
   d9d20:	4e00 206f 6144 6174 5500 6962 6f64 7374     .No Data.Ubidots
   d9d30:	4820 6f6f 006b 6552 7073 6e6f 6573 5220      Hook.Response R
   d9d40:	6365 6965 6576 0064 7453 7461 0065 3425     eceived.State.%4
   d9d50:	312e 2a66 0043 3425 312e 2566 0025 3425     .1f*C.%4.1f%%.%4
   d9d60:	312e 5666 4600 6961 656c 2064 6f74 7020     .1fV.Failed to p
   d9d70:	7265 6f66 6d72 7220 6165 6964 676e 3a20     erform reading :
   d9d80:	0028 6f4c 0067 6146 6c69 6465 7420 206f     (.Log.Failed to 
   d9d90:	6174 656b 7220 6165 6964 676e 0021 227b     take reading!.{"
   d9da0:	6c61 7265 2d74 6574 706d 7265 7461 7275     alert-temperatur
   d9db0:	2265 253a 2e34 6631 007d 6363 612d 656c     e":%4.1f}.cc-ale
   d9dc0:	7472 772d 6265 6f68 6b6f 7b00 6122 656c     rt-webhook.{"ale
   d9dd0:	7472 682d 6d75 6469 7469 2279 253a 2e34     rt-humidity":%4.
   d9de0:	6631 007d 6553 2074 6556 6272 736f 2065     1f}.Set Verbose 
   d9df0:	6f4d 6564 3000 4300 656c 7261 6465 5620     Mode.0.Cleared V
   d9e00:	7265 6f62 6573 4d20 646f 0065 7246 6d6f     erbose Mode.From
   d9e10:	2520 2073 6f74 2520 0073 7453 7461 2065      %s to %s.State 
   d9e20:	7254 6e61 6973 6974 6e6f 4500 7272 726f     Transition.Error
   d9e30:	7420 6b61 6e69 2067 654d 7361 7275 6d65      taking Measurem
   d9e40:	6e65 7374 7300 6170 6b72 642f 7665 6369     ents.spark/devic
   d9e50:	2f65 6573 7373 6f69 2f6e 6e65 0064 7245     e/session/end.Er
   d9e60:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   d9e70:	0074 7055 6570 2072 6854 6572 6873 6c6f     t.Upper Threshol
   d9e80:	2064 6553 0074 6f4c 6577 2072 6854 6572     d Set.Lower Thre
   d9e90:	6873 6c6f 2064 6553 0074 4853 3354 2031     shold Set.SHT31 
   d9ea0:	6574 7473 5200 6c65 6165 6573 7400 6d65     test.Release.tem
   d9eb0:	6570 6172 7574 6572 6800 6d75 6469 7469     perature.humidit
   d9ec0:	0079 6574 706d 7265 7461 7275 2d65 7055     y.temperature-Up
   d9ed0:	6570 0072 6574 706d 7265 7461 7275 2d65     per.temperature-
   d9ee0:	6f6c 6577 0072 7568 696d 6964 7974 752d     lower.humidity-u
   d9ef0:	7070 7265 6800 6d75 6469 7469 2d79 6f6c     pper.humidity-lo
   d9f00:	6577 0072 6142 7474 7265 0079 654d 7361     wer.Battery.Meas
   d9f10:	7275 2d65 6f4e 0077 6556 6272 736f 2d65     ure-Now.Verbose-
   d9f20:	6f4d 6564 5400 6d65 2d70 7055 6570 2d72     Mode.Temp-Upper-
   d9f30:	694c 696d 0074 6554 706d 4c2d 776f 7265     Limit.Temp-Lower
   d9f40:	4c2d 6d69 7469 4800 6d75 6469 7469 2d79     -Limit.Humidity-
   d9f50:	6f4c 6577 2d72 694c 696d 0074 7548 696d     Lower-Limit.Humi
   d9f60:	7464 2d79 7075 6570 2d72 694c 696d 0074     dty-upper-Limit.
   d9f70:	7245 6f72 2072 202d 4853 3354 2031 6e49     Error - SHT31 In
   d9f80:	7469 6169 696c 617a 6974 6e6f 4300 756f     itialization.Cou
   d9f90:	646c 276e 2074 6966 646e 5320 5448 3133     ldn't find SHT31
   d9fa0:	4600 6961 656c 2064 6f74 6320 6e6f 656e     .Failed to conne
   d9fb0:	7463 5300 6174 7472 7075 3100 302e 0039     ct.Startup.1.09.

000d9fc0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9fc8:	5531 000d 5537 000d 558d 000d 5545 000d     1U..7U...U..EU..
   d9fd8:	5533 000d                                   3U..

000d9fdc <_ZTVN5spark13EthernetClassE>:
	...
   d9fe4:	5ba3 000d 5b99 000d 5b8f 000d 5b85 000d     .[...[...[...[..
   d9ff4:	5b79 000d 5b6d 000d 5b61 000d 5b59 000d     y[..m[..a[..Y[..
   da004:	5b4f 000d 5b45 000d 5fa1 000d               O[..E[..._..

000da010 <_ZTV7TwoWire>:
	...
   da018:	5bc1 000d 5c0b 000d 5be3 000d 5bc3 000d     .[...\...[...[..
   da028:	5beb 000d 5bf3 000d 5bfb 000d 5c03 000d     .[...[...[...\..

000da038 <_ZTV9IPAddress>:
	...
   da040:	5cd9 000d 5cc9 000d 5ccb 000d 6162 6475     .\...\...\..baud
   da050:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   da060:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   da070:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   da080:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   da090:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   da0a0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   da0b0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   da0c0:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   da0d0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   da0e0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   da0f0:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   da100:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   da110:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   da120:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000da12c <_ZTVN5spark9MeshClassE>:
	...
   da134:	5e1b 000d 5e11 000d 5e07 000d 5dfd 000d     .^...^...^...]..
   da144:	5df1 000d 5de5 000d 5dd9 000d 5dd1 000d     .]...]...]...]..
   da154:	5dc7 000d 5dbd 000d 5fa1 000d               .]...]..._..

000da160 <_ZTVN5spark12NetworkClassE>:
	...
   da168:	5f39 000d 5f43 000d 5f4d 000d 5f57 000d     9_..C_..M_..W_..
   da178:	5f61 000d 5f6d 000d 5f79 000d 5f85 000d     a_..m_..y_..._..
   da188:	5f8d 000d 5f97 000d 5fa1 000d 2b25 3330     ._..._..._..%+03
   da198:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   da1a8:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   da1b8:	656d 0000                                   me..

000da1bc <_ZTV11USARTSerial>:
	...
   da1c4:	642d 000d 647d 000d 648b 000d 6081 000d     -d..}d...d...`..
   da1d4:	6441 000d 6463 000d 644f 000d 6477 000d     Ad..cd..Od..wd..
   da1e4:	642f 000d 6433 000d                         /d..3d..

000da1ec <_ZTV9USBSerial>:
	...
   da1f4:	6535 000d 6585 000d 6593 000d 6081 000d     5e...e...e...`..
   da204:	6571 000d 6537 000d 654d 000d 657f 000d     qe..7e..Me...e..
   da214:	6563 000d 6531 000d                         ce..1e..

000da21c <_ZTVN5spark9WiFiClassE>:
	...
   da224:	669f 000d 6695 000d 668b 000d 6641 000d     .f...f...f..Af..
   da234:	667f 000d 6673 000d 6667 000d 665f 000d     .f..sf..gf.._f..
   da244:	6655 000d 664b 000d 5fa1 000d               Uf..Kf..._..

000da250 <_ZSt7nothrow>:
	...

000da251 <_ctype_>:
   da251:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da261:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da271:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da281:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da291:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da2a1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da2b1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da2c1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da2d1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da354 <__sf_fake_stdin>:
	...

000da374 <__sf_fake_stdout>:
	...

000da394 <__sf_fake_stderr>:
	...
   da3b4:	4f50 4953 0058 002e                         POSIX...

000da3bc <__month_lengths>:
   da3bc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da3cc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da3dc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da3ec:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da3fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da40c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000da41c <fpi.5344>:
   da41c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   da42c:	0000 0000                                   ....

000da430 <fpinan.5380>:
   da430:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   da440:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000da450 <tinytens>:
   da450:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   da460:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   da470:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   da480:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   da490:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   da4a0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   da4b0:	2575 006e 0000 0000                         u%n.....

000da4b8 <__mprec_tens>:
   da4b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   da4c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   da4d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   da4e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   da4f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   da508:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   da518:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   da528:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   da538:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   da548:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   da558:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   da568:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   da578:	9db4 79d9 7843 44ea                         ...yCx.D

000da580 <__mprec_bigtens>:
   da580:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   da590:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   da5a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000da5a8 <p05.5387>:
   da5a8:	0005 0000 0019 0000 007d 0000               ........}...

000da5b4 <link_const_variable_data_end>:
   da5b4:	000d4cf9 	.word	0x000d4cf9
   da5b8:	000d4f11 	.word	0x000d4f11
   da5bc:	000d5509 	.word	0x000d5509
   da5c0:	000d5bad 	.word	0x000d5bad
   da5c4:	000d5dad 	.word	0x000d5dad
   da5c8:	000d5ee9 	.word	0x000d5ee9
   da5cc:	000d606d 	.word	0x000d606d
   da5d0:	000d614d 	.word	0x000d614d
   da5d4:	000d62ed 	.word	0x000d62ed
   da5d8:	000d6419 	.word	0x000d6419
   da5dc:	000d66a9 	.word	0x000d66a9
   da5e0:	000d69ad 	.word	0x000d69ad
   da5e4:	000d6a71 	.word	0x000d6a71
   da5e8:	000d6af5 	.word	0x000d6af5
   da5ec:	000d6b79 	.word	0x000d6b79
