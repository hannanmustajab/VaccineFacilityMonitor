
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/1.5.2/argon/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006520  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d0  2003e090  000da544  0001e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000590  2003e260  2003e260  0002e260  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000da714  000da714  0002a714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da73c  000da73c  0002a73c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000efe1c  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000122de  00000000  00000000  0011a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fef2  00000000  00000000  0012c83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027c8  00000000  00000000  0014c72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b70  00000000  00000000  0014eef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035576  00000000  00000000  00153a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bc73  00000000  00000000  00188fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010757d  00000000  00000000  001b4c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000de94  00000000  00000000  002bc1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbaf 	bl	d7794 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbb4 	bl	d77aa <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e090 	.word	0x2003e090
   d404c:	000da544 	.word	0x000da544
   d4050:	2003e260 	.word	0x2003e260
   d4054:	2003e260 	.word	0x2003e260
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fb51 	bl	d6704 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da540 	.word	0x000da540
   d4084:	000da504 	.word	0x000da504

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd06 	b.w	d4a98 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb31 	bl	d46f4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 baf7 	b.w	d6688 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b99f 	b.w	d53dc <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b9a5 	b.w	d53ec <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b9a3 	b.w	d53ec <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	4904      	ldr	r1, [pc, #16]	; (d40cc <_Z10measureNow6String+0x14>)
   d40bc:	f002 f89d 	bl	d61fa <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40c0:	b118      	cbz	r0, d40ca <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40c2:	4b03      	ldr	r3, [pc, #12]	; (d40d0 <_Z10measureNow6String+0x18>)
   d40c4:	2203      	movs	r2, #3
   d40c6:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c8:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	000d9ee8 	.word	0x000d9ee8
   d40d0:	2003e2c0 	.word	0x2003e2c0

000d40d4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d8:	6800      	ldr	r0, [r0, #0]
   d40da:	b108      	cbz	r0, d40e0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40dc:	f001 f986 	bl	d53ec <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}

000d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40ea:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ec:	f88d 3000 	strb.w	r3, [sp]
   d40f0:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f2:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f4:	f001 fb6c 	bl	d57d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40f8:	4628      	mov	r0, r5
   d40fa:	b003      	add	sp, #12
   d40fc:	bd30      	pop	{r4, r5, pc}
	...

000d4100 <_Z17connectToParticlev>:
  return 1;
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4100:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4104:	f001 f8da 	bl	d52bc <spark_cloud_flag_connect>
   d4108:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d410c:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4110:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4112:	2000      	movs	r0, #0
   d4114:	f000 ff4e 	bl	d4fb4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4118:	f04f 0900 	mov.w	r9, #0
   d411c:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d411e:	2000      	movs	r0, #0
   d4120:	f000 ff48 	bl	d4fb4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4124:	ebb0 0008 	subs.w	r0, r0, r8
   d4128:	eb61 0109 	sbc.w	r1, r1, r9
   d412c:	428f      	cmp	r7, r1
   d412e:	bf08      	it	eq
   d4130:	4286      	cmpeq	r6, r0
   d4132:	d305      	bcc.n	d4140 <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4134:	f001 f8ca 	bl	d52cc <spark_cloud_flag_connected>
   d4138:	b910      	cbnz	r0, d4140 <_Z17connectToParticlev+0x40>
            spark_process();
   d413a:	f001 f8b7 	bl	d52ac <spark_process>
   d413e:	e7ee      	b.n	d411e <_Z17connectToParticlev+0x1e>
   d4140:	f001 f8c4 	bl	d52cc <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4144:	b118      	cbz	r0, d414e <_Z17connectToParticlev+0x4e>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4146:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d414a:	f001 b8bf 	b.w	d52cc <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d414e:	f000 fef9 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4152:	4b03      	ldr	r3, [pc, #12]	; (d4160 <_Z17connectToParticlev+0x60>)
   d4154:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4156:	f001 f8a9 	bl	d52ac <spark_process>

// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d415a:	3c01      	subs	r4, #1
   d415c:	d0f3      	beq.n	d4146 <_Z17connectToParticlev+0x46>
   d415e:	e7d8      	b.n	d4112 <_Z17connectToParticlev+0x12>
   d4160:	2003e700 	.word	0x2003e700

000d4164 <_Z8BlinkLEDi>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
   d4164:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d4166:	b284      	uxth	r4, r0
   d4168:	2101      	movs	r1, #1
   d416a:	4620      	mov	r0, r4
   d416c:	f002 fb3d 	bl	d67ea <digitalWrite>
  delay(1000);
   d4170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4174:	f001 f96a 	bl	d544c <delay>
  digitalWrite(LED,LOW);
   d4178:	4620      	mov	r0, r4
   d417a:	2100      	movs	r1, #0
   d417c:	f002 fb35 	bl	d67ea <digitalWrite>
  delay(1000);
   d4180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
  digitalWrite(LED,HIGH);
  delay(1000);
  digitalWrite(LED,LOW);
  delay(1000);
   d4188:	f001 b960 	b.w	d544c <delay>

000d418c <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d418c:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d418e:	f000 fed9 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d4192:	4b04      	ldr	r3, [pc, #16]	; (d41a4 <_Z20meterParticlePublishv+0x18>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d4198:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d419c:	bf34      	ite	cc
   d419e:	2000      	movcc	r0, #0
   d41a0:	2001      	movcs	r0, #1
   d41a2:	bd08      	pop	{r3, pc}
   d41a4:	2003e350 	.word	0x2003e350

000d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d41a8:	b508      	push	{r3, lr}
}

int setLowerHumidityLimit(String value)
{
  sensor_data.lowerHumidityThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
   d41aa:	f7ff ffef 	bl	d418c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41ae:	b118      	cbz	r0, d41b8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d41b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41b4:	f7ff bfea 	b.w	d418c <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d41b8:	f001 f878 	bl	d52ac <spark_process>
   d41bc:	e7f5      	b.n	d41aa <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29+0x2>
	...

000d41c0 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d41c0:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d41c2:	4c15      	ldr	r4, [pc, #84]	; (d4218 <_Z20updateThresholdValuev+0x58>)
   d41c4:	6a20      	ldr	r0, [r4, #32]
   d41c6:	f002 fe4d 	bl	d6e64 <__aeabi_f2d>
   d41ca:	4a14      	ldr	r2, [pc, #80]	; (d421c <_Z20updateThresholdValuev+0x5c>)
   d41cc:	e9cd 0100 	strd	r0, r1, [sp]
   d41d0:	2118      	movs	r1, #24
   d41d2:	4813      	ldr	r0, [pc, #76]	; (d4220 <_Z20updateThresholdValuev+0x60>)
   d41d4:	f001 f922 	bl	d541c <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d41d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d41da:	f002 fe43 	bl	d6e64 <__aeabi_f2d>
   d41de:	4a11      	ldr	r2, [pc, #68]	; (d4224 <_Z20updateThresholdValuev+0x64>)
   d41e0:	e9cd 0100 	strd	r0, r1, [sp]
   d41e4:	2118      	movs	r1, #24
   d41e6:	4810      	ldr	r0, [pc, #64]	; (d4228 <_Z20updateThresholdValuev+0x68>)
   d41e8:	f001 f918 	bl	d541c <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d41ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d41ee:	f002 fe39 	bl	d6e64 <__aeabi_f2d>
   d41f2:	4a0e      	ldr	r2, [pc, #56]	; (d422c <_Z20updateThresholdValuev+0x6c>)
   d41f4:	e9cd 0100 	strd	r0, r1, [sp]
   d41f8:	2118      	movs	r1, #24
   d41fa:	480d      	ldr	r0, [pc, #52]	; (d4230 <_Z20updateThresholdValuev+0x70>)
   d41fc:	f001 f90e 	bl	d541c <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4200:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4202:	f002 fe2f 	bl	d6e64 <__aeabi_f2d>
   d4206:	4a0b      	ldr	r2, [pc, #44]	; (d4234 <_Z20updateThresholdValuev+0x74>)
   d4208:	e9cd 0100 	strd	r0, r1, [sp]
   d420c:	2118      	movs	r1, #24
   d420e:	480a      	ldr	r0, [pc, #40]	; (d4238 <_Z20updateThresholdValuev+0x78>)
   d4210:	f001 f904 	bl	d541c <snprintf>
} 
   d4214:	b002      	add	sp, #8
   d4216:	bd10      	pop	{r4, pc}
   d4218:	2003e2d8 	.word	0x2003e2d8
   d421c:	000d9bf0 	.word	0x000d9bf0
   d4220:	2003e328 	.word	0x2003e328
   d4224:	000d9c01 	.word	0x000d9c01
   d4228:	2003e354 	.word	0x2003e354
   d422c:	000d9c12 	.word	0x000d9c12
   d4230:	2003e2a8 	.word	0x2003e2a8
   d4234:	000d9c26 	.word	0x000d9c26
   d4238:	2003e264 	.word	0x2003e264

000d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d423c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d423e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4240:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4242:	b17c      	cbz	r4, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4244:	6863      	ldr	r3, [r4, #4]
   d4246:	3b01      	subs	r3, #1
   d4248:	6063      	str	r3, [r4, #4]
   d424a:	b95b      	cbnz	r3, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d424c:	6823      	ldr	r3, [r4, #0]
   d424e:	4620      	mov	r0, r4
   d4250:	689b      	ldr	r3, [r3, #8]
   d4252:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4254:	68a3      	ldr	r3, [r4, #8]
   d4256:	3b01      	subs	r3, #1
   d4258:	60a3      	str	r3, [r4, #8]
   d425a:	b91b      	cbnz	r3, d4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4620      	mov	r0, r4
   d4260:	68db      	ldr	r3, [r3, #12]
   d4262:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4264:	4628      	mov	r0, r5
   d4266:	bd38      	pop	{r3, r4, r5, pc}

000d4268 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d4268:	b530      	push	{r4, r5, lr}
   d426a:	2408      	movs	r4, #8
   d426c:	b0c7      	sub	sp, #284	; 0x11c
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d426e:	4d1f      	ldr	r5, [pc, #124]	; (d42ec <_Z9sendEventv+0x84>)
  char data[256];           
   for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4270:	f002 fad4 	bl	d681c <_Z21__fetch_global_EEPROMv>
   d4274:	4620      	mov	r0, r4
   d4276:	2230      	movs	r2, #48	; 0x30
   d4278:	4629      	mov	r1, r5
   d427a:	3464      	adds	r4, #100	; 0x64
   d427c:	f000 fe82 	bl	d4f84 <HAL_EEPROM_Get>
}

void sendEvent()
{
  char data[256];           
   for (int i = 0; i < 4; i++) {
   d4280:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d4284:	d1f3      	bne.n	d426e <_Z9sendEventv+0x6>
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }          
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d4286:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d428a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d428e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d4292:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4296:	e9cd 2300 	strd	r2, r3, [sp]
   d429a:	a806      	add	r0, sp, #24
   d429c:	4a14      	ldr	r2, [pc, #80]	; (d42f0 <_Z9sendEventv+0x88>)
  Particle.publish("storage-facility-hook", data, PRIVATE);
  currentCountTime = Time.now();
   d429e:	4c15      	ldr	r4, [pc, #84]	; (d42f4 <_Z9sendEventv+0x8c>)
{
  char data[256];           
   for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }          
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d42a0:	f001 f8bc 	bl	d541c <snprintf>
   d42a4:	4b14      	ldr	r3, [pc, #80]	; (d42f8 <_Z9sendEventv+0x90>)
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d42a6:	4915      	ldr	r1, [pc, #84]	; (d42fc <_Z9sendEventv+0x94>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42a8:	781b      	ldrb	r3, [r3, #0]
   d42aa:	2200      	movs	r2, #0
   d42ac:	f88d 2000 	strb.w	r2, [sp]
   d42b0:	a804      	add	r0, sp, #16
   d42b2:	aa06      	add	r2, sp, #24
   d42b4:	f7ff ff16 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42b8:	a805      	add	r0, sp, #20
   d42ba:	f7ff ffbf 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d42be:	f002 f857 	bl	d6370 <_ZN9TimeClass3nowEv>
   d42c2:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d42c4:	f002 faaa 	bl	d681c <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d42c8:	7821      	ldrb	r1, [r4, #0]
   d42ca:	2003      	movs	r0, #3
   d42cc:	f000 fe52 	bl	d4f74 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d42d0:	f002 f856 	bl	d6380 <_ZN9TimeClass4hourEv>
   d42d4:	4b0a      	ldr	r3, [pc, #40]	; (d4300 <_Z9sendEventv+0x98>)
   d42d6:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d42d8:	4b0a      	ldr	r3, [pc, #40]	; (d4304 <_Z9sendEventv+0x9c>)
   d42da:	2201      	movs	r2, #1
   d42dc:	701a      	strb	r2, [r3, #0]
   d42de:	f000 fe31 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d42e2:	4b09      	ldr	r3, [pc, #36]	; (d4308 <_Z9sendEventv+0xa0>)
   d42e4:	6018      	str	r0, [r3, #0]
}
   d42e6:	b047      	add	sp, #284	; 0x11c
   d42e8:	bd30      	pop	{r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e2d8 	.word	0x2003e2d8
   d42f0:	000d9c3b 	.word	0x000d9c3b
   d42f4:	2003e2a4 	.word	0x2003e2a4
   d42f8:	2003e291 	.word	0x2003e291
   d42fc:	000d9c63 	.word	0x000d9c63
   d4300:	2003e309 	.word	0x2003e309
   d4304:	2003e16c 	.word	0x2003e16c
   d4308:	2003e28c 	.word	0x2003e28c

000d430c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d430c:	b530      	push	{r4, r5, lr}
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d430e:	460c      	mov	r4, r1
  dataInFlight = true;                                                                      // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4310:	b085      	sub	sp, #20
   d4312:	4d1d      	ldr	r5, [pc, #116]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x7c>)
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4314:	b951      	cbnz	r1, d432c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
   d4316:	782b      	ldrb	r3, [r5, #0]
   d4318:	2b00      	cmp	r3, #0
   d431a:	d032      	beq.n	d4382 <_Z14UbidotsHandlerPKcS0_+0x76>
      waitUntil(meterParticlePublish);
   d431c:	f7ff ff44 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4320:	4b1a      	ldr	r3, [pc, #104]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4322:	4a1b      	ldr	r2, [pc, #108]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4324:	781b      	ldrb	r3, [r3, #0]
   d4326:	f88d 4000 	strb.w	r4, [sp]
   d432a:	e023      	b.n	d4374 <_Z14UbidotsHandlerPKcS0_+0x68>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d432c:	4608      	mov	r0, r1
   d432e:	f003 f922 	bl	d7576 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4332:	38c8      	subs	r0, #200	; 0xc8
   d4334:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
   d4336:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d4338:	d813      	bhi.n	d4362 <_Z14UbidotsHandlerPKcS0_+0x56>
  {
    if (verboseMode) {
   d433a:	b173      	cbz	r3, d435a <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(meterParticlePublish);
   d433c:	f7ff ff34 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4340:	4b12      	ldr	r3, [pc, #72]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("State", "Response Received", PRIVATE);
   d4342:	4914      	ldr	r1, [pc, #80]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4344:	781b      	ldrb	r3, [r3, #0]
   d4346:	2200      	movs	r2, #0
   d4348:	f88d 2000 	strb.w	r2, [sp]
   d434c:	a802      	add	r0, sp, #8
   d434e:	4a12      	ldr	r2, [pc, #72]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4350:	f7ff fec8 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4354:	a803      	add	r0, sp, #12
   d4356:	f7ff ff71 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    }
    dataInFlight = false;    
   d435a:	4b10      	ldr	r3, [pc, #64]	; (d439c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d435c:	2200      	movs	r2, #0
   d435e:	701a      	strb	r2, [r3, #0]
   d4360:	e00f      	b.n	d4382 <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else if (verboseMode) {
   d4362:	b173      	cbz	r3, d4382 <_Z14UbidotsHandlerPKcS0_+0x76>
    waitUntil(meterParticlePublish);      
   d4364:	f7ff ff20 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4368:	4b08      	ldr	r3, [pc, #32]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x80>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d436a:	2200      	movs	r2, #0
   d436c:	781b      	ldrb	r3, [r3, #0]
   d436e:	f88d 2000 	strb.w	r2, [sp]
   d4372:	4622      	mov	r2, r4
   d4374:	a802      	add	r0, sp, #8
   d4376:	490a      	ldr	r1, [pc, #40]	; (d43a0 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4378:	f7ff feb4 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d437c:	a803      	add	r0, sp, #12
   d437e:	f7ff ff5d 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

}
   d4382:	b005      	add	sp, #20
   d4384:	bd30      	pop	{r4, r5, pc}
   d4386:	bf00      	nop
   d4388:	2003e164 	.word	0x2003e164
   d438c:	2003e291 	.word	0x2003e291
   d4390:	000d9c79 	.word	0x000d9c79
   d4394:	000d9ca0 	.word	0x000d9ca0
   d4398:	000d9c8e 	.word	0x000d9c8e
   d439c:	2003e16c 	.word	0x2003e16c
   d43a0:	000d9c81 	.word	0x000d9c81

000d43a4 <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d43a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  // bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  
  sensor_data.validData = false;
   d43a6:	4c4c      	ldr	r4, [pc, #304]	; (d44d8 <_Z16takeMeasurementsv+0x134>)

  if (sht31.readTemperature()){
   d43a8:	484c      	ldr	r0, [pc, #304]	; (d44dc <_Z16takeMeasurementsv+0x138>)

}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d43aa:	b085      	sub	sp, #20

  // bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  
  sensor_data.validData = false;
   d43ac:	2500      	movs	r5, #0
   d43ae:	7025      	strb	r5, [r4, #0]

  if (sht31.readTemperature()){
   d43b0:	f000 fd6a 	bl	d4e88 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d43b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43bc:	d077      	beq.n	d44ae <_Z16takeMeasurementsv+0x10a>
    
    int reportCycle;                                                    // Where are we in the sense and report cycle
    currentCountTime = Time.now();
   d43be:	f001 ffd7 	bl	d6370 <_ZN9TimeClass3nowEv>
   d43c2:	4b47      	ldr	r3, [pc, #284]	; (d44e0 <_Z16takeMeasurementsv+0x13c>)
   d43c4:	6018      	str	r0, [r3, #0]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d43c6:	f001 ffe5 	bl	d6394 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d43ca:	280f      	cmp	r0, #15
   d43cc:	d009      	beq.n	d43e2 <_Z16takeMeasurementsv+0x3e>
   d43ce:	dd07      	ble.n	d43e0 <_Z16takeMeasurementsv+0x3c>
   d43d0:	281e      	cmp	r0, #30
   d43d2:	d003      	beq.n	d43dc <_Z16takeMeasurementsv+0x38>
   d43d4:	282d      	cmp	r0, #45	; 0x2d
   d43d6:	d103      	bne.n	d43e0 <_Z16takeMeasurementsv+0x3c>
        break;  
      case 30:
        reportCycle = 1;                                                // This is the second of the sample-only periods
        break; 
      case 45:
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d43d8:	2502      	movs	r5, #2
   d43da:	e002      	b.n	d43e2 <_Z16takeMeasurementsv+0x3e>
    switch (currentMinutes) {
      case 15:
        reportCycle = 0;                                                // This is the first of the sample-only periods
        break;  
      case 30:
        reportCycle = 1;                                                // This is the second of the sample-only periods
   d43dc:	2501      	movs	r5, #1
   d43de:	e000      	b.n	d43e2 <_Z16takeMeasurementsv+0x3e>
        break; 
      case 0:
        reportCycle = 3;                                                // This is the fourth of the sample-only periods
        break; 
      default:
        reportCycle = 3;  
   d43e0:	2503      	movs	r5, #3
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = sht31.readTemperature();
   d43e2:	483e      	ldr	r0, [pc, #248]	; (d44dc <_Z16takeMeasurementsv+0x138>)
   d43e4:	f000 fd50 	bl	d4e88 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43e8:	ee10 0a10 	vmov	r0, s0
   d43ec:	f002 fd3a 	bl	d6e64 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d43f0:	4a3c      	ldr	r2, [pc, #240]	; (d44e4 <_Z16takeMeasurementsv+0x140>)
      default:
        reportCycle = 3;  
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = sht31.readTemperature();
   d43f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d43f6:	e9cd 0100 	strd	r0, r1, [sp]
   d43fa:	2110      	movs	r1, #16
   d43fc:	483a      	ldr	r0, [pc, #232]	; (d44e8 <_Z16takeMeasurementsv+0x144>)
   d43fe:	f001 f80d 	bl	d541c <snprintf>

    sensor_data.relativeHumidity = sht31.readHumidity();
   d4402:	4836      	ldr	r0, [pc, #216]	; (d44dc <_Z16takeMeasurementsv+0x138>)
   d4404:	f000 fd4e 	bl	d4ea4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d4408:	ee10 0a10 	vmov	r0, s0
   d440c:	f002 fd2a 	bl	d6e64 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d4410:	4a36      	ldr	r2, [pc, #216]	; (d44ec <_Z16takeMeasurementsv+0x148>)
  }

    sensor_data.temperatureInC = sht31.readTemperature();
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);

    sensor_data.relativeHumidity = sht31.readHumidity();
   d4412:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d4416:	e9cd 0100 	strd	r0, r1, [sp]
   d441a:	2110      	movs	r1, #16
   d441c:	4834      	ldr	r0, [pc, #208]	; (d44f0 <_Z16takeMeasurementsv+0x14c>)
   d441e:	f000 fffd 	bl	d541c <snprintf>

  

    // If lower temperature threshold is crossed, Set the flag true. 
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d4422:	4b34      	ldr	r3, [pc, #208]	; (d44f4 <_Z16takeMeasurementsv+0x150>)
   d4424:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4426:	e9d3 6700 	ldrd	r6, r7, [r3]
   d442a:	f002 fd1b 	bl	d6e64 <__aeabi_f2d>
   d442e:	4632      	mov	r2, r6
   d4430:	463b      	mov	r3, r7
   d4432:	f002 fffb 	bl	d742c <__aeabi_dcmpgt>
   d4436:	b110      	cbz	r0, d443e <_Z16takeMeasurementsv+0x9a>
   d4438:	4b2f      	ldr	r3, [pc, #188]	; (d44f8 <_Z16takeMeasurementsv+0x154>)
   d443a:	2201      	movs	r2, #1
   d443c:	701a      	strb	r2, [r3, #0]

    // If upper temperature threshold is crossed, Set the flag true. 
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d443e:	6a20      	ldr	r0, [r4, #32]
   d4440:	f002 fd10 	bl	d6e64 <__aeabi_f2d>
   d4444:	4602      	mov	r2, r0
   d4446:	460b      	mov	r3, r1
   d4448:	4630      	mov	r0, r6
   d444a:	4639      	mov	r1, r7
   d444c:	f002 ffee 	bl	d742c <__aeabi_dcmpgt>
   d4450:	b110      	cbz	r0, d4458 <_Z16takeMeasurementsv+0xb4>
   d4452:	4b2a      	ldr	r3, [pc, #168]	; (d44fc <_Z16takeMeasurementsv+0x158>)
   d4454:	2201      	movs	r2, #1
   d4456:	701a      	strb	r2, [r3, #0]

    // If lower temperature threshold is crossed, Set the flag true. 
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d4458:	4b29      	ldr	r3, [pc, #164]	; (d4500 <_Z16takeMeasurementsv+0x15c>)
   d445a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d445c:	e9d3 6700 	ldrd	r6, r7, [r3]
   d4460:	f002 fd00 	bl	d6e64 <__aeabi_f2d>
   d4464:	4632      	mov	r2, r6
   d4466:	463b      	mov	r3, r7
   d4468:	f002 ffe0 	bl	d742c <__aeabi_dcmpgt>
   d446c:	b110      	cbz	r0, d4474 <_Z16takeMeasurementsv+0xd0>
   d446e:	4b25      	ldr	r3, [pc, #148]	; (d4504 <_Z16takeMeasurementsv+0x160>)
   d4470:	2201      	movs	r2, #1
   d4472:	701a      	strb	r2, [r3, #0]

    // If lower temperature threshold is crossed, Set the flag true. 
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4474:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4476:	f002 fcf5 	bl	d6e64 <__aeabi_f2d>
   d447a:	4602      	mov	r2, r0
   d447c:	460b      	mov	r3, r1
   d447e:	4630      	mov	r0, r6
   d4480:	4639      	mov	r1, r7
   d4482:	f002 ffd3 	bl	d742c <__aeabi_dcmpgt>
   d4486:	b110      	cbz	r0, d448e <_Z16takeMeasurementsv+0xea>
   d4488:	4b1f      	ldr	r3, [pc, #124]	; (d4508 <_Z16takeMeasurementsv+0x164>)
   d448a:	2201      	movs	r2, #1
   d448c:	701a      	strb	r2, [r3, #0]

    // Indicate that this is a valid data array and store it
    sensor_data.validData = true;
   d448e:	2601      	movs	r6, #1
   d4490:	7026      	strb	r6, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4492:	f001 ff6d 	bl	d6370 <_ZN9TimeClass3nowEv>
   d4496:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d4498:	f002 f9c0 	bl	d681c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d449c:	2064      	movs	r0, #100	; 0x64
   d449e:	4368      	muls	r0, r5
   d44a0:	3008      	adds	r0, #8
   d44a2:	2230      	movs	r2, #48	; 0x30
   d44a4:	490c      	ldr	r1, [pc, #48]	; (d44d8 <_Z16takeMeasurementsv+0x134>)
   d44a6:	f000 fd75 	bl	d4f94 <HAL_EEPROM_Put>
   d44aa:	4630      	mov	r0, r6
   d44ac:	e011      	b.n	d44d2 <_Z16takeMeasurementsv+0x12e>
   d44ae:	4b17      	ldr	r3, [pc, #92]	; (d450c <_Z16takeMeasurementsv+0x168>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d44b0:	4a17      	ldr	r2, [pc, #92]	; (d4510 <_Z16takeMeasurementsv+0x16c>)
   d44b2:	781b      	ldrb	r3, [r3, #0]
   d44b4:	4917      	ldr	r1, [pc, #92]	; (d4514 <_Z16takeMeasurementsv+0x170>)
   d44b6:	f88d 5000 	strb.w	r5, [sp]
   d44ba:	a802      	add	r0, sp, #8
   d44bc:	f7ff fe12 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d44c0:	a803      	add	r0, sp, #12
   d44c2:	f7ff febb 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
  }                                                                       // Take measurement from all the sensors
  else {
        Particle.publish("Log", "Failed to perform reading :(");
        Serial.println("Failed to take reading!");
   d44c6:	f002 f85d 	bl	d6584 <_Z16_fetch_usbserialv>
   d44ca:	4913      	ldr	r1, [pc, #76]	; (d4518 <_Z16takeMeasurementsv+0x174>)
   d44cc:	f001 fdd5 	bl	d607a <_ZN5Print7printlnEPKc>
        return 0;
   d44d0:	4628      	mov	r0, r5

  }
 
}
   d44d2:	b005      	add	sp, #20
   d44d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44d6:	bf00      	nop
   d44d8:	2003e2d8 	.word	0x2003e2d8
   d44dc:	2003e2c4 	.word	0x2003e2c4
   d44e0:	2003e2a4 	.word	0x2003e2a4
   d44e4:	000d9ca6 	.word	0x000d9ca6
   d44e8:	2003e27c 	.word	0x2003e27c
   d44ec:	000d9cae 	.word	0x000d9cae
   d44f0:	2003e340 	.word	0x2003e340
   d44f4:	2003e318 	.word	0x2003e318
   d44f8:	2003e320 	.word	0x2003e320
   d44fc:	2003e30a 	.word	0x2003e30a
   d4500:	2003e298 	.word	0x2003e298
   d4504:	2003e36c 	.word	0x2003e36c
   d4508:	2003e2d0 	.word	0x2003e2d0
   d450c:	2003e308 	.word	0x2003e308
   d4510:	000d9cb6 	.word	0x000d9cb6
   d4514:	000d9cd3 	.word	0x000d9cd3
   d4518:	000d9cd7 	.word	0x000d9cd7

000d451c <_Z16ThresholdCrossedv>:

// Function to send sms for threshold values

bool ThresholdCrossed(){
   d451c:	b530      	push	{r4, r5, lr}
  
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d451e:	4b2d      	ldr	r3, [pc, #180]	; (d45d4 <_Z16ThresholdCrossedv+0xb8>)
   d4520:	4c2d      	ldr	r4, [pc, #180]	; (d45d8 <_Z16ThresholdCrossedv+0xbc>)
   d4522:	781b      	ldrb	r3, [r3, #0]
 
}

// Function to send sms for threshold values

bool ThresholdCrossed(){
   d4524:	b08d      	sub	sp, #52	; 0x34
  
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4526:	b913      	cbnz	r3, d452e <_Z16ThresholdCrossedv+0x12>
   d4528:	4b2c      	ldr	r3, [pc, #176]	; (d45dc <_Z16ThresholdCrossedv+0xc0>)
   d452a:	781b      	ldrb	r3, [r3, #0]
   d452c:	b1eb      	cbz	r3, d456a <_Z16ThresholdCrossedv+0x4e>
    char data[32];
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d452e:	4b2c      	ldr	r3, [pc, #176]	; (d45e0 <_Z16ThresholdCrossedv+0xc4>)
   d4530:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4534:	2120      	movs	r1, #32
   d4536:	e9cd 2300 	strd	r2, r3, [sp]
   d453a:	a804      	add	r0, sp, #16
   d453c:	4a29      	ldr	r2, [pc, #164]	; (d45e4 <_Z16ThresholdCrossedv+0xc8>)
   d453e:	f000 ff6d 	bl	d541c <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d4542:	2005      	movs	r0, #5
   d4544:	f7ff fe0e 	bl	d4164 <_Z8BlinkLEDi>
    // snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Temperature Threshold Crossed. Current Temperature is: %4.1f",temperatureInC);
    // Particle.publish("sms-webhook",smsString,PRIVATE);                                            // Send the webhook . 
    waitUntil(meterParticlePublish);
   d4548:	f7ff fe2e 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d454c:	4b26      	ldr	r3, [pc, #152]	; (d45e8 <_Z16ThresholdCrossedv+0xcc>)
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d454e:	4927      	ldr	r1, [pc, #156]	; (d45ec <_Z16ThresholdCrossedv+0xd0>)
   d4550:	781b      	ldrb	r3, [r3, #0]
   d4552:	2200      	movs	r2, #0
   d4554:	f88d 2000 	strb.w	r2, [sp]
   d4558:	a802      	add	r0, sp, #8
   d455a:	aa04      	add	r2, sp, #16
   d455c:	f7ff fdc2 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4560:	a803      	add	r0, sp, #12
   d4562:	f7ff fe6b 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d4566:	2301      	movs	r3, #1
   d4568:	7023      	strb	r3, [r4, #0]
  }

  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d456a:	4b21      	ldr	r3, [pc, #132]	; (d45f0 <_Z16ThresholdCrossedv+0xd4>)
   d456c:	781a      	ldrb	r2, [r3, #0]
   d456e:	461d      	mov	r5, r3
   d4570:	b912      	cbnz	r2, d4578 <_Z16ThresholdCrossedv+0x5c>
   d4572:	4b20      	ldr	r3, [pc, #128]	; (d45f4 <_Z16ThresholdCrossedv+0xd8>)
   d4574:	781b      	ldrb	r3, [r3, #0]
   d4576:	b1eb      	cbz	r3, d45b4 <_Z16ThresholdCrossedv+0x98>
    
    char humidity_data[32];
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d4578:	4b1f      	ldr	r3, [pc, #124]	; (d45f8 <_Z16ThresholdCrossedv+0xdc>)
   d457a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d457e:	2120      	movs	r1, #32
   d4580:	e9cd 2300 	strd	r2, r3, [sp]
   d4584:	a804      	add	r0, sp, #16
   d4586:	4a1d      	ldr	r2, [pc, #116]	; (d45fc <_Z16ThresholdCrossedv+0xe0>)
   d4588:	f000 ff48 	bl	d541c <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d458c:	2007      	movs	r0, #7
   d458e:	f7ff fde9 	bl	d4164 <_Z8BlinkLEDi>
    // snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Humidity Threshold Crossed. Current Humidity is: %4.1f and Current Temperature is: %4.1f",temperatureInC,relativeHumidity);
    // Particle.publish("sms-webhook",smsString,PRIVATE);
    waitUntil(meterParticlePublish);
   d4592:	f7ff fe09 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4596:	4b14      	ldr	r3, [pc, #80]	; (d45e8 <_Z16ThresholdCrossedv+0xcc>)
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d4598:	4914      	ldr	r1, [pc, #80]	; (d45ec <_Z16ThresholdCrossedv+0xd0>)
   d459a:	781b      	ldrb	r3, [r3, #0]
   d459c:	2200      	movs	r2, #0
   d459e:	f88d 2000 	strb.w	r2, [sp]
   d45a2:	a802      	add	r0, sp, #8
   d45a4:	aa04      	add	r2, sp, #16
   d45a6:	f7ff fd9d 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d45aa:	a803      	add	r0, sp, #12
   d45ac:	f7ff fe46 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d45b0:	2301      	movs	r3, #1
   d45b2:	7023      	strb	r3, [r4, #0]
  }

  thresholdTimeStamp = Time.minute();
   d45b4:	f001 feee 	bl	d6394 <_ZN9TimeClass6minuteEv>
   d45b8:	4b11      	ldr	r3, [pc, #68]	; (d4600 <_Z16ThresholdCrossedv+0xe4>)
   d45ba:	6018      	str	r0, [r3, #0]

  if (thresholdCrossAcknowledged == true)
   d45bc:	7823      	ldrb	r3, [r4, #0]
   d45be:	b133      	cbz	r3, d45ce <_Z16ThresholdCrossedv+0xb2>
  {
    upperHumidityThresholdCrossed = false;
    lowerHumidityThresholdCrossed = false;
   d45c0:	4a0c      	ldr	r2, [pc, #48]	; (d45f4 <_Z16ThresholdCrossedv+0xd8>)

  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
   d45c2:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d45c4:	7013      	strb	r3, [r2, #0]

  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
   d45c6:	702b      	strb	r3, [r5, #0]
    lowerHumidityThresholdCrossed = false;
    upperTemperatureThreshold     = false;
   d45c8:	4b0e      	ldr	r3, [pc, #56]	; (d4604 <_Z16ThresholdCrossedv+0xe8>)
   d45ca:	2200      	movs	r2, #0
   d45cc:	601a      	str	r2, [r3, #0]
    lowerHumidityThresholdCrossed = false;
  }
  return 1;
}
   d45ce:	2001      	movs	r0, #1
   d45d0:	b00d      	add	sp, #52	; 0x34
   d45d2:	bd30      	pop	{r4, r5, pc}
   d45d4:	2003e320 	.word	0x2003e320
   d45d8:	2003e2a0 	.word	0x2003e2a0
   d45dc:	2003e30a 	.word	0x2003e30a
   d45e0:	2003e318 	.word	0x2003e318
   d45e4:	000d9cef 	.word	0x000d9cef
   d45e8:	2003e291 	.word	0x2003e291
   d45ec:	000d9d0b 	.word	0x000d9d0b
   d45f0:	2003e2d0 	.word	0x2003e2d0
   d45f4:	2003e36c 	.word	0x2003e36c
   d45f8:	2003e298 	.word	0x2003e298
   d45fc:	000d9d1c 	.word	0x000d9d1c
   d4600:	2003e2d4 	.word	0x2003e2d4
   d4604:	2003e168 	.word	0x2003e168

000d4608 <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4608:	b530      	push	{r4, r5, lr}
   d460a:	4913      	ldr	r1, [pc, #76]	; (d4658 <_Z14setVerboseMode6String+0x50>)
   d460c:	b085      	sub	sp, #20
   d460e:	4605      	mov	r5, r0
   d4610:	f001 fdf3 	bl	d61fa <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4614:	4604      	mov	r4, r0
   d4616:	b148      	cbz	r0, d462c <_Z14setVerboseMode6String+0x24>
  {
    verboseMode = true;
   d4618:	4b10      	ldr	r3, [pc, #64]	; (d465c <_Z14setVerboseMode6String+0x54>)
   d461a:	2401      	movs	r4, #1
   d461c:	701c      	strb	r4, [r3, #0]
   d461e:	4b10      	ldr	r3, [pc, #64]	; (d4660 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4620:	2200      	movs	r2, #0
   d4622:	781b      	ldrb	r3, [r3, #0]
   d4624:	f88d 2000 	strb.w	r2, [sp]
   d4628:	4a0e      	ldr	r2, [pc, #56]	; (d4664 <_Z14setVerboseMode6String+0x5c>)
   d462a:	e00b      	b.n	d4644 <_Z14setVerboseMode6String+0x3c>
   d462c:	490e      	ldr	r1, [pc, #56]	; (d4668 <_Z14setVerboseMode6String+0x60>)
   d462e:	4628      	mov	r0, r5
   d4630:	f001 fde3 	bl	d61fa <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4634:	b170      	cbz	r0, d4654 <_Z14setVerboseMode6String+0x4c>
  {
    verboseMode = false;
   d4636:	4b09      	ldr	r3, [pc, #36]	; (d465c <_Z14setVerboseMode6String+0x54>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4638:	4a0c      	ldr	r2, [pc, #48]	; (d466c <_Z14setVerboseMode6String+0x64>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d463a:	701c      	strb	r4, [r3, #0]
   d463c:	4b08      	ldr	r3, [pc, #32]	; (d4660 <_Z14setVerboseMode6String+0x58>)
   d463e:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4640:	f88d 4000 	strb.w	r4, [sp]
   d4644:	490a      	ldr	r1, [pc, #40]	; (d4670 <_Z14setVerboseMode6String+0x68>)
   d4646:	a802      	add	r0, sp, #8
   d4648:	f7ff fd4c 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d464c:	a803      	add	r0, sp, #12
   d464e:	f7ff fdf5 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4652:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4654:	b005      	add	sp, #20
   d4656:	bd30      	pop	{r4, r5, pc}
   d4658:	000d9ee8 	.word	0x000d9ee8
   d465c:	2003e164 	.word	0x2003e164
   d4660:	2003e291 	.word	0x2003e291
   d4664:	000d9d35 	.word	0x000d9d35
   d4668:	000d9d46 	.word	0x000d9d46
   d466c:	000d9d48 	.word	0x000d9d48
   d4670:	000d9d58 	.word	0x000d9d58

000d4674 <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
   d4674:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4676:	4d18      	ldr	r5, [pc, #96]	; (d46d8 <_Z22publishStateTransitionv+0x64>)
   d4678:	4c18      	ldr	r4, [pc, #96]	; (d46dc <_Z22publishStateTransitionv+0x68>)
   d467a:	4919      	ldr	r1, [pc, #100]	; (d46e0 <_Z22publishStateTransitionv+0x6c>)
   d467c:	782a      	ldrb	r2, [r5, #0]
   d467e:	7820      	ldrb	r0, [r4, #0]
  else return 0;
}


void publishStateTransition(void)
{
   d4680:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4682:	231a      	movs	r3, #26
   d4684:	fb03 1202 	mla	r2, r3, r2, r1
   d4688:	9200      	str	r2, [sp, #0]
   d468a:	fb03 1300 	mla	r3, r3, r0, r1
   d468e:	4a15      	ldr	r2, [pc, #84]	; (d46e4 <_Z22publishStateTransitionv+0x70>)
   d4690:	2128      	movs	r1, #40	; 0x28
   d4692:	a804      	add	r0, sp, #16
   d4694:	f000 fec2 	bl	d541c <snprintf>
  oldState = state;
   d4698:	782b      	ldrb	r3, [r5, #0]
   d469a:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d469c:	f000 fe16 	bl	d52cc <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d46a0:	b190      	cbz	r0, d46c8 <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
   d46a2:	f7ff fd81 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d46a6:	4b10      	ldr	r3, [pc, #64]	; (d46e8 <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d46a8:	4910      	ldr	r1, [pc, #64]	; (d46ec <_Z22publishStateTransitionv+0x78>)
   d46aa:	781b      	ldrb	r3, [r3, #0]
   d46ac:	2200      	movs	r2, #0
   d46ae:	f88d 2000 	strb.w	r2, [sp]
   d46b2:	a802      	add	r0, sp, #8
   d46b4:	aa04      	add	r2, sp, #16
   d46b6:	f7ff fd15 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d46ba:	a803      	add	r0, sp, #12
   d46bc:	f7ff fdbe 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46c0:	f000 fc40 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d46c4:	4b0a      	ldr	r3, [pc, #40]	; (d46f0 <_Z22publishStateTransitionv+0x7c>)
   d46c6:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
   d46c8:	f001 ff5c 	bl	d6584 <_Z16_fetch_usbserialv>
   d46cc:	a904      	add	r1, sp, #16
   d46ce:	f001 fcd4 	bl	d607a <_ZN5Print7printlnEPKc>
}
   d46d2:	b00f      	add	sp, #60	; 0x3c
   d46d4:	bd30      	pop	{r4, r5, pc}
   d46d6:	bf00      	nop
   d46d8:	2003e2c0 	.word	0x2003e2c0
   d46dc:	2003e290 	.word	0x2003e290
   d46e0:	2003e090 	.word	0x2003e090
   d46e4:	000d9d5d 	.word	0x000d9d5d
   d46e8:	2003e291 	.word	0x2003e291
   d46ec:	000d9d6b 	.word	0x000d9d6b
   d46f0:	2003e350 	.word	0x2003e350

000d46f4 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
   d46f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
   d46f6:	4c7b      	ldr	r4, [pc, #492]	; (d48e4 <loop+0x1f0>)
   d46f8:	7823      	ldrb	r3, [r4, #0]
   d46fa:	3b01      	subs	r3, #1
   d46fc:	2b05      	cmp	r3, #5
   d46fe:	f200 80ee 	bhi.w	d48de <loop+0x1ea>
   d4702:	e8df f003 	tbb	[pc, r3]
   d4706:	03a8      	.short	0x03a8
   d4708:	7a591c2d 	.word	0x7a591c2d
  
  case IDLE_STATE:
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   d470c:	4b76      	ldr	r3, [pc, #472]	; (d48e8 <loop+0x1f4>)
   d470e:	781b      	ldrb	r3, [r3, #0]
   d4710:	b12b      	cbz	r3, d471e <loop+0x2a>
   d4712:	4b76      	ldr	r3, [pc, #472]	; (d48ec <loop+0x1f8>)
   d4714:	781b      	ldrb	r3, [r3, #0]
   d4716:	2b02      	cmp	r3, #2
   d4718:	d001      	beq.n	d471e <loop+0x2a>
   d471a:	f7ff ffab 	bl	d4674 <_Z22publishStateTransitionv>
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d471e:	f001 fe2f 	bl	d6380 <_ZN9TimeClass4hourEv>
   d4722:	4b73      	ldr	r3, [pc, #460]	; (d48f0 <loop+0x1fc>)
   d4724:	4d73      	ldr	r5, [pc, #460]	; (d48f4 <loop+0x200>)
   d4726:	781b      	ldrb	r3, [r3, #0]
   d4728:	4298      	cmp	r0, r3
   d472a:	f040 80be 	bne.w	d48aa <loop+0x1b6>
   d472e:	f001 fe31 	bl	d6394 <_ZN9TimeClass6minuteEv>
   d4732:	682b      	ldr	r3, [r5, #0]
   d4734:	1ac0      	subs	r0, r0, r3
   d4736:	281d      	cmp	r0, #29
   d4738:	f300 80b7 	bgt.w	d48aa <loop+0x1b6>
   d473c:	e0ba      	b.n	d48b4 <loop+0x1c0>
      state = THRESHOLD_CROSSED;
    }
    break;

  case THRESHOLD_CROSSED:
    if (verboseMode && state != oldState) publishStateTransition();
   d473e:	4b6a      	ldr	r3, [pc, #424]	; (d48e8 <loop+0x1f4>)
   d4740:	781b      	ldrb	r3, [r3, #0]
   d4742:	b12b      	cbz	r3, d4750 <loop+0x5c>
   d4744:	4b69      	ldr	r3, [pc, #420]	; (d48ec <loop+0x1f8>)
   d4746:	781b      	ldrb	r3, [r3, #0]
   d4748:	2b04      	cmp	r3, #4
   d474a:	d001      	beq.n	d4750 <loop+0x5c>
   d474c:	f7ff ff92 	bl	d4674 <_Z22publishStateTransitionv>
    
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4750:	f7ff fe28 	bl	d43a4 <_Z16takeMeasurementsv>
   d4754:	b110      	cbz	r0, d475c <loop+0x68>
      ThresholdCrossed();
   d4756:	f7ff fee1 	bl	d451c <_Z16ThresholdCrossedv>
   d475a:	e05a      	b.n	d4812 <loop+0x11e>
      state = IDLE_STATE;
    }else
    {
      state= ERROR_STATE;
   d475c:	2301      	movs	r3, #1
   d475e:	e0bd      	b.n	d48dc <loop+0x1e8>
    }
    break;

  case MEASURING_STATE:                                                                     // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
   d4760:	4b61      	ldr	r3, [pc, #388]	; (d48e8 <loop+0x1f4>)
   d4762:	781a      	ldrb	r2, [r3, #0]
   d4764:	461d      	mov	r5, r3
   d4766:	b12a      	cbz	r2, d4774 <loop+0x80>
   d4768:	4b60      	ldr	r3, [pc, #384]	; (d48ec <loop+0x1f8>)
   d476a:	781b      	ldrb	r3, [r3, #0]
   d476c:	2b03      	cmp	r3, #3
   d476e:	d001      	beq.n	d4774 <loop+0x80>
   d4770:	f7ff ff80 	bl	d4674 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4774:	f7ff fe16 	bl	d43a4 <_Z16takeMeasurementsv>
   d4778:	4606      	mov	r6, r0
   d477a:	b9d8      	cbnz	r0, d47b4 <loop+0xc0>
    {
      state = ERROR_STATE;
   d477c:	2301      	movs	r3, #1
   d477e:	7023      	strb	r3, [r4, #0]
   d4780:	f000 fbe0 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4784:	4b5c      	ldr	r3, [pc, #368]	; (d48f8 <loop+0x204>)
   d4786:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4788:	782b      	ldrb	r3, [r5, #0]
   d478a:	2b00      	cmp	r3, #0
   d478c:	f000 80a7 	beq.w	d48de <loop+0x1ea>
        waitUntil(meterParticlePublish);
   d4790:	f7ff fd0a 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4794:	4b59      	ldr	r3, [pc, #356]	; (d48fc <loop+0x208>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4796:	4a5a      	ldr	r2, [pc, #360]	; (d4900 <loop+0x20c>)
   d4798:	781b      	ldrb	r3, [r3, #0]
   d479a:	495a      	ldr	r1, [pc, #360]	; (d4904 <loop+0x210>)
   d479c:	f88d 6000 	strb.w	r6, [sp]
   d47a0:	a802      	add	r0, sp, #8
   d47a2:	f7ff fc9f 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d47a6:	a803      	add	r0, sp, #12
   d47a8:	f7ff fd48 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47ac:	f000 fbca 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d47b0:	4b55      	ldr	r3, [pc, #340]	; (d4908 <loop+0x214>)
   d47b2:	e020      	b.n	d47f6 <loop+0x102>
      }
    }
    else state = REPORTING_STATE;
   d47b4:	2305      	movs	r3, #5
   d47b6:	e091      	b.n	d48dc <loop+0x1e8>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d47b8:	4b4b      	ldr	r3, [pc, #300]	; (d48e8 <loop+0x1f4>)
   d47ba:	781b      	ldrb	r3, [r3, #0]
   d47bc:	b12b      	cbz	r3, d47ca <loop+0xd6>
   d47be:	4b4b      	ldr	r3, [pc, #300]	; (d48ec <loop+0x1f8>)
   d47c0:	781b      	ldrb	r3, [r3, #0]
   d47c2:	2b05      	cmp	r3, #5
   d47c4:	d001      	beq.n	d47ca <loop+0xd6>
   d47c6:	f7ff ff55 	bl	d4674 <_Z22publishStateTransitionv>
   d47ca:	f000 fd7f 	bl	d52cc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d47ce:	b168      	cbz	r0, d47ec <loop+0xf8>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d47d0:	f001 fdd6 	bl	d6380 <_ZN9TimeClass4hourEv>
   d47d4:	280c      	cmp	r0, #12
   d47d6:	d105      	bne.n	d47e4 <loop+0xf0>
   d47d8:	f000 fd78 	bl	d52cc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d47dc:	b110      	cbz	r0, d47e4 <loop+0xf0>
            return false;
        }
        return spark_sync_time(NULL);
   d47de:	2000      	movs	r0, #0
   d47e0:	f000 fd94 	bl	d530c <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d47e4:	f7ff fd40 	bl	d4268 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d47e8:	2306      	movs	r3, #6
   d47ea:	e077      	b.n	d48dc <loop+0x1e8>
    }
    else {
      state = ERROR_STATE;
   d47ec:	2301      	movs	r3, #1
   d47ee:	7023      	strb	r3, [r4, #0]
   d47f0:	f000 fba8 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d47f4:	4b40      	ldr	r3, [pc, #256]	; (d48f8 <loop+0x204>)
   d47f6:	6018      	str	r0, [r3, #0]
   d47f8:	e071      	b.n	d48de <loop+0x1ea>
    }
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d47fa:	4b3b      	ldr	r3, [pc, #236]	; (d48e8 <loop+0x1f4>)
   d47fc:	781b      	ldrb	r3, [r3, #0]
   d47fe:	b12b      	cbz	r3, d480c <loop+0x118>
   d4800:	4b3a      	ldr	r3, [pc, #232]	; (d48ec <loop+0x1f8>)
   d4802:	781b      	ldrb	r3, [r3, #0]
   d4804:	2b06      	cmp	r3, #6
   d4806:	d001      	beq.n	d480c <loop+0x118>
   d4808:	f7ff ff34 	bl	d4674 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d480c:	4b3f      	ldr	r3, [pc, #252]	; (d490c <loop+0x218>)
   d480e:	781b      	ldrb	r3, [r3, #0]
   d4810:	b90b      	cbnz	r3, d4816 <loop+0x122>
    {
     state = IDLE_STATE;
   d4812:	2302      	movs	r3, #2
   d4814:	e062      	b.n	d48dc <loop+0x1e8>
   d4816:	f000 fb95 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d481a:	4b3d      	ldr	r3, [pc, #244]	; (d4910 <loop+0x21c>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	1ac0      	subs	r0, r0, r3
   d4820:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4824:	4298      	cmp	r0, r3
   d4826:	d95a      	bls.n	d48de <loop+0x1ea>
   d4828:	f000 fb8c 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d482c:	4d32      	ldr	r5, [pc, #200]	; (d48f8 <loop+0x204>)
   d482e:	4b33      	ldr	r3, [pc, #204]	; (d48fc <loop+0x208>)
   d4830:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4832:	2200      	movs	r2, #0
   d4834:	781b      	ldrb	r3, [r3, #0]
   d4836:	4937      	ldr	r1, [pc, #220]	; (d4914 <loop+0x220>)
   d4838:	f88d 2000 	strb.w	r2, [sp]
   d483c:	a802      	add	r0, sp, #8
   d483e:	4a36      	ldr	r2, [pc, #216]	; (d4918 <loop+0x224>)
   d4840:	f7ff fc50 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4844:	a803      	add	r0, sp, #12
   d4846:	f7ff fcf9 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d484a:	2301      	movs	r3, #1
   d484c:	7023      	strb	r3, [r4, #0]
   d484e:	f000 fb79 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4852:	6028      	str	r0, [r5, #0]
   d4854:	e043      	b.n	d48de <loop+0x1ea>
    }
    break;

  
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d4856:	4b24      	ldr	r3, [pc, #144]	; (d48e8 <loop+0x1f4>)
   d4858:	781b      	ldrb	r3, [r3, #0]
   d485a:	b12b      	cbz	r3, d4868 <loop+0x174>
   d485c:	4b23      	ldr	r3, [pc, #140]	; (d48ec <loop+0x1f8>)
   d485e:	781b      	ldrb	r3, [r3, #0]
   d4860:	2b01      	cmp	r3, #1
   d4862:	d001      	beq.n	d4868 <loop+0x174>
   d4864:	f7ff ff06 	bl	d4674 <_Z22publishStateTransitionv>
   d4868:	f000 fb6c 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d486c:	4b22      	ldr	r3, [pc, #136]	; (d48f8 <loop+0x204>)
   d486e:	681b      	ldr	r3, [r3, #0]
   d4870:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4874:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4878:	4298      	cmp	r0, r3
   d487a:	d930      	bls.n	d48de <loop+0x1ea>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d487c:	f000 fd26 	bl	d52cc <spark_cloud_flag_connected>
    {
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4880:	b160      	cbz	r0, d489c <loop+0x1a8>
   d4882:	4b1e      	ldr	r3, [pc, #120]	; (d48fc <loop+0x208>)
   d4884:	491f      	ldr	r1, [pc, #124]	; (d4904 <loop+0x210>)
   d4886:	781b      	ldrb	r3, [r3, #0]
   d4888:	2200      	movs	r2, #0
   d488a:	f88d 2000 	strb.w	r2, [sp]
   d488e:	a802      	add	r0, sp, #8
   d4890:	4a22      	ldr	r2, [pc, #136]	; (d491c <loop+0x228>)
   d4892:	f7ff fc27 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4896:	a803      	add	r0, sp, #12
   d4898:	f7ff fcd0 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d489c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d48a0:	f000 fdd4 	bl	d544c <delay>
      System.reset();
   d48a4:	f001 fce6 	bl	d6274 <_ZN11SystemClass5resetEv>
    }
    break;
  }
}
   d48a8:	e019      	b.n	d48de <loop+0x1ea>
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
      TimePassed = Time.minute();
   d48aa:	f001 fd73 	bl	d6394 <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d48ae:	2303      	movs	r3, #3
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
      TimePassed = Time.minute();
   d48b0:	6028      	str	r0, [r5, #0]
   d48b2:	e013      	b.n	d48dc <loop+0x1e8>
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
    || upperHumidityThresholdCrossed \
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d48b4:	4b1a      	ldr	r3, [pc, #104]	; (d4920 <loop+0x22c>)
   d48b6:	781b      	ldrb	r3, [r3, #0]
   d48b8:	b943      	cbnz	r3, d48cc <loop+0x1d8>
      TimePassed = Time.minute();
      state = MEASURING_STATE;                                                     
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
   d48ba:	4b1a      	ldr	r3, [pc, #104]	; (d4924 <loop+0x230>)
   d48bc:	781b      	ldrb	r3, [r3, #0]
   d48be:	b92b      	cbnz	r3, d48cc <loop+0x1d8>
    || upperHumidityThresholdCrossed \
   d48c0:	4b19      	ldr	r3, [pc, #100]	; (d4928 <loop+0x234>)
   d48c2:	781b      	ldrb	r3, [r3, #0]
   d48c4:	b913      	cbnz	r3, d48cc <loop+0x1d8>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d48c6:	4b19      	ldr	r3, [pc, #100]	; (d492c <loop+0x238>)
   d48c8:	781b      	ldrb	r3, [r3, #0]
   d48ca:	b143      	cbz	r3, d48de <loop+0x1ea>
   d48cc:	f001 fd62 	bl	d6394 <_ZN9TimeClass6minuteEv>
   d48d0:	4b17      	ldr	r3, [pc, #92]	; (d4930 <loop+0x23c>)
   d48d2:	681b      	ldr	r3, [r3, #0]
   d48d4:	1ac0      	subs	r0, r0, r3
   d48d6:	2805      	cmp	r0, #5
   d48d8:	dd01      	ble.n	d48de <loop+0x1ea>
    {
     
      state = THRESHOLD_CROSSED;
   d48da:	2304      	movs	r3, #4
   d48dc:	7023      	strb	r3, [r4, #0]
      delay(2000);
      System.reset();
    }
    break;
  }
}
   d48de:	b004      	add	sp, #16
   d48e0:	bd70      	pop	{r4, r5, r6, pc}
   d48e2:	bf00      	nop
   d48e4:	2003e2c0 	.word	0x2003e2c0
   d48e8:	2003e164 	.word	0x2003e164
   d48ec:	2003e290 	.word	0x2003e290
   d48f0:	2003e309 	.word	0x2003e309
   d48f4:	2003e294 	.word	0x2003e294
   d48f8:	2003e324 	.word	0x2003e324
   d48fc:	2003e291 	.word	0x2003e291
   d4900:	000d9d7c 	.word	0x000d9d7c
   d4904:	000d9ca0 	.word	0x000d9ca0
   d4908:	2003e350 	.word	0x2003e350
   d490c:	2003e16c 	.word	0x2003e16c
   d4910:	2003e28c 	.word	0x2003e28c
   d4914:	000d9d96 	.word	0x000d9d96
   d4918:	000da03f 	.word	0x000da03f
   d491c:	000d9daf 	.word	0x000d9daf
   d4920:	2003e30a 	.word	0x2003e30a
   d4924:	2003e320 	.word	0x2003e320
   d4928:	2003e2d0 	.word	0x2003e2d0
   d492c:	2003e36c 	.word	0x2003e36c
   d4930:	2003e2d4 	.word	0x2003e2d4

000d4934 <_Z17setUpperTempLimit6String>:
}

// These function will allow to change the upper and lower limits for alerting the customer. 

int setUpperTempLimit(String value)
{
   d4934:	b510      	push	{r4, lr}
   d4936:	b088      	sub	sp, #32
   d4938:	4604      	mov	r4, r0
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d493a:	f001 fc88 	bl	d624e <_ZNK6String7toFloatEv>
   d493e:	4b0f      	ldr	r3, [pc, #60]	; (d497c <_Z17setUpperTempLimit6String+0x48>)
   d4940:	ed83 0a08 	vstr	s0, [r3, #32]
  waitUntil(meterParticlePublish);
   d4944:	f7ff fc30 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4948:	4621      	mov	r1, r4
   d494a:	a804      	add	r0, sp, #16
   d494c:	f001 fc4a 	bl	d61e4 <_ZN6StringC1ERKS_>
   d4950:	4b0b      	ldr	r3, [pc, #44]	; (d4980 <_Z17setUpperTempLimit6String+0x4c>)
   d4952:	490c      	ldr	r1, [pc, #48]	; (d4984 <_Z17setUpperTempLimit6String+0x50>)
   d4954:	781b      	ldrb	r3, [r3, #0]
   d4956:	2200      	movs	r2, #0
   d4958:	f88d 2000 	strb.w	r2, [sp]
   d495c:	a802      	add	r0, sp, #8
   d495e:	9a04      	ldr	r2, [sp, #16]
   d4960:	f7ff fbc0 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4964:	a803      	add	r0, sp, #12
   d4966:	f7ff fc69 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d496a:	a804      	add	r0, sp, #16
   d496c:	f001 fbd1 	bl	d6112 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4970:	f7ff fc26 	bl	d41c0 <_Z20updateThresholdValuev>
  return 1;
}
   d4974:	2001      	movs	r0, #1
   d4976:	b008      	add	sp, #32
   d4978:	bd10      	pop	{r4, pc}
   d497a:	bf00      	nop
   d497c:	2003e2d8 	.word	0x2003e2d8
   d4980:	2003e291 	.word	0x2003e291
   d4984:	000d9dc3 	.word	0x000d9dc3

000d4988 <_Z17setLowerTempLimit6String>:

int setLowerTempLimit(String value)
{
   d4988:	b510      	push	{r4, lr}
   d498a:	b088      	sub	sp, #32
   d498c:	4604      	mov	r4, r0
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d498e:	f001 fc5e 	bl	d624e <_ZNK6String7toFloatEv>
   d4992:	4b0f      	ldr	r3, [pc, #60]	; (d49d0 <_Z17setLowerTempLimit6String+0x48>)
   d4994:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  waitUntil(meterParticlePublish);
   d4998:	f7ff fc06 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d499c:	4621      	mov	r1, r4
   d499e:	a804      	add	r0, sp, #16
   d49a0:	f001 fc20 	bl	d61e4 <_ZN6StringC1ERKS_>
   d49a4:	4b0b      	ldr	r3, [pc, #44]	; (d49d4 <_Z17setLowerTempLimit6String+0x4c>)
   d49a6:	490c      	ldr	r1, [pc, #48]	; (d49d8 <_Z17setLowerTempLimit6String+0x50>)
   d49a8:	781b      	ldrb	r3, [r3, #0]
   d49aa:	2200      	movs	r2, #0
   d49ac:	f88d 2000 	strb.w	r2, [sp]
   d49b0:	a802      	add	r0, sp, #8
   d49b2:	9a04      	ldr	r2, [sp, #16]
   d49b4:	f7ff fb96 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d49b8:	a803      	add	r0, sp, #12
   d49ba:	f7ff fc3f 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49be:	a804      	add	r0, sp, #16
   d49c0:	f001 fba7 	bl	d6112 <_ZN6StringD1Ev>
  updateThresholdValue();
   d49c4:	f7ff fbfc 	bl	d41c0 <_Z20updateThresholdValuev>

  return 1;

}
   d49c8:	2001      	movs	r0, #1
   d49ca:	b008      	add	sp, #32
   d49cc:	bd10      	pop	{r4, pc}
   d49ce:	bf00      	nop
   d49d0:	2003e2d8 	.word	0x2003e2d8
   d49d4:	2003e291 	.word	0x2003e291
   d49d8:	000d9dd7 	.word	0x000d9dd7

000d49dc <_Z21setUpperHumidityLimit6String>:

int setUpperHumidityLimit(String value)
{
   d49dc:	b510      	push	{r4, lr}
   d49de:	b088      	sub	sp, #32
   d49e0:	4604      	mov	r4, r0
  sensor_data.upperHumidityThreshold = value.toFloat();
   d49e2:	f001 fc34 	bl	d624e <_ZNK6String7toFloatEv>
   d49e6:	4b0f      	ldr	r3, [pc, #60]	; (d4a24 <_Z21setUpperHumidityLimit6String+0x48>)
   d49e8:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
  waitUntil(meterParticlePublish);
   d49ec:	f7ff fbdc 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d49f0:	4621      	mov	r1, r4
   d49f2:	a804      	add	r0, sp, #16
   d49f4:	f001 fbf6 	bl	d61e4 <_ZN6StringC1ERKS_>
   d49f8:	4b0b      	ldr	r3, [pc, #44]	; (d4a28 <_Z21setUpperHumidityLimit6String+0x4c>)
   d49fa:	490c      	ldr	r1, [pc, #48]	; (d4a2c <_Z21setUpperHumidityLimit6String+0x50>)
   d49fc:	781b      	ldrb	r3, [r3, #0]
   d49fe:	2200      	movs	r2, #0
   d4a00:	f88d 2000 	strb.w	r2, [sp]
   d4a04:	a802      	add	r0, sp, #8
   d4a06:	9a04      	ldr	r2, [sp, #16]
   d4a08:	f7ff fb6c 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4a0c:	a803      	add	r0, sp, #12
   d4a0e:	f7ff fc15 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a12:	a804      	add	r0, sp, #16
   d4a14:	f001 fb7d 	bl	d6112 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4a18:	f7ff fbd2 	bl	d41c0 <_Z20updateThresholdValuev>

  return 1;
}
   d4a1c:	2001      	movs	r0, #1
   d4a1e:	b008      	add	sp, #32
   d4a20:	bd10      	pop	{r4, pc}
   d4a22:	bf00      	nop
   d4a24:	2003e2d8 	.word	0x2003e2d8
   d4a28:	2003e291 	.word	0x2003e291
   d4a2c:	000d9dc3 	.word	0x000d9dc3

000d4a30 <_Z21setLowerHumidityLimit6String>:

int setLowerHumidityLimit(String value)
{
   d4a30:	b510      	push	{r4, lr}
   d4a32:	b088      	sub	sp, #32
   d4a34:	4604      	mov	r4, r0
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4a36:	f001 fc0a 	bl	d624e <_ZNK6String7toFloatEv>
   d4a3a:	4b0f      	ldr	r3, [pc, #60]	; (d4a78 <_Z21setLowerHumidityLimit6String+0x48>)
   d4a3c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
  waitUntil(meterParticlePublish);
   d4a40:	f7ff fbb2 	bl	d41a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4a44:	4621      	mov	r1, r4
   d4a46:	a804      	add	r0, sp, #16
   d4a48:	f001 fbcc 	bl	d61e4 <_ZN6StringC1ERKS_>
   d4a4c:	4b0b      	ldr	r3, [pc, #44]	; (d4a7c <_Z21setLowerHumidityLimit6String+0x4c>)
   d4a4e:	490c      	ldr	r1, [pc, #48]	; (d4a80 <_Z21setLowerHumidityLimit6String+0x50>)
   d4a50:	781b      	ldrb	r3, [r3, #0]
   d4a52:	2200      	movs	r2, #0
   d4a54:	f88d 2000 	strb.w	r2, [sp]
   d4a58:	a802      	add	r0, sp, #8
   d4a5a:	9a04      	ldr	r2, [sp, #16]
   d4a5c:	f7ff fb42 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4a60:	a803      	add	r0, sp, #12
   d4a62:	f7ff fbeb 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a66:	a804      	add	r0, sp, #16
   d4a68:	f001 fb53 	bl	d6112 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4a6c:	f7ff fba8 	bl	d41c0 <_Z20updateThresholdValuev>
  return 1;
}
   d4a70:	2001      	movs	r0, #1
   d4a72:	b008      	add	sp, #32
   d4a74:	bd10      	pop	{r4, pc}
   d4a76:	bf00      	nop
   d4a78:	2003e2d8 	.word	0x2003e2d8
   d4a7c:	2003e291 	.word	0x2003e291
   d4a80:	000d9dd7 	.word	0x000d9dd7

000d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4a84:	2300      	movs	r3, #0
   d4a86:	2204      	movs	r2, #4
   d4a88:	f000 bc00 	b.w	d528c <spark_variable>

000d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4a8c:	4602      	mov	r2, r0
   d4a8e:	4801      	ldr	r0, [pc, #4]	; (d4a94 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4a90:	f000 bd7d 	b.w	d558e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4a94:	000d5563 	.word	0x000d5563

000d4a98 <setup>:

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()                                                                                // Note: Disconnected Setup()
{
   d4a98:	b570      	push	{r4, r5, r6, lr}
   d4a9a:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(115200);
   d4a9c:	f001 fd72 	bl	d6584 <_Z16_fetch_usbserialv>
   d4aa0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4aa4:	f001 fd62 	bl	d656c <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d4aa8:	f001 fd6c 	bl	d6584 <_Z16_fetch_usbserialv>
   d4aac:	4957      	ldr	r1, [pc, #348]	; (d4c0c <setup+0x174>)
   d4aae:	f001 fae4 	bl	d607a <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4ab2:	4b57      	ldr	r3, [pc, #348]	; (d4c10 <setup+0x178>)
   d4ab4:	aa08      	add	r2, sp, #32
   d4ab6:	f103 0510 	add.w	r5, r3, #16
   d4aba:	4616      	mov	r6, r2
   d4abc:	6818      	ldr	r0, [r3, #0]
   d4abe:	6859      	ldr	r1, [r3, #4]
   d4ac0:	4614      	mov	r4, r2
   d4ac2:	c403      	stmia	r4!, {r0, r1}
   d4ac4:	3308      	adds	r3, #8
   d4ac6:	42ab      	cmp	r3, r5
   d4ac8:	4622      	mov	r2, r4
   d4aca:	d1f7      	bne.n	d4abc <setup+0x24>
   d4acc:	8819      	ldrh	r1, [r3, #0]
   d4ace:	789b      	ldrb	r3, [r3, #2]
   d4ad0:	8021      	strh	r1, [r4, #0]
   d4ad2:	222d      	movs	r2, #45	; 0x2d
   d4ad4:	70a3      	strb	r3, [r4, #2]
   d4ad6:	2100      	movs	r1, #0
   d4ad8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  state = IDLE_STATE;
   d4adc:	4c4d      	ldr	r4, [pc, #308]	; (d4c14 <setup+0x17c>)

void setup()                                                                                // Note: Disconnected Setup()
{
  Serial.begin(115200);
  Serial.println("SHT31 test");
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4ade:	f002 fe64 	bl	d77aa <memset>
  state = IDLE_STATE;
   d4ae2:	2302      	movs	r3, #2

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4ae4:	2101      	movs	r1, #1
   d4ae6:	2007      	movs	r0, #7
void setup()                                                                                // Note: Disconnected Setup()
{
  Serial.begin(115200);
  Serial.println("SHT31 test");
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
  state = IDLE_STATE;
   d4ae8:	7023      	strb	r3, [r4, #0]

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4aea:	f001 fe6d 	bl	d67c8 <pinMode>
  pinMode(tempLED,OUTPUT);
   d4aee:	2101      	movs	r1, #1
   d4af0:	2005      	movs	r0, #5
   d4af2:	f001 fe69 	bl	d67c8 <pinMode>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4af6:	a804      	add	r0, sp, #16
   d4af8:	f000 fbf0 	bl	d52dc <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4afc:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4afe:	2300      	movs	r3, #0
   d4b00:	227d      	movs	r2, #125	; 0x7d
   d4b02:	a918      	add	r1, sp, #96	; 0x60
   d4b04:	a804      	add	r0, sp, #16
   d4b06:	f001 fb8a 	bl	d621e <_ZNK6String8getBytesEPhjj>
   d4b0a:	462b      	mov	r3, r5
   d4b0c:	462a      	mov	r2, r5
   d4b0e:	4942      	ldr	r1, [pc, #264]	; (d4c18 <setup+0x180>)
   d4b10:	9501      	str	r5, [sp, #4]
   d4b12:	9500      	str	r5, [sp, #0]
   d4b14:	a818      	add	r0, sp, #96	; 0x60
   d4b16:	f000 fbf1 	bl	d52fc <spark_subscribe>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4b1a:	4940      	ldr	r1, [pc, #256]	; (d4c1c <setup+0x184>)
   d4b1c:	4840      	ldr	r0, [pc, #256]	; (d4c20 <setup+0x188>)
   d4b1e:	6809      	ldr	r1, [r1, #0]
   d4b20:	462b      	mov	r3, r5
   d4b22:	2204      	movs	r2, #4
   d4b24:	f000 fbb2 	bl	d528c <spark_variable>
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
       
  Particle.variable("Release",releaseNumber);
  Particle.variable("temperature", temperatureString);
   d4b28:	493e      	ldr	r1, [pc, #248]	; (d4c24 <setup+0x18c>)
   d4b2a:	483f      	ldr	r0, [pc, #252]	; (d4c28 <setup+0x190>)
   d4b2c:	f7ff ffaa 	bl	d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("humidity", humidityString);
   d4b30:	493e      	ldr	r1, [pc, #248]	; (d4c2c <setup+0x194>)
   d4b32:	483f      	ldr	r0, [pc, #252]	; (d4c30 <setup+0x198>)
   d4b34:	f7ff ffa6 	bl	d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("temperature-Upper",upperTemperatureThresholdString);
   d4b38:	493e      	ldr	r1, [pc, #248]	; (d4c34 <setup+0x19c>)
   d4b3a:	483f      	ldr	r0, [pc, #252]	; (d4c38 <setup+0x1a0>)
   d4b3c:	f7ff ffa2 	bl	d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("temperature-lower",lowerTemperatureThresholdString);
   d4b40:	493e      	ldr	r1, [pc, #248]	; (d4c3c <setup+0x1a4>)
   d4b42:	483f      	ldr	r0, [pc, #252]	; (d4c40 <setup+0x1a8>)
   d4b44:	f7ff ff9e 	bl	d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("humidity-upper",upperHumidityThresholdString);
   d4b48:	493e      	ldr	r1, [pc, #248]	; (d4c44 <setup+0x1ac>)
   d4b4a:	483f      	ldr	r0, [pc, #252]	; (d4c48 <setup+0x1b0>)
   d4b4c:	f7ff ff9a 	bl	d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("humidity-lower",lowerHumidityThresholdString);
   d4b50:	493e      	ldr	r1, [pc, #248]	; (d4c4c <setup+0x1b4>)
   d4b52:	483f      	ldr	r0, [pc, #252]	; (d4c50 <setup+0x1b8>)
   d4b54:	f7ff ff96 	bl	d4a84 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  
  Particle.function("Measure-Now",measureNow);
   d4b58:	493e      	ldr	r1, [pc, #248]	; (d4c54 <setup+0x1bc>)
   d4b5a:	483f      	ldr	r0, [pc, #252]	; (d4c58 <setup+0x1c0>)
   d4b5c:	f7ff ff96 	bl	d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d4b60:	493e      	ldr	r1, [pc, #248]	; (d4c5c <setup+0x1c4>)
   d4b62:	483f      	ldr	r0, [pc, #252]	; (d4c60 <setup+0x1c8>)
   d4b64:	f7ff ff92 	bl	d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Upper-Limit",setUpperTempLimit);
   d4b68:	493e      	ldr	r1, [pc, #248]	; (d4c64 <setup+0x1cc>)
   d4b6a:	483f      	ldr	r0, [pc, #252]	; (d4c68 <setup+0x1d0>)
   d4b6c:	f7ff ff8e 	bl	d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Lower-Limit",setLowerTempLimit);
   d4b70:	493e      	ldr	r1, [pc, #248]	; (d4c6c <setup+0x1d4>)
   d4b72:	483f      	ldr	r0, [pc, #252]	; (d4c70 <setup+0x1d8>)
   d4b74:	f7ff ff8a 	bl	d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidity-Lower-Limit",setLowerHumidityLimit);
   d4b78:	493e      	ldr	r1, [pc, #248]	; (d4c74 <setup+0x1dc>)
   d4b7a:	483f      	ldr	r0, [pc, #252]	; (d4c78 <setup+0x1e0>)
   d4b7c:	f7ff ff86 	bl	d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidty-upper-Limit",setUpperHumidityLimit);
   d4b80:	493e      	ldr	r1, [pc, #248]	; (d4c7c <setup+0x1e4>)
   d4b82:	483f      	ldr	r0, [pc, #252]	; (d4c80 <setup+0x1e8>)
   d4b84:	f7ff ff82 	bl	d4a8c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>

  // And set the flags from the control register
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d4b88:	2144      	movs	r1, #68	; 0x44
   d4b8a:	483e      	ldr	r0, [pc, #248]	; (d4c84 <setup+0x1ec>)
   d4b8c:	f000 f8e5 	bl	d4d5a <_ZN14Adafruit_SHT315beginEh>
   d4b90:	b988      	cbnz	r0, d4bb6 <setup+0x11e>
   d4b92:	f000 f9d7 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4b96:	4d3c      	ldr	r5, [pc, #240]	; (d4c88 <setup+0x1f0>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4b98:	493c      	ldr	r1, [pc, #240]	; (d4c8c <setup+0x1f4>)

  // And set the flags from the control register
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
    resetTimeStamp = millis();
   d4b9a:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4b9c:	4630      	mov	r0, r6
   d4b9e:	f002 fe3f 	bl	d7820 <strcpy>
    Serial.println("Couldn't find SHT31");
   d4ba2:	f001 fcef 	bl	d6584 <_Z16_fetch_usbserialv>
   d4ba6:	493a      	ldr	r1, [pc, #232]	; (d4c90 <setup+0x1f8>)
   d4ba8:	f001 fa67 	bl	d607a <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d4bac:	2301      	movs	r3, #1
   d4bae:	7023      	strb	r3, [r4, #0]
   d4bb0:	f000 f9c8 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4bb4:	6028      	str	r0, [r5, #0]
  }

  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d4bb6:	f7ff fbf5 	bl	d43a4 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d4bba:	f7ff fb01 	bl	d41c0 <_Z20updateThresholdValuev>
 
  if(!connectToParticle()) {
   d4bbe:	f7ff fa9f 	bl	d4100 <_Z17connectToParticlev>
   d4bc2:	b948      	cbnz	r0, d4bd8 <setup+0x140>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d4bc4:	2301      	movs	r3, #1
   d4bc6:	7023      	strb	r3, [r4, #0]
   d4bc8:	f000 f9bc 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4bcc:	4b2e      	ldr	r3, [pc, #184]	; (d4c88 <setup+0x1f0>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4bce:	4931      	ldr	r1, [pc, #196]	; (d4c94 <setup+0x1fc>)
  takeMeasurements();                                                                      // For the benefit of monitoring the device
  updateThresholdValue();                                                                  // For checking values of each device
 
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d4bd0:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4bd2:	4630      	mov	r0, r6
   d4bd4:	f002 fe24 	bl	d7820 <strcpy>
  }

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d4bd8:	4b2f      	ldr	r3, [pc, #188]	; (d4c98 <setup+0x200>)
   d4bda:	781b      	ldrb	r3, [r3, #0]
   d4bdc:	b163      	cbz	r3, d4bf8 <setup+0x160>
   d4bde:	4b2f      	ldr	r3, [pc, #188]	; (d4c9c <setup+0x204>)
   d4be0:	492f      	ldr	r1, [pc, #188]	; (d4ca0 <setup+0x208>)
   d4be2:	781b      	ldrb	r3, [r3, #0]
   d4be4:	2200      	movs	r2, #0
   d4be6:	f88d 2000 	strb.w	r2, [sp]
   d4bea:	a802      	add	r0, sp, #8
   d4bec:	4632      	mov	r2, r6
   d4bee:	f7ff fa79 	bl	d40e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4bf2:	a803      	add	r0, sp, #12
   d4bf4:	f7ff fb22 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bf8:	f000 f9a4 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d4bfc:	4b29      	ldr	r3, [pc, #164]	; (d4ca4 <setup+0x20c>)
   d4bfe:	6018      	str	r0, [r3, #0]

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
  pinMode(tempLED,OUTPUT);
  
  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4c00:	a804      	add	r0, sp, #16
   d4c02:	f001 fa86 	bl	d6112 <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}
   d4c06:	b038      	add	sp, #224	; 0xe0
   d4c08:	bd70      	pop	{r4, r5, r6, pc}
   d4c0a:	bf00      	nop
   d4c0c:	000d9deb 	.word	0x000d9deb
   d4c10:	000d9bb0 	.word	0x000d9bb0
   d4c14:	2003e2c0 	.word	0x2003e2c0
   d4c18:	000d430d 	.word	0x000d430d
   d4c1c:	2003e160 	.word	0x2003e160
   d4c20:	000d9df6 	.word	0x000d9df6
   d4c24:	2003e27c 	.word	0x2003e27c
   d4c28:	000d9dfe 	.word	0x000d9dfe
   d4c2c:	2003e340 	.word	0x2003e340
   d4c30:	000d9e0a 	.word	0x000d9e0a
   d4c34:	2003e328 	.word	0x2003e328
   d4c38:	000d9e13 	.word	0x000d9e13
   d4c3c:	2003e354 	.word	0x2003e354
   d4c40:	000d9e25 	.word	0x000d9e25
   d4c44:	2003e2a8 	.word	0x2003e2a8
   d4c48:	000d9e37 	.word	0x000d9e37
   d4c4c:	2003e264 	.word	0x2003e264
   d4c50:	000d9e46 	.word	0x000d9e46
   d4c54:	000d40b9 	.word	0x000d40b9
   d4c58:	000d9e55 	.word	0x000d9e55
   d4c5c:	000d4609 	.word	0x000d4609
   d4c60:	000d9e61 	.word	0x000d9e61
   d4c64:	000d4935 	.word	0x000d4935
   d4c68:	000d9e6e 	.word	0x000d9e6e
   d4c6c:	000d4989 	.word	0x000d4989
   d4c70:	000d9e7f 	.word	0x000d9e7f
   d4c74:	000d4a31 	.word	0x000d4a31
   d4c78:	000d9e90 	.word	0x000d9e90
   d4c7c:	000d49dd 	.word	0x000d49dd
   d4c80:	000d9ea5 	.word	0x000d9ea5
   d4c84:	2003e2c4 	.word	0x2003e2c4
   d4c88:	2003e324 	.word	0x2003e324
   d4c8c:	000d9eb9 	.word	0x000d9eb9
   d4c90:	000d9ed6 	.word	0x000d9ed6
   d4c94:	000d9eea 	.word	0x000d9eea
   d4c98:	2003e164 	.word	0x2003e164
   d4c9c:	2003e291 	.word	0x2003e291
   d4ca0:	000d9efc 	.word	0x000d9efc
   d4ca4:	2003e350 	.word	0x2003e350

000d4ca8 <_GLOBAL__sub_I_sht31>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ca8:	4b12      	ldr	r3, [pc, #72]	; (d4cf4 <_GLOBAL__sub_I_sht31+0x4c>)
void updateThresholdValue(){
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
} 
   d4caa:	b570      	push	{r4, r5, r6, lr}
   d4cac:	2400      	movs	r4, #0
   d4cae:	701c      	strb	r4, [r3, #0]
   d4cb0:	4b11      	ldr	r3, [pc, #68]	; (d4cf8 <_GLOBAL__sub_I_sht31+0x50>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cb2:	4d12      	ldr	r5, [pc, #72]	; (d4cfc <_GLOBAL__sub_I_sht31+0x54>)
   d4cb4:	2601      	movs	r6, #1
   d4cb6:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4cb8:	f000 f984 	bl	d4fc4 <HAL_Pin_Map>
// Included Libraries
#include "math.h"
#include "adafruit-sht31.h"


Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4cbc:	4810      	ldr	r0, [pc, #64]	; (d4d00 <_GLOBAL__sub_I_sht31+0x58>)
   d4cbe:	f000 f829 	bl	d4d14 <_ZN14Adafruit_SHT31C1Ev>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cc6:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cc8:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cca:	602c      	str	r4, [r5, #0]
   d4ccc:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cce:	71ac      	strb	r4, [r5, #6]
   d4cd0:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cd2:	f000 fa97 	bl	d5204 <set_system_mode>


// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4cd6:	4a0b      	ldr	r2, [pc, #44]	; (d4d04 <_GLOBAL__sub_I_sht31+0x5c>)
   d4cd8:	490b      	ldr	r1, [pc, #44]	; (d4d08 <_GLOBAL__sub_I_sht31+0x60>)
   d4cda:	4628      	mov	r0, r5
   d4cdc:	f001 fdf2 	bl	d68c4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4ce0:	4621      	mov	r1, r4
   d4ce2:	4630      	mov	r0, r6
   d4ce4:	f000 fa9e 	bl	d5224 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d4ce8:	4631      	mov	r1, r6
   d4cea:	2004      	movs	r0, #4
void updateThresholdValue(){
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
} 
   d4cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4cf0:	f000 b910 	b.w	d4f14 <HAL_Feature_Set>
   d4cf4:	2003e308 	.word	0x2003e308
   d4cf8:	2003e291 	.word	0x2003e291
   d4cfc:	2003e30c 	.word	0x2003e30c
   d4d00:	2003e2c4 	.word	0x2003e2c4
   d4d04:	2003e260 	.word	0x2003e260
   d4d08:	000d40d5 	.word	0x000d40d5

000d4d0c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4d0c:	6803      	ldr	r3, [r0, #0]
   d4d0e:	b2c9      	uxtb	r1, r1
   d4d10:	689b      	ldr	r3, [r3, #8]
   d4d12:	4718      	bx	r3

000d4d14 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4d14:	4770      	bx	lr

000d4d16 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4d16:	b538      	push	{r3, r4, r5, lr}
   d4d18:	4605      	mov	r5, r0
   d4d1a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4d1c:	f001 fdac 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4d20:	7829      	ldrb	r1, [r5, #0]
   d4d22:	f000 ff8a 	bl	d5c3a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4d26:	f001 fda7 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4d2a:	0a21      	lsrs	r1, r4, #8
   d4d2c:	f7ff ffee 	bl	d4d0c <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4d30:	f001 fda2 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4d34:	b2e1      	uxtb	r1, r4
   d4d36:	f7ff ffe9 	bl	d4d0c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4d3a:	f001 fd9d 	bl	d6878 <_Z19__fetch_global_Wirev>
}
   d4d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d4d42:	f000 bf82 	b.w	d5c4a <_ZN7TwoWire15endTransmissionEv>

000d4d46 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d4d46:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4d48:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4d4c:	f7ff ffe3 	bl	d4d16 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d4d50:	200a      	movs	r0, #10
}
   d4d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d4d56:	f000 bb79 	b.w	d544c <delay>

000d4d5a <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4d5a:	b538      	push	{r3, r4, r5, lr}
   d4d5c:	4604      	mov	r4, r0
   d4d5e:	460d      	mov	r5, r1
  Wire.begin();
   d4d60:	f001 fd8a 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4d64:	f000 ff32 	bl	d5bcc <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d4d68:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d4d6a:	7025      	strb	r5, [r4, #0]
  reset();
   d4d6c:	f7ff ffeb 	bl	d4d46 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d4d70:	2001      	movs	r0, #1
   d4d72:	bd38      	pop	{r3, r4, r5, pc}

000d4d74 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d4d74:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d4d76:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d4d78:	4291      	cmp	r1, r2
   d4d7a:	d00e      	beq.n	d4d9a <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4d80:	4058      	eors	r0, r3
   d4d82:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4d84:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4d88:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4d8c:	bf18      	it	ne
   d4d8e:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4d92:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4d94:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4d96:	d1f5      	bne.n	d4d84 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4d98:	e7ee      	b.n	d4d78 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d4d9a:	4770      	bx	lr
   d4d9c:	0000      	movs	r0, r0
	...

000d4da0 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4da2:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4da6:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4da8:	f7ff ffb5 	bl	d4d16 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d4dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4db0:	f000 fb4c 	bl	d544c <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4db4:	f001 fd60 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4db8:	2206      	movs	r2, #6
   d4dba:	7821      	ldrb	r1, [r4, #0]
   d4dbc:	f000 ff3a 	bl	d5c34 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4dc0:	f001 fd5a 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4dc4:	6803      	ldr	r3, [r0, #0]
   d4dc6:	691b      	ldr	r3, [r3, #16]
   d4dc8:	4798      	blx	r3
   d4dca:	2806      	cmp	r0, #6
   d4dcc:	d14a      	bne.n	d4e64 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d4dce:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d4dd0:	f001 fd52 	bl	d6878 <_Z19__fetch_global_Wirev>
   d4dd4:	6803      	ldr	r3, [r0, #0]
   d4dd6:	695b      	ldr	r3, [r3, #20]
   d4dd8:	4798      	blx	r3
   d4dda:	f80d 0005 	strb.w	r0, [sp, r5]
   d4dde:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d4de0:	2d06      	cmp	r5, #6
   d4de2:	d1f5      	bne.n	d4dd0 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4de4:	2202      	movs	r2, #2
   d4de6:	4669      	mov	r1, sp
   d4de8:	4620      	mov	r0, r4
   d4dea:	f7ff ffc3 	bl	d4d74 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4dee:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d4df2:	4285      	cmp	r5, r0
   d4df4:	d136      	bne.n	d4e64 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4df6:	2202      	movs	r2, #2
   d4df8:	f10d 0103 	add.w	r1, sp, #3
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f7ff ffb9 	bl	d4d74 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4e02:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d4e06:	4285      	cmp	r5, r0
   d4e08:	d12c      	bne.n	d4e64 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4e0a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d4e0e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d4e12:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4e16:	ba40      	rev16	r0, r0
   d4e18:	b280      	uxth	r0, r0
   d4e1a:	f002 f801 	bl	d6e20 <__aeabi_ui2d>
  stemp *= 175;
   d4e1e:	a318      	add	r3, pc, #96	; (adr r3, d4e80 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4e20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e24:	f002 f872 	bl	d6f0c <__aeabi_dmul>
  stemp /= 0xffff;
   d4e28:	a311      	add	r3, pc, #68	; (adr r3, d4e70 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e2e:	f002 f997 	bl	d7160 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d4e32:	2200      	movs	r2, #0
   d4e34:	4b10      	ldr	r3, [pc, #64]	; (d4e78 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4e36:	f001 feb5 	bl	d6ba4 <__aeabi_dsub>
   d4e3a:	f002 fb49 	bl	d74d0 <__aeabi_d2f>
   d4e3e:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d4e40:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d4e44:	f001 ffec 	bl	d6e20 <__aeabi_ui2d>
  shum *= 100;
   d4e48:	2200      	movs	r2, #0
   d4e4a:	4b0c      	ldr	r3, [pc, #48]	; (d4e7c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4e4c:	f002 f85e 	bl	d6f0c <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d4e50:	a307      	add	r3, pc, #28	; (adr r3, d4e70 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4e52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e56:	f002 f983 	bl	d7160 <__aeabi_ddiv>
   d4e5a:	f002 fb39 	bl	d74d0 <__aeabi_d2f>
   d4e5e:	6060      	str	r0, [r4, #4]
  
  return true;
   d4e60:	2001      	movs	r0, #1
   d4e62:	e000      	b.n	d4e66 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d4e64:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d4e66:	b002      	add	sp, #8
   d4e68:	bd70      	pop	{r4, r5, r6, pc}
   d4e6a:	bf00      	nop
   d4e6c:	f3af 8000 	nop.w
   d4e70:	00000000 	.word	0x00000000
   d4e74:	40efffe0 	.word	0x40efffe0
   d4e78:	40468000 	.word	0x40468000
   d4e7c:	40590000 	.word	0x40590000
   d4e80:	00000000 	.word	0x00000000
   d4e84:	4065e000 	.word	0x4065e000

000d4e88 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4e88:	b510      	push	{r4, lr}
   d4e8a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4e8c:	f7ff ff88 	bl	d4da0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4e90:	b110      	cbz	r0, d4e98 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d4e92:	ed94 0a02 	vldr	s0, [r4, #8]
   d4e96:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4e98:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ea0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d4e9c:	bd10      	pop	{r4, pc}
   d4e9e:	bf00      	nop
   d4ea0:	7fc00000 	.word	0x7fc00000

000d4ea4 <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d4ea4:	b510      	push	{r4, lr}
   d4ea6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4ea8:	f7ff ff7a 	bl	d4da0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4eac:	b110      	cbz	r0, d4eb4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d4eae:	ed94 0a01 	vldr	s0, [r4, #4]
   d4eb2:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d4eb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ebc <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d4eb8:	bd10      	pop	{r4, pc}
   d4eba:	bf00      	nop
   d4ebc:	7fc00000 	.word	0x7fc00000

000d4ec0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4ec0:	f000 b880 	b.w	d4fc4 <HAL_Pin_Map>

000d4ec4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <os_thread_is_current+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	689b      	ldr	r3, [r3, #8]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030248 	.word	0x00030248

000d4ed4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <os_thread_join+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	691b      	ldr	r3, [r3, #16]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030248 	.word	0x00030248

000d4ee4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <os_thread_cleanup+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	695b      	ldr	r3, [r3, #20]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030248 	.word	0x00030248

000d4ef4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <os_mutex_recursive_create+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030248 	.word	0x00030248

000d4f04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <os_mutex_recursive_destroy+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030248 	.word	0x00030248

000d4f14 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_Feature_Set+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030234 	.word	0x00030234

000d4f24 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_Core_System_Reset_Ex+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030234 	.word	0x00030234

000d4f34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_RNG_GetRandomNumber+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	685b      	ldr	r3, [r3, #4]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030218 	.word	0x00030218

000d4f44 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	695b      	ldr	r3, [r3, #20]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030218 	.word	0x00030218

000d4f54 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_RTC_Get_UnixTime+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	69db      	ldr	r3, [r3, #28]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030218 	.word	0x00030218

000d4f64 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_EEPROM_Init+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030218 	.word	0x00030218

000d4f74 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_EEPROM_Write+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030218 	.word	0x00030218

000d4f84 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_EEPROM_Get+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030218 	.word	0x00030218

000d4f94 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_EEPROM_Put+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030218 	.word	0x00030218

000d4fa4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_RTC_Time_Is_Valid+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030218 	.word	0x00030218

000d4fb4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <hal_timer_millis+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030218 	.word	0x00030218

000d4fc4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_Pin_Map+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	681b      	ldr	r3, [r3, #0]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003022c 	.word	0x0003022c

000d4fd4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_Pin_Mode+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	689b      	ldr	r3, [r3, #8]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003022c 	.word	0x0003022c

000d4fe4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_Get_Pin_Mode+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	68db      	ldr	r3, [r3, #12]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003022c 	.word	0x0003022c

000d4ff4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_GPIO_Write+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	691b      	ldr	r3, [r3, #16]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003022c 	.word	0x0003022c

000d5004 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_I2C_Begin+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	68db      	ldr	r3, [r3, #12]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030228 	.word	0x00030228

000d5014 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_I2C_Begin_Transmission+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	699b      	ldr	r3, [r3, #24]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030228 	.word	0x00030228

000d5024 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_I2C_End_Transmission+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	69db      	ldr	r3, [r3, #28]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030228 	.word	0x00030228

000d5034 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_I2C_Write_Data+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a1b      	ldr	r3, [r3, #32]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030228 	.word	0x00030228

000d5044 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_I2C_Available_Data+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030228 	.word	0x00030228

000d5054 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_I2C_Read_Data+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030228 	.word	0x00030228

000d5064 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_I2C_Peek_Data+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030228 	.word	0x00030228

000d5074 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_I2C_Flush_Data+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030228 	.word	0x00030228

000d5084 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_I2C_Is_Enabled+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030228 	.word	0x00030228

000d5094 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_I2C_Init+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030228 	.word	0x00030228

000d50a4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_I2C_Request_Data_Ex+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030228 	.word	0x00030228

000d50b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <inet_inet_ntop+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	695b      	ldr	r3, [r3, #20]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030264 	.word	0x00030264

000d50c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <netdb_freeaddrinfo+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	689b      	ldr	r3, [r3, #8]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030268 	.word	0x00030268

000d50d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <netdb_getaddrinfo+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	68db      	ldr	r3, [r3, #12]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030268 	.word	0x00030268

000d50e4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_SPI_Init+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	69db      	ldr	r3, [r3, #28]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030230 	.word	0x00030230

000d50f4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_SPI_Is_Enabled+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6a1b      	ldr	r3, [r3, #32]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030230 	.word	0x00030230

000d5104 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <HAL_USART_Init+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	681b      	ldr	r3, [r3, #0]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_USART_Write_Data+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	68db      	ldr	r3, [r3, #12]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003023c 	.word	0x0003023c

000d5124 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <HAL_USART_Available_Data+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	691b      	ldr	r3, [r3, #16]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003023c 	.word	0x0003023c

000d5134 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <HAL_USART_Read_Data+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	695b      	ldr	r3, [r3, #20]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003023c 	.word	0x0003023c

000d5144 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <HAL_USART_Peek_Data+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	699b      	ldr	r3, [r3, #24]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003023c 	.word	0x0003023c

000d5154 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_USART_Flush_Data+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	69db      	ldr	r3, [r3, #28]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003023c 	.word	0x0003023c

000d5164 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_USART_Is_Enabled+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6a1b      	ldr	r3, [r3, #32]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003023c 	.word	0x0003023c

000d5174 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_USART_Available_Data_For_Write+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003023c 	.word	0x0003023c

000d5184 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USB_USART_Init+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	681b      	ldr	r3, [r3, #0]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003024c 	.word	0x0003024c

000d5194 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USB_USART_Begin+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	685b      	ldr	r3, [r3, #4]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003024c 	.word	0x0003024c

000d51a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_USB_USART_Available_Data+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	691b      	ldr	r3, [r3, #16]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003024c 	.word	0x0003024c

000d51b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003024c 	.word	0x0003024c

000d51c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <HAL_USB_USART_Receive_Data+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	699b      	ldr	r3, [r3, #24]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003024c 	.word	0x0003024c

000d51d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <HAL_USB_USART_Send_Data+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	69db      	ldr	r3, [r3, #28]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	0003024c 	.word	0x0003024c

000d51e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <HAL_USB_USART_Flush_Data+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6a1b      	ldr	r3, [r3, #32]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	0003024c 	.word	0x0003024c

000d51f4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <system_mode+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	681b      	ldr	r3, [r3, #0]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030220 	.word	0x00030220

000d5204 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <set_system_mode+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	685b      	ldr	r3, [r3, #4]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030220 	.word	0x00030220

000d5214 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <system_delay_ms+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	695b      	ldr	r3, [r3, #20]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030220 	.word	0x00030220

000d5224 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <system_thread_set_state+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030220 	.word	0x00030220

000d5234 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <application_thread_current+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030220 	.word	0x00030220

000d5244 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <application_thread_invoke+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030220 	.word	0x00030220

000d5254 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <system_thread_get_state+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030220 	.word	0x00030220

000d5264 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b03      	ldr	r3, [pc, #12]	; (d5274 <system_ctrl_set_app_request_handler+0x10>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d526e:	9301      	str	r3, [sp, #4]
   d5270:	bd08      	pop	{r3, pc}
   d5272:	0000      	.short	0x0000
   d5274:	00030220 	.word	0x00030220

000d5278 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b03      	ldr	r3, [pc, #12]	; (d5288 <system_ctrl_set_result+0x10>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5282:	9301      	str	r3, [sp, #4]
   d5284:	bd08      	pop	{r3, pc}
   d5286:	0000      	.short	0x0000
   d5288:	00030220 	.word	0x00030220

000d528c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <spark_variable+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	681b      	ldr	r3, [r3, #0]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030244 	.word	0x00030244

000d529c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <spark_function+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	685b      	ldr	r3, [r3, #4]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030244 	.word	0x00030244

000d52ac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <spark_process+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	689b      	ldr	r3, [r3, #8]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030244 	.word	0x00030244

000d52bc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <spark_cloud_flag_connect+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	68db      	ldr	r3, [r3, #12]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030244 	.word	0x00030244

000d52cc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <spark_cloud_flag_connected+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	695b      	ldr	r3, [r3, #20]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030244 	.word	0x00030244

000d52dc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <spark_deviceID+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	69db      	ldr	r3, [r3, #28]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030244 	.word	0x00030244

000d52ec <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <spark_send_event+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6a1b      	ldr	r3, [r3, #32]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030244 	.word	0x00030244

000d52fc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <spark_subscribe+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030244 	.word	0x00030244

000d530c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <spark_sync_time+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030244 	.word	0x00030244

000d531c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <spark_sync_time_pending+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030244 	.word	0x00030244

000d532c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030244 	.word	0x00030244

000d533c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <network_connect+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	685b      	ldr	r3, [r3, #4]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030240 	.word	0x00030240

000d534c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <network_connecting+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	689b      	ldr	r3, [r3, #8]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030240 	.word	0x00030240

000d535c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <network_disconnect+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	68db      	ldr	r3, [r3, #12]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030240 	.word	0x00030240

000d536c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <network_ready+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	691b      	ldr	r3, [r3, #16]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030240 	.word	0x00030240

000d537c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <network_on+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	695b      	ldr	r3, [r3, #20]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030240 	.word	0x00030240

000d538c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <network_off+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	699b      	ldr	r3, [r3, #24]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030240 	.word	0x00030240

000d539c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <network_listen+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	69db      	ldr	r3, [r3, #28]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030240 	.word	0x00030240

000d53ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <network_listening+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6a1b      	ldr	r3, [r3, #32]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030240 	.word	0x00030240

000d53bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <network_set_listen_timeout+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030240 	.word	0x00030240

000d53cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <network_get_listen_timeout+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030240 	.word	0x00030240

000d53dc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <malloc+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	681b      	ldr	r3, [r3, #0]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	0003021c 	.word	0x0003021c

000d53ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <free+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	685b      	ldr	r3, [r3, #4]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003021c 	.word	0x0003021c

000d53fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <realloc+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	689b      	ldr	r3, [r3, #8]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	0003021c 	.word	0x0003021c

000d540c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <siscanf+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	699b      	ldr	r3, [r3, #24]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	0003021c 	.word	0x0003021c

000d541c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <snprintf+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	69db      	ldr	r3, [r3, #28]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	0003021c 	.word	0x0003021c

000d542c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <abort+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	0003021c 	.word	0x0003021c

000d543c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <_malloc_r+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	0003021c 	.word	0x0003021c

000d544c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d544c:	2100      	movs	r1, #0
   d544e:	f7ff bee1 	b.w	d5214 <system_delay_ms>

000d5452 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5452:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5454:	6883      	ldr	r3, [r0, #8]
   d5456:	4604      	mov	r4, r0
   d5458:	b90b      	cbnz	r3, d545e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d545a:	f001 fa54 	bl	d6906 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d545e:	68c3      	ldr	r3, [r0, #12]
   d5460:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5462:	68a3      	ldr	r3, [r4, #8]
   d5464:	b11b      	cbz	r3, d546e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5466:	2203      	movs	r2, #3
   d5468:	4621      	mov	r1, r4
   d546a:	4620      	mov	r0, r4
   d546c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d546e:	4620      	mov	r0, r4
   d5470:	2110      	movs	r1, #16
}
   d5472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5476:	f001 ba2a 	b.w	d68ce <_ZdlPvj>

000d547a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d547a:	b510      	push	{r4, lr}
   d547c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d547e:	6800      	ldr	r0, [r0, #0]
   d5480:	b108      	cbz	r0, d5486 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5482:	f7ff fd3f 	bl	d4f04 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5486:	4620      	mov	r0, r4
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d548a:	680b      	ldr	r3, [r1, #0]
   d548c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d548e:	b113      	cbz	r3, d5496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5490:	685a      	ldr	r2, [r3, #4]
   d5492:	3201      	adds	r2, #1
   d5494:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5496:	4770      	bx	lr

000d5498 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5498:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d549a:	4c06      	ldr	r4, [pc, #24]	; (d54b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d549c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d549e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54a0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d54a2:	f7ff fd27 	bl	d4ef4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d54a6:	4620      	mov	r0, r4
   d54a8:	4a03      	ldr	r2, [pc, #12]	; (d54b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d54aa:	4904      	ldr	r1, [pc, #16]	; (d54bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d54ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d54b0:	f001 ba08 	b.w	d68c4 <__aeabi_atexit>
   d54b4:	2003e370 	.word	0x2003e370
   d54b8:	2003e260 	.word	0x2003e260
   d54bc:	000d547b 	.word	0x000d547b

000d54c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54c0:	4770      	bx	lr

000d54c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d54c2:	2000      	movs	r0, #0
   d54c4:	4770      	bx	lr

000d54c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54c6:	b510      	push	{r4, lr}
   d54c8:	2110      	movs	r1, #16
   d54ca:	4604      	mov	r4, r0
   d54cc:	f001 f9ff 	bl	d68ce <_ZdlPvj>
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d54d4:	b508      	push	{r3, lr}
      { delete this; }
   d54d6:	b108      	cbz	r0, d54dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d54d8:	f7ff fff5 	bl	d54c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d54dc:	bd08      	pop	{r3, pc}

000d54de <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d54de:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d54e0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d54e2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d54e4:	b113      	cbz	r3, d54ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54e6:	2203      	movs	r2, #3
   d54e8:	4601      	mov	r1, r0
   d54ea:	4798      	blx	r3
    }
   d54ec:	4620      	mov	r0, r4
   d54ee:	bd10      	pop	{r4, pc}

000d54f0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d54f0:	2200      	movs	r2, #0
   d54f2:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d54f4:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d54f6:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d54fa:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54fc:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5500:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5502:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5504:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5506:	680c      	ldr	r4, [r1, #0]
   d5508:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d550a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d550c:	bd10      	pop	{r4, pc}

000d550e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d550e:	b510      	push	{r4, lr}
   d5510:	4604      	mov	r4, r0
    free((void*)msg_);
   d5512:	6800      	ldr	r0, [r0, #0]
   d5514:	f7ff ff6a 	bl	d53ec <free>
}
   d5518:	4620      	mov	r0, r4
   d551a:	bd10      	pop	{r4, pc}

000d551c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d551c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d551e:	68c4      	ldr	r4, [r0, #12]
   d5520:	b1f4      	cbz	r4, d5560 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5522:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5524:	2b02      	cmp	r3, #2
   d5526:	d103      	bne.n	d5530 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5528:	f104 000c 	add.w	r0, r4, #12
   d552c:	f7ff ffef 	bl	d550e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5530:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5532:	b135      	cbz	r5, d5542 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5534:	4628      	mov	r0, r5
   d5536:	f7ff ffd2 	bl	d54de <_ZNSt14_Function_baseD1Ev>
   d553a:	2110      	movs	r1, #16
   d553c:	4628      	mov	r0, r5
   d553e:	f001 f9c6 	bl	d68ce <_ZdlPvj>
   d5542:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5544:	b135      	cbz	r5, d5554 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5546:	4628      	mov	r0, r5
   d5548:	f7ff ffc9 	bl	d54de <_ZNSt14_Function_baseD1Ev>
   d554c:	2110      	movs	r1, #16
   d554e:	4628      	mov	r0, r5
   d5550:	f001 f9bd 	bl	d68ce <_ZdlPvj>
   d5554:	4620      	mov	r0, r4
   d5556:	2114      	movs	r1, #20
   d5558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d555c:	f001 b9b7 	b.w	d68ce <_ZdlPvj>
   d5560:	bd38      	pop	{r3, r4, r5, pc}

000d5562 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5562:	b510      	push	{r4, lr}
   d5564:	b088      	sub	sp, #32
   d5566:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5568:	4668      	mov	r0, sp
   d556a:	f000 fe19 	bl	d61a0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d556e:	4669      	mov	r1, sp
   d5570:	a804      	add	r0, sp, #16
   d5572:	f000 fe37 	bl	d61e4 <_ZN6StringC1ERKS_>
   d5576:	a804      	add	r0, sp, #16
   d5578:	47a0      	blx	r4
   d557a:	4604      	mov	r4, r0
   d557c:	a804      	add	r0, sp, #16
   d557e:	f000 fdc8 	bl	d6112 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5582:	4668      	mov	r0, sp
   d5584:	f000 fdc5 	bl	d6112 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5588:	4620      	mov	r0, r4
   d558a:	b008      	add	sp, #32
   d558c:	bd10      	pop	{r4, pc}

000d558e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d558e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5590:	2410      	movs	r4, #16
   d5592:	b085      	sub	sp, #20
   d5594:	4607      	mov	r7, r0
   d5596:	460e      	mov	r6, r1
   d5598:	4615      	mov	r5, r2
   d559a:	2100      	movs	r1, #0
   d559c:	4622      	mov	r2, r4
   d559e:	4668      	mov	r0, sp
   d55a0:	f002 f903 	bl	d77aa <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d55a4:	2200      	movs	r2, #0
   d55a6:	4669      	mov	r1, sp
   d55a8:	4610      	mov	r0, r2
         size = sizeof(*this);
   d55aa:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d55ae:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d55b0:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d55b2:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d55b4:	f7ff fe72 	bl	d529c <spark_function>
}
   d55b8:	b005      	add	sp, #20
   d55ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55bc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d55bc:	b513      	push	{r0, r1, r4, lr}
   d55be:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d55c0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d55c4:	2300      	movs	r3, #0
   d55c6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55c8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d55ca:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d55cc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55ce:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d55d0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55d2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55d4:	f7fe fe32 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55d8:	4620      	mov	r0, r4
   d55da:	b002      	add	sp, #8
   d55dc:	bd10      	pop	{r4, pc}

000d55de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d55de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55e0:	460c      	mov	r4, r1
   d55e2:	ad02      	add	r5, sp, #8
   d55e4:	f854 3b04 	ldr.w	r3, [r4], #4
   d55e8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d55ec:	4606      	mov	r6, r0
   d55ee:	460f      	mov	r7, r1
   d55f0:	a801      	add	r0, sp, #4
   d55f2:	4621      	mov	r1, r4
   d55f4:	f7ff ff49 	bl	d548a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d55f8:	4629      	mov	r1, r5
   d55fa:	4630      	mov	r0, r6
   d55fc:	f7ff ffde 	bl	d55bc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5600:	a801      	add	r0, sp, #4
   d5602:	f7fe fe1b 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5606:	4620      	mov	r0, r4
   d5608:	f7fe fe18 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d560c:	4638      	mov	r0, r7
   d560e:	2108      	movs	r1, #8
   d5610:	f001 f95d 	bl	d68ce <_ZdlPvj>
        return p;
    }
   d5614:	4630      	mov	r0, r6
   d5616:	b003      	add	sp, #12
   d5618:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d561a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d561a:	b513      	push	{r0, r1, r4, lr}
   d561c:	460b      	mov	r3, r1
   d561e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5620:	c803      	ldmia	r0, {r0, r1}
   d5622:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5626:	e893 0003 	ldmia.w	r3, {r0, r1}
   d562a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d562e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5632:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5636:	b002      	add	sp, #8
   d5638:	bd10      	pop	{r4, pc}
	...

000d563c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d563c:	b538      	push	{r3, r4, r5, lr}
   d563e:	2300      	movs	r3, #0
   d5640:	4604      	mov	r4, r0
   d5642:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5644:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5646:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5648:	f7fe fd27 	bl	d409a <_Znwj>
   d564c:	b128      	cbz	r0, d565a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d564e:	2301      	movs	r3, #1
   d5650:	6043      	str	r3, [r0, #4]
   d5652:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5654:	4b02      	ldr	r3, [pc, #8]	; (d5660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5656:	6003      	str	r3, [r0, #0]
   d5658:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d565a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d565c:	4620      	mov	r0, r4
   d565e:	bd38      	pop	{r3, r4, r5, pc}
   d5660:	000d9f14 	.word	0x000d9f14

000d5664 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5664:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5666:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5668:	b90a      	cbnz	r2, d566e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d566a:	f001 f94c 	bl	d6906 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d566e:	68c3      	ldr	r3, [r0, #12]
    }
   d5670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5674:	4718      	bx	r3

000d5676 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5676:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5678:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d567a:	f100 0110 	add.w	r1, r0, #16
   d567e:	f7ff fff1 	bl	d5664 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5682:	bd08      	pop	{r3, pc}

000d5684 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5684:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5686:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5688:	b90a      	cbnz	r2, d568e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d568a:	f001 f93c 	bl	d6906 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d568e:	68c3      	ldr	r3, [r0, #12]
    }
   d5690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5694:	4718      	bx	r3

000d5696 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5696:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5698:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d569a:	f100 0110 	add.w	r1, r0, #16
   d569e:	f7ff fff1 	bl	d5684 <_ZNKSt8functionIFvRKbEEclES1_>
   d56a2:	bd08      	pop	{r3, pc}

000d56a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d56a4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56a6:	2300      	movs	r3, #0
   d56a8:	6083      	str	r3, [r0, #8]
   d56aa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d56ac:	4604      	mov	r4, r0
   d56ae:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d56b0:	b12b      	cbz	r3, d56be <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d56b2:	2202      	movs	r2, #2
   d56b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d56b6:	68eb      	ldr	r3, [r5, #12]
   d56b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d56ba:	68ab      	ldr	r3, [r5, #8]
   d56bc:	60a3      	str	r3, [r4, #8]
	}
    }
   d56be:	4620      	mov	r0, r4
   d56c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d56c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56c6:	b089      	sub	sp, #36	; 0x24
   d56c8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d56ca:	4668      	mov	r0, sp
   d56cc:	f7ff ff10 	bl	d54f0 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d56d0:	2300      	movs	r3, #0
   d56d2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d56d6:	f04f 0202 	mov.w	r2, #2
   d56da:	e8d4 3f4f 	ldrexb	r3, [r4]
   d56de:	2b00      	cmp	r3, #0
   d56e0:	d103      	bne.n	d56ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d56e2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d56e6:	2900      	cmp	r1, #0
   d56e8:	d1f7      	bne.n	d56da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d56ea:	d002      	beq.n	d56f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d56ec:	f88d 3008 	strb.w	r3, [sp, #8]
   d56f0:	e063      	b.n	d57ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d56f2:	f114 050c 	adds.w	r5, r4, #12
   d56f6:	d003      	beq.n	d5700 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d56f8:	4669      	mov	r1, sp
   d56fa:	4628      	mov	r0, r5
   d56fc:	f7ff fef8 	bl	d54f0 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5700:	f3bf 8f5f 	dmb	sy
   d5704:	2301      	movs	r3, #1
   d5706:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5708:	2000      	movs	r0, #0
   d570a:	f104 0308 	add.w	r3, r4, #8
   d570e:	f3bf 8f5f 	dmb	sy
   d5712:	e853 6f00 	ldrex	r6, [r3]
   d5716:	e843 0200 	strex	r2, r0, [r3]
   d571a:	2a00      	cmp	r2, #0
   d571c:	d1f9      	bne.n	d5712 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d571e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5722:	2e00      	cmp	r6, #0
   d5724:	d049      	beq.n	d57ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5726:	f7ff fd85 	bl	d5234 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d572a:	b120      	cbz	r0, d5736 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d572c:	4629      	mov	r1, r5
   d572e:	4630      	mov	r0, r6
   d5730:	f7ff ff98 	bl	d5664 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5734:	e03a      	b.n	d57ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5736:	4631      	mov	r1, r6
   d5738:	a802      	add	r0, sp, #8
   d573a:	f7ff ffb3 	bl	d56a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d573e:	68e0      	ldr	r0, [r4, #12]
   d5740:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5744:	b108      	cbz	r0, d574a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5746:	f002 f873 	bl	d7830 <strdup>
   d574a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d574c:	2010      	movs	r0, #16
   d574e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5752:	f7fe fca2 	bl	d409a <_Znwj>
   d5756:	4605      	mov	r5, r0
   d5758:	b1e8      	cbz	r0, d5796 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d575a:	2700      	movs	r7, #0
   d575c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d575e:	2018      	movs	r0, #24
   d5760:	f7fe fc9b 	bl	d409a <_Znwj>
   d5764:	4604      	mov	r4, r0
   d5766:	b188      	cbz	r0, d578c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5768:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d576a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d576c:	a802      	add	r0, sp, #8
   d576e:	f7ff ff54 	bl	d561a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5772:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5774:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5776:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5778:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d577a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d577c:	a906      	add	r1, sp, #24
   d577e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5780:	60e3      	str	r3, [r4, #12]
   d5782:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5786:	9205      	str	r2, [sp, #20]
   d5788:	f7ff feb2 	bl	d54f0 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d578c:	4b0d      	ldr	r3, [pc, #52]	; (d57c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d578e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5790:	4b0d      	ldr	r3, [pc, #52]	; (d57c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5792:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5794:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5796:	a806      	add	r0, sp, #24
   d5798:	f7ff feb9 	bl	d550e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d579c:	a802      	add	r0, sp, #8
   d579e:	f7ff fe9e 	bl	d54de <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d57a2:	2200      	movs	r2, #0
   d57a4:	4629      	mov	r1, r5
   d57a6:	4809      	ldr	r0, [pc, #36]	; (d57cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d57a8:	f7ff fd4c 	bl	d5244 <application_thread_invoke>
   d57ac:	4630      	mov	r0, r6
   d57ae:	f7ff fe96 	bl	d54de <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d57b2:	2110      	movs	r1, #16
   d57b4:	4630      	mov	r0, r6
   d57b6:	f001 f88a 	bl	d68ce <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d57ba:	4668      	mov	r0, sp
   d57bc:	f7ff fea7 	bl	d550e <_ZN8particle5ErrorD1Ev>
    }
   d57c0:	b009      	add	sp, #36	; 0x24
   d57c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57c4:	000d5677 	.word	0x000d5677
   d57c8:	000d58ed 	.word	0x000d58ed
   d57cc:	000d5453 	.word	0x000d5453

000d57d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57d4:	b08b      	sub	sp, #44	; 0x2c
   d57d6:	4606      	mov	r6, r0
   d57d8:	460f      	mov	r7, r1
   d57da:	4690      	mov	r8, r2
   d57dc:	4699      	mov	r9, r3
   d57de:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d57e2:	f7ff fd73 	bl	d52cc <spark_cloud_flag_connected>
   d57e6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d57e8:	4683      	mov	fp, r0
   d57ea:	bb30      	cbnz	r0, d583a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57ec:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d57f0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d57f2:	a905      	add	r1, sp, #20
   d57f4:	4628      	mov	r0, r5
   d57f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d57fa:	f7ff fe79 	bl	d54f0 <_ZN8particle5ErrorC1EOS0_>
   d57fe:	2014      	movs	r0, #20
   d5800:	f7fe fc4b 	bl	d409a <_Znwj>
   d5804:	4604      	mov	r4, r0
   d5806:	b158      	cbz	r0, d5820 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5808:	2302      	movs	r3, #2
   d580a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d580c:	2301      	movs	r3, #1
   d580e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5810:	f8c0 b004 	str.w	fp, [r0, #4]
   d5814:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5818:	4629      	mov	r1, r5
   d581a:	300c      	adds	r0, #12
   d581c:	f7ff fe68 	bl	d54f0 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5820:	4630      	mov	r0, r6
   d5822:	4621      	mov	r1, r4
   d5824:	f840 4b04 	str.w	r4, [r0], #4
   d5828:	f7ff ff08 	bl	d563c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d582c:	4628      	mov	r0, r5
   d582e:	f7ff fe6e 	bl	d550e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5832:	a805      	add	r0, sp, #20
   d5834:	f7ff fe6b 	bl	d550e <_ZN8particle5ErrorD1Ev>
   d5838:	e052      	b.n	d58e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d583a:	2400      	movs	r4, #0
   d583c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d583e:	2014      	movs	r0, #20
   d5840:	606c      	str	r4, [r5, #4]
   d5842:	60ac      	str	r4, [r5, #8]
   d5844:	9307      	str	r3, [sp, #28]
   d5846:	f7fe fc28 	bl	d409a <_Znwj>
   d584a:	4601      	mov	r1, r0
   d584c:	b118      	cbz	r0, d5856 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d584e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5850:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5852:	6044      	str	r4, [r0, #4]
   d5854:	6084      	str	r4, [r0, #8]
   d5856:	a804      	add	r0, sp, #16
   d5858:	9103      	str	r1, [sp, #12]
   d585a:	f7ff feef 	bl	d563c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d585e:	4b22      	ldr	r3, [pc, #136]	; (d58e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5860:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5862:	2008      	movs	r0, #8
   d5864:	f7fe fc19 	bl	d409a <_Znwj>
   d5868:	4604      	mov	r4, r0
   d586a:	b128      	cbz	r0, d5878 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d586c:	9b03      	ldr	r3, [sp, #12]
   d586e:	f840 3b04 	str.w	r3, [r0], #4
   d5872:	a904      	add	r1, sp, #16
   d5874:	f7ff fe09 	bl	d548a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5878:	9500      	str	r5, [sp, #0]
   d587a:	fa5f f38a 	uxtb.w	r3, sl
   d587e:	464a      	mov	r2, r9
   d5880:	4641      	mov	r1, r8
   d5882:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5884:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5886:	f7ff fd31 	bl	d52ec <spark_send_event>
   d588a:	b920      	cbnz	r0, d5896 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d588c:	9b03      	ldr	r3, [sp, #12]
   d588e:	785b      	ldrb	r3, [r3, #1]
   d5890:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5894:	b183      	cbz	r3, d58b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5896:	9b03      	ldr	r3, [sp, #12]
   d5898:	9305      	str	r3, [sp, #20]
   d589a:	a904      	add	r1, sp, #16
   d589c:	a806      	add	r0, sp, #24
   d589e:	f7ff fdf4 	bl	d548a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d58a2:	a905      	add	r1, sp, #20
   d58a4:	4630      	mov	r0, r6
   d58a6:	f7ff fe89 	bl	d55bc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58aa:	a806      	add	r0, sp, #24
   d58ac:	f7fe fcc6 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58b0:	a804      	add	r0, sp, #16
   d58b2:	f7fe fcc3 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58b6:	e013      	b.n	d58e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d58b8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d58bc:	a905      	add	r1, sp, #20
   d58be:	a803      	add	r0, sp, #12
   d58c0:	9205      	str	r2, [sp, #20]
   d58c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d58c6:	f7ff fefd 	bl	d56c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d58ca:	a805      	add	r0, sp, #20
   d58cc:	f7ff fe1f 	bl	d550e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d58d0:	a805      	add	r0, sp, #20
   d58d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d58d4:	f7ff fe83 	bl	d55de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d58d8:	a806      	add	r0, sp, #24
   d58da:	f7fe fcaf 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58de:	e7da      	b.n	d5896 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d58e0:	4630      	mov	r0, r6
   d58e2:	b00b      	add	sp, #44	; 0x2c
   d58e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58e8:	000d5a5d 	.word	0x000d5a5d

000d58ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d58ec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d58ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58f0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d58f2:	d006      	beq.n	d5902 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d58f4:	2a03      	cmp	r2, #3
   d58f6:	d017      	beq.n	d5928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d58f8:	2a01      	cmp	r2, #1
   d58fa:	d122      	bne.n	d5942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d58fc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58fe:	6003      	str	r3, [r0, #0]
	      break;
   d5900:	e01f      	b.n	d5942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5902:	2018      	movs	r0, #24
   d5904:	680e      	ldr	r6, [r1, #0]
   d5906:	f7fe fbc8 	bl	d409a <_Znwj>
   d590a:	4605      	mov	r5, r0
   d590c:	b150      	cbz	r0, d5924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d590e:	4631      	mov	r1, r6
   d5910:	f7ff fec8 	bl	d56a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5914:	6930      	ldr	r0, [r6, #16]
   d5916:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d591a:	b108      	cbz	r0, d5920 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d591c:	f001 ff88 	bl	d7830 <strdup>
   d5920:	6128      	str	r0, [r5, #16]
   d5922:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5924:	6025      	str	r5, [r4, #0]
   d5926:	e00c      	b.n	d5942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5928:	6804      	ldr	r4, [r0, #0]
   d592a:	b154      	cbz	r4, d5942 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d592c:	f104 0010 	add.w	r0, r4, #16
   d5930:	f7ff fded 	bl	d550e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5934:	4620      	mov	r0, r4
   d5936:	f7ff fdd2 	bl	d54de <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d593a:	2118      	movs	r1, #24
   d593c:	4620      	mov	r0, r4
   d593e:	f000 ffc6 	bl	d68ce <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5942:	2000      	movs	r0, #0
   d5944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5946 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5946:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5948:	2300      	movs	r3, #0
   d594a:	6083      	str	r3, [r0, #8]
   d594c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d594e:	4604      	mov	r4, r0
   d5950:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5952:	b12b      	cbz	r3, d5960 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5954:	2202      	movs	r2, #2
   d5956:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5958:	68eb      	ldr	r3, [r5, #12]
   d595a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d595c:	68ab      	ldr	r3, [r5, #8]
   d595e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5960:	4620      	mov	r0, r4
   d5962:	bd38      	pop	{r3, r4, r5, pc}

000d5964 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5964:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5966:	b570      	push	{r4, r5, r6, lr}
   d5968:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d596a:	d006      	beq.n	d597a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d596c:	2a03      	cmp	r2, #3
   d596e:	d011      	beq.n	d5994 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5970:	2a01      	cmp	r2, #1
   d5972:	d118      	bne.n	d59a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5974:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5976:	6003      	str	r3, [r0, #0]
	      break;
   d5978:	e015      	b.n	d59a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d597a:	2014      	movs	r0, #20
   d597c:	680e      	ldr	r6, [r1, #0]
   d597e:	f7fe fb8c 	bl	d409a <_Znwj>
   d5982:	4605      	mov	r5, r0
   d5984:	b120      	cbz	r0, d5990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5986:	4631      	mov	r1, r6
   d5988:	f7ff ffdd 	bl	d5946 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d598c:	7c33      	ldrb	r3, [r6, #16]
   d598e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5990:	6025      	str	r5, [r4, #0]
   d5992:	e008      	b.n	d59a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5994:	6804      	ldr	r4, [r0, #0]
   d5996:	b134      	cbz	r4, d59a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5998:	4620      	mov	r0, r4
   d599a:	f7ff fda0 	bl	d54de <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d599e:	2114      	movs	r1, #20
   d59a0:	4620      	mov	r0, r4
   d59a2:	f000 ff94 	bl	d68ce <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d59a6:	2000      	movs	r0, #0
   d59a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d59ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d59ac:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59ae:	2300      	movs	r3, #0
   d59b0:	b087      	sub	sp, #28
   d59b2:	460c      	mov	r4, r1
   d59b4:	f3bf 8f5f 	dmb	sy
   d59b8:	e850 6f00 	ldrex	r6, [r0]
   d59bc:	e840 3200 	strex	r2, r3, [r0]
   d59c0:	2a00      	cmp	r2, #0
   d59c2:	d1f9      	bne.n	d59b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d59c4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d59c8:	2e00      	cmp	r6, #0
   d59ca:	d03f      	beq.n	d5a4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d59cc:	4618      	mov	r0, r3
   d59ce:	f7ff fc31 	bl	d5234 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d59d2:	4607      	mov	r7, r0
   d59d4:	b120      	cbz	r0, d59e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d59d6:	4621      	mov	r1, r4
   d59d8:	4630      	mov	r0, r6
   d59da:	f7ff fe53 	bl	d5684 <_ZNKSt8functionIFvRKbEEclES1_>
   d59de:	e02e      	b.n	d5a3e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59e0:	4631      	mov	r1, r6
   d59e2:	a801      	add	r0, sp, #4
   d59e4:	f7ff ffaf 	bl	d5946 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d59e8:	7823      	ldrb	r3, [r4, #0]
   d59ea:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59ee:	2010      	movs	r0, #16
   d59f0:	f7fe fb53 	bl	d409a <_Znwj>
   d59f4:	4605      	mov	r5, r0
   d59f6:	b1d0      	cbz	r0, d5a2e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59fa:	2014      	movs	r0, #20
   d59fc:	f7fe fb4d 	bl	d409a <_Znwj>
   d5a00:	4604      	mov	r4, r0
   d5a02:	b178      	cbz	r0, d5a24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a04:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a06:	4601      	mov	r1, r0
   d5a08:	a801      	add	r0, sp, #4
   d5a0a:	f7ff fe06 	bl	d561a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a0e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a12:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a14:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a16:	9203      	str	r2, [sp, #12]
   d5a18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a1a:	60e3      	str	r3, [r4, #12]
   d5a1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a20:	9204      	str	r2, [sp, #16]
   d5a22:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a24:	4b0a      	ldr	r3, [pc, #40]	; (d5a50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5a26:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a28:	4b0a      	ldr	r3, [pc, #40]	; (d5a54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a2a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a2c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a2e:	a801      	add	r0, sp, #4
   d5a30:	f7ff fd55 	bl	d54de <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a34:	2200      	movs	r2, #0
   d5a36:	4629      	mov	r1, r5
   d5a38:	4807      	ldr	r0, [pc, #28]	; (d5a58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5a3a:	f7ff fc03 	bl	d5244 <application_thread_invoke>
   d5a3e:	4630      	mov	r0, r6
   d5a40:	f7ff fd4d 	bl	d54de <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a44:	2110      	movs	r1, #16
   d5a46:	4630      	mov	r0, r6
   d5a48:	f000 ff41 	bl	d68ce <_ZdlPvj>
        }
    }
   d5a4c:	b007      	add	sp, #28
   d5a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a50:	000d5697 	.word	0x000d5697
   d5a54:	000d5965 	.word	0x000d5965
   d5a58:	000d5453 	.word	0x000d5453

000d5a5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5a5c:	b530      	push	{r4, r5, lr}
   d5a5e:	b085      	sub	sp, #20
   d5a60:	4604      	mov	r4, r0
   d5a62:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5a64:	4668      	mov	r0, sp
   d5a66:	4611      	mov	r1, r2
   d5a68:	f7ff fdb9 	bl	d55de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5a6c:	b17c      	cbz	r4, d5a8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5a6e:	b224      	sxth	r4, r4
   d5a70:	4628      	mov	r0, r5
   d5a72:	b10d      	cbz	r5, d5a78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5a74:	f001 fedc 	bl	d7830 <strdup>
   d5a78:	9002      	str	r0, [sp, #8]
   d5a7a:	a902      	add	r1, sp, #8
   d5a7c:	4668      	mov	r0, sp
   d5a7e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5a82:	f7ff fe1f 	bl	d56c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5a86:	a802      	add	r0, sp, #8
   d5a88:	f7ff fd41 	bl	d550e <_ZN8particle5ErrorD1Ev>
   d5a8c:	e01d      	b.n	d5aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5a8e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5a90:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5a94:	f04f 0201 	mov.w	r2, #1
   d5a98:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5a9c:	42a3      	cmp	r3, r4
   d5a9e:	d103      	bne.n	d5aa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5aa0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5aa4:	2900      	cmp	r1, #0
   d5aa6:	d1f7      	bne.n	d5a98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5aa8:	d002      	beq.n	d5ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5aaa:	f88d 3008 	strb.w	r3, [sp, #8]
   d5aae:	e00c      	b.n	d5aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5ab0:	f110 010c 	adds.w	r1, r0, #12
   d5ab4:	f04f 0301 	mov.w	r3, #1
   d5ab8:	bf18      	it	ne
   d5aba:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5abc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5ac0:	3004      	adds	r0, #4
   d5ac2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5ac6:	f7ff ff71 	bl	d59ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5aca:	a801      	add	r0, sp, #4
   d5acc:	f7fe fbb6 	bl	d423c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5ad0:	b005      	add	sp, #20
   d5ad2:	bd30      	pop	{r4, r5, pc}

000d5ad4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ad4:	2200      	movs	r2, #0
   d5ad6:	4611      	mov	r1, r2
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	f7ff bc67 	b.w	d53ac <network_listening>

000d5ade <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ade:	2200      	movs	r2, #0
   d5ae0:	4611      	mov	r1, r2
   d5ae2:	6840      	ldr	r0, [r0, #4]
   d5ae4:	f7ff bc72 	b.w	d53cc <network_get_listen_timeout>

000d5ae8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ae8:	2200      	movs	r2, #0
   d5aea:	6840      	ldr	r0, [r0, #4]
   d5aec:	f7ff bc66 	b.w	d53bc <network_set_listen_timeout>

000d5af0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5af0:	2200      	movs	r2, #0
   d5af2:	f081 0101 	eor.w	r1, r1, #1
   d5af6:	6840      	ldr	r0, [r0, #4]
   d5af8:	f7ff bc50 	b.w	d539c <network_listen>

000d5afc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5afc:	2300      	movs	r3, #0
   d5afe:	461a      	mov	r2, r3
   d5b00:	4619      	mov	r1, r3
   d5b02:	6840      	ldr	r0, [r0, #4]
   d5b04:	f7ff bc42 	b.w	d538c <network_off>

000d5b08 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b08:	2300      	movs	r3, #0
   d5b0a:	461a      	mov	r2, r3
   d5b0c:	4619      	mov	r1, r3
   d5b0e:	6840      	ldr	r0, [r0, #4]
   d5b10:	f7ff bc34 	b.w	d537c <network_on>

000d5b14 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b14:	2200      	movs	r2, #0
   d5b16:	4611      	mov	r1, r2
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	f7ff bc27 	b.w	d536c <network_ready>

000d5b1e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b1e:	2200      	movs	r2, #0
   d5b20:	4611      	mov	r1, r2
   d5b22:	6840      	ldr	r0, [r0, #4]
   d5b24:	f7ff bc12 	b.w	d534c <network_connecting>

000d5b28 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	2102      	movs	r1, #2
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	f7ff bc15 	b.w	d535c <network_disconnect>

000d5b32 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b32:	2300      	movs	r3, #0
   d5b34:	461a      	mov	r2, r3
   d5b36:	6840      	ldr	r0, [r0, #4]
   d5b38:	f7ff bc00 	b.w	d533c <network_connect>

000d5b3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b3c:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b3e:	2203      	movs	r2, #3
   d5b40:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b42:	4a02      	ldr	r2, [pc, #8]	; (d5b4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b44:	601a      	str	r2, [r3, #0]
   d5b46:	4770      	bx	lr
   d5b48:	2003e374 	.word	0x2003e374
   d5b4c:	000d9f30 	.word	0x000d9f30

000d5b50 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5b50:	4770      	bx	lr

000d5b52 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b54:	4606      	mov	r6, r0
   d5b56:	4615      	mov	r5, r2
   d5b58:	460c      	mov	r4, r1
   d5b5a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b5c:	42bc      	cmp	r4, r7
   d5b5e:	d006      	beq.n	d5b6e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5b60:	6833      	ldr	r3, [r6, #0]
   d5b62:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5b66:	689b      	ldr	r3, [r3, #8]
   d5b68:	4630      	mov	r0, r6
   d5b6a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b6c:	e7f6      	b.n	d5b5c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5b6e:	4628      	mov	r0, r5
   d5b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b72 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5b72:	2200      	movs	r2, #0
   d5b74:	7c00      	ldrb	r0, [r0, #16]
   d5b76:	f7ff ba5d 	b.w	d5034 <HAL_I2C_Write_Data>

000d5b7a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5b7a:	2100      	movs	r1, #0
   d5b7c:	7c00      	ldrb	r0, [r0, #16]
   d5b7e:	f7ff ba61 	b.w	d5044 <HAL_I2C_Available_Data>

000d5b82 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5b82:	2100      	movs	r1, #0
   d5b84:	7c00      	ldrb	r0, [r0, #16]
   d5b86:	f7ff ba65 	b.w	d5054 <HAL_I2C_Read_Data>

000d5b8a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5b8a:	2100      	movs	r1, #0
   d5b8c:	7c00      	ldrb	r0, [r0, #16]
   d5b8e:	f7ff ba69 	b.w	d5064 <HAL_I2C_Peek_Data>

000d5b92 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5b92:	2100      	movs	r1, #0
   d5b94:	7c00      	ldrb	r0, [r0, #16]
   d5b96:	f7ff ba6d 	b.w	d5074 <HAL_I2C_Flush_Data>

000d5b9a <_ZN7TwoWireD0Ev>:
   d5b9a:	b510      	push	{r4, lr}
   d5b9c:	2114      	movs	r1, #20
   d5b9e:	4604      	mov	r4, r0
   d5ba0:	f000 fe95 	bl	d68ce <_ZdlPvj>
   d5ba4:	4620      	mov	r0, r4
   d5ba6:	bd10      	pop	{r4, pc}

000d5ba8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5ba8:	b510      	push	{r4, lr}
   d5baa:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5bac:	2300      	movs	r3, #0
   d5bae:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5bb4:	60a3      	str	r3, [r4, #8]
   d5bb6:	4b04      	ldr	r3, [pc, #16]	; (d5bc8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5bb8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5bba:	4608      	mov	r0, r1
   d5bbc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5bbe:	4611      	mov	r1, r2
   d5bc0:	f7ff fa68 	bl	d5094 <HAL_I2C_Init>
}
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	bd10      	pop	{r4, pc}
   d5bc8:	000d9f64 	.word	0x000d9f64

000d5bcc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5bcc:	2300      	movs	r3, #0
   d5bce:	461a      	mov	r2, r3
   d5bd0:	4619      	mov	r1, r3
   d5bd2:	7c00      	ldrb	r0, [r0, #16]
   d5bd4:	f7ff ba16 	b.w	d5004 <HAL_I2C_Begin>

000d5bd8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5bd8:	b570      	push	{r4, r5, r6, lr}
   d5bda:	460c      	mov	r4, r1
   d5bdc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5bde:	2514      	movs	r5, #20
   d5be0:	4606      	mov	r6, r0
   d5be2:	462a      	mov	r2, r5
   d5be4:	2100      	movs	r1, #0
   d5be6:	a801      	add	r0, sp, #4
   d5be8:	f001 fddf 	bl	d77aa <memset>
   d5bec:	7823      	ldrb	r3, [r4, #0]
   d5bee:	f88d 3008 	strb.w	r3, [sp, #8]
   d5bf2:	6863      	ldr	r3, [r4, #4]
   d5bf4:	9303      	str	r3, [sp, #12]
   d5bf6:	68e3      	ldr	r3, [r4, #12]
   d5bf8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5bfa:	2200      	movs	r2, #0
   d5bfc:	7a23      	ldrb	r3, [r4, #8]
   d5bfe:	7c30      	ldrb	r0, [r6, #16]
   d5c00:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5c04:	a901      	add	r1, sp, #4
   d5c06:	9305      	str	r3, [sp, #20]
   d5c08:	f7ff fa4c 	bl	d50a4 <HAL_I2C_Request_Data_Ex>
}
   d5c0c:	b006      	add	sp, #24
   d5c0e:	bd70      	pop	{r4, r5, r6, pc}

000d5c10 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5c12:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5c14:	f88d 1000 	strb.w	r1, [sp]
   d5c18:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5c1c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5c1e:	bf18      	it	ne
   d5c20:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5c22:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5c24:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5c26:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c2a:	f7ff ffd5 	bl	d5bd8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5c2e:	b005      	add	sp, #20
   d5c30:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c34 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5c34:	2301      	movs	r3, #1
   d5c36:	f7ff bfeb 	b.w	d5c10 <_ZN7TwoWire11requestFromEhjh>

000d5c3a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5c3a:	2200      	movs	r2, #0
   d5c3c:	7c00      	ldrb	r0, [r0, #16]
   d5c3e:	f7ff b9e9 	b.w	d5014 <HAL_I2C_Begin_Transmission>

000d5c42 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5c42:	2200      	movs	r2, #0
   d5c44:	7c00      	ldrb	r0, [r0, #16]
   d5c46:	f7ff b9ed 	b.w	d5024 <HAL_I2C_End_Transmission>

000d5c4a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5c4a:	2101      	movs	r1, #1
   d5c4c:	f7ff bff9 	b.w	d5c42 <_ZN7TwoWire15endTransmissionEh>

000d5c50 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5c50:	2100      	movs	r1, #0
   d5c52:	7c00      	ldrb	r0, [r0, #16]
   d5c54:	f7ff ba16 	b.w	d5084 <HAL_I2C_Is_Enabled>

000d5c58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5c58:	4770      	bx	lr

000d5c5a <_ZN9IPAddressD0Ev>:
   d5c5a:	b510      	push	{r4, lr}
   d5c5c:	2118      	movs	r1, #24
   d5c5e:	4604      	mov	r4, r0
   d5c60:	f000 fe35 	bl	d68ce <_ZdlPvj>
   d5c64:	4620      	mov	r0, r4
   d5c66:	bd10      	pop	{r4, pc}

000d5c68 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c68:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c6a:	7d03      	ldrb	r3, [r0, #20]
   d5c6c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c6e:	b08d      	sub	sp, #52	; 0x34
   d5c70:	460e      	mov	r6, r1
   d5c72:	f100 0704 	add.w	r7, r0, #4
   d5c76:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c7a:	d002      	beq.n	d5c82 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5c7c:	f100 0508 	add.w	r5, r0, #8
   d5c80:	e018      	b.n	d5cb4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5c82:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c84:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5c86:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c8a:	232f      	movs	r3, #47	; 0x2f
   d5c8c:	462a      	mov	r2, r5
   d5c8e:	200a      	movs	r0, #10
   d5c90:	f7ff fa10 	bl	d50b4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c94:	4628      	mov	r0, r5
   d5c96:	f001 fde6 	bl	d7866 <strlen>
   d5c9a:	6833      	ldr	r3, [r6, #0]
   d5c9c:	4602      	mov	r2, r0
   d5c9e:	68db      	ldr	r3, [r3, #12]
   d5ca0:	4629      	mov	r1, r5
   d5ca2:	4630      	mov	r0, r6
   d5ca4:	4798      	blx	r3
   d5ca6:	e00f      	b.n	d5cc8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5ca8:	b124      	cbz	r4, d5cb4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5caa:	212e      	movs	r1, #46	; 0x2e
   d5cac:	4630      	mov	r0, r6
   d5cae:	f000 f9d5 	bl	d605c <_ZN5Print5printEc>
   d5cb2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5cb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5cb8:	220a      	movs	r2, #10
   d5cba:	4630      	mov	r0, r6
   d5cbc:	f000 f9e7 	bl	d608e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5cc0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5cc2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5cc4:	d1f0      	bne.n	d5ca8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5cc6:	4620      	mov	r0, r4
    }
    return n;
}
   d5cc8:	b00d      	add	sp, #52	; 0x34
   d5cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ccc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5ccc:	b510      	push	{r4, lr}
   d5cce:	4b05      	ldr	r3, [pc, #20]	; (d5ce4 <_ZN9IPAddressC1Ev+0x18>)
   d5cd0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5cd2:	2211      	movs	r2, #17
   d5cd4:	f840 3b04 	str.w	r3, [r0], #4
   d5cd8:	2100      	movs	r1, #0
   d5cda:	f001 fd66 	bl	d77aa <memset>
{
    clear();
}
   d5cde:	4620      	mov	r0, r4
   d5ce0:	bd10      	pop	{r4, pc}
   d5ce2:	bf00      	nop
   d5ce4:	000d9f8c 	.word	0x000d9f8c

000d5ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5ce8:	4603      	mov	r3, r0
   d5cea:	4a07      	ldr	r2, [pc, #28]	; (d5d08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5cec:	b510      	push	{r4, lr}
   d5cee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5cf2:	f101 0210 	add.w	r2, r1, #16
   d5cf6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5cfa:	f843 4b04 	str.w	r4, [r3], #4
   d5cfe:	4291      	cmp	r1, r2
   d5d00:	d1f9      	bne.n	d5cf6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5d02:	780a      	ldrb	r2, [r1, #0]
   d5d04:	701a      	strb	r2, [r3, #0]
}
   d5d06:	bd10      	pop	{r4, pc}
   d5d08:	000d9f8c 	.word	0x000d9f8c

000d5d0c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5d0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5d0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5d12:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5d16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5d1a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5d1e:	2304      	movs	r3, #4
   d5d20:	6041      	str	r1, [r0, #4]
   d5d22:	7503      	strb	r3, [r0, #20]
   d5d24:	bd10      	pop	{r4, pc}

000d5d26 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5d26:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5d28:	780d      	ldrb	r5, [r1, #0]
   d5d2a:	788b      	ldrb	r3, [r1, #2]
   d5d2c:	784a      	ldrb	r2, [r1, #1]
   d5d2e:	78c9      	ldrb	r1, [r1, #3]
   d5d30:	9100      	str	r1, [sp, #0]
   d5d32:	4629      	mov	r1, r5
   d5d34:	f7ff ffea 	bl	d5d0c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5d38:	b003      	add	sp, #12
   d5d3a:	bd30      	pop	{r4, r5, pc}

000d5d3c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d3c:	4b01      	ldr	r3, [pc, #4]	; (d5d44 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d3e:	4a02      	ldr	r2, [pc, #8]	; (d5d48 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d40:	601a      	str	r2, [r3, #0]
   d5d42:	4770      	bx	lr
   d5d44:	2003e37c 	.word	0x2003e37c
   d5d48:	000da00b 	.word	0x000da00b

000d5d4c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	4611      	mov	r1, r2
   d5d50:	6840      	ldr	r0, [r0, #4]
   d5d52:	f7ff bb2b 	b.w	d53ac <network_listening>

000d5d56 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d56:	2200      	movs	r2, #0
   d5d58:	4611      	mov	r1, r2
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	f7ff bb36 	b.w	d53cc <network_get_listen_timeout>

000d5d60 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d60:	2200      	movs	r2, #0
   d5d62:	6840      	ldr	r0, [r0, #4]
   d5d64:	f7ff bb2a 	b.w	d53bc <network_set_listen_timeout>

000d5d68 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d68:	2200      	movs	r2, #0
   d5d6a:	f081 0101 	eor.w	r1, r1, #1
   d5d6e:	6840      	ldr	r0, [r0, #4]
   d5d70:	f7ff bb14 	b.w	d539c <network_listen>

000d5d74 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5d74:	2300      	movs	r3, #0
   d5d76:	461a      	mov	r2, r3
   d5d78:	2101      	movs	r1, #1
   d5d7a:	6840      	ldr	r0, [r0, #4]
   d5d7c:	f7ff bb06 	b.w	d538c <network_off>

000d5d80 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d80:	2300      	movs	r3, #0
   d5d82:	461a      	mov	r2, r3
   d5d84:	4619      	mov	r1, r3
   d5d86:	6840      	ldr	r0, [r0, #4]
   d5d88:	f7ff baf8 	b.w	d537c <network_on>

000d5d8c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d8c:	2200      	movs	r2, #0
   d5d8e:	4611      	mov	r1, r2
   d5d90:	6840      	ldr	r0, [r0, #4]
   d5d92:	f7ff baeb 	b.w	d536c <network_ready>

000d5d96 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d96:	2200      	movs	r2, #0
   d5d98:	4611      	mov	r1, r2
   d5d9a:	6840      	ldr	r0, [r0, #4]
   d5d9c:	f7ff bad6 	b.w	d534c <network_connecting>

000d5da0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5da0:	2200      	movs	r2, #0
   d5da2:	2102      	movs	r1, #2
   d5da4:	6840      	ldr	r0, [r0, #4]
   d5da6:	f7ff bad9 	b.w	d535c <network_disconnect>

000d5daa <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5daa:	2300      	movs	r3, #0
   d5dac:	461a      	mov	r2, r3
   d5dae:	6840      	ldr	r0, [r0, #4]
   d5db0:	f7ff bac4 	b.w	d533c <network_connect>

000d5db4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5db4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5db6:	4605      	mov	r5, r0
   d5db8:	b188      	cbz	r0, d5dde <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5dba:	6804      	ldr	r4, [r0, #0]
   d5dbc:	b14c      	cbz	r4, d5dd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5dbe:	68a3      	ldr	r3, [r4, #8]
   d5dc0:	b11b      	cbz	r3, d5dca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5dc2:	2203      	movs	r2, #3
   d5dc4:	4621      	mov	r1, r4
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5dca:	2110      	movs	r1, #16
   d5dcc:	4620      	mov	r0, r4
   d5dce:	f000 fd7e 	bl	d68ce <_ZdlPvj>
   d5dd2:	4628      	mov	r0, r5
   d5dd4:	2114      	movs	r1, #20
      }
   d5dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5dda:	f000 bd78 	b.w	d68ce <_ZdlPvj>
   d5dde:	bd38      	pop	{r3, r4, r5, pc}

000d5de0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5de0:	b110      	cbz	r0, d5de8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5de2:	6803      	ldr	r3, [r0, #0]
   d5de4:	685b      	ldr	r3, [r3, #4]
   d5de6:	4718      	bx	r3
   d5de8:	4770      	bx	lr

000d5dea <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5dea:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5dec:	6803      	ldr	r3, [r0, #0]
   d5dee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5df0:	b1bb      	cbz	r3, d5e22 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5df2:	6858      	ldr	r0, [r3, #4]
   d5df4:	f7ff f866 	bl	d4ec4 <os_thread_is_current>
   d5df8:	b978      	cbnz	r0, d5e1a <_ZN6ThreadD1Ev+0x30>
   d5dfa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5dfc:	7c5a      	ldrb	r2, [r3, #17]
   d5dfe:	b912      	cbnz	r2, d5e06 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5e00:	6858      	ldr	r0, [r3, #4]
   d5e02:	f7ff f867 	bl	d4ed4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5e06:	6823      	ldr	r3, [r4, #0]
   d5e08:	6858      	ldr	r0, [r3, #4]
   d5e0a:	f7ff f86b 	bl	d4ee4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e0e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e10:	2300      	movs	r3, #0
   d5e12:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e14:	b128      	cbz	r0, d5e22 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5e16:	f7ff ffcd 	bl	d5db4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e1a:	6820      	ldr	r0, [r4, #0]
   d5e1c:	b108      	cbz	r0, d5e22 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5e1e:	f7ff ffc9 	bl	d5db4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5e22:	4620      	mov	r0, r4
   d5e24:	bd10      	pop	{r4, pc}

000d5e26 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5e26:	b538      	push	{r3, r4, r5, lr}
   d5e28:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e2a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5e2e:	b108      	cbz	r0, d5e34 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5e30:	f7fe f937 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e34:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5e38:	b108      	cbz	r0, d5e3e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5e3a:	f7ff f863 	bl	d4f04 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e3e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5e42:	b135      	cbz	r5, d5e52 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e44:	4628      	mov	r0, r5
   d5e46:	f7ff ffd0 	bl	d5dea <_ZN6ThreadD1Ev>
   d5e4a:	2104      	movs	r1, #4
   d5e4c:	4628      	mov	r0, r5
   d5e4e:	f000 fd3e 	bl	d68ce <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e52:	6820      	ldr	r0, [r4, #0]
   d5e54:	b108      	cbz	r0, d5e5a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5e56:	f7ff ffc3 	bl	d5de0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e60 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5e60:	b510      	push	{r4, lr}
   d5e62:	4b04      	ldr	r3, [pc, #16]	; (d5e74 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5e64:	4604      	mov	r4, r0
   d5e66:	f840 3b08 	str.w	r3, [r0], #8
   d5e6a:	f7ff ffdc 	bl	d5e26 <_ZN5spark11MeshPublishD1Ev>
   d5e6e:	4620      	mov	r0, r4
   d5e70:	bd10      	pop	{r4, pc}
   d5e72:	bf00      	nop
   d5e74:	000da080 	.word	0x000da080

000d5e78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5e78:	b538      	push	{r3, r4, r5, lr}
   d5e7a:	4c0e      	ldr	r4, [pc, #56]	; (d5eb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5e7c:	4b0e      	ldr	r3, [pc, #56]	; (d5eb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5e7e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e80:	2500      	movs	r5, #0
   d5e82:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5e84:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5e88:	6063      	str	r3, [r4, #4]
   d5e8a:	60a5      	str	r5, [r4, #8]
   d5e8c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e90:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5e94:	f7ff f82e 	bl	d4ef4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5e98:	4b08      	ldr	r3, [pc, #32]	; (d5ebc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5e9a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5e9e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5ea2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	4a06      	ldr	r2, [pc, #24]	; (d5ec0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5ea8:	4906      	ldr	r1, [pc, #24]	; (d5ec4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5eae:	f000 bd09 	b.w	d68c4 <__aeabi_atexit>
   d5eb2:	bf00      	nop
   d5eb4:	2003e380 	.word	0x2003e380
   d5eb8:	000da0b4 	.word	0x000da0b4
   d5ebc:	000da080 	.word	0x000da080
   d5ec0:	2003e260 	.word	0x2003e260
   d5ec4:	000d5e61 	.word	0x000d5e61

000d5ec8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ec8:	2300      	movs	r3, #0
   d5eca:	461a      	mov	r2, r3
   d5ecc:	6840      	ldr	r0, [r0, #4]
   d5ece:	f7ff ba35 	b.w	d533c <network_connect>

000d5ed2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ed2:	2200      	movs	r2, #0
   d5ed4:	2102      	movs	r1, #2
   d5ed6:	6840      	ldr	r0, [r0, #4]
   d5ed8:	f7ff ba40 	b.w	d535c <network_disconnect>

000d5edc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5edc:	2200      	movs	r2, #0
   d5ede:	4611      	mov	r1, r2
   d5ee0:	6840      	ldr	r0, [r0, #4]
   d5ee2:	f7ff ba33 	b.w	d534c <network_connecting>

000d5ee6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5ee6:	2200      	movs	r2, #0
   d5ee8:	4611      	mov	r1, r2
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f7ff ba3e 	b.w	d536c <network_ready>

000d5ef0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ef0:	2300      	movs	r3, #0
   d5ef2:	461a      	mov	r2, r3
   d5ef4:	4619      	mov	r1, r3
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	f7ff ba40 	b.w	d537c <network_on>

000d5efc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5efc:	2300      	movs	r3, #0
   d5efe:	461a      	mov	r2, r3
   d5f00:	4619      	mov	r1, r3
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	f7ff ba42 	b.w	d538c <network_off>

000d5f08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f08:	2200      	movs	r2, #0
   d5f0a:	f081 0101 	eor.w	r1, r1, #1
   d5f0e:	6840      	ldr	r0, [r0, #4]
   d5f10:	f7ff ba44 	b.w	d539c <network_listen>

000d5f14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f14:	2200      	movs	r2, #0
   d5f16:	6840      	ldr	r0, [r0, #4]
   d5f18:	f7ff ba50 	b.w	d53bc <network_set_listen_timeout>

000d5f1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	4611      	mov	r1, r2
   d5f20:	6840      	ldr	r0, [r0, #4]
   d5f22:	f7ff ba53 	b.w	d53cc <network_get_listen_timeout>

000d5f26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f26:	2200      	movs	r2, #0
   d5f28:	4611      	mov	r1, r2
   d5f2a:	6840      	ldr	r0, [r0, #4]
   d5f2c:	f7ff ba3e 	b.w	d53ac <network_listening>

000d5f30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f34:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f36:	b095      	sub	sp, #84	; 0x54
   d5f38:	4616      	mov	r6, r2
   d5f3a:	460d      	mov	r5, r1
   d5f3c:	4607      	mov	r7, r0
    IPAddress addr;
   d5f3e:	f7ff fec5 	bl	d5ccc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5f42:	4621      	mov	r1, r4
   d5f44:	2220      	movs	r2, #32
   d5f46:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f48:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f4a:	f001 fc2e 	bl	d77aa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f4e:	2340      	movs	r3, #64	; 0x40
   d5f50:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5f52:	4621      	mov	r1, r4
   d5f54:	466b      	mov	r3, sp
   d5f56:	aa0c      	add	r2, sp, #48	; 0x30
   d5f58:	4630      	mov	r0, r6
   d5f5a:	f7ff f8bb 	bl	d50d4 <netdb_getaddrinfo>
    if (!r) {
   d5f5e:	4604      	mov	r4, r0
   d5f60:	2800      	cmp	r0, #0
   d5f62:	d144      	bne.n	d5fee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f64:	4602      	mov	r2, r0
   d5f66:	2101      	movs	r1, #1
   d5f68:	6868      	ldr	r0, [r5, #4]
   d5f6a:	f7ff f9ff 	bl	d536c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f6e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f70:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f72:	4622      	mov	r2, r4
   d5f74:	6868      	ldr	r0, [r5, #4]
   d5f76:	f7ff f9f9 	bl	d536c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f7a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f7c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5f7e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f80:	2e00      	cmp	r6, #0
   d5f82:	d034      	beq.n	d5fee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5f84:	2900      	cmp	r1, #0
   d5f86:	d132      	bne.n	d5fee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f88:	6873      	ldr	r3, [r6, #4]
   d5f8a:	2b02      	cmp	r3, #2
   d5f8c:	d002      	beq.n	d5f94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5f8e:	2b0a      	cmp	r3, #10
   d5f90:	d009      	beq.n	d5fa6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5f92:	e02a      	b.n	d5fea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5f94:	f1b8 0f00 	cmp.w	r8, #0
   d5f98:	d027      	beq.n	d5fea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5f9a:	6971      	ldr	r1, [r6, #20]
   d5f9c:	4638      	mov	r0, r7
   d5f9e:	3104      	adds	r1, #4
   d5fa0:	f7ff fec1 	bl	d5d26 <_ZN9IPAddressaSEPKh>
   d5fa4:	e020      	b.n	d5fe8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5fa6:	f1b9 0f00 	cmp.w	r9, #0
   d5faa:	d01e      	beq.n	d5fea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5fac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5fae:	2211      	movs	r2, #17
   d5fb0:	a801      	add	r0, sp, #4
   d5fb2:	f001 fbfa 	bl	d77aa <memset>
                    a.v = 6;
   d5fb6:	2306      	movs	r3, #6
   d5fb8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fbc:	ad01      	add	r5, sp, #4
   d5fbe:	f104 0308 	add.w	r3, r4, #8
   d5fc2:	3418      	adds	r4, #24
   d5fc4:	6818      	ldr	r0, [r3, #0]
   d5fc6:	6859      	ldr	r1, [r3, #4]
   d5fc8:	462a      	mov	r2, r5
   d5fca:	c203      	stmia	r2!, {r0, r1}
   d5fcc:	3308      	adds	r3, #8
   d5fce:	42a3      	cmp	r3, r4
   d5fd0:	4615      	mov	r5, r2
   d5fd2:	d1f7      	bne.n	d5fc4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5fd4:	a901      	add	r1, sp, #4
   d5fd6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5fd8:	ad07      	add	r5, sp, #28
   d5fda:	f7ff fe85 	bl	d5ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fe0:	1d3c      	adds	r4, r7, #4
   d5fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fe4:	682b      	ldr	r3, [r5, #0]
   d5fe6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5fe8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5fea:	69f6      	ldr	r6, [r6, #28]
   d5fec:	e7c8      	b.n	d5f80 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5fee:	9800      	ldr	r0, [sp, #0]
   d5ff0:	f7ff f868 	bl	d50c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ff4:	4638      	mov	r0, r7
   d5ff6:	b015      	add	sp, #84	; 0x54
   d5ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ffc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ffc:	4b02      	ldr	r3, [pc, #8]	; (d6008 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ffe:	4a03      	ldr	r2, [pc, #12]	; (d600c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6000:	601a      	str	r2, [r3, #0]
   d6002:	2200      	movs	r2, #0
   d6004:	605a      	str	r2, [r3, #4]
   d6006:	4770      	bx	lr
   d6008:	2003e554 	.word	0x2003e554
   d600c:	000da0b4 	.word	0x000da0b4

000d6010 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6012:	4606      	mov	r6, r0
   d6014:	460d      	mov	r5, r1
   d6016:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6018:	2400      	movs	r4, #0
  while (size--) {
   d601a:	42bd      	cmp	r5, r7
   d601c:	d00c      	beq.n	d6038 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d601e:	6833      	ldr	r3, [r6, #0]
   d6020:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6024:	689b      	ldr	r3, [r3, #8]
   d6026:	4630      	mov	r0, r6
   d6028:	4798      	blx	r3
     if (chunk>=0)
   d602a:	2800      	cmp	r0, #0
   d602c:	db01      	blt.n	d6032 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d602e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6030:	e7f3      	b.n	d601a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6032:	2c00      	cmp	r4, #0
   d6034:	bf08      	it	eq
   d6036:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6038:	4620      	mov	r0, r4
   d603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d603c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d603c:	b570      	push	{r4, r5, r6, lr}
   d603e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6040:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6042:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6044:	b149      	cbz	r1, d605a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6046:	f001 fc0e 	bl	d7866 <strlen>
   d604a:	682b      	ldr	r3, [r5, #0]
   d604c:	4602      	mov	r2, r0
   d604e:	4621      	mov	r1, r4
   d6050:	4628      	mov	r0, r5
   d6052:	68db      	ldr	r3, [r3, #12]
    }
   d6054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6058:	4718      	bx	r3
    }
   d605a:	bd70      	pop	{r4, r5, r6, pc}

000d605c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d605c:	6803      	ldr	r3, [r0, #0]
   d605e:	689b      	ldr	r3, [r3, #8]
   d6060:	4718      	bx	r3

000d6062 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6062:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6064:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6066:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6068:	f7ff fff8 	bl	d605c <_ZN5Print5printEc>
  n += print('\n');
   d606c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d606e:	4604      	mov	r4, r0
  n += print('\n');
   d6070:	4628      	mov	r0, r5
   d6072:	f7ff fff3 	bl	d605c <_ZN5Print5printEc>
  return n;
}
   d6076:	4420      	add	r0, r4
   d6078:	bd38      	pop	{r3, r4, r5, pc}

000d607a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d607a:	b538      	push	{r3, r4, r5, lr}
   d607c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d607e:	f7ff ffdd 	bl	d603c <_ZN5Print5writeEPKc>
   d6082:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6084:	4628      	mov	r0, r5
   d6086:	f7ff ffec 	bl	d6062 <_ZN5Print7printlnEv>
  return n;
}
   d608a:	4420      	add	r0, r4
   d608c:	bd38      	pop	{r3, r4, r5, pc}

000d608e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d608e:	b530      	push	{r4, r5, lr}
   d6090:	b08b      	sub	sp, #44	; 0x2c
   d6092:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6094:	2100      	movs	r1, #0
   d6096:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d609a:	2a01      	cmp	r2, #1
   d609c:	bf98      	it	ls
   d609e:	220a      	movls	r2, #10
   d60a0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d60a4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d60a8:	fb05 3312 	mls	r3, r5, r2, r3
   d60ac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60b0:	2b09      	cmp	r3, #9
   d60b2:	bf94      	ite	ls
   d60b4:	3330      	addls	r3, #48	; 0x30
   d60b6:	3337      	addhi	r3, #55	; 0x37
   d60b8:	b2db      	uxtb	r3, r3
   d60ba:	4621      	mov	r1, r4
   d60bc:	f804 3901 	strb.w	r3, [r4], #-1
   d60c0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d60c2:	2d00      	cmp	r5, #0
   d60c4:	d1ee      	bne.n	d60a4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d60c6:	f7ff ffb9 	bl	d603c <_ZN5Print5writeEPKc>
}
   d60ca:	b00b      	add	sp, #44	; 0x2c
   d60cc:	bd30      	pop	{r4, r5, pc}

000d60ce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d60ce:	b510      	push	{r4, lr}
   d60d0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60d2:	f7ff fa04 	bl	d54de <_ZNSt14_Function_baseD1Ev>
   d60d6:	4620      	mov	r0, r4
   d60d8:	bd10      	pop	{r4, pc}
	...

000d60dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60dc:	4803      	ldr	r0, [pc, #12]	; (d60ec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d60de:	4a04      	ldr	r2, [pc, #16]	; (d60f0 <_GLOBAL__sub_I_RGB+0x14>)
   d60e0:	4904      	ldr	r1, [pc, #16]	; (d60f4 <_GLOBAL__sub_I_RGB+0x18>)
   d60e2:	2300      	movs	r3, #0
   d60e4:	6083      	str	r3, [r0, #8]
   d60e6:	f000 bbed 	b.w	d68c4 <__aeabi_atexit>
   d60ea:	bf00      	nop
   d60ec:	2003e55c 	.word	0x2003e55c
   d60f0:	2003e260 	.word	0x2003e260
   d60f4:	000d60cf 	.word	0x000d60cf

000d60f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d60f8:	b510      	push	{r4, lr}
   d60fa:	4604      	mov	r4, r0
{
    _spi = spi;
   d60fc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d60fe:	4608      	mov	r0, r1
   d6100:	f7fe fff0 	bl	d50e4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6104:	2300      	movs	r3, #0
   d6106:	6063      	str	r3, [r4, #4]
}
   d6108:	4620      	mov	r0, r4
   d610a:	bd10      	pop	{r4, pc}

000d610c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d610c:	7800      	ldrb	r0, [r0, #0]
   d610e:	f7fe bff1 	b.w	d50f4 <HAL_SPI_Is_Enabled>

000d6112 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6112:	b510      	push	{r4, lr}
   d6114:	4604      	mov	r4, r0
{
	free(buffer);
   d6116:	6800      	ldr	r0, [r0, #0]
   d6118:	f7ff f968 	bl	d53ec <free>
}
   d611c:	4620      	mov	r0, r4
   d611e:	bd10      	pop	{r4, pc}

000d6120 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6120:	b510      	push	{r4, lr}
   d6122:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6124:	6800      	ldr	r0, [r0, #0]
   d6126:	b108      	cbz	r0, d612c <_ZN6String10invalidateEv+0xc>
   d6128:	f7ff f960 	bl	d53ec <free>
	buffer = NULL;
   d612c:	2300      	movs	r3, #0
   d612e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6130:	60a3      	str	r3, [r4, #8]
   d6132:	6063      	str	r3, [r4, #4]
   d6134:	bd10      	pop	{r4, pc}

000d6136 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6136:	b538      	push	{r3, r4, r5, lr}
   d6138:	4604      	mov	r4, r0
   d613a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d613c:	6800      	ldr	r0, [r0, #0]
   d613e:	3101      	adds	r1, #1
   d6140:	f7ff f95c 	bl	d53fc <realloc>
	if (newbuffer) {
   d6144:	b110      	cbz	r0, d614c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6146:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d614a:	2001      	movs	r0, #1
	}
	return 0;
}
   d614c:	bd38      	pop	{r3, r4, r5, pc}

000d614e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d614e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6150:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6152:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6154:	b113      	cbz	r3, d615c <_ZN6String7reserveEj+0xe>
   d6156:	6843      	ldr	r3, [r0, #4]
   d6158:	428b      	cmp	r3, r1
   d615a:	d207      	bcs.n	d616c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d615c:	4620      	mov	r0, r4
   d615e:	f7ff ffea 	bl	d6136 <_ZN6String12changeBufferEj>
   d6162:	b120      	cbz	r0, d616e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6164:	68a3      	ldr	r3, [r4, #8]
   d6166:	b90b      	cbnz	r3, d616c <_ZN6String7reserveEj+0x1e>
   d6168:	6822      	ldr	r2, [r4, #0]
   d616a:	7013      	strb	r3, [r2, #0]
   d616c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d616e:	bd10      	pop	{r4, pc}

000d6170 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6170:	b570      	push	{r4, r5, r6, lr}
   d6172:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6174:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6176:	4604      	mov	r4, r0
   d6178:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d617a:	f7ff ffe8 	bl	d614e <_ZN6String7reserveEj>
   d617e:	b918      	cbnz	r0, d6188 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6180:	4620      	mov	r0, r4
   d6182:	f7ff ffcd 	bl	d6120 <_ZN6String10invalidateEv>
		return *this;
   d6186:	e009      	b.n	d619c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6188:	462a      	mov	r2, r5
   d618a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d618c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d618e:	6820      	ldr	r0, [r4, #0]
   d6190:	f001 fb00 	bl	d7794 <memcpy>
	buffer[len] = 0;
   d6194:	6822      	ldr	r2, [r4, #0]
   d6196:	68a3      	ldr	r3, [r4, #8]
   d6198:	2100      	movs	r1, #0
   d619a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d619c:	4620      	mov	r0, r4
   d619e:	bd70      	pop	{r4, r5, r6, pc}

000d61a0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d61a0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61a2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d61a4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61a6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61a8:	6043      	str	r3, [r0, #4]
	len = 0;
   d61aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61ac:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d61ae:	460d      	mov	r5, r1
   d61b0:	b139      	cbz	r1, d61c2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d61b2:	4608      	mov	r0, r1
   d61b4:	f001 fb57 	bl	d7866 <strlen>
   d61b8:	4629      	mov	r1, r5
   d61ba:	4602      	mov	r2, r0
   d61bc:	4620      	mov	r0, r4
   d61be:	f7ff ffd7 	bl	d6170 <_ZN6String4copyEPKcj>
}
   d61c2:	4620      	mov	r0, r4
   d61c4:	bd38      	pop	{r3, r4, r5, pc}

000d61c6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d61c6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d61c8:	b510      	push	{r4, lr}
   d61ca:	460b      	mov	r3, r1
   d61cc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d61ce:	d007      	beq.n	d61e0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d61d0:	6809      	ldr	r1, [r1, #0]
   d61d2:	b119      	cbz	r1, d61dc <_ZN6StringaSERKS_+0x16>
   d61d4:	689a      	ldr	r2, [r3, #8]
   d61d6:	f7ff ffcb 	bl	d6170 <_ZN6String4copyEPKcj>
   d61da:	e001      	b.n	d61e0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d61dc:	f7ff ffa0 	bl	d6120 <_ZN6String10invalidateEv>

	return *this;
}
   d61e0:	4620      	mov	r0, r4
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61e4:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61e6:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61e8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61ea:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61ec:	6043      	str	r3, [r0, #4]
	len = 0;
   d61ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61f0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d61f2:	f7ff ffe8 	bl	d61c6 <_ZN6StringaSERKS_>
}
   d61f6:	4620      	mov	r0, r4
   d61f8:	bd10      	pop	{r4, pc}

000d61fa <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61fa:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61fc:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61fe:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6200:	b912      	cbnz	r2, d6208 <_ZNK6String6equalsEPKc+0xe>
   d6202:	b919      	cbnz	r1, d620c <_ZNK6String6equalsEPKc+0x12>
   d6204:	2001      	movs	r0, #1
   d6206:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6208:	b911      	cbnz	r1, d6210 <_ZNK6String6equalsEPKc+0x16>
   d620a:	6803      	ldr	r3, [r0, #0]
   d620c:	7818      	ldrb	r0, [r3, #0]
   d620e:	e002      	b.n	d6216 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6210:	6800      	ldr	r0, [r0, #0]
   d6212:	f001 fafb 	bl	d780c <strcmp>
   d6216:	fab0 f080 	clz	r0, r0
   d621a:	0940      	lsrs	r0, r0, #5
}
   d621c:	bd08      	pop	{r3, pc}

000d621e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d621e:	b570      	push	{r4, r5, r6, lr}
   d6220:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6222:	b19a      	cbz	r2, d624c <_ZNK6String8getBytesEPhjj+0x2e>
   d6224:	b191      	cbz	r1, d624c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6226:	6885      	ldr	r5, [r0, #8]
   d6228:	429d      	cmp	r5, r3
   d622a:	d802      	bhi.n	d6232 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d622c:	2300      	movs	r3, #0
   d622e:	700b      	strb	r3, [r1, #0]
		return;
   d6230:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6232:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6234:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6236:	6801      	ldr	r1, [r0, #0]
   d6238:	42ac      	cmp	r4, r5
   d623a:	bf28      	it	cs
   d623c:	462c      	movcs	r4, r5
   d623e:	4419      	add	r1, r3
   d6240:	4622      	mov	r2, r4
   d6242:	4630      	mov	r0, r6
   d6244:	f001 fb2c 	bl	d78a0 <strncpy>
	buf[n] = 0;
   d6248:	2300      	movs	r3, #0
   d624a:	5533      	strb	r3, [r6, r4]
   d624c:	bd70      	pop	{r4, r5, r6, pc}

000d624e <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d624e:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d6250:	6800      	ldr	r0, [r0, #0]
   d6252:	b130      	cbz	r0, d6262 <_ZNK6String7toFloatEv+0x14>
   d6254:	f001 f98c 	bl	d7570 <atof>
   d6258:	ec51 0b10 	vmov	r0, r1, d0
   d625c:	f001 f938 	bl	d74d0 <__aeabi_d2f>
   d6260:	e000      	b.n	d6264 <_ZNK6String7toFloatEv+0x16>
	return 0;
   d6262:	2000      	movs	r0, #0
}
   d6264:	ee00 0a10 	vmov	s0, r0
   d6268:	bd08      	pop	{r3, pc}

000d626a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d626a:	4601      	mov	r1, r0
   d626c:	2200      	movs	r2, #0
   d626e:	208c      	movs	r0, #140	; 0x8c
   d6270:	f7fe be58 	b.w	d4f24 <HAL_Core_System_Reset_Ex>

000d6274 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6274:	2000      	movs	r0, #0
   d6276:	f7ff bff8 	b.w	d626a <_ZN11SystemClass5resetEm>
	...

000d627c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d627c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d627e:	4c09      	ldr	r4, [pc, #36]	; (d62a4 <_GLOBAL__sub_I_System+0x28>)
   d6280:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6282:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6286:	6020      	str	r0, [r4, #0]
   d6288:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d628a:	71a0      	strb	r0, [r4, #6]
   d628c:	8120      	strh	r0, [r4, #8]
   d628e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6290:	f7fe ffb8 	bl	d5204 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6294:	4620      	mov	r0, r4
   d6296:	4a04      	ldr	r2, [pc, #16]	; (d62a8 <_GLOBAL__sub_I_System+0x2c>)
   d6298:	4904      	ldr	r1, [pc, #16]	; (d62ac <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d629e:	f000 bb11 	b.w	d68c4 <__aeabi_atexit>
   d62a2:	bf00      	nop
   d62a4:	2003e56c 	.word	0x2003e56c
   d62a8:	2003e260 	.word	0x2003e260
   d62ac:	000d40d5 	.word	0x000d40d5

000d62b0 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d62b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d62b2:	4b14      	ldr	r3, [pc, #80]	; (d6304 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d62b4:	4f14      	ldr	r7, [pc, #80]	; (d6308 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d62b6:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d62b8:	4b14      	ldr	r3, [pc, #80]	; (d630c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d62ba:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d62bc:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d62be:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d62c0:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d62c2:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d62c4:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d62c6:	d01b      	beq.n	d6300 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d62c8:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d62ca:	ad01      	add	r5, sp, #4
   d62cc:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d62d0:	f001 f964 	bl	d759c <localtime>
	calendar_time->tm_year += 1900;
   d62d4:	6943      	ldr	r3, [r0, #20]
   d62d6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d62da:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d62dc:	4604      	mov	r4, r0
   d62de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62e6:	f8d4 e000 	ldr.w	lr, [r4]
   d62ea:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62ee:	ad01      	add	r5, sp, #4
   d62f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62f2:	4c07      	ldr	r4, [pc, #28]	; (d6310 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d62f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d62fa:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62fc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d6300:	b00b      	add	sp, #44	; 0x2c
   d6302:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6304:	2003e5a8 	.word	0x2003e5a8
   d6308:	2003e5a4 	.word	0x2003e5a4
   d630c:	2003e5a0 	.word	0x2003e5a0
   d6310:	2003e578 	.word	0x2003e578

000d6314 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6314:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6316:	2000      	movs	r0, #0
   d6318:	f7ff f800 	bl	d531c <spark_sync_time_pending>
   d631c:	b128      	cbz	r0, d632a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d631e:	f7fe ffd5 	bl	d52cc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6322:	f080 0001 	eor.w	r0, r0, #1
   d6326:	b2c0      	uxtb	r0, r0
   d6328:	bd08      	pop	{r3, pc}
   d632a:	2001      	movs	r0, #1
    }
   d632c:	bd08      	pop	{r3, pc}

000d632e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d632e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6330:	2000      	movs	r0, #0
   d6332:	f7fe fe37 	bl	d4fa4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6336:	4604      	mov	r4, r0
   d6338:	b968      	cbnz	r0, d6356 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d633a:	f7fe ff5b 	bl	d51f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d633e:	2801      	cmp	r0, #1
   d6340:	d10b      	bne.n	d635a <_ZN9TimeClass7isValidEv+0x2c>
   d6342:	4620      	mov	r0, r4
   d6344:	f7fe ff86 	bl	d5254 <system_thread_get_state>
   d6348:	b938      	cbnz	r0, d635a <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d634a:	f7ff ffe3 	bl	d6314 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d634e:	b930      	cbnz	r0, d635e <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6350:	f7fe ffac 	bl	d52ac <spark_process>
   d6354:	e7f9      	b.n	d634a <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6356:	2001      	movs	r0, #1
   d6358:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d635a:	2000      	movs	r0, #0
   d635c:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d635e:	f7ff ffd9 	bl	d6314 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6362:	2000      	movs	r0, #0
   d6364:	f7fe fe1e 	bl	d4fa4 <HAL_RTC_Time_Is_Valid>
   d6368:	3000      	adds	r0, #0
   d636a:	bf18      	it	ne
   d636c:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6370:	b508      	push	{r3, lr}
    (void)isValid();
   d6372:	f7ff ffdc 	bl	d632e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d637a:	f7fe bdeb 	b.w	d4f54 <HAL_RTC_Get_UnixTime>
	...

000d6380 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d6380:	b508      	push	{r3, lr}
	return hour(now());
   d6382:	f7ff fff5 	bl	d6370 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6386:	f7ff ff93 	bl	d62b0 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d638a:	4b01      	ldr	r3, [pc, #4]	; (d6390 <_ZN9TimeClass4hourEv+0x10>)
   d638c:	6898      	ldr	r0, [r3, #8]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	2003e578 	.word	0x2003e578

000d6394 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6394:	b508      	push	{r3, lr}
	return minute(now());
   d6396:	f7ff ffeb 	bl	d6370 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d639a:	f7ff ff89 	bl	d62b0 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d639e:	4b01      	ldr	r3, [pc, #4]	; (d63a4 <_ZN9TimeClass6minuteEv+0x10>)
   d63a0:	6858      	ldr	r0, [r3, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	2003e578 	.word	0x2003e578

000d63a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63a8:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63ae:	601a      	str	r2, [r3, #0]
   d63b0:	4770      	bx	lr
   d63b2:	bf00      	nop
   d63b4:	2003e170 	.word	0x2003e170
   d63b8:	2003e59c 	.word	0x2003e59c

000d63bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d63bc:	4770      	bx	lr

000d63be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63be:	7441      	strb	r1, [r0, #17]
   d63c0:	4770      	bx	lr

000d63c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d63c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d63c4:	7c00      	ldrb	r0, [r0, #16]
   d63c6:	f7fe fed5 	bl	d5174 <HAL_USART_Available_Data_For_Write>
}
   d63ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63ce:	bd08      	pop	{r3, pc}

000d63d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d63d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d63d2:	7c00      	ldrb	r0, [r0, #16]
   d63d4:	f7fe fea6 	bl	d5124 <HAL_USART_Available_Data>
}
   d63d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63dc:	bd08      	pop	{r3, pc}

000d63de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d63de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d63e0:	7c00      	ldrb	r0, [r0, #16]
   d63e2:	f7fe feaf 	bl	d5144 <HAL_USART_Peek_Data>
}
   d63e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d63ea:	bf28      	it	cs
   d63ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d63f0:	bd08      	pop	{r3, pc}

000d63f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d63f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d63f4:	7c00      	ldrb	r0, [r0, #16]
   d63f6:	f7fe fe9d 	bl	d5134 <HAL_USART_Read_Data>
}
   d63fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d63fe:	bf28      	it	cs
   d6400:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6404:	bd08      	pop	{r3, pc}

000d6406 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6406:	7c00      	ldrb	r0, [r0, #16]
   d6408:	f7fe bea4 	b.w	d5154 <HAL_USART_Flush_Data>

000d640c <_ZN11USARTSerialD0Ev>:
   d640c:	b510      	push	{r4, lr}
   d640e:	2114      	movs	r1, #20
   d6410:	4604      	mov	r4, r0
   d6412:	f000 fa5c 	bl	d68ce <_ZdlPvj>
   d6416:	4620      	mov	r0, r4
   d6418:	bd10      	pop	{r4, pc}

000d641a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d641a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d641c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d641e:	4604      	mov	r4, r0
   d6420:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6422:	b925      	cbnz	r5, d642e <_ZN11USARTSerial5writeEh+0x14>
   d6424:	7c00      	ldrb	r0, [r0, #16]
   d6426:	f7fe fea5 	bl	d5174 <HAL_USART_Available_Data_For_Write>
   d642a:	2800      	cmp	r0, #0
   d642c:	dd05      	ble.n	d643a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d642e:	4631      	mov	r1, r6
   d6430:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6436:	f7fe be6d 	b.w	d5114 <HAL_USART_Write_Data>
  }
  return 0;
}
   d643a:	4628      	mov	r0, r5
   d643c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6440 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6440:	b510      	push	{r4, lr}
   d6442:	4604      	mov	r4, r0
   d6444:	4608      	mov	r0, r1
   d6446:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6448:	2200      	movs	r2, #0
   d644a:	6062      	str	r2, [r4, #4]
   d644c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6450:	60a2      	str	r2, [r4, #8]
   d6452:	4a05      	ldr	r2, [pc, #20]	; (d6468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6454:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6456:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6458:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d645a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d645c:	461a      	mov	r2, r3
   d645e:	f7fe fe51 	bl	d5104 <HAL_USART_Init>
}
   d6462:	4620      	mov	r0, r4
   d6464:	bd10      	pop	{r4, pc}
   d6466:	bf00      	nop
   d6468:	000da110 	.word	0x000da110

000d646c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d646c:	7c00      	ldrb	r0, [r0, #16]
   d646e:	f7fe be79 	b.w	d5164 <HAL_USART_Is_Enabled>
	...

000d6474 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6474:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6476:	4d0c      	ldr	r5, [pc, #48]	; (d64a8 <_Z22__fetch_global_Serial1v+0x34>)
   d6478:	6829      	ldr	r1, [r5, #0]
   d647a:	f011 0401 	ands.w	r4, r1, #1
   d647e:	d111      	bne.n	d64a4 <_Z22__fetch_global_Serial1v+0x30>
   d6480:	4628      	mov	r0, r5
   d6482:	f7fd fe10 	bl	d40a6 <__cxa_guard_acquire>
   d6486:	b168      	cbz	r0, d64a4 <_Z22__fetch_global_Serial1v+0x30>
   d6488:	4a08      	ldr	r2, [pc, #32]	; (d64ac <_Z22__fetch_global_Serial1v+0x38>)
   d648a:	4b09      	ldr	r3, [pc, #36]	; (d64b0 <_Z22__fetch_global_Serial1v+0x3c>)
   d648c:	4809      	ldr	r0, [pc, #36]	; (d64b4 <_Z22__fetch_global_Serial1v+0x40>)
   d648e:	4621      	mov	r1, r4
   d6490:	f7ff ffd6 	bl	d6440 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6494:	4628      	mov	r0, r5
   d6496:	f7fd fe0b 	bl	d40b0 <__cxa_guard_release>
   d649a:	4a07      	ldr	r2, [pc, #28]	; (d64b8 <_Z22__fetch_global_Serial1v+0x44>)
   d649c:	4907      	ldr	r1, [pc, #28]	; (d64bc <_Z22__fetch_global_Serial1v+0x48>)
   d649e:	4805      	ldr	r0, [pc, #20]	; (d64b4 <_Z22__fetch_global_Serial1v+0x40>)
   d64a0:	f000 fa10 	bl	d68c4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d64a4:	4803      	ldr	r0, [pc, #12]	; (d64b4 <_Z22__fetch_global_Serial1v+0x40>)
   d64a6:	bd38      	pop	{r3, r4, r5, pc}
   d64a8:	2003e644 	.word	0x2003e644
   d64ac:	2003e648 	.word	0x2003e648
   d64b0:	2003e5c0 	.word	0x2003e5c0
   d64b4:	2003e5ac 	.word	0x2003e5ac
   d64b8:	2003e260 	.word	0x2003e260
   d64bc:	000d63bd 	.word	0x000d63bd

000d64c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64c0:	7441      	strb	r1, [r0, #17]
   d64c2:	4770      	bx	lr

000d64c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d64c4:	4770      	bx	lr

000d64c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d64c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d64c8:	2100      	movs	r1, #0
   d64ca:	7c00      	ldrb	r0, [r0, #16]
   d64cc:	f7fe fe7a 	bl	d51c4 <HAL_USB_USART_Receive_Data>
}
   d64d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d64d4:	bf28      	it	cs
   d64d6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d64da:	bd08      	pop	{r3, pc}

000d64dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d64dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d64de:	2101      	movs	r1, #1
   d64e0:	7c00      	ldrb	r0, [r0, #16]
   d64e2:	f7fe fe6f 	bl	d51c4 <HAL_USB_USART_Receive_Data>
}
   d64e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d64ea:	bf28      	it	cs
   d64ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d64f0:	bd08      	pop	{r3, pc}

000d64f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d64f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d64f4:	7c00      	ldrb	r0, [r0, #16]
   d64f6:	f7fe fe5d 	bl	d51b4 <HAL_USB_USART_Available_Data_For_Write>
}
   d64fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d64fe:	bd08      	pop	{r3, pc}

000d6500 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6500:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6502:	7c00      	ldrb	r0, [r0, #16]
   d6504:	f7fe fe4e 	bl	d51a4 <HAL_USB_USART_Available_Data>
}
   d6508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650c:	bd08      	pop	{r3, pc}

000d650e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d650e:	7c00      	ldrb	r0, [r0, #16]
   d6510:	f7fe be68 	b.w	d51e4 <HAL_USB_USART_Flush_Data>

000d6514 <_ZN9USBSerialD0Ev>:
   d6514:	b510      	push	{r4, lr}
   d6516:	2114      	movs	r1, #20
   d6518:	4604      	mov	r4, r0
   d651a:	f000 f9d8 	bl	d68ce <_ZdlPvj>
   d651e:	4620      	mov	r0, r4
   d6520:	bd10      	pop	{r4, pc}

000d6522 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6522:	b538      	push	{r3, r4, r5, lr}
   d6524:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6526:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6528:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d652a:	f7fe fe43 	bl	d51b4 <HAL_USB_USART_Available_Data_For_Write>
   d652e:	2800      	cmp	r0, #0
   d6530:	dc01      	bgt.n	d6536 <_ZN9USBSerial5writeEh+0x14>
   d6532:	7c60      	ldrb	r0, [r4, #17]
   d6534:	b128      	cbz	r0, d6542 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6536:	4629      	mov	r1, r5
   d6538:	7c20      	ldrb	r0, [r4, #16]
   d653a:	f7fe fe4b 	bl	d51d4 <HAL_USB_USART_Send_Data>
   d653e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6542:	bd38      	pop	{r3, r4, r5, pc}

000d6544 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6544:	b510      	push	{r4, lr}
   d6546:	4604      	mov	r4, r0
   d6548:	2300      	movs	r3, #0
   d654a:	6063      	str	r3, [r4, #4]
   d654c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6550:	60a3      	str	r3, [r4, #8]
   d6552:	4b05      	ldr	r3, [pc, #20]	; (d6568 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6554:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6556:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6558:	4608      	mov	r0, r1
{
  _serial = serial;
   d655a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d655c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d655e:	4611      	mov	r1, r2
   d6560:	f7fe fe10 	bl	d5184 <HAL_USB_USART_Init>
}
   d6564:	4620      	mov	r0, r4
   d6566:	bd10      	pop	{r4, pc}
   d6568:	000da140 	.word	0x000da140

000d656c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d656c:	2200      	movs	r2, #0
   d656e:	7c00      	ldrb	r0, [r0, #16]
   d6570:	f7fe be10 	b.w	d5194 <HAL_USB_USART_Begin>

000d6574 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6574:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6576:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6578:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d657a:	2100      	movs	r1, #0
   d657c:	f001 f915 	bl	d77aa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6580:	4620      	mov	r0, r4
   d6582:	bd10      	pop	{r4, pc}

000d6584 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6584:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6586:	4d0e      	ldr	r5, [pc, #56]	; (d65c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6588:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d658a:	a801      	add	r0, sp, #4
   d658c:	f7ff fff2 	bl	d6574 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6590:	6829      	ldr	r1, [r5, #0]
   d6592:	f011 0401 	ands.w	r4, r1, #1
   d6596:	d110      	bne.n	d65ba <_Z16_fetch_usbserialv+0x36>
   d6598:	4628      	mov	r0, r5
   d659a:	f7fd fd84 	bl	d40a6 <__cxa_guard_acquire>
   d659e:	b160      	cbz	r0, d65ba <_Z16_fetch_usbserialv+0x36>
   d65a0:	aa01      	add	r2, sp, #4
   d65a2:	4621      	mov	r1, r4
   d65a4:	4807      	ldr	r0, [pc, #28]	; (d65c4 <_Z16_fetch_usbserialv+0x40>)
   d65a6:	f7ff ffcd 	bl	d6544 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d65aa:	4628      	mov	r0, r5
   d65ac:	f7fd fd80 	bl	d40b0 <__cxa_guard_release>
   d65b0:	4a05      	ldr	r2, [pc, #20]	; (d65c8 <_Z16_fetch_usbserialv+0x44>)
   d65b2:	4906      	ldr	r1, [pc, #24]	; (d65cc <_Z16_fetch_usbserialv+0x48>)
   d65b4:	4803      	ldr	r0, [pc, #12]	; (d65c4 <_Z16_fetch_usbserialv+0x40>)
   d65b6:	f000 f985 	bl	d68c4 <__aeabi_atexit>
	return _usbserial;
}
   d65ba:	4802      	ldr	r0, [pc, #8]	; (d65c4 <_Z16_fetch_usbserialv+0x40>)
   d65bc:	b007      	add	sp, #28
   d65be:	bd30      	pop	{r4, r5, pc}
   d65c0:	2003e6cc 	.word	0x2003e6cc
   d65c4:	2003e6d0 	.word	0x2003e6d0
   d65c8:	2003e260 	.word	0x2003e260
   d65cc:	000d64c5 	.word	0x000d64c5

000d65d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d65d0:	2200      	movs	r2, #0
   d65d2:	4611      	mov	r1, r2
   d65d4:	6840      	ldr	r0, [r0, #4]
   d65d6:	f7fe bec9 	b.w	d536c <network_ready>

000d65da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d65da:	2200      	movs	r2, #0
   d65dc:	4611      	mov	r1, r2
   d65de:	6840      	ldr	r0, [r0, #4]
   d65e0:	f7fe bee4 	b.w	d53ac <network_listening>

000d65e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d65e4:	2200      	movs	r2, #0
   d65e6:	4611      	mov	r1, r2
   d65e8:	6840      	ldr	r0, [r0, #4]
   d65ea:	f7fe beef 	b.w	d53cc <network_get_listen_timeout>

000d65ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d65ee:	2200      	movs	r2, #0
   d65f0:	6840      	ldr	r0, [r0, #4]
   d65f2:	f7fe bee3 	b.w	d53bc <network_set_listen_timeout>

000d65f6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d65f6:	2200      	movs	r2, #0
   d65f8:	f081 0101 	eor.w	r1, r1, #1
   d65fc:	6840      	ldr	r0, [r0, #4]
   d65fe:	f7fe becd 	b.w	d539c <network_listen>

000d6602 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6602:	2300      	movs	r3, #0
   d6604:	461a      	mov	r2, r3
   d6606:	4619      	mov	r1, r3
   d6608:	6840      	ldr	r0, [r0, #4]
   d660a:	f7fe bebf 	b.w	d538c <network_off>

000d660e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d660e:	2300      	movs	r3, #0
   d6610:	461a      	mov	r2, r3
   d6612:	4619      	mov	r1, r3
   d6614:	6840      	ldr	r0, [r0, #4]
   d6616:	f7fe beb1 	b.w	d537c <network_on>

000d661a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d661a:	2200      	movs	r2, #0
   d661c:	4611      	mov	r1, r2
   d661e:	6840      	ldr	r0, [r0, #4]
   d6620:	f7fe be94 	b.w	d534c <network_connecting>

000d6624 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6624:	2200      	movs	r2, #0
   d6626:	2102      	movs	r1, #2
   d6628:	6840      	ldr	r0, [r0, #4]
   d662a:	f7fe be97 	b.w	d535c <network_disconnect>

000d662e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d662e:	2300      	movs	r3, #0
   d6630:	461a      	mov	r2, r3
   d6632:	6840      	ldr	r0, [r0, #4]
   d6634:	f7fe be82 	b.w	d533c <network_connect>

000d6638 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6638:	4b02      	ldr	r3, [pc, #8]	; (d6644 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d663a:	2204      	movs	r2, #4
   d663c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d663e:	4a02      	ldr	r2, [pc, #8]	; (d6648 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6640:	601a      	str	r2, [r3, #0]
   d6642:	4770      	bx	lr
   d6644:	2003e6e4 	.word	0x2003e6e4
   d6648:	000da170 	.word	0x000da170

000d664c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d664c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d664e:	4b0c      	ldr	r3, [pc, #48]	; (d6680 <serialEventRun+0x34>)
   d6650:	b133      	cbz	r3, d6660 <serialEventRun+0x14>
   d6652:	f7ff ff97 	bl	d6584 <_Z16_fetch_usbserialv>
   d6656:	6803      	ldr	r3, [r0, #0]
   d6658:	691b      	ldr	r3, [r3, #16]
   d665a:	4798      	blx	r3
   d665c:	2800      	cmp	r0, #0
   d665e:	dc09      	bgt.n	d6674 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6660:	4b08      	ldr	r3, [pc, #32]	; (d6684 <serialEventRun+0x38>)
   d6662:	b163      	cbz	r3, d667e <serialEventRun+0x32>
   d6664:	f7ff ff06 	bl	d6474 <_Z22__fetch_global_Serial1v>
   d6668:	6803      	ldr	r3, [r0, #0]
   d666a:	691b      	ldr	r3, [r3, #16]
   d666c:	4798      	blx	r3
   d666e:	2800      	cmp	r0, #0
   d6670:	dc03      	bgt.n	d667a <serialEventRun+0x2e>
   d6672:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6674:	f3af 8000 	nop.w
   d6678:	e7f2      	b.n	d6660 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d667a:	f3af 8000 	nop.w
   d667e:	bd08      	pop	{r3, pc}
	...

000d6688 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6688:	b508      	push	{r3, lr}
	serialEventRun();
   d668a:	f7ff ffdf 	bl	d664c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d668e:	f7fe fc59 	bl	d4f44 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6692:	4b01      	ldr	r3, [pc, #4]	; (d6698 <_post_loop+0x10>)
   d6694:	6018      	str	r0, [r3, #0]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	2003e700 	.word	0x2003e700

000d669c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d669c:	4802      	ldr	r0, [pc, #8]	; (d66a8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d669e:	4a03      	ldr	r2, [pc, #12]	; (d66ac <_Z33system_initialize_user_backup_ramv+0x10>)
   d66a0:	4903      	ldr	r1, [pc, #12]	; (d66b0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d66a2:	1a12      	subs	r2, r2, r0
   d66a4:	f001 b876 	b.w	d7794 <memcpy>
   d66a8:	2003f400 	.word	0x2003f400
   d66ac:	2003f404 	.word	0x2003f404
   d66b0:	000da540 	.word	0x000da540

000d66b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d66b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66b6:	2300      	movs	r3, #0
   d66b8:	9300      	str	r3, [sp, #0]
   d66ba:	461a      	mov	r2, r3
   d66bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66c0:	f7fe fdda 	bl	d5278 <system_ctrl_set_result>
}
   d66c4:	b003      	add	sp, #12
   d66c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d66cc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d66cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d66ce:	8843      	ldrh	r3, [r0, #2]
   d66d0:	2b0a      	cmp	r3, #10
   d66d2:	d008      	beq.n	d66e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d66d4:	2b50      	cmp	r3, #80	; 0x50
   d66d6:	d109      	bne.n	d66ec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d66d8:	4b09      	ldr	r3, [pc, #36]	; (d6700 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d66da:	681b      	ldr	r3, [r3, #0]
   d66dc:	b13b      	cbz	r3, d66ee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d66de:	b003      	add	sp, #12
   d66e0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d66e4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d66e6:	f7ff ffe5 	bl	d66b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d66ea:	e006      	b.n	d66fa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66ec:	2300      	movs	r3, #0
   d66ee:	9300      	str	r3, [sp, #0]
   d66f0:	461a      	mov	r2, r3
   d66f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66f6:	f7fe fdbf 	bl	d5278 <system_ctrl_set_result>
        break;
    }
}
   d66fa:	b003      	add	sp, #12
   d66fc:	f85d fb04 	ldr.w	pc, [sp], #4
   d6700:	2003e6ec 	.word	0x2003e6ec

000d6704 <module_user_init_hook>:

void module_user_init_hook()
{
   d6704:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6706:	4c10      	ldr	r4, [pc, #64]	; (d6748 <module_user_init_hook+0x44>)
   d6708:	4d10      	ldr	r5, [pc, #64]	; (d674c <module_user_init_hook+0x48>)
   d670a:	6823      	ldr	r3, [r4, #0]
   d670c:	42ab      	cmp	r3, r5
   d670e:	4b10      	ldr	r3, [pc, #64]	; (d6750 <module_user_init_hook+0x4c>)
   d6710:	bf0c      	ite	eq
   d6712:	2201      	moveq	r2, #1
   d6714:	2200      	movne	r2, #0
   d6716:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6718:	d002      	beq.n	d6720 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d671a:	f7ff ffbf 	bl	d669c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d671e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6720:	f7fe fc08 	bl	d4f34 <HAL_RNG_GetRandomNumber>
   d6724:	4604      	mov	r4, r0
    srand(seed);
   d6726:	f001 f849 	bl	d77bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d672a:	4b0a      	ldr	r3, [pc, #40]	; (d6754 <module_user_init_hook+0x50>)
   d672c:	b113      	cbz	r3, d6734 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d672e:	4620      	mov	r0, r4
   d6730:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6734:	2100      	movs	r1, #0
   d6736:	4807      	ldr	r0, [pc, #28]	; (d6754 <module_user_init_hook+0x50>)
   d6738:	f7fe fdf8 	bl	d532c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d673c:	2100      	movs	r1, #0
   d673e:	4806      	ldr	r0, [pc, #24]	; (d6758 <module_user_init_hook+0x54>)
}
   d6740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6744:	f7fe bd8e 	b.w	d5264 <system_ctrl_set_app_request_handler>
   d6748:	2003f400 	.word	0x2003f400
   d674c:	9a271c1e 	.word	0x9a271c1e
   d6750:	2003e6f0 	.word	0x2003e6f0
   d6754:	00000000 	.word	0x00000000
   d6758:	000d66cd 	.word	0x000d66cd

000d675c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d675c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d675e:	4e18      	ldr	r6, [pc, #96]	; (d67c0 <pinAvailable+0x64>)
   d6760:	6831      	ldr	r1, [r6, #0]
   d6762:	f011 0501 	ands.w	r5, r1, #1
   d6766:	4604      	mov	r4, r0
   d6768:	d10a      	bne.n	d6780 <pinAvailable+0x24>
   d676a:	4630      	mov	r0, r6
   d676c:	f7fd fc9b 	bl	d40a6 <__cxa_guard_acquire>
   d6770:	b130      	cbz	r0, d6780 <pinAvailable+0x24>
   d6772:	4629      	mov	r1, r5
   d6774:	4813      	ldr	r0, [pc, #76]	; (d67c4 <pinAvailable+0x68>)
   d6776:	f7ff fcbf 	bl	d60f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d677a:	4630      	mov	r0, r6
   d677c:	f7fd fc98 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6780:	4810      	ldr	r0, [pc, #64]	; (d67c4 <pinAvailable+0x68>)
   d6782:	f7ff fcc3 	bl	d610c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6786:	b128      	cbz	r0, d6794 <pinAvailable+0x38>
   d6788:	f1a4 030b 	sub.w	r3, r4, #11
   d678c:	2b02      	cmp	r3, #2
   d678e:	d801      	bhi.n	d6794 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6790:	2000      	movs	r0, #0
   d6792:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6794:	f000 f870 	bl	d6878 <_Z19__fetch_global_Wirev>
   d6798:	f7ff fa5a 	bl	d5c50 <_ZN7TwoWire9isEnabledEv>
   d679c:	b108      	cbz	r0, d67a2 <pinAvailable+0x46>
   d679e:	2c01      	cmp	r4, #1
   d67a0:	d9f6      	bls.n	d6790 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d67a2:	f7ff fe67 	bl	d6474 <_Z22__fetch_global_Serial1v>
   d67a6:	f7ff fe61 	bl	d646c <_ZN11USARTSerial9isEnabledEv>
   d67aa:	b118      	cbz	r0, d67b4 <pinAvailable+0x58>
   d67ac:	f1a4 0309 	sub.w	r3, r4, #9
   d67b0:	2b01      	cmp	r3, #1
   d67b2:	d9ed      	bls.n	d6790 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d67b4:	2c23      	cmp	r4, #35	; 0x23
   d67b6:	bf8c      	ite	hi
   d67b8:	2000      	movhi	r0, #0
   d67ba:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d67bc:	bd70      	pop	{r4, r5, r6, pc}
   d67be:	bf00      	nop
   d67c0:	2003e6f4 	.word	0x2003e6f4
   d67c4:	2003e6f8 	.word	0x2003e6f8

000d67c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67c8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d67ca:	b538      	push	{r3, r4, r5, lr}
   d67cc:	4604      	mov	r4, r0
   d67ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67d0:	d80a      	bhi.n	d67e8 <pinMode+0x20>
   d67d2:	29ff      	cmp	r1, #255	; 0xff
   d67d4:	d008      	beq.n	d67e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d67d6:	f7ff ffc1 	bl	d675c <pinAvailable>
   d67da:	b128      	cbz	r0, d67e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d67dc:	4629      	mov	r1, r5
   d67de:	4620      	mov	r0, r4
}
   d67e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d67e4:	f7fe bbf6 	b.w	d4fd4 <HAL_Pin_Mode>
   d67e8:	bd38      	pop	{r3, r4, r5, pc}

000d67ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d67ea:	b538      	push	{r3, r4, r5, lr}
   d67ec:	4604      	mov	r4, r0
   d67ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d67f0:	f7fe fbf8 	bl	d4fe4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d67f4:	28ff      	cmp	r0, #255	; 0xff
   d67f6:	d010      	beq.n	d681a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d67f8:	2806      	cmp	r0, #6
   d67fa:	d804      	bhi.n	d6806 <digitalWrite+0x1c>
   d67fc:	234d      	movs	r3, #77	; 0x4d
   d67fe:	fa23 f000 	lsr.w	r0, r3, r0
   d6802:	07c3      	lsls	r3, r0, #31
   d6804:	d409      	bmi.n	d681a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6806:	4620      	mov	r0, r4
   d6808:	f7ff ffa8 	bl	d675c <pinAvailable>
   d680c:	b128      	cbz	r0, d681a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d680e:	4629      	mov	r1, r5
   d6810:	4620      	mov	r0, r4
}
   d6812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6816:	f7fe bbed 	b.w	d4ff4 <HAL_GPIO_Write>
   d681a:	bd38      	pop	{r3, r4, r5, pc}

000d681c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d681c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d681e:	4c07      	ldr	r4, [pc, #28]	; (d683c <_Z21__fetch_global_EEPROMv+0x20>)
   d6820:	6823      	ldr	r3, [r4, #0]
   d6822:	07db      	lsls	r3, r3, #31
   d6824:	d408      	bmi.n	d6838 <_Z21__fetch_global_EEPROMv+0x1c>
   d6826:	4620      	mov	r0, r4
   d6828:	f7fd fc3d 	bl	d40a6 <__cxa_guard_acquire>
   d682c:	b120      	cbz	r0, d6838 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d682e:	f7fe fb99 	bl	d4f64 <HAL_EEPROM_Init>
   d6832:	4620      	mov	r0, r4
   d6834:	f7fd fc3c 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d6838:	4801      	ldr	r0, [pc, #4]	; (d6840 <_Z21__fetch_global_EEPROMv+0x24>)
   d683a:	bd10      	pop	{r4, pc}
   d683c:	2003e704 	.word	0x2003e704
   d6840:	2003e708 	.word	0x2003e708

000d6844 <_Z17acquireWireBufferv>:
   d6844:	b570      	push	{r4, r5, r6, lr}
   d6846:	4604      	mov	r4, r0
   d6848:	2514      	movs	r5, #20
   d684a:	462a      	mov	r2, r5
   d684c:	4e09      	ldr	r6, [pc, #36]	; (d6874 <_Z17acquireWireBufferv+0x30>)
   d684e:	2100      	movs	r1, #0
   d6850:	f000 ffab 	bl	d77aa <memset>
   d6854:	8025      	strh	r5, [r4, #0]
   d6856:	2520      	movs	r5, #32
   d6858:	4631      	mov	r1, r6
   d685a:	60a5      	str	r5, [r4, #8]
   d685c:	6125      	str	r5, [r4, #16]
   d685e:	4628      	mov	r0, r5
   d6860:	f000 f84f 	bl	d6902 <_ZnajRKSt9nothrow_t>
   d6864:	4631      	mov	r1, r6
   d6866:	6060      	str	r0, [r4, #4]
   d6868:	4628      	mov	r0, r5
   d686a:	f000 f84a 	bl	d6902 <_ZnajRKSt9nothrow_t>
   d686e:	60e0      	str	r0, [r4, #12]
   d6870:	4620      	mov	r0, r4
   d6872:	bd70      	pop	{r4, r5, r6, pc}
   d6874:	000da19c 	.word	0x000da19c

000d6878 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6878:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d687a:	4d0e      	ldr	r5, [pc, #56]	; (d68b4 <_Z19__fetch_global_Wirev+0x3c>)
   d687c:	6829      	ldr	r1, [r5, #0]
   d687e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6882:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6884:	d113      	bne.n	d68ae <_Z19__fetch_global_Wirev+0x36>
   d6886:	4628      	mov	r0, r5
   d6888:	f7fd fc0d 	bl	d40a6 <__cxa_guard_acquire>
   d688c:	b178      	cbz	r0, d68ae <_Z19__fetch_global_Wirev+0x36>
   d688e:	a801      	add	r0, sp, #4
   d6890:	f7ff ffd8 	bl	d6844 <_Z17acquireWireBufferv>
   d6894:	aa01      	add	r2, sp, #4
   d6896:	4621      	mov	r1, r4
   d6898:	4807      	ldr	r0, [pc, #28]	; (d68b8 <_Z19__fetch_global_Wirev+0x40>)
   d689a:	f7ff f985 	bl	d5ba8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d689e:	4628      	mov	r0, r5
   d68a0:	f7fd fc06 	bl	d40b0 <__cxa_guard_release>
   d68a4:	4a05      	ldr	r2, [pc, #20]	; (d68bc <_Z19__fetch_global_Wirev+0x44>)
   d68a6:	4906      	ldr	r1, [pc, #24]	; (d68c0 <_Z19__fetch_global_Wirev+0x48>)
   d68a8:	4803      	ldr	r0, [pc, #12]	; (d68b8 <_Z19__fetch_global_Wirev+0x40>)
   d68aa:	f000 f80b 	bl	d68c4 <__aeabi_atexit>
	return wire;
}
   d68ae:	4802      	ldr	r0, [pc, #8]	; (d68b8 <_Z19__fetch_global_Wirev+0x40>)
   d68b0:	b007      	add	sp, #28
   d68b2:	bd30      	pop	{r4, r5, pc}
   d68b4:	2003e70c 	.word	0x2003e70c
   d68b8:	2003e710 	.word	0x2003e710
   d68bc:	2003e260 	.word	0x2003e260
   d68c0:	000d5b51 	.word	0x000d5b51

000d68c4 <__aeabi_atexit>:
   d68c4:	460b      	mov	r3, r1
   d68c6:	4601      	mov	r1, r0
   d68c8:	4618      	mov	r0, r3
   d68ca:	f000 be59 	b.w	d7580 <__cxa_atexit>

000d68ce <_ZdlPvj>:
   d68ce:	f7fd bbe6 	b.w	d409e <_ZdlPv>
	...

000d68d4 <_ZSt15get_new_handlerv>:
   d68d4:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <_ZSt15get_new_handlerv+0xc>)
   d68d6:	6818      	ldr	r0, [r3, #0]
   d68d8:	f3bf 8f5f 	dmb	sy
   d68dc:	4770      	bx	lr
   d68de:	bf00      	nop
   d68e0:	2003e724 	.word	0x2003e724

000d68e4 <_ZnwjRKSt9nothrow_t>:
   d68e4:	b510      	push	{r4, lr}
   d68e6:	2800      	cmp	r0, #0
   d68e8:	bf14      	ite	ne
   d68ea:	4604      	movne	r4, r0
   d68ec:	2401      	moveq	r4, #1
   d68ee:	4620      	mov	r0, r4
   d68f0:	f7fe fd74 	bl	d53dc <malloc>
   d68f4:	b920      	cbnz	r0, d6900 <_ZnwjRKSt9nothrow_t+0x1c>
   d68f6:	f7ff ffed 	bl	d68d4 <_ZSt15get_new_handlerv>
   d68fa:	b108      	cbz	r0, d6900 <_ZnwjRKSt9nothrow_t+0x1c>
   d68fc:	4780      	blx	r0
   d68fe:	e7f6      	b.n	d68ee <_ZnwjRKSt9nothrow_t+0xa>
   d6900:	bd10      	pop	{r4, pc}

000d6902 <_ZnajRKSt9nothrow_t>:
   d6902:	f7ff bfef 	b.w	d68e4 <_ZnwjRKSt9nothrow_t>

000d6906 <_ZSt25__throw_bad_function_callv>:
   d6906:	b508      	push	{r3, lr}
   d6908:	f7fe fd90 	bl	d542c <abort>

000d690c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d690c:	4b24      	ldr	r3, [pc, #144]	; (d69a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d690e:	681a      	ldr	r2, [r3, #0]
   d6910:	07d0      	lsls	r0, r2, #31
   d6912:	bf5c      	itt	pl
   d6914:	2201      	movpl	r2, #1
   d6916:	601a      	strpl	r2, [r3, #0]
   d6918:	4b22      	ldr	r3, [pc, #136]	; (d69a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d691a:	681a      	ldr	r2, [r3, #0]
   d691c:	07d1      	lsls	r1, r2, #31
   d691e:	bf5c      	itt	pl
   d6920:	2201      	movpl	r2, #1
   d6922:	601a      	strpl	r2, [r3, #0]
   d6924:	4b20      	ldr	r3, [pc, #128]	; (d69a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6926:	681a      	ldr	r2, [r3, #0]
   d6928:	07d2      	lsls	r2, r2, #31
   d692a:	bf5c      	itt	pl
   d692c:	2201      	movpl	r2, #1
   d692e:	601a      	strpl	r2, [r3, #0]
   d6930:	4b1e      	ldr	r3, [pc, #120]	; (d69ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6932:	681a      	ldr	r2, [r3, #0]
   d6934:	07d0      	lsls	r0, r2, #31
   d6936:	bf5c      	itt	pl
   d6938:	2201      	movpl	r2, #1
   d693a:	601a      	strpl	r2, [r3, #0]
   d693c:	4b1c      	ldr	r3, [pc, #112]	; (d69b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d693e:	681a      	ldr	r2, [r3, #0]
   d6940:	07d1      	lsls	r1, r2, #31
   d6942:	bf5c      	itt	pl
   d6944:	2201      	movpl	r2, #1
   d6946:	601a      	strpl	r2, [r3, #0]
   d6948:	4b1a      	ldr	r3, [pc, #104]	; (d69b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d694a:	681a      	ldr	r2, [r3, #0]
   d694c:	07d2      	lsls	r2, r2, #31
   d694e:	bf5c      	itt	pl
   d6950:	2201      	movpl	r2, #1
   d6952:	601a      	strpl	r2, [r3, #0]
   d6954:	4b18      	ldr	r3, [pc, #96]	; (d69b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6956:	681a      	ldr	r2, [r3, #0]
   d6958:	07d0      	lsls	r0, r2, #31
   d695a:	bf5c      	itt	pl
   d695c:	2201      	movpl	r2, #1
   d695e:	601a      	strpl	r2, [r3, #0]
   d6960:	4b16      	ldr	r3, [pc, #88]	; (d69bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6962:	681a      	ldr	r2, [r3, #0]
   d6964:	07d1      	lsls	r1, r2, #31
   d6966:	bf5c      	itt	pl
   d6968:	2201      	movpl	r2, #1
   d696a:	601a      	strpl	r2, [r3, #0]
   d696c:	4b14      	ldr	r3, [pc, #80]	; (d69c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d696e:	681a      	ldr	r2, [r3, #0]
   d6970:	07d2      	lsls	r2, r2, #31
   d6972:	bf5c      	itt	pl
   d6974:	2201      	movpl	r2, #1
   d6976:	601a      	strpl	r2, [r3, #0]
   d6978:	4b12      	ldr	r3, [pc, #72]	; (d69c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d697a:	681a      	ldr	r2, [r3, #0]
   d697c:	07d0      	lsls	r0, r2, #31
   d697e:	bf5c      	itt	pl
   d6980:	2201      	movpl	r2, #1
   d6982:	601a      	strpl	r2, [r3, #0]
   d6984:	4b10      	ldr	r3, [pc, #64]	; (d69c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6986:	681a      	ldr	r2, [r3, #0]
   d6988:	07d1      	lsls	r1, r2, #31
   d698a:	bf5c      	itt	pl
   d698c:	2201      	movpl	r2, #1
   d698e:	601a      	strpl	r2, [r3, #0]
   d6990:	4b0e      	ldr	r3, [pc, #56]	; (d69cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6992:	681a      	ldr	r2, [r3, #0]
   d6994:	07d2      	lsls	r2, r2, #31
   d6996:	bf5c      	itt	pl
   d6998:	2201      	movpl	r2, #1
   d699a:	601a      	strpl	r2, [r3, #0]
   d699c:	4770      	bx	lr
   d699e:	bf00      	nop
   d69a0:	2003e754 	.word	0x2003e754
   d69a4:	2003e750 	.word	0x2003e750
   d69a8:	2003e74c 	.word	0x2003e74c
   d69ac:	2003e748 	.word	0x2003e748
   d69b0:	2003e744 	.word	0x2003e744
   d69b4:	2003e740 	.word	0x2003e740
   d69b8:	2003e73c 	.word	0x2003e73c
   d69bc:	2003e738 	.word	0x2003e738
   d69c0:	2003e734 	.word	0x2003e734
   d69c4:	2003e730 	.word	0x2003e730
   d69c8:	2003e72c 	.word	0x2003e72c
   d69cc:	2003e728 	.word	0x2003e728

000d69d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d69d0:	4b18      	ldr	r3, [pc, #96]	; (d6a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d69d2:	681a      	ldr	r2, [r3, #0]
   d69d4:	07d1      	lsls	r1, r2, #31
   d69d6:	bf5c      	itt	pl
   d69d8:	2201      	movpl	r2, #1
   d69da:	601a      	strpl	r2, [r3, #0]
   d69dc:	4b16      	ldr	r3, [pc, #88]	; (d6a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d69de:	681a      	ldr	r2, [r3, #0]
   d69e0:	07d2      	lsls	r2, r2, #31
   d69e2:	bf5c      	itt	pl
   d69e4:	2201      	movpl	r2, #1
   d69e6:	601a      	strpl	r2, [r3, #0]
   d69e8:	4b14      	ldr	r3, [pc, #80]	; (d6a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d69ea:	681a      	ldr	r2, [r3, #0]
   d69ec:	07d0      	lsls	r0, r2, #31
   d69ee:	bf5c      	itt	pl
   d69f0:	2201      	movpl	r2, #1
   d69f2:	601a      	strpl	r2, [r3, #0]
   d69f4:	4b12      	ldr	r3, [pc, #72]	; (d6a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d69f6:	681a      	ldr	r2, [r3, #0]
   d69f8:	07d1      	lsls	r1, r2, #31
   d69fa:	bf5c      	itt	pl
   d69fc:	2201      	movpl	r2, #1
   d69fe:	601a      	strpl	r2, [r3, #0]
   d6a00:	4b10      	ldr	r3, [pc, #64]	; (d6a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a02:	681a      	ldr	r2, [r3, #0]
   d6a04:	07d2      	lsls	r2, r2, #31
   d6a06:	bf5c      	itt	pl
   d6a08:	2201      	movpl	r2, #1
   d6a0a:	601a      	strpl	r2, [r3, #0]
   d6a0c:	4b0e      	ldr	r3, [pc, #56]	; (d6a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a0e:	681a      	ldr	r2, [r3, #0]
   d6a10:	07d0      	lsls	r0, r2, #31
   d6a12:	bf5c      	itt	pl
   d6a14:	2201      	movpl	r2, #1
   d6a16:	601a      	strpl	r2, [r3, #0]
   d6a18:	4b0c      	ldr	r3, [pc, #48]	; (d6a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a1a:	681a      	ldr	r2, [r3, #0]
   d6a1c:	07d1      	lsls	r1, r2, #31
   d6a1e:	bf5c      	itt	pl
   d6a20:	2201      	movpl	r2, #1
   d6a22:	601a      	strpl	r2, [r3, #0]
   d6a24:	4b0a      	ldr	r3, [pc, #40]	; (d6a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a26:	681a      	ldr	r2, [r3, #0]
   d6a28:	07d2      	lsls	r2, r2, #31
   d6a2a:	bf5c      	itt	pl
   d6a2c:	2201      	movpl	r2, #1
   d6a2e:	601a      	strpl	r2, [r3, #0]
   d6a30:	4770      	bx	lr
   d6a32:	bf00      	nop
   d6a34:	2003e774 	.word	0x2003e774
   d6a38:	2003e770 	.word	0x2003e770
   d6a3c:	2003e76c 	.word	0x2003e76c
   d6a40:	2003e768 	.word	0x2003e768
   d6a44:	2003e764 	.word	0x2003e764
   d6a48:	2003e760 	.word	0x2003e760
   d6a4c:	2003e75c 	.word	0x2003e75c
   d6a50:	2003e758 	.word	0x2003e758

000d6a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a54:	4b18      	ldr	r3, [pc, #96]	; (d6ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a56:	681a      	ldr	r2, [r3, #0]
   d6a58:	07d1      	lsls	r1, r2, #31
   d6a5a:	bf5c      	itt	pl
   d6a5c:	2201      	movpl	r2, #1
   d6a5e:	601a      	strpl	r2, [r3, #0]
   d6a60:	4b16      	ldr	r3, [pc, #88]	; (d6abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a62:	681a      	ldr	r2, [r3, #0]
   d6a64:	07d2      	lsls	r2, r2, #31
   d6a66:	bf5c      	itt	pl
   d6a68:	2201      	movpl	r2, #1
   d6a6a:	601a      	strpl	r2, [r3, #0]
   d6a6c:	4b14      	ldr	r3, [pc, #80]	; (d6ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a6e:	681a      	ldr	r2, [r3, #0]
   d6a70:	07d0      	lsls	r0, r2, #31
   d6a72:	bf5c      	itt	pl
   d6a74:	2201      	movpl	r2, #1
   d6a76:	601a      	strpl	r2, [r3, #0]
   d6a78:	4b12      	ldr	r3, [pc, #72]	; (d6ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a7a:	681a      	ldr	r2, [r3, #0]
   d6a7c:	07d1      	lsls	r1, r2, #31
   d6a7e:	bf5c      	itt	pl
   d6a80:	2201      	movpl	r2, #1
   d6a82:	601a      	strpl	r2, [r3, #0]
   d6a84:	4b10      	ldr	r3, [pc, #64]	; (d6ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a86:	681a      	ldr	r2, [r3, #0]
   d6a88:	07d2      	lsls	r2, r2, #31
   d6a8a:	bf5c      	itt	pl
   d6a8c:	2201      	movpl	r2, #1
   d6a8e:	601a      	strpl	r2, [r3, #0]
   d6a90:	4b0e      	ldr	r3, [pc, #56]	; (d6acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a92:	681a      	ldr	r2, [r3, #0]
   d6a94:	07d0      	lsls	r0, r2, #31
   d6a96:	bf5c      	itt	pl
   d6a98:	2201      	movpl	r2, #1
   d6a9a:	601a      	strpl	r2, [r3, #0]
   d6a9c:	4b0c      	ldr	r3, [pc, #48]	; (d6ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a9e:	681a      	ldr	r2, [r3, #0]
   d6aa0:	07d1      	lsls	r1, r2, #31
   d6aa2:	bf5c      	itt	pl
   d6aa4:	2201      	movpl	r2, #1
   d6aa6:	601a      	strpl	r2, [r3, #0]
   d6aa8:	4b0a      	ldr	r3, [pc, #40]	; (d6ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6aaa:	681a      	ldr	r2, [r3, #0]
   d6aac:	07d2      	lsls	r2, r2, #31
   d6aae:	bf5c      	itt	pl
   d6ab0:	2201      	movpl	r2, #1
   d6ab2:	601a      	strpl	r2, [r3, #0]
   d6ab4:	4770      	bx	lr
   d6ab6:	bf00      	nop
   d6ab8:	2003e794 	.word	0x2003e794
   d6abc:	2003e790 	.word	0x2003e790
   d6ac0:	2003e78c 	.word	0x2003e78c
   d6ac4:	2003e788 	.word	0x2003e788
   d6ac8:	2003e784 	.word	0x2003e784
   d6acc:	2003e780 	.word	0x2003e780
   d6ad0:	2003e77c 	.word	0x2003e77c
   d6ad4:	2003e778 	.word	0x2003e778

000d6ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6ad8:	4b24      	ldr	r3, [pc, #144]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6ada:	681a      	ldr	r2, [r3, #0]
   d6adc:	07d0      	lsls	r0, r2, #31
   d6ade:	bf5c      	itt	pl
   d6ae0:	2201      	movpl	r2, #1
   d6ae2:	601a      	strpl	r2, [r3, #0]
   d6ae4:	4b22      	ldr	r3, [pc, #136]	; (d6b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6ae6:	681a      	ldr	r2, [r3, #0]
   d6ae8:	07d1      	lsls	r1, r2, #31
   d6aea:	bf5c      	itt	pl
   d6aec:	2201      	movpl	r2, #1
   d6aee:	601a      	strpl	r2, [r3, #0]
   d6af0:	4b20      	ldr	r3, [pc, #128]	; (d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6af2:	681a      	ldr	r2, [r3, #0]
   d6af4:	07d2      	lsls	r2, r2, #31
   d6af6:	bf5c      	itt	pl
   d6af8:	2201      	movpl	r2, #1
   d6afa:	601a      	strpl	r2, [r3, #0]
   d6afc:	4b1e      	ldr	r3, [pc, #120]	; (d6b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6afe:	681a      	ldr	r2, [r3, #0]
   d6b00:	07d0      	lsls	r0, r2, #31
   d6b02:	bf5c      	itt	pl
   d6b04:	2201      	movpl	r2, #1
   d6b06:	601a      	strpl	r2, [r3, #0]
   d6b08:	4b1c      	ldr	r3, [pc, #112]	; (d6b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b0a:	681a      	ldr	r2, [r3, #0]
   d6b0c:	07d1      	lsls	r1, r2, #31
   d6b0e:	bf5c      	itt	pl
   d6b10:	2201      	movpl	r2, #1
   d6b12:	601a      	strpl	r2, [r3, #0]
   d6b14:	4b1a      	ldr	r3, [pc, #104]	; (d6b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b16:	681a      	ldr	r2, [r3, #0]
   d6b18:	07d2      	lsls	r2, r2, #31
   d6b1a:	bf5c      	itt	pl
   d6b1c:	2201      	movpl	r2, #1
   d6b1e:	601a      	strpl	r2, [r3, #0]
   d6b20:	4b18      	ldr	r3, [pc, #96]	; (d6b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6b22:	681a      	ldr	r2, [r3, #0]
   d6b24:	07d0      	lsls	r0, r2, #31
   d6b26:	bf5c      	itt	pl
   d6b28:	2201      	movpl	r2, #1
   d6b2a:	601a      	strpl	r2, [r3, #0]
   d6b2c:	4b16      	ldr	r3, [pc, #88]	; (d6b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6b2e:	681a      	ldr	r2, [r3, #0]
   d6b30:	07d1      	lsls	r1, r2, #31
   d6b32:	bf5c      	itt	pl
   d6b34:	2201      	movpl	r2, #1
   d6b36:	601a      	strpl	r2, [r3, #0]
   d6b38:	4b14      	ldr	r3, [pc, #80]	; (d6b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6b3a:	681a      	ldr	r2, [r3, #0]
   d6b3c:	07d2      	lsls	r2, r2, #31
   d6b3e:	bf5c      	itt	pl
   d6b40:	2201      	movpl	r2, #1
   d6b42:	601a      	strpl	r2, [r3, #0]
   d6b44:	4b12      	ldr	r3, [pc, #72]	; (d6b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6b46:	681a      	ldr	r2, [r3, #0]
   d6b48:	07d0      	lsls	r0, r2, #31
   d6b4a:	bf5c      	itt	pl
   d6b4c:	2201      	movpl	r2, #1
   d6b4e:	601a      	strpl	r2, [r3, #0]
   d6b50:	4b10      	ldr	r3, [pc, #64]	; (d6b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6b52:	681a      	ldr	r2, [r3, #0]
   d6b54:	07d1      	lsls	r1, r2, #31
   d6b56:	bf5c      	itt	pl
   d6b58:	2201      	movpl	r2, #1
   d6b5a:	601a      	strpl	r2, [r3, #0]
   d6b5c:	4b0e      	ldr	r3, [pc, #56]	; (d6b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6b5e:	681a      	ldr	r2, [r3, #0]
   d6b60:	07d2      	lsls	r2, r2, #31
   d6b62:	bf5c      	itt	pl
   d6b64:	2201      	movpl	r2, #1
   d6b66:	601a      	strpl	r2, [r3, #0]
   d6b68:	4770      	bx	lr
   d6b6a:	bf00      	nop
   d6b6c:	2003e7c4 	.word	0x2003e7c4
   d6b70:	2003e7c0 	.word	0x2003e7c0
   d6b74:	2003e7bc 	.word	0x2003e7bc
   d6b78:	2003e7b8 	.word	0x2003e7b8
   d6b7c:	2003e7b4 	.word	0x2003e7b4
   d6b80:	2003e7b0 	.word	0x2003e7b0
   d6b84:	2003e7ac 	.word	0x2003e7ac
   d6b88:	2003e7a8 	.word	0x2003e7a8
   d6b8c:	2003e7a4 	.word	0x2003e7a4
   d6b90:	2003e7a0 	.word	0x2003e7a0
   d6b94:	2003e79c 	.word	0x2003e79c
   d6b98:	2003e798 	.word	0x2003e798

000d6b9c <__aeabi_drsub>:
   d6b9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6ba0:	e002      	b.n	d6ba8 <__adddf3>
   d6ba2:	bf00      	nop

000d6ba4 <__aeabi_dsub>:
   d6ba4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6ba8 <__adddf3>:
   d6ba8:	b530      	push	{r4, r5, lr}
   d6baa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6bae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6bb2:	ea94 0f05 	teq	r4, r5
   d6bb6:	bf08      	it	eq
   d6bb8:	ea90 0f02 	teqeq	r0, r2
   d6bbc:	bf1f      	itttt	ne
   d6bbe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6bc2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6bc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6bca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6bce:	f000 80e2 	beq.w	d6d96 <__adddf3+0x1ee>
   d6bd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6bd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6bda:	bfb8      	it	lt
   d6bdc:	426d      	neglt	r5, r5
   d6bde:	dd0c      	ble.n	d6bfa <__adddf3+0x52>
   d6be0:	442c      	add	r4, r5
   d6be2:	ea80 0202 	eor.w	r2, r0, r2
   d6be6:	ea81 0303 	eor.w	r3, r1, r3
   d6bea:	ea82 0000 	eor.w	r0, r2, r0
   d6bee:	ea83 0101 	eor.w	r1, r3, r1
   d6bf2:	ea80 0202 	eor.w	r2, r0, r2
   d6bf6:	ea81 0303 	eor.w	r3, r1, r3
   d6bfa:	2d36      	cmp	r5, #54	; 0x36
   d6bfc:	bf88      	it	hi
   d6bfe:	bd30      	pophi	{r4, r5, pc}
   d6c00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c10:	d002      	beq.n	d6c18 <__adddf3+0x70>
   d6c12:	4240      	negs	r0, r0
   d6c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c24:	d002      	beq.n	d6c2c <__adddf3+0x84>
   d6c26:	4252      	negs	r2, r2
   d6c28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c2c:	ea94 0f05 	teq	r4, r5
   d6c30:	f000 80a7 	beq.w	d6d82 <__adddf3+0x1da>
   d6c34:	f1a4 0401 	sub.w	r4, r4, #1
   d6c38:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c3c:	db0d      	blt.n	d6c5a <__adddf3+0xb2>
   d6c3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c42:	fa22 f205 	lsr.w	r2, r2, r5
   d6c46:	1880      	adds	r0, r0, r2
   d6c48:	f141 0100 	adc.w	r1, r1, #0
   d6c4c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c50:	1880      	adds	r0, r0, r2
   d6c52:	fa43 f305 	asr.w	r3, r3, r5
   d6c56:	4159      	adcs	r1, r3
   d6c58:	e00e      	b.n	d6c78 <__adddf3+0xd0>
   d6c5a:	f1a5 0520 	sub.w	r5, r5, #32
   d6c5e:	f10e 0e20 	add.w	lr, lr, #32
   d6c62:	2a01      	cmp	r2, #1
   d6c64:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c68:	bf28      	it	cs
   d6c6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c6e:	fa43 f305 	asr.w	r3, r3, r5
   d6c72:	18c0      	adds	r0, r0, r3
   d6c74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c7c:	d507      	bpl.n	d6c8e <__adddf3+0xe6>
   d6c7e:	f04f 0e00 	mov.w	lr, #0
   d6c82:	f1dc 0c00 	rsbs	ip, ip, #0
   d6c86:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6c8a:	eb6e 0101 	sbc.w	r1, lr, r1
   d6c8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6c92:	d31b      	bcc.n	d6ccc <__adddf3+0x124>
   d6c94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6c98:	d30c      	bcc.n	d6cb4 <__adddf3+0x10c>
   d6c9a:	0849      	lsrs	r1, r1, #1
   d6c9c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6ca0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6ca4:	f104 0401 	add.w	r4, r4, #1
   d6ca8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6cac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6cb0:	f080 809a 	bcs.w	d6de8 <__adddf3+0x240>
   d6cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6cb8:	bf08      	it	eq
   d6cba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6cbe:	f150 0000 	adcs.w	r0, r0, #0
   d6cc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cc6:	ea41 0105 	orr.w	r1, r1, r5
   d6cca:	bd30      	pop	{r4, r5, pc}
   d6ccc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6cd0:	4140      	adcs	r0, r0
   d6cd2:	eb41 0101 	adc.w	r1, r1, r1
   d6cd6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cda:	f1a4 0401 	sub.w	r4, r4, #1
   d6cde:	d1e9      	bne.n	d6cb4 <__adddf3+0x10c>
   d6ce0:	f091 0f00 	teq	r1, #0
   d6ce4:	bf04      	itt	eq
   d6ce6:	4601      	moveq	r1, r0
   d6ce8:	2000      	moveq	r0, #0
   d6cea:	fab1 f381 	clz	r3, r1
   d6cee:	bf08      	it	eq
   d6cf0:	3320      	addeq	r3, #32
   d6cf2:	f1a3 030b 	sub.w	r3, r3, #11
   d6cf6:	f1b3 0220 	subs.w	r2, r3, #32
   d6cfa:	da0c      	bge.n	d6d16 <__adddf3+0x16e>
   d6cfc:	320c      	adds	r2, #12
   d6cfe:	dd08      	ble.n	d6d12 <__adddf3+0x16a>
   d6d00:	f102 0c14 	add.w	ip, r2, #20
   d6d04:	f1c2 020c 	rsb	r2, r2, #12
   d6d08:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d0c:	fa21 f102 	lsr.w	r1, r1, r2
   d6d10:	e00c      	b.n	d6d2c <__adddf3+0x184>
   d6d12:	f102 0214 	add.w	r2, r2, #20
   d6d16:	bfd8      	it	le
   d6d18:	f1c2 0c20 	rsble	ip, r2, #32
   d6d1c:	fa01 f102 	lsl.w	r1, r1, r2
   d6d20:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d24:	bfdc      	itt	le
   d6d26:	ea41 010c 	orrle.w	r1, r1, ip
   d6d2a:	4090      	lslle	r0, r2
   d6d2c:	1ae4      	subs	r4, r4, r3
   d6d2e:	bfa2      	ittt	ge
   d6d30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d34:	4329      	orrge	r1, r5
   d6d36:	bd30      	popge	{r4, r5, pc}
   d6d38:	ea6f 0404 	mvn.w	r4, r4
   d6d3c:	3c1f      	subs	r4, #31
   d6d3e:	da1c      	bge.n	d6d7a <__adddf3+0x1d2>
   d6d40:	340c      	adds	r4, #12
   d6d42:	dc0e      	bgt.n	d6d62 <__adddf3+0x1ba>
   d6d44:	f104 0414 	add.w	r4, r4, #20
   d6d48:	f1c4 0220 	rsb	r2, r4, #32
   d6d4c:	fa20 f004 	lsr.w	r0, r0, r4
   d6d50:	fa01 f302 	lsl.w	r3, r1, r2
   d6d54:	ea40 0003 	orr.w	r0, r0, r3
   d6d58:	fa21 f304 	lsr.w	r3, r1, r4
   d6d5c:	ea45 0103 	orr.w	r1, r5, r3
   d6d60:	bd30      	pop	{r4, r5, pc}
   d6d62:	f1c4 040c 	rsb	r4, r4, #12
   d6d66:	f1c4 0220 	rsb	r2, r4, #32
   d6d6a:	fa20 f002 	lsr.w	r0, r0, r2
   d6d6e:	fa01 f304 	lsl.w	r3, r1, r4
   d6d72:	ea40 0003 	orr.w	r0, r0, r3
   d6d76:	4629      	mov	r1, r5
   d6d78:	bd30      	pop	{r4, r5, pc}
   d6d7a:	fa21 f004 	lsr.w	r0, r1, r4
   d6d7e:	4629      	mov	r1, r5
   d6d80:	bd30      	pop	{r4, r5, pc}
   d6d82:	f094 0f00 	teq	r4, #0
   d6d86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6d8a:	bf06      	itte	eq
   d6d8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6d90:	3401      	addeq	r4, #1
   d6d92:	3d01      	subne	r5, #1
   d6d94:	e74e      	b.n	d6c34 <__adddf3+0x8c>
   d6d96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d9a:	bf18      	it	ne
   d6d9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6da0:	d029      	beq.n	d6df6 <__adddf3+0x24e>
   d6da2:	ea94 0f05 	teq	r4, r5
   d6da6:	bf08      	it	eq
   d6da8:	ea90 0f02 	teqeq	r0, r2
   d6dac:	d005      	beq.n	d6dba <__adddf3+0x212>
   d6dae:	ea54 0c00 	orrs.w	ip, r4, r0
   d6db2:	bf04      	itt	eq
   d6db4:	4619      	moveq	r1, r3
   d6db6:	4610      	moveq	r0, r2
   d6db8:	bd30      	pop	{r4, r5, pc}
   d6dba:	ea91 0f03 	teq	r1, r3
   d6dbe:	bf1e      	ittt	ne
   d6dc0:	2100      	movne	r1, #0
   d6dc2:	2000      	movne	r0, #0
   d6dc4:	bd30      	popne	{r4, r5, pc}
   d6dc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6dca:	d105      	bne.n	d6dd8 <__adddf3+0x230>
   d6dcc:	0040      	lsls	r0, r0, #1
   d6dce:	4149      	adcs	r1, r1
   d6dd0:	bf28      	it	cs
   d6dd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6dd6:	bd30      	pop	{r4, r5, pc}
   d6dd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6ddc:	bf3c      	itt	cc
   d6dde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6de2:	bd30      	popcc	{r4, r5, pc}
   d6de4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6de8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6dec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6df0:	f04f 0000 	mov.w	r0, #0
   d6df4:	bd30      	pop	{r4, r5, pc}
   d6df6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dfa:	bf1a      	itte	ne
   d6dfc:	4619      	movne	r1, r3
   d6dfe:	4610      	movne	r0, r2
   d6e00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e04:	bf1c      	itt	ne
   d6e06:	460b      	movne	r3, r1
   d6e08:	4602      	movne	r2, r0
   d6e0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e0e:	bf06      	itte	eq
   d6e10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e14:	ea91 0f03 	teqeq	r1, r3
   d6e18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e1c:	bd30      	pop	{r4, r5, pc}
   d6e1e:	bf00      	nop

000d6e20 <__aeabi_ui2d>:
   d6e20:	f090 0f00 	teq	r0, #0
   d6e24:	bf04      	itt	eq
   d6e26:	2100      	moveq	r1, #0
   d6e28:	4770      	bxeq	lr
   d6e2a:	b530      	push	{r4, r5, lr}
   d6e2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e34:	f04f 0500 	mov.w	r5, #0
   d6e38:	f04f 0100 	mov.w	r1, #0
   d6e3c:	e750      	b.n	d6ce0 <__adddf3+0x138>
   d6e3e:	bf00      	nop

000d6e40 <__aeabi_i2d>:
   d6e40:	f090 0f00 	teq	r0, #0
   d6e44:	bf04      	itt	eq
   d6e46:	2100      	moveq	r1, #0
   d6e48:	4770      	bxeq	lr
   d6e4a:	b530      	push	{r4, r5, lr}
   d6e4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e58:	bf48      	it	mi
   d6e5a:	4240      	negmi	r0, r0
   d6e5c:	f04f 0100 	mov.w	r1, #0
   d6e60:	e73e      	b.n	d6ce0 <__adddf3+0x138>
   d6e62:	bf00      	nop

000d6e64 <__aeabi_f2d>:
   d6e64:	0042      	lsls	r2, r0, #1
   d6e66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e6a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e72:	bf1f      	itttt	ne
   d6e74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6e80:	4770      	bxne	lr
   d6e82:	f092 0f00 	teq	r2, #0
   d6e86:	bf14      	ite	ne
   d6e88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e8c:	4770      	bxeq	lr
   d6e8e:	b530      	push	{r4, r5, lr}
   d6e90:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6e94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e9c:	e720      	b.n	d6ce0 <__adddf3+0x138>
   d6e9e:	bf00      	nop

000d6ea0 <__aeabi_ul2d>:
   d6ea0:	ea50 0201 	orrs.w	r2, r0, r1
   d6ea4:	bf08      	it	eq
   d6ea6:	4770      	bxeq	lr
   d6ea8:	b530      	push	{r4, r5, lr}
   d6eaa:	f04f 0500 	mov.w	r5, #0
   d6eae:	e00a      	b.n	d6ec6 <__aeabi_l2d+0x16>

000d6eb0 <__aeabi_l2d>:
   d6eb0:	ea50 0201 	orrs.w	r2, r0, r1
   d6eb4:	bf08      	it	eq
   d6eb6:	4770      	bxeq	lr
   d6eb8:	b530      	push	{r4, r5, lr}
   d6eba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6ebe:	d502      	bpl.n	d6ec6 <__aeabi_l2d+0x16>
   d6ec0:	4240      	negs	r0, r0
   d6ec2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ec6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6eca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ece:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6ed2:	f43f aedc 	beq.w	d6c8e <__adddf3+0xe6>
   d6ed6:	f04f 0203 	mov.w	r2, #3
   d6eda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6ede:	bf18      	it	ne
   d6ee0:	3203      	addne	r2, #3
   d6ee2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6ee6:	bf18      	it	ne
   d6ee8:	3203      	addne	r2, #3
   d6eea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6eee:	f1c2 0320 	rsb	r3, r2, #32
   d6ef2:	fa00 fc03 	lsl.w	ip, r0, r3
   d6ef6:	fa20 f002 	lsr.w	r0, r0, r2
   d6efa:	fa01 fe03 	lsl.w	lr, r1, r3
   d6efe:	ea40 000e 	orr.w	r0, r0, lr
   d6f02:	fa21 f102 	lsr.w	r1, r1, r2
   d6f06:	4414      	add	r4, r2
   d6f08:	e6c1      	b.n	d6c8e <__adddf3+0xe6>
   d6f0a:	bf00      	nop

000d6f0c <__aeabi_dmul>:
   d6f0c:	b570      	push	{r4, r5, r6, lr}
   d6f0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f1a:	bf1d      	ittte	ne
   d6f1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f20:	ea94 0f0c 	teqne	r4, ip
   d6f24:	ea95 0f0c 	teqne	r5, ip
   d6f28:	f000 f8de 	bleq	d70e8 <__aeabi_dmul+0x1dc>
   d6f2c:	442c      	add	r4, r5
   d6f2e:	ea81 0603 	eor.w	r6, r1, r3
   d6f32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f3e:	bf18      	it	ne
   d6f40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f4c:	d038      	beq.n	d6fc0 <__aeabi_dmul+0xb4>
   d6f4e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f52:	f04f 0500 	mov.w	r5, #0
   d6f56:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f62:	f04f 0600 	mov.w	r6, #0
   d6f66:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f6a:	f09c 0f00 	teq	ip, #0
   d6f6e:	bf18      	it	ne
   d6f70:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6f78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6f80:	d204      	bcs.n	d6f8c <__aeabi_dmul+0x80>
   d6f82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6f86:	416d      	adcs	r5, r5
   d6f88:	eb46 0606 	adc.w	r6, r6, r6
   d6f8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6f90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6f94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6f98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6f9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6fa0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fa4:	bf88      	it	hi
   d6fa6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6faa:	d81e      	bhi.n	d6fea <__aeabi_dmul+0xde>
   d6fac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6fb0:	bf08      	it	eq
   d6fb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6fb6:	f150 0000 	adcs.w	r0, r0, #0
   d6fba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6fbe:	bd70      	pop	{r4, r5, r6, pc}
   d6fc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6fc4:	ea46 0101 	orr.w	r1, r6, r1
   d6fc8:	ea40 0002 	orr.w	r0, r0, r2
   d6fcc:	ea81 0103 	eor.w	r1, r1, r3
   d6fd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6fd4:	bfc2      	ittt	gt
   d6fd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6fda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6fde:	bd70      	popgt	{r4, r5, r6, pc}
   d6fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fe4:	f04f 0e00 	mov.w	lr, #0
   d6fe8:	3c01      	subs	r4, #1
   d6fea:	f300 80ab 	bgt.w	d7144 <__aeabi_dmul+0x238>
   d6fee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6ff2:	bfde      	ittt	le
   d6ff4:	2000      	movle	r0, #0
   d6ff6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6ffa:	bd70      	pople	{r4, r5, r6, pc}
   d6ffc:	f1c4 0400 	rsb	r4, r4, #0
   d7000:	3c20      	subs	r4, #32
   d7002:	da35      	bge.n	d7070 <__aeabi_dmul+0x164>
   d7004:	340c      	adds	r4, #12
   d7006:	dc1b      	bgt.n	d7040 <__aeabi_dmul+0x134>
   d7008:	f104 0414 	add.w	r4, r4, #20
   d700c:	f1c4 0520 	rsb	r5, r4, #32
   d7010:	fa00 f305 	lsl.w	r3, r0, r5
   d7014:	fa20 f004 	lsr.w	r0, r0, r4
   d7018:	fa01 f205 	lsl.w	r2, r1, r5
   d701c:	ea40 0002 	orr.w	r0, r0, r2
   d7020:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7024:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7028:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d702c:	fa21 f604 	lsr.w	r6, r1, r4
   d7030:	eb42 0106 	adc.w	r1, r2, r6
   d7034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7038:	bf08      	it	eq
   d703a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d703e:	bd70      	pop	{r4, r5, r6, pc}
   d7040:	f1c4 040c 	rsb	r4, r4, #12
   d7044:	f1c4 0520 	rsb	r5, r4, #32
   d7048:	fa00 f304 	lsl.w	r3, r0, r4
   d704c:	fa20 f005 	lsr.w	r0, r0, r5
   d7050:	fa01 f204 	lsl.w	r2, r1, r4
   d7054:	ea40 0002 	orr.w	r0, r0, r2
   d7058:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d705c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7060:	f141 0100 	adc.w	r1, r1, #0
   d7064:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7068:	bf08      	it	eq
   d706a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d706e:	bd70      	pop	{r4, r5, r6, pc}
   d7070:	f1c4 0520 	rsb	r5, r4, #32
   d7074:	fa00 f205 	lsl.w	r2, r0, r5
   d7078:	ea4e 0e02 	orr.w	lr, lr, r2
   d707c:	fa20 f304 	lsr.w	r3, r0, r4
   d7080:	fa01 f205 	lsl.w	r2, r1, r5
   d7084:	ea43 0302 	orr.w	r3, r3, r2
   d7088:	fa21 f004 	lsr.w	r0, r1, r4
   d708c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7090:	fa21 f204 	lsr.w	r2, r1, r4
   d7094:	ea20 0002 	bic.w	r0, r0, r2
   d7098:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d709c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70a0:	bf08      	it	eq
   d70a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70a6:	bd70      	pop	{r4, r5, r6, pc}
   d70a8:	f094 0f00 	teq	r4, #0
   d70ac:	d10f      	bne.n	d70ce <__aeabi_dmul+0x1c2>
   d70ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d70b2:	0040      	lsls	r0, r0, #1
   d70b4:	eb41 0101 	adc.w	r1, r1, r1
   d70b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70bc:	bf08      	it	eq
   d70be:	3c01      	subeq	r4, #1
   d70c0:	d0f7      	beq.n	d70b2 <__aeabi_dmul+0x1a6>
   d70c2:	ea41 0106 	orr.w	r1, r1, r6
   d70c6:	f095 0f00 	teq	r5, #0
   d70ca:	bf18      	it	ne
   d70cc:	4770      	bxne	lr
   d70ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d70d2:	0052      	lsls	r2, r2, #1
   d70d4:	eb43 0303 	adc.w	r3, r3, r3
   d70d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d70dc:	bf08      	it	eq
   d70de:	3d01      	subeq	r5, #1
   d70e0:	d0f7      	beq.n	d70d2 <__aeabi_dmul+0x1c6>
   d70e2:	ea43 0306 	orr.w	r3, r3, r6
   d70e6:	4770      	bx	lr
   d70e8:	ea94 0f0c 	teq	r4, ip
   d70ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70f0:	bf18      	it	ne
   d70f2:	ea95 0f0c 	teqne	r5, ip
   d70f6:	d00c      	beq.n	d7112 <__aeabi_dmul+0x206>
   d70f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70fc:	bf18      	it	ne
   d70fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7102:	d1d1      	bne.n	d70a8 <__aeabi_dmul+0x19c>
   d7104:	ea81 0103 	eor.w	r1, r1, r3
   d7108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d710c:	f04f 0000 	mov.w	r0, #0
   d7110:	bd70      	pop	{r4, r5, r6, pc}
   d7112:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7116:	bf06      	itte	eq
   d7118:	4610      	moveq	r0, r2
   d711a:	4619      	moveq	r1, r3
   d711c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7120:	d019      	beq.n	d7156 <__aeabi_dmul+0x24a>
   d7122:	ea94 0f0c 	teq	r4, ip
   d7126:	d102      	bne.n	d712e <__aeabi_dmul+0x222>
   d7128:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d712c:	d113      	bne.n	d7156 <__aeabi_dmul+0x24a>
   d712e:	ea95 0f0c 	teq	r5, ip
   d7132:	d105      	bne.n	d7140 <__aeabi_dmul+0x234>
   d7134:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7138:	bf1c      	itt	ne
   d713a:	4610      	movne	r0, r2
   d713c:	4619      	movne	r1, r3
   d713e:	d10a      	bne.n	d7156 <__aeabi_dmul+0x24a>
   d7140:	ea81 0103 	eor.w	r1, r1, r3
   d7144:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7148:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d714c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7150:	f04f 0000 	mov.w	r0, #0
   d7154:	bd70      	pop	{r4, r5, r6, pc}
   d7156:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d715a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d715e:	bd70      	pop	{r4, r5, r6, pc}

000d7160 <__aeabi_ddiv>:
   d7160:	b570      	push	{r4, r5, r6, lr}
   d7162:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d716a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d716e:	bf1d      	ittte	ne
   d7170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7174:	ea94 0f0c 	teqne	r4, ip
   d7178:	ea95 0f0c 	teqne	r5, ip
   d717c:	f000 f8a7 	bleq	d72ce <__aeabi_ddiv+0x16e>
   d7180:	eba4 0405 	sub.w	r4, r4, r5
   d7184:	ea81 0e03 	eor.w	lr, r1, r3
   d7188:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d718c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7190:	f000 8088 	beq.w	d72a4 <__aeabi_ddiv+0x144>
   d7194:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7198:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d719c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d71a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d71a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d71a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d71ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d71b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d71b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d71b8:	429d      	cmp	r5, r3
   d71ba:	bf08      	it	eq
   d71bc:	4296      	cmpeq	r6, r2
   d71be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d71c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d71c6:	d202      	bcs.n	d71ce <__aeabi_ddiv+0x6e>
   d71c8:	085b      	lsrs	r3, r3, #1
   d71ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d71ce:	1ab6      	subs	r6, r6, r2
   d71d0:	eb65 0503 	sbc.w	r5, r5, r3
   d71d4:	085b      	lsrs	r3, r3, #1
   d71d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d71da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d71de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d71e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d71e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71ea:	bf22      	ittt	cs
   d71ec:	1ab6      	subcs	r6, r6, r2
   d71ee:	4675      	movcs	r5, lr
   d71f0:	ea40 000c 	orrcs.w	r0, r0, ip
   d71f4:	085b      	lsrs	r3, r3, #1
   d71f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d71fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d71fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7202:	bf22      	ittt	cs
   d7204:	1ab6      	subcs	r6, r6, r2
   d7206:	4675      	movcs	r5, lr
   d7208:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d720c:	085b      	lsrs	r3, r3, #1
   d720e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7212:	ebb6 0e02 	subs.w	lr, r6, r2
   d7216:	eb75 0e03 	sbcs.w	lr, r5, r3
   d721a:	bf22      	ittt	cs
   d721c:	1ab6      	subcs	r6, r6, r2
   d721e:	4675      	movcs	r5, lr
   d7220:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7224:	085b      	lsrs	r3, r3, #1
   d7226:	ea4f 0232 	mov.w	r2, r2, rrx
   d722a:	ebb6 0e02 	subs.w	lr, r6, r2
   d722e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7232:	bf22      	ittt	cs
   d7234:	1ab6      	subcs	r6, r6, r2
   d7236:	4675      	movcs	r5, lr
   d7238:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d723c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7240:	d018      	beq.n	d7274 <__aeabi_ddiv+0x114>
   d7242:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7246:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d724a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d724e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7252:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7256:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d725a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d725e:	d1c0      	bne.n	d71e2 <__aeabi_ddiv+0x82>
   d7260:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7264:	d10b      	bne.n	d727e <__aeabi_ddiv+0x11e>
   d7266:	ea41 0100 	orr.w	r1, r1, r0
   d726a:	f04f 0000 	mov.w	r0, #0
   d726e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7272:	e7b6      	b.n	d71e2 <__aeabi_ddiv+0x82>
   d7274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7278:	bf04      	itt	eq
   d727a:	4301      	orreq	r1, r0
   d727c:	2000      	moveq	r0, #0
   d727e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7282:	bf88      	it	hi
   d7284:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7288:	f63f aeaf 	bhi.w	d6fea <__aeabi_dmul+0xde>
   d728c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7290:	bf04      	itt	eq
   d7292:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d729a:	f150 0000 	adcs.w	r0, r0, #0
   d729e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72a2:	bd70      	pop	{r4, r5, r6, pc}
   d72a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d72a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d72ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d72b0:	bfc2      	ittt	gt
   d72b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d72b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d72ba:	bd70      	popgt	{r4, r5, r6, pc}
   d72bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72c0:	f04f 0e00 	mov.w	lr, #0
   d72c4:	3c01      	subs	r4, #1
   d72c6:	e690      	b.n	d6fea <__aeabi_dmul+0xde>
   d72c8:	ea45 0e06 	orr.w	lr, r5, r6
   d72cc:	e68d      	b.n	d6fea <__aeabi_dmul+0xde>
   d72ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d72d2:	ea94 0f0c 	teq	r4, ip
   d72d6:	bf08      	it	eq
   d72d8:	ea95 0f0c 	teqeq	r5, ip
   d72dc:	f43f af3b 	beq.w	d7156 <__aeabi_dmul+0x24a>
   d72e0:	ea94 0f0c 	teq	r4, ip
   d72e4:	d10a      	bne.n	d72fc <__aeabi_ddiv+0x19c>
   d72e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d72ea:	f47f af34 	bne.w	d7156 <__aeabi_dmul+0x24a>
   d72ee:	ea95 0f0c 	teq	r5, ip
   d72f2:	f47f af25 	bne.w	d7140 <__aeabi_dmul+0x234>
   d72f6:	4610      	mov	r0, r2
   d72f8:	4619      	mov	r1, r3
   d72fa:	e72c      	b.n	d7156 <__aeabi_dmul+0x24a>
   d72fc:	ea95 0f0c 	teq	r5, ip
   d7300:	d106      	bne.n	d7310 <__aeabi_ddiv+0x1b0>
   d7302:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7306:	f43f aefd 	beq.w	d7104 <__aeabi_dmul+0x1f8>
   d730a:	4610      	mov	r0, r2
   d730c:	4619      	mov	r1, r3
   d730e:	e722      	b.n	d7156 <__aeabi_dmul+0x24a>
   d7310:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7314:	bf18      	it	ne
   d7316:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d731a:	f47f aec5 	bne.w	d70a8 <__aeabi_dmul+0x19c>
   d731e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7322:	f47f af0d 	bne.w	d7140 <__aeabi_dmul+0x234>
   d7326:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d732a:	f47f aeeb 	bne.w	d7104 <__aeabi_dmul+0x1f8>
   d732e:	e712      	b.n	d7156 <__aeabi_dmul+0x24a>

000d7330 <__gedf2>:
   d7330:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7334:	e006      	b.n	d7344 <__cmpdf2+0x4>
   d7336:	bf00      	nop

000d7338 <__ledf2>:
   d7338:	f04f 0c01 	mov.w	ip, #1
   d733c:	e002      	b.n	d7344 <__cmpdf2+0x4>
   d733e:	bf00      	nop

000d7340 <__cmpdf2>:
   d7340:	f04f 0c01 	mov.w	ip, #1
   d7344:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d734c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7354:	bf18      	it	ne
   d7356:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d735a:	d01b      	beq.n	d7394 <__cmpdf2+0x54>
   d735c:	b001      	add	sp, #4
   d735e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7362:	bf0c      	ite	eq
   d7364:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7368:	ea91 0f03 	teqne	r1, r3
   d736c:	bf02      	ittt	eq
   d736e:	ea90 0f02 	teqeq	r0, r2
   d7372:	2000      	moveq	r0, #0
   d7374:	4770      	bxeq	lr
   d7376:	f110 0f00 	cmn.w	r0, #0
   d737a:	ea91 0f03 	teq	r1, r3
   d737e:	bf58      	it	pl
   d7380:	4299      	cmppl	r1, r3
   d7382:	bf08      	it	eq
   d7384:	4290      	cmpeq	r0, r2
   d7386:	bf2c      	ite	cs
   d7388:	17d8      	asrcs	r0, r3, #31
   d738a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d738e:	f040 0001 	orr.w	r0, r0, #1
   d7392:	4770      	bx	lr
   d7394:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d739c:	d102      	bne.n	d73a4 <__cmpdf2+0x64>
   d739e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d73a2:	d107      	bne.n	d73b4 <__cmpdf2+0x74>
   d73a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73ac:	d1d6      	bne.n	d735c <__cmpdf2+0x1c>
   d73ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d73b2:	d0d3      	beq.n	d735c <__cmpdf2+0x1c>
   d73b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d73b8:	4770      	bx	lr
   d73ba:	bf00      	nop

000d73bc <__aeabi_cdrcmple>:
   d73bc:	4684      	mov	ip, r0
   d73be:	4610      	mov	r0, r2
   d73c0:	4662      	mov	r2, ip
   d73c2:	468c      	mov	ip, r1
   d73c4:	4619      	mov	r1, r3
   d73c6:	4663      	mov	r3, ip
   d73c8:	e000      	b.n	d73cc <__aeabi_cdcmpeq>
   d73ca:	bf00      	nop

000d73cc <__aeabi_cdcmpeq>:
   d73cc:	b501      	push	{r0, lr}
   d73ce:	f7ff ffb7 	bl	d7340 <__cmpdf2>
   d73d2:	2800      	cmp	r0, #0
   d73d4:	bf48      	it	mi
   d73d6:	f110 0f00 	cmnmi.w	r0, #0
   d73da:	bd01      	pop	{r0, pc}

000d73dc <__aeabi_dcmpeq>:
   d73dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73e0:	f7ff fff4 	bl	d73cc <__aeabi_cdcmpeq>
   d73e4:	bf0c      	ite	eq
   d73e6:	2001      	moveq	r0, #1
   d73e8:	2000      	movne	r0, #0
   d73ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d73ee:	bf00      	nop

000d73f0 <__aeabi_dcmplt>:
   d73f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73f4:	f7ff ffea 	bl	d73cc <__aeabi_cdcmpeq>
   d73f8:	bf34      	ite	cc
   d73fa:	2001      	movcc	r0, #1
   d73fc:	2000      	movcs	r0, #0
   d73fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7402:	bf00      	nop

000d7404 <__aeabi_dcmple>:
   d7404:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7408:	f7ff ffe0 	bl	d73cc <__aeabi_cdcmpeq>
   d740c:	bf94      	ite	ls
   d740e:	2001      	movls	r0, #1
   d7410:	2000      	movhi	r0, #0
   d7412:	f85d fb08 	ldr.w	pc, [sp], #8
   d7416:	bf00      	nop

000d7418 <__aeabi_dcmpge>:
   d7418:	f84d ed08 	str.w	lr, [sp, #-8]!
   d741c:	f7ff ffce 	bl	d73bc <__aeabi_cdrcmple>
   d7420:	bf94      	ite	ls
   d7422:	2001      	movls	r0, #1
   d7424:	2000      	movhi	r0, #0
   d7426:	f85d fb08 	ldr.w	pc, [sp], #8
   d742a:	bf00      	nop

000d742c <__aeabi_dcmpgt>:
   d742c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7430:	f7ff ffc4 	bl	d73bc <__aeabi_cdrcmple>
   d7434:	bf34      	ite	cc
   d7436:	2001      	movcc	r0, #1
   d7438:	2000      	movcs	r0, #0
   d743a:	f85d fb08 	ldr.w	pc, [sp], #8
   d743e:	bf00      	nop

000d7440 <__aeabi_d2iz>:
   d7440:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7444:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7448:	d215      	bcs.n	d7476 <__aeabi_d2iz+0x36>
   d744a:	d511      	bpl.n	d7470 <__aeabi_d2iz+0x30>
   d744c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7450:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7454:	d912      	bls.n	d747c <__aeabi_d2iz+0x3c>
   d7456:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d745a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d745e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7462:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7466:	fa23 f002 	lsr.w	r0, r3, r2
   d746a:	bf18      	it	ne
   d746c:	4240      	negne	r0, r0
   d746e:	4770      	bx	lr
   d7470:	f04f 0000 	mov.w	r0, #0
   d7474:	4770      	bx	lr
   d7476:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d747a:	d105      	bne.n	d7488 <__aeabi_d2iz+0x48>
   d747c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7480:	bf08      	it	eq
   d7482:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7486:	4770      	bx	lr
   d7488:	f04f 0000 	mov.w	r0, #0
   d748c:	4770      	bx	lr
   d748e:	bf00      	nop

000d7490 <__aeabi_d2uiz>:
   d7490:	004a      	lsls	r2, r1, #1
   d7492:	d211      	bcs.n	d74b8 <__aeabi_d2uiz+0x28>
   d7494:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7498:	d211      	bcs.n	d74be <__aeabi_d2uiz+0x2e>
   d749a:	d50d      	bpl.n	d74b8 <__aeabi_d2uiz+0x28>
   d749c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74a4:	d40e      	bmi.n	d74c4 <__aeabi_d2uiz+0x34>
   d74a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74b2:	fa23 f002 	lsr.w	r0, r3, r2
   d74b6:	4770      	bx	lr
   d74b8:	f04f 0000 	mov.w	r0, #0
   d74bc:	4770      	bx	lr
   d74be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d74c2:	d102      	bne.n	d74ca <__aeabi_d2uiz+0x3a>
   d74c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d74c8:	4770      	bx	lr
   d74ca:	f04f 0000 	mov.w	r0, #0
   d74ce:	4770      	bx	lr

000d74d0 <__aeabi_d2f>:
   d74d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d74d8:	bf24      	itt	cs
   d74da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d74de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d74e2:	d90d      	bls.n	d7500 <__aeabi_d2f+0x30>
   d74e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d74e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d74ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d74f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d74f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d74f8:	bf08      	it	eq
   d74fa:	f020 0001 	biceq.w	r0, r0, #1
   d74fe:	4770      	bx	lr
   d7500:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7504:	d121      	bne.n	d754a <__aeabi_d2f+0x7a>
   d7506:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d750a:	bfbc      	itt	lt
   d750c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7510:	4770      	bxlt	lr
   d7512:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7516:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d751a:	f1c2 0218 	rsb	r2, r2, #24
   d751e:	f1c2 0c20 	rsb	ip, r2, #32
   d7522:	fa10 f30c 	lsls.w	r3, r0, ip
   d7526:	fa20 f002 	lsr.w	r0, r0, r2
   d752a:	bf18      	it	ne
   d752c:	f040 0001 	orrne.w	r0, r0, #1
   d7530:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7534:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7538:	fa03 fc0c 	lsl.w	ip, r3, ip
   d753c:	ea40 000c 	orr.w	r0, r0, ip
   d7540:	fa23 f302 	lsr.w	r3, r3, r2
   d7544:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7548:	e7cc      	b.n	d74e4 <__aeabi_d2f+0x14>
   d754a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d754e:	d107      	bne.n	d7560 <__aeabi_d2f+0x90>
   d7550:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7554:	bf1e      	ittt	ne
   d7556:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d755a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d755e:	4770      	bxne	lr
   d7560:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7564:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d756c:	4770      	bx	lr
   d756e:	bf00      	nop

000d7570 <atof>:
   d7570:	2100      	movs	r1, #0
   d7572:	f000 bfc5 	b.w	d8500 <strtod>

000d7576 <atoi>:
   d7576:	220a      	movs	r2, #10
   d7578:	2100      	movs	r1, #0
   d757a:	f001 b84f 	b.w	d861c <strtol>
	...

000d7580 <__cxa_atexit>:
   d7580:	b510      	push	{r4, lr}
   d7582:	4c05      	ldr	r4, [pc, #20]	; (d7598 <__cxa_atexit+0x18>)
   d7584:	4613      	mov	r3, r2
   d7586:	b12c      	cbz	r4, d7594 <__cxa_atexit+0x14>
   d7588:	460a      	mov	r2, r1
   d758a:	4601      	mov	r1, r0
   d758c:	2002      	movs	r0, #2
   d758e:	f3af 8000 	nop.w
   d7592:	bd10      	pop	{r4, pc}
   d7594:	4620      	mov	r0, r4
   d7596:	bd10      	pop	{r4, pc}
   d7598:	00000000 	.word	0x00000000

000d759c <localtime>:
   d759c:	b538      	push	{r3, r4, r5, lr}
   d759e:	4b07      	ldr	r3, [pc, #28]	; (d75bc <localtime+0x20>)
   d75a0:	681c      	ldr	r4, [r3, #0]
   d75a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d75a4:	4605      	mov	r5, r0
   d75a6:	b91b      	cbnz	r3, d75b0 <localtime+0x14>
   d75a8:	2024      	movs	r0, #36	; 0x24
   d75aa:	f7fd ff17 	bl	d53dc <malloc>
   d75ae:	63e0      	str	r0, [r4, #60]	; 0x3c
   d75b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d75b2:	4628      	mov	r0, r5
   d75b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d75b8:	f000 b802 	b.w	d75c0 <localtime_r>
   d75bc:	2003e1d8 	.word	0x2003e1d8

000d75c0 <localtime_r>:
   d75c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d75c4:	460c      	mov	r4, r1
   d75c6:	4680      	mov	r8, r0
   d75c8:	f001 fe4c 	bl	d9264 <__gettzinfo>
   d75cc:	4621      	mov	r1, r4
   d75ce:	4607      	mov	r7, r0
   d75d0:	4640      	mov	r0, r8
   d75d2:	f001 fe4b 	bl	d926c <gmtime_r>
   d75d6:	6946      	ldr	r6, [r0, #20]
   d75d8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d75dc:	07b3      	lsls	r3, r6, #30
   d75de:	4604      	mov	r4, r0
   d75e0:	d105      	bne.n	d75ee <localtime_r+0x2e>
   d75e2:	2264      	movs	r2, #100	; 0x64
   d75e4:	fb96 f3f2 	sdiv	r3, r6, r2
   d75e8:	fb02 6313 	mls	r3, r2, r3, r6
   d75ec:	b94b      	cbnz	r3, d7602 <localtime_r+0x42>
   d75ee:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d75f2:	fb96 f3f5 	sdiv	r3, r6, r5
   d75f6:	fb05 6513 	mls	r5, r5, r3, r6
   d75fa:	fab5 f385 	clz	r3, r5
   d75fe:	095b      	lsrs	r3, r3, #5
   d7600:	e000      	b.n	d7604 <localtime_r+0x44>
   d7602:	2301      	movs	r3, #1
   d7604:	4a5f      	ldr	r2, [pc, #380]	; (d7784 <localtime_r+0x1c4>)
   d7606:	2530      	movs	r5, #48	; 0x30
   d7608:	fb05 2503 	mla	r5, r5, r3, r2
   d760c:	f001 f940 	bl	d8890 <__tz_lock>
   d7610:	f001 f940 	bl	d8894 <_tzset_unlocked>
   d7614:	4b5c      	ldr	r3, [pc, #368]	; (d7788 <localtime_r+0x1c8>)
   d7616:	681b      	ldr	r3, [r3, #0]
   d7618:	b1f3      	cbz	r3, d7658 <localtime_r+0x98>
   d761a:	687b      	ldr	r3, [r7, #4]
   d761c:	429e      	cmp	r6, r3
   d761e:	d105      	bne.n	d762c <localtime_r+0x6c>
   d7620:	6839      	ldr	r1, [r7, #0]
   d7622:	f8d8 3000 	ldr.w	r3, [r8]
   d7626:	69fa      	ldr	r2, [r7, #28]
   d7628:	b941      	cbnz	r1, d763c <localtime_r+0x7c>
   d762a:	e00a      	b.n	d7642 <localtime_r+0x82>
   d762c:	4630      	mov	r0, r6
   d762e:	f001 f887 	bl	d8740 <__tzcalc_limits>
   d7632:	2800      	cmp	r0, #0
   d7634:	d1f4      	bne.n	d7620 <localtime_r+0x60>
   d7636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d763a:	e00d      	b.n	d7658 <localtime_r+0x98>
   d763c:	4293      	cmp	r3, r2
   d763e:	db08      	blt.n	d7652 <localtime_r+0x92>
   d7640:	e001      	b.n	d7646 <localtime_r+0x86>
   d7642:	4293      	cmp	r3, r2
   d7644:	da07      	bge.n	d7656 <localtime_r+0x96>
   d7646:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7648:	4293      	cmp	r3, r2
   d764a:	bfac      	ite	ge
   d764c:	2300      	movge	r3, #0
   d764e:	2301      	movlt	r3, #1
   d7650:	e002      	b.n	d7658 <localtime_r+0x98>
   d7652:	2300      	movs	r3, #0
   d7654:	e000      	b.n	d7658 <localtime_r+0x98>
   d7656:	2301      	movs	r3, #1
   d7658:	6223      	str	r3, [r4, #32]
   d765a:	6a23      	ldr	r3, [r4, #32]
   d765c:	2b01      	cmp	r3, #1
   d765e:	bf0c      	ite	eq
   d7660:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7662:	6a39      	ldrne	r1, [r7, #32]
   d7664:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7668:	203c      	movs	r0, #60	; 0x3c
   d766a:	fb91 f6f3 	sdiv	r6, r1, r3
   d766e:	fb03 1316 	mls	r3, r3, r6, r1
   d7672:	6861      	ldr	r1, [r4, #4]
   d7674:	fb93 f2f0 	sdiv	r2, r3, r0
   d7678:	fb00 3012 	mls	r0, r0, r2, r3
   d767c:	6823      	ldr	r3, [r4, #0]
   d767e:	1a89      	subs	r1, r1, r2
   d7680:	68a2      	ldr	r2, [r4, #8]
   d7682:	6061      	str	r1, [r4, #4]
   d7684:	1a1b      	subs	r3, r3, r0
   d7686:	1b92      	subs	r2, r2, r6
   d7688:	2b3b      	cmp	r3, #59	; 0x3b
   d768a:	6023      	str	r3, [r4, #0]
   d768c:	60a2      	str	r2, [r4, #8]
   d768e:	dd03      	ble.n	d7698 <localtime_r+0xd8>
   d7690:	3101      	adds	r1, #1
   d7692:	6061      	str	r1, [r4, #4]
   d7694:	3b3c      	subs	r3, #60	; 0x3c
   d7696:	e004      	b.n	d76a2 <localtime_r+0xe2>
   d7698:	2b00      	cmp	r3, #0
   d769a:	da03      	bge.n	d76a4 <localtime_r+0xe4>
   d769c:	3901      	subs	r1, #1
   d769e:	6061      	str	r1, [r4, #4]
   d76a0:	333c      	adds	r3, #60	; 0x3c
   d76a2:	6023      	str	r3, [r4, #0]
   d76a4:	6863      	ldr	r3, [r4, #4]
   d76a6:	2b3b      	cmp	r3, #59	; 0x3b
   d76a8:	dd03      	ble.n	d76b2 <localtime_r+0xf2>
   d76aa:	3201      	adds	r2, #1
   d76ac:	60a2      	str	r2, [r4, #8]
   d76ae:	3b3c      	subs	r3, #60	; 0x3c
   d76b0:	e004      	b.n	d76bc <localtime_r+0xfc>
   d76b2:	2b00      	cmp	r3, #0
   d76b4:	da03      	bge.n	d76be <localtime_r+0xfe>
   d76b6:	3a01      	subs	r2, #1
   d76b8:	60a2      	str	r2, [r4, #8]
   d76ba:	333c      	adds	r3, #60	; 0x3c
   d76bc:	6063      	str	r3, [r4, #4]
   d76be:	68a3      	ldr	r3, [r4, #8]
   d76c0:	2b17      	cmp	r3, #23
   d76c2:	dd22      	ble.n	d770a <localtime_r+0x14a>
   d76c4:	69e2      	ldr	r2, [r4, #28]
   d76c6:	3201      	adds	r2, #1
   d76c8:	61e2      	str	r2, [r4, #28]
   d76ca:	69a2      	ldr	r2, [r4, #24]
   d76cc:	3201      	adds	r2, #1
   d76ce:	2a06      	cmp	r2, #6
   d76d0:	bfc8      	it	gt
   d76d2:	2200      	movgt	r2, #0
   d76d4:	61a2      	str	r2, [r4, #24]
   d76d6:	68e2      	ldr	r2, [r4, #12]
   d76d8:	3b18      	subs	r3, #24
   d76da:	3201      	adds	r2, #1
   d76dc:	60a3      	str	r3, [r4, #8]
   d76de:	6923      	ldr	r3, [r4, #16]
   d76e0:	60e2      	str	r2, [r4, #12]
   d76e2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d76e6:	428a      	cmp	r2, r1
   d76e8:	dd46      	ble.n	d7778 <localtime_r+0x1b8>
   d76ea:	3301      	adds	r3, #1
   d76ec:	2b0c      	cmp	r3, #12
   d76ee:	bf0c      	ite	eq
   d76f0:	6963      	ldreq	r3, [r4, #20]
   d76f2:	6123      	strne	r3, [r4, #16]
   d76f4:	eba2 0201 	sub.w	r2, r2, r1
   d76f8:	60e2      	str	r2, [r4, #12]
   d76fa:	bf01      	itttt	eq
   d76fc:	3301      	addeq	r3, #1
   d76fe:	2200      	moveq	r2, #0
   d7700:	6122      	streq	r2, [r4, #16]
   d7702:	6163      	streq	r3, [r4, #20]
   d7704:	bf08      	it	eq
   d7706:	61e2      	streq	r2, [r4, #28]
   d7708:	e036      	b.n	d7778 <localtime_r+0x1b8>
   d770a:	2b00      	cmp	r3, #0
   d770c:	da34      	bge.n	d7778 <localtime_r+0x1b8>
   d770e:	69e2      	ldr	r2, [r4, #28]
   d7710:	3a01      	subs	r2, #1
   d7712:	61e2      	str	r2, [r4, #28]
   d7714:	69a2      	ldr	r2, [r4, #24]
   d7716:	3a01      	subs	r2, #1
   d7718:	bf48      	it	mi
   d771a:	2206      	movmi	r2, #6
   d771c:	61a2      	str	r2, [r4, #24]
   d771e:	68e2      	ldr	r2, [r4, #12]
   d7720:	3318      	adds	r3, #24
   d7722:	3a01      	subs	r2, #1
   d7724:	60e2      	str	r2, [r4, #12]
   d7726:	60a3      	str	r3, [r4, #8]
   d7728:	bb32      	cbnz	r2, d7778 <localtime_r+0x1b8>
   d772a:	6923      	ldr	r3, [r4, #16]
   d772c:	3b01      	subs	r3, #1
   d772e:	d401      	bmi.n	d7734 <localtime_r+0x174>
   d7730:	6123      	str	r3, [r4, #16]
   d7732:	e01d      	b.n	d7770 <localtime_r+0x1b0>
   d7734:	230b      	movs	r3, #11
   d7736:	6123      	str	r3, [r4, #16]
   d7738:	6963      	ldr	r3, [r4, #20]
   d773a:	1e5a      	subs	r2, r3, #1
   d773c:	f012 0f03 	tst.w	r2, #3
   d7740:	6162      	str	r2, [r4, #20]
   d7742:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7746:	d105      	bne.n	d7754 <localtime_r+0x194>
   d7748:	2164      	movs	r1, #100	; 0x64
   d774a:	fb93 f2f1 	sdiv	r2, r3, r1
   d774e:	fb01 3212 	mls	r2, r1, r2, r3
   d7752:	b94a      	cbnz	r2, d7768 <localtime_r+0x1a8>
   d7754:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7758:	fb93 f2f1 	sdiv	r2, r3, r1
   d775c:	fb01 3312 	mls	r3, r1, r2, r3
   d7760:	fab3 f383 	clz	r3, r3
   d7764:	095b      	lsrs	r3, r3, #5
   d7766:	e000      	b.n	d776a <localtime_r+0x1aa>
   d7768:	2301      	movs	r3, #1
   d776a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d776e:	61e3      	str	r3, [r4, #28]
   d7770:	6923      	ldr	r3, [r4, #16]
   d7772:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7776:	60e3      	str	r3, [r4, #12]
   d7778:	f001 f88b 	bl	d8892 <__tz_unlock>
   d777c:	4620      	mov	r0, r4
   d777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7782:	bf00      	nop
   d7784:	000da308 	.word	0x000da308
   d7788:	2003e7e4 	.word	0x2003e7e4

000d778c <_localeconv_r>:
   d778c:	4800      	ldr	r0, [pc, #0]	; (d7790 <_localeconv_r+0x4>)
   d778e:	4770      	bx	lr
   d7790:	2003e1dc 	.word	0x2003e1dc

000d7794 <memcpy>:
   d7794:	b510      	push	{r4, lr}
   d7796:	1e43      	subs	r3, r0, #1
   d7798:	440a      	add	r2, r1
   d779a:	4291      	cmp	r1, r2
   d779c:	d004      	beq.n	d77a8 <memcpy+0x14>
   d779e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77a6:	e7f8      	b.n	d779a <memcpy+0x6>
   d77a8:	bd10      	pop	{r4, pc}

000d77aa <memset>:
   d77aa:	4402      	add	r2, r0
   d77ac:	4603      	mov	r3, r0
   d77ae:	4293      	cmp	r3, r2
   d77b0:	d002      	beq.n	d77b8 <memset+0xe>
   d77b2:	f803 1b01 	strb.w	r1, [r3], #1
   d77b6:	e7fa      	b.n	d77ae <memset+0x4>
   d77b8:	4770      	bx	lr
	...

000d77bc <srand>:
   d77bc:	b538      	push	{r3, r4, r5, lr}
   d77be:	4b12      	ldr	r3, [pc, #72]	; (d7808 <srand+0x4c>)
   d77c0:	681c      	ldr	r4, [r3, #0]
   d77c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d77c4:	4605      	mov	r5, r0
   d77c6:	b9d3      	cbnz	r3, d77fe <srand+0x42>
   d77c8:	2018      	movs	r0, #24
   d77ca:	f7fd fe07 	bl	d53dc <malloc>
   d77ce:	f243 330e 	movw	r3, #13070	; 0x330e
   d77d2:	63a0      	str	r0, [r4, #56]	; 0x38
   d77d4:	8003      	strh	r3, [r0, #0]
   d77d6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d77da:	8043      	strh	r3, [r0, #2]
   d77dc:	f241 2334 	movw	r3, #4660	; 0x1234
   d77e0:	8083      	strh	r3, [r0, #4]
   d77e2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d77e6:	80c3      	strh	r3, [r0, #6]
   d77e8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d77ec:	8103      	strh	r3, [r0, #8]
   d77ee:	2305      	movs	r3, #5
   d77f0:	8143      	strh	r3, [r0, #10]
   d77f2:	230b      	movs	r3, #11
   d77f4:	8183      	strh	r3, [r0, #12]
   d77f6:	2201      	movs	r2, #1
   d77f8:	2300      	movs	r3, #0
   d77fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d77fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7800:	2200      	movs	r2, #0
   d7802:	611d      	str	r5, [r3, #16]
   d7804:	615a      	str	r2, [r3, #20]
   d7806:	bd38      	pop	{r3, r4, r5, pc}
   d7808:	2003e1d8 	.word	0x2003e1d8

000d780c <strcmp>:
   d780c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7810:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7814:	2a01      	cmp	r2, #1
   d7816:	bf28      	it	cs
   d7818:	429a      	cmpcs	r2, r3
   d781a:	d0f7      	beq.n	d780c <strcmp>
   d781c:	1ad0      	subs	r0, r2, r3
   d781e:	4770      	bx	lr

000d7820 <strcpy>:
   d7820:	4603      	mov	r3, r0
   d7822:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7826:	f803 2b01 	strb.w	r2, [r3], #1
   d782a:	2a00      	cmp	r2, #0
   d782c:	d1f9      	bne.n	d7822 <strcpy+0x2>
   d782e:	4770      	bx	lr

000d7830 <strdup>:
   d7830:	4b02      	ldr	r3, [pc, #8]	; (d783c <strdup+0xc>)
   d7832:	4601      	mov	r1, r0
   d7834:	6818      	ldr	r0, [r3, #0]
   d7836:	f000 b803 	b.w	d7840 <_strdup_r>
   d783a:	bf00      	nop
   d783c:	2003e1d8 	.word	0x2003e1d8

000d7840 <_strdup_r>:
   d7840:	b570      	push	{r4, r5, r6, lr}
   d7842:	4606      	mov	r6, r0
   d7844:	4608      	mov	r0, r1
   d7846:	460c      	mov	r4, r1
   d7848:	f000 f80d 	bl	d7866 <strlen>
   d784c:	1c45      	adds	r5, r0, #1
   d784e:	4629      	mov	r1, r5
   d7850:	4630      	mov	r0, r6
   d7852:	f7fd fdf3 	bl	d543c <_malloc_r>
   d7856:	4606      	mov	r6, r0
   d7858:	b118      	cbz	r0, d7862 <_strdup_r+0x22>
   d785a:	462a      	mov	r2, r5
   d785c:	4621      	mov	r1, r4
   d785e:	f7ff ff99 	bl	d7794 <memcpy>
   d7862:	4630      	mov	r0, r6
   d7864:	bd70      	pop	{r4, r5, r6, pc}

000d7866 <strlen>:
   d7866:	4603      	mov	r3, r0
   d7868:	f813 2b01 	ldrb.w	r2, [r3], #1
   d786c:	2a00      	cmp	r2, #0
   d786e:	d1fb      	bne.n	d7868 <strlen+0x2>
   d7870:	1a18      	subs	r0, r3, r0
   d7872:	3801      	subs	r0, #1
   d7874:	4770      	bx	lr

000d7876 <strncmp>:
   d7876:	b530      	push	{r4, r5, lr}
   d7878:	b182      	cbz	r2, d789c <strncmp+0x26>
   d787a:	1e45      	subs	r5, r0, #1
   d787c:	3901      	subs	r1, #1
   d787e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7882:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7886:	42a3      	cmp	r3, r4
   d7888:	d106      	bne.n	d7898 <strncmp+0x22>
   d788a:	43ec      	mvns	r4, r5
   d788c:	4414      	add	r4, r2
   d788e:	42e0      	cmn	r0, r4
   d7890:	d001      	beq.n	d7896 <strncmp+0x20>
   d7892:	2b00      	cmp	r3, #0
   d7894:	d1f3      	bne.n	d787e <strncmp+0x8>
   d7896:	461c      	mov	r4, r3
   d7898:	1b18      	subs	r0, r3, r4
   d789a:	bd30      	pop	{r4, r5, pc}
   d789c:	4610      	mov	r0, r2
   d789e:	bd30      	pop	{r4, r5, pc}

000d78a0 <strncpy>:
   d78a0:	b510      	push	{r4, lr}
   d78a2:	4603      	mov	r3, r0
   d78a4:	b142      	cbz	r2, d78b8 <strncpy+0x18>
   d78a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d78aa:	f803 4b01 	strb.w	r4, [r3], #1
   d78ae:	3a01      	subs	r2, #1
   d78b0:	2c00      	cmp	r4, #0
   d78b2:	d1f7      	bne.n	d78a4 <strncpy+0x4>
   d78b4:	441a      	add	r2, r3
   d78b6:	e000      	b.n	d78ba <strncpy+0x1a>
   d78b8:	bd10      	pop	{r4, pc}
   d78ba:	4293      	cmp	r3, r2
   d78bc:	d002      	beq.n	d78c4 <strncpy+0x24>
   d78be:	f803 4b01 	strb.w	r4, [r3], #1
   d78c2:	e7fa      	b.n	d78ba <strncpy+0x1a>
   d78c4:	bd10      	pop	{r4, pc}

000d78c6 <sulp>:
   d78c6:	b570      	push	{r4, r5, r6, lr}
   d78c8:	4604      	mov	r4, r0
   d78ca:	460d      	mov	r5, r1
   d78cc:	ec45 4b10 	vmov	d0, r4, r5
   d78d0:	4616      	mov	r6, r2
   d78d2:	f002 f829 	bl	d9928 <__ulp>
   d78d6:	ec51 0b10 	vmov	r0, r1, d0
   d78da:	b17e      	cbz	r6, d78fc <sulp+0x36>
   d78dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d78e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d78e4:	2b00      	cmp	r3, #0
   d78e6:	dd09      	ble.n	d78fc <sulp+0x36>
   d78e8:	051b      	lsls	r3, r3, #20
   d78ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d78ee:	2400      	movs	r4, #0
   d78f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d78f4:	4622      	mov	r2, r4
   d78f6:	462b      	mov	r3, r5
   d78f8:	f7ff fb08 	bl	d6f0c <__aeabi_dmul>
   d78fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7900 <_strtod_r>:
   d7900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7904:	b09d      	sub	sp, #116	; 0x74
   d7906:	2300      	movs	r3, #0
   d7908:	9002      	str	r0, [sp, #8]
   d790a:	460c      	mov	r4, r1
   d790c:	9213      	str	r2, [sp, #76]	; 0x4c
   d790e:	9318      	str	r3, [sp, #96]	; 0x60
   d7910:	f04f 0a00 	mov.w	sl, #0
   d7914:	f04f 0b00 	mov.w	fp, #0
   d7918:	9117      	str	r1, [sp, #92]	; 0x5c
   d791a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d791c:	781a      	ldrb	r2, [r3, #0]
   d791e:	2a0d      	cmp	r2, #13
   d7920:	d805      	bhi.n	d792e <_strtod_r+0x2e>
   d7922:	2a09      	cmp	r2, #9
   d7924:	d213      	bcs.n	d794e <_strtod_r+0x4e>
   d7926:	2a00      	cmp	r2, #0
   d7928:	f000 81ac 	beq.w	d7c84 <_strtod_r+0x384>
   d792c:	e012      	b.n	d7954 <_strtod_r+0x54>
   d792e:	2a2b      	cmp	r2, #43	; 0x2b
   d7930:	d004      	beq.n	d793c <_strtod_r+0x3c>
   d7932:	2a2d      	cmp	r2, #45	; 0x2d
   d7934:	d004      	beq.n	d7940 <_strtod_r+0x40>
   d7936:	2a20      	cmp	r2, #32
   d7938:	d10c      	bne.n	d7954 <_strtod_r+0x54>
   d793a:	e008      	b.n	d794e <_strtod_r+0x4e>
   d793c:	2200      	movs	r2, #0
   d793e:	e000      	b.n	d7942 <_strtod_r+0x42>
   d7940:	2201      	movs	r2, #1
   d7942:	920c      	str	r2, [sp, #48]	; 0x30
   d7944:	1c5a      	adds	r2, r3, #1
   d7946:	9217      	str	r2, [sp, #92]	; 0x5c
   d7948:	785b      	ldrb	r3, [r3, #1]
   d794a:	b92b      	cbnz	r3, d7958 <_strtod_r+0x58>
   d794c:	e19a      	b.n	d7c84 <_strtod_r+0x384>
   d794e:	3301      	adds	r3, #1
   d7950:	9317      	str	r3, [sp, #92]	; 0x5c
   d7952:	e7e2      	b.n	d791a <_strtod_r+0x1a>
   d7954:	2300      	movs	r3, #0
   d7956:	930c      	str	r3, [sp, #48]	; 0x30
   d7958:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d795a:	782b      	ldrb	r3, [r5, #0]
   d795c:	2b30      	cmp	r3, #48	; 0x30
   d795e:	d15c      	bne.n	d7a1a <_strtod_r+0x11a>
   d7960:	786b      	ldrb	r3, [r5, #1]
   d7962:	2b58      	cmp	r3, #88	; 0x58
   d7964:	d001      	beq.n	d796a <_strtod_r+0x6a>
   d7966:	2b78      	cmp	r3, #120	; 0x78
   d7968:	d14c      	bne.n	d7a04 <_strtod_r+0x104>
   d796a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d796c:	9301      	str	r3, [sp, #4]
   d796e:	ab18      	add	r3, sp, #96	; 0x60
   d7970:	9300      	str	r3, [sp, #0]
   d7972:	4aa9      	ldr	r2, [pc, #676]	; (d7c18 <_strtod_r+0x318>)
   d7974:	9802      	ldr	r0, [sp, #8]
   d7976:	ab19      	add	r3, sp, #100	; 0x64
   d7978:	a917      	add	r1, sp, #92	; 0x5c
   d797a:	f001 f95c 	bl	d8c36 <__gethex>
   d797e:	f010 0607 	ands.w	r6, r0, #7
   d7982:	4604      	mov	r4, r0
   d7984:	f000 8587 	beq.w	d8496 <_strtod_r+0xb96>
   d7988:	2e06      	cmp	r6, #6
   d798a:	d105      	bne.n	d7998 <_strtod_r+0x98>
   d798c:	3501      	adds	r5, #1
   d798e:	2300      	movs	r3, #0
   d7990:	9517      	str	r5, [sp, #92]	; 0x5c
   d7992:	930c      	str	r3, [sp, #48]	; 0x30
   d7994:	f000 bd7f 	b.w	d8496 <_strtod_r+0xb96>
   d7998:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d799a:	b13a      	cbz	r2, d79ac <_strtod_r+0xac>
   d799c:	2135      	movs	r1, #53	; 0x35
   d799e:	a81a      	add	r0, sp, #104	; 0x68
   d79a0:	f002 f8af 	bl	d9b02 <__copybits>
   d79a4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d79a6:	9802      	ldr	r0, [sp, #8]
   d79a8:	f001 fd2d 	bl	d9406 <_Bfree>
   d79ac:	2e06      	cmp	r6, #6
   d79ae:	d822      	bhi.n	d79f6 <_strtod_r+0xf6>
   d79b0:	e8df f006 	tbb	[pc, r6]
   d79b4:	18080d04 	.word	0x18080d04
   d79b8:	0d1d      	.short	0x0d1d
   d79ba:	04          	.byte	0x04
   d79bb:	00          	.byte	0x00
   d79bc:	f04f 0b00 	mov.w	fp, #0
   d79c0:	46da      	mov	sl, fp
   d79c2:	e018      	b.n	d79f6 <_strtod_r+0xf6>
   d79c4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d79c8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d79cc:	e013      	b.n	d79f6 <_strtod_r+0xf6>
   d79ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d79d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d79d2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d79d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d79da:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d79de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d79e2:	e008      	b.n	d79f6 <_strtod_r+0xf6>
   d79e4:	f8df b234 	ldr.w	fp, [pc, #564]	; d7c1c <_strtod_r+0x31c>
   d79e8:	f04f 0a00 	mov.w	sl, #0
   d79ec:	e003      	b.n	d79f6 <_strtod_r+0xf6>
   d79ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d79f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d79f6:	0721      	lsls	r1, r4, #28
   d79f8:	f140 854d 	bpl.w	d8496 <_strtod_r+0xb96>
   d79fc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7a00:	f000 bd49 	b.w	d8496 <_strtod_r+0xb96>
   d7a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7a06:	1c5a      	adds	r2, r3, #1
   d7a08:	9217      	str	r2, [sp, #92]	; 0x5c
   d7a0a:	785b      	ldrb	r3, [r3, #1]
   d7a0c:	2b30      	cmp	r3, #48	; 0x30
   d7a0e:	d0f9      	beq.n	d7a04 <_strtod_r+0x104>
   d7a10:	2b00      	cmp	r3, #0
   d7a12:	f000 8540 	beq.w	d8496 <_strtod_r+0xb96>
   d7a16:	2301      	movs	r3, #1
   d7a18:	e000      	b.n	d7a1c <_strtod_r+0x11c>
   d7a1a:	2300      	movs	r3, #0
   d7a1c:	f04f 0800 	mov.w	r8, #0
   d7a20:	9306      	str	r3, [sp, #24]
   d7a22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7a24:	9307      	str	r3, [sp, #28]
   d7a26:	f8cd 8014 	str.w	r8, [sp, #20]
   d7a2a:	f8cd 8010 	str.w	r8, [sp, #16]
   d7a2e:	220a      	movs	r2, #10
   d7a30:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7a32:	782e      	ldrb	r6, [r5, #0]
   d7a34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7a38:	b2d9      	uxtb	r1, r3
   d7a3a:	2909      	cmp	r1, #9
   d7a3c:	d80e      	bhi.n	d7a5c <_strtod_r+0x15c>
   d7a3e:	9904      	ldr	r1, [sp, #16]
   d7a40:	2908      	cmp	r1, #8
   d7a42:	bfdd      	ittte	le
   d7a44:	9905      	ldrle	r1, [sp, #20]
   d7a46:	fb02 3301 	mlale	r3, r2, r1, r3
   d7a4a:	9305      	strle	r3, [sp, #20]
   d7a4c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7a50:	9b04      	ldr	r3, [sp, #16]
   d7a52:	3501      	adds	r5, #1
   d7a54:	3301      	adds	r3, #1
   d7a56:	9304      	str	r3, [sp, #16]
   d7a58:	9517      	str	r5, [sp, #92]	; 0x5c
   d7a5a:	e7e9      	b.n	d7a30 <_strtod_r+0x130>
   d7a5c:	9802      	ldr	r0, [sp, #8]
   d7a5e:	f7ff fe95 	bl	d778c <_localeconv_r>
   d7a62:	6807      	ldr	r7, [r0, #0]
   d7a64:	9802      	ldr	r0, [sp, #8]
   d7a66:	f7ff fe91 	bl	d778c <_localeconv_r>
   d7a6a:	6800      	ldr	r0, [r0, #0]
   d7a6c:	f7ff fefb 	bl	d7866 <strlen>
   d7a70:	4639      	mov	r1, r7
   d7a72:	4602      	mov	r2, r0
   d7a74:	4628      	mov	r0, r5
   d7a76:	f7ff fefe 	bl	d7876 <strncmp>
   d7a7a:	4607      	mov	r7, r0
   d7a7c:	b128      	cbz	r0, d7a8a <_strtod_r+0x18a>
   d7a7e:	2000      	movs	r0, #0
   d7a80:	4633      	mov	r3, r6
   d7a82:	9d04      	ldr	r5, [sp, #16]
   d7a84:	4602      	mov	r2, r0
   d7a86:	4601      	mov	r1, r0
   d7a88:	e057      	b.n	d7b3a <_strtod_r+0x23a>
   d7a8a:	9802      	ldr	r0, [sp, #8]
   d7a8c:	f7ff fe7e 	bl	d778c <_localeconv_r>
   d7a90:	6800      	ldr	r0, [r0, #0]
   d7a92:	f7ff fee8 	bl	d7866 <strlen>
   d7a96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7a98:	181a      	adds	r2, r3, r0
   d7a9a:	9217      	str	r2, [sp, #92]	; 0x5c
   d7a9c:	9a04      	ldr	r2, [sp, #16]
   d7a9e:	5c1b      	ldrb	r3, [r3, r0]
   d7aa0:	2a00      	cmp	r2, #0
   d7aa2:	d142      	bne.n	d7b2a <_strtod_r+0x22a>
   d7aa4:	4610      	mov	r0, r2
   d7aa6:	2b30      	cmp	r3, #48	; 0x30
   d7aa8:	d105      	bne.n	d7ab6 <_strtod_r+0x1b6>
   d7aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7aac:	1c5a      	adds	r2, r3, #1
   d7aae:	9217      	str	r2, [sp, #92]	; 0x5c
   d7ab0:	3001      	adds	r0, #1
   d7ab2:	785b      	ldrb	r3, [r3, #1]
   d7ab4:	e7f7      	b.n	d7aa6 <_strtod_r+0x1a6>
   d7ab6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7aba:	2a08      	cmp	r2, #8
   d7abc:	d843      	bhi.n	d7b46 <_strtod_r+0x246>
   d7abe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d7ac0:	9207      	str	r2, [sp, #28]
   d7ac2:	4602      	mov	r2, r0
   d7ac4:	2000      	movs	r0, #0
   d7ac6:	4605      	mov	r5, r0
   d7ac8:	3b30      	subs	r3, #48	; 0x30
   d7aca:	f100 0101 	add.w	r1, r0, #1
   d7ace:	d026      	beq.n	d7b1e <_strtod_r+0x21e>
   d7ad0:	440a      	add	r2, r1
   d7ad2:	eb05 0c00 	add.w	ip, r5, r0
   d7ad6:	4629      	mov	r1, r5
   d7ad8:	260a      	movs	r6, #10
   d7ada:	4561      	cmp	r1, ip
   d7adc:	d00e      	beq.n	d7afc <_strtod_r+0x1fc>
   d7ade:	3101      	adds	r1, #1
   d7ae0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d7ae4:	f1be 0f08 	cmp.w	lr, #8
   d7ae8:	dc03      	bgt.n	d7af2 <_strtod_r+0x1f2>
   d7aea:	9f05      	ldr	r7, [sp, #20]
   d7aec:	4377      	muls	r7, r6
   d7aee:	9705      	str	r7, [sp, #20]
   d7af0:	e7f3      	b.n	d7ada <_strtod_r+0x1da>
   d7af2:	2910      	cmp	r1, #16
   d7af4:	bfd8      	it	le
   d7af6:	fb06 f808 	mulle.w	r8, r6, r8
   d7afa:	e7ee      	b.n	d7ada <_strtod_r+0x1da>
   d7afc:	4428      	add	r0, r5
   d7afe:	2808      	cmp	r0, #8
   d7b00:	f100 0501 	add.w	r5, r0, #1
   d7b04:	dc05      	bgt.n	d7b12 <_strtod_r+0x212>
   d7b06:	9805      	ldr	r0, [sp, #20]
   d7b08:	210a      	movs	r1, #10
   d7b0a:	fb01 3300 	mla	r3, r1, r0, r3
   d7b0e:	9305      	str	r3, [sp, #20]
   d7b10:	e004      	b.n	d7b1c <_strtod_r+0x21c>
   d7b12:	2d10      	cmp	r5, #16
   d7b14:	bfdc      	itt	le
   d7b16:	210a      	movle	r1, #10
   d7b18:	fb01 3808 	mlale	r8, r1, r8, r3
   d7b1c:	2100      	movs	r1, #0
   d7b1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7b20:	1c58      	adds	r0, r3, #1
   d7b22:	9017      	str	r0, [sp, #92]	; 0x5c
   d7b24:	785b      	ldrb	r3, [r3, #1]
   d7b26:	4608      	mov	r0, r1
   d7b28:	e002      	b.n	d7b30 <_strtod_r+0x230>
   d7b2a:	9d04      	ldr	r5, [sp, #16]
   d7b2c:	4638      	mov	r0, r7
   d7b2e:	463a      	mov	r2, r7
   d7b30:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7b34:	2909      	cmp	r1, #9
   d7b36:	d9c7      	bls.n	d7ac8 <_strtod_r+0x1c8>
   d7b38:	2101      	movs	r1, #1
   d7b3a:	2b65      	cmp	r3, #101	; 0x65
   d7b3c:	d001      	beq.n	d7b42 <_strtod_r+0x242>
   d7b3e:	2b45      	cmp	r3, #69	; 0x45
   d7b40:	d151      	bne.n	d7be6 <_strtod_r+0x2e6>
   d7b42:	b96d      	cbnz	r5, d7b60 <_strtod_r+0x260>
   d7b44:	e004      	b.n	d7b50 <_strtod_r+0x250>
   d7b46:	2b65      	cmp	r3, #101	; 0x65
   d7b48:	f040 84b3 	bne.w	d84b2 <_strtod_r+0xbb2>
   d7b4c:	2200      	movs	r2, #0
   d7b4e:	2101      	movs	r1, #1
   d7b50:	b928      	cbnz	r0, d7b5e <_strtod_r+0x25e>
   d7b52:	9b06      	ldr	r3, [sp, #24]
   d7b54:	2b00      	cmp	r3, #0
   d7b56:	f000 8095 	beq.w	d7c84 <_strtod_r+0x384>
   d7b5a:	4605      	mov	r5, r0
   d7b5c:	e000      	b.n	d7b60 <_strtod_r+0x260>
   d7b5e:	2500      	movs	r5, #0
   d7b60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d7b62:	1c63      	adds	r3, r4, #1
   d7b64:	9317      	str	r3, [sp, #92]	; 0x5c
   d7b66:	7863      	ldrb	r3, [r4, #1]
   d7b68:	2b2b      	cmp	r3, #43	; 0x2b
   d7b6a:	d006      	beq.n	d7b7a <_strtod_r+0x27a>
   d7b6c:	2b2d      	cmp	r3, #45	; 0x2d
   d7b6e:	d002      	beq.n	d7b76 <_strtod_r+0x276>
   d7b70:	2600      	movs	r6, #0
   d7b72:	9603      	str	r6, [sp, #12]
   d7b74:	e006      	b.n	d7b84 <_strtod_r+0x284>
   d7b76:	2301      	movs	r3, #1
   d7b78:	e000      	b.n	d7b7c <_strtod_r+0x27c>
   d7b7a:	2300      	movs	r3, #0
   d7b7c:	9303      	str	r3, [sp, #12]
   d7b7e:	1ca3      	adds	r3, r4, #2
   d7b80:	9317      	str	r3, [sp, #92]	; 0x5c
   d7b82:	78a3      	ldrb	r3, [r4, #2]
   d7b84:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7b88:	2e09      	cmp	r6, #9
   d7b8a:	d82b      	bhi.n	d7be4 <_strtod_r+0x2e4>
   d7b8c:	2b30      	cmp	r3, #48	; 0x30
   d7b8e:	d104      	bne.n	d7b9a <_strtod_r+0x29a>
   d7b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7b92:	1c5e      	adds	r6, r3, #1
   d7b94:	9617      	str	r6, [sp, #92]	; 0x5c
   d7b96:	785b      	ldrb	r3, [r3, #1]
   d7b98:	e7f8      	b.n	d7b8c <_strtod_r+0x28c>
   d7b9a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d7b9e:	2e08      	cmp	r6, #8
   d7ba0:	d821      	bhi.n	d7be6 <_strtod_r+0x2e6>
   d7ba2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7ba6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7ba8:	f04f 0c0a 	mov.w	ip, #10
   d7bac:	461f      	mov	r7, r3
   d7bae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7bb0:	1c5e      	adds	r6, r3, #1
   d7bb2:	9617      	str	r6, [sp, #92]	; 0x5c
   d7bb4:	785b      	ldrb	r3, [r3, #1]
   d7bb6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d7bba:	f1b9 0f09 	cmp.w	r9, #9
   d7bbe:	d804      	bhi.n	d7bca <_strtod_r+0x2ca>
   d7bc0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d7bc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7bc8:	e7f1      	b.n	d7bae <_strtod_r+0x2ae>
   d7bca:	1bf6      	subs	r6, r6, r7
   d7bcc:	2e08      	cmp	r6, #8
   d7bce:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d7bd2:	dc02      	bgt.n	d7bda <_strtod_r+0x2da>
   d7bd4:	45f1      	cmp	r9, lr
   d7bd6:	bfa8      	it	ge
   d7bd8:	46f1      	movge	r9, lr
   d7bda:	9e03      	ldr	r6, [sp, #12]
   d7bdc:	b12e      	cbz	r6, d7bea <_strtod_r+0x2ea>
   d7bde:	f1c9 0900 	rsb	r9, r9, #0
   d7be2:	e002      	b.n	d7bea <_strtod_r+0x2ea>
   d7be4:	9417      	str	r4, [sp, #92]	; 0x5c
   d7be6:	f04f 0900 	mov.w	r9, #0
   d7bea:	2d00      	cmp	r5, #0
   d7bec:	d153      	bne.n	d7c96 <_strtod_r+0x396>
   d7bee:	2800      	cmp	r0, #0
   d7bf0:	f040 8451 	bne.w	d8496 <_strtod_r+0xb96>
   d7bf4:	9a06      	ldr	r2, [sp, #24]
   d7bf6:	2a00      	cmp	r2, #0
   d7bf8:	f040 844d 	bne.w	d8496 <_strtod_r+0xb96>
   d7bfc:	2900      	cmp	r1, #0
   d7bfe:	d141      	bne.n	d7c84 <_strtod_r+0x384>
   d7c00:	2b4e      	cmp	r3, #78	; 0x4e
   d7c02:	d020      	beq.n	d7c46 <_strtod_r+0x346>
   d7c04:	dc02      	bgt.n	d7c0c <_strtod_r+0x30c>
   d7c06:	2b49      	cmp	r3, #73	; 0x49
   d7c08:	d00a      	beq.n	d7c20 <_strtod_r+0x320>
   d7c0a:	e03b      	b.n	d7c84 <_strtod_r+0x384>
   d7c0c:	2b69      	cmp	r3, #105	; 0x69
   d7c0e:	d007      	beq.n	d7c20 <_strtod_r+0x320>
   d7c10:	2b6e      	cmp	r3, #110	; 0x6e
   d7c12:	d018      	beq.n	d7c46 <_strtod_r+0x346>
   d7c14:	e036      	b.n	d7c84 <_strtod_r+0x384>
   d7c16:	bf00      	nop
   d7c18:	000da368 	.word	0x000da368
   d7c1c:	7ff00000 	.word	0x7ff00000
   d7c20:	49a8      	ldr	r1, [pc, #672]	; (d7ec4 <_strtod_r+0x5c4>)
   d7c22:	a817      	add	r0, sp, #92	; 0x5c
   d7c24:	f001 fa38 	bl	d9098 <__match>
   d7c28:	b360      	cbz	r0, d7c84 <_strtod_r+0x384>
   d7c2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c2c:	49a6      	ldr	r1, [pc, #664]	; (d7ec8 <_strtod_r+0x5c8>)
   d7c2e:	3b01      	subs	r3, #1
   d7c30:	a817      	add	r0, sp, #92	; 0x5c
   d7c32:	9317      	str	r3, [sp, #92]	; 0x5c
   d7c34:	f001 fa30 	bl	d9098 <__match>
   d7c38:	b910      	cbnz	r0, d7c40 <_strtod_r+0x340>
   d7c3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c3c:	3301      	adds	r3, #1
   d7c3e:	9317      	str	r3, [sp, #92]	; 0x5c
   d7c40:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d7ee4 <_strtod_r+0x5e4>
   d7c44:	e01a      	b.n	d7c7c <_strtod_r+0x37c>
   d7c46:	49a1      	ldr	r1, [pc, #644]	; (d7ecc <_strtod_r+0x5cc>)
   d7c48:	a817      	add	r0, sp, #92	; 0x5c
   d7c4a:	f001 fa25 	bl	d9098 <__match>
   d7c4e:	b1c8      	cbz	r0, d7c84 <_strtod_r+0x384>
   d7c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c52:	781b      	ldrb	r3, [r3, #0]
   d7c54:	2b28      	cmp	r3, #40	; 0x28
   d7c56:	d10f      	bne.n	d7c78 <_strtod_r+0x378>
   d7c58:	aa1a      	add	r2, sp, #104	; 0x68
   d7c5a:	499d      	ldr	r1, [pc, #628]	; (d7ed0 <_strtod_r+0x5d0>)
   d7c5c:	a817      	add	r0, sp, #92	; 0x5c
   d7c5e:	f001 fa2e 	bl	d90be <__hexnan>
   d7c62:	2805      	cmp	r0, #5
   d7c64:	d108      	bne.n	d7c78 <_strtod_r+0x378>
   d7c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7c68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7c6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7c70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7c74:	f000 bc0f 	b.w	d8496 <_strtod_r+0xb96>
   d7c78:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7ee8 <_strtod_r+0x5e8>
   d7c7c:	f04f 0a00 	mov.w	sl, #0
   d7c80:	f000 bc09 	b.w	d8496 <_strtod_r+0xb96>
   d7c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7c86:	9417      	str	r4, [sp, #92]	; 0x5c
   d7c88:	2b00      	cmp	r3, #0
   d7c8a:	f000 840f 	beq.w	d84ac <_strtod_r+0xbac>
   d7c8e:	2300      	movs	r3, #0
   d7c90:	930c      	str	r3, [sp, #48]	; 0x30
   d7c92:	f000 bc02 	b.w	d849a <_strtod_r+0xb9a>
   d7c96:	9b04      	ldr	r3, [sp, #16]
   d7c98:	9805      	ldr	r0, [sp, #20]
   d7c9a:	2b00      	cmp	r3, #0
   d7c9c:	bf08      	it	eq
   d7c9e:	462b      	moveq	r3, r5
   d7ca0:	2d10      	cmp	r5, #16
   d7ca2:	462c      	mov	r4, r5
   d7ca4:	ebc2 0909 	rsb	r9, r2, r9
   d7ca8:	bfa8      	it	ge
   d7caa:	2410      	movge	r4, #16
   d7cac:	9304      	str	r3, [sp, #16]
   d7cae:	f7ff f8b7 	bl	d6e20 <__aeabi_ui2d>
   d7cb2:	2c09      	cmp	r4, #9
   d7cb4:	4682      	mov	sl, r0
   d7cb6:	468b      	mov	fp, r1
   d7cb8:	dd13      	ble.n	d7ce2 <_strtod_r+0x3e2>
   d7cba:	4b86      	ldr	r3, [pc, #536]	; (d7ed4 <_strtod_r+0x5d4>)
   d7cbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d7cc0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d7cc4:	f7ff f922 	bl	d6f0c <__aeabi_dmul>
   d7cc8:	4606      	mov	r6, r0
   d7cca:	4640      	mov	r0, r8
   d7ccc:	460f      	mov	r7, r1
   d7cce:	f7ff f8a7 	bl	d6e20 <__aeabi_ui2d>
   d7cd2:	4602      	mov	r2, r0
   d7cd4:	460b      	mov	r3, r1
   d7cd6:	4630      	mov	r0, r6
   d7cd8:	4639      	mov	r1, r7
   d7cda:	f7fe ff65 	bl	d6ba8 <__adddf3>
   d7cde:	4682      	mov	sl, r0
   d7ce0:	468b      	mov	fp, r1
   d7ce2:	2d0f      	cmp	r5, #15
   d7ce4:	dc36      	bgt.n	d7d54 <_strtod_r+0x454>
   d7ce6:	f1b9 0f00 	cmp.w	r9, #0
   d7cea:	f000 83d4 	beq.w	d8496 <_strtod_r+0xb96>
   d7cee:	dd24      	ble.n	d7d3a <_strtod_r+0x43a>
   d7cf0:	f1b9 0f16 	cmp.w	r9, #22
   d7cf4:	dc07      	bgt.n	d7d06 <_strtod_r+0x406>
   d7cf6:	4d77      	ldr	r5, [pc, #476]	; (d7ed4 <_strtod_r+0x5d4>)
   d7cf8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d7cfc:	4652      	mov	r2, sl
   d7cfe:	465b      	mov	r3, fp
   d7d00:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7d04:	e014      	b.n	d7d30 <_strtod_r+0x430>
   d7d06:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7d0a:	4599      	cmp	r9, r3
   d7d0c:	dc22      	bgt.n	d7d54 <_strtod_r+0x454>
   d7d0e:	4c71      	ldr	r4, [pc, #452]	; (d7ed4 <_strtod_r+0x5d4>)
   d7d10:	f1c5 050f 	rsb	r5, r5, #15
   d7d14:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7d18:	ebc5 0509 	rsb	r5, r5, r9
   d7d1c:	4652      	mov	r2, sl
   d7d1e:	465b      	mov	r3, fp
   d7d20:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7d24:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7d28:	f7ff f8f0 	bl	d6f0c <__aeabi_dmul>
   d7d2c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7d30:	f7ff f8ec 	bl	d6f0c <__aeabi_dmul>
   d7d34:	4682      	mov	sl, r0
   d7d36:	468b      	mov	fp, r1
   d7d38:	e3ad      	b.n	d8496 <_strtod_r+0xb96>
   d7d3a:	f119 0f16 	cmn.w	r9, #22
   d7d3e:	db09      	blt.n	d7d54 <_strtod_r+0x454>
   d7d40:	4d64      	ldr	r5, [pc, #400]	; (d7ed4 <_strtod_r+0x5d4>)
   d7d42:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d7d46:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7d4a:	4650      	mov	r0, sl
   d7d4c:	4659      	mov	r1, fp
   d7d4e:	f7ff fa07 	bl	d7160 <__aeabi_ddiv>
   d7d52:	e7ef      	b.n	d7d34 <_strtod_r+0x434>
   d7d54:	1b2c      	subs	r4, r5, r4
   d7d56:	444c      	add	r4, r9
   d7d58:	2c00      	cmp	r4, #0
   d7d5a:	dd57      	ble.n	d7e0c <_strtod_r+0x50c>
   d7d5c:	f014 010f 	ands.w	r1, r4, #15
   d7d60:	d00a      	beq.n	d7d78 <_strtod_r+0x478>
   d7d62:	4b5c      	ldr	r3, [pc, #368]	; (d7ed4 <_strtod_r+0x5d4>)
   d7d64:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d7d68:	4652      	mov	r2, sl
   d7d6a:	465b      	mov	r3, fp
   d7d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7d70:	f7ff f8cc 	bl	d6f0c <__aeabi_dmul>
   d7d74:	4682      	mov	sl, r0
   d7d76:	468b      	mov	fp, r1
   d7d78:	f034 040f 	bics.w	r4, r4, #15
   d7d7c:	f000 80b8 	beq.w	d7ef0 <_strtod_r+0x5f0>
   d7d80:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d7d84:	dd0b      	ble.n	d7d9e <_strtod_r+0x49e>
   d7d86:	2400      	movs	r4, #0
   d7d88:	4625      	mov	r5, r4
   d7d8a:	9405      	str	r4, [sp, #20]
   d7d8c:	9404      	str	r4, [sp, #16]
   d7d8e:	9a02      	ldr	r2, [sp, #8]
   d7d90:	f8df b150 	ldr.w	fp, [pc, #336]	; d7ee4 <_strtod_r+0x5e4>
   d7d94:	2322      	movs	r3, #34	; 0x22
   d7d96:	6013      	str	r3, [r2, #0]
   d7d98:	f04f 0a00 	mov.w	sl, #0
   d7d9c:	e187      	b.n	d80ae <_strtod_r+0x7ae>
   d7d9e:	4e4e      	ldr	r6, [pc, #312]	; (d7ed8 <_strtod_r+0x5d8>)
   d7da0:	2300      	movs	r3, #0
   d7da2:	1124      	asrs	r4, r4, #4
   d7da4:	4650      	mov	r0, sl
   d7da6:	4659      	mov	r1, fp
   d7da8:	4698      	mov	r8, r3
   d7daa:	4637      	mov	r7, r6
   d7dac:	2c01      	cmp	r4, #1
   d7dae:	dd0b      	ble.n	d7dc8 <_strtod_r+0x4c8>
   d7db0:	07e2      	lsls	r2, r4, #31
   d7db2:	d504      	bpl.n	d7dbe <_strtod_r+0x4be>
   d7db4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7db8:	f7ff f8a8 	bl	d6f0c <__aeabi_dmul>
   d7dbc:	2301      	movs	r3, #1
   d7dbe:	f108 0801 	add.w	r8, r8, #1
   d7dc2:	1064      	asrs	r4, r4, #1
   d7dc4:	3608      	adds	r6, #8
   d7dc6:	e7f1      	b.n	d7dac <_strtod_r+0x4ac>
   d7dc8:	b10b      	cbz	r3, d7dce <_strtod_r+0x4ce>
   d7dca:	4682      	mov	sl, r0
   d7dcc:	468b      	mov	fp, r1
   d7dce:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7dd2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d7dd6:	4652      	mov	r2, sl
   d7dd8:	465b      	mov	r3, fp
   d7dda:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7dde:	f7ff f895 	bl	d6f0c <__aeabi_dmul>
   d7de2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7de6:	468b      	mov	fp, r1
   d7de8:	460a      	mov	r2, r1
   d7dea:	0d1b      	lsrs	r3, r3, #20
   d7dec:	493b      	ldr	r1, [pc, #236]	; (d7edc <_strtod_r+0x5dc>)
   d7dee:	051b      	lsls	r3, r3, #20
   d7df0:	428b      	cmp	r3, r1
   d7df2:	4682      	mov	sl, r0
   d7df4:	d8c7      	bhi.n	d7d86 <_strtod_r+0x486>
   d7df6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7dfa:	428b      	cmp	r3, r1
   d7dfc:	bf86      	itte	hi
   d7dfe:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d7eec <_strtod_r+0x5ec>
   d7e02:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7e06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7e0a:	e071      	b.n	d7ef0 <_strtod_r+0x5f0>
   d7e0c:	d070      	beq.n	d7ef0 <_strtod_r+0x5f0>
   d7e0e:	4264      	negs	r4, r4
   d7e10:	f014 020f 	ands.w	r2, r4, #15
   d7e14:	d00a      	beq.n	d7e2c <_strtod_r+0x52c>
   d7e16:	4b2f      	ldr	r3, [pc, #188]	; (d7ed4 <_strtod_r+0x5d4>)
   d7e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7e1c:	4650      	mov	r0, sl
   d7e1e:	4659      	mov	r1, fp
   d7e20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e24:	f7ff f99c 	bl	d7160 <__aeabi_ddiv>
   d7e28:	4682      	mov	sl, r0
   d7e2a:	468b      	mov	fp, r1
   d7e2c:	1124      	asrs	r4, r4, #4
   d7e2e:	d05f      	beq.n	d7ef0 <_strtod_r+0x5f0>
   d7e30:	2c1f      	cmp	r4, #31
   d7e32:	dd04      	ble.n	d7e3e <_strtod_r+0x53e>
   d7e34:	2400      	movs	r4, #0
   d7e36:	4625      	mov	r5, r4
   d7e38:	9405      	str	r4, [sp, #20]
   d7e3a:	9404      	str	r4, [sp, #16]
   d7e3c:	e130      	b.n	d80a0 <_strtod_r+0x7a0>
   d7e3e:	f014 0f10 	tst.w	r4, #16
   d7e42:	bf0c      	ite	eq
   d7e44:	2300      	moveq	r3, #0
   d7e46:	236a      	movne	r3, #106	; 0x6a
   d7e48:	4e25      	ldr	r6, [pc, #148]	; (d7ee0 <_strtod_r+0x5e0>)
   d7e4a:	9303      	str	r3, [sp, #12]
   d7e4c:	4650      	mov	r0, sl
   d7e4e:	4659      	mov	r1, fp
   d7e50:	2300      	movs	r3, #0
   d7e52:	2c00      	cmp	r4, #0
   d7e54:	dd09      	ble.n	d7e6a <_strtod_r+0x56a>
   d7e56:	07e2      	lsls	r2, r4, #31
   d7e58:	d504      	bpl.n	d7e64 <_strtod_r+0x564>
   d7e5a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7e5e:	f7ff f855 	bl	d6f0c <__aeabi_dmul>
   d7e62:	2301      	movs	r3, #1
   d7e64:	1064      	asrs	r4, r4, #1
   d7e66:	3608      	adds	r6, #8
   d7e68:	e7f3      	b.n	d7e52 <_strtod_r+0x552>
   d7e6a:	b10b      	cbz	r3, d7e70 <_strtod_r+0x570>
   d7e6c:	4682      	mov	sl, r0
   d7e6e:	468b      	mov	fp, r1
   d7e70:	9b03      	ldr	r3, [sp, #12]
   d7e72:	b1eb      	cbz	r3, d7eb0 <_strtod_r+0x5b0>
   d7e74:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7e78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7e7c:	2b00      	cmp	r3, #0
   d7e7e:	4659      	mov	r1, fp
   d7e80:	dd16      	ble.n	d7eb0 <_strtod_r+0x5b0>
   d7e82:	2b1f      	cmp	r3, #31
   d7e84:	dd0e      	ble.n	d7ea4 <_strtod_r+0x5a4>
   d7e86:	2b34      	cmp	r3, #52	; 0x34
   d7e88:	bfde      	ittt	le
   d7e8a:	3b20      	suble	r3, #32
   d7e8c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7e90:	fa02 f303 	lslle.w	r3, r2, r3
   d7e94:	f04f 0a00 	mov.w	sl, #0
   d7e98:	bfcc      	ite	gt
   d7e9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7e9e:	ea03 0b01 	andle.w	fp, r3, r1
   d7ea2:	e005      	b.n	d7eb0 <_strtod_r+0x5b0>
   d7ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7ea8:	fa02 f303 	lsl.w	r3, r2, r3
   d7eac:	ea03 0a0a 	and.w	sl, r3, sl
   d7eb0:	2200      	movs	r2, #0
   d7eb2:	2300      	movs	r3, #0
   d7eb4:	4650      	mov	r0, sl
   d7eb6:	4659      	mov	r1, fp
   d7eb8:	f7ff fa90 	bl	d73dc <__aeabi_dcmpeq>
   d7ebc:	2800      	cmp	r0, #0
   d7ebe:	d1b9      	bne.n	d7e34 <_strtod_r+0x534>
   d7ec0:	e018      	b.n	d7ef4 <_strtod_r+0x5f4>
   d7ec2:	bf00      	nop
   d7ec4:	000da390 	.word	0x000da390
   d7ec8:	000da393 	.word	0x000da393
   d7ecc:	000da399 	.word	0x000da399
   d7ed0:	000da37c 	.word	0x000da37c
   d7ed4:	000da408 	.word	0x000da408
   d7ed8:	000da4d0 	.word	0x000da4d0
   d7edc:	7ca00000 	.word	0x7ca00000
   d7ee0:	000da3a0 	.word	0x000da3a0
   d7ee4:	7ff00000 	.word	0x7ff00000
   d7ee8:	fff80000 	.word	0xfff80000
   d7eec:	7fefffff 	.word	0x7fefffff
   d7ef0:	2300      	movs	r3, #0
   d7ef2:	9303      	str	r3, [sp, #12]
   d7ef4:	9b05      	ldr	r3, [sp, #20]
   d7ef6:	9300      	str	r3, [sp, #0]
   d7ef8:	9a04      	ldr	r2, [sp, #16]
   d7efa:	9907      	ldr	r1, [sp, #28]
   d7efc:	9802      	ldr	r0, [sp, #8]
   d7efe:	462b      	mov	r3, r5
   d7f00:	f001 fad3 	bl	d94aa <__s2b>
   d7f04:	9005      	str	r0, [sp, #20]
   d7f06:	2800      	cmp	r0, #0
   d7f08:	f43f af3d 	beq.w	d7d86 <_strtod_r+0x486>
   d7f0c:	f1b9 0f00 	cmp.w	r9, #0
   d7f10:	f1c9 0300 	rsb	r3, r9, #0
   d7f14:	bfa8      	it	ge
   d7f16:	2300      	movge	r3, #0
   d7f18:	930d      	str	r3, [sp, #52]	; 0x34
   d7f1a:	2400      	movs	r4, #0
   d7f1c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7f20:	9312      	str	r3, [sp, #72]	; 0x48
   d7f22:	4625      	mov	r5, r4
   d7f24:	9b05      	ldr	r3, [sp, #20]
   d7f26:	9802      	ldr	r0, [sp, #8]
   d7f28:	6859      	ldr	r1, [r3, #4]
   d7f2a:	f001 fa37 	bl	d939c <_Balloc>
   d7f2e:	9004      	str	r0, [sp, #16]
   d7f30:	2800      	cmp	r0, #0
   d7f32:	f43f af2c 	beq.w	d7d8e <_strtod_r+0x48e>
   d7f36:	9b05      	ldr	r3, [sp, #20]
   d7f38:	691a      	ldr	r2, [r3, #16]
   d7f3a:	3202      	adds	r2, #2
   d7f3c:	f103 010c 	add.w	r1, r3, #12
   d7f40:	0092      	lsls	r2, r2, #2
   d7f42:	300c      	adds	r0, #12
   d7f44:	f7ff fc26 	bl	d7794 <memcpy>
   d7f48:	aa1a      	add	r2, sp, #104	; 0x68
   d7f4a:	a919      	add	r1, sp, #100	; 0x64
   d7f4c:	ec4b ab10 	vmov	d0, sl, fp
   d7f50:	9802      	ldr	r0, [sp, #8]
   d7f52:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7f56:	f001 fd5c 	bl	d9a12 <__d2b>
   d7f5a:	9018      	str	r0, [sp, #96]	; 0x60
   d7f5c:	2800      	cmp	r0, #0
   d7f5e:	f43f af16 	beq.w	d7d8e <_strtod_r+0x48e>
   d7f62:	2101      	movs	r1, #1
   d7f64:	9802      	ldr	r0, [sp, #8]
   d7f66:	f001 fb2b 	bl	d95c0 <__i2b>
   d7f6a:	4605      	mov	r5, r0
   d7f6c:	2800      	cmp	r0, #0
   d7f6e:	f43f af0e 	beq.w	d7d8e <_strtod_r+0x48e>
   d7f72:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7f74:	9903      	ldr	r1, [sp, #12]
   d7f76:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d7f78:	2b00      	cmp	r3, #0
   d7f7a:	bfad      	iteet	ge
   d7f7c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d7f7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d7f80:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d7f84:	eb02 0803 	addge.w	r8, r2, r3
   d7f88:	bfb8      	it	lt
   d7f8a:	1ad2      	sublt	r2, r2, r3
   d7f8c:	eba3 0301 	sub.w	r3, r3, r1
   d7f90:	4433      	add	r3, r6
   d7f92:	49b5      	ldr	r1, [pc, #724]	; (d8268 <_strtod_r+0x968>)
   d7f94:	bfa8      	it	ge
   d7f96:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d7f98:	3b01      	subs	r3, #1
   d7f9a:	428b      	cmp	r3, r1
   d7f9c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d7fa0:	f280 808a 	bge.w	d80b8 <_strtod_r+0x7b8>
   d7fa4:	1ac9      	subs	r1, r1, r3
   d7fa6:	291f      	cmp	r1, #31
   d7fa8:	bfc8      	it	gt
   d7faa:	4fb0      	ldrgt	r7, [pc, #704]	; (d826c <_strtod_r+0x96c>)
   d7fac:	f04f 0901 	mov.w	r9, #1
   d7fb0:	bfd4      	ite	le
   d7fb2:	fa09 f301 	lslle.w	r3, r9, r1
   d7fb6:	1aff      	subgt	r7, r7, r3
   d7fb8:	eba6 0601 	sub.w	r6, r6, r1
   d7fbc:	bfd9      	ittee	le
   d7fbe:	9306      	strle	r3, [sp, #24]
   d7fc0:	2700      	movle	r7, #0
   d7fc2:	fa09 f707 	lslgt.w	r7, r9, r7
   d7fc6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d7fca:	eb08 0906 	add.w	r9, r8, r6
   d7fce:	9b03      	ldr	r3, [sp, #12]
   d7fd0:	45c8      	cmp	r8, r9
   d7fd2:	4416      	add	r6, r2
   d7fd4:	441e      	add	r6, r3
   d7fd6:	4643      	mov	r3, r8
   d7fd8:	bfa8      	it	ge
   d7fda:	464b      	movge	r3, r9
   d7fdc:	42b3      	cmp	r3, r6
   d7fde:	bfa8      	it	ge
   d7fe0:	4633      	movge	r3, r6
   d7fe2:	2b00      	cmp	r3, #0
   d7fe4:	bfc2      	ittt	gt
   d7fe6:	ebc3 0909 	rsbgt	r9, r3, r9
   d7fea:	1af6      	subgt	r6, r6, r3
   d7fec:	ebc3 0808 	rsbgt	r8, r3, r8
   d7ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7ff2:	2b00      	cmp	r3, #0
   d7ff4:	d164      	bne.n	d80c0 <_strtod_r+0x7c0>
   d7ff6:	f1b9 0f00 	cmp.w	r9, #0
   d7ffa:	dc7a      	bgt.n	d80f2 <_strtod_r+0x7f2>
   d7ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7ffe:	2b00      	cmp	r3, #0
   d8000:	f040 8081 	bne.w	d8106 <_strtod_r+0x806>
   d8004:	2e00      	cmp	r6, #0
   d8006:	f300 8088 	bgt.w	d811a <_strtod_r+0x81a>
   d800a:	f1b8 0f00 	cmp.w	r8, #0
   d800e:	f300 808e 	bgt.w	d812e <_strtod_r+0x82e>
   d8012:	9a04      	ldr	r2, [sp, #16]
   d8014:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8016:	9802      	ldr	r0, [sp, #8]
   d8018:	f001 fc27 	bl	d986a <__mdiff>
   d801c:	4604      	mov	r4, r0
   d801e:	2800      	cmp	r0, #0
   d8020:	f43f aeb5 	beq.w	d7d8e <_strtod_r+0x48e>
   d8024:	68c3      	ldr	r3, [r0, #12]
   d8026:	9307      	str	r3, [sp, #28]
   d8028:	2300      	movs	r3, #0
   d802a:	60c3      	str	r3, [r0, #12]
   d802c:	4629      	mov	r1, r5
   d802e:	f001 fc00 	bl	d9832 <__mcmp>
   d8032:	2800      	cmp	r0, #0
   d8034:	f280 8089 	bge.w	d814a <_strtod_r+0x84a>
   d8038:	9b07      	ldr	r3, [sp, #28]
   d803a:	2b00      	cmp	r3, #0
   d803c:	f040 8204 	bne.w	d8448 <_strtod_r+0xb48>
   d8040:	f1ba 0f00 	cmp.w	sl, #0
   d8044:	f040 8200 	bne.w	d8448 <_strtod_r+0xb48>
   d8048:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d804c:	2b00      	cmp	r3, #0
   d804e:	f040 81fb 	bne.w	d8448 <_strtod_r+0xb48>
   d8052:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8056:	0d1b      	lsrs	r3, r3, #20
   d8058:	051b      	lsls	r3, r3, #20
   d805a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d805e:	f240 81f3 	bls.w	d8448 <_strtod_r+0xb48>
   d8062:	6963      	ldr	r3, [r4, #20]
   d8064:	2b00      	cmp	r3, #0
   d8066:	d06c      	beq.n	d8142 <_strtod_r+0x842>
   d8068:	4621      	mov	r1, r4
   d806a:	2201      	movs	r2, #1
   d806c:	9802      	ldr	r0, [sp, #8]
   d806e:	f001 fb8f 	bl	d9790 <__lshift>
   d8072:	4629      	mov	r1, r5
   d8074:	4604      	mov	r4, r0
   d8076:	f001 fbdc 	bl	d9832 <__mcmp>
   d807a:	2800      	cmp	r0, #0
   d807c:	f340 81e4 	ble.w	d8448 <_strtod_r+0xb48>
   d8080:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8084:	9a03      	ldr	r2, [sp, #12]
   d8086:	0d1b      	lsrs	r3, r3, #20
   d8088:	051b      	lsls	r3, r3, #20
   d808a:	2a00      	cmp	r2, #0
   d808c:	f000 808c 	beq.w	d81a8 <_strtod_r+0x8a8>
   d8090:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8094:	f300 8088 	bgt.w	d81a8 <_strtod_r+0x8a8>
   d8098:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d809c:	f300 81d6 	bgt.w	d844c <_strtod_r+0xb4c>
   d80a0:	9a02      	ldr	r2, [sp, #8]
   d80a2:	2322      	movs	r3, #34	; 0x22
   d80a4:	f04f 0a00 	mov.w	sl, #0
   d80a8:	f04f 0b00 	mov.w	fp, #0
   d80ac:	6013      	str	r3, [r2, #0]
   d80ae:	9b05      	ldr	r3, [sp, #20]
   d80b0:	2b00      	cmp	r3, #0
   d80b2:	f040 81dc 	bne.w	d846e <_strtod_r+0xb6e>
   d80b6:	e1ee      	b.n	d8496 <_strtod_r+0xb96>
   d80b8:	2301      	movs	r3, #1
   d80ba:	2700      	movs	r7, #0
   d80bc:	9306      	str	r3, [sp, #24]
   d80be:	e784      	b.n	d7fca <_strtod_r+0x6ca>
   d80c0:	4629      	mov	r1, r5
   d80c2:	461a      	mov	r2, r3
   d80c4:	9802      	ldr	r0, [sp, #8]
   d80c6:	f001 fb15 	bl	d96f4 <__pow5mult>
   d80ca:	4605      	mov	r5, r0
   d80cc:	2800      	cmp	r0, #0
   d80ce:	f43f ae5e 	beq.w	d7d8e <_strtod_r+0x48e>
   d80d2:	4601      	mov	r1, r0
   d80d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d80d6:	9802      	ldr	r0, [sp, #8]
   d80d8:	f001 fa7b 	bl	d95d2 <__multiply>
   d80dc:	9007      	str	r0, [sp, #28]
   d80de:	2800      	cmp	r0, #0
   d80e0:	f43f ae55 	beq.w	d7d8e <_strtod_r+0x48e>
   d80e4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d80e6:	9802      	ldr	r0, [sp, #8]
   d80e8:	f001 f98d 	bl	d9406 <_Bfree>
   d80ec:	9b07      	ldr	r3, [sp, #28]
   d80ee:	9318      	str	r3, [sp, #96]	; 0x60
   d80f0:	e781      	b.n	d7ff6 <_strtod_r+0x6f6>
   d80f2:	464a      	mov	r2, r9
   d80f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d80f6:	9802      	ldr	r0, [sp, #8]
   d80f8:	f001 fb4a 	bl	d9790 <__lshift>
   d80fc:	9018      	str	r0, [sp, #96]	; 0x60
   d80fe:	2800      	cmp	r0, #0
   d8100:	f47f af7c 	bne.w	d7ffc <_strtod_r+0x6fc>
   d8104:	e643      	b.n	d7d8e <_strtod_r+0x48e>
   d8106:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8108:	9904      	ldr	r1, [sp, #16]
   d810a:	9802      	ldr	r0, [sp, #8]
   d810c:	f001 faf2 	bl	d96f4 <__pow5mult>
   d8110:	9004      	str	r0, [sp, #16]
   d8112:	2800      	cmp	r0, #0
   d8114:	f47f af76 	bne.w	d8004 <_strtod_r+0x704>
   d8118:	e639      	b.n	d7d8e <_strtod_r+0x48e>
   d811a:	4632      	mov	r2, r6
   d811c:	9904      	ldr	r1, [sp, #16]
   d811e:	9802      	ldr	r0, [sp, #8]
   d8120:	f001 fb36 	bl	d9790 <__lshift>
   d8124:	9004      	str	r0, [sp, #16]
   d8126:	2800      	cmp	r0, #0
   d8128:	f47f af6f 	bne.w	d800a <_strtod_r+0x70a>
   d812c:	e62f      	b.n	d7d8e <_strtod_r+0x48e>
   d812e:	4629      	mov	r1, r5
   d8130:	4642      	mov	r2, r8
   d8132:	9802      	ldr	r0, [sp, #8]
   d8134:	f001 fb2c 	bl	d9790 <__lshift>
   d8138:	4605      	mov	r5, r0
   d813a:	2800      	cmp	r0, #0
   d813c:	f47f af69 	bne.w	d8012 <_strtod_r+0x712>
   d8140:	e625      	b.n	d7d8e <_strtod_r+0x48e>
   d8142:	6923      	ldr	r3, [r4, #16]
   d8144:	2b01      	cmp	r3, #1
   d8146:	dc8f      	bgt.n	d8068 <_strtod_r+0x768>
   d8148:	e17e      	b.n	d8448 <_strtod_r+0xb48>
   d814a:	d161      	bne.n	d8210 <_strtod_r+0x910>
   d814c:	9a07      	ldr	r2, [sp, #28]
   d814e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8152:	b322      	cbz	r2, d819e <_strtod_r+0x89e>
   d8154:	4946      	ldr	r1, [pc, #280]	; (d8270 <_strtod_r+0x970>)
   d8156:	428b      	cmp	r3, r1
   d8158:	465a      	mov	r2, fp
   d815a:	d12e      	bne.n	d81ba <_strtod_r+0x8ba>
   d815c:	9b03      	ldr	r3, [sp, #12]
   d815e:	4651      	mov	r1, sl
   d8160:	b163      	cbz	r3, d817c <_strtod_r+0x87c>
   d8162:	4b44      	ldr	r3, [pc, #272]	; (d8274 <_strtod_r+0x974>)
   d8164:	4013      	ands	r3, r2
   d8166:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d816a:	d807      	bhi.n	d817c <_strtod_r+0x87c>
   d816c:	0d1b      	lsrs	r3, r3, #20
   d816e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8176:	fa00 f303 	lsl.w	r3, r0, r3
   d817a:	e001      	b.n	d8180 <_strtod_r+0x880>
   d817c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8180:	428b      	cmp	r3, r1
   d8182:	d11a      	bne.n	d81ba <_strtod_r+0x8ba>
   d8184:	493c      	ldr	r1, [pc, #240]	; (d8278 <_strtod_r+0x978>)
   d8186:	428a      	cmp	r2, r1
   d8188:	d102      	bne.n	d8190 <_strtod_r+0x890>
   d818a:	3301      	adds	r3, #1
   d818c:	f43f adff 	beq.w	d7d8e <_strtod_r+0x48e>
   d8190:	4b38      	ldr	r3, [pc, #224]	; (d8274 <_strtod_r+0x974>)
   d8192:	4013      	ands	r3, r2
   d8194:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8198:	f04f 0a00 	mov.w	sl, #0
   d819c:	e154      	b.n	d8448 <_strtod_r+0xb48>
   d819e:	b963      	cbnz	r3, d81ba <_strtod_r+0x8ba>
   d81a0:	f1ba 0f00 	cmp.w	sl, #0
   d81a4:	d109      	bne.n	d81ba <_strtod_r+0x8ba>
   d81a6:	e76b      	b.n	d8080 <_strtod_r+0x780>
   d81a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d81ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d81b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d81b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d81b8:	e146      	b.n	d8448 <_strtod_r+0xb48>
   d81ba:	b117      	cbz	r7, d81c2 <_strtod_r+0x8c2>
   d81bc:	ea17 0f0b 	tst.w	r7, fp
   d81c0:	e002      	b.n	d81c8 <_strtod_r+0x8c8>
   d81c2:	9b06      	ldr	r3, [sp, #24]
   d81c4:	ea13 0f0a 	tst.w	r3, sl
   d81c8:	f000 813e 	beq.w	d8448 <_strtod_r+0xb48>
   d81cc:	9b07      	ldr	r3, [sp, #28]
   d81ce:	9a03      	ldr	r2, [sp, #12]
   d81d0:	4650      	mov	r0, sl
   d81d2:	4659      	mov	r1, fp
   d81d4:	b153      	cbz	r3, d81ec <_strtod_r+0x8ec>
   d81d6:	f7ff fb76 	bl	d78c6 <sulp>
   d81da:	4602      	mov	r2, r0
   d81dc:	460b      	mov	r3, r1
   d81de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d81e2:	f7fe fce1 	bl	d6ba8 <__adddf3>
   d81e6:	4682      	mov	sl, r0
   d81e8:	468b      	mov	fp, r1
   d81ea:	e12d      	b.n	d8448 <_strtod_r+0xb48>
   d81ec:	f7ff fb6b 	bl	d78c6 <sulp>
   d81f0:	4602      	mov	r2, r0
   d81f2:	460b      	mov	r3, r1
   d81f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d81f8:	f7fe fcd4 	bl	d6ba4 <__aeabi_dsub>
   d81fc:	2200      	movs	r2, #0
   d81fe:	2300      	movs	r3, #0
   d8200:	4682      	mov	sl, r0
   d8202:	468b      	mov	fp, r1
   d8204:	f7ff f8ea 	bl	d73dc <__aeabi_dcmpeq>
   d8208:	2800      	cmp	r0, #0
   d820a:	f47f af49 	bne.w	d80a0 <_strtod_r+0x7a0>
   d820e:	e11b      	b.n	d8448 <_strtod_r+0xb48>
   d8210:	4629      	mov	r1, r5
   d8212:	4620      	mov	r0, r4
   d8214:	f001 fc4b 	bl	d9aae <__ratio>
   d8218:	ec57 6b10 	vmov	r6, r7, d0
   d821c:	2200      	movs	r2, #0
   d821e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8222:	ee10 0a10 	vmov	r0, s0
   d8226:	4639      	mov	r1, r7
   d8228:	f7ff f8ec 	bl	d7404 <__aeabi_dcmple>
   d822c:	2800      	cmp	r0, #0
   d822e:	d042      	beq.n	d82b6 <_strtod_r+0x9b6>
   d8230:	9b07      	ldr	r3, [sp, #28]
   d8232:	b123      	cbz	r3, d823e <_strtod_r+0x93e>
   d8234:	f04f 0800 	mov.w	r8, #0
   d8238:	f8df 9040 	ldr.w	r9, [pc, #64]	; d827c <_strtod_r+0x97c>
   d823c:	e011      	b.n	d8262 <_strtod_r+0x962>
   d823e:	f1ba 0f00 	cmp.w	sl, #0
   d8242:	d103      	bne.n	d824c <_strtod_r+0x94c>
   d8244:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8248:	b93b      	cbnz	r3, d825a <_strtod_r+0x95a>
   d824a:	e01b      	b.n	d8284 <_strtod_r+0x984>
   d824c:	f1ba 0f01 	cmp.w	sl, #1
   d8250:	d103      	bne.n	d825a <_strtod_r+0x95a>
   d8252:	f1bb 0f00 	cmp.w	fp, #0
   d8256:	f43f af23 	beq.w	d80a0 <_strtod_r+0x7a0>
   d825a:	f8df 9024 	ldr.w	r9, [pc, #36]	; d8280 <_strtod_r+0x980>
   d825e:	f04f 0800 	mov.w	r8, #0
   d8262:	2600      	movs	r6, #0
   d8264:	4f05      	ldr	r7, [pc, #20]	; (d827c <_strtod_r+0x97c>)
   d8266:	e039      	b.n	d82dc <_strtod_r+0x9dc>
   d8268:	fffffc02 	.word	0xfffffc02
   d826c:	fffffbe2 	.word	0xfffffbe2
   d8270:	000fffff 	.word	0x000fffff
   d8274:	7ff00000 	.word	0x7ff00000
   d8278:	7fefffff 	.word	0x7fefffff
   d827c:	3ff00000 	.word	0x3ff00000
   d8280:	bff00000 	.word	0xbff00000
   d8284:	2200      	movs	r2, #0
   d8286:	4b98      	ldr	r3, [pc, #608]	; (d84e8 <_strtod_r+0xbe8>)
   d8288:	4630      	mov	r0, r6
   d828a:	4639      	mov	r1, r7
   d828c:	f7ff f8b0 	bl	d73f0 <__aeabi_dcmplt>
   d8290:	b940      	cbnz	r0, d82a4 <_strtod_r+0x9a4>
   d8292:	4630      	mov	r0, r6
   d8294:	4639      	mov	r1, r7
   d8296:	2200      	movs	r2, #0
   d8298:	4b94      	ldr	r3, [pc, #592]	; (d84ec <_strtod_r+0xbec>)
   d829a:	f7fe fe37 	bl	d6f0c <__aeabi_dmul>
   d829e:	4606      	mov	r6, r0
   d82a0:	460f      	mov	r7, r1
   d82a2:	e001      	b.n	d82a8 <_strtod_r+0x9a8>
   d82a4:	4f91      	ldr	r7, [pc, #580]	; (d84ec <_strtod_r+0xbec>)
   d82a6:	2600      	movs	r6, #0
   d82a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d82ac:	9614      	str	r6, [sp, #80]	; 0x50
   d82ae:	9315      	str	r3, [sp, #84]	; 0x54
   d82b0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d82b4:	e012      	b.n	d82dc <_strtod_r+0x9dc>
   d82b6:	4b8d      	ldr	r3, [pc, #564]	; (d84ec <_strtod_r+0xbec>)
   d82b8:	4630      	mov	r0, r6
   d82ba:	4639      	mov	r1, r7
   d82bc:	2200      	movs	r2, #0
   d82be:	f7fe fe25 	bl	d6f0c <__aeabi_dmul>
   d82c2:	9b07      	ldr	r3, [sp, #28]
   d82c4:	4606      	mov	r6, r0
   d82c6:	460f      	mov	r7, r1
   d82c8:	b923      	cbnz	r3, d82d4 <_strtod_r+0x9d4>
   d82ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d82ce:	900e      	str	r0, [sp, #56]	; 0x38
   d82d0:	930f      	str	r3, [sp, #60]	; 0x3c
   d82d2:	e001      	b.n	d82d8 <_strtod_r+0x9d8>
   d82d4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d82d8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d82dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d82e0:	0d1b      	lsrs	r3, r3, #20
   d82e2:	051b      	lsls	r3, r3, #20
   d82e4:	9306      	str	r3, [sp, #24]
   d82e6:	9a06      	ldr	r2, [sp, #24]
   d82e8:	4b81      	ldr	r3, [pc, #516]	; (d84f0 <_strtod_r+0xbf0>)
   d82ea:	429a      	cmp	r2, r3
   d82ec:	d12b      	bne.n	d8346 <_strtod_r+0xa46>
   d82ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d82f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d82f6:	ec4b ab10 	vmov	d0, sl, fp
   d82fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d82fe:	f001 fb13 	bl	d9928 <__ulp>
   d8302:	4640      	mov	r0, r8
   d8304:	ec53 2b10 	vmov	r2, r3, d0
   d8308:	4649      	mov	r1, r9
   d830a:	f7fe fdff 	bl	d6f0c <__aeabi_dmul>
   d830e:	4652      	mov	r2, sl
   d8310:	465b      	mov	r3, fp
   d8312:	f7fe fc49 	bl	d6ba8 <__adddf3>
   d8316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d831a:	0d1b      	lsrs	r3, r3, #20
   d831c:	4a75      	ldr	r2, [pc, #468]	; (d84f4 <_strtod_r+0xbf4>)
   d831e:	051b      	lsls	r3, r3, #20
   d8320:	4293      	cmp	r3, r2
   d8322:	4682      	mov	sl, r0
   d8324:	d90c      	bls.n	d8340 <_strtod_r+0xa40>
   d8326:	4b74      	ldr	r3, [pc, #464]	; (d84f8 <_strtod_r+0xbf8>)
   d8328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d832a:	429a      	cmp	r2, r3
   d832c:	d103      	bne.n	d8336 <_strtod_r+0xa36>
   d832e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8330:	3301      	adds	r3, #1
   d8332:	f43f ad2c 	beq.w	d7d8e <_strtod_r+0x48e>
   d8336:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d84f8 <_strtod_r+0xbf8>
   d833a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d833e:	e072      	b.n	d8426 <_strtod_r+0xb26>
   d8340:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d8344:	e038      	b.n	d83b8 <_strtod_r+0xab8>
   d8346:	9b03      	ldr	r3, [sp, #12]
   d8348:	b333      	cbz	r3, d8398 <_strtod_r+0xa98>
   d834a:	9b06      	ldr	r3, [sp, #24]
   d834c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8350:	d822      	bhi.n	d8398 <_strtod_r+0xa98>
   d8352:	a35d      	add	r3, pc, #372	; (adr r3, d84c8 <_strtod_r+0xbc8>)
   d8354:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8358:	4630      	mov	r0, r6
   d835a:	4639      	mov	r1, r7
   d835c:	f7ff f852 	bl	d7404 <__aeabi_dcmple>
   d8360:	b1a8      	cbz	r0, d838e <_strtod_r+0xa8e>
   d8362:	4639      	mov	r1, r7
   d8364:	4630      	mov	r0, r6
   d8366:	f7ff f893 	bl	d7490 <__aeabi_d2uiz>
   d836a:	2800      	cmp	r0, #0
   d836c:	bf08      	it	eq
   d836e:	2001      	moveq	r0, #1
   d8370:	f7fe fd56 	bl	d6e20 <__aeabi_ui2d>
   d8374:	9b07      	ldr	r3, [sp, #28]
   d8376:	4606      	mov	r6, r0
   d8378:	460f      	mov	r7, r1
   d837a:	b923      	cbnz	r3, d8386 <_strtod_r+0xa86>
   d837c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8380:	9010      	str	r0, [sp, #64]	; 0x40
   d8382:	9311      	str	r3, [sp, #68]	; 0x44
   d8384:	e001      	b.n	d838a <_strtod_r+0xa8a>
   d8386:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d838a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d838e:	9a06      	ldr	r2, [sp, #24]
   d8390:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d8394:	ebc2 0903 	rsb	r9, r2, r3
   d8398:	ed9d 0b08 	vldr	d0, [sp, #32]
   d839c:	f001 fac4 	bl	d9928 <__ulp>
   d83a0:	4640      	mov	r0, r8
   d83a2:	ec53 2b10 	vmov	r2, r3, d0
   d83a6:	4649      	mov	r1, r9
   d83a8:	f7fe fdb0 	bl	d6f0c <__aeabi_dmul>
   d83ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d83b0:	f7fe fbfa 	bl	d6ba8 <__adddf3>
   d83b4:	4682      	mov	sl, r0
   d83b6:	468b      	mov	fp, r1
   d83b8:	9b03      	ldr	r3, [sp, #12]
   d83ba:	bba3      	cbnz	r3, d8426 <_strtod_r+0xb26>
   d83bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d83c0:	0d1b      	lsrs	r3, r3, #20
   d83c2:	9a06      	ldr	r2, [sp, #24]
   d83c4:	051b      	lsls	r3, r3, #20
   d83c6:	429a      	cmp	r2, r3
   d83c8:	46d8      	mov	r8, fp
   d83ca:	d12c      	bne.n	d8426 <_strtod_r+0xb26>
   d83cc:	4639      	mov	r1, r7
   d83ce:	4630      	mov	r0, r6
   d83d0:	f7ff f836 	bl	d7440 <__aeabi_d2iz>
   d83d4:	f7fe fd34 	bl	d6e40 <__aeabi_i2d>
   d83d8:	460b      	mov	r3, r1
   d83da:	4602      	mov	r2, r0
   d83dc:	4639      	mov	r1, r7
   d83de:	4630      	mov	r0, r6
   d83e0:	f7fe fbe0 	bl	d6ba4 <__aeabi_dsub>
   d83e4:	9b07      	ldr	r3, [sp, #28]
   d83e6:	4606      	mov	r6, r0
   d83e8:	460f      	mov	r7, r1
   d83ea:	b92b      	cbnz	r3, d83f8 <_strtod_r+0xaf8>
   d83ec:	f1ba 0f00 	cmp.w	sl, #0
   d83f0:	d102      	bne.n	d83f8 <_strtod_r+0xaf8>
   d83f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d83f6:	b183      	cbz	r3, d841a <_strtod_r+0xb1a>
   d83f8:	a335      	add	r3, pc, #212	; (adr r3, d84d0 <_strtod_r+0xbd0>)
   d83fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83fe:	4630      	mov	r0, r6
   d8400:	4639      	mov	r1, r7
   d8402:	f7fe fff5 	bl	d73f0 <__aeabi_dcmplt>
   d8406:	2800      	cmp	r0, #0
   d8408:	d131      	bne.n	d846e <_strtod_r+0xb6e>
   d840a:	a333      	add	r3, pc, #204	; (adr r3, d84d8 <_strtod_r+0xbd8>)
   d840c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8410:	4630      	mov	r0, r6
   d8412:	4639      	mov	r1, r7
   d8414:	f7ff f80a 	bl	d742c <__aeabi_dcmpgt>
   d8418:	e004      	b.n	d8424 <_strtod_r+0xb24>
   d841a:	a331      	add	r3, pc, #196	; (adr r3, d84e0 <_strtod_r+0xbe0>)
   d841c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8420:	f7fe ffe6 	bl	d73f0 <__aeabi_dcmplt>
   d8424:	bb18      	cbnz	r0, d846e <_strtod_r+0xb6e>
   d8426:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8428:	9802      	ldr	r0, [sp, #8]
   d842a:	f000 ffec 	bl	d9406 <_Bfree>
   d842e:	9904      	ldr	r1, [sp, #16]
   d8430:	9802      	ldr	r0, [sp, #8]
   d8432:	f000 ffe8 	bl	d9406 <_Bfree>
   d8436:	4629      	mov	r1, r5
   d8438:	9802      	ldr	r0, [sp, #8]
   d843a:	f000 ffe4 	bl	d9406 <_Bfree>
   d843e:	4621      	mov	r1, r4
   d8440:	9802      	ldr	r0, [sp, #8]
   d8442:	f000 ffe0 	bl	d9406 <_Bfree>
   d8446:	e56d      	b.n	d7f24 <_strtod_r+0x624>
   d8448:	9b03      	ldr	r3, [sp, #12]
   d844a:	b183      	cbz	r3, d846e <_strtod_r+0xb6e>
   d844c:	4b2b      	ldr	r3, [pc, #172]	; (d84fc <_strtod_r+0xbfc>)
   d844e:	930b      	str	r3, [sp, #44]	; 0x2c
   d8450:	2300      	movs	r3, #0
   d8452:	930a      	str	r3, [sp, #40]	; 0x28
   d8454:	4650      	mov	r0, sl
   d8456:	4659      	mov	r1, fp
   d8458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d845c:	f7fe fd56 	bl	d6f0c <__aeabi_dmul>
   d8460:	4682      	mov	sl, r0
   d8462:	468b      	mov	fp, r1
   d8464:	b919      	cbnz	r1, d846e <_strtod_r+0xb6e>
   d8466:	b910      	cbnz	r0, d846e <_strtod_r+0xb6e>
   d8468:	9a02      	ldr	r2, [sp, #8]
   d846a:	2322      	movs	r3, #34	; 0x22
   d846c:	6013      	str	r3, [r2, #0]
   d846e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8470:	9802      	ldr	r0, [sp, #8]
   d8472:	f000 ffc8 	bl	d9406 <_Bfree>
   d8476:	9904      	ldr	r1, [sp, #16]
   d8478:	9802      	ldr	r0, [sp, #8]
   d847a:	f000 ffc4 	bl	d9406 <_Bfree>
   d847e:	4629      	mov	r1, r5
   d8480:	9802      	ldr	r0, [sp, #8]
   d8482:	f000 ffc0 	bl	d9406 <_Bfree>
   d8486:	9905      	ldr	r1, [sp, #20]
   d8488:	9802      	ldr	r0, [sp, #8]
   d848a:	f000 ffbc 	bl	d9406 <_Bfree>
   d848e:	4621      	mov	r1, r4
   d8490:	9802      	ldr	r0, [sp, #8]
   d8492:	f000 ffb8 	bl	d9406 <_Bfree>
   d8496:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8498:	b113      	cbz	r3, d84a0 <_strtod_r+0xba0>
   d849a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d849c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d849e:	6013      	str	r3, [r2, #0]
   d84a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d84a2:	b11b      	cbz	r3, d84ac <_strtod_r+0xbac>
   d84a4:	4652      	mov	r2, sl
   d84a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d84aa:	e007      	b.n	d84bc <_strtod_r+0xbbc>
   d84ac:	4652      	mov	r2, sl
   d84ae:	465b      	mov	r3, fp
   d84b0:	e004      	b.n	d84bc <_strtod_r+0xbbc>
   d84b2:	2500      	movs	r5, #0
   d84b4:	462a      	mov	r2, r5
   d84b6:	2101      	movs	r1, #1
   d84b8:	f7ff bb41 	b.w	d7b3e <_strtod_r+0x23e>
   d84bc:	ec43 2b10 	vmov	d0, r2, r3
   d84c0:	b01d      	add	sp, #116	; 0x74
   d84c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84c6:	bf00      	nop
   d84c8:	ffc00000 	.word	0xffc00000
   d84cc:	41dfffff 	.word	0x41dfffff
   d84d0:	94a03595 	.word	0x94a03595
   d84d4:	3fdfffff 	.word	0x3fdfffff
   d84d8:	35afe535 	.word	0x35afe535
   d84dc:	3fe00000 	.word	0x3fe00000
   d84e0:	94a03595 	.word	0x94a03595
   d84e4:	3fcfffff 	.word	0x3fcfffff
   d84e8:	3ff00000 	.word	0x3ff00000
   d84ec:	3fe00000 	.word	0x3fe00000
   d84f0:	7fe00000 	.word	0x7fe00000
   d84f4:	7c9fffff 	.word	0x7c9fffff
   d84f8:	7fefffff 	.word	0x7fefffff
   d84fc:	39500000 	.word	0x39500000

000d8500 <strtod>:
   d8500:	4b02      	ldr	r3, [pc, #8]	; (d850c <strtod+0xc>)
   d8502:	460a      	mov	r2, r1
   d8504:	4601      	mov	r1, r0
   d8506:	6818      	ldr	r0, [r3, #0]
   d8508:	f7ff b9fa 	b.w	d7900 <_strtod_r>
   d850c:	2003e1d8 	.word	0x2003e1d8

000d8510 <_strtol_r>:
   d8510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8514:	4680      	mov	r8, r0
   d8516:	4840      	ldr	r0, [pc, #256]	; (d8618 <_strtol_r+0x108>)
   d8518:	f8d0 9000 	ldr.w	r9, [r0]
   d851c:	460f      	mov	r7, r1
   d851e:	463d      	mov	r5, r7
   d8520:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8524:	eb09 0004 	add.w	r0, r9, r4
   d8528:	7840      	ldrb	r0, [r0, #1]
   d852a:	f000 0008 	and.w	r0, r0, #8
   d852e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8532:	b108      	cbz	r0, d8538 <_strtol_r+0x28>
   d8534:	462f      	mov	r7, r5
   d8536:	e7f2      	b.n	d851e <_strtol_r+0xe>
   d8538:	2c2d      	cmp	r4, #45	; 0x2d
   d853a:	d103      	bne.n	d8544 <_strtol_r+0x34>
   d853c:	1cbd      	adds	r5, r7, #2
   d853e:	787c      	ldrb	r4, [r7, #1]
   d8540:	2601      	movs	r6, #1
   d8542:	e003      	b.n	d854c <_strtol_r+0x3c>
   d8544:	2c2b      	cmp	r4, #43	; 0x2b
   d8546:	bf04      	itt	eq
   d8548:	787c      	ldrbeq	r4, [r7, #1]
   d854a:	1cbd      	addeq	r5, r7, #2
   d854c:	b113      	cbz	r3, d8554 <_strtol_r+0x44>
   d854e:	2b10      	cmp	r3, #16
   d8550:	d10a      	bne.n	d8568 <_strtol_r+0x58>
   d8552:	e05b      	b.n	d860c <_strtol_r+0xfc>
   d8554:	2c30      	cmp	r4, #48	; 0x30
   d8556:	d157      	bne.n	d8608 <_strtol_r+0xf8>
   d8558:	7828      	ldrb	r0, [r5, #0]
   d855a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d855e:	2858      	cmp	r0, #88	; 0x58
   d8560:	d14d      	bne.n	d85fe <_strtol_r+0xee>
   d8562:	786c      	ldrb	r4, [r5, #1]
   d8564:	2310      	movs	r3, #16
   d8566:	3502      	adds	r5, #2
   d8568:	2e00      	cmp	r6, #0
   d856a:	bf14      	ite	ne
   d856c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8570:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8574:	2700      	movs	r7, #0
   d8576:	fbbc faf3 	udiv	sl, ip, r3
   d857a:	4638      	mov	r0, r7
   d857c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8580:	eb09 0e04 	add.w	lr, r9, r4
   d8584:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8588:	f01e 0f04 	tst.w	lr, #4
   d858c:	d001      	beq.n	d8592 <_strtol_r+0x82>
   d858e:	3c30      	subs	r4, #48	; 0x30
   d8590:	e00b      	b.n	d85aa <_strtol_r+0x9a>
   d8592:	f01e 0e03 	ands.w	lr, lr, #3
   d8596:	d01b      	beq.n	d85d0 <_strtol_r+0xc0>
   d8598:	f1be 0f01 	cmp.w	lr, #1
   d859c:	bf0c      	ite	eq
   d859e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d85a2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d85a6:	ebce 0404 	rsb	r4, lr, r4
   d85aa:	42a3      	cmp	r3, r4
   d85ac:	dd10      	ble.n	d85d0 <_strtol_r+0xc0>
   d85ae:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d85b2:	d00a      	beq.n	d85ca <_strtol_r+0xba>
   d85b4:	4550      	cmp	r0, sl
   d85b6:	d806      	bhi.n	d85c6 <_strtol_r+0xb6>
   d85b8:	d101      	bne.n	d85be <_strtol_r+0xae>
   d85ba:	4564      	cmp	r4, ip
   d85bc:	dc03      	bgt.n	d85c6 <_strtol_r+0xb6>
   d85be:	fb03 4000 	mla	r0, r3, r0, r4
   d85c2:	2701      	movs	r7, #1
   d85c4:	e001      	b.n	d85ca <_strtol_r+0xba>
   d85c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d85ca:	f815 4b01 	ldrb.w	r4, [r5], #1
   d85ce:	e7d7      	b.n	d8580 <_strtol_r+0x70>
   d85d0:	1c7b      	adds	r3, r7, #1
   d85d2:	d10c      	bne.n	d85ee <_strtol_r+0xde>
   d85d4:	2e00      	cmp	r6, #0
   d85d6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d85da:	bf14      	ite	ne
   d85dc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d85e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d85e4:	f8c8 3000 	str.w	r3, [r8]
   d85e8:	b92a      	cbnz	r2, d85f6 <_strtol_r+0xe6>
   d85ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d85ee:	b106      	cbz	r6, d85f2 <_strtol_r+0xe2>
   d85f0:	4240      	negs	r0, r0
   d85f2:	b172      	cbz	r2, d8612 <_strtol_r+0x102>
   d85f4:	b107      	cbz	r7, d85f8 <_strtol_r+0xe8>
   d85f6:	1e69      	subs	r1, r5, #1
   d85f8:	6011      	str	r1, [r2, #0]
   d85fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d85fe:	2430      	movs	r4, #48	; 0x30
   d8600:	2b00      	cmp	r3, #0
   d8602:	d1b1      	bne.n	d8568 <_strtol_r+0x58>
   d8604:	2308      	movs	r3, #8
   d8606:	e7af      	b.n	d8568 <_strtol_r+0x58>
   d8608:	230a      	movs	r3, #10
   d860a:	e7ad      	b.n	d8568 <_strtol_r+0x58>
   d860c:	2c30      	cmp	r4, #48	; 0x30
   d860e:	d0a3      	beq.n	d8558 <_strtol_r+0x48>
   d8610:	e7aa      	b.n	d8568 <_strtol_r+0x58>
   d8612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8616:	bf00      	nop
   d8618:	2003e174 	.word	0x2003e174

000d861c <strtol>:
   d861c:	4613      	mov	r3, r2
   d861e:	460a      	mov	r2, r1
   d8620:	4601      	mov	r1, r0
   d8622:	4802      	ldr	r0, [pc, #8]	; (d862c <strtol+0x10>)
   d8624:	6800      	ldr	r0, [r0, #0]
   d8626:	f7ff bf73 	b.w	d8510 <_strtol_r>
   d862a:	bf00      	nop
   d862c:	2003e1d8 	.word	0x2003e1d8

000d8630 <_strtoul_r>:
   d8630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8634:	4680      	mov	r8, r0
   d8636:	483c      	ldr	r0, [pc, #240]	; (d8728 <_strtoul_r+0xf8>)
   d8638:	f8d0 9000 	ldr.w	r9, [r0]
   d863c:	460e      	mov	r6, r1
   d863e:	4635      	mov	r5, r6
   d8640:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8644:	eb09 0004 	add.w	r0, r9, r4
   d8648:	7840      	ldrb	r0, [r0, #1]
   d864a:	f000 0008 	and.w	r0, r0, #8
   d864e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d8652:	b108      	cbz	r0, d8658 <_strtoul_r+0x28>
   d8654:	462e      	mov	r6, r5
   d8656:	e7f2      	b.n	d863e <_strtoul_r+0xe>
   d8658:	2c2d      	cmp	r4, #45	; 0x2d
   d865a:	d103      	bne.n	d8664 <_strtoul_r+0x34>
   d865c:	1cb5      	adds	r5, r6, #2
   d865e:	7874      	ldrb	r4, [r6, #1]
   d8660:	2701      	movs	r7, #1
   d8662:	e003      	b.n	d866c <_strtoul_r+0x3c>
   d8664:	2c2b      	cmp	r4, #43	; 0x2b
   d8666:	bf04      	itt	eq
   d8668:	7874      	ldrbeq	r4, [r6, #1]
   d866a:	1cb5      	addeq	r5, r6, #2
   d866c:	b113      	cbz	r3, d8674 <_strtoul_r+0x44>
   d866e:	2b10      	cmp	r3, #16
   d8670:	d10a      	bne.n	d8688 <_strtoul_r+0x58>
   d8672:	e053      	b.n	d871c <_strtoul_r+0xec>
   d8674:	2c30      	cmp	r4, #48	; 0x30
   d8676:	d14f      	bne.n	d8718 <_strtoul_r+0xe8>
   d8678:	7828      	ldrb	r0, [r5, #0]
   d867a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d867e:	2858      	cmp	r0, #88	; 0x58
   d8680:	d145      	bne.n	d870e <_strtoul_r+0xde>
   d8682:	786c      	ldrb	r4, [r5, #1]
   d8684:	2310      	movs	r3, #16
   d8686:	3502      	adds	r5, #2
   d8688:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d868c:	2600      	movs	r6, #0
   d868e:	fbbc fcf3 	udiv	ip, ip, r3
   d8692:	fb03 fa0c 	mul.w	sl, r3, ip
   d8696:	ea6f 0a0a 	mvn.w	sl, sl
   d869a:	4630      	mov	r0, r6
   d869c:	eb09 0e04 	add.w	lr, r9, r4
   d86a0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d86a4:	f01e 0f04 	tst.w	lr, #4
   d86a8:	d001      	beq.n	d86ae <_strtoul_r+0x7e>
   d86aa:	3c30      	subs	r4, #48	; 0x30
   d86ac:	e00b      	b.n	d86c6 <_strtoul_r+0x96>
   d86ae:	f01e 0e03 	ands.w	lr, lr, #3
   d86b2:	d01a      	beq.n	d86ea <_strtoul_r+0xba>
   d86b4:	f1be 0f01 	cmp.w	lr, #1
   d86b8:	bf0c      	ite	eq
   d86ba:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d86be:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d86c2:	ebce 0404 	rsb	r4, lr, r4
   d86c6:	42a3      	cmp	r3, r4
   d86c8:	dd0f      	ble.n	d86ea <_strtoul_r+0xba>
   d86ca:	2e00      	cmp	r6, #0
   d86cc:	db08      	blt.n	d86e0 <_strtoul_r+0xb0>
   d86ce:	4560      	cmp	r0, ip
   d86d0:	d806      	bhi.n	d86e0 <_strtoul_r+0xb0>
   d86d2:	d101      	bne.n	d86d8 <_strtoul_r+0xa8>
   d86d4:	4554      	cmp	r4, sl
   d86d6:	dc03      	bgt.n	d86e0 <_strtoul_r+0xb0>
   d86d8:	fb03 4000 	mla	r0, r3, r0, r4
   d86dc:	2601      	movs	r6, #1
   d86de:	e001      	b.n	d86e4 <_strtoul_r+0xb4>
   d86e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d86e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d86e8:	e7d8      	b.n	d869c <_strtoul_r+0x6c>
   d86ea:	2e00      	cmp	r6, #0
   d86ec:	da07      	bge.n	d86fe <_strtoul_r+0xce>
   d86ee:	2322      	movs	r3, #34	; 0x22
   d86f0:	f8c8 3000 	str.w	r3, [r8]
   d86f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d86f8:	b92a      	cbnz	r2, d8706 <_strtoul_r+0xd6>
   d86fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86fe:	b107      	cbz	r7, d8702 <_strtoul_r+0xd2>
   d8700:	4240      	negs	r0, r0
   d8702:	b172      	cbz	r2, d8722 <_strtoul_r+0xf2>
   d8704:	b106      	cbz	r6, d8708 <_strtoul_r+0xd8>
   d8706:	1e69      	subs	r1, r5, #1
   d8708:	6011      	str	r1, [r2, #0]
   d870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d870e:	2430      	movs	r4, #48	; 0x30
   d8710:	2b00      	cmp	r3, #0
   d8712:	d1b9      	bne.n	d8688 <_strtoul_r+0x58>
   d8714:	2308      	movs	r3, #8
   d8716:	e7b7      	b.n	d8688 <_strtoul_r+0x58>
   d8718:	230a      	movs	r3, #10
   d871a:	e7b5      	b.n	d8688 <_strtoul_r+0x58>
   d871c:	2c30      	cmp	r4, #48	; 0x30
   d871e:	d0ab      	beq.n	d8678 <_strtoul_r+0x48>
   d8720:	e7b2      	b.n	d8688 <_strtoul_r+0x58>
   d8722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8726:	bf00      	nop
   d8728:	2003e174 	.word	0x2003e174

000d872c <strtoul>:
   d872c:	4613      	mov	r3, r2
   d872e:	460a      	mov	r2, r1
   d8730:	4601      	mov	r1, r0
   d8732:	4802      	ldr	r0, [pc, #8]	; (d873c <strtoul+0x10>)
   d8734:	6800      	ldr	r0, [r0, #0]
   d8736:	f7ff bf7b 	b.w	d8630 <_strtoul_r>
   d873a:	bf00      	nop
   d873c:	2003e1d8 	.word	0x2003e1d8

000d8740 <__tzcalc_limits>:
   d8740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8744:	4604      	mov	r4, r0
   d8746:	f000 fd8d 	bl	d9264 <__gettzinfo>
   d874a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d874e:	429c      	cmp	r4, r3
   d8750:	f340 8096 	ble.w	d8880 <__tzcalc_limits+0x140>
   d8754:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8758:	18e3      	adds	r3, r4, r3
   d875a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d875e:	109b      	asrs	r3, r3, #2
   d8760:	f240 156d 	movw	r5, #365	; 0x16d
   d8764:	fb05 3502 	mla	r5, r5, r2, r3
   d8768:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d876c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8770:	fb92 f3f3 	sdiv	r3, r2, r3
   d8774:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8778:	442b      	add	r3, r5
   d877a:	18a5      	adds	r5, r4, r2
   d877c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8780:	fb95 f5f2 	sdiv	r5, r5, r2
   d8784:	441d      	add	r5, r3
   d8786:	2364      	movs	r3, #100	; 0x64
   d8788:	fb94 f7f2 	sdiv	r7, r4, r2
   d878c:	fb94 f6f3 	sdiv	r6, r4, r3
   d8790:	fb02 4717 	mls	r7, r2, r7, r4
   d8794:	fb03 4616 	mls	r6, r3, r6, r4
   d8798:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d879c:	fab7 fe87 	clz	lr, r7
   d87a0:	9301      	str	r3, [sp, #4]
   d87a2:	f004 0303 	and.w	r3, r4, #3
   d87a6:	6044      	str	r4, [r0, #4]
   d87a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d87ac:	4601      	mov	r1, r0
   d87ae:	9300      	str	r3, [sp, #0]
   d87b0:	f04f 0c07 	mov.w	ip, #7
   d87b4:	7a0b      	ldrb	r3, [r1, #8]
   d87b6:	2b4a      	cmp	r3, #74	; 0x4a
   d87b8:	d10e      	bne.n	d87d8 <__tzcalc_limits+0x98>
   d87ba:	694b      	ldr	r3, [r1, #20]
   d87bc:	9a00      	ldr	r2, [sp, #0]
   d87be:	18ec      	adds	r4, r5, r3
   d87c0:	b902      	cbnz	r2, d87c4 <__tzcalc_limits+0x84>
   d87c2:	b906      	cbnz	r6, d87c6 <__tzcalc_limits+0x86>
   d87c4:	b927      	cbnz	r7, d87d0 <__tzcalc_limits+0x90>
   d87c6:	2b3b      	cmp	r3, #59	; 0x3b
   d87c8:	bfd4      	ite	le
   d87ca:	2300      	movle	r3, #0
   d87cc:	2301      	movgt	r3, #1
   d87ce:	e000      	b.n	d87d2 <__tzcalc_limits+0x92>
   d87d0:	2300      	movs	r3, #0
   d87d2:	4423      	add	r3, r4
   d87d4:	3b01      	subs	r3, #1
   d87d6:	e03f      	b.n	d8858 <__tzcalc_limits+0x118>
   d87d8:	2b44      	cmp	r3, #68	; 0x44
   d87da:	d102      	bne.n	d87e2 <__tzcalc_limits+0xa2>
   d87dc:	694b      	ldr	r3, [r1, #20]
   d87de:	442b      	add	r3, r5
   d87e0:	e03a      	b.n	d8858 <__tzcalc_limits+0x118>
   d87e2:	9b00      	ldr	r3, [sp, #0]
   d87e4:	b92b      	cbnz	r3, d87f2 <__tzcalc_limits+0xb2>
   d87e6:	2e00      	cmp	r6, #0
   d87e8:	bf0c      	ite	eq
   d87ea:	46f0      	moveq	r8, lr
   d87ec:	f04f 0801 	movne.w	r8, #1
   d87f0:	e000      	b.n	d87f4 <__tzcalc_limits+0xb4>
   d87f2:	46f0      	mov	r8, lr
   d87f4:	4b24      	ldr	r3, [pc, #144]	; (d8888 <__tzcalc_limits+0x148>)
   d87f6:	68cc      	ldr	r4, [r1, #12]
   d87f8:	2230      	movs	r2, #48	; 0x30
   d87fa:	fb02 3808 	mla	r8, r2, r8, r3
   d87fe:	f1a8 0a04 	sub.w	sl, r8, #4
   d8802:	46a9      	mov	r9, r5
   d8804:	2301      	movs	r3, #1
   d8806:	42a3      	cmp	r3, r4
   d8808:	da04      	bge.n	d8814 <__tzcalc_limits+0xd4>
   d880a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d880e:	3301      	adds	r3, #1
   d8810:	44d9      	add	r9, fp
   d8812:	e7f8      	b.n	d8806 <__tzcalc_limits+0xc6>
   d8814:	f109 0304 	add.w	r3, r9, #4
   d8818:	fb93 fbfc 	sdiv	fp, r3, ip
   d881c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8820:	2c01      	cmp	r4, #1
   d8822:	ebca 0a03 	rsb	sl, sl, r3
   d8826:	694b      	ldr	r3, [r1, #20]
   d8828:	bfb8      	it	lt
   d882a:	2401      	movlt	r4, #1
   d882c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8830:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8834:	690b      	ldr	r3, [r1, #16]
   d8836:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d883a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d883e:	bf48      	it	mi
   d8840:	f10a 0a07 	addmi.w	sl, sl, #7
   d8844:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8848:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d884c:	4453      	add	r3, sl
   d884e:	42a3      	cmp	r3, r4
   d8850:	db01      	blt.n	d8856 <__tzcalc_limits+0x116>
   d8852:	3b07      	subs	r3, #7
   d8854:	e7fb      	b.n	d884e <__tzcalc_limits+0x10e>
   d8856:	444b      	add	r3, r9
   d8858:	698c      	ldr	r4, [r1, #24]
   d885a:	4a0c      	ldr	r2, [pc, #48]	; (d888c <__tzcalc_limits+0x14c>)
   d885c:	fb02 4303 	mla	r3, r2, r3, r4
   d8860:	6a0c      	ldr	r4, [r1, #32]
   d8862:	4423      	add	r3, r4
   d8864:	f841 3f1c 	str.w	r3, [r1, #28]!
   d8868:	9b01      	ldr	r3, [sp, #4]
   d886a:	4299      	cmp	r1, r3
   d886c:	d1a2      	bne.n	d87b4 <__tzcalc_limits+0x74>
   d886e:	69c3      	ldr	r3, [r0, #28]
   d8870:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d8872:	4293      	cmp	r3, r2
   d8874:	bfac      	ite	ge
   d8876:	2300      	movge	r3, #0
   d8878:	2301      	movlt	r3, #1
   d887a:	6003      	str	r3, [r0, #0]
   d887c:	2001      	movs	r0, #1
   d887e:	e000      	b.n	d8882 <__tzcalc_limits+0x142>
   d8880:	2000      	movs	r0, #0
   d8882:	b003      	add	sp, #12
   d8884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8888:	000da308 	.word	0x000da308
   d888c:	00015180 	.word	0x00015180

000d8890 <__tz_lock>:
   d8890:	4770      	bx	lr

000d8892 <__tz_unlock>:
   d8892:	4770      	bx	lr

000d8894 <_tzset_unlocked>:
   d8894:	4b01      	ldr	r3, [pc, #4]	; (d889c <_tzset_unlocked+0x8>)
   d8896:	6818      	ldr	r0, [r3, #0]
   d8898:	f000 b802 	b.w	d88a0 <_tzset_unlocked_r>
   d889c:	2003e1d8 	.word	0x2003e1d8

000d88a0 <_tzset_unlocked_r>:
   d88a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88a4:	b08d      	sub	sp, #52	; 0x34
   d88a6:	4607      	mov	r7, r0
   d88a8:	f000 fcdc 	bl	d9264 <__gettzinfo>
   d88ac:	49b0      	ldr	r1, [pc, #704]	; (d8b70 <_tzset_unlocked_r+0x2d0>)
   d88ae:	4eb1      	ldr	r6, [pc, #708]	; (d8b74 <_tzset_unlocked_r+0x2d4>)
   d88b0:	4604      	mov	r4, r0
   d88b2:	4638      	mov	r0, r7
   d88b4:	f000 fcce 	bl	d9254 <_getenv_r>
   d88b8:	4605      	mov	r5, r0
   d88ba:	b960      	cbnz	r0, d88d6 <_tzset_unlocked_r+0x36>
   d88bc:	4bae      	ldr	r3, [pc, #696]	; (d8b78 <_tzset_unlocked_r+0x2d8>)
   d88be:	4aaf      	ldr	r2, [pc, #700]	; (d8b7c <_tzset_unlocked_r+0x2dc>)
   d88c0:	6018      	str	r0, [r3, #0]
   d88c2:	4baf      	ldr	r3, [pc, #700]	; (d8b80 <_tzset_unlocked_r+0x2e0>)
   d88c4:	6018      	str	r0, [r3, #0]
   d88c6:	4baf      	ldr	r3, [pc, #700]	; (d8b84 <_tzset_unlocked_r+0x2e4>)
   d88c8:	6830      	ldr	r0, [r6, #0]
   d88ca:	601a      	str	r2, [r3, #0]
   d88cc:	605a      	str	r2, [r3, #4]
   d88ce:	f7fc fd8d 	bl	d53ec <free>
   d88d2:	6035      	str	r5, [r6, #0]
   d88d4:	e148      	b.n	d8b68 <_tzset_unlocked_r+0x2c8>
   d88d6:	6831      	ldr	r1, [r6, #0]
   d88d8:	b979      	cbnz	r1, d88fa <_tzset_unlocked_r+0x5a>
   d88da:	6830      	ldr	r0, [r6, #0]
   d88dc:	f7fc fd86 	bl	d53ec <free>
   d88e0:	4628      	mov	r0, r5
   d88e2:	f7fe ffc0 	bl	d7866 <strlen>
   d88e6:	1c41      	adds	r1, r0, #1
   d88e8:	4638      	mov	r0, r7
   d88ea:	f7fc fda7 	bl	d543c <_malloc_r>
   d88ee:	6030      	str	r0, [r6, #0]
   d88f0:	b148      	cbz	r0, d8906 <_tzset_unlocked_r+0x66>
   d88f2:	4629      	mov	r1, r5
   d88f4:	f7fe ff94 	bl	d7820 <strcpy>
   d88f8:	e005      	b.n	d8906 <_tzset_unlocked_r+0x66>
   d88fa:	f7fe ff87 	bl	d780c <strcmp>
   d88fe:	2800      	cmp	r0, #0
   d8900:	f000 8132 	beq.w	d8b68 <_tzset_unlocked_r+0x2c8>
   d8904:	e7e9      	b.n	d88da <_tzset_unlocked_r+0x3a>
   d8906:	782b      	ldrb	r3, [r5, #0]
   d8908:	4a9f      	ldr	r2, [pc, #636]	; (d8b88 <_tzset_unlocked_r+0x2e8>)
   d890a:	49a0      	ldr	r1, [pc, #640]	; (d8b8c <_tzset_unlocked_r+0x2ec>)
   d890c:	2b3a      	cmp	r3, #58	; 0x3a
   d890e:	bf08      	it	eq
   d8910:	3501      	addeq	r5, #1
   d8912:	ae0a      	add	r6, sp, #40	; 0x28
   d8914:	4633      	mov	r3, r6
   d8916:	4628      	mov	r0, r5
   d8918:	f7fc fd78 	bl	d540c <siscanf>
   d891c:	2800      	cmp	r0, #0
   d891e:	f340 8123 	ble.w	d8b68 <_tzset_unlocked_r+0x2c8>
   d8922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8924:	18ef      	adds	r7, r5, r3
   d8926:	5ceb      	ldrb	r3, [r5, r3]
   d8928:	2b2d      	cmp	r3, #45	; 0x2d
   d892a:	d103      	bne.n	d8934 <_tzset_unlocked_r+0x94>
   d892c:	3701      	adds	r7, #1
   d892e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8932:	e003      	b.n	d893c <_tzset_unlocked_r+0x9c>
   d8934:	2b2b      	cmp	r3, #43	; 0x2b
   d8936:	bf08      	it	eq
   d8938:	3701      	addeq	r7, #1
   d893a:	2501      	movs	r5, #1
   d893c:	f10d 0a20 	add.w	sl, sp, #32
   d8940:	f10d 0b1e 	add.w	fp, sp, #30
   d8944:	f04f 0800 	mov.w	r8, #0
   d8948:	9603      	str	r6, [sp, #12]
   d894a:	f8cd a008 	str.w	sl, [sp, #8]
   d894e:	9601      	str	r6, [sp, #4]
   d8950:	f8cd b000 	str.w	fp, [sp]
   d8954:	4633      	mov	r3, r6
   d8956:	aa07      	add	r2, sp, #28
   d8958:	498d      	ldr	r1, [pc, #564]	; (d8b90 <_tzset_unlocked_r+0x2f0>)
   d895a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d895e:	4638      	mov	r0, r7
   d8960:	f8ad 8020 	strh.w	r8, [sp, #32]
   d8964:	f7fc fd52 	bl	d540c <siscanf>
   d8968:	4540      	cmp	r0, r8
   d896a:	f340 80fd 	ble.w	d8b68 <_tzset_unlocked_r+0x2c8>
   d896e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8972:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8976:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8b9c <_tzset_unlocked_r+0x2fc>
   d897a:	213c      	movs	r1, #60	; 0x3c
   d897c:	fb01 3302 	mla	r3, r1, r2, r3
   d8980:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8984:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8988:	fb01 3302 	mla	r3, r1, r2, r3
   d898c:	435d      	muls	r5, r3
   d898e:	6225      	str	r5, [r4, #32]
   d8990:	4d7c      	ldr	r5, [pc, #496]	; (d8b84 <_tzset_unlocked_r+0x2e4>)
   d8992:	4b7d      	ldr	r3, [pc, #500]	; (d8b88 <_tzset_unlocked_r+0x2e8>)
   d8994:	602b      	str	r3, [r5, #0]
   d8996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8998:	497c      	ldr	r1, [pc, #496]	; (d8b8c <_tzset_unlocked_r+0x2ec>)
   d899a:	441f      	add	r7, r3
   d899c:	464a      	mov	r2, r9
   d899e:	4633      	mov	r3, r6
   d89a0:	4638      	mov	r0, r7
   d89a2:	f7fc fd33 	bl	d540c <siscanf>
   d89a6:	4540      	cmp	r0, r8
   d89a8:	dc08      	bgt.n	d89bc <_tzset_unlocked_r+0x11c>
   d89aa:	682b      	ldr	r3, [r5, #0]
   d89ac:	606b      	str	r3, [r5, #4]
   d89ae:	4b72      	ldr	r3, [pc, #456]	; (d8b78 <_tzset_unlocked_r+0x2d8>)
   d89b0:	6a22      	ldr	r2, [r4, #32]
   d89b2:	601a      	str	r2, [r3, #0]
   d89b4:	4b72      	ldr	r3, [pc, #456]	; (d8b80 <_tzset_unlocked_r+0x2e0>)
   d89b6:	f8c3 8000 	str.w	r8, [r3]
   d89ba:	e0d5      	b.n	d8b68 <_tzset_unlocked_r+0x2c8>
   d89bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d89be:	f8c5 9004 	str.w	r9, [r5, #4]
   d89c2:	18fd      	adds	r5, r7, r3
   d89c4:	5cfb      	ldrb	r3, [r7, r3]
   d89c6:	2b2d      	cmp	r3, #45	; 0x2d
   d89c8:	d103      	bne.n	d89d2 <_tzset_unlocked_r+0x132>
   d89ca:	3501      	adds	r5, #1
   d89cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d89d0:	e003      	b.n	d89da <_tzset_unlocked_r+0x13a>
   d89d2:	2b2b      	cmp	r3, #43	; 0x2b
   d89d4:	bf08      	it	eq
   d89d6:	3501      	addeq	r5, #1
   d89d8:	2701      	movs	r7, #1
   d89da:	2300      	movs	r3, #0
   d89dc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d89e0:	f8ad 301e 	strh.w	r3, [sp, #30]
   d89e4:	f8ad 3020 	strh.w	r3, [sp, #32]
   d89e8:	930a      	str	r3, [sp, #40]	; 0x28
   d89ea:	9603      	str	r6, [sp, #12]
   d89ec:	f8cd a008 	str.w	sl, [sp, #8]
   d89f0:	9601      	str	r6, [sp, #4]
   d89f2:	f8cd b000 	str.w	fp, [sp]
   d89f6:	4633      	mov	r3, r6
   d89f8:	aa07      	add	r2, sp, #28
   d89fa:	4965      	ldr	r1, [pc, #404]	; (d8b90 <_tzset_unlocked_r+0x2f0>)
   d89fc:	4628      	mov	r0, r5
   d89fe:	f7fc fd05 	bl	d540c <siscanf>
   d8a02:	2800      	cmp	r0, #0
   d8a04:	dc04      	bgt.n	d8a10 <_tzset_unlocked_r+0x170>
   d8a06:	6a23      	ldr	r3, [r4, #32]
   d8a08:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8a0c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8a0e:	e00e      	b.n	d8a2e <_tzset_unlocked_r+0x18e>
   d8a10:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8a14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8a18:	213c      	movs	r1, #60	; 0x3c
   d8a1a:	fb01 3302 	mla	r3, r1, r2, r3
   d8a1e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8a22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8a26:	fb01 3302 	mla	r3, r1, r2, r3
   d8a2a:	435f      	muls	r7, r3
   d8a2c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a30:	4627      	mov	r7, r4
   d8a32:	441d      	add	r5, r3
   d8a34:	f04f 0900 	mov.w	r9, #0
   d8a38:	782b      	ldrb	r3, [r5, #0]
   d8a3a:	2b2c      	cmp	r3, #44	; 0x2c
   d8a3c:	bf08      	it	eq
   d8a3e:	3501      	addeq	r5, #1
   d8a40:	f895 8000 	ldrb.w	r8, [r5]
   d8a44:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8a48:	d126      	bne.n	d8a98 <_tzset_unlocked_r+0x1f8>
   d8a4a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8a4e:	9302      	str	r3, [sp, #8]
   d8a50:	ab09      	add	r3, sp, #36	; 0x24
   d8a52:	9300      	str	r3, [sp, #0]
   d8a54:	9603      	str	r6, [sp, #12]
   d8a56:	9601      	str	r6, [sp, #4]
   d8a58:	4633      	mov	r3, r6
   d8a5a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8a5e:	494d      	ldr	r1, [pc, #308]	; (d8b94 <_tzset_unlocked_r+0x2f4>)
   d8a60:	4628      	mov	r0, r5
   d8a62:	f7fc fcd3 	bl	d540c <siscanf>
   d8a66:	2803      	cmp	r0, #3
   d8a68:	d17e      	bne.n	d8b68 <_tzset_unlocked_r+0x2c8>
   d8a6a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8a6e:	1e4b      	subs	r3, r1, #1
   d8a70:	2b0b      	cmp	r3, #11
   d8a72:	d879      	bhi.n	d8b68 <_tzset_unlocked_r+0x2c8>
   d8a74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8a78:	1e53      	subs	r3, r2, #1
   d8a7a:	2b04      	cmp	r3, #4
   d8a7c:	d874      	bhi.n	d8b68 <_tzset_unlocked_r+0x2c8>
   d8a7e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8a82:	2b06      	cmp	r3, #6
   d8a84:	d870      	bhi.n	d8b68 <_tzset_unlocked_r+0x2c8>
   d8a86:	f887 8008 	strb.w	r8, [r7, #8]
   d8a8a:	60f9      	str	r1, [r7, #12]
   d8a8c:	613a      	str	r2, [r7, #16]
   d8a8e:	617b      	str	r3, [r7, #20]
   d8a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a92:	eb05 0803 	add.w	r8, r5, r3
   d8a96:	e02a      	b.n	d8aee <_tzset_unlocked_r+0x24e>
   d8a98:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8a9c:	bf06      	itte	eq
   d8a9e:	3501      	addeq	r5, #1
   d8aa0:	4643      	moveq	r3, r8
   d8aa2:	2344      	movne	r3, #68	; 0x44
   d8aa4:	220a      	movs	r2, #10
   d8aa6:	a90b      	add	r1, sp, #44	; 0x2c
   d8aa8:	4628      	mov	r0, r5
   d8aaa:	9305      	str	r3, [sp, #20]
   d8aac:	f7ff fe3e 	bl	d872c <strtoul>
   d8ab0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8ab4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8ab8:	4545      	cmp	r5, r8
   d8aba:	9b05      	ldr	r3, [sp, #20]
   d8abc:	d114      	bne.n	d8ae8 <_tzset_unlocked_r+0x248>
   d8abe:	234d      	movs	r3, #77	; 0x4d
   d8ac0:	f1b9 0f00 	cmp.w	r9, #0
   d8ac4:	d107      	bne.n	d8ad6 <_tzset_unlocked_r+0x236>
   d8ac6:	7223      	strb	r3, [r4, #8]
   d8ac8:	2303      	movs	r3, #3
   d8aca:	60e3      	str	r3, [r4, #12]
   d8acc:	2302      	movs	r3, #2
   d8ace:	6123      	str	r3, [r4, #16]
   d8ad0:	f8c4 9014 	str.w	r9, [r4, #20]
   d8ad4:	e00b      	b.n	d8aee <_tzset_unlocked_r+0x24e>
   d8ad6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8ada:	230b      	movs	r3, #11
   d8adc:	62a3      	str	r3, [r4, #40]	; 0x28
   d8ade:	2301      	movs	r3, #1
   d8ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8ae2:	2300      	movs	r3, #0
   d8ae4:	6323      	str	r3, [r4, #48]	; 0x30
   d8ae6:	e002      	b.n	d8aee <_tzset_unlocked_r+0x24e>
   d8ae8:	b280      	uxth	r0, r0
   d8aea:	723b      	strb	r3, [r7, #8]
   d8aec:	6178      	str	r0, [r7, #20]
   d8aee:	2302      	movs	r3, #2
   d8af0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8af4:	2300      	movs	r3, #0
   d8af6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8afa:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8afe:	930a      	str	r3, [sp, #40]	; 0x28
   d8b00:	f898 3000 	ldrb.w	r3, [r8]
   d8b04:	2b2f      	cmp	r3, #47	; 0x2f
   d8b06:	d10b      	bne.n	d8b20 <_tzset_unlocked_r+0x280>
   d8b08:	9603      	str	r6, [sp, #12]
   d8b0a:	f8cd a008 	str.w	sl, [sp, #8]
   d8b0e:	9601      	str	r6, [sp, #4]
   d8b10:	f8cd b000 	str.w	fp, [sp]
   d8b14:	4633      	mov	r3, r6
   d8b16:	aa07      	add	r2, sp, #28
   d8b18:	491f      	ldr	r1, [pc, #124]	; (d8b98 <_tzset_unlocked_r+0x2f8>)
   d8b1a:	4640      	mov	r0, r8
   d8b1c:	f7fc fc76 	bl	d540c <siscanf>
   d8b20:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8b24:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8b28:	213c      	movs	r1, #60	; 0x3c
   d8b2a:	fb01 3302 	mla	r3, r1, r2, r3
   d8b2e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8b32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8b36:	fb01 3302 	mla	r3, r1, r2, r3
   d8b3a:	61bb      	str	r3, [r7, #24]
   d8b3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8b3e:	f109 0901 	add.w	r9, r9, #1
   d8b42:	f1b9 0f02 	cmp.w	r9, #2
   d8b46:	4445      	add	r5, r8
   d8b48:	f107 071c 	add.w	r7, r7, #28
   d8b4c:	f47f af74 	bne.w	d8a38 <_tzset_unlocked_r+0x198>
   d8b50:	6860      	ldr	r0, [r4, #4]
   d8b52:	f7ff fdf5 	bl	d8740 <__tzcalc_limits>
   d8b56:	4b08      	ldr	r3, [pc, #32]	; (d8b78 <_tzset_unlocked_r+0x2d8>)
   d8b58:	6a22      	ldr	r2, [r4, #32]
   d8b5a:	601a      	str	r2, [r3, #0]
   d8b5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8b5e:	1a9b      	subs	r3, r3, r2
   d8b60:	4a07      	ldr	r2, [pc, #28]	; (d8b80 <_tzset_unlocked_r+0x2e0>)
   d8b62:	bf18      	it	ne
   d8b64:	2301      	movne	r3, #1
   d8b66:	6013      	str	r3, [r2, #0]
   d8b68:	b00d      	add	sp, #52	; 0x34
   d8b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b6e:	bf00      	nop
   d8b70:	000da3c8 	.word	0x000da3c8
   d8b74:	2003e7e0 	.word	0x2003e7e0
   d8b78:	2003e7e8 	.word	0x2003e7e8
   d8b7c:	000da3cb 	.word	0x000da3cb
   d8b80:	2003e7e4 	.word	0x2003e7e4
   d8b84:	2003e214 	.word	0x2003e214
   d8b88:	2003e7d3 	.word	0x2003e7d3
   d8b8c:	000da3cf 	.word	0x000da3cf
   d8b90:	000da3f2 	.word	0x000da3f2
   d8b94:	000da3de 	.word	0x000da3de
   d8b98:	000da3f1 	.word	0x000da3f1
   d8b9c:	2003e7c8 	.word	0x2003e7c8

000d8ba0 <rshift>:
   d8ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ba2:	6906      	ldr	r6, [r0, #16]
   d8ba4:	114b      	asrs	r3, r1, #5
   d8ba6:	42b3      	cmp	r3, r6
   d8ba8:	f100 0514 	add.w	r5, r0, #20
   d8bac:	da27      	bge.n	d8bfe <rshift+0x5e>
   d8bae:	f011 011f 	ands.w	r1, r1, #31
   d8bb2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d8bb6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d8bba:	d101      	bne.n	d8bc0 <rshift+0x20>
   d8bbc:	4629      	mov	r1, r5
   d8bbe:	e016      	b.n	d8bee <rshift+0x4e>
   d8bc0:	1d14      	adds	r4, r2, #4
   d8bc2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d8bc6:	f1c1 0e20 	rsb	lr, r1, #32
   d8bca:	40ca      	lsrs	r2, r1
   d8bcc:	462b      	mov	r3, r5
   d8bce:	42b4      	cmp	r4, r6
   d8bd0:	d209      	bcs.n	d8be6 <rshift+0x46>
   d8bd2:	6827      	ldr	r7, [r4, #0]
   d8bd4:	fa07 f70e 	lsl.w	r7, r7, lr
   d8bd8:	433a      	orrs	r2, r7
   d8bda:	f843 2b04 	str.w	r2, [r3], #4
   d8bde:	f854 2b04 	ldr.w	r2, [r4], #4
   d8be2:	40ca      	lsrs	r2, r1
   d8be4:	e7f3      	b.n	d8bce <rshift+0x2e>
   d8be6:	601a      	str	r2, [r3, #0]
   d8be8:	b152      	cbz	r2, d8c00 <rshift+0x60>
   d8bea:	3304      	adds	r3, #4
   d8bec:	e008      	b.n	d8c00 <rshift+0x60>
   d8bee:	42b2      	cmp	r2, r6
   d8bf0:	460b      	mov	r3, r1
   d8bf2:	d205      	bcs.n	d8c00 <rshift+0x60>
   d8bf4:	f852 3b04 	ldr.w	r3, [r2], #4
   d8bf8:	f841 3b04 	str.w	r3, [r1], #4
   d8bfc:	e7f7      	b.n	d8bee <rshift+0x4e>
   d8bfe:	462b      	mov	r3, r5
   d8c00:	1b5b      	subs	r3, r3, r5
   d8c02:	109b      	asrs	r3, r3, #2
   d8c04:	6103      	str	r3, [r0, #16]
   d8c06:	b903      	cbnz	r3, d8c0a <rshift+0x6a>
   d8c08:	6143      	str	r3, [r0, #20]
   d8c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8c0c <__hexdig_fun>:
   d8c0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8c10:	2b09      	cmp	r3, #9
   d8c12:	d801      	bhi.n	d8c18 <__hexdig_fun+0xc>
   d8c14:	3820      	subs	r0, #32
   d8c16:	e00a      	b.n	d8c2e <__hexdig_fun+0x22>
   d8c18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8c1c:	2b05      	cmp	r3, #5
   d8c1e:	d801      	bhi.n	d8c24 <__hexdig_fun+0x18>
   d8c20:	3847      	subs	r0, #71	; 0x47
   d8c22:	e004      	b.n	d8c2e <__hexdig_fun+0x22>
   d8c24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8c28:	2b05      	cmp	r3, #5
   d8c2a:	d802      	bhi.n	d8c32 <__hexdig_fun+0x26>
   d8c2c:	3827      	subs	r0, #39	; 0x27
   d8c2e:	b2c0      	uxtb	r0, r0
   d8c30:	4770      	bx	lr
   d8c32:	2000      	movs	r0, #0
   d8c34:	4770      	bx	lr

000d8c36 <__gethex>:
   d8c36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c3a:	b08b      	sub	sp, #44	; 0x2c
   d8c3c:	468a      	mov	sl, r1
   d8c3e:	4690      	mov	r8, r2
   d8c40:	9306      	str	r3, [sp, #24]
   d8c42:	9002      	str	r0, [sp, #8]
   d8c44:	f7fe fda2 	bl	d778c <_localeconv_r>
   d8c48:	6803      	ldr	r3, [r0, #0]
   d8c4a:	9303      	str	r3, [sp, #12]
   d8c4c:	4618      	mov	r0, r3
   d8c4e:	f7fe fe0a 	bl	d7866 <strlen>
   d8c52:	9b03      	ldr	r3, [sp, #12]
   d8c54:	9001      	str	r0, [sp, #4]
   d8c56:	4403      	add	r3, r0
   d8c58:	f04f 0b00 	mov.w	fp, #0
   d8c5c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8c60:	9307      	str	r3, [sp, #28]
   d8c62:	f8da 3000 	ldr.w	r3, [sl]
   d8c66:	3302      	adds	r3, #2
   d8c68:	461f      	mov	r7, r3
   d8c6a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8c6e:	2830      	cmp	r0, #48	; 0x30
   d8c70:	d102      	bne.n	d8c78 <__gethex+0x42>
   d8c72:	f10b 0b01 	add.w	fp, fp, #1
   d8c76:	e7f7      	b.n	d8c68 <__gethex+0x32>
   d8c78:	f7ff ffc8 	bl	d8c0c <__hexdig_fun>
   d8c7c:	4604      	mov	r4, r0
   d8c7e:	b9e0      	cbnz	r0, d8cba <__gethex+0x84>
   d8c80:	9a01      	ldr	r2, [sp, #4]
   d8c82:	9903      	ldr	r1, [sp, #12]
   d8c84:	4638      	mov	r0, r7
   d8c86:	f7fe fdf6 	bl	d7876 <strncmp>
   d8c8a:	2800      	cmp	r0, #0
   d8c8c:	d134      	bne.n	d8cf8 <__gethex+0xc2>
   d8c8e:	9b01      	ldr	r3, [sp, #4]
   d8c90:	5cf8      	ldrb	r0, [r7, r3]
   d8c92:	18fe      	adds	r6, r7, r3
   d8c94:	f7ff ffba 	bl	d8c0c <__hexdig_fun>
   d8c98:	b380      	cbz	r0, d8cfc <__gethex+0xc6>
   d8c9a:	4633      	mov	r3, r6
   d8c9c:	7818      	ldrb	r0, [r3, #0]
   d8c9e:	2830      	cmp	r0, #48	; 0x30
   d8ca0:	461f      	mov	r7, r3
   d8ca2:	f103 0301 	add.w	r3, r3, #1
   d8ca6:	d0f9      	beq.n	d8c9c <__gethex+0x66>
   d8ca8:	f7ff ffb0 	bl	d8c0c <__hexdig_fun>
   d8cac:	fab0 f580 	clz	r5, r0
   d8cb0:	096d      	lsrs	r5, r5, #5
   d8cb2:	4634      	mov	r4, r6
   d8cb4:	f04f 0b01 	mov.w	fp, #1
   d8cb8:	e001      	b.n	d8cbe <__gethex+0x88>
   d8cba:	2500      	movs	r5, #0
   d8cbc:	462c      	mov	r4, r5
   d8cbe:	463a      	mov	r2, r7
   d8cc0:	4616      	mov	r6, r2
   d8cc2:	3201      	adds	r2, #1
   d8cc4:	7830      	ldrb	r0, [r6, #0]
   d8cc6:	f7ff ffa1 	bl	d8c0c <__hexdig_fun>
   d8cca:	2800      	cmp	r0, #0
   d8ccc:	d1f8      	bne.n	d8cc0 <__gethex+0x8a>
   d8cce:	9a01      	ldr	r2, [sp, #4]
   d8cd0:	9903      	ldr	r1, [sp, #12]
   d8cd2:	4630      	mov	r0, r6
   d8cd4:	f7fe fdcf 	bl	d7876 <strncmp>
   d8cd8:	b950      	cbnz	r0, d8cf0 <__gethex+0xba>
   d8cda:	b954      	cbnz	r4, d8cf2 <__gethex+0xbc>
   d8cdc:	9b01      	ldr	r3, [sp, #4]
   d8cde:	18f4      	adds	r4, r6, r3
   d8ce0:	4622      	mov	r2, r4
   d8ce2:	4616      	mov	r6, r2
   d8ce4:	3201      	adds	r2, #1
   d8ce6:	7830      	ldrb	r0, [r6, #0]
   d8ce8:	f7ff ff90 	bl	d8c0c <__hexdig_fun>
   d8cec:	2800      	cmp	r0, #0
   d8cee:	d1f8      	bne.n	d8ce2 <__gethex+0xac>
   d8cf0:	b134      	cbz	r4, d8d00 <__gethex+0xca>
   d8cf2:	1ba4      	subs	r4, r4, r6
   d8cf4:	00a4      	lsls	r4, r4, #2
   d8cf6:	e003      	b.n	d8d00 <__gethex+0xca>
   d8cf8:	463e      	mov	r6, r7
   d8cfa:	e000      	b.n	d8cfe <__gethex+0xc8>
   d8cfc:	4604      	mov	r4, r0
   d8cfe:	2501      	movs	r5, #1
   d8d00:	7833      	ldrb	r3, [r6, #0]
   d8d02:	2b50      	cmp	r3, #80	; 0x50
   d8d04:	d001      	beq.n	d8d0a <__gethex+0xd4>
   d8d06:	2b70      	cmp	r3, #112	; 0x70
   d8d08:	d12a      	bne.n	d8d60 <__gethex+0x12a>
   d8d0a:	7873      	ldrb	r3, [r6, #1]
   d8d0c:	2b2b      	cmp	r3, #43	; 0x2b
   d8d0e:	d008      	beq.n	d8d22 <__gethex+0xec>
   d8d10:	2b2d      	cmp	r3, #45	; 0x2d
   d8d12:	d003      	beq.n	d8d1c <__gethex+0xe6>
   d8d14:	1c71      	adds	r1, r6, #1
   d8d16:	f04f 0900 	mov.w	r9, #0
   d8d1a:	e005      	b.n	d8d28 <__gethex+0xf2>
   d8d1c:	f04f 0901 	mov.w	r9, #1
   d8d20:	e001      	b.n	d8d26 <__gethex+0xf0>
   d8d22:	f04f 0900 	mov.w	r9, #0
   d8d26:	1cb1      	adds	r1, r6, #2
   d8d28:	7808      	ldrb	r0, [r1, #0]
   d8d2a:	f7ff ff6f 	bl	d8c0c <__hexdig_fun>
   d8d2e:	1e43      	subs	r3, r0, #1
   d8d30:	b2db      	uxtb	r3, r3
   d8d32:	2b18      	cmp	r3, #24
   d8d34:	d814      	bhi.n	d8d60 <__gethex+0x12a>
   d8d36:	f1a0 0210 	sub.w	r2, r0, #16
   d8d3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8d3e:	f7ff ff65 	bl	d8c0c <__hexdig_fun>
   d8d42:	1e43      	subs	r3, r0, #1
   d8d44:	b2db      	uxtb	r3, r3
   d8d46:	2b18      	cmp	r3, #24
   d8d48:	d804      	bhi.n	d8d54 <__gethex+0x11e>
   d8d4a:	230a      	movs	r3, #10
   d8d4c:	fb03 0202 	mla	r2, r3, r2, r0
   d8d50:	3a10      	subs	r2, #16
   d8d52:	e7f2      	b.n	d8d3a <__gethex+0x104>
   d8d54:	f1b9 0f00 	cmp.w	r9, #0
   d8d58:	d000      	beq.n	d8d5c <__gethex+0x126>
   d8d5a:	4252      	negs	r2, r2
   d8d5c:	4414      	add	r4, r2
   d8d5e:	e000      	b.n	d8d62 <__gethex+0x12c>
   d8d60:	4631      	mov	r1, r6
   d8d62:	f8ca 1000 	str.w	r1, [sl]
   d8d66:	b12d      	cbz	r5, d8d74 <__gethex+0x13e>
   d8d68:	f1bb 0f00 	cmp.w	fp, #0
   d8d6c:	bf14      	ite	ne
   d8d6e:	2000      	movne	r0, #0
   d8d70:	2006      	moveq	r0, #6
   d8d72:	e17c      	b.n	d906e <__gethex+0x438>
   d8d74:	1bf3      	subs	r3, r6, r7
   d8d76:	3b01      	subs	r3, #1
   d8d78:	4629      	mov	r1, r5
   d8d7a:	2b07      	cmp	r3, #7
   d8d7c:	dd02      	ble.n	d8d84 <__gethex+0x14e>
   d8d7e:	3101      	adds	r1, #1
   d8d80:	105b      	asrs	r3, r3, #1
   d8d82:	e7fa      	b.n	d8d7a <__gethex+0x144>
   d8d84:	9802      	ldr	r0, [sp, #8]
   d8d86:	f000 fb09 	bl	d939c <_Balloc>
   d8d8a:	9b01      	ldr	r3, [sp, #4]
   d8d8c:	f100 0a14 	add.w	sl, r0, #20
   d8d90:	f04f 0900 	mov.w	r9, #0
   d8d94:	f1c3 0301 	rsb	r3, r3, #1
   d8d98:	4605      	mov	r5, r0
   d8d9a:	f8cd a010 	str.w	sl, [sp, #16]
   d8d9e:	46cb      	mov	fp, r9
   d8da0:	9308      	str	r3, [sp, #32]
   d8da2:	42b7      	cmp	r7, r6
   d8da4:	d22f      	bcs.n	d8e06 <__gethex+0x1d0>
   d8da6:	1e73      	subs	r3, r6, #1
   d8da8:	9305      	str	r3, [sp, #20]
   d8daa:	9a07      	ldr	r2, [sp, #28]
   d8dac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8db0:	4293      	cmp	r3, r2
   d8db2:	d00b      	beq.n	d8dcc <__gethex+0x196>
   d8db4:	f1bb 0f20 	cmp.w	fp, #32
   d8db8:	d116      	bne.n	d8de8 <__gethex+0x1b2>
   d8dba:	9b04      	ldr	r3, [sp, #16]
   d8dbc:	f8c3 9000 	str.w	r9, [r3]
   d8dc0:	3304      	adds	r3, #4
   d8dc2:	f04f 0900 	mov.w	r9, #0
   d8dc6:	9304      	str	r3, [sp, #16]
   d8dc8:	46cb      	mov	fp, r9
   d8dca:	e00d      	b.n	d8de8 <__gethex+0x1b2>
   d8dcc:	9b05      	ldr	r3, [sp, #20]
   d8dce:	9a08      	ldr	r2, [sp, #32]
   d8dd0:	4413      	add	r3, r2
   d8dd2:	429f      	cmp	r7, r3
   d8dd4:	d8ee      	bhi.n	d8db4 <__gethex+0x17e>
   d8dd6:	4618      	mov	r0, r3
   d8dd8:	9a01      	ldr	r2, [sp, #4]
   d8dda:	9903      	ldr	r1, [sp, #12]
   d8ddc:	9309      	str	r3, [sp, #36]	; 0x24
   d8dde:	f7fe fd4a 	bl	d7876 <strncmp>
   d8de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8de4:	b168      	cbz	r0, d8e02 <__gethex+0x1cc>
   d8de6:	e7e5      	b.n	d8db4 <__gethex+0x17e>
   d8de8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8dec:	f7ff ff0e 	bl	d8c0c <__hexdig_fun>
   d8df0:	f000 000f 	and.w	r0, r0, #15
   d8df4:	fa00 f00b 	lsl.w	r0, r0, fp
   d8df8:	9b05      	ldr	r3, [sp, #20]
   d8dfa:	ea49 0900 	orr.w	r9, r9, r0
   d8dfe:	f10b 0b04 	add.w	fp, fp, #4
   d8e02:	461e      	mov	r6, r3
   d8e04:	e7cd      	b.n	d8da2 <__gethex+0x16c>
   d8e06:	9804      	ldr	r0, [sp, #16]
   d8e08:	f840 9b04 	str.w	r9, [r0], #4
   d8e0c:	ebca 0000 	rsb	r0, sl, r0
   d8e10:	1080      	asrs	r0, r0, #2
   d8e12:	6128      	str	r0, [r5, #16]
   d8e14:	0147      	lsls	r7, r0, #5
   d8e16:	4648      	mov	r0, r9
   d8e18:	f000 fb85 	bl	d9526 <__hi0bits>
   d8e1c:	f8d8 6000 	ldr.w	r6, [r8]
   d8e20:	1a38      	subs	r0, r7, r0
   d8e22:	42b0      	cmp	r0, r6
   d8e24:	dd26      	ble.n	d8e74 <__gethex+0x23e>
   d8e26:	1b87      	subs	r7, r0, r6
   d8e28:	4639      	mov	r1, r7
   d8e2a:	4628      	mov	r0, r5
   d8e2c:	f000 fe83 	bl	d9b36 <__any_on>
   d8e30:	b1c8      	cbz	r0, d8e66 <__gethex+0x230>
   d8e32:	1e7b      	subs	r3, r7, #1
   d8e34:	1159      	asrs	r1, r3, #5
   d8e36:	f003 021f 	and.w	r2, r3, #31
   d8e3a:	f04f 0901 	mov.w	r9, #1
   d8e3e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d8e42:	fa09 f202 	lsl.w	r2, r9, r2
   d8e46:	420a      	tst	r2, r1
   d8e48:	d00e      	beq.n	d8e68 <__gethex+0x232>
   d8e4a:	454b      	cmp	r3, r9
   d8e4c:	dc02      	bgt.n	d8e54 <__gethex+0x21e>
   d8e4e:	f04f 0902 	mov.w	r9, #2
   d8e52:	e009      	b.n	d8e68 <__gethex+0x232>
   d8e54:	1eb9      	subs	r1, r7, #2
   d8e56:	4628      	mov	r0, r5
   d8e58:	f000 fe6d 	bl	d9b36 <__any_on>
   d8e5c:	2800      	cmp	r0, #0
   d8e5e:	d0f6      	beq.n	d8e4e <__gethex+0x218>
   d8e60:	f04f 0903 	mov.w	r9, #3
   d8e64:	e000      	b.n	d8e68 <__gethex+0x232>
   d8e66:	4681      	mov	r9, r0
   d8e68:	4639      	mov	r1, r7
   d8e6a:	4628      	mov	r0, r5
   d8e6c:	f7ff fe98 	bl	d8ba0 <rshift>
   d8e70:	443c      	add	r4, r7
   d8e72:	e00c      	b.n	d8e8e <__gethex+0x258>
   d8e74:	da09      	bge.n	d8e8a <__gethex+0x254>
   d8e76:	1a37      	subs	r7, r6, r0
   d8e78:	4629      	mov	r1, r5
   d8e7a:	463a      	mov	r2, r7
   d8e7c:	9802      	ldr	r0, [sp, #8]
   d8e7e:	f000 fc87 	bl	d9790 <__lshift>
   d8e82:	1be4      	subs	r4, r4, r7
   d8e84:	4605      	mov	r5, r0
   d8e86:	f100 0a14 	add.w	sl, r0, #20
   d8e8a:	f04f 0900 	mov.w	r9, #0
   d8e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8e92:	429c      	cmp	r4, r3
   d8e94:	dd08      	ble.n	d8ea8 <__gethex+0x272>
   d8e96:	9802      	ldr	r0, [sp, #8]
   d8e98:	4629      	mov	r1, r5
   d8e9a:	f000 fab4 	bl	d9406 <_Bfree>
   d8e9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8ea0:	2300      	movs	r3, #0
   d8ea2:	6013      	str	r3, [r2, #0]
   d8ea4:	20a3      	movs	r0, #163	; 0xa3
   d8ea6:	e0e2      	b.n	d906e <__gethex+0x438>
   d8ea8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8eac:	4284      	cmp	r4, r0
   d8eae:	da53      	bge.n	d8f58 <__gethex+0x322>
   d8eb0:	1b04      	subs	r4, r0, r4
   d8eb2:	42a6      	cmp	r6, r4
   d8eb4:	dc2e      	bgt.n	d8f14 <__gethex+0x2de>
   d8eb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8eba:	2b02      	cmp	r3, #2
   d8ebc:	d01a      	beq.n	d8ef4 <__gethex+0x2be>
   d8ebe:	2b03      	cmp	r3, #3
   d8ec0:	d01c      	beq.n	d8efc <__gethex+0x2c6>
   d8ec2:	2b01      	cmp	r3, #1
   d8ec4:	d11d      	bne.n	d8f02 <__gethex+0x2cc>
   d8ec6:	42a6      	cmp	r6, r4
   d8ec8:	d11b      	bne.n	d8f02 <__gethex+0x2cc>
   d8eca:	2e01      	cmp	r6, #1
   d8ecc:	dc0b      	bgt.n	d8ee6 <__gethex+0x2b0>
   d8ece:	9a06      	ldr	r2, [sp, #24]
   d8ed0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8ed4:	6013      	str	r3, [r2, #0]
   d8ed6:	2301      	movs	r3, #1
   d8ed8:	612b      	str	r3, [r5, #16]
   d8eda:	f8ca 3000 	str.w	r3, [sl]
   d8ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8ee0:	2062      	movs	r0, #98	; 0x62
   d8ee2:	601d      	str	r5, [r3, #0]
   d8ee4:	e0c3      	b.n	d906e <__gethex+0x438>
   d8ee6:	1e71      	subs	r1, r6, #1
   d8ee8:	4628      	mov	r0, r5
   d8eea:	f000 fe24 	bl	d9b36 <__any_on>
   d8eee:	2800      	cmp	r0, #0
   d8ef0:	d1ed      	bne.n	d8ece <__gethex+0x298>
   d8ef2:	e006      	b.n	d8f02 <__gethex+0x2cc>
   d8ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8ef6:	2b00      	cmp	r3, #0
   d8ef8:	d0e9      	beq.n	d8ece <__gethex+0x298>
   d8efa:	e002      	b.n	d8f02 <__gethex+0x2cc>
   d8efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8efe:	2b00      	cmp	r3, #0
   d8f00:	d1e5      	bne.n	d8ece <__gethex+0x298>
   d8f02:	9802      	ldr	r0, [sp, #8]
   d8f04:	4629      	mov	r1, r5
   d8f06:	f000 fa7e 	bl	d9406 <_Bfree>
   d8f0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8f0c:	2300      	movs	r3, #0
   d8f0e:	6013      	str	r3, [r2, #0]
   d8f10:	2050      	movs	r0, #80	; 0x50
   d8f12:	e0ac      	b.n	d906e <__gethex+0x438>
   d8f14:	1e67      	subs	r7, r4, #1
   d8f16:	f1b9 0f00 	cmp.w	r9, #0
   d8f1a:	d106      	bne.n	d8f2a <__gethex+0x2f4>
   d8f1c:	b13f      	cbz	r7, d8f2e <__gethex+0x2f8>
   d8f1e:	4639      	mov	r1, r7
   d8f20:	4628      	mov	r0, r5
   d8f22:	f000 fe08 	bl	d9b36 <__any_on>
   d8f26:	4681      	mov	r9, r0
   d8f28:	e001      	b.n	d8f2e <__gethex+0x2f8>
   d8f2a:	f04f 0901 	mov.w	r9, #1
   d8f2e:	117a      	asrs	r2, r7, #5
   d8f30:	2301      	movs	r3, #1
   d8f32:	f007 071f 	and.w	r7, r7, #31
   d8f36:	fa03 f707 	lsl.w	r7, r3, r7
   d8f3a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d8f3e:	4621      	mov	r1, r4
   d8f40:	421f      	tst	r7, r3
   d8f42:	4628      	mov	r0, r5
   d8f44:	bf18      	it	ne
   d8f46:	f049 0902 	orrne.w	r9, r9, #2
   d8f4a:	1b36      	subs	r6, r6, r4
   d8f4c:	f7ff fe28 	bl	d8ba0 <rshift>
   d8f50:	2702      	movs	r7, #2
   d8f52:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d8f56:	e000      	b.n	d8f5a <__gethex+0x324>
   d8f58:	2701      	movs	r7, #1
   d8f5a:	f1b9 0f00 	cmp.w	r9, #0
   d8f5e:	f000 8081 	beq.w	d9064 <__gethex+0x42e>
   d8f62:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8f66:	2b02      	cmp	r3, #2
   d8f68:	d00e      	beq.n	d8f88 <__gethex+0x352>
   d8f6a:	2b03      	cmp	r3, #3
   d8f6c:	d010      	beq.n	d8f90 <__gethex+0x35a>
   d8f6e:	2b01      	cmp	r3, #1
   d8f70:	d176      	bne.n	d9060 <__gethex+0x42a>
   d8f72:	f019 0f02 	tst.w	r9, #2
   d8f76:	d073      	beq.n	d9060 <__gethex+0x42a>
   d8f78:	f8da 0000 	ldr.w	r0, [sl]
   d8f7c:	ea49 0900 	orr.w	r9, r9, r0
   d8f80:	f019 0f01 	tst.w	r9, #1
   d8f84:	d107      	bne.n	d8f96 <__gethex+0x360>
   d8f86:	e06b      	b.n	d9060 <__gethex+0x42a>
   d8f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8f8a:	f1c3 0301 	rsb	r3, r3, #1
   d8f8e:	9315      	str	r3, [sp, #84]	; 0x54
   d8f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8f92:	2b00      	cmp	r3, #0
   d8f94:	d064      	beq.n	d9060 <__gethex+0x42a>
   d8f96:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d8f9a:	f105 0314 	add.w	r3, r5, #20
   d8f9e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d8fa2:	eb03 0109 	add.w	r1, r3, r9
   d8fa6:	2000      	movs	r0, #0
   d8fa8:	681a      	ldr	r2, [r3, #0]
   d8faa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d8fae:	d002      	beq.n	d8fb6 <__gethex+0x380>
   d8fb0:	3201      	adds	r2, #1
   d8fb2:	601a      	str	r2, [r3, #0]
   d8fb4:	e020      	b.n	d8ff8 <__gethex+0x3c2>
   d8fb6:	f843 0b04 	str.w	r0, [r3], #4
   d8fba:	4299      	cmp	r1, r3
   d8fbc:	d8f4      	bhi.n	d8fa8 <__gethex+0x372>
   d8fbe:	68ab      	ldr	r3, [r5, #8]
   d8fc0:	459a      	cmp	sl, r3
   d8fc2:	db12      	blt.n	d8fea <__gethex+0x3b4>
   d8fc4:	6869      	ldr	r1, [r5, #4]
   d8fc6:	9802      	ldr	r0, [sp, #8]
   d8fc8:	3101      	adds	r1, #1
   d8fca:	f000 f9e7 	bl	d939c <_Balloc>
   d8fce:	692a      	ldr	r2, [r5, #16]
   d8fd0:	3202      	adds	r2, #2
   d8fd2:	f105 010c 	add.w	r1, r5, #12
   d8fd6:	4683      	mov	fp, r0
   d8fd8:	0092      	lsls	r2, r2, #2
   d8fda:	300c      	adds	r0, #12
   d8fdc:	f7fe fbda 	bl	d7794 <memcpy>
   d8fe0:	4629      	mov	r1, r5
   d8fe2:	9802      	ldr	r0, [sp, #8]
   d8fe4:	f000 fa0f 	bl	d9406 <_Bfree>
   d8fe8:	465d      	mov	r5, fp
   d8fea:	692b      	ldr	r3, [r5, #16]
   d8fec:	1c5a      	adds	r2, r3, #1
   d8fee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8ff2:	612a      	str	r2, [r5, #16]
   d8ff4:	2201      	movs	r2, #1
   d8ff6:	615a      	str	r2, [r3, #20]
   d8ff8:	2f02      	cmp	r7, #2
   d8ffa:	f105 0214 	add.w	r2, r5, #20
   d8ffe:	d111      	bne.n	d9024 <__gethex+0x3ee>
   d9000:	f8d8 3000 	ldr.w	r3, [r8]
   d9004:	3b01      	subs	r3, #1
   d9006:	429e      	cmp	r6, r3
   d9008:	d127      	bne.n	d905a <__gethex+0x424>
   d900a:	1171      	asrs	r1, r6, #5
   d900c:	2301      	movs	r3, #1
   d900e:	f006 061f 	and.w	r6, r6, #31
   d9012:	fa03 f606 	lsl.w	r6, r3, r6
   d9016:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d901a:	421e      	tst	r6, r3
   d901c:	bf0c      	ite	eq
   d901e:	2702      	moveq	r7, #2
   d9020:	2701      	movne	r7, #1
   d9022:	e01a      	b.n	d905a <__gethex+0x424>
   d9024:	692b      	ldr	r3, [r5, #16]
   d9026:	459a      	cmp	sl, r3
   d9028:	da0a      	bge.n	d9040 <__gethex+0x40a>
   d902a:	2101      	movs	r1, #1
   d902c:	4628      	mov	r0, r5
   d902e:	f7ff fdb7 	bl	d8ba0 <rshift>
   d9032:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9036:	3401      	adds	r4, #1
   d9038:	429c      	cmp	r4, r3
   d903a:	f73f af2c 	bgt.w	d8e96 <__gethex+0x260>
   d903e:	e00b      	b.n	d9058 <__gethex+0x422>
   d9040:	f016 061f 	ands.w	r6, r6, #31
   d9044:	d008      	beq.n	d9058 <__gethex+0x422>
   d9046:	4491      	add	r9, r2
   d9048:	f1c6 0620 	rsb	r6, r6, #32
   d904c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d9050:	f000 fa69 	bl	d9526 <__hi0bits>
   d9054:	42b0      	cmp	r0, r6
   d9056:	dbe8      	blt.n	d902a <__gethex+0x3f4>
   d9058:	2701      	movs	r7, #1
   d905a:	f047 0720 	orr.w	r7, r7, #32
   d905e:	e001      	b.n	d9064 <__gethex+0x42e>
   d9060:	f047 0710 	orr.w	r7, r7, #16
   d9064:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9066:	601d      	str	r5, [r3, #0]
   d9068:	9b06      	ldr	r3, [sp, #24]
   d906a:	4638      	mov	r0, r7
   d906c:	601c      	str	r4, [r3, #0]
   d906e:	b00b      	add	sp, #44	; 0x2c
   d9070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9074 <L_shift>:
   d9074:	f1c2 0208 	rsb	r2, r2, #8
   d9078:	0092      	lsls	r2, r2, #2
   d907a:	b570      	push	{r4, r5, r6, lr}
   d907c:	f1c2 0620 	rsb	r6, r2, #32
   d9080:	6843      	ldr	r3, [r0, #4]
   d9082:	6805      	ldr	r5, [r0, #0]
   d9084:	fa03 f406 	lsl.w	r4, r3, r6
   d9088:	432c      	orrs	r4, r5
   d908a:	40d3      	lsrs	r3, r2
   d908c:	6004      	str	r4, [r0, #0]
   d908e:	f840 3f04 	str.w	r3, [r0, #4]!
   d9092:	4288      	cmp	r0, r1
   d9094:	d3f4      	bcc.n	d9080 <L_shift+0xc>
   d9096:	bd70      	pop	{r4, r5, r6, pc}

000d9098 <__match>:
   d9098:	b530      	push	{r4, r5, lr}
   d909a:	6803      	ldr	r3, [r0, #0]
   d909c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90a0:	3301      	adds	r3, #1
   d90a2:	b14c      	cbz	r4, d90b8 <__match+0x20>
   d90a4:	781a      	ldrb	r2, [r3, #0]
   d90a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d90aa:	2d19      	cmp	r5, #25
   d90ac:	bf98      	it	ls
   d90ae:	3220      	addls	r2, #32
   d90b0:	42a2      	cmp	r2, r4
   d90b2:	d0f3      	beq.n	d909c <__match+0x4>
   d90b4:	2000      	movs	r0, #0
   d90b6:	bd30      	pop	{r4, r5, pc}
   d90b8:	6003      	str	r3, [r0, #0]
   d90ba:	2001      	movs	r0, #1
   d90bc:	bd30      	pop	{r4, r5, pc}

000d90be <__hexnan>:
   d90be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d90c2:	680b      	ldr	r3, [r1, #0]
   d90c4:	f8d0 b000 	ldr.w	fp, [r0]
   d90c8:	115e      	asrs	r6, r3, #5
   d90ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d90ce:	f013 031f 	ands.w	r3, r3, #31
   d90d2:	b085      	sub	sp, #20
   d90d4:	bf18      	it	ne
   d90d6:	3604      	addne	r6, #4
   d90d8:	1f35      	subs	r5, r6, #4
   d90da:	4617      	mov	r7, r2
   d90dc:	2200      	movs	r2, #0
   d90de:	4682      	mov	sl, r0
   d90e0:	9301      	str	r3, [sp, #4]
   d90e2:	f846 2c04 	str.w	r2, [r6, #-4]
   d90e6:	46a8      	mov	r8, r5
   d90e8:	462c      	mov	r4, r5
   d90ea:	9200      	str	r2, [sp, #0]
   d90ec:	4691      	mov	r9, r2
   d90ee:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d90f2:	2900      	cmp	r1, #0
   d90f4:	d03c      	beq.n	d9170 <__hexnan+0xb2>
   d90f6:	4608      	mov	r0, r1
   d90f8:	9203      	str	r2, [sp, #12]
   d90fa:	9102      	str	r1, [sp, #8]
   d90fc:	f7ff fd86 	bl	d8c0c <__hexdig_fun>
   d9100:	9a03      	ldr	r2, [sp, #12]
   d9102:	bb00      	cbnz	r0, d9146 <__hexnan+0x88>
   d9104:	9902      	ldr	r1, [sp, #8]
   d9106:	2920      	cmp	r1, #32
   d9108:	d816      	bhi.n	d9138 <__hexnan+0x7a>
   d910a:	9b00      	ldr	r3, [sp, #0]
   d910c:	4599      	cmp	r9, r3
   d910e:	ddee      	ble.n	d90ee <__hexnan+0x30>
   d9110:	4544      	cmp	r4, r8
   d9112:	d205      	bcs.n	d9120 <__hexnan+0x62>
   d9114:	2a07      	cmp	r2, #7
   d9116:	dc03      	bgt.n	d9120 <__hexnan+0x62>
   d9118:	4641      	mov	r1, r8
   d911a:	4620      	mov	r0, r4
   d911c:	f7ff ffaa 	bl	d9074 <L_shift>
   d9120:	42bc      	cmp	r4, r7
   d9122:	d923      	bls.n	d916c <__hexnan+0xae>
   d9124:	2300      	movs	r3, #0
   d9126:	f1a4 0804 	sub.w	r8, r4, #4
   d912a:	f844 3c04 	str.w	r3, [r4, #-4]
   d912e:	f8cd 9000 	str.w	r9, [sp]
   d9132:	4644      	mov	r4, r8
   d9134:	461a      	mov	r2, r3
   d9136:	e7da      	b.n	d90ee <__hexnan+0x30>
   d9138:	2929      	cmp	r1, #41	; 0x29
   d913a:	d148      	bne.n	d91ce <__hexnan+0x110>
   d913c:	f10b 0301 	add.w	r3, fp, #1
   d9140:	f8ca 3000 	str.w	r3, [sl]
   d9144:	e014      	b.n	d9170 <__hexnan+0xb2>
   d9146:	3201      	adds	r2, #1
   d9148:	2a08      	cmp	r2, #8
   d914a:	f109 0901 	add.w	r9, r9, #1
   d914e:	dd06      	ble.n	d915e <__hexnan+0xa0>
   d9150:	42bc      	cmp	r4, r7
   d9152:	d9cc      	bls.n	d90ee <__hexnan+0x30>
   d9154:	2300      	movs	r3, #0
   d9156:	f844 3c04 	str.w	r3, [r4, #-4]
   d915a:	2201      	movs	r2, #1
   d915c:	3c04      	subs	r4, #4
   d915e:	6821      	ldr	r1, [r4, #0]
   d9160:	f000 000f 	and.w	r0, r0, #15
   d9164:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9168:	6020      	str	r0, [r4, #0]
   d916a:	e7c0      	b.n	d90ee <__hexnan+0x30>
   d916c:	2208      	movs	r2, #8
   d916e:	e7be      	b.n	d90ee <__hexnan+0x30>
   d9170:	f1b9 0f00 	cmp.w	r9, #0
   d9174:	d02b      	beq.n	d91ce <__hexnan+0x110>
   d9176:	4544      	cmp	r4, r8
   d9178:	d205      	bcs.n	d9186 <__hexnan+0xc8>
   d917a:	2a07      	cmp	r2, #7
   d917c:	dc03      	bgt.n	d9186 <__hexnan+0xc8>
   d917e:	4641      	mov	r1, r8
   d9180:	4620      	mov	r0, r4
   d9182:	f7ff ff77 	bl	d9074 <L_shift>
   d9186:	42bc      	cmp	r4, r7
   d9188:	d90c      	bls.n	d91a4 <__hexnan+0xe6>
   d918a:	463b      	mov	r3, r7
   d918c:	f854 2b04 	ldr.w	r2, [r4], #4
   d9190:	f843 2b04 	str.w	r2, [r3], #4
   d9194:	42a5      	cmp	r5, r4
   d9196:	d2f9      	bcs.n	d918c <__hexnan+0xce>
   d9198:	2200      	movs	r2, #0
   d919a:	f843 2b04 	str.w	r2, [r3], #4
   d919e:	429d      	cmp	r5, r3
   d91a0:	d2fb      	bcs.n	d919a <__hexnan+0xdc>
   d91a2:	e00b      	b.n	d91bc <__hexnan+0xfe>
   d91a4:	9b01      	ldr	r3, [sp, #4]
   d91a6:	b14b      	cbz	r3, d91bc <__hexnan+0xfe>
   d91a8:	f1c3 0220 	rsb	r2, r3, #32
   d91ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d91b0:	40d3      	lsrs	r3, r2
   d91b2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d91b6:	4013      	ands	r3, r2
   d91b8:	f846 3c04 	str.w	r3, [r6, #-4]
   d91bc:	682b      	ldr	r3, [r5, #0]
   d91be:	b943      	cbnz	r3, d91d2 <__hexnan+0x114>
   d91c0:	42bd      	cmp	r5, r7
   d91c2:	d102      	bne.n	d91ca <__hexnan+0x10c>
   d91c4:	2301      	movs	r3, #1
   d91c6:	602b      	str	r3, [r5, #0]
   d91c8:	e003      	b.n	d91d2 <__hexnan+0x114>
   d91ca:	3d04      	subs	r5, #4
   d91cc:	e7f6      	b.n	d91bc <__hexnan+0xfe>
   d91ce:	2004      	movs	r0, #4
   d91d0:	e000      	b.n	d91d4 <__hexnan+0x116>
   d91d2:	2005      	movs	r0, #5
   d91d4:	b005      	add	sp, #20
   d91d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d91dc <_findenv_r>:
   d91dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d91e0:	4607      	mov	r7, r0
   d91e2:	468b      	mov	fp, r1
   d91e4:	4690      	mov	r8, r2
   d91e6:	f000 fcd6 	bl	d9b96 <__env_lock>
   d91ea:	4b19      	ldr	r3, [pc, #100]	; (d9250 <_findenv_r+0x74>)
   d91ec:	681d      	ldr	r5, [r3, #0]
   d91ee:	469a      	mov	sl, r3
   d91f0:	b13d      	cbz	r5, d9202 <_findenv_r+0x26>
   d91f2:	465c      	mov	r4, fp
   d91f4:	4623      	mov	r3, r4
   d91f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91fa:	b142      	cbz	r2, d920e <_findenv_r+0x32>
   d91fc:	2a3d      	cmp	r2, #61	; 0x3d
   d91fe:	461c      	mov	r4, r3
   d9200:	d1f8      	bne.n	d91f4 <_findenv_r+0x18>
   d9202:	4638      	mov	r0, r7
   d9204:	f000 fcc8 	bl	d9b98 <__env_unlock>
   d9208:	2000      	movs	r0, #0
   d920a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d920e:	ebcb 0404 	rsb	r4, fp, r4
   d9212:	46a9      	mov	r9, r5
   d9214:	f859 0b04 	ldr.w	r0, [r9], #4
   d9218:	2800      	cmp	r0, #0
   d921a:	d0f2      	beq.n	d9202 <_findenv_r+0x26>
   d921c:	4622      	mov	r2, r4
   d921e:	4659      	mov	r1, fp
   d9220:	f7fe fb29 	bl	d7876 <strncmp>
   d9224:	b988      	cbnz	r0, d924a <_findenv_r+0x6e>
   d9226:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d922a:	191e      	adds	r6, r3, r4
   d922c:	5d1b      	ldrb	r3, [r3, r4]
   d922e:	2b3d      	cmp	r3, #61	; 0x3d
   d9230:	d10b      	bne.n	d924a <_findenv_r+0x6e>
   d9232:	f8da 3000 	ldr.w	r3, [sl]
   d9236:	1aed      	subs	r5, r5, r3
   d9238:	10ad      	asrs	r5, r5, #2
   d923a:	4638      	mov	r0, r7
   d923c:	f8c8 5000 	str.w	r5, [r8]
   d9240:	f000 fcaa 	bl	d9b98 <__env_unlock>
   d9244:	1c70      	adds	r0, r6, #1
   d9246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d924a:	464d      	mov	r5, r9
   d924c:	e7e1      	b.n	d9212 <_findenv_r+0x36>
   d924e:	bf00      	nop
   d9250:	2003e25c 	.word	0x2003e25c

000d9254 <_getenv_r>:
   d9254:	b507      	push	{r0, r1, r2, lr}
   d9256:	aa01      	add	r2, sp, #4
   d9258:	f7ff ffc0 	bl	d91dc <_findenv_r>
   d925c:	b003      	add	sp, #12
   d925e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9264 <__gettzinfo>:
   d9264:	4800      	ldr	r0, [pc, #0]	; (d9268 <__gettzinfo+0x4>)
   d9266:	4770      	bx	lr
   d9268:	2003e21c 	.word	0x2003e21c

000d926c <gmtime_r>:
   d926c:	6802      	ldr	r2, [r0, #0]
   d926e:	4b47      	ldr	r3, [pc, #284]	; (d938c <gmtime_r+0x120>)
   d9270:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9272:	fb92 f4f3 	sdiv	r4, r2, r3
   d9276:	fb03 2214 	mls	r2, r3, r4, r2
   d927a:	2a00      	cmp	r2, #0
   d927c:	bfbc      	itt	lt
   d927e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9282:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9286:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d928a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d928e:	fb92 f3f0 	sdiv	r3, r2, r0
   d9292:	fb00 2213 	mls	r2, r0, r3, r2
   d9296:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d929a:	bfac      	ite	ge
   d929c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d92a0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d92a4:	608b      	str	r3, [r1, #8]
   d92a6:	fb92 f3f0 	sdiv	r3, r2, r0
   d92aa:	fb00 2213 	mls	r2, r0, r3, r2
   d92ae:	604b      	str	r3, [r1, #4]
   d92b0:	600a      	str	r2, [r1, #0]
   d92b2:	2307      	movs	r3, #7
   d92b4:	1ce2      	adds	r2, r4, #3
   d92b6:	fb92 f3f3 	sdiv	r3, r2, r3
   d92ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d92be:	1ad3      	subs	r3, r2, r3
   d92c0:	618b      	str	r3, [r1, #24]
   d92c2:	4b33      	ldr	r3, [pc, #204]	; (d9390 <gmtime_r+0x124>)
   d92c4:	4d33      	ldr	r5, [pc, #204]	; (d9394 <gmtime_r+0x128>)
   d92c6:	fb94 f5f5 	sdiv	r5, r4, r5
   d92ca:	fb03 4405 	mla	r4, r3, r5, r4
   d92ce:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d92d2:	fbb4 f2f2 	udiv	r2, r4, r2
   d92d6:	4422      	add	r2, r4
   d92d8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d92dc:	fbb4 f3f7 	udiv	r3, r4, r7
   d92e0:	1ad2      	subs	r2, r2, r3
   d92e2:	482d      	ldr	r0, [pc, #180]	; (d9398 <gmtime_r+0x12c>)
   d92e4:	fbb4 f0f0 	udiv	r0, r4, r0
   d92e8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d92ec:	1a13      	subs	r3, r2, r0
   d92ee:	fbb3 f6f6 	udiv	r6, r3, r6
   d92f2:	4434      	add	r4, r6
   d92f4:	f240 126d 	movw	r2, #365	; 0x16d
   d92f8:	fbb3 f0f2 	udiv	r0, r3, r2
   d92fc:	fbb3 f3f7 	udiv	r3, r3, r7
   d9300:	1ae3      	subs	r3, r4, r3
   d9302:	fb02 3310 	mls	r3, r2, r0, r3
   d9306:	2499      	movs	r4, #153	; 0x99
   d9308:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d930c:	3202      	adds	r2, #2
   d930e:	fbb2 f2f4 	udiv	r2, r2, r4
   d9312:	2a0a      	cmp	r2, #10
   d9314:	fb04 f402 	mul.w	r4, r4, r2
   d9318:	f104 0602 	add.w	r6, r4, #2
   d931c:	f04f 0405 	mov.w	r4, #5
   d9320:	fbb6 f4f4 	udiv	r4, r6, r4
   d9324:	bf34      	ite	cc
   d9326:	2602      	movcc	r6, #2
   d9328:	f06f 0609 	mvncs.w	r6, #9
   d932c:	4416      	add	r6, r2
   d932e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9332:	fb02 0505 	mla	r5, r2, r5, r0
   d9336:	1c5f      	adds	r7, r3, #1
   d9338:	2e01      	cmp	r6, #1
   d933a:	bf98      	it	ls
   d933c:	3501      	addls	r5, #1
   d933e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9342:	eba7 0704 	sub.w	r7, r7, r4
   d9346:	d302      	bcc.n	d934e <gmtime_r+0xe2>
   d9348:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d934c:	e014      	b.n	d9378 <gmtime_r+0x10c>
   d934e:	0782      	lsls	r2, r0, #30
   d9350:	d105      	bne.n	d935e <gmtime_r+0xf2>
   d9352:	2464      	movs	r4, #100	; 0x64
   d9354:	fbb0 f2f4 	udiv	r2, r0, r4
   d9358:	fb04 0212 	mls	r2, r4, r2, r0
   d935c:	b94a      	cbnz	r2, d9372 <gmtime_r+0x106>
   d935e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9362:	fbb0 f4f2 	udiv	r4, r0, r2
   d9366:	fb02 0014 	mls	r0, r2, r4, r0
   d936a:	fab0 f280 	clz	r2, r0
   d936e:	0952      	lsrs	r2, r2, #5
   d9370:	e000      	b.n	d9374 <gmtime_r+0x108>
   d9372:	2201      	movs	r2, #1
   d9374:	333b      	adds	r3, #59	; 0x3b
   d9376:	441a      	add	r2, r3
   d9378:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d937c:	2300      	movs	r3, #0
   d937e:	61ca      	str	r2, [r1, #28]
   d9380:	614d      	str	r5, [r1, #20]
   d9382:	610e      	str	r6, [r1, #16]
   d9384:	60cf      	str	r7, [r1, #12]
   d9386:	620b      	str	r3, [r1, #32]
   d9388:	4608      	mov	r0, r1
   d938a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d938c:	00015180 	.word	0x00015180
   d9390:	fffdc54f 	.word	0xfffdc54f
   d9394:	00023ab1 	.word	0x00023ab1
   d9398:	00023ab0 	.word	0x00023ab0

000d939c <_Balloc>:
   d939c:	b570      	push	{r4, r5, r6, lr}
   d939e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d93a0:	4604      	mov	r4, r0
   d93a2:	460e      	mov	r6, r1
   d93a4:	b93d      	cbnz	r5, d93b6 <_Balloc+0x1a>
   d93a6:	2010      	movs	r0, #16
   d93a8:	f7fc f818 	bl	d53dc <malloc>
   d93ac:	6260      	str	r0, [r4, #36]	; 0x24
   d93ae:	6045      	str	r5, [r0, #4]
   d93b0:	6085      	str	r5, [r0, #8]
   d93b2:	6005      	str	r5, [r0, #0]
   d93b4:	60c5      	str	r5, [r0, #12]
   d93b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d93b8:	68eb      	ldr	r3, [r5, #12]
   d93ba:	b143      	cbz	r3, d93ce <_Balloc+0x32>
   d93bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d93be:	68db      	ldr	r3, [r3, #12]
   d93c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d93c4:	b178      	cbz	r0, d93e6 <_Balloc+0x4a>
   d93c6:	6802      	ldr	r2, [r0, #0]
   d93c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d93cc:	e017      	b.n	d93fe <_Balloc+0x62>
   d93ce:	2221      	movs	r2, #33	; 0x21
   d93d0:	2104      	movs	r1, #4
   d93d2:	4620      	mov	r0, r4
   d93d4:	f000 fbd1 	bl	d9b7a <_calloc_r>
   d93d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d93da:	60e8      	str	r0, [r5, #12]
   d93dc:	68db      	ldr	r3, [r3, #12]
   d93de:	2b00      	cmp	r3, #0
   d93e0:	d1ec      	bne.n	d93bc <_Balloc+0x20>
   d93e2:	2000      	movs	r0, #0
   d93e4:	bd70      	pop	{r4, r5, r6, pc}
   d93e6:	2101      	movs	r1, #1
   d93e8:	fa01 f506 	lsl.w	r5, r1, r6
   d93ec:	1d6a      	adds	r2, r5, #5
   d93ee:	0092      	lsls	r2, r2, #2
   d93f0:	4620      	mov	r0, r4
   d93f2:	f000 fbc2 	bl	d9b7a <_calloc_r>
   d93f6:	2800      	cmp	r0, #0
   d93f8:	d0f3      	beq.n	d93e2 <_Balloc+0x46>
   d93fa:	6046      	str	r6, [r0, #4]
   d93fc:	6085      	str	r5, [r0, #8]
   d93fe:	2300      	movs	r3, #0
   d9400:	6103      	str	r3, [r0, #16]
   d9402:	60c3      	str	r3, [r0, #12]
   d9404:	bd70      	pop	{r4, r5, r6, pc}

000d9406 <_Bfree>:
   d9406:	b570      	push	{r4, r5, r6, lr}
   d9408:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d940a:	4606      	mov	r6, r0
   d940c:	460d      	mov	r5, r1
   d940e:	b93c      	cbnz	r4, d9420 <_Bfree+0x1a>
   d9410:	2010      	movs	r0, #16
   d9412:	f7fb ffe3 	bl	d53dc <malloc>
   d9416:	6270      	str	r0, [r6, #36]	; 0x24
   d9418:	6044      	str	r4, [r0, #4]
   d941a:	6084      	str	r4, [r0, #8]
   d941c:	6004      	str	r4, [r0, #0]
   d941e:	60c4      	str	r4, [r0, #12]
   d9420:	b13d      	cbz	r5, d9432 <_Bfree+0x2c>
   d9422:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9424:	686a      	ldr	r2, [r5, #4]
   d9426:	68db      	ldr	r3, [r3, #12]
   d9428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d942c:	6029      	str	r1, [r5, #0]
   d942e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9432:	bd70      	pop	{r4, r5, r6, pc}

000d9434 <__multadd>:
   d9434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9438:	690d      	ldr	r5, [r1, #16]
   d943a:	461f      	mov	r7, r3
   d943c:	4606      	mov	r6, r0
   d943e:	460c      	mov	r4, r1
   d9440:	f101 0e14 	add.w	lr, r1, #20
   d9444:	2300      	movs	r3, #0
   d9446:	f8de 0000 	ldr.w	r0, [lr]
   d944a:	b281      	uxth	r1, r0
   d944c:	fb02 7101 	mla	r1, r2, r1, r7
   d9450:	0c0f      	lsrs	r7, r1, #16
   d9452:	0c00      	lsrs	r0, r0, #16
   d9454:	fb02 7000 	mla	r0, r2, r0, r7
   d9458:	b289      	uxth	r1, r1
   d945a:	3301      	adds	r3, #1
   d945c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9460:	429d      	cmp	r5, r3
   d9462:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9466:	f84e 1b04 	str.w	r1, [lr], #4
   d946a:	dcec      	bgt.n	d9446 <__multadd+0x12>
   d946c:	b1d7      	cbz	r7, d94a4 <__multadd+0x70>
   d946e:	68a3      	ldr	r3, [r4, #8]
   d9470:	429d      	cmp	r5, r3
   d9472:	db12      	blt.n	d949a <__multadd+0x66>
   d9474:	6861      	ldr	r1, [r4, #4]
   d9476:	4630      	mov	r0, r6
   d9478:	3101      	adds	r1, #1
   d947a:	f7ff ff8f 	bl	d939c <_Balloc>
   d947e:	6922      	ldr	r2, [r4, #16]
   d9480:	3202      	adds	r2, #2
   d9482:	f104 010c 	add.w	r1, r4, #12
   d9486:	4680      	mov	r8, r0
   d9488:	0092      	lsls	r2, r2, #2
   d948a:	300c      	adds	r0, #12
   d948c:	f7fe f982 	bl	d7794 <memcpy>
   d9490:	4621      	mov	r1, r4
   d9492:	4630      	mov	r0, r6
   d9494:	f7ff ffb7 	bl	d9406 <_Bfree>
   d9498:	4644      	mov	r4, r8
   d949a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d949e:	3501      	adds	r5, #1
   d94a0:	615f      	str	r7, [r3, #20]
   d94a2:	6125      	str	r5, [r4, #16]
   d94a4:	4620      	mov	r0, r4
   d94a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d94aa <__s2b>:
   d94aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d94ae:	460c      	mov	r4, r1
   d94b0:	4615      	mov	r5, r2
   d94b2:	461f      	mov	r7, r3
   d94b4:	2209      	movs	r2, #9
   d94b6:	3308      	adds	r3, #8
   d94b8:	4606      	mov	r6, r0
   d94ba:	fb93 f3f2 	sdiv	r3, r3, r2
   d94be:	2100      	movs	r1, #0
   d94c0:	2201      	movs	r2, #1
   d94c2:	429a      	cmp	r2, r3
   d94c4:	da02      	bge.n	d94cc <__s2b+0x22>
   d94c6:	0052      	lsls	r2, r2, #1
   d94c8:	3101      	adds	r1, #1
   d94ca:	e7fa      	b.n	d94c2 <__s2b+0x18>
   d94cc:	4630      	mov	r0, r6
   d94ce:	f7ff ff65 	bl	d939c <_Balloc>
   d94d2:	9b08      	ldr	r3, [sp, #32]
   d94d4:	6143      	str	r3, [r0, #20]
   d94d6:	2d09      	cmp	r5, #9
   d94d8:	f04f 0301 	mov.w	r3, #1
   d94dc:	6103      	str	r3, [r0, #16]
   d94de:	dd11      	ble.n	d9504 <__s2b+0x5a>
   d94e0:	f104 0809 	add.w	r8, r4, #9
   d94e4:	46c1      	mov	r9, r8
   d94e6:	442c      	add	r4, r5
   d94e8:	f819 3b01 	ldrb.w	r3, [r9], #1
   d94ec:	4601      	mov	r1, r0
   d94ee:	3b30      	subs	r3, #48	; 0x30
   d94f0:	220a      	movs	r2, #10
   d94f2:	4630      	mov	r0, r6
   d94f4:	f7ff ff9e 	bl	d9434 <__multadd>
   d94f8:	45a1      	cmp	r9, r4
   d94fa:	d1f5      	bne.n	d94e8 <__s2b+0x3e>
   d94fc:	eb08 0405 	add.w	r4, r8, r5
   d9500:	3c08      	subs	r4, #8
   d9502:	e001      	b.n	d9508 <__s2b+0x5e>
   d9504:	340a      	adds	r4, #10
   d9506:	2509      	movs	r5, #9
   d9508:	1b2d      	subs	r5, r5, r4
   d950a:	1963      	adds	r3, r4, r5
   d950c:	429f      	cmp	r7, r3
   d950e:	dd08      	ble.n	d9522 <__s2b+0x78>
   d9510:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9514:	4601      	mov	r1, r0
   d9516:	3b30      	subs	r3, #48	; 0x30
   d9518:	220a      	movs	r2, #10
   d951a:	4630      	mov	r0, r6
   d951c:	f7ff ff8a 	bl	d9434 <__multadd>
   d9520:	e7f3      	b.n	d950a <__s2b+0x60>
   d9522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9526 <__hi0bits>:
   d9526:	0c03      	lsrs	r3, r0, #16
   d9528:	041b      	lsls	r3, r3, #16
   d952a:	b913      	cbnz	r3, d9532 <__hi0bits+0xc>
   d952c:	0400      	lsls	r0, r0, #16
   d952e:	2310      	movs	r3, #16
   d9530:	e000      	b.n	d9534 <__hi0bits+0xe>
   d9532:	2300      	movs	r3, #0
   d9534:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9538:	bf04      	itt	eq
   d953a:	0200      	lsleq	r0, r0, #8
   d953c:	3308      	addeq	r3, #8
   d953e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9542:	bf04      	itt	eq
   d9544:	0100      	lsleq	r0, r0, #4
   d9546:	3304      	addeq	r3, #4
   d9548:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d954c:	bf04      	itt	eq
   d954e:	0080      	lsleq	r0, r0, #2
   d9550:	3302      	addeq	r3, #2
   d9552:	2800      	cmp	r0, #0
   d9554:	db03      	blt.n	d955e <__hi0bits+0x38>
   d9556:	0042      	lsls	r2, r0, #1
   d9558:	d503      	bpl.n	d9562 <__hi0bits+0x3c>
   d955a:	1c58      	adds	r0, r3, #1
   d955c:	4770      	bx	lr
   d955e:	4618      	mov	r0, r3
   d9560:	4770      	bx	lr
   d9562:	2020      	movs	r0, #32
   d9564:	4770      	bx	lr

000d9566 <__lo0bits>:
   d9566:	6803      	ldr	r3, [r0, #0]
   d9568:	f013 0207 	ands.w	r2, r3, #7
   d956c:	d00b      	beq.n	d9586 <__lo0bits+0x20>
   d956e:	07d9      	lsls	r1, r3, #31
   d9570:	d422      	bmi.n	d95b8 <__lo0bits+0x52>
   d9572:	079a      	lsls	r2, r3, #30
   d9574:	bf4b      	itete	mi
   d9576:	085b      	lsrmi	r3, r3, #1
   d9578:	089b      	lsrpl	r3, r3, #2
   d957a:	6003      	strmi	r3, [r0, #0]
   d957c:	6003      	strpl	r3, [r0, #0]
   d957e:	bf4c      	ite	mi
   d9580:	2001      	movmi	r0, #1
   d9582:	2002      	movpl	r0, #2
   d9584:	4770      	bx	lr
   d9586:	b299      	uxth	r1, r3
   d9588:	b909      	cbnz	r1, d958e <__lo0bits+0x28>
   d958a:	0c1b      	lsrs	r3, r3, #16
   d958c:	2210      	movs	r2, #16
   d958e:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9592:	bf04      	itt	eq
   d9594:	0a1b      	lsreq	r3, r3, #8
   d9596:	3208      	addeq	r2, #8
   d9598:	0719      	lsls	r1, r3, #28
   d959a:	bf04      	itt	eq
   d959c:	091b      	lsreq	r3, r3, #4
   d959e:	3204      	addeq	r2, #4
   d95a0:	0799      	lsls	r1, r3, #30
   d95a2:	bf04      	itt	eq
   d95a4:	089b      	lsreq	r3, r3, #2
   d95a6:	3202      	addeq	r2, #2
   d95a8:	07d9      	lsls	r1, r3, #31
   d95aa:	d402      	bmi.n	d95b2 <__lo0bits+0x4c>
   d95ac:	085b      	lsrs	r3, r3, #1
   d95ae:	d005      	beq.n	d95bc <__lo0bits+0x56>
   d95b0:	3201      	adds	r2, #1
   d95b2:	6003      	str	r3, [r0, #0]
   d95b4:	4610      	mov	r0, r2
   d95b6:	4770      	bx	lr
   d95b8:	2000      	movs	r0, #0
   d95ba:	4770      	bx	lr
   d95bc:	2020      	movs	r0, #32
   d95be:	4770      	bx	lr

000d95c0 <__i2b>:
   d95c0:	b510      	push	{r4, lr}
   d95c2:	460c      	mov	r4, r1
   d95c4:	2101      	movs	r1, #1
   d95c6:	f7ff fee9 	bl	d939c <_Balloc>
   d95ca:	2201      	movs	r2, #1
   d95cc:	6144      	str	r4, [r0, #20]
   d95ce:	6102      	str	r2, [r0, #16]
   d95d0:	bd10      	pop	{r4, pc}

000d95d2 <__multiply>:
   d95d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d95d6:	4614      	mov	r4, r2
   d95d8:	690a      	ldr	r2, [r1, #16]
   d95da:	6923      	ldr	r3, [r4, #16]
   d95dc:	429a      	cmp	r2, r3
   d95de:	bfb8      	it	lt
   d95e0:	460b      	movlt	r3, r1
   d95e2:	4688      	mov	r8, r1
   d95e4:	bfbc      	itt	lt
   d95e6:	46a0      	movlt	r8, r4
   d95e8:	461c      	movlt	r4, r3
   d95ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d95ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d95f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d95f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d95fa:	eb07 0609 	add.w	r6, r7, r9
   d95fe:	429e      	cmp	r6, r3
   d9600:	bfc8      	it	gt
   d9602:	3101      	addgt	r1, #1
   d9604:	f7ff feca 	bl	d939c <_Balloc>
   d9608:	f100 0514 	add.w	r5, r0, #20
   d960c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9610:	462b      	mov	r3, r5
   d9612:	2200      	movs	r2, #0
   d9614:	4563      	cmp	r3, ip
   d9616:	d202      	bcs.n	d961e <__multiply+0x4c>
   d9618:	f843 2b04 	str.w	r2, [r3], #4
   d961c:	e7fa      	b.n	d9614 <__multiply+0x42>
   d961e:	f104 0214 	add.w	r2, r4, #20
   d9622:	f108 0114 	add.w	r1, r8, #20
   d9626:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d962a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d962e:	9300      	str	r3, [sp, #0]
   d9630:	9b00      	ldr	r3, [sp, #0]
   d9632:	9201      	str	r2, [sp, #4]
   d9634:	4293      	cmp	r3, r2
   d9636:	d957      	bls.n	d96e8 <__multiply+0x116>
   d9638:	f8b2 b000 	ldrh.w	fp, [r2]
   d963c:	f1bb 0f00 	cmp.w	fp, #0
   d9640:	d023      	beq.n	d968a <__multiply+0xb8>
   d9642:	4689      	mov	r9, r1
   d9644:	46ae      	mov	lr, r5
   d9646:	f04f 0800 	mov.w	r8, #0
   d964a:	f859 4b04 	ldr.w	r4, [r9], #4
   d964e:	f8be a000 	ldrh.w	sl, [lr]
   d9652:	b2a3      	uxth	r3, r4
   d9654:	fb0b a303 	mla	r3, fp, r3, sl
   d9658:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d965c:	f8de 4000 	ldr.w	r4, [lr]
   d9660:	4443      	add	r3, r8
   d9662:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9666:	fb0b 840a 	mla	r4, fp, sl, r8
   d966a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d966e:	46f2      	mov	sl, lr
   d9670:	b29b      	uxth	r3, r3
   d9672:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9676:	454f      	cmp	r7, r9
   d9678:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d967c:	f84a 3b04 	str.w	r3, [sl], #4
   d9680:	d901      	bls.n	d9686 <__multiply+0xb4>
   d9682:	46d6      	mov	lr, sl
   d9684:	e7e1      	b.n	d964a <__multiply+0x78>
   d9686:	f8ce 8004 	str.w	r8, [lr, #4]
   d968a:	9b01      	ldr	r3, [sp, #4]
   d968c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9690:	3204      	adds	r2, #4
   d9692:	f1ba 0f00 	cmp.w	sl, #0
   d9696:	d021      	beq.n	d96dc <__multiply+0x10a>
   d9698:	682b      	ldr	r3, [r5, #0]
   d969a:	462c      	mov	r4, r5
   d969c:	4689      	mov	r9, r1
   d969e:	f04f 0800 	mov.w	r8, #0
   d96a2:	f8b9 e000 	ldrh.w	lr, [r9]
   d96a6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d96aa:	fb0a be0e 	mla	lr, sl, lr, fp
   d96ae:	44f0      	add	r8, lr
   d96b0:	46a3      	mov	fp, r4
   d96b2:	b29b      	uxth	r3, r3
   d96b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d96b8:	f84b 3b04 	str.w	r3, [fp], #4
   d96bc:	f859 3b04 	ldr.w	r3, [r9], #4
   d96c0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d96c4:	0c1b      	lsrs	r3, r3, #16
   d96c6:	fb0a e303 	mla	r3, sl, r3, lr
   d96ca:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d96ce:	454f      	cmp	r7, r9
   d96d0:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d96d4:	d901      	bls.n	d96da <__multiply+0x108>
   d96d6:	465c      	mov	r4, fp
   d96d8:	e7e3      	b.n	d96a2 <__multiply+0xd0>
   d96da:	6063      	str	r3, [r4, #4]
   d96dc:	3504      	adds	r5, #4
   d96de:	e7a7      	b.n	d9630 <__multiply+0x5e>
   d96e0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d96e4:	b913      	cbnz	r3, d96ec <__multiply+0x11a>
   d96e6:	3e01      	subs	r6, #1
   d96e8:	2e00      	cmp	r6, #0
   d96ea:	dcf9      	bgt.n	d96e0 <__multiply+0x10e>
   d96ec:	6106      	str	r6, [r0, #16]
   d96ee:	b003      	add	sp, #12
   d96f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d96f4 <__pow5mult>:
   d96f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d96f8:	4615      	mov	r5, r2
   d96fa:	f012 0203 	ands.w	r2, r2, #3
   d96fe:	4606      	mov	r6, r0
   d9700:	460f      	mov	r7, r1
   d9702:	d007      	beq.n	d9714 <__pow5mult+0x20>
   d9704:	3a01      	subs	r2, #1
   d9706:	4c21      	ldr	r4, [pc, #132]	; (d978c <__pow5mult+0x98>)
   d9708:	2300      	movs	r3, #0
   d970a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d970e:	f7ff fe91 	bl	d9434 <__multadd>
   d9712:	4607      	mov	r7, r0
   d9714:	10ad      	asrs	r5, r5, #2
   d9716:	d036      	beq.n	d9786 <__pow5mult+0x92>
   d9718:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d971a:	b93c      	cbnz	r4, d972c <__pow5mult+0x38>
   d971c:	2010      	movs	r0, #16
   d971e:	f7fb fe5d 	bl	d53dc <malloc>
   d9722:	6270      	str	r0, [r6, #36]	; 0x24
   d9724:	6044      	str	r4, [r0, #4]
   d9726:	6084      	str	r4, [r0, #8]
   d9728:	6004      	str	r4, [r0, #0]
   d972a:	60c4      	str	r4, [r0, #12]
   d972c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9730:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9734:	b94c      	cbnz	r4, d974a <__pow5mult+0x56>
   d9736:	f240 2171 	movw	r1, #625	; 0x271
   d973a:	4630      	mov	r0, r6
   d973c:	f7ff ff40 	bl	d95c0 <__i2b>
   d9740:	2300      	movs	r3, #0
   d9742:	f8c8 0008 	str.w	r0, [r8, #8]
   d9746:	4604      	mov	r4, r0
   d9748:	6003      	str	r3, [r0, #0]
   d974a:	f04f 0800 	mov.w	r8, #0
   d974e:	07eb      	lsls	r3, r5, #31
   d9750:	d50a      	bpl.n	d9768 <__pow5mult+0x74>
   d9752:	4639      	mov	r1, r7
   d9754:	4622      	mov	r2, r4
   d9756:	4630      	mov	r0, r6
   d9758:	f7ff ff3b 	bl	d95d2 <__multiply>
   d975c:	4639      	mov	r1, r7
   d975e:	4681      	mov	r9, r0
   d9760:	4630      	mov	r0, r6
   d9762:	f7ff fe50 	bl	d9406 <_Bfree>
   d9766:	464f      	mov	r7, r9
   d9768:	106d      	asrs	r5, r5, #1
   d976a:	d00c      	beq.n	d9786 <__pow5mult+0x92>
   d976c:	6820      	ldr	r0, [r4, #0]
   d976e:	b108      	cbz	r0, d9774 <__pow5mult+0x80>
   d9770:	4604      	mov	r4, r0
   d9772:	e7ec      	b.n	d974e <__pow5mult+0x5a>
   d9774:	4622      	mov	r2, r4
   d9776:	4621      	mov	r1, r4
   d9778:	4630      	mov	r0, r6
   d977a:	f7ff ff2a 	bl	d95d2 <__multiply>
   d977e:	6020      	str	r0, [r4, #0]
   d9780:	f8c0 8000 	str.w	r8, [r0]
   d9784:	e7f4      	b.n	d9770 <__pow5mult+0x7c>
   d9786:	4638      	mov	r0, r7
   d9788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d978c:	000da4f8 	.word	0x000da4f8

000d9790 <__lshift>:
   d9790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9794:	460c      	mov	r4, r1
   d9796:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d979a:	6926      	ldr	r6, [r4, #16]
   d979c:	6849      	ldr	r1, [r1, #4]
   d979e:	68a3      	ldr	r3, [r4, #8]
   d97a0:	4456      	add	r6, sl
   d97a2:	4607      	mov	r7, r0
   d97a4:	4691      	mov	r9, r2
   d97a6:	1c75      	adds	r5, r6, #1
   d97a8:	42ab      	cmp	r3, r5
   d97aa:	da02      	bge.n	d97b2 <__lshift+0x22>
   d97ac:	3101      	adds	r1, #1
   d97ae:	005b      	lsls	r3, r3, #1
   d97b0:	e7fa      	b.n	d97a8 <__lshift+0x18>
   d97b2:	4638      	mov	r0, r7
   d97b4:	f7ff fdf2 	bl	d939c <_Balloc>
   d97b8:	2300      	movs	r3, #0
   d97ba:	4680      	mov	r8, r0
   d97bc:	f100 0114 	add.w	r1, r0, #20
   d97c0:	461a      	mov	r2, r3
   d97c2:	4553      	cmp	r3, sl
   d97c4:	da03      	bge.n	d97ce <__lshift+0x3e>
   d97c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d97ca:	3301      	adds	r3, #1
   d97cc:	e7f9      	b.n	d97c2 <__lshift+0x32>
   d97ce:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d97d2:	6920      	ldr	r0, [r4, #16]
   d97d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d97d8:	f019 091f 	ands.w	r9, r9, #31
   d97dc:	f104 0114 	add.w	r1, r4, #20
   d97e0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d97e4:	d014      	beq.n	d9810 <__lshift+0x80>
   d97e6:	f1c9 0c20 	rsb	ip, r9, #32
   d97ea:	2200      	movs	r2, #0
   d97ec:	6808      	ldr	r0, [r1, #0]
   d97ee:	fa00 f009 	lsl.w	r0, r0, r9
   d97f2:	4302      	orrs	r2, r0
   d97f4:	469a      	mov	sl, r3
   d97f6:	f843 2b04 	str.w	r2, [r3], #4
   d97fa:	f851 2b04 	ldr.w	r2, [r1], #4
   d97fe:	458e      	cmp	lr, r1
   d9800:	fa22 f20c 	lsr.w	r2, r2, ip
   d9804:	d8f2      	bhi.n	d97ec <__lshift+0x5c>
   d9806:	f8ca 2004 	str.w	r2, [sl, #4]
   d980a:	b142      	cbz	r2, d981e <__lshift+0x8e>
   d980c:	1cb5      	adds	r5, r6, #2
   d980e:	e006      	b.n	d981e <__lshift+0x8e>
   d9810:	3b04      	subs	r3, #4
   d9812:	f851 2b04 	ldr.w	r2, [r1], #4
   d9816:	f843 2f04 	str.w	r2, [r3, #4]!
   d981a:	458e      	cmp	lr, r1
   d981c:	d8f9      	bhi.n	d9812 <__lshift+0x82>
   d981e:	3d01      	subs	r5, #1
   d9820:	4638      	mov	r0, r7
   d9822:	f8c8 5010 	str.w	r5, [r8, #16]
   d9826:	4621      	mov	r1, r4
   d9828:	f7ff fded 	bl	d9406 <_Bfree>
   d982c:	4640      	mov	r0, r8
   d982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9832 <__mcmp>:
   d9832:	6903      	ldr	r3, [r0, #16]
   d9834:	690a      	ldr	r2, [r1, #16]
   d9836:	1a9b      	subs	r3, r3, r2
   d9838:	b510      	push	{r4, lr}
   d983a:	d111      	bne.n	d9860 <__mcmp+0x2e>
   d983c:	0092      	lsls	r2, r2, #2
   d983e:	3014      	adds	r0, #20
   d9840:	3114      	adds	r1, #20
   d9842:	1883      	adds	r3, r0, r2
   d9844:	440a      	add	r2, r1
   d9846:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d984a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d984e:	428c      	cmp	r4, r1
   d9850:	d002      	beq.n	d9858 <__mcmp+0x26>
   d9852:	d307      	bcc.n	d9864 <__mcmp+0x32>
   d9854:	2001      	movs	r0, #1
   d9856:	bd10      	pop	{r4, pc}
   d9858:	4298      	cmp	r0, r3
   d985a:	d3f4      	bcc.n	d9846 <__mcmp+0x14>
   d985c:	2000      	movs	r0, #0
   d985e:	bd10      	pop	{r4, pc}
   d9860:	4618      	mov	r0, r3
   d9862:	bd10      	pop	{r4, pc}
   d9864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9868:	bd10      	pop	{r4, pc}

000d986a <__mdiff>:
   d986a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d986e:	460c      	mov	r4, r1
   d9870:	4607      	mov	r7, r0
   d9872:	4611      	mov	r1, r2
   d9874:	4620      	mov	r0, r4
   d9876:	4615      	mov	r5, r2
   d9878:	f7ff ffdb 	bl	d9832 <__mcmp>
   d987c:	1e06      	subs	r6, r0, #0
   d987e:	d108      	bne.n	d9892 <__mdiff+0x28>
   d9880:	4631      	mov	r1, r6
   d9882:	4638      	mov	r0, r7
   d9884:	f7ff fd8a 	bl	d939c <_Balloc>
   d9888:	2301      	movs	r3, #1
   d988a:	6103      	str	r3, [r0, #16]
   d988c:	6146      	str	r6, [r0, #20]
   d988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9892:	bfbc      	itt	lt
   d9894:	4623      	movlt	r3, r4
   d9896:	462c      	movlt	r4, r5
   d9898:	4638      	mov	r0, r7
   d989a:	6861      	ldr	r1, [r4, #4]
   d989c:	bfba      	itte	lt
   d989e:	461d      	movlt	r5, r3
   d98a0:	2601      	movlt	r6, #1
   d98a2:	2600      	movge	r6, #0
   d98a4:	f7ff fd7a 	bl	d939c <_Balloc>
   d98a8:	692b      	ldr	r3, [r5, #16]
   d98aa:	60c6      	str	r6, [r0, #12]
   d98ac:	6926      	ldr	r6, [r4, #16]
   d98ae:	f105 0914 	add.w	r9, r5, #20
   d98b2:	3414      	adds	r4, #20
   d98b4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d98b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d98bc:	f100 0514 	add.w	r5, r0, #20
   d98c0:	f04f 0c00 	mov.w	ip, #0
   d98c4:	f854 3b04 	ldr.w	r3, [r4], #4
   d98c8:	f859 2b04 	ldr.w	r2, [r9], #4
   d98cc:	fa1c f183 	uxtah	r1, ip, r3
   d98d0:	fa1f fe82 	uxth.w	lr, r2
   d98d4:	0c12      	lsrs	r2, r2, #16
   d98d6:	ebce 0101 	rsb	r1, lr, r1
   d98da:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d98de:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d98e2:	b289      	uxth	r1, r1
   d98e4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d98e8:	45c8      	cmp	r8, r9
   d98ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d98ee:	46a6      	mov	lr, r4
   d98f0:	f845 3b04 	str.w	r3, [r5], #4
   d98f4:	d8e6      	bhi.n	d98c4 <__mdiff+0x5a>
   d98f6:	45be      	cmp	lr, r7
   d98f8:	d20e      	bcs.n	d9918 <__mdiff+0xae>
   d98fa:	f85e 1b04 	ldr.w	r1, [lr], #4
   d98fe:	fa1c f281 	uxtah	r2, ip, r1
   d9902:	1413      	asrs	r3, r2, #16
   d9904:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d9908:	b292      	uxth	r2, r2
   d990a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d990e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9912:	f845 2b04 	str.w	r2, [r5], #4
   d9916:	e7ee      	b.n	d98f6 <__mdiff+0x8c>
   d9918:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d991c:	b90b      	cbnz	r3, d9922 <__mdiff+0xb8>
   d991e:	3e01      	subs	r6, #1
   d9920:	e7fa      	b.n	d9918 <__mdiff+0xae>
   d9922:	6106      	str	r6, [r0, #16]
   d9924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9928 <__ulp>:
   d9928:	4b12      	ldr	r3, [pc, #72]	; (d9974 <__ulp+0x4c>)
   d992a:	ee10 2a90 	vmov	r2, s1
   d992e:	401a      	ands	r2, r3
   d9930:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d9934:	2b00      	cmp	r3, #0
   d9936:	dd02      	ble.n	d993e <__ulp+0x16>
   d9938:	2000      	movs	r0, #0
   d993a:	4619      	mov	r1, r3
   d993c:	e017      	b.n	d996e <__ulp+0x46>
   d993e:	425b      	negs	r3, r3
   d9940:	151b      	asrs	r3, r3, #20
   d9942:	2b13      	cmp	r3, #19
   d9944:	f04f 0000 	mov.w	r0, #0
   d9948:	f04f 0100 	mov.w	r1, #0
   d994c:	dc04      	bgt.n	d9958 <__ulp+0x30>
   d994e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d9952:	fa42 f103 	asr.w	r1, r2, r3
   d9956:	e00a      	b.n	d996e <__ulp+0x46>
   d9958:	3b14      	subs	r3, #20
   d995a:	2b1e      	cmp	r3, #30
   d995c:	f04f 0201 	mov.w	r2, #1
   d9960:	bfda      	itte	le
   d9962:	f1c3 031f 	rsble	r3, r3, #31
   d9966:	fa02 f303 	lslle.w	r3, r2, r3
   d996a:	4613      	movgt	r3, r2
   d996c:	4618      	mov	r0, r3
   d996e:	ec41 0b10 	vmov	d0, r0, r1
   d9972:	4770      	bx	lr
   d9974:	7ff00000 	.word	0x7ff00000

000d9978 <__b2d>:
   d9978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d997a:	6905      	ldr	r5, [r0, #16]
   d997c:	f100 0614 	add.w	r6, r0, #20
   d9980:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d9984:	1f2f      	subs	r7, r5, #4
   d9986:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d998a:	4620      	mov	r0, r4
   d998c:	f7ff fdcb 	bl	d9526 <__hi0bits>
   d9990:	f1c0 0320 	rsb	r3, r0, #32
   d9994:	280a      	cmp	r0, #10
   d9996:	600b      	str	r3, [r1, #0]
   d9998:	dc14      	bgt.n	d99c4 <__b2d+0x4c>
   d999a:	f1c0 0e0b 	rsb	lr, r0, #11
   d999e:	fa24 f10e 	lsr.w	r1, r4, lr
   d99a2:	42be      	cmp	r6, r7
   d99a4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d99a8:	bf34      	ite	cc
   d99aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d99ae:	2100      	movcs	r1, #0
   d99b0:	3015      	adds	r0, #21
   d99b2:	fa04 f000 	lsl.w	r0, r4, r0
   d99b6:	fa21 f10e 	lsr.w	r1, r1, lr
   d99ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d99be:	ea40 0201 	orr.w	r2, r0, r1
   d99c2:	e023      	b.n	d9a0c <__b2d+0x94>
   d99c4:	42be      	cmp	r6, r7
   d99c6:	bf3a      	itte	cc
   d99c8:	f1a5 0708 	subcc.w	r7, r5, #8
   d99cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d99d0:	2100      	movcs	r1, #0
   d99d2:	380b      	subs	r0, #11
   d99d4:	d015      	beq.n	d9a02 <__b2d+0x8a>
   d99d6:	4084      	lsls	r4, r0
   d99d8:	f1c0 0520 	rsb	r5, r0, #32
   d99dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d99e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d99e4:	42b7      	cmp	r7, r6
   d99e6:	fa21 fe05 	lsr.w	lr, r1, r5
   d99ea:	ea44 030e 	orr.w	r3, r4, lr
   d99ee:	bf8c      	ite	hi
   d99f0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d99f4:	2400      	movls	r4, #0
   d99f6:	fa01 f000 	lsl.w	r0, r1, r0
   d99fa:	40ec      	lsrs	r4, r5
   d99fc:	ea40 0204 	orr.w	r2, r0, r4
   d9a00:	e004      	b.n	d9a0c <__b2d+0x94>
   d9a02:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d9a06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9a0a:	460a      	mov	r2, r1
   d9a0c:	ec43 2b10 	vmov	d0, r2, r3
   d9a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9a12 <__d2b>:
   d9a12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9a16:	460e      	mov	r6, r1
   d9a18:	2101      	movs	r1, #1
   d9a1a:	ec59 8b10 	vmov	r8, r9, d0
   d9a1e:	4615      	mov	r5, r2
   d9a20:	f7ff fcbc 	bl	d939c <_Balloc>
   d9a24:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d9a28:	4607      	mov	r7, r0
   d9a2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d9a2e:	b10c      	cbz	r4, d9a34 <__d2b+0x22>
   d9a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9a34:	9301      	str	r3, [sp, #4]
   d9a36:	f1b8 0f00 	cmp.w	r8, #0
   d9a3a:	d019      	beq.n	d9a70 <__d2b+0x5e>
   d9a3c:	a802      	add	r0, sp, #8
   d9a3e:	f840 8d08 	str.w	r8, [r0, #-8]!
   d9a42:	f7ff fd90 	bl	d9566 <__lo0bits>
   d9a46:	9b00      	ldr	r3, [sp, #0]
   d9a48:	b148      	cbz	r0, d9a5e <__d2b+0x4c>
   d9a4a:	9a01      	ldr	r2, [sp, #4]
   d9a4c:	f1c0 0120 	rsb	r1, r0, #32
   d9a50:	fa02 f101 	lsl.w	r1, r2, r1
   d9a54:	430b      	orrs	r3, r1
   d9a56:	40c2      	lsrs	r2, r0
   d9a58:	617b      	str	r3, [r7, #20]
   d9a5a:	9201      	str	r2, [sp, #4]
   d9a5c:	e000      	b.n	d9a60 <__d2b+0x4e>
   d9a5e:	617b      	str	r3, [r7, #20]
   d9a60:	9b01      	ldr	r3, [sp, #4]
   d9a62:	61bb      	str	r3, [r7, #24]
   d9a64:	2b00      	cmp	r3, #0
   d9a66:	bf14      	ite	ne
   d9a68:	2102      	movne	r1, #2
   d9a6a:	2101      	moveq	r1, #1
   d9a6c:	6139      	str	r1, [r7, #16]
   d9a6e:	e007      	b.n	d9a80 <__d2b+0x6e>
   d9a70:	a801      	add	r0, sp, #4
   d9a72:	f7ff fd78 	bl	d9566 <__lo0bits>
   d9a76:	9b01      	ldr	r3, [sp, #4]
   d9a78:	617b      	str	r3, [r7, #20]
   d9a7a:	2101      	movs	r1, #1
   d9a7c:	6139      	str	r1, [r7, #16]
   d9a7e:	3020      	adds	r0, #32
   d9a80:	b134      	cbz	r4, d9a90 <__d2b+0x7e>
   d9a82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d9a86:	4404      	add	r4, r0
   d9a88:	6034      	str	r4, [r6, #0]
   d9a8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9a8e:	e009      	b.n	d9aa4 <__d2b+0x92>
   d9a90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d9a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9a98:	6030      	str	r0, [r6, #0]
   d9a9a:	6918      	ldr	r0, [r3, #16]
   d9a9c:	f7ff fd43 	bl	d9526 <__hi0bits>
   d9aa0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d9aa4:	6028      	str	r0, [r5, #0]
   d9aa6:	4638      	mov	r0, r7
   d9aa8:	b003      	add	sp, #12
   d9aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9aae <__ratio>:
   d9aae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9ab2:	4688      	mov	r8, r1
   d9ab4:	4669      	mov	r1, sp
   d9ab6:	4681      	mov	r9, r0
   d9ab8:	f7ff ff5e 	bl	d9978 <__b2d>
   d9abc:	a901      	add	r1, sp, #4
   d9abe:	4640      	mov	r0, r8
   d9ac0:	ec55 4b10 	vmov	r4, r5, d0
   d9ac4:	f7ff ff58 	bl	d9978 <__b2d>
   d9ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9acc:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9ad0:	1a9a      	subs	r2, r3, r2
   d9ad2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d9ad6:	1ac9      	subs	r1, r1, r3
   d9ad8:	ec57 6b10 	vmov	r6, r7, d0
   d9adc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9ae0:	2b00      	cmp	r3, #0
   d9ae2:	bfcc      	ite	gt
   d9ae4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d9ae8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d9aec:	4632      	mov	r2, r6
   d9aee:	463b      	mov	r3, r7
   d9af0:	4620      	mov	r0, r4
   d9af2:	4629      	mov	r1, r5
   d9af4:	f7fd fb34 	bl	d7160 <__aeabi_ddiv>
   d9af8:	ec41 0b10 	vmov	d0, r0, r1
   d9afc:	b003      	add	sp, #12
   d9afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9b02 <__copybits>:
   d9b02:	3901      	subs	r1, #1
   d9b04:	b510      	push	{r4, lr}
   d9b06:	1149      	asrs	r1, r1, #5
   d9b08:	6914      	ldr	r4, [r2, #16]
   d9b0a:	3101      	adds	r1, #1
   d9b0c:	f102 0314 	add.w	r3, r2, #20
   d9b10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9b14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9b18:	42a3      	cmp	r3, r4
   d9b1a:	4602      	mov	r2, r0
   d9b1c:	d204      	bcs.n	d9b28 <__copybits+0x26>
   d9b1e:	f853 2b04 	ldr.w	r2, [r3], #4
   d9b22:	f840 2b04 	str.w	r2, [r0], #4
   d9b26:	e7f7      	b.n	d9b18 <__copybits+0x16>
   d9b28:	2300      	movs	r3, #0
   d9b2a:	428a      	cmp	r2, r1
   d9b2c:	d202      	bcs.n	d9b34 <__copybits+0x32>
   d9b2e:	f842 3b04 	str.w	r3, [r2], #4
   d9b32:	e7fa      	b.n	d9b2a <__copybits+0x28>
   d9b34:	bd10      	pop	{r4, pc}

000d9b36 <__any_on>:
   d9b36:	f100 0214 	add.w	r2, r0, #20
   d9b3a:	6900      	ldr	r0, [r0, #16]
   d9b3c:	114b      	asrs	r3, r1, #5
   d9b3e:	4298      	cmp	r0, r3
   d9b40:	b510      	push	{r4, lr}
   d9b42:	db0c      	blt.n	d9b5e <__any_on+0x28>
   d9b44:	dd0c      	ble.n	d9b60 <__any_on+0x2a>
   d9b46:	f011 011f 	ands.w	r1, r1, #31
   d9b4a:	d009      	beq.n	d9b60 <__any_on+0x2a>
   d9b4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9b50:	fa24 f001 	lsr.w	r0, r4, r1
   d9b54:	fa00 f101 	lsl.w	r1, r0, r1
   d9b58:	428c      	cmp	r4, r1
   d9b5a:	d10c      	bne.n	d9b76 <__any_on+0x40>
   d9b5c:	e000      	b.n	d9b60 <__any_on+0x2a>
   d9b5e:	4603      	mov	r3, r0
   d9b60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9b64:	4293      	cmp	r3, r2
   d9b66:	d904      	bls.n	d9b72 <__any_on+0x3c>
   d9b68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9b6c:	2900      	cmp	r1, #0
   d9b6e:	d0f9      	beq.n	d9b64 <__any_on+0x2e>
   d9b70:	e001      	b.n	d9b76 <__any_on+0x40>
   d9b72:	2000      	movs	r0, #0
   d9b74:	bd10      	pop	{r4, pc}
   d9b76:	2001      	movs	r0, #1
   d9b78:	bd10      	pop	{r4, pc}

000d9b7a <_calloc_r>:
   d9b7a:	b538      	push	{r3, r4, r5, lr}
   d9b7c:	fb02 f401 	mul.w	r4, r2, r1
   d9b80:	4621      	mov	r1, r4
   d9b82:	f7fb fc5b 	bl	d543c <_malloc_r>
   d9b86:	4605      	mov	r5, r0
   d9b88:	b118      	cbz	r0, d9b92 <_calloc_r+0x18>
   d9b8a:	4622      	mov	r2, r4
   d9b8c:	2100      	movs	r1, #0
   d9b8e:	f7fd fe0c 	bl	d77aa <memset>
   d9b92:	4628      	mov	r0, r5
   d9b94:	bd38      	pop	{r3, r4, r5, pc}

000d9b96 <__env_lock>:
   d9b96:	4770      	bx	lr

000d9b98 <__env_unlock>:
   d9b98:	4770      	bx	lr

000d9b9a <link_code_end>:
	...

000d9b9c <dynalib_user>:
   d9b9c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9bac:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d9bbc:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
   d9bf0:	6554 706d 4d5f 7861 3a20 2520 2e33 6631     Temp_Max : %3.1f
   d9c00:	5400 6d65 5f70 694d 2078 203a 3325 312e     .Temp_Mix : %3.1
   d9c10:	0066 7548 696d 6964 7974 4d5f 7861 203a     f.Humidity_Max: 
   d9c20:	3325 312e 0066 7548 696d 6964 7974 4d5f     %3.1f.Humidity_M
   d9c30:	6e69 3a20 2520 2e33 6631 7b00 5422 6d65     in : %3.1f.{"Tem
   d9c40:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
   d9c50:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d9c60:	7d66 7300 6f74 6172 6567 662d 6361 6c69     f}.storage-facil
   d9c70:	7469 2d79 6f68 6b6f 4e00 206f 6144 6174     ity-hook.No Data
   d9c80:	5500 6962 6f64 7374 4820 6f6f 006b 6552     .Ubidots Hook.Re
   d9c90:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
   d9ca0:	7453 7461 0065 3425 312e 2a66 0043 3425     State.%4.1f*C.%4
   d9cb0:	312e 2566 0025 6146 6c69 6465 7420 206f     .1f%%.Failed to 
   d9cc0:	6570 6672 726f 206d 6572 6461 6e69 2067     perform reading 
   d9cd0:	283a 4c00 676f 4600 6961 656c 2064 6f74     :(.Log.Failed to
   d9ce0:	7420 6b61 2065 6572 6461 6e69 2167 7b00      take reading!.{
   d9cf0:	6122 656c 7472 742d 6d65 6570 6172 7574     "alert-temperatu
   d9d00:	6572 3a22 3425 312e 7d66 6300 2d63 6c61     re":%4.1f}.cc-al
   d9d10:	7265 2d74 6577 6862 6f6f 006b 227b 6c61     ert-webhook.{"al
   d9d20:	7265 2d74 7568 696d 6964 7974 3a22 3425     ert-humidity":%4
   d9d30:	312e 7d66 5300 7465 5620 7265 6f62 6573     .1f}.Set Verbose
   d9d40:	4d20 646f 0065 0030 6c43 6165 6572 2064      Mode.0.Cleared 
   d9d50:	6556 6272 736f 2065 6f4d 6564 4600 6f72     Verbose Mode.Fro
   d9d60:	206d 7325 7420 206f 7325 5300 6174 6574     m %s to %s.State
   d9d70:	5420 6172 736e 7469 6f69 006e 7245 6f72      Transition.Erro
   d9d80:	2072 6174 696b 676e 4d20 6165 7573 6572     r taking Measure
   d9d90:	656d 746e 0073 7073 7261 2f6b 6564 6976     ments.spark/devi
   d9da0:	6563 732f 7365 6973 6e6f 652f 646e 4500     ce/session/end.E
   d9db0:	7272 726f 5320 6174 6574 2d20 5220 7365     rror State - Res
   d9dc0:	7465 5500 7070 7265 5420 7268 7365 6f68     et.Upper Thresho
   d9dd0:	646c 5320 7465 4c00 776f 7265 5420 7268     ld Set.Lower Thr
   d9de0:	7365 6f68 646c 5320 7465 5300 5448 3133     eshold Set.SHT31
   d9df0:	7420 7365 0074 6552 656c 7361 0065 6574      test.Release.te
   d9e00:	706d 7265 7461 7275 0065 7568 696d 6964     mperature.humidi
   d9e10:	7974 7400 6d65 6570 6172 7574 6572 552d     ty.temperature-U
   d9e20:	7070 7265 7400 6d65 6570 6172 7574 6572     pper.temperature
   d9e30:	6c2d 776f 7265 6800 6d75 6469 7469 2d79     -lower.humidity-
   d9e40:	7075 6570 0072 7568 696d 6964 7974 6c2d     upper.humidity-l
   d9e50:	776f 7265 4d00 6165 7573 6572 4e2d 776f     ower.Measure-Now
   d9e60:	5600 7265 6f62 6573 4d2d 646f 0065 6554     .Verbose-Mode.Te
   d9e70:	706d 552d 7070 7265 4c2d 6d69 7469 5400     mp-Upper-Limit.T
   d9e80:	6d65 2d70 6f4c 6577 2d72 694c 696d 0074     emp-Lower-Limit.
   d9e90:	7548 696d 6964 7974 4c2d 776f 7265 4c2d     Humidity-Lower-L
   d9ea0:	6d69 7469 4800 6d75 6469 7974 752d 7070     imit.Humidty-upp
   d9eb0:	7265 4c2d 6d69 7469 4500 7272 726f 2d20     er-Limit.Error -
   d9ec0:	5320 5448 3133 4920 696e 6974 6c61 7a69      SHT31 Initializ
   d9ed0:	7461 6f69 006e 6f43 6c75 6e64 7427 6620     ation.Couldn't f
   d9ee0:	6e69 2064 4853 3354 0031 6146 6c69 6465     ind SHT31.Failed
   d9ef0:	7420 206f 6f63 6e6e 6365 0074 7453 7261      to connect.Star
   d9f00:	7574 0070 2e31 3930 0000 0000               tup.1.09....

000d9f0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9f14:	54c1 000d 54c7 000d 551d 000d 54d5 000d     .T...T...U...T..
   d9f24:	54c3 000d                                   .T..

000d9f28 <_ZTVN5spark13EthernetClassE>:
	...
   d9f30:	5b33 000d 5b29 000d 5b1f 000d 5b15 000d     3[..)[...[...[..
   d9f40:	5b09 000d 5afd 000d 5af1 000d 5ae9 000d     .[...Z...Z...Z..
   d9f50:	5adf 000d 5ad5 000d 5f31 000d               .Z...Z..1_..

000d9f5c <_ZTV7TwoWire>:
	...
   d9f64:	5b51 000d 5b9b 000d 5b73 000d 5b53 000d     Q[...[..s[..S[..
   d9f74:	5b7b 000d 5b83 000d 5b8b 000d 5b93 000d     {[...[...[...[..

000d9f84 <_ZTV9IPAddress>:
	...
   d9f8c:	5c69 000d 5c59 000d 5c5b 000d 6162 6475     i\..Y\..[\..baud
   d9f9c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9fac:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9fbc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9fcc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9fdc:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9fec:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9ffc:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   da00c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   da01c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   da02c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   da03c:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   da04c:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   da05c:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   da06c:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000da078 <_ZTVN5spark9MeshClassE>:
	...
   da080:	5dab 000d 5da1 000d 5d97 000d 5d8d 000d     .]...]...]...]..
   da090:	5d81 000d 5d75 000d 5d69 000d 5d61 000d     .]..u]..i]..a]..
   da0a0:	5d57 000d 5d4d 000d 5f31 000d               W]..M]..1_..

000da0ac <_ZTVN5spark12NetworkClassE>:
	...
   da0b4:	5ec9 000d 5ed3 000d 5edd 000d 5ee7 000d     .^...^...^...^..
   da0c4:	5ef1 000d 5efd 000d 5f09 000d 5f15 000d     .^...^..._..._..
   da0d4:	5f1d 000d 5f27 000d 5f31 000d 2b25 3330     ._..'_..1_..%+03
   da0e4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   da0f4:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   da104:	656d 0000                                   me..

000da108 <_ZTV11USARTSerial>:
	...
   da110:	63bd 000d 640d 000d 641b 000d 6011 000d     .c...d...d...`..
   da120:	63d1 000d 63f3 000d 63df 000d 6407 000d     .c...c...c...d..
   da130:	63bf 000d 63c3 000d                         .c...c..

000da138 <_ZTV9USBSerial>:
	...
   da140:	64c5 000d 6515 000d 6523 000d 6011 000d     .d...e..#e...`..
   da150:	6501 000d 64c7 000d 64dd 000d 650f 000d     .e...d...d...e..
   da160:	64f3 000d 64c1 000d                         .d...d..

000da168 <_ZTVN5spark9WiFiClassE>:
	...
   da170:	662f 000d 6625 000d 661b 000d 65d1 000d     /f..%f...f...e..
   da180:	660f 000d 6603 000d 65f7 000d 65ef 000d     .f...f...e...e..
   da190:	65e5 000d 65db 000d 5f31 000d               .e...e..1_..

000da19c <_ZSt7nothrow>:
	...

000da19d <_ctype_>:
   da19d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da1ad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da1bd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da1cd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da1dd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da1ed:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da1fd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da20d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da21d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da2a0 <__sf_fake_stdin>:
	...

000da2c0 <__sf_fake_stdout>:
	...

000da2e0 <__sf_fake_stderr>:
	...
   da300:	4f50 4953 0058 002e                         POSIX...

000da308 <__month_lengths>:
   da308:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da318:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da328:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da338:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da348:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da358:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000da368 <fpi.5344>:
   da368:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   da378:	0000 0000                                   ....

000da37c <fpinan.5380>:
   da37c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   da38c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   da39c:	0000 0000                                   ....

000da3a0 <tinytens>:
   da3a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   da3b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   da3c0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   da3d0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   da3e0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   da3f0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   da400:	2575 006e 0000 0000                         u%n.....

000da408 <__mprec_tens>:
   da408:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   da418:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   da428:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   da438:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   da448:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   da458:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   da468:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   da478:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   da488:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   da498:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   da4a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   da4b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   da4c8:	9db4 79d9 7843 44ea                         ...yCx.D

000da4d0 <__mprec_bigtens>:
   da4d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   da4e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   da4f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000da4f8 <p05.5387>:
   da4f8:	0005 0000 0019 0000 007d 0000               ........}...

000da504 <link_const_variable_data_end>:
   da504:	000d4ca9 	.word	0x000d4ca9
   da508:	000d4ec1 	.word	0x000d4ec1
   da50c:	000d5499 	.word	0x000d5499
   da510:	000d5b3d 	.word	0x000d5b3d
   da514:	000d5d3d 	.word	0x000d5d3d
   da518:	000d5e79 	.word	0x000d5e79
   da51c:	000d5ffd 	.word	0x000d5ffd
   da520:	000d60dd 	.word	0x000d60dd
   da524:	000d627d 	.word	0x000d627d
   da528:	000d63a9 	.word	0x000d63a9
   da52c:	000d6639 	.word	0x000d6639
   da530:	000d690d 	.word	0x000d690d
   da534:	000d69d1 	.word	0x000d69d1
   da538:	000d6a55 	.word	0x000d6a55
   da53c:	000d6ad9 	.word	0x000d6ad9
