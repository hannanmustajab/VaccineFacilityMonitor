
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/1.5.2/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000078e0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000db900  000db900  0000b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000db908  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000250  2003df5c  000db90c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000644  2003e1b0  2003e1b0  0002e1b0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dbb5c  000dbb5c  0002bb5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dbb84  000dbb84  0002bb84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ee1cc  00000000  00000000  0002bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000126a5  00000000  00000000  00119d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000220cc  00000000  00000000  0012c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002890  00000000  00000000  0014e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004d88  00000000  00000000  00150d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000366d3  00000000  00000000  00155add  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c7b0  00000000  00000000  0018c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00109ade  00000000  00000000  001b8960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e22c  00000000  00000000  002c2440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd8d 	bl	d8b50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fd92 	bl	d8b66 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df5c 	.word	0x2003df5c
   d404c:	000db90c 	.word	0x000db90c
   d4050:	2003e1ac 	.word	0x2003e1ac
   d4054:	2003e1b0 	.word	0x2003e1b0
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fb57 	bl	d7710 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db8f8 	.word	0x000db8f8
   d4084:	000db8bc 	.word	0x000db8bc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 ba70 	b.w	d556c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f89b 	bl	d51c8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bafd 	b.w	d7694 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b8ed 	b.w	d6278 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b8f3 	b.w	d6288 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b8f1 	b.w	d6288 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   d40b6:	b148      	cbz	r0, d40cc <null_ptr_check+0x16>
   d40b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d40ba:	b13b      	cbz	r3, d40cc <null_ptr_check+0x16>
   d40bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d40be:	b12b      	cbz	r3, d40cc <null_ptr_check+0x16>
   d40c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d40c2:	fab0 f080 	clz	r0, r0
   d40c6:	0940      	lsrs	r0, r0, #5
   d40c8:	4240      	negs	r0, r0
   d40ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   d40cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   d40d0:	4770      	bx	lr

000d40d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d40d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d40d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d40d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   d40d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   d40da:	f7ff ffec 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d40de:	4605      	mov	r5, r0
   d40e0:	bb50      	cbnz	r0, d4138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d40e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
   d40e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
   d40e8:	bf14      	ite	ne
   d40ea:	2300      	movne	r3, #0
   d40ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
   d40ee:	429a      	cmp	r2, r3
   d40f0:	d022      	beq.n	d4138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
   d40f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d40f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   d40f6:	7860      	ldrb	r0, [r4, #1]
   d40f8:	2301      	movs	r3, #1
   d40fa:	f10d 0207 	add.w	r2, sp, #7
   d40fe:	21f3      	movs	r1, #243	; 0xf3
   d4100:	47b0      	blx	r6
   d4102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   d4106:	b110      	cbz	r0, d410e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4108:	f06f 0501 	mvn.w	r5, #1
   d410c:	e014      	b.n	d4138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d410e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   d4112:	7860      	ldrb	r0, [r4, #1]
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   d4114:	f003 0210 	and.w	r2, r3, #16
   d4118:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d411c:	f023 0310 	bic.w	r3, r3, #16
   d4120:	4313      	orrs	r3, r2
   d4122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   d4126:	f10d 0207 	add.w	r2, sp, #7
   d412a:	2301      	movs	r3, #1
   d412c:	2173      	movs	r1, #115	; 0x73
   d412e:	47b0      	blx	r6
   d4130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
   d4134:	2800      	cmp	r0, #0
   d4136:	d1e7      	bne.n	d4108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
   d4138:	4628      	mov	r0, r5
   d413a:	b002      	add	sp, #8
   d413c:	bd70      	pop	{r4, r5, r6, pc}

000d413e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   d413e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4142:	f7ff ffb8 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4146:	4605      	mov	r5, r0
   d4148:	b988      	cbnz	r0, d416e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   d414a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d414c:	7860      	ldrb	r0, [r4, #1]
   d414e:	2301      	movs	r3, #1
   d4150:	f10d 0207 	add.w	r2, sp, #7
   d4154:	21f3      	movs	r1, #243	; 0xf3
   d4156:	47b0      	blx	r6
   d4158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   d415c:	b928      	cbnz	r0, d416a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   d415e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4162:	f003 0310 	and.w	r3, r3, #16
   d4166:	70e3      	strb	r3, [r4, #3]
   d4168:	e001      	b.n	d416e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d416a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
   d416e:	4628      	mov	r0, r5
   d4170:	b002      	add	sp, #8
   d4172:	bd70      	pop	{r4, r5, r6, pc}

000d4174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
   d4174:	b140      	cbz	r0, d4188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   d4176:	7803      	ldrb	r3, [r0, #0]
   d4178:	428b      	cmp	r3, r1
   d417a:	d908      	bls.n	d418e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   d417c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   d417e:	7813      	ldrb	r3, [r2, #0]
   d4180:	f043 0302 	orr.w	r3, r3, #2
   d4184:	7013      	strb	r3, [r2, #0]
   d4186:	e002      	b.n	d418e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   d4188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d418c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
   d418e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
   d4190:	4770      	bx	lr

000d4192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d4192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   d419a:	4688      	mov	r8, r1
   d419c:	4691      	mov	r9, r2
   d419e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d41a0:	f7ff ff89 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d41a4:	4604      	mov	r4, r0
   d41a6:	b9a8      	cbnz	r0, d41d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   d41a8:	78ab      	ldrb	r3, [r5, #2]
   d41aa:	b93b      	cbnz	r3, d41bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   d41ac:	4629      	mov	r1, r5
   d41ae:	4630      	mov	r0, r6
   d41b0:	f7ff ff8f 	bl	d40d2 <set_mem_page>
			if (rslt == BME680_OK)
   d41b4:	4604      	mov	r4, r0
   d41b6:	b908      	cbnz	r0, d41bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   d41b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d41bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
   d41be:	7868      	ldrb	r0, [r5, #1]
   d41c0:	464b      	mov	r3, r9
   d41c2:	4642      	mov	r2, r8
   d41c4:	4631      	mov	r1, r6
   d41c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   d41c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   d41ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
   d41ce:	bf18      	it	ne
   d41d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
   d41d4:	4620      	mov	r0, r4
   d41d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d41da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   d41da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41de:	b08b      	sub	sp, #44	; 0x2c
   d41e0:	461e      	mov	r6, r3
   d41e2:	4683      	mov	fp, r0
   d41e4:	468a      	mov	sl, r1
   d41e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   d41e8:	2100      	movs	r1, #0
   d41ea:	2228      	movs	r2, #40	; 0x28
   d41ec:	4668      	mov	r0, sp
   d41ee:	f004 fcba 	bl	d8b66 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d41f2:	4630      	mov	r0, r6
   d41f4:	f7ff ff5f 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d41f8:	4605      	mov	r5, r0
   d41fa:	bba8      	cbnz	r0, d4268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   d41fc:	1e63      	subs	r3, r4, #1
   d41fe:	2b12      	cmp	r3, #18
   d4200:	d830      	bhi.n	d4264 <bme680_set_regs+0x8a>
   d4202:	f10d 0801 	add.w	r8, sp, #1
   d4206:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   d420a:	465f      	mov	r7, fp
   d420c:	46c1      	mov	r9, r8
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   d420e:	b2a4      	uxth	r4, r4
   d4210:	ebcb 0307 	rsb	r3, fp, r7
   d4214:	b29b      	uxth	r3, r3
   d4216:	429c      	cmp	r4, r3
   d4218:	d913      	bls.n	d4242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
   d421a:	78b3      	ldrb	r3, [r6, #2]
   d421c:	b943      	cbnz	r3, d4230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d421e:	4631      	mov	r1, r6
   d4220:	7838      	ldrb	r0, [r7, #0]
   d4222:	f7ff ff56 	bl	d40d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d4226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   d4228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   d422a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d422e:	e000      	b.n	d4232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   d4230:	783b      	ldrb	r3, [r7, #0]
   d4232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   d4236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   d423a:	f808 3b02 	strb.w	r3, [r8], #2
   d423e:	3701      	adds	r7, #1
   d4240:	e7e6      	b.n	d4210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   d4242:	b98d      	cbnz	r5, d4268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4244:	0063      	lsls	r3, r4, #1
   d4246:	3b01      	subs	r3, #1
   d4248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   d424a:	f89d 1000 	ldrb.w	r1, [sp]
   d424e:	7870      	ldrb	r0, [r6, #1]
   d4250:	b29b      	uxth	r3, r3
   d4252:	464a      	mov	r2, r9
   d4254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d4256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   d4258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
   d425c:	bf18      	it	ne
   d425e:	f06f 0501 	mvnne.w	r5, #1
   d4262:	e001      	b.n	d4268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   d4264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
   d4268:	4628      	mov	r0, r5
   d426a:	b00b      	add	sp, #44	; 0x2c
   d426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d4270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   d4272:	23e0      	movs	r3, #224	; 0xe0
   d4274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d4278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   d427a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   d427c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4280:	f7ff ff19 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4284:	4604      	mov	r4, r0
   d4286:	b9d8      	cbnz	r0, d42c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
   d4288:	78ab      	ldrb	r3, [r5, #2]
   d428a:	b16b      	cbz	r3, d42a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d428c:	462b      	mov	r3, r5
   d428e:	2201      	movs	r2, #1
   d4290:	f10d 0107 	add.w	r1, sp, #7
   d4294:	f10d 0006 	add.w	r0, sp, #6
   d4298:	f7ff ff9f 	bl	d41da <bme680_set_regs>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d429c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   d429e:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   d42a0:	200a      	movs	r0, #10
   d42a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
   d42a4:	b134      	cbz	r4, d42b4 <bme680_soft_reset+0x44>
   d42a6:	e00b      	b.n	d42c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
   d42a8:	4628      	mov	r0, r5
   d42aa:	f7ff ff48 	bl	d413e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
   d42ae:	4604      	mov	r4, r0
   d42b0:	b930      	cbnz	r0, d42c0 <bme680_soft_reset+0x50>
   d42b2:	e7eb      	b.n	d428c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   d42b4:	78ab      	ldrb	r3, [r5, #2]
   d42b6:	b91b      	cbnz	r3, d42c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
   d42b8:	4628      	mov	r0, r5
   d42ba:	f7ff ff40 	bl	d413e <get_mem_page>
   d42be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
   d42c0:	4620      	mov	r0, r4
   d42c2:	b003      	add	sp, #12
   d42c4:	bd30      	pop	{r4, r5, pc}

000d42c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   d42c6:	b530      	push	{r4, r5, lr}
   d42c8:	b08d      	sub	sp, #52	; 0x34
   d42ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d42cc:	f7ff fef3 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d42d0:	4605      	mov	r5, r0
   d42d2:	2800      	cmp	r0, #0
   d42d4:	f040 80d5 	bne.w	d4482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   d42d8:	4620      	mov	r0, r4
   d42da:	f7ff ffc9 	bl	d4270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
   d42de:	4605      	mov	r5, r0
   d42e0:	2800      	cmp	r0, #0
   d42e2:	f040 80ce 	bne.w	d4482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   d42e6:	4623      	mov	r3, r4
   d42e8:	2201      	movs	r2, #1
   d42ea:	4621      	mov	r1, r4
   d42ec:	20d0      	movs	r0, #208	; 0xd0
   d42ee:	f7ff ff50 	bl	d4192 <bme680_get_regs>
			if (rslt == BME680_OK) {
   d42f2:	4605      	mov	r5, r0
   d42f4:	2800      	cmp	r0, #0
   d42f6:	f040 80c4 	bne.w	d4482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
   d42fa:	7823      	ldrb	r3, [r4, #0]
   d42fc:	2b61      	cmp	r3, #97	; 0x61
   d42fe:	f040 80be 	bne.w	d447e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   d4302:	4601      	mov	r1, r0
   d4304:	2229      	movs	r2, #41	; 0x29
   d4306:	a801      	add	r0, sp, #4
   d4308:	f004 fc2d 	bl	d8b66 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d430c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
   d430e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4312:	f7ff fed0 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4316:	4605      	mov	r5, r0
   d4318:	2800      	cmp	r0, #0
   d431a:	f040 80b2 	bne.w	d4482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   d431e:	4623      	mov	r3, r4
   d4320:	2219      	movs	r2, #25
   d4322:	a901      	add	r1, sp, #4
   d4324:	2089      	movs	r0, #137	; 0x89
   d4326:	f7ff ff34 	bl	d4192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   d432a:	4605      	mov	r5, r0
   d432c:	b938      	cbnz	r0, d433e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   d432e:	4623      	mov	r3, r4
   d4330:	2210      	movs	r2, #16
   d4332:	f10d 011d 	add.w	r1, sp, #29
   d4336:	20e1      	movs	r0, #225	; 0xe1
   d4338:	f7ff ff2b 	bl	d4192 <bme680_get_regs>
   d433c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   d433e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   d4342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d434a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   d434c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4350:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d435a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d435e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   d4362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   d4364:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d436c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   d436e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d4372:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d437a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d437c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   d4384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   d4388:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d438c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   d4392:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d4396:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d439a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d439e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   d43a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d43a4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d43a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d43ac:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   d43b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   d43b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d43b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   d43be:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d43c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d43c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d43ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   d43cc:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d43d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   d43d4:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43d8:	f89d 101f 	ldrb.w	r1, [sp, #31]
   d43dc:	f003 020f 	and.w	r2, r3, #15
   d43e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   d43e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   d43e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d43ea:	091b      	lsrs	r3, r3, #4
   d43ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d43f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   d43f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d43f6:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   d43f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d43fc:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   d43fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   d4402:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   d4404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d4408:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   d440a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d440e:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   d4410:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   d4414:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   d4416:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   d441a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d441e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   d4424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   d4428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   d442a:	bb15      	cbnz	r5, d4472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   d442c:	4623      	mov	r3, r4
   d442e:	2201      	movs	r2, #1
   d4430:	f10d 0103 	add.w	r1, sp, #3
   d4434:	2002      	movs	r0, #2
   d4436:	f7ff feac 	bl	d4192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   d443a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d443e:	f3c3 1301 	ubfx	r3, r3, #4, #2
   d4442:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   d4446:	4605      	mov	r5, r0
   d4448:	b998      	cbnz	r0, d4472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   d444a:	4623      	mov	r3, r4
   d444c:	2201      	movs	r2, #1
   d444e:	f10d 0103 	add.w	r1, sp, #3
   d4452:	f7ff fe9e 	bl	d4192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
   d4456:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d445a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   d445e:	4605      	mov	r5, r0
   d4460:	b938      	cbnz	r0, d4472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   d4462:	4623      	mov	r3, r4
   d4464:	2201      	movs	r2, #1
   d4466:	f10d 0103 	add.w	r1, sp, #3
   d446a:	2004      	movs	r0, #4
   d446c:	f7ff fe91 	bl	d4192 <bme680_get_regs>
   d4470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   d4472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   d4476:	111b      	asrs	r3, r3, #4
   d4478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d447c:	e001      	b.n	d4482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   d447e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
   d4482:	4628      	mov	r0, r5
   d4484:	b00d      	add	sp, #52	; 0x34
   d4486:	bd30      	pop	{r4, r5, pc}

000d4488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d4488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d448a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   d448c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   d448e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4492:	f7ff fe10 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4496:	bba0      	cbnz	r0, d4502 <bme680_set_sensor_mode+0x7a>
   d4498:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   d449a:	4623      	mov	r3, r4
   d449c:	2201      	movs	r2, #1
   d449e:	f10d 0106 	add.w	r1, sp, #6
   d44a2:	2074      	movs	r0, #116	; 0x74
   d44a4:	f7ff fe75 	bl	d4192 <bme680_get_regs>
			if (rslt == BME680_OK) {
   d44a8:	b9a0      	cbnz	r0, d44d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   d44aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
   d44ae:	f013 0503 	ands.w	r5, r3, #3
   d44b2:	d011      	beq.n	d44d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   d44b4:	f023 0303 	bic.w	r3, r3, #3
   d44b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d44bc:	2201      	movs	r2, #1
   d44be:	4623      	mov	r3, r4
   d44c0:	f10d 0106 	add.w	r1, sp, #6
   d44c4:	f10d 0007 	add.w	r0, sp, #7
   d44c8:	f7ff fe87 	bl	d41da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   d44cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d44ce:	200a      	movs	r0, #10
   d44d0:	4798      	blx	r3
   d44d2:	e7e2      	b.n	d449a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   d44d4:	2d00      	cmp	r5, #0
   d44d6:	d1e0      	bne.n	d449a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   d44d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   d44dc:	b18b      	cbz	r3, d4502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   d44de:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d44e2:	f003 0303 	and.w	r3, r3, #3
   d44e6:	f022 0203 	bic.w	r2, r2, #3
   d44ea:	4313      	orrs	r3, r2
   d44ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   d44f0:	b938      	cbnz	r0, d4502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   d44f2:	4623      	mov	r3, r4
   d44f4:	2201      	movs	r2, #1
   d44f6:	f10d 0106 	add.w	r1, sp, #6
   d44fa:	f10d 0007 	add.w	r0, sp, #7
   d44fe:	f7ff fe6c 	bl	d41da <bme680_set_regs>
		}
	}

	return rslt;
}
   d4502:	b003      	add	sp, #12
   d4504:	bd30      	pop	{r4, r5, pc}

000d4506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d450a:	b088      	sub	sp, #32
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d450c:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d450e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   d4512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   d4514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d4518:	9304      	str	r3, [sp, #16]
   d451a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   d451e:	9306      	str	r3, [sp, #24]
   d4520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4524:	f7ff fdc7 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4528:	2800      	cmp	r0, #0
   d452a:	f040 8166 	bne.w	d47fa <bme680_set_sensor_settings+0x2f4>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d452e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   d4530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
   d4534:	d56c      	bpl.n	d4610 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
   d4538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   d453c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
   d4540:	d165      	bne.n	d460e <bme680_set_sensor_settings+0x108>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d4542:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d4546:	235a      	movs	r3, #90	; 0x5a
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d4548:	2dc7      	cmp	r5, #199	; 0xc7

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   d454a:	f88d 3008 	strb.w	r3, [sp, #8]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
   d454e:	d905      	bls.n	d455c <bme680_set_sensor_settings+0x56>
   d4550:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   d4554:	bf28      	it	cs
   d4556:	f44f 75c8 	movcs.w	r5, #400	; 0x190
   d455a:	e000      	b.n	d455e <bme680_set_sensor_settings+0x58>
		temp = 200;
   d455c:	25c8      	movs	r5, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d455e:	f9b4 e012 	ldrsh.w	lr, [r4, #18]
   d4562:	f994 2011 	ldrsb.w	r2, [r4, #17]
	if (temp < 200) /* Cap temperature */
		temp = 200;
	else if (temp > 400)
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   d4566:	f994 3004 	ldrsb.w	r3, [r4, #4]
   d456a:	f994 0014 	ldrsb.w	r0, [r4, #20]
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   d456e:	f50e 3e16 	add.w	lr, lr, #153600	; 0x25800
   d4572:	f20e 1e99 	addw	lr, lr, #409	; 0x199
   d4576:	f502 7244 	add.w	r2, r2, #784	; 0x310
   d457a:	2114      	movs	r1, #20
   d457c:	fb13 f000 	smulbb	r0, r3, r0
   d4580:	fb05 f50e 	mul.w	r5, r5, lr
   d4584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4588:	fb95 f5f1 	sdiv	r5, r5, r1
   d458c:	fb90 f3f3 	sdiv	r3, r0, r3
   d4590:	210a      	movs	r1, #10
   d4592:	021b      	lsls	r3, r3, #8
   d4594:	f505 1548 	add.w	r5, r5, #3276800	; 0x320000
   d4598:	fb95 f5f1 	sdiv	r5, r5, r1
   d459c:	436a      	muls	r2, r5
   d459e:	eb03 0162 	add.w	r1, r3, r2, asr #1
   d45a2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   d45a6:	3304      	adds	r3, #4
   d45a8:	fb91 f2f3 	sdiv	r2, r1, r3
   d45ac:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
   d45b0:	2383      	movs	r3, #131	; 0x83
   d45b2:	434b      	muls	r3, r1
   d45b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   d45b8:	fb92 f3f3 	sdiv	r3, r2, r3
   d45bc:	2222      	movs	r2, #34	; 0x22
   d45be:	3bfa      	subs	r3, #250	; 0xfa
   d45c0:	4353      	muls	r3, r2
   d45c2:	3332      	adds	r3, #50	; 0x32
   d45c4:	2264      	movs	r2, #100	; 0x64
   d45c6:	fb93 f3f2 	sdiv	r3, r3, r2
   d45ca:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d45ce:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   d45d2:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   d45d6:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   d45da:	d20b      	bcs.n	d45f4 <bme680_set_sensor_settings+0xee>
   d45dc:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   d45de:	2b3f      	cmp	r3, #63	; 0x3f
   d45e0:	b2d1      	uxtb	r1, r2
   d45e2:	f102 0201 	add.w	r2, r2, #1
   d45e6:	d901      	bls.n	d45ec <bme680_set_sensor_settings+0xe6>
			dur = dur / 4;
   d45e8:	089b      	lsrs	r3, r3, #2
   d45ea:	e7f8      	b.n	d45de <bme680_set_sensor_settings+0xd8>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   d45ec:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   d45f0:	b2db      	uxtb	r3, r3
   d45f2:	e000      	b.n	d45f6 <bme680_set_sensor_settings+0xf0>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
   d45f4:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   d45f6:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   d45fa:	2300      	movs	r3, #0
   d45fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   d4600:	2202      	movs	r2, #2
   d4602:	4623      	mov	r3, r4
   d4604:	a903      	add	r1, sp, #12
   d4606:	a802      	add	r0, sp, #8
   d4608:	f7ff fde7 	bl	d41da <bme680_set_regs>
   d460c:	e000      	b.n	d4610 <bme680_set_sensor_settings+0x10a>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   d460e:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   d4610:	2300      	movs	r3, #0
   d4612:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   d4616:	b910      	cbnz	r0, d461e <bme680_set_sensor_settings+0x118>
			rslt = bme680_set_sensor_mode(dev);
   d4618:	4620      	mov	r0, r4
   d461a:	f7ff ff35 	bl	d4488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   d461e:	f006 0510 	and.w	r5, r6, #16
   d4622:	b2ad      	uxth	r5, r5
   d4624:	b305      	cbz	r5, d4668 <bme680_set_sensor_settings+0x162>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   d4626:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d462a:	2107      	movs	r1, #7
   d462c:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   d4630:	f7ff fda0 	bl	d4174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
   d4634:	b930      	cbnz	r0, d4644 <bme680_set_sensor_settings+0x13e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4636:	4623      	mov	r3, r4
   d4638:	2201      	movs	r2, #1
   d463a:	f10d 0107 	add.w	r1, sp, #7
   d463e:	2075      	movs	r0, #117	; 0x75
   d4640:	f7ff fda7 	bl	d4192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d4644:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   d4648:	009b      	lsls	r3, r3, #2
   d464a:	f003 021c 	and.w	r2, r3, #28
   d464e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4652:	f023 031c 	bic.w	r3, r3, #28
   d4656:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d4658:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   d465a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d465e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   d4662:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
   d4666:	2501      	movs	r5, #1
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   d4668:	06b3      	lsls	r3, r6, #26
   d466a:	d522      	bpl.n	d46b2 <bme680_set_sensor_settings+0x1ac>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   d466c:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4670:	2108      	movs	r1, #8
   d4672:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   d4676:	f7ff fd7d 	bl	d4174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
   d467a:	b930      	cbnz	r0, d468a <bme680_set_sensor_settings+0x184>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d467c:	4623      	mov	r3, r4
   d467e:	2201      	movs	r2, #1
   d4680:	f10d 0107 	add.w	r1, sp, #7
   d4684:	2070      	movs	r0, #112	; 0x70
   d4686:	f7ff fd84 	bl	d4192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d468a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d468e:	f023 0208 	bic.w	r2, r3, #8
   d4692:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   d4696:	f003 0308 	and.w	r3, r3, #8
   d469a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d469c:	aa08      	add	r2, sp, #32
   d469e:	442a      	add	r2, r5
   d46a0:	2170      	movs	r1, #112	; 0x70
			data_array[count] = data;
			count++;
   d46a2:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   d46a4:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d46a8:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d46ac:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d46b0:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   d46b2:	07b1      	lsls	r1, r6, #30
   d46b4:	d033      	beq.n	d471e <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   d46b6:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d46ba:	2105      	movs	r1, #5
   d46bc:	f104 0039 	add.w	r0, r4, #57	; 0x39
   d46c0:	f7ff fd58 	bl	d4174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
   d46c4:	b930      	cbnz	r0, d46d4 <bme680_set_sensor_settings+0x1ce>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d46c6:	4623      	mov	r3, r4
   d46c8:	2201      	movs	r2, #1
   d46ca:	f10d 0107 	add.w	r1, sp, #7
   d46ce:	2074      	movs	r0, #116	; 0x74
   d46d0:	f7ff fd5f 	bl	d4192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
   d46d4:	07f2      	lsls	r2, r6, #31
   d46d6:	d509      	bpl.n	d46ec <bme680_set_sensor_settings+0x1e6>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   d46d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d46dc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   d46e0:	f003 031f 	and.w	r3, r3, #31
   d46e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46e8:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
   d46ec:	07b3      	lsls	r3, r6, #30
   d46ee:	d50b      	bpl.n	d4708 <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   d46f0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   d46f4:	009b      	lsls	r3, r3, #2
   d46f6:	f003 021c 	and.w	r2, r3, #28
   d46fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d46fe:	f023 031c 	bic.w	r3, r3, #28
   d4702:	4313      	orrs	r3, r2
   d4704:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
   d4708:	ab08      	add	r3, sp, #32
   d470a:	442b      	add	r3, r5
   d470c:	2274      	movs	r2, #116	; 0x74
   d470e:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d4712:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
   d4714:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4718:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d471c:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   d471e:	0771      	lsls	r1, r6, #29
   d4720:	d522      	bpl.n	d4768 <bme680_set_sensor_settings+0x262>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   d4722:	f104 0246 	add.w	r2, r4, #70	; 0x46
   d4726:	2105      	movs	r1, #5
   d4728:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d472c:	f7ff fd22 	bl	d4174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
   d4730:	b930      	cbnz	r0, d4740 <bme680_set_sensor_settings+0x23a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d4732:	4623      	mov	r3, r4
   d4734:	2201      	movs	r2, #1
   d4736:	f10d 0107 	add.w	r1, sp, #7
   d473a:	2072      	movs	r0, #114	; 0x72
   d473c:	f7ff fd29 	bl	d4192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d4740:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4744:	f023 0207 	bic.w	r2, r3, #7
   d4748:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d474c:	f003 0307 	and.w	r3, r3, #7
   d4750:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
   d4752:	aa08      	add	r2, sp, #32
   d4754:	442a      	add	r2, r5
   d4756:	2172      	movs	r1, #114	; 0x72
			data_array[count] = data;
			count++;
   d4758:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   d475a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d475e:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   d4762:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   d4766:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   d4768:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   d476c:	d03c      	beq.n	d47e8 <bme680_set_sensor_settings+0x2e2>
   d476e:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   d4772:	4642      	mov	r2, r8
   d4774:	2101      	movs	r1, #1
   d4776:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   d477a:	f7ff fcfb 	bl	d4174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   d477e:	b968      	cbnz	r0, d479c <bme680_set_sensor_settings+0x296>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   d4780:	4642      	mov	r2, r8
   d4782:	210a      	movs	r1, #10
   d4784:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4788:	f7ff fcf4 	bl	d4174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
   d478c:	b930      	cbnz	r0, d479c <bme680_set_sensor_settings+0x296>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   d478e:	4623      	mov	r3, r4
   d4790:	2201      	movs	r2, #1
   d4792:	f10d 0107 	add.w	r1, sp, #7
   d4796:	2071      	movs	r0, #113	; 0x71
   d4798:	f7ff fcfb 	bl	d4192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
   d479c:	0672      	lsls	r2, r6, #25
   d479e:	d50b      	bpl.n	d47b8 <bme680_set_sensor_settings+0x2b2>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   d47a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   d47a4:	011b      	lsls	r3, r3, #4
   d47a6:	f003 0210 	and.w	r2, r3, #16
   d47aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d47ae:	f023 0310 	bic.w	r3, r3, #16
   d47b2:	4313      	orrs	r3, r2
   d47b4:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
   d47b8:	0633      	lsls	r3, r6, #24
   d47ba:	d50a      	bpl.n	d47d2 <bme680_set_sensor_settings+0x2cc>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   d47bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d47c0:	f023 020f 	bic.w	r2, r3, #15
   d47c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d47c8:	f003 030f 	and.w	r3, r3, #15
   d47cc:	4313      	orrs	r3, r2
   d47ce:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
   d47d2:	ab08      	add	r3, sp, #32
   d47d4:	442b      	add	r3, r5
   d47d6:	2271      	movs	r2, #113	; 0x71
   d47d8:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
			count++;
   d47dc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
   d47de:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d47e2:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   d47e6:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
   d47e8:	b928      	cbnz	r0, d47f6 <bme680_set_sensor_settings+0x2f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   d47ea:	4623      	mov	r3, r4
   d47ec:	462a      	mov	r2, r5
   d47ee:	a906      	add	r1, sp, #24
   d47f0:	a804      	add	r0, sp, #16
   d47f2:	f7ff fcf2 	bl	d41da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   d47f6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
   d47fa:	b008      	add	sp, #32
   d47fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4800 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d4800:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d4802:	4b18      	ldr	r3, [pc, #96]	; (d4864 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   d4804:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d4806:	6818      	ldr	r0, [r3, #0]
   d4808:	889b      	ldrh	r3, [r3, #4]
   d480a:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d480e:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   d4812:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d4814:	aa02      	add	r2, sp, #8
   d4816:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d4818:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   d481c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   d4820:	a802      	add	r0, sp, #8
   d4822:	4402      	add	r2, r0
   d4824:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d4828:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   d482a:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   d482e:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   d4830:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   d4834:	4413      	add	r3, r2
   d4836:	f240 72ab 	movw	r2, #1963	; 0x7ab
   d483a:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d483c:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d4840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   d4844:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   d4846:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
   d484a:	3301      	adds	r3, #1
   d484c:	b29b      	uxth	r3, r3
   d484e:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   d4850:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   d4854:	b11a      	cbz	r2, d485e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   d4856:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   d485a:	4413      	add	r3, r2
   d485c:	8023      	strh	r3, [r4, #0]
	}
}
   d485e:	b002      	add	sp, #8
   d4860:	bd10      	pop	{r4, pc}
   d4862:	bf00      	nop
   d4864:	000daf70 	.word	0x000daf70

000d4868 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d4868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d486c:	4680      	mov	r8, r0
   d486e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4870:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   d4872:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d4874:	f7ff fc1f 	bl	d40b6 <null_ptr_check>
	if (rslt == BME680_OK) {
   d4878:	4605      	mov	r5, r0
   d487a:	2800      	cmp	r0, #0
   d487c:	f040 8167 	bne.w	d4b4e <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   d4880:	af04      	add	r7, sp, #16
   d4882:	4601      	mov	r1, r0
   d4884:	220f      	movs	r2, #15
   d4886:	4638      	mov	r0, r7
   d4888:	f004 f96d 	bl	d8b66 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff fc12 	bl	d40b6 <null_ptr_check>
   d4892:	260a      	movs	r6, #10
   d4894:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   d4896:	2d00      	cmp	r5, #0
   d4898:	f040 8153 	bne.w	d4b42 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   d489c:	4623      	mov	r3, r4
   d489e:	220f      	movs	r2, #15
   d48a0:	4639      	mov	r1, r7
   d48a2:	201d      	movs	r0, #29
   d48a4:	f7ff fc75 	bl	d4192 <bme680_get_regs>
   d48a8:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   d48aa:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48ae:	f89d e01e 	ldrb.w	lr, [sp, #30]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d48b2:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   d48b6:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   d48ba:	f89d b015 	ldrb.w	fp, [sp, #21]
   d48be:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   d48c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   d48c6:	f000 030f 	and.w	r3, r0, #15
   d48ca:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
   d48ce:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d48d2:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   d48d6:	f89d 3012 	ldrb.w	r3, [sp, #18]
   d48da:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   d48dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d48e6:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   d48e8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d48ec:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   d48ee:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d48f2:	f003 0a20 	and.w	sl, r3, #32
   d48f6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
   d48fa:	ea40 000a 	orr.w	r0, r0, sl
   d48fe:	f003 0310 	and.w	r3, r3, #16
   d4902:	4318      	orrs	r0, r3
   d4904:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
   d4906:	2800      	cmp	r0, #0
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   d4908:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
   d490c:	f280 8116 	bge.w	d4b3c <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d4910:	0912      	lsrs	r2, r2, #4
   d4912:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   d4916:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
   d491a:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   d491c:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   d4920:	0049      	lsls	r1, r1, #1
   d4922:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   d4926:	460a      	mov	r2, r1
   d4928:	17cb      	asrs	r3, r1, #31
   d492a:	105b      	asrs	r3, r3, #1
   d492c:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d4930:	fb02 f603 	mul.w	r6, r2, r3
   d4934:	fba2 2302 	umull	r2, r3, r2, r2
   d4938:	ea4f 3a12 	mov.w	sl, r2, lsr #12
   d493c:	f994 201a 	ldrsb.w	r2, [r4, #26]
   d4940:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   d4944:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
   d4948:	ea4f 3b23 	mov.w	fp, r3, asr #12
   d494c:	0113      	lsls	r3, r2, #4
   d494e:	17df      	asrs	r7, r3, #31
   d4950:	fb0a f607 	mul.w	r6, sl, r7
   d4954:	fb03 660b 	mla	r6, r3, fp, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d4958:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   d495c:	fbaa 2303 	umull	r2, r3, sl, r3
   d4960:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
   d4962:	0ac0      	lsrs	r0, r0, #11
   d4964:	0b92      	lsrs	r2, r2, #14
   d4966:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   d496a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
   d496e:	1883      	adds	r3, r0, r2
   d4970:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
   d4972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4976:	3380      	adds	r3, #128	; 0x80
   d4978:	121b      	asrs	r3, r3, #8
   d497a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d497e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d4980:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   d4984:	105b      	asrs	r3, r3, #1
   d4986:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   d498a:	109a      	asrs	r2, r3, #2
   d498c:	4352      	muls	r2, r2
   d498e:	12d1      	asrs	r1, r2, #11
   d4990:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   d4992:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
   d4996:	4359      	muls	r1, r3
   d4998:	0049      	lsls	r1, r1, #1
   d499a:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   d499e:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
   d49a2:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   d49a4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d49a8:	1352      	asrs	r2, r2, #13
   d49aa:	0140      	lsls	r0, r0, #5
   d49ac:	4342      	muls	r2, r0
   d49ae:	10d2      	asrs	r2, r2, #3
   d49b0:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49b4:	149b      	asrs	r3, r3, #18
   d49b6:	8ba2      	ldrh	r2, [r4, #28]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d49b8:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   d49bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d49c0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
   d49c2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   d49c6:	9a00      	ldr	r2, [sp, #0]
   d49c8:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
   d49cc:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
   d49d0:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
   d49d4:	0412      	lsls	r2, r2, #16
   d49d6:	eb02 01a1 	add.w	r1, r2, r1, asr #2
   d49da:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
   d49de:	f640 4235 	movw	r2, #3125	; 0xc35
   d49e2:	eba9 3121 	sub.w	r1, r9, r1, asr #12
   d49e6:	4351      	muls	r1, r2
   d49e8:	13db      	asrs	r3, r3, #15
   d49ea:	fbb1 f3f3 	udiv	r3, r1, r3
   d49ee:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
   d49f0:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d49f2:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d49f6:	4349      	muls	r1, r1
   d49f8:	1349      	asrs	r1, r1, #13
   d49fa:	434a      	muls	r2, r1
   d49fc:	1099      	asrs	r1, r3, #2
   d49fe:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   d4a00:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   d4a02:	1349      	asrs	r1, r1, #13
   d4a04:	eb01 3122 	add.w	r1, r1, r2, asr #12
   d4a08:	fb06 f206 	mul.w	r2, r6, r6
   d4a0c:	4356      	muls	r6, r2
   d4a0e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   d4a12:	4372      	muls	r2, r6
   d4a14:	eb01 4262 	add.w	r2, r1, r2, asr #17
   d4a18:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
   d4a1c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   d4a20:	eb03 1322 	add.w	r3, r3, r2, asr #4
   d4a24:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d4a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d4a2a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   d4a2e:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d4a32:	8967      	ldrh	r7, [r4, #10]
   d4a34:	8926      	ldrh	r6, [r4, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   d4a36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4a3a:	3380      	adds	r3, #128	; 0x80
   d4a3c:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
   d4a3e:	2264      	movs	r2, #100	; 0x64
   d4a40:	4359      	muls	r1, r3
   d4a42:	fb91 f1f2 	sdiv	r1, r1, r2
   d4a46:	4359      	muls	r1, r3
   d4a48:	4358      	muls	r0, r3
   d4a4a:	1189      	asrs	r1, r1, #6
   d4a4c:	fb90 f0f2 	sdiv	r0, r0, r2
   d4a50:	fb91 f1f2 	sdiv	r1, r1, r2
   d4a54:	4401      	add	r1, r0
   d4a56:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
   d4a5a:	4379      	muls	r1, r7
   d4a5c:	128f      	asrs	r7, r1, #10
   d4a5e:	9801      	ldr	r0, [sp, #4]
   d4a60:	9902      	ldr	r1, [sp, #8]
   d4a62:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   d4a66:	f994 100c 	ldrsb.w	r1, [r4, #12]
   d4a6a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
   d4a6e:	4359      	muls	r1, r3
   d4a70:	fb91 f1f2 	sdiv	r1, r1, r2
   d4a74:	eba6 0061 	sub.w	r0, r6, r1, asr #1
   d4a78:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   d4a7c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a80:	4343      	muls	r3, r0
   d4a82:	fb93 f2f2 	sdiv	r2, r3, r2
   d4a86:	7be3      	ldrb	r3, [r4, #15]
   d4a88:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   d4a8c:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   d4a8e:	435b      	muls	r3, r3
   d4a90:	1112      	asrs	r2, r2, #4
   d4a92:	129b      	asrs	r3, r3, #10
   d4a94:	4353      	muls	r3, r2
   d4a96:	eb01 0363 	add.w	r3, r1, r3, asr #1
   d4a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4a9e:	129b      	asrs	r3, r3, #10
   d4aa0:	4353      	muls	r3, r2
   d4aa2:	131b      	asrs	r3, r3, #12
   d4aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
   d4aa8:	4a2b      	ldr	r2, [pc, #172]	; (d4b58 <bme680_get_sensor_data+0x2f0>)
   d4aaa:	4293      	cmp	r3, r2
   d4aac:	bfd4      	ite	le
   d4aae:	f8c8 300c 	strle.w	r3, [r8, #12]
   d4ab2:	f8c8 200c 	strgt.w	r2, [r8, #12]
   d4ab6:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4aba:	2205      	movs	r2, #5
   d4abc:	f240 503c 	movw	r0, #1340	; 0x53c
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
   d4ac6:	f00e 060f 	and.w	r6, lr, #15
   d4aca:	4b24      	ldr	r3, [pc, #144]	; (d4b5c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   d4acc:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
   d4ad0:	fba0 2307 	umull	r2, r3, r0, r7
   d4ad4:	fb07 3301 	mla	r3, r7, r1, r3
   d4ad8:	0c10      	lsrs	r0, r2, #16
   d4ada:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   d4ade:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4ae0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   d4ae2:	4f1f      	ldr	r7, [pc, #124]	; (d4b60 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4ae4:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
   d4ae8:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
   d4aec:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d4af0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4af4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   d4af8:	f04f 0300 	mov.w	r3, #0

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d4afc:	fbae 6700 	umull	r6, r7, lr, r0
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   d4b00:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   d4b04:	1812      	adds	r2, r2, r0
   d4b06:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   d4b08:	fb0e 7701 	mla	r7, lr, r1, r7
   d4b0c:	0a70      	lsrs	r0, r6, #9
   d4b0e:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   d4b12:	1279      	asrs	r1, r7, #9
   d4b14:	105f      	asrs	r7, r3, #1
   d4b16:	ea4f 0632 	mov.w	r6, r2, rrx
   d4b1a:	1980      	adds	r0, r0, r6
   d4b1c:	4179      	adcs	r1, r7
   d4b1e:	f003 fd41 	bl	d85a4 <__aeabi_ldivmod>
   d4b22:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
   d4b26:	b995      	cbnz	r5, d4b4e <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
   d4b28:	f998 3000 	ldrsb.w	r3, [r8]
   d4b2c:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
   d4b2e:	bfba      	itte	lt
   d4b30:	2301      	movlt	r3, #1
   d4b32:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
   d4b36:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
   d4b3a:	e008      	b.n	d4b4e <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   d4b3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4b3e:	200a      	movs	r0, #10
   d4b40:	4798      	blx	r3
   d4b42:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
   d4b44:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4b48:	f47f aea5 	bne.w	d4896 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   d4b4c:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
   d4b4e:	4628      	mov	r0, r5
   d4b50:	b009      	add	sp, #36	; 0x24
   d4b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b56:	bf00      	nop
   d4b58:	000186a0 	.word	0x000186a0
   d4b5c:	2003df5c 	.word	0x2003df5c
   d4b60:	2003df9c 	.word	0x2003df9c

000d4b64 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d4b64:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4b66:	4904      	ldr	r1, [pc, #16]	; (d4b78 <_Z10measureNow6String+0x14>)
   d4b68:	f002 fb8f 	bl	d728a <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d4b6c:	b118      	cbz	r0, d4b76 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d4b6e:	4b03      	ldr	r3, [pc, #12]	; (d4b7c <_Z10measureNow6String+0x18>)
   d4b70:	2203      	movs	r2, #3
   d4b72:	701a      	strb	r2, [r3, #0]
    return 1;
   d4b74:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	000db392 	.word	0x000db392
   d4b7c:	2003e240 	.word	0x2003e240

000d4b80 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b80:	b510      	push	{r4, lr}
   d4b82:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4b84:	6800      	ldr	r0, [r0, #0]
   d4b86:	b108      	cbz	r0, d4b8c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4b88:	f001 fb7e 	bl	d6288 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	bd10      	pop	{r4, pc}

000d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4b92:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4b96:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4b98:	f88d 3000 	strb.w	r3, [sp]
   d4b9c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4b9e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ba0:	f001 fdb0 	bl	d6704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4ba4:	4628      	mov	r0, r5
   d4ba6:	b003      	add	sp, #12
   d4ba8:	bd30      	pop	{r4, r5, pc}
	...

000d4bac <_Z17connectToParticlev>:
  return 1;
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4bac:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4bb0:	f001 fad2 	bl	d6158 <spark_cloud_flag_connect>
   d4bb4:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4bb8:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4bbc:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4bbe:	2000      	movs	r0, #0
   d4bc0:	f001 f906 	bl	d5dd0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4bc4:	f04f 0900 	mov.w	r9, #0
   d4bc8:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4bca:	2000      	movs	r0, #0
   d4bcc:	f001 f900 	bl	d5dd0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4bd0:	ebb0 0008 	subs.w	r0, r0, r8
   d4bd4:	eb61 0109 	sbc.w	r1, r1, r9
   d4bd8:	428f      	cmp	r7, r1
   d4bda:	bf08      	it	eq
   d4bdc:	4286      	cmpeq	r6, r0
   d4bde:	d305      	bcc.n	d4bec <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4be0:	f001 fac2 	bl	d6168 <spark_cloud_flag_connected>
   d4be4:	b910      	cbnz	r0, d4bec <_Z17connectToParticlev+0x40>
            spark_process();
   d4be6:	f001 faaf 	bl	d6148 <spark_process>
   d4bea:	e7ee      	b.n	d4bca <_Z17connectToParticlev+0x1e>
   d4bec:	f001 fabc 	bl	d6168 <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4bf0:	b118      	cbz	r0, d4bfa <_Z17connectToParticlev+0x4e>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4bf2:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d4bf6:	f001 bab7 	b.w	d6168 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4bfa:	f001 f8b1 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4bfe:	4b03      	ldr	r3, [pc, #12]	; (d4c0c <_Z17connectToParticlev+0x60>)
   d4c00:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4c02:	f001 faa1 	bl	d6148 <spark_process>

// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4c06:	3c01      	subs	r4, #1
   d4c08:	d0f3      	beq.n	d4bf2 <_Z17connectToParticlev+0x46>
   d4c0a:	e7d8      	b.n	d4bbe <_Z17connectToParticlev+0x12>
   d4c0c:	2003e704 	.word	0x2003e704

000d4c10 <_Z8BlinkLEDi>:
bool notConnected() {
  return !Particle.connected();                             // This is a requirement to use waitFor
}

// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
   d4c10:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d4c12:	b284      	uxth	r4, r0
   d4c14:	2101      	movs	r1, #1
   d4c16:	4620      	mov	r0, r4
   d4c18:	f002 fded 	bl	d77f6 <digitalWrite>
  delay(1000);
   d4c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c20:	f001 fb62 	bl	d62e8 <delay>
  digitalWrite(LED,LOW);
   d4c24:	4620      	mov	r0, r4
   d4c26:	2100      	movs	r1, #0
   d4c28:	f002 fde5 	bl	d77f6 <digitalWrite>
  delay(1000);
   d4c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
  digitalWrite(LED,HIGH);
  delay(1000);
  digitalWrite(LED,LOW);
  delay(1000);
   d4c34:	f001 bb58 	b.w	d62e8 <delay>

000d4c38 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d4c38:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c3a:	f001 f891 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d4c3e:	4b04      	ldr	r3, [pc, #16]	; (d4c50 <_Z20meterParticlePublishv+0x18>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d4c44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4c48:	bf34      	ite	cc
   d4c4a:	2000      	movcc	r0, #0
   d4c4c:	2001      	movcs	r0, #1
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	2003e340 	.word	0x2003e340

000d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4c54:	b508      	push	{r3, lr}
}

int setLowerHumidityLimit(String value)
{
  sensor_data.lowerHumidityThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
   d4c56:	f7ff ffef 	bl	d4c38 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4c5a:	b118      	cbz	r0, d4c64 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4c60:	f7ff bfea 	b.w	d4c38 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4c64:	f001 fa70 	bl	d6148 <spark_process>
   d4c68:	e7f5      	b.n	d4c56 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29+0x2>
	...

000d4c6c <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d4c6c:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d4c6e:	4c15      	ldr	r4, [pc, #84]	; (d4cc4 <_Z20updateThresholdValuev+0x58>)
   d4c70:	6a20      	ldr	r0, [r4, #32]
   d4c72:	f003 f911 	bl	d7e98 <__aeabi_f2d>
   d4c76:	4a14      	ldr	r2, [pc, #80]	; (d4cc8 <_Z20updateThresholdValuev+0x5c>)
   d4c78:	e9cd 0100 	strd	r0, r1, [sp]
   d4c7c:	2118      	movs	r1, #24
   d4c7e:	4813      	ldr	r0, [pc, #76]	; (d4ccc <_Z20updateThresholdValuev+0x60>)
   d4c80:	f001 fb1a 	bl	d62b8 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d4c84:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4c86:	f003 f907 	bl	d7e98 <__aeabi_f2d>
   d4c8a:	4a11      	ldr	r2, [pc, #68]	; (d4cd0 <_Z20updateThresholdValuev+0x64>)
   d4c8c:	e9cd 0100 	strd	r0, r1, [sp]
   d4c90:	2118      	movs	r1, #24
   d4c92:	4810      	ldr	r0, [pc, #64]	; (d4cd4 <_Z20updateThresholdValuev+0x68>)
   d4c94:	f001 fb10 	bl	d62b8 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d4c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4c9a:	f003 f8fd 	bl	d7e98 <__aeabi_f2d>
   d4c9e:	4a0e      	ldr	r2, [pc, #56]	; (d4cd8 <_Z20updateThresholdValuev+0x6c>)
   d4ca0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ca4:	2118      	movs	r1, #24
   d4ca6:	480d      	ldr	r0, [pc, #52]	; (d4cdc <_Z20updateThresholdValuev+0x70>)
   d4ca8:	f001 fb06 	bl	d62b8 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4cac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4cae:	f003 f8f3 	bl	d7e98 <__aeabi_f2d>
   d4cb2:	4a0b      	ldr	r2, [pc, #44]	; (d4ce0 <_Z20updateThresholdValuev+0x74>)
   d4cb4:	e9cd 0100 	strd	r0, r1, [sp]
   d4cb8:	2118      	movs	r1, #24
   d4cba:	480a      	ldr	r0, [pc, #40]	; (d4ce4 <_Z20updateThresholdValuev+0x78>)
   d4cbc:	f001 fafc 	bl	d62b8 <snprintf>
   d4cc0:	b002      	add	sp, #8
   d4cc2:	bd10      	pop	{r4, pc}
   d4cc4:	2003e248 	.word	0x2003e248
   d4cc8:	000dafb6 	.word	0x000dafb6
   d4ccc:	2003e208 	.word	0x2003e208
   d4cd0:	000dafc7 	.word	0x000dafc7
   d4cd4:	2003e1e8 	.word	0x2003e1e8
   d4cd8:	000dafd8 	.word	0x000dafd8
   d4cdc:	2003e228 	.word	0x2003e228
   d4ce0:	000dafec 	.word	0x000dafec
   d4ce4:	2003e1b4 	.word	0x2003e1b4

000d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4ce8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4cea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4cec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4cee:	b17c      	cbz	r4, d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4cf0:	6863      	ldr	r3, [r4, #4]
   d4cf2:	3b01      	subs	r3, #1
   d4cf4:	6063      	str	r3, [r4, #4]
   d4cf6:	b95b      	cbnz	r3, d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4cf8:	6823      	ldr	r3, [r4, #0]
   d4cfa:	4620      	mov	r0, r4
   d4cfc:	689b      	ldr	r3, [r3, #8]
   d4cfe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d00:	68a3      	ldr	r3, [r4, #8]
   d4d02:	3b01      	subs	r3, #1
   d4d04:	60a3      	str	r3, [r4, #8]
   d4d06:	b91b      	cbnz	r3, d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4d08:	6823      	ldr	r3, [r4, #0]
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	68db      	ldr	r3, [r3, #12]
   d4d0e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4d10:	4628      	mov	r0, r5
   d4d12:	bd38      	pop	{r3, r4, r5, pc}

000d4d14 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d4d14:	b530      	push	{r4, r5, lr}
   d4d16:	2408      	movs	r4, #8
   d4d18:	b0c7      	sub	sp, #284	; 0x11c
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4d1a:	4d1f      	ldr	r5, [pc, #124]	; (d4d98 <_Z9sendEventv+0x84>)
  char data[256];           
   for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4d1c:	f002 fd98 	bl	d7850 <_Z21__fetch_global_EEPROMv>
   d4d20:	4620      	mov	r0, r4
   d4d22:	2230      	movs	r2, #48	; 0x30
   d4d24:	4629      	mov	r1, r5
   d4d26:	3464      	adds	r4, #100	; 0x64
   d4d28:	f001 f83a 	bl	d5da0 <HAL_EEPROM_Get>
}

void sendEvent()
{
  char data[256];           
   for (int i = 0; i < 4; i++) {
   d4d2c:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d4d30:	d1f3      	bne.n	d4d1a <_Z9sendEventv+0x6>
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }          
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d4d32:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d4d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4d3a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d4d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d42:	e9cd 2300 	strd	r2, r3, [sp]
   d4d46:	a806      	add	r0, sp, #24
   d4d48:	4a14      	ldr	r2, [pc, #80]	; (d4d9c <_Z9sendEventv+0x88>)
  Particle.publish("storage-facility-hook", data, PRIVATE);
  currentCountTime = Time.now();
   d4d4a:	4c15      	ldr	r4, [pc, #84]	; (d4da0 <_Z9sendEventv+0x8c>)
{
  char data[256];           
   for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }          
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Pressure\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d4d4c:	f001 fab4 	bl	d62b8 <snprintf>
   d4d50:	4b14      	ldr	r3, [pc, #80]	; (d4da4 <_Z9sendEventv+0x90>)
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d4d52:	4915      	ldr	r1, [pc, #84]	; (d4da8 <_Z9sendEventv+0x94>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d54:	781b      	ldrb	r3, [r3, #0]
   d4d56:	2200      	movs	r2, #0
   d4d58:	f88d 2000 	strb.w	r2, [sp]
   d4d5c:	a804      	add	r0, sp, #16
   d4d5e:	aa06      	add	r2, sp, #24
   d4d60:	f7ff ff16 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d64:	a805      	add	r0, sp, #20
   d4d66:	f7ff ffbf 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d4d6a:	f002 fb49 	bl	d7400 <_ZN9TimeClass3nowEv>
   d4d6e:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d4d70:	f002 fd6e 	bl	d7850 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4d74:	7821      	ldrb	r1, [r4, #0]
   d4d76:	2003      	movs	r0, #3
   d4d78:	f001 f80a 	bl	d5d90 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d4d7c:	f002 fb48 	bl	d7410 <_ZN9TimeClass4hourEv>
   d4d80:	4b0a      	ldr	r3, [pc, #40]	; (d4dac <_Z9sendEventv+0x98>)
   d4d82:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4d84:	4b0a      	ldr	r3, [pc, #40]	; (d4db0 <_Z9sendEventv+0x9c>)
   d4d86:	2201      	movs	r2, #1
   d4d88:	701a      	strb	r2, [r3, #0]
   d4d8a:	f000 ffe9 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4d8e:	4b09      	ldr	r3, [pc, #36]	; (d4db4 <_Z9sendEventv+0xa0>)
   d4d90:	6018      	str	r0, [r3, #0]
}
   d4d92:	b047      	add	sp, #284	; 0x11c
   d4d94:	bd30      	pop	{r4, r5, pc}
   d4d96:	bf00      	nop
   d4d98:	2003e248 	.word	0x2003e248
   d4d9c:	000db001 	.word	0x000db001
   d4da0:	2003e224 	.word	0x2003e224
   d4da4:	2003e1e1 	.word	0x2003e1e1
   d4da8:	000db03b 	.word	0x000db03b
   d4dac:	2003e288 	.word	0x2003e288
   d4db0:	2003e0b8 	.word	0x2003e0b8
   d4db4:	2003e1dc 	.word	0x2003e1dc

000d4db8 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4db8:	b530      	push	{r4, r5, lr}
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4dba:	460c      	mov	r4, r1
  dataInFlight = true;                                                                      // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4dbc:	b085      	sub	sp, #20
   d4dbe:	4d1d      	ldr	r5, [pc, #116]	; (d4e34 <_Z14UbidotsHandlerPKcS0_+0x7c>)
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4dc0:	b951      	cbnz	r1, d4dd8 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
   d4dc2:	782b      	ldrb	r3, [r5, #0]
   d4dc4:	2b00      	cmp	r3, #0
   d4dc6:	d032      	beq.n	d4e2e <_Z14UbidotsHandlerPKcS0_+0x76>
      waitUntil(meterParticlePublish);
   d4dc8:	f7ff ff44 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4dcc:	4b1a      	ldr	r3, [pc, #104]	; (d4e38 <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4dce:	4a1b      	ldr	r2, [pc, #108]	; (d4e3c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4dd0:	781b      	ldrb	r3, [r3, #0]
   d4dd2:	f88d 4000 	strb.w	r4, [sp]
   d4dd6:	e023      	b.n	d4e20 <_Z14UbidotsHandlerPKcS0_+0x68>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4dd8:	4608      	mov	r0, r1
   d4dda:	f003 fdaa 	bl	d8932 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4dde:	38c8      	subs	r0, #200	; 0xc8
   d4de0:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
   d4de2:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d4de4:	d813      	bhi.n	d4e0e <_Z14UbidotsHandlerPKcS0_+0x56>
  {
    if (verboseMode) {
   d4de6:	b173      	cbz	r3, d4e06 <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(meterParticlePublish);
   d4de8:	f7ff ff34 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4dec:	4b12      	ldr	r3, [pc, #72]	; (d4e38 <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("State", "Response Received", PRIVATE);
   d4dee:	4914      	ldr	r1, [pc, #80]	; (d4e40 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4df0:	781b      	ldrb	r3, [r3, #0]
   d4df2:	2200      	movs	r2, #0
   d4df4:	f88d 2000 	strb.w	r2, [sp]
   d4df8:	a802      	add	r0, sp, #8
   d4dfa:	4a12      	ldr	r2, [pc, #72]	; (d4e44 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4dfc:	f7ff fec8 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4e00:	a803      	add	r0, sp, #12
   d4e02:	f7ff ff71 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    }
    dataInFlight = false;    
   d4e06:	4b10      	ldr	r3, [pc, #64]	; (d4e48 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4e08:	2200      	movs	r2, #0
   d4e0a:	701a      	strb	r2, [r3, #0]
   d4e0c:	e00f      	b.n	d4e2e <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else if (verboseMode) {
   d4e0e:	b173      	cbz	r3, d4e2e <_Z14UbidotsHandlerPKcS0_+0x76>
    waitUntil(meterParticlePublish);      
   d4e10:	f7ff ff20 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d4e14:	4b08      	ldr	r3, [pc, #32]	; (d4e38 <_Z14UbidotsHandlerPKcS0_+0x80>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4e16:	2200      	movs	r2, #0
   d4e18:	781b      	ldrb	r3, [r3, #0]
   d4e1a:	f88d 2000 	strb.w	r2, [sp]
   d4e1e:	4622      	mov	r2, r4
   d4e20:	a802      	add	r0, sp, #8
   d4e22:	490a      	ldr	r1, [pc, #40]	; (d4e4c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4e24:	f7ff feb4 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4e28:	a803      	add	r0, sp, #12
   d4e2a:	f7ff ff5d 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

}
   d4e2e:	b005      	add	sp, #20
   d4e30:	bd30      	pop	{r4, r5, pc}
   d4e32:	bf00      	nop
   d4e34:	2003e0b0 	.word	0x2003e0b0
   d4e38:	2003e1e1 	.word	0x2003e1e1
   d4e3c:	000db051 	.word	0x000db051
   d4e40:	000db078 	.word	0x000db078
   d4e44:	000db066 	.word	0x000db066
   d4e48:	2003e0b8 	.word	0x2003e0b8
   d4e4c:	000db059 	.word	0x000db059

000d4e50 <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  // bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  
  sensor_data.validData = false;
   d4e54:	4c52      	ldr	r4, [pc, #328]	; (d4fa0 <_Z16takeMeasurementsv+0x150>)

  if (bme.performReading()){
   d4e56:	4853      	ldr	r0, [pc, #332]	; (d4fa4 <_Z16takeMeasurementsv+0x154>)

}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4e58:	b085      	sub	sp, #20

  // bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  
  sensor_data.validData = false;
   d4e5a:	2500      	movs	r5, #0
   d4e5c:	7025      	strb	r5, [r4, #0]

  if (bme.performReading()){
   d4e5e:	f000 fd2f 	bl	d58c0 <_ZN15Adafruit_BME68014performReadingEv>
   d4e62:	4607      	mov	r7, r0
   d4e64:	2800      	cmp	r0, #0
   d4e66:	f000 808a 	beq.w	d4f7e <_Z16takeMeasurementsv+0x12e>
    
    int reportCycle;                                                    // Where are we in the sense and report cycle
    currentCountTime = Time.now();
   d4e6a:	f002 fac9 	bl	d7400 <_ZN9TimeClass3nowEv>
   d4e6e:	4b4e      	ldr	r3, [pc, #312]	; (d4fa8 <_Z16takeMeasurementsv+0x158>)
   d4e70:	6018      	str	r0, [r3, #0]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d4e72:	f002 fad7 	bl	d7424 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d4e76:	280f      	cmp	r0, #15
   d4e78:	d009      	beq.n	d4e8e <_Z16takeMeasurementsv+0x3e>
   d4e7a:	dd07      	ble.n	d4e8c <_Z16takeMeasurementsv+0x3c>
   d4e7c:	281e      	cmp	r0, #30
   d4e7e:	d003      	beq.n	d4e88 <_Z16takeMeasurementsv+0x38>
   d4e80:	282d      	cmp	r0, #45	; 0x2d
   d4e82:	d103      	bne.n	d4e8c <_Z16takeMeasurementsv+0x3c>
        break;  
      case 30:
        reportCycle = 1;                                                // This is the second of the sample-only periods
        break; 
      case 45:
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d4e84:	2502      	movs	r5, #2
   d4e86:	e002      	b.n	d4e8e <_Z16takeMeasurementsv+0x3e>
    switch (currentMinutes) {
      case 15:
        reportCycle = 0;                                                // This is the first of the sample-only periods
        break;  
      case 30:
        reportCycle = 1;                                                // This is the second of the sample-only periods
   d4e88:	2501      	movs	r5, #1
   d4e8a:	e000      	b.n	d4e8e <_Z16takeMeasurementsv+0x3e>
        break; 
      case 0:
        reportCycle = 3;                                                // This is the fourth of the sample-only periods
        break; 
      default:
        reportCycle = 3;  
   d4e8c:	2503      	movs	r5, #3
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = bme.temperature;
   d4e8e:	f8df 8114 	ldr.w	r8, [pc, #276]	; d4fa4 <_Z16takeMeasurementsv+0x154>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d4e92:	f8df 9158 	ldr.w	r9, [pc, #344]	; d4fec <_Z16takeMeasurementsv+0x19c>
      default:
        reportCycle = 3;  
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = bme.temperature;
   d4e96:	f8d8 0000 	ldr.w	r0, [r8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

    sensor_data.relativeHumidity = bme.humidity;
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d4e9a:	4e44      	ldr	r6, [pc, #272]	; (d4fac <_Z16takeMeasurementsv+0x15c>)
      default:
        reportCycle = 3;  
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = bme.temperature;
   d4e9c:	f002 fffc 	bl	d7e98 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d4ea0:	e9d9 2300 	ldrd	r2, r3, [r9]
      default:
        reportCycle = 3;  
        break;                                                          // just in case
  }

    sensor_data.temperatureInC = bme.temperature;
   d4ea4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d4ea8:	e9cd 2300 	strd	r2, r3, [sp]
   d4eac:	2110      	movs	r1, #16
   d4eae:	4a40      	ldr	r2, [pc, #256]	; (d4fb0 <_Z16takeMeasurementsv+0x160>)
   d4eb0:	4840      	ldr	r0, [pc, #256]	; (d4fb4 <_Z16takeMeasurementsv+0x164>)
   d4eb2:	f001 fa01 	bl	d62b8 <snprintf>

    sensor_data.relativeHumidity = bme.humidity;
   d4eb6:	f8d8 0008 	ldr.w	r0, [r8, #8]
   d4eba:	f002 ffed 	bl	d7e98 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d4ebe:	e9d6 2300 	ldrd	r2, r3, [r6]
  }

    sensor_data.temperatureInC = bme.temperature;
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

    sensor_data.relativeHumidity = bme.humidity;
   d4ec2:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d4ec6:	e9cd 2300 	strd	r2, r3, [sp]
   d4eca:	2110      	movs	r1, #16
   d4ecc:	4a3a      	ldr	r2, [pc, #232]	; (d4fb8 <_Z16takeMeasurementsv+0x168>)
   d4ece:	483b      	ldr	r0, [pc, #236]	; (d4fbc <_Z16takeMeasurementsv+0x16c>)
   d4ed0:	f001 f9f2 	bl	d62b8 <snprintf>

    pressureHpa = bme.pressure / 100.0;
   d4ed4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d4ed8:	f002 ffde 	bl	d7e98 <__aeabi_f2d>
   d4edc:	2200      	movs	r2, #0
   d4ede:	4b38      	ldr	r3, [pc, #224]	; (d4fc0 <_Z16takeMeasurementsv+0x170>)
   d4ee0:	f003 f958 	bl	d8194 <__aeabi_ddiv>
   d4ee4:	4b37      	ldr	r3, [pc, #220]	; (d4fc4 <_Z16takeMeasurementsv+0x174>)
    snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
   d4ee6:	4a38      	ldr	r2, [pc, #224]	; (d4fc8 <_Z16takeMeasurementsv+0x178>)
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

    sensor_data.relativeHumidity = bme.humidity;
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

    pressureHpa = bme.pressure / 100.0;
   d4ee8:	e9c3 0100 	strd	r0, r1, [r3]
    snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);
   d4eec:	e9cd 0100 	strd	r0, r1, [sp]
   d4ef0:	2110      	movs	r1, #16
   d4ef2:	4836      	ldr	r0, [pc, #216]	; (d4fcc <_Z16takeMeasurementsv+0x17c>)
   d4ef4:	f001 f9e0 	bl	d62b8 <snprintf>

    // If lower temperature threshold is crossed, Set the flag true. 
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d4ef8:	e9d9 8900 	ldrd	r8, r9, [r9]
   d4efc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4efe:	f002 ffcb 	bl	d7e98 <__aeabi_f2d>
   d4f02:	4642      	mov	r2, r8
   d4f04:	464b      	mov	r3, r9
   d4f06:	f003 faab 	bl	d8460 <__aeabi_dcmpgt>
   d4f0a:	b110      	cbz	r0, d4f12 <_Z16takeMeasurementsv+0xc2>
   d4f0c:	4b30      	ldr	r3, [pc, #192]	; (d4fd0 <_Z16takeMeasurementsv+0x180>)
   d4f0e:	2201      	movs	r2, #1
   d4f10:	701a      	strb	r2, [r3, #0]

    // If upper temperature threshold is crossed, Set the flag true. 
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d4f12:	6a20      	ldr	r0, [r4, #32]
   d4f14:	f002 ffc0 	bl	d7e98 <__aeabi_f2d>
   d4f18:	4602      	mov	r2, r0
   d4f1a:	460b      	mov	r3, r1
   d4f1c:	4640      	mov	r0, r8
   d4f1e:	4649      	mov	r1, r9
   d4f20:	f003 fa9e 	bl	d8460 <__aeabi_dcmpgt>
   d4f24:	b110      	cbz	r0, d4f2c <_Z16takeMeasurementsv+0xdc>
   d4f26:	4b2b      	ldr	r3, [pc, #172]	; (d4fd4 <_Z16takeMeasurementsv+0x184>)
   d4f28:	2201      	movs	r2, #1
   d4f2a:	701a      	strb	r2, [r3, #0]

    // If lower temperature threshold is crossed, Set the flag true. 
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d4f2c:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4f30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4f32:	f002 ffb1 	bl	d7e98 <__aeabi_f2d>
   d4f36:	4642      	mov	r2, r8
   d4f38:	464b      	mov	r3, r9
   d4f3a:	f003 fa91 	bl	d8460 <__aeabi_dcmpgt>
   d4f3e:	b110      	cbz	r0, d4f46 <_Z16takeMeasurementsv+0xf6>
   d4f40:	4b25      	ldr	r3, [pc, #148]	; (d4fd8 <_Z16takeMeasurementsv+0x188>)
   d4f42:	2201      	movs	r2, #1
   d4f44:	701a      	strb	r2, [r3, #0]

    // If lower temperature threshold is crossed, Set the flag true. 
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4f46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f48:	f002 ffa6 	bl	d7e98 <__aeabi_f2d>
   d4f4c:	4602      	mov	r2, r0
   d4f4e:	460b      	mov	r3, r1
   d4f50:	4640      	mov	r0, r8
   d4f52:	4649      	mov	r1, r9
   d4f54:	f003 fa84 	bl	d8460 <__aeabi_dcmpgt>
   d4f58:	b110      	cbz	r0, d4f60 <_Z16takeMeasurementsv+0x110>
   d4f5a:	4b20      	ldr	r3, [pc, #128]	; (d4fdc <_Z16takeMeasurementsv+0x18c>)
   d4f5c:	2201      	movs	r2, #1
   d4f5e:	701a      	strb	r2, [r3, #0]

    // Indicate that this is a valid data array and store it
    sensor_data.validData = true;
   d4f60:	2301      	movs	r3, #1
   d4f62:	7023      	strb	r3, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4f64:	f002 fa4c 	bl	d7400 <_ZN9TimeClass3nowEv>
   d4f68:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d4f6a:	f002 fc71 	bl	d7850 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4f6e:	2064      	movs	r0, #100	; 0x64
   d4f70:	4368      	muls	r0, r5
   d4f72:	2230      	movs	r2, #48	; 0x30
   d4f74:	490a      	ldr	r1, [pc, #40]	; (d4fa0 <_Z16takeMeasurementsv+0x150>)
   d4f76:	3008      	adds	r0, #8
   d4f78:	f000 ff1a 	bl	d5db0 <HAL_EEPROM_Put>
   d4f7c:	e00b      	b.n	d4f96 <_Z16takeMeasurementsv+0x146>
   d4f7e:	4b18      	ldr	r3, [pc, #96]	; (d4fe0 <_Z16takeMeasurementsv+0x190>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d4f80:	4a18      	ldr	r2, [pc, #96]	; (d4fe4 <_Z16takeMeasurementsv+0x194>)
   d4f82:	781b      	ldrb	r3, [r3, #0]
   d4f84:	4918      	ldr	r1, [pc, #96]	; (d4fe8 <_Z16takeMeasurementsv+0x198>)
   d4f86:	f88d 0000 	strb.w	r0, [sp]
   d4f8a:	a802      	add	r0, sp, #8
   d4f8c:	f7ff fe00 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d4f90:	a803      	add	r0, sp, #12
   d4f92:	f7ff fea9 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Log", "Failed to perform reading :(");
        return 0;

  }
 
}
   d4f96:	4638      	mov	r0, r7
   d4f98:	b005      	add	sp, #20
   d4f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4f9e:	bf00      	nop
   d4fa0:	2003e248 	.word	0x2003e248
   d4fa4:	2003e2c8 	.word	0x2003e2c8
   d4fa8:	2003e224 	.word	0x2003e224
   d4fac:	2003e200 	.word	0x2003e200
   d4fb0:	000db07e 	.word	0x000db07e
   d4fb4:	2003e1cc 	.word	0x2003e1cc
   d4fb8:	000db086 	.word	0x000db086
   d4fbc:	2003e2b8 	.word	0x2003e2b8
   d4fc0:	40590000 	.word	0x40590000
   d4fc4:	2003e280 	.word	0x2003e280
   d4fc8:	000db08e 	.word	0x000db08e
   d4fcc:	2003e28a 	.word	0x2003e28a
   d4fd0:	2003e2b0 	.word	0x2003e2b0
   d4fd4:	2003e289 	.word	0x2003e289
   d4fd8:	2003e344 	.word	0x2003e344
   d4fdc:	2003e241 	.word	0x2003e241
   d4fe0:	2003e278 	.word	0x2003e278
   d4fe4:	000db097 	.word	0x000db097
   d4fe8:	000db0b4 	.word	0x000db0b4
   d4fec:	2003e2a8 	.word	0x2003e2a8

000d4ff0 <_Z16ThresholdCrossedv>:

// Function to send sms for threshold values

bool ThresholdCrossed(){
   d4ff0:	b530      	push	{r4, r5, lr}
  
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4ff2:	4b2d      	ldr	r3, [pc, #180]	; (d50a8 <_Z16ThresholdCrossedv+0xb8>)
   d4ff4:	4c2d      	ldr	r4, [pc, #180]	; (d50ac <_Z16ThresholdCrossedv+0xbc>)
   d4ff6:	781b      	ldrb	r3, [r3, #0]
 
}

// Function to send sms for threshold values

bool ThresholdCrossed(){
   d4ff8:	b08d      	sub	sp, #52	; 0x34
  
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4ffa:	b913      	cbnz	r3, d5002 <_Z16ThresholdCrossedv+0x12>
   d4ffc:	4b2c      	ldr	r3, [pc, #176]	; (d50b0 <_Z16ThresholdCrossedv+0xc0>)
   d4ffe:	781b      	ldrb	r3, [r3, #0]
   d5000:	b1eb      	cbz	r3, d503e <_Z16ThresholdCrossedv+0x4e>
    char data[32];
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d5002:	4b2c      	ldr	r3, [pc, #176]	; (d50b4 <_Z16ThresholdCrossedv+0xc4>)
   d5004:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5008:	2120      	movs	r1, #32
   d500a:	e9cd 2300 	strd	r2, r3, [sp]
   d500e:	a804      	add	r0, sp, #16
   d5010:	4a29      	ldr	r2, [pc, #164]	; (d50b8 <_Z16ThresholdCrossedv+0xc8>)
   d5012:	f001 f951 	bl	d62b8 <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d5016:	2005      	movs	r0, #5
   d5018:	f7ff fdfa 	bl	d4c10 <_Z8BlinkLEDi>
    // snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Temperature Threshold Crossed. Current Temperature is: %4.1f",temperatureInC);
    // Particle.publish("sms-webhook",smsString,PRIVATE);                                            // Send the webhook . 
    waitUntil(meterParticlePublish);
   d501c:	f7ff fe1a 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d5020:	4b26      	ldr	r3, [pc, #152]	; (d50bc <_Z16ThresholdCrossedv+0xcc>)
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d5022:	4927      	ldr	r1, [pc, #156]	; (d50c0 <_Z16ThresholdCrossedv+0xd0>)
   d5024:	781b      	ldrb	r3, [r3, #0]
   d5026:	2200      	movs	r2, #0
   d5028:	f88d 2000 	strb.w	r2, [sp]
   d502c:	a802      	add	r0, sp, #8
   d502e:	aa04      	add	r2, sp, #16
   d5030:	f7ff fdae 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d5034:	a803      	add	r0, sp, #12
   d5036:	f7ff fe57 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d503a:	2301      	movs	r3, #1
   d503c:	7023      	strb	r3, [r4, #0]
  }

  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d503e:	4b21      	ldr	r3, [pc, #132]	; (d50c4 <_Z16ThresholdCrossedv+0xd4>)
   d5040:	781a      	ldrb	r2, [r3, #0]
   d5042:	461d      	mov	r5, r3
   d5044:	b912      	cbnz	r2, d504c <_Z16ThresholdCrossedv+0x5c>
   d5046:	4b20      	ldr	r3, [pc, #128]	; (d50c8 <_Z16ThresholdCrossedv+0xd8>)
   d5048:	781b      	ldrb	r3, [r3, #0]
   d504a:	b1eb      	cbz	r3, d5088 <_Z16ThresholdCrossedv+0x98>
    
    char humidity_data[32];
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d504c:	4b1f      	ldr	r3, [pc, #124]	; (d50cc <_Z16ThresholdCrossedv+0xdc>)
   d504e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5052:	2120      	movs	r1, #32
   d5054:	e9cd 2300 	strd	r2, r3, [sp]
   d5058:	a804      	add	r0, sp, #16
   d505a:	4a1d      	ldr	r2, [pc, #116]	; (d50d0 <_Z16ThresholdCrossedv+0xe0>)
   d505c:	f001 f92c 	bl	d62b8 <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d5060:	2007      	movs	r0, #7
   d5062:	f7ff fdd5 	bl	d4c10 <_Z8BlinkLEDi>
    // snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Humidity Threshold Crossed. Current Humidity is: %4.1f and Current Temperature is: %4.1f",temperatureInC,relativeHumidity);
    // Particle.publish("sms-webhook",smsString,PRIVATE);
    waitUntil(meterParticlePublish);
   d5066:	f7ff fdf5 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d506a:	4b14      	ldr	r3, [pc, #80]	; (d50bc <_Z16ThresholdCrossedv+0xcc>)
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d506c:	4914      	ldr	r1, [pc, #80]	; (d50c0 <_Z16ThresholdCrossedv+0xd0>)
   d506e:	781b      	ldrb	r3, [r3, #0]
   d5070:	2200      	movs	r2, #0
   d5072:	f88d 2000 	strb.w	r2, [sp]
   d5076:	a802      	add	r0, sp, #8
   d5078:	aa04      	add	r2, sp, #16
   d507a:	f7ff fd89 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d507e:	a803      	add	r0, sp, #12
   d5080:	f7ff fe32 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d5084:	2301      	movs	r3, #1
   d5086:	7023      	strb	r3, [r4, #0]
  }

  thresholdTimeStamp = Time.minute();
   d5088:	f002 f9cc 	bl	d7424 <_ZN9TimeClass6minuteEv>
   d508c:	4b11      	ldr	r3, [pc, #68]	; (d50d4 <_Z16ThresholdCrossedv+0xe4>)
   d508e:	6018      	str	r0, [r3, #0]

  if (thresholdCrossAcknowledged == true)
   d5090:	7823      	ldrb	r3, [r4, #0]
   d5092:	b133      	cbz	r3, d50a2 <_Z16ThresholdCrossedv+0xb2>
  {
    upperHumidityThresholdCrossed = false;
    lowerHumidityThresholdCrossed = false;
   d5094:	4a0c      	ldr	r2, [pc, #48]	; (d50c8 <_Z16ThresholdCrossedv+0xd8>)

  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
   d5096:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d5098:	7013      	strb	r3, [r2, #0]

  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
   d509a:	702b      	strb	r3, [r5, #0]
    lowerHumidityThresholdCrossed = false;
    upperTemperatureThreshold     = false;
   d509c:	4b0e      	ldr	r3, [pc, #56]	; (d50d8 <_Z16ThresholdCrossedv+0xe8>)
   d509e:	2200      	movs	r2, #0
   d50a0:	601a      	str	r2, [r3, #0]
  }



  return 1;
}
   d50a2:	2001      	movs	r0, #1
   d50a4:	b00d      	add	sp, #52	; 0x34
   d50a6:	bd30      	pop	{r4, r5, pc}
   d50a8:	2003e2b0 	.word	0x2003e2b0
   d50ac:	2003e220 	.word	0x2003e220
   d50b0:	2003e289 	.word	0x2003e289
   d50b4:	2003e2a8 	.word	0x2003e2a8
   d50b8:	000db0b8 	.word	0x000db0b8
   d50bc:	2003e1e1 	.word	0x2003e1e1
   d50c0:	000db0d4 	.word	0x000db0d4
   d50c4:	2003e241 	.word	0x2003e241
   d50c8:	2003e344 	.word	0x2003e344
   d50cc:	2003e200 	.word	0x2003e200
   d50d0:	000db0e5 	.word	0x000db0e5
   d50d4:	2003e244 	.word	0x2003e244
   d50d8:	2003e0b4 	.word	0x2003e0b4

000d50dc <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d50dc:	b530      	push	{r4, r5, lr}
   d50de:	4913      	ldr	r1, [pc, #76]	; (d512c <_Z14setVerboseMode6String+0x50>)
   d50e0:	b085      	sub	sp, #20
   d50e2:	4605      	mov	r5, r0
   d50e4:	f002 f8d1 	bl	d728a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d50e8:	4604      	mov	r4, r0
   d50ea:	b148      	cbz	r0, d5100 <_Z14setVerboseMode6String+0x24>
  {
    verboseMode = true;
   d50ec:	4b10      	ldr	r3, [pc, #64]	; (d5130 <_Z14setVerboseMode6String+0x54>)
   d50ee:	2401      	movs	r4, #1
   d50f0:	701c      	strb	r4, [r3, #0]
   d50f2:	4b10      	ldr	r3, [pc, #64]	; (d5134 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d50f4:	2200      	movs	r2, #0
   d50f6:	781b      	ldrb	r3, [r3, #0]
   d50f8:	f88d 2000 	strb.w	r2, [sp]
   d50fc:	4a0e      	ldr	r2, [pc, #56]	; (d5138 <_Z14setVerboseMode6String+0x5c>)
   d50fe:	e00b      	b.n	d5118 <_Z14setVerboseMode6String+0x3c>
   d5100:	490e      	ldr	r1, [pc, #56]	; (d513c <_Z14setVerboseMode6String+0x60>)
   d5102:	4628      	mov	r0, r5
   d5104:	f002 f8c1 	bl	d728a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d5108:	b170      	cbz	r0, d5128 <_Z14setVerboseMode6String+0x4c>
  {
    verboseMode = false;
   d510a:	4b09      	ldr	r3, [pc, #36]	; (d5130 <_Z14setVerboseMode6String+0x54>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d510c:	4a0c      	ldr	r2, [pc, #48]	; (d5140 <_Z14setVerboseMode6String+0x64>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d510e:	701c      	strb	r4, [r3, #0]
   d5110:	4b08      	ldr	r3, [pc, #32]	; (d5134 <_Z14setVerboseMode6String+0x58>)
   d5112:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d5114:	f88d 4000 	strb.w	r4, [sp]
   d5118:	490a      	ldr	r1, [pc, #40]	; (d5144 <_Z14setVerboseMode6String+0x68>)
   d511a:	a802      	add	r0, sp, #8
   d511c:	f7ff fd38 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d5120:	a803      	add	r0, sp, #12
   d5122:	f7ff fde1 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5126:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d5128:	b005      	add	sp, #20
   d512a:	bd30      	pop	{r4, r5, pc}
   d512c:	000db392 	.word	0x000db392
   d5130:	2003e0b0 	.word	0x2003e0b0
   d5134:	2003e1e1 	.word	0x2003e1e1
   d5138:	000db0fe 	.word	0x000db0fe
   d513c:	000db10f 	.word	0x000db10f
   d5140:	000db111 	.word	0x000db111
   d5144:	000db121 	.word	0x000db121

000d5148 <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
   d5148:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d514a:	4d18      	ldr	r5, [pc, #96]	; (d51ac <_Z22publishStateTransitionv+0x64>)
   d514c:	4c18      	ldr	r4, [pc, #96]	; (d51b0 <_Z22publishStateTransitionv+0x68>)
   d514e:	4919      	ldr	r1, [pc, #100]	; (d51b4 <_Z22publishStateTransitionv+0x6c>)
   d5150:	782a      	ldrb	r2, [r5, #0]
   d5152:	7820      	ldrb	r0, [r4, #0]
  else return 0;
}


void publishStateTransition(void)
{
   d5154:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5156:	231a      	movs	r3, #26
   d5158:	fb03 1202 	mla	r2, r3, r2, r1
   d515c:	9200      	str	r2, [sp, #0]
   d515e:	fb03 1300 	mla	r3, r3, r0, r1
   d5162:	4a15      	ldr	r2, [pc, #84]	; (d51b8 <_Z22publishStateTransitionv+0x70>)
   d5164:	2128      	movs	r1, #40	; 0x28
   d5166:	a804      	add	r0, sp, #16
   d5168:	f001 f8a6 	bl	d62b8 <snprintf>
  oldState = state;
   d516c:	782b      	ldrb	r3, [r5, #0]
   d516e:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5170:	f000 fffa 	bl	d6168 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d5174:	b190      	cbz	r0, d519c <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
   d5176:	f7ff fd6d 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d517a:	4b10      	ldr	r3, [pc, #64]	; (d51bc <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d517c:	4910      	ldr	r1, [pc, #64]	; (d51c0 <_Z22publishStateTransitionv+0x78>)
   d517e:	781b      	ldrb	r3, [r3, #0]
   d5180:	2200      	movs	r2, #0
   d5182:	f88d 2000 	strb.w	r2, [sp]
   d5186:	a802      	add	r0, sp, #8
   d5188:	aa04      	add	r2, sp, #16
   d518a:	f7ff fd01 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d518e:	a803      	add	r0, sp, #12
   d5190:	f7ff fdaa 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5194:	f000 fde4 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d5198:	4b0a      	ldr	r3, [pc, #40]	; (d51c4 <_Z22publishStateTransitionv+0x7c>)
   d519a:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
   d519c:	f002 fa36 	bl	d760c <_Z16_fetch_usbserialv>
   d51a0:	a904      	add	r1, sp, #16
   d51a2:	f001 ff04 	bl	d6fae <_ZN5Print7printlnEPKc>
}
   d51a6:	b00f      	add	sp, #60	; 0x3c
   d51a8:	bd30      	pop	{r4, r5, pc}
   d51aa:	bf00      	nop
   d51ac:	2003e240 	.word	0x2003e240
   d51b0:	2003e1e0 	.word	0x2003e1e0
   d51b4:	2003dfdc 	.word	0x2003dfdc
   d51b8:	000db126 	.word	0x000db126
   d51bc:	2003e1e1 	.word	0x2003e1e1
   d51c0:	000db134 	.word	0x000db134
   d51c4:	2003e340 	.word	0x2003e340

000d51c8 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
   d51c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
   d51ca:	4c7b      	ldr	r4, [pc, #492]	; (d53b8 <loop+0x1f0>)
   d51cc:	7823      	ldrb	r3, [r4, #0]
   d51ce:	3b01      	subs	r3, #1
   d51d0:	2b05      	cmp	r3, #5
   d51d2:	f200 80ee 	bhi.w	d53b2 <loop+0x1ea>
   d51d6:	e8df f003 	tbb	[pc, r3]
   d51da:	03a8      	.short	0x03a8
   d51dc:	7a591c2d 	.word	0x7a591c2d
  
  case IDLE_STATE:
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   d51e0:	4b76      	ldr	r3, [pc, #472]	; (d53bc <loop+0x1f4>)
   d51e2:	781b      	ldrb	r3, [r3, #0]
   d51e4:	b12b      	cbz	r3, d51f2 <loop+0x2a>
   d51e6:	4b76      	ldr	r3, [pc, #472]	; (d53c0 <loop+0x1f8>)
   d51e8:	781b      	ldrb	r3, [r3, #0]
   d51ea:	2b02      	cmp	r3, #2
   d51ec:	d001      	beq.n	d51f2 <loop+0x2a>
   d51ee:	f7ff ffab 	bl	d5148 <_Z22publishStateTransitionv>
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d51f2:	f002 f90d 	bl	d7410 <_ZN9TimeClass4hourEv>
   d51f6:	4b73      	ldr	r3, [pc, #460]	; (d53c4 <loop+0x1fc>)
   d51f8:	4d73      	ldr	r5, [pc, #460]	; (d53c8 <loop+0x200>)
   d51fa:	781b      	ldrb	r3, [r3, #0]
   d51fc:	4298      	cmp	r0, r3
   d51fe:	f040 80be 	bne.w	d537e <loop+0x1b6>
   d5202:	f002 f90f 	bl	d7424 <_ZN9TimeClass6minuteEv>
   d5206:	682b      	ldr	r3, [r5, #0]
   d5208:	1ac0      	subs	r0, r0, r3
   d520a:	281d      	cmp	r0, #29
   d520c:	f300 80b7 	bgt.w	d537e <loop+0x1b6>
   d5210:	e0ba      	b.n	d5388 <loop+0x1c0>
      state = THRESHOLD_CROSSED;
    }
    break;

  case THRESHOLD_CROSSED:
    if (verboseMode && state != oldState) publishStateTransition();
   d5212:	4b6a      	ldr	r3, [pc, #424]	; (d53bc <loop+0x1f4>)
   d5214:	781b      	ldrb	r3, [r3, #0]
   d5216:	b12b      	cbz	r3, d5224 <loop+0x5c>
   d5218:	4b69      	ldr	r3, [pc, #420]	; (d53c0 <loop+0x1f8>)
   d521a:	781b      	ldrb	r3, [r3, #0]
   d521c:	2b04      	cmp	r3, #4
   d521e:	d001      	beq.n	d5224 <loop+0x5c>
   d5220:	f7ff ff92 	bl	d5148 <_Z22publishStateTransitionv>
    
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d5224:	f7ff fe14 	bl	d4e50 <_Z16takeMeasurementsv>
   d5228:	b110      	cbz	r0, d5230 <loop+0x68>
      ThresholdCrossed();
   d522a:	f7ff fee1 	bl	d4ff0 <_Z16ThresholdCrossedv>
   d522e:	e05a      	b.n	d52e6 <loop+0x11e>
      state = IDLE_STATE;
    }else
    {
      state= ERROR_STATE;
   d5230:	2301      	movs	r3, #1
   d5232:	e0bd      	b.n	d53b0 <loop+0x1e8>
    }
    break;

  case MEASURING_STATE:                                                                     // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
   d5234:	4b61      	ldr	r3, [pc, #388]	; (d53bc <loop+0x1f4>)
   d5236:	781a      	ldrb	r2, [r3, #0]
   d5238:	461d      	mov	r5, r3
   d523a:	b12a      	cbz	r2, d5248 <loop+0x80>
   d523c:	4b60      	ldr	r3, [pc, #384]	; (d53c0 <loop+0x1f8>)
   d523e:	781b      	ldrb	r3, [r3, #0]
   d5240:	2b03      	cmp	r3, #3
   d5242:	d001      	beq.n	d5248 <loop+0x80>
   d5244:	f7ff ff80 	bl	d5148 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d5248:	f7ff fe02 	bl	d4e50 <_Z16takeMeasurementsv>
   d524c:	4606      	mov	r6, r0
   d524e:	b9d8      	cbnz	r0, d5288 <loop+0xc0>
    {
      state = ERROR_STATE;
   d5250:	2301      	movs	r3, #1
   d5252:	7023      	strb	r3, [r4, #0]
   d5254:	f000 fd84 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5258:	4b5c      	ldr	r3, [pc, #368]	; (d53cc <loop+0x204>)
   d525a:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d525c:	782b      	ldrb	r3, [r5, #0]
   d525e:	2b00      	cmp	r3, #0
   d5260:	f000 80a7 	beq.w	d53b2 <loop+0x1ea>
        waitUntil(meterParticlePublish);
   d5264:	f7ff fcf6 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
   d5268:	4b59      	ldr	r3, [pc, #356]	; (d53d0 <loop+0x208>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d526a:	4a5a      	ldr	r2, [pc, #360]	; (d53d4 <loop+0x20c>)
   d526c:	781b      	ldrb	r3, [r3, #0]
   d526e:	495a      	ldr	r1, [pc, #360]	; (d53d8 <loop+0x210>)
   d5270:	f88d 6000 	strb.w	r6, [sp]
   d5274:	a802      	add	r0, sp, #8
   d5276:	f7ff fc8b 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d527a:	a803      	add	r0, sp, #12
   d527c:	f7ff fd34 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5280:	f000 fd6e 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d5284:	4b55      	ldr	r3, [pc, #340]	; (d53dc <loop+0x214>)
   d5286:	e020      	b.n	d52ca <loop+0x102>
      }
    }
    else state = REPORTING_STATE;
   d5288:	2305      	movs	r3, #5
   d528a:	e091      	b.n	d53b0 <loop+0x1e8>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d528c:	4b4b      	ldr	r3, [pc, #300]	; (d53bc <loop+0x1f4>)
   d528e:	781b      	ldrb	r3, [r3, #0]
   d5290:	b12b      	cbz	r3, d529e <loop+0xd6>
   d5292:	4b4b      	ldr	r3, [pc, #300]	; (d53c0 <loop+0x1f8>)
   d5294:	781b      	ldrb	r3, [r3, #0]
   d5296:	2b05      	cmp	r3, #5
   d5298:	d001      	beq.n	d529e <loop+0xd6>
   d529a:	f7ff ff55 	bl	d5148 <_Z22publishStateTransitionv>
   d529e:	f000 ff63 	bl	d6168 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d52a2:	b168      	cbz	r0, d52c0 <loop+0xf8>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d52a4:	f002 f8b4 	bl	d7410 <_ZN9TimeClass4hourEv>
   d52a8:	280c      	cmp	r0, #12
   d52aa:	d105      	bne.n	d52b8 <loop+0xf0>
   d52ac:	f000 ff5c 	bl	d6168 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d52b0:	b110      	cbz	r0, d52b8 <loop+0xf0>
            return false;
        }
        return spark_sync_time(NULL);
   d52b2:	2000      	movs	r0, #0
   d52b4:	f000 ff78 	bl	d61a8 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d52b8:	f7ff fd2c 	bl	d4d14 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d52bc:	2306      	movs	r3, #6
   d52be:	e077      	b.n	d53b0 <loop+0x1e8>
    }
    else {
      state = ERROR_STATE;
   d52c0:	2301      	movs	r3, #1
   d52c2:	7023      	strb	r3, [r4, #0]
   d52c4:	f000 fd4c 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d52c8:	4b40      	ldr	r3, [pc, #256]	; (d53cc <loop+0x204>)
   d52ca:	6018      	str	r0, [r3, #0]
   d52cc:	e071      	b.n	d53b2 <loop+0x1ea>
    }
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d52ce:	4b3b      	ldr	r3, [pc, #236]	; (d53bc <loop+0x1f4>)
   d52d0:	781b      	ldrb	r3, [r3, #0]
   d52d2:	b12b      	cbz	r3, d52e0 <loop+0x118>
   d52d4:	4b3a      	ldr	r3, [pc, #232]	; (d53c0 <loop+0x1f8>)
   d52d6:	781b      	ldrb	r3, [r3, #0]
   d52d8:	2b06      	cmp	r3, #6
   d52da:	d001      	beq.n	d52e0 <loop+0x118>
   d52dc:	f7ff ff34 	bl	d5148 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d52e0:	4b3f      	ldr	r3, [pc, #252]	; (d53e0 <loop+0x218>)
   d52e2:	781b      	ldrb	r3, [r3, #0]
   d52e4:	b90b      	cbnz	r3, d52ea <loop+0x122>
    {
     state = IDLE_STATE;
   d52e6:	2302      	movs	r3, #2
   d52e8:	e062      	b.n	d53b0 <loop+0x1e8>
   d52ea:	f000 fd39 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d52ee:	4b3d      	ldr	r3, [pc, #244]	; (d53e4 <loop+0x21c>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	1ac0      	subs	r0, r0, r3
   d52f4:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d52f8:	4298      	cmp	r0, r3
   d52fa:	d95a      	bls.n	d53b2 <loop+0x1ea>
   d52fc:	f000 fd30 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5300:	4d32      	ldr	r5, [pc, #200]	; (d53cc <loop+0x204>)
   d5302:	4b33      	ldr	r3, [pc, #204]	; (d53d0 <loop+0x208>)
   d5304:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5306:	2200      	movs	r2, #0
   d5308:	781b      	ldrb	r3, [r3, #0]
   d530a:	4937      	ldr	r1, [pc, #220]	; (d53e8 <loop+0x220>)
   d530c:	f88d 2000 	strb.w	r2, [sp]
   d5310:	a802      	add	r0, sp, #8
   d5312:	4a36      	ldr	r2, [pc, #216]	; (d53ec <loop+0x224>)
   d5314:	f7ff fc3c 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d5318:	a803      	add	r0, sp, #12
   d531a:	f7ff fce5 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d531e:	2301      	movs	r3, #1
   d5320:	7023      	strb	r3, [r4, #0]
   d5322:	f000 fd1d 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5326:	6028      	str	r0, [r5, #0]
   d5328:	e043      	b.n	d53b2 <loop+0x1ea>
    }
    break;

  
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d532a:	4b24      	ldr	r3, [pc, #144]	; (d53bc <loop+0x1f4>)
   d532c:	781b      	ldrb	r3, [r3, #0]
   d532e:	b12b      	cbz	r3, d533c <loop+0x174>
   d5330:	4b23      	ldr	r3, [pc, #140]	; (d53c0 <loop+0x1f8>)
   d5332:	781b      	ldrb	r3, [r3, #0]
   d5334:	2b01      	cmp	r3, #1
   d5336:	d001      	beq.n	d533c <loop+0x174>
   d5338:	f7ff ff06 	bl	d5148 <_Z22publishStateTransitionv>
   d533c:	f000 fd10 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5340:	4b22      	ldr	r3, [pc, #136]	; (d53cc <loop+0x204>)
   d5342:	681b      	ldr	r3, [r3, #0]
   d5344:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d5348:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d534c:	4298      	cmp	r0, r3
   d534e:	d930      	bls.n	d53b2 <loop+0x1ea>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5350:	f000 ff0a 	bl	d6168 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5354:	b160      	cbz	r0, d5370 <loop+0x1a8>
   d5356:	4b1e      	ldr	r3, [pc, #120]	; (d53d0 <loop+0x208>)
   d5358:	491f      	ldr	r1, [pc, #124]	; (d53d8 <loop+0x210>)
   d535a:	781b      	ldrb	r3, [r3, #0]
   d535c:	2200      	movs	r2, #0
   d535e:	f88d 2000 	strb.w	r2, [sp]
   d5362:	a802      	add	r0, sp, #8
   d5364:	4a22      	ldr	r2, [pc, #136]	; (d53f0 <loop+0x228>)
   d5366:	f7ff fc13 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d536a:	a803      	add	r0, sp, #12
   d536c:	f7ff fcbc 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d5370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5374:	f000 ffb8 	bl	d62e8 <delay>
      System.reset();
   d5378:	f001 ffc4 	bl	d7304 <_ZN11SystemClass5resetEv>
    }
    break;
  }
}
   d537c:	e019      	b.n	d53b2 <loop+0x1ea>
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
      TimePassed = Time.minute();
   d537e:	f002 f851 	bl	d7424 <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d5382:	2303      	movs	r3, #3
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
      TimePassed = Time.minute();
   d5384:	6028      	str	r0, [r5, #0]
   d5386:	e013      	b.n	d53b0 <loop+0x1e8>
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
    || upperHumidityThresholdCrossed \
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d5388:	4b1a      	ldr	r3, [pc, #104]	; (d53f4 <loop+0x22c>)
   d538a:	781b      	ldrb	r3, [r3, #0]
   d538c:	b943      	cbnz	r3, d53a0 <loop+0x1d8>
      TimePassed = Time.minute();
      state = MEASURING_STATE;                                                     
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
   d538e:	4b1a      	ldr	r3, [pc, #104]	; (d53f8 <loop+0x230>)
   d5390:	781b      	ldrb	r3, [r3, #0]
   d5392:	b92b      	cbnz	r3, d53a0 <loop+0x1d8>
    || upperHumidityThresholdCrossed \
   d5394:	4b19      	ldr	r3, [pc, #100]	; (d53fc <loop+0x234>)
   d5396:	781b      	ldrb	r3, [r3, #0]
   d5398:	b913      	cbnz	r3, d53a0 <loop+0x1d8>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d539a:	4b19      	ldr	r3, [pc, #100]	; (d5400 <loop+0x238>)
   d539c:	781b      	ldrb	r3, [r3, #0]
   d539e:	b143      	cbz	r3, d53b2 <loop+0x1ea>
   d53a0:	f002 f840 	bl	d7424 <_ZN9TimeClass6minuteEv>
   d53a4:	4b17      	ldr	r3, [pc, #92]	; (d5404 <loop+0x23c>)
   d53a6:	681b      	ldr	r3, [r3, #0]
   d53a8:	1ac0      	subs	r0, r0, r3
   d53aa:	2805      	cmp	r0, #5
   d53ac:	dd01      	ble.n	d53b2 <loop+0x1ea>
    {
     
      state = THRESHOLD_CROSSED;
   d53ae:	2304      	movs	r3, #4
   d53b0:	7023      	strb	r3, [r4, #0]
      delay(2000);
      System.reset();
    }
    break;
  }
}
   d53b2:	b004      	add	sp, #16
   d53b4:	bd70      	pop	{r4, r5, r6, pc}
   d53b6:	bf00      	nop
   d53b8:	2003e240 	.word	0x2003e240
   d53bc:	2003e0b0 	.word	0x2003e0b0
   d53c0:	2003e1e0 	.word	0x2003e1e0
   d53c4:	2003e288 	.word	0x2003e288
   d53c8:	2003e1e4 	.word	0x2003e1e4
   d53cc:	2003e2b4 	.word	0x2003e2b4
   d53d0:	2003e1e1 	.word	0x2003e1e1
   d53d4:	000db145 	.word	0x000db145
   d53d8:	000db078 	.word	0x000db078
   d53dc:	2003e340 	.word	0x2003e340
   d53e0:	2003e0b8 	.word	0x2003e0b8
   d53e4:	2003e1dc 	.word	0x2003e1dc
   d53e8:	000db15f 	.word	0x000db15f
   d53ec:	000db427 	.word	0x000db427
   d53f0:	000db178 	.word	0x000db178
   d53f4:	2003e289 	.word	0x2003e289
   d53f8:	2003e2b0 	.word	0x2003e2b0
   d53fc:	2003e241 	.word	0x2003e241
   d5400:	2003e344 	.word	0x2003e344
   d5404:	2003e244 	.word	0x2003e244

000d5408 <_Z17setUpperTempLimit6String>:
}

// These function will allow to change the upper and lower limits for alerting the customer. 

int setUpperTempLimit(String value)
{
   d5408:	b510      	push	{r4, lr}
   d540a:	b088      	sub	sp, #32
   d540c:	4604      	mov	r4, r0
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d540e:	f001 ff66 	bl	d72de <_ZNK6String7toFloatEv>
   d5412:	4b0f      	ldr	r3, [pc, #60]	; (d5450 <_Z17setUpperTempLimit6String+0x48>)
   d5414:	ed83 0a08 	vstr	s0, [r3, #32]
  waitUntil(meterParticlePublish);
   d5418:	f7ff fc1c 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d541c:	4621      	mov	r1, r4
   d541e:	a804      	add	r0, sp, #16
   d5420:	f001 ff28 	bl	d7274 <_ZN6StringC1ERKS_>
   d5424:	4b0b      	ldr	r3, [pc, #44]	; (d5454 <_Z17setUpperTempLimit6String+0x4c>)
   d5426:	490c      	ldr	r1, [pc, #48]	; (d5458 <_Z17setUpperTempLimit6String+0x50>)
   d5428:	781b      	ldrb	r3, [r3, #0]
   d542a:	2200      	movs	r2, #0
   d542c:	f88d 2000 	strb.w	r2, [sp]
   d5430:	a802      	add	r0, sp, #8
   d5432:	9a04      	ldr	r2, [sp, #16]
   d5434:	f7ff fbac 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d5438:	a803      	add	r0, sp, #12
   d543a:	f7ff fc55 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d543e:	a804      	add	r0, sp, #16
   d5440:	f001 feaf 	bl	d71a2 <_ZN6StringD1Ev>
  updateThresholdValue();
   d5444:	f7ff fc12 	bl	d4c6c <_Z20updateThresholdValuev>
  return 1;
}
   d5448:	2001      	movs	r0, #1
   d544a:	b008      	add	sp, #32
   d544c:	bd10      	pop	{r4, pc}
   d544e:	bf00      	nop
   d5450:	2003e248 	.word	0x2003e248
   d5454:	2003e1e1 	.word	0x2003e1e1
   d5458:	000db18c 	.word	0x000db18c

000d545c <_Z17setLowerTempLimit6String>:

int setLowerTempLimit(String value)
{
   d545c:	b510      	push	{r4, lr}
   d545e:	b088      	sub	sp, #32
   d5460:	4604      	mov	r4, r0
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d5462:	f001 ff3c 	bl	d72de <_ZNK6String7toFloatEv>
   d5466:	4b0f      	ldr	r3, [pc, #60]	; (d54a4 <_Z17setLowerTempLimit6String+0x48>)
   d5468:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  waitUntil(meterParticlePublish);
   d546c:	f7ff fbf2 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d5470:	4621      	mov	r1, r4
   d5472:	a804      	add	r0, sp, #16
   d5474:	f001 fefe 	bl	d7274 <_ZN6StringC1ERKS_>
   d5478:	4b0b      	ldr	r3, [pc, #44]	; (d54a8 <_Z17setLowerTempLimit6String+0x4c>)
   d547a:	490c      	ldr	r1, [pc, #48]	; (d54ac <_Z17setLowerTempLimit6String+0x50>)
   d547c:	781b      	ldrb	r3, [r3, #0]
   d547e:	2200      	movs	r2, #0
   d5480:	f88d 2000 	strb.w	r2, [sp]
   d5484:	a802      	add	r0, sp, #8
   d5486:	9a04      	ldr	r2, [sp, #16]
   d5488:	f7ff fb82 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d548c:	a803      	add	r0, sp, #12
   d548e:	f7ff fc2b 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5492:	a804      	add	r0, sp, #16
   d5494:	f001 fe85 	bl	d71a2 <_ZN6StringD1Ev>
  updateThresholdValue();
   d5498:	f7ff fbe8 	bl	d4c6c <_Z20updateThresholdValuev>

  return 1;

}
   d549c:	2001      	movs	r0, #1
   d549e:	b008      	add	sp, #32
   d54a0:	bd10      	pop	{r4, pc}
   d54a2:	bf00      	nop
   d54a4:	2003e248 	.word	0x2003e248
   d54a8:	2003e1e1 	.word	0x2003e1e1
   d54ac:	000db1a0 	.word	0x000db1a0

000d54b0 <_Z21setUpperHumidityLimit6String>:

int setUpperHumidityLimit(String value)
{
   d54b0:	b510      	push	{r4, lr}
   d54b2:	b088      	sub	sp, #32
   d54b4:	4604      	mov	r4, r0
  sensor_data.upperHumidityThreshold = value.toFloat();
   d54b6:	f001 ff12 	bl	d72de <_ZNK6String7toFloatEv>
   d54ba:	4b0f      	ldr	r3, [pc, #60]	; (d54f8 <_Z21setUpperHumidityLimit6String+0x48>)
   d54bc:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
  waitUntil(meterParticlePublish);
   d54c0:	f7ff fbc8 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d54c4:	4621      	mov	r1, r4
   d54c6:	a804      	add	r0, sp, #16
   d54c8:	f001 fed4 	bl	d7274 <_ZN6StringC1ERKS_>
   d54cc:	4b0b      	ldr	r3, [pc, #44]	; (d54fc <_Z21setUpperHumidityLimit6String+0x4c>)
   d54ce:	490c      	ldr	r1, [pc, #48]	; (d5500 <_Z21setUpperHumidityLimit6String+0x50>)
   d54d0:	781b      	ldrb	r3, [r3, #0]
   d54d2:	2200      	movs	r2, #0
   d54d4:	f88d 2000 	strb.w	r2, [sp]
   d54d8:	a802      	add	r0, sp, #8
   d54da:	9a04      	ldr	r2, [sp, #16]
   d54dc:	f7ff fb58 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d54e0:	a803      	add	r0, sp, #12
   d54e2:	f7ff fc01 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54e6:	a804      	add	r0, sp, #16
   d54e8:	f001 fe5b 	bl	d71a2 <_ZN6StringD1Ev>
  updateThresholdValue();
   d54ec:	f7ff fbbe 	bl	d4c6c <_Z20updateThresholdValuev>

  return 1;
}
   d54f0:	2001      	movs	r0, #1
   d54f2:	b008      	add	sp, #32
   d54f4:	bd10      	pop	{r4, pc}
   d54f6:	bf00      	nop
   d54f8:	2003e248 	.word	0x2003e248
   d54fc:	2003e1e1 	.word	0x2003e1e1
   d5500:	000db18c 	.word	0x000db18c

000d5504 <_Z21setLowerHumidityLimit6String>:

int setLowerHumidityLimit(String value)
{
   d5504:	b510      	push	{r4, lr}
   d5506:	b088      	sub	sp, #32
   d5508:	4604      	mov	r4, r0
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d550a:	f001 fee8 	bl	d72de <_ZNK6String7toFloatEv>
   d550e:	4b0f      	ldr	r3, [pc, #60]	; (d554c <_Z21setLowerHumidityLimit6String+0x48>)
   d5510:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
  waitUntil(meterParticlePublish);
   d5514:	f7ff fb9e 	bl	d4c54 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.29>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d5518:	4621      	mov	r1, r4
   d551a:	a804      	add	r0, sp, #16
   d551c:	f001 feaa 	bl	d7274 <_ZN6StringC1ERKS_>
   d5520:	4b0b      	ldr	r3, [pc, #44]	; (d5550 <_Z21setLowerHumidityLimit6String+0x4c>)
   d5522:	490c      	ldr	r1, [pc, #48]	; (d5554 <_Z21setLowerHumidityLimit6String+0x50>)
   d5524:	781b      	ldrb	r3, [r3, #0]
   d5526:	2200      	movs	r2, #0
   d5528:	f88d 2000 	strb.w	r2, [sp]
   d552c:	a802      	add	r0, sp, #8
   d552e:	9a04      	ldr	r2, [sp, #16]
   d5530:	f7ff fb2e 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d5534:	a803      	add	r0, sp, #12
   d5536:	f7ff fbd7 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d553a:	a804      	add	r0, sp, #16
   d553c:	f001 fe31 	bl	d71a2 <_ZN6StringD1Ev>
  updateThresholdValue();
   d5540:	f7ff fb94 	bl	d4c6c <_Z20updateThresholdValuev>
  return 1;
}
   d5544:	2001      	movs	r0, #1
   d5546:	b008      	add	sp, #32
   d5548:	bd10      	pop	{r4, pc}
   d554a:	bf00      	nop
   d554c:	2003e248 	.word	0x2003e248
   d5550:	2003e1e1 	.word	0x2003e1e1
   d5554:	000db1a0 	.word	0x000db1a0

000d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5558:	2300      	movs	r3, #0
   d555a:	2204      	movs	r2, #4
   d555c:	f000 bde4 	b.w	d6128 <spark_variable>

000d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5560:	4602      	mov	r2, r0
   d5562:	4801      	ldr	r0, [pc, #4]	; (d5568 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5564:	f000 bfad 	b.w	d64c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5568:	000d6497 	.word	0x000d6497

000d556c <setup>:

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()                                                                                // Note: Disconnected Setup()
{
   d556c:	b570      	push	{r4, r5, r6, lr}
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d556e:	4b61      	ldr	r3, [pc, #388]	; (d56f4 <setup+0x188>)

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()                                                                                // Note: Disconnected Setup()
{
   d5570:	b0b8      	sub	sp, #224	; 0xe0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5572:	aa08      	add	r2, sp, #32
   d5574:	f103 0510 	add.w	r5, r3, #16
   d5578:	4616      	mov	r6, r2
   d557a:	6818      	ldr	r0, [r3, #0]
   d557c:	6859      	ldr	r1, [r3, #4]
   d557e:	4614      	mov	r4, r2
   d5580:	c403      	stmia	r4!, {r0, r1}
   d5582:	3308      	adds	r3, #8
   d5584:	42ab      	cmp	r3, r5
   d5586:	4622      	mov	r2, r4
   d5588:	d1f7      	bne.n	d557a <setup+0xe>
   d558a:	8819      	ldrh	r1, [r3, #0]
   d558c:	789b      	ldrb	r3, [r3, #2]
   d558e:	8021      	strh	r1, [r4, #0]
   d5590:	222d      	movs	r2, #45	; 0x2d
   d5592:	70a3      	strb	r3, [r4, #2]
   d5594:	2100      	movs	r1, #0
   d5596:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  state = IDLE_STATE;
   d559a:	4c57      	ldr	r4, [pc, #348]	; (d56f8 <setup+0x18c>)
#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()                                                                                // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d559c:	f003 fae3 	bl	d8b66 <memset>
  state = IDLE_STATE;
   d55a0:	2302      	movs	r3, #2

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d55a2:	2101      	movs	r1, #1
   d55a4:	2007      	movs	r0, #7


void setup()                                                                                // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
  state = IDLE_STATE;
   d55a6:	7023      	strb	r3, [r4, #0]

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d55a8:	f002 f914 	bl	d77d4 <pinMode>
  pinMode(tempLED,OUTPUT);
   d55ac:	2101      	movs	r1, #1
   d55ae:	2005      	movs	r0, #5
   d55b0:	f002 f910 	bl	d77d4 <pinMode>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d55b4:	a804      	add	r0, sp, #16
   d55b6:	f000 fddf 	bl	d6178 <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d55ba:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d55bc:	2300      	movs	r3, #0
   d55be:	227d      	movs	r2, #125	; 0x7d
   d55c0:	a918      	add	r1, sp, #96	; 0x60
   d55c2:	a804      	add	r0, sp, #16
   d55c4:	f001 fe73 	bl	d72ae <_ZNK6String8getBytesEPhjj>
   d55c8:	462b      	mov	r3, r5
   d55ca:	462a      	mov	r2, r5
   d55cc:	494b      	ldr	r1, [pc, #300]	; (d56fc <setup+0x190>)
   d55ce:	9501      	str	r5, [sp, #4]
   d55d0:	9500      	str	r5, [sp, #0]
   d55d2:	a818      	add	r0, sp, #96	; 0x60
   d55d4:	f000 fde0 	bl	d6198 <spark_subscribe>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d55d8:	4949      	ldr	r1, [pc, #292]	; (d5700 <setup+0x194>)
   d55da:	484a      	ldr	r0, [pc, #296]	; (d5704 <setup+0x198>)
   d55dc:	6809      	ldr	r1, [r1, #0]
   d55de:	462b      	mov	r3, r5
   d55e0:	2204      	movs	r2, #4
   d55e2:	f000 fda1 	bl	d6128 <spark_variable>
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
       
  Particle.variable("Release",releaseNumber);
  Particle.variable("temperature", temperatureString);
   d55e6:	4948      	ldr	r1, [pc, #288]	; (d5708 <setup+0x19c>)
   d55e8:	4848      	ldr	r0, [pc, #288]	; (d570c <setup+0x1a0>)
   d55ea:	f7ff ffb5 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("humidity", humidityString);
   d55ee:	4948      	ldr	r1, [pc, #288]	; (d5710 <setup+0x1a4>)
   d55f0:	4848      	ldr	r0, [pc, #288]	; (d5714 <setup+0x1a8>)
   d55f2:	f7ff ffb1 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("pressure", pressureString);
   d55f6:	4948      	ldr	r1, [pc, #288]	; (d5718 <setup+0x1ac>)
   d55f8:	4848      	ldr	r0, [pc, #288]	; (d571c <setup+0x1b0>)
   d55fa:	f7ff ffad 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("temperature-Upper",upperTemperatureThresholdString);
   d55fe:	4948      	ldr	r1, [pc, #288]	; (d5720 <setup+0x1b4>)
   d5600:	4848      	ldr	r0, [pc, #288]	; (d5724 <setup+0x1b8>)
   d5602:	f7ff ffa9 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("temperature-lower",lowerTemperatureThresholdString);
   d5606:	4948      	ldr	r1, [pc, #288]	; (d5728 <setup+0x1bc>)
   d5608:	4848      	ldr	r0, [pc, #288]	; (d572c <setup+0x1c0>)
   d560a:	f7ff ffa5 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("humidity-upper",upperHumidityThresholdString);
   d560e:	4948      	ldr	r1, [pc, #288]	; (d5730 <setup+0x1c4>)
   d5610:	4848      	ldr	r0, [pc, #288]	; (d5734 <setup+0x1c8>)
   d5612:	f7ff ffa1 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  Particle.variable("humidity-lower",lowerHumidityThresholdString);
   d5616:	4948      	ldr	r1, [pc, #288]	; (d5738 <setup+0x1cc>)
   d5618:	4848      	ldr	r0, [pc, #288]	; (d573c <setup+0x1d0>)
   d561a:	f7ff ff9d 	bl	d5558 <_ZN10CloudClass8variableIA15_cIRA24_cEEEbRKT_DpOT0_>
  
  Particle.function("Measure-Now",measureNow);
   d561e:	4948      	ldr	r1, [pc, #288]	; (d5740 <setup+0x1d4>)
   d5620:	4848      	ldr	r0, [pc, #288]	; (d5744 <setup+0x1d8>)
   d5622:	f7ff ff9d 	bl	d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5626:	4948      	ldr	r1, [pc, #288]	; (d5748 <setup+0x1dc>)
   d5628:	4848      	ldr	r0, [pc, #288]	; (d574c <setup+0x1e0>)
   d562a:	f7ff ff99 	bl	d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Upper-Limit",setUpperTempLimit);
   d562e:	4948      	ldr	r1, [pc, #288]	; (d5750 <setup+0x1e4>)
   d5630:	4848      	ldr	r0, [pc, #288]	; (d5754 <setup+0x1e8>)
   d5632:	f7ff ff95 	bl	d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Lower-Limit",setLowerTempLimit);
   d5636:	4948      	ldr	r1, [pc, #288]	; (d5758 <setup+0x1ec>)
   d5638:	4848      	ldr	r0, [pc, #288]	; (d575c <setup+0x1f0>)
   d563a:	f7ff ff91 	bl	d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidity-Lower-Limit",setLowerHumidityLimit);
   d563e:	4948      	ldr	r1, [pc, #288]	; (d5760 <setup+0x1f4>)
   d5640:	4848      	ldr	r0, [pc, #288]	; (d5764 <setup+0x1f8>)
   d5642:	f7ff ff8d 	bl	d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidty-upper-Limit",setUpperHumidityLimit);
   d5646:	4948      	ldr	r1, [pc, #288]	; (d5768 <setup+0x1fc>)
   d5648:	4848      	ldr	r0, [pc, #288]	; (d576c <setup+0x200>)
   d564a:	f7ff ff89 	bl	d5560 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>

  // And set the flags from the control register
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (!bme.begin()) {                                                                      // Start the BME680 Sensor
   d564e:	2177      	movs	r1, #119	; 0x77
   d5650:	4847      	ldr	r0, [pc, #284]	; (d5770 <setup+0x204>)
   d5652:	f000 fa4f 	bl	d5af4 <_ZN15Adafruit_BME6805beginEh>
   d5656:	b960      	cbnz	r0, d5672 <setup+0x106>
   d5658:	f000 fb82 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d565c:	4d45      	ldr	r5, [pc, #276]	; (d5774 <setup+0x208>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
   d565e:	4946      	ldr	r1, [pc, #280]	; (d5778 <setup+0x20c>)

  // And set the flags from the control register
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (!bme.begin()) {                                                                      // Start the BME680 Sensor
    resetTimeStamp = millis();
   d5660:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
   d5662:	4630      	mov	r0, r6
   d5664:	f003 faba 	bl	d8bdc <strcpy>
    state = ERROR_STATE;
   d5668:	2301      	movs	r3, #1
   d566a:	7023      	strb	r3, [r4, #0]
   d566c:	f000 fb78 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d5670:	6028      	str	r0, [r5, #0]
  }

  // Set up the sampling paramatures
  bme.setTemperatureOversampling(BME680_OS_8X);
   d5672:	2104      	movs	r1, #4
   d5674:	483e      	ldr	r0, [pc, #248]	; (d5770 <setup+0x204>)
   d5676:	f000 f9a9 	bl	d59cc <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
  bme.setHumidityOversampling(BME680_OS_2X);
   d567a:	2102      	movs	r1, #2
   d567c:	483c      	ldr	r0, [pc, #240]	; (d5770 <setup+0x204>)
   d567e:	f000 f9b2 	bl	d59e6 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
  bme.setPressureOversampling(BME680_OS_4X);
   d5682:	2103      	movs	r1, #3
   d5684:	483a      	ldr	r0, [pc, #232]	; (d5770 <setup+0x204>)
   d5686:	f000 f9bb 	bl	d5a00 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
   d568a:	2102      	movs	r1, #2
   d568c:	4838      	ldr	r0, [pc, #224]	; (d5770 <setup+0x204>)
   d568e:	f000 f9c4 	bl	d5a1a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
  bme.setGasHeater(320, 150); // 320*C for 150 ms
   d5692:	2296      	movs	r2, #150	; 0x96
   d5694:	f44f 71a0 	mov.w	r1, #320	; 0x140
   d5698:	4835      	ldr	r0, [pc, #212]	; (d5770 <setup+0x204>)
   d569a:	f000 f989 	bl	d59b0 <_ZN15Adafruit_BME68012setGasHeaterEtt>

  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d569e:	f7ff fbd7 	bl	d4e50 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d56a2:	f7ff fae3 	bl	d4c6c <_Z20updateThresholdValuev>
 
  if(!connectToParticle()) {
   d56a6:	f7ff fa81 	bl	d4bac <_Z17connectToParticlev>
   d56aa:	b948      	cbnz	r0, d56c0 <setup+0x154>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d56ac:	2301      	movs	r3, #1
   d56ae:	7023      	strb	r3, [r4, #0]
   d56b0:	f000 fb56 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d56b4:	4b2f      	ldr	r3, [pc, #188]	; (d5774 <setup+0x208>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d56b6:	4931      	ldr	r1, [pc, #196]	; (d577c <setup+0x210>)
  takeMeasurements();                                                                      // For the benefit of monitoring the device
  updateThresholdValue();                                                                  // For checking values of each device
 
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
   d56b8:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d56ba:	4630      	mov	r0, r6
   d56bc:	f003 fa8e 	bl	d8bdc <strcpy>
  }

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d56c0:	4b2f      	ldr	r3, [pc, #188]	; (d5780 <setup+0x214>)
   d56c2:	781b      	ldrb	r3, [r3, #0]
   d56c4:	b163      	cbz	r3, d56e0 <setup+0x174>
   d56c6:	4b2f      	ldr	r3, [pc, #188]	; (d5784 <setup+0x218>)
   d56c8:	492f      	ldr	r1, [pc, #188]	; (d5788 <setup+0x21c>)
   d56ca:	781b      	ldrb	r3, [r3, #0]
   d56cc:	2200      	movs	r2, #0
   d56ce:	f88d 2000 	strb.w	r2, [sp]
   d56d2:	a802      	add	r0, sp, #8
   d56d4:	4632      	mov	r2, r6
   d56d6:	f7ff fa5b 	bl	d4b90 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.58.constprop.65>
   d56da:	a803      	add	r0, sp, #12
   d56dc:	f7ff fb04 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56e0:	f000 fb3e 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d56e4:	4b29      	ldr	r3, [pc, #164]	; (d578c <setup+0x220>)
   d56e6:	6018      	str	r0, [r3, #0]

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
  pinMode(tempLED,OUTPUT);
  
  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d56e8:	a804      	add	r0, sp, #16
   d56ea:	f001 fd5a 	bl	d71a2 <_ZN6StringD1Ev>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}
   d56ee:	b038      	add	sp, #224	; 0xe0
   d56f0:	bd70      	pop	{r4, r5, r6, pc}
   d56f2:	bf00      	nop
   d56f4:	000daf76 	.word	0x000daf76
   d56f8:	2003e240 	.word	0x2003e240
   d56fc:	000d4db9 	.word	0x000d4db9
   d5700:	2003e0ac 	.word	0x2003e0ac
   d5704:	000db1b4 	.word	0x000db1b4
   d5708:	2003e1cc 	.word	0x2003e1cc
   d570c:	000db1bc 	.word	0x000db1bc
   d5710:	2003e2b8 	.word	0x2003e2b8
   d5714:	000db1c8 	.word	0x000db1c8
   d5718:	2003e28a 	.word	0x2003e28a
   d571c:	000db1d1 	.word	0x000db1d1
   d5720:	2003e208 	.word	0x2003e208
   d5724:	000db1da 	.word	0x000db1da
   d5728:	2003e1e8 	.word	0x2003e1e8
   d572c:	000db1ec 	.word	0x000db1ec
   d5730:	2003e228 	.word	0x2003e228
   d5734:	000db1fe 	.word	0x000db1fe
   d5738:	2003e1b4 	.word	0x2003e1b4
   d573c:	000db20d 	.word	0x000db20d
   d5740:	000d4b65 	.word	0x000d4b65
   d5744:	000db21c 	.word	0x000db21c
   d5748:	000d50dd 	.word	0x000d50dd
   d574c:	000db228 	.word	0x000db228
   d5750:	000d5409 	.word	0x000d5409
   d5754:	000db235 	.word	0x000db235
   d5758:	000d545d 	.word	0x000d545d
   d575c:	000db246 	.word	0x000db246
   d5760:	000d5505 	.word	0x000d5505
   d5764:	000db257 	.word	0x000db257
   d5768:	000d54b1 	.word	0x000d54b1
   d576c:	000db26c 	.word	0x000db26c
   d5770:	2003e2c8 	.word	0x2003e2c8
   d5774:	2003e2b4 	.word	0x2003e2b4
   d5778:	000db280 	.word	0x000db280
   d577c:	000db29e 	.word	0x000db29e
   d5780:	2003e0b0 	.word	0x2003e0b0
   d5784:	2003e1e1 	.word	0x2003e1e1
   d5788:	000db2b0 	.word	0x000db2b0
   d578c:	2003e340 	.word	0x2003e340

000d5790 <_GLOBAL__sub_I_bme>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5790:	4b13      	ldr	r3, [pc, #76]	; (d57e0 <_GLOBAL__sub_I_bme+0x50>)
void updateThresholdValue(){
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d5792:	b570      	push	{r4, r5, r6, lr}
   d5794:	2400      	movs	r4, #0
   d5796:	701c      	strb	r4, [r3, #0]
   d5798:	4b12      	ldr	r3, [pc, #72]	; (d57e4 <_GLOBAL__sub_I_bme+0x54>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d579a:	4d13      	ldr	r5, [pc, #76]	; (d57e8 <_GLOBAL__sub_I_bme+0x58>)
   d579c:	2601      	movs	r6, #1
   d579e:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d57a0:	f000 fb1e 	bl	d5de0 <HAL_Pin_Map>



#define SEALEVELPRESSURE_HPA (1013.25)                                                     // Universal variables

Adafruit_BME680 bme;                                                                       // Instantiate the I2C library
   d57a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d57a8:	4810      	ldr	r0, [pc, #64]	; (d57ec <_GLOBAL__sub_I_bme+0x5c>)
   d57aa:	f000 f873 	bl	d5894 <_ZN15Adafruit_BME680C1Ea>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d57ae:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57b2:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d57b4:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d57b6:	602c      	str	r4, [r5, #0]
   d57b8:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d57ba:	71ac      	strb	r4, [r5, #6]
   d57bc:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57be:	f000 fc6f 	bl	d60a0 <set_system_mode>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d57c2:	4a0b      	ldr	r2, [pc, #44]	; (d57f0 <_GLOBAL__sub_I_bme+0x60>)
   d57c4:	490b      	ldr	r1, [pc, #44]	; (d57f4 <_GLOBAL__sub_I_bme+0x64>)
   d57c6:	4628      	mov	r0, r5
   d57c8:	f002 f896 	bl	d78f8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d57cc:	4621      	mov	r1, r4
   d57ce:	4630      	mov	r0, r6
   d57d0:	f000 fc76 	bl	d60c0 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d57d4:	4631      	mov	r1, r6
   d57d6:	2004      	movs	r0, #4
void updateThresholdValue(){
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d57d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d57dc:	f000 baa8 	b.w	d5d30 <HAL_Feature_Set>
   d57e0:	2003e278 	.word	0x2003e278
   d57e4:	2003e1e1 	.word	0x2003e1e1
   d57e8:	2003e29c 	.word	0x2003e29c
   d57ec:	2003e2c8 	.word	0x2003e2c8
   d57f0:	2003e1b0 	.word	0x2003e1b0
   d57f4:	000d4b81 	.word	0x000d4b81

000d57f8 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
   d57f8:	f000 bd76 	b.w	d62e8 <delay>

000d57fc <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d57fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57fe:	4607      	mov	r7, r0
   d5800:	4614      	mov	r4, r2
   d5802:	461d      	mov	r5, r3
   d5804:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
   d5806:	f002 f851 	bl	d78ac <_Z19__fetch_global_Wirev>
   d580a:	4639      	mov	r1, r7
   d580c:	f001 f9af 	bl	d6b6e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d5810:	f002 f84c 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5814:	6803      	ldr	r3, [r0, #0]
   d5816:	4631      	mov	r1, r6
   d5818:	689b      	ldr	r3, [r3, #8]
   d581a:	4798      	blx	r3
   d581c:	4425      	add	r5, r4
  while (len--) {
   d581e:	42ac      	cmp	r4, r5
   d5820:	d007      	beq.n	d5832 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
   d5822:	f002 f843 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5826:	6803      	ldr	r3, [r0, #0]
   d5828:	f814 1b01 	ldrb.w	r1, [r4], #1
   d582c:	689b      	ldr	r3, [r3, #8]
   d582e:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
   d5830:	e7f5      	b.n	d581e <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
   d5832:	f002 f83b 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5836:	f001 f9a2 	bl	d6b7e <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d583a:	2000      	movs	r0, #0
   d583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d583e <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d583e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5840:	4606      	mov	r6, r0
   d5842:	4615      	mov	r5, r2
   d5844:	461c      	mov	r4, r3
   d5846:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
   d5848:	f002 f830 	bl	d78ac <_Z19__fetch_global_Wirev>
   d584c:	4631      	mov	r1, r6
   d584e:	f001 f98e 	bl	d6b6e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
   d5852:	f002 f82b 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5856:	6803      	ldr	r3, [r0, #0]
   d5858:	4639      	mov	r1, r7
   d585a:	689b      	ldr	r3, [r3, #8]
   d585c:	4798      	blx	r3
  Wire.endTransmission();
   d585e:	f002 f825 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5862:	f001 f98c 	bl	d6b7e <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
   d5866:	f002 f821 	bl	d78ac <_Z19__fetch_global_Wirev>
   d586a:	b2e2      	uxtb	r2, r4
   d586c:	4631      	mov	r1, r6
   d586e:	f001 f97b 	bl	d6b68 <_ZN7TwoWire11requestFromEhj>
   d5872:	4284      	cmp	r4, r0
   d5874:	d10a      	bne.n	d588c <_ZL8i2c_readhhPht+0x4e>
   d5876:	442c      	add	r4, r5
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
   d5878:	42a5      	cmp	r5, r4
   d587a:	d009      	beq.n	d5890 <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
   d587c:	f002 f816 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5880:	6803      	ldr	r3, [r0, #0]
   d5882:	695b      	ldr	r3, [r3, #20]
   d5884:	4798      	blx	r3
   d5886:	f805 0b01 	strb.w	r0, [r5], #1
   d588a:	e7f5      	b.n	d5878 <_ZL8i2c_readhhPht+0x3a>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
   d588c:	2001      	movs	r0, #1
   d588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
   d5890:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5894 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
   d5894:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
   d5896:	4907      	ldr	r1, [pc, #28]	; (d58b4 <_ZN15Adafruit_BME680C1Ea+0x20>)
   d5898:	22ff      	movs	r2, #255	; 0xff
   d589a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
   d589c:	4906      	ldr	r1, [pc, #24]	; (d58b8 <_ZN15Adafruit_BME680C1Ea+0x24>)
   d589e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
   d58a0:	4906      	ldr	r1, [pc, #24]	; (d58bc <_ZN15Adafruit_BME680C1Ea+0x28>)
   d58a2:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
   d58a4:	2200      	movs	r2, #0
   d58a6:	7502      	strb	r2, [r0, #20]
   d58a8:	74c2      	strb	r2, [r0, #19]
   d58aa:	7482      	strb	r2, [r0, #18]
   d58ac:	7442      	strb	r2, [r0, #17]
   d58ae:	7402      	strb	r2, [r0, #16]
}
   d58b0:	4770      	bx	lr
   d58b2:	bf00      	nop
   d58b4:	2003e356 	.word	0x2003e356
   d58b8:	2003e354 	.word	0x2003e354
   d58bc:	2003e355 	.word	0x2003e355

000d58c0 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d58c0:	b530      	push	{r4, r5, lr}
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d58c2:	2301      	movs	r3, #1
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d58c4:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d58c6:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d58ca:	7ca3      	ldrb	r3, [r4, #18]

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
  uint8_t set_required_settings = 0;
   d58cc:	7c40      	ldrb	r0, [r0, #17]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
   d58ce:	b087      	sub	sp, #28
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
   d58d0:	b10b      	cbz	r3, d58d6 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
   d58d2:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
   d58d6:	7ce3      	ldrb	r3, [r4, #19]
   d58d8:	b10b      	cbz	r3, d58de <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
   d58da:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
   d58de:	7c23      	ldrb	r3, [r4, #16]
   d58e0:	b10b      	cbz	r3, d58e6 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
   d58e2:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
   d58e6:	7d23      	ldrb	r3, [r4, #20]
   d58e8:	b10b      	cbz	r3, d58ee <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
   d58ea:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
   d58ee:	f104 0520 	add.w	r5, r4, #32
   d58f2:	4629      	mov	r1, r5
   d58f4:	f7fe fe07 	bl	d4506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
   d58f8:	b108      	cbz	r0, d58fe <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
   d58fa:	2000      	movs	r0, #0
   d58fc:	e04f      	b.n	d599e <_ZN15Adafruit_BME68014performReadingEv+0xde>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
   d58fe:	4628      	mov	r0, r5
   d5900:	f7fe fdc2 	bl	d4488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
   d5904:	2800      	cmp	r0, #0
   d5906:	d1f8      	bne.n	d58fa <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
   d5908:	4629      	mov	r1, r5
   d590a:	f10d 0002 	add.w	r0, sp, #2
   d590e:	f7fe ff77 	bl	d4800 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
   d5912:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d5916:	0040      	lsls	r0, r0, #1
   d5918:	f000 fce6 	bl	d62e8 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
   d591c:	4629      	mov	r1, r5
   d591e:	a801      	add	r0, sp, #4
   d5920:	f7fe ffa2 	bl	d4868 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
   d5924:	2800      	cmp	r0, #0
   d5926:	d1e8      	bne.n	d58fa <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
   d5928:	7c63      	ldrb	r3, [r4, #17]
   d592a:	b15b      	cbz	r3, d5944 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
   d592c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
   d5930:	f002 faa0 	bl	d7e74 <__aeabi_i2d>
   d5934:	2200      	movs	r2, #0
   d5936:	4b1b      	ldr	r3, [pc, #108]	; (d59a4 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
   d5938:	f002 fc2c 	bl	d8194 <__aeabi_ddiv>
   d593c:	f002 fde2 	bl	d8504 <__aeabi_d2f>
   d5940:	6020      	str	r0, [r4, #0]
   d5942:	e001      	b.n	d5948 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
   d5944:	4b18      	ldr	r3, [pc, #96]	; (d59a8 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5946:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
   d5948:	7ca3      	ldrb	r3, [r4, #18]
   d594a:	b153      	cbz	r3, d5962 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
   d594c:	9804      	ldr	r0, [sp, #16]
   d594e:	f002 fa81 	bl	d7e54 <__aeabi_ui2d>
   d5952:	2200      	movs	r2, #0
   d5954:	4b15      	ldr	r3, [pc, #84]	; (d59ac <_ZN15Adafruit_BME68014performReadingEv+0xec>)
   d5956:	f002 fc1d 	bl	d8194 <__aeabi_ddiv>
   d595a:	f002 fdd3 	bl	d8504 <__aeabi_d2f>
   d595e:	60a0      	str	r0, [r4, #8]
   d5960:	e001      	b.n	d5966 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
   d5962:	4b11      	ldr	r3, [pc, #68]	; (d59a8 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d5964:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
   d5966:	7ce3      	ldrb	r3, [r4, #19]
   d5968:	b133      	cbz	r3, d5978 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
   d596a:	eddd 7a03 	vldr	s15, [sp, #12]
   d596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5972:	edc4 7a01 	vstr	s15, [r4, #4]
   d5976:	e001      	b.n	d597c <_ZN15Adafruit_BME68014performReadingEv+0xbc>
  } else {
    pressure = NAN;
   d5978:	4b0b      	ldr	r3, [pc, #44]	; (d59a8 <_ZN15Adafruit_BME68014performReadingEv+0xe8>)
   d597a:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
   d597c:	7d20      	ldrb	r0, [r4, #20]
   d597e:	b168      	cbz	r0, d599c <_ZN15Adafruit_BME68014performReadingEv+0xdc>
    if (data.status & BME680_HEAT_STAB_MSK) {
   d5980:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5984:	06db      	lsls	r3, r3, #27
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d5986:	bf45      	ittet	mi
   d5988:	eddd 7a05 	vldrmi	s15, [sp, #20]
   d598c:	eef8 7a67 	vcvtmi.f32.u32	s15, s15
    } else {
      gas_resistance = 0;
   d5990:	2300      	movpl	r3, #0

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
    if (data.status & BME680_HEAT_STAB_MSK) {
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
   d5992:	edc4 7a03 	vstrmi	s15, [r4, #12]
    } else {
      gas_resistance = 0;
   d5996:	bf58      	it	pl
   d5998:	60e3      	strpl	r3, [r4, #12]
   d599a:	e000      	b.n	d599e <_ZN15Adafruit_BME68014performReadingEv+0xde>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
   d599c:	2001      	movs	r0, #1
}
   d599e:	b007      	add	sp, #28
   d59a0:	bd30      	pop	{r4, r5, pc}
   d59a2:	bf00      	nop
   d59a4:	40590000 	.word	0x40590000
   d59a8:	7fc00000 	.word	0x7fc00000
   d59ac:	408f4000 	.word	0x408f4000

000d59b0 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d59b0:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d59b4:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
   d59b8:	b101      	cbz	r1, d59bc <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
   d59ba:	b90a      	cbnz	r2, d59c0 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
   d59bc:	2300      	movs	r3, #0
   d59be:	e000      	b.n	d59c2 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d59c0:	2301      	movs	r3, #1
   d59c2:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
   d59c6:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
   d59c8:	2001      	movs	r0, #1
   d59ca:	4770      	bx	lr

000d59cc <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d59cc:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
   d59ce:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d59d0:	d807      	bhi.n	d59e2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
   d59d2:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
   d59d6:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d59d8:	b909      	cbnz	r1, d59de <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
   d59da:	7459      	strb	r1, [r3, #17]
   d59dc:	4770      	bx	lr
  else
    _tempEnabled = true;
   d59de:	7458      	strb	r0, [r3, #17]
   d59e0:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d59e2:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
   d59e4:	4770      	bx	lr

000d59e6 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d59e6:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
   d59e8:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d59ea:	d807      	bhi.n	d59fc <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
   d59ec:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
   d59f0:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d59f2:	b909      	cbnz	r1, d59f8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
   d59f4:	7499      	strb	r1, [r3, #18]
   d59f6:	4770      	bx	lr
  else
    _humEnabled = true;
   d59f8:	7498      	strb	r0, [r3, #18]
   d59fa:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d59fc:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
   d59fe:	4770      	bx	lr

000d5a00 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5a00:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
   d5a02:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
   d5a04:	d807      	bhi.n	d5a16 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
   d5a06:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
   d5a0a:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
   d5a0c:	b909      	cbnz	r1, d5a12 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
   d5a0e:	74d9      	strb	r1, [r3, #19]
   d5a10:	4770      	bx	lr
  else
    _presEnabled = true;
   d5a12:	74d8      	strb	r0, [r3, #19]
   d5a14:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
   d5a16:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
   d5a18:	4770      	bx	lr

000d5a1a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5a1a:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
   d5a1c:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5a1e:	d807      	bhi.n	d5a30 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
   d5a20:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
   d5a24:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
   d5a26:	b909      	cbnz	r1, d5a2c <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
   d5a28:	7419      	strb	r1, [r3, #16]
   d5a2a:	4770      	bx	lr
  else
    _filterEnabled = true;
   d5a2c:	7418      	strb	r0, [r3, #16]
   d5a2e:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
   d5a30:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
   d5a32:	4770      	bx	lr

000d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5a34:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d5a36:	4d09      	ldr	r5, [pc, #36]	; (d5a5c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d5a38:	6829      	ldr	r1, [r5, #0]
   d5a3a:	f011 0401 	ands.w	r4, r1, #1
   d5a3e:	d10a      	bne.n	d5a56 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d5a40:	4628      	mov	r0, r5
   d5a42:	f7fe fb30 	bl	d40a6 <__cxa_guard_acquire>
   d5a46:	b130      	cbz	r0, d5a56 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d5a48:	4621      	mov	r1, r4
   d5a4a:	4805      	ldr	r0, [pc, #20]	; (d5a60 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d5a4c:	f001 faf4 	bl	d7038 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a50:	4628      	mov	r0, r5
   d5a52:	f7fe fb2d 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d5a56:	4802      	ldr	r0, [pc, #8]	; (d5a60 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d5a58:	bd38      	pop	{r3, r4, r5, pc}
   d5a5a:	bf00      	nop
   d5a5c:	2003e348 	.word	0x2003e348
   d5a60:	2003e34c 	.word	0x2003e34c

000d5a64 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d5a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
   d5a68:	4d1b      	ldr	r5, [pc, #108]	; (d5ad8 <_ZL12spi_transferh+0x74>)
   d5a6a:	f995 3000 	ldrsb.w	r3, [r5]
   d5a6e:	3301      	adds	r3, #1
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
   d5a70:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
   d5a72:	d106      	bne.n	d5a82 <_ZL12spi_transferh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5a74:	f7ff ffde 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5a78:	4641      	mov	r1, r8
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d5a7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a7e:	f001 bb87 	b.w	d7190 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d5a82:	f8df 9058 	ldr.w	r9, [pc, #88]	; d5adc <_ZL12spi_transferh+0x78>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5a86:	f8df a058 	ldr.w	sl, [pc, #88]	; d5ae0 <_ZL12spi_transferh+0x7c>
   d5a8a:	2607      	movs	r6, #7
   d5a8c:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
   d5a8e:	f995 0000 	ldrsb.w	r0, [r5]
   d5a92:	2100      	movs	r1, #0
   d5a94:	b280      	uxth	r0, r0
   d5a96:	f001 feae 	bl	d77f6 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
   d5a9a:	2701      	movs	r7, #1
   d5a9c:	f999 0000 	ldrsb.w	r0, [r9]
   d5aa0:	fa07 f106 	lsl.w	r1, r7, r6
   d5aa4:	ea01 0108 	and.w	r1, r1, r8
   d5aa8:	b280      	uxth	r0, r0
   d5aaa:	f001 fea4 	bl	d77f6 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
   d5aae:	f995 0000 	ldrsb.w	r0, [r5]
   d5ab2:	4639      	mov	r1, r7
   d5ab4:	b280      	uxth	r0, r0
   d5ab6:	f001 fe9e 	bl	d77f6 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5aba:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d5abe:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5ac0:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d5ac2:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
   d5ac4:	f001 feb0 	bl	d7828 <digitalRead>
   d5ac8:	b100      	cbz	r0, d5acc <_ZL12spi_transferh+0x68>
      reply |= 1;
   d5aca:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
   d5acc:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d5ad0:	d2dd      	bcs.n	d5a8e <_ZL12spi_transferh+0x2a>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
   d5ad2:	4620      	mov	r0, r4
   d5ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ad8:	2003e355 	.word	0x2003e355
   d5adc:	2003e356 	.word	0x2003e356
   d5ae0:	2003e354 	.word	0x2003e354

000d5ae4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE5beginEv.isra.11>:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
   d5ae4:	b508      	push	{r3, lr}
        instance().begin();
   d5ae6:	f7ff ffa5 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d5aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5aee:	f001 baad 	b.w	d704c <_ZN8SPIClass5beginEv>
	...

000d5af4 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
   d5af4:	b538      	push	{r3, r4, r5, lr}
   d5af6:	4604      	mov	r4, r0
   d5af8:	460d      	mov	r5, r1
  _i2caddr = addr;
   d5afa:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
   d5afc:	f990 001c 	ldrsb.w	r0, [r0, #28]
   d5b00:	1c42      	adds	r2, r0, #1
   d5b02:	d10c      	bne.n	d5b1e <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
   d5b04:	f001 fed2 	bl	d78ac <_Z19__fetch_global_Wirev>
   d5b08:	f000 fffa 	bl	d6b00 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
   d5b0c:	2301      	movs	r3, #1
   d5b0e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
   d5b12:	4b2d      	ldr	r3, [pc, #180]	; (d5bc8 <_ZN15Adafruit_BME6805beginEh+0xd4>)
   d5b14:	66a3      	str	r3, [r4, #104]	; 0x68

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
   d5b16:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
    gas_sensor.write = &i2c_write;
   d5b1a:	4b2c      	ldr	r3, [pc, #176]	; (d5bcc <_ZN15Adafruit_BME6805beginEh+0xd8>)
   d5b1c:	e02c      	b.n	d5b78 <_ZN15Adafruit_BME6805beginEh+0x84>
  } else {
    digitalWrite(_cs, HIGH);
   d5b1e:	2101      	movs	r1, #1
   d5b20:	b280      	uxth	r0, r0
   d5b22:	f001 fe68 	bl	d77f6 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d5b26:	f994 001c 	ldrsb.w	r0, [r4, #28]
   d5b2a:	2101      	movs	r1, #1
   d5b2c:	b280      	uxth	r0, r0
   d5b2e:	f001 fe51 	bl	d77d4 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
   d5b32:	4b27      	ldr	r3, [pc, #156]	; (d5bd0 <_ZN15Adafruit_BME6805beginEh+0xdc>)
   d5b34:	f993 0000 	ldrsb.w	r0, [r3]
   d5b38:	1c43      	adds	r3, r0, #1
   d5b3a:	d102      	bne.n	d5b42 <_ZN15Adafruit_BME6805beginEh+0x4e>
      // hardware SPI
      SPI.begin();
   d5b3c:	f7ff ffd2 	bl	d5ae4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE5beginEv.isra.11>
   d5b40:	e011      	b.n	d5b66 <_ZN15Adafruit_BME6805beginEh+0x72>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
   d5b42:	2101      	movs	r1, #1
   d5b44:	b280      	uxth	r0, r0
   d5b46:	f001 fe45 	bl	d77d4 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
   d5b4a:	4b22      	ldr	r3, [pc, #136]	; (d5bd4 <_ZN15Adafruit_BME6805beginEh+0xe0>)
   d5b4c:	f993 0000 	ldrsb.w	r0, [r3]
   d5b50:	2101      	movs	r1, #1
   d5b52:	b280      	uxth	r0, r0
   d5b54:	f001 fe3e 	bl	d77d4 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
   d5b58:	4b1f      	ldr	r3, [pc, #124]	; (d5bd8 <_ZN15Adafruit_BME6805beginEh+0xe4>)
   d5b5a:	f993 0000 	ldrsb.w	r0, [r3]
   d5b5e:	2100      	movs	r1, #0
   d5b60:	b280      	uxth	r0, r0
   d5b62:	f001 fe37 	bl	d77d4 <pinMode>
    }

    gas_sensor.dev_id = _cs;
   d5b66:	7f23      	ldrb	r3, [r4, #28]
   d5b68:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
   d5b6c:	2300      	movs	r3, #0
   d5b6e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
   d5b72:	4b1a      	ldr	r3, [pc, #104]	; (d5bdc <_ZN15Adafruit_BME6805beginEh+0xe8>)
   d5b74:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
   d5b76:	4b1a      	ldr	r3, [pc, #104]	; (d5be0 <_ZN15Adafruit_BME6805beginEh+0xec>)
   d5b78:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
   d5b7a:	4b1a      	ldr	r3, [pc, #104]	; (d5be4 <_ZN15Adafruit_BME6805beginEh+0xf0>)
   d5b7c:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
   d5b7e:	f104 0020 	add.w	r0, r4, #32
   d5b82:	f7fe fba0 	bl	d42c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
   d5b86:	b9e0      	cbnz	r0, d5bc2 <_ZN15Adafruit_BME6805beginEh+0xce>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
   d5b88:	2304      	movs	r3, #4
   d5b8a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
   d5b8e:	2302      	movs	r3, #2
   d5b90:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
   d5b94:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5b98:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d5b9c:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d5b9e:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
   d5ba0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d5ba4:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
   d5ba6:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
   d5ba8:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
   d5baa:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
   d5bae:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
   d5bb0:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
   d5bb2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   d5bb6:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
   d5bba:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
   d5bbc:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
   d5bc0:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
   d5bc2:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
   d5bc4:	bd38      	pop	{r3, r4, r5, pc}
   d5bc6:	bf00      	nop
   d5bc8:	000d583f 	.word	0x000d583f
   d5bcc:	000d57fd 	.word	0x000d57fd
   d5bd0:	2003e355 	.word	0x2003e355
   d5bd4:	2003e356 	.word	0x2003e356
   d5bd8:	2003e354 	.word	0x2003e354
   d5bdc:	000d5be9 	.word	0x000d5be9
   d5be0:	000d5c65 	.word	0x000d5c65
   d5be4:	000d57f9 	.word	0x000d57f9

000d5be8 <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bec:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d5bee:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5bf0:	4615      	mov	r5, r2
   d5bf2:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
   d5bf4:	4607      	mov	r7, r0
   d5bf6:	f001 fdfe 	bl	d77f6 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d5bfa:	4b19      	ldr	r3, [pc, #100]	; (d5c60 <_ZL8spi_readhhPht+0x78>)
   d5bfc:	f993 2000 	ldrsb.w	r2, [r3]
   d5c00:	3201      	adds	r2, #1
   d5c02:	461c      	mov	r4, r3
   d5c04:	d110      	bne.n	d5c28 <_ZL8spi_readhhPht+0x40>
    SPI.begin();
   d5c06:	f7ff ff6d 	bl	d5ae4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE5beginEv.isra.11>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5c0a:	f7ff ff13 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c0e:	2140      	movs	r1, #64	; 0x40
   d5c10:	f001 fa9a 	bl	d7148 <_ZN8SPIClass15setClockDividerEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d5c14:	f7ff ff0e 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c18:	2101      	movs	r1, #1
   d5c1a:	f001 fa28 	bl	d706e <_ZN8SPIClass11setBitOrderEh>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d5c1e:	f7ff ff09 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c22:	2100      	movs	r1, #0
   d5c24:	f001 fa34 	bl	d7090 <_ZN8SPIClass11setDataModeEh>
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d5c28:	4640      	mov	r0, r8
   d5c2a:	f7ff ff1b 	bl	d5a64 <_ZL12spi_transferh>
   d5c2e:	442e      	add	r6, r5

  while (len--) {
   d5c30:	42b5      	cmp	r5, r6
   d5c32:	d005      	beq.n	d5c40 <_ZL8spi_readhhPht+0x58>
    *reg_data = spi_transfer(0x00);
   d5c34:	2000      	movs	r0, #0
   d5c36:	f7ff ff15 	bl	d5a64 <_ZL12spi_transferh>
   d5c3a:	f805 0b01 	strb.w	r0, [r5], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
   d5c3e:	e7f7      	b.n	d5c30 <_ZL8spi_readhhPht+0x48>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d5c40:	f994 3000 	ldrsb.w	r3, [r4]
   d5c44:	3301      	adds	r3, #1
   d5c46:	d103      	bne.n	d5c50 <_ZL8spi_readhhPht+0x68>
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d5c48:	f7ff fef4 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c4c:	f001 fa31 	bl	d70b2 <_ZN8SPIClass14endTransactionEv>
    SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
   d5c50:	4638      	mov	r0, r7
   d5c52:	2101      	movs	r1, #1
   d5c54:	f001 fdcf 	bl	d77f6 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5c58:	2000      	movs	r0, #0
   d5c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c5e:	bf00      	nop
   d5c60:	2003e355 	.word	0x2003e355

000d5c64 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c68:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d5c6a:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
   d5c6c:	4615      	mov	r5, r2
   d5c6e:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
   d5c70:	4607      	mov	r7, r0
   d5c72:	f001 fdc0 	bl	d77f6 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
   d5c76:	4b18      	ldr	r3, [pc, #96]	; (d5cd8 <_ZL9spi_writehhPht+0x74>)
   d5c78:	f993 2000 	ldrsb.w	r2, [r3]
   d5c7c:	3201      	adds	r2, #1
   d5c7e:	461c      	mov	r4, r3
   d5c80:	d110      	bne.n	d5ca4 <_ZL9spi_writehhPht+0x40>
    SPI.begin();
   d5c82:	f7ff ff2f 	bl	d5ae4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE5beginEv.isra.11>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5c86:	f7ff fed5 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c8a:	2140      	movs	r1, #64	; 0x40
   d5c8c:	f001 fa5c 	bl	d7148 <_ZN8SPIClass15setClockDividerEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d5c90:	f7ff fed0 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c94:	2101      	movs	r1, #1
   d5c96:	f001 f9ea 	bl	d706e <_ZN8SPIClass11setBitOrderEh>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d5c9a:	f7ff fecb 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5c9e:	2100      	movs	r1, #0
   d5ca0:	f001 f9f6 	bl	d7090 <_ZN8SPIClass11setDataModeEh>
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
   d5ca4:	4640      	mov	r0, r8
   d5ca6:	f7ff fedd 	bl	d5a64 <_ZL12spi_transferh>
   d5caa:	442e      	add	r6, r5
  while (len--) {
   d5cac:	42b5      	cmp	r5, r6
   d5cae:	d004      	beq.n	d5cba <_ZL9spi_writehhPht+0x56>
    spi_transfer(*reg_data);
   d5cb0:	f815 0b01 	ldrb.w	r0, [r5], #1
   d5cb4:	f7ff fed6 	bl	d5a64 <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
   d5cb8:	e7f8      	b.n	d5cac <_ZL9spi_writehhPht+0x48>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
   d5cba:	f994 3000 	ldrsb.w	r3, [r4]
   d5cbe:	3301      	adds	r3, #1
   d5cc0:	d103      	bne.n	d5cca <_ZL9spi_writehhPht+0x66>
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d5cc2:	f7ff feb7 	bl	d5a34 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5cc6:	f001 f9f4 	bl	d70b2 <_ZN8SPIClass14endTransactionEv>
    SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
   d5cca:	4638      	mov	r0, r7
   d5ccc:	2101      	movs	r1, #1
   d5cce:	f001 fd92 	bl	d77f6 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
   d5cd2:	2000      	movs	r0, #0
   d5cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cd8:	2003e355 	.word	0x2003e355

000d5cdc <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
   d5cdc:	f000 b880 	b.w	d5de0 <HAL_Pin_Map>

000d5ce0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <os_thread_is_current+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	689b      	ldr	r3, [r3, #8]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030248 	.word	0x00030248

000d5cf0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <os_thread_join+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	691b      	ldr	r3, [r3, #16]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030248 	.word	0x00030248

000d5d00 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <os_thread_cleanup+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	695b      	ldr	r3, [r3, #20]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	00030248 	.word	0x00030248

000d5d10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <os_mutex_recursive_create+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030248 	.word	0x00030248

000d5d20 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <os_mutex_recursive_destroy+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030248 	.word	0x00030248

000d5d30 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_Feature_Set+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	00030234 	.word	0x00030234

000d5d40 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_Core_System_Reset_Ex+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	00030234 	.word	0x00030234

000d5d50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_RNG_GetRandomNumber+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	685b      	ldr	r3, [r3, #4]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030218 	.word	0x00030218

000d5d60 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	695b      	ldr	r3, [r3, #20]
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030218 	.word	0x00030218

000d5d70 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <HAL_RTC_Get_UnixTime+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	69db      	ldr	r3, [r3, #28]
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030218 	.word	0x00030218

000d5d80 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <HAL_EEPROM_Init+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030218 	.word	0x00030218

000d5d90 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <HAL_EEPROM_Write+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030218 	.word	0x00030218

000d5da0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <HAL_EEPROM_Get+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030218 	.word	0x00030218

000d5db0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <HAL_EEPROM_Put+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030218 	.word	0x00030218

000d5dc0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <HAL_RTC_Time_Is_Valid+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	00030218 	.word	0x00030218

000d5dd0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <hal_timer_millis+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	00030218 	.word	0x00030218

000d5de0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <HAL_Pin_Map+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	681b      	ldr	r3, [r3, #0]
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	0003022c 	.word	0x0003022c

000d5df0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <HAL_Pin_Mode+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	689b      	ldr	r3, [r3, #8]
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	0003022c 	.word	0x0003022c

000d5e00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <HAL_Get_Pin_Mode+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	68db      	ldr	r3, [r3, #12]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	0003022c 	.word	0x0003022c

000d5e10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <HAL_GPIO_Write+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	691b      	ldr	r3, [r3, #16]
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	0003022c 	.word	0x0003022c

000d5e20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <HAL_GPIO_Read+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	695b      	ldr	r3, [r3, #20]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	0003022c 	.word	0x0003022c

000d5e30 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <HAL_I2C_Begin+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	68db      	ldr	r3, [r3, #12]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030228 	.word	0x00030228

000d5e40 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <HAL_I2C_Begin_Transmission+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	699b      	ldr	r3, [r3, #24]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030228 	.word	0x00030228

000d5e50 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <HAL_I2C_End_Transmission+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	69db      	ldr	r3, [r3, #28]
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030228 	.word	0x00030228

000d5e60 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <HAL_I2C_Write_Data+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	6a1b      	ldr	r3, [r3, #32]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	00030228 	.word	0x00030228

000d5e70 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <HAL_I2C_Available_Data+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	00030228 	.word	0x00030228

000d5e80 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <HAL_I2C_Read_Data+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	00030228 	.word	0x00030228

000d5e90 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <HAL_I2C_Peek_Data+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030228 	.word	0x00030228

000d5ea0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <HAL_I2C_Flush_Data+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	00030228 	.word	0x00030228

000d5eb0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <HAL_I2C_Is_Enabled+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030228 	.word	0x00030228

000d5ec0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <HAL_I2C_Init+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030228 	.word	0x00030228

000d5ed0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <HAL_I2C_Request_Data_Ex+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030228 	.word	0x00030228

000d5ee0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <inet_inet_ntop+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	695b      	ldr	r3, [r3, #20]
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	00030264 	.word	0x00030264

000d5ef0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <netdb_freeaddrinfo+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	689b      	ldr	r3, [r3, #8]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	00030268 	.word	0x00030268

000d5f00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <netdb_getaddrinfo+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	68db      	ldr	r3, [r3, #12]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	00030268 	.word	0x00030268

000d5f10 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <HAL_SPI_Begin+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	681b      	ldr	r3, [r3, #0]
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	00030230 	.word	0x00030230

000d5f20 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <HAL_SPI_Set_Bit_Order+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	689b      	ldr	r3, [r3, #8]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	00030230 	.word	0x00030230

000d5f30 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <HAL_SPI_Set_Data_Mode+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	68db      	ldr	r3, [r3, #12]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	00030230 	.word	0x00030230

000d5f40 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	691b      	ldr	r3, [r3, #16]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	00030230 	.word	0x00030230

000d5f50 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <HAL_SPI_Send_Receive_Data+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	695b      	ldr	r3, [r3, #20]
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	00030230 	.word	0x00030230

000d5f60 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <HAL_SPI_Init+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	69db      	ldr	r3, [r3, #28]
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	00030230 	.word	0x00030230

000d5f70 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <HAL_SPI_Is_Enabled+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	6a1b      	ldr	r3, [r3, #32]
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	00030230 	.word	0x00030230

000d5f80 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <HAL_SPI_Info+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	00030230 	.word	0x00030230

000d5f90 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <HAL_SPI_Acquire+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	00030230 	.word	0x00030230

000d5fa0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <HAL_SPI_Release+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	00030230 	.word	0x00030230

000d5fb0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5fb0:	b508      	push	{r3, lr}
   d5fb2:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <HAL_USART_Init+0xc>)
   d5fb4:	681b      	ldr	r3, [r3, #0]
   d5fb6:	681b      	ldr	r3, [r3, #0]
   d5fb8:	9301      	str	r3, [sp, #4]
   d5fba:	bd08      	pop	{r3, pc}
   d5fbc:	0003023c 	.word	0x0003023c

000d5fc0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5fc0:	b508      	push	{r3, lr}
   d5fc2:	4b02      	ldr	r3, [pc, #8]	; (d5fcc <HAL_USART_Write_Data+0xc>)
   d5fc4:	681b      	ldr	r3, [r3, #0]
   d5fc6:	68db      	ldr	r3, [r3, #12]
   d5fc8:	9301      	str	r3, [sp, #4]
   d5fca:	bd08      	pop	{r3, pc}
   d5fcc:	0003023c 	.word	0x0003023c

000d5fd0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5fd0:	b508      	push	{r3, lr}
   d5fd2:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <HAL_USART_Available_Data+0xc>)
   d5fd4:	681b      	ldr	r3, [r3, #0]
   d5fd6:	691b      	ldr	r3, [r3, #16]
   d5fd8:	9301      	str	r3, [sp, #4]
   d5fda:	bd08      	pop	{r3, pc}
   d5fdc:	0003023c 	.word	0x0003023c

000d5fe0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5fe0:	b508      	push	{r3, lr}
   d5fe2:	4b02      	ldr	r3, [pc, #8]	; (d5fec <HAL_USART_Read_Data+0xc>)
   d5fe4:	681b      	ldr	r3, [r3, #0]
   d5fe6:	695b      	ldr	r3, [r3, #20]
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	bd08      	pop	{r3, pc}
   d5fec:	0003023c 	.word	0x0003023c

000d5ff0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4b02      	ldr	r3, [pc, #8]	; (d5ffc <HAL_USART_Peek_Data+0xc>)
   d5ff4:	681b      	ldr	r3, [r3, #0]
   d5ff6:	699b      	ldr	r3, [r3, #24]
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	0003023c 	.word	0x0003023c

000d6000 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6000:	b508      	push	{r3, lr}
   d6002:	4b02      	ldr	r3, [pc, #8]	; (d600c <HAL_USART_Flush_Data+0xc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	69db      	ldr	r3, [r3, #28]
   d6008:	9301      	str	r3, [sp, #4]
   d600a:	bd08      	pop	{r3, pc}
   d600c:	0003023c 	.word	0x0003023c

000d6010 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6010:	b508      	push	{r3, lr}
   d6012:	4b02      	ldr	r3, [pc, #8]	; (d601c <HAL_USART_Is_Enabled+0xc>)
   d6014:	681b      	ldr	r3, [r3, #0]
   d6016:	6a1b      	ldr	r3, [r3, #32]
   d6018:	9301      	str	r3, [sp, #4]
   d601a:	bd08      	pop	{r3, pc}
   d601c:	0003023c 	.word	0x0003023c

000d6020 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <HAL_USART_Available_Data_For_Write+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	0003023c 	.word	0x0003023c

000d6030 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6030:	b508      	push	{r3, lr}
   d6032:	4b02      	ldr	r3, [pc, #8]	; (d603c <HAL_USB_USART_Init+0xc>)
   d6034:	681b      	ldr	r3, [r3, #0]
   d6036:	681b      	ldr	r3, [r3, #0]
   d6038:	9301      	str	r3, [sp, #4]
   d603a:	bd08      	pop	{r3, pc}
   d603c:	0003024c 	.word	0x0003024c

000d6040 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <HAL_USB_USART_Available_Data+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	691b      	ldr	r3, [r3, #16]
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	0003024c 	.word	0x0003024c

000d6050 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	695b      	ldr	r3, [r3, #20]
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	0003024c 	.word	0x0003024c

000d6060 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b02      	ldr	r3, [pc, #8]	; (d606c <HAL_USB_USART_Receive_Data+0xc>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	699b      	ldr	r3, [r3, #24]
   d6068:	9301      	str	r3, [sp, #4]
   d606a:	bd08      	pop	{r3, pc}
   d606c:	0003024c 	.word	0x0003024c

000d6070 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b02      	ldr	r3, [pc, #8]	; (d607c <HAL_USB_USART_Send_Data+0xc>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	69db      	ldr	r3, [r3, #28]
   d6078:	9301      	str	r3, [sp, #4]
   d607a:	bd08      	pop	{r3, pc}
   d607c:	0003024c 	.word	0x0003024c

000d6080 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6080:	b508      	push	{r3, lr}
   d6082:	4b02      	ldr	r3, [pc, #8]	; (d608c <HAL_USB_USART_Flush_Data+0xc>)
   d6084:	681b      	ldr	r3, [r3, #0]
   d6086:	6a1b      	ldr	r3, [r3, #32]
   d6088:	9301      	str	r3, [sp, #4]
   d608a:	bd08      	pop	{r3, pc}
   d608c:	0003024c 	.word	0x0003024c

000d6090 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <system_mode+0xc>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	681b      	ldr	r3, [r3, #0]
   d6098:	9301      	str	r3, [sp, #4]
   d609a:	bd08      	pop	{r3, pc}
   d609c:	00030220 	.word	0x00030220

000d60a0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60a0:	b508      	push	{r3, lr}
   d60a2:	4b02      	ldr	r3, [pc, #8]	; (d60ac <set_system_mode+0xc>)
   d60a4:	681b      	ldr	r3, [r3, #0]
   d60a6:	685b      	ldr	r3, [r3, #4]
   d60a8:	9301      	str	r3, [sp, #4]
   d60aa:	bd08      	pop	{r3, pc}
   d60ac:	00030220 	.word	0x00030220

000d60b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60b0:	b508      	push	{r3, lr}
   d60b2:	4b02      	ldr	r3, [pc, #8]	; (d60bc <system_delay_ms+0xc>)
   d60b4:	681b      	ldr	r3, [r3, #0]
   d60b6:	695b      	ldr	r3, [r3, #20]
   d60b8:	9301      	str	r3, [sp, #4]
   d60ba:	bd08      	pop	{r3, pc}
   d60bc:	00030220 	.word	0x00030220

000d60c0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <system_thread_set_state+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	00030220 	.word	0x00030220

000d60d0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <application_thread_current+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	00030220 	.word	0x00030220

000d60e0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <application_thread_invoke+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	00030220 	.word	0x00030220

000d60f0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <system_thread_get_state+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030220 	.word	0x00030220

000d6100 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b03      	ldr	r3, [pc, #12]	; (d6110 <system_ctrl_set_app_request_handler+0x10>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d610a:	9301      	str	r3, [sp, #4]
   d610c:	bd08      	pop	{r3, pc}
   d610e:	0000      	.short	0x0000
   d6110:	00030220 	.word	0x00030220

000d6114 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6114:	b508      	push	{r3, lr}
   d6116:	4b03      	ldr	r3, [pc, #12]	; (d6124 <system_ctrl_set_result+0x10>)
   d6118:	681b      	ldr	r3, [r3, #0]
   d611a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d611e:	9301      	str	r3, [sp, #4]
   d6120:	bd08      	pop	{r3, pc}
   d6122:	0000      	.short	0x0000
   d6124:	00030220 	.word	0x00030220

000d6128 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <spark_variable+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	681b      	ldr	r3, [r3, #0]
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030244 	.word	0x00030244

000d6138 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <spark_function+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	685b      	ldr	r3, [r3, #4]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030244 	.word	0x00030244

000d6148 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <spark_process+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	689b      	ldr	r3, [r3, #8]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030244 	.word	0x00030244

000d6158 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <spark_cloud_flag_connect+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	68db      	ldr	r3, [r3, #12]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030244 	.word	0x00030244

000d6168 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <spark_cloud_flag_connected+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	695b      	ldr	r3, [r3, #20]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030244 	.word	0x00030244

000d6178 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <spark_deviceID+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	69db      	ldr	r3, [r3, #28]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	00030244 	.word	0x00030244

000d6188 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <spark_send_event+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	6a1b      	ldr	r3, [r3, #32]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030244 	.word	0x00030244

000d6198 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <spark_subscribe+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030244 	.word	0x00030244

000d61a8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <spark_sync_time+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030244 	.word	0x00030244

000d61b8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <spark_sync_time_pending+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030244 	.word	0x00030244

000d61c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	00030244 	.word	0x00030244

000d61d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <network_connect+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	685b      	ldr	r3, [r3, #4]
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	00030240 	.word	0x00030240

000d61e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <network_connecting+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	689b      	ldr	r3, [r3, #8]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030240 	.word	0x00030240

000d61f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <network_disconnect+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	68db      	ldr	r3, [r3, #12]
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030240 	.word	0x00030240

000d6208 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <network_ready+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	691b      	ldr	r3, [r3, #16]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030240 	.word	0x00030240

000d6218 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <network_on+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	695b      	ldr	r3, [r3, #20]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030240 	.word	0x00030240

000d6228 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <network_off+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	699b      	ldr	r3, [r3, #24]
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030240 	.word	0x00030240

000d6238 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <network_listen+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	69db      	ldr	r3, [r3, #28]
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030240 	.word	0x00030240

000d6248 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <network_listening+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	6a1b      	ldr	r3, [r3, #32]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030240 	.word	0x00030240

000d6258 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <network_set_listen_timeout+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030240 	.word	0x00030240

000d6268 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <network_get_listen_timeout+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030240 	.word	0x00030240

000d6278 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <malloc+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	681b      	ldr	r3, [r3, #0]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	0003021c 	.word	0x0003021c

000d6288 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <free+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	685b      	ldr	r3, [r3, #4]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	0003021c 	.word	0x0003021c

000d6298 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <realloc+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	689b      	ldr	r3, [r3, #8]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	0003021c 	.word	0x0003021c

000d62a8 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <siscanf+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	699b      	ldr	r3, [r3, #24]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	0003021c 	.word	0x0003021c

000d62b8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <snprintf+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	69db      	ldr	r3, [r3, #28]
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	0003021c 	.word	0x0003021c

000d62c8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <abort+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	0003021c 	.word	0x0003021c

000d62d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <_malloc_r+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	0003021c 	.word	0x0003021c

000d62e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d62e8:	2100      	movs	r1, #0
   d62ea:	f7ff bee1 	b.w	d60b0 <system_delay_ms>

000d62ee <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d62ee:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62f0:	6883      	ldr	r3, [r0, #8]
   d62f2:	4604      	mov	r4, r0
   d62f4:	b90b      	cbnz	r3, d62fa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d62f6:	f001 fb20 	bl	d793a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62fa:	68c3      	ldr	r3, [r0, #12]
   d62fc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d62fe:	68a3      	ldr	r3, [r4, #8]
   d6300:	b11b      	cbz	r3, d630a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6302:	2203      	movs	r2, #3
   d6304:	4621      	mov	r1, r4
   d6306:	4620      	mov	r0, r4
   d6308:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d630a:	4620      	mov	r0, r4
   d630c:	2110      	movs	r1, #16
}
   d630e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6312:	f001 baf6 	b.w	d7902 <_ZdlPvj>

000d6316 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6316:	b510      	push	{r4, lr}
   d6318:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d631a:	6800      	ldr	r0, [r0, #0]
   d631c:	b108      	cbz	r0, d6322 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d631e:	f7ff fcff 	bl	d5d20 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6322:	4620      	mov	r0, r4
   d6324:	bd10      	pop	{r4, pc}

000d6326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6326:	680b      	ldr	r3, [r1, #0]
   d6328:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d632a:	b113      	cbz	r3, d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d632c:	685a      	ldr	r2, [r3, #4]
   d632e:	3201      	adds	r2, #1
   d6330:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6332:	4770      	bx	lr

000d6334 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6334:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6336:	4c06      	ldr	r4, [pc, #24]	; (d6350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6338:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d633a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d633c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d633e:	f7ff fce7 	bl	d5d10 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6342:	4620      	mov	r0, r4
   d6344:	4a03      	ldr	r2, [pc, #12]	; (d6354 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6346:	4904      	ldr	r1, [pc, #16]	; (d6358 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d634c:	f001 bad4 	b.w	d78f8 <__aeabi_atexit>
   d6350:	2003e358 	.word	0x2003e358
   d6354:	2003e1b0 	.word	0x2003e1b0
   d6358:	000d6317 	.word	0x000d6317

000d635c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d635c:	2200      	movs	r2, #0
   d635e:	4611      	mov	r1, r2
   d6360:	6840      	ldr	r0, [r0, #4]
   d6362:	f7ff bf51 	b.w	d6208 <network_ready>

000d6366 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6366:	2200      	movs	r2, #0
   d6368:	4611      	mov	r1, r2
   d636a:	6840      	ldr	r0, [r0, #4]
   d636c:	f7ff bf6c 	b.w	d6248 <network_listening>

000d6370 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6370:	2200      	movs	r2, #0
   d6372:	4611      	mov	r1, r2
   d6374:	6840      	ldr	r0, [r0, #4]
   d6376:	f7ff bf77 	b.w	d6268 <network_get_listen_timeout>

000d637a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d637a:	2200      	movs	r2, #0
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	f7ff bf6b 	b.w	d6258 <network_set_listen_timeout>

000d6382 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6382:	2200      	movs	r2, #0
   d6384:	f081 0101 	eor.w	r1, r1, #1
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	f7ff bf55 	b.w	d6238 <network_listen>

000d638e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d638e:	2300      	movs	r3, #0
   d6390:	461a      	mov	r2, r3
   d6392:	4619      	mov	r1, r3
   d6394:	6840      	ldr	r0, [r0, #4]
   d6396:	f7ff bf47 	b.w	d6228 <network_off>

000d639a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d639a:	2300      	movs	r3, #0
   d639c:	461a      	mov	r2, r3
   d639e:	4619      	mov	r1, r3
   d63a0:	6840      	ldr	r0, [r0, #4]
   d63a2:	f7ff bf39 	b.w	d6218 <network_on>

000d63a6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63a6:	2200      	movs	r2, #0
   d63a8:	4611      	mov	r1, r2
   d63aa:	6840      	ldr	r0, [r0, #4]
   d63ac:	f7ff bf1c 	b.w	d61e8 <network_connecting>

000d63b0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63b0:	2200      	movs	r2, #0
   d63b2:	2102      	movs	r1, #2
   d63b4:	6840      	ldr	r0, [r0, #4]
   d63b6:	f7ff bf1f 	b.w	d61f8 <network_disconnect>

000d63ba <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d63ba:	2300      	movs	r3, #0
   d63bc:	461a      	mov	r2, r3
   d63be:	6840      	ldr	r0, [r0, #4]
   d63c0:	f7ff bf0a 	b.w	d61d8 <network_connect>

000d63c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d63c4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d63c6:	4c08      	ldr	r4, [pc, #32]	; (d63e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d63c8:	2528      	movs	r5, #40	; 0x28
   d63ca:	462a      	mov	r2, r5
   d63cc:	2100      	movs	r1, #0
   d63ce:	4620      	mov	r0, r4
   d63d0:	f002 fbc9 	bl	d8b66 <memset>
        cid = -1;
   d63d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d63d8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d63da:	4b04      	ldr	r3, [pc, #16]	; (d63ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d63dc:	8025      	strh	r5, [r4, #0]
   d63de:	2204      	movs	r2, #4
   d63e0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d63e2:	4a03      	ldr	r2, [pc, #12]	; (d63f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d63e4:	601a      	str	r2, [r3, #0]
   d63e6:	bd38      	pop	{r3, r4, r5, pc}
   d63e8:	2003e364 	.word	0x2003e364
   d63ec:	2003e35c 	.word	0x2003e35c
   d63f0:	000db2c8 	.word	0x000db2c8

000d63f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63f4:	4770      	bx	lr

000d63f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d63f6:	2000      	movs	r0, #0
   d63f8:	4770      	bx	lr

000d63fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63fa:	b510      	push	{r4, lr}
   d63fc:	2110      	movs	r1, #16
   d63fe:	4604      	mov	r4, r0
   d6400:	f001 fa7f 	bl	d7902 <_ZdlPvj>
   d6404:	4620      	mov	r0, r4
   d6406:	bd10      	pop	{r4, pc}

000d6408 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6408:	b508      	push	{r3, lr}
      { delete this; }
   d640a:	b108      	cbz	r0, d6410 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d640c:	f7ff fff5 	bl	d63fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6410:	bd08      	pop	{r3, pc}

000d6412 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6412:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6414:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6416:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6418:	b113      	cbz	r3, d6420 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d641a:	2203      	movs	r2, #3
   d641c:	4601      	mov	r1, r0
   d641e:	4798      	blx	r3
    }
   d6420:	4620      	mov	r0, r4
   d6422:	bd10      	pop	{r4, pc}

000d6424 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6424:	2200      	movs	r2, #0
   d6426:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6428:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d642a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d642e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6430:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6434:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6436:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6438:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d643a:	680c      	ldr	r4, [r1, #0]
   d643c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d643e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6440:	bd10      	pop	{r4, pc}

000d6442 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6442:	b510      	push	{r4, lr}
   d6444:	4604      	mov	r4, r0
    free((void*)msg_);
   d6446:	6800      	ldr	r0, [r0, #0]
   d6448:	f7ff ff1e 	bl	d6288 <free>
}
   d644c:	4620      	mov	r0, r4
   d644e:	bd10      	pop	{r4, pc}

000d6450 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6450:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6452:	68c4      	ldr	r4, [r0, #12]
   d6454:	b1f4      	cbz	r4, d6494 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6456:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6458:	2b02      	cmp	r3, #2
   d645a:	d103      	bne.n	d6464 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d645c:	f104 000c 	add.w	r0, r4, #12
   d6460:	f7ff ffef 	bl	d6442 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6464:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6466:	b135      	cbz	r5, d6476 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6468:	4628      	mov	r0, r5
   d646a:	f7ff ffd2 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
   d646e:	2110      	movs	r1, #16
   d6470:	4628      	mov	r0, r5
   d6472:	f001 fa46 	bl	d7902 <_ZdlPvj>
   d6476:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6478:	b135      	cbz	r5, d6488 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d647a:	4628      	mov	r0, r5
   d647c:	f7ff ffc9 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
   d6480:	2110      	movs	r1, #16
   d6482:	4628      	mov	r0, r5
   d6484:	f001 fa3d 	bl	d7902 <_ZdlPvj>
   d6488:	4620      	mov	r0, r4
   d648a:	2114      	movs	r1, #20
   d648c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6490:	f001 ba37 	b.w	d7902 <_ZdlPvj>
   d6494:	bd38      	pop	{r3, r4, r5, pc}

000d6496 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6496:	b510      	push	{r4, lr}
   d6498:	b088      	sub	sp, #32
   d649a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d649c:	4668      	mov	r0, sp
   d649e:	f000 fec7 	bl	d7230 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d64a2:	4669      	mov	r1, sp
   d64a4:	a804      	add	r0, sp, #16
   d64a6:	f000 fee5 	bl	d7274 <_ZN6StringC1ERKS_>
   d64aa:	a804      	add	r0, sp, #16
   d64ac:	47a0      	blx	r4
   d64ae:	4604      	mov	r4, r0
   d64b0:	a804      	add	r0, sp, #16
   d64b2:	f000 fe76 	bl	d71a2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d64b6:	4668      	mov	r0, sp
   d64b8:	f000 fe73 	bl	d71a2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d64bc:	4620      	mov	r0, r4
   d64be:	b008      	add	sp, #32
   d64c0:	bd10      	pop	{r4, pc}

000d64c2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d64c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d64c4:	2410      	movs	r4, #16
   d64c6:	b085      	sub	sp, #20
   d64c8:	4607      	mov	r7, r0
   d64ca:	460e      	mov	r6, r1
   d64cc:	4615      	mov	r5, r2
   d64ce:	2100      	movs	r1, #0
   d64d0:	4622      	mov	r2, r4
   d64d2:	4668      	mov	r0, sp
   d64d4:	f002 fb47 	bl	d8b66 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d64d8:	2200      	movs	r2, #0
   d64da:	4669      	mov	r1, sp
   d64dc:	4610      	mov	r0, r2
         size = sizeof(*this);
   d64de:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d64e2:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d64e4:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d64e6:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d64e8:	f7ff fe26 	bl	d6138 <spark_function>
}
   d64ec:	b005      	add	sp, #20
   d64ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d64f0:	b513      	push	{r0, r1, r4, lr}
   d64f2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64f4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d64f8:	2300      	movs	r3, #0
   d64fa:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64fc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64fe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6500:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6502:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6504:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6506:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6508:	f7fe fbee 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d650c:	4620      	mov	r0, r4
   d650e:	b002      	add	sp, #8
   d6510:	bd10      	pop	{r4, pc}

000d6512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6514:	460c      	mov	r4, r1
   d6516:	ad02      	add	r5, sp, #8
   d6518:	f854 3b04 	ldr.w	r3, [r4], #4
   d651c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6520:	4606      	mov	r6, r0
   d6522:	460f      	mov	r7, r1
   d6524:	a801      	add	r0, sp, #4
   d6526:	4621      	mov	r1, r4
   d6528:	f7ff fefd 	bl	d6326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d652c:	4629      	mov	r1, r5
   d652e:	4630      	mov	r0, r6
   d6530:	f7ff ffde 	bl	d64f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6534:	a801      	add	r0, sp, #4
   d6536:	f7fe fbd7 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d653a:	4620      	mov	r0, r4
   d653c:	f7fe fbd4 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6540:	4638      	mov	r0, r7
   d6542:	2108      	movs	r1, #8
   d6544:	f001 f9dd 	bl	d7902 <_ZdlPvj>
        return p;
    }
   d6548:	4630      	mov	r0, r6
   d654a:	b003      	add	sp, #12
   d654c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d654e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d654e:	b513      	push	{r0, r1, r4, lr}
   d6550:	460b      	mov	r3, r1
   d6552:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6554:	c803      	ldmia	r0, {r0, r1}
   d6556:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d655a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d655e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6562:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6566:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d656a:	b002      	add	sp, #8
   d656c:	bd10      	pop	{r4, pc}
	...

000d6570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6570:	b538      	push	{r3, r4, r5, lr}
   d6572:	2300      	movs	r3, #0
   d6574:	4604      	mov	r4, r0
   d6576:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6578:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d657a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d657c:	f7fd fd8d 	bl	d409a <_Znwj>
   d6580:	b128      	cbz	r0, d658e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6582:	2301      	movs	r3, #1
   d6584:	6043      	str	r3, [r0, #4]
   d6586:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6588:	4b02      	ldr	r3, [pc, #8]	; (d6594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d658a:	6003      	str	r3, [r0, #0]
   d658c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d658e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6590:	4620      	mov	r0, r4
   d6592:	bd38      	pop	{r3, r4, r5, pc}
   d6594:	000db2fc 	.word	0x000db2fc

000d6598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6598:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d659a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d659c:	b90a      	cbnz	r2, d65a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d659e:	f001 f9cc 	bl	d793a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d65a2:	68c3      	ldr	r3, [r0, #12]
    }
   d65a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d65a8:	4718      	bx	r3

000d65aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d65aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d65ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d65ae:	f100 0110 	add.w	r1, r0, #16
   d65b2:	f7ff fff1 	bl	d6598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d65b6:	bd08      	pop	{r3, pc}

000d65b8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d65b8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d65ba:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d65bc:	b90a      	cbnz	r2, d65c2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d65be:	f001 f9bc 	bl	d793a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d65c2:	68c3      	ldr	r3, [r0, #12]
    }
   d65c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d65c8:	4718      	bx	r3

000d65ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d65ca:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d65cc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d65ce:	f100 0110 	add.w	r1, r0, #16
   d65d2:	f7ff fff1 	bl	d65b8 <_ZNKSt8functionIFvRKbEEclES1_>
   d65d6:	bd08      	pop	{r3, pc}

000d65d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65d8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65da:	2300      	movs	r3, #0
   d65dc:	6083      	str	r3, [r0, #8]
   d65de:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65e0:	4604      	mov	r4, r0
   d65e2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d65e4:	b12b      	cbz	r3, d65f2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65e6:	2202      	movs	r2, #2
   d65e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65ea:	68eb      	ldr	r3, [r5, #12]
   d65ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d65ee:	68ab      	ldr	r3, [r5, #8]
   d65f0:	60a3      	str	r3, [r4, #8]
	}
    }
   d65f2:	4620      	mov	r0, r4
   d65f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d65f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65fa:	b089      	sub	sp, #36	; 0x24
   d65fc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d65fe:	4668      	mov	r0, sp
   d6600:	f7ff ff10 	bl	d6424 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6604:	2300      	movs	r3, #0
   d6606:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d660a:	f04f 0202 	mov.w	r2, #2
   d660e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6612:	2b00      	cmp	r3, #0
   d6614:	d103      	bne.n	d661e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6616:	e8c4 2f41 	strexb	r1, r2, [r4]
   d661a:	2900      	cmp	r1, #0
   d661c:	d1f7      	bne.n	d660e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d661e:	d002      	beq.n	d6626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6620:	f88d 3008 	strb.w	r3, [sp, #8]
   d6624:	e063      	b.n	d66ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6626:	f114 050c 	adds.w	r5, r4, #12
   d662a:	d003      	beq.n	d6634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d662c:	4669      	mov	r1, sp
   d662e:	4628      	mov	r0, r5
   d6630:	f7ff fef8 	bl	d6424 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6634:	f3bf 8f5f 	dmb	sy
   d6638:	2301      	movs	r3, #1
   d663a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d663c:	2000      	movs	r0, #0
   d663e:	f104 0308 	add.w	r3, r4, #8
   d6642:	f3bf 8f5f 	dmb	sy
   d6646:	e853 6f00 	ldrex	r6, [r3]
   d664a:	e843 0200 	strex	r2, r0, [r3]
   d664e:	2a00      	cmp	r2, #0
   d6650:	d1f9      	bne.n	d6646 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6652:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6656:	2e00      	cmp	r6, #0
   d6658:	d049      	beq.n	d66ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d665a:	f7ff fd39 	bl	d60d0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d665e:	b120      	cbz	r0, d666a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6660:	4629      	mov	r1, r5
   d6662:	4630      	mov	r0, r6
   d6664:	f7ff ff98 	bl	d6598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6668:	e03a      	b.n	d66e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d666a:	4631      	mov	r1, r6
   d666c:	a802      	add	r0, sp, #8
   d666e:	f7ff ffb3 	bl	d65d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6672:	68e0      	ldr	r0, [r4, #12]
   d6674:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6678:	b108      	cbz	r0, d667e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d667a:	f002 fab7 	bl	d8bec <strdup>
   d667e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6680:	2010      	movs	r0, #16
   d6682:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6686:	f7fd fd08 	bl	d409a <_Znwj>
   d668a:	4605      	mov	r5, r0
   d668c:	b1e8      	cbz	r0, d66ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d668e:	2700      	movs	r7, #0
   d6690:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6692:	2018      	movs	r0, #24
   d6694:	f7fd fd01 	bl	d409a <_Znwj>
   d6698:	4604      	mov	r4, r0
   d669a:	b188      	cbz	r0, d66c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d669c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d669e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d66a0:	a802      	add	r0, sp, #8
   d66a2:	f7ff ff54 	bl	d654e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66a6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d66a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d66aa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66ac:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d66ae:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d66b0:	a906      	add	r1, sp, #24
   d66b2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d66b4:	60e3      	str	r3, [r4, #12]
   d66b6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d66ba:	9205      	str	r2, [sp, #20]
   d66bc:	f7ff feb2 	bl	d6424 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d66c0:	4b0d      	ldr	r3, [pc, #52]	; (d66f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d66c2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d66c4:	4b0d      	ldr	r3, [pc, #52]	; (d66fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66c6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d66c8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d66ca:	a806      	add	r0, sp, #24
   d66cc:	f7ff feb9 	bl	d6442 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66d0:	a802      	add	r0, sp, #8
   d66d2:	f7ff fe9e 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d66d6:	2200      	movs	r2, #0
   d66d8:	4629      	mov	r1, r5
   d66da:	4809      	ldr	r0, [pc, #36]	; (d6700 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d66dc:	f7ff fd00 	bl	d60e0 <application_thread_invoke>
   d66e0:	4630      	mov	r0, r6
   d66e2:	f7ff fe96 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d66e6:	2110      	movs	r1, #16
   d66e8:	4630      	mov	r0, r6
   d66ea:	f001 f90a 	bl	d7902 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d66ee:	4668      	mov	r0, sp
   d66f0:	f7ff fea7 	bl	d6442 <_ZN8particle5ErrorD1Ev>
    }
   d66f4:	b009      	add	sp, #36	; 0x24
   d66f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d66f8:	000d65ab 	.word	0x000d65ab
   d66fc:	000d6821 	.word	0x000d6821
   d6700:	000d62ef 	.word	0x000d62ef

000d6704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6708:	b08b      	sub	sp, #44	; 0x2c
   d670a:	4606      	mov	r6, r0
   d670c:	460f      	mov	r7, r1
   d670e:	4690      	mov	r8, r2
   d6710:	4699      	mov	r9, r3
   d6712:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6716:	f7ff fd27 	bl	d6168 <spark_cloud_flag_connected>
   d671a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d671c:	4683      	mov	fp, r0
   d671e:	bb30      	cbnz	r0, d676e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6720:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6724:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6726:	a905      	add	r1, sp, #20
   d6728:	4628      	mov	r0, r5
   d672a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d672e:	f7ff fe79 	bl	d6424 <_ZN8particle5ErrorC1EOS0_>
   d6732:	2014      	movs	r0, #20
   d6734:	f7fd fcb1 	bl	d409a <_Znwj>
   d6738:	4604      	mov	r4, r0
   d673a:	b158      	cbz	r0, d6754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d673c:	2302      	movs	r3, #2
   d673e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6740:	2301      	movs	r3, #1
   d6742:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6744:	f8c0 b004 	str.w	fp, [r0, #4]
   d6748:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d674c:	4629      	mov	r1, r5
   d674e:	300c      	adds	r0, #12
   d6750:	f7ff fe68 	bl	d6424 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6754:	4630      	mov	r0, r6
   d6756:	4621      	mov	r1, r4
   d6758:	f840 4b04 	str.w	r4, [r0], #4
   d675c:	f7ff ff08 	bl	d6570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6760:	4628      	mov	r0, r5
   d6762:	f7ff fe6e 	bl	d6442 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6766:	a805      	add	r0, sp, #20
   d6768:	f7ff fe6b 	bl	d6442 <_ZN8particle5ErrorD1Ev>
   d676c:	e052      	b.n	d6814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d676e:	2400      	movs	r4, #0
   d6770:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6772:	2014      	movs	r0, #20
   d6774:	606c      	str	r4, [r5, #4]
   d6776:	60ac      	str	r4, [r5, #8]
   d6778:	9307      	str	r3, [sp, #28]
   d677a:	f7fd fc8e 	bl	d409a <_Znwj>
   d677e:	4601      	mov	r1, r0
   d6780:	b118      	cbz	r0, d678a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6782:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6784:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6786:	6044      	str	r4, [r0, #4]
   d6788:	6084      	str	r4, [r0, #8]
   d678a:	a804      	add	r0, sp, #16
   d678c:	9103      	str	r1, [sp, #12]
   d678e:	f7ff feef 	bl	d6570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6792:	4b22      	ldr	r3, [pc, #136]	; (d681c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6794:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6796:	2008      	movs	r0, #8
   d6798:	f7fd fc7f 	bl	d409a <_Znwj>
   d679c:	4604      	mov	r4, r0
   d679e:	b128      	cbz	r0, d67ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d67a0:	9b03      	ldr	r3, [sp, #12]
   d67a2:	f840 3b04 	str.w	r3, [r0], #4
   d67a6:	a904      	add	r1, sp, #16
   d67a8:	f7ff fdbd 	bl	d6326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d67ac:	9500      	str	r5, [sp, #0]
   d67ae:	fa5f f38a 	uxtb.w	r3, sl
   d67b2:	464a      	mov	r2, r9
   d67b4:	4641      	mov	r1, r8
   d67b6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d67b8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d67ba:	f7ff fce5 	bl	d6188 <spark_send_event>
   d67be:	b920      	cbnz	r0, d67ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d67c0:	9b03      	ldr	r3, [sp, #12]
   d67c2:	785b      	ldrb	r3, [r3, #1]
   d67c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d67c8:	b183      	cbz	r3, d67ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d67ca:	9b03      	ldr	r3, [sp, #12]
   d67cc:	9305      	str	r3, [sp, #20]
   d67ce:	a904      	add	r1, sp, #16
   d67d0:	a806      	add	r0, sp, #24
   d67d2:	f7ff fda8 	bl	d6326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d67d6:	a905      	add	r1, sp, #20
   d67d8:	4630      	mov	r0, r6
   d67da:	f7ff fe89 	bl	d64f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67de:	a806      	add	r0, sp, #24
   d67e0:	f7fe fa82 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67e4:	a804      	add	r0, sp, #16
   d67e6:	f7fe fa7f 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67ea:	e013      	b.n	d6814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d67ec:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d67f0:	a905      	add	r1, sp, #20
   d67f2:	a803      	add	r0, sp, #12
   d67f4:	9205      	str	r2, [sp, #20]
   d67f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d67fa:	f7ff fefd 	bl	d65f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d67fe:	a805      	add	r0, sp, #20
   d6800:	f7ff fe1f 	bl	d6442 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6804:	a805      	add	r0, sp, #20
   d6806:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6808:	f7ff fe83 	bl	d6512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d680c:	a806      	add	r0, sp, #24
   d680e:	f7fe fa6b 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6812:	e7da      	b.n	d67ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6814:	4630      	mov	r0, r6
   d6816:	b00b      	add	sp, #44	; 0x2c
   d6818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d681c:	000d6991 	.word	0x000d6991

000d6820 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6820:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6824:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6826:	d006      	beq.n	d6836 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6828:	2a03      	cmp	r2, #3
   d682a:	d017      	beq.n	d685c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d682c:	2a01      	cmp	r2, #1
   d682e:	d122      	bne.n	d6876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6830:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6832:	6003      	str	r3, [r0, #0]
	      break;
   d6834:	e01f      	b.n	d6876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6836:	2018      	movs	r0, #24
   d6838:	680e      	ldr	r6, [r1, #0]
   d683a:	f7fd fc2e 	bl	d409a <_Znwj>
   d683e:	4605      	mov	r5, r0
   d6840:	b150      	cbz	r0, d6858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6842:	4631      	mov	r1, r6
   d6844:	f7ff fec8 	bl	d65d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6848:	6930      	ldr	r0, [r6, #16]
   d684a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d684e:	b108      	cbz	r0, d6854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6850:	f002 f9cc 	bl	d8bec <strdup>
   d6854:	6128      	str	r0, [r5, #16]
   d6856:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6858:	6025      	str	r5, [r4, #0]
   d685a:	e00c      	b.n	d6876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d685c:	6804      	ldr	r4, [r0, #0]
   d685e:	b154      	cbz	r4, d6876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6860:	f104 0010 	add.w	r0, r4, #16
   d6864:	f7ff fded 	bl	d6442 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6868:	4620      	mov	r0, r4
   d686a:	f7ff fdd2 	bl	d6412 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d686e:	2118      	movs	r1, #24
   d6870:	4620      	mov	r0, r4
   d6872:	f001 f846 	bl	d7902 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6876:	2000      	movs	r0, #0
   d6878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d687a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d687a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d687c:	2300      	movs	r3, #0
   d687e:	6083      	str	r3, [r0, #8]
   d6880:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6882:	4604      	mov	r4, r0
   d6884:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6886:	b12b      	cbz	r3, d6894 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6888:	2202      	movs	r2, #2
   d688a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d688c:	68eb      	ldr	r3, [r5, #12]
   d688e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6890:	68ab      	ldr	r3, [r5, #8]
   d6892:	60a3      	str	r3, [r4, #8]
	}
    }
   d6894:	4620      	mov	r0, r4
   d6896:	bd38      	pop	{r3, r4, r5, pc}

000d6898 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6898:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d689a:	b570      	push	{r4, r5, r6, lr}
   d689c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d689e:	d006      	beq.n	d68ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d68a0:	2a03      	cmp	r2, #3
   d68a2:	d011      	beq.n	d68c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d68a4:	2a01      	cmp	r2, #1
   d68a6:	d118      	bne.n	d68da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d68a8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d68aa:	6003      	str	r3, [r0, #0]
	      break;
   d68ac:	e015      	b.n	d68da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d68ae:	2014      	movs	r0, #20
   d68b0:	680e      	ldr	r6, [r1, #0]
   d68b2:	f7fd fbf2 	bl	d409a <_Znwj>
   d68b6:	4605      	mov	r5, r0
   d68b8:	b120      	cbz	r0, d68c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d68ba:	4631      	mov	r1, r6
   d68bc:	f7ff ffdd 	bl	d687a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d68c0:	7c33      	ldrb	r3, [r6, #16]
   d68c2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d68c4:	6025      	str	r5, [r4, #0]
   d68c6:	e008      	b.n	d68da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d68c8:	6804      	ldr	r4, [r0, #0]
   d68ca:	b134      	cbz	r4, d68da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68cc:	4620      	mov	r0, r4
   d68ce:	f7ff fda0 	bl	d6412 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d68d2:	2114      	movs	r1, #20
   d68d4:	4620      	mov	r0, r4
   d68d6:	f001 f814 	bl	d7902 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d68da:	2000      	movs	r0, #0
   d68dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d68e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d68e0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d68e2:	2300      	movs	r3, #0
   d68e4:	b087      	sub	sp, #28
   d68e6:	460c      	mov	r4, r1
   d68e8:	f3bf 8f5f 	dmb	sy
   d68ec:	e850 6f00 	ldrex	r6, [r0]
   d68f0:	e840 3200 	strex	r2, r3, [r0]
   d68f4:	2a00      	cmp	r2, #0
   d68f6:	d1f9      	bne.n	d68ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d68f8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d68fc:	2e00      	cmp	r6, #0
   d68fe:	d03f      	beq.n	d6980 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6900:	4618      	mov	r0, r3
   d6902:	f7ff fbe5 	bl	d60d0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6906:	4607      	mov	r7, r0
   d6908:	b120      	cbz	r0, d6914 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d690a:	4621      	mov	r1, r4
   d690c:	4630      	mov	r0, r6
   d690e:	f7ff fe53 	bl	d65b8 <_ZNKSt8functionIFvRKbEEclES1_>
   d6912:	e02e      	b.n	d6972 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6914:	4631      	mov	r1, r6
   d6916:	a801      	add	r0, sp, #4
   d6918:	f7ff ffaf 	bl	d687a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d691c:	7823      	ldrb	r3, [r4, #0]
   d691e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6922:	2010      	movs	r0, #16
   d6924:	f7fd fbb9 	bl	d409a <_Znwj>
   d6928:	4605      	mov	r5, r0
   d692a:	b1d0      	cbz	r0, d6962 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d692c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d692e:	2014      	movs	r0, #20
   d6930:	f7fd fbb3 	bl	d409a <_Znwj>
   d6934:	4604      	mov	r4, r0
   d6936:	b178      	cbz	r0, d6958 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6938:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d693a:	4601      	mov	r1, r0
   d693c:	a801      	add	r0, sp, #4
   d693e:	f7ff fe06 	bl	d654e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6942:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6944:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6946:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6948:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d694a:	9203      	str	r2, [sp, #12]
   d694c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d694e:	60e3      	str	r3, [r4, #12]
   d6950:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6954:	9204      	str	r2, [sp, #16]
   d6956:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6958:	4b0a      	ldr	r3, [pc, #40]	; (d6984 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d695a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d695c:	4b0a      	ldr	r3, [pc, #40]	; (d6988 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d695e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6960:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6962:	a801      	add	r0, sp, #4
   d6964:	f7ff fd55 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6968:	2200      	movs	r2, #0
   d696a:	4629      	mov	r1, r5
   d696c:	4807      	ldr	r0, [pc, #28]	; (d698c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d696e:	f7ff fbb7 	bl	d60e0 <application_thread_invoke>
   d6972:	4630      	mov	r0, r6
   d6974:	f7ff fd4d 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6978:	2110      	movs	r1, #16
   d697a:	4630      	mov	r0, r6
   d697c:	f000 ffc1 	bl	d7902 <_ZdlPvj>
        }
    }
   d6980:	b007      	add	sp, #28
   d6982:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6984:	000d65cb 	.word	0x000d65cb
   d6988:	000d6899 	.word	0x000d6899
   d698c:	000d62ef 	.word	0x000d62ef

000d6990 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6990:	b530      	push	{r4, r5, lr}
   d6992:	b085      	sub	sp, #20
   d6994:	4604      	mov	r4, r0
   d6996:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6998:	4668      	mov	r0, sp
   d699a:	4611      	mov	r1, r2
   d699c:	f7ff fdb9 	bl	d6512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d69a0:	b17c      	cbz	r4, d69c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d69a2:	b224      	sxth	r4, r4
   d69a4:	4628      	mov	r0, r5
   d69a6:	b10d      	cbz	r5, d69ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d69a8:	f002 f920 	bl	d8bec <strdup>
   d69ac:	9002      	str	r0, [sp, #8]
   d69ae:	a902      	add	r1, sp, #8
   d69b0:	4668      	mov	r0, sp
   d69b2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d69b6:	f7ff fe1f 	bl	d65f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d69ba:	a802      	add	r0, sp, #8
   d69bc:	f7ff fd41 	bl	d6442 <_ZN8particle5ErrorD1Ev>
   d69c0:	e01d      	b.n	d69fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d69c2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d69c4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d69c8:	f04f 0201 	mov.w	r2, #1
   d69cc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d69d0:	42a3      	cmp	r3, r4
   d69d2:	d103      	bne.n	d69dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d69d4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d69d8:	2900      	cmp	r1, #0
   d69da:	d1f7      	bne.n	d69cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d69dc:	d002      	beq.n	d69e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d69de:	f88d 3008 	strb.w	r3, [sp, #8]
   d69e2:	e00c      	b.n	d69fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d69e4:	f110 010c 	adds.w	r1, r0, #12
   d69e8:	f04f 0301 	mov.w	r3, #1
   d69ec:	bf18      	it	ne
   d69ee:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d69f0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d69f4:	3004      	adds	r0, #4
   d69f6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d69fa:	f7ff ff71 	bl	d68e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d69fe:	a801      	add	r0, sp, #4
   d6a00:	f7fe f972 	bl	d4ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6a04:	b005      	add	sp, #20
   d6a06:	bd30      	pop	{r4, r5, pc}

000d6a08 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a08:	2200      	movs	r2, #0
   d6a0a:	4611      	mov	r1, r2
   d6a0c:	6840      	ldr	r0, [r0, #4]
   d6a0e:	f7ff bc1b 	b.w	d6248 <network_listening>

000d6a12 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a12:	2200      	movs	r2, #0
   d6a14:	4611      	mov	r1, r2
   d6a16:	6840      	ldr	r0, [r0, #4]
   d6a18:	f7ff bc26 	b.w	d6268 <network_get_listen_timeout>

000d6a1c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a1c:	2200      	movs	r2, #0
   d6a1e:	6840      	ldr	r0, [r0, #4]
   d6a20:	f7ff bc1a 	b.w	d6258 <network_set_listen_timeout>

000d6a24 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a24:	2200      	movs	r2, #0
   d6a26:	f081 0101 	eor.w	r1, r1, #1
   d6a2a:	6840      	ldr	r0, [r0, #4]
   d6a2c:	f7ff bc04 	b.w	d6238 <network_listen>

000d6a30 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6a30:	2300      	movs	r3, #0
   d6a32:	461a      	mov	r2, r3
   d6a34:	4619      	mov	r1, r3
   d6a36:	6840      	ldr	r0, [r0, #4]
   d6a38:	f7ff bbf6 	b.w	d6228 <network_off>

000d6a3c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6a3c:	2300      	movs	r3, #0
   d6a3e:	461a      	mov	r2, r3
   d6a40:	4619      	mov	r1, r3
   d6a42:	6840      	ldr	r0, [r0, #4]
   d6a44:	f7ff bbe8 	b.w	d6218 <network_on>

000d6a48 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6a48:	2200      	movs	r2, #0
   d6a4a:	4611      	mov	r1, r2
   d6a4c:	6840      	ldr	r0, [r0, #4]
   d6a4e:	f7ff bbdb 	b.w	d6208 <network_ready>

000d6a52 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a52:	2200      	movs	r2, #0
   d6a54:	4611      	mov	r1, r2
   d6a56:	6840      	ldr	r0, [r0, #4]
   d6a58:	f7ff bbc6 	b.w	d61e8 <network_connecting>

000d6a5c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a5c:	2200      	movs	r2, #0
   d6a5e:	2102      	movs	r1, #2
   d6a60:	6840      	ldr	r0, [r0, #4]
   d6a62:	f7ff bbc9 	b.w	d61f8 <network_disconnect>

000d6a66 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a66:	2300      	movs	r3, #0
   d6a68:	461a      	mov	r2, r3
   d6a6a:	6840      	ldr	r0, [r0, #4]
   d6a6c:	f7ff bbb4 	b.w	d61d8 <network_connect>

000d6a70 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6a70:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6a72:	2203      	movs	r2, #3
   d6a74:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6a76:	4a02      	ldr	r2, [pc, #8]	; (d6a80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6a78:	601a      	str	r2, [r3, #0]
   d6a7a:	4770      	bx	lr
   d6a7c:	2003e38c 	.word	0x2003e38c
   d6a80:	000db318 	.word	0x000db318

000d6a84 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6a84:	4770      	bx	lr

000d6a86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a88:	4606      	mov	r6, r0
   d6a8a:	4615      	mov	r5, r2
   d6a8c:	460c      	mov	r4, r1
   d6a8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a90:	42bc      	cmp	r4, r7
   d6a92:	d006      	beq.n	d6aa2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a94:	6833      	ldr	r3, [r6, #0]
   d6a96:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a9a:	689b      	ldr	r3, [r3, #8]
   d6a9c:	4630      	mov	r0, r6
   d6a9e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6aa0:	e7f6      	b.n	d6a90 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6aa2:	4628      	mov	r0, r5
   d6aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6aa6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6aa6:	2200      	movs	r2, #0
   d6aa8:	7c00      	ldrb	r0, [r0, #16]
   d6aaa:	f7ff b9d9 	b.w	d5e60 <HAL_I2C_Write_Data>

000d6aae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6aae:	2100      	movs	r1, #0
   d6ab0:	7c00      	ldrb	r0, [r0, #16]
   d6ab2:	f7ff b9dd 	b.w	d5e70 <HAL_I2C_Available_Data>

000d6ab6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6ab6:	2100      	movs	r1, #0
   d6ab8:	7c00      	ldrb	r0, [r0, #16]
   d6aba:	f7ff b9e1 	b.w	d5e80 <HAL_I2C_Read_Data>

000d6abe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6abe:	2100      	movs	r1, #0
   d6ac0:	7c00      	ldrb	r0, [r0, #16]
   d6ac2:	f7ff b9e5 	b.w	d5e90 <HAL_I2C_Peek_Data>

000d6ac6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6ac6:	2100      	movs	r1, #0
   d6ac8:	7c00      	ldrb	r0, [r0, #16]
   d6aca:	f7ff b9e9 	b.w	d5ea0 <HAL_I2C_Flush_Data>

000d6ace <_ZN7TwoWireD0Ev>:
   d6ace:	b510      	push	{r4, lr}
   d6ad0:	2114      	movs	r1, #20
   d6ad2:	4604      	mov	r4, r0
   d6ad4:	f000 ff15 	bl	d7902 <_ZdlPvj>
   d6ad8:	4620      	mov	r0, r4
   d6ada:	bd10      	pop	{r4, pc}

000d6adc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6adc:	b510      	push	{r4, lr}
   d6ade:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ae0:	2300      	movs	r3, #0
   d6ae2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ae8:	60a3      	str	r3, [r4, #8]
   d6aea:	4b04      	ldr	r3, [pc, #16]	; (d6afc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6aec:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6aee:	4608      	mov	r0, r1
   d6af0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6af2:	4611      	mov	r1, r2
   d6af4:	f7ff f9e4 	bl	d5ec0 <HAL_I2C_Init>
}
   d6af8:	4620      	mov	r0, r4
   d6afa:	bd10      	pop	{r4, pc}
   d6afc:	000db34c 	.word	0x000db34c

000d6b00 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6b00:	2300      	movs	r3, #0
   d6b02:	461a      	mov	r2, r3
   d6b04:	4619      	mov	r1, r3
   d6b06:	7c00      	ldrb	r0, [r0, #16]
   d6b08:	f7ff b992 	b.w	d5e30 <HAL_I2C_Begin>

000d6b0c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6b0c:	b570      	push	{r4, r5, r6, lr}
   d6b0e:	460c      	mov	r4, r1
   d6b10:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6b12:	2514      	movs	r5, #20
   d6b14:	4606      	mov	r6, r0
   d6b16:	462a      	mov	r2, r5
   d6b18:	2100      	movs	r1, #0
   d6b1a:	a801      	add	r0, sp, #4
   d6b1c:	f002 f823 	bl	d8b66 <memset>
   d6b20:	7823      	ldrb	r3, [r4, #0]
   d6b22:	f88d 3008 	strb.w	r3, [sp, #8]
   d6b26:	6863      	ldr	r3, [r4, #4]
   d6b28:	9303      	str	r3, [sp, #12]
   d6b2a:	68e3      	ldr	r3, [r4, #12]
   d6b2c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6b2e:	2200      	movs	r2, #0
   d6b30:	7a23      	ldrb	r3, [r4, #8]
   d6b32:	7c30      	ldrb	r0, [r6, #16]
   d6b34:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6b38:	a901      	add	r1, sp, #4
   d6b3a:	9305      	str	r3, [sp, #20]
   d6b3c:	f7ff f9c8 	bl	d5ed0 <HAL_I2C_Request_Data_Ex>
}
   d6b40:	b006      	add	sp, #24
   d6b42:	bd70      	pop	{r4, r5, r6, pc}

000d6b44 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6b46:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6b48:	f88d 1000 	strb.w	r1, [sp]
   d6b4c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6b50:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6b52:	bf18      	it	ne
   d6b54:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6b56:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6b58:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6b5a:	f88d 3008 	strb.w	r3, [sp, #8]
   d6b5e:	f7ff ffd5 	bl	d6b0c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6b62:	b005      	add	sp, #20
   d6b64:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b68 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6b68:	2301      	movs	r3, #1
   d6b6a:	f7ff bfeb 	b.w	d6b44 <_ZN7TwoWire11requestFromEhjh>

000d6b6e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6b6e:	2200      	movs	r2, #0
   d6b70:	7c00      	ldrb	r0, [r0, #16]
   d6b72:	f7ff b965 	b.w	d5e40 <HAL_I2C_Begin_Transmission>

000d6b76 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6b76:	2200      	movs	r2, #0
   d6b78:	7c00      	ldrb	r0, [r0, #16]
   d6b7a:	f7ff b969 	b.w	d5e50 <HAL_I2C_End_Transmission>

000d6b7e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6b7e:	2101      	movs	r1, #1
   d6b80:	f7ff bff9 	b.w	d6b76 <_ZN7TwoWire15endTransmissionEh>

000d6b84 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6b84:	2100      	movs	r1, #0
   d6b86:	7c00      	ldrb	r0, [r0, #16]
   d6b88:	f7ff b992 	b.w	d5eb0 <HAL_I2C_Is_Enabled>

000d6b8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b8c:	4770      	bx	lr

000d6b8e <_ZN9IPAddressD0Ev>:
   d6b8e:	b510      	push	{r4, lr}
   d6b90:	2118      	movs	r1, #24
   d6b92:	4604      	mov	r4, r0
   d6b94:	f000 feb5 	bl	d7902 <_ZdlPvj>
   d6b98:	4620      	mov	r0, r4
   d6b9a:	bd10      	pop	{r4, pc}

000d6b9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b9e:	7d03      	ldrb	r3, [r0, #20]
   d6ba0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6ba2:	b08d      	sub	sp, #52	; 0x34
   d6ba4:	460e      	mov	r6, r1
   d6ba6:	f100 0704 	add.w	r7, r0, #4
   d6baa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6bae:	d002      	beq.n	d6bb6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6bb0:	f100 0508 	add.w	r5, r0, #8
   d6bb4:	e018      	b.n	d6be8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6bb6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6bb8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6bba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6bbe:	232f      	movs	r3, #47	; 0x2f
   d6bc0:	462a      	mov	r2, r5
   d6bc2:	200a      	movs	r0, #10
   d6bc4:	f7ff f98c 	bl	d5ee0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6bc8:	4628      	mov	r0, r5
   d6bca:	f002 f82a 	bl	d8c22 <strlen>
   d6bce:	6833      	ldr	r3, [r6, #0]
   d6bd0:	4602      	mov	r2, r0
   d6bd2:	68db      	ldr	r3, [r3, #12]
   d6bd4:	4629      	mov	r1, r5
   d6bd6:	4630      	mov	r0, r6
   d6bd8:	4798      	blx	r3
   d6bda:	e00f      	b.n	d6bfc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6bdc:	b124      	cbz	r4, d6be8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6bde:	212e      	movs	r1, #46	; 0x2e
   d6be0:	4630      	mov	r0, r6
   d6be2:	f000 f9d5 	bl	d6f90 <_ZN5Print5printEc>
   d6be6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6be8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6bec:	220a      	movs	r2, #10
   d6bee:	4630      	mov	r0, r6
   d6bf0:	f000 f9e7 	bl	d6fc2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bf4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bf6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bf8:	d1f0      	bne.n	d6bdc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bfa:	4620      	mov	r0, r4
    }
    return n;
}
   d6bfc:	b00d      	add	sp, #52	; 0x34
   d6bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c00 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6c00:	b510      	push	{r4, lr}
   d6c02:	4b05      	ldr	r3, [pc, #20]	; (d6c18 <_ZN9IPAddressC1Ev+0x18>)
   d6c04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6c06:	2211      	movs	r2, #17
   d6c08:	f840 3b04 	str.w	r3, [r0], #4
   d6c0c:	2100      	movs	r1, #0
   d6c0e:	f001 ffaa 	bl	d8b66 <memset>
{
    clear();
}
   d6c12:	4620      	mov	r0, r4
   d6c14:	bd10      	pop	{r4, pc}
   d6c16:	bf00      	nop
   d6c18:	000db374 	.word	0x000db374

000d6c1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6c1c:	4603      	mov	r3, r0
   d6c1e:	4a07      	ldr	r2, [pc, #28]	; (d6c3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6c20:	b510      	push	{r4, lr}
   d6c22:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6c26:	f101 0210 	add.w	r2, r1, #16
   d6c2a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6c2e:	f843 4b04 	str.w	r4, [r3], #4
   d6c32:	4291      	cmp	r1, r2
   d6c34:	d1f9      	bne.n	d6c2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6c36:	780a      	ldrb	r2, [r1, #0]
   d6c38:	701a      	strb	r2, [r3, #0]
}
   d6c3a:	bd10      	pop	{r4, pc}
   d6c3c:	000db374 	.word	0x000db374

000d6c40 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6c40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6c42:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6c52:	2304      	movs	r3, #4
   d6c54:	6041      	str	r1, [r0, #4]
   d6c56:	7503      	strb	r3, [r0, #20]
   d6c58:	bd10      	pop	{r4, pc}

000d6c5a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c5c:	780d      	ldrb	r5, [r1, #0]
   d6c5e:	788b      	ldrb	r3, [r1, #2]
   d6c60:	784a      	ldrb	r2, [r1, #1]
   d6c62:	78c9      	ldrb	r1, [r1, #3]
   d6c64:	9100      	str	r1, [sp, #0]
   d6c66:	4629      	mov	r1, r5
   d6c68:	f7ff ffea 	bl	d6c40 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6c6c:	b003      	add	sp, #12
   d6c6e:	bd30      	pop	{r4, r5, pc}

000d6c70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c70:	4b01      	ldr	r3, [pc, #4]	; (d6c78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c72:	4a02      	ldr	r2, [pc, #8]	; (d6c7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c74:	601a      	str	r2, [r3, #0]
   d6c76:	4770      	bx	lr
   d6c78:	2003e394 	.word	0x2003e394
   d6c7c:	000db3f3 	.word	0x000db3f3

000d6c80 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c80:	2200      	movs	r2, #0
   d6c82:	4611      	mov	r1, r2
   d6c84:	6840      	ldr	r0, [r0, #4]
   d6c86:	f7ff badf 	b.w	d6248 <network_listening>

000d6c8a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c8a:	2200      	movs	r2, #0
   d6c8c:	4611      	mov	r1, r2
   d6c8e:	6840      	ldr	r0, [r0, #4]
   d6c90:	f7ff baea 	b.w	d6268 <network_get_listen_timeout>

000d6c94 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c94:	2200      	movs	r2, #0
   d6c96:	6840      	ldr	r0, [r0, #4]
   d6c98:	f7ff bade 	b.w	d6258 <network_set_listen_timeout>

000d6c9c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c9c:	2200      	movs	r2, #0
   d6c9e:	f081 0101 	eor.w	r1, r1, #1
   d6ca2:	6840      	ldr	r0, [r0, #4]
   d6ca4:	f7ff bac8 	b.w	d6238 <network_listen>

000d6ca8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6ca8:	2300      	movs	r3, #0
   d6caa:	461a      	mov	r2, r3
   d6cac:	2101      	movs	r1, #1
   d6cae:	6840      	ldr	r0, [r0, #4]
   d6cb0:	f7ff baba 	b.w	d6228 <network_off>

000d6cb4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6cb4:	2300      	movs	r3, #0
   d6cb6:	461a      	mov	r2, r3
   d6cb8:	4619      	mov	r1, r3
   d6cba:	6840      	ldr	r0, [r0, #4]
   d6cbc:	f7ff baac 	b.w	d6218 <network_on>

000d6cc0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6cc0:	2200      	movs	r2, #0
   d6cc2:	4611      	mov	r1, r2
   d6cc4:	6840      	ldr	r0, [r0, #4]
   d6cc6:	f7ff ba9f 	b.w	d6208 <network_ready>

000d6cca <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6cca:	2200      	movs	r2, #0
   d6ccc:	4611      	mov	r1, r2
   d6cce:	6840      	ldr	r0, [r0, #4]
   d6cd0:	f7ff ba8a 	b.w	d61e8 <network_connecting>

000d6cd4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6cd4:	2200      	movs	r2, #0
   d6cd6:	2102      	movs	r1, #2
   d6cd8:	6840      	ldr	r0, [r0, #4]
   d6cda:	f7ff ba8d 	b.w	d61f8 <network_disconnect>

000d6cde <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6cde:	2300      	movs	r3, #0
   d6ce0:	461a      	mov	r2, r3
   d6ce2:	6840      	ldr	r0, [r0, #4]
   d6ce4:	f7ff ba78 	b.w	d61d8 <network_connect>

000d6ce8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6ce8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cea:	4605      	mov	r5, r0
   d6cec:	b188      	cbz	r0, d6d12 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6cee:	6804      	ldr	r4, [r0, #0]
   d6cf0:	b14c      	cbz	r4, d6d06 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6cf2:	68a3      	ldr	r3, [r4, #8]
   d6cf4:	b11b      	cbz	r3, d6cfe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6cf6:	2203      	movs	r2, #3
   d6cf8:	4621      	mov	r1, r4
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cfe:	2110      	movs	r1, #16
   d6d00:	4620      	mov	r0, r4
   d6d02:	f000 fdfe 	bl	d7902 <_ZdlPvj>
   d6d06:	4628      	mov	r0, r5
   d6d08:	2114      	movs	r1, #20
      }
   d6d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d0e:	f000 bdf8 	b.w	d7902 <_ZdlPvj>
   d6d12:	bd38      	pop	{r3, r4, r5, pc}

000d6d14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6d14:	b110      	cbz	r0, d6d1c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6d16:	6803      	ldr	r3, [r0, #0]
   d6d18:	685b      	ldr	r3, [r3, #4]
   d6d1a:	4718      	bx	r3
   d6d1c:	4770      	bx	lr

000d6d1e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6d1e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6d20:	6803      	ldr	r3, [r0, #0]
   d6d22:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6d24:	b1bb      	cbz	r3, d6d56 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6d26:	6858      	ldr	r0, [r3, #4]
   d6d28:	f7fe ffda 	bl	d5ce0 <os_thread_is_current>
   d6d2c:	b978      	cbnz	r0, d6d4e <_ZN6ThreadD1Ev+0x30>
   d6d2e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6d30:	7c5a      	ldrb	r2, [r3, #17]
   d6d32:	b912      	cbnz	r2, d6d3a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6d34:	6858      	ldr	r0, [r3, #4]
   d6d36:	f7fe ffdb 	bl	d5cf0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6d3a:	6823      	ldr	r3, [r4, #0]
   d6d3c:	6858      	ldr	r0, [r3, #4]
   d6d3e:	f7fe ffdf 	bl	d5d00 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d42:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d44:	2300      	movs	r3, #0
   d6d46:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6d48:	b128      	cbz	r0, d6d56 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6d4a:	f7ff ffcd 	bl	d6ce8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d4e:	6820      	ldr	r0, [r4, #0]
   d6d50:	b108      	cbz	r0, d6d56 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6d52:	f7ff ffc9 	bl	d6ce8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6d56:	4620      	mov	r0, r4
   d6d58:	bd10      	pop	{r4, pc}

000d6d5a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6d5a:	b538      	push	{r3, r4, r5, lr}
   d6d5c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d5e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6d62:	b108      	cbz	r0, d6d68 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d64:	f7fd f99d 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6d68:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6d6c:	b108      	cbz	r0, d6d72 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6d6e:	f7fe ffd7 	bl	d5d20 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d72:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6d76:	b135      	cbz	r5, d6d86 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d78:	4628      	mov	r0, r5
   d6d7a:	f7ff ffd0 	bl	d6d1e <_ZN6ThreadD1Ev>
   d6d7e:	2104      	movs	r1, #4
   d6d80:	4628      	mov	r0, r5
   d6d82:	f000 fdbe 	bl	d7902 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d86:	6820      	ldr	r0, [r4, #0]
   d6d88:	b108      	cbz	r0, d6d8e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6d8a:	f7ff ffc3 	bl	d6d14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6d8e:	4620      	mov	r0, r4
   d6d90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d94 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6d94:	b510      	push	{r4, lr}
   d6d96:	4b04      	ldr	r3, [pc, #16]	; (d6da8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6d98:	4604      	mov	r4, r0
   d6d9a:	f840 3b08 	str.w	r3, [r0], #8
   d6d9e:	f7ff ffdc 	bl	d6d5a <_ZN5spark11MeshPublishD1Ev>
   d6da2:	4620      	mov	r0, r4
   d6da4:	bd10      	pop	{r4, pc}
   d6da6:	bf00      	nop
   d6da8:	000db468 	.word	0x000db468

000d6dac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6dac:	b538      	push	{r3, r4, r5, lr}
   d6dae:	4c0e      	ldr	r4, [pc, #56]	; (d6de8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6db0:	4b0e      	ldr	r3, [pc, #56]	; (d6dec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6db2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6db4:	2500      	movs	r5, #0
   d6db6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6db8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6dbc:	6063      	str	r3, [r4, #4]
   d6dbe:	60a5      	str	r5, [r4, #8]
   d6dc0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6dc4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6dc8:	f7fe ffa2 	bl	d5d10 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6dcc:	4b08      	ldr	r3, [pc, #32]	; (d6df0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6dce:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6dd2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6dd6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6dd8:	4620      	mov	r0, r4
   d6dda:	4a06      	ldr	r2, [pc, #24]	; (d6df4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6ddc:	4906      	ldr	r1, [pc, #24]	; (d6df8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6de2:	f000 bd89 	b.w	d78f8 <__aeabi_atexit>
   d6de6:	bf00      	nop
   d6de8:	2003e398 	.word	0x2003e398
   d6dec:	000db49c 	.word	0x000db49c
   d6df0:	000db468 	.word	0x000db468
   d6df4:	2003e1b0 	.word	0x2003e1b0
   d6df8:	000d6d95 	.word	0x000d6d95

000d6dfc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6dfc:	2300      	movs	r3, #0
   d6dfe:	461a      	mov	r2, r3
   d6e00:	6840      	ldr	r0, [r0, #4]
   d6e02:	f7ff b9e9 	b.w	d61d8 <network_connect>

000d6e06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e06:	2200      	movs	r2, #0
   d6e08:	2102      	movs	r1, #2
   d6e0a:	6840      	ldr	r0, [r0, #4]
   d6e0c:	f7ff b9f4 	b.w	d61f8 <network_disconnect>

000d6e10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e10:	2200      	movs	r2, #0
   d6e12:	4611      	mov	r1, r2
   d6e14:	6840      	ldr	r0, [r0, #4]
   d6e16:	f7ff b9e7 	b.w	d61e8 <network_connecting>

000d6e1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e1a:	2200      	movs	r2, #0
   d6e1c:	4611      	mov	r1, r2
   d6e1e:	6840      	ldr	r0, [r0, #4]
   d6e20:	f7ff b9f2 	b.w	d6208 <network_ready>

000d6e24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e24:	2300      	movs	r3, #0
   d6e26:	461a      	mov	r2, r3
   d6e28:	4619      	mov	r1, r3
   d6e2a:	6840      	ldr	r0, [r0, #4]
   d6e2c:	f7ff b9f4 	b.w	d6218 <network_on>

000d6e30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e30:	2300      	movs	r3, #0
   d6e32:	461a      	mov	r2, r3
   d6e34:	4619      	mov	r1, r3
   d6e36:	6840      	ldr	r0, [r0, #4]
   d6e38:	f7ff b9f6 	b.w	d6228 <network_off>

000d6e3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6e3c:	2200      	movs	r2, #0
   d6e3e:	f081 0101 	eor.w	r1, r1, #1
   d6e42:	6840      	ldr	r0, [r0, #4]
   d6e44:	f7ff b9f8 	b.w	d6238 <network_listen>

000d6e48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6e48:	2200      	movs	r2, #0
   d6e4a:	6840      	ldr	r0, [r0, #4]
   d6e4c:	f7ff ba04 	b.w	d6258 <network_set_listen_timeout>

000d6e50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6e50:	2200      	movs	r2, #0
   d6e52:	4611      	mov	r1, r2
   d6e54:	6840      	ldr	r0, [r0, #4]
   d6e56:	f7ff ba07 	b.w	d6268 <network_get_listen_timeout>

000d6e5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e5a:	2200      	movs	r2, #0
   d6e5c:	4611      	mov	r1, r2
   d6e5e:	6840      	ldr	r0, [r0, #4]
   d6e60:	f7ff b9f2 	b.w	d6248 <network_listening>

000d6e64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e68:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e6a:	b095      	sub	sp, #84	; 0x54
   d6e6c:	4616      	mov	r6, r2
   d6e6e:	460d      	mov	r5, r1
   d6e70:	4607      	mov	r7, r0
    IPAddress addr;
   d6e72:	f7ff fec5 	bl	d6c00 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6e76:	4621      	mov	r1, r4
   d6e78:	2220      	movs	r2, #32
   d6e7a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e7c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6e7e:	f001 fe72 	bl	d8b66 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6e82:	2340      	movs	r3, #64	; 0x40
   d6e84:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6e86:	4621      	mov	r1, r4
   d6e88:	466b      	mov	r3, sp
   d6e8a:	aa0c      	add	r2, sp, #48	; 0x30
   d6e8c:	4630      	mov	r0, r6
   d6e8e:	f7ff f837 	bl	d5f00 <netdb_getaddrinfo>
    if (!r) {
   d6e92:	4604      	mov	r4, r0
   d6e94:	2800      	cmp	r0, #0
   d6e96:	d144      	bne.n	d6f22 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e98:	4602      	mov	r2, r0
   d6e9a:	2101      	movs	r1, #1
   d6e9c:	6868      	ldr	r0, [r5, #4]
   d6e9e:	f7ff f9b3 	bl	d6208 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ea2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ea4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ea6:	4622      	mov	r2, r4
   d6ea8:	6868      	ldr	r0, [r5, #4]
   d6eaa:	f7ff f9ad 	bl	d6208 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6eae:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6eb0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6eb2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6eb4:	2e00      	cmp	r6, #0
   d6eb6:	d034      	beq.n	d6f22 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6eb8:	2900      	cmp	r1, #0
   d6eba:	d132      	bne.n	d6f22 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6ebc:	6873      	ldr	r3, [r6, #4]
   d6ebe:	2b02      	cmp	r3, #2
   d6ec0:	d002      	beq.n	d6ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6ec2:	2b0a      	cmp	r3, #10
   d6ec4:	d009      	beq.n	d6eda <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6ec6:	e02a      	b.n	d6f1e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6ec8:	f1b8 0f00 	cmp.w	r8, #0
   d6ecc:	d027      	beq.n	d6f1e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6ece:	6971      	ldr	r1, [r6, #20]
   d6ed0:	4638      	mov	r0, r7
   d6ed2:	3104      	adds	r1, #4
   d6ed4:	f7ff fec1 	bl	d6c5a <_ZN9IPAddressaSEPKh>
   d6ed8:	e020      	b.n	d6f1c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6eda:	f1b9 0f00 	cmp.w	r9, #0
   d6ede:	d01e      	beq.n	d6f1e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6ee0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6ee2:	2211      	movs	r2, #17
   d6ee4:	a801      	add	r0, sp, #4
   d6ee6:	f001 fe3e 	bl	d8b66 <memset>
                    a.v = 6;
   d6eea:	2306      	movs	r3, #6
   d6eec:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ef0:	ad01      	add	r5, sp, #4
   d6ef2:	f104 0308 	add.w	r3, r4, #8
   d6ef6:	3418      	adds	r4, #24
   d6ef8:	6818      	ldr	r0, [r3, #0]
   d6efa:	6859      	ldr	r1, [r3, #4]
   d6efc:	462a      	mov	r2, r5
   d6efe:	c203      	stmia	r2!, {r0, r1}
   d6f00:	3308      	adds	r3, #8
   d6f02:	42a3      	cmp	r3, r4
   d6f04:	4615      	mov	r5, r2
   d6f06:	d1f7      	bne.n	d6ef8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6f08:	a901      	add	r1, sp, #4
   d6f0a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6f0c:	ad07      	add	r5, sp, #28
   d6f0e:	f7ff fe85 	bl	d6c1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f14:	1d3c      	adds	r4, r7, #4
   d6f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f18:	682b      	ldr	r3, [r5, #0]
   d6f1a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6f1c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f1e:	69f6      	ldr	r6, [r6, #28]
   d6f20:	e7c8      	b.n	d6eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6f22:	9800      	ldr	r0, [sp, #0]
   d6f24:	f7fe ffe4 	bl	d5ef0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6f28:	4638      	mov	r0, r7
   d6f2a:	b015      	add	sp, #84	; 0x54
   d6f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6f30:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6f32:	4a03      	ldr	r2, [pc, #12]	; (d6f40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6f34:	601a      	str	r2, [r3, #0]
   d6f36:	2200      	movs	r2, #0
   d6f38:	605a      	str	r2, [r3, #4]
   d6f3a:	4770      	bx	lr
   d6f3c:	2003e56c 	.word	0x2003e56c
   d6f40:	000db49c 	.word	0x000db49c

000d6f44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f46:	4606      	mov	r6, r0
   d6f48:	460d      	mov	r5, r1
   d6f4a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6f4c:	2400      	movs	r4, #0
  while (size--) {
   d6f4e:	42bd      	cmp	r5, r7
   d6f50:	d00c      	beq.n	d6f6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6f52:	6833      	ldr	r3, [r6, #0]
   d6f54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f58:	689b      	ldr	r3, [r3, #8]
   d6f5a:	4630      	mov	r0, r6
   d6f5c:	4798      	blx	r3
     if (chunk>=0)
   d6f5e:	2800      	cmp	r0, #0
   d6f60:	db01      	blt.n	d6f66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6f62:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6f64:	e7f3      	b.n	d6f4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6f66:	2c00      	cmp	r4, #0
   d6f68:	bf08      	it	eq
   d6f6a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6f6c:	4620      	mov	r0, r4
   d6f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6f70:	b570      	push	{r4, r5, r6, lr}
   d6f72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6f74:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6f76:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6f78:	b149      	cbz	r1, d6f8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6f7a:	f001 fe52 	bl	d8c22 <strlen>
   d6f7e:	682b      	ldr	r3, [r5, #0]
   d6f80:	4602      	mov	r2, r0
   d6f82:	4621      	mov	r1, r4
   d6f84:	4628      	mov	r0, r5
   d6f86:	68db      	ldr	r3, [r3, #12]
    }
   d6f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6f8c:	4718      	bx	r3
    }
   d6f8e:	bd70      	pop	{r4, r5, r6, pc}

000d6f90 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6f90:	6803      	ldr	r3, [r0, #0]
   d6f92:	689b      	ldr	r3, [r3, #8]
   d6f94:	4718      	bx	r3

000d6f96 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f96:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6f98:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f9a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6f9c:	f7ff fff8 	bl	d6f90 <_ZN5Print5printEc>
  n += print('\n');
   d6fa0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6fa2:	4604      	mov	r4, r0
  n += print('\n');
   d6fa4:	4628      	mov	r0, r5
   d6fa6:	f7ff fff3 	bl	d6f90 <_ZN5Print5printEc>
  return n;
}
   d6faa:	4420      	add	r0, r4
   d6fac:	bd38      	pop	{r3, r4, r5, pc}

000d6fae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6fae:	b538      	push	{r3, r4, r5, lr}
   d6fb0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6fb2:	f7ff ffdd 	bl	d6f70 <_ZN5Print5writeEPKc>
   d6fb6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6fb8:	4628      	mov	r0, r5
   d6fba:	f7ff ffec 	bl	d6f96 <_ZN5Print7printlnEv>
  return n;
}
   d6fbe:	4420      	add	r0, r4
   d6fc0:	bd38      	pop	{r3, r4, r5, pc}

000d6fc2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6fc2:	b530      	push	{r4, r5, lr}
   d6fc4:	b08b      	sub	sp, #44	; 0x2c
   d6fc6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6fc8:	2100      	movs	r1, #0
   d6fca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6fce:	2a01      	cmp	r2, #1
   d6fd0:	bf98      	it	ls
   d6fd2:	220a      	movls	r2, #10
   d6fd4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6fd8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6fdc:	fb05 3312 	mls	r3, r5, r2, r3
   d6fe0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fe4:	2b09      	cmp	r3, #9
   d6fe6:	bf94      	ite	ls
   d6fe8:	3330      	addls	r3, #48	; 0x30
   d6fea:	3337      	addhi	r3, #55	; 0x37
   d6fec:	b2db      	uxtb	r3, r3
   d6fee:	4621      	mov	r1, r4
   d6ff0:	f804 3901 	strb.w	r3, [r4], #-1
   d6ff4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6ff6:	2d00      	cmp	r5, #0
   d6ff8:	d1ee      	bne.n	d6fd8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6ffa:	f7ff ffb9 	bl	d6f70 <_ZN5Print5writeEPKc>
}
   d6ffe:	b00b      	add	sp, #44	; 0x2c
   d7000:	bd30      	pop	{r4, r5, pc}

000d7002 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7002:	b510      	push	{r4, lr}
   d7004:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7006:	f7ff fa04 	bl	d6412 <_ZNSt14_Function_baseD1Ev>
   d700a:	4620      	mov	r0, r4
   d700c:	bd10      	pop	{r4, pc}
	...

000d7010 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7010:	4803      	ldr	r0, [pc, #12]	; (d7020 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7012:	4a04      	ldr	r2, [pc, #16]	; (d7024 <_GLOBAL__sub_I_RGB+0x14>)
   d7014:	4904      	ldr	r1, [pc, #16]	; (d7028 <_GLOBAL__sub_I_RGB+0x18>)
   d7016:	2300      	movs	r3, #0
   d7018:	6083      	str	r3, [r0, #8]
   d701a:	f000 bc6d 	b.w	d78f8 <__aeabi_atexit>
   d701e:	bf00      	nop
   d7020:	2003e574 	.word	0x2003e574
   d7024:	2003e1b0 	.word	0x2003e1b0
   d7028:	000d7003 	.word	0x000d7003

000d702c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d702c:	2100      	movs	r1, #0
   d702e:	f7fe bfaf 	b.w	d5f90 <HAL_SPI_Acquire>

000d7032 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7032:	2100      	movs	r1, #0
   d7034:	f7fe bfb4 	b.w	d5fa0 <HAL_SPI_Release>

000d7038 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7038:	b510      	push	{r4, lr}
   d703a:	4604      	mov	r4, r0
{
    _spi = spi;
   d703c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d703e:	4608      	mov	r0, r1
   d7040:	f7fe ff8e 	bl	d5f60 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7044:	2300      	movs	r3, #0
   d7046:	6063      	str	r3, [r4, #4]
}
   d7048:	4620      	mov	r0, r4
   d704a:	bd10      	pop	{r4, pc}

000d704c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d704c:	b510      	push	{r4, lr}
   d704e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7050:	7800      	ldrb	r0, [r0, #0]
   d7052:	f7ff ffeb 	bl	d702c <_ZN8SPIClass4lockEv.isra.0>
   d7056:	b948      	cbnz	r0, d706c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7058:	7820      	ldrb	r0, [r4, #0]
   d705a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d705e:	f7fe ff57 	bl	d5f10 <HAL_SPI_Begin>
        unlock();
   d7062:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7068:	f7ff bfe3 	b.w	d7032 <_ZN8SPIClass6unlockEv.isra.1>
   d706c:	bd10      	pop	{r4, pc}

000d706e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d706e:	b538      	push	{r3, r4, r5, lr}
   d7070:	4604      	mov	r4, r0
    if (!lock())
   d7072:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7074:	460d      	mov	r5, r1
    if (!lock())
   d7076:	f7ff ffd9 	bl	d702c <_ZN8SPIClass4lockEv.isra.0>
   d707a:	b940      	cbnz	r0, d708e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d707c:	7820      	ldrb	r0, [r4, #0]
   d707e:	4629      	mov	r1, r5
   d7080:	f7fe ff4e 	bl	d5f20 <HAL_SPI_Set_Bit_Order>
        unlock();
   d7084:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d708a:	f7ff bfd2 	b.w	d7032 <_ZN8SPIClass6unlockEv.isra.1>
   d708e:	bd38      	pop	{r3, r4, r5, pc}

000d7090 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7090:	b538      	push	{r3, r4, r5, lr}
   d7092:	4604      	mov	r4, r0
    if (!lock())
   d7094:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7096:	460d      	mov	r5, r1
    if (!lock())
   d7098:	f7ff ffc8 	bl	d702c <_ZN8SPIClass4lockEv.isra.0>
   d709c:	b940      	cbnz	r0, d70b0 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d709e:	7820      	ldrb	r0, [r4, #0]
   d70a0:	4629      	mov	r1, r5
   d70a2:	f7fe ff45 	bl	d5f30 <HAL_SPI_Set_Data_Mode>
        unlock();
   d70a6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d70a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d70ac:	f7ff bfc1 	b.w	d7032 <_ZN8SPIClass6unlockEv.isra.1>
   d70b0:	bd38      	pop	{r3, r4, r5, pc}

000d70b2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d70b2:	7800      	ldrb	r0, [r0, #0]
   d70b4:	f7ff bfbd 	b.w	d7032 <_ZN8SPIClass6unlockEv.isra.1>

000d70b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d70b8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d70ba:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d70bc:	6018      	str	r0, [r3, #0]
   d70be:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d70c0:	6818      	ldr	r0, [r3, #0]
   d70c2:	4288      	cmp	r0, r1
   d70c4:	b2e5      	uxtb	r5, r4
   d70c6:	d906      	bls.n	d70d6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d70c8:	3401      	adds	r4, #1
   d70ca:	2c08      	cmp	r4, #8
   d70cc:	d002      	beq.n	d70d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d70ce:	0840      	lsrs	r0, r0, #1
   d70d0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d70d2:	e7f5      	b.n	d70c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d70d4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d70d8:	5d5b      	ldrb	r3, [r3, r5]
   d70da:	7013      	strb	r3, [r2, #0]
   d70dc:	bd30      	pop	{r4, r5, pc}
   d70de:	bf00      	nop
   d70e0:	000db4c8 	.word	0x000db4c8

000d70e4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d70e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70e8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d70ea:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d70ec:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d70ee:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d70f0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d70f2:	460e      	mov	r6, r1
   d70f4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d70f6:	f7ff ff99 	bl	d702c <_ZN8SPIClass4lockEv.isra.0>
   d70fa:	4605      	mov	r5, r0
   d70fc:	bb00      	cbnz	r0, d7140 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d70fe:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7102:	4601      	mov	r1, r0
   d7104:	2214      	movs	r2, #20
   d7106:	a803      	add	r0, sp, #12
   d7108:	f001 fd2d 	bl	d8b66 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d710c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d710e:	462a      	mov	r2, r5
   d7110:	a903      	add	r1, sp, #12
   d7112:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7114:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7118:	f7fe ff32 	bl	d5f80 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d711c:	ab02      	add	r3, sp, #8
   d711e:	f10d 0207 	add.w	r2, sp, #7
   d7122:	fb07 f106 	mul.w	r1, r7, r6
   d7126:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7128:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d712c:	f7ff ffc4 	bl	d70b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d7130:	7820      	ldrb	r0, [r4, #0]
   d7132:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7136:	f7fe ff03 	bl	d5f40 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d713a:	7820      	ldrb	r0, [r4, #0]
   d713c:	f7ff ff79 	bl	d7032 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7140:	9802      	ldr	r0, [sp, #8]
   d7142:	b008      	add	sp, #32
   d7144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7148 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7148:	b538      	push	{r3, r4, r5, lr}
   d714a:	4604      	mov	r4, r0
    if (!lock())
   d714c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d714e:	460d      	mov	r5, r1
    if (!lock())
   d7150:	f7ff ff6c 	bl	d702c <_ZN8SPIClass4lockEv.isra.0>
   d7154:	b9c8      	cbnz	r0, d718a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7156:	6861      	ldr	r1, [r4, #4]
   d7158:	b171      	cbz	r1, d7178 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d715a:	4b0c      	ldr	r3, [pc, #48]	; (d718c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d715c:	5cc2      	ldrb	r2, [r0, r3]
   d715e:	42aa      	cmp	r2, r5
   d7160:	d002      	beq.n	d7168 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d7162:	3001      	adds	r0, #1
   d7164:	2808      	cmp	r0, #8
   d7166:	d1f9      	bne.n	d715c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7168:	3001      	adds	r0, #1
   d716a:	b2c0      	uxtb	r0, r0
   d716c:	40c1      	lsrs	r1, r0
   d716e:	2201      	movs	r2, #1
   d7170:	4620      	mov	r0, r4
   d7172:	f7ff ffb7 	bl	d70e4 <_ZN8SPIClass13setClockSpeedEjj>
   d7176:	e003      	b.n	d7180 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7178:	4629      	mov	r1, r5
   d717a:	7820      	ldrb	r0, [r4, #0]
   d717c:	f7fe fee0 	bl	d5f40 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7180:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d7186:	f7ff bf54 	b.w	d7032 <_ZN8SPIClass6unlockEv.isra.1>
   d718a:	bd38      	pop	{r3, r4, r5, pc}
   d718c:	000db4c8 	.word	0x000db4c8

000d7190 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7190:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7192:	7800      	ldrb	r0, [r0, #0]
   d7194:	f7fe fedc 	bl	d5f50 <HAL_SPI_Send_Receive_Data>
}
   d7198:	b2c0      	uxtb	r0, r0
   d719a:	bd08      	pop	{r3, pc}

000d719c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d719c:	7800      	ldrb	r0, [r0, #0]
   d719e:	f7fe bee7 	b.w	d5f70 <HAL_SPI_Is_Enabled>

000d71a2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d71a2:	b510      	push	{r4, lr}
   d71a4:	4604      	mov	r4, r0
{
	free(buffer);
   d71a6:	6800      	ldr	r0, [r0, #0]
   d71a8:	f7ff f86e 	bl	d6288 <free>
}
   d71ac:	4620      	mov	r0, r4
   d71ae:	bd10      	pop	{r4, pc}

000d71b0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d71b0:	b510      	push	{r4, lr}
   d71b2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d71b4:	6800      	ldr	r0, [r0, #0]
   d71b6:	b108      	cbz	r0, d71bc <_ZN6String10invalidateEv+0xc>
   d71b8:	f7ff f866 	bl	d6288 <free>
	buffer = NULL;
   d71bc:	2300      	movs	r3, #0
   d71be:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d71c0:	60a3      	str	r3, [r4, #8]
   d71c2:	6063      	str	r3, [r4, #4]
   d71c4:	bd10      	pop	{r4, pc}

000d71c6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d71c6:	b538      	push	{r3, r4, r5, lr}
   d71c8:	4604      	mov	r4, r0
   d71ca:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d71cc:	6800      	ldr	r0, [r0, #0]
   d71ce:	3101      	adds	r1, #1
   d71d0:	f7ff f862 	bl	d6298 <realloc>
	if (newbuffer) {
   d71d4:	b110      	cbz	r0, d71dc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d71d6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d71da:	2001      	movs	r0, #1
	}
	return 0;
}
   d71dc:	bd38      	pop	{r3, r4, r5, pc}

000d71de <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d71de:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d71e0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d71e2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d71e4:	b113      	cbz	r3, d71ec <_ZN6String7reserveEj+0xe>
   d71e6:	6843      	ldr	r3, [r0, #4]
   d71e8:	428b      	cmp	r3, r1
   d71ea:	d207      	bcs.n	d71fc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d71ec:	4620      	mov	r0, r4
   d71ee:	f7ff ffea 	bl	d71c6 <_ZN6String12changeBufferEj>
   d71f2:	b120      	cbz	r0, d71fe <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d71f4:	68a3      	ldr	r3, [r4, #8]
   d71f6:	b90b      	cbnz	r3, d71fc <_ZN6String7reserveEj+0x1e>
   d71f8:	6822      	ldr	r2, [r4, #0]
   d71fa:	7013      	strb	r3, [r2, #0]
   d71fc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d71fe:	bd10      	pop	{r4, pc}

000d7200 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7200:	b570      	push	{r4, r5, r6, lr}
   d7202:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7204:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7206:	4604      	mov	r4, r0
   d7208:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d720a:	f7ff ffe8 	bl	d71de <_ZN6String7reserveEj>
   d720e:	b918      	cbnz	r0, d7218 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7210:	4620      	mov	r0, r4
   d7212:	f7ff ffcd 	bl	d71b0 <_ZN6String10invalidateEv>
		return *this;
   d7216:	e009      	b.n	d722c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7218:	462a      	mov	r2, r5
   d721a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d721c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d721e:	6820      	ldr	r0, [r4, #0]
   d7220:	f001 fc96 	bl	d8b50 <memcpy>
	buffer[len] = 0;
   d7224:	6822      	ldr	r2, [r4, #0]
   d7226:	68a3      	ldr	r3, [r4, #8]
   d7228:	2100      	movs	r1, #0
   d722a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d722c:	4620      	mov	r0, r4
   d722e:	bd70      	pop	{r4, r5, r6, pc}

000d7230 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7230:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7232:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7234:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7236:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7238:	6043      	str	r3, [r0, #4]
	len = 0;
   d723a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d723c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d723e:	460d      	mov	r5, r1
   d7240:	b139      	cbz	r1, d7252 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7242:	4608      	mov	r0, r1
   d7244:	f001 fced 	bl	d8c22 <strlen>
   d7248:	4629      	mov	r1, r5
   d724a:	4602      	mov	r2, r0
   d724c:	4620      	mov	r0, r4
   d724e:	f7ff ffd7 	bl	d7200 <_ZN6String4copyEPKcj>
}
   d7252:	4620      	mov	r0, r4
   d7254:	bd38      	pop	{r3, r4, r5, pc}

000d7256 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7256:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7258:	b510      	push	{r4, lr}
   d725a:	460b      	mov	r3, r1
   d725c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d725e:	d007      	beq.n	d7270 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7260:	6809      	ldr	r1, [r1, #0]
   d7262:	b119      	cbz	r1, d726c <_ZN6StringaSERKS_+0x16>
   d7264:	689a      	ldr	r2, [r3, #8]
   d7266:	f7ff ffcb 	bl	d7200 <_ZN6String4copyEPKcj>
   d726a:	e001      	b.n	d7270 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d726c:	f7ff ffa0 	bl	d71b0 <_ZN6String10invalidateEv>

	return *this;
}
   d7270:	4620      	mov	r0, r4
   d7272:	bd10      	pop	{r4, pc}

000d7274 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7274:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7276:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7278:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d727a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d727c:	6043      	str	r3, [r0, #4]
	len = 0;
   d727e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7280:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7282:	f7ff ffe8 	bl	d7256 <_ZN6StringaSERKS_>
}
   d7286:	4620      	mov	r0, r4
   d7288:	bd10      	pop	{r4, pc}

000d728a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d728a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d728c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d728e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7290:	b912      	cbnz	r2, d7298 <_ZNK6String6equalsEPKc+0xe>
   d7292:	b919      	cbnz	r1, d729c <_ZNK6String6equalsEPKc+0x12>
   d7294:	2001      	movs	r0, #1
   d7296:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7298:	b911      	cbnz	r1, d72a0 <_ZNK6String6equalsEPKc+0x16>
   d729a:	6803      	ldr	r3, [r0, #0]
   d729c:	7818      	ldrb	r0, [r3, #0]
   d729e:	e002      	b.n	d72a6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d72a0:	6800      	ldr	r0, [r0, #0]
   d72a2:	f001 fc91 	bl	d8bc8 <strcmp>
   d72a6:	fab0 f080 	clz	r0, r0
   d72aa:	0940      	lsrs	r0, r0, #5
}
   d72ac:	bd08      	pop	{r3, pc}

000d72ae <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d72ae:	b570      	push	{r4, r5, r6, lr}
   d72b0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d72b2:	b19a      	cbz	r2, d72dc <_ZNK6String8getBytesEPhjj+0x2e>
   d72b4:	b191      	cbz	r1, d72dc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d72b6:	6885      	ldr	r5, [r0, #8]
   d72b8:	429d      	cmp	r5, r3
   d72ba:	d802      	bhi.n	d72c2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d72bc:	2300      	movs	r3, #0
   d72be:	700b      	strb	r3, [r1, #0]
		return;
   d72c0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d72c2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d72c4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d72c6:	6801      	ldr	r1, [r0, #0]
   d72c8:	42ac      	cmp	r4, r5
   d72ca:	bf28      	it	cs
   d72cc:	462c      	movcs	r4, r5
   d72ce:	4419      	add	r1, r3
   d72d0:	4622      	mov	r2, r4
   d72d2:	4630      	mov	r0, r6
   d72d4:	f001 fcc2 	bl	d8c5c <strncpy>
	buf[n] = 0;
   d72d8:	2300      	movs	r3, #0
   d72da:	5533      	strb	r3, [r6, r4]
   d72dc:	bd70      	pop	{r4, r5, r6, pc}

000d72de <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d72de:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d72e0:	6800      	ldr	r0, [r0, #0]
   d72e2:	b130      	cbz	r0, d72f2 <_ZNK6String7toFloatEv+0x14>
   d72e4:	f001 fb22 	bl	d892c <atof>
   d72e8:	ec51 0b10 	vmov	r0, r1, d0
   d72ec:	f001 f90a 	bl	d8504 <__aeabi_d2f>
   d72f0:	e000      	b.n	d72f4 <_ZNK6String7toFloatEv+0x16>
	return 0;
   d72f2:	2000      	movs	r0, #0
}
   d72f4:	ee00 0a10 	vmov	s0, r0
   d72f8:	bd08      	pop	{r3, pc}

000d72fa <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d72fa:	4601      	mov	r1, r0
   d72fc:	2200      	movs	r2, #0
   d72fe:	208c      	movs	r0, #140	; 0x8c
   d7300:	f7fe bd1e 	b.w	d5d40 <HAL_Core_System_Reset_Ex>

000d7304 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7304:	2000      	movs	r0, #0
   d7306:	f7ff bff8 	b.w	d72fa <_ZN11SystemClass5resetEm>
	...

000d730c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d730c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d730e:	4c09      	ldr	r4, [pc, #36]	; (d7334 <_GLOBAL__sub_I_System+0x28>)
   d7310:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7312:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7316:	6020      	str	r0, [r4, #0]
   d7318:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d731a:	71a0      	strb	r0, [r4, #6]
   d731c:	8120      	strh	r0, [r4, #8]
   d731e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7320:	f7fe febe 	bl	d60a0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7324:	4620      	mov	r0, r4
   d7326:	4a04      	ldr	r2, [pc, #16]	; (d7338 <_GLOBAL__sub_I_System+0x2c>)
   d7328:	4904      	ldr	r1, [pc, #16]	; (d733c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d732a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d732e:	f000 bae3 	b.w	d78f8 <__aeabi_atexit>
   d7332:	bf00      	nop
   d7334:	2003e584 	.word	0x2003e584
   d7338:	2003e1b0 	.word	0x2003e1b0
   d733c:	000d4b81 	.word	0x000d4b81

000d7340 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7340:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7342:	4b14      	ldr	r3, [pc, #80]	; (d7394 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7344:	4f14      	ldr	r7, [pc, #80]	; (d7398 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7346:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7348:	4b14      	ldr	r3, [pc, #80]	; (d739c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d734a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d734c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d734e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7350:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7352:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7354:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7356:	d01b      	beq.n	d7390 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7358:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d735a:	ad01      	add	r5, sp, #4
   d735c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7360:	f001 fafa 	bl	d8958 <localtime>
	calendar_time->tm_year += 1900;
   d7364:	6943      	ldr	r3, [r0, #20]
   d7366:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d736a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d736c:	4604      	mov	r4, r0
   d736e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7376:	f8d4 e000 	ldr.w	lr, [r4]
   d737a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d737e:	ad01      	add	r5, sp, #4
   d7380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7382:	4c07      	ldr	r4, [pc, #28]	; (d73a0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d738a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d738c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7390:	b00b      	add	sp, #44	; 0x2c
   d7392:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7394:	2003e5c0 	.word	0x2003e5c0
   d7398:	2003e5bc 	.word	0x2003e5bc
   d739c:	2003e5b8 	.word	0x2003e5b8
   d73a0:	2003e590 	.word	0x2003e590

000d73a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d73a4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d73a6:	2000      	movs	r0, #0
   d73a8:	f7fe ff06 	bl	d61b8 <spark_sync_time_pending>
   d73ac:	b128      	cbz	r0, d73ba <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d73ae:	f7fe fedb 	bl	d6168 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d73b2:	f080 0001 	eor.w	r0, r0, #1
   d73b6:	b2c0      	uxtb	r0, r0
   d73b8:	bd08      	pop	{r3, pc}
   d73ba:	2001      	movs	r0, #1
    }
   d73bc:	bd08      	pop	{r3, pc}

000d73be <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d73be:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d73c0:	2000      	movs	r0, #0
   d73c2:	f7fe fcfd 	bl	d5dc0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d73c6:	4604      	mov	r4, r0
   d73c8:	b968      	cbnz	r0, d73e6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d73ca:	f7fe fe61 	bl	d6090 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d73ce:	2801      	cmp	r0, #1
   d73d0:	d10b      	bne.n	d73ea <_ZN9TimeClass7isValidEv+0x2c>
   d73d2:	4620      	mov	r0, r4
   d73d4:	f7fe fe8c 	bl	d60f0 <system_thread_get_state>
   d73d8:	b938      	cbnz	r0, d73ea <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d73da:	f7ff ffe3 	bl	d73a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d73de:	b930      	cbnz	r0, d73ee <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d73e0:	f7fe feb2 	bl	d6148 <spark_process>
   d73e4:	e7f9      	b.n	d73da <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d73e6:	2001      	movs	r0, #1
   d73e8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d73ea:	2000      	movs	r0, #0
   d73ec:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d73ee:	f7ff ffd9 	bl	d73a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d73f2:	2000      	movs	r0, #0
   d73f4:	f7fe fce4 	bl	d5dc0 <HAL_RTC_Time_Is_Valid>
   d73f8:	3000      	adds	r0, #0
   d73fa:	bf18      	it	ne
   d73fc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d73fe:	bd10      	pop	{r4, pc}

000d7400 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7400:	b508      	push	{r3, lr}
    (void)isValid();
   d7402:	f7ff ffdc 	bl	d73be <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d740a:	f7fe bcb1 	b.w	d5d70 <HAL_RTC_Get_UnixTime>
	...

000d7410 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d7410:	b508      	push	{r3, lr}
	return hour(now());
   d7412:	f7ff fff5 	bl	d7400 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7416:	f7ff ff93 	bl	d7340 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d741a:	4b01      	ldr	r3, [pc, #4]	; (d7420 <_ZN9TimeClass4hourEv+0x10>)
   d741c:	6898      	ldr	r0, [r3, #8]
   d741e:	bd08      	pop	{r3, pc}
   d7420:	2003e590 	.word	0x2003e590

000d7424 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d7424:	b508      	push	{r3, lr}
	return minute(now());
   d7426:	f7ff ffeb 	bl	d7400 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d742a:	f7ff ff89 	bl	d7340 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d742e:	4b01      	ldr	r3, [pc, #4]	; (d7434 <_ZN9TimeClass6minuteEv+0x10>)
   d7430:	6858      	ldr	r0, [r3, #4]
   d7432:	bd08      	pop	{r3, pc}
   d7434:	2003e590 	.word	0x2003e590

000d7438 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7438:	4b02      	ldr	r3, [pc, #8]	; (d7444 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	4b02      	ldr	r3, [pc, #8]	; (d7448 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d743e:	601a      	str	r2, [r3, #0]
   d7440:	4770      	bx	lr
   d7442:	bf00      	nop
   d7444:	2003e0bc 	.word	0x2003e0bc
   d7448:	2003e5b4 	.word	0x2003e5b4

000d744c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d744c:	4770      	bx	lr

000d744e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d744e:	7441      	strb	r1, [r0, #17]
   d7450:	4770      	bx	lr

000d7452 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7452:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7454:	7c00      	ldrb	r0, [r0, #16]
   d7456:	f7fe fde3 	bl	d6020 <HAL_USART_Available_Data_For_Write>
}
   d745a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d745e:	bd08      	pop	{r3, pc}

000d7460 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7460:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7462:	7c00      	ldrb	r0, [r0, #16]
   d7464:	f7fe fdb4 	bl	d5fd0 <HAL_USART_Available_Data>
}
   d7468:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d746c:	bd08      	pop	{r3, pc}

000d746e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d746e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7470:	7c00      	ldrb	r0, [r0, #16]
   d7472:	f7fe fdbd 	bl	d5ff0 <HAL_USART_Peek_Data>
}
   d7476:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d747a:	bf28      	it	cs
   d747c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7480:	bd08      	pop	{r3, pc}

000d7482 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7482:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7484:	7c00      	ldrb	r0, [r0, #16]
   d7486:	f7fe fdab 	bl	d5fe0 <HAL_USART_Read_Data>
}
   d748a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d748e:	bf28      	it	cs
   d7490:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7494:	bd08      	pop	{r3, pc}

000d7496 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7496:	7c00      	ldrb	r0, [r0, #16]
   d7498:	f7fe bdb2 	b.w	d6000 <HAL_USART_Flush_Data>

000d749c <_ZN11USARTSerialD0Ev>:
   d749c:	b510      	push	{r4, lr}
   d749e:	2114      	movs	r1, #20
   d74a0:	4604      	mov	r4, r0
   d74a2:	f000 fa2e 	bl	d7902 <_ZdlPvj>
   d74a6:	4620      	mov	r0, r4
   d74a8:	bd10      	pop	{r4, pc}

000d74aa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d74aa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d74ac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d74ae:	4604      	mov	r4, r0
   d74b0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d74b2:	b925      	cbnz	r5, d74be <_ZN11USARTSerial5writeEh+0x14>
   d74b4:	7c00      	ldrb	r0, [r0, #16]
   d74b6:	f7fe fdb3 	bl	d6020 <HAL_USART_Available_Data_For_Write>
   d74ba:	2800      	cmp	r0, #0
   d74bc:	dd05      	ble.n	d74ca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d74be:	4631      	mov	r1, r6
   d74c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d74c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d74c6:	f7fe bd7b 	b.w	d5fc0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d74ca:	4628      	mov	r0, r5
   d74cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d74d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d74d0:	b510      	push	{r4, lr}
   d74d2:	4604      	mov	r4, r0
   d74d4:	4608      	mov	r0, r1
   d74d6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d74d8:	2200      	movs	r2, #0
   d74da:	6062      	str	r2, [r4, #4]
   d74dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d74e0:	60a2      	str	r2, [r4, #8]
   d74e2:	4a05      	ldr	r2, [pc, #20]	; (d74f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d74e4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d74e6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d74e8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d74ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d74ec:	461a      	mov	r2, r3
   d74ee:	f7fe fd5f 	bl	d5fb0 <HAL_USART_Init>
}
   d74f2:	4620      	mov	r0, r4
   d74f4:	bd10      	pop	{r4, pc}
   d74f6:	bf00      	nop
   d74f8:	000db500 	.word	0x000db500

000d74fc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d74fc:	7c00      	ldrb	r0, [r0, #16]
   d74fe:	f7fe bd87 	b.w	d6010 <HAL_USART_Is_Enabled>
	...

000d7504 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7504:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7506:	4d0c      	ldr	r5, [pc, #48]	; (d7538 <_Z22__fetch_global_Serial1v+0x34>)
   d7508:	6829      	ldr	r1, [r5, #0]
   d750a:	f011 0401 	ands.w	r4, r1, #1
   d750e:	d111      	bne.n	d7534 <_Z22__fetch_global_Serial1v+0x30>
   d7510:	4628      	mov	r0, r5
   d7512:	f7fc fdc8 	bl	d40a6 <__cxa_guard_acquire>
   d7516:	b168      	cbz	r0, d7534 <_Z22__fetch_global_Serial1v+0x30>
   d7518:	4a08      	ldr	r2, [pc, #32]	; (d753c <_Z22__fetch_global_Serial1v+0x38>)
   d751a:	4b09      	ldr	r3, [pc, #36]	; (d7540 <_Z22__fetch_global_Serial1v+0x3c>)
   d751c:	4809      	ldr	r0, [pc, #36]	; (d7544 <_Z22__fetch_global_Serial1v+0x40>)
   d751e:	4621      	mov	r1, r4
   d7520:	f7ff ffd6 	bl	d74d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7524:	4628      	mov	r0, r5
   d7526:	f7fc fdc3 	bl	d40b0 <__cxa_guard_release>
   d752a:	4a07      	ldr	r2, [pc, #28]	; (d7548 <_Z22__fetch_global_Serial1v+0x44>)
   d752c:	4907      	ldr	r1, [pc, #28]	; (d754c <_Z22__fetch_global_Serial1v+0x48>)
   d752e:	4805      	ldr	r0, [pc, #20]	; (d7544 <_Z22__fetch_global_Serial1v+0x40>)
   d7530:	f000 f9e2 	bl	d78f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7534:	4803      	ldr	r0, [pc, #12]	; (d7544 <_Z22__fetch_global_Serial1v+0x40>)
   d7536:	bd38      	pop	{r3, r4, r5, pc}
   d7538:	2003e65c 	.word	0x2003e65c
   d753c:	2003e660 	.word	0x2003e660
   d7540:	2003e5d8 	.word	0x2003e5d8
   d7544:	2003e5c4 	.word	0x2003e5c4
   d7548:	2003e1b0 	.word	0x2003e1b0
   d754c:	000d744d 	.word	0x000d744d

000d7550 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7550:	7441      	strb	r1, [r0, #17]
   d7552:	4770      	bx	lr

000d7554 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7554:	4770      	bx	lr

000d7556 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7556:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7558:	2100      	movs	r1, #0
   d755a:	7c00      	ldrb	r0, [r0, #16]
   d755c:	f7fe fd80 	bl	d6060 <HAL_USB_USART_Receive_Data>
}
   d7560:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7564:	bf28      	it	cs
   d7566:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d756a:	bd08      	pop	{r3, pc}

000d756c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d756c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d756e:	2101      	movs	r1, #1
   d7570:	7c00      	ldrb	r0, [r0, #16]
   d7572:	f7fe fd75 	bl	d6060 <HAL_USB_USART_Receive_Data>
}
   d7576:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d757a:	bf28      	it	cs
   d757c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7580:	bd08      	pop	{r3, pc}

000d7582 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7582:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7584:	7c00      	ldrb	r0, [r0, #16]
   d7586:	f7fe fd63 	bl	d6050 <HAL_USB_USART_Available_Data_For_Write>
}
   d758a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d758e:	bd08      	pop	{r3, pc}

000d7590 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7590:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7592:	7c00      	ldrb	r0, [r0, #16]
   d7594:	f7fe fd54 	bl	d6040 <HAL_USB_USART_Available_Data>
}
   d7598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d759c:	bd08      	pop	{r3, pc}

000d759e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d759e:	7c00      	ldrb	r0, [r0, #16]
   d75a0:	f7fe bd6e 	b.w	d6080 <HAL_USB_USART_Flush_Data>

000d75a4 <_ZN9USBSerialD0Ev>:
   d75a4:	b510      	push	{r4, lr}
   d75a6:	2114      	movs	r1, #20
   d75a8:	4604      	mov	r4, r0
   d75aa:	f000 f9aa 	bl	d7902 <_ZdlPvj>
   d75ae:	4620      	mov	r0, r4
   d75b0:	bd10      	pop	{r4, pc}

000d75b2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d75b2:	b538      	push	{r3, r4, r5, lr}
   d75b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d75b6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d75b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d75ba:	f7fe fd49 	bl	d6050 <HAL_USB_USART_Available_Data_For_Write>
   d75be:	2800      	cmp	r0, #0
   d75c0:	dc01      	bgt.n	d75c6 <_ZN9USBSerial5writeEh+0x14>
   d75c2:	7c60      	ldrb	r0, [r4, #17]
   d75c4:	b128      	cbz	r0, d75d2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d75c6:	4629      	mov	r1, r5
   d75c8:	7c20      	ldrb	r0, [r4, #16]
   d75ca:	f7fe fd51 	bl	d6070 <HAL_USB_USART_Send_Data>
   d75ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d75d2:	bd38      	pop	{r3, r4, r5, pc}

000d75d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d75d4:	b510      	push	{r4, lr}
   d75d6:	4604      	mov	r4, r0
   d75d8:	2300      	movs	r3, #0
   d75da:	6063      	str	r3, [r4, #4]
   d75dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d75e0:	60a3      	str	r3, [r4, #8]
   d75e2:	4b05      	ldr	r3, [pc, #20]	; (d75f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d75e4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d75e6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d75e8:	4608      	mov	r0, r1
{
  _serial = serial;
   d75ea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d75ec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d75ee:	4611      	mov	r1, r2
   d75f0:	f7fe fd1e 	bl	d6030 <HAL_USB_USART_Init>
}
   d75f4:	4620      	mov	r0, r4
   d75f6:	bd10      	pop	{r4, pc}
   d75f8:	000db530 	.word	0x000db530

000d75fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d75fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d75fe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7600:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7602:	2100      	movs	r1, #0
   d7604:	f001 faaf 	bl	d8b66 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7608:	4620      	mov	r0, r4
   d760a:	bd10      	pop	{r4, pc}

000d760c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d760c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d760e:	4d0e      	ldr	r5, [pc, #56]	; (d7648 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7610:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7612:	a801      	add	r0, sp, #4
   d7614:	f7ff fff2 	bl	d75fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7618:	6829      	ldr	r1, [r5, #0]
   d761a:	f011 0401 	ands.w	r4, r1, #1
   d761e:	d110      	bne.n	d7642 <_Z16_fetch_usbserialv+0x36>
   d7620:	4628      	mov	r0, r5
   d7622:	f7fc fd40 	bl	d40a6 <__cxa_guard_acquire>
   d7626:	b160      	cbz	r0, d7642 <_Z16_fetch_usbserialv+0x36>
   d7628:	aa01      	add	r2, sp, #4
   d762a:	4621      	mov	r1, r4
   d762c:	4807      	ldr	r0, [pc, #28]	; (d764c <_Z16_fetch_usbserialv+0x40>)
   d762e:	f7ff ffd1 	bl	d75d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7632:	4628      	mov	r0, r5
   d7634:	f7fc fd3c 	bl	d40b0 <__cxa_guard_release>
   d7638:	4a05      	ldr	r2, [pc, #20]	; (d7650 <_Z16_fetch_usbserialv+0x44>)
   d763a:	4906      	ldr	r1, [pc, #24]	; (d7654 <_Z16_fetch_usbserialv+0x48>)
   d763c:	4803      	ldr	r0, [pc, #12]	; (d764c <_Z16_fetch_usbserialv+0x40>)
   d763e:	f000 f95b 	bl	d78f8 <__aeabi_atexit>
	return _usbserial;
}
   d7642:	4802      	ldr	r0, [pc, #8]	; (d764c <_Z16_fetch_usbserialv+0x40>)
   d7644:	b007      	add	sp, #28
   d7646:	bd30      	pop	{r4, r5, pc}
   d7648:	2003e6e4 	.word	0x2003e6e4
   d764c:	2003e6e8 	.word	0x2003e6e8
   d7650:	2003e1b0 	.word	0x2003e1b0
   d7654:	000d7555 	.word	0x000d7555

000d7658 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7658:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d765a:	4b0c      	ldr	r3, [pc, #48]	; (d768c <serialEventRun+0x34>)
   d765c:	b133      	cbz	r3, d766c <serialEventRun+0x14>
   d765e:	f7ff ffd5 	bl	d760c <_Z16_fetch_usbserialv>
   d7662:	6803      	ldr	r3, [r0, #0]
   d7664:	691b      	ldr	r3, [r3, #16]
   d7666:	4798      	blx	r3
   d7668:	2800      	cmp	r0, #0
   d766a:	dc09      	bgt.n	d7680 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d766c:	4b08      	ldr	r3, [pc, #32]	; (d7690 <serialEventRun+0x38>)
   d766e:	b163      	cbz	r3, d768a <serialEventRun+0x32>
   d7670:	f7ff ff48 	bl	d7504 <_Z22__fetch_global_Serial1v>
   d7674:	6803      	ldr	r3, [r0, #0]
   d7676:	691b      	ldr	r3, [r3, #16]
   d7678:	4798      	blx	r3
   d767a:	2800      	cmp	r0, #0
   d767c:	dc03      	bgt.n	d7686 <serialEventRun+0x2e>
   d767e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7680:	f3af 8000 	nop.w
   d7684:	e7f2      	b.n	d766c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7686:	f3af 8000 	nop.w
   d768a:	bd08      	pop	{r3, pc}
	...

000d7694 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7694:	b508      	push	{r3, lr}
	serialEventRun();
   d7696:	f7ff ffdf 	bl	d7658 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d769a:	f7fe fb61 	bl	d5d60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d769e:	4b01      	ldr	r3, [pc, #4]	; (d76a4 <_post_loop+0x10>)
   d76a0:	6018      	str	r0, [r3, #0]
   d76a2:	bd08      	pop	{r3, pc}
   d76a4:	2003e704 	.word	0x2003e704

000d76a8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d76a8:	4802      	ldr	r0, [pc, #8]	; (d76b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d76aa:	4a03      	ldr	r2, [pc, #12]	; (d76b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d76ac:	4903      	ldr	r1, [pc, #12]	; (d76bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d76ae:	1a12      	subs	r2, r2, r0
   d76b0:	f001 ba4e 	b.w	d8b50 <memcpy>
   d76b4:	2003f400 	.word	0x2003f400
   d76b8:	2003f404 	.word	0x2003f404
   d76bc:	000db908 	.word	0x000db908

000d76c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d76c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d76c2:	2300      	movs	r3, #0
   d76c4:	9300      	str	r3, [sp, #0]
   d76c6:	461a      	mov	r2, r3
   d76c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d76cc:	f7fe fd22 	bl	d6114 <system_ctrl_set_result>
}
   d76d0:	b003      	add	sp, #12
   d76d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d76d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d76d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d76da:	8843      	ldrh	r3, [r0, #2]
   d76dc:	2b0a      	cmp	r3, #10
   d76de:	d008      	beq.n	d76f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d76e0:	2b50      	cmp	r3, #80	; 0x50
   d76e2:	d109      	bne.n	d76f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d76e4:	4b09      	ldr	r3, [pc, #36]	; (d770c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d76e6:	681b      	ldr	r3, [r3, #0]
   d76e8:	b13b      	cbz	r3, d76fa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d76ea:	b003      	add	sp, #12
   d76ec:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d76f0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d76f2:	f7ff ffe5 	bl	d76c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d76f6:	e006      	b.n	d7706 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d76f8:	2300      	movs	r3, #0
   d76fa:	9300      	str	r3, [sp, #0]
   d76fc:	461a      	mov	r2, r3
   d76fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7702:	f7fe fd07 	bl	d6114 <system_ctrl_set_result>
        break;
    }
}
   d7706:	b003      	add	sp, #12
   d7708:	f85d fb04 	ldr.w	pc, [sp], #4
   d770c:	2003e6fc 	.word	0x2003e6fc

000d7710 <module_user_init_hook>:

void module_user_init_hook()
{
   d7710:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7712:	4c10      	ldr	r4, [pc, #64]	; (d7754 <module_user_init_hook+0x44>)
   d7714:	4d10      	ldr	r5, [pc, #64]	; (d7758 <module_user_init_hook+0x48>)
   d7716:	6823      	ldr	r3, [r4, #0]
   d7718:	42ab      	cmp	r3, r5
   d771a:	4b10      	ldr	r3, [pc, #64]	; (d775c <module_user_init_hook+0x4c>)
   d771c:	bf0c      	ite	eq
   d771e:	2201      	moveq	r2, #1
   d7720:	2200      	movne	r2, #0
   d7722:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7724:	d002      	beq.n	d772c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7726:	f7ff ffbf 	bl	d76a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d772a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d772c:	f7fe fb10 	bl	d5d50 <HAL_RNG_GetRandomNumber>
   d7730:	4604      	mov	r4, r0
    srand(seed);
   d7732:	f001 fa21 	bl	d8b78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7736:	4b0a      	ldr	r3, [pc, #40]	; (d7760 <module_user_init_hook+0x50>)
   d7738:	b113      	cbz	r3, d7740 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d773a:	4620      	mov	r0, r4
   d773c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7740:	2100      	movs	r1, #0
   d7742:	4807      	ldr	r0, [pc, #28]	; (d7760 <module_user_init_hook+0x50>)
   d7744:	f7fe fd40 	bl	d61c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7748:	2100      	movs	r1, #0
   d774a:	4806      	ldr	r0, [pc, #24]	; (d7764 <module_user_init_hook+0x54>)
}
   d774c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7750:	f7fe bcd6 	b.w	d6100 <system_ctrl_set_app_request_handler>
   d7754:	2003f400 	.word	0x2003f400
   d7758:	9a271c1e 	.word	0x9a271c1e
   d775c:	2003e700 	.word	0x2003e700
   d7760:	00000000 	.word	0x00000000
   d7764:	000d76d9 	.word	0x000d76d9

000d7768 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7768:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d776a:	4e18      	ldr	r6, [pc, #96]	; (d77cc <pinAvailable+0x64>)
   d776c:	6831      	ldr	r1, [r6, #0]
   d776e:	f011 0501 	ands.w	r5, r1, #1
   d7772:	4604      	mov	r4, r0
   d7774:	d10a      	bne.n	d778c <pinAvailable+0x24>
   d7776:	4630      	mov	r0, r6
   d7778:	f7fc fc95 	bl	d40a6 <__cxa_guard_acquire>
   d777c:	b130      	cbz	r0, d778c <pinAvailable+0x24>
   d777e:	4629      	mov	r1, r5
   d7780:	4813      	ldr	r0, [pc, #76]	; (d77d0 <pinAvailable+0x68>)
   d7782:	f7ff fc59 	bl	d7038 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7786:	4630      	mov	r0, r6
   d7788:	f7fc fc92 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d778c:	4810      	ldr	r0, [pc, #64]	; (d77d0 <pinAvailable+0x68>)
   d778e:	f7ff fd05 	bl	d719c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7792:	b128      	cbz	r0, d77a0 <pinAvailable+0x38>
   d7794:	f1a4 030b 	sub.w	r3, r4, #11
   d7798:	2b02      	cmp	r3, #2
   d779a:	d801      	bhi.n	d77a0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d779c:	2000      	movs	r0, #0
   d779e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d77a0:	f000 f884 	bl	d78ac <_Z19__fetch_global_Wirev>
   d77a4:	f7ff f9ee 	bl	d6b84 <_ZN7TwoWire9isEnabledEv>
   d77a8:	b108      	cbz	r0, d77ae <pinAvailable+0x46>
   d77aa:	2c01      	cmp	r4, #1
   d77ac:	d9f6      	bls.n	d779c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d77ae:	f7ff fea9 	bl	d7504 <_Z22__fetch_global_Serial1v>
   d77b2:	f7ff fea3 	bl	d74fc <_ZN11USARTSerial9isEnabledEv>
   d77b6:	b118      	cbz	r0, d77c0 <pinAvailable+0x58>
   d77b8:	f1a4 0309 	sub.w	r3, r4, #9
   d77bc:	2b01      	cmp	r3, #1
   d77be:	d9ed      	bls.n	d779c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d77c0:	2c23      	cmp	r4, #35	; 0x23
   d77c2:	bf8c      	ite	hi
   d77c4:	2000      	movhi	r0, #0
   d77c6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d77c8:	bd70      	pop	{r4, r5, r6, pc}
   d77ca:	bf00      	nop
   d77cc:	2003e348 	.word	0x2003e348
   d77d0:	2003e34c 	.word	0x2003e34c

000d77d4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d77d4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d77d6:	b538      	push	{r3, r4, r5, lr}
   d77d8:	4604      	mov	r4, r0
   d77da:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d77dc:	d80a      	bhi.n	d77f4 <pinMode+0x20>
   d77de:	29ff      	cmp	r1, #255	; 0xff
   d77e0:	d008      	beq.n	d77f4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d77e2:	f7ff ffc1 	bl	d7768 <pinAvailable>
   d77e6:	b128      	cbz	r0, d77f4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d77e8:	4629      	mov	r1, r5
   d77ea:	4620      	mov	r0, r4
}
   d77ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d77f0:	f7fe bafe 	b.w	d5df0 <HAL_Pin_Mode>
   d77f4:	bd38      	pop	{r3, r4, r5, pc}

000d77f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d77f6:	b538      	push	{r3, r4, r5, lr}
   d77f8:	4604      	mov	r4, r0
   d77fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d77fc:	f7fe fb00 	bl	d5e00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7800:	28ff      	cmp	r0, #255	; 0xff
   d7802:	d010      	beq.n	d7826 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7804:	2806      	cmp	r0, #6
   d7806:	d804      	bhi.n	d7812 <digitalWrite+0x1c>
   d7808:	234d      	movs	r3, #77	; 0x4d
   d780a:	fa23 f000 	lsr.w	r0, r3, r0
   d780e:	07c3      	lsls	r3, r0, #31
   d7810:	d409      	bmi.n	d7826 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7812:	4620      	mov	r0, r4
   d7814:	f7ff ffa8 	bl	d7768 <pinAvailable>
   d7818:	b128      	cbz	r0, d7826 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d781a:	4629      	mov	r1, r5
   d781c:	4620      	mov	r0, r4
}
   d781e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7822:	f7fe baf5 	b.w	d5e10 <HAL_GPIO_Write>
   d7826:	bd38      	pop	{r3, r4, r5, pc}

000d7828 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7828:	b510      	push	{r4, lr}
   d782a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d782c:	f7fe fae8 	bl	d5e00 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7830:	3804      	subs	r0, #4
   d7832:	b2c0      	uxtb	r0, r0
   d7834:	2801      	cmp	r0, #1
   d7836:	d908      	bls.n	d784a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7838:	4620      	mov	r0, r4
   d783a:	f7ff ff95 	bl	d7768 <pinAvailable>
   d783e:	b120      	cbz	r0, d784a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7840:	4620      	mov	r0, r4
}
   d7842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7846:	f7fe baeb 	b.w	d5e20 <HAL_GPIO_Read>
}
   d784a:	2000      	movs	r0, #0
   d784c:	bd10      	pop	{r4, pc}
	...

000d7850 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7850:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7852:	4c07      	ldr	r4, [pc, #28]	; (d7870 <_Z21__fetch_global_EEPROMv+0x20>)
   d7854:	6823      	ldr	r3, [r4, #0]
   d7856:	07db      	lsls	r3, r3, #31
   d7858:	d408      	bmi.n	d786c <_Z21__fetch_global_EEPROMv+0x1c>
   d785a:	4620      	mov	r0, r4
   d785c:	f7fc fc23 	bl	d40a6 <__cxa_guard_acquire>
   d7860:	b120      	cbz	r0, d786c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7862:	f7fe fa8d 	bl	d5d80 <HAL_EEPROM_Init>
   d7866:	4620      	mov	r0, r4
   d7868:	f7fc fc22 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d786c:	4801      	ldr	r0, [pc, #4]	; (d7874 <_Z21__fetch_global_EEPROMv+0x24>)
   d786e:	bd10      	pop	{r4, pc}
   d7870:	2003e708 	.word	0x2003e708
   d7874:	2003e70c 	.word	0x2003e70c

000d7878 <_Z17acquireWireBufferv>:
   d7878:	b570      	push	{r4, r5, r6, lr}
   d787a:	4604      	mov	r4, r0
   d787c:	2514      	movs	r5, #20
   d787e:	462a      	mov	r2, r5
   d7880:	4e09      	ldr	r6, [pc, #36]	; (d78a8 <_Z17acquireWireBufferv+0x30>)
   d7882:	2100      	movs	r1, #0
   d7884:	f001 f96f 	bl	d8b66 <memset>
   d7888:	8025      	strh	r5, [r4, #0]
   d788a:	2520      	movs	r5, #32
   d788c:	4631      	mov	r1, r6
   d788e:	60a5      	str	r5, [r4, #8]
   d7890:	6125      	str	r5, [r4, #16]
   d7892:	4628      	mov	r0, r5
   d7894:	f000 f84f 	bl	d7936 <_ZnajRKSt9nothrow_t>
   d7898:	4631      	mov	r1, r6
   d789a:	6060      	str	r0, [r4, #4]
   d789c:	4628      	mov	r0, r5
   d789e:	f000 f84a 	bl	d7936 <_ZnajRKSt9nothrow_t>
   d78a2:	60e0      	str	r0, [r4, #12]
   d78a4:	4620      	mov	r0, r4
   d78a6:	bd70      	pop	{r4, r5, r6, pc}
   d78a8:	000db558 	.word	0x000db558

000d78ac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d78ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d78ae:	4d0e      	ldr	r5, [pc, #56]	; (d78e8 <_Z19__fetch_global_Wirev+0x3c>)
   d78b0:	6829      	ldr	r1, [r5, #0]
   d78b2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d78b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d78b8:	d113      	bne.n	d78e2 <_Z19__fetch_global_Wirev+0x36>
   d78ba:	4628      	mov	r0, r5
   d78bc:	f7fc fbf3 	bl	d40a6 <__cxa_guard_acquire>
   d78c0:	b178      	cbz	r0, d78e2 <_Z19__fetch_global_Wirev+0x36>
   d78c2:	a801      	add	r0, sp, #4
   d78c4:	f7ff ffd8 	bl	d7878 <_Z17acquireWireBufferv>
   d78c8:	aa01      	add	r2, sp, #4
   d78ca:	4621      	mov	r1, r4
   d78cc:	4807      	ldr	r0, [pc, #28]	; (d78ec <_Z19__fetch_global_Wirev+0x40>)
   d78ce:	f7ff f905 	bl	d6adc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d78d2:	4628      	mov	r0, r5
   d78d4:	f7fc fbec 	bl	d40b0 <__cxa_guard_release>
   d78d8:	4a05      	ldr	r2, [pc, #20]	; (d78f0 <_Z19__fetch_global_Wirev+0x44>)
   d78da:	4906      	ldr	r1, [pc, #24]	; (d78f4 <_Z19__fetch_global_Wirev+0x48>)
   d78dc:	4803      	ldr	r0, [pc, #12]	; (d78ec <_Z19__fetch_global_Wirev+0x40>)
   d78de:	f000 f80b 	bl	d78f8 <__aeabi_atexit>
	return wire;
}
   d78e2:	4802      	ldr	r0, [pc, #8]	; (d78ec <_Z19__fetch_global_Wirev+0x40>)
   d78e4:	b007      	add	sp, #28
   d78e6:	bd30      	pop	{r4, r5, pc}
   d78e8:	2003e710 	.word	0x2003e710
   d78ec:	2003e714 	.word	0x2003e714
   d78f0:	2003e1b0 	.word	0x2003e1b0
   d78f4:	000d6a85 	.word	0x000d6a85

000d78f8 <__aeabi_atexit>:
   d78f8:	460b      	mov	r3, r1
   d78fa:	4601      	mov	r1, r0
   d78fc:	4618      	mov	r0, r3
   d78fe:	f001 b81d 	b.w	d893c <__cxa_atexit>

000d7902 <_ZdlPvj>:
   d7902:	f7fc bbcc 	b.w	d409e <_ZdlPv>
	...

000d7908 <_ZSt15get_new_handlerv>:
   d7908:	4b02      	ldr	r3, [pc, #8]	; (d7914 <_ZSt15get_new_handlerv+0xc>)
   d790a:	6818      	ldr	r0, [r3, #0]
   d790c:	f3bf 8f5f 	dmb	sy
   d7910:	4770      	bx	lr
   d7912:	bf00      	nop
   d7914:	2003e728 	.word	0x2003e728

000d7918 <_ZnwjRKSt9nothrow_t>:
   d7918:	b510      	push	{r4, lr}
   d791a:	2800      	cmp	r0, #0
   d791c:	bf14      	ite	ne
   d791e:	4604      	movne	r4, r0
   d7920:	2401      	moveq	r4, #1
   d7922:	4620      	mov	r0, r4
   d7924:	f7fe fca8 	bl	d6278 <malloc>
   d7928:	b920      	cbnz	r0, d7934 <_ZnwjRKSt9nothrow_t+0x1c>
   d792a:	f7ff ffed 	bl	d7908 <_ZSt15get_new_handlerv>
   d792e:	b108      	cbz	r0, d7934 <_ZnwjRKSt9nothrow_t+0x1c>
   d7930:	4780      	blx	r0
   d7932:	e7f6      	b.n	d7922 <_ZnwjRKSt9nothrow_t+0xa>
   d7934:	bd10      	pop	{r4, pc}

000d7936 <_ZnajRKSt9nothrow_t>:
   d7936:	f7ff bfef 	b.w	d7918 <_ZnwjRKSt9nothrow_t>

000d793a <_ZSt25__throw_bad_function_callv>:
   d793a:	b508      	push	{r3, lr}
   d793c:	f7fe fcc4 	bl	d62c8 <abort>

000d7940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7940:	4b24      	ldr	r3, [pc, #144]	; (d79d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7942:	681a      	ldr	r2, [r3, #0]
   d7944:	07d0      	lsls	r0, r2, #31
   d7946:	bf5c      	itt	pl
   d7948:	2201      	movpl	r2, #1
   d794a:	601a      	strpl	r2, [r3, #0]
   d794c:	4b22      	ldr	r3, [pc, #136]	; (d79d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d794e:	681a      	ldr	r2, [r3, #0]
   d7950:	07d1      	lsls	r1, r2, #31
   d7952:	bf5c      	itt	pl
   d7954:	2201      	movpl	r2, #1
   d7956:	601a      	strpl	r2, [r3, #0]
   d7958:	4b20      	ldr	r3, [pc, #128]	; (d79dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d795a:	681a      	ldr	r2, [r3, #0]
   d795c:	07d2      	lsls	r2, r2, #31
   d795e:	bf5c      	itt	pl
   d7960:	2201      	movpl	r2, #1
   d7962:	601a      	strpl	r2, [r3, #0]
   d7964:	4b1e      	ldr	r3, [pc, #120]	; (d79e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7966:	681a      	ldr	r2, [r3, #0]
   d7968:	07d0      	lsls	r0, r2, #31
   d796a:	bf5c      	itt	pl
   d796c:	2201      	movpl	r2, #1
   d796e:	601a      	strpl	r2, [r3, #0]
   d7970:	4b1c      	ldr	r3, [pc, #112]	; (d79e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7972:	681a      	ldr	r2, [r3, #0]
   d7974:	07d1      	lsls	r1, r2, #31
   d7976:	bf5c      	itt	pl
   d7978:	2201      	movpl	r2, #1
   d797a:	601a      	strpl	r2, [r3, #0]
   d797c:	4b1a      	ldr	r3, [pc, #104]	; (d79e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d797e:	681a      	ldr	r2, [r3, #0]
   d7980:	07d2      	lsls	r2, r2, #31
   d7982:	bf5c      	itt	pl
   d7984:	2201      	movpl	r2, #1
   d7986:	601a      	strpl	r2, [r3, #0]
   d7988:	4b18      	ldr	r3, [pc, #96]	; (d79ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d798a:	681a      	ldr	r2, [r3, #0]
   d798c:	07d0      	lsls	r0, r2, #31
   d798e:	bf5c      	itt	pl
   d7990:	2201      	movpl	r2, #1
   d7992:	601a      	strpl	r2, [r3, #0]
   d7994:	4b16      	ldr	r3, [pc, #88]	; (d79f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7996:	681a      	ldr	r2, [r3, #0]
   d7998:	07d1      	lsls	r1, r2, #31
   d799a:	bf5c      	itt	pl
   d799c:	2201      	movpl	r2, #1
   d799e:	601a      	strpl	r2, [r3, #0]
   d79a0:	4b14      	ldr	r3, [pc, #80]	; (d79f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d79a2:	681a      	ldr	r2, [r3, #0]
   d79a4:	07d2      	lsls	r2, r2, #31
   d79a6:	bf5c      	itt	pl
   d79a8:	2201      	movpl	r2, #1
   d79aa:	601a      	strpl	r2, [r3, #0]
   d79ac:	4b12      	ldr	r3, [pc, #72]	; (d79f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d79ae:	681a      	ldr	r2, [r3, #0]
   d79b0:	07d0      	lsls	r0, r2, #31
   d79b2:	bf5c      	itt	pl
   d79b4:	2201      	movpl	r2, #1
   d79b6:	601a      	strpl	r2, [r3, #0]
   d79b8:	4b10      	ldr	r3, [pc, #64]	; (d79fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d79ba:	681a      	ldr	r2, [r3, #0]
   d79bc:	07d1      	lsls	r1, r2, #31
   d79be:	bf5c      	itt	pl
   d79c0:	2201      	movpl	r2, #1
   d79c2:	601a      	strpl	r2, [r3, #0]
   d79c4:	4b0e      	ldr	r3, [pc, #56]	; (d7a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d79c6:	681a      	ldr	r2, [r3, #0]
   d79c8:	07d2      	lsls	r2, r2, #31
   d79ca:	bf5c      	itt	pl
   d79cc:	2201      	movpl	r2, #1
   d79ce:	601a      	strpl	r2, [r3, #0]
   d79d0:	4770      	bx	lr
   d79d2:	bf00      	nop
   d79d4:	2003e758 	.word	0x2003e758
   d79d8:	2003e754 	.word	0x2003e754
   d79dc:	2003e750 	.word	0x2003e750
   d79e0:	2003e74c 	.word	0x2003e74c
   d79e4:	2003e748 	.word	0x2003e748
   d79e8:	2003e744 	.word	0x2003e744
   d79ec:	2003e740 	.word	0x2003e740
   d79f0:	2003e73c 	.word	0x2003e73c
   d79f4:	2003e738 	.word	0x2003e738
   d79f8:	2003e734 	.word	0x2003e734
   d79fc:	2003e730 	.word	0x2003e730
   d7a00:	2003e72c 	.word	0x2003e72c

000d7a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a04:	4b18      	ldr	r3, [pc, #96]	; (d7a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a06:	681a      	ldr	r2, [r3, #0]
   d7a08:	07d1      	lsls	r1, r2, #31
   d7a0a:	bf5c      	itt	pl
   d7a0c:	2201      	movpl	r2, #1
   d7a0e:	601a      	strpl	r2, [r3, #0]
   d7a10:	4b16      	ldr	r3, [pc, #88]	; (d7a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	07d2      	lsls	r2, r2, #31
   d7a16:	bf5c      	itt	pl
   d7a18:	2201      	movpl	r2, #1
   d7a1a:	601a      	strpl	r2, [r3, #0]
   d7a1c:	4b14      	ldr	r3, [pc, #80]	; (d7a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a1e:	681a      	ldr	r2, [r3, #0]
   d7a20:	07d0      	lsls	r0, r2, #31
   d7a22:	bf5c      	itt	pl
   d7a24:	2201      	movpl	r2, #1
   d7a26:	601a      	strpl	r2, [r3, #0]
   d7a28:	4b12      	ldr	r3, [pc, #72]	; (d7a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a2a:	681a      	ldr	r2, [r3, #0]
   d7a2c:	07d1      	lsls	r1, r2, #31
   d7a2e:	bf5c      	itt	pl
   d7a30:	2201      	movpl	r2, #1
   d7a32:	601a      	strpl	r2, [r3, #0]
   d7a34:	4b10      	ldr	r3, [pc, #64]	; (d7a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a36:	681a      	ldr	r2, [r3, #0]
   d7a38:	07d2      	lsls	r2, r2, #31
   d7a3a:	bf5c      	itt	pl
   d7a3c:	2201      	movpl	r2, #1
   d7a3e:	601a      	strpl	r2, [r3, #0]
   d7a40:	4b0e      	ldr	r3, [pc, #56]	; (d7a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a42:	681a      	ldr	r2, [r3, #0]
   d7a44:	07d0      	lsls	r0, r2, #31
   d7a46:	bf5c      	itt	pl
   d7a48:	2201      	movpl	r2, #1
   d7a4a:	601a      	strpl	r2, [r3, #0]
   d7a4c:	4b0c      	ldr	r3, [pc, #48]	; (d7a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a4e:	681a      	ldr	r2, [r3, #0]
   d7a50:	07d1      	lsls	r1, r2, #31
   d7a52:	bf5c      	itt	pl
   d7a54:	2201      	movpl	r2, #1
   d7a56:	601a      	strpl	r2, [r3, #0]
   d7a58:	4b0a      	ldr	r3, [pc, #40]	; (d7a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a5a:	681a      	ldr	r2, [r3, #0]
   d7a5c:	07d2      	lsls	r2, r2, #31
   d7a5e:	bf5c      	itt	pl
   d7a60:	2201      	movpl	r2, #1
   d7a62:	601a      	strpl	r2, [r3, #0]
   d7a64:	4770      	bx	lr
   d7a66:	bf00      	nop
   d7a68:	2003e778 	.word	0x2003e778
   d7a6c:	2003e774 	.word	0x2003e774
   d7a70:	2003e770 	.word	0x2003e770
   d7a74:	2003e76c 	.word	0x2003e76c
   d7a78:	2003e768 	.word	0x2003e768
   d7a7c:	2003e764 	.word	0x2003e764
   d7a80:	2003e760 	.word	0x2003e760
   d7a84:	2003e75c 	.word	0x2003e75c

000d7a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a88:	4b18      	ldr	r3, [pc, #96]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a8a:	681a      	ldr	r2, [r3, #0]
   d7a8c:	07d1      	lsls	r1, r2, #31
   d7a8e:	bf5c      	itt	pl
   d7a90:	2201      	movpl	r2, #1
   d7a92:	601a      	strpl	r2, [r3, #0]
   d7a94:	4b16      	ldr	r3, [pc, #88]	; (d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a96:	681a      	ldr	r2, [r3, #0]
   d7a98:	07d2      	lsls	r2, r2, #31
   d7a9a:	bf5c      	itt	pl
   d7a9c:	2201      	movpl	r2, #1
   d7a9e:	601a      	strpl	r2, [r3, #0]
   d7aa0:	4b14      	ldr	r3, [pc, #80]	; (d7af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7aa2:	681a      	ldr	r2, [r3, #0]
   d7aa4:	07d0      	lsls	r0, r2, #31
   d7aa6:	bf5c      	itt	pl
   d7aa8:	2201      	movpl	r2, #1
   d7aaa:	601a      	strpl	r2, [r3, #0]
   d7aac:	4b12      	ldr	r3, [pc, #72]	; (d7af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7aae:	681a      	ldr	r2, [r3, #0]
   d7ab0:	07d1      	lsls	r1, r2, #31
   d7ab2:	bf5c      	itt	pl
   d7ab4:	2201      	movpl	r2, #1
   d7ab6:	601a      	strpl	r2, [r3, #0]
   d7ab8:	4b10      	ldr	r3, [pc, #64]	; (d7afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7aba:	681a      	ldr	r2, [r3, #0]
   d7abc:	07d2      	lsls	r2, r2, #31
   d7abe:	bf5c      	itt	pl
   d7ac0:	2201      	movpl	r2, #1
   d7ac2:	601a      	strpl	r2, [r3, #0]
   d7ac4:	4b0e      	ldr	r3, [pc, #56]	; (d7b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ac6:	681a      	ldr	r2, [r3, #0]
   d7ac8:	07d0      	lsls	r0, r2, #31
   d7aca:	bf5c      	itt	pl
   d7acc:	2201      	movpl	r2, #1
   d7ace:	601a      	strpl	r2, [r3, #0]
   d7ad0:	4b0c      	ldr	r3, [pc, #48]	; (d7b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7ad2:	681a      	ldr	r2, [r3, #0]
   d7ad4:	07d1      	lsls	r1, r2, #31
   d7ad6:	bf5c      	itt	pl
   d7ad8:	2201      	movpl	r2, #1
   d7ada:	601a      	strpl	r2, [r3, #0]
   d7adc:	4b0a      	ldr	r3, [pc, #40]	; (d7b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7ade:	681a      	ldr	r2, [r3, #0]
   d7ae0:	07d2      	lsls	r2, r2, #31
   d7ae2:	bf5c      	itt	pl
   d7ae4:	2201      	movpl	r2, #1
   d7ae6:	601a      	strpl	r2, [r3, #0]
   d7ae8:	4770      	bx	lr
   d7aea:	bf00      	nop
   d7aec:	2003e798 	.word	0x2003e798
   d7af0:	2003e794 	.word	0x2003e794
   d7af4:	2003e790 	.word	0x2003e790
   d7af8:	2003e78c 	.word	0x2003e78c
   d7afc:	2003e788 	.word	0x2003e788
   d7b00:	2003e784 	.word	0x2003e784
   d7b04:	2003e780 	.word	0x2003e780
   d7b08:	2003e77c 	.word	0x2003e77c

000d7b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7b0c:	4b24      	ldr	r3, [pc, #144]	; (d7ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7b0e:	681a      	ldr	r2, [r3, #0]
   d7b10:	07d0      	lsls	r0, r2, #31
   d7b12:	bf5c      	itt	pl
   d7b14:	2201      	movpl	r2, #1
   d7b16:	601a      	strpl	r2, [r3, #0]
   d7b18:	4b22      	ldr	r3, [pc, #136]	; (d7ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7b1a:	681a      	ldr	r2, [r3, #0]
   d7b1c:	07d1      	lsls	r1, r2, #31
   d7b1e:	bf5c      	itt	pl
   d7b20:	2201      	movpl	r2, #1
   d7b22:	601a      	strpl	r2, [r3, #0]
   d7b24:	4b20      	ldr	r3, [pc, #128]	; (d7ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7b26:	681a      	ldr	r2, [r3, #0]
   d7b28:	07d2      	lsls	r2, r2, #31
   d7b2a:	bf5c      	itt	pl
   d7b2c:	2201      	movpl	r2, #1
   d7b2e:	601a      	strpl	r2, [r3, #0]
   d7b30:	4b1e      	ldr	r3, [pc, #120]	; (d7bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7b32:	681a      	ldr	r2, [r3, #0]
   d7b34:	07d0      	lsls	r0, r2, #31
   d7b36:	bf5c      	itt	pl
   d7b38:	2201      	movpl	r2, #1
   d7b3a:	601a      	strpl	r2, [r3, #0]
   d7b3c:	4b1c      	ldr	r3, [pc, #112]	; (d7bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7b3e:	681a      	ldr	r2, [r3, #0]
   d7b40:	07d1      	lsls	r1, r2, #31
   d7b42:	bf5c      	itt	pl
   d7b44:	2201      	movpl	r2, #1
   d7b46:	601a      	strpl	r2, [r3, #0]
   d7b48:	4b1a      	ldr	r3, [pc, #104]	; (d7bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7b4a:	681a      	ldr	r2, [r3, #0]
   d7b4c:	07d2      	lsls	r2, r2, #31
   d7b4e:	bf5c      	itt	pl
   d7b50:	2201      	movpl	r2, #1
   d7b52:	601a      	strpl	r2, [r3, #0]
   d7b54:	4b18      	ldr	r3, [pc, #96]	; (d7bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7b56:	681a      	ldr	r2, [r3, #0]
   d7b58:	07d0      	lsls	r0, r2, #31
   d7b5a:	bf5c      	itt	pl
   d7b5c:	2201      	movpl	r2, #1
   d7b5e:	601a      	strpl	r2, [r3, #0]
   d7b60:	4b16      	ldr	r3, [pc, #88]	; (d7bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7b62:	681a      	ldr	r2, [r3, #0]
   d7b64:	07d1      	lsls	r1, r2, #31
   d7b66:	bf5c      	itt	pl
   d7b68:	2201      	movpl	r2, #1
   d7b6a:	601a      	strpl	r2, [r3, #0]
   d7b6c:	4b14      	ldr	r3, [pc, #80]	; (d7bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7b6e:	681a      	ldr	r2, [r3, #0]
   d7b70:	07d2      	lsls	r2, r2, #31
   d7b72:	bf5c      	itt	pl
   d7b74:	2201      	movpl	r2, #1
   d7b76:	601a      	strpl	r2, [r3, #0]
   d7b78:	4b12      	ldr	r3, [pc, #72]	; (d7bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7b7a:	681a      	ldr	r2, [r3, #0]
   d7b7c:	07d0      	lsls	r0, r2, #31
   d7b7e:	bf5c      	itt	pl
   d7b80:	2201      	movpl	r2, #1
   d7b82:	601a      	strpl	r2, [r3, #0]
   d7b84:	4b10      	ldr	r3, [pc, #64]	; (d7bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7b86:	681a      	ldr	r2, [r3, #0]
   d7b88:	07d1      	lsls	r1, r2, #31
   d7b8a:	bf5c      	itt	pl
   d7b8c:	2201      	movpl	r2, #1
   d7b8e:	601a      	strpl	r2, [r3, #0]
   d7b90:	4b0e      	ldr	r3, [pc, #56]	; (d7bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7b92:	681a      	ldr	r2, [r3, #0]
   d7b94:	07d2      	lsls	r2, r2, #31
   d7b96:	bf5c      	itt	pl
   d7b98:	2201      	movpl	r2, #1
   d7b9a:	601a      	strpl	r2, [r3, #0]
   d7b9c:	4770      	bx	lr
   d7b9e:	bf00      	nop
   d7ba0:	2003e7c8 	.word	0x2003e7c8
   d7ba4:	2003e7c4 	.word	0x2003e7c4
   d7ba8:	2003e7c0 	.word	0x2003e7c0
   d7bac:	2003e7bc 	.word	0x2003e7bc
   d7bb0:	2003e7b8 	.word	0x2003e7b8
   d7bb4:	2003e7b4 	.word	0x2003e7b4
   d7bb8:	2003e7b0 	.word	0x2003e7b0
   d7bbc:	2003e7ac 	.word	0x2003e7ac
   d7bc0:	2003e7a8 	.word	0x2003e7a8
   d7bc4:	2003e7a4 	.word	0x2003e7a4
   d7bc8:	2003e7a0 	.word	0x2003e7a0
   d7bcc:	2003e79c 	.word	0x2003e79c

000d7bd0 <__aeabi_drsub>:
   d7bd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7bd4:	e002      	b.n	d7bdc <__adddf3>
   d7bd6:	bf00      	nop

000d7bd8 <__aeabi_dsub>:
   d7bd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7bdc <__adddf3>:
   d7bdc:	b530      	push	{r4, r5, lr}
   d7bde:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7be2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7be6:	ea94 0f05 	teq	r4, r5
   d7bea:	bf08      	it	eq
   d7bec:	ea90 0f02 	teqeq	r0, r2
   d7bf0:	bf1f      	itttt	ne
   d7bf2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7bf6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7bfa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7bfe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7c02:	f000 80e2 	beq.w	d7dca <__adddf3+0x1ee>
   d7c06:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7c0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7c0e:	bfb8      	it	lt
   d7c10:	426d      	neglt	r5, r5
   d7c12:	dd0c      	ble.n	d7c2e <__adddf3+0x52>
   d7c14:	442c      	add	r4, r5
   d7c16:	ea80 0202 	eor.w	r2, r0, r2
   d7c1a:	ea81 0303 	eor.w	r3, r1, r3
   d7c1e:	ea82 0000 	eor.w	r0, r2, r0
   d7c22:	ea83 0101 	eor.w	r1, r3, r1
   d7c26:	ea80 0202 	eor.w	r2, r0, r2
   d7c2a:	ea81 0303 	eor.w	r3, r1, r3
   d7c2e:	2d36      	cmp	r5, #54	; 0x36
   d7c30:	bf88      	it	hi
   d7c32:	bd30      	pophi	{r4, r5, pc}
   d7c34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7c38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7c3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7c40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7c44:	d002      	beq.n	d7c4c <__adddf3+0x70>
   d7c46:	4240      	negs	r0, r0
   d7c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7c4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7c50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7c54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7c58:	d002      	beq.n	d7c60 <__adddf3+0x84>
   d7c5a:	4252      	negs	r2, r2
   d7c5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7c60:	ea94 0f05 	teq	r4, r5
   d7c64:	f000 80a7 	beq.w	d7db6 <__adddf3+0x1da>
   d7c68:	f1a4 0401 	sub.w	r4, r4, #1
   d7c6c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7c70:	db0d      	blt.n	d7c8e <__adddf3+0xb2>
   d7c72:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7c76:	fa22 f205 	lsr.w	r2, r2, r5
   d7c7a:	1880      	adds	r0, r0, r2
   d7c7c:	f141 0100 	adc.w	r1, r1, #0
   d7c80:	fa03 f20e 	lsl.w	r2, r3, lr
   d7c84:	1880      	adds	r0, r0, r2
   d7c86:	fa43 f305 	asr.w	r3, r3, r5
   d7c8a:	4159      	adcs	r1, r3
   d7c8c:	e00e      	b.n	d7cac <__adddf3+0xd0>
   d7c8e:	f1a5 0520 	sub.w	r5, r5, #32
   d7c92:	f10e 0e20 	add.w	lr, lr, #32
   d7c96:	2a01      	cmp	r2, #1
   d7c98:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7c9c:	bf28      	it	cs
   d7c9e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7ca2:	fa43 f305 	asr.w	r3, r3, r5
   d7ca6:	18c0      	adds	r0, r0, r3
   d7ca8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7cb0:	d507      	bpl.n	d7cc2 <__adddf3+0xe6>
   d7cb2:	f04f 0e00 	mov.w	lr, #0
   d7cb6:	f1dc 0c00 	rsbs	ip, ip, #0
   d7cba:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7cbe:	eb6e 0101 	sbc.w	r1, lr, r1
   d7cc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7cc6:	d31b      	bcc.n	d7d00 <__adddf3+0x124>
   d7cc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7ccc:	d30c      	bcc.n	d7ce8 <__adddf3+0x10c>
   d7cce:	0849      	lsrs	r1, r1, #1
   d7cd0:	ea5f 0030 	movs.w	r0, r0, rrx
   d7cd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7cd8:	f104 0401 	add.w	r4, r4, #1
   d7cdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7ce0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7ce4:	f080 809a 	bcs.w	d7e1c <__adddf3+0x240>
   d7ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7cec:	bf08      	it	eq
   d7cee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7cf2:	f150 0000 	adcs.w	r0, r0, #0
   d7cf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7cfa:	ea41 0105 	orr.w	r1, r1, r5
   d7cfe:	bd30      	pop	{r4, r5, pc}
   d7d00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7d04:	4140      	adcs	r0, r0
   d7d06:	eb41 0101 	adc.w	r1, r1, r1
   d7d0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7d0e:	f1a4 0401 	sub.w	r4, r4, #1
   d7d12:	d1e9      	bne.n	d7ce8 <__adddf3+0x10c>
   d7d14:	f091 0f00 	teq	r1, #0
   d7d18:	bf04      	itt	eq
   d7d1a:	4601      	moveq	r1, r0
   d7d1c:	2000      	moveq	r0, #0
   d7d1e:	fab1 f381 	clz	r3, r1
   d7d22:	bf08      	it	eq
   d7d24:	3320      	addeq	r3, #32
   d7d26:	f1a3 030b 	sub.w	r3, r3, #11
   d7d2a:	f1b3 0220 	subs.w	r2, r3, #32
   d7d2e:	da0c      	bge.n	d7d4a <__adddf3+0x16e>
   d7d30:	320c      	adds	r2, #12
   d7d32:	dd08      	ble.n	d7d46 <__adddf3+0x16a>
   d7d34:	f102 0c14 	add.w	ip, r2, #20
   d7d38:	f1c2 020c 	rsb	r2, r2, #12
   d7d3c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7d40:	fa21 f102 	lsr.w	r1, r1, r2
   d7d44:	e00c      	b.n	d7d60 <__adddf3+0x184>
   d7d46:	f102 0214 	add.w	r2, r2, #20
   d7d4a:	bfd8      	it	le
   d7d4c:	f1c2 0c20 	rsble	ip, r2, #32
   d7d50:	fa01 f102 	lsl.w	r1, r1, r2
   d7d54:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7d58:	bfdc      	itt	le
   d7d5a:	ea41 010c 	orrle.w	r1, r1, ip
   d7d5e:	4090      	lslle	r0, r2
   d7d60:	1ae4      	subs	r4, r4, r3
   d7d62:	bfa2      	ittt	ge
   d7d64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7d68:	4329      	orrge	r1, r5
   d7d6a:	bd30      	popge	{r4, r5, pc}
   d7d6c:	ea6f 0404 	mvn.w	r4, r4
   d7d70:	3c1f      	subs	r4, #31
   d7d72:	da1c      	bge.n	d7dae <__adddf3+0x1d2>
   d7d74:	340c      	adds	r4, #12
   d7d76:	dc0e      	bgt.n	d7d96 <__adddf3+0x1ba>
   d7d78:	f104 0414 	add.w	r4, r4, #20
   d7d7c:	f1c4 0220 	rsb	r2, r4, #32
   d7d80:	fa20 f004 	lsr.w	r0, r0, r4
   d7d84:	fa01 f302 	lsl.w	r3, r1, r2
   d7d88:	ea40 0003 	orr.w	r0, r0, r3
   d7d8c:	fa21 f304 	lsr.w	r3, r1, r4
   d7d90:	ea45 0103 	orr.w	r1, r5, r3
   d7d94:	bd30      	pop	{r4, r5, pc}
   d7d96:	f1c4 040c 	rsb	r4, r4, #12
   d7d9a:	f1c4 0220 	rsb	r2, r4, #32
   d7d9e:	fa20 f002 	lsr.w	r0, r0, r2
   d7da2:	fa01 f304 	lsl.w	r3, r1, r4
   d7da6:	ea40 0003 	orr.w	r0, r0, r3
   d7daa:	4629      	mov	r1, r5
   d7dac:	bd30      	pop	{r4, r5, pc}
   d7dae:	fa21 f004 	lsr.w	r0, r1, r4
   d7db2:	4629      	mov	r1, r5
   d7db4:	bd30      	pop	{r4, r5, pc}
   d7db6:	f094 0f00 	teq	r4, #0
   d7dba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7dbe:	bf06      	itte	eq
   d7dc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7dc4:	3401      	addeq	r4, #1
   d7dc6:	3d01      	subne	r5, #1
   d7dc8:	e74e      	b.n	d7c68 <__adddf3+0x8c>
   d7dca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7dce:	bf18      	it	ne
   d7dd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7dd4:	d029      	beq.n	d7e2a <__adddf3+0x24e>
   d7dd6:	ea94 0f05 	teq	r4, r5
   d7dda:	bf08      	it	eq
   d7ddc:	ea90 0f02 	teqeq	r0, r2
   d7de0:	d005      	beq.n	d7dee <__adddf3+0x212>
   d7de2:	ea54 0c00 	orrs.w	ip, r4, r0
   d7de6:	bf04      	itt	eq
   d7de8:	4619      	moveq	r1, r3
   d7dea:	4610      	moveq	r0, r2
   d7dec:	bd30      	pop	{r4, r5, pc}
   d7dee:	ea91 0f03 	teq	r1, r3
   d7df2:	bf1e      	ittt	ne
   d7df4:	2100      	movne	r1, #0
   d7df6:	2000      	movne	r0, #0
   d7df8:	bd30      	popne	{r4, r5, pc}
   d7dfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7dfe:	d105      	bne.n	d7e0c <__adddf3+0x230>
   d7e00:	0040      	lsls	r0, r0, #1
   d7e02:	4149      	adcs	r1, r1
   d7e04:	bf28      	it	cs
   d7e06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7e0a:	bd30      	pop	{r4, r5, pc}
   d7e0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7e10:	bf3c      	itt	cc
   d7e12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7e16:	bd30      	popcc	{r4, r5, pc}
   d7e18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7e20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7e24:	f04f 0000 	mov.w	r0, #0
   d7e28:	bd30      	pop	{r4, r5, pc}
   d7e2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7e2e:	bf1a      	itte	ne
   d7e30:	4619      	movne	r1, r3
   d7e32:	4610      	movne	r0, r2
   d7e34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7e38:	bf1c      	itt	ne
   d7e3a:	460b      	movne	r3, r1
   d7e3c:	4602      	movne	r2, r0
   d7e3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7e42:	bf06      	itte	eq
   d7e44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7e48:	ea91 0f03 	teqeq	r1, r3
   d7e4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7e50:	bd30      	pop	{r4, r5, pc}
   d7e52:	bf00      	nop

000d7e54 <__aeabi_ui2d>:
   d7e54:	f090 0f00 	teq	r0, #0
   d7e58:	bf04      	itt	eq
   d7e5a:	2100      	moveq	r1, #0
   d7e5c:	4770      	bxeq	lr
   d7e5e:	b530      	push	{r4, r5, lr}
   d7e60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e68:	f04f 0500 	mov.w	r5, #0
   d7e6c:	f04f 0100 	mov.w	r1, #0
   d7e70:	e750      	b.n	d7d14 <__adddf3+0x138>
   d7e72:	bf00      	nop

000d7e74 <__aeabi_i2d>:
   d7e74:	f090 0f00 	teq	r0, #0
   d7e78:	bf04      	itt	eq
   d7e7a:	2100      	moveq	r1, #0
   d7e7c:	4770      	bxeq	lr
   d7e7e:	b530      	push	{r4, r5, lr}
   d7e80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7e8c:	bf48      	it	mi
   d7e8e:	4240      	negmi	r0, r0
   d7e90:	f04f 0100 	mov.w	r1, #0
   d7e94:	e73e      	b.n	d7d14 <__adddf3+0x138>
   d7e96:	bf00      	nop

000d7e98 <__aeabi_f2d>:
   d7e98:	0042      	lsls	r2, r0, #1
   d7e9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7e9e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7ea2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7ea6:	bf1f      	itttt	ne
   d7ea8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7eac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7eb0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7eb4:	4770      	bxne	lr
   d7eb6:	f092 0f00 	teq	r2, #0
   d7eba:	bf14      	ite	ne
   d7ebc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7ec0:	4770      	bxeq	lr
   d7ec2:	b530      	push	{r4, r5, lr}
   d7ec4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7ec8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7ed0:	e720      	b.n	d7d14 <__adddf3+0x138>
   d7ed2:	bf00      	nop

000d7ed4 <__aeabi_ul2d>:
   d7ed4:	ea50 0201 	orrs.w	r2, r0, r1
   d7ed8:	bf08      	it	eq
   d7eda:	4770      	bxeq	lr
   d7edc:	b530      	push	{r4, r5, lr}
   d7ede:	f04f 0500 	mov.w	r5, #0
   d7ee2:	e00a      	b.n	d7efa <__aeabi_l2d+0x16>

000d7ee4 <__aeabi_l2d>:
   d7ee4:	ea50 0201 	orrs.w	r2, r0, r1
   d7ee8:	bf08      	it	eq
   d7eea:	4770      	bxeq	lr
   d7eec:	b530      	push	{r4, r5, lr}
   d7eee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7ef2:	d502      	bpl.n	d7efa <__aeabi_l2d+0x16>
   d7ef4:	4240      	negs	r0, r0
   d7ef6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7efa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7efe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7f06:	f43f aedc 	beq.w	d7cc2 <__adddf3+0xe6>
   d7f0a:	f04f 0203 	mov.w	r2, #3
   d7f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7f12:	bf18      	it	ne
   d7f14:	3203      	addne	r2, #3
   d7f16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7f1a:	bf18      	it	ne
   d7f1c:	3203      	addne	r2, #3
   d7f1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7f22:	f1c2 0320 	rsb	r3, r2, #32
   d7f26:	fa00 fc03 	lsl.w	ip, r0, r3
   d7f2a:	fa20 f002 	lsr.w	r0, r0, r2
   d7f2e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7f32:	ea40 000e 	orr.w	r0, r0, lr
   d7f36:	fa21 f102 	lsr.w	r1, r1, r2
   d7f3a:	4414      	add	r4, r2
   d7f3c:	e6c1      	b.n	d7cc2 <__adddf3+0xe6>
   d7f3e:	bf00      	nop

000d7f40 <__aeabi_dmul>:
   d7f40:	b570      	push	{r4, r5, r6, lr}
   d7f42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7f46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7f4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f4e:	bf1d      	ittte	ne
   d7f50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f54:	ea94 0f0c 	teqne	r4, ip
   d7f58:	ea95 0f0c 	teqne	r5, ip
   d7f5c:	f000 f8de 	bleq	d811c <__aeabi_dmul+0x1dc>
   d7f60:	442c      	add	r4, r5
   d7f62:	ea81 0603 	eor.w	r6, r1, r3
   d7f66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7f6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7f6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7f72:	bf18      	it	ne
   d7f74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7f80:	d038      	beq.n	d7ff4 <__aeabi_dmul+0xb4>
   d7f82:	fba0 ce02 	umull	ip, lr, r0, r2
   d7f86:	f04f 0500 	mov.w	r5, #0
   d7f8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7f8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7f92:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7f96:	f04f 0600 	mov.w	r6, #0
   d7f9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7f9e:	f09c 0f00 	teq	ip, #0
   d7fa2:	bf18      	it	ne
   d7fa4:	f04e 0e01 	orrne.w	lr, lr, #1
   d7fa8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7fac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7fb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7fb4:	d204      	bcs.n	d7fc0 <__aeabi_dmul+0x80>
   d7fb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7fba:	416d      	adcs	r5, r5
   d7fbc:	eb46 0606 	adc.w	r6, r6, r6
   d7fc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7fc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7fc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7fcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7fd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7fd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7fd8:	bf88      	it	hi
   d7fda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7fde:	d81e      	bhi.n	d801e <__aeabi_dmul+0xde>
   d7fe0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7fe4:	bf08      	it	eq
   d7fe6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7fea:	f150 0000 	adcs.w	r0, r0, #0
   d7fee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7ff2:	bd70      	pop	{r4, r5, r6, pc}
   d7ff4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7ff8:	ea46 0101 	orr.w	r1, r6, r1
   d7ffc:	ea40 0002 	orr.w	r0, r0, r2
   d8000:	ea81 0103 	eor.w	r1, r1, r3
   d8004:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8008:	bfc2      	ittt	gt
   d800a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d800e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8012:	bd70      	popgt	{r4, r5, r6, pc}
   d8014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8018:	f04f 0e00 	mov.w	lr, #0
   d801c:	3c01      	subs	r4, #1
   d801e:	f300 80ab 	bgt.w	d8178 <__aeabi_dmul+0x238>
   d8022:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8026:	bfde      	ittt	le
   d8028:	2000      	movle	r0, #0
   d802a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d802e:	bd70      	pople	{r4, r5, r6, pc}
   d8030:	f1c4 0400 	rsb	r4, r4, #0
   d8034:	3c20      	subs	r4, #32
   d8036:	da35      	bge.n	d80a4 <__aeabi_dmul+0x164>
   d8038:	340c      	adds	r4, #12
   d803a:	dc1b      	bgt.n	d8074 <__aeabi_dmul+0x134>
   d803c:	f104 0414 	add.w	r4, r4, #20
   d8040:	f1c4 0520 	rsb	r5, r4, #32
   d8044:	fa00 f305 	lsl.w	r3, r0, r5
   d8048:	fa20 f004 	lsr.w	r0, r0, r4
   d804c:	fa01 f205 	lsl.w	r2, r1, r5
   d8050:	ea40 0002 	orr.w	r0, r0, r2
   d8054:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d805c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8060:	fa21 f604 	lsr.w	r6, r1, r4
   d8064:	eb42 0106 	adc.w	r1, r2, r6
   d8068:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d806c:	bf08      	it	eq
   d806e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8072:	bd70      	pop	{r4, r5, r6, pc}
   d8074:	f1c4 040c 	rsb	r4, r4, #12
   d8078:	f1c4 0520 	rsb	r5, r4, #32
   d807c:	fa00 f304 	lsl.w	r3, r0, r4
   d8080:	fa20 f005 	lsr.w	r0, r0, r5
   d8084:	fa01 f204 	lsl.w	r2, r1, r4
   d8088:	ea40 0002 	orr.w	r0, r0, r2
   d808c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8094:	f141 0100 	adc.w	r1, r1, #0
   d8098:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d809c:	bf08      	it	eq
   d809e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d80a2:	bd70      	pop	{r4, r5, r6, pc}
   d80a4:	f1c4 0520 	rsb	r5, r4, #32
   d80a8:	fa00 f205 	lsl.w	r2, r0, r5
   d80ac:	ea4e 0e02 	orr.w	lr, lr, r2
   d80b0:	fa20 f304 	lsr.w	r3, r0, r4
   d80b4:	fa01 f205 	lsl.w	r2, r1, r5
   d80b8:	ea43 0302 	orr.w	r3, r3, r2
   d80bc:	fa21 f004 	lsr.w	r0, r1, r4
   d80c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80c4:	fa21 f204 	lsr.w	r2, r1, r4
   d80c8:	ea20 0002 	bic.w	r0, r0, r2
   d80cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d80d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d80d4:	bf08      	it	eq
   d80d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d80da:	bd70      	pop	{r4, r5, r6, pc}
   d80dc:	f094 0f00 	teq	r4, #0
   d80e0:	d10f      	bne.n	d8102 <__aeabi_dmul+0x1c2>
   d80e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d80e6:	0040      	lsls	r0, r0, #1
   d80e8:	eb41 0101 	adc.w	r1, r1, r1
   d80ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80f0:	bf08      	it	eq
   d80f2:	3c01      	subeq	r4, #1
   d80f4:	d0f7      	beq.n	d80e6 <__aeabi_dmul+0x1a6>
   d80f6:	ea41 0106 	orr.w	r1, r1, r6
   d80fa:	f095 0f00 	teq	r5, #0
   d80fe:	bf18      	it	ne
   d8100:	4770      	bxne	lr
   d8102:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8106:	0052      	lsls	r2, r2, #1
   d8108:	eb43 0303 	adc.w	r3, r3, r3
   d810c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8110:	bf08      	it	eq
   d8112:	3d01      	subeq	r5, #1
   d8114:	d0f7      	beq.n	d8106 <__aeabi_dmul+0x1c6>
   d8116:	ea43 0306 	orr.w	r3, r3, r6
   d811a:	4770      	bx	lr
   d811c:	ea94 0f0c 	teq	r4, ip
   d8120:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8124:	bf18      	it	ne
   d8126:	ea95 0f0c 	teqne	r5, ip
   d812a:	d00c      	beq.n	d8146 <__aeabi_dmul+0x206>
   d812c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8130:	bf18      	it	ne
   d8132:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8136:	d1d1      	bne.n	d80dc <__aeabi_dmul+0x19c>
   d8138:	ea81 0103 	eor.w	r1, r1, r3
   d813c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8140:	f04f 0000 	mov.w	r0, #0
   d8144:	bd70      	pop	{r4, r5, r6, pc}
   d8146:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d814a:	bf06      	itte	eq
   d814c:	4610      	moveq	r0, r2
   d814e:	4619      	moveq	r1, r3
   d8150:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8154:	d019      	beq.n	d818a <__aeabi_dmul+0x24a>
   d8156:	ea94 0f0c 	teq	r4, ip
   d815a:	d102      	bne.n	d8162 <__aeabi_dmul+0x222>
   d815c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8160:	d113      	bne.n	d818a <__aeabi_dmul+0x24a>
   d8162:	ea95 0f0c 	teq	r5, ip
   d8166:	d105      	bne.n	d8174 <__aeabi_dmul+0x234>
   d8168:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d816c:	bf1c      	itt	ne
   d816e:	4610      	movne	r0, r2
   d8170:	4619      	movne	r1, r3
   d8172:	d10a      	bne.n	d818a <__aeabi_dmul+0x24a>
   d8174:	ea81 0103 	eor.w	r1, r1, r3
   d8178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d817c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8180:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8184:	f04f 0000 	mov.w	r0, #0
   d8188:	bd70      	pop	{r4, r5, r6, pc}
   d818a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d818e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8192:	bd70      	pop	{r4, r5, r6, pc}

000d8194 <__aeabi_ddiv>:
   d8194:	b570      	push	{r4, r5, r6, lr}
   d8196:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d819a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d819e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d81a2:	bf1d      	ittte	ne
   d81a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d81a8:	ea94 0f0c 	teqne	r4, ip
   d81ac:	ea95 0f0c 	teqne	r5, ip
   d81b0:	f000 f8a7 	bleq	d8302 <__aeabi_ddiv+0x16e>
   d81b4:	eba4 0405 	sub.w	r4, r4, r5
   d81b8:	ea81 0e03 	eor.w	lr, r1, r3
   d81bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d81c4:	f000 8088 	beq.w	d82d8 <__aeabi_ddiv+0x144>
   d81c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d81cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d81d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d81d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d81d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d81dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d81e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d81e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d81e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d81ec:	429d      	cmp	r5, r3
   d81ee:	bf08      	it	eq
   d81f0:	4296      	cmpeq	r6, r2
   d81f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d81f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d81fa:	d202      	bcs.n	d8202 <__aeabi_ddiv+0x6e>
   d81fc:	085b      	lsrs	r3, r3, #1
   d81fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8202:	1ab6      	subs	r6, r6, r2
   d8204:	eb65 0503 	sbc.w	r5, r5, r3
   d8208:	085b      	lsrs	r3, r3, #1
   d820a:	ea4f 0232 	mov.w	r2, r2, rrx
   d820e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8212:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8216:	ebb6 0e02 	subs.w	lr, r6, r2
   d821a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d821e:	bf22      	ittt	cs
   d8220:	1ab6      	subcs	r6, r6, r2
   d8222:	4675      	movcs	r5, lr
   d8224:	ea40 000c 	orrcs.w	r0, r0, ip
   d8228:	085b      	lsrs	r3, r3, #1
   d822a:	ea4f 0232 	mov.w	r2, r2, rrx
   d822e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8232:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8236:	bf22      	ittt	cs
   d8238:	1ab6      	subcs	r6, r6, r2
   d823a:	4675      	movcs	r5, lr
   d823c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8240:	085b      	lsrs	r3, r3, #1
   d8242:	ea4f 0232 	mov.w	r2, r2, rrx
   d8246:	ebb6 0e02 	subs.w	lr, r6, r2
   d824a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d824e:	bf22      	ittt	cs
   d8250:	1ab6      	subcs	r6, r6, r2
   d8252:	4675      	movcs	r5, lr
   d8254:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8258:	085b      	lsrs	r3, r3, #1
   d825a:	ea4f 0232 	mov.w	r2, r2, rrx
   d825e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8262:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8266:	bf22      	ittt	cs
   d8268:	1ab6      	subcs	r6, r6, r2
   d826a:	4675      	movcs	r5, lr
   d826c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8270:	ea55 0e06 	orrs.w	lr, r5, r6
   d8274:	d018      	beq.n	d82a8 <__aeabi_ddiv+0x114>
   d8276:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d827a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d827e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8282:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8286:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d828a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d828e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8292:	d1c0      	bne.n	d8216 <__aeabi_ddiv+0x82>
   d8294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8298:	d10b      	bne.n	d82b2 <__aeabi_ddiv+0x11e>
   d829a:	ea41 0100 	orr.w	r1, r1, r0
   d829e:	f04f 0000 	mov.w	r0, #0
   d82a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d82a6:	e7b6      	b.n	d8216 <__aeabi_ddiv+0x82>
   d82a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d82ac:	bf04      	itt	eq
   d82ae:	4301      	orreq	r1, r0
   d82b0:	2000      	moveq	r0, #0
   d82b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d82b6:	bf88      	it	hi
   d82b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d82bc:	f63f aeaf 	bhi.w	d801e <__aeabi_dmul+0xde>
   d82c0:	ebb5 0c03 	subs.w	ip, r5, r3
   d82c4:	bf04      	itt	eq
   d82c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d82ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d82ce:	f150 0000 	adcs.w	r0, r0, #0
   d82d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d82d6:	bd70      	pop	{r4, r5, r6, pc}
   d82d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d82dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d82e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d82e4:	bfc2      	ittt	gt
   d82e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d82ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d82ee:	bd70      	popgt	{r4, r5, r6, pc}
   d82f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82f4:	f04f 0e00 	mov.w	lr, #0
   d82f8:	3c01      	subs	r4, #1
   d82fa:	e690      	b.n	d801e <__aeabi_dmul+0xde>
   d82fc:	ea45 0e06 	orr.w	lr, r5, r6
   d8300:	e68d      	b.n	d801e <__aeabi_dmul+0xde>
   d8302:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8306:	ea94 0f0c 	teq	r4, ip
   d830a:	bf08      	it	eq
   d830c:	ea95 0f0c 	teqeq	r5, ip
   d8310:	f43f af3b 	beq.w	d818a <__aeabi_dmul+0x24a>
   d8314:	ea94 0f0c 	teq	r4, ip
   d8318:	d10a      	bne.n	d8330 <__aeabi_ddiv+0x19c>
   d831a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d831e:	f47f af34 	bne.w	d818a <__aeabi_dmul+0x24a>
   d8322:	ea95 0f0c 	teq	r5, ip
   d8326:	f47f af25 	bne.w	d8174 <__aeabi_dmul+0x234>
   d832a:	4610      	mov	r0, r2
   d832c:	4619      	mov	r1, r3
   d832e:	e72c      	b.n	d818a <__aeabi_dmul+0x24a>
   d8330:	ea95 0f0c 	teq	r5, ip
   d8334:	d106      	bne.n	d8344 <__aeabi_ddiv+0x1b0>
   d8336:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d833a:	f43f aefd 	beq.w	d8138 <__aeabi_dmul+0x1f8>
   d833e:	4610      	mov	r0, r2
   d8340:	4619      	mov	r1, r3
   d8342:	e722      	b.n	d818a <__aeabi_dmul+0x24a>
   d8344:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8348:	bf18      	it	ne
   d834a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d834e:	f47f aec5 	bne.w	d80dc <__aeabi_dmul+0x19c>
   d8352:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8356:	f47f af0d 	bne.w	d8174 <__aeabi_dmul+0x234>
   d835a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d835e:	f47f aeeb 	bne.w	d8138 <__aeabi_dmul+0x1f8>
   d8362:	e712      	b.n	d818a <__aeabi_dmul+0x24a>

000d8364 <__gedf2>:
   d8364:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8368:	e006      	b.n	d8378 <__cmpdf2+0x4>
   d836a:	bf00      	nop

000d836c <__ledf2>:
   d836c:	f04f 0c01 	mov.w	ip, #1
   d8370:	e002      	b.n	d8378 <__cmpdf2+0x4>
   d8372:	bf00      	nop

000d8374 <__cmpdf2>:
   d8374:	f04f 0c01 	mov.w	ip, #1
   d8378:	f84d cd04 	str.w	ip, [sp, #-4]!
   d837c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8388:	bf18      	it	ne
   d838a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d838e:	d01b      	beq.n	d83c8 <__cmpdf2+0x54>
   d8390:	b001      	add	sp, #4
   d8392:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8396:	bf0c      	ite	eq
   d8398:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d839c:	ea91 0f03 	teqne	r1, r3
   d83a0:	bf02      	ittt	eq
   d83a2:	ea90 0f02 	teqeq	r0, r2
   d83a6:	2000      	moveq	r0, #0
   d83a8:	4770      	bxeq	lr
   d83aa:	f110 0f00 	cmn.w	r0, #0
   d83ae:	ea91 0f03 	teq	r1, r3
   d83b2:	bf58      	it	pl
   d83b4:	4299      	cmppl	r1, r3
   d83b6:	bf08      	it	eq
   d83b8:	4290      	cmpeq	r0, r2
   d83ba:	bf2c      	ite	cs
   d83bc:	17d8      	asrcs	r0, r3, #31
   d83be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d83c2:	f040 0001 	orr.w	r0, r0, #1
   d83c6:	4770      	bx	lr
   d83c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d83cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d83d0:	d102      	bne.n	d83d8 <__cmpdf2+0x64>
   d83d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d83d6:	d107      	bne.n	d83e8 <__cmpdf2+0x74>
   d83d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d83dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d83e0:	d1d6      	bne.n	d8390 <__cmpdf2+0x1c>
   d83e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d83e6:	d0d3      	beq.n	d8390 <__cmpdf2+0x1c>
   d83e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d83ec:	4770      	bx	lr
   d83ee:	bf00      	nop

000d83f0 <__aeabi_cdrcmple>:
   d83f0:	4684      	mov	ip, r0
   d83f2:	4610      	mov	r0, r2
   d83f4:	4662      	mov	r2, ip
   d83f6:	468c      	mov	ip, r1
   d83f8:	4619      	mov	r1, r3
   d83fa:	4663      	mov	r3, ip
   d83fc:	e000      	b.n	d8400 <__aeabi_cdcmpeq>
   d83fe:	bf00      	nop

000d8400 <__aeabi_cdcmpeq>:
   d8400:	b501      	push	{r0, lr}
   d8402:	f7ff ffb7 	bl	d8374 <__cmpdf2>
   d8406:	2800      	cmp	r0, #0
   d8408:	bf48      	it	mi
   d840a:	f110 0f00 	cmnmi.w	r0, #0
   d840e:	bd01      	pop	{r0, pc}

000d8410 <__aeabi_dcmpeq>:
   d8410:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8414:	f7ff fff4 	bl	d8400 <__aeabi_cdcmpeq>
   d8418:	bf0c      	ite	eq
   d841a:	2001      	moveq	r0, #1
   d841c:	2000      	movne	r0, #0
   d841e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8422:	bf00      	nop

000d8424 <__aeabi_dcmplt>:
   d8424:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8428:	f7ff ffea 	bl	d8400 <__aeabi_cdcmpeq>
   d842c:	bf34      	ite	cc
   d842e:	2001      	movcc	r0, #1
   d8430:	2000      	movcs	r0, #0
   d8432:	f85d fb08 	ldr.w	pc, [sp], #8
   d8436:	bf00      	nop

000d8438 <__aeabi_dcmple>:
   d8438:	f84d ed08 	str.w	lr, [sp, #-8]!
   d843c:	f7ff ffe0 	bl	d8400 <__aeabi_cdcmpeq>
   d8440:	bf94      	ite	ls
   d8442:	2001      	movls	r0, #1
   d8444:	2000      	movhi	r0, #0
   d8446:	f85d fb08 	ldr.w	pc, [sp], #8
   d844a:	bf00      	nop

000d844c <__aeabi_dcmpge>:
   d844c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8450:	f7ff ffce 	bl	d83f0 <__aeabi_cdrcmple>
   d8454:	bf94      	ite	ls
   d8456:	2001      	movls	r0, #1
   d8458:	2000      	movhi	r0, #0
   d845a:	f85d fb08 	ldr.w	pc, [sp], #8
   d845e:	bf00      	nop

000d8460 <__aeabi_dcmpgt>:
   d8460:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8464:	f7ff ffc4 	bl	d83f0 <__aeabi_cdrcmple>
   d8468:	bf34      	ite	cc
   d846a:	2001      	movcc	r0, #1
   d846c:	2000      	movcs	r0, #0
   d846e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8472:	bf00      	nop

000d8474 <__aeabi_d2iz>:
   d8474:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8478:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d847c:	d215      	bcs.n	d84aa <__aeabi_d2iz+0x36>
   d847e:	d511      	bpl.n	d84a4 <__aeabi_d2iz+0x30>
   d8480:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8484:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8488:	d912      	bls.n	d84b0 <__aeabi_d2iz+0x3c>
   d848a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d848e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8492:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8496:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d849a:	fa23 f002 	lsr.w	r0, r3, r2
   d849e:	bf18      	it	ne
   d84a0:	4240      	negne	r0, r0
   d84a2:	4770      	bx	lr
   d84a4:	f04f 0000 	mov.w	r0, #0
   d84a8:	4770      	bx	lr
   d84aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d84ae:	d105      	bne.n	d84bc <__aeabi_d2iz+0x48>
   d84b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d84b4:	bf08      	it	eq
   d84b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d84ba:	4770      	bx	lr
   d84bc:	f04f 0000 	mov.w	r0, #0
   d84c0:	4770      	bx	lr
   d84c2:	bf00      	nop

000d84c4 <__aeabi_d2uiz>:
   d84c4:	004a      	lsls	r2, r1, #1
   d84c6:	d211      	bcs.n	d84ec <__aeabi_d2uiz+0x28>
   d84c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d84cc:	d211      	bcs.n	d84f2 <__aeabi_d2uiz+0x2e>
   d84ce:	d50d      	bpl.n	d84ec <__aeabi_d2uiz+0x28>
   d84d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d84d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d84d8:	d40e      	bmi.n	d84f8 <__aeabi_d2uiz+0x34>
   d84da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d84de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d84e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d84e6:	fa23 f002 	lsr.w	r0, r3, r2
   d84ea:	4770      	bx	lr
   d84ec:	f04f 0000 	mov.w	r0, #0
   d84f0:	4770      	bx	lr
   d84f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d84f6:	d102      	bne.n	d84fe <__aeabi_d2uiz+0x3a>
   d84f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d84fc:	4770      	bx	lr
   d84fe:	f04f 0000 	mov.w	r0, #0
   d8502:	4770      	bx	lr

000d8504 <__aeabi_d2f>:
   d8504:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8508:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d850c:	bf24      	itt	cs
   d850e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8512:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8516:	d90d      	bls.n	d8534 <__aeabi_d2f+0x30>
   d8518:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d851c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8520:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8524:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8528:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d852c:	bf08      	it	eq
   d852e:	f020 0001 	biceq.w	r0, r0, #1
   d8532:	4770      	bx	lr
   d8534:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8538:	d121      	bne.n	d857e <__aeabi_d2f+0x7a>
   d853a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d853e:	bfbc      	itt	lt
   d8540:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8544:	4770      	bxlt	lr
   d8546:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d854a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d854e:	f1c2 0218 	rsb	r2, r2, #24
   d8552:	f1c2 0c20 	rsb	ip, r2, #32
   d8556:	fa10 f30c 	lsls.w	r3, r0, ip
   d855a:	fa20 f002 	lsr.w	r0, r0, r2
   d855e:	bf18      	it	ne
   d8560:	f040 0001 	orrne.w	r0, r0, #1
   d8564:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8568:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d856c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8570:	ea40 000c 	orr.w	r0, r0, ip
   d8574:	fa23 f302 	lsr.w	r3, r3, r2
   d8578:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d857c:	e7cc      	b.n	d8518 <__aeabi_d2f+0x14>
   d857e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8582:	d107      	bne.n	d8594 <__aeabi_d2f+0x90>
   d8584:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8588:	bf1e      	ittt	ne
   d858a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d858e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8592:	4770      	bxne	lr
   d8594:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8598:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d859c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d85a0:	4770      	bx	lr
   d85a2:	bf00      	nop

000d85a4 <__aeabi_ldivmod>:
   d85a4:	b97b      	cbnz	r3, d85c6 <__aeabi_ldivmod+0x22>
   d85a6:	b972      	cbnz	r2, d85c6 <__aeabi_ldivmod+0x22>
   d85a8:	2900      	cmp	r1, #0
   d85aa:	bfbe      	ittt	lt
   d85ac:	2000      	movlt	r0, #0
   d85ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d85b2:	e006      	blt.n	d85c2 <__aeabi_ldivmod+0x1e>
   d85b4:	bf08      	it	eq
   d85b6:	2800      	cmpeq	r0, #0
   d85b8:	bf1c      	itt	ne
   d85ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d85be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d85c2:	f000 b9b1 	b.w	d8928 <__aeabi_idiv0>
   d85c6:	f1ad 0c08 	sub.w	ip, sp, #8
   d85ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d85ce:	2900      	cmp	r1, #0
   d85d0:	db09      	blt.n	d85e6 <__aeabi_ldivmod+0x42>
   d85d2:	2b00      	cmp	r3, #0
   d85d4:	db1a      	blt.n	d860c <__aeabi_ldivmod+0x68>
   d85d6:	f000 f835 	bl	d8644 <__udivmoddi4>
   d85da:	f8dd e004 	ldr.w	lr, [sp, #4]
   d85de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d85e2:	b004      	add	sp, #16
   d85e4:	4770      	bx	lr
   d85e6:	4240      	negs	r0, r0
   d85e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d85ec:	2b00      	cmp	r3, #0
   d85ee:	db1b      	blt.n	d8628 <__aeabi_ldivmod+0x84>
   d85f0:	f000 f828 	bl	d8644 <__udivmoddi4>
   d85f4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d85f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d85fc:	b004      	add	sp, #16
   d85fe:	4240      	negs	r0, r0
   d8600:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8604:	4252      	negs	r2, r2
   d8606:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d860a:	4770      	bx	lr
   d860c:	4252      	negs	r2, r2
   d860e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8612:	f000 f817 	bl	d8644 <__udivmoddi4>
   d8616:	f8dd e004 	ldr.w	lr, [sp, #4]
   d861a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d861e:	b004      	add	sp, #16
   d8620:	4240      	negs	r0, r0
   d8622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8626:	4770      	bx	lr
   d8628:	4252      	negs	r2, r2
   d862a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d862e:	f000 f809 	bl	d8644 <__udivmoddi4>
   d8632:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d863a:	b004      	add	sp, #16
   d863c:	4252      	negs	r2, r2
   d863e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8642:	4770      	bx	lr

000d8644 <__udivmoddi4>:
   d8644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8648:	468c      	mov	ip, r1
   d864a:	460e      	mov	r6, r1
   d864c:	4604      	mov	r4, r0
   d864e:	9d08      	ldr	r5, [sp, #32]
   d8650:	2b00      	cmp	r3, #0
   d8652:	d150      	bne.n	d86f6 <__udivmoddi4+0xb2>
   d8654:	428a      	cmp	r2, r1
   d8656:	4617      	mov	r7, r2
   d8658:	d96c      	bls.n	d8734 <__udivmoddi4+0xf0>
   d865a:	fab2 fe82 	clz	lr, r2
   d865e:	f1be 0f00 	cmp.w	lr, #0
   d8662:	d00b      	beq.n	d867c <__udivmoddi4+0x38>
   d8664:	f1ce 0420 	rsb	r4, lr, #32
   d8668:	fa20 f404 	lsr.w	r4, r0, r4
   d866c:	fa01 f60e 	lsl.w	r6, r1, lr
   d8670:	ea44 0c06 	orr.w	ip, r4, r6
   d8674:	fa02 f70e 	lsl.w	r7, r2, lr
   d8678:	fa00 f40e 	lsl.w	r4, r0, lr
   d867c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8680:	0c22      	lsrs	r2, r4, #16
   d8682:	fbbc f0f9 	udiv	r0, ip, r9
   d8686:	fa1f f887 	uxth.w	r8, r7
   d868a:	fb09 c610 	mls	r6, r9, r0, ip
   d868e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8692:	fb00 f308 	mul.w	r3, r0, r8
   d8696:	42b3      	cmp	r3, r6
   d8698:	d909      	bls.n	d86ae <__udivmoddi4+0x6a>
   d869a:	19f6      	adds	r6, r6, r7
   d869c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d86a0:	f080 8122 	bcs.w	d88e8 <__udivmoddi4+0x2a4>
   d86a4:	42b3      	cmp	r3, r6
   d86a6:	f240 811f 	bls.w	d88e8 <__udivmoddi4+0x2a4>
   d86aa:	3802      	subs	r0, #2
   d86ac:	443e      	add	r6, r7
   d86ae:	1af6      	subs	r6, r6, r3
   d86b0:	b2a2      	uxth	r2, r4
   d86b2:	fbb6 f3f9 	udiv	r3, r6, r9
   d86b6:	fb09 6613 	mls	r6, r9, r3, r6
   d86ba:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d86be:	fb03 f808 	mul.w	r8, r3, r8
   d86c2:	45a0      	cmp	r8, r4
   d86c4:	d909      	bls.n	d86da <__udivmoddi4+0x96>
   d86c6:	19e4      	adds	r4, r4, r7
   d86c8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d86cc:	f080 810a 	bcs.w	d88e4 <__udivmoddi4+0x2a0>
   d86d0:	45a0      	cmp	r8, r4
   d86d2:	f240 8107 	bls.w	d88e4 <__udivmoddi4+0x2a0>
   d86d6:	3b02      	subs	r3, #2
   d86d8:	443c      	add	r4, r7
   d86da:	ebc8 0404 	rsb	r4, r8, r4
   d86de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d86e2:	2100      	movs	r1, #0
   d86e4:	2d00      	cmp	r5, #0
   d86e6:	d062      	beq.n	d87ae <__udivmoddi4+0x16a>
   d86e8:	fa24 f40e 	lsr.w	r4, r4, lr
   d86ec:	2300      	movs	r3, #0
   d86ee:	602c      	str	r4, [r5, #0]
   d86f0:	606b      	str	r3, [r5, #4]
   d86f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86f6:	428b      	cmp	r3, r1
   d86f8:	d907      	bls.n	d870a <__udivmoddi4+0xc6>
   d86fa:	2d00      	cmp	r5, #0
   d86fc:	d055      	beq.n	d87aa <__udivmoddi4+0x166>
   d86fe:	2100      	movs	r1, #0
   d8700:	e885 0041 	stmia.w	r5, {r0, r6}
   d8704:	4608      	mov	r0, r1
   d8706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d870a:	fab3 f183 	clz	r1, r3
   d870e:	2900      	cmp	r1, #0
   d8710:	f040 8090 	bne.w	d8834 <__udivmoddi4+0x1f0>
   d8714:	42b3      	cmp	r3, r6
   d8716:	d302      	bcc.n	d871e <__udivmoddi4+0xda>
   d8718:	4282      	cmp	r2, r0
   d871a:	f200 80f8 	bhi.w	d890e <__udivmoddi4+0x2ca>
   d871e:	1a84      	subs	r4, r0, r2
   d8720:	eb66 0603 	sbc.w	r6, r6, r3
   d8724:	2001      	movs	r0, #1
   d8726:	46b4      	mov	ip, r6
   d8728:	2d00      	cmp	r5, #0
   d872a:	d040      	beq.n	d87ae <__udivmoddi4+0x16a>
   d872c:	e885 1010 	stmia.w	r5, {r4, ip}
   d8730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8734:	b912      	cbnz	r2, d873c <__udivmoddi4+0xf8>
   d8736:	2701      	movs	r7, #1
   d8738:	fbb7 f7f2 	udiv	r7, r7, r2
   d873c:	fab7 fe87 	clz	lr, r7
   d8740:	f1be 0f00 	cmp.w	lr, #0
   d8744:	d135      	bne.n	d87b2 <__udivmoddi4+0x16e>
   d8746:	1bf3      	subs	r3, r6, r7
   d8748:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d874c:	fa1f fc87 	uxth.w	ip, r7
   d8750:	2101      	movs	r1, #1
   d8752:	fbb3 f0f8 	udiv	r0, r3, r8
   d8756:	0c22      	lsrs	r2, r4, #16
   d8758:	fb08 3610 	mls	r6, r8, r0, r3
   d875c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8760:	fb0c f300 	mul.w	r3, ip, r0
   d8764:	42b3      	cmp	r3, r6
   d8766:	d907      	bls.n	d8778 <__udivmoddi4+0x134>
   d8768:	19f6      	adds	r6, r6, r7
   d876a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d876e:	d202      	bcs.n	d8776 <__udivmoddi4+0x132>
   d8770:	42b3      	cmp	r3, r6
   d8772:	f200 80ce 	bhi.w	d8912 <__udivmoddi4+0x2ce>
   d8776:	4610      	mov	r0, r2
   d8778:	1af6      	subs	r6, r6, r3
   d877a:	b2a2      	uxth	r2, r4
   d877c:	fbb6 f3f8 	udiv	r3, r6, r8
   d8780:	fb08 6613 	mls	r6, r8, r3, r6
   d8784:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8788:	fb0c fc03 	mul.w	ip, ip, r3
   d878c:	45a4      	cmp	ip, r4
   d878e:	d907      	bls.n	d87a0 <__udivmoddi4+0x15c>
   d8790:	19e4      	adds	r4, r4, r7
   d8792:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d8796:	d202      	bcs.n	d879e <__udivmoddi4+0x15a>
   d8798:	45a4      	cmp	ip, r4
   d879a:	f200 80b5 	bhi.w	d8908 <__udivmoddi4+0x2c4>
   d879e:	4613      	mov	r3, r2
   d87a0:	ebcc 0404 	rsb	r4, ip, r4
   d87a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d87a8:	e79c      	b.n	d86e4 <__udivmoddi4+0xa0>
   d87aa:	4629      	mov	r1, r5
   d87ac:	4628      	mov	r0, r5
   d87ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87b2:	f1ce 0120 	rsb	r1, lr, #32
   d87b6:	fa06 f30e 	lsl.w	r3, r6, lr
   d87ba:	fa07 f70e 	lsl.w	r7, r7, lr
   d87be:	fa20 f901 	lsr.w	r9, r0, r1
   d87c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d87c6:	40ce      	lsrs	r6, r1
   d87c8:	ea49 0903 	orr.w	r9, r9, r3
   d87cc:	fbb6 faf8 	udiv	sl, r6, r8
   d87d0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d87d4:	fb08 661a 	mls	r6, r8, sl, r6
   d87d8:	fa1f fc87 	uxth.w	ip, r7
   d87dc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d87e0:	fb0a f20c 	mul.w	r2, sl, ip
   d87e4:	429a      	cmp	r2, r3
   d87e6:	fa00 f40e 	lsl.w	r4, r0, lr
   d87ea:	d90a      	bls.n	d8802 <__udivmoddi4+0x1be>
   d87ec:	19db      	adds	r3, r3, r7
   d87ee:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d87f2:	f080 8087 	bcs.w	d8904 <__udivmoddi4+0x2c0>
   d87f6:	429a      	cmp	r2, r3
   d87f8:	f240 8084 	bls.w	d8904 <__udivmoddi4+0x2c0>
   d87fc:	f1aa 0a02 	sub.w	sl, sl, #2
   d8800:	443b      	add	r3, r7
   d8802:	1a9b      	subs	r3, r3, r2
   d8804:	fa1f f989 	uxth.w	r9, r9
   d8808:	fbb3 f1f8 	udiv	r1, r3, r8
   d880c:	fb08 3311 	mls	r3, r8, r1, r3
   d8810:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d8814:	fb01 f60c 	mul.w	r6, r1, ip
   d8818:	429e      	cmp	r6, r3
   d881a:	d907      	bls.n	d882c <__udivmoddi4+0x1e8>
   d881c:	19db      	adds	r3, r3, r7
   d881e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d8822:	d26b      	bcs.n	d88fc <__udivmoddi4+0x2b8>
   d8824:	429e      	cmp	r6, r3
   d8826:	d969      	bls.n	d88fc <__udivmoddi4+0x2b8>
   d8828:	3902      	subs	r1, #2
   d882a:	443b      	add	r3, r7
   d882c:	1b9b      	subs	r3, r3, r6
   d882e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d8832:	e78e      	b.n	d8752 <__udivmoddi4+0x10e>
   d8834:	f1c1 0e20 	rsb	lr, r1, #32
   d8838:	fa22 f40e 	lsr.w	r4, r2, lr
   d883c:	408b      	lsls	r3, r1
   d883e:	4323      	orrs	r3, r4
   d8840:	fa20 f70e 	lsr.w	r7, r0, lr
   d8844:	fa06 f401 	lsl.w	r4, r6, r1
   d8848:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d884c:	fa26 f60e 	lsr.w	r6, r6, lr
   d8850:	433c      	orrs	r4, r7
   d8852:	fbb6 f9fc 	udiv	r9, r6, ip
   d8856:	0c27      	lsrs	r7, r4, #16
   d8858:	fb0c 6619 	mls	r6, ip, r9, r6
   d885c:	fa1f f883 	uxth.w	r8, r3
   d8860:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8864:	fb09 f708 	mul.w	r7, r9, r8
   d8868:	42b7      	cmp	r7, r6
   d886a:	fa02 f201 	lsl.w	r2, r2, r1
   d886e:	fa00 fa01 	lsl.w	sl, r0, r1
   d8872:	d908      	bls.n	d8886 <__udivmoddi4+0x242>
   d8874:	18f6      	adds	r6, r6, r3
   d8876:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d887a:	d241      	bcs.n	d8900 <__udivmoddi4+0x2bc>
   d887c:	42b7      	cmp	r7, r6
   d887e:	d93f      	bls.n	d8900 <__udivmoddi4+0x2bc>
   d8880:	f1a9 0902 	sub.w	r9, r9, #2
   d8884:	441e      	add	r6, r3
   d8886:	1bf6      	subs	r6, r6, r7
   d8888:	b2a0      	uxth	r0, r4
   d888a:	fbb6 f4fc 	udiv	r4, r6, ip
   d888e:	fb0c 6614 	mls	r6, ip, r4, r6
   d8892:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d8896:	fb04 f808 	mul.w	r8, r4, r8
   d889a:	45b8      	cmp	r8, r7
   d889c:	d907      	bls.n	d88ae <__udivmoddi4+0x26a>
   d889e:	18ff      	adds	r7, r7, r3
   d88a0:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d88a4:	d228      	bcs.n	d88f8 <__udivmoddi4+0x2b4>
   d88a6:	45b8      	cmp	r8, r7
   d88a8:	d926      	bls.n	d88f8 <__udivmoddi4+0x2b4>
   d88aa:	3c02      	subs	r4, #2
   d88ac:	441f      	add	r7, r3
   d88ae:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d88b2:	ebc8 0707 	rsb	r7, r8, r7
   d88b6:	fba0 8902 	umull	r8, r9, r0, r2
   d88ba:	454f      	cmp	r7, r9
   d88bc:	4644      	mov	r4, r8
   d88be:	464e      	mov	r6, r9
   d88c0:	d314      	bcc.n	d88ec <__udivmoddi4+0x2a8>
   d88c2:	d029      	beq.n	d8918 <__udivmoddi4+0x2d4>
   d88c4:	b365      	cbz	r5, d8920 <__udivmoddi4+0x2dc>
   d88c6:	ebba 0304 	subs.w	r3, sl, r4
   d88ca:	eb67 0706 	sbc.w	r7, r7, r6
   d88ce:	fa07 fe0e 	lsl.w	lr, r7, lr
   d88d2:	40cb      	lsrs	r3, r1
   d88d4:	40cf      	lsrs	r7, r1
   d88d6:	ea4e 0303 	orr.w	r3, lr, r3
   d88da:	e885 0088 	stmia.w	r5, {r3, r7}
   d88de:	2100      	movs	r1, #0
   d88e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d88e4:	4613      	mov	r3, r2
   d88e6:	e6f8      	b.n	d86da <__udivmoddi4+0x96>
   d88e8:	4610      	mov	r0, r2
   d88ea:	e6e0      	b.n	d86ae <__udivmoddi4+0x6a>
   d88ec:	ebb8 0402 	subs.w	r4, r8, r2
   d88f0:	eb69 0603 	sbc.w	r6, r9, r3
   d88f4:	3801      	subs	r0, #1
   d88f6:	e7e5      	b.n	d88c4 <__udivmoddi4+0x280>
   d88f8:	4604      	mov	r4, r0
   d88fa:	e7d8      	b.n	d88ae <__udivmoddi4+0x26a>
   d88fc:	4611      	mov	r1, r2
   d88fe:	e795      	b.n	d882c <__udivmoddi4+0x1e8>
   d8900:	4681      	mov	r9, r0
   d8902:	e7c0      	b.n	d8886 <__udivmoddi4+0x242>
   d8904:	468a      	mov	sl, r1
   d8906:	e77c      	b.n	d8802 <__udivmoddi4+0x1be>
   d8908:	3b02      	subs	r3, #2
   d890a:	443c      	add	r4, r7
   d890c:	e748      	b.n	d87a0 <__udivmoddi4+0x15c>
   d890e:	4608      	mov	r0, r1
   d8910:	e70a      	b.n	d8728 <__udivmoddi4+0xe4>
   d8912:	3802      	subs	r0, #2
   d8914:	443e      	add	r6, r7
   d8916:	e72f      	b.n	d8778 <__udivmoddi4+0x134>
   d8918:	45c2      	cmp	sl, r8
   d891a:	d3e7      	bcc.n	d88ec <__udivmoddi4+0x2a8>
   d891c:	463e      	mov	r6, r7
   d891e:	e7d1      	b.n	d88c4 <__udivmoddi4+0x280>
   d8920:	4629      	mov	r1, r5
   d8922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8926:	bf00      	nop

000d8928 <__aeabi_idiv0>:
   d8928:	4770      	bx	lr
   d892a:	bf00      	nop

000d892c <atof>:
   d892c:	2100      	movs	r1, #0
   d892e:	f000 bfc7 	b.w	d98c0 <strtod>

000d8932 <atoi>:
   d8932:	220a      	movs	r2, #10
   d8934:	2100      	movs	r1, #0
   d8936:	f001 b851 	b.w	d99dc <strtol>
	...

000d893c <__cxa_atexit>:
   d893c:	b510      	push	{r4, lr}
   d893e:	4c05      	ldr	r4, [pc, #20]	; (d8954 <__cxa_atexit+0x18>)
   d8940:	4613      	mov	r3, r2
   d8942:	b12c      	cbz	r4, d8950 <__cxa_atexit+0x14>
   d8944:	460a      	mov	r2, r1
   d8946:	4601      	mov	r1, r0
   d8948:	2002      	movs	r0, #2
   d894a:	f3af 8000 	nop.w
   d894e:	bd10      	pop	{r4, pc}
   d8950:	4620      	mov	r0, r4
   d8952:	bd10      	pop	{r4, pc}
   d8954:	00000000 	.word	0x00000000

000d8958 <localtime>:
   d8958:	b538      	push	{r3, r4, r5, lr}
   d895a:	4b07      	ldr	r3, [pc, #28]	; (d8978 <localtime+0x20>)
   d895c:	681c      	ldr	r4, [r3, #0]
   d895e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8960:	4605      	mov	r5, r0
   d8962:	b91b      	cbnz	r3, d896c <localtime+0x14>
   d8964:	2024      	movs	r0, #36	; 0x24
   d8966:	f7fd fc87 	bl	d6278 <malloc>
   d896a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d896c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d896e:	4628      	mov	r0, r5
   d8970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8974:	f000 b802 	b.w	d897c <localtime_r>
   d8978:	2003e124 	.word	0x2003e124

000d897c <localtime_r>:
   d897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8980:	460c      	mov	r4, r1
   d8982:	4680      	mov	r8, r0
   d8984:	f001 fe4e 	bl	da624 <__gettzinfo>
   d8988:	4621      	mov	r1, r4
   d898a:	4607      	mov	r7, r0
   d898c:	4640      	mov	r0, r8
   d898e:	f001 fe4d 	bl	da62c <gmtime_r>
   d8992:	6946      	ldr	r6, [r0, #20]
   d8994:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8998:	07b3      	lsls	r3, r6, #30
   d899a:	4604      	mov	r4, r0
   d899c:	d105      	bne.n	d89aa <localtime_r+0x2e>
   d899e:	2264      	movs	r2, #100	; 0x64
   d89a0:	fb96 f3f2 	sdiv	r3, r6, r2
   d89a4:	fb02 6313 	mls	r3, r2, r3, r6
   d89a8:	b94b      	cbnz	r3, d89be <localtime_r+0x42>
   d89aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d89ae:	fb96 f3f5 	sdiv	r3, r6, r5
   d89b2:	fb05 6513 	mls	r5, r5, r3, r6
   d89b6:	fab5 f385 	clz	r3, r5
   d89ba:	095b      	lsrs	r3, r3, #5
   d89bc:	e000      	b.n	d89c0 <localtime_r+0x44>
   d89be:	2301      	movs	r3, #1
   d89c0:	4a5f      	ldr	r2, [pc, #380]	; (d8b40 <localtime_r+0x1c4>)
   d89c2:	2530      	movs	r5, #48	; 0x30
   d89c4:	fb05 2503 	mla	r5, r5, r3, r2
   d89c8:	f001 f942 	bl	d9c50 <__tz_lock>
   d89cc:	f001 f942 	bl	d9c54 <_tzset_unlocked>
   d89d0:	4b5c      	ldr	r3, [pc, #368]	; (d8b44 <localtime_r+0x1c8>)
   d89d2:	681b      	ldr	r3, [r3, #0]
   d89d4:	b1f3      	cbz	r3, d8a14 <localtime_r+0x98>
   d89d6:	687b      	ldr	r3, [r7, #4]
   d89d8:	429e      	cmp	r6, r3
   d89da:	d105      	bne.n	d89e8 <localtime_r+0x6c>
   d89dc:	6839      	ldr	r1, [r7, #0]
   d89de:	f8d8 3000 	ldr.w	r3, [r8]
   d89e2:	69fa      	ldr	r2, [r7, #28]
   d89e4:	b941      	cbnz	r1, d89f8 <localtime_r+0x7c>
   d89e6:	e00a      	b.n	d89fe <localtime_r+0x82>
   d89e8:	4630      	mov	r0, r6
   d89ea:	f001 f889 	bl	d9b00 <__tzcalc_limits>
   d89ee:	2800      	cmp	r0, #0
   d89f0:	d1f4      	bne.n	d89dc <localtime_r+0x60>
   d89f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d89f6:	e00d      	b.n	d8a14 <localtime_r+0x98>
   d89f8:	4293      	cmp	r3, r2
   d89fa:	db08      	blt.n	d8a0e <localtime_r+0x92>
   d89fc:	e001      	b.n	d8a02 <localtime_r+0x86>
   d89fe:	4293      	cmp	r3, r2
   d8a00:	da07      	bge.n	d8a12 <localtime_r+0x96>
   d8a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8a04:	4293      	cmp	r3, r2
   d8a06:	bfac      	ite	ge
   d8a08:	2300      	movge	r3, #0
   d8a0a:	2301      	movlt	r3, #1
   d8a0c:	e002      	b.n	d8a14 <localtime_r+0x98>
   d8a0e:	2300      	movs	r3, #0
   d8a10:	e000      	b.n	d8a14 <localtime_r+0x98>
   d8a12:	2301      	movs	r3, #1
   d8a14:	6223      	str	r3, [r4, #32]
   d8a16:	6a23      	ldr	r3, [r4, #32]
   d8a18:	2b01      	cmp	r3, #1
   d8a1a:	bf0c      	ite	eq
   d8a1c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8a1e:	6a39      	ldrne	r1, [r7, #32]
   d8a20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8a24:	203c      	movs	r0, #60	; 0x3c
   d8a26:	fb91 f6f3 	sdiv	r6, r1, r3
   d8a2a:	fb03 1316 	mls	r3, r3, r6, r1
   d8a2e:	6861      	ldr	r1, [r4, #4]
   d8a30:	fb93 f2f0 	sdiv	r2, r3, r0
   d8a34:	fb00 3012 	mls	r0, r0, r2, r3
   d8a38:	6823      	ldr	r3, [r4, #0]
   d8a3a:	1a89      	subs	r1, r1, r2
   d8a3c:	68a2      	ldr	r2, [r4, #8]
   d8a3e:	6061      	str	r1, [r4, #4]
   d8a40:	1a1b      	subs	r3, r3, r0
   d8a42:	1b92      	subs	r2, r2, r6
   d8a44:	2b3b      	cmp	r3, #59	; 0x3b
   d8a46:	6023      	str	r3, [r4, #0]
   d8a48:	60a2      	str	r2, [r4, #8]
   d8a4a:	dd03      	ble.n	d8a54 <localtime_r+0xd8>
   d8a4c:	3101      	adds	r1, #1
   d8a4e:	6061      	str	r1, [r4, #4]
   d8a50:	3b3c      	subs	r3, #60	; 0x3c
   d8a52:	e004      	b.n	d8a5e <localtime_r+0xe2>
   d8a54:	2b00      	cmp	r3, #0
   d8a56:	da03      	bge.n	d8a60 <localtime_r+0xe4>
   d8a58:	3901      	subs	r1, #1
   d8a5a:	6061      	str	r1, [r4, #4]
   d8a5c:	333c      	adds	r3, #60	; 0x3c
   d8a5e:	6023      	str	r3, [r4, #0]
   d8a60:	6863      	ldr	r3, [r4, #4]
   d8a62:	2b3b      	cmp	r3, #59	; 0x3b
   d8a64:	dd03      	ble.n	d8a6e <localtime_r+0xf2>
   d8a66:	3201      	adds	r2, #1
   d8a68:	60a2      	str	r2, [r4, #8]
   d8a6a:	3b3c      	subs	r3, #60	; 0x3c
   d8a6c:	e004      	b.n	d8a78 <localtime_r+0xfc>
   d8a6e:	2b00      	cmp	r3, #0
   d8a70:	da03      	bge.n	d8a7a <localtime_r+0xfe>
   d8a72:	3a01      	subs	r2, #1
   d8a74:	60a2      	str	r2, [r4, #8]
   d8a76:	333c      	adds	r3, #60	; 0x3c
   d8a78:	6063      	str	r3, [r4, #4]
   d8a7a:	68a3      	ldr	r3, [r4, #8]
   d8a7c:	2b17      	cmp	r3, #23
   d8a7e:	dd22      	ble.n	d8ac6 <localtime_r+0x14a>
   d8a80:	69e2      	ldr	r2, [r4, #28]
   d8a82:	3201      	adds	r2, #1
   d8a84:	61e2      	str	r2, [r4, #28]
   d8a86:	69a2      	ldr	r2, [r4, #24]
   d8a88:	3201      	adds	r2, #1
   d8a8a:	2a06      	cmp	r2, #6
   d8a8c:	bfc8      	it	gt
   d8a8e:	2200      	movgt	r2, #0
   d8a90:	61a2      	str	r2, [r4, #24]
   d8a92:	68e2      	ldr	r2, [r4, #12]
   d8a94:	3b18      	subs	r3, #24
   d8a96:	3201      	adds	r2, #1
   d8a98:	60a3      	str	r3, [r4, #8]
   d8a9a:	6923      	ldr	r3, [r4, #16]
   d8a9c:	60e2      	str	r2, [r4, #12]
   d8a9e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8aa2:	428a      	cmp	r2, r1
   d8aa4:	dd46      	ble.n	d8b34 <localtime_r+0x1b8>
   d8aa6:	3301      	adds	r3, #1
   d8aa8:	2b0c      	cmp	r3, #12
   d8aaa:	bf0c      	ite	eq
   d8aac:	6963      	ldreq	r3, [r4, #20]
   d8aae:	6123      	strne	r3, [r4, #16]
   d8ab0:	eba2 0201 	sub.w	r2, r2, r1
   d8ab4:	60e2      	str	r2, [r4, #12]
   d8ab6:	bf01      	itttt	eq
   d8ab8:	3301      	addeq	r3, #1
   d8aba:	2200      	moveq	r2, #0
   d8abc:	6122      	streq	r2, [r4, #16]
   d8abe:	6163      	streq	r3, [r4, #20]
   d8ac0:	bf08      	it	eq
   d8ac2:	61e2      	streq	r2, [r4, #28]
   d8ac4:	e036      	b.n	d8b34 <localtime_r+0x1b8>
   d8ac6:	2b00      	cmp	r3, #0
   d8ac8:	da34      	bge.n	d8b34 <localtime_r+0x1b8>
   d8aca:	69e2      	ldr	r2, [r4, #28]
   d8acc:	3a01      	subs	r2, #1
   d8ace:	61e2      	str	r2, [r4, #28]
   d8ad0:	69a2      	ldr	r2, [r4, #24]
   d8ad2:	3a01      	subs	r2, #1
   d8ad4:	bf48      	it	mi
   d8ad6:	2206      	movmi	r2, #6
   d8ad8:	61a2      	str	r2, [r4, #24]
   d8ada:	68e2      	ldr	r2, [r4, #12]
   d8adc:	3318      	adds	r3, #24
   d8ade:	3a01      	subs	r2, #1
   d8ae0:	60e2      	str	r2, [r4, #12]
   d8ae2:	60a3      	str	r3, [r4, #8]
   d8ae4:	bb32      	cbnz	r2, d8b34 <localtime_r+0x1b8>
   d8ae6:	6923      	ldr	r3, [r4, #16]
   d8ae8:	3b01      	subs	r3, #1
   d8aea:	d401      	bmi.n	d8af0 <localtime_r+0x174>
   d8aec:	6123      	str	r3, [r4, #16]
   d8aee:	e01d      	b.n	d8b2c <localtime_r+0x1b0>
   d8af0:	230b      	movs	r3, #11
   d8af2:	6123      	str	r3, [r4, #16]
   d8af4:	6963      	ldr	r3, [r4, #20]
   d8af6:	1e5a      	subs	r2, r3, #1
   d8af8:	f012 0f03 	tst.w	r2, #3
   d8afc:	6162      	str	r2, [r4, #20]
   d8afe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8b02:	d105      	bne.n	d8b10 <localtime_r+0x194>
   d8b04:	2164      	movs	r1, #100	; 0x64
   d8b06:	fb93 f2f1 	sdiv	r2, r3, r1
   d8b0a:	fb01 3212 	mls	r2, r1, r2, r3
   d8b0e:	b94a      	cbnz	r2, d8b24 <localtime_r+0x1a8>
   d8b10:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8b14:	fb93 f2f1 	sdiv	r2, r3, r1
   d8b18:	fb01 3312 	mls	r3, r1, r2, r3
   d8b1c:	fab3 f383 	clz	r3, r3
   d8b20:	095b      	lsrs	r3, r3, #5
   d8b22:	e000      	b.n	d8b26 <localtime_r+0x1aa>
   d8b24:	2301      	movs	r3, #1
   d8b26:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8b2a:	61e3      	str	r3, [r4, #28]
   d8b2c:	6923      	ldr	r3, [r4, #16]
   d8b2e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8b32:	60e3      	str	r3, [r4, #12]
   d8b34:	f001 f88d 	bl	d9c52 <__tz_unlock>
   d8b38:	4620      	mov	r0, r4
   d8b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b3e:	bf00      	nop
   d8b40:	000db6c4 	.word	0x000db6c4
   d8b44:	2003e7e8 	.word	0x2003e7e8

000d8b48 <_localeconv_r>:
   d8b48:	4800      	ldr	r0, [pc, #0]	; (d8b4c <_localeconv_r+0x4>)
   d8b4a:	4770      	bx	lr
   d8b4c:	2003e128 	.word	0x2003e128

000d8b50 <memcpy>:
   d8b50:	b510      	push	{r4, lr}
   d8b52:	1e43      	subs	r3, r0, #1
   d8b54:	440a      	add	r2, r1
   d8b56:	4291      	cmp	r1, r2
   d8b58:	d004      	beq.n	d8b64 <memcpy+0x14>
   d8b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b62:	e7f8      	b.n	d8b56 <memcpy+0x6>
   d8b64:	bd10      	pop	{r4, pc}

000d8b66 <memset>:
   d8b66:	4402      	add	r2, r0
   d8b68:	4603      	mov	r3, r0
   d8b6a:	4293      	cmp	r3, r2
   d8b6c:	d002      	beq.n	d8b74 <memset+0xe>
   d8b6e:	f803 1b01 	strb.w	r1, [r3], #1
   d8b72:	e7fa      	b.n	d8b6a <memset+0x4>
   d8b74:	4770      	bx	lr
	...

000d8b78 <srand>:
   d8b78:	b538      	push	{r3, r4, r5, lr}
   d8b7a:	4b12      	ldr	r3, [pc, #72]	; (d8bc4 <srand+0x4c>)
   d8b7c:	681c      	ldr	r4, [r3, #0]
   d8b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b80:	4605      	mov	r5, r0
   d8b82:	b9d3      	cbnz	r3, d8bba <srand+0x42>
   d8b84:	2018      	movs	r0, #24
   d8b86:	f7fd fb77 	bl	d6278 <malloc>
   d8b8a:	f243 330e 	movw	r3, #13070	; 0x330e
   d8b8e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8b90:	8003      	strh	r3, [r0, #0]
   d8b92:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8b96:	8043      	strh	r3, [r0, #2]
   d8b98:	f241 2334 	movw	r3, #4660	; 0x1234
   d8b9c:	8083      	strh	r3, [r0, #4]
   d8b9e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8ba2:	80c3      	strh	r3, [r0, #6]
   d8ba4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8ba8:	8103      	strh	r3, [r0, #8]
   d8baa:	2305      	movs	r3, #5
   d8bac:	8143      	strh	r3, [r0, #10]
   d8bae:	230b      	movs	r3, #11
   d8bb0:	8183      	strh	r3, [r0, #12]
   d8bb2:	2201      	movs	r2, #1
   d8bb4:	2300      	movs	r3, #0
   d8bb6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8bbc:	2200      	movs	r2, #0
   d8bbe:	611d      	str	r5, [r3, #16]
   d8bc0:	615a      	str	r2, [r3, #20]
   d8bc2:	bd38      	pop	{r3, r4, r5, pc}
   d8bc4:	2003e124 	.word	0x2003e124

000d8bc8 <strcmp>:
   d8bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8bd0:	2a01      	cmp	r2, #1
   d8bd2:	bf28      	it	cs
   d8bd4:	429a      	cmpcs	r2, r3
   d8bd6:	d0f7      	beq.n	d8bc8 <strcmp>
   d8bd8:	1ad0      	subs	r0, r2, r3
   d8bda:	4770      	bx	lr

000d8bdc <strcpy>:
   d8bdc:	4603      	mov	r3, r0
   d8bde:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8be2:	f803 2b01 	strb.w	r2, [r3], #1
   d8be6:	2a00      	cmp	r2, #0
   d8be8:	d1f9      	bne.n	d8bde <strcpy+0x2>
   d8bea:	4770      	bx	lr

000d8bec <strdup>:
   d8bec:	4b02      	ldr	r3, [pc, #8]	; (d8bf8 <strdup+0xc>)
   d8bee:	4601      	mov	r1, r0
   d8bf0:	6818      	ldr	r0, [r3, #0]
   d8bf2:	f000 b803 	b.w	d8bfc <_strdup_r>
   d8bf6:	bf00      	nop
   d8bf8:	2003e124 	.word	0x2003e124

000d8bfc <_strdup_r>:
   d8bfc:	b570      	push	{r4, r5, r6, lr}
   d8bfe:	4606      	mov	r6, r0
   d8c00:	4608      	mov	r0, r1
   d8c02:	460c      	mov	r4, r1
   d8c04:	f000 f80d 	bl	d8c22 <strlen>
   d8c08:	1c45      	adds	r5, r0, #1
   d8c0a:	4629      	mov	r1, r5
   d8c0c:	4630      	mov	r0, r6
   d8c0e:	f7fd fb63 	bl	d62d8 <_malloc_r>
   d8c12:	4606      	mov	r6, r0
   d8c14:	b118      	cbz	r0, d8c1e <_strdup_r+0x22>
   d8c16:	462a      	mov	r2, r5
   d8c18:	4621      	mov	r1, r4
   d8c1a:	f7ff ff99 	bl	d8b50 <memcpy>
   d8c1e:	4630      	mov	r0, r6
   d8c20:	bd70      	pop	{r4, r5, r6, pc}

000d8c22 <strlen>:
   d8c22:	4603      	mov	r3, r0
   d8c24:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8c28:	2a00      	cmp	r2, #0
   d8c2a:	d1fb      	bne.n	d8c24 <strlen+0x2>
   d8c2c:	1a18      	subs	r0, r3, r0
   d8c2e:	3801      	subs	r0, #1
   d8c30:	4770      	bx	lr

000d8c32 <strncmp>:
   d8c32:	b530      	push	{r4, r5, lr}
   d8c34:	b182      	cbz	r2, d8c58 <strncmp+0x26>
   d8c36:	1e45      	subs	r5, r0, #1
   d8c38:	3901      	subs	r1, #1
   d8c3a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8c3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8c42:	42a3      	cmp	r3, r4
   d8c44:	d106      	bne.n	d8c54 <strncmp+0x22>
   d8c46:	43ec      	mvns	r4, r5
   d8c48:	4414      	add	r4, r2
   d8c4a:	42e0      	cmn	r0, r4
   d8c4c:	d001      	beq.n	d8c52 <strncmp+0x20>
   d8c4e:	2b00      	cmp	r3, #0
   d8c50:	d1f3      	bne.n	d8c3a <strncmp+0x8>
   d8c52:	461c      	mov	r4, r3
   d8c54:	1b18      	subs	r0, r3, r4
   d8c56:	bd30      	pop	{r4, r5, pc}
   d8c58:	4610      	mov	r0, r2
   d8c5a:	bd30      	pop	{r4, r5, pc}

000d8c5c <strncpy>:
   d8c5c:	b510      	push	{r4, lr}
   d8c5e:	4603      	mov	r3, r0
   d8c60:	b142      	cbz	r2, d8c74 <strncpy+0x18>
   d8c62:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c66:	f803 4b01 	strb.w	r4, [r3], #1
   d8c6a:	3a01      	subs	r2, #1
   d8c6c:	2c00      	cmp	r4, #0
   d8c6e:	d1f7      	bne.n	d8c60 <strncpy+0x4>
   d8c70:	441a      	add	r2, r3
   d8c72:	e000      	b.n	d8c76 <strncpy+0x1a>
   d8c74:	bd10      	pop	{r4, pc}
   d8c76:	4293      	cmp	r3, r2
   d8c78:	d002      	beq.n	d8c80 <strncpy+0x24>
   d8c7a:	f803 4b01 	strb.w	r4, [r3], #1
   d8c7e:	e7fa      	b.n	d8c76 <strncpy+0x1a>
   d8c80:	bd10      	pop	{r4, pc}

000d8c82 <sulp>:
   d8c82:	b570      	push	{r4, r5, r6, lr}
   d8c84:	4604      	mov	r4, r0
   d8c86:	460d      	mov	r5, r1
   d8c88:	ec45 4b10 	vmov	d0, r4, r5
   d8c8c:	4616      	mov	r6, r2
   d8c8e:	f002 f82b 	bl	dace8 <__ulp>
   d8c92:	ec51 0b10 	vmov	r0, r1, d0
   d8c96:	b17e      	cbz	r6, d8cb8 <sulp+0x36>
   d8c98:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8c9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8ca0:	2b00      	cmp	r3, #0
   d8ca2:	dd09      	ble.n	d8cb8 <sulp+0x36>
   d8ca4:	051b      	lsls	r3, r3, #20
   d8ca6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8caa:	2400      	movs	r4, #0
   d8cac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8cb0:	4622      	mov	r2, r4
   d8cb2:	462b      	mov	r3, r5
   d8cb4:	f7ff f944 	bl	d7f40 <__aeabi_dmul>
   d8cb8:	bd70      	pop	{r4, r5, r6, pc}
   d8cba:	0000      	movs	r0, r0
   d8cbc:	0000      	movs	r0, r0
	...

000d8cc0 <_strtod_r>:
   d8cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8cc4:	b09d      	sub	sp, #116	; 0x74
   d8cc6:	2300      	movs	r3, #0
   d8cc8:	9002      	str	r0, [sp, #8]
   d8cca:	460c      	mov	r4, r1
   d8ccc:	9213      	str	r2, [sp, #76]	; 0x4c
   d8cce:	9318      	str	r3, [sp, #96]	; 0x60
   d8cd0:	f04f 0a00 	mov.w	sl, #0
   d8cd4:	f04f 0b00 	mov.w	fp, #0
   d8cd8:	9117      	str	r1, [sp, #92]	; 0x5c
   d8cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8cdc:	781a      	ldrb	r2, [r3, #0]
   d8cde:	2a0d      	cmp	r2, #13
   d8ce0:	d805      	bhi.n	d8cee <_strtod_r+0x2e>
   d8ce2:	2a09      	cmp	r2, #9
   d8ce4:	d213      	bcs.n	d8d0e <_strtod_r+0x4e>
   d8ce6:	2a00      	cmp	r2, #0
   d8ce8:	f000 81ac 	beq.w	d9044 <_strtod_r+0x384>
   d8cec:	e012      	b.n	d8d14 <_strtod_r+0x54>
   d8cee:	2a2b      	cmp	r2, #43	; 0x2b
   d8cf0:	d004      	beq.n	d8cfc <_strtod_r+0x3c>
   d8cf2:	2a2d      	cmp	r2, #45	; 0x2d
   d8cf4:	d004      	beq.n	d8d00 <_strtod_r+0x40>
   d8cf6:	2a20      	cmp	r2, #32
   d8cf8:	d10c      	bne.n	d8d14 <_strtod_r+0x54>
   d8cfa:	e008      	b.n	d8d0e <_strtod_r+0x4e>
   d8cfc:	2200      	movs	r2, #0
   d8cfe:	e000      	b.n	d8d02 <_strtod_r+0x42>
   d8d00:	2201      	movs	r2, #1
   d8d02:	920c      	str	r2, [sp, #48]	; 0x30
   d8d04:	1c5a      	adds	r2, r3, #1
   d8d06:	9217      	str	r2, [sp, #92]	; 0x5c
   d8d08:	785b      	ldrb	r3, [r3, #1]
   d8d0a:	b92b      	cbnz	r3, d8d18 <_strtod_r+0x58>
   d8d0c:	e19a      	b.n	d9044 <_strtod_r+0x384>
   d8d0e:	3301      	adds	r3, #1
   d8d10:	9317      	str	r3, [sp, #92]	; 0x5c
   d8d12:	e7e2      	b.n	d8cda <_strtod_r+0x1a>
   d8d14:	2300      	movs	r3, #0
   d8d16:	930c      	str	r3, [sp, #48]	; 0x30
   d8d18:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d8d1a:	782b      	ldrb	r3, [r5, #0]
   d8d1c:	2b30      	cmp	r3, #48	; 0x30
   d8d1e:	d15c      	bne.n	d8dda <_strtod_r+0x11a>
   d8d20:	786b      	ldrb	r3, [r5, #1]
   d8d22:	2b58      	cmp	r3, #88	; 0x58
   d8d24:	d001      	beq.n	d8d2a <_strtod_r+0x6a>
   d8d26:	2b78      	cmp	r3, #120	; 0x78
   d8d28:	d14c      	bne.n	d8dc4 <_strtod_r+0x104>
   d8d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8d2c:	9301      	str	r3, [sp, #4]
   d8d2e:	ab18      	add	r3, sp, #96	; 0x60
   d8d30:	9300      	str	r3, [sp, #0]
   d8d32:	4aa9      	ldr	r2, [pc, #676]	; (d8fd8 <_strtod_r+0x318>)
   d8d34:	9802      	ldr	r0, [sp, #8]
   d8d36:	ab19      	add	r3, sp, #100	; 0x64
   d8d38:	a917      	add	r1, sp, #92	; 0x5c
   d8d3a:	f001 f95c 	bl	d9ff6 <__gethex>
   d8d3e:	f010 0607 	ands.w	r6, r0, #7
   d8d42:	4604      	mov	r4, r0
   d8d44:	f000 8587 	beq.w	d9856 <_strtod_r+0xb96>
   d8d48:	2e06      	cmp	r6, #6
   d8d4a:	d105      	bne.n	d8d58 <_strtod_r+0x98>
   d8d4c:	3501      	adds	r5, #1
   d8d4e:	2300      	movs	r3, #0
   d8d50:	9517      	str	r5, [sp, #92]	; 0x5c
   d8d52:	930c      	str	r3, [sp, #48]	; 0x30
   d8d54:	f000 bd7f 	b.w	d9856 <_strtod_r+0xb96>
   d8d58:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8d5a:	b13a      	cbz	r2, d8d6c <_strtod_r+0xac>
   d8d5c:	2135      	movs	r1, #53	; 0x35
   d8d5e:	a81a      	add	r0, sp, #104	; 0x68
   d8d60:	f002 f8af 	bl	daec2 <__copybits>
   d8d64:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8d66:	9802      	ldr	r0, [sp, #8]
   d8d68:	f001 fd2d 	bl	da7c6 <_Bfree>
   d8d6c:	2e06      	cmp	r6, #6
   d8d6e:	d822      	bhi.n	d8db6 <_strtod_r+0xf6>
   d8d70:	e8df f006 	tbb	[pc, r6]
   d8d74:	18080d04 	.word	0x18080d04
   d8d78:	0d1d      	.short	0x0d1d
   d8d7a:	04          	.byte	0x04
   d8d7b:	00          	.byte	0x00
   d8d7c:	f04f 0b00 	mov.w	fp, #0
   d8d80:	46da      	mov	sl, fp
   d8d82:	e018      	b.n	d8db6 <_strtod_r+0xf6>
   d8d84:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8d88:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d8d8c:	e013      	b.n	d8db6 <_strtod_r+0xf6>
   d8d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8d90:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8d92:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8d96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8d9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8d9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8da2:	e008      	b.n	d8db6 <_strtod_r+0xf6>
   d8da4:	f8df b234 	ldr.w	fp, [pc, #564]	; d8fdc <_strtod_r+0x31c>
   d8da8:	f04f 0a00 	mov.w	sl, #0
   d8dac:	e003      	b.n	d8db6 <_strtod_r+0xf6>
   d8dae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8db2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8db6:	0721      	lsls	r1, r4, #28
   d8db8:	f140 854d 	bpl.w	d9856 <_strtod_r+0xb96>
   d8dbc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8dc0:	f000 bd49 	b.w	d9856 <_strtod_r+0xb96>
   d8dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8dc6:	1c5a      	adds	r2, r3, #1
   d8dc8:	9217      	str	r2, [sp, #92]	; 0x5c
   d8dca:	785b      	ldrb	r3, [r3, #1]
   d8dcc:	2b30      	cmp	r3, #48	; 0x30
   d8dce:	d0f9      	beq.n	d8dc4 <_strtod_r+0x104>
   d8dd0:	2b00      	cmp	r3, #0
   d8dd2:	f000 8540 	beq.w	d9856 <_strtod_r+0xb96>
   d8dd6:	2301      	movs	r3, #1
   d8dd8:	e000      	b.n	d8ddc <_strtod_r+0x11c>
   d8dda:	2300      	movs	r3, #0
   d8ddc:	f04f 0800 	mov.w	r8, #0
   d8de0:	9306      	str	r3, [sp, #24]
   d8de2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8de4:	9307      	str	r3, [sp, #28]
   d8de6:	f8cd 8014 	str.w	r8, [sp, #20]
   d8dea:	f8cd 8010 	str.w	r8, [sp, #16]
   d8dee:	220a      	movs	r2, #10
   d8df0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d8df2:	782e      	ldrb	r6, [r5, #0]
   d8df4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8df8:	b2d9      	uxtb	r1, r3
   d8dfa:	2909      	cmp	r1, #9
   d8dfc:	d80e      	bhi.n	d8e1c <_strtod_r+0x15c>
   d8dfe:	9904      	ldr	r1, [sp, #16]
   d8e00:	2908      	cmp	r1, #8
   d8e02:	bfdd      	ittte	le
   d8e04:	9905      	ldrle	r1, [sp, #20]
   d8e06:	fb02 3301 	mlale	r3, r2, r1, r3
   d8e0a:	9305      	strle	r3, [sp, #20]
   d8e0c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d8e10:	9b04      	ldr	r3, [sp, #16]
   d8e12:	3501      	adds	r5, #1
   d8e14:	3301      	adds	r3, #1
   d8e16:	9304      	str	r3, [sp, #16]
   d8e18:	9517      	str	r5, [sp, #92]	; 0x5c
   d8e1a:	e7e9      	b.n	d8df0 <_strtod_r+0x130>
   d8e1c:	9802      	ldr	r0, [sp, #8]
   d8e1e:	f7ff fe93 	bl	d8b48 <_localeconv_r>
   d8e22:	6807      	ldr	r7, [r0, #0]
   d8e24:	9802      	ldr	r0, [sp, #8]
   d8e26:	f7ff fe8f 	bl	d8b48 <_localeconv_r>
   d8e2a:	6800      	ldr	r0, [r0, #0]
   d8e2c:	f7ff fef9 	bl	d8c22 <strlen>
   d8e30:	4639      	mov	r1, r7
   d8e32:	4602      	mov	r2, r0
   d8e34:	4628      	mov	r0, r5
   d8e36:	f7ff fefc 	bl	d8c32 <strncmp>
   d8e3a:	4607      	mov	r7, r0
   d8e3c:	b128      	cbz	r0, d8e4a <_strtod_r+0x18a>
   d8e3e:	2000      	movs	r0, #0
   d8e40:	4633      	mov	r3, r6
   d8e42:	9d04      	ldr	r5, [sp, #16]
   d8e44:	4602      	mov	r2, r0
   d8e46:	4601      	mov	r1, r0
   d8e48:	e057      	b.n	d8efa <_strtod_r+0x23a>
   d8e4a:	9802      	ldr	r0, [sp, #8]
   d8e4c:	f7ff fe7c 	bl	d8b48 <_localeconv_r>
   d8e50:	6800      	ldr	r0, [r0, #0]
   d8e52:	f7ff fee6 	bl	d8c22 <strlen>
   d8e56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8e58:	181a      	adds	r2, r3, r0
   d8e5a:	9217      	str	r2, [sp, #92]	; 0x5c
   d8e5c:	9a04      	ldr	r2, [sp, #16]
   d8e5e:	5c1b      	ldrb	r3, [r3, r0]
   d8e60:	2a00      	cmp	r2, #0
   d8e62:	d142      	bne.n	d8eea <_strtod_r+0x22a>
   d8e64:	4610      	mov	r0, r2
   d8e66:	2b30      	cmp	r3, #48	; 0x30
   d8e68:	d105      	bne.n	d8e76 <_strtod_r+0x1b6>
   d8e6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8e6c:	1c5a      	adds	r2, r3, #1
   d8e6e:	9217      	str	r2, [sp, #92]	; 0x5c
   d8e70:	3001      	adds	r0, #1
   d8e72:	785b      	ldrb	r3, [r3, #1]
   d8e74:	e7f7      	b.n	d8e66 <_strtod_r+0x1a6>
   d8e76:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8e7a:	2a08      	cmp	r2, #8
   d8e7c:	d843      	bhi.n	d8f06 <_strtod_r+0x246>
   d8e7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d8e80:	9207      	str	r2, [sp, #28]
   d8e82:	4602      	mov	r2, r0
   d8e84:	2000      	movs	r0, #0
   d8e86:	4605      	mov	r5, r0
   d8e88:	3b30      	subs	r3, #48	; 0x30
   d8e8a:	f100 0101 	add.w	r1, r0, #1
   d8e8e:	d026      	beq.n	d8ede <_strtod_r+0x21e>
   d8e90:	440a      	add	r2, r1
   d8e92:	eb05 0c00 	add.w	ip, r5, r0
   d8e96:	4629      	mov	r1, r5
   d8e98:	260a      	movs	r6, #10
   d8e9a:	4561      	cmp	r1, ip
   d8e9c:	d00e      	beq.n	d8ebc <_strtod_r+0x1fc>
   d8e9e:	3101      	adds	r1, #1
   d8ea0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d8ea4:	f1be 0f08 	cmp.w	lr, #8
   d8ea8:	dc03      	bgt.n	d8eb2 <_strtod_r+0x1f2>
   d8eaa:	9f05      	ldr	r7, [sp, #20]
   d8eac:	4377      	muls	r7, r6
   d8eae:	9705      	str	r7, [sp, #20]
   d8eb0:	e7f3      	b.n	d8e9a <_strtod_r+0x1da>
   d8eb2:	2910      	cmp	r1, #16
   d8eb4:	bfd8      	it	le
   d8eb6:	fb06 f808 	mulle.w	r8, r6, r8
   d8eba:	e7ee      	b.n	d8e9a <_strtod_r+0x1da>
   d8ebc:	4428      	add	r0, r5
   d8ebe:	2808      	cmp	r0, #8
   d8ec0:	f100 0501 	add.w	r5, r0, #1
   d8ec4:	dc05      	bgt.n	d8ed2 <_strtod_r+0x212>
   d8ec6:	9805      	ldr	r0, [sp, #20]
   d8ec8:	210a      	movs	r1, #10
   d8eca:	fb01 3300 	mla	r3, r1, r0, r3
   d8ece:	9305      	str	r3, [sp, #20]
   d8ed0:	e004      	b.n	d8edc <_strtod_r+0x21c>
   d8ed2:	2d10      	cmp	r5, #16
   d8ed4:	bfdc      	itt	le
   d8ed6:	210a      	movle	r1, #10
   d8ed8:	fb01 3808 	mlale	r8, r1, r8, r3
   d8edc:	2100      	movs	r1, #0
   d8ede:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8ee0:	1c58      	adds	r0, r3, #1
   d8ee2:	9017      	str	r0, [sp, #92]	; 0x5c
   d8ee4:	785b      	ldrb	r3, [r3, #1]
   d8ee6:	4608      	mov	r0, r1
   d8ee8:	e002      	b.n	d8ef0 <_strtod_r+0x230>
   d8eea:	9d04      	ldr	r5, [sp, #16]
   d8eec:	4638      	mov	r0, r7
   d8eee:	463a      	mov	r2, r7
   d8ef0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8ef4:	2909      	cmp	r1, #9
   d8ef6:	d9c7      	bls.n	d8e88 <_strtod_r+0x1c8>
   d8ef8:	2101      	movs	r1, #1
   d8efa:	2b65      	cmp	r3, #101	; 0x65
   d8efc:	d001      	beq.n	d8f02 <_strtod_r+0x242>
   d8efe:	2b45      	cmp	r3, #69	; 0x45
   d8f00:	d151      	bne.n	d8fa6 <_strtod_r+0x2e6>
   d8f02:	b96d      	cbnz	r5, d8f20 <_strtod_r+0x260>
   d8f04:	e004      	b.n	d8f10 <_strtod_r+0x250>
   d8f06:	2b65      	cmp	r3, #101	; 0x65
   d8f08:	f040 84b3 	bne.w	d9872 <_strtod_r+0xbb2>
   d8f0c:	2200      	movs	r2, #0
   d8f0e:	2101      	movs	r1, #1
   d8f10:	b928      	cbnz	r0, d8f1e <_strtod_r+0x25e>
   d8f12:	9b06      	ldr	r3, [sp, #24]
   d8f14:	2b00      	cmp	r3, #0
   d8f16:	f000 8095 	beq.w	d9044 <_strtod_r+0x384>
   d8f1a:	4605      	mov	r5, r0
   d8f1c:	e000      	b.n	d8f20 <_strtod_r+0x260>
   d8f1e:	2500      	movs	r5, #0
   d8f20:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d8f22:	1c63      	adds	r3, r4, #1
   d8f24:	9317      	str	r3, [sp, #92]	; 0x5c
   d8f26:	7863      	ldrb	r3, [r4, #1]
   d8f28:	2b2b      	cmp	r3, #43	; 0x2b
   d8f2a:	d006      	beq.n	d8f3a <_strtod_r+0x27a>
   d8f2c:	2b2d      	cmp	r3, #45	; 0x2d
   d8f2e:	d002      	beq.n	d8f36 <_strtod_r+0x276>
   d8f30:	2600      	movs	r6, #0
   d8f32:	9603      	str	r6, [sp, #12]
   d8f34:	e006      	b.n	d8f44 <_strtod_r+0x284>
   d8f36:	2301      	movs	r3, #1
   d8f38:	e000      	b.n	d8f3c <_strtod_r+0x27c>
   d8f3a:	2300      	movs	r3, #0
   d8f3c:	9303      	str	r3, [sp, #12]
   d8f3e:	1ca3      	adds	r3, r4, #2
   d8f40:	9317      	str	r3, [sp, #92]	; 0x5c
   d8f42:	78a3      	ldrb	r3, [r4, #2]
   d8f44:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8f48:	2e09      	cmp	r6, #9
   d8f4a:	d82b      	bhi.n	d8fa4 <_strtod_r+0x2e4>
   d8f4c:	2b30      	cmp	r3, #48	; 0x30
   d8f4e:	d104      	bne.n	d8f5a <_strtod_r+0x29a>
   d8f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8f52:	1c5e      	adds	r6, r3, #1
   d8f54:	9617      	str	r6, [sp, #92]	; 0x5c
   d8f56:	785b      	ldrb	r3, [r3, #1]
   d8f58:	e7f8      	b.n	d8f4c <_strtod_r+0x28c>
   d8f5a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d8f5e:	2e08      	cmp	r6, #8
   d8f60:	d821      	bhi.n	d8fa6 <_strtod_r+0x2e6>
   d8f62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8f66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8f68:	f04f 0c0a 	mov.w	ip, #10
   d8f6c:	461f      	mov	r7, r3
   d8f6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8f70:	1c5e      	adds	r6, r3, #1
   d8f72:	9617      	str	r6, [sp, #92]	; 0x5c
   d8f74:	785b      	ldrb	r3, [r3, #1]
   d8f76:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d8f7a:	f1b9 0f09 	cmp.w	r9, #9
   d8f7e:	d804      	bhi.n	d8f8a <_strtod_r+0x2ca>
   d8f80:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d8f84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8f88:	e7f1      	b.n	d8f6e <_strtod_r+0x2ae>
   d8f8a:	1bf6      	subs	r6, r6, r7
   d8f8c:	2e08      	cmp	r6, #8
   d8f8e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8f92:	dc02      	bgt.n	d8f9a <_strtod_r+0x2da>
   d8f94:	45f1      	cmp	r9, lr
   d8f96:	bfa8      	it	ge
   d8f98:	46f1      	movge	r9, lr
   d8f9a:	9e03      	ldr	r6, [sp, #12]
   d8f9c:	b12e      	cbz	r6, d8faa <_strtod_r+0x2ea>
   d8f9e:	f1c9 0900 	rsb	r9, r9, #0
   d8fa2:	e002      	b.n	d8faa <_strtod_r+0x2ea>
   d8fa4:	9417      	str	r4, [sp, #92]	; 0x5c
   d8fa6:	f04f 0900 	mov.w	r9, #0
   d8faa:	2d00      	cmp	r5, #0
   d8fac:	d153      	bne.n	d9056 <_strtod_r+0x396>
   d8fae:	2800      	cmp	r0, #0
   d8fb0:	f040 8451 	bne.w	d9856 <_strtod_r+0xb96>
   d8fb4:	9a06      	ldr	r2, [sp, #24]
   d8fb6:	2a00      	cmp	r2, #0
   d8fb8:	f040 844d 	bne.w	d9856 <_strtod_r+0xb96>
   d8fbc:	2900      	cmp	r1, #0
   d8fbe:	d141      	bne.n	d9044 <_strtod_r+0x384>
   d8fc0:	2b4e      	cmp	r3, #78	; 0x4e
   d8fc2:	d020      	beq.n	d9006 <_strtod_r+0x346>
   d8fc4:	dc02      	bgt.n	d8fcc <_strtod_r+0x30c>
   d8fc6:	2b49      	cmp	r3, #73	; 0x49
   d8fc8:	d00a      	beq.n	d8fe0 <_strtod_r+0x320>
   d8fca:	e03b      	b.n	d9044 <_strtod_r+0x384>
   d8fcc:	2b69      	cmp	r3, #105	; 0x69
   d8fce:	d007      	beq.n	d8fe0 <_strtod_r+0x320>
   d8fd0:	2b6e      	cmp	r3, #110	; 0x6e
   d8fd2:	d018      	beq.n	d9006 <_strtod_r+0x346>
   d8fd4:	e036      	b.n	d9044 <_strtod_r+0x384>
   d8fd6:	bf00      	nop
   d8fd8:	000db724 	.word	0x000db724
   d8fdc:	7ff00000 	.word	0x7ff00000
   d8fe0:	49a8      	ldr	r1, [pc, #672]	; (d9284 <_strtod_r+0x5c4>)
   d8fe2:	a817      	add	r0, sp, #92	; 0x5c
   d8fe4:	f001 fa38 	bl	da458 <__match>
   d8fe8:	b360      	cbz	r0, d9044 <_strtod_r+0x384>
   d8fea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8fec:	49a6      	ldr	r1, [pc, #664]	; (d9288 <_strtod_r+0x5c8>)
   d8fee:	3b01      	subs	r3, #1
   d8ff0:	a817      	add	r0, sp, #92	; 0x5c
   d8ff2:	9317      	str	r3, [sp, #92]	; 0x5c
   d8ff4:	f001 fa30 	bl	da458 <__match>
   d8ff8:	b910      	cbnz	r0, d9000 <_strtod_r+0x340>
   d8ffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8ffc:	3301      	adds	r3, #1
   d8ffe:	9317      	str	r3, [sp, #92]	; 0x5c
   d9000:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d92a4 <_strtod_r+0x5e4>
   d9004:	e01a      	b.n	d903c <_strtod_r+0x37c>
   d9006:	49a1      	ldr	r1, [pc, #644]	; (d928c <_strtod_r+0x5cc>)
   d9008:	a817      	add	r0, sp, #92	; 0x5c
   d900a:	f001 fa25 	bl	da458 <__match>
   d900e:	b1c8      	cbz	r0, d9044 <_strtod_r+0x384>
   d9010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9012:	781b      	ldrb	r3, [r3, #0]
   d9014:	2b28      	cmp	r3, #40	; 0x28
   d9016:	d10f      	bne.n	d9038 <_strtod_r+0x378>
   d9018:	aa1a      	add	r2, sp, #104	; 0x68
   d901a:	499d      	ldr	r1, [pc, #628]	; (d9290 <_strtod_r+0x5d0>)
   d901c:	a817      	add	r0, sp, #92	; 0x5c
   d901e:	f001 fa2e 	bl	da47e <__hexnan>
   d9022:	2805      	cmp	r0, #5
   d9024:	d108      	bne.n	d9038 <_strtod_r+0x378>
   d9026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9028:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d902c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9030:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9034:	f000 bc0f 	b.w	d9856 <_strtod_r+0xb96>
   d9038:	f8df b26c 	ldr.w	fp, [pc, #620]	; d92a8 <_strtod_r+0x5e8>
   d903c:	f04f 0a00 	mov.w	sl, #0
   d9040:	f000 bc09 	b.w	d9856 <_strtod_r+0xb96>
   d9044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9046:	9417      	str	r4, [sp, #92]	; 0x5c
   d9048:	2b00      	cmp	r3, #0
   d904a:	f000 840f 	beq.w	d986c <_strtod_r+0xbac>
   d904e:	2300      	movs	r3, #0
   d9050:	930c      	str	r3, [sp, #48]	; 0x30
   d9052:	f000 bc02 	b.w	d985a <_strtod_r+0xb9a>
   d9056:	9b04      	ldr	r3, [sp, #16]
   d9058:	9805      	ldr	r0, [sp, #20]
   d905a:	2b00      	cmp	r3, #0
   d905c:	bf08      	it	eq
   d905e:	462b      	moveq	r3, r5
   d9060:	2d10      	cmp	r5, #16
   d9062:	462c      	mov	r4, r5
   d9064:	ebc2 0909 	rsb	r9, r2, r9
   d9068:	bfa8      	it	ge
   d906a:	2410      	movge	r4, #16
   d906c:	9304      	str	r3, [sp, #16]
   d906e:	f7fe fef1 	bl	d7e54 <__aeabi_ui2d>
   d9072:	2c09      	cmp	r4, #9
   d9074:	4682      	mov	sl, r0
   d9076:	468b      	mov	fp, r1
   d9078:	dd13      	ble.n	d90a2 <_strtod_r+0x3e2>
   d907a:	4b86      	ldr	r3, [pc, #536]	; (d9294 <_strtod_r+0x5d4>)
   d907c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d9080:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9084:	f7fe ff5c 	bl	d7f40 <__aeabi_dmul>
   d9088:	4606      	mov	r6, r0
   d908a:	4640      	mov	r0, r8
   d908c:	460f      	mov	r7, r1
   d908e:	f7fe fee1 	bl	d7e54 <__aeabi_ui2d>
   d9092:	4602      	mov	r2, r0
   d9094:	460b      	mov	r3, r1
   d9096:	4630      	mov	r0, r6
   d9098:	4639      	mov	r1, r7
   d909a:	f7fe fd9f 	bl	d7bdc <__adddf3>
   d909e:	4682      	mov	sl, r0
   d90a0:	468b      	mov	fp, r1
   d90a2:	2d0f      	cmp	r5, #15
   d90a4:	dc36      	bgt.n	d9114 <_strtod_r+0x454>
   d90a6:	f1b9 0f00 	cmp.w	r9, #0
   d90aa:	f000 83d4 	beq.w	d9856 <_strtod_r+0xb96>
   d90ae:	dd24      	ble.n	d90fa <_strtod_r+0x43a>
   d90b0:	f1b9 0f16 	cmp.w	r9, #22
   d90b4:	dc07      	bgt.n	d90c6 <_strtod_r+0x406>
   d90b6:	4d77      	ldr	r5, [pc, #476]	; (d9294 <_strtod_r+0x5d4>)
   d90b8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d90bc:	4652      	mov	r2, sl
   d90be:	465b      	mov	r3, fp
   d90c0:	e9d9 0100 	ldrd	r0, r1, [r9]
   d90c4:	e014      	b.n	d90f0 <_strtod_r+0x430>
   d90c6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d90ca:	4599      	cmp	r9, r3
   d90cc:	dc22      	bgt.n	d9114 <_strtod_r+0x454>
   d90ce:	4c71      	ldr	r4, [pc, #452]	; (d9294 <_strtod_r+0x5d4>)
   d90d0:	f1c5 050f 	rsb	r5, r5, #15
   d90d4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d90d8:	ebc5 0509 	rsb	r5, r5, r9
   d90dc:	4652      	mov	r2, sl
   d90de:	465b      	mov	r3, fp
   d90e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d90e4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d90e8:	f7fe ff2a 	bl	d7f40 <__aeabi_dmul>
   d90ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   d90f0:	f7fe ff26 	bl	d7f40 <__aeabi_dmul>
   d90f4:	4682      	mov	sl, r0
   d90f6:	468b      	mov	fp, r1
   d90f8:	e3ad      	b.n	d9856 <_strtod_r+0xb96>
   d90fa:	f119 0f16 	cmn.w	r9, #22
   d90fe:	db09      	blt.n	d9114 <_strtod_r+0x454>
   d9100:	4d64      	ldr	r5, [pc, #400]	; (d9294 <_strtod_r+0x5d4>)
   d9102:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d9106:	e9d9 2300 	ldrd	r2, r3, [r9]
   d910a:	4650      	mov	r0, sl
   d910c:	4659      	mov	r1, fp
   d910e:	f7ff f841 	bl	d8194 <__aeabi_ddiv>
   d9112:	e7ef      	b.n	d90f4 <_strtod_r+0x434>
   d9114:	1b2c      	subs	r4, r5, r4
   d9116:	444c      	add	r4, r9
   d9118:	2c00      	cmp	r4, #0
   d911a:	dd57      	ble.n	d91cc <_strtod_r+0x50c>
   d911c:	f014 010f 	ands.w	r1, r4, #15
   d9120:	d00a      	beq.n	d9138 <_strtod_r+0x478>
   d9122:	4b5c      	ldr	r3, [pc, #368]	; (d9294 <_strtod_r+0x5d4>)
   d9124:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d9128:	4652      	mov	r2, sl
   d912a:	465b      	mov	r3, fp
   d912c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9130:	f7fe ff06 	bl	d7f40 <__aeabi_dmul>
   d9134:	4682      	mov	sl, r0
   d9136:	468b      	mov	fp, r1
   d9138:	f034 040f 	bics.w	r4, r4, #15
   d913c:	f000 80b8 	beq.w	d92b0 <_strtod_r+0x5f0>
   d9140:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d9144:	dd0b      	ble.n	d915e <_strtod_r+0x49e>
   d9146:	2400      	movs	r4, #0
   d9148:	4625      	mov	r5, r4
   d914a:	9405      	str	r4, [sp, #20]
   d914c:	9404      	str	r4, [sp, #16]
   d914e:	9a02      	ldr	r2, [sp, #8]
   d9150:	f8df b150 	ldr.w	fp, [pc, #336]	; d92a4 <_strtod_r+0x5e4>
   d9154:	2322      	movs	r3, #34	; 0x22
   d9156:	6013      	str	r3, [r2, #0]
   d9158:	f04f 0a00 	mov.w	sl, #0
   d915c:	e187      	b.n	d946e <_strtod_r+0x7ae>
   d915e:	4e4e      	ldr	r6, [pc, #312]	; (d9298 <_strtod_r+0x5d8>)
   d9160:	2300      	movs	r3, #0
   d9162:	1124      	asrs	r4, r4, #4
   d9164:	4650      	mov	r0, sl
   d9166:	4659      	mov	r1, fp
   d9168:	4698      	mov	r8, r3
   d916a:	4637      	mov	r7, r6
   d916c:	2c01      	cmp	r4, #1
   d916e:	dd0b      	ble.n	d9188 <_strtod_r+0x4c8>
   d9170:	07e2      	lsls	r2, r4, #31
   d9172:	d504      	bpl.n	d917e <_strtod_r+0x4be>
   d9174:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9178:	f7fe fee2 	bl	d7f40 <__aeabi_dmul>
   d917c:	2301      	movs	r3, #1
   d917e:	f108 0801 	add.w	r8, r8, #1
   d9182:	1064      	asrs	r4, r4, #1
   d9184:	3608      	adds	r6, #8
   d9186:	e7f1      	b.n	d916c <_strtod_r+0x4ac>
   d9188:	b10b      	cbz	r3, d918e <_strtod_r+0x4ce>
   d918a:	4682      	mov	sl, r0
   d918c:	468b      	mov	fp, r1
   d918e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9192:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d9196:	4652      	mov	r2, sl
   d9198:	465b      	mov	r3, fp
   d919a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d919e:	f7fe fecf 	bl	d7f40 <__aeabi_dmul>
   d91a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d91a6:	468b      	mov	fp, r1
   d91a8:	460a      	mov	r2, r1
   d91aa:	0d1b      	lsrs	r3, r3, #20
   d91ac:	493b      	ldr	r1, [pc, #236]	; (d929c <_strtod_r+0x5dc>)
   d91ae:	051b      	lsls	r3, r3, #20
   d91b0:	428b      	cmp	r3, r1
   d91b2:	4682      	mov	sl, r0
   d91b4:	d8c7      	bhi.n	d9146 <_strtod_r+0x486>
   d91b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d91ba:	428b      	cmp	r3, r1
   d91bc:	bf86      	itte	hi
   d91be:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d92ac <_strtod_r+0x5ec>
   d91c2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d91c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d91ca:	e071      	b.n	d92b0 <_strtod_r+0x5f0>
   d91cc:	d070      	beq.n	d92b0 <_strtod_r+0x5f0>
   d91ce:	4264      	negs	r4, r4
   d91d0:	f014 020f 	ands.w	r2, r4, #15
   d91d4:	d00a      	beq.n	d91ec <_strtod_r+0x52c>
   d91d6:	4b2f      	ldr	r3, [pc, #188]	; (d9294 <_strtod_r+0x5d4>)
   d91d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d91dc:	4650      	mov	r0, sl
   d91de:	4659      	mov	r1, fp
   d91e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91e4:	f7fe ffd6 	bl	d8194 <__aeabi_ddiv>
   d91e8:	4682      	mov	sl, r0
   d91ea:	468b      	mov	fp, r1
   d91ec:	1124      	asrs	r4, r4, #4
   d91ee:	d05f      	beq.n	d92b0 <_strtod_r+0x5f0>
   d91f0:	2c1f      	cmp	r4, #31
   d91f2:	dd04      	ble.n	d91fe <_strtod_r+0x53e>
   d91f4:	2400      	movs	r4, #0
   d91f6:	4625      	mov	r5, r4
   d91f8:	9405      	str	r4, [sp, #20]
   d91fa:	9404      	str	r4, [sp, #16]
   d91fc:	e130      	b.n	d9460 <_strtod_r+0x7a0>
   d91fe:	f014 0f10 	tst.w	r4, #16
   d9202:	bf0c      	ite	eq
   d9204:	2300      	moveq	r3, #0
   d9206:	236a      	movne	r3, #106	; 0x6a
   d9208:	4e25      	ldr	r6, [pc, #148]	; (d92a0 <_strtod_r+0x5e0>)
   d920a:	9303      	str	r3, [sp, #12]
   d920c:	4650      	mov	r0, sl
   d920e:	4659      	mov	r1, fp
   d9210:	2300      	movs	r3, #0
   d9212:	2c00      	cmp	r4, #0
   d9214:	dd09      	ble.n	d922a <_strtod_r+0x56a>
   d9216:	07e2      	lsls	r2, r4, #31
   d9218:	d504      	bpl.n	d9224 <_strtod_r+0x564>
   d921a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d921e:	f7fe fe8f 	bl	d7f40 <__aeabi_dmul>
   d9222:	2301      	movs	r3, #1
   d9224:	1064      	asrs	r4, r4, #1
   d9226:	3608      	adds	r6, #8
   d9228:	e7f3      	b.n	d9212 <_strtod_r+0x552>
   d922a:	b10b      	cbz	r3, d9230 <_strtod_r+0x570>
   d922c:	4682      	mov	sl, r0
   d922e:	468b      	mov	fp, r1
   d9230:	9b03      	ldr	r3, [sp, #12]
   d9232:	b1eb      	cbz	r3, d9270 <_strtod_r+0x5b0>
   d9234:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9238:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d923c:	2b00      	cmp	r3, #0
   d923e:	4659      	mov	r1, fp
   d9240:	dd16      	ble.n	d9270 <_strtod_r+0x5b0>
   d9242:	2b1f      	cmp	r3, #31
   d9244:	dd0e      	ble.n	d9264 <_strtod_r+0x5a4>
   d9246:	2b34      	cmp	r3, #52	; 0x34
   d9248:	bfde      	ittt	le
   d924a:	3b20      	suble	r3, #32
   d924c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9250:	fa02 f303 	lslle.w	r3, r2, r3
   d9254:	f04f 0a00 	mov.w	sl, #0
   d9258:	bfcc      	ite	gt
   d925a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d925e:	ea03 0b01 	andle.w	fp, r3, r1
   d9262:	e005      	b.n	d9270 <_strtod_r+0x5b0>
   d9264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9268:	fa02 f303 	lsl.w	r3, r2, r3
   d926c:	ea03 0a0a 	and.w	sl, r3, sl
   d9270:	2200      	movs	r2, #0
   d9272:	2300      	movs	r3, #0
   d9274:	4650      	mov	r0, sl
   d9276:	4659      	mov	r1, fp
   d9278:	f7ff f8ca 	bl	d8410 <__aeabi_dcmpeq>
   d927c:	2800      	cmp	r0, #0
   d927e:	d1b9      	bne.n	d91f4 <_strtod_r+0x534>
   d9280:	e018      	b.n	d92b4 <_strtod_r+0x5f4>
   d9282:	bf00      	nop
   d9284:	000db74c 	.word	0x000db74c
   d9288:	000db74f 	.word	0x000db74f
   d928c:	000db755 	.word	0x000db755
   d9290:	000db738 	.word	0x000db738
   d9294:	000db7c0 	.word	0x000db7c0
   d9298:	000db888 	.word	0x000db888
   d929c:	7ca00000 	.word	0x7ca00000
   d92a0:	000db758 	.word	0x000db758
   d92a4:	7ff00000 	.word	0x7ff00000
   d92a8:	fff80000 	.word	0xfff80000
   d92ac:	7fefffff 	.word	0x7fefffff
   d92b0:	2300      	movs	r3, #0
   d92b2:	9303      	str	r3, [sp, #12]
   d92b4:	9b05      	ldr	r3, [sp, #20]
   d92b6:	9300      	str	r3, [sp, #0]
   d92b8:	9a04      	ldr	r2, [sp, #16]
   d92ba:	9907      	ldr	r1, [sp, #28]
   d92bc:	9802      	ldr	r0, [sp, #8]
   d92be:	462b      	mov	r3, r5
   d92c0:	f001 fad3 	bl	da86a <__s2b>
   d92c4:	9005      	str	r0, [sp, #20]
   d92c6:	2800      	cmp	r0, #0
   d92c8:	f43f af3d 	beq.w	d9146 <_strtod_r+0x486>
   d92cc:	f1b9 0f00 	cmp.w	r9, #0
   d92d0:	f1c9 0300 	rsb	r3, r9, #0
   d92d4:	bfa8      	it	ge
   d92d6:	2300      	movge	r3, #0
   d92d8:	930d      	str	r3, [sp, #52]	; 0x34
   d92da:	2400      	movs	r4, #0
   d92dc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d92e0:	9312      	str	r3, [sp, #72]	; 0x48
   d92e2:	4625      	mov	r5, r4
   d92e4:	9b05      	ldr	r3, [sp, #20]
   d92e6:	9802      	ldr	r0, [sp, #8]
   d92e8:	6859      	ldr	r1, [r3, #4]
   d92ea:	f001 fa37 	bl	da75c <_Balloc>
   d92ee:	9004      	str	r0, [sp, #16]
   d92f0:	2800      	cmp	r0, #0
   d92f2:	f43f af2c 	beq.w	d914e <_strtod_r+0x48e>
   d92f6:	9b05      	ldr	r3, [sp, #20]
   d92f8:	691a      	ldr	r2, [r3, #16]
   d92fa:	3202      	adds	r2, #2
   d92fc:	f103 010c 	add.w	r1, r3, #12
   d9300:	0092      	lsls	r2, r2, #2
   d9302:	300c      	adds	r0, #12
   d9304:	f7ff fc24 	bl	d8b50 <memcpy>
   d9308:	aa1a      	add	r2, sp, #104	; 0x68
   d930a:	a919      	add	r1, sp, #100	; 0x64
   d930c:	ec4b ab10 	vmov	d0, sl, fp
   d9310:	9802      	ldr	r0, [sp, #8]
   d9312:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9316:	f001 fd5c 	bl	dadd2 <__d2b>
   d931a:	9018      	str	r0, [sp, #96]	; 0x60
   d931c:	2800      	cmp	r0, #0
   d931e:	f43f af16 	beq.w	d914e <_strtod_r+0x48e>
   d9322:	2101      	movs	r1, #1
   d9324:	9802      	ldr	r0, [sp, #8]
   d9326:	f001 fb2b 	bl	da980 <__i2b>
   d932a:	4605      	mov	r5, r0
   d932c:	2800      	cmp	r0, #0
   d932e:	f43f af0e 	beq.w	d914e <_strtod_r+0x48e>
   d9332:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9334:	9903      	ldr	r1, [sp, #12]
   d9336:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d9338:	2b00      	cmp	r3, #0
   d933a:	bfad      	iteet	ge
   d933c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d933e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d9340:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d9344:	eb02 0803 	addge.w	r8, r2, r3
   d9348:	bfb8      	it	lt
   d934a:	1ad2      	sublt	r2, r2, r3
   d934c:	eba3 0301 	sub.w	r3, r3, r1
   d9350:	4433      	add	r3, r6
   d9352:	49b5      	ldr	r1, [pc, #724]	; (d9628 <_strtod_r+0x968>)
   d9354:	bfa8      	it	ge
   d9356:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d9358:	3b01      	subs	r3, #1
   d935a:	428b      	cmp	r3, r1
   d935c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d9360:	f280 808a 	bge.w	d9478 <_strtod_r+0x7b8>
   d9364:	1ac9      	subs	r1, r1, r3
   d9366:	291f      	cmp	r1, #31
   d9368:	bfc8      	it	gt
   d936a:	4fb0      	ldrgt	r7, [pc, #704]	; (d962c <_strtod_r+0x96c>)
   d936c:	f04f 0901 	mov.w	r9, #1
   d9370:	bfd4      	ite	le
   d9372:	fa09 f301 	lslle.w	r3, r9, r1
   d9376:	1aff      	subgt	r7, r7, r3
   d9378:	eba6 0601 	sub.w	r6, r6, r1
   d937c:	bfd9      	ittee	le
   d937e:	9306      	strle	r3, [sp, #24]
   d9380:	2700      	movle	r7, #0
   d9382:	fa09 f707 	lslgt.w	r7, r9, r7
   d9386:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d938a:	eb08 0906 	add.w	r9, r8, r6
   d938e:	9b03      	ldr	r3, [sp, #12]
   d9390:	45c8      	cmp	r8, r9
   d9392:	4416      	add	r6, r2
   d9394:	441e      	add	r6, r3
   d9396:	4643      	mov	r3, r8
   d9398:	bfa8      	it	ge
   d939a:	464b      	movge	r3, r9
   d939c:	42b3      	cmp	r3, r6
   d939e:	bfa8      	it	ge
   d93a0:	4633      	movge	r3, r6
   d93a2:	2b00      	cmp	r3, #0
   d93a4:	bfc2      	ittt	gt
   d93a6:	ebc3 0909 	rsbgt	r9, r3, r9
   d93aa:	1af6      	subgt	r6, r6, r3
   d93ac:	ebc3 0808 	rsbgt	r8, r3, r8
   d93b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d93b2:	2b00      	cmp	r3, #0
   d93b4:	d164      	bne.n	d9480 <_strtod_r+0x7c0>
   d93b6:	f1b9 0f00 	cmp.w	r9, #0
   d93ba:	dc7a      	bgt.n	d94b2 <_strtod_r+0x7f2>
   d93bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d93be:	2b00      	cmp	r3, #0
   d93c0:	f040 8081 	bne.w	d94c6 <_strtod_r+0x806>
   d93c4:	2e00      	cmp	r6, #0
   d93c6:	f300 8088 	bgt.w	d94da <_strtod_r+0x81a>
   d93ca:	f1b8 0f00 	cmp.w	r8, #0
   d93ce:	f300 808e 	bgt.w	d94ee <_strtod_r+0x82e>
   d93d2:	9a04      	ldr	r2, [sp, #16]
   d93d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d93d6:	9802      	ldr	r0, [sp, #8]
   d93d8:	f001 fc27 	bl	dac2a <__mdiff>
   d93dc:	4604      	mov	r4, r0
   d93de:	2800      	cmp	r0, #0
   d93e0:	f43f aeb5 	beq.w	d914e <_strtod_r+0x48e>
   d93e4:	68c3      	ldr	r3, [r0, #12]
   d93e6:	9307      	str	r3, [sp, #28]
   d93e8:	2300      	movs	r3, #0
   d93ea:	60c3      	str	r3, [r0, #12]
   d93ec:	4629      	mov	r1, r5
   d93ee:	f001 fc00 	bl	dabf2 <__mcmp>
   d93f2:	2800      	cmp	r0, #0
   d93f4:	f280 8089 	bge.w	d950a <_strtod_r+0x84a>
   d93f8:	9b07      	ldr	r3, [sp, #28]
   d93fa:	2b00      	cmp	r3, #0
   d93fc:	f040 8204 	bne.w	d9808 <_strtod_r+0xb48>
   d9400:	f1ba 0f00 	cmp.w	sl, #0
   d9404:	f040 8200 	bne.w	d9808 <_strtod_r+0xb48>
   d9408:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d940c:	2b00      	cmp	r3, #0
   d940e:	f040 81fb 	bne.w	d9808 <_strtod_r+0xb48>
   d9412:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9416:	0d1b      	lsrs	r3, r3, #20
   d9418:	051b      	lsls	r3, r3, #20
   d941a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d941e:	f240 81f3 	bls.w	d9808 <_strtod_r+0xb48>
   d9422:	6963      	ldr	r3, [r4, #20]
   d9424:	2b00      	cmp	r3, #0
   d9426:	d06c      	beq.n	d9502 <_strtod_r+0x842>
   d9428:	4621      	mov	r1, r4
   d942a:	2201      	movs	r2, #1
   d942c:	9802      	ldr	r0, [sp, #8]
   d942e:	f001 fb8f 	bl	dab50 <__lshift>
   d9432:	4629      	mov	r1, r5
   d9434:	4604      	mov	r4, r0
   d9436:	f001 fbdc 	bl	dabf2 <__mcmp>
   d943a:	2800      	cmp	r0, #0
   d943c:	f340 81e4 	ble.w	d9808 <_strtod_r+0xb48>
   d9440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9444:	9a03      	ldr	r2, [sp, #12]
   d9446:	0d1b      	lsrs	r3, r3, #20
   d9448:	051b      	lsls	r3, r3, #20
   d944a:	2a00      	cmp	r2, #0
   d944c:	f000 808c 	beq.w	d9568 <_strtod_r+0x8a8>
   d9450:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9454:	f300 8088 	bgt.w	d9568 <_strtod_r+0x8a8>
   d9458:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d945c:	f300 81d6 	bgt.w	d980c <_strtod_r+0xb4c>
   d9460:	9a02      	ldr	r2, [sp, #8]
   d9462:	2322      	movs	r3, #34	; 0x22
   d9464:	f04f 0a00 	mov.w	sl, #0
   d9468:	f04f 0b00 	mov.w	fp, #0
   d946c:	6013      	str	r3, [r2, #0]
   d946e:	9b05      	ldr	r3, [sp, #20]
   d9470:	2b00      	cmp	r3, #0
   d9472:	f040 81dc 	bne.w	d982e <_strtod_r+0xb6e>
   d9476:	e1ee      	b.n	d9856 <_strtod_r+0xb96>
   d9478:	2301      	movs	r3, #1
   d947a:	2700      	movs	r7, #0
   d947c:	9306      	str	r3, [sp, #24]
   d947e:	e784      	b.n	d938a <_strtod_r+0x6ca>
   d9480:	4629      	mov	r1, r5
   d9482:	461a      	mov	r2, r3
   d9484:	9802      	ldr	r0, [sp, #8]
   d9486:	f001 fb15 	bl	daab4 <__pow5mult>
   d948a:	4605      	mov	r5, r0
   d948c:	2800      	cmp	r0, #0
   d948e:	f43f ae5e 	beq.w	d914e <_strtod_r+0x48e>
   d9492:	4601      	mov	r1, r0
   d9494:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9496:	9802      	ldr	r0, [sp, #8]
   d9498:	f001 fa7b 	bl	da992 <__multiply>
   d949c:	9007      	str	r0, [sp, #28]
   d949e:	2800      	cmp	r0, #0
   d94a0:	f43f ae55 	beq.w	d914e <_strtod_r+0x48e>
   d94a4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d94a6:	9802      	ldr	r0, [sp, #8]
   d94a8:	f001 f98d 	bl	da7c6 <_Bfree>
   d94ac:	9b07      	ldr	r3, [sp, #28]
   d94ae:	9318      	str	r3, [sp, #96]	; 0x60
   d94b0:	e781      	b.n	d93b6 <_strtod_r+0x6f6>
   d94b2:	464a      	mov	r2, r9
   d94b4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d94b6:	9802      	ldr	r0, [sp, #8]
   d94b8:	f001 fb4a 	bl	dab50 <__lshift>
   d94bc:	9018      	str	r0, [sp, #96]	; 0x60
   d94be:	2800      	cmp	r0, #0
   d94c0:	f47f af7c 	bne.w	d93bc <_strtod_r+0x6fc>
   d94c4:	e643      	b.n	d914e <_strtod_r+0x48e>
   d94c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d94c8:	9904      	ldr	r1, [sp, #16]
   d94ca:	9802      	ldr	r0, [sp, #8]
   d94cc:	f001 faf2 	bl	daab4 <__pow5mult>
   d94d0:	9004      	str	r0, [sp, #16]
   d94d2:	2800      	cmp	r0, #0
   d94d4:	f47f af76 	bne.w	d93c4 <_strtod_r+0x704>
   d94d8:	e639      	b.n	d914e <_strtod_r+0x48e>
   d94da:	4632      	mov	r2, r6
   d94dc:	9904      	ldr	r1, [sp, #16]
   d94de:	9802      	ldr	r0, [sp, #8]
   d94e0:	f001 fb36 	bl	dab50 <__lshift>
   d94e4:	9004      	str	r0, [sp, #16]
   d94e6:	2800      	cmp	r0, #0
   d94e8:	f47f af6f 	bne.w	d93ca <_strtod_r+0x70a>
   d94ec:	e62f      	b.n	d914e <_strtod_r+0x48e>
   d94ee:	4629      	mov	r1, r5
   d94f0:	4642      	mov	r2, r8
   d94f2:	9802      	ldr	r0, [sp, #8]
   d94f4:	f001 fb2c 	bl	dab50 <__lshift>
   d94f8:	4605      	mov	r5, r0
   d94fa:	2800      	cmp	r0, #0
   d94fc:	f47f af69 	bne.w	d93d2 <_strtod_r+0x712>
   d9500:	e625      	b.n	d914e <_strtod_r+0x48e>
   d9502:	6923      	ldr	r3, [r4, #16]
   d9504:	2b01      	cmp	r3, #1
   d9506:	dc8f      	bgt.n	d9428 <_strtod_r+0x768>
   d9508:	e17e      	b.n	d9808 <_strtod_r+0xb48>
   d950a:	d161      	bne.n	d95d0 <_strtod_r+0x910>
   d950c:	9a07      	ldr	r2, [sp, #28]
   d950e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9512:	b322      	cbz	r2, d955e <_strtod_r+0x89e>
   d9514:	4946      	ldr	r1, [pc, #280]	; (d9630 <_strtod_r+0x970>)
   d9516:	428b      	cmp	r3, r1
   d9518:	465a      	mov	r2, fp
   d951a:	d12e      	bne.n	d957a <_strtod_r+0x8ba>
   d951c:	9b03      	ldr	r3, [sp, #12]
   d951e:	4651      	mov	r1, sl
   d9520:	b163      	cbz	r3, d953c <_strtod_r+0x87c>
   d9522:	4b44      	ldr	r3, [pc, #272]	; (d9634 <_strtod_r+0x974>)
   d9524:	4013      	ands	r3, r2
   d9526:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d952a:	d807      	bhi.n	d953c <_strtod_r+0x87c>
   d952c:	0d1b      	lsrs	r3, r3, #20
   d952e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9536:	fa00 f303 	lsl.w	r3, r0, r3
   d953a:	e001      	b.n	d9540 <_strtod_r+0x880>
   d953c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9540:	428b      	cmp	r3, r1
   d9542:	d11a      	bne.n	d957a <_strtod_r+0x8ba>
   d9544:	493c      	ldr	r1, [pc, #240]	; (d9638 <_strtod_r+0x978>)
   d9546:	428a      	cmp	r2, r1
   d9548:	d102      	bne.n	d9550 <_strtod_r+0x890>
   d954a:	3301      	adds	r3, #1
   d954c:	f43f adff 	beq.w	d914e <_strtod_r+0x48e>
   d9550:	4b38      	ldr	r3, [pc, #224]	; (d9634 <_strtod_r+0x974>)
   d9552:	4013      	ands	r3, r2
   d9554:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9558:	f04f 0a00 	mov.w	sl, #0
   d955c:	e154      	b.n	d9808 <_strtod_r+0xb48>
   d955e:	b963      	cbnz	r3, d957a <_strtod_r+0x8ba>
   d9560:	f1ba 0f00 	cmp.w	sl, #0
   d9564:	d109      	bne.n	d957a <_strtod_r+0x8ba>
   d9566:	e76b      	b.n	d9440 <_strtod_r+0x780>
   d9568:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d956c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9570:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9574:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9578:	e146      	b.n	d9808 <_strtod_r+0xb48>
   d957a:	b117      	cbz	r7, d9582 <_strtod_r+0x8c2>
   d957c:	ea17 0f0b 	tst.w	r7, fp
   d9580:	e002      	b.n	d9588 <_strtod_r+0x8c8>
   d9582:	9b06      	ldr	r3, [sp, #24]
   d9584:	ea13 0f0a 	tst.w	r3, sl
   d9588:	f000 813e 	beq.w	d9808 <_strtod_r+0xb48>
   d958c:	9b07      	ldr	r3, [sp, #28]
   d958e:	9a03      	ldr	r2, [sp, #12]
   d9590:	4650      	mov	r0, sl
   d9592:	4659      	mov	r1, fp
   d9594:	b153      	cbz	r3, d95ac <_strtod_r+0x8ec>
   d9596:	f7ff fb74 	bl	d8c82 <sulp>
   d959a:	4602      	mov	r2, r0
   d959c:	460b      	mov	r3, r1
   d959e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d95a2:	f7fe fb1b 	bl	d7bdc <__adddf3>
   d95a6:	4682      	mov	sl, r0
   d95a8:	468b      	mov	fp, r1
   d95aa:	e12d      	b.n	d9808 <_strtod_r+0xb48>
   d95ac:	f7ff fb69 	bl	d8c82 <sulp>
   d95b0:	4602      	mov	r2, r0
   d95b2:	460b      	mov	r3, r1
   d95b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d95b8:	f7fe fb0e 	bl	d7bd8 <__aeabi_dsub>
   d95bc:	2200      	movs	r2, #0
   d95be:	2300      	movs	r3, #0
   d95c0:	4682      	mov	sl, r0
   d95c2:	468b      	mov	fp, r1
   d95c4:	f7fe ff24 	bl	d8410 <__aeabi_dcmpeq>
   d95c8:	2800      	cmp	r0, #0
   d95ca:	f47f af49 	bne.w	d9460 <_strtod_r+0x7a0>
   d95ce:	e11b      	b.n	d9808 <_strtod_r+0xb48>
   d95d0:	4629      	mov	r1, r5
   d95d2:	4620      	mov	r0, r4
   d95d4:	f001 fc4b 	bl	dae6e <__ratio>
   d95d8:	ec57 6b10 	vmov	r6, r7, d0
   d95dc:	2200      	movs	r2, #0
   d95de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d95e2:	ee10 0a10 	vmov	r0, s0
   d95e6:	4639      	mov	r1, r7
   d95e8:	f7fe ff26 	bl	d8438 <__aeabi_dcmple>
   d95ec:	2800      	cmp	r0, #0
   d95ee:	d042      	beq.n	d9676 <_strtod_r+0x9b6>
   d95f0:	9b07      	ldr	r3, [sp, #28]
   d95f2:	b123      	cbz	r3, d95fe <_strtod_r+0x93e>
   d95f4:	f04f 0800 	mov.w	r8, #0
   d95f8:	f8df 9040 	ldr.w	r9, [pc, #64]	; d963c <_strtod_r+0x97c>
   d95fc:	e011      	b.n	d9622 <_strtod_r+0x962>
   d95fe:	f1ba 0f00 	cmp.w	sl, #0
   d9602:	d103      	bne.n	d960c <_strtod_r+0x94c>
   d9604:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9608:	b93b      	cbnz	r3, d961a <_strtod_r+0x95a>
   d960a:	e01b      	b.n	d9644 <_strtod_r+0x984>
   d960c:	f1ba 0f01 	cmp.w	sl, #1
   d9610:	d103      	bne.n	d961a <_strtod_r+0x95a>
   d9612:	f1bb 0f00 	cmp.w	fp, #0
   d9616:	f43f af23 	beq.w	d9460 <_strtod_r+0x7a0>
   d961a:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9640 <_strtod_r+0x980>
   d961e:	f04f 0800 	mov.w	r8, #0
   d9622:	2600      	movs	r6, #0
   d9624:	4f05      	ldr	r7, [pc, #20]	; (d963c <_strtod_r+0x97c>)
   d9626:	e039      	b.n	d969c <_strtod_r+0x9dc>
   d9628:	fffffc02 	.word	0xfffffc02
   d962c:	fffffbe2 	.word	0xfffffbe2
   d9630:	000fffff 	.word	0x000fffff
   d9634:	7ff00000 	.word	0x7ff00000
   d9638:	7fefffff 	.word	0x7fefffff
   d963c:	3ff00000 	.word	0x3ff00000
   d9640:	bff00000 	.word	0xbff00000
   d9644:	2200      	movs	r2, #0
   d9646:	4b98      	ldr	r3, [pc, #608]	; (d98a8 <_strtod_r+0xbe8>)
   d9648:	4630      	mov	r0, r6
   d964a:	4639      	mov	r1, r7
   d964c:	f7fe feea 	bl	d8424 <__aeabi_dcmplt>
   d9650:	b940      	cbnz	r0, d9664 <_strtod_r+0x9a4>
   d9652:	4630      	mov	r0, r6
   d9654:	4639      	mov	r1, r7
   d9656:	2200      	movs	r2, #0
   d9658:	4b94      	ldr	r3, [pc, #592]	; (d98ac <_strtod_r+0xbec>)
   d965a:	f7fe fc71 	bl	d7f40 <__aeabi_dmul>
   d965e:	4606      	mov	r6, r0
   d9660:	460f      	mov	r7, r1
   d9662:	e001      	b.n	d9668 <_strtod_r+0x9a8>
   d9664:	4f91      	ldr	r7, [pc, #580]	; (d98ac <_strtod_r+0xbec>)
   d9666:	2600      	movs	r6, #0
   d9668:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d966c:	9614      	str	r6, [sp, #80]	; 0x50
   d966e:	9315      	str	r3, [sp, #84]	; 0x54
   d9670:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9674:	e012      	b.n	d969c <_strtod_r+0x9dc>
   d9676:	4b8d      	ldr	r3, [pc, #564]	; (d98ac <_strtod_r+0xbec>)
   d9678:	4630      	mov	r0, r6
   d967a:	4639      	mov	r1, r7
   d967c:	2200      	movs	r2, #0
   d967e:	f7fe fc5f 	bl	d7f40 <__aeabi_dmul>
   d9682:	9b07      	ldr	r3, [sp, #28]
   d9684:	4606      	mov	r6, r0
   d9686:	460f      	mov	r7, r1
   d9688:	b923      	cbnz	r3, d9694 <_strtod_r+0x9d4>
   d968a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d968e:	900e      	str	r0, [sp, #56]	; 0x38
   d9690:	930f      	str	r3, [sp, #60]	; 0x3c
   d9692:	e001      	b.n	d9698 <_strtod_r+0x9d8>
   d9694:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9698:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d969c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d96a0:	0d1b      	lsrs	r3, r3, #20
   d96a2:	051b      	lsls	r3, r3, #20
   d96a4:	9306      	str	r3, [sp, #24]
   d96a6:	9a06      	ldr	r2, [sp, #24]
   d96a8:	4b81      	ldr	r3, [pc, #516]	; (d98b0 <_strtod_r+0xbf0>)
   d96aa:	429a      	cmp	r2, r3
   d96ac:	d12b      	bne.n	d9706 <_strtod_r+0xa46>
   d96ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d96b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d96b6:	ec4b ab10 	vmov	d0, sl, fp
   d96ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d96be:	f001 fb13 	bl	dace8 <__ulp>
   d96c2:	4640      	mov	r0, r8
   d96c4:	ec53 2b10 	vmov	r2, r3, d0
   d96c8:	4649      	mov	r1, r9
   d96ca:	f7fe fc39 	bl	d7f40 <__aeabi_dmul>
   d96ce:	4652      	mov	r2, sl
   d96d0:	465b      	mov	r3, fp
   d96d2:	f7fe fa83 	bl	d7bdc <__adddf3>
   d96d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d96da:	0d1b      	lsrs	r3, r3, #20
   d96dc:	4a75      	ldr	r2, [pc, #468]	; (d98b4 <_strtod_r+0xbf4>)
   d96de:	051b      	lsls	r3, r3, #20
   d96e0:	4293      	cmp	r3, r2
   d96e2:	4682      	mov	sl, r0
   d96e4:	d90c      	bls.n	d9700 <_strtod_r+0xa40>
   d96e6:	4b74      	ldr	r3, [pc, #464]	; (d98b8 <_strtod_r+0xbf8>)
   d96e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d96ea:	429a      	cmp	r2, r3
   d96ec:	d103      	bne.n	d96f6 <_strtod_r+0xa36>
   d96ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d96f0:	3301      	adds	r3, #1
   d96f2:	f43f ad2c 	beq.w	d914e <_strtod_r+0x48e>
   d96f6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d98b8 <_strtod_r+0xbf8>
   d96fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d96fe:	e072      	b.n	d97e6 <_strtod_r+0xb26>
   d9700:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d9704:	e038      	b.n	d9778 <_strtod_r+0xab8>
   d9706:	9b03      	ldr	r3, [sp, #12]
   d9708:	b333      	cbz	r3, d9758 <_strtod_r+0xa98>
   d970a:	9b06      	ldr	r3, [sp, #24]
   d970c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9710:	d822      	bhi.n	d9758 <_strtod_r+0xa98>
   d9712:	a35d      	add	r3, pc, #372	; (adr r3, d9888 <_strtod_r+0xbc8>)
   d9714:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9718:	4630      	mov	r0, r6
   d971a:	4639      	mov	r1, r7
   d971c:	f7fe fe8c 	bl	d8438 <__aeabi_dcmple>
   d9720:	b1a8      	cbz	r0, d974e <_strtod_r+0xa8e>
   d9722:	4639      	mov	r1, r7
   d9724:	4630      	mov	r0, r6
   d9726:	f7fe fecd 	bl	d84c4 <__aeabi_d2uiz>
   d972a:	2800      	cmp	r0, #0
   d972c:	bf08      	it	eq
   d972e:	2001      	moveq	r0, #1
   d9730:	f7fe fb90 	bl	d7e54 <__aeabi_ui2d>
   d9734:	9b07      	ldr	r3, [sp, #28]
   d9736:	4606      	mov	r6, r0
   d9738:	460f      	mov	r7, r1
   d973a:	b923      	cbnz	r3, d9746 <_strtod_r+0xa86>
   d973c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9740:	9010      	str	r0, [sp, #64]	; 0x40
   d9742:	9311      	str	r3, [sp, #68]	; 0x44
   d9744:	e001      	b.n	d974a <_strtod_r+0xa8a>
   d9746:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d974a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d974e:	9a06      	ldr	r2, [sp, #24]
   d9750:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d9754:	ebc2 0903 	rsb	r9, r2, r3
   d9758:	ed9d 0b08 	vldr	d0, [sp, #32]
   d975c:	f001 fac4 	bl	dace8 <__ulp>
   d9760:	4640      	mov	r0, r8
   d9762:	ec53 2b10 	vmov	r2, r3, d0
   d9766:	4649      	mov	r1, r9
   d9768:	f7fe fbea 	bl	d7f40 <__aeabi_dmul>
   d976c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9770:	f7fe fa34 	bl	d7bdc <__adddf3>
   d9774:	4682      	mov	sl, r0
   d9776:	468b      	mov	fp, r1
   d9778:	9b03      	ldr	r3, [sp, #12]
   d977a:	bba3      	cbnz	r3, d97e6 <_strtod_r+0xb26>
   d977c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9780:	0d1b      	lsrs	r3, r3, #20
   d9782:	9a06      	ldr	r2, [sp, #24]
   d9784:	051b      	lsls	r3, r3, #20
   d9786:	429a      	cmp	r2, r3
   d9788:	46d8      	mov	r8, fp
   d978a:	d12c      	bne.n	d97e6 <_strtod_r+0xb26>
   d978c:	4639      	mov	r1, r7
   d978e:	4630      	mov	r0, r6
   d9790:	f7fe fe70 	bl	d8474 <__aeabi_d2iz>
   d9794:	f7fe fb6e 	bl	d7e74 <__aeabi_i2d>
   d9798:	460b      	mov	r3, r1
   d979a:	4602      	mov	r2, r0
   d979c:	4639      	mov	r1, r7
   d979e:	4630      	mov	r0, r6
   d97a0:	f7fe fa1a 	bl	d7bd8 <__aeabi_dsub>
   d97a4:	9b07      	ldr	r3, [sp, #28]
   d97a6:	4606      	mov	r6, r0
   d97a8:	460f      	mov	r7, r1
   d97aa:	b92b      	cbnz	r3, d97b8 <_strtod_r+0xaf8>
   d97ac:	f1ba 0f00 	cmp.w	sl, #0
   d97b0:	d102      	bne.n	d97b8 <_strtod_r+0xaf8>
   d97b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d97b6:	b183      	cbz	r3, d97da <_strtod_r+0xb1a>
   d97b8:	a335      	add	r3, pc, #212	; (adr r3, d9890 <_strtod_r+0xbd0>)
   d97ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97be:	4630      	mov	r0, r6
   d97c0:	4639      	mov	r1, r7
   d97c2:	f7fe fe2f 	bl	d8424 <__aeabi_dcmplt>
   d97c6:	2800      	cmp	r0, #0
   d97c8:	d131      	bne.n	d982e <_strtod_r+0xb6e>
   d97ca:	a333      	add	r3, pc, #204	; (adr r3, d9898 <_strtod_r+0xbd8>)
   d97cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97d0:	4630      	mov	r0, r6
   d97d2:	4639      	mov	r1, r7
   d97d4:	f7fe fe44 	bl	d8460 <__aeabi_dcmpgt>
   d97d8:	e004      	b.n	d97e4 <_strtod_r+0xb24>
   d97da:	a331      	add	r3, pc, #196	; (adr r3, d98a0 <_strtod_r+0xbe0>)
   d97dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97e0:	f7fe fe20 	bl	d8424 <__aeabi_dcmplt>
   d97e4:	bb18      	cbnz	r0, d982e <_strtod_r+0xb6e>
   d97e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d97e8:	9802      	ldr	r0, [sp, #8]
   d97ea:	f000 ffec 	bl	da7c6 <_Bfree>
   d97ee:	9904      	ldr	r1, [sp, #16]
   d97f0:	9802      	ldr	r0, [sp, #8]
   d97f2:	f000 ffe8 	bl	da7c6 <_Bfree>
   d97f6:	4629      	mov	r1, r5
   d97f8:	9802      	ldr	r0, [sp, #8]
   d97fa:	f000 ffe4 	bl	da7c6 <_Bfree>
   d97fe:	4621      	mov	r1, r4
   d9800:	9802      	ldr	r0, [sp, #8]
   d9802:	f000 ffe0 	bl	da7c6 <_Bfree>
   d9806:	e56d      	b.n	d92e4 <_strtod_r+0x624>
   d9808:	9b03      	ldr	r3, [sp, #12]
   d980a:	b183      	cbz	r3, d982e <_strtod_r+0xb6e>
   d980c:	4b2b      	ldr	r3, [pc, #172]	; (d98bc <_strtod_r+0xbfc>)
   d980e:	930b      	str	r3, [sp, #44]	; 0x2c
   d9810:	2300      	movs	r3, #0
   d9812:	930a      	str	r3, [sp, #40]	; 0x28
   d9814:	4650      	mov	r0, sl
   d9816:	4659      	mov	r1, fp
   d9818:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d981c:	f7fe fb90 	bl	d7f40 <__aeabi_dmul>
   d9820:	4682      	mov	sl, r0
   d9822:	468b      	mov	fp, r1
   d9824:	b919      	cbnz	r1, d982e <_strtod_r+0xb6e>
   d9826:	b910      	cbnz	r0, d982e <_strtod_r+0xb6e>
   d9828:	9a02      	ldr	r2, [sp, #8]
   d982a:	2322      	movs	r3, #34	; 0x22
   d982c:	6013      	str	r3, [r2, #0]
   d982e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9830:	9802      	ldr	r0, [sp, #8]
   d9832:	f000 ffc8 	bl	da7c6 <_Bfree>
   d9836:	9904      	ldr	r1, [sp, #16]
   d9838:	9802      	ldr	r0, [sp, #8]
   d983a:	f000 ffc4 	bl	da7c6 <_Bfree>
   d983e:	4629      	mov	r1, r5
   d9840:	9802      	ldr	r0, [sp, #8]
   d9842:	f000 ffc0 	bl	da7c6 <_Bfree>
   d9846:	9905      	ldr	r1, [sp, #20]
   d9848:	9802      	ldr	r0, [sp, #8]
   d984a:	f000 ffbc 	bl	da7c6 <_Bfree>
   d984e:	4621      	mov	r1, r4
   d9850:	9802      	ldr	r0, [sp, #8]
   d9852:	f000 ffb8 	bl	da7c6 <_Bfree>
   d9856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9858:	b113      	cbz	r3, d9860 <_strtod_r+0xba0>
   d985a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d985c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d985e:	6013      	str	r3, [r2, #0]
   d9860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9862:	b11b      	cbz	r3, d986c <_strtod_r+0xbac>
   d9864:	4652      	mov	r2, sl
   d9866:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d986a:	e007      	b.n	d987c <_strtod_r+0xbbc>
   d986c:	4652      	mov	r2, sl
   d986e:	465b      	mov	r3, fp
   d9870:	e004      	b.n	d987c <_strtod_r+0xbbc>
   d9872:	2500      	movs	r5, #0
   d9874:	462a      	mov	r2, r5
   d9876:	2101      	movs	r1, #1
   d9878:	f7ff bb41 	b.w	d8efe <_strtod_r+0x23e>
   d987c:	ec43 2b10 	vmov	d0, r2, r3
   d9880:	b01d      	add	sp, #116	; 0x74
   d9882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9886:	bf00      	nop
   d9888:	ffc00000 	.word	0xffc00000
   d988c:	41dfffff 	.word	0x41dfffff
   d9890:	94a03595 	.word	0x94a03595
   d9894:	3fdfffff 	.word	0x3fdfffff
   d9898:	35afe535 	.word	0x35afe535
   d989c:	3fe00000 	.word	0x3fe00000
   d98a0:	94a03595 	.word	0x94a03595
   d98a4:	3fcfffff 	.word	0x3fcfffff
   d98a8:	3ff00000 	.word	0x3ff00000
   d98ac:	3fe00000 	.word	0x3fe00000
   d98b0:	7fe00000 	.word	0x7fe00000
   d98b4:	7c9fffff 	.word	0x7c9fffff
   d98b8:	7fefffff 	.word	0x7fefffff
   d98bc:	39500000 	.word	0x39500000

000d98c0 <strtod>:
   d98c0:	4b02      	ldr	r3, [pc, #8]	; (d98cc <strtod+0xc>)
   d98c2:	460a      	mov	r2, r1
   d98c4:	4601      	mov	r1, r0
   d98c6:	6818      	ldr	r0, [r3, #0]
   d98c8:	f7ff b9fa 	b.w	d8cc0 <_strtod_r>
   d98cc:	2003e124 	.word	0x2003e124

000d98d0 <_strtol_r>:
   d98d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d98d4:	4680      	mov	r8, r0
   d98d6:	4840      	ldr	r0, [pc, #256]	; (d99d8 <_strtol_r+0x108>)
   d98d8:	f8d0 9000 	ldr.w	r9, [r0]
   d98dc:	460f      	mov	r7, r1
   d98de:	463d      	mov	r5, r7
   d98e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d98e4:	eb09 0004 	add.w	r0, r9, r4
   d98e8:	7840      	ldrb	r0, [r0, #1]
   d98ea:	f000 0008 	and.w	r0, r0, #8
   d98ee:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d98f2:	b108      	cbz	r0, d98f8 <_strtol_r+0x28>
   d98f4:	462f      	mov	r7, r5
   d98f6:	e7f2      	b.n	d98de <_strtol_r+0xe>
   d98f8:	2c2d      	cmp	r4, #45	; 0x2d
   d98fa:	d103      	bne.n	d9904 <_strtol_r+0x34>
   d98fc:	1cbd      	adds	r5, r7, #2
   d98fe:	787c      	ldrb	r4, [r7, #1]
   d9900:	2601      	movs	r6, #1
   d9902:	e003      	b.n	d990c <_strtol_r+0x3c>
   d9904:	2c2b      	cmp	r4, #43	; 0x2b
   d9906:	bf04      	itt	eq
   d9908:	787c      	ldrbeq	r4, [r7, #1]
   d990a:	1cbd      	addeq	r5, r7, #2
   d990c:	b113      	cbz	r3, d9914 <_strtol_r+0x44>
   d990e:	2b10      	cmp	r3, #16
   d9910:	d10a      	bne.n	d9928 <_strtol_r+0x58>
   d9912:	e05b      	b.n	d99cc <_strtol_r+0xfc>
   d9914:	2c30      	cmp	r4, #48	; 0x30
   d9916:	d157      	bne.n	d99c8 <_strtol_r+0xf8>
   d9918:	7828      	ldrb	r0, [r5, #0]
   d991a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d991e:	2858      	cmp	r0, #88	; 0x58
   d9920:	d14d      	bne.n	d99be <_strtol_r+0xee>
   d9922:	786c      	ldrb	r4, [r5, #1]
   d9924:	2310      	movs	r3, #16
   d9926:	3502      	adds	r5, #2
   d9928:	2e00      	cmp	r6, #0
   d992a:	bf14      	ite	ne
   d992c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9930:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9934:	2700      	movs	r7, #0
   d9936:	fbbc faf3 	udiv	sl, ip, r3
   d993a:	4638      	mov	r0, r7
   d993c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9940:	eb09 0e04 	add.w	lr, r9, r4
   d9944:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9948:	f01e 0f04 	tst.w	lr, #4
   d994c:	d001      	beq.n	d9952 <_strtol_r+0x82>
   d994e:	3c30      	subs	r4, #48	; 0x30
   d9950:	e00b      	b.n	d996a <_strtol_r+0x9a>
   d9952:	f01e 0e03 	ands.w	lr, lr, #3
   d9956:	d01b      	beq.n	d9990 <_strtol_r+0xc0>
   d9958:	f1be 0f01 	cmp.w	lr, #1
   d995c:	bf0c      	ite	eq
   d995e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9962:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9966:	ebce 0404 	rsb	r4, lr, r4
   d996a:	42a3      	cmp	r3, r4
   d996c:	dd10      	ble.n	d9990 <_strtol_r+0xc0>
   d996e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d9972:	d00a      	beq.n	d998a <_strtol_r+0xba>
   d9974:	4550      	cmp	r0, sl
   d9976:	d806      	bhi.n	d9986 <_strtol_r+0xb6>
   d9978:	d101      	bne.n	d997e <_strtol_r+0xae>
   d997a:	4564      	cmp	r4, ip
   d997c:	dc03      	bgt.n	d9986 <_strtol_r+0xb6>
   d997e:	fb03 4000 	mla	r0, r3, r0, r4
   d9982:	2701      	movs	r7, #1
   d9984:	e001      	b.n	d998a <_strtol_r+0xba>
   d9986:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d998a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d998e:	e7d7      	b.n	d9940 <_strtol_r+0x70>
   d9990:	1c7b      	adds	r3, r7, #1
   d9992:	d10c      	bne.n	d99ae <_strtol_r+0xde>
   d9994:	2e00      	cmp	r6, #0
   d9996:	f04f 0322 	mov.w	r3, #34	; 0x22
   d999a:	bf14      	ite	ne
   d999c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d99a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d99a4:	f8c8 3000 	str.w	r3, [r8]
   d99a8:	b92a      	cbnz	r2, d99b6 <_strtol_r+0xe6>
   d99aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d99ae:	b106      	cbz	r6, d99b2 <_strtol_r+0xe2>
   d99b0:	4240      	negs	r0, r0
   d99b2:	b172      	cbz	r2, d99d2 <_strtol_r+0x102>
   d99b4:	b107      	cbz	r7, d99b8 <_strtol_r+0xe8>
   d99b6:	1e69      	subs	r1, r5, #1
   d99b8:	6011      	str	r1, [r2, #0]
   d99ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d99be:	2430      	movs	r4, #48	; 0x30
   d99c0:	2b00      	cmp	r3, #0
   d99c2:	d1b1      	bne.n	d9928 <_strtol_r+0x58>
   d99c4:	2308      	movs	r3, #8
   d99c6:	e7af      	b.n	d9928 <_strtol_r+0x58>
   d99c8:	230a      	movs	r3, #10
   d99ca:	e7ad      	b.n	d9928 <_strtol_r+0x58>
   d99cc:	2c30      	cmp	r4, #48	; 0x30
   d99ce:	d0a3      	beq.n	d9918 <_strtol_r+0x48>
   d99d0:	e7aa      	b.n	d9928 <_strtol_r+0x58>
   d99d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d99d6:	bf00      	nop
   d99d8:	2003e0c0 	.word	0x2003e0c0

000d99dc <strtol>:
   d99dc:	4613      	mov	r3, r2
   d99de:	460a      	mov	r2, r1
   d99e0:	4601      	mov	r1, r0
   d99e2:	4802      	ldr	r0, [pc, #8]	; (d99ec <strtol+0x10>)
   d99e4:	6800      	ldr	r0, [r0, #0]
   d99e6:	f7ff bf73 	b.w	d98d0 <_strtol_r>
   d99ea:	bf00      	nop
   d99ec:	2003e124 	.word	0x2003e124

000d99f0 <_strtoul_r>:
   d99f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d99f4:	4680      	mov	r8, r0
   d99f6:	483c      	ldr	r0, [pc, #240]	; (d9ae8 <_strtoul_r+0xf8>)
   d99f8:	f8d0 9000 	ldr.w	r9, [r0]
   d99fc:	460e      	mov	r6, r1
   d99fe:	4635      	mov	r5, r6
   d9a00:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9a04:	eb09 0004 	add.w	r0, r9, r4
   d9a08:	7840      	ldrb	r0, [r0, #1]
   d9a0a:	f000 0008 	and.w	r0, r0, #8
   d9a0e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d9a12:	b108      	cbz	r0, d9a18 <_strtoul_r+0x28>
   d9a14:	462e      	mov	r6, r5
   d9a16:	e7f2      	b.n	d99fe <_strtoul_r+0xe>
   d9a18:	2c2d      	cmp	r4, #45	; 0x2d
   d9a1a:	d103      	bne.n	d9a24 <_strtoul_r+0x34>
   d9a1c:	1cb5      	adds	r5, r6, #2
   d9a1e:	7874      	ldrb	r4, [r6, #1]
   d9a20:	2701      	movs	r7, #1
   d9a22:	e003      	b.n	d9a2c <_strtoul_r+0x3c>
   d9a24:	2c2b      	cmp	r4, #43	; 0x2b
   d9a26:	bf04      	itt	eq
   d9a28:	7874      	ldrbeq	r4, [r6, #1]
   d9a2a:	1cb5      	addeq	r5, r6, #2
   d9a2c:	b113      	cbz	r3, d9a34 <_strtoul_r+0x44>
   d9a2e:	2b10      	cmp	r3, #16
   d9a30:	d10a      	bne.n	d9a48 <_strtoul_r+0x58>
   d9a32:	e053      	b.n	d9adc <_strtoul_r+0xec>
   d9a34:	2c30      	cmp	r4, #48	; 0x30
   d9a36:	d14f      	bne.n	d9ad8 <_strtoul_r+0xe8>
   d9a38:	7828      	ldrb	r0, [r5, #0]
   d9a3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9a3e:	2858      	cmp	r0, #88	; 0x58
   d9a40:	d145      	bne.n	d9ace <_strtoul_r+0xde>
   d9a42:	786c      	ldrb	r4, [r5, #1]
   d9a44:	2310      	movs	r3, #16
   d9a46:	3502      	adds	r5, #2
   d9a48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9a4c:	2600      	movs	r6, #0
   d9a4e:	fbbc fcf3 	udiv	ip, ip, r3
   d9a52:	fb03 fa0c 	mul.w	sl, r3, ip
   d9a56:	ea6f 0a0a 	mvn.w	sl, sl
   d9a5a:	4630      	mov	r0, r6
   d9a5c:	eb09 0e04 	add.w	lr, r9, r4
   d9a60:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9a64:	f01e 0f04 	tst.w	lr, #4
   d9a68:	d001      	beq.n	d9a6e <_strtoul_r+0x7e>
   d9a6a:	3c30      	subs	r4, #48	; 0x30
   d9a6c:	e00b      	b.n	d9a86 <_strtoul_r+0x96>
   d9a6e:	f01e 0e03 	ands.w	lr, lr, #3
   d9a72:	d01a      	beq.n	d9aaa <_strtoul_r+0xba>
   d9a74:	f1be 0f01 	cmp.w	lr, #1
   d9a78:	bf0c      	ite	eq
   d9a7a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9a7e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9a82:	ebce 0404 	rsb	r4, lr, r4
   d9a86:	42a3      	cmp	r3, r4
   d9a88:	dd0f      	ble.n	d9aaa <_strtoul_r+0xba>
   d9a8a:	2e00      	cmp	r6, #0
   d9a8c:	db08      	blt.n	d9aa0 <_strtoul_r+0xb0>
   d9a8e:	4560      	cmp	r0, ip
   d9a90:	d806      	bhi.n	d9aa0 <_strtoul_r+0xb0>
   d9a92:	d101      	bne.n	d9a98 <_strtoul_r+0xa8>
   d9a94:	4554      	cmp	r4, sl
   d9a96:	dc03      	bgt.n	d9aa0 <_strtoul_r+0xb0>
   d9a98:	fb03 4000 	mla	r0, r3, r0, r4
   d9a9c:	2601      	movs	r6, #1
   d9a9e:	e001      	b.n	d9aa4 <_strtoul_r+0xb4>
   d9aa0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9aa4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9aa8:	e7d8      	b.n	d9a5c <_strtoul_r+0x6c>
   d9aaa:	2e00      	cmp	r6, #0
   d9aac:	da07      	bge.n	d9abe <_strtoul_r+0xce>
   d9aae:	2322      	movs	r3, #34	; 0x22
   d9ab0:	f8c8 3000 	str.w	r3, [r8]
   d9ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9ab8:	b92a      	cbnz	r2, d9ac6 <_strtoul_r+0xd6>
   d9aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9abe:	b107      	cbz	r7, d9ac2 <_strtoul_r+0xd2>
   d9ac0:	4240      	negs	r0, r0
   d9ac2:	b172      	cbz	r2, d9ae2 <_strtoul_r+0xf2>
   d9ac4:	b106      	cbz	r6, d9ac8 <_strtoul_r+0xd8>
   d9ac6:	1e69      	subs	r1, r5, #1
   d9ac8:	6011      	str	r1, [r2, #0]
   d9aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9ace:	2430      	movs	r4, #48	; 0x30
   d9ad0:	2b00      	cmp	r3, #0
   d9ad2:	d1b9      	bne.n	d9a48 <_strtoul_r+0x58>
   d9ad4:	2308      	movs	r3, #8
   d9ad6:	e7b7      	b.n	d9a48 <_strtoul_r+0x58>
   d9ad8:	230a      	movs	r3, #10
   d9ada:	e7b5      	b.n	d9a48 <_strtoul_r+0x58>
   d9adc:	2c30      	cmp	r4, #48	; 0x30
   d9ade:	d0ab      	beq.n	d9a38 <_strtoul_r+0x48>
   d9ae0:	e7b2      	b.n	d9a48 <_strtoul_r+0x58>
   d9ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9ae6:	bf00      	nop
   d9ae8:	2003e0c0 	.word	0x2003e0c0

000d9aec <strtoul>:
   d9aec:	4613      	mov	r3, r2
   d9aee:	460a      	mov	r2, r1
   d9af0:	4601      	mov	r1, r0
   d9af2:	4802      	ldr	r0, [pc, #8]	; (d9afc <strtoul+0x10>)
   d9af4:	6800      	ldr	r0, [r0, #0]
   d9af6:	f7ff bf7b 	b.w	d99f0 <_strtoul_r>
   d9afa:	bf00      	nop
   d9afc:	2003e124 	.word	0x2003e124

000d9b00 <__tzcalc_limits>:
   d9b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b04:	4604      	mov	r4, r0
   d9b06:	f000 fd8d 	bl	da624 <__gettzinfo>
   d9b0a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d9b0e:	429c      	cmp	r4, r3
   d9b10:	f340 8096 	ble.w	d9c40 <__tzcalc_limits+0x140>
   d9b14:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9b18:	18e3      	adds	r3, r4, r3
   d9b1a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d9b1e:	109b      	asrs	r3, r3, #2
   d9b20:	f240 156d 	movw	r5, #365	; 0x16d
   d9b24:	fb05 3502 	mla	r5, r5, r2, r3
   d9b28:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d9b2c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d9b30:	fb92 f3f3 	sdiv	r3, r2, r3
   d9b34:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9b38:	442b      	add	r3, r5
   d9b3a:	18a5      	adds	r5, r4, r2
   d9b3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9b40:	fb95 f5f2 	sdiv	r5, r5, r2
   d9b44:	441d      	add	r5, r3
   d9b46:	2364      	movs	r3, #100	; 0x64
   d9b48:	fb94 f7f2 	sdiv	r7, r4, r2
   d9b4c:	fb94 f6f3 	sdiv	r6, r4, r3
   d9b50:	fb02 4717 	mls	r7, r2, r7, r4
   d9b54:	fb03 4616 	mls	r6, r3, r6, r4
   d9b58:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d9b5c:	fab7 fe87 	clz	lr, r7
   d9b60:	9301      	str	r3, [sp, #4]
   d9b62:	f004 0303 	and.w	r3, r4, #3
   d9b66:	6044      	str	r4, [r0, #4]
   d9b68:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9b6c:	4601      	mov	r1, r0
   d9b6e:	9300      	str	r3, [sp, #0]
   d9b70:	f04f 0c07 	mov.w	ip, #7
   d9b74:	7a0b      	ldrb	r3, [r1, #8]
   d9b76:	2b4a      	cmp	r3, #74	; 0x4a
   d9b78:	d10e      	bne.n	d9b98 <__tzcalc_limits+0x98>
   d9b7a:	694b      	ldr	r3, [r1, #20]
   d9b7c:	9a00      	ldr	r2, [sp, #0]
   d9b7e:	18ec      	adds	r4, r5, r3
   d9b80:	b902      	cbnz	r2, d9b84 <__tzcalc_limits+0x84>
   d9b82:	b906      	cbnz	r6, d9b86 <__tzcalc_limits+0x86>
   d9b84:	b927      	cbnz	r7, d9b90 <__tzcalc_limits+0x90>
   d9b86:	2b3b      	cmp	r3, #59	; 0x3b
   d9b88:	bfd4      	ite	le
   d9b8a:	2300      	movle	r3, #0
   d9b8c:	2301      	movgt	r3, #1
   d9b8e:	e000      	b.n	d9b92 <__tzcalc_limits+0x92>
   d9b90:	2300      	movs	r3, #0
   d9b92:	4423      	add	r3, r4
   d9b94:	3b01      	subs	r3, #1
   d9b96:	e03f      	b.n	d9c18 <__tzcalc_limits+0x118>
   d9b98:	2b44      	cmp	r3, #68	; 0x44
   d9b9a:	d102      	bne.n	d9ba2 <__tzcalc_limits+0xa2>
   d9b9c:	694b      	ldr	r3, [r1, #20]
   d9b9e:	442b      	add	r3, r5
   d9ba0:	e03a      	b.n	d9c18 <__tzcalc_limits+0x118>
   d9ba2:	9b00      	ldr	r3, [sp, #0]
   d9ba4:	b92b      	cbnz	r3, d9bb2 <__tzcalc_limits+0xb2>
   d9ba6:	2e00      	cmp	r6, #0
   d9ba8:	bf0c      	ite	eq
   d9baa:	46f0      	moveq	r8, lr
   d9bac:	f04f 0801 	movne.w	r8, #1
   d9bb0:	e000      	b.n	d9bb4 <__tzcalc_limits+0xb4>
   d9bb2:	46f0      	mov	r8, lr
   d9bb4:	4b24      	ldr	r3, [pc, #144]	; (d9c48 <__tzcalc_limits+0x148>)
   d9bb6:	68cc      	ldr	r4, [r1, #12]
   d9bb8:	2230      	movs	r2, #48	; 0x30
   d9bba:	fb02 3808 	mla	r8, r2, r8, r3
   d9bbe:	f1a8 0a04 	sub.w	sl, r8, #4
   d9bc2:	46a9      	mov	r9, r5
   d9bc4:	2301      	movs	r3, #1
   d9bc6:	42a3      	cmp	r3, r4
   d9bc8:	da04      	bge.n	d9bd4 <__tzcalc_limits+0xd4>
   d9bca:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d9bce:	3301      	adds	r3, #1
   d9bd0:	44d9      	add	r9, fp
   d9bd2:	e7f8      	b.n	d9bc6 <__tzcalc_limits+0xc6>
   d9bd4:	f109 0304 	add.w	r3, r9, #4
   d9bd8:	fb93 fbfc 	sdiv	fp, r3, ip
   d9bdc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d9be0:	2c01      	cmp	r4, #1
   d9be2:	ebca 0a03 	rsb	sl, sl, r3
   d9be6:	694b      	ldr	r3, [r1, #20]
   d9be8:	bfb8      	it	lt
   d9bea:	2401      	movlt	r4, #1
   d9bec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d9bf0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9bf4:	690b      	ldr	r3, [r1, #16]
   d9bf6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d9bfa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d9bfe:	bf48      	it	mi
   d9c00:	f10a 0a07 	addmi.w	sl, sl, #7
   d9c04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9c08:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9c0c:	4453      	add	r3, sl
   d9c0e:	42a3      	cmp	r3, r4
   d9c10:	db01      	blt.n	d9c16 <__tzcalc_limits+0x116>
   d9c12:	3b07      	subs	r3, #7
   d9c14:	e7fb      	b.n	d9c0e <__tzcalc_limits+0x10e>
   d9c16:	444b      	add	r3, r9
   d9c18:	698c      	ldr	r4, [r1, #24]
   d9c1a:	4a0c      	ldr	r2, [pc, #48]	; (d9c4c <__tzcalc_limits+0x14c>)
   d9c1c:	fb02 4303 	mla	r3, r2, r3, r4
   d9c20:	6a0c      	ldr	r4, [r1, #32]
   d9c22:	4423      	add	r3, r4
   d9c24:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9c28:	9b01      	ldr	r3, [sp, #4]
   d9c2a:	4299      	cmp	r1, r3
   d9c2c:	d1a2      	bne.n	d9b74 <__tzcalc_limits+0x74>
   d9c2e:	69c3      	ldr	r3, [r0, #28]
   d9c30:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d9c32:	4293      	cmp	r3, r2
   d9c34:	bfac      	ite	ge
   d9c36:	2300      	movge	r3, #0
   d9c38:	2301      	movlt	r3, #1
   d9c3a:	6003      	str	r3, [r0, #0]
   d9c3c:	2001      	movs	r0, #1
   d9c3e:	e000      	b.n	d9c42 <__tzcalc_limits+0x142>
   d9c40:	2000      	movs	r0, #0
   d9c42:	b003      	add	sp, #12
   d9c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c48:	000db6c4 	.word	0x000db6c4
   d9c4c:	00015180 	.word	0x00015180

000d9c50 <__tz_lock>:
   d9c50:	4770      	bx	lr

000d9c52 <__tz_unlock>:
   d9c52:	4770      	bx	lr

000d9c54 <_tzset_unlocked>:
   d9c54:	4b01      	ldr	r3, [pc, #4]	; (d9c5c <_tzset_unlocked+0x8>)
   d9c56:	6818      	ldr	r0, [r3, #0]
   d9c58:	f000 b802 	b.w	d9c60 <_tzset_unlocked_r>
   d9c5c:	2003e124 	.word	0x2003e124

000d9c60 <_tzset_unlocked_r>:
   d9c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c64:	b08d      	sub	sp, #52	; 0x34
   d9c66:	4607      	mov	r7, r0
   d9c68:	f000 fcdc 	bl	da624 <__gettzinfo>
   d9c6c:	49b0      	ldr	r1, [pc, #704]	; (d9f30 <_tzset_unlocked_r+0x2d0>)
   d9c6e:	4eb1      	ldr	r6, [pc, #708]	; (d9f34 <_tzset_unlocked_r+0x2d4>)
   d9c70:	4604      	mov	r4, r0
   d9c72:	4638      	mov	r0, r7
   d9c74:	f000 fcce 	bl	da614 <_getenv_r>
   d9c78:	4605      	mov	r5, r0
   d9c7a:	b960      	cbnz	r0, d9c96 <_tzset_unlocked_r+0x36>
   d9c7c:	4bae      	ldr	r3, [pc, #696]	; (d9f38 <_tzset_unlocked_r+0x2d8>)
   d9c7e:	4aaf      	ldr	r2, [pc, #700]	; (d9f3c <_tzset_unlocked_r+0x2dc>)
   d9c80:	6018      	str	r0, [r3, #0]
   d9c82:	4baf      	ldr	r3, [pc, #700]	; (d9f40 <_tzset_unlocked_r+0x2e0>)
   d9c84:	6018      	str	r0, [r3, #0]
   d9c86:	4baf      	ldr	r3, [pc, #700]	; (d9f44 <_tzset_unlocked_r+0x2e4>)
   d9c88:	6830      	ldr	r0, [r6, #0]
   d9c8a:	601a      	str	r2, [r3, #0]
   d9c8c:	605a      	str	r2, [r3, #4]
   d9c8e:	f7fc fafb 	bl	d6288 <free>
   d9c92:	6035      	str	r5, [r6, #0]
   d9c94:	e148      	b.n	d9f28 <_tzset_unlocked_r+0x2c8>
   d9c96:	6831      	ldr	r1, [r6, #0]
   d9c98:	b979      	cbnz	r1, d9cba <_tzset_unlocked_r+0x5a>
   d9c9a:	6830      	ldr	r0, [r6, #0]
   d9c9c:	f7fc faf4 	bl	d6288 <free>
   d9ca0:	4628      	mov	r0, r5
   d9ca2:	f7fe ffbe 	bl	d8c22 <strlen>
   d9ca6:	1c41      	adds	r1, r0, #1
   d9ca8:	4638      	mov	r0, r7
   d9caa:	f7fc fb15 	bl	d62d8 <_malloc_r>
   d9cae:	6030      	str	r0, [r6, #0]
   d9cb0:	b148      	cbz	r0, d9cc6 <_tzset_unlocked_r+0x66>
   d9cb2:	4629      	mov	r1, r5
   d9cb4:	f7fe ff92 	bl	d8bdc <strcpy>
   d9cb8:	e005      	b.n	d9cc6 <_tzset_unlocked_r+0x66>
   d9cba:	f7fe ff85 	bl	d8bc8 <strcmp>
   d9cbe:	2800      	cmp	r0, #0
   d9cc0:	f000 8132 	beq.w	d9f28 <_tzset_unlocked_r+0x2c8>
   d9cc4:	e7e9      	b.n	d9c9a <_tzset_unlocked_r+0x3a>
   d9cc6:	782b      	ldrb	r3, [r5, #0]
   d9cc8:	4a9f      	ldr	r2, [pc, #636]	; (d9f48 <_tzset_unlocked_r+0x2e8>)
   d9cca:	49a0      	ldr	r1, [pc, #640]	; (d9f4c <_tzset_unlocked_r+0x2ec>)
   d9ccc:	2b3a      	cmp	r3, #58	; 0x3a
   d9cce:	bf08      	it	eq
   d9cd0:	3501      	addeq	r5, #1
   d9cd2:	ae0a      	add	r6, sp, #40	; 0x28
   d9cd4:	4633      	mov	r3, r6
   d9cd6:	4628      	mov	r0, r5
   d9cd8:	f7fc fae6 	bl	d62a8 <siscanf>
   d9cdc:	2800      	cmp	r0, #0
   d9cde:	f340 8123 	ble.w	d9f28 <_tzset_unlocked_r+0x2c8>
   d9ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ce4:	18ef      	adds	r7, r5, r3
   d9ce6:	5ceb      	ldrb	r3, [r5, r3]
   d9ce8:	2b2d      	cmp	r3, #45	; 0x2d
   d9cea:	d103      	bne.n	d9cf4 <_tzset_unlocked_r+0x94>
   d9cec:	3701      	adds	r7, #1
   d9cee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d9cf2:	e003      	b.n	d9cfc <_tzset_unlocked_r+0x9c>
   d9cf4:	2b2b      	cmp	r3, #43	; 0x2b
   d9cf6:	bf08      	it	eq
   d9cf8:	3701      	addeq	r7, #1
   d9cfa:	2501      	movs	r5, #1
   d9cfc:	f10d 0a20 	add.w	sl, sp, #32
   d9d00:	f10d 0b1e 	add.w	fp, sp, #30
   d9d04:	f04f 0800 	mov.w	r8, #0
   d9d08:	9603      	str	r6, [sp, #12]
   d9d0a:	f8cd a008 	str.w	sl, [sp, #8]
   d9d0e:	9601      	str	r6, [sp, #4]
   d9d10:	f8cd b000 	str.w	fp, [sp]
   d9d14:	4633      	mov	r3, r6
   d9d16:	aa07      	add	r2, sp, #28
   d9d18:	498d      	ldr	r1, [pc, #564]	; (d9f50 <_tzset_unlocked_r+0x2f0>)
   d9d1a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d9d1e:	4638      	mov	r0, r7
   d9d20:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9d24:	f7fc fac0 	bl	d62a8 <siscanf>
   d9d28:	4540      	cmp	r0, r8
   d9d2a:	f340 80fd 	ble.w	d9f28 <_tzset_unlocked_r+0x2c8>
   d9d2e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9d32:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9d36:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9f5c <_tzset_unlocked_r+0x2fc>
   d9d3a:	213c      	movs	r1, #60	; 0x3c
   d9d3c:	fb01 3302 	mla	r3, r1, r2, r3
   d9d40:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9d44:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9d48:	fb01 3302 	mla	r3, r1, r2, r3
   d9d4c:	435d      	muls	r5, r3
   d9d4e:	6225      	str	r5, [r4, #32]
   d9d50:	4d7c      	ldr	r5, [pc, #496]	; (d9f44 <_tzset_unlocked_r+0x2e4>)
   d9d52:	4b7d      	ldr	r3, [pc, #500]	; (d9f48 <_tzset_unlocked_r+0x2e8>)
   d9d54:	602b      	str	r3, [r5, #0]
   d9d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9d58:	497c      	ldr	r1, [pc, #496]	; (d9f4c <_tzset_unlocked_r+0x2ec>)
   d9d5a:	441f      	add	r7, r3
   d9d5c:	464a      	mov	r2, r9
   d9d5e:	4633      	mov	r3, r6
   d9d60:	4638      	mov	r0, r7
   d9d62:	f7fc faa1 	bl	d62a8 <siscanf>
   d9d66:	4540      	cmp	r0, r8
   d9d68:	dc08      	bgt.n	d9d7c <_tzset_unlocked_r+0x11c>
   d9d6a:	682b      	ldr	r3, [r5, #0]
   d9d6c:	606b      	str	r3, [r5, #4]
   d9d6e:	4b72      	ldr	r3, [pc, #456]	; (d9f38 <_tzset_unlocked_r+0x2d8>)
   d9d70:	6a22      	ldr	r2, [r4, #32]
   d9d72:	601a      	str	r2, [r3, #0]
   d9d74:	4b72      	ldr	r3, [pc, #456]	; (d9f40 <_tzset_unlocked_r+0x2e0>)
   d9d76:	f8c3 8000 	str.w	r8, [r3]
   d9d7a:	e0d5      	b.n	d9f28 <_tzset_unlocked_r+0x2c8>
   d9d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9d7e:	f8c5 9004 	str.w	r9, [r5, #4]
   d9d82:	18fd      	adds	r5, r7, r3
   d9d84:	5cfb      	ldrb	r3, [r7, r3]
   d9d86:	2b2d      	cmp	r3, #45	; 0x2d
   d9d88:	d103      	bne.n	d9d92 <_tzset_unlocked_r+0x132>
   d9d8a:	3501      	adds	r5, #1
   d9d8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9d90:	e003      	b.n	d9d9a <_tzset_unlocked_r+0x13a>
   d9d92:	2b2b      	cmp	r3, #43	; 0x2b
   d9d94:	bf08      	it	eq
   d9d96:	3501      	addeq	r5, #1
   d9d98:	2701      	movs	r7, #1
   d9d9a:	2300      	movs	r3, #0
   d9d9c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9da0:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9da4:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9da8:	930a      	str	r3, [sp, #40]	; 0x28
   d9daa:	9603      	str	r6, [sp, #12]
   d9dac:	f8cd a008 	str.w	sl, [sp, #8]
   d9db0:	9601      	str	r6, [sp, #4]
   d9db2:	f8cd b000 	str.w	fp, [sp]
   d9db6:	4633      	mov	r3, r6
   d9db8:	aa07      	add	r2, sp, #28
   d9dba:	4965      	ldr	r1, [pc, #404]	; (d9f50 <_tzset_unlocked_r+0x2f0>)
   d9dbc:	4628      	mov	r0, r5
   d9dbe:	f7fc fa73 	bl	d62a8 <siscanf>
   d9dc2:	2800      	cmp	r0, #0
   d9dc4:	dc04      	bgt.n	d9dd0 <_tzset_unlocked_r+0x170>
   d9dc6:	6a23      	ldr	r3, [r4, #32]
   d9dc8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9dcc:	63e3      	str	r3, [r4, #60]	; 0x3c
   d9dce:	e00e      	b.n	d9dee <_tzset_unlocked_r+0x18e>
   d9dd0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9dd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9dd8:	213c      	movs	r1, #60	; 0x3c
   d9dda:	fb01 3302 	mla	r3, r1, r2, r3
   d9dde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9de2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9de6:	fb01 3302 	mla	r3, r1, r2, r3
   d9dea:	435f      	muls	r7, r3
   d9dec:	63e7      	str	r7, [r4, #60]	; 0x3c
   d9dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9df0:	4627      	mov	r7, r4
   d9df2:	441d      	add	r5, r3
   d9df4:	f04f 0900 	mov.w	r9, #0
   d9df8:	782b      	ldrb	r3, [r5, #0]
   d9dfa:	2b2c      	cmp	r3, #44	; 0x2c
   d9dfc:	bf08      	it	eq
   d9dfe:	3501      	addeq	r5, #1
   d9e00:	f895 8000 	ldrb.w	r8, [r5]
   d9e04:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9e08:	d126      	bne.n	d9e58 <_tzset_unlocked_r+0x1f8>
   d9e0a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d9e0e:	9302      	str	r3, [sp, #8]
   d9e10:	ab09      	add	r3, sp, #36	; 0x24
   d9e12:	9300      	str	r3, [sp, #0]
   d9e14:	9603      	str	r6, [sp, #12]
   d9e16:	9601      	str	r6, [sp, #4]
   d9e18:	4633      	mov	r3, r6
   d9e1a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d9e1e:	494d      	ldr	r1, [pc, #308]	; (d9f54 <_tzset_unlocked_r+0x2f4>)
   d9e20:	4628      	mov	r0, r5
   d9e22:	f7fc fa41 	bl	d62a8 <siscanf>
   d9e26:	2803      	cmp	r0, #3
   d9e28:	d17e      	bne.n	d9f28 <_tzset_unlocked_r+0x2c8>
   d9e2a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d9e2e:	1e4b      	subs	r3, r1, #1
   d9e30:	2b0b      	cmp	r3, #11
   d9e32:	d879      	bhi.n	d9f28 <_tzset_unlocked_r+0x2c8>
   d9e34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9e38:	1e53      	subs	r3, r2, #1
   d9e3a:	2b04      	cmp	r3, #4
   d9e3c:	d874      	bhi.n	d9f28 <_tzset_unlocked_r+0x2c8>
   d9e3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9e42:	2b06      	cmp	r3, #6
   d9e44:	d870      	bhi.n	d9f28 <_tzset_unlocked_r+0x2c8>
   d9e46:	f887 8008 	strb.w	r8, [r7, #8]
   d9e4a:	60f9      	str	r1, [r7, #12]
   d9e4c:	613a      	str	r2, [r7, #16]
   d9e4e:	617b      	str	r3, [r7, #20]
   d9e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9e52:	eb05 0803 	add.w	r8, r5, r3
   d9e56:	e02a      	b.n	d9eae <_tzset_unlocked_r+0x24e>
   d9e58:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9e5c:	bf06      	itte	eq
   d9e5e:	3501      	addeq	r5, #1
   d9e60:	4643      	moveq	r3, r8
   d9e62:	2344      	movne	r3, #68	; 0x44
   d9e64:	220a      	movs	r2, #10
   d9e66:	a90b      	add	r1, sp, #44	; 0x2c
   d9e68:	4628      	mov	r0, r5
   d9e6a:	9305      	str	r3, [sp, #20]
   d9e6c:	f7ff fe3e 	bl	d9aec <strtoul>
   d9e70:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9e74:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9e78:	4545      	cmp	r5, r8
   d9e7a:	9b05      	ldr	r3, [sp, #20]
   d9e7c:	d114      	bne.n	d9ea8 <_tzset_unlocked_r+0x248>
   d9e7e:	234d      	movs	r3, #77	; 0x4d
   d9e80:	f1b9 0f00 	cmp.w	r9, #0
   d9e84:	d107      	bne.n	d9e96 <_tzset_unlocked_r+0x236>
   d9e86:	7223      	strb	r3, [r4, #8]
   d9e88:	2303      	movs	r3, #3
   d9e8a:	60e3      	str	r3, [r4, #12]
   d9e8c:	2302      	movs	r3, #2
   d9e8e:	6123      	str	r3, [r4, #16]
   d9e90:	f8c4 9014 	str.w	r9, [r4, #20]
   d9e94:	e00b      	b.n	d9eae <_tzset_unlocked_r+0x24e>
   d9e96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9e9a:	230b      	movs	r3, #11
   d9e9c:	62a3      	str	r3, [r4, #40]	; 0x28
   d9e9e:	2301      	movs	r3, #1
   d9ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9ea2:	2300      	movs	r3, #0
   d9ea4:	6323      	str	r3, [r4, #48]	; 0x30
   d9ea6:	e002      	b.n	d9eae <_tzset_unlocked_r+0x24e>
   d9ea8:	b280      	uxth	r0, r0
   d9eaa:	723b      	strb	r3, [r7, #8]
   d9eac:	6178      	str	r0, [r7, #20]
   d9eae:	2302      	movs	r3, #2
   d9eb0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9eb4:	2300      	movs	r3, #0
   d9eb6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9eba:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9ebe:	930a      	str	r3, [sp, #40]	; 0x28
   d9ec0:	f898 3000 	ldrb.w	r3, [r8]
   d9ec4:	2b2f      	cmp	r3, #47	; 0x2f
   d9ec6:	d10b      	bne.n	d9ee0 <_tzset_unlocked_r+0x280>
   d9ec8:	9603      	str	r6, [sp, #12]
   d9eca:	f8cd a008 	str.w	sl, [sp, #8]
   d9ece:	9601      	str	r6, [sp, #4]
   d9ed0:	f8cd b000 	str.w	fp, [sp]
   d9ed4:	4633      	mov	r3, r6
   d9ed6:	aa07      	add	r2, sp, #28
   d9ed8:	491f      	ldr	r1, [pc, #124]	; (d9f58 <_tzset_unlocked_r+0x2f8>)
   d9eda:	4640      	mov	r0, r8
   d9edc:	f7fc f9e4 	bl	d62a8 <siscanf>
   d9ee0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9ee4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9ee8:	213c      	movs	r1, #60	; 0x3c
   d9eea:	fb01 3302 	mla	r3, r1, r2, r3
   d9eee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9ef2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9ef6:	fb01 3302 	mla	r3, r1, r2, r3
   d9efa:	61bb      	str	r3, [r7, #24]
   d9efc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9efe:	f109 0901 	add.w	r9, r9, #1
   d9f02:	f1b9 0f02 	cmp.w	r9, #2
   d9f06:	4445      	add	r5, r8
   d9f08:	f107 071c 	add.w	r7, r7, #28
   d9f0c:	f47f af74 	bne.w	d9df8 <_tzset_unlocked_r+0x198>
   d9f10:	6860      	ldr	r0, [r4, #4]
   d9f12:	f7ff fdf5 	bl	d9b00 <__tzcalc_limits>
   d9f16:	4b08      	ldr	r3, [pc, #32]	; (d9f38 <_tzset_unlocked_r+0x2d8>)
   d9f18:	6a22      	ldr	r2, [r4, #32]
   d9f1a:	601a      	str	r2, [r3, #0]
   d9f1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9f1e:	1a9b      	subs	r3, r3, r2
   d9f20:	4a07      	ldr	r2, [pc, #28]	; (d9f40 <_tzset_unlocked_r+0x2e0>)
   d9f22:	bf18      	it	ne
   d9f24:	2301      	movne	r3, #1
   d9f26:	6013      	str	r3, [r2, #0]
   d9f28:	b00d      	add	sp, #52	; 0x34
   d9f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9f2e:	bf00      	nop
   d9f30:	000db780 	.word	0x000db780
   d9f34:	2003e7e4 	.word	0x2003e7e4
   d9f38:	2003e7ec 	.word	0x2003e7ec
   d9f3c:	000db783 	.word	0x000db783
   d9f40:	2003e7e8 	.word	0x2003e7e8
   d9f44:	2003e160 	.word	0x2003e160
   d9f48:	2003e7d7 	.word	0x2003e7d7
   d9f4c:	000db787 	.word	0x000db787
   d9f50:	000db7aa 	.word	0x000db7aa
   d9f54:	000db796 	.word	0x000db796
   d9f58:	000db7a9 	.word	0x000db7a9
   d9f5c:	2003e7cc 	.word	0x2003e7cc

000d9f60 <rshift>:
   d9f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f62:	6906      	ldr	r6, [r0, #16]
   d9f64:	114b      	asrs	r3, r1, #5
   d9f66:	42b3      	cmp	r3, r6
   d9f68:	f100 0514 	add.w	r5, r0, #20
   d9f6c:	da27      	bge.n	d9fbe <rshift+0x5e>
   d9f6e:	f011 011f 	ands.w	r1, r1, #31
   d9f72:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d9f76:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d9f7a:	d101      	bne.n	d9f80 <rshift+0x20>
   d9f7c:	4629      	mov	r1, r5
   d9f7e:	e016      	b.n	d9fae <rshift+0x4e>
   d9f80:	1d14      	adds	r4, r2, #4
   d9f82:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d9f86:	f1c1 0e20 	rsb	lr, r1, #32
   d9f8a:	40ca      	lsrs	r2, r1
   d9f8c:	462b      	mov	r3, r5
   d9f8e:	42b4      	cmp	r4, r6
   d9f90:	d209      	bcs.n	d9fa6 <rshift+0x46>
   d9f92:	6827      	ldr	r7, [r4, #0]
   d9f94:	fa07 f70e 	lsl.w	r7, r7, lr
   d9f98:	433a      	orrs	r2, r7
   d9f9a:	f843 2b04 	str.w	r2, [r3], #4
   d9f9e:	f854 2b04 	ldr.w	r2, [r4], #4
   d9fa2:	40ca      	lsrs	r2, r1
   d9fa4:	e7f3      	b.n	d9f8e <rshift+0x2e>
   d9fa6:	601a      	str	r2, [r3, #0]
   d9fa8:	b152      	cbz	r2, d9fc0 <rshift+0x60>
   d9faa:	3304      	adds	r3, #4
   d9fac:	e008      	b.n	d9fc0 <rshift+0x60>
   d9fae:	42b2      	cmp	r2, r6
   d9fb0:	460b      	mov	r3, r1
   d9fb2:	d205      	bcs.n	d9fc0 <rshift+0x60>
   d9fb4:	f852 3b04 	ldr.w	r3, [r2], #4
   d9fb8:	f841 3b04 	str.w	r3, [r1], #4
   d9fbc:	e7f7      	b.n	d9fae <rshift+0x4e>
   d9fbe:	462b      	mov	r3, r5
   d9fc0:	1b5b      	subs	r3, r3, r5
   d9fc2:	109b      	asrs	r3, r3, #2
   d9fc4:	6103      	str	r3, [r0, #16]
   d9fc6:	b903      	cbnz	r3, d9fca <rshift+0x6a>
   d9fc8:	6143      	str	r3, [r0, #20]
   d9fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9fcc <__hexdig_fun>:
   d9fcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9fd0:	2b09      	cmp	r3, #9
   d9fd2:	d801      	bhi.n	d9fd8 <__hexdig_fun+0xc>
   d9fd4:	3820      	subs	r0, #32
   d9fd6:	e00a      	b.n	d9fee <__hexdig_fun+0x22>
   d9fd8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9fdc:	2b05      	cmp	r3, #5
   d9fde:	d801      	bhi.n	d9fe4 <__hexdig_fun+0x18>
   d9fe0:	3847      	subs	r0, #71	; 0x47
   d9fe2:	e004      	b.n	d9fee <__hexdig_fun+0x22>
   d9fe4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9fe8:	2b05      	cmp	r3, #5
   d9fea:	d802      	bhi.n	d9ff2 <__hexdig_fun+0x26>
   d9fec:	3827      	subs	r0, #39	; 0x27
   d9fee:	b2c0      	uxtb	r0, r0
   d9ff0:	4770      	bx	lr
   d9ff2:	2000      	movs	r0, #0
   d9ff4:	4770      	bx	lr

000d9ff6 <__gethex>:
   d9ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ffa:	b08b      	sub	sp, #44	; 0x2c
   d9ffc:	468a      	mov	sl, r1
   d9ffe:	4690      	mov	r8, r2
   da000:	9306      	str	r3, [sp, #24]
   da002:	9002      	str	r0, [sp, #8]
   da004:	f7fe fda0 	bl	d8b48 <_localeconv_r>
   da008:	6803      	ldr	r3, [r0, #0]
   da00a:	9303      	str	r3, [sp, #12]
   da00c:	4618      	mov	r0, r3
   da00e:	f7fe fe08 	bl	d8c22 <strlen>
   da012:	9b03      	ldr	r3, [sp, #12]
   da014:	9001      	str	r0, [sp, #4]
   da016:	4403      	add	r3, r0
   da018:	f04f 0b00 	mov.w	fp, #0
   da01c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da020:	9307      	str	r3, [sp, #28]
   da022:	f8da 3000 	ldr.w	r3, [sl]
   da026:	3302      	adds	r3, #2
   da028:	461f      	mov	r7, r3
   da02a:	f813 0b01 	ldrb.w	r0, [r3], #1
   da02e:	2830      	cmp	r0, #48	; 0x30
   da030:	d102      	bne.n	da038 <__gethex+0x42>
   da032:	f10b 0b01 	add.w	fp, fp, #1
   da036:	e7f7      	b.n	da028 <__gethex+0x32>
   da038:	f7ff ffc8 	bl	d9fcc <__hexdig_fun>
   da03c:	4604      	mov	r4, r0
   da03e:	b9e0      	cbnz	r0, da07a <__gethex+0x84>
   da040:	9a01      	ldr	r2, [sp, #4]
   da042:	9903      	ldr	r1, [sp, #12]
   da044:	4638      	mov	r0, r7
   da046:	f7fe fdf4 	bl	d8c32 <strncmp>
   da04a:	2800      	cmp	r0, #0
   da04c:	d134      	bne.n	da0b8 <__gethex+0xc2>
   da04e:	9b01      	ldr	r3, [sp, #4]
   da050:	5cf8      	ldrb	r0, [r7, r3]
   da052:	18fe      	adds	r6, r7, r3
   da054:	f7ff ffba 	bl	d9fcc <__hexdig_fun>
   da058:	b380      	cbz	r0, da0bc <__gethex+0xc6>
   da05a:	4633      	mov	r3, r6
   da05c:	7818      	ldrb	r0, [r3, #0]
   da05e:	2830      	cmp	r0, #48	; 0x30
   da060:	461f      	mov	r7, r3
   da062:	f103 0301 	add.w	r3, r3, #1
   da066:	d0f9      	beq.n	da05c <__gethex+0x66>
   da068:	f7ff ffb0 	bl	d9fcc <__hexdig_fun>
   da06c:	fab0 f580 	clz	r5, r0
   da070:	096d      	lsrs	r5, r5, #5
   da072:	4634      	mov	r4, r6
   da074:	f04f 0b01 	mov.w	fp, #1
   da078:	e001      	b.n	da07e <__gethex+0x88>
   da07a:	2500      	movs	r5, #0
   da07c:	462c      	mov	r4, r5
   da07e:	463a      	mov	r2, r7
   da080:	4616      	mov	r6, r2
   da082:	3201      	adds	r2, #1
   da084:	7830      	ldrb	r0, [r6, #0]
   da086:	f7ff ffa1 	bl	d9fcc <__hexdig_fun>
   da08a:	2800      	cmp	r0, #0
   da08c:	d1f8      	bne.n	da080 <__gethex+0x8a>
   da08e:	9a01      	ldr	r2, [sp, #4]
   da090:	9903      	ldr	r1, [sp, #12]
   da092:	4630      	mov	r0, r6
   da094:	f7fe fdcd 	bl	d8c32 <strncmp>
   da098:	b950      	cbnz	r0, da0b0 <__gethex+0xba>
   da09a:	b954      	cbnz	r4, da0b2 <__gethex+0xbc>
   da09c:	9b01      	ldr	r3, [sp, #4]
   da09e:	18f4      	adds	r4, r6, r3
   da0a0:	4622      	mov	r2, r4
   da0a2:	4616      	mov	r6, r2
   da0a4:	3201      	adds	r2, #1
   da0a6:	7830      	ldrb	r0, [r6, #0]
   da0a8:	f7ff ff90 	bl	d9fcc <__hexdig_fun>
   da0ac:	2800      	cmp	r0, #0
   da0ae:	d1f8      	bne.n	da0a2 <__gethex+0xac>
   da0b0:	b134      	cbz	r4, da0c0 <__gethex+0xca>
   da0b2:	1ba4      	subs	r4, r4, r6
   da0b4:	00a4      	lsls	r4, r4, #2
   da0b6:	e003      	b.n	da0c0 <__gethex+0xca>
   da0b8:	463e      	mov	r6, r7
   da0ba:	e000      	b.n	da0be <__gethex+0xc8>
   da0bc:	4604      	mov	r4, r0
   da0be:	2501      	movs	r5, #1
   da0c0:	7833      	ldrb	r3, [r6, #0]
   da0c2:	2b50      	cmp	r3, #80	; 0x50
   da0c4:	d001      	beq.n	da0ca <__gethex+0xd4>
   da0c6:	2b70      	cmp	r3, #112	; 0x70
   da0c8:	d12a      	bne.n	da120 <__gethex+0x12a>
   da0ca:	7873      	ldrb	r3, [r6, #1]
   da0cc:	2b2b      	cmp	r3, #43	; 0x2b
   da0ce:	d008      	beq.n	da0e2 <__gethex+0xec>
   da0d0:	2b2d      	cmp	r3, #45	; 0x2d
   da0d2:	d003      	beq.n	da0dc <__gethex+0xe6>
   da0d4:	1c71      	adds	r1, r6, #1
   da0d6:	f04f 0900 	mov.w	r9, #0
   da0da:	e005      	b.n	da0e8 <__gethex+0xf2>
   da0dc:	f04f 0901 	mov.w	r9, #1
   da0e0:	e001      	b.n	da0e6 <__gethex+0xf0>
   da0e2:	f04f 0900 	mov.w	r9, #0
   da0e6:	1cb1      	adds	r1, r6, #2
   da0e8:	7808      	ldrb	r0, [r1, #0]
   da0ea:	f7ff ff6f 	bl	d9fcc <__hexdig_fun>
   da0ee:	1e43      	subs	r3, r0, #1
   da0f0:	b2db      	uxtb	r3, r3
   da0f2:	2b18      	cmp	r3, #24
   da0f4:	d814      	bhi.n	da120 <__gethex+0x12a>
   da0f6:	f1a0 0210 	sub.w	r2, r0, #16
   da0fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da0fe:	f7ff ff65 	bl	d9fcc <__hexdig_fun>
   da102:	1e43      	subs	r3, r0, #1
   da104:	b2db      	uxtb	r3, r3
   da106:	2b18      	cmp	r3, #24
   da108:	d804      	bhi.n	da114 <__gethex+0x11e>
   da10a:	230a      	movs	r3, #10
   da10c:	fb03 0202 	mla	r2, r3, r2, r0
   da110:	3a10      	subs	r2, #16
   da112:	e7f2      	b.n	da0fa <__gethex+0x104>
   da114:	f1b9 0f00 	cmp.w	r9, #0
   da118:	d000      	beq.n	da11c <__gethex+0x126>
   da11a:	4252      	negs	r2, r2
   da11c:	4414      	add	r4, r2
   da11e:	e000      	b.n	da122 <__gethex+0x12c>
   da120:	4631      	mov	r1, r6
   da122:	f8ca 1000 	str.w	r1, [sl]
   da126:	b12d      	cbz	r5, da134 <__gethex+0x13e>
   da128:	f1bb 0f00 	cmp.w	fp, #0
   da12c:	bf14      	ite	ne
   da12e:	2000      	movne	r0, #0
   da130:	2006      	moveq	r0, #6
   da132:	e17c      	b.n	da42e <__gethex+0x438>
   da134:	1bf3      	subs	r3, r6, r7
   da136:	3b01      	subs	r3, #1
   da138:	4629      	mov	r1, r5
   da13a:	2b07      	cmp	r3, #7
   da13c:	dd02      	ble.n	da144 <__gethex+0x14e>
   da13e:	3101      	adds	r1, #1
   da140:	105b      	asrs	r3, r3, #1
   da142:	e7fa      	b.n	da13a <__gethex+0x144>
   da144:	9802      	ldr	r0, [sp, #8]
   da146:	f000 fb09 	bl	da75c <_Balloc>
   da14a:	9b01      	ldr	r3, [sp, #4]
   da14c:	f100 0a14 	add.w	sl, r0, #20
   da150:	f04f 0900 	mov.w	r9, #0
   da154:	f1c3 0301 	rsb	r3, r3, #1
   da158:	4605      	mov	r5, r0
   da15a:	f8cd a010 	str.w	sl, [sp, #16]
   da15e:	46cb      	mov	fp, r9
   da160:	9308      	str	r3, [sp, #32]
   da162:	42b7      	cmp	r7, r6
   da164:	d22f      	bcs.n	da1c6 <__gethex+0x1d0>
   da166:	1e73      	subs	r3, r6, #1
   da168:	9305      	str	r3, [sp, #20]
   da16a:	9a07      	ldr	r2, [sp, #28]
   da16c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da170:	4293      	cmp	r3, r2
   da172:	d00b      	beq.n	da18c <__gethex+0x196>
   da174:	f1bb 0f20 	cmp.w	fp, #32
   da178:	d116      	bne.n	da1a8 <__gethex+0x1b2>
   da17a:	9b04      	ldr	r3, [sp, #16]
   da17c:	f8c3 9000 	str.w	r9, [r3]
   da180:	3304      	adds	r3, #4
   da182:	f04f 0900 	mov.w	r9, #0
   da186:	9304      	str	r3, [sp, #16]
   da188:	46cb      	mov	fp, r9
   da18a:	e00d      	b.n	da1a8 <__gethex+0x1b2>
   da18c:	9b05      	ldr	r3, [sp, #20]
   da18e:	9a08      	ldr	r2, [sp, #32]
   da190:	4413      	add	r3, r2
   da192:	429f      	cmp	r7, r3
   da194:	d8ee      	bhi.n	da174 <__gethex+0x17e>
   da196:	4618      	mov	r0, r3
   da198:	9a01      	ldr	r2, [sp, #4]
   da19a:	9903      	ldr	r1, [sp, #12]
   da19c:	9309      	str	r3, [sp, #36]	; 0x24
   da19e:	f7fe fd48 	bl	d8c32 <strncmp>
   da1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da1a4:	b168      	cbz	r0, da1c2 <__gethex+0x1cc>
   da1a6:	e7e5      	b.n	da174 <__gethex+0x17e>
   da1a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da1ac:	f7ff ff0e 	bl	d9fcc <__hexdig_fun>
   da1b0:	f000 000f 	and.w	r0, r0, #15
   da1b4:	fa00 f00b 	lsl.w	r0, r0, fp
   da1b8:	9b05      	ldr	r3, [sp, #20]
   da1ba:	ea49 0900 	orr.w	r9, r9, r0
   da1be:	f10b 0b04 	add.w	fp, fp, #4
   da1c2:	461e      	mov	r6, r3
   da1c4:	e7cd      	b.n	da162 <__gethex+0x16c>
   da1c6:	9804      	ldr	r0, [sp, #16]
   da1c8:	f840 9b04 	str.w	r9, [r0], #4
   da1cc:	ebca 0000 	rsb	r0, sl, r0
   da1d0:	1080      	asrs	r0, r0, #2
   da1d2:	6128      	str	r0, [r5, #16]
   da1d4:	0147      	lsls	r7, r0, #5
   da1d6:	4648      	mov	r0, r9
   da1d8:	f000 fb85 	bl	da8e6 <__hi0bits>
   da1dc:	f8d8 6000 	ldr.w	r6, [r8]
   da1e0:	1a38      	subs	r0, r7, r0
   da1e2:	42b0      	cmp	r0, r6
   da1e4:	dd26      	ble.n	da234 <__gethex+0x23e>
   da1e6:	1b87      	subs	r7, r0, r6
   da1e8:	4639      	mov	r1, r7
   da1ea:	4628      	mov	r0, r5
   da1ec:	f000 fe83 	bl	daef6 <__any_on>
   da1f0:	b1c8      	cbz	r0, da226 <__gethex+0x230>
   da1f2:	1e7b      	subs	r3, r7, #1
   da1f4:	1159      	asrs	r1, r3, #5
   da1f6:	f003 021f 	and.w	r2, r3, #31
   da1fa:	f04f 0901 	mov.w	r9, #1
   da1fe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   da202:	fa09 f202 	lsl.w	r2, r9, r2
   da206:	420a      	tst	r2, r1
   da208:	d00e      	beq.n	da228 <__gethex+0x232>
   da20a:	454b      	cmp	r3, r9
   da20c:	dc02      	bgt.n	da214 <__gethex+0x21e>
   da20e:	f04f 0902 	mov.w	r9, #2
   da212:	e009      	b.n	da228 <__gethex+0x232>
   da214:	1eb9      	subs	r1, r7, #2
   da216:	4628      	mov	r0, r5
   da218:	f000 fe6d 	bl	daef6 <__any_on>
   da21c:	2800      	cmp	r0, #0
   da21e:	d0f6      	beq.n	da20e <__gethex+0x218>
   da220:	f04f 0903 	mov.w	r9, #3
   da224:	e000      	b.n	da228 <__gethex+0x232>
   da226:	4681      	mov	r9, r0
   da228:	4639      	mov	r1, r7
   da22a:	4628      	mov	r0, r5
   da22c:	f7ff fe98 	bl	d9f60 <rshift>
   da230:	443c      	add	r4, r7
   da232:	e00c      	b.n	da24e <__gethex+0x258>
   da234:	da09      	bge.n	da24a <__gethex+0x254>
   da236:	1a37      	subs	r7, r6, r0
   da238:	4629      	mov	r1, r5
   da23a:	463a      	mov	r2, r7
   da23c:	9802      	ldr	r0, [sp, #8]
   da23e:	f000 fc87 	bl	dab50 <__lshift>
   da242:	1be4      	subs	r4, r4, r7
   da244:	4605      	mov	r5, r0
   da246:	f100 0a14 	add.w	sl, r0, #20
   da24a:	f04f 0900 	mov.w	r9, #0
   da24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da252:	429c      	cmp	r4, r3
   da254:	dd08      	ble.n	da268 <__gethex+0x272>
   da256:	9802      	ldr	r0, [sp, #8]
   da258:	4629      	mov	r1, r5
   da25a:	f000 fab4 	bl	da7c6 <_Bfree>
   da25e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da260:	2300      	movs	r3, #0
   da262:	6013      	str	r3, [r2, #0]
   da264:	20a3      	movs	r0, #163	; 0xa3
   da266:	e0e2      	b.n	da42e <__gethex+0x438>
   da268:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da26c:	4284      	cmp	r4, r0
   da26e:	da53      	bge.n	da318 <__gethex+0x322>
   da270:	1b04      	subs	r4, r0, r4
   da272:	42a6      	cmp	r6, r4
   da274:	dc2e      	bgt.n	da2d4 <__gethex+0x2de>
   da276:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da27a:	2b02      	cmp	r3, #2
   da27c:	d01a      	beq.n	da2b4 <__gethex+0x2be>
   da27e:	2b03      	cmp	r3, #3
   da280:	d01c      	beq.n	da2bc <__gethex+0x2c6>
   da282:	2b01      	cmp	r3, #1
   da284:	d11d      	bne.n	da2c2 <__gethex+0x2cc>
   da286:	42a6      	cmp	r6, r4
   da288:	d11b      	bne.n	da2c2 <__gethex+0x2cc>
   da28a:	2e01      	cmp	r6, #1
   da28c:	dc0b      	bgt.n	da2a6 <__gethex+0x2b0>
   da28e:	9a06      	ldr	r2, [sp, #24]
   da290:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da294:	6013      	str	r3, [r2, #0]
   da296:	2301      	movs	r3, #1
   da298:	612b      	str	r3, [r5, #16]
   da29a:	f8ca 3000 	str.w	r3, [sl]
   da29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da2a0:	2062      	movs	r0, #98	; 0x62
   da2a2:	601d      	str	r5, [r3, #0]
   da2a4:	e0c3      	b.n	da42e <__gethex+0x438>
   da2a6:	1e71      	subs	r1, r6, #1
   da2a8:	4628      	mov	r0, r5
   da2aa:	f000 fe24 	bl	daef6 <__any_on>
   da2ae:	2800      	cmp	r0, #0
   da2b0:	d1ed      	bne.n	da28e <__gethex+0x298>
   da2b2:	e006      	b.n	da2c2 <__gethex+0x2cc>
   da2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da2b6:	2b00      	cmp	r3, #0
   da2b8:	d0e9      	beq.n	da28e <__gethex+0x298>
   da2ba:	e002      	b.n	da2c2 <__gethex+0x2cc>
   da2bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da2be:	2b00      	cmp	r3, #0
   da2c0:	d1e5      	bne.n	da28e <__gethex+0x298>
   da2c2:	9802      	ldr	r0, [sp, #8]
   da2c4:	4629      	mov	r1, r5
   da2c6:	f000 fa7e 	bl	da7c6 <_Bfree>
   da2ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da2cc:	2300      	movs	r3, #0
   da2ce:	6013      	str	r3, [r2, #0]
   da2d0:	2050      	movs	r0, #80	; 0x50
   da2d2:	e0ac      	b.n	da42e <__gethex+0x438>
   da2d4:	1e67      	subs	r7, r4, #1
   da2d6:	f1b9 0f00 	cmp.w	r9, #0
   da2da:	d106      	bne.n	da2ea <__gethex+0x2f4>
   da2dc:	b13f      	cbz	r7, da2ee <__gethex+0x2f8>
   da2de:	4639      	mov	r1, r7
   da2e0:	4628      	mov	r0, r5
   da2e2:	f000 fe08 	bl	daef6 <__any_on>
   da2e6:	4681      	mov	r9, r0
   da2e8:	e001      	b.n	da2ee <__gethex+0x2f8>
   da2ea:	f04f 0901 	mov.w	r9, #1
   da2ee:	117a      	asrs	r2, r7, #5
   da2f0:	2301      	movs	r3, #1
   da2f2:	f007 071f 	and.w	r7, r7, #31
   da2f6:	fa03 f707 	lsl.w	r7, r3, r7
   da2fa:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   da2fe:	4621      	mov	r1, r4
   da300:	421f      	tst	r7, r3
   da302:	4628      	mov	r0, r5
   da304:	bf18      	it	ne
   da306:	f049 0902 	orrne.w	r9, r9, #2
   da30a:	1b36      	subs	r6, r6, r4
   da30c:	f7ff fe28 	bl	d9f60 <rshift>
   da310:	2702      	movs	r7, #2
   da312:	f8d8 4004 	ldr.w	r4, [r8, #4]
   da316:	e000      	b.n	da31a <__gethex+0x324>
   da318:	2701      	movs	r7, #1
   da31a:	f1b9 0f00 	cmp.w	r9, #0
   da31e:	f000 8081 	beq.w	da424 <__gethex+0x42e>
   da322:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da326:	2b02      	cmp	r3, #2
   da328:	d00e      	beq.n	da348 <__gethex+0x352>
   da32a:	2b03      	cmp	r3, #3
   da32c:	d010      	beq.n	da350 <__gethex+0x35a>
   da32e:	2b01      	cmp	r3, #1
   da330:	d176      	bne.n	da420 <__gethex+0x42a>
   da332:	f019 0f02 	tst.w	r9, #2
   da336:	d073      	beq.n	da420 <__gethex+0x42a>
   da338:	f8da 0000 	ldr.w	r0, [sl]
   da33c:	ea49 0900 	orr.w	r9, r9, r0
   da340:	f019 0f01 	tst.w	r9, #1
   da344:	d107      	bne.n	da356 <__gethex+0x360>
   da346:	e06b      	b.n	da420 <__gethex+0x42a>
   da348:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da34a:	f1c3 0301 	rsb	r3, r3, #1
   da34e:	9315      	str	r3, [sp, #84]	; 0x54
   da350:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da352:	2b00      	cmp	r3, #0
   da354:	d064      	beq.n	da420 <__gethex+0x42a>
   da356:	f8d5 a010 	ldr.w	sl, [r5, #16]
   da35a:	f105 0314 	add.w	r3, r5, #20
   da35e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   da362:	eb03 0109 	add.w	r1, r3, r9
   da366:	2000      	movs	r0, #0
   da368:	681a      	ldr	r2, [r3, #0]
   da36a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da36e:	d002      	beq.n	da376 <__gethex+0x380>
   da370:	3201      	adds	r2, #1
   da372:	601a      	str	r2, [r3, #0]
   da374:	e020      	b.n	da3b8 <__gethex+0x3c2>
   da376:	f843 0b04 	str.w	r0, [r3], #4
   da37a:	4299      	cmp	r1, r3
   da37c:	d8f4      	bhi.n	da368 <__gethex+0x372>
   da37e:	68ab      	ldr	r3, [r5, #8]
   da380:	459a      	cmp	sl, r3
   da382:	db12      	blt.n	da3aa <__gethex+0x3b4>
   da384:	6869      	ldr	r1, [r5, #4]
   da386:	9802      	ldr	r0, [sp, #8]
   da388:	3101      	adds	r1, #1
   da38a:	f000 f9e7 	bl	da75c <_Balloc>
   da38e:	692a      	ldr	r2, [r5, #16]
   da390:	3202      	adds	r2, #2
   da392:	f105 010c 	add.w	r1, r5, #12
   da396:	4683      	mov	fp, r0
   da398:	0092      	lsls	r2, r2, #2
   da39a:	300c      	adds	r0, #12
   da39c:	f7fe fbd8 	bl	d8b50 <memcpy>
   da3a0:	4629      	mov	r1, r5
   da3a2:	9802      	ldr	r0, [sp, #8]
   da3a4:	f000 fa0f 	bl	da7c6 <_Bfree>
   da3a8:	465d      	mov	r5, fp
   da3aa:	692b      	ldr	r3, [r5, #16]
   da3ac:	1c5a      	adds	r2, r3, #1
   da3ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   da3b2:	612a      	str	r2, [r5, #16]
   da3b4:	2201      	movs	r2, #1
   da3b6:	615a      	str	r2, [r3, #20]
   da3b8:	2f02      	cmp	r7, #2
   da3ba:	f105 0214 	add.w	r2, r5, #20
   da3be:	d111      	bne.n	da3e4 <__gethex+0x3ee>
   da3c0:	f8d8 3000 	ldr.w	r3, [r8]
   da3c4:	3b01      	subs	r3, #1
   da3c6:	429e      	cmp	r6, r3
   da3c8:	d127      	bne.n	da41a <__gethex+0x424>
   da3ca:	1171      	asrs	r1, r6, #5
   da3cc:	2301      	movs	r3, #1
   da3ce:	f006 061f 	and.w	r6, r6, #31
   da3d2:	fa03 f606 	lsl.w	r6, r3, r6
   da3d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   da3da:	421e      	tst	r6, r3
   da3dc:	bf0c      	ite	eq
   da3de:	2702      	moveq	r7, #2
   da3e0:	2701      	movne	r7, #1
   da3e2:	e01a      	b.n	da41a <__gethex+0x424>
   da3e4:	692b      	ldr	r3, [r5, #16]
   da3e6:	459a      	cmp	sl, r3
   da3e8:	da0a      	bge.n	da400 <__gethex+0x40a>
   da3ea:	2101      	movs	r1, #1
   da3ec:	4628      	mov	r0, r5
   da3ee:	f7ff fdb7 	bl	d9f60 <rshift>
   da3f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da3f6:	3401      	adds	r4, #1
   da3f8:	429c      	cmp	r4, r3
   da3fa:	f73f af2c 	bgt.w	da256 <__gethex+0x260>
   da3fe:	e00b      	b.n	da418 <__gethex+0x422>
   da400:	f016 061f 	ands.w	r6, r6, #31
   da404:	d008      	beq.n	da418 <__gethex+0x422>
   da406:	4491      	add	r9, r2
   da408:	f1c6 0620 	rsb	r6, r6, #32
   da40c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   da410:	f000 fa69 	bl	da8e6 <__hi0bits>
   da414:	42b0      	cmp	r0, r6
   da416:	dbe8      	blt.n	da3ea <__gethex+0x3f4>
   da418:	2701      	movs	r7, #1
   da41a:	f047 0720 	orr.w	r7, r7, #32
   da41e:	e001      	b.n	da424 <__gethex+0x42e>
   da420:	f047 0710 	orr.w	r7, r7, #16
   da424:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da426:	601d      	str	r5, [r3, #0]
   da428:	9b06      	ldr	r3, [sp, #24]
   da42a:	4638      	mov	r0, r7
   da42c:	601c      	str	r4, [r3, #0]
   da42e:	b00b      	add	sp, #44	; 0x2c
   da430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da434 <L_shift>:
   da434:	f1c2 0208 	rsb	r2, r2, #8
   da438:	0092      	lsls	r2, r2, #2
   da43a:	b570      	push	{r4, r5, r6, lr}
   da43c:	f1c2 0620 	rsb	r6, r2, #32
   da440:	6843      	ldr	r3, [r0, #4]
   da442:	6805      	ldr	r5, [r0, #0]
   da444:	fa03 f406 	lsl.w	r4, r3, r6
   da448:	432c      	orrs	r4, r5
   da44a:	40d3      	lsrs	r3, r2
   da44c:	6004      	str	r4, [r0, #0]
   da44e:	f840 3f04 	str.w	r3, [r0, #4]!
   da452:	4288      	cmp	r0, r1
   da454:	d3f4      	bcc.n	da440 <L_shift+0xc>
   da456:	bd70      	pop	{r4, r5, r6, pc}

000da458 <__match>:
   da458:	b530      	push	{r4, r5, lr}
   da45a:	6803      	ldr	r3, [r0, #0]
   da45c:	f811 4b01 	ldrb.w	r4, [r1], #1
   da460:	3301      	adds	r3, #1
   da462:	b14c      	cbz	r4, da478 <__match+0x20>
   da464:	781a      	ldrb	r2, [r3, #0]
   da466:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da46a:	2d19      	cmp	r5, #25
   da46c:	bf98      	it	ls
   da46e:	3220      	addls	r2, #32
   da470:	42a2      	cmp	r2, r4
   da472:	d0f3      	beq.n	da45c <__match+0x4>
   da474:	2000      	movs	r0, #0
   da476:	bd30      	pop	{r4, r5, pc}
   da478:	6003      	str	r3, [r0, #0]
   da47a:	2001      	movs	r0, #1
   da47c:	bd30      	pop	{r4, r5, pc}

000da47e <__hexnan>:
   da47e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da482:	680b      	ldr	r3, [r1, #0]
   da484:	f8d0 b000 	ldr.w	fp, [r0]
   da488:	115e      	asrs	r6, r3, #5
   da48a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da48e:	f013 031f 	ands.w	r3, r3, #31
   da492:	b085      	sub	sp, #20
   da494:	bf18      	it	ne
   da496:	3604      	addne	r6, #4
   da498:	1f35      	subs	r5, r6, #4
   da49a:	4617      	mov	r7, r2
   da49c:	2200      	movs	r2, #0
   da49e:	4682      	mov	sl, r0
   da4a0:	9301      	str	r3, [sp, #4]
   da4a2:	f846 2c04 	str.w	r2, [r6, #-4]
   da4a6:	46a8      	mov	r8, r5
   da4a8:	462c      	mov	r4, r5
   da4aa:	9200      	str	r2, [sp, #0]
   da4ac:	4691      	mov	r9, r2
   da4ae:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   da4b2:	2900      	cmp	r1, #0
   da4b4:	d03c      	beq.n	da530 <__hexnan+0xb2>
   da4b6:	4608      	mov	r0, r1
   da4b8:	9203      	str	r2, [sp, #12]
   da4ba:	9102      	str	r1, [sp, #8]
   da4bc:	f7ff fd86 	bl	d9fcc <__hexdig_fun>
   da4c0:	9a03      	ldr	r2, [sp, #12]
   da4c2:	bb00      	cbnz	r0, da506 <__hexnan+0x88>
   da4c4:	9902      	ldr	r1, [sp, #8]
   da4c6:	2920      	cmp	r1, #32
   da4c8:	d816      	bhi.n	da4f8 <__hexnan+0x7a>
   da4ca:	9b00      	ldr	r3, [sp, #0]
   da4cc:	4599      	cmp	r9, r3
   da4ce:	ddee      	ble.n	da4ae <__hexnan+0x30>
   da4d0:	4544      	cmp	r4, r8
   da4d2:	d205      	bcs.n	da4e0 <__hexnan+0x62>
   da4d4:	2a07      	cmp	r2, #7
   da4d6:	dc03      	bgt.n	da4e0 <__hexnan+0x62>
   da4d8:	4641      	mov	r1, r8
   da4da:	4620      	mov	r0, r4
   da4dc:	f7ff ffaa 	bl	da434 <L_shift>
   da4e0:	42bc      	cmp	r4, r7
   da4e2:	d923      	bls.n	da52c <__hexnan+0xae>
   da4e4:	2300      	movs	r3, #0
   da4e6:	f1a4 0804 	sub.w	r8, r4, #4
   da4ea:	f844 3c04 	str.w	r3, [r4, #-4]
   da4ee:	f8cd 9000 	str.w	r9, [sp]
   da4f2:	4644      	mov	r4, r8
   da4f4:	461a      	mov	r2, r3
   da4f6:	e7da      	b.n	da4ae <__hexnan+0x30>
   da4f8:	2929      	cmp	r1, #41	; 0x29
   da4fa:	d148      	bne.n	da58e <__hexnan+0x110>
   da4fc:	f10b 0301 	add.w	r3, fp, #1
   da500:	f8ca 3000 	str.w	r3, [sl]
   da504:	e014      	b.n	da530 <__hexnan+0xb2>
   da506:	3201      	adds	r2, #1
   da508:	2a08      	cmp	r2, #8
   da50a:	f109 0901 	add.w	r9, r9, #1
   da50e:	dd06      	ble.n	da51e <__hexnan+0xa0>
   da510:	42bc      	cmp	r4, r7
   da512:	d9cc      	bls.n	da4ae <__hexnan+0x30>
   da514:	2300      	movs	r3, #0
   da516:	f844 3c04 	str.w	r3, [r4, #-4]
   da51a:	2201      	movs	r2, #1
   da51c:	3c04      	subs	r4, #4
   da51e:	6821      	ldr	r1, [r4, #0]
   da520:	f000 000f 	and.w	r0, r0, #15
   da524:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   da528:	6020      	str	r0, [r4, #0]
   da52a:	e7c0      	b.n	da4ae <__hexnan+0x30>
   da52c:	2208      	movs	r2, #8
   da52e:	e7be      	b.n	da4ae <__hexnan+0x30>
   da530:	f1b9 0f00 	cmp.w	r9, #0
   da534:	d02b      	beq.n	da58e <__hexnan+0x110>
   da536:	4544      	cmp	r4, r8
   da538:	d205      	bcs.n	da546 <__hexnan+0xc8>
   da53a:	2a07      	cmp	r2, #7
   da53c:	dc03      	bgt.n	da546 <__hexnan+0xc8>
   da53e:	4641      	mov	r1, r8
   da540:	4620      	mov	r0, r4
   da542:	f7ff ff77 	bl	da434 <L_shift>
   da546:	42bc      	cmp	r4, r7
   da548:	d90c      	bls.n	da564 <__hexnan+0xe6>
   da54a:	463b      	mov	r3, r7
   da54c:	f854 2b04 	ldr.w	r2, [r4], #4
   da550:	f843 2b04 	str.w	r2, [r3], #4
   da554:	42a5      	cmp	r5, r4
   da556:	d2f9      	bcs.n	da54c <__hexnan+0xce>
   da558:	2200      	movs	r2, #0
   da55a:	f843 2b04 	str.w	r2, [r3], #4
   da55e:	429d      	cmp	r5, r3
   da560:	d2fb      	bcs.n	da55a <__hexnan+0xdc>
   da562:	e00b      	b.n	da57c <__hexnan+0xfe>
   da564:	9b01      	ldr	r3, [sp, #4]
   da566:	b14b      	cbz	r3, da57c <__hexnan+0xfe>
   da568:	f1c3 0220 	rsb	r2, r3, #32
   da56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da570:	40d3      	lsrs	r3, r2
   da572:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da576:	4013      	ands	r3, r2
   da578:	f846 3c04 	str.w	r3, [r6, #-4]
   da57c:	682b      	ldr	r3, [r5, #0]
   da57e:	b943      	cbnz	r3, da592 <__hexnan+0x114>
   da580:	42bd      	cmp	r5, r7
   da582:	d102      	bne.n	da58a <__hexnan+0x10c>
   da584:	2301      	movs	r3, #1
   da586:	602b      	str	r3, [r5, #0]
   da588:	e003      	b.n	da592 <__hexnan+0x114>
   da58a:	3d04      	subs	r5, #4
   da58c:	e7f6      	b.n	da57c <__hexnan+0xfe>
   da58e:	2004      	movs	r0, #4
   da590:	e000      	b.n	da594 <__hexnan+0x116>
   da592:	2005      	movs	r0, #5
   da594:	b005      	add	sp, #20
   da596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000da59c <_findenv_r>:
   da59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5a0:	4607      	mov	r7, r0
   da5a2:	468b      	mov	fp, r1
   da5a4:	4690      	mov	r8, r2
   da5a6:	f000 fcd6 	bl	daf56 <__env_lock>
   da5aa:	4b19      	ldr	r3, [pc, #100]	; (da610 <_findenv_r+0x74>)
   da5ac:	681d      	ldr	r5, [r3, #0]
   da5ae:	469a      	mov	sl, r3
   da5b0:	b13d      	cbz	r5, da5c2 <_findenv_r+0x26>
   da5b2:	465c      	mov	r4, fp
   da5b4:	4623      	mov	r3, r4
   da5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   da5ba:	b142      	cbz	r2, da5ce <_findenv_r+0x32>
   da5bc:	2a3d      	cmp	r2, #61	; 0x3d
   da5be:	461c      	mov	r4, r3
   da5c0:	d1f8      	bne.n	da5b4 <_findenv_r+0x18>
   da5c2:	4638      	mov	r0, r7
   da5c4:	f000 fcc8 	bl	daf58 <__env_unlock>
   da5c8:	2000      	movs	r0, #0
   da5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5ce:	ebcb 0404 	rsb	r4, fp, r4
   da5d2:	46a9      	mov	r9, r5
   da5d4:	f859 0b04 	ldr.w	r0, [r9], #4
   da5d8:	2800      	cmp	r0, #0
   da5da:	d0f2      	beq.n	da5c2 <_findenv_r+0x26>
   da5dc:	4622      	mov	r2, r4
   da5de:	4659      	mov	r1, fp
   da5e0:	f7fe fb27 	bl	d8c32 <strncmp>
   da5e4:	b988      	cbnz	r0, da60a <_findenv_r+0x6e>
   da5e6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   da5ea:	191e      	adds	r6, r3, r4
   da5ec:	5d1b      	ldrb	r3, [r3, r4]
   da5ee:	2b3d      	cmp	r3, #61	; 0x3d
   da5f0:	d10b      	bne.n	da60a <_findenv_r+0x6e>
   da5f2:	f8da 3000 	ldr.w	r3, [sl]
   da5f6:	1aed      	subs	r5, r5, r3
   da5f8:	10ad      	asrs	r5, r5, #2
   da5fa:	4638      	mov	r0, r7
   da5fc:	f8c8 5000 	str.w	r5, [r8]
   da600:	f000 fcaa 	bl	daf58 <__env_unlock>
   da604:	1c70      	adds	r0, r6, #1
   da606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da60a:	464d      	mov	r5, r9
   da60c:	e7e1      	b.n	da5d2 <_findenv_r+0x36>
   da60e:	bf00      	nop
   da610:	2003e1a8 	.word	0x2003e1a8

000da614 <_getenv_r>:
   da614:	b507      	push	{r0, r1, r2, lr}
   da616:	aa01      	add	r2, sp, #4
   da618:	f7ff ffc0 	bl	da59c <_findenv_r>
   da61c:	b003      	add	sp, #12
   da61e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da624 <__gettzinfo>:
   da624:	4800      	ldr	r0, [pc, #0]	; (da628 <__gettzinfo+0x4>)
   da626:	4770      	bx	lr
   da628:	2003e168 	.word	0x2003e168

000da62c <gmtime_r>:
   da62c:	6802      	ldr	r2, [r0, #0]
   da62e:	4b47      	ldr	r3, [pc, #284]	; (da74c <gmtime_r+0x120>)
   da630:	b5f0      	push	{r4, r5, r6, r7, lr}
   da632:	fb92 f4f3 	sdiv	r4, r2, r3
   da636:	fb03 2214 	mls	r2, r3, r4, r2
   da63a:	2a00      	cmp	r2, #0
   da63c:	bfbc      	itt	lt
   da63e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   da642:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   da646:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   da64a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   da64e:	fb92 f3f0 	sdiv	r3, r2, r0
   da652:	fb00 2213 	mls	r2, r0, r3, r2
   da656:	f04f 003c 	mov.w	r0, #60	; 0x3c
   da65a:	bfac      	ite	ge
   da65c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   da660:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   da664:	608b      	str	r3, [r1, #8]
   da666:	fb92 f3f0 	sdiv	r3, r2, r0
   da66a:	fb00 2213 	mls	r2, r0, r3, r2
   da66e:	604b      	str	r3, [r1, #4]
   da670:	600a      	str	r2, [r1, #0]
   da672:	2307      	movs	r3, #7
   da674:	1ce2      	adds	r2, r4, #3
   da676:	fb92 f3f3 	sdiv	r3, r2, r3
   da67a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da67e:	1ad3      	subs	r3, r2, r3
   da680:	618b      	str	r3, [r1, #24]
   da682:	4b33      	ldr	r3, [pc, #204]	; (da750 <gmtime_r+0x124>)
   da684:	4d33      	ldr	r5, [pc, #204]	; (da754 <gmtime_r+0x128>)
   da686:	fb94 f5f5 	sdiv	r5, r4, r5
   da68a:	fb03 4405 	mla	r4, r3, r5, r4
   da68e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   da692:	fbb4 f2f2 	udiv	r2, r4, r2
   da696:	4422      	add	r2, r4
   da698:	f240 57b4 	movw	r7, #1460	; 0x5b4
   da69c:	fbb4 f3f7 	udiv	r3, r4, r7
   da6a0:	1ad2      	subs	r2, r2, r3
   da6a2:	482d      	ldr	r0, [pc, #180]	; (da758 <gmtime_r+0x12c>)
   da6a4:	fbb4 f0f0 	udiv	r0, r4, r0
   da6a8:	f648 6694 	movw	r6, #36500	; 0x8e94
   da6ac:	1a13      	subs	r3, r2, r0
   da6ae:	fbb3 f6f6 	udiv	r6, r3, r6
   da6b2:	4434      	add	r4, r6
   da6b4:	f240 126d 	movw	r2, #365	; 0x16d
   da6b8:	fbb3 f0f2 	udiv	r0, r3, r2
   da6bc:	fbb3 f3f7 	udiv	r3, r3, r7
   da6c0:	1ae3      	subs	r3, r4, r3
   da6c2:	fb02 3310 	mls	r3, r2, r0, r3
   da6c6:	2499      	movs	r4, #153	; 0x99
   da6c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   da6cc:	3202      	adds	r2, #2
   da6ce:	fbb2 f2f4 	udiv	r2, r2, r4
   da6d2:	2a0a      	cmp	r2, #10
   da6d4:	fb04 f402 	mul.w	r4, r4, r2
   da6d8:	f104 0602 	add.w	r6, r4, #2
   da6dc:	f04f 0405 	mov.w	r4, #5
   da6e0:	fbb6 f4f4 	udiv	r4, r6, r4
   da6e4:	bf34      	ite	cc
   da6e6:	2602      	movcc	r6, #2
   da6e8:	f06f 0609 	mvncs.w	r6, #9
   da6ec:	4416      	add	r6, r2
   da6ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da6f2:	fb02 0505 	mla	r5, r2, r5, r0
   da6f6:	1c5f      	adds	r7, r3, #1
   da6f8:	2e01      	cmp	r6, #1
   da6fa:	bf98      	it	ls
   da6fc:	3501      	addls	r5, #1
   da6fe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   da702:	eba7 0704 	sub.w	r7, r7, r4
   da706:	d302      	bcc.n	da70e <gmtime_r+0xe2>
   da708:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   da70c:	e014      	b.n	da738 <gmtime_r+0x10c>
   da70e:	0782      	lsls	r2, r0, #30
   da710:	d105      	bne.n	da71e <gmtime_r+0xf2>
   da712:	2464      	movs	r4, #100	; 0x64
   da714:	fbb0 f2f4 	udiv	r2, r0, r4
   da718:	fb04 0212 	mls	r2, r4, r2, r0
   da71c:	b94a      	cbnz	r2, da732 <gmtime_r+0x106>
   da71e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da722:	fbb0 f4f2 	udiv	r4, r0, r2
   da726:	fb02 0014 	mls	r0, r2, r4, r0
   da72a:	fab0 f280 	clz	r2, r0
   da72e:	0952      	lsrs	r2, r2, #5
   da730:	e000      	b.n	da734 <gmtime_r+0x108>
   da732:	2201      	movs	r2, #1
   da734:	333b      	adds	r3, #59	; 0x3b
   da736:	441a      	add	r2, r3
   da738:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   da73c:	2300      	movs	r3, #0
   da73e:	61ca      	str	r2, [r1, #28]
   da740:	614d      	str	r5, [r1, #20]
   da742:	610e      	str	r6, [r1, #16]
   da744:	60cf      	str	r7, [r1, #12]
   da746:	620b      	str	r3, [r1, #32]
   da748:	4608      	mov	r0, r1
   da74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da74c:	00015180 	.word	0x00015180
   da750:	fffdc54f 	.word	0xfffdc54f
   da754:	00023ab1 	.word	0x00023ab1
   da758:	00023ab0 	.word	0x00023ab0

000da75c <_Balloc>:
   da75c:	b570      	push	{r4, r5, r6, lr}
   da75e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   da760:	4604      	mov	r4, r0
   da762:	460e      	mov	r6, r1
   da764:	b93d      	cbnz	r5, da776 <_Balloc+0x1a>
   da766:	2010      	movs	r0, #16
   da768:	f7fb fd86 	bl	d6278 <malloc>
   da76c:	6260      	str	r0, [r4, #36]	; 0x24
   da76e:	6045      	str	r5, [r0, #4]
   da770:	6085      	str	r5, [r0, #8]
   da772:	6005      	str	r5, [r0, #0]
   da774:	60c5      	str	r5, [r0, #12]
   da776:	6a65      	ldr	r5, [r4, #36]	; 0x24
   da778:	68eb      	ldr	r3, [r5, #12]
   da77a:	b143      	cbz	r3, da78e <_Balloc+0x32>
   da77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da77e:	68db      	ldr	r3, [r3, #12]
   da780:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   da784:	b178      	cbz	r0, da7a6 <_Balloc+0x4a>
   da786:	6802      	ldr	r2, [r0, #0]
   da788:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   da78c:	e017      	b.n	da7be <_Balloc+0x62>
   da78e:	2221      	movs	r2, #33	; 0x21
   da790:	2104      	movs	r1, #4
   da792:	4620      	mov	r0, r4
   da794:	f000 fbd1 	bl	daf3a <_calloc_r>
   da798:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da79a:	60e8      	str	r0, [r5, #12]
   da79c:	68db      	ldr	r3, [r3, #12]
   da79e:	2b00      	cmp	r3, #0
   da7a0:	d1ec      	bne.n	da77c <_Balloc+0x20>
   da7a2:	2000      	movs	r0, #0
   da7a4:	bd70      	pop	{r4, r5, r6, pc}
   da7a6:	2101      	movs	r1, #1
   da7a8:	fa01 f506 	lsl.w	r5, r1, r6
   da7ac:	1d6a      	adds	r2, r5, #5
   da7ae:	0092      	lsls	r2, r2, #2
   da7b0:	4620      	mov	r0, r4
   da7b2:	f000 fbc2 	bl	daf3a <_calloc_r>
   da7b6:	2800      	cmp	r0, #0
   da7b8:	d0f3      	beq.n	da7a2 <_Balloc+0x46>
   da7ba:	6046      	str	r6, [r0, #4]
   da7bc:	6085      	str	r5, [r0, #8]
   da7be:	2300      	movs	r3, #0
   da7c0:	6103      	str	r3, [r0, #16]
   da7c2:	60c3      	str	r3, [r0, #12]
   da7c4:	bd70      	pop	{r4, r5, r6, pc}

000da7c6 <_Bfree>:
   da7c6:	b570      	push	{r4, r5, r6, lr}
   da7c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   da7ca:	4606      	mov	r6, r0
   da7cc:	460d      	mov	r5, r1
   da7ce:	b93c      	cbnz	r4, da7e0 <_Bfree+0x1a>
   da7d0:	2010      	movs	r0, #16
   da7d2:	f7fb fd51 	bl	d6278 <malloc>
   da7d6:	6270      	str	r0, [r6, #36]	; 0x24
   da7d8:	6044      	str	r4, [r0, #4]
   da7da:	6084      	str	r4, [r0, #8]
   da7dc:	6004      	str	r4, [r0, #0]
   da7de:	60c4      	str	r4, [r0, #12]
   da7e0:	b13d      	cbz	r5, da7f2 <_Bfree+0x2c>
   da7e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   da7e4:	686a      	ldr	r2, [r5, #4]
   da7e6:	68db      	ldr	r3, [r3, #12]
   da7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da7ec:	6029      	str	r1, [r5, #0]
   da7ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   da7f2:	bd70      	pop	{r4, r5, r6, pc}

000da7f4 <__multadd>:
   da7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da7f8:	690d      	ldr	r5, [r1, #16]
   da7fa:	461f      	mov	r7, r3
   da7fc:	4606      	mov	r6, r0
   da7fe:	460c      	mov	r4, r1
   da800:	f101 0e14 	add.w	lr, r1, #20
   da804:	2300      	movs	r3, #0
   da806:	f8de 0000 	ldr.w	r0, [lr]
   da80a:	b281      	uxth	r1, r0
   da80c:	fb02 7101 	mla	r1, r2, r1, r7
   da810:	0c0f      	lsrs	r7, r1, #16
   da812:	0c00      	lsrs	r0, r0, #16
   da814:	fb02 7000 	mla	r0, r2, r0, r7
   da818:	b289      	uxth	r1, r1
   da81a:	3301      	adds	r3, #1
   da81c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   da820:	429d      	cmp	r5, r3
   da822:	ea4f 4710 	mov.w	r7, r0, lsr #16
   da826:	f84e 1b04 	str.w	r1, [lr], #4
   da82a:	dcec      	bgt.n	da806 <__multadd+0x12>
   da82c:	b1d7      	cbz	r7, da864 <__multadd+0x70>
   da82e:	68a3      	ldr	r3, [r4, #8]
   da830:	429d      	cmp	r5, r3
   da832:	db12      	blt.n	da85a <__multadd+0x66>
   da834:	6861      	ldr	r1, [r4, #4]
   da836:	4630      	mov	r0, r6
   da838:	3101      	adds	r1, #1
   da83a:	f7ff ff8f 	bl	da75c <_Balloc>
   da83e:	6922      	ldr	r2, [r4, #16]
   da840:	3202      	adds	r2, #2
   da842:	f104 010c 	add.w	r1, r4, #12
   da846:	4680      	mov	r8, r0
   da848:	0092      	lsls	r2, r2, #2
   da84a:	300c      	adds	r0, #12
   da84c:	f7fe f980 	bl	d8b50 <memcpy>
   da850:	4621      	mov	r1, r4
   da852:	4630      	mov	r0, r6
   da854:	f7ff ffb7 	bl	da7c6 <_Bfree>
   da858:	4644      	mov	r4, r8
   da85a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   da85e:	3501      	adds	r5, #1
   da860:	615f      	str	r7, [r3, #20]
   da862:	6125      	str	r5, [r4, #16]
   da864:	4620      	mov	r0, r4
   da866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da86a <__s2b>:
   da86a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da86e:	460c      	mov	r4, r1
   da870:	4615      	mov	r5, r2
   da872:	461f      	mov	r7, r3
   da874:	2209      	movs	r2, #9
   da876:	3308      	adds	r3, #8
   da878:	4606      	mov	r6, r0
   da87a:	fb93 f3f2 	sdiv	r3, r3, r2
   da87e:	2100      	movs	r1, #0
   da880:	2201      	movs	r2, #1
   da882:	429a      	cmp	r2, r3
   da884:	da02      	bge.n	da88c <__s2b+0x22>
   da886:	0052      	lsls	r2, r2, #1
   da888:	3101      	adds	r1, #1
   da88a:	e7fa      	b.n	da882 <__s2b+0x18>
   da88c:	4630      	mov	r0, r6
   da88e:	f7ff ff65 	bl	da75c <_Balloc>
   da892:	9b08      	ldr	r3, [sp, #32]
   da894:	6143      	str	r3, [r0, #20]
   da896:	2d09      	cmp	r5, #9
   da898:	f04f 0301 	mov.w	r3, #1
   da89c:	6103      	str	r3, [r0, #16]
   da89e:	dd11      	ble.n	da8c4 <__s2b+0x5a>
   da8a0:	f104 0809 	add.w	r8, r4, #9
   da8a4:	46c1      	mov	r9, r8
   da8a6:	442c      	add	r4, r5
   da8a8:	f819 3b01 	ldrb.w	r3, [r9], #1
   da8ac:	4601      	mov	r1, r0
   da8ae:	3b30      	subs	r3, #48	; 0x30
   da8b0:	220a      	movs	r2, #10
   da8b2:	4630      	mov	r0, r6
   da8b4:	f7ff ff9e 	bl	da7f4 <__multadd>
   da8b8:	45a1      	cmp	r9, r4
   da8ba:	d1f5      	bne.n	da8a8 <__s2b+0x3e>
   da8bc:	eb08 0405 	add.w	r4, r8, r5
   da8c0:	3c08      	subs	r4, #8
   da8c2:	e001      	b.n	da8c8 <__s2b+0x5e>
   da8c4:	340a      	adds	r4, #10
   da8c6:	2509      	movs	r5, #9
   da8c8:	1b2d      	subs	r5, r5, r4
   da8ca:	1963      	adds	r3, r4, r5
   da8cc:	429f      	cmp	r7, r3
   da8ce:	dd08      	ble.n	da8e2 <__s2b+0x78>
   da8d0:	f814 3b01 	ldrb.w	r3, [r4], #1
   da8d4:	4601      	mov	r1, r0
   da8d6:	3b30      	subs	r3, #48	; 0x30
   da8d8:	220a      	movs	r2, #10
   da8da:	4630      	mov	r0, r6
   da8dc:	f7ff ff8a 	bl	da7f4 <__multadd>
   da8e0:	e7f3      	b.n	da8ca <__s2b+0x60>
   da8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da8e6 <__hi0bits>:
   da8e6:	0c03      	lsrs	r3, r0, #16
   da8e8:	041b      	lsls	r3, r3, #16
   da8ea:	b913      	cbnz	r3, da8f2 <__hi0bits+0xc>
   da8ec:	0400      	lsls	r0, r0, #16
   da8ee:	2310      	movs	r3, #16
   da8f0:	e000      	b.n	da8f4 <__hi0bits+0xe>
   da8f2:	2300      	movs	r3, #0
   da8f4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da8f8:	bf04      	itt	eq
   da8fa:	0200      	lsleq	r0, r0, #8
   da8fc:	3308      	addeq	r3, #8
   da8fe:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da902:	bf04      	itt	eq
   da904:	0100      	lsleq	r0, r0, #4
   da906:	3304      	addeq	r3, #4
   da908:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da90c:	bf04      	itt	eq
   da90e:	0080      	lsleq	r0, r0, #2
   da910:	3302      	addeq	r3, #2
   da912:	2800      	cmp	r0, #0
   da914:	db03      	blt.n	da91e <__hi0bits+0x38>
   da916:	0042      	lsls	r2, r0, #1
   da918:	d503      	bpl.n	da922 <__hi0bits+0x3c>
   da91a:	1c58      	adds	r0, r3, #1
   da91c:	4770      	bx	lr
   da91e:	4618      	mov	r0, r3
   da920:	4770      	bx	lr
   da922:	2020      	movs	r0, #32
   da924:	4770      	bx	lr

000da926 <__lo0bits>:
   da926:	6803      	ldr	r3, [r0, #0]
   da928:	f013 0207 	ands.w	r2, r3, #7
   da92c:	d00b      	beq.n	da946 <__lo0bits+0x20>
   da92e:	07d9      	lsls	r1, r3, #31
   da930:	d422      	bmi.n	da978 <__lo0bits+0x52>
   da932:	079a      	lsls	r2, r3, #30
   da934:	bf4b      	itete	mi
   da936:	085b      	lsrmi	r3, r3, #1
   da938:	089b      	lsrpl	r3, r3, #2
   da93a:	6003      	strmi	r3, [r0, #0]
   da93c:	6003      	strpl	r3, [r0, #0]
   da93e:	bf4c      	ite	mi
   da940:	2001      	movmi	r0, #1
   da942:	2002      	movpl	r0, #2
   da944:	4770      	bx	lr
   da946:	b299      	uxth	r1, r3
   da948:	b909      	cbnz	r1, da94e <__lo0bits+0x28>
   da94a:	0c1b      	lsrs	r3, r3, #16
   da94c:	2210      	movs	r2, #16
   da94e:	f013 0fff 	tst.w	r3, #255	; 0xff
   da952:	bf04      	itt	eq
   da954:	0a1b      	lsreq	r3, r3, #8
   da956:	3208      	addeq	r2, #8
   da958:	0719      	lsls	r1, r3, #28
   da95a:	bf04      	itt	eq
   da95c:	091b      	lsreq	r3, r3, #4
   da95e:	3204      	addeq	r2, #4
   da960:	0799      	lsls	r1, r3, #30
   da962:	bf04      	itt	eq
   da964:	089b      	lsreq	r3, r3, #2
   da966:	3202      	addeq	r2, #2
   da968:	07d9      	lsls	r1, r3, #31
   da96a:	d402      	bmi.n	da972 <__lo0bits+0x4c>
   da96c:	085b      	lsrs	r3, r3, #1
   da96e:	d005      	beq.n	da97c <__lo0bits+0x56>
   da970:	3201      	adds	r2, #1
   da972:	6003      	str	r3, [r0, #0]
   da974:	4610      	mov	r0, r2
   da976:	4770      	bx	lr
   da978:	2000      	movs	r0, #0
   da97a:	4770      	bx	lr
   da97c:	2020      	movs	r0, #32
   da97e:	4770      	bx	lr

000da980 <__i2b>:
   da980:	b510      	push	{r4, lr}
   da982:	460c      	mov	r4, r1
   da984:	2101      	movs	r1, #1
   da986:	f7ff fee9 	bl	da75c <_Balloc>
   da98a:	2201      	movs	r2, #1
   da98c:	6144      	str	r4, [r0, #20]
   da98e:	6102      	str	r2, [r0, #16]
   da990:	bd10      	pop	{r4, pc}

000da992 <__multiply>:
   da992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da996:	4614      	mov	r4, r2
   da998:	690a      	ldr	r2, [r1, #16]
   da99a:	6923      	ldr	r3, [r4, #16]
   da99c:	429a      	cmp	r2, r3
   da99e:	bfb8      	it	lt
   da9a0:	460b      	movlt	r3, r1
   da9a2:	4688      	mov	r8, r1
   da9a4:	bfbc      	itt	lt
   da9a6:	46a0      	movlt	r8, r4
   da9a8:	461c      	movlt	r4, r3
   da9aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
   da9ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da9b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da9b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   da9ba:	eb07 0609 	add.w	r6, r7, r9
   da9be:	429e      	cmp	r6, r3
   da9c0:	bfc8      	it	gt
   da9c2:	3101      	addgt	r1, #1
   da9c4:	f7ff feca 	bl	da75c <_Balloc>
   da9c8:	f100 0514 	add.w	r5, r0, #20
   da9cc:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   da9d0:	462b      	mov	r3, r5
   da9d2:	2200      	movs	r2, #0
   da9d4:	4563      	cmp	r3, ip
   da9d6:	d202      	bcs.n	da9de <__multiply+0x4c>
   da9d8:	f843 2b04 	str.w	r2, [r3], #4
   da9dc:	e7fa      	b.n	da9d4 <__multiply+0x42>
   da9de:	f104 0214 	add.w	r2, r4, #20
   da9e2:	f108 0114 	add.w	r1, r8, #20
   da9e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da9ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   da9ee:	9300      	str	r3, [sp, #0]
   da9f0:	9b00      	ldr	r3, [sp, #0]
   da9f2:	9201      	str	r2, [sp, #4]
   da9f4:	4293      	cmp	r3, r2
   da9f6:	d957      	bls.n	daaa8 <__multiply+0x116>
   da9f8:	f8b2 b000 	ldrh.w	fp, [r2]
   da9fc:	f1bb 0f00 	cmp.w	fp, #0
   daa00:	d023      	beq.n	daa4a <__multiply+0xb8>
   daa02:	4689      	mov	r9, r1
   daa04:	46ae      	mov	lr, r5
   daa06:	f04f 0800 	mov.w	r8, #0
   daa0a:	f859 4b04 	ldr.w	r4, [r9], #4
   daa0e:	f8be a000 	ldrh.w	sl, [lr]
   daa12:	b2a3      	uxth	r3, r4
   daa14:	fb0b a303 	mla	r3, fp, r3, sl
   daa18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   daa1c:	f8de 4000 	ldr.w	r4, [lr]
   daa20:	4443      	add	r3, r8
   daa22:	ea4f 4814 	mov.w	r8, r4, lsr #16
   daa26:	fb0b 840a 	mla	r4, fp, sl, r8
   daa2a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   daa2e:	46f2      	mov	sl, lr
   daa30:	b29b      	uxth	r3, r3
   daa32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   daa36:	454f      	cmp	r7, r9
   daa38:	ea4f 4814 	mov.w	r8, r4, lsr #16
   daa3c:	f84a 3b04 	str.w	r3, [sl], #4
   daa40:	d901      	bls.n	daa46 <__multiply+0xb4>
   daa42:	46d6      	mov	lr, sl
   daa44:	e7e1      	b.n	daa0a <__multiply+0x78>
   daa46:	f8ce 8004 	str.w	r8, [lr, #4]
   daa4a:	9b01      	ldr	r3, [sp, #4]
   daa4c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   daa50:	3204      	adds	r2, #4
   daa52:	f1ba 0f00 	cmp.w	sl, #0
   daa56:	d021      	beq.n	daa9c <__multiply+0x10a>
   daa58:	682b      	ldr	r3, [r5, #0]
   daa5a:	462c      	mov	r4, r5
   daa5c:	4689      	mov	r9, r1
   daa5e:	f04f 0800 	mov.w	r8, #0
   daa62:	f8b9 e000 	ldrh.w	lr, [r9]
   daa66:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   daa6a:	fb0a be0e 	mla	lr, sl, lr, fp
   daa6e:	44f0      	add	r8, lr
   daa70:	46a3      	mov	fp, r4
   daa72:	b29b      	uxth	r3, r3
   daa74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   daa78:	f84b 3b04 	str.w	r3, [fp], #4
   daa7c:	f859 3b04 	ldr.w	r3, [r9], #4
   daa80:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   daa84:	0c1b      	lsrs	r3, r3, #16
   daa86:	fb0a e303 	mla	r3, sl, r3, lr
   daa8a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   daa8e:	454f      	cmp	r7, r9
   daa90:	ea4f 4813 	mov.w	r8, r3, lsr #16
   daa94:	d901      	bls.n	daa9a <__multiply+0x108>
   daa96:	465c      	mov	r4, fp
   daa98:	e7e3      	b.n	daa62 <__multiply+0xd0>
   daa9a:	6063      	str	r3, [r4, #4]
   daa9c:	3504      	adds	r5, #4
   daa9e:	e7a7      	b.n	da9f0 <__multiply+0x5e>
   daaa0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   daaa4:	b913      	cbnz	r3, daaac <__multiply+0x11a>
   daaa6:	3e01      	subs	r6, #1
   daaa8:	2e00      	cmp	r6, #0
   daaaa:	dcf9      	bgt.n	daaa0 <__multiply+0x10e>
   daaac:	6106      	str	r6, [r0, #16]
   daaae:	b003      	add	sp, #12
   daab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daab4 <__pow5mult>:
   daab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daab8:	4615      	mov	r5, r2
   daaba:	f012 0203 	ands.w	r2, r2, #3
   daabe:	4606      	mov	r6, r0
   daac0:	460f      	mov	r7, r1
   daac2:	d007      	beq.n	daad4 <__pow5mult+0x20>
   daac4:	3a01      	subs	r2, #1
   daac6:	4c21      	ldr	r4, [pc, #132]	; (dab4c <__pow5mult+0x98>)
   daac8:	2300      	movs	r3, #0
   daaca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   daace:	f7ff fe91 	bl	da7f4 <__multadd>
   daad2:	4607      	mov	r7, r0
   daad4:	10ad      	asrs	r5, r5, #2
   daad6:	d036      	beq.n	dab46 <__pow5mult+0x92>
   daad8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   daada:	b93c      	cbnz	r4, daaec <__pow5mult+0x38>
   daadc:	2010      	movs	r0, #16
   daade:	f7fb fbcb 	bl	d6278 <malloc>
   daae2:	6270      	str	r0, [r6, #36]	; 0x24
   daae4:	6044      	str	r4, [r0, #4]
   daae6:	6084      	str	r4, [r0, #8]
   daae8:	6004      	str	r4, [r0, #0]
   daaea:	60c4      	str	r4, [r0, #12]
   daaec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   daaf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   daaf4:	b94c      	cbnz	r4, dab0a <__pow5mult+0x56>
   daaf6:	f240 2171 	movw	r1, #625	; 0x271
   daafa:	4630      	mov	r0, r6
   daafc:	f7ff ff40 	bl	da980 <__i2b>
   dab00:	2300      	movs	r3, #0
   dab02:	f8c8 0008 	str.w	r0, [r8, #8]
   dab06:	4604      	mov	r4, r0
   dab08:	6003      	str	r3, [r0, #0]
   dab0a:	f04f 0800 	mov.w	r8, #0
   dab0e:	07eb      	lsls	r3, r5, #31
   dab10:	d50a      	bpl.n	dab28 <__pow5mult+0x74>
   dab12:	4639      	mov	r1, r7
   dab14:	4622      	mov	r2, r4
   dab16:	4630      	mov	r0, r6
   dab18:	f7ff ff3b 	bl	da992 <__multiply>
   dab1c:	4639      	mov	r1, r7
   dab1e:	4681      	mov	r9, r0
   dab20:	4630      	mov	r0, r6
   dab22:	f7ff fe50 	bl	da7c6 <_Bfree>
   dab26:	464f      	mov	r7, r9
   dab28:	106d      	asrs	r5, r5, #1
   dab2a:	d00c      	beq.n	dab46 <__pow5mult+0x92>
   dab2c:	6820      	ldr	r0, [r4, #0]
   dab2e:	b108      	cbz	r0, dab34 <__pow5mult+0x80>
   dab30:	4604      	mov	r4, r0
   dab32:	e7ec      	b.n	dab0e <__pow5mult+0x5a>
   dab34:	4622      	mov	r2, r4
   dab36:	4621      	mov	r1, r4
   dab38:	4630      	mov	r0, r6
   dab3a:	f7ff ff2a 	bl	da992 <__multiply>
   dab3e:	6020      	str	r0, [r4, #0]
   dab40:	f8c0 8000 	str.w	r8, [r0]
   dab44:	e7f4      	b.n	dab30 <__pow5mult+0x7c>
   dab46:	4638      	mov	r0, r7
   dab48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dab4c:	000db8b0 	.word	0x000db8b0

000dab50 <__lshift>:
   dab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dab54:	460c      	mov	r4, r1
   dab56:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dab5a:	6926      	ldr	r6, [r4, #16]
   dab5c:	6849      	ldr	r1, [r1, #4]
   dab5e:	68a3      	ldr	r3, [r4, #8]
   dab60:	4456      	add	r6, sl
   dab62:	4607      	mov	r7, r0
   dab64:	4691      	mov	r9, r2
   dab66:	1c75      	adds	r5, r6, #1
   dab68:	42ab      	cmp	r3, r5
   dab6a:	da02      	bge.n	dab72 <__lshift+0x22>
   dab6c:	3101      	adds	r1, #1
   dab6e:	005b      	lsls	r3, r3, #1
   dab70:	e7fa      	b.n	dab68 <__lshift+0x18>
   dab72:	4638      	mov	r0, r7
   dab74:	f7ff fdf2 	bl	da75c <_Balloc>
   dab78:	2300      	movs	r3, #0
   dab7a:	4680      	mov	r8, r0
   dab7c:	f100 0114 	add.w	r1, r0, #20
   dab80:	461a      	mov	r2, r3
   dab82:	4553      	cmp	r3, sl
   dab84:	da03      	bge.n	dab8e <__lshift+0x3e>
   dab86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dab8a:	3301      	adds	r3, #1
   dab8c:	e7f9      	b.n	dab82 <__lshift+0x32>
   dab8e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dab92:	6920      	ldr	r0, [r4, #16]
   dab94:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dab98:	f019 091f 	ands.w	r9, r9, #31
   dab9c:	f104 0114 	add.w	r1, r4, #20
   daba0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   daba4:	d014      	beq.n	dabd0 <__lshift+0x80>
   daba6:	f1c9 0c20 	rsb	ip, r9, #32
   dabaa:	2200      	movs	r2, #0
   dabac:	6808      	ldr	r0, [r1, #0]
   dabae:	fa00 f009 	lsl.w	r0, r0, r9
   dabb2:	4302      	orrs	r2, r0
   dabb4:	469a      	mov	sl, r3
   dabb6:	f843 2b04 	str.w	r2, [r3], #4
   dabba:	f851 2b04 	ldr.w	r2, [r1], #4
   dabbe:	458e      	cmp	lr, r1
   dabc0:	fa22 f20c 	lsr.w	r2, r2, ip
   dabc4:	d8f2      	bhi.n	dabac <__lshift+0x5c>
   dabc6:	f8ca 2004 	str.w	r2, [sl, #4]
   dabca:	b142      	cbz	r2, dabde <__lshift+0x8e>
   dabcc:	1cb5      	adds	r5, r6, #2
   dabce:	e006      	b.n	dabde <__lshift+0x8e>
   dabd0:	3b04      	subs	r3, #4
   dabd2:	f851 2b04 	ldr.w	r2, [r1], #4
   dabd6:	f843 2f04 	str.w	r2, [r3, #4]!
   dabda:	458e      	cmp	lr, r1
   dabdc:	d8f9      	bhi.n	dabd2 <__lshift+0x82>
   dabde:	3d01      	subs	r5, #1
   dabe0:	4638      	mov	r0, r7
   dabe2:	f8c8 5010 	str.w	r5, [r8, #16]
   dabe6:	4621      	mov	r1, r4
   dabe8:	f7ff fded 	bl	da7c6 <_Bfree>
   dabec:	4640      	mov	r0, r8
   dabee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dabf2 <__mcmp>:
   dabf2:	6903      	ldr	r3, [r0, #16]
   dabf4:	690a      	ldr	r2, [r1, #16]
   dabf6:	1a9b      	subs	r3, r3, r2
   dabf8:	b510      	push	{r4, lr}
   dabfa:	d111      	bne.n	dac20 <__mcmp+0x2e>
   dabfc:	0092      	lsls	r2, r2, #2
   dabfe:	3014      	adds	r0, #20
   dac00:	3114      	adds	r1, #20
   dac02:	1883      	adds	r3, r0, r2
   dac04:	440a      	add	r2, r1
   dac06:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dac0a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dac0e:	428c      	cmp	r4, r1
   dac10:	d002      	beq.n	dac18 <__mcmp+0x26>
   dac12:	d307      	bcc.n	dac24 <__mcmp+0x32>
   dac14:	2001      	movs	r0, #1
   dac16:	bd10      	pop	{r4, pc}
   dac18:	4298      	cmp	r0, r3
   dac1a:	d3f4      	bcc.n	dac06 <__mcmp+0x14>
   dac1c:	2000      	movs	r0, #0
   dac1e:	bd10      	pop	{r4, pc}
   dac20:	4618      	mov	r0, r3
   dac22:	bd10      	pop	{r4, pc}
   dac24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dac28:	bd10      	pop	{r4, pc}

000dac2a <__mdiff>:
   dac2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dac2e:	460c      	mov	r4, r1
   dac30:	4607      	mov	r7, r0
   dac32:	4611      	mov	r1, r2
   dac34:	4620      	mov	r0, r4
   dac36:	4615      	mov	r5, r2
   dac38:	f7ff ffdb 	bl	dabf2 <__mcmp>
   dac3c:	1e06      	subs	r6, r0, #0
   dac3e:	d108      	bne.n	dac52 <__mdiff+0x28>
   dac40:	4631      	mov	r1, r6
   dac42:	4638      	mov	r0, r7
   dac44:	f7ff fd8a 	bl	da75c <_Balloc>
   dac48:	2301      	movs	r3, #1
   dac4a:	6103      	str	r3, [r0, #16]
   dac4c:	6146      	str	r6, [r0, #20]
   dac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dac52:	bfbc      	itt	lt
   dac54:	4623      	movlt	r3, r4
   dac56:	462c      	movlt	r4, r5
   dac58:	4638      	mov	r0, r7
   dac5a:	6861      	ldr	r1, [r4, #4]
   dac5c:	bfba      	itte	lt
   dac5e:	461d      	movlt	r5, r3
   dac60:	2601      	movlt	r6, #1
   dac62:	2600      	movge	r6, #0
   dac64:	f7ff fd7a 	bl	da75c <_Balloc>
   dac68:	692b      	ldr	r3, [r5, #16]
   dac6a:	60c6      	str	r6, [r0, #12]
   dac6c:	6926      	ldr	r6, [r4, #16]
   dac6e:	f105 0914 	add.w	r9, r5, #20
   dac72:	3414      	adds	r4, #20
   dac74:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dac78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dac7c:	f100 0514 	add.w	r5, r0, #20
   dac80:	f04f 0c00 	mov.w	ip, #0
   dac84:	f854 3b04 	ldr.w	r3, [r4], #4
   dac88:	f859 2b04 	ldr.w	r2, [r9], #4
   dac8c:	fa1c f183 	uxtah	r1, ip, r3
   dac90:	fa1f fe82 	uxth.w	lr, r2
   dac94:	0c12      	lsrs	r2, r2, #16
   dac96:	ebce 0101 	rsb	r1, lr, r1
   dac9a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dac9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   daca2:	b289      	uxth	r1, r1
   daca4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   daca8:	45c8      	cmp	r8, r9
   dacaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dacae:	46a6      	mov	lr, r4
   dacb0:	f845 3b04 	str.w	r3, [r5], #4
   dacb4:	d8e6      	bhi.n	dac84 <__mdiff+0x5a>
   dacb6:	45be      	cmp	lr, r7
   dacb8:	d20e      	bcs.n	dacd8 <__mdiff+0xae>
   dacba:	f85e 1b04 	ldr.w	r1, [lr], #4
   dacbe:	fa1c f281 	uxtah	r2, ip, r1
   dacc2:	1413      	asrs	r3, r2, #16
   dacc4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dacc8:	b292      	uxth	r2, r2
   dacca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dacce:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dacd2:	f845 2b04 	str.w	r2, [r5], #4
   dacd6:	e7ee      	b.n	dacb6 <__mdiff+0x8c>
   dacd8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dacdc:	b90b      	cbnz	r3, dace2 <__mdiff+0xb8>
   dacde:	3e01      	subs	r6, #1
   dace0:	e7fa      	b.n	dacd8 <__mdiff+0xae>
   dace2:	6106      	str	r6, [r0, #16]
   dace4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dace8 <__ulp>:
   dace8:	4b12      	ldr	r3, [pc, #72]	; (dad34 <__ulp+0x4c>)
   dacea:	ee10 2a90 	vmov	r2, s1
   dacee:	401a      	ands	r2, r3
   dacf0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dacf4:	2b00      	cmp	r3, #0
   dacf6:	dd02      	ble.n	dacfe <__ulp+0x16>
   dacf8:	2000      	movs	r0, #0
   dacfa:	4619      	mov	r1, r3
   dacfc:	e017      	b.n	dad2e <__ulp+0x46>
   dacfe:	425b      	negs	r3, r3
   dad00:	151b      	asrs	r3, r3, #20
   dad02:	2b13      	cmp	r3, #19
   dad04:	f04f 0000 	mov.w	r0, #0
   dad08:	f04f 0100 	mov.w	r1, #0
   dad0c:	dc04      	bgt.n	dad18 <__ulp+0x30>
   dad0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dad12:	fa42 f103 	asr.w	r1, r2, r3
   dad16:	e00a      	b.n	dad2e <__ulp+0x46>
   dad18:	3b14      	subs	r3, #20
   dad1a:	2b1e      	cmp	r3, #30
   dad1c:	f04f 0201 	mov.w	r2, #1
   dad20:	bfda      	itte	le
   dad22:	f1c3 031f 	rsble	r3, r3, #31
   dad26:	fa02 f303 	lslle.w	r3, r2, r3
   dad2a:	4613      	movgt	r3, r2
   dad2c:	4618      	mov	r0, r3
   dad2e:	ec41 0b10 	vmov	d0, r0, r1
   dad32:	4770      	bx	lr
   dad34:	7ff00000 	.word	0x7ff00000

000dad38 <__b2d>:
   dad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dad3a:	6905      	ldr	r5, [r0, #16]
   dad3c:	f100 0614 	add.w	r6, r0, #20
   dad40:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dad44:	1f2f      	subs	r7, r5, #4
   dad46:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dad4a:	4620      	mov	r0, r4
   dad4c:	f7ff fdcb 	bl	da8e6 <__hi0bits>
   dad50:	f1c0 0320 	rsb	r3, r0, #32
   dad54:	280a      	cmp	r0, #10
   dad56:	600b      	str	r3, [r1, #0]
   dad58:	dc14      	bgt.n	dad84 <__b2d+0x4c>
   dad5a:	f1c0 0e0b 	rsb	lr, r0, #11
   dad5e:	fa24 f10e 	lsr.w	r1, r4, lr
   dad62:	42be      	cmp	r6, r7
   dad64:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dad68:	bf34      	ite	cc
   dad6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dad6e:	2100      	movcs	r1, #0
   dad70:	3015      	adds	r0, #21
   dad72:	fa04 f000 	lsl.w	r0, r4, r0
   dad76:	fa21 f10e 	lsr.w	r1, r1, lr
   dad7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dad7e:	ea40 0201 	orr.w	r2, r0, r1
   dad82:	e023      	b.n	dadcc <__b2d+0x94>
   dad84:	42be      	cmp	r6, r7
   dad86:	bf3a      	itte	cc
   dad88:	f1a5 0708 	subcc.w	r7, r5, #8
   dad8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dad90:	2100      	movcs	r1, #0
   dad92:	380b      	subs	r0, #11
   dad94:	d015      	beq.n	dadc2 <__b2d+0x8a>
   dad96:	4084      	lsls	r4, r0
   dad98:	f1c0 0520 	rsb	r5, r0, #32
   dad9c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dada0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dada4:	42b7      	cmp	r7, r6
   dada6:	fa21 fe05 	lsr.w	lr, r1, r5
   dadaa:	ea44 030e 	orr.w	r3, r4, lr
   dadae:	bf8c      	ite	hi
   dadb0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dadb4:	2400      	movls	r4, #0
   dadb6:	fa01 f000 	lsl.w	r0, r1, r0
   dadba:	40ec      	lsrs	r4, r5
   dadbc:	ea40 0204 	orr.w	r2, r0, r4
   dadc0:	e004      	b.n	dadcc <__b2d+0x94>
   dadc2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dadc6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dadca:	460a      	mov	r2, r1
   dadcc:	ec43 2b10 	vmov	d0, r2, r3
   dadd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dadd2 <__d2b>:
   dadd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dadd6:	460e      	mov	r6, r1
   dadd8:	2101      	movs	r1, #1
   dadda:	ec59 8b10 	vmov	r8, r9, d0
   dadde:	4615      	mov	r5, r2
   dade0:	f7ff fcbc 	bl	da75c <_Balloc>
   dade4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dade8:	4607      	mov	r7, r0
   dadea:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dadee:	b10c      	cbz	r4, dadf4 <__d2b+0x22>
   dadf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dadf4:	9301      	str	r3, [sp, #4]
   dadf6:	f1b8 0f00 	cmp.w	r8, #0
   dadfa:	d019      	beq.n	dae30 <__d2b+0x5e>
   dadfc:	a802      	add	r0, sp, #8
   dadfe:	f840 8d08 	str.w	r8, [r0, #-8]!
   dae02:	f7ff fd90 	bl	da926 <__lo0bits>
   dae06:	9b00      	ldr	r3, [sp, #0]
   dae08:	b148      	cbz	r0, dae1e <__d2b+0x4c>
   dae0a:	9a01      	ldr	r2, [sp, #4]
   dae0c:	f1c0 0120 	rsb	r1, r0, #32
   dae10:	fa02 f101 	lsl.w	r1, r2, r1
   dae14:	430b      	orrs	r3, r1
   dae16:	40c2      	lsrs	r2, r0
   dae18:	617b      	str	r3, [r7, #20]
   dae1a:	9201      	str	r2, [sp, #4]
   dae1c:	e000      	b.n	dae20 <__d2b+0x4e>
   dae1e:	617b      	str	r3, [r7, #20]
   dae20:	9b01      	ldr	r3, [sp, #4]
   dae22:	61bb      	str	r3, [r7, #24]
   dae24:	2b00      	cmp	r3, #0
   dae26:	bf14      	ite	ne
   dae28:	2102      	movne	r1, #2
   dae2a:	2101      	moveq	r1, #1
   dae2c:	6139      	str	r1, [r7, #16]
   dae2e:	e007      	b.n	dae40 <__d2b+0x6e>
   dae30:	a801      	add	r0, sp, #4
   dae32:	f7ff fd78 	bl	da926 <__lo0bits>
   dae36:	9b01      	ldr	r3, [sp, #4]
   dae38:	617b      	str	r3, [r7, #20]
   dae3a:	2101      	movs	r1, #1
   dae3c:	6139      	str	r1, [r7, #16]
   dae3e:	3020      	adds	r0, #32
   dae40:	b134      	cbz	r4, dae50 <__d2b+0x7e>
   dae42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dae46:	4404      	add	r4, r0
   dae48:	6034      	str	r4, [r6, #0]
   dae4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dae4e:	e009      	b.n	dae64 <__d2b+0x92>
   dae50:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dae54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dae58:	6030      	str	r0, [r6, #0]
   dae5a:	6918      	ldr	r0, [r3, #16]
   dae5c:	f7ff fd43 	bl	da8e6 <__hi0bits>
   dae60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dae64:	6028      	str	r0, [r5, #0]
   dae66:	4638      	mov	r0, r7
   dae68:	b003      	add	sp, #12
   dae6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dae6e <__ratio>:
   dae6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dae72:	4688      	mov	r8, r1
   dae74:	4669      	mov	r1, sp
   dae76:	4681      	mov	r9, r0
   dae78:	f7ff ff5e 	bl	dad38 <__b2d>
   dae7c:	a901      	add	r1, sp, #4
   dae7e:	4640      	mov	r0, r8
   dae80:	ec55 4b10 	vmov	r4, r5, d0
   dae84:	f7ff ff58 	bl	dad38 <__b2d>
   dae88:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dae8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dae90:	1a9a      	subs	r2, r3, r2
   dae92:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dae96:	1ac9      	subs	r1, r1, r3
   dae98:	ec57 6b10 	vmov	r6, r7, d0
   dae9c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   daea0:	2b00      	cmp	r3, #0
   daea2:	bfcc      	ite	gt
   daea4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   daea8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   daeac:	4632      	mov	r2, r6
   daeae:	463b      	mov	r3, r7
   daeb0:	4620      	mov	r0, r4
   daeb2:	4629      	mov	r1, r5
   daeb4:	f7fd f96e 	bl	d8194 <__aeabi_ddiv>
   daeb8:	ec41 0b10 	vmov	d0, r0, r1
   daebc:	b003      	add	sp, #12
   daebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000daec2 <__copybits>:
   daec2:	3901      	subs	r1, #1
   daec4:	b510      	push	{r4, lr}
   daec6:	1149      	asrs	r1, r1, #5
   daec8:	6914      	ldr	r4, [r2, #16]
   daeca:	3101      	adds	r1, #1
   daecc:	f102 0314 	add.w	r3, r2, #20
   daed0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   daed4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   daed8:	42a3      	cmp	r3, r4
   daeda:	4602      	mov	r2, r0
   daedc:	d204      	bcs.n	daee8 <__copybits+0x26>
   daede:	f853 2b04 	ldr.w	r2, [r3], #4
   daee2:	f840 2b04 	str.w	r2, [r0], #4
   daee6:	e7f7      	b.n	daed8 <__copybits+0x16>
   daee8:	2300      	movs	r3, #0
   daeea:	428a      	cmp	r2, r1
   daeec:	d202      	bcs.n	daef4 <__copybits+0x32>
   daeee:	f842 3b04 	str.w	r3, [r2], #4
   daef2:	e7fa      	b.n	daeea <__copybits+0x28>
   daef4:	bd10      	pop	{r4, pc}

000daef6 <__any_on>:
   daef6:	f100 0214 	add.w	r2, r0, #20
   daefa:	6900      	ldr	r0, [r0, #16]
   daefc:	114b      	asrs	r3, r1, #5
   daefe:	4298      	cmp	r0, r3
   daf00:	b510      	push	{r4, lr}
   daf02:	db0c      	blt.n	daf1e <__any_on+0x28>
   daf04:	dd0c      	ble.n	daf20 <__any_on+0x2a>
   daf06:	f011 011f 	ands.w	r1, r1, #31
   daf0a:	d009      	beq.n	daf20 <__any_on+0x2a>
   daf0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   daf10:	fa24 f001 	lsr.w	r0, r4, r1
   daf14:	fa00 f101 	lsl.w	r1, r0, r1
   daf18:	428c      	cmp	r4, r1
   daf1a:	d10c      	bne.n	daf36 <__any_on+0x40>
   daf1c:	e000      	b.n	daf20 <__any_on+0x2a>
   daf1e:	4603      	mov	r3, r0
   daf20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   daf24:	4293      	cmp	r3, r2
   daf26:	d904      	bls.n	daf32 <__any_on+0x3c>
   daf28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   daf2c:	2900      	cmp	r1, #0
   daf2e:	d0f9      	beq.n	daf24 <__any_on+0x2e>
   daf30:	e001      	b.n	daf36 <__any_on+0x40>
   daf32:	2000      	movs	r0, #0
   daf34:	bd10      	pop	{r4, pc}
   daf36:	2001      	movs	r0, #1
   daf38:	bd10      	pop	{r4, pc}

000daf3a <_calloc_r>:
   daf3a:	b538      	push	{r3, r4, r5, lr}
   daf3c:	fb02 f401 	mul.w	r4, r2, r1
   daf40:	4621      	mov	r1, r4
   daf42:	f7fb f9c9 	bl	d62d8 <_malloc_r>
   daf46:	4605      	mov	r5, r0
   daf48:	b118      	cbz	r0, daf52 <_calloc_r+0x18>
   daf4a:	4622      	mov	r2, r4
   daf4c:	2100      	movs	r1, #0
   daf4e:	f7fd fe0a 	bl	d8b66 <memset>
   daf52:	4628      	mov	r0, r5
   daf54:	bd38      	pop	{r3, r4, r5, pc}

000daf56 <__env_lock>:
   daf56:	4770      	bx	lr

000daf58 <__env_unlock>:
   daf58:	4770      	bx	lr

000daf5a <link_code_end>:
	...

000daf5c <dynalib_user>:
   daf5c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   daf6c:	0000 0000 0100 0402 1008 7453 7261 7574     ..........Startu
   daf7c:	2070 7553 6363 7365 6673 6c75 0000 0000     p Successful....
	...
   dafb4:	0000 6554 706d 4d5f 7861 3a20 2520 2e33     ..Temp_Max : %3.
   dafc4:	6631 5400 6d65 5f70 694d 2078 203a 3325     1f.Temp_Mix : %3
   dafd4:	312e 0066 7548 696d 6964 7974 4d5f 7861     .1f.Humidity_Max
   dafe4:	203a 3325 312e 0066 7548 696d 6964 7974     : %3.1f.Humidity
   daff4:	4d5f 6e69 3a20 2520 2e33 6631 7b00 5422     _Min : %3.1f.{"T
   db004:	6d65 6570 6172 7574 6572 3a22 3425 312e     emperature":%4.1
   db014:	2c66 2220 7548 696d 6964 7974 3a22 3425     f, "Humidity":%4
   db024:	312e 2c66 2220 7250 7365 7573 6572 3a22     .1f, "Pressure":
   db034:	3425 312e 7d66 7300 6f74 6172 6567 662d     %4.1f}.storage-f
   db044:	6361 6c69 7469 2d79 6f68 6b6f 4e00 206f     acility-hook.No 
   db054:	6144 6174 5500 6962 6f64 7374 4820 6f6f     Data.Ubidots Hoo
   db064:	006b 6552 7073 6e6f 6573 5220 6365 6965     k.Response Recei
   db074:	6576 0064 7453 7461 0065 3425 312e 2a66     ved.State.%4.1f*
   db084:	0043 3425 312e 2566 0025 3425 312e 4866     C.%4.1f%%.%4.1fH
   db094:	6150 4600 6961 656c 2064 6f74 7020 7265     Pa.Failed to per
   db0a4:	6f66 6d72 7220 6165 6964 676e 3a20 0028     form reading :(.
   db0b4:	6f4c 0067 227b 6c61 7265 2d74 6574 706d     Log.{"alert-temp
   db0c4:	7265 7461 7275 2265 253a 2e34 6631 007d     erature":%4.1f}.
   db0d4:	6363 612d 656c 7472 772d 6265 6f68 6b6f     cc-alert-webhook
   db0e4:	7b00 6122 656c 7472 682d 6d75 6469 7469     .{"alert-humidit
   db0f4:	2279 253a 2e34 6631 007d 6553 2074 6556     y":%4.1f}.Set Ve
   db104:	6272 736f 2065 6f4d 6564 3000 4300 656c     rbose Mode.0.Cle
   db114:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
   db124:	0065 7246 6d6f 2520 2073 6f74 2520 0073     e.From %s to %s.
   db134:	7453 7461 2065 7254 6e61 6973 6974 6e6f     State Transition
   db144:	4500 7272 726f 7420 6b61 6e69 2067 654d     .Error taking Me
   db154:	7361 7275 6d65 6e65 7374 7300 6170 6b72     asurements.spark
   db164:	642f 7665 6369 2f65 6573 7373 6f69 2f6e     /device/session/
   db174:	6e65 0064 7245 6f72 2072 7453 7461 2065     end.Error State 
   db184:	202d 6552 6573 0074 7055 6570 2072 6854     - Reset.Upper Th
   db194:	6572 6873 6c6f 2064 6553 0074 6f4c 6577     reshold Set.Lowe
   db1a4:	2072 6854 6572 6873 6c6f 2064 6553 0074     r Threshold Set.
   db1b4:	6552 656c 7361 0065 6574 706d 7265 7461     Release.temperat
   db1c4:	7275 0065 7568 696d 6964 7974 7000 6572     ure.humidity.pre
   db1d4:	7373 7275 0065 6574 706d 7265 7461 7275     ssure.temperatur
   db1e4:	2d65 7055 6570 0072 6574 706d 7265 7461     e-Upper.temperat
   db1f4:	7275 2d65 6f6c 6577 0072 7568 696d 6964     ure-lower.humidi
   db204:	7974 752d 7070 7265 6800 6d75 6469 7469     ty-upper.humidit
   db214:	2d79 6f6c 6577 0072 654d 7361 7275 2d65     y-lower.Measure-
   db224:	6f4e 0077 6556 6272 736f 2d65 6f4d 6564     Now.Verbose-Mode
   db234:	5400 6d65 2d70 7055 6570 2d72 694c 696d     .Temp-Upper-Limi
   db244:	0074 6554 706d 4c2d 776f 7265 4c2d 6d69     t.Temp-Lower-Lim
   db254:	7469 4800 6d75 6469 7469 2d79 6f4c 6577     it.Humidity-Lowe
   db264:	2d72 694c 696d 0074 7548 696d 7464 2d79     r-Limit.Humidty-
   db274:	7075 6570 2d72 694c 696d 0074 7245 6f72     upper-Limit.Erro
   db284:	2072 202d 4d42 3645 3038 4920 696e 6974     r - BME680 Initi
   db294:	6c61 7a69 7461 6f69 006e 6146 6c69 6465     alization.Failed
   db2a4:	7420 206f 6f63 6e6e 6365 0074 7453 7261      to connect.Star
   db2b4:	7574 0070 2e31 3730 0000 0000               tup.1.07....

000db2c0 <_ZTVN5spark13CellularClassE>:
	...
   db2c8:	63bb 000d 63b1 000d 63a7 000d 635d 000d     .c...c...c..]c..
   db2d8:	639b 000d 638f 000d 6383 000d 637b 000d     .c...c...c..{c..
   db2e8:	6371 000d 6367 000d 6e65 000d               qc..gc..en..

000db2f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db2fc:	63f5 000d 63fb 000d 6451 000d 6409 000d     .c...c..Qd...d..
   db30c:	63f7 000d                                   .c..

000db310 <_ZTVN5spark13EthernetClassE>:
	...
   db318:	6a67 000d 6a5d 000d 6a53 000d 6a49 000d     gj..]j..Sj..Ij..
   db328:	6a3d 000d 6a31 000d 6a25 000d 6a1d 000d     =j..1j..%j...j..
   db338:	6a13 000d 6a09 000d 6e65 000d               .j...j..en..

000db344 <_ZTV7TwoWire>:
	...
   db34c:	6a85 000d 6acf 000d 6aa7 000d 6a87 000d     .j...j...j...j..
   db35c:	6aaf 000d 6ab7 000d 6abf 000d 6ac7 000d     .j...j...j...j..

000db36c <_ZTV9IPAddress>:
	...
   db374:	6b9d 000d 6b8d 000d 6b8f 000d 6162 6475     .k...k...k..baud
   db384:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   db394:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   db3a4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   db3b4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   db3c4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   db3d4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   db3e4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   db3f4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   db404:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   db414:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   db424:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   db434:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   db444:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   db454:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000db460 <_ZTVN5spark9MeshClassE>:
	...
   db468:	6cdf 000d 6cd5 000d 6ccb 000d 6cc1 000d     .l...l...l...l..
   db478:	6cb5 000d 6ca9 000d 6c9d 000d 6c95 000d     .l...l...l...l..
   db488:	6c8b 000d 6c81 000d 6e65 000d               .l...l..en..

000db494 <_ZTVN5spark12NetworkClassE>:
	...
   db49c:	6dfd 000d 6e07 000d 6e11 000d 6e1b 000d     .m...n...n...n..
   db4ac:	6e25 000d 6e31 000d 6e3d 000d 6e49 000d     %n..1n..=n..In..
   db4bc:	6e51 000d 6e5b 000d 6e65 000d               Qn..[n..en..

000db4c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db4c8:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   db4d8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   db4e8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000db4f8 <_ZTV11USARTSerial>:
	...
   db500:	744d 000d 749d 000d 74ab 000d 6f45 000d     Mt...t...t..Eo..
   db510:	7461 000d 7483 000d 746f 000d 7497 000d     at...t..ot...t..
   db520:	744f 000d 7453 000d                         Ot..St..

000db528 <_ZTV9USBSerial>:
	...
   db530:	7555 000d 75a5 000d 75b3 000d 6f45 000d     Uu...u...u..Eo..
   db540:	7591 000d 7557 000d 756d 000d 759f 000d     .u..Wu..mu...u..
   db550:	7583 000d 7551 000d                         .u..Qu..

000db558 <_ZSt7nothrow>:
	...

000db559 <_ctype_>:
   db559:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db569:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db579:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db589:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db599:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db5a9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db5b9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db5c9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db5d9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db65c <__sf_fake_stdin>:
	...

000db67c <__sf_fake_stdout>:
	...

000db69c <__sf_fake_stderr>:
	...
   db6bc:	4f50 4953 0058 002e                         POSIX...

000db6c4 <__month_lengths>:
   db6c4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   db6d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db6e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db6f4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   db704:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db714:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000db724 <fpi.5344>:
   db724:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db734:	0000 0000                                   ....

000db738 <fpinan.5380>:
   db738:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db748:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000db758 <tinytens>:
   db758:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db768:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db778:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   db788:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   db798:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   db7a8:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   db7b8:	2575 006e 0000 0000                         u%n.....

000db7c0 <__mprec_tens>:
   db7c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db7d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db7e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db7f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db800:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db810:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db820:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db830:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db840:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db850:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db860:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db870:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db880:	9db4 79d9 7843 44ea                         ...yCx.D

000db888 <__mprec_bigtens>:
   db888:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db898:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db8a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db8b0 <p05.5387>:
   db8b0:	0005 0000 0019 0000 007d 0000               ........}...

000db8bc <link_const_variable_data_end>:
   db8bc:	000d5791 	.word	0x000d5791
   db8c0:	000d5cdd 	.word	0x000d5cdd
   db8c4:	000d6335 	.word	0x000d6335
   db8c8:	000d63c5 	.word	0x000d63c5
   db8cc:	000d6a71 	.word	0x000d6a71
   db8d0:	000d6c71 	.word	0x000d6c71
   db8d4:	000d6dad 	.word	0x000d6dad
   db8d8:	000d6f31 	.word	0x000d6f31
   db8dc:	000d7011 	.word	0x000d7011
   db8e0:	000d730d 	.word	0x000d730d
   db8e4:	000d7439 	.word	0x000d7439
   db8e8:	000d7941 	.word	0x000d7941
   db8ec:	000d7a05 	.word	0x000d7a05
   db8f0:	000d7a89 	.word	0x000d7a89
   db8f4:	000d7b0d 	.word	0x000d7b0d

000db8f8 <link_constructors_end>:
	...
