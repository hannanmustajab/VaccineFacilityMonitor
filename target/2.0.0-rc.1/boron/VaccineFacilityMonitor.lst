
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/2.0.0-rc.1/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006670  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da690  000da690  0000a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da698  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000031c  2003e148  000da69c  0001e148  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000390  2003e468  2003e468  0002e468  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000da9b8  000da9b8  0002a9b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da9e0  000da9e0  0002a9e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015f3d9  00000000  00000000  0002a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016eb8  00000000  00000000  00189dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002b929  00000000  00000000  001a0c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002960  00000000  00000000  001cc59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007a18  00000000  00000000  001ceefe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000384f1  00000000  00000000  001d6916  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a4ea  00000000  00000000  0020ee07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010d2cc  00000000  00000000  002492f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007b4c  00000000  00000000  003565c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbe5 	bl	d7800 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbed 	bl	d781c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e148 	.word	0x2003e148
   d404c:	000da69c 	.word	0x000da69c
   d4050:	2003e464 	.word	0x2003e464
   d4054:	2003e468 	.word	0x2003e468
   d4058:	2003e7f5 	.word	0x2003e7f5

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fb23 	bl	d66ac <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da65c 	.word	0x000da65c
   d4080:	000da688 	.word	0x000da688

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bac6 	b.w	d4614 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fccd 	bl	d4a28 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bacd 	b.w	d6630 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 ba2d 	b.w	d54f4 <malloc>

000d409a <_Znaj>:
   d409a:	f001 ba2b 	b.w	d54f4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 ba31 	b.w	d5504 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f002 f893 	bl	d61e2 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000da062 	.word	0x000da062
   d40cc:	2003e554 	.word	0x2003e554

000d40d0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40d4:	6800      	ldr	r0, [r0, #0]
   d40d6:	b108      	cbz	r0, d40dc <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d8:	f001 fa14 	bl	d5504 <free>
class SystemClass {
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}

000d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40e0:	2300      	movs	r3, #0
   d40e2:	2204      	movs	r2, #4
   d40e4:	f001 b95e 	b.w	d53a4 <spark_variable>

000d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d40ee:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f0:	f88d 5000 	strb.w	r5, [sp]
   d40f4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f6:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f8:	f001 fc2a 	bl	d5950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d40fc:	4620      	mov	r0, r4
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4108:	f001 f964 	bl	d53d4 <spark_cloud_flag_connect>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d410c:	f8df a058 	ldr.w	sl, [pc, #88]	; d4168 <_Z17connectToParticlev+0x64>
   d4110:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4114:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4118:	f240 38e7 	movw	r8, #999	; 0x3e7
   d411c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4120:	2000      	movs	r0, #0
   d4122:	f000 ffaf 	bl	d5084 <hal_timer_millis>
   d4126:	4605      	mov	r5, r0
   d4128:	2000      	movs	r0, #0
   d412a:	f000 ffab 	bl	d5084 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d412e:	1b46      	subs	r6, r0, r5
   d4130:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d4134:	45b9      	cmp	r9, r7
   d4136:	bf08      	it	eq
   d4138:	45b0      	cmpeq	r8, r6
   d413a:	d305      	bcc.n	d4148 <_Z17connectToParticlev+0x44>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413c:	f001 f952 	bl	d53e4 <spark_cloud_flag_connected>
   d4140:	b910      	cbnz	r0, d4148 <_Z17connectToParticlev+0x44>
            spark_process();
   d4142:	f001 f93f 	bl	d53c4 <spark_process>
        while (_while() && !_condition()) {
   d4146:	e7ef      	b.n	d4128 <_Z17connectToParticlev+0x24>
   d4148:	f001 f94c 	bl	d53e4 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d414c:	b118      	cbz	r0, d4156 <_Z17connectToParticlev+0x52>
}
   d414e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4152:	f001 b947 	b.w	d53e4 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d4156:	f000 ff65 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d415a:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d415e:	f001 f931 	bl	d53c4 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4162:	3c01      	subs	r4, #1
   d4164:	d1dc      	bne.n	d4120 <_Z17connectToParticlev+0x1c>
   d4166:	e7f2      	b.n	d414e <_Z17connectToParticlev+0x4a>
   d4168:	2003e7a0 	.word	0x2003e7a0

000d416c <_Z8BlinkLEDi>:
void BlinkLED(int LED){
   d416c:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d416e:	b284      	uxth	r4, r0
   d4170:	2101      	movs	r1, #1
   d4172:	4620      	mov	r0, r4
   d4174:	f002 fb1b 	bl	d67ae <digitalWrite>
  delay(1000);
   d4178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d417c:	f001 f9fa 	bl	d5574 <delay>
  digitalWrite(LED,LOW);
   d4180:	4620      	mov	r0, r4
   d4182:	2100      	movs	r1, #0
   d4184:	f002 fb13 	bl	d67ae <digitalWrite>
}
   d4188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
   d418c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4190:	f001 b9f0 	b.w	d5574 <delay>

000d4194 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d4194:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4196:	f000 ff45 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d419a:	4b04      	ldr	r3, [pc, #16]	; (d41ac <_Z20meterParticlePublishv+0x18>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d41a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d41a4:	bf34      	ite	cc
   d41a6:	2000      	movcc	r0, #0
   d41a8:	2001      	movcs	r0, #1
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	2003e4c4 	.word	0x2003e4c4

000d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d41b0:	b508      	push	{r3, lr}
        waitUntil(meterParticlePublish);
   d41b2:	f7ff ffef 	bl	d4194 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d41b6:	b910      	cbnz	r0, d41be <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d41b8:	f001 f904 	bl	d53c4 <spark_process>
        while (_while() && !_condition()) {
   d41bc:	e7f9      	b.n	d41b2 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d41be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41c2:	f7ff bfe7 	b.w	d4194 <_Z20meterParticlePublishv>
	...

000d41c8 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d41c8:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d41ca:	4c15      	ldr	r4, [pc, #84]	; (d4220 <_Z20updateThresholdValuev+0x58>)
   d41cc:	6a20      	ldr	r0, [r4, #32]
   d41ce:	f002 fcd7 	bl	d6b80 <__aeabi_f2d>
   d41d2:	4a14      	ldr	r2, [pc, #80]	; (d4224 <_Z20updateThresholdValuev+0x5c>)
   d41d4:	e9cd 0100 	strd	r0, r1, [sp]
   d41d8:	2118      	movs	r1, #24
   d41da:	4813      	ldr	r0, [pc, #76]	; (d4228 <_Z20updateThresholdValuev+0x60>)
   d41dc:	f001 f9aa 	bl	d5534 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d41e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d41e2:	f002 fccd 	bl	d6b80 <__aeabi_f2d>
   d41e6:	4a11      	ldr	r2, [pc, #68]	; (d422c <_Z20updateThresholdValuev+0x64>)
   d41e8:	e9cd 0100 	strd	r0, r1, [sp]
   d41ec:	2118      	movs	r1, #24
   d41ee:	4810      	ldr	r0, [pc, #64]	; (d4230 <_Z20updateThresholdValuev+0x68>)
   d41f0:	f001 f9a0 	bl	d5534 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d41f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d41f6:	f002 fcc3 	bl	d6b80 <__aeabi_f2d>
   d41fa:	4a0e      	ldr	r2, [pc, #56]	; (d4234 <_Z20updateThresholdValuev+0x6c>)
   d41fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4200:	2118      	movs	r1, #24
   d4202:	480d      	ldr	r0, [pc, #52]	; (d4238 <_Z20updateThresholdValuev+0x70>)
   d4204:	f001 f996 	bl	d5534 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d420a:	f002 fcb9 	bl	d6b80 <__aeabi_f2d>
   d420e:	4a0b      	ldr	r2, [pc, #44]	; (d423c <_Z20updateThresholdValuev+0x74>)
   d4210:	e9cd 0100 	strd	r0, r1, [sp]
   d4214:	2118      	movs	r1, #24
   d4216:	480a      	ldr	r0, [pc, #40]	; (d4240 <_Z20updateThresholdValuev+0x78>)
   d4218:	f001 f98c 	bl	d5534 <snprintf>
} 
   d421c:	b002      	add	sp, #8
   d421e:	bd10      	pop	{r4, pc}
   d4220:	2003e510 	.word	0x2003e510
   d4224:	000d9e3c 	.word	0x000d9e3c
   d4228:	2003e58b 	.word	0x2003e58b
   d422c:	000d9e4d 	.word	0x000d9e4d
   d4230:	2003e4e2 	.word	0x2003e4e2
   d4234:	000d9e5e 	.word	0x000d9e5e
   d4238:	2003e572 	.word	0x2003e572
   d423c:	000d9e72 	.word	0x000d9e72
   d4240:	2003e4c9 	.word	0x2003e4c9

000d4244 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4244:	b530      	push	{r4, r5, lr}
   d4246:	b085      	sub	sp, #20
   d4248:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d424a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d424c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d424e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4250:	f001 f848 	bl	d52e4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4254:	b9b0      	cbnz	r0, d4284 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4256:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4258:	b10c      	cbz	r4, d425e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d425a:	6923      	ldr	r3, [r4, #16]
   d425c:	b923      	cbnz	r3, d4268 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d425e:	4a0a      	ldr	r2, [pc, #40]	; (d4288 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4260:	2100      	movs	r1, #0
   d4262:	200a      	movs	r0, #10
   d4264:	f001 f836 	bl	d52d4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4268:	2300      	movs	r3, #0
   d426a:	f8ad 3006 	strh.w	r3, [sp, #6]
   d426e:	230c      	movs	r3, #12
   d4270:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4274:	2304      	movs	r3, #4
   d4276:	9303      	str	r3, [sp, #12]
   d4278:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d427a:	6923      	ldr	r3, [r4, #16]
   d427c:	aa01      	add	r2, sp, #4
   d427e:	2101      	movs	r1, #1
   d4280:	4620      	mov	r0, r4
   d4282:	4798      	blx	r3
}
   d4284:	b005      	add	sp, #20
   d4286:	bd30      	pop	{r4, r5, pc}
   d4288:	000d5015 	.word	0x000d5015

000d428c <_Z17getBatteryContextv>:
// {
//   voltage = analogRead(BATT) * 0.0011224;
//   snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
// }

void getBatteryContext() {
   d428c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d428e:	4d0e      	ldr	r5, [pc, #56]	; (d42c8 <_Z17getBatteryContextv+0x3c>)
   d4290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4292:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4294:	ac01      	add	r4, sp, #4
   d4296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d429c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d42a0:	4669      	mov	r1, sp
   d42a2:	2007      	movs	r0, #7
   d42a4:	f7ff ffce 	bl	d4244 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d42a8:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d42aa:	bfa8      	it	ge
   d42ac:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d42ae:	4a07      	ldr	r2, [pc, #28]	; (d42cc <_Z17getBatteryContextv+0x40>)
   d42b0:	ab08      	add	r3, sp, #32
   d42b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d42b6:	2110      	movs	r1, #16
   d42b8:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d42bc:	4804      	ldr	r0, [pc, #16]	; (d42d0 <_Z17getBatteryContextv+0x44>)
   d42be:	f001 f939 	bl	d5534 <snprintf>

   d42c2:	b009      	add	sp, #36	; 0x24
   d42c4:	bd30      	pop	{r4, r5, pc}
   d42c6:	bf00      	nop
   d42c8:	000da178 	.word	0x000da178
   d42cc:	000da0f5 	.word	0x000da0f5
   d42d0:	2003e484 	.word	0x2003e484

000d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42d6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d42d8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d42da:	b17c      	cbz	r4, d42fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d42dc:	6863      	ldr	r3, [r4, #4]
   d42de:	3b01      	subs	r3, #1
   d42e0:	6063      	str	r3, [r4, #4]
   d42e2:	b95b      	cbnz	r3, d42fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d42e4:	6823      	ldr	r3, [r4, #0]
   d42e6:	4620      	mov	r0, r4
   d42e8:	689b      	ldr	r3, [r3, #8]
   d42ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42ec:	68a3      	ldr	r3, [r4, #8]
   d42ee:	3b01      	subs	r3, #1
   d42f0:	60a3      	str	r3, [r4, #8]
   d42f2:	b91b      	cbnz	r3, d42fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42f4:	6823      	ldr	r3, [r4, #0]
   d42f6:	4620      	mov	r0, r4
   d42f8:	68db      	ldr	r3, [r3, #12]
   d42fa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42fc:	4628      	mov	r0, r5
   d42fe:	bd38      	pop	{r3, r4, r5, pc}

000d4300 <_Z9sendEventv>:
{
   d4300:	b530      	push	{r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4302:	4d23      	ldr	r5, [pc, #140]	; (d4390 <_Z9sendEventv+0x90>)
   d4304:	b0c9      	sub	sp, #292	; 0x124
   d4306:	2408      	movs	r4, #8
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4308:	f002 fa6a 	bl	d67e0 <_Z21__fetch_global_EEPROMv>
   d430c:	4620      	mov	r0, r4
   d430e:	4920      	ldr	r1, [pc, #128]	; (d4390 <_Z9sendEventv+0x90>)
   d4310:	2238      	movs	r2, #56	; 0x38
   d4312:	3464      	adds	r4, #100	; 0x64
   d4314:	f000 fe9e 	bl	d5054 <HAL_EEPROM_Get>
   for (int i = 0; i < 4; i++) {
   d4318:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d431c:	d1f4      	bne.n	d4308 <_Z9sendEventv+0x8>
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.stateOfCharge);
   d431e:	6b28      	ldr	r0, [r5, #48]	; 0x30
  currentCountTime = Time.now();
   d4320:	4c1c      	ldr	r4, [pc, #112]	; (d4394 <_Z9sendEventv+0x94>)
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.stateOfCharge);
   d4322:	f002 fc2d 	bl	d6b80 <__aeabi_f2d>
   d4326:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d432a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d432e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d4332:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4336:	e9cd 2300 	strd	r2, r3, [sp]
   d433a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d433e:	4a16      	ldr	r2, [pc, #88]	; (d4398 <_Z9sendEventv+0x98>)
   d4340:	a808      	add	r0, sp, #32
   d4342:	f001 f8f7 	bl	d5534 <snprintf>
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d4346:	2300      	movs	r3, #0
   d4348:	f88d 3000 	strb.w	r3, [sp]
   d434c:	4b13      	ldr	r3, [pc, #76]	; (d439c <_Z9sendEventv+0x9c>)
   d434e:	4914      	ldr	r1, [pc, #80]	; (d43a0 <_Z9sendEventv+0xa0>)
   d4350:	781b      	ldrb	r3, [r3, #0]
   d4352:	aa08      	add	r2, sp, #32
   d4354:	a806      	add	r0, sp, #24
   d4356:	f7ff fec7 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d435a:	a807      	add	r0, sp, #28
   d435c:	f7ff ffba 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d4360:	f002 f80e 	bl	d6380 <_ZN9TimeClass3nowEv>
   d4364:	e9c4 0100 	strd	r0, r1, [r4]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d4368:	f002 fa3a 	bl	d67e0 <_Z21__fetch_global_EEPROMv>
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d436c:	7821      	ldrb	r1, [r4, #0]
   d436e:	2003      	movs	r0, #3
   d4370:	f000 fe68 	bl	d5044 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d4374:	f002 f816 	bl	d63a4 <_ZN9TimeClass4hourEv>
   d4378:	4b0a      	ldr	r3, [pc, #40]	; (d43a4 <_Z9sendEventv+0xa4>)
   d437a:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d437c:	4b0a      	ldr	r3, [pc, #40]	; (d43a8 <_Z9sendEventv+0xa8>)
   d437e:	2201      	movs	r2, #1
   d4380:	701a      	strb	r2, [r3, #0]
   d4382:	f000 fe4f 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4386:	4b09      	ldr	r3, [pc, #36]	; (d43ac <_Z9sendEventv+0xac>)
   d4388:	6018      	str	r0, [r3, #0]
}
   d438a:	b049      	add	sp, #292	; 0x124
   d438c:	bd30      	pop	{r4, r5, pc}
   d438e:	bf00      	nop
   d4390:	2003e510 	.word	0x2003e510
   d4394:	2003e4a8 	.word	0x2003e4a8
   d4398:	000d9e87 	.word	0x000d9e87
   d439c:	2003e47d 	.word	0x2003e47d
   d43a0:	000d9ebc 	.word	0x000d9ebc
   d43a4:	2003e4b0 	.word	0x2003e4b0
   d43a8:	2003e148 	.word	0x2003e148
   d43ac:	2003e5a4 	.word	0x2003e5a4

000d43b0 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d43b0:	b530      	push	{r4, r5, lr}
   d43b2:	4d1e      	ldr	r5, [pc, #120]	; (d442c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43b4:	b085      	sub	sp, #20
  if (!data) {                                                                    // First check to see if there is any data
   d43b6:	460c      	mov	r4, r1
   d43b8:	b981      	cbnz	r1, d43dc <_Z14UbidotsHandlerPKcS0_+0x2c>
    if (verboseMode) {
   d43ba:	782b      	ldrb	r3, [r5, #0]
   d43bc:	b343      	cbz	r3, d4410 <_Z14UbidotsHandlerPKcS0_+0x60>
        return waitConditionWhile(_condition, []{ return true; });
   d43be:	f7ff fef7 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d43c2:	4b1b      	ldr	r3, [pc, #108]	; (d4430 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43c4:	f88d 4000 	strb.w	r4, [sp]
   d43c8:	781b      	ldrb	r3, [r3, #0]
   d43ca:	4a1a      	ldr	r2, [pc, #104]	; (d4434 <_Z14UbidotsHandlerPKcS0_+0x84>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d43cc:	491a      	ldr	r1, [pc, #104]	; (d4438 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43ce:	a802      	add	r0, sp, #8
   d43d0:	f7ff fe8a 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d43d4:	a803      	add	r0, sp, #12
   d43d6:	f7ff ff7d 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43da:	e019      	b.n	d4410 <_Z14UbidotsHandlerPKcS0_+0x60>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d43dc:	4608      	mov	r0, r1
   d43de:	f003 f906 	bl	d75ee <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d43e2:	38c8      	subs	r0, #200	; 0xc8
   d43e4:	2801      	cmp	r0, #1
    if (verboseMode) {
   d43e6:	782b      	ldrb	r3, [r5, #0]
  if ((responseCode == 200) || (responseCode == 201))
   d43e8:	d814      	bhi.n	d4414 <_Z14UbidotsHandlerPKcS0_+0x64>
    if (verboseMode) {
   d43ea:	b173      	cbz	r3, d440a <_Z14UbidotsHandlerPKcS0_+0x5a>
   d43ec:	f7ff fee0 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("State", "Response Received", PRIVATE);
   d43f0:	2300      	movs	r3, #0
   d43f2:	f88d 3000 	strb.w	r3, [sp]
   d43f6:	4b0e      	ldr	r3, [pc, #56]	; (d4430 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43f8:	4a10      	ldr	r2, [pc, #64]	; (d443c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43fa:	781b      	ldrb	r3, [r3, #0]
   d43fc:	4910      	ldr	r1, [pc, #64]	; (d4440 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43fe:	a802      	add	r0, sp, #8
   d4400:	f7ff fe72 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4404:	a803      	add	r0, sp, #12
   d4406:	f7ff ff65 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;    
   d440a:	4b0e      	ldr	r3, [pc, #56]	; (d4444 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d440c:	2200      	movs	r2, #0
   d440e:	701a      	strb	r2, [r3, #0]
}
   d4410:	b005      	add	sp, #20
   d4412:	bd30      	pop	{r4, r5, pc}
  else if (verboseMode) {
   d4414:	2b00      	cmp	r3, #0
   d4416:	d0fb      	beq.n	d4410 <_Z14UbidotsHandlerPKcS0_+0x60>
   d4418:	f7ff feca 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d441c:	2300      	movs	r3, #0
   d441e:	f88d 3000 	strb.w	r3, [sp]
   d4422:	4b03      	ldr	r3, [pc, #12]	; (d4430 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4424:	4622      	mov	r2, r4
   d4426:	781b      	ldrb	r3, [r3, #0]
   d4428:	e7d0      	b.n	d43cc <_Z14UbidotsHandlerPKcS0_+0x1c>
   d442a:	bf00      	nop
   d442c:	2003e224 	.word	0x2003e224
   d4430:	2003e47d 	.word	0x2003e47d
   d4434:	000d9ed2 	.word	0x000d9ed2
   d4438:	000d9eda 	.word	0x000d9eda
   d443c:	000d9ee7 	.word	0x000d9ee7
   d4440:	000d9ef9 	.word	0x000d9ef9
   d4444:	2003e148 	.word	0x2003e148

000d4448 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4448:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
  sensor_data.validData = false;
   d444c:	4c5e      	ldr	r4, [pc, #376]	; (d45c8 <_Z16takeMeasurementsv+0x180>)
  if (sht31.readTemperature()){
   d444e:	485f      	ldr	r0, [pc, #380]	; (d45cc <_Z16takeMeasurementsv+0x184>)
  sensor_data.validData = false;
   d4450:	2500      	movs	r5, #0
   d4452:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d4454:	f000 fda0 	bl	d4f98 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4458:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4460:	f000 809f 	beq.w	d45a2 <_Z16takeMeasurementsv+0x15a>
    currentCountTime = Time.now();
   d4464:	f001 ff8c 	bl	d6380 <_ZN9TimeClass3nowEv>
   d4468:	4b59      	ldr	r3, [pc, #356]	; (d45d0 <_Z16takeMeasurementsv+0x188>)
   d446a:	e9c3 0100 	strd	r0, r1, [r3]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d446e:	f001 ffa3 	bl	d63b8 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d4472:	281e      	cmp	r0, #30
   d4474:	f000 808e 	beq.w	d4594 <_Z16takeMeasurementsv+0x14c>
   d4478:	282d      	cmp	r0, #45	; 0x2d
   d447a:	f000 808d 	beq.w	d4598 <_Z16takeMeasurementsv+0x150>
        reportCycle = 0;                                                // This is the first of the sample-only periods
   d447e:	280f      	cmp	r0, #15
   d4480:	bf14      	ite	ne
   d4482:	2603      	movne	r6, #3
   d4484:	462e      	moveq	r6, r5
    sensor_data.temperatureInC = sht31.readTemperature();
   d4486:	4851      	ldr	r0, [pc, #324]	; (d45cc <_Z16takeMeasurementsv+0x184>)
   d4488:	f000 fd86 	bl	d4f98 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d448c:	ee10 0a10 	vmov	r0, s0
   d4490:	f002 fb76 	bl	d6b80 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d4494:	4a4f      	ldr	r2, [pc, #316]	; (d45d4 <_Z16takeMeasurementsv+0x18c>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d4496:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d449a:	e9cd 0100 	strd	r0, r1, [sp]
   d449e:	2110      	movs	r1, #16
   d44a0:	484d      	ldr	r0, [pc, #308]	; (d45d8 <_Z16takeMeasurementsv+0x190>)
   d44a2:	f001 f847 	bl	d5534 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d44a6:	4849      	ldr	r0, [pc, #292]	; (d45cc <_Z16takeMeasurementsv+0x184>)
   d44a8:	f000 fd84 	bl	d4fb4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d44ac:	ee10 0a10 	vmov	r0, s0
   d44b0:	f002 fb66 	bl	d6b80 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d44b4:	4a49      	ldr	r2, [pc, #292]	; (d45dc <_Z16takeMeasurementsv+0x194>)
    sensor_data.relativeHumidity = sht31.readHumidity();
   d44b6:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d44ba:	e9cd 0100 	strd	r0, r1, [sp]
   d44be:	2110      	movs	r1, #16
   d44c0:	4847      	ldr	r0, [pc, #284]	; (d45e0 <_Z16takeMeasurementsv+0x198>)
   d44c2:	f001 f837 	bl	d5534 <snprintf>
   d44c6:	a902      	add	r1, sp, #8
   d44c8:	2003      	movs	r0, #3
   d44ca:	f7ff febb 	bl	d4244 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d44ce:	2800      	cmp	r0, #0
   d44d0:	d164      	bne.n	d459c <_Z16takeMeasurementsv+0x154>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d44d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d44d6:	ee07 3a90 	vmov	s15, r3
   d44da:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d44de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d44e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d44e6:	ee17 0a90 	vmov	r0, s15
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d44ea:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d44ee:	f002 fb47 	bl	d6b80 <__aeabi_f2d>
   d44f2:	4a3c      	ldr	r2, [pc, #240]	; (d45e4 <_Z16takeMeasurementsv+0x19c>)
   d44f4:	e9cd 0100 	strd	r0, r1, [sp]
   d44f8:	2110      	movs	r1, #16
   d44fa:	483b      	ldr	r0, [pc, #236]	; (d45e8 <_Z16takeMeasurementsv+0x1a0>)
   d44fc:	f001 f81a 	bl	d5534 <snprintf>
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d4500:	4b3a      	ldr	r3, [pc, #232]	; (d45ec <_Z16takeMeasurementsv+0x1a4>)
   d4502:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4504:	e9d3 8900 	ldrd	r8, r9, [r3]
   d4508:	f002 fb3a 	bl	d6b80 <__aeabi_f2d>
   d450c:	4642      	mov	r2, r8
   d450e:	464b      	mov	r3, r9
   d4510:	f002 fe1e 	bl	d7150 <__aeabi_dcmpgt>
   d4514:	b110      	cbz	r0, d451c <_Z16takeMeasurementsv+0xd4>
   d4516:	4b36      	ldr	r3, [pc, #216]	; (d45f0 <_Z16takeMeasurementsv+0x1a8>)
   d4518:	2201      	movs	r2, #1
   d451a:	701a      	strb	r2, [r3, #0]
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d451c:	6a20      	ldr	r0, [r4, #32]
   d451e:	f002 fb2f 	bl	d6b80 <__aeabi_f2d>
   d4522:	4602      	mov	r2, r0
   d4524:	460b      	mov	r3, r1
   d4526:	4640      	mov	r0, r8
   d4528:	4649      	mov	r1, r9
   d452a:	f002 fe11 	bl	d7150 <__aeabi_dcmpgt>
   d452e:	b110      	cbz	r0, d4536 <_Z16takeMeasurementsv+0xee>
   d4530:	4b30      	ldr	r3, [pc, #192]	; (d45f4 <_Z16takeMeasurementsv+0x1ac>)
   d4532:	2201      	movs	r2, #1
   d4534:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d4536:	4b30      	ldr	r3, [pc, #192]	; (d45f8 <_Z16takeMeasurementsv+0x1b0>)
   d4538:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d453a:	e9d3 8900 	ldrd	r8, r9, [r3]
   d453e:	f002 fb1f 	bl	d6b80 <__aeabi_f2d>
   d4542:	4642      	mov	r2, r8
   d4544:	464b      	mov	r3, r9
   d4546:	f002 fe03 	bl	d7150 <__aeabi_dcmpgt>
   d454a:	b110      	cbz	r0, d4552 <_Z16takeMeasurementsv+0x10a>
   d454c:	4b2b      	ldr	r3, [pc, #172]	; (d45fc <_Z16takeMeasurementsv+0x1b4>)
   d454e:	2201      	movs	r2, #1
   d4550:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4552:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4554:	f002 fb14 	bl	d6b80 <__aeabi_f2d>
   d4558:	4602      	mov	r2, r0
   d455a:	460b      	mov	r3, r1
   d455c:	4640      	mov	r0, r8
   d455e:	4649      	mov	r1, r9
   d4560:	f002 fdf6 	bl	d7150 <__aeabi_dcmpgt>
   d4564:	b110      	cbz	r0, d456c <_Z16takeMeasurementsv+0x124>
   d4566:	4b26      	ldr	r3, [pc, #152]	; (d4600 <_Z16takeMeasurementsv+0x1b8>)
   d4568:	2201      	movs	r2, #1
   d456a:	701a      	strb	r2, [r3, #0]
    sensor_data.validData = true;
   d456c:	2501      	movs	r5, #1
     getBatteryContext();                   // Check what the battery is doing.
   d456e:	f7ff fe8d 	bl	d428c <_Z17getBatteryContextv>
    sensor_data.validData = true;
   d4572:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4574:	f001 ff04 	bl	d6380 <_ZN9TimeClass3nowEv>
   d4578:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d457a:	f002 f931 	bl	d67e0 <_Z21__fetch_global_EEPROMv>
   d457e:	2064      	movs	r0, #100	; 0x64
   d4580:	4370      	muls	r0, r6
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4582:	4911      	ldr	r1, [pc, #68]	; (d45c8 <_Z16takeMeasurementsv+0x180>)
   d4584:	2238      	movs	r2, #56	; 0x38
   d4586:	3008      	adds	r0, #8
   d4588:	f000 fd6c 	bl	d5064 <HAL_EEPROM_Put>
        return 0;
   d458c:	4628      	mov	r0, r5
}
   d458e:	b004      	add	sp, #16
   d4590:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    switch (currentMinutes) {
   d4594:	2601      	movs	r6, #1
   d4596:	e776      	b.n	d4486 <_Z16takeMeasurementsv+0x3e>
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d4598:	2602      	movs	r6, #2
   d459a:	e774      	b.n	d4486 <_Z16takeMeasurementsv+0x3e>
            return -1.0f;
   d459c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d45a0:	e79d      	b.n	d44de <_Z16takeMeasurementsv+0x96>
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d45a2:	4b18      	ldr	r3, [pc, #96]	; (d4604 <_Z16takeMeasurementsv+0x1bc>)
   d45a4:	f88d 5000 	strb.w	r5, [sp]
   d45a8:	781b      	ldrb	r3, [r3, #0]
   d45aa:	4a17      	ldr	r2, [pc, #92]	; (d4608 <_Z16takeMeasurementsv+0x1c0>)
   d45ac:	4917      	ldr	r1, [pc, #92]	; (d460c <_Z16takeMeasurementsv+0x1c4>)
   d45ae:	a802      	add	r0, sp, #8
   d45b0:	f7ff fd9a 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d45b4:	a803      	add	r0, sp, #12
   d45b6:	f7ff fe8d 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Failed to take reading!");
   d45ba:	f001 ffed 	bl	d6598 <_Z16_fetch_usbserialv>
   d45be:	4914      	ldr	r1, [pc, #80]	; (d4610 <_Z16takeMeasurementsv+0x1c8>)
   d45c0:	f001 fd4f 	bl	d6062 <_ZN5Print7printlnEPKc>
   d45c4:	e7e2      	b.n	d458c <_Z16takeMeasurementsv+0x144>
   d45c6:	bf00      	nop
   d45c8:	2003e510 	.word	0x2003e510
   d45cc:	2003e548 	.word	0x2003e548
   d45d0:	2003e4a8 	.word	0x2003e4a8
   d45d4:	000d9eff 	.word	0x000d9eff
   d45d8:	2003e560 	.word	0x2003e560
   d45dc:	000d9f07 	.word	0x000d9f07
   d45e0:	2003e4b1 	.word	0x2003e4b1
   d45e4:	000d9f0f 	.word	0x000d9f0f
   d45e8:	2003e494 	.word	0x2003e494
   d45ec:	2003e558 	.word	0x2003e558
   d45f0:	2003e4e1 	.word	0x2003e4e1
   d45f4:	2003e58a 	.word	0x2003e58a
   d45f8:	2003e500 	.word	0x2003e500
   d45fc:	2003e4c8 	.word	0x2003e4c8
   d4600:	2003e571 	.word	0x2003e571
   d4604:	2003e47c 	.word	0x2003e47c
   d4608:	000d9f15 	.word	0x000d9f15
   d460c:	000d9f32 	.word	0x000d9f32
   d4610:	000d9f36 	.word	0x000d9f36

000d4614 <setup>:
{
   d4614:	b570      	push	{r4, r5, r6, lr}
   d4616:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(115200);
   d4618:	f001 ffbe 	bl	d6598 <_Z16_fetch_usbserialv>
   d461c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4620:	f001 ffae 	bl	d6580 <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d4624:	f001 ffb8 	bl	d6598 <_Z16_fetch_usbserialv>
   d4628:	495c      	ldr	r1, [pc, #368]	; (d479c <setup+0x188>)
   d462a:	f001 fd1a 	bl	d6062 <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d462e:	4b5c      	ldr	r3, [pc, #368]	; (d47a0 <setup+0x18c>)
   d4630:	aa08      	add	r2, sp, #32
   d4632:	f103 0510 	add.w	r5, r3, #16
   d4636:	4616      	mov	r6, r2
   d4638:	6818      	ldr	r0, [r3, #0]
   d463a:	6859      	ldr	r1, [r3, #4]
   d463c:	4614      	mov	r4, r2
   d463e:	c403      	stmia	r4!, {r0, r1}
   d4640:	3308      	adds	r3, #8
   d4642:	42ab      	cmp	r3, r5
   d4644:	4622      	mov	r2, r4
   d4646:	d1f7      	bne.n	d4638 <setup+0x24>
   d4648:	8819      	ldrh	r1, [r3, #0]
   d464a:	789b      	ldrb	r3, [r3, #2]
   d464c:	8021      	strh	r1, [r4, #0]
   d464e:	222d      	movs	r2, #45	; 0x2d
   d4650:	70a3      	strb	r3, [r4, #2]
   d4652:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4654:	4c53      	ldr	r4, [pc, #332]	; (d47a4 <setup+0x190>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4656:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d465a:	f003 f8df 	bl	d781c <memset>
  state = IDLE_STATE;
   d465e:	2302      	movs	r3, #2
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4660:	2101      	movs	r1, #1
   d4662:	2007      	movs	r0, #7
  state = IDLE_STATE;
   d4664:	7023      	strb	r3, [r4, #0]
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4666:	f002 f891 	bl	d678c <pinMode>
  pinMode(tempLED,OUTPUT);
   d466a:	2101      	movs	r1, #1
   d466c:	2005      	movs	r0, #5
   d466e:	f002 f88d 	bl	d678c <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
   d4672:	a804      	add	r0, sp, #16
   d4674:	f000 febe 	bl	d53f4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4678:	2300      	movs	r3, #0
   d467a:	227d      	movs	r2, #125	; 0x7d
   d467c:	a918      	add	r1, sp, #96	; 0x60
   d467e:	a804      	add	r0, sp, #16
   d4680:	f001 fdc1 	bl	d6206 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4684:	2300      	movs	r3, #0
   d4686:	461a      	mov	r2, r3
   d4688:	e9cd 3300 	strd	r3, r3, [sp]
   d468c:	4946      	ldr	r1, [pc, #280]	; (d47a8 <setup+0x194>)
   d468e:	a818      	add	r0, sp, #96	; 0x60
   d4690:	f000 fec0 	bl	d5414 <spark_subscribe>
  Particle.variable("Release",releaseNumber);
   d4694:	4b45      	ldr	r3, [pc, #276]	; (d47ac <setup+0x198>)
        return _variable(varKey, var, STRING);
   d4696:	4846      	ldr	r0, [pc, #280]	; (d47b0 <setup+0x19c>)
   d4698:	6819      	ldr	r1, [r3, #0]
   d469a:	f7ff fd21 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d469e:	4945      	ldr	r1, [pc, #276]	; (d47b4 <setup+0x1a0>)
   d46a0:	4845      	ldr	r0, [pc, #276]	; (d47b8 <setup+0x1a4>)
   d46a2:	f7ff fd1d 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46a6:	4945      	ldr	r1, [pc, #276]	; (d47bc <setup+0x1a8>)
   d46a8:	4845      	ldr	r0, [pc, #276]	; (d47c0 <setup+0x1ac>)
   d46aa:	f7ff fd19 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46ae:	4945      	ldr	r1, [pc, #276]	; (d47c4 <setup+0x1b0>)
   d46b0:	4845      	ldr	r0, [pc, #276]	; (d47c8 <setup+0x1b4>)
   d46b2:	f7ff fd15 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46b6:	4945      	ldr	r1, [pc, #276]	; (d47cc <setup+0x1b8>)
   d46b8:	4845      	ldr	r0, [pc, #276]	; (d47d0 <setup+0x1bc>)
   d46ba:	f7ff fd11 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46be:	4945      	ldr	r1, [pc, #276]	; (d47d4 <setup+0x1c0>)
   d46c0:	4845      	ldr	r0, [pc, #276]	; (d47d8 <setup+0x1c4>)
   d46c2:	f7ff fd0d 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46c6:	4945      	ldr	r1, [pc, #276]	; (d47dc <setup+0x1c8>)
   d46c8:	4845      	ldr	r0, [pc, #276]	; (d47e0 <setup+0x1cc>)
   d46ca:	f7ff fd09 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46ce:	4945      	ldr	r1, [pc, #276]	; (d47e4 <setup+0x1d0>)
   d46d0:	4845      	ldr	r0, [pc, #276]	; (d47e8 <setup+0x1d4>)
   d46d2:	f7ff fd05 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46d6:	4945      	ldr	r1, [pc, #276]	; (d47ec <setup+0x1d8>)
   d46d8:	4845      	ldr	r0, [pc, #276]	; (d47f0 <setup+0x1dc>)
   d46da:	f7ff fd01 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d46de:	4a45      	ldr	r2, [pc, #276]	; (d47f4 <setup+0x1e0>)
   d46e0:	4945      	ldr	r1, [pc, #276]	; (d47f8 <setup+0x1e4>)
   d46e2:	4846      	ldr	r0, [pc, #280]	; (d47fc <setup+0x1e8>)
   d46e4:	f001 f830 	bl	d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46e8:	4a45      	ldr	r2, [pc, #276]	; (d4800 <setup+0x1ec>)
   d46ea:	4946      	ldr	r1, [pc, #280]	; (d4804 <setup+0x1f0>)
   d46ec:	4843      	ldr	r0, [pc, #268]	; (d47fc <setup+0x1e8>)
   d46ee:	f001 f82b 	bl	d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46f2:	4a45      	ldr	r2, [pc, #276]	; (d4808 <setup+0x1f4>)
   d46f4:	4945      	ldr	r1, [pc, #276]	; (d480c <setup+0x1f8>)
   d46f6:	4841      	ldr	r0, [pc, #260]	; (d47fc <setup+0x1e8>)
   d46f8:	f001 f826 	bl	d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46fc:	4a44      	ldr	r2, [pc, #272]	; (d4810 <setup+0x1fc>)
   d46fe:	4945      	ldr	r1, [pc, #276]	; (d4814 <setup+0x200>)
   d4700:	483e      	ldr	r0, [pc, #248]	; (d47fc <setup+0x1e8>)
   d4702:	f001 f821 	bl	d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4706:	4a44      	ldr	r2, [pc, #272]	; (d4818 <setup+0x204>)
   d4708:	4944      	ldr	r1, [pc, #272]	; (d481c <setup+0x208>)
   d470a:	483c      	ldr	r0, [pc, #240]	; (d47fc <setup+0x1e8>)
   d470c:	f001 f81c 	bl	d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4710:	4943      	ldr	r1, [pc, #268]	; (d4820 <setup+0x20c>)
   d4712:	4a44      	ldr	r2, [pc, #272]	; (d4824 <setup+0x210>)
   d4714:	4839      	ldr	r0, [pc, #228]	; (d47fc <setup+0x1e8>)
   d4716:	f001 f817 	bl	d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d471a:	4843      	ldr	r0, [pc, #268]	; (d4828 <setup+0x214>)
   d471c:	2144      	movs	r1, #68	; 0x44
   d471e:	f000 fba6 	bl	d4e6e <_ZN14Adafruit_SHT315beginEh>
   d4722:	b988      	cbnz	r0, d4748 <setup+0x134>
   d4724:	f000 fc7e 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4728:	4d40      	ldr	r5, [pc, #256]	; (d482c <setup+0x218>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d472a:	4941      	ldr	r1, [pc, #260]	; (d4830 <setup+0x21c>)
    resetTimeStamp = millis();
   d472c:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d472e:	4630      	mov	r0, r6
   d4730:	f003 f8aa 	bl	d7888 <strcpy>
    Serial.println("Couldn't find SHT31");
   d4734:	f001 ff30 	bl	d6598 <_Z16_fetch_usbserialv>
   d4738:	493e      	ldr	r1, [pc, #248]	; (d4834 <setup+0x220>)
   d473a:	f001 fc92 	bl	d6062 <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d473e:	2301      	movs	r3, #1
   d4740:	7023      	strb	r3, [r4, #0]
   d4742:	f000 fc6f 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4746:	6028      	str	r0, [r5, #0]
  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d4748:	f7ff fe7e 	bl	d4448 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d474c:	f7ff fd3c 	bl	d41c8 <_Z20updateThresholdValuev>
  if(!connectToParticle()) {
   d4750:	f7ff fcd8 	bl	d4104 <_Z17connectToParticlev>
   d4754:	b948      	cbnz	r0, d476a <setup+0x156>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d4756:	2301      	movs	r3, #1
   d4758:	7023      	strb	r3, [r4, #0]
   d475a:	f000 fc63 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d475e:	4b33      	ldr	r3, [pc, #204]	; (d482c <setup+0x218>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4760:	4935      	ldr	r1, [pc, #212]	; (d4838 <setup+0x224>)
    resetTimeStamp = millis();
   d4762:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4764:	4630      	mov	r0, r6
   d4766:	f003 f88f 	bl	d7888 <strcpy>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d476a:	4b34      	ldr	r3, [pc, #208]	; (d483c <setup+0x228>)
   d476c:	781b      	ldrb	r3, [r3, #0]
   d476e:	b163      	cbz	r3, d478a <setup+0x176>
   d4770:	2300      	movs	r3, #0
   d4772:	f88d 3000 	strb.w	r3, [sp]
   d4776:	4b32      	ldr	r3, [pc, #200]	; (d4840 <setup+0x22c>)
   d4778:	4932      	ldr	r1, [pc, #200]	; (d4844 <setup+0x230>)
   d477a:	781b      	ldrb	r3, [r3, #0]
   d477c:	a802      	add	r0, sp, #8
   d477e:	4632      	mov	r2, r6
   d4780:	f7ff fcb2 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4784:	a803      	add	r0, sp, #12
   d4786:	f7ff fda5 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d478a:	f000 fc4b 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d478e:	4b2e      	ldr	r3, [pc, #184]	; (d4848 <setup+0x234>)
   d4790:	6018      	str	r0, [r3, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4792:	a804      	add	r0, sp, #16
   d4794:	f001 fcac 	bl	d60f0 <_ZN6StringD1Ev>
}
   d4798:	b038      	add	sp, #224	; 0xe0
   d479a:	bd70      	pop	{r4, r5, r6, pc}
   d479c:	000d9f4e 	.word	0x000d9f4e
   d47a0:	000da194 	.word	0x000da194
   d47a4:	2003e554 	.word	0x2003e554
   d47a8:	000d43b1 	.word	0x000d43b1
   d47ac:	2003e14c 	.word	0x2003e14c
   d47b0:	000d9f59 	.word	0x000d9f59
   d47b4:	2003e560 	.word	0x2003e560
   d47b8:	000d9f61 	.word	0x000d9f61
   d47bc:	2003e4b1 	.word	0x2003e4b1
   d47c0:	000d9f6d 	.word	0x000d9f6d
   d47c4:	2003e58b 	.word	0x2003e58b
   d47c8:	000d9f76 	.word	0x000d9f76
   d47cc:	2003e4e2 	.word	0x2003e4e2
   d47d0:	000d9f88 	.word	0x000d9f88
   d47d4:	2003e572 	.word	0x2003e572
   d47d8:	000d9f9a 	.word	0x000d9f9a
   d47dc:	2003e4c9 	.word	0x2003e4c9
   d47e0:	000d9fa9 	.word	0x000d9fa9
   d47e4:	2003e494 	.word	0x2003e494
   d47e8:	000d9fb8 	.word	0x000d9fb8
   d47ec:	2003e484 	.word	0x2003e484
   d47f0:	000d9fc0 	.word	0x000d9fc0
   d47f4:	000d9fcf 	.word	0x000d9fcf
   d47f8:	000d40b5 	.word	0x000d40b5
   d47fc:	000d571d 	.word	0x000d571d
   d4800:	000d9fdb 	.word	0x000d9fdb
   d4804:	000d4939 	.word	0x000d4939
   d4808:	000d9fe8 	.word	0x000d9fe8
   d480c:	000d4c69 	.word	0x000d4c69
   d4810:	000d9ff9 	.word	0x000d9ff9
   d4814:	000d4cbd 	.word	0x000d4cbd
   d4818:	000da00a 	.word	0x000da00a
   d481c:	000d4d65 	.word	0x000d4d65
   d4820:	000d4d11 	.word	0x000d4d11
   d4824:	000da01f 	.word	0x000da01f
   d4828:	2003e548 	.word	0x2003e548
   d482c:	2003e508 	.word	0x2003e508
   d4830:	000da033 	.word	0x000da033
   d4834:	000da050 	.word	0x000da050
   d4838:	000da064 	.word	0x000da064
   d483c:	2003e224 	.word	0x2003e224
   d4840:	2003e47d 	.word	0x2003e47d
   d4844:	000da076 	.word	0x000da076
   d4848:	2003e4c4 	.word	0x2003e4c4

000d484c <_Z16ThresholdCrossedv>:
bool ThresholdCrossed(){
   d484c:	b530      	push	{r4, r5, lr}
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d484e:	4b2d      	ldr	r3, [pc, #180]	; (d4904 <_Z16ThresholdCrossedv+0xb8>)
   d4850:	4c2d      	ldr	r4, [pc, #180]	; (d4908 <_Z16ThresholdCrossedv+0xbc>)
   d4852:	781b      	ldrb	r3, [r3, #0]
bool ThresholdCrossed(){
   d4854:	b08d      	sub	sp, #52	; 0x34
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4856:	b913      	cbnz	r3, d485e <_Z16ThresholdCrossedv+0x12>
   d4858:	4b2c      	ldr	r3, [pc, #176]	; (d490c <_Z16ThresholdCrossedv+0xc0>)
   d485a:	781b      	ldrb	r3, [r3, #0]
   d485c:	b1eb      	cbz	r3, d489a <_Z16ThresholdCrossedv+0x4e>
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d485e:	4b2c      	ldr	r3, [pc, #176]	; (d4910 <_Z16ThresholdCrossedv+0xc4>)
   d4860:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4864:	2120      	movs	r1, #32
   d4866:	e9cd 2300 	strd	r2, r3, [sp]
   d486a:	a804      	add	r0, sp, #16
   d486c:	4a29      	ldr	r2, [pc, #164]	; (d4914 <_Z16ThresholdCrossedv+0xc8>)
   d486e:	f000 fe61 	bl	d5534 <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d4872:	2005      	movs	r0, #5
   d4874:	f7ff fc7a 	bl	d416c <_Z8BlinkLEDi>
        return waitConditionWhile(_condition, []{ return true; });
   d4878:	f7ff fc9a 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d487c:	2300      	movs	r3, #0
   d487e:	f88d 3000 	strb.w	r3, [sp]
   d4882:	4b25      	ldr	r3, [pc, #148]	; (d4918 <_Z16ThresholdCrossedv+0xcc>)
   d4884:	4925      	ldr	r1, [pc, #148]	; (d491c <_Z16ThresholdCrossedv+0xd0>)
   d4886:	781b      	ldrb	r3, [r3, #0]
   d4888:	aa04      	add	r2, sp, #16
   d488a:	a802      	add	r0, sp, #8
   d488c:	f7ff fc2c 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4890:	a803      	add	r0, sp, #12
   d4892:	f7ff fd1f 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d4896:	2301      	movs	r3, #1
   d4898:	7023      	strb	r3, [r4, #0]
  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d489a:	4d21      	ldr	r5, [pc, #132]	; (d4920 <_Z16ThresholdCrossedv+0xd4>)
   d489c:	782a      	ldrb	r2, [r5, #0]
   d489e:	b912      	cbnz	r2, d48a6 <_Z16ThresholdCrossedv+0x5a>
   d48a0:	4b20      	ldr	r3, [pc, #128]	; (d4924 <_Z16ThresholdCrossedv+0xd8>)
   d48a2:	781b      	ldrb	r3, [r3, #0]
   d48a4:	b1eb      	cbz	r3, d48e2 <_Z16ThresholdCrossedv+0x96>
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d48a6:	4b20      	ldr	r3, [pc, #128]	; (d4928 <_Z16ThresholdCrossedv+0xdc>)
   d48a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48ac:	2120      	movs	r1, #32
   d48ae:	e9cd 2300 	strd	r2, r3, [sp]
   d48b2:	a804      	add	r0, sp, #16
   d48b4:	4a1d      	ldr	r2, [pc, #116]	; (d492c <_Z16ThresholdCrossedv+0xe0>)
   d48b6:	f000 fe3d 	bl	d5534 <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d48ba:	2007      	movs	r0, #7
   d48bc:	f7ff fc56 	bl	d416c <_Z8BlinkLEDi>
   d48c0:	f7ff fc76 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d48c4:	2300      	movs	r3, #0
   d48c6:	f88d 3000 	strb.w	r3, [sp]
   d48ca:	4b13      	ldr	r3, [pc, #76]	; (d4918 <_Z16ThresholdCrossedv+0xcc>)
   d48cc:	4913      	ldr	r1, [pc, #76]	; (d491c <_Z16ThresholdCrossedv+0xd0>)
   d48ce:	781b      	ldrb	r3, [r3, #0]
   d48d0:	aa04      	add	r2, sp, #16
   d48d2:	a802      	add	r0, sp, #8
   d48d4:	f7ff fc08 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d48d8:	a803      	add	r0, sp, #12
   d48da:	f7ff fcfb 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d48de:	2301      	movs	r3, #1
   d48e0:	7023      	strb	r3, [r4, #0]
  thresholdTimeStamp = Time.minute();
   d48e2:	f001 fd69 	bl	d63b8 <_ZN9TimeClass6minuteEv>
   d48e6:	4b12      	ldr	r3, [pc, #72]	; (d4930 <_Z16ThresholdCrossedv+0xe4>)
   d48e8:	6018      	str	r0, [r3, #0]
  if (thresholdCrossAcknowledged == true)
   d48ea:	7823      	ldrb	r3, [r4, #0]
   d48ec:	b133      	cbz	r3, d48fc <_Z16ThresholdCrossedv+0xb0>
    lowerHumidityThresholdCrossed = false;
   d48ee:	4a0d      	ldr	r2, [pc, #52]	; (d4924 <_Z16ThresholdCrossedv+0xd8>)
    upperHumidityThresholdCrossed = false;
   d48f0:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d48f2:	7013      	strb	r3, [r2, #0]
    upperHumidityThresholdCrossed = false;
   d48f4:	702b      	strb	r3, [r5, #0]
    upperTemperatureThreshold     = false;
   d48f6:	4b0f      	ldr	r3, [pc, #60]	; (d4934 <_Z16ThresholdCrossedv+0xe8>)
   d48f8:	2200      	movs	r2, #0
   d48fa:	601a      	str	r2, [r3, #0]
}
   d48fc:	2001      	movs	r0, #1
   d48fe:	b00d      	add	sp, #52	; 0x34
   d4900:	bd30      	pop	{r4, r5, pc}
   d4902:	bf00      	nop
   d4904:	2003e4e1 	.word	0x2003e4e1
   d4908:	2003e570 	.word	0x2003e570
   d490c:	2003e58a 	.word	0x2003e58a
   d4910:	2003e558 	.word	0x2003e558
   d4914:	000da07e 	.word	0x000da07e
   d4918:	2003e47d 	.word	0x2003e47d
   d491c:	000da09a 	.word	0x000da09a
   d4920:	2003e571 	.word	0x2003e571
   d4924:	2003e4c8 	.word	0x2003e4c8
   d4928:	2003e500 	.word	0x2003e500
   d492c:	000da0ab 	.word	0x000da0ab
   d4930:	2003e478 	.word	0x2003e478
   d4934:	2003e220 	.word	0x2003e220

000d4938 <_Z14setVerboseMode6String>:
{
   d4938:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d493a:	4914      	ldr	r1, [pc, #80]	; (d498c <_Z14setVerboseMode6String+0x54>)
   d493c:	b085      	sub	sp, #20
   d493e:	4605      	mov	r5, r0
   d4940:	f001 fc4f 	bl	d61e2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4944:	4604      	mov	r4, r0
   d4946:	b190      	cbz	r0, d496e <_Z14setVerboseMode6String+0x36>
    verboseMode = true;
   d4948:	4b11      	ldr	r3, [pc, #68]	; (d4990 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d494a:	4a12      	ldr	r2, [pc, #72]	; (d4994 <_Z14setVerboseMode6String+0x5c>)
    verboseMode = true;
   d494c:	2401      	movs	r4, #1
   d494e:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4950:	2300      	movs	r3, #0
   d4952:	f88d 3000 	strb.w	r3, [sp]
   d4956:	4b10      	ldr	r3, [pc, #64]	; (d4998 <_Z14setVerboseMode6String+0x60>)
   d4958:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d495a:	4910      	ldr	r1, [pc, #64]	; (d499c <_Z14setVerboseMode6String+0x64>)
   d495c:	a802      	add	r0, sp, #8
   d495e:	f7ff fbc3 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4962:	a803      	add	r0, sp, #12
   d4964:	f7ff fcb6 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4968:	2001      	movs	r0, #1
}
   d496a:	b005      	add	sp, #20
   d496c:	bd30      	pop	{r4, r5, pc}
   d496e:	490c      	ldr	r1, [pc, #48]	; (d49a0 <_Z14setVerboseMode6String+0x68>)
   d4970:	4628      	mov	r0, r5
   d4972:	f001 fc36 	bl	d61e2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4976:	2800      	cmp	r0, #0
   d4978:	d0f7      	beq.n	d496a <_Z14setVerboseMode6String+0x32>
    verboseMode = false;
   d497a:	4b05      	ldr	r3, [pc, #20]	; (d4990 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d497c:	4a09      	ldr	r2, [pc, #36]	; (d49a4 <_Z14setVerboseMode6String+0x6c>)
    verboseMode = false;
   d497e:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4980:	4b05      	ldr	r3, [pc, #20]	; (d4998 <_Z14setVerboseMode6String+0x60>)
   d4982:	f88d 4000 	strb.w	r4, [sp]
   d4986:	781b      	ldrb	r3, [r3, #0]
   d4988:	e7e7      	b.n	d495a <_Z14setVerboseMode6String+0x22>
   d498a:	bf00      	nop
   d498c:	000da062 	.word	0x000da062
   d4990:	2003e224 	.word	0x2003e224
   d4994:	000da0c4 	.word	0x000da0c4
   d4998:	2003e47d 	.word	0x2003e47d
   d499c:	000da0e5 	.word	0x000da0e5
   d49a0:	000d9e3a 	.word	0x000d9e3a
   d49a4:	000da0d5 	.word	0x000da0d5

000d49a8 <_Z22publishStateTransitionv>:
{
   d49a8:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49aa:	4d18      	ldr	r5, [pc, #96]	; (d4a0c <_Z22publishStateTransitionv+0x64>)
   d49ac:	4c18      	ldr	r4, [pc, #96]	; (d4a10 <_Z22publishStateTransitionv+0x68>)
   d49ae:	4919      	ldr	r1, [pc, #100]	; (d4a14 <_Z22publishStateTransitionv+0x6c>)
   d49b0:	782a      	ldrb	r2, [r5, #0]
   d49b2:	7820      	ldrb	r0, [r4, #0]
{
   d49b4:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49b6:	231a      	movs	r3, #26
   d49b8:	fb03 1202 	mla	r2, r3, r2, r1
   d49bc:	9200      	str	r2, [sp, #0]
   d49be:	fb03 1300 	mla	r3, r3, r0, r1
   d49c2:	4a15      	ldr	r2, [pc, #84]	; (d4a18 <_Z22publishStateTransitionv+0x70>)
   d49c4:	2128      	movs	r1, #40	; 0x28
   d49c6:	a804      	add	r0, sp, #16
   d49c8:	f000 fdb4 	bl	d5534 <snprintf>
  oldState = state;
   d49cc:	782b      	ldrb	r3, [r5, #0]
   d49ce:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49d0:	f000 fd08 	bl	d53e4 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d49d4:	b190      	cbz	r0, d49fc <_Z22publishStateTransitionv+0x54>
   d49d6:	f7ff fbeb 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d49da:	2300      	movs	r3, #0
   d49dc:	f88d 3000 	strb.w	r3, [sp]
   d49e0:	4b0e      	ldr	r3, [pc, #56]	; (d4a1c <_Z22publishStateTransitionv+0x74>)
   d49e2:	490f      	ldr	r1, [pc, #60]	; (d4a20 <_Z22publishStateTransitionv+0x78>)
   d49e4:	781b      	ldrb	r3, [r3, #0]
   d49e6:	aa04      	add	r2, sp, #16
   d49e8:	a802      	add	r0, sp, #8
   d49ea:	f7ff fb7d 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49ee:	a803      	add	r0, sp, #12
   d49f0:	f7ff fc70 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49f4:	f000 fb16 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d49f8:	4b0a      	ldr	r3, [pc, #40]	; (d4a24 <_Z22publishStateTransitionv+0x7c>)
   d49fa:	6018      	str	r0, [r3, #0]
  Serial.println(stateTransitionString);
   d49fc:	f001 fdcc 	bl	d6598 <_Z16_fetch_usbserialv>
   d4a00:	a904      	add	r1, sp, #16
   d4a02:	f001 fb2e 	bl	d6062 <_ZN5Print7printlnEPKc>
}
   d4a06:	b00f      	add	sp, #60	; 0x3c
   d4a08:	bd30      	pop	{r4, r5, pc}
   d4a0a:	bf00      	nop
   d4a0c:	2003e554 	.word	0x2003e554
   d4a10:	2003e4fa 	.word	0x2003e4fa
   d4a14:	2003e150 	.word	0x2003e150
   d4a18:	000da0ea 	.word	0x000da0ea
   d4a1c:	2003e47d 	.word	0x2003e47d
   d4a20:	000da0f8 	.word	0x000da0f8
   d4a24:	2003e4c4 	.word	0x2003e4c4

000d4a28 <loop>:
{
   d4a28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
   d4a2a:	4c7b      	ldr	r4, [pc, #492]	; (d4c18 <loop+0x1f0>)
   d4a2c:	7823      	ldrb	r3, [r4, #0]
   d4a2e:	3b01      	subs	r3, #1
   d4a30:	2b05      	cmp	r3, #5
   d4a32:	d81c      	bhi.n	d4a6e <loop+0x46>
   d4a34:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a38:	000600c4 	.word	0x000600c4
   d4a3c:	0039004b 	.word	0x0039004b
   d4a40:	00960076 	.word	0x00960076
    if (verboseMode && state != oldState) publishStateTransition();
   d4a44:	4b75      	ldr	r3, [pc, #468]	; (d4c1c <loop+0x1f4>)
   d4a46:	781b      	ldrb	r3, [r3, #0]
   d4a48:	b12b      	cbz	r3, d4a56 <loop+0x2e>
   d4a4a:	4b75      	ldr	r3, [pc, #468]	; (d4c20 <loop+0x1f8>)
   d4a4c:	781b      	ldrb	r3, [r3, #0]
   d4a4e:	2b02      	cmp	r3, #2
   d4a50:	d001      	beq.n	d4a56 <loop+0x2e>
   d4a52:	f7ff ffa9 	bl	d49a8 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 5) {
   d4a56:	f001 fca5 	bl	d63a4 <_ZN9TimeClass4hourEv>
   d4a5a:	4b72      	ldr	r3, [pc, #456]	; (d4c24 <loop+0x1fc>)
   d4a5c:	4d72      	ldr	r5, [pc, #456]	; (d4c28 <loop+0x200>)
   d4a5e:	781b      	ldrb	r3, [r3, #0]
   d4a60:	4298      	cmp	r0, r3
   d4a62:	d006      	beq.n	d4a72 <loop+0x4a>
      TimePassed = Time.minute();
   d4a64:	f001 fca8 	bl	d63b8 <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d4a68:	2303      	movs	r3, #3
      TimePassed = Time.minute();
   d4a6a:	6028      	str	r0, [r5, #0]
      state = THRESHOLD_CROSSED;
   d4a6c:	7023      	strb	r3, [r4, #0]
}
   d4a6e:	b004      	add	sp, #16
   d4a70:	bd70      	pop	{r4, r5, r6, pc}
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 5) {
   d4a72:	f001 fca1 	bl	d63b8 <_ZN9TimeClass6minuteEv>
   d4a76:	682b      	ldr	r3, [r5, #0]
   d4a78:	1ac0      	subs	r0, r0, r3
   d4a7a:	2804      	cmp	r0, #4
   d4a7c:	dcf2      	bgt.n	d4a64 <loop+0x3c>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d4a7e:	4b6b      	ldr	r3, [pc, #428]	; (d4c2c <loop+0x204>)
   d4a80:	781b      	ldrb	r3, [r3, #0]
   d4a82:	b94b      	cbnz	r3, d4a98 <loop+0x70>
    || lowerTemperatureThresholdCrossed \
   d4a84:	4b6a      	ldr	r3, [pc, #424]	; (d4c30 <loop+0x208>)
   d4a86:	781b      	ldrb	r3, [r3, #0]
   d4a88:	b933      	cbnz	r3, d4a98 <loop+0x70>
    || upperHumidityThresholdCrossed \
   d4a8a:	4b6a      	ldr	r3, [pc, #424]	; (d4c34 <loop+0x20c>)
   d4a8c:	781b      	ldrb	r3, [r3, #0]
   d4a8e:	b91b      	cbnz	r3, d4a98 <loop+0x70>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d4a90:	4b69      	ldr	r3, [pc, #420]	; (d4c38 <loop+0x210>)
   d4a92:	781b      	ldrb	r3, [r3, #0]
   d4a94:	2b00      	cmp	r3, #0
   d4a96:	d0ea      	beq.n	d4a6e <loop+0x46>
   d4a98:	f001 fc8e 	bl	d63b8 <_ZN9TimeClass6minuteEv>
   d4a9c:	4b67      	ldr	r3, [pc, #412]	; (d4c3c <loop+0x214>)
   d4a9e:	681b      	ldr	r3, [r3, #0]
   d4aa0:	1ac0      	subs	r0, r0, r3
   d4aa2:	2804      	cmp	r0, #4
   d4aa4:	dde3      	ble.n	d4a6e <loop+0x46>
      state = THRESHOLD_CROSSED;
   d4aa6:	2304      	movs	r3, #4
   d4aa8:	e7e0      	b.n	d4a6c <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d4aaa:	4b5c      	ldr	r3, [pc, #368]	; (d4c1c <loop+0x1f4>)
   d4aac:	781b      	ldrb	r3, [r3, #0]
   d4aae:	b12b      	cbz	r3, d4abc <loop+0x94>
   d4ab0:	4b5b      	ldr	r3, [pc, #364]	; (d4c20 <loop+0x1f8>)
   d4ab2:	781b      	ldrb	r3, [r3, #0]
   d4ab4:	2b04      	cmp	r3, #4
   d4ab6:	d001      	beq.n	d4abc <loop+0x94>
   d4ab8:	f7ff ff76 	bl	d49a8 <_Z22publishStateTransitionv>
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4abc:	f7ff fcc4 	bl	d4448 <_Z16takeMeasurementsv>
   d4ac0:	b118      	cbz	r0, d4aca <loop+0xa2>
      ThresholdCrossed();
   d4ac2:	f7ff fec3 	bl	d484c <_Z16ThresholdCrossedv>
     state = IDLE_STATE;
   d4ac6:	2302      	movs	r3, #2
   d4ac8:	e7d0      	b.n	d4a6c <loop+0x44>
      state= ERROR_STATE;
   d4aca:	2301      	movs	r3, #1
   d4acc:	e7ce      	b.n	d4a6c <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d4ace:	4e53      	ldr	r6, [pc, #332]	; (d4c1c <loop+0x1f4>)
   d4ad0:	7832      	ldrb	r2, [r6, #0]
   d4ad2:	b12a      	cbz	r2, d4ae0 <loop+0xb8>
   d4ad4:	4b52      	ldr	r3, [pc, #328]	; (d4c20 <loop+0x1f8>)
   d4ad6:	781b      	ldrb	r3, [r3, #0]
   d4ad8:	2b03      	cmp	r3, #3
   d4ada:	d001      	beq.n	d4ae0 <loop+0xb8>
   d4adc:	f7ff ff64 	bl	d49a8 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4ae0:	f7ff fcb2 	bl	d4448 <_Z16takeMeasurementsv>
   d4ae4:	4605      	mov	r5, r0
   d4ae6:	b9d8      	cbnz	r0, d4b20 <loop+0xf8>
      state = ERROR_STATE;
   d4ae8:	2301      	movs	r3, #1
   d4aea:	7023      	strb	r3, [r4, #0]
   d4aec:	f000 fa9a 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4af0:	4b53      	ldr	r3, [pc, #332]	; (d4c40 <loop+0x218>)
   d4af2:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4af4:	7833      	ldrb	r3, [r6, #0]
   d4af6:	2b00      	cmp	r3, #0
   d4af8:	d0b9      	beq.n	d4a6e <loop+0x46>
   d4afa:	f7ff fb59 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4afe:	4b51      	ldr	r3, [pc, #324]	; (d4c44 <loop+0x21c>)
   d4b00:	f88d 5000 	strb.w	r5, [sp]
   d4b04:	781b      	ldrb	r3, [r3, #0]
   d4b06:	4a50      	ldr	r2, [pc, #320]	; (d4c48 <loop+0x220>)
   d4b08:	4950      	ldr	r1, [pc, #320]	; (d4c4c <loop+0x224>)
   d4b0a:	a802      	add	r0, sp, #8
   d4b0c:	f7ff faec 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b10:	a803      	add	r0, sp, #12
   d4b12:	f7ff fbdf 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b16:	f000 fa85 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d4b1a:	4b4d      	ldr	r3, [pc, #308]	; (d4c50 <loop+0x228>)
      resetTimeStamp = millis();
   d4b1c:	6018      	str	r0, [r3, #0]
   d4b1e:	e7a6      	b.n	d4a6e <loop+0x46>
    else state = REPORTING_STATE;
   d4b20:	2305      	movs	r3, #5
   d4b22:	e7a3      	b.n	d4a6c <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4b24:	4b3d      	ldr	r3, [pc, #244]	; (d4c1c <loop+0x1f4>)
   d4b26:	781b      	ldrb	r3, [r3, #0]
   d4b28:	b12b      	cbz	r3, d4b36 <loop+0x10e>
   d4b2a:	4b3d      	ldr	r3, [pc, #244]	; (d4c20 <loop+0x1f8>)
   d4b2c:	781b      	ldrb	r3, [r3, #0]
   d4b2e:	2b05      	cmp	r3, #5
   d4b30:	d001      	beq.n	d4b36 <loop+0x10e>
   d4b32:	f7ff ff39 	bl	d49a8 <_Z22publishStateTransitionv>
   d4b36:	f000 fc55 	bl	d53e4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4b3a:	b168      	cbz	r0, d4b58 <loop+0x130>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4b3c:	f001 fc32 	bl	d63a4 <_ZN9TimeClass4hourEv>
   d4b40:	280c      	cmp	r0, #12
   d4b42:	d105      	bne.n	d4b50 <loop+0x128>
   d4b44:	f000 fc4e 	bl	d53e4 <spark_cloud_flag_connected>
        if (!connected()) {
   d4b48:	b110      	cbz	r0, d4b50 <loop+0x128>
        return spark_sync_time(NULL);
   d4b4a:	2000      	movs	r0, #0
   d4b4c:	f000 fc6a 	bl	d5424 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4b50:	f7ff fbd6 	bl	d4300 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4b54:	2306      	movs	r3, #6
   d4b56:	e789      	b.n	d4a6c <loop+0x44>
      state = ERROR_STATE;
   d4b58:	2301      	movs	r3, #1
   d4b5a:	7023      	strb	r3, [r4, #0]
   d4b5c:	f000 fa62 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b60:	4b37      	ldr	r3, [pc, #220]	; (d4c40 <loop+0x218>)
   d4b62:	e7db      	b.n	d4b1c <loop+0xf4>
    if (verboseMode && state != oldState) publishStateTransition();
   d4b64:	4b2d      	ldr	r3, [pc, #180]	; (d4c1c <loop+0x1f4>)
   d4b66:	781b      	ldrb	r3, [r3, #0]
   d4b68:	b12b      	cbz	r3, d4b76 <loop+0x14e>
   d4b6a:	4b2d      	ldr	r3, [pc, #180]	; (d4c20 <loop+0x1f8>)
   d4b6c:	781b      	ldrb	r3, [r3, #0]
   d4b6e:	2b06      	cmp	r3, #6
   d4b70:	d001      	beq.n	d4b76 <loop+0x14e>
   d4b72:	f7ff ff19 	bl	d49a8 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4b76:	4b37      	ldr	r3, [pc, #220]	; (d4c54 <loop+0x22c>)
   d4b78:	781b      	ldrb	r3, [r3, #0]
   d4b7a:	2b00      	cmp	r3, #0
   d4b7c:	d0a3      	beq.n	d4ac6 <loop+0x9e>
   d4b7e:	f000 fa51 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4b82:	4b35      	ldr	r3, [pc, #212]	; (d4c58 <loop+0x230>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	1ac0      	subs	r0, r0, r3
   d4b88:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4b8c:	4298      	cmp	r0, r3
   d4b8e:	f67f af6e 	bls.w	d4a6e <loop+0x46>
   d4b92:	f000 fa47 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b96:	4d2a      	ldr	r5, [pc, #168]	; (d4c40 <loop+0x218>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b98:	4a30      	ldr	r2, [pc, #192]	; (d4c5c <loop+0x234>)
      resetTimeStamp = millis();
   d4b9a:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b9c:	2300      	movs	r3, #0
   d4b9e:	f88d 3000 	strb.w	r3, [sp]
   d4ba2:	4b28      	ldr	r3, [pc, #160]	; (d4c44 <loop+0x21c>)
   d4ba4:	492e      	ldr	r1, [pc, #184]	; (d4c60 <loop+0x238>)
   d4ba6:	781b      	ldrb	r3, [r3, #0]
   d4ba8:	a802      	add	r0, sp, #8
   d4baa:	f7ff fa9d 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4bae:	a803      	add	r0, sp, #12
   d4bb0:	f7ff fb90 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4bb4:	2301      	movs	r3, #1
   d4bb6:	7023      	strb	r3, [r4, #0]
   d4bb8:	f000 fa34 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4bbc:	6028      	str	r0, [r5, #0]
   d4bbe:	e756      	b.n	d4a6e <loop+0x46>
    if (verboseMode && state != oldState) publishStateTransition();
   d4bc0:	4b16      	ldr	r3, [pc, #88]	; (d4c1c <loop+0x1f4>)
   d4bc2:	781b      	ldrb	r3, [r3, #0]
   d4bc4:	b12b      	cbz	r3, d4bd2 <loop+0x1aa>
   d4bc6:	4b16      	ldr	r3, [pc, #88]	; (d4c20 <loop+0x1f8>)
   d4bc8:	781b      	ldrb	r3, [r3, #0]
   d4bca:	2b01      	cmp	r3, #1
   d4bcc:	d001      	beq.n	d4bd2 <loop+0x1aa>
   d4bce:	f7ff feeb 	bl	d49a8 <_Z22publishStateTransitionv>
   d4bd2:	f000 fa27 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4bd6:	4b1a      	ldr	r3, [pc, #104]	; (d4c40 <loop+0x218>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4bde:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4be2:	4283      	cmp	r3, r0
   d4be4:	f4bf af43 	bcs.w	d4a6e <loop+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4be8:	f000 fbfc 	bl	d53e4 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4bec:	b160      	cbz	r0, d4c08 <loop+0x1e0>
   d4bee:	2300      	movs	r3, #0
   d4bf0:	f88d 3000 	strb.w	r3, [sp]
   d4bf4:	4b13      	ldr	r3, [pc, #76]	; (d4c44 <loop+0x21c>)
   d4bf6:	4a1b      	ldr	r2, [pc, #108]	; (d4c64 <loop+0x23c>)
   d4bf8:	781b      	ldrb	r3, [r3, #0]
   d4bfa:	4914      	ldr	r1, [pc, #80]	; (d4c4c <loop+0x224>)
   d4bfc:	a802      	add	r0, sp, #8
   d4bfe:	f7ff fa73 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c02:	a803      	add	r0, sp, #12
   d4c04:	f7ff fb66 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d4c08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4c0c:	f000 fcb2 	bl	d5574 <delay>
      System.reset();
   d4c10:	f001 fb34 	bl	d627c <_ZN11SystemClass5resetEv>
}
   d4c14:	e72b      	b.n	d4a6e <loop+0x46>
   d4c16:	bf00      	nop
   d4c18:	2003e554 	.word	0x2003e554
   d4c1c:	2003e224 	.word	0x2003e224
   d4c20:	2003e4fa 	.word	0x2003e4fa
   d4c24:	2003e4b0 	.word	0x2003e4b0
   d4c28:	2003e480 	.word	0x2003e480
   d4c2c:	2003e58a 	.word	0x2003e58a
   d4c30:	2003e4e1 	.word	0x2003e4e1
   d4c34:	2003e571 	.word	0x2003e571
   d4c38:	2003e4c8 	.word	0x2003e4c8
   d4c3c:	2003e478 	.word	0x2003e478
   d4c40:	2003e508 	.word	0x2003e508
   d4c44:	2003e47d 	.word	0x2003e47d
   d4c48:	000da109 	.word	0x000da109
   d4c4c:	000d9ef9 	.word	0x000d9ef9
   d4c50:	2003e4c4 	.word	0x2003e4c4
   d4c54:	2003e148 	.word	0x2003e148
   d4c58:	2003e5a4 	.word	0x2003e5a4
   d4c5c:	000d9f4d 	.word	0x000d9f4d
   d4c60:	000da123 	.word	0x000da123
   d4c64:	000da13c 	.word	0x000da13c

000d4c68 <_Z17setUpperTempLimit6String>:
{
   d4c68:	b500      	push	{lr}
   d4c6a:	b08b      	sub	sp, #44	; 0x2c
   d4c6c:	9003      	str	r0, [sp, #12]
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d4c6e:	f001 fae3 	bl	d6238 <_ZNK6String7toFloatEv>
   d4c72:	4b0f      	ldr	r3, [pc, #60]	; (d4cb0 <_Z17setUpperTempLimit6String+0x48>)
   d4c74:	ed83 0a08 	vstr	s0, [r3, #32]
   d4c78:	f7ff fa9a 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4c7c:	9903      	ldr	r1, [sp, #12]
   d4c7e:	a806      	add	r0, sp, #24
   d4c80:	f001 faa4 	bl	d61cc <_ZN6StringC1ERKS_>
   d4c84:	2300      	movs	r3, #0
   d4c86:	f88d 3000 	strb.w	r3, [sp]
   d4c8a:	4b0a      	ldr	r3, [pc, #40]	; (d4cb4 <_Z17setUpperTempLimit6String+0x4c>)
   d4c8c:	9a06      	ldr	r2, [sp, #24]
   d4c8e:	781b      	ldrb	r3, [r3, #0]
   d4c90:	4909      	ldr	r1, [pc, #36]	; (d4cb8 <_Z17setUpperTempLimit6String+0x50>)
   d4c92:	a804      	add	r0, sp, #16
   d4c94:	f7ff fa28 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c98:	a805      	add	r0, sp, #20
   d4c9a:	f7ff fb1b 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c9e:	a806      	add	r0, sp, #24
   d4ca0:	f001 fa26 	bl	d60f0 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4ca4:	f7ff fa90 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4ca8:	2001      	movs	r0, #1
   d4caa:	b00b      	add	sp, #44	; 0x2c
   d4cac:	f85d fb04 	ldr.w	pc, [sp], #4
   d4cb0:	2003e510 	.word	0x2003e510
   d4cb4:	2003e47d 	.word	0x2003e47d
   d4cb8:	000da150 	.word	0x000da150

000d4cbc <_Z17setLowerTempLimit6String>:
{
   d4cbc:	b500      	push	{lr}
   d4cbe:	b08b      	sub	sp, #44	; 0x2c
   d4cc0:	9003      	str	r0, [sp, #12]
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d4cc2:	f001 fab9 	bl	d6238 <_ZNK6String7toFloatEv>
   d4cc6:	4b0f      	ldr	r3, [pc, #60]	; (d4d04 <_Z17setLowerTempLimit6String+0x48>)
   d4cc8:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
   d4ccc:	f7ff fa70 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4cd0:	9903      	ldr	r1, [sp, #12]
   d4cd2:	a806      	add	r0, sp, #24
   d4cd4:	f001 fa7a 	bl	d61cc <_ZN6StringC1ERKS_>
   d4cd8:	2300      	movs	r3, #0
   d4cda:	f88d 3000 	strb.w	r3, [sp]
   d4cde:	4b0a      	ldr	r3, [pc, #40]	; (d4d08 <_Z17setLowerTempLimit6String+0x4c>)
   d4ce0:	9a06      	ldr	r2, [sp, #24]
   d4ce2:	781b      	ldrb	r3, [r3, #0]
   d4ce4:	4909      	ldr	r1, [pc, #36]	; (d4d0c <_Z17setLowerTempLimit6String+0x50>)
   d4ce6:	a804      	add	r0, sp, #16
   d4ce8:	f7ff f9fe 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4cec:	a805      	add	r0, sp, #20
   d4cee:	f7ff faf1 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cf2:	a806      	add	r0, sp, #24
   d4cf4:	f001 f9fc 	bl	d60f0 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4cf8:	f7ff fa66 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4cfc:	2001      	movs	r0, #1
   d4cfe:	b00b      	add	sp, #44	; 0x2c
   d4d00:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d04:	2003e510 	.word	0x2003e510
   d4d08:	2003e47d 	.word	0x2003e47d
   d4d0c:	000da164 	.word	0x000da164

000d4d10 <_Z21setUpperHumidityLimit6String>:
{
   d4d10:	b500      	push	{lr}
   d4d12:	b08b      	sub	sp, #44	; 0x2c
   d4d14:	9003      	str	r0, [sp, #12]
  sensor_data.upperHumidityThreshold = value.toFloat();
   d4d16:	f001 fa8f 	bl	d6238 <_ZNK6String7toFloatEv>
   d4d1a:	4b0f      	ldr	r3, [pc, #60]	; (d4d58 <_Z21setUpperHumidityLimit6String+0x48>)
   d4d1c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
   d4d20:	f7ff fa46 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4d24:	9903      	ldr	r1, [sp, #12]
   d4d26:	a806      	add	r0, sp, #24
   d4d28:	f001 fa50 	bl	d61cc <_ZN6StringC1ERKS_>
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	f88d 3000 	strb.w	r3, [sp]
   d4d32:	4b0a      	ldr	r3, [pc, #40]	; (d4d5c <_Z21setUpperHumidityLimit6String+0x4c>)
   d4d34:	9a06      	ldr	r2, [sp, #24]
   d4d36:	781b      	ldrb	r3, [r3, #0]
   d4d38:	4909      	ldr	r1, [pc, #36]	; (d4d60 <_Z21setUpperHumidityLimit6String+0x50>)
   d4d3a:	a804      	add	r0, sp, #16
   d4d3c:	f7ff f9d4 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d40:	a805      	add	r0, sp, #20
   d4d42:	f7ff fac7 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d46:	a806      	add	r0, sp, #24
   d4d48:	f001 f9d2 	bl	d60f0 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4d4c:	f7ff fa3c 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4d50:	2001      	movs	r0, #1
   d4d52:	b00b      	add	sp, #44	; 0x2c
   d4d54:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d58:	2003e510 	.word	0x2003e510
   d4d5c:	2003e47d 	.word	0x2003e47d
   d4d60:	000da150 	.word	0x000da150

000d4d64 <_Z21setLowerHumidityLimit6String>:
{
   d4d64:	b500      	push	{lr}
   d4d66:	b08b      	sub	sp, #44	; 0x2c
   d4d68:	9003      	str	r0, [sp, #12]
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4d6a:	f001 fa65 	bl	d6238 <_ZNK6String7toFloatEv>
   d4d6e:	4b0f      	ldr	r3, [pc, #60]	; (d4dac <_Z21setLowerHumidityLimit6String+0x48>)
   d4d70:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
   d4d74:	f7ff fa1c 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4d78:	9903      	ldr	r1, [sp, #12]
   d4d7a:	a806      	add	r0, sp, #24
   d4d7c:	f001 fa26 	bl	d61cc <_ZN6StringC1ERKS_>
   d4d80:	2300      	movs	r3, #0
   d4d82:	f88d 3000 	strb.w	r3, [sp]
   d4d86:	4b0a      	ldr	r3, [pc, #40]	; (d4db0 <_Z21setLowerHumidityLimit6String+0x4c>)
   d4d88:	9a06      	ldr	r2, [sp, #24]
   d4d8a:	781b      	ldrb	r3, [r3, #0]
   d4d8c:	4909      	ldr	r1, [pc, #36]	; (d4db4 <_Z21setLowerHumidityLimit6String+0x50>)
   d4d8e:	a804      	add	r0, sp, #16
   d4d90:	f7ff f9aa 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d94:	a805      	add	r0, sp, #20
   d4d96:	f7ff fa9d 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d9a:	a806      	add	r0, sp, #24
   d4d9c:	f001 f9a8 	bl	d60f0 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4da0:	f7ff fa12 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4da4:	2001      	movs	r0, #1
   d4da6:	b00b      	add	sp, #44	; 0x2c
   d4da8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4dac:	2003e510 	.word	0x2003e510
   d4db0:	2003e47d 	.word	0x2003e47d
   d4db4:	000da164 	.word	0x000da164

000d4db8 <_GLOBAL__sub_I_sht31>:
        val_(val) {
   d4db8:	4b11      	ldr	r3, [pc, #68]	; (d4e00 <_GLOBAL__sub_I_sht31+0x48>)
   d4dba:	b570      	push	{r4, r5, r6, lr}
   d4dbc:	2400      	movs	r4, #0
   d4dbe:	701c      	strb	r4, [r3, #0]
   d4dc0:	4b10      	ldr	r3, [pc, #64]	; (d4e04 <_GLOBAL__sub_I_sht31+0x4c>)
              error_(SYSTEM_ERROR_NONE) {
   d4dc2:	4d11      	ldr	r5, [pc, #68]	; (d4e08 <_GLOBAL__sub_I_sht31+0x50>)
   d4dc4:	2601      	movs	r6, #1
   d4dc6:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4dc8:	f000 f96c 	bl	d50a4 <HAL_Pin_Map>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4dcc:	480f      	ldr	r0, [pc, #60]	; (d4e0c <_GLOBAL__sub_I_sht31+0x54>)
   d4dce:	f000 f82b 	bl	d4e28 <_ZN14Adafruit_SHT31C1Ev>
    SleepResult() {}
   d4dd2:	4b0f      	ldr	r3, [pc, #60]	; (d4e10 <_GLOBAL__sub_I_sht31+0x58>)
   d4dd4:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
   d4dd6:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4dd8:	602c      	str	r4, [r5, #0]
   d4dda:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4ddc:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4dde:	f000 fa93 	bl	d5308 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4de2:	4a0c      	ldr	r2, [pc, #48]	; (d4e14 <_GLOBAL__sub_I_sht31+0x5c>)
   d4de4:	490c      	ldr	r1, [pc, #48]	; (d4e18 <_GLOBAL__sub_I_sht31+0x60>)
   d4de6:	4628      	mov	r0, r5
   d4de8:	f001 fd50 	bl	d688c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4dec:	4621      	mov	r1, r4
   d4dee:	4630      	mov	r0, r6
   d4df0:	f000 fa9a 	bl	d5328 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4df4:	4631      	mov	r1, r6
   d4df6:	2004      	movs	r0, #4
   d4df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4dfc:	f000 b8fa 	b.w	d4ff4 <HAL_Feature_Set>
   d4e00:	2003e47c 	.word	0x2003e47c
   d4e04:	2003e47d 	.word	0x2003e47d
   d4e08:	2003e46c 	.word	0x2003e46c
   d4e0c:	2003e548 	.word	0x2003e548
   d4e10:	ffff0000 	.word	0xffff0000
   d4e14:	2003e468 	.word	0x2003e468
   d4e18:	000d40d1 	.word	0x000d40d1

000d4e1c <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
   d4e1c:	f000 b942 	b.w	d50a4 <HAL_Pin_Map>

000d4e20 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e20:	6803      	ldr	r3, [r0, #0]
   d4e22:	b2c9      	uxtb	r1, r1
   d4e24:	689b      	ldr	r3, [r3, #8]
   d4e26:	4718      	bx	r3

000d4e28 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4e28:	4770      	bx	lr

000d4e2a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4e2a:	b538      	push	{r3, r4, r5, lr}
   d4e2c:	4605      	mov	r5, r0
   d4e2e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4e30:	f001 fd04 	bl	d683c <_Z19__fetch_global_Wirev>
   d4e34:	7829      	ldrb	r1, [r5, #0]
   d4e36:	f000 ffaf 	bl	d5d98 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4e3a:	f001 fcff 	bl	d683c <_Z19__fetch_global_Wirev>
   d4e3e:	0a21      	lsrs	r1, r4, #8
   d4e40:	f7ff ffee 	bl	d4e20 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4e44:	f001 fcfa 	bl	d683c <_Z19__fetch_global_Wirev>
   d4e48:	b2e1      	uxtb	r1, r4
   d4e4a:	f7ff ffe9 	bl	d4e20 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4e4e:	f001 fcf5 	bl	d683c <_Z19__fetch_global_Wirev>
}
   d4e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d4e56:	f000 bfa7 	b.w	d5da8 <_ZN7TwoWire15endTransmissionEv>

000d4e5a <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d4e5a:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4e5c:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4e60:	f7ff ffe3 	bl	d4e2a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d4e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d4e68:	200a      	movs	r0, #10
   d4e6a:	f000 bb83 	b.w	d5574 <delay>

000d4e6e <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4e6e:	b538      	push	{r3, r4, r5, lr}
   d4e70:	4604      	mov	r4, r0
   d4e72:	460d      	mov	r5, r1
  Wire.begin();
   d4e74:	f001 fce2 	bl	d683c <_Z19__fetch_global_Wirev>
   d4e78:	f000 ff5c 	bl	d5d34 <_ZN7TwoWire5beginEv>
  reset();
   d4e7c:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d4e7e:	7025      	strb	r5, [r4, #0]
  reset();
   d4e80:	f7ff ffeb 	bl	d4e5a <_ZN14Adafruit_SHT315resetEv>
}
   d4e84:	2001      	movs	r0, #1
   d4e86:	bd38      	pop	{r3, r4, r5, pc}

000d4e88 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d4e88:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d4e8a:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d4e8c:	4291      	cmp	r1, r2
   d4e8e:	d00e      	beq.n	d4eae <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4e90:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4e94:	4058      	eors	r0, r3
   d4e96:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d4e98:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4e9c:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d4ea0:	bf18      	it	ne
   d4ea2:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d4ea6:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d4ea8:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d4eaa:	d1f5      	bne.n	d4e98 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4eac:	e7ee      	b.n	d4e8c <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d4eae:	4770      	bx	lr

000d4eb0 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d4eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d4eb2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d4eb6:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d4eb8:	f7ff ffb7 	bl	d4e2a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d4ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4ec0:	f000 fb58 	bl	d5574 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4ec4:	f001 fcba 	bl	d683c <_Z19__fetch_global_Wirev>
   d4ec8:	7829      	ldrb	r1, [r5, #0]
   d4eca:	2206      	movs	r2, #6
   d4ecc:	f000 ff61 	bl	d5d92 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4ed0:	f001 fcb4 	bl	d683c <_Z19__fetch_global_Wirev>
   d4ed4:	6803      	ldr	r3, [r0, #0]
   d4ed6:	691b      	ldr	r3, [r3, #16]
   d4ed8:	4798      	blx	r3
   d4eda:	2806      	cmp	r0, #6
   d4edc:	d14b      	bne.n	d4f76 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d4ede:	466e      	mov	r6, sp
   d4ee0:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d4ee2:	f001 fcab 	bl	d683c <_Z19__fetch_global_Wirev>
   d4ee6:	6803      	ldr	r3, [r0, #0]
   d4ee8:	695b      	ldr	r3, [r3, #20]
   d4eea:	4798      	blx	r3
   d4eec:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d4eee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d4ef2:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d4ef6:	4669      	mov	r1, sp
   d4ef8:	d1f3      	bne.n	d4ee2 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4efa:	2202      	movs	r2, #2
   d4efc:	4628      	mov	r0, r5
   d4efe:	f7ff ffc3 	bl	d4e88 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4f02:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d4f06:	4286      	cmp	r6, r0
   d4f08:	d135      	bne.n	d4f76 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4f0a:	2202      	movs	r2, #2
   d4f0c:	f10d 0103 	add.w	r1, sp, #3
   d4f10:	4628      	mov	r0, r5
   d4f12:	f7ff ffb9 	bl	d4e88 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4f16:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d4f1a:	4286      	cmp	r6, r0
   d4f1c:	d12b      	bne.n	d4f76 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d4f1e:	f8bd 0000 	ldrh.w	r0, [sp]
   d4f22:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d4f26:	ba40      	rev16	r0, r0
   d4f28:	b280      	uxth	r0, r0
   d4f2a:	f001 fe07 	bl	d6b3c <__aeabi_ui2d>
  stemp *= 175;
   d4f2e:	a318      	add	r3, pc, #96	; (adr r3, d4f90 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f34:	f001 fe7c 	bl	d6c30 <__aeabi_dmul>
  stemp /= 0xffff;
   d4f38:	a311      	add	r3, pc, #68	; (adr r3, d4f80 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f3e:	f001 ffa1 	bl	d6e84 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d4f42:	4b11      	ldr	r3, [pc, #68]	; (d4f88 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4f44:	2200      	movs	r2, #0
   d4f46:	f001 fcbb 	bl	d68c0 <__aeabi_dsub>
  temp = stemp;
   d4f4a:	f002 f92b 	bl	d71a4 <__aeabi_d2f>
   d4f4e:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d4f50:	ba60      	rev16	r0, r4
   d4f52:	b280      	uxth	r0, r0
   d4f54:	f001 fdf2 	bl	d6b3c <__aeabi_ui2d>
  shum *= 100;
   d4f58:	4b0c      	ldr	r3, [pc, #48]	; (d4f8c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	f001 fe68 	bl	d6c30 <__aeabi_dmul>
  shum /= 0xFFFF;
   d4f60:	a307      	add	r3, pc, #28	; (adr r3, d4f80 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f66:	f001 ff8d 	bl	d6e84 <__aeabi_ddiv>
  humidity = shum;
   d4f6a:	f002 f91b 	bl	d71a4 <__aeabi_d2f>
   d4f6e:	6068      	str	r0, [r5, #4]
  return true;
   d4f70:	2001      	movs	r0, #1
}
   d4f72:	b002      	add	sp, #8
   d4f74:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4f76:	2000      	movs	r0, #0
   d4f78:	e7fb      	b.n	d4f72 <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d4f7a:	bf00      	nop
   d4f7c:	f3af 8000 	nop.w
   d4f80:	00000000 	.word	0x00000000
   d4f84:	40efffe0 	.word	0x40efffe0
   d4f88:	40468000 	.word	0x40468000
   d4f8c:	40590000 	.word	0x40590000
   d4f90:	00000000 	.word	0x00000000
   d4f94:	4065e000 	.word	0x4065e000

000d4f98 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d4f98:	b510      	push	{r4, lr}
   d4f9a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4f9c:	f7ff ff88 	bl	d4eb0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4fa0:	b110      	cbz	r0, d4fa8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d4fa2:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d4fa6:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d4fa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4fb0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d4fac:	e7fb      	b.n	d4fa6 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d4fae:	bf00      	nop
   d4fb0:	7fc00000 	.word	0x7fc00000

000d4fb4 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d4fb4:	b510      	push	{r4, lr}
   d4fb6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4fb8:	f7ff ff7a 	bl	d4eb0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4fbc:	b110      	cbz	r0, d4fc4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d4fbe:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d4fc2:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d4fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4fcc <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d4fc8:	e7fb      	b.n	d4fc2 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d4fca:	bf00      	nop
   d4fcc:	7fc00000 	.word	0x7fc00000

000d4fd0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4fd0:	f000 b868 	b.w	d50a4 <HAL_Pin_Map>

000d4fd4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <os_mutex_recursive_create+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030248 	.word	0x00030248

000d4fe4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <os_mutex_recursive_destroy+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030248 	.word	0x00030248

000d4ff4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_Feature_Set+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030234 	.word	0x00030234

000d5004 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_RNG_GetRandomNumber+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	685b      	ldr	r3, [r3, #4]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030218 	.word	0x00030218

000d5014 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_Delay_Microseconds+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	68db      	ldr	r3, [r3, #12]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030218 	.word	0x00030218

000d5024 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	695b      	ldr	r3, [r3, #20]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030218 	.word	0x00030218

000d5034 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_EEPROM_Init+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030218 	.word	0x00030218

000d5044 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_EEPROM_Write+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030218 	.word	0x00030218

000d5054 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_EEPROM_Get+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030218 	.word	0x00030218

000d5064 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_EEPROM_Put+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030218 	.word	0x00030218

000d5074 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <hal_rtc_time_is_valid+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030218 	.word	0x00030218

000d5084 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <hal_timer_millis+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030218 	.word	0x00030218

000d5094 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <hal_rtc_get_time+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030218 	.word	0x00030218

000d50a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_Pin_Map+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	681b      	ldr	r3, [r3, #0]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003022c 	.word	0x0003022c

000d50b4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_Pin_Mode+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	689b      	ldr	r3, [r3, #8]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003022c 	.word	0x0003022c

000d50c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_Get_Pin_Mode+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	68db      	ldr	r3, [r3, #12]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003022c 	.word	0x0003022c

000d50d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_GPIO_Write+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	691b      	ldr	r3, [r3, #16]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003022c 	.word	0x0003022c

000d50e4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <hal_i2c_begin+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	68db      	ldr	r3, [r3, #12]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030228 	.word	0x00030228

000d50f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <hal_i2c_begin_transmission+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	699b      	ldr	r3, [r3, #24]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030228 	.word	0x00030228

000d5104 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <hal_i2c_end_transmission+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	69db      	ldr	r3, [r3, #28]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030228 	.word	0x00030228

000d5114 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <hal_i2c_write+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6a1b      	ldr	r3, [r3, #32]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030228 	.word	0x00030228

000d5124 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <hal_i2c_available+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030228 	.word	0x00030228

000d5134 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <hal_i2c_read+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030228 	.word	0x00030228

000d5144 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <hal_i2c_peek+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030228 	.word	0x00030228

000d5154 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <hal_i2c_flush+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030228 	.word	0x00030228

000d5164 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <hal_i2c_is_enabled+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030228 	.word	0x00030228

000d5174 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <hal_i2c_init+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030228 	.word	0x00030228

000d5184 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <hal_i2c_request_ex+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030228 	.word	0x00030228

000d5194 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <inet_inet_ntop+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	695b      	ldr	r3, [r3, #20]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030264 	.word	0x00030264

000d51a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <netdb_freeaddrinfo+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	689b      	ldr	r3, [r3, #8]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030268 	.word	0x00030268

000d51b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <netdb_getaddrinfo+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	68db      	ldr	r3, [r3, #12]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030268 	.word	0x00030268

000d51c4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <hal_spi_init+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	69db      	ldr	r3, [r3, #28]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030230 	.word	0x00030230

000d51d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <hal_spi_is_enabled+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6a1b      	ldr	r3, [r3, #32]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030230 	.word	0x00030230

000d51e4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <hal_usart_init+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	681b      	ldr	r3, [r3, #0]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	0003023c 	.word	0x0003023c

000d51f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <hal_usart_write+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	68db      	ldr	r3, [r3, #12]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	0003023c 	.word	0x0003023c

000d5204 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <hal_usart_available+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	691b      	ldr	r3, [r3, #16]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	0003023c 	.word	0x0003023c

000d5214 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <hal_usart_read+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	695b      	ldr	r3, [r3, #20]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003023c 	.word	0x0003023c

000d5224 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <hal_usart_peek+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	699b      	ldr	r3, [r3, #24]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003023c 	.word	0x0003023c

000d5234 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <hal_usart_flush+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	69db      	ldr	r3, [r3, #28]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003023c 	.word	0x0003023c

000d5244 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <hal_usart_is_enabled+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6a1b      	ldr	r3, [r3, #32]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003023c 	.word	0x0003023c

000d5254 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <hal_usart_available_data_for_write+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003023c 	.word	0x0003023c

000d5264 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <HAL_USB_USART_Init+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	681b      	ldr	r3, [r3, #0]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	0003024c 	.word	0x0003024c

000d5274 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <HAL_USB_USART_Begin+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	685b      	ldr	r3, [r3, #4]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003024c 	.word	0x0003024c

000d5284 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <HAL_USB_USART_Available_Data+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	691b      	ldr	r3, [r3, #16]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	0003024c 	.word	0x0003024c

000d5294 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	695b      	ldr	r3, [r3, #20]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	0003024c 	.word	0x0003024c

000d52a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <HAL_USB_USART_Receive_Data+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	699b      	ldr	r3, [r3, #24]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	0003024c 	.word	0x0003024c

000d52b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <HAL_USB_USART_Send_Data+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	69db      	ldr	r3, [r3, #28]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	0003024c 	.word	0x0003024c

000d52c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <HAL_USB_USART_Flush_Data+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6a1b      	ldr	r3, [r3, #32]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003024c 	.word	0x0003024c

000d52d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <panic_+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030260 	.word	0x00030260

000d52e4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b03      	ldr	r3, [pc, #12]	; (d52f4 <diag_get_source+0x10>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d52ee:	9301      	str	r3, [sp, #4]
   d52f0:	bd08      	pop	{r3, pc}
   d52f2:	0000      	.short	0x0000
   d52f4:	00030260 	.word	0x00030260

000d52f8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <system_mode+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	681b      	ldr	r3, [r3, #0]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030220 	.word	0x00030220

000d5308 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <set_system_mode+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	685b      	ldr	r3, [r3, #4]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030220 	.word	0x00030220

000d5318 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <system_delay_ms+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	695b      	ldr	r3, [r3, #20]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030220 	.word	0x00030220

000d5328 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <system_thread_set_state+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030220 	.word	0x00030220

000d5338 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <application_thread_current+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030220 	.word	0x00030220

000d5348 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <application_thread_invoke+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030220 	.word	0x00030220

000d5358 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <system_thread_get_state+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030220 	.word	0x00030220

000d5368 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b03      	ldr	r3, [pc, #12]	; (d5378 <system_ctrl_set_app_request_handler+0x10>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5372:	9301      	str	r3, [sp, #4]
   d5374:	bd08      	pop	{r3, pc}
   d5376:	0000      	.short	0x0000
   d5378:	00030220 	.word	0x00030220

000d537c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b03      	ldr	r3, [pc, #12]	; (d538c <system_ctrl_set_result+0x10>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5386:	9301      	str	r3, [sp, #4]
   d5388:	bd08      	pop	{r3, pc}
   d538a:	0000      	.short	0x0000
   d538c:	00030220 	.word	0x00030220

000d5390 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b03      	ldr	r3, [pc, #12]	; (d53a0 <system_reset+0x10>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d539a:	9301      	str	r3, [sp, #4]
   d539c:	bd08      	pop	{r3, pc}
   d539e:	0000      	.short	0x0000
   d53a0:	00030220 	.word	0x00030220

000d53a4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <spark_variable+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	681b      	ldr	r3, [r3, #0]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030244 	.word	0x00030244

000d53b4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <spark_function+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	685b      	ldr	r3, [r3, #4]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	00030244 	.word	0x00030244

000d53c4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <spark_process+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	689b      	ldr	r3, [r3, #8]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	00030244 	.word	0x00030244

000d53d4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <spark_cloud_flag_connect+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	68db      	ldr	r3, [r3, #12]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	00030244 	.word	0x00030244

000d53e4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <spark_cloud_flag_connected+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	695b      	ldr	r3, [r3, #20]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	00030244 	.word	0x00030244

000d53f4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <spark_deviceID+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	69db      	ldr	r3, [r3, #28]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030244 	.word	0x00030244

000d5404 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <spark_send_event+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6a1b      	ldr	r3, [r3, #32]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030244 	.word	0x00030244

000d5414 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <spark_subscribe+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030244 	.word	0x00030244

000d5424 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <spark_sync_time+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030244 	.word	0x00030244

000d5434 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <spark_sync_time_pending+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030244 	.word	0x00030244

000d5444 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030244 	.word	0x00030244

000d5454 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <network_connect+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	685b      	ldr	r3, [r3, #4]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030240 	.word	0x00030240

000d5464 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <network_connecting+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	689b      	ldr	r3, [r3, #8]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030240 	.word	0x00030240

000d5474 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <network_disconnect+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	68db      	ldr	r3, [r3, #12]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030240 	.word	0x00030240

000d5484 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <network_ready+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	691b      	ldr	r3, [r3, #16]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030240 	.word	0x00030240

000d5494 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <network_on+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	695b      	ldr	r3, [r3, #20]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030240 	.word	0x00030240

000d54a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <network_off+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	699b      	ldr	r3, [r3, #24]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030240 	.word	0x00030240

000d54b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <network_listen+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	69db      	ldr	r3, [r3, #28]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030240 	.word	0x00030240

000d54c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <network_listening+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	6a1b      	ldr	r3, [r3, #32]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030240 	.word	0x00030240

000d54d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <network_set_listen_timeout+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030240 	.word	0x00030240

000d54e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <network_get_listen_timeout+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030240 	.word	0x00030240

000d54f4 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <malloc+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	681b      	ldr	r3, [r3, #0]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	0003021c 	.word	0x0003021c

000d5504 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <free+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	685b      	ldr	r3, [r3, #4]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	0003021c 	.word	0x0003021c

000d5514 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <realloc+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	689b      	ldr	r3, [r3, #8]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003021c 	.word	0x0003021c

000d5524 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <siscanf+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	699b      	ldr	r3, [r3, #24]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	0003021c 	.word	0x0003021c

000d5534 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <snprintf+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	69db      	ldr	r3, [r3, #28]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003021c 	.word	0x0003021c

000d5544 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <abort+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003021c 	.word	0x0003021c

000d5554 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <_malloc_r+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	0003021c 	.word	0x0003021c

000d5564 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <newlib_impure_ptr_callback+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	0003021c 	.word	0x0003021c

000d5574 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5574:	2100      	movs	r1, #0
   d5576:	f7ff becf 	b.w	d5318 <system_delay_ms>

000d557a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d557a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d557c:	6883      	ldr	r3, [r0, #8]
   d557e:	4604      	mov	r4, r0
   d5580:	b90b      	cbnz	r3, d5586 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5582:	f001 f98c 	bl	d689e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5586:	68c3      	ldr	r3, [r0, #12]
   d5588:	4798      	blx	r3
      if (_M_manager)
   d558a:	68a3      	ldr	r3, [r4, #8]
   d558c:	b11b      	cbz	r3, d5596 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d558e:	2203      	movs	r2, #3
   d5590:	4621      	mov	r1, r4
   d5592:	4620      	mov	r0, r4
   d5594:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5596:	4620      	mov	r0, r4
   d5598:	2110      	movs	r1, #16
}
   d559a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d559e:	f001 b97a 	b.w	d6896 <_ZdlPvj>

000d55a2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d55a2:	b510      	push	{r4, lr}
   d55a4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d55a6:	6800      	ldr	r0, [r0, #0]
   d55a8:	b108      	cbz	r0, d55ae <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d55aa:	f7ff fd1b 	bl	d4fe4 <os_mutex_recursive_destroy>
    }
   d55ae:	4620      	mov	r0, r4
   d55b0:	bd10      	pop	{r4, pc}

000d55b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d55b2:	680b      	ldr	r3, [r1, #0]
   d55b4:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d55b6:	b113      	cbz	r3, d55be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d55b8:	685a      	ldr	r2, [r3, #4]
   d55ba:	3201      	adds	r2, #1
   d55bc:	605a      	str	r2, [r3, #4]
      }
   d55be:	4770      	bx	lr

000d55c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d55c0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d55c2:	4c06      	ldr	r4, [pc, #24]	; (d55dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d55c4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d55c6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d55c8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d55ca:	f7ff fd03 	bl	d4fd4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d55ce:	4620      	mov	r0, r4
   d55d0:	4a03      	ldr	r2, [pc, #12]	; (d55e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d55d2:	4904      	ldr	r1, [pc, #16]	; (d55e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d55d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d55d8:	f001 b958 	b.w	d688c <__aeabi_atexit>
   d55dc:	2003e5b4 	.word	0x2003e5b4
   d55e0:	2003e468 	.word	0x2003e468
   d55e4:	000d55a3 	.word	0x000d55a3

000d55e8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d55e8:	2200      	movs	r2, #0
   d55ea:	6840      	ldr	r0, [r0, #4]
   d55ec:	4611      	mov	r1, r2
   d55ee:	f7ff bf49 	b.w	d5484 <network_ready>

000d55f2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d55f2:	2200      	movs	r2, #0
   d55f4:	6840      	ldr	r0, [r0, #4]
   d55f6:	4611      	mov	r1, r2
   d55f8:	f7ff bf64 	b.w	d54c4 <network_listening>

000d55fc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55fc:	2200      	movs	r2, #0
   d55fe:	6840      	ldr	r0, [r0, #4]
   d5600:	4611      	mov	r1, r2
   d5602:	f7ff bf6f 	b.w	d54e4 <network_get_listen_timeout>

000d5606 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5606:	6840      	ldr	r0, [r0, #4]
   d5608:	2200      	movs	r2, #0
   d560a:	f7ff bf63 	b.w	d54d4 <network_set_listen_timeout>

000d560e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d560e:	6840      	ldr	r0, [r0, #4]
   d5610:	2200      	movs	r2, #0
   d5612:	f081 0101 	eor.w	r1, r1, #1
   d5616:	f7ff bf4d 	b.w	d54b4 <network_listen>

000d561a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d561a:	2300      	movs	r3, #0
   d561c:	6840      	ldr	r0, [r0, #4]
   d561e:	461a      	mov	r2, r3
   d5620:	4619      	mov	r1, r3
   d5622:	f7ff bf3f 	b.w	d54a4 <network_off>

000d5626 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5626:	2300      	movs	r3, #0
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	461a      	mov	r2, r3
   d562c:	4619      	mov	r1, r3
   d562e:	f7ff bf31 	b.w	d5494 <network_on>

000d5632 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5632:	2200      	movs	r2, #0
   d5634:	6840      	ldr	r0, [r0, #4]
   d5636:	4611      	mov	r1, r2
   d5638:	f7ff bf14 	b.w	d5464 <network_connecting>

000d563c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d563c:	6840      	ldr	r0, [r0, #4]
   d563e:	2200      	movs	r2, #0
   d5640:	2102      	movs	r1, #2
   d5642:	f7ff bf17 	b.w	d5474 <network_disconnect>

000d5646 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5646:	2300      	movs	r3, #0
   d5648:	6840      	ldr	r0, [r0, #4]
   d564a:	461a      	mov	r2, r3
   d564c:	f7ff bf02 	b.w	d5454 <network_connect>

000d5650 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5650:	4b08      	ldr	r3, [pc, #32]	; (d5674 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5652:	b510      	push	{r4, lr}
   d5654:	2428      	movs	r4, #40	; 0x28
   d5656:	4622      	mov	r2, r4
   d5658:	4618      	mov	r0, r3
   d565a:	2100      	movs	r1, #0
   d565c:	f002 f8de 	bl	d781c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5660:	4b05      	ldr	r3, [pc, #20]	; (d5678 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5662:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5668:	6042      	str	r2, [r0, #4]
   d566a:	2204      	movs	r2, #4
   d566c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d566e:	4a03      	ldr	r2, [pc, #12]	; (d567c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5670:	601a      	str	r2, [r3, #0]
   d5672:	bd10      	pop	{r4, pc}
   d5674:	2003e5c0 	.word	0x2003e5c0
   d5678:	2003e5b8 	.word	0x2003e5b8
   d567c:	000da1dc 	.word	0x000da1dc

000d5680 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5680:	4770      	bx	lr

000d5682 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5682:	2000      	movs	r0, #0
   d5684:	4770      	bx	lr

000d5686 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5686:	b510      	push	{r4, lr}
   d5688:	2110      	movs	r1, #16
   d568a:	4604      	mov	r4, r0
   d568c:	f001 f903 	bl	d6896 <_ZdlPvj>
   d5690:	4620      	mov	r0, r4
   d5692:	bd10      	pop	{r4, pc}

000d5694 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5694:	b508      	push	{r3, lr}
      { delete this; }
   d5696:	f7ff fff6 	bl	d5686 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d569a:	bd08      	pop	{r3, pc}

000d569c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d569c:	b510      	push	{r4, lr}
      if (_M_manager)
   d569e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d56a0:	4604      	mov	r4, r0
      if (_M_manager)
   d56a2:	b113      	cbz	r3, d56aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56a4:	2203      	movs	r2, #3
   d56a6:	4601      	mov	r1, r0
   d56a8:	4798      	blx	r3
    }
   d56aa:	4620      	mov	r0, r4
   d56ac:	bd10      	pop	{r4, pc}

000d56ae <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d56ae:	b530      	push	{r4, r5, lr}
        type_(type) {
   d56b0:	2200      	movs	r2, #0
   d56b2:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d56b6:	6002      	str	r2, [r0, #0]
   d56b8:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56ba:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d56bc:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d56be:	680c      	ldr	r4, [r1, #0]
   d56c0:	8085      	strh	r5, [r0, #4]
   d56c2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d56c4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d56c6:	bd30      	pop	{r4, r5, pc}

000d56c8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d56c8:	b510      	push	{r4, lr}
   d56ca:	4604      	mov	r4, r0
    free((void*)msg_);
   d56cc:	6800      	ldr	r0, [r0, #0]
   d56ce:	f7ff ff19 	bl	d5504 <free>
}
   d56d2:	4620      	mov	r0, r4
   d56d4:	bd10      	pop	{r4, pc}

000d56d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d56d6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d56d8:	68c4      	ldr	r4, [r0, #12]
   d56da:	b1f4      	cbz	r4, d571a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d56dc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d56de:	2b02      	cmp	r3, #2
   d56e0:	d103      	bne.n	d56ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d56e2:	f104 000c 	add.w	r0, r4, #12
   d56e6:	f7ff ffef 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d56ea:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d56ec:	b135      	cbz	r5, d56fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d56ee:	4628      	mov	r0, r5
   d56f0:	f7ff ffd4 	bl	d569c <_ZNSt14_Function_baseD1Ev>
   d56f4:	2110      	movs	r1, #16
   d56f6:	4628      	mov	r0, r5
   d56f8:	f001 f8cd 	bl	d6896 <_ZdlPvj>
   d56fc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d56fe:	b135      	cbz	r5, d570e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5700:	4628      	mov	r0, r5
   d5702:	f7ff ffcb 	bl	d569c <_ZNSt14_Function_baseD1Ev>
   d5706:	2110      	movs	r1, #16
   d5708:	4628      	mov	r0, r5
   d570a:	f001 f8c4 	bl	d6896 <_ZdlPvj>
   d570e:	4620      	mov	r0, r4
   d5710:	2114      	movs	r1, #20
   d5712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5716:	f001 b8be 	b.w	d6896 <_ZdlPvj>
   d571a:	bd38      	pop	{r3, r4, r5, pc}

000d571c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d571c:	b510      	push	{r4, lr}
   d571e:	b088      	sub	sp, #32
   d5720:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5722:	4668      	mov	r0, sp
   d5724:	f000 fd2f 	bl	d6186 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d5728:	4669      	mov	r1, sp
   d572a:	a804      	add	r0, sp, #16
   d572c:	f000 fd4e 	bl	d61cc <_ZN6StringC1ERKS_>
   d5730:	a804      	add	r0, sp, #16
   d5732:	47a0      	blx	r4
   d5734:	4604      	mov	r4, r0
   d5736:	a804      	add	r0, sp, #16
   d5738:	f000 fcda 	bl	d60f0 <_ZN6StringD1Ev>
    String p(param);
   d573c:	4668      	mov	r0, sp
   d573e:	f000 fcd7 	bl	d60f0 <_ZN6StringD1Ev>
}
   d5742:	4620      	mov	r0, r4
   d5744:	b008      	add	sp, #32
   d5746:	bd10      	pop	{r4, pc}

000d5748 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d574a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d574c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d5750:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d5752:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5754:	461a      	mov	r2, r3
   d5756:	4669      	mov	r1, sp
   d5758:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d575a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d575e:	f8ad 4000 	strh.w	r4, [sp]
   d5762:	f7ff fe27 	bl	d53b4 <spark_function>
}
   d5766:	b004      	add	sp, #16
   d5768:	bd10      	pop	{r4, pc}

000d576a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d576a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d576c:	460e      	mov	r6, r1
   d576e:	4604      	mov	r4, r0
   d5770:	f856 3b04 	ldr.w	r3, [r6], #4
   d5774:	9300      	str	r3, [sp, #0]
   d5776:	460d      	mov	r5, r1
   d5778:	a801      	add	r0, sp, #4
   d577a:	4631      	mov	r1, r6
   d577c:	f7ff ff19 	bl	d55b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5780:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5782:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5784:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5786:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5788:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d578a:	2300      	movs	r3, #0
   d578c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d578e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5790:	f7fe fda0 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5794:	4630      	mov	r0, r6
   d5796:	f7fe fd9d 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d579a:	4628      	mov	r0, r5
   d579c:	2108      	movs	r1, #8
   d579e:	f001 f87a 	bl	d6896 <_ZdlPvj>
        return p;
    }
   d57a2:	4620      	mov	r0, r4
   d57a4:	b002      	add	sp, #8
   d57a6:	bd70      	pop	{r4, r5, r6, pc}

000d57a8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d57a8:	b513      	push	{r0, r1, r4, lr}
   d57aa:	460b      	mov	r3, r1
   d57ac:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ae:	e9d0 0100 	ldrd	r0, r1, [r0]
   d57b2:	466c      	mov	r4, sp
   d57b4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d57b8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d57bc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d57c0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d57c4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d57c8:	b002      	add	sp, #8
   d57ca:	bd10      	pop	{r4, pc}

000d57cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d57cc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d57ce:	b510      	push	{r4, lr}
      if (_M_empty())
   d57d0:	b90a      	cbnz	r2, d57d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d57d2:	f001 f864 	bl	d689e <_ZSt25__throw_bad_function_callv>
    }
   d57d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57da:	68c3      	ldr	r3, [r0, #12]
   d57dc:	4718      	bx	r3

000d57de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d57de:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d57e0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d57e2:	f100 0110 	add.w	r1, r0, #16
   d57e6:	f7ff fff1 	bl	d57cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d57ea:	bd08      	pop	{r3, pc}

000d57ec <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d57ec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d57ee:	b510      	push	{r4, lr}
      if (_M_empty())
   d57f0:	b90a      	cbnz	r2, d57f6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d57f2:	f001 f854 	bl	d689e <_ZSt25__throw_bad_function_callv>
    }
   d57f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57fa:	68c3      	ldr	r3, [r0, #12]
   d57fc:	4718      	bx	r3

000d57fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d57fe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5800:	6800      	ldr	r0, [r0, #0]
   d5802:	f100 0110 	add.w	r1, r0, #16
   d5806:	f7ff fff1 	bl	d57ec <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d580a:	bd08      	pop	{r3, pc}

000d580c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d580c:	b538      	push	{r3, r4, r5, lr}
   d580e:	2300      	movs	r3, #0
   d5810:	4604      	mov	r4, r0
   d5812:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5814:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5816:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5818:	f7fe fc3d 	bl	d4096 <_Znwj>
   d581c:	b128      	cbz	r0, d582a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d581e:	2301      	movs	r3, #1
   d5820:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5824:	4b02      	ldr	r3, [pc, #8]	; (d5830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5826:	6003      	str	r3, [r0, #0]
   d5828:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d582a:	6020      	str	r0, [r4, #0]
	}
   d582c:	4620      	mov	r0, r4
   d582e:	bd38      	pop	{r3, r4, r5, pc}
   d5830:	000da210 	.word	0x000da210

000d5834 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5834:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5836:	2300      	movs	r3, #0
   d5838:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d583a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d583c:	4604      	mov	r4, r0
   d583e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5840:	b12b      	cbz	r3, d584e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5842:	2202      	movs	r2, #2
   d5844:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5846:	68eb      	ldr	r3, [r5, #12]
   d5848:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d584a:	68ab      	ldr	r3, [r5, #8]
   d584c:	60a3      	str	r3, [r4, #8]
    }
   d584e:	4620      	mov	r0, r4
   d5850:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5854:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5856:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5858:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d585a:	4668      	mov	r0, sp
   d585c:	f7ff ff27 	bl	d56ae <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5860:	f04f 0302 	mov.w	r3, #2
   d5864:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5868:	2a00      	cmp	r2, #0
   d586a:	d103      	bne.n	d5874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d586c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5870:	2900      	cmp	r1, #0
   d5872:	d1f7      	bne.n	d5864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5874:	d125      	bne.n	d58c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5876:	f104 050c 	add.w	r5, r4, #12
   d587a:	4669      	mov	r1, sp
   d587c:	4628      	mov	r0, r5
   d587e:	f7ff ff16 	bl	d56ae <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5882:	f3bf 8f5b 	dmb	ish
   d5886:	2301      	movs	r3, #1
   d5888:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d588a:	2000      	movs	r0, #0
   d588c:	f104 0308 	add.w	r3, r4, #8
   d5890:	f3bf 8f5b 	dmb	ish
   d5894:	e853 6f00 	ldrex	r6, [r3]
   d5898:	e843 0200 	strex	r2, r0, [r3]
   d589c:	2a00      	cmp	r2, #0
   d589e:	d1f9      	bne.n	d5894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d58a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d58a4:	b16e      	cbz	r6, d58c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d58a6:	f7ff fd47 	bl	d5338 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d58aa:	b178      	cbz	r0, d58cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d58ac:	4629      	mov	r1, r5
   d58ae:	4630      	mov	r0, r6
   d58b0:	f7ff ff8c 	bl	d57cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d58b4:	4630      	mov	r0, r6
   d58b6:	f7ff fef1 	bl	d569c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d58ba:	2110      	movs	r1, #16
   d58bc:	4630      	mov	r0, r6
   d58be:	f000 ffea 	bl	d6896 <_ZdlPvj>
        p_->setError(std::move(error));
   d58c2:	4668      	mov	r0, sp
   d58c4:	f7ff ff00 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
    }
   d58c8:	b009      	add	sp, #36	; 0x24
   d58ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d58cc:	4631      	mov	r1, r6
   d58ce:	a802      	add	r0, sp, #8
   d58d0:	f7ff ffb0 	bl	d5834 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d58d4:	68e0      	ldr	r0, [r4, #12]
   d58d6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d58da:	b108      	cbz	r0, d58e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d58dc:	f001 ffdc 	bl	d7898 <strdup>
        type_(type) {
   d58e0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d58e2:	2010      	movs	r0, #16
   d58e4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d58e8:	f7fe fbd5 	bl	d4096 <_Znwj>
   d58ec:	4605      	mov	r5, r0
   d58ee:	b1e8      	cbz	r0, d592c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d58f0:	2700      	movs	r7, #0
   d58f2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58f4:	2018      	movs	r0, #24
   d58f6:	f7fe fbce 	bl	d4096 <_Znwj>
   d58fa:	4604      	mov	r4, r0
   d58fc:	b188      	cbz	r0, d5922 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d58fe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5900:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5902:	a802      	add	r0, sp, #8
   d5904:	f7ff ff50 	bl	d57a8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5908:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d590a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d590c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d590e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5910:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5912:	a906      	add	r1, sp, #24
   d5914:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5916:	60e3      	str	r3, [r4, #12]
   d5918:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d591c:	9205      	str	r2, [sp, #20]
   d591e:	f7ff fec6 	bl	d56ae <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5922:	4b08      	ldr	r3, [pc, #32]	; (d5944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5924:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5926:	4b08      	ldr	r3, [pc, #32]	; (d5948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5928:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d592a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d592c:	a806      	add	r0, sp, #24
   d592e:	f7ff fecb 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5932:	a802      	add	r0, sp, #8
   d5934:	f7ff feb2 	bl	d569c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5938:	2200      	movs	r2, #0
   d593a:	4629      	mov	r1, r5
   d593c:	4803      	ldr	r0, [pc, #12]	; (d594c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d593e:	f7ff fd03 	bl	d5348 <application_thread_invoke>
   d5942:	e7b7      	b.n	d58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5944:	000d57df 	.word	0x000d57df
   d5948:	000d5a75 	.word	0x000d5a75
   d594c:	000d557b 	.word	0x000d557b

000d5950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5954:	b08a      	sub	sp, #40	; 0x28
   d5956:	4605      	mov	r5, r0
   d5958:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d595c:	460c      	mov	r4, r1
   d595e:	4617      	mov	r7, r2
   d5960:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5962:	f7ff fd3f 	bl	d53e4 <spark_cloud_flag_connected>
   d5966:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5968:	4682      	mov	sl, r0
   d596a:	bb38      	cbnz	r0, d59bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d596c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5970:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5972:	a905      	add	r1, sp, #20
   d5974:	4630      	mov	r0, r6
   d5976:	f8ad 3018 	strh.w	r3, [sp, #24]
   d597a:	f7ff fe98 	bl	d56ae <_ZN8particle5ErrorC1EOS0_>
   d597e:	2014      	movs	r0, #20
   d5980:	f7fe fb89 	bl	d4096 <_Znwj>
   d5984:	4604      	mov	r4, r0
   d5986:	b148      	cbz	r0, d599c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5988:	2302      	movs	r3, #2
   d598a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d598c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d598e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5992:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5994:	4631      	mov	r1, r6
   d5996:	300c      	adds	r0, #12
   d5998:	f7ff fe89 	bl	d56ae <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d599c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d599e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d59a0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d59a4:	f7ff ff32 	bl	d580c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d59a8:	4630      	mov	r0, r6
   d59aa:	f7ff fe8d 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d59ae:	a805      	add	r0, sp, #20
   d59b0:	f7ff fe8a 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d59b4:	4628      	mov	r0, r5
   d59b6:	b00a      	add	sp, #40	; 0x28
   d59b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d59bc:	230c      	movs	r3, #12
   d59be:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d59c2:	2014      	movs	r0, #20
   d59c4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d59c8:	9307      	str	r3, [sp, #28]
   d59ca:	f7fe fb64 	bl	d4096 <_Znwj>
   d59ce:	4601      	mov	r1, r0
   d59d0:	b128      	cbz	r0, d59de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d59d2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d59d6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d59da:	f880 a001 	strb.w	sl, [r0, #1]
   d59de:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d59e0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d59e2:	f7ff ff13 	bl	d580c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d59e6:	4b22      	ldr	r3, [pc, #136]	; (d5a70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d59e8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d59ea:	2008      	movs	r0, #8
   d59ec:	f7fe fb53 	bl	d4096 <_Znwj>
   d59f0:	4682      	mov	sl, r0
   d59f2:	b128      	cbz	r0, d5a00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59f4:	9b03      	ldr	r3, [sp, #12]
   d59f6:	f840 3b04 	str.w	r3, [r0], #4
   d59fa:	a904      	add	r1, sp, #16
   d59fc:	f7ff fdd9 	bl	d55b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5a00:	9600      	str	r6, [sp, #0]
   d5a02:	fa5f f389 	uxtb.w	r3, r9
   d5a06:	4642      	mov	r2, r8
   d5a08:	4639      	mov	r1, r7
   d5a0a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5a0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5a10:	f7ff fcf8 	bl	d5404 <spark_send_event>
   d5a14:	b9b8      	cbnz	r0, d5a46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5a16:	9b03      	ldr	r3, [sp, #12]
   d5a18:	785b      	ldrb	r3, [r3, #1]
   d5a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5a1e:	b993      	cbnz	r3, d5a46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5a20:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5a24:	a905      	add	r1, sp, #20
   d5a26:	a803      	add	r0, sp, #12
   d5a28:	9205      	str	r2, [sp, #20]
   d5a2a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a2e:	f7ff ff11 	bl	d5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5a32:	a805      	add	r0, sp, #20
   d5a34:	f7ff fe48 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5a38:	a805      	add	r0, sp, #20
   d5a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5a3c:	f7ff fe95 	bl	d576a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5a40:	a806      	add	r0, sp, #24
   d5a42:	f7fe fc47 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5a46:	9b03      	ldr	r3, [sp, #12]
   d5a48:	9305      	str	r3, [sp, #20]
   d5a4a:	a904      	add	r1, sp, #16
   d5a4c:	a806      	add	r0, sp, #24
   d5a4e:	f7ff fdb0 	bl	d55b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5a52:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a54:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5a56:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5a58:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5a5a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5a5c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5a5e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5a60:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5a62:	f7fe fc37 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a66:	a804      	add	r0, sp, #16
   d5a68:	f7fe fc34 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5a6c:	e7a2      	b.n	d59b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5a6e:	bf00      	nop
   d5a70:	000d5b39 	.word	0x000d5b39

000d5a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5a74:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a78:	4605      	mov	r5, r0
	  switch (__op)
   d5a7a:	d007      	beq.n	d5a8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5a7c:	2a03      	cmp	r2, #3
   d5a7e:	d018      	beq.n	d5ab2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5a80:	2a01      	cmp	r2, #1
   d5a82:	d101      	bne.n	d5a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5a84:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5a86:	6003      	str	r3, [r0, #0]
	}
   d5a88:	2000      	movs	r0, #0
   d5a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5a8c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5a8e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5a90:	f7fe fb01 	bl	d4096 <_Znwj>
   d5a94:	4604      	mov	r4, r0
   d5a96:	b150      	cbz	r0, d5aae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5a98:	4631      	mov	r1, r6
   d5a9a:	f7ff fecb 	bl	d5834 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5a9e:	6930      	ldr	r0, [r6, #16]
   d5aa0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5aa4:	b108      	cbz	r0, d5aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5aa6:	f001 fef7 	bl	d7898 <strdup>
        type_(type) {
   d5aaa:	6120      	str	r0, [r4, #16]
   d5aac:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5aae:	602c      	str	r4, [r5, #0]
	}
   d5ab0:	e7ea      	b.n	d5a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5ab2:	6804      	ldr	r4, [r0, #0]
   d5ab4:	2c00      	cmp	r4, #0
   d5ab6:	d0e7      	beq.n	d5a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5ab8:	f104 0010 	add.w	r0, r4, #16
   d5abc:	f7ff fe04 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	f7ff fdeb 	bl	d569c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5ac6:	2118      	movs	r1, #24
   d5ac8:	4620      	mov	r0, r4
   d5aca:	f000 fee4 	bl	d6896 <_ZdlPvj>
   d5ace:	e7db      	b.n	d5a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5ad0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5ad0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5ad2:	2300      	movs	r3, #0
   d5ad4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5ad6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5ad8:	4604      	mov	r4, r0
   d5ada:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5adc:	b12b      	cbz	r3, d5aea <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ade:	2202      	movs	r2, #2
   d5ae0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ae2:	68eb      	ldr	r3, [r5, #12]
   d5ae4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ae6:	68ab      	ldr	r3, [r5, #8]
   d5ae8:	60a3      	str	r3, [r4, #8]
    }
   d5aea:	4620      	mov	r0, r4
   d5aec:	bd38      	pop	{r3, r4, r5, pc}

000d5aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5aee:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5af0:	b570      	push	{r4, r5, r6, lr}
   d5af2:	4604      	mov	r4, r0
	  switch (__op)
   d5af4:	d007      	beq.n	d5b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5af6:	2a03      	cmp	r2, #3
   d5af8:	d012      	beq.n	d5b20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5afa:	2a01      	cmp	r2, #1
   d5afc:	d101      	bne.n	d5b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5afe:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5b00:	6003      	str	r3, [r0, #0]
	}
   d5b02:	2000      	movs	r0, #0
   d5b04:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b06:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5b08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b0a:	f7fe fac4 	bl	d4096 <_Znwj>
   d5b0e:	4605      	mov	r5, r0
   d5b10:	b120      	cbz	r0, d5b1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5b12:	4631      	mov	r1, r6
   d5b14:	f7ff ffdc 	bl	d5ad0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5b18:	7c33      	ldrb	r3, [r6, #16]
   d5b1a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5b1c:	6025      	str	r5, [r4, #0]
	}
   d5b1e:	e7f0      	b.n	d5b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5b20:	6804      	ldr	r4, [r0, #0]
   d5b22:	2c00      	cmp	r4, #0
   d5b24:	d0ed      	beq.n	d5b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5b26:	4620      	mov	r0, r4
   d5b28:	f7ff fdb8 	bl	d569c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5b2c:	2114      	movs	r1, #20
   d5b2e:	4620      	mov	r0, r4
   d5b30:	f000 feb1 	bl	d6896 <_ZdlPvj>
   d5b34:	e7e5      	b.n	d5b02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5b38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5b38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b3a:	b089      	sub	sp, #36	; 0x24
   d5b3c:	4604      	mov	r4, r0
   d5b3e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5b40:	a801      	add	r0, sp, #4
   d5b42:	4611      	mov	r1, r2
   d5b44:	f7ff fe11 	bl	d576a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5b48:	b1a4      	cbz	r4, d5b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5b4a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5b4c:	b11d      	cbz	r5, d5b56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5b4e:	4628      	mov	r0, r5
   d5b50:	f001 fea2 	bl	d7898 <strdup>
   d5b54:	4605      	mov	r5, r0
   d5b56:	a801      	add	r0, sp, #4
   d5b58:	a903      	add	r1, sp, #12
        type_(type) {
   d5b5a:	9503      	str	r5, [sp, #12]
   d5b5c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5b60:	f7ff fe78 	bl	d5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b64:	a803      	add	r0, sp, #12
   d5b66:	f7ff fdaf 	bl	d56c8 <_ZN8particle5ErrorD1Ev>
   d5b6a:	a802      	add	r0, sp, #8
   d5b6c:	f7fe fbb2 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5b70:	b009      	add	sp, #36	; 0x24
   d5b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5b74:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5b76:	2301      	movs	r3, #1
   d5b78:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5b7c:	2a00      	cmp	r2, #0
   d5b7e:	d103      	bne.n	d5b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5b80:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5b84:	2900      	cmp	r1, #0
   d5b86:	d1f7      	bne.n	d5b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5b88:	d1ef      	bne.n	d5b6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5b8a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5b8c:	f3bf 8f5b 	dmb	ish
   d5b90:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5b92:	1d2b      	adds	r3, r5, #4
   d5b94:	f3bf 8f5b 	dmb	ish
   d5b98:	e853 6f00 	ldrex	r6, [r3]
   d5b9c:	e843 4200 	strex	r2, r4, [r3]
   d5ba0:	2a00      	cmp	r2, #0
   d5ba2:	d1f9      	bne.n	d5b98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5ba4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5ba8:	2e00      	cmp	r6, #0
   d5baa:	d0de      	beq.n	d5b6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5bac:	4620      	mov	r0, r4
   d5bae:	f7ff fbc3 	bl	d5338 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5bb2:	4607      	mov	r7, r0
   d5bb4:	b160      	cbz	r0, d5bd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5bb6:	f105 010c 	add.w	r1, r5, #12
   d5bba:	4630      	mov	r0, r6
   d5bbc:	f7ff fe16 	bl	d57ec <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5bc0:	4630      	mov	r0, r6
   d5bc2:	f7ff fd6b 	bl	d569c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5bc6:	2110      	movs	r1, #16
   d5bc8:	4630      	mov	r0, r6
   d5bca:	f000 fe64 	bl	d6896 <_ZdlPvj>
   d5bce:	e7cc      	b.n	d5b6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5bd0:	4631      	mov	r1, r6
   d5bd2:	a803      	add	r0, sp, #12
   d5bd4:	f7ff ff7c 	bl	d5ad0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5bd8:	7b2b      	ldrb	r3, [r5, #12]
   d5bda:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5bde:	2010      	movs	r0, #16
   d5be0:	f7fe fa59 	bl	d4096 <_Znwj>
   d5be4:	4605      	mov	r5, r0
   d5be6:	b1d0      	cbz	r0, d5c1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5be8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5bea:	2014      	movs	r0, #20
   d5bec:	f7fe fa53 	bl	d4096 <_Znwj>
   d5bf0:	4604      	mov	r4, r0
   d5bf2:	b178      	cbz	r0, d5c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5bf4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5bf6:	4601      	mov	r1, r0
   d5bf8:	a803      	add	r0, sp, #12
   d5bfa:	f7ff fdd5 	bl	d57a8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bfe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5c00:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c02:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c04:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5c06:	9205      	str	r2, [sp, #20]
   d5c08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c0a:	60e3      	str	r3, [r4, #12]
   d5c0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5c10:	9206      	str	r2, [sp, #24]
   d5c12:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5c14:	4b06      	ldr	r3, [pc, #24]	; (d5c30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5c16:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5c18:	4b06      	ldr	r3, [pc, #24]	; (d5c34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c1a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5c1c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5c1e:	a803      	add	r0, sp, #12
   d5c20:	f7ff fd3c 	bl	d569c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5c24:	2200      	movs	r2, #0
   d5c26:	4629      	mov	r1, r5
   d5c28:	4803      	ldr	r0, [pc, #12]	; (d5c38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5c2a:	f7ff fb8d 	bl	d5348 <application_thread_invoke>
   d5c2e:	e7c7      	b.n	d5bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5c30:	000d57ff 	.word	0x000d57ff
   d5c34:	000d5aef 	.word	0x000d5aef
   d5c38:	000d557b 	.word	0x000d557b

000d5c3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	6840      	ldr	r0, [r0, #4]
   d5c40:	4611      	mov	r1, r2
   d5c42:	f7ff bc3f 	b.w	d54c4 <network_listening>

000d5c46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5c46:	2200      	movs	r2, #0
   d5c48:	6840      	ldr	r0, [r0, #4]
   d5c4a:	4611      	mov	r1, r2
   d5c4c:	f7ff bc4a 	b.w	d54e4 <network_get_listen_timeout>

000d5c50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5c50:	6840      	ldr	r0, [r0, #4]
   d5c52:	2200      	movs	r2, #0
   d5c54:	f7ff bc3e 	b.w	d54d4 <network_set_listen_timeout>

000d5c58 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c58:	6840      	ldr	r0, [r0, #4]
   d5c5a:	2200      	movs	r2, #0
   d5c5c:	f081 0101 	eor.w	r1, r1, #1
   d5c60:	f7ff bc28 	b.w	d54b4 <network_listen>

000d5c64 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5c64:	2300      	movs	r3, #0
   d5c66:	6840      	ldr	r0, [r0, #4]
   d5c68:	461a      	mov	r2, r3
   d5c6a:	4619      	mov	r1, r3
   d5c6c:	f7ff bc1a 	b.w	d54a4 <network_off>

000d5c70 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5c70:	2300      	movs	r3, #0
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	461a      	mov	r2, r3
   d5c76:	4619      	mov	r1, r3
   d5c78:	f7ff bc0c 	b.w	d5494 <network_on>

000d5c7c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	6840      	ldr	r0, [r0, #4]
   d5c80:	4611      	mov	r1, r2
   d5c82:	f7ff bbff 	b.w	d5484 <network_ready>

000d5c86 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5c86:	2200      	movs	r2, #0
   d5c88:	6840      	ldr	r0, [r0, #4]
   d5c8a:	4611      	mov	r1, r2
   d5c8c:	f7ff bbea 	b.w	d5464 <network_connecting>

000d5c90 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	2200      	movs	r2, #0
   d5c94:	2102      	movs	r1, #2
   d5c96:	f7ff bbed 	b.w	d5474 <network_disconnect>

000d5c9a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5c9a:	2300      	movs	r3, #0
   d5c9c:	6840      	ldr	r0, [r0, #4]
   d5c9e:	461a      	mov	r2, r3
   d5ca0:	f7ff bbd8 	b.w	d5454 <network_connect>

000d5ca4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5ca4:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ca6:	2203      	movs	r2, #3
   d5ca8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5caa:	4a02      	ldr	r2, [pc, #8]	; (d5cb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5cac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5cae:	4770      	bx	lr
   d5cb0:	2003e5e8 	.word	0x2003e5e8
   d5cb4:	000da22c 	.word	0x000da22c

000d5cb8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5cb8:	4770      	bx	lr

000d5cba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cbc:	4606      	mov	r6, r0
   d5cbe:	4615      	mov	r5, r2
   d5cc0:	460c      	mov	r4, r1
   d5cc2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5cc4:	42bc      	cmp	r4, r7
   d5cc6:	d006      	beq.n	d5cd6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5cc8:	6833      	ldr	r3, [r6, #0]
   d5cca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5cce:	689b      	ldr	r3, [r3, #8]
   d5cd0:	4630      	mov	r0, r6
   d5cd2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5cd4:	e7f6      	b.n	d5cc4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cda <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5cda:	7c00      	ldrb	r0, [r0, #16]
   d5cdc:	2200      	movs	r2, #0
   d5cde:	f7ff ba19 	b.w	d5114 <hal_i2c_write>

000d5ce2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5ce2:	7c00      	ldrb	r0, [r0, #16]
   d5ce4:	2100      	movs	r1, #0
   d5ce6:	f7ff ba1d 	b.w	d5124 <hal_i2c_available>

000d5cea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5cea:	7c00      	ldrb	r0, [r0, #16]
   d5cec:	2100      	movs	r1, #0
   d5cee:	f7ff ba21 	b.w	d5134 <hal_i2c_read>

000d5cf2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5cf2:	7c00      	ldrb	r0, [r0, #16]
   d5cf4:	2100      	movs	r1, #0
   d5cf6:	f7ff ba25 	b.w	d5144 <hal_i2c_peek>

000d5cfa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5cfa:	7c00      	ldrb	r0, [r0, #16]
   d5cfc:	2100      	movs	r1, #0
   d5cfe:	f7ff ba29 	b.w	d5154 <hal_i2c_flush>

000d5d02 <_ZN7TwoWireD0Ev>:
   d5d02:	b510      	push	{r4, lr}
   d5d04:	2114      	movs	r1, #20
   d5d06:	4604      	mov	r4, r0
   d5d08:	f000 fdc5 	bl	d6896 <_ZdlPvj>
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	bd10      	pop	{r4, pc}

000d5d10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5d10:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d16:	4604      	mov	r4, r0
   d5d18:	4608      	mov	r0, r1
   d5d1a:	2100      	movs	r1, #0
   d5d1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5d20:	4b03      	ldr	r3, [pc, #12]	; (d5d30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5d22:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5d24:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5d26:	4611      	mov	r1, r2
   d5d28:	f7ff fa24 	bl	d5174 <hal_i2c_init>
}
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	bd10      	pop	{r4, pc}
   d5d30:	000da260 	.word	0x000da260

000d5d34 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5d34:	2300      	movs	r3, #0
   d5d36:	7c00      	ldrb	r0, [r0, #16]
   d5d38:	461a      	mov	r2, r3
   d5d3a:	4619      	mov	r1, r3
   d5d3c:	f7ff b9d2 	b.w	d50e4 <hal_i2c_begin>

000d5d40 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5d40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5d42:	2200      	movs	r2, #0
   d5d44:	2314      	movs	r3, #20
   d5d46:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5d4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5d4e:	780b      	ldrb	r3, [r1, #0]
   d5d50:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d54:	684b      	ldr	r3, [r1, #4]
   d5d56:	9303      	str	r3, [sp, #12]
   d5d58:	68cb      	ldr	r3, [r1, #12]
   d5d5a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5d5c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5d5e:	7a0b      	ldrb	r3, [r1, #8]
   d5d60:	9305      	str	r3, [sp, #20]
   d5d62:	a901      	add	r1, sp, #4
   d5d64:	f7ff fa0e 	bl	d5184 <hal_i2c_request_ex>
}
   d5d68:	b007      	add	sp, #28
   d5d6a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d6e <_ZN7TwoWire11requestFromEhjh>:
{
   d5d6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5d70:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5d72:	f88d 1000 	strb.w	r1, [sp]
   d5d76:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5d7a:	9103      	str	r1, [sp, #12]
   d5d7c:	bf18      	it	ne
   d5d7e:	2301      	movne	r3, #1
   d5d80:	4669      	mov	r1, sp
    size_ = size;
   d5d82:	9201      	str	r2, [sp, #4]
   d5d84:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d88:	f7ff ffda 	bl	d5d40 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5d8c:	b005      	add	sp, #20
   d5d8e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d92 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5d92:	2301      	movs	r3, #1
   d5d94:	f7ff bfeb 	b.w	d5d6e <_ZN7TwoWire11requestFromEhjh>

000d5d98 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5d98:	7c00      	ldrb	r0, [r0, #16]
   d5d9a:	2200      	movs	r2, #0
   d5d9c:	f7ff b9aa 	b.w	d50f4 <hal_i2c_begin_transmission>

000d5da0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5da0:	7c00      	ldrb	r0, [r0, #16]
   d5da2:	2200      	movs	r2, #0
   d5da4:	f7ff b9ae 	b.w	d5104 <hal_i2c_end_transmission>

000d5da8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5da8:	2101      	movs	r1, #1
   d5daa:	f7ff bff9 	b.w	d5da0 <_ZN7TwoWire15endTransmissionEh>

000d5dae <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5dae:	4770      	bx	lr

000d5db0 <_ZN9IPAddressD0Ev>:
   d5db0:	b510      	push	{r4, lr}
   d5db2:	2118      	movs	r1, #24
   d5db4:	4604      	mov	r4, r0
   d5db6:	f000 fd6e 	bl	d6896 <_ZdlPvj>
   d5dba:	4620      	mov	r0, r4
   d5dbc:	bd10      	pop	{r4, pc}

000d5dbe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dc0:	7d03      	ldrb	r3, [r0, #20]
   d5dc2:	2b06      	cmp	r3, #6
{
   d5dc4:	b08d      	sub	sp, #52	; 0x34
   d5dc6:	460e      	mov	r6, r1
   d5dc8:	f100 0704 	add.w	r7, r0, #4
   d5dcc:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5dd0:	d012      	beq.n	d5df8 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5dd2:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5dd6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5dda:	220a      	movs	r2, #10
   d5ddc:	4630      	mov	r0, r6
   d5dde:	f000 f94a 	bl	d6076 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5de2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5de4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5de6:	d019      	beq.n	d5e1c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5de8:	2c00      	cmp	r4, #0
   d5dea:	d0f4      	beq.n	d5dd6 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5dec:	212e      	movs	r1, #46	; 0x2e
   d5dee:	4630      	mov	r0, r6
   d5df0:	f000 f928 	bl	d6044 <_ZN5Print5printEc>
   d5df4:	4404      	add	r4, r0
   d5df6:	e7ee      	b.n	d5dd6 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5df8:	232f      	movs	r3, #47	; 0x2f
   d5dfa:	466a      	mov	r2, sp
   d5dfc:	4639      	mov	r1, r7
   d5dfe:	200a      	movs	r0, #10
		buf[0] = 0;
   d5e00:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e04:	f7ff f9c6 	bl	d5194 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5e08:	4668      	mov	r0, sp
   d5e0a:	f001 fd62 	bl	d78d2 <strlen>
   d5e0e:	6833      	ldr	r3, [r6, #0]
   d5e10:	4602      	mov	r2, r0
   d5e12:	68db      	ldr	r3, [r3, #12]
   d5e14:	4669      	mov	r1, sp
   d5e16:	4630      	mov	r0, r6
   d5e18:	4798      	blx	r3
   d5e1a:	4604      	mov	r4, r0
    }
    return n;
}
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	b00d      	add	sp, #52	; 0x34
   d5e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5e24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5e24:	b510      	push	{r4, lr}
   d5e26:	4b05      	ldr	r3, [pc, #20]	; (d5e3c <_ZN9IPAddressC1Ev+0x18>)
   d5e28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e2a:	2211      	movs	r2, #17
   d5e2c:	f840 3b04 	str.w	r3, [r0], #4
   d5e30:	2100      	movs	r1, #0
   d5e32:	f001 fcf3 	bl	d781c <memset>
}
   d5e36:	4620      	mov	r0, r4
   d5e38:	bd10      	pop	{r4, pc}
   d5e3a:	bf00      	nop
   d5e3c:	000da288 	.word	0x000da288

000d5e40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e40:	4603      	mov	r3, r0
   d5e42:	4a07      	ldr	r2, [pc, #28]	; (d5e60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e44:	b510      	push	{r4, lr}
   d5e46:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5e4a:	f101 0210 	add.w	r2, r1, #16
   d5e4e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e52:	f843 4b04 	str.w	r4, [r3], #4
   d5e56:	4291      	cmp	r1, r2
   d5e58:	d1f9      	bne.n	d5e4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e5a:	780a      	ldrb	r2, [r1, #0]
   d5e5c:	701a      	strb	r2, [r3, #0]
}
   d5e5e:	bd10      	pop	{r4, pc}
   d5e60:	000da288 	.word	0x000da288

000d5e64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5e64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5e76:	2304      	movs	r3, #4
   d5e78:	6041      	str	r1, [r0, #4]
   d5e7a:	7503      	strb	r3, [r0, #20]
}
   d5e7c:	bd10      	pop	{r4, pc}

000d5e7e <_ZN9IPAddressaSEPKh>:
{
   d5e7e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e80:	78cb      	ldrb	r3, [r1, #3]
   d5e82:	9300      	str	r3, [sp, #0]
   d5e84:	788b      	ldrb	r3, [r1, #2]
   d5e86:	784a      	ldrb	r2, [r1, #1]
   d5e88:	7809      	ldrb	r1, [r1, #0]
   d5e8a:	f7ff ffeb 	bl	d5e64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e8e:	b002      	add	sp, #8
   d5e90:	bd10      	pop	{r4, pc}
	...

000d5e94 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e94:	4b01      	ldr	r3, [pc, #4]	; (d5e9c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e96:	4a02      	ldr	r2, [pc, #8]	; (d5ea0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e98:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5e9a:	4770      	bx	lr
   d5e9c:	2003e5f0 	.word	0x2003e5f0
   d5ea0:	000da294 	.word	0x000da294

000d5ea4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ea4:	2300      	movs	r3, #0
   d5ea6:	6840      	ldr	r0, [r0, #4]
   d5ea8:	461a      	mov	r2, r3
   d5eaa:	f7ff bad3 	b.w	d5454 <network_connect>

000d5eae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	2200      	movs	r2, #0
   d5eb2:	2102      	movs	r1, #2
   d5eb4:	f7ff bade 	b.w	d5474 <network_disconnect>

000d5eb8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5eb8:	2200      	movs	r2, #0
   d5eba:	6840      	ldr	r0, [r0, #4]
   d5ebc:	4611      	mov	r1, r2
   d5ebe:	f7ff bad1 	b.w	d5464 <network_connecting>

000d5ec2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5ec2:	2200      	movs	r2, #0
   d5ec4:	6840      	ldr	r0, [r0, #4]
   d5ec6:	4611      	mov	r1, r2
   d5ec8:	f7ff badc 	b.w	d5484 <network_ready>

000d5ecc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ecc:	2300      	movs	r3, #0
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	461a      	mov	r2, r3
   d5ed2:	4619      	mov	r1, r3
   d5ed4:	f7ff bade 	b.w	d5494 <network_on>

000d5ed8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ed8:	2300      	movs	r3, #0
   d5eda:	6840      	ldr	r0, [r0, #4]
   d5edc:	461a      	mov	r2, r3
   d5ede:	4619      	mov	r1, r3
   d5ee0:	f7ff bae0 	b.w	d54a4 <network_off>

000d5ee4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ee4:	6840      	ldr	r0, [r0, #4]
   d5ee6:	2200      	movs	r2, #0
   d5ee8:	f081 0101 	eor.w	r1, r1, #1
   d5eec:	f7ff bae2 	b.w	d54b4 <network_listen>

000d5ef0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ef0:	6840      	ldr	r0, [r0, #4]
   d5ef2:	2200      	movs	r2, #0
   d5ef4:	f7ff baee 	b.w	d54d4 <network_set_listen_timeout>

000d5ef8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ef8:	2200      	movs	r2, #0
   d5efa:	6840      	ldr	r0, [r0, #4]
   d5efc:	4611      	mov	r1, r2
   d5efe:	f7ff baf1 	b.w	d54e4 <network_get_listen_timeout>

000d5f02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f02:	2200      	movs	r2, #0
   d5f04:	6840      	ldr	r0, [r0, #4]
   d5f06:	4611      	mov	r1, r2
   d5f08:	f7ff badc 	b.w	d54c4 <network_listening>

000d5f0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f10:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5f12:	b095      	sub	sp, #84	; 0x54
   d5f14:	4616      	mov	r6, r2
   d5f16:	460d      	mov	r5, r1
   d5f18:	4607      	mov	r7, r0
    IPAddress addr;
   d5f1a:	f7ff ff83 	bl	d5e24 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5f1e:	4621      	mov	r1, r4
   d5f20:	2218      	movs	r2, #24
   d5f22:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5f24:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f26:	f001 fc79 	bl	d781c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f2a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5f2c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5f30:	4621      	mov	r1, r4
   d5f32:	466b      	mov	r3, sp
   d5f34:	aa0c      	add	r2, sp, #48	; 0x30
   d5f36:	4630      	mov	r0, r6
   d5f38:	f7ff f93c 	bl	d51b4 <netdb_getaddrinfo>
    if (!r) {
   d5f3c:	4604      	mov	r4, r0
   d5f3e:	2800      	cmp	r0, #0
   d5f40:	d146      	bne.n	d5fd0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f42:	4602      	mov	r2, r0
   d5f44:	2101      	movs	r1, #1
   d5f46:	6868      	ldr	r0, [r5, #4]
   d5f48:	f7ff fa9c 	bl	d5484 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f4c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f4e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f50:	4622      	mov	r2, r4
   d5f52:	6868      	ldr	r0, [r5, #4]
   d5f54:	f7ff fa96 	bl	d5484 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f58:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f5a:	4681      	mov	r9, r0
        bool ok = false;
   d5f5c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f5e:	2e00      	cmp	r6, #0
   d5f60:	d036      	beq.n	d5fd0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5f62:	2900      	cmp	r1, #0
   d5f64:	d134      	bne.n	d5fd0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f66:	6873      	ldr	r3, [r6, #4]
   d5f68:	2b02      	cmp	r3, #2
   d5f6a:	d003      	beq.n	d5f74 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5f6c:	2b0a      	cmp	r3, #10
   d5f6e:	d00b      	beq.n	d5f88 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f70:	69f6      	ldr	r6, [r6, #28]
   d5f72:	e7f4      	b.n	d5f5e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5f74:	f1b8 0f00 	cmp.w	r8, #0
   d5f78:	d004      	beq.n	d5f84 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5f7a:	6971      	ldr	r1, [r6, #20]
   d5f7c:	4638      	mov	r0, r7
   d5f7e:	3104      	adds	r1, #4
   d5f80:	f7ff ff7d 	bl	d5e7e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5f84:	4641      	mov	r1, r8
   d5f86:	e7f3      	b.n	d5f70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5f88:	f1b9 0f00 	cmp.w	r9, #0
   d5f8c:	d101      	bne.n	d5f92 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5f8e:	4649      	mov	r1, r9
   d5f90:	e7ee      	b.n	d5f70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5f92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5f94:	2210      	movs	r2, #16
   d5f96:	a801      	add	r0, sp, #4
   d5f98:	f001 fc40 	bl	d781c <memset>
                    a.v = 6;
   d5f9c:	2306      	movs	r3, #6
   d5f9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fa2:	ad01      	add	r5, sp, #4
   d5fa4:	f104 0308 	add.w	r3, r4, #8
   d5fa8:	3418      	adds	r4, #24
   d5faa:	6818      	ldr	r0, [r3, #0]
   d5fac:	6859      	ldr	r1, [r3, #4]
   d5fae:	462a      	mov	r2, r5
   d5fb0:	c203      	stmia	r2!, {r0, r1}
   d5fb2:	3308      	adds	r3, #8
   d5fb4:	42a3      	cmp	r3, r4
   d5fb6:	4615      	mov	r5, r2
   d5fb8:	d1f7      	bne.n	d5faa <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5fba:	a901      	add	r1, sp, #4
   d5fbc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5fbe:	ad07      	add	r5, sp, #28
   d5fc0:	f7ff ff3e 	bl	d5e40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fc6:	1d3c      	adds	r4, r7, #4
   d5fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fca:	682b      	ldr	r3, [r5, #0]
   d5fcc:	7023      	strb	r3, [r4, #0]
   d5fce:	e7de      	b.n	d5f8e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5fd0:	9800      	ldr	r0, [sp, #0]
   d5fd2:	f7ff f8e7 	bl	d51a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5fd6:	4638      	mov	r0, r7
   d5fd8:	b015      	add	sp, #84	; 0x54
   d5fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5fe0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5fe0:	4b02      	ldr	r3, [pc, #8]	; (d5fec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5fe2:	4a03      	ldr	r2, [pc, #12]	; (d5ff0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5fe4:	601a      	str	r2, [r3, #0]
   d5fe6:	2200      	movs	r2, #0
   d5fe8:	605a      	str	r2, [r3, #4]

} // spark
   d5fea:	4770      	bx	lr
   d5fec:	2003e5f4 	.word	0x2003e5f4
   d5ff0:	000da2a0 	.word	0x000da2a0

000d5ff4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ff6:	4606      	mov	r6, r0
   d5ff8:	460d      	mov	r5, r1
  size_t n = 0;
   d5ffa:	188f      	adds	r7, r1, r2
   d5ffc:	2400      	movs	r4, #0
  while (size--) {
   d5ffe:	42bd      	cmp	r5, r7
   d6000:	d00c      	beq.n	d601c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6002:	6833      	ldr	r3, [r6, #0]
   d6004:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6008:	689b      	ldr	r3, [r3, #8]
   d600a:	4630      	mov	r0, r6
   d600c:	4798      	blx	r3
     if (chunk>=0)
   d600e:	1e03      	subs	r3, r0, #0
   d6010:	db01      	blt.n	d6016 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6012:	441c      	add	r4, r3
  while (size--) {
   d6014:	e7f3      	b.n	d5ffe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6016:	2c00      	cmp	r4, #0
   d6018:	bf08      	it	eq
   d601a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d601c:	4620      	mov	r0, r4
   d601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6020 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6020:	b513      	push	{r0, r1, r4, lr}
   d6022:	4604      	mov	r4, r0
    }
   d6024:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6026:	b159      	cbz	r1, d6040 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6028:	9101      	str	r1, [sp, #4]
   d602a:	f001 fc52 	bl	d78d2 <strlen>
   d602e:	6823      	ldr	r3, [r4, #0]
   d6030:	9901      	ldr	r1, [sp, #4]
   d6032:	68db      	ldr	r3, [r3, #12]
   d6034:	4602      	mov	r2, r0
   d6036:	4620      	mov	r0, r4
    }
   d6038:	b002      	add	sp, #8
   d603a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d603e:	4718      	bx	r3
    }
   d6040:	b002      	add	sp, #8
   d6042:	bd10      	pop	{r4, pc}

000d6044 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6044:	6803      	ldr	r3, [r0, #0]
   d6046:	689b      	ldr	r3, [r3, #8]
   d6048:	4718      	bx	r3

000d604a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d604a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d604c:	210d      	movs	r1, #13
{
   d604e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6050:	f7ff fff8 	bl	d6044 <_ZN5Print5printEc>
  n += print('\n');
   d6054:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6056:	4604      	mov	r4, r0
  n += print('\n');
   d6058:	4628      	mov	r0, r5
   d605a:	f7ff fff3 	bl	d6044 <_ZN5Print5printEc>
  return n;
}
   d605e:	4420      	add	r0, r4
   d6060:	bd38      	pop	{r3, r4, r5, pc}

000d6062 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6062:	b538      	push	{r3, r4, r5, lr}
   d6064:	4605      	mov	r5, r0
  return write(str);
   d6066:	f7ff ffdb 	bl	d6020 <_ZN5Print5writeEPKc>
   d606a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d606c:	4628      	mov	r0, r5
   d606e:	f7ff ffec 	bl	d604a <_ZN5Print7printlnEv>
  return n;
}
   d6072:	4420      	add	r0, r4
   d6074:	bd38      	pop	{r3, r4, r5, pc}

000d6076 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6076:	b530      	push	{r4, r5, lr}
   d6078:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d607a:	2300      	movs	r3, #0
   d607c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6080:	2a01      	cmp	r2, #1
   d6082:	bf98      	it	ls
   d6084:	220a      	movls	r2, #10
   d6086:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6088:	460d      	mov	r5, r1
   d608a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d608e:	fb01 5312 	mls	r3, r1, r2, r5
   d6092:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6096:	2b09      	cmp	r3, #9
   d6098:	bf94      	ite	ls
   d609a:	3330      	addls	r3, #48	; 0x30
   d609c:	3337      	addhi	r3, #55	; 0x37
   d609e:	b2db      	uxtb	r3, r3
  } while(n);
   d60a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60a2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d60a6:	d9ef      	bls.n	d6088 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d60a8:	4621      	mov	r1, r4
   d60aa:	f7ff ffb9 	bl	d6020 <_ZN5Print5writeEPKc>
}
   d60ae:	b00b      	add	sp, #44	; 0x2c
   d60b0:	bd30      	pop	{r4, r5, pc}

000d60b2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d60b2:	b510      	push	{r4, lr}
   d60b4:	4604      	mov	r4, r0
   d60b6:	f7ff faf1 	bl	d569c <_ZNSt14_Function_baseD1Ev>
   d60ba:	4620      	mov	r0, r4
   d60bc:	bd10      	pop	{r4, pc}
	...

000d60c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d60c0:	4803      	ldr	r0, [pc, #12]	; (d60d0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d60c2:	4a04      	ldr	r2, [pc, #16]	; (d60d4 <_GLOBAL__sub_I_RGB+0x14>)
   d60c4:	4904      	ldr	r1, [pc, #16]	; (d60d8 <_GLOBAL__sub_I_RGB+0x18>)
   d60c6:	2300      	movs	r3, #0
   d60c8:	6083      	str	r3, [r0, #8]
   d60ca:	f000 bbdf 	b.w	d688c <__aeabi_atexit>
   d60ce:	bf00      	nop
   d60d0:	2003e5fc 	.word	0x2003e5fc
   d60d4:	2003e468 	.word	0x2003e468
   d60d8:	000d60b3 	.word	0x000d60b3

000d60dc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d60dc:	b510      	push	{r4, lr}
   d60de:	4604      	mov	r4, r0
   d60e0:	4608      	mov	r0, r1
{
    _spi = spi;
   d60e2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d60e4:	f7ff f86e 	bl	d51c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d60e8:	2300      	movs	r3, #0
   d60ea:	6063      	str	r3, [r4, #4]
}
   d60ec:	4620      	mov	r0, r4
   d60ee:	bd10      	pop	{r4, pc}

000d60f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d60f0:	b510      	push	{r4, lr}
   d60f2:	4604      	mov	r4, r0
{
	free(buffer);
   d60f4:	6800      	ldr	r0, [r0, #0]
   d60f6:	f7ff fa05 	bl	d5504 <free>
}
   d60fa:	4620      	mov	r0, r4
   d60fc:	bd10      	pop	{r4, pc}

000d60fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d60fe:	b510      	push	{r4, lr}
   d6100:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6102:	6800      	ldr	r0, [r0, #0]
   d6104:	b108      	cbz	r0, d610a <_ZN6String10invalidateEv+0xc>
   d6106:	f7ff f9fd 	bl	d5504 <free>
	buffer = NULL;
   d610a:	2300      	movs	r3, #0
	capacity = len = 0;
   d610c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6110:	6023      	str	r3, [r4, #0]
}
   d6112:	bd10      	pop	{r4, pc}

000d6114 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6114:	b538      	push	{r3, r4, r5, lr}
   d6116:	4604      	mov	r4, r0
   d6118:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d611a:	6800      	ldr	r0, [r0, #0]
   d611c:	3101      	adds	r1, #1
   d611e:	f7ff f9f9 	bl	d5514 <realloc>
	if (newbuffer) {
   d6122:	b110      	cbz	r0, d612a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6124:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6128:	2001      	movs	r0, #1
	}
	return 0;
}
   d612a:	bd38      	pop	{r3, r4, r5, pc}

000d612c <_ZN6String7reserveEj>:
{
   d612c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d612e:	6803      	ldr	r3, [r0, #0]
{
   d6130:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6132:	b123      	cbz	r3, d613e <_ZN6String7reserveEj+0x12>
   d6134:	6843      	ldr	r3, [r0, #4]
   d6136:	428b      	cmp	r3, r1
   d6138:	d301      	bcc.n	d613e <_ZN6String7reserveEj+0x12>
   d613a:	2001      	movs	r0, #1
}
   d613c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d613e:	4620      	mov	r0, r4
   d6140:	f7ff ffe8 	bl	d6114 <_ZN6String12changeBufferEj>
   d6144:	2800      	cmp	r0, #0
   d6146:	d0f9      	beq.n	d613c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6148:	68a3      	ldr	r3, [r4, #8]
   d614a:	2b00      	cmp	r3, #0
   d614c:	d1f5      	bne.n	d613a <_ZN6String7reserveEj+0xe>
   d614e:	6822      	ldr	r2, [r4, #0]
   d6150:	7013      	strb	r3, [r2, #0]
   d6152:	e7f2      	b.n	d613a <_ZN6String7reserveEj+0xe>

000d6154 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6154:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6156:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6158:	4611      	mov	r1, r2
   d615a:	9201      	str	r2, [sp, #4]
{
   d615c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d615e:	f7ff ffe5 	bl	d612c <_ZN6String7reserveEj>
   d6162:	9a01      	ldr	r2, [sp, #4]
   d6164:	b928      	cbnz	r0, d6172 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6166:	4620      	mov	r0, r4
   d6168:	f7ff ffc9 	bl	d60fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d616c:	4620      	mov	r0, r4
   d616e:	b003      	add	sp, #12
   d6170:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6172:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6174:	4629      	mov	r1, r5
   d6176:	6820      	ldr	r0, [r4, #0]
   d6178:	f001 fb42 	bl	d7800 <memcpy>
	buffer[len] = 0;
   d617c:	6822      	ldr	r2, [r4, #0]
   d617e:	68a3      	ldr	r3, [r4, #8]
   d6180:	2100      	movs	r1, #0
   d6182:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6184:	e7f2      	b.n	d616c <_ZN6String4copyEPKcj+0x18>

000d6186 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6186:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6188:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d618a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d618e:	4604      	mov	r4, r0
	len = 0;
   d6190:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6192:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6194:	b141      	cbz	r1, d61a8 <_ZN6StringC1EPKc+0x22>
   d6196:	4608      	mov	r0, r1
   d6198:	9101      	str	r1, [sp, #4]
   d619a:	f001 fb9a 	bl	d78d2 <strlen>
   d619e:	9901      	ldr	r1, [sp, #4]
   d61a0:	4602      	mov	r2, r0
   d61a2:	4620      	mov	r0, r4
   d61a4:	f7ff ffd6 	bl	d6154 <_ZN6String4copyEPKcj>
}
   d61a8:	4620      	mov	r0, r4
   d61aa:	b002      	add	sp, #8
   d61ac:	bd10      	pop	{r4, pc}

000d61ae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d61ae:	4288      	cmp	r0, r1
{
   d61b0:	b510      	push	{r4, lr}
   d61b2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d61b4:	d005      	beq.n	d61c2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d61b6:	680b      	ldr	r3, [r1, #0]
   d61b8:	b12b      	cbz	r3, d61c6 <_ZN6StringaSERKS_+0x18>
   d61ba:	688a      	ldr	r2, [r1, #8]
   d61bc:	4619      	mov	r1, r3
   d61be:	f7ff ffc9 	bl	d6154 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d61c2:	4620      	mov	r0, r4
   d61c4:	bd10      	pop	{r4, pc}
	else invalidate();
   d61c6:	f7ff ff9a 	bl	d60fe <_ZN6String10invalidateEv>
   d61ca:	e7fa      	b.n	d61c2 <_ZN6StringaSERKS_+0x14>

000d61cc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d61cc:	b510      	push	{r4, lr}
	buffer = NULL;
   d61ce:	2300      	movs	r3, #0
String::String(const String &value)
   d61d0:	4604      	mov	r4, r0
	capacity = 0;
   d61d2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d61d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61d8:	7303      	strb	r3, [r0, #12]
	*this = value;
   d61da:	f7ff ffe8 	bl	d61ae <_ZN6StringaSERKS_>
}
   d61de:	4620      	mov	r0, r4
   d61e0:	bd10      	pop	{r4, pc}

000d61e2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61e2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61e4:	6882      	ldr	r2, [r0, #8]
   d61e6:	b93a      	cbnz	r2, d61f8 <_ZNK6String6equalsEPKc+0x16>
   d61e8:	b121      	cbz	r1, d61f4 <_ZNK6String6equalsEPKc+0x12>
   d61ea:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d61ec:	fab0 f080 	clz	r0, r0
   d61f0:	0940      	lsrs	r0, r0, #5
   d61f2:	e000      	b.n	d61f6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61f4:	2001      	movs	r0, #1
}
   d61f6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d61f8:	6800      	ldr	r0, [r0, #0]
   d61fa:	b909      	cbnz	r1, d6200 <_ZNK6String6equalsEPKc+0x1e>
   d61fc:	7800      	ldrb	r0, [r0, #0]
   d61fe:	e7f5      	b.n	d61ec <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6200:	f001 fb38 	bl	d7874 <strcmp>
   d6204:	e7f2      	b.n	d61ec <_ZNK6String6equalsEPKc+0xa>

000d6206 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6206:	b558      	push	{r3, r4, r6, lr}
   d6208:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d620a:	b12a      	cbz	r2, d6218 <_ZNK6String8getBytesEPhjj+0x12>
   d620c:	b121      	cbz	r1, d6218 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d620e:	6884      	ldr	r4, [r0, #8]
   d6210:	429c      	cmp	r4, r3
   d6212:	d802      	bhi.n	d621a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6214:	2300      	movs	r3, #0
   d6216:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d6218:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d621a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d621c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d621e:	6801      	ldr	r1, [r0, #0]
   d6220:	4294      	cmp	r4, r2
   d6222:	bf28      	it	cs
   d6224:	4614      	movcs	r4, r2
   d6226:	4419      	add	r1, r3
   d6228:	4622      	mov	r2, r4
   d622a:	4630      	mov	r0, r6
   d622c:	f001 fb6b 	bl	d7906 <strncpy>
	buf[n] = 0;
   d6230:	2300      	movs	r3, #0
   d6232:	5533      	strb	r3, [r6, r4]
   d6234:	e7f0      	b.n	d6218 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d6238 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d6238:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d623a:	6800      	ldr	r0, [r0, #0]
   d623c:	b140      	cbz	r0, d6250 <_ZNK6String7toFloatEv+0x18>
   d623e:	f001 f9d3 	bl	d75e8 <atof>
   d6242:	ec51 0b10 	vmov	r0, r1, d0
   d6246:	f000 ffad 	bl	d71a4 <__aeabi_d2f>
   d624a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d624e:	bd08      	pop	{r3, pc}
	return 0;
   d6250:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6258 <_ZNK6String7toFloatEv+0x20>
   d6254:	e7fb      	b.n	d624e <_ZNK6String7toFloatEv+0x16>
   d6256:	bf00      	nop
   d6258:	00000000 	.word	0x00000000

000d625c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d625c:	b507      	push	{r0, r1, r2, lr}
   d625e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6260:	2100      	movs	r1, #0
{
   d6262:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6264:	9100      	str	r1, [sp, #0]
   d6266:	2001      	movs	r0, #1
   d6268:	218c      	movs	r1, #140	; 0x8c
   d626a:	f7ff f891 	bl	d5390 <system_reset>
}
   d626e:	b003      	add	sp, #12
   d6270:	f85d fb04 	ldr.w	pc, [sp], #4

000d6274 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d6274:	4601      	mov	r1, r0
    reset(0, flags);
   d6276:	2000      	movs	r0, #0
   d6278:	f7ff bff0 	b.w	d625c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d627c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d627c:	2000      	movs	r0, #0
   d627e:	f7ff bff9 	b.w	d6274 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d6284 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6284:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6286:	4b09      	ldr	r3, [pc, #36]	; (d62ac <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6288:	4c09      	ldr	r4, [pc, #36]	; (d62b0 <_GLOBAL__sub_I_System+0x2c>)
   d628a:	2202      	movs	r2, #2
   d628c:	2000      	movs	r0, #0
   d628e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6290:	4b08      	ldr	r3, [pc, #32]	; (d62b4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6292:	6020      	str	r0, [r4, #0]
   d6294:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6296:	71a0      	strb	r0, [r4, #6]
   d6298:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d629a:	f7ff f835 	bl	d5308 <set_system_mode>
SystemClass System;
   d629e:	4620      	mov	r0, r4
   d62a0:	4a05      	ldr	r2, [pc, #20]	; (d62b8 <_GLOBAL__sub_I_System+0x34>)
   d62a2:	4906      	ldr	r1, [pc, #24]	; (d62bc <_GLOBAL__sub_I_System+0x38>)
   d62a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d62a8:	f000 baf0 	b.w	d688c <__aeabi_atexit>
   d62ac:	2003e618 	.word	0x2003e618
   d62b0:	2003e60c 	.word	0x2003e60c
   d62b4:	ffff0000 	.word	0xffff0000
   d62b8:	2003e468 	.word	0x2003e468
   d62bc:	000d40d1 	.word	0x000d40d1

000d62c0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d62c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d62c4:	4a15      	ldr	r2, [pc, #84]	; (d631c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d62c6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d6328 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d62ca:	e9d2 3200 	ldrd	r3, r2, [r2]
   d62ce:	18c0      	adds	r0, r0, r3
   d62d0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d62d4:	4a12      	ldr	r2, [pc, #72]	; (d6320 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d62d6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d62da:	18c6      	adds	r6, r0, r3
   d62dc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d62e0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d62e4:	42bb      	cmp	r3, r7
   d62e6:	bf08      	it	eq
   d62e8:	42b2      	cmpeq	r2, r6
{
   d62ea:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d62ec:	d013      	beq.n	d6316 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d62ee:	a903      	add	r1, sp, #12
   d62f0:	4668      	mov	r0, sp
   d62f2:	e9cd 6700 	strd	r6, r7, [sp]
   d62f6:	f001 f98d 	bl	d7614 <localtime_r>
	calendar_time.tm_year += 1900;
   d62fa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62fc:	4d09      	ldr	r5, [pc, #36]	; (d6324 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d62fe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6302:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d6304:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d630a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d630c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d630e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6312:	6823      	ldr	r3, [r4, #0]
   d6314:	602b      	str	r3, [r5, #0]
    }
}
   d6316:	b00c      	add	sp, #48	; 0x30
   d6318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d631c:	2003e650 	.word	0x2003e650
   d6320:	2003e648 	.word	0x2003e648
   d6324:	2003e620 	.word	0x2003e620
   d6328:	2003e658 	.word	0x2003e658

000d632c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d632c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d632e:	2000      	movs	r0, #0
   d6330:	f7ff f880 	bl	d5434 <spark_sync_time_pending>
   d6334:	b128      	cbz	r0, d6342 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6336:	f7ff f855 	bl	d53e4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d633a:	f080 0001 	eor.w	r0, r0, #1
   d633e:	b2c0      	uxtb	r0, r0
    }
   d6340:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6342:	2001      	movs	r0, #1
   d6344:	e7fc      	b.n	d6340 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d6346 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6346:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6348:	2000      	movs	r0, #0
   d634a:	f7fe fe93 	bl	d5074 <hal_rtc_time_is_valid>
    if (rtcstate)
   d634e:	4604      	mov	r4, r0
   d6350:	b9a0      	cbnz	r0, d637c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6352:	f7fe ffd1 	bl	d52f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6356:	2801      	cmp	r0, #1
   d6358:	d110      	bne.n	d637c <_ZN9TimeClass7isValidEv+0x36>
   d635a:	4620      	mov	r0, r4
   d635c:	f7fe fffc 	bl	d5358 <system_thread_get_state>
   d6360:	b960      	cbnz	r0, d637c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6362:	f7ff ffe3 	bl	d632c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6366:	b910      	cbnz	r0, d636e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6368:	f7ff f82c 	bl	d53c4 <spark_process>
        while (_while() && !_condition()) {
   d636c:	e7f9      	b.n	d6362 <_ZN9TimeClass7isValidEv+0x1c>
   d636e:	f7ff ffdd 	bl	d632c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6376:	2000      	movs	r0, #0
   d6378:	f7fe be7c 	b.w	d5074 <hal_rtc_time_is_valid>
}
   d637c:	4620      	mov	r0, r4
   d637e:	bd10      	pop	{r4, pc}

000d6380 <_ZN9TimeClass3nowEv>:
{
   d6380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6382:	f7ff ffe0 	bl	d6346 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6386:	2210      	movs	r2, #16
   d6388:	2100      	movs	r1, #0
   d638a:	4668      	mov	r0, sp
   d638c:	f001 fa46 	bl	d781c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6390:	2100      	movs	r1, #0
   d6392:	4668      	mov	r0, sp
   d6394:	f7fe fe7e 	bl	d5094 <hal_rtc_get_time>
}
   d6398:	e9dd 0100 	ldrd	r0, r1, [sp]
   d639c:	b005      	add	sp, #20
   d639e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d63a4 <_ZN9TimeClass4hourEv>:
{
   d63a4:	b508      	push	{r3, lr}
	return hour(now());
   d63a6:	f7ff ffeb 	bl	d6380 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d63aa:	f7ff ff89 	bl	d62c0 <_ZL22Refresh_UnixTime_Cachex>
}
   d63ae:	4b01      	ldr	r3, [pc, #4]	; (d63b4 <_ZN9TimeClass4hourEv+0x10>)
   d63b0:	6898      	ldr	r0, [r3, #8]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	2003e620 	.word	0x2003e620

000d63b8 <_ZN9TimeClass6minuteEv>:
{
   d63b8:	b508      	push	{r3, lr}
	return minute(now());
   d63ba:	f7ff ffe1 	bl	d6380 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d63be:	f7ff ff7f 	bl	d62c0 <_ZL22Refresh_UnixTime_Cachex>
}
   d63c2:	4b01      	ldr	r3, [pc, #4]	; (d63c8 <_ZN9TimeClass6minuteEv+0x10>)
   d63c4:	6858      	ldr	r0, [r3, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	2003e620 	.word	0x2003e620

000d63cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63cc:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	4b02      	ldr	r3, [pc, #8]	; (d63dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63d2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d63d4:	4770      	bx	lr
   d63d6:	bf00      	nop
   d63d8:	2003e228 	.word	0x2003e228
   d63dc:	2003e61c 	.word	0x2003e61c

000d63e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d63e0:	4770      	bx	lr

000d63e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63e2:	7441      	strb	r1, [r0, #17]
}
   d63e4:	4770      	bx	lr

000d63e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d63e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d63e8:	7c00      	ldrb	r0, [r0, #16]
   d63ea:	f7fe ff33 	bl	d5254 <hal_usart_available_data_for_write>
}
   d63ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63f2:	bd08      	pop	{r3, pc}

000d63f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d63f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d63f6:	7c00      	ldrb	r0, [r0, #16]
   d63f8:	f7fe ff04 	bl	d5204 <hal_usart_available>
}
   d63fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6400:	bd08      	pop	{r3, pc}

000d6402 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6402:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6404:	7c00      	ldrb	r0, [r0, #16]
   d6406:	f7fe ff0d 	bl	d5224 <hal_usart_peek>
}
   d640a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d640e:	bd08      	pop	{r3, pc}

000d6410 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6410:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6412:	7c00      	ldrb	r0, [r0, #16]
   d6414:	f7fe fefe 	bl	d5214 <hal_usart_read>
}
   d6418:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d641c:	bd08      	pop	{r3, pc}

000d641e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d641e:	7c00      	ldrb	r0, [r0, #16]
   d6420:	f7fe bf08 	b.w	d5234 <hal_usart_flush>

000d6424 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6424:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6426:	7c45      	ldrb	r5, [r0, #17]
{
   d6428:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d642a:	b12d      	cbz	r5, d6438 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d642c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d642e:	b003      	add	sp, #12
   d6430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6434:	f7fe bede 	b.w	d51f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6438:	7c00      	ldrb	r0, [r0, #16]
   d643a:	9101      	str	r1, [sp, #4]
   d643c:	f7fe ff0a 	bl	d5254 <hal_usart_available_data_for_write>
   d6440:	2800      	cmp	r0, #0
   d6442:	9901      	ldr	r1, [sp, #4]
   d6444:	dcf2      	bgt.n	d642c <_ZN11USARTSerial5writeEh+0x8>
}
   d6446:	4628      	mov	r0, r5
   d6448:	b003      	add	sp, #12
   d644a:	bd30      	pop	{r4, r5, pc}

000d644c <_ZN11USARTSerialD0Ev>:
   d644c:	b510      	push	{r4, lr}
   d644e:	2114      	movs	r1, #20
   d6450:	4604      	mov	r4, r0
   d6452:	f000 fa20 	bl	d6896 <_ZdlPvj>
   d6456:	4620      	mov	r0, r4
   d6458:	bd10      	pop	{r4, pc}
	...

000d645c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d645c:	b510      	push	{r4, lr}
   d645e:	f04f 0c00 	mov.w	ip, #0
   d6462:	4604      	mov	r4, r0
   d6464:	4608      	mov	r0, r1
   d6466:	4611      	mov	r1, r2
   d6468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d646c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6470:	4a04      	ldr	r2, [pc, #16]	; (d6484 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6472:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6474:	2201      	movs	r2, #1
  _serial = serial;
   d6476:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6478:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d647a:	461a      	mov	r2, r3
   d647c:	f7fe feb2 	bl	d51e4 <hal_usart_init>
}
   d6480:	4620      	mov	r0, r4
   d6482:	bd10      	pop	{r4, pc}
   d6484:	000da2f0 	.word	0x000da2f0

000d6488 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6488:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d648a:	4c0e      	ldr	r4, [pc, #56]	; (d64c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d648c:	7821      	ldrb	r1, [r4, #0]
   d648e:	f3bf 8f5b 	dmb	ish
   d6492:	f011 0101 	ands.w	r1, r1, #1
   d6496:	d112      	bne.n	d64be <_Z22__fetch_global_Serial1v+0x36>
   d6498:	4620      	mov	r0, r4
   d649a:	9101      	str	r1, [sp, #4]
   d649c:	f7fd fe01 	bl	d40a2 <__cxa_guard_acquire>
   d64a0:	9901      	ldr	r1, [sp, #4]
   d64a2:	b160      	cbz	r0, d64be <_Z22__fetch_global_Serial1v+0x36>
   d64a4:	4a08      	ldr	r2, [pc, #32]	; (d64c8 <_Z22__fetch_global_Serial1v+0x40>)
   d64a6:	4b09      	ldr	r3, [pc, #36]	; (d64cc <_Z22__fetch_global_Serial1v+0x44>)
   d64a8:	4809      	ldr	r0, [pc, #36]	; (d64d0 <_Z22__fetch_global_Serial1v+0x48>)
   d64aa:	f7ff ffd7 	bl	d645c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d64ae:	4620      	mov	r0, r4
   d64b0:	f7fd fdfc 	bl	d40ac <__cxa_guard_release>
   d64b4:	4a07      	ldr	r2, [pc, #28]	; (d64d4 <_Z22__fetch_global_Serial1v+0x4c>)
   d64b6:	4908      	ldr	r1, [pc, #32]	; (d64d8 <_Z22__fetch_global_Serial1v+0x50>)
   d64b8:	4805      	ldr	r0, [pc, #20]	; (d64d0 <_Z22__fetch_global_Serial1v+0x48>)
   d64ba:	f000 f9e7 	bl	d688c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d64be:	4804      	ldr	r0, [pc, #16]	; (d64d0 <_Z22__fetch_global_Serial1v+0x48>)
   d64c0:	b002      	add	sp, #8
   d64c2:	bd10      	pop	{r4, pc}
   d64c4:	2003e660 	.word	0x2003e660
   d64c8:	2003e664 	.word	0x2003e664
   d64cc:	2003e6e8 	.word	0x2003e6e8
   d64d0:	2003e76c 	.word	0x2003e76c
   d64d4:	2003e468 	.word	0x2003e468
   d64d8:	000d63e1 	.word	0x000d63e1

000d64dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64dc:	7441      	strb	r1, [r0, #17]
}
   d64de:	4770      	bx	lr

000d64e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d64e0:	4770      	bx	lr

000d64e2 <_ZN9USBSerial4readEv>:
{
   d64e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d64e4:	2100      	movs	r1, #0
   d64e6:	7c00      	ldrb	r0, [r0, #16]
   d64e8:	f7fe fedc 	bl	d52a4 <HAL_USB_USART_Receive_Data>
}
   d64ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64f0:	bd08      	pop	{r3, pc}

000d64f2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d64f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d64f4:	2101      	movs	r1, #1
   d64f6:	7c00      	ldrb	r0, [r0, #16]
   d64f8:	f7fe fed4 	bl	d52a4 <HAL_USB_USART_Receive_Data>
}
   d64fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6500:	bd08      	pop	{r3, pc}

000d6502 <_ZN9USBSerial17availableForWriteEv>:
{
   d6502:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6504:	7c00      	ldrb	r0, [r0, #16]
   d6506:	f7fe fec5 	bl	d5294 <HAL_USB_USART_Available_Data_For_Write>
}
   d650a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650e:	bd08      	pop	{r3, pc}

000d6510 <_ZN9USBSerial9availableEv>:
{
   d6510:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6512:	7c00      	ldrb	r0, [r0, #16]
   d6514:	f7fe feb6 	bl	d5284 <HAL_USB_USART_Available_Data>
}
   d6518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d651c:	bd08      	pop	{r3, pc}

000d651e <_ZN9USBSerial5writeEh>:
{
   d651e:	b513      	push	{r0, r1, r4, lr}
   d6520:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6522:	7c00      	ldrb	r0, [r0, #16]
{
   d6524:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6526:	f7fe feb5 	bl	d5294 <HAL_USB_USART_Available_Data_For_Write>
   d652a:	2800      	cmp	r0, #0
   d652c:	9901      	ldr	r1, [sp, #4]
   d652e:	dc01      	bgt.n	d6534 <_ZN9USBSerial5writeEh+0x16>
   d6530:	7c60      	ldrb	r0, [r4, #17]
   d6532:	b120      	cbz	r0, d653e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6534:	7c20      	ldrb	r0, [r4, #16]
   d6536:	f7fe febd 	bl	d52b4 <HAL_USB_USART_Send_Data>
   d653a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d653e:	b002      	add	sp, #8
   d6540:	bd10      	pop	{r4, pc}

000d6542 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6542:	7c00      	ldrb	r0, [r0, #16]
   d6544:	f7fe bebe 	b.w	d52c4 <HAL_USB_USART_Flush_Data>

000d6548 <_ZN9USBSerialD0Ev>:
   d6548:	b510      	push	{r4, lr}
   d654a:	2114      	movs	r1, #20
   d654c:	4604      	mov	r4, r0
   d654e:	f000 f9a2 	bl	d6896 <_ZdlPvj>
   d6552:	4620      	mov	r0, r4
   d6554:	bd10      	pop	{r4, pc}
	...

000d6558 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6558:	b510      	push	{r4, lr}
   d655a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d655e:	4604      	mov	r4, r0
   d6560:	4608      	mov	r0, r1
   d6562:	2100      	movs	r1, #0
   d6564:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6568:	4b04      	ldr	r3, [pc, #16]	; (d657c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d656a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d656c:	2301      	movs	r3, #1
  _serial = serial;
   d656e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6570:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6572:	4611      	mov	r1, r2
   d6574:	f7fe fe76 	bl	d5264 <HAL_USB_USART_Init>
}
   d6578:	4620      	mov	r0, r4
   d657a:	bd10      	pop	{r4, pc}
   d657c:	000da320 	.word	0x000da320

000d6580 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6580:	7c00      	ldrb	r0, [r0, #16]
   d6582:	2200      	movs	r2, #0
   d6584:	f7fe be76 	b.w	d5274 <HAL_USB_USART_Begin>

000d6588 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6588:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d658a:	2214      	movs	r2, #20
{
   d658c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d658e:	2100      	movs	r1, #0
   d6590:	f001 f944 	bl	d781c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6594:	4620      	mov	r0, r4
   d6596:	bd10      	pop	{r4, pc}

000d6598 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6598:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d659a:	4c10      	ldr	r4, [pc, #64]	; (d65dc <_Z16_fetch_usbserialv+0x44>)
{
   d659c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d659e:	a803      	add	r0, sp, #12
   d65a0:	f7ff fff2 	bl	d6588 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65a4:	7821      	ldrb	r1, [r4, #0]
   d65a6:	f3bf 8f5b 	dmb	ish
   d65aa:	f011 0101 	ands.w	r1, r1, #1
   d65ae:	d111      	bne.n	d65d4 <_Z16_fetch_usbserialv+0x3c>
   d65b0:	4620      	mov	r0, r4
   d65b2:	9101      	str	r1, [sp, #4]
   d65b4:	f7fd fd75 	bl	d40a2 <__cxa_guard_acquire>
   d65b8:	9901      	ldr	r1, [sp, #4]
   d65ba:	b158      	cbz	r0, d65d4 <_Z16_fetch_usbserialv+0x3c>
   d65bc:	aa03      	add	r2, sp, #12
   d65be:	4808      	ldr	r0, [pc, #32]	; (d65e0 <_Z16_fetch_usbserialv+0x48>)
   d65c0:	f7ff ffca 	bl	d6558 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d65c4:	4620      	mov	r0, r4
   d65c6:	f7fd fd71 	bl	d40ac <__cxa_guard_release>
   d65ca:	4a06      	ldr	r2, [pc, #24]	; (d65e4 <_Z16_fetch_usbserialv+0x4c>)
   d65cc:	4906      	ldr	r1, [pc, #24]	; (d65e8 <_Z16_fetch_usbserialv+0x50>)
   d65ce:	4804      	ldr	r0, [pc, #16]	; (d65e0 <_Z16_fetch_usbserialv+0x48>)
   d65d0:	f000 f95c 	bl	d688c <__aeabi_atexit>
	return _usbserial;
}
   d65d4:	4802      	ldr	r0, [pc, #8]	; (d65e0 <_Z16_fetch_usbserialv+0x48>)
   d65d6:	b008      	add	sp, #32
   d65d8:	bd10      	pop	{r4, pc}
   d65da:	bf00      	nop
   d65dc:	2003e780 	.word	0x2003e780
   d65e0:	2003e784 	.word	0x2003e784
   d65e4:	2003e468 	.word	0x2003e468
   d65e8:	000d64e1 	.word	0x000d64e1

000d65ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d65ec:	4b01      	ldr	r3, [pc, #4]	; (d65f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d65ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d65f0:	4770      	bx	lr
   d65f2:	bf00      	nop
   d65f4:	2003e22c 	.word	0x2003e22c

000d65f8 <serialEventRun>:
{
   d65f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d65fa:	4b0b      	ldr	r3, [pc, #44]	; (d6628 <serialEventRun+0x30>)
   d65fc:	b143      	cbz	r3, d6610 <serialEventRun+0x18>
   d65fe:	f7ff ffcb 	bl	d6598 <_Z16_fetch_usbserialv>
   d6602:	6803      	ldr	r3, [r0, #0]
   d6604:	691b      	ldr	r3, [r3, #16]
   d6606:	4798      	blx	r3
   d6608:	2800      	cmp	r0, #0
   d660a:	dd01      	ble.n	d6610 <serialEventRun+0x18>
        serialEvent();
   d660c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6610:	4b06      	ldr	r3, [pc, #24]	; (d662c <serialEventRun+0x34>)
   d6612:	b143      	cbz	r3, d6626 <serialEventRun+0x2e>
   d6614:	f7ff ff38 	bl	d6488 <_Z22__fetch_global_Serial1v>
   d6618:	6803      	ldr	r3, [r0, #0]
   d661a:	691b      	ldr	r3, [r3, #16]
   d661c:	4798      	blx	r3
   d661e:	2800      	cmp	r0, #0
   d6620:	dd01      	ble.n	d6626 <serialEventRun+0x2e>
        serialEvent1();
   d6622:	f3af 8000 	nop.w
}
   d6626:	bd08      	pop	{r3, pc}
	...

000d6630 <_post_loop>:
{
   d6630:	b508      	push	{r3, lr}
	serialEventRun();
   d6632:	f7ff ffe1 	bl	d65f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6636:	f7fe fcf5 	bl	d5024 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d663a:	4b01      	ldr	r3, [pc, #4]	; (d6640 <_post_loop+0x10>)
   d663c:	6018      	str	r0, [r3, #0]
}
   d663e:	bd08      	pop	{r3, pc}
   d6640:	2003e7a0 	.word	0x2003e7a0

000d6644 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6644:	4802      	ldr	r0, [pc, #8]	; (d6650 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6646:	4a03      	ldr	r2, [pc, #12]	; (d6654 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6648:	4903      	ldr	r1, [pc, #12]	; (d6658 <_Z33system_initialize_user_backup_ramv+0x14>)
   d664a:	1a12      	subs	r2, r2, r0
   d664c:	f001 b8d8 	b.w	d7800 <memcpy>
   d6650:	2003f400 	.word	0x2003f400
   d6654:	2003f404 	.word	0x2003f404
   d6658:	000da698 	.word	0x000da698

000d665c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d665c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d665e:	2300      	movs	r3, #0
   d6660:	9300      	str	r3, [sp, #0]
   d6662:	461a      	mov	r2, r3
   d6664:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6668:	f7fe fe88 	bl	d537c <system_ctrl_set_result>
}
   d666c:	b003      	add	sp, #12
   d666e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6674 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6674:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6676:	8843      	ldrh	r3, [r0, #2]
   d6678:	2b0a      	cmp	r3, #10
   d667a:	d008      	beq.n	d668e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d667c:	2b50      	cmp	r3, #80	; 0x50
   d667e:	d10b      	bne.n	d6698 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6680:	4b09      	ldr	r3, [pc, #36]	; (d66a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6682:	681b      	ldr	r3, [r3, #0]
   d6684:	b14b      	cbz	r3, d669a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6686:	b003      	add	sp, #12
   d6688:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d668c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d668e:	f7ff ffe5 	bl	d665c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6692:	b003      	add	sp, #12
   d6694:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6698:	2300      	movs	r3, #0
   d669a:	9300      	str	r3, [sp, #0]
   d669c:	461a      	mov	r2, r3
   d669e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66a2:	f7fe fe6b 	bl	d537c <system_ctrl_set_result>
}
   d66a6:	e7f4      	b.n	d6692 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d66a8:	2003e79c 	.word	0x2003e79c

000d66ac <module_user_init_hook>:
{
   d66ac:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d66ae:	4c12      	ldr	r4, [pc, #72]	; (d66f8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d66b0:	4812      	ldr	r0, [pc, #72]	; (d66fc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d66b2:	4d13      	ldr	r5, [pc, #76]	; (d6700 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d66b4:	2100      	movs	r1, #0
   d66b6:	f7fe ff55 	bl	d5564 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d66ba:	6823      	ldr	r3, [r4, #0]
   d66bc:	42ab      	cmp	r3, r5
   d66be:	4b11      	ldr	r3, [pc, #68]	; (d6704 <module_user_init_hook+0x58>)
   d66c0:	bf0c      	ite	eq
   d66c2:	2201      	moveq	r2, #1
   d66c4:	2200      	movne	r2, #0
   d66c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d66c8:	d002      	beq.n	d66d0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d66ca:	f7ff ffbb 	bl	d6644 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d66ce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d66d0:	f7fe fc98 	bl	d5004 <HAL_RNG_GetRandomNumber>
   d66d4:	4604      	mov	r4, r0
    srand(seed);
   d66d6:	f001 f8a9 	bl	d782c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d66da:	4b0b      	ldr	r3, [pc, #44]	; (d6708 <module_user_init_hook+0x5c>)
   d66dc:	b113      	cbz	r3, d66e4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d66de:	4620      	mov	r0, r4
   d66e0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d66e4:	2100      	movs	r1, #0
   d66e6:	4808      	ldr	r0, [pc, #32]	; (d6708 <module_user_init_hook+0x5c>)
   d66e8:	f7fe feac 	bl	d5444 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d66ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d66f0:	4806      	ldr	r0, [pc, #24]	; (d670c <module_user_init_hook+0x60>)
   d66f2:	2100      	movs	r1, #0
   d66f4:	f7fe be38 	b.w	d5368 <system_ctrl_set_app_request_handler>
   d66f8:	2003f400 	.word	0x2003f400
   d66fc:	000d65ed 	.word	0x000d65ed
   d6700:	9a271c1e 	.word	0x9a271c1e
   d6704:	2003e798 	.word	0x2003e798
   d6708:	00000000 	.word	0x00000000
   d670c:	000d6675 	.word	0x000d6675

000d6710 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6710:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6712:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6714:	d902      	bls.n	d671c <pinAvailable+0xc>
    return false;
   d6716:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6718:	b002      	add	sp, #8
   d671a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d671c:	f1a0 030b 	sub.w	r3, r0, #11
   d6720:	2b02      	cmp	r3, #2
   d6722:	d81a      	bhi.n	d675a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6724:	4c17      	ldr	r4, [pc, #92]	; (d6784 <pinAvailable+0x74>)
   d6726:	7821      	ldrb	r1, [r4, #0]
   d6728:	f3bf 8f5b 	dmb	ish
   d672c:	f011 0101 	ands.w	r1, r1, #1
   d6730:	d10b      	bne.n	d674a <pinAvailable+0x3a>
   d6732:	4620      	mov	r0, r4
   d6734:	9101      	str	r1, [sp, #4]
   d6736:	f7fd fcb4 	bl	d40a2 <__cxa_guard_acquire>
   d673a:	9901      	ldr	r1, [sp, #4]
   d673c:	b128      	cbz	r0, d674a <pinAvailable+0x3a>
   d673e:	4812      	ldr	r0, [pc, #72]	; (d6788 <pinAvailable+0x78>)
   d6740:	f7ff fccc 	bl	d60dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6744:	4620      	mov	r0, r4
   d6746:	f7fd fcb1 	bl	d40ac <__cxa_guard_release>
   d674a:	4b0f      	ldr	r3, [pc, #60]	; (d6788 <pinAvailable+0x78>)
   d674c:	7818      	ldrb	r0, [r3, #0]
   d674e:	f7fe fd41 	bl	d51d4 <hal_spi_is_enabled>
   d6752:	2800      	cmp	r0, #0
   d6754:	d1df      	bne.n	d6716 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6756:	2001      	movs	r0, #1
   d6758:	e7de      	b.n	d6718 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d675a:	2801      	cmp	r0, #1
   d675c:	d809      	bhi.n	d6772 <pinAvailable+0x62>
   d675e:	f000 f86d 	bl	d683c <_Z19__fetch_global_Wirev>
   d6762:	2100      	movs	r1, #0
   d6764:	7c00      	ldrb	r0, [r0, #16]
   d6766:	f7fe fcfd 	bl	d5164 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d676a:	f080 0001 	eor.w	r0, r0, #1
   d676e:	b2c0      	uxtb	r0, r0
   d6770:	e7d2      	b.n	d6718 <pinAvailable+0x8>
   d6772:	3809      	subs	r0, #9
   d6774:	2801      	cmp	r0, #1
   d6776:	d8ee      	bhi.n	d6756 <pinAvailable+0x46>
   d6778:	f7ff fe86 	bl	d6488 <_Z22__fetch_global_Serial1v>
   d677c:	7c00      	ldrb	r0, [r0, #16]
   d677e:	f7fe fd61 	bl	d5244 <hal_usart_is_enabled>
   d6782:	e7f2      	b.n	d676a <pinAvailable+0x5a>
   d6784:	2003e5a8 	.word	0x2003e5a8
   d6788:	2003e5ac 	.word	0x2003e5ac

000d678c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d678c:	2823      	cmp	r0, #35	; 0x23
{
   d678e:	b538      	push	{r3, r4, r5, lr}
   d6790:	4604      	mov	r4, r0
   d6792:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6794:	d80a      	bhi.n	d67ac <pinMode+0x20>
   d6796:	29ff      	cmp	r1, #255	; 0xff
   d6798:	d008      	beq.n	d67ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d679a:	f7ff ffb9 	bl	d6710 <pinAvailable>
   d679e:	b128      	cbz	r0, d67ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d67a0:	4629      	mov	r1, r5
   d67a2:	4620      	mov	r0, r4
}
   d67a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d67a8:	f7fe bc84 	b.w	d50b4 <HAL_Pin_Mode>
}
   d67ac:	bd38      	pop	{r3, r4, r5, pc}

000d67ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d67ae:	b538      	push	{r3, r4, r5, lr}
   d67b0:	4604      	mov	r4, r0
   d67b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d67b4:	f7fe fc86 	bl	d50c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d67b8:	28ff      	cmp	r0, #255	; 0xff
   d67ba:	d010      	beq.n	d67de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d67bc:	2806      	cmp	r0, #6
   d67be:	d804      	bhi.n	d67ca <digitalWrite+0x1c>
   d67c0:	234d      	movs	r3, #77	; 0x4d
   d67c2:	fa23 f000 	lsr.w	r0, r3, r0
   d67c6:	07c3      	lsls	r3, r0, #31
   d67c8:	d409      	bmi.n	d67de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d67ca:	4620      	mov	r0, r4
   d67cc:	f7ff ffa0 	bl	d6710 <pinAvailable>
   d67d0:	b128      	cbz	r0, d67de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d67d2:	4629      	mov	r1, r5
   d67d4:	4620      	mov	r0, r4
}
   d67d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d67da:	f7fe bc7b 	b.w	d50d4 <HAL_GPIO_Write>
}
   d67de:	bd38      	pop	{r3, r4, r5, pc}

000d67e0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d67e0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d67e2:	4c08      	ldr	r4, [pc, #32]	; (d6804 <_Z21__fetch_global_EEPROMv+0x24>)
   d67e4:	7823      	ldrb	r3, [r4, #0]
   d67e6:	f3bf 8f5b 	dmb	ish
   d67ea:	07db      	lsls	r3, r3, #31
   d67ec:	d408      	bmi.n	d6800 <_Z21__fetch_global_EEPROMv+0x20>
   d67ee:	4620      	mov	r0, r4
   d67f0:	f7fd fc57 	bl	d40a2 <__cxa_guard_acquire>
   d67f4:	b120      	cbz	r0, d6800 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d67f6:	f7fe fc1d 	bl	d5034 <HAL_EEPROM_Init>
   d67fa:	4620      	mov	r0, r4
   d67fc:	f7fd fc56 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6800:	4801      	ldr	r0, [pc, #4]	; (d6808 <_Z21__fetch_global_EEPROMv+0x28>)
   d6802:	bd10      	pop	{r4, pc}
   d6804:	2003e7a4 	.word	0x2003e7a4
   d6808:	2003e7a8 	.word	0x2003e7a8

000d680c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d680c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d680e:	2300      	movs	r3, #0
   d6810:	2520      	movs	r5, #32
   d6812:	8043      	strh	r3, [r0, #2]
   d6814:	2314      	movs	r3, #20
{
   d6816:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6818:	8003      	strh	r3, [r0, #0]
   d681a:	6085      	str	r5, [r0, #8]
   d681c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d681e:	4906      	ldr	r1, [pc, #24]	; (d6838 <_Z17acquireWireBufferv+0x2c>)
   d6820:	4628      	mov	r0, r5
   d6822:	f000 f83a 	bl	d689a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6826:	4904      	ldr	r1, [pc, #16]	; (d6838 <_Z17acquireWireBufferv+0x2c>)
	};
   d6828:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d682a:	4628      	mov	r0, r5
   d682c:	f000 f835 	bl	d689a <_ZnajRKSt9nothrow_t>
	};
   d6830:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6832:	4620      	mov	r0, r4
   d6834:	bd38      	pop	{r3, r4, r5, pc}
   d6836:	bf00      	nop
   d6838:	000da348 	.word	0x000da348

000d683c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d683c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d683e:	4d0f      	ldr	r5, [pc, #60]	; (d687c <_Z19__fetch_global_Wirev+0x40>)
   d6840:	7829      	ldrb	r1, [r5, #0]
   d6842:	f3bf 8f5b 	dmb	ish
   d6846:	f011 0401 	ands.w	r4, r1, #1
{
   d684a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d684c:	d113      	bne.n	d6876 <_Z19__fetch_global_Wirev+0x3a>
   d684e:	4628      	mov	r0, r5
   d6850:	f7fd fc27 	bl	d40a2 <__cxa_guard_acquire>
   d6854:	b178      	cbz	r0, d6876 <_Z19__fetch_global_Wirev+0x3a>
   d6856:	a801      	add	r0, sp, #4
   d6858:	f7ff ffd8 	bl	d680c <_Z17acquireWireBufferv>
   d685c:	aa01      	add	r2, sp, #4
   d685e:	4621      	mov	r1, r4
   d6860:	4807      	ldr	r0, [pc, #28]	; (d6880 <_Z19__fetch_global_Wirev+0x44>)
   d6862:	f7ff fa55 	bl	d5d10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6866:	4628      	mov	r0, r5
   d6868:	f7fd fc20 	bl	d40ac <__cxa_guard_release>
   d686c:	4a05      	ldr	r2, [pc, #20]	; (d6884 <_Z19__fetch_global_Wirev+0x48>)
   d686e:	4906      	ldr	r1, [pc, #24]	; (d6888 <_Z19__fetch_global_Wirev+0x4c>)
   d6870:	4803      	ldr	r0, [pc, #12]	; (d6880 <_Z19__fetch_global_Wirev+0x44>)
   d6872:	f000 f80b 	bl	d688c <__aeabi_atexit>
	return wire;
}
   d6876:	4802      	ldr	r0, [pc, #8]	; (d6880 <_Z19__fetch_global_Wirev+0x44>)
   d6878:	b007      	add	sp, #28
   d687a:	bd30      	pop	{r4, r5, pc}
   d687c:	2003e7ac 	.word	0x2003e7ac
   d6880:	2003e7b0 	.word	0x2003e7b0
   d6884:	2003e468 	.word	0x2003e468
   d6888:	000d5cb9 	.word	0x000d5cb9

000d688c <__aeabi_atexit>:
   d688c:	460b      	mov	r3, r1
   d688e:	4601      	mov	r1, r0
   d6890:	4618      	mov	r0, r3
   d6892:	f000 beb1 	b.w	d75f8 <__cxa_atexit>

000d6896 <_ZdlPvj>:
   d6896:	f7fd bc02 	b.w	d409e <_ZdlPv>

000d689a <_ZnajRKSt9nothrow_t>:
   d689a:	f7fd bbfe 	b.w	d409a <_Znaj>

000d689e <_ZSt25__throw_bad_function_callv>:
   d689e:	b508      	push	{r3, lr}
   d68a0:	f7fe fe50 	bl	d5544 <abort>
   d68a4:	0000      	movs	r0, r0
	...

000d68a8 <nan>:
   d68a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d68b0 <nan+0x8>
   d68ac:	4770      	bx	lr
   d68ae:	bf00      	nop
   d68b0:	00000000 	.word	0x00000000
   d68b4:	7ff80000 	.word	0x7ff80000

000d68b8 <__aeabi_drsub>:
   d68b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d68bc:	e002      	b.n	d68c4 <__adddf3>
   d68be:	bf00      	nop

000d68c0 <__aeabi_dsub>:
   d68c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d68c4 <__adddf3>:
   d68c4:	b530      	push	{r4, r5, lr}
   d68c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d68ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d68ce:	ea94 0f05 	teq	r4, r5
   d68d2:	bf08      	it	eq
   d68d4:	ea90 0f02 	teqeq	r0, r2
   d68d8:	bf1f      	itttt	ne
   d68da:	ea54 0c00 	orrsne.w	ip, r4, r0
   d68de:	ea55 0c02 	orrsne.w	ip, r5, r2
   d68e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d68e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d68ea:	f000 80e2 	beq.w	d6ab2 <__adddf3+0x1ee>
   d68ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d68f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d68f6:	bfb8      	it	lt
   d68f8:	426d      	neglt	r5, r5
   d68fa:	dd0c      	ble.n	d6916 <__adddf3+0x52>
   d68fc:	442c      	add	r4, r5
   d68fe:	ea80 0202 	eor.w	r2, r0, r2
   d6902:	ea81 0303 	eor.w	r3, r1, r3
   d6906:	ea82 0000 	eor.w	r0, r2, r0
   d690a:	ea83 0101 	eor.w	r1, r3, r1
   d690e:	ea80 0202 	eor.w	r2, r0, r2
   d6912:	ea81 0303 	eor.w	r3, r1, r3
   d6916:	2d36      	cmp	r5, #54	; 0x36
   d6918:	bf88      	it	hi
   d691a:	bd30      	pophi	{r4, r5, pc}
   d691c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6920:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6924:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6928:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d692c:	d002      	beq.n	d6934 <__adddf3+0x70>
   d692e:	4240      	negs	r0, r0
   d6930:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6934:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6938:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d693c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6940:	d002      	beq.n	d6948 <__adddf3+0x84>
   d6942:	4252      	negs	r2, r2
   d6944:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6948:	ea94 0f05 	teq	r4, r5
   d694c:	f000 80a7 	beq.w	d6a9e <__adddf3+0x1da>
   d6950:	f1a4 0401 	sub.w	r4, r4, #1
   d6954:	f1d5 0e20 	rsbs	lr, r5, #32
   d6958:	db0d      	blt.n	d6976 <__adddf3+0xb2>
   d695a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d695e:	fa22 f205 	lsr.w	r2, r2, r5
   d6962:	1880      	adds	r0, r0, r2
   d6964:	f141 0100 	adc.w	r1, r1, #0
   d6968:	fa03 f20e 	lsl.w	r2, r3, lr
   d696c:	1880      	adds	r0, r0, r2
   d696e:	fa43 f305 	asr.w	r3, r3, r5
   d6972:	4159      	adcs	r1, r3
   d6974:	e00e      	b.n	d6994 <__adddf3+0xd0>
   d6976:	f1a5 0520 	sub.w	r5, r5, #32
   d697a:	f10e 0e20 	add.w	lr, lr, #32
   d697e:	2a01      	cmp	r2, #1
   d6980:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6984:	bf28      	it	cs
   d6986:	f04c 0c02 	orrcs.w	ip, ip, #2
   d698a:	fa43 f305 	asr.w	r3, r3, r5
   d698e:	18c0      	adds	r0, r0, r3
   d6990:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6994:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6998:	d507      	bpl.n	d69aa <__adddf3+0xe6>
   d699a:	f04f 0e00 	mov.w	lr, #0
   d699e:	f1dc 0c00 	rsbs	ip, ip, #0
   d69a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d69a6:	eb6e 0101 	sbc.w	r1, lr, r1
   d69aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d69ae:	d31b      	bcc.n	d69e8 <__adddf3+0x124>
   d69b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d69b4:	d30c      	bcc.n	d69d0 <__adddf3+0x10c>
   d69b6:	0849      	lsrs	r1, r1, #1
   d69b8:	ea5f 0030 	movs.w	r0, r0, rrx
   d69bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d69c0:	f104 0401 	add.w	r4, r4, #1
   d69c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d69c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d69cc:	f080 809a 	bcs.w	d6b04 <__adddf3+0x240>
   d69d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d69d4:	bf08      	it	eq
   d69d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d69da:	f150 0000 	adcs.w	r0, r0, #0
   d69de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d69e2:	ea41 0105 	orr.w	r1, r1, r5
   d69e6:	bd30      	pop	{r4, r5, pc}
   d69e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d69ec:	4140      	adcs	r0, r0
   d69ee:	eb41 0101 	adc.w	r1, r1, r1
   d69f2:	3c01      	subs	r4, #1
   d69f4:	bf28      	it	cs
   d69f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d69fa:	d2e9      	bcs.n	d69d0 <__adddf3+0x10c>
   d69fc:	f091 0f00 	teq	r1, #0
   d6a00:	bf04      	itt	eq
   d6a02:	4601      	moveq	r1, r0
   d6a04:	2000      	moveq	r0, #0
   d6a06:	fab1 f381 	clz	r3, r1
   d6a0a:	bf08      	it	eq
   d6a0c:	3320      	addeq	r3, #32
   d6a0e:	f1a3 030b 	sub.w	r3, r3, #11
   d6a12:	f1b3 0220 	subs.w	r2, r3, #32
   d6a16:	da0c      	bge.n	d6a32 <__adddf3+0x16e>
   d6a18:	320c      	adds	r2, #12
   d6a1a:	dd08      	ble.n	d6a2e <__adddf3+0x16a>
   d6a1c:	f102 0c14 	add.w	ip, r2, #20
   d6a20:	f1c2 020c 	rsb	r2, r2, #12
   d6a24:	fa01 f00c 	lsl.w	r0, r1, ip
   d6a28:	fa21 f102 	lsr.w	r1, r1, r2
   d6a2c:	e00c      	b.n	d6a48 <__adddf3+0x184>
   d6a2e:	f102 0214 	add.w	r2, r2, #20
   d6a32:	bfd8      	it	le
   d6a34:	f1c2 0c20 	rsble	ip, r2, #32
   d6a38:	fa01 f102 	lsl.w	r1, r1, r2
   d6a3c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6a40:	bfdc      	itt	le
   d6a42:	ea41 010c 	orrle.w	r1, r1, ip
   d6a46:	4090      	lslle	r0, r2
   d6a48:	1ae4      	subs	r4, r4, r3
   d6a4a:	bfa2      	ittt	ge
   d6a4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6a50:	4329      	orrge	r1, r5
   d6a52:	bd30      	popge	{r4, r5, pc}
   d6a54:	ea6f 0404 	mvn.w	r4, r4
   d6a58:	3c1f      	subs	r4, #31
   d6a5a:	da1c      	bge.n	d6a96 <__adddf3+0x1d2>
   d6a5c:	340c      	adds	r4, #12
   d6a5e:	dc0e      	bgt.n	d6a7e <__adddf3+0x1ba>
   d6a60:	f104 0414 	add.w	r4, r4, #20
   d6a64:	f1c4 0220 	rsb	r2, r4, #32
   d6a68:	fa20 f004 	lsr.w	r0, r0, r4
   d6a6c:	fa01 f302 	lsl.w	r3, r1, r2
   d6a70:	ea40 0003 	orr.w	r0, r0, r3
   d6a74:	fa21 f304 	lsr.w	r3, r1, r4
   d6a78:	ea45 0103 	orr.w	r1, r5, r3
   d6a7c:	bd30      	pop	{r4, r5, pc}
   d6a7e:	f1c4 040c 	rsb	r4, r4, #12
   d6a82:	f1c4 0220 	rsb	r2, r4, #32
   d6a86:	fa20 f002 	lsr.w	r0, r0, r2
   d6a8a:	fa01 f304 	lsl.w	r3, r1, r4
   d6a8e:	ea40 0003 	orr.w	r0, r0, r3
   d6a92:	4629      	mov	r1, r5
   d6a94:	bd30      	pop	{r4, r5, pc}
   d6a96:	fa21 f004 	lsr.w	r0, r1, r4
   d6a9a:	4629      	mov	r1, r5
   d6a9c:	bd30      	pop	{r4, r5, pc}
   d6a9e:	f094 0f00 	teq	r4, #0
   d6aa2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6aa6:	bf06      	itte	eq
   d6aa8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6aac:	3401      	addeq	r4, #1
   d6aae:	3d01      	subne	r5, #1
   d6ab0:	e74e      	b.n	d6950 <__adddf3+0x8c>
   d6ab2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6ab6:	bf18      	it	ne
   d6ab8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6abc:	d029      	beq.n	d6b12 <__adddf3+0x24e>
   d6abe:	ea94 0f05 	teq	r4, r5
   d6ac2:	bf08      	it	eq
   d6ac4:	ea90 0f02 	teqeq	r0, r2
   d6ac8:	d005      	beq.n	d6ad6 <__adddf3+0x212>
   d6aca:	ea54 0c00 	orrs.w	ip, r4, r0
   d6ace:	bf04      	itt	eq
   d6ad0:	4619      	moveq	r1, r3
   d6ad2:	4610      	moveq	r0, r2
   d6ad4:	bd30      	pop	{r4, r5, pc}
   d6ad6:	ea91 0f03 	teq	r1, r3
   d6ada:	bf1e      	ittt	ne
   d6adc:	2100      	movne	r1, #0
   d6ade:	2000      	movne	r0, #0
   d6ae0:	bd30      	popne	{r4, r5, pc}
   d6ae2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6ae6:	d105      	bne.n	d6af4 <__adddf3+0x230>
   d6ae8:	0040      	lsls	r0, r0, #1
   d6aea:	4149      	adcs	r1, r1
   d6aec:	bf28      	it	cs
   d6aee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6af2:	bd30      	pop	{r4, r5, pc}
   d6af4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6af8:	bf3c      	itt	cc
   d6afa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6afe:	bd30      	popcc	{r4, r5, pc}
   d6b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6b08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b0c:	f04f 0000 	mov.w	r0, #0
   d6b10:	bd30      	pop	{r4, r5, pc}
   d6b12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6b16:	bf1a      	itte	ne
   d6b18:	4619      	movne	r1, r3
   d6b1a:	4610      	movne	r0, r2
   d6b1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6b20:	bf1c      	itt	ne
   d6b22:	460b      	movne	r3, r1
   d6b24:	4602      	movne	r2, r0
   d6b26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6b2a:	bf06      	itte	eq
   d6b2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6b30:	ea91 0f03 	teqeq	r1, r3
   d6b34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6b38:	bd30      	pop	{r4, r5, pc}
   d6b3a:	bf00      	nop

000d6b3c <__aeabi_ui2d>:
   d6b3c:	f090 0f00 	teq	r0, #0
   d6b40:	bf04      	itt	eq
   d6b42:	2100      	moveq	r1, #0
   d6b44:	4770      	bxeq	lr
   d6b46:	b530      	push	{r4, r5, lr}
   d6b48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b50:	f04f 0500 	mov.w	r5, #0
   d6b54:	f04f 0100 	mov.w	r1, #0
   d6b58:	e750      	b.n	d69fc <__adddf3+0x138>
   d6b5a:	bf00      	nop

000d6b5c <__aeabi_i2d>:
   d6b5c:	f090 0f00 	teq	r0, #0
   d6b60:	bf04      	itt	eq
   d6b62:	2100      	moveq	r1, #0
   d6b64:	4770      	bxeq	lr
   d6b66:	b530      	push	{r4, r5, lr}
   d6b68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6b74:	bf48      	it	mi
   d6b76:	4240      	negmi	r0, r0
   d6b78:	f04f 0100 	mov.w	r1, #0
   d6b7c:	e73e      	b.n	d69fc <__adddf3+0x138>
   d6b7e:	bf00      	nop

000d6b80 <__aeabi_f2d>:
   d6b80:	0042      	lsls	r2, r0, #1
   d6b82:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6b86:	ea4f 0131 	mov.w	r1, r1, rrx
   d6b8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6b8e:	bf1f      	itttt	ne
   d6b90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6b94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6b98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6b9c:	4770      	bxne	lr
   d6b9e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6ba2:	bf08      	it	eq
   d6ba4:	4770      	bxeq	lr
   d6ba6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6baa:	bf04      	itt	eq
   d6bac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6bb0:	4770      	bxeq	lr
   d6bb2:	b530      	push	{r4, r5, lr}
   d6bb4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6bb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6bbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6bc0:	e71c      	b.n	d69fc <__adddf3+0x138>
   d6bc2:	bf00      	nop

000d6bc4 <__aeabi_ul2d>:
   d6bc4:	ea50 0201 	orrs.w	r2, r0, r1
   d6bc8:	bf08      	it	eq
   d6bca:	4770      	bxeq	lr
   d6bcc:	b530      	push	{r4, r5, lr}
   d6bce:	f04f 0500 	mov.w	r5, #0
   d6bd2:	e00a      	b.n	d6bea <__aeabi_l2d+0x16>

000d6bd4 <__aeabi_l2d>:
   d6bd4:	ea50 0201 	orrs.w	r2, r0, r1
   d6bd8:	bf08      	it	eq
   d6bda:	4770      	bxeq	lr
   d6bdc:	b530      	push	{r4, r5, lr}
   d6bde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6be2:	d502      	bpl.n	d6bea <__aeabi_l2d+0x16>
   d6be4:	4240      	negs	r0, r0
   d6be6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6bea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6bee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6bf2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6bf6:	f43f aed8 	beq.w	d69aa <__adddf3+0xe6>
   d6bfa:	f04f 0203 	mov.w	r2, #3
   d6bfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c02:	bf18      	it	ne
   d6c04:	3203      	addne	r2, #3
   d6c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c0a:	bf18      	it	ne
   d6c0c:	3203      	addne	r2, #3
   d6c0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6c12:	f1c2 0320 	rsb	r3, r2, #32
   d6c16:	fa00 fc03 	lsl.w	ip, r0, r3
   d6c1a:	fa20 f002 	lsr.w	r0, r0, r2
   d6c1e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6c22:	ea40 000e 	orr.w	r0, r0, lr
   d6c26:	fa21 f102 	lsr.w	r1, r1, r2
   d6c2a:	4414      	add	r4, r2
   d6c2c:	e6bd      	b.n	d69aa <__adddf3+0xe6>
   d6c2e:	bf00      	nop

000d6c30 <__aeabi_dmul>:
   d6c30:	b570      	push	{r4, r5, r6, lr}
   d6c32:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c3e:	bf1d      	ittte	ne
   d6c40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c44:	ea94 0f0c 	teqne	r4, ip
   d6c48:	ea95 0f0c 	teqne	r5, ip
   d6c4c:	f000 f8de 	bleq	d6e0c <__aeabi_dmul+0x1dc>
   d6c50:	442c      	add	r4, r5
   d6c52:	ea81 0603 	eor.w	r6, r1, r3
   d6c56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6c5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6c5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6c62:	bf18      	it	ne
   d6c64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6c70:	d038      	beq.n	d6ce4 <__aeabi_dmul+0xb4>
   d6c72:	fba0 ce02 	umull	ip, lr, r0, r2
   d6c76:	f04f 0500 	mov.w	r5, #0
   d6c7a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6c7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6c82:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6c86:	f04f 0600 	mov.w	r6, #0
   d6c8a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6c8e:	f09c 0f00 	teq	ip, #0
   d6c92:	bf18      	it	ne
   d6c94:	f04e 0e01 	orrne.w	lr, lr, #1
   d6c98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6c9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6ca0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6ca4:	d204      	bcs.n	d6cb0 <__aeabi_dmul+0x80>
   d6ca6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6caa:	416d      	adcs	r5, r5
   d6cac:	eb46 0606 	adc.w	r6, r6, r6
   d6cb0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6cb4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6cb8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6cbc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6cc0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6cc4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6cc8:	bf88      	it	hi
   d6cca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6cce:	d81e      	bhi.n	d6d0e <__aeabi_dmul+0xde>
   d6cd0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6cd4:	bf08      	it	eq
   d6cd6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6cda:	f150 0000 	adcs.w	r0, r0, #0
   d6cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ce2:	bd70      	pop	{r4, r5, r6, pc}
   d6ce4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ce8:	ea46 0101 	orr.w	r1, r6, r1
   d6cec:	ea40 0002 	orr.w	r0, r0, r2
   d6cf0:	ea81 0103 	eor.w	r1, r1, r3
   d6cf4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6cf8:	bfc2      	ittt	gt
   d6cfa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6cfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d02:	bd70      	popgt	{r4, r5, r6, pc}
   d6d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d08:	f04f 0e00 	mov.w	lr, #0
   d6d0c:	3c01      	subs	r4, #1
   d6d0e:	f300 80ab 	bgt.w	d6e68 <__aeabi_dmul+0x238>
   d6d12:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6d16:	bfde      	ittt	le
   d6d18:	2000      	movle	r0, #0
   d6d1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6d1e:	bd70      	pople	{r4, r5, r6, pc}
   d6d20:	f1c4 0400 	rsb	r4, r4, #0
   d6d24:	3c20      	subs	r4, #32
   d6d26:	da35      	bge.n	d6d94 <__aeabi_dmul+0x164>
   d6d28:	340c      	adds	r4, #12
   d6d2a:	dc1b      	bgt.n	d6d64 <__aeabi_dmul+0x134>
   d6d2c:	f104 0414 	add.w	r4, r4, #20
   d6d30:	f1c4 0520 	rsb	r5, r4, #32
   d6d34:	fa00 f305 	lsl.w	r3, r0, r5
   d6d38:	fa20 f004 	lsr.w	r0, r0, r4
   d6d3c:	fa01 f205 	lsl.w	r2, r1, r5
   d6d40:	ea40 0002 	orr.w	r0, r0, r2
   d6d44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6d48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6d50:	fa21 f604 	lsr.w	r6, r1, r4
   d6d54:	eb42 0106 	adc.w	r1, r2, r6
   d6d58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6d5c:	bf08      	it	eq
   d6d5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6d62:	bd70      	pop	{r4, r5, r6, pc}
   d6d64:	f1c4 040c 	rsb	r4, r4, #12
   d6d68:	f1c4 0520 	rsb	r5, r4, #32
   d6d6c:	fa00 f304 	lsl.w	r3, r0, r4
   d6d70:	fa20 f005 	lsr.w	r0, r0, r5
   d6d74:	fa01 f204 	lsl.w	r2, r1, r4
   d6d78:	ea40 0002 	orr.w	r0, r0, r2
   d6d7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6d84:	f141 0100 	adc.w	r1, r1, #0
   d6d88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6d8c:	bf08      	it	eq
   d6d8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6d92:	bd70      	pop	{r4, r5, r6, pc}
   d6d94:	f1c4 0520 	rsb	r5, r4, #32
   d6d98:	fa00 f205 	lsl.w	r2, r0, r5
   d6d9c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6da0:	fa20 f304 	lsr.w	r3, r0, r4
   d6da4:	fa01 f205 	lsl.w	r2, r1, r5
   d6da8:	ea43 0302 	orr.w	r3, r3, r2
   d6dac:	fa21 f004 	lsr.w	r0, r1, r4
   d6db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6db4:	fa21 f204 	lsr.w	r2, r1, r4
   d6db8:	ea20 0002 	bic.w	r0, r0, r2
   d6dbc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6dc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6dc4:	bf08      	it	eq
   d6dc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6dca:	bd70      	pop	{r4, r5, r6, pc}
   d6dcc:	f094 0f00 	teq	r4, #0
   d6dd0:	d10f      	bne.n	d6df2 <__aeabi_dmul+0x1c2>
   d6dd2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6dd6:	0040      	lsls	r0, r0, #1
   d6dd8:	eb41 0101 	adc.w	r1, r1, r1
   d6ddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6de0:	bf08      	it	eq
   d6de2:	3c01      	subeq	r4, #1
   d6de4:	d0f7      	beq.n	d6dd6 <__aeabi_dmul+0x1a6>
   d6de6:	ea41 0106 	orr.w	r1, r1, r6
   d6dea:	f095 0f00 	teq	r5, #0
   d6dee:	bf18      	it	ne
   d6df0:	4770      	bxne	lr
   d6df2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6df6:	0052      	lsls	r2, r2, #1
   d6df8:	eb43 0303 	adc.w	r3, r3, r3
   d6dfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6e00:	bf08      	it	eq
   d6e02:	3d01      	subeq	r5, #1
   d6e04:	d0f7      	beq.n	d6df6 <__aeabi_dmul+0x1c6>
   d6e06:	ea43 0306 	orr.w	r3, r3, r6
   d6e0a:	4770      	bx	lr
   d6e0c:	ea94 0f0c 	teq	r4, ip
   d6e10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e14:	bf18      	it	ne
   d6e16:	ea95 0f0c 	teqne	r5, ip
   d6e1a:	d00c      	beq.n	d6e36 <__aeabi_dmul+0x206>
   d6e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e20:	bf18      	it	ne
   d6e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e26:	d1d1      	bne.n	d6dcc <__aeabi_dmul+0x19c>
   d6e28:	ea81 0103 	eor.w	r1, r1, r3
   d6e2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e30:	f04f 0000 	mov.w	r0, #0
   d6e34:	bd70      	pop	{r4, r5, r6, pc}
   d6e36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e3a:	bf06      	itte	eq
   d6e3c:	4610      	moveq	r0, r2
   d6e3e:	4619      	moveq	r1, r3
   d6e40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e44:	d019      	beq.n	d6e7a <__aeabi_dmul+0x24a>
   d6e46:	ea94 0f0c 	teq	r4, ip
   d6e4a:	d102      	bne.n	d6e52 <__aeabi_dmul+0x222>
   d6e4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6e50:	d113      	bne.n	d6e7a <__aeabi_dmul+0x24a>
   d6e52:	ea95 0f0c 	teq	r5, ip
   d6e56:	d105      	bne.n	d6e64 <__aeabi_dmul+0x234>
   d6e58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6e5c:	bf1c      	itt	ne
   d6e5e:	4610      	movne	r0, r2
   d6e60:	4619      	movne	r1, r3
   d6e62:	d10a      	bne.n	d6e7a <__aeabi_dmul+0x24a>
   d6e64:	ea81 0103 	eor.w	r1, r1, r3
   d6e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6e70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e74:	f04f 0000 	mov.w	r0, #0
   d6e78:	bd70      	pop	{r4, r5, r6, pc}
   d6e7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6e7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6e82:	bd70      	pop	{r4, r5, r6, pc}

000d6e84 <__aeabi_ddiv>:
   d6e84:	b570      	push	{r4, r5, r6, lr}
   d6e86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6e8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6e8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6e92:	bf1d      	ittte	ne
   d6e94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6e98:	ea94 0f0c 	teqne	r4, ip
   d6e9c:	ea95 0f0c 	teqne	r5, ip
   d6ea0:	f000 f8a7 	bleq	d6ff2 <__aeabi_ddiv+0x16e>
   d6ea4:	eba4 0405 	sub.w	r4, r4, r5
   d6ea8:	ea81 0e03 	eor.w	lr, r1, r3
   d6eac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6eb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6eb4:	f000 8088 	beq.w	d6fc8 <__aeabi_ddiv+0x144>
   d6eb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ebc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6ec0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6ec4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6ec8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6ecc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6ed0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ed4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6ed8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6edc:	429d      	cmp	r5, r3
   d6ede:	bf08      	it	eq
   d6ee0:	4296      	cmpeq	r6, r2
   d6ee2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6ee6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6eea:	d202      	bcs.n	d6ef2 <__aeabi_ddiv+0x6e>
   d6eec:	085b      	lsrs	r3, r3, #1
   d6eee:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ef2:	1ab6      	subs	r6, r6, r2
   d6ef4:	eb65 0503 	sbc.w	r5, r5, r3
   d6ef8:	085b      	lsrs	r3, r3, #1
   d6efa:	ea4f 0232 	mov.w	r2, r2, rrx
   d6efe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6f02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6f06:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f0e:	bf22      	ittt	cs
   d6f10:	1ab6      	subcs	r6, r6, r2
   d6f12:	4675      	movcs	r5, lr
   d6f14:	ea40 000c 	orrcs.w	r0, r0, ip
   d6f18:	085b      	lsrs	r3, r3, #1
   d6f1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f26:	bf22      	ittt	cs
   d6f28:	1ab6      	subcs	r6, r6, r2
   d6f2a:	4675      	movcs	r5, lr
   d6f2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6f30:	085b      	lsrs	r3, r3, #1
   d6f32:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f36:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f3e:	bf22      	ittt	cs
   d6f40:	1ab6      	subcs	r6, r6, r2
   d6f42:	4675      	movcs	r5, lr
   d6f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6f48:	085b      	lsrs	r3, r3, #1
   d6f4a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f56:	bf22      	ittt	cs
   d6f58:	1ab6      	subcs	r6, r6, r2
   d6f5a:	4675      	movcs	r5, lr
   d6f5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6f60:	ea55 0e06 	orrs.w	lr, r5, r6
   d6f64:	d018      	beq.n	d6f98 <__aeabi_ddiv+0x114>
   d6f66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6f6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6f6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6f72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6f76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6f7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6f7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6f82:	d1c0      	bne.n	d6f06 <__aeabi_ddiv+0x82>
   d6f84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f88:	d10b      	bne.n	d6fa2 <__aeabi_ddiv+0x11e>
   d6f8a:	ea41 0100 	orr.w	r1, r1, r0
   d6f8e:	f04f 0000 	mov.w	r0, #0
   d6f92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6f96:	e7b6      	b.n	d6f06 <__aeabi_ddiv+0x82>
   d6f98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f9c:	bf04      	itt	eq
   d6f9e:	4301      	orreq	r1, r0
   d6fa0:	2000      	moveq	r0, #0
   d6fa2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fa6:	bf88      	it	hi
   d6fa8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6fac:	f63f aeaf 	bhi.w	d6d0e <__aeabi_dmul+0xde>
   d6fb0:	ebb5 0c03 	subs.w	ip, r5, r3
   d6fb4:	bf04      	itt	eq
   d6fb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6fba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6fbe:	f150 0000 	adcs.w	r0, r0, #0
   d6fc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6fc6:	bd70      	pop	{r4, r5, r6, pc}
   d6fc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6fcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6fd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6fd4:	bfc2      	ittt	gt
   d6fd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6fda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6fde:	bd70      	popgt	{r4, r5, r6, pc}
   d6fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fe4:	f04f 0e00 	mov.w	lr, #0
   d6fe8:	3c01      	subs	r4, #1
   d6fea:	e690      	b.n	d6d0e <__aeabi_dmul+0xde>
   d6fec:	ea45 0e06 	orr.w	lr, r5, r6
   d6ff0:	e68d      	b.n	d6d0e <__aeabi_dmul+0xde>
   d6ff2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ff6:	ea94 0f0c 	teq	r4, ip
   d6ffa:	bf08      	it	eq
   d6ffc:	ea95 0f0c 	teqeq	r5, ip
   d7000:	f43f af3b 	beq.w	d6e7a <__aeabi_dmul+0x24a>
   d7004:	ea94 0f0c 	teq	r4, ip
   d7008:	d10a      	bne.n	d7020 <__aeabi_ddiv+0x19c>
   d700a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d700e:	f47f af34 	bne.w	d6e7a <__aeabi_dmul+0x24a>
   d7012:	ea95 0f0c 	teq	r5, ip
   d7016:	f47f af25 	bne.w	d6e64 <__aeabi_dmul+0x234>
   d701a:	4610      	mov	r0, r2
   d701c:	4619      	mov	r1, r3
   d701e:	e72c      	b.n	d6e7a <__aeabi_dmul+0x24a>
   d7020:	ea95 0f0c 	teq	r5, ip
   d7024:	d106      	bne.n	d7034 <__aeabi_ddiv+0x1b0>
   d7026:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d702a:	f43f aefd 	beq.w	d6e28 <__aeabi_dmul+0x1f8>
   d702e:	4610      	mov	r0, r2
   d7030:	4619      	mov	r1, r3
   d7032:	e722      	b.n	d6e7a <__aeabi_dmul+0x24a>
   d7034:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7038:	bf18      	it	ne
   d703a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d703e:	f47f aec5 	bne.w	d6dcc <__aeabi_dmul+0x19c>
   d7042:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7046:	f47f af0d 	bne.w	d6e64 <__aeabi_dmul+0x234>
   d704a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d704e:	f47f aeeb 	bne.w	d6e28 <__aeabi_dmul+0x1f8>
   d7052:	e712      	b.n	d6e7a <__aeabi_dmul+0x24a>

000d7054 <__gedf2>:
   d7054:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7058:	e006      	b.n	d7068 <__cmpdf2+0x4>
   d705a:	bf00      	nop

000d705c <__ledf2>:
   d705c:	f04f 0c01 	mov.w	ip, #1
   d7060:	e002      	b.n	d7068 <__cmpdf2+0x4>
   d7062:	bf00      	nop

000d7064 <__cmpdf2>:
   d7064:	f04f 0c01 	mov.w	ip, #1
   d7068:	f84d cd04 	str.w	ip, [sp, #-4]!
   d706c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7074:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7078:	bf18      	it	ne
   d707a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d707e:	d01b      	beq.n	d70b8 <__cmpdf2+0x54>
   d7080:	b001      	add	sp, #4
   d7082:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7086:	bf0c      	ite	eq
   d7088:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d708c:	ea91 0f03 	teqne	r1, r3
   d7090:	bf02      	ittt	eq
   d7092:	ea90 0f02 	teqeq	r0, r2
   d7096:	2000      	moveq	r0, #0
   d7098:	4770      	bxeq	lr
   d709a:	f110 0f00 	cmn.w	r0, #0
   d709e:	ea91 0f03 	teq	r1, r3
   d70a2:	bf58      	it	pl
   d70a4:	4299      	cmppl	r1, r3
   d70a6:	bf08      	it	eq
   d70a8:	4290      	cmpeq	r0, r2
   d70aa:	bf2c      	ite	cs
   d70ac:	17d8      	asrcs	r0, r3, #31
   d70ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d70b2:	f040 0001 	orr.w	r0, r0, #1
   d70b6:	4770      	bx	lr
   d70b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d70bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70c0:	d102      	bne.n	d70c8 <__cmpdf2+0x64>
   d70c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d70c6:	d107      	bne.n	d70d8 <__cmpdf2+0x74>
   d70c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d70cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70d0:	d1d6      	bne.n	d7080 <__cmpdf2+0x1c>
   d70d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d70d6:	d0d3      	beq.n	d7080 <__cmpdf2+0x1c>
   d70d8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d70dc:	4770      	bx	lr
   d70de:	bf00      	nop

000d70e0 <__aeabi_cdrcmple>:
   d70e0:	4684      	mov	ip, r0
   d70e2:	4610      	mov	r0, r2
   d70e4:	4662      	mov	r2, ip
   d70e6:	468c      	mov	ip, r1
   d70e8:	4619      	mov	r1, r3
   d70ea:	4663      	mov	r3, ip
   d70ec:	e000      	b.n	d70f0 <__aeabi_cdcmpeq>
   d70ee:	bf00      	nop

000d70f0 <__aeabi_cdcmpeq>:
   d70f0:	b501      	push	{r0, lr}
   d70f2:	f7ff ffb7 	bl	d7064 <__cmpdf2>
   d70f6:	2800      	cmp	r0, #0
   d70f8:	bf48      	it	mi
   d70fa:	f110 0f00 	cmnmi.w	r0, #0
   d70fe:	bd01      	pop	{r0, pc}

000d7100 <__aeabi_dcmpeq>:
   d7100:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7104:	f7ff fff4 	bl	d70f0 <__aeabi_cdcmpeq>
   d7108:	bf0c      	ite	eq
   d710a:	2001      	moveq	r0, #1
   d710c:	2000      	movne	r0, #0
   d710e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7112:	bf00      	nop

000d7114 <__aeabi_dcmplt>:
   d7114:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7118:	f7ff ffea 	bl	d70f0 <__aeabi_cdcmpeq>
   d711c:	bf34      	ite	cc
   d711e:	2001      	movcc	r0, #1
   d7120:	2000      	movcs	r0, #0
   d7122:	f85d fb08 	ldr.w	pc, [sp], #8
   d7126:	bf00      	nop

000d7128 <__aeabi_dcmple>:
   d7128:	f84d ed08 	str.w	lr, [sp, #-8]!
   d712c:	f7ff ffe0 	bl	d70f0 <__aeabi_cdcmpeq>
   d7130:	bf94      	ite	ls
   d7132:	2001      	movls	r0, #1
   d7134:	2000      	movhi	r0, #0
   d7136:	f85d fb08 	ldr.w	pc, [sp], #8
   d713a:	bf00      	nop

000d713c <__aeabi_dcmpge>:
   d713c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7140:	f7ff ffce 	bl	d70e0 <__aeabi_cdrcmple>
   d7144:	bf94      	ite	ls
   d7146:	2001      	movls	r0, #1
   d7148:	2000      	movhi	r0, #0
   d714a:	f85d fb08 	ldr.w	pc, [sp], #8
   d714e:	bf00      	nop

000d7150 <__aeabi_dcmpgt>:
   d7150:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7154:	f7ff ffc4 	bl	d70e0 <__aeabi_cdrcmple>
   d7158:	bf34      	ite	cc
   d715a:	2001      	movcc	r0, #1
   d715c:	2000      	movcs	r0, #0
   d715e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7162:	bf00      	nop

000d7164 <__aeabi_d2uiz>:
   d7164:	004a      	lsls	r2, r1, #1
   d7166:	d211      	bcs.n	d718c <__aeabi_d2uiz+0x28>
   d7168:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d716c:	d211      	bcs.n	d7192 <__aeabi_d2uiz+0x2e>
   d716e:	d50d      	bpl.n	d718c <__aeabi_d2uiz+0x28>
   d7170:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7174:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7178:	d40e      	bmi.n	d7198 <__aeabi_d2uiz+0x34>
   d717a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d717e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7182:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7186:	fa23 f002 	lsr.w	r0, r3, r2
   d718a:	4770      	bx	lr
   d718c:	f04f 0000 	mov.w	r0, #0
   d7190:	4770      	bx	lr
   d7192:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7196:	d102      	bne.n	d719e <__aeabi_d2uiz+0x3a>
   d7198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d719c:	4770      	bx	lr
   d719e:	f04f 0000 	mov.w	r0, #0
   d71a2:	4770      	bx	lr

000d71a4 <__aeabi_d2f>:
   d71a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d71a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d71ac:	bf24      	itt	cs
   d71ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d71b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d71b6:	d90d      	bls.n	d71d4 <__aeabi_d2f+0x30>
   d71b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d71bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d71c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d71c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d71c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d71cc:	bf08      	it	eq
   d71ce:	f020 0001 	biceq.w	r0, r0, #1
   d71d2:	4770      	bx	lr
   d71d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d71d8:	d121      	bne.n	d721e <__aeabi_d2f+0x7a>
   d71da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d71de:	bfbc      	itt	lt
   d71e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d71e4:	4770      	bxlt	lr
   d71e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d71ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d71ee:	f1c2 0218 	rsb	r2, r2, #24
   d71f2:	f1c2 0c20 	rsb	ip, r2, #32
   d71f6:	fa10 f30c 	lsls.w	r3, r0, ip
   d71fa:	fa20 f002 	lsr.w	r0, r0, r2
   d71fe:	bf18      	it	ne
   d7200:	f040 0001 	orrne.w	r0, r0, #1
   d7204:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7208:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d720c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7210:	ea40 000c 	orr.w	r0, r0, ip
   d7214:	fa23 f302 	lsr.w	r3, r3, r2
   d7218:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d721c:	e7cc      	b.n	d71b8 <__aeabi_d2f+0x14>
   d721e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7222:	d107      	bne.n	d7234 <__aeabi_d2f+0x90>
   d7224:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7228:	bf1e      	ittt	ne
   d722a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d722e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7232:	4770      	bxne	lr
   d7234:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7238:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d723c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7240:	4770      	bx	lr
   d7242:	bf00      	nop

000d7244 <__aeabi_ldivmod>:
   d7244:	b97b      	cbnz	r3, d7266 <__aeabi_ldivmod+0x22>
   d7246:	b972      	cbnz	r2, d7266 <__aeabi_ldivmod+0x22>
   d7248:	2900      	cmp	r1, #0
   d724a:	bfbe      	ittt	lt
   d724c:	2000      	movlt	r0, #0
   d724e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d7252:	e006      	blt.n	d7262 <__aeabi_ldivmod+0x1e>
   d7254:	bf08      	it	eq
   d7256:	2800      	cmpeq	r0, #0
   d7258:	bf1c      	itt	ne
   d725a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d725e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d7262:	f000 b9bf 	b.w	d75e4 <__aeabi_idiv0>
   d7266:	f1ad 0c08 	sub.w	ip, sp, #8
   d726a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d726e:	2900      	cmp	r1, #0
   d7270:	db09      	blt.n	d7286 <__aeabi_ldivmod+0x42>
   d7272:	2b00      	cmp	r3, #0
   d7274:	db1a      	blt.n	d72ac <__aeabi_ldivmod+0x68>
   d7276:	f000 f853 	bl	d7320 <__udivmoddi4>
   d727a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d727e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7282:	b004      	add	sp, #16
   d7284:	4770      	bx	lr
   d7286:	4240      	negs	r0, r0
   d7288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d728c:	2b00      	cmp	r3, #0
   d728e:	db1b      	blt.n	d72c8 <__aeabi_ldivmod+0x84>
   d7290:	f000 f846 	bl	d7320 <__udivmoddi4>
   d7294:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d729c:	b004      	add	sp, #16
   d729e:	4240      	negs	r0, r0
   d72a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d72a4:	4252      	negs	r2, r2
   d72a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d72aa:	4770      	bx	lr
   d72ac:	4252      	negs	r2, r2
   d72ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d72b2:	f000 f835 	bl	d7320 <__udivmoddi4>
   d72b6:	f8dd e004 	ldr.w	lr, [sp, #4]
   d72ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d72be:	b004      	add	sp, #16
   d72c0:	4240      	negs	r0, r0
   d72c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d72c6:	4770      	bx	lr
   d72c8:	4252      	negs	r2, r2
   d72ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d72ce:	f000 f827 	bl	d7320 <__udivmoddi4>
   d72d2:	f8dd e004 	ldr.w	lr, [sp, #4]
   d72d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d72da:	b004      	add	sp, #16
   d72dc:	4252      	negs	r2, r2
   d72de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d72e2:	4770      	bx	lr

000d72e4 <__aeabi_d2ulz>:
   d72e4:	b5d0      	push	{r4, r6, r7, lr}
   d72e6:	4b0c      	ldr	r3, [pc, #48]	; (d7318 <__aeabi_d2ulz+0x34>)
   d72e8:	2200      	movs	r2, #0
   d72ea:	4606      	mov	r6, r0
   d72ec:	460f      	mov	r7, r1
   d72ee:	f7ff fc9f 	bl	d6c30 <__aeabi_dmul>
   d72f2:	f7ff ff37 	bl	d7164 <__aeabi_d2uiz>
   d72f6:	4604      	mov	r4, r0
   d72f8:	f7ff fc20 	bl	d6b3c <__aeabi_ui2d>
   d72fc:	4b07      	ldr	r3, [pc, #28]	; (d731c <__aeabi_d2ulz+0x38>)
   d72fe:	2200      	movs	r2, #0
   d7300:	f7ff fc96 	bl	d6c30 <__aeabi_dmul>
   d7304:	4602      	mov	r2, r0
   d7306:	460b      	mov	r3, r1
   d7308:	4630      	mov	r0, r6
   d730a:	4639      	mov	r1, r7
   d730c:	f7ff fad8 	bl	d68c0 <__aeabi_dsub>
   d7310:	f7ff ff28 	bl	d7164 <__aeabi_d2uiz>
   d7314:	4621      	mov	r1, r4
   d7316:	bdd0      	pop	{r4, r6, r7, pc}
   d7318:	3df00000 	.word	0x3df00000
   d731c:	41f00000 	.word	0x41f00000

000d7320 <__udivmoddi4>:
   d7320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7324:	9d08      	ldr	r5, [sp, #32]
   d7326:	4604      	mov	r4, r0
   d7328:	468c      	mov	ip, r1
   d732a:	2b00      	cmp	r3, #0
   d732c:	f040 8083 	bne.w	d7436 <__udivmoddi4+0x116>
   d7330:	428a      	cmp	r2, r1
   d7332:	4617      	mov	r7, r2
   d7334:	d947      	bls.n	d73c6 <__udivmoddi4+0xa6>
   d7336:	fab2 f282 	clz	r2, r2
   d733a:	b142      	cbz	r2, d734e <__udivmoddi4+0x2e>
   d733c:	f1c2 0020 	rsb	r0, r2, #32
   d7340:	fa24 f000 	lsr.w	r0, r4, r0
   d7344:	4091      	lsls	r1, r2
   d7346:	4097      	lsls	r7, r2
   d7348:	ea40 0c01 	orr.w	ip, r0, r1
   d734c:	4094      	lsls	r4, r2
   d734e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7352:	0c23      	lsrs	r3, r4, #16
   d7354:	fbbc f6f8 	udiv	r6, ip, r8
   d7358:	fa1f fe87 	uxth.w	lr, r7
   d735c:	fb08 c116 	mls	r1, r8, r6, ip
   d7360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7364:	fb06 f10e 	mul.w	r1, r6, lr
   d7368:	4299      	cmp	r1, r3
   d736a:	d909      	bls.n	d7380 <__udivmoddi4+0x60>
   d736c:	18fb      	adds	r3, r7, r3
   d736e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d7372:	f080 8119 	bcs.w	d75a8 <__udivmoddi4+0x288>
   d7376:	4299      	cmp	r1, r3
   d7378:	f240 8116 	bls.w	d75a8 <__udivmoddi4+0x288>
   d737c:	3e02      	subs	r6, #2
   d737e:	443b      	add	r3, r7
   d7380:	1a5b      	subs	r3, r3, r1
   d7382:	b2a4      	uxth	r4, r4
   d7384:	fbb3 f0f8 	udiv	r0, r3, r8
   d7388:	fb08 3310 	mls	r3, r8, r0, r3
   d738c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d7390:	fb00 fe0e 	mul.w	lr, r0, lr
   d7394:	45a6      	cmp	lr, r4
   d7396:	d909      	bls.n	d73ac <__udivmoddi4+0x8c>
   d7398:	193c      	adds	r4, r7, r4
   d739a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d739e:	f080 8105 	bcs.w	d75ac <__udivmoddi4+0x28c>
   d73a2:	45a6      	cmp	lr, r4
   d73a4:	f240 8102 	bls.w	d75ac <__udivmoddi4+0x28c>
   d73a8:	3802      	subs	r0, #2
   d73aa:	443c      	add	r4, r7
   d73ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d73b0:	eba4 040e 	sub.w	r4, r4, lr
   d73b4:	2600      	movs	r6, #0
   d73b6:	b11d      	cbz	r5, d73c0 <__udivmoddi4+0xa0>
   d73b8:	40d4      	lsrs	r4, r2
   d73ba:	2300      	movs	r3, #0
   d73bc:	e9c5 4300 	strd	r4, r3, [r5]
   d73c0:	4631      	mov	r1, r6
   d73c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d73c6:	b902      	cbnz	r2, d73ca <__udivmoddi4+0xaa>
   d73c8:	deff      	udf	#255	; 0xff
   d73ca:	fab2 f282 	clz	r2, r2
   d73ce:	2a00      	cmp	r2, #0
   d73d0:	d150      	bne.n	d7474 <__udivmoddi4+0x154>
   d73d2:	1bcb      	subs	r3, r1, r7
   d73d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d73d8:	fa1f f887 	uxth.w	r8, r7
   d73dc:	2601      	movs	r6, #1
   d73de:	fbb3 fcfe 	udiv	ip, r3, lr
   d73e2:	0c21      	lsrs	r1, r4, #16
   d73e4:	fb0e 331c 	mls	r3, lr, ip, r3
   d73e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d73ec:	fb08 f30c 	mul.w	r3, r8, ip
   d73f0:	428b      	cmp	r3, r1
   d73f2:	d907      	bls.n	d7404 <__udivmoddi4+0xe4>
   d73f4:	1879      	adds	r1, r7, r1
   d73f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d73fa:	d202      	bcs.n	d7402 <__udivmoddi4+0xe2>
   d73fc:	428b      	cmp	r3, r1
   d73fe:	f200 80e9 	bhi.w	d75d4 <__udivmoddi4+0x2b4>
   d7402:	4684      	mov	ip, r0
   d7404:	1ac9      	subs	r1, r1, r3
   d7406:	b2a3      	uxth	r3, r4
   d7408:	fbb1 f0fe 	udiv	r0, r1, lr
   d740c:	fb0e 1110 	mls	r1, lr, r0, r1
   d7410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7414:	fb08 f800 	mul.w	r8, r8, r0
   d7418:	45a0      	cmp	r8, r4
   d741a:	d907      	bls.n	d742c <__udivmoddi4+0x10c>
   d741c:	193c      	adds	r4, r7, r4
   d741e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7422:	d202      	bcs.n	d742a <__udivmoddi4+0x10a>
   d7424:	45a0      	cmp	r8, r4
   d7426:	f200 80d9 	bhi.w	d75dc <__udivmoddi4+0x2bc>
   d742a:	4618      	mov	r0, r3
   d742c:	eba4 0408 	sub.w	r4, r4, r8
   d7430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7434:	e7bf      	b.n	d73b6 <__udivmoddi4+0x96>
   d7436:	428b      	cmp	r3, r1
   d7438:	d909      	bls.n	d744e <__udivmoddi4+0x12e>
   d743a:	2d00      	cmp	r5, #0
   d743c:	f000 80b1 	beq.w	d75a2 <__udivmoddi4+0x282>
   d7440:	2600      	movs	r6, #0
   d7442:	e9c5 0100 	strd	r0, r1, [r5]
   d7446:	4630      	mov	r0, r6
   d7448:	4631      	mov	r1, r6
   d744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d744e:	fab3 f683 	clz	r6, r3
   d7452:	2e00      	cmp	r6, #0
   d7454:	d14a      	bne.n	d74ec <__udivmoddi4+0x1cc>
   d7456:	428b      	cmp	r3, r1
   d7458:	d302      	bcc.n	d7460 <__udivmoddi4+0x140>
   d745a:	4282      	cmp	r2, r0
   d745c:	f200 80b8 	bhi.w	d75d0 <__udivmoddi4+0x2b0>
   d7460:	1a84      	subs	r4, r0, r2
   d7462:	eb61 0103 	sbc.w	r1, r1, r3
   d7466:	2001      	movs	r0, #1
   d7468:	468c      	mov	ip, r1
   d746a:	2d00      	cmp	r5, #0
   d746c:	d0a8      	beq.n	d73c0 <__udivmoddi4+0xa0>
   d746e:	e9c5 4c00 	strd	r4, ip, [r5]
   d7472:	e7a5      	b.n	d73c0 <__udivmoddi4+0xa0>
   d7474:	f1c2 0320 	rsb	r3, r2, #32
   d7478:	fa20 f603 	lsr.w	r6, r0, r3
   d747c:	4097      	lsls	r7, r2
   d747e:	fa01 f002 	lsl.w	r0, r1, r2
   d7482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7486:	40d9      	lsrs	r1, r3
   d7488:	4330      	orrs	r0, r6
   d748a:	0c03      	lsrs	r3, r0, #16
   d748c:	fbb1 f6fe 	udiv	r6, r1, lr
   d7490:	fa1f f887 	uxth.w	r8, r7
   d7494:	fb0e 1116 	mls	r1, lr, r6, r1
   d7498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d749c:	fb06 f108 	mul.w	r1, r6, r8
   d74a0:	4299      	cmp	r1, r3
   d74a2:	fa04 f402 	lsl.w	r4, r4, r2
   d74a6:	d909      	bls.n	d74bc <__udivmoddi4+0x19c>
   d74a8:	18fb      	adds	r3, r7, r3
   d74aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d74ae:	f080 808d 	bcs.w	d75cc <__udivmoddi4+0x2ac>
   d74b2:	4299      	cmp	r1, r3
   d74b4:	f240 808a 	bls.w	d75cc <__udivmoddi4+0x2ac>
   d74b8:	3e02      	subs	r6, #2
   d74ba:	443b      	add	r3, r7
   d74bc:	1a5b      	subs	r3, r3, r1
   d74be:	b281      	uxth	r1, r0
   d74c0:	fbb3 f0fe 	udiv	r0, r3, lr
   d74c4:	fb0e 3310 	mls	r3, lr, r0, r3
   d74c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d74cc:	fb00 f308 	mul.w	r3, r0, r8
   d74d0:	428b      	cmp	r3, r1
   d74d2:	d907      	bls.n	d74e4 <__udivmoddi4+0x1c4>
   d74d4:	1879      	adds	r1, r7, r1
   d74d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d74da:	d273      	bcs.n	d75c4 <__udivmoddi4+0x2a4>
   d74dc:	428b      	cmp	r3, r1
   d74de:	d971      	bls.n	d75c4 <__udivmoddi4+0x2a4>
   d74e0:	3802      	subs	r0, #2
   d74e2:	4439      	add	r1, r7
   d74e4:	1acb      	subs	r3, r1, r3
   d74e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d74ea:	e778      	b.n	d73de <__udivmoddi4+0xbe>
   d74ec:	f1c6 0c20 	rsb	ip, r6, #32
   d74f0:	fa03 f406 	lsl.w	r4, r3, r6
   d74f4:	fa22 f30c 	lsr.w	r3, r2, ip
   d74f8:	431c      	orrs	r4, r3
   d74fa:	fa20 f70c 	lsr.w	r7, r0, ip
   d74fe:	fa01 f306 	lsl.w	r3, r1, r6
   d7502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d7506:	fa21 f10c 	lsr.w	r1, r1, ip
   d750a:	431f      	orrs	r7, r3
   d750c:	0c3b      	lsrs	r3, r7, #16
   d750e:	fbb1 f9fe 	udiv	r9, r1, lr
   d7512:	fa1f f884 	uxth.w	r8, r4
   d7516:	fb0e 1119 	mls	r1, lr, r9, r1
   d751a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d751e:	fb09 fa08 	mul.w	sl, r9, r8
   d7522:	458a      	cmp	sl, r1
   d7524:	fa02 f206 	lsl.w	r2, r2, r6
   d7528:	fa00 f306 	lsl.w	r3, r0, r6
   d752c:	d908      	bls.n	d7540 <__udivmoddi4+0x220>
   d752e:	1861      	adds	r1, r4, r1
   d7530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7534:	d248      	bcs.n	d75c8 <__udivmoddi4+0x2a8>
   d7536:	458a      	cmp	sl, r1
   d7538:	d946      	bls.n	d75c8 <__udivmoddi4+0x2a8>
   d753a:	f1a9 0902 	sub.w	r9, r9, #2
   d753e:	4421      	add	r1, r4
   d7540:	eba1 010a 	sub.w	r1, r1, sl
   d7544:	b2bf      	uxth	r7, r7
   d7546:	fbb1 f0fe 	udiv	r0, r1, lr
   d754a:	fb0e 1110 	mls	r1, lr, r0, r1
   d754e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d7552:	fb00 f808 	mul.w	r8, r0, r8
   d7556:	45b8      	cmp	r8, r7
   d7558:	d907      	bls.n	d756a <__udivmoddi4+0x24a>
   d755a:	19e7      	adds	r7, r4, r7
   d755c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d7560:	d22e      	bcs.n	d75c0 <__udivmoddi4+0x2a0>
   d7562:	45b8      	cmp	r8, r7
   d7564:	d92c      	bls.n	d75c0 <__udivmoddi4+0x2a0>
   d7566:	3802      	subs	r0, #2
   d7568:	4427      	add	r7, r4
   d756a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d756e:	eba7 0708 	sub.w	r7, r7, r8
   d7572:	fba0 8902 	umull	r8, r9, r0, r2
   d7576:	454f      	cmp	r7, r9
   d7578:	46c6      	mov	lr, r8
   d757a:	4649      	mov	r1, r9
   d757c:	d31a      	bcc.n	d75b4 <__udivmoddi4+0x294>
   d757e:	d017      	beq.n	d75b0 <__udivmoddi4+0x290>
   d7580:	b15d      	cbz	r5, d759a <__udivmoddi4+0x27a>
   d7582:	ebb3 020e 	subs.w	r2, r3, lr
   d7586:	eb67 0701 	sbc.w	r7, r7, r1
   d758a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d758e:	40f2      	lsrs	r2, r6
   d7590:	ea4c 0202 	orr.w	r2, ip, r2
   d7594:	40f7      	lsrs	r7, r6
   d7596:	e9c5 2700 	strd	r2, r7, [r5]
   d759a:	2600      	movs	r6, #0
   d759c:	4631      	mov	r1, r6
   d759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75a2:	462e      	mov	r6, r5
   d75a4:	4628      	mov	r0, r5
   d75a6:	e70b      	b.n	d73c0 <__udivmoddi4+0xa0>
   d75a8:	4606      	mov	r6, r0
   d75aa:	e6e9      	b.n	d7380 <__udivmoddi4+0x60>
   d75ac:	4618      	mov	r0, r3
   d75ae:	e6fd      	b.n	d73ac <__udivmoddi4+0x8c>
   d75b0:	4543      	cmp	r3, r8
   d75b2:	d2e5      	bcs.n	d7580 <__udivmoddi4+0x260>
   d75b4:	ebb8 0e02 	subs.w	lr, r8, r2
   d75b8:	eb69 0104 	sbc.w	r1, r9, r4
   d75bc:	3801      	subs	r0, #1
   d75be:	e7df      	b.n	d7580 <__udivmoddi4+0x260>
   d75c0:	4608      	mov	r0, r1
   d75c2:	e7d2      	b.n	d756a <__udivmoddi4+0x24a>
   d75c4:	4660      	mov	r0, ip
   d75c6:	e78d      	b.n	d74e4 <__udivmoddi4+0x1c4>
   d75c8:	4681      	mov	r9, r0
   d75ca:	e7b9      	b.n	d7540 <__udivmoddi4+0x220>
   d75cc:	4666      	mov	r6, ip
   d75ce:	e775      	b.n	d74bc <__udivmoddi4+0x19c>
   d75d0:	4630      	mov	r0, r6
   d75d2:	e74a      	b.n	d746a <__udivmoddi4+0x14a>
   d75d4:	f1ac 0c02 	sub.w	ip, ip, #2
   d75d8:	4439      	add	r1, r7
   d75da:	e713      	b.n	d7404 <__udivmoddi4+0xe4>
   d75dc:	3802      	subs	r0, #2
   d75de:	443c      	add	r4, r7
   d75e0:	e724      	b.n	d742c <__udivmoddi4+0x10c>
   d75e2:	bf00      	nop

000d75e4 <__aeabi_idiv0>:
   d75e4:	4770      	bx	lr
   d75e6:	bf00      	nop

000d75e8 <atof>:
   d75e8:	2100      	movs	r1, #0
   d75ea:	f000 bfc7 	b.w	d857c <strtod>

000d75ee <atoi>:
   d75ee:	220a      	movs	r2, #10
   d75f0:	2100      	movs	r1, #0
   d75f2:	f001 b849 	b.w	d8688 <strtol>
	...

000d75f8 <__cxa_atexit>:
   d75f8:	b510      	push	{r4, lr}
   d75fa:	4c05      	ldr	r4, [pc, #20]	; (d7610 <__cxa_atexit+0x18>)
   d75fc:	4613      	mov	r3, r2
   d75fe:	b12c      	cbz	r4, d760c <__cxa_atexit+0x14>
   d7600:	460a      	mov	r2, r1
   d7602:	4601      	mov	r1, r0
   d7604:	2002      	movs	r0, #2
   d7606:	f3af 8000 	nop.w
   d760a:	bd10      	pop	{r4, pc}
   d760c:	4620      	mov	r0, r4
   d760e:	e7fc      	b.n	d760a <__cxa_atexit+0x12>
   d7610:	00000000 	.word	0x00000000

000d7614 <localtime_r>:
   d7614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7618:	4607      	mov	r7, r0
   d761a:	9101      	str	r1, [sp, #4]
   d761c:	f001 fe9a 	bl	d9354 <__gettzinfo>
   d7620:	9901      	ldr	r1, [sp, #4]
   d7622:	4680      	mov	r8, r0
   d7624:	4638      	mov	r0, r7
   d7626:	f001 fe99 	bl	d935c <gmtime_r>
   d762a:	6943      	ldr	r3, [r0, #20]
   d762c:	079a      	lsls	r2, r3, #30
   d762e:	4604      	mov	r4, r0
   d7630:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d7634:	d105      	bne.n	d7642 <localtime_r+0x2e>
   d7636:	2264      	movs	r2, #100	; 0x64
   d7638:	fb96 f3f2 	sdiv	r3, r6, r2
   d763c:	fb02 6313 	mls	r3, r2, r3, r6
   d7640:	bb7b      	cbnz	r3, d76a2 <localtime_r+0x8e>
   d7642:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d7646:	fb96 f5f3 	sdiv	r5, r6, r3
   d764a:	fb03 6515 	mls	r5, r3, r5, r6
   d764e:	fab5 f585 	clz	r5, r5
   d7652:	096d      	lsrs	r5, r5, #5
   d7654:	4b68      	ldr	r3, [pc, #416]	; (d77f8 <localtime_r+0x1e4>)
   d7656:	2230      	movs	r2, #48	; 0x30
   d7658:	fb02 3505 	mla	r5, r2, r5, r3
   d765c:	f001 f94c 	bl	d88f8 <__tz_lock>
   d7660:	f001 f956 	bl	d8910 <_tzset_unlocked>
   d7664:	4b65      	ldr	r3, [pc, #404]	; (d77fc <localtime_r+0x1e8>)
   d7666:	681b      	ldr	r3, [r3, #0]
   d7668:	b353      	cbz	r3, d76c0 <localtime_r+0xac>
   d766a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d766e:	42b3      	cmp	r3, r6
   d7670:	d119      	bne.n	d76a6 <localtime_r+0x92>
   d7672:	f8d8 1000 	ldr.w	r1, [r8]
   d7676:	e9d7 6700 	ldrd	r6, r7, [r7]
   d767a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   d767e:	b9d1      	cbnz	r1, d76b6 <localtime_r+0xa2>
   d7680:	4296      	cmp	r6, r2
   d7682:	eb77 0303 	sbcs.w	r3, r7, r3
   d7686:	da23      	bge.n	d76d0 <localtime_r+0xbc>
   d7688:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d768c:	4296      	cmp	r6, r2
   d768e:	eb77 0303 	sbcs.w	r3, r7, r3
   d7692:	bfb4      	ite	lt
   d7694:	2301      	movlt	r3, #1
   d7696:	2300      	movge	r3, #0
   d7698:	6223      	str	r3, [r4, #32]
   d769a:	db1b      	blt.n	d76d4 <localtime_r+0xc0>
   d769c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   d76a0:	e01a      	b.n	d76d8 <localtime_r+0xc4>
   d76a2:	2501      	movs	r5, #1
   d76a4:	e7d6      	b.n	d7654 <localtime_r+0x40>
   d76a6:	4630      	mov	r0, r6
   d76a8:	f001 f87e 	bl	d87a8 <__tzcalc_limits>
   d76ac:	2800      	cmp	r0, #0
   d76ae:	d1e0      	bne.n	d7672 <localtime_r+0x5e>
   d76b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d76b4:	e004      	b.n	d76c0 <localtime_r+0xac>
   d76b6:	4296      	cmp	r6, r2
   d76b8:	eb77 0303 	sbcs.w	r3, r7, r3
   d76bc:	da02      	bge.n	d76c4 <localtime_r+0xb0>
   d76be:	2300      	movs	r3, #0
   d76c0:	6223      	str	r3, [r4, #32]
   d76c2:	e7eb      	b.n	d769c <localtime_r+0x88>
   d76c4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d76c8:	4296      	cmp	r6, r2
   d76ca:	eb77 0303 	sbcs.w	r3, r7, r3
   d76ce:	daf6      	bge.n	d76be <localtime_r+0xaa>
   d76d0:	2301      	movs	r3, #1
   d76d2:	6223      	str	r3, [r4, #32]
   d76d4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   d76d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d76dc:	203c      	movs	r0, #60	; 0x3c
   d76de:	fb91 f6f3 	sdiv	r6, r1, r3
   d76e2:	fb03 1316 	mls	r3, r3, r6, r1
   d76e6:	6861      	ldr	r1, [r4, #4]
   d76e8:	fb93 f2f0 	sdiv	r2, r3, r0
   d76ec:	fb00 3012 	mls	r0, r0, r2, r3
   d76f0:	6823      	ldr	r3, [r4, #0]
   d76f2:	1a89      	subs	r1, r1, r2
   d76f4:	68a2      	ldr	r2, [r4, #8]
   d76f6:	6061      	str	r1, [r4, #4]
   d76f8:	1a1b      	subs	r3, r3, r0
   d76fa:	1b92      	subs	r2, r2, r6
   d76fc:	2b3b      	cmp	r3, #59	; 0x3b
   d76fe:	6023      	str	r3, [r4, #0]
   d7700:	60a2      	str	r2, [r4, #8]
   d7702:	dd35      	ble.n	d7770 <localtime_r+0x15c>
   d7704:	3101      	adds	r1, #1
   d7706:	6061      	str	r1, [r4, #4]
   d7708:	3b3c      	subs	r3, #60	; 0x3c
   d770a:	6023      	str	r3, [r4, #0]
   d770c:	6863      	ldr	r3, [r4, #4]
   d770e:	2b3b      	cmp	r3, #59	; 0x3b
   d7710:	dd34      	ble.n	d777c <localtime_r+0x168>
   d7712:	3201      	adds	r2, #1
   d7714:	60a2      	str	r2, [r4, #8]
   d7716:	3b3c      	subs	r3, #60	; 0x3c
   d7718:	6063      	str	r3, [r4, #4]
   d771a:	68a3      	ldr	r3, [r4, #8]
   d771c:	2b17      	cmp	r3, #23
   d771e:	dd33      	ble.n	d7788 <localtime_r+0x174>
   d7720:	69e2      	ldr	r2, [r4, #28]
   d7722:	3201      	adds	r2, #1
   d7724:	61e2      	str	r2, [r4, #28]
   d7726:	69a2      	ldr	r2, [r4, #24]
   d7728:	3201      	adds	r2, #1
   d772a:	2a06      	cmp	r2, #6
   d772c:	bfc8      	it	gt
   d772e:	2200      	movgt	r2, #0
   d7730:	61a2      	str	r2, [r4, #24]
   d7732:	68e2      	ldr	r2, [r4, #12]
   d7734:	3b18      	subs	r3, #24
   d7736:	3201      	adds	r2, #1
   d7738:	60a3      	str	r3, [r4, #8]
   d773a:	6923      	ldr	r3, [r4, #16]
   d773c:	60e2      	str	r2, [r4, #12]
   d773e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7742:	428a      	cmp	r2, r1
   d7744:	dd0e      	ble.n	d7764 <localtime_r+0x150>
   d7746:	2b0b      	cmp	r3, #11
   d7748:	eba2 0201 	sub.w	r2, r2, r1
   d774c:	60e2      	str	r2, [r4, #12]
   d774e:	f103 0201 	add.w	r2, r3, #1
   d7752:	bf09      	itett	eq
   d7754:	6963      	ldreq	r3, [r4, #20]
   d7756:	6122      	strne	r2, [r4, #16]
   d7758:	2200      	moveq	r2, #0
   d775a:	3301      	addeq	r3, #1
   d775c:	bf02      	ittt	eq
   d775e:	6122      	streq	r2, [r4, #16]
   d7760:	6163      	streq	r3, [r4, #20]
   d7762:	61e2      	streq	r2, [r4, #28]
   d7764:	f001 f8ce 	bl	d8904 <__tz_unlock>
   d7768:	4620      	mov	r0, r4
   d776a:	b002      	add	sp, #8
   d776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7770:	2b00      	cmp	r3, #0
   d7772:	dacb      	bge.n	d770c <localtime_r+0xf8>
   d7774:	3901      	subs	r1, #1
   d7776:	6061      	str	r1, [r4, #4]
   d7778:	333c      	adds	r3, #60	; 0x3c
   d777a:	e7c6      	b.n	d770a <localtime_r+0xf6>
   d777c:	2b00      	cmp	r3, #0
   d777e:	dacc      	bge.n	d771a <localtime_r+0x106>
   d7780:	3a01      	subs	r2, #1
   d7782:	60a2      	str	r2, [r4, #8]
   d7784:	333c      	adds	r3, #60	; 0x3c
   d7786:	e7c7      	b.n	d7718 <localtime_r+0x104>
   d7788:	2b00      	cmp	r3, #0
   d778a:	daeb      	bge.n	d7764 <localtime_r+0x150>
   d778c:	69e2      	ldr	r2, [r4, #28]
   d778e:	3a01      	subs	r2, #1
   d7790:	61e2      	str	r2, [r4, #28]
   d7792:	69a2      	ldr	r2, [r4, #24]
   d7794:	3a01      	subs	r2, #1
   d7796:	bf48      	it	mi
   d7798:	2206      	movmi	r2, #6
   d779a:	61a2      	str	r2, [r4, #24]
   d779c:	68e2      	ldr	r2, [r4, #12]
   d779e:	3318      	adds	r3, #24
   d77a0:	3a01      	subs	r2, #1
   d77a2:	60e2      	str	r2, [r4, #12]
   d77a4:	60a3      	str	r3, [r4, #8]
   d77a6:	2a00      	cmp	r2, #0
   d77a8:	d1dc      	bne.n	d7764 <localtime_r+0x150>
   d77aa:	6923      	ldr	r3, [r4, #16]
   d77ac:	3b01      	subs	r3, #1
   d77ae:	d405      	bmi.n	d77bc <localtime_r+0x1a8>
   d77b0:	6123      	str	r3, [r4, #16]
   d77b2:	6923      	ldr	r3, [r4, #16]
   d77b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d77b8:	60e3      	str	r3, [r4, #12]
   d77ba:	e7d3      	b.n	d7764 <localtime_r+0x150>
   d77bc:	230b      	movs	r3, #11
   d77be:	6123      	str	r3, [r4, #16]
   d77c0:	6963      	ldr	r3, [r4, #20]
   d77c2:	1e5a      	subs	r2, r3, #1
   d77c4:	6162      	str	r2, [r4, #20]
   d77c6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   d77ca:	0793      	lsls	r3, r2, #30
   d77cc:	d105      	bne.n	d77da <localtime_r+0x1c6>
   d77ce:	2164      	movs	r1, #100	; 0x64
   d77d0:	fb92 f3f1 	sdiv	r3, r2, r1
   d77d4:	fb01 2313 	mls	r3, r1, r3, r2
   d77d8:	b963      	cbnz	r3, d77f4 <localtime_r+0x1e0>
   d77da:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d77de:	fb92 f3f1 	sdiv	r3, r2, r1
   d77e2:	fb01 2313 	mls	r3, r1, r3, r2
   d77e6:	fab3 f383 	clz	r3, r3
   d77ea:	095b      	lsrs	r3, r3, #5
   d77ec:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d77f0:	61e3      	str	r3, [r4, #28]
   d77f2:	e7de      	b.n	d77b2 <localtime_r+0x19e>
   d77f4:	2301      	movs	r3, #1
   d77f6:	e7f9      	b.n	d77ec <localtime_r+0x1d8>
   d77f8:	000da34c 	.word	0x000da34c
   d77fc:	2003e7e0 	.word	0x2003e7e0

000d7800 <memcpy>:
   d7800:	440a      	add	r2, r1
   d7802:	4291      	cmp	r1, r2
   d7804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7808:	d100      	bne.n	d780c <memcpy+0xc>
   d780a:	4770      	bx	lr
   d780c:	b510      	push	{r4, lr}
   d780e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7812:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7816:	4291      	cmp	r1, r2
   d7818:	d1f9      	bne.n	d780e <memcpy+0xe>
   d781a:	bd10      	pop	{r4, pc}

000d781c <memset>:
   d781c:	4402      	add	r2, r0
   d781e:	4603      	mov	r3, r0
   d7820:	4293      	cmp	r3, r2
   d7822:	d100      	bne.n	d7826 <memset+0xa>
   d7824:	4770      	bx	lr
   d7826:	f803 1b01 	strb.w	r1, [r3], #1
   d782a:	e7f9      	b.n	d7820 <memset+0x4>

000d782c <srand>:
   d782c:	b538      	push	{r3, r4, r5, lr}
   d782e:	4b0d      	ldr	r3, [pc, #52]	; (d7864 <srand+0x38>)
   d7830:	681d      	ldr	r5, [r3, #0]
   d7832:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7834:	4604      	mov	r4, r0
   d7836:	b97b      	cbnz	r3, d7858 <srand+0x2c>
   d7838:	2018      	movs	r0, #24
   d783a:	f7fd fe5b 	bl	d54f4 <malloc>
   d783e:	4a0a      	ldr	r2, [pc, #40]	; (d7868 <srand+0x3c>)
   d7840:	4b0a      	ldr	r3, [pc, #40]	; (d786c <srand+0x40>)
   d7842:	63a8      	str	r0, [r5, #56]	; 0x38
   d7844:	e9c0 2300 	strd	r2, r3, [r0]
   d7848:	4b09      	ldr	r3, [pc, #36]	; (d7870 <srand+0x44>)
   d784a:	6083      	str	r3, [r0, #8]
   d784c:	230b      	movs	r3, #11
   d784e:	8183      	strh	r3, [r0, #12]
   d7850:	2201      	movs	r2, #1
   d7852:	2300      	movs	r3, #0
   d7854:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7858:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d785a:	2200      	movs	r2, #0
   d785c:	611c      	str	r4, [r3, #16]
   d785e:	615a      	str	r2, [r3, #20]
   d7860:	bd38      	pop	{r3, r4, r5, pc}
   d7862:	bf00      	nop
   d7864:	2003e22c 	.word	0x2003e22c
   d7868:	abcd330e 	.word	0xabcd330e
   d786c:	e66d1234 	.word	0xe66d1234
   d7870:	0005deec 	.word	0x0005deec

000d7874 <strcmp>:
   d7874:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7878:	f811 3b01 	ldrb.w	r3, [r1], #1
   d787c:	2a01      	cmp	r2, #1
   d787e:	bf28      	it	cs
   d7880:	429a      	cmpcs	r2, r3
   d7882:	d0f7      	beq.n	d7874 <strcmp>
   d7884:	1ad0      	subs	r0, r2, r3
   d7886:	4770      	bx	lr

000d7888 <strcpy>:
   d7888:	4603      	mov	r3, r0
   d788a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d788e:	f803 2b01 	strb.w	r2, [r3], #1
   d7892:	2a00      	cmp	r2, #0
   d7894:	d1f9      	bne.n	d788a <strcpy+0x2>
   d7896:	4770      	bx	lr

000d7898 <strdup>:
   d7898:	4b02      	ldr	r3, [pc, #8]	; (d78a4 <strdup+0xc>)
   d789a:	4601      	mov	r1, r0
   d789c:	6818      	ldr	r0, [r3, #0]
   d789e:	f000 b803 	b.w	d78a8 <_strdup_r>
   d78a2:	bf00      	nop
   d78a4:	2003e22c 	.word	0x2003e22c

000d78a8 <_strdup_r>:
   d78a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78aa:	4604      	mov	r4, r0
   d78ac:	4608      	mov	r0, r1
   d78ae:	460d      	mov	r5, r1
   d78b0:	f000 f80f 	bl	d78d2 <strlen>
   d78b4:	1c42      	adds	r2, r0, #1
   d78b6:	4611      	mov	r1, r2
   d78b8:	4620      	mov	r0, r4
   d78ba:	9201      	str	r2, [sp, #4]
   d78bc:	f7fd fe4a 	bl	d5554 <_malloc_r>
   d78c0:	4604      	mov	r4, r0
   d78c2:	b118      	cbz	r0, d78cc <_strdup_r+0x24>
   d78c4:	9a01      	ldr	r2, [sp, #4]
   d78c6:	4629      	mov	r1, r5
   d78c8:	f7ff ff9a 	bl	d7800 <memcpy>
   d78cc:	4620      	mov	r0, r4
   d78ce:	b003      	add	sp, #12
   d78d0:	bd30      	pop	{r4, r5, pc}

000d78d2 <strlen>:
   d78d2:	4603      	mov	r3, r0
   d78d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78d8:	2a00      	cmp	r2, #0
   d78da:	d1fb      	bne.n	d78d4 <strlen+0x2>
   d78dc:	1a18      	subs	r0, r3, r0
   d78de:	3801      	subs	r0, #1
   d78e0:	4770      	bx	lr

000d78e2 <strncmp>:
   d78e2:	b510      	push	{r4, lr}
   d78e4:	b16a      	cbz	r2, d7902 <strncmp+0x20>
   d78e6:	3901      	subs	r1, #1
   d78e8:	1884      	adds	r4, r0, r2
   d78ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   d78ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d78f2:	4293      	cmp	r3, r2
   d78f4:	d103      	bne.n	d78fe <strncmp+0x1c>
   d78f6:	42a0      	cmp	r0, r4
   d78f8:	d001      	beq.n	d78fe <strncmp+0x1c>
   d78fa:	2b00      	cmp	r3, #0
   d78fc:	d1f5      	bne.n	d78ea <strncmp+0x8>
   d78fe:	1a98      	subs	r0, r3, r2
   d7900:	bd10      	pop	{r4, pc}
   d7902:	4610      	mov	r0, r2
   d7904:	e7fc      	b.n	d7900 <strncmp+0x1e>

000d7906 <strncpy>:
   d7906:	b510      	push	{r4, lr}
   d7908:	3901      	subs	r1, #1
   d790a:	4603      	mov	r3, r0
   d790c:	b132      	cbz	r2, d791c <strncpy+0x16>
   d790e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7912:	f803 4b01 	strb.w	r4, [r3], #1
   d7916:	3a01      	subs	r2, #1
   d7918:	2c00      	cmp	r4, #0
   d791a:	d1f7      	bne.n	d790c <strncpy+0x6>
   d791c:	441a      	add	r2, r3
   d791e:	2100      	movs	r1, #0
   d7920:	4293      	cmp	r3, r2
   d7922:	d100      	bne.n	d7926 <strncpy+0x20>
   d7924:	bd10      	pop	{r4, pc}
   d7926:	f803 1b01 	strb.w	r1, [r3], #1
   d792a:	e7f9      	b.n	d7920 <strncpy+0x1a>

000d792c <sulp>:
   d792c:	b570      	push	{r4, r5, r6, lr}
   d792e:	4604      	mov	r4, r0
   d7930:	460d      	mov	r5, r1
   d7932:	ec45 4b10 	vmov	d0, r4, r5
   d7936:	4616      	mov	r6, r2
   d7938:	f002 f8d2 	bl	d9ae0 <__ulp>
   d793c:	ec51 0b10 	vmov	r0, r1, d0
   d7940:	b17e      	cbz	r6, d7962 <sulp+0x36>
   d7942:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7946:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d794a:	2b00      	cmp	r3, #0
   d794c:	dd09      	ble.n	d7962 <sulp+0x36>
   d794e:	051b      	lsls	r3, r3, #20
   d7950:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7954:	2400      	movs	r4, #0
   d7956:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d795a:	4622      	mov	r2, r4
   d795c:	462b      	mov	r3, r5
   d795e:	f7ff f967 	bl	d6c30 <__aeabi_dmul>
   d7962:	bd70      	pop	{r4, r5, r6, pc}
   d7964:	0000      	movs	r0, r0
	...

000d7968 <_strtod_l>:
   d7968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d796c:	b0a3      	sub	sp, #140	; 0x8c
   d796e:	461f      	mov	r7, r3
   d7970:	2300      	movs	r3, #0
   d7972:	931e      	str	r3, [sp, #120]	; 0x78
   d7974:	4ba4      	ldr	r3, [pc, #656]	; (d7c08 <_strtod_l+0x2a0>)
   d7976:	9219      	str	r2, [sp, #100]	; 0x64
   d7978:	681b      	ldr	r3, [r3, #0]
   d797a:	9307      	str	r3, [sp, #28]
   d797c:	4604      	mov	r4, r0
   d797e:	4618      	mov	r0, r3
   d7980:	4688      	mov	r8, r1
   d7982:	f7ff ffa6 	bl	d78d2 <strlen>
   d7986:	f04f 0a00 	mov.w	sl, #0
   d798a:	4605      	mov	r5, r0
   d798c:	f04f 0b00 	mov.w	fp, #0
   d7990:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7996:	781a      	ldrb	r2, [r3, #0]
   d7998:	2a2b      	cmp	r2, #43	; 0x2b
   d799a:	d04c      	beq.n	d7a36 <_strtod_l+0xce>
   d799c:	d839      	bhi.n	d7a12 <_strtod_l+0xaa>
   d799e:	2a0d      	cmp	r2, #13
   d79a0:	d832      	bhi.n	d7a08 <_strtod_l+0xa0>
   d79a2:	2a08      	cmp	r2, #8
   d79a4:	d832      	bhi.n	d7a0c <_strtod_l+0xa4>
   d79a6:	2a00      	cmp	r2, #0
   d79a8:	d03c      	beq.n	d7a24 <_strtod_l+0xbc>
   d79aa:	2300      	movs	r3, #0
   d79ac:	930e      	str	r3, [sp, #56]	; 0x38
   d79ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d79b0:	7833      	ldrb	r3, [r6, #0]
   d79b2:	2b30      	cmp	r3, #48	; 0x30
   d79b4:	f040 80b4 	bne.w	d7b20 <_strtod_l+0x1b8>
   d79b8:	7873      	ldrb	r3, [r6, #1]
   d79ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d79be:	2b58      	cmp	r3, #88	; 0x58
   d79c0:	d16c      	bne.n	d7a9c <_strtod_l+0x134>
   d79c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d79c4:	9301      	str	r3, [sp, #4]
   d79c6:	ab1e      	add	r3, sp, #120	; 0x78
   d79c8:	9702      	str	r7, [sp, #8]
   d79ca:	9300      	str	r3, [sp, #0]
   d79cc:	4a8f      	ldr	r2, [pc, #572]	; (d7c0c <_strtod_l+0x2a4>)
   d79ce:	ab1f      	add	r3, sp, #124	; 0x7c
   d79d0:	a91d      	add	r1, sp, #116	; 0x74
   d79d2:	4620      	mov	r0, r4
   d79d4:	f001 f986 	bl	d8ce4 <__gethex>
   d79d8:	f010 0707 	ands.w	r7, r0, #7
   d79dc:	4605      	mov	r5, r0
   d79de:	d005      	beq.n	d79ec <_strtod_l+0x84>
   d79e0:	2f06      	cmp	r7, #6
   d79e2:	d12a      	bne.n	d7a3a <_strtod_l+0xd2>
   d79e4:	3601      	adds	r6, #1
   d79e6:	2300      	movs	r3, #0
   d79e8:	961d      	str	r6, [sp, #116]	; 0x74
   d79ea:	930e      	str	r3, [sp, #56]	; 0x38
   d79ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d79ee:	2b00      	cmp	r3, #0
   d79f0:	f040 8596 	bne.w	d8520 <_strtod_l+0xbb8>
   d79f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d79f6:	b1db      	cbz	r3, d7a30 <_strtod_l+0xc8>
   d79f8:	4652      	mov	r2, sl
   d79fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d79fe:	ec43 2b10 	vmov	d0, r2, r3
   d7a02:	b023      	add	sp, #140	; 0x8c
   d7a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a08:	2a20      	cmp	r2, #32
   d7a0a:	d1ce      	bne.n	d79aa <_strtod_l+0x42>
   d7a0c:	3301      	adds	r3, #1
   d7a0e:	931d      	str	r3, [sp, #116]	; 0x74
   d7a10:	e7c0      	b.n	d7994 <_strtod_l+0x2c>
   d7a12:	2a2d      	cmp	r2, #45	; 0x2d
   d7a14:	d1c9      	bne.n	d79aa <_strtod_l+0x42>
   d7a16:	2201      	movs	r2, #1
   d7a18:	920e      	str	r2, [sp, #56]	; 0x38
   d7a1a:	1c5a      	adds	r2, r3, #1
   d7a1c:	921d      	str	r2, [sp, #116]	; 0x74
   d7a1e:	785b      	ldrb	r3, [r3, #1]
   d7a20:	2b00      	cmp	r3, #0
   d7a22:	d1c4      	bne.n	d79ae <_strtod_l+0x46>
   d7a24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7a26:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7a2a:	2b00      	cmp	r3, #0
   d7a2c:	f040 8576 	bne.w	d851c <_strtod_l+0xbb4>
   d7a30:	4652      	mov	r2, sl
   d7a32:	465b      	mov	r3, fp
   d7a34:	e7e3      	b.n	d79fe <_strtod_l+0x96>
   d7a36:	2200      	movs	r2, #0
   d7a38:	e7ee      	b.n	d7a18 <_strtod_l+0xb0>
   d7a3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7a3c:	b13a      	cbz	r2, d7a4e <_strtod_l+0xe6>
   d7a3e:	2135      	movs	r1, #53	; 0x35
   d7a40:	a820      	add	r0, sp, #128	; 0x80
   d7a42:	f002 f94c 	bl	d9cde <__copybits>
   d7a46:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7a48:	4620      	mov	r0, r4
   d7a4a:	f001 fd81 	bl	d9550 <_Bfree>
   d7a4e:	3f01      	subs	r7, #1
   d7a50:	2f05      	cmp	r7, #5
   d7a52:	d807      	bhi.n	d7a64 <_strtod_l+0xfc>
   d7a54:	e8df f007 	tbb	[pc, r7]
   d7a58:	1d180b0e 	.word	0x1d180b0e
   d7a5c:	030e      	.short	0x030e
   d7a5e:	f04f 0b00 	mov.w	fp, #0
   d7a62:	46da      	mov	sl, fp
   d7a64:	0728      	lsls	r0, r5, #28
   d7a66:	d5c1      	bpl.n	d79ec <_strtod_l+0x84>
   d7a68:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7a6c:	e7be      	b.n	d79ec <_strtod_l+0x84>
   d7a6e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d7a72:	e7f7      	b.n	d7a64 <_strtod_l+0xfc>
   d7a74:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d7a78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d7a7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d7a7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7a82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7a86:	e7ed      	b.n	d7a64 <_strtod_l+0xfc>
   d7a88:	f8df b184 	ldr.w	fp, [pc, #388]	; d7c10 <_strtod_l+0x2a8>
   d7a8c:	f04f 0a00 	mov.w	sl, #0
   d7a90:	e7e8      	b.n	d7a64 <_strtod_l+0xfc>
   d7a92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7a96:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7a9a:	e7e3      	b.n	d7a64 <_strtod_l+0xfc>
   d7a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a9e:	1c5a      	adds	r2, r3, #1
   d7aa0:	921d      	str	r2, [sp, #116]	; 0x74
   d7aa2:	785b      	ldrb	r3, [r3, #1]
   d7aa4:	2b30      	cmp	r3, #48	; 0x30
   d7aa6:	d0f9      	beq.n	d7a9c <_strtod_l+0x134>
   d7aa8:	2b00      	cmp	r3, #0
   d7aaa:	d09f      	beq.n	d79ec <_strtod_l+0x84>
   d7aac:	2301      	movs	r3, #1
   d7aae:	f04f 0900 	mov.w	r9, #0
   d7ab2:	9304      	str	r3, [sp, #16]
   d7ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7ab6:	930a      	str	r3, [sp, #40]	; 0x28
   d7ab8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d7abc:	464f      	mov	r7, r9
   d7abe:	220a      	movs	r2, #10
   d7ac0:	981d      	ldr	r0, [sp, #116]	; 0x74
   d7ac2:	7806      	ldrb	r6, [r0, #0]
   d7ac4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7ac8:	b2d9      	uxtb	r1, r3
   d7aca:	2909      	cmp	r1, #9
   d7acc:	d92a      	bls.n	d7b24 <_strtod_l+0x1bc>
   d7ace:	9907      	ldr	r1, [sp, #28]
   d7ad0:	462a      	mov	r2, r5
   d7ad2:	f7ff ff06 	bl	d78e2 <strncmp>
   d7ad6:	b398      	cbz	r0, d7b40 <_strtod_l+0x1d8>
   d7ad8:	2000      	movs	r0, #0
   d7ada:	4633      	mov	r3, r6
   d7adc:	463d      	mov	r5, r7
   d7ade:	9007      	str	r0, [sp, #28]
   d7ae0:	4602      	mov	r2, r0
   d7ae2:	2b65      	cmp	r3, #101	; 0x65
   d7ae4:	d001      	beq.n	d7aea <_strtod_l+0x182>
   d7ae6:	2b45      	cmp	r3, #69	; 0x45
   d7ae8:	d118      	bne.n	d7b1c <_strtod_l+0x1b4>
   d7aea:	b91d      	cbnz	r5, d7af4 <_strtod_l+0x18c>
   d7aec:	9b04      	ldr	r3, [sp, #16]
   d7aee:	4303      	orrs	r3, r0
   d7af0:	d098      	beq.n	d7a24 <_strtod_l+0xbc>
   d7af2:	2500      	movs	r5, #0
   d7af4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d7af8:	f108 0301 	add.w	r3, r8, #1
   d7afc:	931d      	str	r3, [sp, #116]	; 0x74
   d7afe:	f898 3001 	ldrb.w	r3, [r8, #1]
   d7b02:	2b2b      	cmp	r3, #43	; 0x2b
   d7b04:	d075      	beq.n	d7bf2 <_strtod_l+0x28a>
   d7b06:	2b2d      	cmp	r3, #45	; 0x2d
   d7b08:	d07b      	beq.n	d7c02 <_strtod_l+0x29a>
   d7b0a:	f04f 0c00 	mov.w	ip, #0
   d7b0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7b12:	2909      	cmp	r1, #9
   d7b14:	f240 8082 	bls.w	d7c1c <_strtod_l+0x2b4>
   d7b18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7b1c:	2600      	movs	r6, #0
   d7b1e:	e09d      	b.n	d7c5c <_strtod_l+0x2f4>
   d7b20:	2300      	movs	r3, #0
   d7b22:	e7c4      	b.n	d7aae <_strtod_l+0x146>
   d7b24:	2f08      	cmp	r7, #8
   d7b26:	bfd8      	it	le
   d7b28:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d7b2a:	f100 0001 	add.w	r0, r0, #1
   d7b2e:	bfda      	itte	le
   d7b30:	fb02 3301 	mlale	r3, r2, r1, r3
   d7b34:	9309      	strle	r3, [sp, #36]	; 0x24
   d7b36:	fb02 3909 	mlagt	r9, r2, r9, r3
   d7b3a:	3701      	adds	r7, #1
   d7b3c:	901d      	str	r0, [sp, #116]	; 0x74
   d7b3e:	e7bf      	b.n	d7ac0 <_strtod_l+0x158>
   d7b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7b42:	195a      	adds	r2, r3, r5
   d7b44:	921d      	str	r2, [sp, #116]	; 0x74
   d7b46:	5d5b      	ldrb	r3, [r3, r5]
   d7b48:	2f00      	cmp	r7, #0
   d7b4a:	d037      	beq.n	d7bbc <_strtod_l+0x254>
   d7b4c:	9007      	str	r0, [sp, #28]
   d7b4e:	463d      	mov	r5, r7
   d7b50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d7b54:	2a09      	cmp	r2, #9
   d7b56:	d912      	bls.n	d7b7e <_strtod_l+0x216>
   d7b58:	2201      	movs	r2, #1
   d7b5a:	e7c2      	b.n	d7ae2 <_strtod_l+0x17a>
   d7b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7b5e:	1c5a      	adds	r2, r3, #1
   d7b60:	921d      	str	r2, [sp, #116]	; 0x74
   d7b62:	785b      	ldrb	r3, [r3, #1]
   d7b64:	3001      	adds	r0, #1
   d7b66:	2b30      	cmp	r3, #48	; 0x30
   d7b68:	d0f8      	beq.n	d7b5c <_strtod_l+0x1f4>
   d7b6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7b6e:	2a08      	cmp	r2, #8
   d7b70:	f200 84db 	bhi.w	d852a <_strtod_l+0xbc2>
   d7b74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d7b76:	9007      	str	r0, [sp, #28]
   d7b78:	2000      	movs	r0, #0
   d7b7a:	920a      	str	r2, [sp, #40]	; 0x28
   d7b7c:	4605      	mov	r5, r0
   d7b7e:	3b30      	subs	r3, #48	; 0x30
   d7b80:	f100 0201 	add.w	r2, r0, #1
   d7b84:	d014      	beq.n	d7bb0 <_strtod_l+0x248>
   d7b86:	9907      	ldr	r1, [sp, #28]
   d7b88:	4411      	add	r1, r2
   d7b8a:	9107      	str	r1, [sp, #28]
   d7b8c:	462a      	mov	r2, r5
   d7b8e:	eb00 0e05 	add.w	lr, r0, r5
   d7b92:	210a      	movs	r1, #10
   d7b94:	4572      	cmp	r2, lr
   d7b96:	d113      	bne.n	d7bc0 <_strtod_l+0x258>
   d7b98:	182a      	adds	r2, r5, r0
   d7b9a:	2a08      	cmp	r2, #8
   d7b9c:	f105 0501 	add.w	r5, r5, #1
   d7ba0:	4405      	add	r5, r0
   d7ba2:	dc1c      	bgt.n	d7bde <_strtod_l+0x276>
   d7ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7ba6:	220a      	movs	r2, #10
   d7ba8:	fb02 3301 	mla	r3, r2, r1, r3
   d7bac:	9309      	str	r3, [sp, #36]	; 0x24
   d7bae:	2200      	movs	r2, #0
   d7bb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7bb2:	1c59      	adds	r1, r3, #1
   d7bb4:	911d      	str	r1, [sp, #116]	; 0x74
   d7bb6:	785b      	ldrb	r3, [r3, #1]
   d7bb8:	4610      	mov	r0, r2
   d7bba:	e7c9      	b.n	d7b50 <_strtod_l+0x1e8>
   d7bbc:	4638      	mov	r0, r7
   d7bbe:	e7d2      	b.n	d7b66 <_strtod_l+0x1fe>
   d7bc0:	2a08      	cmp	r2, #8
   d7bc2:	dc04      	bgt.n	d7bce <_strtod_l+0x266>
   d7bc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7bc6:	434e      	muls	r6, r1
   d7bc8:	9609      	str	r6, [sp, #36]	; 0x24
   d7bca:	3201      	adds	r2, #1
   d7bcc:	e7e2      	b.n	d7b94 <_strtod_l+0x22c>
   d7bce:	f102 0c01 	add.w	ip, r2, #1
   d7bd2:	f1bc 0f10 	cmp.w	ip, #16
   d7bd6:	bfd8      	it	le
   d7bd8:	fb01 f909 	mulle.w	r9, r1, r9
   d7bdc:	e7f5      	b.n	d7bca <_strtod_l+0x262>
   d7bde:	2d10      	cmp	r5, #16
   d7be0:	bfdc      	itt	le
   d7be2:	220a      	movle	r2, #10
   d7be4:	fb02 3909 	mlale	r9, r2, r9, r3
   d7be8:	e7e1      	b.n	d7bae <_strtod_l+0x246>
   d7bea:	2300      	movs	r3, #0
   d7bec:	9307      	str	r3, [sp, #28]
   d7bee:	2201      	movs	r2, #1
   d7bf0:	e77c      	b.n	d7aec <_strtod_l+0x184>
   d7bf2:	f04f 0c00 	mov.w	ip, #0
   d7bf6:	f108 0302 	add.w	r3, r8, #2
   d7bfa:	931d      	str	r3, [sp, #116]	; 0x74
   d7bfc:	f898 3002 	ldrb.w	r3, [r8, #2]
   d7c00:	e785      	b.n	d7b0e <_strtod_l+0x1a6>
   d7c02:	f04f 0c01 	mov.w	ip, #1
   d7c06:	e7f6      	b.n	d7bf6 <_strtod_l+0x28e>
   d7c08:	000da548 	.word	0x000da548
   d7c0c:	000da3b8 	.word	0x000da3b8
   d7c10:	7ff00000 	.word	0x7ff00000
   d7c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c16:	1c59      	adds	r1, r3, #1
   d7c18:	911d      	str	r1, [sp, #116]	; 0x74
   d7c1a:	785b      	ldrb	r3, [r3, #1]
   d7c1c:	2b30      	cmp	r3, #48	; 0x30
   d7c1e:	d0f9      	beq.n	d7c14 <_strtod_l+0x2ac>
   d7c20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d7c24:	2908      	cmp	r1, #8
   d7c26:	f63f af79 	bhi.w	d7b1c <_strtod_l+0x1b4>
   d7c2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7c2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c30:	9308      	str	r3, [sp, #32]
   d7c32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c34:	1c59      	adds	r1, r3, #1
   d7c36:	911d      	str	r1, [sp, #116]	; 0x74
   d7c38:	785b      	ldrb	r3, [r3, #1]
   d7c3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7c3e:	2e09      	cmp	r6, #9
   d7c40:	d937      	bls.n	d7cb2 <_strtod_l+0x34a>
   d7c42:	9e08      	ldr	r6, [sp, #32]
   d7c44:	1b89      	subs	r1, r1, r6
   d7c46:	2908      	cmp	r1, #8
   d7c48:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d7c4c:	dc02      	bgt.n	d7c54 <_strtod_l+0x2ec>
   d7c4e:	4576      	cmp	r6, lr
   d7c50:	bfa8      	it	ge
   d7c52:	4676      	movge	r6, lr
   d7c54:	f1bc 0f00 	cmp.w	ip, #0
   d7c58:	d000      	beq.n	d7c5c <_strtod_l+0x2f4>
   d7c5a:	4276      	negs	r6, r6
   d7c5c:	2d00      	cmp	r5, #0
   d7c5e:	d14f      	bne.n	d7d00 <_strtod_l+0x398>
   d7c60:	9904      	ldr	r1, [sp, #16]
   d7c62:	4301      	orrs	r1, r0
   d7c64:	f47f aec2 	bne.w	d79ec <_strtod_l+0x84>
   d7c68:	2a00      	cmp	r2, #0
   d7c6a:	f47f aedb 	bne.w	d7a24 <_strtod_l+0xbc>
   d7c6e:	2b69      	cmp	r3, #105	; 0x69
   d7c70:	d027      	beq.n	d7cc2 <_strtod_l+0x35a>
   d7c72:	dc24      	bgt.n	d7cbe <_strtod_l+0x356>
   d7c74:	2b49      	cmp	r3, #73	; 0x49
   d7c76:	d024      	beq.n	d7cc2 <_strtod_l+0x35a>
   d7c78:	2b4e      	cmp	r3, #78	; 0x4e
   d7c7a:	f47f aed3 	bne.w	d7a24 <_strtod_l+0xbc>
   d7c7e:	499e      	ldr	r1, [pc, #632]	; (d7ef8 <_strtod_l+0x590>)
   d7c80:	a81d      	add	r0, sp, #116	; 0x74
   d7c82:	f001 fa75 	bl	d9170 <__match>
   d7c86:	2800      	cmp	r0, #0
   d7c88:	f43f aecc 	beq.w	d7a24 <_strtod_l+0xbc>
   d7c8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c8e:	781b      	ldrb	r3, [r3, #0]
   d7c90:	2b28      	cmp	r3, #40	; 0x28
   d7c92:	d12d      	bne.n	d7cf0 <_strtod_l+0x388>
   d7c94:	4999      	ldr	r1, [pc, #612]	; (d7efc <_strtod_l+0x594>)
   d7c96:	aa20      	add	r2, sp, #128	; 0x80
   d7c98:	a81d      	add	r0, sp, #116	; 0x74
   d7c9a:	f001 fa7d 	bl	d9198 <__hexnan>
   d7c9e:	2805      	cmp	r0, #5
   d7ca0:	d126      	bne.n	d7cf0 <_strtod_l+0x388>
   d7ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d7ca4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d7ca8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7cac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7cb0:	e69c      	b.n	d79ec <_strtod_l+0x84>
   d7cb2:	210a      	movs	r1, #10
   d7cb4:	fb01 3e0e 	mla	lr, r1, lr, r3
   d7cb8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7cbc:	e7b9      	b.n	d7c32 <_strtod_l+0x2ca>
   d7cbe:	2b6e      	cmp	r3, #110	; 0x6e
   d7cc0:	e7db      	b.n	d7c7a <_strtod_l+0x312>
   d7cc2:	498f      	ldr	r1, [pc, #572]	; (d7f00 <_strtod_l+0x598>)
   d7cc4:	a81d      	add	r0, sp, #116	; 0x74
   d7cc6:	f001 fa53 	bl	d9170 <__match>
   d7cca:	2800      	cmp	r0, #0
   d7ccc:	f43f aeaa 	beq.w	d7a24 <_strtod_l+0xbc>
   d7cd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7cd2:	498c      	ldr	r1, [pc, #560]	; (d7f04 <_strtod_l+0x59c>)
   d7cd4:	3b01      	subs	r3, #1
   d7cd6:	a81d      	add	r0, sp, #116	; 0x74
   d7cd8:	931d      	str	r3, [sp, #116]	; 0x74
   d7cda:	f001 fa49 	bl	d9170 <__match>
   d7cde:	b910      	cbnz	r0, d7ce6 <_strtod_l+0x37e>
   d7ce0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7ce2:	3301      	adds	r3, #1
   d7ce4:	931d      	str	r3, [sp, #116]	; 0x74
   d7ce6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d7f14 <_strtod_l+0x5ac>
   d7cea:	f04f 0a00 	mov.w	sl, #0
   d7cee:	e67d      	b.n	d79ec <_strtod_l+0x84>
   d7cf0:	4885      	ldr	r0, [pc, #532]	; (d7f08 <_strtod_l+0x5a0>)
   d7cf2:	f7fe fdd9 	bl	d68a8 <nan>
   d7cf6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d7cfa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7cfe:	e675      	b.n	d79ec <_strtod_l+0x84>
   d7d00:	9b07      	ldr	r3, [sp, #28]
   d7d02:	9809      	ldr	r0, [sp, #36]	; 0x24
   d7d04:	1af3      	subs	r3, r6, r3
   d7d06:	2f00      	cmp	r7, #0
   d7d08:	bf08      	it	eq
   d7d0a:	462f      	moveq	r7, r5
   d7d0c:	2d10      	cmp	r5, #16
   d7d0e:	9308      	str	r3, [sp, #32]
   d7d10:	46a8      	mov	r8, r5
   d7d12:	bfa8      	it	ge
   d7d14:	f04f 0810 	movge.w	r8, #16
   d7d18:	f7fe ff10 	bl	d6b3c <__aeabi_ui2d>
   d7d1c:	2d09      	cmp	r5, #9
   d7d1e:	4682      	mov	sl, r0
   d7d20:	468b      	mov	fp, r1
   d7d22:	dd13      	ble.n	d7d4c <_strtod_l+0x3e4>
   d7d24:	4b79      	ldr	r3, [pc, #484]	; (d7f0c <_strtod_l+0x5a4>)
   d7d26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d7d2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d7d2e:	f7fe ff7f 	bl	d6c30 <__aeabi_dmul>
   d7d32:	4682      	mov	sl, r0
   d7d34:	4648      	mov	r0, r9
   d7d36:	468b      	mov	fp, r1
   d7d38:	f7fe ff00 	bl	d6b3c <__aeabi_ui2d>
   d7d3c:	4602      	mov	r2, r0
   d7d3e:	460b      	mov	r3, r1
   d7d40:	4650      	mov	r0, sl
   d7d42:	4659      	mov	r1, fp
   d7d44:	f7fe fdbe 	bl	d68c4 <__adddf3>
   d7d48:	4682      	mov	sl, r0
   d7d4a:	468b      	mov	fp, r1
   d7d4c:	2d0f      	cmp	r5, #15
   d7d4e:	dc38      	bgt.n	d7dc2 <_strtod_l+0x45a>
   d7d50:	9b08      	ldr	r3, [sp, #32]
   d7d52:	2b00      	cmp	r3, #0
   d7d54:	f43f ae4a 	beq.w	d79ec <_strtod_l+0x84>
   d7d58:	dd24      	ble.n	d7da4 <_strtod_l+0x43c>
   d7d5a:	2b16      	cmp	r3, #22
   d7d5c:	dc0b      	bgt.n	d7d76 <_strtod_l+0x40e>
   d7d5e:	4d6b      	ldr	r5, [pc, #428]	; (d7f0c <_strtod_l+0x5a4>)
   d7d60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d7d64:	e9d5 0100 	ldrd	r0, r1, [r5]
   d7d68:	4652      	mov	r2, sl
   d7d6a:	465b      	mov	r3, fp
   d7d6c:	f7fe ff60 	bl	d6c30 <__aeabi_dmul>
   d7d70:	4682      	mov	sl, r0
   d7d72:	468b      	mov	fp, r1
   d7d74:	e63a      	b.n	d79ec <_strtod_l+0x84>
   d7d76:	9a08      	ldr	r2, [sp, #32]
   d7d78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7d7c:	4293      	cmp	r3, r2
   d7d7e:	db20      	blt.n	d7dc2 <_strtod_l+0x45a>
   d7d80:	4c62      	ldr	r4, [pc, #392]	; (d7f0c <_strtod_l+0x5a4>)
   d7d82:	f1c5 050f 	rsb	r5, r5, #15
   d7d86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7d8a:	4652      	mov	r2, sl
   d7d8c:	465b      	mov	r3, fp
   d7d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7d92:	f7fe ff4d 	bl	d6c30 <__aeabi_dmul>
   d7d96:	9b08      	ldr	r3, [sp, #32]
   d7d98:	1b5d      	subs	r5, r3, r5
   d7d9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7da2:	e7e3      	b.n	d7d6c <_strtod_l+0x404>
   d7da4:	9b08      	ldr	r3, [sp, #32]
   d7da6:	3316      	adds	r3, #22
   d7da8:	db0b      	blt.n	d7dc2 <_strtod_l+0x45a>
   d7daa:	9b07      	ldr	r3, [sp, #28]
   d7dac:	4a57      	ldr	r2, [pc, #348]	; (d7f0c <_strtod_l+0x5a4>)
   d7dae:	1b9e      	subs	r6, r3, r6
   d7db0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d7db4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7db8:	4650      	mov	r0, sl
   d7dba:	4659      	mov	r1, fp
   d7dbc:	f7ff f862 	bl	d6e84 <__aeabi_ddiv>
   d7dc0:	e7d6      	b.n	d7d70 <_strtod_l+0x408>
   d7dc2:	9b08      	ldr	r3, [sp, #32]
   d7dc4:	eba5 0808 	sub.w	r8, r5, r8
   d7dc8:	4498      	add	r8, r3
   d7dca:	f1b8 0f00 	cmp.w	r8, #0
   d7dce:	dd71      	ble.n	d7eb4 <_strtod_l+0x54c>
   d7dd0:	f018 030f 	ands.w	r3, r8, #15
   d7dd4:	d00a      	beq.n	d7dec <_strtod_l+0x484>
   d7dd6:	494d      	ldr	r1, [pc, #308]	; (d7f0c <_strtod_l+0x5a4>)
   d7dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d7ddc:	4652      	mov	r2, sl
   d7dde:	465b      	mov	r3, fp
   d7de0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7de4:	f7fe ff24 	bl	d6c30 <__aeabi_dmul>
   d7de8:	4682      	mov	sl, r0
   d7dea:	468b      	mov	fp, r1
   d7dec:	f038 080f 	bics.w	r8, r8, #15
   d7df0:	d04d      	beq.n	d7e8e <_strtod_l+0x526>
   d7df2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d7df6:	dd22      	ble.n	d7e3e <_strtod_l+0x4d6>
   d7df8:	2500      	movs	r5, #0
   d7dfa:	462e      	mov	r6, r5
   d7dfc:	9509      	str	r5, [sp, #36]	; 0x24
   d7dfe:	9507      	str	r5, [sp, #28]
   d7e00:	2322      	movs	r3, #34	; 0x22
   d7e02:	f8df b110 	ldr.w	fp, [pc, #272]	; d7f14 <_strtod_l+0x5ac>
   d7e06:	6023      	str	r3, [r4, #0]
   d7e08:	f04f 0a00 	mov.w	sl, #0
   d7e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7e0e:	2b00      	cmp	r3, #0
   d7e10:	f43f adec 	beq.w	d79ec <_strtod_l+0x84>
   d7e14:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7e16:	4620      	mov	r0, r4
   d7e18:	f001 fb9a 	bl	d9550 <_Bfree>
   d7e1c:	9907      	ldr	r1, [sp, #28]
   d7e1e:	4620      	mov	r0, r4
   d7e20:	f001 fb96 	bl	d9550 <_Bfree>
   d7e24:	4631      	mov	r1, r6
   d7e26:	4620      	mov	r0, r4
   d7e28:	f001 fb92 	bl	d9550 <_Bfree>
   d7e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7e2e:	4620      	mov	r0, r4
   d7e30:	f001 fb8e 	bl	d9550 <_Bfree>
   d7e34:	4629      	mov	r1, r5
   d7e36:	4620      	mov	r0, r4
   d7e38:	f001 fb8a 	bl	d9550 <_Bfree>
   d7e3c:	e5d6      	b.n	d79ec <_strtod_l+0x84>
   d7e3e:	2300      	movs	r3, #0
   d7e40:	ea4f 1828 	mov.w	r8, r8, asr #4
   d7e44:	4650      	mov	r0, sl
   d7e46:	4659      	mov	r1, fp
   d7e48:	4699      	mov	r9, r3
   d7e4a:	f1b8 0f01 	cmp.w	r8, #1
   d7e4e:	dc21      	bgt.n	d7e94 <_strtod_l+0x52c>
   d7e50:	b10b      	cbz	r3, d7e56 <_strtod_l+0x4ee>
   d7e52:	4682      	mov	sl, r0
   d7e54:	468b      	mov	fp, r1
   d7e56:	4b2e      	ldr	r3, [pc, #184]	; (d7f10 <_strtod_l+0x5a8>)
   d7e58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7e5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d7e60:	4652      	mov	r2, sl
   d7e62:	465b      	mov	r3, fp
   d7e64:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7e68:	f7fe fee2 	bl	d6c30 <__aeabi_dmul>
   d7e6c:	4b29      	ldr	r3, [pc, #164]	; (d7f14 <_strtod_l+0x5ac>)
   d7e6e:	460a      	mov	r2, r1
   d7e70:	400b      	ands	r3, r1
   d7e72:	4929      	ldr	r1, [pc, #164]	; (d7f18 <_strtod_l+0x5b0>)
   d7e74:	428b      	cmp	r3, r1
   d7e76:	4682      	mov	sl, r0
   d7e78:	d8be      	bhi.n	d7df8 <_strtod_l+0x490>
   d7e7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7e7e:	428b      	cmp	r3, r1
   d7e80:	bf86      	itte	hi
   d7e82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d7f1c <_strtod_l+0x5b4>
   d7e86:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7e8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7e8e:	2300      	movs	r3, #0
   d7e90:	9304      	str	r3, [sp, #16]
   d7e92:	e081      	b.n	d7f98 <_strtod_l+0x630>
   d7e94:	f018 0f01 	tst.w	r8, #1
   d7e98:	d007      	beq.n	d7eaa <_strtod_l+0x542>
   d7e9a:	4b1d      	ldr	r3, [pc, #116]	; (d7f10 <_strtod_l+0x5a8>)
   d7e9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ea4:	f7fe fec4 	bl	d6c30 <__aeabi_dmul>
   d7ea8:	2301      	movs	r3, #1
   d7eaa:	f109 0901 	add.w	r9, r9, #1
   d7eae:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7eb2:	e7ca      	b.n	d7e4a <_strtod_l+0x4e2>
   d7eb4:	d0eb      	beq.n	d7e8e <_strtod_l+0x526>
   d7eb6:	f1c8 0800 	rsb	r8, r8, #0
   d7eba:	f018 020f 	ands.w	r2, r8, #15
   d7ebe:	d00a      	beq.n	d7ed6 <_strtod_l+0x56e>
   d7ec0:	4b12      	ldr	r3, [pc, #72]	; (d7f0c <_strtod_l+0x5a4>)
   d7ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7ec6:	4650      	mov	r0, sl
   d7ec8:	4659      	mov	r1, fp
   d7eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ece:	f7fe ffd9 	bl	d6e84 <__aeabi_ddiv>
   d7ed2:	4682      	mov	sl, r0
   d7ed4:	468b      	mov	fp, r1
   d7ed6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d7eda:	d0d8      	beq.n	d7e8e <_strtod_l+0x526>
   d7edc:	f1b8 0f1f 	cmp.w	r8, #31
   d7ee0:	dd1e      	ble.n	d7f20 <_strtod_l+0x5b8>
   d7ee2:	2500      	movs	r5, #0
   d7ee4:	462e      	mov	r6, r5
   d7ee6:	9509      	str	r5, [sp, #36]	; 0x24
   d7ee8:	9507      	str	r5, [sp, #28]
   d7eea:	2322      	movs	r3, #34	; 0x22
   d7eec:	f04f 0a00 	mov.w	sl, #0
   d7ef0:	f04f 0b00 	mov.w	fp, #0
   d7ef4:	6023      	str	r3, [r4, #0]
   d7ef6:	e789      	b.n	d7e0c <_strtod_l+0x4a4>
   d7ef8:	000da3b5 	.word	0x000da3b5
   d7efc:	000da3cc 	.word	0x000da3cc
   d7f00:	000da3ac 	.word	0x000da3ac
   d7f04:	000da3af 	.word	0x000da3af
   d7f08:	000d9f4d 	.word	0x000d9f4d
   d7f0c:	000da588 	.word	0x000da588
   d7f10:	000da560 	.word	0x000da560
   d7f14:	7ff00000 	.word	0x7ff00000
   d7f18:	7ca00000 	.word	0x7ca00000
   d7f1c:	7fefffff 	.word	0x7fefffff
   d7f20:	f018 0310 	ands.w	r3, r8, #16
   d7f24:	bf18      	it	ne
   d7f26:	236a      	movne	r3, #106	; 0x6a
   d7f28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d82e0 <_strtod_l+0x978>
   d7f2c:	9304      	str	r3, [sp, #16]
   d7f2e:	4650      	mov	r0, sl
   d7f30:	4659      	mov	r1, fp
   d7f32:	2300      	movs	r3, #0
   d7f34:	f018 0f01 	tst.w	r8, #1
   d7f38:	d004      	beq.n	d7f44 <_strtod_l+0x5dc>
   d7f3a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7f3e:	f7fe fe77 	bl	d6c30 <__aeabi_dmul>
   d7f42:	2301      	movs	r3, #1
   d7f44:	ea5f 0868 	movs.w	r8, r8, asr #1
   d7f48:	f109 0908 	add.w	r9, r9, #8
   d7f4c:	d1f2      	bne.n	d7f34 <_strtod_l+0x5cc>
   d7f4e:	b10b      	cbz	r3, d7f54 <_strtod_l+0x5ec>
   d7f50:	4682      	mov	sl, r0
   d7f52:	468b      	mov	fp, r1
   d7f54:	9b04      	ldr	r3, [sp, #16]
   d7f56:	b1bb      	cbz	r3, d7f88 <_strtod_l+0x620>
   d7f58:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7f5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7f60:	2b00      	cmp	r3, #0
   d7f62:	4659      	mov	r1, fp
   d7f64:	dd10      	ble.n	d7f88 <_strtod_l+0x620>
   d7f66:	2b1f      	cmp	r3, #31
   d7f68:	f340 8128 	ble.w	d81bc <_strtod_l+0x854>
   d7f6c:	2b34      	cmp	r3, #52	; 0x34
   d7f6e:	bfde      	ittt	le
   d7f70:	3b20      	suble	r3, #32
   d7f72:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7f76:	fa02 f303 	lslle.w	r3, r2, r3
   d7f7a:	f04f 0a00 	mov.w	sl, #0
   d7f7e:	bfcc      	ite	gt
   d7f80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7f84:	ea03 0b01 	andle.w	fp, r3, r1
   d7f88:	2200      	movs	r2, #0
   d7f8a:	2300      	movs	r3, #0
   d7f8c:	4650      	mov	r0, sl
   d7f8e:	4659      	mov	r1, fp
   d7f90:	f7ff f8b6 	bl	d7100 <__aeabi_dcmpeq>
   d7f94:	2800      	cmp	r0, #0
   d7f96:	d1a4      	bne.n	d7ee2 <_strtod_l+0x57a>
   d7f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7f9a:	9300      	str	r3, [sp, #0]
   d7f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d7f9e:	462b      	mov	r3, r5
   d7fa0:	463a      	mov	r2, r7
   d7fa2:	4620      	mov	r0, r4
   d7fa4:	f001 fb29 	bl	d95fa <__s2b>
   d7fa8:	9009      	str	r0, [sp, #36]	; 0x24
   d7faa:	2800      	cmp	r0, #0
   d7fac:	f43f af24 	beq.w	d7df8 <_strtod_l+0x490>
   d7fb0:	9b07      	ldr	r3, [sp, #28]
   d7fb2:	1b9e      	subs	r6, r3, r6
   d7fb4:	9b08      	ldr	r3, [sp, #32]
   d7fb6:	2b00      	cmp	r3, #0
   d7fb8:	bfb4      	ite	lt
   d7fba:	4633      	movlt	r3, r6
   d7fbc:	2300      	movge	r3, #0
   d7fbe:	9310      	str	r3, [sp, #64]	; 0x40
   d7fc0:	9b08      	ldr	r3, [sp, #32]
   d7fc2:	2500      	movs	r5, #0
   d7fc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7fc8:	9318      	str	r3, [sp, #96]	; 0x60
   d7fca:	462e      	mov	r6, r5
   d7fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7fce:	4620      	mov	r0, r4
   d7fd0:	6859      	ldr	r1, [r3, #4]
   d7fd2:	f001 fa89 	bl	d94e8 <_Balloc>
   d7fd6:	9007      	str	r0, [sp, #28]
   d7fd8:	2800      	cmp	r0, #0
   d7fda:	f43f af11 	beq.w	d7e00 <_strtod_l+0x498>
   d7fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7fe0:	691a      	ldr	r2, [r3, #16]
   d7fe2:	3202      	adds	r2, #2
   d7fe4:	f103 010c 	add.w	r1, r3, #12
   d7fe8:	0092      	lsls	r2, r2, #2
   d7fea:	300c      	adds	r0, #12
   d7fec:	f7ff fc08 	bl	d7800 <memcpy>
   d7ff0:	ec4b ab10 	vmov	d0, sl, fp
   d7ff4:	aa20      	add	r2, sp, #128	; 0x80
   d7ff6:	a91f      	add	r1, sp, #124	; 0x7c
   d7ff8:	4620      	mov	r0, r4
   d7ffa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d7ffe:	f001 fdeb 	bl	d9bd8 <__d2b>
   d8002:	901e      	str	r0, [sp, #120]	; 0x78
   d8004:	2800      	cmp	r0, #0
   d8006:	f43f aefb 	beq.w	d7e00 <_strtod_l+0x498>
   d800a:	2101      	movs	r1, #1
   d800c:	4620      	mov	r0, r4
   d800e:	f001 fb82 	bl	d9716 <__i2b>
   d8012:	4606      	mov	r6, r0
   d8014:	2800      	cmp	r0, #0
   d8016:	f43f aef3 	beq.w	d7e00 <_strtod_l+0x498>
   d801a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d801c:	9904      	ldr	r1, [sp, #16]
   d801e:	2b00      	cmp	r3, #0
   d8020:	bfab      	itete	ge
   d8022:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d8024:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d8026:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d8028:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d802c:	bfac      	ite	ge
   d802e:	eb03 0902 	addge.w	r9, r3, r2
   d8032:	1ad7      	sublt	r7, r2, r3
   d8034:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d8036:	eba3 0801 	sub.w	r8, r3, r1
   d803a:	4490      	add	r8, r2
   d803c:	4ba3      	ldr	r3, [pc, #652]	; (d82cc <_strtod_l+0x964>)
   d803e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8042:	4598      	cmp	r8, r3
   d8044:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d8048:	f280 80cc 	bge.w	d81e4 <_strtod_l+0x87c>
   d804c:	eba3 0308 	sub.w	r3, r3, r8
   d8050:	2b1f      	cmp	r3, #31
   d8052:	eba2 0203 	sub.w	r2, r2, r3
   d8056:	f04f 0101 	mov.w	r1, #1
   d805a:	f300 80b6 	bgt.w	d81ca <_strtod_l+0x862>
   d805e:	fa01 f303 	lsl.w	r3, r1, r3
   d8062:	9311      	str	r3, [sp, #68]	; 0x44
   d8064:	2300      	movs	r3, #0
   d8066:	930c      	str	r3, [sp, #48]	; 0x30
   d8068:	eb09 0802 	add.w	r8, r9, r2
   d806c:	9b04      	ldr	r3, [sp, #16]
   d806e:	45c1      	cmp	r9, r8
   d8070:	4417      	add	r7, r2
   d8072:	441f      	add	r7, r3
   d8074:	464b      	mov	r3, r9
   d8076:	bfa8      	it	ge
   d8078:	4643      	movge	r3, r8
   d807a:	42bb      	cmp	r3, r7
   d807c:	bfa8      	it	ge
   d807e:	463b      	movge	r3, r7
   d8080:	2b00      	cmp	r3, #0
   d8082:	bfc2      	ittt	gt
   d8084:	eba8 0803 	subgt.w	r8, r8, r3
   d8088:	1aff      	subgt	r7, r7, r3
   d808a:	eba9 0903 	subgt.w	r9, r9, r3
   d808e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8090:	2b00      	cmp	r3, #0
   d8092:	dd17      	ble.n	d80c4 <_strtod_l+0x75c>
   d8094:	4631      	mov	r1, r6
   d8096:	461a      	mov	r2, r3
   d8098:	4620      	mov	r0, r4
   d809a:	f001 fbe1 	bl	d9860 <__pow5mult>
   d809e:	4606      	mov	r6, r0
   d80a0:	2800      	cmp	r0, #0
   d80a2:	f43f aead 	beq.w	d7e00 <_strtod_l+0x498>
   d80a6:	4601      	mov	r1, r0
   d80a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d80aa:	4620      	mov	r0, r4
   d80ac:	f001 fb3c 	bl	d9728 <__multiply>
   d80b0:	900f      	str	r0, [sp, #60]	; 0x3c
   d80b2:	2800      	cmp	r0, #0
   d80b4:	f43f aea4 	beq.w	d7e00 <_strtod_l+0x498>
   d80b8:	991e      	ldr	r1, [sp, #120]	; 0x78
   d80ba:	4620      	mov	r0, r4
   d80bc:	f001 fa48 	bl	d9550 <_Bfree>
   d80c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d80c2:	931e      	str	r3, [sp, #120]	; 0x78
   d80c4:	f1b8 0f00 	cmp.w	r8, #0
   d80c8:	f300 8091 	bgt.w	d81ee <_strtod_l+0x886>
   d80cc:	9b08      	ldr	r3, [sp, #32]
   d80ce:	2b00      	cmp	r3, #0
   d80d0:	dd08      	ble.n	d80e4 <_strtod_l+0x77c>
   d80d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d80d4:	9907      	ldr	r1, [sp, #28]
   d80d6:	4620      	mov	r0, r4
   d80d8:	f001 fbc2 	bl	d9860 <__pow5mult>
   d80dc:	9007      	str	r0, [sp, #28]
   d80de:	2800      	cmp	r0, #0
   d80e0:	f43f ae8e 	beq.w	d7e00 <_strtod_l+0x498>
   d80e4:	2f00      	cmp	r7, #0
   d80e6:	dd08      	ble.n	d80fa <_strtod_l+0x792>
   d80e8:	9907      	ldr	r1, [sp, #28]
   d80ea:	463a      	mov	r2, r7
   d80ec:	4620      	mov	r0, r4
   d80ee:	f001 fc05 	bl	d98fc <__lshift>
   d80f2:	9007      	str	r0, [sp, #28]
   d80f4:	2800      	cmp	r0, #0
   d80f6:	f43f ae83 	beq.w	d7e00 <_strtod_l+0x498>
   d80fa:	f1b9 0f00 	cmp.w	r9, #0
   d80fe:	dd08      	ble.n	d8112 <_strtod_l+0x7aa>
   d8100:	4631      	mov	r1, r6
   d8102:	464a      	mov	r2, r9
   d8104:	4620      	mov	r0, r4
   d8106:	f001 fbf9 	bl	d98fc <__lshift>
   d810a:	4606      	mov	r6, r0
   d810c:	2800      	cmp	r0, #0
   d810e:	f43f ae77 	beq.w	d7e00 <_strtod_l+0x498>
   d8112:	9a07      	ldr	r2, [sp, #28]
   d8114:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8116:	4620      	mov	r0, r4
   d8118:	f001 fc6b 	bl	d99f2 <__mdiff>
   d811c:	4605      	mov	r5, r0
   d811e:	2800      	cmp	r0, #0
   d8120:	f43f ae6e 	beq.w	d7e00 <_strtod_l+0x498>
   d8124:	68c3      	ldr	r3, [r0, #12]
   d8126:	930f      	str	r3, [sp, #60]	; 0x3c
   d8128:	2300      	movs	r3, #0
   d812a:	60c3      	str	r3, [r0, #12]
   d812c:	4631      	mov	r1, r6
   d812e:	f001 fc44 	bl	d99ba <__mcmp>
   d8132:	2800      	cmp	r0, #0
   d8134:	da65      	bge.n	d8202 <_strtod_l+0x89a>
   d8136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8138:	ea53 030a 	orrs.w	r3, r3, sl
   d813c:	f040 8087 	bne.w	d824e <_strtod_l+0x8e6>
   d8140:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8144:	2b00      	cmp	r3, #0
   d8146:	f040 8082 	bne.w	d824e <_strtod_l+0x8e6>
   d814a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d814e:	0d1b      	lsrs	r3, r3, #20
   d8150:	051b      	lsls	r3, r3, #20
   d8152:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8156:	d97a      	bls.n	d824e <_strtod_l+0x8e6>
   d8158:	696b      	ldr	r3, [r5, #20]
   d815a:	b913      	cbnz	r3, d8162 <_strtod_l+0x7fa>
   d815c:	692b      	ldr	r3, [r5, #16]
   d815e:	2b01      	cmp	r3, #1
   d8160:	dd75      	ble.n	d824e <_strtod_l+0x8e6>
   d8162:	4629      	mov	r1, r5
   d8164:	2201      	movs	r2, #1
   d8166:	4620      	mov	r0, r4
   d8168:	f001 fbc8 	bl	d98fc <__lshift>
   d816c:	4631      	mov	r1, r6
   d816e:	4605      	mov	r5, r0
   d8170:	f001 fc23 	bl	d99ba <__mcmp>
   d8174:	2800      	cmp	r0, #0
   d8176:	dd6a      	ble.n	d824e <_strtod_l+0x8e6>
   d8178:	9904      	ldr	r1, [sp, #16]
   d817a:	4a55      	ldr	r2, [pc, #340]	; (d82d0 <_strtod_l+0x968>)
   d817c:	465b      	mov	r3, fp
   d817e:	2900      	cmp	r1, #0
   d8180:	f000 8085 	beq.w	d828e <_strtod_l+0x926>
   d8184:	ea02 010b 	and.w	r1, r2, fp
   d8188:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d818c:	dc7f      	bgt.n	d828e <_strtod_l+0x926>
   d818e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d8192:	f77f aeaa 	ble.w	d7eea <_strtod_l+0x582>
   d8196:	4a4f      	ldr	r2, [pc, #316]	; (d82d4 <_strtod_l+0x96c>)
   d8198:	2300      	movs	r3, #0
   d819a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d819e:	4650      	mov	r0, sl
   d81a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d81a4:	4659      	mov	r1, fp
   d81a6:	f7fe fd43 	bl	d6c30 <__aeabi_dmul>
   d81aa:	460b      	mov	r3, r1
   d81ac:	4303      	orrs	r3, r0
   d81ae:	bf08      	it	eq
   d81b0:	2322      	moveq	r3, #34	; 0x22
   d81b2:	4682      	mov	sl, r0
   d81b4:	468b      	mov	fp, r1
   d81b6:	bf08      	it	eq
   d81b8:	6023      	streq	r3, [r4, #0]
   d81ba:	e62b      	b.n	d7e14 <_strtod_l+0x4ac>
   d81bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d81c0:	fa02 f303 	lsl.w	r3, r2, r3
   d81c4:	ea03 0a0a 	and.w	sl, r3, sl
   d81c8:	e6de      	b.n	d7f88 <_strtod_l+0x620>
   d81ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d81ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d81d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d81d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d81da:	fa01 f308 	lsl.w	r3, r1, r8
   d81de:	930c      	str	r3, [sp, #48]	; 0x30
   d81e0:	9111      	str	r1, [sp, #68]	; 0x44
   d81e2:	e741      	b.n	d8068 <_strtod_l+0x700>
   d81e4:	2300      	movs	r3, #0
   d81e6:	930c      	str	r3, [sp, #48]	; 0x30
   d81e8:	2301      	movs	r3, #1
   d81ea:	9311      	str	r3, [sp, #68]	; 0x44
   d81ec:	e73c      	b.n	d8068 <_strtod_l+0x700>
   d81ee:	991e      	ldr	r1, [sp, #120]	; 0x78
   d81f0:	4642      	mov	r2, r8
   d81f2:	4620      	mov	r0, r4
   d81f4:	f001 fb82 	bl	d98fc <__lshift>
   d81f8:	901e      	str	r0, [sp, #120]	; 0x78
   d81fa:	2800      	cmp	r0, #0
   d81fc:	f47f af66 	bne.w	d80cc <_strtod_l+0x764>
   d8200:	e5fe      	b.n	d7e00 <_strtod_l+0x498>
   d8202:	465f      	mov	r7, fp
   d8204:	d16e      	bne.n	d82e4 <_strtod_l+0x97c>
   d8206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8208:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d820c:	b342      	cbz	r2, d8260 <_strtod_l+0x8f8>
   d820e:	4a32      	ldr	r2, [pc, #200]	; (d82d8 <_strtod_l+0x970>)
   d8210:	4293      	cmp	r3, r2
   d8212:	d128      	bne.n	d8266 <_strtod_l+0x8fe>
   d8214:	9b04      	ldr	r3, [sp, #16]
   d8216:	4650      	mov	r0, sl
   d8218:	b1eb      	cbz	r3, d8256 <_strtod_l+0x8ee>
   d821a:	4a2d      	ldr	r2, [pc, #180]	; (d82d0 <_strtod_l+0x968>)
   d821c:	403a      	ands	r2, r7
   d821e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d8222:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d8226:	d819      	bhi.n	d825c <_strtod_l+0x8f4>
   d8228:	0d12      	lsrs	r2, r2, #20
   d822a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d822e:	fa01 f303 	lsl.w	r3, r1, r3
   d8232:	4298      	cmp	r0, r3
   d8234:	d117      	bne.n	d8266 <_strtod_l+0x8fe>
   d8236:	4b29      	ldr	r3, [pc, #164]	; (d82dc <_strtod_l+0x974>)
   d8238:	429f      	cmp	r7, r3
   d823a:	d102      	bne.n	d8242 <_strtod_l+0x8da>
   d823c:	3001      	adds	r0, #1
   d823e:	f43f addf 	beq.w	d7e00 <_strtod_l+0x498>
   d8242:	4b23      	ldr	r3, [pc, #140]	; (d82d0 <_strtod_l+0x968>)
   d8244:	403b      	ands	r3, r7
   d8246:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d824a:	f04f 0a00 	mov.w	sl, #0
   d824e:	9b04      	ldr	r3, [sp, #16]
   d8250:	2b00      	cmp	r3, #0
   d8252:	d1a0      	bne.n	d8196 <_strtod_l+0x82e>
   d8254:	e5de      	b.n	d7e14 <_strtod_l+0x4ac>
   d8256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d825a:	e7ea      	b.n	d8232 <_strtod_l+0x8ca>
   d825c:	460b      	mov	r3, r1
   d825e:	e7e8      	b.n	d8232 <_strtod_l+0x8ca>
   d8260:	ea53 030a 	orrs.w	r3, r3, sl
   d8264:	d088      	beq.n	d8178 <_strtod_l+0x810>
   d8266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8268:	b1db      	cbz	r3, d82a2 <_strtod_l+0x93a>
   d826a:	423b      	tst	r3, r7
   d826c:	d0ef      	beq.n	d824e <_strtod_l+0x8e6>
   d826e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8270:	9a04      	ldr	r2, [sp, #16]
   d8272:	4650      	mov	r0, sl
   d8274:	4659      	mov	r1, fp
   d8276:	b1c3      	cbz	r3, d82aa <_strtod_l+0x942>
   d8278:	f7ff fb58 	bl	d792c <sulp>
   d827c:	4602      	mov	r2, r0
   d827e:	460b      	mov	r3, r1
   d8280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8284:	f7fe fb1e 	bl	d68c4 <__adddf3>
   d8288:	4682      	mov	sl, r0
   d828a:	468b      	mov	fp, r1
   d828c:	e7df      	b.n	d824e <_strtod_l+0x8e6>
   d828e:	4013      	ands	r3, r2
   d8290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d8294:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8298:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d829c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d82a0:	e7d5      	b.n	d824e <_strtod_l+0x8e6>
   d82a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d82a4:	ea13 0f0a 	tst.w	r3, sl
   d82a8:	e7e0      	b.n	d826c <_strtod_l+0x904>
   d82aa:	f7ff fb3f 	bl	d792c <sulp>
   d82ae:	4602      	mov	r2, r0
   d82b0:	460b      	mov	r3, r1
   d82b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d82b6:	f7fe fb03 	bl	d68c0 <__aeabi_dsub>
   d82ba:	2200      	movs	r2, #0
   d82bc:	2300      	movs	r3, #0
   d82be:	4682      	mov	sl, r0
   d82c0:	468b      	mov	fp, r1
   d82c2:	f7fe ff1d 	bl	d7100 <__aeabi_dcmpeq>
   d82c6:	2800      	cmp	r0, #0
   d82c8:	d0c1      	beq.n	d824e <_strtod_l+0x8e6>
   d82ca:	e60e      	b.n	d7eea <_strtod_l+0x582>
   d82cc:	fffffc02 	.word	0xfffffc02
   d82d0:	7ff00000 	.word	0x7ff00000
   d82d4:	39500000 	.word	0x39500000
   d82d8:	000fffff 	.word	0x000fffff
   d82dc:	7fefffff 	.word	0x7fefffff
   d82e0:	000da3e0 	.word	0x000da3e0
   d82e4:	4631      	mov	r1, r6
   d82e6:	4628      	mov	r0, r5
   d82e8:	f001 fcc6 	bl	d9c78 <__ratio>
   d82ec:	ec59 8b10 	vmov	r8, r9, d0
   d82f0:	ee10 0a10 	vmov	r0, s0
   d82f4:	2200      	movs	r2, #0
   d82f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d82fa:	4649      	mov	r1, r9
   d82fc:	f7fe ff14 	bl	d7128 <__aeabi_dcmple>
   d8300:	2800      	cmp	r0, #0
   d8302:	d07c      	beq.n	d83fe <_strtod_l+0xa96>
   d8304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8306:	2b00      	cmp	r3, #0
   d8308:	d04c      	beq.n	d83a4 <_strtod_l+0xa3c>
   d830a:	4b95      	ldr	r3, [pc, #596]	; (d8560 <_strtod_l+0xbf8>)
   d830c:	2200      	movs	r2, #0
   d830e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d8312:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8560 <_strtod_l+0xbf8>
   d8316:	f04f 0800 	mov.w	r8, #0
   d831a:	4b92      	ldr	r3, [pc, #584]	; (d8564 <_strtod_l+0xbfc>)
   d831c:	403b      	ands	r3, r7
   d831e:	9311      	str	r3, [sp, #68]	; 0x44
   d8320:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8322:	4b91      	ldr	r3, [pc, #580]	; (d8568 <_strtod_l+0xc00>)
   d8324:	429a      	cmp	r2, r3
   d8326:	f040 80b2 	bne.w	d848e <_strtod_l+0xb26>
   d832a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d832e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8332:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d8336:	ec4b ab10 	vmov	d0, sl, fp
   d833a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d833e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d8342:	f001 fbcd 	bl	d9ae0 <__ulp>
   d8346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d834a:	ec53 2b10 	vmov	r2, r3, d0
   d834e:	f7fe fc6f 	bl	d6c30 <__aeabi_dmul>
   d8352:	4652      	mov	r2, sl
   d8354:	465b      	mov	r3, fp
   d8356:	f7fe fab5 	bl	d68c4 <__adddf3>
   d835a:	460b      	mov	r3, r1
   d835c:	4981      	ldr	r1, [pc, #516]	; (d8564 <_strtod_l+0xbfc>)
   d835e:	4a83      	ldr	r2, [pc, #524]	; (d856c <_strtod_l+0xc04>)
   d8360:	4019      	ands	r1, r3
   d8362:	4291      	cmp	r1, r2
   d8364:	4682      	mov	sl, r0
   d8366:	d95e      	bls.n	d8426 <_strtod_l+0xabe>
   d8368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d836a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d836e:	4293      	cmp	r3, r2
   d8370:	d103      	bne.n	d837a <_strtod_l+0xa12>
   d8372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8374:	3301      	adds	r3, #1
   d8376:	f43f ad43 	beq.w	d7e00 <_strtod_l+0x498>
   d837a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d8578 <_strtod_l+0xc10>
   d837e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8382:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8384:	4620      	mov	r0, r4
   d8386:	f001 f8e3 	bl	d9550 <_Bfree>
   d838a:	9907      	ldr	r1, [sp, #28]
   d838c:	4620      	mov	r0, r4
   d838e:	f001 f8df 	bl	d9550 <_Bfree>
   d8392:	4631      	mov	r1, r6
   d8394:	4620      	mov	r0, r4
   d8396:	f001 f8db 	bl	d9550 <_Bfree>
   d839a:	4629      	mov	r1, r5
   d839c:	4620      	mov	r0, r4
   d839e:	f001 f8d7 	bl	d9550 <_Bfree>
   d83a2:	e613      	b.n	d7fcc <_strtod_l+0x664>
   d83a4:	f1ba 0f00 	cmp.w	sl, #0
   d83a8:	d11b      	bne.n	d83e2 <_strtod_l+0xa7a>
   d83aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d83ae:	b9f3      	cbnz	r3, d83ee <_strtod_l+0xa86>
   d83b0:	4b6b      	ldr	r3, [pc, #428]	; (d8560 <_strtod_l+0xbf8>)
   d83b2:	2200      	movs	r2, #0
   d83b4:	4640      	mov	r0, r8
   d83b6:	4649      	mov	r1, r9
   d83b8:	f7fe feac 	bl	d7114 <__aeabi_dcmplt>
   d83bc:	b9d0      	cbnz	r0, d83f4 <_strtod_l+0xa8c>
   d83be:	4640      	mov	r0, r8
   d83c0:	4649      	mov	r1, r9
   d83c2:	4b6b      	ldr	r3, [pc, #428]	; (d8570 <_strtod_l+0xc08>)
   d83c4:	2200      	movs	r2, #0
   d83c6:	f7fe fc33 	bl	d6c30 <__aeabi_dmul>
   d83ca:	4680      	mov	r8, r0
   d83cc:	4689      	mov	r9, r1
   d83ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d83d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d83d6:	931b      	str	r3, [sp, #108]	; 0x6c
   d83d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d83dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d83e0:	e79b      	b.n	d831a <_strtod_l+0x9b2>
   d83e2:	f1ba 0f01 	cmp.w	sl, #1
   d83e6:	d102      	bne.n	d83ee <_strtod_l+0xa86>
   d83e8:	2f00      	cmp	r7, #0
   d83ea:	f43f ad7e 	beq.w	d7eea <_strtod_l+0x582>
   d83ee:	4b61      	ldr	r3, [pc, #388]	; (d8574 <_strtod_l+0xc0c>)
   d83f0:	2200      	movs	r2, #0
   d83f2:	e78c      	b.n	d830e <_strtod_l+0x9a6>
   d83f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; d8570 <_strtod_l+0xc08>
   d83f8:	f04f 0800 	mov.w	r8, #0
   d83fc:	e7e7      	b.n	d83ce <_strtod_l+0xa66>
   d83fe:	4b5c      	ldr	r3, [pc, #368]	; (d8570 <_strtod_l+0xc08>)
   d8400:	4640      	mov	r0, r8
   d8402:	4649      	mov	r1, r9
   d8404:	2200      	movs	r2, #0
   d8406:	f7fe fc13 	bl	d6c30 <__aeabi_dmul>
   d840a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d840c:	4680      	mov	r8, r0
   d840e:	4689      	mov	r9, r1
   d8410:	b933      	cbnz	r3, d8420 <_strtod_l+0xab8>
   d8412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8416:	9012      	str	r0, [sp, #72]	; 0x48
   d8418:	9313      	str	r3, [sp, #76]	; 0x4c
   d841a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d841e:	e7dd      	b.n	d83dc <_strtod_l+0xa74>
   d8420:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d8424:	e7f9      	b.n	d841a <_strtod_l+0xab2>
   d8426:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d842a:	9b04      	ldr	r3, [sp, #16]
   d842c:	2b00      	cmp	r3, #0
   d842e:	d1a8      	bne.n	d8382 <_strtod_l+0xa1a>
   d8430:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8434:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8436:	0d1b      	lsrs	r3, r3, #20
   d8438:	051b      	lsls	r3, r3, #20
   d843a:	429a      	cmp	r2, r3
   d843c:	d1a1      	bne.n	d8382 <_strtod_l+0xa1a>
   d843e:	4640      	mov	r0, r8
   d8440:	4649      	mov	r1, r9
   d8442:	f001 fcb9 	bl	d9db8 <__aeabi_d2lz>
   d8446:	f7fe fbc5 	bl	d6bd4 <__aeabi_l2d>
   d844a:	4602      	mov	r2, r0
   d844c:	460b      	mov	r3, r1
   d844e:	4640      	mov	r0, r8
   d8450:	4649      	mov	r1, r9
   d8452:	f7fe fa35 	bl	d68c0 <__aeabi_dsub>
   d8456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8458:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d845c:	ea43 030a 	orr.w	r3, r3, sl
   d8460:	4313      	orrs	r3, r2
   d8462:	4680      	mov	r8, r0
   d8464:	4689      	mov	r9, r1
   d8466:	d053      	beq.n	d8510 <_strtod_l+0xba8>
   d8468:	a335      	add	r3, pc, #212	; (adr r3, d8540 <_strtod_l+0xbd8>)
   d846a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d846e:	f7fe fe51 	bl	d7114 <__aeabi_dcmplt>
   d8472:	2800      	cmp	r0, #0
   d8474:	f47f acce 	bne.w	d7e14 <_strtod_l+0x4ac>
   d8478:	a333      	add	r3, pc, #204	; (adr r3, d8548 <_strtod_l+0xbe0>)
   d847a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d847e:	4640      	mov	r0, r8
   d8480:	4649      	mov	r1, r9
   d8482:	f7fe fe65 	bl	d7150 <__aeabi_dcmpgt>
   d8486:	2800      	cmp	r0, #0
   d8488:	f43f af7b 	beq.w	d8382 <_strtod_l+0xa1a>
   d848c:	e4c2      	b.n	d7e14 <_strtod_l+0x4ac>
   d848e:	9b04      	ldr	r3, [sp, #16]
   d8490:	b333      	cbz	r3, d84e0 <_strtod_l+0xb78>
   d8492:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d8494:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8498:	d822      	bhi.n	d84e0 <_strtod_l+0xb78>
   d849a:	a32d      	add	r3, pc, #180	; (adr r3, d8550 <_strtod_l+0xbe8>)
   d849c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84a0:	4640      	mov	r0, r8
   d84a2:	4649      	mov	r1, r9
   d84a4:	f7fe fe40 	bl	d7128 <__aeabi_dcmple>
   d84a8:	b1a0      	cbz	r0, d84d4 <_strtod_l+0xb6c>
   d84aa:	4649      	mov	r1, r9
   d84ac:	4640      	mov	r0, r8
   d84ae:	f7fe fe59 	bl	d7164 <__aeabi_d2uiz>
   d84b2:	2801      	cmp	r0, #1
   d84b4:	bf38      	it	cc
   d84b6:	2001      	movcc	r0, #1
   d84b8:	f7fe fb40 	bl	d6b3c <__aeabi_ui2d>
   d84bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d84be:	4680      	mov	r8, r0
   d84c0:	4689      	mov	r9, r1
   d84c2:	bb13      	cbnz	r3, d850a <_strtod_l+0xba2>
   d84c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d84c8:	9014      	str	r0, [sp, #80]	; 0x50
   d84ca:	9315      	str	r3, [sp, #84]	; 0x54
   d84cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d84d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d84d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d84d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d84d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d84dc:	1a9b      	subs	r3, r3, r2
   d84de:	930d      	str	r3, [sp, #52]	; 0x34
   d84e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d84e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d84e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d84ec:	f001 faf8 	bl	d9ae0 <__ulp>
   d84f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d84f4:	ec53 2b10 	vmov	r2, r3, d0
   d84f8:	f7fe fb9a 	bl	d6c30 <__aeabi_dmul>
   d84fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8500:	f7fe f9e0 	bl	d68c4 <__adddf3>
   d8504:	4682      	mov	sl, r0
   d8506:	468b      	mov	fp, r1
   d8508:	e78f      	b.n	d842a <_strtod_l+0xac2>
   d850a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d850e:	e7dd      	b.n	d84cc <_strtod_l+0xb64>
   d8510:	a311      	add	r3, pc, #68	; (adr r3, d8558 <_strtod_l+0xbf0>)
   d8512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8516:	f7fe fdfd 	bl	d7114 <__aeabi_dcmplt>
   d851a:	e7b4      	b.n	d8486 <_strtod_l+0xb1e>
   d851c:	2300      	movs	r3, #0
   d851e:	930e      	str	r3, [sp, #56]	; 0x38
   d8520:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8522:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8524:	6013      	str	r3, [r2, #0]
   d8526:	f7ff ba65 	b.w	d79f4 <_strtod_l+0x8c>
   d852a:	2b65      	cmp	r3, #101	; 0x65
   d852c:	f43f ab5d 	beq.w	d7bea <_strtod_l+0x282>
   d8530:	2b45      	cmp	r3, #69	; 0x45
   d8532:	f43f ab5a 	beq.w	d7bea <_strtod_l+0x282>
   d8536:	2201      	movs	r2, #1
   d8538:	f7ff bb92 	b.w	d7c60 <_strtod_l+0x2f8>
   d853c:	f3af 8000 	nop.w
   d8540:	94a03595 	.word	0x94a03595
   d8544:	3fdfffff 	.word	0x3fdfffff
   d8548:	35afe535 	.word	0x35afe535
   d854c:	3fe00000 	.word	0x3fe00000
   d8550:	ffc00000 	.word	0xffc00000
   d8554:	41dfffff 	.word	0x41dfffff
   d8558:	94a03595 	.word	0x94a03595
   d855c:	3fcfffff 	.word	0x3fcfffff
   d8560:	3ff00000 	.word	0x3ff00000
   d8564:	7ff00000 	.word	0x7ff00000
   d8568:	7fe00000 	.word	0x7fe00000
   d856c:	7c9fffff 	.word	0x7c9fffff
   d8570:	3fe00000 	.word	0x3fe00000
   d8574:	bff00000 	.word	0xbff00000
   d8578:	7fefffff 	.word	0x7fefffff

000d857c <strtod>:
   d857c:	460a      	mov	r2, r1
   d857e:	4601      	mov	r1, r0
   d8580:	4802      	ldr	r0, [pc, #8]	; (d858c <strtod+0x10>)
   d8582:	4b03      	ldr	r3, [pc, #12]	; (d8590 <strtod+0x14>)
   d8584:	6800      	ldr	r0, [r0, #0]
   d8586:	f7ff b9ef 	b.w	d7968 <_strtod_l>
   d858a:	bf00      	nop
   d858c:	2003e22c 	.word	0x2003e22c
   d8590:	2003e2f4 	.word	0x2003e2f4

000d8594 <_strtol_l.isra.0>:
   d8594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8598:	4e3a      	ldr	r6, [pc, #232]	; (d8684 <_strtol_l.isra.0+0xf0>)
   d859a:	4686      	mov	lr, r0
   d859c:	468c      	mov	ip, r1
   d859e:	4660      	mov	r0, ip
   d85a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d85a4:	5da5      	ldrb	r5, [r4, r6]
   d85a6:	f015 0508 	ands.w	r5, r5, #8
   d85aa:	d1f8      	bne.n	d859e <_strtol_l.isra.0+0xa>
   d85ac:	2c2d      	cmp	r4, #45	; 0x2d
   d85ae:	d133      	bne.n	d8618 <_strtol_l.isra.0+0x84>
   d85b0:	f89c 4000 	ldrb.w	r4, [ip]
   d85b4:	f04f 0801 	mov.w	r8, #1
   d85b8:	f100 0c02 	add.w	ip, r0, #2
   d85bc:	2b00      	cmp	r3, #0
   d85be:	d05c      	beq.n	d867a <_strtol_l.isra.0+0xe6>
   d85c0:	2b10      	cmp	r3, #16
   d85c2:	d10c      	bne.n	d85de <_strtol_l.isra.0+0x4a>
   d85c4:	2c30      	cmp	r4, #48	; 0x30
   d85c6:	d10a      	bne.n	d85de <_strtol_l.isra.0+0x4a>
   d85c8:	f89c 0000 	ldrb.w	r0, [ip]
   d85cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d85d0:	2858      	cmp	r0, #88	; 0x58
   d85d2:	d14d      	bne.n	d8670 <_strtol_l.isra.0+0xdc>
   d85d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d85d8:	2310      	movs	r3, #16
   d85da:	f10c 0c02 	add.w	ip, ip, #2
   d85de:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d85e2:	3f01      	subs	r7, #1
   d85e4:	2600      	movs	r6, #0
   d85e6:	fbb7 f9f3 	udiv	r9, r7, r3
   d85ea:	4630      	mov	r0, r6
   d85ec:	fb03 7a19 	mls	sl, r3, r9, r7
   d85f0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d85f4:	2d09      	cmp	r5, #9
   d85f6:	d818      	bhi.n	d862a <_strtol_l.isra.0+0x96>
   d85f8:	462c      	mov	r4, r5
   d85fa:	42a3      	cmp	r3, r4
   d85fc:	dd24      	ble.n	d8648 <_strtol_l.isra.0+0xb4>
   d85fe:	1c75      	adds	r5, r6, #1
   d8600:	d007      	beq.n	d8612 <_strtol_l.isra.0+0x7e>
   d8602:	4581      	cmp	r9, r0
   d8604:	d31d      	bcc.n	d8642 <_strtol_l.isra.0+0xae>
   d8606:	d101      	bne.n	d860c <_strtol_l.isra.0+0x78>
   d8608:	45a2      	cmp	sl, r4
   d860a:	db1a      	blt.n	d8642 <_strtol_l.isra.0+0xae>
   d860c:	fb00 4003 	mla	r0, r0, r3, r4
   d8610:	2601      	movs	r6, #1
   d8612:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8616:	e7eb      	b.n	d85f0 <_strtol_l.isra.0+0x5c>
   d8618:	2c2b      	cmp	r4, #43	; 0x2b
   d861a:	bf08      	it	eq
   d861c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8620:	46a8      	mov	r8, r5
   d8622:	bf08      	it	eq
   d8624:	f100 0c02 	addeq.w	ip, r0, #2
   d8628:	e7c8      	b.n	d85bc <_strtol_l.isra.0+0x28>
   d862a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d862e:	2d19      	cmp	r5, #25
   d8630:	d801      	bhi.n	d8636 <_strtol_l.isra.0+0xa2>
   d8632:	3c37      	subs	r4, #55	; 0x37
   d8634:	e7e1      	b.n	d85fa <_strtol_l.isra.0+0x66>
   d8636:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d863a:	2d19      	cmp	r5, #25
   d863c:	d804      	bhi.n	d8648 <_strtol_l.isra.0+0xb4>
   d863e:	3c57      	subs	r4, #87	; 0x57
   d8640:	e7db      	b.n	d85fa <_strtol_l.isra.0+0x66>
   d8642:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8646:	e7e4      	b.n	d8612 <_strtol_l.isra.0+0x7e>
   d8648:	1c73      	adds	r3, r6, #1
   d864a:	d106      	bne.n	d865a <_strtol_l.isra.0+0xc6>
   d864c:	2322      	movs	r3, #34	; 0x22
   d864e:	f8ce 3000 	str.w	r3, [lr]
   d8652:	4638      	mov	r0, r7
   d8654:	b942      	cbnz	r2, d8668 <_strtol_l.isra.0+0xd4>
   d8656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d865a:	f1b8 0f00 	cmp.w	r8, #0
   d865e:	d000      	beq.n	d8662 <_strtol_l.isra.0+0xce>
   d8660:	4240      	negs	r0, r0
   d8662:	2a00      	cmp	r2, #0
   d8664:	d0f7      	beq.n	d8656 <_strtol_l.isra.0+0xc2>
   d8666:	b10e      	cbz	r6, d866c <_strtol_l.isra.0+0xd8>
   d8668:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d866c:	6011      	str	r1, [r2, #0]
   d866e:	e7f2      	b.n	d8656 <_strtol_l.isra.0+0xc2>
   d8670:	2430      	movs	r4, #48	; 0x30
   d8672:	2b00      	cmp	r3, #0
   d8674:	d1b3      	bne.n	d85de <_strtol_l.isra.0+0x4a>
   d8676:	2308      	movs	r3, #8
   d8678:	e7b1      	b.n	d85de <_strtol_l.isra.0+0x4a>
   d867a:	2c30      	cmp	r4, #48	; 0x30
   d867c:	d0a4      	beq.n	d85c8 <_strtol_l.isra.0+0x34>
   d867e:	230a      	movs	r3, #10
   d8680:	e7ad      	b.n	d85de <_strtol_l.isra.0+0x4a>
   d8682:	bf00      	nop
   d8684:	000da445 	.word	0x000da445

000d8688 <strtol>:
   d8688:	4613      	mov	r3, r2
   d868a:	460a      	mov	r2, r1
   d868c:	4601      	mov	r1, r0
   d868e:	4802      	ldr	r0, [pc, #8]	; (d8698 <strtol+0x10>)
   d8690:	6800      	ldr	r0, [r0, #0]
   d8692:	f7ff bf7f 	b.w	d8594 <_strtol_l.isra.0>
   d8696:	bf00      	nop
   d8698:	2003e22c 	.word	0x2003e22c

000d869c <_strtoul_l.isra.0>:
   d869c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d86a0:	4e3b      	ldr	r6, [pc, #236]	; (d8790 <_strtoul_l.isra.0+0xf4>)
   d86a2:	4686      	mov	lr, r0
   d86a4:	468c      	mov	ip, r1
   d86a6:	4660      	mov	r0, ip
   d86a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d86ac:	5da5      	ldrb	r5, [r4, r6]
   d86ae:	f015 0508 	ands.w	r5, r5, #8
   d86b2:	d1f8      	bne.n	d86a6 <_strtoul_l.isra.0+0xa>
   d86b4:	2c2d      	cmp	r4, #45	; 0x2d
   d86b6:	d134      	bne.n	d8722 <_strtoul_l.isra.0+0x86>
   d86b8:	f89c 4000 	ldrb.w	r4, [ip]
   d86bc:	f04f 0801 	mov.w	r8, #1
   d86c0:	f100 0c02 	add.w	ip, r0, #2
   d86c4:	2b00      	cmp	r3, #0
   d86c6:	d05e      	beq.n	d8786 <_strtoul_l.isra.0+0xea>
   d86c8:	2b10      	cmp	r3, #16
   d86ca:	d10c      	bne.n	d86e6 <_strtoul_l.isra.0+0x4a>
   d86cc:	2c30      	cmp	r4, #48	; 0x30
   d86ce:	d10a      	bne.n	d86e6 <_strtoul_l.isra.0+0x4a>
   d86d0:	f89c 0000 	ldrb.w	r0, [ip]
   d86d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d86d8:	2858      	cmp	r0, #88	; 0x58
   d86da:	d14f      	bne.n	d877c <_strtoul_l.isra.0+0xe0>
   d86dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d86e0:	2310      	movs	r3, #16
   d86e2:	f10c 0c02 	add.w	ip, ip, #2
   d86e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d86ea:	2500      	movs	r5, #0
   d86ec:	fbb7 f7f3 	udiv	r7, r7, r3
   d86f0:	fb03 f907 	mul.w	r9, r3, r7
   d86f4:	ea6f 0909 	mvn.w	r9, r9
   d86f8:	4628      	mov	r0, r5
   d86fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   d86fe:	2e09      	cmp	r6, #9
   d8700:	d818      	bhi.n	d8734 <_strtoul_l.isra.0+0x98>
   d8702:	4634      	mov	r4, r6
   d8704:	42a3      	cmp	r3, r4
   d8706:	dd24      	ble.n	d8752 <_strtoul_l.isra.0+0xb6>
   d8708:	2d00      	cmp	r5, #0
   d870a:	db1f      	blt.n	d874c <_strtoul_l.isra.0+0xb0>
   d870c:	4287      	cmp	r7, r0
   d870e:	d31d      	bcc.n	d874c <_strtoul_l.isra.0+0xb0>
   d8710:	d101      	bne.n	d8716 <_strtoul_l.isra.0+0x7a>
   d8712:	45a1      	cmp	r9, r4
   d8714:	db1a      	blt.n	d874c <_strtoul_l.isra.0+0xb0>
   d8716:	fb00 4003 	mla	r0, r0, r3, r4
   d871a:	2501      	movs	r5, #1
   d871c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8720:	e7eb      	b.n	d86fa <_strtoul_l.isra.0+0x5e>
   d8722:	2c2b      	cmp	r4, #43	; 0x2b
   d8724:	bf08      	it	eq
   d8726:	f89c 4000 	ldrbeq.w	r4, [ip]
   d872a:	46a8      	mov	r8, r5
   d872c:	bf08      	it	eq
   d872e:	f100 0c02 	addeq.w	ip, r0, #2
   d8732:	e7c7      	b.n	d86c4 <_strtoul_l.isra.0+0x28>
   d8734:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   d8738:	2e19      	cmp	r6, #25
   d873a:	d801      	bhi.n	d8740 <_strtoul_l.isra.0+0xa4>
   d873c:	3c37      	subs	r4, #55	; 0x37
   d873e:	e7e1      	b.n	d8704 <_strtoul_l.isra.0+0x68>
   d8740:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   d8744:	2e19      	cmp	r6, #25
   d8746:	d804      	bhi.n	d8752 <_strtoul_l.isra.0+0xb6>
   d8748:	3c57      	subs	r4, #87	; 0x57
   d874a:	e7db      	b.n	d8704 <_strtoul_l.isra.0+0x68>
   d874c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8750:	e7e4      	b.n	d871c <_strtoul_l.isra.0+0x80>
   d8752:	2d00      	cmp	r5, #0
   d8754:	da07      	bge.n	d8766 <_strtoul_l.isra.0+0xca>
   d8756:	2322      	movs	r3, #34	; 0x22
   d8758:	f8ce 3000 	str.w	r3, [lr]
   d875c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8760:	b942      	cbnz	r2, d8774 <_strtoul_l.isra.0+0xd8>
   d8762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8766:	f1b8 0f00 	cmp.w	r8, #0
   d876a:	d000      	beq.n	d876e <_strtoul_l.isra.0+0xd2>
   d876c:	4240      	negs	r0, r0
   d876e:	2a00      	cmp	r2, #0
   d8770:	d0f7      	beq.n	d8762 <_strtoul_l.isra.0+0xc6>
   d8772:	b10d      	cbz	r5, d8778 <_strtoul_l.isra.0+0xdc>
   d8774:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8778:	6011      	str	r1, [r2, #0]
   d877a:	e7f2      	b.n	d8762 <_strtoul_l.isra.0+0xc6>
   d877c:	2430      	movs	r4, #48	; 0x30
   d877e:	2b00      	cmp	r3, #0
   d8780:	d1b1      	bne.n	d86e6 <_strtoul_l.isra.0+0x4a>
   d8782:	2308      	movs	r3, #8
   d8784:	e7af      	b.n	d86e6 <_strtoul_l.isra.0+0x4a>
   d8786:	2c30      	cmp	r4, #48	; 0x30
   d8788:	d0a2      	beq.n	d86d0 <_strtoul_l.isra.0+0x34>
   d878a:	230a      	movs	r3, #10
   d878c:	e7ab      	b.n	d86e6 <_strtoul_l.isra.0+0x4a>
   d878e:	bf00      	nop
   d8790:	000da445 	.word	0x000da445

000d8794 <strtoul>:
   d8794:	4613      	mov	r3, r2
   d8796:	460a      	mov	r2, r1
   d8798:	4601      	mov	r1, r0
   d879a:	4802      	ldr	r0, [pc, #8]	; (d87a4 <strtoul+0x10>)
   d879c:	6800      	ldr	r0, [r0, #0]
   d879e:	f7ff bf7d 	b.w	d869c <_strtoul_l.isra.0>
   d87a2:	bf00      	nop
   d87a4:	2003e22c 	.word	0x2003e22c

000d87a8 <__tzcalc_limits>:
   d87a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87ac:	4680      	mov	r8, r0
   d87ae:	f000 fdd1 	bl	d9354 <__gettzinfo>
   d87b2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d87b6:	4598      	cmp	r8, r3
   d87b8:	f340 8098 	ble.w	d88ec <__tzcalc_limits+0x144>
   d87bc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d87c0:	4443      	add	r3, r8
   d87c2:	109b      	asrs	r3, r3, #2
   d87c4:	f240 126d 	movw	r2, #365	; 0x16d
   d87c8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   d87cc:	fb02 3505 	mla	r5, r2, r5, r3
   d87d0:	f06f 0263 	mvn.w	r2, #99	; 0x63
   d87d4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   d87d8:	fb93 f3f2 	sdiv	r3, r3, r2
   d87dc:	441d      	add	r5, r3
   d87de:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d87e2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d87e6:	fb98 f7f3 	sdiv	r7, r8, r3
   d87ea:	fb03 8717 	mls	r7, r3, r7, r8
   d87ee:	4442      	add	r2, r8
   d87f0:	fab7 fc87 	clz	ip, r7
   d87f4:	fbb2 f2f3 	udiv	r2, r2, r3
   d87f8:	f008 0303 	and.w	r3, r8, #3
   d87fc:	4415      	add	r5, r2
   d87fe:	2264      	movs	r2, #100	; 0x64
   d8800:	f8c0 8004 	str.w	r8, [r0, #4]
   d8804:	fb98 f6f2 	sdiv	r6, r8, r2
   d8808:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   d880c:	fb02 8616 	mls	r6, r2, r6, r8
   d8810:	4604      	mov	r4, r0
   d8812:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   d8816:	9300      	str	r3, [sp, #0]
   d8818:	f04f 0e07 	mov.w	lr, #7
   d881c:	7a22      	ldrb	r2, [r4, #8]
   d881e:	6963      	ldr	r3, [r4, #20]
   d8820:	2a4a      	cmp	r2, #74	; 0x4a
   d8822:	d128      	bne.n	d8876 <__tzcalc_limits+0xce>
   d8824:	9900      	ldr	r1, [sp, #0]
   d8826:	18ea      	adds	r2, r5, r3
   d8828:	b901      	cbnz	r1, d882c <__tzcalc_limits+0x84>
   d882a:	b906      	cbnz	r6, d882e <__tzcalc_limits+0x86>
   d882c:	bb0f      	cbnz	r7, d8872 <__tzcalc_limits+0xca>
   d882e:	2b3b      	cmp	r3, #59	; 0x3b
   d8830:	bfd4      	ite	le
   d8832:	2300      	movle	r3, #0
   d8834:	2301      	movgt	r3, #1
   d8836:	4413      	add	r3, r2
   d8838:	1e5a      	subs	r2, r3, #1
   d883a:	69a3      	ldr	r3, [r4, #24]
   d883c:	492c      	ldr	r1, [pc, #176]	; (d88f0 <__tzcalc_limits+0x148>)
   d883e:	fb01 3202 	mla	r2, r1, r2, r3
   d8842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d8844:	4413      	add	r3, r2
   d8846:	461a      	mov	r2, r3
   d8848:	17db      	asrs	r3, r3, #31
   d884a:	e9c4 2308 	strd	r2, r3, [r4, #32]
   d884e:	3428      	adds	r4, #40	; 0x28
   d8850:	45a3      	cmp	fp, r4
   d8852:	d1e3      	bne.n	d881c <__tzcalc_limits+0x74>
   d8854:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   d8858:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   d885c:	4294      	cmp	r4, r2
   d885e:	eb75 0303 	sbcs.w	r3, r5, r3
   d8862:	bfb4      	ite	lt
   d8864:	2301      	movlt	r3, #1
   d8866:	2300      	movge	r3, #0
   d8868:	6003      	str	r3, [r0, #0]
   d886a:	2001      	movs	r0, #1
   d886c:	b003      	add	sp, #12
   d886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8872:	2300      	movs	r3, #0
   d8874:	e7df      	b.n	d8836 <__tzcalc_limits+0x8e>
   d8876:	2a44      	cmp	r2, #68	; 0x44
   d8878:	d101      	bne.n	d887e <__tzcalc_limits+0xd6>
   d887a:	18ea      	adds	r2, r5, r3
   d887c:	e7dd      	b.n	d883a <__tzcalc_limits+0x92>
   d887e:	9a00      	ldr	r2, [sp, #0]
   d8880:	bb72      	cbnz	r2, d88e0 <__tzcalc_limits+0x138>
   d8882:	2e00      	cmp	r6, #0
   d8884:	bf0c      	ite	eq
   d8886:	46e0      	moveq	r8, ip
   d8888:	f04f 0801 	movne.w	r8, #1
   d888c:	4919      	ldr	r1, [pc, #100]	; (d88f4 <__tzcalc_limits+0x14c>)
   d888e:	68e2      	ldr	r2, [r4, #12]
   d8890:	9201      	str	r2, [sp, #4]
   d8892:	f04f 0a30 	mov.w	sl, #48	; 0x30
   d8896:	fb0a 1808 	mla	r8, sl, r8, r1
   d889a:	462a      	mov	r2, r5
   d889c:	f04f 0900 	mov.w	r9, #0
   d88a0:	f1a8 0804 	sub.w	r8, r8, #4
   d88a4:	9901      	ldr	r1, [sp, #4]
   d88a6:	f109 0901 	add.w	r9, r9, #1
   d88aa:	4549      	cmp	r1, r9
   d88ac:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   d88b0:	dc18      	bgt.n	d88e4 <__tzcalc_limits+0x13c>
   d88b2:	f102 0804 	add.w	r8, r2, #4
   d88b6:	fb98 f9fe 	sdiv	r9, r8, lr
   d88ba:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   d88be:	eba8 0909 	sub.w	r9, r8, r9
   d88c2:	ebb3 0909 	subs.w	r9, r3, r9
   d88c6:	6923      	ldr	r3, [r4, #16]
   d88c8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d88cc:	bf48      	it	mi
   d88ce:	f109 0907 	addmi.w	r9, r9, #7
   d88d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d88d6:	444b      	add	r3, r9
   d88d8:	4553      	cmp	r3, sl
   d88da:	da05      	bge.n	d88e8 <__tzcalc_limits+0x140>
   d88dc:	441a      	add	r2, r3
   d88de:	e7ac      	b.n	d883a <__tzcalc_limits+0x92>
   d88e0:	46e0      	mov	r8, ip
   d88e2:	e7d3      	b.n	d888c <__tzcalc_limits+0xe4>
   d88e4:	4452      	add	r2, sl
   d88e6:	e7dd      	b.n	d88a4 <__tzcalc_limits+0xfc>
   d88e8:	3b07      	subs	r3, #7
   d88ea:	e7f5      	b.n	d88d8 <__tzcalc_limits+0x130>
   d88ec:	2000      	movs	r0, #0
   d88ee:	e7bd      	b.n	d886c <__tzcalc_limits+0xc4>
   d88f0:	00015180 	.word	0x00015180
   d88f4:	000da34c 	.word	0x000da34c

000d88f8 <__tz_lock>:
   d88f8:	4801      	ldr	r0, [pc, #4]	; (d8900 <__tz_lock+0x8>)
   d88fa:	f000 bddf 	b.w	d94bc <__retarget_lock_acquire>
   d88fe:	bf00      	nop
   d8900:	2003e7f3 	.word	0x2003e7f3

000d8904 <__tz_unlock>:
   d8904:	4801      	ldr	r0, [pc, #4]	; (d890c <__tz_unlock+0x8>)
   d8906:	f000 bddb 	b.w	d94c0 <__retarget_lock_release>
   d890a:	bf00      	nop
   d890c:	2003e7f3 	.word	0x2003e7f3

000d8910 <_tzset_unlocked>:
   d8910:	4b01      	ldr	r3, [pc, #4]	; (d8918 <_tzset_unlocked+0x8>)
   d8912:	6818      	ldr	r0, [r3, #0]
   d8914:	f000 b802 	b.w	d891c <_tzset_unlocked_r>
   d8918:	2003e22c 	.word	0x2003e22c

000d891c <_tzset_unlocked_r>:
   d891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8920:	b08d      	sub	sp, #52	; 0x34
   d8922:	4607      	mov	r7, r0
   d8924:	f000 fd16 	bl	d9354 <__gettzinfo>
   d8928:	49ae      	ldr	r1, [pc, #696]	; (d8be4 <_tzset_unlocked_r+0x2c8>)
   d892a:	4eaf      	ldr	r6, [pc, #700]	; (d8be8 <_tzset_unlocked_r+0x2cc>)
   d892c:	4605      	mov	r5, r0
   d892e:	4638      	mov	r0, r7
   d8930:	f000 fd08 	bl	d9344 <_getenv_r>
   d8934:	4604      	mov	r4, r0
   d8936:	b970      	cbnz	r0, d8956 <_tzset_unlocked_r+0x3a>
   d8938:	4bac      	ldr	r3, [pc, #688]	; (d8bec <_tzset_unlocked_r+0x2d0>)
   d893a:	4aad      	ldr	r2, [pc, #692]	; (d8bf0 <_tzset_unlocked_r+0x2d4>)
   d893c:	6018      	str	r0, [r3, #0]
   d893e:	4bad      	ldr	r3, [pc, #692]	; (d8bf4 <_tzset_unlocked_r+0x2d8>)
   d8940:	6018      	str	r0, [r3, #0]
   d8942:	4bad      	ldr	r3, [pc, #692]	; (d8bf8 <_tzset_unlocked_r+0x2dc>)
   d8944:	6830      	ldr	r0, [r6, #0]
   d8946:	e9c3 2200 	strd	r2, r2, [r3]
   d894a:	f7fc fddb 	bl	d5504 <free>
   d894e:	6034      	str	r4, [r6, #0]
   d8950:	b00d      	add	sp, #52	; 0x34
   d8952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8956:	6831      	ldr	r1, [r6, #0]
   d8958:	2900      	cmp	r1, #0
   d895a:	d15f      	bne.n	d8a1c <_tzset_unlocked_r+0x100>
   d895c:	6830      	ldr	r0, [r6, #0]
   d895e:	f7fc fdd1 	bl	d5504 <free>
   d8962:	4620      	mov	r0, r4
   d8964:	f7fe ffb5 	bl	d78d2 <strlen>
   d8968:	1c41      	adds	r1, r0, #1
   d896a:	4638      	mov	r0, r7
   d896c:	f7fc fdf2 	bl	d5554 <_malloc_r>
   d8970:	6030      	str	r0, [r6, #0]
   d8972:	2800      	cmp	r0, #0
   d8974:	d157      	bne.n	d8a26 <_tzset_unlocked_r+0x10a>
   d8976:	7823      	ldrb	r3, [r4, #0]
   d8978:	4aa0      	ldr	r2, [pc, #640]	; (d8bfc <_tzset_unlocked_r+0x2e0>)
   d897a:	49a1      	ldr	r1, [pc, #644]	; (d8c00 <_tzset_unlocked_r+0x2e4>)
   d897c:	2b3a      	cmp	r3, #58	; 0x3a
   d897e:	bf08      	it	eq
   d8980:	3401      	addeq	r4, #1
   d8982:	ae0a      	add	r6, sp, #40	; 0x28
   d8984:	4633      	mov	r3, r6
   d8986:	4620      	mov	r0, r4
   d8988:	f7fc fdcc 	bl	d5524 <siscanf>
   d898c:	2800      	cmp	r0, #0
   d898e:	dddf      	ble.n	d8950 <_tzset_unlocked_r+0x34>
   d8990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8992:	18e7      	adds	r7, r4, r3
   d8994:	5ce3      	ldrb	r3, [r4, r3]
   d8996:	2b2d      	cmp	r3, #45	; 0x2d
   d8998:	d149      	bne.n	d8a2e <_tzset_unlocked_r+0x112>
   d899a:	3701      	adds	r7, #1
   d899c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d89a0:	f10d 0a20 	add.w	sl, sp, #32
   d89a4:	f10d 0b1e 	add.w	fp, sp, #30
   d89a8:	f04f 0800 	mov.w	r8, #0
   d89ac:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   d89b0:	4994      	ldr	r1, [pc, #592]	; (d8c04 <_tzset_unlocked_r+0x2e8>)
   d89b2:	9603      	str	r6, [sp, #12]
   d89b4:	f8cd b000 	str.w	fp, [sp]
   d89b8:	4633      	mov	r3, r6
   d89ba:	aa07      	add	r2, sp, #28
   d89bc:	4638      	mov	r0, r7
   d89be:	f8ad 801e 	strh.w	r8, [sp, #30]
   d89c2:	f8ad 8020 	strh.w	r8, [sp, #32]
   d89c6:	f7fc fdad 	bl	d5524 <siscanf>
   d89ca:	4540      	cmp	r0, r8
   d89cc:	ddc0      	ble.n	d8950 <_tzset_unlocked_r+0x34>
   d89ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d89d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d89d6:	f8df 9238 	ldr.w	r9, [pc, #568]	; d8c10 <_tzset_unlocked_r+0x2f4>
   d89da:	213c      	movs	r1, #60	; 0x3c
   d89dc:	fb01 2203 	mla	r2, r1, r3, r2
   d89e0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d89e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d89e8:	fb01 2303 	mla	r3, r1, r3, r2
   d89ec:	435c      	muls	r4, r3
   d89ee:	62ac      	str	r4, [r5, #40]	; 0x28
   d89f0:	4c81      	ldr	r4, [pc, #516]	; (d8bf8 <_tzset_unlocked_r+0x2dc>)
   d89f2:	4b82      	ldr	r3, [pc, #520]	; (d8bfc <_tzset_unlocked_r+0x2e0>)
   d89f4:	6023      	str	r3, [r4, #0]
   d89f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d89f8:	4981      	ldr	r1, [pc, #516]	; (d8c00 <_tzset_unlocked_r+0x2e4>)
   d89fa:	441f      	add	r7, r3
   d89fc:	464a      	mov	r2, r9
   d89fe:	4633      	mov	r3, r6
   d8a00:	4638      	mov	r0, r7
   d8a02:	f7fc fd8f 	bl	d5524 <siscanf>
   d8a06:	4540      	cmp	r0, r8
   d8a08:	dc16      	bgt.n	d8a38 <_tzset_unlocked_r+0x11c>
   d8a0a:	6823      	ldr	r3, [r4, #0]
   d8a0c:	6063      	str	r3, [r4, #4]
   d8a0e:	4b77      	ldr	r3, [pc, #476]	; (d8bec <_tzset_unlocked_r+0x2d0>)
   d8a10:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   d8a12:	601a      	str	r2, [r3, #0]
   d8a14:	4b77      	ldr	r3, [pc, #476]	; (d8bf4 <_tzset_unlocked_r+0x2d8>)
   d8a16:	f8c3 8000 	str.w	r8, [r3]
   d8a1a:	e799      	b.n	d8950 <_tzset_unlocked_r+0x34>
   d8a1c:	f7fe ff2a 	bl	d7874 <strcmp>
   d8a20:	2800      	cmp	r0, #0
   d8a22:	d19b      	bne.n	d895c <_tzset_unlocked_r+0x40>
   d8a24:	e794      	b.n	d8950 <_tzset_unlocked_r+0x34>
   d8a26:	4621      	mov	r1, r4
   d8a28:	f7fe ff2e 	bl	d7888 <strcpy>
   d8a2c:	e7a3      	b.n	d8976 <_tzset_unlocked_r+0x5a>
   d8a2e:	2b2b      	cmp	r3, #43	; 0x2b
   d8a30:	bf08      	it	eq
   d8a32:	3701      	addeq	r7, #1
   d8a34:	2401      	movs	r4, #1
   d8a36:	e7b3      	b.n	d89a0 <_tzset_unlocked_r+0x84>
   d8a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a3a:	f8c4 9004 	str.w	r9, [r4, #4]
   d8a3e:	18fc      	adds	r4, r7, r3
   d8a40:	5cfb      	ldrb	r3, [r7, r3]
   d8a42:	2b2d      	cmp	r3, #45	; 0x2d
   d8a44:	f040 808b 	bne.w	d8b5e <_tzset_unlocked_r+0x242>
   d8a48:	3401      	adds	r4, #1
   d8a4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8a4e:	2300      	movs	r3, #0
   d8a50:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8a54:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8a58:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8a5c:	930a      	str	r3, [sp, #40]	; 0x28
   d8a5e:	e9cd a602 	strd	sl, r6, [sp, #8]
   d8a62:	e9cd b600 	strd	fp, r6, [sp]
   d8a66:	4967      	ldr	r1, [pc, #412]	; (d8c04 <_tzset_unlocked_r+0x2e8>)
   d8a68:	4633      	mov	r3, r6
   d8a6a:	aa07      	add	r2, sp, #28
   d8a6c:	4620      	mov	r0, r4
   d8a6e:	f7fc fd59 	bl	d5524 <siscanf>
   d8a72:	2800      	cmp	r0, #0
   d8a74:	dc78      	bgt.n	d8b68 <_tzset_unlocked_r+0x24c>
   d8a76:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   d8a78:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   d8a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8a7e:	652f      	str	r7, [r5, #80]	; 0x50
   d8a80:	441c      	add	r4, r3
   d8a82:	462f      	mov	r7, r5
   d8a84:	f04f 0900 	mov.w	r9, #0
   d8a88:	7823      	ldrb	r3, [r4, #0]
   d8a8a:	2b2c      	cmp	r3, #44	; 0x2c
   d8a8c:	bf08      	it	eq
   d8a8e:	3401      	addeq	r4, #1
   d8a90:	f894 8000 	ldrb.w	r8, [r4]
   d8a94:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8a98:	d178      	bne.n	d8b8c <_tzset_unlocked_r+0x270>
   d8a9a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8a9e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   d8aa2:	ab09      	add	r3, sp, #36	; 0x24
   d8aa4:	9300      	str	r3, [sp, #0]
   d8aa6:	4958      	ldr	r1, [pc, #352]	; (d8c08 <_tzset_unlocked_r+0x2ec>)
   d8aa8:	9603      	str	r6, [sp, #12]
   d8aaa:	4633      	mov	r3, r6
   d8aac:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8ab0:	4620      	mov	r0, r4
   d8ab2:	f7fc fd37 	bl	d5524 <siscanf>
   d8ab6:	2803      	cmp	r0, #3
   d8ab8:	f47f af4a 	bne.w	d8950 <_tzset_unlocked_r+0x34>
   d8abc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8ac0:	1e4b      	subs	r3, r1, #1
   d8ac2:	2b0b      	cmp	r3, #11
   d8ac4:	f63f af44 	bhi.w	d8950 <_tzset_unlocked_r+0x34>
   d8ac8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8acc:	1e53      	subs	r3, r2, #1
   d8ace:	2b04      	cmp	r3, #4
   d8ad0:	f63f af3e 	bhi.w	d8950 <_tzset_unlocked_r+0x34>
   d8ad4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8ad8:	2b06      	cmp	r3, #6
   d8ada:	f63f af39 	bhi.w	d8950 <_tzset_unlocked_r+0x34>
   d8ade:	e9c7 1203 	strd	r1, r2, [r7, #12]
   d8ae2:	f887 8008 	strb.w	r8, [r7, #8]
   d8ae6:	617b      	str	r3, [r7, #20]
   d8ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8aea:	eb04 0803 	add.w	r8, r4, r3
   d8aee:	2302      	movs	r3, #2
   d8af0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8af4:	2300      	movs	r3, #0
   d8af6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8afa:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8afe:	930a      	str	r3, [sp, #40]	; 0x28
   d8b00:	f898 3000 	ldrb.w	r3, [r8]
   d8b04:	2b2f      	cmp	r3, #47	; 0x2f
   d8b06:	d109      	bne.n	d8b1c <_tzset_unlocked_r+0x200>
   d8b08:	e9cd a602 	strd	sl, r6, [sp, #8]
   d8b0c:	e9cd b600 	strd	fp, r6, [sp]
   d8b10:	493e      	ldr	r1, [pc, #248]	; (d8c0c <_tzset_unlocked_r+0x2f0>)
   d8b12:	4633      	mov	r3, r6
   d8b14:	aa07      	add	r2, sp, #28
   d8b16:	4640      	mov	r0, r8
   d8b18:	f7fc fd04 	bl	d5524 <siscanf>
   d8b1c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8b20:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8b24:	213c      	movs	r1, #60	; 0x3c
   d8b26:	fb01 2203 	mla	r2, r1, r3, r2
   d8b2a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d8b2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8b32:	fb01 2303 	mla	r3, r1, r3, r2
   d8b36:	61bb      	str	r3, [r7, #24]
   d8b38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   d8b3a:	3728      	adds	r7, #40	; 0x28
   d8b3c:	4444      	add	r4, r8
   d8b3e:	f1b9 0f00 	cmp.w	r9, #0
   d8b42:	d020      	beq.n	d8b86 <_tzset_unlocked_r+0x26a>
   d8b44:	6868      	ldr	r0, [r5, #4]
   d8b46:	f7ff fe2f 	bl	d87a8 <__tzcalc_limits>
   d8b4a:	4b28      	ldr	r3, [pc, #160]	; (d8bec <_tzset_unlocked_r+0x2d0>)
   d8b4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   d8b4e:	601a      	str	r2, [r3, #0]
   d8b50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d8b52:	1a9b      	subs	r3, r3, r2
   d8b54:	4a27      	ldr	r2, [pc, #156]	; (d8bf4 <_tzset_unlocked_r+0x2d8>)
   d8b56:	bf18      	it	ne
   d8b58:	2301      	movne	r3, #1
   d8b5a:	6013      	str	r3, [r2, #0]
   d8b5c:	e6f8      	b.n	d8950 <_tzset_unlocked_r+0x34>
   d8b5e:	2b2b      	cmp	r3, #43	; 0x2b
   d8b60:	bf08      	it	eq
   d8b62:	3401      	addeq	r4, #1
   d8b64:	2701      	movs	r7, #1
   d8b66:	e772      	b.n	d8a4e <_tzset_unlocked_r+0x132>
   d8b68:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8b6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8b70:	213c      	movs	r1, #60	; 0x3c
   d8b72:	fb01 2203 	mla	r2, r1, r3, r2
   d8b76:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d8b7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8b7e:	fb01 2303 	mla	r3, r1, r3, r2
   d8b82:	435f      	muls	r7, r3
   d8b84:	e77a      	b.n	d8a7c <_tzset_unlocked_r+0x160>
   d8b86:	f04f 0901 	mov.w	r9, #1
   d8b8a:	e77d      	b.n	d8a88 <_tzset_unlocked_r+0x16c>
   d8b8c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8b90:	bf06      	itte	eq
   d8b92:	3401      	addeq	r4, #1
   d8b94:	4643      	moveq	r3, r8
   d8b96:	2344      	movne	r3, #68	; 0x44
   d8b98:	220a      	movs	r2, #10
   d8b9a:	a90b      	add	r1, sp, #44	; 0x2c
   d8b9c:	4620      	mov	r0, r4
   d8b9e:	9305      	str	r3, [sp, #20]
   d8ba0:	f7ff fdf8 	bl	d8794 <strtoul>
   d8ba4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8ba8:	9b05      	ldr	r3, [sp, #20]
   d8baa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8bae:	45a0      	cmp	r8, r4
   d8bb0:	d114      	bne.n	d8bdc <_tzset_unlocked_r+0x2c0>
   d8bb2:	234d      	movs	r3, #77	; 0x4d
   d8bb4:	f1b9 0f00 	cmp.w	r9, #0
   d8bb8:	d107      	bne.n	d8bca <_tzset_unlocked_r+0x2ae>
   d8bba:	722b      	strb	r3, [r5, #8]
   d8bbc:	2103      	movs	r1, #3
   d8bbe:	2302      	movs	r3, #2
   d8bc0:	e9c5 1303 	strd	r1, r3, [r5, #12]
   d8bc4:	f8c5 9014 	str.w	r9, [r5, #20]
   d8bc8:	e791      	b.n	d8aee <_tzset_unlocked_r+0x1d2>
   d8bca:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   d8bce:	220b      	movs	r2, #11
   d8bd0:	2301      	movs	r3, #1
   d8bd2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   d8bd6:	2300      	movs	r3, #0
   d8bd8:	63eb      	str	r3, [r5, #60]	; 0x3c
   d8bda:	e788      	b.n	d8aee <_tzset_unlocked_r+0x1d2>
   d8bdc:	b280      	uxth	r0, r0
   d8bde:	723b      	strb	r3, [r7, #8]
   d8be0:	6178      	str	r0, [r7, #20]
   d8be2:	e784      	b.n	d8aee <_tzset_unlocked_r+0x1d2>
   d8be4:	000da408 	.word	0x000da408
   d8be8:	2003e7dc 	.word	0x2003e7dc
   d8bec:	2003e7e4 	.word	0x2003e7e4
   d8bf0:	000da40b 	.word	0x000da40b
   d8bf4:	2003e7e0 	.word	0x2003e7e0
   d8bf8:	2003e290 	.word	0x2003e290
   d8bfc:	2003e7cf 	.word	0x2003e7cf
   d8c00:	000da40f 	.word	0x000da40f
   d8c04:	000da432 	.word	0x000da432
   d8c08:	000da41e 	.word	0x000da41e
   d8c0c:	000da431 	.word	0x000da431
   d8c10:	2003e7c4 	.word	0x2003e7c4

000d8c14 <rshift>:
   d8c14:	6903      	ldr	r3, [r0, #16]
   d8c16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d8c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8c1e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d8c22:	f100 0414 	add.w	r4, r0, #20
   d8c26:	dd45      	ble.n	d8cb4 <rshift+0xa0>
   d8c28:	f011 011f 	ands.w	r1, r1, #31
   d8c2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d8c30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d8c34:	d10c      	bne.n	d8c50 <rshift+0x3c>
   d8c36:	f100 0710 	add.w	r7, r0, #16
   d8c3a:	4629      	mov	r1, r5
   d8c3c:	42b1      	cmp	r1, r6
   d8c3e:	d334      	bcc.n	d8caa <rshift+0x96>
   d8c40:	1a9b      	subs	r3, r3, r2
   d8c42:	009b      	lsls	r3, r3, #2
   d8c44:	1eea      	subs	r2, r5, #3
   d8c46:	4296      	cmp	r6, r2
   d8c48:	bf38      	it	cc
   d8c4a:	2300      	movcc	r3, #0
   d8c4c:	4423      	add	r3, r4
   d8c4e:	e015      	b.n	d8c7c <rshift+0x68>
   d8c50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d8c54:	f1c1 0820 	rsb	r8, r1, #32
   d8c58:	40cf      	lsrs	r7, r1
   d8c5a:	f105 0e04 	add.w	lr, r5, #4
   d8c5e:	46a1      	mov	r9, r4
   d8c60:	4576      	cmp	r6, lr
   d8c62:	46f4      	mov	ip, lr
   d8c64:	d815      	bhi.n	d8c92 <rshift+0x7e>
   d8c66:	1a9b      	subs	r3, r3, r2
   d8c68:	009a      	lsls	r2, r3, #2
   d8c6a:	3a04      	subs	r2, #4
   d8c6c:	3501      	adds	r5, #1
   d8c6e:	42ae      	cmp	r6, r5
   d8c70:	bf38      	it	cc
   d8c72:	2200      	movcc	r2, #0
   d8c74:	18a3      	adds	r3, r4, r2
   d8c76:	50a7      	str	r7, [r4, r2]
   d8c78:	b107      	cbz	r7, d8c7c <rshift+0x68>
   d8c7a:	3304      	adds	r3, #4
   d8c7c:	1b1a      	subs	r2, r3, r4
   d8c7e:	42a3      	cmp	r3, r4
   d8c80:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d8c84:	bf08      	it	eq
   d8c86:	2300      	moveq	r3, #0
   d8c88:	6102      	str	r2, [r0, #16]
   d8c8a:	bf08      	it	eq
   d8c8c:	6143      	streq	r3, [r0, #20]
   d8c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8c92:	f8dc c000 	ldr.w	ip, [ip]
   d8c96:	fa0c fc08 	lsl.w	ip, ip, r8
   d8c9a:	ea4c 0707 	orr.w	r7, ip, r7
   d8c9e:	f849 7b04 	str.w	r7, [r9], #4
   d8ca2:	f85e 7b04 	ldr.w	r7, [lr], #4
   d8ca6:	40cf      	lsrs	r7, r1
   d8ca8:	e7da      	b.n	d8c60 <rshift+0x4c>
   d8caa:	f851 cb04 	ldr.w	ip, [r1], #4
   d8cae:	f847 cf04 	str.w	ip, [r7, #4]!
   d8cb2:	e7c3      	b.n	d8c3c <rshift+0x28>
   d8cb4:	4623      	mov	r3, r4
   d8cb6:	e7e1      	b.n	d8c7c <rshift+0x68>

000d8cb8 <__hexdig_fun>:
   d8cb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8cbc:	2b09      	cmp	r3, #9
   d8cbe:	d802      	bhi.n	d8cc6 <__hexdig_fun+0xe>
   d8cc0:	3820      	subs	r0, #32
   d8cc2:	b2c0      	uxtb	r0, r0
   d8cc4:	4770      	bx	lr
   d8cc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8cca:	2b05      	cmp	r3, #5
   d8ccc:	d801      	bhi.n	d8cd2 <__hexdig_fun+0x1a>
   d8cce:	3847      	subs	r0, #71	; 0x47
   d8cd0:	e7f7      	b.n	d8cc2 <__hexdig_fun+0xa>
   d8cd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8cd6:	2b05      	cmp	r3, #5
   d8cd8:	d801      	bhi.n	d8cde <__hexdig_fun+0x26>
   d8cda:	3827      	subs	r0, #39	; 0x27
   d8cdc:	e7f1      	b.n	d8cc2 <__hexdig_fun+0xa>
   d8cde:	2000      	movs	r0, #0
   d8ce0:	4770      	bx	lr
	...

000d8ce4 <__gethex>:
   d8ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ce8:	ed2d 8b02 	vpush	{d8}
   d8cec:	b089      	sub	sp, #36	; 0x24
   d8cee:	ee08 0a10 	vmov	s16, r0
   d8cf2:	9304      	str	r3, [sp, #16]
   d8cf4:	4bbc      	ldr	r3, [pc, #752]	; (d8fe8 <__gethex+0x304>)
   d8cf6:	681b      	ldr	r3, [r3, #0]
   d8cf8:	9301      	str	r3, [sp, #4]
   d8cfa:	4618      	mov	r0, r3
   d8cfc:	468b      	mov	fp, r1
   d8cfe:	4690      	mov	r8, r2
   d8d00:	f7fe fde7 	bl	d78d2 <strlen>
   d8d04:	9b01      	ldr	r3, [sp, #4]
   d8d06:	f8db 2000 	ldr.w	r2, [fp]
   d8d0a:	4403      	add	r3, r0
   d8d0c:	4682      	mov	sl, r0
   d8d0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8d12:	9305      	str	r3, [sp, #20]
   d8d14:	1c93      	adds	r3, r2, #2
   d8d16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d8d1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d8d1e:	32fe      	adds	r2, #254	; 0xfe
   d8d20:	18d1      	adds	r1, r2, r3
   d8d22:	461f      	mov	r7, r3
   d8d24:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8d28:	9100      	str	r1, [sp, #0]
   d8d2a:	2830      	cmp	r0, #48	; 0x30
   d8d2c:	d0f8      	beq.n	d8d20 <__gethex+0x3c>
   d8d2e:	f7ff ffc3 	bl	d8cb8 <__hexdig_fun>
   d8d32:	4604      	mov	r4, r0
   d8d34:	2800      	cmp	r0, #0
   d8d36:	d13a      	bne.n	d8dae <__gethex+0xca>
   d8d38:	9901      	ldr	r1, [sp, #4]
   d8d3a:	4652      	mov	r2, sl
   d8d3c:	4638      	mov	r0, r7
   d8d3e:	f7fe fdd0 	bl	d78e2 <strncmp>
   d8d42:	4605      	mov	r5, r0
   d8d44:	2800      	cmp	r0, #0
   d8d46:	d168      	bne.n	d8e1a <__gethex+0x136>
   d8d48:	f817 000a 	ldrb.w	r0, [r7, sl]
   d8d4c:	eb07 060a 	add.w	r6, r7, sl
   d8d50:	f7ff ffb2 	bl	d8cb8 <__hexdig_fun>
   d8d54:	2800      	cmp	r0, #0
   d8d56:	d062      	beq.n	d8e1e <__gethex+0x13a>
   d8d58:	4633      	mov	r3, r6
   d8d5a:	7818      	ldrb	r0, [r3, #0]
   d8d5c:	2830      	cmp	r0, #48	; 0x30
   d8d5e:	461f      	mov	r7, r3
   d8d60:	f103 0301 	add.w	r3, r3, #1
   d8d64:	d0f9      	beq.n	d8d5a <__gethex+0x76>
   d8d66:	f7ff ffa7 	bl	d8cb8 <__hexdig_fun>
   d8d6a:	2301      	movs	r3, #1
   d8d6c:	fab0 f480 	clz	r4, r0
   d8d70:	0964      	lsrs	r4, r4, #5
   d8d72:	4635      	mov	r5, r6
   d8d74:	9300      	str	r3, [sp, #0]
   d8d76:	463a      	mov	r2, r7
   d8d78:	4616      	mov	r6, r2
   d8d7a:	3201      	adds	r2, #1
   d8d7c:	7830      	ldrb	r0, [r6, #0]
   d8d7e:	f7ff ff9b 	bl	d8cb8 <__hexdig_fun>
   d8d82:	2800      	cmp	r0, #0
   d8d84:	d1f8      	bne.n	d8d78 <__gethex+0x94>
   d8d86:	9901      	ldr	r1, [sp, #4]
   d8d88:	4652      	mov	r2, sl
   d8d8a:	4630      	mov	r0, r6
   d8d8c:	f7fe fda9 	bl	d78e2 <strncmp>
   d8d90:	b980      	cbnz	r0, d8db4 <__gethex+0xd0>
   d8d92:	b94d      	cbnz	r5, d8da8 <__gethex+0xc4>
   d8d94:	eb06 050a 	add.w	r5, r6, sl
   d8d98:	462a      	mov	r2, r5
   d8d9a:	4616      	mov	r6, r2
   d8d9c:	3201      	adds	r2, #1
   d8d9e:	7830      	ldrb	r0, [r6, #0]
   d8da0:	f7ff ff8a 	bl	d8cb8 <__hexdig_fun>
   d8da4:	2800      	cmp	r0, #0
   d8da6:	d1f8      	bne.n	d8d9a <__gethex+0xb6>
   d8da8:	1bad      	subs	r5, r5, r6
   d8daa:	00ad      	lsls	r5, r5, #2
   d8dac:	e004      	b.n	d8db8 <__gethex+0xd4>
   d8dae:	2400      	movs	r4, #0
   d8db0:	4625      	mov	r5, r4
   d8db2:	e7e0      	b.n	d8d76 <__gethex+0x92>
   d8db4:	2d00      	cmp	r5, #0
   d8db6:	d1f7      	bne.n	d8da8 <__gethex+0xc4>
   d8db8:	7833      	ldrb	r3, [r6, #0]
   d8dba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8dbe:	2b50      	cmp	r3, #80	; 0x50
   d8dc0:	d13b      	bne.n	d8e3a <__gethex+0x156>
   d8dc2:	7873      	ldrb	r3, [r6, #1]
   d8dc4:	2b2b      	cmp	r3, #43	; 0x2b
   d8dc6:	d02c      	beq.n	d8e22 <__gethex+0x13e>
   d8dc8:	2b2d      	cmp	r3, #45	; 0x2d
   d8dca:	d02e      	beq.n	d8e2a <__gethex+0x146>
   d8dcc:	1c71      	adds	r1, r6, #1
   d8dce:	f04f 0900 	mov.w	r9, #0
   d8dd2:	7808      	ldrb	r0, [r1, #0]
   d8dd4:	f7ff ff70 	bl	d8cb8 <__hexdig_fun>
   d8dd8:	1e43      	subs	r3, r0, #1
   d8dda:	b2db      	uxtb	r3, r3
   d8ddc:	2b18      	cmp	r3, #24
   d8dde:	d82c      	bhi.n	d8e3a <__gethex+0x156>
   d8de0:	f1a0 0210 	sub.w	r2, r0, #16
   d8de4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8de8:	f7ff ff66 	bl	d8cb8 <__hexdig_fun>
   d8dec:	1e43      	subs	r3, r0, #1
   d8dee:	b2db      	uxtb	r3, r3
   d8df0:	2b18      	cmp	r3, #24
   d8df2:	d91d      	bls.n	d8e30 <__gethex+0x14c>
   d8df4:	f1b9 0f00 	cmp.w	r9, #0
   d8df8:	d000      	beq.n	d8dfc <__gethex+0x118>
   d8dfa:	4252      	negs	r2, r2
   d8dfc:	4415      	add	r5, r2
   d8dfe:	f8cb 1000 	str.w	r1, [fp]
   d8e02:	b1e4      	cbz	r4, d8e3e <__gethex+0x15a>
   d8e04:	9b00      	ldr	r3, [sp, #0]
   d8e06:	2b00      	cmp	r3, #0
   d8e08:	bf14      	ite	ne
   d8e0a:	2700      	movne	r7, #0
   d8e0c:	2706      	moveq	r7, #6
   d8e0e:	4638      	mov	r0, r7
   d8e10:	b009      	add	sp, #36	; 0x24
   d8e12:	ecbd 8b02 	vpop	{d8}
   d8e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e1a:	463e      	mov	r6, r7
   d8e1c:	4625      	mov	r5, r4
   d8e1e:	2401      	movs	r4, #1
   d8e20:	e7ca      	b.n	d8db8 <__gethex+0xd4>
   d8e22:	f04f 0900 	mov.w	r9, #0
   d8e26:	1cb1      	adds	r1, r6, #2
   d8e28:	e7d3      	b.n	d8dd2 <__gethex+0xee>
   d8e2a:	f04f 0901 	mov.w	r9, #1
   d8e2e:	e7fa      	b.n	d8e26 <__gethex+0x142>
   d8e30:	230a      	movs	r3, #10
   d8e32:	fb03 0202 	mla	r2, r3, r2, r0
   d8e36:	3a10      	subs	r2, #16
   d8e38:	e7d4      	b.n	d8de4 <__gethex+0x100>
   d8e3a:	4631      	mov	r1, r6
   d8e3c:	e7df      	b.n	d8dfe <__gethex+0x11a>
   d8e3e:	1bf3      	subs	r3, r6, r7
   d8e40:	3b01      	subs	r3, #1
   d8e42:	4621      	mov	r1, r4
   d8e44:	2b07      	cmp	r3, #7
   d8e46:	dc52      	bgt.n	d8eee <__gethex+0x20a>
   d8e48:	ee18 0a10 	vmov	r0, s16
   d8e4c:	f000 fb4c 	bl	d94e8 <_Balloc>
   d8e50:	f04f 0b00 	mov.w	fp, #0
   d8e54:	f100 0914 	add.w	r9, r0, #20
   d8e58:	f1ca 0301 	rsb	r3, sl, #1
   d8e5c:	4604      	mov	r4, r0
   d8e5e:	f8cd 9008 	str.w	r9, [sp, #8]
   d8e62:	f8cd b000 	str.w	fp, [sp]
   d8e66:	9306      	str	r3, [sp, #24]
   d8e68:	42b7      	cmp	r7, r6
   d8e6a:	d343      	bcc.n	d8ef4 <__gethex+0x210>
   d8e6c:	9802      	ldr	r0, [sp, #8]
   d8e6e:	9b00      	ldr	r3, [sp, #0]
   d8e70:	f840 3b04 	str.w	r3, [r0], #4
   d8e74:	eba0 0009 	sub.w	r0, r0, r9
   d8e78:	1080      	asrs	r0, r0, #2
   d8e7a:	0146      	lsls	r6, r0, #5
   d8e7c:	6120      	str	r0, [r4, #16]
   d8e7e:	4618      	mov	r0, r3
   d8e80:	f000 fbf9 	bl	d9676 <__hi0bits>
   d8e84:	1a30      	subs	r0, r6, r0
   d8e86:	f8d8 6000 	ldr.w	r6, [r8]
   d8e8a:	42b0      	cmp	r0, r6
   d8e8c:	dd66      	ble.n	d8f5c <__gethex+0x278>
   d8e8e:	1b87      	subs	r7, r0, r6
   d8e90:	4639      	mov	r1, r7
   d8e92:	4620      	mov	r0, r4
   d8e94:	f000 ff46 	bl	d9d24 <__any_on>
   d8e98:	4682      	mov	sl, r0
   d8e9a:	b1a8      	cbz	r0, d8ec8 <__gethex+0x1e4>
   d8e9c:	1e7b      	subs	r3, r7, #1
   d8e9e:	1159      	asrs	r1, r3, #5
   d8ea0:	f003 021f 	and.w	r2, r3, #31
   d8ea4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d8ea8:	f04f 0a01 	mov.w	sl, #1
   d8eac:	fa0a f202 	lsl.w	r2, sl, r2
   d8eb0:	420a      	tst	r2, r1
   d8eb2:	d009      	beq.n	d8ec8 <__gethex+0x1e4>
   d8eb4:	4553      	cmp	r3, sl
   d8eb6:	dd05      	ble.n	d8ec4 <__gethex+0x1e0>
   d8eb8:	1eb9      	subs	r1, r7, #2
   d8eba:	4620      	mov	r0, r4
   d8ebc:	f000 ff32 	bl	d9d24 <__any_on>
   d8ec0:	2800      	cmp	r0, #0
   d8ec2:	d148      	bne.n	d8f56 <__gethex+0x272>
   d8ec4:	f04f 0a02 	mov.w	sl, #2
   d8ec8:	4639      	mov	r1, r7
   d8eca:	4620      	mov	r0, r4
   d8ecc:	f7ff fea2 	bl	d8c14 <rshift>
   d8ed0:	443d      	add	r5, r7
   d8ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8ed6:	42ab      	cmp	r3, r5
   d8ed8:	da4f      	bge.n	d8f7a <__gethex+0x296>
   d8eda:	ee18 0a10 	vmov	r0, s16
   d8ede:	4621      	mov	r1, r4
   d8ee0:	f000 fb36 	bl	d9550 <_Bfree>
   d8ee4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8ee6:	2300      	movs	r3, #0
   d8ee8:	6013      	str	r3, [r2, #0]
   d8eea:	27a3      	movs	r7, #163	; 0xa3
   d8eec:	e78f      	b.n	d8e0e <__gethex+0x12a>
   d8eee:	3101      	adds	r1, #1
   d8ef0:	105b      	asrs	r3, r3, #1
   d8ef2:	e7a7      	b.n	d8e44 <__gethex+0x160>
   d8ef4:	1e73      	subs	r3, r6, #1
   d8ef6:	9a05      	ldr	r2, [sp, #20]
   d8ef8:	9303      	str	r3, [sp, #12]
   d8efa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8efe:	4293      	cmp	r3, r2
   d8f00:	d019      	beq.n	d8f36 <__gethex+0x252>
   d8f02:	f1bb 0f20 	cmp.w	fp, #32
   d8f06:	d107      	bne.n	d8f18 <__gethex+0x234>
   d8f08:	9b02      	ldr	r3, [sp, #8]
   d8f0a:	9a00      	ldr	r2, [sp, #0]
   d8f0c:	f843 2b04 	str.w	r2, [r3], #4
   d8f10:	9302      	str	r3, [sp, #8]
   d8f12:	2300      	movs	r3, #0
   d8f14:	9300      	str	r3, [sp, #0]
   d8f16:	469b      	mov	fp, r3
   d8f18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8f1c:	f7ff fecc 	bl	d8cb8 <__hexdig_fun>
   d8f20:	9b00      	ldr	r3, [sp, #0]
   d8f22:	f000 000f 	and.w	r0, r0, #15
   d8f26:	fa00 f00b 	lsl.w	r0, r0, fp
   d8f2a:	4303      	orrs	r3, r0
   d8f2c:	9300      	str	r3, [sp, #0]
   d8f2e:	f10b 0b04 	add.w	fp, fp, #4
   d8f32:	9b03      	ldr	r3, [sp, #12]
   d8f34:	e00d      	b.n	d8f52 <__gethex+0x26e>
   d8f36:	9b03      	ldr	r3, [sp, #12]
   d8f38:	9a06      	ldr	r2, [sp, #24]
   d8f3a:	4413      	add	r3, r2
   d8f3c:	42bb      	cmp	r3, r7
   d8f3e:	d3e0      	bcc.n	d8f02 <__gethex+0x21e>
   d8f40:	4618      	mov	r0, r3
   d8f42:	9901      	ldr	r1, [sp, #4]
   d8f44:	9307      	str	r3, [sp, #28]
   d8f46:	4652      	mov	r2, sl
   d8f48:	f7fe fccb 	bl	d78e2 <strncmp>
   d8f4c:	9b07      	ldr	r3, [sp, #28]
   d8f4e:	2800      	cmp	r0, #0
   d8f50:	d1d7      	bne.n	d8f02 <__gethex+0x21e>
   d8f52:	461e      	mov	r6, r3
   d8f54:	e788      	b.n	d8e68 <__gethex+0x184>
   d8f56:	f04f 0a03 	mov.w	sl, #3
   d8f5a:	e7b5      	b.n	d8ec8 <__gethex+0x1e4>
   d8f5c:	da0a      	bge.n	d8f74 <__gethex+0x290>
   d8f5e:	1a37      	subs	r7, r6, r0
   d8f60:	4621      	mov	r1, r4
   d8f62:	ee18 0a10 	vmov	r0, s16
   d8f66:	463a      	mov	r2, r7
   d8f68:	f000 fcc8 	bl	d98fc <__lshift>
   d8f6c:	1bed      	subs	r5, r5, r7
   d8f6e:	4604      	mov	r4, r0
   d8f70:	f100 0914 	add.w	r9, r0, #20
   d8f74:	f04f 0a00 	mov.w	sl, #0
   d8f78:	e7ab      	b.n	d8ed2 <__gethex+0x1ee>
   d8f7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8f7e:	42a8      	cmp	r0, r5
   d8f80:	dd6d      	ble.n	d905e <__gethex+0x37a>
   d8f82:	1b45      	subs	r5, r0, r5
   d8f84:	42ae      	cmp	r6, r5
   d8f86:	dc31      	bgt.n	d8fec <__gethex+0x308>
   d8f88:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8f8c:	2b02      	cmp	r3, #2
   d8f8e:	d023      	beq.n	d8fd8 <__gethex+0x2f4>
   d8f90:	2b03      	cmp	r3, #3
   d8f92:	d025      	beq.n	d8fe0 <__gethex+0x2fc>
   d8f94:	2b01      	cmp	r3, #1
   d8f96:	d115      	bne.n	d8fc4 <__gethex+0x2e0>
   d8f98:	42ae      	cmp	r6, r5
   d8f9a:	d113      	bne.n	d8fc4 <__gethex+0x2e0>
   d8f9c:	2e01      	cmp	r6, #1
   d8f9e:	d10b      	bne.n	d8fb8 <__gethex+0x2d4>
   d8fa0:	9a04      	ldr	r2, [sp, #16]
   d8fa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8fa6:	6013      	str	r3, [r2, #0]
   d8fa8:	2301      	movs	r3, #1
   d8faa:	6123      	str	r3, [r4, #16]
   d8fac:	f8c9 3000 	str.w	r3, [r9]
   d8fb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8fb2:	2762      	movs	r7, #98	; 0x62
   d8fb4:	601c      	str	r4, [r3, #0]
   d8fb6:	e72a      	b.n	d8e0e <__gethex+0x12a>
   d8fb8:	1e71      	subs	r1, r6, #1
   d8fba:	4620      	mov	r0, r4
   d8fbc:	f000 feb2 	bl	d9d24 <__any_on>
   d8fc0:	2800      	cmp	r0, #0
   d8fc2:	d1ed      	bne.n	d8fa0 <__gethex+0x2bc>
   d8fc4:	ee18 0a10 	vmov	r0, s16
   d8fc8:	4621      	mov	r1, r4
   d8fca:	f000 fac1 	bl	d9550 <_Bfree>
   d8fce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8fd0:	2300      	movs	r3, #0
   d8fd2:	6013      	str	r3, [r2, #0]
   d8fd4:	2750      	movs	r7, #80	; 0x50
   d8fd6:	e71a      	b.n	d8e0e <__gethex+0x12a>
   d8fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8fda:	2b00      	cmp	r3, #0
   d8fdc:	d1f2      	bne.n	d8fc4 <__gethex+0x2e0>
   d8fde:	e7df      	b.n	d8fa0 <__gethex+0x2bc>
   d8fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8fe2:	2b00      	cmp	r3, #0
   d8fe4:	d1dc      	bne.n	d8fa0 <__gethex+0x2bc>
   d8fe6:	e7ed      	b.n	d8fc4 <__gethex+0x2e0>
   d8fe8:	000da548 	.word	0x000da548
   d8fec:	1e6f      	subs	r7, r5, #1
   d8fee:	f1ba 0f00 	cmp.w	sl, #0
   d8ff2:	d131      	bne.n	d9058 <__gethex+0x374>
   d8ff4:	b127      	cbz	r7, d9000 <__gethex+0x31c>
   d8ff6:	4639      	mov	r1, r7
   d8ff8:	4620      	mov	r0, r4
   d8ffa:	f000 fe93 	bl	d9d24 <__any_on>
   d8ffe:	4682      	mov	sl, r0
   d9000:	117b      	asrs	r3, r7, #5
   d9002:	2101      	movs	r1, #1
   d9004:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9008:	f007 071f 	and.w	r7, r7, #31
   d900c:	fa01 f707 	lsl.w	r7, r1, r7
   d9010:	421f      	tst	r7, r3
   d9012:	4629      	mov	r1, r5
   d9014:	4620      	mov	r0, r4
   d9016:	bf18      	it	ne
   d9018:	f04a 0a02 	orrne.w	sl, sl, #2
   d901c:	1b76      	subs	r6, r6, r5
   d901e:	f7ff fdf9 	bl	d8c14 <rshift>
   d9022:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9026:	2702      	movs	r7, #2
   d9028:	f1ba 0f00 	cmp.w	sl, #0
   d902c:	d048      	beq.n	d90c0 <__gethex+0x3dc>
   d902e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9032:	2b02      	cmp	r3, #2
   d9034:	d015      	beq.n	d9062 <__gethex+0x37e>
   d9036:	2b03      	cmp	r3, #3
   d9038:	d017      	beq.n	d906a <__gethex+0x386>
   d903a:	2b01      	cmp	r3, #1
   d903c:	d109      	bne.n	d9052 <__gethex+0x36e>
   d903e:	f01a 0f02 	tst.w	sl, #2
   d9042:	d006      	beq.n	d9052 <__gethex+0x36e>
   d9044:	f8d9 0000 	ldr.w	r0, [r9]
   d9048:	ea4a 0a00 	orr.w	sl, sl, r0
   d904c:	f01a 0f01 	tst.w	sl, #1
   d9050:	d10e      	bne.n	d9070 <__gethex+0x38c>
   d9052:	f047 0710 	orr.w	r7, r7, #16
   d9056:	e033      	b.n	d90c0 <__gethex+0x3dc>
   d9058:	f04f 0a01 	mov.w	sl, #1
   d905c:	e7d0      	b.n	d9000 <__gethex+0x31c>
   d905e:	2701      	movs	r7, #1
   d9060:	e7e2      	b.n	d9028 <__gethex+0x344>
   d9062:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9064:	f1c3 0301 	rsb	r3, r3, #1
   d9068:	9315      	str	r3, [sp, #84]	; 0x54
   d906a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d906c:	2b00      	cmp	r3, #0
   d906e:	d0f0      	beq.n	d9052 <__gethex+0x36e>
   d9070:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9074:	f104 0314 	add.w	r3, r4, #20
   d9078:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d907c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9080:	f04f 0c00 	mov.w	ip, #0
   d9084:	4618      	mov	r0, r3
   d9086:	f853 2b04 	ldr.w	r2, [r3], #4
   d908a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d908e:	d01c      	beq.n	d90ca <__gethex+0x3e6>
   d9090:	3201      	adds	r2, #1
   d9092:	6002      	str	r2, [r0, #0]
   d9094:	2f02      	cmp	r7, #2
   d9096:	f104 0314 	add.w	r3, r4, #20
   d909a:	d13a      	bne.n	d9112 <__gethex+0x42e>
   d909c:	f8d8 2000 	ldr.w	r2, [r8]
   d90a0:	3a01      	subs	r2, #1
   d90a2:	42b2      	cmp	r2, r6
   d90a4:	d10a      	bne.n	d90bc <__gethex+0x3d8>
   d90a6:	1171      	asrs	r1, r6, #5
   d90a8:	2201      	movs	r2, #1
   d90aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d90ae:	f006 061f 	and.w	r6, r6, #31
   d90b2:	fa02 f606 	lsl.w	r6, r2, r6
   d90b6:	421e      	tst	r6, r3
   d90b8:	bf18      	it	ne
   d90ba:	4617      	movne	r7, r2
   d90bc:	f047 0720 	orr.w	r7, r7, #32
   d90c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d90c2:	601c      	str	r4, [r3, #0]
   d90c4:	9b04      	ldr	r3, [sp, #16]
   d90c6:	601d      	str	r5, [r3, #0]
   d90c8:	e6a1      	b.n	d8e0e <__gethex+0x12a>
   d90ca:	4299      	cmp	r1, r3
   d90cc:	f843 cc04 	str.w	ip, [r3, #-4]
   d90d0:	d8d8      	bhi.n	d9084 <__gethex+0x3a0>
   d90d2:	68a3      	ldr	r3, [r4, #8]
   d90d4:	4599      	cmp	r9, r3
   d90d6:	db14      	blt.n	d9102 <__gethex+0x41e>
   d90d8:	6861      	ldr	r1, [r4, #4]
   d90da:	ee18 0a10 	vmov	r0, s16
   d90de:	3101      	adds	r1, #1
   d90e0:	f000 fa02 	bl	d94e8 <_Balloc>
   d90e4:	6922      	ldr	r2, [r4, #16]
   d90e6:	3202      	adds	r2, #2
   d90e8:	f104 010c 	add.w	r1, r4, #12
   d90ec:	4682      	mov	sl, r0
   d90ee:	0092      	lsls	r2, r2, #2
   d90f0:	300c      	adds	r0, #12
   d90f2:	f7fe fb85 	bl	d7800 <memcpy>
   d90f6:	4621      	mov	r1, r4
   d90f8:	ee18 0a10 	vmov	r0, s16
   d90fc:	f000 fa28 	bl	d9550 <_Bfree>
   d9100:	4654      	mov	r4, sl
   d9102:	6923      	ldr	r3, [r4, #16]
   d9104:	1c5a      	adds	r2, r3, #1
   d9106:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d910a:	6122      	str	r2, [r4, #16]
   d910c:	2201      	movs	r2, #1
   d910e:	615a      	str	r2, [r3, #20]
   d9110:	e7c0      	b.n	d9094 <__gethex+0x3b0>
   d9112:	6922      	ldr	r2, [r4, #16]
   d9114:	454a      	cmp	r2, r9
   d9116:	dd0b      	ble.n	d9130 <__gethex+0x44c>
   d9118:	2101      	movs	r1, #1
   d911a:	4620      	mov	r0, r4
   d911c:	f7ff fd7a 	bl	d8c14 <rshift>
   d9120:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9124:	3501      	adds	r5, #1
   d9126:	42ab      	cmp	r3, r5
   d9128:	f6ff aed7 	blt.w	d8eda <__gethex+0x1f6>
   d912c:	2701      	movs	r7, #1
   d912e:	e7c5      	b.n	d90bc <__gethex+0x3d8>
   d9130:	f016 061f 	ands.w	r6, r6, #31
   d9134:	d0fa      	beq.n	d912c <__gethex+0x448>
   d9136:	449b      	add	fp, r3
   d9138:	f1c6 0620 	rsb	r6, r6, #32
   d913c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d9140:	f000 fa99 	bl	d9676 <__hi0bits>
   d9144:	42b0      	cmp	r0, r6
   d9146:	dbe7      	blt.n	d9118 <__gethex+0x434>
   d9148:	e7f0      	b.n	d912c <__gethex+0x448>
   d914a:	bf00      	nop

000d914c <L_shift>:
   d914c:	f1c2 0208 	rsb	r2, r2, #8
   d9150:	0092      	lsls	r2, r2, #2
   d9152:	b570      	push	{r4, r5, r6, lr}
   d9154:	f1c2 0620 	rsb	r6, r2, #32
   d9158:	6843      	ldr	r3, [r0, #4]
   d915a:	6804      	ldr	r4, [r0, #0]
   d915c:	fa03 f506 	lsl.w	r5, r3, r6
   d9160:	432c      	orrs	r4, r5
   d9162:	40d3      	lsrs	r3, r2
   d9164:	6004      	str	r4, [r0, #0]
   d9166:	f840 3f04 	str.w	r3, [r0, #4]!
   d916a:	4288      	cmp	r0, r1
   d916c:	d3f4      	bcc.n	d9158 <L_shift+0xc>
   d916e:	bd70      	pop	{r4, r5, r6, pc}

000d9170 <__match>:
   d9170:	b530      	push	{r4, r5, lr}
   d9172:	6803      	ldr	r3, [r0, #0]
   d9174:	3301      	adds	r3, #1
   d9176:	f811 4b01 	ldrb.w	r4, [r1], #1
   d917a:	b914      	cbnz	r4, d9182 <__match+0x12>
   d917c:	6003      	str	r3, [r0, #0]
   d917e:	2001      	movs	r0, #1
   d9180:	bd30      	pop	{r4, r5, pc}
   d9182:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d918a:	2d19      	cmp	r5, #25
   d918c:	bf98      	it	ls
   d918e:	3220      	addls	r2, #32
   d9190:	42a2      	cmp	r2, r4
   d9192:	d0f0      	beq.n	d9176 <__match+0x6>
   d9194:	2000      	movs	r0, #0
   d9196:	e7f3      	b.n	d9180 <__match+0x10>

000d9198 <__hexnan>:
   d9198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d919c:	680b      	ldr	r3, [r1, #0]
   d919e:	6801      	ldr	r1, [r0, #0]
   d91a0:	115e      	asrs	r6, r3, #5
   d91a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d91a6:	f013 031f 	ands.w	r3, r3, #31
   d91aa:	b087      	sub	sp, #28
   d91ac:	bf18      	it	ne
   d91ae:	3604      	addne	r6, #4
   d91b0:	2500      	movs	r5, #0
   d91b2:	1f37      	subs	r7, r6, #4
   d91b4:	4682      	mov	sl, r0
   d91b6:	4690      	mov	r8, r2
   d91b8:	9301      	str	r3, [sp, #4]
   d91ba:	f846 5c04 	str.w	r5, [r6, #-4]
   d91be:	46b9      	mov	r9, r7
   d91c0:	463c      	mov	r4, r7
   d91c2:	9502      	str	r5, [sp, #8]
   d91c4:	46ab      	mov	fp, r5
   d91c6:	784a      	ldrb	r2, [r1, #1]
   d91c8:	1c4b      	adds	r3, r1, #1
   d91ca:	9303      	str	r3, [sp, #12]
   d91cc:	b342      	cbz	r2, d9220 <__hexnan+0x88>
   d91ce:	4610      	mov	r0, r2
   d91d0:	9105      	str	r1, [sp, #20]
   d91d2:	9204      	str	r2, [sp, #16]
   d91d4:	f7ff fd70 	bl	d8cb8 <__hexdig_fun>
   d91d8:	2800      	cmp	r0, #0
   d91da:	d14f      	bne.n	d927c <__hexnan+0xe4>
   d91dc:	9a04      	ldr	r2, [sp, #16]
   d91de:	9905      	ldr	r1, [sp, #20]
   d91e0:	2a20      	cmp	r2, #32
   d91e2:	d818      	bhi.n	d9216 <__hexnan+0x7e>
   d91e4:	9b02      	ldr	r3, [sp, #8]
   d91e6:	459b      	cmp	fp, r3
   d91e8:	dd13      	ble.n	d9212 <__hexnan+0x7a>
   d91ea:	454c      	cmp	r4, r9
   d91ec:	d206      	bcs.n	d91fc <__hexnan+0x64>
   d91ee:	2d07      	cmp	r5, #7
   d91f0:	dc04      	bgt.n	d91fc <__hexnan+0x64>
   d91f2:	462a      	mov	r2, r5
   d91f4:	4649      	mov	r1, r9
   d91f6:	4620      	mov	r0, r4
   d91f8:	f7ff ffa8 	bl	d914c <L_shift>
   d91fc:	4544      	cmp	r4, r8
   d91fe:	d950      	bls.n	d92a2 <__hexnan+0x10a>
   d9200:	2300      	movs	r3, #0
   d9202:	f1a4 0904 	sub.w	r9, r4, #4
   d9206:	f844 3c04 	str.w	r3, [r4, #-4]
   d920a:	f8cd b008 	str.w	fp, [sp, #8]
   d920e:	464c      	mov	r4, r9
   d9210:	461d      	mov	r5, r3
   d9212:	9903      	ldr	r1, [sp, #12]
   d9214:	e7d7      	b.n	d91c6 <__hexnan+0x2e>
   d9216:	2a29      	cmp	r2, #41	; 0x29
   d9218:	d156      	bne.n	d92c8 <__hexnan+0x130>
   d921a:	3102      	adds	r1, #2
   d921c:	f8ca 1000 	str.w	r1, [sl]
   d9220:	f1bb 0f00 	cmp.w	fp, #0
   d9224:	d050      	beq.n	d92c8 <__hexnan+0x130>
   d9226:	454c      	cmp	r4, r9
   d9228:	d206      	bcs.n	d9238 <__hexnan+0xa0>
   d922a:	2d07      	cmp	r5, #7
   d922c:	dc04      	bgt.n	d9238 <__hexnan+0xa0>
   d922e:	462a      	mov	r2, r5
   d9230:	4649      	mov	r1, r9
   d9232:	4620      	mov	r0, r4
   d9234:	f7ff ff8a 	bl	d914c <L_shift>
   d9238:	4544      	cmp	r4, r8
   d923a:	d934      	bls.n	d92a6 <__hexnan+0x10e>
   d923c:	f1a8 0204 	sub.w	r2, r8, #4
   d9240:	4623      	mov	r3, r4
   d9242:	f853 1b04 	ldr.w	r1, [r3], #4
   d9246:	f842 1f04 	str.w	r1, [r2, #4]!
   d924a:	429f      	cmp	r7, r3
   d924c:	d2f9      	bcs.n	d9242 <__hexnan+0xaa>
   d924e:	1b3b      	subs	r3, r7, r4
   d9250:	f023 0303 	bic.w	r3, r3, #3
   d9254:	3304      	adds	r3, #4
   d9256:	3401      	adds	r4, #1
   d9258:	3e03      	subs	r6, #3
   d925a:	42b4      	cmp	r4, r6
   d925c:	bf88      	it	hi
   d925e:	2304      	movhi	r3, #4
   d9260:	4443      	add	r3, r8
   d9262:	2200      	movs	r2, #0
   d9264:	f843 2b04 	str.w	r2, [r3], #4
   d9268:	429f      	cmp	r7, r3
   d926a:	d2fb      	bcs.n	d9264 <__hexnan+0xcc>
   d926c:	683b      	ldr	r3, [r7, #0]
   d926e:	b91b      	cbnz	r3, d9278 <__hexnan+0xe0>
   d9270:	4547      	cmp	r7, r8
   d9272:	d127      	bne.n	d92c4 <__hexnan+0x12c>
   d9274:	2301      	movs	r3, #1
   d9276:	603b      	str	r3, [r7, #0]
   d9278:	2005      	movs	r0, #5
   d927a:	e026      	b.n	d92ca <__hexnan+0x132>
   d927c:	3501      	adds	r5, #1
   d927e:	2d08      	cmp	r5, #8
   d9280:	f10b 0b01 	add.w	fp, fp, #1
   d9284:	dd06      	ble.n	d9294 <__hexnan+0xfc>
   d9286:	4544      	cmp	r4, r8
   d9288:	d9c3      	bls.n	d9212 <__hexnan+0x7a>
   d928a:	2300      	movs	r3, #0
   d928c:	f844 3c04 	str.w	r3, [r4, #-4]
   d9290:	2501      	movs	r5, #1
   d9292:	3c04      	subs	r4, #4
   d9294:	6822      	ldr	r2, [r4, #0]
   d9296:	f000 000f 	and.w	r0, r0, #15
   d929a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d929e:	6022      	str	r2, [r4, #0]
   d92a0:	e7b7      	b.n	d9212 <__hexnan+0x7a>
   d92a2:	2508      	movs	r5, #8
   d92a4:	e7b5      	b.n	d9212 <__hexnan+0x7a>
   d92a6:	9b01      	ldr	r3, [sp, #4]
   d92a8:	2b00      	cmp	r3, #0
   d92aa:	d0df      	beq.n	d926c <__hexnan+0xd4>
   d92ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d92b0:	f1c3 0320 	rsb	r3, r3, #32
   d92b4:	fa22 f303 	lsr.w	r3, r2, r3
   d92b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d92bc:	401a      	ands	r2, r3
   d92be:	f846 2c04 	str.w	r2, [r6, #-4]
   d92c2:	e7d3      	b.n	d926c <__hexnan+0xd4>
   d92c4:	3f04      	subs	r7, #4
   d92c6:	e7d1      	b.n	d926c <__hexnan+0xd4>
   d92c8:	2004      	movs	r0, #4
   d92ca:	b007      	add	sp, #28
   d92cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d92d0 <_findenv_r>:
   d92d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d92d4:	4607      	mov	r7, r0
   d92d6:	4689      	mov	r9, r1
   d92d8:	4616      	mov	r6, r2
   d92da:	f000 fd61 	bl	d9da0 <__env_lock>
   d92de:	4b18      	ldr	r3, [pc, #96]	; (d9340 <_findenv_r+0x70>)
   d92e0:	681c      	ldr	r4, [r3, #0]
   d92e2:	469a      	mov	sl, r3
   d92e4:	b134      	cbz	r4, d92f4 <_findenv_r+0x24>
   d92e6:	464b      	mov	r3, r9
   d92e8:	4698      	mov	r8, r3
   d92ea:	f813 1b01 	ldrb.w	r1, [r3], #1
   d92ee:	b139      	cbz	r1, d9300 <_findenv_r+0x30>
   d92f0:	293d      	cmp	r1, #61	; 0x3d
   d92f2:	d1f9      	bne.n	d92e8 <_findenv_r+0x18>
   d92f4:	4638      	mov	r0, r7
   d92f6:	f000 fd59 	bl	d9dac <__env_unlock>
   d92fa:	2000      	movs	r0, #0
   d92fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9300:	eba8 0809 	sub.w	r8, r8, r9
   d9304:	46a3      	mov	fp, r4
   d9306:	f854 0b04 	ldr.w	r0, [r4], #4
   d930a:	2800      	cmp	r0, #0
   d930c:	d0f2      	beq.n	d92f4 <_findenv_r+0x24>
   d930e:	4642      	mov	r2, r8
   d9310:	4649      	mov	r1, r9
   d9312:	f7fe fae6 	bl	d78e2 <strncmp>
   d9316:	2800      	cmp	r0, #0
   d9318:	d1f4      	bne.n	d9304 <_findenv_r+0x34>
   d931a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d931e:	eb03 0508 	add.w	r5, r3, r8
   d9322:	f813 3008 	ldrb.w	r3, [r3, r8]
   d9326:	2b3d      	cmp	r3, #61	; 0x3d
   d9328:	d1ec      	bne.n	d9304 <_findenv_r+0x34>
   d932a:	f8da 3000 	ldr.w	r3, [sl]
   d932e:	ebab 0303 	sub.w	r3, fp, r3
   d9332:	109b      	asrs	r3, r3, #2
   d9334:	4638      	mov	r0, r7
   d9336:	6033      	str	r3, [r6, #0]
   d9338:	f000 fd38 	bl	d9dac <__env_unlock>
   d933c:	1c68      	adds	r0, r5, #1
   d933e:	e7dd      	b.n	d92fc <_findenv_r+0x2c>
   d9340:	2003e460 	.word	0x2003e460

000d9344 <_getenv_r>:
   d9344:	b507      	push	{r0, r1, r2, lr}
   d9346:	aa01      	add	r2, sp, #4
   d9348:	f7ff ffc2 	bl	d92d0 <_findenv_r>
   d934c:	b003      	add	sp, #12
   d934e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9354 <__gettzinfo>:
   d9354:	4800      	ldr	r0, [pc, #0]	; (d9358 <__gettzinfo+0x4>)
   d9356:	4770      	bx	lr
   d9358:	2003e298 	.word	0x2003e298

000d935c <gmtime_r>:
   d935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9360:	e9d0 6700 	ldrd	r6, r7, [r0]
   d9364:	460c      	mov	r4, r1
   d9366:	4a51      	ldr	r2, [pc, #324]	; (d94ac <gmtime_r+0x150>)
   d9368:	2300      	movs	r3, #0
   d936a:	4630      	mov	r0, r6
   d936c:	4639      	mov	r1, r7
   d936e:	f7fd ff69 	bl	d7244 <__aeabi_ldivmod>
   d9372:	4639      	mov	r1, r7
   d9374:	4605      	mov	r5, r0
   d9376:	4a4d      	ldr	r2, [pc, #308]	; (d94ac <gmtime_r+0x150>)
   d9378:	4630      	mov	r0, r6
   d937a:	2300      	movs	r3, #0
   d937c:	f7fd ff62 	bl	d7244 <__aeabi_ldivmod>
   d9380:	2a00      	cmp	r2, #0
   d9382:	bfbc      	itt	lt
   d9384:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9388:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d938c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9390:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   d9394:	fbb2 f3f1 	udiv	r3, r2, r1
   d9398:	fb01 2213 	mls	r2, r1, r3, r2
   d939c:	f04f 013c 	mov.w	r1, #60	; 0x3c
   d93a0:	bfac      	ite	ge
   d93a2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   d93a6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   d93aa:	60a3      	str	r3, [r4, #8]
   d93ac:	fbb2 f3f1 	udiv	r3, r2, r1
   d93b0:	fb01 2213 	mls	r2, r1, r3, r2
   d93b4:	6063      	str	r3, [r4, #4]
   d93b6:	6022      	str	r2, [r4, #0]
   d93b8:	1cc3      	adds	r3, r0, #3
   d93ba:	2207      	movs	r2, #7
   d93bc:	fb93 f2f2 	sdiv	r2, r3, r2
   d93c0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   d93c4:	1a9b      	subs	r3, r3, r2
   d93c6:	bf48      	it	mi
   d93c8:	3307      	addmi	r3, #7
   d93ca:	2800      	cmp	r0, #0
   d93cc:	61a3      	str	r3, [r4, #24]
   d93ce:	bfb8      	it	lt
   d93d0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   d93d4:	4936      	ldr	r1, [pc, #216]	; (d94b0 <gmtime_r+0x154>)
   d93d6:	bfae      	itee	ge
   d93d8:	fb90 f1f1 	sdivge	r1, r0, r1
   d93dc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   d93e0:	fb93 f1f1 	sdivlt	r1, r3, r1
   d93e4:	4b33      	ldr	r3, [pc, #204]	; (d94b4 <gmtime_r+0x158>)
   d93e6:	fb03 0001 	mla	r0, r3, r1, r0
   d93ea:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d93ee:	fbb0 f2f2 	udiv	r2, r0, r2
   d93f2:	4402      	add	r2, r0
   d93f4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   d93f8:	fbb0 f3fc 	udiv	r3, r0, ip
   d93fc:	1ad2      	subs	r2, r2, r3
   d93fe:	f240 176d 	movw	r7, #365	; 0x16d
   d9402:	4b2d      	ldr	r3, [pc, #180]	; (d94b8 <gmtime_r+0x15c>)
   d9404:	fbb0 f3f3 	udiv	r3, r0, r3
   d9408:	2664      	movs	r6, #100	; 0x64
   d940a:	1ad3      	subs	r3, r2, r3
   d940c:	fbb3 f5f7 	udiv	r5, r3, r7
   d9410:	fbb3 f3fc 	udiv	r3, r3, ip
   d9414:	fbb5 f2f6 	udiv	r2, r5, r6
   d9418:	1ad3      	subs	r3, r2, r3
   d941a:	4403      	add	r3, r0
   d941c:	fb07 3315 	mls	r3, r7, r5, r3
   d9420:	2099      	movs	r0, #153	; 0x99
   d9422:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   d9426:	f10c 0c02 	add.w	ip, ip, #2
   d942a:	f103 0e01 	add.w	lr, r3, #1
   d942e:	fbbc f7f0 	udiv	r7, ip, r0
   d9432:	4378      	muls	r0, r7
   d9434:	3002      	adds	r0, #2
   d9436:	f04f 0805 	mov.w	r8, #5
   d943a:	fbb0 f0f8 	udiv	r0, r0, r8
   d943e:	ebae 0000 	sub.w	r0, lr, r0
   d9442:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   d9446:	45f4      	cmp	ip, lr
   d9448:	bf94      	ite	ls
   d944a:	f04f 0c02 	movls.w	ip, #2
   d944e:	f06f 0c09 	mvnhi.w	ip, #9
   d9452:	4467      	add	r7, ip
   d9454:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   d9458:	fb0c 5101 	mla	r1, ip, r1, r5
   d945c:	2f01      	cmp	r7, #1
   d945e:	bf98      	it	ls
   d9460:	3101      	addls	r1, #1
   d9462:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9466:	d30c      	bcc.n	d9482 <gmtime_r+0x126>
   d9468:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   d946c:	61e3      	str	r3, [r4, #28]
   d946e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   d9472:	2300      	movs	r3, #0
   d9474:	60e0      	str	r0, [r4, #12]
   d9476:	e9c4 7104 	strd	r7, r1, [r4, #16]
   d947a:	6223      	str	r3, [r4, #32]
   d947c:	4620      	mov	r0, r4
   d947e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9482:	f015 0f03 	tst.w	r5, #3
   d9486:	d102      	bne.n	d948e <gmtime_r+0x132>
   d9488:	fb06 5212 	mls	r2, r6, r2, r5
   d948c:	b95a      	cbnz	r2, d94a6 <gmtime_r+0x14a>
   d948e:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d9492:	fbb5 f2f6 	udiv	r2, r5, r6
   d9496:	fb06 5212 	mls	r2, r6, r2, r5
   d949a:	fab2 f282 	clz	r2, r2
   d949e:	0952      	lsrs	r2, r2, #5
   d94a0:	333b      	adds	r3, #59	; 0x3b
   d94a2:	4413      	add	r3, r2
   d94a4:	e7e2      	b.n	d946c <gmtime_r+0x110>
   d94a6:	2201      	movs	r2, #1
   d94a8:	e7fa      	b.n	d94a0 <gmtime_r+0x144>
   d94aa:	bf00      	nop
   d94ac:	00015180 	.word	0x00015180
   d94b0:	00023ab1 	.word	0x00023ab1
   d94b4:	fffdc54f 	.word	0xfffdc54f
   d94b8:	00023ab0 	.word	0x00023ab0

000d94bc <__retarget_lock_acquire>:
   d94bc:	4770      	bx	lr

000d94be <__retarget_lock_acquire_recursive>:
   d94be:	4770      	bx	lr

000d94c0 <__retarget_lock_release>:
   d94c0:	4770      	bx	lr

000d94c2 <__retarget_lock_release_recursive>:
   d94c2:	4770      	bx	lr

000d94c4 <__ascii_mbtowc>:
   d94c4:	b082      	sub	sp, #8
   d94c6:	b901      	cbnz	r1, d94ca <__ascii_mbtowc+0x6>
   d94c8:	a901      	add	r1, sp, #4
   d94ca:	b142      	cbz	r2, d94de <__ascii_mbtowc+0x1a>
   d94cc:	b14b      	cbz	r3, d94e2 <__ascii_mbtowc+0x1e>
   d94ce:	7813      	ldrb	r3, [r2, #0]
   d94d0:	600b      	str	r3, [r1, #0]
   d94d2:	7812      	ldrb	r2, [r2, #0]
   d94d4:	1e10      	subs	r0, r2, #0
   d94d6:	bf18      	it	ne
   d94d8:	2001      	movne	r0, #1
   d94da:	b002      	add	sp, #8
   d94dc:	4770      	bx	lr
   d94de:	4610      	mov	r0, r2
   d94e0:	e7fb      	b.n	d94da <__ascii_mbtowc+0x16>
   d94e2:	f06f 0001 	mvn.w	r0, #1
   d94e6:	e7f8      	b.n	d94da <__ascii_mbtowc+0x16>

000d94e8 <_Balloc>:
   d94e8:	b570      	push	{r4, r5, r6, lr}
   d94ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d94ec:	4604      	mov	r4, r0
   d94ee:	460d      	mov	r5, r1
   d94f0:	b93e      	cbnz	r6, d9502 <_Balloc+0x1a>
   d94f2:	2010      	movs	r0, #16
   d94f4:	f7fb fffe 	bl	d54f4 <malloc>
   d94f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d94fc:	6260      	str	r0, [r4, #36]	; 0x24
   d94fe:	6006      	str	r6, [r0, #0]
   d9500:	60c6      	str	r6, [r0, #12]
   d9502:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d9504:	68f3      	ldr	r3, [r6, #12]
   d9506:	b183      	cbz	r3, d952a <_Balloc+0x42>
   d9508:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d950a:	68db      	ldr	r3, [r3, #12]
   d950c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d9510:	b9b8      	cbnz	r0, d9542 <_Balloc+0x5a>
   d9512:	2101      	movs	r1, #1
   d9514:	fa01 f605 	lsl.w	r6, r1, r5
   d9518:	1d72      	adds	r2, r6, #5
   d951a:	0092      	lsls	r2, r2, #2
   d951c:	4620      	mov	r0, r4
   d951e:	f000 fc22 	bl	d9d66 <_calloc_r>
   d9522:	b160      	cbz	r0, d953e <_Balloc+0x56>
   d9524:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d9528:	e00e      	b.n	d9548 <_Balloc+0x60>
   d952a:	2221      	movs	r2, #33	; 0x21
   d952c:	2104      	movs	r1, #4
   d952e:	4620      	mov	r0, r4
   d9530:	f000 fc19 	bl	d9d66 <_calloc_r>
   d9534:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9536:	60f0      	str	r0, [r6, #12]
   d9538:	68db      	ldr	r3, [r3, #12]
   d953a:	2b00      	cmp	r3, #0
   d953c:	d1e4      	bne.n	d9508 <_Balloc+0x20>
   d953e:	2000      	movs	r0, #0
   d9540:	bd70      	pop	{r4, r5, r6, pc}
   d9542:	6802      	ldr	r2, [r0, #0]
   d9544:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d9548:	2300      	movs	r3, #0
   d954a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d954e:	e7f7      	b.n	d9540 <_Balloc+0x58>

000d9550 <_Bfree>:
   d9550:	b570      	push	{r4, r5, r6, lr}
   d9552:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9554:	4605      	mov	r5, r0
   d9556:	460c      	mov	r4, r1
   d9558:	b93e      	cbnz	r6, d956a <_Bfree+0x1a>
   d955a:	2010      	movs	r0, #16
   d955c:	f7fb ffca 	bl	d54f4 <malloc>
   d9560:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9564:	6268      	str	r0, [r5, #36]	; 0x24
   d9566:	6006      	str	r6, [r0, #0]
   d9568:	60c6      	str	r6, [r0, #12]
   d956a:	b13c      	cbz	r4, d957c <_Bfree+0x2c>
   d956c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d956e:	6862      	ldr	r2, [r4, #4]
   d9570:	68db      	ldr	r3, [r3, #12]
   d9572:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9576:	6021      	str	r1, [r4, #0]
   d9578:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d957c:	bd70      	pop	{r4, r5, r6, pc}

000d957e <__multadd>:
   d957e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9582:	690e      	ldr	r6, [r1, #16]
   d9584:	4607      	mov	r7, r0
   d9586:	4698      	mov	r8, r3
   d9588:	460c      	mov	r4, r1
   d958a:	f101 0014 	add.w	r0, r1, #20
   d958e:	2300      	movs	r3, #0
   d9590:	6805      	ldr	r5, [r0, #0]
   d9592:	b2a9      	uxth	r1, r5
   d9594:	fb02 8101 	mla	r1, r2, r1, r8
   d9598:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d959c:	0c2d      	lsrs	r5, r5, #16
   d959e:	fb02 c505 	mla	r5, r2, r5, ip
   d95a2:	b289      	uxth	r1, r1
   d95a4:	3301      	adds	r3, #1
   d95a6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d95aa:	429e      	cmp	r6, r3
   d95ac:	f840 1b04 	str.w	r1, [r0], #4
   d95b0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d95b4:	dcec      	bgt.n	d9590 <__multadd+0x12>
   d95b6:	f1b8 0f00 	cmp.w	r8, #0
   d95ba:	d01b      	beq.n	d95f4 <__multadd+0x76>
   d95bc:	68a3      	ldr	r3, [r4, #8]
   d95be:	42b3      	cmp	r3, r6
   d95c0:	dc12      	bgt.n	d95e8 <__multadd+0x6a>
   d95c2:	6861      	ldr	r1, [r4, #4]
   d95c4:	4638      	mov	r0, r7
   d95c6:	3101      	adds	r1, #1
   d95c8:	f7ff ff8e 	bl	d94e8 <_Balloc>
   d95cc:	6922      	ldr	r2, [r4, #16]
   d95ce:	3202      	adds	r2, #2
   d95d0:	f104 010c 	add.w	r1, r4, #12
   d95d4:	4605      	mov	r5, r0
   d95d6:	0092      	lsls	r2, r2, #2
   d95d8:	300c      	adds	r0, #12
   d95da:	f7fe f911 	bl	d7800 <memcpy>
   d95de:	4621      	mov	r1, r4
   d95e0:	4638      	mov	r0, r7
   d95e2:	f7ff ffb5 	bl	d9550 <_Bfree>
   d95e6:	462c      	mov	r4, r5
   d95e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d95ec:	3601      	adds	r6, #1
   d95ee:	f8c3 8014 	str.w	r8, [r3, #20]
   d95f2:	6126      	str	r6, [r4, #16]
   d95f4:	4620      	mov	r0, r4
   d95f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d95fa <__s2b>:
   d95fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d95fe:	460c      	mov	r4, r1
   d9600:	4615      	mov	r5, r2
   d9602:	461f      	mov	r7, r3
   d9604:	2209      	movs	r2, #9
   d9606:	3308      	adds	r3, #8
   d9608:	4606      	mov	r6, r0
   d960a:	fb93 f3f2 	sdiv	r3, r3, r2
   d960e:	2100      	movs	r1, #0
   d9610:	2201      	movs	r2, #1
   d9612:	429a      	cmp	r2, r3
   d9614:	db20      	blt.n	d9658 <__s2b+0x5e>
   d9616:	4630      	mov	r0, r6
   d9618:	f7ff ff66 	bl	d94e8 <_Balloc>
   d961c:	9b08      	ldr	r3, [sp, #32]
   d961e:	6143      	str	r3, [r0, #20]
   d9620:	2d09      	cmp	r5, #9
   d9622:	f04f 0301 	mov.w	r3, #1
   d9626:	6103      	str	r3, [r0, #16]
   d9628:	dd19      	ble.n	d965e <__s2b+0x64>
   d962a:	f104 0909 	add.w	r9, r4, #9
   d962e:	46c8      	mov	r8, r9
   d9630:	442c      	add	r4, r5
   d9632:	f818 3b01 	ldrb.w	r3, [r8], #1
   d9636:	4601      	mov	r1, r0
   d9638:	3b30      	subs	r3, #48	; 0x30
   d963a:	220a      	movs	r2, #10
   d963c:	4630      	mov	r0, r6
   d963e:	f7ff ff9e 	bl	d957e <__multadd>
   d9642:	45a0      	cmp	r8, r4
   d9644:	d1f5      	bne.n	d9632 <__s2b+0x38>
   d9646:	f1a5 0408 	sub.w	r4, r5, #8
   d964a:	444c      	add	r4, r9
   d964c:	1b2d      	subs	r5, r5, r4
   d964e:	1963      	adds	r3, r4, r5
   d9650:	42bb      	cmp	r3, r7
   d9652:	db07      	blt.n	d9664 <__s2b+0x6a>
   d9654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9658:	0052      	lsls	r2, r2, #1
   d965a:	3101      	adds	r1, #1
   d965c:	e7d9      	b.n	d9612 <__s2b+0x18>
   d965e:	340a      	adds	r4, #10
   d9660:	2509      	movs	r5, #9
   d9662:	e7f3      	b.n	d964c <__s2b+0x52>
   d9664:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9668:	4601      	mov	r1, r0
   d966a:	3b30      	subs	r3, #48	; 0x30
   d966c:	220a      	movs	r2, #10
   d966e:	4630      	mov	r0, r6
   d9670:	f7ff ff85 	bl	d957e <__multadd>
   d9674:	e7eb      	b.n	d964e <__s2b+0x54>

000d9676 <__hi0bits>:
   d9676:	0c03      	lsrs	r3, r0, #16
   d9678:	041b      	lsls	r3, r3, #16
   d967a:	b9d3      	cbnz	r3, d96b2 <__hi0bits+0x3c>
   d967c:	0400      	lsls	r0, r0, #16
   d967e:	2310      	movs	r3, #16
   d9680:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9684:	bf04      	itt	eq
   d9686:	0200      	lsleq	r0, r0, #8
   d9688:	3308      	addeq	r3, #8
   d968a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d968e:	bf04      	itt	eq
   d9690:	0100      	lsleq	r0, r0, #4
   d9692:	3304      	addeq	r3, #4
   d9694:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9698:	bf04      	itt	eq
   d969a:	0080      	lsleq	r0, r0, #2
   d969c:	3302      	addeq	r3, #2
   d969e:	2800      	cmp	r0, #0
   d96a0:	db05      	blt.n	d96ae <__hi0bits+0x38>
   d96a2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d96a6:	f103 0301 	add.w	r3, r3, #1
   d96aa:	bf08      	it	eq
   d96ac:	2320      	moveq	r3, #32
   d96ae:	4618      	mov	r0, r3
   d96b0:	4770      	bx	lr
   d96b2:	2300      	movs	r3, #0
   d96b4:	e7e4      	b.n	d9680 <__hi0bits+0xa>

000d96b6 <__lo0bits>:
   d96b6:	6803      	ldr	r3, [r0, #0]
   d96b8:	f013 0207 	ands.w	r2, r3, #7
   d96bc:	4601      	mov	r1, r0
   d96be:	d00b      	beq.n	d96d8 <__lo0bits+0x22>
   d96c0:	07da      	lsls	r2, r3, #31
   d96c2:	d424      	bmi.n	d970e <__lo0bits+0x58>
   d96c4:	0798      	lsls	r0, r3, #30
   d96c6:	bf49      	itett	mi
   d96c8:	085b      	lsrmi	r3, r3, #1
   d96ca:	089b      	lsrpl	r3, r3, #2
   d96cc:	2001      	movmi	r0, #1
   d96ce:	600b      	strmi	r3, [r1, #0]
   d96d0:	bf5c      	itt	pl
   d96d2:	600b      	strpl	r3, [r1, #0]
   d96d4:	2002      	movpl	r0, #2
   d96d6:	4770      	bx	lr
   d96d8:	b298      	uxth	r0, r3
   d96da:	b9b0      	cbnz	r0, d970a <__lo0bits+0x54>
   d96dc:	0c1b      	lsrs	r3, r3, #16
   d96de:	2010      	movs	r0, #16
   d96e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   d96e4:	bf04      	itt	eq
   d96e6:	0a1b      	lsreq	r3, r3, #8
   d96e8:	3008      	addeq	r0, #8
   d96ea:	071a      	lsls	r2, r3, #28
   d96ec:	bf04      	itt	eq
   d96ee:	091b      	lsreq	r3, r3, #4
   d96f0:	3004      	addeq	r0, #4
   d96f2:	079a      	lsls	r2, r3, #30
   d96f4:	bf04      	itt	eq
   d96f6:	089b      	lsreq	r3, r3, #2
   d96f8:	3002      	addeq	r0, #2
   d96fa:	07da      	lsls	r2, r3, #31
   d96fc:	d403      	bmi.n	d9706 <__lo0bits+0x50>
   d96fe:	085b      	lsrs	r3, r3, #1
   d9700:	f100 0001 	add.w	r0, r0, #1
   d9704:	d005      	beq.n	d9712 <__lo0bits+0x5c>
   d9706:	600b      	str	r3, [r1, #0]
   d9708:	4770      	bx	lr
   d970a:	4610      	mov	r0, r2
   d970c:	e7e8      	b.n	d96e0 <__lo0bits+0x2a>
   d970e:	2000      	movs	r0, #0
   d9710:	4770      	bx	lr
   d9712:	2020      	movs	r0, #32
   d9714:	4770      	bx	lr

000d9716 <__i2b>:
   d9716:	b510      	push	{r4, lr}
   d9718:	460c      	mov	r4, r1
   d971a:	2101      	movs	r1, #1
   d971c:	f7ff fee4 	bl	d94e8 <_Balloc>
   d9720:	2201      	movs	r2, #1
   d9722:	6144      	str	r4, [r0, #20]
   d9724:	6102      	str	r2, [r0, #16]
   d9726:	bd10      	pop	{r4, pc}

000d9728 <__multiply>:
   d9728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d972c:	4615      	mov	r5, r2
   d972e:	690a      	ldr	r2, [r1, #16]
   d9730:	692b      	ldr	r3, [r5, #16]
   d9732:	429a      	cmp	r2, r3
   d9734:	bfb8      	it	lt
   d9736:	460b      	movlt	r3, r1
   d9738:	460c      	mov	r4, r1
   d973a:	bfbc      	itt	lt
   d973c:	462c      	movlt	r4, r5
   d973e:	461d      	movlt	r5, r3
   d9740:	6927      	ldr	r7, [r4, #16]
   d9742:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d9746:	68a3      	ldr	r3, [r4, #8]
   d9748:	6861      	ldr	r1, [r4, #4]
   d974a:	eb07 0609 	add.w	r6, r7, r9
   d974e:	42b3      	cmp	r3, r6
   d9750:	bfb8      	it	lt
   d9752:	3101      	addlt	r1, #1
   d9754:	b085      	sub	sp, #20
   d9756:	f7ff fec7 	bl	d94e8 <_Balloc>
   d975a:	f100 0114 	add.w	r1, r0, #20
   d975e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d9762:	460b      	mov	r3, r1
   d9764:	2200      	movs	r2, #0
   d9766:	4543      	cmp	r3, r8
   d9768:	d31d      	bcc.n	d97a6 <__multiply+0x7e>
   d976a:	f104 0314 	add.w	r3, r4, #20
   d976e:	f105 0214 	add.w	r2, r5, #20
   d9772:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d9776:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d977a:	9302      	str	r3, [sp, #8]
   d977c:	1b3b      	subs	r3, r7, r4
   d977e:	3b15      	subs	r3, #21
   d9780:	f023 0303 	bic.w	r3, r3, #3
   d9784:	3304      	adds	r3, #4
   d9786:	f104 0515 	add.w	r5, r4, #21
   d978a:	42af      	cmp	r7, r5
   d978c:	bf38      	it	cc
   d978e:	2304      	movcc	r3, #4
   d9790:	9301      	str	r3, [sp, #4]
   d9792:	9b02      	ldr	r3, [sp, #8]
   d9794:	9203      	str	r2, [sp, #12]
   d9796:	4293      	cmp	r3, r2
   d9798:	d808      	bhi.n	d97ac <__multiply+0x84>
   d979a:	2e00      	cmp	r6, #0
   d979c:	dc5a      	bgt.n	d9854 <__multiply+0x12c>
   d979e:	6106      	str	r6, [r0, #16]
   d97a0:	b005      	add	sp, #20
   d97a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d97a6:	f843 2b04 	str.w	r2, [r3], #4
   d97aa:	e7dc      	b.n	d9766 <__multiply+0x3e>
   d97ac:	f8b2 a000 	ldrh.w	sl, [r2]
   d97b0:	f1ba 0f00 	cmp.w	sl, #0
   d97b4:	d024      	beq.n	d9800 <__multiply+0xd8>
   d97b6:	f104 0e14 	add.w	lr, r4, #20
   d97ba:	4689      	mov	r9, r1
   d97bc:	f04f 0c00 	mov.w	ip, #0
   d97c0:	f85e 5b04 	ldr.w	r5, [lr], #4
   d97c4:	f8d9 b000 	ldr.w	fp, [r9]
   d97c8:	b2ab      	uxth	r3, r5
   d97ca:	fa1f fb8b 	uxth.w	fp, fp
   d97ce:	fb0a b303 	mla	r3, sl, r3, fp
   d97d2:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d97d6:	f8d9 5000 	ldr.w	r5, [r9]
   d97da:	4463      	add	r3, ip
   d97dc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d97e0:	fb0a c50b 	mla	r5, sl, fp, ip
   d97e4:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d97e8:	b29b      	uxth	r3, r3
   d97ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d97ee:	4577      	cmp	r7, lr
   d97f0:	f849 3b04 	str.w	r3, [r9], #4
   d97f4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d97f8:	d8e2      	bhi.n	d97c0 <__multiply+0x98>
   d97fa:	9b01      	ldr	r3, [sp, #4]
   d97fc:	f841 c003 	str.w	ip, [r1, r3]
   d9800:	9b03      	ldr	r3, [sp, #12]
   d9802:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d9806:	3204      	adds	r2, #4
   d9808:	f1b9 0f00 	cmp.w	r9, #0
   d980c:	d020      	beq.n	d9850 <__multiply+0x128>
   d980e:	680b      	ldr	r3, [r1, #0]
   d9810:	f104 0c14 	add.w	ip, r4, #20
   d9814:	468e      	mov	lr, r1
   d9816:	f04f 0a00 	mov.w	sl, #0
   d981a:	f8bc 5000 	ldrh.w	r5, [ip]
   d981e:	f8be b002 	ldrh.w	fp, [lr, #2]
   d9822:	fb09 b505 	mla	r5, r9, r5, fp
   d9826:	44aa      	add	sl, r5
   d9828:	b29b      	uxth	r3, r3
   d982a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d982e:	f84e 3b04 	str.w	r3, [lr], #4
   d9832:	f85c 3b04 	ldr.w	r3, [ip], #4
   d9836:	f8be 5000 	ldrh.w	r5, [lr]
   d983a:	0c1b      	lsrs	r3, r3, #16
   d983c:	fb09 5303 	mla	r3, r9, r3, r5
   d9840:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d9844:	4567      	cmp	r7, ip
   d9846:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d984a:	d8e6      	bhi.n	d981a <__multiply+0xf2>
   d984c:	9d01      	ldr	r5, [sp, #4]
   d984e:	514b      	str	r3, [r1, r5]
   d9850:	3104      	adds	r1, #4
   d9852:	e79e      	b.n	d9792 <__multiply+0x6a>
   d9854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d9858:	2b00      	cmp	r3, #0
   d985a:	d1a0      	bne.n	d979e <__multiply+0x76>
   d985c:	3e01      	subs	r6, #1
   d985e:	e79c      	b.n	d979a <__multiply+0x72>

000d9860 <__pow5mult>:
   d9860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9864:	4615      	mov	r5, r2
   d9866:	f012 0203 	ands.w	r2, r2, #3
   d986a:	4606      	mov	r6, r0
   d986c:	460f      	mov	r7, r1
   d986e:	d007      	beq.n	d9880 <__pow5mult+0x20>
   d9870:	4c21      	ldr	r4, [pc, #132]	; (d98f8 <__pow5mult+0x98>)
   d9872:	3a01      	subs	r2, #1
   d9874:	2300      	movs	r3, #0
   d9876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d987a:	f7ff fe80 	bl	d957e <__multadd>
   d987e:	4607      	mov	r7, r0
   d9880:	10ad      	asrs	r5, r5, #2
   d9882:	d035      	beq.n	d98f0 <__pow5mult+0x90>
   d9884:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9886:	b93c      	cbnz	r4, d9898 <__pow5mult+0x38>
   d9888:	2010      	movs	r0, #16
   d988a:	f7fb fe33 	bl	d54f4 <malloc>
   d988e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d9892:	6270      	str	r0, [r6, #36]	; 0x24
   d9894:	6004      	str	r4, [r0, #0]
   d9896:	60c4      	str	r4, [r0, #12]
   d9898:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d989c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d98a0:	b94c      	cbnz	r4, d98b6 <__pow5mult+0x56>
   d98a2:	f240 2171 	movw	r1, #625	; 0x271
   d98a6:	4630      	mov	r0, r6
   d98a8:	f7ff ff35 	bl	d9716 <__i2b>
   d98ac:	2300      	movs	r3, #0
   d98ae:	f8c8 0008 	str.w	r0, [r8, #8]
   d98b2:	4604      	mov	r4, r0
   d98b4:	6003      	str	r3, [r0, #0]
   d98b6:	f04f 0900 	mov.w	r9, #0
   d98ba:	07eb      	lsls	r3, r5, #31
   d98bc:	d50a      	bpl.n	d98d4 <__pow5mult+0x74>
   d98be:	4639      	mov	r1, r7
   d98c0:	4622      	mov	r2, r4
   d98c2:	4630      	mov	r0, r6
   d98c4:	f7ff ff30 	bl	d9728 <__multiply>
   d98c8:	4639      	mov	r1, r7
   d98ca:	4680      	mov	r8, r0
   d98cc:	4630      	mov	r0, r6
   d98ce:	f7ff fe3f 	bl	d9550 <_Bfree>
   d98d2:	4647      	mov	r7, r8
   d98d4:	106d      	asrs	r5, r5, #1
   d98d6:	d00b      	beq.n	d98f0 <__pow5mult+0x90>
   d98d8:	6820      	ldr	r0, [r4, #0]
   d98da:	b938      	cbnz	r0, d98ec <__pow5mult+0x8c>
   d98dc:	4622      	mov	r2, r4
   d98de:	4621      	mov	r1, r4
   d98e0:	4630      	mov	r0, r6
   d98e2:	f7ff ff21 	bl	d9728 <__multiply>
   d98e6:	6020      	str	r0, [r4, #0]
   d98e8:	f8c0 9000 	str.w	r9, [r0]
   d98ec:	4604      	mov	r4, r0
   d98ee:	e7e4      	b.n	d98ba <__pow5mult+0x5a>
   d98f0:	4638      	mov	r0, r7
   d98f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d98f6:	bf00      	nop
   d98f8:	000da650 	.word	0x000da650

000d98fc <__lshift>:
   d98fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9900:	460c      	mov	r4, r1
   d9902:	6849      	ldr	r1, [r1, #4]
   d9904:	6923      	ldr	r3, [r4, #16]
   d9906:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d990a:	68a3      	ldr	r3, [r4, #8]
   d990c:	4607      	mov	r7, r0
   d990e:	4691      	mov	r9, r2
   d9910:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9914:	f108 0601 	add.w	r6, r8, #1
   d9918:	42b3      	cmp	r3, r6
   d991a:	db3f      	blt.n	d999c <__lshift+0xa0>
   d991c:	4638      	mov	r0, r7
   d991e:	f7ff fde3 	bl	d94e8 <_Balloc>
   d9922:	2300      	movs	r3, #0
   d9924:	4605      	mov	r5, r0
   d9926:	f100 0114 	add.w	r1, r0, #20
   d992a:	f100 0210 	add.w	r2, r0, #16
   d992e:	4618      	mov	r0, r3
   d9930:	4553      	cmp	r3, sl
   d9932:	db36      	blt.n	d99a2 <__lshift+0xa6>
   d9934:	6920      	ldr	r0, [r4, #16]
   d9936:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d993a:	f104 0314 	add.w	r3, r4, #20
   d993e:	f019 091f 	ands.w	r9, r9, #31
   d9942:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d9946:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d994a:	d02e      	beq.n	d99aa <__lshift+0xae>
   d994c:	f1c9 0e20 	rsb	lr, r9, #32
   d9950:	468a      	mov	sl, r1
   d9952:	2200      	movs	r2, #0
   d9954:	6818      	ldr	r0, [r3, #0]
   d9956:	fa00 f009 	lsl.w	r0, r0, r9
   d995a:	4302      	orrs	r2, r0
   d995c:	f84a 2b04 	str.w	r2, [sl], #4
   d9960:	f853 2b04 	ldr.w	r2, [r3], #4
   d9964:	459c      	cmp	ip, r3
   d9966:	fa22 f20e 	lsr.w	r2, r2, lr
   d996a:	d8f3      	bhi.n	d9954 <__lshift+0x58>
   d996c:	ebac 0304 	sub.w	r3, ip, r4
   d9970:	3b15      	subs	r3, #21
   d9972:	f023 0303 	bic.w	r3, r3, #3
   d9976:	3304      	adds	r3, #4
   d9978:	f104 0015 	add.w	r0, r4, #21
   d997c:	4560      	cmp	r0, ip
   d997e:	bf88      	it	hi
   d9980:	2304      	movhi	r3, #4
   d9982:	50ca      	str	r2, [r1, r3]
   d9984:	b10a      	cbz	r2, d998a <__lshift+0x8e>
   d9986:	f108 0602 	add.w	r6, r8, #2
   d998a:	3e01      	subs	r6, #1
   d998c:	4638      	mov	r0, r7
   d998e:	612e      	str	r6, [r5, #16]
   d9990:	4621      	mov	r1, r4
   d9992:	f7ff fddd 	bl	d9550 <_Bfree>
   d9996:	4628      	mov	r0, r5
   d9998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d999c:	3101      	adds	r1, #1
   d999e:	005b      	lsls	r3, r3, #1
   d99a0:	e7ba      	b.n	d9918 <__lshift+0x1c>
   d99a2:	f842 0f04 	str.w	r0, [r2, #4]!
   d99a6:	3301      	adds	r3, #1
   d99a8:	e7c2      	b.n	d9930 <__lshift+0x34>
   d99aa:	3904      	subs	r1, #4
   d99ac:	f853 2b04 	ldr.w	r2, [r3], #4
   d99b0:	f841 2f04 	str.w	r2, [r1, #4]!
   d99b4:	459c      	cmp	ip, r3
   d99b6:	d8f9      	bhi.n	d99ac <__lshift+0xb0>
   d99b8:	e7e7      	b.n	d998a <__lshift+0x8e>

000d99ba <__mcmp>:
   d99ba:	b530      	push	{r4, r5, lr}
   d99bc:	6902      	ldr	r2, [r0, #16]
   d99be:	690c      	ldr	r4, [r1, #16]
   d99c0:	1b12      	subs	r2, r2, r4
   d99c2:	d10e      	bne.n	d99e2 <__mcmp+0x28>
   d99c4:	f100 0314 	add.w	r3, r0, #20
   d99c8:	3114      	adds	r1, #20
   d99ca:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d99ce:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d99d2:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d99d6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d99da:	42a5      	cmp	r5, r4
   d99dc:	d003      	beq.n	d99e6 <__mcmp+0x2c>
   d99de:	d305      	bcc.n	d99ec <__mcmp+0x32>
   d99e0:	2201      	movs	r2, #1
   d99e2:	4610      	mov	r0, r2
   d99e4:	bd30      	pop	{r4, r5, pc}
   d99e6:	4283      	cmp	r3, r0
   d99e8:	d3f3      	bcc.n	d99d2 <__mcmp+0x18>
   d99ea:	e7fa      	b.n	d99e2 <__mcmp+0x28>
   d99ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d99f0:	e7f7      	b.n	d99e2 <__mcmp+0x28>

000d99f2 <__mdiff>:
   d99f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99f6:	460c      	mov	r4, r1
   d99f8:	4606      	mov	r6, r0
   d99fa:	4611      	mov	r1, r2
   d99fc:	4620      	mov	r0, r4
   d99fe:	4617      	mov	r7, r2
   d9a00:	f7ff ffdb 	bl	d99ba <__mcmp>
   d9a04:	1e05      	subs	r5, r0, #0
   d9a06:	d108      	bne.n	d9a1a <__mdiff+0x28>
   d9a08:	4629      	mov	r1, r5
   d9a0a:	4630      	mov	r0, r6
   d9a0c:	f7ff fd6c 	bl	d94e8 <_Balloc>
   d9a10:	2301      	movs	r3, #1
   d9a12:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d9a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a1a:	bfa4      	itt	ge
   d9a1c:	463b      	movge	r3, r7
   d9a1e:	4627      	movge	r7, r4
   d9a20:	4630      	mov	r0, r6
   d9a22:	6879      	ldr	r1, [r7, #4]
   d9a24:	bfa6      	itte	ge
   d9a26:	461c      	movge	r4, r3
   d9a28:	2500      	movge	r5, #0
   d9a2a:	2501      	movlt	r5, #1
   d9a2c:	f7ff fd5c 	bl	d94e8 <_Balloc>
   d9a30:	693e      	ldr	r6, [r7, #16]
   d9a32:	60c5      	str	r5, [r0, #12]
   d9a34:	6925      	ldr	r5, [r4, #16]
   d9a36:	f107 0114 	add.w	r1, r7, #20
   d9a3a:	f104 0914 	add.w	r9, r4, #20
   d9a3e:	f100 0e14 	add.w	lr, r0, #20
   d9a42:	f107 0210 	add.w	r2, r7, #16
   d9a46:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d9a4a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d9a4e:	46f2      	mov	sl, lr
   d9a50:	2700      	movs	r7, #0
   d9a52:	f859 3b04 	ldr.w	r3, [r9], #4
   d9a56:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d9a5a:	fa1f f883 	uxth.w	r8, r3
   d9a5e:	fa17 f78b 	uxtah	r7, r7, fp
   d9a62:	0c1b      	lsrs	r3, r3, #16
   d9a64:	eba7 0808 	sub.w	r8, r7, r8
   d9a68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d9a6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d9a70:	fa1f f888 	uxth.w	r8, r8
   d9a74:	141f      	asrs	r7, r3, #16
   d9a76:	454d      	cmp	r5, r9
   d9a78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d9a7c:	f84a 3b04 	str.w	r3, [sl], #4
   d9a80:	d8e7      	bhi.n	d9a52 <__mdiff+0x60>
   d9a82:	1b2b      	subs	r3, r5, r4
   d9a84:	3b15      	subs	r3, #21
   d9a86:	f023 0303 	bic.w	r3, r3, #3
   d9a8a:	3304      	adds	r3, #4
   d9a8c:	3415      	adds	r4, #21
   d9a8e:	42a5      	cmp	r5, r4
   d9a90:	bf38      	it	cc
   d9a92:	2304      	movcc	r3, #4
   d9a94:	4419      	add	r1, r3
   d9a96:	4473      	add	r3, lr
   d9a98:	469e      	mov	lr, r3
   d9a9a:	460d      	mov	r5, r1
   d9a9c:	4565      	cmp	r5, ip
   d9a9e:	d30e      	bcc.n	d9abe <__mdiff+0xcc>
   d9aa0:	f10c 0203 	add.w	r2, ip, #3
   d9aa4:	1a52      	subs	r2, r2, r1
   d9aa6:	f022 0203 	bic.w	r2, r2, #3
   d9aaa:	3903      	subs	r1, #3
   d9aac:	458c      	cmp	ip, r1
   d9aae:	bf38      	it	cc
   d9ab0:	2200      	movcc	r2, #0
   d9ab2:	441a      	add	r2, r3
   d9ab4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d9ab8:	b17b      	cbz	r3, d9ada <__mdiff+0xe8>
   d9aba:	6106      	str	r6, [r0, #16]
   d9abc:	e7ab      	b.n	d9a16 <__mdiff+0x24>
   d9abe:	f855 8b04 	ldr.w	r8, [r5], #4
   d9ac2:	fa17 f488 	uxtah	r4, r7, r8
   d9ac6:	1422      	asrs	r2, r4, #16
   d9ac8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d9acc:	b2a4      	uxth	r4, r4
   d9ace:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d9ad2:	f84e 4b04 	str.w	r4, [lr], #4
   d9ad6:	1417      	asrs	r7, r2, #16
   d9ad8:	e7e0      	b.n	d9a9c <__mdiff+0xaa>
   d9ada:	3e01      	subs	r6, #1
   d9adc:	e7ea      	b.n	d9ab4 <__mdiff+0xc2>
	...

000d9ae0 <__ulp>:
   d9ae0:	b082      	sub	sp, #8
   d9ae2:	ed8d 0b00 	vstr	d0, [sp]
   d9ae6:	9b01      	ldr	r3, [sp, #4]
   d9ae8:	4912      	ldr	r1, [pc, #72]	; (d9b34 <__ulp+0x54>)
   d9aea:	4019      	ands	r1, r3
   d9aec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d9af0:	2900      	cmp	r1, #0
   d9af2:	dd05      	ble.n	d9b00 <__ulp+0x20>
   d9af4:	2200      	movs	r2, #0
   d9af6:	460b      	mov	r3, r1
   d9af8:	ec43 2b10 	vmov	d0, r2, r3
   d9afc:	b002      	add	sp, #8
   d9afe:	4770      	bx	lr
   d9b00:	4249      	negs	r1, r1
   d9b02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d9b06:	ea4f 5021 	mov.w	r0, r1, asr #20
   d9b0a:	f04f 0200 	mov.w	r2, #0
   d9b0e:	f04f 0300 	mov.w	r3, #0
   d9b12:	da04      	bge.n	d9b1e <__ulp+0x3e>
   d9b14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d9b18:	fa41 f300 	asr.w	r3, r1, r0
   d9b1c:	e7ec      	b.n	d9af8 <__ulp+0x18>
   d9b1e:	f1a0 0114 	sub.w	r1, r0, #20
   d9b22:	291e      	cmp	r1, #30
   d9b24:	bfda      	itte	le
   d9b26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d9b2a:	fa20 f101 	lsrle.w	r1, r0, r1
   d9b2e:	2101      	movgt	r1, #1
   d9b30:	460a      	mov	r2, r1
   d9b32:	e7e1      	b.n	d9af8 <__ulp+0x18>
   d9b34:	7ff00000 	.word	0x7ff00000

000d9b38 <__b2d>:
   d9b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b3a:	6905      	ldr	r5, [r0, #16]
   d9b3c:	f100 0714 	add.w	r7, r0, #20
   d9b40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d9b44:	1f2e      	subs	r6, r5, #4
   d9b46:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9b4a:	4620      	mov	r0, r4
   d9b4c:	f7ff fd93 	bl	d9676 <__hi0bits>
   d9b50:	f1c0 0320 	rsb	r3, r0, #32
   d9b54:	280a      	cmp	r0, #10
   d9b56:	f8df c07c 	ldr.w	ip, [pc, #124]	; d9bd4 <__b2d+0x9c>
   d9b5a:	600b      	str	r3, [r1, #0]
   d9b5c:	dc14      	bgt.n	d9b88 <__b2d+0x50>
   d9b5e:	f1c0 0e0b 	rsb	lr, r0, #11
   d9b62:	fa24 f10e 	lsr.w	r1, r4, lr
   d9b66:	42b7      	cmp	r7, r6
   d9b68:	ea41 030c 	orr.w	r3, r1, ip
   d9b6c:	bf34      	ite	cc
   d9b6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9b72:	2100      	movcs	r1, #0
   d9b74:	3015      	adds	r0, #21
   d9b76:	fa04 f000 	lsl.w	r0, r4, r0
   d9b7a:	fa21 f10e 	lsr.w	r1, r1, lr
   d9b7e:	ea40 0201 	orr.w	r2, r0, r1
   d9b82:	ec43 2b10 	vmov	d0, r2, r3
   d9b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9b88:	42b7      	cmp	r7, r6
   d9b8a:	bf3a      	itte	cc
   d9b8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9b90:	f1a5 0608 	subcc.w	r6, r5, #8
   d9b94:	2100      	movcs	r1, #0
   d9b96:	380b      	subs	r0, #11
   d9b98:	d017      	beq.n	d9bca <__b2d+0x92>
   d9b9a:	f1c0 0c20 	rsb	ip, r0, #32
   d9b9e:	fa04 f500 	lsl.w	r5, r4, r0
   d9ba2:	42be      	cmp	r6, r7
   d9ba4:	fa21 f40c 	lsr.w	r4, r1, ip
   d9ba8:	ea45 0504 	orr.w	r5, r5, r4
   d9bac:	bf8c      	ite	hi
   d9bae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d9bb2:	2400      	movls	r4, #0
   d9bb4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d9bb8:	fa01 f000 	lsl.w	r0, r1, r0
   d9bbc:	fa24 f40c 	lsr.w	r4, r4, ip
   d9bc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9bc4:	ea40 0204 	orr.w	r2, r0, r4
   d9bc8:	e7db      	b.n	d9b82 <__b2d+0x4a>
   d9bca:	ea44 030c 	orr.w	r3, r4, ip
   d9bce:	460a      	mov	r2, r1
   d9bd0:	e7d7      	b.n	d9b82 <__b2d+0x4a>
   d9bd2:	bf00      	nop
   d9bd4:	3ff00000 	.word	0x3ff00000

000d9bd8 <__d2b>:
   d9bd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9bdc:	4689      	mov	r9, r1
   d9bde:	2101      	movs	r1, #1
   d9be0:	ec57 6b10 	vmov	r6, r7, d0
   d9be4:	4690      	mov	r8, r2
   d9be6:	f7ff fc7f 	bl	d94e8 <_Balloc>
   d9bea:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d9bee:	4604      	mov	r4, r0
   d9bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d9bf4:	bb35      	cbnz	r5, d9c44 <__d2b+0x6c>
   d9bf6:	2e00      	cmp	r6, #0
   d9bf8:	9301      	str	r3, [sp, #4]
   d9bfa:	d028      	beq.n	d9c4e <__d2b+0x76>
   d9bfc:	4668      	mov	r0, sp
   d9bfe:	9600      	str	r6, [sp, #0]
   d9c00:	f7ff fd59 	bl	d96b6 <__lo0bits>
   d9c04:	9900      	ldr	r1, [sp, #0]
   d9c06:	b300      	cbz	r0, d9c4a <__d2b+0x72>
   d9c08:	9a01      	ldr	r2, [sp, #4]
   d9c0a:	f1c0 0320 	rsb	r3, r0, #32
   d9c0e:	fa02 f303 	lsl.w	r3, r2, r3
   d9c12:	430b      	orrs	r3, r1
   d9c14:	40c2      	lsrs	r2, r0
   d9c16:	6163      	str	r3, [r4, #20]
   d9c18:	9201      	str	r2, [sp, #4]
   d9c1a:	9b01      	ldr	r3, [sp, #4]
   d9c1c:	61a3      	str	r3, [r4, #24]
   d9c1e:	2b00      	cmp	r3, #0
   d9c20:	bf14      	ite	ne
   d9c22:	2202      	movne	r2, #2
   d9c24:	2201      	moveq	r2, #1
   d9c26:	6122      	str	r2, [r4, #16]
   d9c28:	b1d5      	cbz	r5, d9c60 <__d2b+0x88>
   d9c2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d9c2e:	4405      	add	r5, r0
   d9c30:	f8c9 5000 	str.w	r5, [r9]
   d9c34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9c38:	f8c8 0000 	str.w	r0, [r8]
   d9c3c:	4620      	mov	r0, r4
   d9c3e:	b003      	add	sp, #12
   d9c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9c48:	e7d5      	b.n	d9bf6 <__d2b+0x1e>
   d9c4a:	6161      	str	r1, [r4, #20]
   d9c4c:	e7e5      	b.n	d9c1a <__d2b+0x42>
   d9c4e:	a801      	add	r0, sp, #4
   d9c50:	f7ff fd31 	bl	d96b6 <__lo0bits>
   d9c54:	9b01      	ldr	r3, [sp, #4]
   d9c56:	6163      	str	r3, [r4, #20]
   d9c58:	2201      	movs	r2, #1
   d9c5a:	6122      	str	r2, [r4, #16]
   d9c5c:	3020      	adds	r0, #32
   d9c5e:	e7e3      	b.n	d9c28 <__d2b+0x50>
   d9c60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d9c64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9c68:	f8c9 0000 	str.w	r0, [r9]
   d9c6c:	6918      	ldr	r0, [r3, #16]
   d9c6e:	f7ff fd02 	bl	d9676 <__hi0bits>
   d9c72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d9c76:	e7df      	b.n	d9c38 <__d2b+0x60>

000d9c78 <__ratio>:
   d9c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c7c:	4688      	mov	r8, r1
   d9c7e:	4669      	mov	r1, sp
   d9c80:	4681      	mov	r9, r0
   d9c82:	f7ff ff59 	bl	d9b38 <__b2d>
   d9c86:	a901      	add	r1, sp, #4
   d9c88:	4640      	mov	r0, r8
   d9c8a:	ec55 4b10 	vmov	r4, r5, d0
   d9c8e:	f7ff ff53 	bl	d9b38 <__b2d>
   d9c92:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9c96:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9c9a:	eba3 0c02 	sub.w	ip, r3, r2
   d9c9e:	e9dd 3200 	ldrd	r3, r2, [sp]
   d9ca2:	1a9b      	subs	r3, r3, r2
   d9ca4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d9ca8:	ec51 0b10 	vmov	r0, r1, d0
   d9cac:	2b00      	cmp	r3, #0
   d9cae:	bfd6      	itet	le
   d9cb0:	460a      	movle	r2, r1
   d9cb2:	462a      	movgt	r2, r5
   d9cb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d9cb8:	468b      	mov	fp, r1
   d9cba:	462f      	mov	r7, r5
   d9cbc:	bfd4      	ite	le
   d9cbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d9cc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d9cc6:	4620      	mov	r0, r4
   d9cc8:	ee10 2a10 	vmov	r2, s0
   d9ccc:	465b      	mov	r3, fp
   d9cce:	4639      	mov	r1, r7
   d9cd0:	f7fd f8d8 	bl	d6e84 <__aeabi_ddiv>
   d9cd4:	ec41 0b10 	vmov	d0, r0, r1
   d9cd8:	b003      	add	sp, #12
   d9cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9cde <__copybits>:
   d9cde:	3901      	subs	r1, #1
   d9ce0:	b570      	push	{r4, r5, r6, lr}
   d9ce2:	1149      	asrs	r1, r1, #5
   d9ce4:	6914      	ldr	r4, [r2, #16]
   d9ce6:	3101      	adds	r1, #1
   d9ce8:	f102 0314 	add.w	r3, r2, #20
   d9cec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9cf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9cf4:	1f05      	subs	r5, r0, #4
   d9cf6:	42a3      	cmp	r3, r4
   d9cf8:	d30c      	bcc.n	d9d14 <__copybits+0x36>
   d9cfa:	1aa3      	subs	r3, r4, r2
   d9cfc:	3b11      	subs	r3, #17
   d9cfe:	f023 0303 	bic.w	r3, r3, #3
   d9d02:	3211      	adds	r2, #17
   d9d04:	42a2      	cmp	r2, r4
   d9d06:	bf88      	it	hi
   d9d08:	2300      	movhi	r3, #0
   d9d0a:	4418      	add	r0, r3
   d9d0c:	2300      	movs	r3, #0
   d9d0e:	4288      	cmp	r0, r1
   d9d10:	d305      	bcc.n	d9d1e <__copybits+0x40>
   d9d12:	bd70      	pop	{r4, r5, r6, pc}
   d9d14:	f853 6b04 	ldr.w	r6, [r3], #4
   d9d18:	f845 6f04 	str.w	r6, [r5, #4]!
   d9d1c:	e7eb      	b.n	d9cf6 <__copybits+0x18>
   d9d1e:	f840 3b04 	str.w	r3, [r0], #4
   d9d22:	e7f4      	b.n	d9d0e <__copybits+0x30>

000d9d24 <__any_on>:
   d9d24:	f100 0214 	add.w	r2, r0, #20
   d9d28:	6900      	ldr	r0, [r0, #16]
   d9d2a:	114b      	asrs	r3, r1, #5
   d9d2c:	4298      	cmp	r0, r3
   d9d2e:	b510      	push	{r4, lr}
   d9d30:	db11      	blt.n	d9d56 <__any_on+0x32>
   d9d32:	dd0a      	ble.n	d9d4a <__any_on+0x26>
   d9d34:	f011 011f 	ands.w	r1, r1, #31
   d9d38:	d007      	beq.n	d9d4a <__any_on+0x26>
   d9d3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9d3e:	fa24 f001 	lsr.w	r0, r4, r1
   d9d42:	fa00 f101 	lsl.w	r1, r0, r1
   d9d46:	428c      	cmp	r4, r1
   d9d48:	d10b      	bne.n	d9d62 <__any_on+0x3e>
   d9d4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9d4e:	4293      	cmp	r3, r2
   d9d50:	d803      	bhi.n	d9d5a <__any_on+0x36>
   d9d52:	2000      	movs	r0, #0
   d9d54:	bd10      	pop	{r4, pc}
   d9d56:	4603      	mov	r3, r0
   d9d58:	e7f7      	b.n	d9d4a <__any_on+0x26>
   d9d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9d5e:	2900      	cmp	r1, #0
   d9d60:	d0f5      	beq.n	d9d4e <__any_on+0x2a>
   d9d62:	2001      	movs	r0, #1
   d9d64:	e7f6      	b.n	d9d54 <__any_on+0x30>

000d9d66 <_calloc_r>:
   d9d66:	b513      	push	{r0, r1, r4, lr}
   d9d68:	434a      	muls	r2, r1
   d9d6a:	4611      	mov	r1, r2
   d9d6c:	9201      	str	r2, [sp, #4]
   d9d6e:	f7fb fbf1 	bl	d5554 <_malloc_r>
   d9d72:	4604      	mov	r4, r0
   d9d74:	b118      	cbz	r0, d9d7e <_calloc_r+0x18>
   d9d76:	9a01      	ldr	r2, [sp, #4]
   d9d78:	2100      	movs	r1, #0
   d9d7a:	f7fd fd4f 	bl	d781c <memset>
   d9d7e:	4620      	mov	r0, r4
   d9d80:	b002      	add	sp, #8
   d9d82:	bd10      	pop	{r4, pc}

000d9d84 <__ascii_wctomb>:
   d9d84:	b149      	cbz	r1, d9d9a <__ascii_wctomb+0x16>
   d9d86:	2aff      	cmp	r2, #255	; 0xff
   d9d88:	bf85      	ittet	hi
   d9d8a:	238a      	movhi	r3, #138	; 0x8a
   d9d8c:	6003      	strhi	r3, [r0, #0]
   d9d8e:	700a      	strbls	r2, [r1, #0]
   d9d90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d9d94:	bf98      	it	ls
   d9d96:	2001      	movls	r0, #1
   d9d98:	4770      	bx	lr
   d9d9a:	4608      	mov	r0, r1
   d9d9c:	4770      	bx	lr
	...

000d9da0 <__env_lock>:
   d9da0:	4801      	ldr	r0, [pc, #4]	; (d9da8 <__env_lock+0x8>)
   d9da2:	f7ff bb8c 	b.w	d94be <__retarget_lock_acquire_recursive>
   d9da6:	bf00      	nop
   d9da8:	2003e7f2 	.word	0x2003e7f2

000d9dac <__env_unlock>:
   d9dac:	4801      	ldr	r0, [pc, #4]	; (d9db4 <__env_unlock+0x8>)
   d9dae:	f7ff bb88 	b.w	d94c2 <__retarget_lock_release_recursive>
   d9db2:	bf00      	nop
   d9db4:	2003e7f2 	.word	0x2003e7f2

000d9db8 <__aeabi_d2lz>:
   d9db8:	b538      	push	{r3, r4, r5, lr}
   d9dba:	2200      	movs	r2, #0
   d9dbc:	2300      	movs	r3, #0
   d9dbe:	4604      	mov	r4, r0
   d9dc0:	460d      	mov	r5, r1
   d9dc2:	f7fd f9a7 	bl	d7114 <__aeabi_dcmplt>
   d9dc6:	b928      	cbnz	r0, d9dd4 <__aeabi_d2lz+0x1c>
   d9dc8:	4620      	mov	r0, r4
   d9dca:	4629      	mov	r1, r5
   d9dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9dd0:	f7fd ba88 	b.w	d72e4 <__aeabi_d2ulz>
   d9dd4:	4620      	mov	r0, r4
   d9dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d9dda:	f7fd fa83 	bl	d72e4 <__aeabi_d2ulz>
   d9dde:	4240      	negs	r0, r0
   d9de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9de4:	bd38      	pop	{r3, r4, r5, pc}
   d9de6:	bf00      	nop

000d9de8 <dynalib_user>:
   d9de8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9df8:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   d9e08:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   d9e18:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   d9e28:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   d9e38:	312e 0030 6554 706d 4d5f 7861 3a20 2520     .10.Temp_Max : %
   d9e48:	2e33 6631 5400 6d65 5f70 694d 2078 203a     3.1f.Temp_Mix : 
   d9e58:	3325 312e 0066 7548 696d 6964 7974 4d5f     %3.1f.Humidity_M
   d9e68:	7861 203a 3325 312e 0066 7548 696d 6964     ax: %3.1f.Humidi
   d9e78:	7974 4d5f 6e69 3a20 2520 2e33 6631 7b00     ty_Min : %3.1f.{
   d9e88:	5422 6d65 6570 6172 7574 6572 3a22 3425     "Temperature":%4
   d9e98:	312e 2c66 2220 7548 696d 6964 7974 3a22     .1f, "Humidity":
   d9ea8:	3425 312e 2c66 4222 7461 6574 7972 3a22     %4.1f,"Battery":
   d9eb8:	6925 007d 7473 726f 6761 2d65 6166 6963     %i}.storage-faci
   d9ec8:	696c 7974 682d 6f6f 006b 6f4e 4420 7461     lity-hook.No Dat
   d9ed8:	0061 6255 6469 746f 2073 6f48 6b6f 5200     a.Ubidots Hook.R
   d9ee8:	7365 6f70 736e 2065 6552 6563 7669 6465     esponse Received
   d9ef8:	5300 6174 6574 2500 2e34 6631 432a 2500     .State.%4.1f*C.%
   d9f08:	2e34 6631 2525 2500 2069 2525 4600 6961     4.1f%%.%i %%.Fai
   d9f18:	656c 2064 6f74 7020 7265 6f66 6d72 7220     led to perform r
   d9f28:	6165 6964 676e 3a20 0028 6f4c 0067 6146     eading :(.Log.Fa
   d9f38:	6c69 6465 7420 206f 6174 656b 7220 6165     iled to take rea
   d9f48:	6964 676e 0021 4853 3354 2031 6574 7473     ding!.SHT31 test
   d9f58:	5200 6c65 6165 6573 7400 6d65 6570 6172     .Release.tempera
   d9f68:	7574 6572 6800 6d75 6469 7469 0079 6574     ture.humidity.te
   d9f78:	706d 7265 7461 7275 2d65 7055 6570 0072     mperature-Upper.
   d9f88:	6574 706d 7265 7461 7275 2d65 6f6c 6577     temperature-lowe
   d9f98:	0072 7568 696d 6964 7974 752d 7070 7265     r.humidity-upper
   d9fa8:	6800 6d75 6469 7469 2d79 6f6c 6577 0072     .humidity-lower.
   d9fb8:	6142 7474 7265 0079 6142 7474 7265 4379     Battery.BatteryC
   d9fc8:	6e6f 6574 7478 4d00 6165 7573 6572 4e2d     ontext.Measure-N
   d9fd8:	776f 5600 7265 6f62 6573 4d2d 646f 0065     ow.Verbose-Mode.
   d9fe8:	6554 706d 552d 7070 7265 4c2d 6d69 7469     Temp-Upper-Limit
   d9ff8:	5400 6d65 2d70 6f4c 6577 2d72 694c 696d     .Temp-Lower-Limi
   da008:	0074 7548 696d 6964 7974 4c2d 776f 7265     t.Humidity-Lower
   da018:	4c2d 6d69 7469 4800 6d75 6469 7974 752d     -Limit.Humidty-u
   da028:	7070 7265 4c2d 6d69 7469 4500 7272 726f     pper-Limit.Error
   da038:	2d20 5320 5448 3133 4920 696e 6974 6c61      - SHT31 Initial
   da048:	7a69 7461 6f69 006e 6f43 6c75 6e64 7427     ization.Couldn't
   da058:	6620 6e69 2064 4853 3354 0031 6146 6c69      find SHT31.Fail
   da068:	6465 7420 206f 6f63 6e6e 6365 0074 7453     ed to connect.St
   da078:	7261 7574 0070 227b 6c61 7265 2d74 6574     artup.{"alert-te
   da088:	706d 7265 7461 7275 2265 253a 2e34 6631     mperature":%4.1f
   da098:	007d 6363 612d 656c 7472 772d 6265 6f68     }.cc-alert-webho
   da0a8:	6b6f 7b00 6122 656c 7472 682d 6d75 6469     ok.{"alert-humid
   da0b8:	7469 2279 253a 2e34 6631 007d 6553 2074     ity":%4.1f}.Set 
   da0c8:	6556 6272 736f 2065 6f4d 6564 4300 656c     Verbose Mode.Cle
   da0d8:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
   da0e8:	0065 7246 6d6f 2520 2073 6f74 2520 0073     e.From %s to %s.
   da0f8:	7453 7461 2065 7254 6e61 6973 6974 6e6f     State Transition
   da108:	4500 7272 726f 7420 6b61 6e69 2067 654d     .Error taking Me
   da118:	7361 7275 6d65 6e65 7374 7300 6170 6b72     asurements.spark
   da128:	642f 7665 6369 2f65 6573 7373 6f69 2f6e     /device/session/
   da138:	6e65 0064 7245 6f72 2072 7453 7461 2065     end.Error State 
   da148:	202d 6552 6573 0074 7055 6570 2072 6854     - Reset.Upper Th
   da158:	6572 6873 6c6f 2064 6553 0074 6f4c 6577     reshold Set.Lowe
   da168:	2072 6854 6572 6873 6c6f 2064 6553 0074     r Threshold Set.
   da178:	9dfc 000d 9e04 000d 9e08 000d 9e11 000d     ................
   da188:	9e19 000d 9e25 000d 9e2b 000d 7453 7261     ....%...+...Star
   da198:	7574 2070 7553 6363 7365 6673 6c75 0000     tup Successful..
	...

000da1d4 <_ZTVN5spark13CellularClassE>:
	...
   da1dc:	5647 000d 563d 000d 5633 000d 55e9 000d     GV..=V..3V...U..
   da1ec:	5627 000d 561b 000d 560f 000d 5607 000d     'V...V...V...V..
   da1fc:	55fd 000d 55f3 000d 5f0d 000d               .U...U..._..

000da208 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da210:	5681 000d 5687 000d 56d7 000d 5695 000d     .V...V...V...V..
   da220:	5683 000d                                   .V..

000da224 <_ZTVN5spark13EthernetClassE>:
	...
   da22c:	5c9b 000d 5c91 000d 5c87 000d 5c7d 000d     .\...\...\..}\..
   da23c:	5c71 000d 5c65 000d 5c59 000d 5c51 000d     q\..e\..Y\..Q\..
   da24c:	5c47 000d 5c3d 000d 5f0d 000d               G\..=\..._..

000da258 <_ZTV7TwoWire>:
	...
   da260:	5cb9 000d 5d03 000d 5cdb 000d 5cbb 000d     .\...]...\...\..
   da270:	5ce3 000d 5ceb 000d 5cf3 000d 5cfb 000d     .\...\...\...\..

000da280 <_ZTV9IPAddress>:
	...
   da288:	5dbf 000d 5daf 000d 5db1 000d 7061 0070     .]...]...]..app.

000da298 <_ZTVN5spark12NetworkClassE>:
	...
   da2a0:	5ea5 000d 5eaf 000d 5eb9 000d 5ec3 000d     .^...^...^...^..
   da2b0:	5ecd 000d 5ed9 000d 5ee5 000d 5ef1 000d     .^...^...^...^..
   da2c0:	5ef9 000d 5f03 000d 5f0d 000d 5925 252d     .^..._..._..%Y-%
   da2d0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   da2e0:	7361 7463 6d69 0065                         asctime.

000da2e8 <_ZTV11USARTSerial>:
	...
   da2f0:	63e1 000d 644d 000d 6425 000d 5ff5 000d     .c..Md..%d..._..
   da300:	63f5 000d 6411 000d 6403 000d 641f 000d     .c...d...d...d..
   da310:	63e3 000d 63e7 000d                         .c...c..

000da318 <_ZTV9USBSerial>:
	...
   da320:	64e1 000d 6549 000d 651f 000d 5ff5 000d     .d..Ie...e..._..
   da330:	6511 000d 64e3 000d 64f3 000d 6543 000d     .e...d...d..Ce..
   da340:	6503 000d 64dd 000d                         .e...d..

000da348 <_ZSt7nothrow>:
   da348:	0000 0000                                   ....

000da34c <__month_lengths>:
   da34c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da35c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da36c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da37c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da38c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da39c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da3ac:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000da3b8 <fpi.7566>:
   da3b8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   da3c8:	0000 0000                                   ....

000da3cc <fpinan.7602>:
   da3cc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   da3dc:	0000 0000                                   ....

000da3e0 <tinytens>:
   da3e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   da3f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   da400:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   da410:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   da420:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   da430:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   da440:	2575 006e                                   u%n.

000da444 <_ctype_>:
   da444:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da454:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da464:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da474:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da484:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da494:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da4a4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da4b4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da4c4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   da544:	2e00 0000                                   ....

000da548 <_C_numeric_locale>:
   da548:	a545 000d 9f4d 000d e2f0 2003 4f50 4953     E...M...... POSI
   da558:	0058 0000 0000 0000                         X.......

000da560 <__mprec_bigtens>:
   da560:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   da570:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   da580:	bf3c 7f73 4fdd 7515                         <.s..O.u

000da588 <__mprec_tens>:
   da588:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   da598:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   da5a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   da5b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   da5c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   da5d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   da5e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   da5f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   da608:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   da618:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   da628:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   da638:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   da648:	9db4 79d9 7843 44ea                         ...yCx.D

000da650 <p05.7490>:
   da650:	0005 0000 0019 0000 007d 0000               ........}...

000da65c <link_const_variable_data_end>:
   da65c:	000d4db9 	.word	0x000d4db9
   da660:	000d4e1d 	.word	0x000d4e1d
   da664:	000d4fd1 	.word	0x000d4fd1
   da668:	000d55c1 	.word	0x000d55c1
   da66c:	000d5651 	.word	0x000d5651
   da670:	000d5ca5 	.word	0x000d5ca5
   da674:	000d5e95 	.word	0x000d5e95
   da678:	000d5fe1 	.word	0x000d5fe1
   da67c:	000d60c1 	.word	0x000d60c1
   da680:	000d6285 	.word	0x000d6285
   da684:	000d63cd 	.word	0x000d63cd

000da688 <link_constructors_end>:
	...
