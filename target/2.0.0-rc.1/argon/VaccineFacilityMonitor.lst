
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/2.0.0-rc.1/argon/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000064b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da4d0  000da4d0  0000a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da4d8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000031c  2003e188  000da4dc  0001e188  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  2003e4a8  2003e4a8  0002e4a8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000da7f8  000da7f8  0002a7f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da820  000da820  0002a820  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014a865  00000000  00000000  0002a824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00015d1c  00000000  00000000  00175089  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a8f8  00000000  00000000  0018ada5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002748  00000000  00000000  001b569d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007648  00000000  00000000  001b7de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000369e0  00000000  00000000  001bf42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00037953  00000000  00000000  001f5e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001098e7  00000000  00000000  0022d760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007618  00000000  00000000  00337048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 faeb 	bl	d760c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 faf3 	bl	d7628 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e188 	.word	0x2003e188
   d404c:	000da4dc 	.word	0x000da4dc
   d4050:	2003e4a4 	.word	0x2003e4a4
   d4054:	2003e4a8 	.word	0x2003e4a8
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fa83 	bl	d656c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da4a4 	.word	0x000da4a4
   d4080:	000da4cc 	.word	0x000da4cc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba58 	b.w	d4538 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc57 	bl	d493c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 ba2d 	b.w	d64f0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b99b 	b.w	d53d0 <malloc>

000d409a <_Znaj>:
   d409a:	f001 b999 	b.w	d53d0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b99f 	b.w	d53e0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f001 ffb5 	bl	d6026 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d9ebd 	.word	0x000d9ebd
   d40cc:	2003e57c 	.word	0x2003e57c

000d40d0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40d4:	6800      	ldr	r0, [r0, #0]
   d40d6:	b108      	cbz	r0, d40dc <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d8:	f001 f982 	bl	d53e0 <free>
class SystemClass {
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}

000d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40e0:	2300      	movs	r3, #0
   d40e2:	2204      	movs	r2, #4
   d40e4:	f001 b8cc 	b.w	d5280 <spark_variable>

000d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d40ee:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f0:	f88d 5000 	strb.w	r5, [sp]
   d40f4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f6:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f8:	f001 fb4c 	bl	d5794 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d40fc:	4620      	mov	r0, r4
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4108:	f001 f8d2 	bl	d52b0 <spark_cloud_flag_connect>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d410c:	f8df a058 	ldr.w	sl, [pc, #88]	; d4168 <_Z17connectToParticlev+0x64>
   d4110:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4114:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4118:	f240 38e7 	movw	r8, #999	; 0x3e7
   d411c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4120:	2000      	movs	r0, #0
   d4122:	f000 ff2f 	bl	d4f84 <hal_timer_millis>
   d4126:	4605      	mov	r5, r0
   d4128:	2000      	movs	r0, #0
   d412a:	f000 ff2b 	bl	d4f84 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d412e:	1b46      	subs	r6, r0, r5
   d4130:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d4134:	45b9      	cmp	r9, r7
   d4136:	bf08      	it	eq
   d4138:	45b0      	cmpeq	r8, r6
   d413a:	d305      	bcc.n	d4148 <_Z17connectToParticlev+0x44>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413c:	f001 f8c0 	bl	d52c0 <spark_cloud_flag_connected>
   d4140:	b910      	cbnz	r0, d4148 <_Z17connectToParticlev+0x44>
            spark_process();
   d4142:	f001 f8ad 	bl	d52a0 <spark_process>
        while (_while() && !_condition()) {
   d4146:	e7ef      	b.n	d4128 <_Z17connectToParticlev+0x24>
   d4148:	f001 f8ba 	bl	d52c0 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d414c:	b118      	cbz	r0, d4156 <_Z17connectToParticlev+0x52>
}
   d414e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4152:	f001 b8b5 	b.w	d52c0 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d4156:	f000 fee5 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d415a:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d415e:	f001 f89f 	bl	d52a0 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4162:	3c01      	subs	r4, #1
   d4164:	d1dc      	bne.n	d4120 <_Z17connectToParticlev+0x1c>
   d4166:	e7f2      	b.n	d414e <_Z17connectToParticlev+0x4a>
   d4168:	2003e79c 	.word	0x2003e79c

000d416c <_Z8BlinkLEDi>:
void BlinkLED(int LED){
   d416c:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d416e:	b284      	uxth	r4, r0
   d4170:	2101      	movs	r1, #1
   d4172:	4620      	mov	r0, r4
   d4174:	f002 fa7b 	bl	d666e <digitalWrite>
  delay(1000);
   d4178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d417c:	f001 f968 	bl	d5450 <delay>
  digitalWrite(LED,LOW);
   d4180:	4620      	mov	r0, r4
   d4182:	2100      	movs	r1, #0
   d4184:	f002 fa73 	bl	d666e <digitalWrite>
}
   d4188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
   d418c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4190:	f001 b95e 	b.w	d5450 <delay>

000d4194 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d4194:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4196:	f000 fec5 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d419a:	4b04      	ldr	r3, [pc, #16]	; (d41ac <_Z20meterParticlePublishv+0x18>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d41a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d41a4:	bf34      	ite	cc
   d41a6:	2000      	movcc	r0, #0
   d41a8:	2001      	movcs	r0, #1
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	2003e4e4 	.word	0x2003e4e4

000d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d41b0:	b508      	push	{r3, lr}
        waitUntil(meterParticlePublish);
   d41b2:	f7ff ffef 	bl	d4194 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d41b6:	b910      	cbnz	r0, d41be <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d41b8:	f001 f872 	bl	d52a0 <spark_process>
        while (_while() && !_condition()) {
   d41bc:	e7f9      	b.n	d41b2 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d41be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41c2:	f7ff bfe7 	b.w	d4194 <_Z20meterParticlePublishv>
	...

000d41c8 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d41c8:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d41ca:	4c15      	ldr	r4, [pc, #84]	; (d4220 <_Z20updateThresholdValuev+0x58>)
   d41cc:	6a20      	ldr	r0, [r4, #32]
   d41ce:	f002 fc2d 	bl	d6a2c <__aeabi_f2d>
   d41d2:	4a14      	ldr	r2, [pc, #80]	; (d4224 <_Z20updateThresholdValuev+0x5c>)
   d41d4:	e9cd 0100 	strd	r0, r1, [sp]
   d41d8:	2118      	movs	r1, #24
   d41da:	4813      	ldr	r0, [pc, #76]	; (d4228 <_Z20updateThresholdValuev+0x60>)
   d41dc:	f001 f918 	bl	d5410 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d41e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d41e2:	f002 fc23 	bl	d6a2c <__aeabi_f2d>
   d41e6:	4a11      	ldr	r2, [pc, #68]	; (d422c <_Z20updateThresholdValuev+0x64>)
   d41e8:	e9cd 0100 	strd	r0, r1, [sp]
   d41ec:	2118      	movs	r1, #24
   d41ee:	4810      	ldr	r0, [pc, #64]	; (d4230 <_Z20updateThresholdValuev+0x68>)
   d41f0:	f001 f90e 	bl	d5410 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d41f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d41f6:	f002 fc19 	bl	d6a2c <__aeabi_f2d>
   d41fa:	4a0e      	ldr	r2, [pc, #56]	; (d4234 <_Z20updateThresholdValuev+0x6c>)
   d41fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4200:	2118      	movs	r1, #24
   d4202:	480d      	ldr	r0, [pc, #52]	; (d4238 <_Z20updateThresholdValuev+0x70>)
   d4204:	f001 f904 	bl	d5410 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d420a:	f002 fc0f 	bl	d6a2c <__aeabi_f2d>
   d420e:	4a0b      	ldr	r2, [pc, #44]	; (d423c <_Z20updateThresholdValuev+0x74>)
   d4210:	e9cd 0100 	strd	r0, r1, [sp]
   d4214:	2118      	movs	r1, #24
   d4216:	480a      	ldr	r0, [pc, #40]	; (d4240 <_Z20updateThresholdValuev+0x78>)
   d4218:	f001 f8fa 	bl	d5410 <snprintf>
   d421c:	b002      	add	sp, #8
   d421e:	bd10      	pop	{r4, pc}
   d4220:	2003e540 	.word	0x2003e540
   d4224:	000d9cb8 	.word	0x000d9cb8
   d4228:	2003e5b3 	.word	0x2003e5b3
   d422c:	000d9cc9 	.word	0x000d9cc9
   d4230:	2003e502 	.word	0x2003e502
   d4234:	000d9cda 	.word	0x000d9cda
   d4238:	2003e59a 	.word	0x2003e59a
   d423c:	000d9cee 	.word	0x000d9cee
   d4240:	2003e4e9 	.word	0x2003e4e9

000d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4244:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4246:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4248:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d424a:	b17c      	cbz	r4, d426c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d424c:	6863      	ldr	r3, [r4, #4]
   d424e:	3b01      	subs	r3, #1
   d4250:	6063      	str	r3, [r4, #4]
   d4252:	b95b      	cbnz	r3, d426c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4254:	6823      	ldr	r3, [r4, #0]
   d4256:	4620      	mov	r0, r4
   d4258:	689b      	ldr	r3, [r3, #8]
   d425a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d425c:	68a3      	ldr	r3, [r4, #8]
   d425e:	3b01      	subs	r3, #1
   d4260:	60a3      	str	r3, [r4, #8]
   d4262:	b91b      	cbnz	r3, d426c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4264:	6823      	ldr	r3, [r4, #0]
   d4266:	4620      	mov	r0, r4
   d4268:	68db      	ldr	r3, [r3, #12]
   d426a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d426c:	4628      	mov	r0, r5
   d426e:	bd38      	pop	{r3, r4, r5, pc}

000d4270 <_Z9sendEventv>:
{
   d4270:	b530      	push	{r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4272:	4d20      	ldr	r5, [pc, #128]	; (d42f4 <_Z9sendEventv+0x84>)
   d4274:	b0c7      	sub	sp, #284	; 0x11c
   d4276:	2408      	movs	r4, #8
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4278:	f002 fa12 	bl	d66a0 <_Z21__fetch_global_EEPROMv>
   d427c:	4620      	mov	r0, r4
   d427e:	491d      	ldr	r1, [pc, #116]	; (d42f4 <_Z9sendEventv+0x84>)
   d4280:	2230      	movs	r2, #48	; 0x30
   d4282:	3464      	adds	r4, #100	; 0x64
   d4284:	f000 fe66 	bl	d4f54 <HAL_EEPROM_Get>
   for (int i = 0; i < 4; i++) {
   d4288:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d428c:	d1f4      	bne.n	d4278 <_Z9sendEventv+0x8>
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d428e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d4292:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4296:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d429a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d429e:	e9cd 2300 	strd	r2, r3, [sp]
   d42a2:	a806      	add	r0, sp, #24
   d42a4:	4a14      	ldr	r2, [pc, #80]	; (d42f8 <_Z9sendEventv+0x88>)
  currentCountTime = Time.now();
   d42a6:	4c15      	ldr	r4, [pc, #84]	; (d42fc <_Z9sendEventv+0x8c>)
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity);
   d42a8:	f001 f8b2 	bl	d5410 <snprintf>
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d42ac:	2300      	movs	r3, #0
   d42ae:	f88d 3000 	strb.w	r3, [sp]
   d42b2:	4b13      	ldr	r3, [pc, #76]	; (d4300 <_Z9sendEventv+0x90>)
   d42b4:	4913      	ldr	r1, [pc, #76]	; (d4304 <_Z9sendEventv+0x94>)
   d42b6:	781b      	ldrb	r3, [r3, #0]
   d42b8:	aa06      	add	r2, sp, #24
   d42ba:	a804      	add	r0, sp, #16
   d42bc:	f7ff ff14 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42c0:	a805      	add	r0, sp, #20
   d42c2:	f7ff ffbf 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d42c6:	f001 ff7d 	bl	d61c4 <_ZN9TimeClass3nowEv>
   d42ca:	e9c4 0100 	strd	r0, r1, [r4]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d42ce:	f002 f9e7 	bl	d66a0 <_Z21__fetch_global_EEPROMv>
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d42d2:	7821      	ldrb	r1, [r4, #0]
   d42d4:	2003      	movs	r0, #3
   d42d6:	f000 fe35 	bl	d4f44 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d42da:	f001 ff85 	bl	d61e8 <_ZN9TimeClass4hourEv>
   d42de:	4b0a      	ldr	r3, [pc, #40]	; (d4308 <_Z9sendEventv+0x98>)
   d42e0:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d42e2:	4b0a      	ldr	r3, [pc, #40]	; (d430c <_Z9sendEventv+0x9c>)
   d42e4:	2201      	movs	r2, #1
   d42e6:	701a      	strb	r2, [r3, #0]
   d42e8:	f000 fe1c 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d42ec:	4b08      	ldr	r3, [pc, #32]	; (d4310 <_Z9sendEventv+0xa0>)
   d42ee:	6018      	str	r0, [r3, #0]
}
   d42f0:	b047      	add	sp, #284	; 0x11c
   d42f2:	bd30      	pop	{r4, r5, pc}
   d42f4:	2003e540 	.word	0x2003e540
   d42f8:	000d9d03 	.word	0x000d9d03
   d42fc:	2003e4c8 	.word	0x2003e4c8
   d4300:	2003e4bd 	.word	0x2003e4bd
   d4304:	000d9d2b 	.word	0x000d9d2b
   d4308:	2003e4d0 	.word	0x2003e4d0
   d430c:	2003e188 	.word	0x2003e188
   d4310:	2003e5cc 	.word	0x2003e5cc

000d4314 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4314:	b530      	push	{r4, r5, lr}
   d4316:	4d1e      	ldr	r5, [pc, #120]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4318:	b085      	sub	sp, #20
  if (!data) {                                                                    // First check to see if there is any data
   d431a:	460c      	mov	r4, r1
   d431c:	b981      	cbnz	r1, d4340 <_Z14UbidotsHandlerPKcS0_+0x2c>
    if (verboseMode) {
   d431e:	782b      	ldrb	r3, [r5, #0]
   d4320:	b343      	cbz	r3, d4374 <_Z14UbidotsHandlerPKcS0_+0x60>
        return waitConditionWhile(_condition, []{ return true; });
   d4322:	f7ff ff45 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4326:	4b1b      	ldr	r3, [pc, #108]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4328:	f88d 4000 	strb.w	r4, [sp]
   d432c:	781b      	ldrb	r3, [r3, #0]
   d432e:	4a1a      	ldr	r2, [pc, #104]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x84>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4330:	491a      	ldr	r1, [pc, #104]	; (d439c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4332:	a802      	add	r0, sp, #8
   d4334:	f7ff fed8 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4338:	a803      	add	r0, sp, #12
   d433a:	f7ff ff83 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d433e:	e019      	b.n	d4374 <_Z14UbidotsHandlerPKcS0_+0x60>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4340:	4608      	mov	r0, r1
   d4342:	f003 f85a 	bl	d73fa <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4346:	38c8      	subs	r0, #200	; 0xc8
   d4348:	2801      	cmp	r0, #1
    if (verboseMode) {
   d434a:	782b      	ldrb	r3, [r5, #0]
  if ((responseCode == 200) || (responseCode == 201))
   d434c:	d814      	bhi.n	d4378 <_Z14UbidotsHandlerPKcS0_+0x64>
    if (verboseMode) {
   d434e:	b173      	cbz	r3, d436e <_Z14UbidotsHandlerPKcS0_+0x5a>
   d4350:	f7ff ff2e 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("State", "Response Received", PRIVATE);
   d4354:	2300      	movs	r3, #0
   d4356:	f88d 3000 	strb.w	r3, [sp]
   d435a:	4b0e      	ldr	r3, [pc, #56]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d435c:	4a10      	ldr	r2, [pc, #64]	; (d43a0 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d435e:	781b      	ldrb	r3, [r3, #0]
   d4360:	4910      	ldr	r1, [pc, #64]	; (d43a4 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4362:	a802      	add	r0, sp, #8
   d4364:	f7ff fec0 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4368:	a803      	add	r0, sp, #12
   d436a:	f7ff ff6b 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;    
   d436e:	4b0e      	ldr	r3, [pc, #56]	; (d43a8 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4370:	2200      	movs	r2, #0
   d4372:	701a      	strb	r2, [r3, #0]
}
   d4374:	b005      	add	sp, #20
   d4376:	bd30      	pop	{r4, r5, pc}
  else if (verboseMode) {
   d4378:	2b00      	cmp	r3, #0
   d437a:	d0fb      	beq.n	d4374 <_Z14UbidotsHandlerPKcS0_+0x60>
   d437c:	f7ff ff18 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4380:	2300      	movs	r3, #0
   d4382:	f88d 3000 	strb.w	r3, [sp]
   d4386:	4b03      	ldr	r3, [pc, #12]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4388:	4622      	mov	r2, r4
   d438a:	781b      	ldrb	r3, [r3, #0]
   d438c:	e7d0      	b.n	d4330 <_Z14UbidotsHandlerPKcS0_+0x1c>
   d438e:	bf00      	nop
   d4390:	2003e264 	.word	0x2003e264
   d4394:	2003e4bd 	.word	0x2003e4bd
   d4398:	000d9d41 	.word	0x000d9d41
   d439c:	000d9d49 	.word	0x000d9d49
   d43a0:	000d9d56 	.word	0x000d9d56
   d43a4:	000d9d68 	.word	0x000d9d68
   d43a8:	2003e188 	.word	0x2003e188

000d43ac <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d43ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  sensor_data.validData = false;
   d43b0:	4c50      	ldr	r4, [pc, #320]	; (d44f4 <_Z16takeMeasurementsv+0x148>)
  if (sht31.readTemperature()){
   d43b2:	4851      	ldr	r0, [pc, #324]	; (d44f8 <_Z16takeMeasurementsv+0x14c>)
  sensor_data.validData = false;
   d43b4:	2500      	movs	r5, #0
   d43b6:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d43b8:	f000 fd76 	bl	d4ea8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d43c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43c4:	f000 8083 	beq.w	d44ce <_Z16takeMeasurementsv+0x122>
    currentCountTime = Time.now();
   d43c8:	f001 fefc 	bl	d61c4 <_ZN9TimeClass3nowEv>
   d43cc:	4b4b      	ldr	r3, [pc, #300]	; (d44fc <_Z16takeMeasurementsv+0x150>)
   d43ce:	e9c3 0100 	strd	r0, r1, [r3]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d43d2:	f001 ff13 	bl	d61fc <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d43d6:	281e      	cmp	r0, #30
   d43d8:	d073      	beq.n	d44c2 <_Z16takeMeasurementsv+0x116>
   d43da:	282d      	cmp	r0, #45	; 0x2d
   d43dc:	d074      	beq.n	d44c8 <_Z16takeMeasurementsv+0x11c>
        reportCycle = 0;                                                // This is the first of the sample-only periods
   d43de:	280f      	cmp	r0, #15
   d43e0:	bf14      	ite	ne
   d43e2:	f04f 0803 	movne.w	r8, #3
   d43e6:	46a8      	moveq	r8, r5
    sensor_data.temperatureInC = sht31.readTemperature();
   d43e8:	4843      	ldr	r0, [pc, #268]	; (d44f8 <_Z16takeMeasurementsv+0x14c>)
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d43ea:	4e45      	ldr	r6, [pc, #276]	; (d4500 <_Z16takeMeasurementsv+0x154>)
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d43ec:	4d45      	ldr	r5, [pc, #276]	; (d4504 <_Z16takeMeasurementsv+0x158>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d43ee:	f000 fd5b 	bl	d4ea8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43f2:	ee10 0a10 	vmov	r0, s0
   d43f6:	f002 fb19 	bl	d6a2c <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d43fa:	e9d6 2300 	ldrd	r2, r3, [r6]
    sensor_data.temperatureInC = sht31.readTemperature();
   d43fe:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);
   d4402:	e9cd 2300 	strd	r2, r3, [sp]
   d4406:	2110      	movs	r1, #16
   d4408:	4a3f      	ldr	r2, [pc, #252]	; (d4508 <_Z16takeMeasurementsv+0x15c>)
   d440a:	4840      	ldr	r0, [pc, #256]	; (d450c <_Z16takeMeasurementsv+0x160>)
   d440c:	f001 f800 	bl	d5410 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d4410:	4839      	ldr	r0, [pc, #228]	; (d44f8 <_Z16takeMeasurementsv+0x14c>)
   d4412:	f000 fd57 	bl	d4ec4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d4416:	ee10 0a10 	vmov	r0, s0
   d441a:	f002 fb07 	bl	d6a2c <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d441e:	e9d5 2300 	ldrd	r2, r3, [r5]
    sensor_data.relativeHumidity = sht31.readHumidity();
   d4422:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);
   d4426:	e9cd 2300 	strd	r2, r3, [sp]
   d442a:	2110      	movs	r1, #16
   d442c:	4a38      	ldr	r2, [pc, #224]	; (d4510 <_Z16takeMeasurementsv+0x164>)
   d442e:	4839      	ldr	r0, [pc, #228]	; (d4514 <_Z16takeMeasurementsv+0x168>)
   d4430:	f000 ffee 	bl	d5410 <snprintf>
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d4434:	e9d6 6700 	ldrd	r6, r7, [r6]
   d4438:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d443a:	f002 faf7 	bl	d6a2c <__aeabi_f2d>
   d443e:	4632      	mov	r2, r6
   d4440:	463b      	mov	r3, r7
   d4442:	f002 fddb 	bl	d6ffc <__aeabi_dcmpgt>
   d4446:	b110      	cbz	r0, d444e <_Z16takeMeasurementsv+0xa2>
   d4448:	4b33      	ldr	r3, [pc, #204]	; (d4518 <_Z16takeMeasurementsv+0x16c>)
   d444a:	2201      	movs	r2, #1
   d444c:	701a      	strb	r2, [r3, #0]
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d444e:	6a20      	ldr	r0, [r4, #32]
   d4450:	f002 faec 	bl	d6a2c <__aeabi_f2d>
   d4454:	4602      	mov	r2, r0
   d4456:	460b      	mov	r3, r1
   d4458:	4630      	mov	r0, r6
   d445a:	4639      	mov	r1, r7
   d445c:	f002 fdce 	bl	d6ffc <__aeabi_dcmpgt>
   d4460:	b110      	cbz	r0, d4468 <_Z16takeMeasurementsv+0xbc>
   d4462:	4b2e      	ldr	r3, [pc, #184]	; (d451c <_Z16takeMeasurementsv+0x170>)
   d4464:	2201      	movs	r2, #1
   d4466:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d4468:	e9d5 6700 	ldrd	r6, r7, [r5]
   d446c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d446e:	f002 fadd 	bl	d6a2c <__aeabi_f2d>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	f002 fdc1 	bl	d6ffc <__aeabi_dcmpgt>
   d447a:	b110      	cbz	r0, d4482 <_Z16takeMeasurementsv+0xd6>
   d447c:	4b28      	ldr	r3, [pc, #160]	; (d4520 <_Z16takeMeasurementsv+0x174>)
   d447e:	2201      	movs	r2, #1
   d4480:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4482:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4484:	f002 fad2 	bl	d6a2c <__aeabi_f2d>
   d4488:	4602      	mov	r2, r0
   d448a:	460b      	mov	r3, r1
   d448c:	4630      	mov	r0, r6
   d448e:	4639      	mov	r1, r7
   d4490:	f002 fdb4 	bl	d6ffc <__aeabi_dcmpgt>
   d4494:	b110      	cbz	r0, d449c <_Z16takeMeasurementsv+0xf0>
   d4496:	4b23      	ldr	r3, [pc, #140]	; (d4524 <_Z16takeMeasurementsv+0x178>)
   d4498:	2201      	movs	r2, #1
   d449a:	701a      	strb	r2, [r3, #0]
    sensor_data.validData = true;
   d449c:	2501      	movs	r5, #1
   d449e:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d44a0:	f001 fe90 	bl	d61c4 <_ZN9TimeClass3nowEv>
   d44a4:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d44a6:	f002 f8fb 	bl	d66a0 <_Z21__fetch_global_EEPROMv>
   d44aa:	2064      	movs	r0, #100	; 0x64
   d44ac:	fb00 f008 	mul.w	r0, r0, r8
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d44b0:	4910      	ldr	r1, [pc, #64]	; (d44f4 <_Z16takeMeasurementsv+0x148>)
   d44b2:	2230      	movs	r2, #48	; 0x30
   d44b4:	3008      	adds	r0, #8
   d44b6:	f000 fd55 	bl	d4f64 <HAL_EEPROM_Put>
        return 0;
   d44ba:	4628      	mov	r0, r5
}
   d44bc:	b004      	add	sp, #16
   d44be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (currentMinutes) {
   d44c2:	f04f 0801 	mov.w	r8, #1
   d44c6:	e78f      	b.n	d43e8 <_Z16takeMeasurementsv+0x3c>
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d44c8:	f04f 0802 	mov.w	r8, #2
   d44cc:	e78c      	b.n	d43e8 <_Z16takeMeasurementsv+0x3c>
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d44ce:	4b16      	ldr	r3, [pc, #88]	; (d4528 <_Z16takeMeasurementsv+0x17c>)
   d44d0:	f88d 5000 	strb.w	r5, [sp]
   d44d4:	781b      	ldrb	r3, [r3, #0]
   d44d6:	4a15      	ldr	r2, [pc, #84]	; (d452c <_Z16takeMeasurementsv+0x180>)
   d44d8:	4915      	ldr	r1, [pc, #84]	; (d4530 <_Z16takeMeasurementsv+0x184>)
   d44da:	a802      	add	r0, sp, #8
   d44dc:	f7ff fe04 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44e0:	a803      	add	r0, sp, #12
   d44e2:	f7ff feaf 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Failed to take reading!");
   d44e6:	f001 ff79 	bl	d63dc <_Z16_fetch_usbserialv>
   d44ea:	4912      	ldr	r1, [pc, #72]	; (d4534 <_Z16takeMeasurementsv+0x188>)
   d44ec:	f001 fcdb 	bl	d5ea6 <_ZN5Print7printlnEPKc>
   d44f0:	e7e3      	b.n	d44ba <_Z16takeMeasurementsv+0x10e>
   d44f2:	bf00      	nop
   d44f4:	2003e540 	.word	0x2003e540
   d44f8:	2003e570 	.word	0x2003e570
   d44fc:	2003e4c8 	.word	0x2003e4c8
   d4500:	2003e580 	.word	0x2003e580
   d4504:	2003e530 	.word	0x2003e530
   d4508:	000d9d6e 	.word	0x000d9d6e
   d450c:	2003e588 	.word	0x2003e588
   d4510:	000d9d76 	.word	0x000d9d76
   d4514:	2003e4d1 	.word	0x2003e4d1
   d4518:	2003e501 	.word	0x2003e501
   d451c:	2003e5b2 	.word	0x2003e5b2
   d4520:	2003e4e8 	.word	0x2003e4e8
   d4524:	2003e599 	.word	0x2003e599
   d4528:	2003e4bc 	.word	0x2003e4bc
   d452c:	000d9d7e 	.word	0x000d9d7e
   d4530:	000d9d9b 	.word	0x000d9d9b
   d4534:	000d9d9f 	.word	0x000d9d9f

000d4538 <setup>:
{
   d4538:	b570      	push	{r4, r5, r6, lr}
   d453a:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(115200);
   d453c:	f001 ff4e 	bl	d63dc <_Z16_fetch_usbserialv>
   d4540:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4544:	f001 ff3e 	bl	d63c4 <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d4548:	f001 ff48 	bl	d63dc <_Z16_fetch_usbserialv>
   d454c:	495a      	ldr	r1, [pc, #360]	; (d46b8 <setup+0x180>)
   d454e:	f001 fcaa 	bl	d5ea6 <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4552:	4b5a      	ldr	r3, [pc, #360]	; (d46bc <setup+0x184>)
   d4554:	aa08      	add	r2, sp, #32
   d4556:	f103 0510 	add.w	r5, r3, #16
   d455a:	4616      	mov	r6, r2
   d455c:	6818      	ldr	r0, [r3, #0]
   d455e:	6859      	ldr	r1, [r3, #4]
   d4560:	4614      	mov	r4, r2
   d4562:	c403      	stmia	r4!, {r0, r1}
   d4564:	3308      	adds	r3, #8
   d4566:	42ab      	cmp	r3, r5
   d4568:	4622      	mov	r2, r4
   d456a:	d1f7      	bne.n	d455c <setup+0x24>
   d456c:	8819      	ldrh	r1, [r3, #0]
   d456e:	789b      	ldrb	r3, [r3, #2]
   d4570:	8021      	strh	r1, [r4, #0]
   d4572:	222d      	movs	r2, #45	; 0x2d
   d4574:	70a3      	strb	r3, [r4, #2]
   d4576:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4578:	4c51      	ldr	r4, [pc, #324]	; (d46c0 <setup+0x188>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d457a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d457e:	f003 f853 	bl	d7628 <memset>
  state = IDLE_STATE;
   d4582:	2302      	movs	r3, #2
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4584:	2101      	movs	r1, #1
   d4586:	2007      	movs	r0, #7
  state = IDLE_STATE;
   d4588:	7023      	strb	r3, [r4, #0]
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d458a:	f002 f85f 	bl	d664c <pinMode>
  pinMode(tempLED,OUTPUT);
   d458e:	2101      	movs	r1, #1
   d4590:	2005      	movs	r0, #5
   d4592:	f002 f85b 	bl	d664c <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
   d4596:	a804      	add	r0, sp, #16
   d4598:	f000 fe9a 	bl	d52d0 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d459c:	2300      	movs	r3, #0
   d459e:	227d      	movs	r2, #125	; 0x7d
   d45a0:	a918      	add	r1, sp, #96	; 0x60
   d45a2:	a804      	add	r0, sp, #16
   d45a4:	f001 fd51 	bl	d604a <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d45a8:	2300      	movs	r3, #0
   d45aa:	461a      	mov	r2, r3
   d45ac:	e9cd 3300 	strd	r3, r3, [sp]
   d45b0:	4944      	ldr	r1, [pc, #272]	; (d46c4 <setup+0x18c>)
   d45b2:	a818      	add	r0, sp, #96	; 0x60
   d45b4:	f000 fe9c 	bl	d52f0 <spark_subscribe>
  Particle.variable("Release",releaseNumber);
   d45b8:	4b43      	ldr	r3, [pc, #268]	; (d46c8 <setup+0x190>)
        return _variable(varKey, var, STRING);
   d45ba:	4844      	ldr	r0, [pc, #272]	; (d46cc <setup+0x194>)
   d45bc:	6819      	ldr	r1, [r3, #0]
   d45be:	f7ff fd8f 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45c2:	4943      	ldr	r1, [pc, #268]	; (d46d0 <setup+0x198>)
   d45c4:	4843      	ldr	r0, [pc, #268]	; (d46d4 <setup+0x19c>)
   d45c6:	f7ff fd8b 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45ca:	4943      	ldr	r1, [pc, #268]	; (d46d8 <setup+0x1a0>)
   d45cc:	4843      	ldr	r0, [pc, #268]	; (d46dc <setup+0x1a4>)
   d45ce:	f7ff fd87 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45d2:	4943      	ldr	r1, [pc, #268]	; (d46e0 <setup+0x1a8>)
   d45d4:	4843      	ldr	r0, [pc, #268]	; (d46e4 <setup+0x1ac>)
   d45d6:	f7ff fd83 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45da:	4943      	ldr	r1, [pc, #268]	; (d46e8 <setup+0x1b0>)
   d45dc:	4843      	ldr	r0, [pc, #268]	; (d46ec <setup+0x1b4>)
   d45de:	f7ff fd7f 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45e2:	4943      	ldr	r1, [pc, #268]	; (d46f0 <setup+0x1b8>)
   d45e4:	4843      	ldr	r0, [pc, #268]	; (d46f4 <setup+0x1bc>)
   d45e6:	f7ff fd7b 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45ea:	4943      	ldr	r1, [pc, #268]	; (d46f8 <setup+0x1c0>)
   d45ec:	4843      	ldr	r0, [pc, #268]	; (d46fc <setup+0x1c4>)
   d45ee:	f7ff fd77 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d45f2:	4943      	ldr	r1, [pc, #268]	; (d4700 <setup+0x1c8>)
   d45f4:	4843      	ldr	r0, [pc, #268]	; (d4704 <setup+0x1cc>)
   d45f6:	f7ff fd73 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d45fa:	4a43      	ldr	r2, [pc, #268]	; (d4708 <setup+0x1d0>)
   d45fc:	4943      	ldr	r1, [pc, #268]	; (d470c <setup+0x1d4>)
   d45fe:	4844      	ldr	r0, [pc, #272]	; (d4710 <setup+0x1d8>)
   d4600:	f000 ffc4 	bl	d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4604:	4a43      	ldr	r2, [pc, #268]	; (d4714 <setup+0x1dc>)
   d4606:	4944      	ldr	r1, [pc, #272]	; (d4718 <setup+0x1e0>)
   d4608:	4841      	ldr	r0, [pc, #260]	; (d4710 <setup+0x1d8>)
   d460a:	f000 ffbf 	bl	d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d460e:	4a43      	ldr	r2, [pc, #268]	; (d471c <setup+0x1e4>)
   d4610:	4943      	ldr	r1, [pc, #268]	; (d4720 <setup+0x1e8>)
   d4612:	483f      	ldr	r0, [pc, #252]	; (d4710 <setup+0x1d8>)
   d4614:	f000 ffba 	bl	d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4618:	4a42      	ldr	r2, [pc, #264]	; (d4724 <setup+0x1ec>)
   d461a:	4943      	ldr	r1, [pc, #268]	; (d4728 <setup+0x1f0>)
   d461c:	483c      	ldr	r0, [pc, #240]	; (d4710 <setup+0x1d8>)
   d461e:	f000 ffb5 	bl	d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4622:	4a42      	ldr	r2, [pc, #264]	; (d472c <setup+0x1f4>)
   d4624:	4942      	ldr	r1, [pc, #264]	; (d4730 <setup+0x1f8>)
   d4626:	483a      	ldr	r0, [pc, #232]	; (d4710 <setup+0x1d8>)
   d4628:	f000 ffb0 	bl	d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d462c:	4941      	ldr	r1, [pc, #260]	; (d4734 <setup+0x1fc>)
   d462e:	4a42      	ldr	r2, [pc, #264]	; (d4738 <setup+0x200>)
   d4630:	4837      	ldr	r0, [pc, #220]	; (d4710 <setup+0x1d8>)
   d4632:	f000 ffab 	bl	d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d4636:	4841      	ldr	r0, [pc, #260]	; (d473c <setup+0x204>)
   d4638:	2144      	movs	r1, #68	; 0x44
   d463a:	f000 fba0 	bl	d4d7e <_ZN14Adafruit_SHT315beginEh>
   d463e:	b988      	cbnz	r0, d4664 <setup+0x12c>
   d4640:	f000 fc70 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4644:	4d3e      	ldr	r5, [pc, #248]	; (d4740 <setup+0x208>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4646:	493f      	ldr	r1, [pc, #252]	; (d4744 <setup+0x20c>)
    resetTimeStamp = millis();
   d4648:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d464a:	4630      	mov	r0, r6
   d464c:	f003 f822 	bl	d7694 <strcpy>
    Serial.println("Couldn't find SHT31");
   d4650:	f001 fec4 	bl	d63dc <_Z16_fetch_usbserialv>
   d4654:	493c      	ldr	r1, [pc, #240]	; (d4748 <setup+0x210>)
   d4656:	f001 fc26 	bl	d5ea6 <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d465a:	2301      	movs	r3, #1
   d465c:	7023      	strb	r3, [r4, #0]
   d465e:	f000 fc61 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4662:	6028      	str	r0, [r5, #0]
  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d4664:	f7ff fea2 	bl	d43ac <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d4668:	f7ff fdae 	bl	d41c8 <_Z20updateThresholdValuev>
  if(!connectToParticle()) {
   d466c:	f7ff fd4a 	bl	d4104 <_Z17connectToParticlev>
   d4670:	b948      	cbnz	r0, d4686 <setup+0x14e>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d4672:	2301      	movs	r3, #1
   d4674:	7023      	strb	r3, [r4, #0]
   d4676:	f000 fc55 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d467a:	4b31      	ldr	r3, [pc, #196]	; (d4740 <setup+0x208>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d467c:	4933      	ldr	r1, [pc, #204]	; (d474c <setup+0x214>)
    resetTimeStamp = millis();
   d467e:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4680:	4630      	mov	r0, r6
   d4682:	f003 f807 	bl	d7694 <strcpy>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d4686:	4b32      	ldr	r3, [pc, #200]	; (d4750 <setup+0x218>)
   d4688:	781b      	ldrb	r3, [r3, #0]
   d468a:	b163      	cbz	r3, d46a6 <setup+0x16e>
   d468c:	2300      	movs	r3, #0
   d468e:	f88d 3000 	strb.w	r3, [sp]
   d4692:	4b30      	ldr	r3, [pc, #192]	; (d4754 <setup+0x21c>)
   d4694:	4930      	ldr	r1, [pc, #192]	; (d4758 <setup+0x220>)
   d4696:	781b      	ldrb	r3, [r3, #0]
   d4698:	a802      	add	r0, sp, #8
   d469a:	4632      	mov	r2, r6
   d469c:	f7ff fd24 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d46a0:	a803      	add	r0, sp, #12
   d46a2:	f7ff fdcf 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46a6:	f000 fc3d 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d46aa:	4b2c      	ldr	r3, [pc, #176]	; (d475c <setup+0x224>)
   d46ac:	6018      	str	r0, [r3, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d46ae:	a804      	add	r0, sp, #16
   d46b0:	f001 fc40 	bl	d5f34 <_ZN6StringD1Ev>
}
   d46b4:	b038      	add	sp, #224	; 0xe0
   d46b6:	bd70      	pop	{r4, r5, r6, pc}
   d46b8:	000d9db7 	.word	0x000d9db7
   d46bc:	000d9fda 	.word	0x000d9fda
   d46c0:	2003e57c 	.word	0x2003e57c
   d46c4:	000d4315 	.word	0x000d4315
   d46c8:	2003e18c 	.word	0x2003e18c
   d46cc:	000d9dc2 	.word	0x000d9dc2
   d46d0:	2003e588 	.word	0x2003e588
   d46d4:	000d9dca 	.word	0x000d9dca
   d46d8:	2003e4d1 	.word	0x2003e4d1
   d46dc:	000d9dd6 	.word	0x000d9dd6
   d46e0:	2003e51b 	.word	0x2003e51b
   d46e4:	000d9ddf 	.word	0x000d9ddf
   d46e8:	2003e5b3 	.word	0x2003e5b3
   d46ec:	000d9de8 	.word	0x000d9de8
   d46f0:	2003e502 	.word	0x2003e502
   d46f4:	000d9dfa 	.word	0x000d9dfa
   d46f8:	2003e59a 	.word	0x2003e59a
   d46fc:	000d9e0c 	.word	0x000d9e0c
   d4700:	2003e4e9 	.word	0x2003e4e9
   d4704:	000d9e1b 	.word	0x000d9e1b
   d4708:	000d9e2a 	.word	0x000d9e2a
   d470c:	000d40b5 	.word	0x000d40b5
   d4710:	000d5561 	.word	0x000d5561
   d4714:	000d9e36 	.word	0x000d9e36
   d4718:	000d484d 	.word	0x000d484d
   d471c:	000d9e43 	.word	0x000d9e43
   d4720:	000d4b7d 	.word	0x000d4b7d
   d4724:	000d9e54 	.word	0x000d9e54
   d4728:	000d4bd1 	.word	0x000d4bd1
   d472c:	000d9e65 	.word	0x000d9e65
   d4730:	000d4c79 	.word	0x000d4c79
   d4734:	000d4c25 	.word	0x000d4c25
   d4738:	000d9e7a 	.word	0x000d9e7a
   d473c:	2003e570 	.word	0x2003e570
   d4740:	2003e538 	.word	0x2003e538
   d4744:	000d9e8e 	.word	0x000d9e8e
   d4748:	000d9eab 	.word	0x000d9eab
   d474c:	000d9ebf 	.word	0x000d9ebf
   d4750:	2003e264 	.word	0x2003e264
   d4754:	2003e4bd 	.word	0x2003e4bd
   d4758:	000d9ed1 	.word	0x000d9ed1
   d475c:	2003e4e4 	.word	0x2003e4e4

000d4760 <_Z16ThresholdCrossedv>:
bool ThresholdCrossed(){
   d4760:	b530      	push	{r4, r5, lr}
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4762:	4b2d      	ldr	r3, [pc, #180]	; (d4818 <_Z16ThresholdCrossedv+0xb8>)
   d4764:	4c2d      	ldr	r4, [pc, #180]	; (d481c <_Z16ThresholdCrossedv+0xbc>)
   d4766:	781b      	ldrb	r3, [r3, #0]
bool ThresholdCrossed(){
   d4768:	b08d      	sub	sp, #52	; 0x34
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d476a:	b913      	cbnz	r3, d4772 <_Z16ThresholdCrossedv+0x12>
   d476c:	4b2c      	ldr	r3, [pc, #176]	; (d4820 <_Z16ThresholdCrossedv+0xc0>)
   d476e:	781b      	ldrb	r3, [r3, #0]
   d4770:	b1eb      	cbz	r3, d47ae <_Z16ThresholdCrossedv+0x4e>
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d4772:	4b2c      	ldr	r3, [pc, #176]	; (d4824 <_Z16ThresholdCrossedv+0xc4>)
   d4774:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4778:	2120      	movs	r1, #32
   d477a:	e9cd 2300 	strd	r2, r3, [sp]
   d477e:	a804      	add	r0, sp, #16
   d4780:	4a29      	ldr	r2, [pc, #164]	; (d4828 <_Z16ThresholdCrossedv+0xc8>)
   d4782:	f000 fe45 	bl	d5410 <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d4786:	2005      	movs	r0, #5
   d4788:	f7ff fcf0 	bl	d416c <_Z8BlinkLEDi>
        return waitConditionWhile(_condition, []{ return true; });
   d478c:	f7ff fd10 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d4790:	2300      	movs	r3, #0
   d4792:	f88d 3000 	strb.w	r3, [sp]
   d4796:	4b25      	ldr	r3, [pc, #148]	; (d482c <_Z16ThresholdCrossedv+0xcc>)
   d4798:	4925      	ldr	r1, [pc, #148]	; (d4830 <_Z16ThresholdCrossedv+0xd0>)
   d479a:	781b      	ldrb	r3, [r3, #0]
   d479c:	aa04      	add	r2, sp, #16
   d479e:	a802      	add	r0, sp, #8
   d47a0:	f7ff fca2 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d47a4:	a803      	add	r0, sp, #12
   d47a6:	f7ff fd4d 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d47aa:	2301      	movs	r3, #1
   d47ac:	7023      	strb	r3, [r4, #0]
  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d47ae:	4d21      	ldr	r5, [pc, #132]	; (d4834 <_Z16ThresholdCrossedv+0xd4>)
   d47b0:	782a      	ldrb	r2, [r5, #0]
   d47b2:	b912      	cbnz	r2, d47ba <_Z16ThresholdCrossedv+0x5a>
   d47b4:	4b20      	ldr	r3, [pc, #128]	; (d4838 <_Z16ThresholdCrossedv+0xd8>)
   d47b6:	781b      	ldrb	r3, [r3, #0]
   d47b8:	b1eb      	cbz	r3, d47f6 <_Z16ThresholdCrossedv+0x96>
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d47ba:	4b20      	ldr	r3, [pc, #128]	; (d483c <_Z16ThresholdCrossedv+0xdc>)
   d47bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47c0:	2120      	movs	r1, #32
   d47c2:	e9cd 2300 	strd	r2, r3, [sp]
   d47c6:	a804      	add	r0, sp, #16
   d47c8:	4a1d      	ldr	r2, [pc, #116]	; (d4840 <_Z16ThresholdCrossedv+0xe0>)
   d47ca:	f000 fe21 	bl	d5410 <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d47ce:	2007      	movs	r0, #7
   d47d0:	f7ff fccc 	bl	d416c <_Z8BlinkLEDi>
   d47d4:	f7ff fcec 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d47d8:	2300      	movs	r3, #0
   d47da:	f88d 3000 	strb.w	r3, [sp]
   d47de:	4b13      	ldr	r3, [pc, #76]	; (d482c <_Z16ThresholdCrossedv+0xcc>)
   d47e0:	4913      	ldr	r1, [pc, #76]	; (d4830 <_Z16ThresholdCrossedv+0xd0>)
   d47e2:	781b      	ldrb	r3, [r3, #0]
   d47e4:	aa04      	add	r2, sp, #16
   d47e6:	a802      	add	r0, sp, #8
   d47e8:	f7ff fc7e 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d47ec:	a803      	add	r0, sp, #12
   d47ee:	f7ff fd29 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d47f2:	2301      	movs	r3, #1
   d47f4:	7023      	strb	r3, [r4, #0]
  thresholdTimeStamp = Time.minute();
   d47f6:	f001 fd01 	bl	d61fc <_ZN9TimeClass6minuteEv>
   d47fa:	4b12      	ldr	r3, [pc, #72]	; (d4844 <_Z16ThresholdCrossedv+0xe4>)
   d47fc:	6018      	str	r0, [r3, #0]
  if (thresholdCrossAcknowledged == true)
   d47fe:	7823      	ldrb	r3, [r4, #0]
   d4800:	b133      	cbz	r3, d4810 <_Z16ThresholdCrossedv+0xb0>
    lowerHumidityThresholdCrossed = false;
   d4802:	4a0d      	ldr	r2, [pc, #52]	; (d4838 <_Z16ThresholdCrossedv+0xd8>)
    upperHumidityThresholdCrossed = false;
   d4804:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d4806:	7013      	strb	r3, [r2, #0]
    upperHumidityThresholdCrossed = false;
   d4808:	702b      	strb	r3, [r5, #0]
    upperTemperatureThreshold     = false;
   d480a:	4b0f      	ldr	r3, [pc, #60]	; (d4848 <_Z16ThresholdCrossedv+0xe8>)
   d480c:	2200      	movs	r2, #0
   d480e:	601a      	str	r2, [r3, #0]
}
   d4810:	2001      	movs	r0, #1
   d4812:	b00d      	add	sp, #52	; 0x34
   d4814:	bd30      	pop	{r4, r5, pc}
   d4816:	bf00      	nop
   d4818:	2003e501 	.word	0x2003e501
   d481c:	2003e598 	.word	0x2003e598
   d4820:	2003e5b2 	.word	0x2003e5b2
   d4824:	2003e580 	.word	0x2003e580
   d4828:	000d9ed9 	.word	0x000d9ed9
   d482c:	2003e4bd 	.word	0x2003e4bd
   d4830:	000d9ef5 	.word	0x000d9ef5
   d4834:	2003e599 	.word	0x2003e599
   d4838:	2003e4e8 	.word	0x2003e4e8
   d483c:	2003e530 	.word	0x2003e530
   d4840:	000d9f06 	.word	0x000d9f06
   d4844:	2003e4b8 	.word	0x2003e4b8
   d4848:	2003e260 	.word	0x2003e260

000d484c <_Z14setVerboseMode6String>:
{
   d484c:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d484e:	4914      	ldr	r1, [pc, #80]	; (d48a0 <_Z14setVerboseMode6String+0x54>)
   d4850:	b085      	sub	sp, #20
   d4852:	4605      	mov	r5, r0
   d4854:	f001 fbe7 	bl	d6026 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4858:	4604      	mov	r4, r0
   d485a:	b190      	cbz	r0, d4882 <_Z14setVerboseMode6String+0x36>
    verboseMode = true;
   d485c:	4b11      	ldr	r3, [pc, #68]	; (d48a4 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d485e:	4a12      	ldr	r2, [pc, #72]	; (d48a8 <_Z14setVerboseMode6String+0x5c>)
    verboseMode = true;
   d4860:	2401      	movs	r4, #1
   d4862:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4864:	2300      	movs	r3, #0
   d4866:	f88d 3000 	strb.w	r3, [sp]
   d486a:	4b10      	ldr	r3, [pc, #64]	; (d48ac <_Z14setVerboseMode6String+0x60>)
   d486c:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d486e:	4910      	ldr	r1, [pc, #64]	; (d48b0 <_Z14setVerboseMode6String+0x64>)
   d4870:	a802      	add	r0, sp, #8
   d4872:	f7ff fc39 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4876:	a803      	add	r0, sp, #12
   d4878:	f7ff fce4 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d487c:	2001      	movs	r0, #1
}
   d487e:	b005      	add	sp, #20
   d4880:	bd30      	pop	{r4, r5, pc}
   d4882:	490c      	ldr	r1, [pc, #48]	; (d48b4 <_Z14setVerboseMode6String+0x68>)
   d4884:	4628      	mov	r0, r5
   d4886:	f001 fbce 	bl	d6026 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d488a:	2800      	cmp	r0, #0
   d488c:	d0f7      	beq.n	d487e <_Z14setVerboseMode6String+0x32>
    verboseMode = false;
   d488e:	4b05      	ldr	r3, [pc, #20]	; (d48a4 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4890:	4a09      	ldr	r2, [pc, #36]	; (d48b8 <_Z14setVerboseMode6String+0x6c>)
    verboseMode = false;
   d4892:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4894:	4b05      	ldr	r3, [pc, #20]	; (d48ac <_Z14setVerboseMode6String+0x60>)
   d4896:	f88d 4000 	strb.w	r4, [sp]
   d489a:	781b      	ldrb	r3, [r3, #0]
   d489c:	e7e7      	b.n	d486e <_Z14setVerboseMode6String+0x22>
   d489e:	bf00      	nop
   d48a0:	000d9ebd 	.word	0x000d9ebd
   d48a4:	2003e264 	.word	0x2003e264
   d48a8:	000d9f1f 	.word	0x000d9f1f
   d48ac:	2003e4bd 	.word	0x2003e4bd
   d48b0:	000d9f42 	.word	0x000d9f42
   d48b4:	000d9f30 	.word	0x000d9f30
   d48b8:	000d9f32 	.word	0x000d9f32

000d48bc <_Z22publishStateTransitionv>:
{
   d48bc:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d48be:	4d18      	ldr	r5, [pc, #96]	; (d4920 <_Z22publishStateTransitionv+0x64>)
   d48c0:	4c18      	ldr	r4, [pc, #96]	; (d4924 <_Z22publishStateTransitionv+0x68>)
   d48c2:	4919      	ldr	r1, [pc, #100]	; (d4928 <_Z22publishStateTransitionv+0x6c>)
   d48c4:	782a      	ldrb	r2, [r5, #0]
   d48c6:	7820      	ldrb	r0, [r4, #0]
{
   d48c8:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d48ca:	231a      	movs	r3, #26
   d48cc:	fb03 1202 	mla	r2, r3, r2, r1
   d48d0:	9200      	str	r2, [sp, #0]
   d48d2:	fb03 1300 	mla	r3, r3, r0, r1
   d48d6:	4a15      	ldr	r2, [pc, #84]	; (d492c <_Z22publishStateTransitionv+0x70>)
   d48d8:	2128      	movs	r1, #40	; 0x28
   d48da:	a804      	add	r0, sp, #16
   d48dc:	f000 fd98 	bl	d5410 <snprintf>
  oldState = state;
   d48e0:	782b      	ldrb	r3, [r5, #0]
   d48e2:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48e4:	f000 fcec 	bl	d52c0 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d48e8:	b190      	cbz	r0, d4910 <_Z22publishStateTransitionv+0x54>
   d48ea:	f7ff fc61 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d48ee:	2300      	movs	r3, #0
   d48f0:	f88d 3000 	strb.w	r3, [sp]
   d48f4:	4b0e      	ldr	r3, [pc, #56]	; (d4930 <_Z22publishStateTransitionv+0x74>)
   d48f6:	490f      	ldr	r1, [pc, #60]	; (d4934 <_Z22publishStateTransitionv+0x78>)
   d48f8:	781b      	ldrb	r3, [r3, #0]
   d48fa:	aa04      	add	r2, sp, #16
   d48fc:	a802      	add	r0, sp, #8
   d48fe:	f7ff fbf3 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4902:	a803      	add	r0, sp, #12
   d4904:	f7ff fc9e 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4908:	f000 fb0c 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d490c:	4b0a      	ldr	r3, [pc, #40]	; (d4938 <_Z22publishStateTransitionv+0x7c>)
   d490e:	6018      	str	r0, [r3, #0]
  Serial.println(stateTransitionString);
   d4910:	f001 fd64 	bl	d63dc <_Z16_fetch_usbserialv>
   d4914:	a904      	add	r1, sp, #16
   d4916:	f001 fac6 	bl	d5ea6 <_ZN5Print7printlnEPKc>
}
   d491a:	b00f      	add	sp, #60	; 0x3c
   d491c:	bd30      	pop	{r4, r5, pc}
   d491e:	bf00      	nop
   d4920:	2003e57c 	.word	0x2003e57c
   d4924:	2003e51a 	.word	0x2003e51a
   d4928:	2003e190 	.word	0x2003e190
   d492c:	000d9f47 	.word	0x000d9f47
   d4930:	2003e4bd 	.word	0x2003e4bd
   d4934:	000d9f55 	.word	0x000d9f55
   d4938:	2003e4e4 	.word	0x2003e4e4

000d493c <loop>:
{
   d493c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
   d493e:	4c7b      	ldr	r4, [pc, #492]	; (d4b2c <loop+0x1f0>)
   d4940:	7823      	ldrb	r3, [r4, #0]
   d4942:	3b01      	subs	r3, #1
   d4944:	2b05      	cmp	r3, #5
   d4946:	d81c      	bhi.n	d4982 <loop+0x46>
   d4948:	e8df f013 	tbh	[pc, r3, lsl #1]
   d494c:	000600c4 	.word	0x000600c4
   d4950:	0039004b 	.word	0x0039004b
   d4954:	00960076 	.word	0x00960076
    if (verboseMode && state != oldState) publishStateTransition();
   d4958:	4b75      	ldr	r3, [pc, #468]	; (d4b30 <loop+0x1f4>)
   d495a:	781b      	ldrb	r3, [r3, #0]
   d495c:	b12b      	cbz	r3, d496a <loop+0x2e>
   d495e:	4b75      	ldr	r3, [pc, #468]	; (d4b34 <loop+0x1f8>)
   d4960:	781b      	ldrb	r3, [r3, #0]
   d4962:	2b02      	cmp	r3, #2
   d4964:	d001      	beq.n	d496a <loop+0x2e>
   d4966:	f7ff ffa9 	bl	d48bc <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d496a:	f001 fc3d 	bl	d61e8 <_ZN9TimeClass4hourEv>
   d496e:	4b72      	ldr	r3, [pc, #456]	; (d4b38 <loop+0x1fc>)
   d4970:	4d72      	ldr	r5, [pc, #456]	; (d4b3c <loop+0x200>)
   d4972:	781b      	ldrb	r3, [r3, #0]
   d4974:	4298      	cmp	r0, r3
   d4976:	d006      	beq.n	d4986 <loop+0x4a>
      TimePassed = Time.minute();
   d4978:	f001 fc40 	bl	d61fc <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d497c:	2303      	movs	r3, #3
      TimePassed = Time.minute();
   d497e:	6028      	str	r0, [r5, #0]
      state = THRESHOLD_CROSSED;
   d4980:	7023      	strb	r3, [r4, #0]
}
   d4982:	b004      	add	sp, #16
   d4984:	bd70      	pop	{r4, r5, r6, pc}
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d4986:	f001 fc39 	bl	d61fc <_ZN9TimeClass6minuteEv>
   d498a:	682b      	ldr	r3, [r5, #0]
   d498c:	1ac0      	subs	r0, r0, r3
   d498e:	281d      	cmp	r0, #29
   d4990:	dcf2      	bgt.n	d4978 <loop+0x3c>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d4992:	4b6b      	ldr	r3, [pc, #428]	; (d4b40 <loop+0x204>)
   d4994:	781b      	ldrb	r3, [r3, #0]
   d4996:	b94b      	cbnz	r3, d49ac <loop+0x70>
    || lowerTemperatureThresholdCrossed \
   d4998:	4b6a      	ldr	r3, [pc, #424]	; (d4b44 <loop+0x208>)
   d499a:	781b      	ldrb	r3, [r3, #0]
   d499c:	b933      	cbnz	r3, d49ac <loop+0x70>
    || upperHumidityThresholdCrossed \
   d499e:	4b6a      	ldr	r3, [pc, #424]	; (d4b48 <loop+0x20c>)
   d49a0:	781b      	ldrb	r3, [r3, #0]
   d49a2:	b91b      	cbnz	r3, d49ac <loop+0x70>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 5))                 // Send threshold message after every 10 minutes.
   d49a4:	4b69      	ldr	r3, [pc, #420]	; (d4b4c <loop+0x210>)
   d49a6:	781b      	ldrb	r3, [r3, #0]
   d49a8:	2b00      	cmp	r3, #0
   d49aa:	d0ea      	beq.n	d4982 <loop+0x46>
   d49ac:	f001 fc26 	bl	d61fc <_ZN9TimeClass6minuteEv>
   d49b0:	4b67      	ldr	r3, [pc, #412]	; (d4b50 <loop+0x214>)
   d49b2:	681b      	ldr	r3, [r3, #0]
   d49b4:	1ac0      	subs	r0, r0, r3
   d49b6:	2805      	cmp	r0, #5
   d49b8:	dde3      	ble.n	d4982 <loop+0x46>
      state = THRESHOLD_CROSSED;
   d49ba:	2304      	movs	r3, #4
   d49bc:	e7e0      	b.n	d4980 <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d49be:	4b5c      	ldr	r3, [pc, #368]	; (d4b30 <loop+0x1f4>)
   d49c0:	781b      	ldrb	r3, [r3, #0]
   d49c2:	b12b      	cbz	r3, d49d0 <loop+0x94>
   d49c4:	4b5b      	ldr	r3, [pc, #364]	; (d4b34 <loop+0x1f8>)
   d49c6:	781b      	ldrb	r3, [r3, #0]
   d49c8:	2b04      	cmp	r3, #4
   d49ca:	d001      	beq.n	d49d0 <loop+0x94>
   d49cc:	f7ff ff76 	bl	d48bc <_Z22publishStateTransitionv>
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d49d0:	f7ff fcec 	bl	d43ac <_Z16takeMeasurementsv>
   d49d4:	b118      	cbz	r0, d49de <loop+0xa2>
      ThresholdCrossed();
   d49d6:	f7ff fec3 	bl	d4760 <_Z16ThresholdCrossedv>
     state = IDLE_STATE;
   d49da:	2302      	movs	r3, #2
   d49dc:	e7d0      	b.n	d4980 <loop+0x44>
      state= ERROR_STATE;
   d49de:	2301      	movs	r3, #1
   d49e0:	e7ce      	b.n	d4980 <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d49e2:	4e53      	ldr	r6, [pc, #332]	; (d4b30 <loop+0x1f4>)
   d49e4:	7832      	ldrb	r2, [r6, #0]
   d49e6:	b12a      	cbz	r2, d49f4 <loop+0xb8>
   d49e8:	4b52      	ldr	r3, [pc, #328]	; (d4b34 <loop+0x1f8>)
   d49ea:	781b      	ldrb	r3, [r3, #0]
   d49ec:	2b03      	cmp	r3, #3
   d49ee:	d001      	beq.n	d49f4 <loop+0xb8>
   d49f0:	f7ff ff64 	bl	d48bc <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d49f4:	f7ff fcda 	bl	d43ac <_Z16takeMeasurementsv>
   d49f8:	4605      	mov	r5, r0
   d49fa:	b9d8      	cbnz	r0, d4a34 <loop+0xf8>
      state = ERROR_STATE;
   d49fc:	2301      	movs	r3, #1
   d49fe:	7023      	strb	r3, [r4, #0]
   d4a00:	f000 fa90 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4a04:	4b53      	ldr	r3, [pc, #332]	; (d4b54 <loop+0x218>)
   d4a06:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4a08:	7833      	ldrb	r3, [r6, #0]
   d4a0a:	2b00      	cmp	r3, #0
   d4a0c:	d0b9      	beq.n	d4982 <loop+0x46>
   d4a0e:	f7ff fbcf 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4a12:	4b51      	ldr	r3, [pc, #324]	; (d4b58 <loop+0x21c>)
   d4a14:	f88d 5000 	strb.w	r5, [sp]
   d4a18:	781b      	ldrb	r3, [r3, #0]
   d4a1a:	4a50      	ldr	r2, [pc, #320]	; (d4b5c <loop+0x220>)
   d4a1c:	4950      	ldr	r1, [pc, #320]	; (d4b60 <loop+0x224>)
   d4a1e:	a802      	add	r0, sp, #8
   d4a20:	f7ff fb62 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4a24:	a803      	add	r0, sp, #12
   d4a26:	f7ff fc0d 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a2a:	f000 fa7b 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d4a2e:	4b4d      	ldr	r3, [pc, #308]	; (d4b64 <loop+0x228>)
      resetTimeStamp = millis();
   d4a30:	6018      	str	r0, [r3, #0]
   d4a32:	e7a6      	b.n	d4982 <loop+0x46>
    else state = REPORTING_STATE;
   d4a34:	2305      	movs	r3, #5
   d4a36:	e7a3      	b.n	d4980 <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4a38:	4b3d      	ldr	r3, [pc, #244]	; (d4b30 <loop+0x1f4>)
   d4a3a:	781b      	ldrb	r3, [r3, #0]
   d4a3c:	b12b      	cbz	r3, d4a4a <loop+0x10e>
   d4a3e:	4b3d      	ldr	r3, [pc, #244]	; (d4b34 <loop+0x1f8>)
   d4a40:	781b      	ldrb	r3, [r3, #0]
   d4a42:	2b05      	cmp	r3, #5
   d4a44:	d001      	beq.n	d4a4a <loop+0x10e>
   d4a46:	f7ff ff39 	bl	d48bc <_Z22publishStateTransitionv>
   d4a4a:	f000 fc39 	bl	d52c0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4a4e:	b168      	cbz	r0, d4a6c <loop+0x130>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4a50:	f001 fbca 	bl	d61e8 <_ZN9TimeClass4hourEv>
   d4a54:	280c      	cmp	r0, #12
   d4a56:	d105      	bne.n	d4a64 <loop+0x128>
   d4a58:	f000 fc32 	bl	d52c0 <spark_cloud_flag_connected>
        if (!connected()) {
   d4a5c:	b110      	cbz	r0, d4a64 <loop+0x128>
        return spark_sync_time(NULL);
   d4a5e:	2000      	movs	r0, #0
   d4a60:	f000 fc4e 	bl	d5300 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4a64:	f7ff fc04 	bl	d4270 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4a68:	2306      	movs	r3, #6
   d4a6a:	e789      	b.n	d4980 <loop+0x44>
      state = ERROR_STATE;
   d4a6c:	2301      	movs	r3, #1
   d4a6e:	7023      	strb	r3, [r4, #0]
   d4a70:	f000 fa58 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4a74:	4b37      	ldr	r3, [pc, #220]	; (d4b54 <loop+0x218>)
   d4a76:	e7db      	b.n	d4a30 <loop+0xf4>
    if (verboseMode && state != oldState) publishStateTransition();
   d4a78:	4b2d      	ldr	r3, [pc, #180]	; (d4b30 <loop+0x1f4>)
   d4a7a:	781b      	ldrb	r3, [r3, #0]
   d4a7c:	b12b      	cbz	r3, d4a8a <loop+0x14e>
   d4a7e:	4b2d      	ldr	r3, [pc, #180]	; (d4b34 <loop+0x1f8>)
   d4a80:	781b      	ldrb	r3, [r3, #0]
   d4a82:	2b06      	cmp	r3, #6
   d4a84:	d001      	beq.n	d4a8a <loop+0x14e>
   d4a86:	f7ff ff19 	bl	d48bc <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4a8a:	4b37      	ldr	r3, [pc, #220]	; (d4b68 <loop+0x22c>)
   d4a8c:	781b      	ldrb	r3, [r3, #0]
   d4a8e:	2b00      	cmp	r3, #0
   d4a90:	d0a3      	beq.n	d49da <loop+0x9e>
   d4a92:	f000 fa47 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4a96:	4b35      	ldr	r3, [pc, #212]	; (d4b6c <loop+0x230>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	1ac0      	subs	r0, r0, r3
   d4a9c:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4aa0:	4298      	cmp	r0, r3
   d4aa2:	f67f af6e 	bls.w	d4982 <loop+0x46>
   d4aa6:	f000 fa3d 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4aaa:	4d2a      	ldr	r5, [pc, #168]	; (d4b54 <loop+0x218>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4aac:	4a30      	ldr	r2, [pc, #192]	; (d4b70 <loop+0x234>)
      resetTimeStamp = millis();
   d4aae:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4ab0:	2300      	movs	r3, #0
   d4ab2:	f88d 3000 	strb.w	r3, [sp]
   d4ab6:	4b28      	ldr	r3, [pc, #160]	; (d4b58 <loop+0x21c>)
   d4ab8:	492e      	ldr	r1, [pc, #184]	; (d4b74 <loop+0x238>)
   d4aba:	781b      	ldrb	r3, [r3, #0]
   d4abc:	a802      	add	r0, sp, #8
   d4abe:	f7ff fb13 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ac2:	a803      	add	r0, sp, #12
   d4ac4:	f7ff fbbe 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4ac8:	2301      	movs	r3, #1
   d4aca:	7023      	strb	r3, [r4, #0]
   d4acc:	f000 fa2a 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ad0:	6028      	str	r0, [r5, #0]
   d4ad2:	e756      	b.n	d4982 <loop+0x46>
    if (verboseMode && state != oldState) publishStateTransition();
   d4ad4:	4b16      	ldr	r3, [pc, #88]	; (d4b30 <loop+0x1f4>)
   d4ad6:	781b      	ldrb	r3, [r3, #0]
   d4ad8:	b12b      	cbz	r3, d4ae6 <loop+0x1aa>
   d4ada:	4b16      	ldr	r3, [pc, #88]	; (d4b34 <loop+0x1f8>)
   d4adc:	781b      	ldrb	r3, [r3, #0]
   d4ade:	2b01      	cmp	r3, #1
   d4ae0:	d001      	beq.n	d4ae6 <loop+0x1aa>
   d4ae2:	f7ff feeb 	bl	d48bc <_Z22publishStateTransitionv>
   d4ae6:	f000 fa1d 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4aea:	4b1a      	ldr	r3, [pc, #104]	; (d4b54 <loop+0x218>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4af2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4af6:	4283      	cmp	r3, r0
   d4af8:	f4bf af43 	bcs.w	d4982 <loop+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4afc:	f000 fbe0 	bl	d52c0 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4b00:	b160      	cbz	r0, d4b1c <loop+0x1e0>
   d4b02:	2300      	movs	r3, #0
   d4b04:	f88d 3000 	strb.w	r3, [sp]
   d4b08:	4b13      	ldr	r3, [pc, #76]	; (d4b58 <loop+0x21c>)
   d4b0a:	4a1b      	ldr	r2, [pc, #108]	; (d4b78 <loop+0x23c>)
   d4b0c:	781b      	ldrb	r3, [r3, #0]
   d4b0e:	4914      	ldr	r1, [pc, #80]	; (d4b60 <loop+0x224>)
   d4b10:	a802      	add	r0, sp, #8
   d4b12:	f7ff fae9 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b16:	a803      	add	r0, sp, #12
   d4b18:	f7ff fb94 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d4b1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4b20:	f000 fc96 	bl	d5450 <delay>
      System.reset();
   d4b24:	f001 facc 	bl	d60c0 <_ZN11SystemClass5resetEv>
}
   d4b28:	e72b      	b.n	d4982 <loop+0x46>
   d4b2a:	bf00      	nop
   d4b2c:	2003e57c 	.word	0x2003e57c
   d4b30:	2003e264 	.word	0x2003e264
   d4b34:	2003e51a 	.word	0x2003e51a
   d4b38:	2003e4d0 	.word	0x2003e4d0
   d4b3c:	2003e4c0 	.word	0x2003e4c0
   d4b40:	2003e5b2 	.word	0x2003e5b2
   d4b44:	2003e501 	.word	0x2003e501
   d4b48:	2003e599 	.word	0x2003e599
   d4b4c:	2003e4e8 	.word	0x2003e4e8
   d4b50:	2003e4b8 	.word	0x2003e4b8
   d4b54:	2003e538 	.word	0x2003e538
   d4b58:	2003e4bd 	.word	0x2003e4bd
   d4b5c:	000d9f66 	.word	0x000d9f66
   d4b60:	000d9d68 	.word	0x000d9d68
   d4b64:	2003e4e4 	.word	0x2003e4e4
   d4b68:	2003e188 	.word	0x2003e188
   d4b6c:	2003e5cc 	.word	0x2003e5cc
   d4b70:	000d9db6 	.word	0x000d9db6
   d4b74:	000d9f80 	.word	0x000d9f80
   d4b78:	000d9f99 	.word	0x000d9f99

000d4b7c <_Z17setUpperTempLimit6String>:
{
   d4b7c:	b500      	push	{lr}
   d4b7e:	b08b      	sub	sp, #44	; 0x2c
   d4b80:	9003      	str	r0, [sp, #12]
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d4b82:	f001 fa7b 	bl	d607c <_ZNK6String7toFloatEv>
   d4b86:	4b0f      	ldr	r3, [pc, #60]	; (d4bc4 <_Z17setUpperTempLimit6String+0x48>)
   d4b88:	ed83 0a08 	vstr	s0, [r3, #32]
   d4b8c:	f7ff fb10 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4b90:	9903      	ldr	r1, [sp, #12]
   d4b92:	a806      	add	r0, sp, #24
   d4b94:	f001 fa3c 	bl	d6010 <_ZN6StringC1ERKS_>
   d4b98:	2300      	movs	r3, #0
   d4b9a:	f88d 3000 	strb.w	r3, [sp]
   d4b9e:	4b0a      	ldr	r3, [pc, #40]	; (d4bc8 <_Z17setUpperTempLimit6String+0x4c>)
   d4ba0:	9a06      	ldr	r2, [sp, #24]
   d4ba2:	781b      	ldrb	r3, [r3, #0]
   d4ba4:	4909      	ldr	r1, [pc, #36]	; (d4bcc <_Z17setUpperTempLimit6String+0x50>)
   d4ba6:	a804      	add	r0, sp, #16
   d4ba8:	f7ff fa9e 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4bac:	a805      	add	r0, sp, #20
   d4bae:	f7ff fb49 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bb2:	a806      	add	r0, sp, #24
   d4bb4:	f001 f9be 	bl	d5f34 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4bb8:	f7ff fb06 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4bbc:	2001      	movs	r0, #1
   d4bbe:	b00b      	add	sp, #44	; 0x2c
   d4bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bc4:	2003e540 	.word	0x2003e540
   d4bc8:	2003e4bd 	.word	0x2003e4bd
   d4bcc:	000d9fad 	.word	0x000d9fad

000d4bd0 <_Z17setLowerTempLimit6String>:
{
   d4bd0:	b500      	push	{lr}
   d4bd2:	b08b      	sub	sp, #44	; 0x2c
   d4bd4:	9003      	str	r0, [sp, #12]
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d4bd6:	f001 fa51 	bl	d607c <_ZNK6String7toFloatEv>
   d4bda:	4b0f      	ldr	r3, [pc, #60]	; (d4c18 <_Z17setLowerTempLimit6String+0x48>)
   d4bdc:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
   d4be0:	f7ff fae6 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4be4:	9903      	ldr	r1, [sp, #12]
   d4be6:	a806      	add	r0, sp, #24
   d4be8:	f001 fa12 	bl	d6010 <_ZN6StringC1ERKS_>
   d4bec:	2300      	movs	r3, #0
   d4bee:	f88d 3000 	strb.w	r3, [sp]
   d4bf2:	4b0a      	ldr	r3, [pc, #40]	; (d4c1c <_Z17setLowerTempLimit6String+0x4c>)
   d4bf4:	9a06      	ldr	r2, [sp, #24]
   d4bf6:	781b      	ldrb	r3, [r3, #0]
   d4bf8:	4909      	ldr	r1, [pc, #36]	; (d4c20 <_Z17setLowerTempLimit6String+0x50>)
   d4bfa:	a804      	add	r0, sp, #16
   d4bfc:	f7ff fa74 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c00:	a805      	add	r0, sp, #20
   d4c02:	f7ff fb1f 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c06:	a806      	add	r0, sp, #24
   d4c08:	f001 f994 	bl	d5f34 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4c0c:	f7ff fadc 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4c10:	2001      	movs	r0, #1
   d4c12:	b00b      	add	sp, #44	; 0x2c
   d4c14:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c18:	2003e540 	.word	0x2003e540
   d4c1c:	2003e4bd 	.word	0x2003e4bd
   d4c20:	000d9fc1 	.word	0x000d9fc1

000d4c24 <_Z21setUpperHumidityLimit6String>:
{
   d4c24:	b500      	push	{lr}
   d4c26:	b08b      	sub	sp, #44	; 0x2c
   d4c28:	9003      	str	r0, [sp, #12]
  sensor_data.upperHumidityThreshold = value.toFloat();
   d4c2a:	f001 fa27 	bl	d607c <_ZNK6String7toFloatEv>
   d4c2e:	4b0f      	ldr	r3, [pc, #60]	; (d4c6c <_Z21setUpperHumidityLimit6String+0x48>)
   d4c30:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
   d4c34:	f7ff fabc 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4c38:	9903      	ldr	r1, [sp, #12]
   d4c3a:	a806      	add	r0, sp, #24
   d4c3c:	f001 f9e8 	bl	d6010 <_ZN6StringC1ERKS_>
   d4c40:	2300      	movs	r3, #0
   d4c42:	f88d 3000 	strb.w	r3, [sp]
   d4c46:	4b0a      	ldr	r3, [pc, #40]	; (d4c70 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4c48:	9a06      	ldr	r2, [sp, #24]
   d4c4a:	781b      	ldrb	r3, [r3, #0]
   d4c4c:	4909      	ldr	r1, [pc, #36]	; (d4c74 <_Z21setUpperHumidityLimit6String+0x50>)
   d4c4e:	a804      	add	r0, sp, #16
   d4c50:	f7ff fa4a 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c54:	a805      	add	r0, sp, #20
   d4c56:	f7ff faf5 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c5a:	a806      	add	r0, sp, #24
   d4c5c:	f001 f96a 	bl	d5f34 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4c60:	f7ff fab2 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4c64:	2001      	movs	r0, #1
   d4c66:	b00b      	add	sp, #44	; 0x2c
   d4c68:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c6c:	2003e540 	.word	0x2003e540
   d4c70:	2003e4bd 	.word	0x2003e4bd
   d4c74:	000d9fad 	.word	0x000d9fad

000d4c78 <_Z21setLowerHumidityLimit6String>:
{
   d4c78:	b500      	push	{lr}
   d4c7a:	b08b      	sub	sp, #44	; 0x2c
   d4c7c:	9003      	str	r0, [sp, #12]
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4c7e:	f001 f9fd 	bl	d607c <_ZNK6String7toFloatEv>
   d4c82:	4b0f      	ldr	r3, [pc, #60]	; (d4cc0 <_Z21setLowerHumidityLimit6String+0x48>)
   d4c84:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
   d4c88:	f7ff fa92 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4c8c:	9903      	ldr	r1, [sp, #12]
   d4c8e:	a806      	add	r0, sp, #24
   d4c90:	f001 f9be 	bl	d6010 <_ZN6StringC1ERKS_>
   d4c94:	2300      	movs	r3, #0
   d4c96:	f88d 3000 	strb.w	r3, [sp]
   d4c9a:	4b0a      	ldr	r3, [pc, #40]	; (d4cc4 <_Z21setLowerHumidityLimit6String+0x4c>)
   d4c9c:	9a06      	ldr	r2, [sp, #24]
   d4c9e:	781b      	ldrb	r3, [r3, #0]
   d4ca0:	4909      	ldr	r1, [pc, #36]	; (d4cc8 <_Z21setLowerHumidityLimit6String+0x50>)
   d4ca2:	a804      	add	r0, sp, #16
   d4ca4:	f7ff fa20 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ca8:	a805      	add	r0, sp, #20
   d4caa:	f7ff facb 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cae:	a806      	add	r0, sp, #24
   d4cb0:	f001 f940 	bl	d5f34 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4cb4:	f7ff fa88 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4cb8:	2001      	movs	r0, #1
   d4cba:	b00b      	add	sp, #44	; 0x2c
   d4cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4cc0:	2003e540 	.word	0x2003e540
   d4cc4:	2003e4bd 	.word	0x2003e4bd
   d4cc8:	000d9fc1 	.word	0x000d9fc1

000d4ccc <_GLOBAL__sub_I_sht31>:
        val_(val) {
   d4ccc:	4b11      	ldr	r3, [pc, #68]	; (d4d14 <_GLOBAL__sub_I_sht31+0x48>)
   d4cce:	b570      	push	{r4, r5, r6, lr}
   d4cd0:	2400      	movs	r4, #0
   d4cd2:	701c      	strb	r4, [r3, #0]
   d4cd4:	4b10      	ldr	r3, [pc, #64]	; (d4d18 <_GLOBAL__sub_I_sht31+0x4c>)
              error_(SYSTEM_ERROR_NONE) {
   d4cd6:	4d11      	ldr	r5, [pc, #68]	; (d4d1c <_GLOBAL__sub_I_sht31+0x50>)
   d4cd8:	2601      	movs	r6, #1
   d4cda:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4cdc:	f000 f962 	bl	d4fa4 <HAL_Pin_Map>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4ce0:	480f      	ldr	r0, [pc, #60]	; (d4d20 <_GLOBAL__sub_I_sht31+0x54>)
   d4ce2:	f000 f829 	bl	d4d38 <_ZN14Adafruit_SHT31C1Ev>
    SleepResult() {}
   d4ce6:	4b0f      	ldr	r3, [pc, #60]	; (d4d24 <_GLOBAL__sub_I_sht31+0x58>)
   d4ce8:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
   d4cea:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4cec:	602c      	str	r4, [r5, #0]
   d4cee:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4cf0:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4cf2:	f000 fa77 	bl	d51e4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4cf6:	4a0c      	ldr	r2, [pc, #48]	; (d4d28 <_GLOBAL__sub_I_sht31+0x5c>)
   d4cf8:	490c      	ldr	r1, [pc, #48]	; (d4d2c <_GLOBAL__sub_I_sht31+0x60>)
   d4cfa:	4628      	mov	r0, r5
   d4cfc:	f001 fd26 	bl	d674c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4d00:	4621      	mov	r1, r4
   d4d02:	4630      	mov	r0, r6
   d4d04:	f000 fa7e 	bl	d5204 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4d08:	4631      	mov	r1, r6
   d4d0a:	2004      	movs	r0, #4
   d4d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4d10:	f000 b8f8 	b.w	d4f04 <HAL_Feature_Set>
   d4d14:	2003e4bc 	.word	0x2003e4bc
   d4d18:	2003e4bd 	.word	0x2003e4bd
   d4d1c:	2003e4ac 	.word	0x2003e4ac
   d4d20:	2003e570 	.word	0x2003e570
   d4d24:	ffff0000 	.word	0xffff0000
   d4d28:	2003e4a8 	.word	0x2003e4a8
   d4d2c:	000d40d1 	.word	0x000d40d1

000d4d30 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4d30:	6803      	ldr	r3, [r0, #0]
   d4d32:	b2c9      	uxtb	r1, r1
   d4d34:	689b      	ldr	r3, [r3, #8]
   d4d36:	4718      	bx	r3

000d4d38 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4d38:	4770      	bx	lr

000d4d3a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4d3a:	b538      	push	{r3, r4, r5, lr}
   d4d3c:	4605      	mov	r5, r0
   d4d3e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4d40:	f001 fcdc 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4d44:	7829      	ldrb	r1, [r5, #0]
   d4d46:	f000 ff49 	bl	d5bdc <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4d4a:	f001 fcd7 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4d4e:	0a21      	lsrs	r1, r4, #8
   d4d50:	f7ff ffee 	bl	d4d30 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4d54:	f001 fcd2 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4d58:	b2e1      	uxtb	r1, r4
   d4d5a:	f7ff ffe9 	bl	d4d30 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4d5e:	f001 fccd 	bl	d66fc <_Z19__fetch_global_Wirev>
}
   d4d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d4d66:	f000 bf41 	b.w	d5bec <_ZN7TwoWire15endTransmissionEv>

000d4d6a <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d4d6a:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4d6c:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4d70:	f7ff ffe3 	bl	d4d3a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d4d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d4d78:	200a      	movs	r0, #10
   d4d7a:	f000 bb69 	b.w	d5450 <delay>

000d4d7e <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4d7e:	b538      	push	{r3, r4, r5, lr}
   d4d80:	4604      	mov	r4, r0
   d4d82:	460d      	mov	r5, r1
  Wire.begin();
   d4d84:	f001 fcba 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4d88:	f000 fef6 	bl	d5b78 <_ZN7TwoWire5beginEv>
  reset();
   d4d8c:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d4d8e:	7025      	strb	r5, [r4, #0]
  reset();
   d4d90:	f7ff ffeb 	bl	d4d6a <_ZN14Adafruit_SHT315resetEv>
}
   d4d94:	2001      	movs	r0, #1
   d4d96:	bd38      	pop	{r3, r4, r5, pc}

000d4d98 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d4d98:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d4d9a:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d4d9c:	4291      	cmp	r1, r2
   d4d9e:	d00e      	beq.n	d4dbe <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4da0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4da4:	4058      	eors	r0, r3
   d4da6:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d4da8:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4dac:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d4db0:	bf18      	it	ne
   d4db2:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d4db6:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d4db8:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d4dba:	d1f5      	bne.n	d4da8 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4dbc:	e7ee      	b.n	d4d9c <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d4dbe:	4770      	bx	lr

000d4dc0 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d4dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d4dc2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d4dc6:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d4dc8:	f7ff ffb7 	bl	d4d3a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d4dcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4dd0:	f000 fb3e 	bl	d5450 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4dd4:	f001 fc92 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4dd8:	7829      	ldrb	r1, [r5, #0]
   d4dda:	2206      	movs	r2, #6
   d4ddc:	f000 fefb 	bl	d5bd6 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4de0:	f001 fc8c 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4de4:	6803      	ldr	r3, [r0, #0]
   d4de6:	691b      	ldr	r3, [r3, #16]
   d4de8:	4798      	blx	r3
   d4dea:	2806      	cmp	r0, #6
   d4dec:	d14b      	bne.n	d4e86 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d4dee:	466e      	mov	r6, sp
   d4df0:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d4df2:	f001 fc83 	bl	d66fc <_Z19__fetch_global_Wirev>
   d4df6:	6803      	ldr	r3, [r0, #0]
   d4df8:	695b      	ldr	r3, [r3, #20]
   d4dfa:	4798      	blx	r3
   d4dfc:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d4dfe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d4e02:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d4e06:	4669      	mov	r1, sp
   d4e08:	d1f3      	bne.n	d4df2 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4e0a:	2202      	movs	r2, #2
   d4e0c:	4628      	mov	r0, r5
   d4e0e:	f7ff ffc3 	bl	d4d98 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4e12:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d4e16:	4286      	cmp	r6, r0
   d4e18:	d135      	bne.n	d4e86 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4e1a:	2202      	movs	r2, #2
   d4e1c:	f10d 0103 	add.w	r1, sp, #3
   d4e20:	4628      	mov	r0, r5
   d4e22:	f7ff ffb9 	bl	d4d98 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4e26:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d4e2a:	4286      	cmp	r6, r0
   d4e2c:	d12b      	bne.n	d4e86 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d4e2e:	f8bd 0000 	ldrh.w	r0, [sp]
   d4e32:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d4e36:	ba40      	rev16	r0, r0
   d4e38:	b280      	uxth	r0, r0
   d4e3a:	f001 fdd5 	bl	d69e8 <__aeabi_ui2d>
  stemp *= 175;
   d4e3e:	a318      	add	r3, pc, #96	; (adr r3, d4ea0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e44:	f001 fe4a 	bl	d6adc <__aeabi_dmul>
  stemp /= 0xffff;
   d4e48:	a311      	add	r3, pc, #68	; (adr r3, d4e90 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e4e:	f001 ff6f 	bl	d6d30 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d4e52:	4b11      	ldr	r3, [pc, #68]	; (d4e98 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4e54:	2200      	movs	r2, #0
   d4e56:	f001 fc89 	bl	d676c <__aeabi_dsub>
  temp = stemp;
   d4e5a:	f002 f8f9 	bl	d7050 <__aeabi_d2f>
   d4e5e:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d4e60:	ba60      	rev16	r0, r4
   d4e62:	b280      	uxth	r0, r0
   d4e64:	f001 fdc0 	bl	d69e8 <__aeabi_ui2d>
  shum *= 100;
   d4e68:	4b0c      	ldr	r3, [pc, #48]	; (d4e9c <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4e6a:	2200      	movs	r2, #0
   d4e6c:	f001 fe36 	bl	d6adc <__aeabi_dmul>
  shum /= 0xFFFF;
   d4e70:	a307      	add	r3, pc, #28	; (adr r3, d4e90 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4e72:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e76:	f001 ff5b 	bl	d6d30 <__aeabi_ddiv>
  humidity = shum;
   d4e7a:	f002 f8e9 	bl	d7050 <__aeabi_d2f>
   d4e7e:	6068      	str	r0, [r5, #4]
  return true;
   d4e80:	2001      	movs	r0, #1
}
   d4e82:	b002      	add	sp, #8
   d4e84:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4e86:	2000      	movs	r0, #0
   d4e88:	e7fb      	b.n	d4e82 <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d4e8a:	bf00      	nop
   d4e8c:	f3af 8000 	nop.w
   d4e90:	00000000 	.word	0x00000000
   d4e94:	40efffe0 	.word	0x40efffe0
   d4e98:	40468000 	.word	0x40468000
   d4e9c:	40590000 	.word	0x40590000
   d4ea0:	00000000 	.word	0x00000000
   d4ea4:	4065e000 	.word	0x4065e000

000d4ea8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d4ea8:	b510      	push	{r4, lr}
   d4eaa:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4eac:	f7ff ff88 	bl	d4dc0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4eb0:	b110      	cbz	r0, d4eb8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d4eb2:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d4eb6:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d4eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ec0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d4ebc:	e7fb      	b.n	d4eb6 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d4ebe:	bf00      	nop
   d4ec0:	7fc00000 	.word	0x7fc00000

000d4ec4 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d4ec4:	b510      	push	{r4, lr}
   d4ec6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4ec8:	f7ff ff7a 	bl	d4dc0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4ecc:	b110      	cbz	r0, d4ed4 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d4ece:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d4ed2:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d4ed4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4edc <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d4ed8:	e7fb      	b.n	d4ed2 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d4eda:	bf00      	nop
   d4edc:	7fc00000 	.word	0x7fc00000

000d4ee0 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4ee0:	f000 b860 	b.w	d4fa4 <HAL_Pin_Map>

000d4ee4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <os_mutex_recursive_create+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030248 	.word	0x00030248

000d4ef4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <os_mutex_recursive_destroy+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030248 	.word	0x00030248

000d4f04 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_Feature_Set+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030234 	.word	0x00030234

000d4f14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_RNG_GetRandomNumber+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	685b      	ldr	r3, [r3, #4]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030218 	.word	0x00030218

000d4f24 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	695b      	ldr	r3, [r3, #20]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030218 	.word	0x00030218

000d4f34 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_EEPROM_Init+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030218 	.word	0x00030218

000d4f44 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_EEPROM_Write+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030218 	.word	0x00030218

000d4f54 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_EEPROM_Get+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030218 	.word	0x00030218

000d4f64 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_EEPROM_Put+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030218 	.word	0x00030218

000d4f74 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <hal_rtc_time_is_valid+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030218 	.word	0x00030218

000d4f84 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <hal_timer_millis+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030218 	.word	0x00030218

000d4f94 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <hal_rtc_get_time+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030218 	.word	0x00030218

000d4fa4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_Pin_Map+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	681b      	ldr	r3, [r3, #0]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	0003022c 	.word	0x0003022c

000d4fb4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_Pin_Mode+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	689b      	ldr	r3, [r3, #8]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003022c 	.word	0x0003022c

000d4fc4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_Get_Pin_Mode+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	68db      	ldr	r3, [r3, #12]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003022c 	.word	0x0003022c

000d4fd4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_GPIO_Write+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	691b      	ldr	r3, [r3, #16]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003022c 	.word	0x0003022c

000d4fe4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <hal_i2c_begin+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	68db      	ldr	r3, [r3, #12]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030228 	.word	0x00030228

000d4ff4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <hal_i2c_begin_transmission+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	699b      	ldr	r3, [r3, #24]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030228 	.word	0x00030228

000d5004 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <hal_i2c_end_transmission+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	69db      	ldr	r3, [r3, #28]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030228 	.word	0x00030228

000d5014 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <hal_i2c_write+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6a1b      	ldr	r3, [r3, #32]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030228 	.word	0x00030228

000d5024 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <hal_i2c_available+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030228 	.word	0x00030228

000d5034 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <hal_i2c_read+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030228 	.word	0x00030228

000d5044 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <hal_i2c_peek+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030228 	.word	0x00030228

000d5054 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <hal_i2c_flush+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030228 	.word	0x00030228

000d5064 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <hal_i2c_is_enabled+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030228 	.word	0x00030228

000d5074 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <hal_i2c_init+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030228 	.word	0x00030228

000d5084 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <hal_i2c_request_ex+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030228 	.word	0x00030228

000d5094 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <inet_inet_ntop+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	695b      	ldr	r3, [r3, #20]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030264 	.word	0x00030264

000d50a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <netdb_freeaddrinfo+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	689b      	ldr	r3, [r3, #8]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030268 	.word	0x00030268

000d50b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <netdb_getaddrinfo+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	68db      	ldr	r3, [r3, #12]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030268 	.word	0x00030268

000d50c4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <hal_spi_init+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	69db      	ldr	r3, [r3, #28]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030230 	.word	0x00030230

000d50d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <hal_spi_is_enabled+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a1b      	ldr	r3, [r3, #32]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030230 	.word	0x00030230

000d50e4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <hal_usart_init+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	681b      	ldr	r3, [r3, #0]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003023c 	.word	0x0003023c

000d50f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <hal_usart_write+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	68db      	ldr	r3, [r3, #12]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003023c 	.word	0x0003023c

000d5104 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <hal_usart_available+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	691b      	ldr	r3, [r3, #16]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <hal_usart_read+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	695b      	ldr	r3, [r3, #20]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003023c 	.word	0x0003023c

000d5124 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <hal_usart_peek+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	699b      	ldr	r3, [r3, #24]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003023c 	.word	0x0003023c

000d5134 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <hal_usart_flush+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	69db      	ldr	r3, [r3, #28]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003023c 	.word	0x0003023c

000d5144 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <hal_usart_is_enabled+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6a1b      	ldr	r3, [r3, #32]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003023c 	.word	0x0003023c

000d5154 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <hal_usart_available_data_for_write+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003023c 	.word	0x0003023c

000d5164 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_USB_USART_Init+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	681b      	ldr	r3, [r3, #0]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003024c 	.word	0x0003024c

000d5174 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_USB_USART_Begin+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	685b      	ldr	r3, [r3, #4]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003024c 	.word	0x0003024c

000d5184 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USB_USART_Available_Data+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	691b      	ldr	r3, [r3, #16]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003024c 	.word	0x0003024c

000d5194 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	695b      	ldr	r3, [r3, #20]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003024c 	.word	0x0003024c

000d51a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_USB_USART_Receive_Data+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	699b      	ldr	r3, [r3, #24]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003024c 	.word	0x0003024c

000d51b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_USB_USART_Send_Data+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	69db      	ldr	r3, [r3, #28]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003024c 	.word	0x0003024c

000d51c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <HAL_USB_USART_Flush_Data+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	6a1b      	ldr	r3, [r3, #32]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003024c 	.word	0x0003024c

000d51d4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <system_mode+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	681b      	ldr	r3, [r3, #0]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030220 	.word	0x00030220

000d51e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <set_system_mode+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	685b      	ldr	r3, [r3, #4]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030220 	.word	0x00030220

000d51f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <system_delay_ms+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	695b      	ldr	r3, [r3, #20]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030220 	.word	0x00030220

000d5204 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <system_thread_set_state+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030220 	.word	0x00030220

000d5214 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <application_thread_current+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030220 	.word	0x00030220

000d5224 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <application_thread_invoke+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030220 	.word	0x00030220

000d5234 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <system_thread_get_state+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030220 	.word	0x00030220

000d5244 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b03      	ldr	r3, [pc, #12]	; (d5254 <system_ctrl_set_app_request_handler+0x10>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d524e:	9301      	str	r3, [sp, #4]
   d5250:	bd08      	pop	{r3, pc}
   d5252:	0000      	.short	0x0000
   d5254:	00030220 	.word	0x00030220

000d5258 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b03      	ldr	r3, [pc, #12]	; (d5268 <system_ctrl_set_result+0x10>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5262:	9301      	str	r3, [sp, #4]
   d5264:	bd08      	pop	{r3, pc}
   d5266:	0000      	.short	0x0000
   d5268:	00030220 	.word	0x00030220

000d526c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b03      	ldr	r3, [pc, #12]	; (d527c <system_reset+0x10>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d5276:	9301      	str	r3, [sp, #4]
   d5278:	bd08      	pop	{r3, pc}
   d527a:	0000      	.short	0x0000
   d527c:	00030220 	.word	0x00030220

000d5280 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <spark_variable+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	681b      	ldr	r3, [r3, #0]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030244 	.word	0x00030244

000d5290 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <spark_function+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	685b      	ldr	r3, [r3, #4]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	00030244 	.word	0x00030244

000d52a0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <spark_process+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	689b      	ldr	r3, [r3, #8]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	00030244 	.word	0x00030244

000d52b0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <spark_cloud_flag_connect+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	68db      	ldr	r3, [r3, #12]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	00030244 	.word	0x00030244

000d52c0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <spark_cloud_flag_connected+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	695b      	ldr	r3, [r3, #20]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	00030244 	.word	0x00030244

000d52d0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <spark_deviceID+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	69db      	ldr	r3, [r3, #28]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	00030244 	.word	0x00030244

000d52e0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <spark_send_event+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	6a1b      	ldr	r3, [r3, #32]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	00030244 	.word	0x00030244

000d52f0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <spark_subscribe+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	00030244 	.word	0x00030244

000d5300 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <spark_sync_time+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	00030244 	.word	0x00030244

000d5310 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <spark_sync_time_pending+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030244 	.word	0x00030244

000d5320 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030244 	.word	0x00030244

000d5330 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <network_connect+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	685b      	ldr	r3, [r3, #4]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030240 	.word	0x00030240

000d5340 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <network_connecting+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	689b      	ldr	r3, [r3, #8]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030240 	.word	0x00030240

000d5350 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <network_disconnect+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	68db      	ldr	r3, [r3, #12]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030240 	.word	0x00030240

000d5360 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <network_ready+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	691b      	ldr	r3, [r3, #16]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030240 	.word	0x00030240

000d5370 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <network_on+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	695b      	ldr	r3, [r3, #20]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030240 	.word	0x00030240

000d5380 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <network_off+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	699b      	ldr	r3, [r3, #24]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030240 	.word	0x00030240

000d5390 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <network_listen+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	69db      	ldr	r3, [r3, #28]
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030240 	.word	0x00030240

000d53a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <network_listening+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	6a1b      	ldr	r3, [r3, #32]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030240 	.word	0x00030240

000d53b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <network_set_listen_timeout+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030240 	.word	0x00030240

000d53c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <network_get_listen_timeout+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030240 	.word	0x00030240

000d53d0 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <malloc+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	681b      	ldr	r3, [r3, #0]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	0003021c 	.word	0x0003021c

000d53e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <free+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	685b      	ldr	r3, [r3, #4]
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	0003021c 	.word	0x0003021c

000d53f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <realloc+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	689b      	ldr	r3, [r3, #8]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	0003021c 	.word	0x0003021c

000d5400 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <siscanf+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	699b      	ldr	r3, [r3, #24]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	0003021c 	.word	0x0003021c

000d5410 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <snprintf+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	69db      	ldr	r3, [r3, #28]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	0003021c 	.word	0x0003021c

000d5420 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <abort+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	0003021c 	.word	0x0003021c

000d5430 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <_malloc_r+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	0003021c 	.word	0x0003021c

000d5440 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <newlib_impure_ptr_callback+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	0003021c 	.word	0x0003021c

000d5450 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5450:	2100      	movs	r1, #0
   d5452:	f7ff becf 	b.w	d51f4 <system_delay_ms>

000d5456 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5456:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5458:	6883      	ldr	r3, [r0, #8]
   d545a:	4604      	mov	r4, r0
   d545c:	b90b      	cbnz	r3, d5462 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d545e:	f001 f97e 	bl	d675e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5462:	68c3      	ldr	r3, [r0, #12]
   d5464:	4798      	blx	r3
      if (_M_manager)
   d5466:	68a3      	ldr	r3, [r4, #8]
   d5468:	b11b      	cbz	r3, d5472 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d546a:	2203      	movs	r2, #3
   d546c:	4621      	mov	r1, r4
   d546e:	4620      	mov	r0, r4
   d5470:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5472:	4620      	mov	r0, r4
   d5474:	2110      	movs	r1, #16
}
   d5476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d547a:	f001 b96c 	b.w	d6756 <_ZdlPvj>

000d547e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d547e:	b510      	push	{r4, lr}
   d5480:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5482:	6800      	ldr	r0, [r0, #0]
   d5484:	b108      	cbz	r0, d548a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5486:	f7ff fd35 	bl	d4ef4 <os_mutex_recursive_destroy>
    }
   d548a:	4620      	mov	r0, r4
   d548c:	bd10      	pop	{r4, pc}

000d548e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d548e:	680b      	ldr	r3, [r1, #0]
   d5490:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5492:	b113      	cbz	r3, d549a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5494:	685a      	ldr	r2, [r3, #4]
   d5496:	3201      	adds	r2, #1
   d5498:	605a      	str	r2, [r3, #4]
      }
   d549a:	4770      	bx	lr

000d549c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d549c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d549e:	4c06      	ldr	r4, [pc, #24]	; (d54b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d54a0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d54a2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d54a4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d54a6:	f7ff fd1d 	bl	d4ee4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d54aa:	4620      	mov	r0, r4
   d54ac:	4a03      	ldr	r2, [pc, #12]	; (d54bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d54ae:	4904      	ldr	r1, [pc, #16]	; (d54c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d54b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d54b4:	f001 b94a 	b.w	d674c <__aeabi_atexit>
   d54b8:	2003e5d0 	.word	0x2003e5d0
   d54bc:	2003e4a8 	.word	0x2003e4a8
   d54c0:	000d547f 	.word	0x000d547f

000d54c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54c4:	4770      	bx	lr

000d54c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d54c6:	2000      	movs	r0, #0
   d54c8:	4770      	bx	lr

000d54ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54ca:	b510      	push	{r4, lr}
   d54cc:	2110      	movs	r1, #16
   d54ce:	4604      	mov	r4, r0
   d54d0:	f001 f941 	bl	d6756 <_ZdlPvj>
   d54d4:	4620      	mov	r0, r4
   d54d6:	bd10      	pop	{r4, pc}

000d54d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d54d8:	b508      	push	{r3, lr}
      { delete this; }
   d54da:	f7ff fff6 	bl	d54ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d54de:	bd08      	pop	{r3, pc}

000d54e0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d54e0:	b510      	push	{r4, lr}
      if (_M_manager)
   d54e2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d54e4:	4604      	mov	r4, r0
      if (_M_manager)
   d54e6:	b113      	cbz	r3, d54ee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54e8:	2203      	movs	r2, #3
   d54ea:	4601      	mov	r1, r0
   d54ec:	4798      	blx	r3
    }
   d54ee:	4620      	mov	r0, r4
   d54f0:	bd10      	pop	{r4, pc}

000d54f2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d54f2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d54f4:	2200      	movs	r2, #0
   d54f6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d54fa:	6002      	str	r2, [r0, #0]
   d54fc:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54fe:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5500:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5502:	680c      	ldr	r4, [r1, #0]
   d5504:	8085      	strh	r5, [r0, #4]
   d5506:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5508:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d550a:	bd30      	pop	{r4, r5, pc}

000d550c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d550c:	b510      	push	{r4, lr}
   d550e:	4604      	mov	r4, r0
    free((void*)msg_);
   d5510:	6800      	ldr	r0, [r0, #0]
   d5512:	f7ff ff65 	bl	d53e0 <free>
}
   d5516:	4620      	mov	r0, r4
   d5518:	bd10      	pop	{r4, pc}

000d551a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d551a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d551c:	68c4      	ldr	r4, [r0, #12]
   d551e:	b1f4      	cbz	r4, d555e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5520:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5522:	2b02      	cmp	r3, #2
   d5524:	d103      	bne.n	d552e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5526:	f104 000c 	add.w	r0, r4, #12
   d552a:	f7ff ffef 	bl	d550c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d552e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5530:	b135      	cbz	r5, d5540 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5532:	4628      	mov	r0, r5
   d5534:	f7ff ffd4 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
   d5538:	2110      	movs	r1, #16
   d553a:	4628      	mov	r0, r5
   d553c:	f001 f90b 	bl	d6756 <_ZdlPvj>
   d5540:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5542:	b135      	cbz	r5, d5552 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5544:	4628      	mov	r0, r5
   d5546:	f7ff ffcb 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
   d554a:	2110      	movs	r1, #16
   d554c:	4628      	mov	r0, r5
   d554e:	f001 f902 	bl	d6756 <_ZdlPvj>
   d5552:	4620      	mov	r0, r4
   d5554:	2114      	movs	r1, #20
   d5556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d555a:	f001 b8fc 	b.w	d6756 <_ZdlPvj>
   d555e:	bd38      	pop	{r3, r4, r5, pc}

000d5560 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5560:	b510      	push	{r4, lr}
   d5562:	b088      	sub	sp, #32
   d5564:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5566:	4668      	mov	r0, sp
   d5568:	f000 fd2f 	bl	d5fca <_ZN6StringC1EPKc>
    return (*fn)(p);
   d556c:	4669      	mov	r1, sp
   d556e:	a804      	add	r0, sp, #16
   d5570:	f000 fd4e 	bl	d6010 <_ZN6StringC1ERKS_>
   d5574:	a804      	add	r0, sp, #16
   d5576:	47a0      	blx	r4
   d5578:	4604      	mov	r4, r0
   d557a:	a804      	add	r0, sp, #16
   d557c:	f000 fcda 	bl	d5f34 <_ZN6StringD1Ev>
    String p(param);
   d5580:	4668      	mov	r0, sp
   d5582:	f000 fcd7 	bl	d5f34 <_ZN6StringD1Ev>
}
   d5586:	4620      	mov	r0, r4
   d5588:	b008      	add	sp, #32
   d558a:	bd10      	pop	{r4, pc}

000d558c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d558c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d558e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d5590:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d5594:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d5596:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5598:	461a      	mov	r2, r3
   d559a:	4669      	mov	r1, sp
   d559c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d559e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d55a2:	f8ad 4000 	strh.w	r4, [sp]
   d55a6:	f7ff fe73 	bl	d5290 <spark_function>
}
   d55aa:	b004      	add	sp, #16
   d55ac:	bd10      	pop	{r4, pc}

000d55ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d55ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55b0:	460e      	mov	r6, r1
   d55b2:	4604      	mov	r4, r0
   d55b4:	f856 3b04 	ldr.w	r3, [r6], #4
   d55b8:	9300      	str	r3, [sp, #0]
   d55ba:	460d      	mov	r5, r1
   d55bc:	a801      	add	r0, sp, #4
   d55be:	4631      	mov	r1, r6
   d55c0:	f7ff ff65 	bl	d548e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d55c4:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d55c6:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d55c8:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d55ca:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d55cc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d55ce:	2300      	movs	r3, #0
   d55d0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55d2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d55d4:	f7fe fe36 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55d8:	4630      	mov	r0, r6
   d55da:	f7fe fe33 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d55de:	4628      	mov	r0, r5
   d55e0:	2108      	movs	r1, #8
   d55e2:	f001 f8b8 	bl	d6756 <_ZdlPvj>
        return p;
    }
   d55e6:	4620      	mov	r0, r4
   d55e8:	b002      	add	sp, #8
   d55ea:	bd70      	pop	{r4, r5, r6, pc}

000d55ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d55ec:	b513      	push	{r0, r1, r4, lr}
   d55ee:	460b      	mov	r3, r1
   d55f0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55f2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d55f6:	466c      	mov	r4, sp
   d55f8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d55fc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5600:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5604:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5608:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d560c:	b002      	add	sp, #8
   d560e:	bd10      	pop	{r4, pc}

000d5610 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5610:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5612:	b510      	push	{r4, lr}
      if (_M_empty())
   d5614:	b90a      	cbnz	r2, d561a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5616:	f001 f8a2 	bl	d675e <_ZSt25__throw_bad_function_callv>
    }
   d561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d561e:	68c3      	ldr	r3, [r0, #12]
   d5620:	4718      	bx	r3

000d5622 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5622:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5624:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5626:	f100 0110 	add.w	r1, r0, #16
   d562a:	f7ff fff1 	bl	d5610 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d562e:	bd08      	pop	{r3, pc}

000d5630 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5630:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5632:	b510      	push	{r4, lr}
      if (_M_empty())
   d5634:	b90a      	cbnz	r2, d563a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5636:	f001 f892 	bl	d675e <_ZSt25__throw_bad_function_callv>
    }
   d563a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d563e:	68c3      	ldr	r3, [r0, #12]
   d5640:	4718      	bx	r3

000d5642 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5642:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5644:	6800      	ldr	r0, [r0, #0]
   d5646:	f100 0110 	add.w	r1, r0, #16
   d564a:	f7ff fff1 	bl	d5630 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d564e:	bd08      	pop	{r3, pc}

000d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5650:	b538      	push	{r3, r4, r5, lr}
   d5652:	2300      	movs	r3, #0
   d5654:	4604      	mov	r4, r0
   d5656:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5658:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d565a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d565c:	f7fe fd1b 	bl	d4096 <_Znwj>
   d5660:	b128      	cbz	r0, d566e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5662:	2301      	movs	r3, #1
   d5664:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5668:	4b02      	ldr	r3, [pc, #8]	; (d5674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d566a:	6003      	str	r3, [r0, #0]
   d566c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d566e:	6020      	str	r0, [r4, #0]
	}
   d5670:	4620      	mov	r0, r4
   d5672:	bd38      	pop	{r3, r4, r5, pc}
   d5674:	000da024 	.word	0x000da024

000d5678 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5678:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d567a:	2300      	movs	r3, #0
   d567c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d567e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5680:	4604      	mov	r4, r0
   d5682:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5684:	b12b      	cbz	r3, d5692 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5686:	2202      	movs	r2, #2
   d5688:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d568a:	68eb      	ldr	r3, [r5, #12]
   d568c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d568e:	68ab      	ldr	r3, [r5, #8]
   d5690:	60a3      	str	r3, [r4, #8]
    }
   d5692:	4620      	mov	r0, r4
   d5694:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5698:	b5f0      	push	{r4, r5, r6, r7, lr}
   d569a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d569c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d569e:	4668      	mov	r0, sp
   d56a0:	f7ff ff27 	bl	d54f2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d56a4:	f04f 0302 	mov.w	r3, #2
   d56a8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d56ac:	2a00      	cmp	r2, #0
   d56ae:	d103      	bne.n	d56b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d56b0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d56b4:	2900      	cmp	r1, #0
   d56b6:	d1f7      	bne.n	d56a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d56b8:	d125      	bne.n	d5706 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d56ba:	f104 050c 	add.w	r5, r4, #12
   d56be:	4669      	mov	r1, sp
   d56c0:	4628      	mov	r0, r5
   d56c2:	f7ff ff16 	bl	d54f2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d56c6:	f3bf 8f5b 	dmb	ish
   d56ca:	2301      	movs	r3, #1
   d56cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d56ce:	2000      	movs	r0, #0
   d56d0:	f104 0308 	add.w	r3, r4, #8
   d56d4:	f3bf 8f5b 	dmb	ish
   d56d8:	e853 6f00 	ldrex	r6, [r3]
   d56dc:	e843 0200 	strex	r2, r0, [r3]
   d56e0:	2a00      	cmp	r2, #0
   d56e2:	d1f9      	bne.n	d56d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d56e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d56e8:	b16e      	cbz	r6, d5706 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d56ea:	f7ff fd93 	bl	d5214 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d56ee:	b178      	cbz	r0, d5710 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d56f0:	4629      	mov	r1, r5
   d56f2:	4630      	mov	r0, r6
   d56f4:	f7ff ff8c 	bl	d5610 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d56f8:	4630      	mov	r0, r6
   d56fa:	f7ff fef1 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d56fe:	2110      	movs	r1, #16
   d5700:	4630      	mov	r0, r6
   d5702:	f001 f828 	bl	d6756 <_ZdlPvj>
        p_->setError(std::move(error));
   d5706:	4668      	mov	r0, sp
   d5708:	f7ff ff00 	bl	d550c <_ZN8particle5ErrorD1Ev>
    }
   d570c:	b009      	add	sp, #36	; 0x24
   d570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5710:	4631      	mov	r1, r6
   d5712:	a802      	add	r0, sp, #8
   d5714:	f7ff ffb0 	bl	d5678 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5718:	68e0      	ldr	r0, [r4, #12]
   d571a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d571e:	b108      	cbz	r0, d5724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5720:	f001 ffc0 	bl	d76a4 <strdup>
        type_(type) {
   d5724:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5726:	2010      	movs	r0, #16
   d5728:	f8ad 501c 	strh.w	r5, [sp, #28]
   d572c:	f7fe fcb3 	bl	d4096 <_Znwj>
   d5730:	4605      	mov	r5, r0
   d5732:	b1e8      	cbz	r0, d5770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5734:	2700      	movs	r7, #0
   d5736:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5738:	2018      	movs	r0, #24
   d573a:	f7fe fcac 	bl	d4096 <_Znwj>
   d573e:	4604      	mov	r4, r0
   d5740:	b188      	cbz	r0, d5766 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5742:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5744:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5746:	a802      	add	r0, sp, #8
   d5748:	f7ff ff50 	bl	d55ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d574c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d574e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5750:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5752:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5754:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5756:	a906      	add	r1, sp, #24
   d5758:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d575a:	60e3      	str	r3, [r4, #12]
   d575c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5760:	9205      	str	r2, [sp, #20]
   d5762:	f7ff fec6 	bl	d54f2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5766:	4b08      	ldr	r3, [pc, #32]	; (d5788 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5768:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d576a:	4b08      	ldr	r3, [pc, #32]	; (d578c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d576c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d576e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5770:	a806      	add	r0, sp, #24
   d5772:	f7ff fecb 	bl	d550c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5776:	a802      	add	r0, sp, #8
   d5778:	f7ff feb2 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d577c:	2200      	movs	r2, #0
   d577e:	4629      	mov	r1, r5
   d5780:	4803      	ldr	r0, [pc, #12]	; (d5790 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5782:	f7ff fd4f 	bl	d5224 <application_thread_invoke>
   d5786:	e7b7      	b.n	d56f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5788:	000d5623 	.word	0x000d5623
   d578c:	000d58b9 	.word	0x000d58b9
   d5790:	000d5457 	.word	0x000d5457

000d5794 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5798:	b08a      	sub	sp, #40	; 0x28
   d579a:	4605      	mov	r5, r0
   d579c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d57a0:	460c      	mov	r4, r1
   d57a2:	4617      	mov	r7, r2
   d57a4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d57a6:	f7ff fd8b 	bl	d52c0 <spark_cloud_flag_connected>
   d57aa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d57ac:	4682      	mov	sl, r0
   d57ae:	bb38      	cbnz	r0, d5800 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d57b0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d57b4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d57b6:	a905      	add	r1, sp, #20
   d57b8:	4630      	mov	r0, r6
   d57ba:	f8ad 3018 	strh.w	r3, [sp, #24]
   d57be:	f7ff fe98 	bl	d54f2 <_ZN8particle5ErrorC1EOS0_>
   d57c2:	2014      	movs	r0, #20
   d57c4:	f7fe fc67 	bl	d4096 <_Znwj>
   d57c8:	4604      	mov	r4, r0
   d57ca:	b148      	cbz	r0, d57e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d57cc:	2302      	movs	r3, #2
   d57ce:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57d0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d57d2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57d6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d57d8:	4631      	mov	r1, r6
   d57da:	300c      	adds	r0, #12
   d57dc:	f7ff fe89 	bl	d54f2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d57e0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d57e2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d57e4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d57e8:	f7ff ff32 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d57ec:	4630      	mov	r0, r6
   d57ee:	f7ff fe8d 	bl	d550c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d57f2:	a805      	add	r0, sp, #20
   d57f4:	f7ff fe8a 	bl	d550c <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d57f8:	4628      	mov	r0, r5
   d57fa:	b00a      	add	sp, #40	; 0x28
   d57fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5800:	230c      	movs	r3, #12
   d5802:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5806:	2014      	movs	r0, #20
   d5808:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d580c:	9307      	str	r3, [sp, #28]
   d580e:	f7fe fc42 	bl	d4096 <_Znwj>
   d5812:	4601      	mov	r1, r0
   d5814:	b128      	cbz	r0, d5822 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5816:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d581a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d581e:	f880 a001 	strb.w	sl, [r0, #1]
   d5822:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5824:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5826:	f7ff ff13 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d582a:	4b22      	ldr	r3, [pc, #136]	; (d58b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d582c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d582e:	2008      	movs	r0, #8
   d5830:	f7fe fc31 	bl	d4096 <_Znwj>
   d5834:	4682      	mov	sl, r0
   d5836:	b128      	cbz	r0, d5844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5838:	9b03      	ldr	r3, [sp, #12]
   d583a:	f840 3b04 	str.w	r3, [r0], #4
   d583e:	a904      	add	r1, sp, #16
   d5840:	f7ff fe25 	bl	d548e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5844:	9600      	str	r6, [sp, #0]
   d5846:	fa5f f389 	uxtb.w	r3, r9
   d584a:	4642      	mov	r2, r8
   d584c:	4639      	mov	r1, r7
   d584e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5850:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5854:	f7ff fd44 	bl	d52e0 <spark_send_event>
   d5858:	b9b8      	cbnz	r0, d588a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d585a:	9b03      	ldr	r3, [sp, #12]
   d585c:	785b      	ldrb	r3, [r3, #1]
   d585e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5862:	b993      	cbnz	r3, d588a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5864:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5868:	a905      	add	r1, sp, #20
   d586a:	a803      	add	r0, sp, #12
   d586c:	9205      	str	r2, [sp, #20]
   d586e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5872:	f7ff ff11 	bl	d5698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5876:	a805      	add	r0, sp, #20
   d5878:	f7ff fe48 	bl	d550c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d587c:	a805      	add	r0, sp, #20
   d587e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5880:	f7ff fe95 	bl	d55ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5884:	a806      	add	r0, sp, #24
   d5886:	f7fe fcdd 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d588a:	9b03      	ldr	r3, [sp, #12]
   d588c:	9305      	str	r3, [sp, #20]
   d588e:	a904      	add	r1, sp, #16
   d5890:	a806      	add	r0, sp, #24
   d5892:	f7ff fdfc 	bl	d548e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5896:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5898:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d589a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d589c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d589e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d58a0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d58a2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d58a4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d58a6:	f7fe fccd 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58aa:	a804      	add	r0, sp, #16
   d58ac:	f7fe fcca 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d58b0:	e7a2      	b.n	d57f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d58b2:	bf00      	nop
   d58b4:	000d597d 	.word	0x000d597d

000d58b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d58b8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d58ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58bc:	4605      	mov	r5, r0
	  switch (__op)
   d58be:	d007      	beq.n	d58d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d58c0:	2a03      	cmp	r2, #3
   d58c2:	d018      	beq.n	d58f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d58c4:	2a01      	cmp	r2, #1
   d58c6:	d101      	bne.n	d58cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d58c8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58ca:	6003      	str	r3, [r0, #0]
	}
   d58cc:	2000      	movs	r0, #0
   d58ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d58d0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d58d2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d58d4:	f7fe fbdf 	bl	d4096 <_Znwj>
   d58d8:	4604      	mov	r4, r0
   d58da:	b150      	cbz	r0, d58f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58dc:	4631      	mov	r1, r6
   d58de:	f7ff fecb 	bl	d5678 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d58e2:	6930      	ldr	r0, [r6, #16]
   d58e4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d58e8:	b108      	cbz	r0, d58ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d58ea:	f001 fedb 	bl	d76a4 <strdup>
        type_(type) {
   d58ee:	6120      	str	r0, [r4, #16]
   d58f0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d58f2:	602c      	str	r4, [r5, #0]
	}
   d58f4:	e7ea      	b.n	d58cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d58f6:	6804      	ldr	r4, [r0, #0]
   d58f8:	2c00      	cmp	r4, #0
   d58fa:	d0e7      	beq.n	d58cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d58fc:	f104 0010 	add.w	r0, r4, #16
   d5900:	f7ff fe04 	bl	d550c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff fdeb 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d590a:	2118      	movs	r1, #24
   d590c:	4620      	mov	r0, r4
   d590e:	f000 ff22 	bl	d6756 <_ZdlPvj>
   d5912:	e7db      	b.n	d58cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5914 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5914:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5916:	2300      	movs	r3, #0
   d5918:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d591a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d591c:	4604      	mov	r4, r0
   d591e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5920:	b12b      	cbz	r3, d592e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5922:	2202      	movs	r2, #2
   d5924:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5926:	68eb      	ldr	r3, [r5, #12]
   d5928:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d592a:	68ab      	ldr	r3, [r5, #8]
   d592c:	60a3      	str	r3, [r4, #8]
    }
   d592e:	4620      	mov	r0, r4
   d5930:	bd38      	pop	{r3, r4, r5, pc}

000d5932 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5932:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5934:	b570      	push	{r4, r5, r6, lr}
   d5936:	4604      	mov	r4, r0
	  switch (__op)
   d5938:	d007      	beq.n	d594a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d593a:	2a03      	cmp	r2, #3
   d593c:	d012      	beq.n	d5964 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d593e:	2a01      	cmp	r2, #1
   d5940:	d101      	bne.n	d5946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5942:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5944:	6003      	str	r3, [r0, #0]
	}
   d5946:	2000      	movs	r0, #0
   d5948:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d594a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d594c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d594e:	f7fe fba2 	bl	d4096 <_Znwj>
   d5952:	4605      	mov	r5, r0
   d5954:	b120      	cbz	r0, d5960 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5956:	4631      	mov	r1, r6
   d5958:	f7ff ffdc 	bl	d5914 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d595c:	7c33      	ldrb	r3, [r6, #16]
   d595e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5960:	6025      	str	r5, [r4, #0]
	}
   d5962:	e7f0      	b.n	d5946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5964:	6804      	ldr	r4, [r0, #0]
   d5966:	2c00      	cmp	r4, #0
   d5968:	d0ed      	beq.n	d5946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d596a:	4620      	mov	r0, r4
   d596c:	f7ff fdb8 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5970:	2114      	movs	r1, #20
   d5972:	4620      	mov	r0, r4
   d5974:	f000 feef 	bl	d6756 <_ZdlPvj>
   d5978:	e7e5      	b.n	d5946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d597c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d597c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d597e:	b089      	sub	sp, #36	; 0x24
   d5980:	4604      	mov	r4, r0
   d5982:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5984:	a801      	add	r0, sp, #4
   d5986:	4611      	mov	r1, r2
   d5988:	f7ff fe11 	bl	d55ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d598c:	b1a4      	cbz	r4, d59b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d598e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5990:	b11d      	cbz	r5, d599a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5992:	4628      	mov	r0, r5
   d5994:	f001 fe86 	bl	d76a4 <strdup>
   d5998:	4605      	mov	r5, r0
   d599a:	a801      	add	r0, sp, #4
   d599c:	a903      	add	r1, sp, #12
        type_(type) {
   d599e:	9503      	str	r5, [sp, #12]
   d59a0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d59a4:	f7ff fe78 	bl	d5698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d59a8:	a803      	add	r0, sp, #12
   d59aa:	f7ff fdaf 	bl	d550c <_ZN8particle5ErrorD1Ev>
   d59ae:	a802      	add	r0, sp, #8
   d59b0:	f7fe fc48 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d59b4:	b009      	add	sp, #36	; 0x24
   d59b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d59b8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d59ba:	2301      	movs	r3, #1
   d59bc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d59c0:	2a00      	cmp	r2, #0
   d59c2:	d103      	bne.n	d59cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d59c4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d59c8:	2900      	cmp	r1, #0
   d59ca:	d1f7      	bne.n	d59bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d59cc:	d1ef      	bne.n	d59ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d59ce:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d59d0:	f3bf 8f5b 	dmb	ish
   d59d4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d59d6:	1d2b      	adds	r3, r5, #4
   d59d8:	f3bf 8f5b 	dmb	ish
   d59dc:	e853 6f00 	ldrex	r6, [r3]
   d59e0:	e843 4200 	strex	r2, r4, [r3]
   d59e4:	2a00      	cmp	r2, #0
   d59e6:	d1f9      	bne.n	d59dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d59e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d59ec:	2e00      	cmp	r6, #0
   d59ee:	d0de      	beq.n	d59ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d59f0:	4620      	mov	r0, r4
   d59f2:	f7ff fc0f 	bl	d5214 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d59f6:	4607      	mov	r7, r0
   d59f8:	b160      	cbz	r0, d5a14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d59fa:	f105 010c 	add.w	r1, r5, #12
   d59fe:	4630      	mov	r0, r6
   d5a00:	f7ff fe16 	bl	d5630 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5a04:	4630      	mov	r0, r6
   d5a06:	f7ff fd6b 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5a0a:	2110      	movs	r1, #16
   d5a0c:	4630      	mov	r0, r6
   d5a0e:	f000 fea2 	bl	d6756 <_ZdlPvj>
   d5a12:	e7cc      	b.n	d59ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a14:	4631      	mov	r1, r6
   d5a16:	a803      	add	r0, sp, #12
   d5a18:	f7ff ff7c 	bl	d5914 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a1c:	7b2b      	ldrb	r3, [r5, #12]
   d5a1e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a22:	2010      	movs	r0, #16
   d5a24:	f7fe fb37 	bl	d4096 <_Znwj>
   d5a28:	4605      	mov	r5, r0
   d5a2a:	b1d0      	cbz	r0, d5a62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5a2c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a2e:	2014      	movs	r0, #20
   d5a30:	f7fe fb31 	bl	d4096 <_Znwj>
   d5a34:	4604      	mov	r4, r0
   d5a36:	b178      	cbz	r0, d5a58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5a38:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5a3a:	4601      	mov	r1, r0
   d5a3c:	a803      	add	r0, sp, #12
   d5a3e:	f7ff fdd5 	bl	d55ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a42:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a44:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a46:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a48:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5a4a:	9205      	str	r2, [sp, #20]
   d5a4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a4e:	60e3      	str	r3, [r4, #12]
   d5a50:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5a54:	9206      	str	r2, [sp, #24]
   d5a56:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5a58:	4b06      	ldr	r3, [pc, #24]	; (d5a74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5a5a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a5c:	4b06      	ldr	r3, [pc, #24]	; (d5a78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a5e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5a60:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5a62:	a803      	add	r0, sp, #12
   d5a64:	f7ff fd3c 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a68:	2200      	movs	r2, #0
   d5a6a:	4629      	mov	r1, r5
   d5a6c:	4803      	ldr	r0, [pc, #12]	; (d5a7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5a6e:	f7ff fbd9 	bl	d5224 <application_thread_invoke>
   d5a72:	e7c7      	b.n	d5a04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5a74:	000d5643 	.word	0x000d5643
   d5a78:	000d5933 	.word	0x000d5933
   d5a7c:	000d5457 	.word	0x000d5457

000d5a80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a80:	2200      	movs	r2, #0
   d5a82:	6840      	ldr	r0, [r0, #4]
   d5a84:	4611      	mov	r1, r2
   d5a86:	f7ff bc8b 	b.w	d53a0 <network_listening>

000d5a8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5a8a:	2200      	movs	r2, #0
   d5a8c:	6840      	ldr	r0, [r0, #4]
   d5a8e:	4611      	mov	r1, r2
   d5a90:	f7ff bc96 	b.w	d53c0 <network_get_listen_timeout>

000d5a94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5a94:	6840      	ldr	r0, [r0, #4]
   d5a96:	2200      	movs	r2, #0
   d5a98:	f7ff bc8a 	b.w	d53b0 <network_set_listen_timeout>

000d5a9c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a9c:	6840      	ldr	r0, [r0, #4]
   d5a9e:	2200      	movs	r2, #0
   d5aa0:	f081 0101 	eor.w	r1, r1, #1
   d5aa4:	f7ff bc74 	b.w	d5390 <network_listen>

000d5aa8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5aa8:	2300      	movs	r3, #0
   d5aaa:	6840      	ldr	r0, [r0, #4]
   d5aac:	461a      	mov	r2, r3
   d5aae:	4619      	mov	r1, r3
   d5ab0:	f7ff bc66 	b.w	d5380 <network_off>

000d5ab4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5ab4:	2300      	movs	r3, #0
   d5ab6:	6840      	ldr	r0, [r0, #4]
   d5ab8:	461a      	mov	r2, r3
   d5aba:	4619      	mov	r1, r3
   d5abc:	f7ff bc58 	b.w	d5370 <network_on>

000d5ac0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ac0:	2200      	movs	r2, #0
   d5ac2:	6840      	ldr	r0, [r0, #4]
   d5ac4:	4611      	mov	r1, r2
   d5ac6:	f7ff bc4b 	b.w	d5360 <network_ready>

000d5aca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5aca:	2200      	movs	r2, #0
   d5acc:	6840      	ldr	r0, [r0, #4]
   d5ace:	4611      	mov	r1, r2
   d5ad0:	f7ff bc36 	b.w	d5340 <network_connecting>

000d5ad4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ad4:	6840      	ldr	r0, [r0, #4]
   d5ad6:	2200      	movs	r2, #0
   d5ad8:	2102      	movs	r1, #2
   d5ada:	f7ff bc39 	b.w	d5350 <network_disconnect>

000d5ade <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5ade:	2300      	movs	r3, #0
   d5ae0:	6840      	ldr	r0, [r0, #4]
   d5ae2:	461a      	mov	r2, r3
   d5ae4:	f7ff bc24 	b.w	d5330 <network_connect>

000d5ae8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ae8:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5aea:	2203      	movs	r2, #3
   d5aec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5aee:	4a02      	ldr	r2, [pc, #8]	; (d5af8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5af0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5af2:	4770      	bx	lr
   d5af4:	2003e5d4 	.word	0x2003e5d4
   d5af8:	000da040 	.word	0x000da040

000d5afc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5afc:	4770      	bx	lr

000d5afe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b00:	4606      	mov	r6, r0
   d5b02:	4615      	mov	r5, r2
   d5b04:	460c      	mov	r4, r1
   d5b06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b08:	42bc      	cmp	r4, r7
   d5b0a:	d006      	beq.n	d5b1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5b0c:	6833      	ldr	r3, [r6, #0]
   d5b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5b12:	689b      	ldr	r3, [r3, #8]
   d5b14:	4630      	mov	r0, r6
   d5b16:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5b18:	e7f6      	b.n	d5b08 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5b1a:	4628      	mov	r0, r5
   d5b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b1e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5b1e:	7c00      	ldrb	r0, [r0, #16]
   d5b20:	2200      	movs	r2, #0
   d5b22:	f7ff ba77 	b.w	d5014 <hal_i2c_write>

000d5b26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5b26:	7c00      	ldrb	r0, [r0, #16]
   d5b28:	2100      	movs	r1, #0
   d5b2a:	f7ff ba7b 	b.w	d5024 <hal_i2c_available>

000d5b2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5b2e:	7c00      	ldrb	r0, [r0, #16]
   d5b30:	2100      	movs	r1, #0
   d5b32:	f7ff ba7f 	b.w	d5034 <hal_i2c_read>

000d5b36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5b36:	7c00      	ldrb	r0, [r0, #16]
   d5b38:	2100      	movs	r1, #0
   d5b3a:	f7ff ba83 	b.w	d5044 <hal_i2c_peek>

000d5b3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5b3e:	7c00      	ldrb	r0, [r0, #16]
   d5b40:	2100      	movs	r1, #0
   d5b42:	f7ff ba87 	b.w	d5054 <hal_i2c_flush>

000d5b46 <_ZN7TwoWireD0Ev>:
   d5b46:	b510      	push	{r4, lr}
   d5b48:	2114      	movs	r1, #20
   d5b4a:	4604      	mov	r4, r0
   d5b4c:	f000 fe03 	bl	d6756 <_ZdlPvj>
   d5b50:	4620      	mov	r0, r4
   d5b52:	bd10      	pop	{r4, pc}

000d5b54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5b54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b5a:	4604      	mov	r4, r0
   d5b5c:	4608      	mov	r0, r1
   d5b5e:	2100      	movs	r1, #0
   d5b60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5b64:	4b03      	ldr	r3, [pc, #12]	; (d5b74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5b66:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5b68:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5b6a:	4611      	mov	r1, r2
   d5b6c:	f7ff fa82 	bl	d5074 <hal_i2c_init>
}
   d5b70:	4620      	mov	r0, r4
   d5b72:	bd10      	pop	{r4, pc}
   d5b74:	000da074 	.word	0x000da074

000d5b78 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5b78:	2300      	movs	r3, #0
   d5b7a:	7c00      	ldrb	r0, [r0, #16]
   d5b7c:	461a      	mov	r2, r3
   d5b7e:	4619      	mov	r1, r3
   d5b80:	f7ff ba30 	b.w	d4fe4 <hal_i2c_begin>

000d5b84 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5b86:	2200      	movs	r2, #0
   d5b88:	2314      	movs	r3, #20
   d5b8a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5b8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5b92:	780b      	ldrb	r3, [r1, #0]
   d5b94:	f88d 3008 	strb.w	r3, [sp, #8]
   d5b98:	684b      	ldr	r3, [r1, #4]
   d5b9a:	9303      	str	r3, [sp, #12]
   d5b9c:	68cb      	ldr	r3, [r1, #12]
   d5b9e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5ba0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5ba2:	7a0b      	ldrb	r3, [r1, #8]
   d5ba4:	9305      	str	r3, [sp, #20]
   d5ba6:	a901      	add	r1, sp, #4
   d5ba8:	f7ff fa6c 	bl	d5084 <hal_i2c_request_ex>
}
   d5bac:	b007      	add	sp, #28
   d5bae:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bb2 <_ZN7TwoWire11requestFromEhjh>:
{
   d5bb2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5bb4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5bb6:	f88d 1000 	strb.w	r1, [sp]
   d5bba:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5bbe:	9103      	str	r1, [sp, #12]
   d5bc0:	bf18      	it	ne
   d5bc2:	2301      	movne	r3, #1
   d5bc4:	4669      	mov	r1, sp
    size_ = size;
   d5bc6:	9201      	str	r2, [sp, #4]
   d5bc8:	f88d 3008 	strb.w	r3, [sp, #8]
   d5bcc:	f7ff ffda 	bl	d5b84 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5bd0:	b005      	add	sp, #20
   d5bd2:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bd6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5bd6:	2301      	movs	r3, #1
   d5bd8:	f7ff bfeb 	b.w	d5bb2 <_ZN7TwoWire11requestFromEhjh>

000d5bdc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5bdc:	7c00      	ldrb	r0, [r0, #16]
   d5bde:	2200      	movs	r2, #0
   d5be0:	f7ff ba08 	b.w	d4ff4 <hal_i2c_begin_transmission>

000d5be4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5be4:	7c00      	ldrb	r0, [r0, #16]
   d5be6:	2200      	movs	r2, #0
   d5be8:	f7ff ba0c 	b.w	d5004 <hal_i2c_end_transmission>

000d5bec <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5bec:	2101      	movs	r1, #1
   d5bee:	f7ff bff9 	b.w	d5be4 <_ZN7TwoWire15endTransmissionEh>

000d5bf2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5bf2:	4770      	bx	lr

000d5bf4 <_ZN9IPAddressD0Ev>:
   d5bf4:	b510      	push	{r4, lr}
   d5bf6:	2118      	movs	r1, #24
   d5bf8:	4604      	mov	r4, r0
   d5bfa:	f000 fdac 	bl	d6756 <_ZdlPvj>
   d5bfe:	4620      	mov	r0, r4
   d5c00:	bd10      	pop	{r4, pc}

000d5c02 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c02:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c04:	7d03      	ldrb	r3, [r0, #20]
   d5c06:	2b06      	cmp	r3, #6
{
   d5c08:	b08d      	sub	sp, #52	; 0x34
   d5c0a:	460e      	mov	r6, r1
   d5c0c:	f100 0704 	add.w	r7, r0, #4
   d5c10:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5c14:	d012      	beq.n	d5c3c <_ZNK9IPAddress7printToER5Print+0x3a>
   d5c16:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5c1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c1e:	220a      	movs	r2, #10
   d5c20:	4630      	mov	r0, r6
   d5c22:	f000 f94a 	bl	d5eba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c26:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c28:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5c2a:	d019      	beq.n	d5c60 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5c2c:	2c00      	cmp	r4, #0
   d5c2e:	d0f4      	beq.n	d5c1a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5c30:	212e      	movs	r1, #46	; 0x2e
   d5c32:	4630      	mov	r0, r6
   d5c34:	f000 f928 	bl	d5e88 <_ZN5Print5printEc>
   d5c38:	4404      	add	r4, r0
   d5c3a:	e7ee      	b.n	d5c1a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c3c:	232f      	movs	r3, #47	; 0x2f
   d5c3e:	466a      	mov	r2, sp
   d5c40:	4639      	mov	r1, r7
   d5c42:	200a      	movs	r0, #10
		buf[0] = 0;
   d5c44:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c48:	f7ff fa24 	bl	d5094 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5c4c:	4668      	mov	r0, sp
   d5c4e:	f001 fd46 	bl	d76de <strlen>
   d5c52:	6833      	ldr	r3, [r6, #0]
   d5c54:	4602      	mov	r2, r0
   d5c56:	68db      	ldr	r3, [r3, #12]
   d5c58:	4669      	mov	r1, sp
   d5c5a:	4630      	mov	r0, r6
   d5c5c:	4798      	blx	r3
   d5c5e:	4604      	mov	r4, r0
    }
    return n;
}
   d5c60:	4620      	mov	r0, r4
   d5c62:	b00d      	add	sp, #52	; 0x34
   d5c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5c68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5c68:	b510      	push	{r4, lr}
   d5c6a:	4b05      	ldr	r3, [pc, #20]	; (d5c80 <_ZN9IPAddressC1Ev+0x18>)
   d5c6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c6e:	2211      	movs	r2, #17
   d5c70:	f840 3b04 	str.w	r3, [r0], #4
   d5c74:	2100      	movs	r1, #0
   d5c76:	f001 fcd7 	bl	d7628 <memset>
}
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	bd10      	pop	{r4, pc}
   d5c7e:	bf00      	nop
   d5c80:	000da09c 	.word	0x000da09c

000d5c84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c84:	4603      	mov	r3, r0
   d5c86:	4a07      	ldr	r2, [pc, #28]	; (d5ca4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c88:	b510      	push	{r4, lr}
   d5c8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5c8e:	f101 0210 	add.w	r2, r1, #16
   d5c92:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c96:	f843 4b04 	str.w	r4, [r3], #4
   d5c9a:	4291      	cmp	r1, r2
   d5c9c:	d1f9      	bne.n	d5c92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c9e:	780a      	ldrb	r2, [r1, #0]
   d5ca0:	701a      	strb	r2, [r3, #0]
}
   d5ca2:	bd10      	pop	{r4, pc}
   d5ca4:	000da09c 	.word	0x000da09c

000d5ca8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5ca8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5caa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5cae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5cb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5cb6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5cba:	2304      	movs	r3, #4
   d5cbc:	6041      	str	r1, [r0, #4]
   d5cbe:	7503      	strb	r3, [r0, #20]
}
   d5cc0:	bd10      	pop	{r4, pc}

000d5cc2 <_ZN9IPAddressaSEPKh>:
{
   d5cc2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5cc4:	78cb      	ldrb	r3, [r1, #3]
   d5cc6:	9300      	str	r3, [sp, #0]
   d5cc8:	788b      	ldrb	r3, [r1, #2]
   d5cca:	784a      	ldrb	r2, [r1, #1]
   d5ccc:	7809      	ldrb	r1, [r1, #0]
   d5cce:	f7ff ffeb 	bl	d5ca8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5cd2:	b002      	add	sp, #8
   d5cd4:	bd10      	pop	{r4, pc}
	...

000d5cd8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5cd8:	4b01      	ldr	r3, [pc, #4]	; (d5ce0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5cda:	4a02      	ldr	r2, [pc, #8]	; (d5ce4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5cdc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5cde:	4770      	bx	lr
   d5ce0:	2003e5dc 	.word	0x2003e5dc
   d5ce4:	000da0a8 	.word	0x000da0a8

000d5ce8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ce8:	2300      	movs	r3, #0
   d5cea:	6840      	ldr	r0, [r0, #4]
   d5cec:	461a      	mov	r2, r3
   d5cee:	f7ff bb1f 	b.w	d5330 <network_connect>

000d5cf2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5cf2:	6840      	ldr	r0, [r0, #4]
   d5cf4:	2200      	movs	r2, #0
   d5cf6:	2102      	movs	r1, #2
   d5cf8:	f7ff bb2a 	b.w	d5350 <network_disconnect>

000d5cfc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5cfc:	2200      	movs	r2, #0
   d5cfe:	6840      	ldr	r0, [r0, #4]
   d5d00:	4611      	mov	r1, r2
   d5d02:	f7ff bb1d 	b.w	d5340 <network_connecting>

000d5d06 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d06:	2200      	movs	r2, #0
   d5d08:	6840      	ldr	r0, [r0, #4]
   d5d0a:	4611      	mov	r1, r2
   d5d0c:	f7ff bb28 	b.w	d5360 <network_ready>

000d5d10 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d10:	2300      	movs	r3, #0
   d5d12:	6840      	ldr	r0, [r0, #4]
   d5d14:	461a      	mov	r2, r3
   d5d16:	4619      	mov	r1, r3
   d5d18:	f7ff bb2a 	b.w	d5370 <network_on>

000d5d1c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d1c:	2300      	movs	r3, #0
   d5d1e:	6840      	ldr	r0, [r0, #4]
   d5d20:	461a      	mov	r2, r3
   d5d22:	4619      	mov	r1, r3
   d5d24:	f7ff bb2c 	b.w	d5380 <network_off>

000d5d28 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d28:	6840      	ldr	r0, [r0, #4]
   d5d2a:	2200      	movs	r2, #0
   d5d2c:	f081 0101 	eor.w	r1, r1, #1
   d5d30:	f7ff bb2e 	b.w	d5390 <network_listen>

000d5d34 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d34:	6840      	ldr	r0, [r0, #4]
   d5d36:	2200      	movs	r2, #0
   d5d38:	f7ff bb3a 	b.w	d53b0 <network_set_listen_timeout>

000d5d3c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d3c:	2200      	movs	r2, #0
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	4611      	mov	r1, r2
   d5d42:	f7ff bb3d 	b.w	d53c0 <network_get_listen_timeout>

000d5d46 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5d46:	2200      	movs	r2, #0
   d5d48:	6840      	ldr	r0, [r0, #4]
   d5d4a:	4611      	mov	r1, r2
   d5d4c:	f7ff bb28 	b.w	d53a0 <network_listening>

000d5d50 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d54:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5d56:	b095      	sub	sp, #84	; 0x54
   d5d58:	4616      	mov	r6, r2
   d5d5a:	460d      	mov	r5, r1
   d5d5c:	4607      	mov	r7, r0
    IPAddress addr;
   d5d5e:	f7ff ff83 	bl	d5c68 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5d62:	4621      	mov	r1, r4
   d5d64:	2218      	movs	r2, #24
   d5d66:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5d68:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5d6a:	f001 fc5d 	bl	d7628 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5d6e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5d70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5d74:	4621      	mov	r1, r4
   d5d76:	466b      	mov	r3, sp
   d5d78:	aa0c      	add	r2, sp, #48	; 0x30
   d5d7a:	4630      	mov	r0, r6
   d5d7c:	f7ff f99a 	bl	d50b4 <netdb_getaddrinfo>
    if (!r) {
   d5d80:	4604      	mov	r4, r0
   d5d82:	2800      	cmp	r0, #0
   d5d84:	d146      	bne.n	d5e14 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d86:	4602      	mov	r2, r0
   d5d88:	2101      	movs	r1, #1
   d5d8a:	6868      	ldr	r0, [r5, #4]
   d5d8c:	f7ff fae8 	bl	d5360 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d90:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d92:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d94:	4622      	mov	r2, r4
   d5d96:	6868      	ldr	r0, [r5, #4]
   d5d98:	f7ff fae2 	bl	d5360 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d9c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d9e:	4681      	mov	r9, r0
        bool ok = false;
   d5da0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5da2:	2e00      	cmp	r6, #0
   d5da4:	d036      	beq.n	d5e14 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5da6:	2900      	cmp	r1, #0
   d5da8:	d134      	bne.n	d5e14 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5daa:	6873      	ldr	r3, [r6, #4]
   d5dac:	2b02      	cmp	r3, #2
   d5dae:	d003      	beq.n	d5db8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5db0:	2b0a      	cmp	r3, #10
   d5db2:	d00b      	beq.n	d5dcc <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5db4:	69f6      	ldr	r6, [r6, #28]
   d5db6:	e7f4      	b.n	d5da2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5db8:	f1b8 0f00 	cmp.w	r8, #0
   d5dbc:	d004      	beq.n	d5dc8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5dbe:	6971      	ldr	r1, [r6, #20]
   d5dc0:	4638      	mov	r0, r7
   d5dc2:	3104      	adds	r1, #4
   d5dc4:	f7ff ff7d 	bl	d5cc2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5dc8:	4641      	mov	r1, r8
   d5dca:	e7f3      	b.n	d5db4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5dcc:	f1b9 0f00 	cmp.w	r9, #0
   d5dd0:	d101      	bne.n	d5dd6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5dd2:	4649      	mov	r1, r9
   d5dd4:	e7ee      	b.n	d5db4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5dd6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5dd8:	2210      	movs	r2, #16
   d5dda:	a801      	add	r0, sp, #4
   d5ddc:	f001 fc24 	bl	d7628 <memset>
                    a.v = 6;
   d5de0:	2306      	movs	r3, #6
   d5de2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5de6:	ad01      	add	r5, sp, #4
   d5de8:	f104 0308 	add.w	r3, r4, #8
   d5dec:	3418      	adds	r4, #24
   d5dee:	6818      	ldr	r0, [r3, #0]
   d5df0:	6859      	ldr	r1, [r3, #4]
   d5df2:	462a      	mov	r2, r5
   d5df4:	c203      	stmia	r2!, {r0, r1}
   d5df6:	3308      	adds	r3, #8
   d5df8:	42a3      	cmp	r3, r4
   d5dfa:	4615      	mov	r5, r2
   d5dfc:	d1f7      	bne.n	d5dee <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5dfe:	a901      	add	r1, sp, #4
   d5e00:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5e02:	ad07      	add	r5, sp, #28
   d5e04:	f7ff ff3e 	bl	d5c84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e0a:	1d3c      	adds	r4, r7, #4
   d5e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e0e:	682b      	ldr	r3, [r5, #0]
   d5e10:	7023      	strb	r3, [r4, #0]
   d5e12:	e7de      	b.n	d5dd2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e14:	9800      	ldr	r0, [sp, #0]
   d5e16:	f7ff f945 	bl	d50a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e1a:	4638      	mov	r0, r7
   d5e1c:	b015      	add	sp, #84	; 0x54
   d5e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5e24 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e24:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e26:	4a03      	ldr	r2, [pc, #12]	; (d5e34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e28:	601a      	str	r2, [r3, #0]
   d5e2a:	2200      	movs	r2, #0
   d5e2c:	605a      	str	r2, [r3, #4]

} // spark
   d5e2e:	4770      	bx	lr
   d5e30:	2003e5e0 	.word	0x2003e5e0
   d5e34:	000da0b4 	.word	0x000da0b4

000d5e38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e3a:	4606      	mov	r6, r0
   d5e3c:	460d      	mov	r5, r1
  size_t n = 0;
   d5e3e:	188f      	adds	r7, r1, r2
   d5e40:	2400      	movs	r4, #0
  while (size--) {
   d5e42:	42bd      	cmp	r5, r7
   d5e44:	d00c      	beq.n	d5e60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5e46:	6833      	ldr	r3, [r6, #0]
   d5e48:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e4c:	689b      	ldr	r3, [r3, #8]
   d5e4e:	4630      	mov	r0, r6
   d5e50:	4798      	blx	r3
     if (chunk>=0)
   d5e52:	1e03      	subs	r3, r0, #0
   d5e54:	db01      	blt.n	d5e5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5e56:	441c      	add	r4, r3
  while (size--) {
   d5e58:	e7f3      	b.n	d5e42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5e5a:	2c00      	cmp	r4, #0
   d5e5c:	bf08      	it	eq
   d5e5e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5e60:	4620      	mov	r0, r4
   d5e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e64 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5e64:	b513      	push	{r0, r1, r4, lr}
   d5e66:	4604      	mov	r4, r0
    }
   d5e68:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5e6a:	b159      	cbz	r1, d5e84 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5e6c:	9101      	str	r1, [sp, #4]
   d5e6e:	f001 fc36 	bl	d76de <strlen>
   d5e72:	6823      	ldr	r3, [r4, #0]
   d5e74:	9901      	ldr	r1, [sp, #4]
   d5e76:	68db      	ldr	r3, [r3, #12]
   d5e78:	4602      	mov	r2, r0
   d5e7a:	4620      	mov	r0, r4
    }
   d5e7c:	b002      	add	sp, #8
   d5e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5e82:	4718      	bx	r3
    }
   d5e84:	b002      	add	sp, #8
   d5e86:	bd10      	pop	{r4, pc}

000d5e88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5e88:	6803      	ldr	r3, [r0, #0]
   d5e8a:	689b      	ldr	r3, [r3, #8]
   d5e8c:	4718      	bx	r3

000d5e8e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e8e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5e90:	210d      	movs	r1, #13
{
   d5e92:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5e94:	f7ff fff8 	bl	d5e88 <_ZN5Print5printEc>
  n += print('\n');
   d5e98:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5e9a:	4604      	mov	r4, r0
  n += print('\n');
   d5e9c:	4628      	mov	r0, r5
   d5e9e:	f7ff fff3 	bl	d5e88 <_ZN5Print5printEc>
  return n;
}
   d5ea2:	4420      	add	r0, r4
   d5ea4:	bd38      	pop	{r3, r4, r5, pc}

000d5ea6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5ea6:	b538      	push	{r3, r4, r5, lr}
   d5ea8:	4605      	mov	r5, r0
  return write(str);
   d5eaa:	f7ff ffdb 	bl	d5e64 <_ZN5Print5writeEPKc>
   d5eae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5eb0:	4628      	mov	r0, r5
   d5eb2:	f7ff ffec 	bl	d5e8e <_ZN5Print7printlnEv>
  return n;
}
   d5eb6:	4420      	add	r0, r4
   d5eb8:	bd38      	pop	{r3, r4, r5, pc}

000d5eba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5eba:	b530      	push	{r4, r5, lr}
   d5ebc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5ebe:	2300      	movs	r3, #0
   d5ec0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5ec4:	2a01      	cmp	r2, #1
   d5ec6:	bf98      	it	ls
   d5ec8:	220a      	movls	r2, #10
   d5eca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5ecc:	460d      	mov	r5, r1
   d5ece:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5ed2:	fb01 5312 	mls	r3, r1, r2, r5
   d5ed6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5eda:	2b09      	cmp	r3, #9
   d5edc:	bf94      	ite	ls
   d5ede:	3330      	addls	r3, #48	; 0x30
   d5ee0:	3337      	addhi	r3, #55	; 0x37
   d5ee2:	b2db      	uxtb	r3, r3
  } while(n);
   d5ee4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ee6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5eea:	d9ef      	bls.n	d5ecc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5eec:	4621      	mov	r1, r4
   d5eee:	f7ff ffb9 	bl	d5e64 <_ZN5Print5writeEPKc>
}
   d5ef2:	b00b      	add	sp, #44	; 0x2c
   d5ef4:	bd30      	pop	{r4, r5, pc}

000d5ef6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5ef6:	b510      	push	{r4, lr}
   d5ef8:	4604      	mov	r4, r0
   d5efa:	f7ff faf1 	bl	d54e0 <_ZNSt14_Function_baseD1Ev>
   d5efe:	4620      	mov	r0, r4
   d5f00:	bd10      	pop	{r4, pc}
	...

000d5f04 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5f04:	4803      	ldr	r0, [pc, #12]	; (d5f14 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f06:	4a04      	ldr	r2, [pc, #16]	; (d5f18 <_GLOBAL__sub_I_RGB+0x14>)
   d5f08:	4904      	ldr	r1, [pc, #16]	; (d5f1c <_GLOBAL__sub_I_RGB+0x18>)
   d5f0a:	2300      	movs	r3, #0
   d5f0c:	6083      	str	r3, [r0, #8]
   d5f0e:	f000 bc1d 	b.w	d674c <__aeabi_atexit>
   d5f12:	bf00      	nop
   d5f14:	2003e5e8 	.word	0x2003e5e8
   d5f18:	2003e4a8 	.word	0x2003e4a8
   d5f1c:	000d5ef7 	.word	0x000d5ef7

000d5f20 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5f20:	b510      	push	{r4, lr}
   d5f22:	4604      	mov	r4, r0
   d5f24:	4608      	mov	r0, r1
{
    _spi = spi;
   d5f26:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5f28:	f7ff f8cc 	bl	d50c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f2c:	2300      	movs	r3, #0
   d5f2e:	6063      	str	r3, [r4, #4]
}
   d5f30:	4620      	mov	r0, r4
   d5f32:	bd10      	pop	{r4, pc}

000d5f34 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5f34:	b510      	push	{r4, lr}
   d5f36:	4604      	mov	r4, r0
{
	free(buffer);
   d5f38:	6800      	ldr	r0, [r0, #0]
   d5f3a:	f7ff fa51 	bl	d53e0 <free>
}
   d5f3e:	4620      	mov	r0, r4
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5f42:	b510      	push	{r4, lr}
   d5f44:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f46:	6800      	ldr	r0, [r0, #0]
   d5f48:	b108      	cbz	r0, d5f4e <_ZN6String10invalidateEv+0xc>
   d5f4a:	f7ff fa49 	bl	d53e0 <free>
	buffer = NULL;
   d5f4e:	2300      	movs	r3, #0
	capacity = len = 0;
   d5f50:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f54:	6023      	str	r3, [r4, #0]
}
   d5f56:	bd10      	pop	{r4, pc}

000d5f58 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f58:	b538      	push	{r3, r4, r5, lr}
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f5e:	6800      	ldr	r0, [r0, #0]
   d5f60:	3101      	adds	r1, #1
   d5f62:	f7ff fa45 	bl	d53f0 <realloc>
	if (newbuffer) {
   d5f66:	b110      	cbz	r0, d5f6e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f68:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f6c:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f6e:	bd38      	pop	{r3, r4, r5, pc}

000d5f70 <_ZN6String7reserveEj>:
{
   d5f70:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f72:	6803      	ldr	r3, [r0, #0]
{
   d5f74:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f76:	b123      	cbz	r3, d5f82 <_ZN6String7reserveEj+0x12>
   d5f78:	6843      	ldr	r3, [r0, #4]
   d5f7a:	428b      	cmp	r3, r1
   d5f7c:	d301      	bcc.n	d5f82 <_ZN6String7reserveEj+0x12>
   d5f7e:	2001      	movs	r0, #1
}
   d5f80:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f82:	4620      	mov	r0, r4
   d5f84:	f7ff ffe8 	bl	d5f58 <_ZN6String12changeBufferEj>
   d5f88:	2800      	cmp	r0, #0
   d5f8a:	d0f9      	beq.n	d5f80 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f8c:	68a3      	ldr	r3, [r4, #8]
   d5f8e:	2b00      	cmp	r3, #0
   d5f90:	d1f5      	bne.n	d5f7e <_ZN6String7reserveEj+0xe>
   d5f92:	6822      	ldr	r2, [r4, #0]
   d5f94:	7013      	strb	r3, [r2, #0]
   d5f96:	e7f2      	b.n	d5f7e <_ZN6String7reserveEj+0xe>

000d5f98 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f9a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f9c:	4611      	mov	r1, r2
   d5f9e:	9201      	str	r2, [sp, #4]
{
   d5fa0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5fa2:	f7ff ffe5 	bl	d5f70 <_ZN6String7reserveEj>
   d5fa6:	9a01      	ldr	r2, [sp, #4]
   d5fa8:	b928      	cbnz	r0, d5fb6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5faa:	4620      	mov	r0, r4
   d5fac:	f7ff ffc9 	bl	d5f42 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	b003      	add	sp, #12
   d5fb4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5fb6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5fb8:	4629      	mov	r1, r5
   d5fba:	6820      	ldr	r0, [r4, #0]
   d5fbc:	f001 fb26 	bl	d760c <memcpy>
	buffer[len] = 0;
   d5fc0:	6822      	ldr	r2, [r4, #0]
   d5fc2:	68a3      	ldr	r3, [r4, #8]
   d5fc4:	2100      	movs	r1, #0
   d5fc6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5fc8:	e7f2      	b.n	d5fb0 <_ZN6String4copyEPKcj+0x18>

000d5fca <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5fca:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5fcc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5fce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5fd2:	4604      	mov	r4, r0
	len = 0;
   d5fd4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fd6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5fd8:	b141      	cbz	r1, d5fec <_ZN6StringC1EPKc+0x22>
   d5fda:	4608      	mov	r0, r1
   d5fdc:	9101      	str	r1, [sp, #4]
   d5fde:	f001 fb7e 	bl	d76de <strlen>
   d5fe2:	9901      	ldr	r1, [sp, #4]
   d5fe4:	4602      	mov	r2, r0
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	f7ff ffd6 	bl	d5f98 <_ZN6String4copyEPKcj>
}
   d5fec:	4620      	mov	r0, r4
   d5fee:	b002      	add	sp, #8
   d5ff0:	bd10      	pop	{r4, pc}

000d5ff2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5ff2:	4288      	cmp	r0, r1
{
   d5ff4:	b510      	push	{r4, lr}
   d5ff6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5ff8:	d005      	beq.n	d6006 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5ffa:	680b      	ldr	r3, [r1, #0]
   d5ffc:	b12b      	cbz	r3, d600a <_ZN6StringaSERKS_+0x18>
   d5ffe:	688a      	ldr	r2, [r1, #8]
   d6000:	4619      	mov	r1, r3
   d6002:	f7ff ffc9 	bl	d5f98 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6006:	4620      	mov	r0, r4
   d6008:	bd10      	pop	{r4, pc}
	else invalidate();
   d600a:	f7ff ff9a 	bl	d5f42 <_ZN6String10invalidateEv>
   d600e:	e7fa      	b.n	d6006 <_ZN6StringaSERKS_+0x14>

000d6010 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6010:	b510      	push	{r4, lr}
	buffer = NULL;
   d6012:	2300      	movs	r3, #0
String::String(const String &value)
   d6014:	4604      	mov	r4, r0
	capacity = 0;
   d6016:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d601a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d601c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d601e:	f7ff ffe8 	bl	d5ff2 <_ZN6StringaSERKS_>
}
   d6022:	4620      	mov	r0, r4
   d6024:	bd10      	pop	{r4, pc}

000d6026 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6026:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6028:	6882      	ldr	r2, [r0, #8]
   d602a:	b93a      	cbnz	r2, d603c <_ZNK6String6equalsEPKc+0x16>
   d602c:	b121      	cbz	r1, d6038 <_ZNK6String6equalsEPKc+0x12>
   d602e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6030:	fab0 f080 	clz	r0, r0
   d6034:	0940      	lsrs	r0, r0, #5
   d6036:	e000      	b.n	d603a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6038:	2001      	movs	r0, #1
}
   d603a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d603c:	6800      	ldr	r0, [r0, #0]
   d603e:	b909      	cbnz	r1, d6044 <_ZNK6String6equalsEPKc+0x1e>
   d6040:	7800      	ldrb	r0, [r0, #0]
   d6042:	e7f5      	b.n	d6030 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6044:	f001 fb1c 	bl	d7680 <strcmp>
   d6048:	e7f2      	b.n	d6030 <_ZNK6String6equalsEPKc+0xa>

000d604a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d604a:	b558      	push	{r3, r4, r6, lr}
   d604c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d604e:	b12a      	cbz	r2, d605c <_ZNK6String8getBytesEPhjj+0x12>
   d6050:	b121      	cbz	r1, d605c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d6052:	6884      	ldr	r4, [r0, #8]
   d6054:	429c      	cmp	r4, r3
   d6056:	d802      	bhi.n	d605e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6058:	2300      	movs	r3, #0
   d605a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d605c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d605e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6060:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d6062:	6801      	ldr	r1, [r0, #0]
   d6064:	4294      	cmp	r4, r2
   d6066:	bf28      	it	cs
   d6068:	4614      	movcs	r4, r2
   d606a:	4419      	add	r1, r3
   d606c:	4622      	mov	r2, r4
   d606e:	4630      	mov	r0, r6
   d6070:	f001 fb4f 	bl	d7712 <strncpy>
	buf[n] = 0;
   d6074:	2300      	movs	r3, #0
   d6076:	5533      	strb	r3, [r6, r4]
   d6078:	e7f0      	b.n	d605c <_ZNK6String8getBytesEPhjj+0x12>
	...

000d607c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d607c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d607e:	6800      	ldr	r0, [r0, #0]
   d6080:	b140      	cbz	r0, d6094 <_ZNK6String7toFloatEv+0x18>
   d6082:	f001 f9b7 	bl	d73f4 <atof>
   d6086:	ec51 0b10 	vmov	r0, r1, d0
   d608a:	f000 ffe1 	bl	d7050 <__aeabi_d2f>
   d608e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d6092:	bd08      	pop	{r3, pc}
	return 0;
   d6094:	ed9f 0a01 	vldr	s0, [pc, #4]	; d609c <_ZNK6String7toFloatEv+0x20>
   d6098:	e7fb      	b.n	d6092 <_ZNK6String7toFloatEv+0x16>
   d609a:	bf00      	nop
   d609c:	00000000 	.word	0x00000000

000d60a0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d60a0:	b507      	push	{r0, r1, r2, lr}
   d60a2:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d60a4:	2100      	movs	r1, #0
{
   d60a6:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d60a8:	9100      	str	r1, [sp, #0]
   d60aa:	2001      	movs	r0, #1
   d60ac:	218c      	movs	r1, #140	; 0x8c
   d60ae:	f7ff f8dd 	bl	d526c <system_reset>
}
   d60b2:	b003      	add	sp, #12
   d60b4:	f85d fb04 	ldr.w	pc, [sp], #4

000d60b8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d60b8:	4601      	mov	r1, r0
    reset(0, flags);
   d60ba:	2000      	movs	r0, #0
   d60bc:	f7ff bff0 	b.w	d60a0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d60c0 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d60c0:	2000      	movs	r0, #0
   d60c2:	f7ff bff9 	b.w	d60b8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d60c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d60c8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d60ca:	4b09      	ldr	r3, [pc, #36]	; (d60f0 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d60cc:	4c09      	ldr	r4, [pc, #36]	; (d60f4 <_GLOBAL__sub_I_System+0x2c>)
   d60ce:	2202      	movs	r2, #2
   d60d0:	2000      	movs	r0, #0
   d60d2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d60d4:	4b08      	ldr	r3, [pc, #32]	; (d60f8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d60d6:	6020      	str	r0, [r4, #0]
   d60d8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d60da:	71a0      	strb	r0, [r4, #6]
   d60dc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d60de:	f7ff f881 	bl	d51e4 <set_system_mode>
SystemClass System;
   d60e2:	4620      	mov	r0, r4
   d60e4:	4a05      	ldr	r2, [pc, #20]	; (d60fc <_GLOBAL__sub_I_System+0x34>)
   d60e6:	4906      	ldr	r1, [pc, #24]	; (d6100 <_GLOBAL__sub_I_System+0x38>)
   d60e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d60ec:	f000 bb2e 	b.w	d674c <__aeabi_atexit>
   d60f0:	2003e604 	.word	0x2003e604
   d60f4:	2003e5f8 	.word	0x2003e5f8
   d60f8:	ffff0000 	.word	0xffff0000
   d60fc:	2003e4a8 	.word	0x2003e4a8
   d6100:	000d40d1 	.word	0x000d40d1

000d6104 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d6108:	4a15      	ldr	r2, [pc, #84]	; (d6160 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d610a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d616c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d610e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6112:	18c0      	adds	r0, r0, r3
   d6114:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d6118:	4a12      	ldr	r2, [pc, #72]	; (d6164 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d611a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d611e:	18c6      	adds	r6, r0, r3
   d6120:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d6124:	e9d8 2300 	ldrd	r2, r3, [r8]
   d6128:	42bb      	cmp	r3, r7
   d612a:	bf08      	it	eq
   d612c:	42b2      	cmpeq	r2, r6
{
   d612e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d6130:	d013      	beq.n	d615a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d6132:	a903      	add	r1, sp, #12
   d6134:	4668      	mov	r0, sp
   d6136:	e9cd 6700 	strd	r6, r7, [sp]
   d613a:	f001 f971 	bl	d7420 <localtime_r>
	calendar_time.tm_year += 1900;
   d613e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6140:	4d09      	ldr	r5, [pc, #36]	; (d6168 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d6142:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6146:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d6148:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d614a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d614c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d614e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6152:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6156:	6823      	ldr	r3, [r4, #0]
   d6158:	602b      	str	r3, [r5, #0]
    }
}
   d615a:	b00c      	add	sp, #48	; 0x30
   d615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6160:	2003e638 	.word	0x2003e638
   d6164:	2003e630 	.word	0x2003e630
   d6168:	2003e60c 	.word	0x2003e60c
   d616c:	2003e640 	.word	0x2003e640

000d6170 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6170:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6172:	2000      	movs	r0, #0
   d6174:	f7ff f8cc 	bl	d5310 <spark_sync_time_pending>
   d6178:	b128      	cbz	r0, d6186 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d617a:	f7ff f8a1 	bl	d52c0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d617e:	f080 0001 	eor.w	r0, r0, #1
   d6182:	b2c0      	uxtb	r0, r0
    }
   d6184:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6186:	2001      	movs	r0, #1
   d6188:	e7fc      	b.n	d6184 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d618a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d618a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d618c:	2000      	movs	r0, #0
   d618e:	f7fe fef1 	bl	d4f74 <hal_rtc_time_is_valid>
    if (rtcstate)
   d6192:	4604      	mov	r4, r0
   d6194:	b9a0      	cbnz	r0, d61c0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6196:	f7ff f81d 	bl	d51d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d619a:	2801      	cmp	r0, #1
   d619c:	d110      	bne.n	d61c0 <_ZN9TimeClass7isValidEv+0x36>
   d619e:	4620      	mov	r0, r4
   d61a0:	f7ff f848 	bl	d5234 <system_thread_get_state>
   d61a4:	b960      	cbnz	r0, d61c0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d61a6:	f7ff ffe3 	bl	d6170 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d61aa:	b910      	cbnz	r0, d61b2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d61ac:	f7ff f878 	bl	d52a0 <spark_process>
        while (_while() && !_condition()) {
   d61b0:	e7f9      	b.n	d61a6 <_ZN9TimeClass7isValidEv+0x1c>
   d61b2:	f7ff ffdd 	bl	d6170 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d61b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d61ba:	2000      	movs	r0, #0
   d61bc:	f7fe beda 	b.w	d4f74 <hal_rtc_time_is_valid>
}
   d61c0:	4620      	mov	r0, r4
   d61c2:	bd10      	pop	{r4, pc}

000d61c4 <_ZN9TimeClass3nowEv>:
{
   d61c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d61c6:	f7ff ffe0 	bl	d618a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d61ca:	2210      	movs	r2, #16
   d61cc:	2100      	movs	r1, #0
   d61ce:	4668      	mov	r0, sp
   d61d0:	f001 fa2a 	bl	d7628 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d61d4:	2100      	movs	r1, #0
   d61d6:	4668      	mov	r0, sp
   d61d8:	f7fe fedc 	bl	d4f94 <hal_rtc_get_time>
}
   d61dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   d61e0:	b005      	add	sp, #20
   d61e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d61e8 <_ZN9TimeClass4hourEv>:
{
   d61e8:	b508      	push	{r3, lr}
	return hour(now());
   d61ea:	f7ff ffeb 	bl	d61c4 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d61ee:	f7ff ff89 	bl	d6104 <_ZL22Refresh_UnixTime_Cachex>
}
   d61f2:	4b01      	ldr	r3, [pc, #4]	; (d61f8 <_ZN9TimeClass4hourEv+0x10>)
   d61f4:	6898      	ldr	r0, [r3, #8]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	2003e60c 	.word	0x2003e60c

000d61fc <_ZN9TimeClass6minuteEv>:
{
   d61fc:	b508      	push	{r3, lr}
	return minute(now());
   d61fe:	f7ff ffe1 	bl	d61c4 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6202:	f7ff ff7f 	bl	d6104 <_ZL22Refresh_UnixTime_Cachex>
}
   d6206:	4b01      	ldr	r3, [pc, #4]	; (d620c <_ZN9TimeClass6minuteEv+0x10>)
   d6208:	6858      	ldr	r0, [r3, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	2003e60c 	.word	0x2003e60c

000d6210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6210:	4b02      	ldr	r3, [pc, #8]	; (d621c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	4b02      	ldr	r3, [pc, #8]	; (d6220 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6216:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6218:	4770      	bx	lr
   d621a:	bf00      	nop
   d621c:	2003e268 	.word	0x2003e268
   d6220:	2003e608 	.word	0x2003e608

000d6224 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6224:	4770      	bx	lr

000d6226 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6226:	7441      	strb	r1, [r0, #17]
}
   d6228:	4770      	bx	lr

000d622a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d622a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d622c:	7c00      	ldrb	r0, [r0, #16]
   d622e:	f7fe ff91 	bl	d5154 <hal_usart_available_data_for_write>
}
   d6232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6236:	bd08      	pop	{r3, pc}

000d6238 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6238:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d623a:	7c00      	ldrb	r0, [r0, #16]
   d623c:	f7fe ff62 	bl	d5104 <hal_usart_available>
}
   d6240:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6244:	bd08      	pop	{r3, pc}

000d6246 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6246:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6248:	7c00      	ldrb	r0, [r0, #16]
   d624a:	f7fe ff6b 	bl	d5124 <hal_usart_peek>
}
   d624e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6252:	bd08      	pop	{r3, pc}

000d6254 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6254:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6256:	7c00      	ldrb	r0, [r0, #16]
   d6258:	f7fe ff5c 	bl	d5114 <hal_usart_read>
}
   d625c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6260:	bd08      	pop	{r3, pc}

000d6262 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6262:	7c00      	ldrb	r0, [r0, #16]
   d6264:	f7fe bf66 	b.w	d5134 <hal_usart_flush>

000d6268 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6268:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d626a:	7c45      	ldrb	r5, [r0, #17]
{
   d626c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d626e:	b12d      	cbz	r5, d627c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6270:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6272:	b003      	add	sp, #12
   d6274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6278:	f7fe bf3c 	b.w	d50f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d627c:	7c00      	ldrb	r0, [r0, #16]
   d627e:	9101      	str	r1, [sp, #4]
   d6280:	f7fe ff68 	bl	d5154 <hal_usart_available_data_for_write>
   d6284:	2800      	cmp	r0, #0
   d6286:	9901      	ldr	r1, [sp, #4]
   d6288:	dcf2      	bgt.n	d6270 <_ZN11USARTSerial5writeEh+0x8>
}
   d628a:	4628      	mov	r0, r5
   d628c:	b003      	add	sp, #12
   d628e:	bd30      	pop	{r4, r5, pc}

000d6290 <_ZN11USARTSerialD0Ev>:
   d6290:	b510      	push	{r4, lr}
   d6292:	2114      	movs	r1, #20
   d6294:	4604      	mov	r4, r0
   d6296:	f000 fa5e 	bl	d6756 <_ZdlPvj>
   d629a:	4620      	mov	r0, r4
   d629c:	bd10      	pop	{r4, pc}
	...

000d62a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d62a0:	b510      	push	{r4, lr}
   d62a2:	f04f 0c00 	mov.w	ip, #0
   d62a6:	4604      	mov	r4, r0
   d62a8:	4608      	mov	r0, r1
   d62aa:	4611      	mov	r1, r2
   d62ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d62b0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d62b4:	4a04      	ldr	r2, [pc, #16]	; (d62c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d62b6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d62b8:	2201      	movs	r2, #1
  _serial = serial;
   d62ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62bc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d62be:	461a      	mov	r2, r3
   d62c0:	f7fe ff10 	bl	d50e4 <hal_usart_init>
}
   d62c4:	4620      	mov	r0, r4
   d62c6:	bd10      	pop	{r4, pc}
   d62c8:	000da104 	.word	0x000da104

000d62cc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d62cc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d62ce:	4c0e      	ldr	r4, [pc, #56]	; (d6308 <_Z22__fetch_global_Serial1v+0x3c>)
   d62d0:	7821      	ldrb	r1, [r4, #0]
   d62d2:	f3bf 8f5b 	dmb	ish
   d62d6:	f011 0101 	ands.w	r1, r1, #1
   d62da:	d112      	bne.n	d6302 <_Z22__fetch_global_Serial1v+0x36>
   d62dc:	4620      	mov	r0, r4
   d62de:	9101      	str	r1, [sp, #4]
   d62e0:	f7fd fedf 	bl	d40a2 <__cxa_guard_acquire>
   d62e4:	9901      	ldr	r1, [sp, #4]
   d62e6:	b160      	cbz	r0, d6302 <_Z22__fetch_global_Serial1v+0x36>
   d62e8:	4a08      	ldr	r2, [pc, #32]	; (d630c <_Z22__fetch_global_Serial1v+0x40>)
   d62ea:	4b09      	ldr	r3, [pc, #36]	; (d6310 <_Z22__fetch_global_Serial1v+0x44>)
   d62ec:	4809      	ldr	r0, [pc, #36]	; (d6314 <_Z22__fetch_global_Serial1v+0x48>)
   d62ee:	f7ff ffd7 	bl	d62a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d62f2:	4620      	mov	r0, r4
   d62f4:	f7fd feda 	bl	d40ac <__cxa_guard_release>
   d62f8:	4a07      	ldr	r2, [pc, #28]	; (d6318 <_Z22__fetch_global_Serial1v+0x4c>)
   d62fa:	4908      	ldr	r1, [pc, #32]	; (d631c <_Z22__fetch_global_Serial1v+0x50>)
   d62fc:	4805      	ldr	r0, [pc, #20]	; (d6314 <_Z22__fetch_global_Serial1v+0x48>)
   d62fe:	f000 fa25 	bl	d674c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6302:	4804      	ldr	r0, [pc, #16]	; (d6314 <_Z22__fetch_global_Serial1v+0x48>)
   d6304:	b002      	add	sp, #8
   d6306:	bd10      	pop	{r4, pc}
   d6308:	2003e648 	.word	0x2003e648
   d630c:	2003e64c 	.word	0x2003e64c
   d6310:	2003e6d0 	.word	0x2003e6d0
   d6314:	2003e754 	.word	0x2003e754
   d6318:	2003e4a8 	.word	0x2003e4a8
   d631c:	000d6225 	.word	0x000d6225

000d6320 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6320:	7441      	strb	r1, [r0, #17]
}
   d6322:	4770      	bx	lr

000d6324 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6324:	4770      	bx	lr

000d6326 <_ZN9USBSerial4readEv>:
{
   d6326:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6328:	2100      	movs	r1, #0
   d632a:	7c00      	ldrb	r0, [r0, #16]
   d632c:	f7fe ff3a 	bl	d51a4 <HAL_USB_USART_Receive_Data>
}
   d6330:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6334:	bd08      	pop	{r3, pc}

000d6336 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6336:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6338:	2101      	movs	r1, #1
   d633a:	7c00      	ldrb	r0, [r0, #16]
   d633c:	f7fe ff32 	bl	d51a4 <HAL_USB_USART_Receive_Data>
}
   d6340:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6344:	bd08      	pop	{r3, pc}

000d6346 <_ZN9USBSerial17availableForWriteEv>:
{
   d6346:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6348:	7c00      	ldrb	r0, [r0, #16]
   d634a:	f7fe ff23 	bl	d5194 <HAL_USB_USART_Available_Data_For_Write>
}
   d634e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6352:	bd08      	pop	{r3, pc}

000d6354 <_ZN9USBSerial9availableEv>:
{
   d6354:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6356:	7c00      	ldrb	r0, [r0, #16]
   d6358:	f7fe ff14 	bl	d5184 <HAL_USB_USART_Available_Data>
}
   d635c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6360:	bd08      	pop	{r3, pc}

000d6362 <_ZN9USBSerial5writeEh>:
{
   d6362:	b513      	push	{r0, r1, r4, lr}
   d6364:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6366:	7c00      	ldrb	r0, [r0, #16]
{
   d6368:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d636a:	f7fe ff13 	bl	d5194 <HAL_USB_USART_Available_Data_For_Write>
   d636e:	2800      	cmp	r0, #0
   d6370:	9901      	ldr	r1, [sp, #4]
   d6372:	dc01      	bgt.n	d6378 <_ZN9USBSerial5writeEh+0x16>
   d6374:	7c60      	ldrb	r0, [r4, #17]
   d6376:	b120      	cbz	r0, d6382 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6378:	7c20      	ldrb	r0, [r4, #16]
   d637a:	f7fe ff1b 	bl	d51b4 <HAL_USB_USART_Send_Data>
   d637e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6382:	b002      	add	sp, #8
   d6384:	bd10      	pop	{r4, pc}

000d6386 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6386:	7c00      	ldrb	r0, [r0, #16]
   d6388:	f7fe bf1c 	b.w	d51c4 <HAL_USB_USART_Flush_Data>

000d638c <_ZN9USBSerialD0Ev>:
   d638c:	b510      	push	{r4, lr}
   d638e:	2114      	movs	r1, #20
   d6390:	4604      	mov	r4, r0
   d6392:	f000 f9e0 	bl	d6756 <_ZdlPvj>
   d6396:	4620      	mov	r0, r4
   d6398:	bd10      	pop	{r4, pc}
	...

000d639c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d639c:	b510      	push	{r4, lr}
   d639e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63a2:	4604      	mov	r4, r0
   d63a4:	4608      	mov	r0, r1
   d63a6:	2100      	movs	r1, #0
   d63a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d63ac:	4b04      	ldr	r3, [pc, #16]	; (d63c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d63ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d63b0:	2301      	movs	r3, #1
  _serial = serial;
   d63b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d63b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d63b6:	4611      	mov	r1, r2
   d63b8:	f7fe fed4 	bl	d5164 <HAL_USB_USART_Init>
}
   d63bc:	4620      	mov	r0, r4
   d63be:	bd10      	pop	{r4, pc}
   d63c0:	000da134 	.word	0x000da134

000d63c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d63c4:	7c00      	ldrb	r0, [r0, #16]
   d63c6:	2200      	movs	r2, #0
   d63c8:	f7fe bed4 	b.w	d5174 <HAL_USB_USART_Begin>

000d63cc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d63cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d63ce:	2214      	movs	r2, #20
{
   d63d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d63d2:	2100      	movs	r1, #0
   d63d4:	f001 f928 	bl	d7628 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d63d8:	4620      	mov	r0, r4
   d63da:	bd10      	pop	{r4, pc}

000d63dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d63dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63de:	4c10      	ldr	r4, [pc, #64]	; (d6420 <_Z16_fetch_usbserialv+0x44>)
{
   d63e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d63e2:	a803      	add	r0, sp, #12
   d63e4:	f7ff fff2 	bl	d63cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63e8:	7821      	ldrb	r1, [r4, #0]
   d63ea:	f3bf 8f5b 	dmb	ish
   d63ee:	f011 0101 	ands.w	r1, r1, #1
   d63f2:	d111      	bne.n	d6418 <_Z16_fetch_usbserialv+0x3c>
   d63f4:	4620      	mov	r0, r4
   d63f6:	9101      	str	r1, [sp, #4]
   d63f8:	f7fd fe53 	bl	d40a2 <__cxa_guard_acquire>
   d63fc:	9901      	ldr	r1, [sp, #4]
   d63fe:	b158      	cbz	r0, d6418 <_Z16_fetch_usbserialv+0x3c>
   d6400:	aa03      	add	r2, sp, #12
   d6402:	4808      	ldr	r0, [pc, #32]	; (d6424 <_Z16_fetch_usbserialv+0x48>)
   d6404:	f7ff ffca 	bl	d639c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6408:	4620      	mov	r0, r4
   d640a:	f7fd fe4f 	bl	d40ac <__cxa_guard_release>
   d640e:	4a06      	ldr	r2, [pc, #24]	; (d6428 <_Z16_fetch_usbserialv+0x4c>)
   d6410:	4906      	ldr	r1, [pc, #24]	; (d642c <_Z16_fetch_usbserialv+0x50>)
   d6412:	4804      	ldr	r0, [pc, #16]	; (d6424 <_Z16_fetch_usbserialv+0x48>)
   d6414:	f000 f99a 	bl	d674c <__aeabi_atexit>
	return _usbserial;
}
   d6418:	4802      	ldr	r0, [pc, #8]	; (d6424 <_Z16_fetch_usbserialv+0x48>)
   d641a:	b008      	add	sp, #32
   d641c:	bd10      	pop	{r4, pc}
   d641e:	bf00      	nop
   d6420:	2003e768 	.word	0x2003e768
   d6424:	2003e76c 	.word	0x2003e76c
   d6428:	2003e4a8 	.word	0x2003e4a8
   d642c:	000d6325 	.word	0x000d6325

000d6430 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6430:	2200      	movs	r2, #0
   d6432:	6840      	ldr	r0, [r0, #4]
   d6434:	4611      	mov	r1, r2
   d6436:	f7fe bf93 	b.w	d5360 <network_ready>

000d643a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d643a:	2200      	movs	r2, #0
   d643c:	6840      	ldr	r0, [r0, #4]
   d643e:	4611      	mov	r1, r2
   d6440:	f7fe bfae 	b.w	d53a0 <network_listening>

000d6444 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6444:	2200      	movs	r2, #0
   d6446:	6840      	ldr	r0, [r0, #4]
   d6448:	4611      	mov	r1, r2
   d644a:	f7fe bfb9 	b.w	d53c0 <network_get_listen_timeout>

000d644e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d644e:	6840      	ldr	r0, [r0, #4]
   d6450:	2200      	movs	r2, #0
   d6452:	f7fe bfad 	b.w	d53b0 <network_set_listen_timeout>

000d6456 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6456:	6840      	ldr	r0, [r0, #4]
   d6458:	2200      	movs	r2, #0
   d645a:	f081 0101 	eor.w	r1, r1, #1
   d645e:	f7fe bf97 	b.w	d5390 <network_listen>

000d6462 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6462:	2300      	movs	r3, #0
   d6464:	6840      	ldr	r0, [r0, #4]
   d6466:	461a      	mov	r2, r3
   d6468:	4619      	mov	r1, r3
   d646a:	f7fe bf89 	b.w	d5380 <network_off>

000d646e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d646e:	2300      	movs	r3, #0
   d6470:	6840      	ldr	r0, [r0, #4]
   d6472:	461a      	mov	r2, r3
   d6474:	4619      	mov	r1, r3
   d6476:	f7fe bf7b 	b.w	d5370 <network_on>

000d647a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d647a:	2200      	movs	r2, #0
   d647c:	6840      	ldr	r0, [r0, #4]
   d647e:	4611      	mov	r1, r2
   d6480:	f7fe bf5e 	b.w	d5340 <network_connecting>

000d6484 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6484:	6840      	ldr	r0, [r0, #4]
   d6486:	2200      	movs	r2, #0
   d6488:	2102      	movs	r1, #2
   d648a:	f7fe bf61 	b.w	d5350 <network_disconnect>

000d648e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d648e:	2300      	movs	r3, #0
   d6490:	6840      	ldr	r0, [r0, #4]
   d6492:	461a      	mov	r2, r3
   d6494:	f7fe bf4c 	b.w	d5330 <network_connect>

000d6498 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6498:	4b02      	ldr	r3, [pc, #8]	; (d64a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d649a:	2204      	movs	r2, #4
   d649c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d649e:	4a02      	ldr	r2, [pc, #8]	; (d64a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d64a0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d64a2:	4770      	bx	lr
   d64a4:	2003e780 	.word	0x2003e780
   d64a8:	000da164 	.word	0x000da164

000d64ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d64ac:	4b01      	ldr	r3, [pc, #4]	; (d64b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d64ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d64b0:	4770      	bx	lr
   d64b2:	bf00      	nop
   d64b4:	2003e26c 	.word	0x2003e26c

000d64b8 <serialEventRun>:
{
   d64b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d64ba:	4b0b      	ldr	r3, [pc, #44]	; (d64e8 <serialEventRun+0x30>)
   d64bc:	b143      	cbz	r3, d64d0 <serialEventRun+0x18>
   d64be:	f7ff ff8d 	bl	d63dc <_Z16_fetch_usbserialv>
   d64c2:	6803      	ldr	r3, [r0, #0]
   d64c4:	691b      	ldr	r3, [r3, #16]
   d64c6:	4798      	blx	r3
   d64c8:	2800      	cmp	r0, #0
   d64ca:	dd01      	ble.n	d64d0 <serialEventRun+0x18>
        serialEvent();
   d64cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d64d0:	4b06      	ldr	r3, [pc, #24]	; (d64ec <serialEventRun+0x34>)
   d64d2:	b143      	cbz	r3, d64e6 <serialEventRun+0x2e>
   d64d4:	f7ff fefa 	bl	d62cc <_Z22__fetch_global_Serial1v>
   d64d8:	6803      	ldr	r3, [r0, #0]
   d64da:	691b      	ldr	r3, [r3, #16]
   d64dc:	4798      	blx	r3
   d64de:	2800      	cmp	r0, #0
   d64e0:	dd01      	ble.n	d64e6 <serialEventRun+0x2e>
        serialEvent1();
   d64e2:	f3af 8000 	nop.w
}
   d64e6:	bd08      	pop	{r3, pc}
	...

000d64f0 <_post_loop>:
{
   d64f0:	b508      	push	{r3, lr}
	serialEventRun();
   d64f2:	f7ff ffe1 	bl	d64b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d64f6:	f7fe fd15 	bl	d4f24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d64fa:	4b01      	ldr	r3, [pc, #4]	; (d6500 <_post_loop+0x10>)
   d64fc:	6018      	str	r0, [r3, #0]
}
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	2003e79c 	.word	0x2003e79c

000d6504 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6504:	4802      	ldr	r0, [pc, #8]	; (d6510 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6506:	4a03      	ldr	r2, [pc, #12]	; (d6514 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6508:	4903      	ldr	r1, [pc, #12]	; (d6518 <_Z33system_initialize_user_backup_ramv+0x14>)
   d650a:	1a12      	subs	r2, r2, r0
   d650c:	f001 b87e 	b.w	d760c <memcpy>
   d6510:	2003f400 	.word	0x2003f400
   d6514:	2003f404 	.word	0x2003f404
   d6518:	000da4d8 	.word	0x000da4d8

000d651c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d651c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d651e:	2300      	movs	r3, #0
   d6520:	9300      	str	r3, [sp, #0]
   d6522:	461a      	mov	r2, r3
   d6524:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6528:	f7fe fe96 	bl	d5258 <system_ctrl_set_result>
}
   d652c:	b003      	add	sp, #12
   d652e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6534 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6534:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6536:	8843      	ldrh	r3, [r0, #2]
   d6538:	2b0a      	cmp	r3, #10
   d653a:	d008      	beq.n	d654e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d653c:	2b50      	cmp	r3, #80	; 0x50
   d653e:	d10b      	bne.n	d6558 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6540:	4b09      	ldr	r3, [pc, #36]	; (d6568 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6542:	681b      	ldr	r3, [r3, #0]
   d6544:	b14b      	cbz	r3, d655a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6546:	b003      	add	sp, #12
   d6548:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d654c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d654e:	f7ff ffe5 	bl	d651c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6552:	b003      	add	sp, #12
   d6554:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6558:	2300      	movs	r3, #0
   d655a:	9300      	str	r3, [sp, #0]
   d655c:	461a      	mov	r2, r3
   d655e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6562:	f7fe fe79 	bl	d5258 <system_ctrl_set_result>
}
   d6566:	e7f4      	b.n	d6552 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6568:	2003e78c 	.word	0x2003e78c

000d656c <module_user_init_hook>:
{
   d656c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d656e:	4c12      	ldr	r4, [pc, #72]	; (d65b8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6570:	4812      	ldr	r0, [pc, #72]	; (d65bc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6572:	4d13      	ldr	r5, [pc, #76]	; (d65c0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6574:	2100      	movs	r1, #0
   d6576:	f7fe ff63 	bl	d5440 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d657a:	6823      	ldr	r3, [r4, #0]
   d657c:	42ab      	cmp	r3, r5
   d657e:	4b11      	ldr	r3, [pc, #68]	; (d65c4 <module_user_init_hook+0x58>)
   d6580:	bf0c      	ite	eq
   d6582:	2201      	moveq	r2, #1
   d6584:	2200      	movne	r2, #0
   d6586:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6588:	d002      	beq.n	d6590 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d658a:	f7ff ffbb 	bl	d6504 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d658e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6590:	f7fe fcc0 	bl	d4f14 <HAL_RNG_GetRandomNumber>
   d6594:	4604      	mov	r4, r0
    srand(seed);
   d6596:	f001 f84f 	bl	d7638 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d659a:	4b0b      	ldr	r3, [pc, #44]	; (d65c8 <module_user_init_hook+0x5c>)
   d659c:	b113      	cbz	r3, d65a4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d659e:	4620      	mov	r0, r4
   d65a0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d65a4:	2100      	movs	r1, #0
   d65a6:	4808      	ldr	r0, [pc, #32]	; (d65c8 <module_user_init_hook+0x5c>)
   d65a8:	f7fe feba 	bl	d5320 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d65ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d65b0:	4806      	ldr	r0, [pc, #24]	; (d65cc <module_user_init_hook+0x60>)
   d65b2:	2100      	movs	r1, #0
   d65b4:	f7fe be46 	b.w	d5244 <system_ctrl_set_app_request_handler>
   d65b8:	2003f400 	.word	0x2003f400
   d65bc:	000d64ad 	.word	0x000d64ad
   d65c0:	9a271c1e 	.word	0x9a271c1e
   d65c4:	2003e788 	.word	0x2003e788
   d65c8:	00000000 	.word	0x00000000
   d65cc:	000d6535 	.word	0x000d6535

000d65d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d65d0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d65d2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d65d4:	d902      	bls.n	d65dc <pinAvailable+0xc>
    return false;
   d65d6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d65d8:	b002      	add	sp, #8
   d65da:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d65dc:	f1a0 030b 	sub.w	r3, r0, #11
   d65e0:	2b02      	cmp	r3, #2
   d65e2:	d81a      	bhi.n	d661a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d65e4:	4c17      	ldr	r4, [pc, #92]	; (d6644 <pinAvailable+0x74>)
   d65e6:	7821      	ldrb	r1, [r4, #0]
   d65e8:	f3bf 8f5b 	dmb	ish
   d65ec:	f011 0101 	ands.w	r1, r1, #1
   d65f0:	d10b      	bne.n	d660a <pinAvailable+0x3a>
   d65f2:	4620      	mov	r0, r4
   d65f4:	9101      	str	r1, [sp, #4]
   d65f6:	f7fd fd54 	bl	d40a2 <__cxa_guard_acquire>
   d65fa:	9901      	ldr	r1, [sp, #4]
   d65fc:	b128      	cbz	r0, d660a <pinAvailable+0x3a>
   d65fe:	4812      	ldr	r0, [pc, #72]	; (d6648 <pinAvailable+0x78>)
   d6600:	f7ff fc8e 	bl	d5f20 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6604:	4620      	mov	r0, r4
   d6606:	f7fd fd51 	bl	d40ac <__cxa_guard_release>
   d660a:	4b0f      	ldr	r3, [pc, #60]	; (d6648 <pinAvailable+0x78>)
   d660c:	7818      	ldrb	r0, [r3, #0]
   d660e:	f7fe fd61 	bl	d50d4 <hal_spi_is_enabled>
   d6612:	2800      	cmp	r0, #0
   d6614:	d1df      	bne.n	d65d6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6616:	2001      	movs	r0, #1
   d6618:	e7de      	b.n	d65d8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d661a:	2801      	cmp	r0, #1
   d661c:	d809      	bhi.n	d6632 <pinAvailable+0x62>
   d661e:	f000 f86d 	bl	d66fc <_Z19__fetch_global_Wirev>
   d6622:	2100      	movs	r1, #0
   d6624:	7c00      	ldrb	r0, [r0, #16]
   d6626:	f7fe fd1d 	bl	d5064 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d662a:	f080 0001 	eor.w	r0, r0, #1
   d662e:	b2c0      	uxtb	r0, r0
   d6630:	e7d2      	b.n	d65d8 <pinAvailable+0x8>
   d6632:	3809      	subs	r0, #9
   d6634:	2801      	cmp	r0, #1
   d6636:	d8ee      	bhi.n	d6616 <pinAvailable+0x46>
   d6638:	f7ff fe48 	bl	d62cc <_Z22__fetch_global_Serial1v>
   d663c:	7c00      	ldrb	r0, [r0, #16]
   d663e:	f7fe fd81 	bl	d5144 <hal_usart_is_enabled>
   d6642:	e7f2      	b.n	d662a <pinAvailable+0x5a>
   d6644:	2003e790 	.word	0x2003e790
   d6648:	2003e794 	.word	0x2003e794

000d664c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d664c:	2823      	cmp	r0, #35	; 0x23
{
   d664e:	b538      	push	{r3, r4, r5, lr}
   d6650:	4604      	mov	r4, r0
   d6652:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6654:	d80a      	bhi.n	d666c <pinMode+0x20>
   d6656:	29ff      	cmp	r1, #255	; 0xff
   d6658:	d008      	beq.n	d666c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d665a:	f7ff ffb9 	bl	d65d0 <pinAvailable>
   d665e:	b128      	cbz	r0, d666c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6660:	4629      	mov	r1, r5
   d6662:	4620      	mov	r0, r4
}
   d6664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6668:	f7fe bca4 	b.w	d4fb4 <HAL_Pin_Mode>
}
   d666c:	bd38      	pop	{r3, r4, r5, pc}

000d666e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d666e:	b538      	push	{r3, r4, r5, lr}
   d6670:	4604      	mov	r4, r0
   d6672:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6674:	f7fe fca6 	bl	d4fc4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6678:	28ff      	cmp	r0, #255	; 0xff
   d667a:	d010      	beq.n	d669e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d667c:	2806      	cmp	r0, #6
   d667e:	d804      	bhi.n	d668a <digitalWrite+0x1c>
   d6680:	234d      	movs	r3, #77	; 0x4d
   d6682:	fa23 f000 	lsr.w	r0, r3, r0
   d6686:	07c3      	lsls	r3, r0, #31
   d6688:	d409      	bmi.n	d669e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d668a:	4620      	mov	r0, r4
   d668c:	f7ff ffa0 	bl	d65d0 <pinAvailable>
   d6690:	b128      	cbz	r0, d669e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6692:	4629      	mov	r1, r5
   d6694:	4620      	mov	r0, r4
}
   d6696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d669a:	f7fe bc9b 	b.w	d4fd4 <HAL_GPIO_Write>
}
   d669e:	bd38      	pop	{r3, r4, r5, pc}

000d66a0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d66a0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d66a2:	4c08      	ldr	r4, [pc, #32]	; (d66c4 <_Z21__fetch_global_EEPROMv+0x24>)
   d66a4:	7823      	ldrb	r3, [r4, #0]
   d66a6:	f3bf 8f5b 	dmb	ish
   d66aa:	07db      	lsls	r3, r3, #31
   d66ac:	d408      	bmi.n	d66c0 <_Z21__fetch_global_EEPROMv+0x20>
   d66ae:	4620      	mov	r0, r4
   d66b0:	f7fd fcf7 	bl	d40a2 <__cxa_guard_acquire>
   d66b4:	b120      	cbz	r0, d66c0 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d66b6:	f7fe fc3d 	bl	d4f34 <HAL_EEPROM_Init>
   d66ba:	4620      	mov	r0, r4
   d66bc:	f7fd fcf6 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d66c0:	4801      	ldr	r0, [pc, #4]	; (d66c8 <_Z21__fetch_global_EEPROMv+0x28>)
   d66c2:	bd10      	pop	{r4, pc}
   d66c4:	2003e7a0 	.word	0x2003e7a0
   d66c8:	2003e7a4 	.word	0x2003e7a4

000d66cc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d66cc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d66ce:	2300      	movs	r3, #0
   d66d0:	2520      	movs	r5, #32
   d66d2:	8043      	strh	r3, [r0, #2]
   d66d4:	2314      	movs	r3, #20
{
   d66d6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d66d8:	8003      	strh	r3, [r0, #0]
   d66da:	6085      	str	r5, [r0, #8]
   d66dc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66de:	4906      	ldr	r1, [pc, #24]	; (d66f8 <_Z17acquireWireBufferv+0x2c>)
   d66e0:	4628      	mov	r0, r5
   d66e2:	f000 f83a 	bl	d675a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66e6:	4904      	ldr	r1, [pc, #16]	; (d66f8 <_Z17acquireWireBufferv+0x2c>)
	};
   d66e8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66ea:	4628      	mov	r0, r5
   d66ec:	f000 f835 	bl	d675a <_ZnajRKSt9nothrow_t>
	};
   d66f0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d66f2:	4620      	mov	r0, r4
   d66f4:	bd38      	pop	{r3, r4, r5, pc}
   d66f6:	bf00      	nop
   d66f8:	000da190 	.word	0x000da190

000d66fc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d66fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66fe:	4d0f      	ldr	r5, [pc, #60]	; (d673c <_Z19__fetch_global_Wirev+0x40>)
   d6700:	7829      	ldrb	r1, [r5, #0]
   d6702:	f3bf 8f5b 	dmb	ish
   d6706:	f011 0401 	ands.w	r4, r1, #1
{
   d670a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d670c:	d113      	bne.n	d6736 <_Z19__fetch_global_Wirev+0x3a>
   d670e:	4628      	mov	r0, r5
   d6710:	f7fd fcc7 	bl	d40a2 <__cxa_guard_acquire>
   d6714:	b178      	cbz	r0, d6736 <_Z19__fetch_global_Wirev+0x3a>
   d6716:	a801      	add	r0, sp, #4
   d6718:	f7ff ffd8 	bl	d66cc <_Z17acquireWireBufferv>
   d671c:	aa01      	add	r2, sp, #4
   d671e:	4621      	mov	r1, r4
   d6720:	4807      	ldr	r0, [pc, #28]	; (d6740 <_Z19__fetch_global_Wirev+0x44>)
   d6722:	f7ff fa17 	bl	d5b54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6726:	4628      	mov	r0, r5
   d6728:	f7fd fcc0 	bl	d40ac <__cxa_guard_release>
   d672c:	4a05      	ldr	r2, [pc, #20]	; (d6744 <_Z19__fetch_global_Wirev+0x48>)
   d672e:	4906      	ldr	r1, [pc, #24]	; (d6748 <_Z19__fetch_global_Wirev+0x4c>)
   d6730:	4803      	ldr	r0, [pc, #12]	; (d6740 <_Z19__fetch_global_Wirev+0x44>)
   d6732:	f000 f80b 	bl	d674c <__aeabi_atexit>
	return wire;
}
   d6736:	4802      	ldr	r0, [pc, #8]	; (d6740 <_Z19__fetch_global_Wirev+0x44>)
   d6738:	b007      	add	sp, #28
   d673a:	bd30      	pop	{r4, r5, pc}
   d673c:	2003e7a8 	.word	0x2003e7a8
   d6740:	2003e7ac 	.word	0x2003e7ac
   d6744:	2003e4a8 	.word	0x2003e4a8
   d6748:	000d5afd 	.word	0x000d5afd

000d674c <__aeabi_atexit>:
   d674c:	460b      	mov	r3, r1
   d674e:	4601      	mov	r1, r0
   d6750:	4618      	mov	r0, r3
   d6752:	f000 be57 	b.w	d7404 <__cxa_atexit>

000d6756 <_ZdlPvj>:
   d6756:	f7fd bca2 	b.w	d409e <_ZdlPv>

000d675a <_ZnajRKSt9nothrow_t>:
   d675a:	f7fd bc9e 	b.w	d409a <_Znaj>

000d675e <_ZSt25__throw_bad_function_callv>:
   d675e:	b508      	push	{r3, lr}
   d6760:	f7fe fe5e 	bl	d5420 <abort>

000d6764 <__aeabi_drsub>:
   d6764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6768:	e002      	b.n	d6770 <__adddf3>
   d676a:	bf00      	nop

000d676c <__aeabi_dsub>:
   d676c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6770 <__adddf3>:
   d6770:	b530      	push	{r4, r5, lr}
   d6772:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6776:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d677a:	ea94 0f05 	teq	r4, r5
   d677e:	bf08      	it	eq
   d6780:	ea90 0f02 	teqeq	r0, r2
   d6784:	bf1f      	itttt	ne
   d6786:	ea54 0c00 	orrsne.w	ip, r4, r0
   d678a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d678e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6792:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6796:	f000 80e2 	beq.w	d695e <__adddf3+0x1ee>
   d679a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d679e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d67a2:	bfb8      	it	lt
   d67a4:	426d      	neglt	r5, r5
   d67a6:	dd0c      	ble.n	d67c2 <__adddf3+0x52>
   d67a8:	442c      	add	r4, r5
   d67aa:	ea80 0202 	eor.w	r2, r0, r2
   d67ae:	ea81 0303 	eor.w	r3, r1, r3
   d67b2:	ea82 0000 	eor.w	r0, r2, r0
   d67b6:	ea83 0101 	eor.w	r1, r3, r1
   d67ba:	ea80 0202 	eor.w	r2, r0, r2
   d67be:	ea81 0303 	eor.w	r3, r1, r3
   d67c2:	2d36      	cmp	r5, #54	; 0x36
   d67c4:	bf88      	it	hi
   d67c6:	bd30      	pophi	{r4, r5, pc}
   d67c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d67cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d67d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d67d8:	d002      	beq.n	d67e0 <__adddf3+0x70>
   d67da:	4240      	negs	r0, r0
   d67dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d67e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d67e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d67ec:	d002      	beq.n	d67f4 <__adddf3+0x84>
   d67ee:	4252      	negs	r2, r2
   d67f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d67f4:	ea94 0f05 	teq	r4, r5
   d67f8:	f000 80a7 	beq.w	d694a <__adddf3+0x1da>
   d67fc:	f1a4 0401 	sub.w	r4, r4, #1
   d6800:	f1d5 0e20 	rsbs	lr, r5, #32
   d6804:	db0d      	blt.n	d6822 <__adddf3+0xb2>
   d6806:	fa02 fc0e 	lsl.w	ip, r2, lr
   d680a:	fa22 f205 	lsr.w	r2, r2, r5
   d680e:	1880      	adds	r0, r0, r2
   d6810:	f141 0100 	adc.w	r1, r1, #0
   d6814:	fa03 f20e 	lsl.w	r2, r3, lr
   d6818:	1880      	adds	r0, r0, r2
   d681a:	fa43 f305 	asr.w	r3, r3, r5
   d681e:	4159      	adcs	r1, r3
   d6820:	e00e      	b.n	d6840 <__adddf3+0xd0>
   d6822:	f1a5 0520 	sub.w	r5, r5, #32
   d6826:	f10e 0e20 	add.w	lr, lr, #32
   d682a:	2a01      	cmp	r2, #1
   d682c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6830:	bf28      	it	cs
   d6832:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6836:	fa43 f305 	asr.w	r3, r3, r5
   d683a:	18c0      	adds	r0, r0, r3
   d683c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6840:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6844:	d507      	bpl.n	d6856 <__adddf3+0xe6>
   d6846:	f04f 0e00 	mov.w	lr, #0
   d684a:	f1dc 0c00 	rsbs	ip, ip, #0
   d684e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6852:	eb6e 0101 	sbc.w	r1, lr, r1
   d6856:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d685a:	d31b      	bcc.n	d6894 <__adddf3+0x124>
   d685c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6860:	d30c      	bcc.n	d687c <__adddf3+0x10c>
   d6862:	0849      	lsrs	r1, r1, #1
   d6864:	ea5f 0030 	movs.w	r0, r0, rrx
   d6868:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d686c:	f104 0401 	add.w	r4, r4, #1
   d6870:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6874:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6878:	f080 809a 	bcs.w	d69b0 <__adddf3+0x240>
   d687c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6880:	bf08      	it	eq
   d6882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6886:	f150 0000 	adcs.w	r0, r0, #0
   d688a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d688e:	ea41 0105 	orr.w	r1, r1, r5
   d6892:	bd30      	pop	{r4, r5, pc}
   d6894:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6898:	4140      	adcs	r0, r0
   d689a:	eb41 0101 	adc.w	r1, r1, r1
   d689e:	3c01      	subs	r4, #1
   d68a0:	bf28      	it	cs
   d68a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d68a6:	d2e9      	bcs.n	d687c <__adddf3+0x10c>
   d68a8:	f091 0f00 	teq	r1, #0
   d68ac:	bf04      	itt	eq
   d68ae:	4601      	moveq	r1, r0
   d68b0:	2000      	moveq	r0, #0
   d68b2:	fab1 f381 	clz	r3, r1
   d68b6:	bf08      	it	eq
   d68b8:	3320      	addeq	r3, #32
   d68ba:	f1a3 030b 	sub.w	r3, r3, #11
   d68be:	f1b3 0220 	subs.w	r2, r3, #32
   d68c2:	da0c      	bge.n	d68de <__adddf3+0x16e>
   d68c4:	320c      	adds	r2, #12
   d68c6:	dd08      	ble.n	d68da <__adddf3+0x16a>
   d68c8:	f102 0c14 	add.w	ip, r2, #20
   d68cc:	f1c2 020c 	rsb	r2, r2, #12
   d68d0:	fa01 f00c 	lsl.w	r0, r1, ip
   d68d4:	fa21 f102 	lsr.w	r1, r1, r2
   d68d8:	e00c      	b.n	d68f4 <__adddf3+0x184>
   d68da:	f102 0214 	add.w	r2, r2, #20
   d68de:	bfd8      	it	le
   d68e0:	f1c2 0c20 	rsble	ip, r2, #32
   d68e4:	fa01 f102 	lsl.w	r1, r1, r2
   d68e8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d68ec:	bfdc      	itt	le
   d68ee:	ea41 010c 	orrle.w	r1, r1, ip
   d68f2:	4090      	lslle	r0, r2
   d68f4:	1ae4      	subs	r4, r4, r3
   d68f6:	bfa2      	ittt	ge
   d68f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d68fc:	4329      	orrge	r1, r5
   d68fe:	bd30      	popge	{r4, r5, pc}
   d6900:	ea6f 0404 	mvn.w	r4, r4
   d6904:	3c1f      	subs	r4, #31
   d6906:	da1c      	bge.n	d6942 <__adddf3+0x1d2>
   d6908:	340c      	adds	r4, #12
   d690a:	dc0e      	bgt.n	d692a <__adddf3+0x1ba>
   d690c:	f104 0414 	add.w	r4, r4, #20
   d6910:	f1c4 0220 	rsb	r2, r4, #32
   d6914:	fa20 f004 	lsr.w	r0, r0, r4
   d6918:	fa01 f302 	lsl.w	r3, r1, r2
   d691c:	ea40 0003 	orr.w	r0, r0, r3
   d6920:	fa21 f304 	lsr.w	r3, r1, r4
   d6924:	ea45 0103 	orr.w	r1, r5, r3
   d6928:	bd30      	pop	{r4, r5, pc}
   d692a:	f1c4 040c 	rsb	r4, r4, #12
   d692e:	f1c4 0220 	rsb	r2, r4, #32
   d6932:	fa20 f002 	lsr.w	r0, r0, r2
   d6936:	fa01 f304 	lsl.w	r3, r1, r4
   d693a:	ea40 0003 	orr.w	r0, r0, r3
   d693e:	4629      	mov	r1, r5
   d6940:	bd30      	pop	{r4, r5, pc}
   d6942:	fa21 f004 	lsr.w	r0, r1, r4
   d6946:	4629      	mov	r1, r5
   d6948:	bd30      	pop	{r4, r5, pc}
   d694a:	f094 0f00 	teq	r4, #0
   d694e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6952:	bf06      	itte	eq
   d6954:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6958:	3401      	addeq	r4, #1
   d695a:	3d01      	subne	r5, #1
   d695c:	e74e      	b.n	d67fc <__adddf3+0x8c>
   d695e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6962:	bf18      	it	ne
   d6964:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6968:	d029      	beq.n	d69be <__adddf3+0x24e>
   d696a:	ea94 0f05 	teq	r4, r5
   d696e:	bf08      	it	eq
   d6970:	ea90 0f02 	teqeq	r0, r2
   d6974:	d005      	beq.n	d6982 <__adddf3+0x212>
   d6976:	ea54 0c00 	orrs.w	ip, r4, r0
   d697a:	bf04      	itt	eq
   d697c:	4619      	moveq	r1, r3
   d697e:	4610      	moveq	r0, r2
   d6980:	bd30      	pop	{r4, r5, pc}
   d6982:	ea91 0f03 	teq	r1, r3
   d6986:	bf1e      	ittt	ne
   d6988:	2100      	movne	r1, #0
   d698a:	2000      	movne	r0, #0
   d698c:	bd30      	popne	{r4, r5, pc}
   d698e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6992:	d105      	bne.n	d69a0 <__adddf3+0x230>
   d6994:	0040      	lsls	r0, r0, #1
   d6996:	4149      	adcs	r1, r1
   d6998:	bf28      	it	cs
   d699a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d699e:	bd30      	pop	{r4, r5, pc}
   d69a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d69a4:	bf3c      	itt	cc
   d69a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d69aa:	bd30      	popcc	{r4, r5, pc}
   d69ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d69b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d69b8:	f04f 0000 	mov.w	r0, #0
   d69bc:	bd30      	pop	{r4, r5, pc}
   d69be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69c2:	bf1a      	itte	ne
   d69c4:	4619      	movne	r1, r3
   d69c6:	4610      	movne	r0, r2
   d69c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d69cc:	bf1c      	itt	ne
   d69ce:	460b      	movne	r3, r1
   d69d0:	4602      	movne	r2, r0
   d69d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d69d6:	bf06      	itte	eq
   d69d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d69dc:	ea91 0f03 	teqeq	r1, r3
   d69e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d69e4:	bd30      	pop	{r4, r5, pc}
   d69e6:	bf00      	nop

000d69e8 <__aeabi_ui2d>:
   d69e8:	f090 0f00 	teq	r0, #0
   d69ec:	bf04      	itt	eq
   d69ee:	2100      	moveq	r1, #0
   d69f0:	4770      	bxeq	lr
   d69f2:	b530      	push	{r4, r5, lr}
   d69f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69fc:	f04f 0500 	mov.w	r5, #0
   d6a00:	f04f 0100 	mov.w	r1, #0
   d6a04:	e750      	b.n	d68a8 <__adddf3+0x138>
   d6a06:	bf00      	nop

000d6a08 <__aeabi_i2d>:
   d6a08:	f090 0f00 	teq	r0, #0
   d6a0c:	bf04      	itt	eq
   d6a0e:	2100      	moveq	r1, #0
   d6a10:	4770      	bxeq	lr
   d6a12:	b530      	push	{r4, r5, lr}
   d6a14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a20:	bf48      	it	mi
   d6a22:	4240      	negmi	r0, r0
   d6a24:	f04f 0100 	mov.w	r1, #0
   d6a28:	e73e      	b.n	d68a8 <__adddf3+0x138>
   d6a2a:	bf00      	nop

000d6a2c <__aeabi_f2d>:
   d6a2c:	0042      	lsls	r2, r0, #1
   d6a2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6a32:	ea4f 0131 	mov.w	r1, r1, rrx
   d6a36:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6a3a:	bf1f      	itttt	ne
   d6a3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6a40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6a48:	4770      	bxne	lr
   d6a4a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6a4e:	bf08      	it	eq
   d6a50:	4770      	bxeq	lr
   d6a52:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6a56:	bf04      	itt	eq
   d6a58:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6a5c:	4770      	bxeq	lr
   d6a5e:	b530      	push	{r4, r5, lr}
   d6a60:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6a64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a6c:	e71c      	b.n	d68a8 <__adddf3+0x138>
   d6a6e:	bf00      	nop

000d6a70 <__aeabi_ul2d>:
   d6a70:	ea50 0201 	orrs.w	r2, r0, r1
   d6a74:	bf08      	it	eq
   d6a76:	4770      	bxeq	lr
   d6a78:	b530      	push	{r4, r5, lr}
   d6a7a:	f04f 0500 	mov.w	r5, #0
   d6a7e:	e00a      	b.n	d6a96 <__aeabi_l2d+0x16>

000d6a80 <__aeabi_l2d>:
   d6a80:	ea50 0201 	orrs.w	r2, r0, r1
   d6a84:	bf08      	it	eq
   d6a86:	4770      	bxeq	lr
   d6a88:	b530      	push	{r4, r5, lr}
   d6a8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6a8e:	d502      	bpl.n	d6a96 <__aeabi_l2d+0x16>
   d6a90:	4240      	negs	r0, r0
   d6a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a96:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6aa2:	f43f aed8 	beq.w	d6856 <__adddf3+0xe6>
   d6aa6:	f04f 0203 	mov.w	r2, #3
   d6aaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6aae:	bf18      	it	ne
   d6ab0:	3203      	addne	r2, #3
   d6ab2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6ab6:	bf18      	it	ne
   d6ab8:	3203      	addne	r2, #3
   d6aba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6abe:	f1c2 0320 	rsb	r3, r2, #32
   d6ac2:	fa00 fc03 	lsl.w	ip, r0, r3
   d6ac6:	fa20 f002 	lsr.w	r0, r0, r2
   d6aca:	fa01 fe03 	lsl.w	lr, r1, r3
   d6ace:	ea40 000e 	orr.w	r0, r0, lr
   d6ad2:	fa21 f102 	lsr.w	r1, r1, r2
   d6ad6:	4414      	add	r4, r2
   d6ad8:	e6bd      	b.n	d6856 <__adddf3+0xe6>
   d6ada:	bf00      	nop

000d6adc <__aeabi_dmul>:
   d6adc:	b570      	push	{r4, r5, r6, lr}
   d6ade:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6aea:	bf1d      	ittte	ne
   d6aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6af0:	ea94 0f0c 	teqne	r4, ip
   d6af4:	ea95 0f0c 	teqne	r5, ip
   d6af8:	f000 f8de 	bleq	d6cb8 <__aeabi_dmul+0x1dc>
   d6afc:	442c      	add	r4, r5
   d6afe:	ea81 0603 	eor.w	r6, r1, r3
   d6b02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6b06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6b0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6b0e:	bf18      	it	ne
   d6b10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6b1c:	d038      	beq.n	d6b90 <__aeabi_dmul+0xb4>
   d6b1e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6b22:	f04f 0500 	mov.w	r5, #0
   d6b26:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6b2e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6b32:	f04f 0600 	mov.w	r6, #0
   d6b36:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6b3a:	f09c 0f00 	teq	ip, #0
   d6b3e:	bf18      	it	ne
   d6b40:	f04e 0e01 	orrne.w	lr, lr, #1
   d6b44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6b48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6b50:	d204      	bcs.n	d6b5c <__aeabi_dmul+0x80>
   d6b52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6b56:	416d      	adcs	r5, r5
   d6b58:	eb46 0606 	adc.w	r6, r6, r6
   d6b5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6b60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6b64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6b68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6b6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6b70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6b74:	bf88      	it	hi
   d6b76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6b7a:	d81e      	bhi.n	d6bba <__aeabi_dmul+0xde>
   d6b7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6b80:	bf08      	it	eq
   d6b82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6b86:	f150 0000 	adcs.w	r0, r0, #0
   d6b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b8e:	bd70      	pop	{r4, r5, r6, pc}
   d6b90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6b94:	ea46 0101 	orr.w	r1, r6, r1
   d6b98:	ea40 0002 	orr.w	r0, r0, r2
   d6b9c:	ea81 0103 	eor.w	r1, r1, r3
   d6ba0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6ba4:	bfc2      	ittt	gt
   d6ba6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6baa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6bae:	bd70      	popgt	{r4, r5, r6, pc}
   d6bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6bb4:	f04f 0e00 	mov.w	lr, #0
   d6bb8:	3c01      	subs	r4, #1
   d6bba:	f300 80ab 	bgt.w	d6d14 <__aeabi_dmul+0x238>
   d6bbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6bc2:	bfde      	ittt	le
   d6bc4:	2000      	movle	r0, #0
   d6bc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6bca:	bd70      	pople	{r4, r5, r6, pc}
   d6bcc:	f1c4 0400 	rsb	r4, r4, #0
   d6bd0:	3c20      	subs	r4, #32
   d6bd2:	da35      	bge.n	d6c40 <__aeabi_dmul+0x164>
   d6bd4:	340c      	adds	r4, #12
   d6bd6:	dc1b      	bgt.n	d6c10 <__aeabi_dmul+0x134>
   d6bd8:	f104 0414 	add.w	r4, r4, #20
   d6bdc:	f1c4 0520 	rsb	r5, r4, #32
   d6be0:	fa00 f305 	lsl.w	r3, r0, r5
   d6be4:	fa20 f004 	lsr.w	r0, r0, r4
   d6be8:	fa01 f205 	lsl.w	r2, r1, r5
   d6bec:	ea40 0002 	orr.w	r0, r0, r2
   d6bf0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6bf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6bf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6bfc:	fa21 f604 	lsr.w	r6, r1, r4
   d6c00:	eb42 0106 	adc.w	r1, r2, r6
   d6c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c08:	bf08      	it	eq
   d6c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c0e:	bd70      	pop	{r4, r5, r6, pc}
   d6c10:	f1c4 040c 	rsb	r4, r4, #12
   d6c14:	f1c4 0520 	rsb	r5, r4, #32
   d6c18:	fa00 f304 	lsl.w	r3, r0, r4
   d6c1c:	fa20 f005 	lsr.w	r0, r0, r5
   d6c20:	fa01 f204 	lsl.w	r2, r1, r4
   d6c24:	ea40 0002 	orr.w	r0, r0, r2
   d6c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c30:	f141 0100 	adc.w	r1, r1, #0
   d6c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c38:	bf08      	it	eq
   d6c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c3e:	bd70      	pop	{r4, r5, r6, pc}
   d6c40:	f1c4 0520 	rsb	r5, r4, #32
   d6c44:	fa00 f205 	lsl.w	r2, r0, r5
   d6c48:	ea4e 0e02 	orr.w	lr, lr, r2
   d6c4c:	fa20 f304 	lsr.w	r3, r0, r4
   d6c50:	fa01 f205 	lsl.w	r2, r1, r5
   d6c54:	ea43 0302 	orr.w	r3, r3, r2
   d6c58:	fa21 f004 	lsr.w	r0, r1, r4
   d6c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c60:	fa21 f204 	lsr.w	r2, r1, r4
   d6c64:	ea20 0002 	bic.w	r0, r0, r2
   d6c68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c70:	bf08      	it	eq
   d6c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c76:	bd70      	pop	{r4, r5, r6, pc}
   d6c78:	f094 0f00 	teq	r4, #0
   d6c7c:	d10f      	bne.n	d6c9e <__aeabi_dmul+0x1c2>
   d6c7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6c82:	0040      	lsls	r0, r0, #1
   d6c84:	eb41 0101 	adc.w	r1, r1, r1
   d6c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c8c:	bf08      	it	eq
   d6c8e:	3c01      	subeq	r4, #1
   d6c90:	d0f7      	beq.n	d6c82 <__aeabi_dmul+0x1a6>
   d6c92:	ea41 0106 	orr.w	r1, r1, r6
   d6c96:	f095 0f00 	teq	r5, #0
   d6c9a:	bf18      	it	ne
   d6c9c:	4770      	bxne	lr
   d6c9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6ca2:	0052      	lsls	r2, r2, #1
   d6ca4:	eb43 0303 	adc.w	r3, r3, r3
   d6ca8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6cac:	bf08      	it	eq
   d6cae:	3d01      	subeq	r5, #1
   d6cb0:	d0f7      	beq.n	d6ca2 <__aeabi_dmul+0x1c6>
   d6cb2:	ea43 0306 	orr.w	r3, r3, r6
   d6cb6:	4770      	bx	lr
   d6cb8:	ea94 0f0c 	teq	r4, ip
   d6cbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6cc0:	bf18      	it	ne
   d6cc2:	ea95 0f0c 	teqne	r5, ip
   d6cc6:	d00c      	beq.n	d6ce2 <__aeabi_dmul+0x206>
   d6cc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ccc:	bf18      	it	ne
   d6cce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cd2:	d1d1      	bne.n	d6c78 <__aeabi_dmul+0x19c>
   d6cd4:	ea81 0103 	eor.w	r1, r1, r3
   d6cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cdc:	f04f 0000 	mov.w	r0, #0
   d6ce0:	bd70      	pop	{r4, r5, r6, pc}
   d6ce2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ce6:	bf06      	itte	eq
   d6ce8:	4610      	moveq	r0, r2
   d6cea:	4619      	moveq	r1, r3
   d6cec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cf0:	d019      	beq.n	d6d26 <__aeabi_dmul+0x24a>
   d6cf2:	ea94 0f0c 	teq	r4, ip
   d6cf6:	d102      	bne.n	d6cfe <__aeabi_dmul+0x222>
   d6cf8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6cfc:	d113      	bne.n	d6d26 <__aeabi_dmul+0x24a>
   d6cfe:	ea95 0f0c 	teq	r5, ip
   d6d02:	d105      	bne.n	d6d10 <__aeabi_dmul+0x234>
   d6d04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6d08:	bf1c      	itt	ne
   d6d0a:	4610      	movne	r0, r2
   d6d0c:	4619      	movne	r1, r3
   d6d0e:	d10a      	bne.n	d6d26 <__aeabi_dmul+0x24a>
   d6d10:	ea81 0103 	eor.w	r1, r1, r3
   d6d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d20:	f04f 0000 	mov.w	r0, #0
   d6d24:	bd70      	pop	{r4, r5, r6, pc}
   d6d26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6d2e:	bd70      	pop	{r4, r5, r6, pc}

000d6d30 <__aeabi_ddiv>:
   d6d30:	b570      	push	{r4, r5, r6, lr}
   d6d32:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d3e:	bf1d      	ittte	ne
   d6d40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d44:	ea94 0f0c 	teqne	r4, ip
   d6d48:	ea95 0f0c 	teqne	r5, ip
   d6d4c:	f000 f8a7 	bleq	d6e9e <__aeabi_ddiv+0x16e>
   d6d50:	eba4 0405 	sub.w	r4, r4, r5
   d6d54:	ea81 0e03 	eor.w	lr, r1, r3
   d6d58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6d60:	f000 8088 	beq.w	d6e74 <__aeabi_ddiv+0x144>
   d6d64:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6d68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6d6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6d70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6d74:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6d78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6d7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6d80:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6d84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6d88:	429d      	cmp	r5, r3
   d6d8a:	bf08      	it	eq
   d6d8c:	4296      	cmpeq	r6, r2
   d6d8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6d92:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6d96:	d202      	bcs.n	d6d9e <__aeabi_ddiv+0x6e>
   d6d98:	085b      	lsrs	r3, r3, #1
   d6d9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d9e:	1ab6      	subs	r6, r6, r2
   d6da0:	eb65 0503 	sbc.w	r5, r5, r3
   d6da4:	085b      	lsrs	r3, r3, #1
   d6da6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6daa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6dae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6db2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6db6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dba:	bf22      	ittt	cs
   d6dbc:	1ab6      	subcs	r6, r6, r2
   d6dbe:	4675      	movcs	r5, lr
   d6dc0:	ea40 000c 	orrcs.w	r0, r0, ip
   d6dc4:	085b      	lsrs	r3, r3, #1
   d6dc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dca:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dd2:	bf22      	ittt	cs
   d6dd4:	1ab6      	subcs	r6, r6, r2
   d6dd6:	4675      	movcs	r5, lr
   d6dd8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6ddc:	085b      	lsrs	r3, r3, #1
   d6dde:	ea4f 0232 	mov.w	r2, r2, rrx
   d6de2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6de6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dea:	bf22      	ittt	cs
   d6dec:	1ab6      	subcs	r6, r6, r2
   d6dee:	4675      	movcs	r5, lr
   d6df0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6df4:	085b      	lsrs	r3, r3, #1
   d6df6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dfa:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e02:	bf22      	ittt	cs
   d6e04:	1ab6      	subcs	r6, r6, r2
   d6e06:	4675      	movcs	r5, lr
   d6e08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6e0c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6e10:	d018      	beq.n	d6e44 <__aeabi_ddiv+0x114>
   d6e12:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6e16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6e1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6e1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6e22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6e2e:	d1c0      	bne.n	d6db2 <__aeabi_ddiv+0x82>
   d6e30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e34:	d10b      	bne.n	d6e4e <__aeabi_ddiv+0x11e>
   d6e36:	ea41 0100 	orr.w	r1, r1, r0
   d6e3a:	f04f 0000 	mov.w	r0, #0
   d6e3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6e42:	e7b6      	b.n	d6db2 <__aeabi_ddiv+0x82>
   d6e44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e48:	bf04      	itt	eq
   d6e4a:	4301      	orreq	r1, r0
   d6e4c:	2000      	moveq	r0, #0
   d6e4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e52:	bf88      	it	hi
   d6e54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e58:	f63f aeaf 	bhi.w	d6bba <__aeabi_dmul+0xde>
   d6e5c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6e60:	bf04      	itt	eq
   d6e62:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6e66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6e6a:	f150 0000 	adcs.w	r0, r0, #0
   d6e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e72:	bd70      	pop	{r4, r5, r6, pc}
   d6e74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6e78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6e7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6e80:	bfc2      	ittt	gt
   d6e82:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e8a:	bd70      	popgt	{r4, r5, r6, pc}
   d6e8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e90:	f04f 0e00 	mov.w	lr, #0
   d6e94:	3c01      	subs	r4, #1
   d6e96:	e690      	b.n	d6bba <__aeabi_dmul+0xde>
   d6e98:	ea45 0e06 	orr.w	lr, r5, r6
   d6e9c:	e68d      	b.n	d6bba <__aeabi_dmul+0xde>
   d6e9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ea2:	ea94 0f0c 	teq	r4, ip
   d6ea6:	bf08      	it	eq
   d6ea8:	ea95 0f0c 	teqeq	r5, ip
   d6eac:	f43f af3b 	beq.w	d6d26 <__aeabi_dmul+0x24a>
   d6eb0:	ea94 0f0c 	teq	r4, ip
   d6eb4:	d10a      	bne.n	d6ecc <__aeabi_ddiv+0x19c>
   d6eb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6eba:	f47f af34 	bne.w	d6d26 <__aeabi_dmul+0x24a>
   d6ebe:	ea95 0f0c 	teq	r5, ip
   d6ec2:	f47f af25 	bne.w	d6d10 <__aeabi_dmul+0x234>
   d6ec6:	4610      	mov	r0, r2
   d6ec8:	4619      	mov	r1, r3
   d6eca:	e72c      	b.n	d6d26 <__aeabi_dmul+0x24a>
   d6ecc:	ea95 0f0c 	teq	r5, ip
   d6ed0:	d106      	bne.n	d6ee0 <__aeabi_ddiv+0x1b0>
   d6ed2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6ed6:	f43f aefd 	beq.w	d6cd4 <__aeabi_dmul+0x1f8>
   d6eda:	4610      	mov	r0, r2
   d6edc:	4619      	mov	r1, r3
   d6ede:	e722      	b.n	d6d26 <__aeabi_dmul+0x24a>
   d6ee0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ee4:	bf18      	it	ne
   d6ee6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6eea:	f47f aec5 	bne.w	d6c78 <__aeabi_dmul+0x19c>
   d6eee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6ef2:	f47f af0d 	bne.w	d6d10 <__aeabi_dmul+0x234>
   d6ef6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6efa:	f47f aeeb 	bne.w	d6cd4 <__aeabi_dmul+0x1f8>
   d6efe:	e712      	b.n	d6d26 <__aeabi_dmul+0x24a>

000d6f00 <__gedf2>:
   d6f00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6f04:	e006      	b.n	d6f14 <__cmpdf2+0x4>
   d6f06:	bf00      	nop

000d6f08 <__ledf2>:
   d6f08:	f04f 0c01 	mov.w	ip, #1
   d6f0c:	e002      	b.n	d6f14 <__cmpdf2+0x4>
   d6f0e:	bf00      	nop

000d6f10 <__cmpdf2>:
   d6f10:	f04f 0c01 	mov.w	ip, #1
   d6f14:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f24:	bf18      	it	ne
   d6f26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f2a:	d01b      	beq.n	d6f64 <__cmpdf2+0x54>
   d6f2c:	b001      	add	sp, #4
   d6f2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6f32:	bf0c      	ite	eq
   d6f34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6f38:	ea91 0f03 	teqne	r1, r3
   d6f3c:	bf02      	ittt	eq
   d6f3e:	ea90 0f02 	teqeq	r0, r2
   d6f42:	2000      	moveq	r0, #0
   d6f44:	4770      	bxeq	lr
   d6f46:	f110 0f00 	cmn.w	r0, #0
   d6f4a:	ea91 0f03 	teq	r1, r3
   d6f4e:	bf58      	it	pl
   d6f50:	4299      	cmppl	r1, r3
   d6f52:	bf08      	it	eq
   d6f54:	4290      	cmpeq	r0, r2
   d6f56:	bf2c      	ite	cs
   d6f58:	17d8      	asrcs	r0, r3, #31
   d6f5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6f5e:	f040 0001 	orr.w	r0, r0, #1
   d6f62:	4770      	bx	lr
   d6f64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f6c:	d102      	bne.n	d6f74 <__cmpdf2+0x64>
   d6f6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6f72:	d107      	bne.n	d6f84 <__cmpdf2+0x74>
   d6f74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f7c:	d1d6      	bne.n	d6f2c <__cmpdf2+0x1c>
   d6f7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6f82:	d0d3      	beq.n	d6f2c <__cmpdf2+0x1c>
   d6f84:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6f88:	4770      	bx	lr
   d6f8a:	bf00      	nop

000d6f8c <__aeabi_cdrcmple>:
   d6f8c:	4684      	mov	ip, r0
   d6f8e:	4610      	mov	r0, r2
   d6f90:	4662      	mov	r2, ip
   d6f92:	468c      	mov	ip, r1
   d6f94:	4619      	mov	r1, r3
   d6f96:	4663      	mov	r3, ip
   d6f98:	e000      	b.n	d6f9c <__aeabi_cdcmpeq>
   d6f9a:	bf00      	nop

000d6f9c <__aeabi_cdcmpeq>:
   d6f9c:	b501      	push	{r0, lr}
   d6f9e:	f7ff ffb7 	bl	d6f10 <__cmpdf2>
   d6fa2:	2800      	cmp	r0, #0
   d6fa4:	bf48      	it	mi
   d6fa6:	f110 0f00 	cmnmi.w	r0, #0
   d6faa:	bd01      	pop	{r0, pc}

000d6fac <__aeabi_dcmpeq>:
   d6fac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fb0:	f7ff fff4 	bl	d6f9c <__aeabi_cdcmpeq>
   d6fb4:	bf0c      	ite	eq
   d6fb6:	2001      	moveq	r0, #1
   d6fb8:	2000      	movne	r0, #0
   d6fba:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fbe:	bf00      	nop

000d6fc0 <__aeabi_dcmplt>:
   d6fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fc4:	f7ff ffea 	bl	d6f9c <__aeabi_cdcmpeq>
   d6fc8:	bf34      	ite	cc
   d6fca:	2001      	movcc	r0, #1
   d6fcc:	2000      	movcs	r0, #0
   d6fce:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fd2:	bf00      	nop

000d6fd4 <__aeabi_dcmple>:
   d6fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fd8:	f7ff ffe0 	bl	d6f9c <__aeabi_cdcmpeq>
   d6fdc:	bf94      	ite	ls
   d6fde:	2001      	movls	r0, #1
   d6fe0:	2000      	movhi	r0, #0
   d6fe2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fe6:	bf00      	nop

000d6fe8 <__aeabi_dcmpge>:
   d6fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fec:	f7ff ffce 	bl	d6f8c <__aeabi_cdrcmple>
   d6ff0:	bf94      	ite	ls
   d6ff2:	2001      	movls	r0, #1
   d6ff4:	2000      	movhi	r0, #0
   d6ff6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ffa:	bf00      	nop

000d6ffc <__aeabi_dcmpgt>:
   d6ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7000:	f7ff ffc4 	bl	d6f8c <__aeabi_cdrcmple>
   d7004:	bf34      	ite	cc
   d7006:	2001      	movcc	r0, #1
   d7008:	2000      	movcs	r0, #0
   d700a:	f85d fb08 	ldr.w	pc, [sp], #8
   d700e:	bf00      	nop

000d7010 <__aeabi_d2uiz>:
   d7010:	004a      	lsls	r2, r1, #1
   d7012:	d211      	bcs.n	d7038 <__aeabi_d2uiz+0x28>
   d7014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7018:	d211      	bcs.n	d703e <__aeabi_d2uiz+0x2e>
   d701a:	d50d      	bpl.n	d7038 <__aeabi_d2uiz+0x28>
   d701c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7024:	d40e      	bmi.n	d7044 <__aeabi_d2uiz+0x34>
   d7026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d702a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d702e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7032:	fa23 f002 	lsr.w	r0, r3, r2
   d7036:	4770      	bx	lr
   d7038:	f04f 0000 	mov.w	r0, #0
   d703c:	4770      	bx	lr
   d703e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7042:	d102      	bne.n	d704a <__aeabi_d2uiz+0x3a>
   d7044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7048:	4770      	bx	lr
   d704a:	f04f 0000 	mov.w	r0, #0
   d704e:	4770      	bx	lr

000d7050 <__aeabi_d2f>:
   d7050:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7054:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7058:	bf24      	itt	cs
   d705a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d705e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7062:	d90d      	bls.n	d7080 <__aeabi_d2f+0x30>
   d7064:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7068:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d706c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7074:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7078:	bf08      	it	eq
   d707a:	f020 0001 	biceq.w	r0, r0, #1
   d707e:	4770      	bx	lr
   d7080:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7084:	d121      	bne.n	d70ca <__aeabi_d2f+0x7a>
   d7086:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d708a:	bfbc      	itt	lt
   d708c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7090:	4770      	bxlt	lr
   d7092:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7096:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d709a:	f1c2 0218 	rsb	r2, r2, #24
   d709e:	f1c2 0c20 	rsb	ip, r2, #32
   d70a2:	fa10 f30c 	lsls.w	r3, r0, ip
   d70a6:	fa20 f002 	lsr.w	r0, r0, r2
   d70aa:	bf18      	it	ne
   d70ac:	f040 0001 	orrne.w	r0, r0, #1
   d70b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d70b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d70b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d70bc:	ea40 000c 	orr.w	r0, r0, ip
   d70c0:	fa23 f302 	lsr.w	r3, r3, r2
   d70c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d70c8:	e7cc      	b.n	d7064 <__aeabi_d2f+0x14>
   d70ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d70ce:	d107      	bne.n	d70e0 <__aeabi_d2f+0x90>
   d70d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d70d4:	bf1e      	ittt	ne
   d70d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d70da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d70de:	4770      	bxne	lr
   d70e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d70e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d70e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d70ec:	4770      	bx	lr
   d70ee:	bf00      	nop

000d70f0 <__aeabi_d2ulz>:
   d70f0:	b5d0      	push	{r4, r6, r7, lr}
   d70f2:	4b0c      	ldr	r3, [pc, #48]	; (d7124 <__aeabi_d2ulz+0x34>)
   d70f4:	2200      	movs	r2, #0
   d70f6:	4606      	mov	r6, r0
   d70f8:	460f      	mov	r7, r1
   d70fa:	f7ff fcef 	bl	d6adc <__aeabi_dmul>
   d70fe:	f7ff ff87 	bl	d7010 <__aeabi_d2uiz>
   d7102:	4604      	mov	r4, r0
   d7104:	f7ff fc70 	bl	d69e8 <__aeabi_ui2d>
   d7108:	4b07      	ldr	r3, [pc, #28]	; (d7128 <__aeabi_d2ulz+0x38>)
   d710a:	2200      	movs	r2, #0
   d710c:	f7ff fce6 	bl	d6adc <__aeabi_dmul>
   d7110:	4602      	mov	r2, r0
   d7112:	460b      	mov	r3, r1
   d7114:	4630      	mov	r0, r6
   d7116:	4639      	mov	r1, r7
   d7118:	f7ff fb28 	bl	d676c <__aeabi_dsub>
   d711c:	f7ff ff78 	bl	d7010 <__aeabi_d2uiz>
   d7120:	4621      	mov	r1, r4
   d7122:	bdd0      	pop	{r4, r6, r7, pc}
   d7124:	3df00000 	.word	0x3df00000
   d7128:	41f00000 	.word	0x41f00000

000d712c <__udivmoddi4>:
   d712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7130:	9d08      	ldr	r5, [sp, #32]
   d7132:	4604      	mov	r4, r0
   d7134:	468c      	mov	ip, r1
   d7136:	2b00      	cmp	r3, #0
   d7138:	f040 8083 	bne.w	d7242 <__udivmoddi4+0x116>
   d713c:	428a      	cmp	r2, r1
   d713e:	4617      	mov	r7, r2
   d7140:	d947      	bls.n	d71d2 <__udivmoddi4+0xa6>
   d7142:	fab2 f282 	clz	r2, r2
   d7146:	b142      	cbz	r2, d715a <__udivmoddi4+0x2e>
   d7148:	f1c2 0020 	rsb	r0, r2, #32
   d714c:	fa24 f000 	lsr.w	r0, r4, r0
   d7150:	4091      	lsls	r1, r2
   d7152:	4097      	lsls	r7, r2
   d7154:	ea40 0c01 	orr.w	ip, r0, r1
   d7158:	4094      	lsls	r4, r2
   d715a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d715e:	0c23      	lsrs	r3, r4, #16
   d7160:	fbbc f6f8 	udiv	r6, ip, r8
   d7164:	fa1f fe87 	uxth.w	lr, r7
   d7168:	fb08 c116 	mls	r1, r8, r6, ip
   d716c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7170:	fb06 f10e 	mul.w	r1, r6, lr
   d7174:	4299      	cmp	r1, r3
   d7176:	d909      	bls.n	d718c <__udivmoddi4+0x60>
   d7178:	18fb      	adds	r3, r7, r3
   d717a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d717e:	f080 8119 	bcs.w	d73b4 <__udivmoddi4+0x288>
   d7182:	4299      	cmp	r1, r3
   d7184:	f240 8116 	bls.w	d73b4 <__udivmoddi4+0x288>
   d7188:	3e02      	subs	r6, #2
   d718a:	443b      	add	r3, r7
   d718c:	1a5b      	subs	r3, r3, r1
   d718e:	b2a4      	uxth	r4, r4
   d7190:	fbb3 f0f8 	udiv	r0, r3, r8
   d7194:	fb08 3310 	mls	r3, r8, r0, r3
   d7198:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d719c:	fb00 fe0e 	mul.w	lr, r0, lr
   d71a0:	45a6      	cmp	lr, r4
   d71a2:	d909      	bls.n	d71b8 <__udivmoddi4+0x8c>
   d71a4:	193c      	adds	r4, r7, r4
   d71a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d71aa:	f080 8105 	bcs.w	d73b8 <__udivmoddi4+0x28c>
   d71ae:	45a6      	cmp	lr, r4
   d71b0:	f240 8102 	bls.w	d73b8 <__udivmoddi4+0x28c>
   d71b4:	3802      	subs	r0, #2
   d71b6:	443c      	add	r4, r7
   d71b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d71bc:	eba4 040e 	sub.w	r4, r4, lr
   d71c0:	2600      	movs	r6, #0
   d71c2:	b11d      	cbz	r5, d71cc <__udivmoddi4+0xa0>
   d71c4:	40d4      	lsrs	r4, r2
   d71c6:	2300      	movs	r3, #0
   d71c8:	e9c5 4300 	strd	r4, r3, [r5]
   d71cc:	4631      	mov	r1, r6
   d71ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71d2:	b902      	cbnz	r2, d71d6 <__udivmoddi4+0xaa>
   d71d4:	deff      	udf	#255	; 0xff
   d71d6:	fab2 f282 	clz	r2, r2
   d71da:	2a00      	cmp	r2, #0
   d71dc:	d150      	bne.n	d7280 <__udivmoddi4+0x154>
   d71de:	1bcb      	subs	r3, r1, r7
   d71e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d71e4:	fa1f f887 	uxth.w	r8, r7
   d71e8:	2601      	movs	r6, #1
   d71ea:	fbb3 fcfe 	udiv	ip, r3, lr
   d71ee:	0c21      	lsrs	r1, r4, #16
   d71f0:	fb0e 331c 	mls	r3, lr, ip, r3
   d71f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d71f8:	fb08 f30c 	mul.w	r3, r8, ip
   d71fc:	428b      	cmp	r3, r1
   d71fe:	d907      	bls.n	d7210 <__udivmoddi4+0xe4>
   d7200:	1879      	adds	r1, r7, r1
   d7202:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d7206:	d202      	bcs.n	d720e <__udivmoddi4+0xe2>
   d7208:	428b      	cmp	r3, r1
   d720a:	f200 80e9 	bhi.w	d73e0 <__udivmoddi4+0x2b4>
   d720e:	4684      	mov	ip, r0
   d7210:	1ac9      	subs	r1, r1, r3
   d7212:	b2a3      	uxth	r3, r4
   d7214:	fbb1 f0fe 	udiv	r0, r1, lr
   d7218:	fb0e 1110 	mls	r1, lr, r0, r1
   d721c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7220:	fb08 f800 	mul.w	r8, r8, r0
   d7224:	45a0      	cmp	r8, r4
   d7226:	d907      	bls.n	d7238 <__udivmoddi4+0x10c>
   d7228:	193c      	adds	r4, r7, r4
   d722a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d722e:	d202      	bcs.n	d7236 <__udivmoddi4+0x10a>
   d7230:	45a0      	cmp	r8, r4
   d7232:	f200 80d9 	bhi.w	d73e8 <__udivmoddi4+0x2bc>
   d7236:	4618      	mov	r0, r3
   d7238:	eba4 0408 	sub.w	r4, r4, r8
   d723c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7240:	e7bf      	b.n	d71c2 <__udivmoddi4+0x96>
   d7242:	428b      	cmp	r3, r1
   d7244:	d909      	bls.n	d725a <__udivmoddi4+0x12e>
   d7246:	2d00      	cmp	r5, #0
   d7248:	f000 80b1 	beq.w	d73ae <__udivmoddi4+0x282>
   d724c:	2600      	movs	r6, #0
   d724e:	e9c5 0100 	strd	r0, r1, [r5]
   d7252:	4630      	mov	r0, r6
   d7254:	4631      	mov	r1, r6
   d7256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d725a:	fab3 f683 	clz	r6, r3
   d725e:	2e00      	cmp	r6, #0
   d7260:	d14a      	bne.n	d72f8 <__udivmoddi4+0x1cc>
   d7262:	428b      	cmp	r3, r1
   d7264:	d302      	bcc.n	d726c <__udivmoddi4+0x140>
   d7266:	4282      	cmp	r2, r0
   d7268:	f200 80b8 	bhi.w	d73dc <__udivmoddi4+0x2b0>
   d726c:	1a84      	subs	r4, r0, r2
   d726e:	eb61 0103 	sbc.w	r1, r1, r3
   d7272:	2001      	movs	r0, #1
   d7274:	468c      	mov	ip, r1
   d7276:	2d00      	cmp	r5, #0
   d7278:	d0a8      	beq.n	d71cc <__udivmoddi4+0xa0>
   d727a:	e9c5 4c00 	strd	r4, ip, [r5]
   d727e:	e7a5      	b.n	d71cc <__udivmoddi4+0xa0>
   d7280:	f1c2 0320 	rsb	r3, r2, #32
   d7284:	fa20 f603 	lsr.w	r6, r0, r3
   d7288:	4097      	lsls	r7, r2
   d728a:	fa01 f002 	lsl.w	r0, r1, r2
   d728e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7292:	40d9      	lsrs	r1, r3
   d7294:	4330      	orrs	r0, r6
   d7296:	0c03      	lsrs	r3, r0, #16
   d7298:	fbb1 f6fe 	udiv	r6, r1, lr
   d729c:	fa1f f887 	uxth.w	r8, r7
   d72a0:	fb0e 1116 	mls	r1, lr, r6, r1
   d72a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d72a8:	fb06 f108 	mul.w	r1, r6, r8
   d72ac:	4299      	cmp	r1, r3
   d72ae:	fa04 f402 	lsl.w	r4, r4, r2
   d72b2:	d909      	bls.n	d72c8 <__udivmoddi4+0x19c>
   d72b4:	18fb      	adds	r3, r7, r3
   d72b6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d72ba:	f080 808d 	bcs.w	d73d8 <__udivmoddi4+0x2ac>
   d72be:	4299      	cmp	r1, r3
   d72c0:	f240 808a 	bls.w	d73d8 <__udivmoddi4+0x2ac>
   d72c4:	3e02      	subs	r6, #2
   d72c6:	443b      	add	r3, r7
   d72c8:	1a5b      	subs	r3, r3, r1
   d72ca:	b281      	uxth	r1, r0
   d72cc:	fbb3 f0fe 	udiv	r0, r3, lr
   d72d0:	fb0e 3310 	mls	r3, lr, r0, r3
   d72d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d72d8:	fb00 f308 	mul.w	r3, r0, r8
   d72dc:	428b      	cmp	r3, r1
   d72de:	d907      	bls.n	d72f0 <__udivmoddi4+0x1c4>
   d72e0:	1879      	adds	r1, r7, r1
   d72e2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d72e6:	d273      	bcs.n	d73d0 <__udivmoddi4+0x2a4>
   d72e8:	428b      	cmp	r3, r1
   d72ea:	d971      	bls.n	d73d0 <__udivmoddi4+0x2a4>
   d72ec:	3802      	subs	r0, #2
   d72ee:	4439      	add	r1, r7
   d72f0:	1acb      	subs	r3, r1, r3
   d72f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d72f6:	e778      	b.n	d71ea <__udivmoddi4+0xbe>
   d72f8:	f1c6 0c20 	rsb	ip, r6, #32
   d72fc:	fa03 f406 	lsl.w	r4, r3, r6
   d7300:	fa22 f30c 	lsr.w	r3, r2, ip
   d7304:	431c      	orrs	r4, r3
   d7306:	fa20 f70c 	lsr.w	r7, r0, ip
   d730a:	fa01 f306 	lsl.w	r3, r1, r6
   d730e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d7312:	fa21 f10c 	lsr.w	r1, r1, ip
   d7316:	431f      	orrs	r7, r3
   d7318:	0c3b      	lsrs	r3, r7, #16
   d731a:	fbb1 f9fe 	udiv	r9, r1, lr
   d731e:	fa1f f884 	uxth.w	r8, r4
   d7322:	fb0e 1119 	mls	r1, lr, r9, r1
   d7326:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d732a:	fb09 fa08 	mul.w	sl, r9, r8
   d732e:	458a      	cmp	sl, r1
   d7330:	fa02 f206 	lsl.w	r2, r2, r6
   d7334:	fa00 f306 	lsl.w	r3, r0, r6
   d7338:	d908      	bls.n	d734c <__udivmoddi4+0x220>
   d733a:	1861      	adds	r1, r4, r1
   d733c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7340:	d248      	bcs.n	d73d4 <__udivmoddi4+0x2a8>
   d7342:	458a      	cmp	sl, r1
   d7344:	d946      	bls.n	d73d4 <__udivmoddi4+0x2a8>
   d7346:	f1a9 0902 	sub.w	r9, r9, #2
   d734a:	4421      	add	r1, r4
   d734c:	eba1 010a 	sub.w	r1, r1, sl
   d7350:	b2bf      	uxth	r7, r7
   d7352:	fbb1 f0fe 	udiv	r0, r1, lr
   d7356:	fb0e 1110 	mls	r1, lr, r0, r1
   d735a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d735e:	fb00 f808 	mul.w	r8, r0, r8
   d7362:	45b8      	cmp	r8, r7
   d7364:	d907      	bls.n	d7376 <__udivmoddi4+0x24a>
   d7366:	19e7      	adds	r7, r4, r7
   d7368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d736c:	d22e      	bcs.n	d73cc <__udivmoddi4+0x2a0>
   d736e:	45b8      	cmp	r8, r7
   d7370:	d92c      	bls.n	d73cc <__udivmoddi4+0x2a0>
   d7372:	3802      	subs	r0, #2
   d7374:	4427      	add	r7, r4
   d7376:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d737a:	eba7 0708 	sub.w	r7, r7, r8
   d737e:	fba0 8902 	umull	r8, r9, r0, r2
   d7382:	454f      	cmp	r7, r9
   d7384:	46c6      	mov	lr, r8
   d7386:	4649      	mov	r1, r9
   d7388:	d31a      	bcc.n	d73c0 <__udivmoddi4+0x294>
   d738a:	d017      	beq.n	d73bc <__udivmoddi4+0x290>
   d738c:	b15d      	cbz	r5, d73a6 <__udivmoddi4+0x27a>
   d738e:	ebb3 020e 	subs.w	r2, r3, lr
   d7392:	eb67 0701 	sbc.w	r7, r7, r1
   d7396:	fa07 fc0c 	lsl.w	ip, r7, ip
   d739a:	40f2      	lsrs	r2, r6
   d739c:	ea4c 0202 	orr.w	r2, ip, r2
   d73a0:	40f7      	lsrs	r7, r6
   d73a2:	e9c5 2700 	strd	r2, r7, [r5]
   d73a6:	2600      	movs	r6, #0
   d73a8:	4631      	mov	r1, r6
   d73aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d73ae:	462e      	mov	r6, r5
   d73b0:	4628      	mov	r0, r5
   d73b2:	e70b      	b.n	d71cc <__udivmoddi4+0xa0>
   d73b4:	4606      	mov	r6, r0
   d73b6:	e6e9      	b.n	d718c <__udivmoddi4+0x60>
   d73b8:	4618      	mov	r0, r3
   d73ba:	e6fd      	b.n	d71b8 <__udivmoddi4+0x8c>
   d73bc:	4543      	cmp	r3, r8
   d73be:	d2e5      	bcs.n	d738c <__udivmoddi4+0x260>
   d73c0:	ebb8 0e02 	subs.w	lr, r8, r2
   d73c4:	eb69 0104 	sbc.w	r1, r9, r4
   d73c8:	3801      	subs	r0, #1
   d73ca:	e7df      	b.n	d738c <__udivmoddi4+0x260>
   d73cc:	4608      	mov	r0, r1
   d73ce:	e7d2      	b.n	d7376 <__udivmoddi4+0x24a>
   d73d0:	4660      	mov	r0, ip
   d73d2:	e78d      	b.n	d72f0 <__udivmoddi4+0x1c4>
   d73d4:	4681      	mov	r9, r0
   d73d6:	e7b9      	b.n	d734c <__udivmoddi4+0x220>
   d73d8:	4666      	mov	r6, ip
   d73da:	e775      	b.n	d72c8 <__udivmoddi4+0x19c>
   d73dc:	4630      	mov	r0, r6
   d73de:	e74a      	b.n	d7276 <__udivmoddi4+0x14a>
   d73e0:	f1ac 0c02 	sub.w	ip, ip, #2
   d73e4:	4439      	add	r1, r7
   d73e6:	e713      	b.n	d7210 <__udivmoddi4+0xe4>
   d73e8:	3802      	subs	r0, #2
   d73ea:	443c      	add	r4, r7
   d73ec:	e724      	b.n	d7238 <__udivmoddi4+0x10c>
   d73ee:	bf00      	nop

000d73f0 <__aeabi_idiv0>:
   d73f0:	4770      	bx	lr
   d73f2:	bf00      	nop

000d73f4 <atof>:
   d73f4:	2100      	movs	r1, #0
   d73f6:	f000 bfc5 	b.w	d8384 <strtod>

000d73fa <atoi>:
   d73fa:	220a      	movs	r2, #10
   d73fc:	2100      	movs	r1, #0
   d73fe:	f001 b847 	b.w	d8490 <strtol>
	...

000d7404 <__cxa_atexit>:
   d7404:	b510      	push	{r4, lr}
   d7406:	4c05      	ldr	r4, [pc, #20]	; (d741c <__cxa_atexit+0x18>)
   d7408:	4613      	mov	r3, r2
   d740a:	b12c      	cbz	r4, d7418 <__cxa_atexit+0x14>
   d740c:	460a      	mov	r2, r1
   d740e:	4601      	mov	r1, r0
   d7410:	2002      	movs	r0, #2
   d7412:	f3af 8000 	nop.w
   d7416:	bd10      	pop	{r4, pc}
   d7418:	4620      	mov	r0, r4
   d741a:	e7fc      	b.n	d7416 <__cxa_atexit+0x12>
   d741c:	00000000 	.word	0x00000000

000d7420 <localtime_r>:
   d7420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7424:	4607      	mov	r7, r0
   d7426:	9101      	str	r1, [sp, #4]
   d7428:	f001 fe98 	bl	d915c <__gettzinfo>
   d742c:	9901      	ldr	r1, [sp, #4]
   d742e:	4680      	mov	r8, r0
   d7430:	4638      	mov	r0, r7
   d7432:	f001 fe97 	bl	d9164 <gmtime_r>
   d7436:	6943      	ldr	r3, [r0, #20]
   d7438:	079a      	lsls	r2, r3, #30
   d743a:	4604      	mov	r4, r0
   d743c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d7440:	d105      	bne.n	d744e <localtime_r+0x2e>
   d7442:	2264      	movs	r2, #100	; 0x64
   d7444:	fb96 f3f2 	sdiv	r3, r6, r2
   d7448:	fb02 6313 	mls	r3, r2, r3, r6
   d744c:	bb7b      	cbnz	r3, d74ae <localtime_r+0x8e>
   d744e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d7452:	fb96 f5f3 	sdiv	r5, r6, r3
   d7456:	fb03 6515 	mls	r5, r3, r5, r6
   d745a:	fab5 f585 	clz	r5, r5
   d745e:	096d      	lsrs	r5, r5, #5
   d7460:	4b68      	ldr	r3, [pc, #416]	; (d7604 <localtime_r+0x1e4>)
   d7462:	2230      	movs	r2, #48	; 0x30
   d7464:	fb02 3505 	mla	r5, r2, r5, r3
   d7468:	f001 f94a 	bl	d8700 <__tz_lock>
   d746c:	f001 f954 	bl	d8718 <_tzset_unlocked>
   d7470:	4b65      	ldr	r3, [pc, #404]	; (d7608 <localtime_r+0x1e8>)
   d7472:	681b      	ldr	r3, [r3, #0]
   d7474:	b353      	cbz	r3, d74cc <localtime_r+0xac>
   d7476:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d747a:	42b3      	cmp	r3, r6
   d747c:	d119      	bne.n	d74b2 <localtime_r+0x92>
   d747e:	f8d8 1000 	ldr.w	r1, [r8]
   d7482:	e9d7 6700 	ldrd	r6, r7, [r7]
   d7486:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   d748a:	b9d1      	cbnz	r1, d74c2 <localtime_r+0xa2>
   d748c:	4296      	cmp	r6, r2
   d748e:	eb77 0303 	sbcs.w	r3, r7, r3
   d7492:	da23      	bge.n	d74dc <localtime_r+0xbc>
   d7494:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d7498:	4296      	cmp	r6, r2
   d749a:	eb77 0303 	sbcs.w	r3, r7, r3
   d749e:	bfb4      	ite	lt
   d74a0:	2301      	movlt	r3, #1
   d74a2:	2300      	movge	r3, #0
   d74a4:	6223      	str	r3, [r4, #32]
   d74a6:	db1b      	blt.n	d74e0 <localtime_r+0xc0>
   d74a8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   d74ac:	e01a      	b.n	d74e4 <localtime_r+0xc4>
   d74ae:	2501      	movs	r5, #1
   d74b0:	e7d6      	b.n	d7460 <localtime_r+0x40>
   d74b2:	4630      	mov	r0, r6
   d74b4:	f001 f87c 	bl	d85b0 <__tzcalc_limits>
   d74b8:	2800      	cmp	r0, #0
   d74ba:	d1e0      	bne.n	d747e <localtime_r+0x5e>
   d74bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d74c0:	e004      	b.n	d74cc <localtime_r+0xac>
   d74c2:	4296      	cmp	r6, r2
   d74c4:	eb77 0303 	sbcs.w	r3, r7, r3
   d74c8:	da02      	bge.n	d74d0 <localtime_r+0xb0>
   d74ca:	2300      	movs	r3, #0
   d74cc:	6223      	str	r3, [r4, #32]
   d74ce:	e7eb      	b.n	d74a8 <localtime_r+0x88>
   d74d0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d74d4:	4296      	cmp	r6, r2
   d74d6:	eb77 0303 	sbcs.w	r3, r7, r3
   d74da:	daf6      	bge.n	d74ca <localtime_r+0xaa>
   d74dc:	2301      	movs	r3, #1
   d74de:	6223      	str	r3, [r4, #32]
   d74e0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   d74e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d74e8:	203c      	movs	r0, #60	; 0x3c
   d74ea:	fb91 f6f3 	sdiv	r6, r1, r3
   d74ee:	fb03 1316 	mls	r3, r3, r6, r1
   d74f2:	6861      	ldr	r1, [r4, #4]
   d74f4:	fb93 f2f0 	sdiv	r2, r3, r0
   d74f8:	fb00 3012 	mls	r0, r0, r2, r3
   d74fc:	6823      	ldr	r3, [r4, #0]
   d74fe:	1a89      	subs	r1, r1, r2
   d7500:	68a2      	ldr	r2, [r4, #8]
   d7502:	6061      	str	r1, [r4, #4]
   d7504:	1a1b      	subs	r3, r3, r0
   d7506:	1b92      	subs	r2, r2, r6
   d7508:	2b3b      	cmp	r3, #59	; 0x3b
   d750a:	6023      	str	r3, [r4, #0]
   d750c:	60a2      	str	r2, [r4, #8]
   d750e:	dd35      	ble.n	d757c <localtime_r+0x15c>
   d7510:	3101      	adds	r1, #1
   d7512:	6061      	str	r1, [r4, #4]
   d7514:	3b3c      	subs	r3, #60	; 0x3c
   d7516:	6023      	str	r3, [r4, #0]
   d7518:	6863      	ldr	r3, [r4, #4]
   d751a:	2b3b      	cmp	r3, #59	; 0x3b
   d751c:	dd34      	ble.n	d7588 <localtime_r+0x168>
   d751e:	3201      	adds	r2, #1
   d7520:	60a2      	str	r2, [r4, #8]
   d7522:	3b3c      	subs	r3, #60	; 0x3c
   d7524:	6063      	str	r3, [r4, #4]
   d7526:	68a3      	ldr	r3, [r4, #8]
   d7528:	2b17      	cmp	r3, #23
   d752a:	dd33      	ble.n	d7594 <localtime_r+0x174>
   d752c:	69e2      	ldr	r2, [r4, #28]
   d752e:	3201      	adds	r2, #1
   d7530:	61e2      	str	r2, [r4, #28]
   d7532:	69a2      	ldr	r2, [r4, #24]
   d7534:	3201      	adds	r2, #1
   d7536:	2a06      	cmp	r2, #6
   d7538:	bfc8      	it	gt
   d753a:	2200      	movgt	r2, #0
   d753c:	61a2      	str	r2, [r4, #24]
   d753e:	68e2      	ldr	r2, [r4, #12]
   d7540:	3b18      	subs	r3, #24
   d7542:	3201      	adds	r2, #1
   d7544:	60a3      	str	r3, [r4, #8]
   d7546:	6923      	ldr	r3, [r4, #16]
   d7548:	60e2      	str	r2, [r4, #12]
   d754a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d754e:	428a      	cmp	r2, r1
   d7550:	dd0e      	ble.n	d7570 <localtime_r+0x150>
   d7552:	2b0b      	cmp	r3, #11
   d7554:	eba2 0201 	sub.w	r2, r2, r1
   d7558:	60e2      	str	r2, [r4, #12]
   d755a:	f103 0201 	add.w	r2, r3, #1
   d755e:	bf09      	itett	eq
   d7560:	6963      	ldreq	r3, [r4, #20]
   d7562:	6122      	strne	r2, [r4, #16]
   d7564:	2200      	moveq	r2, #0
   d7566:	3301      	addeq	r3, #1
   d7568:	bf02      	ittt	eq
   d756a:	6122      	streq	r2, [r4, #16]
   d756c:	6163      	streq	r3, [r4, #20]
   d756e:	61e2      	streq	r2, [r4, #28]
   d7570:	f001 f8cc 	bl	d870c <__tz_unlock>
   d7574:	4620      	mov	r0, r4
   d7576:	b002      	add	sp, #8
   d7578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d757c:	2b00      	cmp	r3, #0
   d757e:	dacb      	bge.n	d7518 <localtime_r+0xf8>
   d7580:	3901      	subs	r1, #1
   d7582:	6061      	str	r1, [r4, #4]
   d7584:	333c      	adds	r3, #60	; 0x3c
   d7586:	e7c6      	b.n	d7516 <localtime_r+0xf6>
   d7588:	2b00      	cmp	r3, #0
   d758a:	dacc      	bge.n	d7526 <localtime_r+0x106>
   d758c:	3a01      	subs	r2, #1
   d758e:	60a2      	str	r2, [r4, #8]
   d7590:	333c      	adds	r3, #60	; 0x3c
   d7592:	e7c7      	b.n	d7524 <localtime_r+0x104>
   d7594:	2b00      	cmp	r3, #0
   d7596:	daeb      	bge.n	d7570 <localtime_r+0x150>
   d7598:	69e2      	ldr	r2, [r4, #28]
   d759a:	3a01      	subs	r2, #1
   d759c:	61e2      	str	r2, [r4, #28]
   d759e:	69a2      	ldr	r2, [r4, #24]
   d75a0:	3a01      	subs	r2, #1
   d75a2:	bf48      	it	mi
   d75a4:	2206      	movmi	r2, #6
   d75a6:	61a2      	str	r2, [r4, #24]
   d75a8:	68e2      	ldr	r2, [r4, #12]
   d75aa:	3318      	adds	r3, #24
   d75ac:	3a01      	subs	r2, #1
   d75ae:	60e2      	str	r2, [r4, #12]
   d75b0:	60a3      	str	r3, [r4, #8]
   d75b2:	2a00      	cmp	r2, #0
   d75b4:	d1dc      	bne.n	d7570 <localtime_r+0x150>
   d75b6:	6923      	ldr	r3, [r4, #16]
   d75b8:	3b01      	subs	r3, #1
   d75ba:	d405      	bmi.n	d75c8 <localtime_r+0x1a8>
   d75bc:	6123      	str	r3, [r4, #16]
   d75be:	6923      	ldr	r3, [r4, #16]
   d75c0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d75c4:	60e3      	str	r3, [r4, #12]
   d75c6:	e7d3      	b.n	d7570 <localtime_r+0x150>
   d75c8:	230b      	movs	r3, #11
   d75ca:	6123      	str	r3, [r4, #16]
   d75cc:	6963      	ldr	r3, [r4, #20]
   d75ce:	1e5a      	subs	r2, r3, #1
   d75d0:	6162      	str	r2, [r4, #20]
   d75d2:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   d75d6:	0793      	lsls	r3, r2, #30
   d75d8:	d105      	bne.n	d75e6 <localtime_r+0x1c6>
   d75da:	2164      	movs	r1, #100	; 0x64
   d75dc:	fb92 f3f1 	sdiv	r3, r2, r1
   d75e0:	fb01 2313 	mls	r3, r1, r3, r2
   d75e4:	b963      	cbnz	r3, d7600 <localtime_r+0x1e0>
   d75e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d75ea:	fb92 f3f1 	sdiv	r3, r2, r1
   d75ee:	fb01 2313 	mls	r3, r1, r3, r2
   d75f2:	fab3 f383 	clz	r3, r3
   d75f6:	095b      	lsrs	r3, r3, #5
   d75f8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d75fc:	61e3      	str	r3, [r4, #28]
   d75fe:	e7de      	b.n	d75be <localtime_r+0x19e>
   d7600:	2301      	movs	r3, #1
   d7602:	e7f9      	b.n	d75f8 <localtime_r+0x1d8>
   d7604:	000da194 	.word	0x000da194
   d7608:	2003e7dc 	.word	0x2003e7dc

000d760c <memcpy>:
   d760c:	440a      	add	r2, r1
   d760e:	4291      	cmp	r1, r2
   d7610:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7614:	d100      	bne.n	d7618 <memcpy+0xc>
   d7616:	4770      	bx	lr
   d7618:	b510      	push	{r4, lr}
   d761a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d761e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7622:	4291      	cmp	r1, r2
   d7624:	d1f9      	bne.n	d761a <memcpy+0xe>
   d7626:	bd10      	pop	{r4, pc}

000d7628 <memset>:
   d7628:	4402      	add	r2, r0
   d762a:	4603      	mov	r3, r0
   d762c:	4293      	cmp	r3, r2
   d762e:	d100      	bne.n	d7632 <memset+0xa>
   d7630:	4770      	bx	lr
   d7632:	f803 1b01 	strb.w	r1, [r3], #1
   d7636:	e7f9      	b.n	d762c <memset+0x4>

000d7638 <srand>:
   d7638:	b538      	push	{r3, r4, r5, lr}
   d763a:	4b0d      	ldr	r3, [pc, #52]	; (d7670 <srand+0x38>)
   d763c:	681d      	ldr	r5, [r3, #0]
   d763e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7640:	4604      	mov	r4, r0
   d7642:	b97b      	cbnz	r3, d7664 <srand+0x2c>
   d7644:	2018      	movs	r0, #24
   d7646:	f7fd fec3 	bl	d53d0 <malloc>
   d764a:	4a0a      	ldr	r2, [pc, #40]	; (d7674 <srand+0x3c>)
   d764c:	4b0a      	ldr	r3, [pc, #40]	; (d7678 <srand+0x40>)
   d764e:	63a8      	str	r0, [r5, #56]	; 0x38
   d7650:	e9c0 2300 	strd	r2, r3, [r0]
   d7654:	4b09      	ldr	r3, [pc, #36]	; (d767c <srand+0x44>)
   d7656:	6083      	str	r3, [r0, #8]
   d7658:	230b      	movs	r3, #11
   d765a:	8183      	strh	r3, [r0, #12]
   d765c:	2201      	movs	r2, #1
   d765e:	2300      	movs	r3, #0
   d7660:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7664:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7666:	2200      	movs	r2, #0
   d7668:	611c      	str	r4, [r3, #16]
   d766a:	615a      	str	r2, [r3, #20]
   d766c:	bd38      	pop	{r3, r4, r5, pc}
   d766e:	bf00      	nop
   d7670:	2003e26c 	.word	0x2003e26c
   d7674:	abcd330e 	.word	0xabcd330e
   d7678:	e66d1234 	.word	0xe66d1234
   d767c:	0005deec 	.word	0x0005deec

000d7680 <strcmp>:
   d7680:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7684:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7688:	2a01      	cmp	r2, #1
   d768a:	bf28      	it	cs
   d768c:	429a      	cmpcs	r2, r3
   d768e:	d0f7      	beq.n	d7680 <strcmp>
   d7690:	1ad0      	subs	r0, r2, r3
   d7692:	4770      	bx	lr

000d7694 <strcpy>:
   d7694:	4603      	mov	r3, r0
   d7696:	f811 2b01 	ldrb.w	r2, [r1], #1
   d769a:	f803 2b01 	strb.w	r2, [r3], #1
   d769e:	2a00      	cmp	r2, #0
   d76a0:	d1f9      	bne.n	d7696 <strcpy+0x2>
   d76a2:	4770      	bx	lr

000d76a4 <strdup>:
   d76a4:	4b02      	ldr	r3, [pc, #8]	; (d76b0 <strdup+0xc>)
   d76a6:	4601      	mov	r1, r0
   d76a8:	6818      	ldr	r0, [r3, #0]
   d76aa:	f000 b803 	b.w	d76b4 <_strdup_r>
   d76ae:	bf00      	nop
   d76b0:	2003e26c 	.word	0x2003e26c

000d76b4 <_strdup_r>:
   d76b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d76b6:	4604      	mov	r4, r0
   d76b8:	4608      	mov	r0, r1
   d76ba:	460d      	mov	r5, r1
   d76bc:	f000 f80f 	bl	d76de <strlen>
   d76c0:	1c42      	adds	r2, r0, #1
   d76c2:	4611      	mov	r1, r2
   d76c4:	4620      	mov	r0, r4
   d76c6:	9201      	str	r2, [sp, #4]
   d76c8:	f7fd feb2 	bl	d5430 <_malloc_r>
   d76cc:	4604      	mov	r4, r0
   d76ce:	b118      	cbz	r0, d76d8 <_strdup_r+0x24>
   d76d0:	9a01      	ldr	r2, [sp, #4]
   d76d2:	4629      	mov	r1, r5
   d76d4:	f7ff ff9a 	bl	d760c <memcpy>
   d76d8:	4620      	mov	r0, r4
   d76da:	b003      	add	sp, #12
   d76dc:	bd30      	pop	{r4, r5, pc}

000d76de <strlen>:
   d76de:	4603      	mov	r3, r0
   d76e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d76e4:	2a00      	cmp	r2, #0
   d76e6:	d1fb      	bne.n	d76e0 <strlen+0x2>
   d76e8:	1a18      	subs	r0, r3, r0
   d76ea:	3801      	subs	r0, #1
   d76ec:	4770      	bx	lr

000d76ee <strncmp>:
   d76ee:	b510      	push	{r4, lr}
   d76f0:	b16a      	cbz	r2, d770e <strncmp+0x20>
   d76f2:	3901      	subs	r1, #1
   d76f4:	1884      	adds	r4, r0, r2
   d76f6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d76fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d76fe:	4293      	cmp	r3, r2
   d7700:	d103      	bne.n	d770a <strncmp+0x1c>
   d7702:	42a0      	cmp	r0, r4
   d7704:	d001      	beq.n	d770a <strncmp+0x1c>
   d7706:	2b00      	cmp	r3, #0
   d7708:	d1f5      	bne.n	d76f6 <strncmp+0x8>
   d770a:	1a98      	subs	r0, r3, r2
   d770c:	bd10      	pop	{r4, pc}
   d770e:	4610      	mov	r0, r2
   d7710:	e7fc      	b.n	d770c <strncmp+0x1e>

000d7712 <strncpy>:
   d7712:	b510      	push	{r4, lr}
   d7714:	3901      	subs	r1, #1
   d7716:	4603      	mov	r3, r0
   d7718:	b132      	cbz	r2, d7728 <strncpy+0x16>
   d771a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d771e:	f803 4b01 	strb.w	r4, [r3], #1
   d7722:	3a01      	subs	r2, #1
   d7724:	2c00      	cmp	r4, #0
   d7726:	d1f7      	bne.n	d7718 <strncpy+0x6>
   d7728:	441a      	add	r2, r3
   d772a:	2100      	movs	r1, #0
   d772c:	4293      	cmp	r3, r2
   d772e:	d100      	bne.n	d7732 <strncpy+0x20>
   d7730:	bd10      	pop	{r4, pc}
   d7732:	f803 1b01 	strb.w	r1, [r3], #1
   d7736:	e7f9      	b.n	d772c <strncpy+0x1a>

000d7738 <sulp>:
   d7738:	b570      	push	{r4, r5, r6, lr}
   d773a:	4604      	mov	r4, r0
   d773c:	460d      	mov	r5, r1
   d773e:	ec45 4b10 	vmov	d0, r4, r5
   d7742:	4616      	mov	r6, r2
   d7744:	f002 f8d0 	bl	d98e8 <__ulp>
   d7748:	ec51 0b10 	vmov	r0, r1, d0
   d774c:	b17e      	cbz	r6, d776e <sulp+0x36>
   d774e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7752:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7756:	2b00      	cmp	r3, #0
   d7758:	dd09      	ble.n	d776e <sulp+0x36>
   d775a:	051b      	lsls	r3, r3, #20
   d775c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7760:	2400      	movs	r4, #0
   d7762:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7766:	4622      	mov	r2, r4
   d7768:	462b      	mov	r3, r5
   d776a:	f7ff f9b7 	bl	d6adc <__aeabi_dmul>
   d776e:	bd70      	pop	{r4, r5, r6, pc}

000d7770 <_strtod_l>:
   d7770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7774:	b0a3      	sub	sp, #140	; 0x8c
   d7776:	461f      	mov	r7, r3
   d7778:	2300      	movs	r3, #0
   d777a:	931e      	str	r3, [sp, #120]	; 0x78
   d777c:	4ba4      	ldr	r3, [pc, #656]	; (d7a10 <_strtod_l+0x2a0>)
   d777e:	9219      	str	r2, [sp, #100]	; 0x64
   d7780:	681b      	ldr	r3, [r3, #0]
   d7782:	9307      	str	r3, [sp, #28]
   d7784:	4604      	mov	r4, r0
   d7786:	4618      	mov	r0, r3
   d7788:	4688      	mov	r8, r1
   d778a:	f7ff ffa8 	bl	d76de <strlen>
   d778e:	f04f 0a00 	mov.w	sl, #0
   d7792:	4605      	mov	r5, r0
   d7794:	f04f 0b00 	mov.w	fp, #0
   d7798:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d779c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d779e:	781a      	ldrb	r2, [r3, #0]
   d77a0:	2a2b      	cmp	r2, #43	; 0x2b
   d77a2:	d04c      	beq.n	d783e <_strtod_l+0xce>
   d77a4:	d839      	bhi.n	d781a <_strtod_l+0xaa>
   d77a6:	2a0d      	cmp	r2, #13
   d77a8:	d832      	bhi.n	d7810 <_strtod_l+0xa0>
   d77aa:	2a08      	cmp	r2, #8
   d77ac:	d832      	bhi.n	d7814 <_strtod_l+0xa4>
   d77ae:	2a00      	cmp	r2, #0
   d77b0:	d03c      	beq.n	d782c <_strtod_l+0xbc>
   d77b2:	2300      	movs	r3, #0
   d77b4:	930e      	str	r3, [sp, #56]	; 0x38
   d77b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d77b8:	7833      	ldrb	r3, [r6, #0]
   d77ba:	2b30      	cmp	r3, #48	; 0x30
   d77bc:	f040 80b4 	bne.w	d7928 <_strtod_l+0x1b8>
   d77c0:	7873      	ldrb	r3, [r6, #1]
   d77c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d77c6:	2b58      	cmp	r3, #88	; 0x58
   d77c8:	d16c      	bne.n	d78a4 <_strtod_l+0x134>
   d77ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d77cc:	9301      	str	r3, [sp, #4]
   d77ce:	ab1e      	add	r3, sp, #120	; 0x78
   d77d0:	9702      	str	r7, [sp, #8]
   d77d2:	9300      	str	r3, [sp, #0]
   d77d4:	4a8f      	ldr	r2, [pc, #572]	; (d7a14 <_strtod_l+0x2a4>)
   d77d6:	ab1f      	add	r3, sp, #124	; 0x7c
   d77d8:	a91d      	add	r1, sp, #116	; 0x74
   d77da:	4620      	mov	r0, r4
   d77dc:	f001 f986 	bl	d8aec <__gethex>
   d77e0:	f010 0707 	ands.w	r7, r0, #7
   d77e4:	4605      	mov	r5, r0
   d77e6:	d005      	beq.n	d77f4 <_strtod_l+0x84>
   d77e8:	2f06      	cmp	r7, #6
   d77ea:	d12a      	bne.n	d7842 <_strtod_l+0xd2>
   d77ec:	3601      	adds	r6, #1
   d77ee:	2300      	movs	r3, #0
   d77f0:	961d      	str	r6, [sp, #116]	; 0x74
   d77f2:	930e      	str	r3, [sp, #56]	; 0x38
   d77f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d77f6:	2b00      	cmp	r3, #0
   d77f8:	f040 8596 	bne.w	d8328 <_strtod_l+0xbb8>
   d77fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d77fe:	b1db      	cbz	r3, d7838 <_strtod_l+0xc8>
   d7800:	4652      	mov	r2, sl
   d7802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7806:	ec43 2b10 	vmov	d0, r2, r3
   d780a:	b023      	add	sp, #140	; 0x8c
   d780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7810:	2a20      	cmp	r2, #32
   d7812:	d1ce      	bne.n	d77b2 <_strtod_l+0x42>
   d7814:	3301      	adds	r3, #1
   d7816:	931d      	str	r3, [sp, #116]	; 0x74
   d7818:	e7c0      	b.n	d779c <_strtod_l+0x2c>
   d781a:	2a2d      	cmp	r2, #45	; 0x2d
   d781c:	d1c9      	bne.n	d77b2 <_strtod_l+0x42>
   d781e:	2201      	movs	r2, #1
   d7820:	920e      	str	r2, [sp, #56]	; 0x38
   d7822:	1c5a      	adds	r2, r3, #1
   d7824:	921d      	str	r2, [sp, #116]	; 0x74
   d7826:	785b      	ldrb	r3, [r3, #1]
   d7828:	2b00      	cmp	r3, #0
   d782a:	d1c4      	bne.n	d77b6 <_strtod_l+0x46>
   d782c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d782e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7832:	2b00      	cmp	r3, #0
   d7834:	f040 8576 	bne.w	d8324 <_strtod_l+0xbb4>
   d7838:	4652      	mov	r2, sl
   d783a:	465b      	mov	r3, fp
   d783c:	e7e3      	b.n	d7806 <_strtod_l+0x96>
   d783e:	2200      	movs	r2, #0
   d7840:	e7ee      	b.n	d7820 <_strtod_l+0xb0>
   d7842:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7844:	b13a      	cbz	r2, d7856 <_strtod_l+0xe6>
   d7846:	2135      	movs	r1, #53	; 0x35
   d7848:	a820      	add	r0, sp, #128	; 0x80
   d784a:	f002 f94c 	bl	d9ae6 <__copybits>
   d784e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7850:	4620      	mov	r0, r4
   d7852:	f001 fd81 	bl	d9358 <_Bfree>
   d7856:	3f01      	subs	r7, #1
   d7858:	2f05      	cmp	r7, #5
   d785a:	d807      	bhi.n	d786c <_strtod_l+0xfc>
   d785c:	e8df f007 	tbb	[pc, r7]
   d7860:	1d180b0e 	.word	0x1d180b0e
   d7864:	030e      	.short	0x030e
   d7866:	f04f 0b00 	mov.w	fp, #0
   d786a:	46da      	mov	sl, fp
   d786c:	0728      	lsls	r0, r5, #28
   d786e:	d5c1      	bpl.n	d77f4 <_strtod_l+0x84>
   d7870:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7874:	e7be      	b.n	d77f4 <_strtod_l+0x84>
   d7876:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d787a:	e7f7      	b.n	d786c <_strtod_l+0xfc>
   d787c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d7880:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d7882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d7886:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d788a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d788e:	e7ed      	b.n	d786c <_strtod_l+0xfc>
   d7890:	f8df b184 	ldr.w	fp, [pc, #388]	; d7a18 <_strtod_l+0x2a8>
   d7894:	f04f 0a00 	mov.w	sl, #0
   d7898:	e7e8      	b.n	d786c <_strtod_l+0xfc>
   d789a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d789e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d78a2:	e7e3      	b.n	d786c <_strtod_l+0xfc>
   d78a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d78a6:	1c5a      	adds	r2, r3, #1
   d78a8:	921d      	str	r2, [sp, #116]	; 0x74
   d78aa:	785b      	ldrb	r3, [r3, #1]
   d78ac:	2b30      	cmp	r3, #48	; 0x30
   d78ae:	d0f9      	beq.n	d78a4 <_strtod_l+0x134>
   d78b0:	2b00      	cmp	r3, #0
   d78b2:	d09f      	beq.n	d77f4 <_strtod_l+0x84>
   d78b4:	2301      	movs	r3, #1
   d78b6:	f04f 0900 	mov.w	r9, #0
   d78ba:	9304      	str	r3, [sp, #16]
   d78bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d78be:	930a      	str	r3, [sp, #40]	; 0x28
   d78c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d78c4:	464f      	mov	r7, r9
   d78c6:	220a      	movs	r2, #10
   d78c8:	981d      	ldr	r0, [sp, #116]	; 0x74
   d78ca:	7806      	ldrb	r6, [r0, #0]
   d78cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d78d0:	b2d9      	uxtb	r1, r3
   d78d2:	2909      	cmp	r1, #9
   d78d4:	d92a      	bls.n	d792c <_strtod_l+0x1bc>
   d78d6:	9907      	ldr	r1, [sp, #28]
   d78d8:	462a      	mov	r2, r5
   d78da:	f7ff ff08 	bl	d76ee <strncmp>
   d78de:	b398      	cbz	r0, d7948 <_strtod_l+0x1d8>
   d78e0:	2000      	movs	r0, #0
   d78e2:	4633      	mov	r3, r6
   d78e4:	463d      	mov	r5, r7
   d78e6:	9007      	str	r0, [sp, #28]
   d78e8:	4602      	mov	r2, r0
   d78ea:	2b65      	cmp	r3, #101	; 0x65
   d78ec:	d001      	beq.n	d78f2 <_strtod_l+0x182>
   d78ee:	2b45      	cmp	r3, #69	; 0x45
   d78f0:	d118      	bne.n	d7924 <_strtod_l+0x1b4>
   d78f2:	b91d      	cbnz	r5, d78fc <_strtod_l+0x18c>
   d78f4:	9b04      	ldr	r3, [sp, #16]
   d78f6:	4303      	orrs	r3, r0
   d78f8:	d098      	beq.n	d782c <_strtod_l+0xbc>
   d78fa:	2500      	movs	r5, #0
   d78fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d7900:	f108 0301 	add.w	r3, r8, #1
   d7904:	931d      	str	r3, [sp, #116]	; 0x74
   d7906:	f898 3001 	ldrb.w	r3, [r8, #1]
   d790a:	2b2b      	cmp	r3, #43	; 0x2b
   d790c:	d075      	beq.n	d79fa <_strtod_l+0x28a>
   d790e:	2b2d      	cmp	r3, #45	; 0x2d
   d7910:	d07b      	beq.n	d7a0a <_strtod_l+0x29a>
   d7912:	f04f 0c00 	mov.w	ip, #0
   d7916:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d791a:	2909      	cmp	r1, #9
   d791c:	f240 8082 	bls.w	d7a24 <_strtod_l+0x2b4>
   d7920:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7924:	2600      	movs	r6, #0
   d7926:	e09d      	b.n	d7a64 <_strtod_l+0x2f4>
   d7928:	2300      	movs	r3, #0
   d792a:	e7c4      	b.n	d78b6 <_strtod_l+0x146>
   d792c:	2f08      	cmp	r7, #8
   d792e:	bfd8      	it	le
   d7930:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d7932:	f100 0001 	add.w	r0, r0, #1
   d7936:	bfda      	itte	le
   d7938:	fb02 3301 	mlale	r3, r2, r1, r3
   d793c:	9309      	strle	r3, [sp, #36]	; 0x24
   d793e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d7942:	3701      	adds	r7, #1
   d7944:	901d      	str	r0, [sp, #116]	; 0x74
   d7946:	e7bf      	b.n	d78c8 <_strtod_l+0x158>
   d7948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d794a:	195a      	adds	r2, r3, r5
   d794c:	921d      	str	r2, [sp, #116]	; 0x74
   d794e:	5d5b      	ldrb	r3, [r3, r5]
   d7950:	2f00      	cmp	r7, #0
   d7952:	d037      	beq.n	d79c4 <_strtod_l+0x254>
   d7954:	9007      	str	r0, [sp, #28]
   d7956:	463d      	mov	r5, r7
   d7958:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d795c:	2a09      	cmp	r2, #9
   d795e:	d912      	bls.n	d7986 <_strtod_l+0x216>
   d7960:	2201      	movs	r2, #1
   d7962:	e7c2      	b.n	d78ea <_strtod_l+0x17a>
   d7964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7966:	1c5a      	adds	r2, r3, #1
   d7968:	921d      	str	r2, [sp, #116]	; 0x74
   d796a:	785b      	ldrb	r3, [r3, #1]
   d796c:	3001      	adds	r0, #1
   d796e:	2b30      	cmp	r3, #48	; 0x30
   d7970:	d0f8      	beq.n	d7964 <_strtod_l+0x1f4>
   d7972:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7976:	2a08      	cmp	r2, #8
   d7978:	f200 84db 	bhi.w	d8332 <_strtod_l+0xbc2>
   d797c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d797e:	9007      	str	r0, [sp, #28]
   d7980:	2000      	movs	r0, #0
   d7982:	920a      	str	r2, [sp, #40]	; 0x28
   d7984:	4605      	mov	r5, r0
   d7986:	3b30      	subs	r3, #48	; 0x30
   d7988:	f100 0201 	add.w	r2, r0, #1
   d798c:	d014      	beq.n	d79b8 <_strtod_l+0x248>
   d798e:	9907      	ldr	r1, [sp, #28]
   d7990:	4411      	add	r1, r2
   d7992:	9107      	str	r1, [sp, #28]
   d7994:	462a      	mov	r2, r5
   d7996:	eb00 0e05 	add.w	lr, r0, r5
   d799a:	210a      	movs	r1, #10
   d799c:	4572      	cmp	r2, lr
   d799e:	d113      	bne.n	d79c8 <_strtod_l+0x258>
   d79a0:	182a      	adds	r2, r5, r0
   d79a2:	2a08      	cmp	r2, #8
   d79a4:	f105 0501 	add.w	r5, r5, #1
   d79a8:	4405      	add	r5, r0
   d79aa:	dc1c      	bgt.n	d79e6 <_strtod_l+0x276>
   d79ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   d79ae:	220a      	movs	r2, #10
   d79b0:	fb02 3301 	mla	r3, r2, r1, r3
   d79b4:	9309      	str	r3, [sp, #36]	; 0x24
   d79b6:	2200      	movs	r2, #0
   d79b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d79ba:	1c59      	adds	r1, r3, #1
   d79bc:	911d      	str	r1, [sp, #116]	; 0x74
   d79be:	785b      	ldrb	r3, [r3, #1]
   d79c0:	4610      	mov	r0, r2
   d79c2:	e7c9      	b.n	d7958 <_strtod_l+0x1e8>
   d79c4:	4638      	mov	r0, r7
   d79c6:	e7d2      	b.n	d796e <_strtod_l+0x1fe>
   d79c8:	2a08      	cmp	r2, #8
   d79ca:	dc04      	bgt.n	d79d6 <_strtod_l+0x266>
   d79cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d79ce:	434e      	muls	r6, r1
   d79d0:	9609      	str	r6, [sp, #36]	; 0x24
   d79d2:	3201      	adds	r2, #1
   d79d4:	e7e2      	b.n	d799c <_strtod_l+0x22c>
   d79d6:	f102 0c01 	add.w	ip, r2, #1
   d79da:	f1bc 0f10 	cmp.w	ip, #16
   d79de:	bfd8      	it	le
   d79e0:	fb01 f909 	mulle.w	r9, r1, r9
   d79e4:	e7f5      	b.n	d79d2 <_strtod_l+0x262>
   d79e6:	2d10      	cmp	r5, #16
   d79e8:	bfdc      	itt	le
   d79ea:	220a      	movle	r2, #10
   d79ec:	fb02 3909 	mlale	r9, r2, r9, r3
   d79f0:	e7e1      	b.n	d79b6 <_strtod_l+0x246>
   d79f2:	2300      	movs	r3, #0
   d79f4:	9307      	str	r3, [sp, #28]
   d79f6:	2201      	movs	r2, #1
   d79f8:	e77c      	b.n	d78f4 <_strtod_l+0x184>
   d79fa:	f04f 0c00 	mov.w	ip, #0
   d79fe:	f108 0302 	add.w	r3, r8, #2
   d7a02:	931d      	str	r3, [sp, #116]	; 0x74
   d7a04:	f898 3002 	ldrb.w	r3, [r8, #2]
   d7a08:	e785      	b.n	d7916 <_strtod_l+0x1a6>
   d7a0a:	f04f 0c01 	mov.w	ip, #1
   d7a0e:	e7f6      	b.n	d79fe <_strtod_l+0x28e>
   d7a10:	000da390 	.word	0x000da390
   d7a14:	000da200 	.word	0x000da200
   d7a18:	7ff00000 	.word	0x7ff00000
   d7a1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a1e:	1c59      	adds	r1, r3, #1
   d7a20:	911d      	str	r1, [sp, #116]	; 0x74
   d7a22:	785b      	ldrb	r3, [r3, #1]
   d7a24:	2b30      	cmp	r3, #48	; 0x30
   d7a26:	d0f9      	beq.n	d7a1c <_strtod_l+0x2ac>
   d7a28:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d7a2c:	2908      	cmp	r1, #8
   d7a2e:	f63f af79 	bhi.w	d7924 <_strtod_l+0x1b4>
   d7a32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7a36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a38:	9308      	str	r3, [sp, #32]
   d7a3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a3c:	1c59      	adds	r1, r3, #1
   d7a3e:	911d      	str	r1, [sp, #116]	; 0x74
   d7a40:	785b      	ldrb	r3, [r3, #1]
   d7a42:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7a46:	2e09      	cmp	r6, #9
   d7a48:	d937      	bls.n	d7aba <_strtod_l+0x34a>
   d7a4a:	9e08      	ldr	r6, [sp, #32]
   d7a4c:	1b89      	subs	r1, r1, r6
   d7a4e:	2908      	cmp	r1, #8
   d7a50:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d7a54:	dc02      	bgt.n	d7a5c <_strtod_l+0x2ec>
   d7a56:	4576      	cmp	r6, lr
   d7a58:	bfa8      	it	ge
   d7a5a:	4676      	movge	r6, lr
   d7a5c:	f1bc 0f00 	cmp.w	ip, #0
   d7a60:	d000      	beq.n	d7a64 <_strtod_l+0x2f4>
   d7a62:	4276      	negs	r6, r6
   d7a64:	2d00      	cmp	r5, #0
   d7a66:	d14f      	bne.n	d7b08 <_strtod_l+0x398>
   d7a68:	9904      	ldr	r1, [sp, #16]
   d7a6a:	4301      	orrs	r1, r0
   d7a6c:	f47f aec2 	bne.w	d77f4 <_strtod_l+0x84>
   d7a70:	2a00      	cmp	r2, #0
   d7a72:	f47f aedb 	bne.w	d782c <_strtod_l+0xbc>
   d7a76:	2b69      	cmp	r3, #105	; 0x69
   d7a78:	d027      	beq.n	d7aca <_strtod_l+0x35a>
   d7a7a:	dc24      	bgt.n	d7ac6 <_strtod_l+0x356>
   d7a7c:	2b49      	cmp	r3, #73	; 0x49
   d7a7e:	d024      	beq.n	d7aca <_strtod_l+0x35a>
   d7a80:	2b4e      	cmp	r3, #78	; 0x4e
   d7a82:	f47f aed3 	bne.w	d782c <_strtod_l+0xbc>
   d7a86:	499e      	ldr	r1, [pc, #632]	; (d7d00 <_strtod_l+0x590>)
   d7a88:	a81d      	add	r0, sp, #116	; 0x74
   d7a8a:	f001 fa75 	bl	d8f78 <__match>
   d7a8e:	2800      	cmp	r0, #0
   d7a90:	f43f aecc 	beq.w	d782c <_strtod_l+0xbc>
   d7a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a96:	781b      	ldrb	r3, [r3, #0]
   d7a98:	2b28      	cmp	r3, #40	; 0x28
   d7a9a:	d12d      	bne.n	d7af8 <_strtod_l+0x388>
   d7a9c:	4999      	ldr	r1, [pc, #612]	; (d7d04 <_strtod_l+0x594>)
   d7a9e:	aa20      	add	r2, sp, #128	; 0x80
   d7aa0:	a81d      	add	r0, sp, #116	; 0x74
   d7aa2:	f001 fa7d 	bl	d8fa0 <__hexnan>
   d7aa6:	2805      	cmp	r0, #5
   d7aa8:	d126      	bne.n	d7af8 <_strtod_l+0x388>
   d7aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d7aac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d7ab0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7ab4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7ab8:	e69c      	b.n	d77f4 <_strtod_l+0x84>
   d7aba:	210a      	movs	r1, #10
   d7abc:	fb01 3e0e 	mla	lr, r1, lr, r3
   d7ac0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7ac4:	e7b9      	b.n	d7a3a <_strtod_l+0x2ca>
   d7ac6:	2b6e      	cmp	r3, #110	; 0x6e
   d7ac8:	e7db      	b.n	d7a82 <_strtod_l+0x312>
   d7aca:	498f      	ldr	r1, [pc, #572]	; (d7d08 <_strtod_l+0x598>)
   d7acc:	a81d      	add	r0, sp, #116	; 0x74
   d7ace:	f001 fa53 	bl	d8f78 <__match>
   d7ad2:	2800      	cmp	r0, #0
   d7ad4:	f43f aeaa 	beq.w	d782c <_strtod_l+0xbc>
   d7ad8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7ada:	498c      	ldr	r1, [pc, #560]	; (d7d0c <_strtod_l+0x59c>)
   d7adc:	3b01      	subs	r3, #1
   d7ade:	a81d      	add	r0, sp, #116	; 0x74
   d7ae0:	931d      	str	r3, [sp, #116]	; 0x74
   d7ae2:	f001 fa49 	bl	d8f78 <__match>
   d7ae6:	b910      	cbnz	r0, d7aee <_strtod_l+0x37e>
   d7ae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7aea:	3301      	adds	r3, #1
   d7aec:	931d      	str	r3, [sp, #116]	; 0x74
   d7aee:	f8df b22c 	ldr.w	fp, [pc, #556]	; d7d1c <_strtod_l+0x5ac>
   d7af2:	f04f 0a00 	mov.w	sl, #0
   d7af6:	e67d      	b.n	d77f4 <_strtod_l+0x84>
   d7af8:	4885      	ldr	r0, [pc, #532]	; (d7d10 <_strtod_l+0x5a0>)
   d7afa:	f002 f849 	bl	d9b90 <nan>
   d7afe:	ed8d 0b04 	vstr	d0, [sp, #16]
   d7b02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7b06:	e675      	b.n	d77f4 <_strtod_l+0x84>
   d7b08:	9b07      	ldr	r3, [sp, #28]
   d7b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d7b0c:	1af3      	subs	r3, r6, r3
   d7b0e:	2f00      	cmp	r7, #0
   d7b10:	bf08      	it	eq
   d7b12:	462f      	moveq	r7, r5
   d7b14:	2d10      	cmp	r5, #16
   d7b16:	9308      	str	r3, [sp, #32]
   d7b18:	46a8      	mov	r8, r5
   d7b1a:	bfa8      	it	ge
   d7b1c:	f04f 0810 	movge.w	r8, #16
   d7b20:	f7fe ff62 	bl	d69e8 <__aeabi_ui2d>
   d7b24:	2d09      	cmp	r5, #9
   d7b26:	4682      	mov	sl, r0
   d7b28:	468b      	mov	fp, r1
   d7b2a:	dd13      	ble.n	d7b54 <_strtod_l+0x3e4>
   d7b2c:	4b79      	ldr	r3, [pc, #484]	; (d7d14 <_strtod_l+0x5a4>)
   d7b2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d7b32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d7b36:	f7fe ffd1 	bl	d6adc <__aeabi_dmul>
   d7b3a:	4682      	mov	sl, r0
   d7b3c:	4648      	mov	r0, r9
   d7b3e:	468b      	mov	fp, r1
   d7b40:	f7fe ff52 	bl	d69e8 <__aeabi_ui2d>
   d7b44:	4602      	mov	r2, r0
   d7b46:	460b      	mov	r3, r1
   d7b48:	4650      	mov	r0, sl
   d7b4a:	4659      	mov	r1, fp
   d7b4c:	f7fe fe10 	bl	d6770 <__adddf3>
   d7b50:	4682      	mov	sl, r0
   d7b52:	468b      	mov	fp, r1
   d7b54:	2d0f      	cmp	r5, #15
   d7b56:	dc38      	bgt.n	d7bca <_strtod_l+0x45a>
   d7b58:	9b08      	ldr	r3, [sp, #32]
   d7b5a:	2b00      	cmp	r3, #0
   d7b5c:	f43f ae4a 	beq.w	d77f4 <_strtod_l+0x84>
   d7b60:	dd24      	ble.n	d7bac <_strtod_l+0x43c>
   d7b62:	2b16      	cmp	r3, #22
   d7b64:	dc0b      	bgt.n	d7b7e <_strtod_l+0x40e>
   d7b66:	4d6b      	ldr	r5, [pc, #428]	; (d7d14 <_strtod_l+0x5a4>)
   d7b68:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d7b6c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d7b70:	4652      	mov	r2, sl
   d7b72:	465b      	mov	r3, fp
   d7b74:	f7fe ffb2 	bl	d6adc <__aeabi_dmul>
   d7b78:	4682      	mov	sl, r0
   d7b7a:	468b      	mov	fp, r1
   d7b7c:	e63a      	b.n	d77f4 <_strtod_l+0x84>
   d7b7e:	9a08      	ldr	r2, [sp, #32]
   d7b80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7b84:	4293      	cmp	r3, r2
   d7b86:	db20      	blt.n	d7bca <_strtod_l+0x45a>
   d7b88:	4c62      	ldr	r4, [pc, #392]	; (d7d14 <_strtod_l+0x5a4>)
   d7b8a:	f1c5 050f 	rsb	r5, r5, #15
   d7b8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7b92:	4652      	mov	r2, sl
   d7b94:	465b      	mov	r3, fp
   d7b96:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7b9a:	f7fe ff9f 	bl	d6adc <__aeabi_dmul>
   d7b9e:	9b08      	ldr	r3, [sp, #32]
   d7ba0:	1b5d      	subs	r5, r3, r5
   d7ba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7baa:	e7e3      	b.n	d7b74 <_strtod_l+0x404>
   d7bac:	9b08      	ldr	r3, [sp, #32]
   d7bae:	3316      	adds	r3, #22
   d7bb0:	db0b      	blt.n	d7bca <_strtod_l+0x45a>
   d7bb2:	9b07      	ldr	r3, [sp, #28]
   d7bb4:	4a57      	ldr	r2, [pc, #348]	; (d7d14 <_strtod_l+0x5a4>)
   d7bb6:	1b9e      	subs	r6, r3, r6
   d7bb8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d7bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7bc0:	4650      	mov	r0, sl
   d7bc2:	4659      	mov	r1, fp
   d7bc4:	f7ff f8b4 	bl	d6d30 <__aeabi_ddiv>
   d7bc8:	e7d6      	b.n	d7b78 <_strtod_l+0x408>
   d7bca:	9b08      	ldr	r3, [sp, #32]
   d7bcc:	eba5 0808 	sub.w	r8, r5, r8
   d7bd0:	4498      	add	r8, r3
   d7bd2:	f1b8 0f00 	cmp.w	r8, #0
   d7bd6:	dd71      	ble.n	d7cbc <_strtod_l+0x54c>
   d7bd8:	f018 030f 	ands.w	r3, r8, #15
   d7bdc:	d00a      	beq.n	d7bf4 <_strtod_l+0x484>
   d7bde:	494d      	ldr	r1, [pc, #308]	; (d7d14 <_strtod_l+0x5a4>)
   d7be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d7be4:	4652      	mov	r2, sl
   d7be6:	465b      	mov	r3, fp
   d7be8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7bec:	f7fe ff76 	bl	d6adc <__aeabi_dmul>
   d7bf0:	4682      	mov	sl, r0
   d7bf2:	468b      	mov	fp, r1
   d7bf4:	f038 080f 	bics.w	r8, r8, #15
   d7bf8:	d04d      	beq.n	d7c96 <_strtod_l+0x526>
   d7bfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d7bfe:	dd22      	ble.n	d7c46 <_strtod_l+0x4d6>
   d7c00:	2500      	movs	r5, #0
   d7c02:	462e      	mov	r6, r5
   d7c04:	9509      	str	r5, [sp, #36]	; 0x24
   d7c06:	9507      	str	r5, [sp, #28]
   d7c08:	2322      	movs	r3, #34	; 0x22
   d7c0a:	f8df b110 	ldr.w	fp, [pc, #272]	; d7d1c <_strtod_l+0x5ac>
   d7c0e:	6023      	str	r3, [r4, #0]
   d7c10:	f04f 0a00 	mov.w	sl, #0
   d7c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7c16:	2b00      	cmp	r3, #0
   d7c18:	f43f adec 	beq.w	d77f4 <_strtod_l+0x84>
   d7c1c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f001 fb9a 	bl	d9358 <_Bfree>
   d7c24:	9907      	ldr	r1, [sp, #28]
   d7c26:	4620      	mov	r0, r4
   d7c28:	f001 fb96 	bl	d9358 <_Bfree>
   d7c2c:	4631      	mov	r1, r6
   d7c2e:	4620      	mov	r0, r4
   d7c30:	f001 fb92 	bl	d9358 <_Bfree>
   d7c34:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7c36:	4620      	mov	r0, r4
   d7c38:	f001 fb8e 	bl	d9358 <_Bfree>
   d7c3c:	4629      	mov	r1, r5
   d7c3e:	4620      	mov	r0, r4
   d7c40:	f001 fb8a 	bl	d9358 <_Bfree>
   d7c44:	e5d6      	b.n	d77f4 <_strtod_l+0x84>
   d7c46:	2300      	movs	r3, #0
   d7c48:	ea4f 1828 	mov.w	r8, r8, asr #4
   d7c4c:	4650      	mov	r0, sl
   d7c4e:	4659      	mov	r1, fp
   d7c50:	4699      	mov	r9, r3
   d7c52:	f1b8 0f01 	cmp.w	r8, #1
   d7c56:	dc21      	bgt.n	d7c9c <_strtod_l+0x52c>
   d7c58:	b10b      	cbz	r3, d7c5e <_strtod_l+0x4ee>
   d7c5a:	4682      	mov	sl, r0
   d7c5c:	468b      	mov	fp, r1
   d7c5e:	4b2e      	ldr	r3, [pc, #184]	; (d7d18 <_strtod_l+0x5a8>)
   d7c60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7c64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d7c68:	4652      	mov	r2, sl
   d7c6a:	465b      	mov	r3, fp
   d7c6c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7c70:	f7fe ff34 	bl	d6adc <__aeabi_dmul>
   d7c74:	4b29      	ldr	r3, [pc, #164]	; (d7d1c <_strtod_l+0x5ac>)
   d7c76:	460a      	mov	r2, r1
   d7c78:	400b      	ands	r3, r1
   d7c7a:	4929      	ldr	r1, [pc, #164]	; (d7d20 <_strtod_l+0x5b0>)
   d7c7c:	428b      	cmp	r3, r1
   d7c7e:	4682      	mov	sl, r0
   d7c80:	d8be      	bhi.n	d7c00 <_strtod_l+0x490>
   d7c82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7c86:	428b      	cmp	r3, r1
   d7c88:	bf86      	itte	hi
   d7c8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d7d24 <_strtod_l+0x5b4>
   d7c8e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7c92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7c96:	2300      	movs	r3, #0
   d7c98:	9304      	str	r3, [sp, #16]
   d7c9a:	e081      	b.n	d7da0 <_strtod_l+0x630>
   d7c9c:	f018 0f01 	tst.w	r8, #1
   d7ca0:	d007      	beq.n	d7cb2 <_strtod_l+0x542>
   d7ca2:	4b1d      	ldr	r3, [pc, #116]	; (d7d18 <_strtod_l+0x5a8>)
   d7ca4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cac:	f7fe ff16 	bl	d6adc <__aeabi_dmul>
   d7cb0:	2301      	movs	r3, #1
   d7cb2:	f109 0901 	add.w	r9, r9, #1
   d7cb6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7cba:	e7ca      	b.n	d7c52 <_strtod_l+0x4e2>
   d7cbc:	d0eb      	beq.n	d7c96 <_strtod_l+0x526>
   d7cbe:	f1c8 0800 	rsb	r8, r8, #0
   d7cc2:	f018 020f 	ands.w	r2, r8, #15
   d7cc6:	d00a      	beq.n	d7cde <_strtod_l+0x56e>
   d7cc8:	4b12      	ldr	r3, [pc, #72]	; (d7d14 <_strtod_l+0x5a4>)
   d7cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7cce:	4650      	mov	r0, sl
   d7cd0:	4659      	mov	r1, fp
   d7cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cd6:	f7ff f82b 	bl	d6d30 <__aeabi_ddiv>
   d7cda:	4682      	mov	sl, r0
   d7cdc:	468b      	mov	fp, r1
   d7cde:	ea5f 1828 	movs.w	r8, r8, asr #4
   d7ce2:	d0d8      	beq.n	d7c96 <_strtod_l+0x526>
   d7ce4:	f1b8 0f1f 	cmp.w	r8, #31
   d7ce8:	dd1e      	ble.n	d7d28 <_strtod_l+0x5b8>
   d7cea:	2500      	movs	r5, #0
   d7cec:	462e      	mov	r6, r5
   d7cee:	9509      	str	r5, [sp, #36]	; 0x24
   d7cf0:	9507      	str	r5, [sp, #28]
   d7cf2:	2322      	movs	r3, #34	; 0x22
   d7cf4:	f04f 0a00 	mov.w	sl, #0
   d7cf8:	f04f 0b00 	mov.w	fp, #0
   d7cfc:	6023      	str	r3, [r4, #0]
   d7cfe:	e789      	b.n	d7c14 <_strtod_l+0x4a4>
   d7d00:	000da1fd 	.word	0x000da1fd
   d7d04:	000da214 	.word	0x000da214
   d7d08:	000da1f4 	.word	0x000da1f4
   d7d0c:	000da1f7 	.word	0x000da1f7
   d7d10:	000d9db6 	.word	0x000d9db6
   d7d14:	000da3d0 	.word	0x000da3d0
   d7d18:	000da3a8 	.word	0x000da3a8
   d7d1c:	7ff00000 	.word	0x7ff00000
   d7d20:	7ca00000 	.word	0x7ca00000
   d7d24:	7fefffff 	.word	0x7fefffff
   d7d28:	f018 0310 	ands.w	r3, r8, #16
   d7d2c:	bf18      	it	ne
   d7d2e:	236a      	movne	r3, #106	; 0x6a
   d7d30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d80e8 <_strtod_l+0x978>
   d7d34:	9304      	str	r3, [sp, #16]
   d7d36:	4650      	mov	r0, sl
   d7d38:	4659      	mov	r1, fp
   d7d3a:	2300      	movs	r3, #0
   d7d3c:	f018 0f01 	tst.w	r8, #1
   d7d40:	d004      	beq.n	d7d4c <_strtod_l+0x5dc>
   d7d42:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7d46:	f7fe fec9 	bl	d6adc <__aeabi_dmul>
   d7d4a:	2301      	movs	r3, #1
   d7d4c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d7d50:	f109 0908 	add.w	r9, r9, #8
   d7d54:	d1f2      	bne.n	d7d3c <_strtod_l+0x5cc>
   d7d56:	b10b      	cbz	r3, d7d5c <_strtod_l+0x5ec>
   d7d58:	4682      	mov	sl, r0
   d7d5a:	468b      	mov	fp, r1
   d7d5c:	9b04      	ldr	r3, [sp, #16]
   d7d5e:	b1bb      	cbz	r3, d7d90 <_strtod_l+0x620>
   d7d60:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7d64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7d68:	2b00      	cmp	r3, #0
   d7d6a:	4659      	mov	r1, fp
   d7d6c:	dd10      	ble.n	d7d90 <_strtod_l+0x620>
   d7d6e:	2b1f      	cmp	r3, #31
   d7d70:	f340 8128 	ble.w	d7fc4 <_strtod_l+0x854>
   d7d74:	2b34      	cmp	r3, #52	; 0x34
   d7d76:	bfde      	ittt	le
   d7d78:	3b20      	suble	r3, #32
   d7d7a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7d7e:	fa02 f303 	lslle.w	r3, r2, r3
   d7d82:	f04f 0a00 	mov.w	sl, #0
   d7d86:	bfcc      	ite	gt
   d7d88:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7d8c:	ea03 0b01 	andle.w	fp, r3, r1
   d7d90:	2200      	movs	r2, #0
   d7d92:	2300      	movs	r3, #0
   d7d94:	4650      	mov	r0, sl
   d7d96:	4659      	mov	r1, fp
   d7d98:	f7ff f908 	bl	d6fac <__aeabi_dcmpeq>
   d7d9c:	2800      	cmp	r0, #0
   d7d9e:	d1a4      	bne.n	d7cea <_strtod_l+0x57a>
   d7da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7da2:	9300      	str	r3, [sp, #0]
   d7da4:	990a      	ldr	r1, [sp, #40]	; 0x28
   d7da6:	462b      	mov	r3, r5
   d7da8:	463a      	mov	r2, r7
   d7daa:	4620      	mov	r0, r4
   d7dac:	f001 fb29 	bl	d9402 <__s2b>
   d7db0:	9009      	str	r0, [sp, #36]	; 0x24
   d7db2:	2800      	cmp	r0, #0
   d7db4:	f43f af24 	beq.w	d7c00 <_strtod_l+0x490>
   d7db8:	9b07      	ldr	r3, [sp, #28]
   d7dba:	1b9e      	subs	r6, r3, r6
   d7dbc:	9b08      	ldr	r3, [sp, #32]
   d7dbe:	2b00      	cmp	r3, #0
   d7dc0:	bfb4      	ite	lt
   d7dc2:	4633      	movlt	r3, r6
   d7dc4:	2300      	movge	r3, #0
   d7dc6:	9310      	str	r3, [sp, #64]	; 0x40
   d7dc8:	9b08      	ldr	r3, [sp, #32]
   d7dca:	2500      	movs	r5, #0
   d7dcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7dd0:	9318      	str	r3, [sp, #96]	; 0x60
   d7dd2:	462e      	mov	r6, r5
   d7dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7dd6:	4620      	mov	r0, r4
   d7dd8:	6859      	ldr	r1, [r3, #4]
   d7dda:	f001 fa89 	bl	d92f0 <_Balloc>
   d7dde:	9007      	str	r0, [sp, #28]
   d7de0:	2800      	cmp	r0, #0
   d7de2:	f43f af11 	beq.w	d7c08 <_strtod_l+0x498>
   d7de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7de8:	691a      	ldr	r2, [r3, #16]
   d7dea:	3202      	adds	r2, #2
   d7dec:	f103 010c 	add.w	r1, r3, #12
   d7df0:	0092      	lsls	r2, r2, #2
   d7df2:	300c      	adds	r0, #12
   d7df4:	f7ff fc0a 	bl	d760c <memcpy>
   d7df8:	ec4b ab10 	vmov	d0, sl, fp
   d7dfc:	aa20      	add	r2, sp, #128	; 0x80
   d7dfe:	a91f      	add	r1, sp, #124	; 0x7c
   d7e00:	4620      	mov	r0, r4
   d7e02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d7e06:	f001 fdeb 	bl	d99e0 <__d2b>
   d7e0a:	901e      	str	r0, [sp, #120]	; 0x78
   d7e0c:	2800      	cmp	r0, #0
   d7e0e:	f43f aefb 	beq.w	d7c08 <_strtod_l+0x498>
   d7e12:	2101      	movs	r1, #1
   d7e14:	4620      	mov	r0, r4
   d7e16:	f001 fb82 	bl	d951e <__i2b>
   d7e1a:	4606      	mov	r6, r0
   d7e1c:	2800      	cmp	r0, #0
   d7e1e:	f43f aef3 	beq.w	d7c08 <_strtod_l+0x498>
   d7e22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d7e24:	9904      	ldr	r1, [sp, #16]
   d7e26:	2b00      	cmp	r3, #0
   d7e28:	bfab      	itete	ge
   d7e2a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d7e2c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d7e2e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d7e30:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d7e34:	bfac      	ite	ge
   d7e36:	eb03 0902 	addge.w	r9, r3, r2
   d7e3a:	1ad7      	sublt	r7, r2, r3
   d7e3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d7e3e:	eba3 0801 	sub.w	r8, r3, r1
   d7e42:	4490      	add	r8, r2
   d7e44:	4ba3      	ldr	r3, [pc, #652]	; (d80d4 <_strtod_l+0x964>)
   d7e46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d7e4a:	4598      	cmp	r8, r3
   d7e4c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d7e50:	f280 80cc 	bge.w	d7fec <_strtod_l+0x87c>
   d7e54:	eba3 0308 	sub.w	r3, r3, r8
   d7e58:	2b1f      	cmp	r3, #31
   d7e5a:	eba2 0203 	sub.w	r2, r2, r3
   d7e5e:	f04f 0101 	mov.w	r1, #1
   d7e62:	f300 80b6 	bgt.w	d7fd2 <_strtod_l+0x862>
   d7e66:	fa01 f303 	lsl.w	r3, r1, r3
   d7e6a:	9311      	str	r3, [sp, #68]	; 0x44
   d7e6c:	2300      	movs	r3, #0
   d7e6e:	930c      	str	r3, [sp, #48]	; 0x30
   d7e70:	eb09 0802 	add.w	r8, r9, r2
   d7e74:	9b04      	ldr	r3, [sp, #16]
   d7e76:	45c1      	cmp	r9, r8
   d7e78:	4417      	add	r7, r2
   d7e7a:	441f      	add	r7, r3
   d7e7c:	464b      	mov	r3, r9
   d7e7e:	bfa8      	it	ge
   d7e80:	4643      	movge	r3, r8
   d7e82:	42bb      	cmp	r3, r7
   d7e84:	bfa8      	it	ge
   d7e86:	463b      	movge	r3, r7
   d7e88:	2b00      	cmp	r3, #0
   d7e8a:	bfc2      	ittt	gt
   d7e8c:	eba8 0803 	subgt.w	r8, r8, r3
   d7e90:	1aff      	subgt	r7, r7, r3
   d7e92:	eba9 0903 	subgt.w	r9, r9, r3
   d7e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7e98:	2b00      	cmp	r3, #0
   d7e9a:	dd17      	ble.n	d7ecc <_strtod_l+0x75c>
   d7e9c:	4631      	mov	r1, r6
   d7e9e:	461a      	mov	r2, r3
   d7ea0:	4620      	mov	r0, r4
   d7ea2:	f001 fbe1 	bl	d9668 <__pow5mult>
   d7ea6:	4606      	mov	r6, r0
   d7ea8:	2800      	cmp	r0, #0
   d7eaa:	f43f aead 	beq.w	d7c08 <_strtod_l+0x498>
   d7eae:	4601      	mov	r1, r0
   d7eb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7eb2:	4620      	mov	r0, r4
   d7eb4:	f001 fb3c 	bl	d9530 <__multiply>
   d7eb8:	900f      	str	r0, [sp, #60]	; 0x3c
   d7eba:	2800      	cmp	r0, #0
   d7ebc:	f43f aea4 	beq.w	d7c08 <_strtod_l+0x498>
   d7ec0:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7ec2:	4620      	mov	r0, r4
   d7ec4:	f001 fa48 	bl	d9358 <_Bfree>
   d7ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7eca:	931e      	str	r3, [sp, #120]	; 0x78
   d7ecc:	f1b8 0f00 	cmp.w	r8, #0
   d7ed0:	f300 8091 	bgt.w	d7ff6 <_strtod_l+0x886>
   d7ed4:	9b08      	ldr	r3, [sp, #32]
   d7ed6:	2b00      	cmp	r3, #0
   d7ed8:	dd08      	ble.n	d7eec <_strtod_l+0x77c>
   d7eda:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7edc:	9907      	ldr	r1, [sp, #28]
   d7ede:	4620      	mov	r0, r4
   d7ee0:	f001 fbc2 	bl	d9668 <__pow5mult>
   d7ee4:	9007      	str	r0, [sp, #28]
   d7ee6:	2800      	cmp	r0, #0
   d7ee8:	f43f ae8e 	beq.w	d7c08 <_strtod_l+0x498>
   d7eec:	2f00      	cmp	r7, #0
   d7eee:	dd08      	ble.n	d7f02 <_strtod_l+0x792>
   d7ef0:	9907      	ldr	r1, [sp, #28]
   d7ef2:	463a      	mov	r2, r7
   d7ef4:	4620      	mov	r0, r4
   d7ef6:	f001 fc05 	bl	d9704 <__lshift>
   d7efa:	9007      	str	r0, [sp, #28]
   d7efc:	2800      	cmp	r0, #0
   d7efe:	f43f ae83 	beq.w	d7c08 <_strtod_l+0x498>
   d7f02:	f1b9 0f00 	cmp.w	r9, #0
   d7f06:	dd08      	ble.n	d7f1a <_strtod_l+0x7aa>
   d7f08:	4631      	mov	r1, r6
   d7f0a:	464a      	mov	r2, r9
   d7f0c:	4620      	mov	r0, r4
   d7f0e:	f001 fbf9 	bl	d9704 <__lshift>
   d7f12:	4606      	mov	r6, r0
   d7f14:	2800      	cmp	r0, #0
   d7f16:	f43f ae77 	beq.w	d7c08 <_strtod_l+0x498>
   d7f1a:	9a07      	ldr	r2, [sp, #28]
   d7f1c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7f1e:	4620      	mov	r0, r4
   d7f20:	f001 fc6b 	bl	d97fa <__mdiff>
   d7f24:	4605      	mov	r5, r0
   d7f26:	2800      	cmp	r0, #0
   d7f28:	f43f ae6e 	beq.w	d7c08 <_strtod_l+0x498>
   d7f2c:	68c3      	ldr	r3, [r0, #12]
   d7f2e:	930f      	str	r3, [sp, #60]	; 0x3c
   d7f30:	2300      	movs	r3, #0
   d7f32:	60c3      	str	r3, [r0, #12]
   d7f34:	4631      	mov	r1, r6
   d7f36:	f001 fc44 	bl	d97c2 <__mcmp>
   d7f3a:	2800      	cmp	r0, #0
   d7f3c:	da65      	bge.n	d800a <_strtod_l+0x89a>
   d7f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7f40:	ea53 030a 	orrs.w	r3, r3, sl
   d7f44:	f040 8087 	bne.w	d8056 <_strtod_l+0x8e6>
   d7f48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7f4c:	2b00      	cmp	r3, #0
   d7f4e:	f040 8082 	bne.w	d8056 <_strtod_l+0x8e6>
   d7f52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7f56:	0d1b      	lsrs	r3, r3, #20
   d7f58:	051b      	lsls	r3, r3, #20
   d7f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d7f5e:	d97a      	bls.n	d8056 <_strtod_l+0x8e6>
   d7f60:	696b      	ldr	r3, [r5, #20]
   d7f62:	b913      	cbnz	r3, d7f6a <_strtod_l+0x7fa>
   d7f64:	692b      	ldr	r3, [r5, #16]
   d7f66:	2b01      	cmp	r3, #1
   d7f68:	dd75      	ble.n	d8056 <_strtod_l+0x8e6>
   d7f6a:	4629      	mov	r1, r5
   d7f6c:	2201      	movs	r2, #1
   d7f6e:	4620      	mov	r0, r4
   d7f70:	f001 fbc8 	bl	d9704 <__lshift>
   d7f74:	4631      	mov	r1, r6
   d7f76:	4605      	mov	r5, r0
   d7f78:	f001 fc23 	bl	d97c2 <__mcmp>
   d7f7c:	2800      	cmp	r0, #0
   d7f7e:	dd6a      	ble.n	d8056 <_strtod_l+0x8e6>
   d7f80:	9904      	ldr	r1, [sp, #16]
   d7f82:	4a55      	ldr	r2, [pc, #340]	; (d80d8 <_strtod_l+0x968>)
   d7f84:	465b      	mov	r3, fp
   d7f86:	2900      	cmp	r1, #0
   d7f88:	f000 8085 	beq.w	d8096 <_strtod_l+0x926>
   d7f8c:	ea02 010b 	and.w	r1, r2, fp
   d7f90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d7f94:	dc7f      	bgt.n	d8096 <_strtod_l+0x926>
   d7f96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d7f9a:	f77f aeaa 	ble.w	d7cf2 <_strtod_l+0x582>
   d7f9e:	4a4f      	ldr	r2, [pc, #316]	; (d80dc <_strtod_l+0x96c>)
   d7fa0:	2300      	movs	r3, #0
   d7fa2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d7fa6:	4650      	mov	r0, sl
   d7fa8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d7fac:	4659      	mov	r1, fp
   d7fae:	f7fe fd95 	bl	d6adc <__aeabi_dmul>
   d7fb2:	460b      	mov	r3, r1
   d7fb4:	4303      	orrs	r3, r0
   d7fb6:	bf08      	it	eq
   d7fb8:	2322      	moveq	r3, #34	; 0x22
   d7fba:	4682      	mov	sl, r0
   d7fbc:	468b      	mov	fp, r1
   d7fbe:	bf08      	it	eq
   d7fc0:	6023      	streq	r3, [r4, #0]
   d7fc2:	e62b      	b.n	d7c1c <_strtod_l+0x4ac>
   d7fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7fc8:	fa02 f303 	lsl.w	r3, r2, r3
   d7fcc:	ea03 0a0a 	and.w	sl, r3, sl
   d7fd0:	e6de      	b.n	d7d90 <_strtod_l+0x620>
   d7fd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d7fd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d7fda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d7fde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d7fe2:	fa01 f308 	lsl.w	r3, r1, r8
   d7fe6:	930c      	str	r3, [sp, #48]	; 0x30
   d7fe8:	9111      	str	r1, [sp, #68]	; 0x44
   d7fea:	e741      	b.n	d7e70 <_strtod_l+0x700>
   d7fec:	2300      	movs	r3, #0
   d7fee:	930c      	str	r3, [sp, #48]	; 0x30
   d7ff0:	2301      	movs	r3, #1
   d7ff2:	9311      	str	r3, [sp, #68]	; 0x44
   d7ff4:	e73c      	b.n	d7e70 <_strtod_l+0x700>
   d7ff6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7ff8:	4642      	mov	r2, r8
   d7ffa:	4620      	mov	r0, r4
   d7ffc:	f001 fb82 	bl	d9704 <__lshift>
   d8000:	901e      	str	r0, [sp, #120]	; 0x78
   d8002:	2800      	cmp	r0, #0
   d8004:	f47f af66 	bne.w	d7ed4 <_strtod_l+0x764>
   d8008:	e5fe      	b.n	d7c08 <_strtod_l+0x498>
   d800a:	465f      	mov	r7, fp
   d800c:	d16e      	bne.n	d80ec <_strtod_l+0x97c>
   d800e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8010:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8014:	b342      	cbz	r2, d8068 <_strtod_l+0x8f8>
   d8016:	4a32      	ldr	r2, [pc, #200]	; (d80e0 <_strtod_l+0x970>)
   d8018:	4293      	cmp	r3, r2
   d801a:	d128      	bne.n	d806e <_strtod_l+0x8fe>
   d801c:	9b04      	ldr	r3, [sp, #16]
   d801e:	4650      	mov	r0, sl
   d8020:	b1eb      	cbz	r3, d805e <_strtod_l+0x8ee>
   d8022:	4a2d      	ldr	r2, [pc, #180]	; (d80d8 <_strtod_l+0x968>)
   d8024:	403a      	ands	r2, r7
   d8026:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d802a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d802e:	d819      	bhi.n	d8064 <_strtod_l+0x8f4>
   d8030:	0d12      	lsrs	r2, r2, #20
   d8032:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d8036:	fa01 f303 	lsl.w	r3, r1, r3
   d803a:	4298      	cmp	r0, r3
   d803c:	d117      	bne.n	d806e <_strtod_l+0x8fe>
   d803e:	4b29      	ldr	r3, [pc, #164]	; (d80e4 <_strtod_l+0x974>)
   d8040:	429f      	cmp	r7, r3
   d8042:	d102      	bne.n	d804a <_strtod_l+0x8da>
   d8044:	3001      	adds	r0, #1
   d8046:	f43f addf 	beq.w	d7c08 <_strtod_l+0x498>
   d804a:	4b23      	ldr	r3, [pc, #140]	; (d80d8 <_strtod_l+0x968>)
   d804c:	403b      	ands	r3, r7
   d804e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8052:	f04f 0a00 	mov.w	sl, #0
   d8056:	9b04      	ldr	r3, [sp, #16]
   d8058:	2b00      	cmp	r3, #0
   d805a:	d1a0      	bne.n	d7f9e <_strtod_l+0x82e>
   d805c:	e5de      	b.n	d7c1c <_strtod_l+0x4ac>
   d805e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8062:	e7ea      	b.n	d803a <_strtod_l+0x8ca>
   d8064:	460b      	mov	r3, r1
   d8066:	e7e8      	b.n	d803a <_strtod_l+0x8ca>
   d8068:	ea53 030a 	orrs.w	r3, r3, sl
   d806c:	d088      	beq.n	d7f80 <_strtod_l+0x810>
   d806e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8070:	b1db      	cbz	r3, d80aa <_strtod_l+0x93a>
   d8072:	423b      	tst	r3, r7
   d8074:	d0ef      	beq.n	d8056 <_strtod_l+0x8e6>
   d8076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8078:	9a04      	ldr	r2, [sp, #16]
   d807a:	4650      	mov	r0, sl
   d807c:	4659      	mov	r1, fp
   d807e:	b1c3      	cbz	r3, d80b2 <_strtod_l+0x942>
   d8080:	f7ff fb5a 	bl	d7738 <sulp>
   d8084:	4602      	mov	r2, r0
   d8086:	460b      	mov	r3, r1
   d8088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d808c:	f7fe fb70 	bl	d6770 <__adddf3>
   d8090:	4682      	mov	sl, r0
   d8092:	468b      	mov	fp, r1
   d8094:	e7df      	b.n	d8056 <_strtod_l+0x8e6>
   d8096:	4013      	ands	r3, r2
   d8098:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d809c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d80a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d80a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d80a8:	e7d5      	b.n	d8056 <_strtod_l+0x8e6>
   d80aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d80ac:	ea13 0f0a 	tst.w	r3, sl
   d80b0:	e7e0      	b.n	d8074 <_strtod_l+0x904>
   d80b2:	f7ff fb41 	bl	d7738 <sulp>
   d80b6:	4602      	mov	r2, r0
   d80b8:	460b      	mov	r3, r1
   d80ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d80be:	f7fe fb55 	bl	d676c <__aeabi_dsub>
   d80c2:	2200      	movs	r2, #0
   d80c4:	2300      	movs	r3, #0
   d80c6:	4682      	mov	sl, r0
   d80c8:	468b      	mov	fp, r1
   d80ca:	f7fe ff6f 	bl	d6fac <__aeabi_dcmpeq>
   d80ce:	2800      	cmp	r0, #0
   d80d0:	d0c1      	beq.n	d8056 <_strtod_l+0x8e6>
   d80d2:	e60e      	b.n	d7cf2 <_strtod_l+0x582>
   d80d4:	fffffc02 	.word	0xfffffc02
   d80d8:	7ff00000 	.word	0x7ff00000
   d80dc:	39500000 	.word	0x39500000
   d80e0:	000fffff 	.word	0x000fffff
   d80e4:	7fefffff 	.word	0x7fefffff
   d80e8:	000da228 	.word	0x000da228
   d80ec:	4631      	mov	r1, r6
   d80ee:	4628      	mov	r0, r5
   d80f0:	f001 fcc6 	bl	d9a80 <__ratio>
   d80f4:	ec59 8b10 	vmov	r8, r9, d0
   d80f8:	ee10 0a10 	vmov	r0, s0
   d80fc:	2200      	movs	r2, #0
   d80fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8102:	4649      	mov	r1, r9
   d8104:	f7fe ff66 	bl	d6fd4 <__aeabi_dcmple>
   d8108:	2800      	cmp	r0, #0
   d810a:	d07c      	beq.n	d8206 <_strtod_l+0xa96>
   d810c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d810e:	2b00      	cmp	r3, #0
   d8110:	d04c      	beq.n	d81ac <_strtod_l+0xa3c>
   d8112:	4b95      	ldr	r3, [pc, #596]	; (d8368 <_strtod_l+0xbf8>)
   d8114:	2200      	movs	r2, #0
   d8116:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d811a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8368 <_strtod_l+0xbf8>
   d811e:	f04f 0800 	mov.w	r8, #0
   d8122:	4b92      	ldr	r3, [pc, #584]	; (d836c <_strtod_l+0xbfc>)
   d8124:	403b      	ands	r3, r7
   d8126:	9311      	str	r3, [sp, #68]	; 0x44
   d8128:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d812a:	4b91      	ldr	r3, [pc, #580]	; (d8370 <_strtod_l+0xc00>)
   d812c:	429a      	cmp	r2, r3
   d812e:	f040 80b2 	bne.w	d8296 <_strtod_l+0xb26>
   d8132:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d813a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d813e:	ec4b ab10 	vmov	d0, sl, fp
   d8142:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d8146:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d814a:	f001 fbcd 	bl	d98e8 <__ulp>
   d814e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8152:	ec53 2b10 	vmov	r2, r3, d0
   d8156:	f7fe fcc1 	bl	d6adc <__aeabi_dmul>
   d815a:	4652      	mov	r2, sl
   d815c:	465b      	mov	r3, fp
   d815e:	f7fe fb07 	bl	d6770 <__adddf3>
   d8162:	460b      	mov	r3, r1
   d8164:	4981      	ldr	r1, [pc, #516]	; (d836c <_strtod_l+0xbfc>)
   d8166:	4a83      	ldr	r2, [pc, #524]	; (d8374 <_strtod_l+0xc04>)
   d8168:	4019      	ands	r1, r3
   d816a:	4291      	cmp	r1, r2
   d816c:	4682      	mov	sl, r0
   d816e:	d95e      	bls.n	d822e <_strtod_l+0xabe>
   d8170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8172:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d8176:	4293      	cmp	r3, r2
   d8178:	d103      	bne.n	d8182 <_strtod_l+0xa12>
   d817a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d817c:	3301      	adds	r3, #1
   d817e:	f43f ad43 	beq.w	d7c08 <_strtod_l+0x498>
   d8182:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d8380 <_strtod_l+0xc10>
   d8186:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d818a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d818c:	4620      	mov	r0, r4
   d818e:	f001 f8e3 	bl	d9358 <_Bfree>
   d8192:	9907      	ldr	r1, [sp, #28]
   d8194:	4620      	mov	r0, r4
   d8196:	f001 f8df 	bl	d9358 <_Bfree>
   d819a:	4631      	mov	r1, r6
   d819c:	4620      	mov	r0, r4
   d819e:	f001 f8db 	bl	d9358 <_Bfree>
   d81a2:	4629      	mov	r1, r5
   d81a4:	4620      	mov	r0, r4
   d81a6:	f001 f8d7 	bl	d9358 <_Bfree>
   d81aa:	e613      	b.n	d7dd4 <_strtod_l+0x664>
   d81ac:	f1ba 0f00 	cmp.w	sl, #0
   d81b0:	d11b      	bne.n	d81ea <_strtod_l+0xa7a>
   d81b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d81b6:	b9f3      	cbnz	r3, d81f6 <_strtod_l+0xa86>
   d81b8:	4b6b      	ldr	r3, [pc, #428]	; (d8368 <_strtod_l+0xbf8>)
   d81ba:	2200      	movs	r2, #0
   d81bc:	4640      	mov	r0, r8
   d81be:	4649      	mov	r1, r9
   d81c0:	f7fe fefe 	bl	d6fc0 <__aeabi_dcmplt>
   d81c4:	b9d0      	cbnz	r0, d81fc <_strtod_l+0xa8c>
   d81c6:	4640      	mov	r0, r8
   d81c8:	4649      	mov	r1, r9
   d81ca:	4b6b      	ldr	r3, [pc, #428]	; (d8378 <_strtod_l+0xc08>)
   d81cc:	2200      	movs	r2, #0
   d81ce:	f7fe fc85 	bl	d6adc <__aeabi_dmul>
   d81d2:	4680      	mov	r8, r0
   d81d4:	4689      	mov	r9, r1
   d81d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d81da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d81de:	931b      	str	r3, [sp, #108]	; 0x6c
   d81e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d81e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d81e8:	e79b      	b.n	d8122 <_strtod_l+0x9b2>
   d81ea:	f1ba 0f01 	cmp.w	sl, #1
   d81ee:	d102      	bne.n	d81f6 <_strtod_l+0xa86>
   d81f0:	2f00      	cmp	r7, #0
   d81f2:	f43f ad7e 	beq.w	d7cf2 <_strtod_l+0x582>
   d81f6:	4b61      	ldr	r3, [pc, #388]	; (d837c <_strtod_l+0xc0c>)
   d81f8:	2200      	movs	r2, #0
   d81fa:	e78c      	b.n	d8116 <_strtod_l+0x9a6>
   d81fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; d8378 <_strtod_l+0xc08>
   d8200:	f04f 0800 	mov.w	r8, #0
   d8204:	e7e7      	b.n	d81d6 <_strtod_l+0xa66>
   d8206:	4b5c      	ldr	r3, [pc, #368]	; (d8378 <_strtod_l+0xc08>)
   d8208:	4640      	mov	r0, r8
   d820a:	4649      	mov	r1, r9
   d820c:	2200      	movs	r2, #0
   d820e:	f7fe fc65 	bl	d6adc <__aeabi_dmul>
   d8212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8214:	4680      	mov	r8, r0
   d8216:	4689      	mov	r9, r1
   d8218:	b933      	cbnz	r3, d8228 <_strtod_l+0xab8>
   d821a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d821e:	9012      	str	r0, [sp, #72]	; 0x48
   d8220:	9313      	str	r3, [sp, #76]	; 0x4c
   d8222:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d8226:	e7dd      	b.n	d81e4 <_strtod_l+0xa74>
   d8228:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d822c:	e7f9      	b.n	d8222 <_strtod_l+0xab2>
   d822e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d8232:	9b04      	ldr	r3, [sp, #16]
   d8234:	2b00      	cmp	r3, #0
   d8236:	d1a8      	bne.n	d818a <_strtod_l+0xa1a>
   d8238:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d823c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d823e:	0d1b      	lsrs	r3, r3, #20
   d8240:	051b      	lsls	r3, r3, #20
   d8242:	429a      	cmp	r2, r3
   d8244:	d1a1      	bne.n	d818a <_strtod_l+0xa1a>
   d8246:	4640      	mov	r0, r8
   d8248:	4649      	mov	r1, r9
   d824a:	f001 fd13 	bl	d9c74 <__aeabi_d2lz>
   d824e:	f7fe fc17 	bl	d6a80 <__aeabi_l2d>
   d8252:	4602      	mov	r2, r0
   d8254:	460b      	mov	r3, r1
   d8256:	4640      	mov	r0, r8
   d8258:	4649      	mov	r1, r9
   d825a:	f7fe fa87 	bl	d676c <__aeabi_dsub>
   d825e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8260:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8264:	ea43 030a 	orr.w	r3, r3, sl
   d8268:	4313      	orrs	r3, r2
   d826a:	4680      	mov	r8, r0
   d826c:	4689      	mov	r9, r1
   d826e:	d053      	beq.n	d8318 <_strtod_l+0xba8>
   d8270:	a335      	add	r3, pc, #212	; (adr r3, d8348 <_strtod_l+0xbd8>)
   d8272:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8276:	f7fe fea3 	bl	d6fc0 <__aeabi_dcmplt>
   d827a:	2800      	cmp	r0, #0
   d827c:	f47f acce 	bne.w	d7c1c <_strtod_l+0x4ac>
   d8280:	a333      	add	r3, pc, #204	; (adr r3, d8350 <_strtod_l+0xbe0>)
   d8282:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8286:	4640      	mov	r0, r8
   d8288:	4649      	mov	r1, r9
   d828a:	f7fe feb7 	bl	d6ffc <__aeabi_dcmpgt>
   d828e:	2800      	cmp	r0, #0
   d8290:	f43f af7b 	beq.w	d818a <_strtod_l+0xa1a>
   d8294:	e4c2      	b.n	d7c1c <_strtod_l+0x4ac>
   d8296:	9b04      	ldr	r3, [sp, #16]
   d8298:	b333      	cbz	r3, d82e8 <_strtod_l+0xb78>
   d829a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d829c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d82a0:	d822      	bhi.n	d82e8 <_strtod_l+0xb78>
   d82a2:	a32d      	add	r3, pc, #180	; (adr r3, d8358 <_strtod_l+0xbe8>)
   d82a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82a8:	4640      	mov	r0, r8
   d82aa:	4649      	mov	r1, r9
   d82ac:	f7fe fe92 	bl	d6fd4 <__aeabi_dcmple>
   d82b0:	b1a0      	cbz	r0, d82dc <_strtod_l+0xb6c>
   d82b2:	4649      	mov	r1, r9
   d82b4:	4640      	mov	r0, r8
   d82b6:	f7fe feab 	bl	d7010 <__aeabi_d2uiz>
   d82ba:	2801      	cmp	r0, #1
   d82bc:	bf38      	it	cc
   d82be:	2001      	movcc	r0, #1
   d82c0:	f7fe fb92 	bl	d69e8 <__aeabi_ui2d>
   d82c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d82c6:	4680      	mov	r8, r0
   d82c8:	4689      	mov	r9, r1
   d82ca:	bb13      	cbnz	r3, d8312 <_strtod_l+0xba2>
   d82cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d82d0:	9014      	str	r0, [sp, #80]	; 0x50
   d82d2:	9315      	str	r3, [sp, #84]	; 0x54
   d82d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d82d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d82dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d82de:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d82e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d82e4:	1a9b      	subs	r3, r3, r2
   d82e6:	930d      	str	r3, [sp, #52]	; 0x34
   d82e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d82ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d82f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d82f4:	f001 faf8 	bl	d98e8 <__ulp>
   d82f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d82fc:	ec53 2b10 	vmov	r2, r3, d0
   d8300:	f7fe fbec 	bl	d6adc <__aeabi_dmul>
   d8304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8308:	f7fe fa32 	bl	d6770 <__adddf3>
   d830c:	4682      	mov	sl, r0
   d830e:	468b      	mov	fp, r1
   d8310:	e78f      	b.n	d8232 <_strtod_l+0xac2>
   d8312:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d8316:	e7dd      	b.n	d82d4 <_strtod_l+0xb64>
   d8318:	a311      	add	r3, pc, #68	; (adr r3, d8360 <_strtod_l+0xbf0>)
   d831a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d831e:	f7fe fe4f 	bl	d6fc0 <__aeabi_dcmplt>
   d8322:	e7b4      	b.n	d828e <_strtod_l+0xb1e>
   d8324:	2300      	movs	r3, #0
   d8326:	930e      	str	r3, [sp, #56]	; 0x38
   d8328:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d832a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d832c:	6013      	str	r3, [r2, #0]
   d832e:	f7ff ba65 	b.w	d77fc <_strtod_l+0x8c>
   d8332:	2b65      	cmp	r3, #101	; 0x65
   d8334:	f43f ab5d 	beq.w	d79f2 <_strtod_l+0x282>
   d8338:	2b45      	cmp	r3, #69	; 0x45
   d833a:	f43f ab5a 	beq.w	d79f2 <_strtod_l+0x282>
   d833e:	2201      	movs	r2, #1
   d8340:	f7ff bb92 	b.w	d7a68 <_strtod_l+0x2f8>
   d8344:	f3af 8000 	nop.w
   d8348:	94a03595 	.word	0x94a03595
   d834c:	3fdfffff 	.word	0x3fdfffff
   d8350:	35afe535 	.word	0x35afe535
   d8354:	3fe00000 	.word	0x3fe00000
   d8358:	ffc00000 	.word	0xffc00000
   d835c:	41dfffff 	.word	0x41dfffff
   d8360:	94a03595 	.word	0x94a03595
   d8364:	3fcfffff 	.word	0x3fcfffff
   d8368:	3ff00000 	.word	0x3ff00000
   d836c:	7ff00000 	.word	0x7ff00000
   d8370:	7fe00000 	.word	0x7fe00000
   d8374:	7c9fffff 	.word	0x7c9fffff
   d8378:	3fe00000 	.word	0x3fe00000
   d837c:	bff00000 	.word	0xbff00000
   d8380:	7fefffff 	.word	0x7fefffff

000d8384 <strtod>:
   d8384:	460a      	mov	r2, r1
   d8386:	4601      	mov	r1, r0
   d8388:	4802      	ldr	r0, [pc, #8]	; (d8394 <strtod+0x10>)
   d838a:	4b03      	ldr	r3, [pc, #12]	; (d8398 <strtod+0x14>)
   d838c:	6800      	ldr	r0, [r0, #0]
   d838e:	f7ff b9ef 	b.w	d7770 <_strtod_l>
   d8392:	bf00      	nop
   d8394:	2003e26c 	.word	0x2003e26c
   d8398:	2003e334 	.word	0x2003e334

000d839c <_strtol_l.isra.0>:
   d839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83a0:	4e3a      	ldr	r6, [pc, #232]	; (d848c <_strtol_l.isra.0+0xf0>)
   d83a2:	4686      	mov	lr, r0
   d83a4:	468c      	mov	ip, r1
   d83a6:	4660      	mov	r0, ip
   d83a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d83ac:	5da5      	ldrb	r5, [r4, r6]
   d83ae:	f015 0508 	ands.w	r5, r5, #8
   d83b2:	d1f8      	bne.n	d83a6 <_strtol_l.isra.0+0xa>
   d83b4:	2c2d      	cmp	r4, #45	; 0x2d
   d83b6:	d133      	bne.n	d8420 <_strtol_l.isra.0+0x84>
   d83b8:	f89c 4000 	ldrb.w	r4, [ip]
   d83bc:	f04f 0801 	mov.w	r8, #1
   d83c0:	f100 0c02 	add.w	ip, r0, #2
   d83c4:	2b00      	cmp	r3, #0
   d83c6:	d05c      	beq.n	d8482 <_strtol_l.isra.0+0xe6>
   d83c8:	2b10      	cmp	r3, #16
   d83ca:	d10c      	bne.n	d83e6 <_strtol_l.isra.0+0x4a>
   d83cc:	2c30      	cmp	r4, #48	; 0x30
   d83ce:	d10a      	bne.n	d83e6 <_strtol_l.isra.0+0x4a>
   d83d0:	f89c 0000 	ldrb.w	r0, [ip]
   d83d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d83d8:	2858      	cmp	r0, #88	; 0x58
   d83da:	d14d      	bne.n	d8478 <_strtol_l.isra.0+0xdc>
   d83dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d83e0:	2310      	movs	r3, #16
   d83e2:	f10c 0c02 	add.w	ip, ip, #2
   d83e6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d83ea:	3f01      	subs	r7, #1
   d83ec:	2600      	movs	r6, #0
   d83ee:	fbb7 f9f3 	udiv	r9, r7, r3
   d83f2:	4630      	mov	r0, r6
   d83f4:	fb03 7a19 	mls	sl, r3, r9, r7
   d83f8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d83fc:	2d09      	cmp	r5, #9
   d83fe:	d818      	bhi.n	d8432 <_strtol_l.isra.0+0x96>
   d8400:	462c      	mov	r4, r5
   d8402:	42a3      	cmp	r3, r4
   d8404:	dd24      	ble.n	d8450 <_strtol_l.isra.0+0xb4>
   d8406:	1c75      	adds	r5, r6, #1
   d8408:	d007      	beq.n	d841a <_strtol_l.isra.0+0x7e>
   d840a:	4581      	cmp	r9, r0
   d840c:	d31d      	bcc.n	d844a <_strtol_l.isra.0+0xae>
   d840e:	d101      	bne.n	d8414 <_strtol_l.isra.0+0x78>
   d8410:	45a2      	cmp	sl, r4
   d8412:	db1a      	blt.n	d844a <_strtol_l.isra.0+0xae>
   d8414:	fb00 4003 	mla	r0, r0, r3, r4
   d8418:	2601      	movs	r6, #1
   d841a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d841e:	e7eb      	b.n	d83f8 <_strtol_l.isra.0+0x5c>
   d8420:	2c2b      	cmp	r4, #43	; 0x2b
   d8422:	bf08      	it	eq
   d8424:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8428:	46a8      	mov	r8, r5
   d842a:	bf08      	it	eq
   d842c:	f100 0c02 	addeq.w	ip, r0, #2
   d8430:	e7c8      	b.n	d83c4 <_strtol_l.isra.0+0x28>
   d8432:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8436:	2d19      	cmp	r5, #25
   d8438:	d801      	bhi.n	d843e <_strtol_l.isra.0+0xa2>
   d843a:	3c37      	subs	r4, #55	; 0x37
   d843c:	e7e1      	b.n	d8402 <_strtol_l.isra.0+0x66>
   d843e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8442:	2d19      	cmp	r5, #25
   d8444:	d804      	bhi.n	d8450 <_strtol_l.isra.0+0xb4>
   d8446:	3c57      	subs	r4, #87	; 0x57
   d8448:	e7db      	b.n	d8402 <_strtol_l.isra.0+0x66>
   d844a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d844e:	e7e4      	b.n	d841a <_strtol_l.isra.0+0x7e>
   d8450:	1c73      	adds	r3, r6, #1
   d8452:	d106      	bne.n	d8462 <_strtol_l.isra.0+0xc6>
   d8454:	2322      	movs	r3, #34	; 0x22
   d8456:	f8ce 3000 	str.w	r3, [lr]
   d845a:	4638      	mov	r0, r7
   d845c:	b942      	cbnz	r2, d8470 <_strtol_l.isra.0+0xd4>
   d845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8462:	f1b8 0f00 	cmp.w	r8, #0
   d8466:	d000      	beq.n	d846a <_strtol_l.isra.0+0xce>
   d8468:	4240      	negs	r0, r0
   d846a:	2a00      	cmp	r2, #0
   d846c:	d0f7      	beq.n	d845e <_strtol_l.isra.0+0xc2>
   d846e:	b10e      	cbz	r6, d8474 <_strtol_l.isra.0+0xd8>
   d8470:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8474:	6011      	str	r1, [r2, #0]
   d8476:	e7f2      	b.n	d845e <_strtol_l.isra.0+0xc2>
   d8478:	2430      	movs	r4, #48	; 0x30
   d847a:	2b00      	cmp	r3, #0
   d847c:	d1b3      	bne.n	d83e6 <_strtol_l.isra.0+0x4a>
   d847e:	2308      	movs	r3, #8
   d8480:	e7b1      	b.n	d83e6 <_strtol_l.isra.0+0x4a>
   d8482:	2c30      	cmp	r4, #48	; 0x30
   d8484:	d0a4      	beq.n	d83d0 <_strtol_l.isra.0+0x34>
   d8486:	230a      	movs	r3, #10
   d8488:	e7ad      	b.n	d83e6 <_strtol_l.isra.0+0x4a>
   d848a:	bf00      	nop
   d848c:	000da28d 	.word	0x000da28d

000d8490 <strtol>:
   d8490:	4613      	mov	r3, r2
   d8492:	460a      	mov	r2, r1
   d8494:	4601      	mov	r1, r0
   d8496:	4802      	ldr	r0, [pc, #8]	; (d84a0 <strtol+0x10>)
   d8498:	6800      	ldr	r0, [r0, #0]
   d849a:	f7ff bf7f 	b.w	d839c <_strtol_l.isra.0>
   d849e:	bf00      	nop
   d84a0:	2003e26c 	.word	0x2003e26c

000d84a4 <_strtoul_l.isra.0>:
   d84a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d84a8:	4e3b      	ldr	r6, [pc, #236]	; (d8598 <_strtoul_l.isra.0+0xf4>)
   d84aa:	4686      	mov	lr, r0
   d84ac:	468c      	mov	ip, r1
   d84ae:	4660      	mov	r0, ip
   d84b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d84b4:	5da5      	ldrb	r5, [r4, r6]
   d84b6:	f015 0508 	ands.w	r5, r5, #8
   d84ba:	d1f8      	bne.n	d84ae <_strtoul_l.isra.0+0xa>
   d84bc:	2c2d      	cmp	r4, #45	; 0x2d
   d84be:	d134      	bne.n	d852a <_strtoul_l.isra.0+0x86>
   d84c0:	f89c 4000 	ldrb.w	r4, [ip]
   d84c4:	f04f 0801 	mov.w	r8, #1
   d84c8:	f100 0c02 	add.w	ip, r0, #2
   d84cc:	2b00      	cmp	r3, #0
   d84ce:	d05e      	beq.n	d858e <_strtoul_l.isra.0+0xea>
   d84d0:	2b10      	cmp	r3, #16
   d84d2:	d10c      	bne.n	d84ee <_strtoul_l.isra.0+0x4a>
   d84d4:	2c30      	cmp	r4, #48	; 0x30
   d84d6:	d10a      	bne.n	d84ee <_strtoul_l.isra.0+0x4a>
   d84d8:	f89c 0000 	ldrb.w	r0, [ip]
   d84dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d84e0:	2858      	cmp	r0, #88	; 0x58
   d84e2:	d14f      	bne.n	d8584 <_strtoul_l.isra.0+0xe0>
   d84e4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d84e8:	2310      	movs	r3, #16
   d84ea:	f10c 0c02 	add.w	ip, ip, #2
   d84ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d84f2:	2500      	movs	r5, #0
   d84f4:	fbb7 f7f3 	udiv	r7, r7, r3
   d84f8:	fb03 f907 	mul.w	r9, r3, r7
   d84fc:	ea6f 0909 	mvn.w	r9, r9
   d8500:	4628      	mov	r0, r5
   d8502:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   d8506:	2e09      	cmp	r6, #9
   d8508:	d818      	bhi.n	d853c <_strtoul_l.isra.0+0x98>
   d850a:	4634      	mov	r4, r6
   d850c:	42a3      	cmp	r3, r4
   d850e:	dd24      	ble.n	d855a <_strtoul_l.isra.0+0xb6>
   d8510:	2d00      	cmp	r5, #0
   d8512:	db1f      	blt.n	d8554 <_strtoul_l.isra.0+0xb0>
   d8514:	4287      	cmp	r7, r0
   d8516:	d31d      	bcc.n	d8554 <_strtoul_l.isra.0+0xb0>
   d8518:	d101      	bne.n	d851e <_strtoul_l.isra.0+0x7a>
   d851a:	45a1      	cmp	r9, r4
   d851c:	db1a      	blt.n	d8554 <_strtoul_l.isra.0+0xb0>
   d851e:	fb00 4003 	mla	r0, r0, r3, r4
   d8522:	2501      	movs	r5, #1
   d8524:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8528:	e7eb      	b.n	d8502 <_strtoul_l.isra.0+0x5e>
   d852a:	2c2b      	cmp	r4, #43	; 0x2b
   d852c:	bf08      	it	eq
   d852e:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8532:	46a8      	mov	r8, r5
   d8534:	bf08      	it	eq
   d8536:	f100 0c02 	addeq.w	ip, r0, #2
   d853a:	e7c7      	b.n	d84cc <_strtoul_l.isra.0+0x28>
   d853c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   d8540:	2e19      	cmp	r6, #25
   d8542:	d801      	bhi.n	d8548 <_strtoul_l.isra.0+0xa4>
   d8544:	3c37      	subs	r4, #55	; 0x37
   d8546:	e7e1      	b.n	d850c <_strtoul_l.isra.0+0x68>
   d8548:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   d854c:	2e19      	cmp	r6, #25
   d854e:	d804      	bhi.n	d855a <_strtoul_l.isra.0+0xb6>
   d8550:	3c57      	subs	r4, #87	; 0x57
   d8552:	e7db      	b.n	d850c <_strtoul_l.isra.0+0x68>
   d8554:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8558:	e7e4      	b.n	d8524 <_strtoul_l.isra.0+0x80>
   d855a:	2d00      	cmp	r5, #0
   d855c:	da07      	bge.n	d856e <_strtoul_l.isra.0+0xca>
   d855e:	2322      	movs	r3, #34	; 0x22
   d8560:	f8ce 3000 	str.w	r3, [lr]
   d8564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8568:	b942      	cbnz	r2, d857c <_strtoul_l.isra.0+0xd8>
   d856a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d856e:	f1b8 0f00 	cmp.w	r8, #0
   d8572:	d000      	beq.n	d8576 <_strtoul_l.isra.0+0xd2>
   d8574:	4240      	negs	r0, r0
   d8576:	2a00      	cmp	r2, #0
   d8578:	d0f7      	beq.n	d856a <_strtoul_l.isra.0+0xc6>
   d857a:	b10d      	cbz	r5, d8580 <_strtoul_l.isra.0+0xdc>
   d857c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8580:	6011      	str	r1, [r2, #0]
   d8582:	e7f2      	b.n	d856a <_strtoul_l.isra.0+0xc6>
   d8584:	2430      	movs	r4, #48	; 0x30
   d8586:	2b00      	cmp	r3, #0
   d8588:	d1b1      	bne.n	d84ee <_strtoul_l.isra.0+0x4a>
   d858a:	2308      	movs	r3, #8
   d858c:	e7af      	b.n	d84ee <_strtoul_l.isra.0+0x4a>
   d858e:	2c30      	cmp	r4, #48	; 0x30
   d8590:	d0a2      	beq.n	d84d8 <_strtoul_l.isra.0+0x34>
   d8592:	230a      	movs	r3, #10
   d8594:	e7ab      	b.n	d84ee <_strtoul_l.isra.0+0x4a>
   d8596:	bf00      	nop
   d8598:	000da28d 	.word	0x000da28d

000d859c <strtoul>:
   d859c:	4613      	mov	r3, r2
   d859e:	460a      	mov	r2, r1
   d85a0:	4601      	mov	r1, r0
   d85a2:	4802      	ldr	r0, [pc, #8]	; (d85ac <strtoul+0x10>)
   d85a4:	6800      	ldr	r0, [r0, #0]
   d85a6:	f7ff bf7d 	b.w	d84a4 <_strtoul_l.isra.0>
   d85aa:	bf00      	nop
   d85ac:	2003e26c 	.word	0x2003e26c

000d85b0 <__tzcalc_limits>:
   d85b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85b4:	4680      	mov	r8, r0
   d85b6:	f000 fdd1 	bl	d915c <__gettzinfo>
   d85ba:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d85be:	4598      	cmp	r8, r3
   d85c0:	f340 8098 	ble.w	d86f4 <__tzcalc_limits+0x144>
   d85c4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d85c8:	4443      	add	r3, r8
   d85ca:	109b      	asrs	r3, r3, #2
   d85cc:	f240 126d 	movw	r2, #365	; 0x16d
   d85d0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   d85d4:	fb02 3505 	mla	r5, r2, r5, r3
   d85d8:	f06f 0263 	mvn.w	r2, #99	; 0x63
   d85dc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   d85e0:	fb93 f3f2 	sdiv	r3, r3, r2
   d85e4:	441d      	add	r5, r3
   d85e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d85ea:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d85ee:	fb98 f7f3 	sdiv	r7, r8, r3
   d85f2:	fb03 8717 	mls	r7, r3, r7, r8
   d85f6:	4442      	add	r2, r8
   d85f8:	fab7 fc87 	clz	ip, r7
   d85fc:	fbb2 f2f3 	udiv	r2, r2, r3
   d8600:	f008 0303 	and.w	r3, r8, #3
   d8604:	4415      	add	r5, r2
   d8606:	2264      	movs	r2, #100	; 0x64
   d8608:	f8c0 8004 	str.w	r8, [r0, #4]
   d860c:	fb98 f6f2 	sdiv	r6, r8, r2
   d8610:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   d8614:	fb02 8616 	mls	r6, r2, r6, r8
   d8618:	4604      	mov	r4, r0
   d861a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   d861e:	9300      	str	r3, [sp, #0]
   d8620:	f04f 0e07 	mov.w	lr, #7
   d8624:	7a22      	ldrb	r2, [r4, #8]
   d8626:	6963      	ldr	r3, [r4, #20]
   d8628:	2a4a      	cmp	r2, #74	; 0x4a
   d862a:	d128      	bne.n	d867e <__tzcalc_limits+0xce>
   d862c:	9900      	ldr	r1, [sp, #0]
   d862e:	18ea      	adds	r2, r5, r3
   d8630:	b901      	cbnz	r1, d8634 <__tzcalc_limits+0x84>
   d8632:	b906      	cbnz	r6, d8636 <__tzcalc_limits+0x86>
   d8634:	bb0f      	cbnz	r7, d867a <__tzcalc_limits+0xca>
   d8636:	2b3b      	cmp	r3, #59	; 0x3b
   d8638:	bfd4      	ite	le
   d863a:	2300      	movle	r3, #0
   d863c:	2301      	movgt	r3, #1
   d863e:	4413      	add	r3, r2
   d8640:	1e5a      	subs	r2, r3, #1
   d8642:	69a3      	ldr	r3, [r4, #24]
   d8644:	492c      	ldr	r1, [pc, #176]	; (d86f8 <__tzcalc_limits+0x148>)
   d8646:	fb01 3202 	mla	r2, r1, r2, r3
   d864a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d864c:	4413      	add	r3, r2
   d864e:	461a      	mov	r2, r3
   d8650:	17db      	asrs	r3, r3, #31
   d8652:	e9c4 2308 	strd	r2, r3, [r4, #32]
   d8656:	3428      	adds	r4, #40	; 0x28
   d8658:	45a3      	cmp	fp, r4
   d865a:	d1e3      	bne.n	d8624 <__tzcalc_limits+0x74>
   d865c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   d8660:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   d8664:	4294      	cmp	r4, r2
   d8666:	eb75 0303 	sbcs.w	r3, r5, r3
   d866a:	bfb4      	ite	lt
   d866c:	2301      	movlt	r3, #1
   d866e:	2300      	movge	r3, #0
   d8670:	6003      	str	r3, [r0, #0]
   d8672:	2001      	movs	r0, #1
   d8674:	b003      	add	sp, #12
   d8676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d867a:	2300      	movs	r3, #0
   d867c:	e7df      	b.n	d863e <__tzcalc_limits+0x8e>
   d867e:	2a44      	cmp	r2, #68	; 0x44
   d8680:	d101      	bne.n	d8686 <__tzcalc_limits+0xd6>
   d8682:	18ea      	adds	r2, r5, r3
   d8684:	e7dd      	b.n	d8642 <__tzcalc_limits+0x92>
   d8686:	9a00      	ldr	r2, [sp, #0]
   d8688:	bb72      	cbnz	r2, d86e8 <__tzcalc_limits+0x138>
   d868a:	2e00      	cmp	r6, #0
   d868c:	bf0c      	ite	eq
   d868e:	46e0      	moveq	r8, ip
   d8690:	f04f 0801 	movne.w	r8, #1
   d8694:	4919      	ldr	r1, [pc, #100]	; (d86fc <__tzcalc_limits+0x14c>)
   d8696:	68e2      	ldr	r2, [r4, #12]
   d8698:	9201      	str	r2, [sp, #4]
   d869a:	f04f 0a30 	mov.w	sl, #48	; 0x30
   d869e:	fb0a 1808 	mla	r8, sl, r8, r1
   d86a2:	462a      	mov	r2, r5
   d86a4:	f04f 0900 	mov.w	r9, #0
   d86a8:	f1a8 0804 	sub.w	r8, r8, #4
   d86ac:	9901      	ldr	r1, [sp, #4]
   d86ae:	f109 0901 	add.w	r9, r9, #1
   d86b2:	4549      	cmp	r1, r9
   d86b4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   d86b8:	dc18      	bgt.n	d86ec <__tzcalc_limits+0x13c>
   d86ba:	f102 0804 	add.w	r8, r2, #4
   d86be:	fb98 f9fe 	sdiv	r9, r8, lr
   d86c2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   d86c6:	eba8 0909 	sub.w	r9, r8, r9
   d86ca:	ebb3 0909 	subs.w	r9, r3, r9
   d86ce:	6923      	ldr	r3, [r4, #16]
   d86d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d86d4:	bf48      	it	mi
   d86d6:	f109 0907 	addmi.w	r9, r9, #7
   d86da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d86de:	444b      	add	r3, r9
   d86e0:	4553      	cmp	r3, sl
   d86e2:	da05      	bge.n	d86f0 <__tzcalc_limits+0x140>
   d86e4:	441a      	add	r2, r3
   d86e6:	e7ac      	b.n	d8642 <__tzcalc_limits+0x92>
   d86e8:	46e0      	mov	r8, ip
   d86ea:	e7d3      	b.n	d8694 <__tzcalc_limits+0xe4>
   d86ec:	4452      	add	r2, sl
   d86ee:	e7dd      	b.n	d86ac <__tzcalc_limits+0xfc>
   d86f0:	3b07      	subs	r3, #7
   d86f2:	e7f5      	b.n	d86e0 <__tzcalc_limits+0x130>
   d86f4:	2000      	movs	r0, #0
   d86f6:	e7bd      	b.n	d8674 <__tzcalc_limits+0xc4>
   d86f8:	00015180 	.word	0x00015180
   d86fc:	000da194 	.word	0x000da194

000d8700 <__tz_lock>:
   d8700:	4801      	ldr	r0, [pc, #4]	; (d8708 <__tz_lock+0x8>)
   d8702:	f000 bddf 	b.w	d92c4 <__retarget_lock_acquire>
   d8706:	bf00      	nop
   d8708:	2003e7ef 	.word	0x2003e7ef

000d870c <__tz_unlock>:
   d870c:	4801      	ldr	r0, [pc, #4]	; (d8714 <__tz_unlock+0x8>)
   d870e:	f000 bddb 	b.w	d92c8 <__retarget_lock_release>
   d8712:	bf00      	nop
   d8714:	2003e7ef 	.word	0x2003e7ef

000d8718 <_tzset_unlocked>:
   d8718:	4b01      	ldr	r3, [pc, #4]	; (d8720 <_tzset_unlocked+0x8>)
   d871a:	6818      	ldr	r0, [r3, #0]
   d871c:	f000 b802 	b.w	d8724 <_tzset_unlocked_r>
   d8720:	2003e26c 	.word	0x2003e26c

000d8724 <_tzset_unlocked_r>:
   d8724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8728:	b08d      	sub	sp, #52	; 0x34
   d872a:	4607      	mov	r7, r0
   d872c:	f000 fd16 	bl	d915c <__gettzinfo>
   d8730:	49ae      	ldr	r1, [pc, #696]	; (d89ec <_tzset_unlocked_r+0x2c8>)
   d8732:	4eaf      	ldr	r6, [pc, #700]	; (d89f0 <_tzset_unlocked_r+0x2cc>)
   d8734:	4605      	mov	r5, r0
   d8736:	4638      	mov	r0, r7
   d8738:	f000 fd08 	bl	d914c <_getenv_r>
   d873c:	4604      	mov	r4, r0
   d873e:	b970      	cbnz	r0, d875e <_tzset_unlocked_r+0x3a>
   d8740:	4bac      	ldr	r3, [pc, #688]	; (d89f4 <_tzset_unlocked_r+0x2d0>)
   d8742:	4aad      	ldr	r2, [pc, #692]	; (d89f8 <_tzset_unlocked_r+0x2d4>)
   d8744:	6018      	str	r0, [r3, #0]
   d8746:	4bad      	ldr	r3, [pc, #692]	; (d89fc <_tzset_unlocked_r+0x2d8>)
   d8748:	6018      	str	r0, [r3, #0]
   d874a:	4bad      	ldr	r3, [pc, #692]	; (d8a00 <_tzset_unlocked_r+0x2dc>)
   d874c:	6830      	ldr	r0, [r6, #0]
   d874e:	e9c3 2200 	strd	r2, r2, [r3]
   d8752:	f7fc fe45 	bl	d53e0 <free>
   d8756:	6034      	str	r4, [r6, #0]
   d8758:	b00d      	add	sp, #52	; 0x34
   d875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d875e:	6831      	ldr	r1, [r6, #0]
   d8760:	2900      	cmp	r1, #0
   d8762:	d15f      	bne.n	d8824 <_tzset_unlocked_r+0x100>
   d8764:	6830      	ldr	r0, [r6, #0]
   d8766:	f7fc fe3b 	bl	d53e0 <free>
   d876a:	4620      	mov	r0, r4
   d876c:	f7fe ffb7 	bl	d76de <strlen>
   d8770:	1c41      	adds	r1, r0, #1
   d8772:	4638      	mov	r0, r7
   d8774:	f7fc fe5c 	bl	d5430 <_malloc_r>
   d8778:	6030      	str	r0, [r6, #0]
   d877a:	2800      	cmp	r0, #0
   d877c:	d157      	bne.n	d882e <_tzset_unlocked_r+0x10a>
   d877e:	7823      	ldrb	r3, [r4, #0]
   d8780:	4aa0      	ldr	r2, [pc, #640]	; (d8a04 <_tzset_unlocked_r+0x2e0>)
   d8782:	49a1      	ldr	r1, [pc, #644]	; (d8a08 <_tzset_unlocked_r+0x2e4>)
   d8784:	2b3a      	cmp	r3, #58	; 0x3a
   d8786:	bf08      	it	eq
   d8788:	3401      	addeq	r4, #1
   d878a:	ae0a      	add	r6, sp, #40	; 0x28
   d878c:	4633      	mov	r3, r6
   d878e:	4620      	mov	r0, r4
   d8790:	f7fc fe36 	bl	d5400 <siscanf>
   d8794:	2800      	cmp	r0, #0
   d8796:	dddf      	ble.n	d8758 <_tzset_unlocked_r+0x34>
   d8798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d879a:	18e7      	adds	r7, r4, r3
   d879c:	5ce3      	ldrb	r3, [r4, r3]
   d879e:	2b2d      	cmp	r3, #45	; 0x2d
   d87a0:	d149      	bne.n	d8836 <_tzset_unlocked_r+0x112>
   d87a2:	3701      	adds	r7, #1
   d87a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d87a8:	f10d 0a20 	add.w	sl, sp, #32
   d87ac:	f10d 0b1e 	add.w	fp, sp, #30
   d87b0:	f04f 0800 	mov.w	r8, #0
   d87b4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   d87b8:	4994      	ldr	r1, [pc, #592]	; (d8a0c <_tzset_unlocked_r+0x2e8>)
   d87ba:	9603      	str	r6, [sp, #12]
   d87bc:	f8cd b000 	str.w	fp, [sp]
   d87c0:	4633      	mov	r3, r6
   d87c2:	aa07      	add	r2, sp, #28
   d87c4:	4638      	mov	r0, r7
   d87c6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d87ca:	f8ad 8020 	strh.w	r8, [sp, #32]
   d87ce:	f7fc fe17 	bl	d5400 <siscanf>
   d87d2:	4540      	cmp	r0, r8
   d87d4:	ddc0      	ble.n	d8758 <_tzset_unlocked_r+0x34>
   d87d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d87da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d87de:	f8df 9238 	ldr.w	r9, [pc, #568]	; d8a18 <_tzset_unlocked_r+0x2f4>
   d87e2:	213c      	movs	r1, #60	; 0x3c
   d87e4:	fb01 2203 	mla	r2, r1, r3, r2
   d87e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d87ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d87f0:	fb01 2303 	mla	r3, r1, r3, r2
   d87f4:	435c      	muls	r4, r3
   d87f6:	62ac      	str	r4, [r5, #40]	; 0x28
   d87f8:	4c81      	ldr	r4, [pc, #516]	; (d8a00 <_tzset_unlocked_r+0x2dc>)
   d87fa:	4b82      	ldr	r3, [pc, #520]	; (d8a04 <_tzset_unlocked_r+0x2e0>)
   d87fc:	6023      	str	r3, [r4, #0]
   d87fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8800:	4981      	ldr	r1, [pc, #516]	; (d8a08 <_tzset_unlocked_r+0x2e4>)
   d8802:	441f      	add	r7, r3
   d8804:	464a      	mov	r2, r9
   d8806:	4633      	mov	r3, r6
   d8808:	4638      	mov	r0, r7
   d880a:	f7fc fdf9 	bl	d5400 <siscanf>
   d880e:	4540      	cmp	r0, r8
   d8810:	dc16      	bgt.n	d8840 <_tzset_unlocked_r+0x11c>
   d8812:	6823      	ldr	r3, [r4, #0]
   d8814:	6063      	str	r3, [r4, #4]
   d8816:	4b77      	ldr	r3, [pc, #476]	; (d89f4 <_tzset_unlocked_r+0x2d0>)
   d8818:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   d881a:	601a      	str	r2, [r3, #0]
   d881c:	4b77      	ldr	r3, [pc, #476]	; (d89fc <_tzset_unlocked_r+0x2d8>)
   d881e:	f8c3 8000 	str.w	r8, [r3]
   d8822:	e799      	b.n	d8758 <_tzset_unlocked_r+0x34>
   d8824:	f7fe ff2c 	bl	d7680 <strcmp>
   d8828:	2800      	cmp	r0, #0
   d882a:	d19b      	bne.n	d8764 <_tzset_unlocked_r+0x40>
   d882c:	e794      	b.n	d8758 <_tzset_unlocked_r+0x34>
   d882e:	4621      	mov	r1, r4
   d8830:	f7fe ff30 	bl	d7694 <strcpy>
   d8834:	e7a3      	b.n	d877e <_tzset_unlocked_r+0x5a>
   d8836:	2b2b      	cmp	r3, #43	; 0x2b
   d8838:	bf08      	it	eq
   d883a:	3701      	addeq	r7, #1
   d883c:	2401      	movs	r4, #1
   d883e:	e7b3      	b.n	d87a8 <_tzset_unlocked_r+0x84>
   d8840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8842:	f8c4 9004 	str.w	r9, [r4, #4]
   d8846:	18fc      	adds	r4, r7, r3
   d8848:	5cfb      	ldrb	r3, [r7, r3]
   d884a:	2b2d      	cmp	r3, #45	; 0x2d
   d884c:	f040 808b 	bne.w	d8966 <_tzset_unlocked_r+0x242>
   d8850:	3401      	adds	r4, #1
   d8852:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8856:	2300      	movs	r3, #0
   d8858:	f8ad 301c 	strh.w	r3, [sp, #28]
   d885c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8860:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8864:	930a      	str	r3, [sp, #40]	; 0x28
   d8866:	e9cd a602 	strd	sl, r6, [sp, #8]
   d886a:	e9cd b600 	strd	fp, r6, [sp]
   d886e:	4967      	ldr	r1, [pc, #412]	; (d8a0c <_tzset_unlocked_r+0x2e8>)
   d8870:	4633      	mov	r3, r6
   d8872:	aa07      	add	r2, sp, #28
   d8874:	4620      	mov	r0, r4
   d8876:	f7fc fdc3 	bl	d5400 <siscanf>
   d887a:	2800      	cmp	r0, #0
   d887c:	dc78      	bgt.n	d8970 <_tzset_unlocked_r+0x24c>
   d887e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   d8880:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   d8884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8886:	652f      	str	r7, [r5, #80]	; 0x50
   d8888:	441c      	add	r4, r3
   d888a:	462f      	mov	r7, r5
   d888c:	f04f 0900 	mov.w	r9, #0
   d8890:	7823      	ldrb	r3, [r4, #0]
   d8892:	2b2c      	cmp	r3, #44	; 0x2c
   d8894:	bf08      	it	eq
   d8896:	3401      	addeq	r4, #1
   d8898:	f894 8000 	ldrb.w	r8, [r4]
   d889c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d88a0:	d178      	bne.n	d8994 <_tzset_unlocked_r+0x270>
   d88a2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d88a6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   d88aa:	ab09      	add	r3, sp, #36	; 0x24
   d88ac:	9300      	str	r3, [sp, #0]
   d88ae:	4958      	ldr	r1, [pc, #352]	; (d8a10 <_tzset_unlocked_r+0x2ec>)
   d88b0:	9603      	str	r6, [sp, #12]
   d88b2:	4633      	mov	r3, r6
   d88b4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d88b8:	4620      	mov	r0, r4
   d88ba:	f7fc fda1 	bl	d5400 <siscanf>
   d88be:	2803      	cmp	r0, #3
   d88c0:	f47f af4a 	bne.w	d8758 <_tzset_unlocked_r+0x34>
   d88c4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d88c8:	1e4b      	subs	r3, r1, #1
   d88ca:	2b0b      	cmp	r3, #11
   d88cc:	f63f af44 	bhi.w	d8758 <_tzset_unlocked_r+0x34>
   d88d0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d88d4:	1e53      	subs	r3, r2, #1
   d88d6:	2b04      	cmp	r3, #4
   d88d8:	f63f af3e 	bhi.w	d8758 <_tzset_unlocked_r+0x34>
   d88dc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d88e0:	2b06      	cmp	r3, #6
   d88e2:	f63f af39 	bhi.w	d8758 <_tzset_unlocked_r+0x34>
   d88e6:	e9c7 1203 	strd	r1, r2, [r7, #12]
   d88ea:	f887 8008 	strb.w	r8, [r7, #8]
   d88ee:	617b      	str	r3, [r7, #20]
   d88f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d88f2:	eb04 0803 	add.w	r8, r4, r3
   d88f6:	2302      	movs	r3, #2
   d88f8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d88fc:	2300      	movs	r3, #0
   d88fe:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8902:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8906:	930a      	str	r3, [sp, #40]	; 0x28
   d8908:	f898 3000 	ldrb.w	r3, [r8]
   d890c:	2b2f      	cmp	r3, #47	; 0x2f
   d890e:	d109      	bne.n	d8924 <_tzset_unlocked_r+0x200>
   d8910:	e9cd a602 	strd	sl, r6, [sp, #8]
   d8914:	e9cd b600 	strd	fp, r6, [sp]
   d8918:	493e      	ldr	r1, [pc, #248]	; (d8a14 <_tzset_unlocked_r+0x2f0>)
   d891a:	4633      	mov	r3, r6
   d891c:	aa07      	add	r2, sp, #28
   d891e:	4640      	mov	r0, r8
   d8920:	f7fc fd6e 	bl	d5400 <siscanf>
   d8924:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8928:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d892c:	213c      	movs	r1, #60	; 0x3c
   d892e:	fb01 2203 	mla	r2, r1, r3, r2
   d8932:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d8936:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d893a:	fb01 2303 	mla	r3, r1, r3, r2
   d893e:	61bb      	str	r3, [r7, #24]
   d8940:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   d8942:	3728      	adds	r7, #40	; 0x28
   d8944:	4444      	add	r4, r8
   d8946:	f1b9 0f00 	cmp.w	r9, #0
   d894a:	d020      	beq.n	d898e <_tzset_unlocked_r+0x26a>
   d894c:	6868      	ldr	r0, [r5, #4]
   d894e:	f7ff fe2f 	bl	d85b0 <__tzcalc_limits>
   d8952:	4b28      	ldr	r3, [pc, #160]	; (d89f4 <_tzset_unlocked_r+0x2d0>)
   d8954:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   d8956:	601a      	str	r2, [r3, #0]
   d8958:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d895a:	1a9b      	subs	r3, r3, r2
   d895c:	4a27      	ldr	r2, [pc, #156]	; (d89fc <_tzset_unlocked_r+0x2d8>)
   d895e:	bf18      	it	ne
   d8960:	2301      	movne	r3, #1
   d8962:	6013      	str	r3, [r2, #0]
   d8964:	e6f8      	b.n	d8758 <_tzset_unlocked_r+0x34>
   d8966:	2b2b      	cmp	r3, #43	; 0x2b
   d8968:	bf08      	it	eq
   d896a:	3401      	addeq	r4, #1
   d896c:	2701      	movs	r7, #1
   d896e:	e772      	b.n	d8856 <_tzset_unlocked_r+0x132>
   d8970:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8974:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8978:	213c      	movs	r1, #60	; 0x3c
   d897a:	fb01 2203 	mla	r2, r1, r3, r2
   d897e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d8982:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8986:	fb01 2303 	mla	r3, r1, r3, r2
   d898a:	435f      	muls	r7, r3
   d898c:	e77a      	b.n	d8884 <_tzset_unlocked_r+0x160>
   d898e:	f04f 0901 	mov.w	r9, #1
   d8992:	e77d      	b.n	d8890 <_tzset_unlocked_r+0x16c>
   d8994:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8998:	bf06      	itte	eq
   d899a:	3401      	addeq	r4, #1
   d899c:	4643      	moveq	r3, r8
   d899e:	2344      	movne	r3, #68	; 0x44
   d89a0:	220a      	movs	r2, #10
   d89a2:	a90b      	add	r1, sp, #44	; 0x2c
   d89a4:	4620      	mov	r0, r4
   d89a6:	9305      	str	r3, [sp, #20]
   d89a8:	f7ff fdf8 	bl	d859c <strtoul>
   d89ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d89b0:	9b05      	ldr	r3, [sp, #20]
   d89b2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d89b6:	45a0      	cmp	r8, r4
   d89b8:	d114      	bne.n	d89e4 <_tzset_unlocked_r+0x2c0>
   d89ba:	234d      	movs	r3, #77	; 0x4d
   d89bc:	f1b9 0f00 	cmp.w	r9, #0
   d89c0:	d107      	bne.n	d89d2 <_tzset_unlocked_r+0x2ae>
   d89c2:	722b      	strb	r3, [r5, #8]
   d89c4:	2103      	movs	r1, #3
   d89c6:	2302      	movs	r3, #2
   d89c8:	e9c5 1303 	strd	r1, r3, [r5, #12]
   d89cc:	f8c5 9014 	str.w	r9, [r5, #20]
   d89d0:	e791      	b.n	d88f6 <_tzset_unlocked_r+0x1d2>
   d89d2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   d89d6:	220b      	movs	r2, #11
   d89d8:	2301      	movs	r3, #1
   d89da:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   d89de:	2300      	movs	r3, #0
   d89e0:	63eb      	str	r3, [r5, #60]	; 0x3c
   d89e2:	e788      	b.n	d88f6 <_tzset_unlocked_r+0x1d2>
   d89e4:	b280      	uxth	r0, r0
   d89e6:	723b      	strb	r3, [r7, #8]
   d89e8:	6178      	str	r0, [r7, #20]
   d89ea:	e784      	b.n	d88f6 <_tzset_unlocked_r+0x1d2>
   d89ec:	000da250 	.word	0x000da250
   d89f0:	2003e7d8 	.word	0x2003e7d8
   d89f4:	2003e7e0 	.word	0x2003e7e0
   d89f8:	000da253 	.word	0x000da253
   d89fc:	2003e7dc 	.word	0x2003e7dc
   d8a00:	2003e2d0 	.word	0x2003e2d0
   d8a04:	2003e7cb 	.word	0x2003e7cb
   d8a08:	000da257 	.word	0x000da257
   d8a0c:	000da27a 	.word	0x000da27a
   d8a10:	000da266 	.word	0x000da266
   d8a14:	000da279 	.word	0x000da279
   d8a18:	2003e7c0 	.word	0x2003e7c0

000d8a1c <rshift>:
   d8a1c:	6903      	ldr	r3, [r0, #16]
   d8a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d8a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8a26:	ea4f 1261 	mov.w	r2, r1, asr #5
   d8a2a:	f100 0414 	add.w	r4, r0, #20
   d8a2e:	dd45      	ble.n	d8abc <rshift+0xa0>
   d8a30:	f011 011f 	ands.w	r1, r1, #31
   d8a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d8a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d8a3c:	d10c      	bne.n	d8a58 <rshift+0x3c>
   d8a3e:	f100 0710 	add.w	r7, r0, #16
   d8a42:	4629      	mov	r1, r5
   d8a44:	42b1      	cmp	r1, r6
   d8a46:	d334      	bcc.n	d8ab2 <rshift+0x96>
   d8a48:	1a9b      	subs	r3, r3, r2
   d8a4a:	009b      	lsls	r3, r3, #2
   d8a4c:	1eea      	subs	r2, r5, #3
   d8a4e:	4296      	cmp	r6, r2
   d8a50:	bf38      	it	cc
   d8a52:	2300      	movcc	r3, #0
   d8a54:	4423      	add	r3, r4
   d8a56:	e015      	b.n	d8a84 <rshift+0x68>
   d8a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d8a5c:	f1c1 0820 	rsb	r8, r1, #32
   d8a60:	40cf      	lsrs	r7, r1
   d8a62:	f105 0e04 	add.w	lr, r5, #4
   d8a66:	46a1      	mov	r9, r4
   d8a68:	4576      	cmp	r6, lr
   d8a6a:	46f4      	mov	ip, lr
   d8a6c:	d815      	bhi.n	d8a9a <rshift+0x7e>
   d8a6e:	1a9b      	subs	r3, r3, r2
   d8a70:	009a      	lsls	r2, r3, #2
   d8a72:	3a04      	subs	r2, #4
   d8a74:	3501      	adds	r5, #1
   d8a76:	42ae      	cmp	r6, r5
   d8a78:	bf38      	it	cc
   d8a7a:	2200      	movcc	r2, #0
   d8a7c:	18a3      	adds	r3, r4, r2
   d8a7e:	50a7      	str	r7, [r4, r2]
   d8a80:	b107      	cbz	r7, d8a84 <rshift+0x68>
   d8a82:	3304      	adds	r3, #4
   d8a84:	1b1a      	subs	r2, r3, r4
   d8a86:	42a3      	cmp	r3, r4
   d8a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d8a8c:	bf08      	it	eq
   d8a8e:	2300      	moveq	r3, #0
   d8a90:	6102      	str	r2, [r0, #16]
   d8a92:	bf08      	it	eq
   d8a94:	6143      	streq	r3, [r0, #20]
   d8a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8a9a:	f8dc c000 	ldr.w	ip, [ip]
   d8a9e:	fa0c fc08 	lsl.w	ip, ip, r8
   d8aa2:	ea4c 0707 	orr.w	r7, ip, r7
   d8aa6:	f849 7b04 	str.w	r7, [r9], #4
   d8aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
   d8aae:	40cf      	lsrs	r7, r1
   d8ab0:	e7da      	b.n	d8a68 <rshift+0x4c>
   d8ab2:	f851 cb04 	ldr.w	ip, [r1], #4
   d8ab6:	f847 cf04 	str.w	ip, [r7, #4]!
   d8aba:	e7c3      	b.n	d8a44 <rshift+0x28>
   d8abc:	4623      	mov	r3, r4
   d8abe:	e7e1      	b.n	d8a84 <rshift+0x68>

000d8ac0 <__hexdig_fun>:
   d8ac0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8ac4:	2b09      	cmp	r3, #9
   d8ac6:	d802      	bhi.n	d8ace <__hexdig_fun+0xe>
   d8ac8:	3820      	subs	r0, #32
   d8aca:	b2c0      	uxtb	r0, r0
   d8acc:	4770      	bx	lr
   d8ace:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8ad2:	2b05      	cmp	r3, #5
   d8ad4:	d801      	bhi.n	d8ada <__hexdig_fun+0x1a>
   d8ad6:	3847      	subs	r0, #71	; 0x47
   d8ad8:	e7f7      	b.n	d8aca <__hexdig_fun+0xa>
   d8ada:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8ade:	2b05      	cmp	r3, #5
   d8ae0:	d801      	bhi.n	d8ae6 <__hexdig_fun+0x26>
   d8ae2:	3827      	subs	r0, #39	; 0x27
   d8ae4:	e7f1      	b.n	d8aca <__hexdig_fun+0xa>
   d8ae6:	2000      	movs	r0, #0
   d8ae8:	4770      	bx	lr
	...

000d8aec <__gethex>:
   d8aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8af0:	ed2d 8b02 	vpush	{d8}
   d8af4:	b089      	sub	sp, #36	; 0x24
   d8af6:	ee08 0a10 	vmov	s16, r0
   d8afa:	9304      	str	r3, [sp, #16]
   d8afc:	4bbc      	ldr	r3, [pc, #752]	; (d8df0 <__gethex+0x304>)
   d8afe:	681b      	ldr	r3, [r3, #0]
   d8b00:	9301      	str	r3, [sp, #4]
   d8b02:	4618      	mov	r0, r3
   d8b04:	468b      	mov	fp, r1
   d8b06:	4690      	mov	r8, r2
   d8b08:	f7fe fde9 	bl	d76de <strlen>
   d8b0c:	9b01      	ldr	r3, [sp, #4]
   d8b0e:	f8db 2000 	ldr.w	r2, [fp]
   d8b12:	4403      	add	r3, r0
   d8b14:	4682      	mov	sl, r0
   d8b16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8b1a:	9305      	str	r3, [sp, #20]
   d8b1c:	1c93      	adds	r3, r2, #2
   d8b1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d8b22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d8b26:	32fe      	adds	r2, #254	; 0xfe
   d8b28:	18d1      	adds	r1, r2, r3
   d8b2a:	461f      	mov	r7, r3
   d8b2c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8b30:	9100      	str	r1, [sp, #0]
   d8b32:	2830      	cmp	r0, #48	; 0x30
   d8b34:	d0f8      	beq.n	d8b28 <__gethex+0x3c>
   d8b36:	f7ff ffc3 	bl	d8ac0 <__hexdig_fun>
   d8b3a:	4604      	mov	r4, r0
   d8b3c:	2800      	cmp	r0, #0
   d8b3e:	d13a      	bne.n	d8bb6 <__gethex+0xca>
   d8b40:	9901      	ldr	r1, [sp, #4]
   d8b42:	4652      	mov	r2, sl
   d8b44:	4638      	mov	r0, r7
   d8b46:	f7fe fdd2 	bl	d76ee <strncmp>
   d8b4a:	4605      	mov	r5, r0
   d8b4c:	2800      	cmp	r0, #0
   d8b4e:	d168      	bne.n	d8c22 <__gethex+0x136>
   d8b50:	f817 000a 	ldrb.w	r0, [r7, sl]
   d8b54:	eb07 060a 	add.w	r6, r7, sl
   d8b58:	f7ff ffb2 	bl	d8ac0 <__hexdig_fun>
   d8b5c:	2800      	cmp	r0, #0
   d8b5e:	d062      	beq.n	d8c26 <__gethex+0x13a>
   d8b60:	4633      	mov	r3, r6
   d8b62:	7818      	ldrb	r0, [r3, #0]
   d8b64:	2830      	cmp	r0, #48	; 0x30
   d8b66:	461f      	mov	r7, r3
   d8b68:	f103 0301 	add.w	r3, r3, #1
   d8b6c:	d0f9      	beq.n	d8b62 <__gethex+0x76>
   d8b6e:	f7ff ffa7 	bl	d8ac0 <__hexdig_fun>
   d8b72:	2301      	movs	r3, #1
   d8b74:	fab0 f480 	clz	r4, r0
   d8b78:	0964      	lsrs	r4, r4, #5
   d8b7a:	4635      	mov	r5, r6
   d8b7c:	9300      	str	r3, [sp, #0]
   d8b7e:	463a      	mov	r2, r7
   d8b80:	4616      	mov	r6, r2
   d8b82:	3201      	adds	r2, #1
   d8b84:	7830      	ldrb	r0, [r6, #0]
   d8b86:	f7ff ff9b 	bl	d8ac0 <__hexdig_fun>
   d8b8a:	2800      	cmp	r0, #0
   d8b8c:	d1f8      	bne.n	d8b80 <__gethex+0x94>
   d8b8e:	9901      	ldr	r1, [sp, #4]
   d8b90:	4652      	mov	r2, sl
   d8b92:	4630      	mov	r0, r6
   d8b94:	f7fe fdab 	bl	d76ee <strncmp>
   d8b98:	b980      	cbnz	r0, d8bbc <__gethex+0xd0>
   d8b9a:	b94d      	cbnz	r5, d8bb0 <__gethex+0xc4>
   d8b9c:	eb06 050a 	add.w	r5, r6, sl
   d8ba0:	462a      	mov	r2, r5
   d8ba2:	4616      	mov	r6, r2
   d8ba4:	3201      	adds	r2, #1
   d8ba6:	7830      	ldrb	r0, [r6, #0]
   d8ba8:	f7ff ff8a 	bl	d8ac0 <__hexdig_fun>
   d8bac:	2800      	cmp	r0, #0
   d8bae:	d1f8      	bne.n	d8ba2 <__gethex+0xb6>
   d8bb0:	1bad      	subs	r5, r5, r6
   d8bb2:	00ad      	lsls	r5, r5, #2
   d8bb4:	e004      	b.n	d8bc0 <__gethex+0xd4>
   d8bb6:	2400      	movs	r4, #0
   d8bb8:	4625      	mov	r5, r4
   d8bba:	e7e0      	b.n	d8b7e <__gethex+0x92>
   d8bbc:	2d00      	cmp	r5, #0
   d8bbe:	d1f7      	bne.n	d8bb0 <__gethex+0xc4>
   d8bc0:	7833      	ldrb	r3, [r6, #0]
   d8bc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8bc6:	2b50      	cmp	r3, #80	; 0x50
   d8bc8:	d13b      	bne.n	d8c42 <__gethex+0x156>
   d8bca:	7873      	ldrb	r3, [r6, #1]
   d8bcc:	2b2b      	cmp	r3, #43	; 0x2b
   d8bce:	d02c      	beq.n	d8c2a <__gethex+0x13e>
   d8bd0:	2b2d      	cmp	r3, #45	; 0x2d
   d8bd2:	d02e      	beq.n	d8c32 <__gethex+0x146>
   d8bd4:	1c71      	adds	r1, r6, #1
   d8bd6:	f04f 0900 	mov.w	r9, #0
   d8bda:	7808      	ldrb	r0, [r1, #0]
   d8bdc:	f7ff ff70 	bl	d8ac0 <__hexdig_fun>
   d8be0:	1e43      	subs	r3, r0, #1
   d8be2:	b2db      	uxtb	r3, r3
   d8be4:	2b18      	cmp	r3, #24
   d8be6:	d82c      	bhi.n	d8c42 <__gethex+0x156>
   d8be8:	f1a0 0210 	sub.w	r2, r0, #16
   d8bec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8bf0:	f7ff ff66 	bl	d8ac0 <__hexdig_fun>
   d8bf4:	1e43      	subs	r3, r0, #1
   d8bf6:	b2db      	uxtb	r3, r3
   d8bf8:	2b18      	cmp	r3, #24
   d8bfa:	d91d      	bls.n	d8c38 <__gethex+0x14c>
   d8bfc:	f1b9 0f00 	cmp.w	r9, #0
   d8c00:	d000      	beq.n	d8c04 <__gethex+0x118>
   d8c02:	4252      	negs	r2, r2
   d8c04:	4415      	add	r5, r2
   d8c06:	f8cb 1000 	str.w	r1, [fp]
   d8c0a:	b1e4      	cbz	r4, d8c46 <__gethex+0x15a>
   d8c0c:	9b00      	ldr	r3, [sp, #0]
   d8c0e:	2b00      	cmp	r3, #0
   d8c10:	bf14      	ite	ne
   d8c12:	2700      	movne	r7, #0
   d8c14:	2706      	moveq	r7, #6
   d8c16:	4638      	mov	r0, r7
   d8c18:	b009      	add	sp, #36	; 0x24
   d8c1a:	ecbd 8b02 	vpop	{d8}
   d8c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c22:	463e      	mov	r6, r7
   d8c24:	4625      	mov	r5, r4
   d8c26:	2401      	movs	r4, #1
   d8c28:	e7ca      	b.n	d8bc0 <__gethex+0xd4>
   d8c2a:	f04f 0900 	mov.w	r9, #0
   d8c2e:	1cb1      	adds	r1, r6, #2
   d8c30:	e7d3      	b.n	d8bda <__gethex+0xee>
   d8c32:	f04f 0901 	mov.w	r9, #1
   d8c36:	e7fa      	b.n	d8c2e <__gethex+0x142>
   d8c38:	230a      	movs	r3, #10
   d8c3a:	fb03 0202 	mla	r2, r3, r2, r0
   d8c3e:	3a10      	subs	r2, #16
   d8c40:	e7d4      	b.n	d8bec <__gethex+0x100>
   d8c42:	4631      	mov	r1, r6
   d8c44:	e7df      	b.n	d8c06 <__gethex+0x11a>
   d8c46:	1bf3      	subs	r3, r6, r7
   d8c48:	3b01      	subs	r3, #1
   d8c4a:	4621      	mov	r1, r4
   d8c4c:	2b07      	cmp	r3, #7
   d8c4e:	dc52      	bgt.n	d8cf6 <__gethex+0x20a>
   d8c50:	ee18 0a10 	vmov	r0, s16
   d8c54:	f000 fb4c 	bl	d92f0 <_Balloc>
   d8c58:	f04f 0b00 	mov.w	fp, #0
   d8c5c:	f100 0914 	add.w	r9, r0, #20
   d8c60:	f1ca 0301 	rsb	r3, sl, #1
   d8c64:	4604      	mov	r4, r0
   d8c66:	f8cd 9008 	str.w	r9, [sp, #8]
   d8c6a:	f8cd b000 	str.w	fp, [sp]
   d8c6e:	9306      	str	r3, [sp, #24]
   d8c70:	42b7      	cmp	r7, r6
   d8c72:	d343      	bcc.n	d8cfc <__gethex+0x210>
   d8c74:	9802      	ldr	r0, [sp, #8]
   d8c76:	9b00      	ldr	r3, [sp, #0]
   d8c78:	f840 3b04 	str.w	r3, [r0], #4
   d8c7c:	eba0 0009 	sub.w	r0, r0, r9
   d8c80:	1080      	asrs	r0, r0, #2
   d8c82:	0146      	lsls	r6, r0, #5
   d8c84:	6120      	str	r0, [r4, #16]
   d8c86:	4618      	mov	r0, r3
   d8c88:	f000 fbf9 	bl	d947e <__hi0bits>
   d8c8c:	1a30      	subs	r0, r6, r0
   d8c8e:	f8d8 6000 	ldr.w	r6, [r8]
   d8c92:	42b0      	cmp	r0, r6
   d8c94:	dd66      	ble.n	d8d64 <__gethex+0x278>
   d8c96:	1b87      	subs	r7, r0, r6
   d8c98:	4639      	mov	r1, r7
   d8c9a:	4620      	mov	r0, r4
   d8c9c:	f000 ff46 	bl	d9b2c <__any_on>
   d8ca0:	4682      	mov	sl, r0
   d8ca2:	b1a8      	cbz	r0, d8cd0 <__gethex+0x1e4>
   d8ca4:	1e7b      	subs	r3, r7, #1
   d8ca6:	1159      	asrs	r1, r3, #5
   d8ca8:	f003 021f 	and.w	r2, r3, #31
   d8cac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d8cb0:	f04f 0a01 	mov.w	sl, #1
   d8cb4:	fa0a f202 	lsl.w	r2, sl, r2
   d8cb8:	420a      	tst	r2, r1
   d8cba:	d009      	beq.n	d8cd0 <__gethex+0x1e4>
   d8cbc:	4553      	cmp	r3, sl
   d8cbe:	dd05      	ble.n	d8ccc <__gethex+0x1e0>
   d8cc0:	1eb9      	subs	r1, r7, #2
   d8cc2:	4620      	mov	r0, r4
   d8cc4:	f000 ff32 	bl	d9b2c <__any_on>
   d8cc8:	2800      	cmp	r0, #0
   d8cca:	d148      	bne.n	d8d5e <__gethex+0x272>
   d8ccc:	f04f 0a02 	mov.w	sl, #2
   d8cd0:	4639      	mov	r1, r7
   d8cd2:	4620      	mov	r0, r4
   d8cd4:	f7ff fea2 	bl	d8a1c <rshift>
   d8cd8:	443d      	add	r5, r7
   d8cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8cde:	42ab      	cmp	r3, r5
   d8ce0:	da4f      	bge.n	d8d82 <__gethex+0x296>
   d8ce2:	ee18 0a10 	vmov	r0, s16
   d8ce6:	4621      	mov	r1, r4
   d8ce8:	f000 fb36 	bl	d9358 <_Bfree>
   d8cec:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8cee:	2300      	movs	r3, #0
   d8cf0:	6013      	str	r3, [r2, #0]
   d8cf2:	27a3      	movs	r7, #163	; 0xa3
   d8cf4:	e78f      	b.n	d8c16 <__gethex+0x12a>
   d8cf6:	3101      	adds	r1, #1
   d8cf8:	105b      	asrs	r3, r3, #1
   d8cfa:	e7a7      	b.n	d8c4c <__gethex+0x160>
   d8cfc:	1e73      	subs	r3, r6, #1
   d8cfe:	9a05      	ldr	r2, [sp, #20]
   d8d00:	9303      	str	r3, [sp, #12]
   d8d02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8d06:	4293      	cmp	r3, r2
   d8d08:	d019      	beq.n	d8d3e <__gethex+0x252>
   d8d0a:	f1bb 0f20 	cmp.w	fp, #32
   d8d0e:	d107      	bne.n	d8d20 <__gethex+0x234>
   d8d10:	9b02      	ldr	r3, [sp, #8]
   d8d12:	9a00      	ldr	r2, [sp, #0]
   d8d14:	f843 2b04 	str.w	r2, [r3], #4
   d8d18:	9302      	str	r3, [sp, #8]
   d8d1a:	2300      	movs	r3, #0
   d8d1c:	9300      	str	r3, [sp, #0]
   d8d1e:	469b      	mov	fp, r3
   d8d20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8d24:	f7ff fecc 	bl	d8ac0 <__hexdig_fun>
   d8d28:	9b00      	ldr	r3, [sp, #0]
   d8d2a:	f000 000f 	and.w	r0, r0, #15
   d8d2e:	fa00 f00b 	lsl.w	r0, r0, fp
   d8d32:	4303      	orrs	r3, r0
   d8d34:	9300      	str	r3, [sp, #0]
   d8d36:	f10b 0b04 	add.w	fp, fp, #4
   d8d3a:	9b03      	ldr	r3, [sp, #12]
   d8d3c:	e00d      	b.n	d8d5a <__gethex+0x26e>
   d8d3e:	9b03      	ldr	r3, [sp, #12]
   d8d40:	9a06      	ldr	r2, [sp, #24]
   d8d42:	4413      	add	r3, r2
   d8d44:	42bb      	cmp	r3, r7
   d8d46:	d3e0      	bcc.n	d8d0a <__gethex+0x21e>
   d8d48:	4618      	mov	r0, r3
   d8d4a:	9901      	ldr	r1, [sp, #4]
   d8d4c:	9307      	str	r3, [sp, #28]
   d8d4e:	4652      	mov	r2, sl
   d8d50:	f7fe fccd 	bl	d76ee <strncmp>
   d8d54:	9b07      	ldr	r3, [sp, #28]
   d8d56:	2800      	cmp	r0, #0
   d8d58:	d1d7      	bne.n	d8d0a <__gethex+0x21e>
   d8d5a:	461e      	mov	r6, r3
   d8d5c:	e788      	b.n	d8c70 <__gethex+0x184>
   d8d5e:	f04f 0a03 	mov.w	sl, #3
   d8d62:	e7b5      	b.n	d8cd0 <__gethex+0x1e4>
   d8d64:	da0a      	bge.n	d8d7c <__gethex+0x290>
   d8d66:	1a37      	subs	r7, r6, r0
   d8d68:	4621      	mov	r1, r4
   d8d6a:	ee18 0a10 	vmov	r0, s16
   d8d6e:	463a      	mov	r2, r7
   d8d70:	f000 fcc8 	bl	d9704 <__lshift>
   d8d74:	1bed      	subs	r5, r5, r7
   d8d76:	4604      	mov	r4, r0
   d8d78:	f100 0914 	add.w	r9, r0, #20
   d8d7c:	f04f 0a00 	mov.w	sl, #0
   d8d80:	e7ab      	b.n	d8cda <__gethex+0x1ee>
   d8d82:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8d86:	42a8      	cmp	r0, r5
   d8d88:	dd6d      	ble.n	d8e66 <__gethex+0x37a>
   d8d8a:	1b45      	subs	r5, r0, r5
   d8d8c:	42ae      	cmp	r6, r5
   d8d8e:	dc31      	bgt.n	d8df4 <__gethex+0x308>
   d8d90:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8d94:	2b02      	cmp	r3, #2
   d8d96:	d023      	beq.n	d8de0 <__gethex+0x2f4>
   d8d98:	2b03      	cmp	r3, #3
   d8d9a:	d025      	beq.n	d8de8 <__gethex+0x2fc>
   d8d9c:	2b01      	cmp	r3, #1
   d8d9e:	d115      	bne.n	d8dcc <__gethex+0x2e0>
   d8da0:	42ae      	cmp	r6, r5
   d8da2:	d113      	bne.n	d8dcc <__gethex+0x2e0>
   d8da4:	2e01      	cmp	r6, #1
   d8da6:	d10b      	bne.n	d8dc0 <__gethex+0x2d4>
   d8da8:	9a04      	ldr	r2, [sp, #16]
   d8daa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8dae:	6013      	str	r3, [r2, #0]
   d8db0:	2301      	movs	r3, #1
   d8db2:	6123      	str	r3, [r4, #16]
   d8db4:	f8c9 3000 	str.w	r3, [r9]
   d8db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8dba:	2762      	movs	r7, #98	; 0x62
   d8dbc:	601c      	str	r4, [r3, #0]
   d8dbe:	e72a      	b.n	d8c16 <__gethex+0x12a>
   d8dc0:	1e71      	subs	r1, r6, #1
   d8dc2:	4620      	mov	r0, r4
   d8dc4:	f000 feb2 	bl	d9b2c <__any_on>
   d8dc8:	2800      	cmp	r0, #0
   d8dca:	d1ed      	bne.n	d8da8 <__gethex+0x2bc>
   d8dcc:	ee18 0a10 	vmov	r0, s16
   d8dd0:	4621      	mov	r1, r4
   d8dd2:	f000 fac1 	bl	d9358 <_Bfree>
   d8dd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8dd8:	2300      	movs	r3, #0
   d8dda:	6013      	str	r3, [r2, #0]
   d8ddc:	2750      	movs	r7, #80	; 0x50
   d8dde:	e71a      	b.n	d8c16 <__gethex+0x12a>
   d8de0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8de2:	2b00      	cmp	r3, #0
   d8de4:	d1f2      	bne.n	d8dcc <__gethex+0x2e0>
   d8de6:	e7df      	b.n	d8da8 <__gethex+0x2bc>
   d8de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8dea:	2b00      	cmp	r3, #0
   d8dec:	d1dc      	bne.n	d8da8 <__gethex+0x2bc>
   d8dee:	e7ed      	b.n	d8dcc <__gethex+0x2e0>
   d8df0:	000da390 	.word	0x000da390
   d8df4:	1e6f      	subs	r7, r5, #1
   d8df6:	f1ba 0f00 	cmp.w	sl, #0
   d8dfa:	d131      	bne.n	d8e60 <__gethex+0x374>
   d8dfc:	b127      	cbz	r7, d8e08 <__gethex+0x31c>
   d8dfe:	4639      	mov	r1, r7
   d8e00:	4620      	mov	r0, r4
   d8e02:	f000 fe93 	bl	d9b2c <__any_on>
   d8e06:	4682      	mov	sl, r0
   d8e08:	117b      	asrs	r3, r7, #5
   d8e0a:	2101      	movs	r1, #1
   d8e0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d8e10:	f007 071f 	and.w	r7, r7, #31
   d8e14:	fa01 f707 	lsl.w	r7, r1, r7
   d8e18:	421f      	tst	r7, r3
   d8e1a:	4629      	mov	r1, r5
   d8e1c:	4620      	mov	r0, r4
   d8e1e:	bf18      	it	ne
   d8e20:	f04a 0a02 	orrne.w	sl, sl, #2
   d8e24:	1b76      	subs	r6, r6, r5
   d8e26:	f7ff fdf9 	bl	d8a1c <rshift>
   d8e2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d8e2e:	2702      	movs	r7, #2
   d8e30:	f1ba 0f00 	cmp.w	sl, #0
   d8e34:	d048      	beq.n	d8ec8 <__gethex+0x3dc>
   d8e36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8e3a:	2b02      	cmp	r3, #2
   d8e3c:	d015      	beq.n	d8e6a <__gethex+0x37e>
   d8e3e:	2b03      	cmp	r3, #3
   d8e40:	d017      	beq.n	d8e72 <__gethex+0x386>
   d8e42:	2b01      	cmp	r3, #1
   d8e44:	d109      	bne.n	d8e5a <__gethex+0x36e>
   d8e46:	f01a 0f02 	tst.w	sl, #2
   d8e4a:	d006      	beq.n	d8e5a <__gethex+0x36e>
   d8e4c:	f8d9 0000 	ldr.w	r0, [r9]
   d8e50:	ea4a 0a00 	orr.w	sl, sl, r0
   d8e54:	f01a 0f01 	tst.w	sl, #1
   d8e58:	d10e      	bne.n	d8e78 <__gethex+0x38c>
   d8e5a:	f047 0710 	orr.w	r7, r7, #16
   d8e5e:	e033      	b.n	d8ec8 <__gethex+0x3dc>
   d8e60:	f04f 0a01 	mov.w	sl, #1
   d8e64:	e7d0      	b.n	d8e08 <__gethex+0x31c>
   d8e66:	2701      	movs	r7, #1
   d8e68:	e7e2      	b.n	d8e30 <__gethex+0x344>
   d8e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8e6c:	f1c3 0301 	rsb	r3, r3, #1
   d8e70:	9315      	str	r3, [sp, #84]	; 0x54
   d8e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8e74:	2b00      	cmp	r3, #0
   d8e76:	d0f0      	beq.n	d8e5a <__gethex+0x36e>
   d8e78:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8e7c:	f104 0314 	add.w	r3, r4, #20
   d8e80:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d8e84:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d8e88:	f04f 0c00 	mov.w	ip, #0
   d8e8c:	4618      	mov	r0, r3
   d8e8e:	f853 2b04 	ldr.w	r2, [r3], #4
   d8e92:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d8e96:	d01c      	beq.n	d8ed2 <__gethex+0x3e6>
   d8e98:	3201      	adds	r2, #1
   d8e9a:	6002      	str	r2, [r0, #0]
   d8e9c:	2f02      	cmp	r7, #2
   d8e9e:	f104 0314 	add.w	r3, r4, #20
   d8ea2:	d13a      	bne.n	d8f1a <__gethex+0x42e>
   d8ea4:	f8d8 2000 	ldr.w	r2, [r8]
   d8ea8:	3a01      	subs	r2, #1
   d8eaa:	42b2      	cmp	r2, r6
   d8eac:	d10a      	bne.n	d8ec4 <__gethex+0x3d8>
   d8eae:	1171      	asrs	r1, r6, #5
   d8eb0:	2201      	movs	r2, #1
   d8eb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d8eb6:	f006 061f 	and.w	r6, r6, #31
   d8eba:	fa02 f606 	lsl.w	r6, r2, r6
   d8ebe:	421e      	tst	r6, r3
   d8ec0:	bf18      	it	ne
   d8ec2:	4617      	movne	r7, r2
   d8ec4:	f047 0720 	orr.w	r7, r7, #32
   d8ec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8eca:	601c      	str	r4, [r3, #0]
   d8ecc:	9b04      	ldr	r3, [sp, #16]
   d8ece:	601d      	str	r5, [r3, #0]
   d8ed0:	e6a1      	b.n	d8c16 <__gethex+0x12a>
   d8ed2:	4299      	cmp	r1, r3
   d8ed4:	f843 cc04 	str.w	ip, [r3, #-4]
   d8ed8:	d8d8      	bhi.n	d8e8c <__gethex+0x3a0>
   d8eda:	68a3      	ldr	r3, [r4, #8]
   d8edc:	4599      	cmp	r9, r3
   d8ede:	db14      	blt.n	d8f0a <__gethex+0x41e>
   d8ee0:	6861      	ldr	r1, [r4, #4]
   d8ee2:	ee18 0a10 	vmov	r0, s16
   d8ee6:	3101      	adds	r1, #1
   d8ee8:	f000 fa02 	bl	d92f0 <_Balloc>
   d8eec:	6922      	ldr	r2, [r4, #16]
   d8eee:	3202      	adds	r2, #2
   d8ef0:	f104 010c 	add.w	r1, r4, #12
   d8ef4:	4682      	mov	sl, r0
   d8ef6:	0092      	lsls	r2, r2, #2
   d8ef8:	300c      	adds	r0, #12
   d8efa:	f7fe fb87 	bl	d760c <memcpy>
   d8efe:	4621      	mov	r1, r4
   d8f00:	ee18 0a10 	vmov	r0, s16
   d8f04:	f000 fa28 	bl	d9358 <_Bfree>
   d8f08:	4654      	mov	r4, sl
   d8f0a:	6923      	ldr	r3, [r4, #16]
   d8f0c:	1c5a      	adds	r2, r3, #1
   d8f0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d8f12:	6122      	str	r2, [r4, #16]
   d8f14:	2201      	movs	r2, #1
   d8f16:	615a      	str	r2, [r3, #20]
   d8f18:	e7c0      	b.n	d8e9c <__gethex+0x3b0>
   d8f1a:	6922      	ldr	r2, [r4, #16]
   d8f1c:	454a      	cmp	r2, r9
   d8f1e:	dd0b      	ble.n	d8f38 <__gethex+0x44c>
   d8f20:	2101      	movs	r1, #1
   d8f22:	4620      	mov	r0, r4
   d8f24:	f7ff fd7a 	bl	d8a1c <rshift>
   d8f28:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8f2c:	3501      	adds	r5, #1
   d8f2e:	42ab      	cmp	r3, r5
   d8f30:	f6ff aed7 	blt.w	d8ce2 <__gethex+0x1f6>
   d8f34:	2701      	movs	r7, #1
   d8f36:	e7c5      	b.n	d8ec4 <__gethex+0x3d8>
   d8f38:	f016 061f 	ands.w	r6, r6, #31
   d8f3c:	d0fa      	beq.n	d8f34 <__gethex+0x448>
   d8f3e:	449b      	add	fp, r3
   d8f40:	f1c6 0620 	rsb	r6, r6, #32
   d8f44:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d8f48:	f000 fa99 	bl	d947e <__hi0bits>
   d8f4c:	42b0      	cmp	r0, r6
   d8f4e:	dbe7      	blt.n	d8f20 <__gethex+0x434>
   d8f50:	e7f0      	b.n	d8f34 <__gethex+0x448>
   d8f52:	bf00      	nop

000d8f54 <L_shift>:
   d8f54:	f1c2 0208 	rsb	r2, r2, #8
   d8f58:	0092      	lsls	r2, r2, #2
   d8f5a:	b570      	push	{r4, r5, r6, lr}
   d8f5c:	f1c2 0620 	rsb	r6, r2, #32
   d8f60:	6843      	ldr	r3, [r0, #4]
   d8f62:	6804      	ldr	r4, [r0, #0]
   d8f64:	fa03 f506 	lsl.w	r5, r3, r6
   d8f68:	432c      	orrs	r4, r5
   d8f6a:	40d3      	lsrs	r3, r2
   d8f6c:	6004      	str	r4, [r0, #0]
   d8f6e:	f840 3f04 	str.w	r3, [r0, #4]!
   d8f72:	4288      	cmp	r0, r1
   d8f74:	d3f4      	bcc.n	d8f60 <L_shift+0xc>
   d8f76:	bd70      	pop	{r4, r5, r6, pc}

000d8f78 <__match>:
   d8f78:	b530      	push	{r4, r5, lr}
   d8f7a:	6803      	ldr	r3, [r0, #0]
   d8f7c:	3301      	adds	r3, #1
   d8f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8f82:	b914      	cbnz	r4, d8f8a <__match+0x12>
   d8f84:	6003      	str	r3, [r0, #0]
   d8f86:	2001      	movs	r0, #1
   d8f88:	bd30      	pop	{r4, r5, pc}
   d8f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8f8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d8f92:	2d19      	cmp	r5, #25
   d8f94:	bf98      	it	ls
   d8f96:	3220      	addls	r2, #32
   d8f98:	42a2      	cmp	r2, r4
   d8f9a:	d0f0      	beq.n	d8f7e <__match+0x6>
   d8f9c:	2000      	movs	r0, #0
   d8f9e:	e7f3      	b.n	d8f88 <__match+0x10>

000d8fa0 <__hexnan>:
   d8fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fa4:	680b      	ldr	r3, [r1, #0]
   d8fa6:	6801      	ldr	r1, [r0, #0]
   d8fa8:	115e      	asrs	r6, r3, #5
   d8faa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d8fae:	f013 031f 	ands.w	r3, r3, #31
   d8fb2:	b087      	sub	sp, #28
   d8fb4:	bf18      	it	ne
   d8fb6:	3604      	addne	r6, #4
   d8fb8:	2500      	movs	r5, #0
   d8fba:	1f37      	subs	r7, r6, #4
   d8fbc:	4682      	mov	sl, r0
   d8fbe:	4690      	mov	r8, r2
   d8fc0:	9301      	str	r3, [sp, #4]
   d8fc2:	f846 5c04 	str.w	r5, [r6, #-4]
   d8fc6:	46b9      	mov	r9, r7
   d8fc8:	463c      	mov	r4, r7
   d8fca:	9502      	str	r5, [sp, #8]
   d8fcc:	46ab      	mov	fp, r5
   d8fce:	784a      	ldrb	r2, [r1, #1]
   d8fd0:	1c4b      	adds	r3, r1, #1
   d8fd2:	9303      	str	r3, [sp, #12]
   d8fd4:	b342      	cbz	r2, d9028 <__hexnan+0x88>
   d8fd6:	4610      	mov	r0, r2
   d8fd8:	9105      	str	r1, [sp, #20]
   d8fda:	9204      	str	r2, [sp, #16]
   d8fdc:	f7ff fd70 	bl	d8ac0 <__hexdig_fun>
   d8fe0:	2800      	cmp	r0, #0
   d8fe2:	d14f      	bne.n	d9084 <__hexnan+0xe4>
   d8fe4:	9a04      	ldr	r2, [sp, #16]
   d8fe6:	9905      	ldr	r1, [sp, #20]
   d8fe8:	2a20      	cmp	r2, #32
   d8fea:	d818      	bhi.n	d901e <__hexnan+0x7e>
   d8fec:	9b02      	ldr	r3, [sp, #8]
   d8fee:	459b      	cmp	fp, r3
   d8ff0:	dd13      	ble.n	d901a <__hexnan+0x7a>
   d8ff2:	454c      	cmp	r4, r9
   d8ff4:	d206      	bcs.n	d9004 <__hexnan+0x64>
   d8ff6:	2d07      	cmp	r5, #7
   d8ff8:	dc04      	bgt.n	d9004 <__hexnan+0x64>
   d8ffa:	462a      	mov	r2, r5
   d8ffc:	4649      	mov	r1, r9
   d8ffe:	4620      	mov	r0, r4
   d9000:	f7ff ffa8 	bl	d8f54 <L_shift>
   d9004:	4544      	cmp	r4, r8
   d9006:	d950      	bls.n	d90aa <__hexnan+0x10a>
   d9008:	2300      	movs	r3, #0
   d900a:	f1a4 0904 	sub.w	r9, r4, #4
   d900e:	f844 3c04 	str.w	r3, [r4, #-4]
   d9012:	f8cd b008 	str.w	fp, [sp, #8]
   d9016:	464c      	mov	r4, r9
   d9018:	461d      	mov	r5, r3
   d901a:	9903      	ldr	r1, [sp, #12]
   d901c:	e7d7      	b.n	d8fce <__hexnan+0x2e>
   d901e:	2a29      	cmp	r2, #41	; 0x29
   d9020:	d156      	bne.n	d90d0 <__hexnan+0x130>
   d9022:	3102      	adds	r1, #2
   d9024:	f8ca 1000 	str.w	r1, [sl]
   d9028:	f1bb 0f00 	cmp.w	fp, #0
   d902c:	d050      	beq.n	d90d0 <__hexnan+0x130>
   d902e:	454c      	cmp	r4, r9
   d9030:	d206      	bcs.n	d9040 <__hexnan+0xa0>
   d9032:	2d07      	cmp	r5, #7
   d9034:	dc04      	bgt.n	d9040 <__hexnan+0xa0>
   d9036:	462a      	mov	r2, r5
   d9038:	4649      	mov	r1, r9
   d903a:	4620      	mov	r0, r4
   d903c:	f7ff ff8a 	bl	d8f54 <L_shift>
   d9040:	4544      	cmp	r4, r8
   d9042:	d934      	bls.n	d90ae <__hexnan+0x10e>
   d9044:	f1a8 0204 	sub.w	r2, r8, #4
   d9048:	4623      	mov	r3, r4
   d904a:	f853 1b04 	ldr.w	r1, [r3], #4
   d904e:	f842 1f04 	str.w	r1, [r2, #4]!
   d9052:	429f      	cmp	r7, r3
   d9054:	d2f9      	bcs.n	d904a <__hexnan+0xaa>
   d9056:	1b3b      	subs	r3, r7, r4
   d9058:	f023 0303 	bic.w	r3, r3, #3
   d905c:	3304      	adds	r3, #4
   d905e:	3401      	adds	r4, #1
   d9060:	3e03      	subs	r6, #3
   d9062:	42b4      	cmp	r4, r6
   d9064:	bf88      	it	hi
   d9066:	2304      	movhi	r3, #4
   d9068:	4443      	add	r3, r8
   d906a:	2200      	movs	r2, #0
   d906c:	f843 2b04 	str.w	r2, [r3], #4
   d9070:	429f      	cmp	r7, r3
   d9072:	d2fb      	bcs.n	d906c <__hexnan+0xcc>
   d9074:	683b      	ldr	r3, [r7, #0]
   d9076:	b91b      	cbnz	r3, d9080 <__hexnan+0xe0>
   d9078:	4547      	cmp	r7, r8
   d907a:	d127      	bne.n	d90cc <__hexnan+0x12c>
   d907c:	2301      	movs	r3, #1
   d907e:	603b      	str	r3, [r7, #0]
   d9080:	2005      	movs	r0, #5
   d9082:	e026      	b.n	d90d2 <__hexnan+0x132>
   d9084:	3501      	adds	r5, #1
   d9086:	2d08      	cmp	r5, #8
   d9088:	f10b 0b01 	add.w	fp, fp, #1
   d908c:	dd06      	ble.n	d909c <__hexnan+0xfc>
   d908e:	4544      	cmp	r4, r8
   d9090:	d9c3      	bls.n	d901a <__hexnan+0x7a>
   d9092:	2300      	movs	r3, #0
   d9094:	f844 3c04 	str.w	r3, [r4, #-4]
   d9098:	2501      	movs	r5, #1
   d909a:	3c04      	subs	r4, #4
   d909c:	6822      	ldr	r2, [r4, #0]
   d909e:	f000 000f 	and.w	r0, r0, #15
   d90a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d90a6:	6022      	str	r2, [r4, #0]
   d90a8:	e7b7      	b.n	d901a <__hexnan+0x7a>
   d90aa:	2508      	movs	r5, #8
   d90ac:	e7b5      	b.n	d901a <__hexnan+0x7a>
   d90ae:	9b01      	ldr	r3, [sp, #4]
   d90b0:	2b00      	cmp	r3, #0
   d90b2:	d0df      	beq.n	d9074 <__hexnan+0xd4>
   d90b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d90b8:	f1c3 0320 	rsb	r3, r3, #32
   d90bc:	fa22 f303 	lsr.w	r3, r2, r3
   d90c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d90c4:	401a      	ands	r2, r3
   d90c6:	f846 2c04 	str.w	r2, [r6, #-4]
   d90ca:	e7d3      	b.n	d9074 <__hexnan+0xd4>
   d90cc:	3f04      	subs	r7, #4
   d90ce:	e7d1      	b.n	d9074 <__hexnan+0xd4>
   d90d0:	2004      	movs	r0, #4
   d90d2:	b007      	add	sp, #28
   d90d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d90d8 <_findenv_r>:
   d90d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d90dc:	4607      	mov	r7, r0
   d90de:	4689      	mov	r9, r1
   d90e0:	4616      	mov	r6, r2
   d90e2:	f000 fd6b 	bl	d9bbc <__env_lock>
   d90e6:	4b18      	ldr	r3, [pc, #96]	; (d9148 <_findenv_r+0x70>)
   d90e8:	681c      	ldr	r4, [r3, #0]
   d90ea:	469a      	mov	sl, r3
   d90ec:	b134      	cbz	r4, d90fc <_findenv_r+0x24>
   d90ee:	464b      	mov	r3, r9
   d90f0:	4698      	mov	r8, r3
   d90f2:	f813 1b01 	ldrb.w	r1, [r3], #1
   d90f6:	b139      	cbz	r1, d9108 <_findenv_r+0x30>
   d90f8:	293d      	cmp	r1, #61	; 0x3d
   d90fa:	d1f9      	bne.n	d90f0 <_findenv_r+0x18>
   d90fc:	4638      	mov	r0, r7
   d90fe:	f000 fd63 	bl	d9bc8 <__env_unlock>
   d9102:	2000      	movs	r0, #0
   d9104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9108:	eba8 0809 	sub.w	r8, r8, r9
   d910c:	46a3      	mov	fp, r4
   d910e:	f854 0b04 	ldr.w	r0, [r4], #4
   d9112:	2800      	cmp	r0, #0
   d9114:	d0f2      	beq.n	d90fc <_findenv_r+0x24>
   d9116:	4642      	mov	r2, r8
   d9118:	4649      	mov	r1, r9
   d911a:	f7fe fae8 	bl	d76ee <strncmp>
   d911e:	2800      	cmp	r0, #0
   d9120:	d1f4      	bne.n	d910c <_findenv_r+0x34>
   d9122:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d9126:	eb03 0508 	add.w	r5, r3, r8
   d912a:	f813 3008 	ldrb.w	r3, [r3, r8]
   d912e:	2b3d      	cmp	r3, #61	; 0x3d
   d9130:	d1ec      	bne.n	d910c <_findenv_r+0x34>
   d9132:	f8da 3000 	ldr.w	r3, [sl]
   d9136:	ebab 0303 	sub.w	r3, fp, r3
   d913a:	109b      	asrs	r3, r3, #2
   d913c:	4638      	mov	r0, r7
   d913e:	6033      	str	r3, [r6, #0]
   d9140:	f000 fd42 	bl	d9bc8 <__env_unlock>
   d9144:	1c68      	adds	r0, r5, #1
   d9146:	e7dd      	b.n	d9104 <_findenv_r+0x2c>
   d9148:	2003e4a0 	.word	0x2003e4a0

000d914c <_getenv_r>:
   d914c:	b507      	push	{r0, r1, r2, lr}
   d914e:	aa01      	add	r2, sp, #4
   d9150:	f7ff ffc2 	bl	d90d8 <_findenv_r>
   d9154:	b003      	add	sp, #12
   d9156:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d915c <__gettzinfo>:
   d915c:	4800      	ldr	r0, [pc, #0]	; (d9160 <__gettzinfo+0x4>)
   d915e:	4770      	bx	lr
   d9160:	2003e2d8 	.word	0x2003e2d8

000d9164 <gmtime_r>:
   d9164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9168:	e9d0 6700 	ldrd	r6, r7, [r0]
   d916c:	460c      	mov	r4, r1
   d916e:	4a51      	ldr	r2, [pc, #324]	; (d92b4 <gmtime_r+0x150>)
   d9170:	2300      	movs	r3, #0
   d9172:	4630      	mov	r0, r6
   d9174:	4639      	mov	r1, r7
   d9176:	f000 fd2d 	bl	d9bd4 <__aeabi_ldivmod>
   d917a:	4639      	mov	r1, r7
   d917c:	4605      	mov	r5, r0
   d917e:	4a4d      	ldr	r2, [pc, #308]	; (d92b4 <gmtime_r+0x150>)
   d9180:	4630      	mov	r0, r6
   d9182:	2300      	movs	r3, #0
   d9184:	f000 fd26 	bl	d9bd4 <__aeabi_ldivmod>
   d9188:	2a00      	cmp	r2, #0
   d918a:	bfbc      	itt	lt
   d918c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9190:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9194:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9198:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   d919c:	fbb2 f3f1 	udiv	r3, r2, r1
   d91a0:	fb01 2213 	mls	r2, r1, r3, r2
   d91a4:	f04f 013c 	mov.w	r1, #60	; 0x3c
   d91a8:	bfac      	ite	ge
   d91aa:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   d91ae:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   d91b2:	60a3      	str	r3, [r4, #8]
   d91b4:	fbb2 f3f1 	udiv	r3, r2, r1
   d91b8:	fb01 2213 	mls	r2, r1, r3, r2
   d91bc:	6063      	str	r3, [r4, #4]
   d91be:	6022      	str	r2, [r4, #0]
   d91c0:	1cc3      	adds	r3, r0, #3
   d91c2:	2207      	movs	r2, #7
   d91c4:	fb93 f2f2 	sdiv	r2, r3, r2
   d91c8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   d91cc:	1a9b      	subs	r3, r3, r2
   d91ce:	bf48      	it	mi
   d91d0:	3307      	addmi	r3, #7
   d91d2:	2800      	cmp	r0, #0
   d91d4:	61a3      	str	r3, [r4, #24]
   d91d6:	bfb8      	it	lt
   d91d8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   d91dc:	4936      	ldr	r1, [pc, #216]	; (d92b8 <gmtime_r+0x154>)
   d91de:	bfae      	itee	ge
   d91e0:	fb90 f1f1 	sdivge	r1, r0, r1
   d91e4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   d91e8:	fb93 f1f1 	sdivlt	r1, r3, r1
   d91ec:	4b33      	ldr	r3, [pc, #204]	; (d92bc <gmtime_r+0x158>)
   d91ee:	fb03 0001 	mla	r0, r3, r1, r0
   d91f2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d91f6:	fbb0 f2f2 	udiv	r2, r0, r2
   d91fa:	4402      	add	r2, r0
   d91fc:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   d9200:	fbb0 f3fc 	udiv	r3, r0, ip
   d9204:	1ad2      	subs	r2, r2, r3
   d9206:	f240 176d 	movw	r7, #365	; 0x16d
   d920a:	4b2d      	ldr	r3, [pc, #180]	; (d92c0 <gmtime_r+0x15c>)
   d920c:	fbb0 f3f3 	udiv	r3, r0, r3
   d9210:	2664      	movs	r6, #100	; 0x64
   d9212:	1ad3      	subs	r3, r2, r3
   d9214:	fbb3 f5f7 	udiv	r5, r3, r7
   d9218:	fbb3 f3fc 	udiv	r3, r3, ip
   d921c:	fbb5 f2f6 	udiv	r2, r5, r6
   d9220:	1ad3      	subs	r3, r2, r3
   d9222:	4403      	add	r3, r0
   d9224:	fb07 3315 	mls	r3, r7, r5, r3
   d9228:	2099      	movs	r0, #153	; 0x99
   d922a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   d922e:	f10c 0c02 	add.w	ip, ip, #2
   d9232:	f103 0e01 	add.w	lr, r3, #1
   d9236:	fbbc f7f0 	udiv	r7, ip, r0
   d923a:	4378      	muls	r0, r7
   d923c:	3002      	adds	r0, #2
   d923e:	f04f 0805 	mov.w	r8, #5
   d9242:	fbb0 f0f8 	udiv	r0, r0, r8
   d9246:	ebae 0000 	sub.w	r0, lr, r0
   d924a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   d924e:	45f4      	cmp	ip, lr
   d9250:	bf94      	ite	ls
   d9252:	f04f 0c02 	movls.w	ip, #2
   d9256:	f06f 0c09 	mvnhi.w	ip, #9
   d925a:	4467      	add	r7, ip
   d925c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   d9260:	fb0c 5101 	mla	r1, ip, r1, r5
   d9264:	2f01      	cmp	r7, #1
   d9266:	bf98      	it	ls
   d9268:	3101      	addls	r1, #1
   d926a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d926e:	d30c      	bcc.n	d928a <gmtime_r+0x126>
   d9270:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   d9274:	61e3      	str	r3, [r4, #28]
   d9276:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   d927a:	2300      	movs	r3, #0
   d927c:	60e0      	str	r0, [r4, #12]
   d927e:	e9c4 7104 	strd	r7, r1, [r4, #16]
   d9282:	6223      	str	r3, [r4, #32]
   d9284:	4620      	mov	r0, r4
   d9286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d928a:	f015 0f03 	tst.w	r5, #3
   d928e:	d102      	bne.n	d9296 <gmtime_r+0x132>
   d9290:	fb06 5212 	mls	r2, r6, r2, r5
   d9294:	b95a      	cbnz	r2, d92ae <gmtime_r+0x14a>
   d9296:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d929a:	fbb5 f2f6 	udiv	r2, r5, r6
   d929e:	fb06 5212 	mls	r2, r6, r2, r5
   d92a2:	fab2 f282 	clz	r2, r2
   d92a6:	0952      	lsrs	r2, r2, #5
   d92a8:	333b      	adds	r3, #59	; 0x3b
   d92aa:	4413      	add	r3, r2
   d92ac:	e7e2      	b.n	d9274 <gmtime_r+0x110>
   d92ae:	2201      	movs	r2, #1
   d92b0:	e7fa      	b.n	d92a8 <gmtime_r+0x144>
   d92b2:	bf00      	nop
   d92b4:	00015180 	.word	0x00015180
   d92b8:	00023ab1 	.word	0x00023ab1
   d92bc:	fffdc54f 	.word	0xfffdc54f
   d92c0:	00023ab0 	.word	0x00023ab0

000d92c4 <__retarget_lock_acquire>:
   d92c4:	4770      	bx	lr

000d92c6 <__retarget_lock_acquire_recursive>:
   d92c6:	4770      	bx	lr

000d92c8 <__retarget_lock_release>:
   d92c8:	4770      	bx	lr

000d92ca <__retarget_lock_release_recursive>:
   d92ca:	4770      	bx	lr

000d92cc <__ascii_mbtowc>:
   d92cc:	b082      	sub	sp, #8
   d92ce:	b901      	cbnz	r1, d92d2 <__ascii_mbtowc+0x6>
   d92d0:	a901      	add	r1, sp, #4
   d92d2:	b142      	cbz	r2, d92e6 <__ascii_mbtowc+0x1a>
   d92d4:	b14b      	cbz	r3, d92ea <__ascii_mbtowc+0x1e>
   d92d6:	7813      	ldrb	r3, [r2, #0]
   d92d8:	600b      	str	r3, [r1, #0]
   d92da:	7812      	ldrb	r2, [r2, #0]
   d92dc:	1e10      	subs	r0, r2, #0
   d92de:	bf18      	it	ne
   d92e0:	2001      	movne	r0, #1
   d92e2:	b002      	add	sp, #8
   d92e4:	4770      	bx	lr
   d92e6:	4610      	mov	r0, r2
   d92e8:	e7fb      	b.n	d92e2 <__ascii_mbtowc+0x16>
   d92ea:	f06f 0001 	mvn.w	r0, #1
   d92ee:	e7f8      	b.n	d92e2 <__ascii_mbtowc+0x16>

000d92f0 <_Balloc>:
   d92f0:	b570      	push	{r4, r5, r6, lr}
   d92f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d92f4:	4604      	mov	r4, r0
   d92f6:	460d      	mov	r5, r1
   d92f8:	b93e      	cbnz	r6, d930a <_Balloc+0x1a>
   d92fa:	2010      	movs	r0, #16
   d92fc:	f7fc f868 	bl	d53d0 <malloc>
   d9300:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9304:	6260      	str	r0, [r4, #36]	; 0x24
   d9306:	6006      	str	r6, [r0, #0]
   d9308:	60c6      	str	r6, [r0, #12]
   d930a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d930c:	68f3      	ldr	r3, [r6, #12]
   d930e:	b183      	cbz	r3, d9332 <_Balloc+0x42>
   d9310:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9312:	68db      	ldr	r3, [r3, #12]
   d9314:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d9318:	b9b8      	cbnz	r0, d934a <_Balloc+0x5a>
   d931a:	2101      	movs	r1, #1
   d931c:	fa01 f605 	lsl.w	r6, r1, r5
   d9320:	1d72      	adds	r2, r6, #5
   d9322:	0092      	lsls	r2, r2, #2
   d9324:	4620      	mov	r0, r4
   d9326:	f000 fc22 	bl	d9b6e <_calloc_r>
   d932a:	b160      	cbz	r0, d9346 <_Balloc+0x56>
   d932c:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d9330:	e00e      	b.n	d9350 <_Balloc+0x60>
   d9332:	2221      	movs	r2, #33	; 0x21
   d9334:	2104      	movs	r1, #4
   d9336:	4620      	mov	r0, r4
   d9338:	f000 fc19 	bl	d9b6e <_calloc_r>
   d933c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d933e:	60f0      	str	r0, [r6, #12]
   d9340:	68db      	ldr	r3, [r3, #12]
   d9342:	2b00      	cmp	r3, #0
   d9344:	d1e4      	bne.n	d9310 <_Balloc+0x20>
   d9346:	2000      	movs	r0, #0
   d9348:	bd70      	pop	{r4, r5, r6, pc}
   d934a:	6802      	ldr	r2, [r0, #0]
   d934c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d9350:	2300      	movs	r3, #0
   d9352:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d9356:	e7f7      	b.n	d9348 <_Balloc+0x58>

000d9358 <_Bfree>:
   d9358:	b570      	push	{r4, r5, r6, lr}
   d935a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d935c:	4605      	mov	r5, r0
   d935e:	460c      	mov	r4, r1
   d9360:	b93e      	cbnz	r6, d9372 <_Bfree+0x1a>
   d9362:	2010      	movs	r0, #16
   d9364:	f7fc f834 	bl	d53d0 <malloc>
   d9368:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d936c:	6268      	str	r0, [r5, #36]	; 0x24
   d936e:	6006      	str	r6, [r0, #0]
   d9370:	60c6      	str	r6, [r0, #12]
   d9372:	b13c      	cbz	r4, d9384 <_Bfree+0x2c>
   d9374:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d9376:	6862      	ldr	r2, [r4, #4]
   d9378:	68db      	ldr	r3, [r3, #12]
   d937a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d937e:	6021      	str	r1, [r4, #0]
   d9380:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d9384:	bd70      	pop	{r4, r5, r6, pc}

000d9386 <__multadd>:
   d9386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d938a:	690e      	ldr	r6, [r1, #16]
   d938c:	4607      	mov	r7, r0
   d938e:	4698      	mov	r8, r3
   d9390:	460c      	mov	r4, r1
   d9392:	f101 0014 	add.w	r0, r1, #20
   d9396:	2300      	movs	r3, #0
   d9398:	6805      	ldr	r5, [r0, #0]
   d939a:	b2a9      	uxth	r1, r5
   d939c:	fb02 8101 	mla	r1, r2, r1, r8
   d93a0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d93a4:	0c2d      	lsrs	r5, r5, #16
   d93a6:	fb02 c505 	mla	r5, r2, r5, ip
   d93aa:	b289      	uxth	r1, r1
   d93ac:	3301      	adds	r3, #1
   d93ae:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d93b2:	429e      	cmp	r6, r3
   d93b4:	f840 1b04 	str.w	r1, [r0], #4
   d93b8:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d93bc:	dcec      	bgt.n	d9398 <__multadd+0x12>
   d93be:	f1b8 0f00 	cmp.w	r8, #0
   d93c2:	d01b      	beq.n	d93fc <__multadd+0x76>
   d93c4:	68a3      	ldr	r3, [r4, #8]
   d93c6:	42b3      	cmp	r3, r6
   d93c8:	dc12      	bgt.n	d93f0 <__multadd+0x6a>
   d93ca:	6861      	ldr	r1, [r4, #4]
   d93cc:	4638      	mov	r0, r7
   d93ce:	3101      	adds	r1, #1
   d93d0:	f7ff ff8e 	bl	d92f0 <_Balloc>
   d93d4:	6922      	ldr	r2, [r4, #16]
   d93d6:	3202      	adds	r2, #2
   d93d8:	f104 010c 	add.w	r1, r4, #12
   d93dc:	4605      	mov	r5, r0
   d93de:	0092      	lsls	r2, r2, #2
   d93e0:	300c      	adds	r0, #12
   d93e2:	f7fe f913 	bl	d760c <memcpy>
   d93e6:	4621      	mov	r1, r4
   d93e8:	4638      	mov	r0, r7
   d93ea:	f7ff ffb5 	bl	d9358 <_Bfree>
   d93ee:	462c      	mov	r4, r5
   d93f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d93f4:	3601      	adds	r6, #1
   d93f6:	f8c3 8014 	str.w	r8, [r3, #20]
   d93fa:	6126      	str	r6, [r4, #16]
   d93fc:	4620      	mov	r0, r4
   d93fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9402 <__s2b>:
   d9402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9406:	460c      	mov	r4, r1
   d9408:	4615      	mov	r5, r2
   d940a:	461f      	mov	r7, r3
   d940c:	2209      	movs	r2, #9
   d940e:	3308      	adds	r3, #8
   d9410:	4606      	mov	r6, r0
   d9412:	fb93 f3f2 	sdiv	r3, r3, r2
   d9416:	2100      	movs	r1, #0
   d9418:	2201      	movs	r2, #1
   d941a:	429a      	cmp	r2, r3
   d941c:	db20      	blt.n	d9460 <__s2b+0x5e>
   d941e:	4630      	mov	r0, r6
   d9420:	f7ff ff66 	bl	d92f0 <_Balloc>
   d9424:	9b08      	ldr	r3, [sp, #32]
   d9426:	6143      	str	r3, [r0, #20]
   d9428:	2d09      	cmp	r5, #9
   d942a:	f04f 0301 	mov.w	r3, #1
   d942e:	6103      	str	r3, [r0, #16]
   d9430:	dd19      	ble.n	d9466 <__s2b+0x64>
   d9432:	f104 0909 	add.w	r9, r4, #9
   d9436:	46c8      	mov	r8, r9
   d9438:	442c      	add	r4, r5
   d943a:	f818 3b01 	ldrb.w	r3, [r8], #1
   d943e:	4601      	mov	r1, r0
   d9440:	3b30      	subs	r3, #48	; 0x30
   d9442:	220a      	movs	r2, #10
   d9444:	4630      	mov	r0, r6
   d9446:	f7ff ff9e 	bl	d9386 <__multadd>
   d944a:	45a0      	cmp	r8, r4
   d944c:	d1f5      	bne.n	d943a <__s2b+0x38>
   d944e:	f1a5 0408 	sub.w	r4, r5, #8
   d9452:	444c      	add	r4, r9
   d9454:	1b2d      	subs	r5, r5, r4
   d9456:	1963      	adds	r3, r4, r5
   d9458:	42bb      	cmp	r3, r7
   d945a:	db07      	blt.n	d946c <__s2b+0x6a>
   d945c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9460:	0052      	lsls	r2, r2, #1
   d9462:	3101      	adds	r1, #1
   d9464:	e7d9      	b.n	d941a <__s2b+0x18>
   d9466:	340a      	adds	r4, #10
   d9468:	2509      	movs	r5, #9
   d946a:	e7f3      	b.n	d9454 <__s2b+0x52>
   d946c:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9470:	4601      	mov	r1, r0
   d9472:	3b30      	subs	r3, #48	; 0x30
   d9474:	220a      	movs	r2, #10
   d9476:	4630      	mov	r0, r6
   d9478:	f7ff ff85 	bl	d9386 <__multadd>
   d947c:	e7eb      	b.n	d9456 <__s2b+0x54>

000d947e <__hi0bits>:
   d947e:	0c03      	lsrs	r3, r0, #16
   d9480:	041b      	lsls	r3, r3, #16
   d9482:	b9d3      	cbnz	r3, d94ba <__hi0bits+0x3c>
   d9484:	0400      	lsls	r0, r0, #16
   d9486:	2310      	movs	r3, #16
   d9488:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d948c:	bf04      	itt	eq
   d948e:	0200      	lsleq	r0, r0, #8
   d9490:	3308      	addeq	r3, #8
   d9492:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9496:	bf04      	itt	eq
   d9498:	0100      	lsleq	r0, r0, #4
   d949a:	3304      	addeq	r3, #4
   d949c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d94a0:	bf04      	itt	eq
   d94a2:	0080      	lsleq	r0, r0, #2
   d94a4:	3302      	addeq	r3, #2
   d94a6:	2800      	cmp	r0, #0
   d94a8:	db05      	blt.n	d94b6 <__hi0bits+0x38>
   d94aa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d94ae:	f103 0301 	add.w	r3, r3, #1
   d94b2:	bf08      	it	eq
   d94b4:	2320      	moveq	r3, #32
   d94b6:	4618      	mov	r0, r3
   d94b8:	4770      	bx	lr
   d94ba:	2300      	movs	r3, #0
   d94bc:	e7e4      	b.n	d9488 <__hi0bits+0xa>

000d94be <__lo0bits>:
   d94be:	6803      	ldr	r3, [r0, #0]
   d94c0:	f013 0207 	ands.w	r2, r3, #7
   d94c4:	4601      	mov	r1, r0
   d94c6:	d00b      	beq.n	d94e0 <__lo0bits+0x22>
   d94c8:	07da      	lsls	r2, r3, #31
   d94ca:	d424      	bmi.n	d9516 <__lo0bits+0x58>
   d94cc:	0798      	lsls	r0, r3, #30
   d94ce:	bf49      	itett	mi
   d94d0:	085b      	lsrmi	r3, r3, #1
   d94d2:	089b      	lsrpl	r3, r3, #2
   d94d4:	2001      	movmi	r0, #1
   d94d6:	600b      	strmi	r3, [r1, #0]
   d94d8:	bf5c      	itt	pl
   d94da:	600b      	strpl	r3, [r1, #0]
   d94dc:	2002      	movpl	r0, #2
   d94de:	4770      	bx	lr
   d94e0:	b298      	uxth	r0, r3
   d94e2:	b9b0      	cbnz	r0, d9512 <__lo0bits+0x54>
   d94e4:	0c1b      	lsrs	r3, r3, #16
   d94e6:	2010      	movs	r0, #16
   d94e8:	f013 0fff 	tst.w	r3, #255	; 0xff
   d94ec:	bf04      	itt	eq
   d94ee:	0a1b      	lsreq	r3, r3, #8
   d94f0:	3008      	addeq	r0, #8
   d94f2:	071a      	lsls	r2, r3, #28
   d94f4:	bf04      	itt	eq
   d94f6:	091b      	lsreq	r3, r3, #4
   d94f8:	3004      	addeq	r0, #4
   d94fa:	079a      	lsls	r2, r3, #30
   d94fc:	bf04      	itt	eq
   d94fe:	089b      	lsreq	r3, r3, #2
   d9500:	3002      	addeq	r0, #2
   d9502:	07da      	lsls	r2, r3, #31
   d9504:	d403      	bmi.n	d950e <__lo0bits+0x50>
   d9506:	085b      	lsrs	r3, r3, #1
   d9508:	f100 0001 	add.w	r0, r0, #1
   d950c:	d005      	beq.n	d951a <__lo0bits+0x5c>
   d950e:	600b      	str	r3, [r1, #0]
   d9510:	4770      	bx	lr
   d9512:	4610      	mov	r0, r2
   d9514:	e7e8      	b.n	d94e8 <__lo0bits+0x2a>
   d9516:	2000      	movs	r0, #0
   d9518:	4770      	bx	lr
   d951a:	2020      	movs	r0, #32
   d951c:	4770      	bx	lr

000d951e <__i2b>:
   d951e:	b510      	push	{r4, lr}
   d9520:	460c      	mov	r4, r1
   d9522:	2101      	movs	r1, #1
   d9524:	f7ff fee4 	bl	d92f0 <_Balloc>
   d9528:	2201      	movs	r2, #1
   d952a:	6144      	str	r4, [r0, #20]
   d952c:	6102      	str	r2, [r0, #16]
   d952e:	bd10      	pop	{r4, pc}

000d9530 <__multiply>:
   d9530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9534:	4615      	mov	r5, r2
   d9536:	690a      	ldr	r2, [r1, #16]
   d9538:	692b      	ldr	r3, [r5, #16]
   d953a:	429a      	cmp	r2, r3
   d953c:	bfb8      	it	lt
   d953e:	460b      	movlt	r3, r1
   d9540:	460c      	mov	r4, r1
   d9542:	bfbc      	itt	lt
   d9544:	462c      	movlt	r4, r5
   d9546:	461d      	movlt	r5, r3
   d9548:	6927      	ldr	r7, [r4, #16]
   d954a:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d954e:	68a3      	ldr	r3, [r4, #8]
   d9550:	6861      	ldr	r1, [r4, #4]
   d9552:	eb07 0609 	add.w	r6, r7, r9
   d9556:	42b3      	cmp	r3, r6
   d9558:	bfb8      	it	lt
   d955a:	3101      	addlt	r1, #1
   d955c:	b085      	sub	sp, #20
   d955e:	f7ff fec7 	bl	d92f0 <_Balloc>
   d9562:	f100 0114 	add.w	r1, r0, #20
   d9566:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d956a:	460b      	mov	r3, r1
   d956c:	2200      	movs	r2, #0
   d956e:	4543      	cmp	r3, r8
   d9570:	d31d      	bcc.n	d95ae <__multiply+0x7e>
   d9572:	f104 0314 	add.w	r3, r4, #20
   d9576:	f105 0214 	add.w	r2, r5, #20
   d957a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d957e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9582:	9302      	str	r3, [sp, #8]
   d9584:	1b3b      	subs	r3, r7, r4
   d9586:	3b15      	subs	r3, #21
   d9588:	f023 0303 	bic.w	r3, r3, #3
   d958c:	3304      	adds	r3, #4
   d958e:	f104 0515 	add.w	r5, r4, #21
   d9592:	42af      	cmp	r7, r5
   d9594:	bf38      	it	cc
   d9596:	2304      	movcc	r3, #4
   d9598:	9301      	str	r3, [sp, #4]
   d959a:	9b02      	ldr	r3, [sp, #8]
   d959c:	9203      	str	r2, [sp, #12]
   d959e:	4293      	cmp	r3, r2
   d95a0:	d808      	bhi.n	d95b4 <__multiply+0x84>
   d95a2:	2e00      	cmp	r6, #0
   d95a4:	dc5a      	bgt.n	d965c <__multiply+0x12c>
   d95a6:	6106      	str	r6, [r0, #16]
   d95a8:	b005      	add	sp, #20
   d95aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d95ae:	f843 2b04 	str.w	r2, [r3], #4
   d95b2:	e7dc      	b.n	d956e <__multiply+0x3e>
   d95b4:	f8b2 a000 	ldrh.w	sl, [r2]
   d95b8:	f1ba 0f00 	cmp.w	sl, #0
   d95bc:	d024      	beq.n	d9608 <__multiply+0xd8>
   d95be:	f104 0e14 	add.w	lr, r4, #20
   d95c2:	4689      	mov	r9, r1
   d95c4:	f04f 0c00 	mov.w	ip, #0
   d95c8:	f85e 5b04 	ldr.w	r5, [lr], #4
   d95cc:	f8d9 b000 	ldr.w	fp, [r9]
   d95d0:	b2ab      	uxth	r3, r5
   d95d2:	fa1f fb8b 	uxth.w	fp, fp
   d95d6:	fb0a b303 	mla	r3, sl, r3, fp
   d95da:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d95de:	f8d9 5000 	ldr.w	r5, [r9]
   d95e2:	4463      	add	r3, ip
   d95e4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d95e8:	fb0a c50b 	mla	r5, sl, fp, ip
   d95ec:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d95f0:	b29b      	uxth	r3, r3
   d95f2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d95f6:	4577      	cmp	r7, lr
   d95f8:	f849 3b04 	str.w	r3, [r9], #4
   d95fc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d9600:	d8e2      	bhi.n	d95c8 <__multiply+0x98>
   d9602:	9b01      	ldr	r3, [sp, #4]
   d9604:	f841 c003 	str.w	ip, [r1, r3]
   d9608:	9b03      	ldr	r3, [sp, #12]
   d960a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d960e:	3204      	adds	r2, #4
   d9610:	f1b9 0f00 	cmp.w	r9, #0
   d9614:	d020      	beq.n	d9658 <__multiply+0x128>
   d9616:	680b      	ldr	r3, [r1, #0]
   d9618:	f104 0c14 	add.w	ip, r4, #20
   d961c:	468e      	mov	lr, r1
   d961e:	f04f 0a00 	mov.w	sl, #0
   d9622:	f8bc 5000 	ldrh.w	r5, [ip]
   d9626:	f8be b002 	ldrh.w	fp, [lr, #2]
   d962a:	fb09 b505 	mla	r5, r9, r5, fp
   d962e:	44aa      	add	sl, r5
   d9630:	b29b      	uxth	r3, r3
   d9632:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d9636:	f84e 3b04 	str.w	r3, [lr], #4
   d963a:	f85c 3b04 	ldr.w	r3, [ip], #4
   d963e:	f8be 5000 	ldrh.w	r5, [lr]
   d9642:	0c1b      	lsrs	r3, r3, #16
   d9644:	fb09 5303 	mla	r3, r9, r3, r5
   d9648:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d964c:	4567      	cmp	r7, ip
   d964e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d9652:	d8e6      	bhi.n	d9622 <__multiply+0xf2>
   d9654:	9d01      	ldr	r5, [sp, #4]
   d9656:	514b      	str	r3, [r1, r5]
   d9658:	3104      	adds	r1, #4
   d965a:	e79e      	b.n	d959a <__multiply+0x6a>
   d965c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d9660:	2b00      	cmp	r3, #0
   d9662:	d1a0      	bne.n	d95a6 <__multiply+0x76>
   d9664:	3e01      	subs	r6, #1
   d9666:	e79c      	b.n	d95a2 <__multiply+0x72>

000d9668 <__pow5mult>:
   d9668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d966c:	4615      	mov	r5, r2
   d966e:	f012 0203 	ands.w	r2, r2, #3
   d9672:	4606      	mov	r6, r0
   d9674:	460f      	mov	r7, r1
   d9676:	d007      	beq.n	d9688 <__pow5mult+0x20>
   d9678:	4c21      	ldr	r4, [pc, #132]	; (d9700 <__pow5mult+0x98>)
   d967a:	3a01      	subs	r2, #1
   d967c:	2300      	movs	r3, #0
   d967e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9682:	f7ff fe80 	bl	d9386 <__multadd>
   d9686:	4607      	mov	r7, r0
   d9688:	10ad      	asrs	r5, r5, #2
   d968a:	d035      	beq.n	d96f8 <__pow5mult+0x90>
   d968c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d968e:	b93c      	cbnz	r4, d96a0 <__pow5mult+0x38>
   d9690:	2010      	movs	r0, #16
   d9692:	f7fb fe9d 	bl	d53d0 <malloc>
   d9696:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d969a:	6270      	str	r0, [r6, #36]	; 0x24
   d969c:	6004      	str	r4, [r0, #0]
   d969e:	60c4      	str	r4, [r0, #12]
   d96a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d96a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d96a8:	b94c      	cbnz	r4, d96be <__pow5mult+0x56>
   d96aa:	f240 2171 	movw	r1, #625	; 0x271
   d96ae:	4630      	mov	r0, r6
   d96b0:	f7ff ff35 	bl	d951e <__i2b>
   d96b4:	2300      	movs	r3, #0
   d96b6:	f8c8 0008 	str.w	r0, [r8, #8]
   d96ba:	4604      	mov	r4, r0
   d96bc:	6003      	str	r3, [r0, #0]
   d96be:	f04f 0900 	mov.w	r9, #0
   d96c2:	07eb      	lsls	r3, r5, #31
   d96c4:	d50a      	bpl.n	d96dc <__pow5mult+0x74>
   d96c6:	4639      	mov	r1, r7
   d96c8:	4622      	mov	r2, r4
   d96ca:	4630      	mov	r0, r6
   d96cc:	f7ff ff30 	bl	d9530 <__multiply>
   d96d0:	4639      	mov	r1, r7
   d96d2:	4680      	mov	r8, r0
   d96d4:	4630      	mov	r0, r6
   d96d6:	f7ff fe3f 	bl	d9358 <_Bfree>
   d96da:	4647      	mov	r7, r8
   d96dc:	106d      	asrs	r5, r5, #1
   d96de:	d00b      	beq.n	d96f8 <__pow5mult+0x90>
   d96e0:	6820      	ldr	r0, [r4, #0]
   d96e2:	b938      	cbnz	r0, d96f4 <__pow5mult+0x8c>
   d96e4:	4622      	mov	r2, r4
   d96e6:	4621      	mov	r1, r4
   d96e8:	4630      	mov	r0, r6
   d96ea:	f7ff ff21 	bl	d9530 <__multiply>
   d96ee:	6020      	str	r0, [r4, #0]
   d96f0:	f8c0 9000 	str.w	r9, [r0]
   d96f4:	4604      	mov	r4, r0
   d96f6:	e7e4      	b.n	d96c2 <__pow5mult+0x5a>
   d96f8:	4638      	mov	r0, r7
   d96fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d96fe:	bf00      	nop
   d9700:	000da498 	.word	0x000da498

000d9704 <__lshift>:
   d9704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9708:	460c      	mov	r4, r1
   d970a:	6849      	ldr	r1, [r1, #4]
   d970c:	6923      	ldr	r3, [r4, #16]
   d970e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d9712:	68a3      	ldr	r3, [r4, #8]
   d9714:	4607      	mov	r7, r0
   d9716:	4691      	mov	r9, r2
   d9718:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d971c:	f108 0601 	add.w	r6, r8, #1
   d9720:	42b3      	cmp	r3, r6
   d9722:	db3f      	blt.n	d97a4 <__lshift+0xa0>
   d9724:	4638      	mov	r0, r7
   d9726:	f7ff fde3 	bl	d92f0 <_Balloc>
   d972a:	2300      	movs	r3, #0
   d972c:	4605      	mov	r5, r0
   d972e:	f100 0114 	add.w	r1, r0, #20
   d9732:	f100 0210 	add.w	r2, r0, #16
   d9736:	4618      	mov	r0, r3
   d9738:	4553      	cmp	r3, sl
   d973a:	db36      	blt.n	d97aa <__lshift+0xa6>
   d973c:	6920      	ldr	r0, [r4, #16]
   d973e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d9742:	f104 0314 	add.w	r3, r4, #20
   d9746:	f019 091f 	ands.w	r9, r9, #31
   d974a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d974e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d9752:	d02e      	beq.n	d97b2 <__lshift+0xae>
   d9754:	f1c9 0e20 	rsb	lr, r9, #32
   d9758:	468a      	mov	sl, r1
   d975a:	2200      	movs	r2, #0
   d975c:	6818      	ldr	r0, [r3, #0]
   d975e:	fa00 f009 	lsl.w	r0, r0, r9
   d9762:	4302      	orrs	r2, r0
   d9764:	f84a 2b04 	str.w	r2, [sl], #4
   d9768:	f853 2b04 	ldr.w	r2, [r3], #4
   d976c:	459c      	cmp	ip, r3
   d976e:	fa22 f20e 	lsr.w	r2, r2, lr
   d9772:	d8f3      	bhi.n	d975c <__lshift+0x58>
   d9774:	ebac 0304 	sub.w	r3, ip, r4
   d9778:	3b15      	subs	r3, #21
   d977a:	f023 0303 	bic.w	r3, r3, #3
   d977e:	3304      	adds	r3, #4
   d9780:	f104 0015 	add.w	r0, r4, #21
   d9784:	4560      	cmp	r0, ip
   d9786:	bf88      	it	hi
   d9788:	2304      	movhi	r3, #4
   d978a:	50ca      	str	r2, [r1, r3]
   d978c:	b10a      	cbz	r2, d9792 <__lshift+0x8e>
   d978e:	f108 0602 	add.w	r6, r8, #2
   d9792:	3e01      	subs	r6, #1
   d9794:	4638      	mov	r0, r7
   d9796:	612e      	str	r6, [r5, #16]
   d9798:	4621      	mov	r1, r4
   d979a:	f7ff fddd 	bl	d9358 <_Bfree>
   d979e:	4628      	mov	r0, r5
   d97a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97a4:	3101      	adds	r1, #1
   d97a6:	005b      	lsls	r3, r3, #1
   d97a8:	e7ba      	b.n	d9720 <__lshift+0x1c>
   d97aa:	f842 0f04 	str.w	r0, [r2, #4]!
   d97ae:	3301      	adds	r3, #1
   d97b0:	e7c2      	b.n	d9738 <__lshift+0x34>
   d97b2:	3904      	subs	r1, #4
   d97b4:	f853 2b04 	ldr.w	r2, [r3], #4
   d97b8:	f841 2f04 	str.w	r2, [r1, #4]!
   d97bc:	459c      	cmp	ip, r3
   d97be:	d8f9      	bhi.n	d97b4 <__lshift+0xb0>
   d97c0:	e7e7      	b.n	d9792 <__lshift+0x8e>

000d97c2 <__mcmp>:
   d97c2:	b530      	push	{r4, r5, lr}
   d97c4:	6902      	ldr	r2, [r0, #16]
   d97c6:	690c      	ldr	r4, [r1, #16]
   d97c8:	1b12      	subs	r2, r2, r4
   d97ca:	d10e      	bne.n	d97ea <__mcmp+0x28>
   d97cc:	f100 0314 	add.w	r3, r0, #20
   d97d0:	3114      	adds	r1, #20
   d97d2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d97d6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d97da:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d97de:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d97e2:	42a5      	cmp	r5, r4
   d97e4:	d003      	beq.n	d97ee <__mcmp+0x2c>
   d97e6:	d305      	bcc.n	d97f4 <__mcmp+0x32>
   d97e8:	2201      	movs	r2, #1
   d97ea:	4610      	mov	r0, r2
   d97ec:	bd30      	pop	{r4, r5, pc}
   d97ee:	4283      	cmp	r3, r0
   d97f0:	d3f3      	bcc.n	d97da <__mcmp+0x18>
   d97f2:	e7fa      	b.n	d97ea <__mcmp+0x28>
   d97f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d97f8:	e7f7      	b.n	d97ea <__mcmp+0x28>

000d97fa <__mdiff>:
   d97fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d97fe:	460c      	mov	r4, r1
   d9800:	4606      	mov	r6, r0
   d9802:	4611      	mov	r1, r2
   d9804:	4620      	mov	r0, r4
   d9806:	4617      	mov	r7, r2
   d9808:	f7ff ffdb 	bl	d97c2 <__mcmp>
   d980c:	1e05      	subs	r5, r0, #0
   d980e:	d108      	bne.n	d9822 <__mdiff+0x28>
   d9810:	4629      	mov	r1, r5
   d9812:	4630      	mov	r0, r6
   d9814:	f7ff fd6c 	bl	d92f0 <_Balloc>
   d9818:	2301      	movs	r3, #1
   d981a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d981e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9822:	bfa4      	itt	ge
   d9824:	463b      	movge	r3, r7
   d9826:	4627      	movge	r7, r4
   d9828:	4630      	mov	r0, r6
   d982a:	6879      	ldr	r1, [r7, #4]
   d982c:	bfa6      	itte	ge
   d982e:	461c      	movge	r4, r3
   d9830:	2500      	movge	r5, #0
   d9832:	2501      	movlt	r5, #1
   d9834:	f7ff fd5c 	bl	d92f0 <_Balloc>
   d9838:	693e      	ldr	r6, [r7, #16]
   d983a:	60c5      	str	r5, [r0, #12]
   d983c:	6925      	ldr	r5, [r4, #16]
   d983e:	f107 0114 	add.w	r1, r7, #20
   d9842:	f104 0914 	add.w	r9, r4, #20
   d9846:	f100 0e14 	add.w	lr, r0, #20
   d984a:	f107 0210 	add.w	r2, r7, #16
   d984e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d9852:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d9856:	46f2      	mov	sl, lr
   d9858:	2700      	movs	r7, #0
   d985a:	f859 3b04 	ldr.w	r3, [r9], #4
   d985e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d9862:	fa1f f883 	uxth.w	r8, r3
   d9866:	fa17 f78b 	uxtah	r7, r7, fp
   d986a:	0c1b      	lsrs	r3, r3, #16
   d986c:	eba7 0808 	sub.w	r8, r7, r8
   d9870:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d9874:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d9878:	fa1f f888 	uxth.w	r8, r8
   d987c:	141f      	asrs	r7, r3, #16
   d987e:	454d      	cmp	r5, r9
   d9880:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d9884:	f84a 3b04 	str.w	r3, [sl], #4
   d9888:	d8e7      	bhi.n	d985a <__mdiff+0x60>
   d988a:	1b2b      	subs	r3, r5, r4
   d988c:	3b15      	subs	r3, #21
   d988e:	f023 0303 	bic.w	r3, r3, #3
   d9892:	3304      	adds	r3, #4
   d9894:	3415      	adds	r4, #21
   d9896:	42a5      	cmp	r5, r4
   d9898:	bf38      	it	cc
   d989a:	2304      	movcc	r3, #4
   d989c:	4419      	add	r1, r3
   d989e:	4473      	add	r3, lr
   d98a0:	469e      	mov	lr, r3
   d98a2:	460d      	mov	r5, r1
   d98a4:	4565      	cmp	r5, ip
   d98a6:	d30e      	bcc.n	d98c6 <__mdiff+0xcc>
   d98a8:	f10c 0203 	add.w	r2, ip, #3
   d98ac:	1a52      	subs	r2, r2, r1
   d98ae:	f022 0203 	bic.w	r2, r2, #3
   d98b2:	3903      	subs	r1, #3
   d98b4:	458c      	cmp	ip, r1
   d98b6:	bf38      	it	cc
   d98b8:	2200      	movcc	r2, #0
   d98ba:	441a      	add	r2, r3
   d98bc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d98c0:	b17b      	cbz	r3, d98e2 <__mdiff+0xe8>
   d98c2:	6106      	str	r6, [r0, #16]
   d98c4:	e7ab      	b.n	d981e <__mdiff+0x24>
   d98c6:	f855 8b04 	ldr.w	r8, [r5], #4
   d98ca:	fa17 f488 	uxtah	r4, r7, r8
   d98ce:	1422      	asrs	r2, r4, #16
   d98d0:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d98d4:	b2a4      	uxth	r4, r4
   d98d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d98da:	f84e 4b04 	str.w	r4, [lr], #4
   d98de:	1417      	asrs	r7, r2, #16
   d98e0:	e7e0      	b.n	d98a4 <__mdiff+0xaa>
   d98e2:	3e01      	subs	r6, #1
   d98e4:	e7ea      	b.n	d98bc <__mdiff+0xc2>
	...

000d98e8 <__ulp>:
   d98e8:	b082      	sub	sp, #8
   d98ea:	ed8d 0b00 	vstr	d0, [sp]
   d98ee:	9b01      	ldr	r3, [sp, #4]
   d98f0:	4912      	ldr	r1, [pc, #72]	; (d993c <__ulp+0x54>)
   d98f2:	4019      	ands	r1, r3
   d98f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d98f8:	2900      	cmp	r1, #0
   d98fa:	dd05      	ble.n	d9908 <__ulp+0x20>
   d98fc:	2200      	movs	r2, #0
   d98fe:	460b      	mov	r3, r1
   d9900:	ec43 2b10 	vmov	d0, r2, r3
   d9904:	b002      	add	sp, #8
   d9906:	4770      	bx	lr
   d9908:	4249      	negs	r1, r1
   d990a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d990e:	ea4f 5021 	mov.w	r0, r1, asr #20
   d9912:	f04f 0200 	mov.w	r2, #0
   d9916:	f04f 0300 	mov.w	r3, #0
   d991a:	da04      	bge.n	d9926 <__ulp+0x3e>
   d991c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d9920:	fa41 f300 	asr.w	r3, r1, r0
   d9924:	e7ec      	b.n	d9900 <__ulp+0x18>
   d9926:	f1a0 0114 	sub.w	r1, r0, #20
   d992a:	291e      	cmp	r1, #30
   d992c:	bfda      	itte	le
   d992e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d9932:	fa20 f101 	lsrle.w	r1, r0, r1
   d9936:	2101      	movgt	r1, #1
   d9938:	460a      	mov	r2, r1
   d993a:	e7e1      	b.n	d9900 <__ulp+0x18>
   d993c:	7ff00000 	.word	0x7ff00000

000d9940 <__b2d>:
   d9940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9942:	6905      	ldr	r5, [r0, #16]
   d9944:	f100 0714 	add.w	r7, r0, #20
   d9948:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d994c:	1f2e      	subs	r6, r5, #4
   d994e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9952:	4620      	mov	r0, r4
   d9954:	f7ff fd93 	bl	d947e <__hi0bits>
   d9958:	f1c0 0320 	rsb	r3, r0, #32
   d995c:	280a      	cmp	r0, #10
   d995e:	f8df c07c 	ldr.w	ip, [pc, #124]	; d99dc <__b2d+0x9c>
   d9962:	600b      	str	r3, [r1, #0]
   d9964:	dc14      	bgt.n	d9990 <__b2d+0x50>
   d9966:	f1c0 0e0b 	rsb	lr, r0, #11
   d996a:	fa24 f10e 	lsr.w	r1, r4, lr
   d996e:	42b7      	cmp	r7, r6
   d9970:	ea41 030c 	orr.w	r3, r1, ip
   d9974:	bf34      	ite	cc
   d9976:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d997a:	2100      	movcs	r1, #0
   d997c:	3015      	adds	r0, #21
   d997e:	fa04 f000 	lsl.w	r0, r4, r0
   d9982:	fa21 f10e 	lsr.w	r1, r1, lr
   d9986:	ea40 0201 	orr.w	r2, r0, r1
   d998a:	ec43 2b10 	vmov	d0, r2, r3
   d998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9990:	42b7      	cmp	r7, r6
   d9992:	bf3a      	itte	cc
   d9994:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9998:	f1a5 0608 	subcc.w	r6, r5, #8
   d999c:	2100      	movcs	r1, #0
   d999e:	380b      	subs	r0, #11
   d99a0:	d017      	beq.n	d99d2 <__b2d+0x92>
   d99a2:	f1c0 0c20 	rsb	ip, r0, #32
   d99a6:	fa04 f500 	lsl.w	r5, r4, r0
   d99aa:	42be      	cmp	r6, r7
   d99ac:	fa21 f40c 	lsr.w	r4, r1, ip
   d99b0:	ea45 0504 	orr.w	r5, r5, r4
   d99b4:	bf8c      	ite	hi
   d99b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d99ba:	2400      	movls	r4, #0
   d99bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d99c0:	fa01 f000 	lsl.w	r0, r1, r0
   d99c4:	fa24 f40c 	lsr.w	r4, r4, ip
   d99c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d99cc:	ea40 0204 	orr.w	r2, r0, r4
   d99d0:	e7db      	b.n	d998a <__b2d+0x4a>
   d99d2:	ea44 030c 	orr.w	r3, r4, ip
   d99d6:	460a      	mov	r2, r1
   d99d8:	e7d7      	b.n	d998a <__b2d+0x4a>
   d99da:	bf00      	nop
   d99dc:	3ff00000 	.word	0x3ff00000

000d99e0 <__d2b>:
   d99e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d99e4:	4689      	mov	r9, r1
   d99e6:	2101      	movs	r1, #1
   d99e8:	ec57 6b10 	vmov	r6, r7, d0
   d99ec:	4690      	mov	r8, r2
   d99ee:	f7ff fc7f 	bl	d92f0 <_Balloc>
   d99f2:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d99f6:	4604      	mov	r4, r0
   d99f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d99fc:	bb35      	cbnz	r5, d9a4c <__d2b+0x6c>
   d99fe:	2e00      	cmp	r6, #0
   d9a00:	9301      	str	r3, [sp, #4]
   d9a02:	d028      	beq.n	d9a56 <__d2b+0x76>
   d9a04:	4668      	mov	r0, sp
   d9a06:	9600      	str	r6, [sp, #0]
   d9a08:	f7ff fd59 	bl	d94be <__lo0bits>
   d9a0c:	9900      	ldr	r1, [sp, #0]
   d9a0e:	b300      	cbz	r0, d9a52 <__d2b+0x72>
   d9a10:	9a01      	ldr	r2, [sp, #4]
   d9a12:	f1c0 0320 	rsb	r3, r0, #32
   d9a16:	fa02 f303 	lsl.w	r3, r2, r3
   d9a1a:	430b      	orrs	r3, r1
   d9a1c:	40c2      	lsrs	r2, r0
   d9a1e:	6163      	str	r3, [r4, #20]
   d9a20:	9201      	str	r2, [sp, #4]
   d9a22:	9b01      	ldr	r3, [sp, #4]
   d9a24:	61a3      	str	r3, [r4, #24]
   d9a26:	2b00      	cmp	r3, #0
   d9a28:	bf14      	ite	ne
   d9a2a:	2202      	movne	r2, #2
   d9a2c:	2201      	moveq	r2, #1
   d9a2e:	6122      	str	r2, [r4, #16]
   d9a30:	b1d5      	cbz	r5, d9a68 <__d2b+0x88>
   d9a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d9a36:	4405      	add	r5, r0
   d9a38:	f8c9 5000 	str.w	r5, [r9]
   d9a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9a40:	f8c8 0000 	str.w	r0, [r8]
   d9a44:	4620      	mov	r0, r4
   d9a46:	b003      	add	sp, #12
   d9a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9a50:	e7d5      	b.n	d99fe <__d2b+0x1e>
   d9a52:	6161      	str	r1, [r4, #20]
   d9a54:	e7e5      	b.n	d9a22 <__d2b+0x42>
   d9a56:	a801      	add	r0, sp, #4
   d9a58:	f7ff fd31 	bl	d94be <__lo0bits>
   d9a5c:	9b01      	ldr	r3, [sp, #4]
   d9a5e:	6163      	str	r3, [r4, #20]
   d9a60:	2201      	movs	r2, #1
   d9a62:	6122      	str	r2, [r4, #16]
   d9a64:	3020      	adds	r0, #32
   d9a66:	e7e3      	b.n	d9a30 <__d2b+0x50>
   d9a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d9a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9a70:	f8c9 0000 	str.w	r0, [r9]
   d9a74:	6918      	ldr	r0, [r3, #16]
   d9a76:	f7ff fd02 	bl	d947e <__hi0bits>
   d9a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d9a7e:	e7df      	b.n	d9a40 <__d2b+0x60>

000d9a80 <__ratio>:
   d9a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a84:	4688      	mov	r8, r1
   d9a86:	4669      	mov	r1, sp
   d9a88:	4681      	mov	r9, r0
   d9a8a:	f7ff ff59 	bl	d9940 <__b2d>
   d9a8e:	a901      	add	r1, sp, #4
   d9a90:	4640      	mov	r0, r8
   d9a92:	ec55 4b10 	vmov	r4, r5, d0
   d9a96:	f7ff ff53 	bl	d9940 <__b2d>
   d9a9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9a9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9aa2:	eba3 0c02 	sub.w	ip, r3, r2
   d9aa6:	e9dd 3200 	ldrd	r3, r2, [sp]
   d9aaa:	1a9b      	subs	r3, r3, r2
   d9aac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d9ab0:	ec51 0b10 	vmov	r0, r1, d0
   d9ab4:	2b00      	cmp	r3, #0
   d9ab6:	bfd6      	itet	le
   d9ab8:	460a      	movle	r2, r1
   d9aba:	462a      	movgt	r2, r5
   d9abc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d9ac0:	468b      	mov	fp, r1
   d9ac2:	462f      	mov	r7, r5
   d9ac4:	bfd4      	ite	le
   d9ac6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d9aca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d9ace:	4620      	mov	r0, r4
   d9ad0:	ee10 2a10 	vmov	r2, s0
   d9ad4:	465b      	mov	r3, fp
   d9ad6:	4639      	mov	r1, r7
   d9ad8:	f7fd f92a 	bl	d6d30 <__aeabi_ddiv>
   d9adc:	ec41 0b10 	vmov	d0, r0, r1
   d9ae0:	b003      	add	sp, #12
   d9ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9ae6 <__copybits>:
   d9ae6:	3901      	subs	r1, #1
   d9ae8:	b570      	push	{r4, r5, r6, lr}
   d9aea:	1149      	asrs	r1, r1, #5
   d9aec:	6914      	ldr	r4, [r2, #16]
   d9aee:	3101      	adds	r1, #1
   d9af0:	f102 0314 	add.w	r3, r2, #20
   d9af4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9af8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9afc:	1f05      	subs	r5, r0, #4
   d9afe:	42a3      	cmp	r3, r4
   d9b00:	d30c      	bcc.n	d9b1c <__copybits+0x36>
   d9b02:	1aa3      	subs	r3, r4, r2
   d9b04:	3b11      	subs	r3, #17
   d9b06:	f023 0303 	bic.w	r3, r3, #3
   d9b0a:	3211      	adds	r2, #17
   d9b0c:	42a2      	cmp	r2, r4
   d9b0e:	bf88      	it	hi
   d9b10:	2300      	movhi	r3, #0
   d9b12:	4418      	add	r0, r3
   d9b14:	2300      	movs	r3, #0
   d9b16:	4288      	cmp	r0, r1
   d9b18:	d305      	bcc.n	d9b26 <__copybits+0x40>
   d9b1a:	bd70      	pop	{r4, r5, r6, pc}
   d9b1c:	f853 6b04 	ldr.w	r6, [r3], #4
   d9b20:	f845 6f04 	str.w	r6, [r5, #4]!
   d9b24:	e7eb      	b.n	d9afe <__copybits+0x18>
   d9b26:	f840 3b04 	str.w	r3, [r0], #4
   d9b2a:	e7f4      	b.n	d9b16 <__copybits+0x30>

000d9b2c <__any_on>:
   d9b2c:	f100 0214 	add.w	r2, r0, #20
   d9b30:	6900      	ldr	r0, [r0, #16]
   d9b32:	114b      	asrs	r3, r1, #5
   d9b34:	4298      	cmp	r0, r3
   d9b36:	b510      	push	{r4, lr}
   d9b38:	db11      	blt.n	d9b5e <__any_on+0x32>
   d9b3a:	dd0a      	ble.n	d9b52 <__any_on+0x26>
   d9b3c:	f011 011f 	ands.w	r1, r1, #31
   d9b40:	d007      	beq.n	d9b52 <__any_on+0x26>
   d9b42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9b46:	fa24 f001 	lsr.w	r0, r4, r1
   d9b4a:	fa00 f101 	lsl.w	r1, r0, r1
   d9b4e:	428c      	cmp	r4, r1
   d9b50:	d10b      	bne.n	d9b6a <__any_on+0x3e>
   d9b52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9b56:	4293      	cmp	r3, r2
   d9b58:	d803      	bhi.n	d9b62 <__any_on+0x36>
   d9b5a:	2000      	movs	r0, #0
   d9b5c:	bd10      	pop	{r4, pc}
   d9b5e:	4603      	mov	r3, r0
   d9b60:	e7f7      	b.n	d9b52 <__any_on+0x26>
   d9b62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9b66:	2900      	cmp	r1, #0
   d9b68:	d0f5      	beq.n	d9b56 <__any_on+0x2a>
   d9b6a:	2001      	movs	r0, #1
   d9b6c:	e7f6      	b.n	d9b5c <__any_on+0x30>

000d9b6e <_calloc_r>:
   d9b6e:	b513      	push	{r0, r1, r4, lr}
   d9b70:	434a      	muls	r2, r1
   d9b72:	4611      	mov	r1, r2
   d9b74:	9201      	str	r2, [sp, #4]
   d9b76:	f7fb fc5b 	bl	d5430 <_malloc_r>
   d9b7a:	4604      	mov	r4, r0
   d9b7c:	b118      	cbz	r0, d9b86 <_calloc_r+0x18>
   d9b7e:	9a01      	ldr	r2, [sp, #4]
   d9b80:	2100      	movs	r1, #0
   d9b82:	f7fd fd51 	bl	d7628 <memset>
   d9b86:	4620      	mov	r0, r4
   d9b88:	b002      	add	sp, #8
   d9b8a:	bd10      	pop	{r4, pc}
   d9b8c:	0000      	movs	r0, r0
	...

000d9b90 <nan>:
   d9b90:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9b98 <nan+0x8>
   d9b94:	4770      	bx	lr
   d9b96:	bf00      	nop
   d9b98:	00000000 	.word	0x00000000
   d9b9c:	7ff80000 	.word	0x7ff80000

000d9ba0 <__ascii_wctomb>:
   d9ba0:	b149      	cbz	r1, d9bb6 <__ascii_wctomb+0x16>
   d9ba2:	2aff      	cmp	r2, #255	; 0xff
   d9ba4:	bf85      	ittet	hi
   d9ba6:	238a      	movhi	r3, #138	; 0x8a
   d9ba8:	6003      	strhi	r3, [r0, #0]
   d9baa:	700a      	strbls	r2, [r1, #0]
   d9bac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d9bb0:	bf98      	it	ls
   d9bb2:	2001      	movls	r0, #1
   d9bb4:	4770      	bx	lr
   d9bb6:	4608      	mov	r0, r1
   d9bb8:	4770      	bx	lr
	...

000d9bbc <__env_lock>:
   d9bbc:	4801      	ldr	r0, [pc, #4]	; (d9bc4 <__env_lock+0x8>)
   d9bbe:	f7ff bb82 	b.w	d92c6 <__retarget_lock_acquire_recursive>
   d9bc2:	bf00      	nop
   d9bc4:	2003e7ee 	.word	0x2003e7ee

000d9bc8 <__env_unlock>:
   d9bc8:	4801      	ldr	r0, [pc, #4]	; (d9bd0 <__env_unlock+0x8>)
   d9bca:	f7ff bb7e 	b.w	d92ca <__retarget_lock_release_recursive>
   d9bce:	bf00      	nop
   d9bd0:	2003e7ee 	.word	0x2003e7ee

000d9bd4 <__aeabi_ldivmod>:
   d9bd4:	b97b      	cbnz	r3, d9bf6 <__aeabi_ldivmod+0x22>
   d9bd6:	b972      	cbnz	r2, d9bf6 <__aeabi_ldivmod+0x22>
   d9bd8:	2900      	cmp	r1, #0
   d9bda:	bfbe      	ittt	lt
   d9bdc:	2000      	movlt	r0, #0
   d9bde:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d9be2:	e006      	blt.n	d9bf2 <__aeabi_ldivmod+0x1e>
   d9be4:	bf08      	it	eq
   d9be6:	2800      	cmpeq	r0, #0
   d9be8:	bf1c      	itt	ne
   d9bea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9bee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d9bf2:	f7fd bbfd 	b.w	d73f0 <__aeabi_idiv0>
   d9bf6:	f1ad 0c08 	sub.w	ip, sp, #8
   d9bfa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9bfe:	2900      	cmp	r1, #0
   d9c00:	db09      	blt.n	d9c16 <__aeabi_ldivmod+0x42>
   d9c02:	2b00      	cmp	r3, #0
   d9c04:	db1a      	blt.n	d9c3c <__aeabi_ldivmod+0x68>
   d9c06:	f7fd fa91 	bl	d712c <__udivmoddi4>
   d9c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9c12:	b004      	add	sp, #16
   d9c14:	4770      	bx	lr
   d9c16:	4240      	negs	r0, r0
   d9c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9c1c:	2b00      	cmp	r3, #0
   d9c1e:	db1b      	blt.n	d9c58 <__aeabi_ldivmod+0x84>
   d9c20:	f7fd fa84 	bl	d712c <__udivmoddi4>
   d9c24:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9c2c:	b004      	add	sp, #16
   d9c2e:	4240      	negs	r0, r0
   d9c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9c34:	4252      	negs	r2, r2
   d9c36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9c3a:	4770      	bx	lr
   d9c3c:	4252      	negs	r2, r2
   d9c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9c42:	f7fd fa73 	bl	d712c <__udivmoddi4>
   d9c46:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9c4e:	b004      	add	sp, #16
   d9c50:	4240      	negs	r0, r0
   d9c52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9c56:	4770      	bx	lr
   d9c58:	4252      	negs	r2, r2
   d9c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9c5e:	f7fd fa65 	bl	d712c <__udivmoddi4>
   d9c62:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9c6a:	b004      	add	sp, #16
   d9c6c:	4252      	negs	r2, r2
   d9c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9c72:	4770      	bx	lr

000d9c74 <__aeabi_d2lz>:
   d9c74:	b538      	push	{r3, r4, r5, lr}
   d9c76:	2200      	movs	r2, #0
   d9c78:	2300      	movs	r3, #0
   d9c7a:	4604      	mov	r4, r0
   d9c7c:	460d      	mov	r5, r1
   d9c7e:	f7fd f99f 	bl	d6fc0 <__aeabi_dcmplt>
   d9c82:	b928      	cbnz	r0, d9c90 <__aeabi_d2lz+0x1c>
   d9c84:	4620      	mov	r0, r4
   d9c86:	4629      	mov	r1, r5
   d9c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9c8c:	f7fd ba30 	b.w	d70f0 <__aeabi_d2ulz>
   d9c90:	4620      	mov	r0, r4
   d9c92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d9c96:	f7fd fa2b 	bl	d70f0 <__aeabi_d2ulz>
   d9c9a:	4240      	negs	r0, r0
   d9c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9ca0:	bd38      	pop	{r3, r4, r5, pc}
   d9ca2:	bf00      	nop

000d9ca4 <dynalib_user>:
   d9ca4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9cb4:	0000 0000 6554 706d 4d5f 7861 3a20 2520     ....Temp_Max : %
   d9cc4:	2e33 6631 5400 6d65 5f70 694d 2078 203a     3.1f.Temp_Mix : 
   d9cd4:	3325 312e 0066 7548 696d 6964 7974 4d5f     %3.1f.Humidity_M
   d9ce4:	7861 203a 3325 312e 0066 7548 696d 6964     ax: %3.1f.Humidi
   d9cf4:	7974 4d5f 6e69 3a20 2520 2e33 6631 7b00     ty_Min : %3.1f.{
   d9d04:	5422 6d65 6570 6172 7574 6572 3a22 3425     "Temperature":%4
   d9d14:	312e 2c66 2220 7548 696d 6964 7974 3a22     .1f, "Humidity":
   d9d24:	3425 312e 7d66 7300 6f74 6172 6567 662d     %4.1f}.storage-f
   d9d34:	6361 6c69 7469 2d79 6f68 6b6f 4e00 206f     acility-hook.No 
   d9d44:	6144 6174 5500 6962 6f64 7374 4820 6f6f     Data.Ubidots Hoo
   d9d54:	006b 6552 7073 6e6f 6573 5220 6365 6965     k.Response Recei
   d9d64:	6576 0064 7453 7461 0065 3425 312e 2a66     ved.State.%4.1f*
   d9d74:	0043 3425 312e 2566 0025 6146 6c69 6465     C.%4.1f%%.Failed
   d9d84:	7420 206f 6570 6672 726f 206d 6572 6461      to perform read
   d9d94:	6e69 2067 283a 4c00 676f 4600 6961 656c     ing :(.Log.Faile
   d9da4:	2064 6f74 7420 6b61 2065 6572 6461 6e69     d to take readin
   d9db4:	2167 5300 5448 3133 7420 7365 0074 6552     g!.SHT31 test.Re
   d9dc4:	656c 7361 0065 6574 706d 7265 7461 7275     lease.temperatur
   d9dd4:	0065 7568 696d 6964 7974 7000 6572 7373     e.humidity.press
   d9de4:	7275 0065 6574 706d 7265 7461 7275 2d65     ure.temperature-
   d9df4:	7055 6570 0072 6574 706d 7265 7461 7275     Upper.temperatur
   d9e04:	2d65 6f6c 6577 0072 7568 696d 6964 7974     e-lower.humidity
   d9e14:	752d 7070 7265 6800 6d75 6469 7469 2d79     -upper.humidity-
   d9e24:	6f6c 6577 0072 654d 7361 7275 2d65 6f4e     lower.Measure-No
   d9e34:	0077 6556 6272 736f 2d65 6f4d 6564 5400     w.Verbose-Mode.T
   d9e44:	6d65 2d70 7055 6570 2d72 694c 696d 0074     emp-Upper-Limit.
   d9e54:	6554 706d 4c2d 776f 7265 4c2d 6d69 7469     Temp-Lower-Limit
   d9e64:	4800 6d75 6469 7469 2d79 6f4c 6577 2d72     .Humidity-Lower-
   d9e74:	694c 696d 0074 7548 696d 7464 2d79 7075     Limit.Humidty-up
   d9e84:	6570 2d72 694c 696d 0074 7245 6f72 2072     per-Limit.Error 
   d9e94:	202d 4853 3354 2031 6e49 7469 6169 696c     - SHT31 Initiali
   d9ea4:	617a 6974 6e6f 4300 756f 646c 276e 2074     zation.Couldn't 
   d9eb4:	6966 646e 5320 5448 3133 4600 6961 656c     find SHT31.Faile
   d9ec4:	2064 6f74 6320 6e6f 656e 7463 5300 6174     d to connect.Sta
   d9ed4:	7472 7075 7b00 6122 656c 7472 742d 6d65     rtup.{"alert-tem
   d9ee4:	6570 6172 7574 6572 3a22 3425 312e 7d66     perature":%4.1f}
   d9ef4:	6300 2d63 6c61 7265 2d74 6577 6862 6f6f     .cc-alert-webhoo
   d9f04:	006b 227b 6c61 7265 2d74 7568 696d 6964     k.{"alert-humidi
   d9f14:	7974 3a22 3425 312e 7d66 5300 7465 5620     ty":%4.1f}.Set V
   d9f24:	7265 6f62 6573 4d20 646f 0065 0030 6c43     erbose Mode.0.Cl
   d9f34:	6165 6572 2064 6556 6272 736f 2065 6f4d     eared Verbose Mo
   d9f44:	6564 4600 6f72 206d 7325 7420 206f 7325     de.From %s to %s
   d9f54:	5300 6174 6574 5420 6172 736e 7469 6f69     .State Transitio
   d9f64:	006e 7245 6f72 2072 6174 696b 676e 4d20     n.Error taking M
   d9f74:	6165 7573 6572 656d 746e 0073 7073 7261     easurements.spar
   d9f84:	2f6b 6564 6976 6563 732f 7365 6973 6e6f     k/device/session
   d9f94:	652f 646e 4500 7272 726f 5320 6174 6574     /end.Error State
   d9fa4:	2d20 5220 7365 7465 5500 7070 7265 5420      - Reset.Upper T
   d9fb4:	7268 7365 6f68 646c 5320 7465 4c00 776f     hreshold Set.Low
   d9fc4:	7265 5420 7268 7365 6f68 646c 5320 7465     er Threshold Set
   d9fd4:	3100 302e 0037 7453 7261 7574 2070 7553     .1.07.Startup Su
   d9fe4:	6363 7365 6673 6c75 0000 0000 0000 0000     ccessful........
	...

000da01c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da024:	54c5 000d 54cb 000d 551b 000d 54d9 000d     .T...T...U...T..
   da034:	54c7 000d                                   .T..

000da038 <_ZTVN5spark13EthernetClassE>:
	...
   da040:	5adf 000d 5ad5 000d 5acb 000d 5ac1 000d     .Z...Z...Z...Z..
   da050:	5ab5 000d 5aa9 000d 5a9d 000d 5a95 000d     .Z...Z...Z...Z..
   da060:	5a8b 000d 5a81 000d 5d51 000d               .Z...Z..Q]..

000da06c <_ZTV7TwoWire>:
	...
   da074:	5afd 000d 5b47 000d 5b1f 000d 5aff 000d     .Z..G[...[...Z..
   da084:	5b27 000d 5b2f 000d 5b37 000d 5b3f 000d     '[../[..7[..?[..

000da094 <_ZTV9IPAddress>:
	...
   da09c:	5c03 000d 5bf3 000d 5bf5 000d 7061 0070     .\...[...[..app.

000da0ac <_ZTVN5spark12NetworkClassE>:
	...
   da0b4:	5ce9 000d 5cf3 000d 5cfd 000d 5d07 000d     .\...\...\...]..
   da0c4:	5d11 000d 5d1d 000d 5d29 000d 5d35 000d     .]...]..)]..5]..
   da0d4:	5d3d 000d 5d47 000d 5d51 000d 5925 252d     =]..G]..Q]..%Y-%
   da0e4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   da0f4:	7361 7463 6d69 0065                         asctime.

000da0fc <_ZTV11USARTSerial>:
	...
   da104:	6225 000d 6291 000d 6269 000d 5e39 000d     %b...b..ib..9^..
   da114:	6239 000d 6255 000d 6247 000d 6263 000d     9b..Ub..Gb..cb..
   da124:	6227 000d 622b 000d                         'b..+b..

000da12c <_ZTV9USBSerial>:
	...
   da134:	6325 000d 638d 000d 6363 000d 5e39 000d     %c...c..cc..9^..
   da144:	6355 000d 6327 000d 6337 000d 6387 000d     Uc..'c..7c...c..
   da154:	6347 000d 6321 000d                         Gc..!c..

000da15c <_ZTVN5spark9WiFiClassE>:
	...
   da164:	648f 000d 6485 000d 647b 000d 6431 000d     .d...d..{d..1d..
   da174:	646f 000d 6463 000d 6457 000d 644f 000d     od..cd..Wd..Od..
   da184:	6445 000d 643b 000d 5d51 000d               Ed..;d..Q]..

000da190 <_ZSt7nothrow>:
   da190:	0000 0000                                   ....

000da194 <__month_lengths>:
   da194:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da1a4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da1b4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da1c4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da1d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da1e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da1f4:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000da200 <fpi.7566>:
   da200:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   da210:	0000 0000                                   ....

000da214 <fpinan.7602>:
   da214:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   da224:	0000 0000                                   ....

000da228 <tinytens>:
   da228:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   da238:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   da248:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   da258:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   da268:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   da278:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   da288:	2575 006e                                   u%n.

000da28c <_ctype_>:
   da28c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da29c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da2ac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da2bc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da2cc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da2dc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da2ec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da2fc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da30c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   da38c:	2e00 0000                                   ....

000da390 <_C_numeric_locale>:
   da390:	a38d 000d 9db6 000d e330 2003 4f50 4953     ........0.. POSI
   da3a0:	0058 0000 0000 0000                         X.......

000da3a8 <__mprec_bigtens>:
   da3a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   da3b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   da3c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000da3d0 <__mprec_tens>:
   da3d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   da3e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   da3f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   da400:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   da410:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   da420:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   da430:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   da440:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   da450:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   da460:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   da470:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   da480:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   da490:	9db4 79d9 7843 44ea                         ...yCx.D

000da498 <p05.7490>:
   da498:	0005 0000 0019 0000 007d 0000               ........}...

000da4a4 <link_const_variable_data_end>:
   da4a4:	000d4ccd 	.word	0x000d4ccd
   da4a8:	000d4ee1 	.word	0x000d4ee1
   da4ac:	000d549d 	.word	0x000d549d
   da4b0:	000d5ae9 	.word	0x000d5ae9
   da4b4:	000d5cd9 	.word	0x000d5cd9
   da4b8:	000d5e25 	.word	0x000d5e25
   da4bc:	000d5f05 	.word	0x000d5f05
   da4c0:	000d60c9 	.word	0x000d60c9
   da4c4:	000d6211 	.word	0x000d6211
   da4c8:	000d6499 	.word	0x000d6499

000da4cc <link_constructors_end>:
   da4cc:	00000000 	.word	0x00000000
