
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/2.0.0-rc.3/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005910  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9930  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002b8  2003e1e0  000d9934  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000358  2003e498  2003e498  0002e498  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000d9bec  000d9bec  00029bec  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d9c18  000d9c18  00029c18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014945a  00000000  00000000  00029c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015c80  00000000  00000000  00173076  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002aac2  00000000  00000000  00188cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029c0  00000000  00000000  001b37b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007968  00000000  00000000  001b6178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037d36  00000000  00000000  001bdae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037db1  00000000  00000000  001f5816  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010bc13  00000000  00000000  0022d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000077c0  00000000  00000000  003391dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f945 	bl	d72c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f94d 	bl	d72dc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e0 	.word	0x2003e1e0
   d404c:	000d9934 	.word	0x000d9934
   d4050:	2003e498 	.word	0x2003e498
   d4054:	2003e498 	.word	0x2003e498
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fb1f 	bl	d66a4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d990c 	.word	0x000d990c
   d4080:	000d9930 	.word	0x000d9930

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 babc 	b.w	d4600 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcc3 	bl	d4a14 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bac9 	b.w	d6628 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 ba27 	b.w	d54e8 <malloc>

000d409a <_Znaj>:
   d409a:	f001 ba25 	b.w	d54e8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 ba2b 	b.w	d54f8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f002 f88d 	bl	d61d6 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d93ae 	.word	0x000d93ae
   d40cc:	2003e584 	.word	0x2003e584

000d40d0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40d4:	6800      	ldr	r0, [r0, #0]
   d40d6:	b108      	cbz	r0, d40dc <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d8:	f001 fa0e 	bl	d54f8 <free>
class SystemClass {
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}

000d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40e0:	2300      	movs	r3, #0
   d40e2:	2204      	movs	r2, #4
   d40e4:	f001 b958 	b.w	d5398 <spark_variable>

000d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d40ee:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f0:	f88d 5000 	strb.w	r5, [sp]
   d40f4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f6:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f8:	f001 fc24 	bl	d5944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d40fc:	4620      	mov	r0, r4
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4108:	f001 f95e 	bl	d53c8 <spark_cloud_flag_connect>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d410c:	f8df a058 	ldr.w	sl, [pc, #88]	; d4168 <_Z17connectToParticlev+0x64>
   d4110:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4114:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4118:	f240 38e7 	movw	r8, #999	; 0x3e7
   d411c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4120:	2000      	movs	r0, #0
   d4122:	f000 ffb1 	bl	d5088 <hal_timer_millis>
   d4126:	4605      	mov	r5, r0
   d4128:	2000      	movs	r0, #0
   d412a:	f000 ffad 	bl	d5088 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d412e:	1b46      	subs	r6, r0, r5
   d4130:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d4134:	45b9      	cmp	r9, r7
   d4136:	bf08      	it	eq
   d4138:	45b0      	cmpeq	r8, r6
   d413a:	d305      	bcc.n	d4148 <_Z17connectToParticlev+0x44>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413c:	f001 f94c 	bl	d53d8 <spark_cloud_flag_connected>
   d4140:	b910      	cbnz	r0, d4148 <_Z17connectToParticlev+0x44>
            spark_process();
   d4142:	f001 f939 	bl	d53b8 <spark_process>
        while (_while() && !_condition()) {
   d4146:	e7ef      	b.n	d4128 <_Z17connectToParticlev+0x24>
   d4148:	f001 f946 	bl	d53d8 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d414c:	b118      	cbz	r0, d4156 <_Z17connectToParticlev+0x52>
}
   d414e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4152:	f001 b941 	b.w	d53d8 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d4156:	f000 ff67 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d415a:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d415e:	f001 f92b 	bl	d53b8 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4162:	3c01      	subs	r4, #1
   d4164:	d1dc      	bne.n	d4120 <_Z17connectToParticlev+0x1c>
   d4166:	e7f2      	b.n	d414e <_Z17connectToParticlev+0x4a>
   d4168:	2003e7cc 	.word	0x2003e7cc

000d416c <_Z8BlinkLEDi>:
void BlinkLED(int LED){
   d416c:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d416e:	b284      	uxth	r4, r0
   d4170:	2101      	movs	r1, #1
   d4172:	4620      	mov	r0, r4
   d4174:	f002 fb2f 	bl	d67d6 <digitalWrite>
  delay(1000);
   d4178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d417c:	f001 f9f4 	bl	d5568 <delay>
  digitalWrite(LED,LOW);
   d4180:	4620      	mov	r0, r4
   d4182:	2100      	movs	r1, #0
   d4184:	f002 fb27 	bl	d67d6 <digitalWrite>
}
   d4188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
   d418c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4190:	f001 b9ea 	b.w	d5568 <delay>

000d4194 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d4194:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4196:	f000 ff47 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d419a:	4b04      	ldr	r3, [pc, #16]	; (d41ac <_Z20meterParticlePublishv+0x18>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d41a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d41a4:	bf34      	ite	cc
   d41a6:	2000      	movcc	r0, #0
   d41a8:	2001      	movcs	r0, #1
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	2003e4f4 	.word	0x2003e4f4

000d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d41b0:	b508      	push	{r3, lr}
        waitUntil(meterParticlePublish);
   d41b2:	f7ff ffef 	bl	d4194 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d41b6:	b910      	cbnz	r0, d41be <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d41b8:	f001 f8fe 	bl	d53b8 <spark_process>
        while (_while() && !_condition()) {
   d41bc:	e7f9      	b.n	d41b2 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d41be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41c2:	f7ff bfe7 	b.w	d4194 <_Z20meterParticlePublishv>
	...

000d41c8 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d41c8:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d41ca:	4c15      	ldr	r4, [pc, #84]	; (d4220 <_Z20updateThresholdValuev+0x58>)
   d41cc:	6a20      	ldr	r0, [r4, #32]
   d41ce:	f002 fce1 	bl	d6b94 <__aeabi_f2d>
   d41d2:	4a14      	ldr	r2, [pc, #80]	; (d4224 <_Z20updateThresholdValuev+0x5c>)
   d41d4:	e9cd 0100 	strd	r0, r1, [sp]
   d41d8:	2118      	movs	r1, #24
   d41da:	4813      	ldr	r0, [pc, #76]	; (d4228 <_Z20updateThresholdValuev+0x60>)
   d41dc:	f001 f99c 	bl	d5518 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d41e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d41e2:	f002 fcd7 	bl	d6b94 <__aeabi_f2d>
   d41e6:	4a11      	ldr	r2, [pc, #68]	; (d422c <_Z20updateThresholdValuev+0x64>)
   d41e8:	e9cd 0100 	strd	r0, r1, [sp]
   d41ec:	2118      	movs	r1, #24
   d41ee:	4810      	ldr	r0, [pc, #64]	; (d4230 <_Z20updateThresholdValuev+0x68>)
   d41f0:	f001 f992 	bl	d5518 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d41f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d41f6:	f002 fccd 	bl	d6b94 <__aeabi_f2d>
   d41fa:	4a0e      	ldr	r2, [pc, #56]	; (d4234 <_Z20updateThresholdValuev+0x6c>)
   d41fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4200:	2118      	movs	r1, #24
   d4202:	480d      	ldr	r0, [pc, #52]	; (d4238 <_Z20updateThresholdValuev+0x70>)
   d4204:	f001 f988 	bl	d5518 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d420a:	f002 fcc3 	bl	d6b94 <__aeabi_f2d>
   d420e:	4a0b      	ldr	r2, [pc, #44]	; (d423c <_Z20updateThresholdValuev+0x74>)
   d4210:	e9cd 0100 	strd	r0, r1, [sp]
   d4214:	2118      	movs	r1, #24
   d4216:	480a      	ldr	r0, [pc, #40]	; (d4240 <_Z20updateThresholdValuev+0x78>)
   d4218:	f001 f97e 	bl	d5518 <snprintf>
} 
   d421c:	b002      	add	sp, #8
   d421e:	bd10      	pop	{r4, pc}
   d4220:	2003e540 	.word	0x2003e540
   d4224:	000d9188 	.word	0x000d9188
   d4228:	2003e5bb 	.word	0x2003e5bb
   d422c:	000d9199 	.word	0x000d9199
   d4230:	2003e512 	.word	0x2003e512
   d4234:	000d91aa 	.word	0x000d91aa
   d4238:	2003e5a2 	.word	0x2003e5a2
   d423c:	000d91be 	.word	0x000d91be
   d4240:	2003e4f9 	.word	0x2003e4f9

000d4244 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4244:	b530      	push	{r4, r5, lr}
   d4246:	b085      	sub	sp, #20
   d4248:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d424a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d424c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d424e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4250:	f001 f842 	bl	d52d8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4254:	b9b0      	cbnz	r0, d4284 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4256:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4258:	b10c      	cbz	r4, d425e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d425a:	6923      	ldr	r3, [r4, #16]
   d425c:	b923      	cbnz	r3, d4268 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d425e:	4a0a      	ldr	r2, [pc, #40]	; (d4288 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4260:	2100      	movs	r1, #0
   d4262:	200a      	movs	r0, #10
   d4264:	f001 f830 	bl	d52c8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4268:	2300      	movs	r3, #0
   d426a:	f8ad 3006 	strh.w	r3, [sp, #6]
   d426e:	230c      	movs	r3, #12
   d4270:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4274:	2304      	movs	r3, #4
   d4276:	9303      	str	r3, [sp, #12]
   d4278:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d427a:	6923      	ldr	r3, [r4, #16]
   d427c:	aa01      	add	r2, sp, #4
   d427e:	2101      	movs	r1, #1
   d4280:	4620      	mov	r0, r4
   d4282:	4798      	blx	r3
}
   d4284:	b005      	add	sp, #20
   d4286:	bd30      	pop	{r4, r5, pc}
   d4288:	000d5019 	.word	0x000d5019

000d428c <_Z17getBatteryContextv>:
// {
//   voltage = analogRead(BATT) * 0.0011224;
//   snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
// }

void getBatteryContext() {
   d428c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d428e:	4d0e      	ldr	r5, [pc, #56]	; (d42c8 <_Z17getBatteryContextv+0x3c>)
   d4290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4292:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4294:	ac01      	add	r4, sp, #4
   d4296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d429c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d42a0:	4669      	mov	r1, sp
   d42a2:	2007      	movs	r0, #7
   d42a4:	f7ff ffce 	bl	d4244 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d42a8:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d42aa:	bfa8      	it	ge
   d42ac:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d42ae:	4a07      	ldr	r2, [pc, #28]	; (d42cc <_Z17getBatteryContextv+0x40>)
   d42b0:	ab08      	add	r3, sp, #32
   d42b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d42b6:	2110      	movs	r1, #16
   d42b8:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d42bc:	4804      	ldr	r0, [pc, #16]	; (d42d0 <_Z17getBatteryContextv+0x44>)
   d42be:	f001 f92b 	bl	d5518 <snprintf>

   d42c2:	b009      	add	sp, #36	; 0x24
   d42c4:	bd30      	pop	{r4, r5, pc}
   d42c6:	bf00      	nop
   d42c8:	000d94c4 	.word	0x000d94c4
   d42cc:	000d9441 	.word	0x000d9441
   d42d0:	2003e4b4 	.word	0x2003e4b4

000d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42d6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d42d8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d42da:	b17c      	cbz	r4, d42fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d42dc:	6863      	ldr	r3, [r4, #4]
   d42de:	3b01      	subs	r3, #1
   d42e0:	6063      	str	r3, [r4, #4]
   d42e2:	b95b      	cbnz	r3, d42fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d42e4:	6823      	ldr	r3, [r4, #0]
   d42e6:	4620      	mov	r0, r4
   d42e8:	689b      	ldr	r3, [r3, #8]
   d42ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42ec:	68a3      	ldr	r3, [r4, #8]
   d42ee:	3b01      	subs	r3, #1
   d42f0:	60a3      	str	r3, [r4, #8]
   d42f2:	b91b      	cbnz	r3, d42fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42f4:	6823      	ldr	r3, [r4, #0]
   d42f6:	4620      	mov	r0, r4
   d42f8:	68db      	ldr	r3, [r3, #12]
   d42fa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42fc:	4628      	mov	r0, r5
   d42fe:	bd38      	pop	{r3, r4, r5, pc}

000d4300 <_Z9sendEventv>:
{
   d4300:	b530      	push	{r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4302:	4d21      	ldr	r5, [pc, #132]	; (d4388 <_Z9sendEventv+0x88>)
   d4304:	b0a3      	sub	sp, #140	; 0x8c
   d4306:	2408      	movs	r4, #8
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4308:	f002 fa7e 	bl	d6808 <_Z21__fetch_global_EEPROMv>
   d430c:	4620      	mov	r0, r4
   d430e:	491e      	ldr	r1, [pc, #120]	; (d4388 <_Z9sendEventv+0x88>)
   d4310:	2238      	movs	r2, #56	; 0x38
   d4312:	3464      	adds	r4, #100	; 0x64
   d4314:	f000 fea0 	bl	d5058 <HAL_EEPROM_Get>
   for (int i = 0; i < 4; i++) {
   d4318:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d431c:	d1f4      	bne.n	d4308 <_Z9sendEventv+0x8>
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.stateOfCharge);
   d431e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d4320:	9304      	str	r3, [sp, #16]
   d4322:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d4326:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d432a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d432e:	2164      	movs	r1, #100	; 0x64
   d4330:	e9cd 2300 	strd	r2, r3, [sp]
   d4334:	a809      	add	r0, sp, #36	; 0x24
   d4336:	4a15      	ldr	r2, [pc, #84]	; (d438c <_Z9sendEventv+0x8c>)
  currentCountTime = Time.now();
   d4338:	4c15      	ldr	r4, [pc, #84]	; (d4390 <_Z9sendEventv+0x90>)
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.stateOfCharge);
   d433a:	f001 f8ed 	bl	d5518 <snprintf>
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d433e:	2300      	movs	r3, #0
   d4340:	f88d 3000 	strb.w	r3, [sp]
   d4344:	4b13      	ldr	r3, [pc, #76]	; (d4394 <_Z9sendEventv+0x94>)
   d4346:	4914      	ldr	r1, [pc, #80]	; (d4398 <_Z9sendEventv+0x98>)
   d4348:	781b      	ldrb	r3, [r3, #0]
   d434a:	aa09      	add	r2, sp, #36	; 0x24
   d434c:	a807      	add	r0, sp, #28
   d434e:	f7ff fecb 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4352:	a808      	add	r0, sp, #32
   d4354:	f7ff ffbe 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d4358:	f002 f80c 	bl	d6374 <_ZN9TimeClass3nowEv>
   d435c:	17c1      	asrs	r1, r0, #31
   d435e:	e9c4 0100 	strd	r0, r1, [r4]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d4362:	f002 fa51 	bl	d6808 <_Z21__fetch_global_EEPROMv>
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4366:	7821      	ldrb	r1, [r4, #0]
   d4368:	2003      	movs	r0, #3
   d436a:	f000 fe6d 	bl	d5048 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d436e:	f002 f811 	bl	d6394 <_ZN9TimeClass4hourEv>
   d4372:	4b0a      	ldr	r3, [pc, #40]	; (d439c <_Z9sendEventv+0x9c>)
   d4374:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4376:	4b0a      	ldr	r3, [pc, #40]	; (d43a0 <_Z9sendEventv+0xa0>)
   d4378:	2201      	movs	r2, #1
   d437a:	701a      	strb	r2, [r3, #0]
   d437c:	f000 fe54 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4380:	4b08      	ldr	r3, [pc, #32]	; (d43a4 <_Z9sendEventv+0xa4>)
   d4382:	6018      	str	r0, [r3, #0]
}
   d4384:	b023      	add	sp, #140	; 0x8c
   d4386:	bd30      	pop	{r4, r5, pc}
   d4388:	2003e540 	.word	0x2003e540
   d438c:	000d91d3 	.word	0x000d91d3
   d4390:	2003e4d8 	.word	0x2003e4d8
   d4394:	2003e4ad 	.word	0x2003e4ad
   d4398:	000d9208 	.word	0x000d9208
   d439c:	2003e4e0 	.word	0x2003e4e0
   d43a0:	2003e1e0 	.word	0x2003e1e0
   d43a4:	2003e5d4 	.word	0x2003e5d4

000d43a8 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d43a8:	b530      	push	{r4, r5, lr}
   d43aa:	4d1e      	ldr	r5, [pc, #120]	; (d4424 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43ac:	b085      	sub	sp, #20
  if (!data) {                                                                    // First check to see if there is any data
   d43ae:	460c      	mov	r4, r1
   d43b0:	b981      	cbnz	r1, d43d4 <_Z14UbidotsHandlerPKcS0_+0x2c>
    if (verboseMode) {
   d43b2:	782b      	ldrb	r3, [r5, #0]
   d43b4:	b343      	cbz	r3, d4408 <_Z14UbidotsHandlerPKcS0_+0x60>
        return waitConditionWhile(_condition, []{ return true; });
   d43b6:	f7ff fefb 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d43ba:	4b1b      	ldr	r3, [pc, #108]	; (d4428 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43bc:	f88d 4000 	strb.w	r4, [sp]
   d43c0:	781b      	ldrb	r3, [r3, #0]
   d43c2:	4a1a      	ldr	r2, [pc, #104]	; (d442c <_Z14UbidotsHandlerPKcS0_+0x84>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d43c4:	491a      	ldr	r1, [pc, #104]	; (d4430 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43c6:	a802      	add	r0, sp, #8
   d43c8:	f7ff fe8e 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d43cc:	a803      	add	r0, sp, #12
   d43ce:	f7ff ff81 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43d2:	e019      	b.n	d4408 <_Z14UbidotsHandlerPKcS0_+0x60>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d43d4:	4608      	mov	r0, r1
   d43d6:	f002 ff60 	bl	d729a <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d43da:	38c8      	subs	r0, #200	; 0xc8
   d43dc:	2801      	cmp	r0, #1
    if (verboseMode) {
   d43de:	782b      	ldrb	r3, [r5, #0]
  if ((responseCode == 200) || (responseCode == 201))
   d43e0:	d814      	bhi.n	d440c <_Z14UbidotsHandlerPKcS0_+0x64>
    if (verboseMode) {
   d43e2:	b173      	cbz	r3, d4402 <_Z14UbidotsHandlerPKcS0_+0x5a>
   d43e4:	f7ff fee4 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("State", "Response Received", PRIVATE);
   d43e8:	2300      	movs	r3, #0
   d43ea:	f88d 3000 	strb.w	r3, [sp]
   d43ee:	4b0e      	ldr	r3, [pc, #56]	; (d4428 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43f0:	4a10      	ldr	r2, [pc, #64]	; (d4434 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43f2:	781b      	ldrb	r3, [r3, #0]
   d43f4:	4910      	ldr	r1, [pc, #64]	; (d4438 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43f6:	a802      	add	r0, sp, #8
   d43f8:	f7ff fe76 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d43fc:	a803      	add	r0, sp, #12
   d43fe:	f7ff ff69 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;    
   d4402:	4b0e      	ldr	r3, [pc, #56]	; (d443c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4404:	2200      	movs	r2, #0
   d4406:	701a      	strb	r2, [r3, #0]
}
   d4408:	b005      	add	sp, #20
   d440a:	bd30      	pop	{r4, r5, pc}
  else if (verboseMode) {
   d440c:	2b00      	cmp	r3, #0
   d440e:	d0fb      	beq.n	d4408 <_Z14UbidotsHandlerPKcS0_+0x60>
   d4410:	f7ff fece 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4414:	2300      	movs	r3, #0
   d4416:	f88d 3000 	strb.w	r3, [sp]
   d441a:	4b03      	ldr	r3, [pc, #12]	; (d4428 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d441c:	4622      	mov	r2, r4
   d441e:	781b      	ldrb	r3, [r3, #0]
   d4420:	e7d0      	b.n	d43c4 <_Z14UbidotsHandlerPKcS0_+0x1c>
   d4422:	bf00      	nop
   d4424:	2003e2bc 	.word	0x2003e2bc
   d4428:	2003e4ad 	.word	0x2003e4ad
   d442c:	000d921e 	.word	0x000d921e
   d4430:	000d9226 	.word	0x000d9226
   d4434:	000d9233 	.word	0x000d9233
   d4438:	000d9245 	.word	0x000d9245
   d443c:	2003e1e0 	.word	0x2003e1e0

000d4440 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4440:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
  sensor_data.validData = false;
   d4444:	4c5b      	ldr	r4, [pc, #364]	; (d45b4 <_Z16takeMeasurementsv+0x174>)
  if (sht31.readTemperature()){
   d4446:	485c      	ldr	r0, [pc, #368]	; (d45b8 <_Z16takeMeasurementsv+0x178>)
  sensor_data.validData = false;
   d4448:	2500      	movs	r5, #0
   d444a:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d444c:	f000 fda8 	bl	d4fa0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4450:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4458:	f000 809a 	beq.w	d4590 <_Z16takeMeasurementsv+0x150>
    currentCountTime = Time.now();
   d445c:	f001 ff8a 	bl	d6374 <_ZN9TimeClass3nowEv>
   d4460:	4b56      	ldr	r3, [pc, #344]	; (d45bc <_Z16takeMeasurementsv+0x17c>)
   d4462:	17c1      	asrs	r1, r0, #31
   d4464:	e9c3 0100 	strd	r0, r1, [r3]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d4468:	f001 ffa0 	bl	d63ac <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d446c:	281e      	cmp	r0, #30
   d446e:	f000 8088 	beq.w	d4582 <_Z16takeMeasurementsv+0x142>
   d4472:	282d      	cmp	r0, #45	; 0x2d
   d4474:	f000 8087 	beq.w	d4586 <_Z16takeMeasurementsv+0x146>
        reportCycle = 0;                                                // This is the first of the sample-only periods
   d4478:	280f      	cmp	r0, #15
   d447a:	bf14      	ite	ne
   d447c:	2603      	movne	r6, #3
   d447e:	462e      	moveq	r6, r5
    sensor_data.temperatureInC = sht31.readTemperature();
   d4480:	484d      	ldr	r0, [pc, #308]	; (d45b8 <_Z16takeMeasurementsv+0x178>)
   d4482:	f000 fd8d 	bl	d4fa0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4486:	ee10 0a10 	vmov	r0, s0
   d448a:	f002 fb83 	bl	d6b94 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d448e:	4a4c      	ldr	r2, [pc, #304]	; (d45c0 <_Z16takeMeasurementsv+0x180>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d4490:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d4494:	e9cd 0100 	strd	r0, r1, [sp]
   d4498:	2110      	movs	r1, #16
   d449a:	484a      	ldr	r0, [pc, #296]	; (d45c4 <_Z16takeMeasurementsv+0x184>)
   d449c:	f001 f83c 	bl	d5518 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d44a0:	4845      	ldr	r0, [pc, #276]	; (d45b8 <_Z16takeMeasurementsv+0x178>)
   d44a2:	f000 fd8b 	bl	d4fbc <_ZN14Adafruit_SHT3112readHumidityEv>
   d44a6:	ee10 0a10 	vmov	r0, s0
   d44aa:	f002 fb73 	bl	d6b94 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d44ae:	4a46      	ldr	r2, [pc, #280]	; (d45c8 <_Z16takeMeasurementsv+0x188>)
    sensor_data.relativeHumidity = sht31.readHumidity();
   d44b0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d44b4:	e9cd 0100 	strd	r0, r1, [sp]
   d44b8:	2110      	movs	r1, #16
   d44ba:	4844      	ldr	r0, [pc, #272]	; (d45cc <_Z16takeMeasurementsv+0x18c>)
   d44bc:	f001 f82c 	bl	d5518 <snprintf>
   d44c0:	a902      	add	r1, sp, #8
   d44c2:	2003      	movs	r0, #3
   d44c4:	f7ff febe 	bl	d4244 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d44c8:	2800      	cmp	r0, #0
   d44ca:	d15e      	bne.n	d458a <_Z16takeMeasurementsv+0x14a>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d44cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d44d0:	ee07 3a90 	vmov	s15, r3
   d44d4:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d44d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d44dc:	4a3c      	ldr	r2, [pc, #240]	; (d45d0 <_Z16takeMeasurementsv+0x190>)
   d44de:	483d      	ldr	r0, [pc, #244]	; (d45d4 <_Z16takeMeasurementsv+0x194>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d44e0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
   d44e4:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d44e8:	2110      	movs	r1, #16
   d44ea:	f001 f815 	bl	d5518 <snprintf>
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d44ee:	4b3a      	ldr	r3, [pc, #232]	; (d45d8 <_Z16takeMeasurementsv+0x198>)
   d44f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d44f2:	e9d3 8900 	ldrd	r8, r9, [r3]
   d44f6:	f002 fb4d 	bl	d6b94 <__aeabi_f2d>
   d44fa:	4642      	mov	r2, r8
   d44fc:	464b      	mov	r3, r9
   d44fe:	f002 fe31 	bl	d7164 <__aeabi_dcmpgt>
   d4502:	b110      	cbz	r0, d450a <_Z16takeMeasurementsv+0xca>
   d4504:	4b35      	ldr	r3, [pc, #212]	; (d45dc <_Z16takeMeasurementsv+0x19c>)
   d4506:	2201      	movs	r2, #1
   d4508:	701a      	strb	r2, [r3, #0]
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d450a:	6a20      	ldr	r0, [r4, #32]
   d450c:	f002 fb42 	bl	d6b94 <__aeabi_f2d>
   d4510:	4602      	mov	r2, r0
   d4512:	460b      	mov	r3, r1
   d4514:	4640      	mov	r0, r8
   d4516:	4649      	mov	r1, r9
   d4518:	f002 fe24 	bl	d7164 <__aeabi_dcmpgt>
   d451c:	b110      	cbz	r0, d4524 <_Z16takeMeasurementsv+0xe4>
   d451e:	4b30      	ldr	r3, [pc, #192]	; (d45e0 <_Z16takeMeasurementsv+0x1a0>)
   d4520:	2201      	movs	r2, #1
   d4522:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d4524:	4b2f      	ldr	r3, [pc, #188]	; (d45e4 <_Z16takeMeasurementsv+0x1a4>)
   d4526:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4528:	e9d3 8900 	ldrd	r8, r9, [r3]
   d452c:	f002 fb32 	bl	d6b94 <__aeabi_f2d>
   d4530:	4642      	mov	r2, r8
   d4532:	464b      	mov	r3, r9
   d4534:	f002 fe16 	bl	d7164 <__aeabi_dcmpgt>
   d4538:	b110      	cbz	r0, d4540 <_Z16takeMeasurementsv+0x100>
   d453a:	4b2b      	ldr	r3, [pc, #172]	; (d45e8 <_Z16takeMeasurementsv+0x1a8>)
   d453c:	2201      	movs	r2, #1
   d453e:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4540:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4542:	f002 fb27 	bl	d6b94 <__aeabi_f2d>
   d4546:	4602      	mov	r2, r0
   d4548:	460b      	mov	r3, r1
   d454a:	4640      	mov	r0, r8
   d454c:	4649      	mov	r1, r9
   d454e:	f002 fe09 	bl	d7164 <__aeabi_dcmpgt>
   d4552:	b110      	cbz	r0, d455a <_Z16takeMeasurementsv+0x11a>
   d4554:	4b25      	ldr	r3, [pc, #148]	; (d45ec <_Z16takeMeasurementsv+0x1ac>)
   d4556:	2201      	movs	r2, #1
   d4558:	701a      	strb	r2, [r3, #0]
    sensor_data.validData = true;
   d455a:	2501      	movs	r5, #1
     getBatteryContext();                   // Check what the battery is doing.
   d455c:	f7ff fe96 	bl	d428c <_Z17getBatteryContextv>
    sensor_data.validData = true;
   d4560:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4562:	f001 ff07 	bl	d6374 <_ZN9TimeClass3nowEv>
   d4566:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d4568:	f002 f94e 	bl	d6808 <_Z21__fetch_global_EEPROMv>
   d456c:	2064      	movs	r0, #100	; 0x64
   d456e:	4370      	muls	r0, r6
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4570:	4910      	ldr	r1, [pc, #64]	; (d45b4 <_Z16takeMeasurementsv+0x174>)
   d4572:	2238      	movs	r2, #56	; 0x38
   d4574:	3008      	adds	r0, #8
   d4576:	f000 fd77 	bl	d5068 <HAL_EEPROM_Put>
        return 0;
   d457a:	4628      	mov	r0, r5
}
   d457c:	b004      	add	sp, #16
   d457e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    switch (currentMinutes) {
   d4582:	2601      	movs	r6, #1
   d4584:	e77c      	b.n	d4480 <_Z16takeMeasurementsv+0x40>
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d4586:	2602      	movs	r6, #2
   d4588:	e77a      	b.n	d4480 <_Z16takeMeasurementsv+0x40>
            return -1.0f;
   d458a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d458e:	e7a3      	b.n	d44d8 <_Z16takeMeasurementsv+0x98>
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d4590:	4b17      	ldr	r3, [pc, #92]	; (d45f0 <_Z16takeMeasurementsv+0x1b0>)
   d4592:	f88d 5000 	strb.w	r5, [sp]
   d4596:	781b      	ldrb	r3, [r3, #0]
   d4598:	4a16      	ldr	r2, [pc, #88]	; (d45f4 <_Z16takeMeasurementsv+0x1b4>)
   d459a:	4917      	ldr	r1, [pc, #92]	; (d45f8 <_Z16takeMeasurementsv+0x1b8>)
   d459c:	a802      	add	r0, sp, #8
   d459e:	f7ff fda3 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d45a2:	a803      	add	r0, sp, #12
   d45a4:	f7ff fe96 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Failed to take reading!");
   d45a8:	f001 fff2 	bl	d6590 <_Z16_fetch_usbserialv>
   d45ac:	4913      	ldr	r1, [pc, #76]	; (d45fc <_Z16takeMeasurementsv+0x1bc>)
   d45ae:	f001 fd52 	bl	d6056 <_ZN5Print7printlnEPKc>
   d45b2:	e7e2      	b.n	d457a <_Z16takeMeasurementsv+0x13a>
   d45b4:	2003e540 	.word	0x2003e540
   d45b8:	2003e578 	.word	0x2003e578
   d45bc:	2003e4d8 	.word	0x2003e4d8
   d45c0:	000d924b 	.word	0x000d924b
   d45c4:	2003e590 	.word	0x2003e590
   d45c8:	000d9253 	.word	0x000d9253
   d45cc:	2003e4e1 	.word	0x2003e4e1
   d45d0:	000d925b 	.word	0x000d925b
   d45d4:	2003e4c4 	.word	0x2003e4c4
   d45d8:	2003e588 	.word	0x2003e588
   d45dc:	2003e511 	.word	0x2003e511
   d45e0:	2003e5ba 	.word	0x2003e5ba
   d45e4:	2003e530 	.word	0x2003e530
   d45e8:	2003e4f8 	.word	0x2003e4f8
   d45ec:	2003e5a1 	.word	0x2003e5a1
   d45f0:	2003e4ac 	.word	0x2003e4ac
   d45f4:	000d9261 	.word	0x000d9261
   d45f8:	000d927e 	.word	0x000d927e
   d45fc:	000d9282 	.word	0x000d9282

000d4600 <setup>:
{
   d4600:	b570      	push	{r4, r5, r6, lr}
   d4602:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(115200);
   d4604:	f001 ffc4 	bl	d6590 <_Z16_fetch_usbserialv>
   d4608:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d460c:	f001 ffb4 	bl	d6578 <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d4610:	f001 ffbe 	bl	d6590 <_Z16_fetch_usbserialv>
   d4614:	495c      	ldr	r1, [pc, #368]	; (d4788 <setup+0x188>)
   d4616:	f001 fd1e 	bl	d6056 <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d461a:	4b5c      	ldr	r3, [pc, #368]	; (d478c <setup+0x18c>)
   d461c:	aa08      	add	r2, sp, #32
   d461e:	f103 0510 	add.w	r5, r3, #16
   d4622:	4616      	mov	r6, r2
   d4624:	6818      	ldr	r0, [r3, #0]
   d4626:	6859      	ldr	r1, [r3, #4]
   d4628:	4614      	mov	r4, r2
   d462a:	c403      	stmia	r4!, {r0, r1}
   d462c:	3308      	adds	r3, #8
   d462e:	42ab      	cmp	r3, r5
   d4630:	4622      	mov	r2, r4
   d4632:	d1f7      	bne.n	d4624 <setup+0x24>
   d4634:	8819      	ldrh	r1, [r3, #0]
   d4636:	789b      	ldrb	r3, [r3, #2]
   d4638:	8021      	strh	r1, [r4, #0]
   d463a:	222d      	movs	r2, #45	; 0x2d
   d463c:	70a3      	strb	r3, [r4, #2]
   d463e:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4640:	4c53      	ldr	r4, [pc, #332]	; (d4790 <setup+0x190>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4642:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d4646:	f002 fe49 	bl	d72dc <memset>
  state = IDLE_STATE;
   d464a:	2302      	movs	r3, #2
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d464c:	2101      	movs	r1, #1
   d464e:	2007      	movs	r0, #7
  state = IDLE_STATE;
   d4650:	7023      	strb	r3, [r4, #0]
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4652:	f002 f8af 	bl	d67b4 <pinMode>
  pinMode(tempLED,OUTPUT);
   d4656:	2101      	movs	r1, #1
   d4658:	2005      	movs	r0, #5
   d465a:	f002 f8ab 	bl	d67b4 <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
   d465e:	a804      	add	r0, sp, #16
   d4660:	f000 fec2 	bl	d53e8 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4664:	2300      	movs	r3, #0
   d4666:	227d      	movs	r2, #125	; 0x7d
   d4668:	a918      	add	r1, sp, #96	; 0x60
   d466a:	a804      	add	r0, sp, #16
   d466c:	f001 fdc5 	bl	d61fa <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4670:	2300      	movs	r3, #0
   d4672:	461a      	mov	r2, r3
   d4674:	e9cd 3300 	strd	r3, r3, [sp]
   d4678:	4946      	ldr	r1, [pc, #280]	; (d4794 <setup+0x194>)
   d467a:	a818      	add	r0, sp, #96	; 0x60
   d467c:	f000 fec4 	bl	d5408 <spark_subscribe>
  Particle.variable("Release",releaseNumber);
   d4680:	4b45      	ldr	r3, [pc, #276]	; (d4798 <setup+0x198>)
        return _variable(varKey, var, STRING);
   d4682:	4846      	ldr	r0, [pc, #280]	; (d479c <setup+0x19c>)
   d4684:	6819      	ldr	r1, [r3, #0]
   d4686:	f7ff fd2b 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d468a:	4945      	ldr	r1, [pc, #276]	; (d47a0 <setup+0x1a0>)
   d468c:	4845      	ldr	r0, [pc, #276]	; (d47a4 <setup+0x1a4>)
   d468e:	f7ff fd27 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4692:	4945      	ldr	r1, [pc, #276]	; (d47a8 <setup+0x1a8>)
   d4694:	4845      	ldr	r0, [pc, #276]	; (d47ac <setup+0x1ac>)
   d4696:	f7ff fd23 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d469a:	4945      	ldr	r1, [pc, #276]	; (d47b0 <setup+0x1b0>)
   d469c:	4845      	ldr	r0, [pc, #276]	; (d47b4 <setup+0x1b4>)
   d469e:	f7ff fd1f 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46a2:	4945      	ldr	r1, [pc, #276]	; (d47b8 <setup+0x1b8>)
   d46a4:	4845      	ldr	r0, [pc, #276]	; (d47bc <setup+0x1bc>)
   d46a6:	f7ff fd1b 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46aa:	4945      	ldr	r1, [pc, #276]	; (d47c0 <setup+0x1c0>)
   d46ac:	4845      	ldr	r0, [pc, #276]	; (d47c4 <setup+0x1c4>)
   d46ae:	f7ff fd17 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46b2:	4945      	ldr	r1, [pc, #276]	; (d47c8 <setup+0x1c8>)
   d46b4:	4845      	ldr	r0, [pc, #276]	; (d47cc <setup+0x1cc>)
   d46b6:	f7ff fd13 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46ba:	4945      	ldr	r1, [pc, #276]	; (d47d0 <setup+0x1d0>)
   d46bc:	4845      	ldr	r0, [pc, #276]	; (d47d4 <setup+0x1d4>)
   d46be:	f7ff fd0f 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46c2:	4945      	ldr	r1, [pc, #276]	; (d47d8 <setup+0x1d8>)
   d46c4:	4845      	ldr	r0, [pc, #276]	; (d47dc <setup+0x1dc>)
   d46c6:	f7ff fd0b 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d46ca:	4a45      	ldr	r2, [pc, #276]	; (d47e0 <setup+0x1e0>)
   d46cc:	4945      	ldr	r1, [pc, #276]	; (d47e4 <setup+0x1e4>)
   d46ce:	4846      	ldr	r0, [pc, #280]	; (d47e8 <setup+0x1e8>)
   d46d0:	f001 f834 	bl	d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46d4:	4a45      	ldr	r2, [pc, #276]	; (d47ec <setup+0x1ec>)
   d46d6:	4946      	ldr	r1, [pc, #280]	; (d47f0 <setup+0x1f0>)
   d46d8:	4843      	ldr	r0, [pc, #268]	; (d47e8 <setup+0x1e8>)
   d46da:	f001 f82f 	bl	d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46de:	4a45      	ldr	r2, [pc, #276]	; (d47f4 <setup+0x1f4>)
   d46e0:	4945      	ldr	r1, [pc, #276]	; (d47f8 <setup+0x1f8>)
   d46e2:	4841      	ldr	r0, [pc, #260]	; (d47e8 <setup+0x1e8>)
   d46e4:	f001 f82a 	bl	d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46e8:	4a44      	ldr	r2, [pc, #272]	; (d47fc <setup+0x1fc>)
   d46ea:	4945      	ldr	r1, [pc, #276]	; (d4800 <setup+0x200>)
   d46ec:	483e      	ldr	r0, [pc, #248]	; (d47e8 <setup+0x1e8>)
   d46ee:	f001 f825 	bl	d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46f2:	4a44      	ldr	r2, [pc, #272]	; (d4804 <setup+0x204>)
   d46f4:	4944      	ldr	r1, [pc, #272]	; (d4808 <setup+0x208>)
   d46f6:	483c      	ldr	r0, [pc, #240]	; (d47e8 <setup+0x1e8>)
   d46f8:	f001 f820 	bl	d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46fc:	4943      	ldr	r1, [pc, #268]	; (d480c <setup+0x20c>)
   d46fe:	4a44      	ldr	r2, [pc, #272]	; (d4810 <setup+0x210>)
   d4700:	4839      	ldr	r0, [pc, #228]	; (d47e8 <setup+0x1e8>)
   d4702:	f001 f81b 	bl	d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d4706:	4843      	ldr	r0, [pc, #268]	; (d4814 <setup+0x214>)
   d4708:	2144      	movs	r1, #68	; 0x44
   d470a:	f000 fbb2 	bl	d4e72 <_ZN14Adafruit_SHT315beginEh>
   d470e:	b988      	cbnz	r0, d4734 <setup+0x134>
   d4710:	f000 fc8a 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4714:	4d40      	ldr	r5, [pc, #256]	; (d4818 <setup+0x218>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4716:	4941      	ldr	r1, [pc, #260]	; (d481c <setup+0x21c>)
    resetTimeStamp = millis();
   d4718:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d471a:	4630      	mov	r0, r6
   d471c:	f002 fe14 	bl	d7348 <strcpy>
    Serial.println("Couldn't find SHT31");
   d4720:	f001 ff36 	bl	d6590 <_Z16_fetch_usbserialv>
   d4724:	493e      	ldr	r1, [pc, #248]	; (d4820 <setup+0x220>)
   d4726:	f001 fc96 	bl	d6056 <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d472a:	2301      	movs	r3, #1
   d472c:	7023      	strb	r3, [r4, #0]
   d472e:	f000 fc7b 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4732:	6028      	str	r0, [r5, #0]
  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d4734:	f7ff fe84 	bl	d4440 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d4738:	f7ff fd46 	bl	d41c8 <_Z20updateThresholdValuev>
  if(!connectToParticle()) {
   d473c:	f7ff fce2 	bl	d4104 <_Z17connectToParticlev>
   d4740:	b948      	cbnz	r0, d4756 <setup+0x156>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d4742:	2301      	movs	r3, #1
   d4744:	7023      	strb	r3, [r4, #0]
   d4746:	f000 fc6f 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d474a:	4b33      	ldr	r3, [pc, #204]	; (d4818 <setup+0x218>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d474c:	4935      	ldr	r1, [pc, #212]	; (d4824 <setup+0x224>)
    resetTimeStamp = millis();
   d474e:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4750:	4630      	mov	r0, r6
   d4752:	f002 fdf9 	bl	d7348 <strcpy>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d4756:	4b34      	ldr	r3, [pc, #208]	; (d4828 <setup+0x228>)
   d4758:	781b      	ldrb	r3, [r3, #0]
   d475a:	b163      	cbz	r3, d4776 <setup+0x176>
   d475c:	2300      	movs	r3, #0
   d475e:	f88d 3000 	strb.w	r3, [sp]
   d4762:	4b32      	ldr	r3, [pc, #200]	; (d482c <setup+0x22c>)
   d4764:	4932      	ldr	r1, [pc, #200]	; (d4830 <setup+0x230>)
   d4766:	781b      	ldrb	r3, [r3, #0]
   d4768:	a802      	add	r0, sp, #8
   d476a:	4632      	mov	r2, r6
   d476c:	f7ff fcbc 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4770:	a803      	add	r0, sp, #12
   d4772:	f7ff fdaf 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4776:	f000 fc57 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d477a:	4b2e      	ldr	r3, [pc, #184]	; (d4834 <setup+0x234>)
   d477c:	6018      	str	r0, [r3, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d477e:	a804      	add	r0, sp, #16
   d4780:	f001 fcb0 	bl	d60e4 <_ZN6StringD1Ev>
}
   d4784:	b038      	add	sp, #224	; 0xe0
   d4786:	bd70      	pop	{r4, r5, r6, pc}
   d4788:	000d929a 	.word	0x000d929a
   d478c:	000d94e0 	.word	0x000d94e0
   d4790:	2003e584 	.word	0x2003e584
   d4794:	000d43a9 	.word	0x000d43a9
   d4798:	2003e1e4 	.word	0x2003e1e4
   d479c:	000d92a5 	.word	0x000d92a5
   d47a0:	2003e590 	.word	0x2003e590
   d47a4:	000d92ad 	.word	0x000d92ad
   d47a8:	2003e4e1 	.word	0x2003e4e1
   d47ac:	000d92b9 	.word	0x000d92b9
   d47b0:	2003e5bb 	.word	0x2003e5bb
   d47b4:	000d92c2 	.word	0x000d92c2
   d47b8:	2003e512 	.word	0x2003e512
   d47bc:	000d92d4 	.word	0x000d92d4
   d47c0:	2003e5a2 	.word	0x2003e5a2
   d47c4:	000d92e6 	.word	0x000d92e6
   d47c8:	2003e4f9 	.word	0x2003e4f9
   d47cc:	000d92f5 	.word	0x000d92f5
   d47d0:	2003e4c4 	.word	0x2003e4c4
   d47d4:	000d9304 	.word	0x000d9304
   d47d8:	2003e4b4 	.word	0x2003e4b4
   d47dc:	000d930c 	.word	0x000d930c
   d47e0:	000d931b 	.word	0x000d931b
   d47e4:	000d40b5 	.word	0x000d40b5
   d47e8:	000d5711 	.word	0x000d5711
   d47ec:	000d9327 	.word	0x000d9327
   d47f0:	000d4925 	.word	0x000d4925
   d47f4:	000d9334 	.word	0x000d9334
   d47f8:	000d4c55 	.word	0x000d4c55
   d47fc:	000d9345 	.word	0x000d9345
   d4800:	000d4ca9 	.word	0x000d4ca9
   d4804:	000d9356 	.word	0x000d9356
   d4808:	000d4d51 	.word	0x000d4d51
   d480c:	000d4cfd 	.word	0x000d4cfd
   d4810:	000d936b 	.word	0x000d936b
   d4814:	2003e578 	.word	0x2003e578
   d4818:	2003e538 	.word	0x2003e538
   d481c:	000d937f 	.word	0x000d937f
   d4820:	000d939c 	.word	0x000d939c
   d4824:	000d93b0 	.word	0x000d93b0
   d4828:	2003e2bc 	.word	0x2003e2bc
   d482c:	2003e4ad 	.word	0x2003e4ad
   d4830:	000d93c2 	.word	0x000d93c2
   d4834:	2003e4f4 	.word	0x2003e4f4

000d4838 <_Z16ThresholdCrossedv>:
bool ThresholdCrossed(){
   d4838:	b530      	push	{r4, r5, lr}
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d483a:	4b2d      	ldr	r3, [pc, #180]	; (d48f0 <_Z16ThresholdCrossedv+0xb8>)
   d483c:	4c2d      	ldr	r4, [pc, #180]	; (d48f4 <_Z16ThresholdCrossedv+0xbc>)
   d483e:	781b      	ldrb	r3, [r3, #0]
bool ThresholdCrossed(){
   d4840:	b08d      	sub	sp, #52	; 0x34
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4842:	b913      	cbnz	r3, d484a <_Z16ThresholdCrossedv+0x12>
   d4844:	4b2c      	ldr	r3, [pc, #176]	; (d48f8 <_Z16ThresholdCrossedv+0xc0>)
   d4846:	781b      	ldrb	r3, [r3, #0]
   d4848:	b1eb      	cbz	r3, d4886 <_Z16ThresholdCrossedv+0x4e>
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d484a:	4b2c      	ldr	r3, [pc, #176]	; (d48fc <_Z16ThresholdCrossedv+0xc4>)
   d484c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4850:	2120      	movs	r1, #32
   d4852:	e9cd 2300 	strd	r2, r3, [sp]
   d4856:	a804      	add	r0, sp, #16
   d4858:	4a29      	ldr	r2, [pc, #164]	; (d4900 <_Z16ThresholdCrossedv+0xc8>)
   d485a:	f000 fe5d 	bl	d5518 <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d485e:	2005      	movs	r0, #5
   d4860:	f7ff fc84 	bl	d416c <_Z8BlinkLEDi>
        return waitConditionWhile(_condition, []{ return true; });
   d4864:	f7ff fca4 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d4868:	2300      	movs	r3, #0
   d486a:	f88d 3000 	strb.w	r3, [sp]
   d486e:	4b25      	ldr	r3, [pc, #148]	; (d4904 <_Z16ThresholdCrossedv+0xcc>)
   d4870:	4925      	ldr	r1, [pc, #148]	; (d4908 <_Z16ThresholdCrossedv+0xd0>)
   d4872:	781b      	ldrb	r3, [r3, #0]
   d4874:	aa04      	add	r2, sp, #16
   d4876:	a802      	add	r0, sp, #8
   d4878:	f7ff fc36 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d487c:	a803      	add	r0, sp, #12
   d487e:	f7ff fd29 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d4882:	2301      	movs	r3, #1
   d4884:	7023      	strb	r3, [r4, #0]
  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d4886:	4d21      	ldr	r5, [pc, #132]	; (d490c <_Z16ThresholdCrossedv+0xd4>)
   d4888:	782a      	ldrb	r2, [r5, #0]
   d488a:	b912      	cbnz	r2, d4892 <_Z16ThresholdCrossedv+0x5a>
   d488c:	4b20      	ldr	r3, [pc, #128]	; (d4910 <_Z16ThresholdCrossedv+0xd8>)
   d488e:	781b      	ldrb	r3, [r3, #0]
   d4890:	b1eb      	cbz	r3, d48ce <_Z16ThresholdCrossedv+0x96>
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d4892:	4b20      	ldr	r3, [pc, #128]	; (d4914 <_Z16ThresholdCrossedv+0xdc>)
   d4894:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4898:	2120      	movs	r1, #32
   d489a:	e9cd 2300 	strd	r2, r3, [sp]
   d489e:	a804      	add	r0, sp, #16
   d48a0:	4a1d      	ldr	r2, [pc, #116]	; (d4918 <_Z16ThresholdCrossedv+0xe0>)
   d48a2:	f000 fe39 	bl	d5518 <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d48a6:	2007      	movs	r0, #7
   d48a8:	f7ff fc60 	bl	d416c <_Z8BlinkLEDi>
   d48ac:	f7ff fc80 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d48b0:	2300      	movs	r3, #0
   d48b2:	f88d 3000 	strb.w	r3, [sp]
   d48b6:	4b13      	ldr	r3, [pc, #76]	; (d4904 <_Z16ThresholdCrossedv+0xcc>)
   d48b8:	4913      	ldr	r1, [pc, #76]	; (d4908 <_Z16ThresholdCrossedv+0xd0>)
   d48ba:	781b      	ldrb	r3, [r3, #0]
   d48bc:	aa04      	add	r2, sp, #16
   d48be:	a802      	add	r0, sp, #8
   d48c0:	f7ff fc12 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d48c4:	a803      	add	r0, sp, #12
   d48c6:	f7ff fd05 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d48ca:	2301      	movs	r3, #1
   d48cc:	7023      	strb	r3, [r4, #0]
  thresholdTimeStamp = Time.minute();
   d48ce:	f001 fd6d 	bl	d63ac <_ZN9TimeClass6minuteEv>
   d48d2:	4b12      	ldr	r3, [pc, #72]	; (d491c <_Z16ThresholdCrossedv+0xe4>)
   d48d4:	6018      	str	r0, [r3, #0]
  if (thresholdCrossAcknowledged == true)
   d48d6:	7823      	ldrb	r3, [r4, #0]
   d48d8:	b133      	cbz	r3, d48e8 <_Z16ThresholdCrossedv+0xb0>
    lowerHumidityThresholdCrossed = false;
   d48da:	4a0d      	ldr	r2, [pc, #52]	; (d4910 <_Z16ThresholdCrossedv+0xd8>)
    upperHumidityThresholdCrossed = false;
   d48dc:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d48de:	7013      	strb	r3, [r2, #0]
    upperHumidityThresholdCrossed = false;
   d48e0:	702b      	strb	r3, [r5, #0]
    upperTemperatureThreshold     = false;
   d48e2:	4b0f      	ldr	r3, [pc, #60]	; (d4920 <_Z16ThresholdCrossedv+0xe8>)
   d48e4:	2200      	movs	r2, #0
   d48e6:	601a      	str	r2, [r3, #0]
}
   d48e8:	2001      	movs	r0, #1
   d48ea:	b00d      	add	sp, #52	; 0x34
   d48ec:	bd30      	pop	{r4, r5, pc}
   d48ee:	bf00      	nop
   d48f0:	2003e511 	.word	0x2003e511
   d48f4:	2003e5a0 	.word	0x2003e5a0
   d48f8:	2003e5ba 	.word	0x2003e5ba
   d48fc:	2003e588 	.word	0x2003e588
   d4900:	000d93ca 	.word	0x000d93ca
   d4904:	2003e4ad 	.word	0x2003e4ad
   d4908:	000d93e6 	.word	0x000d93e6
   d490c:	2003e5a1 	.word	0x2003e5a1
   d4910:	2003e4f8 	.word	0x2003e4f8
   d4914:	2003e530 	.word	0x2003e530
   d4918:	000d93f7 	.word	0x000d93f7
   d491c:	2003e4a8 	.word	0x2003e4a8
   d4920:	2003e2b8 	.word	0x2003e2b8

000d4924 <_Z14setVerboseMode6String>:
{
   d4924:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4926:	4914      	ldr	r1, [pc, #80]	; (d4978 <_Z14setVerboseMode6String+0x54>)
   d4928:	b085      	sub	sp, #20
   d492a:	4605      	mov	r5, r0
   d492c:	f001 fc53 	bl	d61d6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4930:	4604      	mov	r4, r0
   d4932:	b190      	cbz	r0, d495a <_Z14setVerboseMode6String+0x36>
    verboseMode = true;
   d4934:	4b11      	ldr	r3, [pc, #68]	; (d497c <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4936:	4a12      	ldr	r2, [pc, #72]	; (d4980 <_Z14setVerboseMode6String+0x5c>)
    verboseMode = true;
   d4938:	2401      	movs	r4, #1
   d493a:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d493c:	2300      	movs	r3, #0
   d493e:	f88d 3000 	strb.w	r3, [sp]
   d4942:	4b10      	ldr	r3, [pc, #64]	; (d4984 <_Z14setVerboseMode6String+0x60>)
   d4944:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4946:	4910      	ldr	r1, [pc, #64]	; (d4988 <_Z14setVerboseMode6String+0x64>)
   d4948:	a802      	add	r0, sp, #8
   d494a:	f7ff fbcd 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d494e:	a803      	add	r0, sp, #12
   d4950:	f7ff fcc0 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4954:	2001      	movs	r0, #1
}
   d4956:	b005      	add	sp, #20
   d4958:	bd30      	pop	{r4, r5, pc}
   d495a:	490c      	ldr	r1, [pc, #48]	; (d498c <_Z14setVerboseMode6String+0x68>)
   d495c:	4628      	mov	r0, r5
   d495e:	f001 fc3a 	bl	d61d6 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4962:	2800      	cmp	r0, #0
   d4964:	d0f7      	beq.n	d4956 <_Z14setVerboseMode6String+0x32>
    verboseMode = false;
   d4966:	4b05      	ldr	r3, [pc, #20]	; (d497c <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4968:	4a09      	ldr	r2, [pc, #36]	; (d4990 <_Z14setVerboseMode6String+0x6c>)
    verboseMode = false;
   d496a:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d496c:	4b05      	ldr	r3, [pc, #20]	; (d4984 <_Z14setVerboseMode6String+0x60>)
   d496e:	f88d 4000 	strb.w	r4, [sp]
   d4972:	781b      	ldrb	r3, [r3, #0]
   d4974:	e7e7      	b.n	d4946 <_Z14setVerboseMode6String+0x22>
   d4976:	bf00      	nop
   d4978:	000d93ae 	.word	0x000d93ae
   d497c:	2003e2bc 	.word	0x2003e2bc
   d4980:	000d9410 	.word	0x000d9410
   d4984:	2003e4ad 	.word	0x2003e4ad
   d4988:	000d9431 	.word	0x000d9431
   d498c:	000d9186 	.word	0x000d9186
   d4990:	000d9421 	.word	0x000d9421

000d4994 <_Z22publishStateTransitionv>:
{
   d4994:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4996:	4d18      	ldr	r5, [pc, #96]	; (d49f8 <_Z22publishStateTransitionv+0x64>)
   d4998:	4c18      	ldr	r4, [pc, #96]	; (d49fc <_Z22publishStateTransitionv+0x68>)
   d499a:	4919      	ldr	r1, [pc, #100]	; (d4a00 <_Z22publishStateTransitionv+0x6c>)
   d499c:	782a      	ldrb	r2, [r5, #0]
   d499e:	7820      	ldrb	r0, [r4, #0]
{
   d49a0:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49a2:	231a      	movs	r3, #26
   d49a4:	fb03 1202 	mla	r2, r3, r2, r1
   d49a8:	9200      	str	r2, [sp, #0]
   d49aa:	fb03 1300 	mla	r3, r3, r0, r1
   d49ae:	4a15      	ldr	r2, [pc, #84]	; (d4a04 <_Z22publishStateTransitionv+0x70>)
   d49b0:	2128      	movs	r1, #40	; 0x28
   d49b2:	a804      	add	r0, sp, #16
   d49b4:	f000 fdb0 	bl	d5518 <snprintf>
  oldState = state;
   d49b8:	782b      	ldrb	r3, [r5, #0]
   d49ba:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49bc:	f000 fd0c 	bl	d53d8 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d49c0:	b190      	cbz	r0, d49e8 <_Z22publishStateTransitionv+0x54>
   d49c2:	f7ff fbf5 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d49c6:	2300      	movs	r3, #0
   d49c8:	f88d 3000 	strb.w	r3, [sp]
   d49cc:	4b0e      	ldr	r3, [pc, #56]	; (d4a08 <_Z22publishStateTransitionv+0x74>)
   d49ce:	490f      	ldr	r1, [pc, #60]	; (d4a0c <_Z22publishStateTransitionv+0x78>)
   d49d0:	781b      	ldrb	r3, [r3, #0]
   d49d2:	aa04      	add	r2, sp, #16
   d49d4:	a802      	add	r0, sp, #8
   d49d6:	f7ff fb87 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49da:	a803      	add	r0, sp, #12
   d49dc:	f7ff fc7a 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49e0:	f000 fb22 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d49e4:	4b0a      	ldr	r3, [pc, #40]	; (d4a10 <_Z22publishStateTransitionv+0x7c>)
   d49e6:	6018      	str	r0, [r3, #0]
  Serial.println(stateTransitionString);
   d49e8:	f001 fdd2 	bl	d6590 <_Z16_fetch_usbserialv>
   d49ec:	a904      	add	r1, sp, #16
   d49ee:	f001 fb32 	bl	d6056 <_ZN5Print7printlnEPKc>
}
   d49f2:	b00f      	add	sp, #60	; 0x3c
   d49f4:	bd30      	pop	{r4, r5, pc}
   d49f6:	bf00      	nop
   d49f8:	2003e584 	.word	0x2003e584
   d49fc:	2003e52a 	.word	0x2003e52a
   d4a00:	2003e1e8 	.word	0x2003e1e8
   d4a04:	000d9436 	.word	0x000d9436
   d4a08:	2003e4ad 	.word	0x2003e4ad
   d4a0c:	000d9444 	.word	0x000d9444
   d4a10:	2003e4f4 	.word	0x2003e4f4

000d4a14 <loop>:
{
   d4a14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
   d4a16:	4c7b      	ldr	r4, [pc, #492]	; (d4c04 <loop+0x1f0>)
   d4a18:	7823      	ldrb	r3, [r4, #0]
   d4a1a:	3b01      	subs	r3, #1
   d4a1c:	2b05      	cmp	r3, #5
   d4a1e:	d81c      	bhi.n	d4a5a <loop+0x46>
   d4a20:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a24:	000600c4 	.word	0x000600c4
   d4a28:	0039004b 	.word	0x0039004b
   d4a2c:	00960076 	.word	0x00960076
    if (verboseMode && state != oldState) publishStateTransition();
   d4a30:	4b75      	ldr	r3, [pc, #468]	; (d4c08 <loop+0x1f4>)
   d4a32:	781b      	ldrb	r3, [r3, #0]
   d4a34:	b12b      	cbz	r3, d4a42 <loop+0x2e>
   d4a36:	4b75      	ldr	r3, [pc, #468]	; (d4c0c <loop+0x1f8>)
   d4a38:	781b      	ldrb	r3, [r3, #0]
   d4a3a:	2b02      	cmp	r3, #2
   d4a3c:	d001      	beq.n	d4a42 <loop+0x2e>
   d4a3e:	f7ff ffa9 	bl	d4994 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 15) {
   d4a42:	f001 fca7 	bl	d6394 <_ZN9TimeClass4hourEv>
   d4a46:	4b72      	ldr	r3, [pc, #456]	; (d4c10 <loop+0x1fc>)
   d4a48:	4d72      	ldr	r5, [pc, #456]	; (d4c14 <loop+0x200>)
   d4a4a:	781b      	ldrb	r3, [r3, #0]
   d4a4c:	4298      	cmp	r0, r3
   d4a4e:	d006      	beq.n	d4a5e <loop+0x4a>
      TimePassed = Time.minute();
   d4a50:	f001 fcac 	bl	d63ac <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d4a54:	2303      	movs	r3, #3
      TimePassed = Time.minute();
   d4a56:	6028      	str	r0, [r5, #0]
      state = THRESHOLD_CROSSED;
   d4a58:	7023      	strb	r3, [r4, #0]
}
   d4a5a:	b004      	add	sp, #16
   d4a5c:	bd70      	pop	{r4, r5, r6, pc}
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 15) {
   d4a5e:	f001 fca5 	bl	d63ac <_ZN9TimeClass6minuteEv>
   d4a62:	682b      	ldr	r3, [r5, #0]
   d4a64:	1ac0      	subs	r0, r0, r3
   d4a66:	280e      	cmp	r0, #14
   d4a68:	dcf2      	bgt.n	d4a50 <loop+0x3c>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d4a6a:	4b6b      	ldr	r3, [pc, #428]	; (d4c18 <loop+0x204>)
   d4a6c:	781b      	ldrb	r3, [r3, #0]
   d4a6e:	b94b      	cbnz	r3, d4a84 <loop+0x70>
    || lowerTemperatureThresholdCrossed \
   d4a70:	4b6a      	ldr	r3, [pc, #424]	; (d4c1c <loop+0x208>)
   d4a72:	781b      	ldrb	r3, [r3, #0]
   d4a74:	b933      	cbnz	r3, d4a84 <loop+0x70>
    || upperHumidityThresholdCrossed \
   d4a76:	4b6a      	ldr	r3, [pc, #424]	; (d4c20 <loop+0x20c>)
   d4a78:	781b      	ldrb	r3, [r3, #0]
   d4a7a:	b91b      	cbnz	r3, d4a84 <loop+0x70>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d4a7c:	4b69      	ldr	r3, [pc, #420]	; (d4c24 <loop+0x210>)
   d4a7e:	781b      	ldrb	r3, [r3, #0]
   d4a80:	2b00      	cmp	r3, #0
   d4a82:	d0ea      	beq.n	d4a5a <loop+0x46>
   d4a84:	f001 fc92 	bl	d63ac <_ZN9TimeClass6minuteEv>
   d4a88:	4b67      	ldr	r3, [pc, #412]	; (d4c28 <loop+0x214>)
   d4a8a:	681b      	ldr	r3, [r3, #0]
   d4a8c:	1ac0      	subs	r0, r0, r3
   d4a8e:	2804      	cmp	r0, #4
   d4a90:	dde3      	ble.n	d4a5a <loop+0x46>
      state = THRESHOLD_CROSSED;
   d4a92:	2304      	movs	r3, #4
   d4a94:	e7e0      	b.n	d4a58 <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d4a96:	4b5c      	ldr	r3, [pc, #368]	; (d4c08 <loop+0x1f4>)
   d4a98:	781b      	ldrb	r3, [r3, #0]
   d4a9a:	b12b      	cbz	r3, d4aa8 <loop+0x94>
   d4a9c:	4b5b      	ldr	r3, [pc, #364]	; (d4c0c <loop+0x1f8>)
   d4a9e:	781b      	ldrb	r3, [r3, #0]
   d4aa0:	2b04      	cmp	r3, #4
   d4aa2:	d001      	beq.n	d4aa8 <loop+0x94>
   d4aa4:	f7ff ff76 	bl	d4994 <_Z22publishStateTransitionv>
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4aa8:	f7ff fcca 	bl	d4440 <_Z16takeMeasurementsv>
   d4aac:	b118      	cbz	r0, d4ab6 <loop+0xa2>
      ThresholdCrossed();
   d4aae:	f7ff fec3 	bl	d4838 <_Z16ThresholdCrossedv>
     state = IDLE_STATE;
   d4ab2:	2302      	movs	r3, #2
   d4ab4:	e7d0      	b.n	d4a58 <loop+0x44>
      state= ERROR_STATE;
   d4ab6:	2301      	movs	r3, #1
   d4ab8:	e7ce      	b.n	d4a58 <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d4aba:	4e53      	ldr	r6, [pc, #332]	; (d4c08 <loop+0x1f4>)
   d4abc:	7832      	ldrb	r2, [r6, #0]
   d4abe:	b12a      	cbz	r2, d4acc <loop+0xb8>
   d4ac0:	4b52      	ldr	r3, [pc, #328]	; (d4c0c <loop+0x1f8>)
   d4ac2:	781b      	ldrb	r3, [r3, #0]
   d4ac4:	2b03      	cmp	r3, #3
   d4ac6:	d001      	beq.n	d4acc <loop+0xb8>
   d4ac8:	f7ff ff64 	bl	d4994 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4acc:	f7ff fcb8 	bl	d4440 <_Z16takeMeasurementsv>
   d4ad0:	4605      	mov	r5, r0
   d4ad2:	b9d8      	cbnz	r0, d4b0c <loop+0xf8>
      state = ERROR_STATE;
   d4ad4:	2301      	movs	r3, #1
   d4ad6:	7023      	strb	r3, [r4, #0]
   d4ad8:	f000 faa6 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4adc:	4b53      	ldr	r3, [pc, #332]	; (d4c2c <loop+0x218>)
   d4ade:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4ae0:	7833      	ldrb	r3, [r6, #0]
   d4ae2:	2b00      	cmp	r3, #0
   d4ae4:	d0b9      	beq.n	d4a5a <loop+0x46>
   d4ae6:	f7ff fb63 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4aea:	4b51      	ldr	r3, [pc, #324]	; (d4c30 <loop+0x21c>)
   d4aec:	f88d 5000 	strb.w	r5, [sp]
   d4af0:	781b      	ldrb	r3, [r3, #0]
   d4af2:	4a50      	ldr	r2, [pc, #320]	; (d4c34 <loop+0x220>)
   d4af4:	4950      	ldr	r1, [pc, #320]	; (d4c38 <loop+0x224>)
   d4af6:	a802      	add	r0, sp, #8
   d4af8:	f7ff faf6 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4afc:	a803      	add	r0, sp, #12
   d4afe:	f7ff fbe9 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b02:	f000 fa91 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d4b06:	4b4d      	ldr	r3, [pc, #308]	; (d4c3c <loop+0x228>)
      resetTimeStamp = millis();
   d4b08:	6018      	str	r0, [r3, #0]
   d4b0a:	e7a6      	b.n	d4a5a <loop+0x46>
    else state = REPORTING_STATE;
   d4b0c:	2305      	movs	r3, #5
   d4b0e:	e7a3      	b.n	d4a58 <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4b10:	4b3d      	ldr	r3, [pc, #244]	; (d4c08 <loop+0x1f4>)
   d4b12:	781b      	ldrb	r3, [r3, #0]
   d4b14:	b12b      	cbz	r3, d4b22 <loop+0x10e>
   d4b16:	4b3d      	ldr	r3, [pc, #244]	; (d4c0c <loop+0x1f8>)
   d4b18:	781b      	ldrb	r3, [r3, #0]
   d4b1a:	2b05      	cmp	r3, #5
   d4b1c:	d001      	beq.n	d4b22 <loop+0x10e>
   d4b1e:	f7ff ff39 	bl	d4994 <_Z22publishStateTransitionv>
   d4b22:	f000 fc59 	bl	d53d8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4b26:	b168      	cbz	r0, d4b44 <loop+0x130>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4b28:	f001 fc34 	bl	d6394 <_ZN9TimeClass4hourEv>
   d4b2c:	280c      	cmp	r0, #12
   d4b2e:	d105      	bne.n	d4b3c <loop+0x128>
   d4b30:	f000 fc52 	bl	d53d8 <spark_cloud_flag_connected>
        if (!connected()) {
   d4b34:	b110      	cbz	r0, d4b3c <loop+0x128>
        return spark_sync_time(NULL);
   d4b36:	2000      	movs	r0, #0
   d4b38:	f000 fc6e 	bl	d5418 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4b3c:	f7ff fbe0 	bl	d4300 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4b40:	2306      	movs	r3, #6
   d4b42:	e789      	b.n	d4a58 <loop+0x44>
      state = ERROR_STATE;
   d4b44:	2301      	movs	r3, #1
   d4b46:	7023      	strb	r3, [r4, #0]
   d4b48:	f000 fa6e 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b4c:	4b37      	ldr	r3, [pc, #220]	; (d4c2c <loop+0x218>)
   d4b4e:	e7db      	b.n	d4b08 <loop+0xf4>
    if (verboseMode && state != oldState) publishStateTransition();
   d4b50:	4b2d      	ldr	r3, [pc, #180]	; (d4c08 <loop+0x1f4>)
   d4b52:	781b      	ldrb	r3, [r3, #0]
   d4b54:	b12b      	cbz	r3, d4b62 <loop+0x14e>
   d4b56:	4b2d      	ldr	r3, [pc, #180]	; (d4c0c <loop+0x1f8>)
   d4b58:	781b      	ldrb	r3, [r3, #0]
   d4b5a:	2b06      	cmp	r3, #6
   d4b5c:	d001      	beq.n	d4b62 <loop+0x14e>
   d4b5e:	f7ff ff19 	bl	d4994 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4b62:	4b37      	ldr	r3, [pc, #220]	; (d4c40 <loop+0x22c>)
   d4b64:	781b      	ldrb	r3, [r3, #0]
   d4b66:	2b00      	cmp	r3, #0
   d4b68:	d0a3      	beq.n	d4ab2 <loop+0x9e>
   d4b6a:	f000 fa5d 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4b6e:	4b35      	ldr	r3, [pc, #212]	; (d4c44 <loop+0x230>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	1ac0      	subs	r0, r0, r3
   d4b74:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4b78:	4298      	cmp	r0, r3
   d4b7a:	f67f af6e 	bls.w	d4a5a <loop+0x46>
   d4b7e:	f000 fa53 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b82:	4d2a      	ldr	r5, [pc, #168]	; (d4c2c <loop+0x218>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b84:	4a30      	ldr	r2, [pc, #192]	; (d4c48 <loop+0x234>)
      resetTimeStamp = millis();
   d4b86:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b88:	2300      	movs	r3, #0
   d4b8a:	f88d 3000 	strb.w	r3, [sp]
   d4b8e:	4b28      	ldr	r3, [pc, #160]	; (d4c30 <loop+0x21c>)
   d4b90:	492e      	ldr	r1, [pc, #184]	; (d4c4c <loop+0x238>)
   d4b92:	781b      	ldrb	r3, [r3, #0]
   d4b94:	a802      	add	r0, sp, #8
   d4b96:	f7ff faa7 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b9a:	a803      	add	r0, sp, #12
   d4b9c:	f7ff fb9a 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4ba0:	2301      	movs	r3, #1
   d4ba2:	7023      	strb	r3, [r4, #0]
   d4ba4:	f000 fa40 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ba8:	6028      	str	r0, [r5, #0]
   d4baa:	e756      	b.n	d4a5a <loop+0x46>
    if (verboseMode && state != oldState) publishStateTransition();
   d4bac:	4b16      	ldr	r3, [pc, #88]	; (d4c08 <loop+0x1f4>)
   d4bae:	781b      	ldrb	r3, [r3, #0]
   d4bb0:	b12b      	cbz	r3, d4bbe <loop+0x1aa>
   d4bb2:	4b16      	ldr	r3, [pc, #88]	; (d4c0c <loop+0x1f8>)
   d4bb4:	781b      	ldrb	r3, [r3, #0]
   d4bb6:	2b01      	cmp	r3, #1
   d4bb8:	d001      	beq.n	d4bbe <loop+0x1aa>
   d4bba:	f7ff feeb 	bl	d4994 <_Z22publishStateTransitionv>
   d4bbe:	f000 fa33 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4bc2:	4b1a      	ldr	r3, [pc, #104]	; (d4c2c <loop+0x218>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4bca:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4bce:	4283      	cmp	r3, r0
   d4bd0:	f4bf af43 	bcs.w	d4a5a <loop+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bd4:	f000 fc00 	bl	d53d8 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4bd8:	b160      	cbz	r0, d4bf4 <loop+0x1e0>
   d4bda:	2300      	movs	r3, #0
   d4bdc:	f88d 3000 	strb.w	r3, [sp]
   d4be0:	4b13      	ldr	r3, [pc, #76]	; (d4c30 <loop+0x21c>)
   d4be2:	4a1b      	ldr	r2, [pc, #108]	; (d4c50 <loop+0x23c>)
   d4be4:	781b      	ldrb	r3, [r3, #0]
   d4be6:	4914      	ldr	r1, [pc, #80]	; (d4c38 <loop+0x224>)
   d4be8:	a802      	add	r0, sp, #8
   d4bea:	f7ff fa7d 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4bee:	a803      	add	r0, sp, #12
   d4bf0:	f7ff fb70 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d4bf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4bf8:	f000 fcb6 	bl	d5568 <delay>
      System.reset();
   d4bfc:	f001 fb38 	bl	d6270 <_ZN11SystemClass5resetEv>
}
   d4c00:	e72b      	b.n	d4a5a <loop+0x46>
   d4c02:	bf00      	nop
   d4c04:	2003e584 	.word	0x2003e584
   d4c08:	2003e2bc 	.word	0x2003e2bc
   d4c0c:	2003e52a 	.word	0x2003e52a
   d4c10:	2003e4e0 	.word	0x2003e4e0
   d4c14:	2003e4b0 	.word	0x2003e4b0
   d4c18:	2003e5ba 	.word	0x2003e5ba
   d4c1c:	2003e511 	.word	0x2003e511
   d4c20:	2003e5a1 	.word	0x2003e5a1
   d4c24:	2003e4f8 	.word	0x2003e4f8
   d4c28:	2003e4a8 	.word	0x2003e4a8
   d4c2c:	2003e538 	.word	0x2003e538
   d4c30:	2003e4ad 	.word	0x2003e4ad
   d4c34:	000d9455 	.word	0x000d9455
   d4c38:	000d9245 	.word	0x000d9245
   d4c3c:	2003e4f4 	.word	0x2003e4f4
   d4c40:	2003e1e0 	.word	0x2003e1e0
   d4c44:	2003e5d4 	.word	0x2003e5d4
   d4c48:	000d9299 	.word	0x000d9299
   d4c4c:	000d946f 	.word	0x000d946f
   d4c50:	000d9488 	.word	0x000d9488

000d4c54 <_Z17setUpperTempLimit6String>:
{
   d4c54:	b500      	push	{lr}
   d4c56:	b08b      	sub	sp, #44	; 0x2c
   d4c58:	9003      	str	r0, [sp, #12]
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d4c5a:	f001 fae7 	bl	d622c <_ZNK6String7toFloatEv>
   d4c5e:	4b0f      	ldr	r3, [pc, #60]	; (d4c9c <_Z17setUpperTempLimit6String+0x48>)
   d4c60:	ed83 0a08 	vstr	s0, [r3, #32]
   d4c64:	f7ff faa4 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4c68:	9903      	ldr	r1, [sp, #12]
   d4c6a:	a806      	add	r0, sp, #24
   d4c6c:	f001 faa8 	bl	d61c0 <_ZN6StringC1ERKS_>
   d4c70:	2300      	movs	r3, #0
   d4c72:	f88d 3000 	strb.w	r3, [sp]
   d4c76:	4b0a      	ldr	r3, [pc, #40]	; (d4ca0 <_Z17setUpperTempLimit6String+0x4c>)
   d4c78:	9a06      	ldr	r2, [sp, #24]
   d4c7a:	781b      	ldrb	r3, [r3, #0]
   d4c7c:	4909      	ldr	r1, [pc, #36]	; (d4ca4 <_Z17setUpperTempLimit6String+0x50>)
   d4c7e:	a804      	add	r0, sp, #16
   d4c80:	f7ff fa32 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c84:	a805      	add	r0, sp, #20
   d4c86:	f7ff fb25 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c8a:	a806      	add	r0, sp, #24
   d4c8c:	f001 fa2a 	bl	d60e4 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4c90:	f7ff fa9a 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4c94:	2001      	movs	r0, #1
   d4c96:	b00b      	add	sp, #44	; 0x2c
   d4c98:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c9c:	2003e540 	.word	0x2003e540
   d4ca0:	2003e4ad 	.word	0x2003e4ad
   d4ca4:	000d949c 	.word	0x000d949c

000d4ca8 <_Z17setLowerTempLimit6String>:
{
   d4ca8:	b500      	push	{lr}
   d4caa:	b08b      	sub	sp, #44	; 0x2c
   d4cac:	9003      	str	r0, [sp, #12]
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d4cae:	f001 fabd 	bl	d622c <_ZNK6String7toFloatEv>
   d4cb2:	4b0f      	ldr	r3, [pc, #60]	; (d4cf0 <_Z17setLowerTempLimit6String+0x48>)
   d4cb4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
   d4cb8:	f7ff fa7a 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4cbc:	9903      	ldr	r1, [sp, #12]
   d4cbe:	a806      	add	r0, sp, #24
   d4cc0:	f001 fa7e 	bl	d61c0 <_ZN6StringC1ERKS_>
   d4cc4:	2300      	movs	r3, #0
   d4cc6:	f88d 3000 	strb.w	r3, [sp]
   d4cca:	4b0a      	ldr	r3, [pc, #40]	; (d4cf4 <_Z17setLowerTempLimit6String+0x4c>)
   d4ccc:	9a06      	ldr	r2, [sp, #24]
   d4cce:	781b      	ldrb	r3, [r3, #0]
   d4cd0:	4909      	ldr	r1, [pc, #36]	; (d4cf8 <_Z17setLowerTempLimit6String+0x50>)
   d4cd2:	a804      	add	r0, sp, #16
   d4cd4:	f7ff fa08 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4cd8:	a805      	add	r0, sp, #20
   d4cda:	f7ff fafb 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cde:	a806      	add	r0, sp, #24
   d4ce0:	f001 fa00 	bl	d60e4 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4ce4:	f7ff fa70 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4ce8:	2001      	movs	r0, #1
   d4cea:	b00b      	add	sp, #44	; 0x2c
   d4cec:	f85d fb04 	ldr.w	pc, [sp], #4
   d4cf0:	2003e540 	.word	0x2003e540
   d4cf4:	2003e4ad 	.word	0x2003e4ad
   d4cf8:	000d94b0 	.word	0x000d94b0

000d4cfc <_Z21setUpperHumidityLimit6String>:
{
   d4cfc:	b500      	push	{lr}
   d4cfe:	b08b      	sub	sp, #44	; 0x2c
   d4d00:	9003      	str	r0, [sp, #12]
  sensor_data.upperHumidityThreshold = value.toFloat();
   d4d02:	f001 fa93 	bl	d622c <_ZNK6String7toFloatEv>
   d4d06:	4b0f      	ldr	r3, [pc, #60]	; (d4d44 <_Z21setUpperHumidityLimit6String+0x48>)
   d4d08:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
   d4d0c:	f7ff fa50 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4d10:	9903      	ldr	r1, [sp, #12]
   d4d12:	a806      	add	r0, sp, #24
   d4d14:	f001 fa54 	bl	d61c0 <_ZN6StringC1ERKS_>
   d4d18:	2300      	movs	r3, #0
   d4d1a:	f88d 3000 	strb.w	r3, [sp]
   d4d1e:	4b0a      	ldr	r3, [pc, #40]	; (d4d48 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4d20:	9a06      	ldr	r2, [sp, #24]
   d4d22:	781b      	ldrb	r3, [r3, #0]
   d4d24:	4909      	ldr	r1, [pc, #36]	; (d4d4c <_Z21setUpperHumidityLimit6String+0x50>)
   d4d26:	a804      	add	r0, sp, #16
   d4d28:	f7ff f9de 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d2c:	a805      	add	r0, sp, #20
   d4d2e:	f7ff fad1 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d32:	a806      	add	r0, sp, #24
   d4d34:	f001 f9d6 	bl	d60e4 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4d38:	f7ff fa46 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4d3c:	2001      	movs	r0, #1
   d4d3e:	b00b      	add	sp, #44	; 0x2c
   d4d40:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d44:	2003e540 	.word	0x2003e540
   d4d48:	2003e4ad 	.word	0x2003e4ad
   d4d4c:	000d949c 	.word	0x000d949c

000d4d50 <_Z21setLowerHumidityLimit6String>:
{
   d4d50:	b500      	push	{lr}
   d4d52:	b08b      	sub	sp, #44	; 0x2c
   d4d54:	9003      	str	r0, [sp, #12]
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4d56:	f001 fa69 	bl	d622c <_ZNK6String7toFloatEv>
   d4d5a:	4b0f      	ldr	r3, [pc, #60]	; (d4d98 <_Z21setLowerHumidityLimit6String+0x48>)
   d4d5c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
   d4d60:	f7ff fa26 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4d64:	9903      	ldr	r1, [sp, #12]
   d4d66:	a806      	add	r0, sp, #24
   d4d68:	f001 fa2a 	bl	d61c0 <_ZN6StringC1ERKS_>
   d4d6c:	2300      	movs	r3, #0
   d4d6e:	f88d 3000 	strb.w	r3, [sp]
   d4d72:	4b0a      	ldr	r3, [pc, #40]	; (d4d9c <_Z21setLowerHumidityLimit6String+0x4c>)
   d4d74:	9a06      	ldr	r2, [sp, #24]
   d4d76:	781b      	ldrb	r3, [r3, #0]
   d4d78:	4909      	ldr	r1, [pc, #36]	; (d4da0 <_Z21setLowerHumidityLimit6String+0x50>)
   d4d7a:	a804      	add	r0, sp, #16
   d4d7c:	f7ff f9b4 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d80:	a805      	add	r0, sp, #20
   d4d82:	f7ff faa7 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d86:	a806      	add	r0, sp, #24
   d4d88:	f001 f9ac 	bl	d60e4 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4d8c:	f7ff fa1c 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4d90:	2001      	movs	r0, #1
   d4d92:	b00b      	add	sp, #44	; 0x2c
   d4d94:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d98:	2003e540 	.word	0x2003e540
   d4d9c:	2003e4ad 	.word	0x2003e4ad
   d4da0:	000d94b0 	.word	0x000d94b0

000d4da4 <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d4da4:	4b18      	ldr	r3, [pc, #96]	; (d4e08 <_GLOBAL__sub_I___appProductID+0x64>)
   d4da6:	b570      	push	{r4, r5, r6, lr}
   d4da8:	2400      	movs	r4, #0
   d4daa:	701c      	strb	r4, [r3, #0]
   d4dac:	4b17      	ldr	r3, [pc, #92]	; (d4e0c <_GLOBAL__sub_I___appProductID+0x68>)
              error_(SYSTEM_ERROR_NONE) {
   d4dae:	4d18      	ldr	r5, [pc, #96]	; (d4e10 <_GLOBAL__sub_I___appProductID+0x6c>)
   d4db0:	2601      	movs	r6, #1
   d4db2:	701e      	strb	r6, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4db4:	f001 fca8 	bl	d6708 <spark_protocol_instance>
   d4db8:	4623      	mov	r3, r4
   d4dba:	4622      	mov	r2, r4
   d4dbc:	f642 7197 	movw	r1, #12183	; 0x2f97
   d4dc0:	f001 fcaa 	bl	d6718 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4dc4:	f001 fca0 	bl	d6708 <spark_protocol_instance>
   d4dc8:	4622      	mov	r2, r4
   d4dca:	4623      	mov	r3, r4
   d4dcc:	2102      	movs	r1, #2
   d4dce:	f001 fcab 	bl	d6728 <spark_protocol_set_product_firmware_version>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4dd2:	4810      	ldr	r0, [pc, #64]	; (d4e14 <_GLOBAL__sub_I___appProductID+0x70>)
   d4dd4:	f000 f82a 	bl	d4e2c <_ZN14Adafruit_SHT31C1Ev>
    SleepResult() {}
   d4dd8:	4b0f      	ldr	r3, [pc, #60]	; (d4e18 <_GLOBAL__sub_I___appProductID+0x74>)
   d4dda:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
   d4ddc:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4dde:	602c      	str	r4, [r5, #0]
   d4de0:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4de2:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4de4:	f000 fa8a 	bl	d52fc <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4de8:	4a0c      	ldr	r2, [pc, #48]	; (d4e1c <_GLOBAL__sub_I___appProductID+0x78>)
   d4dea:	490d      	ldr	r1, [pc, #52]	; (d4e20 <_GLOBAL__sub_I___appProductID+0x7c>)
   d4dec:	4628      	mov	r0, r5
   d4dee:	f001 fd61 	bl	d68b4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4df2:	4621      	mov	r1, r4
   d4df4:	4630      	mov	r0, r6
   d4df6:	f000 fa91 	bl	d531c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4dfa:	4631      	mov	r1, r6
   d4dfc:	2004      	movs	r0, #4
   d4dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4e02:	f000 b8f9 	b.w	d4ff8 <HAL_Feature_Set>
   d4e06:	bf00      	nop
   d4e08:	2003e4ac 	.word	0x2003e4ac
   d4e0c:	2003e4ad 	.word	0x2003e4ad
   d4e10:	2003e49c 	.word	0x2003e49c
   d4e14:	2003e578 	.word	0x2003e578
   d4e18:	ffff0000 	.word	0xffff0000
   d4e1c:	2003e498 	.word	0x2003e498
   d4e20:	000d40d1 	.word	0x000d40d1

000d4e24 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e24:	6803      	ldr	r3, [r0, #0]
   d4e26:	b2c9      	uxtb	r1, r1
   d4e28:	689b      	ldr	r3, [r3, #8]
   d4e2a:	4718      	bx	r3

000d4e2c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4e2c:	4770      	bx	lr

000d4e2e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4e2e:	b538      	push	{r3, r4, r5, lr}
   d4e30:	4605      	mov	r5, r0
   d4e32:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4e34:	f001 fd16 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4e38:	7829      	ldrb	r1, [r5, #0]
   d4e3a:	f000 ffa7 	bl	d5d8c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4e3e:	f001 fd11 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4e42:	0a21      	lsrs	r1, r4, #8
   d4e44:	f7ff ffee 	bl	d4e24 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4e48:	f001 fd0c 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4e4c:	b2e1      	uxtb	r1, r4
   d4e4e:	f7ff ffe9 	bl	d4e24 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4e52:	f001 fd07 	bl	d6864 <_Z19__fetch_global_Wirev>
}
   d4e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d4e5a:	f000 bf9f 	b.w	d5d9c <_ZN7TwoWire15endTransmissionEv>

000d4e5e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d4e5e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4e60:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4e64:	f7ff ffe3 	bl	d4e2e <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d4e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d4e6c:	200a      	movs	r0, #10
   d4e6e:	f000 bb7b 	b.w	d5568 <delay>

000d4e72 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4e72:	b538      	push	{r3, r4, r5, lr}
   d4e74:	4604      	mov	r4, r0
   d4e76:	460d      	mov	r5, r1
  Wire.begin();
   d4e78:	f001 fcf4 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4e7c:	f000 ff54 	bl	d5d28 <_ZN7TwoWire5beginEv>
  reset();
   d4e80:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d4e82:	7025      	strb	r5, [r4, #0]
  reset();
   d4e84:	f7ff ffeb 	bl	d4e5e <_ZN14Adafruit_SHT315resetEv>
}
   d4e88:	2001      	movs	r0, #1
   d4e8a:	bd38      	pop	{r3, r4, r5, pc}

000d4e8c <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d4e8c:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d4e8e:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d4e90:	4291      	cmp	r1, r2
   d4e92:	d00e      	beq.n	d4eb2 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4e94:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4e98:	4058      	eors	r0, r3
   d4e9a:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d4e9c:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4ea0:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d4ea4:	bf18      	it	ne
   d4ea6:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d4eaa:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d4eac:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d4eae:	d1f5      	bne.n	d4e9c <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4eb0:	e7ee      	b.n	d4e90 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d4eb2:	4770      	bx	lr
   d4eb4:	0000      	movs	r0, r0
	...

000d4eb8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d4eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d4eba:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d4ebe:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d4ec0:	f7ff ffb5 	bl	d4e2e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d4ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4ec8:	f000 fb4e 	bl	d5568 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4ecc:	f001 fcca 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4ed0:	7829      	ldrb	r1, [r5, #0]
   d4ed2:	2206      	movs	r2, #6
   d4ed4:	f000 ff57 	bl	d5d86 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4ed8:	f001 fcc4 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4edc:	6803      	ldr	r3, [r0, #0]
   d4ede:	691b      	ldr	r3, [r3, #16]
   d4ee0:	4798      	blx	r3
   d4ee2:	2806      	cmp	r0, #6
   d4ee4:	d14b      	bne.n	d4f7e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d4ee6:	466e      	mov	r6, sp
   d4ee8:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d4eea:	f001 fcbb 	bl	d6864 <_Z19__fetch_global_Wirev>
   d4eee:	6803      	ldr	r3, [r0, #0]
   d4ef0:	695b      	ldr	r3, [r3, #20]
   d4ef2:	4798      	blx	r3
   d4ef4:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d4ef6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d4efa:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d4efe:	4669      	mov	r1, sp
   d4f00:	d1f3      	bne.n	d4eea <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4f02:	2202      	movs	r2, #2
   d4f04:	4628      	mov	r0, r5
   d4f06:	f7ff ffc1 	bl	d4e8c <_ZN14Adafruit_SHT314crc8EPKhi>
   d4f0a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d4f0e:	4286      	cmp	r6, r0
   d4f10:	d135      	bne.n	d4f7e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4f12:	2202      	movs	r2, #2
   d4f14:	f10d 0103 	add.w	r1, sp, #3
   d4f18:	4628      	mov	r0, r5
   d4f1a:	f7ff ffb7 	bl	d4e8c <_ZN14Adafruit_SHT314crc8EPKhi>
   d4f1e:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d4f22:	4286      	cmp	r6, r0
   d4f24:	d12b      	bne.n	d4f7e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d4f26:	f8bd 0000 	ldrh.w	r0, [sp]
   d4f2a:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d4f2e:	ba40      	rev16	r0, r0
   d4f30:	b280      	uxth	r0, r0
   d4f32:	f001 fe0d 	bl	d6b50 <__aeabi_ui2d>
  stemp *= 175;
   d4f36:	a318      	add	r3, pc, #96	; (adr r3, d4f98 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f3c:	f001 fe82 	bl	d6c44 <__aeabi_dmul>
  stemp /= 0xffff;
   d4f40:	a311      	add	r3, pc, #68	; (adr r3, d4f88 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f46:	f001 ffa7 	bl	d6e98 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d4f4a:	4b11      	ldr	r3, [pc, #68]	; (d4f90 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4f4c:	2200      	movs	r2, #0
   d4f4e:	f001 fcc1 	bl	d68d4 <__aeabi_dsub>
  temp = stemp;
   d4f52:	f002 f931 	bl	d71b8 <__aeabi_d2f>
   d4f56:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d4f58:	ba60      	rev16	r0, r4
   d4f5a:	b280      	uxth	r0, r0
   d4f5c:	f001 fdf8 	bl	d6b50 <__aeabi_ui2d>
  shum *= 100;
   d4f60:	4b0c      	ldr	r3, [pc, #48]	; (d4f94 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4f62:	2200      	movs	r2, #0
   d4f64:	f001 fe6e 	bl	d6c44 <__aeabi_dmul>
  shum /= 0xFFFF;
   d4f68:	a307      	add	r3, pc, #28	; (adr r3, d4f88 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f6e:	f001 ff93 	bl	d6e98 <__aeabi_ddiv>
  humidity = shum;
   d4f72:	f002 f921 	bl	d71b8 <__aeabi_d2f>
   d4f76:	6068      	str	r0, [r5, #4]
  return true;
   d4f78:	2001      	movs	r0, #1
}
   d4f7a:	b002      	add	sp, #8
   d4f7c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4f7e:	2000      	movs	r0, #0
   d4f80:	e7fb      	b.n	d4f7a <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d4f82:	bf00      	nop
   d4f84:	f3af 8000 	nop.w
   d4f88:	00000000 	.word	0x00000000
   d4f8c:	40efffe0 	.word	0x40efffe0
   d4f90:	40468000 	.word	0x40468000
   d4f94:	40590000 	.word	0x40590000
   d4f98:	00000000 	.word	0x00000000
   d4f9c:	4065e000 	.word	0x4065e000

000d4fa0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d4fa0:	b510      	push	{r4, lr}
   d4fa2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4fa4:	f7ff ff88 	bl	d4eb8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4fa8:	b110      	cbz	r0, d4fb0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d4faa:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d4fae:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d4fb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4fb8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d4fb4:	e7fb      	b.n	d4fae <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d4fb6:	bf00      	nop
   d4fb8:	7fc00000 	.word	0x7fc00000

000d4fbc <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d4fbc:	b510      	push	{r4, lr}
   d4fbe:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4fc0:	f7ff ff7a 	bl	d4eb8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4fc4:	b110      	cbz	r0, d4fcc <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d4fc6:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d4fca:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d4fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4fd4 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d4fd0:	e7fb      	b.n	d4fca <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d4fd2:	bf00      	nop
   d4fd4:	7fc00000 	.word	0x7fc00000

000d4fd8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <os_mutex_recursive_create+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	00030248 	.word	0x00030248

000d4fe8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <os_mutex_recursive_destroy+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030248 	.word	0x00030248

000d4ff8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <HAL_Feature_Set+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030234 	.word	0x00030234

000d5008 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <HAL_RNG_GetRandomNumber+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	685b      	ldr	r3, [r3, #4]
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	00030218 	.word	0x00030218

000d5018 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <HAL_Delay_Microseconds+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	68db      	ldr	r3, [r3, #12]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	00030218 	.word	0x00030218

000d5028 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	695b      	ldr	r3, [r3, #20]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	00030218 	.word	0x00030218

000d5038 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <HAL_EEPROM_Init+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	00030218 	.word	0x00030218

000d5048 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <HAL_EEPROM_Write+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	00030218 	.word	0x00030218

000d5058 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <HAL_EEPROM_Get+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	00030218 	.word	0x00030218

000d5068 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <HAL_EEPROM_Put+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	00030218 	.word	0x00030218

000d5078 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <hal_rtc_time_is_valid+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	00030218 	.word	0x00030218

000d5088 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <hal_timer_millis+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030218 	.word	0x00030218

000d5098 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <hal_rtc_get_time+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030218 	.word	0x00030218

000d50a8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <HAL_Pin_Mode+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	689b      	ldr	r3, [r3, #8]
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	0003022c 	.word	0x0003022c

000d50b8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <HAL_Get_Pin_Mode+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	68db      	ldr	r3, [r3, #12]
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	0003022c 	.word	0x0003022c

000d50c8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <HAL_GPIO_Write+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	691b      	ldr	r3, [r3, #16]
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	0003022c 	.word	0x0003022c

000d50d8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <hal_i2c_begin+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	68db      	ldr	r3, [r3, #12]
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030228 	.word	0x00030228

000d50e8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <hal_i2c_begin_transmission+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	699b      	ldr	r3, [r3, #24]
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030228 	.word	0x00030228

000d50f8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <hal_i2c_end_transmission+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	69db      	ldr	r3, [r3, #28]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	00030228 	.word	0x00030228

000d5108 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <hal_i2c_write+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	6a1b      	ldr	r3, [r3, #32]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	00030228 	.word	0x00030228

000d5118 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <hal_i2c_available+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	00030228 	.word	0x00030228

000d5128 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <hal_i2c_read+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	00030228 	.word	0x00030228

000d5138 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <hal_i2c_peek+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030228 	.word	0x00030228

000d5148 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <hal_i2c_flush+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030228 	.word	0x00030228

000d5158 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <hal_i2c_is_enabled+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	00030228 	.word	0x00030228

000d5168 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <hal_i2c_init+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030228 	.word	0x00030228

000d5178 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <hal_i2c_request_ex+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	00030228 	.word	0x00030228

000d5188 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <inet_inet_ntop+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	695b      	ldr	r3, [r3, #20]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030264 	.word	0x00030264

000d5198 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <netdb_freeaddrinfo+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	689b      	ldr	r3, [r3, #8]
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	00030268 	.word	0x00030268

000d51a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <netdb_getaddrinfo+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	68db      	ldr	r3, [r3, #12]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	00030268 	.word	0x00030268

000d51b8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <hal_spi_init+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	69db      	ldr	r3, [r3, #28]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	00030230 	.word	0x00030230

000d51c8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <hal_spi_is_enabled+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	6a1b      	ldr	r3, [r3, #32]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	00030230 	.word	0x00030230

000d51d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <hal_usart_init+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	681b      	ldr	r3, [r3, #0]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	0003023c 	.word	0x0003023c

000d51e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <hal_usart_write+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	68db      	ldr	r3, [r3, #12]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	0003023c 	.word	0x0003023c

000d51f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <hal_usart_available+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	691b      	ldr	r3, [r3, #16]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	0003023c 	.word	0x0003023c

000d5208 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <hal_usart_read+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	695b      	ldr	r3, [r3, #20]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	0003023c 	.word	0x0003023c

000d5218 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <hal_usart_peek+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	699b      	ldr	r3, [r3, #24]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	0003023c 	.word	0x0003023c

000d5228 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <hal_usart_flush+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	69db      	ldr	r3, [r3, #28]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	0003023c 	.word	0x0003023c

000d5238 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <hal_usart_is_enabled+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	6a1b      	ldr	r3, [r3, #32]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	0003023c 	.word	0x0003023c

000d5248 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <hal_usart_available_data_for_write+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	0003023c 	.word	0x0003023c

000d5258 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <HAL_USB_USART_Init+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	681b      	ldr	r3, [r3, #0]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	0003024c 	.word	0x0003024c

000d5268 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <HAL_USB_USART_Begin+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	685b      	ldr	r3, [r3, #4]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	0003024c 	.word	0x0003024c

000d5278 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <HAL_USB_USART_Available_Data+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	691b      	ldr	r3, [r3, #16]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	0003024c 	.word	0x0003024c

000d5288 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	695b      	ldr	r3, [r3, #20]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	0003024c 	.word	0x0003024c

000d5298 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_USB_USART_Receive_Data+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	699b      	ldr	r3, [r3, #24]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	0003024c 	.word	0x0003024c

000d52a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_USB_USART_Send_Data+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	69db      	ldr	r3, [r3, #28]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	0003024c 	.word	0x0003024c

000d52b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <HAL_USB_USART_Flush_Data+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	6a1b      	ldr	r3, [r3, #32]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	0003024c 	.word	0x0003024c

000d52c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <panic_+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030260 	.word	0x00030260

000d52d8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b03      	ldr	r3, [pc, #12]	; (d52e8 <diag_get_source+0x10>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d52e2:	9301      	str	r3, [sp, #4]
   d52e4:	bd08      	pop	{r3, pc}
   d52e6:	0000      	.short	0x0000
   d52e8:	00030260 	.word	0x00030260

000d52ec <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <system_mode+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	681b      	ldr	r3, [r3, #0]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030220 	.word	0x00030220

000d52fc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <set_system_mode+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	685b      	ldr	r3, [r3, #4]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030220 	.word	0x00030220

000d530c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <system_delay_ms+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	695b      	ldr	r3, [r3, #20]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030220 	.word	0x00030220

000d531c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <system_thread_set_state+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030220 	.word	0x00030220

000d532c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <application_thread_current+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030220 	.word	0x00030220

000d533c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <application_thread_invoke+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030220 	.word	0x00030220

000d534c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <system_thread_get_state+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030220 	.word	0x00030220

000d535c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b03      	ldr	r3, [pc, #12]	; (d536c <system_ctrl_set_app_request_handler+0x10>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5366:	9301      	str	r3, [sp, #4]
   d5368:	bd08      	pop	{r3, pc}
   d536a:	0000      	.short	0x0000
   d536c:	00030220 	.word	0x00030220

000d5370 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b03      	ldr	r3, [pc, #12]	; (d5380 <system_ctrl_set_result+0x10>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d537a:	9301      	str	r3, [sp, #4]
   d537c:	bd08      	pop	{r3, pc}
   d537e:	0000      	.short	0x0000
   d5380:	00030220 	.word	0x00030220

000d5384 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b03      	ldr	r3, [pc, #12]	; (d5394 <system_reset+0x10>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d538e:	9301      	str	r3, [sp, #4]
   d5390:	bd08      	pop	{r3, pc}
   d5392:	0000      	.short	0x0000
   d5394:	00030220 	.word	0x00030220

000d5398 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <spark_variable+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	681b      	ldr	r3, [r3, #0]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	00030244 	.word	0x00030244

000d53a8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <spark_function+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	685b      	ldr	r3, [r3, #4]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	00030244 	.word	0x00030244

000d53b8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <spark_process+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	689b      	ldr	r3, [r3, #8]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	00030244 	.word	0x00030244

000d53c8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <spark_cloud_flag_connect+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	68db      	ldr	r3, [r3, #12]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030244 	.word	0x00030244

000d53d8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <spark_cloud_flag_connected+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	695b      	ldr	r3, [r3, #20]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030244 	.word	0x00030244

000d53e8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <spark_deviceID+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	69db      	ldr	r3, [r3, #28]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030244 	.word	0x00030244

000d53f8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <spark_send_event+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	6a1b      	ldr	r3, [r3, #32]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030244 	.word	0x00030244

000d5408 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <spark_subscribe+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030244 	.word	0x00030244

000d5418 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <spark_sync_time+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030244 	.word	0x00030244

000d5428 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <spark_sync_time_pending+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030244 	.word	0x00030244

000d5438 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <spark_set_random_seed_from_cloud_handler+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030244 	.word	0x00030244

000d5448 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <network_connect+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	685b      	ldr	r3, [r3, #4]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030240 	.word	0x00030240

000d5458 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <network_connecting+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	689b      	ldr	r3, [r3, #8]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030240 	.word	0x00030240

000d5468 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <network_disconnect+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	68db      	ldr	r3, [r3, #12]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030240 	.word	0x00030240

000d5478 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <network_ready+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	691b      	ldr	r3, [r3, #16]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030240 	.word	0x00030240

000d5488 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <network_on+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	695b      	ldr	r3, [r3, #20]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030240 	.word	0x00030240

000d5498 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <network_off+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	699b      	ldr	r3, [r3, #24]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030240 	.word	0x00030240

000d54a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <network_listen+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	69db      	ldr	r3, [r3, #28]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030240 	.word	0x00030240

000d54b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <network_listening+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6a1b      	ldr	r3, [r3, #32]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030240 	.word	0x00030240

000d54c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <network_set_listen_timeout+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030240 	.word	0x00030240

000d54d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <network_get_listen_timeout+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030240 	.word	0x00030240

000d54e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <malloc+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	681b      	ldr	r3, [r3, #0]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	0003021c 	.word	0x0003021c

000d54f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <free+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	685b      	ldr	r3, [r3, #4]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	0003021c 	.word	0x0003021c

000d5508 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <realloc+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	689b      	ldr	r3, [r3, #8]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	0003021c 	.word	0x0003021c

000d5518 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <snprintf+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	69db      	ldr	r3, [r3, #28]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	0003021c 	.word	0x0003021c

000d5528 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <abort+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	0003021c 	.word	0x0003021c

000d5538 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <_malloc_r+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	0003021c 	.word	0x0003021c

000d5548 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <newlib_impure_ptr_callback+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003021c 	.word	0x0003021c

000d5558 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <localtime_r+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003021c 	.word	0x0003021c

000d5568 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5568:	2100      	movs	r1, #0
   d556a:	f7ff becf 	b.w	d530c <system_delay_ms>

000d556e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d556e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5570:	6883      	ldr	r3, [r0, #8]
   d5572:	4604      	mov	r4, r0
   d5574:	b90b      	cbnz	r3, d557a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5576:	f001 f9a6 	bl	d68c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d557a:	68c3      	ldr	r3, [r0, #12]
   d557c:	4798      	blx	r3
      if (_M_manager)
   d557e:	68a3      	ldr	r3, [r4, #8]
   d5580:	b11b      	cbz	r3, d558a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5582:	2203      	movs	r2, #3
   d5584:	4621      	mov	r1, r4
   d5586:	4620      	mov	r0, r4
   d5588:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d558a:	4620      	mov	r0, r4
   d558c:	2110      	movs	r1, #16
}
   d558e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5592:	f001 b994 	b.w	d68be <_ZdlPvj>

000d5596 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5596:	b510      	push	{r4, lr}
   d5598:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d559a:	6800      	ldr	r0, [r0, #0]
   d559c:	b108      	cbz	r0, d55a2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d559e:	f7ff fd23 	bl	d4fe8 <os_mutex_recursive_destroy>
    }
   d55a2:	4620      	mov	r0, r4
   d55a4:	bd10      	pop	{r4, pc}

000d55a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d55a6:	680b      	ldr	r3, [r1, #0]
   d55a8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d55aa:	b113      	cbz	r3, d55b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d55ac:	685a      	ldr	r2, [r3, #4]
   d55ae:	3201      	adds	r2, #1
   d55b0:	605a      	str	r2, [r3, #4]
      }
   d55b2:	4770      	bx	lr

000d55b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d55b4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d55b6:	4c06      	ldr	r4, [pc, #24]	; (d55d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d55b8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d55ba:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d55bc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d55be:	f7ff fd0b 	bl	d4fd8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d55c2:	4620      	mov	r0, r4
   d55c4:	4a03      	ldr	r2, [pc, #12]	; (d55d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d55c6:	4904      	ldr	r1, [pc, #16]	; (d55d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d55c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d55cc:	f001 b972 	b.w	d68b4 <__aeabi_atexit>
   d55d0:	2003e5d8 	.word	0x2003e5d8
   d55d4:	2003e498 	.word	0x2003e498
   d55d8:	000d5597 	.word	0x000d5597

000d55dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d55dc:	2200      	movs	r2, #0
   d55de:	6840      	ldr	r0, [r0, #4]
   d55e0:	4611      	mov	r1, r2
   d55e2:	f7ff bf49 	b.w	d5478 <network_ready>

000d55e6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d55e6:	2200      	movs	r2, #0
   d55e8:	6840      	ldr	r0, [r0, #4]
   d55ea:	4611      	mov	r1, r2
   d55ec:	f7ff bf64 	b.w	d54b8 <network_listening>

000d55f0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55f0:	2200      	movs	r2, #0
   d55f2:	6840      	ldr	r0, [r0, #4]
   d55f4:	4611      	mov	r1, r2
   d55f6:	f7ff bf6f 	b.w	d54d8 <network_get_listen_timeout>

000d55fa <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	2200      	movs	r2, #0
   d55fe:	f7ff bf63 	b.w	d54c8 <network_set_listen_timeout>

000d5602 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5602:	6840      	ldr	r0, [r0, #4]
   d5604:	2200      	movs	r2, #0
   d5606:	f081 0101 	eor.w	r1, r1, #1
   d560a:	f7ff bf4d 	b.w	d54a8 <network_listen>

000d560e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d560e:	2300      	movs	r3, #0
   d5610:	6840      	ldr	r0, [r0, #4]
   d5612:	461a      	mov	r2, r3
   d5614:	4619      	mov	r1, r3
   d5616:	f7ff bf3f 	b.w	d5498 <network_off>

000d561a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d561a:	2300      	movs	r3, #0
   d561c:	6840      	ldr	r0, [r0, #4]
   d561e:	461a      	mov	r2, r3
   d5620:	4619      	mov	r1, r3
   d5622:	f7ff bf31 	b.w	d5488 <network_on>

000d5626 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5626:	2200      	movs	r2, #0
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	4611      	mov	r1, r2
   d562c:	f7ff bf14 	b.w	d5458 <network_connecting>

000d5630 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5630:	6840      	ldr	r0, [r0, #4]
   d5632:	2200      	movs	r2, #0
   d5634:	2102      	movs	r1, #2
   d5636:	f7ff bf17 	b.w	d5468 <network_disconnect>

000d563a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d563a:	2300      	movs	r3, #0
   d563c:	6840      	ldr	r0, [r0, #4]
   d563e:	461a      	mov	r2, r3
   d5640:	f7ff bf02 	b.w	d5448 <network_connect>

000d5644 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5644:	4b08      	ldr	r3, [pc, #32]	; (d5668 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5646:	b510      	push	{r4, lr}
   d5648:	2428      	movs	r4, #40	; 0x28
   d564a:	4622      	mov	r2, r4
   d564c:	4618      	mov	r0, r3
   d564e:	2100      	movs	r1, #0
   d5650:	f001 fe44 	bl	d72dc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5654:	4b05      	ldr	r3, [pc, #20]	; (d566c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5656:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d565c:	6042      	str	r2, [r0, #4]
   d565e:	2204      	movs	r2, #4
   d5660:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5662:	4a03      	ldr	r2, [pc, #12]	; (d5670 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5664:	601a      	str	r2, [r3, #0]
   d5666:	bd10      	pop	{r4, pc}
   d5668:	2003e5e4 	.word	0x2003e5e4
   d566c:	2003e5dc 	.word	0x2003e5dc
   d5670:	000d9528 	.word	0x000d9528

000d5674 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5674:	4770      	bx	lr

000d5676 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5676:	2000      	movs	r0, #0
   d5678:	4770      	bx	lr

000d567a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d567a:	b510      	push	{r4, lr}
   d567c:	2110      	movs	r1, #16
   d567e:	4604      	mov	r4, r0
   d5680:	f001 f91d 	bl	d68be <_ZdlPvj>
   d5684:	4620      	mov	r0, r4
   d5686:	bd10      	pop	{r4, pc}

000d5688 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5688:	b508      	push	{r3, lr}
      { delete this; }
   d568a:	f7ff fff6 	bl	d567a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d568e:	bd08      	pop	{r3, pc}

000d5690 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5690:	b510      	push	{r4, lr}
      if (_M_manager)
   d5692:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5694:	4604      	mov	r4, r0
      if (_M_manager)
   d5696:	b113      	cbz	r3, d569e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5698:	2203      	movs	r2, #3
   d569a:	4601      	mov	r1, r0
   d569c:	4798      	blx	r3
    }
   d569e:	4620      	mov	r0, r4
   d56a0:	bd10      	pop	{r4, pc}

000d56a2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d56a2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d56a4:	2200      	movs	r2, #0
   d56a6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d56aa:	6002      	str	r2, [r0, #0]
   d56ac:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56ae:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d56b0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d56b2:	680c      	ldr	r4, [r1, #0]
   d56b4:	8085      	strh	r5, [r0, #4]
   d56b6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d56b8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d56ba:	bd30      	pop	{r4, r5, pc}

000d56bc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d56bc:	b510      	push	{r4, lr}
   d56be:	4604      	mov	r4, r0
    free((void*)msg_);
   d56c0:	6800      	ldr	r0, [r0, #0]
   d56c2:	f7ff ff19 	bl	d54f8 <free>
}
   d56c6:	4620      	mov	r0, r4
   d56c8:	bd10      	pop	{r4, pc}

000d56ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d56ca:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d56cc:	68c4      	ldr	r4, [r0, #12]
   d56ce:	b1f4      	cbz	r4, d570e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d56d0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d56d2:	2b02      	cmp	r3, #2
   d56d4:	d103      	bne.n	d56de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d56d6:	f104 000c 	add.w	r0, r4, #12
   d56da:	f7ff ffef 	bl	d56bc <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d56de:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d56e0:	b135      	cbz	r5, d56f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d56e2:	4628      	mov	r0, r5
   d56e4:	f7ff ffd4 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
   d56e8:	2110      	movs	r1, #16
   d56ea:	4628      	mov	r0, r5
   d56ec:	f001 f8e7 	bl	d68be <_ZdlPvj>
   d56f0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d56f2:	b135      	cbz	r5, d5702 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d56f4:	4628      	mov	r0, r5
   d56f6:	f7ff ffcb 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
   d56fa:	2110      	movs	r1, #16
   d56fc:	4628      	mov	r0, r5
   d56fe:	f001 f8de 	bl	d68be <_ZdlPvj>
   d5702:	4620      	mov	r0, r4
   d5704:	2114      	movs	r1, #20
   d5706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d570a:	f001 b8d8 	b.w	d68be <_ZdlPvj>
   d570e:	bd38      	pop	{r3, r4, r5, pc}

000d5710 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5710:	b510      	push	{r4, lr}
   d5712:	b088      	sub	sp, #32
   d5714:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5716:	4668      	mov	r0, sp
   d5718:	f000 fd2f 	bl	d617a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d571c:	4669      	mov	r1, sp
   d571e:	a804      	add	r0, sp, #16
   d5720:	f000 fd4e 	bl	d61c0 <_ZN6StringC1ERKS_>
   d5724:	a804      	add	r0, sp, #16
   d5726:	47a0      	blx	r4
   d5728:	4604      	mov	r4, r0
   d572a:	a804      	add	r0, sp, #16
   d572c:	f000 fcda 	bl	d60e4 <_ZN6StringD1Ev>
    String p(param);
   d5730:	4668      	mov	r0, sp
   d5732:	f000 fcd7 	bl	d60e4 <_ZN6StringD1Ev>
}
   d5736:	4620      	mov	r0, r4
   d5738:	b008      	add	sp, #32
   d573a:	bd10      	pop	{r4, pc}

000d573c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d573c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d573e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d5740:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d5744:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d5746:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5748:	461a      	mov	r2, r3
   d574a:	4669      	mov	r1, sp
   d574c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d574e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d5752:	f8ad 4000 	strh.w	r4, [sp]
   d5756:	f7ff fe27 	bl	d53a8 <spark_function>
}
   d575a:	b004      	add	sp, #16
   d575c:	bd10      	pop	{r4, pc}

000d575e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d575e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5760:	460e      	mov	r6, r1
   d5762:	4604      	mov	r4, r0
   d5764:	f856 3b04 	ldr.w	r3, [r6], #4
   d5768:	9300      	str	r3, [sp, #0]
   d576a:	460d      	mov	r5, r1
   d576c:	a801      	add	r0, sp, #4
   d576e:	4631      	mov	r1, r6
   d5770:	f7ff ff19 	bl	d55a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5774:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5776:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5778:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d577a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d577c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d577e:	2300      	movs	r3, #0
   d5780:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5782:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5784:	f7fe fda6 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5788:	4630      	mov	r0, r6
   d578a:	f7fe fda3 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d578e:	4628      	mov	r0, r5
   d5790:	2108      	movs	r1, #8
   d5792:	f001 f894 	bl	d68be <_ZdlPvj>
        return p;
    }
   d5796:	4620      	mov	r0, r4
   d5798:	b002      	add	sp, #8
   d579a:	bd70      	pop	{r4, r5, r6, pc}

000d579c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d579c:	b513      	push	{r0, r1, r4, lr}
   d579e:	460b      	mov	r3, r1
   d57a0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57a2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d57a6:	466c      	mov	r4, sp
   d57a8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d57ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d57b0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d57b4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d57b8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d57bc:	b002      	add	sp, #8
   d57be:	bd10      	pop	{r4, pc}

000d57c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d57c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d57c2:	b510      	push	{r4, lr}
      if (_M_empty())
   d57c4:	b90a      	cbnz	r2, d57ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d57c6:	f001 f87e 	bl	d68c6 <_ZSt25__throw_bad_function_callv>
    }
   d57ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57ce:	68c3      	ldr	r3, [r0, #12]
   d57d0:	4718      	bx	r3

000d57d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d57d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d57d4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d57d6:	f100 0110 	add.w	r1, r0, #16
   d57da:	f7ff fff1 	bl	d57c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d57de:	bd08      	pop	{r3, pc}

000d57e0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d57e0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d57e2:	b510      	push	{r4, lr}
      if (_M_empty())
   d57e4:	b90a      	cbnz	r2, d57ea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d57e6:	f001 f86e 	bl	d68c6 <_ZSt25__throw_bad_function_callv>
    }
   d57ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57ee:	68c3      	ldr	r3, [r0, #12]
   d57f0:	4718      	bx	r3

000d57f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d57f2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d57f4:	6800      	ldr	r0, [r0, #0]
   d57f6:	f100 0110 	add.w	r1, r0, #16
   d57fa:	f7ff fff1 	bl	d57e0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d57fe:	bd08      	pop	{r3, pc}

000d5800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5800:	b538      	push	{r3, r4, r5, lr}
   d5802:	2300      	movs	r3, #0
   d5804:	4604      	mov	r4, r0
   d5806:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5808:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d580a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d580c:	f7fe fc43 	bl	d4096 <_Znwj>
   d5810:	b128      	cbz	r0, d581e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5812:	2301      	movs	r3, #1
   d5814:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5818:	4b02      	ldr	r3, [pc, #8]	; (d5824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d581a:	6003      	str	r3, [r0, #0]
   d581c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d581e:	6020      	str	r0, [r4, #0]
	}
   d5820:	4620      	mov	r0, r4
   d5822:	bd38      	pop	{r3, r4, r5, pc}
   d5824:	000d955c 	.word	0x000d955c

000d5828 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5828:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d582a:	2300      	movs	r3, #0
   d582c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d582e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5830:	4604      	mov	r4, r0
   d5832:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5834:	b12b      	cbz	r3, d5842 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5836:	2202      	movs	r2, #2
   d5838:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d583a:	68eb      	ldr	r3, [r5, #12]
   d583c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d583e:	68ab      	ldr	r3, [r5, #8]
   d5840:	60a3      	str	r3, [r4, #8]
    }
   d5842:	4620      	mov	r0, r4
   d5844:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5848:	b5f0      	push	{r4, r5, r6, r7, lr}
   d584a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d584c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d584e:	4668      	mov	r0, sp
   d5850:	f7ff ff27 	bl	d56a2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5854:	f04f 0302 	mov.w	r3, #2
   d5858:	e8d4 2f4f 	ldrexb	r2, [r4]
   d585c:	2a00      	cmp	r2, #0
   d585e:	d103      	bne.n	d5868 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5860:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5864:	2900      	cmp	r1, #0
   d5866:	d1f7      	bne.n	d5858 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5868:	d125      	bne.n	d58b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d586a:	f104 050c 	add.w	r5, r4, #12
   d586e:	4669      	mov	r1, sp
   d5870:	4628      	mov	r0, r5
   d5872:	f7ff ff16 	bl	d56a2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5876:	f3bf 8f5b 	dmb	ish
   d587a:	2301      	movs	r3, #1
   d587c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d587e:	2000      	movs	r0, #0
   d5880:	f104 0308 	add.w	r3, r4, #8
   d5884:	f3bf 8f5b 	dmb	ish
   d5888:	e853 6f00 	ldrex	r6, [r3]
   d588c:	e843 0200 	strex	r2, r0, [r3]
   d5890:	2a00      	cmp	r2, #0
   d5892:	d1f9      	bne.n	d5888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5894:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5898:	b16e      	cbz	r6, d58b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d589a:	f7ff fd47 	bl	d532c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d589e:	b178      	cbz	r0, d58c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d58a0:	4629      	mov	r1, r5
   d58a2:	4630      	mov	r0, r6
   d58a4:	f7ff ff8c 	bl	d57c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d58a8:	4630      	mov	r0, r6
   d58aa:	f7ff fef1 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d58ae:	2110      	movs	r1, #16
   d58b0:	4630      	mov	r0, r6
   d58b2:	f001 f804 	bl	d68be <_ZdlPvj>
        p_->setError(std::move(error));
   d58b6:	4668      	mov	r0, sp
   d58b8:	f7ff ff00 	bl	d56bc <_ZN8particle5ErrorD1Ev>
    }
   d58bc:	b009      	add	sp, #36	; 0x24
   d58be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d58c0:	4631      	mov	r1, r6
   d58c2:	a802      	add	r0, sp, #8
   d58c4:	f7ff ffb0 	bl	d5828 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d58c8:	68e0      	ldr	r0, [r4, #12]
   d58ca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d58ce:	b108      	cbz	r0, d58d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d58d0:	f001 fd42 	bl	d7358 <strdup>
        type_(type) {
   d58d4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d58d6:	2010      	movs	r0, #16
   d58d8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d58dc:	f7fe fbdb 	bl	d4096 <_Znwj>
   d58e0:	4605      	mov	r5, r0
   d58e2:	b1e8      	cbz	r0, d5920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d58e4:	2700      	movs	r7, #0
   d58e6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58e8:	2018      	movs	r0, #24
   d58ea:	f7fe fbd4 	bl	d4096 <_Znwj>
   d58ee:	4604      	mov	r4, r0
   d58f0:	b188      	cbz	r0, d5916 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d58f2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d58f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d58f6:	a802      	add	r0, sp, #8
   d58f8:	f7ff ff50 	bl	d579c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58fc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d58fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5900:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5902:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5904:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5906:	a906      	add	r1, sp, #24
   d5908:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d590a:	60e3      	str	r3, [r4, #12]
   d590c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5910:	9205      	str	r2, [sp, #20]
   d5912:	f7ff fec6 	bl	d56a2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5916:	4b08      	ldr	r3, [pc, #32]	; (d5938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5918:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d591a:	4b08      	ldr	r3, [pc, #32]	; (d593c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d591c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d591e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5920:	a806      	add	r0, sp, #24
   d5922:	f7ff fecb 	bl	d56bc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5926:	a802      	add	r0, sp, #8
   d5928:	f7ff feb2 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d592c:	2200      	movs	r2, #0
   d592e:	4629      	mov	r1, r5
   d5930:	4803      	ldr	r0, [pc, #12]	; (d5940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5932:	f7ff fd03 	bl	d533c <application_thread_invoke>
   d5936:	e7b7      	b.n	d58a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5938:	000d57d3 	.word	0x000d57d3
   d593c:	000d5a69 	.word	0x000d5a69
   d5940:	000d556f 	.word	0x000d556f

000d5944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5948:	b08a      	sub	sp, #40	; 0x28
   d594a:	4605      	mov	r5, r0
   d594c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5950:	460c      	mov	r4, r1
   d5952:	4617      	mov	r7, r2
   d5954:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5956:	f7ff fd3f 	bl	d53d8 <spark_cloud_flag_connected>
   d595a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d595c:	4682      	mov	sl, r0
   d595e:	bb38      	cbnz	r0, d59b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5960:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5964:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5966:	a905      	add	r1, sp, #20
   d5968:	4630      	mov	r0, r6
   d596a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d596e:	f7ff fe98 	bl	d56a2 <_ZN8particle5ErrorC1EOS0_>
   d5972:	2014      	movs	r0, #20
   d5974:	f7fe fb8f 	bl	d4096 <_Znwj>
   d5978:	4604      	mov	r4, r0
   d597a:	b148      	cbz	r0, d5990 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d597c:	2302      	movs	r3, #2
   d597e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5980:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5982:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5986:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5988:	4631      	mov	r1, r6
   d598a:	300c      	adds	r0, #12
   d598c:	f7ff fe89 	bl	d56a2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5990:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5992:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5994:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5998:	f7ff ff32 	bl	d5800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d599c:	4630      	mov	r0, r6
   d599e:	f7ff fe8d 	bl	d56bc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d59a2:	a805      	add	r0, sp, #20
   d59a4:	f7ff fe8a 	bl	d56bc <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d59a8:	4628      	mov	r0, r5
   d59aa:	b00a      	add	sp, #40	; 0x28
   d59ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d59b0:	230c      	movs	r3, #12
   d59b2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d59b6:	2014      	movs	r0, #20
   d59b8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d59bc:	9307      	str	r3, [sp, #28]
   d59be:	f7fe fb6a 	bl	d4096 <_Znwj>
   d59c2:	4601      	mov	r1, r0
   d59c4:	b128      	cbz	r0, d59d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d59c6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d59ca:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d59ce:	f880 a001 	strb.w	sl, [r0, #1]
   d59d2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d59d4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d59d6:	f7ff ff13 	bl	d5800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d59da:	4b22      	ldr	r3, [pc, #136]	; (d5a64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d59dc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d59de:	2008      	movs	r0, #8
   d59e0:	f7fe fb59 	bl	d4096 <_Znwj>
   d59e4:	4682      	mov	sl, r0
   d59e6:	b128      	cbz	r0, d59f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59e8:	9b03      	ldr	r3, [sp, #12]
   d59ea:	f840 3b04 	str.w	r3, [r0], #4
   d59ee:	a904      	add	r1, sp, #16
   d59f0:	f7ff fdd9 	bl	d55a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d59f4:	9600      	str	r6, [sp, #0]
   d59f6:	fa5f f389 	uxtb.w	r3, r9
   d59fa:	4642      	mov	r2, r8
   d59fc:	4639      	mov	r1, r7
   d59fe:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5a00:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5a04:	f7ff fcf8 	bl	d53f8 <spark_send_event>
   d5a08:	b9b8      	cbnz	r0, d5a3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5a0a:	9b03      	ldr	r3, [sp, #12]
   d5a0c:	785b      	ldrb	r3, [r3, #1]
   d5a0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5a12:	b993      	cbnz	r3, d5a3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5a14:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5a18:	a905      	add	r1, sp, #20
   d5a1a:	a803      	add	r0, sp, #12
   d5a1c:	9205      	str	r2, [sp, #20]
   d5a1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a22:	f7ff ff11 	bl	d5848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5a26:	a805      	add	r0, sp, #20
   d5a28:	f7ff fe48 	bl	d56bc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5a2c:	a805      	add	r0, sp, #20
   d5a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5a30:	f7ff fe95 	bl	d575e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5a34:	a806      	add	r0, sp, #24
   d5a36:	f7fe fc4d 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5a3a:	9b03      	ldr	r3, [sp, #12]
   d5a3c:	9305      	str	r3, [sp, #20]
   d5a3e:	a904      	add	r1, sp, #16
   d5a40:	a806      	add	r0, sp, #24
   d5a42:	f7ff fdb0 	bl	d55a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5a46:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a48:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5a4a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5a4c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5a4e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5a50:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5a52:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5a54:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5a56:	f7fe fc3d 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a5a:	a804      	add	r0, sp, #16
   d5a5c:	f7fe fc3a 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5a60:	e7a2      	b.n	d59a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5a62:	bf00      	nop
   d5a64:	000d5b2d 	.word	0x000d5b2d

000d5a68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5a68:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a6c:	4605      	mov	r5, r0
	  switch (__op)
   d5a6e:	d007      	beq.n	d5a80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5a70:	2a03      	cmp	r2, #3
   d5a72:	d018      	beq.n	d5aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5a74:	2a01      	cmp	r2, #1
   d5a76:	d101      	bne.n	d5a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5a78:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5a7a:	6003      	str	r3, [r0, #0]
	}
   d5a7c:	2000      	movs	r0, #0
   d5a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5a80:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5a82:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5a84:	f7fe fb07 	bl	d4096 <_Znwj>
   d5a88:	4604      	mov	r4, r0
   d5a8a:	b150      	cbz	r0, d5aa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5a8c:	4631      	mov	r1, r6
   d5a8e:	f7ff fecb 	bl	d5828 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5a92:	6930      	ldr	r0, [r6, #16]
   d5a94:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5a98:	b108      	cbz	r0, d5a9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5a9a:	f001 fc5d 	bl	d7358 <strdup>
        type_(type) {
   d5a9e:	6120      	str	r0, [r4, #16]
   d5aa0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5aa2:	602c      	str	r4, [r5, #0]
	}
   d5aa4:	e7ea      	b.n	d5a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5aa6:	6804      	ldr	r4, [r0, #0]
   d5aa8:	2c00      	cmp	r4, #0
   d5aaa:	d0e7      	beq.n	d5a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5aac:	f104 0010 	add.w	r0, r4, #16
   d5ab0:	f7ff fe04 	bl	d56bc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	f7ff fdeb 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5aba:	2118      	movs	r1, #24
   d5abc:	4620      	mov	r0, r4
   d5abe:	f000 fefe 	bl	d68be <_ZdlPvj>
   d5ac2:	e7db      	b.n	d5a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5ac4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5ac4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5ac6:	2300      	movs	r3, #0
   d5ac8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5aca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5acc:	4604      	mov	r4, r0
   d5ace:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5ad0:	b12b      	cbz	r3, d5ade <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ad2:	2202      	movs	r2, #2
   d5ad4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ad6:	68eb      	ldr	r3, [r5, #12]
   d5ad8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ada:	68ab      	ldr	r3, [r5, #8]
   d5adc:	60a3      	str	r3, [r4, #8]
    }
   d5ade:	4620      	mov	r0, r4
   d5ae0:	bd38      	pop	{r3, r4, r5, pc}

000d5ae2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5ae2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5ae4:	b570      	push	{r4, r5, r6, lr}
   d5ae6:	4604      	mov	r4, r0
	  switch (__op)
   d5ae8:	d007      	beq.n	d5afa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5aea:	2a03      	cmp	r2, #3
   d5aec:	d012      	beq.n	d5b14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5aee:	2a01      	cmp	r2, #1
   d5af0:	d101      	bne.n	d5af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5af2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5af4:	6003      	str	r3, [r0, #0]
	}
   d5af6:	2000      	movs	r0, #0
   d5af8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5afa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5afc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5afe:	f7fe faca 	bl	d4096 <_Znwj>
   d5b02:	4605      	mov	r5, r0
   d5b04:	b120      	cbz	r0, d5b10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5b06:	4631      	mov	r1, r6
   d5b08:	f7ff ffdc 	bl	d5ac4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5b0c:	7c33      	ldrb	r3, [r6, #16]
   d5b0e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5b10:	6025      	str	r5, [r4, #0]
	}
   d5b12:	e7f0      	b.n	d5af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5b14:	6804      	ldr	r4, [r0, #0]
   d5b16:	2c00      	cmp	r4, #0
   d5b18:	d0ed      	beq.n	d5af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	f7ff fdb8 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5b20:	2114      	movs	r1, #20
   d5b22:	4620      	mov	r0, r4
   d5b24:	f000 fecb 	bl	d68be <_ZdlPvj>
   d5b28:	e7e5      	b.n	d5af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5b2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b2e:	b089      	sub	sp, #36	; 0x24
   d5b30:	4604      	mov	r4, r0
   d5b32:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5b34:	a801      	add	r0, sp, #4
   d5b36:	4611      	mov	r1, r2
   d5b38:	f7ff fe11 	bl	d575e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5b3c:	b1a4      	cbz	r4, d5b68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5b3e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5b40:	b11d      	cbz	r5, d5b4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5b42:	4628      	mov	r0, r5
   d5b44:	f001 fc08 	bl	d7358 <strdup>
   d5b48:	4605      	mov	r5, r0
   d5b4a:	a801      	add	r0, sp, #4
   d5b4c:	a903      	add	r1, sp, #12
        type_(type) {
   d5b4e:	9503      	str	r5, [sp, #12]
   d5b50:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5b54:	f7ff fe78 	bl	d5848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b58:	a803      	add	r0, sp, #12
   d5b5a:	f7ff fdaf 	bl	d56bc <_ZN8particle5ErrorD1Ev>
   d5b5e:	a802      	add	r0, sp, #8
   d5b60:	f7fe fbb8 	bl	d42d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5b64:	b009      	add	sp, #36	; 0x24
   d5b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5b68:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5b6a:	2301      	movs	r3, #1
   d5b6c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5b70:	2a00      	cmp	r2, #0
   d5b72:	d103      	bne.n	d5b7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5b74:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5b78:	2900      	cmp	r1, #0
   d5b7a:	d1f7      	bne.n	d5b6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5b7c:	d1ef      	bne.n	d5b5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5b7e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5b80:	f3bf 8f5b 	dmb	ish
   d5b84:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5b86:	1d2b      	adds	r3, r5, #4
   d5b88:	f3bf 8f5b 	dmb	ish
   d5b8c:	e853 6f00 	ldrex	r6, [r3]
   d5b90:	e843 4200 	strex	r2, r4, [r3]
   d5b94:	2a00      	cmp	r2, #0
   d5b96:	d1f9      	bne.n	d5b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5b98:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5b9c:	2e00      	cmp	r6, #0
   d5b9e:	d0de      	beq.n	d5b5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5ba0:	4620      	mov	r0, r4
   d5ba2:	f7ff fbc3 	bl	d532c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5ba6:	4607      	mov	r7, r0
   d5ba8:	b160      	cbz	r0, d5bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5baa:	f105 010c 	add.w	r1, r5, #12
   d5bae:	4630      	mov	r0, r6
   d5bb0:	f7ff fe16 	bl	d57e0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5bb4:	4630      	mov	r0, r6
   d5bb6:	f7ff fd6b 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5bba:	2110      	movs	r1, #16
   d5bbc:	4630      	mov	r0, r6
   d5bbe:	f000 fe7e 	bl	d68be <_ZdlPvj>
   d5bc2:	e7cc      	b.n	d5b5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5bc4:	4631      	mov	r1, r6
   d5bc6:	a803      	add	r0, sp, #12
   d5bc8:	f7ff ff7c 	bl	d5ac4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5bcc:	7b2b      	ldrb	r3, [r5, #12]
   d5bce:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5bd2:	2010      	movs	r0, #16
   d5bd4:	f7fe fa5f 	bl	d4096 <_Znwj>
   d5bd8:	4605      	mov	r5, r0
   d5bda:	b1d0      	cbz	r0, d5c12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5bdc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5bde:	2014      	movs	r0, #20
   d5be0:	f7fe fa59 	bl	d4096 <_Znwj>
   d5be4:	4604      	mov	r4, r0
   d5be6:	b178      	cbz	r0, d5c08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5be8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5bea:	4601      	mov	r1, r0
   d5bec:	a803      	add	r0, sp, #12
   d5bee:	f7ff fdd5 	bl	d579c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bf2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5bf4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bf6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bf8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5bfa:	9205      	str	r2, [sp, #20]
   d5bfc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bfe:	60e3      	str	r3, [r4, #12]
   d5c00:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5c04:	9206      	str	r2, [sp, #24]
   d5c06:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5c08:	4b06      	ldr	r3, [pc, #24]	; (d5c24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5c0a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5c0c:	4b06      	ldr	r3, [pc, #24]	; (d5c28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c0e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5c10:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5c12:	a803      	add	r0, sp, #12
   d5c14:	f7ff fd3c 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5c18:	2200      	movs	r2, #0
   d5c1a:	4629      	mov	r1, r5
   d5c1c:	4803      	ldr	r0, [pc, #12]	; (d5c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5c1e:	f7ff fb8d 	bl	d533c <application_thread_invoke>
   d5c22:	e7c7      	b.n	d5bb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5c24:	000d57f3 	.word	0x000d57f3
   d5c28:	000d5ae3 	.word	0x000d5ae3
   d5c2c:	000d556f 	.word	0x000d556f

000d5c30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c30:	2200      	movs	r2, #0
   d5c32:	6840      	ldr	r0, [r0, #4]
   d5c34:	4611      	mov	r1, r2
   d5c36:	f7ff bc3f 	b.w	d54b8 <network_listening>

000d5c3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5c3a:	2200      	movs	r2, #0
   d5c3c:	6840      	ldr	r0, [r0, #4]
   d5c3e:	4611      	mov	r1, r2
   d5c40:	f7ff bc4a 	b.w	d54d8 <network_get_listen_timeout>

000d5c44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5c44:	6840      	ldr	r0, [r0, #4]
   d5c46:	2200      	movs	r2, #0
   d5c48:	f7ff bc3e 	b.w	d54c8 <network_set_listen_timeout>

000d5c4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c4c:	6840      	ldr	r0, [r0, #4]
   d5c4e:	2200      	movs	r2, #0
   d5c50:	f081 0101 	eor.w	r1, r1, #1
   d5c54:	f7ff bc28 	b.w	d54a8 <network_listen>

000d5c58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5c58:	2300      	movs	r3, #0
   d5c5a:	6840      	ldr	r0, [r0, #4]
   d5c5c:	461a      	mov	r2, r3
   d5c5e:	4619      	mov	r1, r3
   d5c60:	f7ff bc1a 	b.w	d5498 <network_off>

000d5c64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5c64:	2300      	movs	r3, #0
   d5c66:	6840      	ldr	r0, [r0, #4]
   d5c68:	461a      	mov	r2, r3
   d5c6a:	4619      	mov	r1, r3
   d5c6c:	f7ff bc0c 	b.w	d5488 <network_on>

000d5c70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c70:	2200      	movs	r2, #0
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	4611      	mov	r1, r2
   d5c76:	f7ff bbff 	b.w	d5478 <network_ready>

000d5c7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5c7a:	2200      	movs	r2, #0
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	4611      	mov	r1, r2
   d5c80:	f7ff bbea 	b.w	d5458 <network_connecting>

000d5c84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c84:	6840      	ldr	r0, [r0, #4]
   d5c86:	2200      	movs	r2, #0
   d5c88:	2102      	movs	r1, #2
   d5c8a:	f7ff bbed 	b.w	d5468 <network_disconnect>

000d5c8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5c8e:	2300      	movs	r3, #0
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	461a      	mov	r2, r3
   d5c94:	f7ff bbd8 	b.w	d5448 <network_connect>

000d5c98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5c98:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5c9a:	2203      	movs	r2, #3
   d5c9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5c9e:	4a02      	ldr	r2, [pc, #8]	; (d5ca8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ca0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5ca2:	4770      	bx	lr
   d5ca4:	2003e60c 	.word	0x2003e60c
   d5ca8:	000d9578 	.word	0x000d9578

000d5cac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5cac:	4770      	bx	lr

000d5cae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cb0:	4606      	mov	r6, r0
   d5cb2:	4615      	mov	r5, r2
   d5cb4:	460c      	mov	r4, r1
   d5cb6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5cb8:	42bc      	cmp	r4, r7
   d5cba:	d006      	beq.n	d5cca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5cbc:	6833      	ldr	r3, [r6, #0]
   d5cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5cc2:	689b      	ldr	r3, [r3, #8]
   d5cc4:	4630      	mov	r0, r6
   d5cc6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5cc8:	e7f6      	b.n	d5cb8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5cca:	4628      	mov	r0, r5
   d5ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5cce:	7c00      	ldrb	r0, [r0, #16]
   d5cd0:	2200      	movs	r2, #0
   d5cd2:	f7ff ba19 	b.w	d5108 <hal_i2c_write>

000d5cd6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5cd6:	7c00      	ldrb	r0, [r0, #16]
   d5cd8:	2100      	movs	r1, #0
   d5cda:	f7ff ba1d 	b.w	d5118 <hal_i2c_available>

000d5cde <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5cde:	7c00      	ldrb	r0, [r0, #16]
   d5ce0:	2100      	movs	r1, #0
   d5ce2:	f7ff ba21 	b.w	d5128 <hal_i2c_read>

000d5ce6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5ce6:	7c00      	ldrb	r0, [r0, #16]
   d5ce8:	2100      	movs	r1, #0
   d5cea:	f7ff ba25 	b.w	d5138 <hal_i2c_peek>

000d5cee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5cee:	7c00      	ldrb	r0, [r0, #16]
   d5cf0:	2100      	movs	r1, #0
   d5cf2:	f7ff ba29 	b.w	d5148 <hal_i2c_flush>

000d5cf6 <_ZN7TwoWireD0Ev>:
   d5cf6:	b510      	push	{r4, lr}
   d5cf8:	2114      	movs	r1, #20
   d5cfa:	4604      	mov	r4, r0
   d5cfc:	f000 fddf 	bl	d68be <_ZdlPvj>
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5d04:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d0a:	4604      	mov	r4, r0
   d5d0c:	4608      	mov	r0, r1
   d5d0e:	2100      	movs	r1, #0
   d5d10:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5d14:	4b03      	ldr	r3, [pc, #12]	; (d5d24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5d16:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5d18:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5d1a:	4611      	mov	r1, r2
   d5d1c:	f7ff fa24 	bl	d5168 <hal_i2c_init>
}
   d5d20:	4620      	mov	r0, r4
   d5d22:	bd10      	pop	{r4, pc}
   d5d24:	000d95ac 	.word	0x000d95ac

000d5d28 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5d28:	2300      	movs	r3, #0
   d5d2a:	7c00      	ldrb	r0, [r0, #16]
   d5d2c:	461a      	mov	r2, r3
   d5d2e:	4619      	mov	r1, r3
   d5d30:	f7ff b9d2 	b.w	d50d8 <hal_i2c_begin>

000d5d34 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5d34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5d36:	2200      	movs	r2, #0
   d5d38:	2314      	movs	r3, #20
   d5d3a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5d3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5d42:	780b      	ldrb	r3, [r1, #0]
   d5d44:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d48:	684b      	ldr	r3, [r1, #4]
   d5d4a:	9303      	str	r3, [sp, #12]
   d5d4c:	68cb      	ldr	r3, [r1, #12]
   d5d4e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5d50:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5d52:	7a0b      	ldrb	r3, [r1, #8]
   d5d54:	9305      	str	r3, [sp, #20]
   d5d56:	a901      	add	r1, sp, #4
   d5d58:	f7ff fa0e 	bl	d5178 <hal_i2c_request_ex>
}
   d5d5c:	b007      	add	sp, #28
   d5d5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d62 <_ZN7TwoWire11requestFromEhjh>:
{
   d5d62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5d64:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5d66:	f88d 1000 	strb.w	r1, [sp]
   d5d6a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5d6e:	9103      	str	r1, [sp, #12]
   d5d70:	bf18      	it	ne
   d5d72:	2301      	movne	r3, #1
   d5d74:	4669      	mov	r1, sp
    size_ = size;
   d5d76:	9201      	str	r2, [sp, #4]
   d5d78:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d7c:	f7ff ffda 	bl	d5d34 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5d80:	b005      	add	sp, #20
   d5d82:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d86 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5d86:	2301      	movs	r3, #1
   d5d88:	f7ff bfeb 	b.w	d5d62 <_ZN7TwoWire11requestFromEhjh>

000d5d8c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5d8c:	7c00      	ldrb	r0, [r0, #16]
   d5d8e:	2200      	movs	r2, #0
   d5d90:	f7ff b9aa 	b.w	d50e8 <hal_i2c_begin_transmission>

000d5d94 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5d94:	7c00      	ldrb	r0, [r0, #16]
   d5d96:	2200      	movs	r2, #0
   d5d98:	f7ff b9ae 	b.w	d50f8 <hal_i2c_end_transmission>

000d5d9c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5d9c:	2101      	movs	r1, #1
   d5d9e:	f7ff bff9 	b.w	d5d94 <_ZN7TwoWire15endTransmissionEh>

000d5da2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5da2:	4770      	bx	lr

000d5da4 <_ZN9IPAddressD0Ev>:
   d5da4:	b510      	push	{r4, lr}
   d5da6:	2118      	movs	r1, #24
   d5da8:	4604      	mov	r4, r0
   d5daa:	f000 fd88 	bl	d68be <_ZdlPvj>
   d5dae:	4620      	mov	r0, r4
   d5db0:	bd10      	pop	{r4, pc}

000d5db2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5db2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5db4:	7d03      	ldrb	r3, [r0, #20]
   d5db6:	2b06      	cmp	r3, #6
{
   d5db8:	b08d      	sub	sp, #52	; 0x34
   d5dba:	460e      	mov	r6, r1
   d5dbc:	f100 0704 	add.w	r7, r0, #4
   d5dc0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5dc4:	d012      	beq.n	d5dec <_ZNK9IPAddress7printToER5Print+0x3a>
   d5dc6:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5dca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5dce:	220a      	movs	r2, #10
   d5dd0:	4630      	mov	r0, r6
   d5dd2:	f000 f94a 	bl	d606a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5dd6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5dd8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5dda:	d019      	beq.n	d5e10 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5ddc:	2c00      	cmp	r4, #0
   d5dde:	d0f4      	beq.n	d5dca <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5de0:	212e      	movs	r1, #46	; 0x2e
   d5de2:	4630      	mov	r0, r6
   d5de4:	f000 f928 	bl	d6038 <_ZN5Print5printEc>
   d5de8:	4404      	add	r4, r0
   d5dea:	e7ee      	b.n	d5dca <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dec:	232f      	movs	r3, #47	; 0x2f
   d5dee:	466a      	mov	r2, sp
   d5df0:	4639      	mov	r1, r7
   d5df2:	200a      	movs	r0, #10
		buf[0] = 0;
   d5df4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5df8:	f7ff f9c6 	bl	d5188 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5dfc:	4668      	mov	r0, sp
   d5dfe:	f001 fac8 	bl	d7392 <strlen>
   d5e02:	6833      	ldr	r3, [r6, #0]
   d5e04:	4602      	mov	r2, r0
   d5e06:	68db      	ldr	r3, [r3, #12]
   d5e08:	4669      	mov	r1, sp
   d5e0a:	4630      	mov	r0, r6
   d5e0c:	4798      	blx	r3
   d5e0e:	4604      	mov	r4, r0
    }
    return n;
}
   d5e10:	4620      	mov	r0, r4
   d5e12:	b00d      	add	sp, #52	; 0x34
   d5e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5e18 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5e18:	b510      	push	{r4, lr}
   d5e1a:	4b05      	ldr	r3, [pc, #20]	; (d5e30 <_ZN9IPAddressC1Ev+0x18>)
   d5e1c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e1e:	2211      	movs	r2, #17
   d5e20:	f840 3b04 	str.w	r3, [r0], #4
   d5e24:	2100      	movs	r1, #0
   d5e26:	f001 fa59 	bl	d72dc <memset>
}
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	bd10      	pop	{r4, pc}
   d5e2e:	bf00      	nop
   d5e30:	000d95d4 	.word	0x000d95d4

000d5e34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e34:	4603      	mov	r3, r0
   d5e36:	4a07      	ldr	r2, [pc, #28]	; (d5e54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5e3e:	f101 0210 	add.w	r2, r1, #16
   d5e42:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e46:	f843 4b04 	str.w	r4, [r3], #4
   d5e4a:	4291      	cmp	r1, r2
   d5e4c:	d1f9      	bne.n	d5e42 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e4e:	780a      	ldrb	r2, [r1, #0]
   d5e50:	701a      	strb	r2, [r3, #0]
}
   d5e52:	bd10      	pop	{r4, pc}
   d5e54:	000d95d4 	.word	0x000d95d4

000d5e58 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5e58:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e5e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e66:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5e6a:	2304      	movs	r3, #4
   d5e6c:	6041      	str	r1, [r0, #4]
   d5e6e:	7503      	strb	r3, [r0, #20]
}
   d5e70:	bd10      	pop	{r4, pc}

000d5e72 <_ZN9IPAddressaSEPKh>:
{
   d5e72:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e74:	78cb      	ldrb	r3, [r1, #3]
   d5e76:	9300      	str	r3, [sp, #0]
   d5e78:	788b      	ldrb	r3, [r1, #2]
   d5e7a:	784a      	ldrb	r2, [r1, #1]
   d5e7c:	7809      	ldrb	r1, [r1, #0]
   d5e7e:	f7ff ffeb 	bl	d5e58 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e82:	b002      	add	sp, #8
   d5e84:	bd10      	pop	{r4, pc}
	...

000d5e88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e88:	4b01      	ldr	r3, [pc, #4]	; (d5e90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e8a:	4a02      	ldr	r2, [pc, #8]	; (d5e94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5e8e:	4770      	bx	lr
   d5e90:	2003e614 	.word	0x2003e614
   d5e94:	000d95e0 	.word	0x000d95e0

000d5e98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e98:	2300      	movs	r3, #0
   d5e9a:	6840      	ldr	r0, [r0, #4]
   d5e9c:	461a      	mov	r2, r3
   d5e9e:	f7ff bad3 	b.w	d5448 <network_connect>

000d5ea2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ea2:	6840      	ldr	r0, [r0, #4]
   d5ea4:	2200      	movs	r2, #0
   d5ea6:	2102      	movs	r1, #2
   d5ea8:	f7ff bade 	b.w	d5468 <network_disconnect>

000d5eac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5eac:	2200      	movs	r2, #0
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	4611      	mov	r1, r2
   d5eb2:	f7ff bad1 	b.w	d5458 <network_connecting>

000d5eb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5eb6:	2200      	movs	r2, #0
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	4611      	mov	r1, r2
   d5ebc:	f7ff badc 	b.w	d5478 <network_ready>

000d5ec0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ec0:	2300      	movs	r3, #0
   d5ec2:	6840      	ldr	r0, [r0, #4]
   d5ec4:	461a      	mov	r2, r3
   d5ec6:	4619      	mov	r1, r3
   d5ec8:	f7ff bade 	b.w	d5488 <network_on>

000d5ecc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ecc:	2300      	movs	r3, #0
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	461a      	mov	r2, r3
   d5ed2:	4619      	mov	r1, r3
   d5ed4:	f7ff bae0 	b.w	d5498 <network_off>

000d5ed8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ed8:	6840      	ldr	r0, [r0, #4]
   d5eda:	2200      	movs	r2, #0
   d5edc:	f081 0101 	eor.w	r1, r1, #1
   d5ee0:	f7ff bae2 	b.w	d54a8 <network_listen>

000d5ee4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ee4:	6840      	ldr	r0, [r0, #4]
   d5ee6:	2200      	movs	r2, #0
   d5ee8:	f7ff baee 	b.w	d54c8 <network_set_listen_timeout>

000d5eec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5eec:	2200      	movs	r2, #0
   d5eee:	6840      	ldr	r0, [r0, #4]
   d5ef0:	4611      	mov	r1, r2
   d5ef2:	f7ff baf1 	b.w	d54d8 <network_get_listen_timeout>

000d5ef6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5ef6:	2200      	movs	r2, #0
   d5ef8:	6840      	ldr	r0, [r0, #4]
   d5efa:	4611      	mov	r1, r2
   d5efc:	f7ff badc 	b.w	d54b8 <network_listening>

000d5f00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5f06:	b095      	sub	sp, #84	; 0x54
   d5f08:	4616      	mov	r6, r2
   d5f0a:	460d      	mov	r5, r1
   d5f0c:	4607      	mov	r7, r0
    IPAddress addr;
   d5f0e:	f7ff ff83 	bl	d5e18 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5f12:	4621      	mov	r1, r4
   d5f14:	2218      	movs	r2, #24
   d5f16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5f18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f1a:	f001 f9df 	bl	d72dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5f20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5f24:	4621      	mov	r1, r4
   d5f26:	466b      	mov	r3, sp
   d5f28:	aa0c      	add	r2, sp, #48	; 0x30
   d5f2a:	4630      	mov	r0, r6
   d5f2c:	f7ff f93c 	bl	d51a8 <netdb_getaddrinfo>
    if (!r) {
   d5f30:	4604      	mov	r4, r0
   d5f32:	2800      	cmp	r0, #0
   d5f34:	d146      	bne.n	d5fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f36:	4602      	mov	r2, r0
   d5f38:	2101      	movs	r1, #1
   d5f3a:	6868      	ldr	r0, [r5, #4]
   d5f3c:	f7ff fa9c 	bl	d5478 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f44:	4622      	mov	r2, r4
   d5f46:	6868      	ldr	r0, [r5, #4]
   d5f48:	f7ff fa96 	bl	d5478 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f4e:	4681      	mov	r9, r0
        bool ok = false;
   d5f50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f52:	2e00      	cmp	r6, #0
   d5f54:	d036      	beq.n	d5fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5f56:	2900      	cmp	r1, #0
   d5f58:	d134      	bne.n	d5fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f5a:	6873      	ldr	r3, [r6, #4]
   d5f5c:	2b02      	cmp	r3, #2
   d5f5e:	d003      	beq.n	d5f68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5f60:	2b0a      	cmp	r3, #10
   d5f62:	d00b      	beq.n	d5f7c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f64:	69f6      	ldr	r6, [r6, #28]
   d5f66:	e7f4      	b.n	d5f52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5f68:	f1b8 0f00 	cmp.w	r8, #0
   d5f6c:	d004      	beq.n	d5f78 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5f6e:	6971      	ldr	r1, [r6, #20]
   d5f70:	4638      	mov	r0, r7
   d5f72:	3104      	adds	r1, #4
   d5f74:	f7ff ff7d 	bl	d5e72 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5f78:	4641      	mov	r1, r8
   d5f7a:	e7f3      	b.n	d5f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5f7c:	f1b9 0f00 	cmp.w	r9, #0
   d5f80:	d101      	bne.n	d5f86 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5f82:	4649      	mov	r1, r9
   d5f84:	e7ee      	b.n	d5f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5f86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5f88:	2210      	movs	r2, #16
   d5f8a:	a801      	add	r0, sp, #4
   d5f8c:	f001 f9a6 	bl	d72dc <memset>
                    a.v = 6;
   d5f90:	2306      	movs	r3, #6
   d5f92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f96:	ad01      	add	r5, sp, #4
   d5f98:	f104 0308 	add.w	r3, r4, #8
   d5f9c:	3418      	adds	r4, #24
   d5f9e:	6818      	ldr	r0, [r3, #0]
   d5fa0:	6859      	ldr	r1, [r3, #4]
   d5fa2:	462a      	mov	r2, r5
   d5fa4:	c203      	stmia	r2!, {r0, r1}
   d5fa6:	3308      	adds	r3, #8
   d5fa8:	42a3      	cmp	r3, r4
   d5faa:	4615      	mov	r5, r2
   d5fac:	d1f7      	bne.n	d5f9e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5fae:	a901      	add	r1, sp, #4
   d5fb0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5fb2:	ad07      	add	r5, sp, #28
   d5fb4:	f7ff ff3e 	bl	d5e34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fba:	1d3c      	adds	r4, r7, #4
   d5fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fbe:	682b      	ldr	r3, [r5, #0]
   d5fc0:	7023      	strb	r3, [r4, #0]
   d5fc2:	e7de      	b.n	d5f82 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5fc4:	9800      	ldr	r0, [sp, #0]
   d5fc6:	f7ff f8e7 	bl	d5198 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5fca:	4638      	mov	r0, r7
   d5fcc:	b015      	add	sp, #84	; 0x54
   d5fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5fd4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5fd4:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5fd6:	4a03      	ldr	r2, [pc, #12]	; (d5fe4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5fd8:	601a      	str	r2, [r3, #0]
   d5fda:	2200      	movs	r2, #0
   d5fdc:	605a      	str	r2, [r3, #4]

} // spark
   d5fde:	4770      	bx	lr
   d5fe0:	2003e618 	.word	0x2003e618
   d5fe4:	000d95ec 	.word	0x000d95ec

000d5fe8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fea:	4606      	mov	r6, r0
   d5fec:	460d      	mov	r5, r1
  size_t n = 0;
   d5fee:	188f      	adds	r7, r1, r2
   d5ff0:	2400      	movs	r4, #0
  while (size--) {
   d5ff2:	42bd      	cmp	r5, r7
   d5ff4:	d00c      	beq.n	d6010 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5ff6:	6833      	ldr	r3, [r6, #0]
   d5ff8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5ffc:	689b      	ldr	r3, [r3, #8]
   d5ffe:	4630      	mov	r0, r6
   d6000:	4798      	blx	r3
     if (chunk>=0)
   d6002:	1e03      	subs	r3, r0, #0
   d6004:	db01      	blt.n	d600a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6006:	441c      	add	r4, r3
  while (size--) {
   d6008:	e7f3      	b.n	d5ff2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d600a:	2c00      	cmp	r4, #0
   d600c:	bf08      	it	eq
   d600e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6010:	4620      	mov	r0, r4
   d6012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6014 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6014:	b513      	push	{r0, r1, r4, lr}
   d6016:	4604      	mov	r4, r0
    }
   d6018:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d601a:	b159      	cbz	r1, d6034 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d601c:	9101      	str	r1, [sp, #4]
   d601e:	f001 f9b8 	bl	d7392 <strlen>
   d6022:	6823      	ldr	r3, [r4, #0]
   d6024:	9901      	ldr	r1, [sp, #4]
   d6026:	68db      	ldr	r3, [r3, #12]
   d6028:	4602      	mov	r2, r0
   d602a:	4620      	mov	r0, r4
    }
   d602c:	b002      	add	sp, #8
   d602e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6032:	4718      	bx	r3
    }
   d6034:	b002      	add	sp, #8
   d6036:	bd10      	pop	{r4, pc}

000d6038 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6038:	6803      	ldr	r3, [r0, #0]
   d603a:	689b      	ldr	r3, [r3, #8]
   d603c:	4718      	bx	r3

000d603e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d603e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6040:	210d      	movs	r1, #13
{
   d6042:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6044:	f7ff fff8 	bl	d6038 <_ZN5Print5printEc>
  n += print('\n');
   d6048:	210a      	movs	r1, #10
  size_t n = print('\r');
   d604a:	4604      	mov	r4, r0
  n += print('\n');
   d604c:	4628      	mov	r0, r5
   d604e:	f7ff fff3 	bl	d6038 <_ZN5Print5printEc>
  return n;
}
   d6052:	4420      	add	r0, r4
   d6054:	bd38      	pop	{r3, r4, r5, pc}

000d6056 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6056:	b538      	push	{r3, r4, r5, lr}
   d6058:	4605      	mov	r5, r0
  return write(str);
   d605a:	f7ff ffdb 	bl	d6014 <_ZN5Print5writeEPKc>
   d605e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6060:	4628      	mov	r0, r5
   d6062:	f7ff ffec 	bl	d603e <_ZN5Print7printlnEv>
  return n;
}
   d6066:	4420      	add	r0, r4
   d6068:	bd38      	pop	{r3, r4, r5, pc}

000d606a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d606a:	b530      	push	{r4, r5, lr}
   d606c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d606e:	2300      	movs	r3, #0
   d6070:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6074:	2a01      	cmp	r2, #1
   d6076:	bf98      	it	ls
   d6078:	220a      	movls	r2, #10
   d607a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d607c:	460d      	mov	r5, r1
   d607e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6082:	fb01 5312 	mls	r3, r1, r2, r5
   d6086:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d608a:	2b09      	cmp	r3, #9
   d608c:	bf94      	ite	ls
   d608e:	3330      	addls	r3, #48	; 0x30
   d6090:	3337      	addhi	r3, #55	; 0x37
   d6092:	b2db      	uxtb	r3, r3
  } while(n);
   d6094:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6096:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d609a:	d9ef      	bls.n	d607c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d609c:	4621      	mov	r1, r4
   d609e:	f7ff ffb9 	bl	d6014 <_ZN5Print5writeEPKc>
}
   d60a2:	b00b      	add	sp, #44	; 0x2c
   d60a4:	bd30      	pop	{r4, r5, pc}

000d60a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d60a6:	b510      	push	{r4, lr}
   d60a8:	4604      	mov	r4, r0
   d60aa:	f7ff faf1 	bl	d5690 <_ZNSt14_Function_baseD1Ev>
   d60ae:	4620      	mov	r0, r4
   d60b0:	bd10      	pop	{r4, pc}
	...

000d60b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d60b4:	4803      	ldr	r0, [pc, #12]	; (d60c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d60b6:	4a04      	ldr	r2, [pc, #16]	; (d60c8 <_GLOBAL__sub_I_RGB+0x14>)
   d60b8:	4904      	ldr	r1, [pc, #16]	; (d60cc <_GLOBAL__sub_I_RGB+0x18>)
   d60ba:	2300      	movs	r3, #0
   d60bc:	6083      	str	r3, [r0, #8]
   d60be:	f000 bbf9 	b.w	d68b4 <__aeabi_atexit>
   d60c2:	bf00      	nop
   d60c4:	2003e620 	.word	0x2003e620
   d60c8:	2003e498 	.word	0x2003e498
   d60cc:	000d60a7 	.word	0x000d60a7

000d60d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d60d0:	b510      	push	{r4, lr}
   d60d2:	4604      	mov	r4, r0
   d60d4:	4608      	mov	r0, r1
{
    _spi = spi;
   d60d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d60d8:	f7ff f86e 	bl	d51b8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d60dc:	2300      	movs	r3, #0
   d60de:	6063      	str	r3, [r4, #4]
}
   d60e0:	4620      	mov	r0, r4
   d60e2:	bd10      	pop	{r4, pc}

000d60e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d60e4:	b510      	push	{r4, lr}
   d60e6:	4604      	mov	r4, r0
{
	free(buffer);
   d60e8:	6800      	ldr	r0, [r0, #0]
   d60ea:	f7ff fa05 	bl	d54f8 <free>
}
   d60ee:	4620      	mov	r0, r4
   d60f0:	bd10      	pop	{r4, pc}

000d60f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d60f2:	b510      	push	{r4, lr}
   d60f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d60f6:	6800      	ldr	r0, [r0, #0]
   d60f8:	b108      	cbz	r0, d60fe <_ZN6String10invalidateEv+0xc>
   d60fa:	f7ff f9fd 	bl	d54f8 <free>
	buffer = NULL;
   d60fe:	2300      	movs	r3, #0
	capacity = len = 0;
   d6100:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6104:	6023      	str	r3, [r4, #0]
}
   d6106:	bd10      	pop	{r4, pc}

000d6108 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6108:	b538      	push	{r3, r4, r5, lr}
   d610a:	4604      	mov	r4, r0
   d610c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d610e:	6800      	ldr	r0, [r0, #0]
   d6110:	3101      	adds	r1, #1
   d6112:	f7ff f9f9 	bl	d5508 <realloc>
	if (newbuffer) {
   d6116:	b110      	cbz	r0, d611e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6118:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d611c:	2001      	movs	r0, #1
	}
	return 0;
}
   d611e:	bd38      	pop	{r3, r4, r5, pc}

000d6120 <_ZN6String7reserveEj>:
{
   d6120:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6122:	6803      	ldr	r3, [r0, #0]
{
   d6124:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6126:	b123      	cbz	r3, d6132 <_ZN6String7reserveEj+0x12>
   d6128:	6843      	ldr	r3, [r0, #4]
   d612a:	428b      	cmp	r3, r1
   d612c:	d301      	bcc.n	d6132 <_ZN6String7reserveEj+0x12>
   d612e:	2001      	movs	r0, #1
}
   d6130:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6132:	4620      	mov	r0, r4
   d6134:	f7ff ffe8 	bl	d6108 <_ZN6String12changeBufferEj>
   d6138:	2800      	cmp	r0, #0
   d613a:	d0f9      	beq.n	d6130 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d613c:	68a3      	ldr	r3, [r4, #8]
   d613e:	2b00      	cmp	r3, #0
   d6140:	d1f5      	bne.n	d612e <_ZN6String7reserveEj+0xe>
   d6142:	6822      	ldr	r2, [r4, #0]
   d6144:	7013      	strb	r3, [r2, #0]
   d6146:	e7f2      	b.n	d612e <_ZN6String7reserveEj+0xe>

000d6148 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6148:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d614a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d614c:	4611      	mov	r1, r2
   d614e:	9201      	str	r2, [sp, #4]
{
   d6150:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6152:	f7ff ffe5 	bl	d6120 <_ZN6String7reserveEj>
   d6156:	9a01      	ldr	r2, [sp, #4]
   d6158:	b928      	cbnz	r0, d6166 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d615a:	4620      	mov	r0, r4
   d615c:	f7ff ffc9 	bl	d60f2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6160:	4620      	mov	r0, r4
   d6162:	b003      	add	sp, #12
   d6164:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6166:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6168:	4629      	mov	r1, r5
   d616a:	6820      	ldr	r0, [r4, #0]
   d616c:	f001 f8a8 	bl	d72c0 <memcpy>
	buffer[len] = 0;
   d6170:	6822      	ldr	r2, [r4, #0]
   d6172:	68a3      	ldr	r3, [r4, #8]
   d6174:	2100      	movs	r1, #0
   d6176:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6178:	e7f2      	b.n	d6160 <_ZN6String4copyEPKcj+0x18>

000d617a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d617a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d617c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d617e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6182:	4604      	mov	r4, r0
	len = 0;
   d6184:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6186:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6188:	b141      	cbz	r1, d619c <_ZN6StringC1EPKc+0x22>
   d618a:	4608      	mov	r0, r1
   d618c:	9101      	str	r1, [sp, #4]
   d618e:	f001 f900 	bl	d7392 <strlen>
   d6192:	9901      	ldr	r1, [sp, #4]
   d6194:	4602      	mov	r2, r0
   d6196:	4620      	mov	r0, r4
   d6198:	f7ff ffd6 	bl	d6148 <_ZN6String4copyEPKcj>
}
   d619c:	4620      	mov	r0, r4
   d619e:	b002      	add	sp, #8
   d61a0:	bd10      	pop	{r4, pc}

000d61a2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d61a2:	4288      	cmp	r0, r1
{
   d61a4:	b510      	push	{r4, lr}
   d61a6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d61a8:	d005      	beq.n	d61b6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d61aa:	680b      	ldr	r3, [r1, #0]
   d61ac:	b12b      	cbz	r3, d61ba <_ZN6StringaSERKS_+0x18>
   d61ae:	688a      	ldr	r2, [r1, #8]
   d61b0:	4619      	mov	r1, r3
   d61b2:	f7ff ffc9 	bl	d6148 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d61b6:	4620      	mov	r0, r4
   d61b8:	bd10      	pop	{r4, pc}
	else invalidate();
   d61ba:	f7ff ff9a 	bl	d60f2 <_ZN6String10invalidateEv>
   d61be:	e7fa      	b.n	d61b6 <_ZN6StringaSERKS_+0x14>

000d61c0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d61c0:	b510      	push	{r4, lr}
	buffer = NULL;
   d61c2:	2300      	movs	r3, #0
String::String(const String &value)
   d61c4:	4604      	mov	r4, r0
	capacity = 0;
   d61c6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d61ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61cc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d61ce:	f7ff ffe8 	bl	d61a2 <_ZN6StringaSERKS_>
}
   d61d2:	4620      	mov	r0, r4
   d61d4:	bd10      	pop	{r4, pc}

000d61d6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61d6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61d8:	6882      	ldr	r2, [r0, #8]
   d61da:	b93a      	cbnz	r2, d61ec <_ZNK6String6equalsEPKc+0x16>
   d61dc:	b121      	cbz	r1, d61e8 <_ZNK6String6equalsEPKc+0x12>
   d61de:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d61e0:	fab0 f080 	clz	r0, r0
   d61e4:	0940      	lsrs	r0, r0, #5
   d61e6:	e000      	b.n	d61ea <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61e8:	2001      	movs	r0, #1
}
   d61ea:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d61ec:	6800      	ldr	r0, [r0, #0]
   d61ee:	b909      	cbnz	r1, d61f4 <_ZNK6String6equalsEPKc+0x1e>
   d61f0:	7800      	ldrb	r0, [r0, #0]
   d61f2:	e7f5      	b.n	d61e0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d61f4:	f001 f89e 	bl	d7334 <strcmp>
   d61f8:	e7f2      	b.n	d61e0 <_ZNK6String6equalsEPKc+0xa>

000d61fa <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d61fa:	b558      	push	{r3, r4, r6, lr}
   d61fc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d61fe:	b12a      	cbz	r2, d620c <_ZNK6String8getBytesEPhjj+0x12>
   d6200:	b121      	cbz	r1, d620c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d6202:	6884      	ldr	r4, [r0, #8]
   d6204:	429c      	cmp	r4, r3
   d6206:	d802      	bhi.n	d620e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6208:	2300      	movs	r3, #0
   d620a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d620c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d620e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6210:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d6212:	6801      	ldr	r1, [r0, #0]
   d6214:	4294      	cmp	r4, r2
   d6216:	bf28      	it	cs
   d6218:	4614      	movcs	r4, r2
   d621a:	4419      	add	r1, r3
   d621c:	4622      	mov	r2, r4
   d621e:	4630      	mov	r0, r6
   d6220:	f001 f8d1 	bl	d73c6 <strncpy>
	buf[n] = 0;
   d6224:	2300      	movs	r3, #0
   d6226:	5533      	strb	r3, [r6, r4]
   d6228:	e7f0      	b.n	d620c <_ZNK6String8getBytesEPhjj+0x12>
	...

000d622c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d622c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d622e:	6800      	ldr	r0, [r0, #0]
   d6230:	b140      	cbz	r0, d6244 <_ZNK6String7toFloatEv+0x18>
   d6232:	f001 f82f 	bl	d7294 <atof>
   d6236:	ec51 0b10 	vmov	r0, r1, d0
   d623a:	f000 ffbd 	bl	d71b8 <__aeabi_d2f>
   d623e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d6242:	bd08      	pop	{r3, pc}
	return 0;
   d6244:	ed9f 0a01 	vldr	s0, [pc, #4]	; d624c <_ZNK6String7toFloatEv+0x20>
   d6248:	e7fb      	b.n	d6242 <_ZNK6String7toFloatEv+0x16>
   d624a:	bf00      	nop
   d624c:	00000000 	.word	0x00000000

000d6250 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d6250:	b507      	push	{r0, r1, r2, lr}
   d6252:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6254:	2100      	movs	r1, #0
{
   d6256:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6258:	9100      	str	r1, [sp, #0]
   d625a:	2001      	movs	r0, #1
   d625c:	218c      	movs	r1, #140	; 0x8c
   d625e:	f7ff f891 	bl	d5384 <system_reset>
}
   d6262:	b003      	add	sp, #12
   d6264:	f85d fb04 	ldr.w	pc, [sp], #4

000d6268 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d6268:	4601      	mov	r1, r0
    reset(0, flags);
   d626a:	2000      	movs	r0, #0
   d626c:	f7ff bff0 	b.w	d6250 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d6270 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d6270:	2000      	movs	r0, #0
   d6272:	f7ff bff9 	b.w	d6268 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d6278 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6278:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d627a:	4b09      	ldr	r3, [pc, #36]	; (d62a0 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d627c:	4c09      	ldr	r4, [pc, #36]	; (d62a4 <_GLOBAL__sub_I_System+0x2c>)
   d627e:	2202      	movs	r2, #2
   d6280:	2000      	movs	r0, #0
   d6282:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6284:	4b08      	ldr	r3, [pc, #32]	; (d62a8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6286:	6020      	str	r0, [r4, #0]
   d6288:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d628a:	71a0      	strb	r0, [r4, #6]
   d628c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d628e:	f7ff f835 	bl	d52fc <set_system_mode>
SystemClass System;
   d6292:	4620      	mov	r0, r4
   d6294:	4a05      	ldr	r2, [pc, #20]	; (d62ac <_GLOBAL__sub_I_System+0x34>)
   d6296:	4906      	ldr	r1, [pc, #24]	; (d62b0 <_GLOBAL__sub_I_System+0x38>)
   d6298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d629c:	f000 bb0a 	b.w	d68b4 <__aeabi_atexit>
   d62a0:	2003e63c 	.word	0x2003e63c
   d62a4:	2003e630 	.word	0x2003e630
   d62a8:	ffff0000 	.word	0xffff0000
   d62ac:	2003e498 	.word	0x2003e498
   d62b0:	000d40d1 	.word	0x000d40d1

000d62b4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d62b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d62b8:	4a15      	ldr	r2, [pc, #84]	; (d6310 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d62ba:	f8df 8060 	ldr.w	r8, [pc, #96]	; d631c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d62be:	e9d2 3200 	ldrd	r3, r2, [r2]
   d62c2:	18c0      	adds	r0, r0, r3
   d62c4:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d62c8:	4a12      	ldr	r2, [pc, #72]	; (d6314 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d62ca:	e9d2 3200 	ldrd	r3, r2, [r2]
   d62ce:	18c6      	adds	r6, r0, r3
   d62d0:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d62d4:	e9d8 2300 	ldrd	r2, r3, [r8]
   d62d8:	42bb      	cmp	r3, r7
   d62da:	bf08      	it	eq
   d62dc:	42b2      	cmpeq	r2, r6
{
   d62de:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d62e0:	d013      	beq.n	d630a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d62e2:	a903      	add	r1, sp, #12
   d62e4:	4668      	mov	r0, sp
   d62e6:	e9cd 6700 	strd	r6, r7, [sp]
   d62ea:	f7ff f935 	bl	d5558 <localtime_r>
	calendar_time.tm_year += 1900;
   d62ee:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62f0:	4d09      	ldr	r5, [pc, #36]	; (d6318 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d62f2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62f6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d62f8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6302:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6306:	6823      	ldr	r3, [r4, #0]
   d6308:	602b      	str	r3, [r5, #0]
    }
}
   d630a:	b00c      	add	sp, #48	; 0x30
   d630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6310:	2003e670 	.word	0x2003e670
   d6314:	2003e668 	.word	0x2003e668
   d6318:	2003e644 	.word	0x2003e644
   d631c:	2003e678 	.word	0x2003e678

000d6320 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6320:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6322:	2000      	movs	r0, #0
   d6324:	f7ff f880 	bl	d5428 <spark_sync_time_pending>
   d6328:	b128      	cbz	r0, d6336 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d632a:	f7ff f855 	bl	d53d8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d632e:	f080 0001 	eor.w	r0, r0, #1
   d6332:	b2c0      	uxtb	r0, r0
    }
   d6334:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6336:	2001      	movs	r0, #1
   d6338:	e7fc      	b.n	d6334 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d633a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d633a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d633c:	2000      	movs	r0, #0
   d633e:	f7fe fe9b 	bl	d5078 <hal_rtc_time_is_valid>
    if (rtcstate)
   d6342:	4604      	mov	r4, r0
   d6344:	b9a0      	cbnz	r0, d6370 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6346:	f7fe ffd1 	bl	d52ec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d634a:	2801      	cmp	r0, #1
   d634c:	d110      	bne.n	d6370 <_ZN9TimeClass7isValidEv+0x36>
   d634e:	4620      	mov	r0, r4
   d6350:	f7fe fffc 	bl	d534c <system_thread_get_state>
   d6354:	b960      	cbnz	r0, d6370 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6356:	f7ff ffe3 	bl	d6320 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d635a:	b910      	cbnz	r0, d6362 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d635c:	f7ff f82c 	bl	d53b8 <spark_process>
        while (_while() && !_condition()) {
   d6360:	e7f9      	b.n	d6356 <_ZN9TimeClass7isValidEv+0x1c>
   d6362:	f7ff ffdd 	bl	d6320 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d636a:	2000      	movs	r0, #0
   d636c:	f7fe be84 	b.w	d5078 <hal_rtc_time_is_valid>
}
   d6370:	4620      	mov	r0, r4
   d6372:	bd10      	pop	{r4, pc}

000d6374 <_ZN9TimeClass3nowEv>:
{
   d6374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6376:	f7ff ffe0 	bl	d633a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d637a:	2210      	movs	r2, #16
   d637c:	2100      	movs	r1, #0
   d637e:	4668      	mov	r0, sp
   d6380:	f000 ffac 	bl	d72dc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6384:	2100      	movs	r1, #0
   d6386:	4668      	mov	r0, sp
   d6388:	f7fe fe86 	bl	d5098 <hal_rtc_get_time>
}
   d638c:	9800      	ldr	r0, [sp, #0]
   d638e:	b005      	add	sp, #20
   d6390:	f85d fb04 	ldr.w	pc, [sp], #4

000d6394 <_ZN9TimeClass4hourEv>:
{
   d6394:	b508      	push	{r3, lr}
	return hour(now());
   d6396:	f7ff ffed 	bl	d6374 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d639a:	17c1      	asrs	r1, r0, #31
   d639c:	f7ff ff8a 	bl	d62b4 <_ZL22Refresh_UnixTime_Cachex>
}
   d63a0:	4b01      	ldr	r3, [pc, #4]	; (d63a8 <_ZN9TimeClass4hourEv+0x14>)
   d63a2:	6898      	ldr	r0, [r3, #8]
   d63a4:	bd08      	pop	{r3, pc}
   d63a6:	bf00      	nop
   d63a8:	2003e644 	.word	0x2003e644

000d63ac <_ZN9TimeClass6minuteEv>:
{
   d63ac:	b508      	push	{r3, lr}
	return minute(now());
   d63ae:	f7ff ffe1 	bl	d6374 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d63b2:	17c1      	asrs	r1, r0, #31
   d63b4:	f7ff ff7e 	bl	d62b4 <_ZL22Refresh_UnixTime_Cachex>
}
   d63b8:	4b01      	ldr	r3, [pc, #4]	; (d63c0 <_ZN9TimeClass6minuteEv+0x14>)
   d63ba:	6858      	ldr	r0, [r3, #4]
   d63bc:	bd08      	pop	{r3, pc}
   d63be:	bf00      	nop
   d63c0:	2003e644 	.word	0x2003e644

000d63c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63c4:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63ca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d63cc:	4770      	bx	lr
   d63ce:	bf00      	nop
   d63d0:	2003e2c0 	.word	0x2003e2c0
   d63d4:	2003e640 	.word	0x2003e640

000d63d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d63d8:	4770      	bx	lr

000d63da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63da:	7441      	strb	r1, [r0, #17]
}
   d63dc:	4770      	bx	lr

000d63de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d63de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d63e0:	7c00      	ldrb	r0, [r0, #16]
   d63e2:	f7fe ff31 	bl	d5248 <hal_usart_available_data_for_write>
}
   d63e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63ea:	bd08      	pop	{r3, pc}

000d63ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d63ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d63ee:	7c00      	ldrb	r0, [r0, #16]
   d63f0:	f7fe ff02 	bl	d51f8 <hal_usart_available>
}
   d63f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63f8:	bd08      	pop	{r3, pc}

000d63fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d63fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d63fc:	7c00      	ldrb	r0, [r0, #16]
   d63fe:	f7fe ff0b 	bl	d5218 <hal_usart_peek>
}
   d6402:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6406:	bd08      	pop	{r3, pc}

000d6408 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6408:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d640a:	7c00      	ldrb	r0, [r0, #16]
   d640c:	f7fe fefc 	bl	d5208 <hal_usart_read>
}
   d6410:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6414:	bd08      	pop	{r3, pc}

000d6416 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6416:	7c00      	ldrb	r0, [r0, #16]
   d6418:	f7fe bf06 	b.w	d5228 <hal_usart_flush>

000d641c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d641c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d641e:	7c45      	ldrb	r5, [r0, #17]
{
   d6420:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6422:	b12d      	cbz	r5, d6430 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6424:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6426:	b003      	add	sp, #12
   d6428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d642c:	f7fe bedc 	b.w	d51e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6430:	7c00      	ldrb	r0, [r0, #16]
   d6432:	9101      	str	r1, [sp, #4]
   d6434:	f7fe ff08 	bl	d5248 <hal_usart_available_data_for_write>
   d6438:	2800      	cmp	r0, #0
   d643a:	9901      	ldr	r1, [sp, #4]
   d643c:	dcf2      	bgt.n	d6424 <_ZN11USARTSerial5writeEh+0x8>
}
   d643e:	4628      	mov	r0, r5
   d6440:	b003      	add	sp, #12
   d6442:	bd30      	pop	{r4, r5, pc}

000d6444 <_ZN11USARTSerialD0Ev>:
   d6444:	b510      	push	{r4, lr}
   d6446:	2114      	movs	r1, #20
   d6448:	4604      	mov	r4, r0
   d644a:	f000 fa38 	bl	d68be <_ZdlPvj>
   d644e:	4620      	mov	r0, r4
   d6450:	bd10      	pop	{r4, pc}
	...

000d6454 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6454:	b510      	push	{r4, lr}
   d6456:	f04f 0c00 	mov.w	ip, #0
   d645a:	4604      	mov	r4, r0
   d645c:	4608      	mov	r0, r1
   d645e:	4611      	mov	r1, r2
   d6460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6464:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6468:	4a04      	ldr	r2, [pc, #16]	; (d647c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d646a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d646c:	2201      	movs	r2, #1
  _serial = serial;
   d646e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6470:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6472:	461a      	mov	r2, r3
   d6474:	f7fe feb0 	bl	d51d8 <hal_usart_init>
}
   d6478:	4620      	mov	r0, r4
   d647a:	bd10      	pop	{r4, pc}
   d647c:	000d963c 	.word	0x000d963c

000d6480 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6480:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6482:	4c0e      	ldr	r4, [pc, #56]	; (d64bc <_Z22__fetch_global_Serial1v+0x3c>)
   d6484:	7821      	ldrb	r1, [r4, #0]
   d6486:	f3bf 8f5b 	dmb	ish
   d648a:	f011 0101 	ands.w	r1, r1, #1
   d648e:	d112      	bne.n	d64b6 <_Z22__fetch_global_Serial1v+0x36>
   d6490:	4620      	mov	r0, r4
   d6492:	9101      	str	r1, [sp, #4]
   d6494:	f7fd fe05 	bl	d40a2 <__cxa_guard_acquire>
   d6498:	9901      	ldr	r1, [sp, #4]
   d649a:	b160      	cbz	r0, d64b6 <_Z22__fetch_global_Serial1v+0x36>
   d649c:	4a08      	ldr	r2, [pc, #32]	; (d64c0 <_Z22__fetch_global_Serial1v+0x40>)
   d649e:	4b09      	ldr	r3, [pc, #36]	; (d64c4 <_Z22__fetch_global_Serial1v+0x44>)
   d64a0:	4809      	ldr	r0, [pc, #36]	; (d64c8 <_Z22__fetch_global_Serial1v+0x48>)
   d64a2:	f7ff ffd7 	bl	d6454 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d64a6:	4620      	mov	r0, r4
   d64a8:	f7fd fe00 	bl	d40ac <__cxa_guard_release>
   d64ac:	4a07      	ldr	r2, [pc, #28]	; (d64cc <_Z22__fetch_global_Serial1v+0x4c>)
   d64ae:	4908      	ldr	r1, [pc, #32]	; (d64d0 <_Z22__fetch_global_Serial1v+0x50>)
   d64b0:	4805      	ldr	r0, [pc, #20]	; (d64c8 <_Z22__fetch_global_Serial1v+0x48>)
   d64b2:	f000 f9ff 	bl	d68b4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d64b6:	4804      	ldr	r0, [pc, #16]	; (d64c8 <_Z22__fetch_global_Serial1v+0x48>)
   d64b8:	b002      	add	sp, #8
   d64ba:	bd10      	pop	{r4, pc}
   d64bc:	2003e680 	.word	0x2003e680
   d64c0:	2003e684 	.word	0x2003e684
   d64c4:	2003e708 	.word	0x2003e708
   d64c8:	2003e78c 	.word	0x2003e78c
   d64cc:	2003e498 	.word	0x2003e498
   d64d0:	000d63d9 	.word	0x000d63d9

000d64d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64d4:	7441      	strb	r1, [r0, #17]
}
   d64d6:	4770      	bx	lr

000d64d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d64d8:	4770      	bx	lr

000d64da <_ZN9USBSerial4readEv>:
{
   d64da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d64dc:	2100      	movs	r1, #0
   d64de:	7c00      	ldrb	r0, [r0, #16]
   d64e0:	f7fe feda 	bl	d5298 <HAL_USB_USART_Receive_Data>
}
   d64e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64e8:	bd08      	pop	{r3, pc}

000d64ea <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d64ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d64ec:	2101      	movs	r1, #1
   d64ee:	7c00      	ldrb	r0, [r0, #16]
   d64f0:	f7fe fed2 	bl	d5298 <HAL_USB_USART_Receive_Data>
}
   d64f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64f8:	bd08      	pop	{r3, pc}

000d64fa <_ZN9USBSerial17availableForWriteEv>:
{
   d64fa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d64fc:	7c00      	ldrb	r0, [r0, #16]
   d64fe:	f7fe fec3 	bl	d5288 <HAL_USB_USART_Available_Data_For_Write>
}
   d6502:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6506:	bd08      	pop	{r3, pc}

000d6508 <_ZN9USBSerial9availableEv>:
{
   d6508:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d650a:	7c00      	ldrb	r0, [r0, #16]
   d650c:	f7fe feb4 	bl	d5278 <HAL_USB_USART_Available_Data>
}
   d6510:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6514:	bd08      	pop	{r3, pc}

000d6516 <_ZN9USBSerial5writeEh>:
{
   d6516:	b513      	push	{r0, r1, r4, lr}
   d6518:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d651a:	7c00      	ldrb	r0, [r0, #16]
{
   d651c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d651e:	f7fe feb3 	bl	d5288 <HAL_USB_USART_Available_Data_For_Write>
   d6522:	2800      	cmp	r0, #0
   d6524:	9901      	ldr	r1, [sp, #4]
   d6526:	dc01      	bgt.n	d652c <_ZN9USBSerial5writeEh+0x16>
   d6528:	7c60      	ldrb	r0, [r4, #17]
   d652a:	b120      	cbz	r0, d6536 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d652c:	7c20      	ldrb	r0, [r4, #16]
   d652e:	f7fe febb 	bl	d52a8 <HAL_USB_USART_Send_Data>
   d6532:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6536:	b002      	add	sp, #8
   d6538:	bd10      	pop	{r4, pc}

000d653a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d653a:	7c00      	ldrb	r0, [r0, #16]
   d653c:	f7fe bebc 	b.w	d52b8 <HAL_USB_USART_Flush_Data>

000d6540 <_ZN9USBSerialD0Ev>:
   d6540:	b510      	push	{r4, lr}
   d6542:	2114      	movs	r1, #20
   d6544:	4604      	mov	r4, r0
   d6546:	f000 f9ba 	bl	d68be <_ZdlPvj>
   d654a:	4620      	mov	r0, r4
   d654c:	bd10      	pop	{r4, pc}
	...

000d6550 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6550:	b510      	push	{r4, lr}
   d6552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6556:	4604      	mov	r4, r0
   d6558:	4608      	mov	r0, r1
   d655a:	2100      	movs	r1, #0
   d655c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6560:	4b04      	ldr	r3, [pc, #16]	; (d6574 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6562:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6564:	2301      	movs	r3, #1
  _serial = serial;
   d6566:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6568:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d656a:	4611      	mov	r1, r2
   d656c:	f7fe fe74 	bl	d5258 <HAL_USB_USART_Init>
}
   d6570:	4620      	mov	r0, r4
   d6572:	bd10      	pop	{r4, pc}
   d6574:	000d966c 	.word	0x000d966c

000d6578 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6578:	7c00      	ldrb	r0, [r0, #16]
   d657a:	2200      	movs	r2, #0
   d657c:	f7fe be74 	b.w	d5268 <HAL_USB_USART_Begin>

000d6580 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6580:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6582:	2214      	movs	r2, #20
{
   d6584:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6586:	2100      	movs	r1, #0
   d6588:	f000 fea8 	bl	d72dc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d658c:	4620      	mov	r0, r4
   d658e:	bd10      	pop	{r4, pc}

000d6590 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6590:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6592:	4c10      	ldr	r4, [pc, #64]	; (d65d4 <_Z16_fetch_usbserialv+0x44>)
{
   d6594:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6596:	a803      	add	r0, sp, #12
   d6598:	f7ff fff2 	bl	d6580 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d659c:	7821      	ldrb	r1, [r4, #0]
   d659e:	f3bf 8f5b 	dmb	ish
   d65a2:	f011 0101 	ands.w	r1, r1, #1
   d65a6:	d111      	bne.n	d65cc <_Z16_fetch_usbserialv+0x3c>
   d65a8:	4620      	mov	r0, r4
   d65aa:	9101      	str	r1, [sp, #4]
   d65ac:	f7fd fd79 	bl	d40a2 <__cxa_guard_acquire>
   d65b0:	9901      	ldr	r1, [sp, #4]
   d65b2:	b158      	cbz	r0, d65cc <_Z16_fetch_usbserialv+0x3c>
   d65b4:	aa03      	add	r2, sp, #12
   d65b6:	4808      	ldr	r0, [pc, #32]	; (d65d8 <_Z16_fetch_usbserialv+0x48>)
   d65b8:	f7ff ffca 	bl	d6550 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d65bc:	4620      	mov	r0, r4
   d65be:	f7fd fd75 	bl	d40ac <__cxa_guard_release>
   d65c2:	4a06      	ldr	r2, [pc, #24]	; (d65dc <_Z16_fetch_usbserialv+0x4c>)
   d65c4:	4906      	ldr	r1, [pc, #24]	; (d65e0 <_Z16_fetch_usbserialv+0x50>)
   d65c6:	4804      	ldr	r0, [pc, #16]	; (d65d8 <_Z16_fetch_usbserialv+0x48>)
   d65c8:	f000 f974 	bl	d68b4 <__aeabi_atexit>
	return _usbserial;
}
   d65cc:	4802      	ldr	r0, [pc, #8]	; (d65d8 <_Z16_fetch_usbserialv+0x48>)
   d65ce:	b008      	add	sp, #32
   d65d0:	bd10      	pop	{r4, pc}
   d65d2:	bf00      	nop
   d65d4:	2003e7a0 	.word	0x2003e7a0
   d65d8:	2003e7a4 	.word	0x2003e7a4
   d65dc:	2003e498 	.word	0x2003e498
   d65e0:	000d64d9 	.word	0x000d64d9

000d65e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d65e4:	4b01      	ldr	r3, [pc, #4]	; (d65ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d65e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d65e8:	4770      	bx	lr
   d65ea:	bf00      	nop
   d65ec:	2003e2c4 	.word	0x2003e2c4

000d65f0 <serialEventRun>:
{
   d65f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d65f2:	4b0b      	ldr	r3, [pc, #44]	; (d6620 <serialEventRun+0x30>)
   d65f4:	b143      	cbz	r3, d6608 <serialEventRun+0x18>
   d65f6:	f7ff ffcb 	bl	d6590 <_Z16_fetch_usbserialv>
   d65fa:	6803      	ldr	r3, [r0, #0]
   d65fc:	691b      	ldr	r3, [r3, #16]
   d65fe:	4798      	blx	r3
   d6600:	2800      	cmp	r0, #0
   d6602:	dd01      	ble.n	d6608 <serialEventRun+0x18>
        serialEvent();
   d6604:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6608:	4b06      	ldr	r3, [pc, #24]	; (d6624 <serialEventRun+0x34>)
   d660a:	b143      	cbz	r3, d661e <serialEventRun+0x2e>
   d660c:	f7ff ff38 	bl	d6480 <_Z22__fetch_global_Serial1v>
   d6610:	6803      	ldr	r3, [r0, #0]
   d6612:	691b      	ldr	r3, [r3, #16]
   d6614:	4798      	blx	r3
   d6616:	2800      	cmp	r0, #0
   d6618:	dd01      	ble.n	d661e <serialEventRun+0x2e>
        serialEvent1();
   d661a:	f3af 8000 	nop.w
}
   d661e:	bd08      	pop	{r3, pc}
	...

000d6628 <_post_loop>:
{
   d6628:	b508      	push	{r3, lr}
	serialEventRun();
   d662a:	f7ff ffe1 	bl	d65f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d662e:	f7fe fcfb 	bl	d5028 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6632:	4b01      	ldr	r3, [pc, #4]	; (d6638 <_post_loop+0x10>)
   d6634:	6018      	str	r0, [r3, #0]
}
   d6636:	bd08      	pop	{r3, pc}
   d6638:	2003e7cc 	.word	0x2003e7cc

000d663c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d663c:	4802      	ldr	r0, [pc, #8]	; (d6648 <_Z33system_initialize_user_backup_ramv+0xc>)
   d663e:	4a03      	ldr	r2, [pc, #12]	; (d664c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6640:	4903      	ldr	r1, [pc, #12]	; (d6650 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6642:	1a12      	subs	r2, r2, r0
   d6644:	f000 be3c 	b.w	d72c0 <memcpy>
   d6648:	2003f400 	.word	0x2003f400
   d664c:	2003f404 	.word	0x2003f404
   d6650:	000d9930 	.word	0x000d9930

000d6654 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6654:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6656:	2300      	movs	r3, #0
   d6658:	9300      	str	r3, [sp, #0]
   d665a:	461a      	mov	r2, r3
   d665c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6660:	f7fe fe86 	bl	d5370 <system_ctrl_set_result>
}
   d6664:	b003      	add	sp, #12
   d6666:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d666c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d666c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d666e:	8843      	ldrh	r3, [r0, #2]
   d6670:	2b0a      	cmp	r3, #10
   d6672:	d008      	beq.n	d6686 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6674:	2b50      	cmp	r3, #80	; 0x50
   d6676:	d10b      	bne.n	d6690 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6678:	4b09      	ldr	r3, [pc, #36]	; (d66a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d667a:	681b      	ldr	r3, [r3, #0]
   d667c:	b14b      	cbz	r3, d6692 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d667e:	b003      	add	sp, #12
   d6680:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6684:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6686:	f7ff ffe5 	bl	d6654 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d668a:	b003      	add	sp, #12
   d668c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6690:	2300      	movs	r3, #0
   d6692:	9300      	str	r3, [sp, #0]
   d6694:	461a      	mov	r2, r3
   d6696:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d669a:	f7fe fe69 	bl	d5370 <system_ctrl_set_result>
}
   d669e:	e7f4      	b.n	d668a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d66a0:	2003e7bc 	.word	0x2003e7bc

000d66a4 <module_user_init_hook>:
{
   d66a4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d66a6:	4c12      	ldr	r4, [pc, #72]	; (d66f0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d66a8:	4812      	ldr	r0, [pc, #72]	; (d66f4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d66aa:	4d13      	ldr	r5, [pc, #76]	; (d66f8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d66ac:	2100      	movs	r1, #0
   d66ae:	f7fe ff4b 	bl	d5548 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d66b2:	6823      	ldr	r3, [r4, #0]
   d66b4:	42ab      	cmp	r3, r5
   d66b6:	4b11      	ldr	r3, [pc, #68]	; (d66fc <module_user_init_hook+0x58>)
   d66b8:	bf0c      	ite	eq
   d66ba:	2201      	moveq	r2, #1
   d66bc:	2200      	movne	r2, #0
   d66be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d66c0:	d002      	beq.n	d66c8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d66c2:	f7ff ffbb 	bl	d663c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d66c6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d66c8:	f7fe fc9e 	bl	d5008 <HAL_RNG_GetRandomNumber>
   d66cc:	4604      	mov	r4, r0
    srand(seed);
   d66ce:	f000 fe0d 	bl	d72ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d66d2:	4b0b      	ldr	r3, [pc, #44]	; (d6700 <module_user_init_hook+0x5c>)
   d66d4:	b113      	cbz	r3, d66dc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d66d6:	4620      	mov	r0, r4
   d66d8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d66dc:	2100      	movs	r1, #0
   d66de:	4808      	ldr	r0, [pc, #32]	; (d6700 <module_user_init_hook+0x5c>)
   d66e0:	f7fe feaa 	bl	d5438 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d66e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d66e8:	4806      	ldr	r0, [pc, #24]	; (d6704 <module_user_init_hook+0x60>)
   d66ea:	2100      	movs	r1, #0
   d66ec:	f7fe be36 	b.w	d535c <system_ctrl_set_app_request_handler>
   d66f0:	2003f400 	.word	0x2003f400
   d66f4:	000d65e5 	.word	0x000d65e5
   d66f8:	9a271c1e 	.word	0x9a271c1e
   d66fc:	2003e7b8 	.word	0x2003e7b8
   d6700:	00000000 	.word	0x00000000
   d6704:	000d666d 	.word	0x000d666d

000d6708 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d6708:	b508      	push	{r3, lr}
   d670a:	4b02      	ldr	r3, [pc, #8]	; (d6714 <spark_protocol_instance+0xc>)
   d670c:	681b      	ldr	r3, [r3, #0]
   d670e:	681b      	ldr	r3, [r3, #0]
   d6710:	9301      	str	r3, [sp, #4]
   d6712:	bd08      	pop	{r3, pc}
   d6714:	0003025c 	.word	0x0003025c

000d6718 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d6718:	b508      	push	{r3, lr}
   d671a:	4b02      	ldr	r3, [pc, #8]	; (d6724 <spark_protocol_set_product_id+0xc>)
   d671c:	681b      	ldr	r3, [r3, #0]
   d671e:	685b      	ldr	r3, [r3, #4]
   d6720:	9301      	str	r3, [sp, #4]
   d6722:	bd08      	pop	{r3, pc}
   d6724:	0003025c 	.word	0x0003025c

000d6728 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d6728:	b508      	push	{r3, lr}
   d672a:	4b02      	ldr	r3, [pc, #8]	; (d6734 <spark_protocol_set_product_firmware_version+0xc>)
   d672c:	681b      	ldr	r3, [r3, #0]
   d672e:	689b      	ldr	r3, [r3, #8]
   d6730:	9301      	str	r3, [sp, #4]
   d6732:	bd08      	pop	{r3, pc}
   d6734:	0003025c 	.word	0x0003025c

000d6738 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6738:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d673a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d673c:	d902      	bls.n	d6744 <pinAvailable+0xc>
    return false;
   d673e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6740:	b002      	add	sp, #8
   d6742:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6744:	f1a0 030b 	sub.w	r3, r0, #11
   d6748:	2b02      	cmp	r3, #2
   d674a:	d81a      	bhi.n	d6782 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d674c:	4c17      	ldr	r4, [pc, #92]	; (d67ac <pinAvailable+0x74>)
   d674e:	7821      	ldrb	r1, [r4, #0]
   d6750:	f3bf 8f5b 	dmb	ish
   d6754:	f011 0101 	ands.w	r1, r1, #1
   d6758:	d10b      	bne.n	d6772 <pinAvailable+0x3a>
   d675a:	4620      	mov	r0, r4
   d675c:	9101      	str	r1, [sp, #4]
   d675e:	f7fd fca0 	bl	d40a2 <__cxa_guard_acquire>
   d6762:	9901      	ldr	r1, [sp, #4]
   d6764:	b128      	cbz	r0, d6772 <pinAvailable+0x3a>
   d6766:	4812      	ldr	r0, [pc, #72]	; (d67b0 <pinAvailable+0x78>)
   d6768:	f7ff fcb2 	bl	d60d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d676c:	4620      	mov	r0, r4
   d676e:	f7fd fc9d 	bl	d40ac <__cxa_guard_release>
   d6772:	4b0f      	ldr	r3, [pc, #60]	; (d67b0 <pinAvailable+0x78>)
   d6774:	7818      	ldrb	r0, [r3, #0]
   d6776:	f7fe fd27 	bl	d51c8 <hal_spi_is_enabled>
   d677a:	2800      	cmp	r0, #0
   d677c:	d1df      	bne.n	d673e <pinAvailable+0x6>
  return true; // 'pin' is available
   d677e:	2001      	movs	r0, #1
   d6780:	e7de      	b.n	d6740 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6782:	2801      	cmp	r0, #1
   d6784:	d809      	bhi.n	d679a <pinAvailable+0x62>
   d6786:	f000 f86d 	bl	d6864 <_Z19__fetch_global_Wirev>
   d678a:	2100      	movs	r1, #0
   d678c:	7c00      	ldrb	r0, [r0, #16]
   d678e:	f7fe fce3 	bl	d5158 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6792:	f080 0001 	eor.w	r0, r0, #1
   d6796:	b2c0      	uxtb	r0, r0
   d6798:	e7d2      	b.n	d6740 <pinAvailable+0x8>
   d679a:	3809      	subs	r0, #9
   d679c:	2801      	cmp	r0, #1
   d679e:	d8ee      	bhi.n	d677e <pinAvailable+0x46>
   d67a0:	f7ff fe6e 	bl	d6480 <_Z22__fetch_global_Serial1v>
   d67a4:	7c00      	ldrb	r0, [r0, #16]
   d67a6:	f7fe fd47 	bl	d5238 <hal_usart_is_enabled>
   d67aa:	e7f2      	b.n	d6792 <pinAvailable+0x5a>
   d67ac:	2003e7c0 	.word	0x2003e7c0
   d67b0:	2003e7c4 	.word	0x2003e7c4

000d67b4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67b4:	2823      	cmp	r0, #35	; 0x23
{
   d67b6:	b538      	push	{r3, r4, r5, lr}
   d67b8:	4604      	mov	r4, r0
   d67ba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67bc:	d80a      	bhi.n	d67d4 <pinMode+0x20>
   d67be:	29ff      	cmp	r1, #255	; 0xff
   d67c0:	d008      	beq.n	d67d4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d67c2:	f7ff ffb9 	bl	d6738 <pinAvailable>
   d67c6:	b128      	cbz	r0, d67d4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d67c8:	4629      	mov	r1, r5
   d67ca:	4620      	mov	r0, r4
}
   d67cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d67d0:	f7fe bc6a 	b.w	d50a8 <HAL_Pin_Mode>
}
   d67d4:	bd38      	pop	{r3, r4, r5, pc}

000d67d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d67d6:	b538      	push	{r3, r4, r5, lr}
   d67d8:	4604      	mov	r4, r0
   d67da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d67dc:	f7fe fc6c 	bl	d50b8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d67e0:	28ff      	cmp	r0, #255	; 0xff
   d67e2:	d010      	beq.n	d6806 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d67e4:	2806      	cmp	r0, #6
   d67e6:	d804      	bhi.n	d67f2 <digitalWrite+0x1c>
   d67e8:	234d      	movs	r3, #77	; 0x4d
   d67ea:	fa23 f000 	lsr.w	r0, r3, r0
   d67ee:	07c3      	lsls	r3, r0, #31
   d67f0:	d409      	bmi.n	d6806 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d67f2:	4620      	mov	r0, r4
   d67f4:	f7ff ffa0 	bl	d6738 <pinAvailable>
   d67f8:	b128      	cbz	r0, d6806 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d67fa:	4629      	mov	r1, r5
   d67fc:	4620      	mov	r0, r4
}
   d67fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6802:	f7fe bc61 	b.w	d50c8 <HAL_GPIO_Write>
}
   d6806:	bd38      	pop	{r3, r4, r5, pc}

000d6808 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6808:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d680a:	4c08      	ldr	r4, [pc, #32]	; (d682c <_Z21__fetch_global_EEPROMv+0x24>)
   d680c:	7823      	ldrb	r3, [r4, #0]
   d680e:	f3bf 8f5b 	dmb	ish
   d6812:	07db      	lsls	r3, r3, #31
   d6814:	d408      	bmi.n	d6828 <_Z21__fetch_global_EEPROMv+0x20>
   d6816:	4620      	mov	r0, r4
   d6818:	f7fd fc43 	bl	d40a2 <__cxa_guard_acquire>
   d681c:	b120      	cbz	r0, d6828 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d681e:	f7fe fc0b 	bl	d5038 <HAL_EEPROM_Init>
   d6822:	4620      	mov	r0, r4
   d6824:	f7fd fc42 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6828:	4801      	ldr	r0, [pc, #4]	; (d6830 <_Z21__fetch_global_EEPROMv+0x28>)
   d682a:	bd10      	pop	{r4, pc}
   d682c:	2003e7d0 	.word	0x2003e7d0
   d6830:	2003e7d4 	.word	0x2003e7d4

000d6834 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6834:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6836:	2300      	movs	r3, #0
   d6838:	2520      	movs	r5, #32
   d683a:	8043      	strh	r3, [r0, #2]
   d683c:	2314      	movs	r3, #20
{
   d683e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6840:	8003      	strh	r3, [r0, #0]
   d6842:	6085      	str	r5, [r0, #8]
   d6844:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6846:	4906      	ldr	r1, [pc, #24]	; (d6860 <_Z17acquireWireBufferv+0x2c>)
   d6848:	4628      	mov	r0, r5
   d684a:	f000 f83a 	bl	d68c2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d684e:	4904      	ldr	r1, [pc, #16]	; (d6860 <_Z17acquireWireBufferv+0x2c>)
	};
   d6850:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6852:	4628      	mov	r0, r5
   d6854:	f000 f835 	bl	d68c2 <_ZnajRKSt9nothrow_t>
	};
   d6858:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d685a:	4620      	mov	r0, r4
   d685c:	bd38      	pop	{r3, r4, r5, pc}
   d685e:	bf00      	nop
   d6860:	000d9694 	.word	0x000d9694

000d6864 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6864:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6866:	4d0f      	ldr	r5, [pc, #60]	; (d68a4 <_Z19__fetch_global_Wirev+0x40>)
   d6868:	7829      	ldrb	r1, [r5, #0]
   d686a:	f3bf 8f5b 	dmb	ish
   d686e:	f011 0401 	ands.w	r4, r1, #1
{
   d6872:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6874:	d113      	bne.n	d689e <_Z19__fetch_global_Wirev+0x3a>
   d6876:	4628      	mov	r0, r5
   d6878:	f7fd fc13 	bl	d40a2 <__cxa_guard_acquire>
   d687c:	b178      	cbz	r0, d689e <_Z19__fetch_global_Wirev+0x3a>
   d687e:	a801      	add	r0, sp, #4
   d6880:	f7ff ffd8 	bl	d6834 <_Z17acquireWireBufferv>
   d6884:	aa01      	add	r2, sp, #4
   d6886:	4621      	mov	r1, r4
   d6888:	4807      	ldr	r0, [pc, #28]	; (d68a8 <_Z19__fetch_global_Wirev+0x44>)
   d688a:	f7ff fa3b 	bl	d5d04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d688e:	4628      	mov	r0, r5
   d6890:	f7fd fc0c 	bl	d40ac <__cxa_guard_release>
   d6894:	4a05      	ldr	r2, [pc, #20]	; (d68ac <_Z19__fetch_global_Wirev+0x48>)
   d6896:	4906      	ldr	r1, [pc, #24]	; (d68b0 <_Z19__fetch_global_Wirev+0x4c>)
   d6898:	4803      	ldr	r0, [pc, #12]	; (d68a8 <_Z19__fetch_global_Wirev+0x44>)
   d689a:	f000 f80b 	bl	d68b4 <__aeabi_atexit>
	return wire;
}
   d689e:	4802      	ldr	r0, [pc, #8]	; (d68a8 <_Z19__fetch_global_Wirev+0x44>)
   d68a0:	b007      	add	sp, #28
   d68a2:	bd30      	pop	{r4, r5, pc}
   d68a4:	2003e7d8 	.word	0x2003e7d8
   d68a8:	2003e7dc 	.word	0x2003e7dc
   d68ac:	2003e498 	.word	0x2003e498
   d68b0:	000d5cad 	.word	0x000d5cad

000d68b4 <__aeabi_atexit>:
   d68b4:	460b      	mov	r3, r1
   d68b6:	4601      	mov	r1, r0
   d68b8:	4618      	mov	r0, r3
   d68ba:	f000 bcf3 	b.w	d72a4 <__cxa_atexit>

000d68be <_ZdlPvj>:
   d68be:	f7fd bbee 	b.w	d409e <_ZdlPv>

000d68c2 <_ZnajRKSt9nothrow_t>:
   d68c2:	f7fd bbea 	b.w	d409a <_Znaj>

000d68c6 <_ZSt25__throw_bad_function_callv>:
   d68c6:	b508      	push	{r3, lr}
   d68c8:	f7fe fe2e 	bl	d5528 <abort>

000d68cc <__aeabi_drsub>:
   d68cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d68d0:	e002      	b.n	d68d8 <__adddf3>
   d68d2:	bf00      	nop

000d68d4 <__aeabi_dsub>:
   d68d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d68d8 <__adddf3>:
   d68d8:	b530      	push	{r4, r5, lr}
   d68da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d68de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d68e2:	ea94 0f05 	teq	r4, r5
   d68e6:	bf08      	it	eq
   d68e8:	ea90 0f02 	teqeq	r0, r2
   d68ec:	bf1f      	itttt	ne
   d68ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   d68f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d68f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d68fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d68fe:	f000 80e2 	beq.w	d6ac6 <__adddf3+0x1ee>
   d6902:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6906:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d690a:	bfb8      	it	lt
   d690c:	426d      	neglt	r5, r5
   d690e:	dd0c      	ble.n	d692a <__adddf3+0x52>
   d6910:	442c      	add	r4, r5
   d6912:	ea80 0202 	eor.w	r2, r0, r2
   d6916:	ea81 0303 	eor.w	r3, r1, r3
   d691a:	ea82 0000 	eor.w	r0, r2, r0
   d691e:	ea83 0101 	eor.w	r1, r3, r1
   d6922:	ea80 0202 	eor.w	r2, r0, r2
   d6926:	ea81 0303 	eor.w	r3, r1, r3
   d692a:	2d36      	cmp	r5, #54	; 0x36
   d692c:	bf88      	it	hi
   d692e:	bd30      	pophi	{r4, r5, pc}
   d6930:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6934:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6938:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d693c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6940:	d002      	beq.n	d6948 <__adddf3+0x70>
   d6942:	4240      	negs	r0, r0
   d6944:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6948:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d694c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6950:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6954:	d002      	beq.n	d695c <__adddf3+0x84>
   d6956:	4252      	negs	r2, r2
   d6958:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d695c:	ea94 0f05 	teq	r4, r5
   d6960:	f000 80a7 	beq.w	d6ab2 <__adddf3+0x1da>
   d6964:	f1a4 0401 	sub.w	r4, r4, #1
   d6968:	f1d5 0e20 	rsbs	lr, r5, #32
   d696c:	db0d      	blt.n	d698a <__adddf3+0xb2>
   d696e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6972:	fa22 f205 	lsr.w	r2, r2, r5
   d6976:	1880      	adds	r0, r0, r2
   d6978:	f141 0100 	adc.w	r1, r1, #0
   d697c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6980:	1880      	adds	r0, r0, r2
   d6982:	fa43 f305 	asr.w	r3, r3, r5
   d6986:	4159      	adcs	r1, r3
   d6988:	e00e      	b.n	d69a8 <__adddf3+0xd0>
   d698a:	f1a5 0520 	sub.w	r5, r5, #32
   d698e:	f10e 0e20 	add.w	lr, lr, #32
   d6992:	2a01      	cmp	r2, #1
   d6994:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6998:	bf28      	it	cs
   d699a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d699e:	fa43 f305 	asr.w	r3, r3, r5
   d69a2:	18c0      	adds	r0, r0, r3
   d69a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d69a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69ac:	d507      	bpl.n	d69be <__adddf3+0xe6>
   d69ae:	f04f 0e00 	mov.w	lr, #0
   d69b2:	f1dc 0c00 	rsbs	ip, ip, #0
   d69b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d69ba:	eb6e 0101 	sbc.w	r1, lr, r1
   d69be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d69c2:	d31b      	bcc.n	d69fc <__adddf3+0x124>
   d69c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d69c8:	d30c      	bcc.n	d69e4 <__adddf3+0x10c>
   d69ca:	0849      	lsrs	r1, r1, #1
   d69cc:	ea5f 0030 	movs.w	r0, r0, rrx
   d69d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d69d4:	f104 0401 	add.w	r4, r4, #1
   d69d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d69dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d69e0:	f080 809a 	bcs.w	d6b18 <__adddf3+0x240>
   d69e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d69e8:	bf08      	it	eq
   d69ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d69ee:	f150 0000 	adcs.w	r0, r0, #0
   d69f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d69f6:	ea41 0105 	orr.w	r1, r1, r5
   d69fa:	bd30      	pop	{r4, r5, pc}
   d69fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6a00:	4140      	adcs	r0, r0
   d6a02:	eb41 0101 	adc.w	r1, r1, r1
   d6a06:	3c01      	subs	r4, #1
   d6a08:	bf28      	it	cs
   d6a0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6a0e:	d2e9      	bcs.n	d69e4 <__adddf3+0x10c>
   d6a10:	f091 0f00 	teq	r1, #0
   d6a14:	bf04      	itt	eq
   d6a16:	4601      	moveq	r1, r0
   d6a18:	2000      	moveq	r0, #0
   d6a1a:	fab1 f381 	clz	r3, r1
   d6a1e:	bf08      	it	eq
   d6a20:	3320      	addeq	r3, #32
   d6a22:	f1a3 030b 	sub.w	r3, r3, #11
   d6a26:	f1b3 0220 	subs.w	r2, r3, #32
   d6a2a:	da0c      	bge.n	d6a46 <__adddf3+0x16e>
   d6a2c:	320c      	adds	r2, #12
   d6a2e:	dd08      	ble.n	d6a42 <__adddf3+0x16a>
   d6a30:	f102 0c14 	add.w	ip, r2, #20
   d6a34:	f1c2 020c 	rsb	r2, r2, #12
   d6a38:	fa01 f00c 	lsl.w	r0, r1, ip
   d6a3c:	fa21 f102 	lsr.w	r1, r1, r2
   d6a40:	e00c      	b.n	d6a5c <__adddf3+0x184>
   d6a42:	f102 0214 	add.w	r2, r2, #20
   d6a46:	bfd8      	it	le
   d6a48:	f1c2 0c20 	rsble	ip, r2, #32
   d6a4c:	fa01 f102 	lsl.w	r1, r1, r2
   d6a50:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6a54:	bfdc      	itt	le
   d6a56:	ea41 010c 	orrle.w	r1, r1, ip
   d6a5a:	4090      	lslle	r0, r2
   d6a5c:	1ae4      	subs	r4, r4, r3
   d6a5e:	bfa2      	ittt	ge
   d6a60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6a64:	4329      	orrge	r1, r5
   d6a66:	bd30      	popge	{r4, r5, pc}
   d6a68:	ea6f 0404 	mvn.w	r4, r4
   d6a6c:	3c1f      	subs	r4, #31
   d6a6e:	da1c      	bge.n	d6aaa <__adddf3+0x1d2>
   d6a70:	340c      	adds	r4, #12
   d6a72:	dc0e      	bgt.n	d6a92 <__adddf3+0x1ba>
   d6a74:	f104 0414 	add.w	r4, r4, #20
   d6a78:	f1c4 0220 	rsb	r2, r4, #32
   d6a7c:	fa20 f004 	lsr.w	r0, r0, r4
   d6a80:	fa01 f302 	lsl.w	r3, r1, r2
   d6a84:	ea40 0003 	orr.w	r0, r0, r3
   d6a88:	fa21 f304 	lsr.w	r3, r1, r4
   d6a8c:	ea45 0103 	orr.w	r1, r5, r3
   d6a90:	bd30      	pop	{r4, r5, pc}
   d6a92:	f1c4 040c 	rsb	r4, r4, #12
   d6a96:	f1c4 0220 	rsb	r2, r4, #32
   d6a9a:	fa20 f002 	lsr.w	r0, r0, r2
   d6a9e:	fa01 f304 	lsl.w	r3, r1, r4
   d6aa2:	ea40 0003 	orr.w	r0, r0, r3
   d6aa6:	4629      	mov	r1, r5
   d6aa8:	bd30      	pop	{r4, r5, pc}
   d6aaa:	fa21 f004 	lsr.w	r0, r1, r4
   d6aae:	4629      	mov	r1, r5
   d6ab0:	bd30      	pop	{r4, r5, pc}
   d6ab2:	f094 0f00 	teq	r4, #0
   d6ab6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6aba:	bf06      	itte	eq
   d6abc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6ac0:	3401      	addeq	r4, #1
   d6ac2:	3d01      	subne	r5, #1
   d6ac4:	e74e      	b.n	d6964 <__adddf3+0x8c>
   d6ac6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6aca:	bf18      	it	ne
   d6acc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ad0:	d029      	beq.n	d6b26 <__adddf3+0x24e>
   d6ad2:	ea94 0f05 	teq	r4, r5
   d6ad6:	bf08      	it	eq
   d6ad8:	ea90 0f02 	teqeq	r0, r2
   d6adc:	d005      	beq.n	d6aea <__adddf3+0x212>
   d6ade:	ea54 0c00 	orrs.w	ip, r4, r0
   d6ae2:	bf04      	itt	eq
   d6ae4:	4619      	moveq	r1, r3
   d6ae6:	4610      	moveq	r0, r2
   d6ae8:	bd30      	pop	{r4, r5, pc}
   d6aea:	ea91 0f03 	teq	r1, r3
   d6aee:	bf1e      	ittt	ne
   d6af0:	2100      	movne	r1, #0
   d6af2:	2000      	movne	r0, #0
   d6af4:	bd30      	popne	{r4, r5, pc}
   d6af6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6afa:	d105      	bne.n	d6b08 <__adddf3+0x230>
   d6afc:	0040      	lsls	r0, r0, #1
   d6afe:	4149      	adcs	r1, r1
   d6b00:	bf28      	it	cs
   d6b02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6b06:	bd30      	pop	{r4, r5, pc}
   d6b08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6b0c:	bf3c      	itt	cc
   d6b0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6b12:	bd30      	popcc	{r4, r5, pc}
   d6b14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6b1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b20:	f04f 0000 	mov.w	r0, #0
   d6b24:	bd30      	pop	{r4, r5, pc}
   d6b26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6b2a:	bf1a      	itte	ne
   d6b2c:	4619      	movne	r1, r3
   d6b2e:	4610      	movne	r0, r2
   d6b30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6b34:	bf1c      	itt	ne
   d6b36:	460b      	movne	r3, r1
   d6b38:	4602      	movne	r2, r0
   d6b3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6b3e:	bf06      	itte	eq
   d6b40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6b44:	ea91 0f03 	teqeq	r1, r3
   d6b48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6b4c:	bd30      	pop	{r4, r5, pc}
   d6b4e:	bf00      	nop

000d6b50 <__aeabi_ui2d>:
   d6b50:	f090 0f00 	teq	r0, #0
   d6b54:	bf04      	itt	eq
   d6b56:	2100      	moveq	r1, #0
   d6b58:	4770      	bxeq	lr
   d6b5a:	b530      	push	{r4, r5, lr}
   d6b5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b64:	f04f 0500 	mov.w	r5, #0
   d6b68:	f04f 0100 	mov.w	r1, #0
   d6b6c:	e750      	b.n	d6a10 <__adddf3+0x138>
   d6b6e:	bf00      	nop

000d6b70 <__aeabi_i2d>:
   d6b70:	f090 0f00 	teq	r0, #0
   d6b74:	bf04      	itt	eq
   d6b76:	2100      	moveq	r1, #0
   d6b78:	4770      	bxeq	lr
   d6b7a:	b530      	push	{r4, r5, lr}
   d6b7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6b88:	bf48      	it	mi
   d6b8a:	4240      	negmi	r0, r0
   d6b8c:	f04f 0100 	mov.w	r1, #0
   d6b90:	e73e      	b.n	d6a10 <__adddf3+0x138>
   d6b92:	bf00      	nop

000d6b94 <__aeabi_f2d>:
   d6b94:	0042      	lsls	r2, r0, #1
   d6b96:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6b9a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6b9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6ba2:	bf1f      	itttt	ne
   d6ba4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ba8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6bac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6bb0:	4770      	bxne	lr
   d6bb2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6bb6:	bf08      	it	eq
   d6bb8:	4770      	bxeq	lr
   d6bba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6bbe:	bf04      	itt	eq
   d6bc0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6bc4:	4770      	bxeq	lr
   d6bc6:	b530      	push	{r4, r5, lr}
   d6bc8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6bd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6bd4:	e71c      	b.n	d6a10 <__adddf3+0x138>
   d6bd6:	bf00      	nop

000d6bd8 <__aeabi_ul2d>:
   d6bd8:	ea50 0201 	orrs.w	r2, r0, r1
   d6bdc:	bf08      	it	eq
   d6bde:	4770      	bxeq	lr
   d6be0:	b530      	push	{r4, r5, lr}
   d6be2:	f04f 0500 	mov.w	r5, #0
   d6be6:	e00a      	b.n	d6bfe <__aeabi_l2d+0x16>

000d6be8 <__aeabi_l2d>:
   d6be8:	ea50 0201 	orrs.w	r2, r0, r1
   d6bec:	bf08      	it	eq
   d6bee:	4770      	bxeq	lr
   d6bf0:	b530      	push	{r4, r5, lr}
   d6bf2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6bf6:	d502      	bpl.n	d6bfe <__aeabi_l2d+0x16>
   d6bf8:	4240      	negs	r0, r0
   d6bfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6bfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c02:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6c0a:	f43f aed8 	beq.w	d69be <__adddf3+0xe6>
   d6c0e:	f04f 0203 	mov.w	r2, #3
   d6c12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c16:	bf18      	it	ne
   d6c18:	3203      	addne	r2, #3
   d6c1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c1e:	bf18      	it	ne
   d6c20:	3203      	addne	r2, #3
   d6c22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6c26:	f1c2 0320 	rsb	r3, r2, #32
   d6c2a:	fa00 fc03 	lsl.w	ip, r0, r3
   d6c2e:	fa20 f002 	lsr.w	r0, r0, r2
   d6c32:	fa01 fe03 	lsl.w	lr, r1, r3
   d6c36:	ea40 000e 	orr.w	r0, r0, lr
   d6c3a:	fa21 f102 	lsr.w	r1, r1, r2
   d6c3e:	4414      	add	r4, r2
   d6c40:	e6bd      	b.n	d69be <__adddf3+0xe6>
   d6c42:	bf00      	nop

000d6c44 <__aeabi_dmul>:
   d6c44:	b570      	push	{r4, r5, r6, lr}
   d6c46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c52:	bf1d      	ittte	ne
   d6c54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c58:	ea94 0f0c 	teqne	r4, ip
   d6c5c:	ea95 0f0c 	teqne	r5, ip
   d6c60:	f000 f8de 	bleq	d6e20 <__aeabi_dmul+0x1dc>
   d6c64:	442c      	add	r4, r5
   d6c66:	ea81 0603 	eor.w	r6, r1, r3
   d6c6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6c6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6c72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6c76:	bf18      	it	ne
   d6c78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6c84:	d038      	beq.n	d6cf8 <__aeabi_dmul+0xb4>
   d6c86:	fba0 ce02 	umull	ip, lr, r0, r2
   d6c8a:	f04f 0500 	mov.w	r5, #0
   d6c8e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6c92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6c96:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6c9a:	f04f 0600 	mov.w	r6, #0
   d6c9e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6ca2:	f09c 0f00 	teq	ip, #0
   d6ca6:	bf18      	it	ne
   d6ca8:	f04e 0e01 	orrne.w	lr, lr, #1
   d6cac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6cb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6cb4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6cb8:	d204      	bcs.n	d6cc4 <__aeabi_dmul+0x80>
   d6cba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6cbe:	416d      	adcs	r5, r5
   d6cc0:	eb46 0606 	adc.w	r6, r6, r6
   d6cc4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6cc8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6ccc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6cd0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6cd4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6cd8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6cdc:	bf88      	it	hi
   d6cde:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ce2:	d81e      	bhi.n	d6d22 <__aeabi_dmul+0xde>
   d6ce4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6ce8:	bf08      	it	eq
   d6cea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6cee:	f150 0000 	adcs.w	r0, r0, #0
   d6cf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cf6:	bd70      	pop	{r4, r5, r6, pc}
   d6cf8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6cfc:	ea46 0101 	orr.w	r1, r6, r1
   d6d00:	ea40 0002 	orr.w	r0, r0, r2
   d6d04:	ea81 0103 	eor.w	r1, r1, r3
   d6d08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6d0c:	bfc2      	ittt	gt
   d6d0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6d12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d16:	bd70      	popgt	{r4, r5, r6, pc}
   d6d18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d1c:	f04f 0e00 	mov.w	lr, #0
   d6d20:	3c01      	subs	r4, #1
   d6d22:	f300 80ab 	bgt.w	d6e7c <__aeabi_dmul+0x238>
   d6d26:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6d2a:	bfde      	ittt	le
   d6d2c:	2000      	movle	r0, #0
   d6d2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6d32:	bd70      	pople	{r4, r5, r6, pc}
   d6d34:	f1c4 0400 	rsb	r4, r4, #0
   d6d38:	3c20      	subs	r4, #32
   d6d3a:	da35      	bge.n	d6da8 <__aeabi_dmul+0x164>
   d6d3c:	340c      	adds	r4, #12
   d6d3e:	dc1b      	bgt.n	d6d78 <__aeabi_dmul+0x134>
   d6d40:	f104 0414 	add.w	r4, r4, #20
   d6d44:	f1c4 0520 	rsb	r5, r4, #32
   d6d48:	fa00 f305 	lsl.w	r3, r0, r5
   d6d4c:	fa20 f004 	lsr.w	r0, r0, r4
   d6d50:	fa01 f205 	lsl.w	r2, r1, r5
   d6d54:	ea40 0002 	orr.w	r0, r0, r2
   d6d58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6d5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6d64:	fa21 f604 	lsr.w	r6, r1, r4
   d6d68:	eb42 0106 	adc.w	r1, r2, r6
   d6d6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6d70:	bf08      	it	eq
   d6d72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6d76:	bd70      	pop	{r4, r5, r6, pc}
   d6d78:	f1c4 040c 	rsb	r4, r4, #12
   d6d7c:	f1c4 0520 	rsb	r5, r4, #32
   d6d80:	fa00 f304 	lsl.w	r3, r0, r4
   d6d84:	fa20 f005 	lsr.w	r0, r0, r5
   d6d88:	fa01 f204 	lsl.w	r2, r1, r4
   d6d8c:	ea40 0002 	orr.w	r0, r0, r2
   d6d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6d98:	f141 0100 	adc.w	r1, r1, #0
   d6d9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6da0:	bf08      	it	eq
   d6da2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6da6:	bd70      	pop	{r4, r5, r6, pc}
   d6da8:	f1c4 0520 	rsb	r5, r4, #32
   d6dac:	fa00 f205 	lsl.w	r2, r0, r5
   d6db0:	ea4e 0e02 	orr.w	lr, lr, r2
   d6db4:	fa20 f304 	lsr.w	r3, r0, r4
   d6db8:	fa01 f205 	lsl.w	r2, r1, r5
   d6dbc:	ea43 0302 	orr.w	r3, r3, r2
   d6dc0:	fa21 f004 	lsr.w	r0, r1, r4
   d6dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6dc8:	fa21 f204 	lsr.w	r2, r1, r4
   d6dcc:	ea20 0002 	bic.w	r0, r0, r2
   d6dd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6dd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6dd8:	bf08      	it	eq
   d6dda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6dde:	bd70      	pop	{r4, r5, r6, pc}
   d6de0:	f094 0f00 	teq	r4, #0
   d6de4:	d10f      	bne.n	d6e06 <__aeabi_dmul+0x1c2>
   d6de6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6dea:	0040      	lsls	r0, r0, #1
   d6dec:	eb41 0101 	adc.w	r1, r1, r1
   d6df0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6df4:	bf08      	it	eq
   d6df6:	3c01      	subeq	r4, #1
   d6df8:	d0f7      	beq.n	d6dea <__aeabi_dmul+0x1a6>
   d6dfa:	ea41 0106 	orr.w	r1, r1, r6
   d6dfe:	f095 0f00 	teq	r5, #0
   d6e02:	bf18      	it	ne
   d6e04:	4770      	bxne	lr
   d6e06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6e0a:	0052      	lsls	r2, r2, #1
   d6e0c:	eb43 0303 	adc.w	r3, r3, r3
   d6e10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6e14:	bf08      	it	eq
   d6e16:	3d01      	subeq	r5, #1
   d6e18:	d0f7      	beq.n	d6e0a <__aeabi_dmul+0x1c6>
   d6e1a:	ea43 0306 	orr.w	r3, r3, r6
   d6e1e:	4770      	bx	lr
   d6e20:	ea94 0f0c 	teq	r4, ip
   d6e24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e28:	bf18      	it	ne
   d6e2a:	ea95 0f0c 	teqne	r5, ip
   d6e2e:	d00c      	beq.n	d6e4a <__aeabi_dmul+0x206>
   d6e30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e34:	bf18      	it	ne
   d6e36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e3a:	d1d1      	bne.n	d6de0 <__aeabi_dmul+0x19c>
   d6e3c:	ea81 0103 	eor.w	r1, r1, r3
   d6e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e44:	f04f 0000 	mov.w	r0, #0
   d6e48:	bd70      	pop	{r4, r5, r6, pc}
   d6e4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e4e:	bf06      	itte	eq
   d6e50:	4610      	moveq	r0, r2
   d6e52:	4619      	moveq	r1, r3
   d6e54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e58:	d019      	beq.n	d6e8e <__aeabi_dmul+0x24a>
   d6e5a:	ea94 0f0c 	teq	r4, ip
   d6e5e:	d102      	bne.n	d6e66 <__aeabi_dmul+0x222>
   d6e60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6e64:	d113      	bne.n	d6e8e <__aeabi_dmul+0x24a>
   d6e66:	ea95 0f0c 	teq	r5, ip
   d6e6a:	d105      	bne.n	d6e78 <__aeabi_dmul+0x234>
   d6e6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6e70:	bf1c      	itt	ne
   d6e72:	4610      	movne	r0, r2
   d6e74:	4619      	movne	r1, r3
   d6e76:	d10a      	bne.n	d6e8e <__aeabi_dmul+0x24a>
   d6e78:	ea81 0103 	eor.w	r1, r1, r3
   d6e7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6e84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e88:	f04f 0000 	mov.w	r0, #0
   d6e8c:	bd70      	pop	{r4, r5, r6, pc}
   d6e8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6e92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6e96:	bd70      	pop	{r4, r5, r6, pc}

000d6e98 <__aeabi_ddiv>:
   d6e98:	b570      	push	{r4, r5, r6, lr}
   d6e9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6e9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ea6:	bf1d      	ittte	ne
   d6ea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6eac:	ea94 0f0c 	teqne	r4, ip
   d6eb0:	ea95 0f0c 	teqne	r5, ip
   d6eb4:	f000 f8a7 	bleq	d7006 <__aeabi_ddiv+0x16e>
   d6eb8:	eba4 0405 	sub.w	r4, r4, r5
   d6ebc:	ea81 0e03 	eor.w	lr, r1, r3
   d6ec0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6ec4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ec8:	f000 8088 	beq.w	d6fdc <__aeabi_ddiv+0x144>
   d6ecc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ed0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6ed4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6ed8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6edc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6ee0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6ee4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ee8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6eec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6ef0:	429d      	cmp	r5, r3
   d6ef2:	bf08      	it	eq
   d6ef4:	4296      	cmpeq	r6, r2
   d6ef6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6efa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6efe:	d202      	bcs.n	d6f06 <__aeabi_ddiv+0x6e>
   d6f00:	085b      	lsrs	r3, r3, #1
   d6f02:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f06:	1ab6      	subs	r6, r6, r2
   d6f08:	eb65 0503 	sbc.w	r5, r5, r3
   d6f0c:	085b      	lsrs	r3, r3, #1
   d6f0e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6f16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6f1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f22:	bf22      	ittt	cs
   d6f24:	1ab6      	subcs	r6, r6, r2
   d6f26:	4675      	movcs	r5, lr
   d6f28:	ea40 000c 	orrcs.w	r0, r0, ip
   d6f2c:	085b      	lsrs	r3, r3, #1
   d6f2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f32:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f3a:	bf22      	ittt	cs
   d6f3c:	1ab6      	subcs	r6, r6, r2
   d6f3e:	4675      	movcs	r5, lr
   d6f40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6f44:	085b      	lsrs	r3, r3, #1
   d6f46:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f52:	bf22      	ittt	cs
   d6f54:	1ab6      	subcs	r6, r6, r2
   d6f56:	4675      	movcs	r5, lr
   d6f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6f5c:	085b      	lsrs	r3, r3, #1
   d6f5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f62:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f6a:	bf22      	ittt	cs
   d6f6c:	1ab6      	subcs	r6, r6, r2
   d6f6e:	4675      	movcs	r5, lr
   d6f70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6f74:	ea55 0e06 	orrs.w	lr, r5, r6
   d6f78:	d018      	beq.n	d6fac <__aeabi_ddiv+0x114>
   d6f7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6f7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6f82:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6f86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6f8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6f8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6f92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6f96:	d1c0      	bne.n	d6f1a <__aeabi_ddiv+0x82>
   d6f98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f9c:	d10b      	bne.n	d6fb6 <__aeabi_ddiv+0x11e>
   d6f9e:	ea41 0100 	orr.w	r1, r1, r0
   d6fa2:	f04f 0000 	mov.w	r0, #0
   d6fa6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6faa:	e7b6      	b.n	d6f1a <__aeabi_ddiv+0x82>
   d6fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fb0:	bf04      	itt	eq
   d6fb2:	4301      	orreq	r1, r0
   d6fb4:	2000      	moveq	r0, #0
   d6fb6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fba:	bf88      	it	hi
   d6fbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6fc0:	f63f aeaf 	bhi.w	d6d22 <__aeabi_dmul+0xde>
   d6fc4:	ebb5 0c03 	subs.w	ip, r5, r3
   d6fc8:	bf04      	itt	eq
   d6fca:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6fce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6fd2:	f150 0000 	adcs.w	r0, r0, #0
   d6fd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6fda:	bd70      	pop	{r4, r5, r6, pc}
   d6fdc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6fe0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6fe4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6fe8:	bfc2      	ittt	gt
   d6fea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6fee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ff2:	bd70      	popgt	{r4, r5, r6, pc}
   d6ff4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ff8:	f04f 0e00 	mov.w	lr, #0
   d6ffc:	3c01      	subs	r4, #1
   d6ffe:	e690      	b.n	d6d22 <__aeabi_dmul+0xde>
   d7000:	ea45 0e06 	orr.w	lr, r5, r6
   d7004:	e68d      	b.n	d6d22 <__aeabi_dmul+0xde>
   d7006:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d700a:	ea94 0f0c 	teq	r4, ip
   d700e:	bf08      	it	eq
   d7010:	ea95 0f0c 	teqeq	r5, ip
   d7014:	f43f af3b 	beq.w	d6e8e <__aeabi_dmul+0x24a>
   d7018:	ea94 0f0c 	teq	r4, ip
   d701c:	d10a      	bne.n	d7034 <__aeabi_ddiv+0x19c>
   d701e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7022:	f47f af34 	bne.w	d6e8e <__aeabi_dmul+0x24a>
   d7026:	ea95 0f0c 	teq	r5, ip
   d702a:	f47f af25 	bne.w	d6e78 <__aeabi_dmul+0x234>
   d702e:	4610      	mov	r0, r2
   d7030:	4619      	mov	r1, r3
   d7032:	e72c      	b.n	d6e8e <__aeabi_dmul+0x24a>
   d7034:	ea95 0f0c 	teq	r5, ip
   d7038:	d106      	bne.n	d7048 <__aeabi_ddiv+0x1b0>
   d703a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d703e:	f43f aefd 	beq.w	d6e3c <__aeabi_dmul+0x1f8>
   d7042:	4610      	mov	r0, r2
   d7044:	4619      	mov	r1, r3
   d7046:	e722      	b.n	d6e8e <__aeabi_dmul+0x24a>
   d7048:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d704c:	bf18      	it	ne
   d704e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7052:	f47f aec5 	bne.w	d6de0 <__aeabi_dmul+0x19c>
   d7056:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d705a:	f47f af0d 	bne.w	d6e78 <__aeabi_dmul+0x234>
   d705e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7062:	f47f aeeb 	bne.w	d6e3c <__aeabi_dmul+0x1f8>
   d7066:	e712      	b.n	d6e8e <__aeabi_dmul+0x24a>

000d7068 <__gedf2>:
   d7068:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d706c:	e006      	b.n	d707c <__cmpdf2+0x4>
   d706e:	bf00      	nop

000d7070 <__ledf2>:
   d7070:	f04f 0c01 	mov.w	ip, #1
   d7074:	e002      	b.n	d707c <__cmpdf2+0x4>
   d7076:	bf00      	nop

000d7078 <__cmpdf2>:
   d7078:	f04f 0c01 	mov.w	ip, #1
   d707c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7088:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d708c:	bf18      	it	ne
   d708e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7092:	d01b      	beq.n	d70cc <__cmpdf2+0x54>
   d7094:	b001      	add	sp, #4
   d7096:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d709a:	bf0c      	ite	eq
   d709c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d70a0:	ea91 0f03 	teqne	r1, r3
   d70a4:	bf02      	ittt	eq
   d70a6:	ea90 0f02 	teqeq	r0, r2
   d70aa:	2000      	moveq	r0, #0
   d70ac:	4770      	bxeq	lr
   d70ae:	f110 0f00 	cmn.w	r0, #0
   d70b2:	ea91 0f03 	teq	r1, r3
   d70b6:	bf58      	it	pl
   d70b8:	4299      	cmppl	r1, r3
   d70ba:	bf08      	it	eq
   d70bc:	4290      	cmpeq	r0, r2
   d70be:	bf2c      	ite	cs
   d70c0:	17d8      	asrcs	r0, r3, #31
   d70c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d70c6:	f040 0001 	orr.w	r0, r0, #1
   d70ca:	4770      	bx	lr
   d70cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d70d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70d4:	d102      	bne.n	d70dc <__cmpdf2+0x64>
   d70d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d70da:	d107      	bne.n	d70ec <__cmpdf2+0x74>
   d70dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d70e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70e4:	d1d6      	bne.n	d7094 <__cmpdf2+0x1c>
   d70e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d70ea:	d0d3      	beq.n	d7094 <__cmpdf2+0x1c>
   d70ec:	f85d 0b04 	ldr.w	r0, [sp], #4
   d70f0:	4770      	bx	lr
   d70f2:	bf00      	nop

000d70f4 <__aeabi_cdrcmple>:
   d70f4:	4684      	mov	ip, r0
   d70f6:	4610      	mov	r0, r2
   d70f8:	4662      	mov	r2, ip
   d70fa:	468c      	mov	ip, r1
   d70fc:	4619      	mov	r1, r3
   d70fe:	4663      	mov	r3, ip
   d7100:	e000      	b.n	d7104 <__aeabi_cdcmpeq>
   d7102:	bf00      	nop

000d7104 <__aeabi_cdcmpeq>:
   d7104:	b501      	push	{r0, lr}
   d7106:	f7ff ffb7 	bl	d7078 <__cmpdf2>
   d710a:	2800      	cmp	r0, #0
   d710c:	bf48      	it	mi
   d710e:	f110 0f00 	cmnmi.w	r0, #0
   d7112:	bd01      	pop	{r0, pc}

000d7114 <__aeabi_dcmpeq>:
   d7114:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7118:	f7ff fff4 	bl	d7104 <__aeabi_cdcmpeq>
   d711c:	bf0c      	ite	eq
   d711e:	2001      	moveq	r0, #1
   d7120:	2000      	movne	r0, #0
   d7122:	f85d fb08 	ldr.w	pc, [sp], #8
   d7126:	bf00      	nop

000d7128 <__aeabi_dcmplt>:
   d7128:	f84d ed08 	str.w	lr, [sp, #-8]!
   d712c:	f7ff ffea 	bl	d7104 <__aeabi_cdcmpeq>
   d7130:	bf34      	ite	cc
   d7132:	2001      	movcc	r0, #1
   d7134:	2000      	movcs	r0, #0
   d7136:	f85d fb08 	ldr.w	pc, [sp], #8
   d713a:	bf00      	nop

000d713c <__aeabi_dcmple>:
   d713c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7140:	f7ff ffe0 	bl	d7104 <__aeabi_cdcmpeq>
   d7144:	bf94      	ite	ls
   d7146:	2001      	movls	r0, #1
   d7148:	2000      	movhi	r0, #0
   d714a:	f85d fb08 	ldr.w	pc, [sp], #8
   d714e:	bf00      	nop

000d7150 <__aeabi_dcmpge>:
   d7150:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7154:	f7ff ffce 	bl	d70f4 <__aeabi_cdrcmple>
   d7158:	bf94      	ite	ls
   d715a:	2001      	movls	r0, #1
   d715c:	2000      	movhi	r0, #0
   d715e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7162:	bf00      	nop

000d7164 <__aeabi_dcmpgt>:
   d7164:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7168:	f7ff ffc4 	bl	d70f4 <__aeabi_cdrcmple>
   d716c:	bf34      	ite	cc
   d716e:	2001      	movcc	r0, #1
   d7170:	2000      	movcs	r0, #0
   d7172:	f85d fb08 	ldr.w	pc, [sp], #8
   d7176:	bf00      	nop

000d7178 <__aeabi_d2uiz>:
   d7178:	004a      	lsls	r2, r1, #1
   d717a:	d211      	bcs.n	d71a0 <__aeabi_d2uiz+0x28>
   d717c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7180:	d211      	bcs.n	d71a6 <__aeabi_d2uiz+0x2e>
   d7182:	d50d      	bpl.n	d71a0 <__aeabi_d2uiz+0x28>
   d7184:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7188:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d718c:	d40e      	bmi.n	d71ac <__aeabi_d2uiz+0x34>
   d718e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7196:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d719a:	fa23 f002 	lsr.w	r0, r3, r2
   d719e:	4770      	bx	lr
   d71a0:	f04f 0000 	mov.w	r0, #0
   d71a4:	4770      	bx	lr
   d71a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d71aa:	d102      	bne.n	d71b2 <__aeabi_d2uiz+0x3a>
   d71ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d71b0:	4770      	bx	lr
   d71b2:	f04f 0000 	mov.w	r0, #0
   d71b6:	4770      	bx	lr

000d71b8 <__aeabi_d2f>:
   d71b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d71bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d71c0:	bf24      	itt	cs
   d71c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d71c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d71ca:	d90d      	bls.n	d71e8 <__aeabi_d2f+0x30>
   d71cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d71d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d71d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d71d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d71dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d71e0:	bf08      	it	eq
   d71e2:	f020 0001 	biceq.w	r0, r0, #1
   d71e6:	4770      	bx	lr
   d71e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d71ec:	d121      	bne.n	d7232 <__aeabi_d2f+0x7a>
   d71ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d71f2:	bfbc      	itt	lt
   d71f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d71f8:	4770      	bxlt	lr
   d71fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d71fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7202:	f1c2 0218 	rsb	r2, r2, #24
   d7206:	f1c2 0c20 	rsb	ip, r2, #32
   d720a:	fa10 f30c 	lsls.w	r3, r0, ip
   d720e:	fa20 f002 	lsr.w	r0, r0, r2
   d7212:	bf18      	it	ne
   d7214:	f040 0001 	orrne.w	r0, r0, #1
   d7218:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d721c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7220:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7224:	ea40 000c 	orr.w	r0, r0, ip
   d7228:	fa23 f302 	lsr.w	r3, r3, r2
   d722c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7230:	e7cc      	b.n	d71cc <__aeabi_d2f+0x14>
   d7232:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7236:	d107      	bne.n	d7248 <__aeabi_d2f+0x90>
   d7238:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d723c:	bf1e      	ittt	ne
   d723e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7242:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7246:	4770      	bxne	lr
   d7248:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d724c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7250:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7254:	4770      	bx	lr
   d7256:	bf00      	nop

000d7258 <__aeabi_d2ulz>:
   d7258:	b5d0      	push	{r4, r6, r7, lr}
   d725a:	4b0c      	ldr	r3, [pc, #48]	; (d728c <__aeabi_d2ulz+0x34>)
   d725c:	2200      	movs	r2, #0
   d725e:	4606      	mov	r6, r0
   d7260:	460f      	mov	r7, r1
   d7262:	f7ff fcef 	bl	d6c44 <__aeabi_dmul>
   d7266:	f7ff ff87 	bl	d7178 <__aeabi_d2uiz>
   d726a:	4604      	mov	r4, r0
   d726c:	f7ff fc70 	bl	d6b50 <__aeabi_ui2d>
   d7270:	4b07      	ldr	r3, [pc, #28]	; (d7290 <__aeabi_d2ulz+0x38>)
   d7272:	2200      	movs	r2, #0
   d7274:	f7ff fce6 	bl	d6c44 <__aeabi_dmul>
   d7278:	4602      	mov	r2, r0
   d727a:	460b      	mov	r3, r1
   d727c:	4630      	mov	r0, r6
   d727e:	4639      	mov	r1, r7
   d7280:	f7ff fb28 	bl	d68d4 <__aeabi_dsub>
   d7284:	f7ff ff78 	bl	d7178 <__aeabi_d2uiz>
   d7288:	4621      	mov	r1, r4
   d728a:	bdd0      	pop	{r4, r6, r7, pc}
   d728c:	3df00000 	.word	0x3df00000
   d7290:	41f00000 	.word	0x41f00000

000d7294 <atof>:
   d7294:	2100      	movs	r1, #0
   d7296:	f000 bed1 	b.w	d803c <strtod>

000d729a <atoi>:
   d729a:	220a      	movs	r2, #10
   d729c:	2100      	movs	r1, #0
   d729e:	f000 bf53 	b.w	d8148 <strtol>
	...

000d72a4 <__cxa_atexit>:
   d72a4:	b510      	push	{r4, lr}
   d72a6:	4c05      	ldr	r4, [pc, #20]	; (d72bc <__cxa_atexit+0x18>)
   d72a8:	4613      	mov	r3, r2
   d72aa:	b12c      	cbz	r4, d72b8 <__cxa_atexit+0x14>
   d72ac:	460a      	mov	r2, r1
   d72ae:	4601      	mov	r1, r0
   d72b0:	2002      	movs	r0, #2
   d72b2:	f3af 8000 	nop.w
   d72b6:	bd10      	pop	{r4, pc}
   d72b8:	4620      	mov	r0, r4
   d72ba:	e7fc      	b.n	d72b6 <__cxa_atexit+0x12>
   d72bc:	00000000 	.word	0x00000000

000d72c0 <memcpy>:
   d72c0:	440a      	add	r2, r1
   d72c2:	4291      	cmp	r1, r2
   d72c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d72c8:	d100      	bne.n	d72cc <memcpy+0xc>
   d72ca:	4770      	bx	lr
   d72cc:	b510      	push	{r4, lr}
   d72ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   d72d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d72d6:	4291      	cmp	r1, r2
   d72d8:	d1f9      	bne.n	d72ce <memcpy+0xe>
   d72da:	bd10      	pop	{r4, pc}

000d72dc <memset>:
   d72dc:	4402      	add	r2, r0
   d72de:	4603      	mov	r3, r0
   d72e0:	4293      	cmp	r3, r2
   d72e2:	d100      	bne.n	d72e6 <memset+0xa>
   d72e4:	4770      	bx	lr
   d72e6:	f803 1b01 	strb.w	r1, [r3], #1
   d72ea:	e7f9      	b.n	d72e0 <memset+0x4>

000d72ec <srand>:
   d72ec:	b538      	push	{r3, r4, r5, lr}
   d72ee:	4b0d      	ldr	r3, [pc, #52]	; (d7324 <srand+0x38>)
   d72f0:	681d      	ldr	r5, [r3, #0]
   d72f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d72f4:	4604      	mov	r4, r0
   d72f6:	b97b      	cbnz	r3, d7318 <srand+0x2c>
   d72f8:	2018      	movs	r0, #24
   d72fa:	f7fe f8f5 	bl	d54e8 <malloc>
   d72fe:	4a0a      	ldr	r2, [pc, #40]	; (d7328 <srand+0x3c>)
   d7300:	4b0a      	ldr	r3, [pc, #40]	; (d732c <srand+0x40>)
   d7302:	63a8      	str	r0, [r5, #56]	; 0x38
   d7304:	e9c0 2300 	strd	r2, r3, [r0]
   d7308:	4b09      	ldr	r3, [pc, #36]	; (d7330 <srand+0x44>)
   d730a:	6083      	str	r3, [r0, #8]
   d730c:	230b      	movs	r3, #11
   d730e:	8183      	strh	r3, [r0, #12]
   d7310:	2201      	movs	r2, #1
   d7312:	2300      	movs	r3, #0
   d7314:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7318:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d731a:	2200      	movs	r2, #0
   d731c:	611c      	str	r4, [r3, #16]
   d731e:	615a      	str	r2, [r3, #20]
   d7320:	bd38      	pop	{r3, r4, r5, pc}
   d7322:	bf00      	nop
   d7324:	2003e2c4 	.word	0x2003e2c4
   d7328:	abcd330e 	.word	0xabcd330e
   d732c:	e66d1234 	.word	0xe66d1234
   d7330:	0005deec 	.word	0x0005deec

000d7334 <strcmp>:
   d7334:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7338:	f811 3b01 	ldrb.w	r3, [r1], #1
   d733c:	2a01      	cmp	r2, #1
   d733e:	bf28      	it	cs
   d7340:	429a      	cmpcs	r2, r3
   d7342:	d0f7      	beq.n	d7334 <strcmp>
   d7344:	1ad0      	subs	r0, r2, r3
   d7346:	4770      	bx	lr

000d7348 <strcpy>:
   d7348:	4603      	mov	r3, r0
   d734a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d734e:	f803 2b01 	strb.w	r2, [r3], #1
   d7352:	2a00      	cmp	r2, #0
   d7354:	d1f9      	bne.n	d734a <strcpy+0x2>
   d7356:	4770      	bx	lr

000d7358 <strdup>:
   d7358:	4b02      	ldr	r3, [pc, #8]	; (d7364 <strdup+0xc>)
   d735a:	4601      	mov	r1, r0
   d735c:	6818      	ldr	r0, [r3, #0]
   d735e:	f000 b803 	b.w	d7368 <_strdup_r>
   d7362:	bf00      	nop
   d7364:	2003e2c4 	.word	0x2003e2c4

000d7368 <_strdup_r>:
   d7368:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d736a:	4604      	mov	r4, r0
   d736c:	4608      	mov	r0, r1
   d736e:	460d      	mov	r5, r1
   d7370:	f000 f80f 	bl	d7392 <strlen>
   d7374:	1c42      	adds	r2, r0, #1
   d7376:	4611      	mov	r1, r2
   d7378:	4620      	mov	r0, r4
   d737a:	9201      	str	r2, [sp, #4]
   d737c:	f7fe f8dc 	bl	d5538 <_malloc_r>
   d7380:	4604      	mov	r4, r0
   d7382:	b118      	cbz	r0, d738c <_strdup_r+0x24>
   d7384:	9a01      	ldr	r2, [sp, #4]
   d7386:	4629      	mov	r1, r5
   d7388:	f7ff ff9a 	bl	d72c0 <memcpy>
   d738c:	4620      	mov	r0, r4
   d738e:	b003      	add	sp, #12
   d7390:	bd30      	pop	{r4, r5, pc}

000d7392 <strlen>:
   d7392:	4603      	mov	r3, r0
   d7394:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7398:	2a00      	cmp	r2, #0
   d739a:	d1fb      	bne.n	d7394 <strlen+0x2>
   d739c:	1a18      	subs	r0, r3, r0
   d739e:	3801      	subs	r0, #1
   d73a0:	4770      	bx	lr

000d73a2 <strncmp>:
   d73a2:	b510      	push	{r4, lr}
   d73a4:	b16a      	cbz	r2, d73c2 <strncmp+0x20>
   d73a6:	3901      	subs	r1, #1
   d73a8:	1884      	adds	r4, r0, r2
   d73aa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d73ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d73b2:	4293      	cmp	r3, r2
   d73b4:	d103      	bne.n	d73be <strncmp+0x1c>
   d73b6:	42a0      	cmp	r0, r4
   d73b8:	d001      	beq.n	d73be <strncmp+0x1c>
   d73ba:	2b00      	cmp	r3, #0
   d73bc:	d1f5      	bne.n	d73aa <strncmp+0x8>
   d73be:	1a98      	subs	r0, r3, r2
   d73c0:	bd10      	pop	{r4, pc}
   d73c2:	4610      	mov	r0, r2
   d73c4:	e7fc      	b.n	d73c0 <strncmp+0x1e>

000d73c6 <strncpy>:
   d73c6:	b510      	push	{r4, lr}
   d73c8:	3901      	subs	r1, #1
   d73ca:	4603      	mov	r3, r0
   d73cc:	b132      	cbz	r2, d73dc <strncpy+0x16>
   d73ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d73d2:	f803 4b01 	strb.w	r4, [r3], #1
   d73d6:	3a01      	subs	r2, #1
   d73d8:	2c00      	cmp	r4, #0
   d73da:	d1f7      	bne.n	d73cc <strncpy+0x6>
   d73dc:	441a      	add	r2, r3
   d73de:	2100      	movs	r1, #0
   d73e0:	4293      	cmp	r3, r2
   d73e2:	d100      	bne.n	d73e6 <strncpy+0x20>
   d73e4:	bd10      	pop	{r4, pc}
   d73e6:	f803 1b01 	strb.w	r1, [r3], #1
   d73ea:	e7f9      	b.n	d73e0 <strncpy+0x1a>

000d73ec <sulp>:
   d73ec:	b570      	push	{r4, r5, r6, lr}
   d73ee:	4604      	mov	r4, r0
   d73f0:	460d      	mov	r5, r1
   d73f2:	ec45 4b10 	vmov	d0, r4, r5
   d73f6:	4616      	mov	r6, r2
   d73f8:	f001 fd1c 	bl	d8e34 <__ulp>
   d73fc:	ec51 0b10 	vmov	r0, r1, d0
   d7400:	b17e      	cbz	r6, d7422 <sulp+0x36>
   d7402:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7406:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d740a:	2b00      	cmp	r3, #0
   d740c:	dd09      	ble.n	d7422 <sulp+0x36>
   d740e:	051b      	lsls	r3, r3, #20
   d7410:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7414:	2400      	movs	r4, #0
   d7416:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d741a:	4622      	mov	r2, r4
   d741c:	462b      	mov	r3, r5
   d741e:	f7ff fc11 	bl	d6c44 <__aeabi_dmul>
   d7422:	bd70      	pop	{r4, r5, r6, pc}
   d7424:	0000      	movs	r0, r0
	...

000d7428 <_strtod_l>:
   d7428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d742c:	b0a3      	sub	sp, #140	; 0x8c
   d742e:	461f      	mov	r7, r3
   d7430:	2300      	movs	r3, #0
   d7432:	931e      	str	r3, [sp, #120]	; 0x78
   d7434:	4ba4      	ldr	r3, [pc, #656]	; (d76c8 <_strtod_l+0x2a0>)
   d7436:	9219      	str	r2, [sp, #100]	; 0x64
   d7438:	681b      	ldr	r3, [r3, #0]
   d743a:	9307      	str	r3, [sp, #28]
   d743c:	4604      	mov	r4, r0
   d743e:	4618      	mov	r0, r3
   d7440:	4688      	mov	r8, r1
   d7442:	f7ff ffa6 	bl	d7392 <strlen>
   d7446:	f04f 0a00 	mov.w	sl, #0
   d744a:	4605      	mov	r5, r0
   d744c:	f04f 0b00 	mov.w	fp, #0
   d7450:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7456:	781a      	ldrb	r2, [r3, #0]
   d7458:	2a2b      	cmp	r2, #43	; 0x2b
   d745a:	d04c      	beq.n	d74f6 <_strtod_l+0xce>
   d745c:	d839      	bhi.n	d74d2 <_strtod_l+0xaa>
   d745e:	2a0d      	cmp	r2, #13
   d7460:	d832      	bhi.n	d74c8 <_strtod_l+0xa0>
   d7462:	2a08      	cmp	r2, #8
   d7464:	d832      	bhi.n	d74cc <_strtod_l+0xa4>
   d7466:	2a00      	cmp	r2, #0
   d7468:	d03c      	beq.n	d74e4 <_strtod_l+0xbc>
   d746a:	2300      	movs	r3, #0
   d746c:	930e      	str	r3, [sp, #56]	; 0x38
   d746e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d7470:	7833      	ldrb	r3, [r6, #0]
   d7472:	2b30      	cmp	r3, #48	; 0x30
   d7474:	f040 80b4 	bne.w	d75e0 <_strtod_l+0x1b8>
   d7478:	7873      	ldrb	r3, [r6, #1]
   d747a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d747e:	2b58      	cmp	r3, #88	; 0x58
   d7480:	d16c      	bne.n	d755c <_strtod_l+0x134>
   d7482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	ab1e      	add	r3, sp, #120	; 0x78
   d7488:	9702      	str	r7, [sp, #8]
   d748a:	9300      	str	r3, [sp, #0]
   d748c:	4a8f      	ldr	r2, [pc, #572]	; (d76cc <_strtod_l+0x2a4>)
   d748e:	ab1f      	add	r3, sp, #124	; 0x7c
   d7490:	a91d      	add	r1, sp, #116	; 0x74
   d7492:	4620      	mov	r0, r4
   d7494:	f000 feca 	bl	d822c <__gethex>
   d7498:	f010 0707 	ands.w	r7, r0, #7
   d749c:	4605      	mov	r5, r0
   d749e:	d005      	beq.n	d74ac <_strtod_l+0x84>
   d74a0:	2f06      	cmp	r7, #6
   d74a2:	d12a      	bne.n	d74fa <_strtod_l+0xd2>
   d74a4:	3601      	adds	r6, #1
   d74a6:	2300      	movs	r3, #0
   d74a8:	961d      	str	r6, [sp, #116]	; 0x74
   d74aa:	930e      	str	r3, [sp, #56]	; 0x38
   d74ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d74ae:	2b00      	cmp	r3, #0
   d74b0:	f040 8596 	bne.w	d7fe0 <_strtod_l+0xbb8>
   d74b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d74b6:	b1db      	cbz	r3, d74f0 <_strtod_l+0xc8>
   d74b8:	4652      	mov	r2, sl
   d74ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d74be:	ec43 2b10 	vmov	d0, r2, r3
   d74c2:	b023      	add	sp, #140	; 0x8c
   d74c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74c8:	2a20      	cmp	r2, #32
   d74ca:	d1ce      	bne.n	d746a <_strtod_l+0x42>
   d74cc:	3301      	adds	r3, #1
   d74ce:	931d      	str	r3, [sp, #116]	; 0x74
   d74d0:	e7c0      	b.n	d7454 <_strtod_l+0x2c>
   d74d2:	2a2d      	cmp	r2, #45	; 0x2d
   d74d4:	d1c9      	bne.n	d746a <_strtod_l+0x42>
   d74d6:	2201      	movs	r2, #1
   d74d8:	920e      	str	r2, [sp, #56]	; 0x38
   d74da:	1c5a      	adds	r2, r3, #1
   d74dc:	921d      	str	r2, [sp, #116]	; 0x74
   d74de:	785b      	ldrb	r3, [r3, #1]
   d74e0:	2b00      	cmp	r3, #0
   d74e2:	d1c4      	bne.n	d746e <_strtod_l+0x46>
   d74e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d74e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d74ea:	2b00      	cmp	r3, #0
   d74ec:	f040 8576 	bne.w	d7fdc <_strtod_l+0xbb4>
   d74f0:	4652      	mov	r2, sl
   d74f2:	465b      	mov	r3, fp
   d74f4:	e7e3      	b.n	d74be <_strtod_l+0x96>
   d74f6:	2200      	movs	r2, #0
   d74f8:	e7ee      	b.n	d74d8 <_strtod_l+0xb0>
   d74fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d74fc:	b13a      	cbz	r2, d750e <_strtod_l+0xe6>
   d74fe:	2135      	movs	r1, #53	; 0x35
   d7500:	a820      	add	r0, sp, #128	; 0x80
   d7502:	f001 fd96 	bl	d9032 <__copybits>
   d7506:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7508:	4620      	mov	r0, r4
   d750a:	f001 f9cb 	bl	d88a4 <_Bfree>
   d750e:	3f01      	subs	r7, #1
   d7510:	2f05      	cmp	r7, #5
   d7512:	d807      	bhi.n	d7524 <_strtod_l+0xfc>
   d7514:	e8df f007 	tbb	[pc, r7]
   d7518:	1d180b0e 	.word	0x1d180b0e
   d751c:	030e      	.short	0x030e
   d751e:	f04f 0b00 	mov.w	fp, #0
   d7522:	46da      	mov	sl, fp
   d7524:	0728      	lsls	r0, r5, #28
   d7526:	d5c1      	bpl.n	d74ac <_strtod_l+0x84>
   d7528:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d752c:	e7be      	b.n	d74ac <_strtod_l+0x84>
   d752e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d7532:	e7f7      	b.n	d7524 <_strtod_l+0xfc>
   d7534:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d7538:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d753a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d753e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7542:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7546:	e7ed      	b.n	d7524 <_strtod_l+0xfc>
   d7548:	f8df b184 	ldr.w	fp, [pc, #388]	; d76d0 <_strtod_l+0x2a8>
   d754c:	f04f 0a00 	mov.w	sl, #0
   d7550:	e7e8      	b.n	d7524 <_strtod_l+0xfc>
   d7552:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7556:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d755a:	e7e3      	b.n	d7524 <_strtod_l+0xfc>
   d755c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d755e:	1c5a      	adds	r2, r3, #1
   d7560:	921d      	str	r2, [sp, #116]	; 0x74
   d7562:	785b      	ldrb	r3, [r3, #1]
   d7564:	2b30      	cmp	r3, #48	; 0x30
   d7566:	d0f9      	beq.n	d755c <_strtod_l+0x134>
   d7568:	2b00      	cmp	r3, #0
   d756a:	d09f      	beq.n	d74ac <_strtod_l+0x84>
   d756c:	2301      	movs	r3, #1
   d756e:	f04f 0900 	mov.w	r9, #0
   d7572:	9304      	str	r3, [sp, #16]
   d7574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7576:	930a      	str	r3, [sp, #40]	; 0x28
   d7578:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d757c:	464f      	mov	r7, r9
   d757e:	220a      	movs	r2, #10
   d7580:	981d      	ldr	r0, [sp, #116]	; 0x74
   d7582:	7806      	ldrb	r6, [r0, #0]
   d7584:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7588:	b2d9      	uxtb	r1, r3
   d758a:	2909      	cmp	r1, #9
   d758c:	d92a      	bls.n	d75e4 <_strtod_l+0x1bc>
   d758e:	9907      	ldr	r1, [sp, #28]
   d7590:	462a      	mov	r2, r5
   d7592:	f7ff ff06 	bl	d73a2 <strncmp>
   d7596:	b398      	cbz	r0, d7600 <_strtod_l+0x1d8>
   d7598:	2000      	movs	r0, #0
   d759a:	4633      	mov	r3, r6
   d759c:	463d      	mov	r5, r7
   d759e:	9007      	str	r0, [sp, #28]
   d75a0:	4602      	mov	r2, r0
   d75a2:	2b65      	cmp	r3, #101	; 0x65
   d75a4:	d001      	beq.n	d75aa <_strtod_l+0x182>
   d75a6:	2b45      	cmp	r3, #69	; 0x45
   d75a8:	d118      	bne.n	d75dc <_strtod_l+0x1b4>
   d75aa:	b91d      	cbnz	r5, d75b4 <_strtod_l+0x18c>
   d75ac:	9b04      	ldr	r3, [sp, #16]
   d75ae:	4303      	orrs	r3, r0
   d75b0:	d098      	beq.n	d74e4 <_strtod_l+0xbc>
   d75b2:	2500      	movs	r5, #0
   d75b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d75b8:	f108 0301 	add.w	r3, r8, #1
   d75bc:	931d      	str	r3, [sp, #116]	; 0x74
   d75be:	f898 3001 	ldrb.w	r3, [r8, #1]
   d75c2:	2b2b      	cmp	r3, #43	; 0x2b
   d75c4:	d075      	beq.n	d76b2 <_strtod_l+0x28a>
   d75c6:	2b2d      	cmp	r3, #45	; 0x2d
   d75c8:	d07b      	beq.n	d76c2 <_strtod_l+0x29a>
   d75ca:	f04f 0c00 	mov.w	ip, #0
   d75ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d75d2:	2909      	cmp	r1, #9
   d75d4:	f240 8082 	bls.w	d76dc <_strtod_l+0x2b4>
   d75d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d75dc:	2600      	movs	r6, #0
   d75de:	e09d      	b.n	d771c <_strtod_l+0x2f4>
   d75e0:	2300      	movs	r3, #0
   d75e2:	e7c4      	b.n	d756e <_strtod_l+0x146>
   d75e4:	2f08      	cmp	r7, #8
   d75e6:	bfd8      	it	le
   d75e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d75ea:	f100 0001 	add.w	r0, r0, #1
   d75ee:	bfda      	itte	le
   d75f0:	fb02 3301 	mlale	r3, r2, r1, r3
   d75f4:	9309      	strle	r3, [sp, #36]	; 0x24
   d75f6:	fb02 3909 	mlagt	r9, r2, r9, r3
   d75fa:	3701      	adds	r7, #1
   d75fc:	901d      	str	r0, [sp, #116]	; 0x74
   d75fe:	e7bf      	b.n	d7580 <_strtod_l+0x158>
   d7600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7602:	195a      	adds	r2, r3, r5
   d7604:	921d      	str	r2, [sp, #116]	; 0x74
   d7606:	5d5b      	ldrb	r3, [r3, r5]
   d7608:	2f00      	cmp	r7, #0
   d760a:	d037      	beq.n	d767c <_strtod_l+0x254>
   d760c:	9007      	str	r0, [sp, #28]
   d760e:	463d      	mov	r5, r7
   d7610:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d7614:	2a09      	cmp	r2, #9
   d7616:	d912      	bls.n	d763e <_strtod_l+0x216>
   d7618:	2201      	movs	r2, #1
   d761a:	e7c2      	b.n	d75a2 <_strtod_l+0x17a>
   d761c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d761e:	1c5a      	adds	r2, r3, #1
   d7620:	921d      	str	r2, [sp, #116]	; 0x74
   d7622:	785b      	ldrb	r3, [r3, #1]
   d7624:	3001      	adds	r0, #1
   d7626:	2b30      	cmp	r3, #48	; 0x30
   d7628:	d0f8      	beq.n	d761c <_strtod_l+0x1f4>
   d762a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d762e:	2a08      	cmp	r2, #8
   d7630:	f200 84db 	bhi.w	d7fea <_strtod_l+0xbc2>
   d7634:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d7636:	9007      	str	r0, [sp, #28]
   d7638:	2000      	movs	r0, #0
   d763a:	920a      	str	r2, [sp, #40]	; 0x28
   d763c:	4605      	mov	r5, r0
   d763e:	3b30      	subs	r3, #48	; 0x30
   d7640:	f100 0201 	add.w	r2, r0, #1
   d7644:	d014      	beq.n	d7670 <_strtod_l+0x248>
   d7646:	9907      	ldr	r1, [sp, #28]
   d7648:	4411      	add	r1, r2
   d764a:	9107      	str	r1, [sp, #28]
   d764c:	462a      	mov	r2, r5
   d764e:	eb00 0e05 	add.w	lr, r0, r5
   d7652:	210a      	movs	r1, #10
   d7654:	4572      	cmp	r2, lr
   d7656:	d113      	bne.n	d7680 <_strtod_l+0x258>
   d7658:	182a      	adds	r2, r5, r0
   d765a:	2a08      	cmp	r2, #8
   d765c:	f105 0501 	add.w	r5, r5, #1
   d7660:	4405      	add	r5, r0
   d7662:	dc1c      	bgt.n	d769e <_strtod_l+0x276>
   d7664:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7666:	220a      	movs	r2, #10
   d7668:	fb02 3301 	mla	r3, r2, r1, r3
   d766c:	9309      	str	r3, [sp, #36]	; 0x24
   d766e:	2200      	movs	r2, #0
   d7670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7672:	1c59      	adds	r1, r3, #1
   d7674:	911d      	str	r1, [sp, #116]	; 0x74
   d7676:	785b      	ldrb	r3, [r3, #1]
   d7678:	4610      	mov	r0, r2
   d767a:	e7c9      	b.n	d7610 <_strtod_l+0x1e8>
   d767c:	4638      	mov	r0, r7
   d767e:	e7d2      	b.n	d7626 <_strtod_l+0x1fe>
   d7680:	2a08      	cmp	r2, #8
   d7682:	dc04      	bgt.n	d768e <_strtod_l+0x266>
   d7684:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7686:	434e      	muls	r6, r1
   d7688:	9609      	str	r6, [sp, #36]	; 0x24
   d768a:	3201      	adds	r2, #1
   d768c:	e7e2      	b.n	d7654 <_strtod_l+0x22c>
   d768e:	f102 0c01 	add.w	ip, r2, #1
   d7692:	f1bc 0f10 	cmp.w	ip, #16
   d7696:	bfd8      	it	le
   d7698:	fb01 f909 	mulle.w	r9, r1, r9
   d769c:	e7f5      	b.n	d768a <_strtod_l+0x262>
   d769e:	2d10      	cmp	r5, #16
   d76a0:	bfdc      	itt	le
   d76a2:	220a      	movle	r2, #10
   d76a4:	fb02 3909 	mlale	r9, r2, r9, r3
   d76a8:	e7e1      	b.n	d766e <_strtod_l+0x246>
   d76aa:	2300      	movs	r3, #0
   d76ac:	9307      	str	r3, [sp, #28]
   d76ae:	2201      	movs	r2, #1
   d76b0:	e77c      	b.n	d75ac <_strtod_l+0x184>
   d76b2:	f04f 0c00 	mov.w	ip, #0
   d76b6:	f108 0302 	add.w	r3, r8, #2
   d76ba:	931d      	str	r3, [sp, #116]	; 0x74
   d76bc:	f898 3002 	ldrb.w	r3, [r8, #2]
   d76c0:	e785      	b.n	d75ce <_strtod_l+0x1a6>
   d76c2:	f04f 0c01 	mov.w	ip, #1
   d76c6:	e7f6      	b.n	d76b6 <_strtod_l+0x28e>
   d76c8:	000d97fc 	.word	0x000d97fc
   d76cc:	000d96a4 	.word	0x000d96a4
   d76d0:	7ff00000 	.word	0x7ff00000
   d76d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d76d6:	1c59      	adds	r1, r3, #1
   d76d8:	911d      	str	r1, [sp, #116]	; 0x74
   d76da:	785b      	ldrb	r3, [r3, #1]
   d76dc:	2b30      	cmp	r3, #48	; 0x30
   d76de:	d0f9      	beq.n	d76d4 <_strtod_l+0x2ac>
   d76e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d76e4:	2908      	cmp	r1, #8
   d76e6:	f63f af79 	bhi.w	d75dc <_strtod_l+0x1b4>
   d76ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d76ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d76f0:	9308      	str	r3, [sp, #32]
   d76f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d76f4:	1c59      	adds	r1, r3, #1
   d76f6:	911d      	str	r1, [sp, #116]	; 0x74
   d76f8:	785b      	ldrb	r3, [r3, #1]
   d76fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d76fe:	2e09      	cmp	r6, #9
   d7700:	d937      	bls.n	d7772 <_strtod_l+0x34a>
   d7702:	9e08      	ldr	r6, [sp, #32]
   d7704:	1b89      	subs	r1, r1, r6
   d7706:	2908      	cmp	r1, #8
   d7708:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d770c:	dc02      	bgt.n	d7714 <_strtod_l+0x2ec>
   d770e:	4576      	cmp	r6, lr
   d7710:	bfa8      	it	ge
   d7712:	4676      	movge	r6, lr
   d7714:	f1bc 0f00 	cmp.w	ip, #0
   d7718:	d000      	beq.n	d771c <_strtod_l+0x2f4>
   d771a:	4276      	negs	r6, r6
   d771c:	2d00      	cmp	r5, #0
   d771e:	d14f      	bne.n	d77c0 <_strtod_l+0x398>
   d7720:	9904      	ldr	r1, [sp, #16]
   d7722:	4301      	orrs	r1, r0
   d7724:	f47f aec2 	bne.w	d74ac <_strtod_l+0x84>
   d7728:	2a00      	cmp	r2, #0
   d772a:	f47f aedb 	bne.w	d74e4 <_strtod_l+0xbc>
   d772e:	2b69      	cmp	r3, #105	; 0x69
   d7730:	d027      	beq.n	d7782 <_strtod_l+0x35a>
   d7732:	dc24      	bgt.n	d777e <_strtod_l+0x356>
   d7734:	2b49      	cmp	r3, #73	; 0x49
   d7736:	d024      	beq.n	d7782 <_strtod_l+0x35a>
   d7738:	2b4e      	cmp	r3, #78	; 0x4e
   d773a:	f47f aed3 	bne.w	d74e4 <_strtod_l+0xbc>
   d773e:	499e      	ldr	r1, [pc, #632]	; (d79b8 <_strtod_l+0x590>)
   d7740:	a81d      	add	r0, sp, #116	; 0x74
   d7742:	f000 ffb9 	bl	d86b8 <__match>
   d7746:	2800      	cmp	r0, #0
   d7748:	f43f aecc 	beq.w	d74e4 <_strtod_l+0xbc>
   d774c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d774e:	781b      	ldrb	r3, [r3, #0]
   d7750:	2b28      	cmp	r3, #40	; 0x28
   d7752:	d12d      	bne.n	d77b0 <_strtod_l+0x388>
   d7754:	4999      	ldr	r1, [pc, #612]	; (d79bc <_strtod_l+0x594>)
   d7756:	aa20      	add	r2, sp, #128	; 0x80
   d7758:	a81d      	add	r0, sp, #116	; 0x74
   d775a:	f000 ffc1 	bl	d86e0 <__hexnan>
   d775e:	2805      	cmp	r0, #5
   d7760:	d126      	bne.n	d77b0 <_strtod_l+0x388>
   d7762:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d7764:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d7768:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d776c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7770:	e69c      	b.n	d74ac <_strtod_l+0x84>
   d7772:	210a      	movs	r1, #10
   d7774:	fb01 3e0e 	mla	lr, r1, lr, r3
   d7778:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d777c:	e7b9      	b.n	d76f2 <_strtod_l+0x2ca>
   d777e:	2b6e      	cmp	r3, #110	; 0x6e
   d7780:	e7db      	b.n	d773a <_strtod_l+0x312>
   d7782:	498f      	ldr	r1, [pc, #572]	; (d79c0 <_strtod_l+0x598>)
   d7784:	a81d      	add	r0, sp, #116	; 0x74
   d7786:	f000 ff97 	bl	d86b8 <__match>
   d778a:	2800      	cmp	r0, #0
   d778c:	f43f aeaa 	beq.w	d74e4 <_strtod_l+0xbc>
   d7790:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7792:	498c      	ldr	r1, [pc, #560]	; (d79c4 <_strtod_l+0x59c>)
   d7794:	3b01      	subs	r3, #1
   d7796:	a81d      	add	r0, sp, #116	; 0x74
   d7798:	931d      	str	r3, [sp, #116]	; 0x74
   d779a:	f000 ff8d 	bl	d86b8 <__match>
   d779e:	b910      	cbnz	r0, d77a6 <_strtod_l+0x37e>
   d77a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d77a2:	3301      	adds	r3, #1
   d77a4:	931d      	str	r3, [sp, #116]	; 0x74
   d77a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d79d4 <_strtod_l+0x5ac>
   d77aa:	f04f 0a00 	mov.w	sl, #0
   d77ae:	e67d      	b.n	d74ac <_strtod_l+0x84>
   d77b0:	4885      	ldr	r0, [pc, #532]	; (d79c8 <_strtod_l+0x5a0>)
   d77b2:	f001 fc91 	bl	d90d8 <nan>
   d77b6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d77ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d77be:	e675      	b.n	d74ac <_strtod_l+0x84>
   d77c0:	9b07      	ldr	r3, [sp, #28]
   d77c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d77c4:	1af3      	subs	r3, r6, r3
   d77c6:	2f00      	cmp	r7, #0
   d77c8:	bf08      	it	eq
   d77ca:	462f      	moveq	r7, r5
   d77cc:	2d10      	cmp	r5, #16
   d77ce:	9308      	str	r3, [sp, #32]
   d77d0:	46a8      	mov	r8, r5
   d77d2:	bfa8      	it	ge
   d77d4:	f04f 0810 	movge.w	r8, #16
   d77d8:	f7ff f9ba 	bl	d6b50 <__aeabi_ui2d>
   d77dc:	2d09      	cmp	r5, #9
   d77de:	4682      	mov	sl, r0
   d77e0:	468b      	mov	fp, r1
   d77e2:	dd13      	ble.n	d780c <_strtod_l+0x3e4>
   d77e4:	4b79      	ldr	r3, [pc, #484]	; (d79cc <_strtod_l+0x5a4>)
   d77e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d77ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d77ee:	f7ff fa29 	bl	d6c44 <__aeabi_dmul>
   d77f2:	4682      	mov	sl, r0
   d77f4:	4648      	mov	r0, r9
   d77f6:	468b      	mov	fp, r1
   d77f8:	f7ff f9aa 	bl	d6b50 <__aeabi_ui2d>
   d77fc:	4602      	mov	r2, r0
   d77fe:	460b      	mov	r3, r1
   d7800:	4650      	mov	r0, sl
   d7802:	4659      	mov	r1, fp
   d7804:	f7ff f868 	bl	d68d8 <__adddf3>
   d7808:	4682      	mov	sl, r0
   d780a:	468b      	mov	fp, r1
   d780c:	2d0f      	cmp	r5, #15
   d780e:	dc38      	bgt.n	d7882 <_strtod_l+0x45a>
   d7810:	9b08      	ldr	r3, [sp, #32]
   d7812:	2b00      	cmp	r3, #0
   d7814:	f43f ae4a 	beq.w	d74ac <_strtod_l+0x84>
   d7818:	dd24      	ble.n	d7864 <_strtod_l+0x43c>
   d781a:	2b16      	cmp	r3, #22
   d781c:	dc0b      	bgt.n	d7836 <_strtod_l+0x40e>
   d781e:	4d6b      	ldr	r5, [pc, #428]	; (d79cc <_strtod_l+0x5a4>)
   d7820:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d7824:	e9d5 0100 	ldrd	r0, r1, [r5]
   d7828:	4652      	mov	r2, sl
   d782a:	465b      	mov	r3, fp
   d782c:	f7ff fa0a 	bl	d6c44 <__aeabi_dmul>
   d7830:	4682      	mov	sl, r0
   d7832:	468b      	mov	fp, r1
   d7834:	e63a      	b.n	d74ac <_strtod_l+0x84>
   d7836:	9a08      	ldr	r2, [sp, #32]
   d7838:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d783c:	4293      	cmp	r3, r2
   d783e:	db20      	blt.n	d7882 <_strtod_l+0x45a>
   d7840:	4c62      	ldr	r4, [pc, #392]	; (d79cc <_strtod_l+0x5a4>)
   d7842:	f1c5 050f 	rsb	r5, r5, #15
   d7846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d784a:	4652      	mov	r2, sl
   d784c:	465b      	mov	r3, fp
   d784e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7852:	f7ff f9f7 	bl	d6c44 <__aeabi_dmul>
   d7856:	9b08      	ldr	r3, [sp, #32]
   d7858:	1b5d      	subs	r5, r3, r5
   d785a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d785e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7862:	e7e3      	b.n	d782c <_strtod_l+0x404>
   d7864:	9b08      	ldr	r3, [sp, #32]
   d7866:	3316      	adds	r3, #22
   d7868:	db0b      	blt.n	d7882 <_strtod_l+0x45a>
   d786a:	9b07      	ldr	r3, [sp, #28]
   d786c:	4a57      	ldr	r2, [pc, #348]	; (d79cc <_strtod_l+0x5a4>)
   d786e:	1b9e      	subs	r6, r3, r6
   d7870:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d7874:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7878:	4650      	mov	r0, sl
   d787a:	4659      	mov	r1, fp
   d787c:	f7ff fb0c 	bl	d6e98 <__aeabi_ddiv>
   d7880:	e7d6      	b.n	d7830 <_strtod_l+0x408>
   d7882:	9b08      	ldr	r3, [sp, #32]
   d7884:	eba5 0808 	sub.w	r8, r5, r8
   d7888:	4498      	add	r8, r3
   d788a:	f1b8 0f00 	cmp.w	r8, #0
   d788e:	dd71      	ble.n	d7974 <_strtod_l+0x54c>
   d7890:	f018 030f 	ands.w	r3, r8, #15
   d7894:	d00a      	beq.n	d78ac <_strtod_l+0x484>
   d7896:	494d      	ldr	r1, [pc, #308]	; (d79cc <_strtod_l+0x5a4>)
   d7898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d789c:	4652      	mov	r2, sl
   d789e:	465b      	mov	r3, fp
   d78a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d78a4:	f7ff f9ce 	bl	d6c44 <__aeabi_dmul>
   d78a8:	4682      	mov	sl, r0
   d78aa:	468b      	mov	fp, r1
   d78ac:	f038 080f 	bics.w	r8, r8, #15
   d78b0:	d04d      	beq.n	d794e <_strtod_l+0x526>
   d78b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d78b6:	dd22      	ble.n	d78fe <_strtod_l+0x4d6>
   d78b8:	2500      	movs	r5, #0
   d78ba:	462e      	mov	r6, r5
   d78bc:	9509      	str	r5, [sp, #36]	; 0x24
   d78be:	9507      	str	r5, [sp, #28]
   d78c0:	2322      	movs	r3, #34	; 0x22
   d78c2:	f8df b110 	ldr.w	fp, [pc, #272]	; d79d4 <_strtod_l+0x5ac>
   d78c6:	6023      	str	r3, [r4, #0]
   d78c8:	f04f 0a00 	mov.w	sl, #0
   d78cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d78ce:	2b00      	cmp	r3, #0
   d78d0:	f43f adec 	beq.w	d74ac <_strtod_l+0x84>
   d78d4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d78d6:	4620      	mov	r0, r4
   d78d8:	f000 ffe4 	bl	d88a4 <_Bfree>
   d78dc:	9907      	ldr	r1, [sp, #28]
   d78de:	4620      	mov	r0, r4
   d78e0:	f000 ffe0 	bl	d88a4 <_Bfree>
   d78e4:	4631      	mov	r1, r6
   d78e6:	4620      	mov	r0, r4
   d78e8:	f000 ffdc 	bl	d88a4 <_Bfree>
   d78ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   d78ee:	4620      	mov	r0, r4
   d78f0:	f000 ffd8 	bl	d88a4 <_Bfree>
   d78f4:	4629      	mov	r1, r5
   d78f6:	4620      	mov	r0, r4
   d78f8:	f000 ffd4 	bl	d88a4 <_Bfree>
   d78fc:	e5d6      	b.n	d74ac <_strtod_l+0x84>
   d78fe:	2300      	movs	r3, #0
   d7900:	ea4f 1828 	mov.w	r8, r8, asr #4
   d7904:	4650      	mov	r0, sl
   d7906:	4659      	mov	r1, fp
   d7908:	4699      	mov	r9, r3
   d790a:	f1b8 0f01 	cmp.w	r8, #1
   d790e:	dc21      	bgt.n	d7954 <_strtod_l+0x52c>
   d7910:	b10b      	cbz	r3, d7916 <_strtod_l+0x4ee>
   d7912:	4682      	mov	sl, r0
   d7914:	468b      	mov	fp, r1
   d7916:	4b2e      	ldr	r3, [pc, #184]	; (d79d0 <_strtod_l+0x5a8>)
   d7918:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d791c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d7920:	4652      	mov	r2, sl
   d7922:	465b      	mov	r3, fp
   d7924:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7928:	f7ff f98c 	bl	d6c44 <__aeabi_dmul>
   d792c:	4b29      	ldr	r3, [pc, #164]	; (d79d4 <_strtod_l+0x5ac>)
   d792e:	460a      	mov	r2, r1
   d7930:	400b      	ands	r3, r1
   d7932:	4929      	ldr	r1, [pc, #164]	; (d79d8 <_strtod_l+0x5b0>)
   d7934:	428b      	cmp	r3, r1
   d7936:	4682      	mov	sl, r0
   d7938:	d8be      	bhi.n	d78b8 <_strtod_l+0x490>
   d793a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d793e:	428b      	cmp	r3, r1
   d7940:	bf86      	itte	hi
   d7942:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d79dc <_strtod_l+0x5b4>
   d7946:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d794a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d794e:	2300      	movs	r3, #0
   d7950:	9304      	str	r3, [sp, #16]
   d7952:	e081      	b.n	d7a58 <_strtod_l+0x630>
   d7954:	f018 0f01 	tst.w	r8, #1
   d7958:	d007      	beq.n	d796a <_strtod_l+0x542>
   d795a:	4b1d      	ldr	r3, [pc, #116]	; (d79d0 <_strtod_l+0x5a8>)
   d795c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7960:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7964:	f7ff f96e 	bl	d6c44 <__aeabi_dmul>
   d7968:	2301      	movs	r3, #1
   d796a:	f109 0901 	add.w	r9, r9, #1
   d796e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7972:	e7ca      	b.n	d790a <_strtod_l+0x4e2>
   d7974:	d0eb      	beq.n	d794e <_strtod_l+0x526>
   d7976:	f1c8 0800 	rsb	r8, r8, #0
   d797a:	f018 020f 	ands.w	r2, r8, #15
   d797e:	d00a      	beq.n	d7996 <_strtod_l+0x56e>
   d7980:	4b12      	ldr	r3, [pc, #72]	; (d79cc <_strtod_l+0x5a4>)
   d7982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7986:	4650      	mov	r0, sl
   d7988:	4659      	mov	r1, fp
   d798a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d798e:	f7ff fa83 	bl	d6e98 <__aeabi_ddiv>
   d7992:	4682      	mov	sl, r0
   d7994:	468b      	mov	fp, r1
   d7996:	ea5f 1828 	movs.w	r8, r8, asr #4
   d799a:	d0d8      	beq.n	d794e <_strtod_l+0x526>
   d799c:	f1b8 0f1f 	cmp.w	r8, #31
   d79a0:	dd1e      	ble.n	d79e0 <_strtod_l+0x5b8>
   d79a2:	2500      	movs	r5, #0
   d79a4:	462e      	mov	r6, r5
   d79a6:	9509      	str	r5, [sp, #36]	; 0x24
   d79a8:	9507      	str	r5, [sp, #28]
   d79aa:	2322      	movs	r3, #34	; 0x22
   d79ac:	f04f 0a00 	mov.w	sl, #0
   d79b0:	f04f 0b00 	mov.w	fp, #0
   d79b4:	6023      	str	r3, [r4, #0]
   d79b6:	e789      	b.n	d78cc <_strtod_l+0x4a4>
   d79b8:	000d969e 	.word	0x000d969e
   d79bc:	000d96b8 	.word	0x000d96b8
   d79c0:	000d9695 	.word	0x000d9695
   d79c4:	000d9698 	.word	0x000d9698
   d79c8:	000d9299 	.word	0x000d9299
   d79cc:	000d9838 	.word	0x000d9838
   d79d0:	000d9810 	.word	0x000d9810
   d79d4:	7ff00000 	.word	0x7ff00000
   d79d8:	7ca00000 	.word	0x7ca00000
   d79dc:	7fefffff 	.word	0x7fefffff
   d79e0:	f018 0310 	ands.w	r3, r8, #16
   d79e4:	bf18      	it	ne
   d79e6:	236a      	movne	r3, #106	; 0x6a
   d79e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d7da0 <_strtod_l+0x978>
   d79ec:	9304      	str	r3, [sp, #16]
   d79ee:	4650      	mov	r0, sl
   d79f0:	4659      	mov	r1, fp
   d79f2:	2300      	movs	r3, #0
   d79f4:	f018 0f01 	tst.w	r8, #1
   d79f8:	d004      	beq.n	d7a04 <_strtod_l+0x5dc>
   d79fa:	e9d9 2300 	ldrd	r2, r3, [r9]
   d79fe:	f7ff f921 	bl	d6c44 <__aeabi_dmul>
   d7a02:	2301      	movs	r3, #1
   d7a04:	ea5f 0868 	movs.w	r8, r8, asr #1
   d7a08:	f109 0908 	add.w	r9, r9, #8
   d7a0c:	d1f2      	bne.n	d79f4 <_strtod_l+0x5cc>
   d7a0e:	b10b      	cbz	r3, d7a14 <_strtod_l+0x5ec>
   d7a10:	4682      	mov	sl, r0
   d7a12:	468b      	mov	fp, r1
   d7a14:	9b04      	ldr	r3, [sp, #16]
   d7a16:	b1bb      	cbz	r3, d7a48 <_strtod_l+0x620>
   d7a18:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7a1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7a20:	2b00      	cmp	r3, #0
   d7a22:	4659      	mov	r1, fp
   d7a24:	dd10      	ble.n	d7a48 <_strtod_l+0x620>
   d7a26:	2b1f      	cmp	r3, #31
   d7a28:	f340 8128 	ble.w	d7c7c <_strtod_l+0x854>
   d7a2c:	2b34      	cmp	r3, #52	; 0x34
   d7a2e:	bfde      	ittt	le
   d7a30:	3b20      	suble	r3, #32
   d7a32:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7a36:	fa02 f303 	lslle.w	r3, r2, r3
   d7a3a:	f04f 0a00 	mov.w	sl, #0
   d7a3e:	bfcc      	ite	gt
   d7a40:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7a44:	ea03 0b01 	andle.w	fp, r3, r1
   d7a48:	2200      	movs	r2, #0
   d7a4a:	2300      	movs	r3, #0
   d7a4c:	4650      	mov	r0, sl
   d7a4e:	4659      	mov	r1, fp
   d7a50:	f7ff fb60 	bl	d7114 <__aeabi_dcmpeq>
   d7a54:	2800      	cmp	r0, #0
   d7a56:	d1a4      	bne.n	d79a2 <_strtod_l+0x57a>
   d7a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7a5a:	9300      	str	r3, [sp, #0]
   d7a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d7a5e:	462b      	mov	r3, r5
   d7a60:	463a      	mov	r2, r7
   d7a62:	4620      	mov	r0, r4
   d7a64:	f000 ff73 	bl	d894e <__s2b>
   d7a68:	9009      	str	r0, [sp, #36]	; 0x24
   d7a6a:	2800      	cmp	r0, #0
   d7a6c:	f43f af24 	beq.w	d78b8 <_strtod_l+0x490>
   d7a70:	9b07      	ldr	r3, [sp, #28]
   d7a72:	1b9e      	subs	r6, r3, r6
   d7a74:	9b08      	ldr	r3, [sp, #32]
   d7a76:	2b00      	cmp	r3, #0
   d7a78:	bfb4      	ite	lt
   d7a7a:	4633      	movlt	r3, r6
   d7a7c:	2300      	movge	r3, #0
   d7a7e:	9310      	str	r3, [sp, #64]	; 0x40
   d7a80:	9b08      	ldr	r3, [sp, #32]
   d7a82:	2500      	movs	r5, #0
   d7a84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7a88:	9318      	str	r3, [sp, #96]	; 0x60
   d7a8a:	462e      	mov	r6, r5
   d7a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7a8e:	4620      	mov	r0, r4
   d7a90:	6859      	ldr	r1, [r3, #4]
   d7a92:	f000 fed3 	bl	d883c <_Balloc>
   d7a96:	9007      	str	r0, [sp, #28]
   d7a98:	2800      	cmp	r0, #0
   d7a9a:	f43f af11 	beq.w	d78c0 <_strtod_l+0x498>
   d7a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7aa0:	691a      	ldr	r2, [r3, #16]
   d7aa2:	3202      	adds	r2, #2
   d7aa4:	f103 010c 	add.w	r1, r3, #12
   d7aa8:	0092      	lsls	r2, r2, #2
   d7aaa:	300c      	adds	r0, #12
   d7aac:	f7ff fc08 	bl	d72c0 <memcpy>
   d7ab0:	ec4b ab10 	vmov	d0, sl, fp
   d7ab4:	aa20      	add	r2, sp, #128	; 0x80
   d7ab6:	a91f      	add	r1, sp, #124	; 0x7c
   d7ab8:	4620      	mov	r0, r4
   d7aba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d7abe:	f001 fa35 	bl	d8f2c <__d2b>
   d7ac2:	901e      	str	r0, [sp, #120]	; 0x78
   d7ac4:	2800      	cmp	r0, #0
   d7ac6:	f43f aefb 	beq.w	d78c0 <_strtod_l+0x498>
   d7aca:	2101      	movs	r1, #1
   d7acc:	4620      	mov	r0, r4
   d7ace:	f000 ffcc 	bl	d8a6a <__i2b>
   d7ad2:	4606      	mov	r6, r0
   d7ad4:	2800      	cmp	r0, #0
   d7ad6:	f43f aef3 	beq.w	d78c0 <_strtod_l+0x498>
   d7ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d7adc:	9904      	ldr	r1, [sp, #16]
   d7ade:	2b00      	cmp	r3, #0
   d7ae0:	bfab      	itete	ge
   d7ae2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d7ae4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d7ae6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d7ae8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d7aec:	bfac      	ite	ge
   d7aee:	eb03 0902 	addge.w	r9, r3, r2
   d7af2:	1ad7      	sublt	r7, r2, r3
   d7af4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d7af6:	eba3 0801 	sub.w	r8, r3, r1
   d7afa:	4490      	add	r8, r2
   d7afc:	4ba3      	ldr	r3, [pc, #652]	; (d7d8c <_strtod_l+0x964>)
   d7afe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d7b02:	4598      	cmp	r8, r3
   d7b04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d7b08:	f280 80cc 	bge.w	d7ca4 <_strtod_l+0x87c>
   d7b0c:	eba3 0308 	sub.w	r3, r3, r8
   d7b10:	2b1f      	cmp	r3, #31
   d7b12:	eba2 0203 	sub.w	r2, r2, r3
   d7b16:	f04f 0101 	mov.w	r1, #1
   d7b1a:	f300 80b6 	bgt.w	d7c8a <_strtod_l+0x862>
   d7b1e:	fa01 f303 	lsl.w	r3, r1, r3
   d7b22:	9311      	str	r3, [sp, #68]	; 0x44
   d7b24:	2300      	movs	r3, #0
   d7b26:	930c      	str	r3, [sp, #48]	; 0x30
   d7b28:	eb09 0802 	add.w	r8, r9, r2
   d7b2c:	9b04      	ldr	r3, [sp, #16]
   d7b2e:	45c1      	cmp	r9, r8
   d7b30:	4417      	add	r7, r2
   d7b32:	441f      	add	r7, r3
   d7b34:	464b      	mov	r3, r9
   d7b36:	bfa8      	it	ge
   d7b38:	4643      	movge	r3, r8
   d7b3a:	42bb      	cmp	r3, r7
   d7b3c:	bfa8      	it	ge
   d7b3e:	463b      	movge	r3, r7
   d7b40:	2b00      	cmp	r3, #0
   d7b42:	bfc2      	ittt	gt
   d7b44:	eba8 0803 	subgt.w	r8, r8, r3
   d7b48:	1aff      	subgt	r7, r7, r3
   d7b4a:	eba9 0903 	subgt.w	r9, r9, r3
   d7b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7b50:	2b00      	cmp	r3, #0
   d7b52:	dd17      	ble.n	d7b84 <_strtod_l+0x75c>
   d7b54:	4631      	mov	r1, r6
   d7b56:	461a      	mov	r2, r3
   d7b58:	4620      	mov	r0, r4
   d7b5a:	f001 f82b 	bl	d8bb4 <__pow5mult>
   d7b5e:	4606      	mov	r6, r0
   d7b60:	2800      	cmp	r0, #0
   d7b62:	f43f aead 	beq.w	d78c0 <_strtod_l+0x498>
   d7b66:	4601      	mov	r1, r0
   d7b68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	f000 ff86 	bl	d8a7c <__multiply>
   d7b70:	900f      	str	r0, [sp, #60]	; 0x3c
   d7b72:	2800      	cmp	r0, #0
   d7b74:	f43f aea4 	beq.w	d78c0 <_strtod_l+0x498>
   d7b78:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7b7a:	4620      	mov	r0, r4
   d7b7c:	f000 fe92 	bl	d88a4 <_Bfree>
   d7b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7b82:	931e      	str	r3, [sp, #120]	; 0x78
   d7b84:	f1b8 0f00 	cmp.w	r8, #0
   d7b88:	f300 8091 	bgt.w	d7cae <_strtod_l+0x886>
   d7b8c:	9b08      	ldr	r3, [sp, #32]
   d7b8e:	2b00      	cmp	r3, #0
   d7b90:	dd08      	ble.n	d7ba4 <_strtod_l+0x77c>
   d7b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7b94:	9907      	ldr	r1, [sp, #28]
   d7b96:	4620      	mov	r0, r4
   d7b98:	f001 f80c 	bl	d8bb4 <__pow5mult>
   d7b9c:	9007      	str	r0, [sp, #28]
   d7b9e:	2800      	cmp	r0, #0
   d7ba0:	f43f ae8e 	beq.w	d78c0 <_strtod_l+0x498>
   d7ba4:	2f00      	cmp	r7, #0
   d7ba6:	dd08      	ble.n	d7bba <_strtod_l+0x792>
   d7ba8:	9907      	ldr	r1, [sp, #28]
   d7baa:	463a      	mov	r2, r7
   d7bac:	4620      	mov	r0, r4
   d7bae:	f001 f84f 	bl	d8c50 <__lshift>
   d7bb2:	9007      	str	r0, [sp, #28]
   d7bb4:	2800      	cmp	r0, #0
   d7bb6:	f43f ae83 	beq.w	d78c0 <_strtod_l+0x498>
   d7bba:	f1b9 0f00 	cmp.w	r9, #0
   d7bbe:	dd08      	ble.n	d7bd2 <_strtod_l+0x7aa>
   d7bc0:	4631      	mov	r1, r6
   d7bc2:	464a      	mov	r2, r9
   d7bc4:	4620      	mov	r0, r4
   d7bc6:	f001 f843 	bl	d8c50 <__lshift>
   d7bca:	4606      	mov	r6, r0
   d7bcc:	2800      	cmp	r0, #0
   d7bce:	f43f ae77 	beq.w	d78c0 <_strtod_l+0x498>
   d7bd2:	9a07      	ldr	r2, [sp, #28]
   d7bd4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	f001 f8b5 	bl	d8d46 <__mdiff>
   d7bdc:	4605      	mov	r5, r0
   d7bde:	2800      	cmp	r0, #0
   d7be0:	f43f ae6e 	beq.w	d78c0 <_strtod_l+0x498>
   d7be4:	68c3      	ldr	r3, [r0, #12]
   d7be6:	930f      	str	r3, [sp, #60]	; 0x3c
   d7be8:	2300      	movs	r3, #0
   d7bea:	60c3      	str	r3, [r0, #12]
   d7bec:	4631      	mov	r1, r6
   d7bee:	f001 f88e 	bl	d8d0e <__mcmp>
   d7bf2:	2800      	cmp	r0, #0
   d7bf4:	da65      	bge.n	d7cc2 <_strtod_l+0x89a>
   d7bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7bf8:	ea53 030a 	orrs.w	r3, r3, sl
   d7bfc:	f040 8087 	bne.w	d7d0e <_strtod_l+0x8e6>
   d7c00:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7c04:	2b00      	cmp	r3, #0
   d7c06:	f040 8082 	bne.w	d7d0e <_strtod_l+0x8e6>
   d7c0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7c0e:	0d1b      	lsrs	r3, r3, #20
   d7c10:	051b      	lsls	r3, r3, #20
   d7c12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d7c16:	d97a      	bls.n	d7d0e <_strtod_l+0x8e6>
   d7c18:	696b      	ldr	r3, [r5, #20]
   d7c1a:	b913      	cbnz	r3, d7c22 <_strtod_l+0x7fa>
   d7c1c:	692b      	ldr	r3, [r5, #16]
   d7c1e:	2b01      	cmp	r3, #1
   d7c20:	dd75      	ble.n	d7d0e <_strtod_l+0x8e6>
   d7c22:	4629      	mov	r1, r5
   d7c24:	2201      	movs	r2, #1
   d7c26:	4620      	mov	r0, r4
   d7c28:	f001 f812 	bl	d8c50 <__lshift>
   d7c2c:	4631      	mov	r1, r6
   d7c2e:	4605      	mov	r5, r0
   d7c30:	f001 f86d 	bl	d8d0e <__mcmp>
   d7c34:	2800      	cmp	r0, #0
   d7c36:	dd6a      	ble.n	d7d0e <_strtod_l+0x8e6>
   d7c38:	9904      	ldr	r1, [sp, #16]
   d7c3a:	4a55      	ldr	r2, [pc, #340]	; (d7d90 <_strtod_l+0x968>)
   d7c3c:	465b      	mov	r3, fp
   d7c3e:	2900      	cmp	r1, #0
   d7c40:	f000 8085 	beq.w	d7d4e <_strtod_l+0x926>
   d7c44:	ea02 010b 	and.w	r1, r2, fp
   d7c48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d7c4c:	dc7f      	bgt.n	d7d4e <_strtod_l+0x926>
   d7c4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d7c52:	f77f aeaa 	ble.w	d79aa <_strtod_l+0x582>
   d7c56:	4a4f      	ldr	r2, [pc, #316]	; (d7d94 <_strtod_l+0x96c>)
   d7c58:	2300      	movs	r3, #0
   d7c5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d7c5e:	4650      	mov	r0, sl
   d7c60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d7c64:	4659      	mov	r1, fp
   d7c66:	f7fe ffed 	bl	d6c44 <__aeabi_dmul>
   d7c6a:	460b      	mov	r3, r1
   d7c6c:	4303      	orrs	r3, r0
   d7c6e:	bf08      	it	eq
   d7c70:	2322      	moveq	r3, #34	; 0x22
   d7c72:	4682      	mov	sl, r0
   d7c74:	468b      	mov	fp, r1
   d7c76:	bf08      	it	eq
   d7c78:	6023      	streq	r3, [r4, #0]
   d7c7a:	e62b      	b.n	d78d4 <_strtod_l+0x4ac>
   d7c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7c80:	fa02 f303 	lsl.w	r3, r2, r3
   d7c84:	ea03 0a0a 	and.w	sl, r3, sl
   d7c88:	e6de      	b.n	d7a48 <_strtod_l+0x620>
   d7c8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d7c8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d7c92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d7c96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d7c9a:	fa01 f308 	lsl.w	r3, r1, r8
   d7c9e:	930c      	str	r3, [sp, #48]	; 0x30
   d7ca0:	9111      	str	r1, [sp, #68]	; 0x44
   d7ca2:	e741      	b.n	d7b28 <_strtod_l+0x700>
   d7ca4:	2300      	movs	r3, #0
   d7ca6:	930c      	str	r3, [sp, #48]	; 0x30
   d7ca8:	2301      	movs	r3, #1
   d7caa:	9311      	str	r3, [sp, #68]	; 0x44
   d7cac:	e73c      	b.n	d7b28 <_strtod_l+0x700>
   d7cae:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7cb0:	4642      	mov	r2, r8
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	f000 ffcc 	bl	d8c50 <__lshift>
   d7cb8:	901e      	str	r0, [sp, #120]	; 0x78
   d7cba:	2800      	cmp	r0, #0
   d7cbc:	f47f af66 	bne.w	d7b8c <_strtod_l+0x764>
   d7cc0:	e5fe      	b.n	d78c0 <_strtod_l+0x498>
   d7cc2:	465f      	mov	r7, fp
   d7cc4:	d16e      	bne.n	d7da4 <_strtod_l+0x97c>
   d7cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7ccc:	b342      	cbz	r2, d7d20 <_strtod_l+0x8f8>
   d7cce:	4a32      	ldr	r2, [pc, #200]	; (d7d98 <_strtod_l+0x970>)
   d7cd0:	4293      	cmp	r3, r2
   d7cd2:	d128      	bne.n	d7d26 <_strtod_l+0x8fe>
   d7cd4:	9b04      	ldr	r3, [sp, #16]
   d7cd6:	4650      	mov	r0, sl
   d7cd8:	b1eb      	cbz	r3, d7d16 <_strtod_l+0x8ee>
   d7cda:	4a2d      	ldr	r2, [pc, #180]	; (d7d90 <_strtod_l+0x968>)
   d7cdc:	403a      	ands	r2, r7
   d7cde:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d7ce2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d7ce6:	d819      	bhi.n	d7d1c <_strtod_l+0x8f4>
   d7ce8:	0d12      	lsrs	r2, r2, #20
   d7cea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d7cee:	fa01 f303 	lsl.w	r3, r1, r3
   d7cf2:	4298      	cmp	r0, r3
   d7cf4:	d117      	bne.n	d7d26 <_strtod_l+0x8fe>
   d7cf6:	4b29      	ldr	r3, [pc, #164]	; (d7d9c <_strtod_l+0x974>)
   d7cf8:	429f      	cmp	r7, r3
   d7cfa:	d102      	bne.n	d7d02 <_strtod_l+0x8da>
   d7cfc:	3001      	adds	r0, #1
   d7cfe:	f43f addf 	beq.w	d78c0 <_strtod_l+0x498>
   d7d02:	4b23      	ldr	r3, [pc, #140]	; (d7d90 <_strtod_l+0x968>)
   d7d04:	403b      	ands	r3, r7
   d7d06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d7d0a:	f04f 0a00 	mov.w	sl, #0
   d7d0e:	9b04      	ldr	r3, [sp, #16]
   d7d10:	2b00      	cmp	r3, #0
   d7d12:	d1a0      	bne.n	d7c56 <_strtod_l+0x82e>
   d7d14:	e5de      	b.n	d78d4 <_strtod_l+0x4ac>
   d7d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7d1a:	e7ea      	b.n	d7cf2 <_strtod_l+0x8ca>
   d7d1c:	460b      	mov	r3, r1
   d7d1e:	e7e8      	b.n	d7cf2 <_strtod_l+0x8ca>
   d7d20:	ea53 030a 	orrs.w	r3, r3, sl
   d7d24:	d088      	beq.n	d7c38 <_strtod_l+0x810>
   d7d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7d28:	b1db      	cbz	r3, d7d62 <_strtod_l+0x93a>
   d7d2a:	423b      	tst	r3, r7
   d7d2c:	d0ef      	beq.n	d7d0e <_strtod_l+0x8e6>
   d7d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7d30:	9a04      	ldr	r2, [sp, #16]
   d7d32:	4650      	mov	r0, sl
   d7d34:	4659      	mov	r1, fp
   d7d36:	b1c3      	cbz	r3, d7d6a <_strtod_l+0x942>
   d7d38:	f7ff fb58 	bl	d73ec <sulp>
   d7d3c:	4602      	mov	r2, r0
   d7d3e:	460b      	mov	r3, r1
   d7d40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7d44:	f7fe fdc8 	bl	d68d8 <__adddf3>
   d7d48:	4682      	mov	sl, r0
   d7d4a:	468b      	mov	fp, r1
   d7d4c:	e7df      	b.n	d7d0e <_strtod_l+0x8e6>
   d7d4e:	4013      	ands	r3, r2
   d7d50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d7d54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7d58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d7d5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7d60:	e7d5      	b.n	d7d0e <_strtod_l+0x8e6>
   d7d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7d64:	ea13 0f0a 	tst.w	r3, sl
   d7d68:	e7e0      	b.n	d7d2c <_strtod_l+0x904>
   d7d6a:	f7ff fb3f 	bl	d73ec <sulp>
   d7d6e:	4602      	mov	r2, r0
   d7d70:	460b      	mov	r3, r1
   d7d72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7d76:	f7fe fdad 	bl	d68d4 <__aeabi_dsub>
   d7d7a:	2200      	movs	r2, #0
   d7d7c:	2300      	movs	r3, #0
   d7d7e:	4682      	mov	sl, r0
   d7d80:	468b      	mov	fp, r1
   d7d82:	f7ff f9c7 	bl	d7114 <__aeabi_dcmpeq>
   d7d86:	2800      	cmp	r0, #0
   d7d88:	d0c1      	beq.n	d7d0e <_strtod_l+0x8e6>
   d7d8a:	e60e      	b.n	d79aa <_strtod_l+0x582>
   d7d8c:	fffffc02 	.word	0xfffffc02
   d7d90:	7ff00000 	.word	0x7ff00000
   d7d94:	39500000 	.word	0x39500000
   d7d98:	000fffff 	.word	0x000fffff
   d7d9c:	7fefffff 	.word	0x7fefffff
   d7da0:	000d96d0 	.word	0x000d96d0
   d7da4:	4631      	mov	r1, r6
   d7da6:	4628      	mov	r0, r5
   d7da8:	f001 f910 	bl	d8fcc <__ratio>
   d7dac:	ec59 8b10 	vmov	r8, r9, d0
   d7db0:	ee10 0a10 	vmov	r0, s0
   d7db4:	2200      	movs	r2, #0
   d7db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7dba:	4649      	mov	r1, r9
   d7dbc:	f7ff f9be 	bl	d713c <__aeabi_dcmple>
   d7dc0:	2800      	cmp	r0, #0
   d7dc2:	d07c      	beq.n	d7ebe <_strtod_l+0xa96>
   d7dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7dc6:	2b00      	cmp	r3, #0
   d7dc8:	d04c      	beq.n	d7e64 <_strtod_l+0xa3c>
   d7dca:	4b95      	ldr	r3, [pc, #596]	; (d8020 <_strtod_l+0xbf8>)
   d7dcc:	2200      	movs	r2, #0
   d7dce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7dd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8020 <_strtod_l+0xbf8>
   d7dd6:	f04f 0800 	mov.w	r8, #0
   d7dda:	4b92      	ldr	r3, [pc, #584]	; (d8024 <_strtod_l+0xbfc>)
   d7ddc:	403b      	ands	r3, r7
   d7dde:	9311      	str	r3, [sp, #68]	; 0x44
   d7de0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7de2:	4b91      	ldr	r3, [pc, #580]	; (d8028 <_strtod_l+0xc00>)
   d7de4:	429a      	cmp	r2, r3
   d7de6:	f040 80b2 	bne.w	d7f4e <_strtod_l+0xb26>
   d7dea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7df2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d7df6:	ec4b ab10 	vmov	d0, sl, fp
   d7dfa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d7dfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d7e02:	f001 f817 	bl	d8e34 <__ulp>
   d7e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7e0a:	ec53 2b10 	vmov	r2, r3, d0
   d7e0e:	f7fe ff19 	bl	d6c44 <__aeabi_dmul>
   d7e12:	4652      	mov	r2, sl
   d7e14:	465b      	mov	r3, fp
   d7e16:	f7fe fd5f 	bl	d68d8 <__adddf3>
   d7e1a:	460b      	mov	r3, r1
   d7e1c:	4981      	ldr	r1, [pc, #516]	; (d8024 <_strtod_l+0xbfc>)
   d7e1e:	4a83      	ldr	r2, [pc, #524]	; (d802c <_strtod_l+0xc04>)
   d7e20:	4019      	ands	r1, r3
   d7e22:	4291      	cmp	r1, r2
   d7e24:	4682      	mov	sl, r0
   d7e26:	d95e      	bls.n	d7ee6 <_strtod_l+0xabe>
   d7e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7e2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d7e2e:	4293      	cmp	r3, r2
   d7e30:	d103      	bne.n	d7e3a <_strtod_l+0xa12>
   d7e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e34:	3301      	adds	r3, #1
   d7e36:	f43f ad43 	beq.w	d78c0 <_strtod_l+0x498>
   d7e3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d8038 <_strtod_l+0xc10>
   d7e3e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7e42:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7e44:	4620      	mov	r0, r4
   d7e46:	f000 fd2d 	bl	d88a4 <_Bfree>
   d7e4a:	9907      	ldr	r1, [sp, #28]
   d7e4c:	4620      	mov	r0, r4
   d7e4e:	f000 fd29 	bl	d88a4 <_Bfree>
   d7e52:	4631      	mov	r1, r6
   d7e54:	4620      	mov	r0, r4
   d7e56:	f000 fd25 	bl	d88a4 <_Bfree>
   d7e5a:	4629      	mov	r1, r5
   d7e5c:	4620      	mov	r0, r4
   d7e5e:	f000 fd21 	bl	d88a4 <_Bfree>
   d7e62:	e613      	b.n	d7a8c <_strtod_l+0x664>
   d7e64:	f1ba 0f00 	cmp.w	sl, #0
   d7e68:	d11b      	bne.n	d7ea2 <_strtod_l+0xa7a>
   d7e6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7e6e:	b9f3      	cbnz	r3, d7eae <_strtod_l+0xa86>
   d7e70:	4b6b      	ldr	r3, [pc, #428]	; (d8020 <_strtod_l+0xbf8>)
   d7e72:	2200      	movs	r2, #0
   d7e74:	4640      	mov	r0, r8
   d7e76:	4649      	mov	r1, r9
   d7e78:	f7ff f956 	bl	d7128 <__aeabi_dcmplt>
   d7e7c:	b9d0      	cbnz	r0, d7eb4 <_strtod_l+0xa8c>
   d7e7e:	4640      	mov	r0, r8
   d7e80:	4649      	mov	r1, r9
   d7e82:	4b6b      	ldr	r3, [pc, #428]	; (d8030 <_strtod_l+0xc08>)
   d7e84:	2200      	movs	r2, #0
   d7e86:	f7fe fedd 	bl	d6c44 <__aeabi_dmul>
   d7e8a:	4680      	mov	r8, r0
   d7e8c:	4689      	mov	r9, r1
   d7e8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d7e92:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d7e96:	931b      	str	r3, [sp, #108]	; 0x6c
   d7e98:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d7e9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7ea0:	e79b      	b.n	d7dda <_strtod_l+0x9b2>
   d7ea2:	f1ba 0f01 	cmp.w	sl, #1
   d7ea6:	d102      	bne.n	d7eae <_strtod_l+0xa86>
   d7ea8:	2f00      	cmp	r7, #0
   d7eaa:	f43f ad7e 	beq.w	d79aa <_strtod_l+0x582>
   d7eae:	4b61      	ldr	r3, [pc, #388]	; (d8034 <_strtod_l+0xc0c>)
   d7eb0:	2200      	movs	r2, #0
   d7eb2:	e78c      	b.n	d7dce <_strtod_l+0x9a6>
   d7eb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; d8030 <_strtod_l+0xc08>
   d7eb8:	f04f 0800 	mov.w	r8, #0
   d7ebc:	e7e7      	b.n	d7e8e <_strtod_l+0xa66>
   d7ebe:	4b5c      	ldr	r3, [pc, #368]	; (d8030 <_strtod_l+0xc08>)
   d7ec0:	4640      	mov	r0, r8
   d7ec2:	4649      	mov	r1, r9
   d7ec4:	2200      	movs	r2, #0
   d7ec6:	f7fe febd 	bl	d6c44 <__aeabi_dmul>
   d7eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7ecc:	4680      	mov	r8, r0
   d7ece:	4689      	mov	r9, r1
   d7ed0:	b933      	cbnz	r3, d7ee0 <_strtod_l+0xab8>
   d7ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7ed6:	9012      	str	r0, [sp, #72]	; 0x48
   d7ed8:	9313      	str	r3, [sp, #76]	; 0x4c
   d7eda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d7ede:	e7dd      	b.n	d7e9c <_strtod_l+0xa74>
   d7ee0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d7ee4:	e7f9      	b.n	d7eda <_strtod_l+0xab2>
   d7ee6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d7eea:	9b04      	ldr	r3, [sp, #16]
   d7eec:	2b00      	cmp	r3, #0
   d7eee:	d1a8      	bne.n	d7e42 <_strtod_l+0xa1a>
   d7ef0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7ef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7ef6:	0d1b      	lsrs	r3, r3, #20
   d7ef8:	051b      	lsls	r3, r3, #20
   d7efa:	429a      	cmp	r2, r3
   d7efc:	d1a1      	bne.n	d7e42 <_strtod_l+0xa1a>
   d7efe:	4640      	mov	r0, r8
   d7f00:	4649      	mov	r1, r9
   d7f02:	f001 f8ff 	bl	d9104 <__aeabi_d2lz>
   d7f06:	f7fe fe6f 	bl	d6be8 <__aeabi_l2d>
   d7f0a:	4602      	mov	r2, r0
   d7f0c:	460b      	mov	r3, r1
   d7f0e:	4640      	mov	r0, r8
   d7f10:	4649      	mov	r1, r9
   d7f12:	f7fe fcdf 	bl	d68d4 <__aeabi_dsub>
   d7f16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7f18:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7f1c:	ea43 030a 	orr.w	r3, r3, sl
   d7f20:	4313      	orrs	r3, r2
   d7f22:	4680      	mov	r8, r0
   d7f24:	4689      	mov	r9, r1
   d7f26:	d053      	beq.n	d7fd0 <_strtod_l+0xba8>
   d7f28:	a335      	add	r3, pc, #212	; (adr r3, d8000 <_strtod_l+0xbd8>)
   d7f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f2e:	f7ff f8fb 	bl	d7128 <__aeabi_dcmplt>
   d7f32:	2800      	cmp	r0, #0
   d7f34:	f47f acce 	bne.w	d78d4 <_strtod_l+0x4ac>
   d7f38:	a333      	add	r3, pc, #204	; (adr r3, d8008 <_strtod_l+0xbe0>)
   d7f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f3e:	4640      	mov	r0, r8
   d7f40:	4649      	mov	r1, r9
   d7f42:	f7ff f90f 	bl	d7164 <__aeabi_dcmpgt>
   d7f46:	2800      	cmp	r0, #0
   d7f48:	f43f af7b 	beq.w	d7e42 <_strtod_l+0xa1a>
   d7f4c:	e4c2      	b.n	d78d4 <_strtod_l+0x4ac>
   d7f4e:	9b04      	ldr	r3, [sp, #16]
   d7f50:	b333      	cbz	r3, d7fa0 <_strtod_l+0xb78>
   d7f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7f54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7f58:	d822      	bhi.n	d7fa0 <_strtod_l+0xb78>
   d7f5a:	a32d      	add	r3, pc, #180	; (adr r3, d8010 <_strtod_l+0xbe8>)
   d7f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f60:	4640      	mov	r0, r8
   d7f62:	4649      	mov	r1, r9
   d7f64:	f7ff f8ea 	bl	d713c <__aeabi_dcmple>
   d7f68:	b1a0      	cbz	r0, d7f94 <_strtod_l+0xb6c>
   d7f6a:	4649      	mov	r1, r9
   d7f6c:	4640      	mov	r0, r8
   d7f6e:	f7ff f903 	bl	d7178 <__aeabi_d2uiz>
   d7f72:	2801      	cmp	r0, #1
   d7f74:	bf38      	it	cc
   d7f76:	2001      	movcc	r0, #1
   d7f78:	f7fe fdea 	bl	d6b50 <__aeabi_ui2d>
   d7f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7f7e:	4680      	mov	r8, r0
   d7f80:	4689      	mov	r9, r1
   d7f82:	bb13      	cbnz	r3, d7fca <_strtod_l+0xba2>
   d7f84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7f88:	9014      	str	r0, [sp, #80]	; 0x50
   d7f8a:	9315      	str	r3, [sp, #84]	; 0x54
   d7f8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d7f90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7f96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7f98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d7f9c:	1a9b      	subs	r3, r3, r2
   d7f9e:	930d      	str	r3, [sp, #52]	; 0x34
   d7fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7fa4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d7fa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d7fac:	f000 ff42 	bl	d8e34 <__ulp>
   d7fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7fb4:	ec53 2b10 	vmov	r2, r3, d0
   d7fb8:	f7fe fe44 	bl	d6c44 <__aeabi_dmul>
   d7fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7fc0:	f7fe fc8a 	bl	d68d8 <__adddf3>
   d7fc4:	4682      	mov	sl, r0
   d7fc6:	468b      	mov	fp, r1
   d7fc8:	e78f      	b.n	d7eea <_strtod_l+0xac2>
   d7fca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d7fce:	e7dd      	b.n	d7f8c <_strtod_l+0xb64>
   d7fd0:	a311      	add	r3, pc, #68	; (adr r3, d8018 <_strtod_l+0xbf0>)
   d7fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd6:	f7ff f8a7 	bl	d7128 <__aeabi_dcmplt>
   d7fda:	e7b4      	b.n	d7f46 <_strtod_l+0xb1e>
   d7fdc:	2300      	movs	r3, #0
   d7fde:	930e      	str	r3, [sp, #56]	; 0x38
   d7fe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7fe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7fe4:	6013      	str	r3, [r2, #0]
   d7fe6:	f7ff ba65 	b.w	d74b4 <_strtod_l+0x8c>
   d7fea:	2b65      	cmp	r3, #101	; 0x65
   d7fec:	f43f ab5d 	beq.w	d76aa <_strtod_l+0x282>
   d7ff0:	2b45      	cmp	r3, #69	; 0x45
   d7ff2:	f43f ab5a 	beq.w	d76aa <_strtod_l+0x282>
   d7ff6:	2201      	movs	r2, #1
   d7ff8:	f7ff bb92 	b.w	d7720 <_strtod_l+0x2f8>
   d7ffc:	f3af 8000 	nop.w
   d8000:	94a03595 	.word	0x94a03595
   d8004:	3fdfffff 	.word	0x3fdfffff
   d8008:	35afe535 	.word	0x35afe535
   d800c:	3fe00000 	.word	0x3fe00000
   d8010:	ffc00000 	.word	0xffc00000
   d8014:	41dfffff 	.word	0x41dfffff
   d8018:	94a03595 	.word	0x94a03595
   d801c:	3fcfffff 	.word	0x3fcfffff
   d8020:	3ff00000 	.word	0x3ff00000
   d8024:	7ff00000 	.word	0x7ff00000
   d8028:	7fe00000 	.word	0x7fe00000
   d802c:	7c9fffff 	.word	0x7c9fffff
   d8030:	3fe00000 	.word	0x3fe00000
   d8034:	bff00000 	.word	0xbff00000
   d8038:	7fefffff 	.word	0x7fefffff

000d803c <strtod>:
   d803c:	460a      	mov	r2, r1
   d803e:	4601      	mov	r1, r0
   d8040:	4802      	ldr	r0, [pc, #8]	; (d804c <strtod+0x10>)
   d8042:	4b03      	ldr	r3, [pc, #12]	; (d8050 <strtod+0x14>)
   d8044:	6800      	ldr	r0, [r0, #0]
   d8046:	f7ff b9ef 	b.w	d7428 <_strtod_l>
   d804a:	bf00      	nop
   d804c:	2003e2c4 	.word	0x2003e2c4
   d8050:	2003e32c 	.word	0x2003e32c

000d8054 <_strtol_l.isra.0>:
   d8054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8058:	4e3a      	ldr	r6, [pc, #232]	; (d8144 <_strtol_l.isra.0+0xf0>)
   d805a:	4686      	mov	lr, r0
   d805c:	468c      	mov	ip, r1
   d805e:	4660      	mov	r0, ip
   d8060:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8064:	5da5      	ldrb	r5, [r4, r6]
   d8066:	f015 0508 	ands.w	r5, r5, #8
   d806a:	d1f8      	bne.n	d805e <_strtol_l.isra.0+0xa>
   d806c:	2c2d      	cmp	r4, #45	; 0x2d
   d806e:	d133      	bne.n	d80d8 <_strtol_l.isra.0+0x84>
   d8070:	f89c 4000 	ldrb.w	r4, [ip]
   d8074:	f04f 0801 	mov.w	r8, #1
   d8078:	f100 0c02 	add.w	ip, r0, #2
   d807c:	2b00      	cmp	r3, #0
   d807e:	d05c      	beq.n	d813a <_strtol_l.isra.0+0xe6>
   d8080:	2b10      	cmp	r3, #16
   d8082:	d10c      	bne.n	d809e <_strtol_l.isra.0+0x4a>
   d8084:	2c30      	cmp	r4, #48	; 0x30
   d8086:	d10a      	bne.n	d809e <_strtol_l.isra.0+0x4a>
   d8088:	f89c 0000 	ldrb.w	r0, [ip]
   d808c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8090:	2858      	cmp	r0, #88	; 0x58
   d8092:	d14d      	bne.n	d8130 <_strtol_l.isra.0+0xdc>
   d8094:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8098:	2310      	movs	r3, #16
   d809a:	f10c 0c02 	add.w	ip, ip, #2
   d809e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d80a2:	3f01      	subs	r7, #1
   d80a4:	2600      	movs	r6, #0
   d80a6:	fbb7 f9f3 	udiv	r9, r7, r3
   d80aa:	4630      	mov	r0, r6
   d80ac:	fb03 7a19 	mls	sl, r3, r9, r7
   d80b0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d80b4:	2d09      	cmp	r5, #9
   d80b6:	d818      	bhi.n	d80ea <_strtol_l.isra.0+0x96>
   d80b8:	462c      	mov	r4, r5
   d80ba:	42a3      	cmp	r3, r4
   d80bc:	dd24      	ble.n	d8108 <_strtol_l.isra.0+0xb4>
   d80be:	1c75      	adds	r5, r6, #1
   d80c0:	d007      	beq.n	d80d2 <_strtol_l.isra.0+0x7e>
   d80c2:	4581      	cmp	r9, r0
   d80c4:	d31d      	bcc.n	d8102 <_strtol_l.isra.0+0xae>
   d80c6:	d101      	bne.n	d80cc <_strtol_l.isra.0+0x78>
   d80c8:	45a2      	cmp	sl, r4
   d80ca:	db1a      	blt.n	d8102 <_strtol_l.isra.0+0xae>
   d80cc:	fb00 4003 	mla	r0, r0, r3, r4
   d80d0:	2601      	movs	r6, #1
   d80d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d80d6:	e7eb      	b.n	d80b0 <_strtol_l.isra.0+0x5c>
   d80d8:	2c2b      	cmp	r4, #43	; 0x2b
   d80da:	bf08      	it	eq
   d80dc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d80e0:	46a8      	mov	r8, r5
   d80e2:	bf08      	it	eq
   d80e4:	f100 0c02 	addeq.w	ip, r0, #2
   d80e8:	e7c8      	b.n	d807c <_strtol_l.isra.0+0x28>
   d80ea:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d80ee:	2d19      	cmp	r5, #25
   d80f0:	d801      	bhi.n	d80f6 <_strtol_l.isra.0+0xa2>
   d80f2:	3c37      	subs	r4, #55	; 0x37
   d80f4:	e7e1      	b.n	d80ba <_strtol_l.isra.0+0x66>
   d80f6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d80fa:	2d19      	cmp	r5, #25
   d80fc:	d804      	bhi.n	d8108 <_strtol_l.isra.0+0xb4>
   d80fe:	3c57      	subs	r4, #87	; 0x57
   d8100:	e7db      	b.n	d80ba <_strtol_l.isra.0+0x66>
   d8102:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8106:	e7e4      	b.n	d80d2 <_strtol_l.isra.0+0x7e>
   d8108:	1c73      	adds	r3, r6, #1
   d810a:	d106      	bne.n	d811a <_strtol_l.isra.0+0xc6>
   d810c:	2322      	movs	r3, #34	; 0x22
   d810e:	f8ce 3000 	str.w	r3, [lr]
   d8112:	4638      	mov	r0, r7
   d8114:	b942      	cbnz	r2, d8128 <_strtol_l.isra.0+0xd4>
   d8116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d811a:	f1b8 0f00 	cmp.w	r8, #0
   d811e:	d000      	beq.n	d8122 <_strtol_l.isra.0+0xce>
   d8120:	4240      	negs	r0, r0
   d8122:	2a00      	cmp	r2, #0
   d8124:	d0f7      	beq.n	d8116 <_strtol_l.isra.0+0xc2>
   d8126:	b10e      	cbz	r6, d812c <_strtol_l.isra.0+0xd8>
   d8128:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d812c:	6011      	str	r1, [r2, #0]
   d812e:	e7f2      	b.n	d8116 <_strtol_l.isra.0+0xc2>
   d8130:	2430      	movs	r4, #48	; 0x30
   d8132:	2b00      	cmp	r3, #0
   d8134:	d1b3      	bne.n	d809e <_strtol_l.isra.0+0x4a>
   d8136:	2308      	movs	r3, #8
   d8138:	e7b1      	b.n	d809e <_strtol_l.isra.0+0x4a>
   d813a:	2c30      	cmp	r4, #48	; 0x30
   d813c:	d0a4      	beq.n	d8088 <_strtol_l.isra.0+0x34>
   d813e:	230a      	movs	r3, #10
   d8140:	e7ad      	b.n	d809e <_strtol_l.isra.0+0x4a>
   d8142:	bf00      	nop
   d8144:	000d96f9 	.word	0x000d96f9

000d8148 <strtol>:
   d8148:	4613      	mov	r3, r2
   d814a:	460a      	mov	r2, r1
   d814c:	4601      	mov	r1, r0
   d814e:	4802      	ldr	r0, [pc, #8]	; (d8158 <strtol+0x10>)
   d8150:	6800      	ldr	r0, [r0, #0]
   d8152:	f7ff bf7f 	b.w	d8054 <_strtol_l.isra.0>
   d8156:	bf00      	nop
   d8158:	2003e2c4 	.word	0x2003e2c4

000d815c <rshift>:
   d815c:	6903      	ldr	r3, [r0, #16]
   d815e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d8162:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8166:	ea4f 1261 	mov.w	r2, r1, asr #5
   d816a:	f100 0414 	add.w	r4, r0, #20
   d816e:	dd45      	ble.n	d81fc <rshift+0xa0>
   d8170:	f011 011f 	ands.w	r1, r1, #31
   d8174:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d8178:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d817c:	d10c      	bne.n	d8198 <rshift+0x3c>
   d817e:	f100 0710 	add.w	r7, r0, #16
   d8182:	4629      	mov	r1, r5
   d8184:	42b1      	cmp	r1, r6
   d8186:	d334      	bcc.n	d81f2 <rshift+0x96>
   d8188:	1a9b      	subs	r3, r3, r2
   d818a:	009b      	lsls	r3, r3, #2
   d818c:	1eea      	subs	r2, r5, #3
   d818e:	4296      	cmp	r6, r2
   d8190:	bf38      	it	cc
   d8192:	2300      	movcc	r3, #0
   d8194:	4423      	add	r3, r4
   d8196:	e015      	b.n	d81c4 <rshift+0x68>
   d8198:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d819c:	f1c1 0820 	rsb	r8, r1, #32
   d81a0:	40cf      	lsrs	r7, r1
   d81a2:	f105 0e04 	add.w	lr, r5, #4
   d81a6:	46a1      	mov	r9, r4
   d81a8:	4576      	cmp	r6, lr
   d81aa:	46f4      	mov	ip, lr
   d81ac:	d815      	bhi.n	d81da <rshift+0x7e>
   d81ae:	1a9b      	subs	r3, r3, r2
   d81b0:	009a      	lsls	r2, r3, #2
   d81b2:	3a04      	subs	r2, #4
   d81b4:	3501      	adds	r5, #1
   d81b6:	42ae      	cmp	r6, r5
   d81b8:	bf38      	it	cc
   d81ba:	2200      	movcc	r2, #0
   d81bc:	18a3      	adds	r3, r4, r2
   d81be:	50a7      	str	r7, [r4, r2]
   d81c0:	b107      	cbz	r7, d81c4 <rshift+0x68>
   d81c2:	3304      	adds	r3, #4
   d81c4:	1b1a      	subs	r2, r3, r4
   d81c6:	42a3      	cmp	r3, r4
   d81c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d81cc:	bf08      	it	eq
   d81ce:	2300      	moveq	r3, #0
   d81d0:	6102      	str	r2, [r0, #16]
   d81d2:	bf08      	it	eq
   d81d4:	6143      	streq	r3, [r0, #20]
   d81d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d81da:	f8dc c000 	ldr.w	ip, [ip]
   d81de:	fa0c fc08 	lsl.w	ip, ip, r8
   d81e2:	ea4c 0707 	orr.w	r7, ip, r7
   d81e6:	f849 7b04 	str.w	r7, [r9], #4
   d81ea:	f85e 7b04 	ldr.w	r7, [lr], #4
   d81ee:	40cf      	lsrs	r7, r1
   d81f0:	e7da      	b.n	d81a8 <rshift+0x4c>
   d81f2:	f851 cb04 	ldr.w	ip, [r1], #4
   d81f6:	f847 cf04 	str.w	ip, [r7, #4]!
   d81fa:	e7c3      	b.n	d8184 <rshift+0x28>
   d81fc:	4623      	mov	r3, r4
   d81fe:	e7e1      	b.n	d81c4 <rshift+0x68>

000d8200 <__hexdig_fun>:
   d8200:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8204:	2b09      	cmp	r3, #9
   d8206:	d802      	bhi.n	d820e <__hexdig_fun+0xe>
   d8208:	3820      	subs	r0, #32
   d820a:	b2c0      	uxtb	r0, r0
   d820c:	4770      	bx	lr
   d820e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8212:	2b05      	cmp	r3, #5
   d8214:	d801      	bhi.n	d821a <__hexdig_fun+0x1a>
   d8216:	3847      	subs	r0, #71	; 0x47
   d8218:	e7f7      	b.n	d820a <__hexdig_fun+0xa>
   d821a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d821e:	2b05      	cmp	r3, #5
   d8220:	d801      	bhi.n	d8226 <__hexdig_fun+0x26>
   d8222:	3827      	subs	r0, #39	; 0x27
   d8224:	e7f1      	b.n	d820a <__hexdig_fun+0xa>
   d8226:	2000      	movs	r0, #0
   d8228:	4770      	bx	lr
	...

000d822c <__gethex>:
   d822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8230:	ed2d 8b02 	vpush	{d8}
   d8234:	b089      	sub	sp, #36	; 0x24
   d8236:	ee08 0a10 	vmov	s16, r0
   d823a:	9304      	str	r3, [sp, #16]
   d823c:	4bbc      	ldr	r3, [pc, #752]	; (d8530 <__gethex+0x304>)
   d823e:	681b      	ldr	r3, [r3, #0]
   d8240:	9301      	str	r3, [sp, #4]
   d8242:	4618      	mov	r0, r3
   d8244:	468b      	mov	fp, r1
   d8246:	4690      	mov	r8, r2
   d8248:	f7ff f8a3 	bl	d7392 <strlen>
   d824c:	9b01      	ldr	r3, [sp, #4]
   d824e:	f8db 2000 	ldr.w	r2, [fp]
   d8252:	4403      	add	r3, r0
   d8254:	4682      	mov	sl, r0
   d8256:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d825a:	9305      	str	r3, [sp, #20]
   d825c:	1c93      	adds	r3, r2, #2
   d825e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d8262:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d8266:	32fe      	adds	r2, #254	; 0xfe
   d8268:	18d1      	adds	r1, r2, r3
   d826a:	461f      	mov	r7, r3
   d826c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8270:	9100      	str	r1, [sp, #0]
   d8272:	2830      	cmp	r0, #48	; 0x30
   d8274:	d0f8      	beq.n	d8268 <__gethex+0x3c>
   d8276:	f7ff ffc3 	bl	d8200 <__hexdig_fun>
   d827a:	4604      	mov	r4, r0
   d827c:	2800      	cmp	r0, #0
   d827e:	d13a      	bne.n	d82f6 <__gethex+0xca>
   d8280:	9901      	ldr	r1, [sp, #4]
   d8282:	4652      	mov	r2, sl
   d8284:	4638      	mov	r0, r7
   d8286:	f7ff f88c 	bl	d73a2 <strncmp>
   d828a:	4605      	mov	r5, r0
   d828c:	2800      	cmp	r0, #0
   d828e:	d168      	bne.n	d8362 <__gethex+0x136>
   d8290:	f817 000a 	ldrb.w	r0, [r7, sl]
   d8294:	eb07 060a 	add.w	r6, r7, sl
   d8298:	f7ff ffb2 	bl	d8200 <__hexdig_fun>
   d829c:	2800      	cmp	r0, #0
   d829e:	d062      	beq.n	d8366 <__gethex+0x13a>
   d82a0:	4633      	mov	r3, r6
   d82a2:	7818      	ldrb	r0, [r3, #0]
   d82a4:	2830      	cmp	r0, #48	; 0x30
   d82a6:	461f      	mov	r7, r3
   d82a8:	f103 0301 	add.w	r3, r3, #1
   d82ac:	d0f9      	beq.n	d82a2 <__gethex+0x76>
   d82ae:	f7ff ffa7 	bl	d8200 <__hexdig_fun>
   d82b2:	2301      	movs	r3, #1
   d82b4:	fab0 f480 	clz	r4, r0
   d82b8:	0964      	lsrs	r4, r4, #5
   d82ba:	4635      	mov	r5, r6
   d82bc:	9300      	str	r3, [sp, #0]
   d82be:	463a      	mov	r2, r7
   d82c0:	4616      	mov	r6, r2
   d82c2:	3201      	adds	r2, #1
   d82c4:	7830      	ldrb	r0, [r6, #0]
   d82c6:	f7ff ff9b 	bl	d8200 <__hexdig_fun>
   d82ca:	2800      	cmp	r0, #0
   d82cc:	d1f8      	bne.n	d82c0 <__gethex+0x94>
   d82ce:	9901      	ldr	r1, [sp, #4]
   d82d0:	4652      	mov	r2, sl
   d82d2:	4630      	mov	r0, r6
   d82d4:	f7ff f865 	bl	d73a2 <strncmp>
   d82d8:	b980      	cbnz	r0, d82fc <__gethex+0xd0>
   d82da:	b94d      	cbnz	r5, d82f0 <__gethex+0xc4>
   d82dc:	eb06 050a 	add.w	r5, r6, sl
   d82e0:	462a      	mov	r2, r5
   d82e2:	4616      	mov	r6, r2
   d82e4:	3201      	adds	r2, #1
   d82e6:	7830      	ldrb	r0, [r6, #0]
   d82e8:	f7ff ff8a 	bl	d8200 <__hexdig_fun>
   d82ec:	2800      	cmp	r0, #0
   d82ee:	d1f8      	bne.n	d82e2 <__gethex+0xb6>
   d82f0:	1bad      	subs	r5, r5, r6
   d82f2:	00ad      	lsls	r5, r5, #2
   d82f4:	e004      	b.n	d8300 <__gethex+0xd4>
   d82f6:	2400      	movs	r4, #0
   d82f8:	4625      	mov	r5, r4
   d82fa:	e7e0      	b.n	d82be <__gethex+0x92>
   d82fc:	2d00      	cmp	r5, #0
   d82fe:	d1f7      	bne.n	d82f0 <__gethex+0xc4>
   d8300:	7833      	ldrb	r3, [r6, #0]
   d8302:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8306:	2b50      	cmp	r3, #80	; 0x50
   d8308:	d13b      	bne.n	d8382 <__gethex+0x156>
   d830a:	7873      	ldrb	r3, [r6, #1]
   d830c:	2b2b      	cmp	r3, #43	; 0x2b
   d830e:	d02c      	beq.n	d836a <__gethex+0x13e>
   d8310:	2b2d      	cmp	r3, #45	; 0x2d
   d8312:	d02e      	beq.n	d8372 <__gethex+0x146>
   d8314:	1c71      	adds	r1, r6, #1
   d8316:	f04f 0900 	mov.w	r9, #0
   d831a:	7808      	ldrb	r0, [r1, #0]
   d831c:	f7ff ff70 	bl	d8200 <__hexdig_fun>
   d8320:	1e43      	subs	r3, r0, #1
   d8322:	b2db      	uxtb	r3, r3
   d8324:	2b18      	cmp	r3, #24
   d8326:	d82c      	bhi.n	d8382 <__gethex+0x156>
   d8328:	f1a0 0210 	sub.w	r2, r0, #16
   d832c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8330:	f7ff ff66 	bl	d8200 <__hexdig_fun>
   d8334:	1e43      	subs	r3, r0, #1
   d8336:	b2db      	uxtb	r3, r3
   d8338:	2b18      	cmp	r3, #24
   d833a:	d91d      	bls.n	d8378 <__gethex+0x14c>
   d833c:	f1b9 0f00 	cmp.w	r9, #0
   d8340:	d000      	beq.n	d8344 <__gethex+0x118>
   d8342:	4252      	negs	r2, r2
   d8344:	4415      	add	r5, r2
   d8346:	f8cb 1000 	str.w	r1, [fp]
   d834a:	b1e4      	cbz	r4, d8386 <__gethex+0x15a>
   d834c:	9b00      	ldr	r3, [sp, #0]
   d834e:	2b00      	cmp	r3, #0
   d8350:	bf14      	ite	ne
   d8352:	2700      	movne	r7, #0
   d8354:	2706      	moveq	r7, #6
   d8356:	4638      	mov	r0, r7
   d8358:	b009      	add	sp, #36	; 0x24
   d835a:	ecbd 8b02 	vpop	{d8}
   d835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8362:	463e      	mov	r6, r7
   d8364:	4625      	mov	r5, r4
   d8366:	2401      	movs	r4, #1
   d8368:	e7ca      	b.n	d8300 <__gethex+0xd4>
   d836a:	f04f 0900 	mov.w	r9, #0
   d836e:	1cb1      	adds	r1, r6, #2
   d8370:	e7d3      	b.n	d831a <__gethex+0xee>
   d8372:	f04f 0901 	mov.w	r9, #1
   d8376:	e7fa      	b.n	d836e <__gethex+0x142>
   d8378:	230a      	movs	r3, #10
   d837a:	fb03 0202 	mla	r2, r3, r2, r0
   d837e:	3a10      	subs	r2, #16
   d8380:	e7d4      	b.n	d832c <__gethex+0x100>
   d8382:	4631      	mov	r1, r6
   d8384:	e7df      	b.n	d8346 <__gethex+0x11a>
   d8386:	1bf3      	subs	r3, r6, r7
   d8388:	3b01      	subs	r3, #1
   d838a:	4621      	mov	r1, r4
   d838c:	2b07      	cmp	r3, #7
   d838e:	dc52      	bgt.n	d8436 <__gethex+0x20a>
   d8390:	ee18 0a10 	vmov	r0, s16
   d8394:	f000 fa52 	bl	d883c <_Balloc>
   d8398:	f04f 0b00 	mov.w	fp, #0
   d839c:	f100 0914 	add.w	r9, r0, #20
   d83a0:	f1ca 0301 	rsb	r3, sl, #1
   d83a4:	4604      	mov	r4, r0
   d83a6:	f8cd 9008 	str.w	r9, [sp, #8]
   d83aa:	f8cd b000 	str.w	fp, [sp]
   d83ae:	9306      	str	r3, [sp, #24]
   d83b0:	42b7      	cmp	r7, r6
   d83b2:	d343      	bcc.n	d843c <__gethex+0x210>
   d83b4:	9802      	ldr	r0, [sp, #8]
   d83b6:	9b00      	ldr	r3, [sp, #0]
   d83b8:	f840 3b04 	str.w	r3, [r0], #4
   d83bc:	eba0 0009 	sub.w	r0, r0, r9
   d83c0:	1080      	asrs	r0, r0, #2
   d83c2:	0146      	lsls	r6, r0, #5
   d83c4:	6120      	str	r0, [r4, #16]
   d83c6:	4618      	mov	r0, r3
   d83c8:	f000 faff 	bl	d89ca <__hi0bits>
   d83cc:	1a30      	subs	r0, r6, r0
   d83ce:	f8d8 6000 	ldr.w	r6, [r8]
   d83d2:	42b0      	cmp	r0, r6
   d83d4:	dd66      	ble.n	d84a4 <__gethex+0x278>
   d83d6:	1b87      	subs	r7, r0, r6
   d83d8:	4639      	mov	r1, r7
   d83da:	4620      	mov	r0, r4
   d83dc:	f000 fe4c 	bl	d9078 <__any_on>
   d83e0:	4682      	mov	sl, r0
   d83e2:	b1a8      	cbz	r0, d8410 <__gethex+0x1e4>
   d83e4:	1e7b      	subs	r3, r7, #1
   d83e6:	1159      	asrs	r1, r3, #5
   d83e8:	f003 021f 	and.w	r2, r3, #31
   d83ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d83f0:	f04f 0a01 	mov.w	sl, #1
   d83f4:	fa0a f202 	lsl.w	r2, sl, r2
   d83f8:	420a      	tst	r2, r1
   d83fa:	d009      	beq.n	d8410 <__gethex+0x1e4>
   d83fc:	4553      	cmp	r3, sl
   d83fe:	dd05      	ble.n	d840c <__gethex+0x1e0>
   d8400:	1eb9      	subs	r1, r7, #2
   d8402:	4620      	mov	r0, r4
   d8404:	f000 fe38 	bl	d9078 <__any_on>
   d8408:	2800      	cmp	r0, #0
   d840a:	d148      	bne.n	d849e <__gethex+0x272>
   d840c:	f04f 0a02 	mov.w	sl, #2
   d8410:	4639      	mov	r1, r7
   d8412:	4620      	mov	r0, r4
   d8414:	f7ff fea2 	bl	d815c <rshift>
   d8418:	443d      	add	r5, r7
   d841a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d841e:	42ab      	cmp	r3, r5
   d8420:	da4f      	bge.n	d84c2 <__gethex+0x296>
   d8422:	ee18 0a10 	vmov	r0, s16
   d8426:	4621      	mov	r1, r4
   d8428:	f000 fa3c 	bl	d88a4 <_Bfree>
   d842c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d842e:	2300      	movs	r3, #0
   d8430:	6013      	str	r3, [r2, #0]
   d8432:	27a3      	movs	r7, #163	; 0xa3
   d8434:	e78f      	b.n	d8356 <__gethex+0x12a>
   d8436:	3101      	adds	r1, #1
   d8438:	105b      	asrs	r3, r3, #1
   d843a:	e7a7      	b.n	d838c <__gethex+0x160>
   d843c:	1e73      	subs	r3, r6, #1
   d843e:	9a05      	ldr	r2, [sp, #20]
   d8440:	9303      	str	r3, [sp, #12]
   d8442:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8446:	4293      	cmp	r3, r2
   d8448:	d019      	beq.n	d847e <__gethex+0x252>
   d844a:	f1bb 0f20 	cmp.w	fp, #32
   d844e:	d107      	bne.n	d8460 <__gethex+0x234>
   d8450:	9b02      	ldr	r3, [sp, #8]
   d8452:	9a00      	ldr	r2, [sp, #0]
   d8454:	f843 2b04 	str.w	r2, [r3], #4
   d8458:	9302      	str	r3, [sp, #8]
   d845a:	2300      	movs	r3, #0
   d845c:	9300      	str	r3, [sp, #0]
   d845e:	469b      	mov	fp, r3
   d8460:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8464:	f7ff fecc 	bl	d8200 <__hexdig_fun>
   d8468:	9b00      	ldr	r3, [sp, #0]
   d846a:	f000 000f 	and.w	r0, r0, #15
   d846e:	fa00 f00b 	lsl.w	r0, r0, fp
   d8472:	4303      	orrs	r3, r0
   d8474:	9300      	str	r3, [sp, #0]
   d8476:	f10b 0b04 	add.w	fp, fp, #4
   d847a:	9b03      	ldr	r3, [sp, #12]
   d847c:	e00d      	b.n	d849a <__gethex+0x26e>
   d847e:	9b03      	ldr	r3, [sp, #12]
   d8480:	9a06      	ldr	r2, [sp, #24]
   d8482:	4413      	add	r3, r2
   d8484:	42bb      	cmp	r3, r7
   d8486:	d3e0      	bcc.n	d844a <__gethex+0x21e>
   d8488:	4618      	mov	r0, r3
   d848a:	9901      	ldr	r1, [sp, #4]
   d848c:	9307      	str	r3, [sp, #28]
   d848e:	4652      	mov	r2, sl
   d8490:	f7fe ff87 	bl	d73a2 <strncmp>
   d8494:	9b07      	ldr	r3, [sp, #28]
   d8496:	2800      	cmp	r0, #0
   d8498:	d1d7      	bne.n	d844a <__gethex+0x21e>
   d849a:	461e      	mov	r6, r3
   d849c:	e788      	b.n	d83b0 <__gethex+0x184>
   d849e:	f04f 0a03 	mov.w	sl, #3
   d84a2:	e7b5      	b.n	d8410 <__gethex+0x1e4>
   d84a4:	da0a      	bge.n	d84bc <__gethex+0x290>
   d84a6:	1a37      	subs	r7, r6, r0
   d84a8:	4621      	mov	r1, r4
   d84aa:	ee18 0a10 	vmov	r0, s16
   d84ae:	463a      	mov	r2, r7
   d84b0:	f000 fbce 	bl	d8c50 <__lshift>
   d84b4:	1bed      	subs	r5, r5, r7
   d84b6:	4604      	mov	r4, r0
   d84b8:	f100 0914 	add.w	r9, r0, #20
   d84bc:	f04f 0a00 	mov.w	sl, #0
   d84c0:	e7ab      	b.n	d841a <__gethex+0x1ee>
   d84c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d84c6:	42a8      	cmp	r0, r5
   d84c8:	dd6d      	ble.n	d85a6 <__gethex+0x37a>
   d84ca:	1b45      	subs	r5, r0, r5
   d84cc:	42ae      	cmp	r6, r5
   d84ce:	dc31      	bgt.n	d8534 <__gethex+0x308>
   d84d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d84d4:	2b02      	cmp	r3, #2
   d84d6:	d023      	beq.n	d8520 <__gethex+0x2f4>
   d84d8:	2b03      	cmp	r3, #3
   d84da:	d025      	beq.n	d8528 <__gethex+0x2fc>
   d84dc:	2b01      	cmp	r3, #1
   d84de:	d115      	bne.n	d850c <__gethex+0x2e0>
   d84e0:	42ae      	cmp	r6, r5
   d84e2:	d113      	bne.n	d850c <__gethex+0x2e0>
   d84e4:	2e01      	cmp	r6, #1
   d84e6:	d10b      	bne.n	d8500 <__gethex+0x2d4>
   d84e8:	9a04      	ldr	r2, [sp, #16]
   d84ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d84ee:	6013      	str	r3, [r2, #0]
   d84f0:	2301      	movs	r3, #1
   d84f2:	6123      	str	r3, [r4, #16]
   d84f4:	f8c9 3000 	str.w	r3, [r9]
   d84f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d84fa:	2762      	movs	r7, #98	; 0x62
   d84fc:	601c      	str	r4, [r3, #0]
   d84fe:	e72a      	b.n	d8356 <__gethex+0x12a>
   d8500:	1e71      	subs	r1, r6, #1
   d8502:	4620      	mov	r0, r4
   d8504:	f000 fdb8 	bl	d9078 <__any_on>
   d8508:	2800      	cmp	r0, #0
   d850a:	d1ed      	bne.n	d84e8 <__gethex+0x2bc>
   d850c:	ee18 0a10 	vmov	r0, s16
   d8510:	4621      	mov	r1, r4
   d8512:	f000 f9c7 	bl	d88a4 <_Bfree>
   d8516:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8518:	2300      	movs	r3, #0
   d851a:	6013      	str	r3, [r2, #0]
   d851c:	2750      	movs	r7, #80	; 0x50
   d851e:	e71a      	b.n	d8356 <__gethex+0x12a>
   d8520:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8522:	2b00      	cmp	r3, #0
   d8524:	d1f2      	bne.n	d850c <__gethex+0x2e0>
   d8526:	e7df      	b.n	d84e8 <__gethex+0x2bc>
   d8528:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d852a:	2b00      	cmp	r3, #0
   d852c:	d1dc      	bne.n	d84e8 <__gethex+0x2bc>
   d852e:	e7ed      	b.n	d850c <__gethex+0x2e0>
   d8530:	000d97fc 	.word	0x000d97fc
   d8534:	1e6f      	subs	r7, r5, #1
   d8536:	f1ba 0f00 	cmp.w	sl, #0
   d853a:	d131      	bne.n	d85a0 <__gethex+0x374>
   d853c:	b127      	cbz	r7, d8548 <__gethex+0x31c>
   d853e:	4639      	mov	r1, r7
   d8540:	4620      	mov	r0, r4
   d8542:	f000 fd99 	bl	d9078 <__any_on>
   d8546:	4682      	mov	sl, r0
   d8548:	117b      	asrs	r3, r7, #5
   d854a:	2101      	movs	r1, #1
   d854c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d8550:	f007 071f 	and.w	r7, r7, #31
   d8554:	fa01 f707 	lsl.w	r7, r1, r7
   d8558:	421f      	tst	r7, r3
   d855a:	4629      	mov	r1, r5
   d855c:	4620      	mov	r0, r4
   d855e:	bf18      	it	ne
   d8560:	f04a 0a02 	orrne.w	sl, sl, #2
   d8564:	1b76      	subs	r6, r6, r5
   d8566:	f7ff fdf9 	bl	d815c <rshift>
   d856a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d856e:	2702      	movs	r7, #2
   d8570:	f1ba 0f00 	cmp.w	sl, #0
   d8574:	d048      	beq.n	d8608 <__gethex+0x3dc>
   d8576:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d857a:	2b02      	cmp	r3, #2
   d857c:	d015      	beq.n	d85aa <__gethex+0x37e>
   d857e:	2b03      	cmp	r3, #3
   d8580:	d017      	beq.n	d85b2 <__gethex+0x386>
   d8582:	2b01      	cmp	r3, #1
   d8584:	d109      	bne.n	d859a <__gethex+0x36e>
   d8586:	f01a 0f02 	tst.w	sl, #2
   d858a:	d006      	beq.n	d859a <__gethex+0x36e>
   d858c:	f8d9 0000 	ldr.w	r0, [r9]
   d8590:	ea4a 0a00 	orr.w	sl, sl, r0
   d8594:	f01a 0f01 	tst.w	sl, #1
   d8598:	d10e      	bne.n	d85b8 <__gethex+0x38c>
   d859a:	f047 0710 	orr.w	r7, r7, #16
   d859e:	e033      	b.n	d8608 <__gethex+0x3dc>
   d85a0:	f04f 0a01 	mov.w	sl, #1
   d85a4:	e7d0      	b.n	d8548 <__gethex+0x31c>
   d85a6:	2701      	movs	r7, #1
   d85a8:	e7e2      	b.n	d8570 <__gethex+0x344>
   d85aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d85ac:	f1c3 0301 	rsb	r3, r3, #1
   d85b0:	9315      	str	r3, [sp, #84]	; 0x54
   d85b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d85b4:	2b00      	cmp	r3, #0
   d85b6:	d0f0      	beq.n	d859a <__gethex+0x36e>
   d85b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d85bc:	f104 0314 	add.w	r3, r4, #20
   d85c0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d85c4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d85c8:	f04f 0c00 	mov.w	ip, #0
   d85cc:	4618      	mov	r0, r3
   d85ce:	f853 2b04 	ldr.w	r2, [r3], #4
   d85d2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d85d6:	d01c      	beq.n	d8612 <__gethex+0x3e6>
   d85d8:	3201      	adds	r2, #1
   d85da:	6002      	str	r2, [r0, #0]
   d85dc:	2f02      	cmp	r7, #2
   d85de:	f104 0314 	add.w	r3, r4, #20
   d85e2:	d13a      	bne.n	d865a <__gethex+0x42e>
   d85e4:	f8d8 2000 	ldr.w	r2, [r8]
   d85e8:	3a01      	subs	r2, #1
   d85ea:	42b2      	cmp	r2, r6
   d85ec:	d10a      	bne.n	d8604 <__gethex+0x3d8>
   d85ee:	1171      	asrs	r1, r6, #5
   d85f0:	2201      	movs	r2, #1
   d85f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d85f6:	f006 061f 	and.w	r6, r6, #31
   d85fa:	fa02 f606 	lsl.w	r6, r2, r6
   d85fe:	421e      	tst	r6, r3
   d8600:	bf18      	it	ne
   d8602:	4617      	movne	r7, r2
   d8604:	f047 0720 	orr.w	r7, r7, #32
   d8608:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d860a:	601c      	str	r4, [r3, #0]
   d860c:	9b04      	ldr	r3, [sp, #16]
   d860e:	601d      	str	r5, [r3, #0]
   d8610:	e6a1      	b.n	d8356 <__gethex+0x12a>
   d8612:	4299      	cmp	r1, r3
   d8614:	f843 cc04 	str.w	ip, [r3, #-4]
   d8618:	d8d8      	bhi.n	d85cc <__gethex+0x3a0>
   d861a:	68a3      	ldr	r3, [r4, #8]
   d861c:	4599      	cmp	r9, r3
   d861e:	db14      	blt.n	d864a <__gethex+0x41e>
   d8620:	6861      	ldr	r1, [r4, #4]
   d8622:	ee18 0a10 	vmov	r0, s16
   d8626:	3101      	adds	r1, #1
   d8628:	f000 f908 	bl	d883c <_Balloc>
   d862c:	6922      	ldr	r2, [r4, #16]
   d862e:	3202      	adds	r2, #2
   d8630:	f104 010c 	add.w	r1, r4, #12
   d8634:	4682      	mov	sl, r0
   d8636:	0092      	lsls	r2, r2, #2
   d8638:	300c      	adds	r0, #12
   d863a:	f7fe fe41 	bl	d72c0 <memcpy>
   d863e:	4621      	mov	r1, r4
   d8640:	ee18 0a10 	vmov	r0, s16
   d8644:	f000 f92e 	bl	d88a4 <_Bfree>
   d8648:	4654      	mov	r4, sl
   d864a:	6923      	ldr	r3, [r4, #16]
   d864c:	1c5a      	adds	r2, r3, #1
   d864e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d8652:	6122      	str	r2, [r4, #16]
   d8654:	2201      	movs	r2, #1
   d8656:	615a      	str	r2, [r3, #20]
   d8658:	e7c0      	b.n	d85dc <__gethex+0x3b0>
   d865a:	6922      	ldr	r2, [r4, #16]
   d865c:	454a      	cmp	r2, r9
   d865e:	dd0b      	ble.n	d8678 <__gethex+0x44c>
   d8660:	2101      	movs	r1, #1
   d8662:	4620      	mov	r0, r4
   d8664:	f7ff fd7a 	bl	d815c <rshift>
   d8668:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d866c:	3501      	adds	r5, #1
   d866e:	42ab      	cmp	r3, r5
   d8670:	f6ff aed7 	blt.w	d8422 <__gethex+0x1f6>
   d8674:	2701      	movs	r7, #1
   d8676:	e7c5      	b.n	d8604 <__gethex+0x3d8>
   d8678:	f016 061f 	ands.w	r6, r6, #31
   d867c:	d0fa      	beq.n	d8674 <__gethex+0x448>
   d867e:	449b      	add	fp, r3
   d8680:	f1c6 0620 	rsb	r6, r6, #32
   d8684:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d8688:	f000 f99f 	bl	d89ca <__hi0bits>
   d868c:	42b0      	cmp	r0, r6
   d868e:	dbe7      	blt.n	d8660 <__gethex+0x434>
   d8690:	e7f0      	b.n	d8674 <__gethex+0x448>
   d8692:	bf00      	nop

000d8694 <L_shift>:
   d8694:	f1c2 0208 	rsb	r2, r2, #8
   d8698:	0092      	lsls	r2, r2, #2
   d869a:	b570      	push	{r4, r5, r6, lr}
   d869c:	f1c2 0620 	rsb	r6, r2, #32
   d86a0:	6843      	ldr	r3, [r0, #4]
   d86a2:	6804      	ldr	r4, [r0, #0]
   d86a4:	fa03 f506 	lsl.w	r5, r3, r6
   d86a8:	432c      	orrs	r4, r5
   d86aa:	40d3      	lsrs	r3, r2
   d86ac:	6004      	str	r4, [r0, #0]
   d86ae:	f840 3f04 	str.w	r3, [r0, #4]!
   d86b2:	4288      	cmp	r0, r1
   d86b4:	d3f4      	bcc.n	d86a0 <L_shift+0xc>
   d86b6:	bd70      	pop	{r4, r5, r6, pc}

000d86b8 <__match>:
   d86b8:	b530      	push	{r4, r5, lr}
   d86ba:	6803      	ldr	r3, [r0, #0]
   d86bc:	3301      	adds	r3, #1
   d86be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86c2:	b914      	cbnz	r4, d86ca <__match+0x12>
   d86c4:	6003      	str	r3, [r0, #0]
   d86c6:	2001      	movs	r0, #1
   d86c8:	bd30      	pop	{r4, r5, pc}
   d86ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d86ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d86d2:	2d19      	cmp	r5, #25
   d86d4:	bf98      	it	ls
   d86d6:	3220      	addls	r2, #32
   d86d8:	42a2      	cmp	r2, r4
   d86da:	d0f0      	beq.n	d86be <__match+0x6>
   d86dc:	2000      	movs	r0, #0
   d86de:	e7f3      	b.n	d86c8 <__match+0x10>

000d86e0 <__hexnan>:
   d86e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86e4:	680b      	ldr	r3, [r1, #0]
   d86e6:	6801      	ldr	r1, [r0, #0]
   d86e8:	115e      	asrs	r6, r3, #5
   d86ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d86ee:	f013 031f 	ands.w	r3, r3, #31
   d86f2:	b087      	sub	sp, #28
   d86f4:	bf18      	it	ne
   d86f6:	3604      	addne	r6, #4
   d86f8:	2500      	movs	r5, #0
   d86fa:	1f37      	subs	r7, r6, #4
   d86fc:	4682      	mov	sl, r0
   d86fe:	4690      	mov	r8, r2
   d8700:	9301      	str	r3, [sp, #4]
   d8702:	f846 5c04 	str.w	r5, [r6, #-4]
   d8706:	46b9      	mov	r9, r7
   d8708:	463c      	mov	r4, r7
   d870a:	9502      	str	r5, [sp, #8]
   d870c:	46ab      	mov	fp, r5
   d870e:	784a      	ldrb	r2, [r1, #1]
   d8710:	1c4b      	adds	r3, r1, #1
   d8712:	9303      	str	r3, [sp, #12]
   d8714:	b342      	cbz	r2, d8768 <__hexnan+0x88>
   d8716:	4610      	mov	r0, r2
   d8718:	9105      	str	r1, [sp, #20]
   d871a:	9204      	str	r2, [sp, #16]
   d871c:	f7ff fd70 	bl	d8200 <__hexdig_fun>
   d8720:	2800      	cmp	r0, #0
   d8722:	d14f      	bne.n	d87c4 <__hexnan+0xe4>
   d8724:	9a04      	ldr	r2, [sp, #16]
   d8726:	9905      	ldr	r1, [sp, #20]
   d8728:	2a20      	cmp	r2, #32
   d872a:	d818      	bhi.n	d875e <__hexnan+0x7e>
   d872c:	9b02      	ldr	r3, [sp, #8]
   d872e:	459b      	cmp	fp, r3
   d8730:	dd13      	ble.n	d875a <__hexnan+0x7a>
   d8732:	454c      	cmp	r4, r9
   d8734:	d206      	bcs.n	d8744 <__hexnan+0x64>
   d8736:	2d07      	cmp	r5, #7
   d8738:	dc04      	bgt.n	d8744 <__hexnan+0x64>
   d873a:	462a      	mov	r2, r5
   d873c:	4649      	mov	r1, r9
   d873e:	4620      	mov	r0, r4
   d8740:	f7ff ffa8 	bl	d8694 <L_shift>
   d8744:	4544      	cmp	r4, r8
   d8746:	d950      	bls.n	d87ea <__hexnan+0x10a>
   d8748:	2300      	movs	r3, #0
   d874a:	f1a4 0904 	sub.w	r9, r4, #4
   d874e:	f844 3c04 	str.w	r3, [r4, #-4]
   d8752:	f8cd b008 	str.w	fp, [sp, #8]
   d8756:	464c      	mov	r4, r9
   d8758:	461d      	mov	r5, r3
   d875a:	9903      	ldr	r1, [sp, #12]
   d875c:	e7d7      	b.n	d870e <__hexnan+0x2e>
   d875e:	2a29      	cmp	r2, #41	; 0x29
   d8760:	d156      	bne.n	d8810 <__hexnan+0x130>
   d8762:	3102      	adds	r1, #2
   d8764:	f8ca 1000 	str.w	r1, [sl]
   d8768:	f1bb 0f00 	cmp.w	fp, #0
   d876c:	d050      	beq.n	d8810 <__hexnan+0x130>
   d876e:	454c      	cmp	r4, r9
   d8770:	d206      	bcs.n	d8780 <__hexnan+0xa0>
   d8772:	2d07      	cmp	r5, #7
   d8774:	dc04      	bgt.n	d8780 <__hexnan+0xa0>
   d8776:	462a      	mov	r2, r5
   d8778:	4649      	mov	r1, r9
   d877a:	4620      	mov	r0, r4
   d877c:	f7ff ff8a 	bl	d8694 <L_shift>
   d8780:	4544      	cmp	r4, r8
   d8782:	d934      	bls.n	d87ee <__hexnan+0x10e>
   d8784:	f1a8 0204 	sub.w	r2, r8, #4
   d8788:	4623      	mov	r3, r4
   d878a:	f853 1b04 	ldr.w	r1, [r3], #4
   d878e:	f842 1f04 	str.w	r1, [r2, #4]!
   d8792:	429f      	cmp	r7, r3
   d8794:	d2f9      	bcs.n	d878a <__hexnan+0xaa>
   d8796:	1b3b      	subs	r3, r7, r4
   d8798:	f023 0303 	bic.w	r3, r3, #3
   d879c:	3304      	adds	r3, #4
   d879e:	3401      	adds	r4, #1
   d87a0:	3e03      	subs	r6, #3
   d87a2:	42b4      	cmp	r4, r6
   d87a4:	bf88      	it	hi
   d87a6:	2304      	movhi	r3, #4
   d87a8:	4443      	add	r3, r8
   d87aa:	2200      	movs	r2, #0
   d87ac:	f843 2b04 	str.w	r2, [r3], #4
   d87b0:	429f      	cmp	r7, r3
   d87b2:	d2fb      	bcs.n	d87ac <__hexnan+0xcc>
   d87b4:	683b      	ldr	r3, [r7, #0]
   d87b6:	b91b      	cbnz	r3, d87c0 <__hexnan+0xe0>
   d87b8:	4547      	cmp	r7, r8
   d87ba:	d127      	bne.n	d880c <__hexnan+0x12c>
   d87bc:	2301      	movs	r3, #1
   d87be:	603b      	str	r3, [r7, #0]
   d87c0:	2005      	movs	r0, #5
   d87c2:	e026      	b.n	d8812 <__hexnan+0x132>
   d87c4:	3501      	adds	r5, #1
   d87c6:	2d08      	cmp	r5, #8
   d87c8:	f10b 0b01 	add.w	fp, fp, #1
   d87cc:	dd06      	ble.n	d87dc <__hexnan+0xfc>
   d87ce:	4544      	cmp	r4, r8
   d87d0:	d9c3      	bls.n	d875a <__hexnan+0x7a>
   d87d2:	2300      	movs	r3, #0
   d87d4:	f844 3c04 	str.w	r3, [r4, #-4]
   d87d8:	2501      	movs	r5, #1
   d87da:	3c04      	subs	r4, #4
   d87dc:	6822      	ldr	r2, [r4, #0]
   d87de:	f000 000f 	and.w	r0, r0, #15
   d87e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d87e6:	6022      	str	r2, [r4, #0]
   d87e8:	e7b7      	b.n	d875a <__hexnan+0x7a>
   d87ea:	2508      	movs	r5, #8
   d87ec:	e7b5      	b.n	d875a <__hexnan+0x7a>
   d87ee:	9b01      	ldr	r3, [sp, #4]
   d87f0:	2b00      	cmp	r3, #0
   d87f2:	d0df      	beq.n	d87b4 <__hexnan+0xd4>
   d87f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d87f8:	f1c3 0320 	rsb	r3, r3, #32
   d87fc:	fa22 f303 	lsr.w	r3, r2, r3
   d8800:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8804:	401a      	ands	r2, r3
   d8806:	f846 2c04 	str.w	r2, [r6, #-4]
   d880a:	e7d3      	b.n	d87b4 <__hexnan+0xd4>
   d880c:	3f04      	subs	r7, #4
   d880e:	e7d1      	b.n	d87b4 <__hexnan+0xd4>
   d8810:	2004      	movs	r0, #4
   d8812:	b007      	add	sp, #28
   d8814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8818 <__ascii_mbtowc>:
   d8818:	b082      	sub	sp, #8
   d881a:	b901      	cbnz	r1, d881e <__ascii_mbtowc+0x6>
   d881c:	a901      	add	r1, sp, #4
   d881e:	b142      	cbz	r2, d8832 <__ascii_mbtowc+0x1a>
   d8820:	b14b      	cbz	r3, d8836 <__ascii_mbtowc+0x1e>
   d8822:	7813      	ldrb	r3, [r2, #0]
   d8824:	600b      	str	r3, [r1, #0]
   d8826:	7812      	ldrb	r2, [r2, #0]
   d8828:	1e10      	subs	r0, r2, #0
   d882a:	bf18      	it	ne
   d882c:	2001      	movne	r0, #1
   d882e:	b002      	add	sp, #8
   d8830:	4770      	bx	lr
   d8832:	4610      	mov	r0, r2
   d8834:	e7fb      	b.n	d882e <__ascii_mbtowc+0x16>
   d8836:	f06f 0001 	mvn.w	r0, #1
   d883a:	e7f8      	b.n	d882e <__ascii_mbtowc+0x16>

000d883c <_Balloc>:
   d883c:	b570      	push	{r4, r5, r6, lr}
   d883e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d8840:	4604      	mov	r4, r0
   d8842:	460d      	mov	r5, r1
   d8844:	b93e      	cbnz	r6, d8856 <_Balloc+0x1a>
   d8846:	2010      	movs	r0, #16
   d8848:	f7fc fe4e 	bl	d54e8 <malloc>
   d884c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d8850:	6260      	str	r0, [r4, #36]	; 0x24
   d8852:	6006      	str	r6, [r0, #0]
   d8854:	60c6      	str	r6, [r0, #12]
   d8856:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d8858:	68f3      	ldr	r3, [r6, #12]
   d885a:	b183      	cbz	r3, d887e <_Balloc+0x42>
   d885c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d885e:	68db      	ldr	r3, [r3, #12]
   d8860:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d8864:	b9b8      	cbnz	r0, d8896 <_Balloc+0x5a>
   d8866:	2101      	movs	r1, #1
   d8868:	fa01 f605 	lsl.w	r6, r1, r5
   d886c:	1d72      	adds	r2, r6, #5
   d886e:	0092      	lsls	r2, r2, #2
   d8870:	4620      	mov	r0, r4
   d8872:	f000 fc22 	bl	d90ba <_calloc_r>
   d8876:	b160      	cbz	r0, d8892 <_Balloc+0x56>
   d8878:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d887c:	e00e      	b.n	d889c <_Balloc+0x60>
   d887e:	2221      	movs	r2, #33	; 0x21
   d8880:	2104      	movs	r1, #4
   d8882:	4620      	mov	r0, r4
   d8884:	f000 fc19 	bl	d90ba <_calloc_r>
   d8888:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d888a:	60f0      	str	r0, [r6, #12]
   d888c:	68db      	ldr	r3, [r3, #12]
   d888e:	2b00      	cmp	r3, #0
   d8890:	d1e4      	bne.n	d885c <_Balloc+0x20>
   d8892:	2000      	movs	r0, #0
   d8894:	bd70      	pop	{r4, r5, r6, pc}
   d8896:	6802      	ldr	r2, [r0, #0]
   d8898:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d889c:	2300      	movs	r3, #0
   d889e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d88a2:	e7f7      	b.n	d8894 <_Balloc+0x58>

000d88a4 <_Bfree>:
   d88a4:	b570      	push	{r4, r5, r6, lr}
   d88a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d88a8:	4605      	mov	r5, r0
   d88aa:	460c      	mov	r4, r1
   d88ac:	b93e      	cbnz	r6, d88be <_Bfree+0x1a>
   d88ae:	2010      	movs	r0, #16
   d88b0:	f7fc fe1a 	bl	d54e8 <malloc>
   d88b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d88b8:	6268      	str	r0, [r5, #36]	; 0x24
   d88ba:	6006      	str	r6, [r0, #0]
   d88bc:	60c6      	str	r6, [r0, #12]
   d88be:	b13c      	cbz	r4, d88d0 <_Bfree+0x2c>
   d88c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d88c2:	6862      	ldr	r2, [r4, #4]
   d88c4:	68db      	ldr	r3, [r3, #12]
   d88c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d88ca:	6021      	str	r1, [r4, #0]
   d88cc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d88d0:	bd70      	pop	{r4, r5, r6, pc}

000d88d2 <__multadd>:
   d88d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d88d6:	690e      	ldr	r6, [r1, #16]
   d88d8:	4607      	mov	r7, r0
   d88da:	4698      	mov	r8, r3
   d88dc:	460c      	mov	r4, r1
   d88de:	f101 0014 	add.w	r0, r1, #20
   d88e2:	2300      	movs	r3, #0
   d88e4:	6805      	ldr	r5, [r0, #0]
   d88e6:	b2a9      	uxth	r1, r5
   d88e8:	fb02 8101 	mla	r1, r2, r1, r8
   d88ec:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d88f0:	0c2d      	lsrs	r5, r5, #16
   d88f2:	fb02 c505 	mla	r5, r2, r5, ip
   d88f6:	b289      	uxth	r1, r1
   d88f8:	3301      	adds	r3, #1
   d88fa:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d88fe:	429e      	cmp	r6, r3
   d8900:	f840 1b04 	str.w	r1, [r0], #4
   d8904:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d8908:	dcec      	bgt.n	d88e4 <__multadd+0x12>
   d890a:	f1b8 0f00 	cmp.w	r8, #0
   d890e:	d01b      	beq.n	d8948 <__multadd+0x76>
   d8910:	68a3      	ldr	r3, [r4, #8]
   d8912:	42b3      	cmp	r3, r6
   d8914:	dc12      	bgt.n	d893c <__multadd+0x6a>
   d8916:	6861      	ldr	r1, [r4, #4]
   d8918:	4638      	mov	r0, r7
   d891a:	3101      	adds	r1, #1
   d891c:	f7ff ff8e 	bl	d883c <_Balloc>
   d8920:	6922      	ldr	r2, [r4, #16]
   d8922:	3202      	adds	r2, #2
   d8924:	f104 010c 	add.w	r1, r4, #12
   d8928:	4605      	mov	r5, r0
   d892a:	0092      	lsls	r2, r2, #2
   d892c:	300c      	adds	r0, #12
   d892e:	f7fe fcc7 	bl	d72c0 <memcpy>
   d8932:	4621      	mov	r1, r4
   d8934:	4638      	mov	r0, r7
   d8936:	f7ff ffb5 	bl	d88a4 <_Bfree>
   d893a:	462c      	mov	r4, r5
   d893c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d8940:	3601      	adds	r6, #1
   d8942:	f8c3 8014 	str.w	r8, [r3, #20]
   d8946:	6126      	str	r6, [r4, #16]
   d8948:	4620      	mov	r0, r4
   d894a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d894e <__s2b>:
   d894e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8952:	460c      	mov	r4, r1
   d8954:	4615      	mov	r5, r2
   d8956:	461f      	mov	r7, r3
   d8958:	2209      	movs	r2, #9
   d895a:	3308      	adds	r3, #8
   d895c:	4606      	mov	r6, r0
   d895e:	fb93 f3f2 	sdiv	r3, r3, r2
   d8962:	2100      	movs	r1, #0
   d8964:	2201      	movs	r2, #1
   d8966:	429a      	cmp	r2, r3
   d8968:	db20      	blt.n	d89ac <__s2b+0x5e>
   d896a:	4630      	mov	r0, r6
   d896c:	f7ff ff66 	bl	d883c <_Balloc>
   d8970:	9b08      	ldr	r3, [sp, #32]
   d8972:	6143      	str	r3, [r0, #20]
   d8974:	2d09      	cmp	r5, #9
   d8976:	f04f 0301 	mov.w	r3, #1
   d897a:	6103      	str	r3, [r0, #16]
   d897c:	dd19      	ble.n	d89b2 <__s2b+0x64>
   d897e:	f104 0909 	add.w	r9, r4, #9
   d8982:	46c8      	mov	r8, r9
   d8984:	442c      	add	r4, r5
   d8986:	f818 3b01 	ldrb.w	r3, [r8], #1
   d898a:	4601      	mov	r1, r0
   d898c:	3b30      	subs	r3, #48	; 0x30
   d898e:	220a      	movs	r2, #10
   d8990:	4630      	mov	r0, r6
   d8992:	f7ff ff9e 	bl	d88d2 <__multadd>
   d8996:	45a0      	cmp	r8, r4
   d8998:	d1f5      	bne.n	d8986 <__s2b+0x38>
   d899a:	f1a5 0408 	sub.w	r4, r5, #8
   d899e:	444c      	add	r4, r9
   d89a0:	1b2d      	subs	r5, r5, r4
   d89a2:	1963      	adds	r3, r4, r5
   d89a4:	42bb      	cmp	r3, r7
   d89a6:	db07      	blt.n	d89b8 <__s2b+0x6a>
   d89a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d89ac:	0052      	lsls	r2, r2, #1
   d89ae:	3101      	adds	r1, #1
   d89b0:	e7d9      	b.n	d8966 <__s2b+0x18>
   d89b2:	340a      	adds	r4, #10
   d89b4:	2509      	movs	r5, #9
   d89b6:	e7f3      	b.n	d89a0 <__s2b+0x52>
   d89b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   d89bc:	4601      	mov	r1, r0
   d89be:	3b30      	subs	r3, #48	; 0x30
   d89c0:	220a      	movs	r2, #10
   d89c2:	4630      	mov	r0, r6
   d89c4:	f7ff ff85 	bl	d88d2 <__multadd>
   d89c8:	e7eb      	b.n	d89a2 <__s2b+0x54>

000d89ca <__hi0bits>:
   d89ca:	0c03      	lsrs	r3, r0, #16
   d89cc:	041b      	lsls	r3, r3, #16
   d89ce:	b9d3      	cbnz	r3, d8a06 <__hi0bits+0x3c>
   d89d0:	0400      	lsls	r0, r0, #16
   d89d2:	2310      	movs	r3, #16
   d89d4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d89d8:	bf04      	itt	eq
   d89da:	0200      	lsleq	r0, r0, #8
   d89dc:	3308      	addeq	r3, #8
   d89de:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d89e2:	bf04      	itt	eq
   d89e4:	0100      	lsleq	r0, r0, #4
   d89e6:	3304      	addeq	r3, #4
   d89e8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d89ec:	bf04      	itt	eq
   d89ee:	0080      	lsleq	r0, r0, #2
   d89f0:	3302      	addeq	r3, #2
   d89f2:	2800      	cmp	r0, #0
   d89f4:	db05      	blt.n	d8a02 <__hi0bits+0x38>
   d89f6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d89fa:	f103 0301 	add.w	r3, r3, #1
   d89fe:	bf08      	it	eq
   d8a00:	2320      	moveq	r3, #32
   d8a02:	4618      	mov	r0, r3
   d8a04:	4770      	bx	lr
   d8a06:	2300      	movs	r3, #0
   d8a08:	e7e4      	b.n	d89d4 <__hi0bits+0xa>

000d8a0a <__lo0bits>:
   d8a0a:	6803      	ldr	r3, [r0, #0]
   d8a0c:	f013 0207 	ands.w	r2, r3, #7
   d8a10:	4601      	mov	r1, r0
   d8a12:	d00b      	beq.n	d8a2c <__lo0bits+0x22>
   d8a14:	07da      	lsls	r2, r3, #31
   d8a16:	d424      	bmi.n	d8a62 <__lo0bits+0x58>
   d8a18:	0798      	lsls	r0, r3, #30
   d8a1a:	bf49      	itett	mi
   d8a1c:	085b      	lsrmi	r3, r3, #1
   d8a1e:	089b      	lsrpl	r3, r3, #2
   d8a20:	2001      	movmi	r0, #1
   d8a22:	600b      	strmi	r3, [r1, #0]
   d8a24:	bf5c      	itt	pl
   d8a26:	600b      	strpl	r3, [r1, #0]
   d8a28:	2002      	movpl	r0, #2
   d8a2a:	4770      	bx	lr
   d8a2c:	b298      	uxth	r0, r3
   d8a2e:	b9b0      	cbnz	r0, d8a5e <__lo0bits+0x54>
   d8a30:	0c1b      	lsrs	r3, r3, #16
   d8a32:	2010      	movs	r0, #16
   d8a34:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8a38:	bf04      	itt	eq
   d8a3a:	0a1b      	lsreq	r3, r3, #8
   d8a3c:	3008      	addeq	r0, #8
   d8a3e:	071a      	lsls	r2, r3, #28
   d8a40:	bf04      	itt	eq
   d8a42:	091b      	lsreq	r3, r3, #4
   d8a44:	3004      	addeq	r0, #4
   d8a46:	079a      	lsls	r2, r3, #30
   d8a48:	bf04      	itt	eq
   d8a4a:	089b      	lsreq	r3, r3, #2
   d8a4c:	3002      	addeq	r0, #2
   d8a4e:	07da      	lsls	r2, r3, #31
   d8a50:	d403      	bmi.n	d8a5a <__lo0bits+0x50>
   d8a52:	085b      	lsrs	r3, r3, #1
   d8a54:	f100 0001 	add.w	r0, r0, #1
   d8a58:	d005      	beq.n	d8a66 <__lo0bits+0x5c>
   d8a5a:	600b      	str	r3, [r1, #0]
   d8a5c:	4770      	bx	lr
   d8a5e:	4610      	mov	r0, r2
   d8a60:	e7e8      	b.n	d8a34 <__lo0bits+0x2a>
   d8a62:	2000      	movs	r0, #0
   d8a64:	4770      	bx	lr
   d8a66:	2020      	movs	r0, #32
   d8a68:	4770      	bx	lr

000d8a6a <__i2b>:
   d8a6a:	b510      	push	{r4, lr}
   d8a6c:	460c      	mov	r4, r1
   d8a6e:	2101      	movs	r1, #1
   d8a70:	f7ff fee4 	bl	d883c <_Balloc>
   d8a74:	2201      	movs	r2, #1
   d8a76:	6144      	str	r4, [r0, #20]
   d8a78:	6102      	str	r2, [r0, #16]
   d8a7a:	bd10      	pop	{r4, pc}

000d8a7c <__multiply>:
   d8a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a80:	4615      	mov	r5, r2
   d8a82:	690a      	ldr	r2, [r1, #16]
   d8a84:	692b      	ldr	r3, [r5, #16]
   d8a86:	429a      	cmp	r2, r3
   d8a88:	bfb8      	it	lt
   d8a8a:	460b      	movlt	r3, r1
   d8a8c:	460c      	mov	r4, r1
   d8a8e:	bfbc      	itt	lt
   d8a90:	462c      	movlt	r4, r5
   d8a92:	461d      	movlt	r5, r3
   d8a94:	6927      	ldr	r7, [r4, #16]
   d8a96:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d8a9a:	68a3      	ldr	r3, [r4, #8]
   d8a9c:	6861      	ldr	r1, [r4, #4]
   d8a9e:	eb07 0609 	add.w	r6, r7, r9
   d8aa2:	42b3      	cmp	r3, r6
   d8aa4:	bfb8      	it	lt
   d8aa6:	3101      	addlt	r1, #1
   d8aa8:	b085      	sub	sp, #20
   d8aaa:	f7ff fec7 	bl	d883c <_Balloc>
   d8aae:	f100 0114 	add.w	r1, r0, #20
   d8ab2:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d8ab6:	460b      	mov	r3, r1
   d8ab8:	2200      	movs	r2, #0
   d8aba:	4543      	cmp	r3, r8
   d8abc:	d31d      	bcc.n	d8afa <__multiply+0x7e>
   d8abe:	f104 0314 	add.w	r3, r4, #20
   d8ac2:	f105 0214 	add.w	r2, r5, #20
   d8ac6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d8aca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8ace:	9302      	str	r3, [sp, #8]
   d8ad0:	1b3b      	subs	r3, r7, r4
   d8ad2:	3b15      	subs	r3, #21
   d8ad4:	f023 0303 	bic.w	r3, r3, #3
   d8ad8:	3304      	adds	r3, #4
   d8ada:	f104 0515 	add.w	r5, r4, #21
   d8ade:	42af      	cmp	r7, r5
   d8ae0:	bf38      	it	cc
   d8ae2:	2304      	movcc	r3, #4
   d8ae4:	9301      	str	r3, [sp, #4]
   d8ae6:	9b02      	ldr	r3, [sp, #8]
   d8ae8:	9203      	str	r2, [sp, #12]
   d8aea:	4293      	cmp	r3, r2
   d8aec:	d808      	bhi.n	d8b00 <__multiply+0x84>
   d8aee:	2e00      	cmp	r6, #0
   d8af0:	dc5a      	bgt.n	d8ba8 <__multiply+0x12c>
   d8af2:	6106      	str	r6, [r0, #16]
   d8af4:	b005      	add	sp, #20
   d8af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8afa:	f843 2b04 	str.w	r2, [r3], #4
   d8afe:	e7dc      	b.n	d8aba <__multiply+0x3e>
   d8b00:	f8b2 a000 	ldrh.w	sl, [r2]
   d8b04:	f1ba 0f00 	cmp.w	sl, #0
   d8b08:	d024      	beq.n	d8b54 <__multiply+0xd8>
   d8b0a:	f104 0e14 	add.w	lr, r4, #20
   d8b0e:	4689      	mov	r9, r1
   d8b10:	f04f 0c00 	mov.w	ip, #0
   d8b14:	f85e 5b04 	ldr.w	r5, [lr], #4
   d8b18:	f8d9 b000 	ldr.w	fp, [r9]
   d8b1c:	b2ab      	uxth	r3, r5
   d8b1e:	fa1f fb8b 	uxth.w	fp, fp
   d8b22:	fb0a b303 	mla	r3, sl, r3, fp
   d8b26:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d8b2a:	f8d9 5000 	ldr.w	r5, [r9]
   d8b2e:	4463      	add	r3, ip
   d8b30:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8b34:	fb0a c50b 	mla	r5, sl, fp, ip
   d8b38:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d8b3c:	b29b      	uxth	r3, r3
   d8b3e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d8b42:	4577      	cmp	r7, lr
   d8b44:	f849 3b04 	str.w	r3, [r9], #4
   d8b48:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8b4c:	d8e2      	bhi.n	d8b14 <__multiply+0x98>
   d8b4e:	9b01      	ldr	r3, [sp, #4]
   d8b50:	f841 c003 	str.w	ip, [r1, r3]
   d8b54:	9b03      	ldr	r3, [sp, #12]
   d8b56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d8b5a:	3204      	adds	r2, #4
   d8b5c:	f1b9 0f00 	cmp.w	r9, #0
   d8b60:	d020      	beq.n	d8ba4 <__multiply+0x128>
   d8b62:	680b      	ldr	r3, [r1, #0]
   d8b64:	f104 0c14 	add.w	ip, r4, #20
   d8b68:	468e      	mov	lr, r1
   d8b6a:	f04f 0a00 	mov.w	sl, #0
   d8b6e:	f8bc 5000 	ldrh.w	r5, [ip]
   d8b72:	f8be b002 	ldrh.w	fp, [lr, #2]
   d8b76:	fb09 b505 	mla	r5, r9, r5, fp
   d8b7a:	44aa      	add	sl, r5
   d8b7c:	b29b      	uxth	r3, r3
   d8b7e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d8b82:	f84e 3b04 	str.w	r3, [lr], #4
   d8b86:	f85c 3b04 	ldr.w	r3, [ip], #4
   d8b8a:	f8be 5000 	ldrh.w	r5, [lr]
   d8b8e:	0c1b      	lsrs	r3, r3, #16
   d8b90:	fb09 5303 	mla	r3, r9, r3, r5
   d8b94:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d8b98:	4567      	cmp	r7, ip
   d8b9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d8b9e:	d8e6      	bhi.n	d8b6e <__multiply+0xf2>
   d8ba0:	9d01      	ldr	r5, [sp, #4]
   d8ba2:	514b      	str	r3, [r1, r5]
   d8ba4:	3104      	adds	r1, #4
   d8ba6:	e79e      	b.n	d8ae6 <__multiply+0x6a>
   d8ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d8bac:	2b00      	cmp	r3, #0
   d8bae:	d1a0      	bne.n	d8af2 <__multiply+0x76>
   d8bb0:	3e01      	subs	r6, #1
   d8bb2:	e79c      	b.n	d8aee <__multiply+0x72>

000d8bb4 <__pow5mult>:
   d8bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8bb8:	4615      	mov	r5, r2
   d8bba:	f012 0203 	ands.w	r2, r2, #3
   d8bbe:	4606      	mov	r6, r0
   d8bc0:	460f      	mov	r7, r1
   d8bc2:	d007      	beq.n	d8bd4 <__pow5mult+0x20>
   d8bc4:	4c21      	ldr	r4, [pc, #132]	; (d8c4c <__pow5mult+0x98>)
   d8bc6:	3a01      	subs	r2, #1
   d8bc8:	2300      	movs	r3, #0
   d8bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8bce:	f7ff fe80 	bl	d88d2 <__multadd>
   d8bd2:	4607      	mov	r7, r0
   d8bd4:	10ad      	asrs	r5, r5, #2
   d8bd6:	d035      	beq.n	d8c44 <__pow5mult+0x90>
   d8bd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8bda:	b93c      	cbnz	r4, d8bec <__pow5mult+0x38>
   d8bdc:	2010      	movs	r0, #16
   d8bde:	f7fc fc83 	bl	d54e8 <malloc>
   d8be2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d8be6:	6270      	str	r0, [r6, #36]	; 0x24
   d8be8:	6004      	str	r4, [r0, #0]
   d8bea:	60c4      	str	r4, [r0, #12]
   d8bec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8bf4:	b94c      	cbnz	r4, d8c0a <__pow5mult+0x56>
   d8bf6:	f240 2171 	movw	r1, #625	; 0x271
   d8bfa:	4630      	mov	r0, r6
   d8bfc:	f7ff ff35 	bl	d8a6a <__i2b>
   d8c00:	2300      	movs	r3, #0
   d8c02:	f8c8 0008 	str.w	r0, [r8, #8]
   d8c06:	4604      	mov	r4, r0
   d8c08:	6003      	str	r3, [r0, #0]
   d8c0a:	f04f 0900 	mov.w	r9, #0
   d8c0e:	07eb      	lsls	r3, r5, #31
   d8c10:	d50a      	bpl.n	d8c28 <__pow5mult+0x74>
   d8c12:	4639      	mov	r1, r7
   d8c14:	4622      	mov	r2, r4
   d8c16:	4630      	mov	r0, r6
   d8c18:	f7ff ff30 	bl	d8a7c <__multiply>
   d8c1c:	4639      	mov	r1, r7
   d8c1e:	4680      	mov	r8, r0
   d8c20:	4630      	mov	r0, r6
   d8c22:	f7ff fe3f 	bl	d88a4 <_Bfree>
   d8c26:	4647      	mov	r7, r8
   d8c28:	106d      	asrs	r5, r5, #1
   d8c2a:	d00b      	beq.n	d8c44 <__pow5mult+0x90>
   d8c2c:	6820      	ldr	r0, [r4, #0]
   d8c2e:	b938      	cbnz	r0, d8c40 <__pow5mult+0x8c>
   d8c30:	4622      	mov	r2, r4
   d8c32:	4621      	mov	r1, r4
   d8c34:	4630      	mov	r0, r6
   d8c36:	f7ff ff21 	bl	d8a7c <__multiply>
   d8c3a:	6020      	str	r0, [r4, #0]
   d8c3c:	f8c0 9000 	str.w	r9, [r0]
   d8c40:	4604      	mov	r4, r0
   d8c42:	e7e4      	b.n	d8c0e <__pow5mult+0x5a>
   d8c44:	4638      	mov	r0, r7
   d8c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8c4a:	bf00      	nop
   d8c4c:	000d9900 	.word	0x000d9900

000d8c50 <__lshift>:
   d8c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8c54:	460c      	mov	r4, r1
   d8c56:	6849      	ldr	r1, [r1, #4]
   d8c58:	6923      	ldr	r3, [r4, #16]
   d8c5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d8c5e:	68a3      	ldr	r3, [r4, #8]
   d8c60:	4607      	mov	r7, r0
   d8c62:	4691      	mov	r9, r2
   d8c64:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8c68:	f108 0601 	add.w	r6, r8, #1
   d8c6c:	42b3      	cmp	r3, r6
   d8c6e:	db3f      	blt.n	d8cf0 <__lshift+0xa0>
   d8c70:	4638      	mov	r0, r7
   d8c72:	f7ff fde3 	bl	d883c <_Balloc>
   d8c76:	2300      	movs	r3, #0
   d8c78:	4605      	mov	r5, r0
   d8c7a:	f100 0114 	add.w	r1, r0, #20
   d8c7e:	f100 0210 	add.w	r2, r0, #16
   d8c82:	4618      	mov	r0, r3
   d8c84:	4553      	cmp	r3, sl
   d8c86:	db36      	blt.n	d8cf6 <__lshift+0xa6>
   d8c88:	6920      	ldr	r0, [r4, #16]
   d8c8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d8c8e:	f104 0314 	add.w	r3, r4, #20
   d8c92:	f019 091f 	ands.w	r9, r9, #31
   d8c96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d8c9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d8c9e:	d02e      	beq.n	d8cfe <__lshift+0xae>
   d8ca0:	f1c9 0e20 	rsb	lr, r9, #32
   d8ca4:	468a      	mov	sl, r1
   d8ca6:	2200      	movs	r2, #0
   d8ca8:	6818      	ldr	r0, [r3, #0]
   d8caa:	fa00 f009 	lsl.w	r0, r0, r9
   d8cae:	4302      	orrs	r2, r0
   d8cb0:	f84a 2b04 	str.w	r2, [sl], #4
   d8cb4:	f853 2b04 	ldr.w	r2, [r3], #4
   d8cb8:	459c      	cmp	ip, r3
   d8cba:	fa22 f20e 	lsr.w	r2, r2, lr
   d8cbe:	d8f3      	bhi.n	d8ca8 <__lshift+0x58>
   d8cc0:	ebac 0304 	sub.w	r3, ip, r4
   d8cc4:	3b15      	subs	r3, #21
   d8cc6:	f023 0303 	bic.w	r3, r3, #3
   d8cca:	3304      	adds	r3, #4
   d8ccc:	f104 0015 	add.w	r0, r4, #21
   d8cd0:	4560      	cmp	r0, ip
   d8cd2:	bf88      	it	hi
   d8cd4:	2304      	movhi	r3, #4
   d8cd6:	50ca      	str	r2, [r1, r3]
   d8cd8:	b10a      	cbz	r2, d8cde <__lshift+0x8e>
   d8cda:	f108 0602 	add.w	r6, r8, #2
   d8cde:	3e01      	subs	r6, #1
   d8ce0:	4638      	mov	r0, r7
   d8ce2:	612e      	str	r6, [r5, #16]
   d8ce4:	4621      	mov	r1, r4
   d8ce6:	f7ff fddd 	bl	d88a4 <_Bfree>
   d8cea:	4628      	mov	r0, r5
   d8cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8cf0:	3101      	adds	r1, #1
   d8cf2:	005b      	lsls	r3, r3, #1
   d8cf4:	e7ba      	b.n	d8c6c <__lshift+0x1c>
   d8cf6:	f842 0f04 	str.w	r0, [r2, #4]!
   d8cfa:	3301      	adds	r3, #1
   d8cfc:	e7c2      	b.n	d8c84 <__lshift+0x34>
   d8cfe:	3904      	subs	r1, #4
   d8d00:	f853 2b04 	ldr.w	r2, [r3], #4
   d8d04:	f841 2f04 	str.w	r2, [r1, #4]!
   d8d08:	459c      	cmp	ip, r3
   d8d0a:	d8f9      	bhi.n	d8d00 <__lshift+0xb0>
   d8d0c:	e7e7      	b.n	d8cde <__lshift+0x8e>

000d8d0e <__mcmp>:
   d8d0e:	b530      	push	{r4, r5, lr}
   d8d10:	6902      	ldr	r2, [r0, #16]
   d8d12:	690c      	ldr	r4, [r1, #16]
   d8d14:	1b12      	subs	r2, r2, r4
   d8d16:	d10e      	bne.n	d8d36 <__mcmp+0x28>
   d8d18:	f100 0314 	add.w	r3, r0, #20
   d8d1c:	3114      	adds	r1, #20
   d8d1e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d8d22:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d8d26:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d8d2a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d8d2e:	42a5      	cmp	r5, r4
   d8d30:	d003      	beq.n	d8d3a <__mcmp+0x2c>
   d8d32:	d305      	bcc.n	d8d40 <__mcmp+0x32>
   d8d34:	2201      	movs	r2, #1
   d8d36:	4610      	mov	r0, r2
   d8d38:	bd30      	pop	{r4, r5, pc}
   d8d3a:	4283      	cmp	r3, r0
   d8d3c:	d3f3      	bcc.n	d8d26 <__mcmp+0x18>
   d8d3e:	e7fa      	b.n	d8d36 <__mcmp+0x28>
   d8d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8d44:	e7f7      	b.n	d8d36 <__mcmp+0x28>

000d8d46 <__mdiff>:
   d8d46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d4a:	460c      	mov	r4, r1
   d8d4c:	4606      	mov	r6, r0
   d8d4e:	4611      	mov	r1, r2
   d8d50:	4620      	mov	r0, r4
   d8d52:	4617      	mov	r7, r2
   d8d54:	f7ff ffdb 	bl	d8d0e <__mcmp>
   d8d58:	1e05      	subs	r5, r0, #0
   d8d5a:	d108      	bne.n	d8d6e <__mdiff+0x28>
   d8d5c:	4629      	mov	r1, r5
   d8d5e:	4630      	mov	r0, r6
   d8d60:	f7ff fd6c 	bl	d883c <_Balloc>
   d8d64:	2301      	movs	r3, #1
   d8d66:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d8d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8d6e:	bfa4      	itt	ge
   d8d70:	463b      	movge	r3, r7
   d8d72:	4627      	movge	r7, r4
   d8d74:	4630      	mov	r0, r6
   d8d76:	6879      	ldr	r1, [r7, #4]
   d8d78:	bfa6      	itte	ge
   d8d7a:	461c      	movge	r4, r3
   d8d7c:	2500      	movge	r5, #0
   d8d7e:	2501      	movlt	r5, #1
   d8d80:	f7ff fd5c 	bl	d883c <_Balloc>
   d8d84:	693e      	ldr	r6, [r7, #16]
   d8d86:	60c5      	str	r5, [r0, #12]
   d8d88:	6925      	ldr	r5, [r4, #16]
   d8d8a:	f107 0114 	add.w	r1, r7, #20
   d8d8e:	f104 0914 	add.w	r9, r4, #20
   d8d92:	f100 0e14 	add.w	lr, r0, #20
   d8d96:	f107 0210 	add.w	r2, r7, #16
   d8d9a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d8d9e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d8da2:	46f2      	mov	sl, lr
   d8da4:	2700      	movs	r7, #0
   d8da6:	f859 3b04 	ldr.w	r3, [r9], #4
   d8daa:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d8dae:	fa1f f883 	uxth.w	r8, r3
   d8db2:	fa17 f78b 	uxtah	r7, r7, fp
   d8db6:	0c1b      	lsrs	r3, r3, #16
   d8db8:	eba7 0808 	sub.w	r8, r7, r8
   d8dbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d8dc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d8dc4:	fa1f f888 	uxth.w	r8, r8
   d8dc8:	141f      	asrs	r7, r3, #16
   d8dca:	454d      	cmp	r5, r9
   d8dcc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d8dd0:	f84a 3b04 	str.w	r3, [sl], #4
   d8dd4:	d8e7      	bhi.n	d8da6 <__mdiff+0x60>
   d8dd6:	1b2b      	subs	r3, r5, r4
   d8dd8:	3b15      	subs	r3, #21
   d8dda:	f023 0303 	bic.w	r3, r3, #3
   d8dde:	3304      	adds	r3, #4
   d8de0:	3415      	adds	r4, #21
   d8de2:	42a5      	cmp	r5, r4
   d8de4:	bf38      	it	cc
   d8de6:	2304      	movcc	r3, #4
   d8de8:	4419      	add	r1, r3
   d8dea:	4473      	add	r3, lr
   d8dec:	469e      	mov	lr, r3
   d8dee:	460d      	mov	r5, r1
   d8df0:	4565      	cmp	r5, ip
   d8df2:	d30e      	bcc.n	d8e12 <__mdiff+0xcc>
   d8df4:	f10c 0203 	add.w	r2, ip, #3
   d8df8:	1a52      	subs	r2, r2, r1
   d8dfa:	f022 0203 	bic.w	r2, r2, #3
   d8dfe:	3903      	subs	r1, #3
   d8e00:	458c      	cmp	ip, r1
   d8e02:	bf38      	it	cc
   d8e04:	2200      	movcc	r2, #0
   d8e06:	441a      	add	r2, r3
   d8e08:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d8e0c:	b17b      	cbz	r3, d8e2e <__mdiff+0xe8>
   d8e0e:	6106      	str	r6, [r0, #16]
   d8e10:	e7ab      	b.n	d8d6a <__mdiff+0x24>
   d8e12:	f855 8b04 	ldr.w	r8, [r5], #4
   d8e16:	fa17 f488 	uxtah	r4, r7, r8
   d8e1a:	1422      	asrs	r2, r4, #16
   d8e1c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d8e20:	b2a4      	uxth	r4, r4
   d8e22:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d8e26:	f84e 4b04 	str.w	r4, [lr], #4
   d8e2a:	1417      	asrs	r7, r2, #16
   d8e2c:	e7e0      	b.n	d8df0 <__mdiff+0xaa>
   d8e2e:	3e01      	subs	r6, #1
   d8e30:	e7ea      	b.n	d8e08 <__mdiff+0xc2>
	...

000d8e34 <__ulp>:
   d8e34:	b082      	sub	sp, #8
   d8e36:	ed8d 0b00 	vstr	d0, [sp]
   d8e3a:	9b01      	ldr	r3, [sp, #4]
   d8e3c:	4912      	ldr	r1, [pc, #72]	; (d8e88 <__ulp+0x54>)
   d8e3e:	4019      	ands	r1, r3
   d8e40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d8e44:	2900      	cmp	r1, #0
   d8e46:	dd05      	ble.n	d8e54 <__ulp+0x20>
   d8e48:	2200      	movs	r2, #0
   d8e4a:	460b      	mov	r3, r1
   d8e4c:	ec43 2b10 	vmov	d0, r2, r3
   d8e50:	b002      	add	sp, #8
   d8e52:	4770      	bx	lr
   d8e54:	4249      	negs	r1, r1
   d8e56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d8e5a:	ea4f 5021 	mov.w	r0, r1, asr #20
   d8e5e:	f04f 0200 	mov.w	r2, #0
   d8e62:	f04f 0300 	mov.w	r3, #0
   d8e66:	da04      	bge.n	d8e72 <__ulp+0x3e>
   d8e68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d8e6c:	fa41 f300 	asr.w	r3, r1, r0
   d8e70:	e7ec      	b.n	d8e4c <__ulp+0x18>
   d8e72:	f1a0 0114 	sub.w	r1, r0, #20
   d8e76:	291e      	cmp	r1, #30
   d8e78:	bfda      	itte	le
   d8e7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d8e7e:	fa20 f101 	lsrle.w	r1, r0, r1
   d8e82:	2101      	movgt	r1, #1
   d8e84:	460a      	mov	r2, r1
   d8e86:	e7e1      	b.n	d8e4c <__ulp+0x18>
   d8e88:	7ff00000 	.word	0x7ff00000

000d8e8c <__b2d>:
   d8e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e8e:	6905      	ldr	r5, [r0, #16]
   d8e90:	f100 0714 	add.w	r7, r0, #20
   d8e94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d8e98:	1f2e      	subs	r6, r5, #4
   d8e9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d8e9e:	4620      	mov	r0, r4
   d8ea0:	f7ff fd93 	bl	d89ca <__hi0bits>
   d8ea4:	f1c0 0320 	rsb	r3, r0, #32
   d8ea8:	280a      	cmp	r0, #10
   d8eaa:	f8df c07c 	ldr.w	ip, [pc, #124]	; d8f28 <__b2d+0x9c>
   d8eae:	600b      	str	r3, [r1, #0]
   d8eb0:	dc14      	bgt.n	d8edc <__b2d+0x50>
   d8eb2:	f1c0 0e0b 	rsb	lr, r0, #11
   d8eb6:	fa24 f10e 	lsr.w	r1, r4, lr
   d8eba:	42b7      	cmp	r7, r6
   d8ebc:	ea41 030c 	orr.w	r3, r1, ip
   d8ec0:	bf34      	ite	cc
   d8ec2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8ec6:	2100      	movcs	r1, #0
   d8ec8:	3015      	adds	r0, #21
   d8eca:	fa04 f000 	lsl.w	r0, r4, r0
   d8ece:	fa21 f10e 	lsr.w	r1, r1, lr
   d8ed2:	ea40 0201 	orr.w	r2, r0, r1
   d8ed6:	ec43 2b10 	vmov	d0, r2, r3
   d8eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8edc:	42b7      	cmp	r7, r6
   d8ede:	bf3a      	itte	cc
   d8ee0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8ee4:	f1a5 0608 	subcc.w	r6, r5, #8
   d8ee8:	2100      	movcs	r1, #0
   d8eea:	380b      	subs	r0, #11
   d8eec:	d017      	beq.n	d8f1e <__b2d+0x92>
   d8eee:	f1c0 0c20 	rsb	ip, r0, #32
   d8ef2:	fa04 f500 	lsl.w	r5, r4, r0
   d8ef6:	42be      	cmp	r6, r7
   d8ef8:	fa21 f40c 	lsr.w	r4, r1, ip
   d8efc:	ea45 0504 	orr.w	r5, r5, r4
   d8f00:	bf8c      	ite	hi
   d8f02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d8f06:	2400      	movls	r4, #0
   d8f08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d8f0c:	fa01 f000 	lsl.w	r0, r1, r0
   d8f10:	fa24 f40c 	lsr.w	r4, r4, ip
   d8f14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d8f18:	ea40 0204 	orr.w	r2, r0, r4
   d8f1c:	e7db      	b.n	d8ed6 <__b2d+0x4a>
   d8f1e:	ea44 030c 	orr.w	r3, r4, ip
   d8f22:	460a      	mov	r2, r1
   d8f24:	e7d7      	b.n	d8ed6 <__b2d+0x4a>
   d8f26:	bf00      	nop
   d8f28:	3ff00000 	.word	0x3ff00000

000d8f2c <__d2b>:
   d8f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8f30:	4689      	mov	r9, r1
   d8f32:	2101      	movs	r1, #1
   d8f34:	ec57 6b10 	vmov	r6, r7, d0
   d8f38:	4690      	mov	r8, r2
   d8f3a:	f7ff fc7f 	bl	d883c <_Balloc>
   d8f3e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d8f42:	4604      	mov	r4, r0
   d8f44:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d8f48:	bb35      	cbnz	r5, d8f98 <__d2b+0x6c>
   d8f4a:	2e00      	cmp	r6, #0
   d8f4c:	9301      	str	r3, [sp, #4]
   d8f4e:	d028      	beq.n	d8fa2 <__d2b+0x76>
   d8f50:	4668      	mov	r0, sp
   d8f52:	9600      	str	r6, [sp, #0]
   d8f54:	f7ff fd59 	bl	d8a0a <__lo0bits>
   d8f58:	9900      	ldr	r1, [sp, #0]
   d8f5a:	b300      	cbz	r0, d8f9e <__d2b+0x72>
   d8f5c:	9a01      	ldr	r2, [sp, #4]
   d8f5e:	f1c0 0320 	rsb	r3, r0, #32
   d8f62:	fa02 f303 	lsl.w	r3, r2, r3
   d8f66:	430b      	orrs	r3, r1
   d8f68:	40c2      	lsrs	r2, r0
   d8f6a:	6163      	str	r3, [r4, #20]
   d8f6c:	9201      	str	r2, [sp, #4]
   d8f6e:	9b01      	ldr	r3, [sp, #4]
   d8f70:	61a3      	str	r3, [r4, #24]
   d8f72:	2b00      	cmp	r3, #0
   d8f74:	bf14      	ite	ne
   d8f76:	2202      	movne	r2, #2
   d8f78:	2201      	moveq	r2, #1
   d8f7a:	6122      	str	r2, [r4, #16]
   d8f7c:	b1d5      	cbz	r5, d8fb4 <__d2b+0x88>
   d8f7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d8f82:	4405      	add	r5, r0
   d8f84:	f8c9 5000 	str.w	r5, [r9]
   d8f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d8f8c:	f8c8 0000 	str.w	r0, [r8]
   d8f90:	4620      	mov	r0, r4
   d8f92:	b003      	add	sp, #12
   d8f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8f9c:	e7d5      	b.n	d8f4a <__d2b+0x1e>
   d8f9e:	6161      	str	r1, [r4, #20]
   d8fa0:	e7e5      	b.n	d8f6e <__d2b+0x42>
   d8fa2:	a801      	add	r0, sp, #4
   d8fa4:	f7ff fd31 	bl	d8a0a <__lo0bits>
   d8fa8:	9b01      	ldr	r3, [sp, #4]
   d8faa:	6163      	str	r3, [r4, #20]
   d8fac:	2201      	movs	r2, #1
   d8fae:	6122      	str	r2, [r4, #16]
   d8fb0:	3020      	adds	r0, #32
   d8fb2:	e7e3      	b.n	d8f7c <__d2b+0x50>
   d8fb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d8fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d8fbc:	f8c9 0000 	str.w	r0, [r9]
   d8fc0:	6918      	ldr	r0, [r3, #16]
   d8fc2:	f7ff fd02 	bl	d89ca <__hi0bits>
   d8fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d8fca:	e7df      	b.n	d8f8c <__d2b+0x60>

000d8fcc <__ratio>:
   d8fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fd0:	4688      	mov	r8, r1
   d8fd2:	4669      	mov	r1, sp
   d8fd4:	4681      	mov	r9, r0
   d8fd6:	f7ff ff59 	bl	d8e8c <__b2d>
   d8fda:	a901      	add	r1, sp, #4
   d8fdc:	4640      	mov	r0, r8
   d8fde:	ec55 4b10 	vmov	r4, r5, d0
   d8fe2:	f7ff ff53 	bl	d8e8c <__b2d>
   d8fe6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d8fea:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d8fee:	eba3 0c02 	sub.w	ip, r3, r2
   d8ff2:	e9dd 3200 	ldrd	r3, r2, [sp]
   d8ff6:	1a9b      	subs	r3, r3, r2
   d8ff8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d8ffc:	ec51 0b10 	vmov	r0, r1, d0
   d9000:	2b00      	cmp	r3, #0
   d9002:	bfd6      	itet	le
   d9004:	460a      	movle	r2, r1
   d9006:	462a      	movgt	r2, r5
   d9008:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d900c:	468b      	mov	fp, r1
   d900e:	462f      	mov	r7, r5
   d9010:	bfd4      	ite	le
   d9012:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d9016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d901a:	4620      	mov	r0, r4
   d901c:	ee10 2a10 	vmov	r2, s0
   d9020:	465b      	mov	r3, fp
   d9022:	4639      	mov	r1, r7
   d9024:	f7fd ff38 	bl	d6e98 <__aeabi_ddiv>
   d9028:	ec41 0b10 	vmov	d0, r0, r1
   d902c:	b003      	add	sp, #12
   d902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9032 <__copybits>:
   d9032:	3901      	subs	r1, #1
   d9034:	b570      	push	{r4, r5, r6, lr}
   d9036:	1149      	asrs	r1, r1, #5
   d9038:	6914      	ldr	r4, [r2, #16]
   d903a:	3101      	adds	r1, #1
   d903c:	f102 0314 	add.w	r3, r2, #20
   d9040:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9044:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9048:	1f05      	subs	r5, r0, #4
   d904a:	42a3      	cmp	r3, r4
   d904c:	d30c      	bcc.n	d9068 <__copybits+0x36>
   d904e:	1aa3      	subs	r3, r4, r2
   d9050:	3b11      	subs	r3, #17
   d9052:	f023 0303 	bic.w	r3, r3, #3
   d9056:	3211      	adds	r2, #17
   d9058:	42a2      	cmp	r2, r4
   d905a:	bf88      	it	hi
   d905c:	2300      	movhi	r3, #0
   d905e:	4418      	add	r0, r3
   d9060:	2300      	movs	r3, #0
   d9062:	4288      	cmp	r0, r1
   d9064:	d305      	bcc.n	d9072 <__copybits+0x40>
   d9066:	bd70      	pop	{r4, r5, r6, pc}
   d9068:	f853 6b04 	ldr.w	r6, [r3], #4
   d906c:	f845 6f04 	str.w	r6, [r5, #4]!
   d9070:	e7eb      	b.n	d904a <__copybits+0x18>
   d9072:	f840 3b04 	str.w	r3, [r0], #4
   d9076:	e7f4      	b.n	d9062 <__copybits+0x30>

000d9078 <__any_on>:
   d9078:	f100 0214 	add.w	r2, r0, #20
   d907c:	6900      	ldr	r0, [r0, #16]
   d907e:	114b      	asrs	r3, r1, #5
   d9080:	4298      	cmp	r0, r3
   d9082:	b510      	push	{r4, lr}
   d9084:	db11      	blt.n	d90aa <__any_on+0x32>
   d9086:	dd0a      	ble.n	d909e <__any_on+0x26>
   d9088:	f011 011f 	ands.w	r1, r1, #31
   d908c:	d007      	beq.n	d909e <__any_on+0x26>
   d908e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9092:	fa24 f001 	lsr.w	r0, r4, r1
   d9096:	fa00 f101 	lsl.w	r1, r0, r1
   d909a:	428c      	cmp	r4, r1
   d909c:	d10b      	bne.n	d90b6 <__any_on+0x3e>
   d909e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d90a2:	4293      	cmp	r3, r2
   d90a4:	d803      	bhi.n	d90ae <__any_on+0x36>
   d90a6:	2000      	movs	r0, #0
   d90a8:	bd10      	pop	{r4, pc}
   d90aa:	4603      	mov	r3, r0
   d90ac:	e7f7      	b.n	d909e <__any_on+0x26>
   d90ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d90b2:	2900      	cmp	r1, #0
   d90b4:	d0f5      	beq.n	d90a2 <__any_on+0x2a>
   d90b6:	2001      	movs	r0, #1
   d90b8:	e7f6      	b.n	d90a8 <__any_on+0x30>

000d90ba <_calloc_r>:
   d90ba:	b513      	push	{r0, r1, r4, lr}
   d90bc:	434a      	muls	r2, r1
   d90be:	4611      	mov	r1, r2
   d90c0:	9201      	str	r2, [sp, #4]
   d90c2:	f7fc fa39 	bl	d5538 <_malloc_r>
   d90c6:	4604      	mov	r4, r0
   d90c8:	b118      	cbz	r0, d90d2 <_calloc_r+0x18>
   d90ca:	9a01      	ldr	r2, [sp, #4]
   d90cc:	2100      	movs	r1, #0
   d90ce:	f7fe f905 	bl	d72dc <memset>
   d90d2:	4620      	mov	r0, r4
   d90d4:	b002      	add	sp, #8
   d90d6:	bd10      	pop	{r4, pc}

000d90d8 <nan>:
   d90d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d90e0 <nan+0x8>
   d90dc:	4770      	bx	lr
   d90de:	bf00      	nop
   d90e0:	00000000 	.word	0x00000000
   d90e4:	7ff80000 	.word	0x7ff80000

000d90e8 <__ascii_wctomb>:
   d90e8:	b149      	cbz	r1, d90fe <__ascii_wctomb+0x16>
   d90ea:	2aff      	cmp	r2, #255	; 0xff
   d90ec:	bf85      	ittet	hi
   d90ee:	238a      	movhi	r3, #138	; 0x8a
   d90f0:	6003      	strhi	r3, [r0, #0]
   d90f2:	700a      	strbls	r2, [r1, #0]
   d90f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d90f8:	bf98      	it	ls
   d90fa:	2001      	movls	r0, #1
   d90fc:	4770      	bx	lr
   d90fe:	4608      	mov	r0, r1
   d9100:	4770      	bx	lr
	...

000d9104 <__aeabi_d2lz>:
   d9104:	b538      	push	{r3, r4, r5, lr}
   d9106:	2200      	movs	r2, #0
   d9108:	2300      	movs	r3, #0
   d910a:	4604      	mov	r4, r0
   d910c:	460d      	mov	r5, r1
   d910e:	f7fe f80b 	bl	d7128 <__aeabi_dcmplt>
   d9112:	b928      	cbnz	r0, d9120 <__aeabi_d2lz+0x1c>
   d9114:	4620      	mov	r0, r4
   d9116:	4629      	mov	r1, r5
   d9118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d911c:	f7fe b89c 	b.w	d7258 <__aeabi_d2ulz>
   d9120:	4620      	mov	r0, r4
   d9122:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d9126:	f7fe f897 	bl	d7258 <__aeabi_d2ulz>
   d912a:	4240      	negs	r0, r0
   d912c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9130:	bd38      	pop	{r3, r4, r5, pc}
   d9132:	bf00      	nop

000d9134 <dynalib_user>:
   d9134:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9144:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   d9154:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   d9164:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   d9174:	746c 4400 6369 6e6f 656e 7463 6465 3200     lt.Diconnected.2
   d9184:	302e 0030 6554 706d 4d5f 7861 3a20 2520     .00.Temp_Max : %
   d9194:	2e33 6631 5400 6d65 5f70 694d 2078 203a     3.1f.Temp_Mix : 
   d91a4:	3325 312e 0066 7548 696d 6964 7974 4d5f     %3.1f.Humidity_M
   d91b4:	7861 203a 3325 312e 0066 7548 696d 6964     ax: %3.1f.Humidi
   d91c4:	7974 4d5f 6e69 3a20 2520 2e33 6631 7b00     ty_Min : %3.1f.{
   d91d4:	5422 6d65 6570 6172 7574 6572 3a22 3425     "Temperature":%4
   d91e4:	312e 2c66 2220 7548 696d 6964 7974 3a22     .1f, "Humidity":
   d91f4:	3425 312e 2c66 4222 7461 6574 7972 3a22     %4.1f,"Battery":
   d9204:	6925 007d 7473 726f 6761 2d65 6166 6963     %i}.storage-faci
   d9214:	696c 7974 682d 6f6f 006b 6f4e 4420 7461     lity-hook.No Dat
   d9224:	0061 6255 6469 746f 2073 6f48 6b6f 5200     a.Ubidots Hook.R
   d9234:	7365 6f70 736e 2065 6552 6563 7669 6465     esponse Received
   d9244:	5300 6174 6574 2500 2e34 6631 432a 2500     .State.%4.1f*C.%
   d9254:	2e34 6631 2525 2500 2069 2525 4600 6961     4.1f%%.%i %%.Fai
   d9264:	656c 2064 6f74 7020 7265 6f66 6d72 7220     led to perform r
   d9274:	6165 6964 676e 3a20 0028 6f4c 0067 6146     eading :(.Log.Fa
   d9284:	6c69 6465 7420 206f 6174 656b 7220 6165     iled to take rea
   d9294:	6964 676e 0021 4853 3354 2031 6574 7473     ding!.SHT31 test
   d92a4:	5200 6c65 6165 6573 7400 6d65 6570 6172     .Release.tempera
   d92b4:	7574 6572 6800 6d75 6469 7469 0079 6574     ture.humidity.te
   d92c4:	706d 7265 7461 7275 2d65 7055 6570 0072     mperature-Upper.
   d92d4:	6574 706d 7265 7461 7275 2d65 6f6c 6577     temperature-lowe
   d92e4:	0072 7568 696d 6964 7974 752d 7070 7265     r.humidity-upper
   d92f4:	6800 6d75 6469 7469 2d79 6f6c 6577 0072     .humidity-lower.
   d9304:	6142 7474 7265 0079 6142 7474 7265 4379     Battery.BatteryC
   d9314:	6e6f 6574 7478 4d00 6165 7573 6572 4e2d     ontext.Measure-N
   d9324:	776f 5600 7265 6f62 6573 4d2d 646f 0065     ow.Verbose-Mode.
   d9334:	6554 706d 552d 7070 7265 4c2d 6d69 7469     Temp-Upper-Limit
   d9344:	5400 6d65 2d70 6f4c 6577 2d72 694c 696d     .Temp-Lower-Limi
   d9354:	0074 7548 696d 6964 7974 4c2d 776f 7265     t.Humidity-Lower
   d9364:	4c2d 6d69 7469 4800 6d75 6469 7974 752d     -Limit.Humidty-u
   d9374:	7070 7265 4c2d 6d69 7469 4500 7272 726f     pper-Limit.Error
   d9384:	2d20 5320 5448 3133 4920 696e 6974 6c61      - SHT31 Initial
   d9394:	7a69 7461 6f69 006e 6f43 6c75 6e64 7427     ization.Couldn't
   d93a4:	6620 6e69 2064 4853 3354 0031 6146 6c69      find SHT31.Fail
   d93b4:	6465 7420 206f 6f63 6e6e 6365 0074 7453     ed to connect.St
   d93c4:	7261 7574 0070 227b 6c61 7265 2d74 6574     artup.{"alert-te
   d93d4:	706d 7265 7461 7275 2265 253a 2e34 6631     mperature":%4.1f
   d93e4:	007d 6363 612d 656c 7472 772d 6265 6f68     }.cc-alert-webho
   d93f4:	6b6f 7b00 6122 656c 7472 682d 6d75 6469     ok.{"alert-humid
   d9404:	7469 2279 253a 2e34 6631 007d 6553 2074     ity":%4.1f}.Set 
   d9414:	6556 6272 736f 2065 6f4d 6564 4300 656c     Verbose Mode.Cle
   d9424:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
   d9434:	0065 7246 6d6f 2520 2073 6f74 2520 0073     e.From %s to %s.
   d9444:	7453 7461 2065 7254 6e61 6973 6974 6e6f     State Transition
   d9454:	4500 7272 726f 7420 6b61 6e69 2067 654d     .Error taking Me
   d9464:	7361 7275 6d65 6e65 7374 7300 6170 6b72     asurements.spark
   d9474:	642f 7665 6369 2f65 6573 7373 6f69 2f6e     /device/session/
   d9484:	6e65 0064 7245 6f72 2072 7453 7461 2065     end.Error State 
   d9494:	202d 6552 6573 0074 7055 6570 2072 6854     - Reset.Upper Th
   d94a4:	6572 6873 6c6f 2064 6553 0074 6f4c 6577     reshold Set.Lowe
   d94b4:	2072 6854 6572 6873 6c6f 2064 6553 0074     r Threshold Set.
   d94c4:	9148 000d 9150 000d 9154 000d 915d 000d     H...P...T...]...
   d94d4:	9165 000d 9171 000d 9177 000d 7453 7261     e...q...w...Star
   d94e4:	7574 2070 7553 6363 7365 6673 6c75 0000     tup Successful..
	...

000d9520 <_ZTVN5spark13CellularClassE>:
	...
   d9528:	563b 000d 5631 000d 5627 000d 55dd 000d     ;V..1V..'V...U..
   d9538:	561b 000d 560f 000d 5603 000d 55fb 000d     .V...V...V...U..
   d9548:	55f1 000d 55e7 000d 5f01 000d               .U...U..._..

000d9554 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d955c:	5675 000d 567b 000d 56cb 000d 5689 000d     uV..{V...V...V..
   d956c:	5677 000d                                   wV..

000d9570 <_ZTVN5spark13EthernetClassE>:
	...
   d9578:	5c8f 000d 5c85 000d 5c7b 000d 5c71 000d     .\...\..{\..q\..
   d9588:	5c65 000d 5c59 000d 5c4d 000d 5c45 000d     e\..Y\..M\..E\..
   d9598:	5c3b 000d 5c31 000d 5f01 000d               ;\..1\..._..

000d95a4 <_ZTV7TwoWire>:
	...
   d95ac:	5cad 000d 5cf7 000d 5ccf 000d 5caf 000d     .\...\...\...\..
   d95bc:	5cd7 000d 5cdf 000d 5ce7 000d 5cef 000d     .\...\...\...\..

000d95cc <_ZTV9IPAddress>:
	...
   d95d4:	5db3 000d 5da3 000d 5da5 000d 7061 0070     .]...]...]..app.

000d95e4 <_ZTVN5spark12NetworkClassE>:
	...
   d95ec:	5e99 000d 5ea3 000d 5ead 000d 5eb7 000d     .^...^...^...^..
   d95fc:	5ec1 000d 5ecd 000d 5ed9 000d 5ee5 000d     .^...^...^...^..
   d960c:	5eed 000d 5ef7 000d 5f01 000d 5925 252d     .^...^..._..%Y-%
   d961c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d962c:	7361 7463 6d69 0065                         asctime.

000d9634 <_ZTV11USARTSerial>:
	...
   d963c:	63d9 000d 6445 000d 641d 000d 5fe9 000d     .c..Ed...d..._..
   d964c:	63ed 000d 6409 000d 63fb 000d 6417 000d     .c...d...c...d..
   d965c:	63db 000d 63df 000d                         .c...c..

000d9664 <_ZTV9USBSerial>:
	...
   d966c:	64d9 000d 6541 000d 6517 000d 5fe9 000d     .d..Ae...e..._..
   d967c:	6509 000d 64db 000d 64eb 000d 653b 000d     .e...d...d..;e..
   d968c:	64fb 000d 64d5 000d                         .d...d..

000d9694 <_ZSt7nothrow>:
   d9694:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000d96a4 <fpi.7566>:
   d96a4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d96b4:	0000 0000                                   ....

000d96b8 <fpinan.7602>:
   d96b8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000d96d0 <tinytens>:
   d96d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d96e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d96f0:	6f43 64ac 0628 1168                         Co.d(.h.

000d96f8 <_ctype_>:
   d96f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9708:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9718:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9728:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9738:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9748:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9758:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9768:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9778:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   d97f8:	2e00 0000                                   ....

000d97fc <_C_numeric_locale>:
   d97fc:	97f9 000d 9299 000d e328 2003 4f50 4953     ........(.. POSI
   d980c:	0058 0000                                   X...

000d9810 <__mprec_bigtens>:
   d9810:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9820:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9830:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9838 <__mprec_tens>:
   d9838:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9848:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9858:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9868:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9878:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9888:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9898:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d98a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d98b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d98c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d98d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d98e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d98f8:	9db4 79d9 7843 44ea                         ...yCx.D

000d9900 <p05.7490>:
   d9900:	0005 0000 0019 0000 007d 0000               ........}...

000d990c <link_const_variable_data_end>:
   d990c:	000d4da5 	.word	0x000d4da5
   d9910:	000d55b5 	.word	0x000d55b5
   d9914:	000d5645 	.word	0x000d5645
   d9918:	000d5c99 	.word	0x000d5c99
   d991c:	000d5e89 	.word	0x000d5e89
   d9920:	000d5fd5 	.word	0x000d5fd5
   d9924:	000d60b5 	.word	0x000d60b5
   d9928:	000d6279 	.word	0x000d6279
   d992c:	000d63c5 	.word	0x000d63c5
