
/Users/abdulhannanmustajab/Desktop/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/2.0.1/boron/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005b80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9ba0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002b8  2003e1e0  000d9ba4  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000358  2003e498  2003e498  0002e498  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000d9e5c  000d9e5c  00029e5c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d9e88  000d9e88  00029e88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014cd68  00000000  00000000  00029e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000165a6  00000000  00000000  00176bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b67c  00000000  00000000  0018d19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a68  00000000  00000000  001b8816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007998  00000000  00000000  001bb27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038792  00000000  00000000  001c2c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039470  00000000  00000000  001fb3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c72c  00000000  00000000  00234818  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000079b8  00000000  00000000  00340f44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fa4f 	bl	d74d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fa57 	bl	d74f0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e0 	.word	0x2003e1e0
   d404c:	000d9ba4 	.word	0x000d9ba4
   d4050:	2003e498 	.word	0x2003e498
   d4054:	2003e498 	.word	0x2003e498
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fc03 	bl	d686c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9b7c 	.word	0x000d9b7c
   d4080:	000d9ba0 	.word	0x000d9ba0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb3c 	b.w	d4700 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd53 	bl	d4b34 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bbad 	b.w	d67f0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 ba9f 	b.w	d55d8 <malloc>

000d409a <_Znaj>:
   d409a:	f001 ba9d 	b.w	d55d8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 baa3 	b.w	d55e8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z11watchdogISRv>:
  if (watchdogFlag) petWatchdog();                                                           // Watchdog flag is raised - time to pet the watchdog
}

void watchdogISR()
{
  watchdogFlag = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z11watchdogISRv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
}
   d40ba:	4770      	bx	lr
   d40bc:	2003e5cc 	.word	0x2003e5cc

000d40c0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40c2:	6803      	ldr	r3, [r0, #0]
   d40c4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40c6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40c8:	d904      	bls.n	d40d4 <nrf_gpio_pin_port_decode+0x14>
   d40ca:	4a07      	ldr	r2, [pc, #28]	; (d40e8 <nrf_gpio_pin_port_decode+0x28>)
   d40cc:	2100      	movs	r1, #0
   d40ce:	200a      	movs	r0, #10
   d40d0:	f001 f97a 	bl	d53c8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40d4:	6823      	ldr	r3, [r4, #0]
   d40d6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d8:	bf83      	ittte	hi
   d40da:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40de:	4803      	ldrhi	r0, [pc, #12]	; (d40ec <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40e0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40e2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	000d50f9 	.word	0x000d50f9
   d40ec:	50000300 	.word	0x50000300

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f002 f919 	bl	d632a <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000d9397 	.word	0x000d9397
   d4108:	2003e57c 	.word	0x2003e57c

000d410c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	b108      	cbz	r0, d4118 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4114:	f001 fa68 	bl	d55e8 <free>
class SystemClass {
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d411c:	2300      	movs	r3, #0
   d411e:	2204      	movs	r2, #4
   d4120:	f001 b9ba 	b.w	d5498 <spark_variable>

000d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4124:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4126:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d412a:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d412c:	f88d 5000 	strb.w	r5, [sp]
   d4130:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4132:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4134:	f001 fc86 	bl	d5a44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d4138:	4620      	mov	r0, r4
   d413a:	b003      	add	sp, #12
   d413c:	bd30      	pop	{r4, r5, pc}
	...

000d4140 <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   d4140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4142:	4d32      	ldr	r5, [pc, #200]	; (d420c <digitalWriteFast+0xcc>)
   d4144:	4c32      	ldr	r4, [pc, #200]	; (d4210 <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4146:	782b      	ldrb	r3, [r5, #0]
   d4148:	f3bf 8f5b 	dmb	ish
   d414c:	0106      	lsls	r6, r0, #4
    if (value)
   d414e:	b371      	cbz	r1, d41ae <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4150:	07d8      	lsls	r0, r3, #31
   d4152:	d409      	bmi.n	d4168 <digitalWriteFast+0x28>
   d4154:	4628      	mov	r0, r5
   d4156:	f7ff ffa4 	bl	d40a2 <__cxa_guard_acquire>
   d415a:	b128      	cbz	r0, d4168 <digitalWriteFast+0x28>
   d415c:	f001 f80c 	bl	d5178 <HAL_Pin_Map>
   d4160:	6020      	str	r0, [r4, #0]
   d4162:	4628      	mov	r0, r5
   d4164:	f7ff ffa2 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4168:	6823      	ldr	r3, [r4, #0]
   d416a:	5d9b      	ldrb	r3, [r3, r6]
   d416c:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d416e:	782b      	ldrb	r3, [r5, #0]
   d4170:	f3bf 8f5b 	dmb	ish
   d4174:	07d9      	lsls	r1, r3, #31
   d4176:	d409      	bmi.n	d418c <digitalWriteFast+0x4c>
   d4178:	4824      	ldr	r0, [pc, #144]	; (d420c <digitalWriteFast+0xcc>)
   d417a:	f7ff ff92 	bl	d40a2 <__cxa_guard_acquire>
   d417e:	b128      	cbz	r0, d418c <digitalWriteFast+0x4c>
   d4180:	f000 fffa 	bl	d5178 <HAL_Pin_Map>
   d4184:	6020      	str	r0, [r4, #0]
   d4186:	4821      	ldr	r0, [pc, #132]	; (d420c <digitalWriteFast+0xcc>)
   d4188:	f7ff ff90 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d418c:	6820      	ldr	r0, [r4, #0]
   d418e:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4190:	a801      	add	r0, sp, #4
   d4192:	7873      	ldrb	r3, [r6, #1]
   d4194:	f003 031f 	and.w	r3, r3, #31
   d4198:	433b      	orrs	r3, r7
   d419a:	9301      	str	r3, [sp, #4]
   d419c:	f7ff ff90 	bl	d40c0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41a0:	9a01      	ldr	r2, [sp, #4]
   d41a2:	2301      	movs	r3, #1
   d41a4:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41a6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   d41aa:	b003      	add	sp, #12
   d41ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41ae:	07da      	lsls	r2, r3, #31
   d41b0:	d409      	bmi.n	d41c6 <digitalWriteFast+0x86>
   d41b2:	4628      	mov	r0, r5
   d41b4:	f7ff ff75 	bl	d40a2 <__cxa_guard_acquire>
   d41b8:	b128      	cbz	r0, d41c6 <digitalWriteFast+0x86>
   d41ba:	f000 ffdd 	bl	d5178 <HAL_Pin_Map>
   d41be:	6020      	str	r0, [r4, #0]
   d41c0:	4628      	mov	r0, r5
   d41c2:	f7ff ff73 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41c6:	6823      	ldr	r3, [r4, #0]
   d41c8:	5d9b      	ldrb	r3, [r3, r6]
   d41ca:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41cc:	782b      	ldrb	r3, [r5, #0]
   d41ce:	f3bf 8f5b 	dmb	ish
   d41d2:	07db      	lsls	r3, r3, #31
   d41d4:	d409      	bmi.n	d41ea <digitalWriteFast+0xaa>
   d41d6:	480d      	ldr	r0, [pc, #52]	; (d420c <digitalWriteFast+0xcc>)
   d41d8:	f7ff ff63 	bl	d40a2 <__cxa_guard_acquire>
   d41dc:	b128      	cbz	r0, d41ea <digitalWriteFast+0xaa>
   d41de:	f000 ffcb 	bl	d5178 <HAL_Pin_Map>
   d41e2:	6020      	str	r0, [r4, #0]
   d41e4:	4809      	ldr	r0, [pc, #36]	; (d420c <digitalWriteFast+0xcc>)
   d41e6:	f7ff ff61 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41ea:	6820      	ldr	r0, [r4, #0]
   d41ec:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41ee:	a801      	add	r0, sp, #4
   d41f0:	7873      	ldrb	r3, [r6, #1]
   d41f2:	f003 031f 	and.w	r3, r3, #31
   d41f6:	433b      	orrs	r3, r7
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	f7ff ff61 	bl	d40c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d41fe:	9a01      	ldr	r2, [sp, #4]
   d4200:	2301      	movs	r3, #1
   d4202:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4204:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d4208:	e7cf      	b.n	d41aa <digitalWriteFast+0x6a>
   d420a:	bf00      	nop
   d420c:	2003e49c 	.word	0x2003e49c
   d4210:	2003e4a0 	.word	0x2003e4a0

000d4214 <_Z11petWatchdogv>:
{
   d4214:	b508      	push	{r3, lr}
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
   d4216:	2101      	movs	r1, #1
   d4218:	2005      	movs	r0, #5
   d421a:	f7ff ff91 	bl	d4140 <digitalWriteFast>
  digitalWriteFast(donePin, LOW);
   d421e:	2100      	movs	r1, #0
   d4220:	2005      	movs	r0, #5
   d4222:	f7ff ff8d 	bl	d4140 <digitalWriteFast>
  watchdogFlag = false;
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <_Z11petWatchdogv+0x1c>)
   d4228:	2200      	movs	r2, #0
   d422a:	701a      	strb	r2, [r3, #0]
}
   d422c:	bd08      	pop	{r3, pc}
   d422e:	bf00      	nop
   d4230:	2003e5cc 	.word	0x2003e5cc

000d4234 <_Z8BlinkLEDi>:
void BlinkLED(int LED){
   d4234:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d4236:	b284      	uxth	r4, r0
   d4238:	2101      	movs	r1, #1
   d423a:	4620      	mov	r0, r4
   d423c:	f002 fbaf 	bl	d699e <digitalWrite>
  delay(1000);
   d4240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4244:	f001 fa10 	bl	d5668 <delay>
  digitalWrite(LED,LOW);
   d4248:	4620      	mov	r0, r4
   d424a:	2100      	movs	r1, #0
   d424c:	f002 fba7 	bl	d699e <digitalWrite>
}
   d4250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
   d4254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4258:	f001 ba06 	b.w	d5668 <delay>

000d425c <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d425c:	b510      	push	{r4, lr}
  static int lastPublish = 0;
  if(millis() - lastPublish >= 1000) {
   d425e:	4c07      	ldr	r4, [pc, #28]	; (d427c <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4260:	f000 ff52 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
   d4264:	6823      	ldr	r3, [r4, #0]
   d4266:	1ac0      	subs	r0, r0, r3
   d4268:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d426c:	d304      	bcc.n	d4278 <_Z20meterParticlePublishv+0x1c>
   d426e:	f000 ff4b 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4272:	6020      	str	r0, [r4, #0]
   d4274:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4276:	bd10      	pop	{r4, pc}
  else return 0;
   d4278:	2000      	movs	r0, #0
   d427a:	e7fc      	b.n	d4276 <_Z20meterParticlePublishv+0x1a>
   d427c:	2003e4b4 	.word	0x2003e4b4

000d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4280:	b508      	push	{r3, lr}
        waitUntil(meterParticlePublish);
   d4282:	f7ff ffeb 	bl	d425c <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d4286:	b910      	cbnz	r0, d428e <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d4288:	f001 f916 	bl	d54b8 <spark_process>
        while (_while() && !_condition()) {
   d428c:	e7f9      	b.n	d4282 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
        }
        return _condition();
    }
   d428e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4292:	f7ff bfe3 	b.w	d425c <_Z20meterParticlePublishv>
	...

000d4298 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d4298:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d429a:	4c15      	ldr	r4, [pc, #84]	; (d42f0 <_Z20updateThresholdValuev+0x58>)
   d429c:	6a20      	ldr	r0, [r4, #32]
   d429e:	f002 fd5d 	bl	d6d5c <__aeabi_f2d>
   d42a2:	4a14      	ldr	r2, [pc, #80]	; (d42f4 <_Z20updateThresholdValuev+0x5c>)
   d42a4:	e9cd 0100 	strd	r0, r1, [sp]
   d42a8:	2118      	movs	r1, #24
   d42aa:	4813      	ldr	r0, [pc, #76]	; (d42f8 <_Z20updateThresholdValuev+0x60>)
   d42ac:	f001 f9b4 	bl	d5618 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d42b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d42b2:	f002 fd53 	bl	d6d5c <__aeabi_f2d>
   d42b6:	4a11      	ldr	r2, [pc, #68]	; (d42fc <_Z20updateThresholdValuev+0x64>)
   d42b8:	e9cd 0100 	strd	r0, r1, [sp]
   d42bc:	2118      	movs	r1, #24
   d42be:	4810      	ldr	r0, [pc, #64]	; (d4300 <_Z20updateThresholdValuev+0x68>)
   d42c0:	f001 f9aa 	bl	d5618 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d42c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d42c6:	f002 fd49 	bl	d6d5c <__aeabi_f2d>
   d42ca:	4a0e      	ldr	r2, [pc, #56]	; (d4304 <_Z20updateThresholdValuev+0x6c>)
   d42cc:	e9cd 0100 	strd	r0, r1, [sp]
   d42d0:	2118      	movs	r1, #24
   d42d2:	480d      	ldr	r0, [pc, #52]	; (d4308 <_Z20updateThresholdValuev+0x70>)
   d42d4:	f001 f9a0 	bl	d5618 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d42d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d42da:	f002 fd3f 	bl	d6d5c <__aeabi_f2d>
   d42de:	4a0b      	ldr	r2, [pc, #44]	; (d430c <_Z20updateThresholdValuev+0x74>)
   d42e0:	e9cd 0100 	strd	r0, r1, [sp]
   d42e4:	2118      	movs	r1, #24
   d42e6:	480a      	ldr	r0, [pc, #40]	; (d4310 <_Z20updateThresholdValuev+0x78>)
   d42e8:	f001 f996 	bl	d5618 <snprintf>
} 
   d42ec:	b002      	add	sp, #8
   d42ee:	bd10      	pop	{r4, pc}
   d42f0:	2003e538 	.word	0x2003e538
   d42f4:	000d939d 	.word	0x000d939d
   d42f8:	2003e5b3 	.word	0x2003e5b3
   d42fc:	000d93ae 	.word	0x000d93ae
   d4300:	2003e50e 	.word	0x2003e50e
   d4304:	000d93bf 	.word	0x000d93bf
   d4308:	2003e59a 	.word	0x2003e59a
   d430c:	000d93d3 	.word	0x000d93d3
   d4310:	2003e4f5 	.word	0x2003e4f5

000d4314 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4314:	b530      	push	{r4, r5, lr}
   d4316:	b085      	sub	sp, #20
   d4318:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d431a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d431c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d431e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4320:	f001 f85a 	bl	d53d8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4324:	b9b0      	cbnz	r0, d4354 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4326:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4328:	b10c      	cbz	r4, d432e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d432a:	6923      	ldr	r3, [r4, #16]
   d432c:	b923      	cbnz	r3, d4338 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d432e:	4a0a      	ldr	r2, [pc, #40]	; (d4358 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4330:	2100      	movs	r1, #0
   d4332:	200a      	movs	r0, #10
   d4334:	f001 f848 	bl	d53c8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4338:	2300      	movs	r3, #0
   d433a:	f8ad 3006 	strh.w	r3, [sp, #6]
   d433e:	230c      	movs	r3, #12
   d4340:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4344:	2304      	movs	r3, #4
   d4346:	9303      	str	r3, [sp, #12]
   d4348:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d434a:	6923      	ldr	r3, [r4, #16]
   d434c:	aa01      	add	r2, sp, #4
   d434e:	2101      	movs	r1, #1
   d4350:	4620      	mov	r0, r4
   d4352:	4798      	blx	r3
}
   d4354:	b005      	add	sp, #20
   d4356:	bd30      	pop	{r4, r5, pc}
   d4358:	000d50f9 	.word	0x000d50f9

000d435c <_Z17getBatteryContextv>:
// {
//   voltage = analogRead(BATT) * 0.0011224;
//   snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
// }

void getBatteryContext() {
   d435c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d435e:	4d0e      	ldr	r5, [pc, #56]	; (d4398 <_Z17getBatteryContextv+0x3c>)
   d4360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4362:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4364:	ac01      	add	r4, sp, #4
   d4366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4368:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d436c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4370:	4669      	mov	r1, sp
   d4372:	2007      	movs	r0, #7
   d4374:	f7ff ffce 	bl	d4314 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4378:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d437a:	bfa8      	it	ge
   d437c:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d437e:	4a07      	ldr	r2, [pc, #28]	; (d439c <_Z17getBatteryContextv+0x40>)
   d4380:	ab08      	add	r3, sp, #32
   d4382:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4386:	2110      	movs	r1, #16
   d4388:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d438c:	4804      	ldr	r0, [pc, #16]	; (d43a0 <_Z17getBatteryContextv+0x44>)
   d438e:	f001 f943 	bl	d5618 <snprintf>

}
   d4392:	b009      	add	sp, #36	; 0x24
   d4394:	bd30      	pop	{r4, r5, pc}
   d4396:	bf00      	nop
   d4398:	000d96dc 	.word	0x000d96dc
   d439c:	000d9659 	.word	0x000d9659
   d43a0:	2003e4b8 	.word	0x2003e4b8

000d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d43a4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d43a6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d43a8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d43aa:	b17c      	cbz	r4, d43cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d43ac:	6863      	ldr	r3, [r4, #4]
   d43ae:	3b01      	subs	r3, #1
   d43b0:	6063      	str	r3, [r4, #4]
   d43b2:	b95b      	cbnz	r3, d43cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d43b4:	6823      	ldr	r3, [r4, #0]
   d43b6:	4620      	mov	r0, r4
   d43b8:	689b      	ldr	r3, [r3, #8]
   d43ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43bc:	68a3      	ldr	r3, [r4, #8]
   d43be:	3b01      	subs	r3, #1
   d43c0:	60a3      	str	r3, [r4, #8]
   d43c2:	b91b      	cbnz	r3, d43cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d43c4:	6823      	ldr	r3, [r4, #0]
   d43c6:	4620      	mov	r0, r4
   d43c8:	68db      	ldr	r3, [r3, #12]
   d43ca:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d43cc:	4628      	mov	r0, r5
   d43ce:	bd38      	pop	{r3, r4, r5, pc}

000d43d0 <_Z9sendEventv>:
{
   d43d0:	b530      	push	{r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d43d2:	4d2c      	ldr	r5, [pc, #176]	; (d4484 <_Z9sendEventv+0xb4>)
   d43d4:	b0a7      	sub	sp, #156	; 0x9c
   d43d6:	2408      	movs	r4, #8
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d43d8:	f002 fafa 	bl	d69d0 <_Z21__fetch_global_EEPROMv>
   d43dc:	4620      	mov	r0, r4
   d43de:	4929      	ldr	r1, [pc, #164]	; (d4484 <_Z9sendEventv+0xb4>)
   d43e0:	2238      	movs	r2, #56	; 0x38
   d43e2:	3464      	adds	r4, #100	; 0x64
   d43e4:	f000 fea8 	bl	d5138 <HAL_EEPROM_Get>
   for (int i = 0; i < 4; i++) {
   d43e8:	f5b4 7fcc 	cmp.w	r4, #408	; 0x198
   d43ec:	d1f4      	bne.n	d43d8 <_Z9sendEventv+0x8>
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.stateOfCharge);
   d43ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d43f0:	9304      	str	r3, [sp, #16]
   d43f2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   d43f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d43fa:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   d43fe:	4c22      	ldr	r4, [pc, #136]	; (d4488 <_Z9sendEventv+0xb8>)
   d4400:	e9cd 2300 	strd	r2, r3, [sp]
        val_(0) {
   d4404:	2500      	movs	r5, #0
   d4406:	4a21      	ldr	r2, [pc, #132]	; (d448c <_Z9sendEventv+0xbc>)
   d4408:	2164      	movs	r1, #100	; 0x64
   d440a:	a80d      	add	r0, sp, #52	; 0x34
   d440c:	f001 f904 	bl	d5618 <snprintf>
  Particle.publish("storage-facility-hook", data, PRIVATE);
   d4410:	f88d 5000 	strb.w	r5, [sp]
   d4414:	7823      	ldrb	r3, [r4, #0]
   d4416:	491e      	ldr	r1, [pc, #120]	; (d4490 <_Z9sendEventv+0xc0>)
   d4418:	aa0d      	add	r2, sp, #52	; 0x34
   d441a:	a809      	add	r0, sp, #36	; 0x24
   d441c:	f7ff fe82 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4420:	a80a      	add	r0, sp, #40	; 0x28
   d4422:	f7ff ffbf 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4426:	f002 f888 	bl	d653a <_ZN9TimeClass3nowEv>
   d442a:	4602      	mov	r2, r0
   d442c:	17c3      	asrs	r3, r0, #31
   d442e:	a809      	add	r0, sp, #36	; 0x24
   d4430:	f002 f82e 	bl	d6490 <_ZN9TimeClass7timeStrEx>
   d4434:	f88d 5000 	strb.w	r5, [sp]
   d4438:	7823      	ldrb	r3, [r4, #0]
   d443a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d443c:	4915      	ldr	r1, [pc, #84]	; (d4494 <_Z9sendEventv+0xc4>)
  currentCountTime = Time.now();
   d443e:	4c16      	ldr	r4, [pc, #88]	; (d4498 <_Z9sendEventv+0xc8>)
  Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4440:	a807      	add	r0, sp, #28
   d4442:	f7ff fe6f 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4446:	a808      	add	r0, sp, #32
   d4448:	f7ff ffac 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d444c:	a809      	add	r0, sp, #36	; 0x24
   d444e:	f001 fef3 	bl	d6238 <_ZN6StringD1Ev>
  currentCountTime = Time.now();
   d4452:	f002 f872 	bl	d653a <_ZN9TimeClass3nowEv>
   d4456:	17c1      	asrs	r1, r0, #31
   d4458:	e9c4 0100 	strd	r0, r1, [r4]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d445c:	f002 fab8 	bl	d69d0 <_Z21__fetch_global_EEPROMv>
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4460:	7821      	ldrb	r1, [r4, #0]
   d4462:	2003      	movs	r0, #3
   d4464:	f000 fe60 	bl	d5128 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d4468:	f002 f878 	bl	d655c <_ZN9TimeClass4hourEv>
   d446c:	4b0b      	ldr	r3, [pc, #44]	; (d449c <_Z9sendEventv+0xcc>)
   d446e:	6018      	str	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4470:	4b0b      	ldr	r3, [pc, #44]	; (d44a0 <_Z9sendEventv+0xd0>)
   d4472:	2201      	movs	r2, #1
   d4474:	701a      	strb	r2, [r3, #0]
   d4476:	f000 fe47 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d447a:	4b0a      	ldr	r3, [pc, #40]	; (d44a4 <_Z9sendEventv+0xd4>)
   d447c:	6018      	str	r0, [r3, #0]
}
   d447e:	b027      	add	sp, #156	; 0x9c
   d4480:	bd30      	pop	{r4, r5, pc}
   d4482:	bf00      	nop
   d4484:	2003e538 	.word	0x2003e538
   d4488:	2003e4b1 	.word	0x2003e4b1
   d448c:	000d93e8 	.word	0x000d93e8
   d4490:	000d941d 	.word	0x000d941d
   d4494:	000d9433 	.word	0x000d9433
   d4498:	2003e4d8 	.word	0x2003e4d8
   d449c:	2003e4e0 	.word	0x2003e4e0
   d44a0:	2003e1e0 	.word	0x2003e1e0
   d44a4:	2003e5d0 	.word	0x2003e5d0

000d44a8 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d44a8:	b530      	push	{r4, r5, lr}
   d44aa:	4d1e      	ldr	r5, [pc, #120]	; (d4524 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d44ac:	b085      	sub	sp, #20
  if (!data) {                                                                    // First check to see if there is any data
   d44ae:	460c      	mov	r4, r1
   d44b0:	b981      	cbnz	r1, d44d4 <_Z14UbidotsHandlerPKcS0_+0x2c>
    if (verboseMode) {
   d44b2:	782b      	ldrb	r3, [r5, #0]
   d44b4:	b343      	cbz	r3, d4508 <_Z14UbidotsHandlerPKcS0_+0x60>
        return waitConditionWhile(_condition, []{ return true; });
   d44b6:	f7ff fee3 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d44ba:	4b1b      	ldr	r3, [pc, #108]	; (d4528 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d44bc:	f88d 4000 	strb.w	r4, [sp]
   d44c0:	781b      	ldrb	r3, [r3, #0]
   d44c2:	4a1a      	ldr	r2, [pc, #104]	; (d452c <_Z14UbidotsHandlerPKcS0_+0x84>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d44c4:	491a      	ldr	r1, [pc, #104]	; (d4530 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d44c6:	a802      	add	r0, sp, #8
   d44c8:	f7ff fe2c 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44cc:	a803      	add	r0, sp, #12
   d44ce:	f7ff ff69 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44d2:	e019      	b.n	d4508 <_Z14UbidotsHandlerPKcS0_+0x60>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d44d4:	4608      	mov	r0, r1
   d44d6:	f002 ffea 	bl	d74ae <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d44da:	38c8      	subs	r0, #200	; 0xc8
   d44dc:	2801      	cmp	r0, #1
    if (verboseMode) {
   d44de:	782b      	ldrb	r3, [r5, #0]
  if ((responseCode == 200) || (responseCode == 201))
   d44e0:	d814      	bhi.n	d450c <_Z14UbidotsHandlerPKcS0_+0x64>
    if (verboseMode) {
   d44e2:	b173      	cbz	r3, d4502 <_Z14UbidotsHandlerPKcS0_+0x5a>
   d44e4:	f7ff fecc 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("State", "Response Received", PRIVATE);
   d44e8:	2300      	movs	r3, #0
   d44ea:	f88d 3000 	strb.w	r3, [sp]
   d44ee:	4b0e      	ldr	r3, [pc, #56]	; (d4528 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d44f0:	4a10      	ldr	r2, [pc, #64]	; (d4534 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d44f2:	781b      	ldrb	r3, [r3, #0]
   d44f4:	4910      	ldr	r1, [pc, #64]	; (d4538 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d44f6:	a802      	add	r0, sp, #8
   d44f8:	f7ff fe14 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d44fc:	a803      	add	r0, sp, #12
   d44fe:	f7ff ff51 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;    
   d4502:	4b0e      	ldr	r3, [pc, #56]	; (d453c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4504:	2200      	movs	r2, #0
   d4506:	701a      	strb	r2, [r3, #0]
}
   d4508:	b005      	add	sp, #20
   d450a:	bd30      	pop	{r4, r5, pc}
  else if (verboseMode) {
   d450c:	2b00      	cmp	r3, #0
   d450e:	d0fb      	beq.n	d4508 <_Z14UbidotsHandlerPKcS0_+0x60>
   d4510:	f7ff feb6 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4514:	2300      	movs	r3, #0
   d4516:	f88d 3000 	strb.w	r3, [sp]
   d451a:	4b03      	ldr	r3, [pc, #12]	; (d4528 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d451c:	4622      	mov	r2, r4
   d451e:	781b      	ldrb	r3, [r3, #0]
   d4520:	e7d0      	b.n	d44c4 <_Z14UbidotsHandlerPKcS0_+0x1c>
   d4522:	bf00      	nop
   d4524:	2003e5cb 	.word	0x2003e5cb
   d4528:	2003e4b1 	.word	0x2003e4b1
   d452c:	000d9438 	.word	0x000d9438
   d4530:	000d9440 	.word	0x000d9440
   d4534:	000d944d 	.word	0x000d944d
   d4538:	000d945f 	.word	0x000d945f
   d453c:	2003e1e0 	.word	0x2003e1e0

000d4540 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4540:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
  sensor_data.validData = false;
   d4544:	4c5b      	ldr	r4, [pc, #364]	; (d46b4 <_Z16takeMeasurementsv+0x174>)
  if (sht31.readTemperature()){
   d4546:	485c      	ldr	r0, [pc, #368]	; (d46b8 <_Z16takeMeasurementsv+0x178>)
  sensor_data.validData = false;
   d4548:	2500      	movs	r5, #0
   d454a:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d454c:	f000 fd98 	bl	d5080 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4550:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4558:	f000 809a 	beq.w	d4690 <_Z16takeMeasurementsv+0x150>
    currentCountTime = Time.now();
   d455c:	f001 ffed 	bl	d653a <_ZN9TimeClass3nowEv>
   d4560:	4b56      	ldr	r3, [pc, #344]	; (d46bc <_Z16takeMeasurementsv+0x17c>)
   d4562:	17c1      	asrs	r1, r0, #31
   d4564:	e9c3 0100 	strd	r0, r1, [r3]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d4568:	f002 f804 	bl	d6574 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d456c:	281e      	cmp	r0, #30
   d456e:	f000 8088 	beq.w	d4682 <_Z16takeMeasurementsv+0x142>
   d4572:	282d      	cmp	r0, #45	; 0x2d
   d4574:	f000 8087 	beq.w	d4686 <_Z16takeMeasurementsv+0x146>
        reportCycle = 0;                                                // This is the first of the sample-only periods
   d4578:	280f      	cmp	r0, #15
   d457a:	bf14      	ite	ne
   d457c:	2603      	movne	r6, #3
   d457e:	462e      	moveq	r6, r5
    sensor_data.temperatureInC = sht31.readTemperature();
   d4580:	484d      	ldr	r0, [pc, #308]	; (d46b8 <_Z16takeMeasurementsv+0x178>)
   d4582:	f000 fd7d 	bl	d5080 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4586:	ee10 0a10 	vmov	r0, s0
   d458a:	f002 fbe7 	bl	d6d5c <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d458e:	4a4c      	ldr	r2, [pc, #304]	; (d46c0 <_Z16takeMeasurementsv+0x180>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d4590:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d4594:	e9cd 0100 	strd	r0, r1, [sp]
   d4598:	2110      	movs	r1, #16
   d459a:	484a      	ldr	r0, [pc, #296]	; (d46c4 <_Z16takeMeasurementsv+0x184>)
   d459c:	f001 f83c 	bl	d5618 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d45a0:	4845      	ldr	r0, [pc, #276]	; (d46b8 <_Z16takeMeasurementsv+0x178>)
   d45a2:	f000 fd7b 	bl	d509c <_ZN14Adafruit_SHT3112readHumidityEv>
   d45a6:	ee10 0a10 	vmov	r0, s0
   d45aa:	f002 fbd7 	bl	d6d5c <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d45ae:	4a46      	ldr	r2, [pc, #280]	; (d46c8 <_Z16takeMeasurementsv+0x188>)
    sensor_data.relativeHumidity = sht31.readHumidity();
   d45b0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d45b4:	e9cd 0100 	strd	r0, r1, [sp]
   d45b8:	2110      	movs	r1, #16
   d45ba:	4844      	ldr	r0, [pc, #272]	; (d46cc <_Z16takeMeasurementsv+0x18c>)
   d45bc:	f001 f82c 	bl	d5618 <snprintf>
   d45c0:	a902      	add	r1, sp, #8
   d45c2:	2003      	movs	r0, #3
   d45c4:	f7ff fea6 	bl	d4314 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d45c8:	2800      	cmp	r0, #0
   d45ca:	d15e      	bne.n	d468a <_Z16takeMeasurementsv+0x14a>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d45cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d45d0:	ee07 3a90 	vmov	s15, r3
   d45d4:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d45d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d45dc:	4a3c      	ldr	r2, [pc, #240]	; (d46d0 <_Z16takeMeasurementsv+0x190>)
   d45de:	483d      	ldr	r0, [pc, #244]	; (d46d4 <_Z16takeMeasurementsv+0x194>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d45e0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
   d45e4:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d45e8:	2110      	movs	r1, #16
   d45ea:	f001 f815 	bl	d5618 <snprintf>
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d45ee:	4b3a      	ldr	r3, [pc, #232]	; (d46d8 <_Z16takeMeasurementsv+0x198>)
   d45f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d45f2:	e9d3 8900 	ldrd	r8, r9, [r3]
   d45f6:	f002 fbb1 	bl	d6d5c <__aeabi_f2d>
   d45fa:	4642      	mov	r2, r8
   d45fc:	464b      	mov	r3, r9
   d45fe:	f002 fe95 	bl	d732c <__aeabi_dcmpgt>
   d4602:	b110      	cbz	r0, d460a <_Z16takeMeasurementsv+0xca>
   d4604:	4b35      	ldr	r3, [pc, #212]	; (d46dc <_Z16takeMeasurementsv+0x19c>)
   d4606:	2201      	movs	r2, #1
   d4608:	701a      	strb	r2, [r3, #0]
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d460a:	6a20      	ldr	r0, [r4, #32]
   d460c:	f002 fba6 	bl	d6d5c <__aeabi_f2d>
   d4610:	4602      	mov	r2, r0
   d4612:	460b      	mov	r3, r1
   d4614:	4640      	mov	r0, r8
   d4616:	4649      	mov	r1, r9
   d4618:	f002 fe88 	bl	d732c <__aeabi_dcmpgt>
   d461c:	b110      	cbz	r0, d4624 <_Z16takeMeasurementsv+0xe4>
   d461e:	4b30      	ldr	r3, [pc, #192]	; (d46e0 <_Z16takeMeasurementsv+0x1a0>)
   d4620:	2201      	movs	r2, #1
   d4622:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d4624:	4b2f      	ldr	r3, [pc, #188]	; (d46e4 <_Z16takeMeasurementsv+0x1a4>)
   d4626:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4628:	e9d3 8900 	ldrd	r8, r9, [r3]
   d462c:	f002 fb96 	bl	d6d5c <__aeabi_f2d>
   d4630:	4642      	mov	r2, r8
   d4632:	464b      	mov	r3, r9
   d4634:	f002 fe7a 	bl	d732c <__aeabi_dcmpgt>
   d4638:	b110      	cbz	r0, d4640 <_Z16takeMeasurementsv+0x100>
   d463a:	4b2b      	ldr	r3, [pc, #172]	; (d46e8 <_Z16takeMeasurementsv+0x1a8>)
   d463c:	2201      	movs	r2, #1
   d463e:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4640:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4642:	f002 fb8b 	bl	d6d5c <__aeabi_f2d>
   d4646:	4602      	mov	r2, r0
   d4648:	460b      	mov	r3, r1
   d464a:	4640      	mov	r0, r8
   d464c:	4649      	mov	r1, r9
   d464e:	f002 fe6d 	bl	d732c <__aeabi_dcmpgt>
   d4652:	b110      	cbz	r0, d465a <_Z16takeMeasurementsv+0x11a>
   d4654:	4b25      	ldr	r3, [pc, #148]	; (d46ec <_Z16takeMeasurementsv+0x1ac>)
   d4656:	2201      	movs	r2, #1
   d4658:	701a      	strb	r2, [r3, #0]
    sensor_data.validData = true;
   d465a:	2501      	movs	r5, #1
     getBatteryContext();                   // Check what the battery is doing.
   d465c:	f7ff fe7e 	bl	d435c <_Z17getBatteryContextv>
    sensor_data.validData = true;
   d4660:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4662:	f001 ff6a 	bl	d653a <_ZN9TimeClass3nowEv>
   d4666:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d4668:	f002 f9b2 	bl	d69d0 <_Z21__fetch_global_EEPROMv>
   d466c:	2064      	movs	r0, #100	; 0x64
   d466e:	4370      	muls	r0, r6
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4670:	4910      	ldr	r1, [pc, #64]	; (d46b4 <_Z16takeMeasurementsv+0x174>)
   d4672:	2238      	movs	r2, #56	; 0x38
   d4674:	3008      	adds	r0, #8
   d4676:	f000 fd67 	bl	d5148 <HAL_EEPROM_Put>
        return 0;
   d467a:	4628      	mov	r0, r5
}
   d467c:	b004      	add	sp, #16
   d467e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    switch (currentMinutes) {
   d4682:	2601      	movs	r6, #1
   d4684:	e77c      	b.n	d4580 <_Z16takeMeasurementsv+0x40>
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d4686:	2602      	movs	r6, #2
   d4688:	e77a      	b.n	d4580 <_Z16takeMeasurementsv+0x40>
            return -1.0f;
   d468a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d468e:	e7a3      	b.n	d45d8 <_Z16takeMeasurementsv+0x98>
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d4690:	4b17      	ldr	r3, [pc, #92]	; (d46f0 <_Z16takeMeasurementsv+0x1b0>)
   d4692:	f88d 5000 	strb.w	r5, [sp]
   d4696:	781b      	ldrb	r3, [r3, #0]
   d4698:	4a16      	ldr	r2, [pc, #88]	; (d46f4 <_Z16takeMeasurementsv+0x1b4>)
   d469a:	4917      	ldr	r1, [pc, #92]	; (d46f8 <_Z16takeMeasurementsv+0x1b8>)
   d469c:	a802      	add	r0, sp, #8
   d469e:	f7ff fd41 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d46a2:	a803      	add	r0, sp, #12
   d46a4:	f7ff fe7e 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Failed to take reading!");
   d46a8:	f002 f856 	bl	d6758 <_Z16_fetch_usbserialv>
   d46ac:	4913      	ldr	r1, [pc, #76]	; (d46fc <_Z16takeMeasurementsv+0x1bc>)
   d46ae:	f001 fd7c 	bl	d61aa <_ZN5Print7printlnEPKc>
   d46b2:	e7e2      	b.n	d467a <_Z16takeMeasurementsv+0x13a>
   d46b4:	2003e538 	.word	0x2003e538
   d46b8:	2003e570 	.word	0x2003e570
   d46bc:	2003e4d8 	.word	0x2003e4d8
   d46c0:	000d9465 	.word	0x000d9465
   d46c4:	2003e588 	.word	0x2003e588
   d46c8:	000d946d 	.word	0x000d946d
   d46cc:	2003e4e4 	.word	0x2003e4e4
   d46d0:	000d9475 	.word	0x000d9475
   d46d4:	2003e4c8 	.word	0x2003e4c8
   d46d8:	2003e580 	.word	0x2003e580
   d46dc:	2003e50d 	.word	0x2003e50d
   d46e0:	2003e5b2 	.word	0x2003e5b2
   d46e4:	2003e528 	.word	0x2003e528
   d46e8:	2003e4f4 	.word	0x2003e4f4
   d46ec:	2003e599 	.word	0x2003e599
   d46f0:	2003e4b0 	.word	0x2003e4b0
   d46f4:	000d947b 	.word	0x000d947b
   d46f8:	000d9498 	.word	0x000d9498
   d46fc:	000d949c 	.word	0x000d949c

000d4700 <setup>:
{
   d4700:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4702:	b0bd      	sub	sp, #244	; 0xf4
  Serial.begin(115200);
   d4704:	f002 f828 	bl	d6758 <_Z16_fetch_usbserialv>
   d4708:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d470c:	f002 f818 	bl	d6740 <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d4710:	f002 f822 	bl	d6758 <_Z16_fetch_usbserialv>
   d4714:	4969      	ldr	r1, [pc, #420]	; (d48bc <setup+0x1bc>)
   d4716:	f001 fd48 	bl	d61aa <_ZN5Print7printlnEPKc>
  pinMode(wakeUpPin,INPUT);                                                                   // This pin is active HIGH, 
   d471a:	2100      	movs	r1, #0
   d471c:	2008      	movs	r0, #8
   d471e:	f002 f92d 	bl	d697c <pinMode>
  pinMode(donePin,OUTPUT);                                                                    // Allows us to pet the watchdog
   d4722:	2101      	movs	r1, #1
   d4724:	2005      	movs	r0, #5
   d4726:	f002 f929 	bl	d697c <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   d472a:	f7ff fd73 	bl	d4214 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   d472e:	2300      	movs	r3, #0
   d4730:	9300      	str	r3, [sp, #0]
   d4732:	2201      	movs	r2, #1
   d4734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4738:	4961      	ldr	r1, [pc, #388]	; (d48c0 <setup+0x1c0>)
   d473a:	2008      	movs	r0, #8
   d473c:	f001 fbb2 	bl	d5ea4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4740:	4b60      	ldr	r3, [pc, #384]	; (d48c4 <setup+0x1c4>)
   d4742:	aa0c      	add	r2, sp, #48	; 0x30
   d4744:	f103 0510 	add.w	r5, r3, #16
   d4748:	4617      	mov	r7, r2
   d474a:	6818      	ldr	r0, [r3, #0]
   d474c:	6859      	ldr	r1, [r3, #4]
   d474e:	4614      	mov	r4, r2
   d4750:	c403      	stmia	r4!, {r0, r1}
   d4752:	3308      	adds	r3, #8
   d4754:	42ab      	cmp	r3, r5
   d4756:	4622      	mov	r2, r4
   d4758:	d1f7      	bne.n	d474a <setup+0x4a>
   d475a:	8819      	ldrh	r1, [r3, #0]
   d475c:	789b      	ldrb	r3, [r3, #2]
   d475e:	8021      	strh	r1, [r4, #0]
   d4760:	222d      	movs	r2, #45	; 0x2d
   d4762:	70a3      	strb	r3, [r4, #2]
   d4764:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4766:	4d58      	ldr	r5, [pc, #352]	; (d48c8 <setup+0x1c8>)
   d4768:	4e58      	ldr	r6, [pc, #352]	; (d48cc <setup+0x1cc>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d476a:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   d476e:	f002 febf 	bl	d74f0 <memset>
  state = IDLE_STATE;
   d4772:	2302      	movs	r3, #2
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4774:	2101      	movs	r1, #1
   d4776:	2007      	movs	r0, #7
  state = IDLE_STATE;
   d4778:	702b      	strb	r3, [r5, #0]
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d477a:	f002 f8ff 	bl	d697c <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
   d477e:	a804      	add	r0, sp, #16
   d4780:	f000 feaa 	bl	d54d8 <spark_deviceID>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4784:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4786:	2300      	movs	r3, #0
   d4788:	227d      	movs	r2, #125	; 0x7d
   d478a:	a91c      	add	r1, sp, #112	; 0x70
   d478c:	a804      	add	r0, sp, #16
   d478e:	f001 fdde 	bl	d634e <_ZNK6String8getBytesEPhjj>
   d4792:	4622      	mov	r2, r4
   d4794:	494e      	ldr	r1, [pc, #312]	; (d48d0 <setup+0x1d0>)
   d4796:	4623      	mov	r3, r4
   d4798:	e9cd 4400 	strd	r4, r4, [sp]
   d479c:	a81c      	add	r0, sp, #112	; 0x70
   d479e:	f000 feab 	bl	d54f8 <spark_subscribe>
  Particle.variable("Product Version",productNumber);
   d47a2:	4b4c      	ldr	r3, [pc, #304]	; (d48d4 <setup+0x1d4>)
        return _variable(varKey, var, STRING);
   d47a4:	484c      	ldr	r0, [pc, #304]	; (d48d8 <setup+0x1d8>)
   d47a6:	6819      	ldr	r1, [r3, #0]
   d47a8:	f7ff fcb8 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("Release",releaseNumber);
   d47ac:	4b4b      	ldr	r3, [pc, #300]	; (d48dc <setup+0x1dc>)
   d47ae:	484c      	ldr	r0, [pc, #304]	; (d48e0 <setup+0x1e0>)
   d47b0:	6819      	ldr	r1, [r3, #0]
   d47b2:	f7ff fcb3 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47b6:	494b      	ldr	r1, [pc, #300]	; (d48e4 <setup+0x1e4>)
   d47b8:	484b      	ldr	r0, [pc, #300]	; (d48e8 <setup+0x1e8>)
   d47ba:	f7ff fcaf 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47be:	494b      	ldr	r1, [pc, #300]	; (d48ec <setup+0x1ec>)
   d47c0:	484b      	ldr	r0, [pc, #300]	; (d48f0 <setup+0x1f0>)
   d47c2:	f7ff fcab 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47c6:	494b      	ldr	r1, [pc, #300]	; (d48f4 <setup+0x1f4>)
   d47c8:	484b      	ldr	r0, [pc, #300]	; (d48f8 <setup+0x1f8>)
   d47ca:	f7ff fca7 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47ce:	494b      	ldr	r1, [pc, #300]	; (d48fc <setup+0x1fc>)
   d47d0:	484b      	ldr	r0, [pc, #300]	; (d4900 <setup+0x200>)
   d47d2:	f7ff fca3 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47d6:	494b      	ldr	r1, [pc, #300]	; (d4904 <setup+0x204>)
   d47d8:	484b      	ldr	r0, [pc, #300]	; (d4908 <setup+0x208>)
   d47da:	f7ff fc9f 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47de:	494b      	ldr	r1, [pc, #300]	; (d490c <setup+0x20c>)
   d47e0:	484b      	ldr	r0, [pc, #300]	; (d4910 <setup+0x210>)
   d47e2:	f7ff fc9b 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47e6:	494b      	ldr	r1, [pc, #300]	; (d4914 <setup+0x214>)
   d47e8:	484b      	ldr	r0, [pc, #300]	; (d4918 <setup+0x218>)
   d47ea:	f7ff fc97 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d47ee:	494b      	ldr	r1, [pc, #300]	; (d491c <setup+0x21c>)
   d47f0:	484b      	ldr	r0, [pc, #300]	; (d4920 <setup+0x220>)
   d47f2:	f7ff fc93 	bl	d411c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d47f6:	4a4b      	ldr	r2, [pc, #300]	; (d4924 <setup+0x224>)
   d47f8:	494b      	ldr	r1, [pc, #300]	; (d4928 <setup+0x228>)
   d47fa:	484c      	ldr	r0, [pc, #304]	; (d492c <setup+0x22c>)
   d47fc:	f001 f81e 	bl	d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4800:	4a4b      	ldr	r2, [pc, #300]	; (d4930 <setup+0x230>)
   d4802:	494c      	ldr	r1, [pc, #304]	; (d4934 <setup+0x234>)
   d4804:	4849      	ldr	r0, [pc, #292]	; (d492c <setup+0x22c>)
   d4806:	f001 f819 	bl	d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d480a:	4a4b      	ldr	r2, [pc, #300]	; (d4938 <setup+0x238>)
   d480c:	494b      	ldr	r1, [pc, #300]	; (d493c <setup+0x23c>)
   d480e:	4847      	ldr	r0, [pc, #284]	; (d492c <setup+0x22c>)
   d4810:	f001 f814 	bl	d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4814:	4a4a      	ldr	r2, [pc, #296]	; (d4940 <setup+0x240>)
   d4816:	494b      	ldr	r1, [pc, #300]	; (d4944 <setup+0x244>)
   d4818:	4844      	ldr	r0, [pc, #272]	; (d492c <setup+0x22c>)
   d481a:	f001 f80f 	bl	d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d481e:	4a4a      	ldr	r2, [pc, #296]	; (d4948 <setup+0x248>)
   d4820:	494a      	ldr	r1, [pc, #296]	; (d494c <setup+0x24c>)
   d4822:	4842      	ldr	r0, [pc, #264]	; (d492c <setup+0x22c>)
   d4824:	f001 f80a 	bl	d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4828:	4949      	ldr	r1, [pc, #292]	; (d4950 <setup+0x250>)
   d482a:	4a4a      	ldr	r2, [pc, #296]	; (d4954 <setup+0x254>)
   d482c:	483f      	ldr	r0, [pc, #252]	; (d492c <setup+0x22c>)
   d482e:	f001 f805 	bl	d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4832:	f001 fe82 	bl	d653a <_ZN9TimeClass3nowEv>
   d4836:	4602      	mov	r2, r0
   d4838:	17c3      	asrs	r3, r0, #31
   d483a:	a808      	add	r0, sp, #32
   d483c:	f001 fe28 	bl	d6490 <_ZN9TimeClass7timeStrEx>
   d4840:	4945      	ldr	r1, [pc, #276]	; (d4958 <setup+0x258>)
   d4842:	7833      	ldrb	r3, [r6, #0]
   d4844:	9a08      	ldr	r2, [sp, #32]
   d4846:	f88d 4000 	strb.w	r4, [sp]
   d484a:	a802      	add	r0, sp, #8
   d484c:	f7ff fc6a 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4850:	a803      	add	r0, sp, #12
   d4852:	f7ff fda7 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4856:	a808      	add	r0, sp, #32
   d4858:	f001 fcee 	bl	d6238 <_ZN6StringD1Ev>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d485c:	483f      	ldr	r0, [pc, #252]	; (d495c <setup+0x25c>)
   d485e:	2144      	movs	r1, #68	; 0x44
   d4860:	f000 fb77 	bl	d4f52 <_ZN14Adafruit_SHT315beginEh>
   d4864:	b988      	cbnz	r0, d488a <setup+0x18a>
   d4866:	f000 fc4f 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d486a:	4c3d      	ldr	r4, [pc, #244]	; (d4960 <setup+0x260>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d486c:	493d      	ldr	r1, [pc, #244]	; (d4964 <setup+0x264>)
    resetTimeStamp = millis();
   d486e:	6020      	str	r0, [r4, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4870:	4638      	mov	r0, r7
   d4872:	f002 fe73 	bl	d755c <strcpy>
    Serial.println("Couldn't find SHT31");
   d4876:	f001 ff6f 	bl	d6758 <_Z16_fetch_usbserialv>
   d487a:	493b      	ldr	r1, [pc, #236]	; (d4968 <setup+0x268>)
   d487c:	f001 fc95 	bl	d61aa <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d4880:	2301      	movs	r3, #1
   d4882:	702b      	strb	r3, [r5, #0]
   d4884:	f000 fc40 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4888:	6020      	str	r0, [r4, #0]
  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d488a:	f7ff fe59 	bl	d4540 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d488e:	f7ff fd03 	bl	d4298 <_Z20updateThresholdValuev>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d4892:	4b36      	ldr	r3, [pc, #216]	; (d496c <setup+0x26c>)
   d4894:	781b      	ldrb	r3, [r3, #0]
   d4896:	b15b      	cbz	r3, d48b0 <setup+0x1b0>
   d4898:	2300      	movs	r3, #0
   d489a:	f88d 3000 	strb.w	r3, [sp]
   d489e:	a808      	add	r0, sp, #32
   d48a0:	7833      	ldrb	r3, [r6, #0]
   d48a2:	4933      	ldr	r1, [pc, #204]	; (d4970 <setup+0x270>)
   d48a4:	463a      	mov	r2, r7
   d48a6:	f7ff fc3d 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d48aa:	a809      	add	r0, sp, #36	; 0x24
   d48ac:	f7ff fd7a 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d48b0:	a804      	add	r0, sp, #16
   d48b2:	f001 fcc1 	bl	d6238 <_ZN6StringD1Ev>
}
   d48b6:	b03d      	add	sp, #244	; 0xf4
   d48b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48ba:	bf00      	nop
   d48bc:	000d94b4 	.word	0x000d94b4
   d48c0:	000d40b5 	.word	0x000d40b5
   d48c4:	000d96f8 	.word	0x000d96f8
   d48c8:	2003e57c 	.word	0x2003e57c
   d48cc:	2003e4b1 	.word	0x2003e4b1
   d48d0:	000d44a9 	.word	0x000d44a9
   d48d4:	2003e1e4 	.word	0x2003e1e4
   d48d8:	000d94bf 	.word	0x000d94bf
   d48dc:	2003e1e8 	.word	0x2003e1e8
   d48e0:	000d94cf 	.word	0x000d94cf
   d48e4:	2003e588 	.word	0x2003e588
   d48e8:	000d94d7 	.word	0x000d94d7
   d48ec:	2003e4e4 	.word	0x2003e4e4
   d48f0:	000d94e3 	.word	0x000d94e3
   d48f4:	2003e5b3 	.word	0x2003e5b3
   d48f8:	000d94ec 	.word	0x000d94ec
   d48fc:	2003e50e 	.word	0x2003e50e
   d4900:	000d94fe 	.word	0x000d94fe
   d4904:	2003e59a 	.word	0x2003e59a
   d4908:	000d9510 	.word	0x000d9510
   d490c:	2003e4f5 	.word	0x2003e4f5
   d4910:	000d951f 	.word	0x000d951f
   d4914:	2003e4c8 	.word	0x2003e4c8
   d4918:	000d952e 	.word	0x000d952e
   d491c:	2003e4b8 	.word	0x2003e4b8
   d4920:	000d9536 	.word	0x000d9536
   d4924:	000d9545 	.word	0x000d9545
   d4928:	000d40f1 	.word	0x000d40f1
   d492c:	000d5811 	.word	0x000d5811
   d4930:	000d9551 	.word	0x000d9551
   d4934:	000d4a51 	.word	0x000d4a51
   d4938:	000d955e 	.word	0x000d955e
   d493c:	000d4d35 	.word	0x000d4d35
   d4940:	000d956f 	.word	0x000d956f
   d4944:	000d4d89 	.word	0x000d4d89
   d4948:	000d9580 	.word	0x000d9580
   d494c:	000d4e31 	.word	0x000d4e31
   d4950:	000d4ddd 	.word	0x000d4ddd
   d4954:	000d9595 	.word	0x000d9595
   d4958:	000d9433 	.word	0x000d9433
   d495c:	2003e570 	.word	0x2003e570
   d4960:	2003e530 	.word	0x2003e530
   d4964:	000d95a9 	.word	0x000d95a9
   d4968:	000d95c6 	.word	0x000d95c6
   d496c:	2003e5cb 	.word	0x2003e5cb
   d4970:	000d95da 	.word	0x000d95da

000d4974 <_Z16ThresholdCrossedv>:
bool ThresholdCrossed(){
   d4974:	b530      	push	{r4, r5, lr}
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4976:	4b2a      	ldr	r3, [pc, #168]	; (d4a20 <_Z16ThresholdCrossedv+0xac>)
   d4978:	4c2a      	ldr	r4, [pc, #168]	; (d4a24 <_Z16ThresholdCrossedv+0xb0>)
   d497a:	781b      	ldrb	r3, [r3, #0]
bool ThresholdCrossed(){
   d497c:	b08d      	sub	sp, #52	; 0x34
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d497e:	b913      	cbnz	r3, d4986 <_Z16ThresholdCrossedv+0x12>
   d4980:	4b29      	ldr	r3, [pc, #164]	; (d4a28 <_Z16ThresholdCrossedv+0xb4>)
   d4982:	781b      	ldrb	r3, [r3, #0]
   d4984:	b1d3      	cbz	r3, d49bc <_Z16ThresholdCrossedv+0x48>
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d4986:	4b29      	ldr	r3, [pc, #164]	; (d4a2c <_Z16ThresholdCrossedv+0xb8>)
   d4988:	e9d3 2300 	ldrd	r2, r3, [r3]
   d498c:	2120      	movs	r1, #32
   d498e:	e9cd 2300 	strd	r2, r3, [sp]
   d4992:	a804      	add	r0, sp, #16
   d4994:	4a26      	ldr	r2, [pc, #152]	; (d4a30 <_Z16ThresholdCrossedv+0xbc>)
   d4996:	f000 fe3f 	bl	d5618 <snprintf>
        return waitConditionWhile(_condition, []{ return true; });
   d499a:	f7ff fc71 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d499e:	2300      	movs	r3, #0
   d49a0:	f88d 3000 	strb.w	r3, [sp]
   d49a4:	4b23      	ldr	r3, [pc, #140]	; (d4a34 <_Z16ThresholdCrossedv+0xc0>)
   d49a6:	4924      	ldr	r1, [pc, #144]	; (d4a38 <_Z16ThresholdCrossedv+0xc4>)
   d49a8:	781b      	ldrb	r3, [r3, #0]
   d49aa:	aa04      	add	r2, sp, #16
   d49ac:	a802      	add	r0, sp, #8
   d49ae:	f7ff fbb9 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49b2:	a803      	add	r0, sp, #12
   d49b4:	f7ff fcf6 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d49b8:	2301      	movs	r3, #1
   d49ba:	7023      	strb	r3, [r4, #0]
  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d49bc:	4d1f      	ldr	r5, [pc, #124]	; (d4a3c <_Z16ThresholdCrossedv+0xc8>)
   d49be:	782a      	ldrb	r2, [r5, #0]
   d49c0:	b912      	cbnz	r2, d49c8 <_Z16ThresholdCrossedv+0x54>
   d49c2:	4b1f      	ldr	r3, [pc, #124]	; (d4a40 <_Z16ThresholdCrossedv+0xcc>)
   d49c4:	781b      	ldrb	r3, [r3, #0]
   d49c6:	b1eb      	cbz	r3, d4a04 <_Z16ThresholdCrossedv+0x90>
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d49c8:	4b1e      	ldr	r3, [pc, #120]	; (d4a44 <_Z16ThresholdCrossedv+0xd0>)
   d49ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49ce:	2120      	movs	r1, #32
   d49d0:	e9cd 2300 	strd	r2, r3, [sp]
   d49d4:	a804      	add	r0, sp, #16
   d49d6:	4a1c      	ldr	r2, [pc, #112]	; (d4a48 <_Z16ThresholdCrossedv+0xd4>)
   d49d8:	f000 fe1e 	bl	d5618 <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d49dc:	2007      	movs	r0, #7
   d49de:	f7ff fc29 	bl	d4234 <_Z8BlinkLEDi>
   d49e2:	f7ff fc4d 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d49e6:	2300      	movs	r3, #0
   d49e8:	f88d 3000 	strb.w	r3, [sp]
   d49ec:	4b11      	ldr	r3, [pc, #68]	; (d4a34 <_Z16ThresholdCrossedv+0xc0>)
   d49ee:	4912      	ldr	r1, [pc, #72]	; (d4a38 <_Z16ThresholdCrossedv+0xc4>)
   d49f0:	781b      	ldrb	r3, [r3, #0]
   d49f2:	aa04      	add	r2, sp, #16
   d49f4:	a802      	add	r0, sp, #8
   d49f6:	f7ff fb95 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49fa:	a803      	add	r0, sp, #12
   d49fc:	f7ff fcd2 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d4a00:	2301      	movs	r3, #1
   d4a02:	7023      	strb	r3, [r4, #0]
  thresholdTimeStamp = Time.minute();
   d4a04:	f001 fdb6 	bl	d6574 <_ZN9TimeClass6minuteEv>
  if (thresholdCrossAcknowledged == true)
   d4a08:	7823      	ldrb	r3, [r4, #0]
   d4a0a:	b133      	cbz	r3, d4a1a <_Z16ThresholdCrossedv+0xa6>
    lowerHumidityThresholdCrossed = false;
   d4a0c:	4a0c      	ldr	r2, [pc, #48]	; (d4a40 <_Z16ThresholdCrossedv+0xcc>)
    upperHumidityThresholdCrossed = false;
   d4a0e:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d4a10:	7013      	strb	r3, [r2, #0]
    upperHumidityThresholdCrossed = false;
   d4a12:	702b      	strb	r3, [r5, #0]
    upperTemperatureThreshold     = false;
   d4a14:	4b0d      	ldr	r3, [pc, #52]	; (d4a4c <_Z16ThresholdCrossedv+0xd8>)
   d4a16:	2200      	movs	r2, #0
   d4a18:	601a      	str	r2, [r3, #0]
}
   d4a1a:	2001      	movs	r0, #1
   d4a1c:	b00d      	add	sp, #52	; 0x34
   d4a1e:	bd30      	pop	{r4, r5, pc}
   d4a20:	2003e50d 	.word	0x2003e50d
   d4a24:	2003e598 	.word	0x2003e598
   d4a28:	2003e5b2 	.word	0x2003e5b2
   d4a2c:	2003e580 	.word	0x2003e580
   d4a30:	000d95e2 	.word	0x000d95e2
   d4a34:	2003e4b1 	.word	0x2003e4b1
   d4a38:	000d95fe 	.word	0x000d95fe
   d4a3c:	2003e599 	.word	0x2003e599
   d4a40:	2003e4f4 	.word	0x2003e4f4
   d4a44:	2003e528 	.word	0x2003e528
   d4a48:	000d960f 	.word	0x000d960f
   d4a4c:	2003e2bc 	.word	0x2003e2bc

000d4a50 <_Z14setVerboseMode6String>:
{
   d4a50:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a52:	4914      	ldr	r1, [pc, #80]	; (d4aa4 <_Z14setVerboseMode6String+0x54>)
   d4a54:	b085      	sub	sp, #20
   d4a56:	4605      	mov	r5, r0
   d4a58:	f001 fc67 	bl	d632a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4a5c:	4604      	mov	r4, r0
   d4a5e:	b190      	cbz	r0, d4a86 <_Z14setVerboseMode6String+0x36>
    verboseMode = true;
   d4a60:	4b11      	ldr	r3, [pc, #68]	; (d4aa8 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4a62:	4a12      	ldr	r2, [pc, #72]	; (d4aac <_Z14setVerboseMode6String+0x5c>)
    verboseMode = true;
   d4a64:	2401      	movs	r4, #1
   d4a66:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4a68:	2300      	movs	r3, #0
   d4a6a:	f88d 3000 	strb.w	r3, [sp]
   d4a6e:	4b10      	ldr	r3, [pc, #64]	; (d4ab0 <_Z14setVerboseMode6String+0x60>)
   d4a70:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4a72:	4910      	ldr	r1, [pc, #64]	; (d4ab4 <_Z14setVerboseMode6String+0x64>)
   d4a74:	a802      	add	r0, sp, #8
   d4a76:	f7ff fb55 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4a7a:	a803      	add	r0, sp, #12
   d4a7c:	f7ff fc92 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a80:	2001      	movs	r0, #1
}
   d4a82:	b005      	add	sp, #20
   d4a84:	bd30      	pop	{r4, r5, pc}
   d4a86:	490c      	ldr	r1, [pc, #48]	; (d4ab8 <_Z14setVerboseMode6String+0x68>)
   d4a88:	4628      	mov	r0, r5
   d4a8a:	f001 fc4e 	bl	d632a <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4a8e:	2800      	cmp	r0, #0
   d4a90:	d0f7      	beq.n	d4a82 <_Z14setVerboseMode6String+0x32>
    verboseMode = false;
   d4a92:	4b05      	ldr	r3, [pc, #20]	; (d4aa8 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4a94:	4a09      	ldr	r2, [pc, #36]	; (d4abc <_Z14setVerboseMode6String+0x6c>)
    verboseMode = false;
   d4a96:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4a98:	4b05      	ldr	r3, [pc, #20]	; (d4ab0 <_Z14setVerboseMode6String+0x60>)
   d4a9a:	f88d 4000 	strb.w	r4, [sp]
   d4a9e:	781b      	ldrb	r3, [r3, #0]
   d4aa0:	e7e7      	b.n	d4a72 <_Z14setVerboseMode6String+0x22>
   d4aa2:	bf00      	nop
   d4aa4:	000d9397 	.word	0x000d9397
   d4aa8:	2003e5cb 	.word	0x2003e5cb
   d4aac:	000d9628 	.word	0x000d9628
   d4ab0:	2003e4b1 	.word	0x2003e4b1
   d4ab4:	000d9649 	.word	0x000d9649
   d4ab8:	000d939b 	.word	0x000d939b
   d4abc:	000d9639 	.word	0x000d9639

000d4ac0 <_Z22publishStateTransitionv>:
{
   d4ac0:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4ac2:	4d16      	ldr	r5, [pc, #88]	; (d4b1c <_Z22publishStateTransitionv+0x5c>)
   d4ac4:	4c16      	ldr	r4, [pc, #88]	; (d4b20 <_Z22publishStateTransitionv+0x60>)
   d4ac6:	4917      	ldr	r1, [pc, #92]	; (d4b24 <_Z22publishStateTransitionv+0x64>)
   d4ac8:	782a      	ldrb	r2, [r5, #0]
   d4aca:	7820      	ldrb	r0, [r4, #0]
{
   d4acc:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4ace:	231a      	movs	r3, #26
   d4ad0:	fb03 1202 	mla	r2, r3, r2, r1
   d4ad4:	9200      	str	r2, [sp, #0]
   d4ad6:	fb03 1300 	mla	r3, r3, r0, r1
   d4ada:	4a13      	ldr	r2, [pc, #76]	; (d4b28 <_Z22publishStateTransitionv+0x68>)
   d4adc:	2128      	movs	r1, #40	; 0x28
   d4ade:	a804      	add	r0, sp, #16
   d4ae0:	f000 fd9a 	bl	d5618 <snprintf>
  oldState = state;
   d4ae4:	782b      	ldrb	r3, [r5, #0]
   d4ae6:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ae8:	f000 fcee 	bl	d54c8 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4aec:	b170      	cbz	r0, d4b0c <_Z22publishStateTransitionv+0x4c>
   d4aee:	f7ff fbc7 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4af2:	2300      	movs	r3, #0
   d4af4:	f88d 3000 	strb.w	r3, [sp]
   d4af8:	4b0c      	ldr	r3, [pc, #48]	; (d4b2c <_Z22publishStateTransitionv+0x6c>)
   d4afa:	490d      	ldr	r1, [pc, #52]	; (d4b30 <_Z22publishStateTransitionv+0x70>)
   d4afc:	781b      	ldrb	r3, [r3, #0]
   d4afe:	a802      	add	r0, sp, #8
   d4b00:	aa04      	add	r2, sp, #16
   d4b02:	f7ff fb0f 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b06:	a803      	add	r0, sp, #12
   d4b08:	f7ff fc4c 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.println(stateTransitionString);
   d4b0c:	f001 fe24 	bl	d6758 <_Z16_fetch_usbserialv>
   d4b10:	a904      	add	r1, sp, #16
   d4b12:	f001 fb4a 	bl	d61aa <_ZN5Print7printlnEPKc>
}
   d4b16:	b00f      	add	sp, #60	; 0x3c
   d4b18:	bd30      	pop	{r4, r5, pc}
   d4b1a:	bf00      	nop
   d4b1c:	2003e57c 	.word	0x2003e57c
   d4b20:	2003e526 	.word	0x2003e526
   d4b24:	2003e1ec 	.word	0x2003e1ec
   d4b28:	000d964e 	.word	0x000d964e
   d4b2c:	2003e4b1 	.word	0x2003e4b1
   d4b30:	000d965c 	.word	0x000d965c

000d4b34 <loop>:
{
   d4b34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
   d4b36:	4c71      	ldr	r4, [pc, #452]	; (d4cfc <loop+0x1c8>)
   d4b38:	7823      	ldrb	r3, [r4, #0]
   d4b3a:	3b01      	subs	r3, #1
   d4b3c:	2b05      	cmp	r3, #5
   d4b3e:	d820      	bhi.n	d4b82 <loop+0x4e>
   d4b40:	e8df f003 	tbb	[pc, r3]
   d4b44:	263803b1 	.word	0x263803b1
   d4b48:	8463      	.short	0x8463
    if (verboseMode && state != oldState) publishStateTransition();
   d4b4a:	4b6d      	ldr	r3, [pc, #436]	; (d4d00 <loop+0x1cc>)
   d4b4c:	781b      	ldrb	r3, [r3, #0]
   d4b4e:	b12b      	cbz	r3, d4b5c <loop+0x28>
   d4b50:	4b6c      	ldr	r3, [pc, #432]	; (d4d04 <loop+0x1d0>)
   d4b52:	781b      	ldrb	r3, [r3, #0]
   d4b54:	2b02      	cmp	r3, #2
   d4b56:	d001      	beq.n	d4b5c <loop+0x28>
   d4b58:	f7ff ffb2 	bl	d4ac0 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || (!(Time.now() % wakeBoundary))) {
   d4b5c:	f001 fcfe 	bl	d655c <_ZN9TimeClass4hourEv>
   d4b60:	4b69      	ldr	r3, [pc, #420]	; (d4d08 <loop+0x1d4>)
   d4b62:	681b      	ldr	r3, [r3, #0]
   d4b64:	4298      	cmp	r0, r3
   d4b66:	d002      	beq.n	d4b6e <loop+0x3a>
      state = MEASURING_STATE;                                                     
   d4b68:	2303      	movs	r3, #3
     state = IDLE_STATE;
   d4b6a:	7023      	strb	r3, [r4, #0]
   d4b6c:	e009      	b.n	d4b82 <loop+0x4e>
    if (Time.hour() != currentHourlyPeriod || (!(Time.now() % wakeBoundary))) {
   d4b6e:	f001 fce4 	bl	d653a <_ZN9TimeClass3nowEv>
   d4b72:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4b76:	fb90 f2f3 	sdiv	r2, r0, r3
   d4b7a:	fb02 0313 	mls	r3, r2, r3, r0
   d4b7e:	2b00      	cmp	r3, #0
   d4b80:	d0f2      	beq.n	d4b68 <loop+0x34>
  if (watchdogFlag) petWatchdog();                                                           // Watchdog flag is raised - time to pet the watchdog
   d4b82:	4b62      	ldr	r3, [pc, #392]	; (d4d0c <loop+0x1d8>)
   d4b84:	781b      	ldrb	r3, [r3, #0]
   d4b86:	b10b      	cbz	r3, d4b8c <loop+0x58>
   d4b88:	f7ff fb44 	bl	d4214 <_Z11petWatchdogv>
}
   d4b8c:	b004      	add	sp, #16
   d4b8e:	bd70      	pop	{r4, r5, r6, pc}
    if (verboseMode && state != oldState) publishStateTransition();
   d4b90:	4b5b      	ldr	r3, [pc, #364]	; (d4d00 <loop+0x1cc>)
   d4b92:	781b      	ldrb	r3, [r3, #0]
   d4b94:	b12b      	cbz	r3, d4ba2 <loop+0x6e>
   d4b96:	4b5b      	ldr	r3, [pc, #364]	; (d4d04 <loop+0x1d0>)
   d4b98:	781b      	ldrb	r3, [r3, #0]
   d4b9a:	2b04      	cmp	r3, #4
   d4b9c:	d001      	beq.n	d4ba2 <loop+0x6e>
   d4b9e:	f7ff ff8f 	bl	d4ac0 <_Z22publishStateTransitionv>
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4ba2:	f7ff fccd 	bl	d4540 <_Z16takeMeasurementsv>
   d4ba6:	b118      	cbz	r0, d4bb0 <loop+0x7c>
      ThresholdCrossed();
   d4ba8:	f7ff fee4 	bl	d4974 <_Z16ThresholdCrossedv>
     state = IDLE_STATE;
   d4bac:	2302      	movs	r3, #2
   d4bae:	e7dc      	b.n	d4b6a <loop+0x36>
      state= ERROR_STATE;
   d4bb0:	2301      	movs	r3, #1
   d4bb2:	e7da      	b.n	d4b6a <loop+0x36>
    if (verboseMode && state != oldState) publishStateTransition();
   d4bb4:	4e52      	ldr	r6, [pc, #328]	; (d4d00 <loop+0x1cc>)
   d4bb6:	7832      	ldrb	r2, [r6, #0]
   d4bb8:	b12a      	cbz	r2, d4bc6 <loop+0x92>
   d4bba:	4b52      	ldr	r3, [pc, #328]	; (d4d04 <loop+0x1d0>)
   d4bbc:	781b      	ldrb	r3, [r3, #0]
   d4bbe:	2b03      	cmp	r3, #3
   d4bc0:	d001      	beq.n	d4bc6 <loop+0x92>
   d4bc2:	f7ff ff7d 	bl	d4ac0 <_Z22publishStateTransitionv>
    currentHourlyPeriod = Time.hour();
   d4bc6:	f001 fcc9 	bl	d655c <_ZN9TimeClass4hourEv>
   d4bca:	4b4f      	ldr	r3, [pc, #316]	; (d4d08 <loop+0x1d4>)
   d4bcc:	6018      	str	r0, [r3, #0]
    if (!takeMeasurements())
   d4bce:	f7ff fcb7 	bl	d4540 <_Z16takeMeasurementsv>
   d4bd2:	4605      	mov	r5, r0
   d4bd4:	b9b8      	cbnz	r0, d4c06 <loop+0xd2>
      state = ERROR_STATE;
   d4bd6:	2301      	movs	r3, #1
   d4bd8:	7023      	strb	r3, [r4, #0]
   d4bda:	f000 fa95 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4bde:	4b4c      	ldr	r3, [pc, #304]	; (d4d10 <loop+0x1dc>)
   d4be0:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4be2:	7833      	ldrb	r3, [r6, #0]
   d4be4:	2b00      	cmp	r3, #0
   d4be6:	d0cc      	beq.n	d4b82 <loop+0x4e>
   d4be8:	f7ff fb4a 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4bec:	4b49      	ldr	r3, [pc, #292]	; (d4d14 <loop+0x1e0>)
   d4bee:	f88d 5000 	strb.w	r5, [sp]
   d4bf2:	a802      	add	r0, sp, #8
   d4bf4:	781b      	ldrb	r3, [r3, #0]
   d4bf6:	4a48      	ldr	r2, [pc, #288]	; (d4d18 <loop+0x1e4>)
   d4bf8:	4948      	ldr	r1, [pc, #288]	; (d4d1c <loop+0x1e8>)
   d4bfa:	f7ff fa93 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4bfe:	a803      	add	r0, sp, #12
   d4c00:	f7ff fbd0 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c04:	e7bd      	b.n	d4b82 <loop+0x4e>
    else state = REPORTING_STATE;
   d4c06:	2305      	movs	r3, #5
   d4c08:	e7af      	b.n	d4b6a <loop+0x36>
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4c0a:	4b3d      	ldr	r3, [pc, #244]	; (d4d00 <loop+0x1cc>)
   d4c0c:	781b      	ldrb	r3, [r3, #0]
   d4c0e:	b12b      	cbz	r3, d4c1c <loop+0xe8>
   d4c10:	4b3c      	ldr	r3, [pc, #240]	; (d4d04 <loop+0x1d0>)
   d4c12:	781b      	ldrb	r3, [r3, #0]
   d4c14:	2b05      	cmp	r3, #5
   d4c16:	d001      	beq.n	d4c1c <loop+0xe8>
   d4c18:	f7ff ff52 	bl	d4ac0 <_Z22publishStateTransitionv>
   d4c1c:	f000 fc54 	bl	d54c8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c20:	b168      	cbz	r0, d4c3e <loop+0x10a>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4c22:	f001 fc9b 	bl	d655c <_ZN9TimeClass4hourEv>
   d4c26:	280c      	cmp	r0, #12
   d4c28:	d105      	bne.n	d4c36 <loop+0x102>
   d4c2a:	f000 fc4d 	bl	d54c8 <spark_cloud_flag_connected>
        if (!connected()) {
   d4c2e:	b110      	cbz	r0, d4c36 <loop+0x102>
        return spark_sync_time(NULL);
   d4c30:	2000      	movs	r0, #0
   d4c32:	f000 fc69 	bl	d5508 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4c36:	f7ff fbcb 	bl	d43d0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4c3a:	2306      	movs	r3, #6
   d4c3c:	e795      	b.n	d4b6a <loop+0x36>
      state = ERROR_STATE;
   d4c3e:	2301      	movs	r3, #1
   d4c40:	7023      	strb	r3, [r4, #0]
   d4c42:	f000 fa61 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c46:	4b32      	ldr	r3, [pc, #200]	; (d4d10 <loop+0x1dc>)
   d4c48:	6018      	str	r0, [r3, #0]
   d4c4a:	e79a      	b.n	d4b82 <loop+0x4e>
    if (verboseMode && state != oldState) publishStateTransition();
   d4c4c:	4b2c      	ldr	r3, [pc, #176]	; (d4d00 <loop+0x1cc>)
   d4c4e:	781b      	ldrb	r3, [r3, #0]
   d4c50:	b12b      	cbz	r3, d4c5e <loop+0x12a>
   d4c52:	4b2c      	ldr	r3, [pc, #176]	; (d4d04 <loop+0x1d0>)
   d4c54:	781b      	ldrb	r3, [r3, #0]
   d4c56:	2b06      	cmp	r3, #6
   d4c58:	d001      	beq.n	d4c5e <loop+0x12a>
   d4c5a:	f7ff ff31 	bl	d4ac0 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4c5e:	4b30      	ldr	r3, [pc, #192]	; (d4d20 <loop+0x1ec>)
   d4c60:	781b      	ldrb	r3, [r3, #0]
   d4c62:	2b00      	cmp	r3, #0
   d4c64:	d0a2      	beq.n	d4bac <loop+0x78>
   d4c66:	f000 fa4f 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4c6a:	4b2e      	ldr	r3, [pc, #184]	; (d4d24 <loop+0x1f0>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	1ac0      	subs	r0, r0, r3
   d4c70:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4c74:	4298      	cmp	r0, r3
   d4c76:	d984      	bls.n	d4b82 <loop+0x4e>
   d4c78:	f000 fa46 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c7c:	4d24      	ldr	r5, [pc, #144]	; (d4d10 <loop+0x1dc>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4c7e:	4a2a      	ldr	r2, [pc, #168]	; (d4d28 <loop+0x1f4>)
      resetTimeStamp = millis();
   d4c80:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4c82:	2300      	movs	r3, #0
   d4c84:	f88d 3000 	strb.w	r3, [sp]
   d4c88:	4b22      	ldr	r3, [pc, #136]	; (d4d14 <loop+0x1e0>)
   d4c8a:	4928      	ldr	r1, [pc, #160]	; (d4d2c <loop+0x1f8>)
   d4c8c:	781b      	ldrb	r3, [r3, #0]
   d4c8e:	a802      	add	r0, sp, #8
   d4c90:	f7ff fa48 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c94:	a803      	add	r0, sp, #12
   d4c96:	f7ff fb85 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4c9a:	2301      	movs	r3, #1
   d4c9c:	7023      	strb	r3, [r4, #0]
   d4c9e:	f000 fa33 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ca2:	6028      	str	r0, [r5, #0]
   d4ca4:	e76d      	b.n	d4b82 <loop+0x4e>
    if (verboseMode && state != oldState) publishStateTransition();
   d4ca6:	4b16      	ldr	r3, [pc, #88]	; (d4d00 <loop+0x1cc>)
   d4ca8:	781b      	ldrb	r3, [r3, #0]
   d4caa:	b12b      	cbz	r3, d4cb8 <loop+0x184>
   d4cac:	4b15      	ldr	r3, [pc, #84]	; (d4d04 <loop+0x1d0>)
   d4cae:	781b      	ldrb	r3, [r3, #0]
   d4cb0:	2b01      	cmp	r3, #1
   d4cb2:	d001      	beq.n	d4cb8 <loop+0x184>
   d4cb4:	f7ff ff04 	bl	d4ac0 <_Z22publishStateTransitionv>
   d4cb8:	f000 fa26 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4cbc:	4b14      	ldr	r3, [pc, #80]	; (d4d10 <loop+0x1dc>)
   d4cbe:	681b      	ldr	r3, [r3, #0]
   d4cc0:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4cc4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4cc8:	4283      	cmp	r3, r0
   d4cca:	f4bf af5a 	bcs.w	d4b82 <loop+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4cce:	f000 fbfb 	bl	d54c8 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4cd2:	b160      	cbz	r0, d4cee <loop+0x1ba>
   d4cd4:	2300      	movs	r3, #0
   d4cd6:	f88d 3000 	strb.w	r3, [sp]
   d4cda:	4b0e      	ldr	r3, [pc, #56]	; (d4d14 <loop+0x1e0>)
   d4cdc:	4a14      	ldr	r2, [pc, #80]	; (d4d30 <loop+0x1fc>)
   d4cde:	781b      	ldrb	r3, [r3, #0]
   d4ce0:	490e      	ldr	r1, [pc, #56]	; (d4d1c <loop+0x1e8>)
   d4ce2:	a802      	add	r0, sp, #8
   d4ce4:	f7ff fa1e 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ce8:	a803      	add	r0, sp, #12
   d4cea:	f7ff fb5b 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d4cee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4cf2:	f000 fcb9 	bl	d5668 <delay>
      System.reset();
   d4cf6:	f001 fb65 	bl	d63c4 <_ZN11SystemClass5resetEv>
   d4cfa:	e742      	b.n	d4b82 <loop+0x4e>
   d4cfc:	2003e57c 	.word	0x2003e57c
   d4d00:	2003e5cb 	.word	0x2003e5cb
   d4d04:	2003e526 	.word	0x2003e526
   d4d08:	2003e4e0 	.word	0x2003e4e0
   d4d0c:	2003e5cc 	.word	0x2003e5cc
   d4d10:	2003e530 	.word	0x2003e530
   d4d14:	2003e4b1 	.word	0x2003e4b1
   d4d18:	000d966d 	.word	0x000d966d
   d4d1c:	000d945f 	.word	0x000d945f
   d4d20:	2003e1e0 	.word	0x2003e1e0
   d4d24:	2003e5d0 	.word	0x2003e5d0
   d4d28:	000d98cc 	.word	0x000d98cc
   d4d2c:	000d9687 	.word	0x000d9687
   d4d30:	000d96a0 	.word	0x000d96a0

000d4d34 <_Z17setUpperTempLimit6String>:
{
   d4d34:	b500      	push	{lr}
   d4d36:	b08b      	sub	sp, #44	; 0x2c
   d4d38:	9003      	str	r0, [sp, #12]
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d4d3a:	f001 fb21 	bl	d6380 <_ZNK6String7toFloatEv>
   d4d3e:	4b0f      	ldr	r3, [pc, #60]	; (d4d7c <_Z17setUpperTempLimit6String+0x48>)
   d4d40:	ed83 0a08 	vstr	s0, [r3, #32]
   d4d44:	f7ff fa9c 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4d48:	9903      	ldr	r1, [sp, #12]
   d4d4a:	a806      	add	r0, sp, #24
   d4d4c:	f001 fae2 	bl	d6314 <_ZN6StringC1ERKS_>
   d4d50:	2300      	movs	r3, #0
   d4d52:	f88d 3000 	strb.w	r3, [sp]
   d4d56:	4b0a      	ldr	r3, [pc, #40]	; (d4d80 <_Z17setUpperTempLimit6String+0x4c>)
   d4d58:	9a06      	ldr	r2, [sp, #24]
   d4d5a:	781b      	ldrb	r3, [r3, #0]
   d4d5c:	4909      	ldr	r1, [pc, #36]	; (d4d84 <_Z17setUpperTempLimit6String+0x50>)
   d4d5e:	a804      	add	r0, sp, #16
   d4d60:	f7ff f9e0 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d64:	a805      	add	r0, sp, #20
   d4d66:	f7ff fb1d 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d6a:	a806      	add	r0, sp, #24
   d4d6c:	f001 fa64 	bl	d6238 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4d70:	f7ff fa92 	bl	d4298 <_Z20updateThresholdValuev>
}
   d4d74:	2001      	movs	r0, #1
   d4d76:	b00b      	add	sp, #44	; 0x2c
   d4d78:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d7c:	2003e538 	.word	0x2003e538
   d4d80:	2003e4b1 	.word	0x2003e4b1
   d4d84:	000d96b4 	.word	0x000d96b4

000d4d88 <_Z17setLowerTempLimit6String>:
{
   d4d88:	b500      	push	{lr}
   d4d8a:	b08b      	sub	sp, #44	; 0x2c
   d4d8c:	9003      	str	r0, [sp, #12]
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d4d8e:	f001 faf7 	bl	d6380 <_ZNK6String7toFloatEv>
   d4d92:	4b0f      	ldr	r3, [pc, #60]	; (d4dd0 <_Z17setLowerTempLimit6String+0x48>)
   d4d94:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
   d4d98:	f7ff fa72 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4d9c:	9903      	ldr	r1, [sp, #12]
   d4d9e:	a806      	add	r0, sp, #24
   d4da0:	f001 fab8 	bl	d6314 <_ZN6StringC1ERKS_>
   d4da4:	2300      	movs	r3, #0
   d4da6:	f88d 3000 	strb.w	r3, [sp]
   d4daa:	4b0a      	ldr	r3, [pc, #40]	; (d4dd4 <_Z17setLowerTempLimit6String+0x4c>)
   d4dac:	9a06      	ldr	r2, [sp, #24]
   d4dae:	781b      	ldrb	r3, [r3, #0]
   d4db0:	4909      	ldr	r1, [pc, #36]	; (d4dd8 <_Z17setLowerTempLimit6String+0x50>)
   d4db2:	a804      	add	r0, sp, #16
   d4db4:	f7ff f9b6 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4db8:	a805      	add	r0, sp, #20
   d4dba:	f7ff faf3 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dbe:	a806      	add	r0, sp, #24
   d4dc0:	f001 fa3a 	bl	d6238 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4dc4:	f7ff fa68 	bl	d4298 <_Z20updateThresholdValuev>
}
   d4dc8:	2001      	movs	r0, #1
   d4dca:	b00b      	add	sp, #44	; 0x2c
   d4dcc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4dd0:	2003e538 	.word	0x2003e538
   d4dd4:	2003e4b1 	.word	0x2003e4b1
   d4dd8:	000d96c8 	.word	0x000d96c8

000d4ddc <_Z21setUpperHumidityLimit6String>:
{
   d4ddc:	b500      	push	{lr}
   d4dde:	b08b      	sub	sp, #44	; 0x2c
   d4de0:	9003      	str	r0, [sp, #12]
  sensor_data.upperHumidityThreshold = value.toFloat();
   d4de2:	f001 facd 	bl	d6380 <_ZNK6String7toFloatEv>
   d4de6:	4b0f      	ldr	r3, [pc, #60]	; (d4e24 <_Z21setUpperHumidityLimit6String+0x48>)
   d4de8:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
   d4dec:	f7ff fa48 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4df0:	9903      	ldr	r1, [sp, #12]
   d4df2:	a806      	add	r0, sp, #24
   d4df4:	f001 fa8e 	bl	d6314 <_ZN6StringC1ERKS_>
   d4df8:	2300      	movs	r3, #0
   d4dfa:	f88d 3000 	strb.w	r3, [sp]
   d4dfe:	4b0a      	ldr	r3, [pc, #40]	; (d4e28 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4e00:	9a06      	ldr	r2, [sp, #24]
   d4e02:	781b      	ldrb	r3, [r3, #0]
   d4e04:	4909      	ldr	r1, [pc, #36]	; (d4e2c <_Z21setUpperHumidityLimit6String+0x50>)
   d4e06:	a804      	add	r0, sp, #16
   d4e08:	f7ff f98c 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4e0c:	a805      	add	r0, sp, #20
   d4e0e:	f7ff fac9 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e12:	a806      	add	r0, sp, #24
   d4e14:	f001 fa10 	bl	d6238 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4e18:	f7ff fa3e 	bl	d4298 <_Z20updateThresholdValuev>
}
   d4e1c:	2001      	movs	r0, #1
   d4e1e:	b00b      	add	sp, #44	; 0x2c
   d4e20:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e24:	2003e538 	.word	0x2003e538
   d4e28:	2003e4b1 	.word	0x2003e4b1
   d4e2c:	000d96b4 	.word	0x000d96b4

000d4e30 <_Z21setLowerHumidityLimit6String>:
{
   d4e30:	b500      	push	{lr}
   d4e32:	b08b      	sub	sp, #44	; 0x2c
   d4e34:	9003      	str	r0, [sp, #12]
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4e36:	f001 faa3 	bl	d6380 <_ZNK6String7toFloatEv>
   d4e3a:	4b0f      	ldr	r3, [pc, #60]	; (d4e78 <_Z21setLowerHumidityLimit6String+0x48>)
   d4e3c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
   d4e40:	f7ff fa1e 	bl	d4280 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4e44:	9903      	ldr	r1, [sp, #12]
   d4e46:	a806      	add	r0, sp, #24
   d4e48:	f001 fa64 	bl	d6314 <_ZN6StringC1ERKS_>
   d4e4c:	2300      	movs	r3, #0
   d4e4e:	f88d 3000 	strb.w	r3, [sp]
   d4e52:	4b0a      	ldr	r3, [pc, #40]	; (d4e7c <_Z21setLowerHumidityLimit6String+0x4c>)
   d4e54:	9a06      	ldr	r2, [sp, #24]
   d4e56:	781b      	ldrb	r3, [r3, #0]
   d4e58:	4909      	ldr	r1, [pc, #36]	; (d4e80 <_Z21setLowerHumidityLimit6String+0x50>)
   d4e5a:	a804      	add	r0, sp, #16
   d4e5c:	f7ff f962 	bl	d4124 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4e60:	a805      	add	r0, sp, #20
   d4e62:	f7ff fa9f 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e66:	a806      	add	r0, sp, #24
   d4e68:	f001 f9e6 	bl	d6238 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4e6c:	f7ff fa14 	bl	d4298 <_Z20updateThresholdValuev>
}
   d4e70:	2001      	movs	r0, #1
   d4e72:	b00b      	add	sp, #44	; 0x2c
   d4e74:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e78:	2003e538 	.word	0x2003e538
   d4e7c:	2003e4b1 	.word	0x2003e4b1
   d4e80:	000d96c8 	.word	0x000d96c8

000d4e84 <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d4e84:	4b18      	ldr	r3, [pc, #96]	; (d4ee8 <_GLOBAL__sub_I___appProductID+0x64>)
}
   d4e86:	b570      	push	{r4, r5, r6, lr}
   d4e88:	2400      	movs	r4, #0
   d4e8a:	701c      	strb	r4, [r3, #0]
   d4e8c:	4b17      	ldr	r3, [pc, #92]	; (d4eec <_GLOBAL__sub_I___appProductID+0x68>)
              error_(SYSTEM_ERROR_NONE) {
   d4e8e:	4d18      	ldr	r5, [pc, #96]	; (d4ef0 <_GLOBAL__sub_I___appProductID+0x6c>)
   d4e90:	2601      	movs	r6, #1
   d4e92:	701e      	strb	r6, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4e94:	f001 fd1c 	bl	d68d0 <spark_protocol_instance>
   d4e98:	4623      	mov	r3, r4
   d4e9a:	4622      	mov	r2, r4
   d4e9c:	f243 0171 	movw	r1, #12401	; 0x3071
   d4ea0:	f001 fd1e 	bl	d68e0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4ea4:	f001 fd14 	bl	d68d0 <spark_protocol_instance>
   d4ea8:	4622      	mov	r2, r4
   d4eaa:	4623      	mov	r3, r4
   d4eac:	2108      	movs	r1, #8
   d4eae:	f001 fd1f 	bl	d68f0 <spark_protocol_set_product_firmware_version>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4eb2:	4810      	ldr	r0, [pc, #64]	; (d4ef4 <_GLOBAL__sub_I___appProductID+0x70>)
   d4eb4:	f000 f82a 	bl	d4f0c <_ZN14Adafruit_SHT31C1Ev>
    SleepResult() {}
   d4eb8:	4b0f      	ldr	r3, [pc, #60]	; (d4ef8 <_GLOBAL__sub_I___appProductID+0x74>)
   d4eba:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
   d4ebc:	4630      	mov	r0, r6
              error_(SYSTEM_ERROR_NONE) {
   d4ebe:	602c      	str	r4, [r5, #0]
   d4ec0:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4ec2:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4ec4:	f000 fa9a 	bl	d53fc <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4ec8:	4a0c      	ldr	r2, [pc, #48]	; (d4efc <_GLOBAL__sub_I___appProductID+0x78>)
   d4eca:	490d      	ldr	r1, [pc, #52]	; (d4f00 <_GLOBAL__sub_I___appProductID+0x7c>)
   d4ecc:	4628      	mov	r0, r5
   d4ece:	f001 fdd5 	bl	d6a7c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4ed2:	4621      	mov	r1, r4
   d4ed4:	4630      	mov	r0, r6
   d4ed6:	f000 faa1 	bl	d541c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4eda:	4631      	mov	r1, r6
   d4edc:	2004      	movs	r0, #4
}
   d4ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4ee2:	f000 b8f9 	b.w	d50d8 <HAL_Feature_Set>
   d4ee6:	bf00      	nop
   d4ee8:	2003e4b0 	.word	0x2003e4b0
   d4eec:	2003e4b1 	.word	0x2003e4b1
   d4ef0:	2003e4a4 	.word	0x2003e4a4
   d4ef4:	2003e570 	.word	0x2003e570
   d4ef8:	ffff0000 	.word	0xffff0000
   d4efc:	2003e498 	.word	0x2003e498
   d4f00:	000d410d 	.word	0x000d410d

000d4f04 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4f04:	6803      	ldr	r3, [r0, #0]
   d4f06:	b2c9      	uxtb	r1, r1
   d4f08:	689b      	ldr	r3, [r3, #8]
   d4f0a:	4718      	bx	r3

000d4f0c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4f0c:	4770      	bx	lr

000d4f0e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4f0e:	b538      	push	{r3, r4, r5, lr}
   d4f10:	4605      	mov	r5, r0
   d4f12:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4f14:	f001 fd8a 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4f18:	7829      	ldrb	r1, [r5, #0]
   d4f1a:	f000 ffb7 	bl	d5e8c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4f1e:	f001 fd85 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4f22:	0a21      	lsrs	r1, r4, #8
   d4f24:	f7ff ffee 	bl	d4f04 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4f28:	f001 fd80 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4f2c:	b2e1      	uxtb	r1, r4
   d4f2e:	f7ff ffe9 	bl	d4f04 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4f32:	f001 fd7b 	bl	d6a2c <_Z19__fetch_global_Wirev>
}
   d4f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d4f3a:	f000 bfaf 	b.w	d5e9c <_ZN7TwoWire15endTransmissionEv>

000d4f3e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d4f3e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4f40:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4f44:	f7ff ffe3 	bl	d4f0e <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d4f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d4f4c:	200a      	movs	r0, #10
   d4f4e:	f000 bb8b 	b.w	d5668 <delay>

000d4f52 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4f52:	b538      	push	{r3, r4, r5, lr}
   d4f54:	4604      	mov	r4, r0
   d4f56:	460d      	mov	r5, r1
  Wire.begin();
   d4f58:	f001 fd68 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4f5c:	f000 ff64 	bl	d5e28 <_ZN7TwoWire5beginEv>
  reset();
   d4f60:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d4f62:	7025      	strb	r5, [r4, #0]
  reset();
   d4f64:	f7ff ffeb 	bl	d4f3e <_ZN14Adafruit_SHT315resetEv>
}
   d4f68:	2001      	movs	r0, #1
   d4f6a:	bd38      	pop	{r3, r4, r5, pc}

000d4f6c <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d4f6c:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d4f6e:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d4f70:	4291      	cmp	r1, r2
   d4f72:	d00e      	beq.n	d4f92 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4f74:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4f78:	4058      	eors	r0, r3
   d4f7a:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d4f7c:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4f80:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d4f84:	bf18      	it	ne
   d4f86:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d4f8a:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d4f8c:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d4f8e:	d1f5      	bne.n	d4f7c <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4f90:	e7ee      	b.n	d4f70 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d4f92:	4770      	bx	lr
   d4f94:	0000      	movs	r0, r0
	...

000d4f98 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d4f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d4f9a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d4f9e:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d4fa0:	f7ff ffb5 	bl	d4f0e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d4fa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4fa8:	f000 fb5e 	bl	d5668 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4fac:	f001 fd3e 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4fb0:	7829      	ldrb	r1, [r5, #0]
   d4fb2:	2206      	movs	r2, #6
   d4fb4:	f000 ff67 	bl	d5e86 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4fb8:	f001 fd38 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4fbc:	6803      	ldr	r3, [r0, #0]
   d4fbe:	691b      	ldr	r3, [r3, #16]
   d4fc0:	4798      	blx	r3
   d4fc2:	2806      	cmp	r0, #6
   d4fc4:	d14b      	bne.n	d505e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d4fc6:	466e      	mov	r6, sp
   d4fc8:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d4fca:	f001 fd2f 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d4fce:	6803      	ldr	r3, [r0, #0]
   d4fd0:	695b      	ldr	r3, [r3, #20]
   d4fd2:	4798      	blx	r3
   d4fd4:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d4fd6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d4fda:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d4fde:	4669      	mov	r1, sp
   d4fe0:	d1f3      	bne.n	d4fca <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4fe2:	2202      	movs	r2, #2
   d4fe4:	4628      	mov	r0, r5
   d4fe6:	f7ff ffc1 	bl	d4f6c <_ZN14Adafruit_SHT314crc8EPKhi>
   d4fea:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d4fee:	4286      	cmp	r6, r0
   d4ff0:	d135      	bne.n	d505e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4ff2:	2202      	movs	r2, #2
   d4ff4:	f10d 0103 	add.w	r1, sp, #3
   d4ff8:	4628      	mov	r0, r5
   d4ffa:	f7ff ffb7 	bl	d4f6c <_ZN14Adafruit_SHT314crc8EPKhi>
   d4ffe:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d5002:	4286      	cmp	r6, r0
   d5004:	d12b      	bne.n	d505e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d5006:	f8bd 0000 	ldrh.w	r0, [sp]
   d500a:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d500e:	ba40      	rev16	r0, r0
   d5010:	b280      	uxth	r0, r0
   d5012:	f001 fe81 	bl	d6d18 <__aeabi_ui2d>
  stemp *= 175;
   d5016:	a318      	add	r3, pc, #96	; (adr r3, d5078 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5018:	e9d3 2300 	ldrd	r2, r3, [r3]
   d501c:	f001 fef6 	bl	d6e0c <__aeabi_dmul>
  stemp /= 0xffff;
   d5020:	a311      	add	r3, pc, #68	; (adr r3, d5068 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5022:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5026:	f002 f81b 	bl	d7060 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d502a:	4b11      	ldr	r3, [pc, #68]	; (d5070 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d502c:	2200      	movs	r2, #0
   d502e:	f001 fd35 	bl	d6a9c <__aeabi_dsub>
  temp = stemp;
   d5032:	f002 f9a5 	bl	d7380 <__aeabi_d2f>
   d5036:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d5038:	ba60      	rev16	r0, r4
   d503a:	b280      	uxth	r0, r0
   d503c:	f001 fe6c 	bl	d6d18 <__aeabi_ui2d>
  shum *= 100;
   d5040:	4b0c      	ldr	r3, [pc, #48]	; (d5074 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5042:	2200      	movs	r2, #0
   d5044:	f001 fee2 	bl	d6e0c <__aeabi_dmul>
  shum /= 0xFFFF;
   d5048:	a307      	add	r3, pc, #28	; (adr r3, d5068 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d504a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d504e:	f002 f807 	bl	d7060 <__aeabi_ddiv>
  humidity = shum;
   d5052:	f002 f995 	bl	d7380 <__aeabi_d2f>
   d5056:	6068      	str	r0, [r5, #4]
  return true;
   d5058:	2001      	movs	r0, #1
}
   d505a:	b002      	add	sp, #8
   d505c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d505e:	2000      	movs	r0, #0
   d5060:	e7fb      	b.n	d505a <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d5062:	bf00      	nop
   d5064:	f3af 8000 	nop.w
   d5068:	00000000 	.word	0x00000000
   d506c:	40efffe0 	.word	0x40efffe0
   d5070:	40468000 	.word	0x40468000
   d5074:	40590000 	.word	0x40590000
   d5078:	00000000 	.word	0x00000000
   d507c:	4065e000 	.word	0x4065e000

000d5080 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d5080:	b510      	push	{r4, lr}
   d5082:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5084:	f7ff ff88 	bl	d4f98 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5088:	b110      	cbz	r0, d5090 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d508a:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d508e:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d5090:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5098 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d5094:	e7fb      	b.n	d508e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d5096:	bf00      	nop
   d5098:	7fc00000 	.word	0x7fc00000

000d509c <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d509c:	b510      	push	{r4, lr}
   d509e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d50a0:	f7ff ff7a 	bl	d4f98 <_ZN14Adafruit_SHT3111readTempHumEv>
   d50a4:	b110      	cbz	r0, d50ac <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d50a6:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d50aa:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d50ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; d50b4 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d50b0:	e7fb      	b.n	d50aa <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d50b2:	bf00      	nop
   d50b4:	7fc00000 	.word	0x7fc00000

000d50b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <os_mutex_recursive_create+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	00030248 	.word	0x00030248

000d50c8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <os_mutex_recursive_destroy+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	00030248 	.word	0x00030248

000d50d8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <HAL_Feature_Set+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030234 	.word	0x00030234

000d50e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <HAL_RNG_GetRandomNumber+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	685b      	ldr	r3, [r3, #4]
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030218 	.word	0x00030218

000d50f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <HAL_Delay_Microseconds+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	68db      	ldr	r3, [r3, #12]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	00030218 	.word	0x00030218

000d5108 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	695b      	ldr	r3, [r3, #20]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	00030218 	.word	0x00030218

000d5118 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <HAL_EEPROM_Init+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	00030218 	.word	0x00030218

000d5128 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <HAL_EEPROM_Write+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	00030218 	.word	0x00030218

000d5138 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <HAL_EEPROM_Get+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030218 	.word	0x00030218

000d5148 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <HAL_EEPROM_Put+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030218 	.word	0x00030218

000d5158 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <hal_rtc_time_is_valid+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	00030218 	.word	0x00030218

000d5168 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <hal_rtc_get_time+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030218 	.word	0x00030218

000d5178 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <HAL_Pin_Map+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	681b      	ldr	r3, [r3, #0]
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	0003022c 	.word	0x0003022c

000d5188 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <HAL_Pin_Mode+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	689b      	ldr	r3, [r3, #8]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	0003022c 	.word	0x0003022c

000d5198 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <HAL_Get_Pin_Mode+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	68db      	ldr	r3, [r3, #12]
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	0003022c 	.word	0x0003022c

000d51a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <HAL_GPIO_Write+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	691b      	ldr	r3, [r3, #16]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	0003022c 	.word	0x0003022c

000d51b8 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <HAL_Interrupts_Attach+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	699b      	ldr	r3, [r3, #24]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	0003022c 	.word	0x0003022c

000d51c8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <HAL_Interrupts_Detach+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	69db      	ldr	r3, [r3, #28]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	0003022c 	.word	0x0003022c

000d51d8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <hal_i2c_begin+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	68db      	ldr	r3, [r3, #12]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	00030228 	.word	0x00030228

000d51e8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <hal_i2c_begin_transmission+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	699b      	ldr	r3, [r3, #24]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	00030228 	.word	0x00030228

000d51f8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <hal_i2c_end_transmission+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	69db      	ldr	r3, [r3, #28]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030228 	.word	0x00030228

000d5208 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <hal_i2c_write+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	6a1b      	ldr	r3, [r3, #32]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030228 	.word	0x00030228

000d5218 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <hal_i2c_available+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030228 	.word	0x00030228

000d5228 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <hal_i2c_read+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030228 	.word	0x00030228

000d5238 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <hal_i2c_peek+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030228 	.word	0x00030228

000d5248 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <hal_i2c_flush+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030228 	.word	0x00030228

000d5258 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <hal_i2c_is_enabled+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030228 	.word	0x00030228

000d5268 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <hal_i2c_init+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030228 	.word	0x00030228

000d5278 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <hal_i2c_request_ex+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030228 	.word	0x00030228

000d5288 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <inet_inet_ntop+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	695b      	ldr	r3, [r3, #20]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030264 	.word	0x00030264

000d5298 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <netdb_freeaddrinfo+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	689b      	ldr	r3, [r3, #8]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030268 	.word	0x00030268

000d52a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <netdb_getaddrinfo+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	68db      	ldr	r3, [r3, #12]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030268 	.word	0x00030268

000d52b8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <hal_spi_init+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	69db      	ldr	r3, [r3, #28]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030230 	.word	0x00030230

000d52c8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <hal_spi_is_enabled+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6a1b      	ldr	r3, [r3, #32]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030230 	.word	0x00030230

000d52d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <hal_usart_init+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	681b      	ldr	r3, [r3, #0]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	0003023c 	.word	0x0003023c

000d52e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <hal_usart_write+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	68db      	ldr	r3, [r3, #12]
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	0003023c 	.word	0x0003023c

000d52f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <hal_usart_available+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	691b      	ldr	r3, [r3, #16]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	0003023c 	.word	0x0003023c

000d5308 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <hal_usart_read+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	695b      	ldr	r3, [r3, #20]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	0003023c 	.word	0x0003023c

000d5318 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <hal_usart_peek+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	699b      	ldr	r3, [r3, #24]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	0003023c 	.word	0x0003023c

000d5328 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <hal_usart_flush+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	69db      	ldr	r3, [r3, #28]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	0003023c 	.word	0x0003023c

000d5338 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <hal_usart_is_enabled+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6a1b      	ldr	r3, [r3, #32]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	0003023c 	.word	0x0003023c

000d5348 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <hal_usart_available_data_for_write+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	0003023c 	.word	0x0003023c

000d5358 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_USB_USART_Init+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	681b      	ldr	r3, [r3, #0]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	0003024c 	.word	0x0003024c

000d5368 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_USB_USART_Begin+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	685b      	ldr	r3, [r3, #4]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	0003024c 	.word	0x0003024c

000d5378 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_USB_USART_Available_Data+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	691b      	ldr	r3, [r3, #16]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003024c 	.word	0x0003024c

000d5388 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	695b      	ldr	r3, [r3, #20]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003024c 	.word	0x0003024c

000d5398 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_USB_USART_Receive_Data+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	699b      	ldr	r3, [r3, #24]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003024c 	.word	0x0003024c

000d53a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_USB_USART_Send_Data+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	69db      	ldr	r3, [r3, #28]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003024c 	.word	0x0003024c

000d53b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_USB_USART_Flush_Data+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	6a1b      	ldr	r3, [r3, #32]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003024c 	.word	0x0003024c

000d53c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <panic_+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030260 	.word	0x00030260

000d53d8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b03      	ldr	r3, [pc, #12]	; (d53e8 <diag_get_source+0x10>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d53e2:	9301      	str	r3, [sp, #4]
   d53e4:	bd08      	pop	{r3, pc}
   d53e6:	0000      	.short	0x0000
   d53e8:	00030260 	.word	0x00030260

000d53ec <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <system_mode+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	681b      	ldr	r3, [r3, #0]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030220 	.word	0x00030220

000d53fc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <set_system_mode+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	685b      	ldr	r3, [r3, #4]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030220 	.word	0x00030220

000d540c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <system_delay_ms+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	695b      	ldr	r3, [r3, #20]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030220 	.word	0x00030220

000d541c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <system_thread_set_state+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030220 	.word	0x00030220

000d542c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <application_thread_current+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030220 	.word	0x00030220

000d543c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <application_thread_invoke+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030220 	.word	0x00030220

000d544c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <system_thread_get_state+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030220 	.word	0x00030220

000d545c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b03      	ldr	r3, [pc, #12]	; (d546c <system_ctrl_set_app_request_handler+0x10>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5466:	9301      	str	r3, [sp, #4]
   d5468:	bd08      	pop	{r3, pc}
   d546a:	0000      	.short	0x0000
   d546c:	00030220 	.word	0x00030220

000d5470 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b03      	ldr	r3, [pc, #12]	; (d5480 <system_ctrl_set_result+0x10>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d547a:	9301      	str	r3, [sp, #4]
   d547c:	bd08      	pop	{r3, pc}
   d547e:	0000      	.short	0x0000
   d5480:	00030220 	.word	0x00030220

000d5484 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b03      	ldr	r3, [pc, #12]	; (d5494 <system_reset+0x10>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d548e:	9301      	str	r3, [sp, #4]
   d5490:	bd08      	pop	{r3, pc}
   d5492:	0000      	.short	0x0000
   d5494:	00030220 	.word	0x00030220

000d5498 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <spark_variable+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	681b      	ldr	r3, [r3, #0]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030244 	.word	0x00030244

000d54a8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <spark_function+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	685b      	ldr	r3, [r3, #4]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030244 	.word	0x00030244

000d54b8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <spark_process+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	689b      	ldr	r3, [r3, #8]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030244 	.word	0x00030244

000d54c8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <spark_cloud_flag_connected+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	695b      	ldr	r3, [r3, #20]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030244 	.word	0x00030244

000d54d8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <spark_deviceID+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	69db      	ldr	r3, [r3, #28]
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030244 	.word	0x00030244

000d54e8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <spark_send_event+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6a1b      	ldr	r3, [r3, #32]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030244 	.word	0x00030244

000d54f8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <spark_subscribe+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030244 	.word	0x00030244

000d5508 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <spark_sync_time+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030244 	.word	0x00030244

000d5518 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <spark_sync_time_pending+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030244 	.word	0x00030244

000d5528 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <spark_set_random_seed_from_cloud_handler+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030244 	.word	0x00030244

000d5538 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <network_connect+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	685b      	ldr	r3, [r3, #4]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030240 	.word	0x00030240

000d5548 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <network_connecting+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	689b      	ldr	r3, [r3, #8]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030240 	.word	0x00030240

000d5558 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <network_disconnect+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	68db      	ldr	r3, [r3, #12]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	00030240 	.word	0x00030240

000d5568 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <network_ready+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	691b      	ldr	r3, [r3, #16]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030240 	.word	0x00030240

000d5578 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <network_on+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	695b      	ldr	r3, [r3, #20]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030240 	.word	0x00030240

000d5588 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <network_off+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	699b      	ldr	r3, [r3, #24]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030240 	.word	0x00030240

000d5598 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <network_listen+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030240 	.word	0x00030240

000d55a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <network_listening+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6a1b      	ldr	r3, [r3, #32]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030240 	.word	0x00030240

000d55b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <network_set_listen_timeout+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030240 	.word	0x00030240

000d55c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <network_get_listen_timeout+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030240 	.word	0x00030240

000d55d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <malloc+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	681b      	ldr	r3, [r3, #0]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	0003021c 	.word	0x0003021c

000d55e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <free+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	685b      	ldr	r3, [r3, #4]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	0003021c 	.word	0x0003021c

000d55f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <realloc+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	689b      	ldr	r3, [r3, #8]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	0003021c 	.word	0x0003021c

000d5608 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <siprintf+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	691b      	ldr	r3, [r3, #16]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	0003021c 	.word	0x0003021c

000d5618 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <snprintf+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	69db      	ldr	r3, [r3, #28]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003021c 	.word	0x0003021c

000d5628 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <abort+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	0003021c 	.word	0x0003021c

000d5638 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <_malloc_r+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	0003021c 	.word	0x0003021c

000d5648 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <newlib_impure_ptr_callback+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	0003021c 	.word	0x0003021c

000d5658 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <localtime_r+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	0003021c 	.word	0x0003021c

000d5668 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5668:	2100      	movs	r1, #0
   d566a:	f7ff becf 	b.w	d540c <system_delay_ms>

000d566e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d566e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5670:	6883      	ldr	r3, [r0, #8]
   d5672:	4604      	mov	r4, r0
   d5674:	b90b      	cbnz	r3, d567a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5676:	f001 fa0a 	bl	d6a8e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d567a:	68c3      	ldr	r3, [r0, #12]
   d567c:	4798      	blx	r3
      if (_M_manager)
   d567e:	68a3      	ldr	r3, [r4, #8]
   d5680:	b11b      	cbz	r3, d568a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5682:	2203      	movs	r2, #3
   d5684:	4621      	mov	r1, r4
   d5686:	4620      	mov	r0, r4
   d5688:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d568a:	4620      	mov	r0, r4
   d568c:	2110      	movs	r1, #16
}
   d568e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5692:	f001 b9f8 	b.w	d6a86 <_ZdlPvj>

000d5696 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5696:	b510      	push	{r4, lr}
   d5698:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d569a:	6800      	ldr	r0, [r0, #0]
   d569c:	b108      	cbz	r0, d56a2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d569e:	f7ff fd13 	bl	d50c8 <os_mutex_recursive_destroy>
    }
   d56a2:	4620      	mov	r0, r4
   d56a4:	bd10      	pop	{r4, pc}

000d56a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d56a6:	680b      	ldr	r3, [r1, #0]
   d56a8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d56aa:	b113      	cbz	r3, d56b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d56ac:	685a      	ldr	r2, [r3, #4]
   d56ae:	3201      	adds	r2, #1
   d56b0:	605a      	str	r2, [r3, #4]
      }
   d56b2:	4770      	bx	lr

000d56b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d56b4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d56b6:	4c06      	ldr	r4, [pc, #24]	; (d56d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d56b8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d56ba:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d56bc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d56be:	f7ff fcfb 	bl	d50b8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d56c2:	4620      	mov	r0, r4
   d56c4:	4a03      	ldr	r2, [pc, #12]	; (d56d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d56c6:	4904      	ldr	r1, [pc, #16]	; (d56d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d56c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d56cc:	f001 b9d6 	b.w	d6a7c <__aeabi_atexit>
   d56d0:	2003e5d4 	.word	0x2003e5d4
   d56d4:	2003e498 	.word	0x2003e498
   d56d8:	000d5697 	.word	0x000d5697

000d56dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d56dc:	2200      	movs	r2, #0
   d56de:	6840      	ldr	r0, [r0, #4]
   d56e0:	4611      	mov	r1, r2
   d56e2:	f7ff bf41 	b.w	d5568 <network_ready>

000d56e6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d56e6:	2200      	movs	r2, #0
   d56e8:	6840      	ldr	r0, [r0, #4]
   d56ea:	4611      	mov	r1, r2
   d56ec:	f7ff bf5c 	b.w	d55a8 <network_listening>

000d56f0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d56f0:	2200      	movs	r2, #0
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	4611      	mov	r1, r2
   d56f6:	f7ff bf67 	b.w	d55c8 <network_get_listen_timeout>

000d56fa <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d56fa:	6840      	ldr	r0, [r0, #4]
   d56fc:	2200      	movs	r2, #0
   d56fe:	f7ff bf5b 	b.w	d55b8 <network_set_listen_timeout>

000d5702 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5702:	6840      	ldr	r0, [r0, #4]
   d5704:	2200      	movs	r2, #0
   d5706:	f081 0101 	eor.w	r1, r1, #1
   d570a:	f7ff bf45 	b.w	d5598 <network_listen>

000d570e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d570e:	2300      	movs	r3, #0
   d5710:	6840      	ldr	r0, [r0, #4]
   d5712:	461a      	mov	r2, r3
   d5714:	4619      	mov	r1, r3
   d5716:	f7ff bf37 	b.w	d5588 <network_off>

000d571a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d571a:	2300      	movs	r3, #0
   d571c:	6840      	ldr	r0, [r0, #4]
   d571e:	461a      	mov	r2, r3
   d5720:	4619      	mov	r1, r3
   d5722:	f7ff bf29 	b.w	d5578 <network_on>

000d5726 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5726:	2200      	movs	r2, #0
   d5728:	6840      	ldr	r0, [r0, #4]
   d572a:	4611      	mov	r1, r2
   d572c:	f7ff bf0c 	b.w	d5548 <network_connecting>

000d5730 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5730:	6840      	ldr	r0, [r0, #4]
   d5732:	2200      	movs	r2, #0
   d5734:	2102      	movs	r1, #2
   d5736:	f7ff bf0f 	b.w	d5558 <network_disconnect>

000d573a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d573a:	2300      	movs	r3, #0
   d573c:	6840      	ldr	r0, [r0, #4]
   d573e:	461a      	mov	r2, r3
   d5740:	f7ff befa 	b.w	d5538 <network_connect>

000d5744 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5744:	4b08      	ldr	r3, [pc, #32]	; (d5768 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5746:	b510      	push	{r4, lr}
   d5748:	2428      	movs	r4, #40	; 0x28
   d574a:	4622      	mov	r2, r4
   d574c:	4618      	mov	r0, r3
   d574e:	2100      	movs	r1, #0
   d5750:	f001 fece 	bl	d74f0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5754:	4b05      	ldr	r3, [pc, #20]	; (d576c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5756:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d575c:	6042      	str	r2, [r0, #4]
   d575e:	2204      	movs	r2, #4
   d5760:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5762:	4a03      	ldr	r2, [pc, #12]	; (d5770 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5764:	601a      	str	r2, [r3, #0]
   d5766:	bd10      	pop	{r4, pc}
   d5768:	2003e5e0 	.word	0x2003e5e0
   d576c:	2003e5d8 	.word	0x2003e5d8
   d5770:	000d9740 	.word	0x000d9740

000d5774 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5774:	4770      	bx	lr

000d5776 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5776:	2000      	movs	r0, #0
   d5778:	4770      	bx	lr

000d577a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d577a:	b510      	push	{r4, lr}
   d577c:	2110      	movs	r1, #16
   d577e:	4604      	mov	r4, r0
   d5780:	f001 f981 	bl	d6a86 <_ZdlPvj>
   d5784:	4620      	mov	r0, r4
   d5786:	bd10      	pop	{r4, pc}

000d5788 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5788:	b508      	push	{r3, lr}
      { delete this; }
   d578a:	f7ff fff6 	bl	d577a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d578e:	bd08      	pop	{r3, pc}

000d5790 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5790:	b510      	push	{r4, lr}
      if (_M_manager)
   d5792:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5794:	4604      	mov	r4, r0
      if (_M_manager)
   d5796:	b113      	cbz	r3, d579e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5798:	2203      	movs	r2, #3
   d579a:	4601      	mov	r1, r0
   d579c:	4798      	blx	r3
    }
   d579e:	4620      	mov	r0, r4
   d57a0:	bd10      	pop	{r4, pc}

000d57a2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d57a2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d57a4:	2200      	movs	r2, #0
   d57a6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d57aa:	6002      	str	r2, [r0, #0]
   d57ac:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57ae:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d57b0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57b2:	680c      	ldr	r4, [r1, #0]
   d57b4:	8085      	strh	r5, [r0, #4]
   d57b6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d57b8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d57ba:	bd30      	pop	{r4, r5, pc}

000d57bc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d57bc:	b510      	push	{r4, lr}
   d57be:	4604      	mov	r4, r0
    free((void*)msg_);
   d57c0:	6800      	ldr	r0, [r0, #0]
   d57c2:	f7ff ff11 	bl	d55e8 <free>
}
   d57c6:	4620      	mov	r0, r4
   d57c8:	bd10      	pop	{r4, pc}

000d57ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d57ca:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d57cc:	68c4      	ldr	r4, [r0, #12]
   d57ce:	b1f4      	cbz	r4, d580e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d57d0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d57d2:	2b02      	cmp	r3, #2
   d57d4:	d103      	bne.n	d57de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d57d6:	f104 000c 	add.w	r0, r4, #12
   d57da:	f7ff ffef 	bl	d57bc <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d57de:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d57e0:	b135      	cbz	r5, d57f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d57e2:	4628      	mov	r0, r5
   d57e4:	f7ff ffd4 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
   d57e8:	2110      	movs	r1, #16
   d57ea:	4628      	mov	r0, r5
   d57ec:	f001 f94b 	bl	d6a86 <_ZdlPvj>
   d57f0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d57f2:	b135      	cbz	r5, d5802 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d57f4:	4628      	mov	r0, r5
   d57f6:	f7ff ffcb 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
   d57fa:	2110      	movs	r1, #16
   d57fc:	4628      	mov	r0, r5
   d57fe:	f001 f942 	bl	d6a86 <_ZdlPvj>
   d5802:	4620      	mov	r0, r4
   d5804:	2114      	movs	r1, #20
   d5806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d580a:	f001 b93c 	b.w	d6a86 <_ZdlPvj>
   d580e:	bd38      	pop	{r3, r4, r5, pc}

000d5810 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5810:	b510      	push	{r4, lr}
   d5812:	b088      	sub	sp, #32
   d5814:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5816:	4668      	mov	r0, sp
   d5818:	f000 fd59 	bl	d62ce <_ZN6StringC1EPKc>
    return (*fn)(p);
   d581c:	4669      	mov	r1, sp
   d581e:	a804      	add	r0, sp, #16
   d5820:	f000 fd78 	bl	d6314 <_ZN6StringC1ERKS_>
   d5824:	a804      	add	r0, sp, #16
   d5826:	47a0      	blx	r4
   d5828:	4604      	mov	r4, r0
   d582a:	a804      	add	r0, sp, #16
   d582c:	f000 fd04 	bl	d6238 <_ZN6StringD1Ev>
    String p(param);
   d5830:	4668      	mov	r0, sp
   d5832:	f000 fd01 	bl	d6238 <_ZN6StringD1Ev>
}
   d5836:	4620      	mov	r0, r4
   d5838:	b008      	add	sp, #32
   d583a:	bd10      	pop	{r4, pc}

000d583c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d583c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d583e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d5840:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d5844:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d5846:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5848:	461a      	mov	r2, r3
   d584a:	4669      	mov	r1, sp
   d584c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d584e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d5852:	f8ad 4000 	strh.w	r4, [sp]
   d5856:	f7ff fe27 	bl	d54a8 <spark_function>
}
   d585a:	b004      	add	sp, #16
   d585c:	bd10      	pop	{r4, pc}

000d585e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d585e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5860:	460e      	mov	r6, r1
   d5862:	4604      	mov	r4, r0
   d5864:	f856 3b04 	ldr.w	r3, [r6], #4
   d5868:	9300      	str	r3, [sp, #0]
   d586a:	460d      	mov	r5, r1
   d586c:	a801      	add	r0, sp, #4
   d586e:	4631      	mov	r1, r6
   d5870:	f7ff ff19 	bl	d56a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5874:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5876:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5878:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d587a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d587c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d587e:	2300      	movs	r3, #0
   d5880:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5882:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5884:	f7fe fd8e 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5888:	4630      	mov	r0, r6
   d588a:	f7fe fd8b 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d588e:	4628      	mov	r0, r5
   d5890:	2108      	movs	r1, #8
   d5892:	f001 f8f8 	bl	d6a86 <_ZdlPvj>
        return p;
    }
   d5896:	4620      	mov	r0, r4
   d5898:	b002      	add	sp, #8
   d589a:	bd70      	pop	{r4, r5, r6, pc}

000d589c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d589c:	b513      	push	{r0, r1, r4, lr}
   d589e:	460b      	mov	r3, r1
   d58a0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58a2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d58a6:	466c      	mov	r4, sp
   d58a8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d58ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d58b0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d58b4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d58b8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d58bc:	b002      	add	sp, #8
   d58be:	bd10      	pop	{r4, pc}

000d58c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d58c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d58c2:	b510      	push	{r4, lr}
      if (_M_empty())
   d58c4:	b90a      	cbnz	r2, d58ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d58c6:	f001 f8e2 	bl	d6a8e <_ZSt25__throw_bad_function_callv>
    }
   d58ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58ce:	68c3      	ldr	r3, [r0, #12]
   d58d0:	4718      	bx	r3

000d58d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d58d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d58d4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d58d6:	f100 0110 	add.w	r1, r0, #16
   d58da:	f7ff fff1 	bl	d58c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d58de:	bd08      	pop	{r3, pc}

000d58e0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d58e0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d58e2:	b510      	push	{r4, lr}
      if (_M_empty())
   d58e4:	b90a      	cbnz	r2, d58ea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d58e6:	f001 f8d2 	bl	d6a8e <_ZSt25__throw_bad_function_callv>
    }
   d58ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58ee:	68c3      	ldr	r3, [r0, #12]
   d58f0:	4718      	bx	r3

000d58f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d58f2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d58f4:	6800      	ldr	r0, [r0, #0]
   d58f6:	f100 0110 	add.w	r1, r0, #16
   d58fa:	f7ff fff1 	bl	d58e0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d58fe:	bd08      	pop	{r3, pc}

000d5900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5900:	b538      	push	{r3, r4, r5, lr}
   d5902:	2300      	movs	r3, #0
   d5904:	4604      	mov	r4, r0
   d5906:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5908:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d590a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d590c:	f7fe fbc3 	bl	d4096 <_Znwj>
   d5910:	b128      	cbz	r0, d591e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5912:	2301      	movs	r3, #1
   d5914:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5918:	4b02      	ldr	r3, [pc, #8]	; (d5924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d591a:	6003      	str	r3, [r0, #0]
   d591c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d591e:	6020      	str	r0, [r4, #0]
	}
   d5920:	4620      	mov	r0, r4
   d5922:	bd38      	pop	{r3, r4, r5, pc}
   d5924:	000d9774 	.word	0x000d9774

000d5928 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5928:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d592a:	2300      	movs	r3, #0
   d592c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d592e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5930:	4604      	mov	r4, r0
   d5932:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5934:	b12b      	cbz	r3, d5942 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5936:	2202      	movs	r2, #2
   d5938:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d593a:	68eb      	ldr	r3, [r5, #12]
   d593c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d593e:	68ab      	ldr	r3, [r5, #8]
   d5940:	60a3      	str	r3, [r4, #8]
    }
   d5942:	4620      	mov	r0, r4
   d5944:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5948:	b5f0      	push	{r4, r5, r6, r7, lr}
   d594a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d594c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d594e:	4668      	mov	r0, sp
   d5950:	f7ff ff27 	bl	d57a2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5954:	f04f 0302 	mov.w	r3, #2
   d5958:	e8d4 2f4f 	ldrexb	r2, [r4]
   d595c:	2a00      	cmp	r2, #0
   d595e:	d103      	bne.n	d5968 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5960:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5964:	2900      	cmp	r1, #0
   d5966:	d1f7      	bne.n	d5958 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5968:	d125      	bne.n	d59b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d596a:	f104 050c 	add.w	r5, r4, #12
   d596e:	4669      	mov	r1, sp
   d5970:	4628      	mov	r0, r5
   d5972:	f7ff ff16 	bl	d57a2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5976:	f3bf 8f5b 	dmb	ish
   d597a:	2301      	movs	r3, #1
   d597c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d597e:	2000      	movs	r0, #0
   d5980:	f104 0308 	add.w	r3, r4, #8
   d5984:	f3bf 8f5b 	dmb	ish
   d5988:	e853 6f00 	ldrex	r6, [r3]
   d598c:	e843 0200 	strex	r2, r0, [r3]
   d5990:	2a00      	cmp	r2, #0
   d5992:	d1f9      	bne.n	d5988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5994:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5998:	b16e      	cbz	r6, d59b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d599a:	f7ff fd47 	bl	d542c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d599e:	b178      	cbz	r0, d59c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d59a0:	4629      	mov	r1, r5
   d59a2:	4630      	mov	r0, r6
   d59a4:	f7ff ff8c 	bl	d58c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d59a8:	4630      	mov	r0, r6
   d59aa:	f7ff fef1 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d59ae:	2110      	movs	r1, #16
   d59b0:	4630      	mov	r0, r6
   d59b2:	f001 f868 	bl	d6a86 <_ZdlPvj>
        p_->setError(std::move(error));
   d59b6:	4668      	mov	r0, sp
   d59b8:	f7ff ff00 	bl	d57bc <_ZN8particle5ErrorD1Ev>
    }
   d59bc:	b009      	add	sp, #36	; 0x24
   d59be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59c0:	4631      	mov	r1, r6
   d59c2:	a802      	add	r0, sp, #8
   d59c4:	f7ff ffb0 	bl	d5928 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d59c8:	68e0      	ldr	r0, [r4, #12]
   d59ca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d59ce:	b108      	cbz	r0, d59d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d59d0:	f001 fdcc 	bl	d756c <strdup>
        type_(type) {
   d59d4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59d6:	2010      	movs	r0, #16
   d59d8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d59dc:	f7fe fb5b 	bl	d4096 <_Znwj>
   d59e0:	4605      	mov	r5, r0
   d59e2:	b1e8      	cbz	r0, d5a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d59e4:	2700      	movs	r7, #0
   d59e6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59e8:	2018      	movs	r0, #24
   d59ea:	f7fe fb54 	bl	d4096 <_Znwj>
   d59ee:	4604      	mov	r4, r0
   d59f0:	b188      	cbz	r0, d5a16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d59f2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d59f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d59f6:	a802      	add	r0, sp, #8
   d59f8:	f7ff ff50 	bl	d589c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59fc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d59fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a00:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a04:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a06:	a906      	add	r1, sp, #24
   d5a08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a0a:	60e3      	str	r3, [r4, #12]
   d5a0c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5a10:	9205      	str	r2, [sp, #20]
   d5a12:	f7ff fec6 	bl	d57a2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5a16:	4b08      	ldr	r3, [pc, #32]	; (d5a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5a18:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a1a:	4b08      	ldr	r3, [pc, #32]	; (d5a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a1c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5a1e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5a20:	a806      	add	r0, sp, #24
   d5a22:	f7ff fecb 	bl	d57bc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5a26:	a802      	add	r0, sp, #8
   d5a28:	f7ff feb2 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a2c:	2200      	movs	r2, #0
   d5a2e:	4629      	mov	r1, r5
   d5a30:	4803      	ldr	r0, [pc, #12]	; (d5a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5a32:	f7ff fd03 	bl	d543c <application_thread_invoke>
   d5a36:	e7b7      	b.n	d59a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5a38:	000d58d3 	.word	0x000d58d3
   d5a3c:	000d5b69 	.word	0x000d5b69
   d5a40:	000d566f 	.word	0x000d566f

000d5a44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a48:	b08a      	sub	sp, #40	; 0x28
   d5a4a:	4605      	mov	r5, r0
   d5a4c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5a50:	460c      	mov	r4, r1
   d5a52:	4617      	mov	r7, r2
   d5a54:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a56:	f7ff fd37 	bl	d54c8 <spark_cloud_flag_connected>
   d5a5a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5a5c:	4682      	mov	sl, r0
   d5a5e:	bb38      	cbnz	r0, d5ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5a60:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5a64:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a66:	a905      	add	r1, sp, #20
   d5a68:	4630      	mov	r0, r6
   d5a6a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a6e:	f7ff fe98 	bl	d57a2 <_ZN8particle5ErrorC1EOS0_>
   d5a72:	2014      	movs	r0, #20
   d5a74:	f7fe fb0f 	bl	d4096 <_Znwj>
   d5a78:	4604      	mov	r4, r0
   d5a7a:	b148      	cbz	r0, d5a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5a7c:	2302      	movs	r3, #2
   d5a7e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a80:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5a82:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a86:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5a88:	4631      	mov	r1, r6
   d5a8a:	300c      	adds	r0, #12
   d5a8c:	f7ff fe89 	bl	d57a2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a90:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5a92:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a94:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5a98:	f7ff ff32 	bl	d5900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	f7ff fe8d 	bl	d57bc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5aa2:	a805      	add	r0, sp, #20
   d5aa4:	f7ff fe8a 	bl	d57bc <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5aa8:	4628      	mov	r0, r5
   d5aaa:	b00a      	add	sp, #40	; 0x28
   d5aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5ab0:	230c      	movs	r3, #12
   d5ab2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5ab6:	2014      	movs	r0, #20
   d5ab8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5abc:	9307      	str	r3, [sp, #28]
   d5abe:	f7fe faea 	bl	d4096 <_Znwj>
   d5ac2:	4601      	mov	r1, r0
   d5ac4:	b128      	cbz	r0, d5ad2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ac6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5aca:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ace:	f880 a001 	strb.w	sl, [r0, #1]
   d5ad2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5ad4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5ad6:	f7ff ff13 	bl	d5900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5ada:	4b22      	ldr	r3, [pc, #136]	; (d5b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5adc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5ade:	2008      	movs	r0, #8
   d5ae0:	f7fe fad9 	bl	d4096 <_Znwj>
   d5ae4:	4682      	mov	sl, r0
   d5ae6:	b128      	cbz	r0, d5af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ae8:	9b03      	ldr	r3, [sp, #12]
   d5aea:	f840 3b04 	str.w	r3, [r0], #4
   d5aee:	a904      	add	r1, sp, #16
   d5af0:	f7ff fdd9 	bl	d56a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5af4:	9600      	str	r6, [sp, #0]
   d5af6:	fa5f f389 	uxtb.w	r3, r9
   d5afa:	4642      	mov	r2, r8
   d5afc:	4639      	mov	r1, r7
   d5afe:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5b00:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b04:	f7ff fcf0 	bl	d54e8 <spark_send_event>
   d5b08:	b9b8      	cbnz	r0, d5b3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5b0a:	9b03      	ldr	r3, [sp, #12]
   d5b0c:	785b      	ldrb	r3, [r3, #1]
   d5b0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5b12:	b993      	cbnz	r3, d5b3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5b14:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5b18:	a905      	add	r1, sp, #20
   d5b1a:	a803      	add	r0, sp, #12
   d5b1c:	9205      	str	r2, [sp, #20]
   d5b1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5b22:	f7ff ff11 	bl	d5948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b26:	a805      	add	r0, sp, #20
   d5b28:	f7ff fe48 	bl	d57bc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5b2c:	a805      	add	r0, sp, #20
   d5b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5b30:	f7ff fe95 	bl	d585e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5b34:	a806      	add	r0, sp, #24
   d5b36:	f7fe fc35 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b3a:	9b03      	ldr	r3, [sp, #12]
   d5b3c:	9305      	str	r3, [sp, #20]
   d5b3e:	a904      	add	r1, sp, #16
   d5b40:	a806      	add	r0, sp, #24
   d5b42:	f7ff fdb0 	bl	d56a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b46:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b48:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b4a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5b4c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5b4e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5b50:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5b52:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5b54:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5b56:	f7fe fc25 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b5a:	a804      	add	r0, sp, #16
   d5b5c:	f7fe fc22 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5b60:	e7a2      	b.n	d5aa8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5b62:	bf00      	nop
   d5b64:	000d5c2d 	.word	0x000d5c2d

000d5b68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5b68:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b6c:	4605      	mov	r5, r0
	  switch (__op)
   d5b6e:	d007      	beq.n	d5b80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5b70:	2a03      	cmp	r2, #3
   d5b72:	d018      	beq.n	d5ba6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5b74:	2a01      	cmp	r2, #1
   d5b76:	d101      	bne.n	d5b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5b78:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5b7a:	6003      	str	r3, [r0, #0]
	}
   d5b7c:	2000      	movs	r0, #0
   d5b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b80:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5b82:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b84:	f7fe fa87 	bl	d4096 <_Znwj>
   d5b88:	4604      	mov	r4, r0
   d5b8a:	b150      	cbz	r0, d5ba2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5b8c:	4631      	mov	r1, r6
   d5b8e:	f7ff fecb 	bl	d5928 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5b92:	6930      	ldr	r0, [r6, #16]
   d5b94:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5b98:	b108      	cbz	r0, d5b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5b9a:	f001 fce7 	bl	d756c <strdup>
        type_(type) {
   d5b9e:	6120      	str	r0, [r4, #16]
   d5ba0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5ba2:	602c      	str	r4, [r5, #0]
	}
   d5ba4:	e7ea      	b.n	d5b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5ba6:	6804      	ldr	r4, [r0, #0]
   d5ba8:	2c00      	cmp	r4, #0
   d5baa:	d0e7      	beq.n	d5b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5bac:	f104 0010 	add.w	r0, r4, #16
   d5bb0:	f7ff fe04 	bl	d57bc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	f7ff fdeb 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5bba:	2118      	movs	r1, #24
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	f000 ff62 	bl	d6a86 <_ZdlPvj>
   d5bc2:	e7db      	b.n	d5b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5bc4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5bc4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5bc6:	2300      	movs	r3, #0
   d5bc8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5bca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5bcc:	4604      	mov	r4, r0
   d5bce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5bd0:	b12b      	cbz	r3, d5bde <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bd2:	2202      	movs	r2, #2
   d5bd4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bd6:	68eb      	ldr	r3, [r5, #12]
   d5bd8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5bda:	68ab      	ldr	r3, [r5, #8]
   d5bdc:	60a3      	str	r3, [r4, #8]
    }
   d5bde:	4620      	mov	r0, r4
   d5be0:	bd38      	pop	{r3, r4, r5, pc}

000d5be2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5be2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5be4:	b570      	push	{r4, r5, r6, lr}
   d5be6:	4604      	mov	r4, r0
	  switch (__op)
   d5be8:	d007      	beq.n	d5bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5bea:	2a03      	cmp	r2, #3
   d5bec:	d012      	beq.n	d5c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5bee:	2a01      	cmp	r2, #1
   d5bf0:	d101      	bne.n	d5bf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5bf2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5bf4:	6003      	str	r3, [r0, #0]
	}
   d5bf6:	2000      	movs	r0, #0
   d5bf8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bfa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5bfc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bfe:	f7fe fa4a 	bl	d4096 <_Znwj>
   d5c02:	4605      	mov	r5, r0
   d5c04:	b120      	cbz	r0, d5c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5c06:	4631      	mov	r1, r6
   d5c08:	f7ff ffdc 	bl	d5bc4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5c0c:	7c33      	ldrb	r3, [r6, #16]
   d5c0e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5c10:	6025      	str	r5, [r4, #0]
	}
   d5c12:	e7f0      	b.n	d5bf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5c14:	6804      	ldr	r4, [r0, #0]
   d5c16:	2c00      	cmp	r4, #0
   d5c18:	d0ed      	beq.n	d5bf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5c1a:	4620      	mov	r0, r4
   d5c1c:	f7ff fdb8 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5c20:	2114      	movs	r1, #20
   d5c22:	4620      	mov	r0, r4
   d5c24:	f000 ff2f 	bl	d6a86 <_ZdlPvj>
   d5c28:	e7e5      	b.n	d5bf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c2e:	b089      	sub	sp, #36	; 0x24
   d5c30:	4604      	mov	r4, r0
   d5c32:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5c34:	a801      	add	r0, sp, #4
   d5c36:	4611      	mov	r1, r2
   d5c38:	f7ff fe11 	bl	d585e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5c3c:	b1a4      	cbz	r4, d5c68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5c3e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5c40:	b11d      	cbz	r5, d5c4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5c42:	4628      	mov	r0, r5
   d5c44:	f001 fc92 	bl	d756c <strdup>
   d5c48:	4605      	mov	r5, r0
   d5c4a:	a801      	add	r0, sp, #4
   d5c4c:	a903      	add	r1, sp, #12
        type_(type) {
   d5c4e:	9503      	str	r5, [sp, #12]
   d5c50:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5c54:	f7ff fe78 	bl	d5948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5c58:	a803      	add	r0, sp, #12
   d5c5a:	f7ff fdaf 	bl	d57bc <_ZN8particle5ErrorD1Ev>
   d5c5e:	a802      	add	r0, sp, #8
   d5c60:	f7fe fba0 	bl	d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c64:	b009      	add	sp, #36	; 0x24
   d5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5c68:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5c6a:	2301      	movs	r3, #1
   d5c6c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5c70:	2a00      	cmp	r2, #0
   d5c72:	d103      	bne.n	d5c7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5c74:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5c78:	2900      	cmp	r1, #0
   d5c7a:	d1f7      	bne.n	d5c6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5c7c:	d1ef      	bne.n	d5c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5c7e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5c80:	f3bf 8f5b 	dmb	ish
   d5c84:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5c86:	1d2b      	adds	r3, r5, #4
   d5c88:	f3bf 8f5b 	dmb	ish
   d5c8c:	e853 6f00 	ldrex	r6, [r3]
   d5c90:	e843 4200 	strex	r2, r4, [r3]
   d5c94:	2a00      	cmp	r2, #0
   d5c96:	d1f9      	bne.n	d5c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5c98:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5c9c:	2e00      	cmp	r6, #0
   d5c9e:	d0de      	beq.n	d5c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f7ff fbc3 	bl	d542c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5ca6:	4607      	mov	r7, r0
   d5ca8:	b160      	cbz	r0, d5cc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5caa:	f105 010c 	add.w	r1, r5, #12
   d5cae:	4630      	mov	r0, r6
   d5cb0:	f7ff fe16 	bl	d58e0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5cb4:	4630      	mov	r0, r6
   d5cb6:	f7ff fd6b 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5cba:	2110      	movs	r1, #16
   d5cbc:	4630      	mov	r0, r6
   d5cbe:	f000 fee2 	bl	d6a86 <_ZdlPvj>
   d5cc2:	e7cc      	b.n	d5c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5cc4:	4631      	mov	r1, r6
   d5cc6:	a803      	add	r0, sp, #12
   d5cc8:	f7ff ff7c 	bl	d5bc4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ccc:	7b2b      	ldrb	r3, [r5, #12]
   d5cce:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5cd2:	2010      	movs	r0, #16
   d5cd4:	f7fe f9df 	bl	d4096 <_Znwj>
   d5cd8:	4605      	mov	r5, r0
   d5cda:	b1d0      	cbz	r0, d5d12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5cdc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cde:	2014      	movs	r0, #20
   d5ce0:	f7fe f9d9 	bl	d4096 <_Znwj>
   d5ce4:	4604      	mov	r4, r0
   d5ce6:	b178      	cbz	r0, d5d08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5ce8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5cea:	4601      	mov	r1, r0
   d5cec:	a803      	add	r0, sp, #12
   d5cee:	f7ff fdd5 	bl	d589c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cf2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5cf4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cf6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cf8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5cfa:	9205      	str	r2, [sp, #20]
   d5cfc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cfe:	60e3      	str	r3, [r4, #12]
   d5d00:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5d04:	9206      	str	r2, [sp, #24]
   d5d06:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5d08:	4b06      	ldr	r3, [pc, #24]	; (d5d24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5d0a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d0c:	4b06      	ldr	r3, [pc, #24]	; (d5d28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d0e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5d10:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5d12:	a803      	add	r0, sp, #12
   d5d14:	f7ff fd3c 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5d18:	2200      	movs	r2, #0
   d5d1a:	4629      	mov	r1, r5
   d5d1c:	4803      	ldr	r0, [pc, #12]	; (d5d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5d1e:	f7ff fb8d 	bl	d543c <application_thread_invoke>
   d5d22:	e7c7      	b.n	d5cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5d24:	000d58f3 	.word	0x000d58f3
   d5d28:	000d5be3 	.word	0x000d5be3
   d5d2c:	000d566f 	.word	0x000d566f

000d5d30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d30:	2200      	movs	r2, #0
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	4611      	mov	r1, r2
   d5d36:	f7ff bc37 	b.w	d55a8 <network_listening>

000d5d3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d3a:	2200      	movs	r2, #0
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	4611      	mov	r1, r2
   d5d40:	f7ff bc42 	b.w	d55c8 <network_get_listen_timeout>

000d5d44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	2200      	movs	r2, #0
   d5d48:	f7ff bc36 	b.w	d55b8 <network_set_listen_timeout>

000d5d4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d4c:	6840      	ldr	r0, [r0, #4]
   d5d4e:	2200      	movs	r2, #0
   d5d50:	f081 0101 	eor.w	r1, r1, #1
   d5d54:	f7ff bc20 	b.w	d5598 <network_listen>

000d5d58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d58:	2300      	movs	r3, #0
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	461a      	mov	r2, r3
   d5d5e:	4619      	mov	r1, r3
   d5d60:	f7ff bc12 	b.w	d5588 <network_off>

000d5d64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d64:	2300      	movs	r3, #0
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	461a      	mov	r2, r3
   d5d6a:	4619      	mov	r1, r3
   d5d6c:	f7ff bc04 	b.w	d5578 <network_on>

000d5d70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d70:	2200      	movs	r2, #0
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	4611      	mov	r1, r2
   d5d76:	f7ff bbf7 	b.w	d5568 <network_ready>

000d5d7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	6840      	ldr	r0, [r0, #4]
   d5d7e:	4611      	mov	r1, r2
   d5d80:	f7ff bbe2 	b.w	d5548 <network_connecting>

000d5d84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d84:	6840      	ldr	r0, [r0, #4]
   d5d86:	2200      	movs	r2, #0
   d5d88:	2102      	movs	r1, #2
   d5d8a:	f7ff bbe5 	b.w	d5558 <network_disconnect>

000d5d8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d8e:	2300      	movs	r3, #0
   d5d90:	6840      	ldr	r0, [r0, #4]
   d5d92:	461a      	mov	r2, r3
   d5d94:	f7ff bbd0 	b.w	d5538 <network_connect>

000d5d98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d9a:	2203      	movs	r2, #3
   d5d9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d9e:	4a02      	ldr	r2, [pc, #8]	; (d5da8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5da0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5da2:	4770      	bx	lr
   d5da4:	2003e608 	.word	0x2003e608
   d5da8:	000d9790 	.word	0x000d9790

000d5dac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5dac:	4770      	bx	lr

000d5dae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5db0:	4606      	mov	r6, r0
   d5db2:	4615      	mov	r5, r2
   d5db4:	460c      	mov	r4, r1
   d5db6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5db8:	42bc      	cmp	r4, r7
   d5dba:	d006      	beq.n	d5dca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5dbc:	6833      	ldr	r3, [r6, #0]
   d5dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5dc2:	689b      	ldr	r3, [r3, #8]
   d5dc4:	4630      	mov	r0, r6
   d5dc6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5dc8:	e7f6      	b.n	d5db8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5dca:	4628      	mov	r0, r5
   d5dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5dce:	7c00      	ldrb	r0, [r0, #16]
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	f7ff ba19 	b.w	d5208 <hal_i2c_write>

000d5dd6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5dd6:	7c00      	ldrb	r0, [r0, #16]
   d5dd8:	2100      	movs	r1, #0
   d5dda:	f7ff ba1d 	b.w	d5218 <hal_i2c_available>

000d5dde <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5dde:	7c00      	ldrb	r0, [r0, #16]
   d5de0:	2100      	movs	r1, #0
   d5de2:	f7ff ba21 	b.w	d5228 <hal_i2c_read>

000d5de6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5de6:	7c00      	ldrb	r0, [r0, #16]
   d5de8:	2100      	movs	r1, #0
   d5dea:	f7ff ba25 	b.w	d5238 <hal_i2c_peek>

000d5dee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5dee:	7c00      	ldrb	r0, [r0, #16]
   d5df0:	2100      	movs	r1, #0
   d5df2:	f7ff ba29 	b.w	d5248 <hal_i2c_flush>

000d5df6 <_ZN7TwoWireD0Ev>:
   d5df6:	b510      	push	{r4, lr}
   d5df8:	2114      	movs	r1, #20
   d5dfa:	4604      	mov	r4, r0
   d5dfc:	f000 fe43 	bl	d6a86 <_ZdlPvj>
   d5e00:	4620      	mov	r0, r4
   d5e02:	bd10      	pop	{r4, pc}

000d5e04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5e04:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e0a:	4604      	mov	r4, r0
   d5e0c:	4608      	mov	r0, r1
   d5e0e:	2100      	movs	r1, #0
   d5e10:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5e14:	4b03      	ldr	r3, [pc, #12]	; (d5e24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5e16:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5e18:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5e1a:	4611      	mov	r1, r2
   d5e1c:	f7ff fa24 	bl	d5268 <hal_i2c_init>
}
   d5e20:	4620      	mov	r0, r4
   d5e22:	bd10      	pop	{r4, pc}
   d5e24:	000d97c4 	.word	0x000d97c4

000d5e28 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5e28:	2300      	movs	r3, #0
   d5e2a:	7c00      	ldrb	r0, [r0, #16]
   d5e2c:	461a      	mov	r2, r3
   d5e2e:	4619      	mov	r1, r3
   d5e30:	f7ff b9d2 	b.w	d51d8 <hal_i2c_begin>

000d5e34 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5e34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5e36:	2200      	movs	r2, #0
   d5e38:	2314      	movs	r3, #20
   d5e3a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5e3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5e42:	780b      	ldrb	r3, [r1, #0]
   d5e44:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e48:	684b      	ldr	r3, [r1, #4]
   d5e4a:	9303      	str	r3, [sp, #12]
   d5e4c:	68cb      	ldr	r3, [r1, #12]
   d5e4e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5e50:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5e52:	7a0b      	ldrb	r3, [r1, #8]
   d5e54:	9305      	str	r3, [sp, #20]
   d5e56:	a901      	add	r1, sp, #4
   d5e58:	f7ff fa0e 	bl	d5278 <hal_i2c_request_ex>
}
   d5e5c:	b007      	add	sp, #28
   d5e5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e62 <_ZN7TwoWire11requestFromEhjh>:
{
   d5e62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5e64:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5e66:	f88d 1000 	strb.w	r1, [sp]
   d5e6a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5e6e:	9103      	str	r1, [sp, #12]
   d5e70:	bf18      	it	ne
   d5e72:	2301      	movne	r3, #1
   d5e74:	4669      	mov	r1, sp
    size_ = size;
   d5e76:	9201      	str	r2, [sp, #4]
   d5e78:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e7c:	f7ff ffda 	bl	d5e34 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5e80:	b005      	add	sp, #20
   d5e82:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e86 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5e86:	2301      	movs	r3, #1
   d5e88:	f7ff bfeb 	b.w	d5e62 <_ZN7TwoWire11requestFromEhjh>

000d5e8c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5e8c:	7c00      	ldrb	r0, [r0, #16]
   d5e8e:	2200      	movs	r2, #0
   d5e90:	f7ff b9aa 	b.w	d51e8 <hal_i2c_begin_transmission>

000d5e94 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5e94:	7c00      	ldrb	r0, [r0, #16]
   d5e96:	2200      	movs	r2, #0
   d5e98:	f7ff b9ae 	b.w	d51f8 <hal_i2c_end_transmission>

000d5e9c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5e9c:	2101      	movs	r1, #1
   d5e9e:	f7ff bff9 	b.w	d5e94 <_ZN7TwoWire15endTransmissionEh>

000d5ea2 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5ea2:	4700      	bx	r0

000d5ea4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5ea4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5ea8:	2400      	movs	r4, #0
{
   d5eaa:	461d      	mov	r5, r3
   d5eac:	460f      	mov	r7, r1
   d5eae:	4690      	mov	r8, r2
   d5eb0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d5eb2:	f7ff f989 	bl	d51c8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d5eb6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5eb8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d5ebc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5ec0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d5ec4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5ec8:	bfa2      	ittt	ge
   d5eca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5ece:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d5ed2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5ed4:	4907      	ldr	r1, [pc, #28]	; (d5ef4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d5ed6:	9400      	str	r4, [sp, #0]
   d5ed8:	4643      	mov	r3, r8
   d5eda:	463a      	mov	r2, r7
   d5edc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d5ede:	bfa8      	it	ge
   d5ee0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5ee4:	f7ff f968 	bl	d51b8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5ee8:	fab0 f080 	clz	r0, r0
   d5eec:	0940      	lsrs	r0, r0, #5
   d5eee:	b004      	add	sp, #16
   d5ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ef4:	000d5ea3 	.word	0x000d5ea3

000d5ef8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5ef8:	4770      	bx	lr

000d5efa <_ZN9IPAddressD0Ev>:
   d5efa:	b510      	push	{r4, lr}
   d5efc:	2118      	movs	r1, #24
   d5efe:	4604      	mov	r4, r0
   d5f00:	f000 fdc1 	bl	d6a86 <_ZdlPvj>
   d5f04:	4620      	mov	r0, r4
   d5f06:	bd10      	pop	{r4, pc}

000d5f08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5f08:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5f0a:	7d03      	ldrb	r3, [r0, #20]
   d5f0c:	2b06      	cmp	r3, #6
{
   d5f0e:	b08d      	sub	sp, #52	; 0x34
   d5f10:	460e      	mov	r6, r1
   d5f12:	f100 0704 	add.w	r7, r0, #4
   d5f16:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5f1a:	d012      	beq.n	d5f42 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5f1c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5f20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5f24:	220a      	movs	r2, #10
   d5f26:	4630      	mov	r0, r6
   d5f28:	f000 f949 	bl	d61be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f2c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f2e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5f30:	d019      	beq.n	d5f66 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5f32:	2c00      	cmp	r4, #0
   d5f34:	d0f4      	beq.n	d5f20 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5f36:	212e      	movs	r1, #46	; 0x2e
   d5f38:	4630      	mov	r0, r6
   d5f3a:	f000 f927 	bl	d618c <_ZN5Print5printEc>
   d5f3e:	4404      	add	r4, r0
   d5f40:	e7ee      	b.n	d5f20 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5f42:	232f      	movs	r3, #47	; 0x2f
   d5f44:	466a      	mov	r2, sp
   d5f46:	4639      	mov	r1, r7
   d5f48:	200a      	movs	r0, #10
		buf[0] = 0;
   d5f4a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5f4e:	f7ff f99b 	bl	d5288 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5f52:	4668      	mov	r0, sp
   d5f54:	f001 fb27 	bl	d75a6 <strlen>
   d5f58:	6833      	ldr	r3, [r6, #0]
   d5f5a:	4602      	mov	r2, r0
   d5f5c:	68db      	ldr	r3, [r3, #12]
   d5f5e:	4669      	mov	r1, sp
   d5f60:	4630      	mov	r0, r6
   d5f62:	4798      	blx	r3
   d5f64:	4604      	mov	r4, r0
    }
    return n;
}
   d5f66:	4620      	mov	r0, r4
   d5f68:	b00d      	add	sp, #52	; 0x34
   d5f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f6c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5f6c:	b510      	push	{r4, lr}
   d5f6e:	4b05      	ldr	r3, [pc, #20]	; (d5f84 <_ZN9IPAddressC1Ev+0x18>)
   d5f70:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f72:	2211      	movs	r2, #17
   d5f74:	f840 3b04 	str.w	r3, [r0], #4
   d5f78:	2100      	movs	r1, #0
   d5f7a:	f001 fab9 	bl	d74f0 <memset>
}
   d5f7e:	4620      	mov	r0, r4
   d5f80:	bd10      	pop	{r4, pc}
   d5f82:	bf00      	nop
   d5f84:	000d97ec 	.word	0x000d97ec

000d5f88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f88:	4603      	mov	r3, r0
   d5f8a:	4a07      	ldr	r2, [pc, #28]	; (d5fa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f8c:	b510      	push	{r4, lr}
   d5f8e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5f92:	f101 0210 	add.w	r2, r1, #16
   d5f96:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f9a:	f843 4b04 	str.w	r4, [r3], #4
   d5f9e:	4291      	cmp	r1, r2
   d5fa0:	d1f9      	bne.n	d5f96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5fa2:	780a      	ldrb	r2, [r1, #0]
   d5fa4:	701a      	strb	r2, [r3, #0]
}
   d5fa6:	bd10      	pop	{r4, pc}
   d5fa8:	000d97ec 	.word	0x000d97ec

000d5fac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5fac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5fae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5fb2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5fb6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5fba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5fbe:	2304      	movs	r3, #4
   d5fc0:	6041      	str	r1, [r0, #4]
   d5fc2:	7503      	strb	r3, [r0, #20]
}
   d5fc4:	bd10      	pop	{r4, pc}

000d5fc6 <_ZN9IPAddressaSEPKh>:
{
   d5fc6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5fc8:	78cb      	ldrb	r3, [r1, #3]
   d5fca:	9300      	str	r3, [sp, #0]
   d5fcc:	788b      	ldrb	r3, [r1, #2]
   d5fce:	784a      	ldrb	r2, [r1, #1]
   d5fd0:	7809      	ldrb	r1, [r1, #0]
   d5fd2:	f7ff ffeb 	bl	d5fac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5fd6:	b002      	add	sp, #8
   d5fd8:	bd10      	pop	{r4, pc}
	...

000d5fdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5fdc:	4b01      	ldr	r3, [pc, #4]	; (d5fe4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5fde:	4a02      	ldr	r2, [pc, #8]	; (d5fe8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5fe0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5fe2:	4770      	bx	lr
   d5fe4:	2003e610 	.word	0x2003e610
   d5fe8:	000d97f8 	.word	0x000d97f8

000d5fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5fec:	2300      	movs	r3, #0
   d5fee:	6840      	ldr	r0, [r0, #4]
   d5ff0:	461a      	mov	r2, r3
   d5ff2:	f7ff baa1 	b.w	d5538 <network_connect>

000d5ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ff6:	6840      	ldr	r0, [r0, #4]
   d5ff8:	2200      	movs	r2, #0
   d5ffa:	2102      	movs	r1, #2
   d5ffc:	f7ff baac 	b.w	d5558 <network_disconnect>

000d6000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6000:	2200      	movs	r2, #0
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	4611      	mov	r1, r2
   d6006:	f7ff ba9f 	b.w	d5548 <network_connecting>

000d600a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d600a:	2200      	movs	r2, #0
   d600c:	6840      	ldr	r0, [r0, #4]
   d600e:	4611      	mov	r1, r2
   d6010:	f7ff baaa 	b.w	d5568 <network_ready>

000d6014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6014:	2300      	movs	r3, #0
   d6016:	6840      	ldr	r0, [r0, #4]
   d6018:	461a      	mov	r2, r3
   d601a:	4619      	mov	r1, r3
   d601c:	f7ff baac 	b.w	d5578 <network_on>

000d6020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6020:	2300      	movs	r3, #0
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	461a      	mov	r2, r3
   d6026:	4619      	mov	r1, r3
   d6028:	f7ff baae 	b.w	d5588 <network_off>

000d602c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	2200      	movs	r2, #0
   d6030:	f081 0101 	eor.w	r1, r1, #1
   d6034:	f7ff bab0 	b.w	d5598 <network_listen>

000d6038 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6038:	6840      	ldr	r0, [r0, #4]
   d603a:	2200      	movs	r2, #0
   d603c:	f7ff babc 	b.w	d55b8 <network_set_listen_timeout>

000d6040 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6040:	2200      	movs	r2, #0
   d6042:	6840      	ldr	r0, [r0, #4]
   d6044:	4611      	mov	r1, r2
   d6046:	f7ff babf 	b.w	d55c8 <network_get_listen_timeout>

000d604a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d604a:	2200      	movs	r2, #0
   d604c:	6840      	ldr	r0, [r0, #4]
   d604e:	4611      	mov	r1, r2
   d6050:	f7ff baaa 	b.w	d55a8 <network_listening>

000d6054 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6058:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d605a:	b095      	sub	sp, #84	; 0x54
   d605c:	4616      	mov	r6, r2
   d605e:	460d      	mov	r5, r1
   d6060:	4607      	mov	r7, r0
    IPAddress addr;
   d6062:	f7ff ff83 	bl	d5f6c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6066:	4621      	mov	r1, r4
   d6068:	2218      	movs	r2, #24
   d606a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d606c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d606e:	f001 fa3f 	bl	d74f0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6072:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6074:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6078:	4621      	mov	r1, r4
   d607a:	466b      	mov	r3, sp
   d607c:	aa0c      	add	r2, sp, #48	; 0x30
   d607e:	4630      	mov	r0, r6
   d6080:	f7ff f912 	bl	d52a8 <netdb_getaddrinfo>
    if (!r) {
   d6084:	4604      	mov	r4, r0
   d6086:	2800      	cmp	r0, #0
   d6088:	d146      	bne.n	d6118 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d608a:	4602      	mov	r2, r0
   d608c:	2101      	movs	r1, #1
   d608e:	6868      	ldr	r0, [r5, #4]
   d6090:	f7ff fa6a 	bl	d5568 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6094:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6096:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6098:	4622      	mov	r2, r4
   d609a:	6868      	ldr	r0, [r5, #4]
   d609c:	f7ff fa64 	bl	d5568 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a2:	4681      	mov	r9, r0
        bool ok = false;
   d60a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60a6:	2e00      	cmp	r6, #0
   d60a8:	d036      	beq.n	d6118 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d60aa:	2900      	cmp	r1, #0
   d60ac:	d134      	bne.n	d6118 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d60ae:	6873      	ldr	r3, [r6, #4]
   d60b0:	2b02      	cmp	r3, #2
   d60b2:	d003      	beq.n	d60bc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d60b4:	2b0a      	cmp	r3, #10
   d60b6:	d00b      	beq.n	d60d0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60b8:	69f6      	ldr	r6, [r6, #28]
   d60ba:	e7f4      	b.n	d60a6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d60bc:	f1b8 0f00 	cmp.w	r8, #0
   d60c0:	d004      	beq.n	d60cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d60c2:	6971      	ldr	r1, [r6, #20]
   d60c4:	4638      	mov	r0, r7
   d60c6:	3104      	adds	r1, #4
   d60c8:	f7ff ff7d 	bl	d5fc6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d60cc:	4641      	mov	r1, r8
   d60ce:	e7f3      	b.n	d60b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d60d0:	f1b9 0f00 	cmp.w	r9, #0
   d60d4:	d101      	bne.n	d60da <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d60d6:	4649      	mov	r1, r9
   d60d8:	e7ee      	b.n	d60b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d60da:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d60dc:	2210      	movs	r2, #16
   d60de:	a801      	add	r0, sp, #4
   d60e0:	f001 fa06 	bl	d74f0 <memset>
                    a.v = 6;
   d60e4:	2306      	movs	r3, #6
   d60e6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60ea:	ad01      	add	r5, sp, #4
   d60ec:	f104 0308 	add.w	r3, r4, #8
   d60f0:	3418      	adds	r4, #24
   d60f2:	6818      	ldr	r0, [r3, #0]
   d60f4:	6859      	ldr	r1, [r3, #4]
   d60f6:	462a      	mov	r2, r5
   d60f8:	c203      	stmia	r2!, {r0, r1}
   d60fa:	3308      	adds	r3, #8
   d60fc:	42a3      	cmp	r3, r4
   d60fe:	4615      	mov	r5, r2
   d6100:	d1f7      	bne.n	d60f2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6102:	a901      	add	r1, sp, #4
   d6104:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6106:	ad07      	add	r5, sp, #28
   d6108:	f7ff ff3e 	bl	d5f88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d610c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d610e:	1d3c      	adds	r4, r7, #4
   d6110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6112:	682b      	ldr	r3, [r5, #0]
   d6114:	7023      	strb	r3, [r4, #0]
   d6116:	e7de      	b.n	d60d6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6118:	9800      	ldr	r0, [sp, #0]
   d611a:	f7ff f8bd 	bl	d5298 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d611e:	4638      	mov	r0, r7
   d6120:	b015      	add	sp, #84	; 0x54
   d6122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6128 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6128:	4b02      	ldr	r3, [pc, #8]	; (d6134 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d612a:	4a03      	ldr	r2, [pc, #12]	; (d6138 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d612c:	601a      	str	r2, [r3, #0]
   d612e:	2200      	movs	r2, #0
   d6130:	605a      	str	r2, [r3, #4]

} // spark
   d6132:	4770      	bx	lr
   d6134:	2003e614 	.word	0x2003e614
   d6138:	000d9804 	.word	0x000d9804

000d613c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d613e:	4606      	mov	r6, r0
   d6140:	460d      	mov	r5, r1
  size_t n = 0;
   d6142:	188f      	adds	r7, r1, r2
   d6144:	2400      	movs	r4, #0
  while (size--) {
   d6146:	42bd      	cmp	r5, r7
   d6148:	d00c      	beq.n	d6164 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d614a:	6833      	ldr	r3, [r6, #0]
   d614c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6150:	689b      	ldr	r3, [r3, #8]
   d6152:	4630      	mov	r0, r6
   d6154:	4798      	blx	r3
     if (chunk>=0)
   d6156:	1e03      	subs	r3, r0, #0
   d6158:	db01      	blt.n	d615e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d615a:	441c      	add	r4, r3
  while (size--) {
   d615c:	e7f3      	b.n	d6146 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d615e:	2c00      	cmp	r4, #0
   d6160:	bf08      	it	eq
   d6162:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6164:	4620      	mov	r0, r4
   d6166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6168 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6168:	b513      	push	{r0, r1, r4, lr}
   d616a:	4604      	mov	r4, r0
    }
   d616c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d616e:	b159      	cbz	r1, d6188 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6170:	9101      	str	r1, [sp, #4]
   d6172:	f001 fa18 	bl	d75a6 <strlen>
   d6176:	6823      	ldr	r3, [r4, #0]
   d6178:	9901      	ldr	r1, [sp, #4]
   d617a:	68db      	ldr	r3, [r3, #12]
   d617c:	4602      	mov	r2, r0
   d617e:	4620      	mov	r0, r4
    }
   d6180:	b002      	add	sp, #8
   d6182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6186:	4718      	bx	r3
    }
   d6188:	b002      	add	sp, #8
   d618a:	bd10      	pop	{r4, pc}

000d618c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d618c:	6803      	ldr	r3, [r0, #0]
   d618e:	689b      	ldr	r3, [r3, #8]
   d6190:	4718      	bx	r3

000d6192 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6192:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6194:	210d      	movs	r1, #13
{
   d6196:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6198:	f7ff fff8 	bl	d618c <_ZN5Print5printEc>
  n += print('\n');
   d619c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d619e:	4604      	mov	r4, r0
  n += print('\n');
   d61a0:	4628      	mov	r0, r5
   d61a2:	f7ff fff3 	bl	d618c <_ZN5Print5printEc>
  return n;
}
   d61a6:	4420      	add	r0, r4
   d61a8:	bd38      	pop	{r3, r4, r5, pc}

000d61aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d61aa:	b538      	push	{r3, r4, r5, lr}
   d61ac:	4605      	mov	r5, r0
  return write(str);
   d61ae:	f7ff ffdb 	bl	d6168 <_ZN5Print5writeEPKc>
   d61b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d61b4:	4628      	mov	r0, r5
   d61b6:	f7ff ffec 	bl	d6192 <_ZN5Print7printlnEv>
  return n;
}
   d61ba:	4420      	add	r0, r4
   d61bc:	bd38      	pop	{r3, r4, r5, pc}

000d61be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61be:	b530      	push	{r4, r5, lr}
   d61c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61c2:	2300      	movs	r3, #0
   d61c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61c8:	2a01      	cmp	r2, #1
   d61ca:	bf98      	it	ls
   d61cc:	220a      	movls	r2, #10
   d61ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d61d0:	460d      	mov	r5, r1
   d61d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d61d6:	fb01 5312 	mls	r3, r1, r2, r5
   d61da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61de:	2b09      	cmp	r3, #9
   d61e0:	bf94      	ite	ls
   d61e2:	3330      	addls	r3, #48	; 0x30
   d61e4:	3337      	addhi	r3, #55	; 0x37
   d61e6:	b2db      	uxtb	r3, r3
  } while(n);
   d61e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d61ee:	d9ef      	bls.n	d61d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d61f0:	4621      	mov	r1, r4
   d61f2:	f7ff ffb9 	bl	d6168 <_ZN5Print5writeEPKc>
}
   d61f6:	b00b      	add	sp, #44	; 0x2c
   d61f8:	bd30      	pop	{r4, r5, pc}

000d61fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61fa:	b510      	push	{r4, lr}
   d61fc:	4604      	mov	r4, r0
   d61fe:	f7ff fac7 	bl	d5790 <_ZNSt14_Function_baseD1Ev>
   d6202:	4620      	mov	r0, r4
   d6204:	bd10      	pop	{r4, pc}
	...

000d6208 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6208:	4803      	ldr	r0, [pc, #12]	; (d6218 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d620a:	4a04      	ldr	r2, [pc, #16]	; (d621c <_GLOBAL__sub_I_RGB+0x14>)
   d620c:	4904      	ldr	r1, [pc, #16]	; (d6220 <_GLOBAL__sub_I_RGB+0x18>)
   d620e:	2300      	movs	r3, #0
   d6210:	6083      	str	r3, [r0, #8]
   d6212:	f000 bc33 	b.w	d6a7c <__aeabi_atexit>
   d6216:	bf00      	nop
   d6218:	2003e61c 	.word	0x2003e61c
   d621c:	2003e498 	.word	0x2003e498
   d6220:	000d61fb 	.word	0x000d61fb

000d6224 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6224:	b510      	push	{r4, lr}
   d6226:	4604      	mov	r4, r0
   d6228:	4608      	mov	r0, r1
{
    _spi = spi;
   d622a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d622c:	f7ff f844 	bl	d52b8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6230:	2300      	movs	r3, #0
   d6232:	6063      	str	r3, [r4, #4]
}
   d6234:	4620      	mov	r0, r4
   d6236:	bd10      	pop	{r4, pc}

000d6238 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6238:	b510      	push	{r4, lr}
   d623a:	4604      	mov	r4, r0
{
	free(buffer);
   d623c:	6800      	ldr	r0, [r0, #0]
   d623e:	f7ff f9d3 	bl	d55e8 <free>
}
   d6242:	4620      	mov	r0, r4
   d6244:	bd10      	pop	{r4, pc}

000d6246 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6246:	b510      	push	{r4, lr}
   d6248:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d624a:	6800      	ldr	r0, [r0, #0]
   d624c:	b108      	cbz	r0, d6252 <_ZN6String10invalidateEv+0xc>
   d624e:	f7ff f9cb 	bl	d55e8 <free>
	buffer = NULL;
   d6252:	2300      	movs	r3, #0
	capacity = len = 0;
   d6254:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6258:	6023      	str	r3, [r4, #0]
}
   d625a:	bd10      	pop	{r4, pc}

000d625c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d625c:	b538      	push	{r3, r4, r5, lr}
   d625e:	4604      	mov	r4, r0
   d6260:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6262:	6800      	ldr	r0, [r0, #0]
   d6264:	3101      	adds	r1, #1
   d6266:	f7ff f9c7 	bl	d55f8 <realloc>
	if (newbuffer) {
   d626a:	b110      	cbz	r0, d6272 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d626c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6270:	2001      	movs	r0, #1
	}
	return 0;
}
   d6272:	bd38      	pop	{r3, r4, r5, pc}

000d6274 <_ZN6String7reserveEj>:
{
   d6274:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6276:	6803      	ldr	r3, [r0, #0]
{
   d6278:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d627a:	b123      	cbz	r3, d6286 <_ZN6String7reserveEj+0x12>
   d627c:	6843      	ldr	r3, [r0, #4]
   d627e:	428b      	cmp	r3, r1
   d6280:	d301      	bcc.n	d6286 <_ZN6String7reserveEj+0x12>
   d6282:	2001      	movs	r0, #1
}
   d6284:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6286:	4620      	mov	r0, r4
   d6288:	f7ff ffe8 	bl	d625c <_ZN6String12changeBufferEj>
   d628c:	2800      	cmp	r0, #0
   d628e:	d0f9      	beq.n	d6284 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6290:	68a3      	ldr	r3, [r4, #8]
   d6292:	2b00      	cmp	r3, #0
   d6294:	d1f5      	bne.n	d6282 <_ZN6String7reserveEj+0xe>
   d6296:	6822      	ldr	r2, [r4, #0]
   d6298:	7013      	strb	r3, [r2, #0]
   d629a:	e7f2      	b.n	d6282 <_ZN6String7reserveEj+0xe>

000d629c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d629c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d629e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d62a0:	4611      	mov	r1, r2
   d62a2:	9201      	str	r2, [sp, #4]
{
   d62a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d62a6:	f7ff ffe5 	bl	d6274 <_ZN6String7reserveEj>
   d62aa:	9a01      	ldr	r2, [sp, #4]
   d62ac:	b928      	cbnz	r0, d62ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d62ae:	4620      	mov	r0, r4
   d62b0:	f7ff ffc9 	bl	d6246 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d62b4:	4620      	mov	r0, r4
   d62b6:	b003      	add	sp, #12
   d62b8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d62ba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d62bc:	4629      	mov	r1, r5
   d62be:	6820      	ldr	r0, [r4, #0]
   d62c0:	f001 f908 	bl	d74d4 <memcpy>
	buffer[len] = 0;
   d62c4:	6822      	ldr	r2, [r4, #0]
   d62c6:	68a3      	ldr	r3, [r4, #8]
   d62c8:	2100      	movs	r1, #0
   d62ca:	54d1      	strb	r1, [r2, r3]
	return *this;
   d62cc:	e7f2      	b.n	d62b4 <_ZN6String4copyEPKcj+0x18>

000d62ce <_ZN6StringC1EPKc>:
	buffer = NULL;
   d62ce:	2300      	movs	r3, #0
String::String(const char *cstr)
   d62d0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d62d2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d62d6:	4604      	mov	r4, r0
	len = 0;
   d62d8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d62da:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d62dc:	b141      	cbz	r1, d62f0 <_ZN6StringC1EPKc+0x22>
   d62de:	4608      	mov	r0, r1
   d62e0:	9101      	str	r1, [sp, #4]
   d62e2:	f001 f960 	bl	d75a6 <strlen>
   d62e6:	9901      	ldr	r1, [sp, #4]
   d62e8:	4602      	mov	r2, r0
   d62ea:	4620      	mov	r0, r4
   d62ec:	f7ff ffd6 	bl	d629c <_ZN6String4copyEPKcj>
}
   d62f0:	4620      	mov	r0, r4
   d62f2:	b002      	add	sp, #8
   d62f4:	bd10      	pop	{r4, pc}

000d62f6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d62f6:	4288      	cmp	r0, r1
{
   d62f8:	b510      	push	{r4, lr}
   d62fa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d62fc:	d005      	beq.n	d630a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d62fe:	680b      	ldr	r3, [r1, #0]
   d6300:	b12b      	cbz	r3, d630e <_ZN6StringaSERKS_+0x18>
   d6302:	688a      	ldr	r2, [r1, #8]
   d6304:	4619      	mov	r1, r3
   d6306:	f7ff ffc9 	bl	d629c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d630a:	4620      	mov	r0, r4
   d630c:	bd10      	pop	{r4, pc}
	else invalidate();
   d630e:	f7ff ff9a 	bl	d6246 <_ZN6String10invalidateEv>
   d6312:	e7fa      	b.n	d630a <_ZN6StringaSERKS_+0x14>

000d6314 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6314:	b510      	push	{r4, lr}
	buffer = NULL;
   d6316:	2300      	movs	r3, #0
String::String(const String &value)
   d6318:	4604      	mov	r4, r0
	capacity = 0;
   d631a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d631e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6320:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6322:	f7ff ffe8 	bl	d62f6 <_ZN6StringaSERKS_>
}
   d6326:	4620      	mov	r0, r4
   d6328:	bd10      	pop	{r4, pc}

000d632a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d632a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d632c:	6882      	ldr	r2, [r0, #8]
   d632e:	b93a      	cbnz	r2, d6340 <_ZNK6String6equalsEPKc+0x16>
   d6330:	b121      	cbz	r1, d633c <_ZNK6String6equalsEPKc+0x12>
   d6332:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6334:	fab0 f080 	clz	r0, r0
   d6338:	0940      	lsrs	r0, r0, #5
   d633a:	e000      	b.n	d633e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d633c:	2001      	movs	r0, #1
}
   d633e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6340:	6800      	ldr	r0, [r0, #0]
   d6342:	b909      	cbnz	r1, d6348 <_ZNK6String6equalsEPKc+0x1e>
   d6344:	7800      	ldrb	r0, [r0, #0]
   d6346:	e7f5      	b.n	d6334 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6348:	f001 f8fe 	bl	d7548 <strcmp>
   d634c:	e7f2      	b.n	d6334 <_ZNK6String6equalsEPKc+0xa>

000d634e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d634e:	b558      	push	{r3, r4, r6, lr}
   d6350:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6352:	b12a      	cbz	r2, d6360 <_ZNK6String8getBytesEPhjj+0x12>
   d6354:	b121      	cbz	r1, d6360 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d6356:	6884      	ldr	r4, [r0, #8]
   d6358:	429c      	cmp	r4, r3
   d635a:	d802      	bhi.n	d6362 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d635c:	2300      	movs	r3, #0
   d635e:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d6360:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d6362:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6364:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d6366:	6801      	ldr	r1, [r0, #0]
   d6368:	4294      	cmp	r4, r2
   d636a:	bf28      	it	cs
   d636c:	4614      	movcs	r4, r2
   d636e:	4419      	add	r1, r3
   d6370:	4622      	mov	r2, r4
   d6372:	4630      	mov	r0, r6
   d6374:	f001 f931 	bl	d75da <strncpy>
	buf[n] = 0;
   d6378:	2300      	movs	r3, #0
   d637a:	5533      	strb	r3, [r6, r4]
   d637c:	e7f0      	b.n	d6360 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d6380 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d6380:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d6382:	6800      	ldr	r0, [r0, #0]
   d6384:	b140      	cbz	r0, d6398 <_ZNK6String7toFloatEv+0x18>
   d6386:	f001 f88f 	bl	d74a8 <atof>
   d638a:	ec51 0b10 	vmov	r0, r1, d0
   d638e:	f000 fff7 	bl	d7380 <__aeabi_d2f>
   d6392:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d6396:	bd08      	pop	{r3, pc}
	return 0;
   d6398:	ed9f 0a01 	vldr	s0, [pc, #4]	; d63a0 <_ZNK6String7toFloatEv+0x20>
   d639c:	e7fb      	b.n	d6396 <_ZNK6String7toFloatEv+0x16>
   d639e:	bf00      	nop
   d63a0:	00000000 	.word	0x00000000

000d63a4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d63a4:	b507      	push	{r0, r1, r2, lr}
   d63a6:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d63a8:	2100      	movs	r1, #0
{
   d63aa:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d63ac:	9100      	str	r1, [sp, #0]
   d63ae:	2001      	movs	r0, #1
   d63b0:	218c      	movs	r1, #140	; 0x8c
   d63b2:	f7ff f867 	bl	d5484 <system_reset>
}
   d63b6:	b003      	add	sp, #12
   d63b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d63bc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d63bc:	4601      	mov	r1, r0
    reset(0, flags);
   d63be:	2000      	movs	r0, #0
   d63c0:	f7ff bff0 	b.w	d63a4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d63c4 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d63c4:	2000      	movs	r0, #0
   d63c6:	f7ff bff9 	b.w	d63bc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d63cc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d63cc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d63ce:	4b09      	ldr	r3, [pc, #36]	; (d63f4 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d63d0:	4c09      	ldr	r4, [pc, #36]	; (d63f8 <_GLOBAL__sub_I_System+0x2c>)
   d63d2:	2202      	movs	r2, #2
   d63d4:	2000      	movs	r0, #0
   d63d6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d63d8:	4b08      	ldr	r3, [pc, #32]	; (d63fc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d63da:	6020      	str	r0, [r4, #0]
   d63dc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d63de:	71a0      	strb	r0, [r4, #6]
   d63e0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d63e2:	f7ff f80b 	bl	d53fc <set_system_mode>
SystemClass System;
   d63e6:	4620      	mov	r0, r4
   d63e8:	4a05      	ldr	r2, [pc, #20]	; (d6400 <_GLOBAL__sub_I_System+0x34>)
   d63ea:	4906      	ldr	r1, [pc, #24]	; (d6404 <_GLOBAL__sub_I_System+0x38>)
   d63ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d63f0:	f000 bb44 	b.w	d6a7c <__aeabi_atexit>
   d63f4:	2003e638 	.word	0x2003e638
   d63f8:	2003e62c 	.word	0x2003e62c
   d63fc:	ffff0000 	.word	0xffff0000
   d6400:	2003e498 	.word	0x2003e498
   d6404:	000d410d 	.word	0x000d410d

000d6408 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d640c:	4a15      	ldr	r2, [pc, #84]	; (d6464 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d640e:	f8df 8060 	ldr.w	r8, [pc, #96]	; d6470 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d6412:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6416:	18c0      	adds	r0, r0, r3
   d6418:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d641c:	4a12      	ldr	r2, [pc, #72]	; (d6468 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d641e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6422:	18c6      	adds	r6, r0, r3
   d6424:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d6428:	e9d8 2300 	ldrd	r2, r3, [r8]
   d642c:	42bb      	cmp	r3, r7
   d642e:	bf08      	it	eq
   d6430:	42b2      	cmpeq	r2, r6
{
   d6432:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d6434:	d013      	beq.n	d645e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d6436:	a903      	add	r1, sp, #12
   d6438:	4668      	mov	r0, sp
   d643a:	e9cd 6700 	strd	r6, r7, [sp]
   d643e:	f7ff f90b 	bl	d5658 <localtime_r>
	calendar_time.tm_year += 1900;
   d6442:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6444:	4d09      	ldr	r5, [pc, #36]	; (d646c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d6446:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d644a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d644c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d644e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6456:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d645a:	6823      	ldr	r3, [r4, #0]
   d645c:	602b      	str	r3, [r5, #0]
    }
}
   d645e:	b00c      	add	sp, #48	; 0x30
   d6460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6464:	2003e670 	.word	0x2003e670
   d6468:	2003e668 	.word	0x2003e668
   d646c:	2003e640 	.word	0x2003e640
   d6470:	2003e678 	.word	0x2003e678

000d6474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6474:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6476:	2000      	movs	r0, #0
   d6478:	f7ff f84e 	bl	d5518 <spark_sync_time_pending>
   d647c:	b128      	cbz	r0, d648a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d647e:	f7ff f823 	bl	d54c8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6482:	f080 0001 	eor.w	r0, r0, #1
   d6486:	b2c0      	uxtb	r0, r0
    }
   d6488:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d648a:	2001      	movs	r0, #1
   d648c:	e7fc      	b.n	d6488 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d6490 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6490:	b530      	push	{r4, r5, lr}
   d6492:	4604      	mov	r4, r0
    t += time_zone_cache;
   d6494:	4818      	ldr	r0, [pc, #96]	; (d64f8 <_ZN9TimeClass7timeStrEx+0x68>)
   d6496:	e9d0 1000 	ldrd	r1, r0, [r0]
   d649a:	1852      	adds	r2, r2, r1
   d649c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d64a0:	4816      	ldr	r0, [pc, #88]	; (d64fc <_ZN9TimeClass7timeStrEx+0x6c>)
   d64a2:	e9d0 1000 	ldrd	r1, r0, [r0]
   d64a6:	1852      	adds	r2, r2, r1
{
   d64a8:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d64aa:	eb40 0303 	adc.w	r3, r0, r3
   d64ae:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d64b2:	2224      	movs	r2, #36	; 0x24
   d64b4:	eb0d 0002 	add.w	r0, sp, r2
   d64b8:	2100      	movs	r1, #0
   d64ba:	f001 f819 	bl	d74f0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d64be:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d64c0:	a909      	add	r1, sp, #36	; 0x24
   d64c2:	4668      	mov	r0, sp
   d64c4:	f7ff f8c8 	bl	d5658 <localtime_r>
    char ascstr[26] = {};
   d64c8:	2216      	movs	r2, #22
   d64ca:	4629      	mov	r1, r5
   d64cc:	a803      	add	r0, sp, #12
   d64ce:	9502      	str	r5, [sp, #8]
   d64d0:	f001 f80e 	bl	d74f0 <memset>
    asctime_r(&calendar_time, ascstr);
   d64d4:	a902      	add	r1, sp, #8
   d64d6:	a809      	add	r0, sp, #36	; 0x24
   d64d8:	f000 ffc0 	bl	d745c <asctime_r>
    int len = strlen(ascstr);
   d64dc:	a802      	add	r0, sp, #8
   d64de:	f001 f862 	bl	d75a6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d64e2:	ab12      	add	r3, sp, #72	; 0x48
   d64e4:	4418      	add	r0, r3
    return String(ascstr);
   d64e6:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d64e8:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d64ec:	4620      	mov	r0, r4
   d64ee:	f7ff feee 	bl	d62ce <_ZN6StringC1EPKc>
}
   d64f2:	4620      	mov	r0, r4
   d64f4:	b013      	add	sp, #76	; 0x4c
   d64f6:	bd30      	pop	{r4, r5, pc}
   d64f8:	2003e670 	.word	0x2003e670
   d64fc:	2003e668 	.word	0x2003e668

000d6500 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6500:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6502:	2000      	movs	r0, #0
   d6504:	f7fe fe28 	bl	d5158 <hal_rtc_time_is_valid>
    if (rtcstate)
   d6508:	4604      	mov	r4, r0
   d650a:	b9a0      	cbnz	r0, d6536 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d650c:	f7fe ff6e 	bl	d53ec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6510:	2801      	cmp	r0, #1
   d6512:	d110      	bne.n	d6536 <_ZN9TimeClass7isValidEv+0x36>
   d6514:	4620      	mov	r0, r4
   d6516:	f7fe ff99 	bl	d544c <system_thread_get_state>
   d651a:	b960      	cbnz	r0, d6536 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d651c:	f7ff ffaa 	bl	d6474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6520:	b910      	cbnz	r0, d6528 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6522:	f7fe ffc9 	bl	d54b8 <spark_process>
        while (_while() && !_condition()) {
   d6526:	e7f9      	b.n	d651c <_ZN9TimeClass7isValidEv+0x1c>
   d6528:	f7ff ffa4 	bl	d6474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6530:	2000      	movs	r0, #0
   d6532:	f7fe be11 	b.w	d5158 <hal_rtc_time_is_valid>
}
   d6536:	4620      	mov	r0, r4
   d6538:	bd10      	pop	{r4, pc}

000d653a <_ZN9TimeClass3nowEv>:
{
   d653a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d653c:	f7ff ffe0 	bl	d6500 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6540:	2210      	movs	r2, #16
   d6542:	2100      	movs	r1, #0
   d6544:	4668      	mov	r0, sp
   d6546:	f000 ffd3 	bl	d74f0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d654a:	2100      	movs	r1, #0
   d654c:	4668      	mov	r0, sp
   d654e:	f7fe fe0b 	bl	d5168 <hal_rtc_get_time>
}
   d6552:	9800      	ldr	r0, [sp, #0]
   d6554:	b005      	add	sp, #20
   d6556:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d655c <_ZN9TimeClass4hourEv>:
{
   d655c:	b508      	push	{r3, lr}
	return hour(now());
   d655e:	f7ff ffec 	bl	d653a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6562:	17c1      	asrs	r1, r0, #31
   d6564:	f7ff ff50 	bl	d6408 <_ZL22Refresh_UnixTime_Cachex>
}
   d6568:	4b01      	ldr	r3, [pc, #4]	; (d6570 <_ZN9TimeClass4hourEv+0x14>)
   d656a:	6898      	ldr	r0, [r3, #8]
   d656c:	bd08      	pop	{r3, pc}
   d656e:	bf00      	nop
   d6570:	2003e640 	.word	0x2003e640

000d6574 <_ZN9TimeClass6minuteEv>:
{
   d6574:	b508      	push	{r3, lr}
	return minute(now());
   d6576:	f7ff ffe0 	bl	d653a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d657a:	17c1      	asrs	r1, r0, #31
   d657c:	f7ff ff44 	bl	d6408 <_ZL22Refresh_UnixTime_Cachex>
}
   d6580:	4b01      	ldr	r3, [pc, #4]	; (d6588 <_ZN9TimeClass6minuteEv+0x14>)
   d6582:	6858      	ldr	r0, [r3, #4]
   d6584:	bd08      	pop	{r3, pc}
   d6586:	bf00      	nop
   d6588:	2003e640 	.word	0x2003e640

000d658c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d658c:	4b02      	ldr	r3, [pc, #8]	; (d6598 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	4b02      	ldr	r3, [pc, #8]	; (d659c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6592:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6594:	4770      	bx	lr
   d6596:	bf00      	nop
   d6598:	2003e2c0 	.word	0x2003e2c0
   d659c:	2003e63c 	.word	0x2003e63c

000d65a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d65a0:	4770      	bx	lr

000d65a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65a2:	7441      	strb	r1, [r0, #17]
}
   d65a4:	4770      	bx	lr

000d65a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d65a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d65a8:	7c00      	ldrb	r0, [r0, #16]
   d65aa:	f7fe fecd 	bl	d5348 <hal_usart_available_data_for_write>
}
   d65ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65b2:	bd08      	pop	{r3, pc}

000d65b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d65b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d65b6:	7c00      	ldrb	r0, [r0, #16]
   d65b8:	f7fe fe9e 	bl	d52f8 <hal_usart_available>
}
   d65bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65c0:	bd08      	pop	{r3, pc}

000d65c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d65c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d65c4:	7c00      	ldrb	r0, [r0, #16]
   d65c6:	f7fe fea7 	bl	d5318 <hal_usart_peek>
}
   d65ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65ce:	bd08      	pop	{r3, pc}

000d65d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d65d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d65d2:	7c00      	ldrb	r0, [r0, #16]
   d65d4:	f7fe fe98 	bl	d5308 <hal_usart_read>
}
   d65d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65dc:	bd08      	pop	{r3, pc}

000d65de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d65de:	7c00      	ldrb	r0, [r0, #16]
   d65e0:	f7fe bea2 	b.w	d5328 <hal_usart_flush>

000d65e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d65e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d65e6:	7c45      	ldrb	r5, [r0, #17]
{
   d65e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d65ea:	b12d      	cbz	r5, d65f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d65ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d65ee:	b003      	add	sp, #12
   d65f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d65f4:	f7fe be78 	b.w	d52e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	9101      	str	r1, [sp, #4]
   d65fc:	f7fe fea4 	bl	d5348 <hal_usart_available_data_for_write>
   d6600:	2800      	cmp	r0, #0
   d6602:	9901      	ldr	r1, [sp, #4]
   d6604:	dcf2      	bgt.n	d65ec <_ZN11USARTSerial5writeEh+0x8>
}
   d6606:	4628      	mov	r0, r5
   d6608:	b003      	add	sp, #12
   d660a:	bd30      	pop	{r4, r5, pc}

000d660c <_ZN11USARTSerialD0Ev>:
   d660c:	b510      	push	{r4, lr}
   d660e:	2114      	movs	r1, #20
   d6610:	4604      	mov	r4, r0
   d6612:	f000 fa38 	bl	d6a86 <_ZdlPvj>
   d6616:	4620      	mov	r0, r4
   d6618:	bd10      	pop	{r4, pc}
	...

000d661c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d661c:	b510      	push	{r4, lr}
   d661e:	f04f 0c00 	mov.w	ip, #0
   d6622:	4604      	mov	r4, r0
   d6624:	4608      	mov	r0, r1
   d6626:	4611      	mov	r1, r2
   d6628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d662c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6630:	4a04      	ldr	r2, [pc, #16]	; (d6644 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6632:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6634:	2201      	movs	r2, #1
  _serial = serial;
   d6636:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6638:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d663a:	461a      	mov	r2, r3
   d663c:	f7fe fe4c 	bl	d52d8 <hal_usart_init>
}
   d6640:	4620      	mov	r0, r4
   d6642:	bd10      	pop	{r4, pc}
   d6644:	000d9854 	.word	0x000d9854

000d6648 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6648:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d664a:	4c0e      	ldr	r4, [pc, #56]	; (d6684 <_Z22__fetch_global_Serial1v+0x3c>)
   d664c:	7821      	ldrb	r1, [r4, #0]
   d664e:	f3bf 8f5b 	dmb	ish
   d6652:	f011 0101 	ands.w	r1, r1, #1
   d6656:	d112      	bne.n	d667e <_Z22__fetch_global_Serial1v+0x36>
   d6658:	4620      	mov	r0, r4
   d665a:	9101      	str	r1, [sp, #4]
   d665c:	f7fd fd21 	bl	d40a2 <__cxa_guard_acquire>
   d6660:	9901      	ldr	r1, [sp, #4]
   d6662:	b160      	cbz	r0, d667e <_Z22__fetch_global_Serial1v+0x36>
   d6664:	4a08      	ldr	r2, [pc, #32]	; (d6688 <_Z22__fetch_global_Serial1v+0x40>)
   d6666:	4b09      	ldr	r3, [pc, #36]	; (d668c <_Z22__fetch_global_Serial1v+0x44>)
   d6668:	4809      	ldr	r0, [pc, #36]	; (d6690 <_Z22__fetch_global_Serial1v+0x48>)
   d666a:	f7ff ffd7 	bl	d661c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d666e:	4620      	mov	r0, r4
   d6670:	f7fd fd1c 	bl	d40ac <__cxa_guard_release>
   d6674:	4a07      	ldr	r2, [pc, #28]	; (d6694 <_Z22__fetch_global_Serial1v+0x4c>)
   d6676:	4908      	ldr	r1, [pc, #32]	; (d6698 <_Z22__fetch_global_Serial1v+0x50>)
   d6678:	4805      	ldr	r0, [pc, #20]	; (d6690 <_Z22__fetch_global_Serial1v+0x48>)
   d667a:	f000 f9ff 	bl	d6a7c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d667e:	4804      	ldr	r0, [pc, #16]	; (d6690 <_Z22__fetch_global_Serial1v+0x48>)
   d6680:	b002      	add	sp, #8
   d6682:	bd10      	pop	{r4, pc}
   d6684:	2003e680 	.word	0x2003e680
   d6688:	2003e684 	.word	0x2003e684
   d668c:	2003e708 	.word	0x2003e708
   d6690:	2003e78c 	.word	0x2003e78c
   d6694:	2003e498 	.word	0x2003e498
   d6698:	000d65a1 	.word	0x000d65a1

000d669c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d669c:	7441      	strb	r1, [r0, #17]
}
   d669e:	4770      	bx	lr

000d66a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d66a0:	4770      	bx	lr

000d66a2 <_ZN9USBSerial4readEv>:
{
   d66a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d66a4:	2100      	movs	r1, #0
   d66a6:	7c00      	ldrb	r0, [r0, #16]
   d66a8:	f7fe fe76 	bl	d5398 <HAL_USB_USART_Receive_Data>
}
   d66ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66b0:	bd08      	pop	{r3, pc}

000d66b2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d66b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d66b4:	2101      	movs	r1, #1
   d66b6:	7c00      	ldrb	r0, [r0, #16]
   d66b8:	f7fe fe6e 	bl	d5398 <HAL_USB_USART_Receive_Data>
}
   d66bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66c0:	bd08      	pop	{r3, pc}

000d66c2 <_ZN9USBSerial17availableForWriteEv>:
{
   d66c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d66c4:	7c00      	ldrb	r0, [r0, #16]
   d66c6:	f7fe fe5f 	bl	d5388 <HAL_USB_USART_Available_Data_For_Write>
}
   d66ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66ce:	bd08      	pop	{r3, pc}

000d66d0 <_ZN9USBSerial9availableEv>:
{
   d66d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d66d2:	7c00      	ldrb	r0, [r0, #16]
   d66d4:	f7fe fe50 	bl	d5378 <HAL_USB_USART_Available_Data>
}
   d66d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66dc:	bd08      	pop	{r3, pc}

000d66de <_ZN9USBSerial5writeEh>:
{
   d66de:	b513      	push	{r0, r1, r4, lr}
   d66e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66e2:	7c00      	ldrb	r0, [r0, #16]
{
   d66e4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66e6:	f7fe fe4f 	bl	d5388 <HAL_USB_USART_Available_Data_For_Write>
   d66ea:	2800      	cmp	r0, #0
   d66ec:	9901      	ldr	r1, [sp, #4]
   d66ee:	dc01      	bgt.n	d66f4 <_ZN9USBSerial5writeEh+0x16>
   d66f0:	7c60      	ldrb	r0, [r4, #17]
   d66f2:	b120      	cbz	r0, d66fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d66f4:	7c20      	ldrb	r0, [r4, #16]
   d66f6:	f7fe fe57 	bl	d53a8 <HAL_USB_USART_Send_Data>
   d66fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d66fe:	b002      	add	sp, #8
   d6700:	bd10      	pop	{r4, pc}

000d6702 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6702:	7c00      	ldrb	r0, [r0, #16]
   d6704:	f7fe be58 	b.w	d53b8 <HAL_USB_USART_Flush_Data>

000d6708 <_ZN9USBSerialD0Ev>:
   d6708:	b510      	push	{r4, lr}
   d670a:	2114      	movs	r1, #20
   d670c:	4604      	mov	r4, r0
   d670e:	f000 f9ba 	bl	d6a86 <_ZdlPvj>
   d6712:	4620      	mov	r0, r4
   d6714:	bd10      	pop	{r4, pc}
	...

000d6718 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6718:	b510      	push	{r4, lr}
   d671a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d671e:	4604      	mov	r4, r0
   d6720:	4608      	mov	r0, r1
   d6722:	2100      	movs	r1, #0
   d6724:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6728:	4b04      	ldr	r3, [pc, #16]	; (d673c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d672a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d672c:	2301      	movs	r3, #1
  _serial = serial;
   d672e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6730:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6732:	4611      	mov	r1, r2
   d6734:	f7fe fe10 	bl	d5358 <HAL_USB_USART_Init>
}
   d6738:	4620      	mov	r0, r4
   d673a:	bd10      	pop	{r4, pc}
   d673c:	000d9884 	.word	0x000d9884

000d6740 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6740:	7c00      	ldrb	r0, [r0, #16]
   d6742:	2200      	movs	r2, #0
   d6744:	f7fe be10 	b.w	d5368 <HAL_USB_USART_Begin>

000d6748 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6748:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d674a:	2214      	movs	r2, #20
{
   d674c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d674e:	2100      	movs	r1, #0
   d6750:	f000 fece 	bl	d74f0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6754:	4620      	mov	r0, r4
   d6756:	bd10      	pop	{r4, pc}

000d6758 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6758:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d675a:	4c10      	ldr	r4, [pc, #64]	; (d679c <_Z16_fetch_usbserialv+0x44>)
{
   d675c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d675e:	a803      	add	r0, sp, #12
   d6760:	f7ff fff2 	bl	d6748 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6764:	7821      	ldrb	r1, [r4, #0]
   d6766:	f3bf 8f5b 	dmb	ish
   d676a:	f011 0101 	ands.w	r1, r1, #1
   d676e:	d111      	bne.n	d6794 <_Z16_fetch_usbserialv+0x3c>
   d6770:	4620      	mov	r0, r4
   d6772:	9101      	str	r1, [sp, #4]
   d6774:	f7fd fc95 	bl	d40a2 <__cxa_guard_acquire>
   d6778:	9901      	ldr	r1, [sp, #4]
   d677a:	b158      	cbz	r0, d6794 <_Z16_fetch_usbserialv+0x3c>
   d677c:	aa03      	add	r2, sp, #12
   d677e:	4808      	ldr	r0, [pc, #32]	; (d67a0 <_Z16_fetch_usbserialv+0x48>)
   d6780:	f7ff ffca 	bl	d6718 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6784:	4620      	mov	r0, r4
   d6786:	f7fd fc91 	bl	d40ac <__cxa_guard_release>
   d678a:	4a06      	ldr	r2, [pc, #24]	; (d67a4 <_Z16_fetch_usbserialv+0x4c>)
   d678c:	4906      	ldr	r1, [pc, #24]	; (d67a8 <_Z16_fetch_usbserialv+0x50>)
   d678e:	4804      	ldr	r0, [pc, #16]	; (d67a0 <_Z16_fetch_usbserialv+0x48>)
   d6790:	f000 f974 	bl	d6a7c <__aeabi_atexit>
	return _usbserial;
}
   d6794:	4802      	ldr	r0, [pc, #8]	; (d67a0 <_Z16_fetch_usbserialv+0x48>)
   d6796:	b008      	add	sp, #32
   d6798:	bd10      	pop	{r4, pc}
   d679a:	bf00      	nop
   d679c:	2003e7a0 	.word	0x2003e7a0
   d67a0:	2003e7a4 	.word	0x2003e7a4
   d67a4:	2003e498 	.word	0x2003e498
   d67a8:	000d66a1 	.word	0x000d66a1

000d67ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d67ac:	4b01      	ldr	r3, [pc, #4]	; (d67b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d67ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d67b0:	4770      	bx	lr
   d67b2:	bf00      	nop
   d67b4:	2003e2c4 	.word	0x2003e2c4

000d67b8 <serialEventRun>:
{
   d67b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d67ba:	4b0b      	ldr	r3, [pc, #44]	; (d67e8 <serialEventRun+0x30>)
   d67bc:	b143      	cbz	r3, d67d0 <serialEventRun+0x18>
   d67be:	f7ff ffcb 	bl	d6758 <_Z16_fetch_usbserialv>
   d67c2:	6803      	ldr	r3, [r0, #0]
   d67c4:	691b      	ldr	r3, [r3, #16]
   d67c6:	4798      	blx	r3
   d67c8:	2800      	cmp	r0, #0
   d67ca:	dd01      	ble.n	d67d0 <serialEventRun+0x18>
        serialEvent();
   d67cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d67d0:	4b06      	ldr	r3, [pc, #24]	; (d67ec <serialEventRun+0x34>)
   d67d2:	b143      	cbz	r3, d67e6 <serialEventRun+0x2e>
   d67d4:	f7ff ff38 	bl	d6648 <_Z22__fetch_global_Serial1v>
   d67d8:	6803      	ldr	r3, [r0, #0]
   d67da:	691b      	ldr	r3, [r3, #16]
   d67dc:	4798      	blx	r3
   d67de:	2800      	cmp	r0, #0
   d67e0:	dd01      	ble.n	d67e6 <serialEventRun+0x2e>
        serialEvent1();
   d67e2:	f3af 8000 	nop.w
}
   d67e6:	bd08      	pop	{r3, pc}
	...

000d67f0 <_post_loop>:
{
   d67f0:	b508      	push	{r3, lr}
	serialEventRun();
   d67f2:	f7ff ffe1 	bl	d67b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67f6:	f7fe fc87 	bl	d5108 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67fa:	4b01      	ldr	r3, [pc, #4]	; (d6800 <_post_loop+0x10>)
   d67fc:	6018      	str	r0, [r3, #0]
}
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	2003e7cc 	.word	0x2003e7cc

000d6804 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6804:	4802      	ldr	r0, [pc, #8]	; (d6810 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6806:	4a03      	ldr	r2, [pc, #12]	; (d6814 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6808:	4903      	ldr	r1, [pc, #12]	; (d6818 <_Z33system_initialize_user_backup_ramv+0x14>)
   d680a:	1a12      	subs	r2, r2, r0
   d680c:	f000 be62 	b.w	d74d4 <memcpy>
   d6810:	2003f400 	.word	0x2003f400
   d6814:	2003f404 	.word	0x2003f404
   d6818:	000d9ba0 	.word	0x000d9ba0

000d681c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d681c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d681e:	2300      	movs	r3, #0
   d6820:	9300      	str	r3, [sp, #0]
   d6822:	461a      	mov	r2, r3
   d6824:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6828:	f7fe fe22 	bl	d5470 <system_ctrl_set_result>
}
   d682c:	b003      	add	sp, #12
   d682e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6834 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6834:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6836:	8843      	ldrh	r3, [r0, #2]
   d6838:	2b0a      	cmp	r3, #10
   d683a:	d008      	beq.n	d684e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d683c:	2b50      	cmp	r3, #80	; 0x50
   d683e:	d10b      	bne.n	d6858 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6840:	4b09      	ldr	r3, [pc, #36]	; (d6868 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6842:	681b      	ldr	r3, [r3, #0]
   d6844:	b14b      	cbz	r3, d685a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6846:	b003      	add	sp, #12
   d6848:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d684c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d684e:	f7ff ffe5 	bl	d681c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6852:	b003      	add	sp, #12
   d6854:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6858:	2300      	movs	r3, #0
   d685a:	9300      	str	r3, [sp, #0]
   d685c:	461a      	mov	r2, r3
   d685e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6862:	f7fe fe05 	bl	d5470 <system_ctrl_set_result>
}
   d6866:	e7f4      	b.n	d6852 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6868:	2003e7bc 	.word	0x2003e7bc

000d686c <module_user_init_hook>:
{
   d686c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d686e:	4c12      	ldr	r4, [pc, #72]	; (d68b8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6870:	4812      	ldr	r0, [pc, #72]	; (d68bc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6872:	4d13      	ldr	r5, [pc, #76]	; (d68c0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6874:	2100      	movs	r1, #0
   d6876:	f7fe fee7 	bl	d5648 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d687a:	6823      	ldr	r3, [r4, #0]
   d687c:	42ab      	cmp	r3, r5
   d687e:	4b11      	ldr	r3, [pc, #68]	; (d68c4 <module_user_init_hook+0x58>)
   d6880:	bf0c      	ite	eq
   d6882:	2201      	moveq	r2, #1
   d6884:	2200      	movne	r2, #0
   d6886:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6888:	d002      	beq.n	d6890 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d688a:	f7ff ffbb 	bl	d6804 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d688e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6890:	f7fe fc2a 	bl	d50e8 <HAL_RNG_GetRandomNumber>
   d6894:	4604      	mov	r4, r0
    srand(seed);
   d6896:	f000 fe33 	bl	d7500 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d689a:	4b0b      	ldr	r3, [pc, #44]	; (d68c8 <module_user_init_hook+0x5c>)
   d689c:	b113      	cbz	r3, d68a4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d689e:	4620      	mov	r0, r4
   d68a0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d68a4:	2100      	movs	r1, #0
   d68a6:	4808      	ldr	r0, [pc, #32]	; (d68c8 <module_user_init_hook+0x5c>)
   d68a8:	f7fe fe3e 	bl	d5528 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d68ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d68b0:	4806      	ldr	r0, [pc, #24]	; (d68cc <module_user_init_hook+0x60>)
   d68b2:	2100      	movs	r1, #0
   d68b4:	f7fe bdd2 	b.w	d545c <system_ctrl_set_app_request_handler>
   d68b8:	2003f400 	.word	0x2003f400
   d68bc:	000d67ad 	.word	0x000d67ad
   d68c0:	9a271c1e 	.word	0x9a271c1e
   d68c4:	2003e7b8 	.word	0x2003e7b8
   d68c8:	00000000 	.word	0x00000000
   d68cc:	000d6835 	.word	0x000d6835

000d68d0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <spark_protocol_instance+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	681b      	ldr	r3, [r3, #0]
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	0003025c 	.word	0x0003025c

000d68e0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b02      	ldr	r3, [pc, #8]	; (d68ec <spark_protocol_set_product_id+0xc>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	685b      	ldr	r3, [r3, #4]
   d68e8:	9301      	str	r3, [sp, #4]
   d68ea:	bd08      	pop	{r3, pc}
   d68ec:	0003025c 	.word	0x0003025c

000d68f0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b02      	ldr	r3, [pc, #8]	; (d68fc <spark_protocol_set_product_firmware_version+0xc>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	689b      	ldr	r3, [r3, #8]
   d68f8:	9301      	str	r3, [sp, #4]
   d68fa:	bd08      	pop	{r3, pc}
   d68fc:	0003025c 	.word	0x0003025c

000d6900 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6900:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6902:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6904:	d902      	bls.n	d690c <pinAvailable+0xc>
    return false;
   d6906:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6908:	b002      	add	sp, #8
   d690a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d690c:	f1a0 030b 	sub.w	r3, r0, #11
   d6910:	2b02      	cmp	r3, #2
   d6912:	d81a      	bhi.n	d694a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6914:	4c17      	ldr	r4, [pc, #92]	; (d6974 <pinAvailable+0x74>)
   d6916:	7821      	ldrb	r1, [r4, #0]
   d6918:	f3bf 8f5b 	dmb	ish
   d691c:	f011 0101 	ands.w	r1, r1, #1
   d6920:	d10b      	bne.n	d693a <pinAvailable+0x3a>
   d6922:	4620      	mov	r0, r4
   d6924:	9101      	str	r1, [sp, #4]
   d6926:	f7fd fbbc 	bl	d40a2 <__cxa_guard_acquire>
   d692a:	9901      	ldr	r1, [sp, #4]
   d692c:	b128      	cbz	r0, d693a <pinAvailable+0x3a>
   d692e:	4812      	ldr	r0, [pc, #72]	; (d6978 <pinAvailable+0x78>)
   d6930:	f7ff fc78 	bl	d6224 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6934:	4620      	mov	r0, r4
   d6936:	f7fd fbb9 	bl	d40ac <__cxa_guard_release>
   d693a:	4b0f      	ldr	r3, [pc, #60]	; (d6978 <pinAvailable+0x78>)
   d693c:	7818      	ldrb	r0, [r3, #0]
   d693e:	f7fe fcc3 	bl	d52c8 <hal_spi_is_enabled>
   d6942:	2800      	cmp	r0, #0
   d6944:	d1df      	bne.n	d6906 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6946:	2001      	movs	r0, #1
   d6948:	e7de      	b.n	d6908 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d694a:	2801      	cmp	r0, #1
   d694c:	d809      	bhi.n	d6962 <pinAvailable+0x62>
   d694e:	f000 f86d 	bl	d6a2c <_Z19__fetch_global_Wirev>
   d6952:	2100      	movs	r1, #0
   d6954:	7c00      	ldrb	r0, [r0, #16]
   d6956:	f7fe fc7f 	bl	d5258 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d695a:	f080 0001 	eor.w	r0, r0, #1
   d695e:	b2c0      	uxtb	r0, r0
   d6960:	e7d2      	b.n	d6908 <pinAvailable+0x8>
   d6962:	3809      	subs	r0, #9
   d6964:	2801      	cmp	r0, #1
   d6966:	d8ee      	bhi.n	d6946 <pinAvailable+0x46>
   d6968:	f7ff fe6e 	bl	d6648 <_Z22__fetch_global_Serial1v>
   d696c:	7c00      	ldrb	r0, [r0, #16]
   d696e:	f7fe fce3 	bl	d5338 <hal_usart_is_enabled>
   d6972:	e7f2      	b.n	d695a <pinAvailable+0x5a>
   d6974:	2003e7c0 	.word	0x2003e7c0
   d6978:	2003e7c4 	.word	0x2003e7c4

000d697c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d697c:	2823      	cmp	r0, #35	; 0x23
{
   d697e:	b538      	push	{r3, r4, r5, lr}
   d6980:	4604      	mov	r4, r0
   d6982:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6984:	d80a      	bhi.n	d699c <pinMode+0x20>
   d6986:	29ff      	cmp	r1, #255	; 0xff
   d6988:	d008      	beq.n	d699c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d698a:	f7ff ffb9 	bl	d6900 <pinAvailable>
   d698e:	b128      	cbz	r0, d699c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6990:	4629      	mov	r1, r5
   d6992:	4620      	mov	r0, r4
}
   d6994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6998:	f7fe bbf6 	b.w	d5188 <HAL_Pin_Mode>
}
   d699c:	bd38      	pop	{r3, r4, r5, pc}

000d699e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d699e:	b538      	push	{r3, r4, r5, lr}
   d69a0:	4604      	mov	r4, r0
   d69a2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d69a4:	f7fe fbf8 	bl	d5198 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d69a8:	28ff      	cmp	r0, #255	; 0xff
   d69aa:	d010      	beq.n	d69ce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d69ac:	2806      	cmp	r0, #6
   d69ae:	d804      	bhi.n	d69ba <digitalWrite+0x1c>
   d69b0:	234d      	movs	r3, #77	; 0x4d
   d69b2:	fa23 f000 	lsr.w	r0, r3, r0
   d69b6:	07c3      	lsls	r3, r0, #31
   d69b8:	d409      	bmi.n	d69ce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d69ba:	4620      	mov	r0, r4
   d69bc:	f7ff ffa0 	bl	d6900 <pinAvailable>
   d69c0:	b128      	cbz	r0, d69ce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d69c2:	4629      	mov	r1, r5
   d69c4:	4620      	mov	r0, r4
}
   d69c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d69ca:	f7fe bbed 	b.w	d51a8 <HAL_GPIO_Write>
}
   d69ce:	bd38      	pop	{r3, r4, r5, pc}

000d69d0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d69d0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d69d2:	4c08      	ldr	r4, [pc, #32]	; (d69f4 <_Z21__fetch_global_EEPROMv+0x24>)
   d69d4:	7823      	ldrb	r3, [r4, #0]
   d69d6:	f3bf 8f5b 	dmb	ish
   d69da:	07db      	lsls	r3, r3, #31
   d69dc:	d408      	bmi.n	d69f0 <_Z21__fetch_global_EEPROMv+0x20>
   d69de:	4620      	mov	r0, r4
   d69e0:	f7fd fb5f 	bl	d40a2 <__cxa_guard_acquire>
   d69e4:	b120      	cbz	r0, d69f0 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d69e6:	f7fe fb97 	bl	d5118 <HAL_EEPROM_Init>
   d69ea:	4620      	mov	r0, r4
   d69ec:	f7fd fb5e 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d69f0:	4801      	ldr	r0, [pc, #4]	; (d69f8 <_Z21__fetch_global_EEPROMv+0x28>)
   d69f2:	bd10      	pop	{r4, pc}
   d69f4:	2003e7d0 	.word	0x2003e7d0
   d69f8:	2003e7d4 	.word	0x2003e7d4

000d69fc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d69fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d69fe:	2300      	movs	r3, #0
   d6a00:	2520      	movs	r5, #32
   d6a02:	8043      	strh	r3, [r0, #2]
   d6a04:	2314      	movs	r3, #20
{
   d6a06:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6a08:	8003      	strh	r3, [r0, #0]
   d6a0a:	6085      	str	r5, [r0, #8]
   d6a0c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6a0e:	4906      	ldr	r1, [pc, #24]	; (d6a28 <_Z17acquireWireBufferv+0x2c>)
   d6a10:	4628      	mov	r0, r5
   d6a12:	f000 f83a 	bl	d6a8a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6a16:	4904      	ldr	r1, [pc, #16]	; (d6a28 <_Z17acquireWireBufferv+0x2c>)
	};
   d6a18:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6a1a:	4628      	mov	r0, r5
   d6a1c:	f000 f835 	bl	d6a8a <_ZnajRKSt9nothrow_t>
	};
   d6a20:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6a22:	4620      	mov	r0, r4
   d6a24:	bd38      	pop	{r3, r4, r5, pc}
   d6a26:	bf00      	nop
   d6a28:	000d98ac 	.word	0x000d98ac

000d6a2c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6a2c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6a2e:	4d0f      	ldr	r5, [pc, #60]	; (d6a6c <_Z19__fetch_global_Wirev+0x40>)
   d6a30:	7829      	ldrb	r1, [r5, #0]
   d6a32:	f3bf 8f5b 	dmb	ish
   d6a36:	f011 0401 	ands.w	r4, r1, #1
{
   d6a3a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6a3c:	d113      	bne.n	d6a66 <_Z19__fetch_global_Wirev+0x3a>
   d6a3e:	4628      	mov	r0, r5
   d6a40:	f7fd fb2f 	bl	d40a2 <__cxa_guard_acquire>
   d6a44:	b178      	cbz	r0, d6a66 <_Z19__fetch_global_Wirev+0x3a>
   d6a46:	a801      	add	r0, sp, #4
   d6a48:	f7ff ffd8 	bl	d69fc <_Z17acquireWireBufferv>
   d6a4c:	aa01      	add	r2, sp, #4
   d6a4e:	4621      	mov	r1, r4
   d6a50:	4807      	ldr	r0, [pc, #28]	; (d6a70 <_Z19__fetch_global_Wirev+0x44>)
   d6a52:	f7ff f9d7 	bl	d5e04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6a56:	4628      	mov	r0, r5
   d6a58:	f7fd fb28 	bl	d40ac <__cxa_guard_release>
   d6a5c:	4a05      	ldr	r2, [pc, #20]	; (d6a74 <_Z19__fetch_global_Wirev+0x48>)
   d6a5e:	4906      	ldr	r1, [pc, #24]	; (d6a78 <_Z19__fetch_global_Wirev+0x4c>)
   d6a60:	4803      	ldr	r0, [pc, #12]	; (d6a70 <_Z19__fetch_global_Wirev+0x44>)
   d6a62:	f000 f80b 	bl	d6a7c <__aeabi_atexit>
	return wire;
}
   d6a66:	4802      	ldr	r0, [pc, #8]	; (d6a70 <_Z19__fetch_global_Wirev+0x44>)
   d6a68:	b007      	add	sp, #28
   d6a6a:	bd30      	pop	{r4, r5, pc}
   d6a6c:	2003e7d8 	.word	0x2003e7d8
   d6a70:	2003e7dc 	.word	0x2003e7dc
   d6a74:	2003e498 	.word	0x2003e498
   d6a78:	000d5dad 	.word	0x000d5dad

000d6a7c <__aeabi_atexit>:
   d6a7c:	460b      	mov	r3, r1
   d6a7e:	4601      	mov	r1, r0
   d6a80:	4618      	mov	r0, r3
   d6a82:	f000 bd19 	b.w	d74b8 <__cxa_atexit>

000d6a86 <_ZdlPvj>:
   d6a86:	f7fd bb0a 	b.w	d409e <_ZdlPv>

000d6a8a <_ZnajRKSt9nothrow_t>:
   d6a8a:	f7fd bb06 	b.w	d409a <_Znaj>

000d6a8e <_ZSt25__throw_bad_function_callv>:
   d6a8e:	b508      	push	{r3, lr}
   d6a90:	f7fe fdca 	bl	d5628 <abort>

000d6a94 <__aeabi_drsub>:
   d6a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6a98:	e002      	b.n	d6aa0 <__adddf3>
   d6a9a:	bf00      	nop

000d6a9c <__aeabi_dsub>:
   d6a9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6aa0 <__adddf3>:
   d6aa0:	b530      	push	{r4, r5, lr}
   d6aa2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6aa6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6aaa:	ea94 0f05 	teq	r4, r5
   d6aae:	bf08      	it	eq
   d6ab0:	ea90 0f02 	teqeq	r0, r2
   d6ab4:	bf1f      	itttt	ne
   d6ab6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6aba:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6abe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6ac2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ac6:	f000 80e2 	beq.w	d6c8e <__adddf3+0x1ee>
   d6aca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6ace:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6ad2:	bfb8      	it	lt
   d6ad4:	426d      	neglt	r5, r5
   d6ad6:	dd0c      	ble.n	d6af2 <__adddf3+0x52>
   d6ad8:	442c      	add	r4, r5
   d6ada:	ea80 0202 	eor.w	r2, r0, r2
   d6ade:	ea81 0303 	eor.w	r3, r1, r3
   d6ae2:	ea82 0000 	eor.w	r0, r2, r0
   d6ae6:	ea83 0101 	eor.w	r1, r3, r1
   d6aea:	ea80 0202 	eor.w	r2, r0, r2
   d6aee:	ea81 0303 	eor.w	r3, r1, r3
   d6af2:	2d36      	cmp	r5, #54	; 0x36
   d6af4:	bf88      	it	hi
   d6af6:	bd30      	pophi	{r4, r5, pc}
   d6af8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6afc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6b04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6b08:	d002      	beq.n	d6b10 <__adddf3+0x70>
   d6b0a:	4240      	negs	r0, r0
   d6b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6b10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6b14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6b1c:	d002      	beq.n	d6b24 <__adddf3+0x84>
   d6b1e:	4252      	negs	r2, r2
   d6b20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6b24:	ea94 0f05 	teq	r4, r5
   d6b28:	f000 80a7 	beq.w	d6c7a <__adddf3+0x1da>
   d6b2c:	f1a4 0401 	sub.w	r4, r4, #1
   d6b30:	f1d5 0e20 	rsbs	lr, r5, #32
   d6b34:	db0d      	blt.n	d6b52 <__adddf3+0xb2>
   d6b36:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6b3a:	fa22 f205 	lsr.w	r2, r2, r5
   d6b3e:	1880      	adds	r0, r0, r2
   d6b40:	f141 0100 	adc.w	r1, r1, #0
   d6b44:	fa03 f20e 	lsl.w	r2, r3, lr
   d6b48:	1880      	adds	r0, r0, r2
   d6b4a:	fa43 f305 	asr.w	r3, r3, r5
   d6b4e:	4159      	adcs	r1, r3
   d6b50:	e00e      	b.n	d6b70 <__adddf3+0xd0>
   d6b52:	f1a5 0520 	sub.w	r5, r5, #32
   d6b56:	f10e 0e20 	add.w	lr, lr, #32
   d6b5a:	2a01      	cmp	r2, #1
   d6b5c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6b60:	bf28      	it	cs
   d6b62:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6b66:	fa43 f305 	asr.w	r3, r3, r5
   d6b6a:	18c0      	adds	r0, r0, r3
   d6b6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6b70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b74:	d507      	bpl.n	d6b86 <__adddf3+0xe6>
   d6b76:	f04f 0e00 	mov.w	lr, #0
   d6b7a:	f1dc 0c00 	rsbs	ip, ip, #0
   d6b7e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6b82:	eb6e 0101 	sbc.w	r1, lr, r1
   d6b86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6b8a:	d31b      	bcc.n	d6bc4 <__adddf3+0x124>
   d6b8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6b90:	d30c      	bcc.n	d6bac <__adddf3+0x10c>
   d6b92:	0849      	lsrs	r1, r1, #1
   d6b94:	ea5f 0030 	movs.w	r0, r0, rrx
   d6b98:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6b9c:	f104 0401 	add.w	r4, r4, #1
   d6ba0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6ba4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6ba8:	f080 809a 	bcs.w	d6ce0 <__adddf3+0x240>
   d6bac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6bb0:	bf08      	it	eq
   d6bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6bb6:	f150 0000 	adcs.w	r0, r0, #0
   d6bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6bbe:	ea41 0105 	orr.w	r1, r1, r5
   d6bc2:	bd30      	pop	{r4, r5, pc}
   d6bc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6bc8:	4140      	adcs	r0, r0
   d6bca:	eb41 0101 	adc.w	r1, r1, r1
   d6bce:	3c01      	subs	r4, #1
   d6bd0:	bf28      	it	cs
   d6bd2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6bd6:	d2e9      	bcs.n	d6bac <__adddf3+0x10c>
   d6bd8:	f091 0f00 	teq	r1, #0
   d6bdc:	bf04      	itt	eq
   d6bde:	4601      	moveq	r1, r0
   d6be0:	2000      	moveq	r0, #0
   d6be2:	fab1 f381 	clz	r3, r1
   d6be6:	bf08      	it	eq
   d6be8:	3320      	addeq	r3, #32
   d6bea:	f1a3 030b 	sub.w	r3, r3, #11
   d6bee:	f1b3 0220 	subs.w	r2, r3, #32
   d6bf2:	da0c      	bge.n	d6c0e <__adddf3+0x16e>
   d6bf4:	320c      	adds	r2, #12
   d6bf6:	dd08      	ble.n	d6c0a <__adddf3+0x16a>
   d6bf8:	f102 0c14 	add.w	ip, r2, #20
   d6bfc:	f1c2 020c 	rsb	r2, r2, #12
   d6c00:	fa01 f00c 	lsl.w	r0, r1, ip
   d6c04:	fa21 f102 	lsr.w	r1, r1, r2
   d6c08:	e00c      	b.n	d6c24 <__adddf3+0x184>
   d6c0a:	f102 0214 	add.w	r2, r2, #20
   d6c0e:	bfd8      	it	le
   d6c10:	f1c2 0c20 	rsble	ip, r2, #32
   d6c14:	fa01 f102 	lsl.w	r1, r1, r2
   d6c18:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6c1c:	bfdc      	itt	le
   d6c1e:	ea41 010c 	orrle.w	r1, r1, ip
   d6c22:	4090      	lslle	r0, r2
   d6c24:	1ae4      	subs	r4, r4, r3
   d6c26:	bfa2      	ittt	ge
   d6c28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6c2c:	4329      	orrge	r1, r5
   d6c2e:	bd30      	popge	{r4, r5, pc}
   d6c30:	ea6f 0404 	mvn.w	r4, r4
   d6c34:	3c1f      	subs	r4, #31
   d6c36:	da1c      	bge.n	d6c72 <__adddf3+0x1d2>
   d6c38:	340c      	adds	r4, #12
   d6c3a:	dc0e      	bgt.n	d6c5a <__adddf3+0x1ba>
   d6c3c:	f104 0414 	add.w	r4, r4, #20
   d6c40:	f1c4 0220 	rsb	r2, r4, #32
   d6c44:	fa20 f004 	lsr.w	r0, r0, r4
   d6c48:	fa01 f302 	lsl.w	r3, r1, r2
   d6c4c:	ea40 0003 	orr.w	r0, r0, r3
   d6c50:	fa21 f304 	lsr.w	r3, r1, r4
   d6c54:	ea45 0103 	orr.w	r1, r5, r3
   d6c58:	bd30      	pop	{r4, r5, pc}
   d6c5a:	f1c4 040c 	rsb	r4, r4, #12
   d6c5e:	f1c4 0220 	rsb	r2, r4, #32
   d6c62:	fa20 f002 	lsr.w	r0, r0, r2
   d6c66:	fa01 f304 	lsl.w	r3, r1, r4
   d6c6a:	ea40 0003 	orr.w	r0, r0, r3
   d6c6e:	4629      	mov	r1, r5
   d6c70:	bd30      	pop	{r4, r5, pc}
   d6c72:	fa21 f004 	lsr.w	r0, r1, r4
   d6c76:	4629      	mov	r1, r5
   d6c78:	bd30      	pop	{r4, r5, pc}
   d6c7a:	f094 0f00 	teq	r4, #0
   d6c7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6c82:	bf06      	itte	eq
   d6c84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6c88:	3401      	addeq	r4, #1
   d6c8a:	3d01      	subne	r5, #1
   d6c8c:	e74e      	b.n	d6b2c <__adddf3+0x8c>
   d6c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c92:	bf18      	it	ne
   d6c94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c98:	d029      	beq.n	d6cee <__adddf3+0x24e>
   d6c9a:	ea94 0f05 	teq	r4, r5
   d6c9e:	bf08      	it	eq
   d6ca0:	ea90 0f02 	teqeq	r0, r2
   d6ca4:	d005      	beq.n	d6cb2 <__adddf3+0x212>
   d6ca6:	ea54 0c00 	orrs.w	ip, r4, r0
   d6caa:	bf04      	itt	eq
   d6cac:	4619      	moveq	r1, r3
   d6cae:	4610      	moveq	r0, r2
   d6cb0:	bd30      	pop	{r4, r5, pc}
   d6cb2:	ea91 0f03 	teq	r1, r3
   d6cb6:	bf1e      	ittt	ne
   d6cb8:	2100      	movne	r1, #0
   d6cba:	2000      	movne	r0, #0
   d6cbc:	bd30      	popne	{r4, r5, pc}
   d6cbe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6cc2:	d105      	bne.n	d6cd0 <__adddf3+0x230>
   d6cc4:	0040      	lsls	r0, r0, #1
   d6cc6:	4149      	adcs	r1, r1
   d6cc8:	bf28      	it	cs
   d6cca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6cce:	bd30      	pop	{r4, r5, pc}
   d6cd0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6cd4:	bf3c      	itt	cc
   d6cd6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6cda:	bd30      	popcc	{r4, r5, pc}
   d6cdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ce0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6ce4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6ce8:	f04f 0000 	mov.w	r0, #0
   d6cec:	bd30      	pop	{r4, r5, pc}
   d6cee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6cf2:	bf1a      	itte	ne
   d6cf4:	4619      	movne	r1, r3
   d6cf6:	4610      	movne	r0, r2
   d6cf8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6cfc:	bf1c      	itt	ne
   d6cfe:	460b      	movne	r3, r1
   d6d00:	4602      	movne	r2, r0
   d6d02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6d06:	bf06      	itte	eq
   d6d08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6d0c:	ea91 0f03 	teqeq	r1, r3
   d6d10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6d14:	bd30      	pop	{r4, r5, pc}
   d6d16:	bf00      	nop

000d6d18 <__aeabi_ui2d>:
   d6d18:	f090 0f00 	teq	r0, #0
   d6d1c:	bf04      	itt	eq
   d6d1e:	2100      	moveq	r1, #0
   d6d20:	4770      	bxeq	lr
   d6d22:	b530      	push	{r4, r5, lr}
   d6d24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6d28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6d2c:	f04f 0500 	mov.w	r5, #0
   d6d30:	f04f 0100 	mov.w	r1, #0
   d6d34:	e750      	b.n	d6bd8 <__adddf3+0x138>
   d6d36:	bf00      	nop

000d6d38 <__aeabi_i2d>:
   d6d38:	f090 0f00 	teq	r0, #0
   d6d3c:	bf04      	itt	eq
   d6d3e:	2100      	moveq	r1, #0
   d6d40:	4770      	bxeq	lr
   d6d42:	b530      	push	{r4, r5, lr}
   d6d44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6d48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6d4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6d50:	bf48      	it	mi
   d6d52:	4240      	negmi	r0, r0
   d6d54:	f04f 0100 	mov.w	r1, #0
   d6d58:	e73e      	b.n	d6bd8 <__adddf3+0x138>
   d6d5a:	bf00      	nop

000d6d5c <__aeabi_f2d>:
   d6d5c:	0042      	lsls	r2, r0, #1
   d6d5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6d62:	ea4f 0131 	mov.w	r1, r1, rrx
   d6d66:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6d6a:	bf1f      	itttt	ne
   d6d6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6d70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6d74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6d78:	4770      	bxne	lr
   d6d7a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6d7e:	bf08      	it	eq
   d6d80:	4770      	bxeq	lr
   d6d82:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6d86:	bf04      	itt	eq
   d6d88:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6d8c:	4770      	bxeq	lr
   d6d8e:	b530      	push	{r4, r5, lr}
   d6d90:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6d94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d9c:	e71c      	b.n	d6bd8 <__adddf3+0x138>
   d6d9e:	bf00      	nop

000d6da0 <__aeabi_ul2d>:
   d6da0:	ea50 0201 	orrs.w	r2, r0, r1
   d6da4:	bf08      	it	eq
   d6da6:	4770      	bxeq	lr
   d6da8:	b530      	push	{r4, r5, lr}
   d6daa:	f04f 0500 	mov.w	r5, #0
   d6dae:	e00a      	b.n	d6dc6 <__aeabi_l2d+0x16>

000d6db0 <__aeabi_l2d>:
   d6db0:	ea50 0201 	orrs.w	r2, r0, r1
   d6db4:	bf08      	it	eq
   d6db6:	4770      	bxeq	lr
   d6db8:	b530      	push	{r4, r5, lr}
   d6dba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6dbe:	d502      	bpl.n	d6dc6 <__aeabi_l2d+0x16>
   d6dc0:	4240      	negs	r0, r0
   d6dc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6dc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6dca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6dce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6dd2:	f43f aed8 	beq.w	d6b86 <__adddf3+0xe6>
   d6dd6:	f04f 0203 	mov.w	r2, #3
   d6dda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6dde:	bf18      	it	ne
   d6de0:	3203      	addne	r2, #3
   d6de2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6de6:	bf18      	it	ne
   d6de8:	3203      	addne	r2, #3
   d6dea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6dee:	f1c2 0320 	rsb	r3, r2, #32
   d6df2:	fa00 fc03 	lsl.w	ip, r0, r3
   d6df6:	fa20 f002 	lsr.w	r0, r0, r2
   d6dfa:	fa01 fe03 	lsl.w	lr, r1, r3
   d6dfe:	ea40 000e 	orr.w	r0, r0, lr
   d6e02:	fa21 f102 	lsr.w	r1, r1, r2
   d6e06:	4414      	add	r4, r2
   d6e08:	e6bd      	b.n	d6b86 <__adddf3+0xe6>
   d6e0a:	bf00      	nop

000d6e0c <__aeabi_dmul>:
   d6e0c:	b570      	push	{r4, r5, r6, lr}
   d6e0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6e12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6e16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6e1a:	bf1d      	ittte	ne
   d6e1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6e20:	ea94 0f0c 	teqne	r4, ip
   d6e24:	ea95 0f0c 	teqne	r5, ip
   d6e28:	f000 f8de 	bleq	d6fe8 <__aeabi_dmul+0x1dc>
   d6e2c:	442c      	add	r4, r5
   d6e2e:	ea81 0603 	eor.w	r6, r1, r3
   d6e32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6e36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6e3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6e3e:	bf18      	it	ne
   d6e40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6e44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6e4c:	d038      	beq.n	d6ec0 <__aeabi_dmul+0xb4>
   d6e4e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6e52:	f04f 0500 	mov.w	r5, #0
   d6e56:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6e5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6e5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6e62:	f04f 0600 	mov.w	r6, #0
   d6e66:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6e6a:	f09c 0f00 	teq	ip, #0
   d6e6e:	bf18      	it	ne
   d6e70:	f04e 0e01 	orrne.w	lr, lr, #1
   d6e74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6e78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6e7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6e80:	d204      	bcs.n	d6e8c <__aeabi_dmul+0x80>
   d6e82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6e86:	416d      	adcs	r5, r5
   d6e88:	eb46 0606 	adc.w	r6, r6, r6
   d6e8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6e90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6e94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6e98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6e9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6ea0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ea4:	bf88      	it	hi
   d6ea6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6eaa:	d81e      	bhi.n	d6eea <__aeabi_dmul+0xde>
   d6eac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6eb0:	bf08      	it	eq
   d6eb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6eb6:	f150 0000 	adcs.w	r0, r0, #0
   d6eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ebe:	bd70      	pop	{r4, r5, r6, pc}
   d6ec0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ec4:	ea46 0101 	orr.w	r1, r6, r1
   d6ec8:	ea40 0002 	orr.w	r0, r0, r2
   d6ecc:	ea81 0103 	eor.w	r1, r1, r3
   d6ed0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6ed4:	bfc2      	ittt	gt
   d6ed6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6eda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ede:	bd70      	popgt	{r4, r5, r6, pc}
   d6ee0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ee4:	f04f 0e00 	mov.w	lr, #0
   d6ee8:	3c01      	subs	r4, #1
   d6eea:	f300 80ab 	bgt.w	d7044 <__aeabi_dmul+0x238>
   d6eee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6ef2:	bfde      	ittt	le
   d6ef4:	2000      	movle	r0, #0
   d6ef6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6efa:	bd70      	pople	{r4, r5, r6, pc}
   d6efc:	f1c4 0400 	rsb	r4, r4, #0
   d6f00:	3c20      	subs	r4, #32
   d6f02:	da35      	bge.n	d6f70 <__aeabi_dmul+0x164>
   d6f04:	340c      	adds	r4, #12
   d6f06:	dc1b      	bgt.n	d6f40 <__aeabi_dmul+0x134>
   d6f08:	f104 0414 	add.w	r4, r4, #20
   d6f0c:	f1c4 0520 	rsb	r5, r4, #32
   d6f10:	fa00 f305 	lsl.w	r3, r0, r5
   d6f14:	fa20 f004 	lsr.w	r0, r0, r4
   d6f18:	fa01 f205 	lsl.w	r2, r1, r5
   d6f1c:	ea40 0002 	orr.w	r0, r0, r2
   d6f20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6f2c:	fa21 f604 	lsr.w	r6, r1, r4
   d6f30:	eb42 0106 	adc.w	r1, r2, r6
   d6f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6f38:	bf08      	it	eq
   d6f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6f3e:	bd70      	pop	{r4, r5, r6, pc}
   d6f40:	f1c4 040c 	rsb	r4, r4, #12
   d6f44:	f1c4 0520 	rsb	r5, r4, #32
   d6f48:	fa00 f304 	lsl.w	r3, r0, r4
   d6f4c:	fa20 f005 	lsr.w	r0, r0, r5
   d6f50:	fa01 f204 	lsl.w	r2, r1, r4
   d6f54:	ea40 0002 	orr.w	r0, r0, r2
   d6f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6f60:	f141 0100 	adc.w	r1, r1, #0
   d6f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6f68:	bf08      	it	eq
   d6f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6f6e:	bd70      	pop	{r4, r5, r6, pc}
   d6f70:	f1c4 0520 	rsb	r5, r4, #32
   d6f74:	fa00 f205 	lsl.w	r2, r0, r5
   d6f78:	ea4e 0e02 	orr.w	lr, lr, r2
   d6f7c:	fa20 f304 	lsr.w	r3, r0, r4
   d6f80:	fa01 f205 	lsl.w	r2, r1, r5
   d6f84:	ea43 0302 	orr.w	r3, r3, r2
   d6f88:	fa21 f004 	lsr.w	r0, r1, r4
   d6f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f90:	fa21 f204 	lsr.w	r2, r1, r4
   d6f94:	ea20 0002 	bic.w	r0, r0, r2
   d6f98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6fa0:	bf08      	it	eq
   d6fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6fa6:	bd70      	pop	{r4, r5, r6, pc}
   d6fa8:	f094 0f00 	teq	r4, #0
   d6fac:	d10f      	bne.n	d6fce <__aeabi_dmul+0x1c2>
   d6fae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6fb2:	0040      	lsls	r0, r0, #1
   d6fb4:	eb41 0101 	adc.w	r1, r1, r1
   d6fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fbc:	bf08      	it	eq
   d6fbe:	3c01      	subeq	r4, #1
   d6fc0:	d0f7      	beq.n	d6fb2 <__aeabi_dmul+0x1a6>
   d6fc2:	ea41 0106 	orr.w	r1, r1, r6
   d6fc6:	f095 0f00 	teq	r5, #0
   d6fca:	bf18      	it	ne
   d6fcc:	4770      	bxne	lr
   d6fce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6fd2:	0052      	lsls	r2, r2, #1
   d6fd4:	eb43 0303 	adc.w	r3, r3, r3
   d6fd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6fdc:	bf08      	it	eq
   d6fde:	3d01      	subeq	r5, #1
   d6fe0:	d0f7      	beq.n	d6fd2 <__aeabi_dmul+0x1c6>
   d6fe2:	ea43 0306 	orr.w	r3, r3, r6
   d6fe6:	4770      	bx	lr
   d6fe8:	ea94 0f0c 	teq	r4, ip
   d6fec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ff0:	bf18      	it	ne
   d6ff2:	ea95 0f0c 	teqne	r5, ip
   d6ff6:	d00c      	beq.n	d7012 <__aeabi_dmul+0x206>
   d6ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ffc:	bf18      	it	ne
   d6ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7002:	d1d1      	bne.n	d6fa8 <__aeabi_dmul+0x19c>
   d7004:	ea81 0103 	eor.w	r1, r1, r3
   d7008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d700c:	f04f 0000 	mov.w	r0, #0
   d7010:	bd70      	pop	{r4, r5, r6, pc}
   d7012:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7016:	bf06      	itte	eq
   d7018:	4610      	moveq	r0, r2
   d701a:	4619      	moveq	r1, r3
   d701c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7020:	d019      	beq.n	d7056 <__aeabi_dmul+0x24a>
   d7022:	ea94 0f0c 	teq	r4, ip
   d7026:	d102      	bne.n	d702e <__aeabi_dmul+0x222>
   d7028:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d702c:	d113      	bne.n	d7056 <__aeabi_dmul+0x24a>
   d702e:	ea95 0f0c 	teq	r5, ip
   d7032:	d105      	bne.n	d7040 <__aeabi_dmul+0x234>
   d7034:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7038:	bf1c      	itt	ne
   d703a:	4610      	movne	r0, r2
   d703c:	4619      	movne	r1, r3
   d703e:	d10a      	bne.n	d7056 <__aeabi_dmul+0x24a>
   d7040:	ea81 0103 	eor.w	r1, r1, r3
   d7044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7048:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d704c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7050:	f04f 0000 	mov.w	r0, #0
   d7054:	bd70      	pop	{r4, r5, r6, pc}
   d7056:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d705a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d705e:	bd70      	pop	{r4, r5, r6, pc}

000d7060 <__aeabi_ddiv>:
   d7060:	b570      	push	{r4, r5, r6, lr}
   d7062:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d706a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d706e:	bf1d      	ittte	ne
   d7070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7074:	ea94 0f0c 	teqne	r4, ip
   d7078:	ea95 0f0c 	teqne	r5, ip
   d707c:	f000 f8a7 	bleq	d71ce <__aeabi_ddiv+0x16e>
   d7080:	eba4 0405 	sub.w	r4, r4, r5
   d7084:	ea81 0e03 	eor.w	lr, r1, r3
   d7088:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d708c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7090:	f000 8088 	beq.w	d71a4 <__aeabi_ddiv+0x144>
   d7094:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7098:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d709c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d70a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d70a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d70a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d70ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d70b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d70b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d70b8:	429d      	cmp	r5, r3
   d70ba:	bf08      	it	eq
   d70bc:	4296      	cmpeq	r6, r2
   d70be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d70c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d70c6:	d202      	bcs.n	d70ce <__aeabi_ddiv+0x6e>
   d70c8:	085b      	lsrs	r3, r3, #1
   d70ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d70ce:	1ab6      	subs	r6, r6, r2
   d70d0:	eb65 0503 	sbc.w	r5, r5, r3
   d70d4:	085b      	lsrs	r3, r3, #1
   d70d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d70da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d70de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d70e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d70e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d70ea:	bf22      	ittt	cs
   d70ec:	1ab6      	subcs	r6, r6, r2
   d70ee:	4675      	movcs	r5, lr
   d70f0:	ea40 000c 	orrcs.w	r0, r0, ip
   d70f4:	085b      	lsrs	r3, r3, #1
   d70f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d70fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d70fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7102:	bf22      	ittt	cs
   d7104:	1ab6      	subcs	r6, r6, r2
   d7106:	4675      	movcs	r5, lr
   d7108:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d710c:	085b      	lsrs	r3, r3, #1
   d710e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7112:	ebb6 0e02 	subs.w	lr, r6, r2
   d7116:	eb75 0e03 	sbcs.w	lr, r5, r3
   d711a:	bf22      	ittt	cs
   d711c:	1ab6      	subcs	r6, r6, r2
   d711e:	4675      	movcs	r5, lr
   d7120:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7124:	085b      	lsrs	r3, r3, #1
   d7126:	ea4f 0232 	mov.w	r2, r2, rrx
   d712a:	ebb6 0e02 	subs.w	lr, r6, r2
   d712e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7132:	bf22      	ittt	cs
   d7134:	1ab6      	subcs	r6, r6, r2
   d7136:	4675      	movcs	r5, lr
   d7138:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d713c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7140:	d018      	beq.n	d7174 <__aeabi_ddiv+0x114>
   d7142:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7146:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d714a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d714e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7152:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7156:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d715a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d715e:	d1c0      	bne.n	d70e2 <__aeabi_ddiv+0x82>
   d7160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7164:	d10b      	bne.n	d717e <__aeabi_ddiv+0x11e>
   d7166:	ea41 0100 	orr.w	r1, r1, r0
   d716a:	f04f 0000 	mov.w	r0, #0
   d716e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7172:	e7b6      	b.n	d70e2 <__aeabi_ddiv+0x82>
   d7174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7178:	bf04      	itt	eq
   d717a:	4301      	orreq	r1, r0
   d717c:	2000      	moveq	r0, #0
   d717e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7182:	bf88      	it	hi
   d7184:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7188:	f63f aeaf 	bhi.w	d6eea <__aeabi_dmul+0xde>
   d718c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7190:	bf04      	itt	eq
   d7192:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7196:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d719a:	f150 0000 	adcs.w	r0, r0, #0
   d719e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71a2:	bd70      	pop	{r4, r5, r6, pc}
   d71a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d71a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d71ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d71b0:	bfc2      	ittt	gt
   d71b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d71b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d71ba:	bd70      	popgt	{r4, r5, r6, pc}
   d71bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d71c0:	f04f 0e00 	mov.w	lr, #0
   d71c4:	3c01      	subs	r4, #1
   d71c6:	e690      	b.n	d6eea <__aeabi_dmul+0xde>
   d71c8:	ea45 0e06 	orr.w	lr, r5, r6
   d71cc:	e68d      	b.n	d6eea <__aeabi_dmul+0xde>
   d71ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d71d2:	ea94 0f0c 	teq	r4, ip
   d71d6:	bf08      	it	eq
   d71d8:	ea95 0f0c 	teqeq	r5, ip
   d71dc:	f43f af3b 	beq.w	d7056 <__aeabi_dmul+0x24a>
   d71e0:	ea94 0f0c 	teq	r4, ip
   d71e4:	d10a      	bne.n	d71fc <__aeabi_ddiv+0x19c>
   d71e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d71ea:	f47f af34 	bne.w	d7056 <__aeabi_dmul+0x24a>
   d71ee:	ea95 0f0c 	teq	r5, ip
   d71f2:	f47f af25 	bne.w	d7040 <__aeabi_dmul+0x234>
   d71f6:	4610      	mov	r0, r2
   d71f8:	4619      	mov	r1, r3
   d71fa:	e72c      	b.n	d7056 <__aeabi_dmul+0x24a>
   d71fc:	ea95 0f0c 	teq	r5, ip
   d7200:	d106      	bne.n	d7210 <__aeabi_ddiv+0x1b0>
   d7202:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7206:	f43f aefd 	beq.w	d7004 <__aeabi_dmul+0x1f8>
   d720a:	4610      	mov	r0, r2
   d720c:	4619      	mov	r1, r3
   d720e:	e722      	b.n	d7056 <__aeabi_dmul+0x24a>
   d7210:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7214:	bf18      	it	ne
   d7216:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d721a:	f47f aec5 	bne.w	d6fa8 <__aeabi_dmul+0x19c>
   d721e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7222:	f47f af0d 	bne.w	d7040 <__aeabi_dmul+0x234>
   d7226:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d722a:	f47f aeeb 	bne.w	d7004 <__aeabi_dmul+0x1f8>
   d722e:	e712      	b.n	d7056 <__aeabi_dmul+0x24a>

000d7230 <__gedf2>:
   d7230:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7234:	e006      	b.n	d7244 <__cmpdf2+0x4>
   d7236:	bf00      	nop

000d7238 <__ledf2>:
   d7238:	f04f 0c01 	mov.w	ip, #1
   d723c:	e002      	b.n	d7244 <__cmpdf2+0x4>
   d723e:	bf00      	nop

000d7240 <__cmpdf2>:
   d7240:	f04f 0c01 	mov.w	ip, #1
   d7244:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7248:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d724c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7254:	bf18      	it	ne
   d7256:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d725a:	d01b      	beq.n	d7294 <__cmpdf2+0x54>
   d725c:	b001      	add	sp, #4
   d725e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7262:	bf0c      	ite	eq
   d7264:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7268:	ea91 0f03 	teqne	r1, r3
   d726c:	bf02      	ittt	eq
   d726e:	ea90 0f02 	teqeq	r0, r2
   d7272:	2000      	moveq	r0, #0
   d7274:	4770      	bxeq	lr
   d7276:	f110 0f00 	cmn.w	r0, #0
   d727a:	ea91 0f03 	teq	r1, r3
   d727e:	bf58      	it	pl
   d7280:	4299      	cmppl	r1, r3
   d7282:	bf08      	it	eq
   d7284:	4290      	cmpeq	r0, r2
   d7286:	bf2c      	ite	cs
   d7288:	17d8      	asrcs	r0, r3, #31
   d728a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d728e:	f040 0001 	orr.w	r0, r0, #1
   d7292:	4770      	bx	lr
   d7294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d729c:	d102      	bne.n	d72a4 <__cmpdf2+0x64>
   d729e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d72a2:	d107      	bne.n	d72b4 <__cmpdf2+0x74>
   d72a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d72a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d72ac:	d1d6      	bne.n	d725c <__cmpdf2+0x1c>
   d72ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d72b2:	d0d3      	beq.n	d725c <__cmpdf2+0x1c>
   d72b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d72b8:	4770      	bx	lr
   d72ba:	bf00      	nop

000d72bc <__aeabi_cdrcmple>:
   d72bc:	4684      	mov	ip, r0
   d72be:	4610      	mov	r0, r2
   d72c0:	4662      	mov	r2, ip
   d72c2:	468c      	mov	ip, r1
   d72c4:	4619      	mov	r1, r3
   d72c6:	4663      	mov	r3, ip
   d72c8:	e000      	b.n	d72cc <__aeabi_cdcmpeq>
   d72ca:	bf00      	nop

000d72cc <__aeabi_cdcmpeq>:
   d72cc:	b501      	push	{r0, lr}
   d72ce:	f7ff ffb7 	bl	d7240 <__cmpdf2>
   d72d2:	2800      	cmp	r0, #0
   d72d4:	bf48      	it	mi
   d72d6:	f110 0f00 	cmnmi.w	r0, #0
   d72da:	bd01      	pop	{r0, pc}

000d72dc <__aeabi_dcmpeq>:
   d72dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d72e0:	f7ff fff4 	bl	d72cc <__aeabi_cdcmpeq>
   d72e4:	bf0c      	ite	eq
   d72e6:	2001      	moveq	r0, #1
   d72e8:	2000      	movne	r0, #0
   d72ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d72ee:	bf00      	nop

000d72f0 <__aeabi_dcmplt>:
   d72f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d72f4:	f7ff ffea 	bl	d72cc <__aeabi_cdcmpeq>
   d72f8:	bf34      	ite	cc
   d72fa:	2001      	movcc	r0, #1
   d72fc:	2000      	movcs	r0, #0
   d72fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7302:	bf00      	nop

000d7304 <__aeabi_dcmple>:
   d7304:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7308:	f7ff ffe0 	bl	d72cc <__aeabi_cdcmpeq>
   d730c:	bf94      	ite	ls
   d730e:	2001      	movls	r0, #1
   d7310:	2000      	movhi	r0, #0
   d7312:	f85d fb08 	ldr.w	pc, [sp], #8
   d7316:	bf00      	nop

000d7318 <__aeabi_dcmpge>:
   d7318:	f84d ed08 	str.w	lr, [sp, #-8]!
   d731c:	f7ff ffce 	bl	d72bc <__aeabi_cdrcmple>
   d7320:	bf94      	ite	ls
   d7322:	2001      	movls	r0, #1
   d7324:	2000      	movhi	r0, #0
   d7326:	f85d fb08 	ldr.w	pc, [sp], #8
   d732a:	bf00      	nop

000d732c <__aeabi_dcmpgt>:
   d732c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7330:	f7ff ffc4 	bl	d72bc <__aeabi_cdrcmple>
   d7334:	bf34      	ite	cc
   d7336:	2001      	movcc	r0, #1
   d7338:	2000      	movcs	r0, #0
   d733a:	f85d fb08 	ldr.w	pc, [sp], #8
   d733e:	bf00      	nop

000d7340 <__aeabi_d2uiz>:
   d7340:	004a      	lsls	r2, r1, #1
   d7342:	d211      	bcs.n	d7368 <__aeabi_d2uiz+0x28>
   d7344:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7348:	d211      	bcs.n	d736e <__aeabi_d2uiz+0x2e>
   d734a:	d50d      	bpl.n	d7368 <__aeabi_d2uiz+0x28>
   d734c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7350:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7354:	d40e      	bmi.n	d7374 <__aeabi_d2uiz+0x34>
   d7356:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d735a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d735e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7362:	fa23 f002 	lsr.w	r0, r3, r2
   d7366:	4770      	bx	lr
   d7368:	f04f 0000 	mov.w	r0, #0
   d736c:	4770      	bx	lr
   d736e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7372:	d102      	bne.n	d737a <__aeabi_d2uiz+0x3a>
   d7374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7378:	4770      	bx	lr
   d737a:	f04f 0000 	mov.w	r0, #0
   d737e:	4770      	bx	lr

000d7380 <__aeabi_d2f>:
   d7380:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7384:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7388:	bf24      	itt	cs
   d738a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d738e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7392:	d90d      	bls.n	d73b0 <__aeabi_d2f+0x30>
   d7394:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7398:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d739c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d73a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d73a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d73a8:	bf08      	it	eq
   d73aa:	f020 0001 	biceq.w	r0, r0, #1
   d73ae:	4770      	bx	lr
   d73b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d73b4:	d121      	bne.n	d73fa <__aeabi_d2f+0x7a>
   d73b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d73ba:	bfbc      	itt	lt
   d73bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d73c0:	4770      	bxlt	lr
   d73c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d73c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d73ca:	f1c2 0218 	rsb	r2, r2, #24
   d73ce:	f1c2 0c20 	rsb	ip, r2, #32
   d73d2:	fa10 f30c 	lsls.w	r3, r0, ip
   d73d6:	fa20 f002 	lsr.w	r0, r0, r2
   d73da:	bf18      	it	ne
   d73dc:	f040 0001 	orrne.w	r0, r0, #1
   d73e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d73e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d73e8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d73ec:	ea40 000c 	orr.w	r0, r0, ip
   d73f0:	fa23 f302 	lsr.w	r3, r3, r2
   d73f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d73f8:	e7cc      	b.n	d7394 <__aeabi_d2f+0x14>
   d73fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d73fe:	d107      	bne.n	d7410 <__aeabi_d2f+0x90>
   d7400:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7404:	bf1e      	ittt	ne
   d7406:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d740a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d740e:	4770      	bxne	lr
   d7410:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7414:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7418:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d741c:	4770      	bx	lr
   d741e:	bf00      	nop

000d7420 <__aeabi_d2ulz>:
   d7420:	b5d0      	push	{r4, r6, r7, lr}
   d7422:	4b0c      	ldr	r3, [pc, #48]	; (d7454 <__aeabi_d2ulz+0x34>)
   d7424:	2200      	movs	r2, #0
   d7426:	4606      	mov	r6, r0
   d7428:	460f      	mov	r7, r1
   d742a:	f7ff fcef 	bl	d6e0c <__aeabi_dmul>
   d742e:	f7ff ff87 	bl	d7340 <__aeabi_d2uiz>
   d7432:	4604      	mov	r4, r0
   d7434:	f7ff fc70 	bl	d6d18 <__aeabi_ui2d>
   d7438:	4b07      	ldr	r3, [pc, #28]	; (d7458 <__aeabi_d2ulz+0x38>)
   d743a:	2200      	movs	r2, #0
   d743c:	f7ff fce6 	bl	d6e0c <__aeabi_dmul>
   d7440:	4602      	mov	r2, r0
   d7442:	460b      	mov	r3, r1
   d7444:	4630      	mov	r0, r6
   d7446:	4639      	mov	r1, r7
   d7448:	f7ff fb28 	bl	d6a9c <__aeabi_dsub>
   d744c:	f7ff ff78 	bl	d7340 <__aeabi_d2uiz>
   d7450:	4621      	mov	r1, r4
   d7452:	bdd0      	pop	{r4, r6, r7, pc}
   d7454:	3df00000 	.word	0x3df00000
   d7458:	41f00000 	.word	0x41f00000

000d745c <asctime_r>:
   d745c:	b510      	push	{r4, lr}
   d745e:	460c      	mov	r4, r1
   d7460:	6941      	ldr	r1, [r0, #20]
   d7462:	6903      	ldr	r3, [r0, #16]
   d7464:	6982      	ldr	r2, [r0, #24]
   d7466:	b086      	sub	sp, #24
   d7468:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d746c:	9104      	str	r1, [sp, #16]
   d746e:	6801      	ldr	r1, [r0, #0]
   d7470:	9103      	str	r1, [sp, #12]
   d7472:	6841      	ldr	r1, [r0, #4]
   d7474:	9102      	str	r1, [sp, #8]
   d7476:	6881      	ldr	r1, [r0, #8]
   d7478:	9101      	str	r1, [sp, #4]
   d747a:	68c1      	ldr	r1, [r0, #12]
   d747c:	9100      	str	r1, [sp, #0]
   d747e:	4907      	ldr	r1, [pc, #28]	; (d749c <asctime_r+0x40>)
   d7480:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7484:	440b      	add	r3, r1
   d7486:	4906      	ldr	r1, [pc, #24]	; (d74a0 <asctime_r+0x44>)
   d7488:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d748c:	440a      	add	r2, r1
   d748e:	4620      	mov	r0, r4
   d7490:	4904      	ldr	r1, [pc, #16]	; (d74a4 <asctime_r+0x48>)
   d7492:	f7fe f8b9 	bl	d5608 <siprintf>
   d7496:	4620      	mov	r0, r4
   d7498:	b006      	add	sp, #24
   d749a:	bd10      	pop	{r4, pc}
   d749c:	000d98e2 	.word	0x000d98e2
   d74a0:	000d98cd 	.word	0x000d98cd
   d74a4:	000d98ad 	.word	0x000d98ad

000d74a8 <atof>:
   d74a8:	2100      	movs	r1, #0
   d74aa:	f000 becf 	b.w	d824c <strtod>

000d74ae <atoi>:
   d74ae:	220a      	movs	r2, #10
   d74b0:	2100      	movs	r1, #0
   d74b2:	f000 bf51 	b.w	d8358 <strtol>
	...

000d74b8 <__cxa_atexit>:
   d74b8:	b510      	push	{r4, lr}
   d74ba:	4c05      	ldr	r4, [pc, #20]	; (d74d0 <__cxa_atexit+0x18>)
   d74bc:	4613      	mov	r3, r2
   d74be:	b12c      	cbz	r4, d74cc <__cxa_atexit+0x14>
   d74c0:	460a      	mov	r2, r1
   d74c2:	4601      	mov	r1, r0
   d74c4:	2002      	movs	r0, #2
   d74c6:	f3af 8000 	nop.w
   d74ca:	bd10      	pop	{r4, pc}
   d74cc:	4620      	mov	r0, r4
   d74ce:	e7fc      	b.n	d74ca <__cxa_atexit+0x12>
   d74d0:	00000000 	.word	0x00000000

000d74d4 <memcpy>:
   d74d4:	440a      	add	r2, r1
   d74d6:	4291      	cmp	r1, r2
   d74d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d74dc:	d100      	bne.n	d74e0 <memcpy+0xc>
   d74de:	4770      	bx	lr
   d74e0:	b510      	push	{r4, lr}
   d74e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d74e6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d74ea:	4291      	cmp	r1, r2
   d74ec:	d1f9      	bne.n	d74e2 <memcpy+0xe>
   d74ee:	bd10      	pop	{r4, pc}

000d74f0 <memset>:
   d74f0:	4402      	add	r2, r0
   d74f2:	4603      	mov	r3, r0
   d74f4:	4293      	cmp	r3, r2
   d74f6:	d100      	bne.n	d74fa <memset+0xa>
   d74f8:	4770      	bx	lr
   d74fa:	f803 1b01 	strb.w	r1, [r3], #1
   d74fe:	e7f9      	b.n	d74f4 <memset+0x4>

000d7500 <srand>:
   d7500:	b538      	push	{r3, r4, r5, lr}
   d7502:	4b0d      	ldr	r3, [pc, #52]	; (d7538 <srand+0x38>)
   d7504:	681d      	ldr	r5, [r3, #0]
   d7506:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7508:	4604      	mov	r4, r0
   d750a:	b97b      	cbnz	r3, d752c <srand+0x2c>
   d750c:	2018      	movs	r0, #24
   d750e:	f7fe f863 	bl	d55d8 <malloc>
   d7512:	4a0a      	ldr	r2, [pc, #40]	; (d753c <srand+0x3c>)
   d7514:	4b0a      	ldr	r3, [pc, #40]	; (d7540 <srand+0x40>)
   d7516:	63a8      	str	r0, [r5, #56]	; 0x38
   d7518:	e9c0 2300 	strd	r2, r3, [r0]
   d751c:	4b09      	ldr	r3, [pc, #36]	; (d7544 <srand+0x44>)
   d751e:	6083      	str	r3, [r0, #8]
   d7520:	230b      	movs	r3, #11
   d7522:	8183      	strh	r3, [r0, #12]
   d7524:	2201      	movs	r2, #1
   d7526:	2300      	movs	r3, #0
   d7528:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d752c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d752e:	2200      	movs	r2, #0
   d7530:	611c      	str	r4, [r3, #16]
   d7532:	615a      	str	r2, [r3, #20]
   d7534:	bd38      	pop	{r3, r4, r5, pc}
   d7536:	bf00      	nop
   d7538:	2003e2c4 	.word	0x2003e2c4
   d753c:	abcd330e 	.word	0xabcd330e
   d7540:	e66d1234 	.word	0xe66d1234
   d7544:	0005deec 	.word	0x0005deec

000d7548 <strcmp>:
   d7548:	f810 2b01 	ldrb.w	r2, [r0], #1
   d754c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7550:	2a01      	cmp	r2, #1
   d7552:	bf28      	it	cs
   d7554:	429a      	cmpcs	r2, r3
   d7556:	d0f7      	beq.n	d7548 <strcmp>
   d7558:	1ad0      	subs	r0, r2, r3
   d755a:	4770      	bx	lr

000d755c <strcpy>:
   d755c:	4603      	mov	r3, r0
   d755e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7562:	f803 2b01 	strb.w	r2, [r3], #1
   d7566:	2a00      	cmp	r2, #0
   d7568:	d1f9      	bne.n	d755e <strcpy+0x2>
   d756a:	4770      	bx	lr

000d756c <strdup>:
   d756c:	4b02      	ldr	r3, [pc, #8]	; (d7578 <strdup+0xc>)
   d756e:	4601      	mov	r1, r0
   d7570:	6818      	ldr	r0, [r3, #0]
   d7572:	f000 b803 	b.w	d757c <_strdup_r>
   d7576:	bf00      	nop
   d7578:	2003e2c4 	.word	0x2003e2c4

000d757c <_strdup_r>:
   d757c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d757e:	4604      	mov	r4, r0
   d7580:	4608      	mov	r0, r1
   d7582:	460d      	mov	r5, r1
   d7584:	f000 f80f 	bl	d75a6 <strlen>
   d7588:	1c42      	adds	r2, r0, #1
   d758a:	4611      	mov	r1, r2
   d758c:	4620      	mov	r0, r4
   d758e:	9201      	str	r2, [sp, #4]
   d7590:	f7fe f852 	bl	d5638 <_malloc_r>
   d7594:	4604      	mov	r4, r0
   d7596:	b118      	cbz	r0, d75a0 <_strdup_r+0x24>
   d7598:	9a01      	ldr	r2, [sp, #4]
   d759a:	4629      	mov	r1, r5
   d759c:	f7ff ff9a 	bl	d74d4 <memcpy>
   d75a0:	4620      	mov	r0, r4
   d75a2:	b003      	add	sp, #12
   d75a4:	bd30      	pop	{r4, r5, pc}

000d75a6 <strlen>:
   d75a6:	4603      	mov	r3, r0
   d75a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d75ac:	2a00      	cmp	r2, #0
   d75ae:	d1fb      	bne.n	d75a8 <strlen+0x2>
   d75b0:	1a18      	subs	r0, r3, r0
   d75b2:	3801      	subs	r0, #1
   d75b4:	4770      	bx	lr

000d75b6 <strncmp>:
   d75b6:	b510      	push	{r4, lr}
   d75b8:	b16a      	cbz	r2, d75d6 <strncmp+0x20>
   d75ba:	3901      	subs	r1, #1
   d75bc:	1884      	adds	r4, r0, r2
   d75be:	f810 3b01 	ldrb.w	r3, [r0], #1
   d75c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d75c6:	4293      	cmp	r3, r2
   d75c8:	d103      	bne.n	d75d2 <strncmp+0x1c>
   d75ca:	42a0      	cmp	r0, r4
   d75cc:	d001      	beq.n	d75d2 <strncmp+0x1c>
   d75ce:	2b00      	cmp	r3, #0
   d75d0:	d1f5      	bne.n	d75be <strncmp+0x8>
   d75d2:	1a98      	subs	r0, r3, r2
   d75d4:	bd10      	pop	{r4, pc}
   d75d6:	4610      	mov	r0, r2
   d75d8:	e7fc      	b.n	d75d4 <strncmp+0x1e>

000d75da <strncpy>:
   d75da:	b510      	push	{r4, lr}
   d75dc:	3901      	subs	r1, #1
   d75de:	4603      	mov	r3, r0
   d75e0:	b132      	cbz	r2, d75f0 <strncpy+0x16>
   d75e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d75e6:	f803 4b01 	strb.w	r4, [r3], #1
   d75ea:	3a01      	subs	r2, #1
   d75ec:	2c00      	cmp	r4, #0
   d75ee:	d1f7      	bne.n	d75e0 <strncpy+0x6>
   d75f0:	441a      	add	r2, r3
   d75f2:	2100      	movs	r1, #0
   d75f4:	4293      	cmp	r3, r2
   d75f6:	d100      	bne.n	d75fa <strncpy+0x20>
   d75f8:	bd10      	pop	{r4, pc}
   d75fa:	f803 1b01 	strb.w	r1, [r3], #1
   d75fe:	e7f9      	b.n	d75f4 <strncpy+0x1a>

000d7600 <sulp>:
   d7600:	b570      	push	{r4, r5, r6, lr}
   d7602:	4604      	mov	r4, r0
   d7604:	460d      	mov	r5, r1
   d7606:	ec45 4b10 	vmov	d0, r4, r5
   d760a:	4616      	mov	r6, r2
   d760c:	f001 fd1a 	bl	d9044 <__ulp>
   d7610:	ec51 0b10 	vmov	r0, r1, d0
   d7614:	b17e      	cbz	r6, d7636 <sulp+0x36>
   d7616:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d761a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d761e:	2b00      	cmp	r3, #0
   d7620:	dd09      	ble.n	d7636 <sulp+0x36>
   d7622:	051b      	lsls	r3, r3, #20
   d7624:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7628:	2400      	movs	r4, #0
   d762a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d762e:	4622      	mov	r2, r4
   d7630:	462b      	mov	r3, r5
   d7632:	f7ff fbeb 	bl	d6e0c <__aeabi_dmul>
   d7636:	bd70      	pop	{r4, r5, r6, pc}

000d7638 <_strtod_l>:
   d7638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d763c:	b0a3      	sub	sp, #140	; 0x8c
   d763e:	461f      	mov	r7, r3
   d7640:	2300      	movs	r3, #0
   d7642:	931e      	str	r3, [sp, #120]	; 0x78
   d7644:	4ba4      	ldr	r3, [pc, #656]	; (d78d8 <_strtod_l+0x2a0>)
   d7646:	9219      	str	r2, [sp, #100]	; 0x64
   d7648:	681b      	ldr	r3, [r3, #0]
   d764a:	9307      	str	r3, [sp, #28]
   d764c:	4604      	mov	r4, r0
   d764e:	4618      	mov	r0, r3
   d7650:	4688      	mov	r8, r1
   d7652:	f7ff ffa8 	bl	d75a6 <strlen>
   d7656:	f04f 0a00 	mov.w	sl, #0
   d765a:	4605      	mov	r5, r0
   d765c:	f04f 0b00 	mov.w	fp, #0
   d7660:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7666:	781a      	ldrb	r2, [r3, #0]
   d7668:	2a2b      	cmp	r2, #43	; 0x2b
   d766a:	d04c      	beq.n	d7706 <_strtod_l+0xce>
   d766c:	d839      	bhi.n	d76e2 <_strtod_l+0xaa>
   d766e:	2a0d      	cmp	r2, #13
   d7670:	d832      	bhi.n	d76d8 <_strtod_l+0xa0>
   d7672:	2a08      	cmp	r2, #8
   d7674:	d832      	bhi.n	d76dc <_strtod_l+0xa4>
   d7676:	2a00      	cmp	r2, #0
   d7678:	d03c      	beq.n	d76f4 <_strtod_l+0xbc>
   d767a:	2300      	movs	r3, #0
   d767c:	930e      	str	r3, [sp, #56]	; 0x38
   d767e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d7680:	7833      	ldrb	r3, [r6, #0]
   d7682:	2b30      	cmp	r3, #48	; 0x30
   d7684:	f040 80b4 	bne.w	d77f0 <_strtod_l+0x1b8>
   d7688:	7873      	ldrb	r3, [r6, #1]
   d768a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d768e:	2b58      	cmp	r3, #88	; 0x58
   d7690:	d16c      	bne.n	d776c <_strtod_l+0x134>
   d7692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7694:	9301      	str	r3, [sp, #4]
   d7696:	ab1e      	add	r3, sp, #120	; 0x78
   d7698:	9702      	str	r7, [sp, #8]
   d769a:	9300      	str	r3, [sp, #0]
   d769c:	4a8f      	ldr	r2, [pc, #572]	; (d78dc <_strtod_l+0x2a4>)
   d769e:	ab1f      	add	r3, sp, #124	; 0x7c
   d76a0:	a91d      	add	r1, sp, #116	; 0x74
   d76a2:	4620      	mov	r0, r4
   d76a4:	f000 feca 	bl	d843c <__gethex>
   d76a8:	f010 0707 	ands.w	r7, r0, #7
   d76ac:	4605      	mov	r5, r0
   d76ae:	d005      	beq.n	d76bc <_strtod_l+0x84>
   d76b0:	2f06      	cmp	r7, #6
   d76b2:	d12a      	bne.n	d770a <_strtod_l+0xd2>
   d76b4:	3601      	adds	r6, #1
   d76b6:	2300      	movs	r3, #0
   d76b8:	961d      	str	r6, [sp, #116]	; 0x74
   d76ba:	930e      	str	r3, [sp, #56]	; 0x38
   d76bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d76be:	2b00      	cmp	r3, #0
   d76c0:	f040 8596 	bne.w	d81f0 <_strtod_l+0xbb8>
   d76c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d76c6:	b1db      	cbz	r3, d7700 <_strtod_l+0xc8>
   d76c8:	4652      	mov	r2, sl
   d76ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d76ce:	ec43 2b10 	vmov	d0, r2, r3
   d76d2:	b023      	add	sp, #140	; 0x8c
   d76d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76d8:	2a20      	cmp	r2, #32
   d76da:	d1ce      	bne.n	d767a <_strtod_l+0x42>
   d76dc:	3301      	adds	r3, #1
   d76de:	931d      	str	r3, [sp, #116]	; 0x74
   d76e0:	e7c0      	b.n	d7664 <_strtod_l+0x2c>
   d76e2:	2a2d      	cmp	r2, #45	; 0x2d
   d76e4:	d1c9      	bne.n	d767a <_strtod_l+0x42>
   d76e6:	2201      	movs	r2, #1
   d76e8:	920e      	str	r2, [sp, #56]	; 0x38
   d76ea:	1c5a      	adds	r2, r3, #1
   d76ec:	921d      	str	r2, [sp, #116]	; 0x74
   d76ee:	785b      	ldrb	r3, [r3, #1]
   d76f0:	2b00      	cmp	r3, #0
   d76f2:	d1c4      	bne.n	d767e <_strtod_l+0x46>
   d76f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d76f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d76fa:	2b00      	cmp	r3, #0
   d76fc:	f040 8576 	bne.w	d81ec <_strtod_l+0xbb4>
   d7700:	4652      	mov	r2, sl
   d7702:	465b      	mov	r3, fp
   d7704:	e7e3      	b.n	d76ce <_strtod_l+0x96>
   d7706:	2200      	movs	r2, #0
   d7708:	e7ee      	b.n	d76e8 <_strtod_l+0xb0>
   d770a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d770c:	b13a      	cbz	r2, d771e <_strtod_l+0xe6>
   d770e:	2135      	movs	r1, #53	; 0x35
   d7710:	a820      	add	r0, sp, #128	; 0x80
   d7712:	f001 fd96 	bl	d9242 <__copybits>
   d7716:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7718:	4620      	mov	r0, r4
   d771a:	f001 f9cb 	bl	d8ab4 <_Bfree>
   d771e:	3f01      	subs	r7, #1
   d7720:	2f05      	cmp	r7, #5
   d7722:	d807      	bhi.n	d7734 <_strtod_l+0xfc>
   d7724:	e8df f007 	tbb	[pc, r7]
   d7728:	1d180b0e 	.word	0x1d180b0e
   d772c:	030e      	.short	0x030e
   d772e:	f04f 0b00 	mov.w	fp, #0
   d7732:	46da      	mov	sl, fp
   d7734:	0728      	lsls	r0, r5, #28
   d7736:	d5c1      	bpl.n	d76bc <_strtod_l+0x84>
   d7738:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d773c:	e7be      	b.n	d76bc <_strtod_l+0x84>
   d773e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d7742:	e7f7      	b.n	d7734 <_strtod_l+0xfc>
   d7744:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d7748:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d774a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d774e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7752:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7756:	e7ed      	b.n	d7734 <_strtod_l+0xfc>
   d7758:	f8df b184 	ldr.w	fp, [pc, #388]	; d78e0 <_strtod_l+0x2a8>
   d775c:	f04f 0a00 	mov.w	sl, #0
   d7760:	e7e8      	b.n	d7734 <_strtod_l+0xfc>
   d7762:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7766:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d776a:	e7e3      	b.n	d7734 <_strtod_l+0xfc>
   d776c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d776e:	1c5a      	adds	r2, r3, #1
   d7770:	921d      	str	r2, [sp, #116]	; 0x74
   d7772:	785b      	ldrb	r3, [r3, #1]
   d7774:	2b30      	cmp	r3, #48	; 0x30
   d7776:	d0f9      	beq.n	d776c <_strtod_l+0x134>
   d7778:	2b00      	cmp	r3, #0
   d777a:	d09f      	beq.n	d76bc <_strtod_l+0x84>
   d777c:	2301      	movs	r3, #1
   d777e:	f04f 0900 	mov.w	r9, #0
   d7782:	9304      	str	r3, [sp, #16]
   d7784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7786:	930a      	str	r3, [sp, #40]	; 0x28
   d7788:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d778c:	464f      	mov	r7, r9
   d778e:	220a      	movs	r2, #10
   d7790:	981d      	ldr	r0, [sp, #116]	; 0x74
   d7792:	7806      	ldrb	r6, [r0, #0]
   d7794:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7798:	b2d9      	uxtb	r1, r3
   d779a:	2909      	cmp	r1, #9
   d779c:	d92a      	bls.n	d77f4 <_strtod_l+0x1bc>
   d779e:	9907      	ldr	r1, [sp, #28]
   d77a0:	462a      	mov	r2, r5
   d77a2:	f7ff ff08 	bl	d75b6 <strncmp>
   d77a6:	b398      	cbz	r0, d7810 <_strtod_l+0x1d8>
   d77a8:	2000      	movs	r0, #0
   d77aa:	4633      	mov	r3, r6
   d77ac:	463d      	mov	r5, r7
   d77ae:	9007      	str	r0, [sp, #28]
   d77b0:	4602      	mov	r2, r0
   d77b2:	2b65      	cmp	r3, #101	; 0x65
   d77b4:	d001      	beq.n	d77ba <_strtod_l+0x182>
   d77b6:	2b45      	cmp	r3, #69	; 0x45
   d77b8:	d118      	bne.n	d77ec <_strtod_l+0x1b4>
   d77ba:	b91d      	cbnz	r5, d77c4 <_strtod_l+0x18c>
   d77bc:	9b04      	ldr	r3, [sp, #16]
   d77be:	4303      	orrs	r3, r0
   d77c0:	d098      	beq.n	d76f4 <_strtod_l+0xbc>
   d77c2:	2500      	movs	r5, #0
   d77c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d77c8:	f108 0301 	add.w	r3, r8, #1
   d77cc:	931d      	str	r3, [sp, #116]	; 0x74
   d77ce:	f898 3001 	ldrb.w	r3, [r8, #1]
   d77d2:	2b2b      	cmp	r3, #43	; 0x2b
   d77d4:	d075      	beq.n	d78c2 <_strtod_l+0x28a>
   d77d6:	2b2d      	cmp	r3, #45	; 0x2d
   d77d8:	d07b      	beq.n	d78d2 <_strtod_l+0x29a>
   d77da:	f04f 0c00 	mov.w	ip, #0
   d77de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d77e2:	2909      	cmp	r1, #9
   d77e4:	f240 8082 	bls.w	d78ec <_strtod_l+0x2b4>
   d77e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d77ec:	2600      	movs	r6, #0
   d77ee:	e09d      	b.n	d792c <_strtod_l+0x2f4>
   d77f0:	2300      	movs	r3, #0
   d77f2:	e7c4      	b.n	d777e <_strtod_l+0x146>
   d77f4:	2f08      	cmp	r7, #8
   d77f6:	bfd8      	it	le
   d77f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d77fa:	f100 0001 	add.w	r0, r0, #1
   d77fe:	bfda      	itte	le
   d7800:	fb02 3301 	mlale	r3, r2, r1, r3
   d7804:	9309      	strle	r3, [sp, #36]	; 0x24
   d7806:	fb02 3909 	mlagt	r9, r2, r9, r3
   d780a:	3701      	adds	r7, #1
   d780c:	901d      	str	r0, [sp, #116]	; 0x74
   d780e:	e7bf      	b.n	d7790 <_strtod_l+0x158>
   d7810:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7812:	195a      	adds	r2, r3, r5
   d7814:	921d      	str	r2, [sp, #116]	; 0x74
   d7816:	5d5b      	ldrb	r3, [r3, r5]
   d7818:	2f00      	cmp	r7, #0
   d781a:	d037      	beq.n	d788c <_strtod_l+0x254>
   d781c:	9007      	str	r0, [sp, #28]
   d781e:	463d      	mov	r5, r7
   d7820:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d7824:	2a09      	cmp	r2, #9
   d7826:	d912      	bls.n	d784e <_strtod_l+0x216>
   d7828:	2201      	movs	r2, #1
   d782a:	e7c2      	b.n	d77b2 <_strtod_l+0x17a>
   d782c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d782e:	1c5a      	adds	r2, r3, #1
   d7830:	921d      	str	r2, [sp, #116]	; 0x74
   d7832:	785b      	ldrb	r3, [r3, #1]
   d7834:	3001      	adds	r0, #1
   d7836:	2b30      	cmp	r3, #48	; 0x30
   d7838:	d0f8      	beq.n	d782c <_strtod_l+0x1f4>
   d783a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d783e:	2a08      	cmp	r2, #8
   d7840:	f200 84db 	bhi.w	d81fa <_strtod_l+0xbc2>
   d7844:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d7846:	9007      	str	r0, [sp, #28]
   d7848:	2000      	movs	r0, #0
   d784a:	920a      	str	r2, [sp, #40]	; 0x28
   d784c:	4605      	mov	r5, r0
   d784e:	3b30      	subs	r3, #48	; 0x30
   d7850:	f100 0201 	add.w	r2, r0, #1
   d7854:	d014      	beq.n	d7880 <_strtod_l+0x248>
   d7856:	9907      	ldr	r1, [sp, #28]
   d7858:	4411      	add	r1, r2
   d785a:	9107      	str	r1, [sp, #28]
   d785c:	462a      	mov	r2, r5
   d785e:	eb00 0e05 	add.w	lr, r0, r5
   d7862:	210a      	movs	r1, #10
   d7864:	4572      	cmp	r2, lr
   d7866:	d113      	bne.n	d7890 <_strtod_l+0x258>
   d7868:	182a      	adds	r2, r5, r0
   d786a:	2a08      	cmp	r2, #8
   d786c:	f105 0501 	add.w	r5, r5, #1
   d7870:	4405      	add	r5, r0
   d7872:	dc1c      	bgt.n	d78ae <_strtod_l+0x276>
   d7874:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7876:	220a      	movs	r2, #10
   d7878:	fb02 3301 	mla	r3, r2, r1, r3
   d787c:	9309      	str	r3, [sp, #36]	; 0x24
   d787e:	2200      	movs	r2, #0
   d7880:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7882:	1c59      	adds	r1, r3, #1
   d7884:	911d      	str	r1, [sp, #116]	; 0x74
   d7886:	785b      	ldrb	r3, [r3, #1]
   d7888:	4610      	mov	r0, r2
   d788a:	e7c9      	b.n	d7820 <_strtod_l+0x1e8>
   d788c:	4638      	mov	r0, r7
   d788e:	e7d2      	b.n	d7836 <_strtod_l+0x1fe>
   d7890:	2a08      	cmp	r2, #8
   d7892:	dc04      	bgt.n	d789e <_strtod_l+0x266>
   d7894:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7896:	434e      	muls	r6, r1
   d7898:	9609      	str	r6, [sp, #36]	; 0x24
   d789a:	3201      	adds	r2, #1
   d789c:	e7e2      	b.n	d7864 <_strtod_l+0x22c>
   d789e:	f102 0c01 	add.w	ip, r2, #1
   d78a2:	f1bc 0f10 	cmp.w	ip, #16
   d78a6:	bfd8      	it	le
   d78a8:	fb01 f909 	mulle.w	r9, r1, r9
   d78ac:	e7f5      	b.n	d789a <_strtod_l+0x262>
   d78ae:	2d10      	cmp	r5, #16
   d78b0:	bfdc      	itt	le
   d78b2:	220a      	movle	r2, #10
   d78b4:	fb02 3909 	mlale	r9, r2, r9, r3
   d78b8:	e7e1      	b.n	d787e <_strtod_l+0x246>
   d78ba:	2300      	movs	r3, #0
   d78bc:	9307      	str	r3, [sp, #28]
   d78be:	2201      	movs	r2, #1
   d78c0:	e77c      	b.n	d77bc <_strtod_l+0x184>
   d78c2:	f04f 0c00 	mov.w	ip, #0
   d78c6:	f108 0302 	add.w	r3, r8, #2
   d78ca:	931d      	str	r3, [sp, #116]	; 0x74
   d78cc:	f898 3002 	ldrb.w	r3, [r8, #2]
   d78d0:	e785      	b.n	d77de <_strtod_l+0x1a6>
   d78d2:	f04f 0c01 	mov.w	ip, #1
   d78d6:	e7f6      	b.n	d78c6 <_strtod_l+0x28e>
   d78d8:	000d9a6c 	.word	0x000d9a6c
   d78dc:	000d9914 	.word	0x000d9914
   d78e0:	7ff00000 	.word	0x7ff00000
   d78e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d78e6:	1c59      	adds	r1, r3, #1
   d78e8:	911d      	str	r1, [sp, #116]	; 0x74
   d78ea:	785b      	ldrb	r3, [r3, #1]
   d78ec:	2b30      	cmp	r3, #48	; 0x30
   d78ee:	d0f9      	beq.n	d78e4 <_strtod_l+0x2ac>
   d78f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d78f4:	2908      	cmp	r1, #8
   d78f6:	f63f af79 	bhi.w	d77ec <_strtod_l+0x1b4>
   d78fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d78fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7900:	9308      	str	r3, [sp, #32]
   d7902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7904:	1c59      	adds	r1, r3, #1
   d7906:	911d      	str	r1, [sp, #116]	; 0x74
   d7908:	785b      	ldrb	r3, [r3, #1]
   d790a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d790e:	2e09      	cmp	r6, #9
   d7910:	d937      	bls.n	d7982 <_strtod_l+0x34a>
   d7912:	9e08      	ldr	r6, [sp, #32]
   d7914:	1b89      	subs	r1, r1, r6
   d7916:	2908      	cmp	r1, #8
   d7918:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d791c:	dc02      	bgt.n	d7924 <_strtod_l+0x2ec>
   d791e:	4576      	cmp	r6, lr
   d7920:	bfa8      	it	ge
   d7922:	4676      	movge	r6, lr
   d7924:	f1bc 0f00 	cmp.w	ip, #0
   d7928:	d000      	beq.n	d792c <_strtod_l+0x2f4>
   d792a:	4276      	negs	r6, r6
   d792c:	2d00      	cmp	r5, #0
   d792e:	d14f      	bne.n	d79d0 <_strtod_l+0x398>
   d7930:	9904      	ldr	r1, [sp, #16]
   d7932:	4301      	orrs	r1, r0
   d7934:	f47f aec2 	bne.w	d76bc <_strtod_l+0x84>
   d7938:	2a00      	cmp	r2, #0
   d793a:	f47f aedb 	bne.w	d76f4 <_strtod_l+0xbc>
   d793e:	2b69      	cmp	r3, #105	; 0x69
   d7940:	d027      	beq.n	d7992 <_strtod_l+0x35a>
   d7942:	dc24      	bgt.n	d798e <_strtod_l+0x356>
   d7944:	2b49      	cmp	r3, #73	; 0x49
   d7946:	d024      	beq.n	d7992 <_strtod_l+0x35a>
   d7948:	2b4e      	cmp	r3, #78	; 0x4e
   d794a:	f47f aed3 	bne.w	d76f4 <_strtod_l+0xbc>
   d794e:	499e      	ldr	r1, [pc, #632]	; (d7bc8 <_strtod_l+0x590>)
   d7950:	a81d      	add	r0, sp, #116	; 0x74
   d7952:	f000 ffb9 	bl	d88c8 <__match>
   d7956:	2800      	cmp	r0, #0
   d7958:	f43f aecc 	beq.w	d76f4 <_strtod_l+0xbc>
   d795c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d795e:	781b      	ldrb	r3, [r3, #0]
   d7960:	2b28      	cmp	r3, #40	; 0x28
   d7962:	d12d      	bne.n	d79c0 <_strtod_l+0x388>
   d7964:	4999      	ldr	r1, [pc, #612]	; (d7bcc <_strtod_l+0x594>)
   d7966:	aa20      	add	r2, sp, #128	; 0x80
   d7968:	a81d      	add	r0, sp, #116	; 0x74
   d796a:	f000 ffc1 	bl	d88f0 <__hexnan>
   d796e:	2805      	cmp	r0, #5
   d7970:	d126      	bne.n	d79c0 <_strtod_l+0x388>
   d7972:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d7974:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d7978:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d797c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7980:	e69c      	b.n	d76bc <_strtod_l+0x84>
   d7982:	210a      	movs	r1, #10
   d7984:	fb01 3e0e 	mla	lr, r1, lr, r3
   d7988:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d798c:	e7b9      	b.n	d7902 <_strtod_l+0x2ca>
   d798e:	2b6e      	cmp	r3, #110	; 0x6e
   d7990:	e7db      	b.n	d794a <_strtod_l+0x312>
   d7992:	498f      	ldr	r1, [pc, #572]	; (d7bd0 <_strtod_l+0x598>)
   d7994:	a81d      	add	r0, sp, #116	; 0x74
   d7996:	f000 ff97 	bl	d88c8 <__match>
   d799a:	2800      	cmp	r0, #0
   d799c:	f43f aeaa 	beq.w	d76f4 <_strtod_l+0xbc>
   d79a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d79a2:	498c      	ldr	r1, [pc, #560]	; (d7bd4 <_strtod_l+0x59c>)
   d79a4:	3b01      	subs	r3, #1
   d79a6:	a81d      	add	r0, sp, #116	; 0x74
   d79a8:	931d      	str	r3, [sp, #116]	; 0x74
   d79aa:	f000 ff8d 	bl	d88c8 <__match>
   d79ae:	b910      	cbnz	r0, d79b6 <_strtod_l+0x37e>
   d79b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d79b2:	3301      	adds	r3, #1
   d79b4:	931d      	str	r3, [sp, #116]	; 0x74
   d79b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d7be4 <_strtod_l+0x5ac>
   d79ba:	f04f 0a00 	mov.w	sl, #0
   d79be:	e67d      	b.n	d76bc <_strtod_l+0x84>
   d79c0:	4885      	ldr	r0, [pc, #532]	; (d7bd8 <_strtod_l+0x5a0>)
   d79c2:	f001 fc91 	bl	d92e8 <nan>
   d79c6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d79ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d79ce:	e675      	b.n	d76bc <_strtod_l+0x84>
   d79d0:	9b07      	ldr	r3, [sp, #28]
   d79d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d79d4:	1af3      	subs	r3, r6, r3
   d79d6:	2f00      	cmp	r7, #0
   d79d8:	bf08      	it	eq
   d79da:	462f      	moveq	r7, r5
   d79dc:	2d10      	cmp	r5, #16
   d79de:	9308      	str	r3, [sp, #32]
   d79e0:	46a8      	mov	r8, r5
   d79e2:	bfa8      	it	ge
   d79e4:	f04f 0810 	movge.w	r8, #16
   d79e8:	f7ff f996 	bl	d6d18 <__aeabi_ui2d>
   d79ec:	2d09      	cmp	r5, #9
   d79ee:	4682      	mov	sl, r0
   d79f0:	468b      	mov	fp, r1
   d79f2:	dd13      	ble.n	d7a1c <_strtod_l+0x3e4>
   d79f4:	4b79      	ldr	r3, [pc, #484]	; (d7bdc <_strtod_l+0x5a4>)
   d79f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d79fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d79fe:	f7ff fa05 	bl	d6e0c <__aeabi_dmul>
   d7a02:	4682      	mov	sl, r0
   d7a04:	4648      	mov	r0, r9
   d7a06:	468b      	mov	fp, r1
   d7a08:	f7ff f986 	bl	d6d18 <__aeabi_ui2d>
   d7a0c:	4602      	mov	r2, r0
   d7a0e:	460b      	mov	r3, r1
   d7a10:	4650      	mov	r0, sl
   d7a12:	4659      	mov	r1, fp
   d7a14:	f7ff f844 	bl	d6aa0 <__adddf3>
   d7a18:	4682      	mov	sl, r0
   d7a1a:	468b      	mov	fp, r1
   d7a1c:	2d0f      	cmp	r5, #15
   d7a1e:	dc38      	bgt.n	d7a92 <_strtod_l+0x45a>
   d7a20:	9b08      	ldr	r3, [sp, #32]
   d7a22:	2b00      	cmp	r3, #0
   d7a24:	f43f ae4a 	beq.w	d76bc <_strtod_l+0x84>
   d7a28:	dd24      	ble.n	d7a74 <_strtod_l+0x43c>
   d7a2a:	2b16      	cmp	r3, #22
   d7a2c:	dc0b      	bgt.n	d7a46 <_strtod_l+0x40e>
   d7a2e:	4d6b      	ldr	r5, [pc, #428]	; (d7bdc <_strtod_l+0x5a4>)
   d7a30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d7a34:	e9d5 0100 	ldrd	r0, r1, [r5]
   d7a38:	4652      	mov	r2, sl
   d7a3a:	465b      	mov	r3, fp
   d7a3c:	f7ff f9e6 	bl	d6e0c <__aeabi_dmul>
   d7a40:	4682      	mov	sl, r0
   d7a42:	468b      	mov	fp, r1
   d7a44:	e63a      	b.n	d76bc <_strtod_l+0x84>
   d7a46:	9a08      	ldr	r2, [sp, #32]
   d7a48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7a4c:	4293      	cmp	r3, r2
   d7a4e:	db20      	blt.n	d7a92 <_strtod_l+0x45a>
   d7a50:	4c62      	ldr	r4, [pc, #392]	; (d7bdc <_strtod_l+0x5a4>)
   d7a52:	f1c5 050f 	rsb	r5, r5, #15
   d7a56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7a5a:	4652      	mov	r2, sl
   d7a5c:	465b      	mov	r3, fp
   d7a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7a62:	f7ff f9d3 	bl	d6e0c <__aeabi_dmul>
   d7a66:	9b08      	ldr	r3, [sp, #32]
   d7a68:	1b5d      	subs	r5, r3, r5
   d7a6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7a6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7a72:	e7e3      	b.n	d7a3c <_strtod_l+0x404>
   d7a74:	9b08      	ldr	r3, [sp, #32]
   d7a76:	3316      	adds	r3, #22
   d7a78:	db0b      	blt.n	d7a92 <_strtod_l+0x45a>
   d7a7a:	9b07      	ldr	r3, [sp, #28]
   d7a7c:	4a57      	ldr	r2, [pc, #348]	; (d7bdc <_strtod_l+0x5a4>)
   d7a7e:	1b9e      	subs	r6, r3, r6
   d7a80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d7a84:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7a88:	4650      	mov	r0, sl
   d7a8a:	4659      	mov	r1, fp
   d7a8c:	f7ff fae8 	bl	d7060 <__aeabi_ddiv>
   d7a90:	e7d6      	b.n	d7a40 <_strtod_l+0x408>
   d7a92:	9b08      	ldr	r3, [sp, #32]
   d7a94:	eba5 0808 	sub.w	r8, r5, r8
   d7a98:	4498      	add	r8, r3
   d7a9a:	f1b8 0f00 	cmp.w	r8, #0
   d7a9e:	dd71      	ble.n	d7b84 <_strtod_l+0x54c>
   d7aa0:	f018 030f 	ands.w	r3, r8, #15
   d7aa4:	d00a      	beq.n	d7abc <_strtod_l+0x484>
   d7aa6:	494d      	ldr	r1, [pc, #308]	; (d7bdc <_strtod_l+0x5a4>)
   d7aa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d7aac:	4652      	mov	r2, sl
   d7aae:	465b      	mov	r3, fp
   d7ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7ab4:	f7ff f9aa 	bl	d6e0c <__aeabi_dmul>
   d7ab8:	4682      	mov	sl, r0
   d7aba:	468b      	mov	fp, r1
   d7abc:	f038 080f 	bics.w	r8, r8, #15
   d7ac0:	d04d      	beq.n	d7b5e <_strtod_l+0x526>
   d7ac2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d7ac6:	dd22      	ble.n	d7b0e <_strtod_l+0x4d6>
   d7ac8:	2500      	movs	r5, #0
   d7aca:	462e      	mov	r6, r5
   d7acc:	9509      	str	r5, [sp, #36]	; 0x24
   d7ace:	9507      	str	r5, [sp, #28]
   d7ad0:	2322      	movs	r3, #34	; 0x22
   d7ad2:	f8df b110 	ldr.w	fp, [pc, #272]	; d7be4 <_strtod_l+0x5ac>
   d7ad6:	6023      	str	r3, [r4, #0]
   d7ad8:	f04f 0a00 	mov.w	sl, #0
   d7adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7ade:	2b00      	cmp	r3, #0
   d7ae0:	f43f adec 	beq.w	d76bc <_strtod_l+0x84>
   d7ae4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7ae6:	4620      	mov	r0, r4
   d7ae8:	f000 ffe4 	bl	d8ab4 <_Bfree>
   d7aec:	9907      	ldr	r1, [sp, #28]
   d7aee:	4620      	mov	r0, r4
   d7af0:	f000 ffe0 	bl	d8ab4 <_Bfree>
   d7af4:	4631      	mov	r1, r6
   d7af6:	4620      	mov	r0, r4
   d7af8:	f000 ffdc 	bl	d8ab4 <_Bfree>
   d7afc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7afe:	4620      	mov	r0, r4
   d7b00:	f000 ffd8 	bl	d8ab4 <_Bfree>
   d7b04:	4629      	mov	r1, r5
   d7b06:	4620      	mov	r0, r4
   d7b08:	f000 ffd4 	bl	d8ab4 <_Bfree>
   d7b0c:	e5d6      	b.n	d76bc <_strtod_l+0x84>
   d7b0e:	2300      	movs	r3, #0
   d7b10:	ea4f 1828 	mov.w	r8, r8, asr #4
   d7b14:	4650      	mov	r0, sl
   d7b16:	4659      	mov	r1, fp
   d7b18:	4699      	mov	r9, r3
   d7b1a:	f1b8 0f01 	cmp.w	r8, #1
   d7b1e:	dc21      	bgt.n	d7b64 <_strtod_l+0x52c>
   d7b20:	b10b      	cbz	r3, d7b26 <_strtod_l+0x4ee>
   d7b22:	4682      	mov	sl, r0
   d7b24:	468b      	mov	fp, r1
   d7b26:	4b2e      	ldr	r3, [pc, #184]	; (d7be0 <_strtod_l+0x5a8>)
   d7b28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7b2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d7b30:	4652      	mov	r2, sl
   d7b32:	465b      	mov	r3, fp
   d7b34:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7b38:	f7ff f968 	bl	d6e0c <__aeabi_dmul>
   d7b3c:	4b29      	ldr	r3, [pc, #164]	; (d7be4 <_strtod_l+0x5ac>)
   d7b3e:	460a      	mov	r2, r1
   d7b40:	400b      	ands	r3, r1
   d7b42:	4929      	ldr	r1, [pc, #164]	; (d7be8 <_strtod_l+0x5b0>)
   d7b44:	428b      	cmp	r3, r1
   d7b46:	4682      	mov	sl, r0
   d7b48:	d8be      	bhi.n	d7ac8 <_strtod_l+0x490>
   d7b4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7b4e:	428b      	cmp	r3, r1
   d7b50:	bf86      	itte	hi
   d7b52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d7bec <_strtod_l+0x5b4>
   d7b56:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7b5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7b5e:	2300      	movs	r3, #0
   d7b60:	9304      	str	r3, [sp, #16]
   d7b62:	e081      	b.n	d7c68 <_strtod_l+0x630>
   d7b64:	f018 0f01 	tst.w	r8, #1
   d7b68:	d007      	beq.n	d7b7a <_strtod_l+0x542>
   d7b6a:	4b1d      	ldr	r3, [pc, #116]	; (d7be0 <_strtod_l+0x5a8>)
   d7b6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b74:	f7ff f94a 	bl	d6e0c <__aeabi_dmul>
   d7b78:	2301      	movs	r3, #1
   d7b7a:	f109 0901 	add.w	r9, r9, #1
   d7b7e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7b82:	e7ca      	b.n	d7b1a <_strtod_l+0x4e2>
   d7b84:	d0eb      	beq.n	d7b5e <_strtod_l+0x526>
   d7b86:	f1c8 0800 	rsb	r8, r8, #0
   d7b8a:	f018 020f 	ands.w	r2, r8, #15
   d7b8e:	d00a      	beq.n	d7ba6 <_strtod_l+0x56e>
   d7b90:	4b12      	ldr	r3, [pc, #72]	; (d7bdc <_strtod_l+0x5a4>)
   d7b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7b96:	4650      	mov	r0, sl
   d7b98:	4659      	mov	r1, fp
   d7b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b9e:	f7ff fa5f 	bl	d7060 <__aeabi_ddiv>
   d7ba2:	4682      	mov	sl, r0
   d7ba4:	468b      	mov	fp, r1
   d7ba6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d7baa:	d0d8      	beq.n	d7b5e <_strtod_l+0x526>
   d7bac:	f1b8 0f1f 	cmp.w	r8, #31
   d7bb0:	dd1e      	ble.n	d7bf0 <_strtod_l+0x5b8>
   d7bb2:	2500      	movs	r5, #0
   d7bb4:	462e      	mov	r6, r5
   d7bb6:	9509      	str	r5, [sp, #36]	; 0x24
   d7bb8:	9507      	str	r5, [sp, #28]
   d7bba:	2322      	movs	r3, #34	; 0x22
   d7bbc:	f04f 0a00 	mov.w	sl, #0
   d7bc0:	f04f 0b00 	mov.w	fp, #0
   d7bc4:	6023      	str	r3, [r4, #0]
   d7bc6:	e789      	b.n	d7adc <_strtod_l+0x4a4>
   d7bc8:	000d990f 	.word	0x000d990f
   d7bcc:	000d9928 	.word	0x000d9928
   d7bd0:	000d9906 	.word	0x000d9906
   d7bd4:	000d9909 	.word	0x000d9909
   d7bd8:	000d98cc 	.word	0x000d98cc
   d7bdc:	000d9aa8 	.word	0x000d9aa8
   d7be0:	000d9a80 	.word	0x000d9a80
   d7be4:	7ff00000 	.word	0x7ff00000
   d7be8:	7ca00000 	.word	0x7ca00000
   d7bec:	7fefffff 	.word	0x7fefffff
   d7bf0:	f018 0310 	ands.w	r3, r8, #16
   d7bf4:	bf18      	it	ne
   d7bf6:	236a      	movne	r3, #106	; 0x6a
   d7bf8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d7fb0 <_strtod_l+0x978>
   d7bfc:	9304      	str	r3, [sp, #16]
   d7bfe:	4650      	mov	r0, sl
   d7c00:	4659      	mov	r1, fp
   d7c02:	2300      	movs	r3, #0
   d7c04:	f018 0f01 	tst.w	r8, #1
   d7c08:	d004      	beq.n	d7c14 <_strtod_l+0x5dc>
   d7c0a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7c0e:	f7ff f8fd 	bl	d6e0c <__aeabi_dmul>
   d7c12:	2301      	movs	r3, #1
   d7c14:	ea5f 0868 	movs.w	r8, r8, asr #1
   d7c18:	f109 0908 	add.w	r9, r9, #8
   d7c1c:	d1f2      	bne.n	d7c04 <_strtod_l+0x5cc>
   d7c1e:	b10b      	cbz	r3, d7c24 <_strtod_l+0x5ec>
   d7c20:	4682      	mov	sl, r0
   d7c22:	468b      	mov	fp, r1
   d7c24:	9b04      	ldr	r3, [sp, #16]
   d7c26:	b1bb      	cbz	r3, d7c58 <_strtod_l+0x620>
   d7c28:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7c2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7c30:	2b00      	cmp	r3, #0
   d7c32:	4659      	mov	r1, fp
   d7c34:	dd10      	ble.n	d7c58 <_strtod_l+0x620>
   d7c36:	2b1f      	cmp	r3, #31
   d7c38:	f340 8128 	ble.w	d7e8c <_strtod_l+0x854>
   d7c3c:	2b34      	cmp	r3, #52	; 0x34
   d7c3e:	bfde      	ittt	le
   d7c40:	3b20      	suble	r3, #32
   d7c42:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7c46:	fa02 f303 	lslle.w	r3, r2, r3
   d7c4a:	f04f 0a00 	mov.w	sl, #0
   d7c4e:	bfcc      	ite	gt
   d7c50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7c54:	ea03 0b01 	andle.w	fp, r3, r1
   d7c58:	2200      	movs	r2, #0
   d7c5a:	2300      	movs	r3, #0
   d7c5c:	4650      	mov	r0, sl
   d7c5e:	4659      	mov	r1, fp
   d7c60:	f7ff fb3c 	bl	d72dc <__aeabi_dcmpeq>
   d7c64:	2800      	cmp	r0, #0
   d7c66:	d1a4      	bne.n	d7bb2 <_strtod_l+0x57a>
   d7c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7c6a:	9300      	str	r3, [sp, #0]
   d7c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d7c6e:	462b      	mov	r3, r5
   d7c70:	463a      	mov	r2, r7
   d7c72:	4620      	mov	r0, r4
   d7c74:	f000 ff73 	bl	d8b5e <__s2b>
   d7c78:	9009      	str	r0, [sp, #36]	; 0x24
   d7c7a:	2800      	cmp	r0, #0
   d7c7c:	f43f af24 	beq.w	d7ac8 <_strtod_l+0x490>
   d7c80:	9b07      	ldr	r3, [sp, #28]
   d7c82:	1b9e      	subs	r6, r3, r6
   d7c84:	9b08      	ldr	r3, [sp, #32]
   d7c86:	2b00      	cmp	r3, #0
   d7c88:	bfb4      	ite	lt
   d7c8a:	4633      	movlt	r3, r6
   d7c8c:	2300      	movge	r3, #0
   d7c8e:	9310      	str	r3, [sp, #64]	; 0x40
   d7c90:	9b08      	ldr	r3, [sp, #32]
   d7c92:	2500      	movs	r5, #0
   d7c94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7c98:	9318      	str	r3, [sp, #96]	; 0x60
   d7c9a:	462e      	mov	r6, r5
   d7c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7c9e:	4620      	mov	r0, r4
   d7ca0:	6859      	ldr	r1, [r3, #4]
   d7ca2:	f000 fed3 	bl	d8a4c <_Balloc>
   d7ca6:	9007      	str	r0, [sp, #28]
   d7ca8:	2800      	cmp	r0, #0
   d7caa:	f43f af11 	beq.w	d7ad0 <_strtod_l+0x498>
   d7cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7cb0:	691a      	ldr	r2, [r3, #16]
   d7cb2:	3202      	adds	r2, #2
   d7cb4:	f103 010c 	add.w	r1, r3, #12
   d7cb8:	0092      	lsls	r2, r2, #2
   d7cba:	300c      	adds	r0, #12
   d7cbc:	f7ff fc0a 	bl	d74d4 <memcpy>
   d7cc0:	ec4b ab10 	vmov	d0, sl, fp
   d7cc4:	aa20      	add	r2, sp, #128	; 0x80
   d7cc6:	a91f      	add	r1, sp, #124	; 0x7c
   d7cc8:	4620      	mov	r0, r4
   d7cca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d7cce:	f001 fa35 	bl	d913c <__d2b>
   d7cd2:	901e      	str	r0, [sp, #120]	; 0x78
   d7cd4:	2800      	cmp	r0, #0
   d7cd6:	f43f aefb 	beq.w	d7ad0 <_strtod_l+0x498>
   d7cda:	2101      	movs	r1, #1
   d7cdc:	4620      	mov	r0, r4
   d7cde:	f000 ffcc 	bl	d8c7a <__i2b>
   d7ce2:	4606      	mov	r6, r0
   d7ce4:	2800      	cmp	r0, #0
   d7ce6:	f43f aef3 	beq.w	d7ad0 <_strtod_l+0x498>
   d7cea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d7cec:	9904      	ldr	r1, [sp, #16]
   d7cee:	2b00      	cmp	r3, #0
   d7cf0:	bfab      	itete	ge
   d7cf2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d7cf4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d7cf6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d7cf8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d7cfc:	bfac      	ite	ge
   d7cfe:	eb03 0902 	addge.w	r9, r3, r2
   d7d02:	1ad7      	sublt	r7, r2, r3
   d7d04:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d7d06:	eba3 0801 	sub.w	r8, r3, r1
   d7d0a:	4490      	add	r8, r2
   d7d0c:	4ba3      	ldr	r3, [pc, #652]	; (d7f9c <_strtod_l+0x964>)
   d7d0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d7d12:	4598      	cmp	r8, r3
   d7d14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d7d18:	f280 80cc 	bge.w	d7eb4 <_strtod_l+0x87c>
   d7d1c:	eba3 0308 	sub.w	r3, r3, r8
   d7d20:	2b1f      	cmp	r3, #31
   d7d22:	eba2 0203 	sub.w	r2, r2, r3
   d7d26:	f04f 0101 	mov.w	r1, #1
   d7d2a:	f300 80b6 	bgt.w	d7e9a <_strtod_l+0x862>
   d7d2e:	fa01 f303 	lsl.w	r3, r1, r3
   d7d32:	9311      	str	r3, [sp, #68]	; 0x44
   d7d34:	2300      	movs	r3, #0
   d7d36:	930c      	str	r3, [sp, #48]	; 0x30
   d7d38:	eb09 0802 	add.w	r8, r9, r2
   d7d3c:	9b04      	ldr	r3, [sp, #16]
   d7d3e:	45c1      	cmp	r9, r8
   d7d40:	4417      	add	r7, r2
   d7d42:	441f      	add	r7, r3
   d7d44:	464b      	mov	r3, r9
   d7d46:	bfa8      	it	ge
   d7d48:	4643      	movge	r3, r8
   d7d4a:	42bb      	cmp	r3, r7
   d7d4c:	bfa8      	it	ge
   d7d4e:	463b      	movge	r3, r7
   d7d50:	2b00      	cmp	r3, #0
   d7d52:	bfc2      	ittt	gt
   d7d54:	eba8 0803 	subgt.w	r8, r8, r3
   d7d58:	1aff      	subgt	r7, r7, r3
   d7d5a:	eba9 0903 	subgt.w	r9, r9, r3
   d7d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7d60:	2b00      	cmp	r3, #0
   d7d62:	dd17      	ble.n	d7d94 <_strtod_l+0x75c>
   d7d64:	4631      	mov	r1, r6
   d7d66:	461a      	mov	r2, r3
   d7d68:	4620      	mov	r0, r4
   d7d6a:	f001 f82b 	bl	d8dc4 <__pow5mult>
   d7d6e:	4606      	mov	r6, r0
   d7d70:	2800      	cmp	r0, #0
   d7d72:	f43f aead 	beq.w	d7ad0 <_strtod_l+0x498>
   d7d76:	4601      	mov	r1, r0
   d7d78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7d7a:	4620      	mov	r0, r4
   d7d7c:	f000 ff86 	bl	d8c8c <__multiply>
   d7d80:	900f      	str	r0, [sp, #60]	; 0x3c
   d7d82:	2800      	cmp	r0, #0
   d7d84:	f43f aea4 	beq.w	d7ad0 <_strtod_l+0x498>
   d7d88:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7d8a:	4620      	mov	r0, r4
   d7d8c:	f000 fe92 	bl	d8ab4 <_Bfree>
   d7d90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7d92:	931e      	str	r3, [sp, #120]	; 0x78
   d7d94:	f1b8 0f00 	cmp.w	r8, #0
   d7d98:	f300 8091 	bgt.w	d7ebe <_strtod_l+0x886>
   d7d9c:	9b08      	ldr	r3, [sp, #32]
   d7d9e:	2b00      	cmp	r3, #0
   d7da0:	dd08      	ble.n	d7db4 <_strtod_l+0x77c>
   d7da2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7da4:	9907      	ldr	r1, [sp, #28]
   d7da6:	4620      	mov	r0, r4
   d7da8:	f001 f80c 	bl	d8dc4 <__pow5mult>
   d7dac:	9007      	str	r0, [sp, #28]
   d7dae:	2800      	cmp	r0, #0
   d7db0:	f43f ae8e 	beq.w	d7ad0 <_strtod_l+0x498>
   d7db4:	2f00      	cmp	r7, #0
   d7db6:	dd08      	ble.n	d7dca <_strtod_l+0x792>
   d7db8:	9907      	ldr	r1, [sp, #28]
   d7dba:	463a      	mov	r2, r7
   d7dbc:	4620      	mov	r0, r4
   d7dbe:	f001 f84f 	bl	d8e60 <__lshift>
   d7dc2:	9007      	str	r0, [sp, #28]
   d7dc4:	2800      	cmp	r0, #0
   d7dc6:	f43f ae83 	beq.w	d7ad0 <_strtod_l+0x498>
   d7dca:	f1b9 0f00 	cmp.w	r9, #0
   d7dce:	dd08      	ble.n	d7de2 <_strtod_l+0x7aa>
   d7dd0:	4631      	mov	r1, r6
   d7dd2:	464a      	mov	r2, r9
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	f001 f843 	bl	d8e60 <__lshift>
   d7dda:	4606      	mov	r6, r0
   d7ddc:	2800      	cmp	r0, #0
   d7dde:	f43f ae77 	beq.w	d7ad0 <_strtod_l+0x498>
   d7de2:	9a07      	ldr	r2, [sp, #28]
   d7de4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7de6:	4620      	mov	r0, r4
   d7de8:	f001 f8b5 	bl	d8f56 <__mdiff>
   d7dec:	4605      	mov	r5, r0
   d7dee:	2800      	cmp	r0, #0
   d7df0:	f43f ae6e 	beq.w	d7ad0 <_strtod_l+0x498>
   d7df4:	68c3      	ldr	r3, [r0, #12]
   d7df6:	930f      	str	r3, [sp, #60]	; 0x3c
   d7df8:	2300      	movs	r3, #0
   d7dfa:	60c3      	str	r3, [r0, #12]
   d7dfc:	4631      	mov	r1, r6
   d7dfe:	f001 f88e 	bl	d8f1e <__mcmp>
   d7e02:	2800      	cmp	r0, #0
   d7e04:	da65      	bge.n	d7ed2 <_strtod_l+0x89a>
   d7e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7e08:	ea53 030a 	orrs.w	r3, r3, sl
   d7e0c:	f040 8087 	bne.w	d7f1e <_strtod_l+0x8e6>
   d7e10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7e14:	2b00      	cmp	r3, #0
   d7e16:	f040 8082 	bne.w	d7f1e <_strtod_l+0x8e6>
   d7e1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7e1e:	0d1b      	lsrs	r3, r3, #20
   d7e20:	051b      	lsls	r3, r3, #20
   d7e22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d7e26:	d97a      	bls.n	d7f1e <_strtod_l+0x8e6>
   d7e28:	696b      	ldr	r3, [r5, #20]
   d7e2a:	b913      	cbnz	r3, d7e32 <_strtod_l+0x7fa>
   d7e2c:	692b      	ldr	r3, [r5, #16]
   d7e2e:	2b01      	cmp	r3, #1
   d7e30:	dd75      	ble.n	d7f1e <_strtod_l+0x8e6>
   d7e32:	4629      	mov	r1, r5
   d7e34:	2201      	movs	r2, #1
   d7e36:	4620      	mov	r0, r4
   d7e38:	f001 f812 	bl	d8e60 <__lshift>
   d7e3c:	4631      	mov	r1, r6
   d7e3e:	4605      	mov	r5, r0
   d7e40:	f001 f86d 	bl	d8f1e <__mcmp>
   d7e44:	2800      	cmp	r0, #0
   d7e46:	dd6a      	ble.n	d7f1e <_strtod_l+0x8e6>
   d7e48:	9904      	ldr	r1, [sp, #16]
   d7e4a:	4a55      	ldr	r2, [pc, #340]	; (d7fa0 <_strtod_l+0x968>)
   d7e4c:	465b      	mov	r3, fp
   d7e4e:	2900      	cmp	r1, #0
   d7e50:	f000 8085 	beq.w	d7f5e <_strtod_l+0x926>
   d7e54:	ea02 010b 	and.w	r1, r2, fp
   d7e58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d7e5c:	dc7f      	bgt.n	d7f5e <_strtod_l+0x926>
   d7e5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d7e62:	f77f aeaa 	ble.w	d7bba <_strtod_l+0x582>
   d7e66:	4a4f      	ldr	r2, [pc, #316]	; (d7fa4 <_strtod_l+0x96c>)
   d7e68:	2300      	movs	r3, #0
   d7e6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d7e6e:	4650      	mov	r0, sl
   d7e70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d7e74:	4659      	mov	r1, fp
   d7e76:	f7fe ffc9 	bl	d6e0c <__aeabi_dmul>
   d7e7a:	460b      	mov	r3, r1
   d7e7c:	4303      	orrs	r3, r0
   d7e7e:	bf08      	it	eq
   d7e80:	2322      	moveq	r3, #34	; 0x22
   d7e82:	4682      	mov	sl, r0
   d7e84:	468b      	mov	fp, r1
   d7e86:	bf08      	it	eq
   d7e88:	6023      	streq	r3, [r4, #0]
   d7e8a:	e62b      	b.n	d7ae4 <_strtod_l+0x4ac>
   d7e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7e90:	fa02 f303 	lsl.w	r3, r2, r3
   d7e94:	ea03 0a0a 	and.w	sl, r3, sl
   d7e98:	e6de      	b.n	d7c58 <_strtod_l+0x620>
   d7e9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d7e9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d7ea2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d7ea6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d7eaa:	fa01 f308 	lsl.w	r3, r1, r8
   d7eae:	930c      	str	r3, [sp, #48]	; 0x30
   d7eb0:	9111      	str	r1, [sp, #68]	; 0x44
   d7eb2:	e741      	b.n	d7d38 <_strtod_l+0x700>
   d7eb4:	2300      	movs	r3, #0
   d7eb6:	930c      	str	r3, [sp, #48]	; 0x30
   d7eb8:	2301      	movs	r3, #1
   d7eba:	9311      	str	r3, [sp, #68]	; 0x44
   d7ebc:	e73c      	b.n	d7d38 <_strtod_l+0x700>
   d7ebe:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7ec0:	4642      	mov	r2, r8
   d7ec2:	4620      	mov	r0, r4
   d7ec4:	f000 ffcc 	bl	d8e60 <__lshift>
   d7ec8:	901e      	str	r0, [sp, #120]	; 0x78
   d7eca:	2800      	cmp	r0, #0
   d7ecc:	f47f af66 	bne.w	d7d9c <_strtod_l+0x764>
   d7ed0:	e5fe      	b.n	d7ad0 <_strtod_l+0x498>
   d7ed2:	465f      	mov	r7, fp
   d7ed4:	d16e      	bne.n	d7fb4 <_strtod_l+0x97c>
   d7ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7ed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7edc:	b342      	cbz	r2, d7f30 <_strtod_l+0x8f8>
   d7ede:	4a32      	ldr	r2, [pc, #200]	; (d7fa8 <_strtod_l+0x970>)
   d7ee0:	4293      	cmp	r3, r2
   d7ee2:	d128      	bne.n	d7f36 <_strtod_l+0x8fe>
   d7ee4:	9b04      	ldr	r3, [sp, #16]
   d7ee6:	4650      	mov	r0, sl
   d7ee8:	b1eb      	cbz	r3, d7f26 <_strtod_l+0x8ee>
   d7eea:	4a2d      	ldr	r2, [pc, #180]	; (d7fa0 <_strtod_l+0x968>)
   d7eec:	403a      	ands	r2, r7
   d7eee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d7ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d7ef6:	d819      	bhi.n	d7f2c <_strtod_l+0x8f4>
   d7ef8:	0d12      	lsrs	r2, r2, #20
   d7efa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d7efe:	fa01 f303 	lsl.w	r3, r1, r3
   d7f02:	4298      	cmp	r0, r3
   d7f04:	d117      	bne.n	d7f36 <_strtod_l+0x8fe>
   d7f06:	4b29      	ldr	r3, [pc, #164]	; (d7fac <_strtod_l+0x974>)
   d7f08:	429f      	cmp	r7, r3
   d7f0a:	d102      	bne.n	d7f12 <_strtod_l+0x8da>
   d7f0c:	3001      	adds	r0, #1
   d7f0e:	f43f addf 	beq.w	d7ad0 <_strtod_l+0x498>
   d7f12:	4b23      	ldr	r3, [pc, #140]	; (d7fa0 <_strtod_l+0x968>)
   d7f14:	403b      	ands	r3, r7
   d7f16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d7f1a:	f04f 0a00 	mov.w	sl, #0
   d7f1e:	9b04      	ldr	r3, [sp, #16]
   d7f20:	2b00      	cmp	r3, #0
   d7f22:	d1a0      	bne.n	d7e66 <_strtod_l+0x82e>
   d7f24:	e5de      	b.n	d7ae4 <_strtod_l+0x4ac>
   d7f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7f2a:	e7ea      	b.n	d7f02 <_strtod_l+0x8ca>
   d7f2c:	460b      	mov	r3, r1
   d7f2e:	e7e8      	b.n	d7f02 <_strtod_l+0x8ca>
   d7f30:	ea53 030a 	orrs.w	r3, r3, sl
   d7f34:	d088      	beq.n	d7e48 <_strtod_l+0x810>
   d7f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7f38:	b1db      	cbz	r3, d7f72 <_strtod_l+0x93a>
   d7f3a:	423b      	tst	r3, r7
   d7f3c:	d0ef      	beq.n	d7f1e <_strtod_l+0x8e6>
   d7f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7f40:	9a04      	ldr	r2, [sp, #16]
   d7f42:	4650      	mov	r0, sl
   d7f44:	4659      	mov	r1, fp
   d7f46:	b1c3      	cbz	r3, d7f7a <_strtod_l+0x942>
   d7f48:	f7ff fb5a 	bl	d7600 <sulp>
   d7f4c:	4602      	mov	r2, r0
   d7f4e:	460b      	mov	r3, r1
   d7f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7f54:	f7fe fda4 	bl	d6aa0 <__adddf3>
   d7f58:	4682      	mov	sl, r0
   d7f5a:	468b      	mov	fp, r1
   d7f5c:	e7df      	b.n	d7f1e <_strtod_l+0x8e6>
   d7f5e:	4013      	ands	r3, r2
   d7f60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d7f64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7f68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d7f6c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7f70:	e7d5      	b.n	d7f1e <_strtod_l+0x8e6>
   d7f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7f74:	ea13 0f0a 	tst.w	r3, sl
   d7f78:	e7e0      	b.n	d7f3c <_strtod_l+0x904>
   d7f7a:	f7ff fb41 	bl	d7600 <sulp>
   d7f7e:	4602      	mov	r2, r0
   d7f80:	460b      	mov	r3, r1
   d7f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7f86:	f7fe fd89 	bl	d6a9c <__aeabi_dsub>
   d7f8a:	2200      	movs	r2, #0
   d7f8c:	2300      	movs	r3, #0
   d7f8e:	4682      	mov	sl, r0
   d7f90:	468b      	mov	fp, r1
   d7f92:	f7ff f9a3 	bl	d72dc <__aeabi_dcmpeq>
   d7f96:	2800      	cmp	r0, #0
   d7f98:	d0c1      	beq.n	d7f1e <_strtod_l+0x8e6>
   d7f9a:	e60e      	b.n	d7bba <_strtod_l+0x582>
   d7f9c:	fffffc02 	.word	0xfffffc02
   d7fa0:	7ff00000 	.word	0x7ff00000
   d7fa4:	39500000 	.word	0x39500000
   d7fa8:	000fffff 	.word	0x000fffff
   d7fac:	7fefffff 	.word	0x7fefffff
   d7fb0:	000d9940 	.word	0x000d9940
   d7fb4:	4631      	mov	r1, r6
   d7fb6:	4628      	mov	r0, r5
   d7fb8:	f001 f910 	bl	d91dc <__ratio>
   d7fbc:	ec59 8b10 	vmov	r8, r9, d0
   d7fc0:	ee10 0a10 	vmov	r0, s0
   d7fc4:	2200      	movs	r2, #0
   d7fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7fca:	4649      	mov	r1, r9
   d7fcc:	f7ff f99a 	bl	d7304 <__aeabi_dcmple>
   d7fd0:	2800      	cmp	r0, #0
   d7fd2:	d07c      	beq.n	d80ce <_strtod_l+0xa96>
   d7fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7fd6:	2b00      	cmp	r3, #0
   d7fd8:	d04c      	beq.n	d8074 <_strtod_l+0xa3c>
   d7fda:	4b95      	ldr	r3, [pc, #596]	; (d8230 <_strtod_l+0xbf8>)
   d7fdc:	2200      	movs	r2, #0
   d7fde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7fe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8230 <_strtod_l+0xbf8>
   d7fe6:	f04f 0800 	mov.w	r8, #0
   d7fea:	4b92      	ldr	r3, [pc, #584]	; (d8234 <_strtod_l+0xbfc>)
   d7fec:	403b      	ands	r3, r7
   d7fee:	9311      	str	r3, [sp, #68]	; 0x44
   d7ff0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7ff2:	4b91      	ldr	r3, [pc, #580]	; (d8238 <_strtod_l+0xc00>)
   d7ff4:	429a      	cmp	r2, r3
   d7ff6:	f040 80b2 	bne.w	d815e <_strtod_l+0xb26>
   d7ffa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8002:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d8006:	ec4b ab10 	vmov	d0, sl, fp
   d800a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d800e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d8012:	f001 f817 	bl	d9044 <__ulp>
   d8016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d801a:	ec53 2b10 	vmov	r2, r3, d0
   d801e:	f7fe fef5 	bl	d6e0c <__aeabi_dmul>
   d8022:	4652      	mov	r2, sl
   d8024:	465b      	mov	r3, fp
   d8026:	f7fe fd3b 	bl	d6aa0 <__adddf3>
   d802a:	460b      	mov	r3, r1
   d802c:	4981      	ldr	r1, [pc, #516]	; (d8234 <_strtod_l+0xbfc>)
   d802e:	4a83      	ldr	r2, [pc, #524]	; (d823c <_strtod_l+0xc04>)
   d8030:	4019      	ands	r1, r3
   d8032:	4291      	cmp	r1, r2
   d8034:	4682      	mov	sl, r0
   d8036:	d95e      	bls.n	d80f6 <_strtod_l+0xabe>
   d8038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d803a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d803e:	4293      	cmp	r3, r2
   d8040:	d103      	bne.n	d804a <_strtod_l+0xa12>
   d8042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8044:	3301      	adds	r3, #1
   d8046:	f43f ad43 	beq.w	d7ad0 <_strtod_l+0x498>
   d804a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d8248 <_strtod_l+0xc10>
   d804e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8052:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8054:	4620      	mov	r0, r4
   d8056:	f000 fd2d 	bl	d8ab4 <_Bfree>
   d805a:	9907      	ldr	r1, [sp, #28]
   d805c:	4620      	mov	r0, r4
   d805e:	f000 fd29 	bl	d8ab4 <_Bfree>
   d8062:	4631      	mov	r1, r6
   d8064:	4620      	mov	r0, r4
   d8066:	f000 fd25 	bl	d8ab4 <_Bfree>
   d806a:	4629      	mov	r1, r5
   d806c:	4620      	mov	r0, r4
   d806e:	f000 fd21 	bl	d8ab4 <_Bfree>
   d8072:	e613      	b.n	d7c9c <_strtod_l+0x664>
   d8074:	f1ba 0f00 	cmp.w	sl, #0
   d8078:	d11b      	bne.n	d80b2 <_strtod_l+0xa7a>
   d807a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d807e:	b9f3      	cbnz	r3, d80be <_strtod_l+0xa86>
   d8080:	4b6b      	ldr	r3, [pc, #428]	; (d8230 <_strtod_l+0xbf8>)
   d8082:	2200      	movs	r2, #0
   d8084:	4640      	mov	r0, r8
   d8086:	4649      	mov	r1, r9
   d8088:	f7ff f932 	bl	d72f0 <__aeabi_dcmplt>
   d808c:	b9d0      	cbnz	r0, d80c4 <_strtod_l+0xa8c>
   d808e:	4640      	mov	r0, r8
   d8090:	4649      	mov	r1, r9
   d8092:	4b6b      	ldr	r3, [pc, #428]	; (d8240 <_strtod_l+0xc08>)
   d8094:	2200      	movs	r2, #0
   d8096:	f7fe feb9 	bl	d6e0c <__aeabi_dmul>
   d809a:	4680      	mov	r8, r0
   d809c:	4689      	mov	r9, r1
   d809e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d80a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d80a6:	931b      	str	r3, [sp, #108]	; 0x6c
   d80a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d80ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d80b0:	e79b      	b.n	d7fea <_strtod_l+0x9b2>
   d80b2:	f1ba 0f01 	cmp.w	sl, #1
   d80b6:	d102      	bne.n	d80be <_strtod_l+0xa86>
   d80b8:	2f00      	cmp	r7, #0
   d80ba:	f43f ad7e 	beq.w	d7bba <_strtod_l+0x582>
   d80be:	4b61      	ldr	r3, [pc, #388]	; (d8244 <_strtod_l+0xc0c>)
   d80c0:	2200      	movs	r2, #0
   d80c2:	e78c      	b.n	d7fde <_strtod_l+0x9a6>
   d80c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; d8240 <_strtod_l+0xc08>
   d80c8:	f04f 0800 	mov.w	r8, #0
   d80cc:	e7e7      	b.n	d809e <_strtod_l+0xa66>
   d80ce:	4b5c      	ldr	r3, [pc, #368]	; (d8240 <_strtod_l+0xc08>)
   d80d0:	4640      	mov	r0, r8
   d80d2:	4649      	mov	r1, r9
   d80d4:	2200      	movs	r2, #0
   d80d6:	f7fe fe99 	bl	d6e0c <__aeabi_dmul>
   d80da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d80dc:	4680      	mov	r8, r0
   d80de:	4689      	mov	r9, r1
   d80e0:	b933      	cbnz	r3, d80f0 <_strtod_l+0xab8>
   d80e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d80e6:	9012      	str	r0, [sp, #72]	; 0x48
   d80e8:	9313      	str	r3, [sp, #76]	; 0x4c
   d80ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d80ee:	e7dd      	b.n	d80ac <_strtod_l+0xa74>
   d80f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d80f4:	e7f9      	b.n	d80ea <_strtod_l+0xab2>
   d80f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d80fa:	9b04      	ldr	r3, [sp, #16]
   d80fc:	2b00      	cmp	r3, #0
   d80fe:	d1a8      	bne.n	d8052 <_strtod_l+0xa1a>
   d8100:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8104:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8106:	0d1b      	lsrs	r3, r3, #20
   d8108:	051b      	lsls	r3, r3, #20
   d810a:	429a      	cmp	r2, r3
   d810c:	d1a1      	bne.n	d8052 <_strtod_l+0xa1a>
   d810e:	4640      	mov	r0, r8
   d8110:	4649      	mov	r1, r9
   d8112:	f001 f8ff 	bl	d9314 <__aeabi_d2lz>
   d8116:	f7fe fe4b 	bl	d6db0 <__aeabi_l2d>
   d811a:	4602      	mov	r2, r0
   d811c:	460b      	mov	r3, r1
   d811e:	4640      	mov	r0, r8
   d8120:	4649      	mov	r1, r9
   d8122:	f7fe fcbb 	bl	d6a9c <__aeabi_dsub>
   d8126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8128:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d812c:	ea43 030a 	orr.w	r3, r3, sl
   d8130:	4313      	orrs	r3, r2
   d8132:	4680      	mov	r8, r0
   d8134:	4689      	mov	r9, r1
   d8136:	d053      	beq.n	d81e0 <_strtod_l+0xba8>
   d8138:	a335      	add	r3, pc, #212	; (adr r3, d8210 <_strtod_l+0xbd8>)
   d813a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d813e:	f7ff f8d7 	bl	d72f0 <__aeabi_dcmplt>
   d8142:	2800      	cmp	r0, #0
   d8144:	f47f acce 	bne.w	d7ae4 <_strtod_l+0x4ac>
   d8148:	a333      	add	r3, pc, #204	; (adr r3, d8218 <_strtod_l+0xbe0>)
   d814a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d814e:	4640      	mov	r0, r8
   d8150:	4649      	mov	r1, r9
   d8152:	f7ff f8eb 	bl	d732c <__aeabi_dcmpgt>
   d8156:	2800      	cmp	r0, #0
   d8158:	f43f af7b 	beq.w	d8052 <_strtod_l+0xa1a>
   d815c:	e4c2      	b.n	d7ae4 <_strtod_l+0x4ac>
   d815e:	9b04      	ldr	r3, [sp, #16]
   d8160:	b333      	cbz	r3, d81b0 <_strtod_l+0xb78>
   d8162:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d8164:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8168:	d822      	bhi.n	d81b0 <_strtod_l+0xb78>
   d816a:	a32d      	add	r3, pc, #180	; (adr r3, d8220 <_strtod_l+0xbe8>)
   d816c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8170:	4640      	mov	r0, r8
   d8172:	4649      	mov	r1, r9
   d8174:	f7ff f8c6 	bl	d7304 <__aeabi_dcmple>
   d8178:	b1a0      	cbz	r0, d81a4 <_strtod_l+0xb6c>
   d817a:	4649      	mov	r1, r9
   d817c:	4640      	mov	r0, r8
   d817e:	f7ff f8df 	bl	d7340 <__aeabi_d2uiz>
   d8182:	2801      	cmp	r0, #1
   d8184:	bf38      	it	cc
   d8186:	2001      	movcc	r0, #1
   d8188:	f7fe fdc6 	bl	d6d18 <__aeabi_ui2d>
   d818c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d818e:	4680      	mov	r8, r0
   d8190:	4689      	mov	r9, r1
   d8192:	bb13      	cbnz	r3, d81da <_strtod_l+0xba2>
   d8194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8198:	9014      	str	r0, [sp, #80]	; 0x50
   d819a:	9315      	str	r3, [sp, #84]	; 0x54
   d819c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d81a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d81a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d81a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d81a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d81ac:	1a9b      	subs	r3, r3, r2
   d81ae:	930d      	str	r3, [sp, #52]	; 0x34
   d81b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d81b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d81b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d81bc:	f000 ff42 	bl	d9044 <__ulp>
   d81c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d81c4:	ec53 2b10 	vmov	r2, r3, d0
   d81c8:	f7fe fe20 	bl	d6e0c <__aeabi_dmul>
   d81cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d81d0:	f7fe fc66 	bl	d6aa0 <__adddf3>
   d81d4:	4682      	mov	sl, r0
   d81d6:	468b      	mov	fp, r1
   d81d8:	e78f      	b.n	d80fa <_strtod_l+0xac2>
   d81da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d81de:	e7dd      	b.n	d819c <_strtod_l+0xb64>
   d81e0:	a311      	add	r3, pc, #68	; (adr r3, d8228 <_strtod_l+0xbf0>)
   d81e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81e6:	f7ff f883 	bl	d72f0 <__aeabi_dcmplt>
   d81ea:	e7b4      	b.n	d8156 <_strtod_l+0xb1e>
   d81ec:	2300      	movs	r3, #0
   d81ee:	930e      	str	r3, [sp, #56]	; 0x38
   d81f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d81f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d81f4:	6013      	str	r3, [r2, #0]
   d81f6:	f7ff ba65 	b.w	d76c4 <_strtod_l+0x8c>
   d81fa:	2b65      	cmp	r3, #101	; 0x65
   d81fc:	f43f ab5d 	beq.w	d78ba <_strtod_l+0x282>
   d8200:	2b45      	cmp	r3, #69	; 0x45
   d8202:	f43f ab5a 	beq.w	d78ba <_strtod_l+0x282>
   d8206:	2201      	movs	r2, #1
   d8208:	f7ff bb92 	b.w	d7930 <_strtod_l+0x2f8>
   d820c:	f3af 8000 	nop.w
   d8210:	94a03595 	.word	0x94a03595
   d8214:	3fdfffff 	.word	0x3fdfffff
   d8218:	35afe535 	.word	0x35afe535
   d821c:	3fe00000 	.word	0x3fe00000
   d8220:	ffc00000 	.word	0xffc00000
   d8224:	41dfffff 	.word	0x41dfffff
   d8228:	94a03595 	.word	0x94a03595
   d822c:	3fcfffff 	.word	0x3fcfffff
   d8230:	3ff00000 	.word	0x3ff00000
   d8234:	7ff00000 	.word	0x7ff00000
   d8238:	7fe00000 	.word	0x7fe00000
   d823c:	7c9fffff 	.word	0x7c9fffff
   d8240:	3fe00000 	.word	0x3fe00000
   d8244:	bff00000 	.word	0xbff00000
   d8248:	7fefffff 	.word	0x7fefffff

000d824c <strtod>:
   d824c:	460a      	mov	r2, r1
   d824e:	4601      	mov	r1, r0
   d8250:	4802      	ldr	r0, [pc, #8]	; (d825c <strtod+0x10>)
   d8252:	4b03      	ldr	r3, [pc, #12]	; (d8260 <strtod+0x14>)
   d8254:	6800      	ldr	r0, [r0, #0]
   d8256:	f7ff b9ef 	b.w	d7638 <_strtod_l>
   d825a:	bf00      	nop
   d825c:	2003e2c4 	.word	0x2003e2c4
   d8260:	2003e32c 	.word	0x2003e32c

000d8264 <_strtol_l.isra.0>:
   d8264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8268:	4e3a      	ldr	r6, [pc, #232]	; (d8354 <_strtol_l.isra.0+0xf0>)
   d826a:	4686      	mov	lr, r0
   d826c:	468c      	mov	ip, r1
   d826e:	4660      	mov	r0, ip
   d8270:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8274:	5da5      	ldrb	r5, [r4, r6]
   d8276:	f015 0508 	ands.w	r5, r5, #8
   d827a:	d1f8      	bne.n	d826e <_strtol_l.isra.0+0xa>
   d827c:	2c2d      	cmp	r4, #45	; 0x2d
   d827e:	d133      	bne.n	d82e8 <_strtol_l.isra.0+0x84>
   d8280:	f89c 4000 	ldrb.w	r4, [ip]
   d8284:	f04f 0801 	mov.w	r8, #1
   d8288:	f100 0c02 	add.w	ip, r0, #2
   d828c:	2b00      	cmp	r3, #0
   d828e:	d05c      	beq.n	d834a <_strtol_l.isra.0+0xe6>
   d8290:	2b10      	cmp	r3, #16
   d8292:	d10c      	bne.n	d82ae <_strtol_l.isra.0+0x4a>
   d8294:	2c30      	cmp	r4, #48	; 0x30
   d8296:	d10a      	bne.n	d82ae <_strtol_l.isra.0+0x4a>
   d8298:	f89c 0000 	ldrb.w	r0, [ip]
   d829c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d82a0:	2858      	cmp	r0, #88	; 0x58
   d82a2:	d14d      	bne.n	d8340 <_strtol_l.isra.0+0xdc>
   d82a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d82a8:	2310      	movs	r3, #16
   d82aa:	f10c 0c02 	add.w	ip, ip, #2
   d82ae:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d82b2:	3f01      	subs	r7, #1
   d82b4:	2600      	movs	r6, #0
   d82b6:	fbb7 f9f3 	udiv	r9, r7, r3
   d82ba:	4630      	mov	r0, r6
   d82bc:	fb03 7a19 	mls	sl, r3, r9, r7
   d82c0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d82c4:	2d09      	cmp	r5, #9
   d82c6:	d818      	bhi.n	d82fa <_strtol_l.isra.0+0x96>
   d82c8:	462c      	mov	r4, r5
   d82ca:	42a3      	cmp	r3, r4
   d82cc:	dd24      	ble.n	d8318 <_strtol_l.isra.0+0xb4>
   d82ce:	1c75      	adds	r5, r6, #1
   d82d0:	d007      	beq.n	d82e2 <_strtol_l.isra.0+0x7e>
   d82d2:	4581      	cmp	r9, r0
   d82d4:	d31d      	bcc.n	d8312 <_strtol_l.isra.0+0xae>
   d82d6:	d101      	bne.n	d82dc <_strtol_l.isra.0+0x78>
   d82d8:	45a2      	cmp	sl, r4
   d82da:	db1a      	blt.n	d8312 <_strtol_l.isra.0+0xae>
   d82dc:	fb00 4003 	mla	r0, r0, r3, r4
   d82e0:	2601      	movs	r6, #1
   d82e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d82e6:	e7eb      	b.n	d82c0 <_strtol_l.isra.0+0x5c>
   d82e8:	2c2b      	cmp	r4, #43	; 0x2b
   d82ea:	bf08      	it	eq
   d82ec:	f89c 4000 	ldrbeq.w	r4, [ip]
   d82f0:	46a8      	mov	r8, r5
   d82f2:	bf08      	it	eq
   d82f4:	f100 0c02 	addeq.w	ip, r0, #2
   d82f8:	e7c8      	b.n	d828c <_strtol_l.isra.0+0x28>
   d82fa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d82fe:	2d19      	cmp	r5, #25
   d8300:	d801      	bhi.n	d8306 <_strtol_l.isra.0+0xa2>
   d8302:	3c37      	subs	r4, #55	; 0x37
   d8304:	e7e1      	b.n	d82ca <_strtol_l.isra.0+0x66>
   d8306:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d830a:	2d19      	cmp	r5, #25
   d830c:	d804      	bhi.n	d8318 <_strtol_l.isra.0+0xb4>
   d830e:	3c57      	subs	r4, #87	; 0x57
   d8310:	e7db      	b.n	d82ca <_strtol_l.isra.0+0x66>
   d8312:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8316:	e7e4      	b.n	d82e2 <_strtol_l.isra.0+0x7e>
   d8318:	1c73      	adds	r3, r6, #1
   d831a:	d106      	bne.n	d832a <_strtol_l.isra.0+0xc6>
   d831c:	2322      	movs	r3, #34	; 0x22
   d831e:	f8ce 3000 	str.w	r3, [lr]
   d8322:	4638      	mov	r0, r7
   d8324:	b942      	cbnz	r2, d8338 <_strtol_l.isra.0+0xd4>
   d8326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d832a:	f1b8 0f00 	cmp.w	r8, #0
   d832e:	d000      	beq.n	d8332 <_strtol_l.isra.0+0xce>
   d8330:	4240      	negs	r0, r0
   d8332:	2a00      	cmp	r2, #0
   d8334:	d0f7      	beq.n	d8326 <_strtol_l.isra.0+0xc2>
   d8336:	b10e      	cbz	r6, d833c <_strtol_l.isra.0+0xd8>
   d8338:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d833c:	6011      	str	r1, [r2, #0]
   d833e:	e7f2      	b.n	d8326 <_strtol_l.isra.0+0xc2>
   d8340:	2430      	movs	r4, #48	; 0x30
   d8342:	2b00      	cmp	r3, #0
   d8344:	d1b3      	bne.n	d82ae <_strtol_l.isra.0+0x4a>
   d8346:	2308      	movs	r3, #8
   d8348:	e7b1      	b.n	d82ae <_strtol_l.isra.0+0x4a>
   d834a:	2c30      	cmp	r4, #48	; 0x30
   d834c:	d0a4      	beq.n	d8298 <_strtol_l.isra.0+0x34>
   d834e:	230a      	movs	r3, #10
   d8350:	e7ad      	b.n	d82ae <_strtol_l.isra.0+0x4a>
   d8352:	bf00      	nop
   d8354:	000d9969 	.word	0x000d9969

000d8358 <strtol>:
   d8358:	4613      	mov	r3, r2
   d835a:	460a      	mov	r2, r1
   d835c:	4601      	mov	r1, r0
   d835e:	4802      	ldr	r0, [pc, #8]	; (d8368 <strtol+0x10>)
   d8360:	6800      	ldr	r0, [r0, #0]
   d8362:	f7ff bf7f 	b.w	d8264 <_strtol_l.isra.0>
   d8366:	bf00      	nop
   d8368:	2003e2c4 	.word	0x2003e2c4

000d836c <rshift>:
   d836c:	6903      	ldr	r3, [r0, #16]
   d836e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d8372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8376:	ea4f 1261 	mov.w	r2, r1, asr #5
   d837a:	f100 0414 	add.w	r4, r0, #20
   d837e:	dd45      	ble.n	d840c <rshift+0xa0>
   d8380:	f011 011f 	ands.w	r1, r1, #31
   d8384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d8388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d838c:	d10c      	bne.n	d83a8 <rshift+0x3c>
   d838e:	f100 0710 	add.w	r7, r0, #16
   d8392:	4629      	mov	r1, r5
   d8394:	42b1      	cmp	r1, r6
   d8396:	d334      	bcc.n	d8402 <rshift+0x96>
   d8398:	1a9b      	subs	r3, r3, r2
   d839a:	009b      	lsls	r3, r3, #2
   d839c:	1eea      	subs	r2, r5, #3
   d839e:	4296      	cmp	r6, r2
   d83a0:	bf38      	it	cc
   d83a2:	2300      	movcc	r3, #0
   d83a4:	4423      	add	r3, r4
   d83a6:	e015      	b.n	d83d4 <rshift+0x68>
   d83a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d83ac:	f1c1 0820 	rsb	r8, r1, #32
   d83b0:	40cf      	lsrs	r7, r1
   d83b2:	f105 0e04 	add.w	lr, r5, #4
   d83b6:	46a1      	mov	r9, r4
   d83b8:	4576      	cmp	r6, lr
   d83ba:	46f4      	mov	ip, lr
   d83bc:	d815      	bhi.n	d83ea <rshift+0x7e>
   d83be:	1a9b      	subs	r3, r3, r2
   d83c0:	009a      	lsls	r2, r3, #2
   d83c2:	3a04      	subs	r2, #4
   d83c4:	3501      	adds	r5, #1
   d83c6:	42ae      	cmp	r6, r5
   d83c8:	bf38      	it	cc
   d83ca:	2200      	movcc	r2, #0
   d83cc:	18a3      	adds	r3, r4, r2
   d83ce:	50a7      	str	r7, [r4, r2]
   d83d0:	b107      	cbz	r7, d83d4 <rshift+0x68>
   d83d2:	3304      	adds	r3, #4
   d83d4:	1b1a      	subs	r2, r3, r4
   d83d6:	42a3      	cmp	r3, r4
   d83d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d83dc:	bf08      	it	eq
   d83de:	2300      	moveq	r3, #0
   d83e0:	6102      	str	r2, [r0, #16]
   d83e2:	bf08      	it	eq
   d83e4:	6143      	streq	r3, [r0, #20]
   d83e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d83ea:	f8dc c000 	ldr.w	ip, [ip]
   d83ee:	fa0c fc08 	lsl.w	ip, ip, r8
   d83f2:	ea4c 0707 	orr.w	r7, ip, r7
   d83f6:	f849 7b04 	str.w	r7, [r9], #4
   d83fa:	f85e 7b04 	ldr.w	r7, [lr], #4
   d83fe:	40cf      	lsrs	r7, r1
   d8400:	e7da      	b.n	d83b8 <rshift+0x4c>
   d8402:	f851 cb04 	ldr.w	ip, [r1], #4
   d8406:	f847 cf04 	str.w	ip, [r7, #4]!
   d840a:	e7c3      	b.n	d8394 <rshift+0x28>
   d840c:	4623      	mov	r3, r4
   d840e:	e7e1      	b.n	d83d4 <rshift+0x68>

000d8410 <__hexdig_fun>:
   d8410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8414:	2b09      	cmp	r3, #9
   d8416:	d802      	bhi.n	d841e <__hexdig_fun+0xe>
   d8418:	3820      	subs	r0, #32
   d841a:	b2c0      	uxtb	r0, r0
   d841c:	4770      	bx	lr
   d841e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8422:	2b05      	cmp	r3, #5
   d8424:	d801      	bhi.n	d842a <__hexdig_fun+0x1a>
   d8426:	3847      	subs	r0, #71	; 0x47
   d8428:	e7f7      	b.n	d841a <__hexdig_fun+0xa>
   d842a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d842e:	2b05      	cmp	r3, #5
   d8430:	d801      	bhi.n	d8436 <__hexdig_fun+0x26>
   d8432:	3827      	subs	r0, #39	; 0x27
   d8434:	e7f1      	b.n	d841a <__hexdig_fun+0xa>
   d8436:	2000      	movs	r0, #0
   d8438:	4770      	bx	lr
	...

000d843c <__gethex>:
   d843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8440:	ed2d 8b02 	vpush	{d8}
   d8444:	b089      	sub	sp, #36	; 0x24
   d8446:	ee08 0a10 	vmov	s16, r0
   d844a:	9304      	str	r3, [sp, #16]
   d844c:	4bbc      	ldr	r3, [pc, #752]	; (d8740 <__gethex+0x304>)
   d844e:	681b      	ldr	r3, [r3, #0]
   d8450:	9301      	str	r3, [sp, #4]
   d8452:	4618      	mov	r0, r3
   d8454:	468b      	mov	fp, r1
   d8456:	4690      	mov	r8, r2
   d8458:	f7ff f8a5 	bl	d75a6 <strlen>
   d845c:	9b01      	ldr	r3, [sp, #4]
   d845e:	f8db 2000 	ldr.w	r2, [fp]
   d8462:	4403      	add	r3, r0
   d8464:	4682      	mov	sl, r0
   d8466:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d846a:	9305      	str	r3, [sp, #20]
   d846c:	1c93      	adds	r3, r2, #2
   d846e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d8472:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d8476:	32fe      	adds	r2, #254	; 0xfe
   d8478:	18d1      	adds	r1, r2, r3
   d847a:	461f      	mov	r7, r3
   d847c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8480:	9100      	str	r1, [sp, #0]
   d8482:	2830      	cmp	r0, #48	; 0x30
   d8484:	d0f8      	beq.n	d8478 <__gethex+0x3c>
   d8486:	f7ff ffc3 	bl	d8410 <__hexdig_fun>
   d848a:	4604      	mov	r4, r0
   d848c:	2800      	cmp	r0, #0
   d848e:	d13a      	bne.n	d8506 <__gethex+0xca>
   d8490:	9901      	ldr	r1, [sp, #4]
   d8492:	4652      	mov	r2, sl
   d8494:	4638      	mov	r0, r7
   d8496:	f7ff f88e 	bl	d75b6 <strncmp>
   d849a:	4605      	mov	r5, r0
   d849c:	2800      	cmp	r0, #0
   d849e:	d168      	bne.n	d8572 <__gethex+0x136>
   d84a0:	f817 000a 	ldrb.w	r0, [r7, sl]
   d84a4:	eb07 060a 	add.w	r6, r7, sl
   d84a8:	f7ff ffb2 	bl	d8410 <__hexdig_fun>
   d84ac:	2800      	cmp	r0, #0
   d84ae:	d062      	beq.n	d8576 <__gethex+0x13a>
   d84b0:	4633      	mov	r3, r6
   d84b2:	7818      	ldrb	r0, [r3, #0]
   d84b4:	2830      	cmp	r0, #48	; 0x30
   d84b6:	461f      	mov	r7, r3
   d84b8:	f103 0301 	add.w	r3, r3, #1
   d84bc:	d0f9      	beq.n	d84b2 <__gethex+0x76>
   d84be:	f7ff ffa7 	bl	d8410 <__hexdig_fun>
   d84c2:	2301      	movs	r3, #1
   d84c4:	fab0 f480 	clz	r4, r0
   d84c8:	0964      	lsrs	r4, r4, #5
   d84ca:	4635      	mov	r5, r6
   d84cc:	9300      	str	r3, [sp, #0]
   d84ce:	463a      	mov	r2, r7
   d84d0:	4616      	mov	r6, r2
   d84d2:	3201      	adds	r2, #1
   d84d4:	7830      	ldrb	r0, [r6, #0]
   d84d6:	f7ff ff9b 	bl	d8410 <__hexdig_fun>
   d84da:	2800      	cmp	r0, #0
   d84dc:	d1f8      	bne.n	d84d0 <__gethex+0x94>
   d84de:	9901      	ldr	r1, [sp, #4]
   d84e0:	4652      	mov	r2, sl
   d84e2:	4630      	mov	r0, r6
   d84e4:	f7ff f867 	bl	d75b6 <strncmp>
   d84e8:	b980      	cbnz	r0, d850c <__gethex+0xd0>
   d84ea:	b94d      	cbnz	r5, d8500 <__gethex+0xc4>
   d84ec:	eb06 050a 	add.w	r5, r6, sl
   d84f0:	462a      	mov	r2, r5
   d84f2:	4616      	mov	r6, r2
   d84f4:	3201      	adds	r2, #1
   d84f6:	7830      	ldrb	r0, [r6, #0]
   d84f8:	f7ff ff8a 	bl	d8410 <__hexdig_fun>
   d84fc:	2800      	cmp	r0, #0
   d84fe:	d1f8      	bne.n	d84f2 <__gethex+0xb6>
   d8500:	1bad      	subs	r5, r5, r6
   d8502:	00ad      	lsls	r5, r5, #2
   d8504:	e004      	b.n	d8510 <__gethex+0xd4>
   d8506:	2400      	movs	r4, #0
   d8508:	4625      	mov	r5, r4
   d850a:	e7e0      	b.n	d84ce <__gethex+0x92>
   d850c:	2d00      	cmp	r5, #0
   d850e:	d1f7      	bne.n	d8500 <__gethex+0xc4>
   d8510:	7833      	ldrb	r3, [r6, #0]
   d8512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8516:	2b50      	cmp	r3, #80	; 0x50
   d8518:	d13b      	bne.n	d8592 <__gethex+0x156>
   d851a:	7873      	ldrb	r3, [r6, #1]
   d851c:	2b2b      	cmp	r3, #43	; 0x2b
   d851e:	d02c      	beq.n	d857a <__gethex+0x13e>
   d8520:	2b2d      	cmp	r3, #45	; 0x2d
   d8522:	d02e      	beq.n	d8582 <__gethex+0x146>
   d8524:	1c71      	adds	r1, r6, #1
   d8526:	f04f 0900 	mov.w	r9, #0
   d852a:	7808      	ldrb	r0, [r1, #0]
   d852c:	f7ff ff70 	bl	d8410 <__hexdig_fun>
   d8530:	1e43      	subs	r3, r0, #1
   d8532:	b2db      	uxtb	r3, r3
   d8534:	2b18      	cmp	r3, #24
   d8536:	d82c      	bhi.n	d8592 <__gethex+0x156>
   d8538:	f1a0 0210 	sub.w	r2, r0, #16
   d853c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8540:	f7ff ff66 	bl	d8410 <__hexdig_fun>
   d8544:	1e43      	subs	r3, r0, #1
   d8546:	b2db      	uxtb	r3, r3
   d8548:	2b18      	cmp	r3, #24
   d854a:	d91d      	bls.n	d8588 <__gethex+0x14c>
   d854c:	f1b9 0f00 	cmp.w	r9, #0
   d8550:	d000      	beq.n	d8554 <__gethex+0x118>
   d8552:	4252      	negs	r2, r2
   d8554:	4415      	add	r5, r2
   d8556:	f8cb 1000 	str.w	r1, [fp]
   d855a:	b1e4      	cbz	r4, d8596 <__gethex+0x15a>
   d855c:	9b00      	ldr	r3, [sp, #0]
   d855e:	2b00      	cmp	r3, #0
   d8560:	bf14      	ite	ne
   d8562:	2700      	movne	r7, #0
   d8564:	2706      	moveq	r7, #6
   d8566:	4638      	mov	r0, r7
   d8568:	b009      	add	sp, #36	; 0x24
   d856a:	ecbd 8b02 	vpop	{d8}
   d856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8572:	463e      	mov	r6, r7
   d8574:	4625      	mov	r5, r4
   d8576:	2401      	movs	r4, #1
   d8578:	e7ca      	b.n	d8510 <__gethex+0xd4>
   d857a:	f04f 0900 	mov.w	r9, #0
   d857e:	1cb1      	adds	r1, r6, #2
   d8580:	e7d3      	b.n	d852a <__gethex+0xee>
   d8582:	f04f 0901 	mov.w	r9, #1
   d8586:	e7fa      	b.n	d857e <__gethex+0x142>
   d8588:	230a      	movs	r3, #10
   d858a:	fb03 0202 	mla	r2, r3, r2, r0
   d858e:	3a10      	subs	r2, #16
   d8590:	e7d4      	b.n	d853c <__gethex+0x100>
   d8592:	4631      	mov	r1, r6
   d8594:	e7df      	b.n	d8556 <__gethex+0x11a>
   d8596:	1bf3      	subs	r3, r6, r7
   d8598:	3b01      	subs	r3, #1
   d859a:	4621      	mov	r1, r4
   d859c:	2b07      	cmp	r3, #7
   d859e:	dc52      	bgt.n	d8646 <__gethex+0x20a>
   d85a0:	ee18 0a10 	vmov	r0, s16
   d85a4:	f000 fa52 	bl	d8a4c <_Balloc>
   d85a8:	f04f 0b00 	mov.w	fp, #0
   d85ac:	f100 0914 	add.w	r9, r0, #20
   d85b0:	f1ca 0301 	rsb	r3, sl, #1
   d85b4:	4604      	mov	r4, r0
   d85b6:	f8cd 9008 	str.w	r9, [sp, #8]
   d85ba:	f8cd b000 	str.w	fp, [sp]
   d85be:	9306      	str	r3, [sp, #24]
   d85c0:	42b7      	cmp	r7, r6
   d85c2:	d343      	bcc.n	d864c <__gethex+0x210>
   d85c4:	9802      	ldr	r0, [sp, #8]
   d85c6:	9b00      	ldr	r3, [sp, #0]
   d85c8:	f840 3b04 	str.w	r3, [r0], #4
   d85cc:	eba0 0009 	sub.w	r0, r0, r9
   d85d0:	1080      	asrs	r0, r0, #2
   d85d2:	0146      	lsls	r6, r0, #5
   d85d4:	6120      	str	r0, [r4, #16]
   d85d6:	4618      	mov	r0, r3
   d85d8:	f000 faff 	bl	d8bda <__hi0bits>
   d85dc:	1a30      	subs	r0, r6, r0
   d85de:	f8d8 6000 	ldr.w	r6, [r8]
   d85e2:	42b0      	cmp	r0, r6
   d85e4:	dd66      	ble.n	d86b4 <__gethex+0x278>
   d85e6:	1b87      	subs	r7, r0, r6
   d85e8:	4639      	mov	r1, r7
   d85ea:	4620      	mov	r0, r4
   d85ec:	f000 fe4c 	bl	d9288 <__any_on>
   d85f0:	4682      	mov	sl, r0
   d85f2:	b1a8      	cbz	r0, d8620 <__gethex+0x1e4>
   d85f4:	1e7b      	subs	r3, r7, #1
   d85f6:	1159      	asrs	r1, r3, #5
   d85f8:	f003 021f 	and.w	r2, r3, #31
   d85fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d8600:	f04f 0a01 	mov.w	sl, #1
   d8604:	fa0a f202 	lsl.w	r2, sl, r2
   d8608:	420a      	tst	r2, r1
   d860a:	d009      	beq.n	d8620 <__gethex+0x1e4>
   d860c:	4553      	cmp	r3, sl
   d860e:	dd05      	ble.n	d861c <__gethex+0x1e0>
   d8610:	1eb9      	subs	r1, r7, #2
   d8612:	4620      	mov	r0, r4
   d8614:	f000 fe38 	bl	d9288 <__any_on>
   d8618:	2800      	cmp	r0, #0
   d861a:	d148      	bne.n	d86ae <__gethex+0x272>
   d861c:	f04f 0a02 	mov.w	sl, #2
   d8620:	4639      	mov	r1, r7
   d8622:	4620      	mov	r0, r4
   d8624:	f7ff fea2 	bl	d836c <rshift>
   d8628:	443d      	add	r5, r7
   d862a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d862e:	42ab      	cmp	r3, r5
   d8630:	da4f      	bge.n	d86d2 <__gethex+0x296>
   d8632:	ee18 0a10 	vmov	r0, s16
   d8636:	4621      	mov	r1, r4
   d8638:	f000 fa3c 	bl	d8ab4 <_Bfree>
   d863c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d863e:	2300      	movs	r3, #0
   d8640:	6013      	str	r3, [r2, #0]
   d8642:	27a3      	movs	r7, #163	; 0xa3
   d8644:	e78f      	b.n	d8566 <__gethex+0x12a>
   d8646:	3101      	adds	r1, #1
   d8648:	105b      	asrs	r3, r3, #1
   d864a:	e7a7      	b.n	d859c <__gethex+0x160>
   d864c:	1e73      	subs	r3, r6, #1
   d864e:	9a05      	ldr	r2, [sp, #20]
   d8650:	9303      	str	r3, [sp, #12]
   d8652:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8656:	4293      	cmp	r3, r2
   d8658:	d019      	beq.n	d868e <__gethex+0x252>
   d865a:	f1bb 0f20 	cmp.w	fp, #32
   d865e:	d107      	bne.n	d8670 <__gethex+0x234>
   d8660:	9b02      	ldr	r3, [sp, #8]
   d8662:	9a00      	ldr	r2, [sp, #0]
   d8664:	f843 2b04 	str.w	r2, [r3], #4
   d8668:	9302      	str	r3, [sp, #8]
   d866a:	2300      	movs	r3, #0
   d866c:	9300      	str	r3, [sp, #0]
   d866e:	469b      	mov	fp, r3
   d8670:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8674:	f7ff fecc 	bl	d8410 <__hexdig_fun>
   d8678:	9b00      	ldr	r3, [sp, #0]
   d867a:	f000 000f 	and.w	r0, r0, #15
   d867e:	fa00 f00b 	lsl.w	r0, r0, fp
   d8682:	4303      	orrs	r3, r0
   d8684:	9300      	str	r3, [sp, #0]
   d8686:	f10b 0b04 	add.w	fp, fp, #4
   d868a:	9b03      	ldr	r3, [sp, #12]
   d868c:	e00d      	b.n	d86aa <__gethex+0x26e>
   d868e:	9b03      	ldr	r3, [sp, #12]
   d8690:	9a06      	ldr	r2, [sp, #24]
   d8692:	4413      	add	r3, r2
   d8694:	42bb      	cmp	r3, r7
   d8696:	d3e0      	bcc.n	d865a <__gethex+0x21e>
   d8698:	4618      	mov	r0, r3
   d869a:	9901      	ldr	r1, [sp, #4]
   d869c:	9307      	str	r3, [sp, #28]
   d869e:	4652      	mov	r2, sl
   d86a0:	f7fe ff89 	bl	d75b6 <strncmp>
   d86a4:	9b07      	ldr	r3, [sp, #28]
   d86a6:	2800      	cmp	r0, #0
   d86a8:	d1d7      	bne.n	d865a <__gethex+0x21e>
   d86aa:	461e      	mov	r6, r3
   d86ac:	e788      	b.n	d85c0 <__gethex+0x184>
   d86ae:	f04f 0a03 	mov.w	sl, #3
   d86b2:	e7b5      	b.n	d8620 <__gethex+0x1e4>
   d86b4:	da0a      	bge.n	d86cc <__gethex+0x290>
   d86b6:	1a37      	subs	r7, r6, r0
   d86b8:	4621      	mov	r1, r4
   d86ba:	ee18 0a10 	vmov	r0, s16
   d86be:	463a      	mov	r2, r7
   d86c0:	f000 fbce 	bl	d8e60 <__lshift>
   d86c4:	1bed      	subs	r5, r5, r7
   d86c6:	4604      	mov	r4, r0
   d86c8:	f100 0914 	add.w	r9, r0, #20
   d86cc:	f04f 0a00 	mov.w	sl, #0
   d86d0:	e7ab      	b.n	d862a <__gethex+0x1ee>
   d86d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d86d6:	42a8      	cmp	r0, r5
   d86d8:	dd6d      	ble.n	d87b6 <__gethex+0x37a>
   d86da:	1b45      	subs	r5, r0, r5
   d86dc:	42ae      	cmp	r6, r5
   d86de:	dc31      	bgt.n	d8744 <__gethex+0x308>
   d86e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d86e4:	2b02      	cmp	r3, #2
   d86e6:	d023      	beq.n	d8730 <__gethex+0x2f4>
   d86e8:	2b03      	cmp	r3, #3
   d86ea:	d025      	beq.n	d8738 <__gethex+0x2fc>
   d86ec:	2b01      	cmp	r3, #1
   d86ee:	d115      	bne.n	d871c <__gethex+0x2e0>
   d86f0:	42ae      	cmp	r6, r5
   d86f2:	d113      	bne.n	d871c <__gethex+0x2e0>
   d86f4:	2e01      	cmp	r6, #1
   d86f6:	d10b      	bne.n	d8710 <__gethex+0x2d4>
   d86f8:	9a04      	ldr	r2, [sp, #16]
   d86fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d86fe:	6013      	str	r3, [r2, #0]
   d8700:	2301      	movs	r3, #1
   d8702:	6123      	str	r3, [r4, #16]
   d8704:	f8c9 3000 	str.w	r3, [r9]
   d8708:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d870a:	2762      	movs	r7, #98	; 0x62
   d870c:	601c      	str	r4, [r3, #0]
   d870e:	e72a      	b.n	d8566 <__gethex+0x12a>
   d8710:	1e71      	subs	r1, r6, #1
   d8712:	4620      	mov	r0, r4
   d8714:	f000 fdb8 	bl	d9288 <__any_on>
   d8718:	2800      	cmp	r0, #0
   d871a:	d1ed      	bne.n	d86f8 <__gethex+0x2bc>
   d871c:	ee18 0a10 	vmov	r0, s16
   d8720:	4621      	mov	r1, r4
   d8722:	f000 f9c7 	bl	d8ab4 <_Bfree>
   d8726:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8728:	2300      	movs	r3, #0
   d872a:	6013      	str	r3, [r2, #0]
   d872c:	2750      	movs	r7, #80	; 0x50
   d872e:	e71a      	b.n	d8566 <__gethex+0x12a>
   d8730:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8732:	2b00      	cmp	r3, #0
   d8734:	d1f2      	bne.n	d871c <__gethex+0x2e0>
   d8736:	e7df      	b.n	d86f8 <__gethex+0x2bc>
   d8738:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d873a:	2b00      	cmp	r3, #0
   d873c:	d1dc      	bne.n	d86f8 <__gethex+0x2bc>
   d873e:	e7ed      	b.n	d871c <__gethex+0x2e0>
   d8740:	000d9a6c 	.word	0x000d9a6c
   d8744:	1e6f      	subs	r7, r5, #1
   d8746:	f1ba 0f00 	cmp.w	sl, #0
   d874a:	d131      	bne.n	d87b0 <__gethex+0x374>
   d874c:	b127      	cbz	r7, d8758 <__gethex+0x31c>
   d874e:	4639      	mov	r1, r7
   d8750:	4620      	mov	r0, r4
   d8752:	f000 fd99 	bl	d9288 <__any_on>
   d8756:	4682      	mov	sl, r0
   d8758:	117b      	asrs	r3, r7, #5
   d875a:	2101      	movs	r1, #1
   d875c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d8760:	f007 071f 	and.w	r7, r7, #31
   d8764:	fa01 f707 	lsl.w	r7, r1, r7
   d8768:	421f      	tst	r7, r3
   d876a:	4629      	mov	r1, r5
   d876c:	4620      	mov	r0, r4
   d876e:	bf18      	it	ne
   d8770:	f04a 0a02 	orrne.w	sl, sl, #2
   d8774:	1b76      	subs	r6, r6, r5
   d8776:	f7ff fdf9 	bl	d836c <rshift>
   d877a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d877e:	2702      	movs	r7, #2
   d8780:	f1ba 0f00 	cmp.w	sl, #0
   d8784:	d048      	beq.n	d8818 <__gethex+0x3dc>
   d8786:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d878a:	2b02      	cmp	r3, #2
   d878c:	d015      	beq.n	d87ba <__gethex+0x37e>
   d878e:	2b03      	cmp	r3, #3
   d8790:	d017      	beq.n	d87c2 <__gethex+0x386>
   d8792:	2b01      	cmp	r3, #1
   d8794:	d109      	bne.n	d87aa <__gethex+0x36e>
   d8796:	f01a 0f02 	tst.w	sl, #2
   d879a:	d006      	beq.n	d87aa <__gethex+0x36e>
   d879c:	f8d9 0000 	ldr.w	r0, [r9]
   d87a0:	ea4a 0a00 	orr.w	sl, sl, r0
   d87a4:	f01a 0f01 	tst.w	sl, #1
   d87a8:	d10e      	bne.n	d87c8 <__gethex+0x38c>
   d87aa:	f047 0710 	orr.w	r7, r7, #16
   d87ae:	e033      	b.n	d8818 <__gethex+0x3dc>
   d87b0:	f04f 0a01 	mov.w	sl, #1
   d87b4:	e7d0      	b.n	d8758 <__gethex+0x31c>
   d87b6:	2701      	movs	r7, #1
   d87b8:	e7e2      	b.n	d8780 <__gethex+0x344>
   d87ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d87bc:	f1c3 0301 	rsb	r3, r3, #1
   d87c0:	9315      	str	r3, [sp, #84]	; 0x54
   d87c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d87c4:	2b00      	cmp	r3, #0
   d87c6:	d0f0      	beq.n	d87aa <__gethex+0x36e>
   d87c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d87cc:	f104 0314 	add.w	r3, r4, #20
   d87d0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d87d4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d87d8:	f04f 0c00 	mov.w	ip, #0
   d87dc:	4618      	mov	r0, r3
   d87de:	f853 2b04 	ldr.w	r2, [r3], #4
   d87e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d87e6:	d01c      	beq.n	d8822 <__gethex+0x3e6>
   d87e8:	3201      	adds	r2, #1
   d87ea:	6002      	str	r2, [r0, #0]
   d87ec:	2f02      	cmp	r7, #2
   d87ee:	f104 0314 	add.w	r3, r4, #20
   d87f2:	d13a      	bne.n	d886a <__gethex+0x42e>
   d87f4:	f8d8 2000 	ldr.w	r2, [r8]
   d87f8:	3a01      	subs	r2, #1
   d87fa:	42b2      	cmp	r2, r6
   d87fc:	d10a      	bne.n	d8814 <__gethex+0x3d8>
   d87fe:	1171      	asrs	r1, r6, #5
   d8800:	2201      	movs	r2, #1
   d8802:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d8806:	f006 061f 	and.w	r6, r6, #31
   d880a:	fa02 f606 	lsl.w	r6, r2, r6
   d880e:	421e      	tst	r6, r3
   d8810:	bf18      	it	ne
   d8812:	4617      	movne	r7, r2
   d8814:	f047 0720 	orr.w	r7, r7, #32
   d8818:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d881a:	601c      	str	r4, [r3, #0]
   d881c:	9b04      	ldr	r3, [sp, #16]
   d881e:	601d      	str	r5, [r3, #0]
   d8820:	e6a1      	b.n	d8566 <__gethex+0x12a>
   d8822:	4299      	cmp	r1, r3
   d8824:	f843 cc04 	str.w	ip, [r3, #-4]
   d8828:	d8d8      	bhi.n	d87dc <__gethex+0x3a0>
   d882a:	68a3      	ldr	r3, [r4, #8]
   d882c:	4599      	cmp	r9, r3
   d882e:	db14      	blt.n	d885a <__gethex+0x41e>
   d8830:	6861      	ldr	r1, [r4, #4]
   d8832:	ee18 0a10 	vmov	r0, s16
   d8836:	3101      	adds	r1, #1
   d8838:	f000 f908 	bl	d8a4c <_Balloc>
   d883c:	6922      	ldr	r2, [r4, #16]
   d883e:	3202      	adds	r2, #2
   d8840:	f104 010c 	add.w	r1, r4, #12
   d8844:	4682      	mov	sl, r0
   d8846:	0092      	lsls	r2, r2, #2
   d8848:	300c      	adds	r0, #12
   d884a:	f7fe fe43 	bl	d74d4 <memcpy>
   d884e:	4621      	mov	r1, r4
   d8850:	ee18 0a10 	vmov	r0, s16
   d8854:	f000 f92e 	bl	d8ab4 <_Bfree>
   d8858:	4654      	mov	r4, sl
   d885a:	6923      	ldr	r3, [r4, #16]
   d885c:	1c5a      	adds	r2, r3, #1
   d885e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d8862:	6122      	str	r2, [r4, #16]
   d8864:	2201      	movs	r2, #1
   d8866:	615a      	str	r2, [r3, #20]
   d8868:	e7c0      	b.n	d87ec <__gethex+0x3b0>
   d886a:	6922      	ldr	r2, [r4, #16]
   d886c:	454a      	cmp	r2, r9
   d886e:	dd0b      	ble.n	d8888 <__gethex+0x44c>
   d8870:	2101      	movs	r1, #1
   d8872:	4620      	mov	r0, r4
   d8874:	f7ff fd7a 	bl	d836c <rshift>
   d8878:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d887c:	3501      	adds	r5, #1
   d887e:	42ab      	cmp	r3, r5
   d8880:	f6ff aed7 	blt.w	d8632 <__gethex+0x1f6>
   d8884:	2701      	movs	r7, #1
   d8886:	e7c5      	b.n	d8814 <__gethex+0x3d8>
   d8888:	f016 061f 	ands.w	r6, r6, #31
   d888c:	d0fa      	beq.n	d8884 <__gethex+0x448>
   d888e:	449b      	add	fp, r3
   d8890:	f1c6 0620 	rsb	r6, r6, #32
   d8894:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d8898:	f000 f99f 	bl	d8bda <__hi0bits>
   d889c:	42b0      	cmp	r0, r6
   d889e:	dbe7      	blt.n	d8870 <__gethex+0x434>
   d88a0:	e7f0      	b.n	d8884 <__gethex+0x448>
   d88a2:	bf00      	nop

000d88a4 <L_shift>:
   d88a4:	f1c2 0208 	rsb	r2, r2, #8
   d88a8:	0092      	lsls	r2, r2, #2
   d88aa:	b570      	push	{r4, r5, r6, lr}
   d88ac:	f1c2 0620 	rsb	r6, r2, #32
   d88b0:	6843      	ldr	r3, [r0, #4]
   d88b2:	6804      	ldr	r4, [r0, #0]
   d88b4:	fa03 f506 	lsl.w	r5, r3, r6
   d88b8:	432c      	orrs	r4, r5
   d88ba:	40d3      	lsrs	r3, r2
   d88bc:	6004      	str	r4, [r0, #0]
   d88be:	f840 3f04 	str.w	r3, [r0, #4]!
   d88c2:	4288      	cmp	r0, r1
   d88c4:	d3f4      	bcc.n	d88b0 <L_shift+0xc>
   d88c6:	bd70      	pop	{r4, r5, r6, pc}

000d88c8 <__match>:
   d88c8:	b530      	push	{r4, r5, lr}
   d88ca:	6803      	ldr	r3, [r0, #0]
   d88cc:	3301      	adds	r3, #1
   d88ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   d88d2:	b914      	cbnz	r4, d88da <__match+0x12>
   d88d4:	6003      	str	r3, [r0, #0]
   d88d6:	2001      	movs	r0, #1
   d88d8:	bd30      	pop	{r4, r5, pc}
   d88da:	f813 2b01 	ldrb.w	r2, [r3], #1
   d88de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d88e2:	2d19      	cmp	r5, #25
   d88e4:	bf98      	it	ls
   d88e6:	3220      	addls	r2, #32
   d88e8:	42a2      	cmp	r2, r4
   d88ea:	d0f0      	beq.n	d88ce <__match+0x6>
   d88ec:	2000      	movs	r0, #0
   d88ee:	e7f3      	b.n	d88d8 <__match+0x10>

000d88f0 <__hexnan>:
   d88f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88f4:	680b      	ldr	r3, [r1, #0]
   d88f6:	6801      	ldr	r1, [r0, #0]
   d88f8:	115e      	asrs	r6, r3, #5
   d88fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d88fe:	f013 031f 	ands.w	r3, r3, #31
   d8902:	b087      	sub	sp, #28
   d8904:	bf18      	it	ne
   d8906:	3604      	addne	r6, #4
   d8908:	2500      	movs	r5, #0
   d890a:	1f37      	subs	r7, r6, #4
   d890c:	4682      	mov	sl, r0
   d890e:	4690      	mov	r8, r2
   d8910:	9301      	str	r3, [sp, #4]
   d8912:	f846 5c04 	str.w	r5, [r6, #-4]
   d8916:	46b9      	mov	r9, r7
   d8918:	463c      	mov	r4, r7
   d891a:	9502      	str	r5, [sp, #8]
   d891c:	46ab      	mov	fp, r5
   d891e:	784a      	ldrb	r2, [r1, #1]
   d8920:	1c4b      	adds	r3, r1, #1
   d8922:	9303      	str	r3, [sp, #12]
   d8924:	b342      	cbz	r2, d8978 <__hexnan+0x88>
   d8926:	4610      	mov	r0, r2
   d8928:	9105      	str	r1, [sp, #20]
   d892a:	9204      	str	r2, [sp, #16]
   d892c:	f7ff fd70 	bl	d8410 <__hexdig_fun>
   d8930:	2800      	cmp	r0, #0
   d8932:	d14f      	bne.n	d89d4 <__hexnan+0xe4>
   d8934:	9a04      	ldr	r2, [sp, #16]
   d8936:	9905      	ldr	r1, [sp, #20]
   d8938:	2a20      	cmp	r2, #32
   d893a:	d818      	bhi.n	d896e <__hexnan+0x7e>
   d893c:	9b02      	ldr	r3, [sp, #8]
   d893e:	459b      	cmp	fp, r3
   d8940:	dd13      	ble.n	d896a <__hexnan+0x7a>
   d8942:	454c      	cmp	r4, r9
   d8944:	d206      	bcs.n	d8954 <__hexnan+0x64>
   d8946:	2d07      	cmp	r5, #7
   d8948:	dc04      	bgt.n	d8954 <__hexnan+0x64>
   d894a:	462a      	mov	r2, r5
   d894c:	4649      	mov	r1, r9
   d894e:	4620      	mov	r0, r4
   d8950:	f7ff ffa8 	bl	d88a4 <L_shift>
   d8954:	4544      	cmp	r4, r8
   d8956:	d950      	bls.n	d89fa <__hexnan+0x10a>
   d8958:	2300      	movs	r3, #0
   d895a:	f1a4 0904 	sub.w	r9, r4, #4
   d895e:	f844 3c04 	str.w	r3, [r4, #-4]
   d8962:	f8cd b008 	str.w	fp, [sp, #8]
   d8966:	464c      	mov	r4, r9
   d8968:	461d      	mov	r5, r3
   d896a:	9903      	ldr	r1, [sp, #12]
   d896c:	e7d7      	b.n	d891e <__hexnan+0x2e>
   d896e:	2a29      	cmp	r2, #41	; 0x29
   d8970:	d156      	bne.n	d8a20 <__hexnan+0x130>
   d8972:	3102      	adds	r1, #2
   d8974:	f8ca 1000 	str.w	r1, [sl]
   d8978:	f1bb 0f00 	cmp.w	fp, #0
   d897c:	d050      	beq.n	d8a20 <__hexnan+0x130>
   d897e:	454c      	cmp	r4, r9
   d8980:	d206      	bcs.n	d8990 <__hexnan+0xa0>
   d8982:	2d07      	cmp	r5, #7
   d8984:	dc04      	bgt.n	d8990 <__hexnan+0xa0>
   d8986:	462a      	mov	r2, r5
   d8988:	4649      	mov	r1, r9
   d898a:	4620      	mov	r0, r4
   d898c:	f7ff ff8a 	bl	d88a4 <L_shift>
   d8990:	4544      	cmp	r4, r8
   d8992:	d934      	bls.n	d89fe <__hexnan+0x10e>
   d8994:	f1a8 0204 	sub.w	r2, r8, #4
   d8998:	4623      	mov	r3, r4
   d899a:	f853 1b04 	ldr.w	r1, [r3], #4
   d899e:	f842 1f04 	str.w	r1, [r2, #4]!
   d89a2:	429f      	cmp	r7, r3
   d89a4:	d2f9      	bcs.n	d899a <__hexnan+0xaa>
   d89a6:	1b3b      	subs	r3, r7, r4
   d89a8:	f023 0303 	bic.w	r3, r3, #3
   d89ac:	3304      	adds	r3, #4
   d89ae:	3401      	adds	r4, #1
   d89b0:	3e03      	subs	r6, #3
   d89b2:	42b4      	cmp	r4, r6
   d89b4:	bf88      	it	hi
   d89b6:	2304      	movhi	r3, #4
   d89b8:	4443      	add	r3, r8
   d89ba:	2200      	movs	r2, #0
   d89bc:	f843 2b04 	str.w	r2, [r3], #4
   d89c0:	429f      	cmp	r7, r3
   d89c2:	d2fb      	bcs.n	d89bc <__hexnan+0xcc>
   d89c4:	683b      	ldr	r3, [r7, #0]
   d89c6:	b91b      	cbnz	r3, d89d0 <__hexnan+0xe0>
   d89c8:	4547      	cmp	r7, r8
   d89ca:	d127      	bne.n	d8a1c <__hexnan+0x12c>
   d89cc:	2301      	movs	r3, #1
   d89ce:	603b      	str	r3, [r7, #0]
   d89d0:	2005      	movs	r0, #5
   d89d2:	e026      	b.n	d8a22 <__hexnan+0x132>
   d89d4:	3501      	adds	r5, #1
   d89d6:	2d08      	cmp	r5, #8
   d89d8:	f10b 0b01 	add.w	fp, fp, #1
   d89dc:	dd06      	ble.n	d89ec <__hexnan+0xfc>
   d89de:	4544      	cmp	r4, r8
   d89e0:	d9c3      	bls.n	d896a <__hexnan+0x7a>
   d89e2:	2300      	movs	r3, #0
   d89e4:	f844 3c04 	str.w	r3, [r4, #-4]
   d89e8:	2501      	movs	r5, #1
   d89ea:	3c04      	subs	r4, #4
   d89ec:	6822      	ldr	r2, [r4, #0]
   d89ee:	f000 000f 	and.w	r0, r0, #15
   d89f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d89f6:	6022      	str	r2, [r4, #0]
   d89f8:	e7b7      	b.n	d896a <__hexnan+0x7a>
   d89fa:	2508      	movs	r5, #8
   d89fc:	e7b5      	b.n	d896a <__hexnan+0x7a>
   d89fe:	9b01      	ldr	r3, [sp, #4]
   d8a00:	2b00      	cmp	r3, #0
   d8a02:	d0df      	beq.n	d89c4 <__hexnan+0xd4>
   d8a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8a08:	f1c3 0320 	rsb	r3, r3, #32
   d8a0c:	fa22 f303 	lsr.w	r3, r2, r3
   d8a10:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8a14:	401a      	ands	r2, r3
   d8a16:	f846 2c04 	str.w	r2, [r6, #-4]
   d8a1a:	e7d3      	b.n	d89c4 <__hexnan+0xd4>
   d8a1c:	3f04      	subs	r7, #4
   d8a1e:	e7d1      	b.n	d89c4 <__hexnan+0xd4>
   d8a20:	2004      	movs	r0, #4
   d8a22:	b007      	add	sp, #28
   d8a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8a28 <__ascii_mbtowc>:
   d8a28:	b082      	sub	sp, #8
   d8a2a:	b901      	cbnz	r1, d8a2e <__ascii_mbtowc+0x6>
   d8a2c:	a901      	add	r1, sp, #4
   d8a2e:	b142      	cbz	r2, d8a42 <__ascii_mbtowc+0x1a>
   d8a30:	b14b      	cbz	r3, d8a46 <__ascii_mbtowc+0x1e>
   d8a32:	7813      	ldrb	r3, [r2, #0]
   d8a34:	600b      	str	r3, [r1, #0]
   d8a36:	7812      	ldrb	r2, [r2, #0]
   d8a38:	1e10      	subs	r0, r2, #0
   d8a3a:	bf18      	it	ne
   d8a3c:	2001      	movne	r0, #1
   d8a3e:	b002      	add	sp, #8
   d8a40:	4770      	bx	lr
   d8a42:	4610      	mov	r0, r2
   d8a44:	e7fb      	b.n	d8a3e <__ascii_mbtowc+0x16>
   d8a46:	f06f 0001 	mvn.w	r0, #1
   d8a4a:	e7f8      	b.n	d8a3e <__ascii_mbtowc+0x16>

000d8a4c <_Balloc>:
   d8a4c:	b570      	push	{r4, r5, r6, lr}
   d8a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d8a50:	4604      	mov	r4, r0
   d8a52:	460d      	mov	r5, r1
   d8a54:	b93e      	cbnz	r6, d8a66 <_Balloc+0x1a>
   d8a56:	2010      	movs	r0, #16
   d8a58:	f7fc fdbe 	bl	d55d8 <malloc>
   d8a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d8a60:	6260      	str	r0, [r4, #36]	; 0x24
   d8a62:	6006      	str	r6, [r0, #0]
   d8a64:	60c6      	str	r6, [r0, #12]
   d8a66:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d8a68:	68f3      	ldr	r3, [r6, #12]
   d8a6a:	b183      	cbz	r3, d8a8e <_Balloc+0x42>
   d8a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8a6e:	68db      	ldr	r3, [r3, #12]
   d8a70:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d8a74:	b9b8      	cbnz	r0, d8aa6 <_Balloc+0x5a>
   d8a76:	2101      	movs	r1, #1
   d8a78:	fa01 f605 	lsl.w	r6, r1, r5
   d8a7c:	1d72      	adds	r2, r6, #5
   d8a7e:	0092      	lsls	r2, r2, #2
   d8a80:	4620      	mov	r0, r4
   d8a82:	f000 fc22 	bl	d92ca <_calloc_r>
   d8a86:	b160      	cbz	r0, d8aa2 <_Balloc+0x56>
   d8a88:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d8a8c:	e00e      	b.n	d8aac <_Balloc+0x60>
   d8a8e:	2221      	movs	r2, #33	; 0x21
   d8a90:	2104      	movs	r1, #4
   d8a92:	4620      	mov	r0, r4
   d8a94:	f000 fc19 	bl	d92ca <_calloc_r>
   d8a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8a9a:	60f0      	str	r0, [r6, #12]
   d8a9c:	68db      	ldr	r3, [r3, #12]
   d8a9e:	2b00      	cmp	r3, #0
   d8aa0:	d1e4      	bne.n	d8a6c <_Balloc+0x20>
   d8aa2:	2000      	movs	r0, #0
   d8aa4:	bd70      	pop	{r4, r5, r6, pc}
   d8aa6:	6802      	ldr	r2, [r0, #0]
   d8aa8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d8aac:	2300      	movs	r3, #0
   d8aae:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d8ab2:	e7f7      	b.n	d8aa4 <_Balloc+0x58>

000d8ab4 <_Bfree>:
   d8ab4:	b570      	push	{r4, r5, r6, lr}
   d8ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d8ab8:	4605      	mov	r5, r0
   d8aba:	460c      	mov	r4, r1
   d8abc:	b93e      	cbnz	r6, d8ace <_Bfree+0x1a>
   d8abe:	2010      	movs	r0, #16
   d8ac0:	f7fc fd8a 	bl	d55d8 <malloc>
   d8ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d8ac8:	6268      	str	r0, [r5, #36]	; 0x24
   d8aca:	6006      	str	r6, [r0, #0]
   d8acc:	60c6      	str	r6, [r0, #12]
   d8ace:	b13c      	cbz	r4, d8ae0 <_Bfree+0x2c>
   d8ad0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8ad2:	6862      	ldr	r2, [r4, #4]
   d8ad4:	68db      	ldr	r3, [r3, #12]
   d8ad6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d8ada:	6021      	str	r1, [r4, #0]
   d8adc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d8ae0:	bd70      	pop	{r4, r5, r6, pc}

000d8ae2 <__multadd>:
   d8ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ae6:	690e      	ldr	r6, [r1, #16]
   d8ae8:	4607      	mov	r7, r0
   d8aea:	4698      	mov	r8, r3
   d8aec:	460c      	mov	r4, r1
   d8aee:	f101 0014 	add.w	r0, r1, #20
   d8af2:	2300      	movs	r3, #0
   d8af4:	6805      	ldr	r5, [r0, #0]
   d8af6:	b2a9      	uxth	r1, r5
   d8af8:	fb02 8101 	mla	r1, r2, r1, r8
   d8afc:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d8b00:	0c2d      	lsrs	r5, r5, #16
   d8b02:	fb02 c505 	mla	r5, r2, r5, ip
   d8b06:	b289      	uxth	r1, r1
   d8b08:	3301      	adds	r3, #1
   d8b0a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d8b0e:	429e      	cmp	r6, r3
   d8b10:	f840 1b04 	str.w	r1, [r0], #4
   d8b14:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d8b18:	dcec      	bgt.n	d8af4 <__multadd+0x12>
   d8b1a:	f1b8 0f00 	cmp.w	r8, #0
   d8b1e:	d01b      	beq.n	d8b58 <__multadd+0x76>
   d8b20:	68a3      	ldr	r3, [r4, #8]
   d8b22:	42b3      	cmp	r3, r6
   d8b24:	dc12      	bgt.n	d8b4c <__multadd+0x6a>
   d8b26:	6861      	ldr	r1, [r4, #4]
   d8b28:	4638      	mov	r0, r7
   d8b2a:	3101      	adds	r1, #1
   d8b2c:	f7ff ff8e 	bl	d8a4c <_Balloc>
   d8b30:	6922      	ldr	r2, [r4, #16]
   d8b32:	3202      	adds	r2, #2
   d8b34:	f104 010c 	add.w	r1, r4, #12
   d8b38:	4605      	mov	r5, r0
   d8b3a:	0092      	lsls	r2, r2, #2
   d8b3c:	300c      	adds	r0, #12
   d8b3e:	f7fe fcc9 	bl	d74d4 <memcpy>
   d8b42:	4621      	mov	r1, r4
   d8b44:	4638      	mov	r0, r7
   d8b46:	f7ff ffb5 	bl	d8ab4 <_Bfree>
   d8b4a:	462c      	mov	r4, r5
   d8b4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d8b50:	3601      	adds	r6, #1
   d8b52:	f8c3 8014 	str.w	r8, [r3, #20]
   d8b56:	6126      	str	r6, [r4, #16]
   d8b58:	4620      	mov	r0, r4
   d8b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8b5e <__s2b>:
   d8b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8b62:	460c      	mov	r4, r1
   d8b64:	4615      	mov	r5, r2
   d8b66:	461f      	mov	r7, r3
   d8b68:	2209      	movs	r2, #9
   d8b6a:	3308      	adds	r3, #8
   d8b6c:	4606      	mov	r6, r0
   d8b6e:	fb93 f3f2 	sdiv	r3, r3, r2
   d8b72:	2100      	movs	r1, #0
   d8b74:	2201      	movs	r2, #1
   d8b76:	429a      	cmp	r2, r3
   d8b78:	db20      	blt.n	d8bbc <__s2b+0x5e>
   d8b7a:	4630      	mov	r0, r6
   d8b7c:	f7ff ff66 	bl	d8a4c <_Balloc>
   d8b80:	9b08      	ldr	r3, [sp, #32]
   d8b82:	6143      	str	r3, [r0, #20]
   d8b84:	2d09      	cmp	r5, #9
   d8b86:	f04f 0301 	mov.w	r3, #1
   d8b8a:	6103      	str	r3, [r0, #16]
   d8b8c:	dd19      	ble.n	d8bc2 <__s2b+0x64>
   d8b8e:	f104 0909 	add.w	r9, r4, #9
   d8b92:	46c8      	mov	r8, r9
   d8b94:	442c      	add	r4, r5
   d8b96:	f818 3b01 	ldrb.w	r3, [r8], #1
   d8b9a:	4601      	mov	r1, r0
   d8b9c:	3b30      	subs	r3, #48	; 0x30
   d8b9e:	220a      	movs	r2, #10
   d8ba0:	4630      	mov	r0, r6
   d8ba2:	f7ff ff9e 	bl	d8ae2 <__multadd>
   d8ba6:	45a0      	cmp	r8, r4
   d8ba8:	d1f5      	bne.n	d8b96 <__s2b+0x38>
   d8baa:	f1a5 0408 	sub.w	r4, r5, #8
   d8bae:	444c      	add	r4, r9
   d8bb0:	1b2d      	subs	r5, r5, r4
   d8bb2:	1963      	adds	r3, r4, r5
   d8bb4:	42bb      	cmp	r3, r7
   d8bb6:	db07      	blt.n	d8bc8 <__s2b+0x6a>
   d8bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8bbc:	0052      	lsls	r2, r2, #1
   d8bbe:	3101      	adds	r1, #1
   d8bc0:	e7d9      	b.n	d8b76 <__s2b+0x18>
   d8bc2:	340a      	adds	r4, #10
   d8bc4:	2509      	movs	r5, #9
   d8bc6:	e7f3      	b.n	d8bb0 <__s2b+0x52>
   d8bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8bcc:	4601      	mov	r1, r0
   d8bce:	3b30      	subs	r3, #48	; 0x30
   d8bd0:	220a      	movs	r2, #10
   d8bd2:	4630      	mov	r0, r6
   d8bd4:	f7ff ff85 	bl	d8ae2 <__multadd>
   d8bd8:	e7eb      	b.n	d8bb2 <__s2b+0x54>

000d8bda <__hi0bits>:
   d8bda:	0c03      	lsrs	r3, r0, #16
   d8bdc:	041b      	lsls	r3, r3, #16
   d8bde:	b9d3      	cbnz	r3, d8c16 <__hi0bits+0x3c>
   d8be0:	0400      	lsls	r0, r0, #16
   d8be2:	2310      	movs	r3, #16
   d8be4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8be8:	bf04      	itt	eq
   d8bea:	0200      	lsleq	r0, r0, #8
   d8bec:	3308      	addeq	r3, #8
   d8bee:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8bf2:	bf04      	itt	eq
   d8bf4:	0100      	lsleq	r0, r0, #4
   d8bf6:	3304      	addeq	r3, #4
   d8bf8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8bfc:	bf04      	itt	eq
   d8bfe:	0080      	lsleq	r0, r0, #2
   d8c00:	3302      	addeq	r3, #2
   d8c02:	2800      	cmp	r0, #0
   d8c04:	db05      	blt.n	d8c12 <__hi0bits+0x38>
   d8c06:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d8c0a:	f103 0301 	add.w	r3, r3, #1
   d8c0e:	bf08      	it	eq
   d8c10:	2320      	moveq	r3, #32
   d8c12:	4618      	mov	r0, r3
   d8c14:	4770      	bx	lr
   d8c16:	2300      	movs	r3, #0
   d8c18:	e7e4      	b.n	d8be4 <__hi0bits+0xa>

000d8c1a <__lo0bits>:
   d8c1a:	6803      	ldr	r3, [r0, #0]
   d8c1c:	f013 0207 	ands.w	r2, r3, #7
   d8c20:	4601      	mov	r1, r0
   d8c22:	d00b      	beq.n	d8c3c <__lo0bits+0x22>
   d8c24:	07da      	lsls	r2, r3, #31
   d8c26:	d424      	bmi.n	d8c72 <__lo0bits+0x58>
   d8c28:	0798      	lsls	r0, r3, #30
   d8c2a:	bf49      	itett	mi
   d8c2c:	085b      	lsrmi	r3, r3, #1
   d8c2e:	089b      	lsrpl	r3, r3, #2
   d8c30:	2001      	movmi	r0, #1
   d8c32:	600b      	strmi	r3, [r1, #0]
   d8c34:	bf5c      	itt	pl
   d8c36:	600b      	strpl	r3, [r1, #0]
   d8c38:	2002      	movpl	r0, #2
   d8c3a:	4770      	bx	lr
   d8c3c:	b298      	uxth	r0, r3
   d8c3e:	b9b0      	cbnz	r0, d8c6e <__lo0bits+0x54>
   d8c40:	0c1b      	lsrs	r3, r3, #16
   d8c42:	2010      	movs	r0, #16
   d8c44:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8c48:	bf04      	itt	eq
   d8c4a:	0a1b      	lsreq	r3, r3, #8
   d8c4c:	3008      	addeq	r0, #8
   d8c4e:	071a      	lsls	r2, r3, #28
   d8c50:	bf04      	itt	eq
   d8c52:	091b      	lsreq	r3, r3, #4
   d8c54:	3004      	addeq	r0, #4
   d8c56:	079a      	lsls	r2, r3, #30
   d8c58:	bf04      	itt	eq
   d8c5a:	089b      	lsreq	r3, r3, #2
   d8c5c:	3002      	addeq	r0, #2
   d8c5e:	07da      	lsls	r2, r3, #31
   d8c60:	d403      	bmi.n	d8c6a <__lo0bits+0x50>
   d8c62:	085b      	lsrs	r3, r3, #1
   d8c64:	f100 0001 	add.w	r0, r0, #1
   d8c68:	d005      	beq.n	d8c76 <__lo0bits+0x5c>
   d8c6a:	600b      	str	r3, [r1, #0]
   d8c6c:	4770      	bx	lr
   d8c6e:	4610      	mov	r0, r2
   d8c70:	e7e8      	b.n	d8c44 <__lo0bits+0x2a>
   d8c72:	2000      	movs	r0, #0
   d8c74:	4770      	bx	lr
   d8c76:	2020      	movs	r0, #32
   d8c78:	4770      	bx	lr

000d8c7a <__i2b>:
   d8c7a:	b510      	push	{r4, lr}
   d8c7c:	460c      	mov	r4, r1
   d8c7e:	2101      	movs	r1, #1
   d8c80:	f7ff fee4 	bl	d8a4c <_Balloc>
   d8c84:	2201      	movs	r2, #1
   d8c86:	6144      	str	r4, [r0, #20]
   d8c88:	6102      	str	r2, [r0, #16]
   d8c8a:	bd10      	pop	{r4, pc}

000d8c8c <__multiply>:
   d8c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c90:	4615      	mov	r5, r2
   d8c92:	690a      	ldr	r2, [r1, #16]
   d8c94:	692b      	ldr	r3, [r5, #16]
   d8c96:	429a      	cmp	r2, r3
   d8c98:	bfb8      	it	lt
   d8c9a:	460b      	movlt	r3, r1
   d8c9c:	460c      	mov	r4, r1
   d8c9e:	bfbc      	itt	lt
   d8ca0:	462c      	movlt	r4, r5
   d8ca2:	461d      	movlt	r5, r3
   d8ca4:	6927      	ldr	r7, [r4, #16]
   d8ca6:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d8caa:	68a3      	ldr	r3, [r4, #8]
   d8cac:	6861      	ldr	r1, [r4, #4]
   d8cae:	eb07 0609 	add.w	r6, r7, r9
   d8cb2:	42b3      	cmp	r3, r6
   d8cb4:	bfb8      	it	lt
   d8cb6:	3101      	addlt	r1, #1
   d8cb8:	b085      	sub	sp, #20
   d8cba:	f7ff fec7 	bl	d8a4c <_Balloc>
   d8cbe:	f100 0114 	add.w	r1, r0, #20
   d8cc2:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d8cc6:	460b      	mov	r3, r1
   d8cc8:	2200      	movs	r2, #0
   d8cca:	4543      	cmp	r3, r8
   d8ccc:	d31d      	bcc.n	d8d0a <__multiply+0x7e>
   d8cce:	f104 0314 	add.w	r3, r4, #20
   d8cd2:	f105 0214 	add.w	r2, r5, #20
   d8cd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d8cda:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8cde:	9302      	str	r3, [sp, #8]
   d8ce0:	1b3b      	subs	r3, r7, r4
   d8ce2:	3b15      	subs	r3, #21
   d8ce4:	f023 0303 	bic.w	r3, r3, #3
   d8ce8:	3304      	adds	r3, #4
   d8cea:	f104 0515 	add.w	r5, r4, #21
   d8cee:	42af      	cmp	r7, r5
   d8cf0:	bf38      	it	cc
   d8cf2:	2304      	movcc	r3, #4
   d8cf4:	9301      	str	r3, [sp, #4]
   d8cf6:	9b02      	ldr	r3, [sp, #8]
   d8cf8:	9203      	str	r2, [sp, #12]
   d8cfa:	4293      	cmp	r3, r2
   d8cfc:	d808      	bhi.n	d8d10 <__multiply+0x84>
   d8cfe:	2e00      	cmp	r6, #0
   d8d00:	dc5a      	bgt.n	d8db8 <__multiply+0x12c>
   d8d02:	6106      	str	r6, [r0, #16]
   d8d04:	b005      	add	sp, #20
   d8d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8d0a:	f843 2b04 	str.w	r2, [r3], #4
   d8d0e:	e7dc      	b.n	d8cca <__multiply+0x3e>
   d8d10:	f8b2 a000 	ldrh.w	sl, [r2]
   d8d14:	f1ba 0f00 	cmp.w	sl, #0
   d8d18:	d024      	beq.n	d8d64 <__multiply+0xd8>
   d8d1a:	f104 0e14 	add.w	lr, r4, #20
   d8d1e:	4689      	mov	r9, r1
   d8d20:	f04f 0c00 	mov.w	ip, #0
   d8d24:	f85e 5b04 	ldr.w	r5, [lr], #4
   d8d28:	f8d9 b000 	ldr.w	fp, [r9]
   d8d2c:	b2ab      	uxth	r3, r5
   d8d2e:	fa1f fb8b 	uxth.w	fp, fp
   d8d32:	fb0a b303 	mla	r3, sl, r3, fp
   d8d36:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d8d3a:	f8d9 5000 	ldr.w	r5, [r9]
   d8d3e:	4463      	add	r3, ip
   d8d40:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8d44:	fb0a c50b 	mla	r5, sl, fp, ip
   d8d48:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d8d4c:	b29b      	uxth	r3, r3
   d8d4e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d8d52:	4577      	cmp	r7, lr
   d8d54:	f849 3b04 	str.w	r3, [r9], #4
   d8d58:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8d5c:	d8e2      	bhi.n	d8d24 <__multiply+0x98>
   d8d5e:	9b01      	ldr	r3, [sp, #4]
   d8d60:	f841 c003 	str.w	ip, [r1, r3]
   d8d64:	9b03      	ldr	r3, [sp, #12]
   d8d66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d8d6a:	3204      	adds	r2, #4
   d8d6c:	f1b9 0f00 	cmp.w	r9, #0
   d8d70:	d020      	beq.n	d8db4 <__multiply+0x128>
   d8d72:	680b      	ldr	r3, [r1, #0]
   d8d74:	f104 0c14 	add.w	ip, r4, #20
   d8d78:	468e      	mov	lr, r1
   d8d7a:	f04f 0a00 	mov.w	sl, #0
   d8d7e:	f8bc 5000 	ldrh.w	r5, [ip]
   d8d82:	f8be b002 	ldrh.w	fp, [lr, #2]
   d8d86:	fb09 b505 	mla	r5, r9, r5, fp
   d8d8a:	44aa      	add	sl, r5
   d8d8c:	b29b      	uxth	r3, r3
   d8d8e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d8d92:	f84e 3b04 	str.w	r3, [lr], #4
   d8d96:	f85c 3b04 	ldr.w	r3, [ip], #4
   d8d9a:	f8be 5000 	ldrh.w	r5, [lr]
   d8d9e:	0c1b      	lsrs	r3, r3, #16
   d8da0:	fb09 5303 	mla	r3, r9, r3, r5
   d8da4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d8da8:	4567      	cmp	r7, ip
   d8daa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d8dae:	d8e6      	bhi.n	d8d7e <__multiply+0xf2>
   d8db0:	9d01      	ldr	r5, [sp, #4]
   d8db2:	514b      	str	r3, [r1, r5]
   d8db4:	3104      	adds	r1, #4
   d8db6:	e79e      	b.n	d8cf6 <__multiply+0x6a>
   d8db8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d8dbc:	2b00      	cmp	r3, #0
   d8dbe:	d1a0      	bne.n	d8d02 <__multiply+0x76>
   d8dc0:	3e01      	subs	r6, #1
   d8dc2:	e79c      	b.n	d8cfe <__multiply+0x72>

000d8dc4 <__pow5mult>:
   d8dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8dc8:	4615      	mov	r5, r2
   d8dca:	f012 0203 	ands.w	r2, r2, #3
   d8dce:	4606      	mov	r6, r0
   d8dd0:	460f      	mov	r7, r1
   d8dd2:	d007      	beq.n	d8de4 <__pow5mult+0x20>
   d8dd4:	4c21      	ldr	r4, [pc, #132]	; (d8e5c <__pow5mult+0x98>)
   d8dd6:	3a01      	subs	r2, #1
   d8dd8:	2300      	movs	r3, #0
   d8dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8dde:	f7ff fe80 	bl	d8ae2 <__multadd>
   d8de2:	4607      	mov	r7, r0
   d8de4:	10ad      	asrs	r5, r5, #2
   d8de6:	d035      	beq.n	d8e54 <__pow5mult+0x90>
   d8de8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8dea:	b93c      	cbnz	r4, d8dfc <__pow5mult+0x38>
   d8dec:	2010      	movs	r0, #16
   d8dee:	f7fc fbf3 	bl	d55d8 <malloc>
   d8df2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d8df6:	6270      	str	r0, [r6, #36]	; 0x24
   d8df8:	6004      	str	r4, [r0, #0]
   d8dfa:	60c4      	str	r4, [r0, #12]
   d8dfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8e04:	b94c      	cbnz	r4, d8e1a <__pow5mult+0x56>
   d8e06:	f240 2171 	movw	r1, #625	; 0x271
   d8e0a:	4630      	mov	r0, r6
   d8e0c:	f7ff ff35 	bl	d8c7a <__i2b>
   d8e10:	2300      	movs	r3, #0
   d8e12:	f8c8 0008 	str.w	r0, [r8, #8]
   d8e16:	4604      	mov	r4, r0
   d8e18:	6003      	str	r3, [r0, #0]
   d8e1a:	f04f 0900 	mov.w	r9, #0
   d8e1e:	07eb      	lsls	r3, r5, #31
   d8e20:	d50a      	bpl.n	d8e38 <__pow5mult+0x74>
   d8e22:	4639      	mov	r1, r7
   d8e24:	4622      	mov	r2, r4
   d8e26:	4630      	mov	r0, r6
   d8e28:	f7ff ff30 	bl	d8c8c <__multiply>
   d8e2c:	4639      	mov	r1, r7
   d8e2e:	4680      	mov	r8, r0
   d8e30:	4630      	mov	r0, r6
   d8e32:	f7ff fe3f 	bl	d8ab4 <_Bfree>
   d8e36:	4647      	mov	r7, r8
   d8e38:	106d      	asrs	r5, r5, #1
   d8e3a:	d00b      	beq.n	d8e54 <__pow5mult+0x90>
   d8e3c:	6820      	ldr	r0, [r4, #0]
   d8e3e:	b938      	cbnz	r0, d8e50 <__pow5mult+0x8c>
   d8e40:	4622      	mov	r2, r4
   d8e42:	4621      	mov	r1, r4
   d8e44:	4630      	mov	r0, r6
   d8e46:	f7ff ff21 	bl	d8c8c <__multiply>
   d8e4a:	6020      	str	r0, [r4, #0]
   d8e4c:	f8c0 9000 	str.w	r9, [r0]
   d8e50:	4604      	mov	r4, r0
   d8e52:	e7e4      	b.n	d8e1e <__pow5mult+0x5a>
   d8e54:	4638      	mov	r0, r7
   d8e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8e5a:	bf00      	nop
   d8e5c:	000d9b70 	.word	0x000d9b70

000d8e60 <__lshift>:
   d8e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e64:	460c      	mov	r4, r1
   d8e66:	6849      	ldr	r1, [r1, #4]
   d8e68:	6923      	ldr	r3, [r4, #16]
   d8e6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d8e6e:	68a3      	ldr	r3, [r4, #8]
   d8e70:	4607      	mov	r7, r0
   d8e72:	4691      	mov	r9, r2
   d8e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8e78:	f108 0601 	add.w	r6, r8, #1
   d8e7c:	42b3      	cmp	r3, r6
   d8e7e:	db3f      	blt.n	d8f00 <__lshift+0xa0>
   d8e80:	4638      	mov	r0, r7
   d8e82:	f7ff fde3 	bl	d8a4c <_Balloc>
   d8e86:	2300      	movs	r3, #0
   d8e88:	4605      	mov	r5, r0
   d8e8a:	f100 0114 	add.w	r1, r0, #20
   d8e8e:	f100 0210 	add.w	r2, r0, #16
   d8e92:	4618      	mov	r0, r3
   d8e94:	4553      	cmp	r3, sl
   d8e96:	db36      	blt.n	d8f06 <__lshift+0xa6>
   d8e98:	6920      	ldr	r0, [r4, #16]
   d8e9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d8e9e:	f104 0314 	add.w	r3, r4, #20
   d8ea2:	f019 091f 	ands.w	r9, r9, #31
   d8ea6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d8eaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d8eae:	d02e      	beq.n	d8f0e <__lshift+0xae>
   d8eb0:	f1c9 0e20 	rsb	lr, r9, #32
   d8eb4:	468a      	mov	sl, r1
   d8eb6:	2200      	movs	r2, #0
   d8eb8:	6818      	ldr	r0, [r3, #0]
   d8eba:	fa00 f009 	lsl.w	r0, r0, r9
   d8ebe:	4302      	orrs	r2, r0
   d8ec0:	f84a 2b04 	str.w	r2, [sl], #4
   d8ec4:	f853 2b04 	ldr.w	r2, [r3], #4
   d8ec8:	459c      	cmp	ip, r3
   d8eca:	fa22 f20e 	lsr.w	r2, r2, lr
   d8ece:	d8f3      	bhi.n	d8eb8 <__lshift+0x58>
   d8ed0:	ebac 0304 	sub.w	r3, ip, r4
   d8ed4:	3b15      	subs	r3, #21
   d8ed6:	f023 0303 	bic.w	r3, r3, #3
   d8eda:	3304      	adds	r3, #4
   d8edc:	f104 0015 	add.w	r0, r4, #21
   d8ee0:	4560      	cmp	r0, ip
   d8ee2:	bf88      	it	hi
   d8ee4:	2304      	movhi	r3, #4
   d8ee6:	50ca      	str	r2, [r1, r3]
   d8ee8:	b10a      	cbz	r2, d8eee <__lshift+0x8e>
   d8eea:	f108 0602 	add.w	r6, r8, #2
   d8eee:	3e01      	subs	r6, #1
   d8ef0:	4638      	mov	r0, r7
   d8ef2:	612e      	str	r6, [r5, #16]
   d8ef4:	4621      	mov	r1, r4
   d8ef6:	f7ff fddd 	bl	d8ab4 <_Bfree>
   d8efa:	4628      	mov	r0, r5
   d8efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f00:	3101      	adds	r1, #1
   d8f02:	005b      	lsls	r3, r3, #1
   d8f04:	e7ba      	b.n	d8e7c <__lshift+0x1c>
   d8f06:	f842 0f04 	str.w	r0, [r2, #4]!
   d8f0a:	3301      	adds	r3, #1
   d8f0c:	e7c2      	b.n	d8e94 <__lshift+0x34>
   d8f0e:	3904      	subs	r1, #4
   d8f10:	f853 2b04 	ldr.w	r2, [r3], #4
   d8f14:	f841 2f04 	str.w	r2, [r1, #4]!
   d8f18:	459c      	cmp	ip, r3
   d8f1a:	d8f9      	bhi.n	d8f10 <__lshift+0xb0>
   d8f1c:	e7e7      	b.n	d8eee <__lshift+0x8e>

000d8f1e <__mcmp>:
   d8f1e:	b530      	push	{r4, r5, lr}
   d8f20:	6902      	ldr	r2, [r0, #16]
   d8f22:	690c      	ldr	r4, [r1, #16]
   d8f24:	1b12      	subs	r2, r2, r4
   d8f26:	d10e      	bne.n	d8f46 <__mcmp+0x28>
   d8f28:	f100 0314 	add.w	r3, r0, #20
   d8f2c:	3114      	adds	r1, #20
   d8f2e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d8f32:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d8f36:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d8f3a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d8f3e:	42a5      	cmp	r5, r4
   d8f40:	d003      	beq.n	d8f4a <__mcmp+0x2c>
   d8f42:	d305      	bcc.n	d8f50 <__mcmp+0x32>
   d8f44:	2201      	movs	r2, #1
   d8f46:	4610      	mov	r0, r2
   d8f48:	bd30      	pop	{r4, r5, pc}
   d8f4a:	4283      	cmp	r3, r0
   d8f4c:	d3f3      	bcc.n	d8f36 <__mcmp+0x18>
   d8f4e:	e7fa      	b.n	d8f46 <__mcmp+0x28>
   d8f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8f54:	e7f7      	b.n	d8f46 <__mcmp+0x28>

000d8f56 <__mdiff>:
   d8f56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8f5a:	460c      	mov	r4, r1
   d8f5c:	4606      	mov	r6, r0
   d8f5e:	4611      	mov	r1, r2
   d8f60:	4620      	mov	r0, r4
   d8f62:	4617      	mov	r7, r2
   d8f64:	f7ff ffdb 	bl	d8f1e <__mcmp>
   d8f68:	1e05      	subs	r5, r0, #0
   d8f6a:	d108      	bne.n	d8f7e <__mdiff+0x28>
   d8f6c:	4629      	mov	r1, r5
   d8f6e:	4630      	mov	r0, r6
   d8f70:	f7ff fd6c 	bl	d8a4c <_Balloc>
   d8f74:	2301      	movs	r3, #1
   d8f76:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d8f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8f7e:	bfa4      	itt	ge
   d8f80:	463b      	movge	r3, r7
   d8f82:	4627      	movge	r7, r4
   d8f84:	4630      	mov	r0, r6
   d8f86:	6879      	ldr	r1, [r7, #4]
   d8f88:	bfa6      	itte	ge
   d8f8a:	461c      	movge	r4, r3
   d8f8c:	2500      	movge	r5, #0
   d8f8e:	2501      	movlt	r5, #1
   d8f90:	f7ff fd5c 	bl	d8a4c <_Balloc>
   d8f94:	693e      	ldr	r6, [r7, #16]
   d8f96:	60c5      	str	r5, [r0, #12]
   d8f98:	6925      	ldr	r5, [r4, #16]
   d8f9a:	f107 0114 	add.w	r1, r7, #20
   d8f9e:	f104 0914 	add.w	r9, r4, #20
   d8fa2:	f100 0e14 	add.w	lr, r0, #20
   d8fa6:	f107 0210 	add.w	r2, r7, #16
   d8faa:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d8fae:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d8fb2:	46f2      	mov	sl, lr
   d8fb4:	2700      	movs	r7, #0
   d8fb6:	f859 3b04 	ldr.w	r3, [r9], #4
   d8fba:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d8fbe:	fa1f f883 	uxth.w	r8, r3
   d8fc2:	fa17 f78b 	uxtah	r7, r7, fp
   d8fc6:	0c1b      	lsrs	r3, r3, #16
   d8fc8:	eba7 0808 	sub.w	r8, r7, r8
   d8fcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d8fd0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d8fd4:	fa1f f888 	uxth.w	r8, r8
   d8fd8:	141f      	asrs	r7, r3, #16
   d8fda:	454d      	cmp	r5, r9
   d8fdc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d8fe0:	f84a 3b04 	str.w	r3, [sl], #4
   d8fe4:	d8e7      	bhi.n	d8fb6 <__mdiff+0x60>
   d8fe6:	1b2b      	subs	r3, r5, r4
   d8fe8:	3b15      	subs	r3, #21
   d8fea:	f023 0303 	bic.w	r3, r3, #3
   d8fee:	3304      	adds	r3, #4
   d8ff0:	3415      	adds	r4, #21
   d8ff2:	42a5      	cmp	r5, r4
   d8ff4:	bf38      	it	cc
   d8ff6:	2304      	movcc	r3, #4
   d8ff8:	4419      	add	r1, r3
   d8ffa:	4473      	add	r3, lr
   d8ffc:	469e      	mov	lr, r3
   d8ffe:	460d      	mov	r5, r1
   d9000:	4565      	cmp	r5, ip
   d9002:	d30e      	bcc.n	d9022 <__mdiff+0xcc>
   d9004:	f10c 0203 	add.w	r2, ip, #3
   d9008:	1a52      	subs	r2, r2, r1
   d900a:	f022 0203 	bic.w	r2, r2, #3
   d900e:	3903      	subs	r1, #3
   d9010:	458c      	cmp	ip, r1
   d9012:	bf38      	it	cc
   d9014:	2200      	movcc	r2, #0
   d9016:	441a      	add	r2, r3
   d9018:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d901c:	b17b      	cbz	r3, d903e <__mdiff+0xe8>
   d901e:	6106      	str	r6, [r0, #16]
   d9020:	e7ab      	b.n	d8f7a <__mdiff+0x24>
   d9022:	f855 8b04 	ldr.w	r8, [r5], #4
   d9026:	fa17 f488 	uxtah	r4, r7, r8
   d902a:	1422      	asrs	r2, r4, #16
   d902c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d9030:	b2a4      	uxth	r4, r4
   d9032:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d9036:	f84e 4b04 	str.w	r4, [lr], #4
   d903a:	1417      	asrs	r7, r2, #16
   d903c:	e7e0      	b.n	d9000 <__mdiff+0xaa>
   d903e:	3e01      	subs	r6, #1
   d9040:	e7ea      	b.n	d9018 <__mdiff+0xc2>
	...

000d9044 <__ulp>:
   d9044:	b082      	sub	sp, #8
   d9046:	ed8d 0b00 	vstr	d0, [sp]
   d904a:	9b01      	ldr	r3, [sp, #4]
   d904c:	4912      	ldr	r1, [pc, #72]	; (d9098 <__ulp+0x54>)
   d904e:	4019      	ands	r1, r3
   d9050:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d9054:	2900      	cmp	r1, #0
   d9056:	dd05      	ble.n	d9064 <__ulp+0x20>
   d9058:	2200      	movs	r2, #0
   d905a:	460b      	mov	r3, r1
   d905c:	ec43 2b10 	vmov	d0, r2, r3
   d9060:	b002      	add	sp, #8
   d9062:	4770      	bx	lr
   d9064:	4249      	negs	r1, r1
   d9066:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d906a:	ea4f 5021 	mov.w	r0, r1, asr #20
   d906e:	f04f 0200 	mov.w	r2, #0
   d9072:	f04f 0300 	mov.w	r3, #0
   d9076:	da04      	bge.n	d9082 <__ulp+0x3e>
   d9078:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d907c:	fa41 f300 	asr.w	r3, r1, r0
   d9080:	e7ec      	b.n	d905c <__ulp+0x18>
   d9082:	f1a0 0114 	sub.w	r1, r0, #20
   d9086:	291e      	cmp	r1, #30
   d9088:	bfda      	itte	le
   d908a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d908e:	fa20 f101 	lsrle.w	r1, r0, r1
   d9092:	2101      	movgt	r1, #1
   d9094:	460a      	mov	r2, r1
   d9096:	e7e1      	b.n	d905c <__ulp+0x18>
   d9098:	7ff00000 	.word	0x7ff00000

000d909c <__b2d>:
   d909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d909e:	6905      	ldr	r5, [r0, #16]
   d90a0:	f100 0714 	add.w	r7, r0, #20
   d90a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d90a8:	1f2e      	subs	r6, r5, #4
   d90aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d90ae:	4620      	mov	r0, r4
   d90b0:	f7ff fd93 	bl	d8bda <__hi0bits>
   d90b4:	f1c0 0320 	rsb	r3, r0, #32
   d90b8:	280a      	cmp	r0, #10
   d90ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; d9138 <__b2d+0x9c>
   d90be:	600b      	str	r3, [r1, #0]
   d90c0:	dc14      	bgt.n	d90ec <__b2d+0x50>
   d90c2:	f1c0 0e0b 	rsb	lr, r0, #11
   d90c6:	fa24 f10e 	lsr.w	r1, r4, lr
   d90ca:	42b7      	cmp	r7, r6
   d90cc:	ea41 030c 	orr.w	r3, r1, ip
   d90d0:	bf34      	ite	cc
   d90d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d90d6:	2100      	movcs	r1, #0
   d90d8:	3015      	adds	r0, #21
   d90da:	fa04 f000 	lsl.w	r0, r4, r0
   d90de:	fa21 f10e 	lsr.w	r1, r1, lr
   d90e2:	ea40 0201 	orr.w	r2, r0, r1
   d90e6:	ec43 2b10 	vmov	d0, r2, r3
   d90ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d90ec:	42b7      	cmp	r7, r6
   d90ee:	bf3a      	itte	cc
   d90f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d90f4:	f1a5 0608 	subcc.w	r6, r5, #8
   d90f8:	2100      	movcs	r1, #0
   d90fa:	380b      	subs	r0, #11
   d90fc:	d017      	beq.n	d912e <__b2d+0x92>
   d90fe:	f1c0 0c20 	rsb	ip, r0, #32
   d9102:	fa04 f500 	lsl.w	r5, r4, r0
   d9106:	42be      	cmp	r6, r7
   d9108:	fa21 f40c 	lsr.w	r4, r1, ip
   d910c:	ea45 0504 	orr.w	r5, r5, r4
   d9110:	bf8c      	ite	hi
   d9112:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d9116:	2400      	movls	r4, #0
   d9118:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d911c:	fa01 f000 	lsl.w	r0, r1, r0
   d9120:	fa24 f40c 	lsr.w	r4, r4, ip
   d9124:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9128:	ea40 0204 	orr.w	r2, r0, r4
   d912c:	e7db      	b.n	d90e6 <__b2d+0x4a>
   d912e:	ea44 030c 	orr.w	r3, r4, ip
   d9132:	460a      	mov	r2, r1
   d9134:	e7d7      	b.n	d90e6 <__b2d+0x4a>
   d9136:	bf00      	nop
   d9138:	3ff00000 	.word	0x3ff00000

000d913c <__d2b>:
   d913c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9140:	4689      	mov	r9, r1
   d9142:	2101      	movs	r1, #1
   d9144:	ec57 6b10 	vmov	r6, r7, d0
   d9148:	4690      	mov	r8, r2
   d914a:	f7ff fc7f 	bl	d8a4c <_Balloc>
   d914e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d9152:	4604      	mov	r4, r0
   d9154:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d9158:	bb35      	cbnz	r5, d91a8 <__d2b+0x6c>
   d915a:	2e00      	cmp	r6, #0
   d915c:	9301      	str	r3, [sp, #4]
   d915e:	d028      	beq.n	d91b2 <__d2b+0x76>
   d9160:	4668      	mov	r0, sp
   d9162:	9600      	str	r6, [sp, #0]
   d9164:	f7ff fd59 	bl	d8c1a <__lo0bits>
   d9168:	9900      	ldr	r1, [sp, #0]
   d916a:	b300      	cbz	r0, d91ae <__d2b+0x72>
   d916c:	9a01      	ldr	r2, [sp, #4]
   d916e:	f1c0 0320 	rsb	r3, r0, #32
   d9172:	fa02 f303 	lsl.w	r3, r2, r3
   d9176:	430b      	orrs	r3, r1
   d9178:	40c2      	lsrs	r2, r0
   d917a:	6163      	str	r3, [r4, #20]
   d917c:	9201      	str	r2, [sp, #4]
   d917e:	9b01      	ldr	r3, [sp, #4]
   d9180:	61a3      	str	r3, [r4, #24]
   d9182:	2b00      	cmp	r3, #0
   d9184:	bf14      	ite	ne
   d9186:	2202      	movne	r2, #2
   d9188:	2201      	moveq	r2, #1
   d918a:	6122      	str	r2, [r4, #16]
   d918c:	b1d5      	cbz	r5, d91c4 <__d2b+0x88>
   d918e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d9192:	4405      	add	r5, r0
   d9194:	f8c9 5000 	str.w	r5, [r9]
   d9198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d919c:	f8c8 0000 	str.w	r0, [r8]
   d91a0:	4620      	mov	r0, r4
   d91a2:	b003      	add	sp, #12
   d91a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d91a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d91ac:	e7d5      	b.n	d915a <__d2b+0x1e>
   d91ae:	6161      	str	r1, [r4, #20]
   d91b0:	e7e5      	b.n	d917e <__d2b+0x42>
   d91b2:	a801      	add	r0, sp, #4
   d91b4:	f7ff fd31 	bl	d8c1a <__lo0bits>
   d91b8:	9b01      	ldr	r3, [sp, #4]
   d91ba:	6163      	str	r3, [r4, #20]
   d91bc:	2201      	movs	r2, #1
   d91be:	6122      	str	r2, [r4, #16]
   d91c0:	3020      	adds	r0, #32
   d91c2:	e7e3      	b.n	d918c <__d2b+0x50>
   d91c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d91c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d91cc:	f8c9 0000 	str.w	r0, [r9]
   d91d0:	6918      	ldr	r0, [r3, #16]
   d91d2:	f7ff fd02 	bl	d8bda <__hi0bits>
   d91d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d91da:	e7df      	b.n	d919c <__d2b+0x60>

000d91dc <__ratio>:
   d91dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d91e0:	4688      	mov	r8, r1
   d91e2:	4669      	mov	r1, sp
   d91e4:	4681      	mov	r9, r0
   d91e6:	f7ff ff59 	bl	d909c <__b2d>
   d91ea:	a901      	add	r1, sp, #4
   d91ec:	4640      	mov	r0, r8
   d91ee:	ec55 4b10 	vmov	r4, r5, d0
   d91f2:	f7ff ff53 	bl	d909c <__b2d>
   d91f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d91fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d91fe:	eba3 0c02 	sub.w	ip, r3, r2
   d9202:	e9dd 3200 	ldrd	r3, r2, [sp]
   d9206:	1a9b      	subs	r3, r3, r2
   d9208:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d920c:	ec51 0b10 	vmov	r0, r1, d0
   d9210:	2b00      	cmp	r3, #0
   d9212:	bfd6      	itet	le
   d9214:	460a      	movle	r2, r1
   d9216:	462a      	movgt	r2, r5
   d9218:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d921c:	468b      	mov	fp, r1
   d921e:	462f      	mov	r7, r5
   d9220:	bfd4      	ite	le
   d9222:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d9226:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d922a:	4620      	mov	r0, r4
   d922c:	ee10 2a10 	vmov	r2, s0
   d9230:	465b      	mov	r3, fp
   d9232:	4639      	mov	r1, r7
   d9234:	f7fd ff14 	bl	d7060 <__aeabi_ddiv>
   d9238:	ec41 0b10 	vmov	d0, r0, r1
   d923c:	b003      	add	sp, #12
   d923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9242 <__copybits>:
   d9242:	3901      	subs	r1, #1
   d9244:	b570      	push	{r4, r5, r6, lr}
   d9246:	1149      	asrs	r1, r1, #5
   d9248:	6914      	ldr	r4, [r2, #16]
   d924a:	3101      	adds	r1, #1
   d924c:	f102 0314 	add.w	r3, r2, #20
   d9250:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9254:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9258:	1f05      	subs	r5, r0, #4
   d925a:	42a3      	cmp	r3, r4
   d925c:	d30c      	bcc.n	d9278 <__copybits+0x36>
   d925e:	1aa3      	subs	r3, r4, r2
   d9260:	3b11      	subs	r3, #17
   d9262:	f023 0303 	bic.w	r3, r3, #3
   d9266:	3211      	adds	r2, #17
   d9268:	42a2      	cmp	r2, r4
   d926a:	bf88      	it	hi
   d926c:	2300      	movhi	r3, #0
   d926e:	4418      	add	r0, r3
   d9270:	2300      	movs	r3, #0
   d9272:	4288      	cmp	r0, r1
   d9274:	d305      	bcc.n	d9282 <__copybits+0x40>
   d9276:	bd70      	pop	{r4, r5, r6, pc}
   d9278:	f853 6b04 	ldr.w	r6, [r3], #4
   d927c:	f845 6f04 	str.w	r6, [r5, #4]!
   d9280:	e7eb      	b.n	d925a <__copybits+0x18>
   d9282:	f840 3b04 	str.w	r3, [r0], #4
   d9286:	e7f4      	b.n	d9272 <__copybits+0x30>

000d9288 <__any_on>:
   d9288:	f100 0214 	add.w	r2, r0, #20
   d928c:	6900      	ldr	r0, [r0, #16]
   d928e:	114b      	asrs	r3, r1, #5
   d9290:	4298      	cmp	r0, r3
   d9292:	b510      	push	{r4, lr}
   d9294:	db11      	blt.n	d92ba <__any_on+0x32>
   d9296:	dd0a      	ble.n	d92ae <__any_on+0x26>
   d9298:	f011 011f 	ands.w	r1, r1, #31
   d929c:	d007      	beq.n	d92ae <__any_on+0x26>
   d929e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d92a2:	fa24 f001 	lsr.w	r0, r4, r1
   d92a6:	fa00 f101 	lsl.w	r1, r0, r1
   d92aa:	428c      	cmp	r4, r1
   d92ac:	d10b      	bne.n	d92c6 <__any_on+0x3e>
   d92ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d92b2:	4293      	cmp	r3, r2
   d92b4:	d803      	bhi.n	d92be <__any_on+0x36>
   d92b6:	2000      	movs	r0, #0
   d92b8:	bd10      	pop	{r4, pc}
   d92ba:	4603      	mov	r3, r0
   d92bc:	e7f7      	b.n	d92ae <__any_on+0x26>
   d92be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d92c2:	2900      	cmp	r1, #0
   d92c4:	d0f5      	beq.n	d92b2 <__any_on+0x2a>
   d92c6:	2001      	movs	r0, #1
   d92c8:	e7f6      	b.n	d92b8 <__any_on+0x30>

000d92ca <_calloc_r>:
   d92ca:	b513      	push	{r0, r1, r4, lr}
   d92cc:	434a      	muls	r2, r1
   d92ce:	4611      	mov	r1, r2
   d92d0:	9201      	str	r2, [sp, #4]
   d92d2:	f7fc f9b1 	bl	d5638 <_malloc_r>
   d92d6:	4604      	mov	r4, r0
   d92d8:	b118      	cbz	r0, d92e2 <_calloc_r+0x18>
   d92da:	9a01      	ldr	r2, [sp, #4]
   d92dc:	2100      	movs	r1, #0
   d92de:	f7fe f907 	bl	d74f0 <memset>
   d92e2:	4620      	mov	r0, r4
   d92e4:	b002      	add	sp, #8
   d92e6:	bd10      	pop	{r4, pc}

000d92e8 <nan>:
   d92e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d92f0 <nan+0x8>
   d92ec:	4770      	bx	lr
   d92ee:	bf00      	nop
   d92f0:	00000000 	.word	0x00000000
   d92f4:	7ff80000 	.word	0x7ff80000

000d92f8 <__ascii_wctomb>:
   d92f8:	b149      	cbz	r1, d930e <__ascii_wctomb+0x16>
   d92fa:	2aff      	cmp	r2, #255	; 0xff
   d92fc:	bf85      	ittet	hi
   d92fe:	238a      	movhi	r3, #138	; 0x8a
   d9300:	6003      	strhi	r3, [r0, #0]
   d9302:	700a      	strbls	r2, [r1, #0]
   d9304:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d9308:	bf98      	it	ls
   d930a:	2001      	movls	r0, #1
   d930c:	4770      	bx	lr
   d930e:	4608      	mov	r0, r1
   d9310:	4770      	bx	lr
	...

000d9314 <__aeabi_d2lz>:
   d9314:	b538      	push	{r3, r4, r5, lr}
   d9316:	2200      	movs	r2, #0
   d9318:	2300      	movs	r3, #0
   d931a:	4604      	mov	r4, r0
   d931c:	460d      	mov	r5, r1
   d931e:	f7fd ffe7 	bl	d72f0 <__aeabi_dcmplt>
   d9322:	b928      	cbnz	r0, d9330 <__aeabi_d2lz+0x1c>
   d9324:	4620      	mov	r0, r4
   d9326:	4629      	mov	r1, r5
   d9328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d932c:	f7fe b878 	b.w	d7420 <__aeabi_d2ulz>
   d9330:	4620      	mov	r0, r4
   d9332:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d9336:	f7fe f873 	bl	d7420 <__aeabi_d2ulz>
   d933a:	4240      	negs	r0, r0
   d933c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9340:	bd38      	pop	{r3, r4, r5, pc}
   d9342:	bf00      	nop

000d9344 <dynalib_user>:
   d9344:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9354:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   d9364:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   d9374:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   d9384:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   d9394:	3432 3130 3800 302e 5400 6d65 5f70 614d     2401.8.0.Temp_Ma
   d93a4:	2078 203a 3325 312e 0066 6554 706d 4d5f     x : %3.1f.Temp_M
   d93b4:	7869 3a20 2520 2e33 6631 4800 6d75 6469     ix : %3.1f.Humid
   d93c4:	7469 5f79 614d 3a78 2520 2e33 6631 4800     ity_Max: %3.1f.H
   d93d4:	6d75 6469 7469 5f79 694d 206e 203a 3325     umidity_Min : %3
   d93e4:	312e 0066 227b 6554 706d 7265 7461 7275     .1f.{"Temperatur
   d93f4:	2265 253a 2e34 6631 202c 4822 6d75 6469     e":%4.1f, "Humid
   d9404:	7469 2279 253a 2e34 6631 222c 6142 7474     ity":%4.1f,"Batt
   d9414:	7265 2279 253a 7d69 7300 6f74 6172 6567     ery":%i}.storage
   d9424:	662d 6361 6c69 7469 2d79 6f68 6b6f 5400     -facility-hook.T
   d9434:	6d69 0065 6f4e 4420 7461 0061 6255 6469     ime.No Data.Ubid
   d9444:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   d9454:	2065 6552 6563 7669 6465 5300 6174 6574     e Received.State
   d9464:	2500 2e34 6631 432a 2500 2e34 6631 2525     .%4.1f*C.%4.1f%%
   d9474:	2500 2069 2525 4600 6961 656c 2064 6f74     .%i %%.Failed to
   d9484:	7020 7265 6f66 6d72 7220 6165 6964 676e      perform reading
   d9494:	3a20 0028 6f4c 0067 6146 6c69 6465 7420      :(.Log.Failed t
   d94a4:	206f 6174 656b 7220 6165 6964 676e 0021     o take reading!.
   d94b4:	4853 3354 2031 6574 7473 5000 6f72 7564     SHT31 test.Produ
   d94c4:	7463 5620 7265 6973 6e6f 5200 6c65 6165     ct Version.Relea
   d94d4:	6573 7400 6d65 6570 6172 7574 6572 6800     se.temperature.h
   d94e4:	6d75 6469 7469 0079 6574 706d 7265 7461     umidity.temperat
   d94f4:	7275 2d65 7055 6570 0072 6574 706d 7265     ure-Upper.temper
   d9504:	7461 7275 2d65 6f6c 6577 0072 7568 696d     ature-lower.humi
   d9514:	6964 7974 752d 7070 7265 6800 6d75 6469     dity-upper.humid
   d9524:	7469 2d79 6f6c 6577 0072 6142 7474 7265     ity-lower.Batter
   d9534:	0079 6142 7474 7265 4379 6e6f 6574 7478     y.BatteryContext
   d9544:	4d00 6165 7573 6572 4e2d 776f 5600 7265     .Measure-Now.Ver
   d9554:	6f62 6573 4d2d 646f 0065 6554 706d 552d     bose-Mode.Temp-U
   d9564:	7070 7265 4c2d 6d69 7469 5400 6d65 2d70     pper-Limit.Temp-
   d9574:	6f4c 6577 2d72 694c 696d 0074 7548 696d     Lower-Limit.Humi
   d9584:	6964 7974 4c2d 776f 7265 4c2d 6d69 7469     dity-Lower-Limit
   d9594:	4800 6d75 6469 7974 752d 7070 7265 4c2d     .Humidty-upper-L
   d95a4:	6d69 7469 4500 7272 726f 2d20 5320 5448     imit.Error - SHT
   d95b4:	3133 4920 696e 6974 6c61 7a69 7461 6f69     31 Initializatio
   d95c4:	006e 6f43 6c75 6e64 7427 6620 6e69 2064     n.Couldn't find 
   d95d4:	4853 3354 0031 7453 7261 7574 0070 227b     SHT31.Startup.{"
   d95e4:	6c61 7265 2d74 6574 706d 7265 7461 7275     alert-temperatur
   d95f4:	2265 253a 2e34 6631 007d 6363 612d 656c     e":%4.1f}.cc-ale
   d9604:	7472 772d 6265 6f68 6b6f 7b00 6122 656c     rt-webhook.{"ale
   d9614:	7472 682d 6d75 6469 7469 2279 253a 2e34     rt-humidity":%4.
   d9624:	6631 007d 6553 2074 6556 6272 736f 2065     1f}.Set Verbose 
   d9634:	6f4d 6564 4300 656c 7261 6465 5620 7265     Mode.Cleared Ver
   d9644:	6f62 6573 4d20 646f 0065 7246 6d6f 2520     bose Mode.From %
   d9654:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
   d9664:	6e61 6973 6974 6e6f 4500 7272 726f 7420     ansition.Error t
   d9674:	6b61 6e69 2067 654d 7361 7275 6d65 6e65     aking Measuremen
   d9684:	7374 7300 6170 6b72 642f 7665 6369 2f65     ts.spark/device/
   d9694:	6573 7373 6f69 2f6e 6e65 0064 7245 6f72     session/end.Erro
   d96a4:	2072 7453 7461 2065 202d 6552 6573 0074     r State - Reset.
   d96b4:	7055 6570 2072 6854 6572 6873 6c6f 2064     Upper Threshold 
   d96c4:	6553 0074 6f4c 6577 2072 6854 6572 6873     Set.Lower Thresh
   d96d4:	6c6f 2064 6553 0074 9358 000d 9360 000d     old Set.X...`...
   d96e4:	9364 000d 936d 000d 9375 000d 9381 000d     d...m...u.......
   d96f4:	9387 000d 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d9704:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...

000d9738 <_ZTVN5spark13CellularClassE>:
	...
   d9740:	573b 000d 5731 000d 5727 000d 56dd 000d     ;W..1W..'W...V..
   d9750:	571b 000d 570f 000d 5703 000d 56fb 000d     .W...W...W...V..
   d9760:	56f1 000d 56e7 000d 6055 000d               .V...V..U`..

000d976c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9774:	5775 000d 577b 000d 57cb 000d 5789 000d     uW..{W...W...W..
   d9784:	5777 000d                                   wW..

000d9788 <_ZTVN5spark13EthernetClassE>:
	...
   d9790:	5d8f 000d 5d85 000d 5d7b 000d 5d71 000d     .]...]..{]..q]..
   d97a0:	5d65 000d 5d59 000d 5d4d 000d 5d45 000d     e]..Y]..M]..E]..
   d97b0:	5d3b 000d 5d31 000d 6055 000d               ;]..1]..U`..

000d97bc <_ZTV7TwoWire>:
	...
   d97c4:	5dad 000d 5df7 000d 5dcf 000d 5daf 000d     .]...]...]...]..
   d97d4:	5dd7 000d 5ddf 000d 5de7 000d 5def 000d     .]...]...]...]..

000d97e4 <_ZTV9IPAddress>:
	...
   d97ec:	5f09 000d 5ef9 000d 5efb 000d 7061 0070     ._...^...^..app.

000d97fc <_ZTVN5spark12NetworkClassE>:
	...
   d9804:	5fed 000d 5ff7 000d 6001 000d 600b 000d     ._..._...`...`..
   d9814:	6015 000d 6021 000d 602d 000d 6039 000d     .`..!`..-`..9`..
   d9824:	6041 000d 604b 000d 6055 000d 5925 252d     A`..K`..U`..%Y-%
   d9834:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d9844:	7361 7463 6d69 0065                         asctime.

000d984c <_ZTV11USARTSerial>:
	...
   d9854:	65a1 000d 660d 000d 65e5 000d 613d 000d     .e...f...e..=a..
   d9864:	65b5 000d 65d1 000d 65c3 000d 65df 000d     .e...e...e...e..
   d9874:	65a3 000d 65a7 000d                         .e...e..

000d987c <_ZTV9USBSerial>:
	...
   d9884:	66a1 000d 6709 000d 66df 000d 613d 000d     .f...g...f..=a..
   d9894:	66d1 000d 66a3 000d 66b3 000d 6703 000d     .f...f...f...g..
   d98a4:	66c3 000d 669d 000d                         .f...f..

000d98ac <_ZSt7nothrow>:
   d98ac:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d98bc:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d98cd <day_name.6145>:
   d98cd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d98dd:	6972 6153                                    riSat

000d98e2 <mon_name.6146>:
   d98e2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d98f2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d9902:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000d9914 <fpi.7566>:
   d9914:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9924:	0000 0000                                   ....

000d9928 <fpinan.7602>:
   d9928:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000d9940 <tinytens>:
   d9940:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9950:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9960:	6f43 64ac 0628 1168                         Co.d(.h.

000d9968 <_ctype_>:
   d9968:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9978:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9988:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9998:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d99a8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d99b8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d99c8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d99d8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d99e8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   d9a68:	2e00 0000                                   ....

000d9a6c <_C_numeric_locale>:
   d9a6c:	9a69 000d 98cc 000d e328 2003 4f50 4953     i.......(.. POSI
   d9a7c:	0058 0000                                   X...

000d9a80 <__mprec_bigtens>:
   d9a80:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9a90:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9aa0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9aa8 <__mprec_tens>:
   d9aa8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9ab8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9ac8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9ad8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9ae8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9af8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9b08:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9b18:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9b28:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9b38:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9b48:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9b58:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9b68:	9db4 79d9 7843 44ea                         ...yCx.D

000d9b70 <p05.7490>:
   d9b70:	0005 0000 0019 0000 007d 0000               ........}...

000d9b7c <link_const_variable_data_end>:
   d9b7c:	000d4e85 	.word	0x000d4e85
   d9b80:	000d56b5 	.word	0x000d56b5
   d9b84:	000d5745 	.word	0x000d5745
   d9b88:	000d5d99 	.word	0x000d5d99
   d9b8c:	000d5fdd 	.word	0x000d5fdd
   d9b90:	000d6129 	.word	0x000d6129
   d9b94:	000d6209 	.word	0x000d6209
   d9b98:	000d63cd 	.word	0x000d63cd
   d9b9c:	000d658d 	.word	0x000d658d
