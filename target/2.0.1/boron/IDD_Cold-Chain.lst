
/Users/chipmc/Documents/Maker/Particle/Projects/IDD_Cold-Chain/target/2.0.1/boron/IDD_Cold-Chain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000074f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000db510  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002a8  2003e168  000dbd14  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003e0  2003e410  2003e410  0002e410  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dbfbc  000dbfbc  0002bfbc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dbfe8  000dbfe8  0002bfe8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00191cf9  00000000  00000000  0002bfec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a0ac  00000000  00000000  001bdce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003203e  00000000  00000000  001d7d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f38  00000000  00000000  00209dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000088a0  00000000  00000000  0020cd07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003cdaf  00000000  00000000  002155a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00042556  00000000  00000000  00252356  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00112248  00000000  00000000  002948ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000895c  00000000  00000000  003a6af4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd9d 	bl	d8b70 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fdbf 	bl	d8bc0 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e168 	.word	0x2003e168
   d404c:	000dbd14 	.word	0x000dbd14
   d4050:	2003e410 	.word	0x2003e410
   d4054:	2003e410 	.word	0x2003e410
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 ff3f 	bl	d7ee4 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db4dc 	.word	0x000db4dc
   d4080:	000db508 	.word	0x000db508

000d4084 <module_user_setup>:
   d4084:	f000 bd8c 	b.w	d4ba0 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 ff09 	bl	d4ea0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f003 bee9 	b.w	d7e68 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bcdd 	b.w	d6a54 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bcdb 	b.w	d6a54 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bce1 	b.w	d6a64 <free>
	...

000d40a4 <__cxa_pure_virtual>:
   d40a4:	b508      	push	{r3, lr}
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fbb2 	bl	d6814 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6565 	.word	0x000d6565

000d40b8 <__cxa_guard_acquire>:
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5c9 	.word	0x2003e5c9

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fb99 	bl	d782a <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000daa63 	.word	0x000daa63
   d4108:	2003e568 	.word	0x2003e568

000d410c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d410c:	6943      	ldr	r3, [r0, #20]
   d410e:	b113      	cbz	r3, d4116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4110:	6983      	ldr	r3, [r0, #24]
   d4112:	300c      	adds	r0, #12
   d4114:	4718      	bx	r3
            callback();
        }
    }
   d4116:	4770      	bx	lr

000d4118 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f001 fb66 	bl	d57f0 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000dad88 	.word	0x000dad88

000d412c <_ZN17PublishQueueAsyncD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN17PublishQueueAsyncD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2138      	movs	r1, #56	; 0x38
   d4138:	f003 ffdf 	bl	d80fa <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4140:	b510      	push	{r4, lr}
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_ZN8MB85RC64D1Ev+0x10>)
   d4144:	6003      	str	r3, [r0, #0]
   d4146:	4604      	mov	r4, r0
   d4148:	f001 f956 	bl	d53f8 <_ZN6MB85RCD1Ev>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}
   d4150:	000dadb0 	.word	0x000dadb0

000d4154 <_ZN8MB85RC64D0Ev>:
   d4154:	b510      	push	{r4, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	f7ff fff2 	bl	d4140 <_ZN8MB85RC64D1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	2110      	movs	r1, #16
   d4160:	f003 ffcb 	bl	d80fa <_ZdlPvj>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}

000d4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d416a:	2100      	movs	r1, #0
   d416c:	4604      	mov	r4, r0
   d416e:	4608      	mov	r0, r1
   d4170:	f002 f980 	bl	d6474 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4176:	4620      	mov	r0, r4
   d4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d417c:	f002 f992 	bl	d64a4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4182:	b10c      	cbz	r4, d4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4184:	2301      	movs	r3, #1
   d4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4188:	2100      	movs	r1, #0
   d418a:	2001      	movs	r0, #1
   d418c:	f002 f972 	bl	d6474 <os_thread_scheduling>
            }
        }
        if (t) {
   d4190:	b12c      	cbz	r4, d419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	4620      	mov	r0, r4
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	4798      	blx	r3
            t->running = false;
   d419a:	2300      	movs	r3, #0
   d419c:	7123      	strb	r3, [r4, #4]
        }
    }
   d419e:	b002      	add	sp, #8
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a2:	b510      	push	{r4, lr}
   d41a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a6:	6800      	ldr	r0, [r0, #0]
   d41a8:	b108      	cbz	r0, d41ae <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41aa:	f002 fc5b 	bl	d6a64 <free>
class SystemClass {
   d41ae:	4620      	mov	r0, r4
   d41b0:	bd10      	pop	{r4, pc}

000d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41b2:	2300      	movs	r3, #0
   d41b4:	2204      	movs	r2, #4
   d41b6:	f002 bba5 	b.w	d6904 <spark_variable>
	...

000d41bc <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d41bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d41be:	4b10      	ldr	r3, [pc, #64]	; (d4200 <_Z16keepAliveMessagev+0x44>)
   d41c0:	4a10      	ldr	r2, [pc, #64]	; (d4204 <_Z16keepAliveMessagev+0x48>)
   d41c2:	781b      	ldrb	r3, [r3, #0]
   d41c4:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41c6:	4910      	ldr	r1, [pc, #64]	; (d4208 <_Z16keepAliveMessagev+0x4c>)
   d41c8:	4313      	orrs	r3, r2
   d41ca:	f88d 3000 	strb.w	r3, [sp]
   d41ce:	2200      	movs	r2, #0
   d41d0:	233c      	movs	r3, #60	; 0x3c
   d41d2:	a802      	add	r0, sp, #8
   d41d4:	f002 fea0 	bl	d6f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41d8:	9c03      	ldr	r4, [sp, #12]
   d41da:	b17c      	cbz	r4, d41fc <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d41dc:	6863      	ldr	r3, [r4, #4]
   d41de:	3b01      	subs	r3, #1
   d41e0:	6063      	str	r3, [r4, #4]
   d41e2:	b95b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	4620      	mov	r0, r4
   d41e8:	689b      	ldr	r3, [r3, #8]
   d41ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41ec:	68a3      	ldr	r3, [r4, #8]
   d41ee:	3b01      	subs	r3, #1
   d41f0:	60a3      	str	r3, [r4, #8]
   d41f2:	b91b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d41f4:	6823      	ldr	r3, [r4, #0]
   d41f6:	4620      	mov	r0, r4
   d41f8:	68db      	ldr	r3, [r3, #12]
   d41fa:	4798      	blx	r3
}
   d41fc:	b004      	add	sp, #16
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	2003e420 	.word	0x2003e420
   d4204:	2003e421 	.word	0x2003e421
   d4208:	000daa65 	.word	0x000daa65

000d420c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d420c:	b510      	push	{r4, lr}
      if (_M_manager)
   d420e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4210:	4604      	mov	r4, r0
      if (_M_manager)
   d4212:	b113      	cbz	r3, d421a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4214:	2203      	movs	r2, #3
   d4216:	4601      	mov	r1, r0
   d4218:	4798      	blx	r3
    }
   d421a:	4620      	mov	r0, r4
   d421c:	bd10      	pop	{r4, pc}
	...

000d4220 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4222:	4b13      	ldr	r3, [pc, #76]	; (d4270 <_ZN5TimerD1Ev+0x50>)
   d4224:	6003      	str	r3, [r0, #0]
   d4226:	4604      	mov	r4, r0
        if (handle) {
   d4228:	6880      	ldr	r0, [r0, #8]
   d422a:	b1c8      	cbz	r0, d4260 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d422c:	2500      	movs	r5, #0
   d422e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4232:	e9cd 3500 	strd	r3, r5, [sp]
   d4236:	2102      	movs	r1, #2
   d4238:	462b      	mov	r3, r5
   d423a:	462a      	mov	r2, r5
   d423c:	f002 f93a 	bl	d64b4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4240:	68a0      	ldr	r0, [r4, #8]
   d4242:	4629      	mov	r1, r5
   d4244:	f002 f96e 	bl	d6524 <os_timer_set_id>
            while (running) {
   d4248:	7923      	ldrb	r3, [r4, #4]
   d424a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d424e:	b113      	cbz	r3, d4256 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4250:	f002 f908 	bl	d6464 <os_thread_yield>
            while (running) {
   d4254:	e7f8      	b.n	d4248 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4256:	68a0      	ldr	r0, [r4, #8]
   d4258:	4629      	mov	r1, r5
   d425a:	f002 f91b 	bl	d6494 <os_timer_destroy>
            handle = nullptr;
   d425e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4260:	f104 000c 	add.w	r0, r4, #12
   d4264:	f7ff ffd2 	bl	d420c <_ZNSt14_Function_baseD1Ev>
    }
   d4268:	4620      	mov	r0, r4
   d426a:	b003      	add	sp, #12
   d426c:	bd30      	pop	{r4, r5, pc}
   d426e:	bf00      	nop
   d4270:	000dad74 	.word	0x000dad74

000d4274 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4274:	b510      	push	{r4, lr}
   d4276:	4604      	mov	r4, r0
    }
   d4278:	f7ff ffd2 	bl	d4220 <_ZN5TimerD1Ev>
   d427c:	4620      	mov	r0, r4
   d427e:	211c      	movs	r1, #28
   d4280:	f003 ff3b 	bl	d80fa <_ZdlPvj>
   d4284:	4620      	mov	r0, r4
   d4286:	bd10      	pop	{r4, pc}

000d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4288:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d428a:	4801      	ldr	r0, [pc, #4]	; (d4290 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d428c:	f002 bd3f 	b.w	d6d0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4290:	000d6ce3 	.word	0x000d6ce3

000d4294 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4294:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4296:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4298:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d429a:	2100      	movs	r1, #0
   d429c:	b140      	cbz	r0, d42b0 <_ZN5Timer12changePeriodEjj+0x1c>
   d429e:	e9cd 2100 	strd	r2, r1, [sp]
   d42a2:	460a      	mov	r2, r1
   d42a4:	2103      	movs	r1, #3
   d42a6:	f002 f905 	bl	d64b4 <os_timer_change>
   d42aa:	fab0 f080 	clz	r0, r0
   d42ae:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42b0:	b003      	add	sp, #12
   d42b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42b8:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42be:	f88d 3000 	strb.w	r3, [sp]
   d42c2:	f88d 5004 	strb.w	r5, [sp, #4]
   d42c6:	68e4      	ldr	r4, [r4, #12]
   d42c8:	233c      	movs	r3, #60	; 0x3c
   d42ca:	47a0      	blx	r4
	}
   d42cc:	b003      	add	sp, #12
   d42ce:	bd30      	pop	{r4, r5, pc}

000d42d0 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d42d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42d2:	4d1b      	ldr	r5, [pc, #108]	; (d4340 <_Z14UbidotsHandlerPKcS0_+0x70>)
  if (!data) {                                                                    // First check to see if there is any data
   d42d4:	460c      	mov	r4, r1
   d42d6:	b959      	cbnz	r1, d42f0 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   d42d8:	7a6b      	ldrb	r3, [r5, #9]
   d42da:	b32b      	cbz	r3, d4328 <_Z14UbidotsHandlerPKcS0_+0x58>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   d42dc:	4b19      	ldr	r3, [pc, #100]	; (d4344 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d42de:	f88d 1000 	strb.w	r1, [sp]
   d42e2:	781b      	ldrb	r3, [r3, #0]
   d42e4:	4a18      	ldr	r2, [pc, #96]	; (d4348 <_Z14UbidotsHandlerPKcS0_+0x78>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d42e6:	4919      	ldr	r1, [pc, #100]	; (d434c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d42e8:	4819      	ldr	r0, [pc, #100]	; (d4350 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d42ea:	f7ff ffe4 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d42ee:	e01b      	b.n	d4328 <_Z14UbidotsHandlerPKcS0_+0x58>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d42f0:	4608      	mov	r0, r1
   d42f2:	f004 fc18 	bl	d8b26 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d42f6:	38c8      	subs	r0, #200	; 0xc8
   d42f8:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   d42fa:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   d42fc:	d816      	bhi.n	d432c <_Z14UbidotsHandlerPKcS0_+0x5c>
    if (sysStatus.verboseMode) {
   d42fe:	b14b      	cbz	r3, d4314 <_Z14UbidotsHandlerPKcS0_+0x44>
        val_(0) {
   d4300:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   d4302:	f88d 3000 	strb.w	r3, [sp]
   d4306:	4b0f      	ldr	r3, [pc, #60]	; (d4344 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4308:	4a12      	ldr	r2, [pc, #72]	; (d4354 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d430a:	781b      	ldrb	r3, [r3, #0]
   d430c:	4912      	ldr	r1, [pc, #72]	; (d4358 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d430e:	4810      	ldr	r0, [pc, #64]	; (d4350 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4310:	f7ff ffd1 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    alertsStatus.upperHumidityThresholdCrossed = false;
   d4314:	4a11      	ldr	r2, [pc, #68]	; (d435c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4316:	2300      	movs	r3, #0
    alertsStatus.upperTemperatureThreshold     = false;
   d4318:	2100      	movs	r1, #0
   d431a:	6091      	str	r1, [r2, #8]
    alertsStatus.upperHumidityThresholdCrossed = false;
   d431c:	8053      	strh	r3, [r2, #2]
    alertsStatusWriteNeeded = true;
   d431e:	4a10      	ldr	r2, [pc, #64]	; (d4360 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4320:	2101      	movs	r1, #1
   d4322:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   d4324:	4a0f      	ldr	r2, [pc, #60]	; (d4364 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4326:	7013      	strb	r3, [r2, #0]
}
   d4328:	b003      	add	sp, #12
   d432a:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   d432c:	2b00      	cmp	r3, #0
   d432e:	d0fb      	beq.n	d4328 <_Z14UbidotsHandlerPKcS0_+0x58>
   d4330:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4332:	f88d 3000 	strb.w	r3, [sp]
   d4336:	4b03      	ldr	r3, [pc, #12]	; (d4344 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4338:	4622      	mov	r2, r4
   d433a:	781b      	ldrb	r3, [r3, #0]
   d433c:	e7d3      	b.n	d42e6 <_Z14UbidotsHandlerPKcS0_+0x16>
   d433e:	bf00      	nop
   d4340:	2003e56c 	.word	0x2003e56c
   d4344:	2003e421 	.word	0x2003e421
   d4348:	000daa67 	.word	0x000daa67
   d434c:	000daa6f 	.word	0x000daa6f
   d4350:	2003e4dc 	.word	0x2003e4dc
   d4354:	000daa7c 	.word	0x000daa7c
   d4358:	000daa8e 	.word	0x000daa8e
   d435c:	2003e428 	.word	0x2003e428
   d4360:	2003e440 	.word	0x2003e440
   d4364:	2003e468 	.word	0x2003e468

000d4368 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4368:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d436a:	4916      	ldr	r1, [pc, #88]	; (d43c4 <_Z14setVerboseMode6String+0x5c>)
   d436c:	4605      	mov	r5, r0
   d436e:	f003 fa5c 	bl	d782a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4372:	4604      	mov	r4, r0
   d4374:	b188      	cbz	r0, d439a <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d4376:	4b14      	ldr	r3, [pc, #80]	; (d43c8 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4378:	4a14      	ldr	r2, [pc, #80]	; (d43cc <_Z14setVerboseMode6String+0x64>)
   d437a:	4915      	ldr	r1, [pc, #84]	; (d43d0 <_Z14setVerboseMode6String+0x68>)
   d437c:	4815      	ldr	r0, [pc, #84]	; (d43d4 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d437e:	2401      	movs	r4, #1
   d4380:	725c      	strb	r4, [r3, #9]
   d4382:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4384:	f88d 3000 	strb.w	r3, [sp]
   d4388:	4b13      	ldr	r3, [pc, #76]	; (d43d8 <_Z14setVerboseMode6String+0x70>)
   d438a:	781b      	ldrb	r3, [r3, #0]
   d438c:	f7ff ff93 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    systemStatusWriteNeeded = true;
   d4390:	4b12      	ldr	r3, [pc, #72]	; (d43dc <_Z14setVerboseMode6String+0x74>)
    return 1;
   d4392:	4620      	mov	r0, r4
    systemStatusWriteNeeded = true;
   d4394:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    systemStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d4396:	b003      	add	sp, #12
   d4398:	bd30      	pop	{r4, r5, pc}
   d439a:	4911      	ldr	r1, [pc, #68]	; (d43e0 <_Z14setVerboseMode6String+0x78>)
   d439c:	4628      	mov	r0, r5
   d439e:	f003 fa44 	bl	d782a <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d43a2:	2800      	cmp	r0, #0
   d43a4:	d0f7      	beq.n	d4396 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d43a6:	4b08      	ldr	r3, [pc, #32]	; (d43c8 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43a8:	4a0e      	ldr	r2, [pc, #56]	; (d43e4 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d43aa:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43ac:	4b0a      	ldr	r3, [pc, #40]	; (d43d8 <_Z14setVerboseMode6String+0x70>)
   d43ae:	f88d 4000 	strb.w	r4, [sp]
   d43b2:	781b      	ldrb	r3, [r3, #0]
   d43b4:	4906      	ldr	r1, [pc, #24]	; (d43d0 <_Z14setVerboseMode6String+0x68>)
   d43b6:	4807      	ldr	r0, [pc, #28]	; (d43d4 <_Z14setVerboseMode6String+0x6c>)
   d43b8:	f7ff ff7d 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    systemStatusWriteNeeded = true;
   d43bc:	4b07      	ldr	r3, [pc, #28]	; (d43dc <_Z14setVerboseMode6String+0x74>)
   d43be:	2001      	movs	r0, #1
   d43c0:	7018      	strb	r0, [r3, #0]
    return 1;
   d43c2:	e7e8      	b.n	d4396 <_Z14setVerboseMode6String+0x2e>
   d43c4:	000daa63 	.word	0x000daa63
   d43c8:	2003e56c 	.word	0x2003e56c
   d43cc:	000daa94 	.word	0x000daa94
   d43d0:	000daab7 	.word	0x000daab7
   d43d4:	2003e4dc 	.word	0x2003e4dc
   d43d8:	2003e421 	.word	0x2003e421
   d43dc:	2003e588 	.word	0x2003e588
   d43e0:	000daaa5 	.word	0x000daaa5
   d43e4:	000daaa7 	.word	0x000daaa7

000d43e8 <_Z16setThirdPartySim6String>:
  updateThresholdValue();
  return 1;
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d43e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43ea:	491d      	ldr	r1, [pc, #116]	; (d4460 <_Z16setThirdPartySim6String+0x78>)
   d43ec:	4604      	mov	r4, r0
   d43ee:	f003 fa1c 	bl	d782a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43f2:	4605      	mov	r5, r0
   d43f4:	b1f8      	cbz	r0, d4436 <_Z16setThirdPartySim6String+0x4e>
  {
    sysStatus.thirdPartySim = true;
   d43f6:	4b1b      	ldr	r3, [pc, #108]	; (d4464 <_Z16setThirdPartySim6String+0x7c>)
    systemStatusWriteNeeded = true;
   d43f8:	4a1b      	ldr	r2, [pc, #108]	; (d4468 <_Z16setThirdPartySim6String+0x80>)
    //Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d43fa:	481c      	ldr	r0, [pc, #112]	; (d446c <_Z16setThirdPartySim6String+0x84>)
    sysStatus.thirdPartySim = true;
   d43fc:	2401      	movs	r4, #1
   d43fe:	705c      	strb	r4, [r3, #1]
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4400:	685b      	ldr	r3, [r3, #4]
    systemStatusWriteNeeded = true;
   d4402:	7014      	strb	r4, [r2, #0]
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4408:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d440c:	4359      	muls	r1, r3
   d440e:	f7ff ff41 	bl	d4294 <_ZN5Timer12changePeriodEjj>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4412:	f002 fa8f 	bl	d6934 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4416:	b910      	cbnz	r0, d441e <_Z16setThirdPartySim6String+0x36>
    return 1;
   d4418:	2001      	movs	r0, #1
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    return 1;
  }
  else return 0;
}
   d441a:	b003      	add	sp, #12
   d441c:	bd30      	pop	{r4, r5, pc}
   d441e:	2300      	movs	r3, #0
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4420:	f88d 3000 	strb.w	r3, [sp]
   d4424:	4b12      	ldr	r3, [pc, #72]	; (d4470 <_Z16setThirdPartySim6String+0x88>)
   d4426:	4a13      	ldr	r2, [pc, #76]	; (d4474 <_Z16setThirdPartySim6String+0x8c>)
   d4428:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d442a:	4913      	ldr	r1, [pc, #76]	; (d4478 <_Z16setThirdPartySim6String+0x90>)
   d442c:	4813      	ldr	r0, [pc, #76]	; (d447c <_Z16setThirdPartySim6String+0x94>)
   d442e:	f7ff ff42 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4432:	4620      	mov	r0, r4
   d4434:	e7f1      	b.n	d441a <_Z16setThirdPartySim6String+0x32>
   d4436:	4912      	ldr	r1, [pc, #72]	; (d4480 <_Z16setThirdPartySim6String+0x98>)
   d4438:	4620      	mov	r0, r4
   d443a:	f003 f9f6 	bl	d782a <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d443e:	2800      	cmp	r0, #0
   d4440:	d0eb      	beq.n	d441a <_Z16setThirdPartySim6String+0x32>
    sysStatus.thirdPartySim = false;
   d4442:	4b08      	ldr	r3, [pc, #32]	; (d4464 <_Z16setThirdPartySim6String+0x7c>)
   d4444:	705d      	strb	r5, [r3, #1]
    systemStatusWriteNeeded = true;
   d4446:	4b08      	ldr	r3, [pc, #32]	; (d4468 <_Z16setThirdPartySim6String+0x80>)
   d4448:	2401      	movs	r4, #1
   d444a:	701c      	strb	r4, [r3, #0]
   d444c:	f002 fa72 	bl	d6934 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4450:	2800      	cmp	r0, #0
   d4452:	d0e1      	beq.n	d4418 <_Z16setThirdPartySim6String+0x30>
   d4454:	4b06      	ldr	r3, [pc, #24]	; (d4470 <_Z16setThirdPartySim6String+0x88>)
   d4456:	f88d 5000 	strb.w	r5, [sp]
   d445a:	781b      	ldrb	r3, [r3, #0]
   d445c:	4a09      	ldr	r2, [pc, #36]	; (d4484 <_Z16setThirdPartySim6String+0x9c>)
   d445e:	e7e4      	b.n	d442a <_Z16setThirdPartySim6String+0x42>
   d4460:	000daa63 	.word	0x000daa63
   d4464:	2003e56c 	.word	0x2003e56c
   d4468:	2003e588 	.word	0x2003e588
   d446c:	2003e48c 	.word	0x2003e48c
   d4470:	2003e421 	.word	0x2003e421
   d4474:	000daabc 	.word	0x000daabc
   d4478:	000daab7 	.word	0x000daab7
   d447c:	2003e4dc 	.word	0x2003e4dc
   d4480:	000daaa5 	.word	0x000daaa5
   d4484:	000daad1 	.word	0x000daad1

000d4488 <_Z12setKeepAlive6String.part.0>:


int setKeepAlive(String command)
   d4488:	b500      	push	{lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.keepAlive = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d448a:	4b0b      	ldr	r3, [pc, #44]	; (d44b8 <_Z12setKeepAlive6String.part.0+0x30>)
   d448c:	4a0b      	ldr	r2, [pc, #44]	; (d44bc <_Z12setKeepAlive6String.part.0+0x34>)
   d448e:	685b      	ldr	r3, [r3, #4]
int setKeepAlive(String command)
   d4490:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d4492:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4496:	a802      	add	r0, sp, #8
   d4498:	f002 fafc 	bl	d6a94 <snprintf>
    publishQueue.publish("Keep Alive",data, PRIVATE);
   d449c:	2300      	movs	r3, #0
   d449e:	f88d 3000 	strb.w	r3, [sp]
   d44a2:	4b07      	ldr	r3, [pc, #28]	; (d44c0 <_Z12setKeepAlive6String.part.0+0x38>)
   d44a4:	4907      	ldr	r1, [pc, #28]	; (d44c4 <_Z12setKeepAlive6String.part.0+0x3c>)
   d44a6:	781b      	ldrb	r3, [r3, #0]
   d44a8:	4807      	ldr	r0, [pc, #28]	; (d44c8 <_Z12setKeepAlive6String.part.0+0x40>)
   d44aa:	aa02      	add	r2, sp, #8
   d44ac:	f7ff ff03 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d44b0:	2001      	movs	r0, #1
   d44b2:	b043      	add	sp, #268	; 0x10c
   d44b4:	f85d fb04 	ldr.w	pc, [sp], #4
   d44b8:	2003e56c 	.word	0x2003e56c
   d44bc:	000daae5 	.word	0x000daae5
   d44c0:	2003e421 	.word	0x2003e421
   d44c4:	000daafe 	.word	0x000daafe
   d44c8:	2003e4dc 	.word	0x2003e4dc

000d44cc <_Z12setKeepAlive6String>:
{
   d44cc:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d44ce:	220a      	movs	r2, #10
   d44d0:	6800      	ldr	r0, [r0, #0]
   d44d2:	a901      	add	r1, sp, #4
   d44d4:	f005 faa8 	bl	d9a28 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d44d8:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44dc:	d80b      	bhi.n	d44f6 <_Z12setKeepAlive6String+0x2a>
  sysStatus.keepAlive = tempTime;
   d44de:	4b08      	ldr	r3, [pc, #32]	; (d4500 <_Z12setKeepAlive6String+0x34>)
   d44e0:	6058      	str	r0, [r3, #4]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d44e2:	4b08      	ldr	r3, [pc, #32]	; (d4504 <_Z12setKeepAlive6String+0x38>)
   d44e4:	2401      	movs	r4, #1
   d44e6:	701c      	strb	r4, [r3, #0]
   d44e8:	f002 fa24 	bl	d6934 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d44ec:	b128      	cbz	r0, d44fa <_Z12setKeepAlive6String+0x2e>
   d44ee:	f7ff ffcb 	bl	d4488 <_Z12setKeepAlive6String.part.0>
}
   d44f2:	b002      	add	sp, #8
   d44f4:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d44f6:	2000      	movs	r0, #0
   d44f8:	e7fb      	b.n	d44f2 <_Z12setKeepAlive6String+0x26>
  return 1;
   d44fa:	4620      	mov	r0, r4
   d44fc:	e7f9      	b.n	d44f2 <_Z12setKeepAlive6String+0x26>
   d44fe:	bf00      	nop
   d4500:	2003e56c 	.word	0x2003e56c
   d4504:	2003e588 	.word	0x2003e588

000d4508 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4508:	b507      	push	{r0, r1, r2, lr}
   d450a:	f002 fa13 	bl	d6934 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d450e:	b148      	cbz	r0, d4524 <_Z18loadSystemDefaultsv+0x1c>
   d4510:	2300      	movs	r3, #0
   d4512:	f88d 3000 	strb.w	r3, [sp]
   d4516:	4b0b      	ldr	r3, [pc, #44]	; (d4544 <_Z18loadSystemDefaultsv+0x3c>)
   d4518:	4a0b      	ldr	r2, [pc, #44]	; (d4548 <_Z18loadSystemDefaultsv+0x40>)
   d451a:	781b      	ldrb	r3, [r3, #0]
   d451c:	490b      	ldr	r1, [pc, #44]	; (d454c <_Z18loadSystemDefaultsv+0x44>)
   d451e:	480c      	ldr	r0, [pc, #48]	; (d4550 <_Z18loadSystemDefaultsv+0x48>)
   d4520:	f7ff fec9 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 600;
   d4524:	4a0b      	ldr	r2, [pc, #44]	; (d4554 <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4526:	480c      	ldr	r0, [pc, #48]	; (d4558 <_Z18loadSystemDefaultsv+0x50>)
   d4528:	f44f 7316 	mov.w	r3, #600	; 0x258
   d452c:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d452e:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d4530:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d4532:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d4534:	7293      	strb	r3, [r2, #10]
   d4536:	231c      	movs	r3, #28
  sysStatus.structuresVersion = 1;
   d4538:	8011      	strh	r1, [r2, #0]
}
   d453a:	b003      	add	sp, #12
   d453c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4540:	f001 b815 	b.w	d556e <_ZN6MB85RC9writeDataEjPKhj>
   d4544:	2003e421 	.word	0x2003e421
   d4548:	000dab09 	.word	0x000dab09
   d454c:	000daab7 	.word	0x000daab7
   d4550:	2003e4dc 	.word	0x2003e4dc
   d4554:	2003e56c 	.word	0x2003e56c
   d4558:	2003e46c 	.word	0x2003e46c

000d455c <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d455c:	b507      	push	{r0, r1, r2, lr}
   d455e:	f002 f9e9 	bl	d6934 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   d4562:	b148      	cbz	r0, d4578 <_Z17loadAlertDefaultsv+0x1c>
   d4564:	2300      	movs	r3, #0
   d4566:	f88d 3000 	strb.w	r3, [sp]
   d456a:	4b0c      	ldr	r3, [pc, #48]	; (d459c <_Z17loadAlertDefaultsv+0x40>)
   d456c:	4a0c      	ldr	r2, [pc, #48]	; (d45a0 <_Z17loadAlertDefaultsv+0x44>)
   d456e:	781b      	ldrb	r3, [r3, #0]
   d4570:	490c      	ldr	r1, [pc, #48]	; (d45a4 <_Z17loadAlertDefaultsv+0x48>)
   d4572:	480d      	ldr	r0, [pc, #52]	; (d45a8 <_Z17loadAlertDefaultsv+0x4c>)
   d4574:	f7ff fe9f 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  alertsStatus.upperTemperatureThreshold = 30;
   d4578:	4a0c      	ldr	r2, [pc, #48]	; (d45ac <_Z17loadAlertDefaultsv+0x50>)
   d457a:	4b0d      	ldr	r3, [pc, #52]	; (d45b0 <_Z17loadAlertDefaultsv+0x54>)
   d457c:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   d457e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d4582:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   d4584:	4b0b      	ldr	r3, [pc, #44]	; (d45b4 <_Z17loadAlertDefaultsv+0x58>)
   d4586:	6113      	str	r3, [r2, #16]
   d4588:	480b      	ldr	r0, [pc, #44]	; (d45b8 <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   d458a:	4b0c      	ldr	r3, [pc, #48]	; (d45bc <_Z17loadAlertDefaultsv+0x60>)
   d458c:	6153      	str	r3, [r2, #20]
   d458e:	2150      	movs	r1, #80	; 0x50
   d4590:	2318      	movs	r3, #24
}
   d4592:	b003      	add	sp, #12
   d4594:	f85d eb04 	ldr.w	lr, [sp], #4
   d4598:	f000 bfe9 	b.w	d556e <_ZN6MB85RC9writeDataEjPKhj>
   d459c:	2003e421 	.word	0x2003e421
   d45a0:	000dab21 	.word	0x000dab21
   d45a4:	000daab7 	.word	0x000daab7
   d45a8:	2003e4dc 	.word	0x2003e4dc
   d45ac:	2003e428 	.word	0x2003e428
   d45b0:	41f00000 	.word	0x41f00000
   d45b4:	42b40000 	.word	0x42b40000
   d45b8:	2003e46c 	.word	0x2003e46c
   d45bc:	40a00000 	.word	0x40a00000

000d45c0 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d45c0:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d45c2:	4c12      	ldr	r4, [pc, #72]	; (d460c <_Z17checkSystemValuesv+0x4c>)
   d45c4:	7a23      	ldrb	r3, [r4, #8]
   d45c6:	2b01      	cmp	r3, #1
   d45c8:	d904      	bls.n	d45d4 <_Z17checkSystemValuesv+0x14>
   d45ca:	f002 f9b3 	bl	d6934 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d45ce:	b1d8      	cbz	r0, d4608 <_Z17checkSystemValuesv+0x48>
   d45d0:	2301      	movs	r3, #1
   d45d2:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d45d4:	6863      	ldr	r3, [r4, #4]
   d45d6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d45da:	bf84      	itt	hi
   d45dc:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d45e0:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d45e2:	7a63      	ldrb	r3, [r4, #9]
   d45e4:	2b01      	cmp	r3, #1
   d45e6:	bf84      	itt	hi
   d45e8:	2300      	movhi	r3, #0
   d45ea:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d45ec:	7aa3      	ldrb	r3, [r4, #10]
   d45ee:	2b01      	cmp	r3, #1
   d45f0:	bf84      	itt	hi
   d45f2:	2300      	movhi	r3, #0
   d45f4:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d45f6:	6963      	ldr	r3, [r4, #20]
   d45f8:	2bff      	cmp	r3, #255	; 0xff
   d45fa:	bf84      	itt	hi
   d45fc:	2300      	movhi	r3, #0
   d45fe:	6163      	strhi	r3, [r4, #20]
  systemStatusWriteNeeded = true;
   d4600:	4b03      	ldr	r3, [pc, #12]	; (d4610 <_Z17checkSystemValuesv+0x50>)
   d4602:	2201      	movs	r2, #1
   d4604:	701a      	strb	r2, [r3, #0]
}
   d4606:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4608:	7220      	strb	r0, [r4, #8]
   d460a:	e7e3      	b.n	d45d4 <_Z17checkSystemValuesv+0x14>
   d460c:	2003e56c 	.word	0x2003e56c
   d4610:	2003e588 	.word	0x2003e588

000d4614 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0 || alertsStatus.lowerTemperatureThreshold > 20) alertsStatus.lowerTemperatureThreshold = 3;
   d4614:	4b22      	ldr	r3, [pc, #136]	; (d46a0 <_Z17checkAlertsValuesv+0x8c>)
   d4616:	ed93 7a03 	vldr	s14, [r3, #12]
   d461a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4622:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4626:	d404      	bmi.n	d4632 <_Z17checkAlertsValuesv+0x1e>
   d4628:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4630:	dd01      	ble.n	d4636 <_Z17checkAlertsValuesv+0x22>
   d4632:	4a1c      	ldr	r2, [pc, #112]	; (d46a4 <_Z17checkAlertsValuesv+0x90>)
   d4634:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20 || alertsStatus.lowerTemperatureThreshold > 60) alertsStatus.lowerTemperatureThreshold = 30;
   d4636:	ed93 7a02 	vldr	s14, [r3, #8]
   d463a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4642:	d408      	bmi.n	d4656 <_Z17checkAlertsValuesv+0x42>
   d4644:	edd3 6a03 	vldr	s13, [r3, #12]
   d4648:	ed9f 7a17 	vldr	s14, [pc, #92]	; d46a8 <_Z17checkAlertsValuesv+0x94>
   d464c:	eef4 6ac7 	vcmpe.f32	s13, s14
   d4650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4654:	dd01      	ble.n	d465a <_Z17checkAlertsValuesv+0x46>
   d4656:	4a15      	ldr	r2, [pc, #84]	; (d46ac <_Z17checkAlertsValuesv+0x98>)
   d4658:	60da      	str	r2, [r3, #12]
  if (alertsStatus.lowerHumidityThreshold < 0 || alertsStatus.lowerHumidityThreshold > 20) alertsStatus.lowerHumidityThreshold = 13;
   d465a:	ed93 7a05 	vldr	s14, [r3, #20]
   d465e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4666:	d404      	bmi.n	d4672 <_Z17checkAlertsValuesv+0x5e>
   d4668:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4670:	dd01      	ble.n	d4676 <_Z17checkAlertsValuesv+0x62>
   d4672:	4a0f      	ldr	r2, [pc, #60]	; (d46b0 <_Z17checkAlertsValuesv+0x9c>)
   d4674:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20 || alertsStatus.upperHumidityThreshold > 90) alertsStatus.upperHumidityThreshold = 30;
   d4676:	ed93 7a04 	vldr	s14, [r3, #16]
   d467a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4682:	d406      	bmi.n	d4692 <_Z17checkAlertsValuesv+0x7e>
   d4684:	eddf 7a0b 	vldr	s15, [pc, #44]	; d46b4 <_Z17checkAlertsValuesv+0xa0>
   d4688:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4690:	dd01      	ble.n	d4696 <_Z17checkAlertsValuesv+0x82>
   d4692:	4a06      	ldr	r2, [pc, #24]	; (d46ac <_Z17checkAlertsValuesv+0x98>)
   d4694:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   d4696:	4b08      	ldr	r3, [pc, #32]	; (d46b8 <_Z17checkAlertsValuesv+0xa4>)
   d4698:	2201      	movs	r2, #1
   d469a:	701a      	strb	r2, [r3, #0]
}
   d469c:	4770      	bx	lr
   d469e:	bf00      	nop
   d46a0:	2003e428 	.word	0x2003e428
   d46a4:	40400000 	.word	0x40400000
   d46a8:	42700000 	.word	0x42700000
   d46ac:	41f00000 	.word	0x41f00000
   d46b0:	41500000 	.word	0x41500000
   d46b4:	42b40000 	.word	0x42b40000
   d46b8:	2003e440 	.word	0x2003e440

000d46bc <_Z11petWatchdogv>:
{
   d46bc:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
   d46be:	2101      	movs	r1, #1
   d46c0:	2005      	movs	r0, #5
   d46c2:	f003 fca8 	bl	d8016 <digitalWrite>
  digitalWrite(donePin, LOW);
   d46c6:	2100      	movs	r1, #0
   d46c8:	2005      	movs	r0, #5
   d46ca:	f003 fca4 	bl	d8016 <digitalWrite>
  watchdogFlag = false;
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <_Z11petWatchdogv+0x1c>)
   d46d0:	2200      	movs	r2, #0
   d46d2:	701a      	strb	r2, [r3, #0]
}
   d46d4:	bd08      	pop	{r3, pc}
   d46d6:	bf00      	nop
   d46d8:	2003e5c9 	.word	0x2003e5c9

000d46dc <_Z9sendEventv>:
{
   d46dc:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d46de:	4b14      	ldr	r3, [pc, #80]	; (d4730 <_Z9sendEventv+0x54>)
{
   d46e0:	b0a1      	sub	sp, #132	; 0x84
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d46e2:	699a      	ldr	r2, [r3, #24]
   d46e4:	9204      	str	r2, [sp, #16]
   d46e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   d46ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d46ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   d46f2:	2164      	movs	r1, #100	; 0x64
   d46f4:	e9cd 2300 	strd	r2, r3, [sp]
   d46f8:	a807      	add	r0, sp, #28
   d46fa:	4a0e      	ldr	r2, [pc, #56]	; (d4734 <_Z9sendEventv+0x58>)
   d46fc:	f002 f9ca 	bl	d6a94 <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   d4700:	2300      	movs	r3, #0
   d4702:	f88d 3000 	strb.w	r3, [sp]
   d4706:	4b0c      	ldr	r3, [pc, #48]	; (d4738 <_Z9sendEventv+0x5c>)
   d4708:	490c      	ldr	r1, [pc, #48]	; (d473c <_Z9sendEventv+0x60>)
   d470a:	781b      	ldrb	r3, [r3, #0]
   d470c:	480c      	ldr	r0, [pc, #48]	; (d4740 <_Z9sendEventv+0x64>)
   d470e:	aa07      	add	r2, sp, #28
   d4710:	f7ff fdd1 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d4714:	f003 fa62 	bl	d7bdc <_ZN9TimeClass4hourEv>
   d4718:	4b0a      	ldr	r3, [pc, #40]	; (d4744 <_Z9sendEventv+0x68>)
   d471a:	6018      	str	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d471c:	4b0a      	ldr	r3, [pc, #40]	; (d4748 <_Z9sendEventv+0x6c>)
   d471e:	2201      	movs	r2, #1
   d4720:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4722:	f001 ff27 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4726:	4b09      	ldr	r3, [pc, #36]	; (d474c <_Z9sendEventv+0x70>)
   d4728:	6018      	str	r0, [r3, #0]
}
   d472a:	b021      	add	sp, #132	; 0x84
   d472c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4730:	2003e538 	.word	0x2003e538
   d4734:	000dab38 	.word	0x000dab38
   d4738:	2003e421 	.word	0x2003e421
   d473c:	000dab6d 	.word	0x000dab6d
   d4740:	2003e4dc 	.word	0x2003e4dc
   d4744:	2003e464 	.word	0x2003e464
   d4748:	2003e468 	.word	0x2003e468
   d474c:	2003e5cc 	.word	0x2003e5cc

000d4750 <_Z8blinkLEDi>:
{
   d4750:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   d4752:	4d0b      	ldr	r5, [pc, #44]	; (d4780 <_Z8blinkLEDi+0x30>)
{
   d4754:	4604      	mov	r4, r0
   d4756:	f001 ff0d 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   d475a:	682b      	ldr	r3, [r5, #0]
   d475c:	1ac0      	subs	r0, r0, r3
   d475e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4762:	d90c      	bls.n	d477e <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   d4764:	b2a4      	uxth	r4, r4
   d4766:	4620      	mov	r0, r4
   d4768:	f003 fc6e 	bl	d8048 <digitalRead>
   d476c:	fab0 f180 	clz	r1, r0
   d4770:	0949      	lsrs	r1, r1, #5
   d4772:	4620      	mov	r0, r4
   d4774:	f003 fc4f 	bl	d8016 <digitalWrite>
   d4778:	f001 fefc 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   d477c:	6028      	str	r0, [r5, #0]
}
   d477e:	bd38      	pop	{r3, r4, r5, pc}
   d4780:	2003e424 	.word	0x2003e424

000d4784 <_Z22publishStateTransitionv>:
{
   d4784:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4786:	4d13      	ldr	r5, [pc, #76]	; (d47d4 <_Z22publishStateTransitionv+0x50>)
   d4788:	4c13      	ldr	r4, [pc, #76]	; (d47d8 <_Z22publishStateTransitionv+0x54>)
   d478a:	4914      	ldr	r1, [pc, #80]	; (d47dc <_Z22publishStateTransitionv+0x58>)
   d478c:	782a      	ldrb	r2, [r5, #0]
   d478e:	7820      	ldrb	r0, [r4, #0]
{
   d4790:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4792:	231a      	movs	r3, #26
   d4794:	fb03 1202 	mla	r2, r3, r2, r1
   d4798:	9200      	str	r2, [sp, #0]
   d479a:	fb03 1300 	mla	r3, r3, r0, r1
   d479e:	4a10      	ldr	r2, [pc, #64]	; (d47e0 <_Z22publishStateTransitionv+0x5c>)
   d47a0:	2128      	movs	r1, #40	; 0x28
   d47a2:	a802      	add	r0, sp, #8
   d47a4:	f002 f976 	bl	d6a94 <snprintf>
  oldState = state;
   d47a8:	782b      	ldrb	r3, [r5, #0]
   d47aa:	7023      	strb	r3, [r4, #0]
   d47ac:	f002 f8c2 	bl	d6934 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d47b0:	b148      	cbz	r0, d47c6 <_Z22publishStateTransitionv+0x42>
   d47b2:	2300      	movs	r3, #0
    publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d47b4:	f88d 3000 	strb.w	r3, [sp]
   d47b8:	4b0a      	ldr	r3, [pc, #40]	; (d47e4 <_Z22publishStateTransitionv+0x60>)
   d47ba:	490b      	ldr	r1, [pc, #44]	; (d47e8 <_Z22publishStateTransitionv+0x64>)
   d47bc:	781b      	ldrb	r3, [r3, #0]
   d47be:	480b      	ldr	r0, [pc, #44]	; (d47ec <_Z22publishStateTransitionv+0x68>)
   d47c0:	aa02      	add	r2, sp, #8
   d47c2:	f7ff fd78 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d47c6:	f003 fb03 	bl	d7dd0 <_Z16_fetch_usbserialv>
   d47ca:	a902      	add	r1, sp, #8
   d47cc:	f002 ff6d 	bl	d76aa <_ZN5Print7printlnEPKc>
}
   d47d0:	b00d      	add	sp, #52	; 0x34
   d47d2:	bd30      	pop	{r4, r5, pc}
   d47d4:	2003e568 	.word	0x2003e568
   d47d8:	2003e4d8 	.word	0x2003e4d8
   d47dc:	2003e168 	.word	0x2003e168
   d47e0:	000dab83 	.word	0x000dab83
   d47e4:	2003e421 	.word	0x2003e421
   d47e8:	000dab91 	.word	0x000dab91
   d47ec:	2003e4dc 	.word	0x2003e4dc

000d47f0 <_Z20updateThresholdValuev>:

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   d47f0:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   d47f2:	4c17      	ldr	r4, [pc, #92]	; (d4850 <_Z20updateThresholdValuev+0x60>)
   d47f4:	68a0      	ldr	r0, [r4, #8]
   d47f6:	f003 fded 	bl	d83d4 <__aeabi_f2d>
   d47fa:	4a16      	ldr	r2, [pc, #88]	; (d4854 <_Z20updateThresholdValuev+0x64>)
   d47fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4800:	2118      	movs	r1, #24
   d4802:	4815      	ldr	r0, [pc, #84]	; (d4858 <_Z20updateThresholdValuev+0x68>)
   d4804:	f002 f946 	bl	d6a94 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   d4808:	68e0      	ldr	r0, [r4, #12]
   d480a:	f003 fde3 	bl	d83d4 <__aeabi_f2d>
   d480e:	4a13      	ldr	r2, [pc, #76]	; (d485c <_Z20updateThresholdValuev+0x6c>)
   d4810:	e9cd 0100 	strd	r0, r1, [sp]
   d4814:	2118      	movs	r1, #24
   d4816:	4812      	ldr	r0, [pc, #72]	; (d4860 <_Z20updateThresholdValuev+0x70>)
   d4818:	f002 f93c 	bl	d6a94 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   d481c:	6920      	ldr	r0, [r4, #16]
   d481e:	f003 fdd9 	bl	d83d4 <__aeabi_f2d>
   d4822:	4a10      	ldr	r2, [pc, #64]	; (d4864 <_Z20updateThresholdValuev+0x74>)
   d4824:	e9cd 0100 	strd	r0, r1, [sp]
   d4828:	2118      	movs	r1, #24
   d482a:	480f      	ldr	r0, [pc, #60]	; (d4868 <_Z20updateThresholdValuev+0x78>)
   d482c:	f002 f932 	bl	d6a94 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   d4830:	6960      	ldr	r0, [r4, #20]
   d4832:	f003 fdcf 	bl	d83d4 <__aeabi_f2d>
   d4836:	4a0d      	ldr	r2, [pc, #52]	; (d486c <_Z20updateThresholdValuev+0x7c>)
   d4838:	e9cd 0100 	strd	r0, r1, [sp]
   d483c:	2118      	movs	r1, #24
   d483e:	480c      	ldr	r0, [pc, #48]	; (d4870 <_Z20updateThresholdValuev+0x80>)
   d4840:	f002 f928 	bl	d6a94 <snprintf>
    alertsStatusWriteNeeded = true;
   d4844:	4b0b      	ldr	r3, [pc, #44]	; (d4874 <_Z20updateThresholdValuev+0x84>)
   d4846:	2201      	movs	r2, #1
   d4848:	701a      	strb	r2, [r3, #0]
} 
   d484a:	b002      	add	sp, #8
   d484c:	bd10      	pop	{r4, pc}
   d484e:	bf00      	nop
   d4850:	2003e428 	.word	0x2003e428
   d4854:	000daba2 	.word	0x000daba2
   d4858:	2003e5b1 	.word	0x2003e5b1
   d485c:	000dabb3 	.word	0x000dabb3
   d4860:	2003e4c0 	.word	0x2003e4c0
   d4864:	000dabc4 	.word	0x000dabc4
   d4868:	2003e599 	.word	0x2003e599
   d486c:	000dabd8 	.word	0x000dabd8
   d4870:	2003e4a8 	.word	0x2003e4a8
   d4874:	2003e440 	.word	0x2003e440

000d4878 <_Z17setUpperTempLimit6String>:
{
   d4878:	b500      	push	{lr}
   d487a:	b089      	sub	sp, #36	; 0x24
   d487c:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d487e:	f002 ffff 	bl	d7880 <_ZNK6String7toFloatEv>
   d4882:	4b0d      	ldr	r3, [pc, #52]	; (d48b8 <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d4884:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d4886:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d488a:	a804      	add	r0, sp, #16
   d488c:	f002 ffc2 	bl	d7814 <_ZN6StringC1ERKS_>
   d4890:	2300      	movs	r3, #0
   d4892:	f88d 3000 	strb.w	r3, [sp]
   d4896:	4b09      	ldr	r3, [pc, #36]	; (d48bc <_Z17setUpperTempLimit6String+0x44>)
   d4898:	9a04      	ldr	r2, [sp, #16]
   d489a:	781b      	ldrb	r3, [r3, #0]
   d489c:	4908      	ldr	r1, [pc, #32]	; (d48c0 <_Z17setUpperTempLimit6String+0x48>)
   d489e:	4809      	ldr	r0, [pc, #36]	; (d48c4 <_Z17setUpperTempLimit6String+0x4c>)
   d48a0:	f7ff fd09 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d48a4:	a804      	add	r0, sp, #16
   d48a6:	f002 ff47 	bl	d7738 <_ZN6StringD1Ev>
  updateThresholdValue();
   d48aa:	f7ff ffa1 	bl	d47f0 <_Z20updateThresholdValuev>
}
   d48ae:	2001      	movs	r0, #1
   d48b0:	b009      	add	sp, #36	; 0x24
   d48b2:	f85d fb04 	ldr.w	pc, [sp], #4
   d48b6:	bf00      	nop
   d48b8:	2003e428 	.word	0x2003e428
   d48bc:	2003e421 	.word	0x2003e421
   d48c0:	000dabed 	.word	0x000dabed
   d48c4:	2003e4dc 	.word	0x2003e4dc

000d48c8 <_Z17setLowerTempLimit6String>:
{
   d48c8:	b500      	push	{lr}
   d48ca:	b089      	sub	sp, #36	; 0x24
   d48cc:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d48ce:	f002 ffd7 	bl	d7880 <_ZNK6String7toFloatEv>
   d48d2:	4b0d      	ldr	r3, [pc, #52]	; (d4908 <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d48d4:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d48d6:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d48da:	a804      	add	r0, sp, #16
   d48dc:	f002 ff9a 	bl	d7814 <_ZN6StringC1ERKS_>
   d48e0:	2300      	movs	r3, #0
   d48e2:	f88d 3000 	strb.w	r3, [sp]
   d48e6:	4b09      	ldr	r3, [pc, #36]	; (d490c <_Z17setLowerTempLimit6String+0x44>)
   d48e8:	9a04      	ldr	r2, [sp, #16]
   d48ea:	781b      	ldrb	r3, [r3, #0]
   d48ec:	4908      	ldr	r1, [pc, #32]	; (d4910 <_Z17setLowerTempLimit6String+0x48>)
   d48ee:	4809      	ldr	r0, [pc, #36]	; (d4914 <_Z17setLowerTempLimit6String+0x4c>)
   d48f0:	f7ff fce1 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d48f4:	a804      	add	r0, sp, #16
   d48f6:	f002 ff1f 	bl	d7738 <_ZN6StringD1Ev>
  updateThresholdValue();
   d48fa:	f7ff ff79 	bl	d47f0 <_Z20updateThresholdValuev>
}
   d48fe:	2001      	movs	r0, #1
   d4900:	b009      	add	sp, #36	; 0x24
   d4902:	f85d fb04 	ldr.w	pc, [sp], #4
   d4906:	bf00      	nop
   d4908:	2003e428 	.word	0x2003e428
   d490c:	2003e421 	.word	0x2003e421
   d4910:	000dac01 	.word	0x000dac01
   d4914:	2003e4dc 	.word	0x2003e4dc

000d4918 <_Z21setUpperHumidityLimit6String>:
{
   d4918:	b500      	push	{lr}
   d491a:	b089      	sub	sp, #36	; 0x24
   d491c:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d491e:	f002 ffaf 	bl	d7880 <_ZNK6String7toFloatEv>
   d4922:	4b0d      	ldr	r3, [pc, #52]	; (d4958 <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d4924:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d4926:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d492a:	a804      	add	r0, sp, #16
   d492c:	f002 ff72 	bl	d7814 <_ZN6StringC1ERKS_>
   d4930:	2300      	movs	r3, #0
   d4932:	f88d 3000 	strb.w	r3, [sp]
   d4936:	4b09      	ldr	r3, [pc, #36]	; (d495c <_Z21setUpperHumidityLimit6String+0x44>)
   d4938:	9a04      	ldr	r2, [sp, #16]
   d493a:	781b      	ldrb	r3, [r3, #0]
   d493c:	4908      	ldr	r1, [pc, #32]	; (d4960 <_Z21setUpperHumidityLimit6String+0x48>)
   d493e:	4809      	ldr	r0, [pc, #36]	; (d4964 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4940:	f7ff fcb9 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4944:	a804      	add	r0, sp, #16
   d4946:	f002 fef7 	bl	d7738 <_ZN6StringD1Ev>
  updateThresholdValue();
   d494a:	f7ff ff51 	bl	d47f0 <_Z20updateThresholdValuev>
}
   d494e:	2001      	movs	r0, #1
   d4950:	b009      	add	sp, #36	; 0x24
   d4952:	f85d fb04 	ldr.w	pc, [sp], #4
   d4956:	bf00      	nop
   d4958:	2003e428 	.word	0x2003e428
   d495c:	2003e421 	.word	0x2003e421
   d4960:	000dabed 	.word	0x000dabed
   d4964:	2003e4dc 	.word	0x2003e4dc

000d4968 <_Z21setLowerHumidityLimit6String>:
{
   d4968:	b500      	push	{lr}
   d496a:	b089      	sub	sp, #36	; 0x24
   d496c:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d496e:	f002 ff87 	bl	d7880 <_ZNK6String7toFloatEv>
   d4972:	4b0d      	ldr	r3, [pc, #52]	; (d49a8 <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d4974:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d4976:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d497a:	a804      	add	r0, sp, #16
   d497c:	f002 ff4a 	bl	d7814 <_ZN6StringC1ERKS_>
   d4980:	2300      	movs	r3, #0
   d4982:	f88d 3000 	strb.w	r3, [sp]
   d4986:	4b09      	ldr	r3, [pc, #36]	; (d49ac <_Z21setLowerHumidityLimit6String+0x44>)
   d4988:	9a04      	ldr	r2, [sp, #16]
   d498a:	781b      	ldrb	r3, [r3, #0]
   d498c:	4908      	ldr	r1, [pc, #32]	; (d49b0 <_Z21setLowerHumidityLimit6String+0x48>)
   d498e:	4809      	ldr	r0, [pc, #36]	; (d49b4 <_Z21setLowerHumidityLimit6String+0x4c>)
   d4990:	f7ff fc91 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4994:	a804      	add	r0, sp, #16
   d4996:	f002 fecf 	bl	d7738 <_ZN6StringD1Ev>
  updateThresholdValue();
   d499a:	f7ff ff29 	bl	d47f0 <_Z20updateThresholdValuev>
}
   d499e:	2001      	movs	r0, #1
   d49a0:	b009      	add	sp, #36	; 0x24
   d49a2:	f85d fb04 	ldr.w	pc, [sp], #4
   d49a6:	bf00      	nop
   d49a8:	2003e428 	.word	0x2003e428
   d49ac:	2003e421 	.word	0x2003e421
   d49b0:	000dac01 	.word	0x000dac01
   d49b4:	2003e4dc 	.word	0x2003e4dc

000d49b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d49b8:	b530      	push	{r4, r5, lr}
   d49ba:	b085      	sub	sp, #20
   d49bc:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d49be:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d49c0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d49c2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d49c4:	f001 ff36 	bl	d6834 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d49c8:	b9b0      	cbnz	r0, d49f8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d49ca:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d49cc:	b10c      	cbz	r4, d49d2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d49ce:	6923      	ldr	r3, [r4, #16]
   d49d0:	b923      	cbnz	r3, d49dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d49d2:	4a0a      	ldr	r2, [pc, #40]	; (d49fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d49d4:	2100      	movs	r1, #0
   d49d6:	200a      	movs	r0, #10
   d49d8:	f001 ff1c 	bl	d6814 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d49dc:	2300      	movs	r3, #0
   d49de:	f8ad 3006 	strh.w	r3, [sp, #6]
   d49e2:	230c      	movs	r3, #12
   d49e4:	f8ad 3004 	strh.w	r3, [sp, #4]
   d49e8:	2304      	movs	r3, #4
   d49ea:	9303      	str	r3, [sp, #12]
   d49ec:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d49ee:	6923      	ldr	r3, [r4, #16]
   d49f0:	aa01      	add	r2, sp, #4
   d49f2:	2101      	movs	r1, #1
   d49f4:	4620      	mov	r0, r4
   d49f6:	4798      	blx	r3
}
   d49f8:	b005      	add	sp, #20
   d49fa:	bd30      	pop	{r4, r5, pc}
   d49fc:	000d6565 	.word	0x000d6565

000d4a00 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   d4a00:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a02:	4d0e      	ldr	r5, [pc, #56]	; (d4a3c <_Z17getBatteryContextv+0x3c>)
   d4a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4a06:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a08:	ac01      	add	r4, sp, #4
   d4a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4a10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4a14:	4669      	mov	r1, sp
   d4a16:	2007      	movs	r0, #7
   d4a18:	f7ff ffce 	bl	d49b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4a1c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4a1e:	bfa8      	it	ge
   d4a20:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4a22:	4a07      	ldr	r2, [pc, #28]	; (d4a40 <_Z17getBatteryContextv+0x40>)
   d4a24:	ab08      	add	r3, sp, #32
   d4a26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4a2a:	2110      	movs	r1, #16
   d4a2c:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4a30:	4804      	ldr	r0, [pc, #16]	; (d4a44 <_Z17getBatteryContextv+0x44>)
   d4a32:	f002 f82f 	bl	d6a94 <snprintf>
}
   d4a36:	b009      	add	sp, #36	; 0x24
   d4a38:	bd30      	pop	{r4, r5, pc}
   d4a3a:	bf00      	nop
   d4a3c:	000dadc4 	.word	0x000dadc4
   d4a40:	000dafac 	.word	0x000dafac
   d4a44:	2003e441 	.word	0x2003e441

000d4a48 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4a48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  sensorData.validData = false;
   d4a4c:	4d49      	ldr	r5, [pc, #292]	; (d4b74 <_Z16takeMeasurementsv+0x12c>)
  if (sht31.readTemperature()){
   d4a4e:	484a      	ldr	r0, [pc, #296]	; (d4b78 <_Z16takeMeasurementsv+0x130>)
  sensorData.validData = false;
   d4a50:	2400      	movs	r4, #0
   d4a52:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   d4a54:	f000 fcb4 	bl	d53c0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4a58:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a60:	d074      	beq.n	d4b4c <_Z16takeMeasurementsv+0x104>
    sensorData.temperatureInC = sht31.readTemperature();
   d4a62:	4845      	ldr	r0, [pc, #276]	; (d4b78 <_Z16takeMeasurementsv+0x130>)
   d4a64:	f000 fcac 	bl	d53c0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4a68:	ee10 0a10 	vmov	r0, s0
   d4a6c:	f003 fcb2 	bl	d83d4 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d4a70:	4a42      	ldr	r2, [pc, #264]	; (d4b7c <_Z16takeMeasurementsv+0x134>)
    sensorData.temperatureInC = sht31.readTemperature();
   d4a72:	e9c5 0102 	strd	r0, r1, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d4a76:	e9cd 0100 	strd	r0, r1, [sp]
   d4a7a:	2110      	movs	r1, #16
   d4a7c:	4840      	ldr	r0, [pc, #256]	; (d4b80 <_Z16takeMeasurementsv+0x138>)
   d4a7e:	f002 f809 	bl	d6a94 <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   d4a82:	483d      	ldr	r0, [pc, #244]	; (d4b78 <_Z16takeMeasurementsv+0x130>)
   d4a84:	f000 fcaa 	bl	d53dc <_ZN14Adafruit_SHT3112readHumidityEv>
   d4a88:	ee10 0a10 	vmov	r0, s0
   d4a8c:	f003 fca2 	bl	d83d4 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d4a90:	4a3c      	ldr	r2, [pc, #240]	; (d4b84 <_Z16takeMeasurementsv+0x13c>)
    sensorData.relativeHumidity = sht31.readHumidity();
   d4a92:	e9c5 0104 	strd	r0, r1, [r5, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d4a96:	e9cd 0100 	strd	r0, r1, [sp]
   d4a9a:	2110      	movs	r1, #16
   d4a9c:	483a      	ldr	r0, [pc, #232]	; (d4b88 <_Z16takeMeasurementsv+0x140>)
   d4a9e:	f001 fff9 	bl	d6a94 <snprintf>
   d4aa2:	a903      	add	r1, sp, #12
   d4aa4:	2003      	movs	r0, #3
   d4aa6:	f7ff ff87 	bl	d49b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4aaa:	2800      	cmp	r0, #0
   d4aac:	d15d      	bne.n	d4b6a <_Z16takeMeasurementsv+0x122>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4aae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4ab2:	ee07 3a90 	vmov	s15, r3
   d4ab6:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4abe:	4c33      	ldr	r4, [pc, #204]	; (d4b8c <_Z16takeMeasurementsv+0x144>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4ac0:	4a33      	ldr	r2, [pc, #204]	; (d4b90 <_Z16takeMeasurementsv+0x148>)
   d4ac2:	4834      	ldr	r0, [pc, #208]	; (d4b94 <_Z16takeMeasurementsv+0x14c>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4ac4:	edc5 7a06 	vstr	s15, [r5, #24]
   d4ac8:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4acc:	2110      	movs	r1, #16
   d4ace:	f001 ffe1 	bl	d6a94 <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4ad2:	68e0      	ldr	r0, [r4, #12]
   d4ad4:	f003 fc7e 	bl	d83d4 <__aeabi_f2d>
   d4ad8:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
   d4adc:	4602      	mov	r2, r0
   d4ade:	460b      	mov	r3, r1
   d4ae0:	4630      	mov	r0, r6
   d4ae2:	4639      	mov	r1, r7
   d4ae4:	f003 ff40 	bl	d8968 <__aeabi_dcmplt>
   d4ae8:	46a0      	mov	r8, r4
   d4aea:	2800      	cmp	r0, #0
   d4aec:	d040      	beq.n	d4b70 <_Z16takeMeasurementsv+0x128>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   d4aee:	2401      	movs	r4, #1
   d4af0:	f888 4001 	strb.w	r4, [r8, #1]
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   d4af4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   d4af8:	f003 fc6c 	bl	d83d4 <__aeabi_f2d>
   d4afc:	4602      	mov	r2, r0
   d4afe:	460b      	mov	r3, r1
   d4b00:	4630      	mov	r0, r6
   d4b02:	4639      	mov	r1, r7
   d4b04:	f003 ff4e 	bl	d89a4 <__aeabi_dcmpgt>
   d4b08:	b110      	cbz	r0, d4b10 <_Z16takeMeasurementsv+0xc8>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   d4b0a:	2401      	movs	r4, #1
   d4b0c:	f888 4000 	strb.w	r4, [r8]
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   d4b10:	f8d8 0014 	ldr.w	r0, [r8, #20]
   d4b14:	f003 fc5e 	bl	d83d4 <__aeabi_f2d>
   d4b18:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
   d4b1c:	4602      	mov	r2, r0
   d4b1e:	460b      	mov	r3, r1
   d4b20:	4630      	mov	r0, r6
   d4b22:	4639      	mov	r1, r7
   d4b24:	f003 ff20 	bl	d8968 <__aeabi_dcmplt>
   d4b28:	b110      	cbz	r0, d4b30 <_Z16takeMeasurementsv+0xe8>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   d4b2a:	2401      	movs	r4, #1
   d4b2c:	f888 4003 	strb.w	r4, [r8, #3]
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   d4b30:	f8d8 0010 	ldr.w	r0, [r8, #16]
   d4b34:	f003 fc4e 	bl	d83d4 <__aeabi_f2d>
   d4b38:	4602      	mov	r2, r0
   d4b3a:	460b      	mov	r3, r1
   d4b3c:	4630      	mov	r0, r6
   d4b3e:	4639      	mov	r1, r7
   d4b40:	f003 ff30 	bl	d89a4 <__aeabi_dcmpgt>
   d4b44:	b110      	cbz	r0, d4b4c <_Z16takeMeasurementsv+0x104>
      alertsStatus.upperHumidityThresholdCrossed = true;
   d4b46:	2401      	movs	r4, #1
   d4b48:	f888 4002 	strb.w	r4, [r8, #2]
    sensorData.validData = true;
   d4b4c:	2601      	movs	r6, #1
    getBatteryContext();                   // Check what the battery is doing.
   d4b4e:	f7ff ff57 	bl	d4a00 <_Z17getBatteryContextv>
    sensorData.validData = true;
   d4b52:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   d4b54:	f003 f831 	bl	d7bba <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d4b58:	4b0f      	ldr	r3, [pc, #60]	; (d4b98 <_Z16takeMeasurementsv+0x150>)
    sensorData.timeStamp = Time.now();
   d4b5a:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   d4b5c:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   d4b5e:	4b0f      	ldr	r3, [pc, #60]	; (d4b9c <_Z16takeMeasurementsv+0x154>)
}
   d4b60:	4620      	mov	r0, r4
    alertsStatusWriteNeeded = true;  
   d4b62:	701e      	strb	r6, [r3, #0]
}
   d4b64:	b004      	add	sp, #16
   d4b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1.0f;
   d4b6a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4b6e:	e7a4      	b.n	d4aba <_Z16takeMeasurementsv+0x72>
  bool haveAnyAlertsBeenSet = false;
   d4b70:	4604      	mov	r4, r0
   d4b72:	e7bf      	b.n	d4af4 <_Z16takeMeasurementsv+0xac>
   d4b74:	2003e538 	.word	0x2003e538
   d4b78:	2003e55c 	.word	0x2003e55c
   d4b7c:	000dac15 	.word	0x000dac15
   d4b80:	2003e589 	.word	0x2003e589
   d4b84:	000dac1d 	.word	0x000dac1d
   d4b88:	2003e47c 	.word	0x2003e47c
   d4b8c:	2003e428 	.word	0x2003e428
   d4b90:	000dac25 	.word	0x000dac25
   d4b94:	2003e451 	.word	0x2003e451
   d4b98:	2003e558 	.word	0x2003e558
   d4b9c:	2003e440 	.word	0x2003e440

000d4ba0 <setup>:
{
   d4ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4ba2:	2100      	movs	r1, #0
{
   d4ba4:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4ba6:	2008      	movs	r0, #8
   d4ba8:	f003 fa24 	bl	d7ff4 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4bac:	2101      	movs	r1, #1
   d4bae:	2005      	movs	r0, #5
   d4bb0:	f003 fa20 	bl	d7ff4 <pinMode>
  pinMode(blueLED, OUTPUT);                                                                 // declare the Blue LED Pin as an output
   d4bb4:	2101      	movs	r1, #1
   d4bb6:	2007      	movs	r0, #7
   d4bb8:	f003 fa1c 	bl	d7ff4 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d4bbc:	f7ff fd7e 	bl	d46bc <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d4bc0:	2300      	movs	r3, #0
   d4bc2:	9300      	str	r3, [sp, #0]
   d4bc4:	2201      	movs	r2, #1
   d4bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4bca:	4980      	ldr	r1, [pc, #512]	; (d4dcc <setup+0x22c>)
   d4bcc:	2008      	movs	r0, #8
   d4bce:	f002 fbe9 	bl	d73a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4bd2:	4b7f      	ldr	r3, [pc, #508]	; (d4dd0 <setup+0x230>)
   d4bd4:	aa0a      	add	r2, sp, #40	; 0x28
   d4bd6:	f103 0510 	add.w	r5, r3, #16
   d4bda:	4616      	mov	r6, r2
   d4bdc:	6818      	ldr	r0, [r3, #0]
   d4bde:	6859      	ldr	r1, [r3, #4]
   d4be0:	4614      	mov	r4, r2
   d4be2:	c403      	stmia	r4!, {r0, r1}
   d4be4:	3308      	adds	r3, #8
   d4be6:	42ab      	cmp	r3, r5
   d4be8:	4622      	mov	r2, r4
   d4bea:	d1f7      	bne.n	d4bdc <setup+0x3c>
   d4bec:	8819      	ldrh	r1, [r3, #0]
   d4bee:	789b      	ldrb	r3, [r3, #2]
   d4bf0:	70a3      	strb	r3, [r4, #2]
  state = INITIALIZATION_STATE;
   d4bf2:	4f78      	ldr	r7, [pc, #480]	; (d4dd4 <setup+0x234>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4bf4:	8021      	strh	r1, [r4, #0]
   d4bf6:	222d      	movs	r2, #45	; 0x2d
   d4bf8:	2100      	movs	r1, #0
   d4bfa:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   d4bfe:	2400      	movs	r4, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4c00:	f003 ffde 	bl	d8bc0 <memset>
    static String deviceID(void) { return spark_deviceID(); }
   d4c04:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d4c06:	703c      	strb	r4, [r7, #0]
   d4c08:	f001 fe9c 	bl	d6944 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4c0c:	4623      	mov	r3, r4
   d4c0e:	227d      	movs	r2, #125	; 0x7d
   d4c10:	a91a      	add	r1, sp, #104	; 0x68
   d4c12:	a802      	add	r0, sp, #8
   d4c14:	f002 fe1b 	bl	d784e <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4c18:	4623      	mov	r3, r4
   d4c1a:	4622      	mov	r2, r4
   d4c1c:	e9cd 4400 	strd	r4, r4, [sp]
   d4c20:	496d      	ldr	r1, [pc, #436]	; (d4dd8 <setup+0x238>)
   d4c22:	4d6e      	ldr	r5, [pc, #440]	; (d4ddc <setup+0x23c>)
   d4c24:	a81a      	add	r0, sp, #104	; 0x68
   d4c26:	f001 fe9d 	bl	d6964 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d4c2a:	496d      	ldr	r1, [pc, #436]	; (d4de0 <setup+0x240>)
   d4c2c:	486d      	ldr	r0, [pc, #436]	; (d4de4 <setup+0x244>)
   d4c2e:	f7ff fac0 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c32:	496d      	ldr	r1, [pc, #436]	; (d4de8 <setup+0x248>)
   d4c34:	486d      	ldr	r0, [pc, #436]	; (d4dec <setup+0x24c>)
   d4c36:	f7ff fabc 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c3a:	496d      	ldr	r1, [pc, #436]	; (d4df0 <setup+0x250>)
   d4c3c:	486d      	ldr	r0, [pc, #436]	; (d4df4 <setup+0x254>)
   d4c3e:	f7ff fab8 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c42:	496d      	ldr	r1, [pc, #436]	; (d4df8 <setup+0x258>)
   d4c44:	486d      	ldr	r0, [pc, #436]	; (d4dfc <setup+0x25c>)
   d4c46:	f7ff fab4 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c4a:	496d      	ldr	r1, [pc, #436]	; (d4e00 <setup+0x260>)
   d4c4c:	486d      	ldr	r0, [pc, #436]	; (d4e04 <setup+0x264>)
   d4c4e:	f7ff fab0 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c52:	496d      	ldr	r1, [pc, #436]	; (d4e08 <setup+0x268>)
   d4c54:	486d      	ldr	r0, [pc, #436]	; (d4e0c <setup+0x26c>)
   d4c56:	f7ff faac 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c5a:	496d      	ldr	r1, [pc, #436]	; (d4e10 <setup+0x270>)
   d4c5c:	486d      	ldr	r0, [pc, #436]	; (d4e14 <setup+0x274>)
   d4c5e:	f7ff faa8 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c62:	496d      	ldr	r1, [pc, #436]	; (d4e18 <setup+0x278>)
   d4c64:	486d      	ldr	r0, [pc, #436]	; (d4e1c <setup+0x27c>)
   d4c66:	f7ff faa4 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4c6a:	496d      	ldr	r1, [pc, #436]	; (d4e20 <setup+0x280>)
   d4c6c:	486d      	ldr	r0, [pc, #436]	; (d4e24 <setup+0x284>)
   d4c6e:	f7ff faa0 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4c72:	4623      	mov	r3, r4
   d4c74:	2202      	movs	r2, #2
   d4c76:	496c      	ldr	r1, [pc, #432]	; (d4e28 <setup+0x288>)
   d4c78:	486c      	ldr	r0, [pc, #432]	; (d4e2c <setup+0x28c>)
   d4c7a:	f001 fe43 	bl	d6904 <spark_variable>
        return _function(name, args...);
   d4c7e:	496c      	ldr	r1, [pc, #432]	; (d4e30 <setup+0x290>)
   d4c80:	486c      	ldr	r0, [pc, #432]	; (d4e34 <setup+0x294>)
   d4c82:	f7ff fb01 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4c86:	496c      	ldr	r1, [pc, #432]	; (d4e38 <setup+0x298>)
   d4c88:	486c      	ldr	r0, [pc, #432]	; (d4e3c <setup+0x29c>)
   d4c8a:	f7ff fafd 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4c8e:	496c      	ldr	r1, [pc, #432]	; (d4e40 <setup+0x2a0>)
   d4c90:	486c      	ldr	r0, [pc, #432]	; (d4e44 <setup+0x2a4>)
   d4c92:	f7ff faf9 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4c96:	496c      	ldr	r1, [pc, #432]	; (d4e48 <setup+0x2a8>)
   d4c98:	486c      	ldr	r0, [pc, #432]	; (d4e4c <setup+0x2ac>)
   d4c9a:	f7ff faf5 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4c9e:	496c      	ldr	r1, [pc, #432]	; (d4e50 <setup+0x2b0>)
   d4ca0:	486c      	ldr	r0, [pc, #432]	; (d4e54 <setup+0x2b4>)
   d4ca2:	f7ff faf1 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ca6:	496c      	ldr	r1, [pc, #432]	; (d4e58 <setup+0x2b8>)
   d4ca8:	486c      	ldr	r0, [pc, #432]	; (d4e5c <setup+0x2bc>)
   d4caa:	f7ff faed 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4cae:	496c      	ldr	r1, [pc, #432]	; (d4e60 <setup+0x2c0>)
   d4cb0:	486c      	ldr	r0, [pc, #432]	; (d4e64 <setup+0x2c4>)
   d4cb2:	f7ff fae9 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4cb6:	496c      	ldr	r1, [pc, #432]	; (d4e68 <setup+0x2c8>)
   d4cb8:	486c      	ldr	r0, [pc, #432]	; (d4e6c <setup+0x2cc>)
   d4cba:	f7ff fae5 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d4cbe:	486c      	ldr	r0, [pc, #432]	; (d4e70 <setup+0x2d0>)
   d4cc0:	f001 fa1a 	bl	d60f8 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d4cc4:	4621      	mov	r1, r4
   d4cc6:	486a      	ldr	r0, [pc, #424]	; (d4e70 <setup+0x2d0>)
   d4cc8:	f001 fb53 	bl	d6372 <_ZN8MCP7941010clearAlarmEi>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4ccc:	f002 ff75 	bl	d7bba <_ZN9TimeClass3nowEv>
   d4cd0:	4602      	mov	r2, r0
   d4cd2:	17c3      	asrs	r3, r0, #31
   d4cd4:	a806      	add	r0, sp, #24
   d4cd6:	f002 fe6d 	bl	d79b4 <_ZN9TimeClass7timeStrEx>
   d4cda:	f88d 4000 	strb.w	r4, [sp]
   d4cde:	782b      	ldrb	r3, [r5, #0]
   d4ce0:	9a06      	ldr	r2, [sp, #24]
   d4ce2:	4964      	ldr	r1, [pc, #400]	; (d4e74 <setup+0x2d4>)
   d4ce4:	4864      	ldr	r0, [pc, #400]	; (d4e78 <setup+0x2d8>)
   d4ce6:	f7ff fae6 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4cea:	a806      	add	r0, sp, #24
   d4cec:	f002 fd24 	bl	d7738 <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   d4cf0:	4862      	ldr	r0, [pc, #392]	; (d4e7c <setup+0x2dc>)
   d4cf2:	2144      	movs	r1, #68	; 0x44
   d4cf4:	f000 facd 	bl	d5292 <_ZN14Adafruit_SHT315beginEh>
   d4cf8:	463c      	mov	r4, r7
   d4cfa:	462f      	mov	r7, r5
   d4cfc:	b948      	cbnz	r0, d4d12 <setup+0x172>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4cfe:	4960      	ldr	r1, [pc, #384]	; (d4e80 <setup+0x2e0>)
   d4d00:	4630      	mov	r0, r6
   d4d02:	f003 ff93 	bl	d8c2c <strcpy>
    state = ERROR_STATE;
   d4d06:	2301      	movs	r3, #1
   d4d08:	7023      	strb	r3, [r4, #0]
   d4d0a:	f001 fc33 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4d0e:	4b5d      	ldr	r3, [pc, #372]	; (d4e84 <setup+0x2e4>)
   d4d10:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   d4d12:	485d      	ldr	r0, [pc, #372]	; (d4e88 <setup+0x2e8>)
   d4d14:	f000 fb9e 	bl	d5454 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4d18:	2301      	movs	r3, #1
   d4d1a:	485b      	ldr	r0, [pc, #364]	; (d4e88 <setup+0x2e8>)
   d4d1c:	aa06      	add	r2, sp, #24
   d4d1e:	2100      	movs	r1, #0
   d4d20:	f000 fbda 	bl	d54d8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4d24:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4d28:	2b04      	cmp	r3, #4
   d4d2a:	d041      	beq.n	d4db0 <setup+0x210>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4d2c:	4856      	ldr	r0, [pc, #344]	; (d4e88 <setup+0x2e8>)
   d4d2e:	f000 fb9b 	bl	d5468 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4d32:	4a56      	ldr	r2, [pc, #344]	; (d4e8c <setup+0x2ec>)
   d4d34:	4854      	ldr	r0, [pc, #336]	; (d4e88 <setup+0x2e8>)
   d4d36:	2304      	movs	r3, #4
   d4d38:	2100      	movs	r1, #0
   d4d3a:	f000 fc18 	bl	d556e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4d3e:	2301      	movs	r3, #1
   d4d40:	4851      	ldr	r0, [pc, #324]	; (d4e88 <setup+0x2e8>)
   d4d42:	aa06      	add	r2, sp, #24
   d4d44:	2100      	movs	r1, #0
   d4d46:	f000 fbc7 	bl	d54d8 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4d4a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4d4e:	2b04      	cmp	r3, #4
   d4d50:	d029      	beq.n	d4da6 <setup+0x206>
   d4d52:	2301      	movs	r3, #1
   d4d54:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d4d56:	4d4e      	ldr	r5, [pc, #312]	; (d4e90 <setup+0x2f0>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4d58:	f7ff fc32 	bl	d45c0 <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   d4d5c:	f7ff fc5a 	bl	d4614 <_Z17checkAlertsValuesv>
  if (sysStatus.thirdPartySim) {
   d4d60:	786b      	ldrb	r3, [r5, #1]
   d4d62:	b143      	cbz	r3, d4d76 <setup+0x1d6>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4d64:	686b      	ldr	r3, [r5, #4]
   d4d66:	484b      	ldr	r0, [pc, #300]	; (d4e94 <setup+0x2f4>)
   d4d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4d6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4d70:	4359      	muls	r1, r3
   d4d72:	f7ff fa8f 	bl	d4294 <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d4d76:	f7ff fe67 	bl	d4a48 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   d4d7a:	f7ff fd39 	bl	d47f0 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d4d7e:	7a6b      	ldrb	r3, [r5, #9]
   d4d80:	b143      	cbz	r3, d4d94 <setup+0x1f4>
   d4d82:	2300      	movs	r3, #0
   d4d84:	f88d 3000 	strb.w	r3, [sp]
   d4d88:	783b      	ldrb	r3, [r7, #0]
   d4d8a:	4943      	ldr	r1, [pc, #268]	; (d4e98 <setup+0x2f8>)
   d4d8c:	483a      	ldr	r0, [pc, #232]	; (d4e78 <setup+0x2d8>)
   d4d8e:	4632      	mov	r2, r6
   d4d90:	f7ff fa91 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d4d94:	7823      	ldrb	r3, [r4, #0]
   d4d96:	b90b      	cbnz	r3, d4d9c <setup+0x1fc>
   d4d98:	2302      	movs	r3, #2
   d4d9a:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4d9c:	a802      	add	r0, sp, #8
   d4d9e:	f002 fccb 	bl	d7738 <_ZN6StringD1Ev>
}
   d4da2:	b03b      	add	sp, #236	; 0xec
   d4da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d4da6:	f7ff fbaf 	bl	d4508 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   d4daa:	f7ff fbd7 	bl	d455c <_Z17loadAlertDefaultsv>
   d4dae:	e7d2      	b.n	d4d56 <setup+0x1b6>
   d4db0:	4a37      	ldr	r2, [pc, #220]	; (d4e90 <setup+0x2f0>)
   d4db2:	4835      	ldr	r0, [pc, #212]	; (d4e88 <setup+0x2e8>)
   d4db4:	231c      	movs	r3, #28
   d4db6:	2101      	movs	r1, #1
   d4db8:	f000 fb8e 	bl	d54d8 <_ZN6MB85RC8readDataEjPhj>
   d4dbc:	4a37      	ldr	r2, [pc, #220]	; (d4e9c <setup+0x2fc>)
   d4dbe:	4832      	ldr	r0, [pc, #200]	; (d4e88 <setup+0x2e8>)
   d4dc0:	2318      	movs	r3, #24
   d4dc2:	2150      	movs	r1, #80	; 0x50
   d4dc4:	f000 fb88 	bl	d54d8 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4dc8:	e7c5      	b.n	d4d56 <setup+0x1b6>
   d4dca:	bf00      	nop
   d4dcc:	000d40c9 	.word	0x000d40c9
   d4dd0:	000dade0 	.word	0x000dade0
   d4dd4:	2003e568 	.word	0x2003e568
   d4dd8:	000d42d1 	.word	0x000d42d1
   d4ddc:	2003e421 	.word	0x2003e421
   d4de0:	000dae20 	.word	0x000dae20
   d4de4:	000dac2b 	.word	0x000dac2b
   d4de8:	2003e589 	.word	0x2003e589
   d4dec:	000dac33 	.word	0x000dac33
   d4df0:	2003e47c 	.word	0x2003e47c
   d4df4:	000dac3f 	.word	0x000dac3f
   d4df8:	2003e5b1 	.word	0x2003e5b1
   d4dfc:	000dac48 	.word	0x000dac48
   d4e00:	2003e4c0 	.word	0x2003e4c0
   d4e04:	000dac5a 	.word	0x000dac5a
   d4e08:	2003e599 	.word	0x2003e599
   d4e0c:	000dac6c 	.word	0x000dac6c
   d4e10:	2003e4a8 	.word	0x2003e4a8
   d4e14:	000dac7b 	.word	0x000dac7b
   d4e18:	2003e451 	.word	0x2003e451
   d4e1c:	000dac8a 	.word	0x000dac8a
   d4e20:	2003e441 	.word	0x2003e441
   d4e24:	000dac92 	.word	0x000dac92
   d4e28:	2003e570 	.word	0x2003e570
   d4e2c:	000daca1 	.word	0x000daca1
   d4e30:	000d40f1 	.word	0x000d40f1
   d4e34:	000dacb0 	.word	0x000dacb0
   d4e38:	000d4369 	.word	0x000d4369
   d4e3c:	000dacbc 	.word	0x000dacbc
   d4e40:	000d4879 	.word	0x000d4879
   d4e44:	000dacc9 	.word	0x000dacc9
   d4e48:	000d48c9 	.word	0x000d48c9
   d4e4c:	000dacda 	.word	0x000dacda
   d4e50:	000d4969 	.word	0x000d4969
   d4e54:	000daceb 	.word	0x000daceb
   d4e58:	000d4919 	.word	0x000d4919
   d4e5c:	000dad00 	.word	0x000dad00
   d4e60:	000d44cd 	.word	0x000d44cd
   d4e64:	000daafe 	.word	0x000daafe
   d4e68:	000d43e9 	.word	0x000d43e9
   d4e6c:	000daac3 	.word	0x000daac3
   d4e70:	2003e518 	.word	0x2003e518
   d4e74:	000dad14 	.word	0x000dad14
   d4e78:	2003e4dc 	.word	0x2003e4dc
   d4e7c:	2003e55c 	.word	0x2003e55c
   d4e80:	000dad19 	.word	0x000dad19
   d4e84:	2003e514 	.word	0x2003e514
   d4e88:	2003e46c 	.word	0x2003e46c
   d4e8c:	000dae28 	.word	0x000dae28
   d4e90:	2003e56c 	.word	0x2003e56c
   d4e94:	2003e48c 	.word	0x2003e48c
   d4e98:	000dad36 	.word	0x000dad36
   d4e9c:	2003e428 	.word	0x2003e428

000d4ea0 <loop>:
{
   d4ea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d4ea2:	4c73      	ldr	r4, [pc, #460]	; (d5070 <loop+0x1d0>)
   d4ea4:	4d73      	ldr	r5, [pc, #460]	; (d5074 <loop+0x1d4>)
   d4ea6:	7823      	ldrb	r3, [r4, #0]
   d4ea8:	3b01      	subs	r3, #1
   d4eaa:	2b04      	cmp	r3, #4
   d4eac:	d820      	bhi.n	d4ef0 <loop+0x50>
   d4eae:	e8df f003 	tbb	[pc, r3]
   d4eb2:	03b6      	.short	0x03b6
   d4eb4:	694f      	.short	0x694f
   d4eb6:	8a          	.byte	0x8a
   d4eb7:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4eb8:	4b6f      	ldr	r3, [pc, #444]	; (d5078 <loop+0x1d8>)
   d4eba:	7a5b      	ldrb	r3, [r3, #9]
   d4ebc:	b12b      	cbz	r3, d4eca <loop+0x2a>
   d4ebe:	4b6f      	ldr	r3, [pc, #444]	; (d507c <loop+0x1dc>)
   d4ec0:	781b      	ldrb	r3, [r3, #0]
   d4ec2:	2b02      	cmp	r3, #2
   d4ec4:	d001      	beq.n	d4eca <loop+0x2a>
   d4ec6:	f7ff fc5d 	bl	d4784 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || (!(Time.now() % wakeBoundary))) {
   d4eca:	f002 fe87 	bl	d7bdc <_ZN9TimeClass4hourEv>
   d4ece:	4b6c      	ldr	r3, [pc, #432]	; (d5080 <loop+0x1e0>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	4298      	cmp	r0, r3
   d4ed4:	d002      	beq.n	d4edc <loop+0x3c>
      state = MEASURING_STATE;                                                     
   d4ed6:	2303      	movs	r3, #3
     state = IDLE_STATE;
   d4ed8:	7023      	strb	r3, [r4, #0]
   d4eda:	e009      	b.n	d4ef0 <loop+0x50>
    if (Time.hour() != currentHourlyPeriod || (!(Time.now() % wakeBoundary))) {
   d4edc:	f002 fe6d 	bl	d7bba <_ZN9TimeClass3nowEv>
   d4ee0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4ee4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4ee8:	fb02 0313 	mls	r3, r2, r3, r0
   d4eec:	2b00      	cmp	r3, #0
   d4eee:	d0f2      	beq.n	d4ed6 <loop+0x36>
  rtc.loop();                                                                               // keeps the clock up to date
   d4ef0:	4864      	ldr	r0, [pc, #400]	; (d5084 <loop+0x1e4>)
   d4ef2:	f001 fa07 	bl	d6304 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4ef6:	4b64      	ldr	r3, [pc, #400]	; (d5088 <loop+0x1e8>)
   d4ef8:	781b      	ldrb	r3, [r3, #0]
   d4efa:	b10b      	cbz	r3, d4f00 <loop+0x60>
   d4efc:	f7ff fbde 	bl	d46bc <_Z11petWatchdogv>
  if (flashTheLED) blinkLED(blueLED);
   d4f00:	782b      	ldrb	r3, [r5, #0]
   d4f02:	b113      	cbz	r3, d4f0a <loop+0x6a>
   d4f04:	2007      	movs	r0, #7
   d4f06:	f7ff fc23 	bl	d4750 <_Z8blinkLEDi>
  if (systemStatusWriteNeeded) {
   d4f0a:	4c60      	ldr	r4, [pc, #384]	; (d508c <loop+0x1ec>)
   d4f0c:	7823      	ldrb	r3, [r4, #0]
   d4f0e:	b13b      	cbz	r3, d4f20 <loop+0x80>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f10:	231c      	movs	r3, #28
   d4f12:	4a59      	ldr	r2, [pc, #356]	; (d5078 <loop+0x1d8>)
   d4f14:	485e      	ldr	r0, [pc, #376]	; (d5090 <loop+0x1f0>)
   d4f16:	2101      	movs	r1, #1
   d4f18:	f000 fb29 	bl	d556e <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d4f1c:	2300      	movs	r3, #0
   d4f1e:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   d4f20:	4c5c      	ldr	r4, [pc, #368]	; (d5094 <loop+0x1f4>)
   d4f22:	7823      	ldrb	r3, [r4, #0]
   d4f24:	b13b      	cbz	r3, d4f36 <loop+0x96>
   d4f26:	2318      	movs	r3, #24
   d4f28:	4a5b      	ldr	r2, [pc, #364]	; (d5098 <loop+0x1f8>)
   d4f2a:	4859      	ldr	r0, [pc, #356]	; (d5090 <loop+0x1f0>)
   d4f2c:	2150      	movs	r1, #80	; 0x50
   d4f2e:	f000 fb1e 	bl	d556e <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   d4f32:	2300      	movs	r3, #0
   d4f34:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4f36:	4c59      	ldr	r4, [pc, #356]	; (d509c <loop+0x1fc>)
   d4f38:	7823      	ldrb	r3, [r4, #0]
   d4f3a:	b13b      	cbz	r3, d4f4c <loop+0xac>
   d4f3c:	2320      	movs	r3, #32
   d4f3e:	4a58      	ldr	r2, [pc, #352]	; (d50a0 <loop+0x200>)
   d4f40:	4853      	ldr	r0, [pc, #332]	; (d5090 <loop+0x1f0>)
   d4f42:	21a0      	movs	r1, #160	; 0xa0
   d4f44:	f000 fb13 	bl	d556e <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4f48:	2300      	movs	r3, #0
   d4f4a:	7023      	strb	r3, [r4, #0]
}
   d4f4c:	b002      	add	sp, #8
   d4f4e:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f50:	4b49      	ldr	r3, [pc, #292]	; (d5078 <loop+0x1d8>)
   d4f52:	7a5b      	ldrb	r3, [r3, #9]
   d4f54:	b12b      	cbz	r3, d4f62 <loop+0xc2>
   d4f56:	4b49      	ldr	r3, [pc, #292]	; (d507c <loop+0x1dc>)
   d4f58:	781b      	ldrb	r3, [r3, #0]
   d4f5a:	2b03      	cmp	r3, #3
   d4f5c:	d001      	beq.n	d4f62 <loop+0xc2>
   d4f5e:	f7ff fc11 	bl	d4784 <_Z22publishStateTransitionv>
    currentHourlyPeriod = Time.hour();
   d4f62:	f002 fe3b 	bl	d7bdc <_ZN9TimeClass4hourEv>
   d4f66:	4b46      	ldr	r3, [pc, #280]	; (d5080 <loop+0x1e0>)
   d4f68:	6018      	str	r0, [r3, #0]
    if (takeMeasurements()) flashTheLED = true;
   d4f6a:	f7ff fd6d 	bl	d4a48 <_Z16takeMeasurementsv>
   d4f6e:	4601      	mov	r1, r0
   d4f70:	b118      	cbz	r0, d4f7a <loop+0xda>
   d4f72:	2301      	movs	r3, #1
   d4f74:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   d4f76:	2304      	movs	r3, #4
   d4f78:	e7ae      	b.n	d4ed8 <loop+0x38>
      flashTheLED = false;
   d4f7a:	7028      	strb	r0, [r5, #0]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   d4f7c:	2007      	movs	r0, #7
   d4f7e:	f003 f84a 	bl	d8016 <digitalWrite>
   d4f82:	e7f8      	b.n	d4f76 <loop+0xd6>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4f84:	4b3c      	ldr	r3, [pc, #240]	; (d5078 <loop+0x1d8>)
   d4f86:	7a5b      	ldrb	r3, [r3, #9]
   d4f88:	b12b      	cbz	r3, d4f96 <loop+0xf6>
   d4f8a:	4b3c      	ldr	r3, [pc, #240]	; (d507c <loop+0x1dc>)
   d4f8c:	781b      	ldrb	r3, [r3, #0]
   d4f8e:	2b04      	cmp	r3, #4
   d4f90:	d001      	beq.n	d4f96 <loop+0xf6>
   d4f92:	f7ff fbf7 	bl	d4784 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f96:	f001 fccd 	bl	d6934 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4f9a:	b168      	cbz	r0, d4fb8 <loop+0x118>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4f9c:	f002 fe1e 	bl	d7bdc <_ZN9TimeClass4hourEv>
   d4fa0:	280c      	cmp	r0, #12
   d4fa2:	d105      	bne.n	d4fb0 <loop+0x110>
   d4fa4:	f001 fcc6 	bl	d6934 <spark_cloud_flag_connected>
        if (!connected()) {
   d4fa8:	b110      	cbz	r0, d4fb0 <loop+0x110>
        return spark_sync_time(NULL);
   d4faa:	2000      	movs	r0, #0
   d4fac:	f001 fce2 	bl	d6974 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4fb0:	f7ff fb94 	bl	d46dc <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4fb4:	2305      	movs	r3, #5
   d4fb6:	e78f      	b.n	d4ed8 <loop+0x38>
      state = ERROR_STATE;
   d4fb8:	2301      	movs	r3, #1
   d4fba:	7023      	strb	r3, [r4, #0]
   d4fbc:	f001 fada 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4fc0:	4b38      	ldr	r3, [pc, #224]	; (d50a4 <loop+0x204>)
   d4fc2:	6018      	str	r0, [r3, #0]
   d4fc4:	e794      	b.n	d4ef0 <loop+0x50>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fc6:	4b2c      	ldr	r3, [pc, #176]	; (d5078 <loop+0x1d8>)
   d4fc8:	7a5b      	ldrb	r3, [r3, #9]
   d4fca:	b12b      	cbz	r3, d4fd8 <loop+0x138>
   d4fcc:	4b2b      	ldr	r3, [pc, #172]	; (d507c <loop+0x1dc>)
   d4fce:	781b      	ldrb	r3, [r3, #0]
   d4fd0:	2b05      	cmp	r3, #5
   d4fd2:	d001      	beq.n	d4fd8 <loop+0x138>
   d4fd4:	f7ff fbd6 	bl	d4784 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                                      // Response received back to IDLE state
   d4fd8:	4b33      	ldr	r3, [pc, #204]	; (d50a8 <loop+0x208>)
   d4fda:	781b      	ldrb	r3, [r3, #0]
   d4fdc:	b90b      	cbnz	r3, d4fe2 <loop+0x142>
     state = IDLE_STATE;
   d4fde:	2302      	movs	r3, #2
   d4fe0:	e77a      	b.n	d4ed8 <loop+0x38>
   d4fe2:	f001 fac7 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d4fe6:	4b31      	ldr	r3, [pc, #196]	; (d50ac <loop+0x20c>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	1ac0      	subs	r0, r0, r3
   d4fec:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4ff0:	4298      	cmp	r0, r3
   d4ff2:	f67f af7d 	bls.w	d4ef0 <loop+0x50>
   d4ff6:	f001 fabd 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
   d4ffa:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4ffc:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   d5000:	4e28      	ldr	r6, [pc, #160]	; (d50a4 <loop+0x204>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5002:	4b2b      	ldr	r3, [pc, #172]	; (d50b0 <loop+0x210>)
   d5004:	4a2b      	ldr	r2, [pc, #172]	; (d50b4 <loop+0x214>)
   d5006:	781b      	ldrb	r3, [r3, #0]
   d5008:	492b      	ldr	r1, [pc, #172]	; (d50b8 <loop+0x218>)
      resetTimeStamp = millis();
   d500a:	6030      	str	r0, [r6, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d500c:	482b      	ldr	r0, [pc, #172]	; (d50bc <loop+0x21c>)
   d500e:	f7ff f952 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d5012:	2301      	movs	r3, #1
   d5014:	7023      	strb	r3, [r4, #0]
   d5016:	f001 faad 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d501a:	6030      	str	r0, [r6, #0]
   d501c:	e768      	b.n	d4ef0 <loop+0x50>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d501e:	4b16      	ldr	r3, [pc, #88]	; (d5078 <loop+0x1d8>)
   d5020:	7a5b      	ldrb	r3, [r3, #9]
   d5022:	b12b      	cbz	r3, d5030 <loop+0x190>
   d5024:	4b15      	ldr	r3, [pc, #84]	; (d507c <loop+0x1dc>)
   d5026:	781b      	ldrb	r3, [r3, #0]
   d5028:	2b01      	cmp	r3, #1
   d502a:	d001      	beq.n	d5030 <loop+0x190>
   d502c:	f7ff fbaa 	bl	d4784 <_Z22publishStateTransitionv>
   d5030:	f001 faa0 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5034:	4b1b      	ldr	r3, [pc, #108]	; (d50a4 <loop+0x204>)
   d5036:	681b      	ldr	r3, [r3, #0]
   d5038:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d503c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d5040:	4283      	cmp	r3, r0
   d5042:	f4bf af55 	bcs.w	d4ef0 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5046:	f001 fc75 	bl	d6934 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d504a:	b148      	cbz	r0, d5060 <loop+0x1c0>
   d504c:	2300      	movs	r3, #0
   d504e:	f88d 3000 	strb.w	r3, [sp]
   d5052:	4b17      	ldr	r3, [pc, #92]	; (d50b0 <loop+0x210>)
   d5054:	4a1a      	ldr	r2, [pc, #104]	; (d50c0 <loop+0x220>)
   d5056:	781b      	ldrb	r3, [r3, #0]
   d5058:	491a      	ldr	r1, [pc, #104]	; (d50c4 <loop+0x224>)
   d505a:	4818      	ldr	r0, [pc, #96]	; (d50bc <loop+0x21c>)
   d505c:	f7ff f92b 	bl	d42b6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d5060:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5064:	f001 fd56 	bl	d6b14 <delay>
      System.reset();
   d5068:	f002 fc2c 	bl	d78c4 <_ZN11SystemClass5resetEv>
   d506c:	e740      	b.n	d4ef0 <loop+0x50>
   d506e:	bf00      	nop
   d5070:	2003e568 	.word	0x2003e568
   d5074:	2003e469 	.word	0x2003e469
   d5078:	2003e56c 	.word	0x2003e56c
   d507c:	2003e4d8 	.word	0x2003e4d8
   d5080:	2003e464 	.word	0x2003e464
   d5084:	2003e518 	.word	0x2003e518
   d5088:	2003e5c9 	.word	0x2003e5c9
   d508c:	2003e588 	.word	0x2003e588
   d5090:	2003e46c 	.word	0x2003e46c
   d5094:	2003e440 	.word	0x2003e440
   d5098:	2003e428 	.word	0x2003e428
   d509c:	2003e558 	.word	0x2003e558
   d50a0:	2003e538 	.word	0x2003e538
   d50a4:	2003e514 	.word	0x2003e514
   d50a8:	2003e468 	.word	0x2003e468
   d50ac:	2003e5cc 	.word	0x2003e5cc
   d50b0:	2003e421 	.word	0x2003e421
   d50b4:	000db22c 	.word	0x000db22c
   d50b8:	000dad3e 	.word	0x000dad3e
   d50bc:	2003e4dc 	.word	0x2003e4dc
   d50c0:	000dad57 	.word	0x000dad57
   d50c4:	000daa8e 	.word	0x000daa8e

000d50c8 <_GLOBAL__sub_I___appProductID>:
}
   d50c8:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d50ca:	4b47      	ldr	r3, [pc, #284]	; (d51e8 <_GLOBAL__sub_I___appProductID+0x120>)
              error_(SYSTEM_ERROR_NONE) {
   d50cc:	4c47      	ldr	r4, [pc, #284]	; (d51ec <_GLOBAL__sub_I___appProductID+0x124>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d50ce:	4e48      	ldr	r6, [pc, #288]	; (d51f0 <_GLOBAL__sub_I___appProductID+0x128>)
   d50d0:	2701      	movs	r7, #1
   d50d2:	701f      	strb	r7, [r3, #0]
   d50d4:	4b47      	ldr	r3, [pc, #284]	; (d51f4 <_GLOBAL__sub_I___appProductID+0x12c>)
   d50d6:	2202      	movs	r2, #2
}
   d50d8:	b089      	sub	sp, #36	; 0x24
   d50da:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d50dc:	f002 ff34 	bl	d7f48 <spark_protocol_instance>
   d50e0:	2300      	movs	r3, #0
   d50e2:	461a      	mov	r2, r3
   d50e4:	f243 0171 	movw	r1, #12401	; 0x3071
   d50e8:	f002 ff36 	bl	d7f58 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d50ec:	f002 ff2c 	bl	d7f48 <spark_protocol_instance>
   d50f0:	2300      	movs	r3, #0
   d50f2:	461a      	mov	r2, r3
   d50f4:	210b      	movs	r1, #11
   d50f6:	f002 ff37 	bl	d7f68 <spark_protocol_set_product_firmware_version>
   d50fa:	2500      	movs	r5, #0
    SleepResult() {}
   d50fc:	4b3e      	ldr	r3, [pc, #248]	; (d51f8 <_GLOBAL__sub_I___appProductID+0x130>)
   d50fe:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5100:	6025      	str	r5, [r4, #0]
   d5102:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d5104:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d5106:	4638      	mov	r0, r7
   d5108:	f001 fba6 	bl	d6858 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d510c:	4632      	mov	r2, r6
   d510e:	493b      	ldr	r1, [pc, #236]	; (d51fc <_GLOBAL__sub_I___appProductID+0x134>)
   d5110:	4620      	mov	r0, r4
   d5112:	f002 ffed 	bl	d80f0 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5116:	4629      	mov	r1, r5
   d5118:	4638      	mov	r0, r7
   d511a:	f001 fbad 	bl	d6878 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d511e:	4639      	mov	r1, r7
   d5120:	2004      	movs	r0, #4
   d5122:	f001 fa07 	bl	d6534 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d5126:	4836      	ldr	r0, [pc, #216]	; (d5200 <_GLOBAL__sub_I___appProductID+0x138>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5128:	4c36      	ldr	r4, [pc, #216]	; (d5204 <_GLOBAL__sub_I___appProductID+0x13c>)
   d512a:	f000 f88f 	bl	d524c <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d512e:	f002 ffb7 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d5132:	462b      	mov	r3, r5
   d5134:	4601      	mov	r1, r0
   d5136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d513a:	4620      	mov	r0, r4
   d513c:	f000 f980 	bl	d5440 <_ZN6MB85RCC1ER7TwoWireji>
   d5140:	4b31      	ldr	r3, [pc, #196]	; (d5208 <_GLOBAL__sub_I___appProductID+0x140>)
   d5142:	6023      	str	r3, [r4, #0]
   d5144:	4632      	mov	r2, r6
   d5146:	4931      	ldr	r1, [pc, #196]	; (d520c <_GLOBAL__sub_I___appProductID+0x144>)
   d5148:	4620      	mov	r0, r4
   d514a:	f002 ffd1 	bl	d80f0 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d514e:	f002 ffa7 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d5152:	4c2f      	ldr	r4, [pc, #188]	; (d5210 <_GLOBAL__sub_I___appProductID+0x148>)
   d5154:	4601      	mov	r1, r0
   d5156:	4620      	mov	r0, r4
   d5158:	f000 fed6 	bl	d5f08 <_ZN8MCP79410C1ER7TwoWire>
   d515c:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d515e:	4c2d      	ldr	r4, [pc, #180]	; (d5214 <_GLOBAL__sub_I___appProductID+0x14c>)
   d5160:	492d      	ldr	r1, [pc, #180]	; (d5218 <_GLOBAL__sub_I___appProductID+0x150>)
   d5162:	4632      	mov	r2, r6
   d5164:	f002 ffc4 	bl	d80f0 <__aeabi_atexit>
   d5168:	492c      	ldr	r1, [pc, #176]	; (d521c <_GLOBAL__sub_I___appProductID+0x154>)
   d516a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d516e:	4620      	mov	r0, r4
   d5170:	f000 fc66 	bl	d5a40 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5174:	4b2a      	ldr	r3, [pc, #168]	; (d5220 <_GLOBAL__sub_I___appProductID+0x158>)
   d5176:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5178:	4632      	mov	r2, r6
   d517a:	492a      	ldr	r1, [pc, #168]	; (d5224 <_GLOBAL__sub_I___appProductID+0x15c>)
   d517c:	4620      	mov	r0, r4
   d517e:	f002 ffb7 	bl	d80f0 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5182:	4b29      	ldr	r3, [pc, #164]	; (d5228 <_GLOBAL__sub_I___appProductID+0x160>)
   d5184:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5186:	af04      	add	r7, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5188:	4c28      	ldr	r4, [pc, #160]	; (d522c <_GLOBAL__sub_I___appProductID+0x164>)
   d518a:	4b29      	ldr	r3, [pc, #164]	; (d5230 <_GLOBAL__sub_I___appProductID+0x168>)
   d518c:	6023      	str	r3, [r4, #0]
   d518e:	e897 0003 	ldmia.w	r7, {r0, r1}
   d5192:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5194:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5198:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d519c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d51a0:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51a4:	e892 0003 	ldmia.w	r2, {r0, r1}
   d51a8:	e883 0003 	stmia.w	r3, {r0, r1}
   d51ac:	4b21      	ldr	r3, [pc, #132]	; (d5234 <_GLOBAL__sub_I___appProductID+0x16c>)
   d51ae:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d51b0:	69a3      	ldr	r3, [r4, #24]
   d51b2:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d51b4:	4b20      	ldr	r3, [pc, #128]	; (d5238 <_GLOBAL__sub_I___appProductID+0x170>)
   d51b6:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51b8:	4a20      	ldr	r2, [pc, #128]	; (d523c <_GLOBAL__sub_I___appProductID+0x174>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d51ba:	7125      	strb	r5, [r4, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51bc:	4623      	mov	r3, r4
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d51be:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d51c4:	e9cd 5500 	strd	r5, r5, [sp]
   d51c8:	f104 0008 	add.w	r0, r4, #8
      __a = _GLIBCXX_MOVE(__b);
   d51cc:	9506      	str	r5, [sp, #24]
   d51ce:	f001 f959 	bl	d6484 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d51d2:	4638      	mov	r0, r7
   d51d4:	f7ff f81a 	bl	d420c <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d51d8:	4919      	ldr	r1, [pc, #100]	; (d5240 <_GLOBAL__sub_I___appProductID+0x178>)
   d51da:	4632      	mov	r2, r6
   d51dc:	4620      	mov	r0, r4
   d51de:	f002 ff87 	bl	d80f0 <__aeabi_atexit>
}
   d51e2:	b009      	add	sp, #36	; 0x24
   d51e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51e6:	bf00      	nop
   d51e8:	2003e421 	.word	0x2003e421
   d51ec:	2003e414 	.word	0x2003e414
   d51f0:	2003e410 	.word	0x2003e410
   d51f4:	2003e420 	.word	0x2003e420
   d51f8:	ffff0000 	.word	0xffff0000
   d51fc:	000d41a3 	.word	0x000d41a3
   d5200:	2003e55c 	.word	0x2003e55c
   d5204:	2003e46c 	.word	0x2003e46c
   d5208:	000dadb0 	.word	0x000dadb0
   d520c:	000d4141 	.word	0x000d4141
   d5210:	2003e518 	.word	0x2003e518
   d5214:	2003e4dc 	.word	0x2003e4dc
   d5218:	000d5c93 	.word	0x000d5c93
   d521c:	2003f400 	.word	0x2003f400
   d5220:	000dad88 	.word	0x000dad88
   d5224:	000d4119 	.word	0x000d4119
   d5228:	000d41bd 	.word	0x000d41bd
   d522c:	2003e48c 	.word	0x2003e48c
   d5230:	000dad74 	.word	0x000dad74
   d5234:	000d40d9 	.word	0x000d40d9
   d5238:	000d40d5 	.word	0x000d40d5
   d523c:	000d4169 	.word	0x000d4169
   d5240:	000d4221 	.word	0x000d4221

000d5244 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5244:	6803      	ldr	r3, [r0, #0]
   d5246:	b2c9      	uxtb	r1, r1
   d5248:	689b      	ldr	r3, [r3, #8]
   d524a:	4718      	bx	r3

000d524c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d524c:	4770      	bx	lr

000d524e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d524e:	b538      	push	{r3, r4, r5, lr}
   d5250:	4605      	mov	r5, r0
   d5252:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5254:	f002 ff24 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d5258:	7829      	ldrb	r1, [r5, #0]
   d525a:	f002 f881 	bl	d7360 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d525e:	f002 ff1f 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d5262:	0a21      	lsrs	r1, r4, #8
   d5264:	f7ff ffee 	bl	d5244 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5268:	f002 ff1a 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d526c:	b2e1      	uxtb	r1, r4
   d526e:	f7ff ffe9 	bl	d5244 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5272:	f002 ff15 	bl	d80a0 <_Z19__fetch_global_Wirev>
}
   d5276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d527a:	f002 b87c 	b.w	d7376 <_ZN7TwoWire15endTransmissionEv>

000d527e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d527e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5280:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5284:	f7ff ffe3 	bl	d524e <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d5288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d528c:	200a      	movs	r0, #10
   d528e:	f001 bc41 	b.w	d6b14 <delay>

000d5292 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5292:	b538      	push	{r3, r4, r5, lr}
   d5294:	4604      	mov	r4, r0
   d5296:	460d      	mov	r5, r1
  Wire.begin();
   d5298:	f002 ff02 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d529c:	f002 f82e 	bl	d72fc <_ZN7TwoWire5beginEv>
  reset();
   d52a0:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d52a2:	7025      	strb	r5, [r4, #0]
  reset();
   d52a4:	f7ff ffeb 	bl	d527e <_ZN14Adafruit_SHT315resetEv>
}
   d52a8:	2001      	movs	r0, #1
   d52aa:	bd38      	pop	{r3, r4, r5, pc}

000d52ac <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d52ac:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d52ae:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d52b0:	4291      	cmp	r1, r2
   d52b2:	d00e      	beq.n	d52d2 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d52b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d52b8:	4058      	eors	r0, r3
   d52ba:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d52bc:	f010 0f80 	tst.w	r0, #128	; 0x80
   d52c0:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d52c4:	bf18      	it	ne
   d52c6:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d52ca:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d52cc:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d52ce:	d1f5      	bne.n	d52bc <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d52d0:	e7ee      	b.n	d52b0 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d52d2:	4770      	bx	lr
   d52d4:	0000      	movs	r0, r0
	...

000d52d8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d52d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d52da:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d52de:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d52e0:	f7ff ffb5 	bl	d524e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d52e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d52e8:	f001 fc14 	bl	d6b14 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d52ec:	f002 fed8 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d52f0:	7829      	ldrb	r1, [r5, #0]
   d52f2:	2206      	movs	r2, #6
   d52f4:	f002 f831 	bl	d735a <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d52f8:	f002 fed2 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d52fc:	6803      	ldr	r3, [r0, #0]
   d52fe:	691b      	ldr	r3, [r3, #16]
   d5300:	4798      	blx	r3
   d5302:	2806      	cmp	r0, #6
   d5304:	d14b      	bne.n	d539e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d5306:	466e      	mov	r6, sp
   d5308:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d530a:	f002 fec9 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d530e:	6803      	ldr	r3, [r0, #0]
   d5310:	695b      	ldr	r3, [r3, #20]
   d5312:	4798      	blx	r3
   d5314:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d5316:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d531a:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d531e:	4669      	mov	r1, sp
   d5320:	d1f3      	bne.n	d530a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5322:	2202      	movs	r2, #2
   d5324:	4628      	mov	r0, r5
   d5326:	f7ff ffc1 	bl	d52ac <_ZN14Adafruit_SHT314crc8EPKhi>
   d532a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d532e:	4286      	cmp	r6, r0
   d5330:	d135      	bne.n	d539e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5332:	2202      	movs	r2, #2
   d5334:	f10d 0103 	add.w	r1, sp, #3
   d5338:	4628      	mov	r0, r5
   d533a:	f7ff ffb7 	bl	d52ac <_ZN14Adafruit_SHT314crc8EPKhi>
   d533e:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d5342:	4286      	cmp	r6, r0
   d5344:	d12b      	bne.n	d539e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d5346:	f8bd 0000 	ldrh.w	r0, [sp]
   d534a:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d534e:	ba40      	rev16	r0, r0
   d5350:	b280      	uxth	r0, r0
   d5352:	f003 f81d 	bl	d8390 <__aeabi_ui2d>
  stemp *= 175;
   d5356:	a318      	add	r3, pc, #96	; (adr r3, d53b8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5358:	e9d3 2300 	ldrd	r2, r3, [r3]
   d535c:	f003 f892 	bl	d8484 <__aeabi_dmul>
  stemp /= 0xffff;
   d5360:	a311      	add	r3, pc, #68	; (adr r3, d53a8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5362:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5366:	f003 f9b7 	bl	d86d8 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d536a:	4b11      	ldr	r3, [pc, #68]	; (d53b0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d536c:	2200      	movs	r2, #0
   d536e:	f002 fed1 	bl	d8114 <__aeabi_dsub>
  temp = stemp;
   d5372:	f003 fb41 	bl	d89f8 <__aeabi_d2f>
   d5376:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d5378:	ba60      	rev16	r0, r4
   d537a:	b280      	uxth	r0, r0
   d537c:	f003 f808 	bl	d8390 <__aeabi_ui2d>
  shum *= 100;
   d5380:	4b0c      	ldr	r3, [pc, #48]	; (d53b4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5382:	2200      	movs	r2, #0
   d5384:	f003 f87e 	bl	d8484 <__aeabi_dmul>
  shum /= 0xFFFF;
   d5388:	a307      	add	r3, pc, #28	; (adr r3, d53a8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d538a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d538e:	f003 f9a3 	bl	d86d8 <__aeabi_ddiv>
  humidity = shum;
   d5392:	f003 fb31 	bl	d89f8 <__aeabi_d2f>
   d5396:	6068      	str	r0, [r5, #4]
  return true;
   d5398:	2001      	movs	r0, #1
}
   d539a:	b002      	add	sp, #8
   d539c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d539e:	2000      	movs	r0, #0
   d53a0:	e7fb      	b.n	d539a <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d53a2:	bf00      	nop
   d53a4:	f3af 8000 	nop.w
   d53a8:	00000000 	.word	0x00000000
   d53ac:	40efffe0 	.word	0x40efffe0
   d53b0:	40468000 	.word	0x40468000
   d53b4:	40590000 	.word	0x40590000
   d53b8:	00000000 	.word	0x00000000
   d53bc:	4065e000 	.word	0x4065e000

000d53c0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d53c0:	b510      	push	{r4, lr}
   d53c2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d53c4:	f7ff ff88 	bl	d52d8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d53c8:	b110      	cbz	r0, d53d0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d53ca:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d53ce:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d53d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d53d8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d53d4:	e7fb      	b.n	d53ce <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d53d6:	bf00      	nop
   d53d8:	7fc00000 	.word	0x7fc00000

000d53dc <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d53dc:	b510      	push	{r4, lr}
   d53de:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d53e0:	f7ff ff7a 	bl	d52d8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d53e4:	b110      	cbz	r0, d53ec <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d53e6:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d53ea:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d53ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; d53f4 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d53f0:	e7fb      	b.n	d53ea <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d53f2:	bf00      	nop
   d53f4:	7fc00000 	.word	0x7fc00000

000d53f8 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d53f8:	4770      	bx	lr

000d53fa <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d53fa:	b510      	push	{r4, lr}
}
   d53fc:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d53fe:	4604      	mov	r4, r0
}
   d5400:	f002 fe7b 	bl	d80fa <_ZdlPvj>
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5408:	6803      	ldr	r3, [r0, #0]
   d540a:	b2c9      	uxtb	r1, r1
   d540c:	689b      	ldr	r3, [r3, #8]
   d540e:	4718      	bx	r3

000d5410 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5410:	b40e      	push	{r1, r2, r3}
   d5412:	b510      	push	{r4, lr}
   d5414:	b08d      	sub	sp, #52	; 0x34
   d5416:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5418:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d541a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d541e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5420:	2300      	movs	r3, #0
   d5422:	2020      	movs	r0, #32
   d5424:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5428:	e9cd 4200 	strd	r4, r2, [sp]
   d542c:	201e      	movs	r0, #30
   d542e:	aa04      	add	r2, sp, #16
   d5430:	f001 f9f8 	bl	d6824 <log_message_v>
}
   d5434:	b00d      	add	sp, #52	; 0x34
   d5436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d543a:	b003      	add	sp, #12
   d543c:	4770      	bx	lr
	...

000d5440 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5440:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5442:	4d03      	ldr	r5, [pc, #12]	; (d5450 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5444:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5448:	e9c0 5100 	strd	r5, r1, [r0]
}
   d544c:	bd30      	pop	{r4, r5, pc}
   d544e:	bf00      	nop
   d5450:	000dae60 	.word	0x000dae60

000d5454 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	f001 bf51 	b.w	d72fc <_ZN7TwoWire5beginEv>

000d545a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d545a:	b510      	push	{r4, lr}
   d545c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d545e:	6800      	ldr	r0, [r0, #0]
   d5460:	f001 ff95 	bl	d738e <_ZN7TwoWire6unlockEv>
   d5464:	4620      	mov	r0, r4
   d5466:	bd10      	pop	{r4, pc}

000d5468 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d546c:	b08a      	sub	sp, #40	; 0x28
   d546e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5470:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5472:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5474:	f001 ff82 	bl	d737c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5478:	221e      	movs	r2, #30
   d547a:	2100      	movs	r1, #0
   d547c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d547e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5480:	f003 fb9e 	bl	d8bc0 <memset>
		size_t framAddr = 0;
   d5484:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5486:	b1ef      	cbz	r7, d54c4 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5488:	6823      	ldr	r3, [r4, #0]
   d548a:	2f1e      	cmp	r7, #30
   d548c:	46b8      	mov	r8, r7
   d548e:	bf28      	it	cs
   d5490:	f04f 081e 	movcs.w	r8, #30
   d5494:	68dd      	ldr	r5, [r3, #12]
   d5496:	aa02      	add	r2, sp, #8
   d5498:	4643      	mov	r3, r8
   d549a:	4631      	mov	r1, r6
   d549c:	4620      	mov	r0, r4
   d549e:	47a8      	blx	r5
			if (!result) {
   d54a0:	4605      	mov	r5, r0
   d54a2:	b958      	cbnz	r0, d54bc <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d54a4:	480a      	ldr	r0, [pc, #40]	; (d54d0 <_ZN6MB85RC5eraseEv+0x68>)
   d54a6:	490b      	ldr	r1, [pc, #44]	; (d54d4 <_ZN6MB85RC5eraseEv+0x6c>)
   d54a8:	4632      	mov	r2, r6
   d54aa:	f7ff ffb1 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d54ae:	a801      	add	r0, sp, #4
   d54b0:	f7ff ffd3 	bl	d545a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d54b4:	4628      	mov	r0, r5
   d54b6:	b00a      	add	sp, #40	; 0x28
   d54b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d54bc:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d54c0:	4446      	add	r6, r8
		while(totalLen > 0) {
   d54c2:	e7e0      	b.n	d5486 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d54c4:	a801      	add	r0, sp, #4
   d54c6:	f7ff ffc8 	bl	d545a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d54ca:	2501      	movs	r5, #1
   d54cc:	e7f2      	b.n	d54b4 <_ZN6MB85RC5eraseEv+0x4c>
   d54ce:	bf00      	nop
   d54d0:	2003e614 	.word	0x2003e614
   d54d4:	000dae2c 	.word	0x000dae2c

000d54d8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d54d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d54dc:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d54de:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d54e0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d54e2:	460d      	mov	r5, r1
   d54e4:	4616      	mov	r6, r2
   d54e6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d54e8:	f001 ff48 	bl	d737c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d54ec:	b1a7      	cbz	r7, d5518 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d54ee:	68e1      	ldr	r1, [r4, #12]
   d54f0:	6860      	ldr	r0, [r4, #4]
   d54f2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d54f6:	f001 ff37 	bl	d7368 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d54fa:	0a29      	lsrs	r1, r5, #8
   d54fc:	6860      	ldr	r0, [r4, #4]
   d54fe:	f7ff ff83 	bl	d5408 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5502:	4629      	mov	r1, r5
   d5504:	6860      	ldr	r0, [r4, #4]
   d5506:	f7ff ff7f 	bl	d5408 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d550a:	6860      	ldr	r0, [r4, #4]
   d550c:	2100      	movs	r1, #0
   d550e:	f001 ff2e 	bl	d736e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5512:	b148      	cbz	r0, d5528 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5514:	2400      	movs	r4, #0
   d5516:	e000      	b.n	d551a <_ZN6MB85RC8readDataEjPhj+0x42>
   d5518:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d551a:	a801      	add	r0, sp, #4
   d551c:	f7ff ff9d 	bl	d545a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5520:	4620      	mov	r0, r4
   d5522:	b003      	add	sp, #12
   d5524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5528:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d552a:	7b21      	ldrb	r1, [r4, #12]
   d552c:	6860      	ldr	r0, [r4, #4]
   d552e:	46b8      	mov	r8, r7
   d5530:	bf28      	it	cs
   d5532:	f04f 0820 	movcs.w	r8, #32
   d5536:	2301      	movs	r3, #1
   d5538:	4642      	mov	r2, r8
   d553a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d553e:	f001 fefa 	bl	d7336 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5542:	f002 fdad 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d5546:	6803      	ldr	r3, [r0, #0]
   d5548:	691b      	ldr	r3, [r3, #16]
   d554a:	4798      	blx	r3
   d554c:	4540      	cmp	r0, r8
   d554e:	dbe1      	blt.n	d5514 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5550:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5554:	f002 fda4 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d5558:	6803      	ldr	r3, [r0, #0]
   d555a:	695b      	ldr	r3, [r3, #20]
   d555c:	4798      	blx	r3
   d555e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5562:	454e      	cmp	r6, r9
   d5564:	d1f6      	bne.n	d5554 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5566:	4445      	add	r5, r8
   d5568:	eba7 0708 	sub.w	r7, r7, r8
   d556c:	e7be      	b.n	d54ec <_ZN6MB85RC8readDataEjPhj+0x14>

000d556e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d556e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5572:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5574:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5576:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5578:	460e      	mov	r6, r1
   d557a:	4690      	mov	r8, r2
   d557c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d557e:	f001 fefd 	bl	d737c <_ZN7TwoWire4lockEv>
   d5582:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5586:	f1b9 0f00 	cmp.w	r9, #0
   d558a:	d02a      	beq.n	d55e2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d558c:	b34d      	cbz	r5, d55e2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d558e:	68e1      	ldr	r1, [r4, #12]
   d5590:	6860      	ldr	r0, [r4, #4]
   d5592:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5596:	f001 fee7 	bl	d7368 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d559a:	0a31      	lsrs	r1, r6, #8
   d559c:	6860      	ldr	r0, [r4, #4]
   d559e:	f7ff ff33 	bl	d5408 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d55a2:	6860      	ldr	r0, [r4, #4]
   d55a4:	4631      	mov	r1, r6
   d55a6:	f7ff ff2f 	bl	d5408 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55aa:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d55ae:	4647      	mov	r7, r8
   d55b0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d55b4:	6860      	ldr	r0, [r4, #4]
   d55b6:	f817 1b01 	ldrb.w	r1, [r7], #1
   d55ba:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d55bc:	3d01      	subs	r5, #1
				wire.write(*data);
   d55be:	689b      	ldr	r3, [r3, #8]
   d55c0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55c2:	4555      	cmp	r5, sl
   d55c4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d55c8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55ca:	d001      	beq.n	d55d0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d55cc:	2d00      	cmp	r5, #0
   d55ce:	d1f1      	bne.n	d55b4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d55d0:	6860      	ldr	r0, [r4, #4]
   d55d2:	2101      	movs	r1, #1
   d55d4:	f001 fecb 	bl	d736e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d55d8:	2800      	cmp	r0, #0
   d55da:	d0d7      	beq.n	d558c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d55dc:	f04f 0900 	mov.w	r9, #0
   d55e0:	e7d1      	b.n	d5586 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d55e2:	a801      	add	r0, sp, #4
   d55e4:	f7ff ff39 	bl	d545a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d55e8:	4648      	mov	r0, r9
   d55ea:	b003      	add	sp, #12
   d55ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d55f0 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d55f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d55f4:	b08b      	sub	sp, #44	; 0x2c
   d55f6:	460e      	mov	r6, r1
   d55f8:	4615      	mov	r5, r2
   d55fa:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d55fc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d55fe:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5600:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5602:	f001 febb 	bl	d737c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5606:	42ae      	cmp	r6, r5
   d5608:	d229      	bcs.n	d565e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d560a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d560c:	4425      	add	r5, r4
			while(numBytes > 0) {
   d560e:	b18c      	cbz	r4, d5634 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5610:	2c1e      	cmp	r4, #30
   d5612:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5614:	f8d8 3000 	ldr.w	r3, [r8]
   d5618:	bf28      	it	cs
   d561a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d561c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d561e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5622:	aa02      	add	r2, sp, #8
   d5624:	463b      	mov	r3, r7
   d5626:	4631      	mov	r1, r6
   d5628:	4640      	mov	r0, r8
				framAddrTo -= count;
   d562a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d562c:	47c8      	blx	r9
				if (!result) {
   d562e:	b948      	cbnz	r0, d5644 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5630:	2400      	movs	r4, #0
   d5632:	e000      	b.n	d5636 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5634:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5636:	a801      	add	r0, sp, #4
   d5638:	f7ff ff0f 	bl	d545a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d563c:	4620      	mov	r0, r4
   d563e:	b00b      	add	sp, #44	; 0x2c
   d5640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5644:	f8d8 3000 	ldr.w	r3, [r8]
   d5648:	aa02      	add	r2, sp, #8
   d564a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d564e:	4629      	mov	r1, r5
   d5650:	463b      	mov	r3, r7
   d5652:	4640      	mov	r0, r8
   d5654:	47c8      	blx	r9
				if (!result) {
   d5656:	2800      	cmp	r0, #0
   d5658:	d0ea      	beq.n	d5630 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d565a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d565c:	e7d7      	b.n	d560e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d565e:	d9e9      	bls.n	d5634 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5660:	2c00      	cmp	r4, #0
   d5662:	d0e7      	beq.n	d5634 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5664:	f8d8 3000 	ldr.w	r3, [r8]
   d5668:	2c1e      	cmp	r4, #30
   d566a:	4627      	mov	r7, r4
   d566c:	bf28      	it	cs
   d566e:	271e      	movcs	r7, #30
   d5670:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5674:	aa02      	add	r2, sp, #8
   d5676:	463b      	mov	r3, r7
   d5678:	4631      	mov	r1, r6
   d567a:	4640      	mov	r0, r8
   d567c:	47c8      	blx	r9
				if (!result) {
   d567e:	2800      	cmp	r0, #0
   d5680:	d0d6      	beq.n	d5630 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5682:	f8d8 3000 	ldr.w	r3, [r8]
   d5686:	aa02      	add	r2, sp, #8
   d5688:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d568c:	4629      	mov	r1, r5
   d568e:	463b      	mov	r3, r7
   d5690:	4640      	mov	r0, r8
   d5692:	47c8      	blx	r9
				if (!result) {
   d5694:	2800      	cmp	r0, #0
   d5696:	d0cb      	beq.n	d5630 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5698:	443e      	add	r6, r7
				framAddrTo += count;
   d569a:	443d      	add	r5, r7
				numBytes -= count;
   d569c:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d569e:	e7df      	b.n	d5660 <_ZN6MB85RC8moveDataEjjj+0x70>

000d56a0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d56a0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d56a2:	4603      	mov	r3, r0
	switch (__op)
   d56a4:	d102      	bne.n	d56ac <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d56a6:	6001      	str	r1, [r0, #0]
      }
   d56a8:	2000      	movs	r0, #0
   d56aa:	4770      	bx	lr
	  switch (__op)
   d56ac:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d56ae:	bf04      	itt	eq
   d56b0:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d56b4:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d56b8:	e7f6      	b.n	d56a8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d56ba <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d56ba:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d56bc:	2301      	movs	r3, #1
   d56be:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d56c0:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d56c2:	4604      	mov	r4, r0
        if (th->func) {
   d56c4:	b143      	cbz	r3, d56d8 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d56c6:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56c8:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d56ca:	2301      	movs	r3, #1
   d56cc:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d56ce:	2000      	movs	r0, #0
    }
   d56d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d56d4:	f000 bf1e 	b.w	d6514 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d56d8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d56da:	2800      	cmp	r0, #0
   d56dc:	d0f5      	beq.n	d56ca <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d56de:	6883      	ldr	r3, [r0, #8]
   d56e0:	b90b      	cbnz	r3, d56e6 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d56e2:	f002 fd10 	bl	d8106 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56e6:	68c3      	ldr	r3, [r0, #12]
   d56e8:	e7ee      	b.n	d56c8 <_ZN6Thread3runEPv+0xe>

000d56ea <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d56ea:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d56ec:	6842      	ldr	r2, [r0, #4]
   d56ee:	4603      	mov	r3, r0
   d56f0:	1054      	asrs	r4, r2, #1
   d56f2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d56f6:	07d2      	lsls	r2, r2, #31
   d56f8:	bf48      	it	mi
   d56fa:	590a      	ldrmi	r2, [r1, r4]
   d56fc:	681b      	ldr	r3, [r3, #0]
      }
   d56fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5702:	bf48      	it	mi
   d5704:	58d3      	ldrmi	r3, [r2, r3]
   d5706:	4718      	bx	r3

000d5708 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5708:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d570a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d570c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d5710:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d5712:	3008      	adds	r0, #8
   d5714:	f000 fed6 	bl	d64c4 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5718:	2004      	movs	r0, #4
   d571a:	f7fe fcbc 	bl	d4096 <_Znwj>
   d571e:	4605      	mov	r5, r0
   d5720:	b398      	cbz	r0, d578a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d5722:	491b      	ldr	r1, [pc, #108]	; (d5790 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d5724:	2014      	movs	r0, #20
   d5726:	f002 fcea 	bl	d80fe <_ZnwjRKSt9nothrow_t>
   d572a:	b130      	cbz	r0, d573a <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d572c:	2300      	movs	r3, #0
            exited(false) {
   d572e:	e9c0 3300 	strd	r3, r3, [r0]
   d5732:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5736:	7403      	strb	r3, [r0, #16]
   d5738:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d573a:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d573c:	b1a0      	cbz	r0, d5768 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d573e:	4b15      	ldr	r3, [pc, #84]	; (d5794 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5740:	4915      	ldr	r1, [pc, #84]	; (d5798 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d5742:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5746:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d574a:	e9cd 0300 	strd	r0, r3, [sp]
   d574e:	2202      	movs	r2, #2
   d5750:	4b12      	ldr	r3, [pc, #72]	; (d579c <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d5752:	3004      	adds	r0, #4
   d5754:	f000 fe7e 	bl	d6454 <os_thread_create>
   d5758:	b930      	cbnz	r0, d5768 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d575a:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d575c:	7c1b      	ldrb	r3, [r3, #16]
   d575e:	b9a3      	cbnz	r3, d578a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d5760:	2001      	movs	r0, #1
   d5762:	f000 fef7 	bl	d6554 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5766:	e7f8      	b.n	d575a <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5768:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d576a:	2300      	movs	r3, #0
   d576c:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d576e:	b164      	cbz	r4, d578a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d5770:	6827      	ldr	r7, [r4, #0]
   d5772:	b137      	cbz	r7, d5782 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d5774:	4638      	mov	r0, r7
   d5776:	f7fe fd49 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d577a:	2110      	movs	r1, #16
   d577c:	4638      	mov	r0, r7
   d577e:	f002 fcbc 	bl	d80fa <_ZdlPvj>
   d5782:	2114      	movs	r1, #20
   d5784:	4620      	mov	r0, r4
   d5786:	f002 fcb8 	bl	d80fa <_ZdlPvj>
   d578a:	6075      	str	r5, [r6, #4]
}
   d578c:	b003      	add	sp, #12
   d578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5790:	000db20c 	.word	0x000db20c
   d5794:	000d59a7 	.word	0x000d59a7
   d5798:	000dae74 	.word	0x000dae74
   d579c:	000d56bb 	.word	0x000d56bb

000d57a0 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d57a0:	f247 5130 	movw	r1, #30000	; 0x7530
   d57a4:	4a08      	ldr	r2, [pc, #32]	; (d57c8 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d57a6:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d57a8:	4908      	ldr	r1, [pc, #32]	; (d57cc <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d57aa:	6002      	str	r2, [r0, #0]
   d57ac:	2200      	movs	r2, #0
   d57ae:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d57b2:	4907      	ldr	r1, [pc, #28]	; (d57d0 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d57b4:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d57b6:	4907      	ldr	r1, [pc, #28]	; (d57d4 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d57b8:	6042      	str	r2, [r0, #4]
   d57ba:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d57be:	6181      	str	r1, [r0, #24]
   d57c0:	8502      	strh	r2, [r0, #40]	; 0x28
   d57c2:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d57c6:	4770      	bx	lr
   d57c8:	000daf38 	.word	0x000daf38
   d57cc:	000d5b11 	.word	0x000d5b11
   d57d0:	000d56eb 	.word	0x000d56eb
   d57d4:	000d56a1 	.word	0x000d56a1

000d57d8 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d57d8:	b510      	push	{r4, lr}
   d57da:	4b04      	ldr	r3, [pc, #16]	; (d57ec <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d57dc:	4604      	mov	r4, r0
   d57de:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d57e2:	f7fe fd13 	bl	d420c <_ZNSt14_Function_baseD1Ev>
}
   d57e6:	4620      	mov	r0, r4
   d57e8:	bd10      	pop	{r4, pc}
   d57ea:	bf00      	nop
   d57ec:	000daf38 	.word	0x000daf38

000d57f0 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d57f0:	b510      	push	{r4, lr}
   d57f2:	4b03      	ldr	r3, [pc, #12]	; (d5800 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d57f4:	6003      	str	r3, [r0, #0]
   d57f6:	4604      	mov	r4, r0
   d57f8:	f7ff ffee 	bl	d57d8 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d57fc:	4620      	mov	r0, r4
   d57fe:	bd10      	pop	{r4, pc}
   d5800:	000daf60 	.word	0x000daf60

000d5804 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5804:	b510      	push	{r4, lr}
   d5806:	4604      	mov	r4, r0
}
   d5808:	f7ff fff2 	bl	d57f0 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d580c:	4620      	mov	r0, r4
   d580e:	2138      	movs	r1, #56	; 0x38
   d5810:	f002 fc73 	bl	d80fa <_ZdlPvj>
   d5814:	4620      	mov	r0, r4
   d5816:	bd10      	pop	{r4, pc}

000d5818 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5818:	6880      	ldr	r0, [r0, #8]
   d581a:	f000 be5b 	b.w	d64d4 <os_mutex_lock>

000d581e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d581e:	6880      	ldr	r0, [r0, #8]
   d5820:	f000 be60 	b.w	d64e4 <os_mutex_unlock>

000d5824 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d5824:	b510      	push	{r4, lr}
   d5826:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d5828:	6800      	ldr	r0, [r0, #0]
   d582a:	f7ff fff8 	bl	d581e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d582e:	4620      	mov	r0, r4
   d5830:	bd10      	pop	{r4, pc}

000d5832 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d5832:	b513      	push	{r0, r1, r4, lr}
   d5834:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5836:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5838:	f7ff ffee 	bl	d5818 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d583c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d583e:	88dc      	ldrh	r4, [r3, #6]
   d5840:	b2a4      	uxth	r4, r4
   d5842:	b10c      	cbz	r4, d5848 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d5844:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d5848:	a801      	add	r0, sp, #4
   d584a:	f7ff ffeb 	bl	d5824 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d584e:	4620      	mov	r0, r4
   d5850:	b002      	add	sp, #8
   d5852:	bd10      	pop	{r4, pc}

000d5854 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d5854:	b513      	push	{r0, r1, r4, lr}
   d5856:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5858:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d585a:	f7ff ffdd 	bl	d5818 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d585e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5862:	b943      	cbnz	r3, d5876 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5864:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d5866:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d5868:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d586a:	a801      	add	r0, sp, #4
   d586c:	f7ff ffda 	bl	d5824 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d5870:	4620      	mov	r0, r4
   d5872:	b002      	add	sp, #8
   d5874:	bd10      	pop	{r4, pc}
	bool result = false;
   d5876:	2400      	movs	r4, #0
   d5878:	e7f7      	b.n	d586a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d587a <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d587a:	b513      	push	{r0, r1, r4, lr}
   d587c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d587e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5880:	f7ff ffca 	bl	d5818 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d5884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d5886:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d5888:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d588a:	f7ff ffcb 	bl	d5824 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d588e:	4620      	mov	r0, r4
   d5890:	b002      	add	sp, #8
   d5892:	bd10      	pop	{r4, pc}

000d5894 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d5894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5898:	4699      	mov	r9, r3
   d589a:	b086      	sub	sp, #24
	if (!haveSetup) {
   d589c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d58a0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d58a4:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d58a8:	4604      	mov	r4, r0
   d58aa:	460f      	mov	r7, r1
   d58ac:	4616      	mov	r6, r2
	if (!haveSetup) {
   d58ae:	b913      	cbnz	r3, d58b6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d58b0:	6803      	ldr	r3, [r0, #0]
   d58b2:	689b      	ldr	r3, [r3, #8]
   d58b4:	4798      	blx	r3
		data = "";
   d58b6:	4b31      	ldr	r3, [pc, #196]	; (d597c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d58b8:	4638      	mov	r0, r7
		data = "";
   d58ba:	2e00      	cmp	r6, #0
   d58bc:	bf08      	it	eq
   d58be:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d58c0:	f003 f9d9 	bl	d8c76 <strlen>
   d58c4:	4605      	mov	r5, r0
   d58c6:	4630      	mov	r0, r6
   d58c8:	f003 f9d5 	bl	d8c76 <strlen>
   d58cc:	4428      	add	r0, r5
   d58ce:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d58d2:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d58d4:	bf1c      	itt	ne
   d58d6:	f025 0503 	bicne.w	r5, r5, #3
   d58da:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d58dc:	4633      	mov	r3, r6
   d58de:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d58e2:	e9cd 9a00 	strd	r9, sl, [sp]
   d58e6:	4926      	ldr	r1, [pc, #152]	; (d5980 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d58e8:	4826      	ldr	r0, [pc, #152]	; (d5984 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d58ea:	463a      	mov	r2, r7
   d58ec:	f7ff fd90 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d58f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d58f2:	3b08      	subs	r3, #8
   d58f4:	42ab      	cmp	r3, r5
   d58f6:	d212      	bcs.n	d591e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d58f8:	2400      	movs	r4, #0
}
   d58fa:	4620      	mov	r0, r4
   d58fc:	b006      	add	sp, #24
   d58fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d5902:	88cb      	ldrh	r3, [r1, #6]
   d5904:	2b01      	cmp	r3, #1
   d5906:	d036      	beq.n	d5976 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d5908:	a805      	add	r0, sp, #20
   d590a:	f7ff ff8b 	bl	d5824 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d590e:	6823      	ldr	r3, [r4, #0]
   d5910:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d5914:	699b      	ldr	r3, [r3, #24]
   d5916:	4620      	mov	r0, r4
   d5918:	4798      	blx	r3
   d591a:	2800      	cmp	r0, #0
   d591c:	d0ec      	beq.n	d58f8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d591e:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5920:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d5922:	f7ff ff79 	bl	d5818 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5926:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5928:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d592a:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d592c:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d592e:	1ad2      	subs	r2, r2, r3
   d5930:	42aa      	cmp	r2, r5
   d5932:	d3e6      	bcc.n	d5902 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d5934:	ea48 080a 	orr.w	r8, r8, sl
   d5938:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d593c:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d5940:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d5942:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d5946:	4639      	mov	r1, r7
   d5948:	4640      	mov	r0, r8
   d594a:	f003 f96f 	bl	d8c2c <strcpy>
				cp += strlen(cp) + 1;
   d594e:	4640      	mov	r0, r8
   d5950:	f003 f991 	bl	d8c76 <strlen>
   d5954:	3001      	adds	r0, #1
				strcpy(cp, data);
   d5956:	4631      	mov	r1, r6
   d5958:	4440      	add	r0, r8
   d595a:	f003 f967 	bl	d8c2c <strcpy>
				nextFree += size;
   d595e:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d5962:	441d      	add	r5, r3
   d5964:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d5966:	88d3      	ldrh	r3, [r2, #6]
   d5968:	3301      	adds	r3, #1
   d596a:	80d3      	strh	r3, [r2, #6]
				return true;
   d596c:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d596e:	a805      	add	r0, sp, #20
   d5970:	f7ff ff58 	bl	d5824 <_ZN11StMutexLockD1Ev>
   d5974:	e7c1      	b.n	d58fa <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d5976:	2400      	movs	r4, #0
   d5978:	e7f9      	b.n	d596e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d597a:	bf00      	nop
   d597c:	000db22c 	.word	0x000db22c
   d5980:	000dae86 	.word	0x000dae86
   d5984:	2003e5d0 	.word	0x2003e5d0

000d5988 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d5988:	b508      	push	{r3, lr}
   d598a:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d598c:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d5990:	69a3      	ldr	r3, [r4, #24]
   d5992:	b90b      	cbnz	r3, d5998 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d5994:	f002 fbb7 	bl	d8106 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5998:	69e3      	ldr	r3, [r4, #28]
   d599a:	4621      	mov	r1, r4
   d599c:	4628      	mov	r0, r5
   d599e:	4798      	blx	r3
		os_thread_yield();
   d59a0:	f000 fd60 	bl	d6464 <os_thread_yield>
	while(true) {
   d59a4:	e7f4      	b.n	d5990 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d59a6 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d59a6:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d59a8:	f7ff ffee 	bl	d5988 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d59ac <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d59ac:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d59ae:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d59b2:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d59b4:	4628      	mov	r0, r5
   d59b6:	f003 f95e 	bl	d8c76 <strlen>
   d59ba:	3001      	adds	r0, #1
   d59bc:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d59be:	4628      	mov	r0, r5
   d59c0:	f003 f959 	bl	d8c76 <strlen>
	size_t offset = start - retainedBuffer;
   d59c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d59c6:	3001      	adds	r0, #1
   d59c8:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d59ca:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d59cc:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d59d0:	bf1c      	itt	ne
   d59d2:	f1c3 0304 	rsbne	r3, r3, #4
   d59d6:	18c0      	addne	r0, r0, r3
}
   d59d8:	bd68      	pop	{r3, r5, r6, pc}

000d59da <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d59da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d59dc:	4604      	mov	r4, r0
   d59de:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d59e0:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d59e2:	f7ff ff19 	bl	d5818 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d59e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d59e8:	88fb      	ldrh	r3, [r7, #6]
   d59ea:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d59ee:	b1e6      	cbz	r6, d5a2a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d59f0:	2b01      	cmp	r3, #1
   d59f2:	d922      	bls.n	d5a3a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d59f4:	4629      	mov	r1, r5
   d59f6:	4620      	mov	r0, r4
   d59f8:	f7ff ffd8 	bl	d59ac <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d59fc:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d59fe:	4629      	mov	r1, r5
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff ffd3 	bl	d59ac <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5a06:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d5a08:	443a      	add	r2, r7
	if (after > 0) {
   d5a0a:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d5a0c:	4601      	mov	r1, r0
	size_t len = next - start;
   d5a0e:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d5a12:	d002      	beq.n	d5a1a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d5a14:	4628      	mov	r0, r5
   d5a16:	f003 f8b9 	bl	d8b8c <memmove>
	nextFree -= len;
   d5a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5a1c:	1b9b      	subs	r3, r3, r6
   d5a1e:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d5a20:	88fb      	ldrh	r3, [r7, #6]
   d5a22:	3b01      	subs	r3, #1
   d5a24:	80fb      	strh	r3, [r7, #6]
	return true;
   d5a26:	2601      	movs	r6, #1
   d5a28:	e001      	b.n	d5a2e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d5a2a:	2b00      	cmp	r3, #0
   d5a2c:	d1e7      	bne.n	d59fe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d5a2e:	a801      	add	r0, sp, #4
   d5a30:	f7ff fef8 	bl	d5824 <_ZN11StMutexLockD1Ev>
}
   d5a34:	4630      	mov	r0, r6
   d5a36:	b003      	add	sp, #12
   d5a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d5a3a:	2600      	movs	r6, #0
   d5a3c:	e7f7      	b.n	d5a2e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d5a40 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a44:	460d      	mov	r5, r1
   d5a46:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a48:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5a4a:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a4c:	f7ff fea8 	bl	d57a0 <_ZN21PublishQueueAsyncBaseC1Ev>
   d5a50:	4b15      	ldr	r3, [pc, #84]	; (d5aa8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a52:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a56:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a58:	4b14      	ldr	r3, [pc, #80]	; (d5aac <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a5a:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a5c:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a5e:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a60:	4698      	mov	r8, r3
   d5a62:	d117      	bne.n	d5a94 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d5a64:	88ab      	ldrh	r3, [r5, #4]
   d5a66:	b29b      	uxth	r3, r3
   d5a68:	42b3      	cmp	r3, r6
   d5a6a:	d113      	bne.n	d5a94 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5a6c:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5a70:	6367      	str	r7, [r4, #52]	; 0x34
   d5a72:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d5a76:	88eb      	ldrh	r3, [r5, #6]
   d5a78:	fa1f f289 	uxth.w	r2, r9
   d5a7c:	b29b      	uxth	r3, r3
   d5a7e:	429a      	cmp	r2, r3
   d5a80:	d20e      	bcs.n	d5aa0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d5a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5a84:	4620      	mov	r0, r4
   d5a86:	f7ff ff91 	bl	d59ac <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d5a8a:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d5a8c:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d5a8e:	f109 0901 	add.w	r9, r9, #1
   d5a92:	d9f0      	bls.n	d5a76 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d5a94:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d5a96:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5a9a:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d5a9c:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d5a9e:	80eb      	strh	r3, [r5, #6]
}
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5aa6:	bf00      	nop
   d5aa8:	000daf60 	.word	0x000daf60
   d5aac:	d19cab61 	.word	0xd19cab61

000d5ab0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d5ab0:	b510      	push	{r4, lr}
   d5ab2:	e9d1 2300 	ldrd	r2, r3, [r1]
   d5ab6:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d5ab8:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d5aba:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5abc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d5abe:	b90a      	cbnz	r2, d5ac4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d5ac0:	07d9      	lsls	r1, r3, #31
   d5ac2:	d505      	bpl.n	d5ad0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5ac8:	4b0f      	ldr	r3, [pc, #60]	; (d5b08 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d5aca:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5acc:	4b0f      	ldr	r3, [pc, #60]	; (d5b0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d5ace:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ad0:	ab02      	add	r3, sp, #8
   d5ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5ad6:	466a      	mov	r2, sp
   d5ad8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5adc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5ae0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ae8:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5aea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5aee:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5af0:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5af2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5af4:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d5af6:	4618      	mov	r0, r3
   d5af8:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5afa:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5afc:	9105      	str	r1, [sp, #20]
   d5afe:	f7fe fb85 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	}
   d5b02:	4620      	mov	r0, r4
   d5b04:	b006      	add	sp, #24
   d5b06:	bd10      	pop	{r4, pc}
   d5b08:	000d56eb 	.word	0x000d56eb
   d5b0c:	000d56a1 	.word	0x000d56a1

000d5b10 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d5b10:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5b12:	4b05      	ldr	r3, [pc, #20]	; (d5b28 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d5b14:	9300      	str	r3, [sp, #0]
   d5b16:	4669      	mov	r1, sp
   d5b18:	2300      	movs	r3, #0
   d5b1a:	3010      	adds	r0, #16
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	f7ff ffc7 	bl	d5ab0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5b22:	b003      	add	sp, #12
   d5b24:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b28:	000d5b59 	.word	0x000d5b59

000d5b2c <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d5b2c:	b513      	push	{r0, r1, r4, lr}
   d5b2e:	4604      	mov	r4, r0
   d5b30:	f000 fd20 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d5b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5b36:	1ac0      	subs	r0, r0, r3
   d5b38:	68e3      	ldr	r3, [r4, #12]
   d5b3a:	4298      	cmp	r0, r3
   d5b3c:	d308      	bcc.n	d5b50 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5b3e:	4b05      	ldr	r3, [pc, #20]	; (d5b54 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d5b40:	9300      	str	r3, [sp, #0]
   d5b42:	4669      	mov	r1, sp
   d5b44:	2300      	movs	r3, #0
   d5b46:	f104 0010 	add.w	r0, r4, #16
   d5b4a:	9301      	str	r3, [sp, #4]
   d5b4c:	f7ff ffb0 	bl	d5ab0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5b50:	b002      	add	sp, #8
   d5b52:	bd10      	pop	{r4, pc}
   d5b54:	000d5b59 	.word	0x000d5b59

000d5b58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d5b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5b5c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d5b60:	b086      	sub	sp, #24
   d5b62:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5b64:	2b00      	cmp	r3, #0
   d5b66:	d164      	bne.n	d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5b68:	f000 fee4 	bl	d6934 <spark_cloud_flag_connected>
   d5b6c:	2800      	cmp	r0, #0
   d5b6e:	d060      	beq.n	d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5b70:	f000 fd00 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
   d5b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5b76:	1ac0      	subs	r0, r0, r3
   d5b78:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d5b7c:	4298      	cmp	r0, r3
   d5b7e:	d958      	bls.n	d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d5b80:	6823      	ldr	r3, [r4, #0]
   d5b82:	4620      	mov	r0, r4
   d5b84:	695b      	ldr	r3, [r3, #20]
   d5b86:	4798      	blx	r3
		if (data) {
   d5b88:	4605      	mov	r5, r0
   d5b8a:	2800      	cmp	r0, #0
   d5b8c:	d051      	beq.n	d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d5b8e:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d5b92:	2301      	movs	r3, #1
   d5b94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d5b98:	4638      	mov	r0, r7
   d5b9a:	f003 f86c 	bl	d8c76 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d5b9e:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5ba2:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d5ba6:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5ba8:	682b      	ldr	r3, [r5, #0]
   d5baa:	492b      	ldr	r1, [pc, #172]	; (d5c58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d5bac:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d5bae:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5bb0:	4633      	mov	r3, r6
   d5bb2:	482a      	ldr	r0, [pc, #168]	; (d5c5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5bb4:	463a      	mov	r2, r7
   d5bb6:	f7ff fc2b 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d5bba:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5bbc:	f88d 8000 	strb.w	r8, [sp]
   d5bc0:	4632      	mov	r2, r6
   d5bc2:	4639      	mov	r1, r7
   d5bc4:	a802      	add	r0, sp, #8
   d5bc6:	f001 f9a7 	bl	d6f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5bca:	9d02      	ldr	r5, [sp, #8]
   d5bcc:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d5bce:	b91b      	cbnz	r3, d5bd8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d5bd0:	2001      	movs	r0, #1
   d5bd2:	f000 ff9f 	bl	d6b14 <delay>
			while(!request.isDone()) {
   d5bd6:	e7f8      	b.n	d5bca <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5bd8:	2000      	movs	r0, #0
   d5bda:	f000 fe55 	bl	d6888 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5bde:	b120      	cbz	r0, d5bea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d5be0:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5be2:	b913      	cbnz	r3, d5bea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d5be4:	f000 fe9e 	bl	d6924 <spark_process>
    }
   d5be8:	e7fa      	b.n	d5be0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5bea:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d5bec:	2b01      	cmp	r3, #1
   d5bee:	d123      	bne.n	d5c38 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d5bf0:	491b      	ldr	r1, [pc, #108]	; (d5c60 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d5bf2:	481a      	ldr	r0, [pc, #104]	; (d5c5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5bf4:	f7ff fc0c 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d5bf8:	6823      	ldr	r3, [r4, #0]
   d5bfa:	2100      	movs	r1, #0
   d5bfc:	699b      	ldr	r3, [r3, #24]
   d5bfe:	4620      	mov	r0, r4
   d5c00:	4798      	blx	r3
			isSending = false;
   d5c02:	2300      	movs	r3, #0
   d5c04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d5c08:	f000 fcb4 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d5c0c:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d5c0e:	9c03      	ldr	r4, [sp, #12]
   d5c10:	b17c      	cbz	r4, d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d5c12:	6863      	ldr	r3, [r4, #4]
   d5c14:	3b01      	subs	r3, #1
   d5c16:	6063      	str	r3, [r4, #4]
   d5c18:	b95b      	cbnz	r3, d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d5c1a:	6823      	ldr	r3, [r4, #0]
   d5c1c:	4620      	mov	r0, r4
   d5c1e:	689b      	ldr	r3, [r3, #8]
   d5c20:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c22:	68a3      	ldr	r3, [r4, #8]
   d5c24:	3b01      	subs	r3, #1
   d5c26:	60a3      	str	r3, [r4, #8]
   d5c28:	b91b      	cbnz	r3, d5c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d5c2a:	6823      	ldr	r3, [r4, #0]
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	68db      	ldr	r3, [r3, #12]
   d5c30:	4798      	blx	r3
}
   d5c32:	b006      	add	sp, #24
   d5c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d5c38:	68e2      	ldr	r2, [r4, #12]
   d5c3a:	490a      	ldr	r1, [pc, #40]	; (d5c64 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d5c3c:	4807      	ldr	r0, [pc, #28]	; (d5c5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5c3e:	f7ff fbe7 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d5c42:	4b09      	ldr	r3, [pc, #36]	; (d5c68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d5c44:	9304      	str	r3, [sp, #16]
   d5c46:	a904      	add	r1, sp, #16
   d5c48:	2300      	movs	r3, #0
   d5c4a:	f104 0010 	add.w	r0, r4, #16
   d5c4e:	9305      	str	r3, [sp, #20]
   d5c50:	f7ff ff2e 	bl	d5ab0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5c54:	e7d5      	b.n	d5c02 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d5c56:	bf00      	nop
   d5c58:	000daec7 	.word	0x000daec7
   d5c5c:	2003e5d0 	.word	0x2003e5d0
   d5c60:	000daee8 	.word	0x000daee8
   d5c64:	000daeff 	.word	0x000daeff
   d5c68:	000d5b2d 	.word	0x000d5b2d

000d5c6c <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
   d5c6c:	4b01      	ldr	r3, [pc, #4]	; (d5c74 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d5c6e:	4a02      	ldr	r2, [pc, #8]	; (d5c78 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d5c70:	601a      	str	r2, [r3, #0]
}
   d5c72:	4770      	bx	lr
   d5c74:	2003e5d0 	.word	0x2003e5d0
   d5c78:	000daf26 	.word	0x000daf26

000d5c7c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5c7c:	2040      	movs	r0, #64	; 0x40
   d5c7e:	4770      	bx	lr

000d5c80 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5c80:	2000      	movs	r0, #0
   d5c82:	4770      	bx	lr

000d5c84 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5c84:	2080      	movs	r0, #128	; 0x80
   d5c86:	4770      	bx	lr

000d5c88 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5c88:	20ff      	movs	r0, #255	; 0xff
   d5c8a:	4770      	bx	lr

000d5c8c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5c8c:	4770      	bx	lr

000d5c8e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5c8e:	4770      	bx	lr

000d5c90 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5c90:	4770      	bx	lr

000d5c92 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5c92:	4770      	bx	lr

000d5c94 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5c94:	b510      	push	{r4, lr}
}
   d5c96:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5c98:	4604      	mov	r4, r0
}
   d5c9a:	f002 fa2e 	bl	d80fa <_ZdlPvj>
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	bd10      	pop	{r4, pc}

000d5ca2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5ca2:	b510      	push	{r4, lr}
}
   d5ca4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5ca6:	4604      	mov	r4, r0
}
   d5ca8:	f002 fa27 	bl	d80fa <_ZdlPvj>
   d5cac:	4620      	mov	r0, r4
   d5cae:	bd10      	pop	{r4, pc}

000d5cb0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5cb0:	b510      	push	{r4, lr}
}
   d5cb2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5cb4:	4604      	mov	r4, r0
}
   d5cb6:	f002 fa20 	bl	d80fa <_ZdlPvj>
   d5cba:	4620      	mov	r0, r4
   d5cbc:	bd10      	pop	{r4, pc}

000d5cbe <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5cbe:	b510      	push	{r4, lr}
}
   d5cc0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5cc2:	4604      	mov	r4, r0
}
   d5cc4:	f002 fa19 	bl	d80fa <_ZdlPvj>
   d5cc8:	4620      	mov	r0, r4
   d5cca:	bd10      	pop	{r4, pc}

000d5ccc <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5ccc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5cd0:	6803      	ldr	r3, [r0, #0]
   d5cd2:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5cd4:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5cd6:	4798      	blx	r3
   d5cd8:	2210      	movs	r2, #16
   d5cda:	4601      	mov	r1, r0
   d5cdc:	4668      	mov	r0, sp
   d5cde:	f002 ff6f 	bl	d8bc0 <memset>
	size_t len = length();
   d5ce2:	6823      	ldr	r3, [r4, #0]
   d5ce4:	4620      	mov	r0, r4
   d5ce6:	689b      	ldr	r3, [r3, #8]
   d5ce8:	4798      	blx	r3
	size_t offset = 0;
   d5cea:	2500      	movs	r5, #0
	size_t len = length();
   d5cec:	4607      	mov	r7, r0
	bool bResult = false;
   d5cee:	4628      	mov	r0, r5
	while(offset < len) {
   d5cf0:	42bd      	cmp	r5, r7
   d5cf2:	d20e      	bcs.n	d5d12 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5cf4:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5cf6:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5cf8:	2e10      	cmp	r6, #16
   d5cfa:	bf28      	it	cs
   d5cfc:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5cfe:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5d02:	466a      	mov	r2, sp
   d5d04:	4633      	mov	r3, r6
   d5d06:	4629      	mov	r1, r5
   d5d08:	4620      	mov	r0, r4
   d5d0a:	47c0      	blx	r8
		if (!bResult) {
   d5d0c:	b108      	cbz	r0, d5d12 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5d0e:	4435      	add	r5, r6
	while(offset < len) {
   d5d10:	e7ee      	b.n	d5cf0 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5d12:	b004      	add	sp, #16
   d5d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d18 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5d18:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5d1c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5d1e:	f240 1301 	movw	r3, #257	; 0x101
   d5d22:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5d24:	2300      	movs	r3, #0
   d5d26:	8203      	strh	r3, [r0, #16]
}
   d5d28:	4770      	bx	lr
	...

000d5d2c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b06      	ldr	r3, [pc, #24]	; (d5d48 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5d30:	6003      	str	r3, [r0, #0]
   d5d32:	4b06      	ldr	r3, [pc, #24]	; (d5d4c <_ZN12MCP79410TimeC1Ev+0x20>)
   d5d34:	6043      	str	r3, [r0, #4]
   d5d36:	f240 7304 	movw	r3, #1796	; 0x704
   d5d3a:	8103      	strh	r3, [r0, #8]
   d5d3c:	2300      	movs	r3, #0
   d5d3e:	7443      	strb	r3, [r0, #17]
	clear();
   d5d40:	f7ff ffea 	bl	d5d18 <_ZN12MCP79410Time5clearEv>
}
   d5d44:	bd08      	pop	{r3, pc}
   d5d46:	bf00      	nop
   d5d48:	000db04c 	.word	0x000db04c
   d5d4c:	03020100 	.word	0x03020100

000d5d50 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d50:	0903      	lsrs	r3, r0, #4
}
   d5d52:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d54:	f000 000f 	and.w	r0, r0, #15
}
   d5d58:	fb02 0003 	mla	r0, r2, r3, r0
   d5d5c:	4770      	bx	lr

000d5d5e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5d5e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5d60:	7a80      	ldrb	r0, [r0, #10]
   d5d62:	f7ff fff5 	bl	d5d50 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5d66:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5d6a:	bd08      	pop	{r3, pc}

000d5d6c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5d6c:	7ac0      	ldrb	r0, [r0, #11]
   d5d6e:	f000 001f 	and.w	r0, r0, #31
   d5d72:	f7ff bfed 	b.w	d5d50 <_ZN12MCP79410Time8bcdToIntEh>

000d5d76 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5d76:	7b00      	ldrb	r0, [r0, #12]
   d5d78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5d7c:	f7ff bfe8 	b.w	d5d50 <_ZN12MCP79410Time8bcdToIntEh>

000d5d80 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5d80:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5d82:	7b81      	ldrb	r1, [r0, #14]
   d5d84:	064a      	lsls	r2, r1, #25
   d5d86:	d50d      	bpl.n	d5da4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5d88:	f001 001f 	and.w	r0, r1, #31
   d5d8c:	f7ff ffe0 	bl	d5d50 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5d90:	068b      	lsls	r3, r1, #26
   d5d92:	d503      	bpl.n	d5d9c <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5d94:	280c      	cmp	r0, #12
   d5d96:	d000      	beq.n	d5d9a <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5d98:	300c      	adds	r0, #12
}
   d5d9a:	bd08      	pop	{r3, pc}
				return 0;
   d5d9c:	280c      	cmp	r0, #12
   d5d9e:	bf08      	it	eq
   d5da0:	2000      	moveq	r0, #0
   d5da2:	e7fa      	b.n	d5d9a <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5da8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5dac:	f7ff bfd0 	b.w	d5d50 <_ZN12MCP79410Time8bcdToIntEh>

000d5db0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5db0:	7bc0      	ldrb	r0, [r0, #15]
   d5db2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5db6:	f7ff bfcb 	b.w	d5d50 <_ZN12MCP79410Time8bcdToIntEh>

000d5dba <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5dba:	7c00      	ldrb	r0, [r0, #16]
   d5dbc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5dc0:	f7ff bfc6 	b.w	d5d50 <_ZN12MCP79410Time8bcdToIntEh>

000d5dc4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5dc4:	b510      	push	{r4, lr}
   d5dc6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5dc8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5dca:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5dcc:	2100      	movs	r1, #0
   d5dce:	a801      	add	r0, sp, #4
   d5dd0:	f002 fef6 	bl	d8bc0 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	f7ff ffc2 	bl	d5d5e <_ZNK12MCP79410Time7getYearEv>
   d5dda:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5dde:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5de0:	4620      	mov	r0, r4
   d5de2:	f7ff ffc3 	bl	d5d6c <_ZNK12MCP79410Time8getMonthEv>
   d5de6:	3801      	subs	r0, #1
   d5de8:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5dea:	4620      	mov	r0, r4
   d5dec:	f7ff ffc3 	bl	d5d76 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5df0:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5df2:	4620      	mov	r0, r4
   d5df4:	f7ff ffc4 	bl	d5d80 <_ZNK12MCP79410Time7getHourEv>
   d5df8:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	f7ff ffd8 	bl	d5db0 <_ZNK12MCP79410Time9getMinuteEv>
   d5e00:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff ffd9 	bl	d5dba <_ZNK12MCP79410Time9getSecondEv>
   d5e08:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5e0a:	a801      	add	r0, sp, #4
   d5e0c:	f000 fe7a 	bl	d6b04 <mktime>
}
   d5e10:	b00a      	add	sp, #40	; 0x28
   d5e12:	bd10      	pop	{r4, pc}

000d5e14 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5e14:	210a      	movs	r1, #10
   d5e16:	fb90 f2f1 	sdiv	r2, r0, r1
   d5e1a:	fb92 f3f1 	sdiv	r3, r2, r1
   d5e1e:	fb01 2313 	mls	r3, r1, r3, r2
   d5e22:	011b      	lsls	r3, r3, #4
   d5e24:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5e26:	fb01 0012 	mls	r0, r1, r2, r0
   d5e2a:	4318      	orrs	r0, r3
}
   d5e2c:	b2c0      	uxtb	r0, r0
   d5e2e:	4770      	bx	lr

000d5e30 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5e30:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5e32:	b510      	push	{r4, lr}
   d5e34:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5e36:	fb91 f0f3 	sdiv	r0, r1, r3
   d5e3a:	fb00 1013 	mls	r0, r0, r3, r1
   d5e3e:	f7ff ffe9 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
   d5e42:	72a0      	strb	r0, [r4, #10]
}
   d5e44:	bd10      	pop	{r4, pc}

000d5e46 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5e46:	b510      	push	{r4, lr}
   d5e48:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5e4a:	4608      	mov	r0, r1
   d5e4c:	f7ff ffe2 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
   d5e50:	72e0      	strb	r0, [r4, #11]
}
   d5e52:	bd10      	pop	{r4, pc}

000d5e54 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5e54:	b510      	push	{r4, lr}
   d5e56:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5e58:	4608      	mov	r0, r1
   d5e5a:	f7ff ffdb 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5e5e:	7b23      	ldrb	r3, [r4, #12]
   d5e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5e64:	4318      	orrs	r0, r3
   d5e66:	7320      	strb	r0, [r4, #12]
}
   d5e68:	bd10      	pop	{r4, pc}

000d5e6a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5e6a:	b510      	push	{r4, lr}
   d5e6c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5e6e:	1c48      	adds	r0, r1, #1
   d5e70:	f7ff ffd0 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5e74:	7b63      	ldrb	r3, [r4, #13]
   d5e76:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5e7a:	4318      	orrs	r0, r3
   d5e7c:	7360      	strb	r0, [r4, #13]
}
   d5e7e:	bd10      	pop	{r4, pc}

000d5e80 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5e80:	b510      	push	{r4, lr}
   d5e82:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5e84:	4608      	mov	r0, r1
   d5e86:	f7ff ffc5 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
   d5e8a:	73a0      	strb	r0, [r4, #14]
}
   d5e8c:	bd10      	pop	{r4, pc}

000d5e8e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5e8e:	b510      	push	{r4, lr}
   d5e90:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5e92:	4608      	mov	r0, r1
   d5e94:	f7ff ffbe 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
   d5e98:	73e0      	strb	r0, [r4, #15]
}
   d5e9a:	bd10      	pop	{r4, pc}

000d5e9c <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5e9c:	b510      	push	{r4, lr}
   d5e9e:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5ea0:	4608      	mov	r0, r1
   d5ea2:	f7ff ffb7 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5ea6:	7c23      	ldrb	r3, [r4, #16]
   d5ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5eac:	4318      	orrs	r0, r3
   d5eae:	7420      	strb	r0, [r4, #16]
}
   d5eb0:	bd10      	pop	{r4, pc}

000d5eb2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5eb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5eb4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5eb6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5eb8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5ebc:	f002 fe46 	bl	d8b4c <gmtime>
   d5ec0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5ec2:	6941      	ldr	r1, [r0, #20]
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	f7ff ffb3 	bl	d5e30 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5eca:	6929      	ldr	r1, [r5, #16]
   d5ecc:	4620      	mov	r0, r4
   d5ece:	3101      	adds	r1, #1
   d5ed0:	f7ff ffb9 	bl	d5e46 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5ed4:	68e9      	ldr	r1, [r5, #12]
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	f7ff ffbc 	bl	d5e54 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5edc:	69a9      	ldr	r1, [r5, #24]
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ffc3 	bl	d5e6a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5ee4:	68a9      	ldr	r1, [r5, #8]
   d5ee6:	4620      	mov	r0, r4
   d5ee8:	f7ff ffca 	bl	d5e80 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5eec:	6869      	ldr	r1, [r5, #4]
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff ffcd 	bl	d5e8e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5ef4:	6829      	ldr	r1, [r5, #0]
   d5ef6:	293b      	cmp	r1, #59	; 0x3b
   d5ef8:	bfa8      	it	ge
   d5efa:	213b      	movge	r1, #59	; 0x3b
   d5efc:	4620      	mov	r0, r4
   d5efe:	f7ff ffcd 	bl	d5e9c <_ZN12MCP79410Time9setSecondEi>
}
   d5f02:	b003      	add	sp, #12
   d5f04:	bd30      	pop	{r4, r5, pc}
	...

000d5f08 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f08:	4a05      	ldr	r2, [pc, #20]	; (d5f20 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f0a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f0c:	e9c0 2100 	strd	r2, r1, [r0]
   d5f10:	4a04      	ldr	r2, [pc, #16]	; (d5f24 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5f12:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f14:	4a04      	ldr	r2, [pc, #16]	; (d5f28 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5f16:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f18:	4a04      	ldr	r2, [pc, #16]	; (d5f2c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f1a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f1c:	6142      	str	r2, [r0, #20]
}
   d5f1e:	4770      	bx	lr
   d5f20:	000db080 	.word	0x000db080
   d5f24:	03010000 	.word	0x03010000
   d5f28:	000db028 	.word	0x000db028
   d5f2c:	000db05c 	.word	0x000db05c

000d5f30 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f34:	4604      	mov	r4, r0
   d5f36:	460f      	mov	r7, r1
   d5f38:	4690      	mov	r8, r2
   d5f3a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5f3c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f40:	429e      	cmp	r6, r3
   d5f42:	d231      	bcs.n	d5fa8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5f44:	6860      	ldr	r0, [r4, #4]
   d5f46:	4639      	mov	r1, r7
   d5f48:	f001 fa0a 	bl	d7360 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5f4c:	eb08 0106 	add.w	r1, r8, r6
   d5f50:	6860      	ldr	r0, [r4, #4]
   d5f52:	f7ff fa59 	bl	d5408 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5f56:	6860      	ldr	r0, [r4, #4]
   d5f58:	2100      	movs	r1, #0
   d5f5a:	f001 fa08 	bl	d736e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5f5e:	4605      	mov	r5, r0
   d5f60:	b9d0      	cbnz	r0, d5f98 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5f64:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5f66:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5f68:	2a20      	cmp	r2, #32
   d5f6a:	f04f 0301 	mov.w	r3, #1
   d5f6e:	bf28      	it	cs
   d5f70:	2220      	movcs	r2, #32
   d5f72:	4639      	mov	r1, r7
   d5f74:	f001 f9df 	bl	d7336 <_ZN7TwoWire11requestFromEhjh>
   d5f78:	eb09 0b06 	add.w	fp, r9, r6
   d5f7c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d5f7e:	eb0b 0a00 	add.w	sl, fp, r0
   d5f82:	45da      	cmp	sl, fp
   d5f84:	d006      	beq.n	d5f94 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5f86:	6860      	ldr	r0, [r4, #4]
   d5f88:	6803      	ldr	r3, [r0, #0]
   d5f8a:	695b      	ldr	r3, [r3, #20]
   d5f8c:	4798      	blx	r3
   d5f8e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5f92:	e7f6      	b.n	d5f82 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5f94:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5f96:	e7d2      	b.n	d5f3e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5f98:	4602      	mov	r2, r0
   d5f9a:	4904      	ldr	r1, [pc, #16]	; (d5fac <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5f9c:	4804      	ldr	r0, [pc, #16]	; (d5fb0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5f9e:	f7ff fa37 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5fa2:	4628      	mov	r0, r5
   d5fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fa8:	2500      	movs	r5, #0
	return stat;
   d5faa:	e7fa      	b.n	d5fa2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5fac:	000daf80 	.word	0x000daf80
   d5fb0:	2003e5d4 	.word	0x2003e5d4

000d5fb4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5fb8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fbc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5fbe:	6803      	ldr	r3, [r0, #0]
   d5fc0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fc2:	4605      	mov	r5, r0
   d5fc4:	460c      	mov	r4, r1
   d5fc6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5fc8:	4798      	blx	r3
   d5fca:	4580      	cmp	r8, r0
   d5fcc:	d80d      	bhi.n	d5fea <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5fce:	3420      	adds	r4, #32
   d5fd0:	6868      	ldr	r0, [r5, #4]
   d5fd2:	9600      	str	r6, [sp, #0]
   d5fd4:	463b      	mov	r3, r7
   d5fd6:	b2e2      	uxtb	r2, r4
   d5fd8:	216f      	movs	r1, #111	; 0x6f
   d5fda:	f7ff ffa9 	bl	d5f30 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5fde:	fab0 f080 	clz	r0, r0
   d5fe2:	0940      	lsrs	r0, r0, #5
}
   d5fe4:	b002      	add	sp, #8
   d5fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5fea:	2000      	movs	r0, #0
   d5fec:	e7fa      	b.n	d5fe4 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d5fee <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5ff2:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5ff6:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5ff8:	6803      	ldr	r3, [r0, #0]
   d5ffa:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5ffc:	4604      	mov	r4, r0
   d5ffe:	460d      	mov	r5, r1
   d6000:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6002:	4798      	blx	r3
   d6004:	4580      	cmp	r8, r0
   d6006:	d80c      	bhi.n	d6022 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6008:	6860      	ldr	r0, [r4, #4]
   d600a:	9600      	str	r6, [sp, #0]
   d600c:	463b      	mov	r3, r7
   d600e:	b2ea      	uxtb	r2, r5
   d6010:	2157      	movs	r1, #87	; 0x57
   d6012:	f7ff ff8d 	bl	d5f30 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6016:	fab0 f080 	clz	r0, r0
   d601a:	0940      	lsrs	r0, r0, #5
}
   d601c:	b002      	add	sp, #8
   d601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6022:	2000      	movs	r0, #0
   d6024:	e7fa      	b.n	d601c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6026 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6026:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6028:	1e1e      	subs	r6, r3, #0
   d602a:	bf0c      	ite	eq
   d602c:	2307      	moveq	r3, #7
   d602e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6030:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6032:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6034:	ab02      	add	r3, sp, #8
   d6036:	460a      	mov	r2, r1
   d6038:	216f      	movs	r1, #111	; 0x6f
   d603a:	f7ff ff79 	bl	d5f30 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d603e:	4605      	mov	r5, r0
   d6040:	b9a8      	cbnz	r0, d606e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6042:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6046:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6048:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d604c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d604e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6052:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6054:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6058:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d605a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d605e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6060:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6064:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6066:	b92e      	cbnz	r6, d6074 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6068:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d606c:	72a3      	strb	r3, [r4, #10]
}
   d606e:	4628      	mov	r0, r5
   d6070:	b004      	add	sp, #16
   d6072:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6074:	f001 fdbe 	bl	d7bf4 <_ZN9TimeClass4yearEv>
   d6078:	f7ff fecc 	bl	d5e14 <_ZN12MCP79410Time8intToBcdEi>
   d607c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d607e:	e7f6      	b.n	d606e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6080 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6082:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6084:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6086:	9300      	str	r3, [sp, #0]
   d6088:	216f      	movs	r1, #111	; 0x6f
   d608a:	ab03      	add	r3, sp, #12
   d608c:	f7ff ff50 	bl	d5f30 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6090:	b920      	cbnz	r0, d609c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d6092:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d6096:	b005      	add	sp, #20
   d6098:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d609c:	2000      	movs	r0, #0
   d609e:	e7fa      	b.n	d6096 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d60a0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d60a0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d60a2:	2103      	movs	r1, #3
   d60a4:	f7ff ffec 	bl	d6080 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d60a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d60ac:	bd08      	pop	{r3, pc}

000d60ae <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d60ae:	b538      	push	{r3, r4, r5, lr}
   d60b0:	2300      	movs	r3, #0
   d60b2:	460c      	mov	r4, r1
   d60b4:	460a      	mov	r2, r1
   d60b6:	4619      	mov	r1, r3
   d60b8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d60ba:	f7ff ffb4 	bl	d6026 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d60be:	b930      	cbnz	r0, d60ce <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60c0:	7aa3      	ldrb	r3, [r4, #10]
   d60c2:	b123      	cbz	r3, d60ce <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d60c4:	4628      	mov	r0, r5
}
   d60c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60ca:	f7ff bfe9 	b.w	d60a0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d60ce:	2000      	movs	r0, #0
   d60d0:	bd38      	pop	{r3, r4, r5, pc}

000d60d2 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d60d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d60d4:	4602      	mov	r2, r0
	MCP79410Time time;
   d60d6:	a801      	add	r0, sp, #4
   d60d8:	f7ff fe28 	bl	d5d2c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d60dc:	a901      	add	r1, sp, #4
   d60de:	4610      	mov	r0, r2
   d60e0:	f7ff ffe5 	bl	d60ae <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d60e4:	b128      	cbz	r0, d60f2 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d60e6:	a801      	add	r0, sp, #4
   d60e8:	f7ff fe6c 	bl	d5dc4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d60ec:	b007      	add	sp, #28
   d60ee:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d60f2:	2000      	movs	r0, #0
   d60f4:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d60f6:	e7f9      	b.n	d60ec <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d60f8 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d60f8:	b5d0      	push	{r4, r6, r7, lr}
   d60fa:	4604      	mov	r4, r0
   d60fc:	b086      	sub	sp, #24
	wire.begin();
   d60fe:	6840      	ldr	r0, [r0, #4]
   d6100:	f001 f8fc 	bl	d72fc <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6104:	f001 fd3c 	bl	d7b80 <_ZN9TimeClass7isValidEv>
   d6108:	b9e8      	cbnz	r0, d6146 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d610a:	7ae3      	ldrb	r3, [r4, #11]
   d610c:	079b      	lsls	r3, r3, #30
   d610e:	d51a      	bpl.n	d6146 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6110:	4620      	mov	r0, r4
   d6112:	f7ff ffde 	bl	d60d2 <_ZNK8MCP7941010getRTCTimeEv>
   d6116:	4606      	mov	r6, r0
   d6118:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d611a:	ea56 0307 	orrs.w	r3, r6, r7
   d611e:	d012      	beq.n	d6146 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6120:	f001 fc35 	bl	d798e <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6124:	4b0a      	ldr	r3, [pc, #40]	; (d6150 <_ZN8MCP794105setupEv+0x58>)
   d6126:	490b      	ldr	r1, [pc, #44]	; (d6154 <_ZN8MCP794105setupEv+0x5c>)
   d6128:	681b      	ldr	r3, [r3, #0]
   d612a:	9300      	str	r3, [sp, #0]
   d612c:	4632      	mov	r2, r6
   d612e:	463b      	mov	r3, r7
   d6130:	a802      	add	r0, sp, #8
   d6132:	f001 fce3 	bl	d7afc <_ZN9TimeClass6formatExPKc>
   d6136:	4808      	ldr	r0, [pc, #32]	; (d6158 <_ZN8MCP794105setupEv+0x60>)
   d6138:	9a02      	ldr	r2, [sp, #8]
   d613a:	4908      	ldr	r1, [pc, #32]	; (d615c <_ZN8MCP794105setupEv+0x64>)
   d613c:	f7ff f968 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
   d6140:	a802      	add	r0, sp, #8
   d6142:	f001 faf9 	bl	d7738 <_ZN6StringD1Ev>
	setupDone = true;
   d6146:	2301      	movs	r3, #1
   d6148:	7223      	strb	r3, [r4, #8]
}
   d614a:	b006      	add	sp, #24
   d614c:	bdd0      	pop	{r4, r6, r7, pc}
   d614e:	bf00      	nop
   d6150:	2003e238 	.word	0x2003e238
   d6154:	2003e640 	.word	0x2003e640
   d6158:	2003e5d4 	.word	0x2003e5d4
   d615c:	000daf9a 	.word	0x000daf9a

000d6160 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6164:	4606      	mov	r6, r0
   d6166:	4688      	mov	r8, r1
   d6168:	4691      	mov	r9, r2
   d616a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d616c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6170:	429d      	cmp	r5, r3
   d6172:	d229      	bcs.n	d61c8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6174:	6870      	ldr	r0, [r6, #4]
   d6176:	4641      	mov	r1, r8
   d6178:	f001 f8f2 	bl	d7360 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d617c:	6870      	ldr	r0, [r6, #4]
   d617e:	eb09 0105 	add.w	r1, r9, r5
   d6182:	f7ff f941 	bl	d5408 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6188:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d618a:	2f1f      	cmp	r7, #31
   d618c:	bf28      	it	cs
   d618e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6190:	eb0a 0405 	add.w	r4, sl, r5
   d6194:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6198:	6870      	ldr	r0, [r6, #4]
   d619a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d619e:	6802      	ldr	r2, [r0, #0]
   d61a0:	6892      	ldr	r2, [r2, #8]
   d61a2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d61a4:	45a3      	cmp	fp, r4
   d61a6:	d1f7      	bne.n	d6198 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d61a8:	6870      	ldr	r0, [r6, #4]
   d61aa:	2101      	movs	r1, #1
   d61ac:	f001 f8df 	bl	d736e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d61b0:	4604      	mov	r4, r0
   d61b2:	b138      	cbz	r0, d61c4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d61b4:	4602      	mov	r2, r0
   d61b6:	4905      	ldr	r1, [pc, #20]	; (d61cc <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d61b8:	4805      	ldr	r0, [pc, #20]	; (d61d0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d61ba:	f7ff f929 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d61be:	4620      	mov	r0, r4
   d61c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d61c4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d61c6:	e7d2      	b.n	d616e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d61c8:	2400      	movs	r4, #0
	return stat;
   d61ca:	e7f8      	b.n	d61be <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d61cc:	000dafaf 	.word	0x000dafaf
   d61d0:	2003e5d4 	.word	0x2003e5d4

000d61d4 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d61d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d61d8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d61dc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d61de:	6803      	ldr	r3, [r0, #0]
   d61e0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d61e2:	4605      	mov	r5, r0
   d61e4:	460c      	mov	r4, r1
   d61e6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d61e8:	4798      	blx	r3
   d61ea:	4580      	cmp	r8, r0
   d61ec:	d80d      	bhi.n	d620a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d61ee:	3420      	adds	r4, #32
   d61f0:	6868      	ldr	r0, [r5, #4]
   d61f2:	9600      	str	r6, [sp, #0]
   d61f4:	463b      	mov	r3, r7
   d61f6:	b2e2      	uxtb	r2, r4
   d61f8:	216f      	movs	r1, #111	; 0x6f
   d61fa:	f7ff ffb1 	bl	d6160 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d61fe:	fab0 f080 	clz	r0, r0
   d6202:	0940      	lsrs	r0, r0, #5
}
   d6204:	b002      	add	sp, #8
   d6206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d620a:	2000      	movs	r0, #0
   d620c:	e7fa      	b.n	d6204 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d620e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d620e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6210:	7c13      	ldrb	r3, [r2, #16]
   d6212:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6216:	7bd3      	ldrb	r3, [r2, #15]
   d6218:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d621c:	7b93      	ldrb	r3, [r2, #14]
   d621e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6222:	7b53      	ldrb	r3, [r2, #13]
   d6224:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6228:	7b13      	ldrb	r3, [r2, #12]
   d622a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d622e:	7ad3      	ldrb	r3, [r2, #11]
   d6230:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6234:	7a93      	ldrb	r3, [r2, #10]
   d6236:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d623a:	2307      	movs	r3, #7
   d623c:	9300      	str	r3, [sp, #0]
   d623e:	460a      	mov	r2, r1
   d6240:	ab02      	add	r3, sp, #8
   d6242:	216f      	movs	r1, #111	; 0x6f
   d6244:	f7ff ff8c 	bl	d6160 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6248:	b005      	add	sp, #20
   d624a:	f85d fb04 	ldr.w	pc, [sp], #4

000d624e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d624e:	b510      	push	{r4, lr}
   d6250:	b088      	sub	sp, #32
   d6252:	4604      	mov	r4, r0
	MCP79410Time time;
   d6254:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6256:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6258:	f7ff fd68 	bl	d5d2c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d625c:	9b01      	ldr	r3, [sp, #4]
   d625e:	a803      	add	r0, sp, #12
   d6260:	f7ff fe27 	bl	d5eb2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6264:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6268:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d626a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d626e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6272:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6276:	b16a      	cbz	r2, d6294 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6278:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d627c:	aa03      	add	r2, sp, #12
   d627e:	2100      	movs	r1, #0
   d6280:	4620      	mov	r0, r4
   d6282:	f88d 3019 	strb.w	r3, [sp, #25]
   d6286:	f7ff ffc2 	bl	d620e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d628a:	fab0 f080 	clz	r0, r0
   d628e:	0940      	lsrs	r0, r0, #5
   d6290:	b008      	add	sp, #32
   d6292:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6294:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6298:	e7f0      	b.n	d627c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d629c <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d629c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d629e:	b087      	sub	sp, #28
   d62a0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d62a2:	f001 fc6d 	bl	d7b80 <_ZN9TimeClass7isValidEv>
   d62a6:	4604      	mov	r4, r0
   d62a8:	b1e8      	cbz	r0, d62e6 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d62aa:	f001 fc86 	bl	d7bba <_ZN9TimeClass3nowEv>
   d62ae:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d62b0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d62b2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d62b4:	463b      	mov	r3, r7
   d62b6:	4628      	mov	r0, r5
   d62b8:	f7ff ffc9 	bl	d624e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62bc:	4b0c      	ldr	r3, [pc, #48]	; (d62f0 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d62be:	490d      	ldr	r1, [pc, #52]	; (d62f4 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	9300      	str	r3, [sp, #0]
   d62c4:	4632      	mov	r2, r6
   d62c6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d62c8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62ca:	a802      	add	r0, sp, #8
   d62cc:	f001 fc16 	bl	d7afc <_ZN9TimeClass6formatExPKc>
   d62d0:	4809      	ldr	r0, [pc, #36]	; (d62f8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d62d2:	9a02      	ldr	r2, [sp, #8]
   d62d4:	4909      	ldr	r1, [pc, #36]	; (d62fc <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d62d6:	f7ff f89b 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
   d62da:	a802      	add	r0, sp, #8
   d62dc:	f001 fa2c 	bl	d7738 <_ZN6StringD1Ev>
}
   d62e0:	4620      	mov	r0, r4
   d62e2:	b007      	add	sp, #28
   d62e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d62e6:	4906      	ldr	r1, [pc, #24]	; (d6300 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d62e8:	4803      	ldr	r0, [pc, #12]	; (d62f8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d62ea:	f7ff f891 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
   d62ee:	e7f7      	b.n	d62e0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d62f0:	2003e238 	.word	0x2003e238
   d62f4:	2003e640 	.word	0x2003e640
   d62f8:	2003e5d4 	.word	0x2003e5d4
   d62fc:	000dafca 	.word	0x000dafca
   d6300:	000dafe0 	.word	0x000dafe0

000d6304 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6304:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6306:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6308:	4604      	mov	r4, r0
	if (!timeSet) {
   d630a:	b99d      	cbnz	r5, d6334 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d630c:	f001 fc38 	bl	d7b80 <_ZN9TimeClass7isValidEv>
   d6310:	b180      	cbz	r0, d6334 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6312:	2200      	movs	r2, #0
   d6314:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6316:	4669      	mov	r1, sp
   d6318:	4628      	mov	r0, r5
        tm = 0;
   d631a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d631e:	f000 fb39 	bl	d6994 <spark_sync_time_last>
			if (lastSync != 0) {
   d6322:	b138      	cbz	r0, d6334 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6324:	7ae3      	ldrb	r3, [r4, #11]
   d6326:	07db      	lsls	r3, r3, #31
   d6328:	d502      	bpl.n	d6330 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d632a:	4620      	mov	r0, r4
   d632c:	f7ff ffb6 	bl	d629c <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6330:	2301      	movs	r3, #1
   d6332:	7263      	strb	r3, [r4, #9]
}
   d6334:	b003      	add	sp, #12
   d6336:	bd30      	pop	{r4, r5, pc}

000d6338 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d633a:	2301      	movs	r3, #1
	buf[0] = value;
   d633c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6340:	9300      	str	r3, [sp, #0]
   d6342:	460a      	mov	r2, r1
   d6344:	ab03      	add	r3, sp, #12
   d6346:	216f      	movs	r1, #111	; 0x6f
   d6348:	f7ff ff0a 	bl	d6160 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d634c:	b005      	add	sp, #20
   d634e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6352 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6354:	4604      	mov	r4, r0
   d6356:	460d      	mov	r5, r1
   d6358:	4617      	mov	r7, r2
   d635a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d635c:	f7ff fe90 	bl	d6080 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d6360:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d6364:	4332      	orrs	r2, r6
   d6366:	4629      	mov	r1, r5
   d6368:	4620      	mov	r0, r4
}
   d636a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d636e:	f7ff bfe3 	b.w	d6338 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d6372 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d6372:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d6374:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6376:	d80c      	bhi.n	d6392 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6378:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d637a:	f04f 0300 	mov.w	r3, #0
   d637e:	bf14      	ite	ne
   d6380:	22df      	movne	r2, #223	; 0xdf
   d6382:	22ef      	moveq	r2, #239	; 0xef
   d6384:	2107      	movs	r1, #7
   d6386:	f7ff ffe4 	bl	d6352 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d638a:	fab0 f080 	clz	r0, r0
   d638e:	0940      	lsrs	r0, r0, #5
}
   d6390:	bd08      	pop	{r3, pc}
		return false;
   d6392:	2000      	movs	r0, #0
   d6394:	e7fc      	b.n	d6390 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d6396 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6396:	b538      	push	{r3, r4, r5, lr}
   d6398:	4604      	mov	r4, r0
   d639a:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d639c:	6860      	ldr	r0, [r4, #4]
   d639e:	2157      	movs	r1, #87	; 0x57
   d63a0:	f000 ffde 	bl	d7360 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d63a4:	6860      	ldr	r0, [r4, #4]
   d63a6:	2101      	movs	r1, #1
   d63a8:	f000 ffe1 	bl	d736e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d63ac:	b108      	cbz	r0, d63b2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d63ae:	3d01      	subs	r5, #1
   d63b0:	d1f4      	bne.n	d639c <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d63b2:	bd38      	pop	{r3, r4, r5, pc}

000d63b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d63b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63b8:	4604      	mov	r4, r0
   d63ba:	460f      	mov	r7, r1
   d63bc:	4616      	mov	r6, r2
   d63be:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d63c2:	45b0      	cmp	r8, r6
   d63c4:	d020      	beq.n	d6408 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d63c6:	6860      	ldr	r0, [r4, #4]
   d63c8:	2157      	movs	r1, #87	; 0x57
   d63ca:	f000 ffc9 	bl	d7360 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d63ce:	4639      	mov	r1, r7
   d63d0:	6860      	ldr	r0, [r4, #4]
   d63d2:	f7ff f819 	bl	d5408 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d63d6:	6860      	ldr	r0, [r4, #4]
   d63d8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d63dc:	6803      	ldr	r3, [r0, #0]
   d63de:	689b      	ldr	r3, [r3, #8]
   d63e0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d63e2:	6860      	ldr	r0, [r4, #4]
   d63e4:	2101      	movs	r1, #1
   d63e6:	f000 ffc2 	bl	d736e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d63ea:	3701      	adds	r7, #1
   d63ec:	4605      	mov	r5, r0
   d63ee:	b138      	cbz	r0, d6400 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d63f0:	4602      	mov	r2, r0
   d63f2:	4906      	ldr	r1, [pc, #24]	; (d640c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d63f4:	4806      	ldr	r0, [pc, #24]	; (d6410 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d63f6:	f7ff f80b 	bl	d5410 <_ZNK5spark6Logger4infoEPKcz>
}
   d63fa:	4628      	mov	r0, r5
   d63fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6400:	4620      	mov	r0, r4
   d6402:	f7ff ffc8 	bl	d6396 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d6406:	e7dc      	b.n	d63c2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6408:	2500      	movs	r5, #0
	return stat;
   d640a:	e7f6      	b.n	d63fa <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d640c:	000daff5 	.word	0x000daff5
   d6410:	2003e5d4 	.word	0x2003e5d4

000d6414 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d6416:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6418:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d641a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d641c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d641e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6420:	4604      	mov	r4, r0
   d6422:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6424:	4798      	blx	r3
   d6426:	4287      	cmp	r7, r0
   d6428:	d80a      	bhi.n	d6440 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d642a:	9a01      	ldr	r2, [sp, #4]
   d642c:	6860      	ldr	r0, [r4, #4]
   d642e:	4633      	mov	r3, r6
   d6430:	b2e9      	uxtb	r1, r5
   d6432:	f7ff ffbf 	bl	d63b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d6436:	fab0 f080 	clz	r0, r0
   d643a:	0940      	lsrs	r0, r0, #5
}
   d643c:	b003      	add	sp, #12
   d643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6440:	2000      	movs	r0, #0
   d6442:	e7fb      	b.n	d643c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6444 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
   d6444:	4b01      	ldr	r3, [pc, #4]	; (d644c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d6446:	4a02      	ldr	r2, [pc, #8]	; (d6450 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6448:	601a      	str	r2, [r3, #0]
}
   d644a:	4770      	bx	lr
   d644c:	2003e5d4 	.word	0x2003e5d4
   d6450:	000db016 	.word	0x000db016

000d6454 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <os_thread_create+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	685b      	ldr	r3, [r3, #4]
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	00030248 	.word	0x00030248

000d6464 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b02      	ldr	r3, [pc, #8]	; (d6470 <os_thread_yield+0xc>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	68db      	ldr	r3, [r3, #12]
   d646c:	9301      	str	r3, [sp, #4]
   d646e:	bd08      	pop	{r3, pc}
   d6470:	00030248 	.word	0x00030248

000d6474 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b02      	ldr	r3, [pc, #8]	; (d6480 <os_thread_scheduling+0xc>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	69db      	ldr	r3, [r3, #28]
   d647c:	9301      	str	r3, [sp, #4]
   d647e:	bd08      	pop	{r3, pc}
   d6480:	00030248 	.word	0x00030248

000d6484 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6484:	b508      	push	{r3, lr}
   d6486:	4b02      	ldr	r3, [pc, #8]	; (d6490 <os_timer_create+0xc>)
   d6488:	681b      	ldr	r3, [r3, #0]
   d648a:	6a1b      	ldr	r3, [r3, #32]
   d648c:	9301      	str	r3, [sp, #4]
   d648e:	bd08      	pop	{r3, pc}
   d6490:	00030248 	.word	0x00030248

000d6494 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6494:	b508      	push	{r3, lr}
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <os_timer_destroy+0xc>)
   d6498:	681b      	ldr	r3, [r3, #0]
   d649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d649c:	9301      	str	r3, [sp, #4]
   d649e:	bd08      	pop	{r3, pc}
   d64a0:	00030248 	.word	0x00030248

000d64a4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <os_timer_get_id+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	00030248 	.word	0x00030248

000d64b4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <os_timer_change+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	00030248 	.word	0x00030248

000d64c4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <os_mutex_create+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	00030248 	.word	0x00030248

000d64d4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <os_mutex_lock+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	00030248 	.word	0x00030248

000d64e4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <os_mutex_unlock+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	00030248 	.word	0x00030248

000d64f4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <os_mutex_recursive_create+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	00030248 	.word	0x00030248

000d6504 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <os_mutex_recursive_destroy+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	00030248 	.word	0x00030248

000d6514 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <os_thread_exit+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	00030248 	.word	0x00030248

000d6524 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <os_timer_set_id+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	00030248 	.word	0x00030248

000d6534 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <HAL_Feature_Set+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030234 	.word	0x00030234

000d6544 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <HAL_RNG_GetRandomNumber+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	685b      	ldr	r3, [r3, #4]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	00030218 	.word	0x00030218

000d6554 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <HAL_Delay_Milliseconds+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	689b      	ldr	r3, [r3, #8]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	00030218 	.word	0x00030218

000d6564 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <HAL_Delay_Microseconds+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	68db      	ldr	r3, [r3, #12]
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	00030218 	.word	0x00030218

000d6574 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	695b      	ldr	r3, [r3, #20]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030218 	.word	0x00030218

000d6584 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <hal_rtc_time_is_valid+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030218 	.word	0x00030218

000d6594 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <hal_rtc_get_time+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	00030218 	.word	0x00030218

000d65a4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <hal_rtc_set_time+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030218 	.word	0x00030218

000d65b4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <HAL_Pin_Mode+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	689b      	ldr	r3, [r3, #8]
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	0003022c 	.word	0x0003022c

000d65c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <HAL_Get_Pin_Mode+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	68db      	ldr	r3, [r3, #12]
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	0003022c 	.word	0x0003022c

000d65d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <HAL_GPIO_Write+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	691b      	ldr	r3, [r3, #16]
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	0003022c 	.word	0x0003022c

000d65e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <HAL_GPIO_Read+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	695b      	ldr	r3, [r3, #20]
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	0003022c 	.word	0x0003022c

000d65f4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <HAL_Interrupts_Attach+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	699b      	ldr	r3, [r3, #24]
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	0003022c 	.word	0x0003022c

000d6604 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <HAL_Interrupts_Detach+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	69db      	ldr	r3, [r3, #28]
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	0003022c 	.word	0x0003022c

000d6614 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <hal_i2c_begin+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	68db      	ldr	r3, [r3, #12]
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030228 	.word	0x00030228

000d6624 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <hal_i2c_begin_transmission+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	699b      	ldr	r3, [r3, #24]
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030228 	.word	0x00030228

000d6634 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <hal_i2c_end_transmission+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	69db      	ldr	r3, [r3, #28]
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030228 	.word	0x00030228

000d6644 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <hal_i2c_write+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	6a1b      	ldr	r3, [r3, #32]
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030228 	.word	0x00030228

000d6654 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <hal_i2c_available+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030228 	.word	0x00030228

000d6664 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <hal_i2c_read+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030228 	.word	0x00030228

000d6674 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <hal_i2c_peek+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030228 	.word	0x00030228

000d6684 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <hal_i2c_flush+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030228 	.word	0x00030228

000d6694 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <hal_i2c_is_enabled+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030228 	.word	0x00030228

000d66a4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <hal_i2c_init+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	00030228 	.word	0x00030228

000d66b4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <hal_i2c_lock+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	00030228 	.word	0x00030228

000d66c4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <hal_i2c_unlock+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	00030228 	.word	0x00030228

000d66d4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <hal_i2c_request_ex+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	00030228 	.word	0x00030228

000d66e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <inet_inet_ntop+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	695b      	ldr	r3, [r3, #20]
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	00030264 	.word	0x00030264

000d66f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <netdb_freeaddrinfo+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	689b      	ldr	r3, [r3, #8]
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	00030268 	.word	0x00030268

000d6704 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <netdb_getaddrinfo+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	68db      	ldr	r3, [r3, #12]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	00030268 	.word	0x00030268

000d6714 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <hal_spi_init+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	69db      	ldr	r3, [r3, #28]
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	00030230 	.word	0x00030230

000d6724 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <hal_spi_is_enabled+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	6a1b      	ldr	r3, [r3, #32]
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	00030230 	.word	0x00030230

000d6734 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <hal_usart_init+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	681b      	ldr	r3, [r3, #0]
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	0003023c 	.word	0x0003023c

000d6744 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <hal_usart_write+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	68db      	ldr	r3, [r3, #12]
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	0003023c 	.word	0x0003023c

000d6754 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <hal_usart_available+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	691b      	ldr	r3, [r3, #16]
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	0003023c 	.word	0x0003023c

000d6764 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <hal_usart_read+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	695b      	ldr	r3, [r3, #20]
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	0003023c 	.word	0x0003023c

000d6774 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <hal_usart_peek+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	699b      	ldr	r3, [r3, #24]
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	0003023c 	.word	0x0003023c

000d6784 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <hal_usart_flush+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	69db      	ldr	r3, [r3, #28]
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	0003023c 	.word	0x0003023c

000d6794 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <hal_usart_is_enabled+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	6a1b      	ldr	r3, [r3, #32]
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	0003023c 	.word	0x0003023c

000d67a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <hal_usart_available_data_for_write+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	0003023c 	.word	0x0003023c

000d67b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b02      	ldr	r3, [pc, #8]	; (d67c0 <HAL_USB_USART_Init+0xc>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	681b      	ldr	r3, [r3, #0]
   d67bc:	9301      	str	r3, [sp, #4]
   d67be:	bd08      	pop	{r3, pc}
   d67c0:	0003024c 	.word	0x0003024c

000d67c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b02      	ldr	r3, [pc, #8]	; (d67d0 <HAL_USB_USART_Available_Data+0xc>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	691b      	ldr	r3, [r3, #16]
   d67cc:	9301      	str	r3, [sp, #4]
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	0003024c 	.word	0x0003024c

000d67d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	695b      	ldr	r3, [r3, #20]
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	bd08      	pop	{r3, pc}
   d67e0:	0003024c 	.word	0x0003024c

000d67e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <HAL_USB_USART_Receive_Data+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	699b      	ldr	r3, [r3, #24]
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	0003024c 	.word	0x0003024c

000d67f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <HAL_USB_USART_Send_Data+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	69db      	ldr	r3, [r3, #28]
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	0003024c 	.word	0x0003024c

000d6804 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <HAL_USB_USART_Flush_Data+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	6a1b      	ldr	r3, [r3, #32]
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	0003024c 	.word	0x0003024c

000d6814 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <panic_+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	00030260 	.word	0x00030260

000d6824 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <log_message_v+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	00030260 	.word	0x00030260

000d6834 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b03      	ldr	r3, [pc, #12]	; (d6844 <diag_get_source+0x10>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d683e:	9301      	str	r3, [sp, #4]
   d6840:	bd08      	pop	{r3, pc}
   d6842:	0000      	.short	0x0000
   d6844:	00030260 	.word	0x00030260

000d6848 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6848:	b508      	push	{r3, lr}
   d684a:	4b02      	ldr	r3, [pc, #8]	; (d6854 <system_mode+0xc>)
   d684c:	681b      	ldr	r3, [r3, #0]
   d684e:	681b      	ldr	r3, [r3, #0]
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	00030220 	.word	0x00030220

000d6858 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6858:	b508      	push	{r3, lr}
   d685a:	4b02      	ldr	r3, [pc, #8]	; (d6864 <set_system_mode+0xc>)
   d685c:	681b      	ldr	r3, [r3, #0]
   d685e:	685b      	ldr	r3, [r3, #4]
   d6860:	9301      	str	r3, [sp, #4]
   d6862:	bd08      	pop	{r3, pc}
   d6864:	00030220 	.word	0x00030220

000d6868 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6868:	b508      	push	{r3, lr}
   d686a:	4b02      	ldr	r3, [pc, #8]	; (d6874 <system_delay_ms+0xc>)
   d686c:	681b      	ldr	r3, [r3, #0]
   d686e:	695b      	ldr	r3, [r3, #20]
   d6870:	9301      	str	r3, [sp, #4]
   d6872:	bd08      	pop	{r3, pc}
   d6874:	00030220 	.word	0x00030220

000d6878 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <system_thread_set_state+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	00030220 	.word	0x00030220

000d6888 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6888:	b508      	push	{r3, lr}
   d688a:	4b02      	ldr	r3, [pc, #8]	; (d6894 <application_thread_current+0xc>)
   d688c:	681b      	ldr	r3, [r3, #0]
   d688e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6890:	9301      	str	r3, [sp, #4]
   d6892:	bd08      	pop	{r3, pc}
   d6894:	00030220 	.word	0x00030220

000d6898 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6898:	b508      	push	{r3, lr}
   d689a:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <application_thread_invoke+0xc>)
   d689c:	681b      	ldr	r3, [r3, #0]
   d689e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d68a0:	9301      	str	r3, [sp, #4]
   d68a2:	bd08      	pop	{r3, pc}
   d68a4:	00030220 	.word	0x00030220

000d68a8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d68a8:	b508      	push	{r3, lr}
   d68aa:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <system_thread_get_state+0xc>)
   d68ac:	681b      	ldr	r3, [r3, #0]
   d68ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d68b0:	9301      	str	r3, [sp, #4]
   d68b2:	bd08      	pop	{r3, pc}
   d68b4:	00030220 	.word	0x00030220

000d68b8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d68b8:	b508      	push	{r3, lr}
   d68ba:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <system_notify_time_changed+0xc>)
   d68bc:	681b      	ldr	r3, [r3, #0]
   d68be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	bd08      	pop	{r3, pc}
   d68c4:	00030220 	.word	0x00030220

000d68c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d68c8:	b508      	push	{r3, lr}
   d68ca:	4b03      	ldr	r3, [pc, #12]	; (d68d8 <system_ctrl_set_app_request_handler+0x10>)
   d68cc:	681b      	ldr	r3, [r3, #0]
   d68ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d68d2:	9301      	str	r3, [sp, #4]
   d68d4:	bd08      	pop	{r3, pc}
   d68d6:	0000      	.short	0x0000
   d68d8:	00030220 	.word	0x00030220

000d68dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b03      	ldr	r3, [pc, #12]	; (d68ec <system_ctrl_set_result+0x10>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d68e6:	9301      	str	r3, [sp, #4]
   d68e8:	bd08      	pop	{r3, pc}
   d68ea:	0000      	.short	0x0000
   d68ec:	00030220 	.word	0x00030220

000d68f0 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b03      	ldr	r3, [pc, #12]	; (d6900 <system_reset+0x10>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d68fa:	9301      	str	r3, [sp, #4]
   d68fc:	bd08      	pop	{r3, pc}
   d68fe:	0000      	.short	0x0000
   d6900:	00030220 	.word	0x00030220

000d6904 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <spark_variable+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	681b      	ldr	r3, [r3, #0]
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030244 	.word	0x00030244

000d6914 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <spark_function+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	685b      	ldr	r3, [r3, #4]
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030244 	.word	0x00030244

000d6924 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <spark_process+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	689b      	ldr	r3, [r3, #8]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030244 	.word	0x00030244

000d6934 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <spark_cloud_flag_connected+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	695b      	ldr	r3, [r3, #20]
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030244 	.word	0x00030244

000d6944 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <spark_deviceID+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	69db      	ldr	r3, [r3, #28]
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	00030244 	.word	0x00030244

000d6954 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <spark_send_event+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	6a1b      	ldr	r3, [r3, #32]
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	00030244 	.word	0x00030244

000d6964 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <spark_subscribe+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	00030244 	.word	0x00030244

000d6974 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <spark_sync_time+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	00030244 	.word	0x00030244

000d6984 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <spark_sync_time_pending+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	00030244 	.word	0x00030244

000d6994 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <spark_sync_time_last+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	00030244 	.word	0x00030244

000d69a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	00030244 	.word	0x00030244

000d69b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <network_connect+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	685b      	ldr	r3, [r3, #4]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	00030240 	.word	0x00030240

000d69c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <network_connecting+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	689b      	ldr	r3, [r3, #8]
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	00030240 	.word	0x00030240

000d69d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d69d4:	b508      	push	{r3, lr}
   d69d6:	4b02      	ldr	r3, [pc, #8]	; (d69e0 <network_disconnect+0xc>)
   d69d8:	681b      	ldr	r3, [r3, #0]
   d69da:	68db      	ldr	r3, [r3, #12]
   d69dc:	9301      	str	r3, [sp, #4]
   d69de:	bd08      	pop	{r3, pc}
   d69e0:	00030240 	.word	0x00030240

000d69e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d69e4:	b508      	push	{r3, lr}
   d69e6:	4b02      	ldr	r3, [pc, #8]	; (d69f0 <network_ready+0xc>)
   d69e8:	681b      	ldr	r3, [r3, #0]
   d69ea:	691b      	ldr	r3, [r3, #16]
   d69ec:	9301      	str	r3, [sp, #4]
   d69ee:	bd08      	pop	{r3, pc}
   d69f0:	00030240 	.word	0x00030240

000d69f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d69f4:	b508      	push	{r3, lr}
   d69f6:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <network_on+0xc>)
   d69f8:	681b      	ldr	r3, [r3, #0]
   d69fa:	695b      	ldr	r3, [r3, #20]
   d69fc:	9301      	str	r3, [sp, #4]
   d69fe:	bd08      	pop	{r3, pc}
   d6a00:	00030240 	.word	0x00030240

000d6a04 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a04:	b508      	push	{r3, lr}
   d6a06:	4b02      	ldr	r3, [pc, #8]	; (d6a10 <network_off+0xc>)
   d6a08:	681b      	ldr	r3, [r3, #0]
   d6a0a:	699b      	ldr	r3, [r3, #24]
   d6a0c:	9301      	str	r3, [sp, #4]
   d6a0e:	bd08      	pop	{r3, pc}
   d6a10:	00030240 	.word	0x00030240

000d6a14 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6a14:	b508      	push	{r3, lr}
   d6a16:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <network_listen+0xc>)
   d6a18:	681b      	ldr	r3, [r3, #0]
   d6a1a:	69db      	ldr	r3, [r3, #28]
   d6a1c:	9301      	str	r3, [sp, #4]
   d6a1e:	bd08      	pop	{r3, pc}
   d6a20:	00030240 	.word	0x00030240

000d6a24 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6a24:	b508      	push	{r3, lr}
   d6a26:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <network_listening+0xc>)
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	6a1b      	ldr	r3, [r3, #32]
   d6a2c:	9301      	str	r3, [sp, #4]
   d6a2e:	bd08      	pop	{r3, pc}
   d6a30:	00030240 	.word	0x00030240

000d6a34 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6a34:	b508      	push	{r3, lr}
   d6a36:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <network_set_listen_timeout+0xc>)
   d6a38:	681b      	ldr	r3, [r3, #0]
   d6a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a3c:	9301      	str	r3, [sp, #4]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	00030240 	.word	0x00030240

000d6a44 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a44:	b508      	push	{r3, lr}
   d6a46:	4b02      	ldr	r3, [pc, #8]	; (d6a50 <network_get_listen_timeout+0xc>)
   d6a48:	681b      	ldr	r3, [r3, #0]
   d6a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a4c:	9301      	str	r3, [sp, #4]
   d6a4e:	bd08      	pop	{r3, pc}
   d6a50:	00030240 	.word	0x00030240

000d6a54 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6a54:	b508      	push	{r3, lr}
   d6a56:	4b02      	ldr	r3, [pc, #8]	; (d6a60 <malloc+0xc>)
   d6a58:	681b      	ldr	r3, [r3, #0]
   d6a5a:	681b      	ldr	r3, [r3, #0]
   d6a5c:	9301      	str	r3, [sp, #4]
   d6a5e:	bd08      	pop	{r3, pc}
   d6a60:	0003021c 	.word	0x0003021c

000d6a64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6a64:	b508      	push	{r3, lr}
   d6a66:	4b02      	ldr	r3, [pc, #8]	; (d6a70 <free+0xc>)
   d6a68:	681b      	ldr	r3, [r3, #0]
   d6a6a:	685b      	ldr	r3, [r3, #4]
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	bd08      	pop	{r3, pc}
   d6a70:	0003021c 	.word	0x0003021c

000d6a74 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b02      	ldr	r3, [pc, #8]	; (d6a80 <realloc+0xc>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	689b      	ldr	r3, [r3, #8]
   d6a7c:	9301      	str	r3, [sp, #4]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	0003021c 	.word	0x0003021c

000d6a84 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6a84:	b508      	push	{r3, lr}
   d6a86:	4b02      	ldr	r3, [pc, #8]	; (d6a90 <siprintf+0xc>)
   d6a88:	681b      	ldr	r3, [r3, #0]
   d6a8a:	691b      	ldr	r3, [r3, #16]
   d6a8c:	9301      	str	r3, [sp, #4]
   d6a8e:	bd08      	pop	{r3, pc}
   d6a90:	0003021c 	.word	0x0003021c

000d6a94 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6a94:	b508      	push	{r3, lr}
   d6a96:	4b02      	ldr	r3, [pc, #8]	; (d6aa0 <snprintf+0xc>)
   d6a98:	681b      	ldr	r3, [r3, #0]
   d6a9a:	69db      	ldr	r3, [r3, #28]
   d6a9c:	9301      	str	r3, [sp, #4]
   d6a9e:	bd08      	pop	{r3, pc}
   d6aa0:	0003021c 	.word	0x0003021c

000d6aa4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6aa4:	b508      	push	{r3, lr}
   d6aa6:	4b02      	ldr	r3, [pc, #8]	; (d6ab0 <abort+0xc>)
   d6aa8:	681b      	ldr	r3, [r3, #0]
   d6aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6aac:	9301      	str	r3, [sp, #4]
   d6aae:	bd08      	pop	{r3, pc}
   d6ab0:	0003021c 	.word	0x0003021c

000d6ab4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6ab4:	b508      	push	{r3, lr}
   d6ab6:	4b02      	ldr	r3, [pc, #8]	; (d6ac0 <_malloc_r+0xc>)
   d6ab8:	681b      	ldr	r3, [r3, #0]
   d6aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6abc:	9301      	str	r3, [sp, #4]
   d6abe:	bd08      	pop	{r3, pc}
   d6ac0:	0003021c 	.word	0x0003021c

000d6ac4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6ac4:	b508      	push	{r3, lr}
   d6ac6:	4b02      	ldr	r3, [pc, #8]	; (d6ad0 <newlib_impure_ptr_callback+0xc>)
   d6ac8:	681b      	ldr	r3, [r3, #0]
   d6aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6acc:	9301      	str	r3, [sp, #4]
   d6ace:	bd08      	pop	{r3, pc}
   d6ad0:	0003021c 	.word	0x0003021c

000d6ad4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6ad4:	b508      	push	{r3, lr}
   d6ad6:	4b02      	ldr	r3, [pc, #8]	; (d6ae0 <strftime+0xc>)
   d6ad8:	681b      	ldr	r3, [r3, #0]
   d6ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6adc:	9301      	str	r3, [sp, #4]
   d6ade:	bd08      	pop	{r3, pc}
   d6ae0:	0003021c 	.word	0x0003021c

000d6ae4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6ae4:	b508      	push	{r3, lr}
   d6ae6:	4b02      	ldr	r3, [pc, #8]	; (d6af0 <localtime_r+0xc>)
   d6ae8:	681b      	ldr	r3, [r3, #0]
   d6aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6aec:	9301      	str	r3, [sp, #4]
   d6aee:	bd08      	pop	{r3, pc}
   d6af0:	0003021c 	.word	0x0003021c

000d6af4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6af4:	b508      	push	{r3, lr}
   d6af6:	4b02      	ldr	r3, [pc, #8]	; (d6b00 <gmtime_r+0xc>)
   d6af8:	681b      	ldr	r3, [r3, #0]
   d6afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6afc:	9301      	str	r3, [sp, #4]
   d6afe:	bd08      	pop	{r3, pc}
   d6b00:	0003021c 	.word	0x0003021c

000d6b04 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d6b04:	b508      	push	{r3, lr}
   d6b06:	4b02      	ldr	r3, [pc, #8]	; (d6b10 <mktime+0xc>)
   d6b08:	681b      	ldr	r3, [r3, #0]
   d6b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6b0c:	9301      	str	r3, [sp, #4]
   d6b0e:	bd08      	pop	{r3, pc}
   d6b10:	0003021c 	.word	0x0003021c

000d6b14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6b14:	2100      	movs	r1, #0
   d6b16:	f7ff bea7 	b.w	d6868 <system_delay_ms>

000d6b1a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6b1a:	b510      	push	{r4, lr}
      if (_M_empty())
   d6b1c:	6883      	ldr	r3, [r0, #8]
   d6b1e:	4604      	mov	r4, r0
   d6b20:	b90b      	cbnz	r3, d6b26 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6b22:	f001 faf0 	bl	d8106 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b26:	68c3      	ldr	r3, [r0, #12]
   d6b28:	4798      	blx	r3
      if (_M_manager)
   d6b2a:	68a3      	ldr	r3, [r4, #8]
   d6b2c:	b11b      	cbz	r3, d6b36 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b2e:	2203      	movs	r2, #3
   d6b30:	4621      	mov	r1, r4
   d6b32:	4620      	mov	r0, r4
   d6b34:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6b36:	4620      	mov	r0, r4
   d6b38:	2110      	movs	r1, #16
}
   d6b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6b3e:	f001 badc 	b.w	d80fa <_ZdlPvj>

000d6b42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b42:	b510      	push	{r4, lr}
          _M_dispose();
   d6b44:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b46:	4604      	mov	r4, r0
          _M_dispose();
   d6b48:	689b      	ldr	r3, [r3, #8]
   d6b4a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b4c:	68a3      	ldr	r3, [r4, #8]
   d6b4e:	3b01      	subs	r3, #1
   d6b50:	60a3      	str	r3, [r4, #8]
   d6b52:	b92b      	cbnz	r3, d6b60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6b54:	6823      	ldr	r3, [r4, #0]
   d6b56:	4620      	mov	r0, r4
   d6b58:	68db      	ldr	r3, [r3, #12]
    }
   d6b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6b5e:	4718      	bx	r3
    }
   d6b60:	bd10      	pop	{r4, pc}

000d6b62 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6b62:	b510      	push	{r4, lr}
   d6b64:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b66:	6800      	ldr	r0, [r0, #0]
   d6b68:	b108      	cbz	r0, d6b6e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6b6a:	f7ff fccb 	bl	d6504 <os_mutex_recursive_destroy>
    }
   d6b6e:	4620      	mov	r0, r4
   d6b70:	bd10      	pop	{r4, pc}

000d6b72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6b72:	680b      	ldr	r3, [r1, #0]
   d6b74:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6b76:	b113      	cbz	r3, d6b7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6b78:	685a      	ldr	r2, [r3, #4]
   d6b7a:	3201      	adds	r2, #1
   d6b7c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6b7e:	4770      	bx	lr

000d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6b80:	b510      	push	{r4, lr}
   d6b82:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6b84:	6800      	ldr	r0, [r0, #0]
   d6b86:	b128      	cbz	r0, d6b94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6b88:	6843      	ldr	r3, [r0, #4]
   d6b8a:	3b01      	subs	r3, #1
   d6b8c:	6043      	str	r3, [r0, #4]
   d6b8e:	b90b      	cbnz	r3, d6b94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6b90:	f7ff ffd7 	bl	d6b42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6b94:	4620      	mov	r0, r4
   d6b96:	bd10      	pop	{r4, pc}

000d6b98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b98:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6b9a:	4c06      	ldr	r4, [pc, #24]	; (d6bb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6b9c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6b9e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6ba0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6ba2:	f7ff fca7 	bl	d64f4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6ba6:	4620      	mov	r0, r4
   d6ba8:	4a03      	ldr	r2, [pc, #12]	; (d6bb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6baa:	4904      	ldr	r1, [pc, #16]	; (d6bbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6bb0:	f001 ba9e 	b.w	d80f0 <__aeabi_atexit>
   d6bb4:	2003e5d8 	.word	0x2003e5d8
   d6bb8:	2003e410 	.word	0x2003e410
   d6bbc:	000d6b63 	.word	0x000d6b63

000d6bc0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6bc0:	2200      	movs	r2, #0
   d6bc2:	6840      	ldr	r0, [r0, #4]
   d6bc4:	4611      	mov	r1, r2
   d6bc6:	f7ff bf0d 	b.w	d69e4 <network_ready>

000d6bca <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6bca:	2200      	movs	r2, #0
   d6bcc:	6840      	ldr	r0, [r0, #4]
   d6bce:	4611      	mov	r1, r2
   d6bd0:	f7ff bf28 	b.w	d6a24 <network_listening>

000d6bd4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6bd4:	2200      	movs	r2, #0
   d6bd6:	6840      	ldr	r0, [r0, #4]
   d6bd8:	4611      	mov	r1, r2
   d6bda:	f7ff bf33 	b.w	d6a44 <network_get_listen_timeout>

000d6bde <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6bde:	6840      	ldr	r0, [r0, #4]
   d6be0:	2200      	movs	r2, #0
   d6be2:	f7ff bf27 	b.w	d6a34 <network_set_listen_timeout>

000d6be6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6be6:	6840      	ldr	r0, [r0, #4]
   d6be8:	2200      	movs	r2, #0
   d6bea:	f081 0101 	eor.w	r1, r1, #1
   d6bee:	f7ff bf11 	b.w	d6a14 <network_listen>

000d6bf2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6bf2:	2300      	movs	r3, #0
   d6bf4:	6840      	ldr	r0, [r0, #4]
   d6bf6:	461a      	mov	r2, r3
   d6bf8:	4619      	mov	r1, r3
   d6bfa:	f7ff bf03 	b.w	d6a04 <network_off>

000d6bfe <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6bfe:	2300      	movs	r3, #0
   d6c00:	6840      	ldr	r0, [r0, #4]
   d6c02:	461a      	mov	r2, r3
   d6c04:	4619      	mov	r1, r3
   d6c06:	f7ff bef5 	b.w	d69f4 <network_on>

000d6c0a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6c0a:	2200      	movs	r2, #0
   d6c0c:	6840      	ldr	r0, [r0, #4]
   d6c0e:	4611      	mov	r1, r2
   d6c10:	f7ff bed8 	b.w	d69c4 <network_connecting>

000d6c14 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c14:	6840      	ldr	r0, [r0, #4]
   d6c16:	2200      	movs	r2, #0
   d6c18:	2102      	movs	r1, #2
   d6c1a:	f7ff bedb 	b.w	d69d4 <network_disconnect>

000d6c1e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6c1e:	2300      	movs	r3, #0
   d6c20:	6840      	ldr	r0, [r0, #4]
   d6c22:	461a      	mov	r2, r3
   d6c24:	f7ff bec6 	b.w	d69b4 <network_connect>

000d6c28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6c28:	4b08      	ldr	r3, [pc, #32]	; (d6c4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6c2a:	b510      	push	{r4, lr}
   d6c2c:	2428      	movs	r4, #40	; 0x28
   d6c2e:	4622      	mov	r2, r4
   d6c30:	4618      	mov	r0, r3
   d6c32:	2100      	movs	r1, #0
   d6c34:	f001 ffc4 	bl	d8bc0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6c38:	4b05      	ldr	r3, [pc, #20]	; (d6c50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6c3a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6c40:	6042      	str	r2, [r0, #4]
   d6c42:	2204      	movs	r2, #4
   d6c44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6c46:	4a03      	ldr	r2, [pc, #12]	; (d6c54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6c48:	601a      	str	r2, [r3, #0]
   d6c4a:	bd10      	pop	{r4, pc}
   d6c4c:	2003e5e4 	.word	0x2003e5e4
   d6c50:	2003e5dc 	.word	0x2003e5dc
   d6c54:	000db090 	.word	0x000db090

000d6c58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6c58:	4770      	bx	lr

000d6c5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6c5a:	2000      	movs	r0, #0
   d6c5c:	4770      	bx	lr

000d6c5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6c5e:	b510      	push	{r4, lr}
   d6c60:	2110      	movs	r1, #16
   d6c62:	4604      	mov	r4, r0
   d6c64:	f001 fa49 	bl	d80fa <_ZdlPvj>
   d6c68:	4620      	mov	r0, r4
   d6c6a:	bd10      	pop	{r4, pc}

000d6c6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6c6c:	b508      	push	{r3, lr}
      { delete this; }
   d6c6e:	f7ff fff6 	bl	d6c5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6c72:	bd08      	pop	{r3, pc}

000d6c74 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6c74:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6c76:	2200      	movs	r2, #0
   d6c78:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6c7c:	6002      	str	r2, [r0, #0]
   d6c7e:	8084      	strh	r4, [r0, #4]
   d6c80:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c82:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6c84:	680c      	ldr	r4, [r1, #0]
   d6c86:	8085      	strh	r5, [r0, #4]
   d6c88:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c8a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6c8c:	bd30      	pop	{r4, r5, pc}

000d6c8e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6c8e:	b510      	push	{r4, lr}
   d6c90:	4604      	mov	r4, r0
    free((void*)msg_);
   d6c92:	6800      	ldr	r0, [r0, #0]
   d6c94:	f7ff fee6 	bl	d6a64 <free>
}
   d6c98:	4620      	mov	r0, r4
   d6c9a:	bd10      	pop	{r4, pc}

000d6c9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6c9c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6c9e:	68c4      	ldr	r4, [r0, #12]
   d6ca0:	b1f4      	cbz	r4, d6ce0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d6ca2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6ca4:	2b02      	cmp	r3, #2
   d6ca6:	d103      	bne.n	d6cb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6ca8:	f104 000c 	add.w	r0, r4, #12
   d6cac:	f7ff ffef 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6cb0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6cb2:	b135      	cbz	r5, d6cc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6cb4:	4628      	mov	r0, r5
   d6cb6:	f7fd faa9 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6cba:	2110      	movs	r1, #16
   d6cbc:	4628      	mov	r0, r5
   d6cbe:	f001 fa1c 	bl	d80fa <_ZdlPvj>
   d6cc2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6cc4:	b135      	cbz	r5, d6cd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6cc6:	4628      	mov	r0, r5
   d6cc8:	f7fd faa0 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6ccc:	2110      	movs	r1, #16
   d6cce:	4628      	mov	r0, r5
   d6cd0:	f001 fa13 	bl	d80fa <_ZdlPvj>
   d6cd4:	4620      	mov	r0, r4
   d6cd6:	2114      	movs	r1, #20
   d6cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6cdc:	f001 ba0d 	b.w	d80fa <_ZdlPvj>
   d6ce0:	bd38      	pop	{r3, r4, r5, pc}

000d6ce2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6ce2:	b510      	push	{r4, lr}
   d6ce4:	b088      	sub	sp, #32
   d6ce6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6ce8:	4668      	mov	r0, sp
   d6cea:	f000 fd70 	bl	d77ce <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6cee:	4669      	mov	r1, sp
   d6cf0:	a804      	add	r0, sp, #16
   d6cf2:	f000 fd8f 	bl	d7814 <_ZN6StringC1ERKS_>
   d6cf6:	a804      	add	r0, sp, #16
   d6cf8:	47a0      	blx	r4
   d6cfa:	4604      	mov	r4, r0
   d6cfc:	a804      	add	r0, sp, #16
   d6cfe:	f000 fd1b 	bl	d7738 <_ZN6StringD1Ev>
    String p(param);
   d6d02:	4668      	mov	r0, sp
   d6d04:	f000 fd18 	bl	d7738 <_ZN6StringD1Ev>
}
   d6d08:	4620      	mov	r0, r4
   d6d0a:	b008      	add	sp, #32
   d6d0c:	bd10      	pop	{r4, pc}

000d6d0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6d0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6d10:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6d16:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6d18:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6d1a:	461a      	mov	r2, r3
   d6d1c:	4669      	mov	r1, sp
   d6d1e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6d20:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6d24:	f8ad 4000 	strh.w	r4, [sp]
   d6d28:	f7ff fdf4 	bl	d6914 <spark_function>
}
   d6d2c:	b004      	add	sp, #16
   d6d2e:	bd10      	pop	{r4, pc}

000d6d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d32:	460e      	mov	r6, r1
   d6d34:	4604      	mov	r4, r0
   d6d36:	f856 3b04 	ldr.w	r3, [r6], #4
   d6d3a:	9300      	str	r3, [sp, #0]
   d6d3c:	460d      	mov	r5, r1
   d6d3e:	a801      	add	r0, sp, #4
   d6d40:	4631      	mov	r1, r6
   d6d42:	f7ff ff16 	bl	d6b72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6d46:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6d48:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6d4a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6d4c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6d4e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6d50:	2300      	movs	r3, #0
   d6d52:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6d54:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6d56:	f7ff ff13 	bl	d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d5a:	4630      	mov	r0, r6
   d6d5c:	f7ff ff10 	bl	d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6d60:	4628      	mov	r0, r5
   d6d62:	2108      	movs	r1, #8
   d6d64:	f001 f9c9 	bl	d80fa <_ZdlPvj>
        return p;
    }
   d6d68:	4620      	mov	r0, r4
   d6d6a:	b002      	add	sp, #8
   d6d6c:	bd70      	pop	{r4, r5, r6, pc}

000d6d6e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6d6e:	b513      	push	{r0, r1, r4, lr}
   d6d70:	460b      	mov	r3, r1
   d6d72:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d74:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6d78:	466c      	mov	r4, sp
   d6d7a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6d7e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6d82:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6d86:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6d8a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6d8e:	b002      	add	sp, #8
   d6d90:	bd10      	pop	{r4, pc}

000d6d92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6d92:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6d94:	b510      	push	{r4, lr}
      if (_M_empty())
   d6d96:	b90a      	cbnz	r2, d6d9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6d98:	f001 f9b5 	bl	d8106 <_ZSt25__throw_bad_function_callv>
    }
   d6d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6da0:	68c3      	ldr	r3, [r0, #12]
   d6da2:	4718      	bx	r3

000d6da4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6da4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6da6:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6da8:	f100 0110 	add.w	r1, r0, #16
   d6dac:	f7ff fff1 	bl	d6d92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6db0:	bd08      	pop	{r3, pc}

000d6db2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6db2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6db4:	b510      	push	{r4, lr}
      if (_M_empty())
   d6db6:	b90a      	cbnz	r2, d6dbc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6db8:	f001 f9a5 	bl	d8106 <_ZSt25__throw_bad_function_callv>
    }
   d6dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6dc0:	68c3      	ldr	r3, [r0, #12]
   d6dc2:	4718      	bx	r3

000d6dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6dc4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6dc6:	6800      	ldr	r0, [r0, #0]
   d6dc8:	f100 0110 	add.w	r1, r0, #16
   d6dcc:	f7ff fff1 	bl	d6db2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6dd0:	bd08      	pop	{r3, pc}
	...

000d6dd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6dd4:	b538      	push	{r3, r4, r5, lr}
   d6dd6:	2300      	movs	r3, #0
   d6dd8:	4604      	mov	r4, r0
   d6dda:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6ddc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6dde:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6de0:	f7fd f959 	bl	d4096 <_Znwj>
   d6de4:	b128      	cbz	r0, d6df2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6de6:	2301      	movs	r3, #1
   d6de8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6dec:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6dee:	6003      	str	r3, [r0, #0]
   d6df0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6df2:	6020      	str	r0, [r4, #0]
	}
   d6df4:	4620      	mov	r0, r4
   d6df6:	bd38      	pop	{r3, r4, r5, pc}
   d6df8:	000db0c4 	.word	0x000db0c4

000d6dfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6dfc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6dfe:	2300      	movs	r3, #0
   d6e00:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6e02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6e04:	4604      	mov	r4, r0
   d6e06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6e08:	b12b      	cbz	r3, d6e16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6e0a:	2202      	movs	r2, #2
   d6e0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6e0e:	68eb      	ldr	r3, [r5, #12]
   d6e10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6e12:	68ab      	ldr	r3, [r5, #8]
   d6e14:	60a3      	str	r3, [r4, #8]
    }
   d6e16:	4620      	mov	r0, r4
   d6e18:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e1e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6e20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6e22:	4668      	mov	r0, sp
   d6e24:	f7ff ff26 	bl	d6c74 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6e28:	f04f 0302 	mov.w	r3, #2
   d6e2c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6e30:	2a00      	cmp	r2, #0
   d6e32:	d103      	bne.n	d6e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6e34:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6e38:	2900      	cmp	r1, #0
   d6e3a:	d1f7      	bne.n	d6e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6e3c:	d125      	bne.n	d6e8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6e3e:	f104 050c 	add.w	r5, r4, #12
   d6e42:	4669      	mov	r1, sp
   d6e44:	4628      	mov	r0, r5
   d6e46:	f7ff ff15 	bl	d6c74 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6e4a:	f3bf 8f5b 	dmb	ish
   d6e4e:	2301      	movs	r3, #1
   d6e50:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6e52:	2000      	movs	r0, #0
   d6e54:	f104 0308 	add.w	r3, r4, #8
   d6e58:	f3bf 8f5b 	dmb	ish
   d6e5c:	e853 6f00 	ldrex	r6, [r3]
   d6e60:	e843 0200 	strex	r2, r0, [r3]
   d6e64:	2a00      	cmp	r2, #0
   d6e66:	d1f9      	bne.n	d6e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6e68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6e6c:	b16e      	cbz	r6, d6e8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6e6e:	f7ff fd0b 	bl	d6888 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6e72:	b178      	cbz	r0, d6e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6e74:	4629      	mov	r1, r5
   d6e76:	4630      	mov	r0, r6
   d6e78:	f7ff ff8b 	bl	d6d92 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6e7c:	4630      	mov	r0, r6
   d6e7e:	f7fd f9c5 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6e82:	2110      	movs	r1, #16
   d6e84:	4630      	mov	r0, r6
   d6e86:	f001 f938 	bl	d80fa <_ZdlPvj>
        p_->setError(std::move(error));
   d6e8a:	4668      	mov	r0, sp
   d6e8c:	f7ff feff 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
    }
   d6e90:	b009      	add	sp, #36	; 0x24
   d6e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6e94:	4631      	mov	r1, r6
   d6e96:	a802      	add	r0, sp, #8
   d6e98:	f7ff ffb0 	bl	d6dfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6e9c:	68e0      	ldr	r0, [r4, #12]
   d6e9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6ea2:	b108      	cbz	r0, d6ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6ea4:	f001 feca 	bl	d8c3c <strdup>
        type_(type) {
   d6ea8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6eaa:	2010      	movs	r0, #16
   d6eac:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6eb0:	f7fd f8f1 	bl	d4096 <_Znwj>
   d6eb4:	4605      	mov	r5, r0
   d6eb6:	b1e8      	cbz	r0, d6ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6eb8:	2700      	movs	r7, #0
   d6eba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ebc:	2018      	movs	r0, #24
   d6ebe:	f7fd f8ea 	bl	d4096 <_Znwj>
   d6ec2:	4604      	mov	r4, r0
   d6ec4:	b188      	cbz	r0, d6eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6ec6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6ec8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6eca:	a802      	add	r0, sp, #8
   d6ecc:	f7ff ff4f 	bl	d6d6e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ed0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6ed2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ed4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ed6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6ed8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6eda:	a906      	add	r1, sp, #24
   d6edc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ede:	60e3      	str	r3, [r4, #12]
   d6ee0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6ee4:	9205      	str	r2, [sp, #20]
   d6ee6:	f7ff fec5 	bl	d6c74 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6eea:	4b08      	ldr	r3, [pc, #32]	; (d6f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6eec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6eee:	4b08      	ldr	r3, [pc, #32]	; (d6f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ef0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6ef2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6ef4:	a806      	add	r0, sp, #24
   d6ef6:	f7ff feca 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6efa:	a802      	add	r0, sp, #8
   d6efc:	f7fd f986 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6f00:	2200      	movs	r2, #0
   d6f02:	4629      	mov	r1, r5
   d6f04:	4803      	ldr	r0, [pc, #12]	; (d6f14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6f06:	f7ff fcc7 	bl	d6898 <application_thread_invoke>
   d6f0a:	e7b7      	b.n	d6e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6f0c:	000d6da5 	.word	0x000d6da5
   d6f10:	000d703d 	.word	0x000d703d
   d6f14:	000d6b1b 	.word	0x000d6b1b

000d6f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f1c:	b08a      	sub	sp, #40	; 0x28
   d6f1e:	4605      	mov	r5, r0
   d6f20:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6f24:	460c      	mov	r4, r1
   d6f26:	4617      	mov	r7, r2
   d6f28:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6f2a:	f7ff fd03 	bl	d6934 <spark_cloud_flag_connected>
   d6f2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6f30:	4682      	mov	sl, r0
   d6f32:	bb38      	cbnz	r0, d6f84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6f34:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6f38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6f3a:	a905      	add	r1, sp, #20
   d6f3c:	4630      	mov	r0, r6
   d6f3e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f42:	f7ff fe97 	bl	d6c74 <_ZN8particle5ErrorC1EOS0_>
   d6f46:	2014      	movs	r0, #20
   d6f48:	f7fd f8a5 	bl	d4096 <_Znwj>
   d6f4c:	4604      	mov	r4, r0
   d6f4e:	b148      	cbz	r0, d6f64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6f50:	2302      	movs	r3, #2
   d6f52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6f56:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6f5c:	4631      	mov	r1, r6
   d6f5e:	300c      	adds	r0, #12
   d6f60:	f7ff fe88 	bl	d6c74 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f64:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6f66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6f6c:	f7ff ff32 	bl	d6dd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6f70:	4630      	mov	r0, r6
   d6f72:	f7ff fe8c 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6f76:	a805      	add	r0, sp, #20
   d6f78:	f7ff fe89 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6f7c:	4628      	mov	r0, r5
   d6f7e:	b00a      	add	sp, #40	; 0x28
   d6f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6f84:	230c      	movs	r3, #12
   d6f86:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6f8a:	2014      	movs	r0, #20
   d6f8c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6f90:	9307      	str	r3, [sp, #28]
   d6f92:	f7fd f880 	bl	d4096 <_Znwj>
   d6f96:	4601      	mov	r1, r0
   d6f98:	b128      	cbz	r0, d6fa6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6f9a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6f9e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6fa2:	f880 a001 	strb.w	sl, [r0, #1]
   d6fa6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6fa8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6faa:	f7ff ff13 	bl	d6dd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6fae:	4b22      	ldr	r3, [pc, #136]	; (d7038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6fb0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6fb2:	2008      	movs	r0, #8
   d6fb4:	f7fd f86f 	bl	d4096 <_Znwj>
   d6fb8:	4682      	mov	sl, r0
   d6fba:	b128      	cbz	r0, d6fc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6fbc:	9b03      	ldr	r3, [sp, #12]
   d6fbe:	f840 3b04 	str.w	r3, [r0], #4
   d6fc2:	a904      	add	r1, sp, #16
   d6fc4:	f7ff fdd5 	bl	d6b72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6fc8:	9600      	str	r6, [sp, #0]
   d6fca:	fa5f f389 	uxtb.w	r3, r9
   d6fce:	4642      	mov	r2, r8
   d6fd0:	4639      	mov	r1, r7
   d6fd2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6fd4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6fd8:	f7ff fcbc 	bl	d6954 <spark_send_event>
   d6fdc:	b9b8      	cbnz	r0, d700e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6fde:	9b03      	ldr	r3, [sp, #12]
   d6fe0:	785b      	ldrb	r3, [r3, #1]
   d6fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6fe6:	b993      	cbnz	r3, d700e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6fe8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6fec:	a905      	add	r1, sp, #20
   d6fee:	a803      	add	r0, sp, #12
   d6ff0:	9205      	str	r2, [sp, #20]
   d6ff2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6ff6:	f7ff ff11 	bl	d6e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6ffa:	a805      	add	r0, sp, #20
   d6ffc:	f7ff fe47 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7000:	a805      	add	r0, sp, #20
   d7002:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7004:	f7ff fe94 	bl	d6d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7008:	a806      	add	r0, sp, #24
   d700a:	f7ff fdb9 	bl	d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d700e:	9b03      	ldr	r3, [sp, #12]
   d7010:	9305      	str	r3, [sp, #20]
   d7012:	a904      	add	r1, sp, #16
   d7014:	a806      	add	r0, sp, #24
   d7016:	f7ff fdac 	bl	d6b72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d701a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d701c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d701e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7020:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d7022:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7024:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7026:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7028:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d702a:	f7ff fda9 	bl	d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d702e:	a804      	add	r0, sp, #16
   d7030:	f7ff fda6 	bl	d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7034:	e7a2      	b.n	d6f7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7036:	bf00      	nop
   d7038:	000d7101 	.word	0x000d7101

000d703c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d703c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d703e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7040:	4605      	mov	r5, r0
	  switch (__op)
   d7042:	d007      	beq.n	d7054 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7044:	2a03      	cmp	r2, #3
   d7046:	d018      	beq.n	d707a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7048:	2a01      	cmp	r2, #1
   d704a:	d101      	bne.n	d7050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d704c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d704e:	6003      	str	r3, [r0, #0]
	}
   d7050:	2000      	movs	r0, #0
   d7052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7054:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7056:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7058:	f7fd f81d 	bl	d4096 <_Znwj>
   d705c:	4604      	mov	r4, r0
   d705e:	b150      	cbz	r0, d7076 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7060:	4631      	mov	r1, r6
   d7062:	f7ff fecb 	bl	d6dfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7066:	6930      	ldr	r0, [r6, #16]
   d7068:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d706c:	b108      	cbz	r0, d7072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d706e:	f001 fde5 	bl	d8c3c <strdup>
        type_(type) {
   d7072:	6120      	str	r0, [r4, #16]
   d7074:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7076:	602c      	str	r4, [r5, #0]
	}
   d7078:	e7ea      	b.n	d7050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d707a:	6804      	ldr	r4, [r0, #0]
   d707c:	2c00      	cmp	r4, #0
   d707e:	d0e7      	beq.n	d7050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7080:	f104 0010 	add.w	r0, r4, #16
   d7084:	f7ff fe03 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7088:	4620      	mov	r0, r4
   d708a:	f7fd f8bf 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d708e:	2118      	movs	r1, #24
   d7090:	4620      	mov	r0, r4
   d7092:	f001 f832 	bl	d80fa <_ZdlPvj>
   d7096:	e7db      	b.n	d7050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7098 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7098:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d709a:	2300      	movs	r3, #0
   d709c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d709e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d70a0:	4604      	mov	r4, r0
   d70a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d70a4:	b12b      	cbz	r3, d70b2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d70a6:	2202      	movs	r2, #2
   d70a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d70aa:	68eb      	ldr	r3, [r5, #12]
   d70ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d70ae:	68ab      	ldr	r3, [r5, #8]
   d70b0:	60a3      	str	r3, [r4, #8]
    }
   d70b2:	4620      	mov	r0, r4
   d70b4:	bd38      	pop	{r3, r4, r5, pc}

000d70b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d70b6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d70b8:	b570      	push	{r4, r5, r6, lr}
   d70ba:	4604      	mov	r4, r0
	  switch (__op)
   d70bc:	d007      	beq.n	d70ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d70be:	2a03      	cmp	r2, #3
   d70c0:	d012      	beq.n	d70e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d70c2:	2a01      	cmp	r2, #1
   d70c4:	d101      	bne.n	d70ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d70c6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d70c8:	6003      	str	r3, [r0, #0]
	}
   d70ca:	2000      	movs	r0, #0
   d70cc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d70ce:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d70d0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d70d2:	f7fc ffe0 	bl	d4096 <_Znwj>
   d70d6:	4605      	mov	r5, r0
   d70d8:	b120      	cbz	r0, d70e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d70da:	4631      	mov	r1, r6
   d70dc:	f7ff ffdc 	bl	d7098 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d70e0:	7c33      	ldrb	r3, [r6, #16]
   d70e2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d70e4:	6025      	str	r5, [r4, #0]
	}
   d70e6:	e7f0      	b.n	d70ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d70e8:	6804      	ldr	r4, [r0, #0]
   d70ea:	2c00      	cmp	r4, #0
   d70ec:	d0ed      	beq.n	d70ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d70ee:	4620      	mov	r0, r4
   d70f0:	f7fd f88c 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d70f4:	2114      	movs	r1, #20
   d70f6:	4620      	mov	r0, r4
   d70f8:	f000 ffff 	bl	d80fa <_ZdlPvj>
   d70fc:	e7e5      	b.n	d70ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7100:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7102:	b089      	sub	sp, #36	; 0x24
   d7104:	4604      	mov	r4, r0
   d7106:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7108:	a801      	add	r0, sp, #4
   d710a:	4611      	mov	r1, r2
   d710c:	f7ff fe10 	bl	d6d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7110:	b1a4      	cbz	r4, d713c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7112:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7114:	b11d      	cbz	r5, d711e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7116:	4628      	mov	r0, r5
   d7118:	f001 fd90 	bl	d8c3c <strdup>
   d711c:	4605      	mov	r5, r0
   d711e:	a801      	add	r0, sp, #4
   d7120:	a903      	add	r1, sp, #12
        type_(type) {
   d7122:	9503      	str	r5, [sp, #12]
   d7124:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7128:	f7ff fe78 	bl	d6e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d712c:	a803      	add	r0, sp, #12
   d712e:	f7ff fdae 	bl	d6c8e <_ZN8particle5ErrorD1Ev>
   d7132:	a802      	add	r0, sp, #8
   d7134:	f7ff fd24 	bl	d6b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7138:	b009      	add	sp, #36	; 0x24
   d713a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d713c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d713e:	2301      	movs	r3, #1
   d7140:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7144:	2a00      	cmp	r2, #0
   d7146:	d103      	bne.n	d7150 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7148:	e8c5 3f41 	strexb	r1, r3, [r5]
   d714c:	2900      	cmp	r1, #0
   d714e:	d1f7      	bne.n	d7140 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7150:	d1ef      	bne.n	d7132 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7152:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7154:	f3bf 8f5b 	dmb	ish
   d7158:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d715a:	1d2b      	adds	r3, r5, #4
   d715c:	f3bf 8f5b 	dmb	ish
   d7160:	e853 6f00 	ldrex	r6, [r3]
   d7164:	e843 4200 	strex	r2, r4, [r3]
   d7168:	2a00      	cmp	r2, #0
   d716a:	d1f9      	bne.n	d7160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d716c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7170:	2e00      	cmp	r6, #0
   d7172:	d0de      	beq.n	d7132 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7174:	4620      	mov	r0, r4
   d7176:	f7ff fb87 	bl	d6888 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d717a:	4607      	mov	r7, r0
   d717c:	b160      	cbz	r0, d7198 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d717e:	f105 010c 	add.w	r1, r5, #12
   d7182:	4630      	mov	r0, r6
   d7184:	f7ff fe15 	bl	d6db2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7188:	4630      	mov	r0, r6
   d718a:	f7fd f83f 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d718e:	2110      	movs	r1, #16
   d7190:	4630      	mov	r0, r6
   d7192:	f000 ffb2 	bl	d80fa <_ZdlPvj>
   d7196:	e7cc      	b.n	d7132 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7198:	4631      	mov	r1, r6
   d719a:	a803      	add	r0, sp, #12
   d719c:	f7ff ff7c 	bl	d7098 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d71a0:	7b2b      	ldrb	r3, [r5, #12]
   d71a2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d71a6:	2010      	movs	r0, #16
   d71a8:	f7fc ff75 	bl	d4096 <_Znwj>
   d71ac:	4605      	mov	r5, r0
   d71ae:	b1d0      	cbz	r0, d71e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d71b0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d71b2:	2014      	movs	r0, #20
   d71b4:	f7fc ff6f 	bl	d4096 <_Znwj>
   d71b8:	4604      	mov	r4, r0
   d71ba:	b178      	cbz	r0, d71dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d71bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d71be:	4601      	mov	r1, r0
   d71c0:	a803      	add	r0, sp, #12
   d71c2:	f7ff fdd4 	bl	d6d6e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71c6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d71c8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d71ca:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71cc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d71ce:	9205      	str	r2, [sp, #20]
   d71d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d71d2:	60e3      	str	r3, [r4, #12]
   d71d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d71d8:	9206      	str	r2, [sp, #24]
   d71da:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d71dc:	4b06      	ldr	r3, [pc, #24]	; (d71f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d71de:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d71e0:	4b06      	ldr	r3, [pc, #24]	; (d71fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d71e2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d71e4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d71e6:	a803      	add	r0, sp, #12
   d71e8:	f7fd f810 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d71ec:	2200      	movs	r2, #0
   d71ee:	4629      	mov	r1, r5
   d71f0:	4803      	ldr	r0, [pc, #12]	; (d7200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d71f2:	f7ff fb51 	bl	d6898 <application_thread_invoke>
   d71f6:	e7c7      	b.n	d7188 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d71f8:	000d6dc5 	.word	0x000d6dc5
   d71fc:	000d70b7 	.word	0x000d70b7
   d7200:	000d6b1b 	.word	0x000d6b1b

000d7204 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7204:	2200      	movs	r2, #0
   d7206:	6840      	ldr	r0, [r0, #4]
   d7208:	4611      	mov	r1, r2
   d720a:	f7ff bc0b 	b.w	d6a24 <network_listening>

000d720e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d720e:	2200      	movs	r2, #0
   d7210:	6840      	ldr	r0, [r0, #4]
   d7212:	4611      	mov	r1, r2
   d7214:	f7ff bc16 	b.w	d6a44 <network_get_listen_timeout>

000d7218 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7218:	6840      	ldr	r0, [r0, #4]
   d721a:	2200      	movs	r2, #0
   d721c:	f7ff bc0a 	b.w	d6a34 <network_set_listen_timeout>

000d7220 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7220:	6840      	ldr	r0, [r0, #4]
   d7222:	2200      	movs	r2, #0
   d7224:	f081 0101 	eor.w	r1, r1, #1
   d7228:	f7ff bbf4 	b.w	d6a14 <network_listen>

000d722c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d722c:	2300      	movs	r3, #0
   d722e:	6840      	ldr	r0, [r0, #4]
   d7230:	461a      	mov	r2, r3
   d7232:	4619      	mov	r1, r3
   d7234:	f7ff bbe6 	b.w	d6a04 <network_off>

000d7238 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7238:	2300      	movs	r3, #0
   d723a:	6840      	ldr	r0, [r0, #4]
   d723c:	461a      	mov	r2, r3
   d723e:	4619      	mov	r1, r3
   d7240:	f7ff bbd8 	b.w	d69f4 <network_on>

000d7244 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7244:	2200      	movs	r2, #0
   d7246:	6840      	ldr	r0, [r0, #4]
   d7248:	4611      	mov	r1, r2
   d724a:	f7ff bbcb 	b.w	d69e4 <network_ready>

000d724e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d724e:	2200      	movs	r2, #0
   d7250:	6840      	ldr	r0, [r0, #4]
   d7252:	4611      	mov	r1, r2
   d7254:	f7ff bbb6 	b.w	d69c4 <network_connecting>

000d7258 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7258:	6840      	ldr	r0, [r0, #4]
   d725a:	2200      	movs	r2, #0
   d725c:	2102      	movs	r1, #2
   d725e:	f7ff bbb9 	b.w	d69d4 <network_disconnect>

000d7262 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7262:	2300      	movs	r3, #0
   d7264:	6840      	ldr	r0, [r0, #4]
   d7266:	461a      	mov	r2, r3
   d7268:	f7ff bba4 	b.w	d69b4 <network_connect>

000d726c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d726c:	4b02      	ldr	r3, [pc, #8]	; (d7278 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d726e:	2203      	movs	r2, #3
   d7270:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7272:	4a02      	ldr	r2, [pc, #8]	; (d727c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7274:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7276:	4770      	bx	lr
   d7278:	2003e60c 	.word	0x2003e60c
   d727c:	000db0e0 	.word	0x000db0e0

000d7280 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7280:	4770      	bx	lr

000d7282 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7284:	4606      	mov	r6, r0
   d7286:	4615      	mov	r5, r2
   d7288:	460c      	mov	r4, r1
   d728a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d728c:	42bc      	cmp	r4, r7
   d728e:	d006      	beq.n	d729e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7290:	6833      	ldr	r3, [r6, #0]
   d7292:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7296:	689b      	ldr	r3, [r3, #8]
   d7298:	4630      	mov	r0, r6
   d729a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d729c:	e7f6      	b.n	d728c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d729e:	4628      	mov	r0, r5
   d72a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72a2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d72a2:	7c00      	ldrb	r0, [r0, #16]
   d72a4:	2200      	movs	r2, #0
   d72a6:	f7ff b9cd 	b.w	d6644 <hal_i2c_write>

000d72aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d72aa:	7c00      	ldrb	r0, [r0, #16]
   d72ac:	2100      	movs	r1, #0
   d72ae:	f7ff b9d1 	b.w	d6654 <hal_i2c_available>

000d72b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d72b2:	7c00      	ldrb	r0, [r0, #16]
   d72b4:	2100      	movs	r1, #0
   d72b6:	f7ff b9d5 	b.w	d6664 <hal_i2c_read>

000d72ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d72ba:	7c00      	ldrb	r0, [r0, #16]
   d72bc:	2100      	movs	r1, #0
   d72be:	f7ff b9d9 	b.w	d6674 <hal_i2c_peek>

000d72c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d72c2:	7c00      	ldrb	r0, [r0, #16]
   d72c4:	2100      	movs	r1, #0
   d72c6:	f7ff b9dd 	b.w	d6684 <hal_i2c_flush>

000d72ca <_ZN7TwoWireD0Ev>:
   d72ca:	b510      	push	{r4, lr}
   d72cc:	2114      	movs	r1, #20
   d72ce:	4604      	mov	r4, r0
   d72d0:	f000 ff13 	bl	d80fa <_ZdlPvj>
   d72d4:	4620      	mov	r0, r4
   d72d6:	bd10      	pop	{r4, pc}

000d72d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d72d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d72da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d72de:	4604      	mov	r4, r0
   d72e0:	4608      	mov	r0, r1
   d72e2:	2100      	movs	r1, #0
   d72e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d72e8:	4b03      	ldr	r3, [pc, #12]	; (d72f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d72ea:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d72ec:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d72ee:	4611      	mov	r1, r2
   d72f0:	f7ff f9d8 	bl	d66a4 <hal_i2c_init>
}
   d72f4:	4620      	mov	r0, r4
   d72f6:	bd10      	pop	{r4, pc}
   d72f8:	000db114 	.word	0x000db114

000d72fc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d72fc:	2300      	movs	r3, #0
   d72fe:	7c00      	ldrb	r0, [r0, #16]
   d7300:	461a      	mov	r2, r3
   d7302:	4619      	mov	r1, r3
   d7304:	f7ff b986 	b.w	d6614 <hal_i2c_begin>

000d7308 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d730a:	2200      	movs	r2, #0
   d730c:	2314      	movs	r3, #20
   d730e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7312:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7316:	780b      	ldrb	r3, [r1, #0]
   d7318:	f88d 3008 	strb.w	r3, [sp, #8]
   d731c:	684b      	ldr	r3, [r1, #4]
   d731e:	9303      	str	r3, [sp, #12]
   d7320:	68cb      	ldr	r3, [r1, #12]
   d7322:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7324:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7326:	7a0b      	ldrb	r3, [r1, #8]
   d7328:	9305      	str	r3, [sp, #20]
   d732a:	a901      	add	r1, sp, #4
   d732c:	f7ff f9d2 	bl	d66d4 <hal_i2c_request_ex>
}
   d7330:	b007      	add	sp, #28
   d7332:	f85d fb04 	ldr.w	pc, [sp], #4

000d7336 <_ZN7TwoWire11requestFromEhjh>:
{
   d7336:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7338:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d733a:	f88d 1000 	strb.w	r1, [sp]
   d733e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7342:	9103      	str	r1, [sp, #12]
   d7344:	bf18      	it	ne
   d7346:	2301      	movne	r3, #1
   d7348:	4669      	mov	r1, sp
    size_ = size;
   d734a:	9201      	str	r2, [sp, #4]
   d734c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7350:	f7ff ffda 	bl	d7308 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7354:	b005      	add	sp, #20
   d7356:	f85d fb04 	ldr.w	pc, [sp], #4

000d735a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d735a:	2301      	movs	r3, #1
   d735c:	f7ff bfeb 	b.w	d7336 <_ZN7TwoWire11requestFromEhjh>

000d7360 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7360:	7c00      	ldrb	r0, [r0, #16]
   d7362:	2200      	movs	r2, #0
   d7364:	f7ff b95e 	b.w	d6624 <hal_i2c_begin_transmission>

000d7368 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7368:	b2c9      	uxtb	r1, r1
   d736a:	f7ff bff9 	b.w	d7360 <_ZN7TwoWire17beginTransmissionEh>

000d736e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d736e:	7c00      	ldrb	r0, [r0, #16]
   d7370:	2200      	movs	r2, #0
   d7372:	f7ff b95f 	b.w	d6634 <hal_i2c_end_transmission>

000d7376 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7376:	2101      	movs	r1, #1
   d7378:	f7ff bff9 	b.w	d736e <_ZN7TwoWire15endTransmissionEh>

000d737c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d737c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d737e:	2100      	movs	r1, #0
   d7380:	7c00      	ldrb	r0, [r0, #16]
   d7382:	f7ff f997 	bl	d66b4 <hal_i2c_lock>
}
   d7386:	fab0 f080 	clz	r0, r0
   d738a:	0940      	lsrs	r0, r0, #5
   d738c:	bd08      	pop	{r3, pc}

000d738e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d738e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7390:	2100      	movs	r1, #0
   d7392:	7c00      	ldrb	r0, [r0, #16]
   d7394:	f7ff f996 	bl	d66c4 <hal_i2c_unlock>
}
   d7398:	fab0 f080 	clz	r0, r0
   d739c:	0940      	lsrs	r0, r0, #5
   d739e:	bd08      	pop	{r3, pc}

000d73a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d73a0:	4700      	bx	r0
	...

000d73a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d73a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d73a8:	2400      	movs	r4, #0
{
   d73aa:	461d      	mov	r5, r3
   d73ac:	460f      	mov	r7, r1
   d73ae:	4690      	mov	r8, r2
   d73b0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d73b2:	f7ff f927 	bl	d6604 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d73b6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d73b8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d73bc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d73c0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d73c4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d73c8:	bfa2      	ittt	ge
   d73ca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d73ce:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d73d2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d73d4:	4907      	ldr	r1, [pc, #28]	; (d73f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d73d6:	9400      	str	r4, [sp, #0]
   d73d8:	4643      	mov	r3, r8
   d73da:	463a      	mov	r2, r7
   d73dc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d73de:	bfa8      	it	ge
   d73e0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d73e4:	f7ff f906 	bl	d65f4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d73e8:	fab0 f080 	clz	r0, r0
   d73ec:	0940      	lsrs	r0, r0, #5
   d73ee:	b004      	add	sp, #16
   d73f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73f4:	000d73a1 	.word	0x000d73a1

000d73f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d73f8:	4770      	bx	lr

000d73fa <_ZN9IPAddressD0Ev>:
   d73fa:	b510      	push	{r4, lr}
   d73fc:	2118      	movs	r1, #24
   d73fe:	4604      	mov	r4, r0
   d7400:	f000 fe7b 	bl	d80fa <_ZdlPvj>
   d7404:	4620      	mov	r0, r4
   d7406:	bd10      	pop	{r4, pc}

000d7408 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7408:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d740a:	7d03      	ldrb	r3, [r0, #20]
   d740c:	2b06      	cmp	r3, #6
{
   d740e:	b08d      	sub	sp, #52	; 0x34
   d7410:	460e      	mov	r6, r1
   d7412:	f100 0704 	add.w	r7, r0, #4
   d7416:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d741a:	d012      	beq.n	d7442 <_ZNK9IPAddress7printToER5Print+0x3a>
   d741c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7420:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7424:	220a      	movs	r2, #10
   d7426:	4630      	mov	r0, r6
   d7428:	f000 f949 	bl	d76be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d742c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d742e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7430:	d019      	beq.n	d7466 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7432:	2c00      	cmp	r4, #0
   d7434:	d0f4      	beq.n	d7420 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7436:	212e      	movs	r1, #46	; 0x2e
   d7438:	4630      	mov	r0, r6
   d743a:	f000 f927 	bl	d768c <_ZN5Print5printEc>
   d743e:	4404      	add	r4, r0
   d7440:	e7ee      	b.n	d7420 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7442:	232f      	movs	r3, #47	; 0x2f
   d7444:	466a      	mov	r2, sp
   d7446:	4639      	mov	r1, r7
   d7448:	200a      	movs	r0, #10
		buf[0] = 0;
   d744a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d744e:	f7ff f949 	bl	d66e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7452:	4668      	mov	r0, sp
   d7454:	f001 fc0f 	bl	d8c76 <strlen>
   d7458:	6833      	ldr	r3, [r6, #0]
   d745a:	4602      	mov	r2, r0
   d745c:	68db      	ldr	r3, [r3, #12]
   d745e:	4669      	mov	r1, sp
   d7460:	4630      	mov	r0, r6
   d7462:	4798      	blx	r3
   d7464:	4604      	mov	r4, r0
    }
    return n;
}
   d7466:	4620      	mov	r0, r4
   d7468:	b00d      	add	sp, #52	; 0x34
   d746a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d746c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d746c:	b510      	push	{r4, lr}
   d746e:	4b05      	ldr	r3, [pc, #20]	; (d7484 <_ZN9IPAddressC1Ev+0x18>)
   d7470:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7472:	2211      	movs	r2, #17
   d7474:	f840 3b04 	str.w	r3, [r0], #4
   d7478:	2100      	movs	r1, #0
   d747a:	f001 fba1 	bl	d8bc0 <memset>
}
   d747e:	4620      	mov	r0, r4
   d7480:	bd10      	pop	{r4, pc}
   d7482:	bf00      	nop
   d7484:	000db13c 	.word	0x000db13c

000d7488 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7488:	4603      	mov	r3, r0
   d748a:	4a07      	ldr	r2, [pc, #28]	; (d74a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d748c:	b510      	push	{r4, lr}
   d748e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7492:	f101 0210 	add.w	r2, r1, #16
   d7496:	f851 4b04 	ldr.w	r4, [r1], #4
   d749a:	f843 4b04 	str.w	r4, [r3], #4
   d749e:	4291      	cmp	r1, r2
   d74a0:	d1f9      	bne.n	d7496 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d74a2:	780a      	ldrb	r2, [r1, #0]
   d74a4:	701a      	strb	r2, [r3, #0]
}
   d74a6:	bd10      	pop	{r4, pc}
   d74a8:	000db13c 	.word	0x000db13c

000d74ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d74ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d74ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d74b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d74b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d74ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d74be:	2304      	movs	r3, #4
   d74c0:	6041      	str	r1, [r0, #4]
   d74c2:	7503      	strb	r3, [r0, #20]
}
   d74c4:	bd10      	pop	{r4, pc}

000d74c6 <_ZN9IPAddressaSEPKh>:
{
   d74c6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d74c8:	78cb      	ldrb	r3, [r1, #3]
   d74ca:	9300      	str	r3, [sp, #0]
   d74cc:	788b      	ldrb	r3, [r1, #2]
   d74ce:	784a      	ldrb	r2, [r1, #1]
   d74d0:	7809      	ldrb	r1, [r1, #0]
   d74d2:	f7ff ffeb 	bl	d74ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d74d6:	b002      	add	sp, #8
   d74d8:	bd10      	pop	{r4, pc}
	...

000d74dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d74dc:	4b01      	ldr	r3, [pc, #4]	; (d74e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d74de:	4a02      	ldr	r2, [pc, #8]	; (d74e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d74e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d74e2:	4770      	bx	lr
   d74e4:	2003e614 	.word	0x2003e614
   d74e8:	000db148 	.word	0x000db148

000d74ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d74ec:	2300      	movs	r3, #0
   d74ee:	6840      	ldr	r0, [r0, #4]
   d74f0:	461a      	mov	r2, r3
   d74f2:	f7ff ba5f 	b.w	d69b4 <network_connect>

000d74f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d74f6:	6840      	ldr	r0, [r0, #4]
   d74f8:	2200      	movs	r2, #0
   d74fa:	2102      	movs	r1, #2
   d74fc:	f7ff ba6a 	b.w	d69d4 <network_disconnect>

000d7500 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7500:	2200      	movs	r2, #0
   d7502:	6840      	ldr	r0, [r0, #4]
   d7504:	4611      	mov	r1, r2
   d7506:	f7ff ba5d 	b.w	d69c4 <network_connecting>

000d750a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d750a:	2200      	movs	r2, #0
   d750c:	6840      	ldr	r0, [r0, #4]
   d750e:	4611      	mov	r1, r2
   d7510:	f7ff ba68 	b.w	d69e4 <network_ready>

000d7514 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7514:	2300      	movs	r3, #0
   d7516:	6840      	ldr	r0, [r0, #4]
   d7518:	461a      	mov	r2, r3
   d751a:	4619      	mov	r1, r3
   d751c:	f7ff ba6a 	b.w	d69f4 <network_on>

000d7520 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7520:	2300      	movs	r3, #0
   d7522:	6840      	ldr	r0, [r0, #4]
   d7524:	461a      	mov	r2, r3
   d7526:	4619      	mov	r1, r3
   d7528:	f7ff ba6c 	b.w	d6a04 <network_off>

000d752c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d752c:	6840      	ldr	r0, [r0, #4]
   d752e:	2200      	movs	r2, #0
   d7530:	f081 0101 	eor.w	r1, r1, #1
   d7534:	f7ff ba6e 	b.w	d6a14 <network_listen>

000d7538 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7538:	6840      	ldr	r0, [r0, #4]
   d753a:	2200      	movs	r2, #0
   d753c:	f7ff ba7a 	b.w	d6a34 <network_set_listen_timeout>

000d7540 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7540:	2200      	movs	r2, #0
   d7542:	6840      	ldr	r0, [r0, #4]
   d7544:	4611      	mov	r1, r2
   d7546:	f7ff ba7d 	b.w	d6a44 <network_get_listen_timeout>

000d754a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d754a:	2200      	movs	r2, #0
   d754c:	6840      	ldr	r0, [r0, #4]
   d754e:	4611      	mov	r1, r2
   d7550:	f7ff ba68 	b.w	d6a24 <network_listening>

000d7554 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7558:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d755a:	b095      	sub	sp, #84	; 0x54
   d755c:	4616      	mov	r6, r2
   d755e:	460d      	mov	r5, r1
   d7560:	4607      	mov	r7, r0
    IPAddress addr;
   d7562:	f7ff ff83 	bl	d746c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7566:	4621      	mov	r1, r4
   d7568:	2218      	movs	r2, #24
   d756a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d756c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d756e:	f001 fb27 	bl	d8bc0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7572:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7574:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7578:	4621      	mov	r1, r4
   d757a:	466b      	mov	r3, sp
   d757c:	aa0c      	add	r2, sp, #48	; 0x30
   d757e:	4630      	mov	r0, r6
   d7580:	f7ff f8c0 	bl	d6704 <netdb_getaddrinfo>
    if (!r) {
   d7584:	4604      	mov	r4, r0
   d7586:	2800      	cmp	r0, #0
   d7588:	d146      	bne.n	d7618 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d758a:	4602      	mov	r2, r0
   d758c:	2101      	movs	r1, #1
   d758e:	6868      	ldr	r0, [r5, #4]
   d7590:	f7ff fa28 	bl	d69e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7594:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7596:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7598:	4622      	mov	r2, r4
   d759a:	6868      	ldr	r0, [r5, #4]
   d759c:	f7ff fa22 	bl	d69e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75a2:	4681      	mov	r9, r0
        bool ok = false;
   d75a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75a6:	2e00      	cmp	r6, #0
   d75a8:	d036      	beq.n	d7618 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d75aa:	2900      	cmp	r1, #0
   d75ac:	d134      	bne.n	d7618 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d75ae:	6873      	ldr	r3, [r6, #4]
   d75b0:	2b02      	cmp	r3, #2
   d75b2:	d003      	beq.n	d75bc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d75b4:	2b0a      	cmp	r3, #10
   d75b6:	d00b      	beq.n	d75d0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75b8:	69f6      	ldr	r6, [r6, #28]
   d75ba:	e7f4      	b.n	d75a6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d75bc:	f1b8 0f00 	cmp.w	r8, #0
   d75c0:	d004      	beq.n	d75cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d75c2:	6971      	ldr	r1, [r6, #20]
   d75c4:	4638      	mov	r0, r7
   d75c6:	3104      	adds	r1, #4
   d75c8:	f7ff ff7d 	bl	d74c6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d75cc:	4641      	mov	r1, r8
   d75ce:	e7f3      	b.n	d75b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d75d0:	f1b9 0f00 	cmp.w	r9, #0
   d75d4:	d101      	bne.n	d75da <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d75d6:	4649      	mov	r1, r9
   d75d8:	e7ee      	b.n	d75b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d75da:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d75dc:	2210      	movs	r2, #16
   d75de:	a801      	add	r0, sp, #4
   d75e0:	f001 faee 	bl	d8bc0 <memset>
                    a.v = 6;
   d75e4:	2306      	movs	r3, #6
   d75e6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d75ea:	ad01      	add	r5, sp, #4
   d75ec:	f104 0308 	add.w	r3, r4, #8
   d75f0:	3418      	adds	r4, #24
   d75f2:	6818      	ldr	r0, [r3, #0]
   d75f4:	6859      	ldr	r1, [r3, #4]
   d75f6:	462a      	mov	r2, r5
   d75f8:	c203      	stmia	r2!, {r0, r1}
   d75fa:	3308      	adds	r3, #8
   d75fc:	42a3      	cmp	r3, r4
   d75fe:	4615      	mov	r5, r2
   d7600:	d1f7      	bne.n	d75f2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7602:	a901      	add	r1, sp, #4
   d7604:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7606:	ad07      	add	r5, sp, #28
   d7608:	f7ff ff3e 	bl	d7488 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d760c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d760e:	1d3c      	adds	r4, r7, #4
   d7610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7612:	682b      	ldr	r3, [r5, #0]
   d7614:	7023      	strb	r3, [r4, #0]
   d7616:	e7de      	b.n	d75d6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7618:	9800      	ldr	r0, [sp, #0]
   d761a:	f7ff f86b 	bl	d66f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d761e:	4638      	mov	r0, r7
   d7620:	b015      	add	sp, #84	; 0x54
   d7622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7628 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7628:	4b02      	ldr	r3, [pc, #8]	; (d7634 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d762a:	4a03      	ldr	r2, [pc, #12]	; (d7638 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d762c:	601a      	str	r2, [r3, #0]
   d762e:	2200      	movs	r2, #0
   d7630:	605a      	str	r2, [r3, #4]

} // spark
   d7632:	4770      	bx	lr
   d7634:	2003e618 	.word	0x2003e618
   d7638:	000db154 	.word	0x000db154

000d763c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d763e:	4606      	mov	r6, r0
   d7640:	460d      	mov	r5, r1
  size_t n = 0;
   d7642:	188f      	adds	r7, r1, r2
   d7644:	2400      	movs	r4, #0
  while (size--) {
   d7646:	42bd      	cmp	r5, r7
   d7648:	d00c      	beq.n	d7664 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d764a:	6833      	ldr	r3, [r6, #0]
   d764c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7650:	689b      	ldr	r3, [r3, #8]
   d7652:	4630      	mov	r0, r6
   d7654:	4798      	blx	r3
     if (chunk>=0)
   d7656:	1e03      	subs	r3, r0, #0
   d7658:	db01      	blt.n	d765e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d765a:	441c      	add	r4, r3
  while (size--) {
   d765c:	e7f3      	b.n	d7646 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d765e:	2c00      	cmp	r4, #0
   d7660:	bf08      	it	eq
   d7662:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7664:	4620      	mov	r0, r4
   d7666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7668 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7668:	b513      	push	{r0, r1, r4, lr}
   d766a:	4604      	mov	r4, r0
    }
   d766c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d766e:	b159      	cbz	r1, d7688 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7670:	9101      	str	r1, [sp, #4]
   d7672:	f001 fb00 	bl	d8c76 <strlen>
   d7676:	6823      	ldr	r3, [r4, #0]
   d7678:	9901      	ldr	r1, [sp, #4]
   d767a:	68db      	ldr	r3, [r3, #12]
   d767c:	4602      	mov	r2, r0
   d767e:	4620      	mov	r0, r4
    }
   d7680:	b002      	add	sp, #8
   d7682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7686:	4718      	bx	r3
    }
   d7688:	b002      	add	sp, #8
   d768a:	bd10      	pop	{r4, pc}

000d768c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d768c:	6803      	ldr	r3, [r0, #0]
   d768e:	689b      	ldr	r3, [r3, #8]
   d7690:	4718      	bx	r3

000d7692 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7692:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7694:	210d      	movs	r1, #13
{
   d7696:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7698:	f7ff fff8 	bl	d768c <_ZN5Print5printEc>
  n += print('\n');
   d769c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d769e:	4604      	mov	r4, r0
  n += print('\n');
   d76a0:	4628      	mov	r0, r5
   d76a2:	f7ff fff3 	bl	d768c <_ZN5Print5printEc>
  return n;
}
   d76a6:	4420      	add	r0, r4
   d76a8:	bd38      	pop	{r3, r4, r5, pc}

000d76aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d76aa:	b538      	push	{r3, r4, r5, lr}
   d76ac:	4605      	mov	r5, r0
  return write(str);
   d76ae:	f7ff ffdb 	bl	d7668 <_ZN5Print5writeEPKc>
   d76b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d76b4:	4628      	mov	r0, r5
   d76b6:	f7ff ffec 	bl	d7692 <_ZN5Print7printlnEv>
  return n;
}
   d76ba:	4420      	add	r0, r4
   d76bc:	bd38      	pop	{r3, r4, r5, pc}

000d76be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76be:	b530      	push	{r4, r5, lr}
   d76c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d76c2:	2300      	movs	r3, #0
   d76c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d76c8:	2a01      	cmp	r2, #1
   d76ca:	bf98      	it	ls
   d76cc:	220a      	movls	r2, #10
   d76ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d76d0:	460d      	mov	r5, r1
   d76d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d76d6:	fb01 5312 	mls	r3, r1, r2, r5
   d76da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76de:	2b09      	cmp	r3, #9
   d76e0:	bf94      	ite	ls
   d76e2:	3330      	addls	r3, #48	; 0x30
   d76e4:	3337      	addhi	r3, #55	; 0x37
   d76e6:	b2db      	uxtb	r3, r3
  } while(n);
   d76e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d76ee:	d9ef      	bls.n	d76d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d76f0:	4621      	mov	r1, r4
   d76f2:	f7ff ffb9 	bl	d7668 <_ZN5Print5writeEPKc>
}
   d76f6:	b00b      	add	sp, #44	; 0x2c
   d76f8:	bd30      	pop	{r4, r5, pc}

000d76fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d76fa:	b510      	push	{r4, lr}
   d76fc:	4604      	mov	r4, r0
   d76fe:	f7fc fd85 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d7702:	4620      	mov	r0, r4
   d7704:	bd10      	pop	{r4, pc}
	...

000d7708 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7708:	4803      	ldr	r0, [pc, #12]	; (d7718 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d770a:	4a04      	ldr	r2, [pc, #16]	; (d771c <_GLOBAL__sub_I_RGB+0x14>)
   d770c:	4904      	ldr	r1, [pc, #16]	; (d7720 <_GLOBAL__sub_I_RGB+0x18>)
   d770e:	2300      	movs	r3, #0
   d7710:	6083      	str	r3, [r0, #8]
   d7712:	f000 bced 	b.w	d80f0 <__aeabi_atexit>
   d7716:	bf00      	nop
   d7718:	2003e620 	.word	0x2003e620
   d771c:	2003e410 	.word	0x2003e410
   d7720:	000d76fb 	.word	0x000d76fb

000d7724 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7724:	b510      	push	{r4, lr}
   d7726:	4604      	mov	r4, r0
   d7728:	4608      	mov	r0, r1
{
    _spi = spi;
   d772a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d772c:	f7fe fff2 	bl	d6714 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7730:	2300      	movs	r3, #0
   d7732:	6063      	str	r3, [r4, #4]
}
   d7734:	4620      	mov	r0, r4
   d7736:	bd10      	pop	{r4, pc}

000d7738 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7738:	b510      	push	{r4, lr}
   d773a:	4604      	mov	r4, r0
{
	free(buffer);
   d773c:	6800      	ldr	r0, [r0, #0]
   d773e:	f7ff f991 	bl	d6a64 <free>
}
   d7742:	4620      	mov	r0, r4
   d7744:	bd10      	pop	{r4, pc}

000d7746 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7746:	b510      	push	{r4, lr}
   d7748:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d774a:	6800      	ldr	r0, [r0, #0]
   d774c:	b108      	cbz	r0, d7752 <_ZN6String10invalidateEv+0xc>
   d774e:	f7ff f989 	bl	d6a64 <free>
	buffer = NULL;
   d7752:	2300      	movs	r3, #0
	capacity = len = 0;
   d7754:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7758:	6023      	str	r3, [r4, #0]
}
   d775a:	bd10      	pop	{r4, pc}

000d775c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d775c:	b538      	push	{r3, r4, r5, lr}
   d775e:	4604      	mov	r4, r0
   d7760:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7762:	6800      	ldr	r0, [r0, #0]
   d7764:	3101      	adds	r1, #1
   d7766:	f7ff f985 	bl	d6a74 <realloc>
	if (newbuffer) {
   d776a:	b110      	cbz	r0, d7772 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d776c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7770:	2001      	movs	r0, #1
	}
	return 0;
}
   d7772:	bd38      	pop	{r3, r4, r5, pc}

000d7774 <_ZN6String7reserveEj>:
{
   d7774:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7776:	6803      	ldr	r3, [r0, #0]
{
   d7778:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d777a:	b123      	cbz	r3, d7786 <_ZN6String7reserveEj+0x12>
   d777c:	6843      	ldr	r3, [r0, #4]
   d777e:	428b      	cmp	r3, r1
   d7780:	d301      	bcc.n	d7786 <_ZN6String7reserveEj+0x12>
   d7782:	2001      	movs	r0, #1
}
   d7784:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7786:	4620      	mov	r0, r4
   d7788:	f7ff ffe8 	bl	d775c <_ZN6String12changeBufferEj>
   d778c:	2800      	cmp	r0, #0
   d778e:	d0f9      	beq.n	d7784 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7790:	68a3      	ldr	r3, [r4, #8]
   d7792:	2b00      	cmp	r3, #0
   d7794:	d1f5      	bne.n	d7782 <_ZN6String7reserveEj+0xe>
   d7796:	6822      	ldr	r2, [r4, #0]
   d7798:	7013      	strb	r3, [r2, #0]
   d779a:	e7f2      	b.n	d7782 <_ZN6String7reserveEj+0xe>

000d779c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d779c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d779e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d77a0:	4611      	mov	r1, r2
   d77a2:	9201      	str	r2, [sp, #4]
{
   d77a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d77a6:	f7ff ffe5 	bl	d7774 <_ZN6String7reserveEj>
   d77aa:	9a01      	ldr	r2, [sp, #4]
   d77ac:	b928      	cbnz	r0, d77ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d77ae:	4620      	mov	r0, r4
   d77b0:	f7ff ffc9 	bl	d7746 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d77b4:	4620      	mov	r0, r4
   d77b6:	b003      	add	sp, #12
   d77b8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d77ba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d77bc:	4629      	mov	r1, r5
   d77be:	6820      	ldr	r0, [r4, #0]
   d77c0:	f001 f9d6 	bl	d8b70 <memcpy>
	buffer[len] = 0;
   d77c4:	6822      	ldr	r2, [r4, #0]
   d77c6:	68a3      	ldr	r3, [r4, #8]
   d77c8:	2100      	movs	r1, #0
   d77ca:	54d1      	strb	r1, [r2, r3]
	return *this;
   d77cc:	e7f2      	b.n	d77b4 <_ZN6String4copyEPKcj+0x18>

000d77ce <_ZN6StringC1EPKc>:
	buffer = NULL;
   d77ce:	2300      	movs	r3, #0
String::String(const char *cstr)
   d77d0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d77d2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d77d6:	4604      	mov	r4, r0
	len = 0;
   d77d8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77da:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d77dc:	b141      	cbz	r1, d77f0 <_ZN6StringC1EPKc+0x22>
   d77de:	4608      	mov	r0, r1
   d77e0:	9101      	str	r1, [sp, #4]
   d77e2:	f001 fa48 	bl	d8c76 <strlen>
   d77e6:	9901      	ldr	r1, [sp, #4]
   d77e8:	4602      	mov	r2, r0
   d77ea:	4620      	mov	r0, r4
   d77ec:	f7ff ffd6 	bl	d779c <_ZN6String4copyEPKcj>
}
   d77f0:	4620      	mov	r0, r4
   d77f2:	b002      	add	sp, #8
   d77f4:	bd10      	pop	{r4, pc}

000d77f6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d77f6:	4288      	cmp	r0, r1
{
   d77f8:	b510      	push	{r4, lr}
   d77fa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d77fc:	d005      	beq.n	d780a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d77fe:	680b      	ldr	r3, [r1, #0]
   d7800:	b12b      	cbz	r3, d780e <_ZN6StringaSERKS_+0x18>
   d7802:	688a      	ldr	r2, [r1, #8]
   d7804:	4619      	mov	r1, r3
   d7806:	f7ff ffc9 	bl	d779c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d780a:	4620      	mov	r0, r4
   d780c:	bd10      	pop	{r4, pc}
	else invalidate();
   d780e:	f7ff ff9a 	bl	d7746 <_ZN6String10invalidateEv>
   d7812:	e7fa      	b.n	d780a <_ZN6StringaSERKS_+0x14>

000d7814 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7814:	b510      	push	{r4, lr}
	buffer = NULL;
   d7816:	2300      	movs	r3, #0
String::String(const String &value)
   d7818:	4604      	mov	r4, r0
	capacity = 0;
   d781a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d781e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7820:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7822:	f7ff ffe8 	bl	d77f6 <_ZN6StringaSERKS_>
}
   d7826:	4620      	mov	r0, r4
   d7828:	bd10      	pop	{r4, pc}

000d782a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d782a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d782c:	6882      	ldr	r2, [r0, #8]
   d782e:	b93a      	cbnz	r2, d7840 <_ZNK6String6equalsEPKc+0x16>
   d7830:	b121      	cbz	r1, d783c <_ZNK6String6equalsEPKc+0x12>
   d7832:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7834:	fab0 f080 	clz	r0, r0
   d7838:	0940      	lsrs	r0, r0, #5
   d783a:	e000      	b.n	d783e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d783c:	2001      	movs	r0, #1
}
   d783e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7840:	6800      	ldr	r0, [r0, #0]
   d7842:	b909      	cbnz	r1, d7848 <_ZNK6String6equalsEPKc+0x1e>
   d7844:	7800      	ldrb	r0, [r0, #0]
   d7846:	e7f5      	b.n	d7834 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7848:	f001 f9e6 	bl	d8c18 <strcmp>
   d784c:	e7f2      	b.n	d7834 <_ZNK6String6equalsEPKc+0xa>

000d784e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d784e:	b558      	push	{r3, r4, r6, lr}
   d7850:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7852:	b12a      	cbz	r2, d7860 <_ZNK6String8getBytesEPhjj+0x12>
   d7854:	b121      	cbz	r1, d7860 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d7856:	6884      	ldr	r4, [r0, #8]
   d7858:	429c      	cmp	r4, r3
   d785a:	d802      	bhi.n	d7862 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d785c:	2300      	movs	r3, #0
   d785e:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d7860:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d7862:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d7864:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d7866:	6801      	ldr	r1, [r0, #0]
   d7868:	4294      	cmp	r4, r2
   d786a:	bf28      	it	cs
   d786c:	4614      	movcs	r4, r2
   d786e:	4419      	add	r1, r3
   d7870:	4622      	mov	r2, r4
   d7872:	4630      	mov	r0, r6
   d7874:	f001 fa19 	bl	d8caa <strncpy>
	buf[n] = 0;
   d7878:	2300      	movs	r3, #0
   d787a:	5533      	strb	r3, [r6, r4]
   d787c:	e7f0      	b.n	d7860 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d7880 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d7880:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d7882:	6800      	ldr	r0, [r0, #0]
   d7884:	b140      	cbz	r0, d7898 <_ZNK6String7toFloatEv+0x18>
   d7886:	f001 f94b 	bl	d8b20 <atof>
   d788a:	ec51 0b10 	vmov	r0, r1, d0
   d788e:	f001 f8b3 	bl	d89f8 <__aeabi_d2f>
   d7892:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d7896:	bd08      	pop	{r3, pc}
	return 0;
   d7898:	ed9f 0a01 	vldr	s0, [pc, #4]	; d78a0 <_ZNK6String7toFloatEv+0x20>
   d789c:	e7fb      	b.n	d7896 <_ZNK6String7toFloatEv+0x16>
   d789e:	bf00      	nop
   d78a0:	00000000 	.word	0x00000000

000d78a4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d78a4:	b507      	push	{r0, r1, r2, lr}
   d78a6:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d78a8:	2100      	movs	r1, #0
{
   d78aa:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d78ac:	9100      	str	r1, [sp, #0]
   d78ae:	2001      	movs	r0, #1
   d78b0:	218c      	movs	r1, #140	; 0x8c
   d78b2:	f7ff f81d 	bl	d68f0 <system_reset>
}
   d78b6:	b003      	add	sp, #12
   d78b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d78bc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d78bc:	4601      	mov	r1, r0
    reset(0, flags);
   d78be:	2000      	movs	r0, #0
   d78c0:	f7ff bff0 	b.w	d78a4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d78c4 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d78c4:	2000      	movs	r0, #0
   d78c6:	f7ff bff9 	b.w	d78bc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d78cc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d78cc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d78ce:	4b09      	ldr	r3, [pc, #36]	; (d78f4 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d78d0:	4c09      	ldr	r4, [pc, #36]	; (d78f8 <_GLOBAL__sub_I_System+0x2c>)
   d78d2:	2202      	movs	r2, #2
   d78d4:	2000      	movs	r0, #0
   d78d6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d78d8:	4b08      	ldr	r3, [pc, #32]	; (d78fc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d78da:	6020      	str	r0, [r4, #0]
   d78dc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d78de:	71a0      	strb	r0, [r4, #6]
   d78e0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d78e2:	f7fe ffb9 	bl	d6858 <set_system_mode>
SystemClass System;
   d78e6:	4620      	mov	r0, r4
   d78e8:	4a05      	ldr	r2, [pc, #20]	; (d7900 <_GLOBAL__sub_I_System+0x34>)
   d78ea:	4906      	ldr	r1, [pc, #24]	; (d7904 <_GLOBAL__sub_I_System+0x38>)
   d78ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d78f0:	f000 bbfe 	b.w	d80f0 <__aeabi_atexit>
   d78f4:	2003e63c 	.word	0x2003e63c
   d78f8:	2003e630 	.word	0x2003e630
   d78fc:	ffff0000 	.word	0xffff0000
   d7900:	2003e410 	.word	0x2003e410
   d7904:	000d41a3 	.word	0x000d41a3

000d7908 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d790c:	4a15      	ldr	r2, [pc, #84]	; (d7964 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d790e:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7970 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7912:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7916:	18c0      	adds	r0, r0, r3
   d7918:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d791c:	4a12      	ldr	r2, [pc, #72]	; (d7968 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d791e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7922:	18c6      	adds	r6, r0, r3
   d7924:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7928:	e9d8 2300 	ldrd	r2, r3, [r8]
   d792c:	42bb      	cmp	r3, r7
   d792e:	bf08      	it	eq
   d7930:	42b2      	cmpeq	r2, r6
{
   d7932:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7934:	d013      	beq.n	d795e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7936:	a903      	add	r1, sp, #12
   d7938:	4668      	mov	r0, sp
   d793a:	e9cd 6700 	strd	r6, r7, [sp]
   d793e:	f7ff f8d1 	bl	d6ae4 <localtime_r>
	calendar_time.tm_year += 1900;
   d7942:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7944:	4d09      	ldr	r5, [pc, #36]	; (d796c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7946:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d794a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d794c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d794e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7956:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d795a:	6823      	ldr	r3, [r4, #0]
   d795c:	602b      	str	r3, [r5, #0]
    }
}
   d795e:	b00c      	add	sp, #48	; 0x30
   d7960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7964:	2003e678 	.word	0x2003e678
   d7968:	2003e670 	.word	0x2003e670
   d796c:	2003e648 	.word	0x2003e648
   d7970:	2003e680 	.word	0x2003e680

000d7974 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7974:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7976:	2000      	movs	r0, #0
   d7978:	f7ff f804 	bl	d6984 <spark_sync_time_pending>
   d797c:	b128      	cbz	r0, d798a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d797e:	f7fe ffd9 	bl	d6934 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7982:	f080 0001 	eor.w	r0, r0, #1
   d7986:	b2c0      	uxtb	r0, r0
    }
   d7988:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d798a:	2001      	movs	r0, #1
   d798c:	e7fc      	b.n	d7988 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d798e <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d798e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7990:	4602      	mov	r2, r0
   d7992:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7994:	4668      	mov	r0, sp
    struct timeval tv = {
   d7996:	2100      	movs	r1, #0
    };
   d7998:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d799c:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d79a0:	f7fe fe00 	bl	d65a4 <hal_rtc_set_time>
   d79a4:	4602      	mov	r2, r0
   d79a6:	b910      	cbnz	r0, d79ae <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d79a8:	4601      	mov	r1, r0
   d79aa:	f7fe ff85 	bl	d68b8 <system_notify_time_changed>
    }
}
   d79ae:	b005      	add	sp, #20
   d79b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d79b4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d79b4:	b530      	push	{r4, r5, lr}
   d79b6:	4604      	mov	r4, r0
    t += time_zone_cache;
   d79b8:	4818      	ldr	r0, [pc, #96]	; (d7a1c <_ZN9TimeClass7timeStrEx+0x68>)
   d79ba:	e9d0 1000 	ldrd	r1, r0, [r0]
   d79be:	1852      	adds	r2, r2, r1
   d79c0:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d79c4:	4816      	ldr	r0, [pc, #88]	; (d7a20 <_ZN9TimeClass7timeStrEx+0x6c>)
   d79c6:	e9d0 1000 	ldrd	r1, r0, [r0]
   d79ca:	1852      	adds	r2, r2, r1
{
   d79cc:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d79ce:	eb40 0303 	adc.w	r3, r0, r3
   d79d2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d79d6:	2224      	movs	r2, #36	; 0x24
   d79d8:	eb0d 0002 	add.w	r0, sp, r2
   d79dc:	2100      	movs	r1, #0
   d79de:	f001 f8ef 	bl	d8bc0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d79e2:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d79e4:	a909      	add	r1, sp, #36	; 0x24
   d79e6:	4668      	mov	r0, sp
   d79e8:	f7ff f87c 	bl	d6ae4 <localtime_r>
    char ascstr[26] = {};
   d79ec:	2216      	movs	r2, #22
   d79ee:	4629      	mov	r1, r5
   d79f0:	a803      	add	r0, sp, #12
   d79f2:	9502      	str	r5, [sp, #8]
   d79f4:	f001 f8e4 	bl	d8bc0 <memset>
    asctime_r(&calendar_time, ascstr);
   d79f8:	a902      	add	r1, sp, #8
   d79fa:	a809      	add	r0, sp, #36	; 0x24
   d79fc:	f001 f86a 	bl	d8ad4 <asctime_r>
    int len = strlen(ascstr);
   d7a00:	a802      	add	r0, sp, #8
   d7a02:	f001 f938 	bl	d8c76 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7a06:	ab12      	add	r3, sp, #72	; 0x48
   d7a08:	4418      	add	r0, r3
    return String(ascstr);
   d7a0a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7a0c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7a10:	4620      	mov	r0, r4
   d7a12:	f7ff fedc 	bl	d77ce <_ZN6StringC1EPKc>
}
   d7a16:	4620      	mov	r0, r4
   d7a18:	b013      	add	sp, #76	; 0x4c
   d7a1a:	bd30      	pop	{r4, r5, pc}
   d7a1c:	2003e678 	.word	0x2003e678
   d7a20:	2003e670 	.word	0x2003e670

000d7a24 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a28:	b0a5      	sub	sp, #148	; 0x94
   d7a2a:	4607      	mov	r7, r0
   d7a2c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a2e:	a814      	add	r0, sp, #80	; 0x50
{
   d7a30:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a32:	223f      	movs	r2, #63	; 0x3f
{
   d7a34:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a36:	f001 f938 	bl	d8caa <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7a3a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7a3c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7a3e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7a42:	f001 f918 	bl	d8c76 <strlen>
   d7a46:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d7a48:	bb5d      	cbnz	r5, d7aa2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d7a4a:	492a      	ldr	r1, [pc, #168]	; (d7af4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d7a4c:	a803      	add	r0, sp, #12
   d7a4e:	f001 f8ed 	bl	d8c2c <strcpy>
   d7a52:	ae14      	add	r6, sp, #80	; 0x50
{
   d7a54:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7a56:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d7a5a:	45ab      	cmp	fp, r5
   d7a5c:	d936      	bls.n	d7acc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7a5e:	46b1      	mov	r9, r6
   d7a60:	f105 0a01 	add.w	sl, r5, #1
   d7a64:	f819 3b01 	ldrb.w	r3, [r9], #1
   d7a68:	2b25      	cmp	r3, #37	; 0x25
   d7a6a:	d117      	bne.n	d7a9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d7a6c:	7873      	ldrb	r3, [r6, #1]
   d7a6e:	2b7a      	cmp	r3, #122	; 0x7a
   d7a70:	d114      	bne.n	d7a9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d7a72:	a803      	add	r0, sp, #12
   d7a74:	f001 f8ff 	bl	d8c76 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a78:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d7a7a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a7c:	1828      	adds	r0, r5, r0
   d7a7e:	4418      	add	r0, r3
   d7a80:	ebab 0205 	sub.w	r2, fp, r5
   d7a84:	1cb1      	adds	r1, r6, #2
   d7a86:	f001 f873 	bl	d8b70 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7a8a:	4622      	mov	r2, r4
   d7a8c:	a903      	add	r1, sp, #12
   d7a8e:	4630      	mov	r0, r6
   d7a90:	f001 f86e 	bl	d8b70 <memcpy>
            len = strlen(format_str);
   d7a94:	a814      	add	r0, sp, #80	; 0x50
   d7a96:	f001 f8ee 	bl	d8c76 <strlen>
   d7a9a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d7a9c:	464e      	mov	r6, r9
   d7a9e:	4655      	mov	r5, sl
   d7aa0:	e7d9      	b.n	d7a56 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7aa2:	213c      	movs	r1, #60	; 0x3c
   d7aa4:	fb95 f3f1 	sdiv	r3, r5, r1
   d7aa8:	2b00      	cmp	r3, #0
   d7aaa:	bfb8      	it	lt
   d7aac:	425b      	neglt	r3, r3
   d7aae:	fbb3 f2f1 	udiv	r2, r3, r1
   d7ab2:	fb01 3312 	mls	r3, r1, r2, r3
   d7ab6:	9300      	str	r3, [sp, #0]
   d7ab8:	4a0f      	ldr	r2, [pc, #60]	; (d7af8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d7aba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7abe:	2110      	movs	r1, #16
   d7ac0:	a803      	add	r0, sp, #12
   d7ac2:	fb95 f3f3 	sdiv	r3, r5, r3
   d7ac6:	f7fe ffe5 	bl	d6a94 <snprintf>
   d7aca:	e7c2      	b.n	d7a52 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7acc:	2100      	movs	r1, #0
   d7ace:	222e      	movs	r2, #46	; 0x2e
   d7ad0:	a808      	add	r0, sp, #32
   d7ad2:	9107      	str	r1, [sp, #28]
   d7ad4:	f001 f874 	bl	d8bc0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d7ad8:	4643      	mov	r3, r8
   d7ada:	aa14      	add	r2, sp, #80	; 0x50
   d7adc:	2132      	movs	r1, #50	; 0x32
   d7ade:	a807      	add	r0, sp, #28
   d7ae0:	f7fe fff8 	bl	d6ad4 <strftime>
    return String(buf);
   d7ae4:	a907      	add	r1, sp, #28
   d7ae6:	4638      	mov	r0, r7
   d7ae8:	f7ff fe71 	bl	d77ce <_ZN6StringC1EPKc>
}
   d7aec:	4638      	mov	r0, r7
   d7aee:	b025      	add	sp, #148	; 0x94
   d7af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7af4:	000db180 	.word	0x000db180
   d7af8:	000db182 	.word	0x000db182

000d7afc <_ZN9TimeClass6formatExPKc>:
{
   d7afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7afe:	b08d      	sub	sp, #52	; 0x34
   d7b00:	e9cd 2300 	strd	r2, r3, [sp]
   d7b04:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d7b06:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d7b08:	b915      	cbnz	r5, d7b10 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d7b0a:	4b19      	ldr	r3, [pc, #100]	; (d7b70 <_ZN9TimeClass6formatExPKc+0x74>)
   d7b0c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7b0e:	b12d      	cbz	r5, d7b1c <_ZN9TimeClass6formatExPKc+0x20>
   d7b10:	4b18      	ldr	r3, [pc, #96]	; (d7b74 <_ZN9TimeClass6formatExPKc+0x78>)
   d7b12:	4628      	mov	r0, r5
   d7b14:	6819      	ldr	r1, [r3, #0]
   d7b16:	f001 f87f 	bl	d8c18 <strcmp>
   d7b1a:	b938      	cbnz	r0, d7b2c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7b1c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7b20:	4620      	mov	r0, r4
   d7b22:	f7ff ff47 	bl	d79b4 <_ZN9TimeClass7timeStrEx>
}
   d7b26:	4620      	mov	r0, r4
   d7b28:	b00d      	add	sp, #52	; 0x34
   d7b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7b2c:	4e12      	ldr	r6, [pc, #72]	; (d7b78 <_ZN9TimeClass6formatExPKc+0x7c>)
   d7b2e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7b30:	4f12      	ldr	r7, [pc, #72]	; (d7b7c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d7b32:	e9d6 3200 	ldrd	r3, r2, [r6]
   d7b36:	185b      	adds	r3, r3, r1
   d7b38:	9901      	ldr	r1, [sp, #4]
   d7b3a:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d7b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7b42:	181b      	adds	r3, r3, r0
   d7b44:	eb41 0202 	adc.w	r2, r1, r2
   d7b48:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d7b4c:	2100      	movs	r1, #0
   d7b4e:	2224      	movs	r2, #36	; 0x24
   d7b50:	a803      	add	r0, sp, #12
   d7b52:	f001 f835 	bl	d8bc0 <memset>
    localtime_r(&t, &calendar_time);
   d7b56:	a903      	add	r1, sp, #12
   d7b58:	4668      	mov	r0, sp
   d7b5a:	f7fe ffc3 	bl	d6ae4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7b5e:	6832      	ldr	r2, [r6, #0]
   d7b60:	683b      	ldr	r3, [r7, #0]
   d7b62:	a903      	add	r1, sp, #12
   d7b64:	4413      	add	r3, r2
   d7b66:	4620      	mov	r0, r4
   d7b68:	462a      	mov	r2, r5
   d7b6a:	f7ff ff5b 	bl	d7a24 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d7b6e:	e7da      	b.n	d7b26 <_ZN9TimeClass6formatExPKc+0x2a>
   d7b70:	2003e644 	.word	0x2003e644
   d7b74:	2003e238 	.word	0x2003e238
   d7b78:	2003e678 	.word	0x2003e678
   d7b7c:	2003e670 	.word	0x2003e670

000d7b80 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d7b80:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7b82:	2000      	movs	r0, #0
   d7b84:	f7fe fcfe 	bl	d6584 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7b88:	4604      	mov	r4, r0
   d7b8a:	b9a0      	cbnz	r0, d7bb6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7b8c:	f7fe fe5c 	bl	d6848 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7b90:	2801      	cmp	r0, #1
   d7b92:	d110      	bne.n	d7bb6 <_ZN9TimeClass7isValidEv+0x36>
   d7b94:	4620      	mov	r0, r4
   d7b96:	f7fe fe87 	bl	d68a8 <system_thread_get_state>
   d7b9a:	b960      	cbnz	r0, d7bb6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7b9c:	f7ff feea 	bl	d7974 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7ba0:	b910      	cbnz	r0, d7ba8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7ba2:	f7fe febf 	bl	d6924 <spark_process>
        while (_while() && !_condition()) {
   d7ba6:	e7f9      	b.n	d7b9c <_ZN9TimeClass7isValidEv+0x1c>
   d7ba8:	f7ff fee4 	bl	d7974 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7bb0:	2000      	movs	r0, #0
   d7bb2:	f7fe bce7 	b.w	d6584 <hal_rtc_time_is_valid>
}
   d7bb6:	4620      	mov	r0, r4
   d7bb8:	bd10      	pop	{r4, pc}

000d7bba <_ZN9TimeClass3nowEv>:
{
   d7bba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7bbc:	f7ff ffe0 	bl	d7b80 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7bc0:	2210      	movs	r2, #16
   d7bc2:	2100      	movs	r1, #0
   d7bc4:	4668      	mov	r0, sp
   d7bc6:	f000 fffb 	bl	d8bc0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7bca:	2100      	movs	r1, #0
   d7bcc:	4668      	mov	r0, sp
   d7bce:	f7fe fce1 	bl	d6594 <hal_rtc_get_time>
}
   d7bd2:	9800      	ldr	r0, [sp, #0]
   d7bd4:	b005      	add	sp, #20
   d7bd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7bdc <_ZN9TimeClass4hourEv>:
{
   d7bdc:	b508      	push	{r3, lr}
	return hour(now());
   d7bde:	f7ff ffec 	bl	d7bba <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7be2:	17c1      	asrs	r1, r0, #31
   d7be4:	f7ff fe90 	bl	d7908 <_ZL22Refresh_UnixTime_Cachex>
}
   d7be8:	4b01      	ldr	r3, [pc, #4]	; (d7bf0 <_ZN9TimeClass4hourEv+0x14>)
   d7bea:	6898      	ldr	r0, [r3, #8]
   d7bec:	bd08      	pop	{r3, pc}
   d7bee:	bf00      	nop
   d7bf0:	2003e648 	.word	0x2003e648

000d7bf4 <_ZN9TimeClass4yearEv>:
{
   d7bf4:	b508      	push	{r3, lr}
	return year(now());
   d7bf6:	f7ff ffe0 	bl	d7bba <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7bfa:	17c1      	asrs	r1, r0, #31
   d7bfc:	f7ff fe84 	bl	d7908 <_ZL22Refresh_UnixTime_Cachex>
}
   d7c00:	4b01      	ldr	r3, [pc, #4]	; (d7c08 <_ZN9TimeClass4yearEv+0x14>)
   d7c02:	6958      	ldr	r0, [r3, #20]
   d7c04:	bd08      	pop	{r3, pc}
   d7c06:	bf00      	nop
   d7c08:	2003e648 	.word	0x2003e648

000d7c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7c0c:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7c0e:	681a      	ldr	r2, [r3, #0]
   d7c10:	4b02      	ldr	r3, [pc, #8]	; (d7c1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7c12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7c14:	4770      	bx	lr
   d7c16:	bf00      	nop
   d7c18:	2003e238 	.word	0x2003e238
   d7c1c:	2003e644 	.word	0x2003e644

000d7c20 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7c20:	4770      	bx	lr

000d7c22 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c22:	7441      	strb	r1, [r0, #17]
}
   d7c24:	4770      	bx	lr

000d7c26 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7c26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7c28:	7c00      	ldrb	r0, [r0, #16]
   d7c2a:	f7fe fdbb 	bl	d67a4 <hal_usart_available_data_for_write>
}
   d7c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c32:	bd08      	pop	{r3, pc}

000d7c34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7c36:	7c00      	ldrb	r0, [r0, #16]
   d7c38:	f7fe fd8c 	bl	d6754 <hal_usart_available>
}
   d7c3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c40:	bd08      	pop	{r3, pc}

000d7c42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7c44:	7c00      	ldrb	r0, [r0, #16]
   d7c46:	f7fe fd95 	bl	d6774 <hal_usart_peek>
}
   d7c4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c4e:	bd08      	pop	{r3, pc}

000d7c50 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7c50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7c52:	7c00      	ldrb	r0, [r0, #16]
   d7c54:	f7fe fd86 	bl	d6764 <hal_usart_read>
}
   d7c58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c5c:	bd08      	pop	{r3, pc}

000d7c5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7c5e:	7c00      	ldrb	r0, [r0, #16]
   d7c60:	f7fe bd90 	b.w	d6784 <hal_usart_flush>

000d7c64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c66:	7c45      	ldrb	r5, [r0, #17]
{
   d7c68:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c6a:	b12d      	cbz	r5, d7c78 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7c6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7c6e:	b003      	add	sp, #12
   d7c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7c74:	f7fe bd66 	b.w	d6744 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c78:	7c00      	ldrb	r0, [r0, #16]
   d7c7a:	9101      	str	r1, [sp, #4]
   d7c7c:	f7fe fd92 	bl	d67a4 <hal_usart_available_data_for_write>
   d7c80:	2800      	cmp	r0, #0
   d7c82:	9901      	ldr	r1, [sp, #4]
   d7c84:	dcf2      	bgt.n	d7c6c <_ZN11USARTSerial5writeEh+0x8>
}
   d7c86:	4628      	mov	r0, r5
   d7c88:	b003      	add	sp, #12
   d7c8a:	bd30      	pop	{r4, r5, pc}

000d7c8c <_ZN11USARTSerialD0Ev>:
   d7c8c:	b510      	push	{r4, lr}
   d7c8e:	2114      	movs	r1, #20
   d7c90:	4604      	mov	r4, r0
   d7c92:	f000 fa32 	bl	d80fa <_ZdlPvj>
   d7c96:	4620      	mov	r0, r4
   d7c98:	bd10      	pop	{r4, pc}
	...

000d7c9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7c9c:	b510      	push	{r4, lr}
   d7c9e:	f04f 0c00 	mov.w	ip, #0
   d7ca2:	4604      	mov	r4, r0
   d7ca4:	4608      	mov	r0, r1
   d7ca6:	4611      	mov	r1, r2
   d7ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7cac:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7cb0:	4a04      	ldr	r2, [pc, #16]	; (d7cc4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7cb2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7cb4:	2201      	movs	r2, #1
  _serial = serial;
   d7cb6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7cb8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7cba:	461a      	mov	r2, r3
   d7cbc:	f7fe fd3a 	bl	d6734 <hal_usart_init>
}
   d7cc0:	4620      	mov	r0, r4
   d7cc2:	bd10      	pop	{r4, pc}
   d7cc4:	000db1b4 	.word	0x000db1b4

000d7cc8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7cc8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7cca:	4c0e      	ldr	r4, [pc, #56]	; (d7d04 <_Z22__fetch_global_Serial1v+0x3c>)
   d7ccc:	7821      	ldrb	r1, [r4, #0]
   d7cce:	f3bf 8f5b 	dmb	ish
   d7cd2:	f011 0101 	ands.w	r1, r1, #1
   d7cd6:	d112      	bne.n	d7cfe <_Z22__fetch_global_Serial1v+0x36>
   d7cd8:	4620      	mov	r0, r4
   d7cda:	9101      	str	r1, [sp, #4]
   d7cdc:	f7fc f9ec 	bl	d40b8 <__cxa_guard_acquire>
   d7ce0:	9901      	ldr	r1, [sp, #4]
   d7ce2:	b160      	cbz	r0, d7cfe <_Z22__fetch_global_Serial1v+0x36>
   d7ce4:	4a08      	ldr	r2, [pc, #32]	; (d7d08 <_Z22__fetch_global_Serial1v+0x40>)
   d7ce6:	4b09      	ldr	r3, [pc, #36]	; (d7d0c <_Z22__fetch_global_Serial1v+0x44>)
   d7ce8:	4809      	ldr	r0, [pc, #36]	; (d7d10 <_Z22__fetch_global_Serial1v+0x48>)
   d7cea:	f7ff ffd7 	bl	d7c9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7cee:	4620      	mov	r0, r4
   d7cf0:	f7fc f9e7 	bl	d40c2 <__cxa_guard_release>
   d7cf4:	4a07      	ldr	r2, [pc, #28]	; (d7d14 <_Z22__fetch_global_Serial1v+0x4c>)
   d7cf6:	4908      	ldr	r1, [pc, #32]	; (d7d18 <_Z22__fetch_global_Serial1v+0x50>)
   d7cf8:	4805      	ldr	r0, [pc, #20]	; (d7d10 <_Z22__fetch_global_Serial1v+0x48>)
   d7cfa:	f000 f9f9 	bl	d80f0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7cfe:	4804      	ldr	r0, [pc, #16]	; (d7d10 <_Z22__fetch_global_Serial1v+0x48>)
   d7d00:	b002      	add	sp, #8
   d7d02:	bd10      	pop	{r4, pc}
   d7d04:	2003e688 	.word	0x2003e688
   d7d08:	2003e68c 	.word	0x2003e68c
   d7d0c:	2003e710 	.word	0x2003e710
   d7d10:	2003e794 	.word	0x2003e794
   d7d14:	2003e410 	.word	0x2003e410
   d7d18:	000d7c21 	.word	0x000d7c21

000d7d1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d1c:	7441      	strb	r1, [r0, #17]
}
   d7d1e:	4770      	bx	lr

000d7d20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7d20:	4770      	bx	lr

000d7d22 <_ZN9USBSerial4readEv>:
{
   d7d22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7d24:	2100      	movs	r1, #0
   d7d26:	7c00      	ldrb	r0, [r0, #16]
   d7d28:	f7fe fd5c 	bl	d67e4 <HAL_USB_USART_Receive_Data>
}
   d7d2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d30:	bd08      	pop	{r3, pc}

000d7d32 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7d32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d34:	2101      	movs	r1, #1
   d7d36:	7c00      	ldrb	r0, [r0, #16]
   d7d38:	f7fe fd54 	bl	d67e4 <HAL_USB_USART_Receive_Data>
}
   d7d3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d40:	bd08      	pop	{r3, pc}

000d7d42 <_ZN9USBSerial17availableForWriteEv>:
{
   d7d42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7d44:	7c00      	ldrb	r0, [r0, #16]
   d7d46:	f7fe fd45 	bl	d67d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7d4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d4e:	bd08      	pop	{r3, pc}

000d7d50 <_ZN9USBSerial9availableEv>:
{
   d7d50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7d52:	7c00      	ldrb	r0, [r0, #16]
   d7d54:	f7fe fd36 	bl	d67c4 <HAL_USB_USART_Available_Data>
}
   d7d58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d5c:	bd08      	pop	{r3, pc}

000d7d5e <_ZN9USBSerial5writeEh>:
{
   d7d5e:	b513      	push	{r0, r1, r4, lr}
   d7d60:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d62:	7c00      	ldrb	r0, [r0, #16]
{
   d7d64:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d66:	f7fe fd35 	bl	d67d4 <HAL_USB_USART_Available_Data_For_Write>
   d7d6a:	2800      	cmp	r0, #0
   d7d6c:	9901      	ldr	r1, [sp, #4]
   d7d6e:	dc01      	bgt.n	d7d74 <_ZN9USBSerial5writeEh+0x16>
   d7d70:	7c60      	ldrb	r0, [r4, #17]
   d7d72:	b120      	cbz	r0, d7d7e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7d74:	7c20      	ldrb	r0, [r4, #16]
   d7d76:	f7fe fd3d 	bl	d67f4 <HAL_USB_USART_Send_Data>
   d7d7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7d7e:	b002      	add	sp, #8
   d7d80:	bd10      	pop	{r4, pc}

000d7d82 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7d82:	7c00      	ldrb	r0, [r0, #16]
   d7d84:	f7fe bd3e 	b.w	d6804 <HAL_USB_USART_Flush_Data>

000d7d88 <_ZN9USBSerialD0Ev>:
   d7d88:	b510      	push	{r4, lr}
   d7d8a:	2114      	movs	r1, #20
   d7d8c:	4604      	mov	r4, r0
   d7d8e:	f000 f9b4 	bl	d80fa <_ZdlPvj>
   d7d92:	4620      	mov	r0, r4
   d7d94:	bd10      	pop	{r4, pc}
	...

000d7d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d98:	b510      	push	{r4, lr}
   d7d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d9e:	4604      	mov	r4, r0
   d7da0:	4608      	mov	r0, r1
   d7da2:	2100      	movs	r1, #0
   d7da4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7da8:	4b04      	ldr	r3, [pc, #16]	; (d7dbc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7daa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7dac:	2301      	movs	r3, #1
  _serial = serial;
   d7dae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7db0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7db2:	4611      	mov	r1, r2
   d7db4:	f7fe fcfe 	bl	d67b4 <HAL_USB_USART_Init>
}
   d7db8:	4620      	mov	r0, r4
   d7dba:	bd10      	pop	{r4, pc}
   d7dbc:	000db1e4 	.word	0x000db1e4

000d7dc0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7dc0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7dc2:	2214      	movs	r2, #20
{
   d7dc4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7dc6:	2100      	movs	r1, #0
   d7dc8:	f000 fefa 	bl	d8bc0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7dcc:	4620      	mov	r0, r4
   d7dce:	bd10      	pop	{r4, pc}

000d7dd0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7dd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7dd2:	4c10      	ldr	r4, [pc, #64]	; (d7e14 <_Z16_fetch_usbserialv+0x44>)
{
   d7dd4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7dd6:	a803      	add	r0, sp, #12
   d7dd8:	f7ff fff2 	bl	d7dc0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ddc:	7821      	ldrb	r1, [r4, #0]
   d7dde:	f3bf 8f5b 	dmb	ish
   d7de2:	f011 0101 	ands.w	r1, r1, #1
   d7de6:	d111      	bne.n	d7e0c <_Z16_fetch_usbserialv+0x3c>
   d7de8:	4620      	mov	r0, r4
   d7dea:	9101      	str	r1, [sp, #4]
   d7dec:	f7fc f964 	bl	d40b8 <__cxa_guard_acquire>
   d7df0:	9901      	ldr	r1, [sp, #4]
   d7df2:	b158      	cbz	r0, d7e0c <_Z16_fetch_usbserialv+0x3c>
   d7df4:	aa03      	add	r2, sp, #12
   d7df6:	4808      	ldr	r0, [pc, #32]	; (d7e18 <_Z16_fetch_usbserialv+0x48>)
   d7df8:	f7ff ffce 	bl	d7d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	f7fc f960 	bl	d40c2 <__cxa_guard_release>
   d7e02:	4a06      	ldr	r2, [pc, #24]	; (d7e1c <_Z16_fetch_usbserialv+0x4c>)
   d7e04:	4906      	ldr	r1, [pc, #24]	; (d7e20 <_Z16_fetch_usbserialv+0x50>)
   d7e06:	4804      	ldr	r0, [pc, #16]	; (d7e18 <_Z16_fetch_usbserialv+0x48>)
   d7e08:	f000 f972 	bl	d80f0 <__aeabi_atexit>
	return _usbserial;
}
   d7e0c:	4802      	ldr	r0, [pc, #8]	; (d7e18 <_Z16_fetch_usbserialv+0x48>)
   d7e0e:	b008      	add	sp, #32
   d7e10:	bd10      	pop	{r4, pc}
   d7e12:	bf00      	nop
   d7e14:	2003e7a8 	.word	0x2003e7a8
   d7e18:	2003e7ac 	.word	0x2003e7ac
   d7e1c:	2003e410 	.word	0x2003e410
   d7e20:	000d7d21 	.word	0x000d7d21

000d7e24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7e24:	4b01      	ldr	r3, [pc, #4]	; (d7e2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7e26:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7e28:	4770      	bx	lr
   d7e2a:	bf00      	nop
   d7e2c:	2003e23c 	.word	0x2003e23c

000d7e30 <serialEventRun>:
{
   d7e30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e32:	4b0b      	ldr	r3, [pc, #44]	; (d7e60 <serialEventRun+0x30>)
   d7e34:	b143      	cbz	r3, d7e48 <serialEventRun+0x18>
   d7e36:	f7ff ffcb 	bl	d7dd0 <_Z16_fetch_usbserialv>
   d7e3a:	6803      	ldr	r3, [r0, #0]
   d7e3c:	691b      	ldr	r3, [r3, #16]
   d7e3e:	4798      	blx	r3
   d7e40:	2800      	cmp	r0, #0
   d7e42:	dd01      	ble.n	d7e48 <serialEventRun+0x18>
        serialEvent();
   d7e44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7e48:	4b06      	ldr	r3, [pc, #24]	; (d7e64 <serialEventRun+0x34>)
   d7e4a:	b143      	cbz	r3, d7e5e <serialEventRun+0x2e>
   d7e4c:	f7ff ff3c 	bl	d7cc8 <_Z22__fetch_global_Serial1v>
   d7e50:	6803      	ldr	r3, [r0, #0]
   d7e52:	691b      	ldr	r3, [r3, #16]
   d7e54:	4798      	blx	r3
   d7e56:	2800      	cmp	r0, #0
   d7e58:	dd01      	ble.n	d7e5e <serialEventRun+0x2e>
        serialEvent1();
   d7e5a:	f3af 8000 	nop.w
}
   d7e5e:	bd08      	pop	{r3, pc}
	...

000d7e68 <_post_loop>:
{
   d7e68:	b508      	push	{r3, lr}
	serialEventRun();
   d7e6a:	f7ff ffe1 	bl	d7e30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e6e:	f7fe fb81 	bl	d6574 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7e72:	4b01      	ldr	r3, [pc, #4]	; (d7e78 <_post_loop+0x10>)
   d7e74:	6018      	str	r0, [r3, #0]
}
   d7e76:	bd08      	pop	{r3, pc}
   d7e78:	2003e7d4 	.word	0x2003e7d4

000d7e7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7e7c:	4802      	ldr	r0, [pc, #8]	; (d7e88 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7e7e:	4a03      	ldr	r2, [pc, #12]	; (d7e8c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7e80:	4903      	ldr	r1, [pc, #12]	; (d7e90 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7e82:	1a12      	subs	r2, r2, r0
   d7e84:	f000 be74 	b.w	d8b70 <memcpy>
   d7e88:	2003f400 	.word	0x2003f400
   d7e8c:	2003fc04 	.word	0x2003fc04
   d7e90:	000db510 	.word	0x000db510

000d7e94 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e94:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e96:	2300      	movs	r3, #0
   d7e98:	9300      	str	r3, [sp, #0]
   d7e9a:	461a      	mov	r2, r3
   d7e9c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ea0:	f7fe fd1c 	bl	d68dc <system_ctrl_set_result>
}
   d7ea4:	b003      	add	sp, #12
   d7ea6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7eac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7eac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7eae:	8843      	ldrh	r3, [r0, #2]
   d7eb0:	2b0a      	cmp	r3, #10
   d7eb2:	d008      	beq.n	d7ec6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7eb4:	2b50      	cmp	r3, #80	; 0x50
   d7eb6:	d10b      	bne.n	d7ed0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7eb8:	4b09      	ldr	r3, [pc, #36]	; (d7ee0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7eba:	681b      	ldr	r3, [r3, #0]
   d7ebc:	b14b      	cbz	r3, d7ed2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7ebe:	b003      	add	sp, #12
   d7ec0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7ec4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7ec6:	f7ff ffe5 	bl	d7e94 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7eca:	b003      	add	sp, #12
   d7ecc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ed0:	2300      	movs	r3, #0
   d7ed2:	9300      	str	r3, [sp, #0]
   d7ed4:	461a      	mov	r2, r3
   d7ed6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7eda:	f7fe fcff 	bl	d68dc <system_ctrl_set_result>
}
   d7ede:	e7f4      	b.n	d7eca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7ee0:	2003e7c4 	.word	0x2003e7c4

000d7ee4 <module_user_init_hook>:
{
   d7ee4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ee6:	4c12      	ldr	r4, [pc, #72]	; (d7f30 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ee8:	4812      	ldr	r0, [pc, #72]	; (d7f34 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7eea:	4d13      	ldr	r5, [pc, #76]	; (d7f38 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7eec:	2100      	movs	r1, #0
   d7eee:	f7fe fde9 	bl	d6ac4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ef2:	6823      	ldr	r3, [r4, #0]
   d7ef4:	42ab      	cmp	r3, r5
   d7ef6:	4b11      	ldr	r3, [pc, #68]	; (d7f3c <module_user_init_hook+0x58>)
   d7ef8:	bf0c      	ite	eq
   d7efa:	2201      	moveq	r2, #1
   d7efc:	2200      	movne	r2, #0
   d7efe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7f00:	d002      	beq.n	d7f08 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7f02:	f7ff ffbb 	bl	d7e7c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7f06:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7f08:	f7fe fb1c 	bl	d6544 <HAL_RNG_GetRandomNumber>
   d7f0c:	4604      	mov	r4, r0
    srand(seed);
   d7f0e:	f000 fe5f 	bl	d8bd0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7f12:	4b0b      	ldr	r3, [pc, #44]	; (d7f40 <module_user_init_hook+0x5c>)
   d7f14:	b113      	cbz	r3, d7f1c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7f16:	4620      	mov	r0, r4
   d7f18:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f1c:	2100      	movs	r1, #0
   d7f1e:	4808      	ldr	r0, [pc, #32]	; (d7f40 <module_user_init_hook+0x5c>)
   d7f20:	f7fe fd40 	bl	d69a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f28:	4806      	ldr	r0, [pc, #24]	; (d7f44 <module_user_init_hook+0x60>)
   d7f2a:	2100      	movs	r1, #0
   d7f2c:	f7fe bccc 	b.w	d68c8 <system_ctrl_set_app_request_handler>
   d7f30:	2003fc00 	.word	0x2003fc00
   d7f34:	000d7e25 	.word	0x000d7e25
   d7f38:	9a271c1e 	.word	0x9a271c1e
   d7f3c:	2003e7c0 	.word	0x2003e7c0
   d7f40:	00000000 	.word	0x00000000
   d7f44:	000d7ead 	.word	0x000d7ead

000d7f48 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <spark_protocol_instance+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	681b      	ldr	r3, [r3, #0]
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	0003025c 	.word	0x0003025c

000d7f58 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <spark_protocol_set_product_id+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	685b      	ldr	r3, [r3, #4]
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	0003025c 	.word	0x0003025c

000d7f68 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <spark_protocol_set_product_firmware_version+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	689b      	ldr	r3, [r3, #8]
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	0003025c 	.word	0x0003025c

000d7f78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7f78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7f7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7f7c:	d902      	bls.n	d7f84 <pinAvailable+0xc>
    return false;
   d7f7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7f80:	b002      	add	sp, #8
   d7f82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7f84:	f1a0 030b 	sub.w	r3, r0, #11
   d7f88:	2b02      	cmp	r3, #2
   d7f8a:	d81a      	bhi.n	d7fc2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7f8c:	4c17      	ldr	r4, [pc, #92]	; (d7fec <pinAvailable+0x74>)
   d7f8e:	7821      	ldrb	r1, [r4, #0]
   d7f90:	f3bf 8f5b 	dmb	ish
   d7f94:	f011 0101 	ands.w	r1, r1, #1
   d7f98:	d10b      	bne.n	d7fb2 <pinAvailable+0x3a>
   d7f9a:	4620      	mov	r0, r4
   d7f9c:	9101      	str	r1, [sp, #4]
   d7f9e:	f7fc f88b 	bl	d40b8 <__cxa_guard_acquire>
   d7fa2:	9901      	ldr	r1, [sp, #4]
   d7fa4:	b128      	cbz	r0, d7fb2 <pinAvailable+0x3a>
   d7fa6:	4812      	ldr	r0, [pc, #72]	; (d7ff0 <pinAvailable+0x78>)
   d7fa8:	f7ff fbbc 	bl	d7724 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7fac:	4620      	mov	r0, r4
   d7fae:	f7fc f888 	bl	d40c2 <__cxa_guard_release>
   d7fb2:	4b0f      	ldr	r3, [pc, #60]	; (d7ff0 <pinAvailable+0x78>)
   d7fb4:	7818      	ldrb	r0, [r3, #0]
   d7fb6:	f7fe fbb5 	bl	d6724 <hal_spi_is_enabled>
   d7fba:	2800      	cmp	r0, #0
   d7fbc:	d1df      	bne.n	d7f7e <pinAvailable+0x6>
  return true; // 'pin' is available
   d7fbe:	2001      	movs	r0, #1
   d7fc0:	e7de      	b.n	d7f80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7fc2:	2801      	cmp	r0, #1
   d7fc4:	d809      	bhi.n	d7fda <pinAvailable+0x62>
   d7fc6:	f000 f86b 	bl	d80a0 <_Z19__fetch_global_Wirev>
   d7fca:	2100      	movs	r1, #0
   d7fcc:	7c00      	ldrb	r0, [r0, #16]
   d7fce:	f7fe fb61 	bl	d6694 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7fd2:	f080 0001 	eor.w	r0, r0, #1
   d7fd6:	b2c0      	uxtb	r0, r0
   d7fd8:	e7d2      	b.n	d7f80 <pinAvailable+0x8>
   d7fda:	3809      	subs	r0, #9
   d7fdc:	2801      	cmp	r0, #1
   d7fde:	d8ee      	bhi.n	d7fbe <pinAvailable+0x46>
   d7fe0:	f7ff fe72 	bl	d7cc8 <_Z22__fetch_global_Serial1v>
   d7fe4:	7c00      	ldrb	r0, [r0, #16]
   d7fe6:	f7fe fbd5 	bl	d6794 <hal_usart_is_enabled>
   d7fea:	e7f2      	b.n	d7fd2 <pinAvailable+0x5a>
   d7fec:	2003e7c8 	.word	0x2003e7c8
   d7ff0:	2003e7cc 	.word	0x2003e7cc

000d7ff4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ff4:	2823      	cmp	r0, #35	; 0x23
{
   d7ff6:	b538      	push	{r3, r4, r5, lr}
   d7ff8:	4604      	mov	r4, r0
   d7ffa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ffc:	d80a      	bhi.n	d8014 <pinMode+0x20>
   d7ffe:	29ff      	cmp	r1, #255	; 0xff
   d8000:	d008      	beq.n	d8014 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8002:	f7ff ffb9 	bl	d7f78 <pinAvailable>
   d8006:	b128      	cbz	r0, d8014 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8008:	4629      	mov	r1, r5
   d800a:	4620      	mov	r0, r4
}
   d800c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8010:	f7fe bad0 	b.w	d65b4 <HAL_Pin_Mode>
}
   d8014:	bd38      	pop	{r3, r4, r5, pc}

000d8016 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8016:	b538      	push	{r3, r4, r5, lr}
   d8018:	4604      	mov	r4, r0
   d801a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d801c:	f7fe fad2 	bl	d65c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8020:	28ff      	cmp	r0, #255	; 0xff
   d8022:	d010      	beq.n	d8046 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8024:	2806      	cmp	r0, #6
   d8026:	d804      	bhi.n	d8032 <digitalWrite+0x1c>
   d8028:	234d      	movs	r3, #77	; 0x4d
   d802a:	fa23 f000 	lsr.w	r0, r3, r0
   d802e:	07c3      	lsls	r3, r0, #31
   d8030:	d409      	bmi.n	d8046 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8032:	4620      	mov	r0, r4
   d8034:	f7ff ffa0 	bl	d7f78 <pinAvailable>
   d8038:	b128      	cbz	r0, d8046 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d803a:	4629      	mov	r1, r5
   d803c:	4620      	mov	r0, r4
}
   d803e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8042:	f7fe bac7 	b.w	d65d4 <HAL_GPIO_Write>
}
   d8046:	bd38      	pop	{r3, r4, r5, pc}

000d8048 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8048:	b510      	push	{r4, lr}
   d804a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d804c:	f7fe faba 	bl	d65c4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8050:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8052:	b2db      	uxtb	r3, r3
   d8054:	2b01      	cmp	r3, #1
   d8056:	d908      	bls.n	d806a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8058:	4620      	mov	r0, r4
   d805a:	f7ff ff8d 	bl	d7f78 <pinAvailable>
   d805e:	b120      	cbz	r0, d806a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8060:	4620      	mov	r0, r4
}
   d8062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8066:	f7fe babd 	b.w	d65e4 <HAL_GPIO_Read>
}
   d806a:	2000      	movs	r0, #0
   d806c:	bd10      	pop	{r4, pc}
	...

000d8070 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8070:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8072:	2300      	movs	r3, #0
   d8074:	2520      	movs	r5, #32
   d8076:	8043      	strh	r3, [r0, #2]
   d8078:	2314      	movs	r3, #20
{
   d807a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d807c:	8003      	strh	r3, [r0, #0]
   d807e:	6085      	str	r5, [r0, #8]
   d8080:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8082:	4906      	ldr	r1, [pc, #24]	; (d809c <_Z17acquireWireBufferv+0x2c>)
   d8084:	4628      	mov	r0, r5
   d8086:	f000 f83c 	bl	d8102 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d808a:	4904      	ldr	r1, [pc, #16]	; (d809c <_Z17acquireWireBufferv+0x2c>)
	};
   d808c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d808e:	4628      	mov	r0, r5
   d8090:	f000 f837 	bl	d8102 <_ZnajRKSt9nothrow_t>
	};
   d8094:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8096:	4620      	mov	r0, r4
   d8098:	bd38      	pop	{r3, r4, r5, pc}
   d809a:	bf00      	nop
   d809c:	000db20c 	.word	0x000db20c

000d80a0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d80a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d80a2:	4d0f      	ldr	r5, [pc, #60]	; (d80e0 <_Z19__fetch_global_Wirev+0x40>)
   d80a4:	7829      	ldrb	r1, [r5, #0]
   d80a6:	f3bf 8f5b 	dmb	ish
   d80aa:	f011 0401 	ands.w	r4, r1, #1
{
   d80ae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d80b0:	d113      	bne.n	d80da <_Z19__fetch_global_Wirev+0x3a>
   d80b2:	4628      	mov	r0, r5
   d80b4:	f7fc f800 	bl	d40b8 <__cxa_guard_acquire>
   d80b8:	b178      	cbz	r0, d80da <_Z19__fetch_global_Wirev+0x3a>
   d80ba:	a801      	add	r0, sp, #4
   d80bc:	f7ff ffd8 	bl	d8070 <_Z17acquireWireBufferv>
   d80c0:	aa01      	add	r2, sp, #4
   d80c2:	4621      	mov	r1, r4
   d80c4:	4807      	ldr	r0, [pc, #28]	; (d80e4 <_Z19__fetch_global_Wirev+0x44>)
   d80c6:	f7ff f907 	bl	d72d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d80ca:	4628      	mov	r0, r5
   d80cc:	f7fb fff9 	bl	d40c2 <__cxa_guard_release>
   d80d0:	4a05      	ldr	r2, [pc, #20]	; (d80e8 <_Z19__fetch_global_Wirev+0x48>)
   d80d2:	4906      	ldr	r1, [pc, #24]	; (d80ec <_Z19__fetch_global_Wirev+0x4c>)
   d80d4:	4803      	ldr	r0, [pc, #12]	; (d80e4 <_Z19__fetch_global_Wirev+0x44>)
   d80d6:	f000 f80b 	bl	d80f0 <__aeabi_atexit>
	return wire;
}
   d80da:	4802      	ldr	r0, [pc, #8]	; (d80e4 <_Z19__fetch_global_Wirev+0x44>)
   d80dc:	b007      	add	sp, #28
   d80de:	bd30      	pop	{r4, r5, pc}
   d80e0:	2003e7d8 	.word	0x2003e7d8
   d80e4:	2003e7dc 	.word	0x2003e7dc
   d80e8:	2003e410 	.word	0x2003e410
   d80ec:	000d7281 	.word	0x000d7281

000d80f0 <__aeabi_atexit>:
   d80f0:	460b      	mov	r3, r1
   d80f2:	4601      	mov	r1, r0
   d80f4:	4618      	mov	r0, r3
   d80f6:	f000 bd1b 	b.w	d8b30 <__cxa_atexit>

000d80fa <_ZdlPvj>:
   d80fa:	f7fb bfd0 	b.w	d409e <_ZdlPv>

000d80fe <_ZnwjRKSt9nothrow_t>:
   d80fe:	f7fb bfca 	b.w	d4096 <_Znwj>

000d8102 <_ZnajRKSt9nothrow_t>:
   d8102:	f7fb bfca 	b.w	d409a <_Znaj>

000d8106 <_ZSt25__throw_bad_function_callv>:
   d8106:	b508      	push	{r3, lr}
   d8108:	f7fe fccc 	bl	d6aa4 <abort>

000d810c <__aeabi_drsub>:
   d810c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8110:	e002      	b.n	d8118 <__adddf3>
   d8112:	bf00      	nop

000d8114 <__aeabi_dsub>:
   d8114:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8118 <__adddf3>:
   d8118:	b530      	push	{r4, r5, lr}
   d811a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d811e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8122:	ea94 0f05 	teq	r4, r5
   d8126:	bf08      	it	eq
   d8128:	ea90 0f02 	teqeq	r0, r2
   d812c:	bf1f      	itttt	ne
   d812e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8132:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8136:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d813a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d813e:	f000 80e2 	beq.w	d8306 <__adddf3+0x1ee>
   d8142:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8146:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d814a:	bfb8      	it	lt
   d814c:	426d      	neglt	r5, r5
   d814e:	dd0c      	ble.n	d816a <__adddf3+0x52>
   d8150:	442c      	add	r4, r5
   d8152:	ea80 0202 	eor.w	r2, r0, r2
   d8156:	ea81 0303 	eor.w	r3, r1, r3
   d815a:	ea82 0000 	eor.w	r0, r2, r0
   d815e:	ea83 0101 	eor.w	r1, r3, r1
   d8162:	ea80 0202 	eor.w	r2, r0, r2
   d8166:	ea81 0303 	eor.w	r3, r1, r3
   d816a:	2d36      	cmp	r5, #54	; 0x36
   d816c:	bf88      	it	hi
   d816e:	bd30      	pophi	{r4, r5, pc}
   d8170:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8174:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8178:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d817c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8180:	d002      	beq.n	d8188 <__adddf3+0x70>
   d8182:	4240      	negs	r0, r0
   d8184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8188:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d818c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8190:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8194:	d002      	beq.n	d819c <__adddf3+0x84>
   d8196:	4252      	negs	r2, r2
   d8198:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d819c:	ea94 0f05 	teq	r4, r5
   d81a0:	f000 80a7 	beq.w	d82f2 <__adddf3+0x1da>
   d81a4:	f1a4 0401 	sub.w	r4, r4, #1
   d81a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d81ac:	db0d      	blt.n	d81ca <__adddf3+0xb2>
   d81ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d81b2:	fa22 f205 	lsr.w	r2, r2, r5
   d81b6:	1880      	adds	r0, r0, r2
   d81b8:	f141 0100 	adc.w	r1, r1, #0
   d81bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d81c0:	1880      	adds	r0, r0, r2
   d81c2:	fa43 f305 	asr.w	r3, r3, r5
   d81c6:	4159      	adcs	r1, r3
   d81c8:	e00e      	b.n	d81e8 <__adddf3+0xd0>
   d81ca:	f1a5 0520 	sub.w	r5, r5, #32
   d81ce:	f10e 0e20 	add.w	lr, lr, #32
   d81d2:	2a01      	cmp	r2, #1
   d81d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d81d8:	bf28      	it	cs
   d81da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d81de:	fa43 f305 	asr.w	r3, r3, r5
   d81e2:	18c0      	adds	r0, r0, r3
   d81e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d81e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81ec:	d507      	bpl.n	d81fe <__adddf3+0xe6>
   d81ee:	f04f 0e00 	mov.w	lr, #0
   d81f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d81f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d81fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d81fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8202:	d31b      	bcc.n	d823c <__adddf3+0x124>
   d8204:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8208:	d30c      	bcc.n	d8224 <__adddf3+0x10c>
   d820a:	0849      	lsrs	r1, r1, #1
   d820c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8210:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8214:	f104 0401 	add.w	r4, r4, #1
   d8218:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d821c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8220:	f080 809a 	bcs.w	d8358 <__adddf3+0x240>
   d8224:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8228:	bf08      	it	eq
   d822a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d822e:	f150 0000 	adcs.w	r0, r0, #0
   d8232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8236:	ea41 0105 	orr.w	r1, r1, r5
   d823a:	bd30      	pop	{r4, r5, pc}
   d823c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8240:	4140      	adcs	r0, r0
   d8242:	eb41 0101 	adc.w	r1, r1, r1
   d8246:	3c01      	subs	r4, #1
   d8248:	bf28      	it	cs
   d824a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d824e:	d2e9      	bcs.n	d8224 <__adddf3+0x10c>
   d8250:	f091 0f00 	teq	r1, #0
   d8254:	bf04      	itt	eq
   d8256:	4601      	moveq	r1, r0
   d8258:	2000      	moveq	r0, #0
   d825a:	fab1 f381 	clz	r3, r1
   d825e:	bf08      	it	eq
   d8260:	3320      	addeq	r3, #32
   d8262:	f1a3 030b 	sub.w	r3, r3, #11
   d8266:	f1b3 0220 	subs.w	r2, r3, #32
   d826a:	da0c      	bge.n	d8286 <__adddf3+0x16e>
   d826c:	320c      	adds	r2, #12
   d826e:	dd08      	ble.n	d8282 <__adddf3+0x16a>
   d8270:	f102 0c14 	add.w	ip, r2, #20
   d8274:	f1c2 020c 	rsb	r2, r2, #12
   d8278:	fa01 f00c 	lsl.w	r0, r1, ip
   d827c:	fa21 f102 	lsr.w	r1, r1, r2
   d8280:	e00c      	b.n	d829c <__adddf3+0x184>
   d8282:	f102 0214 	add.w	r2, r2, #20
   d8286:	bfd8      	it	le
   d8288:	f1c2 0c20 	rsble	ip, r2, #32
   d828c:	fa01 f102 	lsl.w	r1, r1, r2
   d8290:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8294:	bfdc      	itt	le
   d8296:	ea41 010c 	orrle.w	r1, r1, ip
   d829a:	4090      	lslle	r0, r2
   d829c:	1ae4      	subs	r4, r4, r3
   d829e:	bfa2      	ittt	ge
   d82a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d82a4:	4329      	orrge	r1, r5
   d82a6:	bd30      	popge	{r4, r5, pc}
   d82a8:	ea6f 0404 	mvn.w	r4, r4
   d82ac:	3c1f      	subs	r4, #31
   d82ae:	da1c      	bge.n	d82ea <__adddf3+0x1d2>
   d82b0:	340c      	adds	r4, #12
   d82b2:	dc0e      	bgt.n	d82d2 <__adddf3+0x1ba>
   d82b4:	f104 0414 	add.w	r4, r4, #20
   d82b8:	f1c4 0220 	rsb	r2, r4, #32
   d82bc:	fa20 f004 	lsr.w	r0, r0, r4
   d82c0:	fa01 f302 	lsl.w	r3, r1, r2
   d82c4:	ea40 0003 	orr.w	r0, r0, r3
   d82c8:	fa21 f304 	lsr.w	r3, r1, r4
   d82cc:	ea45 0103 	orr.w	r1, r5, r3
   d82d0:	bd30      	pop	{r4, r5, pc}
   d82d2:	f1c4 040c 	rsb	r4, r4, #12
   d82d6:	f1c4 0220 	rsb	r2, r4, #32
   d82da:	fa20 f002 	lsr.w	r0, r0, r2
   d82de:	fa01 f304 	lsl.w	r3, r1, r4
   d82e2:	ea40 0003 	orr.w	r0, r0, r3
   d82e6:	4629      	mov	r1, r5
   d82e8:	bd30      	pop	{r4, r5, pc}
   d82ea:	fa21 f004 	lsr.w	r0, r1, r4
   d82ee:	4629      	mov	r1, r5
   d82f0:	bd30      	pop	{r4, r5, pc}
   d82f2:	f094 0f00 	teq	r4, #0
   d82f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d82fa:	bf06      	itte	eq
   d82fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8300:	3401      	addeq	r4, #1
   d8302:	3d01      	subne	r5, #1
   d8304:	e74e      	b.n	d81a4 <__adddf3+0x8c>
   d8306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d830a:	bf18      	it	ne
   d830c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8310:	d029      	beq.n	d8366 <__adddf3+0x24e>
   d8312:	ea94 0f05 	teq	r4, r5
   d8316:	bf08      	it	eq
   d8318:	ea90 0f02 	teqeq	r0, r2
   d831c:	d005      	beq.n	d832a <__adddf3+0x212>
   d831e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8322:	bf04      	itt	eq
   d8324:	4619      	moveq	r1, r3
   d8326:	4610      	moveq	r0, r2
   d8328:	bd30      	pop	{r4, r5, pc}
   d832a:	ea91 0f03 	teq	r1, r3
   d832e:	bf1e      	ittt	ne
   d8330:	2100      	movne	r1, #0
   d8332:	2000      	movne	r0, #0
   d8334:	bd30      	popne	{r4, r5, pc}
   d8336:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d833a:	d105      	bne.n	d8348 <__adddf3+0x230>
   d833c:	0040      	lsls	r0, r0, #1
   d833e:	4149      	adcs	r1, r1
   d8340:	bf28      	it	cs
   d8342:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8346:	bd30      	pop	{r4, r5, pc}
   d8348:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d834c:	bf3c      	itt	cc
   d834e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8352:	bd30      	popcc	{r4, r5, pc}
   d8354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8358:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d835c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8360:	f04f 0000 	mov.w	r0, #0
   d8364:	bd30      	pop	{r4, r5, pc}
   d8366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d836a:	bf1a      	itte	ne
   d836c:	4619      	movne	r1, r3
   d836e:	4610      	movne	r0, r2
   d8370:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8374:	bf1c      	itt	ne
   d8376:	460b      	movne	r3, r1
   d8378:	4602      	movne	r2, r0
   d837a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d837e:	bf06      	itte	eq
   d8380:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8384:	ea91 0f03 	teqeq	r1, r3
   d8388:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d838c:	bd30      	pop	{r4, r5, pc}
   d838e:	bf00      	nop

000d8390 <__aeabi_ui2d>:
   d8390:	f090 0f00 	teq	r0, #0
   d8394:	bf04      	itt	eq
   d8396:	2100      	moveq	r1, #0
   d8398:	4770      	bxeq	lr
   d839a:	b530      	push	{r4, r5, lr}
   d839c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83a4:	f04f 0500 	mov.w	r5, #0
   d83a8:	f04f 0100 	mov.w	r1, #0
   d83ac:	e750      	b.n	d8250 <__adddf3+0x138>
   d83ae:	bf00      	nop

000d83b0 <__aeabi_i2d>:
   d83b0:	f090 0f00 	teq	r0, #0
   d83b4:	bf04      	itt	eq
   d83b6:	2100      	moveq	r1, #0
   d83b8:	4770      	bxeq	lr
   d83ba:	b530      	push	{r4, r5, lr}
   d83bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d83c8:	bf48      	it	mi
   d83ca:	4240      	negmi	r0, r0
   d83cc:	f04f 0100 	mov.w	r1, #0
   d83d0:	e73e      	b.n	d8250 <__adddf3+0x138>
   d83d2:	bf00      	nop

000d83d4 <__aeabi_f2d>:
   d83d4:	0042      	lsls	r2, r0, #1
   d83d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d83da:	ea4f 0131 	mov.w	r1, r1, rrx
   d83de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d83e2:	bf1f      	itttt	ne
   d83e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d83e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d83ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d83f0:	4770      	bxne	lr
   d83f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d83f6:	bf08      	it	eq
   d83f8:	4770      	bxeq	lr
   d83fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d83fe:	bf04      	itt	eq
   d8400:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8404:	4770      	bxeq	lr
   d8406:	b530      	push	{r4, r5, lr}
   d8408:	f44f 7460 	mov.w	r4, #896	; 0x380
   d840c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8414:	e71c      	b.n	d8250 <__adddf3+0x138>
   d8416:	bf00      	nop

000d8418 <__aeabi_ul2d>:
   d8418:	ea50 0201 	orrs.w	r2, r0, r1
   d841c:	bf08      	it	eq
   d841e:	4770      	bxeq	lr
   d8420:	b530      	push	{r4, r5, lr}
   d8422:	f04f 0500 	mov.w	r5, #0
   d8426:	e00a      	b.n	d843e <__aeabi_l2d+0x16>

000d8428 <__aeabi_l2d>:
   d8428:	ea50 0201 	orrs.w	r2, r0, r1
   d842c:	bf08      	it	eq
   d842e:	4770      	bxeq	lr
   d8430:	b530      	push	{r4, r5, lr}
   d8432:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8436:	d502      	bpl.n	d843e <__aeabi_l2d+0x16>
   d8438:	4240      	negs	r0, r0
   d843a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d843e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8442:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8446:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d844a:	f43f aed8 	beq.w	d81fe <__adddf3+0xe6>
   d844e:	f04f 0203 	mov.w	r2, #3
   d8452:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8456:	bf18      	it	ne
   d8458:	3203      	addne	r2, #3
   d845a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d845e:	bf18      	it	ne
   d8460:	3203      	addne	r2, #3
   d8462:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8466:	f1c2 0320 	rsb	r3, r2, #32
   d846a:	fa00 fc03 	lsl.w	ip, r0, r3
   d846e:	fa20 f002 	lsr.w	r0, r0, r2
   d8472:	fa01 fe03 	lsl.w	lr, r1, r3
   d8476:	ea40 000e 	orr.w	r0, r0, lr
   d847a:	fa21 f102 	lsr.w	r1, r1, r2
   d847e:	4414      	add	r4, r2
   d8480:	e6bd      	b.n	d81fe <__adddf3+0xe6>
   d8482:	bf00      	nop

000d8484 <__aeabi_dmul>:
   d8484:	b570      	push	{r4, r5, r6, lr}
   d8486:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d848a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d848e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8492:	bf1d      	ittte	ne
   d8494:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8498:	ea94 0f0c 	teqne	r4, ip
   d849c:	ea95 0f0c 	teqne	r5, ip
   d84a0:	f000 f8de 	bleq	d8660 <__aeabi_dmul+0x1dc>
   d84a4:	442c      	add	r4, r5
   d84a6:	ea81 0603 	eor.w	r6, r1, r3
   d84aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d84ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d84b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d84b6:	bf18      	it	ne
   d84b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d84bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d84c4:	d038      	beq.n	d8538 <__aeabi_dmul+0xb4>
   d84c6:	fba0 ce02 	umull	ip, lr, r0, r2
   d84ca:	f04f 0500 	mov.w	r5, #0
   d84ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   d84d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d84d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d84da:	f04f 0600 	mov.w	r6, #0
   d84de:	fbe1 5603 	umlal	r5, r6, r1, r3
   d84e2:	f09c 0f00 	teq	ip, #0
   d84e6:	bf18      	it	ne
   d84e8:	f04e 0e01 	orrne.w	lr, lr, #1
   d84ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d84f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d84f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d84f8:	d204      	bcs.n	d8504 <__aeabi_dmul+0x80>
   d84fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d84fe:	416d      	adcs	r5, r5
   d8500:	eb46 0606 	adc.w	r6, r6, r6
   d8504:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8508:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d850c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8510:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8514:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8518:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d851c:	bf88      	it	hi
   d851e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8522:	d81e      	bhi.n	d8562 <__aeabi_dmul+0xde>
   d8524:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8528:	bf08      	it	eq
   d852a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d852e:	f150 0000 	adcs.w	r0, r0, #0
   d8532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8536:	bd70      	pop	{r4, r5, r6, pc}
   d8538:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d853c:	ea46 0101 	orr.w	r1, r6, r1
   d8540:	ea40 0002 	orr.w	r0, r0, r2
   d8544:	ea81 0103 	eor.w	r1, r1, r3
   d8548:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d854c:	bfc2      	ittt	gt
   d854e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8552:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8556:	bd70      	popgt	{r4, r5, r6, pc}
   d8558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d855c:	f04f 0e00 	mov.w	lr, #0
   d8560:	3c01      	subs	r4, #1
   d8562:	f300 80ab 	bgt.w	d86bc <__aeabi_dmul+0x238>
   d8566:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d856a:	bfde      	ittt	le
   d856c:	2000      	movle	r0, #0
   d856e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8572:	bd70      	pople	{r4, r5, r6, pc}
   d8574:	f1c4 0400 	rsb	r4, r4, #0
   d8578:	3c20      	subs	r4, #32
   d857a:	da35      	bge.n	d85e8 <__aeabi_dmul+0x164>
   d857c:	340c      	adds	r4, #12
   d857e:	dc1b      	bgt.n	d85b8 <__aeabi_dmul+0x134>
   d8580:	f104 0414 	add.w	r4, r4, #20
   d8584:	f1c4 0520 	rsb	r5, r4, #32
   d8588:	fa00 f305 	lsl.w	r3, r0, r5
   d858c:	fa20 f004 	lsr.w	r0, r0, r4
   d8590:	fa01 f205 	lsl.w	r2, r1, r5
   d8594:	ea40 0002 	orr.w	r0, r0, r2
   d8598:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d859c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d85a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85a4:	fa21 f604 	lsr.w	r6, r1, r4
   d85a8:	eb42 0106 	adc.w	r1, r2, r6
   d85ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85b0:	bf08      	it	eq
   d85b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85b6:	bd70      	pop	{r4, r5, r6, pc}
   d85b8:	f1c4 040c 	rsb	r4, r4, #12
   d85bc:	f1c4 0520 	rsb	r5, r4, #32
   d85c0:	fa00 f304 	lsl.w	r3, r0, r4
   d85c4:	fa20 f005 	lsr.w	r0, r0, r5
   d85c8:	fa01 f204 	lsl.w	r2, r1, r4
   d85cc:	ea40 0002 	orr.w	r0, r0, r2
   d85d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85d8:	f141 0100 	adc.w	r1, r1, #0
   d85dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85e0:	bf08      	it	eq
   d85e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85e6:	bd70      	pop	{r4, r5, r6, pc}
   d85e8:	f1c4 0520 	rsb	r5, r4, #32
   d85ec:	fa00 f205 	lsl.w	r2, r0, r5
   d85f0:	ea4e 0e02 	orr.w	lr, lr, r2
   d85f4:	fa20 f304 	lsr.w	r3, r0, r4
   d85f8:	fa01 f205 	lsl.w	r2, r1, r5
   d85fc:	ea43 0302 	orr.w	r3, r3, r2
   d8600:	fa21 f004 	lsr.w	r0, r1, r4
   d8604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8608:	fa21 f204 	lsr.w	r2, r1, r4
   d860c:	ea20 0002 	bic.w	r0, r0, r2
   d8610:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8618:	bf08      	it	eq
   d861a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d861e:	bd70      	pop	{r4, r5, r6, pc}
   d8620:	f094 0f00 	teq	r4, #0
   d8624:	d10f      	bne.n	d8646 <__aeabi_dmul+0x1c2>
   d8626:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d862a:	0040      	lsls	r0, r0, #1
   d862c:	eb41 0101 	adc.w	r1, r1, r1
   d8630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8634:	bf08      	it	eq
   d8636:	3c01      	subeq	r4, #1
   d8638:	d0f7      	beq.n	d862a <__aeabi_dmul+0x1a6>
   d863a:	ea41 0106 	orr.w	r1, r1, r6
   d863e:	f095 0f00 	teq	r5, #0
   d8642:	bf18      	it	ne
   d8644:	4770      	bxne	lr
   d8646:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d864a:	0052      	lsls	r2, r2, #1
   d864c:	eb43 0303 	adc.w	r3, r3, r3
   d8650:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8654:	bf08      	it	eq
   d8656:	3d01      	subeq	r5, #1
   d8658:	d0f7      	beq.n	d864a <__aeabi_dmul+0x1c6>
   d865a:	ea43 0306 	orr.w	r3, r3, r6
   d865e:	4770      	bx	lr
   d8660:	ea94 0f0c 	teq	r4, ip
   d8664:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8668:	bf18      	it	ne
   d866a:	ea95 0f0c 	teqne	r5, ip
   d866e:	d00c      	beq.n	d868a <__aeabi_dmul+0x206>
   d8670:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8674:	bf18      	it	ne
   d8676:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d867a:	d1d1      	bne.n	d8620 <__aeabi_dmul+0x19c>
   d867c:	ea81 0103 	eor.w	r1, r1, r3
   d8680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8684:	f04f 0000 	mov.w	r0, #0
   d8688:	bd70      	pop	{r4, r5, r6, pc}
   d868a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d868e:	bf06      	itte	eq
   d8690:	4610      	moveq	r0, r2
   d8692:	4619      	moveq	r1, r3
   d8694:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8698:	d019      	beq.n	d86ce <__aeabi_dmul+0x24a>
   d869a:	ea94 0f0c 	teq	r4, ip
   d869e:	d102      	bne.n	d86a6 <__aeabi_dmul+0x222>
   d86a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d86a4:	d113      	bne.n	d86ce <__aeabi_dmul+0x24a>
   d86a6:	ea95 0f0c 	teq	r5, ip
   d86aa:	d105      	bne.n	d86b8 <__aeabi_dmul+0x234>
   d86ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d86b0:	bf1c      	itt	ne
   d86b2:	4610      	movne	r0, r2
   d86b4:	4619      	movne	r1, r3
   d86b6:	d10a      	bne.n	d86ce <__aeabi_dmul+0x24a>
   d86b8:	ea81 0103 	eor.w	r1, r1, r3
   d86bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d86c8:	f04f 0000 	mov.w	r0, #0
   d86cc:	bd70      	pop	{r4, r5, r6, pc}
   d86ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d86d6:	bd70      	pop	{r4, r5, r6, pc}

000d86d8 <__aeabi_ddiv>:
   d86d8:	b570      	push	{r4, r5, r6, lr}
   d86da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86e6:	bf1d      	ittte	ne
   d86e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86ec:	ea94 0f0c 	teqne	r4, ip
   d86f0:	ea95 0f0c 	teqne	r5, ip
   d86f4:	f000 f8a7 	bleq	d8846 <__aeabi_ddiv+0x16e>
   d86f8:	eba4 0405 	sub.w	r4, r4, r5
   d86fc:	ea81 0e03 	eor.w	lr, r1, r3
   d8700:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8704:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8708:	f000 8088 	beq.w	d881c <__aeabi_ddiv+0x144>
   d870c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8710:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8714:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8718:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d871c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8720:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8724:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8728:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d872c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8730:	429d      	cmp	r5, r3
   d8732:	bf08      	it	eq
   d8734:	4296      	cmpeq	r6, r2
   d8736:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d873a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d873e:	d202      	bcs.n	d8746 <__aeabi_ddiv+0x6e>
   d8740:	085b      	lsrs	r3, r3, #1
   d8742:	ea4f 0232 	mov.w	r2, r2, rrx
   d8746:	1ab6      	subs	r6, r6, r2
   d8748:	eb65 0503 	sbc.w	r5, r5, r3
   d874c:	085b      	lsrs	r3, r3, #1
   d874e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8752:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8756:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d875a:	ebb6 0e02 	subs.w	lr, r6, r2
   d875e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8762:	bf22      	ittt	cs
   d8764:	1ab6      	subcs	r6, r6, r2
   d8766:	4675      	movcs	r5, lr
   d8768:	ea40 000c 	orrcs.w	r0, r0, ip
   d876c:	085b      	lsrs	r3, r3, #1
   d876e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8772:	ebb6 0e02 	subs.w	lr, r6, r2
   d8776:	eb75 0e03 	sbcs.w	lr, r5, r3
   d877a:	bf22      	ittt	cs
   d877c:	1ab6      	subcs	r6, r6, r2
   d877e:	4675      	movcs	r5, lr
   d8780:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8784:	085b      	lsrs	r3, r3, #1
   d8786:	ea4f 0232 	mov.w	r2, r2, rrx
   d878a:	ebb6 0e02 	subs.w	lr, r6, r2
   d878e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8792:	bf22      	ittt	cs
   d8794:	1ab6      	subcs	r6, r6, r2
   d8796:	4675      	movcs	r5, lr
   d8798:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d879c:	085b      	lsrs	r3, r3, #1
   d879e:	ea4f 0232 	mov.w	r2, r2, rrx
   d87a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d87a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87aa:	bf22      	ittt	cs
   d87ac:	1ab6      	subcs	r6, r6, r2
   d87ae:	4675      	movcs	r5, lr
   d87b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d87b4:	ea55 0e06 	orrs.w	lr, r5, r6
   d87b8:	d018      	beq.n	d87ec <__aeabi_ddiv+0x114>
   d87ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d87be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d87c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d87c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d87ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d87ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d87d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d87d6:	d1c0      	bne.n	d875a <__aeabi_ddiv+0x82>
   d87d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87dc:	d10b      	bne.n	d87f6 <__aeabi_ddiv+0x11e>
   d87de:	ea41 0100 	orr.w	r1, r1, r0
   d87e2:	f04f 0000 	mov.w	r0, #0
   d87e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d87ea:	e7b6      	b.n	d875a <__aeabi_ddiv+0x82>
   d87ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87f0:	bf04      	itt	eq
   d87f2:	4301      	orreq	r1, r0
   d87f4:	2000      	moveq	r0, #0
   d87f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d87fa:	bf88      	it	hi
   d87fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8800:	f63f aeaf 	bhi.w	d8562 <__aeabi_dmul+0xde>
   d8804:	ebb5 0c03 	subs.w	ip, r5, r3
   d8808:	bf04      	itt	eq
   d880a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d880e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8812:	f150 0000 	adcs.w	r0, r0, #0
   d8816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d881a:	bd70      	pop	{r4, r5, r6, pc}
   d881c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8820:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8824:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8828:	bfc2      	ittt	gt
   d882a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d882e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8832:	bd70      	popgt	{r4, r5, r6, pc}
   d8834:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8838:	f04f 0e00 	mov.w	lr, #0
   d883c:	3c01      	subs	r4, #1
   d883e:	e690      	b.n	d8562 <__aeabi_dmul+0xde>
   d8840:	ea45 0e06 	orr.w	lr, r5, r6
   d8844:	e68d      	b.n	d8562 <__aeabi_dmul+0xde>
   d8846:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d884a:	ea94 0f0c 	teq	r4, ip
   d884e:	bf08      	it	eq
   d8850:	ea95 0f0c 	teqeq	r5, ip
   d8854:	f43f af3b 	beq.w	d86ce <__aeabi_dmul+0x24a>
   d8858:	ea94 0f0c 	teq	r4, ip
   d885c:	d10a      	bne.n	d8874 <__aeabi_ddiv+0x19c>
   d885e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8862:	f47f af34 	bne.w	d86ce <__aeabi_dmul+0x24a>
   d8866:	ea95 0f0c 	teq	r5, ip
   d886a:	f47f af25 	bne.w	d86b8 <__aeabi_dmul+0x234>
   d886e:	4610      	mov	r0, r2
   d8870:	4619      	mov	r1, r3
   d8872:	e72c      	b.n	d86ce <__aeabi_dmul+0x24a>
   d8874:	ea95 0f0c 	teq	r5, ip
   d8878:	d106      	bne.n	d8888 <__aeabi_ddiv+0x1b0>
   d887a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d887e:	f43f aefd 	beq.w	d867c <__aeabi_dmul+0x1f8>
   d8882:	4610      	mov	r0, r2
   d8884:	4619      	mov	r1, r3
   d8886:	e722      	b.n	d86ce <__aeabi_dmul+0x24a>
   d8888:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d888c:	bf18      	it	ne
   d888e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8892:	f47f aec5 	bne.w	d8620 <__aeabi_dmul+0x19c>
   d8896:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d889a:	f47f af0d 	bne.w	d86b8 <__aeabi_dmul+0x234>
   d889e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d88a2:	f47f aeeb 	bne.w	d867c <__aeabi_dmul+0x1f8>
   d88a6:	e712      	b.n	d86ce <__aeabi_dmul+0x24a>

000d88a8 <__gedf2>:
   d88a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d88ac:	e006      	b.n	d88bc <__cmpdf2+0x4>
   d88ae:	bf00      	nop

000d88b0 <__ledf2>:
   d88b0:	f04f 0c01 	mov.w	ip, #1
   d88b4:	e002      	b.n	d88bc <__cmpdf2+0x4>
   d88b6:	bf00      	nop

000d88b8 <__cmpdf2>:
   d88b8:	f04f 0c01 	mov.w	ip, #1
   d88bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d88c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d88c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88cc:	bf18      	it	ne
   d88ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d88d2:	d01b      	beq.n	d890c <__cmpdf2+0x54>
   d88d4:	b001      	add	sp, #4
   d88d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d88da:	bf0c      	ite	eq
   d88dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d88e0:	ea91 0f03 	teqne	r1, r3
   d88e4:	bf02      	ittt	eq
   d88e6:	ea90 0f02 	teqeq	r0, r2
   d88ea:	2000      	moveq	r0, #0
   d88ec:	4770      	bxeq	lr
   d88ee:	f110 0f00 	cmn.w	r0, #0
   d88f2:	ea91 0f03 	teq	r1, r3
   d88f6:	bf58      	it	pl
   d88f8:	4299      	cmppl	r1, r3
   d88fa:	bf08      	it	eq
   d88fc:	4290      	cmpeq	r0, r2
   d88fe:	bf2c      	ite	cs
   d8900:	17d8      	asrcs	r0, r3, #31
   d8902:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8906:	f040 0001 	orr.w	r0, r0, #1
   d890a:	4770      	bx	lr
   d890c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8914:	d102      	bne.n	d891c <__cmpdf2+0x64>
   d8916:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d891a:	d107      	bne.n	d892c <__cmpdf2+0x74>
   d891c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8924:	d1d6      	bne.n	d88d4 <__cmpdf2+0x1c>
   d8926:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d892a:	d0d3      	beq.n	d88d4 <__cmpdf2+0x1c>
   d892c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8930:	4770      	bx	lr
   d8932:	bf00      	nop

000d8934 <__aeabi_cdrcmple>:
   d8934:	4684      	mov	ip, r0
   d8936:	4610      	mov	r0, r2
   d8938:	4662      	mov	r2, ip
   d893a:	468c      	mov	ip, r1
   d893c:	4619      	mov	r1, r3
   d893e:	4663      	mov	r3, ip
   d8940:	e000      	b.n	d8944 <__aeabi_cdcmpeq>
   d8942:	bf00      	nop

000d8944 <__aeabi_cdcmpeq>:
   d8944:	b501      	push	{r0, lr}
   d8946:	f7ff ffb7 	bl	d88b8 <__cmpdf2>
   d894a:	2800      	cmp	r0, #0
   d894c:	bf48      	it	mi
   d894e:	f110 0f00 	cmnmi.w	r0, #0
   d8952:	bd01      	pop	{r0, pc}

000d8954 <__aeabi_dcmpeq>:
   d8954:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8958:	f7ff fff4 	bl	d8944 <__aeabi_cdcmpeq>
   d895c:	bf0c      	ite	eq
   d895e:	2001      	moveq	r0, #1
   d8960:	2000      	movne	r0, #0
   d8962:	f85d fb08 	ldr.w	pc, [sp], #8
   d8966:	bf00      	nop

000d8968 <__aeabi_dcmplt>:
   d8968:	f84d ed08 	str.w	lr, [sp, #-8]!
   d896c:	f7ff ffea 	bl	d8944 <__aeabi_cdcmpeq>
   d8970:	bf34      	ite	cc
   d8972:	2001      	movcc	r0, #1
   d8974:	2000      	movcs	r0, #0
   d8976:	f85d fb08 	ldr.w	pc, [sp], #8
   d897a:	bf00      	nop

000d897c <__aeabi_dcmple>:
   d897c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8980:	f7ff ffe0 	bl	d8944 <__aeabi_cdcmpeq>
   d8984:	bf94      	ite	ls
   d8986:	2001      	movls	r0, #1
   d8988:	2000      	movhi	r0, #0
   d898a:	f85d fb08 	ldr.w	pc, [sp], #8
   d898e:	bf00      	nop

000d8990 <__aeabi_dcmpge>:
   d8990:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8994:	f7ff ffce 	bl	d8934 <__aeabi_cdrcmple>
   d8998:	bf94      	ite	ls
   d899a:	2001      	movls	r0, #1
   d899c:	2000      	movhi	r0, #0
   d899e:	f85d fb08 	ldr.w	pc, [sp], #8
   d89a2:	bf00      	nop

000d89a4 <__aeabi_dcmpgt>:
   d89a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89a8:	f7ff ffc4 	bl	d8934 <__aeabi_cdrcmple>
   d89ac:	bf34      	ite	cc
   d89ae:	2001      	movcc	r0, #1
   d89b0:	2000      	movcs	r0, #0
   d89b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d89b6:	bf00      	nop

000d89b8 <__aeabi_d2uiz>:
   d89b8:	004a      	lsls	r2, r1, #1
   d89ba:	d211      	bcs.n	d89e0 <__aeabi_d2uiz+0x28>
   d89bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d89c0:	d211      	bcs.n	d89e6 <__aeabi_d2uiz+0x2e>
   d89c2:	d50d      	bpl.n	d89e0 <__aeabi_d2uiz+0x28>
   d89c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d89c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d89cc:	d40e      	bmi.n	d89ec <__aeabi_d2uiz+0x34>
   d89ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d89d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d89d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d89da:	fa23 f002 	lsr.w	r0, r3, r2
   d89de:	4770      	bx	lr
   d89e0:	f04f 0000 	mov.w	r0, #0
   d89e4:	4770      	bx	lr
   d89e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d89ea:	d102      	bne.n	d89f2 <__aeabi_d2uiz+0x3a>
   d89ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d89f0:	4770      	bx	lr
   d89f2:	f04f 0000 	mov.w	r0, #0
   d89f6:	4770      	bx	lr

000d89f8 <__aeabi_d2f>:
   d89f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d89fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8a00:	bf24      	itt	cs
   d8a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8a0a:	d90d      	bls.n	d8a28 <__aeabi_d2f+0x30>
   d8a0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8a18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8a20:	bf08      	it	eq
   d8a22:	f020 0001 	biceq.w	r0, r0, #1
   d8a26:	4770      	bx	lr
   d8a28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8a2c:	d121      	bne.n	d8a72 <__aeabi_d2f+0x7a>
   d8a2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8a32:	bfbc      	itt	lt
   d8a34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8a38:	4770      	bxlt	lr
   d8a3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8a42:	f1c2 0218 	rsb	r2, r2, #24
   d8a46:	f1c2 0c20 	rsb	ip, r2, #32
   d8a4a:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a4e:	fa20 f002 	lsr.w	r0, r0, r2
   d8a52:	bf18      	it	ne
   d8a54:	f040 0001 	orrne.w	r0, r0, #1
   d8a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8a60:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8a64:	ea40 000c 	orr.w	r0, r0, ip
   d8a68:	fa23 f302 	lsr.w	r3, r3, r2
   d8a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8a70:	e7cc      	b.n	d8a0c <__aeabi_d2f+0x14>
   d8a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8a76:	d107      	bne.n	d8a88 <__aeabi_d2f+0x90>
   d8a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8a7c:	bf1e      	ittt	ne
   d8a7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8a82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8a86:	4770      	bxne	lr
   d8a88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8a90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8a94:	4770      	bx	lr
   d8a96:	bf00      	nop

000d8a98 <__aeabi_d2ulz>:
   d8a98:	b5d0      	push	{r4, r6, r7, lr}
   d8a9a:	4b0c      	ldr	r3, [pc, #48]	; (d8acc <__aeabi_d2ulz+0x34>)
   d8a9c:	2200      	movs	r2, #0
   d8a9e:	4606      	mov	r6, r0
   d8aa0:	460f      	mov	r7, r1
   d8aa2:	f7ff fcef 	bl	d8484 <__aeabi_dmul>
   d8aa6:	f7ff ff87 	bl	d89b8 <__aeabi_d2uiz>
   d8aaa:	4604      	mov	r4, r0
   d8aac:	f7ff fc70 	bl	d8390 <__aeabi_ui2d>
   d8ab0:	4b07      	ldr	r3, [pc, #28]	; (d8ad0 <__aeabi_d2ulz+0x38>)
   d8ab2:	2200      	movs	r2, #0
   d8ab4:	f7ff fce6 	bl	d8484 <__aeabi_dmul>
   d8ab8:	4602      	mov	r2, r0
   d8aba:	460b      	mov	r3, r1
   d8abc:	4630      	mov	r0, r6
   d8abe:	4639      	mov	r1, r7
   d8ac0:	f7ff fb28 	bl	d8114 <__aeabi_dsub>
   d8ac4:	f7ff ff78 	bl	d89b8 <__aeabi_d2uiz>
   d8ac8:	4621      	mov	r1, r4
   d8aca:	bdd0      	pop	{r4, r6, r7, pc}
   d8acc:	3df00000 	.word	0x3df00000
   d8ad0:	41f00000 	.word	0x41f00000

000d8ad4 <asctime_r>:
   d8ad4:	b510      	push	{r4, lr}
   d8ad6:	460c      	mov	r4, r1
   d8ad8:	6941      	ldr	r1, [r0, #20]
   d8ada:	6903      	ldr	r3, [r0, #16]
   d8adc:	6982      	ldr	r2, [r0, #24]
   d8ade:	b086      	sub	sp, #24
   d8ae0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8ae4:	9104      	str	r1, [sp, #16]
   d8ae6:	6801      	ldr	r1, [r0, #0]
   d8ae8:	9103      	str	r1, [sp, #12]
   d8aea:	6841      	ldr	r1, [r0, #4]
   d8aec:	9102      	str	r1, [sp, #8]
   d8aee:	6881      	ldr	r1, [r0, #8]
   d8af0:	9101      	str	r1, [sp, #4]
   d8af2:	68c1      	ldr	r1, [r0, #12]
   d8af4:	9100      	str	r1, [sp, #0]
   d8af6:	4907      	ldr	r1, [pc, #28]	; (d8b14 <asctime_r+0x40>)
   d8af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8afc:	440b      	add	r3, r1
   d8afe:	4906      	ldr	r1, [pc, #24]	; (d8b18 <asctime_r+0x44>)
   d8b00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8b04:	440a      	add	r2, r1
   d8b06:	4620      	mov	r0, r4
   d8b08:	4904      	ldr	r1, [pc, #16]	; (d8b1c <asctime_r+0x48>)
   d8b0a:	f7fd ffbb 	bl	d6a84 <siprintf>
   d8b0e:	4620      	mov	r0, r4
   d8b10:	b006      	add	sp, #24
   d8b12:	bd10      	pop	{r4, pc}
   d8b14:	000db242 	.word	0x000db242
   d8b18:	000db22d 	.word	0x000db22d
   d8b1c:	000db20d 	.word	0x000db20d

000d8b20 <atof>:
   d8b20:	2100      	movs	r1, #0
   d8b22:	f000 befb 	b.w	d991c <strtod>

000d8b26 <atoi>:
   d8b26:	220a      	movs	r2, #10
   d8b28:	2100      	movs	r1, #0
   d8b2a:	f000 bf7d 	b.w	d9a28 <strtol>
	...

000d8b30 <__cxa_atexit>:
   d8b30:	b510      	push	{r4, lr}
   d8b32:	4c05      	ldr	r4, [pc, #20]	; (d8b48 <__cxa_atexit+0x18>)
   d8b34:	4613      	mov	r3, r2
   d8b36:	b12c      	cbz	r4, d8b44 <__cxa_atexit+0x14>
   d8b38:	460a      	mov	r2, r1
   d8b3a:	4601      	mov	r1, r0
   d8b3c:	2002      	movs	r0, #2
   d8b3e:	f3af 8000 	nop.w
   d8b42:	bd10      	pop	{r4, pc}
   d8b44:	4620      	mov	r0, r4
   d8b46:	e7fc      	b.n	d8b42 <__cxa_atexit+0x12>
   d8b48:	00000000 	.word	0x00000000

000d8b4c <gmtime>:
   d8b4c:	b538      	push	{r3, r4, r5, lr}
   d8b4e:	4b07      	ldr	r3, [pc, #28]	; (d8b6c <gmtime+0x20>)
   d8b50:	681d      	ldr	r5, [r3, #0]
   d8b52:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8b54:	4604      	mov	r4, r0
   d8b56:	b91b      	cbnz	r3, d8b60 <gmtime+0x14>
   d8b58:	2024      	movs	r0, #36	; 0x24
   d8b5a:	f7fd ff7b 	bl	d6a54 <malloc>
   d8b5e:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8b60:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8b62:	4620      	mov	r0, r4
   d8b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8b68:	f7fd bfc4 	b.w	d6af4 <gmtime_r>
   d8b6c:	2003e23c 	.word	0x2003e23c

000d8b70 <memcpy>:
   d8b70:	440a      	add	r2, r1
   d8b72:	4291      	cmp	r1, r2
   d8b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8b78:	d100      	bne.n	d8b7c <memcpy+0xc>
   d8b7a:	4770      	bx	lr
   d8b7c:	b510      	push	{r4, lr}
   d8b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b82:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b86:	4291      	cmp	r1, r2
   d8b88:	d1f9      	bne.n	d8b7e <memcpy+0xe>
   d8b8a:	bd10      	pop	{r4, pc}

000d8b8c <memmove>:
   d8b8c:	4288      	cmp	r0, r1
   d8b8e:	b510      	push	{r4, lr}
   d8b90:	eb01 0402 	add.w	r4, r1, r2
   d8b94:	d902      	bls.n	d8b9c <memmove+0x10>
   d8b96:	4284      	cmp	r4, r0
   d8b98:	4623      	mov	r3, r4
   d8b9a:	d807      	bhi.n	d8bac <memmove+0x20>
   d8b9c:	1e43      	subs	r3, r0, #1
   d8b9e:	42a1      	cmp	r1, r4
   d8ba0:	d008      	beq.n	d8bb4 <memmove+0x28>
   d8ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8baa:	e7f8      	b.n	d8b9e <memmove+0x12>
   d8bac:	4402      	add	r2, r0
   d8bae:	4601      	mov	r1, r0
   d8bb0:	428a      	cmp	r2, r1
   d8bb2:	d100      	bne.n	d8bb6 <memmove+0x2a>
   d8bb4:	bd10      	pop	{r4, pc}
   d8bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8bbe:	e7f7      	b.n	d8bb0 <memmove+0x24>

000d8bc0 <memset>:
   d8bc0:	4402      	add	r2, r0
   d8bc2:	4603      	mov	r3, r0
   d8bc4:	4293      	cmp	r3, r2
   d8bc6:	d100      	bne.n	d8bca <memset+0xa>
   d8bc8:	4770      	bx	lr
   d8bca:	f803 1b01 	strb.w	r1, [r3], #1
   d8bce:	e7f9      	b.n	d8bc4 <memset+0x4>

000d8bd0 <srand>:
   d8bd0:	b538      	push	{r3, r4, r5, lr}
   d8bd2:	4b0d      	ldr	r3, [pc, #52]	; (d8c08 <srand+0x38>)
   d8bd4:	681d      	ldr	r5, [r3, #0]
   d8bd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8bd8:	4604      	mov	r4, r0
   d8bda:	b97b      	cbnz	r3, d8bfc <srand+0x2c>
   d8bdc:	2018      	movs	r0, #24
   d8bde:	f7fd ff39 	bl	d6a54 <malloc>
   d8be2:	4a0a      	ldr	r2, [pc, #40]	; (d8c0c <srand+0x3c>)
   d8be4:	4b0a      	ldr	r3, [pc, #40]	; (d8c10 <srand+0x40>)
   d8be6:	63a8      	str	r0, [r5, #56]	; 0x38
   d8be8:	e9c0 2300 	strd	r2, r3, [r0]
   d8bec:	4b09      	ldr	r3, [pc, #36]	; (d8c14 <srand+0x44>)
   d8bee:	6083      	str	r3, [r0, #8]
   d8bf0:	230b      	movs	r3, #11
   d8bf2:	8183      	strh	r3, [r0, #12]
   d8bf4:	2201      	movs	r2, #1
   d8bf6:	2300      	movs	r3, #0
   d8bf8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8bfc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8bfe:	2200      	movs	r2, #0
   d8c00:	611c      	str	r4, [r3, #16]
   d8c02:	615a      	str	r2, [r3, #20]
   d8c04:	bd38      	pop	{r3, r4, r5, pc}
   d8c06:	bf00      	nop
   d8c08:	2003e23c 	.word	0x2003e23c
   d8c0c:	abcd330e 	.word	0xabcd330e
   d8c10:	e66d1234 	.word	0xe66d1234
   d8c14:	0005deec 	.word	0x0005deec

000d8c18 <strcmp>:
   d8c18:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8c20:	2a01      	cmp	r2, #1
   d8c22:	bf28      	it	cs
   d8c24:	429a      	cmpcs	r2, r3
   d8c26:	d0f7      	beq.n	d8c18 <strcmp>
   d8c28:	1ad0      	subs	r0, r2, r3
   d8c2a:	4770      	bx	lr

000d8c2c <strcpy>:
   d8c2c:	4603      	mov	r3, r0
   d8c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8c32:	f803 2b01 	strb.w	r2, [r3], #1
   d8c36:	2a00      	cmp	r2, #0
   d8c38:	d1f9      	bne.n	d8c2e <strcpy+0x2>
   d8c3a:	4770      	bx	lr

000d8c3c <strdup>:
   d8c3c:	4b02      	ldr	r3, [pc, #8]	; (d8c48 <strdup+0xc>)
   d8c3e:	4601      	mov	r1, r0
   d8c40:	6818      	ldr	r0, [r3, #0]
   d8c42:	f000 b803 	b.w	d8c4c <_strdup_r>
   d8c46:	bf00      	nop
   d8c48:	2003e23c 	.word	0x2003e23c

000d8c4c <_strdup_r>:
   d8c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c4e:	4604      	mov	r4, r0
   d8c50:	4608      	mov	r0, r1
   d8c52:	460d      	mov	r5, r1
   d8c54:	f000 f80f 	bl	d8c76 <strlen>
   d8c58:	1c42      	adds	r2, r0, #1
   d8c5a:	4611      	mov	r1, r2
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	9201      	str	r2, [sp, #4]
   d8c60:	f7fd ff28 	bl	d6ab4 <_malloc_r>
   d8c64:	4604      	mov	r4, r0
   d8c66:	b118      	cbz	r0, d8c70 <_strdup_r+0x24>
   d8c68:	9a01      	ldr	r2, [sp, #4]
   d8c6a:	4629      	mov	r1, r5
   d8c6c:	f7ff ff80 	bl	d8b70 <memcpy>
   d8c70:	4620      	mov	r0, r4
   d8c72:	b003      	add	sp, #12
   d8c74:	bd30      	pop	{r4, r5, pc}

000d8c76 <strlen>:
   d8c76:	4603      	mov	r3, r0
   d8c78:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8c7c:	2a00      	cmp	r2, #0
   d8c7e:	d1fb      	bne.n	d8c78 <strlen+0x2>
   d8c80:	1a18      	subs	r0, r3, r0
   d8c82:	3801      	subs	r0, #1
   d8c84:	4770      	bx	lr

000d8c86 <strncmp>:
   d8c86:	b510      	push	{r4, lr}
   d8c88:	b16a      	cbz	r2, d8ca6 <strncmp+0x20>
   d8c8a:	3901      	subs	r1, #1
   d8c8c:	1884      	adds	r4, r0, r2
   d8c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8c92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8c96:	4293      	cmp	r3, r2
   d8c98:	d103      	bne.n	d8ca2 <strncmp+0x1c>
   d8c9a:	42a0      	cmp	r0, r4
   d8c9c:	d001      	beq.n	d8ca2 <strncmp+0x1c>
   d8c9e:	2b00      	cmp	r3, #0
   d8ca0:	d1f5      	bne.n	d8c8e <strncmp+0x8>
   d8ca2:	1a98      	subs	r0, r3, r2
   d8ca4:	bd10      	pop	{r4, pc}
   d8ca6:	4610      	mov	r0, r2
   d8ca8:	e7fc      	b.n	d8ca4 <strncmp+0x1e>

000d8caa <strncpy>:
   d8caa:	b510      	push	{r4, lr}
   d8cac:	3901      	subs	r1, #1
   d8cae:	4603      	mov	r3, r0
   d8cb0:	b132      	cbz	r2, d8cc0 <strncpy+0x16>
   d8cb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8cb6:	f803 4b01 	strb.w	r4, [r3], #1
   d8cba:	3a01      	subs	r2, #1
   d8cbc:	2c00      	cmp	r4, #0
   d8cbe:	d1f7      	bne.n	d8cb0 <strncpy+0x6>
   d8cc0:	441a      	add	r2, r3
   d8cc2:	2100      	movs	r1, #0
   d8cc4:	4293      	cmp	r3, r2
   d8cc6:	d100      	bne.n	d8cca <strncpy+0x20>
   d8cc8:	bd10      	pop	{r4, pc}
   d8cca:	f803 1b01 	strb.w	r1, [r3], #1
   d8cce:	e7f9      	b.n	d8cc4 <strncpy+0x1a>

000d8cd0 <sulp>:
   d8cd0:	b570      	push	{r4, r5, r6, lr}
   d8cd2:	4604      	mov	r4, r0
   d8cd4:	460d      	mov	r5, r1
   d8cd6:	ec45 4b10 	vmov	d0, r4, r5
   d8cda:	4616      	mov	r6, r2
   d8cdc:	f001 fd1a 	bl	da714 <__ulp>
   d8ce0:	ec51 0b10 	vmov	r0, r1, d0
   d8ce4:	b17e      	cbz	r6, d8d06 <sulp+0x36>
   d8ce6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8cea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8cee:	2b00      	cmp	r3, #0
   d8cf0:	dd09      	ble.n	d8d06 <sulp+0x36>
   d8cf2:	051b      	lsls	r3, r3, #20
   d8cf4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8cf8:	2400      	movs	r4, #0
   d8cfa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8cfe:	4622      	mov	r2, r4
   d8d00:	462b      	mov	r3, r5
   d8d02:	f7ff fbbf 	bl	d8484 <__aeabi_dmul>
   d8d06:	bd70      	pop	{r4, r5, r6, pc}

000d8d08 <_strtod_l>:
   d8d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d0c:	b0a3      	sub	sp, #140	; 0x8c
   d8d0e:	461f      	mov	r7, r3
   d8d10:	2300      	movs	r3, #0
   d8d12:	931e      	str	r3, [sp, #120]	; 0x78
   d8d14:	4ba4      	ldr	r3, [pc, #656]	; (d8fa8 <_strtod_l+0x2a0>)
   d8d16:	9219      	str	r2, [sp, #100]	; 0x64
   d8d18:	681b      	ldr	r3, [r3, #0]
   d8d1a:	9307      	str	r3, [sp, #28]
   d8d1c:	4604      	mov	r4, r0
   d8d1e:	4618      	mov	r0, r3
   d8d20:	4688      	mov	r8, r1
   d8d22:	f7ff ffa8 	bl	d8c76 <strlen>
   d8d26:	f04f 0a00 	mov.w	sl, #0
   d8d2a:	4605      	mov	r5, r0
   d8d2c:	f04f 0b00 	mov.w	fp, #0
   d8d30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8d36:	781a      	ldrb	r2, [r3, #0]
   d8d38:	2a2b      	cmp	r2, #43	; 0x2b
   d8d3a:	d04c      	beq.n	d8dd6 <_strtod_l+0xce>
   d8d3c:	d839      	bhi.n	d8db2 <_strtod_l+0xaa>
   d8d3e:	2a0d      	cmp	r2, #13
   d8d40:	d832      	bhi.n	d8da8 <_strtod_l+0xa0>
   d8d42:	2a08      	cmp	r2, #8
   d8d44:	d832      	bhi.n	d8dac <_strtod_l+0xa4>
   d8d46:	2a00      	cmp	r2, #0
   d8d48:	d03c      	beq.n	d8dc4 <_strtod_l+0xbc>
   d8d4a:	2300      	movs	r3, #0
   d8d4c:	930e      	str	r3, [sp, #56]	; 0x38
   d8d4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8d50:	7833      	ldrb	r3, [r6, #0]
   d8d52:	2b30      	cmp	r3, #48	; 0x30
   d8d54:	f040 80b4 	bne.w	d8ec0 <_strtod_l+0x1b8>
   d8d58:	7873      	ldrb	r3, [r6, #1]
   d8d5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8d5e:	2b58      	cmp	r3, #88	; 0x58
   d8d60:	d16c      	bne.n	d8e3c <_strtod_l+0x134>
   d8d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8d64:	9301      	str	r3, [sp, #4]
   d8d66:	ab1e      	add	r3, sp, #120	; 0x78
   d8d68:	9702      	str	r7, [sp, #8]
   d8d6a:	9300      	str	r3, [sp, #0]
   d8d6c:	4a8f      	ldr	r2, [pc, #572]	; (d8fac <_strtod_l+0x2a4>)
   d8d6e:	ab1f      	add	r3, sp, #124	; 0x7c
   d8d70:	a91d      	add	r1, sp, #116	; 0x74
   d8d72:	4620      	mov	r0, r4
   d8d74:	f000 feca 	bl	d9b0c <__gethex>
   d8d78:	f010 0707 	ands.w	r7, r0, #7
   d8d7c:	4605      	mov	r5, r0
   d8d7e:	d005      	beq.n	d8d8c <_strtod_l+0x84>
   d8d80:	2f06      	cmp	r7, #6
   d8d82:	d12a      	bne.n	d8dda <_strtod_l+0xd2>
   d8d84:	3601      	adds	r6, #1
   d8d86:	2300      	movs	r3, #0
   d8d88:	961d      	str	r6, [sp, #116]	; 0x74
   d8d8a:	930e      	str	r3, [sp, #56]	; 0x38
   d8d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8d8e:	2b00      	cmp	r3, #0
   d8d90:	f040 8596 	bne.w	d98c0 <_strtod_l+0xbb8>
   d8d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8d96:	b1db      	cbz	r3, d8dd0 <_strtod_l+0xc8>
   d8d98:	4652      	mov	r2, sl
   d8d9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8d9e:	ec43 2b10 	vmov	d0, r2, r3
   d8da2:	b023      	add	sp, #140	; 0x8c
   d8da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8da8:	2a20      	cmp	r2, #32
   d8daa:	d1ce      	bne.n	d8d4a <_strtod_l+0x42>
   d8dac:	3301      	adds	r3, #1
   d8dae:	931d      	str	r3, [sp, #116]	; 0x74
   d8db0:	e7c0      	b.n	d8d34 <_strtod_l+0x2c>
   d8db2:	2a2d      	cmp	r2, #45	; 0x2d
   d8db4:	d1c9      	bne.n	d8d4a <_strtod_l+0x42>
   d8db6:	2201      	movs	r2, #1
   d8db8:	920e      	str	r2, [sp, #56]	; 0x38
   d8dba:	1c5a      	adds	r2, r3, #1
   d8dbc:	921d      	str	r2, [sp, #116]	; 0x74
   d8dbe:	785b      	ldrb	r3, [r3, #1]
   d8dc0:	2b00      	cmp	r3, #0
   d8dc2:	d1c4      	bne.n	d8d4e <_strtod_l+0x46>
   d8dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8dc6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8dca:	2b00      	cmp	r3, #0
   d8dcc:	f040 8576 	bne.w	d98bc <_strtod_l+0xbb4>
   d8dd0:	4652      	mov	r2, sl
   d8dd2:	465b      	mov	r3, fp
   d8dd4:	e7e3      	b.n	d8d9e <_strtod_l+0x96>
   d8dd6:	2200      	movs	r2, #0
   d8dd8:	e7ee      	b.n	d8db8 <_strtod_l+0xb0>
   d8dda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8ddc:	b13a      	cbz	r2, d8dee <_strtod_l+0xe6>
   d8dde:	2135      	movs	r1, #53	; 0x35
   d8de0:	a820      	add	r0, sp, #128	; 0x80
   d8de2:	f001 fd96 	bl	da912 <__copybits>
   d8de6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8de8:	4620      	mov	r0, r4
   d8dea:	f001 f9cb 	bl	da184 <_Bfree>
   d8dee:	3f01      	subs	r7, #1
   d8df0:	2f05      	cmp	r7, #5
   d8df2:	d807      	bhi.n	d8e04 <_strtod_l+0xfc>
   d8df4:	e8df f007 	tbb	[pc, r7]
   d8df8:	1d180b0e 	.word	0x1d180b0e
   d8dfc:	030e      	.short	0x030e
   d8dfe:	f04f 0b00 	mov.w	fp, #0
   d8e02:	46da      	mov	sl, fp
   d8e04:	0728      	lsls	r0, r5, #28
   d8e06:	d5c1      	bpl.n	d8d8c <_strtod_l+0x84>
   d8e08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8e0c:	e7be      	b.n	d8d8c <_strtod_l+0x84>
   d8e0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8e12:	e7f7      	b.n	d8e04 <_strtod_l+0xfc>
   d8e14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8e18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8e1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8e1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8e22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8e26:	e7ed      	b.n	d8e04 <_strtod_l+0xfc>
   d8e28:	f8df b184 	ldr.w	fp, [pc, #388]	; d8fb0 <_strtod_l+0x2a8>
   d8e2c:	f04f 0a00 	mov.w	sl, #0
   d8e30:	e7e8      	b.n	d8e04 <_strtod_l+0xfc>
   d8e32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8e36:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8e3a:	e7e3      	b.n	d8e04 <_strtod_l+0xfc>
   d8e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e3e:	1c5a      	adds	r2, r3, #1
   d8e40:	921d      	str	r2, [sp, #116]	; 0x74
   d8e42:	785b      	ldrb	r3, [r3, #1]
   d8e44:	2b30      	cmp	r3, #48	; 0x30
   d8e46:	d0f9      	beq.n	d8e3c <_strtod_l+0x134>
   d8e48:	2b00      	cmp	r3, #0
   d8e4a:	d09f      	beq.n	d8d8c <_strtod_l+0x84>
   d8e4c:	2301      	movs	r3, #1
   d8e4e:	f04f 0900 	mov.w	r9, #0
   d8e52:	9304      	str	r3, [sp, #16]
   d8e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e56:	930a      	str	r3, [sp, #40]	; 0x28
   d8e58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8e5c:	464f      	mov	r7, r9
   d8e5e:	220a      	movs	r2, #10
   d8e60:	981d      	ldr	r0, [sp, #116]	; 0x74
   d8e62:	7806      	ldrb	r6, [r0, #0]
   d8e64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8e68:	b2d9      	uxtb	r1, r3
   d8e6a:	2909      	cmp	r1, #9
   d8e6c:	d92a      	bls.n	d8ec4 <_strtod_l+0x1bc>
   d8e6e:	9907      	ldr	r1, [sp, #28]
   d8e70:	462a      	mov	r2, r5
   d8e72:	f7ff ff08 	bl	d8c86 <strncmp>
   d8e76:	b398      	cbz	r0, d8ee0 <_strtod_l+0x1d8>
   d8e78:	2000      	movs	r0, #0
   d8e7a:	4633      	mov	r3, r6
   d8e7c:	463d      	mov	r5, r7
   d8e7e:	9007      	str	r0, [sp, #28]
   d8e80:	4602      	mov	r2, r0
   d8e82:	2b65      	cmp	r3, #101	; 0x65
   d8e84:	d001      	beq.n	d8e8a <_strtod_l+0x182>
   d8e86:	2b45      	cmp	r3, #69	; 0x45
   d8e88:	d118      	bne.n	d8ebc <_strtod_l+0x1b4>
   d8e8a:	b91d      	cbnz	r5, d8e94 <_strtod_l+0x18c>
   d8e8c:	9b04      	ldr	r3, [sp, #16]
   d8e8e:	4303      	orrs	r3, r0
   d8e90:	d098      	beq.n	d8dc4 <_strtod_l+0xbc>
   d8e92:	2500      	movs	r5, #0
   d8e94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8e98:	f108 0301 	add.w	r3, r8, #1
   d8e9c:	931d      	str	r3, [sp, #116]	; 0x74
   d8e9e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d8ea2:	2b2b      	cmp	r3, #43	; 0x2b
   d8ea4:	d075      	beq.n	d8f92 <_strtod_l+0x28a>
   d8ea6:	2b2d      	cmp	r3, #45	; 0x2d
   d8ea8:	d07b      	beq.n	d8fa2 <_strtod_l+0x29a>
   d8eaa:	f04f 0c00 	mov.w	ip, #0
   d8eae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8eb2:	2909      	cmp	r1, #9
   d8eb4:	f240 8082 	bls.w	d8fbc <_strtod_l+0x2b4>
   d8eb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8ebc:	2600      	movs	r6, #0
   d8ebe:	e09d      	b.n	d8ffc <_strtod_l+0x2f4>
   d8ec0:	2300      	movs	r3, #0
   d8ec2:	e7c4      	b.n	d8e4e <_strtod_l+0x146>
   d8ec4:	2f08      	cmp	r7, #8
   d8ec6:	bfd8      	it	le
   d8ec8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d8eca:	f100 0001 	add.w	r0, r0, #1
   d8ece:	bfda      	itte	le
   d8ed0:	fb02 3301 	mlale	r3, r2, r1, r3
   d8ed4:	9309      	strle	r3, [sp, #36]	; 0x24
   d8ed6:	fb02 3909 	mlagt	r9, r2, r9, r3
   d8eda:	3701      	adds	r7, #1
   d8edc:	901d      	str	r0, [sp, #116]	; 0x74
   d8ede:	e7bf      	b.n	d8e60 <_strtod_l+0x158>
   d8ee0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8ee2:	195a      	adds	r2, r3, r5
   d8ee4:	921d      	str	r2, [sp, #116]	; 0x74
   d8ee6:	5d5b      	ldrb	r3, [r3, r5]
   d8ee8:	2f00      	cmp	r7, #0
   d8eea:	d037      	beq.n	d8f5c <_strtod_l+0x254>
   d8eec:	9007      	str	r0, [sp, #28]
   d8eee:	463d      	mov	r5, r7
   d8ef0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d8ef4:	2a09      	cmp	r2, #9
   d8ef6:	d912      	bls.n	d8f1e <_strtod_l+0x216>
   d8ef8:	2201      	movs	r2, #1
   d8efa:	e7c2      	b.n	d8e82 <_strtod_l+0x17a>
   d8efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8efe:	1c5a      	adds	r2, r3, #1
   d8f00:	921d      	str	r2, [sp, #116]	; 0x74
   d8f02:	785b      	ldrb	r3, [r3, #1]
   d8f04:	3001      	adds	r0, #1
   d8f06:	2b30      	cmp	r3, #48	; 0x30
   d8f08:	d0f8      	beq.n	d8efc <_strtod_l+0x1f4>
   d8f0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8f0e:	2a08      	cmp	r2, #8
   d8f10:	f200 84db 	bhi.w	d98ca <_strtod_l+0xbc2>
   d8f14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d8f16:	9007      	str	r0, [sp, #28]
   d8f18:	2000      	movs	r0, #0
   d8f1a:	920a      	str	r2, [sp, #40]	; 0x28
   d8f1c:	4605      	mov	r5, r0
   d8f1e:	3b30      	subs	r3, #48	; 0x30
   d8f20:	f100 0201 	add.w	r2, r0, #1
   d8f24:	d014      	beq.n	d8f50 <_strtod_l+0x248>
   d8f26:	9907      	ldr	r1, [sp, #28]
   d8f28:	4411      	add	r1, r2
   d8f2a:	9107      	str	r1, [sp, #28]
   d8f2c:	462a      	mov	r2, r5
   d8f2e:	eb00 0e05 	add.w	lr, r0, r5
   d8f32:	210a      	movs	r1, #10
   d8f34:	4572      	cmp	r2, lr
   d8f36:	d113      	bne.n	d8f60 <_strtod_l+0x258>
   d8f38:	182a      	adds	r2, r5, r0
   d8f3a:	2a08      	cmp	r2, #8
   d8f3c:	f105 0501 	add.w	r5, r5, #1
   d8f40:	4405      	add	r5, r0
   d8f42:	dc1c      	bgt.n	d8f7e <_strtod_l+0x276>
   d8f44:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8f46:	220a      	movs	r2, #10
   d8f48:	fb02 3301 	mla	r3, r2, r1, r3
   d8f4c:	9309      	str	r3, [sp, #36]	; 0x24
   d8f4e:	2200      	movs	r2, #0
   d8f50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f52:	1c59      	adds	r1, r3, #1
   d8f54:	911d      	str	r1, [sp, #116]	; 0x74
   d8f56:	785b      	ldrb	r3, [r3, #1]
   d8f58:	4610      	mov	r0, r2
   d8f5a:	e7c9      	b.n	d8ef0 <_strtod_l+0x1e8>
   d8f5c:	4638      	mov	r0, r7
   d8f5e:	e7d2      	b.n	d8f06 <_strtod_l+0x1fe>
   d8f60:	2a08      	cmp	r2, #8
   d8f62:	dc04      	bgt.n	d8f6e <_strtod_l+0x266>
   d8f64:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d8f66:	434e      	muls	r6, r1
   d8f68:	9609      	str	r6, [sp, #36]	; 0x24
   d8f6a:	3201      	adds	r2, #1
   d8f6c:	e7e2      	b.n	d8f34 <_strtod_l+0x22c>
   d8f6e:	f102 0c01 	add.w	ip, r2, #1
   d8f72:	f1bc 0f10 	cmp.w	ip, #16
   d8f76:	bfd8      	it	le
   d8f78:	fb01 f909 	mulle.w	r9, r1, r9
   d8f7c:	e7f5      	b.n	d8f6a <_strtod_l+0x262>
   d8f7e:	2d10      	cmp	r5, #16
   d8f80:	bfdc      	itt	le
   d8f82:	220a      	movle	r2, #10
   d8f84:	fb02 3909 	mlale	r9, r2, r9, r3
   d8f88:	e7e1      	b.n	d8f4e <_strtod_l+0x246>
   d8f8a:	2300      	movs	r3, #0
   d8f8c:	9307      	str	r3, [sp, #28]
   d8f8e:	2201      	movs	r2, #1
   d8f90:	e77c      	b.n	d8e8c <_strtod_l+0x184>
   d8f92:	f04f 0c00 	mov.w	ip, #0
   d8f96:	f108 0302 	add.w	r3, r8, #2
   d8f9a:	931d      	str	r3, [sp, #116]	; 0x74
   d8f9c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d8fa0:	e785      	b.n	d8eae <_strtod_l+0x1a6>
   d8fa2:	f04f 0c01 	mov.w	ip, #1
   d8fa6:	e7f6      	b.n	d8f96 <_strtod_l+0x28e>
   d8fa8:	000db3cc 	.word	0x000db3cc
   d8fac:	000db274 	.word	0x000db274
   d8fb0:	7ff00000 	.word	0x7ff00000
   d8fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fb6:	1c59      	adds	r1, r3, #1
   d8fb8:	911d      	str	r1, [sp, #116]	; 0x74
   d8fba:	785b      	ldrb	r3, [r3, #1]
   d8fbc:	2b30      	cmp	r3, #48	; 0x30
   d8fbe:	d0f9      	beq.n	d8fb4 <_strtod_l+0x2ac>
   d8fc0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d8fc4:	2908      	cmp	r1, #8
   d8fc6:	f63f af79 	bhi.w	d8ebc <_strtod_l+0x1b4>
   d8fca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8fce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fd0:	9308      	str	r3, [sp, #32]
   d8fd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fd4:	1c59      	adds	r1, r3, #1
   d8fd6:	911d      	str	r1, [sp, #116]	; 0x74
   d8fd8:	785b      	ldrb	r3, [r3, #1]
   d8fda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8fde:	2e09      	cmp	r6, #9
   d8fe0:	d937      	bls.n	d9052 <_strtod_l+0x34a>
   d8fe2:	9e08      	ldr	r6, [sp, #32]
   d8fe4:	1b89      	subs	r1, r1, r6
   d8fe6:	2908      	cmp	r1, #8
   d8fe8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d8fec:	dc02      	bgt.n	d8ff4 <_strtod_l+0x2ec>
   d8fee:	4576      	cmp	r6, lr
   d8ff0:	bfa8      	it	ge
   d8ff2:	4676      	movge	r6, lr
   d8ff4:	f1bc 0f00 	cmp.w	ip, #0
   d8ff8:	d000      	beq.n	d8ffc <_strtod_l+0x2f4>
   d8ffa:	4276      	negs	r6, r6
   d8ffc:	2d00      	cmp	r5, #0
   d8ffe:	d14f      	bne.n	d90a0 <_strtod_l+0x398>
   d9000:	9904      	ldr	r1, [sp, #16]
   d9002:	4301      	orrs	r1, r0
   d9004:	f47f aec2 	bne.w	d8d8c <_strtod_l+0x84>
   d9008:	2a00      	cmp	r2, #0
   d900a:	f47f aedb 	bne.w	d8dc4 <_strtod_l+0xbc>
   d900e:	2b69      	cmp	r3, #105	; 0x69
   d9010:	d027      	beq.n	d9062 <_strtod_l+0x35a>
   d9012:	dc24      	bgt.n	d905e <_strtod_l+0x356>
   d9014:	2b49      	cmp	r3, #73	; 0x49
   d9016:	d024      	beq.n	d9062 <_strtod_l+0x35a>
   d9018:	2b4e      	cmp	r3, #78	; 0x4e
   d901a:	f47f aed3 	bne.w	d8dc4 <_strtod_l+0xbc>
   d901e:	499e      	ldr	r1, [pc, #632]	; (d9298 <_strtod_l+0x590>)
   d9020:	a81d      	add	r0, sp, #116	; 0x74
   d9022:	f000 ffb9 	bl	d9f98 <__match>
   d9026:	2800      	cmp	r0, #0
   d9028:	f43f aecc 	beq.w	d8dc4 <_strtod_l+0xbc>
   d902c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d902e:	781b      	ldrb	r3, [r3, #0]
   d9030:	2b28      	cmp	r3, #40	; 0x28
   d9032:	d12d      	bne.n	d9090 <_strtod_l+0x388>
   d9034:	4999      	ldr	r1, [pc, #612]	; (d929c <_strtod_l+0x594>)
   d9036:	aa20      	add	r2, sp, #128	; 0x80
   d9038:	a81d      	add	r0, sp, #116	; 0x74
   d903a:	f000 ffc1 	bl	d9fc0 <__hexnan>
   d903e:	2805      	cmp	r0, #5
   d9040:	d126      	bne.n	d9090 <_strtod_l+0x388>
   d9042:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9044:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9048:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d904c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9050:	e69c      	b.n	d8d8c <_strtod_l+0x84>
   d9052:	210a      	movs	r1, #10
   d9054:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9058:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d905c:	e7b9      	b.n	d8fd2 <_strtod_l+0x2ca>
   d905e:	2b6e      	cmp	r3, #110	; 0x6e
   d9060:	e7db      	b.n	d901a <_strtod_l+0x312>
   d9062:	498f      	ldr	r1, [pc, #572]	; (d92a0 <_strtod_l+0x598>)
   d9064:	a81d      	add	r0, sp, #116	; 0x74
   d9066:	f000 ff97 	bl	d9f98 <__match>
   d906a:	2800      	cmp	r0, #0
   d906c:	f43f aeaa 	beq.w	d8dc4 <_strtod_l+0xbc>
   d9070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9072:	498c      	ldr	r1, [pc, #560]	; (d92a4 <_strtod_l+0x59c>)
   d9074:	3b01      	subs	r3, #1
   d9076:	a81d      	add	r0, sp, #116	; 0x74
   d9078:	931d      	str	r3, [sp, #116]	; 0x74
   d907a:	f000 ff8d 	bl	d9f98 <__match>
   d907e:	b910      	cbnz	r0, d9086 <_strtod_l+0x37e>
   d9080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9082:	3301      	adds	r3, #1
   d9084:	931d      	str	r3, [sp, #116]	; 0x74
   d9086:	f8df b22c 	ldr.w	fp, [pc, #556]	; d92b4 <_strtod_l+0x5ac>
   d908a:	f04f 0a00 	mov.w	sl, #0
   d908e:	e67d      	b.n	d8d8c <_strtod_l+0x84>
   d9090:	4885      	ldr	r0, [pc, #532]	; (d92a8 <_strtod_l+0x5a0>)
   d9092:	f001 fc91 	bl	da9b8 <nan>
   d9096:	ed8d 0b04 	vstr	d0, [sp, #16]
   d909a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d909e:	e675      	b.n	d8d8c <_strtod_l+0x84>
   d90a0:	9b07      	ldr	r3, [sp, #28]
   d90a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d90a4:	1af3      	subs	r3, r6, r3
   d90a6:	2f00      	cmp	r7, #0
   d90a8:	bf08      	it	eq
   d90aa:	462f      	moveq	r7, r5
   d90ac:	2d10      	cmp	r5, #16
   d90ae:	9308      	str	r3, [sp, #32]
   d90b0:	46a8      	mov	r8, r5
   d90b2:	bfa8      	it	ge
   d90b4:	f04f 0810 	movge.w	r8, #16
   d90b8:	f7ff f96a 	bl	d8390 <__aeabi_ui2d>
   d90bc:	2d09      	cmp	r5, #9
   d90be:	4682      	mov	sl, r0
   d90c0:	468b      	mov	fp, r1
   d90c2:	dd13      	ble.n	d90ec <_strtod_l+0x3e4>
   d90c4:	4b79      	ldr	r3, [pc, #484]	; (d92ac <_strtod_l+0x5a4>)
   d90c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d90ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d90ce:	f7ff f9d9 	bl	d8484 <__aeabi_dmul>
   d90d2:	4682      	mov	sl, r0
   d90d4:	4648      	mov	r0, r9
   d90d6:	468b      	mov	fp, r1
   d90d8:	f7ff f95a 	bl	d8390 <__aeabi_ui2d>
   d90dc:	4602      	mov	r2, r0
   d90de:	460b      	mov	r3, r1
   d90e0:	4650      	mov	r0, sl
   d90e2:	4659      	mov	r1, fp
   d90e4:	f7ff f818 	bl	d8118 <__adddf3>
   d90e8:	4682      	mov	sl, r0
   d90ea:	468b      	mov	fp, r1
   d90ec:	2d0f      	cmp	r5, #15
   d90ee:	dc38      	bgt.n	d9162 <_strtod_l+0x45a>
   d90f0:	9b08      	ldr	r3, [sp, #32]
   d90f2:	2b00      	cmp	r3, #0
   d90f4:	f43f ae4a 	beq.w	d8d8c <_strtod_l+0x84>
   d90f8:	dd24      	ble.n	d9144 <_strtod_l+0x43c>
   d90fa:	2b16      	cmp	r3, #22
   d90fc:	dc0b      	bgt.n	d9116 <_strtod_l+0x40e>
   d90fe:	4d6b      	ldr	r5, [pc, #428]	; (d92ac <_strtod_l+0x5a4>)
   d9100:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9104:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9108:	4652      	mov	r2, sl
   d910a:	465b      	mov	r3, fp
   d910c:	f7ff f9ba 	bl	d8484 <__aeabi_dmul>
   d9110:	4682      	mov	sl, r0
   d9112:	468b      	mov	fp, r1
   d9114:	e63a      	b.n	d8d8c <_strtod_l+0x84>
   d9116:	9a08      	ldr	r2, [sp, #32]
   d9118:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d911c:	4293      	cmp	r3, r2
   d911e:	db20      	blt.n	d9162 <_strtod_l+0x45a>
   d9120:	4c62      	ldr	r4, [pc, #392]	; (d92ac <_strtod_l+0x5a4>)
   d9122:	f1c5 050f 	rsb	r5, r5, #15
   d9126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d912a:	4652      	mov	r2, sl
   d912c:	465b      	mov	r3, fp
   d912e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9132:	f7ff f9a7 	bl	d8484 <__aeabi_dmul>
   d9136:	9b08      	ldr	r3, [sp, #32]
   d9138:	1b5d      	subs	r5, r3, r5
   d913a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d913e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9142:	e7e3      	b.n	d910c <_strtod_l+0x404>
   d9144:	9b08      	ldr	r3, [sp, #32]
   d9146:	3316      	adds	r3, #22
   d9148:	db0b      	blt.n	d9162 <_strtod_l+0x45a>
   d914a:	9b07      	ldr	r3, [sp, #28]
   d914c:	4a57      	ldr	r2, [pc, #348]	; (d92ac <_strtod_l+0x5a4>)
   d914e:	1b9e      	subs	r6, r3, r6
   d9150:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9154:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9158:	4650      	mov	r0, sl
   d915a:	4659      	mov	r1, fp
   d915c:	f7ff fabc 	bl	d86d8 <__aeabi_ddiv>
   d9160:	e7d6      	b.n	d9110 <_strtod_l+0x408>
   d9162:	9b08      	ldr	r3, [sp, #32]
   d9164:	eba5 0808 	sub.w	r8, r5, r8
   d9168:	4498      	add	r8, r3
   d916a:	f1b8 0f00 	cmp.w	r8, #0
   d916e:	dd71      	ble.n	d9254 <_strtod_l+0x54c>
   d9170:	f018 030f 	ands.w	r3, r8, #15
   d9174:	d00a      	beq.n	d918c <_strtod_l+0x484>
   d9176:	494d      	ldr	r1, [pc, #308]	; (d92ac <_strtod_l+0x5a4>)
   d9178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d917c:	4652      	mov	r2, sl
   d917e:	465b      	mov	r3, fp
   d9180:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9184:	f7ff f97e 	bl	d8484 <__aeabi_dmul>
   d9188:	4682      	mov	sl, r0
   d918a:	468b      	mov	fp, r1
   d918c:	f038 080f 	bics.w	r8, r8, #15
   d9190:	d04d      	beq.n	d922e <_strtod_l+0x526>
   d9192:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9196:	dd22      	ble.n	d91de <_strtod_l+0x4d6>
   d9198:	2500      	movs	r5, #0
   d919a:	462e      	mov	r6, r5
   d919c:	9509      	str	r5, [sp, #36]	; 0x24
   d919e:	9507      	str	r5, [sp, #28]
   d91a0:	2322      	movs	r3, #34	; 0x22
   d91a2:	f8df b110 	ldr.w	fp, [pc, #272]	; d92b4 <_strtod_l+0x5ac>
   d91a6:	6023      	str	r3, [r4, #0]
   d91a8:	f04f 0a00 	mov.w	sl, #0
   d91ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d91ae:	2b00      	cmp	r3, #0
   d91b0:	f43f adec 	beq.w	d8d8c <_strtod_l+0x84>
   d91b4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d91b6:	4620      	mov	r0, r4
   d91b8:	f000 ffe4 	bl	da184 <_Bfree>
   d91bc:	9907      	ldr	r1, [sp, #28]
   d91be:	4620      	mov	r0, r4
   d91c0:	f000 ffe0 	bl	da184 <_Bfree>
   d91c4:	4631      	mov	r1, r6
   d91c6:	4620      	mov	r0, r4
   d91c8:	f000 ffdc 	bl	da184 <_Bfree>
   d91cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d91ce:	4620      	mov	r0, r4
   d91d0:	f000 ffd8 	bl	da184 <_Bfree>
   d91d4:	4629      	mov	r1, r5
   d91d6:	4620      	mov	r0, r4
   d91d8:	f000 ffd4 	bl	da184 <_Bfree>
   d91dc:	e5d6      	b.n	d8d8c <_strtod_l+0x84>
   d91de:	2300      	movs	r3, #0
   d91e0:	ea4f 1828 	mov.w	r8, r8, asr #4
   d91e4:	4650      	mov	r0, sl
   d91e6:	4659      	mov	r1, fp
   d91e8:	4699      	mov	r9, r3
   d91ea:	f1b8 0f01 	cmp.w	r8, #1
   d91ee:	dc21      	bgt.n	d9234 <_strtod_l+0x52c>
   d91f0:	b10b      	cbz	r3, d91f6 <_strtod_l+0x4ee>
   d91f2:	4682      	mov	sl, r0
   d91f4:	468b      	mov	fp, r1
   d91f6:	4b2e      	ldr	r3, [pc, #184]	; (d92b0 <_strtod_l+0x5a8>)
   d91f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d91fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9200:	4652      	mov	r2, sl
   d9202:	465b      	mov	r3, fp
   d9204:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9208:	f7ff f93c 	bl	d8484 <__aeabi_dmul>
   d920c:	4b29      	ldr	r3, [pc, #164]	; (d92b4 <_strtod_l+0x5ac>)
   d920e:	460a      	mov	r2, r1
   d9210:	400b      	ands	r3, r1
   d9212:	4929      	ldr	r1, [pc, #164]	; (d92b8 <_strtod_l+0x5b0>)
   d9214:	428b      	cmp	r3, r1
   d9216:	4682      	mov	sl, r0
   d9218:	d8be      	bhi.n	d9198 <_strtod_l+0x490>
   d921a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d921e:	428b      	cmp	r3, r1
   d9220:	bf86      	itte	hi
   d9222:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d92bc <_strtod_l+0x5b4>
   d9226:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d922a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d922e:	2300      	movs	r3, #0
   d9230:	9304      	str	r3, [sp, #16]
   d9232:	e081      	b.n	d9338 <_strtod_l+0x630>
   d9234:	f018 0f01 	tst.w	r8, #1
   d9238:	d007      	beq.n	d924a <_strtod_l+0x542>
   d923a:	4b1d      	ldr	r3, [pc, #116]	; (d92b0 <_strtod_l+0x5a8>)
   d923c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9240:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9244:	f7ff f91e 	bl	d8484 <__aeabi_dmul>
   d9248:	2301      	movs	r3, #1
   d924a:	f109 0901 	add.w	r9, r9, #1
   d924e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9252:	e7ca      	b.n	d91ea <_strtod_l+0x4e2>
   d9254:	d0eb      	beq.n	d922e <_strtod_l+0x526>
   d9256:	f1c8 0800 	rsb	r8, r8, #0
   d925a:	f018 020f 	ands.w	r2, r8, #15
   d925e:	d00a      	beq.n	d9276 <_strtod_l+0x56e>
   d9260:	4b12      	ldr	r3, [pc, #72]	; (d92ac <_strtod_l+0x5a4>)
   d9262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9266:	4650      	mov	r0, sl
   d9268:	4659      	mov	r1, fp
   d926a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d926e:	f7ff fa33 	bl	d86d8 <__aeabi_ddiv>
   d9272:	4682      	mov	sl, r0
   d9274:	468b      	mov	fp, r1
   d9276:	ea5f 1828 	movs.w	r8, r8, asr #4
   d927a:	d0d8      	beq.n	d922e <_strtod_l+0x526>
   d927c:	f1b8 0f1f 	cmp.w	r8, #31
   d9280:	dd1e      	ble.n	d92c0 <_strtod_l+0x5b8>
   d9282:	2500      	movs	r5, #0
   d9284:	462e      	mov	r6, r5
   d9286:	9509      	str	r5, [sp, #36]	; 0x24
   d9288:	9507      	str	r5, [sp, #28]
   d928a:	2322      	movs	r3, #34	; 0x22
   d928c:	f04f 0a00 	mov.w	sl, #0
   d9290:	f04f 0b00 	mov.w	fp, #0
   d9294:	6023      	str	r3, [r4, #0]
   d9296:	e789      	b.n	d91ac <_strtod_l+0x4a4>
   d9298:	000db26f 	.word	0x000db26f
   d929c:	000db288 	.word	0x000db288
   d92a0:	000db266 	.word	0x000db266
   d92a4:	000db269 	.word	0x000db269
   d92a8:	000db22c 	.word	0x000db22c
   d92ac:	000db408 	.word	0x000db408
   d92b0:	000db3e0 	.word	0x000db3e0
   d92b4:	7ff00000 	.word	0x7ff00000
   d92b8:	7ca00000 	.word	0x7ca00000
   d92bc:	7fefffff 	.word	0x7fefffff
   d92c0:	f018 0310 	ands.w	r3, r8, #16
   d92c4:	bf18      	it	ne
   d92c6:	236a      	movne	r3, #106	; 0x6a
   d92c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9680 <_strtod_l+0x978>
   d92cc:	9304      	str	r3, [sp, #16]
   d92ce:	4650      	mov	r0, sl
   d92d0:	4659      	mov	r1, fp
   d92d2:	2300      	movs	r3, #0
   d92d4:	f018 0f01 	tst.w	r8, #1
   d92d8:	d004      	beq.n	d92e4 <_strtod_l+0x5dc>
   d92da:	e9d9 2300 	ldrd	r2, r3, [r9]
   d92de:	f7ff f8d1 	bl	d8484 <__aeabi_dmul>
   d92e2:	2301      	movs	r3, #1
   d92e4:	ea5f 0868 	movs.w	r8, r8, asr #1
   d92e8:	f109 0908 	add.w	r9, r9, #8
   d92ec:	d1f2      	bne.n	d92d4 <_strtod_l+0x5cc>
   d92ee:	b10b      	cbz	r3, d92f4 <_strtod_l+0x5ec>
   d92f0:	4682      	mov	sl, r0
   d92f2:	468b      	mov	fp, r1
   d92f4:	9b04      	ldr	r3, [sp, #16]
   d92f6:	b1bb      	cbz	r3, d9328 <_strtod_l+0x620>
   d92f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d92fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9300:	2b00      	cmp	r3, #0
   d9302:	4659      	mov	r1, fp
   d9304:	dd10      	ble.n	d9328 <_strtod_l+0x620>
   d9306:	2b1f      	cmp	r3, #31
   d9308:	f340 8128 	ble.w	d955c <_strtod_l+0x854>
   d930c:	2b34      	cmp	r3, #52	; 0x34
   d930e:	bfde      	ittt	le
   d9310:	3b20      	suble	r3, #32
   d9312:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9316:	fa02 f303 	lslle.w	r3, r2, r3
   d931a:	f04f 0a00 	mov.w	sl, #0
   d931e:	bfcc      	ite	gt
   d9320:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9324:	ea03 0b01 	andle.w	fp, r3, r1
   d9328:	2200      	movs	r2, #0
   d932a:	2300      	movs	r3, #0
   d932c:	4650      	mov	r0, sl
   d932e:	4659      	mov	r1, fp
   d9330:	f7ff fb10 	bl	d8954 <__aeabi_dcmpeq>
   d9334:	2800      	cmp	r0, #0
   d9336:	d1a4      	bne.n	d9282 <_strtod_l+0x57a>
   d9338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d933a:	9300      	str	r3, [sp, #0]
   d933c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d933e:	462b      	mov	r3, r5
   d9340:	463a      	mov	r2, r7
   d9342:	4620      	mov	r0, r4
   d9344:	f000 ff73 	bl	da22e <__s2b>
   d9348:	9009      	str	r0, [sp, #36]	; 0x24
   d934a:	2800      	cmp	r0, #0
   d934c:	f43f af24 	beq.w	d9198 <_strtod_l+0x490>
   d9350:	9b07      	ldr	r3, [sp, #28]
   d9352:	1b9e      	subs	r6, r3, r6
   d9354:	9b08      	ldr	r3, [sp, #32]
   d9356:	2b00      	cmp	r3, #0
   d9358:	bfb4      	ite	lt
   d935a:	4633      	movlt	r3, r6
   d935c:	2300      	movge	r3, #0
   d935e:	9310      	str	r3, [sp, #64]	; 0x40
   d9360:	9b08      	ldr	r3, [sp, #32]
   d9362:	2500      	movs	r5, #0
   d9364:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9368:	9318      	str	r3, [sp, #96]	; 0x60
   d936a:	462e      	mov	r6, r5
   d936c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d936e:	4620      	mov	r0, r4
   d9370:	6859      	ldr	r1, [r3, #4]
   d9372:	f000 fed3 	bl	da11c <_Balloc>
   d9376:	9007      	str	r0, [sp, #28]
   d9378:	2800      	cmp	r0, #0
   d937a:	f43f af11 	beq.w	d91a0 <_strtod_l+0x498>
   d937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9380:	691a      	ldr	r2, [r3, #16]
   d9382:	3202      	adds	r2, #2
   d9384:	f103 010c 	add.w	r1, r3, #12
   d9388:	0092      	lsls	r2, r2, #2
   d938a:	300c      	adds	r0, #12
   d938c:	f7ff fbf0 	bl	d8b70 <memcpy>
   d9390:	ec4b ab10 	vmov	d0, sl, fp
   d9394:	aa20      	add	r2, sp, #128	; 0x80
   d9396:	a91f      	add	r1, sp, #124	; 0x7c
   d9398:	4620      	mov	r0, r4
   d939a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d939e:	f001 fa35 	bl	da80c <__d2b>
   d93a2:	901e      	str	r0, [sp, #120]	; 0x78
   d93a4:	2800      	cmp	r0, #0
   d93a6:	f43f aefb 	beq.w	d91a0 <_strtod_l+0x498>
   d93aa:	2101      	movs	r1, #1
   d93ac:	4620      	mov	r0, r4
   d93ae:	f000 ffcc 	bl	da34a <__i2b>
   d93b2:	4606      	mov	r6, r0
   d93b4:	2800      	cmp	r0, #0
   d93b6:	f43f aef3 	beq.w	d91a0 <_strtod_l+0x498>
   d93ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d93bc:	9904      	ldr	r1, [sp, #16]
   d93be:	2b00      	cmp	r3, #0
   d93c0:	bfab      	itete	ge
   d93c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d93c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d93c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d93c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d93cc:	bfac      	ite	ge
   d93ce:	eb03 0902 	addge.w	r9, r3, r2
   d93d2:	1ad7      	sublt	r7, r2, r3
   d93d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d93d6:	eba3 0801 	sub.w	r8, r3, r1
   d93da:	4490      	add	r8, r2
   d93dc:	4ba3      	ldr	r3, [pc, #652]	; (d966c <_strtod_l+0x964>)
   d93de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d93e2:	4598      	cmp	r8, r3
   d93e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d93e8:	f280 80cc 	bge.w	d9584 <_strtod_l+0x87c>
   d93ec:	eba3 0308 	sub.w	r3, r3, r8
   d93f0:	2b1f      	cmp	r3, #31
   d93f2:	eba2 0203 	sub.w	r2, r2, r3
   d93f6:	f04f 0101 	mov.w	r1, #1
   d93fa:	f300 80b6 	bgt.w	d956a <_strtod_l+0x862>
   d93fe:	fa01 f303 	lsl.w	r3, r1, r3
   d9402:	9311      	str	r3, [sp, #68]	; 0x44
   d9404:	2300      	movs	r3, #0
   d9406:	930c      	str	r3, [sp, #48]	; 0x30
   d9408:	eb09 0802 	add.w	r8, r9, r2
   d940c:	9b04      	ldr	r3, [sp, #16]
   d940e:	45c1      	cmp	r9, r8
   d9410:	4417      	add	r7, r2
   d9412:	441f      	add	r7, r3
   d9414:	464b      	mov	r3, r9
   d9416:	bfa8      	it	ge
   d9418:	4643      	movge	r3, r8
   d941a:	42bb      	cmp	r3, r7
   d941c:	bfa8      	it	ge
   d941e:	463b      	movge	r3, r7
   d9420:	2b00      	cmp	r3, #0
   d9422:	bfc2      	ittt	gt
   d9424:	eba8 0803 	subgt.w	r8, r8, r3
   d9428:	1aff      	subgt	r7, r7, r3
   d942a:	eba9 0903 	subgt.w	r9, r9, r3
   d942e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9430:	2b00      	cmp	r3, #0
   d9432:	dd17      	ble.n	d9464 <_strtod_l+0x75c>
   d9434:	4631      	mov	r1, r6
   d9436:	461a      	mov	r2, r3
   d9438:	4620      	mov	r0, r4
   d943a:	f001 f82b 	bl	da494 <__pow5mult>
   d943e:	4606      	mov	r6, r0
   d9440:	2800      	cmp	r0, #0
   d9442:	f43f aead 	beq.w	d91a0 <_strtod_l+0x498>
   d9446:	4601      	mov	r1, r0
   d9448:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d944a:	4620      	mov	r0, r4
   d944c:	f000 ff86 	bl	da35c <__multiply>
   d9450:	900f      	str	r0, [sp, #60]	; 0x3c
   d9452:	2800      	cmp	r0, #0
   d9454:	f43f aea4 	beq.w	d91a0 <_strtod_l+0x498>
   d9458:	991e      	ldr	r1, [sp, #120]	; 0x78
   d945a:	4620      	mov	r0, r4
   d945c:	f000 fe92 	bl	da184 <_Bfree>
   d9460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9462:	931e      	str	r3, [sp, #120]	; 0x78
   d9464:	f1b8 0f00 	cmp.w	r8, #0
   d9468:	f300 8091 	bgt.w	d958e <_strtod_l+0x886>
   d946c:	9b08      	ldr	r3, [sp, #32]
   d946e:	2b00      	cmp	r3, #0
   d9470:	dd08      	ble.n	d9484 <_strtod_l+0x77c>
   d9472:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9474:	9907      	ldr	r1, [sp, #28]
   d9476:	4620      	mov	r0, r4
   d9478:	f001 f80c 	bl	da494 <__pow5mult>
   d947c:	9007      	str	r0, [sp, #28]
   d947e:	2800      	cmp	r0, #0
   d9480:	f43f ae8e 	beq.w	d91a0 <_strtod_l+0x498>
   d9484:	2f00      	cmp	r7, #0
   d9486:	dd08      	ble.n	d949a <_strtod_l+0x792>
   d9488:	9907      	ldr	r1, [sp, #28]
   d948a:	463a      	mov	r2, r7
   d948c:	4620      	mov	r0, r4
   d948e:	f001 f84f 	bl	da530 <__lshift>
   d9492:	9007      	str	r0, [sp, #28]
   d9494:	2800      	cmp	r0, #0
   d9496:	f43f ae83 	beq.w	d91a0 <_strtod_l+0x498>
   d949a:	f1b9 0f00 	cmp.w	r9, #0
   d949e:	dd08      	ble.n	d94b2 <_strtod_l+0x7aa>
   d94a0:	4631      	mov	r1, r6
   d94a2:	464a      	mov	r2, r9
   d94a4:	4620      	mov	r0, r4
   d94a6:	f001 f843 	bl	da530 <__lshift>
   d94aa:	4606      	mov	r6, r0
   d94ac:	2800      	cmp	r0, #0
   d94ae:	f43f ae77 	beq.w	d91a0 <_strtod_l+0x498>
   d94b2:	9a07      	ldr	r2, [sp, #28]
   d94b4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d94b6:	4620      	mov	r0, r4
   d94b8:	f001 f8b5 	bl	da626 <__mdiff>
   d94bc:	4605      	mov	r5, r0
   d94be:	2800      	cmp	r0, #0
   d94c0:	f43f ae6e 	beq.w	d91a0 <_strtod_l+0x498>
   d94c4:	68c3      	ldr	r3, [r0, #12]
   d94c6:	930f      	str	r3, [sp, #60]	; 0x3c
   d94c8:	2300      	movs	r3, #0
   d94ca:	60c3      	str	r3, [r0, #12]
   d94cc:	4631      	mov	r1, r6
   d94ce:	f001 f88e 	bl	da5ee <__mcmp>
   d94d2:	2800      	cmp	r0, #0
   d94d4:	da65      	bge.n	d95a2 <_strtod_l+0x89a>
   d94d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d94d8:	ea53 030a 	orrs.w	r3, r3, sl
   d94dc:	f040 8087 	bne.w	d95ee <_strtod_l+0x8e6>
   d94e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d94e4:	2b00      	cmp	r3, #0
   d94e6:	f040 8082 	bne.w	d95ee <_strtod_l+0x8e6>
   d94ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d94ee:	0d1b      	lsrs	r3, r3, #20
   d94f0:	051b      	lsls	r3, r3, #20
   d94f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d94f6:	d97a      	bls.n	d95ee <_strtod_l+0x8e6>
   d94f8:	696b      	ldr	r3, [r5, #20]
   d94fa:	b913      	cbnz	r3, d9502 <_strtod_l+0x7fa>
   d94fc:	692b      	ldr	r3, [r5, #16]
   d94fe:	2b01      	cmp	r3, #1
   d9500:	dd75      	ble.n	d95ee <_strtod_l+0x8e6>
   d9502:	4629      	mov	r1, r5
   d9504:	2201      	movs	r2, #1
   d9506:	4620      	mov	r0, r4
   d9508:	f001 f812 	bl	da530 <__lshift>
   d950c:	4631      	mov	r1, r6
   d950e:	4605      	mov	r5, r0
   d9510:	f001 f86d 	bl	da5ee <__mcmp>
   d9514:	2800      	cmp	r0, #0
   d9516:	dd6a      	ble.n	d95ee <_strtod_l+0x8e6>
   d9518:	9904      	ldr	r1, [sp, #16]
   d951a:	4a55      	ldr	r2, [pc, #340]	; (d9670 <_strtod_l+0x968>)
   d951c:	465b      	mov	r3, fp
   d951e:	2900      	cmp	r1, #0
   d9520:	f000 8085 	beq.w	d962e <_strtod_l+0x926>
   d9524:	ea02 010b 	and.w	r1, r2, fp
   d9528:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d952c:	dc7f      	bgt.n	d962e <_strtod_l+0x926>
   d952e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9532:	f77f aeaa 	ble.w	d928a <_strtod_l+0x582>
   d9536:	4a4f      	ldr	r2, [pc, #316]	; (d9674 <_strtod_l+0x96c>)
   d9538:	2300      	movs	r3, #0
   d953a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d953e:	4650      	mov	r0, sl
   d9540:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9544:	4659      	mov	r1, fp
   d9546:	f7fe ff9d 	bl	d8484 <__aeabi_dmul>
   d954a:	460b      	mov	r3, r1
   d954c:	4303      	orrs	r3, r0
   d954e:	bf08      	it	eq
   d9550:	2322      	moveq	r3, #34	; 0x22
   d9552:	4682      	mov	sl, r0
   d9554:	468b      	mov	fp, r1
   d9556:	bf08      	it	eq
   d9558:	6023      	streq	r3, [r4, #0]
   d955a:	e62b      	b.n	d91b4 <_strtod_l+0x4ac>
   d955c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9560:	fa02 f303 	lsl.w	r3, r2, r3
   d9564:	ea03 0a0a 	and.w	sl, r3, sl
   d9568:	e6de      	b.n	d9328 <_strtod_l+0x620>
   d956a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d956e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9572:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9576:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d957a:	fa01 f308 	lsl.w	r3, r1, r8
   d957e:	930c      	str	r3, [sp, #48]	; 0x30
   d9580:	9111      	str	r1, [sp, #68]	; 0x44
   d9582:	e741      	b.n	d9408 <_strtod_l+0x700>
   d9584:	2300      	movs	r3, #0
   d9586:	930c      	str	r3, [sp, #48]	; 0x30
   d9588:	2301      	movs	r3, #1
   d958a:	9311      	str	r3, [sp, #68]	; 0x44
   d958c:	e73c      	b.n	d9408 <_strtod_l+0x700>
   d958e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9590:	4642      	mov	r2, r8
   d9592:	4620      	mov	r0, r4
   d9594:	f000 ffcc 	bl	da530 <__lshift>
   d9598:	901e      	str	r0, [sp, #120]	; 0x78
   d959a:	2800      	cmp	r0, #0
   d959c:	f47f af66 	bne.w	d946c <_strtod_l+0x764>
   d95a0:	e5fe      	b.n	d91a0 <_strtod_l+0x498>
   d95a2:	465f      	mov	r7, fp
   d95a4:	d16e      	bne.n	d9684 <_strtod_l+0x97c>
   d95a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d95a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d95ac:	b342      	cbz	r2, d9600 <_strtod_l+0x8f8>
   d95ae:	4a32      	ldr	r2, [pc, #200]	; (d9678 <_strtod_l+0x970>)
   d95b0:	4293      	cmp	r3, r2
   d95b2:	d128      	bne.n	d9606 <_strtod_l+0x8fe>
   d95b4:	9b04      	ldr	r3, [sp, #16]
   d95b6:	4650      	mov	r0, sl
   d95b8:	b1eb      	cbz	r3, d95f6 <_strtod_l+0x8ee>
   d95ba:	4a2d      	ldr	r2, [pc, #180]	; (d9670 <_strtod_l+0x968>)
   d95bc:	403a      	ands	r2, r7
   d95be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d95c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d95c6:	d819      	bhi.n	d95fc <_strtod_l+0x8f4>
   d95c8:	0d12      	lsrs	r2, r2, #20
   d95ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d95ce:	fa01 f303 	lsl.w	r3, r1, r3
   d95d2:	4298      	cmp	r0, r3
   d95d4:	d117      	bne.n	d9606 <_strtod_l+0x8fe>
   d95d6:	4b29      	ldr	r3, [pc, #164]	; (d967c <_strtod_l+0x974>)
   d95d8:	429f      	cmp	r7, r3
   d95da:	d102      	bne.n	d95e2 <_strtod_l+0x8da>
   d95dc:	3001      	adds	r0, #1
   d95de:	f43f addf 	beq.w	d91a0 <_strtod_l+0x498>
   d95e2:	4b23      	ldr	r3, [pc, #140]	; (d9670 <_strtod_l+0x968>)
   d95e4:	403b      	ands	r3, r7
   d95e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d95ea:	f04f 0a00 	mov.w	sl, #0
   d95ee:	9b04      	ldr	r3, [sp, #16]
   d95f0:	2b00      	cmp	r3, #0
   d95f2:	d1a0      	bne.n	d9536 <_strtod_l+0x82e>
   d95f4:	e5de      	b.n	d91b4 <_strtod_l+0x4ac>
   d95f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d95fa:	e7ea      	b.n	d95d2 <_strtod_l+0x8ca>
   d95fc:	460b      	mov	r3, r1
   d95fe:	e7e8      	b.n	d95d2 <_strtod_l+0x8ca>
   d9600:	ea53 030a 	orrs.w	r3, r3, sl
   d9604:	d088      	beq.n	d9518 <_strtod_l+0x810>
   d9606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9608:	b1db      	cbz	r3, d9642 <_strtod_l+0x93a>
   d960a:	423b      	tst	r3, r7
   d960c:	d0ef      	beq.n	d95ee <_strtod_l+0x8e6>
   d960e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9610:	9a04      	ldr	r2, [sp, #16]
   d9612:	4650      	mov	r0, sl
   d9614:	4659      	mov	r1, fp
   d9616:	b1c3      	cbz	r3, d964a <_strtod_l+0x942>
   d9618:	f7ff fb5a 	bl	d8cd0 <sulp>
   d961c:	4602      	mov	r2, r0
   d961e:	460b      	mov	r3, r1
   d9620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9624:	f7fe fd78 	bl	d8118 <__adddf3>
   d9628:	4682      	mov	sl, r0
   d962a:	468b      	mov	fp, r1
   d962c:	e7df      	b.n	d95ee <_strtod_l+0x8e6>
   d962e:	4013      	ands	r3, r2
   d9630:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9634:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9638:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d963c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9640:	e7d5      	b.n	d95ee <_strtod_l+0x8e6>
   d9642:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9644:	ea13 0f0a 	tst.w	r3, sl
   d9648:	e7e0      	b.n	d960c <_strtod_l+0x904>
   d964a:	f7ff fb41 	bl	d8cd0 <sulp>
   d964e:	4602      	mov	r2, r0
   d9650:	460b      	mov	r3, r1
   d9652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9656:	f7fe fd5d 	bl	d8114 <__aeabi_dsub>
   d965a:	2200      	movs	r2, #0
   d965c:	2300      	movs	r3, #0
   d965e:	4682      	mov	sl, r0
   d9660:	468b      	mov	fp, r1
   d9662:	f7ff f977 	bl	d8954 <__aeabi_dcmpeq>
   d9666:	2800      	cmp	r0, #0
   d9668:	d0c1      	beq.n	d95ee <_strtod_l+0x8e6>
   d966a:	e60e      	b.n	d928a <_strtod_l+0x582>
   d966c:	fffffc02 	.word	0xfffffc02
   d9670:	7ff00000 	.word	0x7ff00000
   d9674:	39500000 	.word	0x39500000
   d9678:	000fffff 	.word	0x000fffff
   d967c:	7fefffff 	.word	0x7fefffff
   d9680:	000db2a0 	.word	0x000db2a0
   d9684:	4631      	mov	r1, r6
   d9686:	4628      	mov	r0, r5
   d9688:	f001 f910 	bl	da8ac <__ratio>
   d968c:	ec59 8b10 	vmov	r8, r9, d0
   d9690:	ee10 0a10 	vmov	r0, s0
   d9694:	2200      	movs	r2, #0
   d9696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d969a:	4649      	mov	r1, r9
   d969c:	f7ff f96e 	bl	d897c <__aeabi_dcmple>
   d96a0:	2800      	cmp	r0, #0
   d96a2:	d07c      	beq.n	d979e <_strtod_l+0xa96>
   d96a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d96a6:	2b00      	cmp	r3, #0
   d96a8:	d04c      	beq.n	d9744 <_strtod_l+0xa3c>
   d96aa:	4b95      	ldr	r3, [pc, #596]	; (d9900 <_strtod_l+0xbf8>)
   d96ac:	2200      	movs	r2, #0
   d96ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d96b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9900 <_strtod_l+0xbf8>
   d96b6:	f04f 0800 	mov.w	r8, #0
   d96ba:	4b92      	ldr	r3, [pc, #584]	; (d9904 <_strtod_l+0xbfc>)
   d96bc:	403b      	ands	r3, r7
   d96be:	9311      	str	r3, [sp, #68]	; 0x44
   d96c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d96c2:	4b91      	ldr	r3, [pc, #580]	; (d9908 <_strtod_l+0xc00>)
   d96c4:	429a      	cmp	r2, r3
   d96c6:	f040 80b2 	bne.w	d982e <_strtod_l+0xb26>
   d96ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d96ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d96d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d96d6:	ec4b ab10 	vmov	d0, sl, fp
   d96da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d96de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d96e2:	f001 f817 	bl	da714 <__ulp>
   d96e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d96ea:	ec53 2b10 	vmov	r2, r3, d0
   d96ee:	f7fe fec9 	bl	d8484 <__aeabi_dmul>
   d96f2:	4652      	mov	r2, sl
   d96f4:	465b      	mov	r3, fp
   d96f6:	f7fe fd0f 	bl	d8118 <__adddf3>
   d96fa:	460b      	mov	r3, r1
   d96fc:	4981      	ldr	r1, [pc, #516]	; (d9904 <_strtod_l+0xbfc>)
   d96fe:	4a83      	ldr	r2, [pc, #524]	; (d990c <_strtod_l+0xc04>)
   d9700:	4019      	ands	r1, r3
   d9702:	4291      	cmp	r1, r2
   d9704:	4682      	mov	sl, r0
   d9706:	d95e      	bls.n	d97c6 <_strtod_l+0xabe>
   d9708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d970a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d970e:	4293      	cmp	r3, r2
   d9710:	d103      	bne.n	d971a <_strtod_l+0xa12>
   d9712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9714:	3301      	adds	r3, #1
   d9716:	f43f ad43 	beq.w	d91a0 <_strtod_l+0x498>
   d971a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9918 <_strtod_l+0xc10>
   d971e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9722:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9724:	4620      	mov	r0, r4
   d9726:	f000 fd2d 	bl	da184 <_Bfree>
   d972a:	9907      	ldr	r1, [sp, #28]
   d972c:	4620      	mov	r0, r4
   d972e:	f000 fd29 	bl	da184 <_Bfree>
   d9732:	4631      	mov	r1, r6
   d9734:	4620      	mov	r0, r4
   d9736:	f000 fd25 	bl	da184 <_Bfree>
   d973a:	4629      	mov	r1, r5
   d973c:	4620      	mov	r0, r4
   d973e:	f000 fd21 	bl	da184 <_Bfree>
   d9742:	e613      	b.n	d936c <_strtod_l+0x664>
   d9744:	f1ba 0f00 	cmp.w	sl, #0
   d9748:	d11b      	bne.n	d9782 <_strtod_l+0xa7a>
   d974a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d974e:	b9f3      	cbnz	r3, d978e <_strtod_l+0xa86>
   d9750:	4b6b      	ldr	r3, [pc, #428]	; (d9900 <_strtod_l+0xbf8>)
   d9752:	2200      	movs	r2, #0
   d9754:	4640      	mov	r0, r8
   d9756:	4649      	mov	r1, r9
   d9758:	f7ff f906 	bl	d8968 <__aeabi_dcmplt>
   d975c:	b9d0      	cbnz	r0, d9794 <_strtod_l+0xa8c>
   d975e:	4640      	mov	r0, r8
   d9760:	4649      	mov	r1, r9
   d9762:	4b6b      	ldr	r3, [pc, #428]	; (d9910 <_strtod_l+0xc08>)
   d9764:	2200      	movs	r2, #0
   d9766:	f7fe fe8d 	bl	d8484 <__aeabi_dmul>
   d976a:	4680      	mov	r8, r0
   d976c:	4689      	mov	r9, r1
   d976e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9772:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9776:	931b      	str	r3, [sp, #108]	; 0x6c
   d9778:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d977c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9780:	e79b      	b.n	d96ba <_strtod_l+0x9b2>
   d9782:	f1ba 0f01 	cmp.w	sl, #1
   d9786:	d102      	bne.n	d978e <_strtod_l+0xa86>
   d9788:	2f00      	cmp	r7, #0
   d978a:	f43f ad7e 	beq.w	d928a <_strtod_l+0x582>
   d978e:	4b61      	ldr	r3, [pc, #388]	; (d9914 <_strtod_l+0xc0c>)
   d9790:	2200      	movs	r2, #0
   d9792:	e78c      	b.n	d96ae <_strtod_l+0x9a6>
   d9794:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9910 <_strtod_l+0xc08>
   d9798:	f04f 0800 	mov.w	r8, #0
   d979c:	e7e7      	b.n	d976e <_strtod_l+0xa66>
   d979e:	4b5c      	ldr	r3, [pc, #368]	; (d9910 <_strtod_l+0xc08>)
   d97a0:	4640      	mov	r0, r8
   d97a2:	4649      	mov	r1, r9
   d97a4:	2200      	movs	r2, #0
   d97a6:	f7fe fe6d 	bl	d8484 <__aeabi_dmul>
   d97aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d97ac:	4680      	mov	r8, r0
   d97ae:	4689      	mov	r9, r1
   d97b0:	b933      	cbnz	r3, d97c0 <_strtod_l+0xab8>
   d97b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d97b6:	9012      	str	r0, [sp, #72]	; 0x48
   d97b8:	9313      	str	r3, [sp, #76]	; 0x4c
   d97ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d97be:	e7dd      	b.n	d977c <_strtod_l+0xa74>
   d97c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d97c4:	e7f9      	b.n	d97ba <_strtod_l+0xab2>
   d97c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d97ca:	9b04      	ldr	r3, [sp, #16]
   d97cc:	2b00      	cmp	r3, #0
   d97ce:	d1a8      	bne.n	d9722 <_strtod_l+0xa1a>
   d97d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d97d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d97d6:	0d1b      	lsrs	r3, r3, #20
   d97d8:	051b      	lsls	r3, r3, #20
   d97da:	429a      	cmp	r2, r3
   d97dc:	d1a1      	bne.n	d9722 <_strtod_l+0xa1a>
   d97de:	4640      	mov	r0, r8
   d97e0:	4649      	mov	r1, r9
   d97e2:	f001 f8ff 	bl	da9e4 <__aeabi_d2lz>
   d97e6:	f7fe fe1f 	bl	d8428 <__aeabi_l2d>
   d97ea:	4602      	mov	r2, r0
   d97ec:	460b      	mov	r3, r1
   d97ee:	4640      	mov	r0, r8
   d97f0:	4649      	mov	r1, r9
   d97f2:	f7fe fc8f 	bl	d8114 <__aeabi_dsub>
   d97f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d97f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d97fc:	ea43 030a 	orr.w	r3, r3, sl
   d9800:	4313      	orrs	r3, r2
   d9802:	4680      	mov	r8, r0
   d9804:	4689      	mov	r9, r1
   d9806:	d053      	beq.n	d98b0 <_strtod_l+0xba8>
   d9808:	a335      	add	r3, pc, #212	; (adr r3, d98e0 <_strtod_l+0xbd8>)
   d980a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d980e:	f7ff f8ab 	bl	d8968 <__aeabi_dcmplt>
   d9812:	2800      	cmp	r0, #0
   d9814:	f47f acce 	bne.w	d91b4 <_strtod_l+0x4ac>
   d9818:	a333      	add	r3, pc, #204	; (adr r3, d98e8 <_strtod_l+0xbe0>)
   d981a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d981e:	4640      	mov	r0, r8
   d9820:	4649      	mov	r1, r9
   d9822:	f7ff f8bf 	bl	d89a4 <__aeabi_dcmpgt>
   d9826:	2800      	cmp	r0, #0
   d9828:	f43f af7b 	beq.w	d9722 <_strtod_l+0xa1a>
   d982c:	e4c2      	b.n	d91b4 <_strtod_l+0x4ac>
   d982e:	9b04      	ldr	r3, [sp, #16]
   d9830:	b333      	cbz	r3, d9880 <_strtod_l+0xb78>
   d9832:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9834:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9838:	d822      	bhi.n	d9880 <_strtod_l+0xb78>
   d983a:	a32d      	add	r3, pc, #180	; (adr r3, d98f0 <_strtod_l+0xbe8>)
   d983c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9840:	4640      	mov	r0, r8
   d9842:	4649      	mov	r1, r9
   d9844:	f7ff f89a 	bl	d897c <__aeabi_dcmple>
   d9848:	b1a0      	cbz	r0, d9874 <_strtod_l+0xb6c>
   d984a:	4649      	mov	r1, r9
   d984c:	4640      	mov	r0, r8
   d984e:	f7ff f8b3 	bl	d89b8 <__aeabi_d2uiz>
   d9852:	2801      	cmp	r0, #1
   d9854:	bf38      	it	cc
   d9856:	2001      	movcc	r0, #1
   d9858:	f7fe fd9a 	bl	d8390 <__aeabi_ui2d>
   d985c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d985e:	4680      	mov	r8, r0
   d9860:	4689      	mov	r9, r1
   d9862:	bb13      	cbnz	r3, d98aa <_strtod_l+0xba2>
   d9864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9868:	9014      	str	r0, [sp, #80]	; 0x50
   d986a:	9315      	str	r3, [sp, #84]	; 0x54
   d986c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9870:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9876:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9878:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d987c:	1a9b      	subs	r3, r3, r2
   d987e:	930d      	str	r3, [sp, #52]	; 0x34
   d9880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9884:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d988c:	f000 ff42 	bl	da714 <__ulp>
   d9890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9894:	ec53 2b10 	vmov	r2, r3, d0
   d9898:	f7fe fdf4 	bl	d8484 <__aeabi_dmul>
   d989c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d98a0:	f7fe fc3a 	bl	d8118 <__adddf3>
   d98a4:	4682      	mov	sl, r0
   d98a6:	468b      	mov	fp, r1
   d98a8:	e78f      	b.n	d97ca <_strtod_l+0xac2>
   d98aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d98ae:	e7dd      	b.n	d986c <_strtod_l+0xb64>
   d98b0:	a311      	add	r3, pc, #68	; (adr r3, d98f8 <_strtod_l+0xbf0>)
   d98b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98b6:	f7ff f857 	bl	d8968 <__aeabi_dcmplt>
   d98ba:	e7b4      	b.n	d9826 <_strtod_l+0xb1e>
   d98bc:	2300      	movs	r3, #0
   d98be:	930e      	str	r3, [sp, #56]	; 0x38
   d98c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d98c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d98c4:	6013      	str	r3, [r2, #0]
   d98c6:	f7ff ba65 	b.w	d8d94 <_strtod_l+0x8c>
   d98ca:	2b65      	cmp	r3, #101	; 0x65
   d98cc:	f43f ab5d 	beq.w	d8f8a <_strtod_l+0x282>
   d98d0:	2b45      	cmp	r3, #69	; 0x45
   d98d2:	f43f ab5a 	beq.w	d8f8a <_strtod_l+0x282>
   d98d6:	2201      	movs	r2, #1
   d98d8:	f7ff bb92 	b.w	d9000 <_strtod_l+0x2f8>
   d98dc:	f3af 8000 	nop.w
   d98e0:	94a03595 	.word	0x94a03595
   d98e4:	3fdfffff 	.word	0x3fdfffff
   d98e8:	35afe535 	.word	0x35afe535
   d98ec:	3fe00000 	.word	0x3fe00000
   d98f0:	ffc00000 	.word	0xffc00000
   d98f4:	41dfffff 	.word	0x41dfffff
   d98f8:	94a03595 	.word	0x94a03595
   d98fc:	3fcfffff 	.word	0x3fcfffff
   d9900:	3ff00000 	.word	0x3ff00000
   d9904:	7ff00000 	.word	0x7ff00000
   d9908:	7fe00000 	.word	0x7fe00000
   d990c:	7c9fffff 	.word	0x7c9fffff
   d9910:	3fe00000 	.word	0x3fe00000
   d9914:	bff00000 	.word	0xbff00000
   d9918:	7fefffff 	.word	0x7fefffff

000d991c <strtod>:
   d991c:	460a      	mov	r2, r1
   d991e:	4601      	mov	r1, r0
   d9920:	4802      	ldr	r0, [pc, #8]	; (d992c <strtod+0x10>)
   d9922:	4b03      	ldr	r3, [pc, #12]	; (d9930 <strtod+0x14>)
   d9924:	6800      	ldr	r0, [r0, #0]
   d9926:	f7ff b9ef 	b.w	d8d08 <_strtod_l>
   d992a:	bf00      	nop
   d992c:	2003e23c 	.word	0x2003e23c
   d9930:	2003e2a4 	.word	0x2003e2a4

000d9934 <_strtol_l.isra.0>:
   d9934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9938:	4e3a      	ldr	r6, [pc, #232]	; (d9a24 <_strtol_l.isra.0+0xf0>)
   d993a:	4686      	mov	lr, r0
   d993c:	468c      	mov	ip, r1
   d993e:	4660      	mov	r0, ip
   d9940:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9944:	5da5      	ldrb	r5, [r4, r6]
   d9946:	f015 0508 	ands.w	r5, r5, #8
   d994a:	d1f8      	bne.n	d993e <_strtol_l.isra.0+0xa>
   d994c:	2c2d      	cmp	r4, #45	; 0x2d
   d994e:	d133      	bne.n	d99b8 <_strtol_l.isra.0+0x84>
   d9950:	f89c 4000 	ldrb.w	r4, [ip]
   d9954:	f04f 0801 	mov.w	r8, #1
   d9958:	f100 0c02 	add.w	ip, r0, #2
   d995c:	2b00      	cmp	r3, #0
   d995e:	d05c      	beq.n	d9a1a <_strtol_l.isra.0+0xe6>
   d9960:	2b10      	cmp	r3, #16
   d9962:	d10c      	bne.n	d997e <_strtol_l.isra.0+0x4a>
   d9964:	2c30      	cmp	r4, #48	; 0x30
   d9966:	d10a      	bne.n	d997e <_strtol_l.isra.0+0x4a>
   d9968:	f89c 0000 	ldrb.w	r0, [ip]
   d996c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9970:	2858      	cmp	r0, #88	; 0x58
   d9972:	d14d      	bne.n	d9a10 <_strtol_l.isra.0+0xdc>
   d9974:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9978:	2310      	movs	r3, #16
   d997a:	f10c 0c02 	add.w	ip, ip, #2
   d997e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9982:	3f01      	subs	r7, #1
   d9984:	2600      	movs	r6, #0
   d9986:	fbb7 f9f3 	udiv	r9, r7, r3
   d998a:	4630      	mov	r0, r6
   d998c:	fb03 7a19 	mls	sl, r3, r9, r7
   d9990:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9994:	2d09      	cmp	r5, #9
   d9996:	d818      	bhi.n	d99ca <_strtol_l.isra.0+0x96>
   d9998:	462c      	mov	r4, r5
   d999a:	42a3      	cmp	r3, r4
   d999c:	dd24      	ble.n	d99e8 <_strtol_l.isra.0+0xb4>
   d999e:	1c75      	adds	r5, r6, #1
   d99a0:	d007      	beq.n	d99b2 <_strtol_l.isra.0+0x7e>
   d99a2:	4581      	cmp	r9, r0
   d99a4:	d31d      	bcc.n	d99e2 <_strtol_l.isra.0+0xae>
   d99a6:	d101      	bne.n	d99ac <_strtol_l.isra.0+0x78>
   d99a8:	45a2      	cmp	sl, r4
   d99aa:	db1a      	blt.n	d99e2 <_strtol_l.isra.0+0xae>
   d99ac:	fb00 4003 	mla	r0, r0, r3, r4
   d99b0:	2601      	movs	r6, #1
   d99b2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d99b6:	e7eb      	b.n	d9990 <_strtol_l.isra.0+0x5c>
   d99b8:	2c2b      	cmp	r4, #43	; 0x2b
   d99ba:	bf08      	it	eq
   d99bc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d99c0:	46a8      	mov	r8, r5
   d99c2:	bf08      	it	eq
   d99c4:	f100 0c02 	addeq.w	ip, r0, #2
   d99c8:	e7c8      	b.n	d995c <_strtol_l.isra.0+0x28>
   d99ca:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d99ce:	2d19      	cmp	r5, #25
   d99d0:	d801      	bhi.n	d99d6 <_strtol_l.isra.0+0xa2>
   d99d2:	3c37      	subs	r4, #55	; 0x37
   d99d4:	e7e1      	b.n	d999a <_strtol_l.isra.0+0x66>
   d99d6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d99da:	2d19      	cmp	r5, #25
   d99dc:	d804      	bhi.n	d99e8 <_strtol_l.isra.0+0xb4>
   d99de:	3c57      	subs	r4, #87	; 0x57
   d99e0:	e7db      	b.n	d999a <_strtol_l.isra.0+0x66>
   d99e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d99e6:	e7e4      	b.n	d99b2 <_strtol_l.isra.0+0x7e>
   d99e8:	1c73      	adds	r3, r6, #1
   d99ea:	d106      	bne.n	d99fa <_strtol_l.isra.0+0xc6>
   d99ec:	2322      	movs	r3, #34	; 0x22
   d99ee:	f8ce 3000 	str.w	r3, [lr]
   d99f2:	4638      	mov	r0, r7
   d99f4:	b942      	cbnz	r2, d9a08 <_strtol_l.isra.0+0xd4>
   d99f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d99fa:	f1b8 0f00 	cmp.w	r8, #0
   d99fe:	d000      	beq.n	d9a02 <_strtol_l.isra.0+0xce>
   d9a00:	4240      	negs	r0, r0
   d9a02:	2a00      	cmp	r2, #0
   d9a04:	d0f7      	beq.n	d99f6 <_strtol_l.isra.0+0xc2>
   d9a06:	b10e      	cbz	r6, d9a0c <_strtol_l.isra.0+0xd8>
   d9a08:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9a0c:	6011      	str	r1, [r2, #0]
   d9a0e:	e7f2      	b.n	d99f6 <_strtol_l.isra.0+0xc2>
   d9a10:	2430      	movs	r4, #48	; 0x30
   d9a12:	2b00      	cmp	r3, #0
   d9a14:	d1b3      	bne.n	d997e <_strtol_l.isra.0+0x4a>
   d9a16:	2308      	movs	r3, #8
   d9a18:	e7b1      	b.n	d997e <_strtol_l.isra.0+0x4a>
   d9a1a:	2c30      	cmp	r4, #48	; 0x30
   d9a1c:	d0a4      	beq.n	d9968 <_strtol_l.isra.0+0x34>
   d9a1e:	230a      	movs	r3, #10
   d9a20:	e7ad      	b.n	d997e <_strtol_l.isra.0+0x4a>
   d9a22:	bf00      	nop
   d9a24:	000db2c9 	.word	0x000db2c9

000d9a28 <strtol>:
   d9a28:	4613      	mov	r3, r2
   d9a2a:	460a      	mov	r2, r1
   d9a2c:	4601      	mov	r1, r0
   d9a2e:	4802      	ldr	r0, [pc, #8]	; (d9a38 <strtol+0x10>)
   d9a30:	6800      	ldr	r0, [r0, #0]
   d9a32:	f7ff bf7f 	b.w	d9934 <_strtol_l.isra.0>
   d9a36:	bf00      	nop
   d9a38:	2003e23c 	.word	0x2003e23c

000d9a3c <rshift>:
   d9a3c:	6903      	ldr	r3, [r0, #16]
   d9a3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9a46:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9a4a:	f100 0414 	add.w	r4, r0, #20
   d9a4e:	dd45      	ble.n	d9adc <rshift+0xa0>
   d9a50:	f011 011f 	ands.w	r1, r1, #31
   d9a54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9a58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9a5c:	d10c      	bne.n	d9a78 <rshift+0x3c>
   d9a5e:	f100 0710 	add.w	r7, r0, #16
   d9a62:	4629      	mov	r1, r5
   d9a64:	42b1      	cmp	r1, r6
   d9a66:	d334      	bcc.n	d9ad2 <rshift+0x96>
   d9a68:	1a9b      	subs	r3, r3, r2
   d9a6a:	009b      	lsls	r3, r3, #2
   d9a6c:	1eea      	subs	r2, r5, #3
   d9a6e:	4296      	cmp	r6, r2
   d9a70:	bf38      	it	cc
   d9a72:	2300      	movcc	r3, #0
   d9a74:	4423      	add	r3, r4
   d9a76:	e015      	b.n	d9aa4 <rshift+0x68>
   d9a78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9a7c:	f1c1 0820 	rsb	r8, r1, #32
   d9a80:	40cf      	lsrs	r7, r1
   d9a82:	f105 0e04 	add.w	lr, r5, #4
   d9a86:	46a1      	mov	r9, r4
   d9a88:	4576      	cmp	r6, lr
   d9a8a:	46f4      	mov	ip, lr
   d9a8c:	d815      	bhi.n	d9aba <rshift+0x7e>
   d9a8e:	1a9b      	subs	r3, r3, r2
   d9a90:	009a      	lsls	r2, r3, #2
   d9a92:	3a04      	subs	r2, #4
   d9a94:	3501      	adds	r5, #1
   d9a96:	42ae      	cmp	r6, r5
   d9a98:	bf38      	it	cc
   d9a9a:	2200      	movcc	r2, #0
   d9a9c:	18a3      	adds	r3, r4, r2
   d9a9e:	50a7      	str	r7, [r4, r2]
   d9aa0:	b107      	cbz	r7, d9aa4 <rshift+0x68>
   d9aa2:	3304      	adds	r3, #4
   d9aa4:	1b1a      	subs	r2, r3, r4
   d9aa6:	42a3      	cmp	r3, r4
   d9aa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9aac:	bf08      	it	eq
   d9aae:	2300      	moveq	r3, #0
   d9ab0:	6102      	str	r2, [r0, #16]
   d9ab2:	bf08      	it	eq
   d9ab4:	6143      	streq	r3, [r0, #20]
   d9ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9aba:	f8dc c000 	ldr.w	ip, [ip]
   d9abe:	fa0c fc08 	lsl.w	ip, ip, r8
   d9ac2:	ea4c 0707 	orr.w	r7, ip, r7
   d9ac6:	f849 7b04 	str.w	r7, [r9], #4
   d9aca:	f85e 7b04 	ldr.w	r7, [lr], #4
   d9ace:	40cf      	lsrs	r7, r1
   d9ad0:	e7da      	b.n	d9a88 <rshift+0x4c>
   d9ad2:	f851 cb04 	ldr.w	ip, [r1], #4
   d9ad6:	f847 cf04 	str.w	ip, [r7, #4]!
   d9ada:	e7c3      	b.n	d9a64 <rshift+0x28>
   d9adc:	4623      	mov	r3, r4
   d9ade:	e7e1      	b.n	d9aa4 <rshift+0x68>

000d9ae0 <__hexdig_fun>:
   d9ae0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9ae4:	2b09      	cmp	r3, #9
   d9ae6:	d802      	bhi.n	d9aee <__hexdig_fun+0xe>
   d9ae8:	3820      	subs	r0, #32
   d9aea:	b2c0      	uxtb	r0, r0
   d9aec:	4770      	bx	lr
   d9aee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9af2:	2b05      	cmp	r3, #5
   d9af4:	d801      	bhi.n	d9afa <__hexdig_fun+0x1a>
   d9af6:	3847      	subs	r0, #71	; 0x47
   d9af8:	e7f7      	b.n	d9aea <__hexdig_fun+0xa>
   d9afa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9afe:	2b05      	cmp	r3, #5
   d9b00:	d801      	bhi.n	d9b06 <__hexdig_fun+0x26>
   d9b02:	3827      	subs	r0, #39	; 0x27
   d9b04:	e7f1      	b.n	d9aea <__hexdig_fun+0xa>
   d9b06:	2000      	movs	r0, #0
   d9b08:	4770      	bx	lr
	...

000d9b0c <__gethex>:
   d9b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b10:	ed2d 8b02 	vpush	{d8}
   d9b14:	b089      	sub	sp, #36	; 0x24
   d9b16:	ee08 0a10 	vmov	s16, r0
   d9b1a:	9304      	str	r3, [sp, #16]
   d9b1c:	4bbc      	ldr	r3, [pc, #752]	; (d9e10 <__gethex+0x304>)
   d9b1e:	681b      	ldr	r3, [r3, #0]
   d9b20:	9301      	str	r3, [sp, #4]
   d9b22:	4618      	mov	r0, r3
   d9b24:	468b      	mov	fp, r1
   d9b26:	4690      	mov	r8, r2
   d9b28:	f7ff f8a5 	bl	d8c76 <strlen>
   d9b2c:	9b01      	ldr	r3, [sp, #4]
   d9b2e:	f8db 2000 	ldr.w	r2, [fp]
   d9b32:	4403      	add	r3, r0
   d9b34:	4682      	mov	sl, r0
   d9b36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9b3a:	9305      	str	r3, [sp, #20]
   d9b3c:	1c93      	adds	r3, r2, #2
   d9b3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9b42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9b46:	32fe      	adds	r2, #254	; 0xfe
   d9b48:	18d1      	adds	r1, r2, r3
   d9b4a:	461f      	mov	r7, r3
   d9b4c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9b50:	9100      	str	r1, [sp, #0]
   d9b52:	2830      	cmp	r0, #48	; 0x30
   d9b54:	d0f8      	beq.n	d9b48 <__gethex+0x3c>
   d9b56:	f7ff ffc3 	bl	d9ae0 <__hexdig_fun>
   d9b5a:	4604      	mov	r4, r0
   d9b5c:	2800      	cmp	r0, #0
   d9b5e:	d13a      	bne.n	d9bd6 <__gethex+0xca>
   d9b60:	9901      	ldr	r1, [sp, #4]
   d9b62:	4652      	mov	r2, sl
   d9b64:	4638      	mov	r0, r7
   d9b66:	f7ff f88e 	bl	d8c86 <strncmp>
   d9b6a:	4605      	mov	r5, r0
   d9b6c:	2800      	cmp	r0, #0
   d9b6e:	d168      	bne.n	d9c42 <__gethex+0x136>
   d9b70:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9b74:	eb07 060a 	add.w	r6, r7, sl
   d9b78:	f7ff ffb2 	bl	d9ae0 <__hexdig_fun>
   d9b7c:	2800      	cmp	r0, #0
   d9b7e:	d062      	beq.n	d9c46 <__gethex+0x13a>
   d9b80:	4633      	mov	r3, r6
   d9b82:	7818      	ldrb	r0, [r3, #0]
   d9b84:	2830      	cmp	r0, #48	; 0x30
   d9b86:	461f      	mov	r7, r3
   d9b88:	f103 0301 	add.w	r3, r3, #1
   d9b8c:	d0f9      	beq.n	d9b82 <__gethex+0x76>
   d9b8e:	f7ff ffa7 	bl	d9ae0 <__hexdig_fun>
   d9b92:	2301      	movs	r3, #1
   d9b94:	fab0 f480 	clz	r4, r0
   d9b98:	0964      	lsrs	r4, r4, #5
   d9b9a:	4635      	mov	r5, r6
   d9b9c:	9300      	str	r3, [sp, #0]
   d9b9e:	463a      	mov	r2, r7
   d9ba0:	4616      	mov	r6, r2
   d9ba2:	3201      	adds	r2, #1
   d9ba4:	7830      	ldrb	r0, [r6, #0]
   d9ba6:	f7ff ff9b 	bl	d9ae0 <__hexdig_fun>
   d9baa:	2800      	cmp	r0, #0
   d9bac:	d1f8      	bne.n	d9ba0 <__gethex+0x94>
   d9bae:	9901      	ldr	r1, [sp, #4]
   d9bb0:	4652      	mov	r2, sl
   d9bb2:	4630      	mov	r0, r6
   d9bb4:	f7ff f867 	bl	d8c86 <strncmp>
   d9bb8:	b980      	cbnz	r0, d9bdc <__gethex+0xd0>
   d9bba:	b94d      	cbnz	r5, d9bd0 <__gethex+0xc4>
   d9bbc:	eb06 050a 	add.w	r5, r6, sl
   d9bc0:	462a      	mov	r2, r5
   d9bc2:	4616      	mov	r6, r2
   d9bc4:	3201      	adds	r2, #1
   d9bc6:	7830      	ldrb	r0, [r6, #0]
   d9bc8:	f7ff ff8a 	bl	d9ae0 <__hexdig_fun>
   d9bcc:	2800      	cmp	r0, #0
   d9bce:	d1f8      	bne.n	d9bc2 <__gethex+0xb6>
   d9bd0:	1bad      	subs	r5, r5, r6
   d9bd2:	00ad      	lsls	r5, r5, #2
   d9bd4:	e004      	b.n	d9be0 <__gethex+0xd4>
   d9bd6:	2400      	movs	r4, #0
   d9bd8:	4625      	mov	r5, r4
   d9bda:	e7e0      	b.n	d9b9e <__gethex+0x92>
   d9bdc:	2d00      	cmp	r5, #0
   d9bde:	d1f7      	bne.n	d9bd0 <__gethex+0xc4>
   d9be0:	7833      	ldrb	r3, [r6, #0]
   d9be2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9be6:	2b50      	cmp	r3, #80	; 0x50
   d9be8:	d13b      	bne.n	d9c62 <__gethex+0x156>
   d9bea:	7873      	ldrb	r3, [r6, #1]
   d9bec:	2b2b      	cmp	r3, #43	; 0x2b
   d9bee:	d02c      	beq.n	d9c4a <__gethex+0x13e>
   d9bf0:	2b2d      	cmp	r3, #45	; 0x2d
   d9bf2:	d02e      	beq.n	d9c52 <__gethex+0x146>
   d9bf4:	1c71      	adds	r1, r6, #1
   d9bf6:	f04f 0900 	mov.w	r9, #0
   d9bfa:	7808      	ldrb	r0, [r1, #0]
   d9bfc:	f7ff ff70 	bl	d9ae0 <__hexdig_fun>
   d9c00:	1e43      	subs	r3, r0, #1
   d9c02:	b2db      	uxtb	r3, r3
   d9c04:	2b18      	cmp	r3, #24
   d9c06:	d82c      	bhi.n	d9c62 <__gethex+0x156>
   d9c08:	f1a0 0210 	sub.w	r2, r0, #16
   d9c0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9c10:	f7ff ff66 	bl	d9ae0 <__hexdig_fun>
   d9c14:	1e43      	subs	r3, r0, #1
   d9c16:	b2db      	uxtb	r3, r3
   d9c18:	2b18      	cmp	r3, #24
   d9c1a:	d91d      	bls.n	d9c58 <__gethex+0x14c>
   d9c1c:	f1b9 0f00 	cmp.w	r9, #0
   d9c20:	d000      	beq.n	d9c24 <__gethex+0x118>
   d9c22:	4252      	negs	r2, r2
   d9c24:	4415      	add	r5, r2
   d9c26:	f8cb 1000 	str.w	r1, [fp]
   d9c2a:	b1e4      	cbz	r4, d9c66 <__gethex+0x15a>
   d9c2c:	9b00      	ldr	r3, [sp, #0]
   d9c2e:	2b00      	cmp	r3, #0
   d9c30:	bf14      	ite	ne
   d9c32:	2700      	movne	r7, #0
   d9c34:	2706      	moveq	r7, #6
   d9c36:	4638      	mov	r0, r7
   d9c38:	b009      	add	sp, #36	; 0x24
   d9c3a:	ecbd 8b02 	vpop	{d8}
   d9c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c42:	463e      	mov	r6, r7
   d9c44:	4625      	mov	r5, r4
   d9c46:	2401      	movs	r4, #1
   d9c48:	e7ca      	b.n	d9be0 <__gethex+0xd4>
   d9c4a:	f04f 0900 	mov.w	r9, #0
   d9c4e:	1cb1      	adds	r1, r6, #2
   d9c50:	e7d3      	b.n	d9bfa <__gethex+0xee>
   d9c52:	f04f 0901 	mov.w	r9, #1
   d9c56:	e7fa      	b.n	d9c4e <__gethex+0x142>
   d9c58:	230a      	movs	r3, #10
   d9c5a:	fb03 0202 	mla	r2, r3, r2, r0
   d9c5e:	3a10      	subs	r2, #16
   d9c60:	e7d4      	b.n	d9c0c <__gethex+0x100>
   d9c62:	4631      	mov	r1, r6
   d9c64:	e7df      	b.n	d9c26 <__gethex+0x11a>
   d9c66:	1bf3      	subs	r3, r6, r7
   d9c68:	3b01      	subs	r3, #1
   d9c6a:	4621      	mov	r1, r4
   d9c6c:	2b07      	cmp	r3, #7
   d9c6e:	dc52      	bgt.n	d9d16 <__gethex+0x20a>
   d9c70:	ee18 0a10 	vmov	r0, s16
   d9c74:	f000 fa52 	bl	da11c <_Balloc>
   d9c78:	f04f 0b00 	mov.w	fp, #0
   d9c7c:	f100 0914 	add.w	r9, r0, #20
   d9c80:	f1ca 0301 	rsb	r3, sl, #1
   d9c84:	4604      	mov	r4, r0
   d9c86:	f8cd 9008 	str.w	r9, [sp, #8]
   d9c8a:	f8cd b000 	str.w	fp, [sp]
   d9c8e:	9306      	str	r3, [sp, #24]
   d9c90:	42b7      	cmp	r7, r6
   d9c92:	d343      	bcc.n	d9d1c <__gethex+0x210>
   d9c94:	9802      	ldr	r0, [sp, #8]
   d9c96:	9b00      	ldr	r3, [sp, #0]
   d9c98:	f840 3b04 	str.w	r3, [r0], #4
   d9c9c:	eba0 0009 	sub.w	r0, r0, r9
   d9ca0:	1080      	asrs	r0, r0, #2
   d9ca2:	0146      	lsls	r6, r0, #5
   d9ca4:	6120      	str	r0, [r4, #16]
   d9ca6:	4618      	mov	r0, r3
   d9ca8:	f000 faff 	bl	da2aa <__hi0bits>
   d9cac:	1a30      	subs	r0, r6, r0
   d9cae:	f8d8 6000 	ldr.w	r6, [r8]
   d9cb2:	42b0      	cmp	r0, r6
   d9cb4:	dd66      	ble.n	d9d84 <__gethex+0x278>
   d9cb6:	1b87      	subs	r7, r0, r6
   d9cb8:	4639      	mov	r1, r7
   d9cba:	4620      	mov	r0, r4
   d9cbc:	f000 fe4c 	bl	da958 <__any_on>
   d9cc0:	4682      	mov	sl, r0
   d9cc2:	b1a8      	cbz	r0, d9cf0 <__gethex+0x1e4>
   d9cc4:	1e7b      	subs	r3, r7, #1
   d9cc6:	1159      	asrs	r1, r3, #5
   d9cc8:	f003 021f 	and.w	r2, r3, #31
   d9ccc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9cd0:	f04f 0a01 	mov.w	sl, #1
   d9cd4:	fa0a f202 	lsl.w	r2, sl, r2
   d9cd8:	420a      	tst	r2, r1
   d9cda:	d009      	beq.n	d9cf0 <__gethex+0x1e4>
   d9cdc:	4553      	cmp	r3, sl
   d9cde:	dd05      	ble.n	d9cec <__gethex+0x1e0>
   d9ce0:	1eb9      	subs	r1, r7, #2
   d9ce2:	4620      	mov	r0, r4
   d9ce4:	f000 fe38 	bl	da958 <__any_on>
   d9ce8:	2800      	cmp	r0, #0
   d9cea:	d148      	bne.n	d9d7e <__gethex+0x272>
   d9cec:	f04f 0a02 	mov.w	sl, #2
   d9cf0:	4639      	mov	r1, r7
   d9cf2:	4620      	mov	r0, r4
   d9cf4:	f7ff fea2 	bl	d9a3c <rshift>
   d9cf8:	443d      	add	r5, r7
   d9cfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9cfe:	42ab      	cmp	r3, r5
   d9d00:	da4f      	bge.n	d9da2 <__gethex+0x296>
   d9d02:	ee18 0a10 	vmov	r0, s16
   d9d06:	4621      	mov	r1, r4
   d9d08:	f000 fa3c 	bl	da184 <_Bfree>
   d9d0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9d0e:	2300      	movs	r3, #0
   d9d10:	6013      	str	r3, [r2, #0]
   d9d12:	27a3      	movs	r7, #163	; 0xa3
   d9d14:	e78f      	b.n	d9c36 <__gethex+0x12a>
   d9d16:	3101      	adds	r1, #1
   d9d18:	105b      	asrs	r3, r3, #1
   d9d1a:	e7a7      	b.n	d9c6c <__gethex+0x160>
   d9d1c:	1e73      	subs	r3, r6, #1
   d9d1e:	9a05      	ldr	r2, [sp, #20]
   d9d20:	9303      	str	r3, [sp, #12]
   d9d22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9d26:	4293      	cmp	r3, r2
   d9d28:	d019      	beq.n	d9d5e <__gethex+0x252>
   d9d2a:	f1bb 0f20 	cmp.w	fp, #32
   d9d2e:	d107      	bne.n	d9d40 <__gethex+0x234>
   d9d30:	9b02      	ldr	r3, [sp, #8]
   d9d32:	9a00      	ldr	r2, [sp, #0]
   d9d34:	f843 2b04 	str.w	r2, [r3], #4
   d9d38:	9302      	str	r3, [sp, #8]
   d9d3a:	2300      	movs	r3, #0
   d9d3c:	9300      	str	r3, [sp, #0]
   d9d3e:	469b      	mov	fp, r3
   d9d40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9d44:	f7ff fecc 	bl	d9ae0 <__hexdig_fun>
   d9d48:	9b00      	ldr	r3, [sp, #0]
   d9d4a:	f000 000f 	and.w	r0, r0, #15
   d9d4e:	fa00 f00b 	lsl.w	r0, r0, fp
   d9d52:	4303      	orrs	r3, r0
   d9d54:	9300      	str	r3, [sp, #0]
   d9d56:	f10b 0b04 	add.w	fp, fp, #4
   d9d5a:	9b03      	ldr	r3, [sp, #12]
   d9d5c:	e00d      	b.n	d9d7a <__gethex+0x26e>
   d9d5e:	9b03      	ldr	r3, [sp, #12]
   d9d60:	9a06      	ldr	r2, [sp, #24]
   d9d62:	4413      	add	r3, r2
   d9d64:	42bb      	cmp	r3, r7
   d9d66:	d3e0      	bcc.n	d9d2a <__gethex+0x21e>
   d9d68:	4618      	mov	r0, r3
   d9d6a:	9901      	ldr	r1, [sp, #4]
   d9d6c:	9307      	str	r3, [sp, #28]
   d9d6e:	4652      	mov	r2, sl
   d9d70:	f7fe ff89 	bl	d8c86 <strncmp>
   d9d74:	9b07      	ldr	r3, [sp, #28]
   d9d76:	2800      	cmp	r0, #0
   d9d78:	d1d7      	bne.n	d9d2a <__gethex+0x21e>
   d9d7a:	461e      	mov	r6, r3
   d9d7c:	e788      	b.n	d9c90 <__gethex+0x184>
   d9d7e:	f04f 0a03 	mov.w	sl, #3
   d9d82:	e7b5      	b.n	d9cf0 <__gethex+0x1e4>
   d9d84:	da0a      	bge.n	d9d9c <__gethex+0x290>
   d9d86:	1a37      	subs	r7, r6, r0
   d9d88:	4621      	mov	r1, r4
   d9d8a:	ee18 0a10 	vmov	r0, s16
   d9d8e:	463a      	mov	r2, r7
   d9d90:	f000 fbce 	bl	da530 <__lshift>
   d9d94:	1bed      	subs	r5, r5, r7
   d9d96:	4604      	mov	r4, r0
   d9d98:	f100 0914 	add.w	r9, r0, #20
   d9d9c:	f04f 0a00 	mov.w	sl, #0
   d9da0:	e7ab      	b.n	d9cfa <__gethex+0x1ee>
   d9da2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9da6:	42a8      	cmp	r0, r5
   d9da8:	dd6d      	ble.n	d9e86 <__gethex+0x37a>
   d9daa:	1b45      	subs	r5, r0, r5
   d9dac:	42ae      	cmp	r6, r5
   d9dae:	dc31      	bgt.n	d9e14 <__gethex+0x308>
   d9db0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9db4:	2b02      	cmp	r3, #2
   d9db6:	d023      	beq.n	d9e00 <__gethex+0x2f4>
   d9db8:	2b03      	cmp	r3, #3
   d9dba:	d025      	beq.n	d9e08 <__gethex+0x2fc>
   d9dbc:	2b01      	cmp	r3, #1
   d9dbe:	d115      	bne.n	d9dec <__gethex+0x2e0>
   d9dc0:	42ae      	cmp	r6, r5
   d9dc2:	d113      	bne.n	d9dec <__gethex+0x2e0>
   d9dc4:	2e01      	cmp	r6, #1
   d9dc6:	d10b      	bne.n	d9de0 <__gethex+0x2d4>
   d9dc8:	9a04      	ldr	r2, [sp, #16]
   d9dca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9dce:	6013      	str	r3, [r2, #0]
   d9dd0:	2301      	movs	r3, #1
   d9dd2:	6123      	str	r3, [r4, #16]
   d9dd4:	f8c9 3000 	str.w	r3, [r9]
   d9dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9dda:	2762      	movs	r7, #98	; 0x62
   d9ddc:	601c      	str	r4, [r3, #0]
   d9dde:	e72a      	b.n	d9c36 <__gethex+0x12a>
   d9de0:	1e71      	subs	r1, r6, #1
   d9de2:	4620      	mov	r0, r4
   d9de4:	f000 fdb8 	bl	da958 <__any_on>
   d9de8:	2800      	cmp	r0, #0
   d9dea:	d1ed      	bne.n	d9dc8 <__gethex+0x2bc>
   d9dec:	ee18 0a10 	vmov	r0, s16
   d9df0:	4621      	mov	r1, r4
   d9df2:	f000 f9c7 	bl	da184 <_Bfree>
   d9df6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9df8:	2300      	movs	r3, #0
   d9dfa:	6013      	str	r3, [r2, #0]
   d9dfc:	2750      	movs	r7, #80	; 0x50
   d9dfe:	e71a      	b.n	d9c36 <__gethex+0x12a>
   d9e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e02:	2b00      	cmp	r3, #0
   d9e04:	d1f2      	bne.n	d9dec <__gethex+0x2e0>
   d9e06:	e7df      	b.n	d9dc8 <__gethex+0x2bc>
   d9e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e0a:	2b00      	cmp	r3, #0
   d9e0c:	d1dc      	bne.n	d9dc8 <__gethex+0x2bc>
   d9e0e:	e7ed      	b.n	d9dec <__gethex+0x2e0>
   d9e10:	000db3cc 	.word	0x000db3cc
   d9e14:	1e6f      	subs	r7, r5, #1
   d9e16:	f1ba 0f00 	cmp.w	sl, #0
   d9e1a:	d131      	bne.n	d9e80 <__gethex+0x374>
   d9e1c:	b127      	cbz	r7, d9e28 <__gethex+0x31c>
   d9e1e:	4639      	mov	r1, r7
   d9e20:	4620      	mov	r0, r4
   d9e22:	f000 fd99 	bl	da958 <__any_on>
   d9e26:	4682      	mov	sl, r0
   d9e28:	117b      	asrs	r3, r7, #5
   d9e2a:	2101      	movs	r1, #1
   d9e2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9e30:	f007 071f 	and.w	r7, r7, #31
   d9e34:	fa01 f707 	lsl.w	r7, r1, r7
   d9e38:	421f      	tst	r7, r3
   d9e3a:	4629      	mov	r1, r5
   d9e3c:	4620      	mov	r0, r4
   d9e3e:	bf18      	it	ne
   d9e40:	f04a 0a02 	orrne.w	sl, sl, #2
   d9e44:	1b76      	subs	r6, r6, r5
   d9e46:	f7ff fdf9 	bl	d9a3c <rshift>
   d9e4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9e4e:	2702      	movs	r7, #2
   d9e50:	f1ba 0f00 	cmp.w	sl, #0
   d9e54:	d048      	beq.n	d9ee8 <__gethex+0x3dc>
   d9e56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9e5a:	2b02      	cmp	r3, #2
   d9e5c:	d015      	beq.n	d9e8a <__gethex+0x37e>
   d9e5e:	2b03      	cmp	r3, #3
   d9e60:	d017      	beq.n	d9e92 <__gethex+0x386>
   d9e62:	2b01      	cmp	r3, #1
   d9e64:	d109      	bne.n	d9e7a <__gethex+0x36e>
   d9e66:	f01a 0f02 	tst.w	sl, #2
   d9e6a:	d006      	beq.n	d9e7a <__gethex+0x36e>
   d9e6c:	f8d9 0000 	ldr.w	r0, [r9]
   d9e70:	ea4a 0a00 	orr.w	sl, sl, r0
   d9e74:	f01a 0f01 	tst.w	sl, #1
   d9e78:	d10e      	bne.n	d9e98 <__gethex+0x38c>
   d9e7a:	f047 0710 	orr.w	r7, r7, #16
   d9e7e:	e033      	b.n	d9ee8 <__gethex+0x3dc>
   d9e80:	f04f 0a01 	mov.w	sl, #1
   d9e84:	e7d0      	b.n	d9e28 <__gethex+0x31c>
   d9e86:	2701      	movs	r7, #1
   d9e88:	e7e2      	b.n	d9e50 <__gethex+0x344>
   d9e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e8c:	f1c3 0301 	rsb	r3, r3, #1
   d9e90:	9315      	str	r3, [sp, #84]	; 0x54
   d9e92:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e94:	2b00      	cmp	r3, #0
   d9e96:	d0f0      	beq.n	d9e7a <__gethex+0x36e>
   d9e98:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9e9c:	f104 0314 	add.w	r3, r4, #20
   d9ea0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d9ea4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9ea8:	f04f 0c00 	mov.w	ip, #0
   d9eac:	4618      	mov	r0, r3
   d9eae:	f853 2b04 	ldr.w	r2, [r3], #4
   d9eb2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9eb6:	d01c      	beq.n	d9ef2 <__gethex+0x3e6>
   d9eb8:	3201      	adds	r2, #1
   d9eba:	6002      	str	r2, [r0, #0]
   d9ebc:	2f02      	cmp	r7, #2
   d9ebe:	f104 0314 	add.w	r3, r4, #20
   d9ec2:	d13a      	bne.n	d9f3a <__gethex+0x42e>
   d9ec4:	f8d8 2000 	ldr.w	r2, [r8]
   d9ec8:	3a01      	subs	r2, #1
   d9eca:	42b2      	cmp	r2, r6
   d9ecc:	d10a      	bne.n	d9ee4 <__gethex+0x3d8>
   d9ece:	1171      	asrs	r1, r6, #5
   d9ed0:	2201      	movs	r2, #1
   d9ed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d9ed6:	f006 061f 	and.w	r6, r6, #31
   d9eda:	fa02 f606 	lsl.w	r6, r2, r6
   d9ede:	421e      	tst	r6, r3
   d9ee0:	bf18      	it	ne
   d9ee2:	4617      	movne	r7, r2
   d9ee4:	f047 0720 	orr.w	r7, r7, #32
   d9ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9eea:	601c      	str	r4, [r3, #0]
   d9eec:	9b04      	ldr	r3, [sp, #16]
   d9eee:	601d      	str	r5, [r3, #0]
   d9ef0:	e6a1      	b.n	d9c36 <__gethex+0x12a>
   d9ef2:	4299      	cmp	r1, r3
   d9ef4:	f843 cc04 	str.w	ip, [r3, #-4]
   d9ef8:	d8d8      	bhi.n	d9eac <__gethex+0x3a0>
   d9efa:	68a3      	ldr	r3, [r4, #8]
   d9efc:	4599      	cmp	r9, r3
   d9efe:	db14      	blt.n	d9f2a <__gethex+0x41e>
   d9f00:	6861      	ldr	r1, [r4, #4]
   d9f02:	ee18 0a10 	vmov	r0, s16
   d9f06:	3101      	adds	r1, #1
   d9f08:	f000 f908 	bl	da11c <_Balloc>
   d9f0c:	6922      	ldr	r2, [r4, #16]
   d9f0e:	3202      	adds	r2, #2
   d9f10:	f104 010c 	add.w	r1, r4, #12
   d9f14:	4682      	mov	sl, r0
   d9f16:	0092      	lsls	r2, r2, #2
   d9f18:	300c      	adds	r0, #12
   d9f1a:	f7fe fe29 	bl	d8b70 <memcpy>
   d9f1e:	4621      	mov	r1, r4
   d9f20:	ee18 0a10 	vmov	r0, s16
   d9f24:	f000 f92e 	bl	da184 <_Bfree>
   d9f28:	4654      	mov	r4, sl
   d9f2a:	6923      	ldr	r3, [r4, #16]
   d9f2c:	1c5a      	adds	r2, r3, #1
   d9f2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9f32:	6122      	str	r2, [r4, #16]
   d9f34:	2201      	movs	r2, #1
   d9f36:	615a      	str	r2, [r3, #20]
   d9f38:	e7c0      	b.n	d9ebc <__gethex+0x3b0>
   d9f3a:	6922      	ldr	r2, [r4, #16]
   d9f3c:	454a      	cmp	r2, r9
   d9f3e:	dd0b      	ble.n	d9f58 <__gethex+0x44c>
   d9f40:	2101      	movs	r1, #1
   d9f42:	4620      	mov	r0, r4
   d9f44:	f7ff fd7a 	bl	d9a3c <rshift>
   d9f48:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9f4c:	3501      	adds	r5, #1
   d9f4e:	42ab      	cmp	r3, r5
   d9f50:	f6ff aed7 	blt.w	d9d02 <__gethex+0x1f6>
   d9f54:	2701      	movs	r7, #1
   d9f56:	e7c5      	b.n	d9ee4 <__gethex+0x3d8>
   d9f58:	f016 061f 	ands.w	r6, r6, #31
   d9f5c:	d0fa      	beq.n	d9f54 <__gethex+0x448>
   d9f5e:	449b      	add	fp, r3
   d9f60:	f1c6 0620 	rsb	r6, r6, #32
   d9f64:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d9f68:	f000 f99f 	bl	da2aa <__hi0bits>
   d9f6c:	42b0      	cmp	r0, r6
   d9f6e:	dbe7      	blt.n	d9f40 <__gethex+0x434>
   d9f70:	e7f0      	b.n	d9f54 <__gethex+0x448>
   d9f72:	bf00      	nop

000d9f74 <L_shift>:
   d9f74:	f1c2 0208 	rsb	r2, r2, #8
   d9f78:	0092      	lsls	r2, r2, #2
   d9f7a:	b570      	push	{r4, r5, r6, lr}
   d9f7c:	f1c2 0620 	rsb	r6, r2, #32
   d9f80:	6843      	ldr	r3, [r0, #4]
   d9f82:	6804      	ldr	r4, [r0, #0]
   d9f84:	fa03 f506 	lsl.w	r5, r3, r6
   d9f88:	432c      	orrs	r4, r5
   d9f8a:	40d3      	lsrs	r3, r2
   d9f8c:	6004      	str	r4, [r0, #0]
   d9f8e:	f840 3f04 	str.w	r3, [r0, #4]!
   d9f92:	4288      	cmp	r0, r1
   d9f94:	d3f4      	bcc.n	d9f80 <L_shift+0xc>
   d9f96:	bd70      	pop	{r4, r5, r6, pc}

000d9f98 <__match>:
   d9f98:	b530      	push	{r4, r5, lr}
   d9f9a:	6803      	ldr	r3, [r0, #0]
   d9f9c:	3301      	adds	r3, #1
   d9f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9fa2:	b914      	cbnz	r4, d9faa <__match+0x12>
   d9fa4:	6003      	str	r3, [r0, #0]
   d9fa6:	2001      	movs	r0, #1
   d9fa8:	bd30      	pop	{r4, r5, pc}
   d9faa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9fae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9fb2:	2d19      	cmp	r5, #25
   d9fb4:	bf98      	it	ls
   d9fb6:	3220      	addls	r2, #32
   d9fb8:	42a2      	cmp	r2, r4
   d9fba:	d0f0      	beq.n	d9f9e <__match+0x6>
   d9fbc:	2000      	movs	r0, #0
   d9fbe:	e7f3      	b.n	d9fa8 <__match+0x10>

000d9fc0 <__hexnan>:
   d9fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9fc4:	680b      	ldr	r3, [r1, #0]
   d9fc6:	6801      	ldr	r1, [r0, #0]
   d9fc8:	115e      	asrs	r6, r3, #5
   d9fca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9fce:	f013 031f 	ands.w	r3, r3, #31
   d9fd2:	b087      	sub	sp, #28
   d9fd4:	bf18      	it	ne
   d9fd6:	3604      	addne	r6, #4
   d9fd8:	2500      	movs	r5, #0
   d9fda:	1f37      	subs	r7, r6, #4
   d9fdc:	4682      	mov	sl, r0
   d9fde:	4690      	mov	r8, r2
   d9fe0:	9301      	str	r3, [sp, #4]
   d9fe2:	f846 5c04 	str.w	r5, [r6, #-4]
   d9fe6:	46b9      	mov	r9, r7
   d9fe8:	463c      	mov	r4, r7
   d9fea:	9502      	str	r5, [sp, #8]
   d9fec:	46ab      	mov	fp, r5
   d9fee:	784a      	ldrb	r2, [r1, #1]
   d9ff0:	1c4b      	adds	r3, r1, #1
   d9ff2:	9303      	str	r3, [sp, #12]
   d9ff4:	b342      	cbz	r2, da048 <__hexnan+0x88>
   d9ff6:	4610      	mov	r0, r2
   d9ff8:	9105      	str	r1, [sp, #20]
   d9ffa:	9204      	str	r2, [sp, #16]
   d9ffc:	f7ff fd70 	bl	d9ae0 <__hexdig_fun>
   da000:	2800      	cmp	r0, #0
   da002:	d14f      	bne.n	da0a4 <__hexnan+0xe4>
   da004:	9a04      	ldr	r2, [sp, #16]
   da006:	9905      	ldr	r1, [sp, #20]
   da008:	2a20      	cmp	r2, #32
   da00a:	d818      	bhi.n	da03e <__hexnan+0x7e>
   da00c:	9b02      	ldr	r3, [sp, #8]
   da00e:	459b      	cmp	fp, r3
   da010:	dd13      	ble.n	da03a <__hexnan+0x7a>
   da012:	454c      	cmp	r4, r9
   da014:	d206      	bcs.n	da024 <__hexnan+0x64>
   da016:	2d07      	cmp	r5, #7
   da018:	dc04      	bgt.n	da024 <__hexnan+0x64>
   da01a:	462a      	mov	r2, r5
   da01c:	4649      	mov	r1, r9
   da01e:	4620      	mov	r0, r4
   da020:	f7ff ffa8 	bl	d9f74 <L_shift>
   da024:	4544      	cmp	r4, r8
   da026:	d950      	bls.n	da0ca <__hexnan+0x10a>
   da028:	2300      	movs	r3, #0
   da02a:	f1a4 0904 	sub.w	r9, r4, #4
   da02e:	f844 3c04 	str.w	r3, [r4, #-4]
   da032:	f8cd b008 	str.w	fp, [sp, #8]
   da036:	464c      	mov	r4, r9
   da038:	461d      	mov	r5, r3
   da03a:	9903      	ldr	r1, [sp, #12]
   da03c:	e7d7      	b.n	d9fee <__hexnan+0x2e>
   da03e:	2a29      	cmp	r2, #41	; 0x29
   da040:	d156      	bne.n	da0f0 <__hexnan+0x130>
   da042:	3102      	adds	r1, #2
   da044:	f8ca 1000 	str.w	r1, [sl]
   da048:	f1bb 0f00 	cmp.w	fp, #0
   da04c:	d050      	beq.n	da0f0 <__hexnan+0x130>
   da04e:	454c      	cmp	r4, r9
   da050:	d206      	bcs.n	da060 <__hexnan+0xa0>
   da052:	2d07      	cmp	r5, #7
   da054:	dc04      	bgt.n	da060 <__hexnan+0xa0>
   da056:	462a      	mov	r2, r5
   da058:	4649      	mov	r1, r9
   da05a:	4620      	mov	r0, r4
   da05c:	f7ff ff8a 	bl	d9f74 <L_shift>
   da060:	4544      	cmp	r4, r8
   da062:	d934      	bls.n	da0ce <__hexnan+0x10e>
   da064:	f1a8 0204 	sub.w	r2, r8, #4
   da068:	4623      	mov	r3, r4
   da06a:	f853 1b04 	ldr.w	r1, [r3], #4
   da06e:	f842 1f04 	str.w	r1, [r2, #4]!
   da072:	429f      	cmp	r7, r3
   da074:	d2f9      	bcs.n	da06a <__hexnan+0xaa>
   da076:	1b3b      	subs	r3, r7, r4
   da078:	f023 0303 	bic.w	r3, r3, #3
   da07c:	3304      	adds	r3, #4
   da07e:	3401      	adds	r4, #1
   da080:	3e03      	subs	r6, #3
   da082:	42b4      	cmp	r4, r6
   da084:	bf88      	it	hi
   da086:	2304      	movhi	r3, #4
   da088:	4443      	add	r3, r8
   da08a:	2200      	movs	r2, #0
   da08c:	f843 2b04 	str.w	r2, [r3], #4
   da090:	429f      	cmp	r7, r3
   da092:	d2fb      	bcs.n	da08c <__hexnan+0xcc>
   da094:	683b      	ldr	r3, [r7, #0]
   da096:	b91b      	cbnz	r3, da0a0 <__hexnan+0xe0>
   da098:	4547      	cmp	r7, r8
   da09a:	d127      	bne.n	da0ec <__hexnan+0x12c>
   da09c:	2301      	movs	r3, #1
   da09e:	603b      	str	r3, [r7, #0]
   da0a0:	2005      	movs	r0, #5
   da0a2:	e026      	b.n	da0f2 <__hexnan+0x132>
   da0a4:	3501      	adds	r5, #1
   da0a6:	2d08      	cmp	r5, #8
   da0a8:	f10b 0b01 	add.w	fp, fp, #1
   da0ac:	dd06      	ble.n	da0bc <__hexnan+0xfc>
   da0ae:	4544      	cmp	r4, r8
   da0b0:	d9c3      	bls.n	da03a <__hexnan+0x7a>
   da0b2:	2300      	movs	r3, #0
   da0b4:	f844 3c04 	str.w	r3, [r4, #-4]
   da0b8:	2501      	movs	r5, #1
   da0ba:	3c04      	subs	r4, #4
   da0bc:	6822      	ldr	r2, [r4, #0]
   da0be:	f000 000f 	and.w	r0, r0, #15
   da0c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da0c6:	6022      	str	r2, [r4, #0]
   da0c8:	e7b7      	b.n	da03a <__hexnan+0x7a>
   da0ca:	2508      	movs	r5, #8
   da0cc:	e7b5      	b.n	da03a <__hexnan+0x7a>
   da0ce:	9b01      	ldr	r3, [sp, #4]
   da0d0:	2b00      	cmp	r3, #0
   da0d2:	d0df      	beq.n	da094 <__hexnan+0xd4>
   da0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da0d8:	f1c3 0320 	rsb	r3, r3, #32
   da0dc:	fa22 f303 	lsr.w	r3, r2, r3
   da0e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da0e4:	401a      	ands	r2, r3
   da0e6:	f846 2c04 	str.w	r2, [r6, #-4]
   da0ea:	e7d3      	b.n	da094 <__hexnan+0xd4>
   da0ec:	3f04      	subs	r7, #4
   da0ee:	e7d1      	b.n	da094 <__hexnan+0xd4>
   da0f0:	2004      	movs	r0, #4
   da0f2:	b007      	add	sp, #28
   da0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da0f8 <__ascii_mbtowc>:
   da0f8:	b082      	sub	sp, #8
   da0fa:	b901      	cbnz	r1, da0fe <__ascii_mbtowc+0x6>
   da0fc:	a901      	add	r1, sp, #4
   da0fe:	b142      	cbz	r2, da112 <__ascii_mbtowc+0x1a>
   da100:	b14b      	cbz	r3, da116 <__ascii_mbtowc+0x1e>
   da102:	7813      	ldrb	r3, [r2, #0]
   da104:	600b      	str	r3, [r1, #0]
   da106:	7812      	ldrb	r2, [r2, #0]
   da108:	1e10      	subs	r0, r2, #0
   da10a:	bf18      	it	ne
   da10c:	2001      	movne	r0, #1
   da10e:	b002      	add	sp, #8
   da110:	4770      	bx	lr
   da112:	4610      	mov	r0, r2
   da114:	e7fb      	b.n	da10e <__ascii_mbtowc+0x16>
   da116:	f06f 0001 	mvn.w	r0, #1
   da11a:	e7f8      	b.n	da10e <__ascii_mbtowc+0x16>

000da11c <_Balloc>:
   da11c:	b570      	push	{r4, r5, r6, lr}
   da11e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da120:	4604      	mov	r4, r0
   da122:	460d      	mov	r5, r1
   da124:	b93e      	cbnz	r6, da136 <_Balloc+0x1a>
   da126:	2010      	movs	r0, #16
   da128:	f7fc fc94 	bl	d6a54 <malloc>
   da12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da130:	6260      	str	r0, [r4, #36]	; 0x24
   da132:	6006      	str	r6, [r0, #0]
   da134:	60c6      	str	r6, [r0, #12]
   da136:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da138:	68f3      	ldr	r3, [r6, #12]
   da13a:	b183      	cbz	r3, da15e <_Balloc+0x42>
   da13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da13e:	68db      	ldr	r3, [r3, #12]
   da140:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da144:	b9b8      	cbnz	r0, da176 <_Balloc+0x5a>
   da146:	2101      	movs	r1, #1
   da148:	fa01 f605 	lsl.w	r6, r1, r5
   da14c:	1d72      	adds	r2, r6, #5
   da14e:	0092      	lsls	r2, r2, #2
   da150:	4620      	mov	r0, r4
   da152:	f000 fc22 	bl	da99a <_calloc_r>
   da156:	b160      	cbz	r0, da172 <_Balloc+0x56>
   da158:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da15c:	e00e      	b.n	da17c <_Balloc+0x60>
   da15e:	2221      	movs	r2, #33	; 0x21
   da160:	2104      	movs	r1, #4
   da162:	4620      	mov	r0, r4
   da164:	f000 fc19 	bl	da99a <_calloc_r>
   da168:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da16a:	60f0      	str	r0, [r6, #12]
   da16c:	68db      	ldr	r3, [r3, #12]
   da16e:	2b00      	cmp	r3, #0
   da170:	d1e4      	bne.n	da13c <_Balloc+0x20>
   da172:	2000      	movs	r0, #0
   da174:	bd70      	pop	{r4, r5, r6, pc}
   da176:	6802      	ldr	r2, [r0, #0]
   da178:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da17c:	2300      	movs	r3, #0
   da17e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da182:	e7f7      	b.n	da174 <_Balloc+0x58>

000da184 <_Bfree>:
   da184:	b570      	push	{r4, r5, r6, lr}
   da186:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da188:	4605      	mov	r5, r0
   da18a:	460c      	mov	r4, r1
   da18c:	b93e      	cbnz	r6, da19e <_Bfree+0x1a>
   da18e:	2010      	movs	r0, #16
   da190:	f7fc fc60 	bl	d6a54 <malloc>
   da194:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da198:	6268      	str	r0, [r5, #36]	; 0x24
   da19a:	6006      	str	r6, [r0, #0]
   da19c:	60c6      	str	r6, [r0, #12]
   da19e:	b13c      	cbz	r4, da1b0 <_Bfree+0x2c>
   da1a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da1a2:	6862      	ldr	r2, [r4, #4]
   da1a4:	68db      	ldr	r3, [r3, #12]
   da1a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da1aa:	6021      	str	r1, [r4, #0]
   da1ac:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da1b0:	bd70      	pop	{r4, r5, r6, pc}

000da1b2 <__multadd>:
   da1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da1b6:	690e      	ldr	r6, [r1, #16]
   da1b8:	4607      	mov	r7, r0
   da1ba:	4698      	mov	r8, r3
   da1bc:	460c      	mov	r4, r1
   da1be:	f101 0014 	add.w	r0, r1, #20
   da1c2:	2300      	movs	r3, #0
   da1c4:	6805      	ldr	r5, [r0, #0]
   da1c6:	b2a9      	uxth	r1, r5
   da1c8:	fb02 8101 	mla	r1, r2, r1, r8
   da1cc:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da1d0:	0c2d      	lsrs	r5, r5, #16
   da1d2:	fb02 c505 	mla	r5, r2, r5, ip
   da1d6:	b289      	uxth	r1, r1
   da1d8:	3301      	adds	r3, #1
   da1da:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da1de:	429e      	cmp	r6, r3
   da1e0:	f840 1b04 	str.w	r1, [r0], #4
   da1e4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da1e8:	dcec      	bgt.n	da1c4 <__multadd+0x12>
   da1ea:	f1b8 0f00 	cmp.w	r8, #0
   da1ee:	d01b      	beq.n	da228 <__multadd+0x76>
   da1f0:	68a3      	ldr	r3, [r4, #8]
   da1f2:	42b3      	cmp	r3, r6
   da1f4:	dc12      	bgt.n	da21c <__multadd+0x6a>
   da1f6:	6861      	ldr	r1, [r4, #4]
   da1f8:	4638      	mov	r0, r7
   da1fa:	3101      	adds	r1, #1
   da1fc:	f7ff ff8e 	bl	da11c <_Balloc>
   da200:	6922      	ldr	r2, [r4, #16]
   da202:	3202      	adds	r2, #2
   da204:	f104 010c 	add.w	r1, r4, #12
   da208:	4605      	mov	r5, r0
   da20a:	0092      	lsls	r2, r2, #2
   da20c:	300c      	adds	r0, #12
   da20e:	f7fe fcaf 	bl	d8b70 <memcpy>
   da212:	4621      	mov	r1, r4
   da214:	4638      	mov	r0, r7
   da216:	f7ff ffb5 	bl	da184 <_Bfree>
   da21a:	462c      	mov	r4, r5
   da21c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da220:	3601      	adds	r6, #1
   da222:	f8c3 8014 	str.w	r8, [r3, #20]
   da226:	6126      	str	r6, [r4, #16]
   da228:	4620      	mov	r0, r4
   da22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da22e <__s2b>:
   da22e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da232:	460c      	mov	r4, r1
   da234:	4615      	mov	r5, r2
   da236:	461f      	mov	r7, r3
   da238:	2209      	movs	r2, #9
   da23a:	3308      	adds	r3, #8
   da23c:	4606      	mov	r6, r0
   da23e:	fb93 f3f2 	sdiv	r3, r3, r2
   da242:	2100      	movs	r1, #0
   da244:	2201      	movs	r2, #1
   da246:	429a      	cmp	r2, r3
   da248:	db20      	blt.n	da28c <__s2b+0x5e>
   da24a:	4630      	mov	r0, r6
   da24c:	f7ff ff66 	bl	da11c <_Balloc>
   da250:	9b08      	ldr	r3, [sp, #32]
   da252:	6143      	str	r3, [r0, #20]
   da254:	2d09      	cmp	r5, #9
   da256:	f04f 0301 	mov.w	r3, #1
   da25a:	6103      	str	r3, [r0, #16]
   da25c:	dd19      	ble.n	da292 <__s2b+0x64>
   da25e:	f104 0909 	add.w	r9, r4, #9
   da262:	46c8      	mov	r8, r9
   da264:	442c      	add	r4, r5
   da266:	f818 3b01 	ldrb.w	r3, [r8], #1
   da26a:	4601      	mov	r1, r0
   da26c:	3b30      	subs	r3, #48	; 0x30
   da26e:	220a      	movs	r2, #10
   da270:	4630      	mov	r0, r6
   da272:	f7ff ff9e 	bl	da1b2 <__multadd>
   da276:	45a0      	cmp	r8, r4
   da278:	d1f5      	bne.n	da266 <__s2b+0x38>
   da27a:	f1a5 0408 	sub.w	r4, r5, #8
   da27e:	444c      	add	r4, r9
   da280:	1b2d      	subs	r5, r5, r4
   da282:	1963      	adds	r3, r4, r5
   da284:	42bb      	cmp	r3, r7
   da286:	db07      	blt.n	da298 <__s2b+0x6a>
   da288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da28c:	0052      	lsls	r2, r2, #1
   da28e:	3101      	adds	r1, #1
   da290:	e7d9      	b.n	da246 <__s2b+0x18>
   da292:	340a      	adds	r4, #10
   da294:	2509      	movs	r5, #9
   da296:	e7f3      	b.n	da280 <__s2b+0x52>
   da298:	f814 3b01 	ldrb.w	r3, [r4], #1
   da29c:	4601      	mov	r1, r0
   da29e:	3b30      	subs	r3, #48	; 0x30
   da2a0:	220a      	movs	r2, #10
   da2a2:	4630      	mov	r0, r6
   da2a4:	f7ff ff85 	bl	da1b2 <__multadd>
   da2a8:	e7eb      	b.n	da282 <__s2b+0x54>

000da2aa <__hi0bits>:
   da2aa:	0c03      	lsrs	r3, r0, #16
   da2ac:	041b      	lsls	r3, r3, #16
   da2ae:	b9d3      	cbnz	r3, da2e6 <__hi0bits+0x3c>
   da2b0:	0400      	lsls	r0, r0, #16
   da2b2:	2310      	movs	r3, #16
   da2b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da2b8:	bf04      	itt	eq
   da2ba:	0200      	lsleq	r0, r0, #8
   da2bc:	3308      	addeq	r3, #8
   da2be:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da2c2:	bf04      	itt	eq
   da2c4:	0100      	lsleq	r0, r0, #4
   da2c6:	3304      	addeq	r3, #4
   da2c8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da2cc:	bf04      	itt	eq
   da2ce:	0080      	lsleq	r0, r0, #2
   da2d0:	3302      	addeq	r3, #2
   da2d2:	2800      	cmp	r0, #0
   da2d4:	db05      	blt.n	da2e2 <__hi0bits+0x38>
   da2d6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da2da:	f103 0301 	add.w	r3, r3, #1
   da2de:	bf08      	it	eq
   da2e0:	2320      	moveq	r3, #32
   da2e2:	4618      	mov	r0, r3
   da2e4:	4770      	bx	lr
   da2e6:	2300      	movs	r3, #0
   da2e8:	e7e4      	b.n	da2b4 <__hi0bits+0xa>

000da2ea <__lo0bits>:
   da2ea:	6803      	ldr	r3, [r0, #0]
   da2ec:	f013 0207 	ands.w	r2, r3, #7
   da2f0:	4601      	mov	r1, r0
   da2f2:	d00b      	beq.n	da30c <__lo0bits+0x22>
   da2f4:	07da      	lsls	r2, r3, #31
   da2f6:	d424      	bmi.n	da342 <__lo0bits+0x58>
   da2f8:	0798      	lsls	r0, r3, #30
   da2fa:	bf49      	itett	mi
   da2fc:	085b      	lsrmi	r3, r3, #1
   da2fe:	089b      	lsrpl	r3, r3, #2
   da300:	2001      	movmi	r0, #1
   da302:	600b      	strmi	r3, [r1, #0]
   da304:	bf5c      	itt	pl
   da306:	600b      	strpl	r3, [r1, #0]
   da308:	2002      	movpl	r0, #2
   da30a:	4770      	bx	lr
   da30c:	b298      	uxth	r0, r3
   da30e:	b9b0      	cbnz	r0, da33e <__lo0bits+0x54>
   da310:	0c1b      	lsrs	r3, r3, #16
   da312:	2010      	movs	r0, #16
   da314:	f013 0fff 	tst.w	r3, #255	; 0xff
   da318:	bf04      	itt	eq
   da31a:	0a1b      	lsreq	r3, r3, #8
   da31c:	3008      	addeq	r0, #8
   da31e:	071a      	lsls	r2, r3, #28
   da320:	bf04      	itt	eq
   da322:	091b      	lsreq	r3, r3, #4
   da324:	3004      	addeq	r0, #4
   da326:	079a      	lsls	r2, r3, #30
   da328:	bf04      	itt	eq
   da32a:	089b      	lsreq	r3, r3, #2
   da32c:	3002      	addeq	r0, #2
   da32e:	07da      	lsls	r2, r3, #31
   da330:	d403      	bmi.n	da33a <__lo0bits+0x50>
   da332:	085b      	lsrs	r3, r3, #1
   da334:	f100 0001 	add.w	r0, r0, #1
   da338:	d005      	beq.n	da346 <__lo0bits+0x5c>
   da33a:	600b      	str	r3, [r1, #0]
   da33c:	4770      	bx	lr
   da33e:	4610      	mov	r0, r2
   da340:	e7e8      	b.n	da314 <__lo0bits+0x2a>
   da342:	2000      	movs	r0, #0
   da344:	4770      	bx	lr
   da346:	2020      	movs	r0, #32
   da348:	4770      	bx	lr

000da34a <__i2b>:
   da34a:	b510      	push	{r4, lr}
   da34c:	460c      	mov	r4, r1
   da34e:	2101      	movs	r1, #1
   da350:	f7ff fee4 	bl	da11c <_Balloc>
   da354:	2201      	movs	r2, #1
   da356:	6144      	str	r4, [r0, #20]
   da358:	6102      	str	r2, [r0, #16]
   da35a:	bd10      	pop	{r4, pc}

000da35c <__multiply>:
   da35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da360:	4615      	mov	r5, r2
   da362:	690a      	ldr	r2, [r1, #16]
   da364:	692b      	ldr	r3, [r5, #16]
   da366:	429a      	cmp	r2, r3
   da368:	bfb8      	it	lt
   da36a:	460b      	movlt	r3, r1
   da36c:	460c      	mov	r4, r1
   da36e:	bfbc      	itt	lt
   da370:	462c      	movlt	r4, r5
   da372:	461d      	movlt	r5, r3
   da374:	6927      	ldr	r7, [r4, #16]
   da376:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da37a:	68a3      	ldr	r3, [r4, #8]
   da37c:	6861      	ldr	r1, [r4, #4]
   da37e:	eb07 0609 	add.w	r6, r7, r9
   da382:	42b3      	cmp	r3, r6
   da384:	bfb8      	it	lt
   da386:	3101      	addlt	r1, #1
   da388:	b085      	sub	sp, #20
   da38a:	f7ff fec7 	bl	da11c <_Balloc>
   da38e:	f100 0114 	add.w	r1, r0, #20
   da392:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da396:	460b      	mov	r3, r1
   da398:	2200      	movs	r2, #0
   da39a:	4543      	cmp	r3, r8
   da39c:	d31d      	bcc.n	da3da <__multiply+0x7e>
   da39e:	f104 0314 	add.w	r3, r4, #20
   da3a2:	f105 0214 	add.w	r2, r5, #20
   da3a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da3aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da3ae:	9302      	str	r3, [sp, #8]
   da3b0:	1b3b      	subs	r3, r7, r4
   da3b2:	3b15      	subs	r3, #21
   da3b4:	f023 0303 	bic.w	r3, r3, #3
   da3b8:	3304      	adds	r3, #4
   da3ba:	f104 0515 	add.w	r5, r4, #21
   da3be:	42af      	cmp	r7, r5
   da3c0:	bf38      	it	cc
   da3c2:	2304      	movcc	r3, #4
   da3c4:	9301      	str	r3, [sp, #4]
   da3c6:	9b02      	ldr	r3, [sp, #8]
   da3c8:	9203      	str	r2, [sp, #12]
   da3ca:	4293      	cmp	r3, r2
   da3cc:	d808      	bhi.n	da3e0 <__multiply+0x84>
   da3ce:	2e00      	cmp	r6, #0
   da3d0:	dc5a      	bgt.n	da488 <__multiply+0x12c>
   da3d2:	6106      	str	r6, [r0, #16]
   da3d4:	b005      	add	sp, #20
   da3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3da:	f843 2b04 	str.w	r2, [r3], #4
   da3de:	e7dc      	b.n	da39a <__multiply+0x3e>
   da3e0:	f8b2 a000 	ldrh.w	sl, [r2]
   da3e4:	f1ba 0f00 	cmp.w	sl, #0
   da3e8:	d024      	beq.n	da434 <__multiply+0xd8>
   da3ea:	f104 0e14 	add.w	lr, r4, #20
   da3ee:	4689      	mov	r9, r1
   da3f0:	f04f 0c00 	mov.w	ip, #0
   da3f4:	f85e 5b04 	ldr.w	r5, [lr], #4
   da3f8:	f8d9 b000 	ldr.w	fp, [r9]
   da3fc:	b2ab      	uxth	r3, r5
   da3fe:	fa1f fb8b 	uxth.w	fp, fp
   da402:	fb0a b303 	mla	r3, sl, r3, fp
   da406:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da40a:	f8d9 5000 	ldr.w	r5, [r9]
   da40e:	4463      	add	r3, ip
   da410:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da414:	fb0a c50b 	mla	r5, sl, fp, ip
   da418:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da41c:	b29b      	uxth	r3, r3
   da41e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da422:	4577      	cmp	r7, lr
   da424:	f849 3b04 	str.w	r3, [r9], #4
   da428:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da42c:	d8e2      	bhi.n	da3f4 <__multiply+0x98>
   da42e:	9b01      	ldr	r3, [sp, #4]
   da430:	f841 c003 	str.w	ip, [r1, r3]
   da434:	9b03      	ldr	r3, [sp, #12]
   da436:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da43a:	3204      	adds	r2, #4
   da43c:	f1b9 0f00 	cmp.w	r9, #0
   da440:	d020      	beq.n	da484 <__multiply+0x128>
   da442:	680b      	ldr	r3, [r1, #0]
   da444:	f104 0c14 	add.w	ip, r4, #20
   da448:	468e      	mov	lr, r1
   da44a:	f04f 0a00 	mov.w	sl, #0
   da44e:	f8bc 5000 	ldrh.w	r5, [ip]
   da452:	f8be b002 	ldrh.w	fp, [lr, #2]
   da456:	fb09 b505 	mla	r5, r9, r5, fp
   da45a:	44aa      	add	sl, r5
   da45c:	b29b      	uxth	r3, r3
   da45e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da462:	f84e 3b04 	str.w	r3, [lr], #4
   da466:	f85c 3b04 	ldr.w	r3, [ip], #4
   da46a:	f8be 5000 	ldrh.w	r5, [lr]
   da46e:	0c1b      	lsrs	r3, r3, #16
   da470:	fb09 5303 	mla	r3, r9, r3, r5
   da474:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da478:	4567      	cmp	r7, ip
   da47a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da47e:	d8e6      	bhi.n	da44e <__multiply+0xf2>
   da480:	9d01      	ldr	r5, [sp, #4]
   da482:	514b      	str	r3, [r1, r5]
   da484:	3104      	adds	r1, #4
   da486:	e79e      	b.n	da3c6 <__multiply+0x6a>
   da488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da48c:	2b00      	cmp	r3, #0
   da48e:	d1a0      	bne.n	da3d2 <__multiply+0x76>
   da490:	3e01      	subs	r6, #1
   da492:	e79c      	b.n	da3ce <__multiply+0x72>

000da494 <__pow5mult>:
   da494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da498:	4615      	mov	r5, r2
   da49a:	f012 0203 	ands.w	r2, r2, #3
   da49e:	4606      	mov	r6, r0
   da4a0:	460f      	mov	r7, r1
   da4a2:	d007      	beq.n	da4b4 <__pow5mult+0x20>
   da4a4:	4c21      	ldr	r4, [pc, #132]	; (da52c <__pow5mult+0x98>)
   da4a6:	3a01      	subs	r2, #1
   da4a8:	2300      	movs	r3, #0
   da4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da4ae:	f7ff fe80 	bl	da1b2 <__multadd>
   da4b2:	4607      	mov	r7, r0
   da4b4:	10ad      	asrs	r5, r5, #2
   da4b6:	d035      	beq.n	da524 <__pow5mult+0x90>
   da4b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da4ba:	b93c      	cbnz	r4, da4cc <__pow5mult+0x38>
   da4bc:	2010      	movs	r0, #16
   da4be:	f7fc fac9 	bl	d6a54 <malloc>
   da4c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da4c6:	6270      	str	r0, [r6, #36]	; 0x24
   da4c8:	6004      	str	r4, [r0, #0]
   da4ca:	60c4      	str	r4, [r0, #12]
   da4cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da4d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da4d4:	b94c      	cbnz	r4, da4ea <__pow5mult+0x56>
   da4d6:	f240 2171 	movw	r1, #625	; 0x271
   da4da:	4630      	mov	r0, r6
   da4dc:	f7ff ff35 	bl	da34a <__i2b>
   da4e0:	2300      	movs	r3, #0
   da4e2:	f8c8 0008 	str.w	r0, [r8, #8]
   da4e6:	4604      	mov	r4, r0
   da4e8:	6003      	str	r3, [r0, #0]
   da4ea:	f04f 0900 	mov.w	r9, #0
   da4ee:	07eb      	lsls	r3, r5, #31
   da4f0:	d50a      	bpl.n	da508 <__pow5mult+0x74>
   da4f2:	4639      	mov	r1, r7
   da4f4:	4622      	mov	r2, r4
   da4f6:	4630      	mov	r0, r6
   da4f8:	f7ff ff30 	bl	da35c <__multiply>
   da4fc:	4639      	mov	r1, r7
   da4fe:	4680      	mov	r8, r0
   da500:	4630      	mov	r0, r6
   da502:	f7ff fe3f 	bl	da184 <_Bfree>
   da506:	4647      	mov	r7, r8
   da508:	106d      	asrs	r5, r5, #1
   da50a:	d00b      	beq.n	da524 <__pow5mult+0x90>
   da50c:	6820      	ldr	r0, [r4, #0]
   da50e:	b938      	cbnz	r0, da520 <__pow5mult+0x8c>
   da510:	4622      	mov	r2, r4
   da512:	4621      	mov	r1, r4
   da514:	4630      	mov	r0, r6
   da516:	f7ff ff21 	bl	da35c <__multiply>
   da51a:	6020      	str	r0, [r4, #0]
   da51c:	f8c0 9000 	str.w	r9, [r0]
   da520:	4604      	mov	r4, r0
   da522:	e7e4      	b.n	da4ee <__pow5mult+0x5a>
   da524:	4638      	mov	r0, r7
   da526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da52a:	bf00      	nop
   da52c:	000db4d0 	.word	0x000db4d0

000da530 <__lshift>:
   da530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da534:	460c      	mov	r4, r1
   da536:	6849      	ldr	r1, [r1, #4]
   da538:	6923      	ldr	r3, [r4, #16]
   da53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da53e:	68a3      	ldr	r3, [r4, #8]
   da540:	4607      	mov	r7, r0
   da542:	4691      	mov	r9, r2
   da544:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da548:	f108 0601 	add.w	r6, r8, #1
   da54c:	42b3      	cmp	r3, r6
   da54e:	db3f      	blt.n	da5d0 <__lshift+0xa0>
   da550:	4638      	mov	r0, r7
   da552:	f7ff fde3 	bl	da11c <_Balloc>
   da556:	2300      	movs	r3, #0
   da558:	4605      	mov	r5, r0
   da55a:	f100 0114 	add.w	r1, r0, #20
   da55e:	f100 0210 	add.w	r2, r0, #16
   da562:	4618      	mov	r0, r3
   da564:	4553      	cmp	r3, sl
   da566:	db36      	blt.n	da5d6 <__lshift+0xa6>
   da568:	6920      	ldr	r0, [r4, #16]
   da56a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da56e:	f104 0314 	add.w	r3, r4, #20
   da572:	f019 091f 	ands.w	r9, r9, #31
   da576:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da57a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da57e:	d02e      	beq.n	da5de <__lshift+0xae>
   da580:	f1c9 0e20 	rsb	lr, r9, #32
   da584:	468a      	mov	sl, r1
   da586:	2200      	movs	r2, #0
   da588:	6818      	ldr	r0, [r3, #0]
   da58a:	fa00 f009 	lsl.w	r0, r0, r9
   da58e:	4302      	orrs	r2, r0
   da590:	f84a 2b04 	str.w	r2, [sl], #4
   da594:	f853 2b04 	ldr.w	r2, [r3], #4
   da598:	459c      	cmp	ip, r3
   da59a:	fa22 f20e 	lsr.w	r2, r2, lr
   da59e:	d8f3      	bhi.n	da588 <__lshift+0x58>
   da5a0:	ebac 0304 	sub.w	r3, ip, r4
   da5a4:	3b15      	subs	r3, #21
   da5a6:	f023 0303 	bic.w	r3, r3, #3
   da5aa:	3304      	adds	r3, #4
   da5ac:	f104 0015 	add.w	r0, r4, #21
   da5b0:	4560      	cmp	r0, ip
   da5b2:	bf88      	it	hi
   da5b4:	2304      	movhi	r3, #4
   da5b6:	50ca      	str	r2, [r1, r3]
   da5b8:	b10a      	cbz	r2, da5be <__lshift+0x8e>
   da5ba:	f108 0602 	add.w	r6, r8, #2
   da5be:	3e01      	subs	r6, #1
   da5c0:	4638      	mov	r0, r7
   da5c2:	612e      	str	r6, [r5, #16]
   da5c4:	4621      	mov	r1, r4
   da5c6:	f7ff fddd 	bl	da184 <_Bfree>
   da5ca:	4628      	mov	r0, r5
   da5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da5d0:	3101      	adds	r1, #1
   da5d2:	005b      	lsls	r3, r3, #1
   da5d4:	e7ba      	b.n	da54c <__lshift+0x1c>
   da5d6:	f842 0f04 	str.w	r0, [r2, #4]!
   da5da:	3301      	adds	r3, #1
   da5dc:	e7c2      	b.n	da564 <__lshift+0x34>
   da5de:	3904      	subs	r1, #4
   da5e0:	f853 2b04 	ldr.w	r2, [r3], #4
   da5e4:	f841 2f04 	str.w	r2, [r1, #4]!
   da5e8:	459c      	cmp	ip, r3
   da5ea:	d8f9      	bhi.n	da5e0 <__lshift+0xb0>
   da5ec:	e7e7      	b.n	da5be <__lshift+0x8e>

000da5ee <__mcmp>:
   da5ee:	b530      	push	{r4, r5, lr}
   da5f0:	6902      	ldr	r2, [r0, #16]
   da5f2:	690c      	ldr	r4, [r1, #16]
   da5f4:	1b12      	subs	r2, r2, r4
   da5f6:	d10e      	bne.n	da616 <__mcmp+0x28>
   da5f8:	f100 0314 	add.w	r3, r0, #20
   da5fc:	3114      	adds	r1, #20
   da5fe:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da602:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da606:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da60a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da60e:	42a5      	cmp	r5, r4
   da610:	d003      	beq.n	da61a <__mcmp+0x2c>
   da612:	d305      	bcc.n	da620 <__mcmp+0x32>
   da614:	2201      	movs	r2, #1
   da616:	4610      	mov	r0, r2
   da618:	bd30      	pop	{r4, r5, pc}
   da61a:	4283      	cmp	r3, r0
   da61c:	d3f3      	bcc.n	da606 <__mcmp+0x18>
   da61e:	e7fa      	b.n	da616 <__mcmp+0x28>
   da620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da624:	e7f7      	b.n	da616 <__mcmp+0x28>

000da626 <__mdiff>:
   da626:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da62a:	460c      	mov	r4, r1
   da62c:	4606      	mov	r6, r0
   da62e:	4611      	mov	r1, r2
   da630:	4620      	mov	r0, r4
   da632:	4617      	mov	r7, r2
   da634:	f7ff ffdb 	bl	da5ee <__mcmp>
   da638:	1e05      	subs	r5, r0, #0
   da63a:	d108      	bne.n	da64e <__mdiff+0x28>
   da63c:	4629      	mov	r1, r5
   da63e:	4630      	mov	r0, r6
   da640:	f7ff fd6c 	bl	da11c <_Balloc>
   da644:	2301      	movs	r3, #1
   da646:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da64e:	bfa4      	itt	ge
   da650:	463b      	movge	r3, r7
   da652:	4627      	movge	r7, r4
   da654:	4630      	mov	r0, r6
   da656:	6879      	ldr	r1, [r7, #4]
   da658:	bfa6      	itte	ge
   da65a:	461c      	movge	r4, r3
   da65c:	2500      	movge	r5, #0
   da65e:	2501      	movlt	r5, #1
   da660:	f7ff fd5c 	bl	da11c <_Balloc>
   da664:	693e      	ldr	r6, [r7, #16]
   da666:	60c5      	str	r5, [r0, #12]
   da668:	6925      	ldr	r5, [r4, #16]
   da66a:	f107 0114 	add.w	r1, r7, #20
   da66e:	f104 0914 	add.w	r9, r4, #20
   da672:	f100 0e14 	add.w	lr, r0, #20
   da676:	f107 0210 	add.w	r2, r7, #16
   da67a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da67e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da682:	46f2      	mov	sl, lr
   da684:	2700      	movs	r7, #0
   da686:	f859 3b04 	ldr.w	r3, [r9], #4
   da68a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da68e:	fa1f f883 	uxth.w	r8, r3
   da692:	fa17 f78b 	uxtah	r7, r7, fp
   da696:	0c1b      	lsrs	r3, r3, #16
   da698:	eba7 0808 	sub.w	r8, r7, r8
   da69c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da6a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da6a4:	fa1f f888 	uxth.w	r8, r8
   da6a8:	141f      	asrs	r7, r3, #16
   da6aa:	454d      	cmp	r5, r9
   da6ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da6b0:	f84a 3b04 	str.w	r3, [sl], #4
   da6b4:	d8e7      	bhi.n	da686 <__mdiff+0x60>
   da6b6:	1b2b      	subs	r3, r5, r4
   da6b8:	3b15      	subs	r3, #21
   da6ba:	f023 0303 	bic.w	r3, r3, #3
   da6be:	3304      	adds	r3, #4
   da6c0:	3415      	adds	r4, #21
   da6c2:	42a5      	cmp	r5, r4
   da6c4:	bf38      	it	cc
   da6c6:	2304      	movcc	r3, #4
   da6c8:	4419      	add	r1, r3
   da6ca:	4473      	add	r3, lr
   da6cc:	469e      	mov	lr, r3
   da6ce:	460d      	mov	r5, r1
   da6d0:	4565      	cmp	r5, ip
   da6d2:	d30e      	bcc.n	da6f2 <__mdiff+0xcc>
   da6d4:	f10c 0203 	add.w	r2, ip, #3
   da6d8:	1a52      	subs	r2, r2, r1
   da6da:	f022 0203 	bic.w	r2, r2, #3
   da6de:	3903      	subs	r1, #3
   da6e0:	458c      	cmp	ip, r1
   da6e2:	bf38      	it	cc
   da6e4:	2200      	movcc	r2, #0
   da6e6:	441a      	add	r2, r3
   da6e8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da6ec:	b17b      	cbz	r3, da70e <__mdiff+0xe8>
   da6ee:	6106      	str	r6, [r0, #16]
   da6f0:	e7ab      	b.n	da64a <__mdiff+0x24>
   da6f2:	f855 8b04 	ldr.w	r8, [r5], #4
   da6f6:	fa17 f488 	uxtah	r4, r7, r8
   da6fa:	1422      	asrs	r2, r4, #16
   da6fc:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da700:	b2a4      	uxth	r4, r4
   da702:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da706:	f84e 4b04 	str.w	r4, [lr], #4
   da70a:	1417      	asrs	r7, r2, #16
   da70c:	e7e0      	b.n	da6d0 <__mdiff+0xaa>
   da70e:	3e01      	subs	r6, #1
   da710:	e7ea      	b.n	da6e8 <__mdiff+0xc2>
	...

000da714 <__ulp>:
   da714:	b082      	sub	sp, #8
   da716:	ed8d 0b00 	vstr	d0, [sp]
   da71a:	9b01      	ldr	r3, [sp, #4]
   da71c:	4912      	ldr	r1, [pc, #72]	; (da768 <__ulp+0x54>)
   da71e:	4019      	ands	r1, r3
   da720:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da724:	2900      	cmp	r1, #0
   da726:	dd05      	ble.n	da734 <__ulp+0x20>
   da728:	2200      	movs	r2, #0
   da72a:	460b      	mov	r3, r1
   da72c:	ec43 2b10 	vmov	d0, r2, r3
   da730:	b002      	add	sp, #8
   da732:	4770      	bx	lr
   da734:	4249      	negs	r1, r1
   da736:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da73a:	ea4f 5021 	mov.w	r0, r1, asr #20
   da73e:	f04f 0200 	mov.w	r2, #0
   da742:	f04f 0300 	mov.w	r3, #0
   da746:	da04      	bge.n	da752 <__ulp+0x3e>
   da748:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da74c:	fa41 f300 	asr.w	r3, r1, r0
   da750:	e7ec      	b.n	da72c <__ulp+0x18>
   da752:	f1a0 0114 	sub.w	r1, r0, #20
   da756:	291e      	cmp	r1, #30
   da758:	bfda      	itte	le
   da75a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da75e:	fa20 f101 	lsrle.w	r1, r0, r1
   da762:	2101      	movgt	r1, #1
   da764:	460a      	mov	r2, r1
   da766:	e7e1      	b.n	da72c <__ulp+0x18>
   da768:	7ff00000 	.word	0x7ff00000

000da76c <__b2d>:
   da76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da76e:	6905      	ldr	r5, [r0, #16]
   da770:	f100 0714 	add.w	r7, r0, #20
   da774:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da778:	1f2e      	subs	r6, r5, #4
   da77a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da77e:	4620      	mov	r0, r4
   da780:	f7ff fd93 	bl	da2aa <__hi0bits>
   da784:	f1c0 0320 	rsb	r3, r0, #32
   da788:	280a      	cmp	r0, #10
   da78a:	f8df c07c 	ldr.w	ip, [pc, #124]	; da808 <__b2d+0x9c>
   da78e:	600b      	str	r3, [r1, #0]
   da790:	dc14      	bgt.n	da7bc <__b2d+0x50>
   da792:	f1c0 0e0b 	rsb	lr, r0, #11
   da796:	fa24 f10e 	lsr.w	r1, r4, lr
   da79a:	42b7      	cmp	r7, r6
   da79c:	ea41 030c 	orr.w	r3, r1, ip
   da7a0:	bf34      	ite	cc
   da7a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da7a6:	2100      	movcs	r1, #0
   da7a8:	3015      	adds	r0, #21
   da7aa:	fa04 f000 	lsl.w	r0, r4, r0
   da7ae:	fa21 f10e 	lsr.w	r1, r1, lr
   da7b2:	ea40 0201 	orr.w	r2, r0, r1
   da7b6:	ec43 2b10 	vmov	d0, r2, r3
   da7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da7bc:	42b7      	cmp	r7, r6
   da7be:	bf3a      	itte	cc
   da7c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da7c4:	f1a5 0608 	subcc.w	r6, r5, #8
   da7c8:	2100      	movcs	r1, #0
   da7ca:	380b      	subs	r0, #11
   da7cc:	d017      	beq.n	da7fe <__b2d+0x92>
   da7ce:	f1c0 0c20 	rsb	ip, r0, #32
   da7d2:	fa04 f500 	lsl.w	r5, r4, r0
   da7d6:	42be      	cmp	r6, r7
   da7d8:	fa21 f40c 	lsr.w	r4, r1, ip
   da7dc:	ea45 0504 	orr.w	r5, r5, r4
   da7e0:	bf8c      	ite	hi
   da7e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da7e6:	2400      	movls	r4, #0
   da7e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da7ec:	fa01 f000 	lsl.w	r0, r1, r0
   da7f0:	fa24 f40c 	lsr.w	r4, r4, ip
   da7f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da7f8:	ea40 0204 	orr.w	r2, r0, r4
   da7fc:	e7db      	b.n	da7b6 <__b2d+0x4a>
   da7fe:	ea44 030c 	orr.w	r3, r4, ip
   da802:	460a      	mov	r2, r1
   da804:	e7d7      	b.n	da7b6 <__b2d+0x4a>
   da806:	bf00      	nop
   da808:	3ff00000 	.word	0x3ff00000

000da80c <__d2b>:
   da80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da810:	4689      	mov	r9, r1
   da812:	2101      	movs	r1, #1
   da814:	ec57 6b10 	vmov	r6, r7, d0
   da818:	4690      	mov	r8, r2
   da81a:	f7ff fc7f 	bl	da11c <_Balloc>
   da81e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da822:	4604      	mov	r4, r0
   da824:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da828:	bb35      	cbnz	r5, da878 <__d2b+0x6c>
   da82a:	2e00      	cmp	r6, #0
   da82c:	9301      	str	r3, [sp, #4]
   da82e:	d028      	beq.n	da882 <__d2b+0x76>
   da830:	4668      	mov	r0, sp
   da832:	9600      	str	r6, [sp, #0]
   da834:	f7ff fd59 	bl	da2ea <__lo0bits>
   da838:	9900      	ldr	r1, [sp, #0]
   da83a:	b300      	cbz	r0, da87e <__d2b+0x72>
   da83c:	9a01      	ldr	r2, [sp, #4]
   da83e:	f1c0 0320 	rsb	r3, r0, #32
   da842:	fa02 f303 	lsl.w	r3, r2, r3
   da846:	430b      	orrs	r3, r1
   da848:	40c2      	lsrs	r2, r0
   da84a:	6163      	str	r3, [r4, #20]
   da84c:	9201      	str	r2, [sp, #4]
   da84e:	9b01      	ldr	r3, [sp, #4]
   da850:	61a3      	str	r3, [r4, #24]
   da852:	2b00      	cmp	r3, #0
   da854:	bf14      	ite	ne
   da856:	2202      	movne	r2, #2
   da858:	2201      	moveq	r2, #1
   da85a:	6122      	str	r2, [r4, #16]
   da85c:	b1d5      	cbz	r5, da894 <__d2b+0x88>
   da85e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   da862:	4405      	add	r5, r0
   da864:	f8c9 5000 	str.w	r5, [r9]
   da868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da86c:	f8c8 0000 	str.w	r0, [r8]
   da870:	4620      	mov	r0, r4
   da872:	b003      	add	sp, #12
   da874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da87c:	e7d5      	b.n	da82a <__d2b+0x1e>
   da87e:	6161      	str	r1, [r4, #20]
   da880:	e7e5      	b.n	da84e <__d2b+0x42>
   da882:	a801      	add	r0, sp, #4
   da884:	f7ff fd31 	bl	da2ea <__lo0bits>
   da888:	9b01      	ldr	r3, [sp, #4]
   da88a:	6163      	str	r3, [r4, #20]
   da88c:	2201      	movs	r2, #1
   da88e:	6122      	str	r2, [r4, #16]
   da890:	3020      	adds	r0, #32
   da892:	e7e3      	b.n	da85c <__d2b+0x50>
   da894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   da898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da89c:	f8c9 0000 	str.w	r0, [r9]
   da8a0:	6918      	ldr	r0, [r3, #16]
   da8a2:	f7ff fd02 	bl	da2aa <__hi0bits>
   da8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   da8aa:	e7df      	b.n	da86c <__d2b+0x60>

000da8ac <__ratio>:
   da8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8b0:	4688      	mov	r8, r1
   da8b2:	4669      	mov	r1, sp
   da8b4:	4681      	mov	r9, r0
   da8b6:	f7ff ff59 	bl	da76c <__b2d>
   da8ba:	a901      	add	r1, sp, #4
   da8bc:	4640      	mov	r0, r8
   da8be:	ec55 4b10 	vmov	r4, r5, d0
   da8c2:	f7ff ff53 	bl	da76c <__b2d>
   da8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da8ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da8ce:	eba3 0c02 	sub.w	ip, r3, r2
   da8d2:	e9dd 3200 	ldrd	r3, r2, [sp]
   da8d6:	1a9b      	subs	r3, r3, r2
   da8d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   da8dc:	ec51 0b10 	vmov	r0, r1, d0
   da8e0:	2b00      	cmp	r3, #0
   da8e2:	bfd6      	itet	le
   da8e4:	460a      	movle	r2, r1
   da8e6:	462a      	movgt	r2, r5
   da8e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   da8ec:	468b      	mov	fp, r1
   da8ee:	462f      	mov	r7, r5
   da8f0:	bfd4      	ite	le
   da8f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   da8f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   da8fa:	4620      	mov	r0, r4
   da8fc:	ee10 2a10 	vmov	r2, s0
   da900:	465b      	mov	r3, fp
   da902:	4639      	mov	r1, r7
   da904:	f7fd fee8 	bl	d86d8 <__aeabi_ddiv>
   da908:	ec41 0b10 	vmov	d0, r0, r1
   da90c:	b003      	add	sp, #12
   da90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da912 <__copybits>:
   da912:	3901      	subs	r1, #1
   da914:	b570      	push	{r4, r5, r6, lr}
   da916:	1149      	asrs	r1, r1, #5
   da918:	6914      	ldr	r4, [r2, #16]
   da91a:	3101      	adds	r1, #1
   da91c:	f102 0314 	add.w	r3, r2, #20
   da920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da928:	1f05      	subs	r5, r0, #4
   da92a:	42a3      	cmp	r3, r4
   da92c:	d30c      	bcc.n	da948 <__copybits+0x36>
   da92e:	1aa3      	subs	r3, r4, r2
   da930:	3b11      	subs	r3, #17
   da932:	f023 0303 	bic.w	r3, r3, #3
   da936:	3211      	adds	r2, #17
   da938:	42a2      	cmp	r2, r4
   da93a:	bf88      	it	hi
   da93c:	2300      	movhi	r3, #0
   da93e:	4418      	add	r0, r3
   da940:	2300      	movs	r3, #0
   da942:	4288      	cmp	r0, r1
   da944:	d305      	bcc.n	da952 <__copybits+0x40>
   da946:	bd70      	pop	{r4, r5, r6, pc}
   da948:	f853 6b04 	ldr.w	r6, [r3], #4
   da94c:	f845 6f04 	str.w	r6, [r5, #4]!
   da950:	e7eb      	b.n	da92a <__copybits+0x18>
   da952:	f840 3b04 	str.w	r3, [r0], #4
   da956:	e7f4      	b.n	da942 <__copybits+0x30>

000da958 <__any_on>:
   da958:	f100 0214 	add.w	r2, r0, #20
   da95c:	6900      	ldr	r0, [r0, #16]
   da95e:	114b      	asrs	r3, r1, #5
   da960:	4298      	cmp	r0, r3
   da962:	b510      	push	{r4, lr}
   da964:	db11      	blt.n	da98a <__any_on+0x32>
   da966:	dd0a      	ble.n	da97e <__any_on+0x26>
   da968:	f011 011f 	ands.w	r1, r1, #31
   da96c:	d007      	beq.n	da97e <__any_on+0x26>
   da96e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da972:	fa24 f001 	lsr.w	r0, r4, r1
   da976:	fa00 f101 	lsl.w	r1, r0, r1
   da97a:	428c      	cmp	r4, r1
   da97c:	d10b      	bne.n	da996 <__any_on+0x3e>
   da97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da982:	4293      	cmp	r3, r2
   da984:	d803      	bhi.n	da98e <__any_on+0x36>
   da986:	2000      	movs	r0, #0
   da988:	bd10      	pop	{r4, pc}
   da98a:	4603      	mov	r3, r0
   da98c:	e7f7      	b.n	da97e <__any_on+0x26>
   da98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da992:	2900      	cmp	r1, #0
   da994:	d0f5      	beq.n	da982 <__any_on+0x2a>
   da996:	2001      	movs	r0, #1
   da998:	e7f6      	b.n	da988 <__any_on+0x30>

000da99a <_calloc_r>:
   da99a:	b513      	push	{r0, r1, r4, lr}
   da99c:	434a      	muls	r2, r1
   da99e:	4611      	mov	r1, r2
   da9a0:	9201      	str	r2, [sp, #4]
   da9a2:	f7fc f887 	bl	d6ab4 <_malloc_r>
   da9a6:	4604      	mov	r4, r0
   da9a8:	b118      	cbz	r0, da9b2 <_calloc_r+0x18>
   da9aa:	9a01      	ldr	r2, [sp, #4]
   da9ac:	2100      	movs	r1, #0
   da9ae:	f7fe f907 	bl	d8bc0 <memset>
   da9b2:	4620      	mov	r0, r4
   da9b4:	b002      	add	sp, #8
   da9b6:	bd10      	pop	{r4, pc}

000da9b8 <nan>:
   da9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; da9c0 <nan+0x8>
   da9bc:	4770      	bx	lr
   da9be:	bf00      	nop
   da9c0:	00000000 	.word	0x00000000
   da9c4:	7ff80000 	.word	0x7ff80000

000da9c8 <__ascii_wctomb>:
   da9c8:	b149      	cbz	r1, da9de <__ascii_wctomb+0x16>
   da9ca:	2aff      	cmp	r2, #255	; 0xff
   da9cc:	bf85      	ittet	hi
   da9ce:	238a      	movhi	r3, #138	; 0x8a
   da9d0:	6003      	strhi	r3, [r0, #0]
   da9d2:	700a      	strbls	r2, [r1, #0]
   da9d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   da9d8:	bf98      	it	ls
   da9da:	2001      	movls	r0, #1
   da9dc:	4770      	bx	lr
   da9de:	4608      	mov	r0, r1
   da9e0:	4770      	bx	lr
	...

000da9e4 <__aeabi_d2lz>:
   da9e4:	b538      	push	{r3, r4, r5, lr}
   da9e6:	2200      	movs	r2, #0
   da9e8:	2300      	movs	r3, #0
   da9ea:	4604      	mov	r4, r0
   da9ec:	460d      	mov	r5, r1
   da9ee:	f7fd ffbb 	bl	d8968 <__aeabi_dcmplt>
   da9f2:	b928      	cbnz	r0, daa00 <__aeabi_d2lz+0x1c>
   da9f4:	4620      	mov	r0, r4
   da9f6:	4629      	mov	r1, r5
   da9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da9fc:	f7fe b84c 	b.w	d8a98 <__aeabi_d2ulz>
   daa00:	4620      	mov	r0, r4
   daa02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   daa06:	f7fe f847 	bl	d8a98 <__aeabi_d2ulz>
   daa0a:	4240      	negs	r0, r0
   daa0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daa10:	bd38      	pop	{r3, r4, r5, pc}
   daa12:	bf00      	nop

000daa14 <dynalib_user>:
   daa14:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   daa24:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   daa34:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   daa44:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   daa54:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   daa64:	2000 4e00 206f 6144 6174 5500 6962 6f64     . .No Data.Ubido
   daa74:	7374 4820 6f6f 006b 6552 7073 6e6f 6573     ts Hook.Response
   daa84:	5220 6365 6965 6576 0064 7453 7461 0065      Received.State.
   daa94:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   daaa4:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   daab4:	6573 4d20 646f 0065 6553 2074 6f74 3320     se Mode.Set to 3
   daac4:	6472 5020 7261 7974 5320 6d69 5300 7465     rd Party Sim.Set
   daad4:	7420 206f 6150 7472 6369 656c 5320 6d69      to Particle Sim
   daae4:	4b00 6565 2070 6c41 7669 2065 6573 2074     .Keep Alive set 
   daaf4:	6f74 2520 2069 6573 0063 654b 7065 4120     to %i sec.Keep A
   dab04:	696c 6576 4c00 616f 6964 676e 5320 7379     live.Loading Sys
   dab14:	6574 206d 6544 6166 6c75 7374 4c00 616f     tem Defaults.Loa
   dab24:	6964 676e 4120 656c 7472 4420 6665 7561     ding Alert Defau
   dab34:	746c 0073 227b 6554 706d 7265 7461 7275     lts.{"Temperatur
   dab44:	2265 253a 2e34 6631 202c 4822 6d75 6469     e":%4.1f, "Humid
   dab54:	7469 2279 253a 2e34 6631 222c 6142 7474     ity":%4.1f,"Batt
   dab64:	7265 2279 253a 7d69 7300 6f74 6172 6567     ery":%i}.storage
   dab74:	662d 6361 6c69 7469 2d79 6f68 6b6f 4600     -facility-hook.F
   dab84:	6f72 206d 7325 7420 206f 7325 5300 6174     rom %s to %s.Sta
   dab94:	6574 5420 6172 736e 7469 6f69 006e 6554     te Transition.Te
   daba4:	706d 4d5f 7861 3a20 2520 2e33 6631 5400     mp_Max : %3.1f.T
   dabb4:	6d65 5f70 694d 206e 203a 3325 312e 0066     emp_Min : %3.1f.
   dabc4:	7548 696d 6964 7974 4d5f 7861 203a 3325     Humidity_Max: %3
   dabd4:	312e 0066 7548 696d 6964 7974 4d5f 6e69     .1f.Humidity_Min
   dabe4:	3a20 2520 2e33 6631 5500 7070 7265 5420      : %3.1f.Upper T
   dabf4:	7268 7365 6f68 646c 5320 7465 4c00 776f     hreshold Set.Low
   dac04:	7265 5420 7268 7365 6f68 646c 5320 7465     er Threshold Set
   dac14:	2500 2e34 6631 432a 2500 2e34 6631 2525     .%4.1f*C.%4.1f%%
   dac24:	2500 2069 2525 5200 6c65 6165 6573 7400     .%i %%.Release.t
   dac34:	6d65 6570 6172 7574 6572 6800 6d75 6469     emperature.humid
   dac44:	7469 0079 6574 706d 7265 7461 7275 2d65     ity.temperature-
   dac54:	7055 6570 0072 6574 706d 7265 7461 7275     Upper.temperatur
   dac64:	2d65 6f6c 6577 0072 7568 696d 6964 7974     e-lower.humidity
   dac74:	752d 7070 7265 6800 6d75 6469 7469 2d79     -upper.humidity-
   dac84:	6f6c 6577 0072 6142 7474 7265 0079 6142     lower.Battery.Ba
   dac94:	7474 7265 4379 6e6f 6574 7478 4b00 6565     tteryContext.Kee
   daca4:	2070 6c41 7669 2065 6553 0063 654d 7361     p Alive Sec.Meas
   dacb4:	7275 2d65 6f4e 0077 6556 6272 736f 2d65     ure-Now.Verbose-
   dacc4:	6f4d 6564 5400 6d65 2d70 7055 6570 2d72     Mode.Temp-Upper-
   dacd4:	694c 696d 0074 6554 706d 4c2d 776f 7265     Limit.Temp-Lower
   dace4:	4c2d 6d69 7469 4800 6d75 6469 7469 2d79     -Limit.Humidity-
   dacf4:	6f4c 6577 2d72 694c 696d 0074 7548 696d     Lower-Limit.Humi
   dad04:	7464 2d79 7075 6570 2d72 694c 696d 0074     dty-upper-Limit.
   dad14:	6954 656d 4500 7272 726f 2d20 5320 5448     Time.Error - SHT
   dad24:	3133 4920 696e 6974 6c61 7a69 7461 6f69     31 Initializatio
   dad34:	006e 7453 7261 7574 0070 7073 7261 2f6b     n.Startup.spark/
   dad44:	6564 6976 6563 732f 7365 6973 6e6f 652f     device/session/e
   dad54:	646e 4500 7272 726f 5320 6174 6574 2d20     nd.Error State -
   dad64:	5220 7365 7465 0000                          Reset..

000dad6c <_ZTV5Timer>:
	...
   dad74:	4221 000d 4275 000d 410d 000d               !B..uB...A..

000dad80 <_ZTV17PublishQueueAsync>:
	...
   dad88:	4119 000d 412d 000d 5709 000d 5895 000d     .A..-A...W...X..
   dad98:	5855 000d 5833 000d 59db 000d 587b 000d     UX..3X...Y..{X..

000dada8 <_ZTV8MB85RC64>:
	...
   dadb0:	4141 000d 4155 000d 54d9 000d 556f 000d     AA..UA...T..oU..
   dadc0:	55f1 000d aa28 000d aa30 000d aa34 000d     .U..(...0...4...
   dadd0:	aa3d 000d aa45 000d aa51 000d aa57 000d     =...E...Q...W...
   dade0:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dadf0:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dae20 <_ZL13releaseNumber>:
   dae20:	3131 302e 0032 0000                         11.02...

000dae28 <_ZL17FRAMversionNumber>:
   dae28:	0004 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dae38:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dae48:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dae58 <_ZTV6MB85RC>:
	...
   dae60:	53f9 000d 53fb 000d 54d9 000d 556f 000d     .S...S...T..oU..
   dae70:	55f1 000d 7550 6c62 7369 5168 6575 6575     .U..PublishQueue
   dae80:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   dae90:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   daea0:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   daeb0:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   daec0:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   daed0:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   daee0:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   daef0:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   daf00:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   daf10:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   daf20:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000daf30 <_ZTV21PublishQueueAsyncBase>:
	...
   daf40:	5709 000d 40a5 000d 40a5 000d 40a5 000d     .W...@...@...@..
   daf50:	40a5 000d 40a5 000d                         .@...@..

000daf58 <_ZTV25PublishQueueAsyncRetained>:
	...
   daf60:	57f1 000d 5805 000d 5709 000d 5895 000d     .W...X...W...X..
   daf70:	5855 000d 5833 000d 59db 000d 587b 000d     UX..3X...Y..{X..
   daf80:	6564 6976 6563 6552 6461 6620 6961 656c     deviceRead faile
   daf90:	2064 7473 7461 253d 0064 6573 2074 6954     d stat=%d.set Ti
   dafa0:	656d 6620 6f72 206d 5452 2043 7325 6400     me from RTC %s.d
   dafb0:	7665 6369 5765 6972 6574 6620 6961 656c     eviceWrite faile
   dafc0:	2064 7473 7461 253d 0064 6573 2074 5452     d stat=%d.set RT
   dafd0:	2043 7266 6d6f 6320 6f6c 6475 2520 0073     C from cloud %s.
   dafe0:	6c63 756f 2064 6974 656d 6e20 746f 7620     cloud time not v
   daff0:	6c61 6469 6400 7665 6369 5765 6972 6574     alid.deviceWrite
   db000:	4545 5250 4d4f 6620 6961 656c 2064 7473     EEPROM failed st
   db010:	7461 253d 0064 7061 2e70 7472 0063 0000     at=%d.app.rtc...

000db020 <_ZTV12MCP79410SRAM>:
	...
   db028:	5c8d 000d 5ca3 000d 5c7d 000d 5c81 000d     .\...\..}\...\..
   db038:	5ccd 000d 5fb5 000d 61d5 000d               .\..._...a..

000db044 <_ZTV12MCP79410Time>:
	...
   db04c:	5c91 000d 5c95 000d                         .\...\..

000db054 <_ZTV14MCP79410EEPROM>:
	...
   db05c:	5c8f 000d 5cb1 000d 5c85 000d 5c89 000d     .\...\...\...\..
   db06c:	5ccd 000d 5fef 000d 6415 000d               .\..._...d..

000db078 <_ZTV8MCP79410>:
	...
   db080:	5c93 000d 5cbf 000d                         .\...\..

000db088 <_ZTVN5spark13CellularClassE>:
	...
   db090:	6c1f 000d 6c15 000d 6c0b 000d 6bc1 000d     .l...l...l...k..
   db0a0:	6bff 000d 6bf3 000d 6be7 000d 6bdf 000d     .k...k...k...k..
   db0b0:	6bd5 000d 6bcb 000d 7555 000d               .k...k..Uu..

000db0bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db0c4:	6c59 000d 6c5f 000d 6c9d 000d 6c6d 000d     Yl.._l...l..ml..
   db0d4:	6c5b 000d                                   [l..

000db0d8 <_ZTVN5spark13EthernetClassE>:
	...
   db0e0:	7263 000d 7259 000d 724f 000d 7245 000d     cr..Yr..Or..Er..
   db0f0:	7239 000d 722d 000d 7221 000d 7219 000d     9r..-r..!r...r..
   db100:	720f 000d 7205 000d 7555 000d               .r...r..Uu..

000db10c <_ZTV7TwoWire>:
	...
   db114:	7281 000d 72cb 000d 72a3 000d 7283 000d     .r...r...r...r..
   db124:	72ab 000d 72b3 000d 72bb 000d 72c3 000d     .r...r...r...r..

000db134 <_ZTV9IPAddress>:
	...
   db13c:	7409 000d 73f9 000d 73fb 000d 7061 0070     .t...s...s..app.

000db14c <_ZTVN5spark12NetworkClassE>:
	...
   db154:	74ed 000d 74f7 000d 7501 000d 750b 000d     .t...t...u...u..
   db164:	7515 000d 7521 000d 752d 000d 7539 000d     .u..!u..-u..9u..
   db174:	7541 000d 754b 000d 7555 000d 005a 2b25     Au..Ku..Uu..Z.%+
   db184:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   db194:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   db1a4:	6974 656d 0000 0000                         time....

000db1ac <_ZTV11USARTSerial>:
	...
   db1b4:	7c21 000d 7c8d 000d 7c65 000d 763d 000d     !|...|..e|..=v..
   db1c4:	7c35 000d 7c51 000d 7c43 000d 7c5f 000d     5|..Q|..C|.._|..
   db1d4:	7c23 000d 7c27 000d                         #|..'|..

000db1dc <_ZTV9USBSerial>:
	...
   db1e4:	7d21 000d 7d89 000d 7d5f 000d 763d 000d     !}...}.._}..=v..
   db1f4:	7d51 000d 7d23 000d 7d33 000d 7d83 000d     Q}..#}..3}...}..
   db204:	7d43 000d 7d1d 000d                         C}...}..

000db20c <_ZSt7nothrow>:
   db20c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   db21c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000db22d <day_name.6145>:
   db22d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db23d:	6972 6153                                    riSat

000db242 <mon_name.6146>:
   db242:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db252:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db262:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000db274 <fpi.7566>:
   db274:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db284:	0000 0000                                   ....

000db288 <fpinan.7602>:
   db288:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000db2a0 <tinytens>:
   db2a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db2b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db2c0:	6f43 64ac 0628 1168                         Co.d(.h.

000db2c8 <_ctype_>:
   db2c8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db2d8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db2e8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db2f8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db308:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db318:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db328:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db338:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db348:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   db3c8:	2e00 0000                                   ....

000db3cc <_C_numeric_locale>:
   db3cc:	b3c9 000d b22c 000d e2a0 2003 4f50 4953     ....,...... POSI
   db3dc:	0058 0000                                   X...

000db3e0 <__mprec_bigtens>:
   db3e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db3f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db400:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db408 <__mprec_tens>:
   db408:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db418:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db428:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db438:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db448:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db458:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db468:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db478:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db488:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db498:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db4a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db4b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db4c8:	9db4 79d9 7843 44ea                         ...yCx.D

000db4d0 <p05.7490>:
   db4d0:	0005 0000 0019 0000 007d 0000               ........}...

000db4dc <link_const_variable_data_end>:
   db4dc:	000d50c9 	.word	0x000d50c9
   db4e0:	000d5c6d 	.word	0x000d5c6d
   db4e4:	000d6445 	.word	0x000d6445
   db4e8:	000d6b99 	.word	0x000d6b99
   db4ec:	000d6c29 	.word	0x000d6c29
   db4f0:	000d726d 	.word	0x000d726d
   db4f4:	000d74dd 	.word	0x000d74dd
   db4f8:	000d7629 	.word	0x000d7629
   db4fc:	000d7709 	.word	0x000d7709
   db500:	000d78cd 	.word	0x000d78cd
   db504:	000d7c0d 	.word	0x000d7c0d

000db508 <link_constructors_end>:
	...
