
/Users/chipmc/Documents/Maker/Particle/Projects/IDD_Cold-Chain/target/2.0.1/boron/IDD_Cold-Chain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006570  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000da590  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002a8  2003e1b0  000dad94  0001e1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000398  2003e458  2003e458  0002e458  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000db03c  000db03c  0002b03c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000db068  000db068  0002b068  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00178386  00000000  00000000  0002b06c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018b7d  00000000  00000000  001a33f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002dce3  00000000  00000000  001bbf6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002bf0  00000000  00000000  001e9c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000080f8  00000000  00000000  001ec842  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b761  00000000  00000000  001f493a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003e20f  00000000  00000000  0023009b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001102ea  00000000  00000000  0026e2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007f04  00000000  00000000  0037e594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fea1 	bl	d7d78 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fec3 	bl	d7dc8 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1b0 	.word	0x2003e1b0
   d404c:	000dad94 	.word	0x000dad94
   d4050:	2003e458 	.word	0x2003e458
   d4054:	2003e458 	.word	0x2003e458
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 f855 	bl	d7110 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da55c 	.word	0x000da55c
   d4080:	000da584 	.word	0x000da584

000d4084 <module_user_setup>:
   d4084:	f000 bc36 	b.w	d48f4 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 fd89 	bl	d4ba0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f002 bfff 	b.w	d7094 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bed7 	b.w	d5e48 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bed5 	b.w	d5e48 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bedb 	b.w	d5e58 <free>
	...

000d40a4 <__cxa_pure_virtual>:
   d40a4:	b508      	push	{r3, lr}
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fdbc 	bl	d5c28 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5989 	.word	0x000d5989

000d40b8 <__cxa_guard_acquire>:
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5d5 	.word	0x2003e5d5

000d40d4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40d4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40d6:	4904      	ldr	r1, [pc, #16]	; (d40e8 <_Z10measureNow6String+0x14>)
   d40d8:	f002 fd89 	bl	d6bee <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40dc:	b118      	cbz	r0, d40e6 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40de:	4b03      	ldr	r3, [pc, #12]	; (d40ec <_Z10measureNow6String+0x18>)
   d40e0:	2203      	movs	r2, #3
   d40e2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40e4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40e6:	bd08      	pop	{r3, pc}
   d40e8:	000d9c6b 	.word	0x000d9c6b
   d40ec:	2003e578 	.word	0x2003e578

000d40f0 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d40f0:	b510      	push	{r4, lr}
   d40f2:	4b03      	ldr	r3, [pc, #12]	; (d4100 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d40f4:	6003      	str	r3, [r0, #0]
   d40f6:	4604      	mov	r4, r0
   d40f8:	f001 f9a8 	bl	d544c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d40fc:	4620      	mov	r0, r4
   d40fe:	bd10      	pop	{r4, pc}
   d4100:	000d9f20 	.word	0x000d9f20

000d4104 <_ZN17PublishQueueAsyncD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff fff2 	bl	d40f0 <_ZN17PublishQueueAsyncD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2138      	movs	r1, #56	; 0x38
   d4110:	f003 f909 	bl	d7326 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN8MB85RC64D1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f000 ff8e 	bl	d5040 <_ZN6MB85RCD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000d9f48 	.word	0x000d9f48

000d412c <_ZN8MB85RC64D0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN8MB85RC64D1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2110      	movs	r1, #16
   d4138:	f003 f8f5 	bl	d7326 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4140:	b510      	push	{r4, lr}
   d4142:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4144:	6800      	ldr	r0, [r0, #0]
   d4146:	b108      	cbz	r0, d414c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4148:	f001 fe86 	bl	d5e58 <free>
class SystemClass {
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}

000d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4150:	2300      	movs	r3, #0
   d4152:	2204      	movs	r2, #4
   d4154:	f001 bdd8 	b.w	d5d08 <spark_variable>

000d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4158:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d415a:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d415c:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4160:	f88d 3000 	strb.w	r3, [sp]
   d4164:	f88d 5004 	strb.w	r5, [sp, #4]
   d4168:	68e4      	ldr	r4, [r4, #12]
   d416a:	233c      	movs	r3, #60	; 0x3c
   d416c:	47a0      	blx	r4
	}
   d416e:	b003      	add	sp, #12
   d4170:	bd30      	pop	{r4, r5, pc}
	...

000d4174 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4174:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4176:	4d1b      	ldr	r5, [pc, #108]	; (d41e4 <_Z14UbidotsHandlerPKcS0_+0x70>)
  if (!data) {                                                                    // First check to see if there is any data
   d4178:	460c      	mov	r4, r1
   d417a:	b959      	cbnz	r1, d4194 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   d417c:	78eb      	ldrb	r3, [r5, #3]
   d417e:	b32b      	cbz	r3, d41cc <_Z14UbidotsHandlerPKcS0_+0x58>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   d4180:	4b19      	ldr	r3, [pc, #100]	; (d41e8 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4182:	f88d 1000 	strb.w	r1, [sp]
   d4186:	781b      	ldrb	r3, [r3, #0]
   d4188:	4a18      	ldr	r2, [pc, #96]	; (d41ec <_Z14UbidotsHandlerPKcS0_+0x78>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d418a:	4919      	ldr	r1, [pc, #100]	; (d41f0 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d418c:	4819      	ldr	r0, [pc, #100]	; (d41f4 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d418e:	f7ff ffe3 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4192:	e01b      	b.n	d41cc <_Z14UbidotsHandlerPKcS0_+0x58>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4194:	4608      	mov	r0, r1
   d4196:	f003 fddc 	bl	d7d52 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d419a:	38c8      	subs	r0, #200	; 0xc8
   d419c:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   d419e:	78eb      	ldrb	r3, [r5, #3]
  if ((responseCode == 200) || (responseCode == 201))
   d41a0:	d816      	bhi.n	d41d0 <_Z14UbidotsHandlerPKcS0_+0x5c>
    if (sysStatus.verboseMode) {
   d41a2:	b14b      	cbz	r3, d41b8 <_Z14UbidotsHandlerPKcS0_+0x44>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d41a4:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   d41a6:	f88d 3000 	strb.w	r3, [sp]
   d41aa:	4b0f      	ldr	r3, [pc, #60]	; (d41e8 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d41ac:	4a12      	ldr	r2, [pc, #72]	; (d41f8 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d41ae:	781b      	ldrb	r3, [r3, #0]
   d41b0:	4912      	ldr	r1, [pc, #72]	; (d41fc <_Z14UbidotsHandlerPKcS0_+0x88>)
   d41b2:	4810      	ldr	r0, [pc, #64]	; (d41f4 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d41b4:	f7ff ffd0 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    alertsStatus.upperHumidityThresholdCrossed = false;
   d41b8:	4a11      	ldr	r2, [pc, #68]	; (d4200 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d41ba:	2300      	movs	r3, #0
    alertsStatus.upperTemperatureThreshold     = false;
   d41bc:	2100      	movs	r1, #0
   d41be:	6091      	str	r1, [r2, #8]
    alertsStatus.upperHumidityThresholdCrossed = false;
   d41c0:	8053      	strh	r3, [r2, #2]
    alertsStatusWriteNeeded = true;
   d41c2:	4a10      	ldr	r2, [pc, #64]	; (d4204 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d41c4:	2101      	movs	r1, #1
   d41c6:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   d41c8:	4a0f      	ldr	r2, [pc, #60]	; (d4208 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d41ca:	7013      	strb	r3, [r2, #0]
}
   d41cc:	b003      	add	sp, #12
   d41ce:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   d41d0:	2b00      	cmp	r3, #0
   d41d2:	d0fb      	beq.n	d41cc <_Z14UbidotsHandlerPKcS0_+0x58>
   d41d4:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d41d6:	f88d 3000 	strb.w	r3, [sp]
   d41da:	4b03      	ldr	r3, [pc, #12]	; (d41e8 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d41dc:	4622      	mov	r2, r4
   d41de:	781b      	ldrb	r3, [r3, #0]
   d41e0:	e7d3      	b.n	d418a <_Z14UbidotsHandlerPKcS0_+0x16>
   d41e2:	bf00      	nop
   d41e4:	2003e57c 	.word	0x2003e57c
   d41e8:	2003e468 	.word	0x2003e468
   d41ec:	000d9c6d 	.word	0x000d9c6d
   d41f0:	000d9c75 	.word	0x000d9c75
   d41f4:	2003e508 	.word	0x2003e508
   d41f8:	000d9c82 	.word	0x000d9c82
   d41fc:	000d9c94 	.word	0x000d9c94
   d4200:	2003e470 	.word	0x2003e470
   d4204:	2003e488 	.word	0x2003e488
   d4208:	2003e4b0 	.word	0x2003e4b0

000d420c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d420c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d420e:	4912      	ldr	r1, [pc, #72]	; (d4258 <_Z14setVerboseMode6String+0x4c>)
   d4210:	4605      	mov	r5, r0
   d4212:	f002 fcec 	bl	d6bee <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4216:	4604      	mov	r4, r0
   d4218:	b178      	cbz	r0, d423a <_Z14setVerboseMode6String+0x2e>
  {
    sysStatus.verboseMode = true;
   d421a:	4b10      	ldr	r3, [pc, #64]	; (d425c <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d421c:	4a10      	ldr	r2, [pc, #64]	; (d4260 <_Z14setVerboseMode6String+0x54>)
    sysStatus.verboseMode = true;
   d421e:	2401      	movs	r4, #1
   d4220:	70dc      	strb	r4, [r3, #3]
   d4222:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4224:	f88d 3000 	strb.w	r3, [sp]
   d4228:	4b0e      	ldr	r3, [pc, #56]	; (d4264 <_Z14setVerboseMode6String+0x58>)
   d422a:	781b      	ldrb	r3, [r3, #0]
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d422c:	490e      	ldr	r1, [pc, #56]	; (d4268 <_Z14setVerboseMode6String+0x5c>)
   d422e:	480f      	ldr	r0, [pc, #60]	; (d426c <_Z14setVerboseMode6String+0x60>)
   d4230:	f7ff ff92 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4234:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4236:	b003      	add	sp, #12
   d4238:	bd30      	pop	{r4, r5, pc}
   d423a:	490d      	ldr	r1, [pc, #52]	; (d4270 <_Z14setVerboseMode6String+0x64>)
   d423c:	4628      	mov	r0, r5
   d423e:	f002 fcd6 	bl	d6bee <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4242:	2800      	cmp	r0, #0
   d4244:	d0f7      	beq.n	d4236 <_Z14setVerboseMode6String+0x2a>
    sysStatus.verboseMode = false;
   d4246:	4b05      	ldr	r3, [pc, #20]	; (d425c <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4248:	4a0a      	ldr	r2, [pc, #40]	; (d4274 <_Z14setVerboseMode6String+0x68>)
    sysStatus.verboseMode = false;
   d424a:	70dc      	strb	r4, [r3, #3]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d424c:	4b05      	ldr	r3, [pc, #20]	; (d4264 <_Z14setVerboseMode6String+0x58>)
   d424e:	f88d 4000 	strb.w	r4, [sp]
   d4252:	781b      	ldrb	r3, [r3, #0]
   d4254:	e7ea      	b.n	d422c <_Z14setVerboseMode6String+0x20>
   d4256:	bf00      	nop
   d4258:	000d9c6b 	.word	0x000d9c6b
   d425c:	2003e57c 	.word	0x2003e57c
   d4260:	000d9c9a 	.word	0x000d9c9a
   d4264:	2003e468 	.word	0x2003e468
   d4268:	000d9cbd 	.word	0x000d9cbd
   d426c:	2003e508 	.word	0x2003e508
   d4270:	000d9cab 	.word	0x000d9cab
   d4274:	000d9cad 	.word	0x000d9cad

000d4278 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4278:	b507      	push	{r0, r1, r2, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d427a:	f001 fd5d 	bl	d5d38 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d427e:	b148      	cbz	r0, d4294 <_Z18loadSystemDefaultsv+0x1c>
   d4280:	2300      	movs	r3, #0
   d4282:	f88d 3000 	strb.w	r3, [sp]
   d4286:	4b0a      	ldr	r3, [pc, #40]	; (d42b0 <_Z18loadSystemDefaultsv+0x38>)
   d4288:	4a0a      	ldr	r2, [pc, #40]	; (d42b4 <_Z18loadSystemDefaultsv+0x3c>)
   d428a:	781b      	ldrb	r3, [r3, #0]
   d428c:	490a      	ldr	r1, [pc, #40]	; (d42b8 <_Z18loadSystemDefaultsv+0x40>)
   d428e:	480b      	ldr	r0, [pc, #44]	; (d42bc <_Z18loadSystemDefaultsv+0x44>)
   d4290:	f7ff ff62 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d4294:	4a0a      	ldr	r2, [pc, #40]	; (d42c0 <_Z18loadSystemDefaultsv+0x48>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4296:	480b      	ldr	r0, [pc, #44]	; (d42c4 <_Z18loadSystemDefaultsv+0x4c>)
  sysStatus.verboseMode = false;
   d4298:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d429a:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d429c:	70d3      	strb	r3, [r2, #3]
  sysStatus.lowBatteryMode = false;
   d429e:	7153      	strb	r3, [r2, #5]
   d42a0:	2318      	movs	r3, #24
  sysStatus.structuresVersion = 1;
   d42a2:	7011      	strb	r1, [r2, #0]
}
   d42a4:	b003      	add	sp, #12
   d42a6:	f85d eb04 	ldr.w	lr, [sp], #4
   d42aa:	f000 bf84 	b.w	d51b6 <_ZN6MB85RC9writeDataEjPKhj>
   d42ae:	bf00      	nop
   d42b0:	2003e468 	.word	0x2003e468
   d42b4:	000d9cc2 	.word	0x000d9cc2
   d42b8:	000d9cbd 	.word	0x000d9cbd
   d42bc:	2003e508 	.word	0x2003e508
   d42c0:	2003e57c 	.word	0x2003e57c
   d42c4:	2003e4b4 	.word	0x2003e4b4

000d42c8 <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d42c8:	b507      	push	{r0, r1, r2, lr}
   d42ca:	f001 fd35 	bl	d5d38 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   d42ce:	b148      	cbz	r0, d42e4 <_Z17loadAlertDefaultsv+0x1c>
   d42d0:	2300      	movs	r3, #0
   d42d2:	f88d 3000 	strb.w	r3, [sp]
   d42d6:	4b0c      	ldr	r3, [pc, #48]	; (d4308 <_Z17loadAlertDefaultsv+0x40>)
   d42d8:	4a0c      	ldr	r2, [pc, #48]	; (d430c <_Z17loadAlertDefaultsv+0x44>)
   d42da:	781b      	ldrb	r3, [r3, #0]
   d42dc:	490c      	ldr	r1, [pc, #48]	; (d4310 <_Z17loadAlertDefaultsv+0x48>)
   d42de:	480d      	ldr	r0, [pc, #52]	; (d4314 <_Z17loadAlertDefaultsv+0x4c>)
   d42e0:	f7ff ff3a 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  alertsStatus.upperTemperatureThreshold = 30;
   d42e4:	4a0c      	ldr	r2, [pc, #48]	; (d4318 <_Z17loadAlertDefaultsv+0x50>)
   d42e6:	4b0d      	ldr	r3, [pc, #52]	; (d431c <_Z17loadAlertDefaultsv+0x54>)
   d42e8:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   d42ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d42ee:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   d42f0:	4b0b      	ldr	r3, [pc, #44]	; (d4320 <_Z17loadAlertDefaultsv+0x58>)
   d42f2:	6113      	str	r3, [r2, #16]
   d42f4:	480b      	ldr	r0, [pc, #44]	; (d4324 <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   d42f6:	4b0c      	ldr	r3, [pc, #48]	; (d4328 <_Z17loadAlertDefaultsv+0x60>)
   d42f8:	6153      	str	r3, [r2, #20]
   d42fa:	2150      	movs	r1, #80	; 0x50
   d42fc:	2318      	movs	r3, #24
}
   d42fe:	b003      	add	sp, #12
   d4300:	f85d eb04 	ldr.w	lr, [sp], #4
   d4304:	f000 bf57 	b.w	d51b6 <_ZN6MB85RC9writeDataEjPKhj>
   d4308:	2003e468 	.word	0x2003e468
   d430c:	000d9cda 	.word	0x000d9cda
   d4310:	000d9cbd 	.word	0x000d9cbd
   d4314:	2003e508 	.word	0x2003e508
   d4318:	2003e470 	.word	0x2003e470
   d431c:	41f00000 	.word	0x41f00000
   d4320:	42b40000 	.word	0x42b40000
   d4324:	2003e4b4 	.word	0x2003e4b4
   d4328:	40a00000 	.word	0x40a00000

000d432c <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d432c:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d432e:	4c0f      	ldr	r4, [pc, #60]	; (d436c <_Z17checkSystemValuesv+0x40>)
   d4330:	78a3      	ldrb	r3, [r4, #2]
   d4332:	2b01      	cmp	r3, #1
   d4334:	d904      	bls.n	d4340 <_Z17checkSystemValuesv+0x14>
   d4336:	f001 fcff 	bl	d5d38 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d433a:	b1a0      	cbz	r0, d4366 <_Z17checkSystemValuesv+0x3a>
   d433c:	2301      	movs	r3, #1
   d433e:	70a3      	strb	r3, [r4, #2]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4340:	78e3      	ldrb	r3, [r4, #3]
   d4342:	2b01      	cmp	r3, #1
   d4344:	bf84      	itt	hi
   d4346:	2300      	movhi	r3, #0
   d4348:	70e3      	strbhi	r3, [r4, #3]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d434a:	7963      	ldrb	r3, [r4, #5]
   d434c:	2b01      	cmp	r3, #1
   d434e:	bf84      	itt	hi
   d4350:	2300      	movhi	r3, #0
   d4352:	7163      	strbhi	r3, [r4, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4354:	6923      	ldr	r3, [r4, #16]
   d4356:	2bff      	cmp	r3, #255	; 0xff
   d4358:	bf84      	itt	hi
   d435a:	2300      	movhi	r3, #0
   d435c:	6123      	strhi	r3, [r4, #16]
  systemStatusWriteNeeded = true;
   d435e:	4b04      	ldr	r3, [pc, #16]	; (d4370 <_Z17checkSystemValuesv+0x44>)
   d4360:	2201      	movs	r2, #1
   d4362:	701a      	strb	r2, [r3, #0]
}
   d4364:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4366:	70a0      	strb	r0, [r4, #2]
   d4368:	e7ea      	b.n	d4340 <_Z17checkSystemValuesv+0x14>
   d436a:	bf00      	nop
   d436c:	2003e57c 	.word	0x2003e57c
   d4370:	2003e594 	.word	0x2003e594

000d4374 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0 || alertsStatus.lowerTemperatureThreshold > 20) alertsStatus.lowerTemperatureThreshold = 3;
   d4374:	4b22      	ldr	r3, [pc, #136]	; (d4400 <_Z17checkAlertsValuesv+0x8c>)
   d4376:	ed93 7a03 	vldr	s14, [r3, #12]
   d437a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4382:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4386:	d404      	bmi.n	d4392 <_Z17checkAlertsValuesv+0x1e>
   d4388:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4390:	dd01      	ble.n	d4396 <_Z17checkAlertsValuesv+0x22>
   d4392:	4a1c      	ldr	r2, [pc, #112]	; (d4404 <_Z17checkAlertsValuesv+0x90>)
   d4394:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20 || alertsStatus.lowerTemperatureThreshold > 60) alertsStatus.lowerTemperatureThreshold = 30;
   d4396:	ed93 7a02 	vldr	s14, [r3, #8]
   d439a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43a2:	d408      	bmi.n	d43b6 <_Z17checkAlertsValuesv+0x42>
   d43a4:	edd3 6a03 	vldr	s13, [r3, #12]
   d43a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; d4408 <_Z17checkAlertsValuesv+0x94>
   d43ac:	eef4 6ac7 	vcmpe.f32	s13, s14
   d43b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43b4:	dd01      	ble.n	d43ba <_Z17checkAlertsValuesv+0x46>
   d43b6:	4a15      	ldr	r2, [pc, #84]	; (d440c <_Z17checkAlertsValuesv+0x98>)
   d43b8:	60da      	str	r2, [r3, #12]
  if (alertsStatus.lowerHumidityThreshold < 0 || alertsStatus.lowerHumidityThreshold > 20) alertsStatus.lowerHumidityThreshold = 13;
   d43ba:	ed93 7a05 	vldr	s14, [r3, #20]
   d43be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d43c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43c6:	d404      	bmi.n	d43d2 <_Z17checkAlertsValuesv+0x5e>
   d43c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d43cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43d0:	dd01      	ble.n	d43d6 <_Z17checkAlertsValuesv+0x62>
   d43d2:	4a0f      	ldr	r2, [pc, #60]	; (d4410 <_Z17checkAlertsValuesv+0x9c>)
   d43d4:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20 || alertsStatus.upperHumidityThreshold > 90) alertsStatus.upperHumidityThreshold = 30;
   d43d6:	ed93 7a04 	vldr	s14, [r3, #16]
   d43da:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d43de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43e2:	d406      	bmi.n	d43f2 <_Z17checkAlertsValuesv+0x7e>
   d43e4:	eddf 7a0b 	vldr	s15, [pc, #44]	; d4414 <_Z17checkAlertsValuesv+0xa0>
   d43e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d43ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43f0:	dd01      	ble.n	d43f6 <_Z17checkAlertsValuesv+0x82>
   d43f2:	4a06      	ldr	r2, [pc, #24]	; (d440c <_Z17checkAlertsValuesv+0x98>)
   d43f4:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   d43f6:	4b08      	ldr	r3, [pc, #32]	; (d4418 <_Z17checkAlertsValuesv+0xa4>)
   d43f8:	2201      	movs	r2, #1
   d43fa:	701a      	strb	r2, [r3, #0]
}
   d43fc:	4770      	bx	lr
   d43fe:	bf00      	nop
   d4400:	2003e470 	.word	0x2003e470
   d4404:	40400000 	.word	0x40400000
   d4408:	42700000 	.word	0x42700000
   d440c:	41f00000 	.word	0x41f00000
   d4410:	41500000 	.word	0x41500000
   d4414:	42b40000 	.word	0x42b40000
   d4418:	2003e488 	.word	0x2003e488

000d441c <_Z11petWatchdogv>:
{
   d441c:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
   d441e:	2101      	movs	r1, #1
   d4420:	2005      	movs	r0, #5
   d4422:	f002 ff0e 	bl	d7242 <digitalWrite>
  digitalWrite(donePin, LOW);
   d4426:	2100      	movs	r1, #0
   d4428:	2005      	movs	r0, #5
   d442a:	f002 ff0a 	bl	d7242 <digitalWrite>
  watchdogFlag = false;
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <_Z11petWatchdogv+0x1c>)
   d4430:	2200      	movs	r2, #0
   d4432:	701a      	strb	r2, [r3, #0]
}
   d4434:	bd08      	pop	{r3, pc}
   d4436:	bf00      	nop
   d4438:	2003e5d5 	.word	0x2003e5d5

000d443c <_Z9sendEventv>:
{
   d443c:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d443e:	4b14      	ldr	r3, [pc, #80]	; (d4490 <_Z9sendEventv+0x54>)
{
   d4440:	b0a1      	sub	sp, #132	; 0x84
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d4442:	699a      	ldr	r2, [r3, #24]
   d4444:	9204      	str	r2, [sp, #16]
   d4446:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   d444a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d444e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   d4452:	2164      	movs	r1, #100	; 0x64
   d4454:	e9cd 2300 	strd	r2, r3, [sp]
   d4458:	a807      	add	r0, sp, #28
   d445a:	4a0e      	ldr	r2, [pc, #56]	; (d4494 <_Z9sendEventv+0x58>)
   d445c:	f001 fd14 	bl	d5e88 <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   d4460:	2300      	movs	r3, #0
   d4462:	f88d 3000 	strb.w	r3, [sp]
   d4466:	4b0c      	ldr	r3, [pc, #48]	; (d4498 <_Z9sendEventv+0x5c>)
   d4468:	490c      	ldr	r1, [pc, #48]	; (d449c <_Z9sendEventv+0x60>)
   d446a:	781b      	ldrb	r3, [r3, #0]
   d446c:	480c      	ldr	r0, [pc, #48]	; (d44a0 <_Z9sendEventv+0x64>)
   d446e:	aa07      	add	r2, sp, #28
   d4470:	f7ff fe72 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d4474:	f002 fcd4 	bl	d6e20 <_ZN9TimeClass4hourEv>
   d4478:	4b0a      	ldr	r3, [pc, #40]	; (d44a4 <_Z9sendEventv+0x68>)
   d447a:	6018      	str	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d447c:	4b0a      	ldr	r3, [pc, #40]	; (d44a8 <_Z9sendEventv+0x6c>)
   d447e:	2201      	movs	r2, #1
   d4480:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4482:	f001 fa89 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4486:	4b09      	ldr	r3, [pc, #36]	; (d44ac <_Z9sendEventv+0x70>)
   d4488:	6018      	str	r0, [r3, #0]
}
   d448a:	b021      	add	sp, #132	; 0x84
   d448c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4490:	2003e548 	.word	0x2003e548
   d4494:	000d9cf1 	.word	0x000d9cf1
   d4498:	2003e468 	.word	0x2003e468
   d449c:	000d9d26 	.word	0x000d9d26
   d44a0:	2003e508 	.word	0x2003e508
   d44a4:	2003e4ac 	.word	0x2003e4ac
   d44a8:	2003e4b0 	.word	0x2003e4b0
   d44ac:	2003e5d8 	.word	0x2003e5d8

000d44b0 <_Z8blinkLEDi>:
{
   d44b0:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   d44b2:	4d0b      	ldr	r5, [pc, #44]	; (d44e0 <_Z8blinkLEDi+0x30>)
{
   d44b4:	4604      	mov	r4, r0
   d44b6:	f001 fa6f 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   d44ba:	682b      	ldr	r3, [r5, #0]
   d44bc:	1ac0      	subs	r0, r0, r3
   d44be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d44c2:	d90c      	bls.n	d44de <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   d44c4:	b2a4      	uxth	r4, r4
   d44c6:	4620      	mov	r0, r4
   d44c8:	f002 fed4 	bl	d7274 <digitalRead>
   d44cc:	fab0 f180 	clz	r1, r0
   d44d0:	0949      	lsrs	r1, r1, #5
   d44d2:	4620      	mov	r0, r4
   d44d4:	f002 feb5 	bl	d7242 <digitalWrite>
   d44d8:	f001 fa5e 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   d44dc:	6028      	str	r0, [r5, #0]
}
   d44de:	bd38      	pop	{r3, r4, r5, pc}
   d44e0:	2003e46c 	.word	0x2003e46c

000d44e4 <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
   d44e4:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d44e6:	4d13      	ldr	r5, [pc, #76]	; (d4534 <_Z22publishStateTransitionv+0x50>)
   d44e8:	4c13      	ldr	r4, [pc, #76]	; (d4538 <_Z22publishStateTransitionv+0x54>)
   d44ea:	4914      	ldr	r1, [pc, #80]	; (d453c <_Z22publishStateTransitionv+0x58>)
   d44ec:	782a      	ldrb	r2, [r5, #0]
   d44ee:	7820      	ldrb	r0, [r4, #0]
{
   d44f0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d44f2:	231a      	movs	r3, #26
   d44f4:	fb03 1202 	mla	r2, r3, r2, r1
   d44f8:	9200      	str	r2, [sp, #0]
   d44fa:	fb03 1300 	mla	r3, r3, r0, r1
   d44fe:	4a10      	ldr	r2, [pc, #64]	; (d4540 <_Z22publishStateTransitionv+0x5c>)
   d4500:	2128      	movs	r1, #40	; 0x28
   d4502:	a802      	add	r0, sp, #8
   d4504:	f001 fcc0 	bl	d5e88 <snprintf>
  oldState = state;
   d4508:	782b      	ldrb	r3, [r5, #0]
   d450a:	7023      	strb	r3, [r4, #0]
   d450c:	f001 fc14 	bl	d5d38 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4510:	b148      	cbz	r0, d4526 <_Z22publishStateTransitionv+0x42>
   d4512:	2300      	movs	r3, #0
    publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4514:	f88d 3000 	strb.w	r3, [sp]
   d4518:	4b0a      	ldr	r3, [pc, #40]	; (d4544 <_Z22publishStateTransitionv+0x60>)
   d451a:	490b      	ldr	r1, [pc, #44]	; (d4548 <_Z22publishStateTransitionv+0x64>)
   d451c:	781b      	ldrb	r3, [r3, #0]
   d451e:	480b      	ldr	r0, [pc, #44]	; (d454c <_Z22publishStateTransitionv+0x68>)
   d4520:	aa02      	add	r2, sp, #8
   d4522:	f7ff fe19 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  Serial.println(stateTransitionString);
   d4526:	f002 fd69 	bl	d6ffc <_Z16_fetch_usbserialv>
   d452a:	a902      	add	r1, sp, #8
   d452c:	f002 fa9f 	bl	d6a6e <_ZN5Print7printlnEPKc>
}
   d4530:	b00d      	add	sp, #52	; 0x34
   d4532:	bd30      	pop	{r4, r5, pc}
   d4534:	2003e578 	.word	0x2003e578
   d4538:	2003e504 	.word	0x2003e504
   d453c:	2003e1b0 	.word	0x2003e1b0
   d4540:	000d9d3c 	.word	0x000d9d3c
   d4544:	2003e468 	.word	0x2003e468
   d4548:	000d9d4a 	.word	0x000d9d4a
   d454c:	2003e508 	.word	0x2003e508

000d4550 <_Z20updateThresholdValuev>:
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   d4550:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   d4552:	4c15      	ldr	r4, [pc, #84]	; (d45a8 <_Z20updateThresholdValuev+0x58>)
   d4554:	68a0      	ldr	r0, [r4, #8]
   d4556:	f003 f853 	bl	d7600 <__aeabi_f2d>
   d455a:	4a14      	ldr	r2, [pc, #80]	; (d45ac <_Z20updateThresholdValuev+0x5c>)
   d455c:	e9cd 0100 	strd	r0, r1, [sp]
   d4560:	2118      	movs	r1, #24
   d4562:	4813      	ldr	r0, [pc, #76]	; (d45b0 <_Z20updateThresholdValuev+0x60>)
   d4564:	f001 fc90 	bl	d5e88 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   d4568:	68e0      	ldr	r0, [r4, #12]
   d456a:	f003 f849 	bl	d7600 <__aeabi_f2d>
   d456e:	4a11      	ldr	r2, [pc, #68]	; (d45b4 <_Z20updateThresholdValuev+0x64>)
   d4570:	e9cd 0100 	strd	r0, r1, [sp]
   d4574:	2118      	movs	r1, #24
   d4576:	4810      	ldr	r0, [pc, #64]	; (d45b8 <_Z20updateThresholdValuev+0x68>)
   d4578:	f001 fc86 	bl	d5e88 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   d457c:	6920      	ldr	r0, [r4, #16]
   d457e:	f003 f83f 	bl	d7600 <__aeabi_f2d>
   d4582:	4a0e      	ldr	r2, [pc, #56]	; (d45bc <_Z20updateThresholdValuev+0x6c>)
   d4584:	e9cd 0100 	strd	r0, r1, [sp]
   d4588:	2118      	movs	r1, #24
   d458a:	480d      	ldr	r0, [pc, #52]	; (d45c0 <_Z20updateThresholdValuev+0x70>)
   d458c:	f001 fc7c 	bl	d5e88 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   d4590:	6960      	ldr	r0, [r4, #20]
   d4592:	f003 f835 	bl	d7600 <__aeabi_f2d>
   d4596:	4a0b      	ldr	r2, [pc, #44]	; (d45c4 <_Z20updateThresholdValuev+0x74>)
   d4598:	e9cd 0100 	strd	r0, r1, [sp]
   d459c:	2118      	movs	r1, #24
   d459e:	480a      	ldr	r0, [pc, #40]	; (d45c8 <_Z20updateThresholdValuev+0x78>)
   d45a0:	f001 fc72 	bl	d5e88 <snprintf>
} 
   d45a4:	b002      	add	sp, #8
   d45a6:	bd10      	pop	{r4, pc}
   d45a8:	2003e470 	.word	0x2003e470
   d45ac:	000d9d5b 	.word	0x000d9d5b
   d45b0:	2003e5bd 	.word	0x2003e5bd
   d45b4:	000d9d6c 	.word	0x000d9d6c
   d45b8:	2003e4ec 	.word	0x2003e4ec
   d45bc:	000d9d7d 	.word	0x000d9d7d
   d45c0:	2003e5a5 	.word	0x2003e5a5
   d45c4:	000d9d91 	.word	0x000d9d91
   d45c8:	2003e4d4 	.word	0x2003e4d4

000d45cc <_Z17setUpperTempLimit6String>:
{
   d45cc:	b500      	push	{lr}
   d45ce:	b089      	sub	sp, #36	; 0x24
   d45d0:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d45d2:	f002 fb37 	bl	d6c44 <_ZNK6String7toFloatEv>
   d45d6:	4b0d      	ldr	r3, [pc, #52]	; (d460c <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d45d8:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d45da:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d45de:	a804      	add	r0, sp, #16
   d45e0:	f002 fafa 	bl	d6bd8 <_ZN6StringC1ERKS_>
   d45e4:	2300      	movs	r3, #0
   d45e6:	f88d 3000 	strb.w	r3, [sp]
   d45ea:	4b09      	ldr	r3, [pc, #36]	; (d4610 <_Z17setUpperTempLimit6String+0x44>)
   d45ec:	9a04      	ldr	r2, [sp, #16]
   d45ee:	781b      	ldrb	r3, [r3, #0]
   d45f0:	4908      	ldr	r1, [pc, #32]	; (d4614 <_Z17setUpperTempLimit6String+0x48>)
   d45f2:	4809      	ldr	r0, [pc, #36]	; (d4618 <_Z17setUpperTempLimit6String+0x4c>)
   d45f4:	f7ff fdb0 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45f8:	a804      	add	r0, sp, #16
   d45fa:	f002 fa7f 	bl	d6afc <_ZN6StringD1Ev>
  updateThresholdValue();
   d45fe:	f7ff ffa7 	bl	d4550 <_Z20updateThresholdValuev>
}
   d4602:	2001      	movs	r0, #1
   d4604:	b009      	add	sp, #36	; 0x24
   d4606:	f85d fb04 	ldr.w	pc, [sp], #4
   d460a:	bf00      	nop
   d460c:	2003e470 	.word	0x2003e470
   d4610:	2003e468 	.word	0x2003e468
   d4614:	000d9da6 	.word	0x000d9da6
   d4618:	2003e508 	.word	0x2003e508

000d461c <_Z17setLowerTempLimit6String>:
{
   d461c:	b500      	push	{lr}
   d461e:	b089      	sub	sp, #36	; 0x24
   d4620:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d4622:	f002 fb0f 	bl	d6c44 <_ZNK6String7toFloatEv>
   d4626:	4b0d      	ldr	r3, [pc, #52]	; (d465c <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d4628:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d462a:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d462e:	a804      	add	r0, sp, #16
   d4630:	f002 fad2 	bl	d6bd8 <_ZN6StringC1ERKS_>
   d4634:	2300      	movs	r3, #0
   d4636:	f88d 3000 	strb.w	r3, [sp]
   d463a:	4b09      	ldr	r3, [pc, #36]	; (d4660 <_Z17setLowerTempLimit6String+0x44>)
   d463c:	9a04      	ldr	r2, [sp, #16]
   d463e:	781b      	ldrb	r3, [r3, #0]
   d4640:	4908      	ldr	r1, [pc, #32]	; (d4664 <_Z17setLowerTempLimit6String+0x48>)
   d4642:	4809      	ldr	r0, [pc, #36]	; (d4668 <_Z17setLowerTempLimit6String+0x4c>)
   d4644:	f7ff fd88 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4648:	a804      	add	r0, sp, #16
   d464a:	f002 fa57 	bl	d6afc <_ZN6StringD1Ev>
  updateThresholdValue();
   d464e:	f7ff ff7f 	bl	d4550 <_Z20updateThresholdValuev>
}
   d4652:	2001      	movs	r0, #1
   d4654:	b009      	add	sp, #36	; 0x24
   d4656:	f85d fb04 	ldr.w	pc, [sp], #4
   d465a:	bf00      	nop
   d465c:	2003e470 	.word	0x2003e470
   d4660:	2003e468 	.word	0x2003e468
   d4664:	000d9dba 	.word	0x000d9dba
   d4668:	2003e508 	.word	0x2003e508

000d466c <_Z21setUpperHumidityLimit6String>:
{
   d466c:	b500      	push	{lr}
   d466e:	b089      	sub	sp, #36	; 0x24
   d4670:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d4672:	f002 fae7 	bl	d6c44 <_ZNK6String7toFloatEv>
   d4676:	4b0d      	ldr	r3, [pc, #52]	; (d46ac <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d4678:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d467a:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d467e:	a804      	add	r0, sp, #16
   d4680:	f002 faaa 	bl	d6bd8 <_ZN6StringC1ERKS_>
   d4684:	2300      	movs	r3, #0
   d4686:	f88d 3000 	strb.w	r3, [sp]
   d468a:	4b09      	ldr	r3, [pc, #36]	; (d46b0 <_Z21setUpperHumidityLimit6String+0x44>)
   d468c:	9a04      	ldr	r2, [sp, #16]
   d468e:	781b      	ldrb	r3, [r3, #0]
   d4690:	4908      	ldr	r1, [pc, #32]	; (d46b4 <_Z21setUpperHumidityLimit6String+0x48>)
   d4692:	4809      	ldr	r0, [pc, #36]	; (d46b8 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4694:	f7ff fd60 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4698:	a804      	add	r0, sp, #16
   d469a:	f002 fa2f 	bl	d6afc <_ZN6StringD1Ev>
  updateThresholdValue();
   d469e:	f7ff ff57 	bl	d4550 <_Z20updateThresholdValuev>
}
   d46a2:	2001      	movs	r0, #1
   d46a4:	b009      	add	sp, #36	; 0x24
   d46a6:	f85d fb04 	ldr.w	pc, [sp], #4
   d46aa:	bf00      	nop
   d46ac:	2003e470 	.word	0x2003e470
   d46b0:	2003e468 	.word	0x2003e468
   d46b4:	000d9da6 	.word	0x000d9da6
   d46b8:	2003e508 	.word	0x2003e508

000d46bc <_Z21setLowerHumidityLimit6String>:
{
   d46bc:	b500      	push	{lr}
   d46be:	b089      	sub	sp, #36	; 0x24
   d46c0:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d46c2:	f002 fabf 	bl	d6c44 <_ZNK6String7toFloatEv>
   d46c6:	4b0d      	ldr	r3, [pc, #52]	; (d46fc <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d46c8:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d46ca:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d46ce:	a804      	add	r0, sp, #16
   d46d0:	f002 fa82 	bl	d6bd8 <_ZN6StringC1ERKS_>
   d46d4:	2300      	movs	r3, #0
   d46d6:	f88d 3000 	strb.w	r3, [sp]
   d46da:	4b09      	ldr	r3, [pc, #36]	; (d4700 <_Z21setLowerHumidityLimit6String+0x44>)
   d46dc:	9a04      	ldr	r2, [sp, #16]
   d46de:	781b      	ldrb	r3, [r3, #0]
   d46e0:	4908      	ldr	r1, [pc, #32]	; (d4704 <_Z21setLowerHumidityLimit6String+0x48>)
   d46e2:	4809      	ldr	r0, [pc, #36]	; (d4708 <_Z21setLowerHumidityLimit6String+0x4c>)
   d46e4:	f7ff fd38 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d46e8:	a804      	add	r0, sp, #16
   d46ea:	f002 fa07 	bl	d6afc <_ZN6StringD1Ev>
  updateThresholdValue();
   d46ee:	f7ff ff2f 	bl	d4550 <_Z20updateThresholdValuev>
}
   d46f2:	2001      	movs	r0, #1
   d46f4:	b009      	add	sp, #36	; 0x24
   d46f6:	f85d fb04 	ldr.w	pc, [sp], #4
   d46fa:	bf00      	nop
   d46fc:	2003e470 	.word	0x2003e470
   d4700:	2003e468 	.word	0x2003e468
   d4704:	000d9dba 	.word	0x000d9dba
   d4708:	2003e508 	.word	0x2003e508

000d470c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d470c:	b530      	push	{r4, r5, lr}
   d470e:	b085      	sub	sp, #20
   d4710:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4712:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4714:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4716:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4718:	f001 fa96 	bl	d5c48 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d471c:	b9b0      	cbnz	r0, d474c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d471e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4720:	b10c      	cbz	r4, d4726 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4722:	6923      	ldr	r3, [r4, #16]
   d4724:	b923      	cbnz	r3, d4730 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4726:	4a0a      	ldr	r2, [pc, #40]	; (d4750 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4728:	2100      	movs	r1, #0
   d472a:	200a      	movs	r0, #10
   d472c:	f001 fa7c 	bl	d5c28 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4730:	2300      	movs	r3, #0
   d4732:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4736:	230c      	movs	r3, #12
   d4738:	f8ad 3004 	strh.w	r3, [sp, #4]
   d473c:	2304      	movs	r3, #4
   d473e:	9303      	str	r3, [sp, #12]
   d4740:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4742:	6923      	ldr	r3, [r4, #16]
   d4744:	aa01      	add	r2, sp, #4
   d4746:	2101      	movs	r1, #1
   d4748:	4620      	mov	r0, r4
   d474a:	4798      	blx	r3
}
   d474c:	b005      	add	sp, #20
   d474e:	bd30      	pop	{r4, r5, pc}
   d4750:	000d5989 	.word	0x000d5989

000d4754 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   d4754:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4756:	4d0e      	ldr	r5, [pc, #56]	; (d4790 <_Z17getBatteryContextv+0x3c>)
   d4758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d475a:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d475c:	ac01      	add	r4, sp, #4
   d475e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4760:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4768:	4669      	mov	r1, sp
   d476a:	2007      	movs	r0, #7
   d476c:	f7ff ffce 	bl	d470c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4770:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4772:	bfa8      	it	ge
   d4774:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4776:	4a07      	ldr	r2, [pc, #28]	; (d4794 <_Z17getBatteryContextv+0x40>)
   d4778:	ab08      	add	r3, sp, #32
   d477a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d477e:	2110      	movs	r1, #16
   d4780:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4784:	4804      	ldr	r0, [pc, #16]	; (d4798 <_Z17getBatteryContextv+0x44>)
   d4786:	f001 fb7f 	bl	d5e88 <snprintf>
}
   d478a:	b009      	add	sp, #36	; 0x24
   d478c:	bd30      	pop	{r4, r5, pc}
   d478e:	bf00      	nop
   d4790:	000d9f5c 	.word	0x000d9f5c
   d4794:	000d9d47 	.word	0x000d9d47
   d4798:	2003e489 	.word	0x2003e489

000d479c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d479c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  sensorData.validData = false;
   d47a0:	4d49      	ldr	r5, [pc, #292]	; (d48c8 <_Z16takeMeasurementsv+0x12c>)
  if (sht31.readTemperature()){
   d47a2:	484a      	ldr	r0, [pc, #296]	; (d48cc <_Z16takeMeasurementsv+0x130>)
  sensorData.validData = false;
   d47a4:	2400      	movs	r4, #0
   d47a6:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   d47a8:	f000 fc2e 	bl	d5008 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d47ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d47b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47b4:	d074      	beq.n	d48a0 <_Z16takeMeasurementsv+0x104>
    sensorData.temperatureInC = sht31.readTemperature();
   d47b6:	4845      	ldr	r0, [pc, #276]	; (d48cc <_Z16takeMeasurementsv+0x130>)
   d47b8:	f000 fc26 	bl	d5008 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d47bc:	ee10 0a10 	vmov	r0, s0
   d47c0:	f002 ff1e 	bl	d7600 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d47c4:	4a42      	ldr	r2, [pc, #264]	; (d48d0 <_Z16takeMeasurementsv+0x134>)
    sensorData.temperatureInC = sht31.readTemperature();
   d47c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d47ca:	e9cd 0100 	strd	r0, r1, [sp]
   d47ce:	2110      	movs	r1, #16
   d47d0:	4840      	ldr	r0, [pc, #256]	; (d48d4 <_Z16takeMeasurementsv+0x138>)
   d47d2:	f001 fb59 	bl	d5e88 <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   d47d6:	483d      	ldr	r0, [pc, #244]	; (d48cc <_Z16takeMeasurementsv+0x130>)
   d47d8:	f000 fc24 	bl	d5024 <_ZN14Adafruit_SHT3112readHumidityEv>
   d47dc:	ee10 0a10 	vmov	r0, s0
   d47e0:	f002 ff0e 	bl	d7600 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d47e4:	4a3c      	ldr	r2, [pc, #240]	; (d48d8 <_Z16takeMeasurementsv+0x13c>)
    sensorData.relativeHumidity = sht31.readHumidity();
   d47e6:	e9c5 0104 	strd	r0, r1, [r5, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d47ea:	e9cd 0100 	strd	r0, r1, [sp]
   d47ee:	2110      	movs	r1, #16
   d47f0:	483a      	ldr	r0, [pc, #232]	; (d48dc <_Z16takeMeasurementsv+0x140>)
   d47f2:	f001 fb49 	bl	d5e88 <snprintf>
   d47f6:	a903      	add	r1, sp, #12
   d47f8:	2003      	movs	r0, #3
   d47fa:	f7ff ff87 	bl	d470c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d47fe:	2800      	cmp	r0, #0
   d4800:	d15d      	bne.n	d48be <_Z16takeMeasurementsv+0x122>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4802:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4806:	ee07 3a90 	vmov	s15, r3
   d480a:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   d480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4812:	4c33      	ldr	r4, [pc, #204]	; (d48e0 <_Z16takeMeasurementsv+0x144>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4814:	4a33      	ldr	r2, [pc, #204]	; (d48e4 <_Z16takeMeasurementsv+0x148>)
   d4816:	4834      	ldr	r0, [pc, #208]	; (d48e8 <_Z16takeMeasurementsv+0x14c>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4818:	edc5 7a06 	vstr	s15, [r5, #24]
   d481c:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4820:	2110      	movs	r1, #16
   d4822:	f001 fb31 	bl	d5e88 <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4826:	68e0      	ldr	r0, [r4, #12]
   d4828:	f002 feea 	bl	d7600 <__aeabi_f2d>
   d482c:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
   d4830:	4602      	mov	r2, r0
   d4832:	460b      	mov	r3, r1
   d4834:	4630      	mov	r0, r6
   d4836:	4639      	mov	r1, r7
   d4838:	f003 f9ac 	bl	d7b94 <__aeabi_dcmplt>
   d483c:	46a0      	mov	r8, r4
   d483e:	2800      	cmp	r0, #0
   d4840:	d040      	beq.n	d48c4 <_Z16takeMeasurementsv+0x128>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   d4842:	2401      	movs	r4, #1
   d4844:	f888 4001 	strb.w	r4, [r8, #1]
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   d4848:	f8d8 0008 	ldr.w	r0, [r8, #8]
   d484c:	f002 fed8 	bl	d7600 <__aeabi_f2d>
   d4850:	4602      	mov	r2, r0
   d4852:	460b      	mov	r3, r1
   d4854:	4630      	mov	r0, r6
   d4856:	4639      	mov	r1, r7
   d4858:	f003 f9ba 	bl	d7bd0 <__aeabi_dcmpgt>
   d485c:	b110      	cbz	r0, d4864 <_Z16takeMeasurementsv+0xc8>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   d485e:	2401      	movs	r4, #1
   d4860:	f888 4000 	strb.w	r4, [r8]
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   d4864:	f8d8 0014 	ldr.w	r0, [r8, #20]
   d4868:	f002 feca 	bl	d7600 <__aeabi_f2d>
   d486c:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
   d4870:	4602      	mov	r2, r0
   d4872:	460b      	mov	r3, r1
   d4874:	4630      	mov	r0, r6
   d4876:	4639      	mov	r1, r7
   d4878:	f003 f98c 	bl	d7b94 <__aeabi_dcmplt>
   d487c:	b110      	cbz	r0, d4884 <_Z16takeMeasurementsv+0xe8>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   d487e:	2401      	movs	r4, #1
   d4880:	f888 4003 	strb.w	r4, [r8, #3]
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   d4884:	f8d8 0010 	ldr.w	r0, [r8, #16]
   d4888:	f002 feba 	bl	d7600 <__aeabi_f2d>
   d488c:	4602      	mov	r2, r0
   d488e:	460b      	mov	r3, r1
   d4890:	4630      	mov	r0, r6
   d4892:	4639      	mov	r1, r7
   d4894:	f003 f99c 	bl	d7bd0 <__aeabi_dcmpgt>
   d4898:	b110      	cbz	r0, d48a0 <_Z16takeMeasurementsv+0x104>
      alertsStatus.upperHumidityThresholdCrossed = true;
   d489a:	2401      	movs	r4, #1
   d489c:	f888 4002 	strb.w	r4, [r8, #2]
    sensorData.validData = true;
   d48a0:	2601      	movs	r6, #1
    getBatteryContext();                   // Check what the battery is doing.
   d48a2:	f7ff ff57 	bl	d4754 <_Z17getBatteryContextv>
    sensorData.validData = true;
   d48a6:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   d48a8:	f002 faa9 	bl	d6dfe <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d48ac:	4b0f      	ldr	r3, [pc, #60]	; (d48ec <_Z16takeMeasurementsv+0x150>)
    sensorData.timeStamp = Time.now();
   d48ae:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   d48b0:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   d48b2:	4b0f      	ldr	r3, [pc, #60]	; (d48f0 <_Z16takeMeasurementsv+0x154>)
}
   d48b4:	4620      	mov	r0, r4
    alertsStatusWriteNeeded = true;  
   d48b6:	701e      	strb	r6, [r3, #0]
}
   d48b8:	b004      	add	sp, #16
   d48ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1.0f;
   d48be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d48c2:	e7a4      	b.n	d480e <_Z16takeMeasurementsv+0x72>
  bool haveAnyAlertsBeenSet = false;
   d48c4:	4604      	mov	r4, r0
   d48c6:	e7bf      	b.n	d4848 <_Z16takeMeasurementsv+0xac>
   d48c8:	2003e548 	.word	0x2003e548
   d48cc:	2003e56c 	.word	0x2003e56c
   d48d0:	000d9dce 	.word	0x000d9dce
   d48d4:	2003e595 	.word	0x2003e595
   d48d8:	000d9dd6 	.word	0x000d9dd6
   d48dc:	2003e4c4 	.word	0x2003e4c4
   d48e0:	2003e470 	.word	0x2003e470
   d48e4:	000d9dde 	.word	0x000d9dde
   d48e8:	2003e499 	.word	0x2003e499
   d48ec:	2003e568 	.word	0x2003e568
   d48f0:	2003e488 	.word	0x2003e488

000d48f4 <setup>:
{
   d48f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                   // This pin is active HIGH, 
   d48f6:	2100      	movs	r1, #0
{
   d48f8:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                   // This pin is active HIGH, 
   d48fa:	2008      	movs	r0, #8
   d48fc:	f002 fc90 	bl	d7220 <pinMode>
  pinMode(donePin,OUTPUT);                                                                    // Allows us to pet the watchdog
   d4900:	2101      	movs	r1, #1
   d4902:	2005      	movs	r0, #5
   d4904:	f002 fc8c 	bl	d7220 <pinMode>
  pinMode(blueLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4908:	2101      	movs	r1, #1
   d490a:	2007      	movs	r0, #7
   d490c:	f002 fc88 	bl	d7220 <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   d4910:	f7ff fd84 	bl	d441c <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   d4914:	2300      	movs	r3, #0
   d4916:	9300      	str	r3, [sp, #0]
   d4918:	2201      	movs	r2, #1
   d491a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d491e:	4972      	ldr	r1, [pc, #456]	; (d4ae8 <setup+0x1f4>)
   d4920:	2008      	movs	r0, #8
   d4922:	f001 ff21 	bl	d6768 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4926:	4b71      	ldr	r3, [pc, #452]	; (d4aec <setup+0x1f8>)
   d4928:	aa0a      	add	r2, sp, #40	; 0x28
   d492a:	f103 0510 	add.w	r5, r3, #16
   d492e:	4617      	mov	r7, r2
   d4930:	6818      	ldr	r0, [r3, #0]
   d4932:	6859      	ldr	r1, [r3, #4]
   d4934:	4614      	mov	r4, r2
   d4936:	c403      	stmia	r4!, {r0, r1}
   d4938:	3308      	adds	r3, #8
   d493a:	42ab      	cmp	r3, r5
   d493c:	4622      	mov	r2, r4
   d493e:	d1f7      	bne.n	d4930 <setup+0x3c>
   d4940:	8819      	ldrh	r1, [r3, #0]
   d4942:	789b      	ldrb	r3, [r3, #2]
   d4944:	70a3      	strb	r3, [r4, #2]
   d4946:	8021      	strh	r1, [r4, #0]
   d4948:	222d      	movs	r2, #45	; 0x2d
   d494a:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d494c:	4c68      	ldr	r4, [pc, #416]	; (d4af0 <setup+0x1fc>)
   d494e:	4e69      	ldr	r6, [pc, #420]	; (d4af4 <setup+0x200>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4950:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d4954:	f003 fa38 	bl	d7dc8 <memset>
  state = INITIALIZATION_STATE;
   d4958:	2500      	movs	r5, #0
    static String deviceID(void) { return spark_deviceID(); }
   d495a:	a802      	add	r0, sp, #8
   d495c:	7025      	strb	r5, [r4, #0]
   d495e:	f001 f9f3 	bl	d5d48 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4962:	462b      	mov	r3, r5
   d4964:	227d      	movs	r2, #125	; 0x7d
   d4966:	a91a      	add	r1, sp, #104	; 0x68
   d4968:	a802      	add	r0, sp, #8
   d496a:	f002 f952 	bl	d6c12 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d496e:	462b      	mov	r3, r5
   d4970:	462a      	mov	r2, r5
   d4972:	4961      	ldr	r1, [pc, #388]	; (d4af8 <setup+0x204>)
   d4974:	e9cd 5500 	strd	r5, r5, [sp]
   d4978:	a81a      	add	r0, sp, #104	; 0x68
   d497a:	f001 f9f5 	bl	d5d68 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d497e:	495f      	ldr	r1, [pc, #380]	; (d4afc <setup+0x208>)
   d4980:	485f      	ldr	r0, [pc, #380]	; (d4b00 <setup+0x20c>)
   d4982:	f7ff fbe5 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4986:	495f      	ldr	r1, [pc, #380]	; (d4b04 <setup+0x210>)
   d4988:	485f      	ldr	r0, [pc, #380]	; (d4b08 <setup+0x214>)
   d498a:	f7ff fbe1 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d498e:	495f      	ldr	r1, [pc, #380]	; (d4b0c <setup+0x218>)
   d4990:	485f      	ldr	r0, [pc, #380]	; (d4b10 <setup+0x21c>)
   d4992:	f7ff fbdd 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4996:	495f      	ldr	r1, [pc, #380]	; (d4b14 <setup+0x220>)
   d4998:	485f      	ldr	r0, [pc, #380]	; (d4b18 <setup+0x224>)
   d499a:	f7ff fbd9 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d499e:	495f      	ldr	r1, [pc, #380]	; (d4b1c <setup+0x228>)
   d49a0:	485f      	ldr	r0, [pc, #380]	; (d4b20 <setup+0x22c>)
   d49a2:	f7ff fbd5 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d49a6:	495f      	ldr	r1, [pc, #380]	; (d4b24 <setup+0x230>)
   d49a8:	485f      	ldr	r0, [pc, #380]	; (d4b28 <setup+0x234>)
   d49aa:	f7ff fbd1 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d49ae:	495f      	ldr	r1, [pc, #380]	; (d4b2c <setup+0x238>)
   d49b0:	485f      	ldr	r0, [pc, #380]	; (d4b30 <setup+0x23c>)
   d49b2:	f7ff fbcd 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d49b6:	495f      	ldr	r1, [pc, #380]	; (d4b34 <setup+0x240>)
   d49b8:	485f      	ldr	r0, [pc, #380]	; (d4b38 <setup+0x244>)
   d49ba:	f7ff fbc9 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d49be:	495f      	ldr	r1, [pc, #380]	; (d4b3c <setup+0x248>)
   d49c0:	485f      	ldr	r0, [pc, #380]	; (d4b40 <setup+0x24c>)
   d49c2:	f7ff fbc5 	bl	d4150 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d49c6:	4a5f      	ldr	r2, [pc, #380]	; (d4b44 <setup+0x250>)
   d49c8:	495f      	ldr	r1, [pc, #380]	; (d4b48 <setup+0x254>)
   d49ca:	4860      	ldr	r0, [pc, #384]	; (d4b4c <setup+0x258>)
   d49cc:	f001 fb81 	bl	d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49d0:	4a5f      	ldr	r2, [pc, #380]	; (d4b50 <setup+0x25c>)
   d49d2:	4960      	ldr	r1, [pc, #384]	; (d4b54 <setup+0x260>)
   d49d4:	485d      	ldr	r0, [pc, #372]	; (d4b4c <setup+0x258>)
   d49d6:	f001 fb7c 	bl	d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49da:	4a5f      	ldr	r2, [pc, #380]	; (d4b58 <setup+0x264>)
   d49dc:	495f      	ldr	r1, [pc, #380]	; (d4b5c <setup+0x268>)
   d49de:	485b      	ldr	r0, [pc, #364]	; (d4b4c <setup+0x258>)
   d49e0:	f001 fb77 	bl	d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49e4:	4a5e      	ldr	r2, [pc, #376]	; (d4b60 <setup+0x26c>)
   d49e6:	495f      	ldr	r1, [pc, #380]	; (d4b64 <setup+0x270>)
   d49e8:	4858      	ldr	r0, [pc, #352]	; (d4b4c <setup+0x258>)
   d49ea:	f001 fb72 	bl	d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49ee:	4a5e      	ldr	r2, [pc, #376]	; (d4b68 <setup+0x274>)
   d49f0:	495e      	ldr	r1, [pc, #376]	; (d4b6c <setup+0x278>)
   d49f2:	4856      	ldr	r0, [pc, #344]	; (d4b4c <setup+0x258>)
   d49f4:	f001 fb6d 	bl	d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49f8:	495d      	ldr	r1, [pc, #372]	; (d4b70 <setup+0x27c>)
   d49fa:	4a5e      	ldr	r2, [pc, #376]	; (d4b74 <setup+0x280>)
   d49fc:	4853      	ldr	r0, [pc, #332]	; (d4b4c <setup+0x258>)
   d49fe:	f001 fb68 	bl	d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4a02:	f002 f9fc 	bl	d6dfe <_ZN9TimeClass3nowEv>
   d4a06:	4602      	mov	r2, r0
   d4a08:	17c3      	asrs	r3, r0, #31
   d4a0a:	a806      	add	r0, sp, #24
   d4a0c:	f002 f9a2 	bl	d6d54 <_ZN9TimeClass7timeStrEx>
   d4a10:	4959      	ldr	r1, [pc, #356]	; (d4b78 <setup+0x284>)
   d4a12:	7833      	ldrb	r3, [r6, #0]
   d4a14:	9a06      	ldr	r2, [sp, #24]
   d4a16:	4859      	ldr	r0, [pc, #356]	; (d4b7c <setup+0x288>)
   d4a18:	f88d 5000 	strb.w	r5, [sp]
   d4a1c:	f7ff fb9c 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a20:	a806      	add	r0, sp, #24
   d4a22:	f002 f86b 	bl	d6afc <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   d4a26:	4856      	ldr	r0, [pc, #344]	; (d4b80 <setup+0x28c>)
   d4a28:	2144      	movs	r1, #68	; 0x44
   d4a2a:	f000 fa58 	bl	d4ede <_ZN14Adafruit_SHT315beginEh>
   d4a2e:	b948      	cbnz	r0, d4a44 <setup+0x150>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4a30:	4954      	ldr	r1, [pc, #336]	; (d4b84 <setup+0x290>)
   d4a32:	4638      	mov	r0, r7
   d4a34:	f003 f9fe 	bl	d7e34 <strcpy>
    state = ERROR_STATE;
   d4a38:	2301      	movs	r3, #1
   d4a3a:	7023      	strb	r3, [r4, #0]
   d4a3c:	f000 ffac 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4a40:	4b51      	ldr	r3, [pc, #324]	; (d4b88 <setup+0x294>)
   d4a42:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   d4a44:	4851      	ldr	r0, [pc, #324]	; (d4b8c <setup+0x298>)
   d4a46:	f000 fb29 	bl	d509c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4a4a:	2301      	movs	r3, #1
   d4a4c:	484f      	ldr	r0, [pc, #316]	; (d4b8c <setup+0x298>)
   d4a4e:	aa06      	add	r2, sp, #24
   d4a50:	2100      	movs	r1, #0
   d4a52:	f000 fb65 	bl	d5120 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4a56:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4a5a:	2b03      	cmp	r3, #3
   d4a5c:	d036      	beq.n	d4acc <setup+0x1d8>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4a5e:	484b      	ldr	r0, [pc, #300]	; (d4b8c <setup+0x298>)
   d4a60:	f000 fb26 	bl	d50b0 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4a64:	4a4a      	ldr	r2, [pc, #296]	; (d4b90 <setup+0x29c>)
   d4a66:	4849      	ldr	r0, [pc, #292]	; (d4b8c <setup+0x298>)
   d4a68:	2304      	movs	r3, #4
   d4a6a:	2100      	movs	r1, #0
   d4a6c:	f000 fba3 	bl	d51b6 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4a70:	2301      	movs	r3, #1
   d4a72:	4846      	ldr	r0, [pc, #280]	; (d4b8c <setup+0x298>)
   d4a74:	aa06      	add	r2, sp, #24
   d4a76:	2100      	movs	r1, #0
   d4a78:	f000 fb52 	bl	d5120 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4a7c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4a80:	2b03      	cmp	r3, #3
   d4a82:	d01e      	beq.n	d4ac2 <setup+0x1ce>
   d4a84:	2301      	movs	r3, #1
   d4a86:	7023      	strb	r3, [r4, #0]
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4a88:	f7ff fc50 	bl	d432c <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   d4a8c:	f7ff fc72 	bl	d4374 <_Z17checkAlertsValuesv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d4a90:	f7ff fe84 	bl	d479c <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   d4a94:	f7ff fd5c 	bl	d4550 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d4a98:	4b3e      	ldr	r3, [pc, #248]	; (d4b94 <setup+0x2a0>)
   d4a9a:	78db      	ldrb	r3, [r3, #3]
   d4a9c:	b143      	cbz	r3, d4ab0 <setup+0x1bc>
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	f88d 3000 	strb.w	r3, [sp]
   d4aa4:	493c      	ldr	r1, [pc, #240]	; (d4b98 <setup+0x2a4>)
   d4aa6:	7833      	ldrb	r3, [r6, #0]
   d4aa8:	4834      	ldr	r0, [pc, #208]	; (d4b7c <setup+0x288>)
   d4aaa:	463a      	mov	r2, r7
   d4aac:	f7ff fb54 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d4ab0:	7823      	ldrb	r3, [r4, #0]
   d4ab2:	b90b      	cbnz	r3, d4ab8 <setup+0x1c4>
   d4ab4:	2302      	movs	r3, #2
   d4ab6:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4ab8:	a802      	add	r0, sp, #8
   d4aba:	f002 f81f 	bl	d6afc <_ZN6StringD1Ev>
}
   d4abe:	b03b      	add	sp, #236	; 0xec
   d4ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d4ac2:	f7ff fbd9 	bl	d4278 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   d4ac6:	f7ff fbff 	bl	d42c8 <_Z17loadAlertDefaultsv>
   d4aca:	e7dd      	b.n	d4a88 <setup+0x194>
   d4acc:	4a31      	ldr	r2, [pc, #196]	; (d4b94 <setup+0x2a0>)
   d4ace:	482f      	ldr	r0, [pc, #188]	; (d4b8c <setup+0x298>)
   d4ad0:	2318      	movs	r3, #24
   d4ad2:	2101      	movs	r1, #1
   d4ad4:	f000 fb24 	bl	d5120 <_ZN6MB85RC8readDataEjPhj>
   d4ad8:	4a30      	ldr	r2, [pc, #192]	; (d4b9c <setup+0x2a8>)
   d4ada:	482c      	ldr	r0, [pc, #176]	; (d4b8c <setup+0x298>)
   d4adc:	2318      	movs	r3, #24
   d4ade:	2150      	movs	r1, #80	; 0x50
   d4ae0:	f000 fb1e 	bl	d5120 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4ae4:	e7d0      	b.n	d4a88 <setup+0x194>
   d4ae6:	bf00      	nop
   d4ae8:	000d40c9 	.word	0x000d40c9
   d4aec:	000d9f78 	.word	0x000d9f78
   d4af0:	2003e578 	.word	0x2003e578
   d4af4:	2003e468 	.word	0x2003e468
   d4af8:	000d4175 	.word	0x000d4175
   d4afc:	000d9fb8 	.word	0x000d9fb8
   d4b00:	000d9de4 	.word	0x000d9de4
   d4b04:	2003e595 	.word	0x2003e595
   d4b08:	000d9dec 	.word	0x000d9dec
   d4b0c:	2003e4c4 	.word	0x2003e4c4
   d4b10:	000d9df8 	.word	0x000d9df8
   d4b14:	2003e5bd 	.word	0x2003e5bd
   d4b18:	000d9e01 	.word	0x000d9e01
   d4b1c:	2003e4ec 	.word	0x2003e4ec
   d4b20:	000d9e13 	.word	0x000d9e13
   d4b24:	2003e5a5 	.word	0x2003e5a5
   d4b28:	000d9e25 	.word	0x000d9e25
   d4b2c:	2003e4d4 	.word	0x2003e4d4
   d4b30:	000d9e34 	.word	0x000d9e34
   d4b34:	2003e499 	.word	0x2003e499
   d4b38:	000d9e43 	.word	0x000d9e43
   d4b3c:	2003e489 	.word	0x2003e489
   d4b40:	000d9e4b 	.word	0x000d9e4b
   d4b44:	000d9e5a 	.word	0x000d9e5a
   d4b48:	000d40d5 	.word	0x000d40d5
   d4b4c:	000d60a7 	.word	0x000d60a7
   d4b50:	000d9e66 	.word	0x000d9e66
   d4b54:	000d420d 	.word	0x000d420d
   d4b58:	000d9e73 	.word	0x000d9e73
   d4b5c:	000d45cd 	.word	0x000d45cd
   d4b60:	000d9e84 	.word	0x000d9e84
   d4b64:	000d461d 	.word	0x000d461d
   d4b68:	000d9e95 	.word	0x000d9e95
   d4b6c:	000d46bd 	.word	0x000d46bd
   d4b70:	000d466d 	.word	0x000d466d
   d4b74:	000d9eaa 	.word	0x000d9eaa
   d4b78:	000d9ebe 	.word	0x000d9ebe
   d4b7c:	2003e508 	.word	0x2003e508
   d4b80:	2003e56c 	.word	0x2003e56c
   d4b84:	000d9ec3 	.word	0x000d9ec3
   d4b88:	2003e540 	.word	0x2003e540
   d4b8c:	2003e4b4 	.word	0x2003e4b4
   d4b90:	000d9fc0 	.word	0x000d9fc0
   d4b94:	2003e57c 	.word	0x2003e57c
   d4b98:	000d9ee0 	.word	0x000d9ee0
   d4b9c:	2003e470 	.word	0x2003e470

000d4ba0 <loop>:
{
   d4ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d4ba2:	4c71      	ldr	r4, [pc, #452]	; (d4d68 <loop+0x1c8>)
   d4ba4:	4d71      	ldr	r5, [pc, #452]	; (d4d6c <loop+0x1cc>)
   d4ba6:	7823      	ldrb	r3, [r4, #0]
   d4ba8:	3b01      	subs	r3, #1
   d4baa:	2b04      	cmp	r3, #4
   d4bac:	d820      	bhi.n	d4bf0 <loop+0x50>
   d4bae:	e8df f003 	tbb	[pc, r3]
   d4bb2:	03b2      	.short	0x03b2
   d4bb4:	664c      	.short	0x664c
   d4bb6:	87          	.byte	0x87
   d4bb7:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4bb8:	4b6d      	ldr	r3, [pc, #436]	; (d4d70 <loop+0x1d0>)
   d4bba:	78db      	ldrb	r3, [r3, #3]
   d4bbc:	b12b      	cbz	r3, d4bca <loop+0x2a>
   d4bbe:	4b6d      	ldr	r3, [pc, #436]	; (d4d74 <loop+0x1d4>)
   d4bc0:	781b      	ldrb	r3, [r3, #0]
   d4bc2:	2b02      	cmp	r3, #2
   d4bc4:	d001      	beq.n	d4bca <loop+0x2a>
   d4bc6:	f7ff fc8d 	bl	d44e4 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || (!(Time.now() % wakeBoundary))) {
   d4bca:	f002 f929 	bl	d6e20 <_ZN9TimeClass4hourEv>
   d4bce:	4b6a      	ldr	r3, [pc, #424]	; (d4d78 <loop+0x1d8>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	4298      	cmp	r0, r3
   d4bd4:	d002      	beq.n	d4bdc <loop+0x3c>
      state = MEASURING_STATE;                                                     
   d4bd6:	2303      	movs	r3, #3
     state = IDLE_STATE;
   d4bd8:	7023      	strb	r3, [r4, #0]
   d4bda:	e009      	b.n	d4bf0 <loop+0x50>
    if (Time.hour() != currentHourlyPeriod || (!(Time.now() % wakeBoundary))) {
   d4bdc:	f002 f90f 	bl	d6dfe <_ZN9TimeClass3nowEv>
   d4be0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4be4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4be8:	fb02 0313 	mls	r3, r2, r3, r0
   d4bec:	2b00      	cmp	r3, #0
   d4bee:	d0f2      	beq.n	d4bd6 <loop+0x36>
  if (watchdogFlag) petWatchdog();                                                           // Watchdog flag is raised - time to pet the watchdog
   d4bf0:	4b62      	ldr	r3, [pc, #392]	; (d4d7c <loop+0x1dc>)
   d4bf2:	781b      	ldrb	r3, [r3, #0]
   d4bf4:	b10b      	cbz	r3, d4bfa <loop+0x5a>
   d4bf6:	f7ff fc11 	bl	d441c <_Z11petWatchdogv>
  if (flashTheLED) blinkLED(blueLED);
   d4bfa:	782b      	ldrb	r3, [r5, #0]
   d4bfc:	b113      	cbz	r3, d4c04 <loop+0x64>
   d4bfe:	2007      	movs	r0, #7
   d4c00:	f7ff fc56 	bl	d44b0 <_Z8blinkLEDi>
  if (systemStatusWriteNeeded) {
   d4c04:	4c5e      	ldr	r4, [pc, #376]	; (d4d80 <loop+0x1e0>)
   d4c06:	7823      	ldrb	r3, [r4, #0]
   d4c08:	b13b      	cbz	r3, d4c1a <loop+0x7a>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4c0a:	2318      	movs	r3, #24
   d4c0c:	4a58      	ldr	r2, [pc, #352]	; (d4d70 <loop+0x1d0>)
   d4c0e:	485d      	ldr	r0, [pc, #372]	; (d4d84 <loop+0x1e4>)
   d4c10:	2101      	movs	r1, #1
   d4c12:	f000 fad0 	bl	d51b6 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d4c16:	2300      	movs	r3, #0
   d4c18:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   d4c1a:	4c5b      	ldr	r4, [pc, #364]	; (d4d88 <loop+0x1e8>)
   d4c1c:	7823      	ldrb	r3, [r4, #0]
   d4c1e:	b13b      	cbz	r3, d4c30 <loop+0x90>
   d4c20:	2318      	movs	r3, #24
   d4c22:	4a5a      	ldr	r2, [pc, #360]	; (d4d8c <loop+0x1ec>)
   d4c24:	4857      	ldr	r0, [pc, #348]	; (d4d84 <loop+0x1e4>)
   d4c26:	2150      	movs	r1, #80	; 0x50
   d4c28:	f000 fac5 	bl	d51b6 <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   d4c2c:	2300      	movs	r3, #0
   d4c2e:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4c30:	4c57      	ldr	r4, [pc, #348]	; (d4d90 <loop+0x1f0>)
   d4c32:	7823      	ldrb	r3, [r4, #0]
   d4c34:	b13b      	cbz	r3, d4c46 <loop+0xa6>
   d4c36:	2320      	movs	r3, #32
   d4c38:	4a56      	ldr	r2, [pc, #344]	; (d4d94 <loop+0x1f4>)
   d4c3a:	4852      	ldr	r0, [pc, #328]	; (d4d84 <loop+0x1e4>)
   d4c3c:	21a0      	movs	r1, #160	; 0xa0
   d4c3e:	f000 faba 	bl	d51b6 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4c42:	2300      	movs	r3, #0
   d4c44:	7023      	strb	r3, [r4, #0]
}
   d4c46:	b002      	add	sp, #8
   d4c48:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4c4a:	4b49      	ldr	r3, [pc, #292]	; (d4d70 <loop+0x1d0>)
   d4c4c:	78db      	ldrb	r3, [r3, #3]
   d4c4e:	b12b      	cbz	r3, d4c5c <loop+0xbc>
   d4c50:	4b48      	ldr	r3, [pc, #288]	; (d4d74 <loop+0x1d4>)
   d4c52:	781b      	ldrb	r3, [r3, #0]
   d4c54:	2b03      	cmp	r3, #3
   d4c56:	d001      	beq.n	d4c5c <loop+0xbc>
   d4c58:	f7ff fc44 	bl	d44e4 <_Z22publishStateTransitionv>
    currentHourlyPeriod = Time.hour();
   d4c5c:	f002 f8e0 	bl	d6e20 <_ZN9TimeClass4hourEv>
   d4c60:	4b45      	ldr	r3, [pc, #276]	; (d4d78 <loop+0x1d8>)
   d4c62:	6018      	str	r0, [r3, #0]
    if (takeMeasurements()) flashTheLED = true;
   d4c64:	f7ff fd9a 	bl	d479c <_Z16takeMeasurementsv>
   d4c68:	4601      	mov	r1, r0
   d4c6a:	b118      	cbz	r0, d4c74 <loop+0xd4>
   d4c6c:	2301      	movs	r3, #1
   d4c6e:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   d4c70:	2304      	movs	r3, #4
   d4c72:	e7b1      	b.n	d4bd8 <loop+0x38>
      flashTheLED = false;
   d4c74:	7028      	strb	r0, [r5, #0]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   d4c76:	2007      	movs	r0, #7
   d4c78:	f002 fae3 	bl	d7242 <digitalWrite>
   d4c7c:	e7f8      	b.n	d4c70 <loop+0xd0>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4c7e:	4b3c      	ldr	r3, [pc, #240]	; (d4d70 <loop+0x1d0>)
   d4c80:	78db      	ldrb	r3, [r3, #3]
   d4c82:	b12b      	cbz	r3, d4c90 <loop+0xf0>
   d4c84:	4b3b      	ldr	r3, [pc, #236]	; (d4d74 <loop+0x1d4>)
   d4c86:	781b      	ldrb	r3, [r3, #0]
   d4c88:	2b04      	cmp	r3, #4
   d4c8a:	d001      	beq.n	d4c90 <loop+0xf0>
   d4c8c:	f7ff fc2a 	bl	d44e4 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c90:	f001 f852 	bl	d5d38 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c94:	b168      	cbz	r0, d4cb2 <loop+0x112>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4c96:	f002 f8c3 	bl	d6e20 <_ZN9TimeClass4hourEv>
   d4c9a:	280c      	cmp	r0, #12
   d4c9c:	d105      	bne.n	d4caa <loop+0x10a>
   d4c9e:	f001 f84b 	bl	d5d38 <spark_cloud_flag_connected>
        if (!connected()) {
   d4ca2:	b110      	cbz	r0, d4caa <loop+0x10a>
        return spark_sync_time(NULL);
   d4ca4:	2000      	movs	r0, #0
   d4ca6:	f001 f867 	bl	d5d78 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4caa:	f7ff fbc7 	bl	d443c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4cae:	2305      	movs	r3, #5
   d4cb0:	e792      	b.n	d4bd8 <loop+0x38>
      state = ERROR_STATE;
   d4cb2:	2301      	movs	r3, #1
   d4cb4:	7023      	strb	r3, [r4, #0]
   d4cb6:	f000 fe6f 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4cba:	4b37      	ldr	r3, [pc, #220]	; (d4d98 <loop+0x1f8>)
   d4cbc:	6018      	str	r0, [r3, #0]
   d4cbe:	e797      	b.n	d4bf0 <loop+0x50>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4cc0:	4b2b      	ldr	r3, [pc, #172]	; (d4d70 <loop+0x1d0>)
   d4cc2:	78db      	ldrb	r3, [r3, #3]
   d4cc4:	b12b      	cbz	r3, d4cd2 <loop+0x132>
   d4cc6:	4b2b      	ldr	r3, [pc, #172]	; (d4d74 <loop+0x1d4>)
   d4cc8:	781b      	ldrb	r3, [r3, #0]
   d4cca:	2b05      	cmp	r3, #5
   d4ccc:	d001      	beq.n	d4cd2 <loop+0x132>
   d4cce:	f7ff fc09 	bl	d44e4 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4cd2:	4b32      	ldr	r3, [pc, #200]	; (d4d9c <loop+0x1fc>)
   d4cd4:	781b      	ldrb	r3, [r3, #0]
   d4cd6:	b90b      	cbnz	r3, d4cdc <loop+0x13c>
     state = IDLE_STATE;
   d4cd8:	2302      	movs	r3, #2
   d4cda:	e77d      	b.n	d4bd8 <loop+0x38>
   d4cdc:	f000 fe5c 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4ce0:	4b2f      	ldr	r3, [pc, #188]	; (d4da0 <loop+0x200>)
   d4ce2:	681b      	ldr	r3, [r3, #0]
   d4ce4:	1ac0      	subs	r0, r0, r3
   d4ce6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4cea:	4298      	cmp	r0, r3
   d4cec:	d980      	bls.n	d4bf0 <loop+0x50>
   d4cee:	f000 fe53 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
   d4cf2:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4cf4:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   d4cf8:	4e27      	ldr	r6, [pc, #156]	; (d4d98 <loop+0x1f8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4cfa:	4b2a      	ldr	r3, [pc, #168]	; (d4da4 <loop+0x204>)
   d4cfc:	4a2a      	ldr	r2, [pc, #168]	; (d4da8 <loop+0x208>)
   d4cfe:	781b      	ldrb	r3, [r3, #0]
   d4d00:	492a      	ldr	r1, [pc, #168]	; (d4dac <loop+0x20c>)
      resetTimeStamp = millis();
   d4d02:	6030      	str	r0, [r6, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4d04:	482a      	ldr	r0, [pc, #168]	; (d4db0 <loop+0x210>)
   d4d06:	f7ff fa27 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d4d0a:	2301      	movs	r3, #1
   d4d0c:	7023      	strb	r3, [r4, #0]
   d4d0e:	f000 fe43 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4d12:	6030      	str	r0, [r6, #0]
   d4d14:	e76c      	b.n	d4bf0 <loop+0x50>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4d16:	4b16      	ldr	r3, [pc, #88]	; (d4d70 <loop+0x1d0>)
   d4d18:	78db      	ldrb	r3, [r3, #3]
   d4d1a:	b12b      	cbz	r3, d4d28 <loop+0x188>
   d4d1c:	4b15      	ldr	r3, [pc, #84]	; (d4d74 <loop+0x1d4>)
   d4d1e:	781b      	ldrb	r3, [r3, #0]
   d4d20:	2b01      	cmp	r3, #1
   d4d22:	d001      	beq.n	d4d28 <loop+0x188>
   d4d24:	f7ff fbde 	bl	d44e4 <_Z22publishStateTransitionv>
   d4d28:	f000 fe36 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4d2c:	4b1a      	ldr	r3, [pc, #104]	; (d4d98 <loop+0x1f8>)
   d4d2e:	681b      	ldr	r3, [r3, #0]
   d4d30:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4d34:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4d38:	4283      	cmp	r3, r0
   d4d3a:	f4bf af59 	bcs.w	d4bf0 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d3e:	f000 fffb 	bl	d5d38 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4d42:	b148      	cbz	r0, d4d58 <loop+0x1b8>
   d4d44:	2300      	movs	r3, #0
   d4d46:	f88d 3000 	strb.w	r3, [sp]
   d4d4a:	4b16      	ldr	r3, [pc, #88]	; (d4da4 <loop+0x204>)
   d4d4c:	4a19      	ldr	r2, [pc, #100]	; (d4db4 <loop+0x214>)
   d4d4e:	781b      	ldrb	r3, [r3, #0]
   d4d50:	4919      	ldr	r1, [pc, #100]	; (d4db8 <loop+0x218>)
   d4d52:	4817      	ldr	r0, [pc, #92]	; (d4db0 <loop+0x210>)
   d4d54:	f7ff fa00 	bl	d4158 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4d58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d5c:	f001 f8bc 	bl	d5ed8 <delay>
      System.reset();
   d4d60:	f001 ff92 	bl	d6c88 <_ZN11SystemClass5resetEv>
   d4d64:	e744      	b.n	d4bf0 <loop+0x50>
   d4d66:	bf00      	nop
   d4d68:	2003e578 	.word	0x2003e578
   d4d6c:	2003e4b1 	.word	0x2003e4b1
   d4d70:	2003e57c 	.word	0x2003e57c
   d4d74:	2003e504 	.word	0x2003e504
   d4d78:	2003e4ac 	.word	0x2003e4ac
   d4d7c:	2003e5d5 	.word	0x2003e5d5
   d4d80:	2003e594 	.word	0x2003e594
   d4d84:	2003e4b4 	.word	0x2003e4b4
   d4d88:	2003e488 	.word	0x2003e488
   d4d8c:	2003e470 	.word	0x2003e470
   d4d90:	2003e568 	.word	0x2003e568
   d4d94:	2003e548 	.word	0x2003e548
   d4d98:	2003e540 	.word	0x2003e540
   d4d9c:	2003e4b0 	.word	0x2003e4b0
   d4da0:	2003e5d8 	.word	0x2003e5d8
   d4da4:	2003e468 	.word	0x2003e468
   d4da8:	000da2ac 	.word	0x000da2ac
   d4dac:	000d9ee8 	.word	0x000d9ee8
   d4db0:	2003e508 	.word	0x2003e508
   d4db4:	000d9f01 	.word	0x000d9f01
   d4db8:	000d9c94 	.word	0x000d9c94

000d4dbc <_GLOBAL__sub_I___appProductID>:
}
   d4dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d4dbe:	4b27      	ldr	r3, [pc, #156]	; (d4e5c <_GLOBAL__sub_I___appProductID+0xa0>)
              error_(SYSTEM_ERROR_NONE) {
   d4dc0:	4d27      	ldr	r5, [pc, #156]	; (d4e60 <_GLOBAL__sub_I___appProductID+0xa4>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d4dc2:	4f28      	ldr	r7, [pc, #160]	; (d4e64 <_GLOBAL__sub_I___appProductID+0xa8>)
   d4dc4:	2601      	movs	r6, #1
   d4dc6:	701e      	strb	r6, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4dc8:	f002 f9d4 	bl	d7174 <spark_protocol_instance>
   d4dcc:	2300      	movs	r3, #0
   d4dce:	461a      	mov	r2, r3
   d4dd0:	f243 0171 	movw	r1, #12401	; 0x3071
   d4dd4:	f002 f9d6 	bl	d7184 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4dd8:	f002 f9cc 	bl	d7174 <spark_protocol_instance>
   d4ddc:	2300      	movs	r3, #0
   d4dde:	461a      	mov	r2, r3
   d4de0:	210b      	movs	r1, #11
   d4de2:	f002 f9d7 	bl	d7194 <spark_protocol_set_product_firmware_version>
   d4de6:	2400      	movs	r4, #0
    SleepResult() {}
   d4de8:	4b1f      	ldr	r3, [pc, #124]	; (d4e68 <_GLOBAL__sub_I___appProductID+0xac>)
   d4dea:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4dec:	602c      	str	r4, [r5, #0]
   d4dee:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4df0:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4df2:	4630      	mov	r0, r6
   d4df4:	f000 ff3a 	bl	d5c6c <set_system_mode>
   d4df8:	463a      	mov	r2, r7
   d4dfa:	491c      	ldr	r1, [pc, #112]	; (d4e6c <_GLOBAL__sub_I___appProductID+0xb0>)
   d4dfc:	4628      	mov	r0, r5
   d4dfe:	f002 fa8d 	bl	d731c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d4e02:	4621      	mov	r1, r4
   d4e04:	4630      	mov	r0, r6
   d4e06:	f000 ff41 	bl	d5c8c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4e0a:	4631      	mov	r1, r6
   d4e0c:	2004      	movs	r0, #4
   d4e0e:	f000 fda3 	bl	d5958 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4e12:	4817      	ldr	r0, [pc, #92]	; (d4e70 <_GLOBAL__sub_I___appProductID+0xb4>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4e14:	4d17      	ldr	r5, [pc, #92]	; (d4e74 <_GLOBAL__sub_I___appProductID+0xb8>)
   d4e16:	f000 f83f 	bl	d4e98 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d4e1a:	f002 fa57 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4e1e:	4623      	mov	r3, r4
   d4e20:	4601      	mov	r1, r0
   d4e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4e26:	4628      	mov	r0, r5
   d4e28:	f000 f92e 	bl	d5088 <_ZN6MB85RCC1ER7TwoWireji>
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d4e2c:	4c12      	ldr	r4, [pc, #72]	; (d4e78 <_GLOBAL__sub_I___appProductID+0xbc>)
   d4e2e:	4b13      	ldr	r3, [pc, #76]	; (d4e7c <_GLOBAL__sub_I___appProductID+0xc0>)
   d4e30:	602b      	str	r3, [r5, #0]
   d4e32:	463a      	mov	r2, r7
   d4e34:	4912      	ldr	r1, [pc, #72]	; (d4e80 <_GLOBAL__sub_I___appProductID+0xc4>)
   d4e36:	4628      	mov	r0, r5
   d4e38:	f002 fa70 	bl	d731c <__aeabi_atexit>
   d4e3c:	4911      	ldr	r1, [pc, #68]	; (d4e84 <_GLOBAL__sub_I___appProductID+0xc8>)
   d4e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d4e42:	4620      	mov	r0, r4
   d4e44:	f000 fc2a 	bl	d569c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d4e48:	4b0f      	ldr	r3, [pc, #60]	; (d4e88 <_GLOBAL__sub_I___appProductID+0xcc>)
   d4e4a:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d4e4c:	463a      	mov	r2, r7
   d4e4e:	4620      	mov	r0, r4
   d4e50:	490e      	ldr	r1, [pc, #56]	; (d4e8c <_GLOBAL__sub_I___appProductID+0xd0>)
}
   d4e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d4e56:	f002 ba61 	b.w	d731c <__aeabi_atexit>
   d4e5a:	bf00      	nop
   d4e5c:	2003e468 	.word	0x2003e468
   d4e60:	2003e45c 	.word	0x2003e45c
   d4e64:	2003e458 	.word	0x2003e458
   d4e68:	ffff0000 	.word	0xffff0000
   d4e6c:	000d4141 	.word	0x000d4141
   d4e70:	2003e56c 	.word	0x2003e56c
   d4e74:	2003e4b4 	.word	0x2003e4b4
   d4e78:	2003e508 	.word	0x2003e508
   d4e7c:	000d9f48 	.word	0x000d9f48
   d4e80:	000d4119 	.word	0x000d4119
   d4e84:	2003f400 	.word	0x2003f400
   d4e88:	000d9f20 	.word	0x000d9f20
   d4e8c:	000d40f1 	.word	0x000d40f1

000d4e90 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e90:	6803      	ldr	r3, [r0, #0]
   d4e92:	b2c9      	uxtb	r1, r1
   d4e94:	689b      	ldr	r3, [r3, #8]
   d4e96:	4718      	bx	r3

000d4e98 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4e98:	4770      	bx	lr

000d4e9a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4e9a:	b538      	push	{r3, r4, r5, lr}
   d4e9c:	4605      	mov	r5, r0
   d4e9e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4ea0:	f002 fa14 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4ea4:	7829      	ldrb	r1, [r5, #0]
   d4ea6:	f001 fc3d 	bl	d6724 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4eaa:	f002 fa0f 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4eae:	0a21      	lsrs	r1, r4, #8
   d4eb0:	f7ff ffee 	bl	d4e90 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4eb4:	f002 fa0a 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4eb8:	b2e1      	uxtb	r1, r4
   d4eba:	f7ff ffe9 	bl	d4e90 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4ebe:	f002 fa05 	bl	d72cc <_Z19__fetch_global_Wirev>
}
   d4ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d4ec6:	f001 bc38 	b.w	d673a <_ZN7TwoWire15endTransmissionEv>

000d4eca <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d4eca:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4ecc:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4ed0:	f7ff ffe3 	bl	d4e9a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d4ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d4ed8:	200a      	movs	r0, #10
   d4eda:	f000 bffd 	b.w	d5ed8 <delay>

000d4ede <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4ede:	b538      	push	{r3, r4, r5, lr}
   d4ee0:	4604      	mov	r4, r0
   d4ee2:	460d      	mov	r5, r1
  Wire.begin();
   d4ee4:	f002 f9f2 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4ee8:	f001 fbea 	bl	d66c0 <_ZN7TwoWire5beginEv>
  reset();
   d4eec:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d4eee:	7025      	strb	r5, [r4, #0]
  reset();
   d4ef0:	f7ff ffeb 	bl	d4eca <_ZN14Adafruit_SHT315resetEv>
}
   d4ef4:	2001      	movs	r0, #1
   d4ef6:	bd38      	pop	{r3, r4, r5, pc}

000d4ef8 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d4ef8:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d4efa:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d4efc:	4291      	cmp	r1, r2
   d4efe:	d00e      	beq.n	d4f1e <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4f00:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4f04:	4058      	eors	r0, r3
   d4f06:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d4f08:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4f0c:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d4f10:	bf18      	it	ne
   d4f12:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d4f16:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d4f18:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d4f1a:	d1f5      	bne.n	d4f08 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4f1c:	e7ee      	b.n	d4efc <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d4f1e:	4770      	bx	lr

000d4f20 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d4f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d4f22:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d4f26:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d4f28:	f7ff ffb7 	bl	d4e9a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d4f2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4f30:	f000 ffd2 	bl	d5ed8 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4f34:	f002 f9ca 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4f38:	7829      	ldrb	r1, [r5, #0]
   d4f3a:	2206      	movs	r2, #6
   d4f3c:	f001 fbef 	bl	d671e <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d4f40:	f002 f9c4 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4f44:	6803      	ldr	r3, [r0, #0]
   d4f46:	691b      	ldr	r3, [r3, #16]
   d4f48:	4798      	blx	r3
   d4f4a:	2806      	cmp	r0, #6
   d4f4c:	d14b      	bne.n	d4fe6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d4f4e:	466e      	mov	r6, sp
   d4f50:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d4f52:	f002 f9bb 	bl	d72cc <_Z19__fetch_global_Wirev>
   d4f56:	6803      	ldr	r3, [r0, #0]
   d4f58:	695b      	ldr	r3, [r3, #20]
   d4f5a:	4798      	blx	r3
   d4f5c:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d4f5e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d4f62:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d4f66:	4669      	mov	r1, sp
   d4f68:	d1f3      	bne.n	d4f52 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4f6a:	2202      	movs	r2, #2
   d4f6c:	4628      	mov	r0, r5
   d4f6e:	f7ff ffc3 	bl	d4ef8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4f72:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d4f76:	4286      	cmp	r6, r0
   d4f78:	d135      	bne.n	d4fe6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4f7a:	2202      	movs	r2, #2
   d4f7c:	f10d 0103 	add.w	r1, sp, #3
   d4f80:	4628      	mov	r0, r5
   d4f82:	f7ff ffb9 	bl	d4ef8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4f86:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d4f8a:	4286      	cmp	r6, r0
   d4f8c:	d12b      	bne.n	d4fe6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d4f8e:	f8bd 0000 	ldrh.w	r0, [sp]
   d4f92:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d4f96:	ba40      	rev16	r0, r0
   d4f98:	b280      	uxth	r0, r0
   d4f9a:	f002 fb0f 	bl	d75bc <__aeabi_ui2d>
  stemp *= 175;
   d4f9e:	a318      	add	r3, pc, #96	; (adr r3, d5000 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fa4:	f002 fb84 	bl	d76b0 <__aeabi_dmul>
  stemp /= 0xffff;
   d4fa8:	a311      	add	r3, pc, #68	; (adr r3, d4ff0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4faa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fae:	f002 fca9 	bl	d7904 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d4fb2:	4b11      	ldr	r3, [pc, #68]	; (d4ff8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4fb4:	2200      	movs	r2, #0
   d4fb6:	f002 f9c3 	bl	d7340 <__aeabi_dsub>
  temp = stemp;
   d4fba:	f002 fe33 	bl	d7c24 <__aeabi_d2f>
   d4fbe:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d4fc0:	ba60      	rev16	r0, r4
   d4fc2:	b280      	uxth	r0, r0
   d4fc4:	f002 fafa 	bl	d75bc <__aeabi_ui2d>
  shum *= 100;
   d4fc8:	4b0c      	ldr	r3, [pc, #48]	; (d4ffc <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4fca:	2200      	movs	r2, #0
   d4fcc:	f002 fb70 	bl	d76b0 <__aeabi_dmul>
  shum /= 0xFFFF;
   d4fd0:	a307      	add	r3, pc, #28	; (adr r3, d4ff0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fd6:	f002 fc95 	bl	d7904 <__aeabi_ddiv>
  humidity = shum;
   d4fda:	f002 fe23 	bl	d7c24 <__aeabi_d2f>
   d4fde:	6068      	str	r0, [r5, #4]
  return true;
   d4fe0:	2001      	movs	r0, #1
}
   d4fe2:	b002      	add	sp, #8
   d4fe4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4fe6:	2000      	movs	r0, #0
   d4fe8:	e7fb      	b.n	d4fe2 <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d4fea:	bf00      	nop
   d4fec:	f3af 8000 	nop.w
   d4ff0:	00000000 	.word	0x00000000
   d4ff4:	40efffe0 	.word	0x40efffe0
   d4ff8:	40468000 	.word	0x40468000
   d4ffc:	40590000 	.word	0x40590000
   d5000:	00000000 	.word	0x00000000
   d5004:	4065e000 	.word	0x4065e000

000d5008 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d5008:	b510      	push	{r4, lr}
   d500a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d500c:	f7ff ff88 	bl	d4f20 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5010:	b110      	cbz	r0, d5018 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d5012:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d5016:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d5018:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5020 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d501c:	e7fb      	b.n	d5016 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d501e:	bf00      	nop
   d5020:	7fc00000 	.word	0x7fc00000

000d5024 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d5024:	b510      	push	{r4, lr}
   d5026:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5028:	f7ff ff7a 	bl	d4f20 <_ZN14Adafruit_SHT3111readTempHumEv>
   d502c:	b110      	cbz	r0, d5034 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d502e:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d5032:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d5034:	ed9f 0a01 	vldr	s0, [pc, #4]	; d503c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d5038:	e7fb      	b.n	d5032 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d503a:	bf00      	nop
   d503c:	7fc00000 	.word	0x7fc00000

000d5040 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5040:	4770      	bx	lr

000d5042 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5042:	b510      	push	{r4, lr}
}
   d5044:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5046:	4604      	mov	r4, r0
}
   d5048:	f002 f96d 	bl	d7326 <_ZdlPvj>
   d504c:	4620      	mov	r0, r4
   d504e:	bd10      	pop	{r4, pc}

000d5050 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5050:	6803      	ldr	r3, [r0, #0]
   d5052:	b2c9      	uxtb	r1, r1
   d5054:	689b      	ldr	r3, [r3, #8]
   d5056:	4718      	bx	r3

000d5058 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5058:	b40e      	push	{r1, r2, r3}
   d505a:	b510      	push	{r4, lr}
   d505c:	b08d      	sub	sp, #52	; 0x34
   d505e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5060:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5062:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5066:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5068:	2300      	movs	r3, #0
   d506a:	2020      	movs	r0, #32
   d506c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5070:	e9cd 4200 	strd	r4, r2, [sp]
   d5074:	201e      	movs	r0, #30
   d5076:	aa04      	add	r2, sp, #16
   d5078:	f000 fdde 	bl	d5c38 <log_message_v>
}
   d507c:	b00d      	add	sp, #52	; 0x34
   d507e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5082:	b003      	add	sp, #12
   d5084:	4770      	bx	lr
	...

000d5088 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5088:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d508a:	4d03      	ldr	r5, [pc, #12]	; (d5098 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d508c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5090:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5094:	bd30      	pop	{r4, r5, pc}
   d5096:	bf00      	nop
   d5098:	000d9ff8 	.word	0x000d9ff8

000d509c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d509c:	6840      	ldr	r0, [r0, #4]
   d509e:	f001 bb0f 	b.w	d66c0 <_ZN7TwoWire5beginEv>

000d50a2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d50a2:	b510      	push	{r4, lr}
   d50a4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d50a6:	6800      	ldr	r0, [r0, #0]
   d50a8:	f001 fb53 	bl	d6752 <_ZN7TwoWire6unlockEv>
   d50ac:	4620      	mov	r0, r4
   d50ae:	bd10      	pop	{r4, pc}

000d50b0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d50b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50b4:	b08a      	sub	sp, #40	; 0x28
   d50b6:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d50b8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d50ba:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d50bc:	f001 fb40 	bl	d6740 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d50c0:	221e      	movs	r2, #30
   d50c2:	2100      	movs	r1, #0
   d50c4:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d50c6:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d50c8:	f002 fe7e 	bl	d7dc8 <memset>
		size_t framAddr = 0;
   d50cc:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d50ce:	b1ef      	cbz	r7, d510c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d50d0:	6823      	ldr	r3, [r4, #0]
   d50d2:	2f1e      	cmp	r7, #30
   d50d4:	46b8      	mov	r8, r7
   d50d6:	bf28      	it	cs
   d50d8:	f04f 081e 	movcs.w	r8, #30
   d50dc:	68dd      	ldr	r5, [r3, #12]
   d50de:	aa02      	add	r2, sp, #8
   d50e0:	4643      	mov	r3, r8
   d50e2:	4631      	mov	r1, r6
   d50e4:	4620      	mov	r0, r4
   d50e6:	47a8      	blx	r5
			if (!result) {
   d50e8:	4605      	mov	r5, r0
   d50ea:	b958      	cbnz	r0, d5104 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d50ec:	480a      	ldr	r0, [pc, #40]	; (d5118 <_ZN6MB85RC5eraseEv+0x68>)
   d50ee:	490b      	ldr	r1, [pc, #44]	; (d511c <_ZN6MB85RC5eraseEv+0x6c>)
   d50f0:	4632      	mov	r2, r6
   d50f2:	f7ff ffb1 	bl	d5058 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d50f6:	a801      	add	r0, sp, #4
   d50f8:	f7ff ffd3 	bl	d50a2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d50fc:	4628      	mov	r0, r5
   d50fe:	b00a      	add	sp, #40	; 0x28
   d5100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5104:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5108:	4446      	add	r6, r8
		while(totalLen > 0) {
   d510a:	e7e0      	b.n	d50ce <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d510c:	a801      	add	r0, sp, #4
   d510e:	f7ff ffc8 	bl	d50a2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5112:	2501      	movs	r5, #1
   d5114:	e7f2      	b.n	d50fc <_ZN6MB85RC5eraseEv+0x4c>
   d5116:	bf00      	nop
   d5118:	2003e61c 	.word	0x2003e61c
   d511c:	000d9fc4 	.word	0x000d9fc4

000d5120 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5124:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5126:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5128:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d512a:	460d      	mov	r5, r1
   d512c:	4616      	mov	r6, r2
   d512e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5130:	f001 fb06 	bl	d6740 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5134:	b1a7      	cbz	r7, d5160 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5136:	68e1      	ldr	r1, [r4, #12]
   d5138:	6860      	ldr	r0, [r4, #4]
   d513a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d513e:	f001 faf5 	bl	d672c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5142:	0a29      	lsrs	r1, r5, #8
   d5144:	6860      	ldr	r0, [r4, #4]
   d5146:	f7ff ff83 	bl	d5050 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d514a:	4629      	mov	r1, r5
   d514c:	6860      	ldr	r0, [r4, #4]
   d514e:	f7ff ff7f 	bl	d5050 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5152:	6860      	ldr	r0, [r4, #4]
   d5154:	2100      	movs	r1, #0
   d5156:	f001 faec 	bl	d6732 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d515a:	b148      	cbz	r0, d5170 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d515c:	2400      	movs	r4, #0
   d515e:	e000      	b.n	d5162 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5160:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5162:	a801      	add	r0, sp, #4
   d5164:	f7ff ff9d 	bl	d50a2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5168:	4620      	mov	r0, r4
   d516a:	b003      	add	sp, #12
   d516c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5170:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5172:	7b21      	ldrb	r1, [r4, #12]
   d5174:	6860      	ldr	r0, [r4, #4]
   d5176:	46b8      	mov	r8, r7
   d5178:	bf28      	it	cs
   d517a:	f04f 0820 	movcs.w	r8, #32
   d517e:	2301      	movs	r3, #1
   d5180:	4642      	mov	r2, r8
   d5182:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5186:	f001 fab8 	bl	d66fa <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d518a:	f002 f89f 	bl	d72cc <_Z19__fetch_global_Wirev>
   d518e:	6803      	ldr	r3, [r0, #0]
   d5190:	691b      	ldr	r3, [r3, #16]
   d5192:	4798      	blx	r3
   d5194:	4540      	cmp	r0, r8
   d5196:	dbe1      	blt.n	d515c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5198:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d519c:	f002 f896 	bl	d72cc <_Z19__fetch_global_Wirev>
   d51a0:	6803      	ldr	r3, [r0, #0]
   d51a2:	695b      	ldr	r3, [r3, #20]
   d51a4:	4798      	blx	r3
   d51a6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d51aa:	454e      	cmp	r6, r9
   d51ac:	d1f6      	bne.n	d519c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d51ae:	4445      	add	r5, r8
   d51b0:	eba7 0708 	sub.w	r7, r7, r8
   d51b4:	e7be      	b.n	d5134 <_ZN6MB85RC8readDataEjPhj+0x14>

000d51b6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d51b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51ba:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d51bc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d51be:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d51c0:	460e      	mov	r6, r1
   d51c2:	4690      	mov	r8, r2
   d51c4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d51c6:	f001 fabb 	bl	d6740 <_ZN7TwoWire4lockEv>
   d51ca:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d51ce:	f1b9 0f00 	cmp.w	r9, #0
   d51d2:	d02a      	beq.n	d522a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d51d4:	b34d      	cbz	r5, d522a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d51d6:	68e1      	ldr	r1, [r4, #12]
   d51d8:	6860      	ldr	r0, [r4, #4]
   d51da:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d51de:	f001 faa5 	bl	d672c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d51e2:	0a31      	lsrs	r1, r6, #8
   d51e4:	6860      	ldr	r0, [r4, #4]
   d51e6:	f7ff ff33 	bl	d5050 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d51ea:	6860      	ldr	r0, [r4, #4]
   d51ec:	4631      	mov	r1, r6
   d51ee:	f7ff ff2f 	bl	d5050 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d51f2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d51f6:	4647      	mov	r7, r8
   d51f8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d51fc:	6860      	ldr	r0, [r4, #4]
   d51fe:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5202:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5204:	3d01      	subs	r5, #1
				wire.write(*data);
   d5206:	689b      	ldr	r3, [r3, #8]
   d5208:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d520a:	4555      	cmp	r5, sl
   d520c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5210:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5212:	d001      	beq.n	d5218 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5214:	2d00      	cmp	r5, #0
   d5216:	d1f1      	bne.n	d51fc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5218:	6860      	ldr	r0, [r4, #4]
   d521a:	2101      	movs	r1, #1
   d521c:	f001 fa89 	bl	d6732 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5220:	2800      	cmp	r0, #0
   d5222:	d0d7      	beq.n	d51d4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5224:	f04f 0900 	mov.w	r9, #0
   d5228:	e7d1      	b.n	d51ce <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d522a:	a801      	add	r0, sp, #4
   d522c:	f7ff ff39 	bl	d50a2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5230:	4648      	mov	r0, r9
   d5232:	b003      	add	sp, #12
   d5234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5238 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d523c:	b08b      	sub	sp, #44	; 0x2c
   d523e:	460e      	mov	r6, r1
   d5240:	4615      	mov	r5, r2
   d5242:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5244:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5246:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5248:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d524a:	f001 fa79 	bl	d6740 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d524e:	42ae      	cmp	r6, r5
   d5250:	d229      	bcs.n	d52a6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5252:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5254:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5256:	b18c      	cbz	r4, d527c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5258:	2c1e      	cmp	r4, #30
   d525a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d525c:	f8d8 3000 	ldr.w	r3, [r8]
   d5260:	bf28      	it	cs
   d5262:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5264:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5266:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d526a:	aa02      	add	r2, sp, #8
   d526c:	463b      	mov	r3, r7
   d526e:	4631      	mov	r1, r6
   d5270:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5272:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5274:	47c8      	blx	r9
				if (!result) {
   d5276:	b948      	cbnz	r0, d528c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5278:	2400      	movs	r4, #0
   d527a:	e000      	b.n	d527e <_ZN6MB85RC8moveDataEjjj+0x46>
   d527c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d527e:	a801      	add	r0, sp, #4
   d5280:	f7ff ff0f 	bl	d50a2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5284:	4620      	mov	r0, r4
   d5286:	b00b      	add	sp, #44	; 0x2c
   d5288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d528c:	f8d8 3000 	ldr.w	r3, [r8]
   d5290:	aa02      	add	r2, sp, #8
   d5292:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5296:	4629      	mov	r1, r5
   d5298:	463b      	mov	r3, r7
   d529a:	4640      	mov	r0, r8
   d529c:	47c8      	blx	r9
				if (!result) {
   d529e:	2800      	cmp	r0, #0
   d52a0:	d0ea      	beq.n	d5278 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d52a2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d52a4:	e7d7      	b.n	d5256 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d52a6:	d9e9      	bls.n	d527c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d52a8:	2c00      	cmp	r4, #0
   d52aa:	d0e7      	beq.n	d527c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d52ac:	f8d8 3000 	ldr.w	r3, [r8]
   d52b0:	2c1e      	cmp	r4, #30
   d52b2:	4627      	mov	r7, r4
   d52b4:	bf28      	it	cs
   d52b6:	271e      	movcs	r7, #30
   d52b8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d52bc:	aa02      	add	r2, sp, #8
   d52be:	463b      	mov	r3, r7
   d52c0:	4631      	mov	r1, r6
   d52c2:	4640      	mov	r0, r8
   d52c4:	47c8      	blx	r9
				if (!result) {
   d52c6:	2800      	cmp	r0, #0
   d52c8:	d0d6      	beq.n	d5278 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d52ca:	f8d8 3000 	ldr.w	r3, [r8]
   d52ce:	aa02      	add	r2, sp, #8
   d52d0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d52d4:	4629      	mov	r1, r5
   d52d6:	463b      	mov	r3, r7
   d52d8:	4640      	mov	r0, r8
   d52da:	47c8      	blx	r9
				if (!result) {
   d52dc:	2800      	cmp	r0, #0
   d52de:	d0cb      	beq.n	d5278 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d52e0:	443e      	add	r6, r7
				framAddrTo += count;
   d52e2:	443d      	add	r5, r7
				numBytes -= count;
   d52e4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d52e6:	e7df      	b.n	d52a8 <_ZN6MB85RC8moveDataEjjj+0x70>

000d52e8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d52e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d52ea:	4603      	mov	r3, r0
	switch (__op)
   d52ec:	d102      	bne.n	d52f4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d52ee:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d52f0:	2000      	movs	r0, #0
   d52f2:	4770      	bx	lr
	  switch (__op)
   d52f4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d52f6:	bf04      	itt	eq
   d52f8:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d52fc:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d5300:	e7f6      	b.n	d52f0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d5302 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5302:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5304:	2301      	movs	r3, #1
   d5306:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5308:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d530a:	4604      	mov	r4, r0
        if (th->func) {
   d530c:	b143      	cbz	r3, d5320 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d530e:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5310:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d5312:	2301      	movs	r3, #1
   d5314:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5316:	2000      	movs	r0, #0
    }
   d5318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d531c:	f000 bb14 	b.w	d5948 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5320:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5322:	2800      	cmp	r0, #0
   d5324:	d0f5      	beq.n	d5312 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5326:	6883      	ldr	r3, [r0, #8]
   d5328:	b90b      	cbnz	r3, d532e <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d532a:	f002 f802 	bl	d7332 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d532e:	68c3      	ldr	r3, [r0, #12]
   d5330:	e7ee      	b.n	d5310 <_ZN6Thread3runEPv+0xe>

000d5332 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5332:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d5334:	6842      	ldr	r2, [r0, #4]
   d5336:	4603      	mov	r3, r0
   d5338:	1054      	asrs	r4, r2, #1
   d533a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d533e:	07d2      	lsls	r2, r2, #31
   d5340:	bf48      	it	mi
   d5342:	590a      	ldrmi	r2, [r1, r4]
   d5344:	681b      	ldr	r3, [r3, #0]
      }
   d5346:	f85d 4b04 	ldr.w	r4, [sp], #4
   d534a:	bf48      	it	mi
   d534c:	58d3      	ldrmi	r3, [r2, r3]
   d534e:	4718      	bx	r3

000d5350 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5350:	b510      	push	{r4, lr}
      if (_M_manager)
   d5352:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5354:	4604      	mov	r4, r0
      if (_M_manager)
   d5356:	b113      	cbz	r3, d535e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5358:	2203      	movs	r2, #3
   d535a:	4601      	mov	r1, r0
   d535c:	4798      	blx	r3
    }
   d535e:	4620      	mov	r0, r4
   d5360:	bd10      	pop	{r4, pc}
	...

000d5364 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5364:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d5366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d5368:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d536c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d536e:	3008      	adds	r0, #8
   d5370:	f000 fac2 	bl	d58f8 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5374:	2004      	movs	r0, #4
   d5376:	f7fe fe8e 	bl	d4096 <_Znwj>
   d537a:	4605      	mov	r5, r0
   d537c:	b398      	cbz	r0, d53e6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d537e:	491b      	ldr	r1, [pc, #108]	; (d53ec <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d5380:	2014      	movs	r0, #20
   d5382:	f001 ffd2 	bl	d732a <_ZnwjRKSt9nothrow_t>
   d5386:	b130      	cbz	r0, d5396 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5388:	2300      	movs	r3, #0
            exited(false) {
   d538a:	e9c0 3300 	strd	r3, r3, [r0]
   d538e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5392:	7403      	strb	r3, [r0, #16]
   d5394:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5396:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5398:	b1a0      	cbz	r0, d53c4 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d539a:	4b15      	ldr	r3, [pc, #84]	; (d53f0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d539c:	4915      	ldr	r1, [pc, #84]	; (d53f4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d539e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d53a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d53a6:	e9cd 0300 	strd	r0, r3, [sp]
   d53aa:	2202      	movs	r2, #2
   d53ac:	4b12      	ldr	r3, [pc, #72]	; (d53f8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d53ae:	3004      	adds	r0, #4
   d53b0:	f000 fa92 	bl	d58d8 <os_thread_create>
   d53b4:	b930      	cbnz	r0, d53c4 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d53b6:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d53b8:	7c1b      	ldrb	r3, [r3, #16]
   d53ba:	b9a3      	cbnz	r3, d53e6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d53bc:	2001      	movs	r0, #1
   d53be:	f000 fadb 	bl	d5978 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d53c2:	e7f8      	b.n	d53b6 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c4:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53c6:	2300      	movs	r3, #0
   d53c8:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d53ca:	b164      	cbz	r4, d53e6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d53cc:	6827      	ldr	r7, [r4, #0]
   d53ce:	b137      	cbz	r7, d53de <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d53d0:	4638      	mov	r0, r7
   d53d2:	f7ff ffbd 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d53d6:	2110      	movs	r1, #16
   d53d8:	4638      	mov	r0, r7
   d53da:	f001 ffa4 	bl	d7326 <_ZdlPvj>
   d53de:	2114      	movs	r1, #20
   d53e0:	4620      	mov	r0, r4
   d53e2:	f001 ffa0 	bl	d7326 <_ZdlPvj>
   d53e6:	6075      	str	r5, [r6, #4]
}
   d53e8:	b003      	add	sp, #12
   d53ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53ec:	000da28c 	.word	0x000da28c
   d53f0:	000d5603 	.word	0x000d5603
   d53f4:	000da00c 	.word	0x000da00c
   d53f8:	000d5303 	.word	0x000d5303

000d53fc <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d53fc:	f247 5130 	movw	r1, #30000	; 0x7530
   d5400:	4a08      	ldr	r2, [pc, #32]	; (d5424 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d5402:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5404:	4908      	ldr	r1, [pc, #32]	; (d5428 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d5406:	6002      	str	r2, [r0, #0]
   d5408:	2200      	movs	r2, #0
   d540a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d540e:	4907      	ldr	r1, [pc, #28]	; (d542c <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d5410:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d5412:	4907      	ldr	r1, [pc, #28]	; (d5430 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d5414:	6042      	str	r2, [r0, #4]
   d5416:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d541a:	6181      	str	r1, [r0, #24]
   d541c:	8502      	strh	r2, [r0, #40]	; 0x28
   d541e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d5422:	4770      	bx	lr
   d5424:	000da0d0 	.word	0x000da0d0
   d5428:	000d576d 	.word	0x000d576d
   d542c:	000d5333 	.word	0x000d5333
   d5430:	000d52e9 	.word	0x000d52e9

000d5434 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d5434:	b510      	push	{r4, lr}
   d5436:	4b04      	ldr	r3, [pc, #16]	; (d5448 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d5438:	4604      	mov	r4, r0
   d543a:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d543e:	f7ff ff87 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
}
   d5442:	4620      	mov	r0, r4
   d5444:	bd10      	pop	{r4, pc}
   d5446:	bf00      	nop
   d5448:	000da0d0 	.word	0x000da0d0

000d544c <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d544c:	b510      	push	{r4, lr}
   d544e:	4b03      	ldr	r3, [pc, #12]	; (d545c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d5450:	6003      	str	r3, [r0, #0]
   d5452:	4604      	mov	r4, r0
   d5454:	f7ff ffee 	bl	d5434 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}
   d545c:	000da0f8 	.word	0x000da0f8

000d5460 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5460:	b510      	push	{r4, lr}
   d5462:	4604      	mov	r4, r0
}
   d5464:	f7ff fff2 	bl	d544c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d5468:	4620      	mov	r0, r4
   d546a:	2138      	movs	r1, #56	; 0x38
   d546c:	f001 ff5b 	bl	d7326 <_ZdlPvj>
   d5470:	4620      	mov	r0, r4
   d5472:	bd10      	pop	{r4, pc}

000d5474 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5474:	6880      	ldr	r0, [r0, #8]
   d5476:	f000 ba47 	b.w	d5908 <os_mutex_lock>

000d547a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d547a:	6880      	ldr	r0, [r0, #8]
   d547c:	f000 ba4c 	b.w	d5918 <os_mutex_unlock>

000d5480 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d5480:	b510      	push	{r4, lr}
   d5482:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d5484:	6800      	ldr	r0, [r0, #0]
   d5486:	f7ff fff8 	bl	d547a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d548a:	4620      	mov	r0, r4
   d548c:	bd10      	pop	{r4, pc}

000d548e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d548e:	b513      	push	{r0, r1, r4, lr}
   d5490:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5492:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5494:	f7ff ffee 	bl	d5474 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d549a:	88dc      	ldrh	r4, [r3, #6]
   d549c:	b2a4      	uxth	r4, r4
   d549e:	b10c      	cbz	r4, d54a4 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d54a0:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d54a4:	a801      	add	r0, sp, #4
   d54a6:	f7ff ffeb 	bl	d5480 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d54aa:	4620      	mov	r0, r4
   d54ac:	b002      	add	sp, #8
   d54ae:	bd10      	pop	{r4, pc}

000d54b0 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d54b0:	b513      	push	{r0, r1, r4, lr}
   d54b2:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d54b4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d54b6:	f7ff ffdd 	bl	d5474 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d54ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d54be:	b943      	cbnz	r3, d54d2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d54c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d54c2:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d54c4:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d54c6:	a801      	add	r0, sp, #4
   d54c8:	f7ff ffda 	bl	d5480 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d54cc:	4620      	mov	r0, r4
   d54ce:	b002      	add	sp, #8
   d54d0:	bd10      	pop	{r4, pc}
	bool result = false;
   d54d2:	2400      	movs	r4, #0
   d54d4:	e7f7      	b.n	d54c6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d54d6 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d54d6:	b513      	push	{r0, r1, r4, lr}
   d54d8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d54da:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d54dc:	f7ff ffca 	bl	d5474 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d54e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d54e2:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d54e4:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d54e6:	f7ff ffcb 	bl	d5480 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d54ea:	4620      	mov	r0, r4
   d54ec:	b002      	add	sp, #8
   d54ee:	bd10      	pop	{r4, pc}

000d54f0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d54f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d54f4:	4699      	mov	r9, r3
   d54f6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d54f8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d54fc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5500:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d5504:	4604      	mov	r4, r0
   d5506:	460f      	mov	r7, r1
   d5508:	4616      	mov	r6, r2
	if (!haveSetup) {
   d550a:	b913      	cbnz	r3, d5512 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d550c:	6803      	ldr	r3, [r0, #0]
   d550e:	689b      	ldr	r3, [r3, #8]
   d5510:	4798      	blx	r3
		data = "";
   d5512:	4b31      	ldr	r3, [pc, #196]	; (d55d8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d5514:	4638      	mov	r0, r7
		data = "";
   d5516:	2e00      	cmp	r6, #0
   d5518:	bf08      	it	eq
   d551a:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d551c:	f002 fcaf 	bl	d7e7e <strlen>
   d5520:	4605      	mov	r5, r0
   d5522:	4630      	mov	r0, r6
   d5524:	f002 fcab 	bl	d7e7e <strlen>
   d5528:	4428      	add	r0, r5
   d552a:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d552e:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d5530:	bf1c      	itt	ne
   d5532:	f025 0503 	bicne.w	r5, r5, #3
   d5536:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d5538:	4633      	mov	r3, r6
   d553a:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d553e:	e9cd 9a00 	strd	r9, sl, [sp]
   d5542:	4926      	ldr	r1, [pc, #152]	; (d55dc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d5544:	4826      	ldr	r0, [pc, #152]	; (d55e0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d5546:	463a      	mov	r2, r7
   d5548:	f7ff fd86 	bl	d5058 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d554c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d554e:	3b08      	subs	r3, #8
   d5550:	42ab      	cmp	r3, r5
   d5552:	d212      	bcs.n	d557a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d5554:	2400      	movs	r4, #0
}
   d5556:	4620      	mov	r0, r4
   d5558:	b006      	add	sp, #24
   d555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d555e:	88cb      	ldrh	r3, [r1, #6]
   d5560:	2b01      	cmp	r3, #1
   d5562:	d036      	beq.n	d55d2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d5564:	a805      	add	r0, sp, #20
   d5566:	f7ff ff8b 	bl	d5480 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d556a:	6823      	ldr	r3, [r4, #0]
   d556c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d5570:	699b      	ldr	r3, [r3, #24]
   d5572:	4620      	mov	r0, r4
   d5574:	4798      	blx	r3
   d5576:	2800      	cmp	r0, #0
   d5578:	d0ec      	beq.n	d5554 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d557a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d557c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d557e:	f7ff ff79 	bl	d5474 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5582:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5584:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d5586:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5588:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d558a:	1ad2      	subs	r2, r2, r3
   d558c:	42aa      	cmp	r2, r5
   d558e:	d3e6      	bcc.n	d555e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d5590:	ea48 080a 	orr.w	r8, r8, sl
   d5594:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d5598:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d559c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d559e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d55a2:	4639      	mov	r1, r7
   d55a4:	4640      	mov	r0, r8
   d55a6:	f002 fc45 	bl	d7e34 <strcpy>
				cp += strlen(cp) + 1;
   d55aa:	4640      	mov	r0, r8
   d55ac:	f002 fc67 	bl	d7e7e <strlen>
   d55b0:	3001      	adds	r0, #1
				strcpy(cp, data);
   d55b2:	4631      	mov	r1, r6
   d55b4:	4440      	add	r0, r8
   d55b6:	f002 fc3d 	bl	d7e34 <strcpy>
				nextFree += size;
   d55ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d55bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d55be:	441d      	add	r5, r3
   d55c0:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d55c2:	88d3      	ldrh	r3, [r2, #6]
   d55c4:	3301      	adds	r3, #1
   d55c6:	80d3      	strh	r3, [r2, #6]
				return true;
   d55c8:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d55ca:	a805      	add	r0, sp, #20
   d55cc:	f7ff ff58 	bl	d5480 <_ZN11StMutexLockD1Ev>
   d55d0:	e7c1      	b.n	d5556 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d55d2:	2400      	movs	r4, #0
   d55d4:	e7f9      	b.n	d55ca <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d55d6:	bf00      	nop
   d55d8:	000da2ac 	.word	0x000da2ac
   d55dc:	000da01e 	.word	0x000da01e
   d55e0:	2003e5dc 	.word	0x2003e5dc

000d55e4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55e8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d55ec:	69a3      	ldr	r3, [r4, #24]
   d55ee:	b90b      	cbnz	r3, d55f4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d55f0:	f001 fe9f 	bl	d7332 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55f4:	69e3      	ldr	r3, [r4, #28]
   d55f6:	4621      	mov	r1, r4
   d55f8:	4628      	mov	r0, r5
   d55fa:	4798      	blx	r3
		os_thread_yield();
   d55fc:	f000 f974 	bl	d58e8 <os_thread_yield>
	while(true) {
   d5600:	e7f4      	b.n	d55ec <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d5602 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d5602:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d5604:	f7ff ffee 	bl	d55e4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d5608 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5608:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d560a:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d560e:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5610:	4628      	mov	r0, r5
   d5612:	f002 fc34 	bl	d7e7e <strlen>
   d5616:	3001      	adds	r0, #1
   d5618:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d561a:	4628      	mov	r0, r5
   d561c:	f002 fc2f 	bl	d7e7e <strlen>
	size_t offset = start - retainedBuffer;
   d5620:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5622:	3001      	adds	r0, #1
   d5624:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d5626:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d5628:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d562c:	bf1c      	itt	ne
   d562e:	f1c3 0304 	rsbne	r3, r3, #4
   d5632:	18c0      	addne	r0, r0, r3
}
   d5634:	bd68      	pop	{r3, r5, r6, pc}

000d5636 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d5636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5638:	4604      	mov	r4, r0
   d563a:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d563c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d563e:	f7ff ff19 	bl	d5474 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5642:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5644:	88fb      	ldrh	r3, [r7, #6]
   d5646:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d564a:	b1e6      	cbz	r6, d5686 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d564c:	2b01      	cmp	r3, #1
   d564e:	d922      	bls.n	d5696 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d5650:	4629      	mov	r1, r5
   d5652:	4620      	mov	r0, r4
   d5654:	f7ff ffd8 	bl	d5608 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d5658:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d565a:	4629      	mov	r1, r5
   d565c:	4620      	mov	r0, r4
   d565e:	f7ff ffd3 	bl	d5608 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5662:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d5664:	443a      	add	r2, r7
	if (after > 0) {
   d5666:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d5668:	4601      	mov	r1, r0
	size_t len = next - start;
   d566a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d566e:	d002      	beq.n	d5676 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d5670:	4628      	mov	r0, r5
   d5672:	f002 fb8f 	bl	d7d94 <memmove>
	nextFree -= len;
   d5676:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5678:	1b9b      	subs	r3, r3, r6
   d567a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d567c:	88fb      	ldrh	r3, [r7, #6]
   d567e:	3b01      	subs	r3, #1
   d5680:	80fb      	strh	r3, [r7, #6]
	return true;
   d5682:	2601      	movs	r6, #1
   d5684:	e001      	b.n	d568a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d5686:	2b00      	cmp	r3, #0
   d5688:	d1e7      	bne.n	d565a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d568a:	a801      	add	r0, sp, #4
   d568c:	f7ff fef8 	bl	d5480 <_ZN11StMutexLockD1Ev>
}
   d5690:	4630      	mov	r0, r6
   d5692:	b003      	add	sp, #12
   d5694:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d5696:	2600      	movs	r6, #0
   d5698:	e7f7      	b.n	d568a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d569c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d56a0:	460d      	mov	r5, r1
   d56a2:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d56a4:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d56a6:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d56a8:	f7ff fea8 	bl	d53fc <_ZN21PublishQueueAsyncBaseC1Ev>
   d56ac:	4b15      	ldr	r3, [pc, #84]	; (d5704 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d56ae:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d56b2:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d56b4:	4b14      	ldr	r3, [pc, #80]	; (d5708 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d56b6:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d56b8:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d56ba:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d56bc:	4698      	mov	r8, r3
   d56be:	d117      	bne.n	d56f0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d56c0:	88ab      	ldrh	r3, [r5, #4]
   d56c2:	b29b      	uxth	r3, r3
   d56c4:	42b3      	cmp	r3, r6
   d56c6:	d113      	bne.n	d56f0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d56c8:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d56cc:	6367      	str	r7, [r4, #52]	; 0x34
   d56ce:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d56d2:	88eb      	ldrh	r3, [r5, #6]
   d56d4:	fa1f f289 	uxth.w	r2, r9
   d56d8:	b29b      	uxth	r3, r3
   d56da:	429a      	cmp	r2, r3
   d56dc:	d20e      	bcs.n	d56fc <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d56de:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d56e0:	4620      	mov	r0, r4
   d56e2:	f7ff ff91 	bl	d5608 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d56e6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d56e8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d56ea:	f109 0901 	add.w	r9, r9, #1
   d56ee:	d9f0      	bls.n	d56d2 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d56f0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d56f2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d56f6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d56f8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d56fa:	80eb      	strh	r3, [r5, #6]
}
   d56fc:	4620      	mov	r0, r4
   d56fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5702:	bf00      	nop
   d5704:	000da0f8 	.word	0x000da0f8
   d5708:	d19cab61 	.word	0xd19cab61

000d570c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d570c:	b510      	push	{r4, lr}
   d570e:	e9d1 2300 	ldrd	r2, r3, [r1]
   d5712:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d5714:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d5716:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5718:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d571a:	b90a      	cbnz	r2, d5720 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d571c:	07d9      	lsls	r1, r3, #31
   d571e:	d505      	bpl.n	d572c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5720:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5724:	4b0f      	ldr	r3, [pc, #60]	; (d5764 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d5726:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5728:	4b0f      	ldr	r3, [pc, #60]	; (d5768 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d572a:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d572c:	ab02      	add	r3, sp, #8
   d572e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5732:	466a      	mov	r2, sp
   d5734:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5738:	e894 0003 	ldmia.w	r4, {r0, r1}
   d573c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5740:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5744:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5746:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d574a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d574c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d574e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5750:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d5752:	4618      	mov	r0, r3
   d5754:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5756:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5758:	9105      	str	r1, [sp, #20]
   d575a:	f7ff fdf9 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
	}
   d575e:	4620      	mov	r0, r4
   d5760:	b006      	add	sp, #24
   d5762:	bd10      	pop	{r4, pc}
   d5764:	000d5333 	.word	0x000d5333
   d5768:	000d52e9 	.word	0x000d52e9

000d576c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d576c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d576e:	4b05      	ldr	r3, [pc, #20]	; (d5784 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d5770:	9300      	str	r3, [sp, #0]
   d5772:	4669      	mov	r1, sp
   d5774:	2300      	movs	r3, #0
   d5776:	3010      	adds	r0, #16
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	f7ff ffc7 	bl	d570c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d577e:	b003      	add	sp, #12
   d5780:	f85d fb04 	ldr.w	pc, [sp], #4
   d5784:	000d57b5 	.word	0x000d57b5

000d5788 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d5788:	b513      	push	{r0, r1, r4, lr}
   d578a:	4604      	mov	r4, r0
   d578c:	f000 f904 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d5790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5792:	1ac0      	subs	r0, r0, r3
   d5794:	68e3      	ldr	r3, [r4, #12]
   d5796:	4298      	cmp	r0, r3
   d5798:	d308      	bcc.n	d57ac <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d579a:	4b05      	ldr	r3, [pc, #20]	; (d57b0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d579c:	9300      	str	r3, [sp, #0]
   d579e:	4669      	mov	r1, sp
   d57a0:	2300      	movs	r3, #0
   d57a2:	f104 0010 	add.w	r0, r4, #16
   d57a6:	9301      	str	r3, [sp, #4]
   d57a8:	f7ff ffb0 	bl	d570c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d57ac:	b002      	add	sp, #8
   d57ae:	bd10      	pop	{r4, pc}
   d57b0:	000d57b5 	.word	0x000d57b5

000d57b4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d57b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d57b8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d57bc:	b086      	sub	sp, #24
   d57be:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d57c0:	2b00      	cmp	r3, #0
   d57c2:	d164      	bne.n	d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d57c4:	f000 fab8 	bl	d5d38 <spark_cloud_flag_connected>
   d57c8:	2800      	cmp	r0, #0
   d57ca:	d060      	beq.n	d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d57cc:	f000 f8e4 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
   d57d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d57d2:	1ac0      	subs	r0, r0, r3
   d57d4:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d57d8:	4298      	cmp	r0, r3
   d57da:	d958      	bls.n	d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d57dc:	6823      	ldr	r3, [r4, #0]
   d57de:	4620      	mov	r0, r4
   d57e0:	695b      	ldr	r3, [r3, #20]
   d57e2:	4798      	blx	r3
		if (data) {
   d57e4:	4605      	mov	r5, r0
   d57e6:	2800      	cmp	r0, #0
   d57e8:	d051      	beq.n	d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d57ea:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d57ee:	2301      	movs	r3, #1
   d57f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d57f4:	4638      	mov	r0, r7
   d57f6:	f002 fb42 	bl	d7e7e <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d57fa:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d57fe:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d5802:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5804:	682b      	ldr	r3, [r5, #0]
   d5806:	492b      	ldr	r1, [pc, #172]	; (d58b4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d5808:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d580a:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d580c:	4633      	mov	r3, r6
   d580e:	482a      	ldr	r0, [pc, #168]	; (d58b8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5810:	463a      	mov	r2, r7
   d5812:	f7ff fc21 	bl	d5058 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d5816:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5818:	f88d 8000 	strb.w	r8, [sp]
   d581c:	4632      	mov	r2, r6
   d581e:	4639      	mov	r1, r7
   d5820:	a802      	add	r0, sp, #8
   d5822:	f000 fd5b 	bl	d62dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5826:	9d02      	ldr	r5, [sp, #8]
   d5828:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d582a:	b91b      	cbnz	r3, d5834 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d582c:	2001      	movs	r0, #1
   d582e:	f000 fb53 	bl	d5ed8 <delay>
			while(!request.isDone()) {
   d5832:	e7f8      	b.n	d5826 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5834:	2000      	movs	r0, #0
   d5836:	f000 fa31 	bl	d5c9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d583a:	b120      	cbz	r0, d5846 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d583c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d583e:	b913      	cbnz	r3, d5846 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d5840:	f000 fa72 	bl	d5d28 <spark_process>
    }
   d5844:	e7fa      	b.n	d583c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5846:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d5848:	2b01      	cmp	r3, #1
   d584a:	d123      	bne.n	d5894 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d584c:	491b      	ldr	r1, [pc, #108]	; (d58bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d584e:	481a      	ldr	r0, [pc, #104]	; (d58b8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5850:	f7ff fc02 	bl	d5058 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d5854:	6823      	ldr	r3, [r4, #0]
   d5856:	2100      	movs	r1, #0
   d5858:	699b      	ldr	r3, [r3, #24]
   d585a:	4620      	mov	r0, r4
   d585c:	4798      	blx	r3
			isSending = false;
   d585e:	2300      	movs	r3, #0
   d5860:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d5864:	f000 f898 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d5868:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d586a:	9c03      	ldr	r4, [sp, #12]
   d586c:	b17c      	cbz	r4, d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d586e:	6863      	ldr	r3, [r4, #4]
   d5870:	3b01      	subs	r3, #1
   d5872:	6063      	str	r3, [r4, #4]
   d5874:	b95b      	cbnz	r3, d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d5876:	6823      	ldr	r3, [r4, #0]
   d5878:	4620      	mov	r0, r4
   d587a:	689b      	ldr	r3, [r3, #8]
   d587c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d587e:	68a3      	ldr	r3, [r4, #8]
   d5880:	3b01      	subs	r3, #1
   d5882:	60a3      	str	r3, [r4, #8]
   d5884:	b91b      	cbnz	r3, d588e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d5886:	6823      	ldr	r3, [r4, #0]
   d5888:	4620      	mov	r0, r4
   d588a:	68db      	ldr	r3, [r3, #12]
   d588c:	4798      	blx	r3
}
   d588e:	b006      	add	sp, #24
   d5890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d5894:	68e2      	ldr	r2, [r4, #12]
   d5896:	490a      	ldr	r1, [pc, #40]	; (d58c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d5898:	4807      	ldr	r0, [pc, #28]	; (d58b8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d589a:	f7ff fbdd 	bl	d5058 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d589e:	4b09      	ldr	r3, [pc, #36]	; (d58c4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d58a0:	9304      	str	r3, [sp, #16]
   d58a2:	a904      	add	r1, sp, #16
   d58a4:	2300      	movs	r3, #0
   d58a6:	f104 0010 	add.w	r0, r4, #16
   d58aa:	9305      	str	r3, [sp, #20]
   d58ac:	f7ff ff2e 	bl	d570c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d58b0:	e7d5      	b.n	d585e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d58b2:	bf00      	nop
   d58b4:	000da05f 	.word	0x000da05f
   d58b8:	2003e5dc 	.word	0x2003e5dc
   d58bc:	000da080 	.word	0x000da080
   d58c0:	000da097 	.word	0x000da097
   d58c4:	000d5789 	.word	0x000d5789

000d58c8 <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
   d58c8:	4b01      	ldr	r3, [pc, #4]	; (d58d0 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d58ca:	4a02      	ldr	r2, [pc, #8]	; (d58d4 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d58cc:	601a      	str	r2, [r3, #0]
}
   d58ce:	4770      	bx	lr
   d58d0:	2003e5dc 	.word	0x2003e5dc
   d58d4:	000da0be 	.word	0x000da0be

000d58d8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <os_thread_create+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	685b      	ldr	r3, [r3, #4]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030248 	.word	0x00030248

000d58e8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <os_thread_yield+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	68db      	ldr	r3, [r3, #12]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030248 	.word	0x00030248

000d58f8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <os_mutex_create+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030248 	.word	0x00030248

000d5908 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <os_mutex_lock+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	00030248 	.word	0x00030248

000d5918 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <os_mutex_unlock+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	00030248 	.word	0x00030248

000d5928 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <os_mutex_recursive_create+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030248 	.word	0x00030248

000d5938 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <os_mutex_recursive_destroy+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030248 	.word	0x00030248

000d5948 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <os_thread_exit+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030248 	.word	0x00030248

000d5958 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <HAL_Feature_Set+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030234 	.word	0x00030234

000d5968 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <HAL_RNG_GetRandomNumber+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	685b      	ldr	r3, [r3, #4]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030218 	.word	0x00030218

000d5978 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <HAL_Delay_Milliseconds+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	689b      	ldr	r3, [r3, #8]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030218 	.word	0x00030218

000d5988 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <HAL_Delay_Microseconds+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	68db      	ldr	r3, [r3, #12]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030218 	.word	0x00030218

000d5998 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	695b      	ldr	r3, [r3, #20]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030218 	.word	0x00030218

000d59a8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <hal_rtc_time_is_valid+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030218 	.word	0x00030218

000d59b8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <hal_rtc_get_time+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030218 	.word	0x00030218

000d59c8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <HAL_Pin_Mode+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	689b      	ldr	r3, [r3, #8]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003022c 	.word	0x0003022c

000d59d8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <HAL_Get_Pin_Mode+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	68db      	ldr	r3, [r3, #12]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003022c 	.word	0x0003022c

000d59e8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <HAL_GPIO_Write+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	691b      	ldr	r3, [r3, #16]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003022c 	.word	0x0003022c

000d59f8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_GPIO_Read+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	695b      	ldr	r3, [r3, #20]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003022c 	.word	0x0003022c

000d5a08 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_Interrupts_Attach+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	699b      	ldr	r3, [r3, #24]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003022c 	.word	0x0003022c

000d5a18 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <HAL_Interrupts_Detach+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	69db      	ldr	r3, [r3, #28]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	0003022c 	.word	0x0003022c

000d5a28 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <hal_i2c_begin+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	68db      	ldr	r3, [r3, #12]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030228 	.word	0x00030228

000d5a38 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <hal_i2c_begin_transmission+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	699b      	ldr	r3, [r3, #24]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	00030228 	.word	0x00030228

000d5a48 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <hal_i2c_end_transmission+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	69db      	ldr	r3, [r3, #28]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	00030228 	.word	0x00030228

000d5a58 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <hal_i2c_write+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	6a1b      	ldr	r3, [r3, #32]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030228 	.word	0x00030228

000d5a68 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <hal_i2c_available+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030228 	.word	0x00030228

000d5a78 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <hal_i2c_read+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030228 	.word	0x00030228

000d5a88 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <hal_i2c_peek+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030228 	.word	0x00030228

000d5a98 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <hal_i2c_flush+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030228 	.word	0x00030228

000d5aa8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <hal_i2c_is_enabled+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030228 	.word	0x00030228

000d5ab8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <hal_i2c_init+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030228 	.word	0x00030228

000d5ac8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <hal_i2c_lock+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030228 	.word	0x00030228

000d5ad8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <hal_i2c_unlock+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030228 	.word	0x00030228

000d5ae8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <hal_i2c_request_ex+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	00030228 	.word	0x00030228

000d5af8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <inet_inet_ntop+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	695b      	ldr	r3, [r3, #20]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030264 	.word	0x00030264

000d5b08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <netdb_freeaddrinfo+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	689b      	ldr	r3, [r3, #8]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	00030268 	.word	0x00030268

000d5b18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <netdb_getaddrinfo+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	68db      	ldr	r3, [r3, #12]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	00030268 	.word	0x00030268

000d5b28 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <hal_spi_init+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	69db      	ldr	r3, [r3, #28]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	00030230 	.word	0x00030230

000d5b38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <hal_spi_is_enabled+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	6a1b      	ldr	r3, [r3, #32]
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	00030230 	.word	0x00030230

000d5b48 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <hal_usart_init+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	681b      	ldr	r3, [r3, #0]
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	0003023c 	.word	0x0003023c

000d5b58 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <hal_usart_write+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	68db      	ldr	r3, [r3, #12]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	0003023c 	.word	0x0003023c

000d5b68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <hal_usart_available+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	691b      	ldr	r3, [r3, #16]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	0003023c 	.word	0x0003023c

000d5b78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <hal_usart_read+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	695b      	ldr	r3, [r3, #20]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	0003023c 	.word	0x0003023c

000d5b88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <hal_usart_peek+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	699b      	ldr	r3, [r3, #24]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	0003023c 	.word	0x0003023c

000d5b98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <hal_usart_flush+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	69db      	ldr	r3, [r3, #28]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	0003023c 	.word	0x0003023c

000d5ba8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <hal_usart_is_enabled+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	6a1b      	ldr	r3, [r3, #32]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	0003023c 	.word	0x0003023c

000d5bb8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <hal_usart_available_data_for_write+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	0003023c 	.word	0x0003023c

000d5bc8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <HAL_USB_USART_Init+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	681b      	ldr	r3, [r3, #0]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	0003024c 	.word	0x0003024c

000d5bd8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <HAL_USB_USART_Available_Data+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	691b      	ldr	r3, [r3, #16]
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	0003024c 	.word	0x0003024c

000d5be8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	695b      	ldr	r3, [r3, #20]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	0003024c 	.word	0x0003024c

000d5bf8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <HAL_USB_USART_Receive_Data+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	699b      	ldr	r3, [r3, #24]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	0003024c 	.word	0x0003024c

000d5c08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <HAL_USB_USART_Send_Data+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	69db      	ldr	r3, [r3, #28]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	0003024c 	.word	0x0003024c

000d5c18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <HAL_USB_USART_Flush_Data+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6a1b      	ldr	r3, [r3, #32]
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	0003024c 	.word	0x0003024c

000d5c28 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <panic_+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030260 	.word	0x00030260

000d5c38 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <log_message_v+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030260 	.word	0x00030260

000d5c48 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b03      	ldr	r3, [pc, #12]	; (d5c58 <diag_get_source+0x10>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5c52:	9301      	str	r3, [sp, #4]
   d5c54:	bd08      	pop	{r3, pc}
   d5c56:	0000      	.short	0x0000
   d5c58:	00030260 	.word	0x00030260

000d5c5c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <system_mode+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	681b      	ldr	r3, [r3, #0]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030220 	.word	0x00030220

000d5c6c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <set_system_mode+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	685b      	ldr	r3, [r3, #4]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030220 	.word	0x00030220

000d5c7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <system_delay_ms+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	695b      	ldr	r3, [r3, #20]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030220 	.word	0x00030220

000d5c8c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <system_thread_set_state+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030220 	.word	0x00030220

000d5c9c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <application_thread_current+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030220 	.word	0x00030220

000d5cac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <application_thread_invoke+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030220 	.word	0x00030220

000d5cbc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <system_thread_get_state+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030220 	.word	0x00030220

000d5ccc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b03      	ldr	r3, [pc, #12]	; (d5cdc <system_ctrl_set_app_request_handler+0x10>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5cd6:	9301      	str	r3, [sp, #4]
   d5cd8:	bd08      	pop	{r3, pc}
   d5cda:	0000      	.short	0x0000
   d5cdc:	00030220 	.word	0x00030220

000d5ce0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b03      	ldr	r3, [pc, #12]	; (d5cf0 <system_ctrl_set_result+0x10>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5cea:	9301      	str	r3, [sp, #4]
   d5cec:	bd08      	pop	{r3, pc}
   d5cee:	0000      	.short	0x0000
   d5cf0:	00030220 	.word	0x00030220

000d5cf4 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b03      	ldr	r3, [pc, #12]	; (d5d04 <system_reset+0x10>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d5cfe:	9301      	str	r3, [sp, #4]
   d5d00:	bd08      	pop	{r3, pc}
   d5d02:	0000      	.short	0x0000
   d5d04:	00030220 	.word	0x00030220

000d5d08 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <spark_variable+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	681b      	ldr	r3, [r3, #0]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030244 	.word	0x00030244

000d5d18 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <spark_function+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	685b      	ldr	r3, [r3, #4]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030244 	.word	0x00030244

000d5d28 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <spark_process+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	689b      	ldr	r3, [r3, #8]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030244 	.word	0x00030244

000d5d38 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <spark_cloud_flag_connected+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	695b      	ldr	r3, [r3, #20]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030244 	.word	0x00030244

000d5d48 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <spark_deviceID+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	69db      	ldr	r3, [r3, #28]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030244 	.word	0x00030244

000d5d58 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <spark_send_event+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	6a1b      	ldr	r3, [r3, #32]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030244 	.word	0x00030244

000d5d68 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <spark_subscribe+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030244 	.word	0x00030244

000d5d78 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <spark_sync_time+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030244 	.word	0x00030244

000d5d88 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <spark_sync_time_pending+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030244 	.word	0x00030244

000d5d98 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030244 	.word	0x00030244

000d5da8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <network_connect+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	685b      	ldr	r3, [r3, #4]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030240 	.word	0x00030240

000d5db8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <network_connecting+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	689b      	ldr	r3, [r3, #8]
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030240 	.word	0x00030240

000d5dc8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <network_disconnect+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	68db      	ldr	r3, [r3, #12]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030240 	.word	0x00030240

000d5dd8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <network_ready+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	691b      	ldr	r3, [r3, #16]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030240 	.word	0x00030240

000d5de8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <network_on+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	695b      	ldr	r3, [r3, #20]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030240 	.word	0x00030240

000d5df8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <network_off+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	699b      	ldr	r3, [r3, #24]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030240 	.word	0x00030240

000d5e08 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <network_listen+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	69db      	ldr	r3, [r3, #28]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030240 	.word	0x00030240

000d5e18 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <network_listening+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	6a1b      	ldr	r3, [r3, #32]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030240 	.word	0x00030240

000d5e28 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <network_set_listen_timeout+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	00030240 	.word	0x00030240

000d5e38 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <network_get_listen_timeout+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	00030240 	.word	0x00030240

000d5e48 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <malloc+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	681b      	ldr	r3, [r3, #0]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003021c 	.word	0x0003021c

000d5e58 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <free+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	685b      	ldr	r3, [r3, #4]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	0003021c 	.word	0x0003021c

000d5e68 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <realloc+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	689b      	ldr	r3, [r3, #8]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003021c 	.word	0x0003021c

000d5e78 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <siprintf+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	691b      	ldr	r3, [r3, #16]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003021c 	.word	0x0003021c

000d5e88 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <snprintf+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	69db      	ldr	r3, [r3, #28]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003021c 	.word	0x0003021c

000d5e98 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <abort+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003021c 	.word	0x0003021c

000d5ea8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <_malloc_r+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	0003021c 	.word	0x0003021c

000d5eb8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <newlib_impure_ptr_callback+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	0003021c 	.word	0x0003021c

000d5ec8 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <localtime_r+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	0003021c 	.word	0x0003021c

000d5ed8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5ed8:	2100      	movs	r1, #0
   d5eda:	f7ff becf 	b.w	d5c7c <system_delay_ms>

000d5ede <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5ede:	b510      	push	{r4, lr}
      if (_M_empty())
   d5ee0:	6883      	ldr	r3, [r0, #8]
   d5ee2:	4604      	mov	r4, r0
   d5ee4:	b90b      	cbnz	r3, d5eea <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5ee6:	f001 fa24 	bl	d7332 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5eea:	68c3      	ldr	r3, [r0, #12]
   d5eec:	4798      	blx	r3
      if (_M_manager)
   d5eee:	68a3      	ldr	r3, [r4, #8]
   d5ef0:	b11b      	cbz	r3, d5efa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ef2:	2203      	movs	r2, #3
   d5ef4:	4621      	mov	r1, r4
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5efa:	4620      	mov	r0, r4
   d5efc:	2110      	movs	r1, #16
}
   d5efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5f02:	f001 ba10 	b.w	d7326 <_ZdlPvj>

000d5f06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f06:	b510      	push	{r4, lr}
          _M_dispose();
   d5f08:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f0a:	4604      	mov	r4, r0
          _M_dispose();
   d5f0c:	689b      	ldr	r3, [r3, #8]
   d5f0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f10:	68a3      	ldr	r3, [r4, #8]
   d5f12:	3b01      	subs	r3, #1
   d5f14:	60a3      	str	r3, [r4, #8]
   d5f16:	b92b      	cbnz	r3, d5f24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5f18:	6823      	ldr	r3, [r4, #0]
   d5f1a:	4620      	mov	r0, r4
   d5f1c:	68db      	ldr	r3, [r3, #12]
    }
   d5f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5f22:	4718      	bx	r3
    }
   d5f24:	bd10      	pop	{r4, pc}

000d5f26 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f26:	b510      	push	{r4, lr}
   d5f28:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f2a:	6800      	ldr	r0, [r0, #0]
   d5f2c:	b108      	cbz	r0, d5f32 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f2e:	f7ff fd03 	bl	d5938 <os_mutex_recursive_destroy>
    }
   d5f32:	4620      	mov	r0, r4
   d5f34:	bd10      	pop	{r4, pc}

000d5f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5f36:	680b      	ldr	r3, [r1, #0]
   d5f38:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5f3a:	b113      	cbz	r3, d5f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5f3c:	685a      	ldr	r2, [r3, #4]
   d5f3e:	3201      	adds	r2, #1
   d5f40:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5f42:	4770      	bx	lr

000d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5f44:	b510      	push	{r4, lr}
   d5f46:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5f48:	6800      	ldr	r0, [r0, #0]
   d5f4a:	b128      	cbz	r0, d5f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5f4c:	6843      	ldr	r3, [r0, #4]
   d5f4e:	3b01      	subs	r3, #1
   d5f50:	6043      	str	r3, [r0, #4]
   d5f52:	b90b      	cbnz	r3, d5f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5f54:	f7ff ffd7 	bl	d5f06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5f58:	4620      	mov	r0, r4
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f5c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5f5e:	4c06      	ldr	r4, [pc, #24]	; (d5f78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f60:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5f62:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5f64:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5f66:	f7ff fcdf 	bl	d5928 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	4a03      	ldr	r2, [pc, #12]	; (d5f7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f6e:	4904      	ldr	r1, [pc, #16]	; (d5f80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5f74:	f001 b9d2 	b.w	d731c <__aeabi_atexit>
   d5f78:	2003e5e0 	.word	0x2003e5e0
   d5f7c:	2003e458 	.word	0x2003e458
   d5f80:	000d5f27 	.word	0x000d5f27

000d5f84 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5f84:	2200      	movs	r2, #0
   d5f86:	6840      	ldr	r0, [r0, #4]
   d5f88:	4611      	mov	r1, r2
   d5f8a:	f7ff bf25 	b.w	d5dd8 <network_ready>

000d5f8e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5f8e:	2200      	movs	r2, #0
   d5f90:	6840      	ldr	r0, [r0, #4]
   d5f92:	4611      	mov	r1, r2
   d5f94:	f7ff bf40 	b.w	d5e18 <network_listening>

000d5f98 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5f98:	2200      	movs	r2, #0
   d5f9a:	6840      	ldr	r0, [r0, #4]
   d5f9c:	4611      	mov	r1, r2
   d5f9e:	f7ff bf4b 	b.w	d5e38 <network_get_listen_timeout>

000d5fa2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5fa2:	6840      	ldr	r0, [r0, #4]
   d5fa4:	2200      	movs	r2, #0
   d5fa6:	f7ff bf3f 	b.w	d5e28 <network_set_listen_timeout>

000d5faa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5faa:	6840      	ldr	r0, [r0, #4]
   d5fac:	2200      	movs	r2, #0
   d5fae:	f081 0101 	eor.w	r1, r1, #1
   d5fb2:	f7ff bf29 	b.w	d5e08 <network_listen>

000d5fb6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5fb6:	2300      	movs	r3, #0
   d5fb8:	6840      	ldr	r0, [r0, #4]
   d5fba:	461a      	mov	r2, r3
   d5fbc:	4619      	mov	r1, r3
   d5fbe:	f7ff bf1b 	b.w	d5df8 <network_off>

000d5fc2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	6840      	ldr	r0, [r0, #4]
   d5fc6:	461a      	mov	r2, r3
   d5fc8:	4619      	mov	r1, r3
   d5fca:	f7ff bf0d 	b.w	d5de8 <network_on>

000d5fce <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5fce:	2200      	movs	r2, #0
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	4611      	mov	r1, r2
   d5fd4:	f7ff bef0 	b.w	d5db8 <network_connecting>

000d5fd8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fd8:	6840      	ldr	r0, [r0, #4]
   d5fda:	2200      	movs	r2, #0
   d5fdc:	2102      	movs	r1, #2
   d5fde:	f7ff bef3 	b.w	d5dc8 <network_disconnect>

000d5fe2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5fe2:	2300      	movs	r3, #0
   d5fe4:	6840      	ldr	r0, [r0, #4]
   d5fe6:	461a      	mov	r2, r3
   d5fe8:	f7ff bede 	b.w	d5da8 <network_connect>

000d5fec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5fec:	4b08      	ldr	r3, [pc, #32]	; (d6010 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5fee:	b510      	push	{r4, lr}
   d5ff0:	2428      	movs	r4, #40	; 0x28
   d5ff2:	4622      	mov	r2, r4
   d5ff4:	4618      	mov	r0, r3
   d5ff6:	2100      	movs	r1, #0
   d5ff8:	f001 fee6 	bl	d7dc8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ffc:	4b05      	ldr	r3, [pc, #20]	; (d6014 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5ffe:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6004:	6042      	str	r2, [r0, #4]
   d6006:	2204      	movs	r2, #4
   d6008:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d600a:	4a03      	ldr	r2, [pc, #12]	; (d6018 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d600c:	601a      	str	r2, [r3, #0]
   d600e:	bd10      	pop	{r4, pc}
   d6010:	2003e5ec 	.word	0x2003e5ec
   d6014:	2003e5e4 	.word	0x2003e5e4
   d6018:	000da120 	.word	0x000da120

000d601c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d601c:	4770      	bx	lr

000d601e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d601e:	2000      	movs	r0, #0
   d6020:	4770      	bx	lr

000d6022 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6022:	b510      	push	{r4, lr}
   d6024:	2110      	movs	r1, #16
   d6026:	4604      	mov	r4, r0
   d6028:	f001 f97d 	bl	d7326 <_ZdlPvj>
   d602c:	4620      	mov	r0, r4
   d602e:	bd10      	pop	{r4, pc}

000d6030 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6030:	b508      	push	{r3, lr}
      { delete this; }
   d6032:	f7ff fff6 	bl	d6022 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6036:	bd08      	pop	{r3, pc}

000d6038 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6038:	b530      	push	{r4, r5, lr}
        type_(type) {
   d603a:	2200      	movs	r2, #0
   d603c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6040:	6002      	str	r2, [r0, #0]
   d6042:	8084      	strh	r4, [r0, #4]
   d6044:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6046:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6048:	680c      	ldr	r4, [r1, #0]
   d604a:	8085      	strh	r5, [r0, #4]
   d604c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d604e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6050:	bd30      	pop	{r4, r5, pc}

000d6052 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6052:	b510      	push	{r4, lr}
   d6054:	4604      	mov	r4, r0
    free((void*)msg_);
   d6056:	6800      	ldr	r0, [r0, #0]
   d6058:	f7ff fefe 	bl	d5e58 <free>
}
   d605c:	4620      	mov	r0, r4
   d605e:	bd10      	pop	{r4, pc}

000d6060 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6060:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6062:	68c4      	ldr	r4, [r0, #12]
   d6064:	b1f4      	cbz	r4, d60a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d6066:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6068:	2b02      	cmp	r3, #2
   d606a:	d103      	bne.n	d6074 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d606c:	f104 000c 	add.w	r0, r4, #12
   d6070:	f7ff ffef 	bl	d6052 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6074:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6076:	b135      	cbz	r5, d6086 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6078:	4628      	mov	r0, r5
   d607a:	f7ff f969 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
   d607e:	2110      	movs	r1, #16
   d6080:	4628      	mov	r0, r5
   d6082:	f001 f950 	bl	d7326 <_ZdlPvj>
   d6086:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6088:	b135      	cbz	r5, d6098 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d608a:	4628      	mov	r0, r5
   d608c:	f7ff f960 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
   d6090:	2110      	movs	r1, #16
   d6092:	4628      	mov	r0, r5
   d6094:	f001 f947 	bl	d7326 <_ZdlPvj>
   d6098:	4620      	mov	r0, r4
   d609a:	2114      	movs	r1, #20
   d609c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d60a0:	f001 b941 	b.w	d7326 <_ZdlPvj>
   d60a4:	bd38      	pop	{r3, r4, r5, pc}

000d60a6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d60a6:	b510      	push	{r4, lr}
   d60a8:	b088      	sub	sp, #32
   d60aa:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d60ac:	4668      	mov	r0, sp
   d60ae:	f000 fd70 	bl	d6b92 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d60b2:	4669      	mov	r1, sp
   d60b4:	a804      	add	r0, sp, #16
   d60b6:	f000 fd8f 	bl	d6bd8 <_ZN6StringC1ERKS_>
   d60ba:	a804      	add	r0, sp, #16
   d60bc:	47a0      	blx	r4
   d60be:	4604      	mov	r4, r0
   d60c0:	a804      	add	r0, sp, #16
   d60c2:	f000 fd1b 	bl	d6afc <_ZN6StringD1Ev>
    String p(param);
   d60c6:	4668      	mov	r0, sp
   d60c8:	f000 fd18 	bl	d6afc <_ZN6StringD1Ev>
}
   d60cc:	4620      	mov	r0, r4
   d60ce:	b008      	add	sp, #32
   d60d0:	bd10      	pop	{r4, pc}

000d60d2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d60d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d60d4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d60d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d60da:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d60dc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d60de:	461a      	mov	r2, r3
   d60e0:	4669      	mov	r1, sp
   d60e2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d60e4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d60e8:	f8ad 4000 	strh.w	r4, [sp]
   d60ec:	f7ff fe14 	bl	d5d18 <spark_function>
}
   d60f0:	b004      	add	sp, #16
   d60f2:	bd10      	pop	{r4, pc}

000d60f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d60f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60f6:	460e      	mov	r6, r1
   d60f8:	4604      	mov	r4, r0
   d60fa:	f856 3b04 	ldr.w	r3, [r6], #4
   d60fe:	9300      	str	r3, [sp, #0]
   d6100:	460d      	mov	r5, r1
   d6102:	a801      	add	r0, sp, #4
   d6104:	4631      	mov	r1, r6
   d6106:	f7ff ff16 	bl	d5f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d610a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d610c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d610e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6110:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6112:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6114:	2300      	movs	r3, #0
   d6116:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6118:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d611a:	f7ff ff13 	bl	d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d611e:	4630      	mov	r0, r6
   d6120:	f7ff ff10 	bl	d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6124:	4628      	mov	r0, r5
   d6126:	2108      	movs	r1, #8
   d6128:	f001 f8fd 	bl	d7326 <_ZdlPvj>
        return p;
    }
   d612c:	4620      	mov	r0, r4
   d612e:	b002      	add	sp, #8
   d6130:	bd70      	pop	{r4, r5, r6, pc}

000d6132 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6132:	b513      	push	{r0, r1, r4, lr}
   d6134:	460b      	mov	r3, r1
   d6136:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6138:	e9d0 0100 	ldrd	r0, r1, [r0]
   d613c:	466c      	mov	r4, sp
   d613e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6142:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6146:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d614a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d614e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6152:	b002      	add	sp, #8
   d6154:	bd10      	pop	{r4, pc}

000d6156 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6156:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6158:	b510      	push	{r4, lr}
      if (_M_empty())
   d615a:	b90a      	cbnz	r2, d6160 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d615c:	f001 f8e9 	bl	d7332 <_ZSt25__throw_bad_function_callv>
    }
   d6160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6164:	68c3      	ldr	r3, [r0, #12]
   d6166:	4718      	bx	r3

000d6168 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6168:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d616a:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d616c:	f100 0110 	add.w	r1, r0, #16
   d6170:	f7ff fff1 	bl	d6156 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6174:	bd08      	pop	{r3, pc}

000d6176 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6176:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6178:	b510      	push	{r4, lr}
      if (_M_empty())
   d617a:	b90a      	cbnz	r2, d6180 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d617c:	f001 f8d9 	bl	d7332 <_ZSt25__throw_bad_function_callv>
    }
   d6180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6184:	68c3      	ldr	r3, [r0, #12]
   d6186:	4718      	bx	r3

000d6188 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6188:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d618a:	6800      	ldr	r0, [r0, #0]
   d618c:	f100 0110 	add.w	r1, r0, #16
   d6190:	f7ff fff1 	bl	d6176 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6194:	bd08      	pop	{r3, pc}
	...

000d6198 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6198:	b538      	push	{r3, r4, r5, lr}
   d619a:	2300      	movs	r3, #0
   d619c:	4604      	mov	r4, r0
   d619e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d61a0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d61a2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d61a4:	f7fd ff77 	bl	d4096 <_Znwj>
   d61a8:	b128      	cbz	r0, d61b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d61aa:	2301      	movs	r3, #1
   d61ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d61b0:	4b02      	ldr	r3, [pc, #8]	; (d61bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d61b2:	6003      	str	r3, [r0, #0]
   d61b4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d61b6:	6020      	str	r0, [r4, #0]
	}
   d61b8:	4620      	mov	r0, r4
   d61ba:	bd38      	pop	{r3, r4, r5, pc}
   d61bc:	000da154 	.word	0x000da154

000d61c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d61c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d61c2:	2300      	movs	r3, #0
   d61c4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d61c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d61c8:	4604      	mov	r4, r0
   d61ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d61cc:	b12b      	cbz	r3, d61da <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d61ce:	2202      	movs	r2, #2
   d61d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d61d2:	68eb      	ldr	r3, [r5, #12]
   d61d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d61d6:	68ab      	ldr	r3, [r5, #8]
   d61d8:	60a3      	str	r3, [r4, #8]
    }
   d61da:	4620      	mov	r0, r4
   d61dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d61e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d61e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61e2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d61e4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d61e6:	4668      	mov	r0, sp
   d61e8:	f7ff ff26 	bl	d6038 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d61ec:	f04f 0302 	mov.w	r3, #2
   d61f0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d61f4:	2a00      	cmp	r2, #0
   d61f6:	d103      	bne.n	d6200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d61f8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d61fc:	2900      	cmp	r1, #0
   d61fe:	d1f7      	bne.n	d61f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6200:	d125      	bne.n	d624e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6202:	f104 050c 	add.w	r5, r4, #12
   d6206:	4669      	mov	r1, sp
   d6208:	4628      	mov	r0, r5
   d620a:	f7ff ff15 	bl	d6038 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d620e:	f3bf 8f5b 	dmb	ish
   d6212:	2301      	movs	r3, #1
   d6214:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6216:	2000      	movs	r0, #0
   d6218:	f104 0308 	add.w	r3, r4, #8
   d621c:	f3bf 8f5b 	dmb	ish
   d6220:	e853 6f00 	ldrex	r6, [r3]
   d6224:	e843 0200 	strex	r2, r0, [r3]
   d6228:	2a00      	cmp	r2, #0
   d622a:	d1f9      	bne.n	d6220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d622c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6230:	b16e      	cbz	r6, d624e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6232:	f7ff fd33 	bl	d5c9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6236:	b178      	cbz	r0, d6258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6238:	4629      	mov	r1, r5
   d623a:	4630      	mov	r0, r6
   d623c:	f7ff ff8b 	bl	d6156 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6240:	4630      	mov	r0, r6
   d6242:	f7ff f885 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6246:	2110      	movs	r1, #16
   d6248:	4630      	mov	r0, r6
   d624a:	f001 f86c 	bl	d7326 <_ZdlPvj>
        p_->setError(std::move(error));
   d624e:	4668      	mov	r0, sp
   d6250:	f7ff feff 	bl	d6052 <_ZN8particle5ErrorD1Ev>
    }
   d6254:	b009      	add	sp, #36	; 0x24
   d6256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6258:	4631      	mov	r1, r6
   d625a:	a802      	add	r0, sp, #8
   d625c:	f7ff ffb0 	bl	d61c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6260:	68e0      	ldr	r0, [r4, #12]
   d6262:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6266:	b108      	cbz	r0, d626c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6268:	f001 fdec 	bl	d7e44 <strdup>
        type_(type) {
   d626c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d626e:	2010      	movs	r0, #16
   d6270:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6274:	f7fd ff0f 	bl	d4096 <_Znwj>
   d6278:	4605      	mov	r5, r0
   d627a:	b1e8      	cbz	r0, d62b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d627c:	2700      	movs	r7, #0
   d627e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6280:	2018      	movs	r0, #24
   d6282:	f7fd ff08 	bl	d4096 <_Znwj>
   d6286:	4604      	mov	r4, r0
   d6288:	b188      	cbz	r0, d62ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d628a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d628c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d628e:	a802      	add	r0, sp, #8
   d6290:	f7ff ff4f 	bl	d6132 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6294:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6296:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6298:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d629a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d629c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d629e:	a906      	add	r1, sp, #24
   d62a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d62a2:	60e3      	str	r3, [r4, #12]
   d62a4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d62a8:	9205      	str	r2, [sp, #20]
   d62aa:	f7ff fec5 	bl	d6038 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d62ae:	4b08      	ldr	r3, [pc, #32]	; (d62d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d62b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d62b2:	4b08      	ldr	r3, [pc, #32]	; (d62d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62b4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d62b6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d62b8:	a806      	add	r0, sp, #24
   d62ba:	f7ff feca 	bl	d6052 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d62be:	a802      	add	r0, sp, #8
   d62c0:	f7ff f846 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d62c4:	2200      	movs	r2, #0
   d62c6:	4629      	mov	r1, r5
   d62c8:	4803      	ldr	r0, [pc, #12]	; (d62d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d62ca:	f7ff fcef 	bl	d5cac <application_thread_invoke>
   d62ce:	e7b7      	b.n	d6240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d62d0:	000d6169 	.word	0x000d6169
   d62d4:	000d6401 	.word	0x000d6401
   d62d8:	000d5edf 	.word	0x000d5edf

000d62dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d62dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d62e0:	b08a      	sub	sp, #40	; 0x28
   d62e2:	4605      	mov	r5, r0
   d62e4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d62e8:	460c      	mov	r4, r1
   d62ea:	4617      	mov	r7, r2
   d62ec:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d62ee:	f7ff fd23 	bl	d5d38 <spark_cloud_flag_connected>
   d62f2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d62f4:	4682      	mov	sl, r0
   d62f6:	bb38      	cbnz	r0, d6348 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d62f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d62fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d62fe:	a905      	add	r1, sp, #20
   d6300:	4630      	mov	r0, r6
   d6302:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6306:	f7ff fe97 	bl	d6038 <_ZN8particle5ErrorC1EOS0_>
   d630a:	2014      	movs	r0, #20
   d630c:	f7fd fec3 	bl	d4096 <_Znwj>
   d6310:	4604      	mov	r4, r0
   d6312:	b148      	cbz	r0, d6328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6314:	2302      	movs	r3, #2
   d6316:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6318:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d631a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d631e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6320:	4631      	mov	r1, r6
   d6322:	300c      	adds	r0, #12
   d6324:	f7ff fe88 	bl	d6038 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6328:	4628      	mov	r0, r5
	: __shared_count(__p)
   d632a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d632c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6330:	f7ff ff32 	bl	d6198 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6334:	4630      	mov	r0, r6
   d6336:	f7ff fe8c 	bl	d6052 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d633a:	a805      	add	r0, sp, #20
   d633c:	f7ff fe89 	bl	d6052 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6340:	4628      	mov	r0, r5
   d6342:	b00a      	add	sp, #40	; 0x28
   d6344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6348:	230c      	movs	r3, #12
   d634a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d634e:	2014      	movs	r0, #20
   d6350:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6354:	9307      	str	r3, [sp, #28]
   d6356:	f7fd fe9e 	bl	d4096 <_Znwj>
   d635a:	4601      	mov	r1, r0
   d635c:	b128      	cbz	r0, d636a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d635e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6362:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6366:	f880 a001 	strb.w	sl, [r0, #1]
   d636a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d636c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d636e:	f7ff ff13 	bl	d6198 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6372:	4b22      	ldr	r3, [pc, #136]	; (d63fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6374:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6376:	2008      	movs	r0, #8
   d6378:	f7fd fe8d 	bl	d4096 <_Znwj>
   d637c:	4682      	mov	sl, r0
   d637e:	b128      	cbz	r0, d638c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6380:	9b03      	ldr	r3, [sp, #12]
   d6382:	f840 3b04 	str.w	r3, [r0], #4
   d6386:	a904      	add	r1, sp, #16
   d6388:	f7ff fdd5 	bl	d5f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d638c:	9600      	str	r6, [sp, #0]
   d638e:	fa5f f389 	uxtb.w	r3, r9
   d6392:	4642      	mov	r2, r8
   d6394:	4639      	mov	r1, r7
   d6396:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6398:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d639c:	f7ff fcdc 	bl	d5d58 <spark_send_event>
   d63a0:	b9b8      	cbnz	r0, d63d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d63a2:	9b03      	ldr	r3, [sp, #12]
   d63a4:	785b      	ldrb	r3, [r3, #1]
   d63a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d63aa:	b993      	cbnz	r3, d63d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d63ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d63b0:	a905      	add	r1, sp, #20
   d63b2:	a803      	add	r0, sp, #12
   d63b4:	9205      	str	r2, [sp, #20]
   d63b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d63ba:	f7ff ff11 	bl	d61e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d63be:	a805      	add	r0, sp, #20
   d63c0:	f7ff fe47 	bl	d6052 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d63c4:	a805      	add	r0, sp, #20
   d63c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d63c8:	f7ff fe94 	bl	d60f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d63cc:	a806      	add	r0, sp, #24
   d63ce:	f7ff fdb9 	bl	d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63d2:	9b03      	ldr	r3, [sp, #12]
   d63d4:	9305      	str	r3, [sp, #20]
   d63d6:	a904      	add	r1, sp, #16
   d63d8:	a806      	add	r0, sp, #24
   d63da:	f7ff fdac 	bl	d5f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63de:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d63e0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63e2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d63e4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d63e6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d63e8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d63ea:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d63ec:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d63ee:	f7ff fda9 	bl	d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63f2:	a804      	add	r0, sp, #16
   d63f4:	f7ff fda6 	bl	d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d63f8:	e7a2      	b.n	d6340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d63fa:	bf00      	nop
   d63fc:	000d64c5 	.word	0x000d64c5

000d6400 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6400:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6404:	4605      	mov	r5, r0
	  switch (__op)
   d6406:	d007      	beq.n	d6418 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6408:	2a03      	cmp	r2, #3
   d640a:	d018      	beq.n	d643e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d640c:	2a01      	cmp	r2, #1
   d640e:	d101      	bne.n	d6414 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6410:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6412:	6003      	str	r3, [r0, #0]
	}
   d6414:	2000      	movs	r0, #0
   d6416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6418:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d641a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d641c:	f7fd fe3b 	bl	d4096 <_Znwj>
   d6420:	4604      	mov	r4, r0
   d6422:	b150      	cbz	r0, d643a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6424:	4631      	mov	r1, r6
   d6426:	f7ff fecb 	bl	d61c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d642a:	6930      	ldr	r0, [r6, #16]
   d642c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6430:	b108      	cbz	r0, d6436 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6432:	f001 fd07 	bl	d7e44 <strdup>
        type_(type) {
   d6436:	6120      	str	r0, [r4, #16]
   d6438:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d643a:	602c      	str	r4, [r5, #0]
	}
   d643c:	e7ea      	b.n	d6414 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d643e:	6804      	ldr	r4, [r0, #0]
   d6440:	2c00      	cmp	r4, #0
   d6442:	d0e7      	beq.n	d6414 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6444:	f104 0010 	add.w	r0, r4, #16
   d6448:	f7ff fe03 	bl	d6052 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d644c:	4620      	mov	r0, r4
   d644e:	f7fe ff7f 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6452:	2118      	movs	r1, #24
   d6454:	4620      	mov	r0, r4
   d6456:	f000 ff66 	bl	d7326 <_ZdlPvj>
   d645a:	e7db      	b.n	d6414 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d645c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d645c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d645e:	2300      	movs	r3, #0
   d6460:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6462:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6464:	4604      	mov	r4, r0
   d6466:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6468:	b12b      	cbz	r3, d6476 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d646a:	2202      	movs	r2, #2
   d646c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d646e:	68eb      	ldr	r3, [r5, #12]
   d6470:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6472:	68ab      	ldr	r3, [r5, #8]
   d6474:	60a3      	str	r3, [r4, #8]
    }
   d6476:	4620      	mov	r0, r4
   d6478:	bd38      	pop	{r3, r4, r5, pc}

000d647a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d647a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d647c:	b570      	push	{r4, r5, r6, lr}
   d647e:	4604      	mov	r4, r0
	  switch (__op)
   d6480:	d007      	beq.n	d6492 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6482:	2a03      	cmp	r2, #3
   d6484:	d012      	beq.n	d64ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6486:	2a01      	cmp	r2, #1
   d6488:	d101      	bne.n	d648e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d648a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d648c:	6003      	str	r3, [r0, #0]
	}
   d648e:	2000      	movs	r0, #0
   d6490:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6492:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6494:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6496:	f7fd fdfe 	bl	d4096 <_Znwj>
   d649a:	4605      	mov	r5, r0
   d649c:	b120      	cbz	r0, d64a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d649e:	4631      	mov	r1, r6
   d64a0:	f7ff ffdc 	bl	d645c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d64a4:	7c33      	ldrb	r3, [r6, #16]
   d64a6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d64a8:	6025      	str	r5, [r4, #0]
	}
   d64aa:	e7f0      	b.n	d648e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d64ac:	6804      	ldr	r4, [r0, #0]
   d64ae:	2c00      	cmp	r4, #0
   d64b0:	d0ed      	beq.n	d648e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d64b2:	4620      	mov	r0, r4
   d64b4:	f7fe ff4c 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d64b8:	2114      	movs	r1, #20
   d64ba:	4620      	mov	r0, r4
   d64bc:	f000 ff33 	bl	d7326 <_ZdlPvj>
   d64c0:	e7e5      	b.n	d648e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d64c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d64c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64c6:	b089      	sub	sp, #36	; 0x24
   d64c8:	4604      	mov	r4, r0
   d64ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d64cc:	a801      	add	r0, sp, #4
   d64ce:	4611      	mov	r1, r2
   d64d0:	f7ff fe10 	bl	d60f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d64d4:	b1a4      	cbz	r4, d6500 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d64d6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d64d8:	b11d      	cbz	r5, d64e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d64da:	4628      	mov	r0, r5
   d64dc:	f001 fcb2 	bl	d7e44 <strdup>
   d64e0:	4605      	mov	r5, r0
   d64e2:	a801      	add	r0, sp, #4
   d64e4:	a903      	add	r1, sp, #12
        type_(type) {
   d64e6:	9503      	str	r5, [sp, #12]
   d64e8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d64ec:	f7ff fe78 	bl	d61e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d64f0:	a803      	add	r0, sp, #12
   d64f2:	f7ff fdae 	bl	d6052 <_ZN8particle5ErrorD1Ev>
   d64f6:	a802      	add	r0, sp, #8
   d64f8:	f7ff fd24 	bl	d5f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d64fc:	b009      	add	sp, #36	; 0x24
   d64fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6500:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6502:	2301      	movs	r3, #1
   d6504:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6508:	2a00      	cmp	r2, #0
   d650a:	d103      	bne.n	d6514 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d650c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6510:	2900      	cmp	r1, #0
   d6512:	d1f7      	bne.n	d6504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6514:	d1ef      	bne.n	d64f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6516:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6518:	f3bf 8f5b 	dmb	ish
   d651c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d651e:	1d2b      	adds	r3, r5, #4
   d6520:	f3bf 8f5b 	dmb	ish
   d6524:	e853 6f00 	ldrex	r6, [r3]
   d6528:	e843 4200 	strex	r2, r4, [r3]
   d652c:	2a00      	cmp	r2, #0
   d652e:	d1f9      	bne.n	d6524 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6530:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6534:	2e00      	cmp	r6, #0
   d6536:	d0de      	beq.n	d64f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6538:	4620      	mov	r0, r4
   d653a:	f7ff fbaf 	bl	d5c9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d653e:	4607      	mov	r7, r0
   d6540:	b160      	cbz	r0, d655c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6542:	f105 010c 	add.w	r1, r5, #12
   d6546:	4630      	mov	r0, r6
   d6548:	f7ff fe15 	bl	d6176 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d654c:	4630      	mov	r0, r6
   d654e:	f7fe feff 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6552:	2110      	movs	r1, #16
   d6554:	4630      	mov	r0, r6
   d6556:	f000 fee6 	bl	d7326 <_ZdlPvj>
   d655a:	e7cc      	b.n	d64f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d655c:	4631      	mov	r1, r6
   d655e:	a803      	add	r0, sp, #12
   d6560:	f7ff ff7c 	bl	d645c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6564:	7b2b      	ldrb	r3, [r5, #12]
   d6566:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d656a:	2010      	movs	r0, #16
   d656c:	f7fd fd93 	bl	d4096 <_Znwj>
   d6570:	4605      	mov	r5, r0
   d6572:	b1d0      	cbz	r0, d65aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6574:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6576:	2014      	movs	r0, #20
   d6578:	f7fd fd8d 	bl	d4096 <_Znwj>
   d657c:	4604      	mov	r4, r0
   d657e:	b178      	cbz	r0, d65a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6580:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6582:	4601      	mov	r1, r0
   d6584:	a803      	add	r0, sp, #12
   d6586:	f7ff fdd4 	bl	d6132 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d658a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d658c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d658e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6590:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6592:	9205      	str	r2, [sp, #20]
   d6594:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6596:	60e3      	str	r3, [r4, #12]
   d6598:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d659c:	9206      	str	r2, [sp, #24]
   d659e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d65a0:	4b06      	ldr	r3, [pc, #24]	; (d65bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d65a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d65a4:	4b06      	ldr	r3, [pc, #24]	; (d65c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65a6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d65a8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d65aa:	a803      	add	r0, sp, #12
   d65ac:	f7fe fed0 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d65b0:	2200      	movs	r2, #0
   d65b2:	4629      	mov	r1, r5
   d65b4:	4803      	ldr	r0, [pc, #12]	; (d65c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d65b6:	f7ff fb79 	bl	d5cac <application_thread_invoke>
   d65ba:	e7c7      	b.n	d654c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d65bc:	000d6189 	.word	0x000d6189
   d65c0:	000d647b 	.word	0x000d647b
   d65c4:	000d5edf 	.word	0x000d5edf

000d65c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d65c8:	2200      	movs	r2, #0
   d65ca:	6840      	ldr	r0, [r0, #4]
   d65cc:	4611      	mov	r1, r2
   d65ce:	f7ff bc23 	b.w	d5e18 <network_listening>

000d65d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d65d2:	2200      	movs	r2, #0
   d65d4:	6840      	ldr	r0, [r0, #4]
   d65d6:	4611      	mov	r1, r2
   d65d8:	f7ff bc2e 	b.w	d5e38 <network_get_listen_timeout>

000d65dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d65dc:	6840      	ldr	r0, [r0, #4]
   d65de:	2200      	movs	r2, #0
   d65e0:	f7ff bc22 	b.w	d5e28 <network_set_listen_timeout>

000d65e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d65e4:	6840      	ldr	r0, [r0, #4]
   d65e6:	2200      	movs	r2, #0
   d65e8:	f081 0101 	eor.w	r1, r1, #1
   d65ec:	f7ff bc0c 	b.w	d5e08 <network_listen>

000d65f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d65f0:	2300      	movs	r3, #0
   d65f2:	6840      	ldr	r0, [r0, #4]
   d65f4:	461a      	mov	r2, r3
   d65f6:	4619      	mov	r1, r3
   d65f8:	f7ff bbfe 	b.w	d5df8 <network_off>

000d65fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d65fc:	2300      	movs	r3, #0
   d65fe:	6840      	ldr	r0, [r0, #4]
   d6600:	461a      	mov	r2, r3
   d6602:	4619      	mov	r1, r3
   d6604:	f7ff bbf0 	b.w	d5de8 <network_on>

000d6608 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6608:	2200      	movs	r2, #0
   d660a:	6840      	ldr	r0, [r0, #4]
   d660c:	4611      	mov	r1, r2
   d660e:	f7ff bbe3 	b.w	d5dd8 <network_ready>

000d6612 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6612:	2200      	movs	r2, #0
   d6614:	6840      	ldr	r0, [r0, #4]
   d6616:	4611      	mov	r1, r2
   d6618:	f7ff bbce 	b.w	d5db8 <network_connecting>

000d661c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d661c:	6840      	ldr	r0, [r0, #4]
   d661e:	2200      	movs	r2, #0
   d6620:	2102      	movs	r1, #2
   d6622:	f7ff bbd1 	b.w	d5dc8 <network_disconnect>

000d6626 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6626:	2300      	movs	r3, #0
   d6628:	6840      	ldr	r0, [r0, #4]
   d662a:	461a      	mov	r2, r3
   d662c:	f7ff bbbc 	b.w	d5da8 <network_connect>

000d6630 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6630:	4b02      	ldr	r3, [pc, #8]	; (d663c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6632:	2203      	movs	r2, #3
   d6634:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6636:	4a02      	ldr	r2, [pc, #8]	; (d6640 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6638:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d663a:	4770      	bx	lr
   d663c:	2003e614 	.word	0x2003e614
   d6640:	000da170 	.word	0x000da170

000d6644 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6644:	4770      	bx	lr

000d6646 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6648:	4606      	mov	r6, r0
   d664a:	4615      	mov	r5, r2
   d664c:	460c      	mov	r4, r1
   d664e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6650:	42bc      	cmp	r4, r7
   d6652:	d006      	beq.n	d6662 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6654:	6833      	ldr	r3, [r6, #0]
   d6656:	f814 1b01 	ldrb.w	r1, [r4], #1
   d665a:	689b      	ldr	r3, [r3, #8]
   d665c:	4630      	mov	r0, r6
   d665e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6660:	e7f6      	b.n	d6650 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6662:	4628      	mov	r0, r5
   d6664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6666 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6666:	7c00      	ldrb	r0, [r0, #16]
   d6668:	2200      	movs	r2, #0
   d666a:	f7ff b9f5 	b.w	d5a58 <hal_i2c_write>

000d666e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d666e:	7c00      	ldrb	r0, [r0, #16]
   d6670:	2100      	movs	r1, #0
   d6672:	f7ff b9f9 	b.w	d5a68 <hal_i2c_available>

000d6676 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6676:	7c00      	ldrb	r0, [r0, #16]
   d6678:	2100      	movs	r1, #0
   d667a:	f7ff b9fd 	b.w	d5a78 <hal_i2c_read>

000d667e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d667e:	7c00      	ldrb	r0, [r0, #16]
   d6680:	2100      	movs	r1, #0
   d6682:	f7ff ba01 	b.w	d5a88 <hal_i2c_peek>

000d6686 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6686:	7c00      	ldrb	r0, [r0, #16]
   d6688:	2100      	movs	r1, #0
   d668a:	f7ff ba05 	b.w	d5a98 <hal_i2c_flush>

000d668e <_ZN7TwoWireD0Ev>:
   d668e:	b510      	push	{r4, lr}
   d6690:	2114      	movs	r1, #20
   d6692:	4604      	mov	r4, r0
   d6694:	f000 fe47 	bl	d7326 <_ZdlPvj>
   d6698:	4620      	mov	r0, r4
   d669a:	bd10      	pop	{r4, pc}

000d669c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d669c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d669e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66a2:	4604      	mov	r4, r0
   d66a4:	4608      	mov	r0, r1
   d66a6:	2100      	movs	r1, #0
   d66a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d66ac:	4b03      	ldr	r3, [pc, #12]	; (d66bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d66ae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d66b0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d66b2:	4611      	mov	r1, r2
   d66b4:	f7ff fa00 	bl	d5ab8 <hal_i2c_init>
}
   d66b8:	4620      	mov	r0, r4
   d66ba:	bd10      	pop	{r4, pc}
   d66bc:	000da1a4 	.word	0x000da1a4

000d66c0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d66c0:	2300      	movs	r3, #0
   d66c2:	7c00      	ldrb	r0, [r0, #16]
   d66c4:	461a      	mov	r2, r3
   d66c6:	4619      	mov	r1, r3
   d66c8:	f7ff b9ae 	b.w	d5a28 <hal_i2c_begin>

000d66cc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d66cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d66ce:	2200      	movs	r2, #0
   d66d0:	2314      	movs	r3, #20
   d66d2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d66d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d66da:	780b      	ldrb	r3, [r1, #0]
   d66dc:	f88d 3008 	strb.w	r3, [sp, #8]
   d66e0:	684b      	ldr	r3, [r1, #4]
   d66e2:	9303      	str	r3, [sp, #12]
   d66e4:	68cb      	ldr	r3, [r1, #12]
   d66e6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d66e8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d66ea:	7a0b      	ldrb	r3, [r1, #8]
   d66ec:	9305      	str	r3, [sp, #20]
   d66ee:	a901      	add	r1, sp, #4
   d66f0:	f7ff f9fa 	bl	d5ae8 <hal_i2c_request_ex>
}
   d66f4:	b007      	add	sp, #28
   d66f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d66fa <_ZN7TwoWire11requestFromEhjh>:
{
   d66fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d66fc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d66fe:	f88d 1000 	strb.w	r1, [sp]
   d6702:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6706:	9103      	str	r1, [sp, #12]
   d6708:	bf18      	it	ne
   d670a:	2301      	movne	r3, #1
   d670c:	4669      	mov	r1, sp
    size_ = size;
   d670e:	9201      	str	r2, [sp, #4]
   d6710:	f88d 3008 	strb.w	r3, [sp, #8]
   d6714:	f7ff ffda 	bl	d66cc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6718:	b005      	add	sp, #20
   d671a:	f85d fb04 	ldr.w	pc, [sp], #4

000d671e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d671e:	2301      	movs	r3, #1
   d6720:	f7ff bfeb 	b.w	d66fa <_ZN7TwoWire11requestFromEhjh>

000d6724 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6724:	7c00      	ldrb	r0, [r0, #16]
   d6726:	2200      	movs	r2, #0
   d6728:	f7ff b986 	b.w	d5a38 <hal_i2c_begin_transmission>

000d672c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d672c:	b2c9      	uxtb	r1, r1
   d672e:	f7ff bff9 	b.w	d6724 <_ZN7TwoWire17beginTransmissionEh>

000d6732 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6732:	7c00      	ldrb	r0, [r0, #16]
   d6734:	2200      	movs	r2, #0
   d6736:	f7ff b987 	b.w	d5a48 <hal_i2c_end_transmission>

000d673a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d673a:	2101      	movs	r1, #1
   d673c:	f7ff bff9 	b.w	d6732 <_ZN7TwoWire15endTransmissionEh>

000d6740 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6740:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d6742:	2100      	movs	r1, #0
   d6744:	7c00      	ldrb	r0, [r0, #16]
   d6746:	f7ff f9bf 	bl	d5ac8 <hal_i2c_lock>
}
   d674a:	fab0 f080 	clz	r0, r0
   d674e:	0940      	lsrs	r0, r0, #5
   d6750:	bd08      	pop	{r3, pc}

000d6752 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6752:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d6754:	2100      	movs	r1, #0
   d6756:	7c00      	ldrb	r0, [r0, #16]
   d6758:	f7ff f9be 	bl	d5ad8 <hal_i2c_unlock>
}
   d675c:	fab0 f080 	clz	r0, r0
   d6760:	0940      	lsrs	r0, r0, #5
   d6762:	bd08      	pop	{r3, pc}

000d6764 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6764:	4700      	bx	r0
	...

000d6768 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6768:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d676c:	2400      	movs	r4, #0
{
   d676e:	461d      	mov	r5, r3
   d6770:	460f      	mov	r7, r1
   d6772:	4690      	mov	r8, r2
   d6774:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6776:	f7ff f94f 	bl	d5a18 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d677a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d677c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6780:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6784:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6788:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d678c:	bfa2      	ittt	ge
   d678e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6792:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6796:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6798:	4907      	ldr	r1, [pc, #28]	; (d67b8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d679a:	9400      	str	r4, [sp, #0]
   d679c:	4643      	mov	r3, r8
   d679e:	463a      	mov	r2, r7
   d67a0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d67a2:	bfa8      	it	ge
   d67a4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d67a8:	f7ff f92e 	bl	d5a08 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d67ac:	fab0 f080 	clz	r0, r0
   d67b0:	0940      	lsrs	r0, r0, #5
   d67b2:	b004      	add	sp, #16
   d67b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67b8:	000d6765 	.word	0x000d6765

000d67bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d67bc:	4770      	bx	lr

000d67be <_ZN9IPAddressD0Ev>:
   d67be:	b510      	push	{r4, lr}
   d67c0:	2118      	movs	r1, #24
   d67c2:	4604      	mov	r4, r0
   d67c4:	f000 fdaf 	bl	d7326 <_ZdlPvj>
   d67c8:	4620      	mov	r0, r4
   d67ca:	bd10      	pop	{r4, pc}

000d67cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d67cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d67ce:	7d03      	ldrb	r3, [r0, #20]
   d67d0:	2b06      	cmp	r3, #6
{
   d67d2:	b08d      	sub	sp, #52	; 0x34
   d67d4:	460e      	mov	r6, r1
   d67d6:	f100 0704 	add.w	r7, r0, #4
   d67da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d67de:	d012      	beq.n	d6806 <_ZNK9IPAddress7printToER5Print+0x3a>
   d67e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d67e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d67e8:	220a      	movs	r2, #10
   d67ea:	4630      	mov	r0, r6
   d67ec:	f000 f949 	bl	d6a82 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d67f4:	d019      	beq.n	d682a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d67f6:	2c00      	cmp	r4, #0
   d67f8:	d0f4      	beq.n	d67e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d67fa:	212e      	movs	r1, #46	; 0x2e
   d67fc:	4630      	mov	r0, r6
   d67fe:	f000 f927 	bl	d6a50 <_ZN5Print5printEc>
   d6802:	4404      	add	r4, r0
   d6804:	e7ee      	b.n	d67e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6806:	232f      	movs	r3, #47	; 0x2f
   d6808:	466a      	mov	r2, sp
   d680a:	4639      	mov	r1, r7
   d680c:	200a      	movs	r0, #10
		buf[0] = 0;
   d680e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6812:	f7ff f971 	bl	d5af8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6816:	4668      	mov	r0, sp
   d6818:	f001 fb31 	bl	d7e7e <strlen>
   d681c:	6833      	ldr	r3, [r6, #0]
   d681e:	4602      	mov	r2, r0
   d6820:	68db      	ldr	r3, [r3, #12]
   d6822:	4669      	mov	r1, sp
   d6824:	4630      	mov	r0, r6
   d6826:	4798      	blx	r3
   d6828:	4604      	mov	r4, r0
    }
    return n;
}
   d682a:	4620      	mov	r0, r4
   d682c:	b00d      	add	sp, #52	; 0x34
   d682e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6830 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6830:	b510      	push	{r4, lr}
   d6832:	4b05      	ldr	r3, [pc, #20]	; (d6848 <_ZN9IPAddressC1Ev+0x18>)
   d6834:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6836:	2211      	movs	r2, #17
   d6838:	f840 3b04 	str.w	r3, [r0], #4
   d683c:	2100      	movs	r1, #0
   d683e:	f001 fac3 	bl	d7dc8 <memset>
}
   d6842:	4620      	mov	r0, r4
   d6844:	bd10      	pop	{r4, pc}
   d6846:	bf00      	nop
   d6848:	000da1cc 	.word	0x000da1cc

000d684c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d684c:	4603      	mov	r3, r0
   d684e:	4a07      	ldr	r2, [pc, #28]	; (d686c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6850:	b510      	push	{r4, lr}
   d6852:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6856:	f101 0210 	add.w	r2, r1, #16
   d685a:	f851 4b04 	ldr.w	r4, [r1], #4
   d685e:	f843 4b04 	str.w	r4, [r3], #4
   d6862:	4291      	cmp	r1, r2
   d6864:	d1f9      	bne.n	d685a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6866:	780a      	ldrb	r2, [r1, #0]
   d6868:	701a      	strb	r2, [r3, #0]
}
   d686a:	bd10      	pop	{r4, pc}
   d686c:	000da1cc 	.word	0x000da1cc

000d6870 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6870:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6872:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6876:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d687a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d687e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6882:	2304      	movs	r3, #4
   d6884:	6041      	str	r1, [r0, #4]
   d6886:	7503      	strb	r3, [r0, #20]
}
   d6888:	bd10      	pop	{r4, pc}

000d688a <_ZN9IPAddressaSEPKh>:
{
   d688a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d688c:	78cb      	ldrb	r3, [r1, #3]
   d688e:	9300      	str	r3, [sp, #0]
   d6890:	788b      	ldrb	r3, [r1, #2]
   d6892:	784a      	ldrb	r2, [r1, #1]
   d6894:	7809      	ldrb	r1, [r1, #0]
   d6896:	f7ff ffeb 	bl	d6870 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d689a:	b002      	add	sp, #8
   d689c:	bd10      	pop	{r4, pc}
	...

000d68a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d68a0:	4b01      	ldr	r3, [pc, #4]	; (d68a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d68a2:	4a02      	ldr	r2, [pc, #8]	; (d68ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d68a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d68a6:	4770      	bx	lr
   d68a8:	2003e61c 	.word	0x2003e61c
   d68ac:	000da1d8 	.word	0x000da1d8

000d68b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d68b0:	2300      	movs	r3, #0
   d68b2:	6840      	ldr	r0, [r0, #4]
   d68b4:	461a      	mov	r2, r3
   d68b6:	f7ff ba77 	b.w	d5da8 <network_connect>

000d68ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d68ba:	6840      	ldr	r0, [r0, #4]
   d68bc:	2200      	movs	r2, #0
   d68be:	2102      	movs	r1, #2
   d68c0:	f7ff ba82 	b.w	d5dc8 <network_disconnect>

000d68c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d68c4:	2200      	movs	r2, #0
   d68c6:	6840      	ldr	r0, [r0, #4]
   d68c8:	4611      	mov	r1, r2
   d68ca:	f7ff ba75 	b.w	d5db8 <network_connecting>

000d68ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d68ce:	2200      	movs	r2, #0
   d68d0:	6840      	ldr	r0, [r0, #4]
   d68d2:	4611      	mov	r1, r2
   d68d4:	f7ff ba80 	b.w	d5dd8 <network_ready>

000d68d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d68d8:	2300      	movs	r3, #0
   d68da:	6840      	ldr	r0, [r0, #4]
   d68dc:	461a      	mov	r2, r3
   d68de:	4619      	mov	r1, r3
   d68e0:	f7ff ba82 	b.w	d5de8 <network_on>

000d68e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d68e4:	2300      	movs	r3, #0
   d68e6:	6840      	ldr	r0, [r0, #4]
   d68e8:	461a      	mov	r2, r3
   d68ea:	4619      	mov	r1, r3
   d68ec:	f7ff ba84 	b.w	d5df8 <network_off>

000d68f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d68f0:	6840      	ldr	r0, [r0, #4]
   d68f2:	2200      	movs	r2, #0
   d68f4:	f081 0101 	eor.w	r1, r1, #1
   d68f8:	f7ff ba86 	b.w	d5e08 <network_listen>

000d68fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d68fc:	6840      	ldr	r0, [r0, #4]
   d68fe:	2200      	movs	r2, #0
   d6900:	f7ff ba92 	b.w	d5e28 <network_set_listen_timeout>

000d6904 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6904:	2200      	movs	r2, #0
   d6906:	6840      	ldr	r0, [r0, #4]
   d6908:	4611      	mov	r1, r2
   d690a:	f7ff ba95 	b.w	d5e38 <network_get_listen_timeout>

000d690e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d690e:	2200      	movs	r2, #0
   d6910:	6840      	ldr	r0, [r0, #4]
   d6912:	4611      	mov	r1, r2
   d6914:	f7ff ba80 	b.w	d5e18 <network_listening>

000d6918 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d691c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d691e:	b095      	sub	sp, #84	; 0x54
   d6920:	4616      	mov	r6, r2
   d6922:	460d      	mov	r5, r1
   d6924:	4607      	mov	r7, r0
    IPAddress addr;
   d6926:	f7ff ff83 	bl	d6830 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d692a:	4621      	mov	r1, r4
   d692c:	2218      	movs	r2, #24
   d692e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6930:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6932:	f001 fa49 	bl	d7dc8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6936:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6938:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d693c:	4621      	mov	r1, r4
   d693e:	466b      	mov	r3, sp
   d6940:	aa0c      	add	r2, sp, #48	; 0x30
   d6942:	4630      	mov	r0, r6
   d6944:	f7ff f8e8 	bl	d5b18 <netdb_getaddrinfo>
    if (!r) {
   d6948:	4604      	mov	r4, r0
   d694a:	2800      	cmp	r0, #0
   d694c:	d146      	bne.n	d69dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d694e:	4602      	mov	r2, r0
   d6950:	2101      	movs	r1, #1
   d6952:	6868      	ldr	r0, [r5, #4]
   d6954:	f7ff fa40 	bl	d5dd8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6958:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d695a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d695c:	4622      	mov	r2, r4
   d695e:	6868      	ldr	r0, [r5, #4]
   d6960:	f7ff fa3a 	bl	d5dd8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6964:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6966:	4681      	mov	r9, r0
        bool ok = false;
   d6968:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d696a:	2e00      	cmp	r6, #0
   d696c:	d036      	beq.n	d69dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d696e:	2900      	cmp	r1, #0
   d6970:	d134      	bne.n	d69dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6972:	6873      	ldr	r3, [r6, #4]
   d6974:	2b02      	cmp	r3, #2
   d6976:	d003      	beq.n	d6980 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6978:	2b0a      	cmp	r3, #10
   d697a:	d00b      	beq.n	d6994 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d697c:	69f6      	ldr	r6, [r6, #28]
   d697e:	e7f4      	b.n	d696a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6980:	f1b8 0f00 	cmp.w	r8, #0
   d6984:	d004      	beq.n	d6990 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6986:	6971      	ldr	r1, [r6, #20]
   d6988:	4638      	mov	r0, r7
   d698a:	3104      	adds	r1, #4
   d698c:	f7ff ff7d 	bl	d688a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6990:	4641      	mov	r1, r8
   d6992:	e7f3      	b.n	d697c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6994:	f1b9 0f00 	cmp.w	r9, #0
   d6998:	d101      	bne.n	d699e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d699a:	4649      	mov	r1, r9
   d699c:	e7ee      	b.n	d697c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d699e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d69a0:	2210      	movs	r2, #16
   d69a2:	a801      	add	r0, sp, #4
   d69a4:	f001 fa10 	bl	d7dc8 <memset>
                    a.v = 6;
   d69a8:	2306      	movs	r3, #6
   d69aa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d69ae:	ad01      	add	r5, sp, #4
   d69b0:	f104 0308 	add.w	r3, r4, #8
   d69b4:	3418      	adds	r4, #24
   d69b6:	6818      	ldr	r0, [r3, #0]
   d69b8:	6859      	ldr	r1, [r3, #4]
   d69ba:	462a      	mov	r2, r5
   d69bc:	c203      	stmia	r2!, {r0, r1}
   d69be:	3308      	adds	r3, #8
   d69c0:	42a3      	cmp	r3, r4
   d69c2:	4615      	mov	r5, r2
   d69c4:	d1f7      	bne.n	d69b6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d69c6:	a901      	add	r1, sp, #4
   d69c8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d69ca:	ad07      	add	r5, sp, #28
   d69cc:	f7ff ff3e 	bl	d684c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d69d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69d2:	1d3c      	adds	r4, r7, #4
   d69d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69d6:	682b      	ldr	r3, [r5, #0]
   d69d8:	7023      	strb	r3, [r4, #0]
   d69da:	e7de      	b.n	d699a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d69dc:	9800      	ldr	r0, [sp, #0]
   d69de:	f7ff f893 	bl	d5b08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d69e2:	4638      	mov	r0, r7
   d69e4:	b015      	add	sp, #84	; 0x54
   d69e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d69ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d69ec:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d69ee:	4a03      	ldr	r2, [pc, #12]	; (d69fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d69f0:	601a      	str	r2, [r3, #0]
   d69f2:	2200      	movs	r2, #0
   d69f4:	605a      	str	r2, [r3, #4]

} // spark
   d69f6:	4770      	bx	lr
   d69f8:	2003e620 	.word	0x2003e620
   d69fc:	000da1e4 	.word	0x000da1e4

000d6a00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a02:	4606      	mov	r6, r0
   d6a04:	460d      	mov	r5, r1
  size_t n = 0;
   d6a06:	188f      	adds	r7, r1, r2
   d6a08:	2400      	movs	r4, #0
  while (size--) {
   d6a0a:	42bd      	cmp	r5, r7
   d6a0c:	d00c      	beq.n	d6a28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6a0e:	6833      	ldr	r3, [r6, #0]
   d6a10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6a14:	689b      	ldr	r3, [r3, #8]
   d6a16:	4630      	mov	r0, r6
   d6a18:	4798      	blx	r3
     if (chunk>=0)
   d6a1a:	1e03      	subs	r3, r0, #0
   d6a1c:	db01      	blt.n	d6a22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6a1e:	441c      	add	r4, r3
  while (size--) {
   d6a20:	e7f3      	b.n	d6a0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6a22:	2c00      	cmp	r4, #0
   d6a24:	bf08      	it	eq
   d6a26:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6a28:	4620      	mov	r0, r4
   d6a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a2c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6a2c:	b513      	push	{r0, r1, r4, lr}
   d6a2e:	4604      	mov	r4, r0
    }
   d6a30:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6a32:	b159      	cbz	r1, d6a4c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6a34:	9101      	str	r1, [sp, #4]
   d6a36:	f001 fa22 	bl	d7e7e <strlen>
   d6a3a:	6823      	ldr	r3, [r4, #0]
   d6a3c:	9901      	ldr	r1, [sp, #4]
   d6a3e:	68db      	ldr	r3, [r3, #12]
   d6a40:	4602      	mov	r2, r0
   d6a42:	4620      	mov	r0, r4
    }
   d6a44:	b002      	add	sp, #8
   d6a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6a4a:	4718      	bx	r3
    }
   d6a4c:	b002      	add	sp, #8
   d6a4e:	bd10      	pop	{r4, pc}

000d6a50 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6a50:	6803      	ldr	r3, [r0, #0]
   d6a52:	689b      	ldr	r3, [r3, #8]
   d6a54:	4718      	bx	r3

000d6a56 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6a56:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6a58:	210d      	movs	r1, #13
{
   d6a5a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6a5c:	f7ff fff8 	bl	d6a50 <_ZN5Print5printEc>
  n += print('\n');
   d6a60:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6a62:	4604      	mov	r4, r0
  n += print('\n');
   d6a64:	4628      	mov	r0, r5
   d6a66:	f7ff fff3 	bl	d6a50 <_ZN5Print5printEc>
  return n;
}
   d6a6a:	4420      	add	r0, r4
   d6a6c:	bd38      	pop	{r3, r4, r5, pc}

000d6a6e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6a6e:	b538      	push	{r3, r4, r5, lr}
   d6a70:	4605      	mov	r5, r0
  return write(str);
   d6a72:	f7ff ffdb 	bl	d6a2c <_ZN5Print5writeEPKc>
   d6a76:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6a78:	4628      	mov	r0, r5
   d6a7a:	f7ff ffec 	bl	d6a56 <_ZN5Print7printlnEv>
  return n;
}
   d6a7e:	4420      	add	r0, r4
   d6a80:	bd38      	pop	{r3, r4, r5, pc}

000d6a82 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6a82:	b530      	push	{r4, r5, lr}
   d6a84:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6a86:	2300      	movs	r3, #0
   d6a88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6a8c:	2a01      	cmp	r2, #1
   d6a8e:	bf98      	it	ls
   d6a90:	220a      	movls	r2, #10
   d6a92:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6a94:	460d      	mov	r5, r1
   d6a96:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6a9a:	fb01 5312 	mls	r3, r1, r2, r5
   d6a9e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6aa2:	2b09      	cmp	r3, #9
   d6aa4:	bf94      	ite	ls
   d6aa6:	3330      	addls	r3, #48	; 0x30
   d6aa8:	3337      	addhi	r3, #55	; 0x37
   d6aaa:	b2db      	uxtb	r3, r3
  } while(n);
   d6aac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6aae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6ab2:	d9ef      	bls.n	d6a94 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6ab4:	4621      	mov	r1, r4
   d6ab6:	f7ff ffb9 	bl	d6a2c <_ZN5Print5writeEPKc>
}
   d6aba:	b00b      	add	sp, #44	; 0x2c
   d6abc:	bd30      	pop	{r4, r5, pc}

000d6abe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6abe:	b510      	push	{r4, lr}
   d6ac0:	4604      	mov	r4, r0
   d6ac2:	f7fe fc45 	bl	d5350 <_ZNSt14_Function_baseD1Ev>
   d6ac6:	4620      	mov	r0, r4
   d6ac8:	bd10      	pop	{r4, pc}
	...

000d6acc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6acc:	4803      	ldr	r0, [pc, #12]	; (d6adc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6ace:	4a04      	ldr	r2, [pc, #16]	; (d6ae0 <_GLOBAL__sub_I_RGB+0x14>)
   d6ad0:	4904      	ldr	r1, [pc, #16]	; (d6ae4 <_GLOBAL__sub_I_RGB+0x18>)
   d6ad2:	2300      	movs	r3, #0
   d6ad4:	6083      	str	r3, [r0, #8]
   d6ad6:	f000 bc21 	b.w	d731c <__aeabi_atexit>
   d6ada:	bf00      	nop
   d6adc:	2003e628 	.word	0x2003e628
   d6ae0:	2003e458 	.word	0x2003e458
   d6ae4:	000d6abf 	.word	0x000d6abf

000d6ae8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6ae8:	b510      	push	{r4, lr}
   d6aea:	4604      	mov	r4, r0
   d6aec:	4608      	mov	r0, r1
{
    _spi = spi;
   d6aee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6af0:	f7ff f81a 	bl	d5b28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6af4:	2300      	movs	r3, #0
   d6af6:	6063      	str	r3, [r4, #4]
}
   d6af8:	4620      	mov	r0, r4
   d6afa:	bd10      	pop	{r4, pc}

000d6afc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6afc:	b510      	push	{r4, lr}
   d6afe:	4604      	mov	r4, r0
{
	free(buffer);
   d6b00:	6800      	ldr	r0, [r0, #0]
   d6b02:	f7ff f9a9 	bl	d5e58 <free>
}
   d6b06:	4620      	mov	r0, r4
   d6b08:	bd10      	pop	{r4, pc}

000d6b0a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6b0a:	b510      	push	{r4, lr}
   d6b0c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6b0e:	6800      	ldr	r0, [r0, #0]
   d6b10:	b108      	cbz	r0, d6b16 <_ZN6String10invalidateEv+0xc>
   d6b12:	f7ff f9a1 	bl	d5e58 <free>
	buffer = NULL;
   d6b16:	2300      	movs	r3, #0
	capacity = len = 0;
   d6b18:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6b1c:	6023      	str	r3, [r4, #0]
}
   d6b1e:	bd10      	pop	{r4, pc}

000d6b20 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6b20:	b538      	push	{r3, r4, r5, lr}
   d6b22:	4604      	mov	r4, r0
   d6b24:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6b26:	6800      	ldr	r0, [r0, #0]
   d6b28:	3101      	adds	r1, #1
   d6b2a:	f7ff f99d 	bl	d5e68 <realloc>
	if (newbuffer) {
   d6b2e:	b110      	cbz	r0, d6b36 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6b30:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6b34:	2001      	movs	r0, #1
	}
	return 0;
}
   d6b36:	bd38      	pop	{r3, r4, r5, pc}

000d6b38 <_ZN6String7reserveEj>:
{
   d6b38:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6b3a:	6803      	ldr	r3, [r0, #0]
{
   d6b3c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6b3e:	b123      	cbz	r3, d6b4a <_ZN6String7reserveEj+0x12>
   d6b40:	6843      	ldr	r3, [r0, #4]
   d6b42:	428b      	cmp	r3, r1
   d6b44:	d301      	bcc.n	d6b4a <_ZN6String7reserveEj+0x12>
   d6b46:	2001      	movs	r0, #1
}
   d6b48:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	f7ff ffe8 	bl	d6b20 <_ZN6String12changeBufferEj>
   d6b50:	2800      	cmp	r0, #0
   d6b52:	d0f9      	beq.n	d6b48 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6b54:	68a3      	ldr	r3, [r4, #8]
   d6b56:	2b00      	cmp	r3, #0
   d6b58:	d1f5      	bne.n	d6b46 <_ZN6String7reserveEj+0xe>
   d6b5a:	6822      	ldr	r2, [r4, #0]
   d6b5c:	7013      	strb	r3, [r2, #0]
   d6b5e:	e7f2      	b.n	d6b46 <_ZN6String7reserveEj+0xe>

000d6b60 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b62:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6b64:	4611      	mov	r1, r2
   d6b66:	9201      	str	r2, [sp, #4]
{
   d6b68:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6b6a:	f7ff ffe5 	bl	d6b38 <_ZN6String7reserveEj>
   d6b6e:	9a01      	ldr	r2, [sp, #4]
   d6b70:	b928      	cbnz	r0, d6b7e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6b72:	4620      	mov	r0, r4
   d6b74:	f7ff ffc9 	bl	d6b0a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6b78:	4620      	mov	r0, r4
   d6b7a:	b003      	add	sp, #12
   d6b7c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6b7e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6b80:	4629      	mov	r1, r5
   d6b82:	6820      	ldr	r0, [r4, #0]
   d6b84:	f001 f8f8 	bl	d7d78 <memcpy>
	buffer[len] = 0;
   d6b88:	6822      	ldr	r2, [r4, #0]
   d6b8a:	68a3      	ldr	r3, [r4, #8]
   d6b8c:	2100      	movs	r1, #0
   d6b8e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6b90:	e7f2      	b.n	d6b78 <_ZN6String4copyEPKcj+0x18>

000d6b92 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6b92:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6b94:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6b96:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6b9a:	4604      	mov	r4, r0
	len = 0;
   d6b9c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b9e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6ba0:	b141      	cbz	r1, d6bb4 <_ZN6StringC1EPKc+0x22>
   d6ba2:	4608      	mov	r0, r1
   d6ba4:	9101      	str	r1, [sp, #4]
   d6ba6:	f001 f96a 	bl	d7e7e <strlen>
   d6baa:	9901      	ldr	r1, [sp, #4]
   d6bac:	4602      	mov	r2, r0
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f7ff ffd6 	bl	d6b60 <_ZN6String4copyEPKcj>
}
   d6bb4:	4620      	mov	r0, r4
   d6bb6:	b002      	add	sp, #8
   d6bb8:	bd10      	pop	{r4, pc}

000d6bba <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6bba:	4288      	cmp	r0, r1
{
   d6bbc:	b510      	push	{r4, lr}
   d6bbe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6bc0:	d005      	beq.n	d6bce <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6bc2:	680b      	ldr	r3, [r1, #0]
   d6bc4:	b12b      	cbz	r3, d6bd2 <_ZN6StringaSERKS_+0x18>
   d6bc6:	688a      	ldr	r2, [r1, #8]
   d6bc8:	4619      	mov	r1, r3
   d6bca:	f7ff ffc9 	bl	d6b60 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6bce:	4620      	mov	r0, r4
   d6bd0:	bd10      	pop	{r4, pc}
	else invalidate();
   d6bd2:	f7ff ff9a 	bl	d6b0a <_ZN6String10invalidateEv>
   d6bd6:	e7fa      	b.n	d6bce <_ZN6StringaSERKS_+0x14>

000d6bd8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6bd8:	b510      	push	{r4, lr}
	buffer = NULL;
   d6bda:	2300      	movs	r3, #0
String::String(const String &value)
   d6bdc:	4604      	mov	r4, r0
	capacity = 0;
   d6bde:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6be2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6be4:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6be6:	f7ff ffe8 	bl	d6bba <_ZN6StringaSERKS_>
}
   d6bea:	4620      	mov	r0, r4
   d6bec:	bd10      	pop	{r4, pc}

000d6bee <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6bee:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6bf0:	6882      	ldr	r2, [r0, #8]
   d6bf2:	b93a      	cbnz	r2, d6c04 <_ZNK6String6equalsEPKc+0x16>
   d6bf4:	b121      	cbz	r1, d6c00 <_ZNK6String6equalsEPKc+0x12>
   d6bf6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6bf8:	fab0 f080 	clz	r0, r0
   d6bfc:	0940      	lsrs	r0, r0, #5
   d6bfe:	e000      	b.n	d6c02 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6c00:	2001      	movs	r0, #1
}
   d6c02:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6c04:	6800      	ldr	r0, [r0, #0]
   d6c06:	b909      	cbnz	r1, d6c0c <_ZNK6String6equalsEPKc+0x1e>
   d6c08:	7800      	ldrb	r0, [r0, #0]
   d6c0a:	e7f5      	b.n	d6bf8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6c0c:	f001 f908 	bl	d7e20 <strcmp>
   d6c10:	e7f2      	b.n	d6bf8 <_ZNK6String6equalsEPKc+0xa>

000d6c12 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6c12:	b558      	push	{r3, r4, r6, lr}
   d6c14:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6c16:	b12a      	cbz	r2, d6c24 <_ZNK6String8getBytesEPhjj+0x12>
   d6c18:	b121      	cbz	r1, d6c24 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d6c1a:	6884      	ldr	r4, [r0, #8]
   d6c1c:	429c      	cmp	r4, r3
   d6c1e:	d802      	bhi.n	d6c26 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6c20:	2300      	movs	r3, #0
   d6c22:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d6c24:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d6c26:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6c28:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d6c2a:	6801      	ldr	r1, [r0, #0]
   d6c2c:	4294      	cmp	r4, r2
   d6c2e:	bf28      	it	cs
   d6c30:	4614      	movcs	r4, r2
   d6c32:	4419      	add	r1, r3
   d6c34:	4622      	mov	r2, r4
   d6c36:	4630      	mov	r0, r6
   d6c38:	f001 f93b 	bl	d7eb2 <strncpy>
	buf[n] = 0;
   d6c3c:	2300      	movs	r3, #0
   d6c3e:	5533      	strb	r3, [r6, r4]
   d6c40:	e7f0      	b.n	d6c24 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d6c44 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d6c44:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d6c46:	6800      	ldr	r0, [r0, #0]
   d6c48:	b140      	cbz	r0, d6c5c <_ZNK6String7toFloatEv+0x18>
   d6c4a:	f001 f87f 	bl	d7d4c <atof>
   d6c4e:	ec51 0b10 	vmov	r0, r1, d0
   d6c52:	f000 ffe7 	bl	d7c24 <__aeabi_d2f>
   d6c56:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d6c5a:	bd08      	pop	{r3, pc}
	return 0;
   d6c5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6c64 <_ZNK6String7toFloatEv+0x20>
   d6c60:	e7fb      	b.n	d6c5a <_ZNK6String7toFloatEv+0x16>
   d6c62:	bf00      	nop
   d6c64:	00000000 	.word	0x00000000

000d6c68 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d6c68:	b507      	push	{r0, r1, r2, lr}
   d6c6a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6c6c:	2100      	movs	r1, #0
{
   d6c6e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6c70:	9100      	str	r1, [sp, #0]
   d6c72:	2001      	movs	r0, #1
   d6c74:	218c      	movs	r1, #140	; 0x8c
   d6c76:	f7ff f83d 	bl	d5cf4 <system_reset>
}
   d6c7a:	b003      	add	sp, #12
   d6c7c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c80 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d6c80:	4601      	mov	r1, r0
    reset(0, flags);
   d6c82:	2000      	movs	r0, #0
   d6c84:	f7ff bff0 	b.w	d6c68 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d6c88 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d6c88:	2000      	movs	r0, #0
   d6c8a:	f7ff bff9 	b.w	d6c80 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d6c90 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6c90:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6c92:	4b09      	ldr	r3, [pc, #36]	; (d6cb8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6c94:	4c09      	ldr	r4, [pc, #36]	; (d6cbc <_GLOBAL__sub_I_System+0x2c>)
   d6c96:	2202      	movs	r2, #2
   d6c98:	2000      	movs	r0, #0
   d6c9a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6c9c:	4b08      	ldr	r3, [pc, #32]	; (d6cc0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6c9e:	6020      	str	r0, [r4, #0]
   d6ca0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6ca2:	71a0      	strb	r0, [r4, #6]
   d6ca4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6ca6:	f7fe ffe1 	bl	d5c6c <set_system_mode>
SystemClass System;
   d6caa:	4620      	mov	r0, r4
   d6cac:	4a05      	ldr	r2, [pc, #20]	; (d6cc4 <_GLOBAL__sub_I_System+0x34>)
   d6cae:	4906      	ldr	r1, [pc, #24]	; (d6cc8 <_GLOBAL__sub_I_System+0x38>)
   d6cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6cb4:	f000 bb32 	b.w	d731c <__aeabi_atexit>
   d6cb8:	2003e644 	.word	0x2003e644
   d6cbc:	2003e638 	.word	0x2003e638
   d6cc0:	ffff0000 	.word	0xffff0000
   d6cc4:	2003e458 	.word	0x2003e458
   d6cc8:	000d4141 	.word	0x000d4141

000d6ccc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d6cd0:	4a15      	ldr	r2, [pc, #84]	; (d6d28 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6cd2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d6d34 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d6cd6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6cda:	18c0      	adds	r0, r0, r3
   d6cdc:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d6ce0:	4a12      	ldr	r2, [pc, #72]	; (d6d2c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d6ce2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6ce6:	18c6      	adds	r6, r0, r3
   d6ce8:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d6cec:	e9d8 2300 	ldrd	r2, r3, [r8]
   d6cf0:	42bb      	cmp	r3, r7
   d6cf2:	bf08      	it	eq
   d6cf4:	42b2      	cmpeq	r2, r6
{
   d6cf6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d6cf8:	d013      	beq.n	d6d22 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d6cfa:	a903      	add	r1, sp, #12
   d6cfc:	4668      	mov	r0, sp
   d6cfe:	e9cd 6700 	strd	r6, r7, [sp]
   d6d02:	f7ff f8e1 	bl	d5ec8 <localtime_r>
	calendar_time.tm_year += 1900;
   d6d06:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6d08:	4d09      	ldr	r5, [pc, #36]	; (d6d30 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d6d0a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6d0e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d6d10:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6d1a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6d1e:	6823      	ldr	r3, [r4, #0]
   d6d20:	602b      	str	r3, [r5, #0]
    }
}
   d6d22:	b00c      	add	sp, #48	; 0x30
   d6d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d28:	2003e678 	.word	0x2003e678
   d6d2c:	2003e670 	.word	0x2003e670
   d6d30:	2003e64c 	.word	0x2003e64c
   d6d34:	2003e680 	.word	0x2003e680

000d6d38 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6d38:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6d3a:	2000      	movs	r0, #0
   d6d3c:	f7ff f824 	bl	d5d88 <spark_sync_time_pending>
   d6d40:	b128      	cbz	r0, d6d4e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6d42:	f7fe fff9 	bl	d5d38 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6d46:	f080 0001 	eor.w	r0, r0, #1
   d6d4a:	b2c0      	uxtb	r0, r0
    }
   d6d4c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6d4e:	2001      	movs	r0, #1
   d6d50:	e7fc      	b.n	d6d4c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d6d54 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6d54:	b530      	push	{r4, r5, lr}
   d6d56:	4604      	mov	r4, r0
    t += time_zone_cache;
   d6d58:	4818      	ldr	r0, [pc, #96]	; (d6dbc <_ZN9TimeClass7timeStrEx+0x68>)
   d6d5a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d6d5e:	1852      	adds	r2, r2, r1
   d6d60:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d6d64:	4816      	ldr	r0, [pc, #88]	; (d6dc0 <_ZN9TimeClass7timeStrEx+0x6c>)
   d6d66:	e9d0 1000 	ldrd	r1, r0, [r0]
   d6d6a:	1852      	adds	r2, r2, r1
{
   d6d6c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d6d6e:	eb40 0303 	adc.w	r3, r0, r3
   d6d72:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d6d76:	2224      	movs	r2, #36	; 0x24
   d6d78:	eb0d 0002 	add.w	r0, sp, r2
   d6d7c:	2100      	movs	r1, #0
   d6d7e:	f001 f823 	bl	d7dc8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d6d82:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d6d84:	a909      	add	r1, sp, #36	; 0x24
   d6d86:	4668      	mov	r0, sp
   d6d88:	f7ff f89e 	bl	d5ec8 <localtime_r>
    char ascstr[26] = {};
   d6d8c:	2216      	movs	r2, #22
   d6d8e:	4629      	mov	r1, r5
   d6d90:	a803      	add	r0, sp, #12
   d6d92:	9502      	str	r5, [sp, #8]
   d6d94:	f001 f818 	bl	d7dc8 <memset>
    asctime_r(&calendar_time, ascstr);
   d6d98:	a902      	add	r1, sp, #8
   d6d9a:	a809      	add	r0, sp, #36	; 0x24
   d6d9c:	f000 ffb0 	bl	d7d00 <asctime_r>
    int len = strlen(ascstr);
   d6da0:	a802      	add	r0, sp, #8
   d6da2:	f001 f86c 	bl	d7e7e <strlen>
    ascstr[len-1] = 0; // remove final newline
   d6da6:	ab12      	add	r3, sp, #72	; 0x48
   d6da8:	4418      	add	r0, r3
    return String(ascstr);
   d6daa:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d6dac:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d6db0:	4620      	mov	r0, r4
   d6db2:	f7ff feee 	bl	d6b92 <_ZN6StringC1EPKc>
}
   d6db6:	4620      	mov	r0, r4
   d6db8:	b013      	add	sp, #76	; 0x4c
   d6dba:	bd30      	pop	{r4, r5, pc}
   d6dbc:	2003e678 	.word	0x2003e678
   d6dc0:	2003e670 	.word	0x2003e670

000d6dc4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6dc4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6dc6:	2000      	movs	r0, #0
   d6dc8:	f7fe fdee 	bl	d59a8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d6dcc:	4604      	mov	r4, r0
   d6dce:	b9a0      	cbnz	r0, d6dfa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6dd0:	f7fe ff44 	bl	d5c5c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6dd4:	2801      	cmp	r0, #1
   d6dd6:	d110      	bne.n	d6dfa <_ZN9TimeClass7isValidEv+0x36>
   d6dd8:	4620      	mov	r0, r4
   d6dda:	f7fe ff6f 	bl	d5cbc <system_thread_get_state>
   d6dde:	b960      	cbnz	r0, d6dfa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6de0:	f7ff ffaa 	bl	d6d38 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6de4:	b910      	cbnz	r0, d6dec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6de6:	f7fe ff9f 	bl	d5d28 <spark_process>
        while (_while() && !_condition()) {
   d6dea:	e7f9      	b.n	d6de0 <_ZN9TimeClass7isValidEv+0x1c>
   d6dec:	f7ff ffa4 	bl	d6d38 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6df4:	2000      	movs	r0, #0
   d6df6:	f7fe bdd7 	b.w	d59a8 <hal_rtc_time_is_valid>
}
   d6dfa:	4620      	mov	r0, r4
   d6dfc:	bd10      	pop	{r4, pc}

000d6dfe <_ZN9TimeClass3nowEv>:
{
   d6dfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6e00:	f7ff ffe0 	bl	d6dc4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6e04:	2210      	movs	r2, #16
   d6e06:	2100      	movs	r1, #0
   d6e08:	4668      	mov	r0, sp
   d6e0a:	f000 ffdd 	bl	d7dc8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6e0e:	2100      	movs	r1, #0
   d6e10:	4668      	mov	r0, sp
   d6e12:	f7fe fdd1 	bl	d59b8 <hal_rtc_get_time>
}
   d6e16:	9800      	ldr	r0, [sp, #0]
   d6e18:	b005      	add	sp, #20
   d6e1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e20 <_ZN9TimeClass4hourEv>:
{
   d6e20:	b508      	push	{r3, lr}
	return hour(now());
   d6e22:	f7ff ffec 	bl	d6dfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6e26:	17c1      	asrs	r1, r0, #31
   d6e28:	f7ff ff50 	bl	d6ccc <_ZL22Refresh_UnixTime_Cachex>
}
   d6e2c:	4b01      	ldr	r3, [pc, #4]	; (d6e34 <_ZN9TimeClass4hourEv+0x14>)
   d6e2e:	6898      	ldr	r0, [r3, #8]
   d6e30:	bd08      	pop	{r3, pc}
   d6e32:	bf00      	nop
   d6e34:	2003e64c 	.word	0x2003e64c

000d6e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6e38:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6e3a:	681a      	ldr	r2, [r3, #0]
   d6e3c:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6e3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6e40:	4770      	bx	lr
   d6e42:	bf00      	nop
   d6e44:	2003e280 	.word	0x2003e280
   d6e48:	2003e648 	.word	0x2003e648

000d6e4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6e4c:	4770      	bx	lr

000d6e4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6e4e:	7441      	strb	r1, [r0, #17]
}
   d6e50:	4770      	bx	lr

000d6e52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6e52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6e54:	7c00      	ldrb	r0, [r0, #16]
   d6e56:	f7fe feaf 	bl	d5bb8 <hal_usart_available_data_for_write>
}
   d6e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e5e:	bd08      	pop	{r3, pc}

000d6e60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6e60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6e62:	7c00      	ldrb	r0, [r0, #16]
   d6e64:	f7fe fe80 	bl	d5b68 <hal_usart_available>
}
   d6e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e6c:	bd08      	pop	{r3, pc}

000d6e6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6e6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6e70:	7c00      	ldrb	r0, [r0, #16]
   d6e72:	f7fe fe89 	bl	d5b88 <hal_usart_peek>
}
   d6e76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6e7a:	bd08      	pop	{r3, pc}

000d6e7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6e7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6e7e:	7c00      	ldrb	r0, [r0, #16]
   d6e80:	f7fe fe7a 	bl	d5b78 <hal_usart_read>
}
   d6e84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6e88:	bd08      	pop	{r3, pc}

000d6e8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6e8a:	7c00      	ldrb	r0, [r0, #16]
   d6e8c:	f7fe be84 	b.w	d5b98 <hal_usart_flush>

000d6e90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6e92:	7c45      	ldrb	r5, [r0, #17]
{
   d6e94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6e96:	b12d      	cbz	r5, d6ea4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6e9a:	b003      	add	sp, #12
   d6e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6ea0:	f7fe be5a 	b.w	d5b58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6ea4:	7c00      	ldrb	r0, [r0, #16]
   d6ea6:	9101      	str	r1, [sp, #4]
   d6ea8:	f7fe fe86 	bl	d5bb8 <hal_usart_available_data_for_write>
   d6eac:	2800      	cmp	r0, #0
   d6eae:	9901      	ldr	r1, [sp, #4]
   d6eb0:	dcf2      	bgt.n	d6e98 <_ZN11USARTSerial5writeEh+0x8>
}
   d6eb2:	4628      	mov	r0, r5
   d6eb4:	b003      	add	sp, #12
   d6eb6:	bd30      	pop	{r4, r5, pc}

000d6eb8 <_ZN11USARTSerialD0Ev>:
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	2114      	movs	r1, #20
   d6ebc:	4604      	mov	r4, r0
   d6ebe:	f000 fa32 	bl	d7326 <_ZdlPvj>
   d6ec2:	4620      	mov	r0, r4
   d6ec4:	bd10      	pop	{r4, pc}
	...

000d6ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6ec8:	b510      	push	{r4, lr}
   d6eca:	f04f 0c00 	mov.w	ip, #0
   d6ece:	4604      	mov	r4, r0
   d6ed0:	4608      	mov	r0, r1
   d6ed2:	4611      	mov	r1, r2
   d6ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ed8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6edc:	4a04      	ldr	r2, [pc, #16]	; (d6ef0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6ede:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6ee0:	2201      	movs	r2, #1
  _serial = serial;
   d6ee2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6ee4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6ee6:	461a      	mov	r2, r3
   d6ee8:	f7fe fe2e 	bl	d5b48 <hal_usart_init>
}
   d6eec:	4620      	mov	r0, r4
   d6eee:	bd10      	pop	{r4, pc}
   d6ef0:	000da234 	.word	0x000da234

000d6ef4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6ef4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6ef6:	4c0e      	ldr	r4, [pc, #56]	; (d6f30 <_Z22__fetch_global_Serial1v+0x3c>)
   d6ef8:	7821      	ldrb	r1, [r4, #0]
   d6efa:	f3bf 8f5b 	dmb	ish
   d6efe:	f011 0101 	ands.w	r1, r1, #1
   d6f02:	d112      	bne.n	d6f2a <_Z22__fetch_global_Serial1v+0x36>
   d6f04:	4620      	mov	r0, r4
   d6f06:	9101      	str	r1, [sp, #4]
   d6f08:	f7fd f8d6 	bl	d40b8 <__cxa_guard_acquire>
   d6f0c:	9901      	ldr	r1, [sp, #4]
   d6f0e:	b160      	cbz	r0, d6f2a <_Z22__fetch_global_Serial1v+0x36>
   d6f10:	4a08      	ldr	r2, [pc, #32]	; (d6f34 <_Z22__fetch_global_Serial1v+0x40>)
   d6f12:	4b09      	ldr	r3, [pc, #36]	; (d6f38 <_Z22__fetch_global_Serial1v+0x44>)
   d6f14:	4809      	ldr	r0, [pc, #36]	; (d6f3c <_Z22__fetch_global_Serial1v+0x48>)
   d6f16:	f7ff ffd7 	bl	d6ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6f1a:	4620      	mov	r0, r4
   d6f1c:	f7fd f8d1 	bl	d40c2 <__cxa_guard_release>
   d6f20:	4a07      	ldr	r2, [pc, #28]	; (d6f40 <_Z22__fetch_global_Serial1v+0x4c>)
   d6f22:	4908      	ldr	r1, [pc, #32]	; (d6f44 <_Z22__fetch_global_Serial1v+0x50>)
   d6f24:	4805      	ldr	r0, [pc, #20]	; (d6f3c <_Z22__fetch_global_Serial1v+0x48>)
   d6f26:	f000 f9f9 	bl	d731c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6f2a:	4804      	ldr	r0, [pc, #16]	; (d6f3c <_Z22__fetch_global_Serial1v+0x48>)
   d6f2c:	b002      	add	sp, #8
   d6f2e:	bd10      	pop	{r4, pc}
   d6f30:	2003e688 	.word	0x2003e688
   d6f34:	2003e68c 	.word	0x2003e68c
   d6f38:	2003e710 	.word	0x2003e710
   d6f3c:	2003e794 	.word	0x2003e794
   d6f40:	2003e458 	.word	0x2003e458
   d6f44:	000d6e4d 	.word	0x000d6e4d

000d6f48 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f48:	7441      	strb	r1, [r0, #17]
}
   d6f4a:	4770      	bx	lr

000d6f4c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f4c:	4770      	bx	lr

000d6f4e <_ZN9USBSerial4readEv>:
{
   d6f4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f50:	2100      	movs	r1, #0
   d6f52:	7c00      	ldrb	r0, [r0, #16]
   d6f54:	f7fe fe50 	bl	d5bf8 <HAL_USB_USART_Receive_Data>
}
   d6f58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6f5c:	bd08      	pop	{r3, pc}

000d6f5e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6f5e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f60:	2101      	movs	r1, #1
   d6f62:	7c00      	ldrb	r0, [r0, #16]
   d6f64:	f7fe fe48 	bl	d5bf8 <HAL_USB_USART_Receive_Data>
}
   d6f68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6f6c:	bd08      	pop	{r3, pc}

000d6f6e <_ZN9USBSerial17availableForWriteEv>:
{
   d6f6e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f70:	7c00      	ldrb	r0, [r0, #16]
   d6f72:	f7fe fe39 	bl	d5be8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6f76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f7a:	bd08      	pop	{r3, pc}

000d6f7c <_ZN9USBSerial9availableEv>:
{
   d6f7c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f7e:	7c00      	ldrb	r0, [r0, #16]
   d6f80:	f7fe fe2a 	bl	d5bd8 <HAL_USB_USART_Available_Data>
}
   d6f84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f88:	bd08      	pop	{r3, pc}

000d6f8a <_ZN9USBSerial5writeEh>:
{
   d6f8a:	b513      	push	{r0, r1, r4, lr}
   d6f8c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f8e:	7c00      	ldrb	r0, [r0, #16]
{
   d6f90:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f92:	f7fe fe29 	bl	d5be8 <HAL_USB_USART_Available_Data_For_Write>
   d6f96:	2800      	cmp	r0, #0
   d6f98:	9901      	ldr	r1, [sp, #4]
   d6f9a:	dc01      	bgt.n	d6fa0 <_ZN9USBSerial5writeEh+0x16>
   d6f9c:	7c60      	ldrb	r0, [r4, #17]
   d6f9e:	b120      	cbz	r0, d6faa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6fa0:	7c20      	ldrb	r0, [r4, #16]
   d6fa2:	f7fe fe31 	bl	d5c08 <HAL_USB_USART_Send_Data>
   d6fa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6faa:	b002      	add	sp, #8
   d6fac:	bd10      	pop	{r4, pc}

000d6fae <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6fae:	7c00      	ldrb	r0, [r0, #16]
   d6fb0:	f7fe be32 	b.w	d5c18 <HAL_USB_USART_Flush_Data>

000d6fb4 <_ZN9USBSerialD0Ev>:
   d6fb4:	b510      	push	{r4, lr}
   d6fb6:	2114      	movs	r1, #20
   d6fb8:	4604      	mov	r4, r0
   d6fba:	f000 f9b4 	bl	d7326 <_ZdlPvj>
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	bd10      	pop	{r4, pc}
	...

000d6fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fc4:	b510      	push	{r4, lr}
   d6fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fca:	4604      	mov	r4, r0
   d6fcc:	4608      	mov	r0, r1
   d6fce:	2100      	movs	r1, #0
   d6fd0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6fd4:	4b04      	ldr	r3, [pc, #16]	; (d6fe8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6fd6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6fd8:	2301      	movs	r3, #1
  _serial = serial;
   d6fda:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6fdc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6fde:	4611      	mov	r1, r2
   d6fe0:	f7fe fdf2 	bl	d5bc8 <HAL_USB_USART_Init>
}
   d6fe4:	4620      	mov	r0, r4
   d6fe6:	bd10      	pop	{r4, pc}
   d6fe8:	000da264 	.word	0x000da264

000d6fec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6fee:	2214      	movs	r2, #20
{
   d6ff0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6ff2:	2100      	movs	r1, #0
   d6ff4:	f000 fee8 	bl	d7dc8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6ff8:	4620      	mov	r0, r4
   d6ffa:	bd10      	pop	{r4, pc}

000d6ffc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6ffc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ffe:	4c10      	ldr	r4, [pc, #64]	; (d7040 <_Z16_fetch_usbserialv+0x44>)
{
   d7000:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7002:	a803      	add	r0, sp, #12
   d7004:	f7ff fff2 	bl	d6fec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7008:	7821      	ldrb	r1, [r4, #0]
   d700a:	f3bf 8f5b 	dmb	ish
   d700e:	f011 0101 	ands.w	r1, r1, #1
   d7012:	d111      	bne.n	d7038 <_Z16_fetch_usbserialv+0x3c>
   d7014:	4620      	mov	r0, r4
   d7016:	9101      	str	r1, [sp, #4]
   d7018:	f7fd f84e 	bl	d40b8 <__cxa_guard_acquire>
   d701c:	9901      	ldr	r1, [sp, #4]
   d701e:	b158      	cbz	r0, d7038 <_Z16_fetch_usbserialv+0x3c>
   d7020:	aa03      	add	r2, sp, #12
   d7022:	4808      	ldr	r0, [pc, #32]	; (d7044 <_Z16_fetch_usbserialv+0x48>)
   d7024:	f7ff ffce 	bl	d6fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7028:	4620      	mov	r0, r4
   d702a:	f7fd f84a 	bl	d40c2 <__cxa_guard_release>
   d702e:	4a06      	ldr	r2, [pc, #24]	; (d7048 <_Z16_fetch_usbserialv+0x4c>)
   d7030:	4906      	ldr	r1, [pc, #24]	; (d704c <_Z16_fetch_usbserialv+0x50>)
   d7032:	4804      	ldr	r0, [pc, #16]	; (d7044 <_Z16_fetch_usbserialv+0x48>)
   d7034:	f000 f972 	bl	d731c <__aeabi_atexit>
	return _usbserial;
}
   d7038:	4802      	ldr	r0, [pc, #8]	; (d7044 <_Z16_fetch_usbserialv+0x48>)
   d703a:	b008      	add	sp, #32
   d703c:	bd10      	pop	{r4, pc}
   d703e:	bf00      	nop
   d7040:	2003e7a8 	.word	0x2003e7a8
   d7044:	2003e7ac 	.word	0x2003e7ac
   d7048:	2003e458 	.word	0x2003e458
   d704c:	000d6f4d 	.word	0x000d6f4d

000d7050 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7050:	4b01      	ldr	r3, [pc, #4]	; (d7058 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7052:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7054:	4770      	bx	lr
   d7056:	bf00      	nop
   d7058:	2003e284 	.word	0x2003e284

000d705c <serialEventRun>:
{
   d705c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d705e:	4b0b      	ldr	r3, [pc, #44]	; (d708c <serialEventRun+0x30>)
   d7060:	b143      	cbz	r3, d7074 <serialEventRun+0x18>
   d7062:	f7ff ffcb 	bl	d6ffc <_Z16_fetch_usbserialv>
   d7066:	6803      	ldr	r3, [r0, #0]
   d7068:	691b      	ldr	r3, [r3, #16]
   d706a:	4798      	blx	r3
   d706c:	2800      	cmp	r0, #0
   d706e:	dd01      	ble.n	d7074 <serialEventRun+0x18>
        serialEvent();
   d7070:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7074:	4b06      	ldr	r3, [pc, #24]	; (d7090 <serialEventRun+0x34>)
   d7076:	b143      	cbz	r3, d708a <serialEventRun+0x2e>
   d7078:	f7ff ff3c 	bl	d6ef4 <_Z22__fetch_global_Serial1v>
   d707c:	6803      	ldr	r3, [r0, #0]
   d707e:	691b      	ldr	r3, [r3, #16]
   d7080:	4798      	blx	r3
   d7082:	2800      	cmp	r0, #0
   d7084:	dd01      	ble.n	d708a <serialEventRun+0x2e>
        serialEvent1();
   d7086:	f3af 8000 	nop.w
}
   d708a:	bd08      	pop	{r3, pc}
	...

000d7094 <_post_loop>:
{
   d7094:	b508      	push	{r3, lr}
	serialEventRun();
   d7096:	f7ff ffe1 	bl	d705c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d709a:	f7fe fc7d 	bl	d5998 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d709e:	4b01      	ldr	r3, [pc, #4]	; (d70a4 <_post_loop+0x10>)
   d70a0:	6018      	str	r0, [r3, #0]
}
   d70a2:	bd08      	pop	{r3, pc}
   d70a4:	2003e7d4 	.word	0x2003e7d4

000d70a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d70a8:	4802      	ldr	r0, [pc, #8]	; (d70b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d70aa:	4a03      	ldr	r2, [pc, #12]	; (d70b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d70ac:	4903      	ldr	r1, [pc, #12]	; (d70bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d70ae:	1a12      	subs	r2, r2, r0
   d70b0:	f000 be62 	b.w	d7d78 <memcpy>
   d70b4:	2003f400 	.word	0x2003f400
   d70b8:	2003fc04 	.word	0x2003fc04
   d70bc:	000da590 	.word	0x000da590

000d70c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d70c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d70c2:	2300      	movs	r3, #0
   d70c4:	9300      	str	r3, [sp, #0]
   d70c6:	461a      	mov	r2, r3
   d70c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d70cc:	f7fe fe08 	bl	d5ce0 <system_ctrl_set_result>
}
   d70d0:	b003      	add	sp, #12
   d70d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d70d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d70d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d70da:	8843      	ldrh	r3, [r0, #2]
   d70dc:	2b0a      	cmp	r3, #10
   d70de:	d008      	beq.n	d70f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d70e0:	2b50      	cmp	r3, #80	; 0x50
   d70e2:	d10b      	bne.n	d70fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d70e4:	4b09      	ldr	r3, [pc, #36]	; (d710c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d70e6:	681b      	ldr	r3, [r3, #0]
   d70e8:	b14b      	cbz	r3, d70fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d70ea:	b003      	add	sp, #12
   d70ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d70f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d70f2:	f7ff ffe5 	bl	d70c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d70f6:	b003      	add	sp, #12
   d70f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d70fc:	2300      	movs	r3, #0
   d70fe:	9300      	str	r3, [sp, #0]
   d7100:	461a      	mov	r2, r3
   d7102:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7106:	f7fe fdeb 	bl	d5ce0 <system_ctrl_set_result>
}
   d710a:	e7f4      	b.n	d70f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d710c:	2003e7c4 	.word	0x2003e7c4

000d7110 <module_user_init_hook>:
{
   d7110:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7112:	4c12      	ldr	r4, [pc, #72]	; (d715c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7114:	4812      	ldr	r0, [pc, #72]	; (d7160 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7116:	4d13      	ldr	r5, [pc, #76]	; (d7164 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7118:	2100      	movs	r1, #0
   d711a:	f7fe fecd 	bl	d5eb8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d711e:	6823      	ldr	r3, [r4, #0]
   d7120:	42ab      	cmp	r3, r5
   d7122:	4b11      	ldr	r3, [pc, #68]	; (d7168 <module_user_init_hook+0x58>)
   d7124:	bf0c      	ite	eq
   d7126:	2201      	moveq	r2, #1
   d7128:	2200      	movne	r2, #0
   d712a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d712c:	d002      	beq.n	d7134 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d712e:	f7ff ffbb 	bl	d70a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7132:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7134:	f7fe fc18 	bl	d5968 <HAL_RNG_GetRandomNumber>
   d7138:	4604      	mov	r4, r0
    srand(seed);
   d713a:	f000 fe4d 	bl	d7dd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d713e:	4b0b      	ldr	r3, [pc, #44]	; (d716c <module_user_init_hook+0x5c>)
   d7140:	b113      	cbz	r3, d7148 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7142:	4620      	mov	r0, r4
   d7144:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7148:	2100      	movs	r1, #0
   d714a:	4808      	ldr	r0, [pc, #32]	; (d716c <module_user_init_hook+0x5c>)
   d714c:	f7fe fe24 	bl	d5d98 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7154:	4806      	ldr	r0, [pc, #24]	; (d7170 <module_user_init_hook+0x60>)
   d7156:	2100      	movs	r1, #0
   d7158:	f7fe bdb8 	b.w	d5ccc <system_ctrl_set_app_request_handler>
   d715c:	2003fc00 	.word	0x2003fc00
   d7160:	000d7051 	.word	0x000d7051
   d7164:	9a271c1e 	.word	0x9a271c1e
   d7168:	2003e7c0 	.word	0x2003e7c0
   d716c:	00000000 	.word	0x00000000
   d7170:	000d70d9 	.word	0x000d70d9

000d7174 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <spark_protocol_instance+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	681b      	ldr	r3, [r3, #0]
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	0003025c 	.word	0x0003025c

000d7184 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <spark_protocol_set_product_id+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	685b      	ldr	r3, [r3, #4]
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	0003025c 	.word	0x0003025c

000d7194 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <spark_protocol_set_product_firmware_version+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	689b      	ldr	r3, [r3, #8]
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	0003025c 	.word	0x0003025c

000d71a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d71a4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d71a6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d71a8:	d902      	bls.n	d71b0 <pinAvailable+0xc>
    return false;
   d71aa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d71ac:	b002      	add	sp, #8
   d71ae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d71b0:	f1a0 030b 	sub.w	r3, r0, #11
   d71b4:	2b02      	cmp	r3, #2
   d71b6:	d81a      	bhi.n	d71ee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d71b8:	4c17      	ldr	r4, [pc, #92]	; (d7218 <pinAvailable+0x74>)
   d71ba:	7821      	ldrb	r1, [r4, #0]
   d71bc:	f3bf 8f5b 	dmb	ish
   d71c0:	f011 0101 	ands.w	r1, r1, #1
   d71c4:	d10b      	bne.n	d71de <pinAvailable+0x3a>
   d71c6:	4620      	mov	r0, r4
   d71c8:	9101      	str	r1, [sp, #4]
   d71ca:	f7fc ff75 	bl	d40b8 <__cxa_guard_acquire>
   d71ce:	9901      	ldr	r1, [sp, #4]
   d71d0:	b128      	cbz	r0, d71de <pinAvailable+0x3a>
   d71d2:	4812      	ldr	r0, [pc, #72]	; (d721c <pinAvailable+0x78>)
   d71d4:	f7ff fc88 	bl	d6ae8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d71d8:	4620      	mov	r0, r4
   d71da:	f7fc ff72 	bl	d40c2 <__cxa_guard_release>
   d71de:	4b0f      	ldr	r3, [pc, #60]	; (d721c <pinAvailable+0x78>)
   d71e0:	7818      	ldrb	r0, [r3, #0]
   d71e2:	f7fe fca9 	bl	d5b38 <hal_spi_is_enabled>
   d71e6:	2800      	cmp	r0, #0
   d71e8:	d1df      	bne.n	d71aa <pinAvailable+0x6>
  return true; // 'pin' is available
   d71ea:	2001      	movs	r0, #1
   d71ec:	e7de      	b.n	d71ac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d71ee:	2801      	cmp	r0, #1
   d71f0:	d809      	bhi.n	d7206 <pinAvailable+0x62>
   d71f2:	f000 f86b 	bl	d72cc <_Z19__fetch_global_Wirev>
   d71f6:	2100      	movs	r1, #0
   d71f8:	7c00      	ldrb	r0, [r0, #16]
   d71fa:	f7fe fc55 	bl	d5aa8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d71fe:	f080 0001 	eor.w	r0, r0, #1
   d7202:	b2c0      	uxtb	r0, r0
   d7204:	e7d2      	b.n	d71ac <pinAvailable+0x8>
   d7206:	3809      	subs	r0, #9
   d7208:	2801      	cmp	r0, #1
   d720a:	d8ee      	bhi.n	d71ea <pinAvailable+0x46>
   d720c:	f7ff fe72 	bl	d6ef4 <_Z22__fetch_global_Serial1v>
   d7210:	7c00      	ldrb	r0, [r0, #16]
   d7212:	f7fe fcc9 	bl	d5ba8 <hal_usart_is_enabled>
   d7216:	e7f2      	b.n	d71fe <pinAvailable+0x5a>
   d7218:	2003e7c8 	.word	0x2003e7c8
   d721c:	2003e7cc 	.word	0x2003e7cc

000d7220 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7220:	2823      	cmp	r0, #35	; 0x23
{
   d7222:	b538      	push	{r3, r4, r5, lr}
   d7224:	4604      	mov	r4, r0
   d7226:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7228:	d80a      	bhi.n	d7240 <pinMode+0x20>
   d722a:	29ff      	cmp	r1, #255	; 0xff
   d722c:	d008      	beq.n	d7240 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d722e:	f7ff ffb9 	bl	d71a4 <pinAvailable>
   d7232:	b128      	cbz	r0, d7240 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7234:	4629      	mov	r1, r5
   d7236:	4620      	mov	r0, r4
}
   d7238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d723c:	f7fe bbc4 	b.w	d59c8 <HAL_Pin_Mode>
}
   d7240:	bd38      	pop	{r3, r4, r5, pc}

000d7242 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7242:	b538      	push	{r3, r4, r5, lr}
   d7244:	4604      	mov	r4, r0
   d7246:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7248:	f7fe fbc6 	bl	d59d8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d724c:	28ff      	cmp	r0, #255	; 0xff
   d724e:	d010      	beq.n	d7272 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7250:	2806      	cmp	r0, #6
   d7252:	d804      	bhi.n	d725e <digitalWrite+0x1c>
   d7254:	234d      	movs	r3, #77	; 0x4d
   d7256:	fa23 f000 	lsr.w	r0, r3, r0
   d725a:	07c3      	lsls	r3, r0, #31
   d725c:	d409      	bmi.n	d7272 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d725e:	4620      	mov	r0, r4
   d7260:	f7ff ffa0 	bl	d71a4 <pinAvailable>
   d7264:	b128      	cbz	r0, d7272 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7266:	4629      	mov	r1, r5
   d7268:	4620      	mov	r0, r4
}
   d726a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d726e:	f7fe bbbb 	b.w	d59e8 <HAL_GPIO_Write>
}
   d7272:	bd38      	pop	{r3, r4, r5, pc}

000d7274 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7274:	b510      	push	{r4, lr}
   d7276:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7278:	f7fe fbae 	bl	d59d8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d727c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d727e:	b2db      	uxtb	r3, r3
   d7280:	2b01      	cmp	r3, #1
   d7282:	d908      	bls.n	d7296 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7284:	4620      	mov	r0, r4
   d7286:	f7ff ff8d 	bl	d71a4 <pinAvailable>
   d728a:	b120      	cbz	r0, d7296 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d728c:	4620      	mov	r0, r4
}
   d728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7292:	f7fe bbb1 	b.w	d59f8 <HAL_GPIO_Read>
}
   d7296:	2000      	movs	r0, #0
   d7298:	bd10      	pop	{r4, pc}
	...

000d729c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d729c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d729e:	2300      	movs	r3, #0
   d72a0:	2520      	movs	r5, #32
   d72a2:	8043      	strh	r3, [r0, #2]
   d72a4:	2314      	movs	r3, #20
{
   d72a6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d72a8:	8003      	strh	r3, [r0, #0]
   d72aa:	6085      	str	r5, [r0, #8]
   d72ac:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d72ae:	4906      	ldr	r1, [pc, #24]	; (d72c8 <_Z17acquireWireBufferv+0x2c>)
   d72b0:	4628      	mov	r0, r5
   d72b2:	f000 f83c 	bl	d732e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d72b6:	4904      	ldr	r1, [pc, #16]	; (d72c8 <_Z17acquireWireBufferv+0x2c>)
	};
   d72b8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d72ba:	4628      	mov	r0, r5
   d72bc:	f000 f837 	bl	d732e <_ZnajRKSt9nothrow_t>
	};
   d72c0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d72c2:	4620      	mov	r0, r4
   d72c4:	bd38      	pop	{r3, r4, r5, pc}
   d72c6:	bf00      	nop
   d72c8:	000da28c 	.word	0x000da28c

000d72cc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d72cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d72ce:	4d0f      	ldr	r5, [pc, #60]	; (d730c <_Z19__fetch_global_Wirev+0x40>)
   d72d0:	7829      	ldrb	r1, [r5, #0]
   d72d2:	f3bf 8f5b 	dmb	ish
   d72d6:	f011 0401 	ands.w	r4, r1, #1
{
   d72da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d72dc:	d113      	bne.n	d7306 <_Z19__fetch_global_Wirev+0x3a>
   d72de:	4628      	mov	r0, r5
   d72e0:	f7fc feea 	bl	d40b8 <__cxa_guard_acquire>
   d72e4:	b178      	cbz	r0, d7306 <_Z19__fetch_global_Wirev+0x3a>
   d72e6:	a801      	add	r0, sp, #4
   d72e8:	f7ff ffd8 	bl	d729c <_Z17acquireWireBufferv>
   d72ec:	aa01      	add	r2, sp, #4
   d72ee:	4621      	mov	r1, r4
   d72f0:	4807      	ldr	r0, [pc, #28]	; (d7310 <_Z19__fetch_global_Wirev+0x44>)
   d72f2:	f7ff f9d3 	bl	d669c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d72f6:	4628      	mov	r0, r5
   d72f8:	f7fc fee3 	bl	d40c2 <__cxa_guard_release>
   d72fc:	4a05      	ldr	r2, [pc, #20]	; (d7314 <_Z19__fetch_global_Wirev+0x48>)
   d72fe:	4906      	ldr	r1, [pc, #24]	; (d7318 <_Z19__fetch_global_Wirev+0x4c>)
   d7300:	4803      	ldr	r0, [pc, #12]	; (d7310 <_Z19__fetch_global_Wirev+0x44>)
   d7302:	f000 f80b 	bl	d731c <__aeabi_atexit>
	return wire;
}
   d7306:	4802      	ldr	r0, [pc, #8]	; (d7310 <_Z19__fetch_global_Wirev+0x44>)
   d7308:	b007      	add	sp, #28
   d730a:	bd30      	pop	{r4, r5, pc}
   d730c:	2003e7d8 	.word	0x2003e7d8
   d7310:	2003e7dc 	.word	0x2003e7dc
   d7314:	2003e458 	.word	0x2003e458
   d7318:	000d6645 	.word	0x000d6645

000d731c <__aeabi_atexit>:
   d731c:	460b      	mov	r3, r1
   d731e:	4601      	mov	r1, r0
   d7320:	4618      	mov	r0, r3
   d7322:	f000 bd1b 	b.w	d7d5c <__cxa_atexit>

000d7326 <_ZdlPvj>:
   d7326:	f7fc beba 	b.w	d409e <_ZdlPv>

000d732a <_ZnwjRKSt9nothrow_t>:
   d732a:	f7fc beb4 	b.w	d4096 <_Znwj>

000d732e <_ZnajRKSt9nothrow_t>:
   d732e:	f7fc beb4 	b.w	d409a <_Znaj>

000d7332 <_ZSt25__throw_bad_function_callv>:
   d7332:	b508      	push	{r3, lr}
   d7334:	f7fe fdb0 	bl	d5e98 <abort>

000d7338 <__aeabi_drsub>:
   d7338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d733c:	e002      	b.n	d7344 <__adddf3>
   d733e:	bf00      	nop

000d7340 <__aeabi_dsub>:
   d7340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7344 <__adddf3>:
   d7344:	b530      	push	{r4, r5, lr}
   d7346:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d734a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d734e:	ea94 0f05 	teq	r4, r5
   d7352:	bf08      	it	eq
   d7354:	ea90 0f02 	teqeq	r0, r2
   d7358:	bf1f      	itttt	ne
   d735a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d735e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d736a:	f000 80e2 	beq.w	d7532 <__adddf3+0x1ee>
   d736e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7376:	bfb8      	it	lt
   d7378:	426d      	neglt	r5, r5
   d737a:	dd0c      	ble.n	d7396 <__adddf3+0x52>
   d737c:	442c      	add	r4, r5
   d737e:	ea80 0202 	eor.w	r2, r0, r2
   d7382:	ea81 0303 	eor.w	r3, r1, r3
   d7386:	ea82 0000 	eor.w	r0, r2, r0
   d738a:	ea83 0101 	eor.w	r1, r3, r1
   d738e:	ea80 0202 	eor.w	r2, r0, r2
   d7392:	ea81 0303 	eor.w	r3, r1, r3
   d7396:	2d36      	cmp	r5, #54	; 0x36
   d7398:	bf88      	it	hi
   d739a:	bd30      	pophi	{r4, r5, pc}
   d739c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d73a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d73a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d73a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d73ac:	d002      	beq.n	d73b4 <__adddf3+0x70>
   d73ae:	4240      	negs	r0, r0
   d73b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d73b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d73bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d73c0:	d002      	beq.n	d73c8 <__adddf3+0x84>
   d73c2:	4252      	negs	r2, r2
   d73c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d73c8:	ea94 0f05 	teq	r4, r5
   d73cc:	f000 80a7 	beq.w	d751e <__adddf3+0x1da>
   d73d0:	f1a4 0401 	sub.w	r4, r4, #1
   d73d4:	f1d5 0e20 	rsbs	lr, r5, #32
   d73d8:	db0d      	blt.n	d73f6 <__adddf3+0xb2>
   d73da:	fa02 fc0e 	lsl.w	ip, r2, lr
   d73de:	fa22 f205 	lsr.w	r2, r2, r5
   d73e2:	1880      	adds	r0, r0, r2
   d73e4:	f141 0100 	adc.w	r1, r1, #0
   d73e8:	fa03 f20e 	lsl.w	r2, r3, lr
   d73ec:	1880      	adds	r0, r0, r2
   d73ee:	fa43 f305 	asr.w	r3, r3, r5
   d73f2:	4159      	adcs	r1, r3
   d73f4:	e00e      	b.n	d7414 <__adddf3+0xd0>
   d73f6:	f1a5 0520 	sub.w	r5, r5, #32
   d73fa:	f10e 0e20 	add.w	lr, lr, #32
   d73fe:	2a01      	cmp	r2, #1
   d7400:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7404:	bf28      	it	cs
   d7406:	f04c 0c02 	orrcs.w	ip, ip, #2
   d740a:	fa43 f305 	asr.w	r3, r3, r5
   d740e:	18c0      	adds	r0, r0, r3
   d7410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7418:	d507      	bpl.n	d742a <__adddf3+0xe6>
   d741a:	f04f 0e00 	mov.w	lr, #0
   d741e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7422:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7426:	eb6e 0101 	sbc.w	r1, lr, r1
   d742a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d742e:	d31b      	bcc.n	d7468 <__adddf3+0x124>
   d7430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7434:	d30c      	bcc.n	d7450 <__adddf3+0x10c>
   d7436:	0849      	lsrs	r1, r1, #1
   d7438:	ea5f 0030 	movs.w	r0, r0, rrx
   d743c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7440:	f104 0401 	add.w	r4, r4, #1
   d7444:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d744c:	f080 809a 	bcs.w	d7584 <__adddf3+0x240>
   d7450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7454:	bf08      	it	eq
   d7456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d745a:	f150 0000 	adcs.w	r0, r0, #0
   d745e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7462:	ea41 0105 	orr.w	r1, r1, r5
   d7466:	bd30      	pop	{r4, r5, pc}
   d7468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d746c:	4140      	adcs	r0, r0
   d746e:	eb41 0101 	adc.w	r1, r1, r1
   d7472:	3c01      	subs	r4, #1
   d7474:	bf28      	it	cs
   d7476:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d747a:	d2e9      	bcs.n	d7450 <__adddf3+0x10c>
   d747c:	f091 0f00 	teq	r1, #0
   d7480:	bf04      	itt	eq
   d7482:	4601      	moveq	r1, r0
   d7484:	2000      	moveq	r0, #0
   d7486:	fab1 f381 	clz	r3, r1
   d748a:	bf08      	it	eq
   d748c:	3320      	addeq	r3, #32
   d748e:	f1a3 030b 	sub.w	r3, r3, #11
   d7492:	f1b3 0220 	subs.w	r2, r3, #32
   d7496:	da0c      	bge.n	d74b2 <__adddf3+0x16e>
   d7498:	320c      	adds	r2, #12
   d749a:	dd08      	ble.n	d74ae <__adddf3+0x16a>
   d749c:	f102 0c14 	add.w	ip, r2, #20
   d74a0:	f1c2 020c 	rsb	r2, r2, #12
   d74a4:	fa01 f00c 	lsl.w	r0, r1, ip
   d74a8:	fa21 f102 	lsr.w	r1, r1, r2
   d74ac:	e00c      	b.n	d74c8 <__adddf3+0x184>
   d74ae:	f102 0214 	add.w	r2, r2, #20
   d74b2:	bfd8      	it	le
   d74b4:	f1c2 0c20 	rsble	ip, r2, #32
   d74b8:	fa01 f102 	lsl.w	r1, r1, r2
   d74bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d74c0:	bfdc      	itt	le
   d74c2:	ea41 010c 	orrle.w	r1, r1, ip
   d74c6:	4090      	lslle	r0, r2
   d74c8:	1ae4      	subs	r4, r4, r3
   d74ca:	bfa2      	ittt	ge
   d74cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d74d0:	4329      	orrge	r1, r5
   d74d2:	bd30      	popge	{r4, r5, pc}
   d74d4:	ea6f 0404 	mvn.w	r4, r4
   d74d8:	3c1f      	subs	r4, #31
   d74da:	da1c      	bge.n	d7516 <__adddf3+0x1d2>
   d74dc:	340c      	adds	r4, #12
   d74de:	dc0e      	bgt.n	d74fe <__adddf3+0x1ba>
   d74e0:	f104 0414 	add.w	r4, r4, #20
   d74e4:	f1c4 0220 	rsb	r2, r4, #32
   d74e8:	fa20 f004 	lsr.w	r0, r0, r4
   d74ec:	fa01 f302 	lsl.w	r3, r1, r2
   d74f0:	ea40 0003 	orr.w	r0, r0, r3
   d74f4:	fa21 f304 	lsr.w	r3, r1, r4
   d74f8:	ea45 0103 	orr.w	r1, r5, r3
   d74fc:	bd30      	pop	{r4, r5, pc}
   d74fe:	f1c4 040c 	rsb	r4, r4, #12
   d7502:	f1c4 0220 	rsb	r2, r4, #32
   d7506:	fa20 f002 	lsr.w	r0, r0, r2
   d750a:	fa01 f304 	lsl.w	r3, r1, r4
   d750e:	ea40 0003 	orr.w	r0, r0, r3
   d7512:	4629      	mov	r1, r5
   d7514:	bd30      	pop	{r4, r5, pc}
   d7516:	fa21 f004 	lsr.w	r0, r1, r4
   d751a:	4629      	mov	r1, r5
   d751c:	bd30      	pop	{r4, r5, pc}
   d751e:	f094 0f00 	teq	r4, #0
   d7522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7526:	bf06      	itte	eq
   d7528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d752c:	3401      	addeq	r4, #1
   d752e:	3d01      	subne	r5, #1
   d7530:	e74e      	b.n	d73d0 <__adddf3+0x8c>
   d7532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7536:	bf18      	it	ne
   d7538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d753c:	d029      	beq.n	d7592 <__adddf3+0x24e>
   d753e:	ea94 0f05 	teq	r4, r5
   d7542:	bf08      	it	eq
   d7544:	ea90 0f02 	teqeq	r0, r2
   d7548:	d005      	beq.n	d7556 <__adddf3+0x212>
   d754a:	ea54 0c00 	orrs.w	ip, r4, r0
   d754e:	bf04      	itt	eq
   d7550:	4619      	moveq	r1, r3
   d7552:	4610      	moveq	r0, r2
   d7554:	bd30      	pop	{r4, r5, pc}
   d7556:	ea91 0f03 	teq	r1, r3
   d755a:	bf1e      	ittt	ne
   d755c:	2100      	movne	r1, #0
   d755e:	2000      	movne	r0, #0
   d7560:	bd30      	popne	{r4, r5, pc}
   d7562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7566:	d105      	bne.n	d7574 <__adddf3+0x230>
   d7568:	0040      	lsls	r0, r0, #1
   d756a:	4149      	adcs	r1, r1
   d756c:	bf28      	it	cs
   d756e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7572:	bd30      	pop	{r4, r5, pc}
   d7574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7578:	bf3c      	itt	cc
   d757a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d757e:	bd30      	popcc	{r4, r5, pc}
   d7580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d758c:	f04f 0000 	mov.w	r0, #0
   d7590:	bd30      	pop	{r4, r5, pc}
   d7592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7596:	bf1a      	itte	ne
   d7598:	4619      	movne	r1, r3
   d759a:	4610      	movne	r0, r2
   d759c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d75a0:	bf1c      	itt	ne
   d75a2:	460b      	movne	r3, r1
   d75a4:	4602      	movne	r2, r0
   d75a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d75aa:	bf06      	itte	eq
   d75ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d75b0:	ea91 0f03 	teqeq	r1, r3
   d75b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d75b8:	bd30      	pop	{r4, r5, pc}
   d75ba:	bf00      	nop

000d75bc <__aeabi_ui2d>:
   d75bc:	f090 0f00 	teq	r0, #0
   d75c0:	bf04      	itt	eq
   d75c2:	2100      	moveq	r1, #0
   d75c4:	4770      	bxeq	lr
   d75c6:	b530      	push	{r4, r5, lr}
   d75c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d75cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d75d0:	f04f 0500 	mov.w	r5, #0
   d75d4:	f04f 0100 	mov.w	r1, #0
   d75d8:	e750      	b.n	d747c <__adddf3+0x138>
   d75da:	bf00      	nop

000d75dc <__aeabi_i2d>:
   d75dc:	f090 0f00 	teq	r0, #0
   d75e0:	bf04      	itt	eq
   d75e2:	2100      	moveq	r1, #0
   d75e4:	4770      	bxeq	lr
   d75e6:	b530      	push	{r4, r5, lr}
   d75e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d75ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d75f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d75f4:	bf48      	it	mi
   d75f6:	4240      	negmi	r0, r0
   d75f8:	f04f 0100 	mov.w	r1, #0
   d75fc:	e73e      	b.n	d747c <__adddf3+0x138>
   d75fe:	bf00      	nop

000d7600 <__aeabi_f2d>:
   d7600:	0042      	lsls	r2, r0, #1
   d7602:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7606:	ea4f 0131 	mov.w	r1, r1, rrx
   d760a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d760e:	bf1f      	itttt	ne
   d7610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d761c:	4770      	bxne	lr
   d761e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7622:	bf08      	it	eq
   d7624:	4770      	bxeq	lr
   d7626:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d762a:	bf04      	itt	eq
   d762c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7630:	4770      	bxeq	lr
   d7632:	b530      	push	{r4, r5, lr}
   d7634:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d763c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7640:	e71c      	b.n	d747c <__adddf3+0x138>
   d7642:	bf00      	nop

000d7644 <__aeabi_ul2d>:
   d7644:	ea50 0201 	orrs.w	r2, r0, r1
   d7648:	bf08      	it	eq
   d764a:	4770      	bxeq	lr
   d764c:	b530      	push	{r4, r5, lr}
   d764e:	f04f 0500 	mov.w	r5, #0
   d7652:	e00a      	b.n	d766a <__aeabi_l2d+0x16>

000d7654 <__aeabi_l2d>:
   d7654:	ea50 0201 	orrs.w	r2, r0, r1
   d7658:	bf08      	it	eq
   d765a:	4770      	bxeq	lr
   d765c:	b530      	push	{r4, r5, lr}
   d765e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7662:	d502      	bpl.n	d766a <__aeabi_l2d+0x16>
   d7664:	4240      	negs	r0, r0
   d7666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d766a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d766e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7676:	f43f aed8 	beq.w	d742a <__adddf3+0xe6>
   d767a:	f04f 0203 	mov.w	r2, #3
   d767e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7682:	bf18      	it	ne
   d7684:	3203      	addne	r2, #3
   d7686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d768a:	bf18      	it	ne
   d768c:	3203      	addne	r2, #3
   d768e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7692:	f1c2 0320 	rsb	r3, r2, #32
   d7696:	fa00 fc03 	lsl.w	ip, r0, r3
   d769a:	fa20 f002 	lsr.w	r0, r0, r2
   d769e:	fa01 fe03 	lsl.w	lr, r1, r3
   d76a2:	ea40 000e 	orr.w	r0, r0, lr
   d76a6:	fa21 f102 	lsr.w	r1, r1, r2
   d76aa:	4414      	add	r4, r2
   d76ac:	e6bd      	b.n	d742a <__adddf3+0xe6>
   d76ae:	bf00      	nop

000d76b0 <__aeabi_dmul>:
   d76b0:	b570      	push	{r4, r5, r6, lr}
   d76b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d76b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d76ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d76be:	bf1d      	ittte	ne
   d76c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d76c4:	ea94 0f0c 	teqne	r4, ip
   d76c8:	ea95 0f0c 	teqne	r5, ip
   d76cc:	f000 f8de 	bleq	d788c <__aeabi_dmul+0x1dc>
   d76d0:	442c      	add	r4, r5
   d76d2:	ea81 0603 	eor.w	r6, r1, r3
   d76d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d76da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d76de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d76e2:	bf18      	it	ne
   d76e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d76e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d76ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d76f0:	d038      	beq.n	d7764 <__aeabi_dmul+0xb4>
   d76f2:	fba0 ce02 	umull	ip, lr, r0, r2
   d76f6:	f04f 0500 	mov.w	r5, #0
   d76fa:	fbe1 e502 	umlal	lr, r5, r1, r2
   d76fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7702:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7706:	f04f 0600 	mov.w	r6, #0
   d770a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d770e:	f09c 0f00 	teq	ip, #0
   d7712:	bf18      	it	ne
   d7714:	f04e 0e01 	orrne.w	lr, lr, #1
   d7718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d771c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7724:	d204      	bcs.n	d7730 <__aeabi_dmul+0x80>
   d7726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d772a:	416d      	adcs	r5, r5
   d772c:	eb46 0606 	adc.w	r6, r6, r6
   d7730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d773c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7748:	bf88      	it	hi
   d774a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d774e:	d81e      	bhi.n	d778e <__aeabi_dmul+0xde>
   d7750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7754:	bf08      	it	eq
   d7756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d775a:	f150 0000 	adcs.w	r0, r0, #0
   d775e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7762:	bd70      	pop	{r4, r5, r6, pc}
   d7764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7768:	ea46 0101 	orr.w	r1, r6, r1
   d776c:	ea40 0002 	orr.w	r0, r0, r2
   d7770:	ea81 0103 	eor.w	r1, r1, r3
   d7774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7778:	bfc2      	ittt	gt
   d777a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d777e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7782:	bd70      	popgt	{r4, r5, r6, pc}
   d7784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7788:	f04f 0e00 	mov.w	lr, #0
   d778c:	3c01      	subs	r4, #1
   d778e:	f300 80ab 	bgt.w	d78e8 <__aeabi_dmul+0x238>
   d7792:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7796:	bfde      	ittt	le
   d7798:	2000      	movle	r0, #0
   d779a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d779e:	bd70      	pople	{r4, r5, r6, pc}
   d77a0:	f1c4 0400 	rsb	r4, r4, #0
   d77a4:	3c20      	subs	r4, #32
   d77a6:	da35      	bge.n	d7814 <__aeabi_dmul+0x164>
   d77a8:	340c      	adds	r4, #12
   d77aa:	dc1b      	bgt.n	d77e4 <__aeabi_dmul+0x134>
   d77ac:	f104 0414 	add.w	r4, r4, #20
   d77b0:	f1c4 0520 	rsb	r5, r4, #32
   d77b4:	fa00 f305 	lsl.w	r3, r0, r5
   d77b8:	fa20 f004 	lsr.w	r0, r0, r4
   d77bc:	fa01 f205 	lsl.w	r2, r1, r5
   d77c0:	ea40 0002 	orr.w	r0, r0, r2
   d77c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d77c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d77cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d77d0:	fa21 f604 	lsr.w	r6, r1, r4
   d77d4:	eb42 0106 	adc.w	r1, r2, r6
   d77d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d77dc:	bf08      	it	eq
   d77de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d77e2:	bd70      	pop	{r4, r5, r6, pc}
   d77e4:	f1c4 040c 	rsb	r4, r4, #12
   d77e8:	f1c4 0520 	rsb	r5, r4, #32
   d77ec:	fa00 f304 	lsl.w	r3, r0, r4
   d77f0:	fa20 f005 	lsr.w	r0, r0, r5
   d77f4:	fa01 f204 	lsl.w	r2, r1, r4
   d77f8:	ea40 0002 	orr.w	r0, r0, r2
   d77fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7804:	f141 0100 	adc.w	r1, r1, #0
   d7808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d780c:	bf08      	it	eq
   d780e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7812:	bd70      	pop	{r4, r5, r6, pc}
   d7814:	f1c4 0520 	rsb	r5, r4, #32
   d7818:	fa00 f205 	lsl.w	r2, r0, r5
   d781c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7820:	fa20 f304 	lsr.w	r3, r0, r4
   d7824:	fa01 f205 	lsl.w	r2, r1, r5
   d7828:	ea43 0302 	orr.w	r3, r3, r2
   d782c:	fa21 f004 	lsr.w	r0, r1, r4
   d7830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7834:	fa21 f204 	lsr.w	r2, r1, r4
   d7838:	ea20 0002 	bic.w	r0, r0, r2
   d783c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7844:	bf08      	it	eq
   d7846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d784a:	bd70      	pop	{r4, r5, r6, pc}
   d784c:	f094 0f00 	teq	r4, #0
   d7850:	d10f      	bne.n	d7872 <__aeabi_dmul+0x1c2>
   d7852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7856:	0040      	lsls	r0, r0, #1
   d7858:	eb41 0101 	adc.w	r1, r1, r1
   d785c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7860:	bf08      	it	eq
   d7862:	3c01      	subeq	r4, #1
   d7864:	d0f7      	beq.n	d7856 <__aeabi_dmul+0x1a6>
   d7866:	ea41 0106 	orr.w	r1, r1, r6
   d786a:	f095 0f00 	teq	r5, #0
   d786e:	bf18      	it	ne
   d7870:	4770      	bxne	lr
   d7872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7876:	0052      	lsls	r2, r2, #1
   d7878:	eb43 0303 	adc.w	r3, r3, r3
   d787c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7880:	bf08      	it	eq
   d7882:	3d01      	subeq	r5, #1
   d7884:	d0f7      	beq.n	d7876 <__aeabi_dmul+0x1c6>
   d7886:	ea43 0306 	orr.w	r3, r3, r6
   d788a:	4770      	bx	lr
   d788c:	ea94 0f0c 	teq	r4, ip
   d7890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7894:	bf18      	it	ne
   d7896:	ea95 0f0c 	teqne	r5, ip
   d789a:	d00c      	beq.n	d78b6 <__aeabi_dmul+0x206>
   d789c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d78a0:	bf18      	it	ne
   d78a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d78a6:	d1d1      	bne.n	d784c <__aeabi_dmul+0x19c>
   d78a8:	ea81 0103 	eor.w	r1, r1, r3
   d78ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d78b0:	f04f 0000 	mov.w	r0, #0
   d78b4:	bd70      	pop	{r4, r5, r6, pc}
   d78b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d78ba:	bf06      	itte	eq
   d78bc:	4610      	moveq	r0, r2
   d78be:	4619      	moveq	r1, r3
   d78c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d78c4:	d019      	beq.n	d78fa <__aeabi_dmul+0x24a>
   d78c6:	ea94 0f0c 	teq	r4, ip
   d78ca:	d102      	bne.n	d78d2 <__aeabi_dmul+0x222>
   d78cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d78d0:	d113      	bne.n	d78fa <__aeabi_dmul+0x24a>
   d78d2:	ea95 0f0c 	teq	r5, ip
   d78d6:	d105      	bne.n	d78e4 <__aeabi_dmul+0x234>
   d78d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d78dc:	bf1c      	itt	ne
   d78de:	4610      	movne	r0, r2
   d78e0:	4619      	movne	r1, r3
   d78e2:	d10a      	bne.n	d78fa <__aeabi_dmul+0x24a>
   d78e4:	ea81 0103 	eor.w	r1, r1, r3
   d78e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d78ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d78f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d78f4:	f04f 0000 	mov.w	r0, #0
   d78f8:	bd70      	pop	{r4, r5, r6, pc}
   d78fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d78fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7902:	bd70      	pop	{r4, r5, r6, pc}

000d7904 <__aeabi_ddiv>:
   d7904:	b570      	push	{r4, r5, r6, lr}
   d7906:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d790a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d790e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7912:	bf1d      	ittte	ne
   d7914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7918:	ea94 0f0c 	teqne	r4, ip
   d791c:	ea95 0f0c 	teqne	r5, ip
   d7920:	f000 f8a7 	bleq	d7a72 <__aeabi_ddiv+0x16e>
   d7924:	eba4 0405 	sub.w	r4, r4, r5
   d7928:	ea81 0e03 	eor.w	lr, r1, r3
   d792c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7930:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7934:	f000 8088 	beq.w	d7a48 <__aeabi_ddiv+0x144>
   d7938:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d793c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7948:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d794c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7954:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d795c:	429d      	cmp	r5, r3
   d795e:	bf08      	it	eq
   d7960:	4296      	cmpeq	r6, r2
   d7962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7966:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d796a:	d202      	bcs.n	d7972 <__aeabi_ddiv+0x6e>
   d796c:	085b      	lsrs	r3, r3, #1
   d796e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7972:	1ab6      	subs	r6, r6, r2
   d7974:	eb65 0503 	sbc.w	r5, r5, r3
   d7978:	085b      	lsrs	r3, r3, #1
   d797a:	ea4f 0232 	mov.w	r2, r2, rrx
   d797e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7986:	ebb6 0e02 	subs.w	lr, r6, r2
   d798a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d798e:	bf22      	ittt	cs
   d7990:	1ab6      	subcs	r6, r6, r2
   d7992:	4675      	movcs	r5, lr
   d7994:	ea40 000c 	orrcs.w	r0, r0, ip
   d7998:	085b      	lsrs	r3, r3, #1
   d799a:	ea4f 0232 	mov.w	r2, r2, rrx
   d799e:	ebb6 0e02 	subs.w	lr, r6, r2
   d79a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79a6:	bf22      	ittt	cs
   d79a8:	1ab6      	subcs	r6, r6, r2
   d79aa:	4675      	movcs	r5, lr
   d79ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d79b0:	085b      	lsrs	r3, r3, #1
   d79b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d79b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d79ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79be:	bf22      	ittt	cs
   d79c0:	1ab6      	subcs	r6, r6, r2
   d79c2:	4675      	movcs	r5, lr
   d79c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d79c8:	085b      	lsrs	r3, r3, #1
   d79ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d79ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d79d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79d6:	bf22      	ittt	cs
   d79d8:	1ab6      	subcs	r6, r6, r2
   d79da:	4675      	movcs	r5, lr
   d79dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d79e0:	ea55 0e06 	orrs.w	lr, r5, r6
   d79e4:	d018      	beq.n	d7a18 <__aeabi_ddiv+0x114>
   d79e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d79ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d79ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d79f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d79f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d79fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d79fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7a02:	d1c0      	bne.n	d7986 <__aeabi_ddiv+0x82>
   d7a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a08:	d10b      	bne.n	d7a22 <__aeabi_ddiv+0x11e>
   d7a0a:	ea41 0100 	orr.w	r1, r1, r0
   d7a0e:	f04f 0000 	mov.w	r0, #0
   d7a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7a16:	e7b6      	b.n	d7986 <__aeabi_ddiv+0x82>
   d7a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a1c:	bf04      	itt	eq
   d7a1e:	4301      	orreq	r1, r0
   d7a20:	2000      	moveq	r0, #0
   d7a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7a26:	bf88      	it	hi
   d7a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7a2c:	f63f aeaf 	bhi.w	d778e <__aeabi_dmul+0xde>
   d7a30:	ebb5 0c03 	subs.w	ip, r5, r3
   d7a34:	bf04      	itt	eq
   d7a36:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7a3e:	f150 0000 	adcs.w	r0, r0, #0
   d7a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a46:	bd70      	pop	{r4, r5, r6, pc}
   d7a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7a54:	bfc2      	ittt	gt
   d7a56:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7a5e:	bd70      	popgt	{r4, r5, r6, pc}
   d7a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a64:	f04f 0e00 	mov.w	lr, #0
   d7a68:	3c01      	subs	r4, #1
   d7a6a:	e690      	b.n	d778e <__aeabi_dmul+0xde>
   d7a6c:	ea45 0e06 	orr.w	lr, r5, r6
   d7a70:	e68d      	b.n	d778e <__aeabi_dmul+0xde>
   d7a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7a76:	ea94 0f0c 	teq	r4, ip
   d7a7a:	bf08      	it	eq
   d7a7c:	ea95 0f0c 	teqeq	r5, ip
   d7a80:	f43f af3b 	beq.w	d78fa <__aeabi_dmul+0x24a>
   d7a84:	ea94 0f0c 	teq	r4, ip
   d7a88:	d10a      	bne.n	d7aa0 <__aeabi_ddiv+0x19c>
   d7a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7a8e:	f47f af34 	bne.w	d78fa <__aeabi_dmul+0x24a>
   d7a92:	ea95 0f0c 	teq	r5, ip
   d7a96:	f47f af25 	bne.w	d78e4 <__aeabi_dmul+0x234>
   d7a9a:	4610      	mov	r0, r2
   d7a9c:	4619      	mov	r1, r3
   d7a9e:	e72c      	b.n	d78fa <__aeabi_dmul+0x24a>
   d7aa0:	ea95 0f0c 	teq	r5, ip
   d7aa4:	d106      	bne.n	d7ab4 <__aeabi_ddiv+0x1b0>
   d7aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7aaa:	f43f aefd 	beq.w	d78a8 <__aeabi_dmul+0x1f8>
   d7aae:	4610      	mov	r0, r2
   d7ab0:	4619      	mov	r1, r3
   d7ab2:	e722      	b.n	d78fa <__aeabi_dmul+0x24a>
   d7ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ab8:	bf18      	it	ne
   d7aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7abe:	f47f aec5 	bne.w	d784c <__aeabi_dmul+0x19c>
   d7ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7ac6:	f47f af0d 	bne.w	d78e4 <__aeabi_dmul+0x234>
   d7aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7ace:	f47f aeeb 	bne.w	d78a8 <__aeabi_dmul+0x1f8>
   d7ad2:	e712      	b.n	d78fa <__aeabi_dmul+0x24a>

000d7ad4 <__gedf2>:
   d7ad4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7ad8:	e006      	b.n	d7ae8 <__cmpdf2+0x4>
   d7ada:	bf00      	nop

000d7adc <__ledf2>:
   d7adc:	f04f 0c01 	mov.w	ip, #1
   d7ae0:	e002      	b.n	d7ae8 <__cmpdf2+0x4>
   d7ae2:	bf00      	nop

000d7ae4 <__cmpdf2>:
   d7ae4:	f04f 0c01 	mov.w	ip, #1
   d7ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7af8:	bf18      	it	ne
   d7afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7afe:	d01b      	beq.n	d7b38 <__cmpdf2+0x54>
   d7b00:	b001      	add	sp, #4
   d7b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7b06:	bf0c      	ite	eq
   d7b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7b0c:	ea91 0f03 	teqne	r1, r3
   d7b10:	bf02      	ittt	eq
   d7b12:	ea90 0f02 	teqeq	r0, r2
   d7b16:	2000      	moveq	r0, #0
   d7b18:	4770      	bxeq	lr
   d7b1a:	f110 0f00 	cmn.w	r0, #0
   d7b1e:	ea91 0f03 	teq	r1, r3
   d7b22:	bf58      	it	pl
   d7b24:	4299      	cmppl	r1, r3
   d7b26:	bf08      	it	eq
   d7b28:	4290      	cmpeq	r0, r2
   d7b2a:	bf2c      	ite	cs
   d7b2c:	17d8      	asrcs	r0, r3, #31
   d7b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7b32:	f040 0001 	orr.w	r0, r0, #1
   d7b36:	4770      	bx	lr
   d7b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b40:	d102      	bne.n	d7b48 <__cmpdf2+0x64>
   d7b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7b46:	d107      	bne.n	d7b58 <__cmpdf2+0x74>
   d7b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b50:	d1d6      	bne.n	d7b00 <__cmpdf2+0x1c>
   d7b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7b56:	d0d3      	beq.n	d7b00 <__cmpdf2+0x1c>
   d7b58:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7b5c:	4770      	bx	lr
   d7b5e:	bf00      	nop

000d7b60 <__aeabi_cdrcmple>:
   d7b60:	4684      	mov	ip, r0
   d7b62:	4610      	mov	r0, r2
   d7b64:	4662      	mov	r2, ip
   d7b66:	468c      	mov	ip, r1
   d7b68:	4619      	mov	r1, r3
   d7b6a:	4663      	mov	r3, ip
   d7b6c:	e000      	b.n	d7b70 <__aeabi_cdcmpeq>
   d7b6e:	bf00      	nop

000d7b70 <__aeabi_cdcmpeq>:
   d7b70:	b501      	push	{r0, lr}
   d7b72:	f7ff ffb7 	bl	d7ae4 <__cmpdf2>
   d7b76:	2800      	cmp	r0, #0
   d7b78:	bf48      	it	mi
   d7b7a:	f110 0f00 	cmnmi.w	r0, #0
   d7b7e:	bd01      	pop	{r0, pc}

000d7b80 <__aeabi_dcmpeq>:
   d7b80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7b84:	f7ff fff4 	bl	d7b70 <__aeabi_cdcmpeq>
   d7b88:	bf0c      	ite	eq
   d7b8a:	2001      	moveq	r0, #1
   d7b8c:	2000      	movne	r0, #0
   d7b8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7b92:	bf00      	nop

000d7b94 <__aeabi_dcmplt>:
   d7b94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7b98:	f7ff ffea 	bl	d7b70 <__aeabi_cdcmpeq>
   d7b9c:	bf34      	ite	cc
   d7b9e:	2001      	movcc	r0, #1
   d7ba0:	2000      	movcs	r0, #0
   d7ba2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7ba6:	bf00      	nop

000d7ba8 <__aeabi_dcmple>:
   d7ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bac:	f7ff ffe0 	bl	d7b70 <__aeabi_cdcmpeq>
   d7bb0:	bf94      	ite	ls
   d7bb2:	2001      	movls	r0, #1
   d7bb4:	2000      	movhi	r0, #0
   d7bb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bba:	bf00      	nop

000d7bbc <__aeabi_dcmpge>:
   d7bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bc0:	f7ff ffce 	bl	d7b60 <__aeabi_cdrcmple>
   d7bc4:	bf94      	ite	ls
   d7bc6:	2001      	movls	r0, #1
   d7bc8:	2000      	movhi	r0, #0
   d7bca:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bce:	bf00      	nop

000d7bd0 <__aeabi_dcmpgt>:
   d7bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bd4:	f7ff ffc4 	bl	d7b60 <__aeabi_cdrcmple>
   d7bd8:	bf34      	ite	cc
   d7bda:	2001      	movcc	r0, #1
   d7bdc:	2000      	movcs	r0, #0
   d7bde:	f85d fb08 	ldr.w	pc, [sp], #8
   d7be2:	bf00      	nop

000d7be4 <__aeabi_d2uiz>:
   d7be4:	004a      	lsls	r2, r1, #1
   d7be6:	d211      	bcs.n	d7c0c <__aeabi_d2uiz+0x28>
   d7be8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7bec:	d211      	bcs.n	d7c12 <__aeabi_d2uiz+0x2e>
   d7bee:	d50d      	bpl.n	d7c0c <__aeabi_d2uiz+0x28>
   d7bf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7bf8:	d40e      	bmi.n	d7c18 <__aeabi_d2uiz+0x34>
   d7bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7c06:	fa23 f002 	lsr.w	r0, r3, r2
   d7c0a:	4770      	bx	lr
   d7c0c:	f04f 0000 	mov.w	r0, #0
   d7c10:	4770      	bx	lr
   d7c12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7c16:	d102      	bne.n	d7c1e <__aeabi_d2uiz+0x3a>
   d7c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7c1c:	4770      	bx	lr
   d7c1e:	f04f 0000 	mov.w	r0, #0
   d7c22:	4770      	bx	lr

000d7c24 <__aeabi_d2f>:
   d7c24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7c28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7c2c:	bf24      	itt	cs
   d7c2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7c32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7c36:	d90d      	bls.n	d7c54 <__aeabi_d2f+0x30>
   d7c38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7c3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7c40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7c44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7c48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7c4c:	bf08      	it	eq
   d7c4e:	f020 0001 	biceq.w	r0, r0, #1
   d7c52:	4770      	bx	lr
   d7c54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7c58:	d121      	bne.n	d7c9e <__aeabi_d2f+0x7a>
   d7c5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7c5e:	bfbc      	itt	lt
   d7c60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7c64:	4770      	bxlt	lr
   d7c66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7c6e:	f1c2 0218 	rsb	r2, r2, #24
   d7c72:	f1c2 0c20 	rsb	ip, r2, #32
   d7c76:	fa10 f30c 	lsls.w	r3, r0, ip
   d7c7a:	fa20 f002 	lsr.w	r0, r0, r2
   d7c7e:	bf18      	it	ne
   d7c80:	f040 0001 	orrne.w	r0, r0, #1
   d7c84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7c88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7c8c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7c90:	ea40 000c 	orr.w	r0, r0, ip
   d7c94:	fa23 f302 	lsr.w	r3, r3, r2
   d7c98:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7c9c:	e7cc      	b.n	d7c38 <__aeabi_d2f+0x14>
   d7c9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7ca2:	d107      	bne.n	d7cb4 <__aeabi_d2f+0x90>
   d7ca4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7ca8:	bf1e      	ittt	ne
   d7caa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7cae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7cb2:	4770      	bxne	lr
   d7cb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7cbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7cc0:	4770      	bx	lr
   d7cc2:	bf00      	nop

000d7cc4 <__aeabi_d2ulz>:
   d7cc4:	b5d0      	push	{r4, r6, r7, lr}
   d7cc6:	4b0c      	ldr	r3, [pc, #48]	; (d7cf8 <__aeabi_d2ulz+0x34>)
   d7cc8:	2200      	movs	r2, #0
   d7cca:	4606      	mov	r6, r0
   d7ccc:	460f      	mov	r7, r1
   d7cce:	f7ff fcef 	bl	d76b0 <__aeabi_dmul>
   d7cd2:	f7ff ff87 	bl	d7be4 <__aeabi_d2uiz>
   d7cd6:	4604      	mov	r4, r0
   d7cd8:	f7ff fc70 	bl	d75bc <__aeabi_ui2d>
   d7cdc:	4b07      	ldr	r3, [pc, #28]	; (d7cfc <__aeabi_d2ulz+0x38>)
   d7cde:	2200      	movs	r2, #0
   d7ce0:	f7ff fce6 	bl	d76b0 <__aeabi_dmul>
   d7ce4:	4602      	mov	r2, r0
   d7ce6:	460b      	mov	r3, r1
   d7ce8:	4630      	mov	r0, r6
   d7cea:	4639      	mov	r1, r7
   d7cec:	f7ff fb28 	bl	d7340 <__aeabi_dsub>
   d7cf0:	f7ff ff78 	bl	d7be4 <__aeabi_d2uiz>
   d7cf4:	4621      	mov	r1, r4
   d7cf6:	bdd0      	pop	{r4, r6, r7, pc}
   d7cf8:	3df00000 	.word	0x3df00000
   d7cfc:	41f00000 	.word	0x41f00000

000d7d00 <asctime_r>:
   d7d00:	b510      	push	{r4, lr}
   d7d02:	460c      	mov	r4, r1
   d7d04:	6941      	ldr	r1, [r0, #20]
   d7d06:	6903      	ldr	r3, [r0, #16]
   d7d08:	6982      	ldr	r2, [r0, #24]
   d7d0a:	b086      	sub	sp, #24
   d7d0c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7d10:	9104      	str	r1, [sp, #16]
   d7d12:	6801      	ldr	r1, [r0, #0]
   d7d14:	9103      	str	r1, [sp, #12]
   d7d16:	6841      	ldr	r1, [r0, #4]
   d7d18:	9102      	str	r1, [sp, #8]
   d7d1a:	6881      	ldr	r1, [r0, #8]
   d7d1c:	9101      	str	r1, [sp, #4]
   d7d1e:	68c1      	ldr	r1, [r0, #12]
   d7d20:	9100      	str	r1, [sp, #0]
   d7d22:	4907      	ldr	r1, [pc, #28]	; (d7d40 <asctime_r+0x40>)
   d7d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7d28:	440b      	add	r3, r1
   d7d2a:	4906      	ldr	r1, [pc, #24]	; (d7d44 <asctime_r+0x44>)
   d7d2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7d30:	440a      	add	r2, r1
   d7d32:	4620      	mov	r0, r4
   d7d34:	4904      	ldr	r1, [pc, #16]	; (d7d48 <asctime_r+0x48>)
   d7d36:	f7fe f89f 	bl	d5e78 <siprintf>
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	b006      	add	sp, #24
   d7d3e:	bd10      	pop	{r4, pc}
   d7d40:	000da2c2 	.word	0x000da2c2
   d7d44:	000da2ad 	.word	0x000da2ad
   d7d48:	000da28d 	.word	0x000da28d

000d7d4c <atof>:
   d7d4c:	2100      	movs	r1, #0
   d7d4e:	f000 bee9 	b.w	d8b24 <strtod>

000d7d52 <atoi>:
   d7d52:	220a      	movs	r2, #10
   d7d54:	2100      	movs	r1, #0
   d7d56:	f000 bf6b 	b.w	d8c30 <strtol>
	...

000d7d5c <__cxa_atexit>:
   d7d5c:	b510      	push	{r4, lr}
   d7d5e:	4c05      	ldr	r4, [pc, #20]	; (d7d74 <__cxa_atexit+0x18>)
   d7d60:	4613      	mov	r3, r2
   d7d62:	b12c      	cbz	r4, d7d70 <__cxa_atexit+0x14>
   d7d64:	460a      	mov	r2, r1
   d7d66:	4601      	mov	r1, r0
   d7d68:	2002      	movs	r0, #2
   d7d6a:	f3af 8000 	nop.w
   d7d6e:	bd10      	pop	{r4, pc}
   d7d70:	4620      	mov	r0, r4
   d7d72:	e7fc      	b.n	d7d6e <__cxa_atexit+0x12>
   d7d74:	00000000 	.word	0x00000000

000d7d78 <memcpy>:
   d7d78:	440a      	add	r2, r1
   d7d7a:	4291      	cmp	r1, r2
   d7d7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7d80:	d100      	bne.n	d7d84 <memcpy+0xc>
   d7d82:	4770      	bx	lr
   d7d84:	b510      	push	{r4, lr}
   d7d86:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7d8e:	4291      	cmp	r1, r2
   d7d90:	d1f9      	bne.n	d7d86 <memcpy+0xe>
   d7d92:	bd10      	pop	{r4, pc}

000d7d94 <memmove>:
   d7d94:	4288      	cmp	r0, r1
   d7d96:	b510      	push	{r4, lr}
   d7d98:	eb01 0402 	add.w	r4, r1, r2
   d7d9c:	d902      	bls.n	d7da4 <memmove+0x10>
   d7d9e:	4284      	cmp	r4, r0
   d7da0:	4623      	mov	r3, r4
   d7da2:	d807      	bhi.n	d7db4 <memmove+0x20>
   d7da4:	1e43      	subs	r3, r0, #1
   d7da6:	42a1      	cmp	r1, r4
   d7da8:	d008      	beq.n	d7dbc <memmove+0x28>
   d7daa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7dae:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7db2:	e7f8      	b.n	d7da6 <memmove+0x12>
   d7db4:	4402      	add	r2, r0
   d7db6:	4601      	mov	r1, r0
   d7db8:	428a      	cmp	r2, r1
   d7dba:	d100      	bne.n	d7dbe <memmove+0x2a>
   d7dbc:	bd10      	pop	{r4, pc}
   d7dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7dc6:	e7f7      	b.n	d7db8 <memmove+0x24>

000d7dc8 <memset>:
   d7dc8:	4402      	add	r2, r0
   d7dca:	4603      	mov	r3, r0
   d7dcc:	4293      	cmp	r3, r2
   d7dce:	d100      	bne.n	d7dd2 <memset+0xa>
   d7dd0:	4770      	bx	lr
   d7dd2:	f803 1b01 	strb.w	r1, [r3], #1
   d7dd6:	e7f9      	b.n	d7dcc <memset+0x4>

000d7dd8 <srand>:
   d7dd8:	b538      	push	{r3, r4, r5, lr}
   d7dda:	4b0d      	ldr	r3, [pc, #52]	; (d7e10 <srand+0x38>)
   d7ddc:	681d      	ldr	r5, [r3, #0]
   d7dde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7de0:	4604      	mov	r4, r0
   d7de2:	b97b      	cbnz	r3, d7e04 <srand+0x2c>
   d7de4:	2018      	movs	r0, #24
   d7de6:	f7fe f82f 	bl	d5e48 <malloc>
   d7dea:	4a0a      	ldr	r2, [pc, #40]	; (d7e14 <srand+0x3c>)
   d7dec:	4b0a      	ldr	r3, [pc, #40]	; (d7e18 <srand+0x40>)
   d7dee:	63a8      	str	r0, [r5, #56]	; 0x38
   d7df0:	e9c0 2300 	strd	r2, r3, [r0]
   d7df4:	4b09      	ldr	r3, [pc, #36]	; (d7e1c <srand+0x44>)
   d7df6:	6083      	str	r3, [r0, #8]
   d7df8:	230b      	movs	r3, #11
   d7dfa:	8183      	strh	r3, [r0, #12]
   d7dfc:	2201      	movs	r2, #1
   d7dfe:	2300      	movs	r3, #0
   d7e00:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e04:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7e06:	2200      	movs	r2, #0
   d7e08:	611c      	str	r4, [r3, #16]
   d7e0a:	615a      	str	r2, [r3, #20]
   d7e0c:	bd38      	pop	{r3, r4, r5, pc}
   d7e0e:	bf00      	nop
   d7e10:	2003e284 	.word	0x2003e284
   d7e14:	abcd330e 	.word	0xabcd330e
   d7e18:	e66d1234 	.word	0xe66d1234
   d7e1c:	0005deec 	.word	0x0005deec

000d7e20 <strcmp>:
   d7e20:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7e24:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7e28:	2a01      	cmp	r2, #1
   d7e2a:	bf28      	it	cs
   d7e2c:	429a      	cmpcs	r2, r3
   d7e2e:	d0f7      	beq.n	d7e20 <strcmp>
   d7e30:	1ad0      	subs	r0, r2, r3
   d7e32:	4770      	bx	lr

000d7e34 <strcpy>:
   d7e34:	4603      	mov	r3, r0
   d7e36:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7e3a:	f803 2b01 	strb.w	r2, [r3], #1
   d7e3e:	2a00      	cmp	r2, #0
   d7e40:	d1f9      	bne.n	d7e36 <strcpy+0x2>
   d7e42:	4770      	bx	lr

000d7e44 <strdup>:
   d7e44:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <strdup+0xc>)
   d7e46:	4601      	mov	r1, r0
   d7e48:	6818      	ldr	r0, [r3, #0]
   d7e4a:	f000 b803 	b.w	d7e54 <_strdup_r>
   d7e4e:	bf00      	nop
   d7e50:	2003e284 	.word	0x2003e284

000d7e54 <_strdup_r>:
   d7e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7e56:	4604      	mov	r4, r0
   d7e58:	4608      	mov	r0, r1
   d7e5a:	460d      	mov	r5, r1
   d7e5c:	f000 f80f 	bl	d7e7e <strlen>
   d7e60:	1c42      	adds	r2, r0, #1
   d7e62:	4611      	mov	r1, r2
   d7e64:	4620      	mov	r0, r4
   d7e66:	9201      	str	r2, [sp, #4]
   d7e68:	f7fe f81e 	bl	d5ea8 <_malloc_r>
   d7e6c:	4604      	mov	r4, r0
   d7e6e:	b118      	cbz	r0, d7e78 <_strdup_r+0x24>
   d7e70:	9a01      	ldr	r2, [sp, #4]
   d7e72:	4629      	mov	r1, r5
   d7e74:	f7ff ff80 	bl	d7d78 <memcpy>
   d7e78:	4620      	mov	r0, r4
   d7e7a:	b003      	add	sp, #12
   d7e7c:	bd30      	pop	{r4, r5, pc}

000d7e7e <strlen>:
   d7e7e:	4603      	mov	r3, r0
   d7e80:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7e84:	2a00      	cmp	r2, #0
   d7e86:	d1fb      	bne.n	d7e80 <strlen+0x2>
   d7e88:	1a18      	subs	r0, r3, r0
   d7e8a:	3801      	subs	r0, #1
   d7e8c:	4770      	bx	lr

000d7e8e <strncmp>:
   d7e8e:	b510      	push	{r4, lr}
   d7e90:	b16a      	cbz	r2, d7eae <strncmp+0x20>
   d7e92:	3901      	subs	r1, #1
   d7e94:	1884      	adds	r4, r0, r2
   d7e96:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7e9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7e9e:	4293      	cmp	r3, r2
   d7ea0:	d103      	bne.n	d7eaa <strncmp+0x1c>
   d7ea2:	42a0      	cmp	r0, r4
   d7ea4:	d001      	beq.n	d7eaa <strncmp+0x1c>
   d7ea6:	2b00      	cmp	r3, #0
   d7ea8:	d1f5      	bne.n	d7e96 <strncmp+0x8>
   d7eaa:	1a98      	subs	r0, r3, r2
   d7eac:	bd10      	pop	{r4, pc}
   d7eae:	4610      	mov	r0, r2
   d7eb0:	e7fc      	b.n	d7eac <strncmp+0x1e>

000d7eb2 <strncpy>:
   d7eb2:	b510      	push	{r4, lr}
   d7eb4:	3901      	subs	r1, #1
   d7eb6:	4603      	mov	r3, r0
   d7eb8:	b132      	cbz	r2, d7ec8 <strncpy+0x16>
   d7eba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7ebe:	f803 4b01 	strb.w	r4, [r3], #1
   d7ec2:	3a01      	subs	r2, #1
   d7ec4:	2c00      	cmp	r4, #0
   d7ec6:	d1f7      	bne.n	d7eb8 <strncpy+0x6>
   d7ec8:	441a      	add	r2, r3
   d7eca:	2100      	movs	r1, #0
   d7ecc:	4293      	cmp	r3, r2
   d7ece:	d100      	bne.n	d7ed2 <strncpy+0x20>
   d7ed0:	bd10      	pop	{r4, pc}
   d7ed2:	f803 1b01 	strb.w	r1, [r3], #1
   d7ed6:	e7f9      	b.n	d7ecc <strncpy+0x1a>

000d7ed8 <sulp>:
   d7ed8:	b570      	push	{r4, r5, r6, lr}
   d7eda:	4604      	mov	r4, r0
   d7edc:	460d      	mov	r5, r1
   d7ede:	ec45 4b10 	vmov	d0, r4, r5
   d7ee2:	4616      	mov	r6, r2
   d7ee4:	f001 fd1a 	bl	d991c <__ulp>
   d7ee8:	ec51 0b10 	vmov	r0, r1, d0
   d7eec:	b17e      	cbz	r6, d7f0e <sulp+0x36>
   d7eee:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7ef6:	2b00      	cmp	r3, #0
   d7ef8:	dd09      	ble.n	d7f0e <sulp+0x36>
   d7efa:	051b      	lsls	r3, r3, #20
   d7efc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7f00:	2400      	movs	r4, #0
   d7f02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7f06:	4622      	mov	r2, r4
   d7f08:	462b      	mov	r3, r5
   d7f0a:	f7ff fbd1 	bl	d76b0 <__aeabi_dmul>
   d7f0e:	bd70      	pop	{r4, r5, r6, pc}

000d7f10 <_strtod_l>:
   d7f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f14:	b0a3      	sub	sp, #140	; 0x8c
   d7f16:	461f      	mov	r7, r3
   d7f18:	2300      	movs	r3, #0
   d7f1a:	931e      	str	r3, [sp, #120]	; 0x78
   d7f1c:	4ba4      	ldr	r3, [pc, #656]	; (d81b0 <_strtod_l+0x2a0>)
   d7f1e:	9219      	str	r2, [sp, #100]	; 0x64
   d7f20:	681b      	ldr	r3, [r3, #0]
   d7f22:	9307      	str	r3, [sp, #28]
   d7f24:	4604      	mov	r4, r0
   d7f26:	4618      	mov	r0, r3
   d7f28:	4688      	mov	r8, r1
   d7f2a:	f7ff ffa8 	bl	d7e7e <strlen>
   d7f2e:	f04f 0a00 	mov.w	sl, #0
   d7f32:	4605      	mov	r5, r0
   d7f34:	f04f 0b00 	mov.w	fp, #0
   d7f38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7f3e:	781a      	ldrb	r2, [r3, #0]
   d7f40:	2a2b      	cmp	r2, #43	; 0x2b
   d7f42:	d04c      	beq.n	d7fde <_strtod_l+0xce>
   d7f44:	d839      	bhi.n	d7fba <_strtod_l+0xaa>
   d7f46:	2a0d      	cmp	r2, #13
   d7f48:	d832      	bhi.n	d7fb0 <_strtod_l+0xa0>
   d7f4a:	2a08      	cmp	r2, #8
   d7f4c:	d832      	bhi.n	d7fb4 <_strtod_l+0xa4>
   d7f4e:	2a00      	cmp	r2, #0
   d7f50:	d03c      	beq.n	d7fcc <_strtod_l+0xbc>
   d7f52:	2300      	movs	r3, #0
   d7f54:	930e      	str	r3, [sp, #56]	; 0x38
   d7f56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d7f58:	7833      	ldrb	r3, [r6, #0]
   d7f5a:	2b30      	cmp	r3, #48	; 0x30
   d7f5c:	f040 80b4 	bne.w	d80c8 <_strtod_l+0x1b8>
   d7f60:	7873      	ldrb	r3, [r6, #1]
   d7f62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d7f66:	2b58      	cmp	r3, #88	; 0x58
   d7f68:	d16c      	bne.n	d8044 <_strtod_l+0x134>
   d7f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	ab1e      	add	r3, sp, #120	; 0x78
   d7f70:	9702      	str	r7, [sp, #8]
   d7f72:	9300      	str	r3, [sp, #0]
   d7f74:	4a8f      	ldr	r2, [pc, #572]	; (d81b4 <_strtod_l+0x2a4>)
   d7f76:	ab1f      	add	r3, sp, #124	; 0x7c
   d7f78:	a91d      	add	r1, sp, #116	; 0x74
   d7f7a:	4620      	mov	r0, r4
   d7f7c:	f000 feca 	bl	d8d14 <__gethex>
   d7f80:	f010 0707 	ands.w	r7, r0, #7
   d7f84:	4605      	mov	r5, r0
   d7f86:	d005      	beq.n	d7f94 <_strtod_l+0x84>
   d7f88:	2f06      	cmp	r7, #6
   d7f8a:	d12a      	bne.n	d7fe2 <_strtod_l+0xd2>
   d7f8c:	3601      	adds	r6, #1
   d7f8e:	2300      	movs	r3, #0
   d7f90:	961d      	str	r6, [sp, #116]	; 0x74
   d7f92:	930e      	str	r3, [sp, #56]	; 0x38
   d7f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7f96:	2b00      	cmp	r3, #0
   d7f98:	f040 8596 	bne.w	d8ac8 <_strtod_l+0xbb8>
   d7f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7f9e:	b1db      	cbz	r3, d7fd8 <_strtod_l+0xc8>
   d7fa0:	4652      	mov	r2, sl
   d7fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7fa6:	ec43 2b10 	vmov	d0, r2, r3
   d7faa:	b023      	add	sp, #140	; 0x8c
   d7fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7fb0:	2a20      	cmp	r2, #32
   d7fb2:	d1ce      	bne.n	d7f52 <_strtod_l+0x42>
   d7fb4:	3301      	adds	r3, #1
   d7fb6:	931d      	str	r3, [sp, #116]	; 0x74
   d7fb8:	e7c0      	b.n	d7f3c <_strtod_l+0x2c>
   d7fba:	2a2d      	cmp	r2, #45	; 0x2d
   d7fbc:	d1c9      	bne.n	d7f52 <_strtod_l+0x42>
   d7fbe:	2201      	movs	r2, #1
   d7fc0:	920e      	str	r2, [sp, #56]	; 0x38
   d7fc2:	1c5a      	adds	r2, r3, #1
   d7fc4:	921d      	str	r2, [sp, #116]	; 0x74
   d7fc6:	785b      	ldrb	r3, [r3, #1]
   d7fc8:	2b00      	cmp	r3, #0
   d7fca:	d1c4      	bne.n	d7f56 <_strtod_l+0x46>
   d7fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7fce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7fd2:	2b00      	cmp	r3, #0
   d7fd4:	f040 8576 	bne.w	d8ac4 <_strtod_l+0xbb4>
   d7fd8:	4652      	mov	r2, sl
   d7fda:	465b      	mov	r3, fp
   d7fdc:	e7e3      	b.n	d7fa6 <_strtod_l+0x96>
   d7fde:	2200      	movs	r2, #0
   d7fe0:	e7ee      	b.n	d7fc0 <_strtod_l+0xb0>
   d7fe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7fe4:	b13a      	cbz	r2, d7ff6 <_strtod_l+0xe6>
   d7fe6:	2135      	movs	r1, #53	; 0x35
   d7fe8:	a820      	add	r0, sp, #128	; 0x80
   d7fea:	f001 fd96 	bl	d9b1a <__copybits>
   d7fee:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	f001 f9cb 	bl	d938c <_Bfree>
   d7ff6:	3f01      	subs	r7, #1
   d7ff8:	2f05      	cmp	r7, #5
   d7ffa:	d807      	bhi.n	d800c <_strtod_l+0xfc>
   d7ffc:	e8df f007 	tbb	[pc, r7]
   d8000:	1d180b0e 	.word	0x1d180b0e
   d8004:	030e      	.short	0x030e
   d8006:	f04f 0b00 	mov.w	fp, #0
   d800a:	46da      	mov	sl, fp
   d800c:	0728      	lsls	r0, r5, #28
   d800e:	d5c1      	bpl.n	d7f94 <_strtod_l+0x84>
   d8010:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8014:	e7be      	b.n	d7f94 <_strtod_l+0x84>
   d8016:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d801a:	e7f7      	b.n	d800c <_strtod_l+0xfc>
   d801c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8020:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8022:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8026:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d802a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d802e:	e7ed      	b.n	d800c <_strtod_l+0xfc>
   d8030:	f8df b184 	ldr.w	fp, [pc, #388]	; d81b8 <_strtod_l+0x2a8>
   d8034:	f04f 0a00 	mov.w	sl, #0
   d8038:	e7e8      	b.n	d800c <_strtod_l+0xfc>
   d803a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d803e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8042:	e7e3      	b.n	d800c <_strtod_l+0xfc>
   d8044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8046:	1c5a      	adds	r2, r3, #1
   d8048:	921d      	str	r2, [sp, #116]	; 0x74
   d804a:	785b      	ldrb	r3, [r3, #1]
   d804c:	2b30      	cmp	r3, #48	; 0x30
   d804e:	d0f9      	beq.n	d8044 <_strtod_l+0x134>
   d8050:	2b00      	cmp	r3, #0
   d8052:	d09f      	beq.n	d7f94 <_strtod_l+0x84>
   d8054:	2301      	movs	r3, #1
   d8056:	f04f 0900 	mov.w	r9, #0
   d805a:	9304      	str	r3, [sp, #16]
   d805c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d805e:	930a      	str	r3, [sp, #40]	; 0x28
   d8060:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8064:	464f      	mov	r7, r9
   d8066:	220a      	movs	r2, #10
   d8068:	981d      	ldr	r0, [sp, #116]	; 0x74
   d806a:	7806      	ldrb	r6, [r0, #0]
   d806c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8070:	b2d9      	uxtb	r1, r3
   d8072:	2909      	cmp	r1, #9
   d8074:	d92a      	bls.n	d80cc <_strtod_l+0x1bc>
   d8076:	9907      	ldr	r1, [sp, #28]
   d8078:	462a      	mov	r2, r5
   d807a:	f7ff ff08 	bl	d7e8e <strncmp>
   d807e:	b398      	cbz	r0, d80e8 <_strtod_l+0x1d8>
   d8080:	2000      	movs	r0, #0
   d8082:	4633      	mov	r3, r6
   d8084:	463d      	mov	r5, r7
   d8086:	9007      	str	r0, [sp, #28]
   d8088:	4602      	mov	r2, r0
   d808a:	2b65      	cmp	r3, #101	; 0x65
   d808c:	d001      	beq.n	d8092 <_strtod_l+0x182>
   d808e:	2b45      	cmp	r3, #69	; 0x45
   d8090:	d118      	bne.n	d80c4 <_strtod_l+0x1b4>
   d8092:	b91d      	cbnz	r5, d809c <_strtod_l+0x18c>
   d8094:	9b04      	ldr	r3, [sp, #16]
   d8096:	4303      	orrs	r3, r0
   d8098:	d098      	beq.n	d7fcc <_strtod_l+0xbc>
   d809a:	2500      	movs	r5, #0
   d809c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d80a0:	f108 0301 	add.w	r3, r8, #1
   d80a4:	931d      	str	r3, [sp, #116]	; 0x74
   d80a6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d80aa:	2b2b      	cmp	r3, #43	; 0x2b
   d80ac:	d075      	beq.n	d819a <_strtod_l+0x28a>
   d80ae:	2b2d      	cmp	r3, #45	; 0x2d
   d80b0:	d07b      	beq.n	d81aa <_strtod_l+0x29a>
   d80b2:	f04f 0c00 	mov.w	ip, #0
   d80b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d80ba:	2909      	cmp	r1, #9
   d80bc:	f240 8082 	bls.w	d81c4 <_strtod_l+0x2b4>
   d80c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d80c4:	2600      	movs	r6, #0
   d80c6:	e09d      	b.n	d8204 <_strtod_l+0x2f4>
   d80c8:	2300      	movs	r3, #0
   d80ca:	e7c4      	b.n	d8056 <_strtod_l+0x146>
   d80cc:	2f08      	cmp	r7, #8
   d80ce:	bfd8      	it	le
   d80d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d80d2:	f100 0001 	add.w	r0, r0, #1
   d80d6:	bfda      	itte	le
   d80d8:	fb02 3301 	mlale	r3, r2, r1, r3
   d80dc:	9309      	strle	r3, [sp, #36]	; 0x24
   d80de:	fb02 3909 	mlagt	r9, r2, r9, r3
   d80e2:	3701      	adds	r7, #1
   d80e4:	901d      	str	r0, [sp, #116]	; 0x74
   d80e6:	e7bf      	b.n	d8068 <_strtod_l+0x158>
   d80e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d80ea:	195a      	adds	r2, r3, r5
   d80ec:	921d      	str	r2, [sp, #116]	; 0x74
   d80ee:	5d5b      	ldrb	r3, [r3, r5]
   d80f0:	2f00      	cmp	r7, #0
   d80f2:	d037      	beq.n	d8164 <_strtod_l+0x254>
   d80f4:	9007      	str	r0, [sp, #28]
   d80f6:	463d      	mov	r5, r7
   d80f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d80fc:	2a09      	cmp	r2, #9
   d80fe:	d912      	bls.n	d8126 <_strtod_l+0x216>
   d8100:	2201      	movs	r2, #1
   d8102:	e7c2      	b.n	d808a <_strtod_l+0x17a>
   d8104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8106:	1c5a      	adds	r2, r3, #1
   d8108:	921d      	str	r2, [sp, #116]	; 0x74
   d810a:	785b      	ldrb	r3, [r3, #1]
   d810c:	3001      	adds	r0, #1
   d810e:	2b30      	cmp	r3, #48	; 0x30
   d8110:	d0f8      	beq.n	d8104 <_strtod_l+0x1f4>
   d8112:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8116:	2a08      	cmp	r2, #8
   d8118:	f200 84db 	bhi.w	d8ad2 <_strtod_l+0xbc2>
   d811c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d811e:	9007      	str	r0, [sp, #28]
   d8120:	2000      	movs	r0, #0
   d8122:	920a      	str	r2, [sp, #40]	; 0x28
   d8124:	4605      	mov	r5, r0
   d8126:	3b30      	subs	r3, #48	; 0x30
   d8128:	f100 0201 	add.w	r2, r0, #1
   d812c:	d014      	beq.n	d8158 <_strtod_l+0x248>
   d812e:	9907      	ldr	r1, [sp, #28]
   d8130:	4411      	add	r1, r2
   d8132:	9107      	str	r1, [sp, #28]
   d8134:	462a      	mov	r2, r5
   d8136:	eb00 0e05 	add.w	lr, r0, r5
   d813a:	210a      	movs	r1, #10
   d813c:	4572      	cmp	r2, lr
   d813e:	d113      	bne.n	d8168 <_strtod_l+0x258>
   d8140:	182a      	adds	r2, r5, r0
   d8142:	2a08      	cmp	r2, #8
   d8144:	f105 0501 	add.w	r5, r5, #1
   d8148:	4405      	add	r5, r0
   d814a:	dc1c      	bgt.n	d8186 <_strtod_l+0x276>
   d814c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d814e:	220a      	movs	r2, #10
   d8150:	fb02 3301 	mla	r3, r2, r1, r3
   d8154:	9309      	str	r3, [sp, #36]	; 0x24
   d8156:	2200      	movs	r2, #0
   d8158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d815a:	1c59      	adds	r1, r3, #1
   d815c:	911d      	str	r1, [sp, #116]	; 0x74
   d815e:	785b      	ldrb	r3, [r3, #1]
   d8160:	4610      	mov	r0, r2
   d8162:	e7c9      	b.n	d80f8 <_strtod_l+0x1e8>
   d8164:	4638      	mov	r0, r7
   d8166:	e7d2      	b.n	d810e <_strtod_l+0x1fe>
   d8168:	2a08      	cmp	r2, #8
   d816a:	dc04      	bgt.n	d8176 <_strtod_l+0x266>
   d816c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d816e:	434e      	muls	r6, r1
   d8170:	9609      	str	r6, [sp, #36]	; 0x24
   d8172:	3201      	adds	r2, #1
   d8174:	e7e2      	b.n	d813c <_strtod_l+0x22c>
   d8176:	f102 0c01 	add.w	ip, r2, #1
   d817a:	f1bc 0f10 	cmp.w	ip, #16
   d817e:	bfd8      	it	le
   d8180:	fb01 f909 	mulle.w	r9, r1, r9
   d8184:	e7f5      	b.n	d8172 <_strtod_l+0x262>
   d8186:	2d10      	cmp	r5, #16
   d8188:	bfdc      	itt	le
   d818a:	220a      	movle	r2, #10
   d818c:	fb02 3909 	mlale	r9, r2, r9, r3
   d8190:	e7e1      	b.n	d8156 <_strtod_l+0x246>
   d8192:	2300      	movs	r3, #0
   d8194:	9307      	str	r3, [sp, #28]
   d8196:	2201      	movs	r2, #1
   d8198:	e77c      	b.n	d8094 <_strtod_l+0x184>
   d819a:	f04f 0c00 	mov.w	ip, #0
   d819e:	f108 0302 	add.w	r3, r8, #2
   d81a2:	931d      	str	r3, [sp, #116]	; 0x74
   d81a4:	f898 3002 	ldrb.w	r3, [r8, #2]
   d81a8:	e785      	b.n	d80b6 <_strtod_l+0x1a6>
   d81aa:	f04f 0c01 	mov.w	ip, #1
   d81ae:	e7f6      	b.n	d819e <_strtod_l+0x28e>
   d81b0:	000da44c 	.word	0x000da44c
   d81b4:	000da2f4 	.word	0x000da2f4
   d81b8:	7ff00000 	.word	0x7ff00000
   d81bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d81be:	1c59      	adds	r1, r3, #1
   d81c0:	911d      	str	r1, [sp, #116]	; 0x74
   d81c2:	785b      	ldrb	r3, [r3, #1]
   d81c4:	2b30      	cmp	r3, #48	; 0x30
   d81c6:	d0f9      	beq.n	d81bc <_strtod_l+0x2ac>
   d81c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d81cc:	2908      	cmp	r1, #8
   d81ce:	f63f af79 	bhi.w	d80c4 <_strtod_l+0x1b4>
   d81d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d81d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d81d8:	9308      	str	r3, [sp, #32]
   d81da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d81dc:	1c59      	adds	r1, r3, #1
   d81de:	911d      	str	r1, [sp, #116]	; 0x74
   d81e0:	785b      	ldrb	r3, [r3, #1]
   d81e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d81e6:	2e09      	cmp	r6, #9
   d81e8:	d937      	bls.n	d825a <_strtod_l+0x34a>
   d81ea:	9e08      	ldr	r6, [sp, #32]
   d81ec:	1b89      	subs	r1, r1, r6
   d81ee:	2908      	cmp	r1, #8
   d81f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d81f4:	dc02      	bgt.n	d81fc <_strtod_l+0x2ec>
   d81f6:	4576      	cmp	r6, lr
   d81f8:	bfa8      	it	ge
   d81fa:	4676      	movge	r6, lr
   d81fc:	f1bc 0f00 	cmp.w	ip, #0
   d8200:	d000      	beq.n	d8204 <_strtod_l+0x2f4>
   d8202:	4276      	negs	r6, r6
   d8204:	2d00      	cmp	r5, #0
   d8206:	d14f      	bne.n	d82a8 <_strtod_l+0x398>
   d8208:	9904      	ldr	r1, [sp, #16]
   d820a:	4301      	orrs	r1, r0
   d820c:	f47f aec2 	bne.w	d7f94 <_strtod_l+0x84>
   d8210:	2a00      	cmp	r2, #0
   d8212:	f47f aedb 	bne.w	d7fcc <_strtod_l+0xbc>
   d8216:	2b69      	cmp	r3, #105	; 0x69
   d8218:	d027      	beq.n	d826a <_strtod_l+0x35a>
   d821a:	dc24      	bgt.n	d8266 <_strtod_l+0x356>
   d821c:	2b49      	cmp	r3, #73	; 0x49
   d821e:	d024      	beq.n	d826a <_strtod_l+0x35a>
   d8220:	2b4e      	cmp	r3, #78	; 0x4e
   d8222:	f47f aed3 	bne.w	d7fcc <_strtod_l+0xbc>
   d8226:	499e      	ldr	r1, [pc, #632]	; (d84a0 <_strtod_l+0x590>)
   d8228:	a81d      	add	r0, sp, #116	; 0x74
   d822a:	f000 ffb9 	bl	d91a0 <__match>
   d822e:	2800      	cmp	r0, #0
   d8230:	f43f aecc 	beq.w	d7fcc <_strtod_l+0xbc>
   d8234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8236:	781b      	ldrb	r3, [r3, #0]
   d8238:	2b28      	cmp	r3, #40	; 0x28
   d823a:	d12d      	bne.n	d8298 <_strtod_l+0x388>
   d823c:	4999      	ldr	r1, [pc, #612]	; (d84a4 <_strtod_l+0x594>)
   d823e:	aa20      	add	r2, sp, #128	; 0x80
   d8240:	a81d      	add	r0, sp, #116	; 0x74
   d8242:	f000 ffc1 	bl	d91c8 <__hexnan>
   d8246:	2805      	cmp	r0, #5
   d8248:	d126      	bne.n	d8298 <_strtod_l+0x388>
   d824a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d824c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d8250:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8254:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8258:	e69c      	b.n	d7f94 <_strtod_l+0x84>
   d825a:	210a      	movs	r1, #10
   d825c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d8260:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8264:	e7b9      	b.n	d81da <_strtod_l+0x2ca>
   d8266:	2b6e      	cmp	r3, #110	; 0x6e
   d8268:	e7db      	b.n	d8222 <_strtod_l+0x312>
   d826a:	498f      	ldr	r1, [pc, #572]	; (d84a8 <_strtod_l+0x598>)
   d826c:	a81d      	add	r0, sp, #116	; 0x74
   d826e:	f000 ff97 	bl	d91a0 <__match>
   d8272:	2800      	cmp	r0, #0
   d8274:	f43f aeaa 	beq.w	d7fcc <_strtod_l+0xbc>
   d8278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d827a:	498c      	ldr	r1, [pc, #560]	; (d84ac <_strtod_l+0x59c>)
   d827c:	3b01      	subs	r3, #1
   d827e:	a81d      	add	r0, sp, #116	; 0x74
   d8280:	931d      	str	r3, [sp, #116]	; 0x74
   d8282:	f000 ff8d 	bl	d91a0 <__match>
   d8286:	b910      	cbnz	r0, d828e <_strtod_l+0x37e>
   d8288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d828a:	3301      	adds	r3, #1
   d828c:	931d      	str	r3, [sp, #116]	; 0x74
   d828e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d84bc <_strtod_l+0x5ac>
   d8292:	f04f 0a00 	mov.w	sl, #0
   d8296:	e67d      	b.n	d7f94 <_strtod_l+0x84>
   d8298:	4885      	ldr	r0, [pc, #532]	; (d84b0 <_strtod_l+0x5a0>)
   d829a:	f001 fc91 	bl	d9bc0 <nan>
   d829e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d82a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d82a6:	e675      	b.n	d7f94 <_strtod_l+0x84>
   d82a8:	9b07      	ldr	r3, [sp, #28]
   d82aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   d82ac:	1af3      	subs	r3, r6, r3
   d82ae:	2f00      	cmp	r7, #0
   d82b0:	bf08      	it	eq
   d82b2:	462f      	moveq	r7, r5
   d82b4:	2d10      	cmp	r5, #16
   d82b6:	9308      	str	r3, [sp, #32]
   d82b8:	46a8      	mov	r8, r5
   d82ba:	bfa8      	it	ge
   d82bc:	f04f 0810 	movge.w	r8, #16
   d82c0:	f7ff f97c 	bl	d75bc <__aeabi_ui2d>
   d82c4:	2d09      	cmp	r5, #9
   d82c6:	4682      	mov	sl, r0
   d82c8:	468b      	mov	fp, r1
   d82ca:	dd13      	ble.n	d82f4 <_strtod_l+0x3e4>
   d82cc:	4b79      	ldr	r3, [pc, #484]	; (d84b4 <_strtod_l+0x5a4>)
   d82ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d82d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d82d6:	f7ff f9eb 	bl	d76b0 <__aeabi_dmul>
   d82da:	4682      	mov	sl, r0
   d82dc:	4648      	mov	r0, r9
   d82de:	468b      	mov	fp, r1
   d82e0:	f7ff f96c 	bl	d75bc <__aeabi_ui2d>
   d82e4:	4602      	mov	r2, r0
   d82e6:	460b      	mov	r3, r1
   d82e8:	4650      	mov	r0, sl
   d82ea:	4659      	mov	r1, fp
   d82ec:	f7ff f82a 	bl	d7344 <__adddf3>
   d82f0:	4682      	mov	sl, r0
   d82f2:	468b      	mov	fp, r1
   d82f4:	2d0f      	cmp	r5, #15
   d82f6:	dc38      	bgt.n	d836a <_strtod_l+0x45a>
   d82f8:	9b08      	ldr	r3, [sp, #32]
   d82fa:	2b00      	cmp	r3, #0
   d82fc:	f43f ae4a 	beq.w	d7f94 <_strtod_l+0x84>
   d8300:	dd24      	ble.n	d834c <_strtod_l+0x43c>
   d8302:	2b16      	cmp	r3, #22
   d8304:	dc0b      	bgt.n	d831e <_strtod_l+0x40e>
   d8306:	4d6b      	ldr	r5, [pc, #428]	; (d84b4 <_strtod_l+0x5a4>)
   d8308:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d830c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d8310:	4652      	mov	r2, sl
   d8312:	465b      	mov	r3, fp
   d8314:	f7ff f9cc 	bl	d76b0 <__aeabi_dmul>
   d8318:	4682      	mov	sl, r0
   d831a:	468b      	mov	fp, r1
   d831c:	e63a      	b.n	d7f94 <_strtod_l+0x84>
   d831e:	9a08      	ldr	r2, [sp, #32]
   d8320:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8324:	4293      	cmp	r3, r2
   d8326:	db20      	blt.n	d836a <_strtod_l+0x45a>
   d8328:	4c62      	ldr	r4, [pc, #392]	; (d84b4 <_strtod_l+0x5a4>)
   d832a:	f1c5 050f 	rsb	r5, r5, #15
   d832e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8332:	4652      	mov	r2, sl
   d8334:	465b      	mov	r3, fp
   d8336:	e9d1 0100 	ldrd	r0, r1, [r1]
   d833a:	f7ff f9b9 	bl	d76b0 <__aeabi_dmul>
   d833e:	9b08      	ldr	r3, [sp, #32]
   d8340:	1b5d      	subs	r5, r3, r5
   d8342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8346:	e9d4 2300 	ldrd	r2, r3, [r4]
   d834a:	e7e3      	b.n	d8314 <_strtod_l+0x404>
   d834c:	9b08      	ldr	r3, [sp, #32]
   d834e:	3316      	adds	r3, #22
   d8350:	db0b      	blt.n	d836a <_strtod_l+0x45a>
   d8352:	9b07      	ldr	r3, [sp, #28]
   d8354:	4a57      	ldr	r2, [pc, #348]	; (d84b4 <_strtod_l+0x5a4>)
   d8356:	1b9e      	subs	r6, r3, r6
   d8358:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d835c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8360:	4650      	mov	r0, sl
   d8362:	4659      	mov	r1, fp
   d8364:	f7ff face 	bl	d7904 <__aeabi_ddiv>
   d8368:	e7d6      	b.n	d8318 <_strtod_l+0x408>
   d836a:	9b08      	ldr	r3, [sp, #32]
   d836c:	eba5 0808 	sub.w	r8, r5, r8
   d8370:	4498      	add	r8, r3
   d8372:	f1b8 0f00 	cmp.w	r8, #0
   d8376:	dd71      	ble.n	d845c <_strtod_l+0x54c>
   d8378:	f018 030f 	ands.w	r3, r8, #15
   d837c:	d00a      	beq.n	d8394 <_strtod_l+0x484>
   d837e:	494d      	ldr	r1, [pc, #308]	; (d84b4 <_strtod_l+0x5a4>)
   d8380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d8384:	4652      	mov	r2, sl
   d8386:	465b      	mov	r3, fp
   d8388:	e9d1 0100 	ldrd	r0, r1, [r1]
   d838c:	f7ff f990 	bl	d76b0 <__aeabi_dmul>
   d8390:	4682      	mov	sl, r0
   d8392:	468b      	mov	fp, r1
   d8394:	f038 080f 	bics.w	r8, r8, #15
   d8398:	d04d      	beq.n	d8436 <_strtod_l+0x526>
   d839a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d839e:	dd22      	ble.n	d83e6 <_strtod_l+0x4d6>
   d83a0:	2500      	movs	r5, #0
   d83a2:	462e      	mov	r6, r5
   d83a4:	9509      	str	r5, [sp, #36]	; 0x24
   d83a6:	9507      	str	r5, [sp, #28]
   d83a8:	2322      	movs	r3, #34	; 0x22
   d83aa:	f8df b110 	ldr.w	fp, [pc, #272]	; d84bc <_strtod_l+0x5ac>
   d83ae:	6023      	str	r3, [r4, #0]
   d83b0:	f04f 0a00 	mov.w	sl, #0
   d83b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d83b6:	2b00      	cmp	r3, #0
   d83b8:	f43f adec 	beq.w	d7f94 <_strtod_l+0x84>
   d83bc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d83be:	4620      	mov	r0, r4
   d83c0:	f000 ffe4 	bl	d938c <_Bfree>
   d83c4:	9907      	ldr	r1, [sp, #28]
   d83c6:	4620      	mov	r0, r4
   d83c8:	f000 ffe0 	bl	d938c <_Bfree>
   d83cc:	4631      	mov	r1, r6
   d83ce:	4620      	mov	r0, r4
   d83d0:	f000 ffdc 	bl	d938c <_Bfree>
   d83d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d83d6:	4620      	mov	r0, r4
   d83d8:	f000 ffd8 	bl	d938c <_Bfree>
   d83dc:	4629      	mov	r1, r5
   d83de:	4620      	mov	r0, r4
   d83e0:	f000 ffd4 	bl	d938c <_Bfree>
   d83e4:	e5d6      	b.n	d7f94 <_strtod_l+0x84>
   d83e6:	2300      	movs	r3, #0
   d83e8:	ea4f 1828 	mov.w	r8, r8, asr #4
   d83ec:	4650      	mov	r0, sl
   d83ee:	4659      	mov	r1, fp
   d83f0:	4699      	mov	r9, r3
   d83f2:	f1b8 0f01 	cmp.w	r8, #1
   d83f6:	dc21      	bgt.n	d843c <_strtod_l+0x52c>
   d83f8:	b10b      	cbz	r3, d83fe <_strtod_l+0x4ee>
   d83fa:	4682      	mov	sl, r0
   d83fc:	468b      	mov	fp, r1
   d83fe:	4b2e      	ldr	r3, [pc, #184]	; (d84b8 <_strtod_l+0x5a8>)
   d8400:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8404:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d8408:	4652      	mov	r2, sl
   d840a:	465b      	mov	r3, fp
   d840c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8410:	f7ff f94e 	bl	d76b0 <__aeabi_dmul>
   d8414:	4b29      	ldr	r3, [pc, #164]	; (d84bc <_strtod_l+0x5ac>)
   d8416:	460a      	mov	r2, r1
   d8418:	400b      	ands	r3, r1
   d841a:	4929      	ldr	r1, [pc, #164]	; (d84c0 <_strtod_l+0x5b0>)
   d841c:	428b      	cmp	r3, r1
   d841e:	4682      	mov	sl, r0
   d8420:	d8be      	bhi.n	d83a0 <_strtod_l+0x490>
   d8422:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8426:	428b      	cmp	r3, r1
   d8428:	bf86      	itte	hi
   d842a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d84c4 <_strtod_l+0x5b4>
   d842e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d8432:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8436:	2300      	movs	r3, #0
   d8438:	9304      	str	r3, [sp, #16]
   d843a:	e081      	b.n	d8540 <_strtod_l+0x630>
   d843c:	f018 0f01 	tst.w	r8, #1
   d8440:	d007      	beq.n	d8452 <_strtod_l+0x542>
   d8442:	4b1d      	ldr	r3, [pc, #116]	; (d84b8 <_strtod_l+0x5a8>)
   d8444:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d8448:	e9d3 2300 	ldrd	r2, r3, [r3]
   d844c:	f7ff f930 	bl	d76b0 <__aeabi_dmul>
   d8450:	2301      	movs	r3, #1
   d8452:	f109 0901 	add.w	r9, r9, #1
   d8456:	ea4f 0868 	mov.w	r8, r8, asr #1
   d845a:	e7ca      	b.n	d83f2 <_strtod_l+0x4e2>
   d845c:	d0eb      	beq.n	d8436 <_strtod_l+0x526>
   d845e:	f1c8 0800 	rsb	r8, r8, #0
   d8462:	f018 020f 	ands.w	r2, r8, #15
   d8466:	d00a      	beq.n	d847e <_strtod_l+0x56e>
   d8468:	4b12      	ldr	r3, [pc, #72]	; (d84b4 <_strtod_l+0x5a4>)
   d846a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d846e:	4650      	mov	r0, sl
   d8470:	4659      	mov	r1, fp
   d8472:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8476:	f7ff fa45 	bl	d7904 <__aeabi_ddiv>
   d847a:	4682      	mov	sl, r0
   d847c:	468b      	mov	fp, r1
   d847e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d8482:	d0d8      	beq.n	d8436 <_strtod_l+0x526>
   d8484:	f1b8 0f1f 	cmp.w	r8, #31
   d8488:	dd1e      	ble.n	d84c8 <_strtod_l+0x5b8>
   d848a:	2500      	movs	r5, #0
   d848c:	462e      	mov	r6, r5
   d848e:	9509      	str	r5, [sp, #36]	; 0x24
   d8490:	9507      	str	r5, [sp, #28]
   d8492:	2322      	movs	r3, #34	; 0x22
   d8494:	f04f 0a00 	mov.w	sl, #0
   d8498:	f04f 0b00 	mov.w	fp, #0
   d849c:	6023      	str	r3, [r4, #0]
   d849e:	e789      	b.n	d83b4 <_strtod_l+0x4a4>
   d84a0:	000da2ef 	.word	0x000da2ef
   d84a4:	000da308 	.word	0x000da308
   d84a8:	000da2e6 	.word	0x000da2e6
   d84ac:	000da2e9 	.word	0x000da2e9
   d84b0:	000da2ac 	.word	0x000da2ac
   d84b4:	000da488 	.word	0x000da488
   d84b8:	000da460 	.word	0x000da460
   d84bc:	7ff00000 	.word	0x7ff00000
   d84c0:	7ca00000 	.word	0x7ca00000
   d84c4:	7fefffff 	.word	0x7fefffff
   d84c8:	f018 0310 	ands.w	r3, r8, #16
   d84cc:	bf18      	it	ne
   d84ce:	236a      	movne	r3, #106	; 0x6a
   d84d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d8888 <_strtod_l+0x978>
   d84d4:	9304      	str	r3, [sp, #16]
   d84d6:	4650      	mov	r0, sl
   d84d8:	4659      	mov	r1, fp
   d84da:	2300      	movs	r3, #0
   d84dc:	f018 0f01 	tst.w	r8, #1
   d84e0:	d004      	beq.n	d84ec <_strtod_l+0x5dc>
   d84e2:	e9d9 2300 	ldrd	r2, r3, [r9]
   d84e6:	f7ff f8e3 	bl	d76b0 <__aeabi_dmul>
   d84ea:	2301      	movs	r3, #1
   d84ec:	ea5f 0868 	movs.w	r8, r8, asr #1
   d84f0:	f109 0908 	add.w	r9, r9, #8
   d84f4:	d1f2      	bne.n	d84dc <_strtod_l+0x5cc>
   d84f6:	b10b      	cbz	r3, d84fc <_strtod_l+0x5ec>
   d84f8:	4682      	mov	sl, r0
   d84fa:	468b      	mov	fp, r1
   d84fc:	9b04      	ldr	r3, [sp, #16]
   d84fe:	b1bb      	cbz	r3, d8530 <_strtod_l+0x620>
   d8500:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8504:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8508:	2b00      	cmp	r3, #0
   d850a:	4659      	mov	r1, fp
   d850c:	dd10      	ble.n	d8530 <_strtod_l+0x620>
   d850e:	2b1f      	cmp	r3, #31
   d8510:	f340 8128 	ble.w	d8764 <_strtod_l+0x854>
   d8514:	2b34      	cmp	r3, #52	; 0x34
   d8516:	bfde      	ittt	le
   d8518:	3b20      	suble	r3, #32
   d851a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d851e:	fa02 f303 	lslle.w	r3, r2, r3
   d8522:	f04f 0a00 	mov.w	sl, #0
   d8526:	bfcc      	ite	gt
   d8528:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d852c:	ea03 0b01 	andle.w	fp, r3, r1
   d8530:	2200      	movs	r2, #0
   d8532:	2300      	movs	r3, #0
   d8534:	4650      	mov	r0, sl
   d8536:	4659      	mov	r1, fp
   d8538:	f7ff fb22 	bl	d7b80 <__aeabi_dcmpeq>
   d853c:	2800      	cmp	r0, #0
   d853e:	d1a4      	bne.n	d848a <_strtod_l+0x57a>
   d8540:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8542:	9300      	str	r3, [sp, #0]
   d8544:	990a      	ldr	r1, [sp, #40]	; 0x28
   d8546:	462b      	mov	r3, r5
   d8548:	463a      	mov	r2, r7
   d854a:	4620      	mov	r0, r4
   d854c:	f000 ff73 	bl	d9436 <__s2b>
   d8550:	9009      	str	r0, [sp, #36]	; 0x24
   d8552:	2800      	cmp	r0, #0
   d8554:	f43f af24 	beq.w	d83a0 <_strtod_l+0x490>
   d8558:	9b07      	ldr	r3, [sp, #28]
   d855a:	1b9e      	subs	r6, r3, r6
   d855c:	9b08      	ldr	r3, [sp, #32]
   d855e:	2b00      	cmp	r3, #0
   d8560:	bfb4      	ite	lt
   d8562:	4633      	movlt	r3, r6
   d8564:	2300      	movge	r3, #0
   d8566:	9310      	str	r3, [sp, #64]	; 0x40
   d8568:	9b08      	ldr	r3, [sp, #32]
   d856a:	2500      	movs	r5, #0
   d856c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d8570:	9318      	str	r3, [sp, #96]	; 0x60
   d8572:	462e      	mov	r6, r5
   d8574:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8576:	4620      	mov	r0, r4
   d8578:	6859      	ldr	r1, [r3, #4]
   d857a:	f000 fed3 	bl	d9324 <_Balloc>
   d857e:	9007      	str	r0, [sp, #28]
   d8580:	2800      	cmp	r0, #0
   d8582:	f43f af11 	beq.w	d83a8 <_strtod_l+0x498>
   d8586:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8588:	691a      	ldr	r2, [r3, #16]
   d858a:	3202      	adds	r2, #2
   d858c:	f103 010c 	add.w	r1, r3, #12
   d8590:	0092      	lsls	r2, r2, #2
   d8592:	300c      	adds	r0, #12
   d8594:	f7ff fbf0 	bl	d7d78 <memcpy>
   d8598:	ec4b ab10 	vmov	d0, sl, fp
   d859c:	aa20      	add	r2, sp, #128	; 0x80
   d859e:	a91f      	add	r1, sp, #124	; 0x7c
   d85a0:	4620      	mov	r0, r4
   d85a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d85a6:	f001 fa35 	bl	d9a14 <__d2b>
   d85aa:	901e      	str	r0, [sp, #120]	; 0x78
   d85ac:	2800      	cmp	r0, #0
   d85ae:	f43f aefb 	beq.w	d83a8 <_strtod_l+0x498>
   d85b2:	2101      	movs	r1, #1
   d85b4:	4620      	mov	r0, r4
   d85b6:	f000 ffcc 	bl	d9552 <__i2b>
   d85ba:	4606      	mov	r6, r0
   d85bc:	2800      	cmp	r0, #0
   d85be:	f43f aef3 	beq.w	d83a8 <_strtod_l+0x498>
   d85c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d85c4:	9904      	ldr	r1, [sp, #16]
   d85c6:	2b00      	cmp	r3, #0
   d85c8:	bfab      	itete	ge
   d85ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d85cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d85ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d85d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d85d4:	bfac      	ite	ge
   d85d6:	eb03 0902 	addge.w	r9, r3, r2
   d85da:	1ad7      	sublt	r7, r2, r3
   d85dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d85de:	eba3 0801 	sub.w	r8, r3, r1
   d85e2:	4490      	add	r8, r2
   d85e4:	4ba3      	ldr	r3, [pc, #652]	; (d8874 <_strtod_l+0x964>)
   d85e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d85ea:	4598      	cmp	r8, r3
   d85ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d85f0:	f280 80cc 	bge.w	d878c <_strtod_l+0x87c>
   d85f4:	eba3 0308 	sub.w	r3, r3, r8
   d85f8:	2b1f      	cmp	r3, #31
   d85fa:	eba2 0203 	sub.w	r2, r2, r3
   d85fe:	f04f 0101 	mov.w	r1, #1
   d8602:	f300 80b6 	bgt.w	d8772 <_strtod_l+0x862>
   d8606:	fa01 f303 	lsl.w	r3, r1, r3
   d860a:	9311      	str	r3, [sp, #68]	; 0x44
   d860c:	2300      	movs	r3, #0
   d860e:	930c      	str	r3, [sp, #48]	; 0x30
   d8610:	eb09 0802 	add.w	r8, r9, r2
   d8614:	9b04      	ldr	r3, [sp, #16]
   d8616:	45c1      	cmp	r9, r8
   d8618:	4417      	add	r7, r2
   d861a:	441f      	add	r7, r3
   d861c:	464b      	mov	r3, r9
   d861e:	bfa8      	it	ge
   d8620:	4643      	movge	r3, r8
   d8622:	42bb      	cmp	r3, r7
   d8624:	bfa8      	it	ge
   d8626:	463b      	movge	r3, r7
   d8628:	2b00      	cmp	r3, #0
   d862a:	bfc2      	ittt	gt
   d862c:	eba8 0803 	subgt.w	r8, r8, r3
   d8630:	1aff      	subgt	r7, r7, r3
   d8632:	eba9 0903 	subgt.w	r9, r9, r3
   d8636:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8638:	2b00      	cmp	r3, #0
   d863a:	dd17      	ble.n	d866c <_strtod_l+0x75c>
   d863c:	4631      	mov	r1, r6
   d863e:	461a      	mov	r2, r3
   d8640:	4620      	mov	r0, r4
   d8642:	f001 f82b 	bl	d969c <__pow5mult>
   d8646:	4606      	mov	r6, r0
   d8648:	2800      	cmp	r0, #0
   d864a:	f43f aead 	beq.w	d83a8 <_strtod_l+0x498>
   d864e:	4601      	mov	r1, r0
   d8650:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8652:	4620      	mov	r0, r4
   d8654:	f000 ff86 	bl	d9564 <__multiply>
   d8658:	900f      	str	r0, [sp, #60]	; 0x3c
   d865a:	2800      	cmp	r0, #0
   d865c:	f43f aea4 	beq.w	d83a8 <_strtod_l+0x498>
   d8660:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8662:	4620      	mov	r0, r4
   d8664:	f000 fe92 	bl	d938c <_Bfree>
   d8668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d866a:	931e      	str	r3, [sp, #120]	; 0x78
   d866c:	f1b8 0f00 	cmp.w	r8, #0
   d8670:	f300 8091 	bgt.w	d8796 <_strtod_l+0x886>
   d8674:	9b08      	ldr	r3, [sp, #32]
   d8676:	2b00      	cmp	r3, #0
   d8678:	dd08      	ble.n	d868c <_strtod_l+0x77c>
   d867a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d867c:	9907      	ldr	r1, [sp, #28]
   d867e:	4620      	mov	r0, r4
   d8680:	f001 f80c 	bl	d969c <__pow5mult>
   d8684:	9007      	str	r0, [sp, #28]
   d8686:	2800      	cmp	r0, #0
   d8688:	f43f ae8e 	beq.w	d83a8 <_strtod_l+0x498>
   d868c:	2f00      	cmp	r7, #0
   d868e:	dd08      	ble.n	d86a2 <_strtod_l+0x792>
   d8690:	9907      	ldr	r1, [sp, #28]
   d8692:	463a      	mov	r2, r7
   d8694:	4620      	mov	r0, r4
   d8696:	f001 f84f 	bl	d9738 <__lshift>
   d869a:	9007      	str	r0, [sp, #28]
   d869c:	2800      	cmp	r0, #0
   d869e:	f43f ae83 	beq.w	d83a8 <_strtod_l+0x498>
   d86a2:	f1b9 0f00 	cmp.w	r9, #0
   d86a6:	dd08      	ble.n	d86ba <_strtod_l+0x7aa>
   d86a8:	4631      	mov	r1, r6
   d86aa:	464a      	mov	r2, r9
   d86ac:	4620      	mov	r0, r4
   d86ae:	f001 f843 	bl	d9738 <__lshift>
   d86b2:	4606      	mov	r6, r0
   d86b4:	2800      	cmp	r0, #0
   d86b6:	f43f ae77 	beq.w	d83a8 <_strtod_l+0x498>
   d86ba:	9a07      	ldr	r2, [sp, #28]
   d86bc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d86be:	4620      	mov	r0, r4
   d86c0:	f001 f8b5 	bl	d982e <__mdiff>
   d86c4:	4605      	mov	r5, r0
   d86c6:	2800      	cmp	r0, #0
   d86c8:	f43f ae6e 	beq.w	d83a8 <_strtod_l+0x498>
   d86cc:	68c3      	ldr	r3, [r0, #12]
   d86ce:	930f      	str	r3, [sp, #60]	; 0x3c
   d86d0:	2300      	movs	r3, #0
   d86d2:	60c3      	str	r3, [r0, #12]
   d86d4:	4631      	mov	r1, r6
   d86d6:	f001 f88e 	bl	d97f6 <__mcmp>
   d86da:	2800      	cmp	r0, #0
   d86dc:	da65      	bge.n	d87aa <_strtod_l+0x89a>
   d86de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d86e0:	ea53 030a 	orrs.w	r3, r3, sl
   d86e4:	f040 8087 	bne.w	d87f6 <_strtod_l+0x8e6>
   d86e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d86ec:	2b00      	cmp	r3, #0
   d86ee:	f040 8082 	bne.w	d87f6 <_strtod_l+0x8e6>
   d86f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d86f6:	0d1b      	lsrs	r3, r3, #20
   d86f8:	051b      	lsls	r3, r3, #20
   d86fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d86fe:	d97a      	bls.n	d87f6 <_strtod_l+0x8e6>
   d8700:	696b      	ldr	r3, [r5, #20]
   d8702:	b913      	cbnz	r3, d870a <_strtod_l+0x7fa>
   d8704:	692b      	ldr	r3, [r5, #16]
   d8706:	2b01      	cmp	r3, #1
   d8708:	dd75      	ble.n	d87f6 <_strtod_l+0x8e6>
   d870a:	4629      	mov	r1, r5
   d870c:	2201      	movs	r2, #1
   d870e:	4620      	mov	r0, r4
   d8710:	f001 f812 	bl	d9738 <__lshift>
   d8714:	4631      	mov	r1, r6
   d8716:	4605      	mov	r5, r0
   d8718:	f001 f86d 	bl	d97f6 <__mcmp>
   d871c:	2800      	cmp	r0, #0
   d871e:	dd6a      	ble.n	d87f6 <_strtod_l+0x8e6>
   d8720:	9904      	ldr	r1, [sp, #16]
   d8722:	4a55      	ldr	r2, [pc, #340]	; (d8878 <_strtod_l+0x968>)
   d8724:	465b      	mov	r3, fp
   d8726:	2900      	cmp	r1, #0
   d8728:	f000 8085 	beq.w	d8836 <_strtod_l+0x926>
   d872c:	ea02 010b 	and.w	r1, r2, fp
   d8730:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d8734:	dc7f      	bgt.n	d8836 <_strtod_l+0x926>
   d8736:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d873a:	f77f aeaa 	ble.w	d8492 <_strtod_l+0x582>
   d873e:	4a4f      	ldr	r2, [pc, #316]	; (d887c <_strtod_l+0x96c>)
   d8740:	2300      	movs	r3, #0
   d8742:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d8746:	4650      	mov	r0, sl
   d8748:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d874c:	4659      	mov	r1, fp
   d874e:	f7fe ffaf 	bl	d76b0 <__aeabi_dmul>
   d8752:	460b      	mov	r3, r1
   d8754:	4303      	orrs	r3, r0
   d8756:	bf08      	it	eq
   d8758:	2322      	moveq	r3, #34	; 0x22
   d875a:	4682      	mov	sl, r0
   d875c:	468b      	mov	fp, r1
   d875e:	bf08      	it	eq
   d8760:	6023      	streq	r3, [r4, #0]
   d8762:	e62b      	b.n	d83bc <_strtod_l+0x4ac>
   d8764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8768:	fa02 f303 	lsl.w	r3, r2, r3
   d876c:	ea03 0a0a 	and.w	sl, r3, sl
   d8770:	e6de      	b.n	d8530 <_strtod_l+0x620>
   d8772:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d8776:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d877a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d877e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d8782:	fa01 f308 	lsl.w	r3, r1, r8
   d8786:	930c      	str	r3, [sp, #48]	; 0x30
   d8788:	9111      	str	r1, [sp, #68]	; 0x44
   d878a:	e741      	b.n	d8610 <_strtod_l+0x700>
   d878c:	2300      	movs	r3, #0
   d878e:	930c      	str	r3, [sp, #48]	; 0x30
   d8790:	2301      	movs	r3, #1
   d8792:	9311      	str	r3, [sp, #68]	; 0x44
   d8794:	e73c      	b.n	d8610 <_strtod_l+0x700>
   d8796:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8798:	4642      	mov	r2, r8
   d879a:	4620      	mov	r0, r4
   d879c:	f000 ffcc 	bl	d9738 <__lshift>
   d87a0:	901e      	str	r0, [sp, #120]	; 0x78
   d87a2:	2800      	cmp	r0, #0
   d87a4:	f47f af66 	bne.w	d8674 <_strtod_l+0x764>
   d87a8:	e5fe      	b.n	d83a8 <_strtod_l+0x498>
   d87aa:	465f      	mov	r7, fp
   d87ac:	d16e      	bne.n	d888c <_strtod_l+0x97c>
   d87ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d87b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d87b4:	b342      	cbz	r2, d8808 <_strtod_l+0x8f8>
   d87b6:	4a32      	ldr	r2, [pc, #200]	; (d8880 <_strtod_l+0x970>)
   d87b8:	4293      	cmp	r3, r2
   d87ba:	d128      	bne.n	d880e <_strtod_l+0x8fe>
   d87bc:	9b04      	ldr	r3, [sp, #16]
   d87be:	4650      	mov	r0, sl
   d87c0:	b1eb      	cbz	r3, d87fe <_strtod_l+0x8ee>
   d87c2:	4a2d      	ldr	r2, [pc, #180]	; (d8878 <_strtod_l+0x968>)
   d87c4:	403a      	ands	r2, r7
   d87c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d87ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d87ce:	d819      	bhi.n	d8804 <_strtod_l+0x8f4>
   d87d0:	0d12      	lsrs	r2, r2, #20
   d87d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d87d6:	fa01 f303 	lsl.w	r3, r1, r3
   d87da:	4298      	cmp	r0, r3
   d87dc:	d117      	bne.n	d880e <_strtod_l+0x8fe>
   d87de:	4b29      	ldr	r3, [pc, #164]	; (d8884 <_strtod_l+0x974>)
   d87e0:	429f      	cmp	r7, r3
   d87e2:	d102      	bne.n	d87ea <_strtod_l+0x8da>
   d87e4:	3001      	adds	r0, #1
   d87e6:	f43f addf 	beq.w	d83a8 <_strtod_l+0x498>
   d87ea:	4b23      	ldr	r3, [pc, #140]	; (d8878 <_strtod_l+0x968>)
   d87ec:	403b      	ands	r3, r7
   d87ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d87f2:	f04f 0a00 	mov.w	sl, #0
   d87f6:	9b04      	ldr	r3, [sp, #16]
   d87f8:	2b00      	cmp	r3, #0
   d87fa:	d1a0      	bne.n	d873e <_strtod_l+0x82e>
   d87fc:	e5de      	b.n	d83bc <_strtod_l+0x4ac>
   d87fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8802:	e7ea      	b.n	d87da <_strtod_l+0x8ca>
   d8804:	460b      	mov	r3, r1
   d8806:	e7e8      	b.n	d87da <_strtod_l+0x8ca>
   d8808:	ea53 030a 	orrs.w	r3, r3, sl
   d880c:	d088      	beq.n	d8720 <_strtod_l+0x810>
   d880e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8810:	b1db      	cbz	r3, d884a <_strtod_l+0x93a>
   d8812:	423b      	tst	r3, r7
   d8814:	d0ef      	beq.n	d87f6 <_strtod_l+0x8e6>
   d8816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8818:	9a04      	ldr	r2, [sp, #16]
   d881a:	4650      	mov	r0, sl
   d881c:	4659      	mov	r1, fp
   d881e:	b1c3      	cbz	r3, d8852 <_strtod_l+0x942>
   d8820:	f7ff fb5a 	bl	d7ed8 <sulp>
   d8824:	4602      	mov	r2, r0
   d8826:	460b      	mov	r3, r1
   d8828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d882c:	f7fe fd8a 	bl	d7344 <__adddf3>
   d8830:	4682      	mov	sl, r0
   d8832:	468b      	mov	fp, r1
   d8834:	e7df      	b.n	d87f6 <_strtod_l+0x8e6>
   d8836:	4013      	ands	r3, r2
   d8838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d883c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d8844:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8848:	e7d5      	b.n	d87f6 <_strtod_l+0x8e6>
   d884a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d884c:	ea13 0f0a 	tst.w	r3, sl
   d8850:	e7e0      	b.n	d8814 <_strtod_l+0x904>
   d8852:	f7ff fb41 	bl	d7ed8 <sulp>
   d8856:	4602      	mov	r2, r0
   d8858:	460b      	mov	r3, r1
   d885a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d885e:	f7fe fd6f 	bl	d7340 <__aeabi_dsub>
   d8862:	2200      	movs	r2, #0
   d8864:	2300      	movs	r3, #0
   d8866:	4682      	mov	sl, r0
   d8868:	468b      	mov	fp, r1
   d886a:	f7ff f989 	bl	d7b80 <__aeabi_dcmpeq>
   d886e:	2800      	cmp	r0, #0
   d8870:	d0c1      	beq.n	d87f6 <_strtod_l+0x8e6>
   d8872:	e60e      	b.n	d8492 <_strtod_l+0x582>
   d8874:	fffffc02 	.word	0xfffffc02
   d8878:	7ff00000 	.word	0x7ff00000
   d887c:	39500000 	.word	0x39500000
   d8880:	000fffff 	.word	0x000fffff
   d8884:	7fefffff 	.word	0x7fefffff
   d8888:	000da320 	.word	0x000da320
   d888c:	4631      	mov	r1, r6
   d888e:	4628      	mov	r0, r5
   d8890:	f001 f910 	bl	d9ab4 <__ratio>
   d8894:	ec59 8b10 	vmov	r8, r9, d0
   d8898:	ee10 0a10 	vmov	r0, s0
   d889c:	2200      	movs	r2, #0
   d889e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d88a2:	4649      	mov	r1, r9
   d88a4:	f7ff f980 	bl	d7ba8 <__aeabi_dcmple>
   d88a8:	2800      	cmp	r0, #0
   d88aa:	d07c      	beq.n	d89a6 <_strtod_l+0xa96>
   d88ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d88ae:	2b00      	cmp	r3, #0
   d88b0:	d04c      	beq.n	d894c <_strtod_l+0xa3c>
   d88b2:	4b95      	ldr	r3, [pc, #596]	; (d8b08 <_strtod_l+0xbf8>)
   d88b4:	2200      	movs	r2, #0
   d88b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d88ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8b08 <_strtod_l+0xbf8>
   d88be:	f04f 0800 	mov.w	r8, #0
   d88c2:	4b92      	ldr	r3, [pc, #584]	; (d8b0c <_strtod_l+0xbfc>)
   d88c4:	403b      	ands	r3, r7
   d88c6:	9311      	str	r3, [sp, #68]	; 0x44
   d88c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d88ca:	4b91      	ldr	r3, [pc, #580]	; (d8b10 <_strtod_l+0xc00>)
   d88cc:	429a      	cmp	r2, r3
   d88ce:	f040 80b2 	bne.w	d8a36 <_strtod_l+0xb26>
   d88d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d88d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d88da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d88de:	ec4b ab10 	vmov	d0, sl, fp
   d88e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d88e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d88ea:	f001 f817 	bl	d991c <__ulp>
   d88ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d88f2:	ec53 2b10 	vmov	r2, r3, d0
   d88f6:	f7fe fedb 	bl	d76b0 <__aeabi_dmul>
   d88fa:	4652      	mov	r2, sl
   d88fc:	465b      	mov	r3, fp
   d88fe:	f7fe fd21 	bl	d7344 <__adddf3>
   d8902:	460b      	mov	r3, r1
   d8904:	4981      	ldr	r1, [pc, #516]	; (d8b0c <_strtod_l+0xbfc>)
   d8906:	4a83      	ldr	r2, [pc, #524]	; (d8b14 <_strtod_l+0xc04>)
   d8908:	4019      	ands	r1, r3
   d890a:	4291      	cmp	r1, r2
   d890c:	4682      	mov	sl, r0
   d890e:	d95e      	bls.n	d89ce <_strtod_l+0xabe>
   d8910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8912:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d8916:	4293      	cmp	r3, r2
   d8918:	d103      	bne.n	d8922 <_strtod_l+0xa12>
   d891a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d891c:	3301      	adds	r3, #1
   d891e:	f43f ad43 	beq.w	d83a8 <_strtod_l+0x498>
   d8922:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d8b20 <_strtod_l+0xc10>
   d8926:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d892a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d892c:	4620      	mov	r0, r4
   d892e:	f000 fd2d 	bl	d938c <_Bfree>
   d8932:	9907      	ldr	r1, [sp, #28]
   d8934:	4620      	mov	r0, r4
   d8936:	f000 fd29 	bl	d938c <_Bfree>
   d893a:	4631      	mov	r1, r6
   d893c:	4620      	mov	r0, r4
   d893e:	f000 fd25 	bl	d938c <_Bfree>
   d8942:	4629      	mov	r1, r5
   d8944:	4620      	mov	r0, r4
   d8946:	f000 fd21 	bl	d938c <_Bfree>
   d894a:	e613      	b.n	d8574 <_strtod_l+0x664>
   d894c:	f1ba 0f00 	cmp.w	sl, #0
   d8950:	d11b      	bne.n	d898a <_strtod_l+0xa7a>
   d8952:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8956:	b9f3      	cbnz	r3, d8996 <_strtod_l+0xa86>
   d8958:	4b6b      	ldr	r3, [pc, #428]	; (d8b08 <_strtod_l+0xbf8>)
   d895a:	2200      	movs	r2, #0
   d895c:	4640      	mov	r0, r8
   d895e:	4649      	mov	r1, r9
   d8960:	f7ff f918 	bl	d7b94 <__aeabi_dcmplt>
   d8964:	b9d0      	cbnz	r0, d899c <_strtod_l+0xa8c>
   d8966:	4640      	mov	r0, r8
   d8968:	4649      	mov	r1, r9
   d896a:	4b6b      	ldr	r3, [pc, #428]	; (d8b18 <_strtod_l+0xc08>)
   d896c:	2200      	movs	r2, #0
   d896e:	f7fe fe9f 	bl	d76b0 <__aeabi_dmul>
   d8972:	4680      	mov	r8, r0
   d8974:	4689      	mov	r9, r1
   d8976:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d897a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d897e:	931b      	str	r3, [sp, #108]	; 0x6c
   d8980:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d8984:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d8988:	e79b      	b.n	d88c2 <_strtod_l+0x9b2>
   d898a:	f1ba 0f01 	cmp.w	sl, #1
   d898e:	d102      	bne.n	d8996 <_strtod_l+0xa86>
   d8990:	2f00      	cmp	r7, #0
   d8992:	f43f ad7e 	beq.w	d8492 <_strtod_l+0x582>
   d8996:	4b61      	ldr	r3, [pc, #388]	; (d8b1c <_strtod_l+0xc0c>)
   d8998:	2200      	movs	r2, #0
   d899a:	e78c      	b.n	d88b6 <_strtod_l+0x9a6>
   d899c:	f8df 9178 	ldr.w	r9, [pc, #376]	; d8b18 <_strtod_l+0xc08>
   d89a0:	f04f 0800 	mov.w	r8, #0
   d89a4:	e7e7      	b.n	d8976 <_strtod_l+0xa66>
   d89a6:	4b5c      	ldr	r3, [pc, #368]	; (d8b18 <_strtod_l+0xc08>)
   d89a8:	4640      	mov	r0, r8
   d89aa:	4649      	mov	r1, r9
   d89ac:	2200      	movs	r2, #0
   d89ae:	f7fe fe7f 	bl	d76b0 <__aeabi_dmul>
   d89b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d89b4:	4680      	mov	r8, r0
   d89b6:	4689      	mov	r9, r1
   d89b8:	b933      	cbnz	r3, d89c8 <_strtod_l+0xab8>
   d89ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d89be:	9012      	str	r0, [sp, #72]	; 0x48
   d89c0:	9313      	str	r3, [sp, #76]	; 0x4c
   d89c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d89c6:	e7dd      	b.n	d8984 <_strtod_l+0xa74>
   d89c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d89cc:	e7f9      	b.n	d89c2 <_strtod_l+0xab2>
   d89ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d89d2:	9b04      	ldr	r3, [sp, #16]
   d89d4:	2b00      	cmp	r3, #0
   d89d6:	d1a8      	bne.n	d892a <_strtod_l+0xa1a>
   d89d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d89dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d89de:	0d1b      	lsrs	r3, r3, #20
   d89e0:	051b      	lsls	r3, r3, #20
   d89e2:	429a      	cmp	r2, r3
   d89e4:	d1a1      	bne.n	d892a <_strtod_l+0xa1a>
   d89e6:	4640      	mov	r0, r8
   d89e8:	4649      	mov	r1, r9
   d89ea:	f001 f8ff 	bl	d9bec <__aeabi_d2lz>
   d89ee:	f7fe fe31 	bl	d7654 <__aeabi_l2d>
   d89f2:	4602      	mov	r2, r0
   d89f4:	460b      	mov	r3, r1
   d89f6:	4640      	mov	r0, r8
   d89f8:	4649      	mov	r1, r9
   d89fa:	f7fe fca1 	bl	d7340 <__aeabi_dsub>
   d89fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8a04:	ea43 030a 	orr.w	r3, r3, sl
   d8a08:	4313      	orrs	r3, r2
   d8a0a:	4680      	mov	r8, r0
   d8a0c:	4689      	mov	r9, r1
   d8a0e:	d053      	beq.n	d8ab8 <_strtod_l+0xba8>
   d8a10:	a335      	add	r3, pc, #212	; (adr r3, d8ae8 <_strtod_l+0xbd8>)
   d8a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a16:	f7ff f8bd 	bl	d7b94 <__aeabi_dcmplt>
   d8a1a:	2800      	cmp	r0, #0
   d8a1c:	f47f acce 	bne.w	d83bc <_strtod_l+0x4ac>
   d8a20:	a333      	add	r3, pc, #204	; (adr r3, d8af0 <_strtod_l+0xbe0>)
   d8a22:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a26:	4640      	mov	r0, r8
   d8a28:	4649      	mov	r1, r9
   d8a2a:	f7ff f8d1 	bl	d7bd0 <__aeabi_dcmpgt>
   d8a2e:	2800      	cmp	r0, #0
   d8a30:	f43f af7b 	beq.w	d892a <_strtod_l+0xa1a>
   d8a34:	e4c2      	b.n	d83bc <_strtod_l+0x4ac>
   d8a36:	9b04      	ldr	r3, [sp, #16]
   d8a38:	b333      	cbz	r3, d8a88 <_strtod_l+0xb78>
   d8a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d8a3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8a40:	d822      	bhi.n	d8a88 <_strtod_l+0xb78>
   d8a42:	a32d      	add	r3, pc, #180	; (adr r3, d8af8 <_strtod_l+0xbe8>)
   d8a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a48:	4640      	mov	r0, r8
   d8a4a:	4649      	mov	r1, r9
   d8a4c:	f7ff f8ac 	bl	d7ba8 <__aeabi_dcmple>
   d8a50:	b1a0      	cbz	r0, d8a7c <_strtod_l+0xb6c>
   d8a52:	4649      	mov	r1, r9
   d8a54:	4640      	mov	r0, r8
   d8a56:	f7ff f8c5 	bl	d7be4 <__aeabi_d2uiz>
   d8a5a:	2801      	cmp	r0, #1
   d8a5c:	bf38      	it	cc
   d8a5e:	2001      	movcc	r0, #1
   d8a60:	f7fe fdac 	bl	d75bc <__aeabi_ui2d>
   d8a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8a66:	4680      	mov	r8, r0
   d8a68:	4689      	mov	r9, r1
   d8a6a:	bb13      	cbnz	r3, d8ab2 <_strtod_l+0xba2>
   d8a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8a70:	9014      	str	r0, [sp, #80]	; 0x50
   d8a72:	9315      	str	r3, [sp, #84]	; 0x54
   d8a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d8a78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d8a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8a80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d8a84:	1a9b      	subs	r3, r3, r2
   d8a86:	930d      	str	r3, [sp, #52]	; 0x34
   d8a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8a8c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d8a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d8a94:	f000 ff42 	bl	d991c <__ulp>
   d8a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8a9c:	ec53 2b10 	vmov	r2, r3, d0
   d8aa0:	f7fe fe06 	bl	d76b0 <__aeabi_dmul>
   d8aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8aa8:	f7fe fc4c 	bl	d7344 <__adddf3>
   d8aac:	4682      	mov	sl, r0
   d8aae:	468b      	mov	fp, r1
   d8ab0:	e78f      	b.n	d89d2 <_strtod_l+0xac2>
   d8ab2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d8ab6:	e7dd      	b.n	d8a74 <_strtod_l+0xb64>
   d8ab8:	a311      	add	r3, pc, #68	; (adr r3, d8b00 <_strtod_l+0xbf0>)
   d8aba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8abe:	f7ff f869 	bl	d7b94 <__aeabi_dcmplt>
   d8ac2:	e7b4      	b.n	d8a2e <_strtod_l+0xb1e>
   d8ac4:	2300      	movs	r3, #0
   d8ac6:	930e      	str	r3, [sp, #56]	; 0x38
   d8ac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8acc:	6013      	str	r3, [r2, #0]
   d8ace:	f7ff ba65 	b.w	d7f9c <_strtod_l+0x8c>
   d8ad2:	2b65      	cmp	r3, #101	; 0x65
   d8ad4:	f43f ab5d 	beq.w	d8192 <_strtod_l+0x282>
   d8ad8:	2b45      	cmp	r3, #69	; 0x45
   d8ada:	f43f ab5a 	beq.w	d8192 <_strtod_l+0x282>
   d8ade:	2201      	movs	r2, #1
   d8ae0:	f7ff bb92 	b.w	d8208 <_strtod_l+0x2f8>
   d8ae4:	f3af 8000 	nop.w
   d8ae8:	94a03595 	.word	0x94a03595
   d8aec:	3fdfffff 	.word	0x3fdfffff
   d8af0:	35afe535 	.word	0x35afe535
   d8af4:	3fe00000 	.word	0x3fe00000
   d8af8:	ffc00000 	.word	0xffc00000
   d8afc:	41dfffff 	.word	0x41dfffff
   d8b00:	94a03595 	.word	0x94a03595
   d8b04:	3fcfffff 	.word	0x3fcfffff
   d8b08:	3ff00000 	.word	0x3ff00000
   d8b0c:	7ff00000 	.word	0x7ff00000
   d8b10:	7fe00000 	.word	0x7fe00000
   d8b14:	7c9fffff 	.word	0x7c9fffff
   d8b18:	3fe00000 	.word	0x3fe00000
   d8b1c:	bff00000 	.word	0xbff00000
   d8b20:	7fefffff 	.word	0x7fefffff

000d8b24 <strtod>:
   d8b24:	460a      	mov	r2, r1
   d8b26:	4601      	mov	r1, r0
   d8b28:	4802      	ldr	r0, [pc, #8]	; (d8b34 <strtod+0x10>)
   d8b2a:	4b03      	ldr	r3, [pc, #12]	; (d8b38 <strtod+0x14>)
   d8b2c:	6800      	ldr	r0, [r0, #0]
   d8b2e:	f7ff b9ef 	b.w	d7f10 <_strtod_l>
   d8b32:	bf00      	nop
   d8b34:	2003e284 	.word	0x2003e284
   d8b38:	2003e2ec 	.word	0x2003e2ec

000d8b3c <_strtol_l.isra.0>:
   d8b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8b40:	4e3a      	ldr	r6, [pc, #232]	; (d8c2c <_strtol_l.isra.0+0xf0>)
   d8b42:	4686      	mov	lr, r0
   d8b44:	468c      	mov	ip, r1
   d8b46:	4660      	mov	r0, ip
   d8b48:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8b4c:	5da5      	ldrb	r5, [r4, r6]
   d8b4e:	f015 0508 	ands.w	r5, r5, #8
   d8b52:	d1f8      	bne.n	d8b46 <_strtol_l.isra.0+0xa>
   d8b54:	2c2d      	cmp	r4, #45	; 0x2d
   d8b56:	d133      	bne.n	d8bc0 <_strtol_l.isra.0+0x84>
   d8b58:	f89c 4000 	ldrb.w	r4, [ip]
   d8b5c:	f04f 0801 	mov.w	r8, #1
   d8b60:	f100 0c02 	add.w	ip, r0, #2
   d8b64:	2b00      	cmp	r3, #0
   d8b66:	d05c      	beq.n	d8c22 <_strtol_l.isra.0+0xe6>
   d8b68:	2b10      	cmp	r3, #16
   d8b6a:	d10c      	bne.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8b6c:	2c30      	cmp	r4, #48	; 0x30
   d8b6e:	d10a      	bne.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8b70:	f89c 0000 	ldrb.w	r0, [ip]
   d8b74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8b78:	2858      	cmp	r0, #88	; 0x58
   d8b7a:	d14d      	bne.n	d8c18 <_strtol_l.isra.0+0xdc>
   d8b7c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8b80:	2310      	movs	r3, #16
   d8b82:	f10c 0c02 	add.w	ip, ip, #2
   d8b86:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8b8a:	3f01      	subs	r7, #1
   d8b8c:	2600      	movs	r6, #0
   d8b8e:	fbb7 f9f3 	udiv	r9, r7, r3
   d8b92:	4630      	mov	r0, r6
   d8b94:	fb03 7a19 	mls	sl, r3, r9, r7
   d8b98:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8b9c:	2d09      	cmp	r5, #9
   d8b9e:	d818      	bhi.n	d8bd2 <_strtol_l.isra.0+0x96>
   d8ba0:	462c      	mov	r4, r5
   d8ba2:	42a3      	cmp	r3, r4
   d8ba4:	dd24      	ble.n	d8bf0 <_strtol_l.isra.0+0xb4>
   d8ba6:	1c75      	adds	r5, r6, #1
   d8ba8:	d007      	beq.n	d8bba <_strtol_l.isra.0+0x7e>
   d8baa:	4581      	cmp	r9, r0
   d8bac:	d31d      	bcc.n	d8bea <_strtol_l.isra.0+0xae>
   d8bae:	d101      	bne.n	d8bb4 <_strtol_l.isra.0+0x78>
   d8bb0:	45a2      	cmp	sl, r4
   d8bb2:	db1a      	blt.n	d8bea <_strtol_l.isra.0+0xae>
   d8bb4:	fb00 4003 	mla	r0, r0, r3, r4
   d8bb8:	2601      	movs	r6, #1
   d8bba:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8bbe:	e7eb      	b.n	d8b98 <_strtol_l.isra.0+0x5c>
   d8bc0:	2c2b      	cmp	r4, #43	; 0x2b
   d8bc2:	bf08      	it	eq
   d8bc4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8bc8:	46a8      	mov	r8, r5
   d8bca:	bf08      	it	eq
   d8bcc:	f100 0c02 	addeq.w	ip, r0, #2
   d8bd0:	e7c8      	b.n	d8b64 <_strtol_l.isra.0+0x28>
   d8bd2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8bd6:	2d19      	cmp	r5, #25
   d8bd8:	d801      	bhi.n	d8bde <_strtol_l.isra.0+0xa2>
   d8bda:	3c37      	subs	r4, #55	; 0x37
   d8bdc:	e7e1      	b.n	d8ba2 <_strtol_l.isra.0+0x66>
   d8bde:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8be2:	2d19      	cmp	r5, #25
   d8be4:	d804      	bhi.n	d8bf0 <_strtol_l.isra.0+0xb4>
   d8be6:	3c57      	subs	r4, #87	; 0x57
   d8be8:	e7db      	b.n	d8ba2 <_strtol_l.isra.0+0x66>
   d8bea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8bee:	e7e4      	b.n	d8bba <_strtol_l.isra.0+0x7e>
   d8bf0:	1c73      	adds	r3, r6, #1
   d8bf2:	d106      	bne.n	d8c02 <_strtol_l.isra.0+0xc6>
   d8bf4:	2322      	movs	r3, #34	; 0x22
   d8bf6:	f8ce 3000 	str.w	r3, [lr]
   d8bfa:	4638      	mov	r0, r7
   d8bfc:	b942      	cbnz	r2, d8c10 <_strtol_l.isra.0+0xd4>
   d8bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c02:	f1b8 0f00 	cmp.w	r8, #0
   d8c06:	d000      	beq.n	d8c0a <_strtol_l.isra.0+0xce>
   d8c08:	4240      	negs	r0, r0
   d8c0a:	2a00      	cmp	r2, #0
   d8c0c:	d0f7      	beq.n	d8bfe <_strtol_l.isra.0+0xc2>
   d8c0e:	b10e      	cbz	r6, d8c14 <_strtol_l.isra.0+0xd8>
   d8c10:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8c14:	6011      	str	r1, [r2, #0]
   d8c16:	e7f2      	b.n	d8bfe <_strtol_l.isra.0+0xc2>
   d8c18:	2430      	movs	r4, #48	; 0x30
   d8c1a:	2b00      	cmp	r3, #0
   d8c1c:	d1b3      	bne.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8c1e:	2308      	movs	r3, #8
   d8c20:	e7b1      	b.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8c22:	2c30      	cmp	r4, #48	; 0x30
   d8c24:	d0a4      	beq.n	d8b70 <_strtol_l.isra.0+0x34>
   d8c26:	230a      	movs	r3, #10
   d8c28:	e7ad      	b.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8c2a:	bf00      	nop
   d8c2c:	000da349 	.word	0x000da349

000d8c30 <strtol>:
   d8c30:	4613      	mov	r3, r2
   d8c32:	460a      	mov	r2, r1
   d8c34:	4601      	mov	r1, r0
   d8c36:	4802      	ldr	r0, [pc, #8]	; (d8c40 <strtol+0x10>)
   d8c38:	6800      	ldr	r0, [r0, #0]
   d8c3a:	f7ff bf7f 	b.w	d8b3c <_strtol_l.isra.0>
   d8c3e:	bf00      	nop
   d8c40:	2003e284 	.word	0x2003e284

000d8c44 <rshift>:
   d8c44:	6903      	ldr	r3, [r0, #16]
   d8c46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d8c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8c4e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d8c52:	f100 0414 	add.w	r4, r0, #20
   d8c56:	dd45      	ble.n	d8ce4 <rshift+0xa0>
   d8c58:	f011 011f 	ands.w	r1, r1, #31
   d8c5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d8c60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d8c64:	d10c      	bne.n	d8c80 <rshift+0x3c>
   d8c66:	f100 0710 	add.w	r7, r0, #16
   d8c6a:	4629      	mov	r1, r5
   d8c6c:	42b1      	cmp	r1, r6
   d8c6e:	d334      	bcc.n	d8cda <rshift+0x96>
   d8c70:	1a9b      	subs	r3, r3, r2
   d8c72:	009b      	lsls	r3, r3, #2
   d8c74:	1eea      	subs	r2, r5, #3
   d8c76:	4296      	cmp	r6, r2
   d8c78:	bf38      	it	cc
   d8c7a:	2300      	movcc	r3, #0
   d8c7c:	4423      	add	r3, r4
   d8c7e:	e015      	b.n	d8cac <rshift+0x68>
   d8c80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d8c84:	f1c1 0820 	rsb	r8, r1, #32
   d8c88:	40cf      	lsrs	r7, r1
   d8c8a:	f105 0e04 	add.w	lr, r5, #4
   d8c8e:	46a1      	mov	r9, r4
   d8c90:	4576      	cmp	r6, lr
   d8c92:	46f4      	mov	ip, lr
   d8c94:	d815      	bhi.n	d8cc2 <rshift+0x7e>
   d8c96:	1a9b      	subs	r3, r3, r2
   d8c98:	009a      	lsls	r2, r3, #2
   d8c9a:	3a04      	subs	r2, #4
   d8c9c:	3501      	adds	r5, #1
   d8c9e:	42ae      	cmp	r6, r5
   d8ca0:	bf38      	it	cc
   d8ca2:	2200      	movcc	r2, #0
   d8ca4:	18a3      	adds	r3, r4, r2
   d8ca6:	50a7      	str	r7, [r4, r2]
   d8ca8:	b107      	cbz	r7, d8cac <rshift+0x68>
   d8caa:	3304      	adds	r3, #4
   d8cac:	1b1a      	subs	r2, r3, r4
   d8cae:	42a3      	cmp	r3, r4
   d8cb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d8cb4:	bf08      	it	eq
   d8cb6:	2300      	moveq	r3, #0
   d8cb8:	6102      	str	r2, [r0, #16]
   d8cba:	bf08      	it	eq
   d8cbc:	6143      	streq	r3, [r0, #20]
   d8cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8cc2:	f8dc c000 	ldr.w	ip, [ip]
   d8cc6:	fa0c fc08 	lsl.w	ip, ip, r8
   d8cca:	ea4c 0707 	orr.w	r7, ip, r7
   d8cce:	f849 7b04 	str.w	r7, [r9], #4
   d8cd2:	f85e 7b04 	ldr.w	r7, [lr], #4
   d8cd6:	40cf      	lsrs	r7, r1
   d8cd8:	e7da      	b.n	d8c90 <rshift+0x4c>
   d8cda:	f851 cb04 	ldr.w	ip, [r1], #4
   d8cde:	f847 cf04 	str.w	ip, [r7, #4]!
   d8ce2:	e7c3      	b.n	d8c6c <rshift+0x28>
   d8ce4:	4623      	mov	r3, r4
   d8ce6:	e7e1      	b.n	d8cac <rshift+0x68>

000d8ce8 <__hexdig_fun>:
   d8ce8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8cec:	2b09      	cmp	r3, #9
   d8cee:	d802      	bhi.n	d8cf6 <__hexdig_fun+0xe>
   d8cf0:	3820      	subs	r0, #32
   d8cf2:	b2c0      	uxtb	r0, r0
   d8cf4:	4770      	bx	lr
   d8cf6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8cfa:	2b05      	cmp	r3, #5
   d8cfc:	d801      	bhi.n	d8d02 <__hexdig_fun+0x1a>
   d8cfe:	3847      	subs	r0, #71	; 0x47
   d8d00:	e7f7      	b.n	d8cf2 <__hexdig_fun+0xa>
   d8d02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8d06:	2b05      	cmp	r3, #5
   d8d08:	d801      	bhi.n	d8d0e <__hexdig_fun+0x26>
   d8d0a:	3827      	subs	r0, #39	; 0x27
   d8d0c:	e7f1      	b.n	d8cf2 <__hexdig_fun+0xa>
   d8d0e:	2000      	movs	r0, #0
   d8d10:	4770      	bx	lr
	...

000d8d14 <__gethex>:
   d8d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d18:	ed2d 8b02 	vpush	{d8}
   d8d1c:	b089      	sub	sp, #36	; 0x24
   d8d1e:	ee08 0a10 	vmov	s16, r0
   d8d22:	9304      	str	r3, [sp, #16]
   d8d24:	4bbc      	ldr	r3, [pc, #752]	; (d9018 <__gethex+0x304>)
   d8d26:	681b      	ldr	r3, [r3, #0]
   d8d28:	9301      	str	r3, [sp, #4]
   d8d2a:	4618      	mov	r0, r3
   d8d2c:	468b      	mov	fp, r1
   d8d2e:	4690      	mov	r8, r2
   d8d30:	f7ff f8a5 	bl	d7e7e <strlen>
   d8d34:	9b01      	ldr	r3, [sp, #4]
   d8d36:	f8db 2000 	ldr.w	r2, [fp]
   d8d3a:	4403      	add	r3, r0
   d8d3c:	4682      	mov	sl, r0
   d8d3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8d42:	9305      	str	r3, [sp, #20]
   d8d44:	1c93      	adds	r3, r2, #2
   d8d46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d8d4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d8d4e:	32fe      	adds	r2, #254	; 0xfe
   d8d50:	18d1      	adds	r1, r2, r3
   d8d52:	461f      	mov	r7, r3
   d8d54:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8d58:	9100      	str	r1, [sp, #0]
   d8d5a:	2830      	cmp	r0, #48	; 0x30
   d8d5c:	d0f8      	beq.n	d8d50 <__gethex+0x3c>
   d8d5e:	f7ff ffc3 	bl	d8ce8 <__hexdig_fun>
   d8d62:	4604      	mov	r4, r0
   d8d64:	2800      	cmp	r0, #0
   d8d66:	d13a      	bne.n	d8dde <__gethex+0xca>
   d8d68:	9901      	ldr	r1, [sp, #4]
   d8d6a:	4652      	mov	r2, sl
   d8d6c:	4638      	mov	r0, r7
   d8d6e:	f7ff f88e 	bl	d7e8e <strncmp>
   d8d72:	4605      	mov	r5, r0
   d8d74:	2800      	cmp	r0, #0
   d8d76:	d168      	bne.n	d8e4a <__gethex+0x136>
   d8d78:	f817 000a 	ldrb.w	r0, [r7, sl]
   d8d7c:	eb07 060a 	add.w	r6, r7, sl
   d8d80:	f7ff ffb2 	bl	d8ce8 <__hexdig_fun>
   d8d84:	2800      	cmp	r0, #0
   d8d86:	d062      	beq.n	d8e4e <__gethex+0x13a>
   d8d88:	4633      	mov	r3, r6
   d8d8a:	7818      	ldrb	r0, [r3, #0]
   d8d8c:	2830      	cmp	r0, #48	; 0x30
   d8d8e:	461f      	mov	r7, r3
   d8d90:	f103 0301 	add.w	r3, r3, #1
   d8d94:	d0f9      	beq.n	d8d8a <__gethex+0x76>
   d8d96:	f7ff ffa7 	bl	d8ce8 <__hexdig_fun>
   d8d9a:	2301      	movs	r3, #1
   d8d9c:	fab0 f480 	clz	r4, r0
   d8da0:	0964      	lsrs	r4, r4, #5
   d8da2:	4635      	mov	r5, r6
   d8da4:	9300      	str	r3, [sp, #0]
   d8da6:	463a      	mov	r2, r7
   d8da8:	4616      	mov	r6, r2
   d8daa:	3201      	adds	r2, #1
   d8dac:	7830      	ldrb	r0, [r6, #0]
   d8dae:	f7ff ff9b 	bl	d8ce8 <__hexdig_fun>
   d8db2:	2800      	cmp	r0, #0
   d8db4:	d1f8      	bne.n	d8da8 <__gethex+0x94>
   d8db6:	9901      	ldr	r1, [sp, #4]
   d8db8:	4652      	mov	r2, sl
   d8dba:	4630      	mov	r0, r6
   d8dbc:	f7ff f867 	bl	d7e8e <strncmp>
   d8dc0:	b980      	cbnz	r0, d8de4 <__gethex+0xd0>
   d8dc2:	b94d      	cbnz	r5, d8dd8 <__gethex+0xc4>
   d8dc4:	eb06 050a 	add.w	r5, r6, sl
   d8dc8:	462a      	mov	r2, r5
   d8dca:	4616      	mov	r6, r2
   d8dcc:	3201      	adds	r2, #1
   d8dce:	7830      	ldrb	r0, [r6, #0]
   d8dd0:	f7ff ff8a 	bl	d8ce8 <__hexdig_fun>
   d8dd4:	2800      	cmp	r0, #0
   d8dd6:	d1f8      	bne.n	d8dca <__gethex+0xb6>
   d8dd8:	1bad      	subs	r5, r5, r6
   d8dda:	00ad      	lsls	r5, r5, #2
   d8ddc:	e004      	b.n	d8de8 <__gethex+0xd4>
   d8dde:	2400      	movs	r4, #0
   d8de0:	4625      	mov	r5, r4
   d8de2:	e7e0      	b.n	d8da6 <__gethex+0x92>
   d8de4:	2d00      	cmp	r5, #0
   d8de6:	d1f7      	bne.n	d8dd8 <__gethex+0xc4>
   d8de8:	7833      	ldrb	r3, [r6, #0]
   d8dea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8dee:	2b50      	cmp	r3, #80	; 0x50
   d8df0:	d13b      	bne.n	d8e6a <__gethex+0x156>
   d8df2:	7873      	ldrb	r3, [r6, #1]
   d8df4:	2b2b      	cmp	r3, #43	; 0x2b
   d8df6:	d02c      	beq.n	d8e52 <__gethex+0x13e>
   d8df8:	2b2d      	cmp	r3, #45	; 0x2d
   d8dfa:	d02e      	beq.n	d8e5a <__gethex+0x146>
   d8dfc:	1c71      	adds	r1, r6, #1
   d8dfe:	f04f 0900 	mov.w	r9, #0
   d8e02:	7808      	ldrb	r0, [r1, #0]
   d8e04:	f7ff ff70 	bl	d8ce8 <__hexdig_fun>
   d8e08:	1e43      	subs	r3, r0, #1
   d8e0a:	b2db      	uxtb	r3, r3
   d8e0c:	2b18      	cmp	r3, #24
   d8e0e:	d82c      	bhi.n	d8e6a <__gethex+0x156>
   d8e10:	f1a0 0210 	sub.w	r2, r0, #16
   d8e14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8e18:	f7ff ff66 	bl	d8ce8 <__hexdig_fun>
   d8e1c:	1e43      	subs	r3, r0, #1
   d8e1e:	b2db      	uxtb	r3, r3
   d8e20:	2b18      	cmp	r3, #24
   d8e22:	d91d      	bls.n	d8e60 <__gethex+0x14c>
   d8e24:	f1b9 0f00 	cmp.w	r9, #0
   d8e28:	d000      	beq.n	d8e2c <__gethex+0x118>
   d8e2a:	4252      	negs	r2, r2
   d8e2c:	4415      	add	r5, r2
   d8e2e:	f8cb 1000 	str.w	r1, [fp]
   d8e32:	b1e4      	cbz	r4, d8e6e <__gethex+0x15a>
   d8e34:	9b00      	ldr	r3, [sp, #0]
   d8e36:	2b00      	cmp	r3, #0
   d8e38:	bf14      	ite	ne
   d8e3a:	2700      	movne	r7, #0
   d8e3c:	2706      	moveq	r7, #6
   d8e3e:	4638      	mov	r0, r7
   d8e40:	b009      	add	sp, #36	; 0x24
   d8e42:	ecbd 8b02 	vpop	{d8}
   d8e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e4a:	463e      	mov	r6, r7
   d8e4c:	4625      	mov	r5, r4
   d8e4e:	2401      	movs	r4, #1
   d8e50:	e7ca      	b.n	d8de8 <__gethex+0xd4>
   d8e52:	f04f 0900 	mov.w	r9, #0
   d8e56:	1cb1      	adds	r1, r6, #2
   d8e58:	e7d3      	b.n	d8e02 <__gethex+0xee>
   d8e5a:	f04f 0901 	mov.w	r9, #1
   d8e5e:	e7fa      	b.n	d8e56 <__gethex+0x142>
   d8e60:	230a      	movs	r3, #10
   d8e62:	fb03 0202 	mla	r2, r3, r2, r0
   d8e66:	3a10      	subs	r2, #16
   d8e68:	e7d4      	b.n	d8e14 <__gethex+0x100>
   d8e6a:	4631      	mov	r1, r6
   d8e6c:	e7df      	b.n	d8e2e <__gethex+0x11a>
   d8e6e:	1bf3      	subs	r3, r6, r7
   d8e70:	3b01      	subs	r3, #1
   d8e72:	4621      	mov	r1, r4
   d8e74:	2b07      	cmp	r3, #7
   d8e76:	dc52      	bgt.n	d8f1e <__gethex+0x20a>
   d8e78:	ee18 0a10 	vmov	r0, s16
   d8e7c:	f000 fa52 	bl	d9324 <_Balloc>
   d8e80:	f04f 0b00 	mov.w	fp, #0
   d8e84:	f100 0914 	add.w	r9, r0, #20
   d8e88:	f1ca 0301 	rsb	r3, sl, #1
   d8e8c:	4604      	mov	r4, r0
   d8e8e:	f8cd 9008 	str.w	r9, [sp, #8]
   d8e92:	f8cd b000 	str.w	fp, [sp]
   d8e96:	9306      	str	r3, [sp, #24]
   d8e98:	42b7      	cmp	r7, r6
   d8e9a:	d343      	bcc.n	d8f24 <__gethex+0x210>
   d8e9c:	9802      	ldr	r0, [sp, #8]
   d8e9e:	9b00      	ldr	r3, [sp, #0]
   d8ea0:	f840 3b04 	str.w	r3, [r0], #4
   d8ea4:	eba0 0009 	sub.w	r0, r0, r9
   d8ea8:	1080      	asrs	r0, r0, #2
   d8eaa:	0146      	lsls	r6, r0, #5
   d8eac:	6120      	str	r0, [r4, #16]
   d8eae:	4618      	mov	r0, r3
   d8eb0:	f000 faff 	bl	d94b2 <__hi0bits>
   d8eb4:	1a30      	subs	r0, r6, r0
   d8eb6:	f8d8 6000 	ldr.w	r6, [r8]
   d8eba:	42b0      	cmp	r0, r6
   d8ebc:	dd66      	ble.n	d8f8c <__gethex+0x278>
   d8ebe:	1b87      	subs	r7, r0, r6
   d8ec0:	4639      	mov	r1, r7
   d8ec2:	4620      	mov	r0, r4
   d8ec4:	f000 fe4c 	bl	d9b60 <__any_on>
   d8ec8:	4682      	mov	sl, r0
   d8eca:	b1a8      	cbz	r0, d8ef8 <__gethex+0x1e4>
   d8ecc:	1e7b      	subs	r3, r7, #1
   d8ece:	1159      	asrs	r1, r3, #5
   d8ed0:	f003 021f 	and.w	r2, r3, #31
   d8ed4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d8ed8:	f04f 0a01 	mov.w	sl, #1
   d8edc:	fa0a f202 	lsl.w	r2, sl, r2
   d8ee0:	420a      	tst	r2, r1
   d8ee2:	d009      	beq.n	d8ef8 <__gethex+0x1e4>
   d8ee4:	4553      	cmp	r3, sl
   d8ee6:	dd05      	ble.n	d8ef4 <__gethex+0x1e0>
   d8ee8:	1eb9      	subs	r1, r7, #2
   d8eea:	4620      	mov	r0, r4
   d8eec:	f000 fe38 	bl	d9b60 <__any_on>
   d8ef0:	2800      	cmp	r0, #0
   d8ef2:	d148      	bne.n	d8f86 <__gethex+0x272>
   d8ef4:	f04f 0a02 	mov.w	sl, #2
   d8ef8:	4639      	mov	r1, r7
   d8efa:	4620      	mov	r0, r4
   d8efc:	f7ff fea2 	bl	d8c44 <rshift>
   d8f00:	443d      	add	r5, r7
   d8f02:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8f06:	42ab      	cmp	r3, r5
   d8f08:	da4f      	bge.n	d8faa <__gethex+0x296>
   d8f0a:	ee18 0a10 	vmov	r0, s16
   d8f0e:	4621      	mov	r1, r4
   d8f10:	f000 fa3c 	bl	d938c <_Bfree>
   d8f14:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8f16:	2300      	movs	r3, #0
   d8f18:	6013      	str	r3, [r2, #0]
   d8f1a:	27a3      	movs	r7, #163	; 0xa3
   d8f1c:	e78f      	b.n	d8e3e <__gethex+0x12a>
   d8f1e:	3101      	adds	r1, #1
   d8f20:	105b      	asrs	r3, r3, #1
   d8f22:	e7a7      	b.n	d8e74 <__gethex+0x160>
   d8f24:	1e73      	subs	r3, r6, #1
   d8f26:	9a05      	ldr	r2, [sp, #20]
   d8f28:	9303      	str	r3, [sp, #12]
   d8f2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8f2e:	4293      	cmp	r3, r2
   d8f30:	d019      	beq.n	d8f66 <__gethex+0x252>
   d8f32:	f1bb 0f20 	cmp.w	fp, #32
   d8f36:	d107      	bne.n	d8f48 <__gethex+0x234>
   d8f38:	9b02      	ldr	r3, [sp, #8]
   d8f3a:	9a00      	ldr	r2, [sp, #0]
   d8f3c:	f843 2b04 	str.w	r2, [r3], #4
   d8f40:	9302      	str	r3, [sp, #8]
   d8f42:	2300      	movs	r3, #0
   d8f44:	9300      	str	r3, [sp, #0]
   d8f46:	469b      	mov	fp, r3
   d8f48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8f4c:	f7ff fecc 	bl	d8ce8 <__hexdig_fun>
   d8f50:	9b00      	ldr	r3, [sp, #0]
   d8f52:	f000 000f 	and.w	r0, r0, #15
   d8f56:	fa00 f00b 	lsl.w	r0, r0, fp
   d8f5a:	4303      	orrs	r3, r0
   d8f5c:	9300      	str	r3, [sp, #0]
   d8f5e:	f10b 0b04 	add.w	fp, fp, #4
   d8f62:	9b03      	ldr	r3, [sp, #12]
   d8f64:	e00d      	b.n	d8f82 <__gethex+0x26e>
   d8f66:	9b03      	ldr	r3, [sp, #12]
   d8f68:	9a06      	ldr	r2, [sp, #24]
   d8f6a:	4413      	add	r3, r2
   d8f6c:	42bb      	cmp	r3, r7
   d8f6e:	d3e0      	bcc.n	d8f32 <__gethex+0x21e>
   d8f70:	4618      	mov	r0, r3
   d8f72:	9901      	ldr	r1, [sp, #4]
   d8f74:	9307      	str	r3, [sp, #28]
   d8f76:	4652      	mov	r2, sl
   d8f78:	f7fe ff89 	bl	d7e8e <strncmp>
   d8f7c:	9b07      	ldr	r3, [sp, #28]
   d8f7e:	2800      	cmp	r0, #0
   d8f80:	d1d7      	bne.n	d8f32 <__gethex+0x21e>
   d8f82:	461e      	mov	r6, r3
   d8f84:	e788      	b.n	d8e98 <__gethex+0x184>
   d8f86:	f04f 0a03 	mov.w	sl, #3
   d8f8a:	e7b5      	b.n	d8ef8 <__gethex+0x1e4>
   d8f8c:	da0a      	bge.n	d8fa4 <__gethex+0x290>
   d8f8e:	1a37      	subs	r7, r6, r0
   d8f90:	4621      	mov	r1, r4
   d8f92:	ee18 0a10 	vmov	r0, s16
   d8f96:	463a      	mov	r2, r7
   d8f98:	f000 fbce 	bl	d9738 <__lshift>
   d8f9c:	1bed      	subs	r5, r5, r7
   d8f9e:	4604      	mov	r4, r0
   d8fa0:	f100 0914 	add.w	r9, r0, #20
   d8fa4:	f04f 0a00 	mov.w	sl, #0
   d8fa8:	e7ab      	b.n	d8f02 <__gethex+0x1ee>
   d8faa:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8fae:	42a8      	cmp	r0, r5
   d8fb0:	dd6d      	ble.n	d908e <__gethex+0x37a>
   d8fb2:	1b45      	subs	r5, r0, r5
   d8fb4:	42ae      	cmp	r6, r5
   d8fb6:	dc31      	bgt.n	d901c <__gethex+0x308>
   d8fb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8fbc:	2b02      	cmp	r3, #2
   d8fbe:	d023      	beq.n	d9008 <__gethex+0x2f4>
   d8fc0:	2b03      	cmp	r3, #3
   d8fc2:	d025      	beq.n	d9010 <__gethex+0x2fc>
   d8fc4:	2b01      	cmp	r3, #1
   d8fc6:	d115      	bne.n	d8ff4 <__gethex+0x2e0>
   d8fc8:	42ae      	cmp	r6, r5
   d8fca:	d113      	bne.n	d8ff4 <__gethex+0x2e0>
   d8fcc:	2e01      	cmp	r6, #1
   d8fce:	d10b      	bne.n	d8fe8 <__gethex+0x2d4>
   d8fd0:	9a04      	ldr	r2, [sp, #16]
   d8fd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8fd6:	6013      	str	r3, [r2, #0]
   d8fd8:	2301      	movs	r3, #1
   d8fda:	6123      	str	r3, [r4, #16]
   d8fdc:	f8c9 3000 	str.w	r3, [r9]
   d8fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8fe2:	2762      	movs	r7, #98	; 0x62
   d8fe4:	601c      	str	r4, [r3, #0]
   d8fe6:	e72a      	b.n	d8e3e <__gethex+0x12a>
   d8fe8:	1e71      	subs	r1, r6, #1
   d8fea:	4620      	mov	r0, r4
   d8fec:	f000 fdb8 	bl	d9b60 <__any_on>
   d8ff0:	2800      	cmp	r0, #0
   d8ff2:	d1ed      	bne.n	d8fd0 <__gethex+0x2bc>
   d8ff4:	ee18 0a10 	vmov	r0, s16
   d8ff8:	4621      	mov	r1, r4
   d8ffa:	f000 f9c7 	bl	d938c <_Bfree>
   d8ffe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9000:	2300      	movs	r3, #0
   d9002:	6013      	str	r3, [r2, #0]
   d9004:	2750      	movs	r7, #80	; 0x50
   d9006:	e71a      	b.n	d8e3e <__gethex+0x12a>
   d9008:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d900a:	2b00      	cmp	r3, #0
   d900c:	d1f2      	bne.n	d8ff4 <__gethex+0x2e0>
   d900e:	e7df      	b.n	d8fd0 <__gethex+0x2bc>
   d9010:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9012:	2b00      	cmp	r3, #0
   d9014:	d1dc      	bne.n	d8fd0 <__gethex+0x2bc>
   d9016:	e7ed      	b.n	d8ff4 <__gethex+0x2e0>
   d9018:	000da44c 	.word	0x000da44c
   d901c:	1e6f      	subs	r7, r5, #1
   d901e:	f1ba 0f00 	cmp.w	sl, #0
   d9022:	d131      	bne.n	d9088 <__gethex+0x374>
   d9024:	b127      	cbz	r7, d9030 <__gethex+0x31c>
   d9026:	4639      	mov	r1, r7
   d9028:	4620      	mov	r0, r4
   d902a:	f000 fd99 	bl	d9b60 <__any_on>
   d902e:	4682      	mov	sl, r0
   d9030:	117b      	asrs	r3, r7, #5
   d9032:	2101      	movs	r1, #1
   d9034:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9038:	f007 071f 	and.w	r7, r7, #31
   d903c:	fa01 f707 	lsl.w	r7, r1, r7
   d9040:	421f      	tst	r7, r3
   d9042:	4629      	mov	r1, r5
   d9044:	4620      	mov	r0, r4
   d9046:	bf18      	it	ne
   d9048:	f04a 0a02 	orrne.w	sl, sl, #2
   d904c:	1b76      	subs	r6, r6, r5
   d904e:	f7ff fdf9 	bl	d8c44 <rshift>
   d9052:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9056:	2702      	movs	r7, #2
   d9058:	f1ba 0f00 	cmp.w	sl, #0
   d905c:	d048      	beq.n	d90f0 <__gethex+0x3dc>
   d905e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9062:	2b02      	cmp	r3, #2
   d9064:	d015      	beq.n	d9092 <__gethex+0x37e>
   d9066:	2b03      	cmp	r3, #3
   d9068:	d017      	beq.n	d909a <__gethex+0x386>
   d906a:	2b01      	cmp	r3, #1
   d906c:	d109      	bne.n	d9082 <__gethex+0x36e>
   d906e:	f01a 0f02 	tst.w	sl, #2
   d9072:	d006      	beq.n	d9082 <__gethex+0x36e>
   d9074:	f8d9 0000 	ldr.w	r0, [r9]
   d9078:	ea4a 0a00 	orr.w	sl, sl, r0
   d907c:	f01a 0f01 	tst.w	sl, #1
   d9080:	d10e      	bne.n	d90a0 <__gethex+0x38c>
   d9082:	f047 0710 	orr.w	r7, r7, #16
   d9086:	e033      	b.n	d90f0 <__gethex+0x3dc>
   d9088:	f04f 0a01 	mov.w	sl, #1
   d908c:	e7d0      	b.n	d9030 <__gethex+0x31c>
   d908e:	2701      	movs	r7, #1
   d9090:	e7e2      	b.n	d9058 <__gethex+0x344>
   d9092:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9094:	f1c3 0301 	rsb	r3, r3, #1
   d9098:	9315      	str	r3, [sp, #84]	; 0x54
   d909a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d909c:	2b00      	cmp	r3, #0
   d909e:	d0f0      	beq.n	d9082 <__gethex+0x36e>
   d90a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d90a4:	f104 0314 	add.w	r3, r4, #20
   d90a8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d90ac:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d90b0:	f04f 0c00 	mov.w	ip, #0
   d90b4:	4618      	mov	r0, r3
   d90b6:	f853 2b04 	ldr.w	r2, [r3], #4
   d90ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d90be:	d01c      	beq.n	d90fa <__gethex+0x3e6>
   d90c0:	3201      	adds	r2, #1
   d90c2:	6002      	str	r2, [r0, #0]
   d90c4:	2f02      	cmp	r7, #2
   d90c6:	f104 0314 	add.w	r3, r4, #20
   d90ca:	d13a      	bne.n	d9142 <__gethex+0x42e>
   d90cc:	f8d8 2000 	ldr.w	r2, [r8]
   d90d0:	3a01      	subs	r2, #1
   d90d2:	42b2      	cmp	r2, r6
   d90d4:	d10a      	bne.n	d90ec <__gethex+0x3d8>
   d90d6:	1171      	asrs	r1, r6, #5
   d90d8:	2201      	movs	r2, #1
   d90da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d90de:	f006 061f 	and.w	r6, r6, #31
   d90e2:	fa02 f606 	lsl.w	r6, r2, r6
   d90e6:	421e      	tst	r6, r3
   d90e8:	bf18      	it	ne
   d90ea:	4617      	movne	r7, r2
   d90ec:	f047 0720 	orr.w	r7, r7, #32
   d90f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d90f2:	601c      	str	r4, [r3, #0]
   d90f4:	9b04      	ldr	r3, [sp, #16]
   d90f6:	601d      	str	r5, [r3, #0]
   d90f8:	e6a1      	b.n	d8e3e <__gethex+0x12a>
   d90fa:	4299      	cmp	r1, r3
   d90fc:	f843 cc04 	str.w	ip, [r3, #-4]
   d9100:	d8d8      	bhi.n	d90b4 <__gethex+0x3a0>
   d9102:	68a3      	ldr	r3, [r4, #8]
   d9104:	4599      	cmp	r9, r3
   d9106:	db14      	blt.n	d9132 <__gethex+0x41e>
   d9108:	6861      	ldr	r1, [r4, #4]
   d910a:	ee18 0a10 	vmov	r0, s16
   d910e:	3101      	adds	r1, #1
   d9110:	f000 f908 	bl	d9324 <_Balloc>
   d9114:	6922      	ldr	r2, [r4, #16]
   d9116:	3202      	adds	r2, #2
   d9118:	f104 010c 	add.w	r1, r4, #12
   d911c:	4682      	mov	sl, r0
   d911e:	0092      	lsls	r2, r2, #2
   d9120:	300c      	adds	r0, #12
   d9122:	f7fe fe29 	bl	d7d78 <memcpy>
   d9126:	4621      	mov	r1, r4
   d9128:	ee18 0a10 	vmov	r0, s16
   d912c:	f000 f92e 	bl	d938c <_Bfree>
   d9130:	4654      	mov	r4, sl
   d9132:	6923      	ldr	r3, [r4, #16]
   d9134:	1c5a      	adds	r2, r3, #1
   d9136:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d913a:	6122      	str	r2, [r4, #16]
   d913c:	2201      	movs	r2, #1
   d913e:	615a      	str	r2, [r3, #20]
   d9140:	e7c0      	b.n	d90c4 <__gethex+0x3b0>
   d9142:	6922      	ldr	r2, [r4, #16]
   d9144:	454a      	cmp	r2, r9
   d9146:	dd0b      	ble.n	d9160 <__gethex+0x44c>
   d9148:	2101      	movs	r1, #1
   d914a:	4620      	mov	r0, r4
   d914c:	f7ff fd7a 	bl	d8c44 <rshift>
   d9150:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9154:	3501      	adds	r5, #1
   d9156:	42ab      	cmp	r3, r5
   d9158:	f6ff aed7 	blt.w	d8f0a <__gethex+0x1f6>
   d915c:	2701      	movs	r7, #1
   d915e:	e7c5      	b.n	d90ec <__gethex+0x3d8>
   d9160:	f016 061f 	ands.w	r6, r6, #31
   d9164:	d0fa      	beq.n	d915c <__gethex+0x448>
   d9166:	449b      	add	fp, r3
   d9168:	f1c6 0620 	rsb	r6, r6, #32
   d916c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d9170:	f000 f99f 	bl	d94b2 <__hi0bits>
   d9174:	42b0      	cmp	r0, r6
   d9176:	dbe7      	blt.n	d9148 <__gethex+0x434>
   d9178:	e7f0      	b.n	d915c <__gethex+0x448>
   d917a:	bf00      	nop

000d917c <L_shift>:
   d917c:	f1c2 0208 	rsb	r2, r2, #8
   d9180:	0092      	lsls	r2, r2, #2
   d9182:	b570      	push	{r4, r5, r6, lr}
   d9184:	f1c2 0620 	rsb	r6, r2, #32
   d9188:	6843      	ldr	r3, [r0, #4]
   d918a:	6804      	ldr	r4, [r0, #0]
   d918c:	fa03 f506 	lsl.w	r5, r3, r6
   d9190:	432c      	orrs	r4, r5
   d9192:	40d3      	lsrs	r3, r2
   d9194:	6004      	str	r4, [r0, #0]
   d9196:	f840 3f04 	str.w	r3, [r0, #4]!
   d919a:	4288      	cmp	r0, r1
   d919c:	d3f4      	bcc.n	d9188 <L_shift+0xc>
   d919e:	bd70      	pop	{r4, r5, r6, pc}

000d91a0 <__match>:
   d91a0:	b530      	push	{r4, r5, lr}
   d91a2:	6803      	ldr	r3, [r0, #0]
   d91a4:	3301      	adds	r3, #1
   d91a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91aa:	b914      	cbnz	r4, d91b2 <__match+0x12>
   d91ac:	6003      	str	r3, [r0, #0]
   d91ae:	2001      	movs	r0, #1
   d91b0:	bd30      	pop	{r4, r5, pc}
   d91b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d91ba:	2d19      	cmp	r5, #25
   d91bc:	bf98      	it	ls
   d91be:	3220      	addls	r2, #32
   d91c0:	42a2      	cmp	r2, r4
   d91c2:	d0f0      	beq.n	d91a6 <__match+0x6>
   d91c4:	2000      	movs	r0, #0
   d91c6:	e7f3      	b.n	d91b0 <__match+0x10>

000d91c8 <__hexnan>:
   d91c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d91cc:	680b      	ldr	r3, [r1, #0]
   d91ce:	6801      	ldr	r1, [r0, #0]
   d91d0:	115e      	asrs	r6, r3, #5
   d91d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d91d6:	f013 031f 	ands.w	r3, r3, #31
   d91da:	b087      	sub	sp, #28
   d91dc:	bf18      	it	ne
   d91de:	3604      	addne	r6, #4
   d91e0:	2500      	movs	r5, #0
   d91e2:	1f37      	subs	r7, r6, #4
   d91e4:	4682      	mov	sl, r0
   d91e6:	4690      	mov	r8, r2
   d91e8:	9301      	str	r3, [sp, #4]
   d91ea:	f846 5c04 	str.w	r5, [r6, #-4]
   d91ee:	46b9      	mov	r9, r7
   d91f0:	463c      	mov	r4, r7
   d91f2:	9502      	str	r5, [sp, #8]
   d91f4:	46ab      	mov	fp, r5
   d91f6:	784a      	ldrb	r2, [r1, #1]
   d91f8:	1c4b      	adds	r3, r1, #1
   d91fa:	9303      	str	r3, [sp, #12]
   d91fc:	b342      	cbz	r2, d9250 <__hexnan+0x88>
   d91fe:	4610      	mov	r0, r2
   d9200:	9105      	str	r1, [sp, #20]
   d9202:	9204      	str	r2, [sp, #16]
   d9204:	f7ff fd70 	bl	d8ce8 <__hexdig_fun>
   d9208:	2800      	cmp	r0, #0
   d920a:	d14f      	bne.n	d92ac <__hexnan+0xe4>
   d920c:	9a04      	ldr	r2, [sp, #16]
   d920e:	9905      	ldr	r1, [sp, #20]
   d9210:	2a20      	cmp	r2, #32
   d9212:	d818      	bhi.n	d9246 <__hexnan+0x7e>
   d9214:	9b02      	ldr	r3, [sp, #8]
   d9216:	459b      	cmp	fp, r3
   d9218:	dd13      	ble.n	d9242 <__hexnan+0x7a>
   d921a:	454c      	cmp	r4, r9
   d921c:	d206      	bcs.n	d922c <__hexnan+0x64>
   d921e:	2d07      	cmp	r5, #7
   d9220:	dc04      	bgt.n	d922c <__hexnan+0x64>
   d9222:	462a      	mov	r2, r5
   d9224:	4649      	mov	r1, r9
   d9226:	4620      	mov	r0, r4
   d9228:	f7ff ffa8 	bl	d917c <L_shift>
   d922c:	4544      	cmp	r4, r8
   d922e:	d950      	bls.n	d92d2 <__hexnan+0x10a>
   d9230:	2300      	movs	r3, #0
   d9232:	f1a4 0904 	sub.w	r9, r4, #4
   d9236:	f844 3c04 	str.w	r3, [r4, #-4]
   d923a:	f8cd b008 	str.w	fp, [sp, #8]
   d923e:	464c      	mov	r4, r9
   d9240:	461d      	mov	r5, r3
   d9242:	9903      	ldr	r1, [sp, #12]
   d9244:	e7d7      	b.n	d91f6 <__hexnan+0x2e>
   d9246:	2a29      	cmp	r2, #41	; 0x29
   d9248:	d156      	bne.n	d92f8 <__hexnan+0x130>
   d924a:	3102      	adds	r1, #2
   d924c:	f8ca 1000 	str.w	r1, [sl]
   d9250:	f1bb 0f00 	cmp.w	fp, #0
   d9254:	d050      	beq.n	d92f8 <__hexnan+0x130>
   d9256:	454c      	cmp	r4, r9
   d9258:	d206      	bcs.n	d9268 <__hexnan+0xa0>
   d925a:	2d07      	cmp	r5, #7
   d925c:	dc04      	bgt.n	d9268 <__hexnan+0xa0>
   d925e:	462a      	mov	r2, r5
   d9260:	4649      	mov	r1, r9
   d9262:	4620      	mov	r0, r4
   d9264:	f7ff ff8a 	bl	d917c <L_shift>
   d9268:	4544      	cmp	r4, r8
   d926a:	d934      	bls.n	d92d6 <__hexnan+0x10e>
   d926c:	f1a8 0204 	sub.w	r2, r8, #4
   d9270:	4623      	mov	r3, r4
   d9272:	f853 1b04 	ldr.w	r1, [r3], #4
   d9276:	f842 1f04 	str.w	r1, [r2, #4]!
   d927a:	429f      	cmp	r7, r3
   d927c:	d2f9      	bcs.n	d9272 <__hexnan+0xaa>
   d927e:	1b3b      	subs	r3, r7, r4
   d9280:	f023 0303 	bic.w	r3, r3, #3
   d9284:	3304      	adds	r3, #4
   d9286:	3401      	adds	r4, #1
   d9288:	3e03      	subs	r6, #3
   d928a:	42b4      	cmp	r4, r6
   d928c:	bf88      	it	hi
   d928e:	2304      	movhi	r3, #4
   d9290:	4443      	add	r3, r8
   d9292:	2200      	movs	r2, #0
   d9294:	f843 2b04 	str.w	r2, [r3], #4
   d9298:	429f      	cmp	r7, r3
   d929a:	d2fb      	bcs.n	d9294 <__hexnan+0xcc>
   d929c:	683b      	ldr	r3, [r7, #0]
   d929e:	b91b      	cbnz	r3, d92a8 <__hexnan+0xe0>
   d92a0:	4547      	cmp	r7, r8
   d92a2:	d127      	bne.n	d92f4 <__hexnan+0x12c>
   d92a4:	2301      	movs	r3, #1
   d92a6:	603b      	str	r3, [r7, #0]
   d92a8:	2005      	movs	r0, #5
   d92aa:	e026      	b.n	d92fa <__hexnan+0x132>
   d92ac:	3501      	adds	r5, #1
   d92ae:	2d08      	cmp	r5, #8
   d92b0:	f10b 0b01 	add.w	fp, fp, #1
   d92b4:	dd06      	ble.n	d92c4 <__hexnan+0xfc>
   d92b6:	4544      	cmp	r4, r8
   d92b8:	d9c3      	bls.n	d9242 <__hexnan+0x7a>
   d92ba:	2300      	movs	r3, #0
   d92bc:	f844 3c04 	str.w	r3, [r4, #-4]
   d92c0:	2501      	movs	r5, #1
   d92c2:	3c04      	subs	r4, #4
   d92c4:	6822      	ldr	r2, [r4, #0]
   d92c6:	f000 000f 	and.w	r0, r0, #15
   d92ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d92ce:	6022      	str	r2, [r4, #0]
   d92d0:	e7b7      	b.n	d9242 <__hexnan+0x7a>
   d92d2:	2508      	movs	r5, #8
   d92d4:	e7b5      	b.n	d9242 <__hexnan+0x7a>
   d92d6:	9b01      	ldr	r3, [sp, #4]
   d92d8:	2b00      	cmp	r3, #0
   d92da:	d0df      	beq.n	d929c <__hexnan+0xd4>
   d92dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d92e0:	f1c3 0320 	rsb	r3, r3, #32
   d92e4:	fa22 f303 	lsr.w	r3, r2, r3
   d92e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d92ec:	401a      	ands	r2, r3
   d92ee:	f846 2c04 	str.w	r2, [r6, #-4]
   d92f2:	e7d3      	b.n	d929c <__hexnan+0xd4>
   d92f4:	3f04      	subs	r7, #4
   d92f6:	e7d1      	b.n	d929c <__hexnan+0xd4>
   d92f8:	2004      	movs	r0, #4
   d92fa:	b007      	add	sp, #28
   d92fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9300 <__ascii_mbtowc>:
   d9300:	b082      	sub	sp, #8
   d9302:	b901      	cbnz	r1, d9306 <__ascii_mbtowc+0x6>
   d9304:	a901      	add	r1, sp, #4
   d9306:	b142      	cbz	r2, d931a <__ascii_mbtowc+0x1a>
   d9308:	b14b      	cbz	r3, d931e <__ascii_mbtowc+0x1e>
   d930a:	7813      	ldrb	r3, [r2, #0]
   d930c:	600b      	str	r3, [r1, #0]
   d930e:	7812      	ldrb	r2, [r2, #0]
   d9310:	1e10      	subs	r0, r2, #0
   d9312:	bf18      	it	ne
   d9314:	2001      	movne	r0, #1
   d9316:	b002      	add	sp, #8
   d9318:	4770      	bx	lr
   d931a:	4610      	mov	r0, r2
   d931c:	e7fb      	b.n	d9316 <__ascii_mbtowc+0x16>
   d931e:	f06f 0001 	mvn.w	r0, #1
   d9322:	e7f8      	b.n	d9316 <__ascii_mbtowc+0x16>

000d9324 <_Balloc>:
   d9324:	b570      	push	{r4, r5, r6, lr}
   d9326:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9328:	4604      	mov	r4, r0
   d932a:	460d      	mov	r5, r1
   d932c:	b93e      	cbnz	r6, d933e <_Balloc+0x1a>
   d932e:	2010      	movs	r0, #16
   d9330:	f7fc fd8a 	bl	d5e48 <malloc>
   d9334:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9338:	6260      	str	r0, [r4, #36]	; 0x24
   d933a:	6006      	str	r6, [r0, #0]
   d933c:	60c6      	str	r6, [r0, #12]
   d933e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d9340:	68f3      	ldr	r3, [r6, #12]
   d9342:	b183      	cbz	r3, d9366 <_Balloc+0x42>
   d9344:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9346:	68db      	ldr	r3, [r3, #12]
   d9348:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d934c:	b9b8      	cbnz	r0, d937e <_Balloc+0x5a>
   d934e:	2101      	movs	r1, #1
   d9350:	fa01 f605 	lsl.w	r6, r1, r5
   d9354:	1d72      	adds	r2, r6, #5
   d9356:	0092      	lsls	r2, r2, #2
   d9358:	4620      	mov	r0, r4
   d935a:	f000 fc22 	bl	d9ba2 <_calloc_r>
   d935e:	b160      	cbz	r0, d937a <_Balloc+0x56>
   d9360:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d9364:	e00e      	b.n	d9384 <_Balloc+0x60>
   d9366:	2221      	movs	r2, #33	; 0x21
   d9368:	2104      	movs	r1, #4
   d936a:	4620      	mov	r0, r4
   d936c:	f000 fc19 	bl	d9ba2 <_calloc_r>
   d9370:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9372:	60f0      	str	r0, [r6, #12]
   d9374:	68db      	ldr	r3, [r3, #12]
   d9376:	2b00      	cmp	r3, #0
   d9378:	d1e4      	bne.n	d9344 <_Balloc+0x20>
   d937a:	2000      	movs	r0, #0
   d937c:	bd70      	pop	{r4, r5, r6, pc}
   d937e:	6802      	ldr	r2, [r0, #0]
   d9380:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d9384:	2300      	movs	r3, #0
   d9386:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d938a:	e7f7      	b.n	d937c <_Balloc+0x58>

000d938c <_Bfree>:
   d938c:	b570      	push	{r4, r5, r6, lr}
   d938e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9390:	4605      	mov	r5, r0
   d9392:	460c      	mov	r4, r1
   d9394:	b93e      	cbnz	r6, d93a6 <_Bfree+0x1a>
   d9396:	2010      	movs	r0, #16
   d9398:	f7fc fd56 	bl	d5e48 <malloc>
   d939c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d93a0:	6268      	str	r0, [r5, #36]	; 0x24
   d93a2:	6006      	str	r6, [r0, #0]
   d93a4:	60c6      	str	r6, [r0, #12]
   d93a6:	b13c      	cbz	r4, d93b8 <_Bfree+0x2c>
   d93a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d93aa:	6862      	ldr	r2, [r4, #4]
   d93ac:	68db      	ldr	r3, [r3, #12]
   d93ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d93b2:	6021      	str	r1, [r4, #0]
   d93b4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d93b8:	bd70      	pop	{r4, r5, r6, pc}

000d93ba <__multadd>:
   d93ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d93be:	690e      	ldr	r6, [r1, #16]
   d93c0:	4607      	mov	r7, r0
   d93c2:	4698      	mov	r8, r3
   d93c4:	460c      	mov	r4, r1
   d93c6:	f101 0014 	add.w	r0, r1, #20
   d93ca:	2300      	movs	r3, #0
   d93cc:	6805      	ldr	r5, [r0, #0]
   d93ce:	b2a9      	uxth	r1, r5
   d93d0:	fb02 8101 	mla	r1, r2, r1, r8
   d93d4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d93d8:	0c2d      	lsrs	r5, r5, #16
   d93da:	fb02 c505 	mla	r5, r2, r5, ip
   d93de:	b289      	uxth	r1, r1
   d93e0:	3301      	adds	r3, #1
   d93e2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d93e6:	429e      	cmp	r6, r3
   d93e8:	f840 1b04 	str.w	r1, [r0], #4
   d93ec:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d93f0:	dcec      	bgt.n	d93cc <__multadd+0x12>
   d93f2:	f1b8 0f00 	cmp.w	r8, #0
   d93f6:	d01b      	beq.n	d9430 <__multadd+0x76>
   d93f8:	68a3      	ldr	r3, [r4, #8]
   d93fa:	42b3      	cmp	r3, r6
   d93fc:	dc12      	bgt.n	d9424 <__multadd+0x6a>
   d93fe:	6861      	ldr	r1, [r4, #4]
   d9400:	4638      	mov	r0, r7
   d9402:	3101      	adds	r1, #1
   d9404:	f7ff ff8e 	bl	d9324 <_Balloc>
   d9408:	6922      	ldr	r2, [r4, #16]
   d940a:	3202      	adds	r2, #2
   d940c:	f104 010c 	add.w	r1, r4, #12
   d9410:	4605      	mov	r5, r0
   d9412:	0092      	lsls	r2, r2, #2
   d9414:	300c      	adds	r0, #12
   d9416:	f7fe fcaf 	bl	d7d78 <memcpy>
   d941a:	4621      	mov	r1, r4
   d941c:	4638      	mov	r0, r7
   d941e:	f7ff ffb5 	bl	d938c <_Bfree>
   d9422:	462c      	mov	r4, r5
   d9424:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d9428:	3601      	adds	r6, #1
   d942a:	f8c3 8014 	str.w	r8, [r3, #20]
   d942e:	6126      	str	r6, [r4, #16]
   d9430:	4620      	mov	r0, r4
   d9432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9436 <__s2b>:
   d9436:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d943a:	460c      	mov	r4, r1
   d943c:	4615      	mov	r5, r2
   d943e:	461f      	mov	r7, r3
   d9440:	2209      	movs	r2, #9
   d9442:	3308      	adds	r3, #8
   d9444:	4606      	mov	r6, r0
   d9446:	fb93 f3f2 	sdiv	r3, r3, r2
   d944a:	2100      	movs	r1, #0
   d944c:	2201      	movs	r2, #1
   d944e:	429a      	cmp	r2, r3
   d9450:	db20      	blt.n	d9494 <__s2b+0x5e>
   d9452:	4630      	mov	r0, r6
   d9454:	f7ff ff66 	bl	d9324 <_Balloc>
   d9458:	9b08      	ldr	r3, [sp, #32]
   d945a:	6143      	str	r3, [r0, #20]
   d945c:	2d09      	cmp	r5, #9
   d945e:	f04f 0301 	mov.w	r3, #1
   d9462:	6103      	str	r3, [r0, #16]
   d9464:	dd19      	ble.n	d949a <__s2b+0x64>
   d9466:	f104 0909 	add.w	r9, r4, #9
   d946a:	46c8      	mov	r8, r9
   d946c:	442c      	add	r4, r5
   d946e:	f818 3b01 	ldrb.w	r3, [r8], #1
   d9472:	4601      	mov	r1, r0
   d9474:	3b30      	subs	r3, #48	; 0x30
   d9476:	220a      	movs	r2, #10
   d9478:	4630      	mov	r0, r6
   d947a:	f7ff ff9e 	bl	d93ba <__multadd>
   d947e:	45a0      	cmp	r8, r4
   d9480:	d1f5      	bne.n	d946e <__s2b+0x38>
   d9482:	f1a5 0408 	sub.w	r4, r5, #8
   d9486:	444c      	add	r4, r9
   d9488:	1b2d      	subs	r5, r5, r4
   d948a:	1963      	adds	r3, r4, r5
   d948c:	42bb      	cmp	r3, r7
   d948e:	db07      	blt.n	d94a0 <__s2b+0x6a>
   d9490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9494:	0052      	lsls	r2, r2, #1
   d9496:	3101      	adds	r1, #1
   d9498:	e7d9      	b.n	d944e <__s2b+0x18>
   d949a:	340a      	adds	r4, #10
   d949c:	2509      	movs	r5, #9
   d949e:	e7f3      	b.n	d9488 <__s2b+0x52>
   d94a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   d94a4:	4601      	mov	r1, r0
   d94a6:	3b30      	subs	r3, #48	; 0x30
   d94a8:	220a      	movs	r2, #10
   d94aa:	4630      	mov	r0, r6
   d94ac:	f7ff ff85 	bl	d93ba <__multadd>
   d94b0:	e7eb      	b.n	d948a <__s2b+0x54>

000d94b2 <__hi0bits>:
   d94b2:	0c03      	lsrs	r3, r0, #16
   d94b4:	041b      	lsls	r3, r3, #16
   d94b6:	b9d3      	cbnz	r3, d94ee <__hi0bits+0x3c>
   d94b8:	0400      	lsls	r0, r0, #16
   d94ba:	2310      	movs	r3, #16
   d94bc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d94c0:	bf04      	itt	eq
   d94c2:	0200      	lsleq	r0, r0, #8
   d94c4:	3308      	addeq	r3, #8
   d94c6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d94ca:	bf04      	itt	eq
   d94cc:	0100      	lsleq	r0, r0, #4
   d94ce:	3304      	addeq	r3, #4
   d94d0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d94d4:	bf04      	itt	eq
   d94d6:	0080      	lsleq	r0, r0, #2
   d94d8:	3302      	addeq	r3, #2
   d94da:	2800      	cmp	r0, #0
   d94dc:	db05      	blt.n	d94ea <__hi0bits+0x38>
   d94de:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d94e2:	f103 0301 	add.w	r3, r3, #1
   d94e6:	bf08      	it	eq
   d94e8:	2320      	moveq	r3, #32
   d94ea:	4618      	mov	r0, r3
   d94ec:	4770      	bx	lr
   d94ee:	2300      	movs	r3, #0
   d94f0:	e7e4      	b.n	d94bc <__hi0bits+0xa>

000d94f2 <__lo0bits>:
   d94f2:	6803      	ldr	r3, [r0, #0]
   d94f4:	f013 0207 	ands.w	r2, r3, #7
   d94f8:	4601      	mov	r1, r0
   d94fa:	d00b      	beq.n	d9514 <__lo0bits+0x22>
   d94fc:	07da      	lsls	r2, r3, #31
   d94fe:	d424      	bmi.n	d954a <__lo0bits+0x58>
   d9500:	0798      	lsls	r0, r3, #30
   d9502:	bf49      	itett	mi
   d9504:	085b      	lsrmi	r3, r3, #1
   d9506:	089b      	lsrpl	r3, r3, #2
   d9508:	2001      	movmi	r0, #1
   d950a:	600b      	strmi	r3, [r1, #0]
   d950c:	bf5c      	itt	pl
   d950e:	600b      	strpl	r3, [r1, #0]
   d9510:	2002      	movpl	r0, #2
   d9512:	4770      	bx	lr
   d9514:	b298      	uxth	r0, r3
   d9516:	b9b0      	cbnz	r0, d9546 <__lo0bits+0x54>
   d9518:	0c1b      	lsrs	r3, r3, #16
   d951a:	2010      	movs	r0, #16
   d951c:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9520:	bf04      	itt	eq
   d9522:	0a1b      	lsreq	r3, r3, #8
   d9524:	3008      	addeq	r0, #8
   d9526:	071a      	lsls	r2, r3, #28
   d9528:	bf04      	itt	eq
   d952a:	091b      	lsreq	r3, r3, #4
   d952c:	3004      	addeq	r0, #4
   d952e:	079a      	lsls	r2, r3, #30
   d9530:	bf04      	itt	eq
   d9532:	089b      	lsreq	r3, r3, #2
   d9534:	3002      	addeq	r0, #2
   d9536:	07da      	lsls	r2, r3, #31
   d9538:	d403      	bmi.n	d9542 <__lo0bits+0x50>
   d953a:	085b      	lsrs	r3, r3, #1
   d953c:	f100 0001 	add.w	r0, r0, #1
   d9540:	d005      	beq.n	d954e <__lo0bits+0x5c>
   d9542:	600b      	str	r3, [r1, #0]
   d9544:	4770      	bx	lr
   d9546:	4610      	mov	r0, r2
   d9548:	e7e8      	b.n	d951c <__lo0bits+0x2a>
   d954a:	2000      	movs	r0, #0
   d954c:	4770      	bx	lr
   d954e:	2020      	movs	r0, #32
   d9550:	4770      	bx	lr

000d9552 <__i2b>:
   d9552:	b510      	push	{r4, lr}
   d9554:	460c      	mov	r4, r1
   d9556:	2101      	movs	r1, #1
   d9558:	f7ff fee4 	bl	d9324 <_Balloc>
   d955c:	2201      	movs	r2, #1
   d955e:	6144      	str	r4, [r0, #20]
   d9560:	6102      	str	r2, [r0, #16]
   d9562:	bd10      	pop	{r4, pc}

000d9564 <__multiply>:
   d9564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9568:	4615      	mov	r5, r2
   d956a:	690a      	ldr	r2, [r1, #16]
   d956c:	692b      	ldr	r3, [r5, #16]
   d956e:	429a      	cmp	r2, r3
   d9570:	bfb8      	it	lt
   d9572:	460b      	movlt	r3, r1
   d9574:	460c      	mov	r4, r1
   d9576:	bfbc      	itt	lt
   d9578:	462c      	movlt	r4, r5
   d957a:	461d      	movlt	r5, r3
   d957c:	6927      	ldr	r7, [r4, #16]
   d957e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d9582:	68a3      	ldr	r3, [r4, #8]
   d9584:	6861      	ldr	r1, [r4, #4]
   d9586:	eb07 0609 	add.w	r6, r7, r9
   d958a:	42b3      	cmp	r3, r6
   d958c:	bfb8      	it	lt
   d958e:	3101      	addlt	r1, #1
   d9590:	b085      	sub	sp, #20
   d9592:	f7ff fec7 	bl	d9324 <_Balloc>
   d9596:	f100 0114 	add.w	r1, r0, #20
   d959a:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d959e:	460b      	mov	r3, r1
   d95a0:	2200      	movs	r2, #0
   d95a2:	4543      	cmp	r3, r8
   d95a4:	d31d      	bcc.n	d95e2 <__multiply+0x7e>
   d95a6:	f104 0314 	add.w	r3, r4, #20
   d95aa:	f105 0214 	add.w	r2, r5, #20
   d95ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d95b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d95b6:	9302      	str	r3, [sp, #8]
   d95b8:	1b3b      	subs	r3, r7, r4
   d95ba:	3b15      	subs	r3, #21
   d95bc:	f023 0303 	bic.w	r3, r3, #3
   d95c0:	3304      	adds	r3, #4
   d95c2:	f104 0515 	add.w	r5, r4, #21
   d95c6:	42af      	cmp	r7, r5
   d95c8:	bf38      	it	cc
   d95ca:	2304      	movcc	r3, #4
   d95cc:	9301      	str	r3, [sp, #4]
   d95ce:	9b02      	ldr	r3, [sp, #8]
   d95d0:	9203      	str	r2, [sp, #12]
   d95d2:	4293      	cmp	r3, r2
   d95d4:	d808      	bhi.n	d95e8 <__multiply+0x84>
   d95d6:	2e00      	cmp	r6, #0
   d95d8:	dc5a      	bgt.n	d9690 <__multiply+0x12c>
   d95da:	6106      	str	r6, [r0, #16]
   d95dc:	b005      	add	sp, #20
   d95de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d95e2:	f843 2b04 	str.w	r2, [r3], #4
   d95e6:	e7dc      	b.n	d95a2 <__multiply+0x3e>
   d95e8:	f8b2 a000 	ldrh.w	sl, [r2]
   d95ec:	f1ba 0f00 	cmp.w	sl, #0
   d95f0:	d024      	beq.n	d963c <__multiply+0xd8>
   d95f2:	f104 0e14 	add.w	lr, r4, #20
   d95f6:	4689      	mov	r9, r1
   d95f8:	f04f 0c00 	mov.w	ip, #0
   d95fc:	f85e 5b04 	ldr.w	r5, [lr], #4
   d9600:	f8d9 b000 	ldr.w	fp, [r9]
   d9604:	b2ab      	uxth	r3, r5
   d9606:	fa1f fb8b 	uxth.w	fp, fp
   d960a:	fb0a b303 	mla	r3, sl, r3, fp
   d960e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d9612:	f8d9 5000 	ldr.w	r5, [r9]
   d9616:	4463      	add	r3, ip
   d9618:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d961c:	fb0a c50b 	mla	r5, sl, fp, ip
   d9620:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d9624:	b29b      	uxth	r3, r3
   d9626:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d962a:	4577      	cmp	r7, lr
   d962c:	f849 3b04 	str.w	r3, [r9], #4
   d9630:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d9634:	d8e2      	bhi.n	d95fc <__multiply+0x98>
   d9636:	9b01      	ldr	r3, [sp, #4]
   d9638:	f841 c003 	str.w	ip, [r1, r3]
   d963c:	9b03      	ldr	r3, [sp, #12]
   d963e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d9642:	3204      	adds	r2, #4
   d9644:	f1b9 0f00 	cmp.w	r9, #0
   d9648:	d020      	beq.n	d968c <__multiply+0x128>
   d964a:	680b      	ldr	r3, [r1, #0]
   d964c:	f104 0c14 	add.w	ip, r4, #20
   d9650:	468e      	mov	lr, r1
   d9652:	f04f 0a00 	mov.w	sl, #0
   d9656:	f8bc 5000 	ldrh.w	r5, [ip]
   d965a:	f8be b002 	ldrh.w	fp, [lr, #2]
   d965e:	fb09 b505 	mla	r5, r9, r5, fp
   d9662:	44aa      	add	sl, r5
   d9664:	b29b      	uxth	r3, r3
   d9666:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d966a:	f84e 3b04 	str.w	r3, [lr], #4
   d966e:	f85c 3b04 	ldr.w	r3, [ip], #4
   d9672:	f8be 5000 	ldrh.w	r5, [lr]
   d9676:	0c1b      	lsrs	r3, r3, #16
   d9678:	fb09 5303 	mla	r3, r9, r3, r5
   d967c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d9680:	4567      	cmp	r7, ip
   d9682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d9686:	d8e6      	bhi.n	d9656 <__multiply+0xf2>
   d9688:	9d01      	ldr	r5, [sp, #4]
   d968a:	514b      	str	r3, [r1, r5]
   d968c:	3104      	adds	r1, #4
   d968e:	e79e      	b.n	d95ce <__multiply+0x6a>
   d9690:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d9694:	2b00      	cmp	r3, #0
   d9696:	d1a0      	bne.n	d95da <__multiply+0x76>
   d9698:	3e01      	subs	r6, #1
   d969a:	e79c      	b.n	d95d6 <__multiply+0x72>

000d969c <__pow5mult>:
   d969c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d96a0:	4615      	mov	r5, r2
   d96a2:	f012 0203 	ands.w	r2, r2, #3
   d96a6:	4606      	mov	r6, r0
   d96a8:	460f      	mov	r7, r1
   d96aa:	d007      	beq.n	d96bc <__pow5mult+0x20>
   d96ac:	4c21      	ldr	r4, [pc, #132]	; (d9734 <__pow5mult+0x98>)
   d96ae:	3a01      	subs	r2, #1
   d96b0:	2300      	movs	r3, #0
   d96b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d96b6:	f7ff fe80 	bl	d93ba <__multadd>
   d96ba:	4607      	mov	r7, r0
   d96bc:	10ad      	asrs	r5, r5, #2
   d96be:	d035      	beq.n	d972c <__pow5mult+0x90>
   d96c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d96c2:	b93c      	cbnz	r4, d96d4 <__pow5mult+0x38>
   d96c4:	2010      	movs	r0, #16
   d96c6:	f7fc fbbf 	bl	d5e48 <malloc>
   d96ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d96ce:	6270      	str	r0, [r6, #36]	; 0x24
   d96d0:	6004      	str	r4, [r0, #0]
   d96d2:	60c4      	str	r4, [r0, #12]
   d96d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d96d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d96dc:	b94c      	cbnz	r4, d96f2 <__pow5mult+0x56>
   d96de:	f240 2171 	movw	r1, #625	; 0x271
   d96e2:	4630      	mov	r0, r6
   d96e4:	f7ff ff35 	bl	d9552 <__i2b>
   d96e8:	2300      	movs	r3, #0
   d96ea:	f8c8 0008 	str.w	r0, [r8, #8]
   d96ee:	4604      	mov	r4, r0
   d96f0:	6003      	str	r3, [r0, #0]
   d96f2:	f04f 0900 	mov.w	r9, #0
   d96f6:	07eb      	lsls	r3, r5, #31
   d96f8:	d50a      	bpl.n	d9710 <__pow5mult+0x74>
   d96fa:	4639      	mov	r1, r7
   d96fc:	4622      	mov	r2, r4
   d96fe:	4630      	mov	r0, r6
   d9700:	f7ff ff30 	bl	d9564 <__multiply>
   d9704:	4639      	mov	r1, r7
   d9706:	4680      	mov	r8, r0
   d9708:	4630      	mov	r0, r6
   d970a:	f7ff fe3f 	bl	d938c <_Bfree>
   d970e:	4647      	mov	r7, r8
   d9710:	106d      	asrs	r5, r5, #1
   d9712:	d00b      	beq.n	d972c <__pow5mult+0x90>
   d9714:	6820      	ldr	r0, [r4, #0]
   d9716:	b938      	cbnz	r0, d9728 <__pow5mult+0x8c>
   d9718:	4622      	mov	r2, r4
   d971a:	4621      	mov	r1, r4
   d971c:	4630      	mov	r0, r6
   d971e:	f7ff ff21 	bl	d9564 <__multiply>
   d9722:	6020      	str	r0, [r4, #0]
   d9724:	f8c0 9000 	str.w	r9, [r0]
   d9728:	4604      	mov	r4, r0
   d972a:	e7e4      	b.n	d96f6 <__pow5mult+0x5a>
   d972c:	4638      	mov	r0, r7
   d972e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9732:	bf00      	nop
   d9734:	000da550 	.word	0x000da550

000d9738 <__lshift>:
   d9738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d973c:	460c      	mov	r4, r1
   d973e:	6849      	ldr	r1, [r1, #4]
   d9740:	6923      	ldr	r3, [r4, #16]
   d9742:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d9746:	68a3      	ldr	r3, [r4, #8]
   d9748:	4607      	mov	r7, r0
   d974a:	4691      	mov	r9, r2
   d974c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9750:	f108 0601 	add.w	r6, r8, #1
   d9754:	42b3      	cmp	r3, r6
   d9756:	db3f      	blt.n	d97d8 <__lshift+0xa0>
   d9758:	4638      	mov	r0, r7
   d975a:	f7ff fde3 	bl	d9324 <_Balloc>
   d975e:	2300      	movs	r3, #0
   d9760:	4605      	mov	r5, r0
   d9762:	f100 0114 	add.w	r1, r0, #20
   d9766:	f100 0210 	add.w	r2, r0, #16
   d976a:	4618      	mov	r0, r3
   d976c:	4553      	cmp	r3, sl
   d976e:	db36      	blt.n	d97de <__lshift+0xa6>
   d9770:	6920      	ldr	r0, [r4, #16]
   d9772:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d9776:	f104 0314 	add.w	r3, r4, #20
   d977a:	f019 091f 	ands.w	r9, r9, #31
   d977e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d9782:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d9786:	d02e      	beq.n	d97e6 <__lshift+0xae>
   d9788:	f1c9 0e20 	rsb	lr, r9, #32
   d978c:	468a      	mov	sl, r1
   d978e:	2200      	movs	r2, #0
   d9790:	6818      	ldr	r0, [r3, #0]
   d9792:	fa00 f009 	lsl.w	r0, r0, r9
   d9796:	4302      	orrs	r2, r0
   d9798:	f84a 2b04 	str.w	r2, [sl], #4
   d979c:	f853 2b04 	ldr.w	r2, [r3], #4
   d97a0:	459c      	cmp	ip, r3
   d97a2:	fa22 f20e 	lsr.w	r2, r2, lr
   d97a6:	d8f3      	bhi.n	d9790 <__lshift+0x58>
   d97a8:	ebac 0304 	sub.w	r3, ip, r4
   d97ac:	3b15      	subs	r3, #21
   d97ae:	f023 0303 	bic.w	r3, r3, #3
   d97b2:	3304      	adds	r3, #4
   d97b4:	f104 0015 	add.w	r0, r4, #21
   d97b8:	4560      	cmp	r0, ip
   d97ba:	bf88      	it	hi
   d97bc:	2304      	movhi	r3, #4
   d97be:	50ca      	str	r2, [r1, r3]
   d97c0:	b10a      	cbz	r2, d97c6 <__lshift+0x8e>
   d97c2:	f108 0602 	add.w	r6, r8, #2
   d97c6:	3e01      	subs	r6, #1
   d97c8:	4638      	mov	r0, r7
   d97ca:	612e      	str	r6, [r5, #16]
   d97cc:	4621      	mov	r1, r4
   d97ce:	f7ff fddd 	bl	d938c <_Bfree>
   d97d2:	4628      	mov	r0, r5
   d97d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97d8:	3101      	adds	r1, #1
   d97da:	005b      	lsls	r3, r3, #1
   d97dc:	e7ba      	b.n	d9754 <__lshift+0x1c>
   d97de:	f842 0f04 	str.w	r0, [r2, #4]!
   d97e2:	3301      	adds	r3, #1
   d97e4:	e7c2      	b.n	d976c <__lshift+0x34>
   d97e6:	3904      	subs	r1, #4
   d97e8:	f853 2b04 	ldr.w	r2, [r3], #4
   d97ec:	f841 2f04 	str.w	r2, [r1, #4]!
   d97f0:	459c      	cmp	ip, r3
   d97f2:	d8f9      	bhi.n	d97e8 <__lshift+0xb0>
   d97f4:	e7e7      	b.n	d97c6 <__lshift+0x8e>

000d97f6 <__mcmp>:
   d97f6:	b530      	push	{r4, r5, lr}
   d97f8:	6902      	ldr	r2, [r0, #16]
   d97fa:	690c      	ldr	r4, [r1, #16]
   d97fc:	1b12      	subs	r2, r2, r4
   d97fe:	d10e      	bne.n	d981e <__mcmp+0x28>
   d9800:	f100 0314 	add.w	r3, r0, #20
   d9804:	3114      	adds	r1, #20
   d9806:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d980a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d980e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d9812:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d9816:	42a5      	cmp	r5, r4
   d9818:	d003      	beq.n	d9822 <__mcmp+0x2c>
   d981a:	d305      	bcc.n	d9828 <__mcmp+0x32>
   d981c:	2201      	movs	r2, #1
   d981e:	4610      	mov	r0, r2
   d9820:	bd30      	pop	{r4, r5, pc}
   d9822:	4283      	cmp	r3, r0
   d9824:	d3f3      	bcc.n	d980e <__mcmp+0x18>
   d9826:	e7fa      	b.n	d981e <__mcmp+0x28>
   d9828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d982c:	e7f7      	b.n	d981e <__mcmp+0x28>

000d982e <__mdiff>:
   d982e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9832:	460c      	mov	r4, r1
   d9834:	4606      	mov	r6, r0
   d9836:	4611      	mov	r1, r2
   d9838:	4620      	mov	r0, r4
   d983a:	4617      	mov	r7, r2
   d983c:	f7ff ffdb 	bl	d97f6 <__mcmp>
   d9840:	1e05      	subs	r5, r0, #0
   d9842:	d108      	bne.n	d9856 <__mdiff+0x28>
   d9844:	4629      	mov	r1, r5
   d9846:	4630      	mov	r0, r6
   d9848:	f7ff fd6c 	bl	d9324 <_Balloc>
   d984c:	2301      	movs	r3, #1
   d984e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d9852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9856:	bfa4      	itt	ge
   d9858:	463b      	movge	r3, r7
   d985a:	4627      	movge	r7, r4
   d985c:	4630      	mov	r0, r6
   d985e:	6879      	ldr	r1, [r7, #4]
   d9860:	bfa6      	itte	ge
   d9862:	461c      	movge	r4, r3
   d9864:	2500      	movge	r5, #0
   d9866:	2501      	movlt	r5, #1
   d9868:	f7ff fd5c 	bl	d9324 <_Balloc>
   d986c:	693e      	ldr	r6, [r7, #16]
   d986e:	60c5      	str	r5, [r0, #12]
   d9870:	6925      	ldr	r5, [r4, #16]
   d9872:	f107 0114 	add.w	r1, r7, #20
   d9876:	f104 0914 	add.w	r9, r4, #20
   d987a:	f100 0e14 	add.w	lr, r0, #20
   d987e:	f107 0210 	add.w	r2, r7, #16
   d9882:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d9886:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d988a:	46f2      	mov	sl, lr
   d988c:	2700      	movs	r7, #0
   d988e:	f859 3b04 	ldr.w	r3, [r9], #4
   d9892:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d9896:	fa1f f883 	uxth.w	r8, r3
   d989a:	fa17 f78b 	uxtah	r7, r7, fp
   d989e:	0c1b      	lsrs	r3, r3, #16
   d98a0:	eba7 0808 	sub.w	r8, r7, r8
   d98a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d98a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d98ac:	fa1f f888 	uxth.w	r8, r8
   d98b0:	141f      	asrs	r7, r3, #16
   d98b2:	454d      	cmp	r5, r9
   d98b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d98b8:	f84a 3b04 	str.w	r3, [sl], #4
   d98bc:	d8e7      	bhi.n	d988e <__mdiff+0x60>
   d98be:	1b2b      	subs	r3, r5, r4
   d98c0:	3b15      	subs	r3, #21
   d98c2:	f023 0303 	bic.w	r3, r3, #3
   d98c6:	3304      	adds	r3, #4
   d98c8:	3415      	adds	r4, #21
   d98ca:	42a5      	cmp	r5, r4
   d98cc:	bf38      	it	cc
   d98ce:	2304      	movcc	r3, #4
   d98d0:	4419      	add	r1, r3
   d98d2:	4473      	add	r3, lr
   d98d4:	469e      	mov	lr, r3
   d98d6:	460d      	mov	r5, r1
   d98d8:	4565      	cmp	r5, ip
   d98da:	d30e      	bcc.n	d98fa <__mdiff+0xcc>
   d98dc:	f10c 0203 	add.w	r2, ip, #3
   d98e0:	1a52      	subs	r2, r2, r1
   d98e2:	f022 0203 	bic.w	r2, r2, #3
   d98e6:	3903      	subs	r1, #3
   d98e8:	458c      	cmp	ip, r1
   d98ea:	bf38      	it	cc
   d98ec:	2200      	movcc	r2, #0
   d98ee:	441a      	add	r2, r3
   d98f0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d98f4:	b17b      	cbz	r3, d9916 <__mdiff+0xe8>
   d98f6:	6106      	str	r6, [r0, #16]
   d98f8:	e7ab      	b.n	d9852 <__mdiff+0x24>
   d98fa:	f855 8b04 	ldr.w	r8, [r5], #4
   d98fe:	fa17 f488 	uxtah	r4, r7, r8
   d9902:	1422      	asrs	r2, r4, #16
   d9904:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d9908:	b2a4      	uxth	r4, r4
   d990a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d990e:	f84e 4b04 	str.w	r4, [lr], #4
   d9912:	1417      	asrs	r7, r2, #16
   d9914:	e7e0      	b.n	d98d8 <__mdiff+0xaa>
   d9916:	3e01      	subs	r6, #1
   d9918:	e7ea      	b.n	d98f0 <__mdiff+0xc2>
	...

000d991c <__ulp>:
   d991c:	b082      	sub	sp, #8
   d991e:	ed8d 0b00 	vstr	d0, [sp]
   d9922:	9b01      	ldr	r3, [sp, #4]
   d9924:	4912      	ldr	r1, [pc, #72]	; (d9970 <__ulp+0x54>)
   d9926:	4019      	ands	r1, r3
   d9928:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d992c:	2900      	cmp	r1, #0
   d992e:	dd05      	ble.n	d993c <__ulp+0x20>
   d9930:	2200      	movs	r2, #0
   d9932:	460b      	mov	r3, r1
   d9934:	ec43 2b10 	vmov	d0, r2, r3
   d9938:	b002      	add	sp, #8
   d993a:	4770      	bx	lr
   d993c:	4249      	negs	r1, r1
   d993e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d9942:	ea4f 5021 	mov.w	r0, r1, asr #20
   d9946:	f04f 0200 	mov.w	r2, #0
   d994a:	f04f 0300 	mov.w	r3, #0
   d994e:	da04      	bge.n	d995a <__ulp+0x3e>
   d9950:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d9954:	fa41 f300 	asr.w	r3, r1, r0
   d9958:	e7ec      	b.n	d9934 <__ulp+0x18>
   d995a:	f1a0 0114 	sub.w	r1, r0, #20
   d995e:	291e      	cmp	r1, #30
   d9960:	bfda      	itte	le
   d9962:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d9966:	fa20 f101 	lsrle.w	r1, r0, r1
   d996a:	2101      	movgt	r1, #1
   d996c:	460a      	mov	r2, r1
   d996e:	e7e1      	b.n	d9934 <__ulp+0x18>
   d9970:	7ff00000 	.word	0x7ff00000

000d9974 <__b2d>:
   d9974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9976:	6905      	ldr	r5, [r0, #16]
   d9978:	f100 0714 	add.w	r7, r0, #20
   d997c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d9980:	1f2e      	subs	r6, r5, #4
   d9982:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9986:	4620      	mov	r0, r4
   d9988:	f7ff fd93 	bl	d94b2 <__hi0bits>
   d998c:	f1c0 0320 	rsb	r3, r0, #32
   d9990:	280a      	cmp	r0, #10
   d9992:	f8df c07c 	ldr.w	ip, [pc, #124]	; d9a10 <__b2d+0x9c>
   d9996:	600b      	str	r3, [r1, #0]
   d9998:	dc14      	bgt.n	d99c4 <__b2d+0x50>
   d999a:	f1c0 0e0b 	rsb	lr, r0, #11
   d999e:	fa24 f10e 	lsr.w	r1, r4, lr
   d99a2:	42b7      	cmp	r7, r6
   d99a4:	ea41 030c 	orr.w	r3, r1, ip
   d99a8:	bf34      	ite	cc
   d99aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d99ae:	2100      	movcs	r1, #0
   d99b0:	3015      	adds	r0, #21
   d99b2:	fa04 f000 	lsl.w	r0, r4, r0
   d99b6:	fa21 f10e 	lsr.w	r1, r1, lr
   d99ba:	ea40 0201 	orr.w	r2, r0, r1
   d99be:	ec43 2b10 	vmov	d0, r2, r3
   d99c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d99c4:	42b7      	cmp	r7, r6
   d99c6:	bf3a      	itte	cc
   d99c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d99cc:	f1a5 0608 	subcc.w	r6, r5, #8
   d99d0:	2100      	movcs	r1, #0
   d99d2:	380b      	subs	r0, #11
   d99d4:	d017      	beq.n	d9a06 <__b2d+0x92>
   d99d6:	f1c0 0c20 	rsb	ip, r0, #32
   d99da:	fa04 f500 	lsl.w	r5, r4, r0
   d99de:	42be      	cmp	r6, r7
   d99e0:	fa21 f40c 	lsr.w	r4, r1, ip
   d99e4:	ea45 0504 	orr.w	r5, r5, r4
   d99e8:	bf8c      	ite	hi
   d99ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d99ee:	2400      	movls	r4, #0
   d99f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d99f4:	fa01 f000 	lsl.w	r0, r1, r0
   d99f8:	fa24 f40c 	lsr.w	r4, r4, ip
   d99fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9a00:	ea40 0204 	orr.w	r2, r0, r4
   d9a04:	e7db      	b.n	d99be <__b2d+0x4a>
   d9a06:	ea44 030c 	orr.w	r3, r4, ip
   d9a0a:	460a      	mov	r2, r1
   d9a0c:	e7d7      	b.n	d99be <__b2d+0x4a>
   d9a0e:	bf00      	nop
   d9a10:	3ff00000 	.word	0x3ff00000

000d9a14 <__d2b>:
   d9a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9a18:	4689      	mov	r9, r1
   d9a1a:	2101      	movs	r1, #1
   d9a1c:	ec57 6b10 	vmov	r6, r7, d0
   d9a20:	4690      	mov	r8, r2
   d9a22:	f7ff fc7f 	bl	d9324 <_Balloc>
   d9a26:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d9a2a:	4604      	mov	r4, r0
   d9a2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d9a30:	bb35      	cbnz	r5, d9a80 <__d2b+0x6c>
   d9a32:	2e00      	cmp	r6, #0
   d9a34:	9301      	str	r3, [sp, #4]
   d9a36:	d028      	beq.n	d9a8a <__d2b+0x76>
   d9a38:	4668      	mov	r0, sp
   d9a3a:	9600      	str	r6, [sp, #0]
   d9a3c:	f7ff fd59 	bl	d94f2 <__lo0bits>
   d9a40:	9900      	ldr	r1, [sp, #0]
   d9a42:	b300      	cbz	r0, d9a86 <__d2b+0x72>
   d9a44:	9a01      	ldr	r2, [sp, #4]
   d9a46:	f1c0 0320 	rsb	r3, r0, #32
   d9a4a:	fa02 f303 	lsl.w	r3, r2, r3
   d9a4e:	430b      	orrs	r3, r1
   d9a50:	40c2      	lsrs	r2, r0
   d9a52:	6163      	str	r3, [r4, #20]
   d9a54:	9201      	str	r2, [sp, #4]
   d9a56:	9b01      	ldr	r3, [sp, #4]
   d9a58:	61a3      	str	r3, [r4, #24]
   d9a5a:	2b00      	cmp	r3, #0
   d9a5c:	bf14      	ite	ne
   d9a5e:	2202      	movne	r2, #2
   d9a60:	2201      	moveq	r2, #1
   d9a62:	6122      	str	r2, [r4, #16]
   d9a64:	b1d5      	cbz	r5, d9a9c <__d2b+0x88>
   d9a66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d9a6a:	4405      	add	r5, r0
   d9a6c:	f8c9 5000 	str.w	r5, [r9]
   d9a70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9a74:	f8c8 0000 	str.w	r0, [r8]
   d9a78:	4620      	mov	r0, r4
   d9a7a:	b003      	add	sp, #12
   d9a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9a84:	e7d5      	b.n	d9a32 <__d2b+0x1e>
   d9a86:	6161      	str	r1, [r4, #20]
   d9a88:	e7e5      	b.n	d9a56 <__d2b+0x42>
   d9a8a:	a801      	add	r0, sp, #4
   d9a8c:	f7ff fd31 	bl	d94f2 <__lo0bits>
   d9a90:	9b01      	ldr	r3, [sp, #4]
   d9a92:	6163      	str	r3, [r4, #20]
   d9a94:	2201      	movs	r2, #1
   d9a96:	6122      	str	r2, [r4, #16]
   d9a98:	3020      	adds	r0, #32
   d9a9a:	e7e3      	b.n	d9a64 <__d2b+0x50>
   d9a9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d9aa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9aa4:	f8c9 0000 	str.w	r0, [r9]
   d9aa8:	6918      	ldr	r0, [r3, #16]
   d9aaa:	f7ff fd02 	bl	d94b2 <__hi0bits>
   d9aae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d9ab2:	e7df      	b.n	d9a74 <__d2b+0x60>

000d9ab4 <__ratio>:
   d9ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ab8:	4688      	mov	r8, r1
   d9aba:	4669      	mov	r1, sp
   d9abc:	4681      	mov	r9, r0
   d9abe:	f7ff ff59 	bl	d9974 <__b2d>
   d9ac2:	a901      	add	r1, sp, #4
   d9ac4:	4640      	mov	r0, r8
   d9ac6:	ec55 4b10 	vmov	r4, r5, d0
   d9aca:	f7ff ff53 	bl	d9974 <__b2d>
   d9ace:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9ad2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9ad6:	eba3 0c02 	sub.w	ip, r3, r2
   d9ada:	e9dd 3200 	ldrd	r3, r2, [sp]
   d9ade:	1a9b      	subs	r3, r3, r2
   d9ae0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d9ae4:	ec51 0b10 	vmov	r0, r1, d0
   d9ae8:	2b00      	cmp	r3, #0
   d9aea:	bfd6      	itet	le
   d9aec:	460a      	movle	r2, r1
   d9aee:	462a      	movgt	r2, r5
   d9af0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d9af4:	468b      	mov	fp, r1
   d9af6:	462f      	mov	r7, r5
   d9af8:	bfd4      	ite	le
   d9afa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d9afe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d9b02:	4620      	mov	r0, r4
   d9b04:	ee10 2a10 	vmov	r2, s0
   d9b08:	465b      	mov	r3, fp
   d9b0a:	4639      	mov	r1, r7
   d9b0c:	f7fd fefa 	bl	d7904 <__aeabi_ddiv>
   d9b10:	ec41 0b10 	vmov	d0, r0, r1
   d9b14:	b003      	add	sp, #12
   d9b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9b1a <__copybits>:
   d9b1a:	3901      	subs	r1, #1
   d9b1c:	b570      	push	{r4, r5, r6, lr}
   d9b1e:	1149      	asrs	r1, r1, #5
   d9b20:	6914      	ldr	r4, [r2, #16]
   d9b22:	3101      	adds	r1, #1
   d9b24:	f102 0314 	add.w	r3, r2, #20
   d9b28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9b2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9b30:	1f05      	subs	r5, r0, #4
   d9b32:	42a3      	cmp	r3, r4
   d9b34:	d30c      	bcc.n	d9b50 <__copybits+0x36>
   d9b36:	1aa3      	subs	r3, r4, r2
   d9b38:	3b11      	subs	r3, #17
   d9b3a:	f023 0303 	bic.w	r3, r3, #3
   d9b3e:	3211      	adds	r2, #17
   d9b40:	42a2      	cmp	r2, r4
   d9b42:	bf88      	it	hi
   d9b44:	2300      	movhi	r3, #0
   d9b46:	4418      	add	r0, r3
   d9b48:	2300      	movs	r3, #0
   d9b4a:	4288      	cmp	r0, r1
   d9b4c:	d305      	bcc.n	d9b5a <__copybits+0x40>
   d9b4e:	bd70      	pop	{r4, r5, r6, pc}
   d9b50:	f853 6b04 	ldr.w	r6, [r3], #4
   d9b54:	f845 6f04 	str.w	r6, [r5, #4]!
   d9b58:	e7eb      	b.n	d9b32 <__copybits+0x18>
   d9b5a:	f840 3b04 	str.w	r3, [r0], #4
   d9b5e:	e7f4      	b.n	d9b4a <__copybits+0x30>

000d9b60 <__any_on>:
   d9b60:	f100 0214 	add.w	r2, r0, #20
   d9b64:	6900      	ldr	r0, [r0, #16]
   d9b66:	114b      	asrs	r3, r1, #5
   d9b68:	4298      	cmp	r0, r3
   d9b6a:	b510      	push	{r4, lr}
   d9b6c:	db11      	blt.n	d9b92 <__any_on+0x32>
   d9b6e:	dd0a      	ble.n	d9b86 <__any_on+0x26>
   d9b70:	f011 011f 	ands.w	r1, r1, #31
   d9b74:	d007      	beq.n	d9b86 <__any_on+0x26>
   d9b76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9b7a:	fa24 f001 	lsr.w	r0, r4, r1
   d9b7e:	fa00 f101 	lsl.w	r1, r0, r1
   d9b82:	428c      	cmp	r4, r1
   d9b84:	d10b      	bne.n	d9b9e <__any_on+0x3e>
   d9b86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9b8a:	4293      	cmp	r3, r2
   d9b8c:	d803      	bhi.n	d9b96 <__any_on+0x36>
   d9b8e:	2000      	movs	r0, #0
   d9b90:	bd10      	pop	{r4, pc}
   d9b92:	4603      	mov	r3, r0
   d9b94:	e7f7      	b.n	d9b86 <__any_on+0x26>
   d9b96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9b9a:	2900      	cmp	r1, #0
   d9b9c:	d0f5      	beq.n	d9b8a <__any_on+0x2a>
   d9b9e:	2001      	movs	r0, #1
   d9ba0:	e7f6      	b.n	d9b90 <__any_on+0x30>

000d9ba2 <_calloc_r>:
   d9ba2:	b513      	push	{r0, r1, r4, lr}
   d9ba4:	434a      	muls	r2, r1
   d9ba6:	4611      	mov	r1, r2
   d9ba8:	9201      	str	r2, [sp, #4]
   d9baa:	f7fc f97d 	bl	d5ea8 <_malloc_r>
   d9bae:	4604      	mov	r4, r0
   d9bb0:	b118      	cbz	r0, d9bba <_calloc_r+0x18>
   d9bb2:	9a01      	ldr	r2, [sp, #4]
   d9bb4:	2100      	movs	r1, #0
   d9bb6:	f7fe f907 	bl	d7dc8 <memset>
   d9bba:	4620      	mov	r0, r4
   d9bbc:	b002      	add	sp, #8
   d9bbe:	bd10      	pop	{r4, pc}

000d9bc0 <nan>:
   d9bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9bc8 <nan+0x8>
   d9bc4:	4770      	bx	lr
   d9bc6:	bf00      	nop
   d9bc8:	00000000 	.word	0x00000000
   d9bcc:	7ff80000 	.word	0x7ff80000

000d9bd0 <__ascii_wctomb>:
   d9bd0:	b149      	cbz	r1, d9be6 <__ascii_wctomb+0x16>
   d9bd2:	2aff      	cmp	r2, #255	; 0xff
   d9bd4:	bf85      	ittet	hi
   d9bd6:	238a      	movhi	r3, #138	; 0x8a
   d9bd8:	6003      	strhi	r3, [r0, #0]
   d9bda:	700a      	strbls	r2, [r1, #0]
   d9bdc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d9be0:	bf98      	it	ls
   d9be2:	2001      	movls	r0, #1
   d9be4:	4770      	bx	lr
   d9be6:	4608      	mov	r0, r1
   d9be8:	4770      	bx	lr
	...

000d9bec <__aeabi_d2lz>:
   d9bec:	b538      	push	{r3, r4, r5, lr}
   d9bee:	2200      	movs	r2, #0
   d9bf0:	2300      	movs	r3, #0
   d9bf2:	4604      	mov	r4, r0
   d9bf4:	460d      	mov	r5, r1
   d9bf6:	f7fd ffcd 	bl	d7b94 <__aeabi_dcmplt>
   d9bfa:	b928      	cbnz	r0, d9c08 <__aeabi_d2lz+0x1c>
   d9bfc:	4620      	mov	r0, r4
   d9bfe:	4629      	mov	r1, r5
   d9c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9c04:	f7fe b85e 	b.w	d7cc4 <__aeabi_d2ulz>
   d9c08:	4620      	mov	r0, r4
   d9c0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d9c0e:	f7fe f859 	bl	d7cc4 <__aeabi_d2ulz>
   d9c12:	4240      	negs	r0, r0
   d9c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9c18:	bd38      	pop	{r3, r4, r5, pc}
   d9c1a:	bf00      	nop

000d9c1c <dynalib_user>:
   d9c1c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9c2c:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   d9c3c:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   d9c4c:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   d9c5c:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   d9c6c:	4e00 206f 6144 6174 5500 6962 6f64 7374     .No Data.Ubidots
   d9c7c:	4820 6f6f 006b 6552 7073 6e6f 6573 5220      Hook.Response R
   d9c8c:	6365 6965 6576 0064 7453 7461 0065 6553     eceived.State.Se
   d9c9c:	2074 6556 6272 736f 2065 6f4d 6564 3000     t Verbose Mode.0
   d9cac:	4300 656c 7261 6465 5620 7265 6f62 6573     .Cleared Verbose
   d9cbc:	4d20 646f 0065 6f4c 6461 6e69 2067 7953      Mode.Loading Sy
   d9ccc:	7473 6d65 4420 6665 7561 746c 0073 6f4c     stem Defaults.Lo
   d9cdc:	6461 6e69 2067 6c41 7265 2074 6544 6166     ading Alert Defa
   d9cec:	6c75 7374 7b00 5422 6d65 6570 6172 7574     ults.{"Temperatu
   d9cfc:	6572 3a22 3425 312e 2c66 2220 7548 696d     re":%4.1f, "Humi
   d9d0c:	6964 7974 3a22 3425 312e 2c66 4222 7461     dity":%4.1f,"Bat
   d9d1c:	6574 7972 3a22 6925 007d 7473 726f 6761     tery":%i}.storag
   d9d2c:	2d65 6166 6963 696c 7974 682d 6f6f 006b     e-facility-hook.
   d9d3c:	7246 6d6f 2520 2073 6f74 2520 0073 7453     From %s to %s.St
   d9d4c:	7461 2065 7254 6e61 6973 6974 6e6f 5400     ate Transition.T
   d9d5c:	6d65 5f70 614d 2078 203a 3325 312e 0066     emp_Max : %3.1f.
   d9d6c:	6554 706d 4d5f 6e69 3a20 2520 2e33 6631     Temp_Min : %3.1f
   d9d7c:	4800 6d75 6469 7469 5f79 614d 3a78 2520     .Humidity_Max: %
   d9d8c:	2e33 6631 4800 6d75 6469 7469 5f79 694d     3.1f.Humidity_Mi
   d9d9c:	206e 203a 3325 312e 0066 7055 6570 2072     n : %3.1f.Upper 
   d9dac:	6854 6572 6873 6c6f 2064 6553 0074 6f4c     Threshold Set.Lo
   d9dbc:	6577 2072 6854 6572 6873 6c6f 2064 6553     wer Threshold Se
   d9dcc:	0074 3425 312e 2a66 0043 3425 312e 2566     t.%4.1f*C.%4.1f%
   d9ddc:	0025 6925 2520 0025 6552 656c 7361 0065     %.%i %%.Release.
   d9dec:	6574 706d 7265 7461 7275 0065 7568 696d     temperature.humi
   d9dfc:	6964 7974 7400 6d65 6570 6172 7574 6572     dity.temperature
   d9e0c:	552d 7070 7265 7400 6d65 6570 6172 7574     -Upper.temperatu
   d9e1c:	6572 6c2d 776f 7265 6800 6d75 6469 7469     re-lower.humidit
   d9e2c:	2d79 7075 6570 0072 7568 696d 6964 7974     y-upper.humidity
   d9e3c:	6c2d 776f 7265 4200 7461 6574 7972 4200     -lower.Battery.B
   d9e4c:	7461 6574 7972 6f43 746e 7865 0074 654d     atteryContext.Me
   d9e5c:	7361 7275 2d65 6f4e 0077 6556 6272 736f     asure-Now.Verbos
   d9e6c:	2d65 6f4d 6564 5400 6d65 2d70 7055 6570     e-Mode.Temp-Uppe
   d9e7c:	2d72 694c 696d 0074 6554 706d 4c2d 776f     r-Limit.Temp-Low
   d9e8c:	7265 4c2d 6d69 7469 4800 6d75 6469 7469     er-Limit.Humidit
   d9e9c:	2d79 6f4c 6577 2d72 694c 696d 0074 7548     y-Lower-Limit.Hu
   d9eac:	696d 7464 2d79 7075 6570 2d72 694c 696d     midty-upper-Limi
   d9ebc:	0074 6954 656d 4500 7272 726f 2d20 5320     t.Time.Error - S
   d9ecc:	5448 3133 4920 696e 6974 6c61 7a69 7461     HT31 Initializat
   d9edc:	6f69 006e 7453 7261 7574 0070 7073 7261     ion.Startup.spar
   d9eec:	2f6b 6564 6976 6563 732f 7365 6973 6e6f     k/device/session
   d9efc:	652f 646e 4500 7272 726f 5320 6174 6574     /end.Error State
   d9f0c:	2d20 5220 7365 7465 0000 0000                - Reset....

000d9f18 <_ZTV17PublishQueueAsync>:
	...
   d9f20:	40f1 000d 4105 000d 5365 000d 54f1 000d     .@...A..eS...T..
   d9f30:	54b1 000d 548f 000d 5637 000d 54d7 000d     .T...T..7V...T..

000d9f40 <_ZTV8MB85RC64>:
	...
   d9f48:	4119 000d 412d 000d 5121 000d 51b7 000d     .A..-A..!Q...Q..
   d9f58:	5239 000d 9c30 000d 9c38 000d 9c3c 000d     9R..0...8...<...
   d9f68:	9c45 000d 9c4d 000d 9c59 000d 9c5f 000d     E...M...Y..._...
   d9f78:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   d9f88:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000d9fb8 <_ZL13releaseNumber>:
   d9fb8:	3131 302e 0031 0000                         11.01...

000d9fc0 <_ZL17FRAMversionNumber>:
   d9fc0:	0003 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   d9fd0:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   d9fe0:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000d9ff0 <_ZTV6MB85RC>:
	...
   d9ff8:	5041 000d 5043 000d 5121 000d 51b7 000d     AP..CP..!Q...Q..
   da008:	5239 000d 7550 6c62 7369 5168 6575 6575     9R..PublishQueue
   da018:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   da028:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   da038:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   da048:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   da058:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   da068:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   da078:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   da088:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   da098:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   da0a8:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   da0b8:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000da0c8 <_ZTV21PublishQueueAsyncBase>:
	...
   da0d8:	5365 000d 40a5 000d 40a5 000d 40a5 000d     eS...@...@...@..
   da0e8:	40a5 000d 40a5 000d                         .@...@..

000da0f0 <_ZTV25PublishQueueAsyncRetained>:
	...
   da0f8:	544d 000d 5461 000d 5365 000d 54f1 000d     MT..aT..eS...T..
   da108:	54b1 000d 548f 000d 5637 000d 54d7 000d     .T...T..7V...T..

000da118 <_ZTVN5spark13CellularClassE>:
	...
   da120:	5fe3 000d 5fd9 000d 5fcf 000d 5f85 000d     ._..._..._..._..
   da130:	5fc3 000d 5fb7 000d 5fab 000d 5fa3 000d     ._..._..._..._..
   da140:	5f99 000d 5f8f 000d 6919 000d               ._..._...i..

000da14c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da154:	601d 000d 6023 000d 6061 000d 6031 000d     .`..#`..a`..1`..
   da164:	601f 000d                                   .`..

000da168 <_ZTVN5spark13EthernetClassE>:
	...
   da170:	6627 000d 661d 000d 6613 000d 6609 000d     'f...f...f...f..
   da180:	65fd 000d 65f1 000d 65e5 000d 65dd 000d     .e...e...e...e..
   da190:	65d3 000d 65c9 000d 6919 000d               .e...e...i..

000da19c <_ZTV7TwoWire>:
	...
   da1a4:	6645 000d 668f 000d 6667 000d 6647 000d     Ef...f..gf..Gf..
   da1b4:	666f 000d 6677 000d 667f 000d 6687 000d     of..wf...f...f..

000da1c4 <_ZTV9IPAddress>:
	...
   da1cc:	67cd 000d 67bd 000d 67bf 000d 7061 0070     .g...g...g..app.

000da1dc <_ZTVN5spark12NetworkClassE>:
	...
   da1e4:	68b1 000d 68bb 000d 68c5 000d 68cf 000d     .h...h...h...h..
   da1f4:	68d9 000d 68e5 000d 68f1 000d 68fd 000d     .h...h...h...h..
   da204:	6905 000d 690f 000d 6919 000d 5925 252d     .i...i...i..%Y-%
   da214:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   da224:	7361 7463 6d69 0065                         asctime.

000da22c <_ZTV11USARTSerial>:
	...
   da234:	6e4d 000d 6eb9 000d 6e91 000d 6a01 000d     Mn...n...n...j..
   da244:	6e61 000d 6e7d 000d 6e6f 000d 6e8b 000d     an..}n..on...n..
   da254:	6e4f 000d 6e53 000d                         On..Sn..

000da25c <_ZTV9USBSerial>:
	...
   da264:	6f4d 000d 6fb5 000d 6f8b 000d 6a01 000d     Mo...o...o...j..
   da274:	6f7d 000d 6f4f 000d 6f5f 000d 6faf 000d     }o..Oo.._o...o..
   da284:	6f6f 000d 6f49 000d                         oo..Io..

000da28c <_ZSt7nothrow>:
   da28c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   da29c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000da2ad <day_name.6145>:
   da2ad:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   da2bd:	6972 6153                                    riSat

000da2c2 <mon_name.6146>:
   da2c2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   da2d2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   da2e2:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000da2f4 <fpi.7566>:
   da2f4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   da304:	0000 0000                                   ....

000da308 <fpinan.7602>:
   da308:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000da320 <tinytens>:
   da320:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   da330:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   da340:	6f43 64ac 0628 1168                         Co.d(.h.

000da348 <_ctype_>:
   da348:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da358:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da368:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da378:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da388:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da398:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da3a8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da3b8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da3c8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   da448:	2e00 0000                                   ....

000da44c <_C_numeric_locale>:
   da44c:	a449 000d a2ac 000d e2e8 2003 4f50 4953     I.......... POSI
   da45c:	0058 0000                                   X...

000da460 <__mprec_bigtens>:
   da460:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   da470:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   da480:	bf3c 7f73 4fdd 7515                         <.s..O.u

000da488 <__mprec_tens>:
   da488:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   da498:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   da4a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   da4b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   da4c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   da4d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   da4e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   da4f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   da508:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   da518:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   da528:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   da538:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   da548:	9db4 79d9 7843 44ea                         ...yCx.D

000da550 <p05.7490>:
   da550:	0005 0000 0019 0000 007d 0000               ........}...

000da55c <link_const_variable_data_end>:
   da55c:	000d4dbd 	.word	0x000d4dbd
   da560:	000d58c9 	.word	0x000d58c9
   da564:	000d5f5d 	.word	0x000d5f5d
   da568:	000d5fed 	.word	0x000d5fed
   da56c:	000d6631 	.word	0x000d6631
   da570:	000d68a1 	.word	0x000d68a1
   da574:	000d69ed 	.word	0x000d69ed
   da578:	000d6acd 	.word	0x000d6acd
   da57c:	000d6c91 	.word	0x000d6c91
   da580:	000d6e39 	.word	0x000d6e39

000da584 <link_constructors_end>:
	...
