
/Users/chipmc/Documents/Maker/Particle/Projects/IDD_Cold-Chain/target/2.0.1/boron/IDD_Cold-Chain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000074f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000db510  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002a8  2003e170  000dbd14  0001e170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003d8  2003e418  2003e418  0002e418  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dbfbc  000dbfbc  0002bfbc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dbfe8  000dbfe8  0002bfe8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019225e  00000000  00000000  0002bfec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a11b  00000000  00000000  001be24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000320d6  00000000  00000000  001d8365  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f38  00000000  00000000  0020a43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008908  00000000  00000000  0020d373  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003cdaf  00000000  00000000  00215c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000425fd  00000000  00000000  00252a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011240c  00000000  00000000  00295027  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000895c  00000000  00000000  003a7434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd9b 	bl	d8b6c <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fdbd 	bl	d8bbc <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e170 	.word	0x2003e170
   d404c:	000dbd14 	.word	0x000dbd14
   d4050:	2003e418 	.word	0x2003e418
   d4054:	2003e418 	.word	0x2003e418
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 ff3d 	bl	d7ee0 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db4dc 	.word	0x000db4dc
   d4080:	000db508 	.word	0x000db508

000d4084 <module_user_setup>:
   d4084:	f000 be9c 	b.w	d4dc0 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 fd8f 	bl	d4bac <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f003 bee7 	b.w	d7e64 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bcf1 	b.w	d6a7c <malloc>

000d409a <_Znaj>:
   d409a:	f002 bcef 	b.w	d6a7c <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bcf5 	b.w	d6a8c <free>
	...

000d40a4 <__cxa_pure_virtual>:
   d40a4:	b508      	push	{r3, lr}
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fbbe 	bl	d682c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d657d 	.word	0x000d657d

000d40b8 <__cxa_guard_acquire>:
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5c9 	.word	0x2003e5c9

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fb97 	bl	d7826 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000daa63 	.word	0x000daa63
   d4108:	2003e568 	.word	0x2003e568

000d410c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d410c:	6943      	ldr	r3, [r0, #20]
   d410e:	b113      	cbz	r3, d4116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4110:	6983      	ldr	r3, [r0, #24]
   d4112:	300c      	adds	r0, #12
   d4114:	4718      	bx	r3
            callback();
        }
    }
   d4116:	4770      	bx	lr

000d4118 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f001 fb72 	bl	d5808 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000dad88 	.word	0x000dad88

000d412c <_ZN17PublishQueueAsyncD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN17PublishQueueAsyncD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2138      	movs	r1, #56	; 0x38
   d4138:	f003 ffdd 	bl	d80f6 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4140:	b510      	push	{r4, lr}
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_ZN8MB85RC64D1Ev+0x10>)
   d4144:	6003      	str	r3, [r0, #0]
   d4146:	4604      	mov	r4, r0
   d4148:	f001 f962 	bl	d5410 <_ZN6MB85RCD1Ev>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}
   d4150:	000dadb0 	.word	0x000dadb0

000d4154 <_ZN8MB85RC64D0Ev>:
   d4154:	b510      	push	{r4, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	f7ff fff2 	bl	d4140 <_ZN8MB85RC64D1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	2110      	movs	r1, #16
   d4160:	f003 ffc9 	bl	d80f6 <_ZdlPvj>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}

000d4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d416a:	2100      	movs	r1, #0
   d416c:	4604      	mov	r4, r0
   d416e:	4608      	mov	r0, r1
   d4170:	f002 f98c 	bl	d648c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4176:	4620      	mov	r0, r4
   d4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d417c:	f002 f99e 	bl	d64bc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4182:	b10c      	cbz	r4, d4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4184:	2301      	movs	r3, #1
   d4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4188:	2100      	movs	r1, #0
   d418a:	2001      	movs	r0, #1
   d418c:	f002 f97e 	bl	d648c <os_thread_scheduling>
            }
        }
        if (t) {
   d4190:	b12c      	cbz	r4, d419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	4620      	mov	r0, r4
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	4798      	blx	r3
            t->running = false;
   d419a:	2300      	movs	r3, #0
   d419c:	7123      	strb	r3, [r4, #4]
        }
    }
   d419e:	b002      	add	sp, #8
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a2:	b510      	push	{r4, lr}
   d41a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a6:	6800      	ldr	r0, [r0, #0]
   d41a8:	b108      	cbz	r0, d41ae <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41aa:	f002 fc6f 	bl	d6a8c <free>
class SystemClass {
   d41ae:	4620      	mov	r0, r4
   d41b0:	bd10      	pop	{r4, pc}

000d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41b2:	2300      	movs	r3, #0
   d41b4:	2204      	movs	r2, #4
   d41b6:	f002 bbb1 	b.w	d691c <spark_variable>
	...

000d41bc <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d41bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d41be:	4b10      	ldr	r3, [pc, #64]	; (d4200 <_Z16keepAliveMessagev+0x44>)
   d41c0:	4a10      	ldr	r2, [pc, #64]	; (d4204 <_Z16keepAliveMessagev+0x48>)
   d41c2:	781b      	ldrb	r3, [r3, #0]
   d41c4:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41c6:	4910      	ldr	r1, [pc, #64]	; (d4208 <_Z16keepAliveMessagev+0x4c>)
   d41c8:	4313      	orrs	r3, r2
   d41ca:	f88d 3000 	strb.w	r3, [sp]
   d41ce:	2200      	movs	r2, #0
   d41d0:	233c      	movs	r3, #60	; 0x3c
   d41d2:	a802      	add	r0, sp, #8
   d41d4:	f002 feb4 	bl	d6f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41d8:	9c03      	ldr	r4, [sp, #12]
   d41da:	b17c      	cbz	r4, d41fc <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d41dc:	6863      	ldr	r3, [r4, #4]
   d41de:	3b01      	subs	r3, #1
   d41e0:	6063      	str	r3, [r4, #4]
   d41e2:	b95b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	4620      	mov	r0, r4
   d41e8:	689b      	ldr	r3, [r3, #8]
   d41ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41ec:	68a3      	ldr	r3, [r4, #8]
   d41ee:	3b01      	subs	r3, #1
   d41f0:	60a3      	str	r3, [r4, #8]
   d41f2:	b91b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d41f4:	6823      	ldr	r3, [r4, #0]
   d41f6:	4620      	mov	r0, r4
   d41f8:	68db      	ldr	r3, [r3, #12]
   d41fa:	4798      	blx	r3
}
   d41fc:	b004      	add	sp, #16
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	2003e428 	.word	0x2003e428
   d4204:	2003e429 	.word	0x2003e429
   d4208:	000daa65 	.word	0x000daa65

000d420c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d420c:	b510      	push	{r4, lr}
      if (_M_manager)
   d420e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4210:	4604      	mov	r4, r0
      if (_M_manager)
   d4212:	b113      	cbz	r3, d421a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4214:	2203      	movs	r2, #3
   d4216:	4601      	mov	r1, r0
   d4218:	4798      	blx	r3
    }
   d421a:	4620      	mov	r0, r4
   d421c:	bd10      	pop	{r4, pc}
	...

000d4220 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4222:	4b13      	ldr	r3, [pc, #76]	; (d4270 <_ZN5TimerD1Ev+0x50>)
   d4224:	6003      	str	r3, [r0, #0]
   d4226:	4604      	mov	r4, r0
        if (handle) {
   d4228:	6880      	ldr	r0, [r0, #8]
   d422a:	b1c8      	cbz	r0, d4260 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d422c:	2500      	movs	r5, #0
   d422e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4232:	e9cd 3500 	strd	r3, r5, [sp]
   d4236:	2102      	movs	r1, #2
   d4238:	462b      	mov	r3, r5
   d423a:	462a      	mov	r2, r5
   d423c:	f002 f946 	bl	d64cc <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4240:	68a0      	ldr	r0, [r4, #8]
   d4242:	4629      	mov	r1, r5
   d4244:	f002 f97a 	bl	d653c <os_timer_set_id>
            while (running) {
   d4248:	7923      	ldrb	r3, [r4, #4]
   d424a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d424e:	b113      	cbz	r3, d4256 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4250:	f002 f914 	bl	d647c <os_thread_yield>
            while (running) {
   d4254:	e7f8      	b.n	d4248 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4256:	68a0      	ldr	r0, [r4, #8]
   d4258:	4629      	mov	r1, r5
   d425a:	f002 f927 	bl	d64ac <os_timer_destroy>
            handle = nullptr;
   d425e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4260:	f104 000c 	add.w	r0, r4, #12
   d4264:	f7ff ffd2 	bl	d420c <_ZNSt14_Function_baseD1Ev>
    }
   d4268:	4620      	mov	r0, r4
   d426a:	b003      	add	sp, #12
   d426c:	bd30      	pop	{r4, r5, pc}
   d426e:	bf00      	nop
   d4270:	000dad74 	.word	0x000dad74

000d4274 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4274:	b510      	push	{r4, lr}
   d4276:	4604      	mov	r4, r0
    }
   d4278:	f7ff ffd2 	bl	d4220 <_ZN5TimerD1Ev>
   d427c:	4620      	mov	r0, r4
   d427e:	211c      	movs	r1, #28
   d4280:	f003 ff39 	bl	d80f6 <_ZdlPvj>
   d4284:	4620      	mov	r0, r4
   d4286:	bd10      	pop	{r4, pc}

000d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4288:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d428a:	4801      	ldr	r0, [pc, #4]	; (d4290 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d428c:	f002 bd53 	b.w	d6d36 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4290:	000d6d0b 	.word	0x000d6d0b

000d4294 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4294:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4296:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4298:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d429a:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d429e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d42a2:	2201      	movs	r2, #1
   d42a4:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d42a6:	4341      	muls	r1, r0
   d42a8:	466a      	mov	r2, sp
   d42aa:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d42ac:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d42b0:	f002 fb84 	bl	d69bc <spark_set_connection_property>
    }
   d42b4:	b003      	add	sp, #12
   d42b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d42ba <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42ba:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42bc:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42be:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42c0:	2100      	movs	r1, #0
   d42c2:	b140      	cbz	r0, d42d6 <_ZN5Timer12changePeriodEjj+0x1c>
   d42c4:	e9cd 2100 	strd	r2, r1, [sp]
   d42c8:	460a      	mov	r2, r1
   d42ca:	2103      	movs	r1, #3
   d42cc:	f002 f8fe 	bl	d64cc <os_timer_change>
   d42d0:	fab0 f080 	clz	r0, r0
   d42d4:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42d6:	b003      	add	sp, #12
   d42d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42de:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42e4:	f88d 3000 	strb.w	r3, [sp]
   d42e8:	f88d 5004 	strb.w	r5, [sp, #4]
   d42ec:	68e4      	ldr	r4, [r4, #12]
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	47a0      	blx	r4
	}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}
	...

000d42f8 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d42f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42fa:	4d1b      	ldr	r5, [pc, #108]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
  if (!data) {                                                                    // First check to see if there is any data
   d42fc:	460c      	mov	r4, r1
   d42fe:	b959      	cbnz	r1, d4318 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   d4300:	7a6b      	ldrb	r3, [r5, #9]
   d4302:	b32b      	cbz	r3, d4350 <_Z14UbidotsHandlerPKcS0_+0x58>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   d4304:	4b19      	ldr	r3, [pc, #100]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4306:	f88d 1000 	strb.w	r1, [sp]
   d430a:	781b      	ldrb	r3, [r3, #0]
   d430c:	4a18      	ldr	r2, [pc, #96]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x78>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d430e:	4919      	ldr	r1, [pc, #100]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4310:	4819      	ldr	r0, [pc, #100]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4312:	f7ff ffe3 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4316:	e01b      	b.n	d4350 <_Z14UbidotsHandlerPKcS0_+0x58>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4318:	4608      	mov	r0, r1
   d431a:	f004 fc02 	bl	d8b22 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d431e:	38c8      	subs	r0, #200	; 0xc8
   d4320:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   d4322:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   d4324:	d816      	bhi.n	d4354 <_Z14UbidotsHandlerPKcS0_+0x5c>
    if (sysStatus.verboseMode) {
   d4326:	b14b      	cbz	r3, d433c <_Z14UbidotsHandlerPKcS0_+0x44>
        val_(0) {
   d4328:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   d432a:	f88d 3000 	strb.w	r3, [sp]
   d432e:	4b0f      	ldr	r3, [pc, #60]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4330:	4a12      	ldr	r2, [pc, #72]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4332:	781b      	ldrb	r3, [r3, #0]
   d4334:	4912      	ldr	r1, [pc, #72]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4336:	4810      	ldr	r0, [pc, #64]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4338:	f7ff ffd0 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    alertsStatus.upperHumidityThresholdCrossed = false;
   d433c:	4a11      	ldr	r2, [pc, #68]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d433e:	2300      	movs	r3, #0
    alertsStatus.upperTemperatureThreshold     = false;
   d4340:	2100      	movs	r1, #0
   d4342:	6091      	str	r1, [r2, #8]
    alertsStatus.upperHumidityThresholdCrossed = false;
   d4344:	8053      	strh	r3, [r2, #2]
    alertsStatusWriteNeeded = true;
   d4346:	4a10      	ldr	r2, [pc, #64]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4348:	2101      	movs	r1, #1
   d434a:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   d434c:	4a0f      	ldr	r2, [pc, #60]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d434e:	7013      	strb	r3, [r2, #0]
}
   d4350:	b003      	add	sp, #12
   d4352:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   d4354:	2b00      	cmp	r3, #0
   d4356:	d0fb      	beq.n	d4350 <_Z14UbidotsHandlerPKcS0_+0x58>
   d4358:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d435a:	f88d 3000 	strb.w	r3, [sp]
   d435e:	4b03      	ldr	r3, [pc, #12]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4360:	4622      	mov	r2, r4
   d4362:	781b      	ldrb	r3, [r3, #0]
   d4364:	e7d3      	b.n	d430e <_Z14UbidotsHandlerPKcS0_+0x16>
   d4366:	bf00      	nop
   d4368:	2003e56c 	.word	0x2003e56c
   d436c:	2003e429 	.word	0x2003e429
   d4370:	000daa67 	.word	0x000daa67
   d4374:	000daa6f 	.word	0x000daa6f
   d4378:	2003e4dc 	.word	0x2003e4dc
   d437c:	000daa7c 	.word	0x000daa7c
   d4380:	000daa8e 	.word	0x000daa8e
   d4384:	2003e430 	.word	0x2003e430
   d4388:	2003e448 	.word	0x2003e448
   d438c:	2003e469 	.word	0x2003e469

000d4390 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4392:	4916      	ldr	r1, [pc, #88]	; (d43ec <_Z14setVerboseMode6String+0x5c>)
   d4394:	4605      	mov	r5, r0
   d4396:	f003 fa46 	bl	d7826 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d439a:	4604      	mov	r4, r0
   d439c:	b188      	cbz	r0, d43c2 <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d439e:	4b14      	ldr	r3, [pc, #80]	; (d43f0 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d43a0:	4a14      	ldr	r2, [pc, #80]	; (d43f4 <_Z14setVerboseMode6String+0x64>)
   d43a2:	4915      	ldr	r1, [pc, #84]	; (d43f8 <_Z14setVerboseMode6String+0x68>)
   d43a4:	4815      	ldr	r0, [pc, #84]	; (d43fc <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d43a6:	2401      	movs	r4, #1
   d43a8:	725c      	strb	r4, [r3, #9]
   d43aa:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d43ac:	f88d 3000 	strb.w	r3, [sp]
   d43b0:	4b13      	ldr	r3, [pc, #76]	; (d4400 <_Z14setVerboseMode6String+0x70>)
   d43b2:	781b      	ldrb	r3, [r3, #0]
   d43b4:	f7ff ff92 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43b8:	4b12      	ldr	r3, [pc, #72]	; (d4404 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d43ba:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d43bc:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d43be:	b003      	add	sp, #12
   d43c0:	bd30      	pop	{r4, r5, pc}
   d43c2:	4911      	ldr	r1, [pc, #68]	; (d4408 <_Z14setVerboseMode6String+0x78>)
   d43c4:	4628      	mov	r0, r5
   d43c6:	f003 fa2e 	bl	d7826 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d43ca:	2800      	cmp	r0, #0
   d43cc:	d0f7      	beq.n	d43be <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d43ce:	4b08      	ldr	r3, [pc, #32]	; (d43f0 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43d0:	4a0e      	ldr	r2, [pc, #56]	; (d440c <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d43d2:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43d4:	4b0a      	ldr	r3, [pc, #40]	; (d4400 <_Z14setVerboseMode6String+0x70>)
   d43d6:	f88d 4000 	strb.w	r4, [sp]
   d43da:	781b      	ldrb	r3, [r3, #0]
   d43dc:	4906      	ldr	r1, [pc, #24]	; (d43f8 <_Z14setVerboseMode6String+0x68>)
   d43de:	4807      	ldr	r0, [pc, #28]	; (d43fc <_Z14setVerboseMode6String+0x6c>)
   d43e0:	f7ff ff7c 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43e4:	4b07      	ldr	r3, [pc, #28]	; (d4404 <_Z14setVerboseMode6String+0x74>)
   d43e6:	2001      	movs	r0, #1
   d43e8:	7018      	strb	r0, [r3, #0]
    return 1;
   d43ea:	e7e8      	b.n	d43be <_Z14setVerboseMode6String+0x2e>
   d43ec:	000daa63 	.word	0x000daa63
   d43f0:	2003e56c 	.word	0x2003e56c
   d43f4:	000daa94 	.word	0x000daa94
   d43f8:	000daab7 	.word	0x000daab7
   d43fc:	2003e4dc 	.word	0x2003e4dc
   d4400:	2003e429 	.word	0x2003e429
   d4404:	2003e588 	.word	0x2003e588
   d4408:	000daaa5 	.word	0x000daaa5
   d440c:	000daaa7 	.word	0x000daaa7

000d4410 <_Z16setThirdPartySim6String>:
  updateThresholdValue();
  return 1;
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d4410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4412:	491c      	ldr	r1, [pc, #112]	; (d4484 <_Z16setThirdPartySim6String+0x74>)
   d4414:	4605      	mov	r5, r0
   d4416:	f003 fa06 	bl	d7826 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d441a:	4604      	mov	r4, r0
   d441c:	b300      	cbz	r0, d4460 <_Z16setThirdPartySim6String+0x50>
  {
    sysStatus.thirdPartySim = true;
   d441e:	4c1a      	ldr	r4, [pc, #104]	; (d4488 <_Z16setThirdPartySim6String+0x78>)
   d4420:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4422:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4424:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4426:	f7ff ff35 	bl	d4294 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d442a:	6863      	ldr	r3, [r4, #4]
   d442c:	4817      	ldr	r0, [pc, #92]	; (d448c <_Z16setThirdPartySim6String+0x7c>)
   d442e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4432:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4436:	4359      	muls	r1, r3
   d4438:	f7ff ff3f 	bl	d42ba <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d443c:	f002 fa86 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4440:	b148      	cbz	r0, d4456 <_Z16setThirdPartySim6String+0x46>
   d4442:	2300      	movs	r3, #0
   d4444:	f88d 3000 	strb.w	r3, [sp]
   d4448:	4b11      	ldr	r3, [pc, #68]	; (d4490 <_Z16setThirdPartySim6String+0x80>)
   d444a:	4a12      	ldr	r2, [pc, #72]	; (d4494 <_Z16setThirdPartySim6String+0x84>)
   d444c:	781b      	ldrb	r3, [r3, #0]
   d444e:	4912      	ldr	r1, [pc, #72]	; (d4498 <_Z16setThirdPartySim6String+0x88>)
   d4450:	4812      	ldr	r0, [pc, #72]	; (d449c <_Z16setThirdPartySim6String+0x8c>)
   d4452:	f7ff ff43 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4456:	4b12      	ldr	r3, [pc, #72]	; (d44a0 <_Z16setThirdPartySim6String+0x90>)
   d4458:	2001      	movs	r0, #1
   d445a:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d445c:	b003      	add	sp, #12
   d445e:	bd30      	pop	{r4, r5, pc}
   d4460:	4910      	ldr	r1, [pc, #64]	; (d44a4 <_Z16setThirdPartySim6String+0x94>)
   d4462:	4628      	mov	r0, r5
   d4464:	f003 f9df 	bl	d7826 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4468:	2800      	cmp	r0, #0
   d446a:	d0f7      	beq.n	d445c <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d446c:	4b06      	ldr	r3, [pc, #24]	; (d4488 <_Z16setThirdPartySim6String+0x78>)
   d446e:	705c      	strb	r4, [r3, #1]
   d4470:	f002 fa6c 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4474:	2800      	cmp	r0, #0
   d4476:	d0ee      	beq.n	d4456 <_Z16setThirdPartySim6String+0x46>
   d4478:	4b05      	ldr	r3, [pc, #20]	; (d4490 <_Z16setThirdPartySim6String+0x80>)
   d447a:	f88d 4000 	strb.w	r4, [sp]
   d447e:	781b      	ldrb	r3, [r3, #0]
   d4480:	4a09      	ldr	r2, [pc, #36]	; (d44a8 <_Z16setThirdPartySim6String+0x98>)
   d4482:	e7e4      	b.n	d444e <_Z16setThirdPartySim6String+0x3e>
   d4484:	000daa63 	.word	0x000daa63
   d4488:	2003e56c 	.word	0x2003e56c
   d448c:	2003e48c 	.word	0x2003e48c
   d4490:	2003e429 	.word	0x2003e429
   d4494:	000daabc 	.word	0x000daabc
   d4498:	000daab7 	.word	0x000daab7
   d449c:	2003e4dc 	.word	0x2003e4dc
   d44a0:	2003e588 	.word	0x2003e588
   d44a4:	000daaa5 	.word	0x000daaa5
   d44a8:	000daad1 	.word	0x000daad1

000d44ac <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   d44ac:	b510      	push	{r4, lr}
   d44ae:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44b0:	6800      	ldr	r0, [r0, #0]
   d44b2:	220a      	movs	r2, #10
   d44b4:	a903      	add	r1, sp, #12
   d44b6:	f005 fab7 	bl	d9a28 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44ba:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44be:	d81a      	bhi.n	d44f6 <_Z12setKeepAlive6String+0x4a>
  sysStatus.keepAlive = tempTime;
   d44c0:	4c0e      	ldr	r4, [pc, #56]	; (d44fc <_Z12setKeepAlive6String+0x50>)
   d44c2:	6060      	str	r0, [r4, #4]
   d44c4:	f002 fa42 	bl	d694c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d44c8:	b180      	cbz	r0, d44ec <_Z12setKeepAlive6String+0x40>
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44ca:	6863      	ldr	r3, [r4, #4]
   d44cc:	4a0c      	ldr	r2, [pc, #48]	; (d4500 <_Z12setKeepAlive6String+0x54>)
   d44ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44d2:	a804      	add	r0, sp, #16
   d44d4:	f002 faf2 	bl	d6abc <snprintf>
   d44d8:	2300      	movs	r3, #0
    publishQueue.publish("Keep Alive",data, PRIVATE);
   d44da:	f88d 3000 	strb.w	r3, [sp]
   d44de:	4b09      	ldr	r3, [pc, #36]	; (d4504 <_Z12setKeepAlive6String+0x58>)
   d44e0:	4909      	ldr	r1, [pc, #36]	; (d4508 <_Z12setKeepAlive6String+0x5c>)
   d44e2:	781b      	ldrb	r3, [r3, #0]
   d44e4:	4809      	ldr	r0, [pc, #36]	; (d450c <_Z12setKeepAlive6String+0x60>)
   d44e6:	aa04      	add	r2, sp, #16
   d44e8:	f7ff fef8 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d44ec:	4b08      	ldr	r3, [pc, #32]	; (d4510 <_Z12setKeepAlive6String+0x64>)
   d44ee:	2001      	movs	r0, #1
   d44f0:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d44f2:	b044      	add	sp, #272	; 0x110
   d44f4:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44f6:	2000      	movs	r0, #0
   d44f8:	e7fb      	b.n	d44f2 <_Z12setKeepAlive6String+0x46>
   d44fa:	bf00      	nop
   d44fc:	2003e56c 	.word	0x2003e56c
   d4500:	000daae5 	.word	0x000daae5
   d4504:	2003e429 	.word	0x2003e429
   d4508:	000daafe 	.word	0x000daafe
   d450c:	2003e4dc 	.word	0x2003e4dc
   d4510:	2003e588 	.word	0x2003e588

000d4514 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4514:	b507      	push	{r0, r1, r2, lr}
   d4516:	f002 fa19 	bl	d694c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d451a:	b148      	cbz	r0, d4530 <_Z18loadSystemDefaultsv+0x1c>
   d451c:	2300      	movs	r3, #0
   d451e:	f88d 3000 	strb.w	r3, [sp]
   d4522:	4b0b      	ldr	r3, [pc, #44]	; (d4550 <_Z18loadSystemDefaultsv+0x3c>)
   d4524:	4a0b      	ldr	r2, [pc, #44]	; (d4554 <_Z18loadSystemDefaultsv+0x40>)
   d4526:	781b      	ldrb	r3, [r3, #0]
   d4528:	490b      	ldr	r1, [pc, #44]	; (d4558 <_Z18loadSystemDefaultsv+0x44>)
   d452a:	480c      	ldr	r0, [pc, #48]	; (d455c <_Z18loadSystemDefaultsv+0x48>)
   d452c:	f7ff fed6 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 600;
   d4530:	4a0b      	ldr	r2, [pc, #44]	; (d4560 <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4532:	480c      	ldr	r0, [pc, #48]	; (d4564 <_Z18loadSystemDefaultsv+0x50>)
   d4534:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4538:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d453a:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d453c:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d453e:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d4540:	7293      	strb	r3, [r2, #10]
   d4542:	231c      	movs	r3, #28
  sysStatus.structuresVersion = 1;
   d4544:	8011      	strh	r1, [r2, #0]
}
   d4546:	b003      	add	sp, #12
   d4548:	f85d eb04 	ldr.w	lr, [sp], #4
   d454c:	f001 b81b 	b.w	d5586 <_ZN6MB85RC9writeDataEjPKhj>
   d4550:	2003e429 	.word	0x2003e429
   d4554:	000dab09 	.word	0x000dab09
   d4558:	000daab7 	.word	0x000daab7
   d455c:	2003e4dc 	.word	0x2003e4dc
   d4560:	2003e56c 	.word	0x2003e56c
   d4564:	2003e46c 	.word	0x2003e46c

000d4568 <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4568:	b507      	push	{r0, r1, r2, lr}
   d456a:	f002 f9ef 	bl	d694c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   d456e:	b148      	cbz	r0, d4584 <_Z17loadAlertDefaultsv+0x1c>
   d4570:	2300      	movs	r3, #0
   d4572:	f88d 3000 	strb.w	r3, [sp]
   d4576:	4b0c      	ldr	r3, [pc, #48]	; (d45a8 <_Z17loadAlertDefaultsv+0x40>)
   d4578:	4a0c      	ldr	r2, [pc, #48]	; (d45ac <_Z17loadAlertDefaultsv+0x44>)
   d457a:	781b      	ldrb	r3, [r3, #0]
   d457c:	490c      	ldr	r1, [pc, #48]	; (d45b0 <_Z17loadAlertDefaultsv+0x48>)
   d457e:	480d      	ldr	r0, [pc, #52]	; (d45b4 <_Z17loadAlertDefaultsv+0x4c>)
   d4580:	f7ff feac 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  alertsStatus.upperTemperatureThreshold = 30;
   d4584:	4a0c      	ldr	r2, [pc, #48]	; (d45b8 <_Z17loadAlertDefaultsv+0x50>)
   d4586:	4b0d      	ldr	r3, [pc, #52]	; (d45bc <_Z17loadAlertDefaultsv+0x54>)
   d4588:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   d458a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d458e:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   d4590:	4b0b      	ldr	r3, [pc, #44]	; (d45c0 <_Z17loadAlertDefaultsv+0x58>)
   d4592:	6113      	str	r3, [r2, #16]
   d4594:	480b      	ldr	r0, [pc, #44]	; (d45c4 <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   d4596:	4b0c      	ldr	r3, [pc, #48]	; (d45c8 <_Z17loadAlertDefaultsv+0x60>)
   d4598:	6153      	str	r3, [r2, #20]
   d459a:	2150      	movs	r1, #80	; 0x50
   d459c:	2318      	movs	r3, #24
}
   d459e:	b003      	add	sp, #12
   d45a0:	f85d eb04 	ldr.w	lr, [sp], #4
   d45a4:	f000 bfef 	b.w	d5586 <_ZN6MB85RC9writeDataEjPKhj>
   d45a8:	2003e429 	.word	0x2003e429
   d45ac:	000dab21 	.word	0x000dab21
   d45b0:	000daab7 	.word	0x000daab7
   d45b4:	2003e4dc 	.word	0x2003e4dc
   d45b8:	2003e430 	.word	0x2003e430
   d45bc:	41f00000 	.word	0x41f00000
   d45c0:	42b40000 	.word	0x42b40000
   d45c4:	2003e46c 	.word	0x2003e46c
   d45c8:	40a00000 	.word	0x40a00000

000d45cc <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d45cc:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d45ce:	4c12      	ldr	r4, [pc, #72]	; (d4618 <_Z17checkSystemValuesv+0x4c>)
   d45d0:	7a23      	ldrb	r3, [r4, #8]
   d45d2:	2b01      	cmp	r3, #1
   d45d4:	d904      	bls.n	d45e0 <_Z17checkSystemValuesv+0x14>
   d45d6:	f002 f9b9 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d45da:	b1d8      	cbz	r0, d4614 <_Z17checkSystemValuesv+0x48>
   d45dc:	2301      	movs	r3, #1
   d45de:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d45e0:	6863      	ldr	r3, [r4, #4]
   d45e2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d45e6:	bf84      	itt	hi
   d45e8:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d45ec:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d45ee:	7a63      	ldrb	r3, [r4, #9]
   d45f0:	2b01      	cmp	r3, #1
   d45f2:	bf84      	itt	hi
   d45f4:	2300      	movhi	r3, #0
   d45f6:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d45f8:	7aa3      	ldrb	r3, [r4, #10]
   d45fa:	2b01      	cmp	r3, #1
   d45fc:	bf84      	itt	hi
   d45fe:	2300      	movhi	r3, #0
   d4600:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4602:	6963      	ldr	r3, [r4, #20]
   d4604:	2bff      	cmp	r3, #255	; 0xff
   d4606:	bf84      	itt	hi
   d4608:	2300      	movhi	r3, #0
   d460a:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d460c:	4b03      	ldr	r3, [pc, #12]	; (d461c <_Z17checkSystemValuesv+0x50>)
   d460e:	2201      	movs	r2, #1
   d4610:	701a      	strb	r2, [r3, #0]
}
   d4612:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4614:	7220      	strb	r0, [r4, #8]
   d4616:	e7e3      	b.n	d45e0 <_Z17checkSystemValuesv+0x14>
   d4618:	2003e56c 	.word	0x2003e56c
   d461c:	2003e588 	.word	0x2003e588

000d4620 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0 || alertsStatus.lowerTemperatureThreshold > 20) alertsStatus.lowerTemperatureThreshold = 3;
   d4620:	4b22      	ldr	r3, [pc, #136]	; (d46ac <_Z17checkAlertsValuesv+0x8c>)
   d4622:	ed93 7a03 	vldr	s14, [r3, #12]
   d4626:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d462e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4632:	d404      	bmi.n	d463e <_Z17checkAlertsValuesv+0x1e>
   d4634:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d463c:	dd01      	ble.n	d4642 <_Z17checkAlertsValuesv+0x22>
   d463e:	4a1c      	ldr	r2, [pc, #112]	; (d46b0 <_Z17checkAlertsValuesv+0x90>)
   d4640:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20 || alertsStatus.lowerTemperatureThreshold > 60) alertsStatus.lowerTemperatureThreshold = 30;
   d4642:	ed93 7a02 	vldr	s14, [r3, #8]
   d4646:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d464e:	d408      	bmi.n	d4662 <_Z17checkAlertsValuesv+0x42>
   d4650:	edd3 6a03 	vldr	s13, [r3, #12]
   d4654:	ed9f 7a17 	vldr	s14, [pc, #92]	; d46b4 <_Z17checkAlertsValuesv+0x94>
   d4658:	eef4 6ac7 	vcmpe.f32	s13, s14
   d465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4660:	dd01      	ble.n	d4666 <_Z17checkAlertsValuesv+0x46>
   d4662:	4a15      	ldr	r2, [pc, #84]	; (d46b8 <_Z17checkAlertsValuesv+0x98>)
   d4664:	60da      	str	r2, [r3, #12]
  if (alertsStatus.lowerHumidityThreshold < 0 || alertsStatus.lowerHumidityThreshold > 20) alertsStatus.lowerHumidityThreshold = 13;
   d4666:	ed93 7a05 	vldr	s14, [r3, #20]
   d466a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4672:	d404      	bmi.n	d467e <_Z17checkAlertsValuesv+0x5e>
   d4674:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d467c:	dd01      	ble.n	d4682 <_Z17checkAlertsValuesv+0x62>
   d467e:	4a0f      	ldr	r2, [pc, #60]	; (d46bc <_Z17checkAlertsValuesv+0x9c>)
   d4680:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20 || alertsStatus.upperHumidityThreshold > 90) alertsStatus.upperHumidityThreshold = 30;
   d4682:	ed93 7a04 	vldr	s14, [r3, #16]
   d4686:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d468e:	d406      	bmi.n	d469e <_Z17checkAlertsValuesv+0x7e>
   d4690:	eddf 7a0b 	vldr	s15, [pc, #44]	; d46c0 <_Z17checkAlertsValuesv+0xa0>
   d4694:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d469c:	dd01      	ble.n	d46a2 <_Z17checkAlertsValuesv+0x82>
   d469e:	4a06      	ldr	r2, [pc, #24]	; (d46b8 <_Z17checkAlertsValuesv+0x98>)
   d46a0:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   d46a2:	4b08      	ldr	r3, [pc, #32]	; (d46c4 <_Z17checkAlertsValuesv+0xa4>)
   d46a4:	2201      	movs	r2, #1
   d46a6:	701a      	strb	r2, [r3, #0]
}
   d46a8:	4770      	bx	lr
   d46aa:	bf00      	nop
   d46ac:	2003e430 	.word	0x2003e430
   d46b0:	40400000 	.word	0x40400000
   d46b4:	42700000 	.word	0x42700000
   d46b8:	41f00000 	.word	0x41f00000
   d46bc:	41500000 	.word	0x41500000
   d46c0:	42b40000 	.word	0x42b40000
   d46c4:	2003e448 	.word	0x2003e448

000d46c8 <_Z11petWatchdogv>:
{
   d46c8:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
   d46ca:	2101      	movs	r1, #1
   d46cc:	2005      	movs	r0, #5
   d46ce:	f003 fca0 	bl	d8012 <digitalWrite>
  digitalWrite(donePin, LOW);
   d46d2:	2100      	movs	r1, #0
   d46d4:	2005      	movs	r0, #5
   d46d6:	f003 fc9c 	bl	d8012 <digitalWrite>
  watchdogFlag = false;
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <_Z11petWatchdogv+0x1c>)
   d46dc:	2200      	movs	r2, #0
   d46de:	701a      	strb	r2, [r3, #0]
}
   d46e0:	bd08      	pop	{r3, pc}
   d46e2:	bf00      	nop
   d46e4:	2003e5c9 	.word	0x2003e5c9

000d46e8 <_Z9sendEventv>:
{
   d46e8:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d46ea:	4b12      	ldr	r3, [pc, #72]	; (d4734 <_Z9sendEventv+0x4c>)
{
   d46ec:	b0a1      	sub	sp, #132	; 0x84
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d46ee:	699a      	ldr	r2, [r3, #24]
   d46f0:	9204      	str	r2, [sp, #16]
   d46f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   d46f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d46fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   d46fe:	2164      	movs	r1, #100	; 0x64
   d4700:	e9cd 2300 	strd	r2, r3, [sp]
   d4704:	a807      	add	r0, sp, #28
   d4706:	4a0c      	ldr	r2, [pc, #48]	; (d4738 <_Z9sendEventv+0x50>)
   d4708:	f002 f9d8 	bl	d6abc <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   d470c:	2300      	movs	r3, #0
   d470e:	f88d 3000 	strb.w	r3, [sp]
   d4712:	4b0a      	ldr	r3, [pc, #40]	; (d473c <_Z9sendEventv+0x54>)
   d4714:	490a      	ldr	r1, [pc, #40]	; (d4740 <_Z9sendEventv+0x58>)
   d4716:	781b      	ldrb	r3, [r3, #0]
   d4718:	480a      	ldr	r0, [pc, #40]	; (d4744 <_Z9sendEventv+0x5c>)
   d471a:	aa07      	add	r2, sp, #28
   d471c:	f7ff fdde 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d4720:	4b09      	ldr	r3, [pc, #36]	; (d4748 <_Z9sendEventv+0x60>)
   d4722:	2201      	movs	r2, #1
   d4724:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4726:	f001 ff31 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d472a:	4b08      	ldr	r3, [pc, #32]	; (d474c <_Z9sendEventv+0x64>)
   d472c:	6018      	str	r0, [r3, #0]
}
   d472e:	b021      	add	sp, #132	; 0x84
   d4730:	f85d fb04 	ldr.w	pc, [sp], #4
   d4734:	2003e538 	.word	0x2003e538
   d4738:	000dab38 	.word	0x000dab38
   d473c:	2003e429 	.word	0x2003e429
   d4740:	000dab6d 	.word	0x000dab6d
   d4744:	2003e4dc 	.word	0x2003e4dc
   d4748:	2003e469 	.word	0x2003e469
   d474c:	2003e5cc 	.word	0x2003e5cc

000d4750 <_Z8blinkLEDi>:
{
   d4750:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   d4752:	4d0b      	ldr	r5, [pc, #44]	; (d4780 <_Z8blinkLEDi+0x30>)
{
   d4754:	4604      	mov	r4, r0
   d4756:	f001 ff19 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   d475a:	682b      	ldr	r3, [r5, #0]
   d475c:	1ac0      	subs	r0, r0, r3
   d475e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4762:	d90c      	bls.n	d477e <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   d4764:	b2a4      	uxth	r4, r4
   d4766:	4620      	mov	r0, r4
   d4768:	f003 fc6c 	bl	d8044 <digitalRead>
   d476c:	fab0 f180 	clz	r1, r0
   d4770:	0949      	lsrs	r1, r1, #5
   d4772:	4620      	mov	r0, r4
   d4774:	f003 fc4d 	bl	d8012 <digitalWrite>
   d4778:	f001 ff08 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   d477c:	6028      	str	r0, [r5, #0]
}
   d477e:	bd38      	pop	{r3, r4, r5, pc}
   d4780:	2003e42c 	.word	0x2003e42c

000d4784 <_Z22publishStateTransitionv>:
{
   d4784:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4786:	4d11      	ldr	r5, [pc, #68]	; (d47cc <_Z22publishStateTransitionv+0x48>)
   d4788:	4c11      	ldr	r4, [pc, #68]	; (d47d0 <_Z22publishStateTransitionv+0x4c>)
   d478a:	4912      	ldr	r1, [pc, #72]	; (d47d4 <_Z22publishStateTransitionv+0x50>)
   d478c:	782a      	ldrb	r2, [r5, #0]
   d478e:	7820      	ldrb	r0, [r4, #0]
{
   d4790:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4792:	231a      	movs	r3, #26
   d4794:	fb03 1202 	mla	r2, r3, r2, r1
   d4798:	9200      	str	r2, [sp, #0]
   d479a:	fb03 1300 	mla	r3, r3, r0, r1
   d479e:	4a0e      	ldr	r2, [pc, #56]	; (d47d8 <_Z22publishStateTransitionv+0x54>)
   d47a0:	2128      	movs	r1, #40	; 0x28
   d47a2:	a802      	add	r0, sp, #8
   d47a4:	f002 f98a 	bl	d6abc <snprintf>
  oldState = state;
   d47a8:	782b      	ldrb	r3, [r5, #0]
   d47aa:	7023      	strb	r3, [r4, #0]
   d47ac:	f002 f8ce 	bl	d694c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d47b0:	b148      	cbz	r0, d47c6 <_Z22publishStateTransitionv+0x42>
   d47b2:	2300      	movs	r3, #0
   d47b4:	f88d 3000 	strb.w	r3, [sp]
   d47b8:	4b08      	ldr	r3, [pc, #32]	; (d47dc <_Z22publishStateTransitionv+0x58>)
   d47ba:	4909      	ldr	r1, [pc, #36]	; (d47e0 <_Z22publishStateTransitionv+0x5c>)
   d47bc:	781b      	ldrb	r3, [r3, #0]
   d47be:	4809      	ldr	r0, [pc, #36]	; (d47e4 <_Z22publishStateTransitionv+0x60>)
   d47c0:	aa02      	add	r2, sp, #8
   d47c2:	f7ff fd8b 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d47c6:	b00d      	add	sp, #52	; 0x34
   d47c8:	bd30      	pop	{r4, r5, pc}
   d47ca:	bf00      	nop
   d47cc:	2003e568 	.word	0x2003e568
   d47d0:	2003e4d8 	.word	0x2003e4d8
   d47d4:	2003e170 	.word	0x2003e170
   d47d8:	000dab83 	.word	0x000dab83
   d47dc:	2003e429 	.word	0x2003e429
   d47e0:	000dab91 	.word	0x000dab91
   d47e4:	2003e4dc 	.word	0x2003e4dc

000d47e8 <_Z20updateThresholdValuev>:

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   d47e8:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   d47ea:	4c17      	ldr	r4, [pc, #92]	; (d4848 <_Z20updateThresholdValuev+0x60>)
   d47ec:	68a0      	ldr	r0, [r4, #8]
   d47ee:	f003 fdef 	bl	d83d0 <__aeabi_f2d>
   d47f2:	4a16      	ldr	r2, [pc, #88]	; (d484c <_Z20updateThresholdValuev+0x64>)
   d47f4:	e9cd 0100 	strd	r0, r1, [sp]
   d47f8:	2118      	movs	r1, #24
   d47fa:	4815      	ldr	r0, [pc, #84]	; (d4850 <_Z20updateThresholdValuev+0x68>)
   d47fc:	f002 f95e 	bl	d6abc <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   d4800:	68e0      	ldr	r0, [r4, #12]
   d4802:	f003 fde5 	bl	d83d0 <__aeabi_f2d>
   d4806:	4a13      	ldr	r2, [pc, #76]	; (d4854 <_Z20updateThresholdValuev+0x6c>)
   d4808:	e9cd 0100 	strd	r0, r1, [sp]
   d480c:	2118      	movs	r1, #24
   d480e:	4812      	ldr	r0, [pc, #72]	; (d4858 <_Z20updateThresholdValuev+0x70>)
   d4810:	f002 f954 	bl	d6abc <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   d4814:	6920      	ldr	r0, [r4, #16]
   d4816:	f003 fddb 	bl	d83d0 <__aeabi_f2d>
   d481a:	4a10      	ldr	r2, [pc, #64]	; (d485c <_Z20updateThresholdValuev+0x74>)
   d481c:	e9cd 0100 	strd	r0, r1, [sp]
   d4820:	2118      	movs	r1, #24
   d4822:	480f      	ldr	r0, [pc, #60]	; (d4860 <_Z20updateThresholdValuev+0x78>)
   d4824:	f002 f94a 	bl	d6abc <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   d4828:	6960      	ldr	r0, [r4, #20]
   d482a:	f003 fdd1 	bl	d83d0 <__aeabi_f2d>
   d482e:	4a0d      	ldr	r2, [pc, #52]	; (d4864 <_Z20updateThresholdValuev+0x7c>)
   d4830:	e9cd 0100 	strd	r0, r1, [sp]
   d4834:	2118      	movs	r1, #24
   d4836:	480c      	ldr	r0, [pc, #48]	; (d4868 <_Z20updateThresholdValuev+0x80>)
   d4838:	f002 f940 	bl	d6abc <snprintf>
    alertsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d483c:	4b0b      	ldr	r3, [pc, #44]	; (d486c <_Z20updateThresholdValuev+0x84>)
   d483e:	2201      	movs	r2, #1
   d4840:	701a      	strb	r2, [r3, #0]
} 
   d4842:	b002      	add	sp, #8
   d4844:	bd10      	pop	{r4, pc}
   d4846:	bf00      	nop
   d4848:	2003e430 	.word	0x2003e430
   d484c:	000daba2 	.word	0x000daba2
   d4850:	2003e5b1 	.word	0x2003e5b1
   d4854:	000dabb3 	.word	0x000dabb3
   d4858:	2003e4c0 	.word	0x2003e4c0
   d485c:	000dabc4 	.word	0x000dabc4
   d4860:	2003e599 	.word	0x2003e599
   d4864:	000dabd8 	.word	0x000dabd8
   d4868:	2003e4a8 	.word	0x2003e4a8
   d486c:	2003e448 	.word	0x2003e448

000d4870 <_Z17setUpperTempLimit6String>:
{
   d4870:	b500      	push	{lr}
   d4872:	b089      	sub	sp, #36	; 0x24
   d4874:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d4876:	f003 f801 	bl	d787c <_ZNK6String7toFloatEv>
   d487a:	4b0d      	ldr	r3, [pc, #52]	; (d48b0 <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d487c:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d487e:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d4882:	a804      	add	r0, sp, #16
   d4884:	f002 ffc4 	bl	d7810 <_ZN6StringC1ERKS_>
   d4888:	2300      	movs	r3, #0
   d488a:	f88d 3000 	strb.w	r3, [sp]
   d488e:	4b09      	ldr	r3, [pc, #36]	; (d48b4 <_Z17setUpperTempLimit6String+0x44>)
   d4890:	9a04      	ldr	r2, [sp, #16]
   d4892:	781b      	ldrb	r3, [r3, #0]
   d4894:	4908      	ldr	r1, [pc, #32]	; (d48b8 <_Z17setUpperTempLimit6String+0x48>)
   d4896:	4809      	ldr	r0, [pc, #36]	; (d48bc <_Z17setUpperTempLimit6String+0x4c>)
   d4898:	f7ff fd20 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d489c:	a804      	add	r0, sp, #16
   d489e:	f002 ff49 	bl	d7734 <_ZN6StringD1Ev>
  updateThresholdValue();
   d48a2:	f7ff ffa1 	bl	d47e8 <_Z20updateThresholdValuev>
}
   d48a6:	2001      	movs	r0, #1
   d48a8:	b009      	add	sp, #36	; 0x24
   d48aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d48ae:	bf00      	nop
   d48b0:	2003e430 	.word	0x2003e430
   d48b4:	2003e429 	.word	0x2003e429
   d48b8:	000dabed 	.word	0x000dabed
   d48bc:	2003e4dc 	.word	0x2003e4dc

000d48c0 <_Z17setLowerTempLimit6String>:
{
   d48c0:	b500      	push	{lr}
   d48c2:	b089      	sub	sp, #36	; 0x24
   d48c4:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d48c6:	f002 ffd9 	bl	d787c <_ZNK6String7toFloatEv>
   d48ca:	4b0d      	ldr	r3, [pc, #52]	; (d4900 <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d48cc:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d48ce:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d48d2:	a804      	add	r0, sp, #16
   d48d4:	f002 ff9c 	bl	d7810 <_ZN6StringC1ERKS_>
   d48d8:	2300      	movs	r3, #0
   d48da:	f88d 3000 	strb.w	r3, [sp]
   d48de:	4b09      	ldr	r3, [pc, #36]	; (d4904 <_Z17setLowerTempLimit6String+0x44>)
   d48e0:	9a04      	ldr	r2, [sp, #16]
   d48e2:	781b      	ldrb	r3, [r3, #0]
   d48e4:	4908      	ldr	r1, [pc, #32]	; (d4908 <_Z17setLowerTempLimit6String+0x48>)
   d48e6:	4809      	ldr	r0, [pc, #36]	; (d490c <_Z17setLowerTempLimit6String+0x4c>)
   d48e8:	f7ff fcf8 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d48ec:	a804      	add	r0, sp, #16
   d48ee:	f002 ff21 	bl	d7734 <_ZN6StringD1Ev>
  updateThresholdValue();
   d48f2:	f7ff ff79 	bl	d47e8 <_Z20updateThresholdValuev>
}
   d48f6:	2001      	movs	r0, #1
   d48f8:	b009      	add	sp, #36	; 0x24
   d48fa:	f85d fb04 	ldr.w	pc, [sp], #4
   d48fe:	bf00      	nop
   d4900:	2003e430 	.word	0x2003e430
   d4904:	2003e429 	.word	0x2003e429
   d4908:	000dac01 	.word	0x000dac01
   d490c:	2003e4dc 	.word	0x2003e4dc

000d4910 <_Z21setUpperHumidityLimit6String>:
{
   d4910:	b500      	push	{lr}
   d4912:	b089      	sub	sp, #36	; 0x24
   d4914:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d4916:	f002 ffb1 	bl	d787c <_ZNK6String7toFloatEv>
   d491a:	4b0d      	ldr	r3, [pc, #52]	; (d4950 <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d491c:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d491e:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Threshold Set",String(value),PRIVATE);
   d4922:	a804      	add	r0, sp, #16
   d4924:	f002 ff74 	bl	d7810 <_ZN6StringC1ERKS_>
   d4928:	2300      	movs	r3, #0
   d492a:	f88d 3000 	strb.w	r3, [sp]
   d492e:	4b09      	ldr	r3, [pc, #36]	; (d4954 <_Z21setUpperHumidityLimit6String+0x44>)
   d4930:	9a04      	ldr	r2, [sp, #16]
   d4932:	781b      	ldrb	r3, [r3, #0]
   d4934:	4908      	ldr	r1, [pc, #32]	; (d4958 <_Z21setUpperHumidityLimit6String+0x48>)
   d4936:	4809      	ldr	r0, [pc, #36]	; (d495c <_Z21setUpperHumidityLimit6String+0x4c>)
   d4938:	f7ff fcd0 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d493c:	a804      	add	r0, sp, #16
   d493e:	f002 fef9 	bl	d7734 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4942:	f7ff ff51 	bl	d47e8 <_Z20updateThresholdValuev>
}
   d4946:	2001      	movs	r0, #1
   d4948:	b009      	add	sp, #36	; 0x24
   d494a:	f85d fb04 	ldr.w	pc, [sp], #4
   d494e:	bf00      	nop
   d4950:	2003e430 	.word	0x2003e430
   d4954:	2003e429 	.word	0x2003e429
   d4958:	000dabed 	.word	0x000dabed
   d495c:	2003e4dc 	.word	0x2003e4dc

000d4960 <_Z21setLowerHumidityLimit6String>:
{
   d4960:	b500      	push	{lr}
   d4962:	b089      	sub	sp, #36	; 0x24
   d4964:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d4966:	f002 ff89 	bl	d787c <_ZNK6String7toFloatEv>
   d496a:	4b0d      	ldr	r3, [pc, #52]	; (d49a0 <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d496c:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d496e:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Threshold Set",String(value),PRIVATE);
   d4972:	a804      	add	r0, sp, #16
   d4974:	f002 ff4c 	bl	d7810 <_ZN6StringC1ERKS_>
   d4978:	2300      	movs	r3, #0
   d497a:	f88d 3000 	strb.w	r3, [sp]
   d497e:	4b09      	ldr	r3, [pc, #36]	; (d49a4 <_Z21setLowerHumidityLimit6String+0x44>)
   d4980:	9a04      	ldr	r2, [sp, #16]
   d4982:	781b      	ldrb	r3, [r3, #0]
   d4984:	4908      	ldr	r1, [pc, #32]	; (d49a8 <_Z21setLowerHumidityLimit6String+0x48>)
   d4986:	4809      	ldr	r0, [pc, #36]	; (d49ac <_Z21setLowerHumidityLimit6String+0x4c>)
   d4988:	f7ff fca8 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d498c:	a804      	add	r0, sp, #16
   d498e:	f002 fed1 	bl	d7734 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4992:	f7ff ff29 	bl	d47e8 <_Z20updateThresholdValuev>
}
   d4996:	2001      	movs	r0, #1
   d4998:	b009      	add	sp, #36	; 0x24
   d499a:	f85d fb04 	ldr.w	pc, [sp], #4
   d499e:	bf00      	nop
   d49a0:	2003e430 	.word	0x2003e430
   d49a4:	2003e429 	.word	0x2003e429
   d49a8:	000dac01 	.word	0x000dac01
   d49ac:	2003e4dc 	.word	0x2003e4dc

000d49b0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d49b0:	b530      	push	{r4, r5, lr}
   d49b2:	b085      	sub	sp, #20
   d49b4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d49b6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d49b8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d49ba:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d49bc:	f001 ff46 	bl	d684c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d49c0:	b9b0      	cbnz	r0, d49f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d49c2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d49c4:	b10c      	cbz	r4, d49ca <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d49c6:	6923      	ldr	r3, [r4, #16]
   d49c8:	b923      	cbnz	r3, d49d4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d49ca:	4a0a      	ldr	r2, [pc, #40]	; (d49f4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d49cc:	2100      	movs	r1, #0
   d49ce:	200a      	movs	r0, #10
   d49d0:	f001 ff2c 	bl	d682c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d49d4:	2300      	movs	r3, #0
   d49d6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d49da:	230c      	movs	r3, #12
   d49dc:	f8ad 3004 	strh.w	r3, [sp, #4]
   d49e0:	2304      	movs	r3, #4
   d49e2:	9303      	str	r3, [sp, #12]
   d49e4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d49e6:	6923      	ldr	r3, [r4, #16]
   d49e8:	aa01      	add	r2, sp, #4
   d49ea:	2101      	movs	r1, #1
   d49ec:	4620      	mov	r0, r4
   d49ee:	4798      	blx	r3
}
   d49f0:	b005      	add	sp, #20
   d49f2:	bd30      	pop	{r4, r5, pc}
   d49f4:	000d657d 	.word	0x000d657d

000d49f8 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   d49f8:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d49fa:	4d11      	ldr	r5, [pc, #68]	; (d4a40 <_Z17getBatteryContextv+0x48>)
   d49fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d49fe:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a00:	ac01      	add	r4, sp, #4
   d4a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4a0c:	4669      	mov	r1, sp
   d4a0e:	2007      	movs	r0, #7
   d4a10:	f7ff ffce 	bl	d49b0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4a14:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4a16:	bfa8      	it	ge
   d4a18:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  sysStatus.batteryState = System.batteryState();
   d4a1a:	4b0a      	ldr	r3, [pc, #40]	; (d4a44 <_Z17getBatteryContextv+0x4c>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a1c:	4a0a      	ldr	r2, [pc, #40]	; (d4a48 <_Z17getBatteryContextv+0x50>)
  sysStatus.batteryState = System.batteryState();
   d4a1e:	7418      	strb	r0, [r3, #16]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a20:	ab08      	add	r3, sp, #32
   d4a22:	b2c0      	uxtb	r0, r0
   d4a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4a28:	2110      	movs	r1, #16
   d4a2a:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4a2e:	4807      	ldr	r0, [pc, #28]	; (d4a4c <_Z17getBatteryContextv+0x54>)
   d4a30:	f002 f844 	bl	d6abc <snprintf>
  sysStatusWriteNeeded = true;
   d4a34:	4b06      	ldr	r3, [pc, #24]	; (d4a50 <_Z17getBatteryContextv+0x58>)
   d4a36:	2201      	movs	r2, #1
   d4a38:	701a      	strb	r2, [r3, #0]
}
   d4a3a:	b009      	add	sp, #36	; 0x24
   d4a3c:	bd30      	pop	{r4, r5, pc}
   d4a3e:	bf00      	nop
   d4a40:	000dadc4 	.word	0x000dadc4
   d4a44:	2003e56c 	.word	0x2003e56c
   d4a48:	000dafac 	.word	0x000dafac
   d4a4c:	2003e449 	.word	0x2003e449
   d4a50:	2003e588 	.word	0x2003e588

000d4a54 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4a54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  sensorData.validData = false;
   d4a58:	4d49      	ldr	r5, [pc, #292]	; (d4b80 <_Z16takeMeasurementsv+0x12c>)
  if (sht31.readTemperature()){
   d4a5a:	484a      	ldr	r0, [pc, #296]	; (d4b84 <_Z16takeMeasurementsv+0x130>)
  sensorData.validData = false;
   d4a5c:	2400      	movs	r4, #0
   d4a5e:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   d4a60:	f000 fcba 	bl	d53d8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4a64:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4a6c:	d074      	beq.n	d4b58 <_Z16takeMeasurementsv+0x104>
    sensorData.temperatureInC = sht31.readTemperature();
   d4a6e:	4845      	ldr	r0, [pc, #276]	; (d4b84 <_Z16takeMeasurementsv+0x130>)
   d4a70:	f000 fcb2 	bl	d53d8 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4a74:	ee10 0a10 	vmov	r0, s0
   d4a78:	f003 fcaa 	bl	d83d0 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d4a7c:	4a42      	ldr	r2, [pc, #264]	; (d4b88 <_Z16takeMeasurementsv+0x134>)
    sensorData.temperatureInC = sht31.readTemperature();
   d4a7e:	e9c5 0102 	strd	r0, r1, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d4a82:	e9cd 0100 	strd	r0, r1, [sp]
   d4a86:	2110      	movs	r1, #16
   d4a88:	4840      	ldr	r0, [pc, #256]	; (d4b8c <_Z16takeMeasurementsv+0x138>)
   d4a8a:	f002 f817 	bl	d6abc <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   d4a8e:	483d      	ldr	r0, [pc, #244]	; (d4b84 <_Z16takeMeasurementsv+0x130>)
   d4a90:	f000 fcb0 	bl	d53f4 <_ZN14Adafruit_SHT3112readHumidityEv>
   d4a94:	ee10 0a10 	vmov	r0, s0
   d4a98:	f003 fc9a 	bl	d83d0 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d4a9c:	4a3c      	ldr	r2, [pc, #240]	; (d4b90 <_Z16takeMeasurementsv+0x13c>)
    sensorData.relativeHumidity = sht31.readHumidity();
   d4a9e:	e9c5 0104 	strd	r0, r1, [r5, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d4aa2:	e9cd 0100 	strd	r0, r1, [sp]
   d4aa6:	2110      	movs	r1, #16
   d4aa8:	483a      	ldr	r0, [pc, #232]	; (d4b94 <_Z16takeMeasurementsv+0x140>)
   d4aaa:	f002 f807 	bl	d6abc <snprintf>
   d4aae:	a903      	add	r1, sp, #12
   d4ab0:	2003      	movs	r0, #3
   d4ab2:	f7ff ff7d 	bl	d49b0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4ab6:	2800      	cmp	r0, #0
   d4ab8:	d15d      	bne.n	d4b76 <_Z16takeMeasurementsv+0x122>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4aba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4abe:	ee07 3a90 	vmov	s15, r3
   d4ac2:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4aca:	4c33      	ldr	r4, [pc, #204]	; (d4b98 <_Z16takeMeasurementsv+0x144>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4acc:	4a33      	ldr	r2, [pc, #204]	; (d4b9c <_Z16takeMeasurementsv+0x148>)
   d4ace:	4834      	ldr	r0, [pc, #208]	; (d4ba0 <_Z16takeMeasurementsv+0x14c>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4ad0:	edc5 7a06 	vstr	s15, [r5, #24]
   d4ad4:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4ad8:	2110      	movs	r1, #16
   d4ada:	f001 ffef 	bl	d6abc <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4ade:	68e0      	ldr	r0, [r4, #12]
   d4ae0:	f003 fc76 	bl	d83d0 <__aeabi_f2d>
   d4ae4:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
   d4ae8:	4602      	mov	r2, r0
   d4aea:	460b      	mov	r3, r1
   d4aec:	4630      	mov	r0, r6
   d4aee:	4639      	mov	r1, r7
   d4af0:	f003 ff38 	bl	d8964 <__aeabi_dcmplt>
   d4af4:	46a0      	mov	r8, r4
   d4af6:	2800      	cmp	r0, #0
   d4af8:	d040      	beq.n	d4b7c <_Z16takeMeasurementsv+0x128>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   d4afa:	2401      	movs	r4, #1
   d4afc:	f888 4001 	strb.w	r4, [r8, #1]
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   d4b00:	f8d8 0008 	ldr.w	r0, [r8, #8]
   d4b04:	f003 fc64 	bl	d83d0 <__aeabi_f2d>
   d4b08:	4602      	mov	r2, r0
   d4b0a:	460b      	mov	r3, r1
   d4b0c:	4630      	mov	r0, r6
   d4b0e:	4639      	mov	r1, r7
   d4b10:	f003 ff46 	bl	d89a0 <__aeabi_dcmpgt>
   d4b14:	b110      	cbz	r0, d4b1c <_Z16takeMeasurementsv+0xc8>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   d4b16:	2401      	movs	r4, #1
   d4b18:	f888 4000 	strb.w	r4, [r8]
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   d4b1c:	f8d8 0014 	ldr.w	r0, [r8, #20]
   d4b20:	f003 fc56 	bl	d83d0 <__aeabi_f2d>
   d4b24:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
   d4b28:	4602      	mov	r2, r0
   d4b2a:	460b      	mov	r3, r1
   d4b2c:	4630      	mov	r0, r6
   d4b2e:	4639      	mov	r1, r7
   d4b30:	f003 ff18 	bl	d8964 <__aeabi_dcmplt>
   d4b34:	b110      	cbz	r0, d4b3c <_Z16takeMeasurementsv+0xe8>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   d4b36:	2401      	movs	r4, #1
   d4b38:	f888 4003 	strb.w	r4, [r8, #3]
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   d4b3c:	f8d8 0010 	ldr.w	r0, [r8, #16]
   d4b40:	f003 fc46 	bl	d83d0 <__aeabi_f2d>
   d4b44:	4602      	mov	r2, r0
   d4b46:	460b      	mov	r3, r1
   d4b48:	4630      	mov	r0, r6
   d4b4a:	4639      	mov	r1, r7
   d4b4c:	f003 ff28 	bl	d89a0 <__aeabi_dcmpgt>
   d4b50:	b110      	cbz	r0, d4b58 <_Z16takeMeasurementsv+0x104>
      alertsStatus.upperHumidityThresholdCrossed = true;
   d4b52:	2401      	movs	r4, #1
   d4b54:	f888 4002 	strb.w	r4, [r8, #2]
    sensorData.validData = true;
   d4b58:	2601      	movs	r6, #1
    getBatteryContext();                   // Check what the battery is doing.
   d4b5a:	f7ff ff4d 	bl	d49f8 <_Z17getBatteryContextv>
    sensorData.validData = true;
   d4b5e:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   d4b60:	f003 f829 	bl	d7bb6 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d4b64:	4b0f      	ldr	r3, [pc, #60]	; (d4ba4 <_Z16takeMeasurementsv+0x150>)
    sensorData.timeStamp = Time.now();
   d4b66:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   d4b68:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   d4b6a:	4b0f      	ldr	r3, [pc, #60]	; (d4ba8 <_Z16takeMeasurementsv+0x154>)
}
   d4b6c:	4620      	mov	r0, r4
    alertsStatusWriteNeeded = true;  
   d4b6e:	701e      	strb	r6, [r3, #0]
}
   d4b70:	b004      	add	sp, #16
   d4b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1.0f;
   d4b76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4b7a:	e7a4      	b.n	d4ac6 <_Z16takeMeasurementsv+0x72>
  bool haveAnyAlertsBeenSet = false;
   d4b7c:	4604      	mov	r4, r0
   d4b7e:	e7bf      	b.n	d4b00 <_Z16takeMeasurementsv+0xac>
   d4b80:	2003e538 	.word	0x2003e538
   d4b84:	2003e55c 	.word	0x2003e55c
   d4b88:	000dac15 	.word	0x000dac15
   d4b8c:	2003e589 	.word	0x2003e589
   d4b90:	000dac1d 	.word	0x000dac1d
   d4b94:	2003e47c 	.word	0x2003e47c
   d4b98:	2003e430 	.word	0x2003e430
   d4b9c:	000dac25 	.word	0x000dac25
   d4ba0:	2003e459 	.word	0x2003e459
   d4ba4:	2003e558 	.word	0x2003e558
   d4ba8:	2003e448 	.word	0x2003e448

000d4bac <loop>:
{
   d4bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d4bae:	4c6f      	ldr	r4, [pc, #444]	; (d4d6c <loop+0x1c0>)
   d4bb0:	4d6f      	ldr	r5, [pc, #444]	; (d4d70 <loop+0x1c4>)
   d4bb2:	7823      	ldrb	r3, [r4, #0]
   d4bb4:	3b01      	subs	r3, #1
   d4bb6:	2b04      	cmp	r3, #4
   d4bb8:	d850      	bhi.n	d4c5c <loop+0xb0>
   d4bba:	e8df f003 	tbb	[pc, r3]
   d4bbe:	03b3      	.short	0x03b3
   d4bc0:	2f19      	.short	0x2f19
   d4bc2:	7f          	.byte	0x7f
   d4bc3:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4bc4:	4b6b      	ldr	r3, [pc, #428]	; (d4d74 <loop+0x1c8>)
   d4bc6:	7a5b      	ldrb	r3, [r3, #9]
   d4bc8:	b12b      	cbz	r3, d4bd6 <loop+0x2a>
   d4bca:	4b6b      	ldr	r3, [pc, #428]	; (d4d78 <loop+0x1cc>)
   d4bcc:	781b      	ldrb	r3, [r3, #0]
   d4bce:	2b02      	cmp	r3, #2
   d4bd0:	d001      	beq.n	d4bd6 <loop+0x2a>
   d4bd2:	f7ff fdd7 	bl	d4784 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   d4bd6:	f002 ffee 	bl	d7bb6 <_ZN9TimeClass3nowEv>
   d4bda:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4bde:	fb90 f2f3 	sdiv	r2, r0, r3
   d4be2:	fb02 0313 	mls	r3, r2, r3, r0
   d4be6:	2b00      	cmp	r3, #0
   d4be8:	d138      	bne.n	d4c5c <loop+0xb0>
   d4bea:	2303      	movs	r3, #3
     state = IDLE_STATE;
   d4bec:	7023      	strb	r3, [r4, #0]
   d4bee:	e035      	b.n	d4c5c <loop+0xb0>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4bf0:	4b60      	ldr	r3, [pc, #384]	; (d4d74 <loop+0x1c8>)
   d4bf2:	7a5b      	ldrb	r3, [r3, #9]
   d4bf4:	b12b      	cbz	r3, d4c02 <loop+0x56>
   d4bf6:	4b60      	ldr	r3, [pc, #384]	; (d4d78 <loop+0x1cc>)
   d4bf8:	781b      	ldrb	r3, [r3, #0]
   d4bfa:	2b03      	cmp	r3, #3
   d4bfc:	d001      	beq.n	d4c02 <loop+0x56>
   d4bfe:	f7ff fdc1 	bl	d4784 <_Z22publishStateTransitionv>
    if (takeMeasurements()) flashTheLED = true;
   d4c02:	f7ff ff27 	bl	d4a54 <_Z16takeMeasurementsv>
   d4c06:	4601      	mov	r1, r0
   d4c08:	b118      	cbz	r0, d4c12 <loop+0x66>
   d4c0a:	2301      	movs	r3, #1
   d4c0c:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   d4c0e:	2304      	movs	r3, #4
   d4c10:	e7ec      	b.n	d4bec <loop+0x40>
      flashTheLED = false;
   d4c12:	7028      	strb	r0, [r5, #0]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   d4c14:	2007      	movs	r0, #7
   d4c16:	f003 f9fc 	bl	d8012 <digitalWrite>
   d4c1a:	e7f8      	b.n	d4c0e <loop+0x62>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d4c1c:	4b55      	ldr	r3, [pc, #340]	; (d4d74 <loop+0x1c8>)
   d4c1e:	7a5b      	ldrb	r3, [r3, #9]
   d4c20:	b12b      	cbz	r3, d4c2e <loop+0x82>
   d4c22:	4b55      	ldr	r3, [pc, #340]	; (d4d78 <loop+0x1cc>)
   d4c24:	781b      	ldrb	r3, [r3, #0]
   d4c26:	2b04      	cmp	r3, #4
   d4c28:	d001      	beq.n	d4c2e <loop+0x82>
   d4c2a:	f7ff fdab 	bl	d4784 <_Z22publishStateTransitionv>
   d4c2e:	f001 fe8d 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c32:	b168      	cbz	r0, d4c50 <loop+0xa4>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4c34:	f002 ffd0 	bl	d7bd8 <_ZN9TimeClass4hourEv>
   d4c38:	280c      	cmp	r0, #12
   d4c3a:	d105      	bne.n	d4c48 <loop+0x9c>
   d4c3c:	f001 fe86 	bl	d694c <spark_cloud_flag_connected>
        if (!connected()) {
   d4c40:	b110      	cbz	r0, d4c48 <loop+0x9c>
        return spark_sync_time(NULL);
   d4c42:	2000      	movs	r0, #0
   d4c44:	f001 fea2 	bl	d698c <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4c48:	f7ff fd4e 	bl	d46e8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4c4c:	2305      	movs	r3, #5
   d4c4e:	e7cd      	b.n	d4bec <loop+0x40>
      state = ERROR_STATE;
   d4c50:	2301      	movs	r3, #1
   d4c52:	7023      	strb	r3, [r4, #0]
   d4c54:	f001 fc9a 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c58:	4b48      	ldr	r3, [pc, #288]	; (d4d7c <loop+0x1d0>)
   d4c5a:	6018      	str	r0, [r3, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4c5c:	4848      	ldr	r0, [pc, #288]	; (d4d80 <loop+0x1d4>)
   d4c5e:	f001 fb5d 	bl	d631c <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4c62:	4b48      	ldr	r3, [pc, #288]	; (d4d84 <loop+0x1d8>)
   d4c64:	781b      	ldrb	r3, [r3, #0]
   d4c66:	b10b      	cbz	r3, d4c6c <loop+0xc0>
   d4c68:	f7ff fd2e 	bl	d46c8 <_Z11petWatchdogv>
  if (flashTheLED) blinkLED(blueLED);
   d4c6c:	782b      	ldrb	r3, [r5, #0]
   d4c6e:	b113      	cbz	r3, d4c76 <loop+0xca>
   d4c70:	2007      	movs	r0, #7
   d4c72:	f7ff fd6d 	bl	d4750 <_Z8blinkLEDi>
  if (sysStatusWriteNeeded) {
   d4c76:	4c44      	ldr	r4, [pc, #272]	; (d4d88 <loop+0x1dc>)
   d4c78:	7823      	ldrb	r3, [r4, #0]
   d4c7a:	b13b      	cbz	r3, d4c8c <loop+0xe0>
   d4c7c:	231c      	movs	r3, #28
   d4c7e:	4a3d      	ldr	r2, [pc, #244]	; (d4d74 <loop+0x1c8>)
   d4c80:	4842      	ldr	r0, [pc, #264]	; (d4d8c <loop+0x1e0>)
   d4c82:	2101      	movs	r1, #1
   d4c84:	f000 fc7f 	bl	d5586 <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4c88:	2300      	movs	r3, #0
   d4c8a:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   d4c8c:	4c40      	ldr	r4, [pc, #256]	; (d4d90 <loop+0x1e4>)
   d4c8e:	7823      	ldrb	r3, [r4, #0]
   d4c90:	b13b      	cbz	r3, d4ca2 <loop+0xf6>
   d4c92:	2318      	movs	r3, #24
   d4c94:	4a3f      	ldr	r2, [pc, #252]	; (d4d94 <loop+0x1e8>)
   d4c96:	483d      	ldr	r0, [pc, #244]	; (d4d8c <loop+0x1e0>)
   d4c98:	2150      	movs	r1, #80	; 0x50
   d4c9a:	f000 fc74 	bl	d5586 <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   d4c9e:	2300      	movs	r3, #0
   d4ca0:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4ca2:	4c3d      	ldr	r4, [pc, #244]	; (d4d98 <loop+0x1ec>)
   d4ca4:	7823      	ldrb	r3, [r4, #0]
   d4ca6:	b13b      	cbz	r3, d4cb8 <loop+0x10c>
   d4ca8:	2320      	movs	r3, #32
   d4caa:	4a3c      	ldr	r2, [pc, #240]	; (d4d9c <loop+0x1f0>)
   d4cac:	4837      	ldr	r0, [pc, #220]	; (d4d8c <loop+0x1e0>)
   d4cae:	21a0      	movs	r1, #160	; 0xa0
   d4cb0:	f000 fc69 	bl	d5586 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4cb4:	2300      	movs	r3, #0
   d4cb6:	7023      	strb	r3, [r4, #0]
}
   d4cb8:	b002      	add	sp, #8
   d4cba:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4cbc:	4b2d      	ldr	r3, [pc, #180]	; (d4d74 <loop+0x1c8>)
   d4cbe:	7a5b      	ldrb	r3, [r3, #9]
   d4cc0:	b12b      	cbz	r3, d4cce <loop+0x122>
   d4cc2:	4b2d      	ldr	r3, [pc, #180]	; (d4d78 <loop+0x1cc>)
   d4cc4:	781b      	ldrb	r3, [r3, #0]
   d4cc6:	2b05      	cmp	r3, #5
   d4cc8:	d001      	beq.n	d4cce <loop+0x122>
   d4cca:	f7ff fd5b 	bl	d4784 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d4cce:	4b34      	ldr	r3, [pc, #208]	; (d4da0 <loop+0x1f4>)
   d4cd0:	781b      	ldrb	r3, [r3, #0]
   d4cd2:	b953      	cbnz	r3, d4cea <loop+0x13e>
   d4cd4:	f002 ff6f 	bl	d7bb6 <_ZN9TimeClass3nowEv>
   d4cd8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4cdc:	fb90 f2f3 	sdiv	r2, r0, r3
   d4ce0:	fb02 0313 	mls	r3, r2, r3, r0
   d4ce4:	b10b      	cbz	r3, d4cea <loop+0x13e>
     state = IDLE_STATE;
   d4ce6:	2302      	movs	r3, #2
   d4ce8:	e780      	b.n	d4bec <loop+0x40>
   d4cea:	f001 fc4f 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d4cee:	4b2d      	ldr	r3, [pc, #180]	; (d4da4 <loop+0x1f8>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	1ac0      	subs	r0, r0, r3
   d4cf4:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4cf8:	4298      	cmp	r0, r3
   d4cfa:	d9af      	bls.n	d4c5c <loop+0xb0>
   d4cfc:	f001 fc46 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
   d4d00:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4d02:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   d4d06:	4e1d      	ldr	r6, [pc, #116]	; (d4d7c <loop+0x1d0>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4d08:	4b27      	ldr	r3, [pc, #156]	; (d4da8 <loop+0x1fc>)
   d4d0a:	4a28      	ldr	r2, [pc, #160]	; (d4dac <loop+0x200>)
   d4d0c:	781b      	ldrb	r3, [r3, #0]
   d4d0e:	4928      	ldr	r1, [pc, #160]	; (d4db0 <loop+0x204>)
      resetTimeStamp = millis();
   d4d10:	6030      	str	r0, [r6, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4d12:	4828      	ldr	r0, [pc, #160]	; (d4db4 <loop+0x208>)
   d4d14:	f7ff fae2 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d4d18:	2301      	movs	r3, #1
   d4d1a:	7023      	strb	r3, [r4, #0]
   d4d1c:	f001 fc36 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4d20:	6030      	str	r0, [r6, #0]
   d4d22:	e79b      	b.n	d4c5c <loop+0xb0>
    if (state != oldState) publishStateTransition();
   d4d24:	4b14      	ldr	r3, [pc, #80]	; (d4d78 <loop+0x1cc>)
   d4d26:	781b      	ldrb	r3, [r3, #0]
   d4d28:	2b01      	cmp	r3, #1
   d4d2a:	d001      	beq.n	d4d30 <loop+0x184>
   d4d2c:	f7ff fd2a 	bl	d4784 <_Z22publishStateTransitionv>
   d4d30:	f001 fc2c 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4d34:	4b11      	ldr	r3, [pc, #68]	; (d4d7c <loop+0x1d0>)
   d4d36:	681b      	ldr	r3, [r3, #0]
   d4d38:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4d3c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4d40:	4283      	cmp	r3, r0
   d4d42:	d28b      	bcs.n	d4c5c <loop+0xb0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d44:	f001 fe02 	bl	d694c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d4d48:	b148      	cbz	r0, d4d5e <loop+0x1b2>
   d4d4a:	2300      	movs	r3, #0
   d4d4c:	f88d 3000 	strb.w	r3, [sp]
   d4d50:	4b15      	ldr	r3, [pc, #84]	; (d4da8 <loop+0x1fc>)
   d4d52:	4a19      	ldr	r2, [pc, #100]	; (d4db8 <loop+0x20c>)
   d4d54:	781b      	ldrb	r3, [r3, #0]
   d4d56:	4919      	ldr	r1, [pc, #100]	; (d4dbc <loop+0x210>)
   d4d58:	4816      	ldr	r0, [pc, #88]	; (d4db4 <loop+0x208>)
   d4d5a:	f7ff fabf 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4d5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d62:	f001 feeb 	bl	d6b3c <delay>
      System.reset();
   d4d66:	f002 fdab 	bl	d78c0 <_ZN11SystemClass5resetEv>
   d4d6a:	e777      	b.n	d4c5c <loop+0xb0>
   d4d6c:	2003e568 	.word	0x2003e568
   d4d70:	2003e46a 	.word	0x2003e46a
   d4d74:	2003e56c 	.word	0x2003e56c
   d4d78:	2003e4d8 	.word	0x2003e4d8
   d4d7c:	2003e514 	.word	0x2003e514
   d4d80:	2003e518 	.word	0x2003e518
   d4d84:	2003e5c9 	.word	0x2003e5c9
   d4d88:	2003e588 	.word	0x2003e588
   d4d8c:	2003e46c 	.word	0x2003e46c
   d4d90:	2003e448 	.word	0x2003e448
   d4d94:	2003e430 	.word	0x2003e430
   d4d98:	2003e558 	.word	0x2003e558
   d4d9c:	2003e538 	.word	0x2003e538
   d4da0:	2003e469 	.word	0x2003e469
   d4da4:	2003e5cc 	.word	0x2003e5cc
   d4da8:	2003e429 	.word	0x2003e429
   d4dac:	000db22c 	.word	0x000db22c
   d4db0:	000dac2b 	.word	0x000dac2b
   d4db4:	2003e4dc 	.word	0x2003e4dc
   d4db8:	000dac44 	.word	0x000dac44
   d4dbc:	000daa8e 	.word	0x000daa8e

000d4dc0 <setup>:
{
   d4dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4dc2:	2100      	movs	r1, #0
{
   d4dc4:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4dc6:	2008      	movs	r0, #8
   d4dc8:	f003 f912 	bl	d7ff0 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4dcc:	2101      	movs	r1, #1
   d4dce:	2005      	movs	r0, #5
   d4dd0:	f003 f90e 	bl	d7ff0 <pinMode>
  pinMode(blueLED, OUTPUT);                                                                 // declare the Blue LED Pin as an output
   d4dd4:	2101      	movs	r1, #1
   d4dd6:	2007      	movs	r0, #7
   d4dd8:	f003 f90a 	bl	d7ff0 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d4ddc:	f7ff fc74 	bl	d46c8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d4de0:	2300      	movs	r3, #0
   d4de2:	9300      	str	r3, [sp, #0]
   d4de4:	2201      	movs	r2, #1
   d4de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4dea:	4988      	ldr	r1, [pc, #544]	; (d500c <setup+0x24c>)
   d4dec:	2008      	movs	r0, #8
   d4dee:	f002 faed 	bl	d73cc <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4df2:	4b87      	ldr	r3, [pc, #540]	; (d5010 <setup+0x250>)
   d4df4:	aa0a      	add	r2, sp, #40	; 0x28
   d4df6:	f103 0510 	add.w	r5, r3, #16
   d4dfa:	4616      	mov	r6, r2
   d4dfc:	6818      	ldr	r0, [r3, #0]
   d4dfe:	6859      	ldr	r1, [r3, #4]
   d4e00:	4614      	mov	r4, r2
   d4e02:	c403      	stmia	r4!, {r0, r1}
   d4e04:	3308      	adds	r3, #8
   d4e06:	42ab      	cmp	r3, r5
   d4e08:	4622      	mov	r2, r4
   d4e0a:	d1f7      	bne.n	d4dfc <setup+0x3c>
   d4e0c:	8819      	ldrh	r1, [r3, #0]
   d4e0e:	789b      	ldrb	r3, [r3, #2]
   d4e10:	70a3      	strb	r3, [r4, #2]
  state = INITIALIZATION_STATE;
   d4e12:	4f80      	ldr	r7, [pc, #512]	; (d5014 <setup+0x254>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4e14:	8021      	strh	r1, [r4, #0]
   d4e16:	222d      	movs	r2, #45	; 0x2d
   d4e18:	2100      	movs	r1, #0
   d4e1a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   d4e1e:	2400      	movs	r4, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4e20:	f003 fecc 	bl	d8bbc <memset>
    static String deviceID(void) { return spark_deviceID(); }
   d4e24:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d4e26:	703c      	strb	r4, [r7, #0]
   d4e28:	f001 fd98 	bl	d695c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4e2c:	4623      	mov	r3, r4
   d4e2e:	227d      	movs	r2, #125	; 0x7d
   d4e30:	a91a      	add	r1, sp, #104	; 0x68
   d4e32:	a802      	add	r0, sp, #8
   d4e34:	f002 fd09 	bl	d784a <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4e38:	4623      	mov	r3, r4
   d4e3a:	4622      	mov	r2, r4
   d4e3c:	e9cd 4400 	strd	r4, r4, [sp]
   d4e40:	4975      	ldr	r1, [pc, #468]	; (d5018 <setup+0x258>)
   d4e42:	4d76      	ldr	r5, [pc, #472]	; (d501c <setup+0x25c>)
   d4e44:	a81a      	add	r0, sp, #104	; 0x68
   d4e46:	f001 fd99 	bl	d697c <spark_subscribe>
        return _variable(varKey, var, STRING);
   d4e4a:	4975      	ldr	r1, [pc, #468]	; (d5020 <setup+0x260>)
   d4e4c:	4875      	ldr	r0, [pc, #468]	; (d5024 <setup+0x264>)
   d4e4e:	f7ff f9b0 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e52:	4975      	ldr	r1, [pc, #468]	; (d5028 <setup+0x268>)
   d4e54:	4875      	ldr	r0, [pc, #468]	; (d502c <setup+0x26c>)
   d4e56:	f7ff f9ac 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e5a:	4975      	ldr	r1, [pc, #468]	; (d5030 <setup+0x270>)
   d4e5c:	4875      	ldr	r0, [pc, #468]	; (d5034 <setup+0x274>)
   d4e5e:	f7ff f9a8 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e62:	4975      	ldr	r1, [pc, #468]	; (d5038 <setup+0x278>)
   d4e64:	4875      	ldr	r0, [pc, #468]	; (d503c <setup+0x27c>)
   d4e66:	f7ff f9a4 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e6a:	4975      	ldr	r1, [pc, #468]	; (d5040 <setup+0x280>)
   d4e6c:	4875      	ldr	r0, [pc, #468]	; (d5044 <setup+0x284>)
   d4e6e:	f7ff f9a0 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e72:	4975      	ldr	r1, [pc, #468]	; (d5048 <setup+0x288>)
   d4e74:	4875      	ldr	r0, [pc, #468]	; (d504c <setup+0x28c>)
   d4e76:	f7ff f99c 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e7a:	4975      	ldr	r1, [pc, #468]	; (d5050 <setup+0x290>)
   d4e7c:	4875      	ldr	r0, [pc, #468]	; (d5054 <setup+0x294>)
   d4e7e:	f7ff f998 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e82:	4975      	ldr	r1, [pc, #468]	; (d5058 <setup+0x298>)
   d4e84:	4875      	ldr	r0, [pc, #468]	; (d505c <setup+0x29c>)
   d4e86:	f7ff f994 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e8a:	4975      	ldr	r1, [pc, #468]	; (d5060 <setup+0x2a0>)
   d4e8c:	4875      	ldr	r0, [pc, #468]	; (d5064 <setup+0x2a4>)
   d4e8e:	f7ff f990 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4e92:	4623      	mov	r3, r4
   d4e94:	4974      	ldr	r1, [pc, #464]	; (d5068 <setup+0x2a8>)
   d4e96:	4875      	ldr	r0, [pc, #468]	; (d506c <setup+0x2ac>)
   d4e98:	2202      	movs	r2, #2
   d4e9a:	f001 fd3f 	bl	d691c <spark_variable>
   d4e9e:	4623      	mov	r3, r4
   d4ea0:	2201      	movs	r2, #1
   d4ea2:	4973      	ldr	r1, [pc, #460]	; (d5070 <setup+0x2b0>)
   d4ea4:	4873      	ldr	r0, [pc, #460]	; (d5074 <setup+0x2b4>)
   d4ea6:	f001 fd39 	bl	d691c <spark_variable>
        return _function(name, args...);
   d4eaa:	4973      	ldr	r1, [pc, #460]	; (d5078 <setup+0x2b8>)
   d4eac:	4873      	ldr	r0, [pc, #460]	; (d507c <setup+0x2bc>)
   d4eae:	f7ff f9eb 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4eb2:	4973      	ldr	r1, [pc, #460]	; (d5080 <setup+0x2c0>)
   d4eb4:	4873      	ldr	r0, [pc, #460]	; (d5084 <setup+0x2c4>)
   d4eb6:	f7ff f9e7 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4eba:	4973      	ldr	r1, [pc, #460]	; (d5088 <setup+0x2c8>)
   d4ebc:	4873      	ldr	r0, [pc, #460]	; (d508c <setup+0x2cc>)
   d4ebe:	f7ff f9e3 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ec2:	4973      	ldr	r1, [pc, #460]	; (d5090 <setup+0x2d0>)
   d4ec4:	4873      	ldr	r0, [pc, #460]	; (d5094 <setup+0x2d4>)
   d4ec6:	f7ff f9df 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4eca:	4973      	ldr	r1, [pc, #460]	; (d5098 <setup+0x2d8>)
   d4ecc:	4873      	ldr	r0, [pc, #460]	; (d509c <setup+0x2dc>)
   d4ece:	f7ff f9db 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ed2:	4973      	ldr	r1, [pc, #460]	; (d50a0 <setup+0x2e0>)
   d4ed4:	4873      	ldr	r0, [pc, #460]	; (d50a4 <setup+0x2e4>)
   d4ed6:	f7ff f9d7 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4eda:	4973      	ldr	r1, [pc, #460]	; (d50a8 <setup+0x2e8>)
   d4edc:	4873      	ldr	r0, [pc, #460]	; (d50ac <setup+0x2ec>)
   d4ede:	f7ff f9d3 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ee2:	4973      	ldr	r1, [pc, #460]	; (d50b0 <setup+0x2f0>)
   d4ee4:	4863      	ldr	r0, [pc, #396]	; (d5074 <setup+0x2b4>)
   d4ee6:	f7ff f9cf 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d4eea:	4872      	ldr	r0, [pc, #456]	; (d50b4 <setup+0x2f4>)
   d4eec:	f001 f910 	bl	d6110 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d4ef0:	4621      	mov	r1, r4
   d4ef2:	4870      	ldr	r0, [pc, #448]	; (d50b4 <setup+0x2f4>)
   d4ef4:	f001 fa49 	bl	d638a <_ZN8MCP7941010clearAlarmEi>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4ef8:	f002 fe5d 	bl	d7bb6 <_ZN9TimeClass3nowEv>
   d4efc:	4602      	mov	r2, r0
   d4efe:	17c3      	asrs	r3, r0, #31
   d4f00:	a806      	add	r0, sp, #24
   d4f02:	f002 fd55 	bl	d79b0 <_ZN9TimeClass7timeStrEx>
   d4f06:	f88d 4000 	strb.w	r4, [sp]
   d4f0a:	782b      	ldrb	r3, [r5, #0]
   d4f0c:	9a06      	ldr	r2, [sp, #24]
   d4f0e:	496a      	ldr	r1, [pc, #424]	; (d50b8 <setup+0x2f8>)
   d4f10:	486a      	ldr	r0, [pc, #424]	; (d50bc <setup+0x2fc>)
   d4f12:	f7ff f9e3 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4f16:	a806      	add	r0, sp, #24
   d4f18:	f002 fc0c 	bl	d7734 <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   d4f1c:	4868      	ldr	r0, [pc, #416]	; (d50c0 <setup+0x300>)
   d4f1e:	2144      	movs	r1, #68	; 0x44
   d4f20:	f000 f9c5 	bl	d52ae <_ZN14Adafruit_SHT315beginEh>
   d4f24:	463c      	mov	r4, r7
   d4f26:	462f      	mov	r7, r5
   d4f28:	b948      	cbnz	r0, d4f3e <setup+0x17e>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4f2a:	4966      	ldr	r1, [pc, #408]	; (d50c4 <setup+0x304>)
   d4f2c:	4630      	mov	r0, r6
   d4f2e:	f003 fe7b 	bl	d8c28 <strcpy>
    state = ERROR_STATE;
   d4f32:	2301      	movs	r3, #1
   d4f34:	7023      	strb	r3, [r4, #0]
   d4f36:	f001 fb29 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4f3a:	4b63      	ldr	r3, [pc, #396]	; (d50c8 <setup+0x308>)
   d4f3c:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   d4f3e:	4863      	ldr	r0, [pc, #396]	; (d50cc <setup+0x30c>)
   d4f40:	f000 fa94 	bl	d546c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f44:	2301      	movs	r3, #1
   d4f46:	4861      	ldr	r0, [pc, #388]	; (d50cc <setup+0x30c>)
   d4f48:	aa06      	add	r2, sp, #24
   d4f4a:	2100      	movs	r1, #0
   d4f4c:	f000 fad0 	bl	d54f0 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4f50:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4f54:	2b04      	cmp	r3, #4
   d4f56:	d026      	beq.n	d4fa6 <setup+0x1e6>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4f58:	485c      	ldr	r0, [pc, #368]	; (d50cc <setup+0x30c>)
   d4f5a:	f000 fa91 	bl	d5480 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f5e:	4a5c      	ldr	r2, [pc, #368]	; (d50d0 <setup+0x310>)
   d4f60:	485a      	ldr	r0, [pc, #360]	; (d50cc <setup+0x30c>)
   d4f62:	2304      	movs	r3, #4
   d4f64:	2100      	movs	r1, #0
   d4f66:	f000 fb0e 	bl	d5586 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f6a:	2301      	movs	r3, #1
   d4f6c:	4857      	ldr	r0, [pc, #348]	; (d50cc <setup+0x30c>)
   d4f6e:	aa06      	add	r2, sp, #24
   d4f70:	2100      	movs	r1, #0
   d4f72:	f000 fabd 	bl	d54f0 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4f76:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4f7a:	2b04      	cmp	r3, #4
   d4f7c:	d00e      	beq.n	d4f9c <setup+0x1dc>
   d4f7e:	2301      	movs	r3, #1
   d4f80:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d4f82:	4d54      	ldr	r5, [pc, #336]	; (d50d4 <setup+0x314>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4f84:	f7ff fb22 	bl	d45cc <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   d4f88:	f7ff fb4a 	bl	d4620 <_Z17checkAlertsValuesv>
  if (sysStatus.thirdPartySim) {
   d4f8c:	786b      	ldrb	r3, [r5, #1]
   d4f8e:	b32b      	cbz	r3, d4fdc <setup+0x21c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f90:	f001 fcdc 	bl	d694c <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   d4f94:	b9a0      	cbnz	r0, d4fc0 <setup+0x200>
            spark_process();
   d4f96:	f001 fcd1 	bl	d693c <spark_process>
        while (_while() && !_condition()) {
   d4f9a:	e7f9      	b.n	d4f90 <setup+0x1d0>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d4f9c:	f7ff faba 	bl	d4514 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   d4fa0:	f7ff fae2 	bl	d4568 <_Z17loadAlertDefaultsv>
   d4fa4:	e7ed      	b.n	d4f82 <setup+0x1c2>
   d4fa6:	4a4b      	ldr	r2, [pc, #300]	; (d50d4 <setup+0x314>)
   d4fa8:	4848      	ldr	r0, [pc, #288]	; (d50cc <setup+0x30c>)
   d4faa:	231c      	movs	r3, #28
   d4fac:	2101      	movs	r1, #1
   d4fae:	f000 fa9f 	bl	d54f0 <_ZN6MB85RC8readDataEjPhj>
   d4fb2:	4a49      	ldr	r2, [pc, #292]	; (d50d8 <setup+0x318>)
   d4fb4:	4845      	ldr	r0, [pc, #276]	; (d50cc <setup+0x30c>)
   d4fb6:	2318      	movs	r3, #24
   d4fb8:	2150      	movs	r1, #80	; 0x50
   d4fba:	f000 fa99 	bl	d54f0 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4fbe:	e7e0      	b.n	d4f82 <setup+0x1c2>
   d4fc0:	f001 fcc4 	bl	d694c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d4fc4:	6868      	ldr	r0, [r5, #4]
   d4fc6:	f7ff f965 	bl	d4294 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4fca:	686b      	ldr	r3, [r5, #4]
   d4fcc:	4843      	ldr	r0, [pc, #268]	; (d50dc <setup+0x31c>)
   d4fce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4fd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4fd6:	4359      	muls	r1, r3
   d4fd8:	f7ff f96f 	bl	d42ba <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d4fdc:	f7ff fd3a 	bl	d4a54 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   d4fe0:	f7ff fc02 	bl	d47e8 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d4fe4:	7a6b      	ldrb	r3, [r5, #9]
   d4fe6:	b143      	cbz	r3, d4ffa <setup+0x23a>
   d4fe8:	2300      	movs	r3, #0
   d4fea:	f88d 3000 	strb.w	r3, [sp]
   d4fee:	783b      	ldrb	r3, [r7, #0]
   d4ff0:	493b      	ldr	r1, [pc, #236]	; (d50e0 <setup+0x320>)
   d4ff2:	4832      	ldr	r0, [pc, #200]	; (d50bc <setup+0x2fc>)
   d4ff4:	4632      	mov	r2, r6
   d4ff6:	f7ff f971 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d4ffa:	7823      	ldrb	r3, [r4, #0]
   d4ffc:	b90b      	cbnz	r3, d5002 <setup+0x242>
   d4ffe:	2302      	movs	r3, #2
   d5000:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d5002:	a802      	add	r0, sp, #8
   d5004:	f002 fb96 	bl	d7734 <_ZN6StringD1Ev>
}
   d5008:	b03b      	add	sp, #236	; 0xec
   d500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d500c:	000d40c9 	.word	0x000d40c9
   d5010:	000dade0 	.word	0x000dade0
   d5014:	2003e568 	.word	0x2003e568
   d5018:	000d42f9 	.word	0x000d42f9
   d501c:	2003e429 	.word	0x2003e429
   d5020:	000dae20 	.word	0x000dae20
   d5024:	000dac58 	.word	0x000dac58
   d5028:	2003e589 	.word	0x2003e589
   d502c:	000dac60 	.word	0x000dac60
   d5030:	2003e47c 	.word	0x2003e47c
   d5034:	000dac6c 	.word	0x000dac6c
   d5038:	2003e5b1 	.word	0x2003e5b1
   d503c:	000dac75 	.word	0x000dac75
   d5040:	2003e4c0 	.word	0x2003e4c0
   d5044:	000dac87 	.word	0x000dac87
   d5048:	2003e599 	.word	0x2003e599
   d504c:	000dac99 	.word	0x000dac99
   d5050:	2003e4a8 	.word	0x2003e4a8
   d5054:	000daca8 	.word	0x000daca8
   d5058:	2003e459 	.word	0x2003e459
   d505c:	000dacb7 	.word	0x000dacb7
   d5060:	2003e449 	.word	0x2003e449
   d5064:	000dacbf 	.word	0x000dacbf
   d5068:	2003e570 	.word	0x2003e570
   d506c:	000dacce 	.word	0x000dacce
   d5070:	2003e56d 	.word	0x2003e56d
   d5074:	000daac3 	.word	0x000daac3
   d5078:	000d40f1 	.word	0x000d40f1
   d507c:	000dacdd 	.word	0x000dacdd
   d5080:	000d4391 	.word	0x000d4391
   d5084:	000dace9 	.word	0x000dace9
   d5088:	000d4871 	.word	0x000d4871
   d508c:	000dacf6 	.word	0x000dacf6
   d5090:	000d48c1 	.word	0x000d48c1
   d5094:	000dad07 	.word	0x000dad07
   d5098:	000d4961 	.word	0x000d4961
   d509c:	000dad18 	.word	0x000dad18
   d50a0:	000d4911 	.word	0x000d4911
   d50a4:	000dad2d 	.word	0x000dad2d
   d50a8:	000d44ad 	.word	0x000d44ad
   d50ac:	000daafe 	.word	0x000daafe
   d50b0:	000d4411 	.word	0x000d4411
   d50b4:	2003e518 	.word	0x2003e518
   d50b8:	000dad41 	.word	0x000dad41
   d50bc:	2003e4dc 	.word	0x2003e4dc
   d50c0:	2003e55c 	.word	0x2003e55c
   d50c4:	000dad46 	.word	0x000dad46
   d50c8:	2003e514 	.word	0x2003e514
   d50cc:	2003e46c 	.word	0x2003e46c
   d50d0:	000dae28 	.word	0x000dae28
   d50d4:	2003e56c 	.word	0x2003e56c
   d50d8:	2003e430 	.word	0x2003e430
   d50dc:	2003e48c 	.word	0x2003e48c
   d50e0:	000dad63 	.word	0x000dad63

000d50e4 <_GLOBAL__sub_I___appProductID>:
}
   d50e4:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d50e6:	4b47      	ldr	r3, [pc, #284]	; (d5204 <_GLOBAL__sub_I___appProductID+0x120>)
              error_(SYSTEM_ERROR_NONE) {
   d50e8:	4c47      	ldr	r4, [pc, #284]	; (d5208 <_GLOBAL__sub_I___appProductID+0x124>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d50ea:	4e48      	ldr	r6, [pc, #288]	; (d520c <_GLOBAL__sub_I___appProductID+0x128>)
   d50ec:	2701      	movs	r7, #1
   d50ee:	701f      	strb	r7, [r3, #0]
   d50f0:	4b47      	ldr	r3, [pc, #284]	; (d5210 <_GLOBAL__sub_I___appProductID+0x12c>)
   d50f2:	2202      	movs	r2, #2
}
   d50f4:	b089      	sub	sp, #36	; 0x24
   d50f6:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d50f8:	f002 ff24 	bl	d7f44 <spark_protocol_instance>
   d50fc:	2300      	movs	r3, #0
   d50fe:	461a      	mov	r2, r3
   d5100:	f243 0171 	movw	r1, #12401	; 0x3071
   d5104:	f002 ff26 	bl	d7f54 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5108:	f002 ff1c 	bl	d7f44 <spark_protocol_instance>
   d510c:	2300      	movs	r3, #0
   d510e:	461a      	mov	r2, r3
   d5110:	210c      	movs	r1, #12
   d5112:	f002 ff27 	bl	d7f64 <spark_protocol_set_product_firmware_version>
   d5116:	2500      	movs	r5, #0
    SleepResult() {}
   d5118:	4b3e      	ldr	r3, [pc, #248]	; (d5214 <_GLOBAL__sub_I___appProductID+0x130>)
   d511a:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d511c:	6025      	str	r5, [r4, #0]
   d511e:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d5120:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d5122:	4638      	mov	r0, r7
   d5124:	f001 fba4 	bl	d6870 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5128:	4632      	mov	r2, r6
   d512a:	493b      	ldr	r1, [pc, #236]	; (d5218 <_GLOBAL__sub_I___appProductID+0x134>)
   d512c:	4620      	mov	r0, r4
   d512e:	f002 ffdd 	bl	d80ec <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5132:	4629      	mov	r1, r5
   d5134:	4638      	mov	r0, r7
   d5136:	f001 fbab 	bl	d6890 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d513a:	4639      	mov	r1, r7
   d513c:	2004      	movs	r0, #4
   d513e:	f001 fa05 	bl	d654c <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d5142:	4836      	ldr	r0, [pc, #216]	; (d521c <_GLOBAL__sub_I___appProductID+0x138>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5144:	4c36      	ldr	r4, [pc, #216]	; (d5220 <_GLOBAL__sub_I___appProductID+0x13c>)
   d5146:	f000 f88f 	bl	d5268 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d514a:	f002 ffa7 	bl	d809c <_Z19__fetch_global_Wirev>
   d514e:	462b      	mov	r3, r5
   d5150:	4601      	mov	r1, r0
   d5152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5156:	4620      	mov	r0, r4
   d5158:	f000 f97e 	bl	d5458 <_ZN6MB85RCC1ER7TwoWireji>
   d515c:	4b31      	ldr	r3, [pc, #196]	; (d5224 <_GLOBAL__sub_I___appProductID+0x140>)
   d515e:	6023      	str	r3, [r4, #0]
   d5160:	4632      	mov	r2, r6
   d5162:	4931      	ldr	r1, [pc, #196]	; (d5228 <_GLOBAL__sub_I___appProductID+0x144>)
   d5164:	4620      	mov	r0, r4
   d5166:	f002 ffc1 	bl	d80ec <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d516a:	f002 ff97 	bl	d809c <_Z19__fetch_global_Wirev>
   d516e:	4c2f      	ldr	r4, [pc, #188]	; (d522c <_GLOBAL__sub_I___appProductID+0x148>)
   d5170:	4601      	mov	r1, r0
   d5172:	4620      	mov	r0, r4
   d5174:	f000 fed4 	bl	d5f20 <_ZN8MCP79410C1ER7TwoWire>
   d5178:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d517a:	4c2d      	ldr	r4, [pc, #180]	; (d5230 <_GLOBAL__sub_I___appProductID+0x14c>)
   d517c:	492d      	ldr	r1, [pc, #180]	; (d5234 <_GLOBAL__sub_I___appProductID+0x150>)
   d517e:	4632      	mov	r2, r6
   d5180:	f002 ffb4 	bl	d80ec <__aeabi_atexit>
   d5184:	492c      	ldr	r1, [pc, #176]	; (d5238 <_GLOBAL__sub_I___appProductID+0x154>)
   d5186:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d518a:	4620      	mov	r0, r4
   d518c:	f000 fc64 	bl	d5a58 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5190:	4b2a      	ldr	r3, [pc, #168]	; (d523c <_GLOBAL__sub_I___appProductID+0x158>)
   d5192:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5194:	4632      	mov	r2, r6
   d5196:	492a      	ldr	r1, [pc, #168]	; (d5240 <_GLOBAL__sub_I___appProductID+0x15c>)
   d5198:	4620      	mov	r0, r4
   d519a:	f002 ffa7 	bl	d80ec <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d519e:	4b29      	ldr	r3, [pc, #164]	; (d5244 <_GLOBAL__sub_I___appProductID+0x160>)
   d51a0:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51a2:	af04      	add	r7, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d51a4:	4c28      	ldr	r4, [pc, #160]	; (d5248 <_GLOBAL__sub_I___appProductID+0x164>)
   d51a6:	4b29      	ldr	r3, [pc, #164]	; (d524c <_GLOBAL__sub_I___appProductID+0x168>)
   d51a8:	6023      	str	r3, [r4, #0]
   d51aa:	e897 0003 	ldmia.w	r7, {r0, r1}
   d51ae:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d51b0:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51b4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51b8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d51bc:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51c0:	e892 0003 	ldmia.w	r2, {r0, r1}
   d51c4:	e883 0003 	stmia.w	r3, {r0, r1}
   d51c8:	4b21      	ldr	r3, [pc, #132]	; (d5250 <_GLOBAL__sub_I___appProductID+0x16c>)
   d51ca:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d51cc:	69a3      	ldr	r3, [r4, #24]
   d51ce:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d51d0:	4b20      	ldr	r3, [pc, #128]	; (d5254 <_GLOBAL__sub_I___appProductID+0x170>)
   d51d2:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51d4:	4a20      	ldr	r2, [pc, #128]	; (d5258 <_GLOBAL__sub_I___appProductID+0x174>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d51d6:	7125      	strb	r5, [r4, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51d8:	4623      	mov	r3, r4
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d51da:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d51dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d51e0:	e9cd 5500 	strd	r5, r5, [sp]
   d51e4:	f104 0008 	add.w	r0, r4, #8
      __a = _GLIBCXX_MOVE(__b);
   d51e8:	9506      	str	r5, [sp, #24]
   d51ea:	f001 f957 	bl	d649c <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d51ee:	4638      	mov	r0, r7
   d51f0:	f7ff f80c 	bl	d420c <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d51f4:	4919      	ldr	r1, [pc, #100]	; (d525c <_GLOBAL__sub_I___appProductID+0x178>)
   d51f6:	4632      	mov	r2, r6
   d51f8:	4620      	mov	r0, r4
   d51fa:	f002 ff77 	bl	d80ec <__aeabi_atexit>
}
   d51fe:	b009      	add	sp, #36	; 0x24
   d5200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5202:	bf00      	nop
   d5204:	2003e429 	.word	0x2003e429
   d5208:	2003e41c 	.word	0x2003e41c
   d520c:	2003e418 	.word	0x2003e418
   d5210:	2003e428 	.word	0x2003e428
   d5214:	ffff0000 	.word	0xffff0000
   d5218:	000d41a3 	.word	0x000d41a3
   d521c:	2003e55c 	.word	0x2003e55c
   d5220:	2003e46c 	.word	0x2003e46c
   d5224:	000dadb0 	.word	0x000dadb0
   d5228:	000d4141 	.word	0x000d4141
   d522c:	2003e518 	.word	0x2003e518
   d5230:	2003e4dc 	.word	0x2003e4dc
   d5234:	000d5cab 	.word	0x000d5cab
   d5238:	2003f400 	.word	0x2003f400
   d523c:	000dad88 	.word	0x000dad88
   d5240:	000d4119 	.word	0x000d4119
   d5244:	000d41bd 	.word	0x000d41bd
   d5248:	2003e48c 	.word	0x2003e48c
   d524c:	000dad74 	.word	0x000dad74
   d5250:	000d40d9 	.word	0x000d40d9
   d5254:	000d40d5 	.word	0x000d40d5
   d5258:	000d4169 	.word	0x000d4169
   d525c:	000d4221 	.word	0x000d4221

000d5260 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5260:	6803      	ldr	r3, [r0, #0]
   d5262:	b2c9      	uxtb	r1, r1
   d5264:	689b      	ldr	r3, [r3, #8]
   d5266:	4718      	bx	r3

000d5268 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5268:	4770      	bx	lr

000d526a <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d526a:	b538      	push	{r3, r4, r5, lr}
   d526c:	4605      	mov	r5, r0
   d526e:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5270:	f002 ff14 	bl	d809c <_Z19__fetch_global_Wirev>
   d5274:	7829      	ldrb	r1, [r5, #0]
   d5276:	f002 f887 	bl	d7388 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d527a:	f002 ff0f 	bl	d809c <_Z19__fetch_global_Wirev>
   d527e:	0a21      	lsrs	r1, r4, #8
   d5280:	f7ff ffee 	bl	d5260 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5284:	f002 ff0a 	bl	d809c <_Z19__fetch_global_Wirev>
   d5288:	b2e1      	uxtb	r1, r4
   d528a:	f7ff ffe9 	bl	d5260 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d528e:	f002 ff05 	bl	d809c <_Z19__fetch_global_Wirev>
}
   d5292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d5296:	f002 b882 	b.w	d739e <_ZN7TwoWire15endTransmissionEv>

000d529a <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d529a:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d529c:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d52a0:	f7ff ffe3 	bl	d526a <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d52a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d52a8:	200a      	movs	r0, #10
   d52aa:	f001 bc47 	b.w	d6b3c <delay>

000d52ae <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d52ae:	b538      	push	{r3, r4, r5, lr}
   d52b0:	4604      	mov	r4, r0
   d52b2:	460d      	mov	r5, r1
  Wire.begin();
   d52b4:	f002 fef2 	bl	d809c <_Z19__fetch_global_Wirev>
   d52b8:	f002 f834 	bl	d7324 <_ZN7TwoWire5beginEv>
  reset();
   d52bc:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d52be:	7025      	strb	r5, [r4, #0]
  reset();
   d52c0:	f7ff ffeb 	bl	d529a <_ZN14Adafruit_SHT315resetEv>
}
   d52c4:	2001      	movs	r0, #1
   d52c6:	bd38      	pop	{r3, r4, r5, pc}

000d52c8 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d52c8:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d52ca:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d52cc:	4291      	cmp	r1, r2
   d52ce:	d00e      	beq.n	d52ee <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d52d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d52d4:	4058      	eors	r0, r3
   d52d6:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d52d8:	f010 0f80 	tst.w	r0, #128	; 0x80
   d52dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d52e0:	bf18      	it	ne
   d52e2:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d52e6:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d52e8:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d52ea:	d1f5      	bne.n	d52d8 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d52ec:	e7ee      	b.n	d52cc <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d52ee:	4770      	bx	lr

000d52f0 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d52f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d52f2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d52f6:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d52f8:	f7ff ffb7 	bl	d526a <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d52fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5300:	f001 fc1c 	bl	d6b3c <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d5304:	f002 feca 	bl	d809c <_Z19__fetch_global_Wirev>
   d5308:	7829      	ldrb	r1, [r5, #0]
   d530a:	2206      	movs	r2, #6
   d530c:	f002 f839 	bl	d7382 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5310:	f002 fec4 	bl	d809c <_Z19__fetch_global_Wirev>
   d5314:	6803      	ldr	r3, [r0, #0]
   d5316:	691b      	ldr	r3, [r3, #16]
   d5318:	4798      	blx	r3
   d531a:	2806      	cmp	r0, #6
   d531c:	d14b      	bne.n	d53b6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d531e:	466e      	mov	r6, sp
   d5320:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d5322:	f002 febb 	bl	d809c <_Z19__fetch_global_Wirev>
   d5326:	6803      	ldr	r3, [r0, #0]
   d5328:	695b      	ldr	r3, [r3, #20]
   d532a:	4798      	blx	r3
   d532c:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d532e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d5332:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d5336:	4669      	mov	r1, sp
   d5338:	d1f3      	bne.n	d5322 <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d533a:	2202      	movs	r2, #2
   d533c:	4628      	mov	r0, r5
   d533e:	f7ff ffc3 	bl	d52c8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5342:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d5346:	4286      	cmp	r6, r0
   d5348:	d135      	bne.n	d53b6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d534a:	2202      	movs	r2, #2
   d534c:	f10d 0103 	add.w	r1, sp, #3
   d5350:	4628      	mov	r0, r5
   d5352:	f7ff ffb9 	bl	d52c8 <_ZN14Adafruit_SHT314crc8EPKhi>
   d5356:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d535a:	4286      	cmp	r6, r0
   d535c:	d12b      	bne.n	d53b6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d535e:	f8bd 0000 	ldrh.w	r0, [sp]
   d5362:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d5366:	ba40      	rev16	r0, r0
   d5368:	b280      	uxth	r0, r0
   d536a:	f003 f80f 	bl	d838c <__aeabi_ui2d>
  stemp *= 175;
   d536e:	a318      	add	r3, pc, #96	; (adr r3, d53d0 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5370:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5374:	f003 f884 	bl	d8480 <__aeabi_dmul>
  stemp /= 0xffff;
   d5378:	a311      	add	r3, pc, #68	; (adr r3, d53c0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d537a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d537e:	f003 f9a9 	bl	d86d4 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d5382:	4b11      	ldr	r3, [pc, #68]	; (d53c8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d5384:	2200      	movs	r2, #0
   d5386:	f002 fec3 	bl	d8110 <__aeabi_dsub>
  temp = stemp;
   d538a:	f003 fb33 	bl	d89f4 <__aeabi_d2f>
   d538e:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d5390:	ba60      	rev16	r0, r4
   d5392:	b280      	uxth	r0, r0
   d5394:	f002 fffa 	bl	d838c <__aeabi_ui2d>
  shum *= 100;
   d5398:	4b0c      	ldr	r3, [pc, #48]	; (d53cc <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d539a:	2200      	movs	r2, #0
   d539c:	f003 f870 	bl	d8480 <__aeabi_dmul>
  shum /= 0xFFFF;
   d53a0:	a307      	add	r3, pc, #28	; (adr r3, d53c0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d53a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53a6:	f003 f995 	bl	d86d4 <__aeabi_ddiv>
  humidity = shum;
   d53aa:	f003 fb23 	bl	d89f4 <__aeabi_d2f>
   d53ae:	6068      	str	r0, [r5, #4]
  return true;
   d53b0:	2001      	movs	r0, #1
}
   d53b2:	b002      	add	sp, #8
   d53b4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d53b6:	2000      	movs	r0, #0
   d53b8:	e7fb      	b.n	d53b2 <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d53ba:	bf00      	nop
   d53bc:	f3af 8000 	nop.w
   d53c0:	00000000 	.word	0x00000000
   d53c4:	40efffe0 	.word	0x40efffe0
   d53c8:	40468000 	.word	0x40468000
   d53cc:	40590000 	.word	0x40590000
   d53d0:	00000000 	.word	0x00000000
   d53d4:	4065e000 	.word	0x4065e000

000d53d8 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d53d8:	b510      	push	{r4, lr}
   d53da:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d53dc:	f7ff ff88 	bl	d52f0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d53e0:	b110      	cbz	r0, d53e8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d53e2:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d53e6:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d53e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d53f0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d53ec:	e7fb      	b.n	d53e6 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d53ee:	bf00      	nop
   d53f0:	7fc00000 	.word	0x7fc00000

000d53f4 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d53f4:	b510      	push	{r4, lr}
   d53f6:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d53f8:	f7ff ff7a 	bl	d52f0 <_ZN14Adafruit_SHT3111readTempHumEv>
   d53fc:	b110      	cbz	r0, d5404 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d53fe:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d5402:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d5404:	ed9f 0a01 	vldr	s0, [pc, #4]	; d540c <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d5408:	e7fb      	b.n	d5402 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d540a:	bf00      	nop
   d540c:	7fc00000 	.word	0x7fc00000

000d5410 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5410:	4770      	bx	lr

000d5412 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5412:	b510      	push	{r4, lr}
}
   d5414:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5416:	4604      	mov	r4, r0
}
   d5418:	f002 fe6d 	bl	d80f6 <_ZdlPvj>
   d541c:	4620      	mov	r0, r4
   d541e:	bd10      	pop	{r4, pc}

000d5420 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5420:	6803      	ldr	r3, [r0, #0]
   d5422:	b2c9      	uxtb	r1, r1
   d5424:	689b      	ldr	r3, [r3, #8]
   d5426:	4718      	bx	r3

000d5428 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5428:	b40e      	push	{r1, r2, r3}
   d542a:	b510      	push	{r4, lr}
   d542c:	b08d      	sub	sp, #52	; 0x34
   d542e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5430:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5432:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5436:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5438:	2300      	movs	r3, #0
   d543a:	2020      	movs	r0, #32
   d543c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5440:	e9cd 4200 	strd	r4, r2, [sp]
   d5444:	201e      	movs	r0, #30
   d5446:	aa04      	add	r2, sp, #16
   d5448:	f001 f9f8 	bl	d683c <log_message_v>
}
   d544c:	b00d      	add	sp, #52	; 0x34
   d544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5452:	b003      	add	sp, #12
   d5454:	4770      	bx	lr
	...

000d5458 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5458:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d545a:	4d03      	ldr	r5, [pc, #12]	; (d5468 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d545c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5460:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5464:	bd30      	pop	{r4, r5, pc}
   d5466:	bf00      	nop
   d5468:	000dae60 	.word	0x000dae60

000d546c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d546c:	6840      	ldr	r0, [r0, #4]
   d546e:	f001 bf59 	b.w	d7324 <_ZN7TwoWire5beginEv>

000d5472 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5472:	b510      	push	{r4, lr}
   d5474:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5476:	6800      	ldr	r0, [r0, #0]
   d5478:	f001 ff9d 	bl	d73b6 <_ZN7TwoWire6unlockEv>
   d547c:	4620      	mov	r0, r4
   d547e:	bd10      	pop	{r4, pc}

000d5480 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5484:	b08a      	sub	sp, #40	; 0x28
   d5486:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5488:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d548a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d548c:	f001 ff8a 	bl	d73a4 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5490:	221e      	movs	r2, #30
   d5492:	2100      	movs	r1, #0
   d5494:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5496:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5498:	f003 fb90 	bl	d8bbc <memset>
		size_t framAddr = 0;
   d549c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d549e:	b1ef      	cbz	r7, d54dc <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d54a0:	6823      	ldr	r3, [r4, #0]
   d54a2:	2f1e      	cmp	r7, #30
   d54a4:	46b8      	mov	r8, r7
   d54a6:	bf28      	it	cs
   d54a8:	f04f 081e 	movcs.w	r8, #30
   d54ac:	68dd      	ldr	r5, [r3, #12]
   d54ae:	aa02      	add	r2, sp, #8
   d54b0:	4643      	mov	r3, r8
   d54b2:	4631      	mov	r1, r6
   d54b4:	4620      	mov	r0, r4
   d54b6:	47a8      	blx	r5
			if (!result) {
   d54b8:	4605      	mov	r5, r0
   d54ba:	b958      	cbnz	r0, d54d4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d54bc:	480a      	ldr	r0, [pc, #40]	; (d54e8 <_ZN6MB85RC5eraseEv+0x68>)
   d54be:	490b      	ldr	r1, [pc, #44]	; (d54ec <_ZN6MB85RC5eraseEv+0x6c>)
   d54c0:	4632      	mov	r2, r6
   d54c2:	f7ff ffb1 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d54c6:	a801      	add	r0, sp, #4
   d54c8:	f7ff ffd3 	bl	d5472 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d54cc:	4628      	mov	r0, r5
   d54ce:	b00a      	add	sp, #40	; 0x28
   d54d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d54d4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d54d8:	4446      	add	r6, r8
		while(totalLen > 0) {
   d54da:	e7e0      	b.n	d549e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d54dc:	a801      	add	r0, sp, #4
   d54de:	f7ff ffc8 	bl	d5472 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d54e2:	2501      	movs	r5, #1
   d54e4:	e7f2      	b.n	d54cc <_ZN6MB85RC5eraseEv+0x4c>
   d54e6:	bf00      	nop
   d54e8:	2003e614 	.word	0x2003e614
   d54ec:	000dae2c 	.word	0x000dae2c

000d54f0 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d54f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d54f4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d54f6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d54f8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d54fa:	460d      	mov	r5, r1
   d54fc:	4616      	mov	r6, r2
   d54fe:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5500:	f001 ff50 	bl	d73a4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5504:	b1a7      	cbz	r7, d5530 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5506:	68e1      	ldr	r1, [r4, #12]
   d5508:	6860      	ldr	r0, [r4, #4]
   d550a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d550e:	f001 ff3f 	bl	d7390 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5512:	0a29      	lsrs	r1, r5, #8
   d5514:	6860      	ldr	r0, [r4, #4]
   d5516:	f7ff ff83 	bl	d5420 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d551a:	4629      	mov	r1, r5
   d551c:	6860      	ldr	r0, [r4, #4]
   d551e:	f7ff ff7f 	bl	d5420 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5522:	6860      	ldr	r0, [r4, #4]
   d5524:	2100      	movs	r1, #0
   d5526:	f001 ff36 	bl	d7396 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d552a:	b148      	cbz	r0, d5540 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d552c:	2400      	movs	r4, #0
   d552e:	e000      	b.n	d5532 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5530:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5532:	a801      	add	r0, sp, #4
   d5534:	f7ff ff9d 	bl	d5472 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5538:	4620      	mov	r0, r4
   d553a:	b003      	add	sp, #12
   d553c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5540:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5542:	7b21      	ldrb	r1, [r4, #12]
   d5544:	6860      	ldr	r0, [r4, #4]
   d5546:	46b8      	mov	r8, r7
   d5548:	bf28      	it	cs
   d554a:	f04f 0820 	movcs.w	r8, #32
   d554e:	2301      	movs	r3, #1
   d5550:	4642      	mov	r2, r8
   d5552:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5556:	f001 ff02 	bl	d735e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d555a:	f002 fd9f 	bl	d809c <_Z19__fetch_global_Wirev>
   d555e:	6803      	ldr	r3, [r0, #0]
   d5560:	691b      	ldr	r3, [r3, #16]
   d5562:	4798      	blx	r3
   d5564:	4540      	cmp	r0, r8
   d5566:	dbe1      	blt.n	d552c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5568:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d556c:	f002 fd96 	bl	d809c <_Z19__fetch_global_Wirev>
   d5570:	6803      	ldr	r3, [r0, #0]
   d5572:	695b      	ldr	r3, [r3, #20]
   d5574:	4798      	blx	r3
   d5576:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d557a:	454e      	cmp	r6, r9
   d557c:	d1f6      	bne.n	d556c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d557e:	4445      	add	r5, r8
   d5580:	eba7 0708 	sub.w	r7, r7, r8
   d5584:	e7be      	b.n	d5504 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5586 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d558a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d558c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d558e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5590:	460e      	mov	r6, r1
   d5592:	4690      	mov	r8, r2
   d5594:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5596:	f001 ff05 	bl	d73a4 <_ZN7TwoWire4lockEv>
   d559a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d559e:	f1b9 0f00 	cmp.w	r9, #0
   d55a2:	d02a      	beq.n	d55fa <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d55a4:	b34d      	cbz	r5, d55fa <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d55a6:	68e1      	ldr	r1, [r4, #12]
   d55a8:	6860      	ldr	r0, [r4, #4]
   d55aa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d55ae:	f001 feef 	bl	d7390 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d55b2:	0a31      	lsrs	r1, r6, #8
   d55b4:	6860      	ldr	r0, [r4, #4]
   d55b6:	f7ff ff33 	bl	d5420 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d55ba:	6860      	ldr	r0, [r4, #4]
   d55bc:	4631      	mov	r1, r6
   d55be:	f7ff ff2f 	bl	d5420 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55c2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d55c6:	4647      	mov	r7, r8
   d55c8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d55cc:	6860      	ldr	r0, [r4, #4]
   d55ce:	f817 1b01 	ldrb.w	r1, [r7], #1
   d55d2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d55d4:	3d01      	subs	r5, #1
				wire.write(*data);
   d55d6:	689b      	ldr	r3, [r3, #8]
   d55d8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55da:	4555      	cmp	r5, sl
   d55dc:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d55e0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55e2:	d001      	beq.n	d55e8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d55e4:	2d00      	cmp	r5, #0
   d55e6:	d1f1      	bne.n	d55cc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d55e8:	6860      	ldr	r0, [r4, #4]
   d55ea:	2101      	movs	r1, #1
   d55ec:	f001 fed3 	bl	d7396 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d55f0:	2800      	cmp	r0, #0
   d55f2:	d0d7      	beq.n	d55a4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d55f4:	f04f 0900 	mov.w	r9, #0
   d55f8:	e7d1      	b.n	d559e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d55fa:	a801      	add	r0, sp, #4
   d55fc:	f7ff ff39 	bl	d5472 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5600:	4648      	mov	r0, r9
   d5602:	b003      	add	sp, #12
   d5604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5608 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d560c:	b08b      	sub	sp, #44	; 0x2c
   d560e:	460e      	mov	r6, r1
   d5610:	4615      	mov	r5, r2
   d5612:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5614:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5616:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5618:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d561a:	f001 fec3 	bl	d73a4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d561e:	42ae      	cmp	r6, r5
   d5620:	d229      	bcs.n	d5676 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5622:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5624:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5626:	b18c      	cbz	r4, d564c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5628:	2c1e      	cmp	r4, #30
   d562a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d562c:	f8d8 3000 	ldr.w	r3, [r8]
   d5630:	bf28      	it	cs
   d5632:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5634:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5636:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d563a:	aa02      	add	r2, sp, #8
   d563c:	463b      	mov	r3, r7
   d563e:	4631      	mov	r1, r6
   d5640:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5642:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5644:	47c8      	blx	r9
				if (!result) {
   d5646:	b948      	cbnz	r0, d565c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5648:	2400      	movs	r4, #0
   d564a:	e000      	b.n	d564e <_ZN6MB85RC8moveDataEjjj+0x46>
   d564c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d564e:	a801      	add	r0, sp, #4
   d5650:	f7ff ff0f 	bl	d5472 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5654:	4620      	mov	r0, r4
   d5656:	b00b      	add	sp, #44	; 0x2c
   d5658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d565c:	f8d8 3000 	ldr.w	r3, [r8]
   d5660:	aa02      	add	r2, sp, #8
   d5662:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5666:	4629      	mov	r1, r5
   d5668:	463b      	mov	r3, r7
   d566a:	4640      	mov	r0, r8
   d566c:	47c8      	blx	r9
				if (!result) {
   d566e:	2800      	cmp	r0, #0
   d5670:	d0ea      	beq.n	d5648 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5672:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5674:	e7d7      	b.n	d5626 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5676:	d9e9      	bls.n	d564c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5678:	2c00      	cmp	r4, #0
   d567a:	d0e7      	beq.n	d564c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d567c:	f8d8 3000 	ldr.w	r3, [r8]
   d5680:	2c1e      	cmp	r4, #30
   d5682:	4627      	mov	r7, r4
   d5684:	bf28      	it	cs
   d5686:	271e      	movcs	r7, #30
   d5688:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d568c:	aa02      	add	r2, sp, #8
   d568e:	463b      	mov	r3, r7
   d5690:	4631      	mov	r1, r6
   d5692:	4640      	mov	r0, r8
   d5694:	47c8      	blx	r9
				if (!result) {
   d5696:	2800      	cmp	r0, #0
   d5698:	d0d6      	beq.n	d5648 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d569a:	f8d8 3000 	ldr.w	r3, [r8]
   d569e:	aa02      	add	r2, sp, #8
   d56a0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d56a4:	4629      	mov	r1, r5
   d56a6:	463b      	mov	r3, r7
   d56a8:	4640      	mov	r0, r8
   d56aa:	47c8      	blx	r9
				if (!result) {
   d56ac:	2800      	cmp	r0, #0
   d56ae:	d0cb      	beq.n	d5648 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d56b0:	443e      	add	r6, r7
				framAddrTo += count;
   d56b2:	443d      	add	r5, r7
				numBytes -= count;
   d56b4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d56b6:	e7df      	b.n	d5678 <_ZN6MB85RC8moveDataEjjj+0x70>

000d56b8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d56b8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d56ba:	4603      	mov	r3, r0
	switch (__op)
   d56bc:	d102      	bne.n	d56c4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d56be:	6001      	str	r1, [r0, #0]
      }
   d56c0:	2000      	movs	r0, #0
   d56c2:	4770      	bx	lr
	  switch (__op)
   d56c4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d56c6:	bf04      	itt	eq
   d56c8:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d56cc:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d56d0:	e7f6      	b.n	d56c0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d56d2 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d56d2:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d56d4:	2301      	movs	r3, #1
   d56d6:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d56d8:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d56da:	4604      	mov	r4, r0
        if (th->func) {
   d56dc:	b143      	cbz	r3, d56f0 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d56de:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56e0:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d56e2:	2301      	movs	r3, #1
   d56e4:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d56e6:	2000      	movs	r0, #0
    }
   d56e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d56ec:	f000 bf1e 	b.w	d652c <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d56f0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d56f2:	2800      	cmp	r0, #0
   d56f4:	d0f5      	beq.n	d56e2 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d56f6:	6883      	ldr	r3, [r0, #8]
   d56f8:	b90b      	cbnz	r3, d56fe <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d56fa:	f002 fd02 	bl	d8102 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56fe:	68c3      	ldr	r3, [r0, #12]
   d5700:	e7ee      	b.n	d56e0 <_ZN6Thread3runEPv+0xe>

000d5702 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5702:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d5704:	6842      	ldr	r2, [r0, #4]
   d5706:	4603      	mov	r3, r0
   d5708:	1054      	asrs	r4, r2, #1
   d570a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d570e:	07d2      	lsls	r2, r2, #31
   d5710:	bf48      	it	mi
   d5712:	590a      	ldrmi	r2, [r1, r4]
   d5714:	681b      	ldr	r3, [r3, #0]
      }
   d5716:	f85d 4b04 	ldr.w	r4, [sp], #4
   d571a:	bf48      	it	mi
   d571c:	58d3      	ldrmi	r3, [r2, r3]
   d571e:	4718      	bx	r3

000d5720 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5720:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d5722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d5724:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d5728:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d572a:	3008      	adds	r0, #8
   d572c:	f000 fed6 	bl	d64dc <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5730:	2004      	movs	r0, #4
   d5732:	f7fe fcb0 	bl	d4096 <_Znwj>
   d5736:	4605      	mov	r5, r0
   d5738:	b398      	cbz	r0, d57a2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d573a:	491b      	ldr	r1, [pc, #108]	; (d57a8 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d573c:	2014      	movs	r0, #20
   d573e:	f002 fcdc 	bl	d80fa <_ZnwjRKSt9nothrow_t>
   d5742:	b130      	cbz	r0, d5752 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5744:	2300      	movs	r3, #0
            exited(false) {
   d5746:	e9c0 3300 	strd	r3, r3, [r0]
   d574a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d574e:	7403      	strb	r3, [r0, #16]
   d5750:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5752:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5754:	b1a0      	cbz	r0, d5780 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d5756:	4b15      	ldr	r3, [pc, #84]	; (d57ac <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5758:	4915      	ldr	r1, [pc, #84]	; (d57b0 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d575a:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d575e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5762:	e9cd 0300 	strd	r0, r3, [sp]
   d5766:	2202      	movs	r2, #2
   d5768:	4b12      	ldr	r3, [pc, #72]	; (d57b4 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d576a:	3004      	adds	r0, #4
   d576c:	f000 fe7e 	bl	d646c <os_thread_create>
   d5770:	b930      	cbnz	r0, d5780 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5772:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5774:	7c1b      	ldrb	r3, [r3, #16]
   d5776:	b9a3      	cbnz	r3, d57a2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d5778:	2001      	movs	r0, #1
   d577a:	f000 fef7 	bl	d656c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d577e:	e7f8      	b.n	d5772 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5780:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5782:	2300      	movs	r3, #0
   d5784:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5786:	b164      	cbz	r4, d57a2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d5788:	6827      	ldr	r7, [r4, #0]
   d578a:	b137      	cbz	r7, d579a <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d578c:	4638      	mov	r0, r7
   d578e:	f7fe fd3d 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5792:	2110      	movs	r1, #16
   d5794:	4638      	mov	r0, r7
   d5796:	f002 fcae 	bl	d80f6 <_ZdlPvj>
   d579a:	2114      	movs	r1, #20
   d579c:	4620      	mov	r0, r4
   d579e:	f002 fcaa 	bl	d80f6 <_ZdlPvj>
   d57a2:	6075      	str	r5, [r6, #4]
}
   d57a4:	b003      	add	sp, #12
   d57a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57a8:	000db20c 	.word	0x000db20c
   d57ac:	000d59bf 	.word	0x000d59bf
   d57b0:	000dae74 	.word	0x000dae74
   d57b4:	000d56d3 	.word	0x000d56d3

000d57b8 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d57b8:	f247 5130 	movw	r1, #30000	; 0x7530
   d57bc:	4a08      	ldr	r2, [pc, #32]	; (d57e0 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d57be:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d57c0:	4908      	ldr	r1, [pc, #32]	; (d57e4 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d57c2:	6002      	str	r2, [r0, #0]
   d57c4:	2200      	movs	r2, #0
   d57c6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d57ca:	4907      	ldr	r1, [pc, #28]	; (d57e8 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d57cc:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d57ce:	4907      	ldr	r1, [pc, #28]	; (d57ec <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d57d0:	6042      	str	r2, [r0, #4]
   d57d2:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d57d6:	6181      	str	r1, [r0, #24]
   d57d8:	8502      	strh	r2, [r0, #40]	; 0x28
   d57da:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d57de:	4770      	bx	lr
   d57e0:	000daf38 	.word	0x000daf38
   d57e4:	000d5b29 	.word	0x000d5b29
   d57e8:	000d5703 	.word	0x000d5703
   d57ec:	000d56b9 	.word	0x000d56b9

000d57f0 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d57f0:	b510      	push	{r4, lr}
   d57f2:	4b04      	ldr	r3, [pc, #16]	; (d5804 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d57f4:	4604      	mov	r4, r0
   d57f6:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d57fa:	f7fe fd07 	bl	d420c <_ZNSt14_Function_baseD1Ev>
}
   d57fe:	4620      	mov	r0, r4
   d5800:	bd10      	pop	{r4, pc}
   d5802:	bf00      	nop
   d5804:	000daf38 	.word	0x000daf38

000d5808 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5808:	b510      	push	{r4, lr}
   d580a:	4b03      	ldr	r3, [pc, #12]	; (d5818 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d580c:	6003      	str	r3, [r0, #0]
   d580e:	4604      	mov	r4, r0
   d5810:	f7ff ffee 	bl	d57f0 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d5814:	4620      	mov	r0, r4
   d5816:	bd10      	pop	{r4, pc}
   d5818:	000daf60 	.word	0x000daf60

000d581c <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d581c:	b510      	push	{r4, lr}
   d581e:	4604      	mov	r4, r0
}
   d5820:	f7ff fff2 	bl	d5808 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d5824:	4620      	mov	r0, r4
   d5826:	2138      	movs	r1, #56	; 0x38
   d5828:	f002 fc65 	bl	d80f6 <_ZdlPvj>
   d582c:	4620      	mov	r0, r4
   d582e:	bd10      	pop	{r4, pc}

000d5830 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5830:	6880      	ldr	r0, [r0, #8]
   d5832:	f000 be5b 	b.w	d64ec <os_mutex_lock>

000d5836 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d5836:	6880      	ldr	r0, [r0, #8]
   d5838:	f000 be60 	b.w	d64fc <os_mutex_unlock>

000d583c <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d583c:	b510      	push	{r4, lr}
   d583e:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d5840:	6800      	ldr	r0, [r0, #0]
   d5842:	f7ff fff8 	bl	d5836 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d5846:	4620      	mov	r0, r4
   d5848:	bd10      	pop	{r4, pc}

000d584a <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d584a:	b513      	push	{r0, r1, r4, lr}
   d584c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d584e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5850:	f7ff ffee 	bl	d5830 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d5856:	88dc      	ldrh	r4, [r3, #6]
   d5858:	b2a4      	uxth	r4, r4
   d585a:	b10c      	cbz	r4, d5860 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d585c:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d5860:	a801      	add	r0, sp, #4
   d5862:	f7ff ffeb 	bl	d583c <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d5866:	4620      	mov	r0, r4
   d5868:	b002      	add	sp, #8
   d586a:	bd10      	pop	{r4, pc}

000d586c <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d586c:	b513      	push	{r0, r1, r4, lr}
   d586e:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5870:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5872:	f7ff ffdd 	bl	d5830 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d5876:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d587a:	b943      	cbnz	r3, d588e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d587c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d587e:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d5880:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d5882:	a801      	add	r0, sp, #4
   d5884:	f7ff ffda 	bl	d583c <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d5888:	4620      	mov	r0, r4
   d588a:	b002      	add	sp, #8
   d588c:	bd10      	pop	{r4, pc}
	bool result = false;
   d588e:	2400      	movs	r4, #0
   d5890:	e7f7      	b.n	d5882 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d5892 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d5892:	b513      	push	{r0, r1, r4, lr}
   d5894:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5896:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5898:	f7ff ffca 	bl	d5830 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d589c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d589e:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d58a0:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d58a2:	f7ff ffcb 	bl	d583c <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d58a6:	4620      	mov	r0, r4
   d58a8:	b002      	add	sp, #8
   d58aa:	bd10      	pop	{r4, pc}

000d58ac <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d58ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58b0:	4699      	mov	r9, r3
   d58b2:	b086      	sub	sp, #24
	if (!haveSetup) {
   d58b4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d58b8:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d58bc:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d58c0:	4604      	mov	r4, r0
   d58c2:	460f      	mov	r7, r1
   d58c4:	4616      	mov	r6, r2
	if (!haveSetup) {
   d58c6:	b913      	cbnz	r3, d58ce <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d58c8:	6803      	ldr	r3, [r0, #0]
   d58ca:	689b      	ldr	r3, [r3, #8]
   d58cc:	4798      	blx	r3
		data = "";
   d58ce:	4b31      	ldr	r3, [pc, #196]	; (d5994 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d58d0:	4638      	mov	r0, r7
		data = "";
   d58d2:	2e00      	cmp	r6, #0
   d58d4:	bf08      	it	eq
   d58d6:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d58d8:	f003 f9cb 	bl	d8c72 <strlen>
   d58dc:	4605      	mov	r5, r0
   d58de:	4630      	mov	r0, r6
   d58e0:	f003 f9c7 	bl	d8c72 <strlen>
   d58e4:	4428      	add	r0, r5
   d58e6:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d58ea:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d58ec:	bf1c      	itt	ne
   d58ee:	f025 0503 	bicne.w	r5, r5, #3
   d58f2:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d58f4:	4633      	mov	r3, r6
   d58f6:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d58fa:	e9cd 9a00 	strd	r9, sl, [sp]
   d58fe:	4926      	ldr	r1, [pc, #152]	; (d5998 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d5900:	4826      	ldr	r0, [pc, #152]	; (d599c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d5902:	463a      	mov	r2, r7
   d5904:	f7ff fd90 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d5908:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d590a:	3b08      	subs	r3, #8
   d590c:	42ab      	cmp	r3, r5
   d590e:	d212      	bcs.n	d5936 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d5910:	2400      	movs	r4, #0
}
   d5912:	4620      	mov	r0, r4
   d5914:	b006      	add	sp, #24
   d5916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d591a:	88cb      	ldrh	r3, [r1, #6]
   d591c:	2b01      	cmp	r3, #1
   d591e:	d036      	beq.n	d598e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d5920:	a805      	add	r0, sp, #20
   d5922:	f7ff ff8b 	bl	d583c <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d5926:	6823      	ldr	r3, [r4, #0]
   d5928:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d592c:	699b      	ldr	r3, [r3, #24]
   d592e:	4620      	mov	r0, r4
   d5930:	4798      	blx	r3
   d5932:	2800      	cmp	r0, #0
   d5934:	d0ec      	beq.n	d5910 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d5936:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5938:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d593a:	f7ff ff79 	bl	d5830 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d593e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5940:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d5942:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5944:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d5946:	1ad2      	subs	r2, r2, r3
   d5948:	42aa      	cmp	r2, r5
   d594a:	d3e6      	bcc.n	d591a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d594c:	ea48 080a 	orr.w	r8, r8, sl
   d5950:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d5954:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d5958:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d595a:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d595e:	4639      	mov	r1, r7
   d5960:	4640      	mov	r0, r8
   d5962:	f003 f961 	bl	d8c28 <strcpy>
				cp += strlen(cp) + 1;
   d5966:	4640      	mov	r0, r8
   d5968:	f003 f983 	bl	d8c72 <strlen>
   d596c:	3001      	adds	r0, #1
				strcpy(cp, data);
   d596e:	4631      	mov	r1, r6
   d5970:	4440      	add	r0, r8
   d5972:	f003 f959 	bl	d8c28 <strcpy>
				nextFree += size;
   d5976:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d597a:	441d      	add	r5, r3
   d597c:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d597e:	88d3      	ldrh	r3, [r2, #6]
   d5980:	3301      	adds	r3, #1
   d5982:	80d3      	strh	r3, [r2, #6]
				return true;
   d5984:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d5986:	a805      	add	r0, sp, #20
   d5988:	f7ff ff58 	bl	d583c <_ZN11StMutexLockD1Ev>
   d598c:	e7c1      	b.n	d5912 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d598e:	2400      	movs	r4, #0
   d5990:	e7f9      	b.n	d5986 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d5992:	bf00      	nop
   d5994:	000db22c 	.word	0x000db22c
   d5998:	000dae86 	.word	0x000dae86
   d599c:	2003e5d0 	.word	0x2003e5d0

000d59a0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59a4:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d59a8:	69a3      	ldr	r3, [r4, #24]
   d59aa:	b90b      	cbnz	r3, d59b0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d59ac:	f002 fba9 	bl	d8102 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59b0:	69e3      	ldr	r3, [r4, #28]
   d59b2:	4621      	mov	r1, r4
   d59b4:	4628      	mov	r0, r5
   d59b6:	4798      	blx	r3
		os_thread_yield();
   d59b8:	f000 fd60 	bl	d647c <os_thread_yield>
	while(true) {
   d59bc:	e7f4      	b.n	d59a8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d59be <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d59be:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d59c0:	f7ff ffee 	bl	d59a0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d59c4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d59c4:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d59c6:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d59ca:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d59cc:	4628      	mov	r0, r5
   d59ce:	f003 f950 	bl	d8c72 <strlen>
   d59d2:	3001      	adds	r0, #1
   d59d4:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d59d6:	4628      	mov	r0, r5
   d59d8:	f003 f94b 	bl	d8c72 <strlen>
	size_t offset = start - retainedBuffer;
   d59dc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d59de:	3001      	adds	r0, #1
   d59e0:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d59e2:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d59e4:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d59e8:	bf1c      	itt	ne
   d59ea:	f1c3 0304 	rsbne	r3, r3, #4
   d59ee:	18c0      	addne	r0, r0, r3
}
   d59f0:	bd68      	pop	{r3, r5, r6, pc}

000d59f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d59f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d59f4:	4604      	mov	r4, r0
   d59f6:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d59f8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d59fa:	f7ff ff19 	bl	d5830 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d59fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5a00:	88fb      	ldrh	r3, [r7, #6]
   d5a02:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d5a06:	b1e6      	cbz	r6, d5a42 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d5a08:	2b01      	cmp	r3, #1
   d5a0a:	d922      	bls.n	d5a52 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d5a0c:	4629      	mov	r1, r5
   d5a0e:	4620      	mov	r0, r4
   d5a10:	f7ff ffd8 	bl	d59c4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d5a14:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d5a16:	4629      	mov	r1, r5
   d5a18:	4620      	mov	r0, r4
   d5a1a:	f7ff ffd3 	bl	d59c4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5a1e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d5a20:	443a      	add	r2, r7
	if (after > 0) {
   d5a22:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d5a24:	4601      	mov	r1, r0
	size_t len = next - start;
   d5a26:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d5a2a:	d002      	beq.n	d5a32 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d5a2c:	4628      	mov	r0, r5
   d5a2e:	f003 f8ab 	bl	d8b88 <memmove>
	nextFree -= len;
   d5a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5a34:	1b9b      	subs	r3, r3, r6
   d5a36:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d5a38:	88fb      	ldrh	r3, [r7, #6]
   d5a3a:	3b01      	subs	r3, #1
   d5a3c:	80fb      	strh	r3, [r7, #6]
	return true;
   d5a3e:	2601      	movs	r6, #1
   d5a40:	e001      	b.n	d5a46 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d5a42:	2b00      	cmp	r3, #0
   d5a44:	d1e7      	bne.n	d5a16 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d5a46:	a801      	add	r0, sp, #4
   d5a48:	f7ff fef8 	bl	d583c <_ZN11StMutexLockD1Ev>
}
   d5a4c:	4630      	mov	r0, r6
   d5a4e:	b003      	add	sp, #12
   d5a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d5a52:	2600      	movs	r6, #0
   d5a54:	e7f7      	b.n	d5a46 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d5a58 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a5c:	460d      	mov	r5, r1
   d5a5e:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a60:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5a62:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a64:	f7ff fea8 	bl	d57b8 <_ZN21PublishQueueAsyncBaseC1Ev>
   d5a68:	4b15      	ldr	r3, [pc, #84]	; (d5ac0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a6a:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a6e:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a70:	4b14      	ldr	r3, [pc, #80]	; (d5ac4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a72:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a74:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5a76:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5a78:	4698      	mov	r8, r3
   d5a7a:	d117      	bne.n	d5aac <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d5a7c:	88ab      	ldrh	r3, [r5, #4]
   d5a7e:	b29b      	uxth	r3, r3
   d5a80:	42b3      	cmp	r3, r6
   d5a82:	d113      	bne.n	d5aac <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5a84:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5a88:	6367      	str	r7, [r4, #52]	; 0x34
   d5a8a:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d5a8e:	88eb      	ldrh	r3, [r5, #6]
   d5a90:	fa1f f289 	uxth.w	r2, r9
   d5a94:	b29b      	uxth	r3, r3
   d5a96:	429a      	cmp	r2, r3
   d5a98:	d20e      	bcs.n	d5ab8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d5a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	f7ff ff91 	bl	d59c4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d5aa2:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d5aa4:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d5aa6:	f109 0901 	add.w	r9, r9, #1
   d5aaa:	d9f0      	bls.n	d5a8e <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d5aac:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d5aae:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5ab2:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d5ab4:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d5ab6:	80eb      	strh	r3, [r5, #6]
}
   d5ab8:	4620      	mov	r0, r4
   d5aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5abe:	bf00      	nop
   d5ac0:	000daf60 	.word	0x000daf60
   d5ac4:	d19cab61 	.word	0xd19cab61

000d5ac8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d5ac8:	b510      	push	{r4, lr}
   d5aca:	e9d1 2300 	ldrd	r2, r3, [r1]
   d5ace:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d5ad0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d5ad2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5ad4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d5ad6:	b90a      	cbnz	r2, d5adc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d5ad8:	07d9      	lsls	r1, r3, #31
   d5ada:	d505      	bpl.n	d5ae8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5ae0:	4b0f      	ldr	r3, [pc, #60]	; (d5b20 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d5ae2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5ae4:	4b0f      	ldr	r3, [pc, #60]	; (d5b24 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d5ae6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ae8:	ab02      	add	r3, sp, #8
   d5aea:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5aee:	466a      	mov	r2, sp
   d5af0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5af4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5af8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5afc:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b00:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b02:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b06:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b08:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b0a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5b0c:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d5b0e:	4618      	mov	r0, r3
   d5b10:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b12:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5b14:	9105      	str	r1, [sp, #20]
   d5b16:	f7fe fb79 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	}
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	b006      	add	sp, #24
   d5b1e:	bd10      	pop	{r4, pc}
   d5b20:	000d5703 	.word	0x000d5703
   d5b24:	000d56b9 	.word	0x000d56b9

000d5b28 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d5b28:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5b2a:	4b05      	ldr	r3, [pc, #20]	; (d5b40 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d5b2c:	9300      	str	r3, [sp, #0]
   d5b2e:	4669      	mov	r1, sp
   d5b30:	2300      	movs	r3, #0
   d5b32:	3010      	adds	r0, #16
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	f7ff ffc7 	bl	d5ac8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5b3a:	b003      	add	sp, #12
   d5b3c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b40:	000d5b71 	.word	0x000d5b71

000d5b44 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d5b44:	b513      	push	{r0, r1, r4, lr}
   d5b46:	4604      	mov	r4, r0
   d5b48:	f000 fd20 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d5b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5b4e:	1ac0      	subs	r0, r0, r3
   d5b50:	68e3      	ldr	r3, [r4, #12]
   d5b52:	4298      	cmp	r0, r3
   d5b54:	d308      	bcc.n	d5b68 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5b56:	4b05      	ldr	r3, [pc, #20]	; (d5b6c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d5b58:	9300      	str	r3, [sp, #0]
   d5b5a:	4669      	mov	r1, sp
   d5b5c:	2300      	movs	r3, #0
   d5b5e:	f104 0010 	add.w	r0, r4, #16
   d5b62:	9301      	str	r3, [sp, #4]
   d5b64:	f7ff ffb0 	bl	d5ac8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5b68:	b002      	add	sp, #8
   d5b6a:	bd10      	pop	{r4, pc}
   d5b6c:	000d5b71 	.word	0x000d5b71

000d5b70 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d5b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5b74:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d5b78:	b086      	sub	sp, #24
   d5b7a:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5b7c:	2b00      	cmp	r3, #0
   d5b7e:	d164      	bne.n	d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5b80:	f000 fee4 	bl	d694c <spark_cloud_flag_connected>
   d5b84:	2800      	cmp	r0, #0
   d5b86:	d060      	beq.n	d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5b88:	f000 fd00 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
   d5b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5b8e:	1ac0      	subs	r0, r0, r3
   d5b90:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d5b94:	4298      	cmp	r0, r3
   d5b96:	d958      	bls.n	d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d5b98:	6823      	ldr	r3, [r4, #0]
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	695b      	ldr	r3, [r3, #20]
   d5b9e:	4798      	blx	r3
		if (data) {
   d5ba0:	4605      	mov	r5, r0
   d5ba2:	2800      	cmp	r0, #0
   d5ba4:	d051      	beq.n	d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d5ba6:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d5baa:	2301      	movs	r3, #1
   d5bac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d5bb0:	4638      	mov	r0, r7
   d5bb2:	f003 f85e 	bl	d8c72 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d5bb6:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5bba:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d5bbe:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5bc0:	682b      	ldr	r3, [r5, #0]
   d5bc2:	492b      	ldr	r1, [pc, #172]	; (d5c70 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d5bc4:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d5bc6:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5bc8:	4633      	mov	r3, r6
   d5bca:	482a      	ldr	r0, [pc, #168]	; (d5c74 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5bcc:	463a      	mov	r2, r7
   d5bce:	f7ff fc2b 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d5bd2:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5bd4:	f88d 8000 	strb.w	r8, [sp]
   d5bd8:	4632      	mov	r2, r6
   d5bda:	4639      	mov	r1, r7
   d5bdc:	a802      	add	r0, sp, #8
   d5bde:	f001 f9af 	bl	d6f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5be2:	9d02      	ldr	r5, [sp, #8]
   d5be4:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d5be6:	b91b      	cbnz	r3, d5bf0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d5be8:	2001      	movs	r0, #1
   d5bea:	f000 ffa7 	bl	d6b3c <delay>
			while(!request.isDone()) {
   d5bee:	e7f8      	b.n	d5be2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5bf0:	2000      	movs	r0, #0
   d5bf2:	f000 fe55 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5bf6:	b120      	cbz	r0, d5c02 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d5bf8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5bfa:	b913      	cbnz	r3, d5c02 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d5bfc:	f000 fe9e 	bl	d693c <spark_process>
    }
   d5c00:	e7fa      	b.n	d5bf8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5c02:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d5c04:	2b01      	cmp	r3, #1
   d5c06:	d123      	bne.n	d5c50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d5c08:	491b      	ldr	r1, [pc, #108]	; (d5c78 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d5c0a:	481a      	ldr	r0, [pc, #104]	; (d5c74 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5c0c:	f7ff fc0c 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d5c10:	6823      	ldr	r3, [r4, #0]
   d5c12:	2100      	movs	r1, #0
   d5c14:	699b      	ldr	r3, [r3, #24]
   d5c16:	4620      	mov	r0, r4
   d5c18:	4798      	blx	r3
			isSending = false;
   d5c1a:	2300      	movs	r3, #0
   d5c1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d5c20:	f000 fcb4 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d5c24:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d5c26:	9c03      	ldr	r4, [sp, #12]
   d5c28:	b17c      	cbz	r4, d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d5c2a:	6863      	ldr	r3, [r4, #4]
   d5c2c:	3b01      	subs	r3, #1
   d5c2e:	6063      	str	r3, [r4, #4]
   d5c30:	b95b      	cbnz	r3, d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d5c32:	6823      	ldr	r3, [r4, #0]
   d5c34:	4620      	mov	r0, r4
   d5c36:	689b      	ldr	r3, [r3, #8]
   d5c38:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c3a:	68a3      	ldr	r3, [r4, #8]
   d5c3c:	3b01      	subs	r3, #1
   d5c3e:	60a3      	str	r3, [r4, #8]
   d5c40:	b91b      	cbnz	r3, d5c4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d5c42:	6823      	ldr	r3, [r4, #0]
   d5c44:	4620      	mov	r0, r4
   d5c46:	68db      	ldr	r3, [r3, #12]
   d5c48:	4798      	blx	r3
}
   d5c4a:	b006      	add	sp, #24
   d5c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d5c50:	68e2      	ldr	r2, [r4, #12]
   d5c52:	490a      	ldr	r1, [pc, #40]	; (d5c7c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d5c54:	4807      	ldr	r0, [pc, #28]	; (d5c74 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5c56:	f7ff fbe7 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d5c5a:	4b09      	ldr	r3, [pc, #36]	; (d5c80 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d5c5c:	9304      	str	r3, [sp, #16]
   d5c5e:	a904      	add	r1, sp, #16
   d5c60:	2300      	movs	r3, #0
   d5c62:	f104 0010 	add.w	r0, r4, #16
   d5c66:	9305      	str	r3, [sp, #20]
   d5c68:	f7ff ff2e 	bl	d5ac8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5c6c:	e7d5      	b.n	d5c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d5c6e:	bf00      	nop
   d5c70:	000daec7 	.word	0x000daec7
   d5c74:	2003e5d0 	.word	0x2003e5d0
   d5c78:	000daee8 	.word	0x000daee8
   d5c7c:	000daeff 	.word	0x000daeff
   d5c80:	000d5b45 	.word	0x000d5b45

000d5c84 <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
   d5c84:	4b01      	ldr	r3, [pc, #4]	; (d5c8c <_GLOBAL__sub_I_pubqLogger+0x8>)
   d5c86:	4a02      	ldr	r2, [pc, #8]	; (d5c90 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d5c88:	601a      	str	r2, [r3, #0]
}
   d5c8a:	4770      	bx	lr
   d5c8c:	2003e5d0 	.word	0x2003e5d0
   d5c90:	000daf26 	.word	0x000daf26

000d5c94 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5c94:	2040      	movs	r0, #64	; 0x40
   d5c96:	4770      	bx	lr

000d5c98 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5c98:	2000      	movs	r0, #0
   d5c9a:	4770      	bx	lr

000d5c9c <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5c9c:	2080      	movs	r0, #128	; 0x80
   d5c9e:	4770      	bx	lr

000d5ca0 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5ca0:	20ff      	movs	r0, #255	; 0xff
   d5ca2:	4770      	bx	lr

000d5ca4 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5ca4:	4770      	bx	lr

000d5ca6 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5ca6:	4770      	bx	lr

000d5ca8 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5ca8:	4770      	bx	lr

000d5caa <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5caa:	4770      	bx	lr

000d5cac <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5cac:	b510      	push	{r4, lr}
}
   d5cae:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5cb0:	4604      	mov	r4, r0
}
   d5cb2:	f002 fa20 	bl	d80f6 <_ZdlPvj>
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	bd10      	pop	{r4, pc}

000d5cba <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5cba:	b510      	push	{r4, lr}
}
   d5cbc:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5cbe:	4604      	mov	r4, r0
}
   d5cc0:	f002 fa19 	bl	d80f6 <_ZdlPvj>
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	bd10      	pop	{r4, pc}

000d5cc8 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5cc8:	b510      	push	{r4, lr}
}
   d5cca:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5ccc:	4604      	mov	r4, r0
}
   d5cce:	f002 fa12 	bl	d80f6 <_ZdlPvj>
   d5cd2:	4620      	mov	r0, r4
   d5cd4:	bd10      	pop	{r4, pc}

000d5cd6 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5cd6:	b510      	push	{r4, lr}
}
   d5cd8:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5cda:	4604      	mov	r4, r0
}
   d5cdc:	f002 fa0b 	bl	d80f6 <_ZdlPvj>
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	bd10      	pop	{r4, pc}

000d5ce4 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5ce4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5ce8:	6803      	ldr	r3, [r0, #0]
   d5cea:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5cec:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5cee:	4798      	blx	r3
   d5cf0:	2210      	movs	r2, #16
   d5cf2:	4601      	mov	r1, r0
   d5cf4:	4668      	mov	r0, sp
   d5cf6:	f002 ff61 	bl	d8bbc <memset>
	size_t len = length();
   d5cfa:	6823      	ldr	r3, [r4, #0]
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	689b      	ldr	r3, [r3, #8]
   d5d00:	4798      	blx	r3
	size_t offset = 0;
   d5d02:	2500      	movs	r5, #0
	size_t len = length();
   d5d04:	4607      	mov	r7, r0
	bool bResult = false;
   d5d06:	4628      	mov	r0, r5
	while(offset < len) {
   d5d08:	42bd      	cmp	r5, r7
   d5d0a:	d20e      	bcs.n	d5d2a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5d0c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5d0e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5d10:	2e10      	cmp	r6, #16
   d5d12:	bf28      	it	cs
   d5d14:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5d16:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5d1a:	466a      	mov	r2, sp
   d5d1c:	4633      	mov	r3, r6
   d5d1e:	4629      	mov	r1, r5
   d5d20:	4620      	mov	r0, r4
   d5d22:	47c0      	blx	r8
		if (!bResult) {
   d5d24:	b108      	cbz	r0, d5d2a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5d26:	4435      	add	r5, r6
	while(offset < len) {
   d5d28:	e7ee      	b.n	d5d08 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5d2a:	b004      	add	sp, #16
   d5d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d30 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5d30:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5d34:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5d36:	f240 1301 	movw	r3, #257	; 0x101
   d5d3a:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5d3c:	2300      	movs	r3, #0
   d5d3e:	8203      	strh	r3, [r0, #16]
}
   d5d40:	4770      	bx	lr
	...

000d5d44 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b06      	ldr	r3, [pc, #24]	; (d5d60 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5d48:	6003      	str	r3, [r0, #0]
   d5d4a:	4b06      	ldr	r3, [pc, #24]	; (d5d64 <_ZN12MCP79410TimeC1Ev+0x20>)
   d5d4c:	6043      	str	r3, [r0, #4]
   d5d4e:	f240 7304 	movw	r3, #1796	; 0x704
   d5d52:	8103      	strh	r3, [r0, #8]
   d5d54:	2300      	movs	r3, #0
   d5d56:	7443      	strb	r3, [r0, #17]
	clear();
   d5d58:	f7ff ffea 	bl	d5d30 <_ZN12MCP79410Time5clearEv>
}
   d5d5c:	bd08      	pop	{r3, pc}
   d5d5e:	bf00      	nop
   d5d60:	000db04c 	.word	0x000db04c
   d5d64:	03020100 	.word	0x03020100

000d5d68 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d68:	0903      	lsrs	r3, r0, #4
}
   d5d6a:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d6c:	f000 000f 	and.w	r0, r0, #15
}
   d5d70:	fb02 0003 	mla	r0, r2, r3, r0
   d5d74:	4770      	bx	lr

000d5d76 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5d76:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5d78:	7a80      	ldrb	r0, [r0, #10]
   d5d7a:	f7ff fff5 	bl	d5d68 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5d7e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5d82:	bd08      	pop	{r3, pc}

000d5d84 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5d84:	7ac0      	ldrb	r0, [r0, #11]
   d5d86:	f000 001f 	and.w	r0, r0, #31
   d5d8a:	f7ff bfed 	b.w	d5d68 <_ZN12MCP79410Time8bcdToIntEh>

000d5d8e <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5d8e:	7b00      	ldrb	r0, [r0, #12]
   d5d90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5d94:	f7ff bfe8 	b.w	d5d68 <_ZN12MCP79410Time8bcdToIntEh>

000d5d98 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5d98:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5d9a:	7b81      	ldrb	r1, [r0, #14]
   d5d9c:	064a      	lsls	r2, r1, #25
   d5d9e:	d50d      	bpl.n	d5dbc <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5da0:	f001 001f 	and.w	r0, r1, #31
   d5da4:	f7ff ffe0 	bl	d5d68 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5da8:	068b      	lsls	r3, r1, #26
   d5daa:	d503      	bpl.n	d5db4 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5dac:	280c      	cmp	r0, #12
   d5dae:	d000      	beq.n	d5db2 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5db0:	300c      	adds	r0, #12
}
   d5db2:	bd08      	pop	{r3, pc}
				return 0;
   d5db4:	280c      	cmp	r0, #12
   d5db6:	bf08      	it	eq
   d5db8:	2000      	moveq	r0, #0
   d5dba:	e7fa      	b.n	d5db2 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5dc0:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5dc4:	f7ff bfd0 	b.w	d5d68 <_ZN12MCP79410Time8bcdToIntEh>

000d5dc8 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5dc8:	7bc0      	ldrb	r0, [r0, #15]
   d5dca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5dce:	f7ff bfcb 	b.w	d5d68 <_ZN12MCP79410Time8bcdToIntEh>

000d5dd2 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5dd2:	7c00      	ldrb	r0, [r0, #16]
   d5dd4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5dd8:	f7ff bfc6 	b.w	d5d68 <_ZN12MCP79410Time8bcdToIntEh>

000d5ddc <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5ddc:	b510      	push	{r4, lr}
   d5dde:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5de0:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5de2:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5de4:	2100      	movs	r1, #0
   d5de6:	a801      	add	r0, sp, #4
   d5de8:	f002 fee8 	bl	d8bbc <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5dec:	4620      	mov	r0, r4
   d5dee:	f7ff ffc2 	bl	d5d76 <_ZNK12MCP79410Time7getYearEv>
   d5df2:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5df6:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5df8:	4620      	mov	r0, r4
   d5dfa:	f7ff ffc3 	bl	d5d84 <_ZNK12MCP79410Time8getMonthEv>
   d5dfe:	3801      	subs	r0, #1
   d5e00:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff ffc3 	bl	d5d8e <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5e08:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	f7ff ffc4 	bl	d5d98 <_ZNK12MCP79410Time7getHourEv>
   d5e10:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5e12:	4620      	mov	r0, r4
   d5e14:	f7ff ffd8 	bl	d5dc8 <_ZNK12MCP79410Time9getMinuteEv>
   d5e18:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f7ff ffd9 	bl	d5dd2 <_ZNK12MCP79410Time9getSecondEv>
   d5e20:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5e22:	a801      	add	r0, sp, #4
   d5e24:	f000 fe82 	bl	d6b2c <mktime>
}
   d5e28:	b00a      	add	sp, #40	; 0x28
   d5e2a:	bd10      	pop	{r4, pc}

000d5e2c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5e2c:	210a      	movs	r1, #10
   d5e2e:	fb90 f2f1 	sdiv	r2, r0, r1
   d5e32:	fb92 f3f1 	sdiv	r3, r2, r1
   d5e36:	fb01 2313 	mls	r3, r1, r3, r2
   d5e3a:	011b      	lsls	r3, r3, #4
   d5e3c:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5e3e:	fb01 0012 	mls	r0, r1, r2, r0
   d5e42:	4318      	orrs	r0, r3
}
   d5e44:	b2c0      	uxtb	r0, r0
   d5e46:	4770      	bx	lr

000d5e48 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5e48:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5e4a:	b510      	push	{r4, lr}
   d5e4c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5e4e:	fb91 f0f3 	sdiv	r0, r1, r3
   d5e52:	fb00 1013 	mls	r0, r0, r3, r1
   d5e56:	f7ff ffe9 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
   d5e5a:	72a0      	strb	r0, [r4, #10]
}
   d5e5c:	bd10      	pop	{r4, pc}

000d5e5e <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5e5e:	b510      	push	{r4, lr}
   d5e60:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5e62:	4608      	mov	r0, r1
   d5e64:	f7ff ffe2 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
   d5e68:	72e0      	strb	r0, [r4, #11]
}
   d5e6a:	bd10      	pop	{r4, pc}

000d5e6c <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5e6c:	b510      	push	{r4, lr}
   d5e6e:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5e70:	4608      	mov	r0, r1
   d5e72:	f7ff ffdb 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5e76:	7b23      	ldrb	r3, [r4, #12]
   d5e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5e7c:	4318      	orrs	r0, r3
   d5e7e:	7320      	strb	r0, [r4, #12]
}
   d5e80:	bd10      	pop	{r4, pc}

000d5e82 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5e82:	b510      	push	{r4, lr}
   d5e84:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5e86:	1c48      	adds	r0, r1, #1
   d5e88:	f7ff ffd0 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5e8c:	7b63      	ldrb	r3, [r4, #13]
   d5e8e:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5e92:	4318      	orrs	r0, r3
   d5e94:	7360      	strb	r0, [r4, #13]
}
   d5e96:	bd10      	pop	{r4, pc}

000d5e98 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5e98:	b510      	push	{r4, lr}
   d5e9a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5e9c:	4608      	mov	r0, r1
   d5e9e:	f7ff ffc5 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
   d5ea2:	73a0      	strb	r0, [r4, #14]
}
   d5ea4:	bd10      	pop	{r4, pc}

000d5ea6 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5ea6:	b510      	push	{r4, lr}
   d5ea8:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5eaa:	4608      	mov	r0, r1
   d5eac:	f7ff ffbe 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
   d5eb0:	73e0      	strb	r0, [r4, #15]
}
   d5eb2:	bd10      	pop	{r4, pc}

000d5eb4 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5eb4:	b510      	push	{r4, lr}
   d5eb6:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5eb8:	4608      	mov	r0, r1
   d5eba:	f7ff ffb7 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5ebe:	7c23      	ldrb	r3, [r4, #16]
   d5ec0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5ec4:	4318      	orrs	r0, r3
   d5ec6:	7420      	strb	r0, [r4, #16]
}
   d5ec8:	bd10      	pop	{r4, pc}

000d5eca <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ecc:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5ece:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5ed0:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5ed4:	f002 fe38 	bl	d8b48 <gmtime>
   d5ed8:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5eda:	6941      	ldr	r1, [r0, #20]
   d5edc:	4620      	mov	r0, r4
   d5ede:	f7ff ffb3 	bl	d5e48 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5ee2:	6929      	ldr	r1, [r5, #16]
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	3101      	adds	r1, #1
   d5ee8:	f7ff ffb9 	bl	d5e5e <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5eec:	68e9      	ldr	r1, [r5, #12]
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff ffbc 	bl	d5e6c <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5ef4:	69a9      	ldr	r1, [r5, #24]
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7ff ffc3 	bl	d5e82 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5efc:	68a9      	ldr	r1, [r5, #8]
   d5efe:	4620      	mov	r0, r4
   d5f00:	f7ff ffca 	bl	d5e98 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5f04:	6869      	ldr	r1, [r5, #4]
   d5f06:	4620      	mov	r0, r4
   d5f08:	f7ff ffcd 	bl	d5ea6 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5f0c:	6829      	ldr	r1, [r5, #0]
   d5f0e:	293b      	cmp	r1, #59	; 0x3b
   d5f10:	bfa8      	it	ge
   d5f12:	213b      	movge	r1, #59	; 0x3b
   d5f14:	4620      	mov	r0, r4
   d5f16:	f7ff ffcd 	bl	d5eb4 <_ZN12MCP79410Time9setSecondEi>
}
   d5f1a:	b003      	add	sp, #12
   d5f1c:	bd30      	pop	{r4, r5, pc}
	...

000d5f20 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f20:	4a05      	ldr	r2, [pc, #20]	; (d5f38 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f22:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f24:	e9c0 2100 	strd	r2, r1, [r0]
   d5f28:	4a04      	ldr	r2, [pc, #16]	; (d5f3c <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5f2a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f2c:	4a04      	ldr	r2, [pc, #16]	; (d5f40 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5f2e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f30:	4a04      	ldr	r2, [pc, #16]	; (d5f44 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f32:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f34:	6142      	str	r2, [r0, #20]
}
   d5f36:	4770      	bx	lr
   d5f38:	000db080 	.word	0x000db080
   d5f3c:	03010000 	.word	0x03010000
   d5f40:	000db028 	.word	0x000db028
   d5f44:	000db05c 	.word	0x000db05c

000d5f48 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f4c:	4604      	mov	r4, r0
   d5f4e:	460f      	mov	r7, r1
   d5f50:	4690      	mov	r8, r2
   d5f52:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5f54:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f58:	429e      	cmp	r6, r3
   d5f5a:	d231      	bcs.n	d5fc0 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5f5c:	6860      	ldr	r0, [r4, #4]
   d5f5e:	4639      	mov	r1, r7
   d5f60:	f001 fa12 	bl	d7388 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5f64:	eb08 0106 	add.w	r1, r8, r6
   d5f68:	6860      	ldr	r0, [r4, #4]
   d5f6a:	f7ff fa59 	bl	d5420 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5f6e:	6860      	ldr	r0, [r4, #4]
   d5f70:	2100      	movs	r1, #0
   d5f72:	f001 fa10 	bl	d7396 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5f76:	4605      	mov	r5, r0
   d5f78:	b9d0      	cbnz	r0, d5fb0 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5f7c:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5f7e:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5f80:	2a20      	cmp	r2, #32
   d5f82:	f04f 0301 	mov.w	r3, #1
   d5f86:	bf28      	it	cs
   d5f88:	2220      	movcs	r2, #32
   d5f8a:	4639      	mov	r1, r7
   d5f8c:	f001 f9e7 	bl	d735e <_ZN7TwoWire11requestFromEhjh>
   d5f90:	eb09 0b06 	add.w	fp, r9, r6
   d5f94:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d5f96:	eb0b 0a00 	add.w	sl, fp, r0
   d5f9a:	45da      	cmp	sl, fp
   d5f9c:	d006      	beq.n	d5fac <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5f9e:	6860      	ldr	r0, [r4, #4]
   d5fa0:	6803      	ldr	r3, [r0, #0]
   d5fa2:	695b      	ldr	r3, [r3, #20]
   d5fa4:	4798      	blx	r3
   d5fa6:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5faa:	e7f6      	b.n	d5f9a <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5fac:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5fae:	e7d2      	b.n	d5f56 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5fb0:	4602      	mov	r2, r0
   d5fb2:	4904      	ldr	r1, [pc, #16]	; (d5fc4 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5fb4:	4804      	ldr	r0, [pc, #16]	; (d5fc8 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5fb6:	f7ff fa37 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5fba:	4628      	mov	r0, r5
   d5fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fc0:	2500      	movs	r5, #0
	return stat;
   d5fc2:	e7fa      	b.n	d5fba <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5fc4:	000daf80 	.word	0x000daf80
   d5fc8:	2003e5d4 	.word	0x2003e5d4

000d5fcc <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5fd0:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fd4:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5fd6:	6803      	ldr	r3, [r0, #0]
   d5fd8:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fda:	4605      	mov	r5, r0
   d5fdc:	460c      	mov	r4, r1
   d5fde:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5fe0:	4798      	blx	r3
   d5fe2:	4580      	cmp	r8, r0
   d5fe4:	d80d      	bhi.n	d6002 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5fe6:	3420      	adds	r4, #32
   d5fe8:	6868      	ldr	r0, [r5, #4]
   d5fea:	9600      	str	r6, [sp, #0]
   d5fec:	463b      	mov	r3, r7
   d5fee:	b2e2      	uxtb	r2, r4
   d5ff0:	216f      	movs	r1, #111	; 0x6f
   d5ff2:	f7ff ffa9 	bl	d5f48 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5ff6:	fab0 f080 	clz	r0, r0
   d5ffa:	0940      	lsrs	r0, r0, #5
}
   d5ffc:	b002      	add	sp, #8
   d5ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6002:	2000      	movs	r0, #0
   d6004:	e7fa      	b.n	d5ffc <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6006 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6006:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d600a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d600e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6010:	6803      	ldr	r3, [r0, #0]
   d6012:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6014:	4604      	mov	r4, r0
   d6016:	460d      	mov	r5, r1
   d6018:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d601a:	4798      	blx	r3
   d601c:	4580      	cmp	r8, r0
   d601e:	d80c      	bhi.n	d603a <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6020:	6860      	ldr	r0, [r4, #4]
   d6022:	9600      	str	r6, [sp, #0]
   d6024:	463b      	mov	r3, r7
   d6026:	b2ea      	uxtb	r2, r5
   d6028:	2157      	movs	r1, #87	; 0x57
   d602a:	f7ff ff8d 	bl	d5f48 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d602e:	fab0 f080 	clz	r0, r0
   d6032:	0940      	lsrs	r0, r0, #5
}
   d6034:	b002      	add	sp, #8
   d6036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d603a:	2000      	movs	r0, #0
   d603c:	e7fa      	b.n	d6034 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d603e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d603e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6040:	1e1e      	subs	r6, r3, #0
   d6042:	bf0c      	ite	eq
   d6044:	2307      	moveq	r3, #7
   d6046:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6048:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d604a:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d604c:	ab02      	add	r3, sp, #8
   d604e:	460a      	mov	r2, r1
   d6050:	216f      	movs	r1, #111	; 0x6f
   d6052:	f7ff ff79 	bl	d5f48 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6056:	4605      	mov	r5, r0
   d6058:	b9a8      	cbnz	r0, d6086 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d605a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d605e:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6060:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6064:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6066:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d606a:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d606c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6070:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6072:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6076:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6078:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d607c:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d607e:	b92e      	cbnz	r6, d608c <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6080:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6084:	72a3      	strb	r3, [r4, #10]
}
   d6086:	4628      	mov	r0, r5
   d6088:	b004      	add	sp, #16
   d608a:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d608c:	f001 fdb0 	bl	d7bf0 <_ZN9TimeClass4yearEv>
   d6090:	f7ff fecc 	bl	d5e2c <_ZN12MCP79410Time8intToBcdEi>
   d6094:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6096:	e7f6      	b.n	d6086 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6098 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d609a:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d609c:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d609e:	9300      	str	r3, [sp, #0]
   d60a0:	216f      	movs	r1, #111	; 0x6f
   d60a2:	ab03      	add	r3, sp, #12
   d60a4:	f7ff ff50 	bl	d5f48 <_ZNK8MCP7941010deviceReadEhhPhj>
   d60a8:	b920      	cbnz	r0, d60b4 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d60aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d60ae:	b005      	add	sp, #20
   d60b0:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d60b4:	2000      	movs	r0, #0
   d60b6:	e7fa      	b.n	d60ae <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d60b8 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d60b8:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d60ba:	2103      	movs	r1, #3
   d60bc:	f7ff ffec 	bl	d6098 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d60c0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d60c4:	bd08      	pop	{r3, pc}

000d60c6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d60c6:	b538      	push	{r3, r4, r5, lr}
   d60c8:	2300      	movs	r3, #0
   d60ca:	460c      	mov	r4, r1
   d60cc:	460a      	mov	r2, r1
   d60ce:	4619      	mov	r1, r3
   d60d0:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d60d2:	f7ff ffb4 	bl	d603e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d60d6:	b930      	cbnz	r0, d60e6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60d8:	7aa3      	ldrb	r3, [r4, #10]
   d60da:	b123      	cbz	r3, d60e6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d60dc:	4628      	mov	r0, r5
}
   d60de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60e2:	f7ff bfe9 	b.w	d60b8 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d60e6:	2000      	movs	r0, #0
   d60e8:	bd38      	pop	{r3, r4, r5, pc}

000d60ea <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d60ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d60ec:	4602      	mov	r2, r0
	MCP79410Time time;
   d60ee:	a801      	add	r0, sp, #4
   d60f0:	f7ff fe28 	bl	d5d44 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d60f4:	a901      	add	r1, sp, #4
   d60f6:	4610      	mov	r0, r2
   d60f8:	f7ff ffe5 	bl	d60c6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d60fc:	b128      	cbz	r0, d610a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d60fe:	a801      	add	r0, sp, #4
   d6100:	f7ff fe6c 	bl	d5ddc <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6104:	b007      	add	sp, #28
   d6106:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d610a:	2000      	movs	r0, #0
   d610c:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d610e:	e7f9      	b.n	d6104 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6110 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6110:	b5d0      	push	{r4, r6, r7, lr}
   d6112:	4604      	mov	r4, r0
   d6114:	b086      	sub	sp, #24
	wire.begin();
   d6116:	6840      	ldr	r0, [r0, #4]
   d6118:	f001 f904 	bl	d7324 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d611c:	f001 fd2e 	bl	d7b7c <_ZN9TimeClass7isValidEv>
   d6120:	b9e8      	cbnz	r0, d615e <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6122:	7ae3      	ldrb	r3, [r4, #11]
   d6124:	079b      	lsls	r3, r3, #30
   d6126:	d51a      	bpl.n	d615e <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6128:	4620      	mov	r0, r4
   d612a:	f7ff ffde 	bl	d60ea <_ZNK8MCP7941010getRTCTimeEv>
   d612e:	4606      	mov	r6, r0
   d6130:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6132:	ea56 0307 	orrs.w	r3, r6, r7
   d6136:	d012      	beq.n	d615e <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6138:	f001 fc27 	bl	d798a <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d613c:	4b0a      	ldr	r3, [pc, #40]	; (d6168 <_ZN8MCP794105setupEv+0x58>)
   d613e:	490b      	ldr	r1, [pc, #44]	; (d616c <_ZN8MCP794105setupEv+0x5c>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	9300      	str	r3, [sp, #0]
   d6144:	4632      	mov	r2, r6
   d6146:	463b      	mov	r3, r7
   d6148:	a802      	add	r0, sp, #8
   d614a:	f001 fcd5 	bl	d7af8 <_ZN9TimeClass6formatExPKc>
   d614e:	4808      	ldr	r0, [pc, #32]	; (d6170 <_ZN8MCP794105setupEv+0x60>)
   d6150:	9a02      	ldr	r2, [sp, #8]
   d6152:	4908      	ldr	r1, [pc, #32]	; (d6174 <_ZN8MCP794105setupEv+0x64>)
   d6154:	f7ff f968 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
   d6158:	a802      	add	r0, sp, #8
   d615a:	f001 faeb 	bl	d7734 <_ZN6StringD1Ev>
	setupDone = true;
   d615e:	2301      	movs	r3, #1
   d6160:	7223      	strb	r3, [r4, #8]
}
   d6162:	b006      	add	sp, #24
   d6164:	bdd0      	pop	{r4, r6, r7, pc}
   d6166:	bf00      	nop
   d6168:	2003e240 	.word	0x2003e240
   d616c:	2003e640 	.word	0x2003e640
   d6170:	2003e5d4 	.word	0x2003e5d4
   d6174:	000daf9a 	.word	0x000daf9a

000d6178 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d617c:	4606      	mov	r6, r0
   d617e:	4688      	mov	r8, r1
   d6180:	4691      	mov	r9, r2
   d6182:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6184:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6188:	429d      	cmp	r5, r3
   d618a:	d229      	bcs.n	d61e0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d618c:	6870      	ldr	r0, [r6, #4]
   d618e:	4641      	mov	r1, r8
   d6190:	f001 f8fa 	bl	d7388 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6194:	6870      	ldr	r0, [r6, #4]
   d6196:	eb09 0105 	add.w	r1, r9, r5
   d619a:	f7ff f941 	bl	d5420 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61a0:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d61a2:	2f1f      	cmp	r7, #31
   d61a4:	bf28      	it	cs
   d61a6:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d61a8:	eb0a 0405 	add.w	r4, sl, r5
   d61ac:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d61b0:	6870      	ldr	r0, [r6, #4]
   d61b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61b6:	6802      	ldr	r2, [r0, #0]
   d61b8:	6892      	ldr	r2, [r2, #8]
   d61ba:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d61bc:	45a3      	cmp	fp, r4
   d61be:	d1f7      	bne.n	d61b0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d61c0:	6870      	ldr	r0, [r6, #4]
   d61c2:	2101      	movs	r1, #1
   d61c4:	f001 f8e7 	bl	d7396 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d61c8:	4604      	mov	r4, r0
   d61ca:	b138      	cbz	r0, d61dc <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d61cc:	4602      	mov	r2, r0
   d61ce:	4905      	ldr	r1, [pc, #20]	; (d61e4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d61d0:	4805      	ldr	r0, [pc, #20]	; (d61e8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d61d2:	f7ff f929 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d61d6:	4620      	mov	r0, r4
   d61d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d61dc:	443d      	add	r5, r7
	while(offset < bufLen) {
   d61de:	e7d2      	b.n	d6186 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d61e0:	2400      	movs	r4, #0
	return stat;
   d61e2:	e7f8      	b.n	d61d6 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d61e4:	000dafaf 	.word	0x000dafaf
   d61e8:	2003e5d4 	.word	0x2003e5d4

000d61ec <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d61ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d61f0:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d61f4:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d61f6:	6803      	ldr	r3, [r0, #0]
   d61f8:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d61fa:	4605      	mov	r5, r0
   d61fc:	460c      	mov	r4, r1
   d61fe:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6200:	4798      	blx	r3
   d6202:	4580      	cmp	r8, r0
   d6204:	d80d      	bhi.n	d6222 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6206:	3420      	adds	r4, #32
   d6208:	6868      	ldr	r0, [r5, #4]
   d620a:	9600      	str	r6, [sp, #0]
   d620c:	463b      	mov	r3, r7
   d620e:	b2e2      	uxtb	r2, r4
   d6210:	216f      	movs	r1, #111	; 0x6f
   d6212:	f7ff ffb1 	bl	d6178 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6216:	fab0 f080 	clz	r0, r0
   d621a:	0940      	lsrs	r0, r0, #5
}
   d621c:	b002      	add	sp, #8
   d621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6222:	2000      	movs	r0, #0
   d6224:	e7fa      	b.n	d621c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6226 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6226:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6228:	7c13      	ldrb	r3, [r2, #16]
   d622a:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d622e:	7bd3      	ldrb	r3, [r2, #15]
   d6230:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6234:	7b93      	ldrb	r3, [r2, #14]
   d6236:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d623a:	7b53      	ldrb	r3, [r2, #13]
   d623c:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6240:	7b13      	ldrb	r3, [r2, #12]
   d6242:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6246:	7ad3      	ldrb	r3, [r2, #11]
   d6248:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d624c:	7a93      	ldrb	r3, [r2, #10]
   d624e:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6252:	2307      	movs	r3, #7
   d6254:	9300      	str	r3, [sp, #0]
   d6256:	460a      	mov	r2, r1
   d6258:	ab02      	add	r3, sp, #8
   d625a:	216f      	movs	r1, #111	; 0x6f
   d625c:	f7ff ff8c 	bl	d6178 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6260:	b005      	add	sp, #20
   d6262:	f85d fb04 	ldr.w	pc, [sp], #4

000d6266 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6266:	b510      	push	{r4, lr}
   d6268:	b088      	sub	sp, #32
   d626a:	4604      	mov	r4, r0
	MCP79410Time time;
   d626c:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d626e:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6270:	f7ff fd68 	bl	d5d44 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6274:	9b01      	ldr	r3, [sp, #4]
   d6276:	a803      	add	r0, sp, #12
   d6278:	f7ff fe27 	bl	d5eca <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d627c:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6280:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6282:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6286:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d628a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d628e:	b16a      	cbz	r2, d62ac <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6290:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6294:	aa03      	add	r2, sp, #12
   d6296:	2100      	movs	r1, #0
   d6298:	4620      	mov	r0, r4
   d629a:	f88d 3019 	strb.w	r3, [sp, #25]
   d629e:	f7ff ffc2 	bl	d6226 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d62a2:	fab0 f080 	clz	r0, r0
   d62a6:	0940      	lsrs	r0, r0, #5
   d62a8:	b008      	add	sp, #32
   d62aa:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d62ac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d62b0:	e7f0      	b.n	d6294 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d62b4 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62b6:	b087      	sub	sp, #28
   d62b8:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d62ba:	f001 fc5f 	bl	d7b7c <_ZN9TimeClass7isValidEv>
   d62be:	4604      	mov	r4, r0
   d62c0:	b1e8      	cbz	r0, d62fe <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d62c2:	f001 fc78 	bl	d7bb6 <_ZN9TimeClass3nowEv>
   d62c6:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d62c8:	4602      	mov	r2, r0
		time_t now = Time.now();
   d62ca:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d62cc:	463b      	mov	r3, r7
   d62ce:	4628      	mov	r0, r5
   d62d0:	f7ff ffc9 	bl	d6266 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62d4:	4b0c      	ldr	r3, [pc, #48]	; (d6308 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d62d6:	490d      	ldr	r1, [pc, #52]	; (d630c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	9300      	str	r3, [sp, #0]
   d62dc:	4632      	mov	r2, r6
   d62de:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d62e0:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62e2:	a802      	add	r0, sp, #8
   d62e4:	f001 fc08 	bl	d7af8 <_ZN9TimeClass6formatExPKc>
   d62e8:	4809      	ldr	r0, [pc, #36]	; (d6310 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d62ea:	9a02      	ldr	r2, [sp, #8]
   d62ec:	4909      	ldr	r1, [pc, #36]	; (d6314 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d62ee:	f7ff f89b 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
   d62f2:	a802      	add	r0, sp, #8
   d62f4:	f001 fa1e 	bl	d7734 <_ZN6StringD1Ev>
}
   d62f8:	4620      	mov	r0, r4
   d62fa:	b007      	add	sp, #28
   d62fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d62fe:	4906      	ldr	r1, [pc, #24]	; (d6318 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6300:	4803      	ldr	r0, [pc, #12]	; (d6310 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6302:	f7ff f891 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
   d6306:	e7f7      	b.n	d62f8 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6308:	2003e240 	.word	0x2003e240
   d630c:	2003e640 	.word	0x2003e640
   d6310:	2003e5d4 	.word	0x2003e5d4
   d6314:	000dafca 	.word	0x000dafca
   d6318:	000dafe0 	.word	0x000dafe0

000d631c <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d631c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d631e:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6320:	4604      	mov	r4, r0
	if (!timeSet) {
   d6322:	b99d      	cbnz	r5, d634c <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d6324:	f001 fc2a 	bl	d7b7c <_ZN9TimeClass7isValidEv>
   d6328:	b180      	cbz	r0, d634c <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d632a:	2200      	movs	r2, #0
   d632c:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d632e:	4669      	mov	r1, sp
   d6330:	4628      	mov	r0, r5
        tm = 0;
   d6332:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d6336:	f000 fb39 	bl	d69ac <spark_sync_time_last>
			if (lastSync != 0) {
   d633a:	b138      	cbz	r0, d634c <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d633c:	7ae3      	ldrb	r3, [r4, #11]
   d633e:	07db      	lsls	r3, r3, #31
   d6340:	d502      	bpl.n	d6348 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d6342:	4620      	mov	r0, r4
   d6344:	f7ff ffb6 	bl	d62b4 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6348:	2301      	movs	r3, #1
   d634a:	7263      	strb	r3, [r4, #9]
}
   d634c:	b003      	add	sp, #12
   d634e:	bd30      	pop	{r4, r5, pc}

000d6350 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6352:	2301      	movs	r3, #1
	buf[0] = value;
   d6354:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6358:	9300      	str	r3, [sp, #0]
   d635a:	460a      	mov	r2, r1
   d635c:	ab03      	add	r3, sp, #12
   d635e:	216f      	movs	r1, #111	; 0x6f
   d6360:	f7ff ff0a 	bl	d6178 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6364:	b005      	add	sp, #20
   d6366:	f85d fb04 	ldr.w	pc, [sp], #4

000d636a <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d636a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d636c:	4604      	mov	r4, r0
   d636e:	460d      	mov	r5, r1
   d6370:	4617      	mov	r7, r2
   d6372:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d6374:	f7ff fe90 	bl	d6098 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d6378:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d637c:	4332      	orrs	r2, r6
   d637e:	4629      	mov	r1, r5
   d6380:	4620      	mov	r0, r4
}
   d6382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d6386:	f7ff bfe3 	b.w	d6350 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d638a <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d638a:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d638c:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d638e:	d80c      	bhi.n	d63aa <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6390:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d6392:	f04f 0300 	mov.w	r3, #0
   d6396:	bf14      	ite	ne
   d6398:	22df      	movne	r2, #223	; 0xdf
   d639a:	22ef      	moveq	r2, #239	; 0xef
   d639c:	2107      	movs	r1, #7
   d639e:	f7ff ffe4 	bl	d636a <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d63a2:	fab0 f080 	clz	r0, r0
   d63a6:	0940      	lsrs	r0, r0, #5
}
   d63a8:	bd08      	pop	{r3, pc}
		return false;
   d63aa:	2000      	movs	r0, #0
   d63ac:	e7fc      	b.n	d63a8 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d63ae <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d63ae:	b538      	push	{r3, r4, r5, lr}
   d63b0:	4604      	mov	r4, r0
   d63b2:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d63b4:	6860      	ldr	r0, [r4, #4]
   d63b6:	2157      	movs	r1, #87	; 0x57
   d63b8:	f000 ffe6 	bl	d7388 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d63bc:	6860      	ldr	r0, [r4, #4]
   d63be:	2101      	movs	r1, #1
   d63c0:	f000 ffe9 	bl	d7396 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d63c4:	b108      	cbz	r0, d63ca <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d63c6:	3d01      	subs	r5, #1
   d63c8:	d1f4      	bne.n	d63b4 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d63ca:	bd38      	pop	{r3, r4, r5, pc}

000d63cc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d63cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63d0:	4604      	mov	r4, r0
   d63d2:	460f      	mov	r7, r1
   d63d4:	4616      	mov	r6, r2
   d63d6:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d63da:	45b0      	cmp	r8, r6
   d63dc:	d020      	beq.n	d6420 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d63de:	6860      	ldr	r0, [r4, #4]
   d63e0:	2157      	movs	r1, #87	; 0x57
   d63e2:	f000 ffd1 	bl	d7388 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d63e6:	4639      	mov	r1, r7
   d63e8:	6860      	ldr	r0, [r4, #4]
   d63ea:	f7ff f819 	bl	d5420 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d63ee:	6860      	ldr	r0, [r4, #4]
   d63f0:	f816 1b01 	ldrb.w	r1, [r6], #1
   d63f4:	6803      	ldr	r3, [r0, #0]
   d63f6:	689b      	ldr	r3, [r3, #8]
   d63f8:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d63fa:	6860      	ldr	r0, [r4, #4]
   d63fc:	2101      	movs	r1, #1
   d63fe:	f000 ffca 	bl	d7396 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6402:	3701      	adds	r7, #1
   d6404:	4605      	mov	r5, r0
   d6406:	b138      	cbz	r0, d6418 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6408:	4602      	mov	r2, r0
   d640a:	4906      	ldr	r1, [pc, #24]	; (d6424 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d640c:	4806      	ldr	r0, [pc, #24]	; (d6428 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d640e:	f7ff f80b 	bl	d5428 <_ZNK5spark6Logger4infoEPKcz>
}
   d6412:	4628      	mov	r0, r5
   d6414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6418:	4620      	mov	r0, r4
   d641a:	f7ff ffc8 	bl	d63ae <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d641e:	e7dc      	b.n	d63da <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6420:	2500      	movs	r5, #0
	return stat;
   d6422:	e7f6      	b.n	d6412 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d6424:	000daff5 	.word	0x000daff5
   d6428:	2003e5d4 	.word	0x2003e5d4

000d642c <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d642c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d642e:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6430:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6432:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6434:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d6436:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6438:	4604      	mov	r4, r0
   d643a:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d643c:	4798      	blx	r3
   d643e:	4287      	cmp	r7, r0
   d6440:	d80a      	bhi.n	d6458 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d6442:	9a01      	ldr	r2, [sp, #4]
   d6444:	6860      	ldr	r0, [r4, #4]
   d6446:	4633      	mov	r3, r6
   d6448:	b2e9      	uxtb	r1, r5
   d644a:	f7ff ffbf 	bl	d63cc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d644e:	fab0 f080 	clz	r0, r0
   d6452:	0940      	lsrs	r0, r0, #5
}
   d6454:	b003      	add	sp, #12
   d6456:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6458:	2000      	movs	r0, #0
   d645a:	e7fb      	b.n	d6454 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d645c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
   d645c:	4b01      	ldr	r3, [pc, #4]	; (d6464 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d645e:	4a02      	ldr	r2, [pc, #8]	; (d6468 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6460:	601a      	str	r2, [r3, #0]
}
   d6462:	4770      	bx	lr
   d6464:	2003e5d4 	.word	0x2003e5d4
   d6468:	000db016 	.word	0x000db016

000d646c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b02      	ldr	r3, [pc, #8]	; (d6478 <os_thread_create+0xc>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	685b      	ldr	r3, [r3, #4]
   d6474:	9301      	str	r3, [sp, #4]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	00030248 	.word	0x00030248

000d647c <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d647c:	b508      	push	{r3, lr}
   d647e:	4b02      	ldr	r3, [pc, #8]	; (d6488 <os_thread_yield+0xc>)
   d6480:	681b      	ldr	r3, [r3, #0]
   d6482:	68db      	ldr	r3, [r3, #12]
   d6484:	9301      	str	r3, [sp, #4]
   d6486:	bd08      	pop	{r3, pc}
   d6488:	00030248 	.word	0x00030248

000d648c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b02      	ldr	r3, [pc, #8]	; (d6498 <os_thread_scheduling+0xc>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	69db      	ldr	r3, [r3, #28]
   d6494:	9301      	str	r3, [sp, #4]
   d6496:	bd08      	pop	{r3, pc}
   d6498:	00030248 	.word	0x00030248

000d649c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <os_timer_create+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	6a1b      	ldr	r3, [r3, #32]
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	00030248 	.word	0x00030248

000d64ac <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <os_timer_destroy+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030248 	.word	0x00030248

000d64bc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <os_timer_get_id+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	00030248 	.word	0x00030248

000d64cc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <os_timer_change+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	00030248 	.word	0x00030248

000d64dc <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <os_mutex_create+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	00030248 	.word	0x00030248

000d64ec <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <os_mutex_lock+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	00030248 	.word	0x00030248

000d64fc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <os_mutex_unlock+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	00030248 	.word	0x00030248

000d650c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <os_mutex_recursive_create+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	00030248 	.word	0x00030248

000d651c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <os_mutex_recursive_destroy+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030248 	.word	0x00030248

000d652c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <os_thread_exit+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030248 	.word	0x00030248

000d653c <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <os_timer_set_id+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	00030248 	.word	0x00030248

000d654c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <HAL_Feature_Set+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	00030234 	.word	0x00030234

000d655c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <HAL_RNG_GetRandomNumber+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	685b      	ldr	r3, [r3, #4]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	00030218 	.word	0x00030218

000d656c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <HAL_Delay_Milliseconds+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	689b      	ldr	r3, [r3, #8]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	00030218 	.word	0x00030218

000d657c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <HAL_Delay_Microseconds+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	68db      	ldr	r3, [r3, #12]
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	00030218 	.word	0x00030218

000d658c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	695b      	ldr	r3, [r3, #20]
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	00030218 	.word	0x00030218

000d659c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <hal_rtc_time_is_valid+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	00030218 	.word	0x00030218

000d65ac <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <hal_rtc_get_time+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	00030218 	.word	0x00030218

000d65bc <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <hal_rtc_set_time+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	00030218 	.word	0x00030218

000d65cc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <HAL_Pin_Mode+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	689b      	ldr	r3, [r3, #8]
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	0003022c 	.word	0x0003022c

000d65dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <HAL_Get_Pin_Mode+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	68db      	ldr	r3, [r3, #12]
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	0003022c 	.word	0x0003022c

000d65ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b02      	ldr	r3, [pc, #8]	; (d65f8 <HAL_GPIO_Write+0xc>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	691b      	ldr	r3, [r3, #16]
   d65f4:	9301      	str	r3, [sp, #4]
   d65f6:	bd08      	pop	{r3, pc}
   d65f8:	0003022c 	.word	0x0003022c

000d65fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b02      	ldr	r3, [pc, #8]	; (d6608 <HAL_GPIO_Read+0xc>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	695b      	ldr	r3, [r3, #20]
   d6604:	9301      	str	r3, [sp, #4]
   d6606:	bd08      	pop	{r3, pc}
   d6608:	0003022c 	.word	0x0003022c

000d660c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <HAL_Interrupts_Attach+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	699b      	ldr	r3, [r3, #24]
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	0003022c 	.word	0x0003022c

000d661c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <HAL_Interrupts_Detach+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	69db      	ldr	r3, [r3, #28]
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	0003022c 	.word	0x0003022c

000d662c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <hal_i2c_begin+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	68db      	ldr	r3, [r3, #12]
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	00030228 	.word	0x00030228

000d663c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <hal_i2c_begin_transmission+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	699b      	ldr	r3, [r3, #24]
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	00030228 	.word	0x00030228

000d664c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <hal_i2c_end_transmission+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	69db      	ldr	r3, [r3, #28]
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	00030228 	.word	0x00030228

000d665c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <hal_i2c_write+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	6a1b      	ldr	r3, [r3, #32]
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	00030228 	.word	0x00030228

000d666c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <hal_i2c_available+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	00030228 	.word	0x00030228

000d667c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <hal_i2c_read+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	00030228 	.word	0x00030228

000d668c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <hal_i2c_peek+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	00030228 	.word	0x00030228

000d669c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <hal_i2c_flush+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	00030228 	.word	0x00030228

000d66ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <hal_i2c_is_enabled+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030228 	.word	0x00030228

000d66bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <hal_i2c_init+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030228 	.word	0x00030228

000d66cc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <hal_i2c_lock+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030228 	.word	0x00030228

000d66dc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <hal_i2c_unlock+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	00030228 	.word	0x00030228

000d66ec <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <hal_i2c_request_ex+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	00030228 	.word	0x00030228

000d66fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <inet_inet_ntop+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	695b      	ldr	r3, [r3, #20]
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	00030264 	.word	0x00030264

000d670c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <netdb_freeaddrinfo+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	689b      	ldr	r3, [r3, #8]
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	00030268 	.word	0x00030268

000d671c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <netdb_getaddrinfo+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	68db      	ldr	r3, [r3, #12]
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	00030268 	.word	0x00030268

000d672c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <hal_spi_init+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	69db      	ldr	r3, [r3, #28]
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	00030230 	.word	0x00030230

000d673c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <hal_spi_is_enabled+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	6a1b      	ldr	r3, [r3, #32]
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	00030230 	.word	0x00030230

000d674c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <hal_usart_init+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	681b      	ldr	r3, [r3, #0]
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	0003023c 	.word	0x0003023c

000d675c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <hal_usart_write+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	68db      	ldr	r3, [r3, #12]
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	0003023c 	.word	0x0003023c

000d676c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <hal_usart_available+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	691b      	ldr	r3, [r3, #16]
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	0003023c 	.word	0x0003023c

000d677c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <hal_usart_read+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	695b      	ldr	r3, [r3, #20]
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	0003023c 	.word	0x0003023c

000d678c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b02      	ldr	r3, [pc, #8]	; (d6798 <hal_usart_peek+0xc>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	699b      	ldr	r3, [r3, #24]
   d6794:	9301      	str	r3, [sp, #4]
   d6796:	bd08      	pop	{r3, pc}
   d6798:	0003023c 	.word	0x0003023c

000d679c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <hal_usart_flush+0xc>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	69db      	ldr	r3, [r3, #28]
   d67a4:	9301      	str	r3, [sp, #4]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	0003023c 	.word	0x0003023c

000d67ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <hal_usart_is_enabled+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	6a1b      	ldr	r3, [r3, #32]
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	0003023c 	.word	0x0003023c

000d67bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <hal_usart_available_data_for_write+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	0003023c 	.word	0x0003023c

000d67cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <HAL_USB_USART_Init+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	681b      	ldr	r3, [r3, #0]
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	0003024c 	.word	0x0003024c

000d67dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <HAL_USB_USART_Available_Data+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	691b      	ldr	r3, [r3, #16]
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	0003024c 	.word	0x0003024c

000d67ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	695b      	ldr	r3, [r3, #20]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	0003024c 	.word	0x0003024c

000d67fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <HAL_USB_USART_Receive_Data+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	699b      	ldr	r3, [r3, #24]
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	0003024c 	.word	0x0003024c

000d680c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <HAL_USB_USART_Send_Data+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	69db      	ldr	r3, [r3, #28]
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	0003024c 	.word	0x0003024c

000d681c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <HAL_USB_USART_Flush_Data+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	6a1b      	ldr	r3, [r3, #32]
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	0003024c 	.word	0x0003024c

000d682c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <panic_+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	00030260 	.word	0x00030260

000d683c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <log_message_v+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	00030260 	.word	0x00030260

000d684c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b03      	ldr	r3, [pc, #12]	; (d685c <diag_get_source+0x10>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6856:	9301      	str	r3, [sp, #4]
   d6858:	bd08      	pop	{r3, pc}
   d685a:	0000      	.short	0x0000
   d685c:	00030260 	.word	0x00030260

000d6860 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <system_mode+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	681b      	ldr	r3, [r3, #0]
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030220 	.word	0x00030220

000d6870 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <set_system_mode+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	685b      	ldr	r3, [r3, #4]
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	00030220 	.word	0x00030220

000d6880 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <system_delay_ms+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	695b      	ldr	r3, [r3, #20]
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	00030220 	.word	0x00030220

000d6890 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <system_thread_set_state+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	00030220 	.word	0x00030220

000d68a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <application_thread_current+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	00030220 	.word	0x00030220

000d68b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <application_thread_invoke+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	00030220 	.word	0x00030220

000d68c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <system_thread_get_state+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	00030220 	.word	0x00030220

000d68d0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <system_notify_time_changed+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	00030220 	.word	0x00030220

000d68e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b03      	ldr	r3, [pc, #12]	; (d68f0 <system_ctrl_set_app_request_handler+0x10>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d68ea:	9301      	str	r3, [sp, #4]
   d68ec:	bd08      	pop	{r3, pc}
   d68ee:	0000      	.short	0x0000
   d68f0:	00030220 	.word	0x00030220

000d68f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b03      	ldr	r3, [pc, #12]	; (d6904 <system_ctrl_set_result+0x10>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d68fe:	9301      	str	r3, [sp, #4]
   d6900:	bd08      	pop	{r3, pc}
   d6902:	0000      	.short	0x0000
   d6904:	00030220 	.word	0x00030220

000d6908 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b03      	ldr	r3, [pc, #12]	; (d6918 <system_reset+0x10>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6912:	9301      	str	r3, [sp, #4]
   d6914:	bd08      	pop	{r3, pc}
   d6916:	0000      	.short	0x0000
   d6918:	00030220 	.word	0x00030220

000d691c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <spark_variable+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	681b      	ldr	r3, [r3, #0]
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	00030244 	.word	0x00030244

000d692c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <spark_function+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	685b      	ldr	r3, [r3, #4]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	00030244 	.word	0x00030244

000d693c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <spark_process+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	689b      	ldr	r3, [r3, #8]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030244 	.word	0x00030244

000d694c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <spark_cloud_flag_connected+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	695b      	ldr	r3, [r3, #20]
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030244 	.word	0x00030244

000d695c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <spark_deviceID+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	69db      	ldr	r3, [r3, #28]
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	00030244 	.word	0x00030244

000d696c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <spark_send_event+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	6a1b      	ldr	r3, [r3, #32]
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	00030244 	.word	0x00030244

000d697c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <spark_subscribe+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	00030244 	.word	0x00030244

000d698c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <spark_sync_time+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	00030244 	.word	0x00030244

000d699c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <spark_sync_time_pending+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	00030244 	.word	0x00030244

000d69ac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <spark_sync_time_last+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	00030244 	.word	0x00030244

000d69bc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <spark_set_connection_property+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030244 	.word	0x00030244

000d69cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030244 	.word	0x00030244

000d69dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <network_connect+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	685b      	ldr	r3, [r3, #4]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030240 	.word	0x00030240

000d69ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <network_connecting+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	689b      	ldr	r3, [r3, #8]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030240 	.word	0x00030240

000d69fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <network_disconnect+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	68db      	ldr	r3, [r3, #12]
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030240 	.word	0x00030240

000d6a0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <network_ready+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	691b      	ldr	r3, [r3, #16]
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030240 	.word	0x00030240

000d6a1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <network_on+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	695b      	ldr	r3, [r3, #20]
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030240 	.word	0x00030240

000d6a2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <network_off+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	699b      	ldr	r3, [r3, #24]
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	00030240 	.word	0x00030240

000d6a3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <network_listen+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	69db      	ldr	r3, [r3, #28]
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	00030240 	.word	0x00030240

000d6a4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <network_listening+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	6a1b      	ldr	r3, [r3, #32]
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	00030240 	.word	0x00030240

000d6a5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <network_set_listen_timeout+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	00030240 	.word	0x00030240

000d6a6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <network_get_listen_timeout+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	00030240 	.word	0x00030240

000d6a7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <malloc+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	681b      	ldr	r3, [r3, #0]
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	0003021c 	.word	0x0003021c

000d6a8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <free+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	685b      	ldr	r3, [r3, #4]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	0003021c 	.word	0x0003021c

000d6a9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <realloc+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	689b      	ldr	r3, [r3, #8]
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	0003021c 	.word	0x0003021c

000d6aac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <siprintf+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	691b      	ldr	r3, [r3, #16]
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	0003021c 	.word	0x0003021c

000d6abc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <snprintf+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	69db      	ldr	r3, [r3, #28]
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	0003021c 	.word	0x0003021c

000d6acc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <abort+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	0003021c 	.word	0x0003021c

000d6adc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <_malloc_r+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	0003021c 	.word	0x0003021c

000d6aec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <newlib_impure_ptr_callback+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	0003021c 	.word	0x0003021c

000d6afc <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <strftime+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	0003021c 	.word	0x0003021c

000d6b0c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <localtime_r+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	0003021c 	.word	0x0003021c

000d6b1c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <gmtime_r+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	0003021c 	.word	0x0003021c

000d6b2c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <mktime+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	0003021c 	.word	0x0003021c

000d6b3c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6b3c:	2100      	movs	r1, #0
   d6b3e:	f7ff be9f 	b.w	d6880 <system_delay_ms>

000d6b42 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6b42:	b510      	push	{r4, lr}
      if (_M_empty())
   d6b44:	6883      	ldr	r3, [r0, #8]
   d6b46:	4604      	mov	r4, r0
   d6b48:	b90b      	cbnz	r3, d6b4e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6b4a:	f001 fada 	bl	d8102 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b4e:	68c3      	ldr	r3, [r0, #12]
   d6b50:	4798      	blx	r3
      if (_M_manager)
   d6b52:	68a3      	ldr	r3, [r4, #8]
   d6b54:	b11b      	cbz	r3, d6b5e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b56:	2203      	movs	r2, #3
   d6b58:	4621      	mov	r1, r4
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6b5e:	4620      	mov	r0, r4
   d6b60:	2110      	movs	r1, #16
}
   d6b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6b66:	f001 bac6 	b.w	d80f6 <_ZdlPvj>

000d6b6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b6a:	b510      	push	{r4, lr}
          _M_dispose();
   d6b6c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b6e:	4604      	mov	r4, r0
          _M_dispose();
   d6b70:	689b      	ldr	r3, [r3, #8]
   d6b72:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b74:	68a3      	ldr	r3, [r4, #8]
   d6b76:	3b01      	subs	r3, #1
   d6b78:	60a3      	str	r3, [r4, #8]
   d6b7a:	b92b      	cbnz	r3, d6b88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6b7c:	6823      	ldr	r3, [r4, #0]
   d6b7e:	4620      	mov	r0, r4
   d6b80:	68db      	ldr	r3, [r3, #12]
    }
   d6b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6b86:	4718      	bx	r3
    }
   d6b88:	bd10      	pop	{r4, pc}

000d6b8a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6b8a:	b510      	push	{r4, lr}
   d6b8c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b8e:	6800      	ldr	r0, [r0, #0]
   d6b90:	b108      	cbz	r0, d6b96 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6b92:	f7ff fcc3 	bl	d651c <os_mutex_recursive_destroy>
    }
   d6b96:	4620      	mov	r0, r4
   d6b98:	bd10      	pop	{r4, pc}

000d6b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6b9a:	680b      	ldr	r3, [r1, #0]
   d6b9c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6b9e:	b113      	cbz	r3, d6ba6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6ba0:	685a      	ldr	r2, [r3, #4]
   d6ba2:	3201      	adds	r2, #1
   d6ba4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6ba6:	4770      	bx	lr

000d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6ba8:	b510      	push	{r4, lr}
   d6baa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6bac:	6800      	ldr	r0, [r0, #0]
   d6bae:	b128      	cbz	r0, d6bbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6bb0:	6843      	ldr	r3, [r0, #4]
   d6bb2:	3b01      	subs	r3, #1
   d6bb4:	6043      	str	r3, [r0, #4]
   d6bb6:	b90b      	cbnz	r3, d6bbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6bb8:	f7ff ffd7 	bl	d6b6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	bd10      	pop	{r4, pc}

000d6bc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6bc0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6bc2:	4c06      	ldr	r4, [pc, #24]	; (d6bdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6bc4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6bc6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6bc8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6bca:	f7ff fc9f 	bl	d650c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6bce:	4620      	mov	r0, r4
   d6bd0:	4a03      	ldr	r2, [pc, #12]	; (d6be0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6bd2:	4904      	ldr	r1, [pc, #16]	; (d6be4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6bd8:	f001 ba88 	b.w	d80ec <__aeabi_atexit>
   d6bdc:	2003e5d8 	.word	0x2003e5d8
   d6be0:	2003e418 	.word	0x2003e418
   d6be4:	000d6b8b 	.word	0x000d6b8b

000d6be8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6be8:	2200      	movs	r2, #0
   d6bea:	6840      	ldr	r0, [r0, #4]
   d6bec:	4611      	mov	r1, r2
   d6bee:	f7ff bf0d 	b.w	d6a0c <network_ready>

000d6bf2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6bf2:	2200      	movs	r2, #0
   d6bf4:	6840      	ldr	r0, [r0, #4]
   d6bf6:	4611      	mov	r1, r2
   d6bf8:	f7ff bf28 	b.w	d6a4c <network_listening>

000d6bfc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6bfc:	2200      	movs	r2, #0
   d6bfe:	6840      	ldr	r0, [r0, #4]
   d6c00:	4611      	mov	r1, r2
   d6c02:	f7ff bf33 	b.w	d6a6c <network_get_listen_timeout>

000d6c06 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6c06:	6840      	ldr	r0, [r0, #4]
   d6c08:	2200      	movs	r2, #0
   d6c0a:	f7ff bf27 	b.w	d6a5c <network_set_listen_timeout>

000d6c0e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c0e:	6840      	ldr	r0, [r0, #4]
   d6c10:	2200      	movs	r2, #0
   d6c12:	f081 0101 	eor.w	r1, r1, #1
   d6c16:	f7ff bf11 	b.w	d6a3c <network_listen>

000d6c1a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6c1a:	2300      	movs	r3, #0
   d6c1c:	6840      	ldr	r0, [r0, #4]
   d6c1e:	461a      	mov	r2, r3
   d6c20:	4619      	mov	r1, r3
   d6c22:	f7ff bf03 	b.w	d6a2c <network_off>

000d6c26 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6c26:	2300      	movs	r3, #0
   d6c28:	6840      	ldr	r0, [r0, #4]
   d6c2a:	461a      	mov	r2, r3
   d6c2c:	4619      	mov	r1, r3
   d6c2e:	f7ff bef5 	b.w	d6a1c <network_on>

000d6c32 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6c32:	2200      	movs	r2, #0
   d6c34:	6840      	ldr	r0, [r0, #4]
   d6c36:	4611      	mov	r1, r2
   d6c38:	f7ff bed8 	b.w	d69ec <network_connecting>

000d6c3c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6c3c:	6840      	ldr	r0, [r0, #4]
   d6c3e:	2200      	movs	r2, #0
   d6c40:	2102      	movs	r1, #2
   d6c42:	f7ff bedb 	b.w	d69fc <network_disconnect>

000d6c46 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6c46:	2300      	movs	r3, #0
   d6c48:	6840      	ldr	r0, [r0, #4]
   d6c4a:	461a      	mov	r2, r3
   d6c4c:	f7ff bec6 	b.w	d69dc <network_connect>

000d6c50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6c50:	4b08      	ldr	r3, [pc, #32]	; (d6c74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6c52:	b510      	push	{r4, lr}
   d6c54:	2428      	movs	r4, #40	; 0x28
   d6c56:	4622      	mov	r2, r4
   d6c58:	4618      	mov	r0, r3
   d6c5a:	2100      	movs	r1, #0
   d6c5c:	f001 ffae 	bl	d8bbc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6c60:	4b05      	ldr	r3, [pc, #20]	; (d6c78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6c62:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6c68:	6042      	str	r2, [r0, #4]
   d6c6a:	2204      	movs	r2, #4
   d6c6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6c6e:	4a03      	ldr	r2, [pc, #12]	; (d6c7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6c70:	601a      	str	r2, [r3, #0]
   d6c72:	bd10      	pop	{r4, pc}
   d6c74:	2003e5e4 	.word	0x2003e5e4
   d6c78:	2003e5dc 	.word	0x2003e5dc
   d6c7c:	000db090 	.word	0x000db090

000d6c80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6c80:	4770      	bx	lr

000d6c82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6c82:	2000      	movs	r0, #0
   d6c84:	4770      	bx	lr

000d6c86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6c86:	b510      	push	{r4, lr}
   d6c88:	2110      	movs	r1, #16
   d6c8a:	4604      	mov	r4, r0
   d6c8c:	f001 fa33 	bl	d80f6 <_ZdlPvj>
   d6c90:	4620      	mov	r0, r4
   d6c92:	bd10      	pop	{r4, pc}

000d6c94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6c94:	b508      	push	{r3, lr}
      { delete this; }
   d6c96:	f7ff fff6 	bl	d6c86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6c9a:	bd08      	pop	{r3, pc}

000d6c9c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6c9c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6c9e:	2200      	movs	r2, #0
   d6ca0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6ca4:	6002      	str	r2, [r0, #0]
   d6ca6:	8084      	strh	r4, [r0, #4]
   d6ca8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6caa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6cac:	680c      	ldr	r4, [r1, #0]
   d6cae:	8085      	strh	r5, [r0, #4]
   d6cb0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cb2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6cb4:	bd30      	pop	{r4, r5, pc}

000d6cb6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6cb6:	b510      	push	{r4, lr}
   d6cb8:	4604      	mov	r4, r0
    free((void*)msg_);
   d6cba:	6800      	ldr	r0, [r0, #0]
   d6cbc:	f7ff fee6 	bl	d6a8c <free>
}
   d6cc0:	4620      	mov	r0, r4
   d6cc2:	bd10      	pop	{r4, pc}

000d6cc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6cc4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6cc6:	68c4      	ldr	r4, [r0, #12]
   d6cc8:	b1f4      	cbz	r4, d6d08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d6cca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6ccc:	2b02      	cmp	r3, #2
   d6cce:	d103      	bne.n	d6cd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6cd0:	f104 000c 	add.w	r0, r4, #12
   d6cd4:	f7ff ffef 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6cd8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6cda:	b135      	cbz	r5, d6cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6cdc:	4628      	mov	r0, r5
   d6cde:	f7fd fa95 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6ce2:	2110      	movs	r1, #16
   d6ce4:	4628      	mov	r0, r5
   d6ce6:	f001 fa06 	bl	d80f6 <_ZdlPvj>
   d6cea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6cec:	b135      	cbz	r5, d6cfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6cee:	4628      	mov	r0, r5
   d6cf0:	f7fd fa8c 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6cf4:	2110      	movs	r1, #16
   d6cf6:	4628      	mov	r0, r5
   d6cf8:	f001 f9fd 	bl	d80f6 <_ZdlPvj>
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	2114      	movs	r1, #20
   d6d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6d04:	f001 b9f7 	b.w	d80f6 <_ZdlPvj>
   d6d08:	bd38      	pop	{r3, r4, r5, pc}

000d6d0a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6d0a:	b510      	push	{r4, lr}
   d6d0c:	b088      	sub	sp, #32
   d6d0e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6d10:	4668      	mov	r0, sp
   d6d12:	f000 fd5a 	bl	d77ca <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6d16:	4669      	mov	r1, sp
   d6d18:	a804      	add	r0, sp, #16
   d6d1a:	f000 fd79 	bl	d7810 <_ZN6StringC1ERKS_>
   d6d1e:	a804      	add	r0, sp, #16
   d6d20:	47a0      	blx	r4
   d6d22:	4604      	mov	r4, r0
   d6d24:	a804      	add	r0, sp, #16
   d6d26:	f000 fd05 	bl	d7734 <_ZN6StringD1Ev>
    String p(param);
   d6d2a:	4668      	mov	r0, sp
   d6d2c:	f000 fd02 	bl	d7734 <_ZN6StringD1Ev>
}
   d6d30:	4620      	mov	r0, r4
   d6d32:	b008      	add	sp, #32
   d6d34:	bd10      	pop	{r4, pc}

000d6d36 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6d36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6d38:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6d3e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6d40:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6d42:	461a      	mov	r2, r3
   d6d44:	4669      	mov	r1, sp
   d6d46:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6d48:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6d4c:	f8ad 4000 	strh.w	r4, [sp]
   d6d50:	f7ff fdec 	bl	d692c <spark_function>
}
   d6d54:	b004      	add	sp, #16
   d6d56:	bd10      	pop	{r4, pc}

000d6d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d5a:	460e      	mov	r6, r1
   d6d5c:	4604      	mov	r4, r0
   d6d5e:	f856 3b04 	ldr.w	r3, [r6], #4
   d6d62:	9300      	str	r3, [sp, #0]
   d6d64:	460d      	mov	r5, r1
   d6d66:	a801      	add	r0, sp, #4
   d6d68:	4631      	mov	r1, r6
   d6d6a:	f7ff ff16 	bl	d6b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6d6e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6d70:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6d72:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6d74:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6d76:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6d78:	2300      	movs	r3, #0
   d6d7a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6d7c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6d7e:	f7ff ff13 	bl	d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d82:	4630      	mov	r0, r6
   d6d84:	f7ff ff10 	bl	d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6d88:	4628      	mov	r0, r5
   d6d8a:	2108      	movs	r1, #8
   d6d8c:	f001 f9b3 	bl	d80f6 <_ZdlPvj>
        return p;
    }
   d6d90:	4620      	mov	r0, r4
   d6d92:	b002      	add	sp, #8
   d6d94:	bd70      	pop	{r4, r5, r6, pc}

000d6d96 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6d96:	b513      	push	{r0, r1, r4, lr}
   d6d98:	460b      	mov	r3, r1
   d6d9a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d9c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6da0:	466c      	mov	r4, sp
   d6da2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6da6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6daa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6dae:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6db2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6db6:	b002      	add	sp, #8
   d6db8:	bd10      	pop	{r4, pc}

000d6dba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6dba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6dbc:	b510      	push	{r4, lr}
      if (_M_empty())
   d6dbe:	b90a      	cbnz	r2, d6dc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6dc0:	f001 f99f 	bl	d8102 <_ZSt25__throw_bad_function_callv>
    }
   d6dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6dc8:	68c3      	ldr	r3, [r0, #12]
   d6dca:	4718      	bx	r3

000d6dcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6dcc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6dce:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6dd0:	f100 0110 	add.w	r1, r0, #16
   d6dd4:	f7ff fff1 	bl	d6dba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6dd8:	bd08      	pop	{r3, pc}

000d6dda <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6dda:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6ddc:	b510      	push	{r4, lr}
      if (_M_empty())
   d6dde:	b90a      	cbnz	r2, d6de4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6de0:	f001 f98f 	bl	d8102 <_ZSt25__throw_bad_function_callv>
    }
   d6de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6de8:	68c3      	ldr	r3, [r0, #12]
   d6dea:	4718      	bx	r3

000d6dec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6dec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6dee:	6800      	ldr	r0, [r0, #0]
   d6df0:	f100 0110 	add.w	r1, r0, #16
   d6df4:	f7ff fff1 	bl	d6dda <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6df8:	bd08      	pop	{r3, pc}
	...

000d6dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6dfc:	b538      	push	{r3, r4, r5, lr}
   d6dfe:	2300      	movs	r3, #0
   d6e00:	4604      	mov	r4, r0
   d6e02:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6e04:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6e06:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6e08:	f7fd f945 	bl	d4096 <_Znwj>
   d6e0c:	b128      	cbz	r0, d6e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6e0e:	2301      	movs	r3, #1
   d6e10:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6e14:	4b02      	ldr	r3, [pc, #8]	; (d6e20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6e16:	6003      	str	r3, [r0, #0]
   d6e18:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6e1a:	6020      	str	r0, [r4, #0]
	}
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	bd38      	pop	{r3, r4, r5, pc}
   d6e20:	000db0c4 	.word	0x000db0c4

000d6e24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6e24:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6e26:	2300      	movs	r3, #0
   d6e28:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6e2a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6e2c:	4604      	mov	r4, r0
   d6e2e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6e30:	b12b      	cbz	r3, d6e3e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6e32:	2202      	movs	r2, #2
   d6e34:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6e36:	68eb      	ldr	r3, [r5, #12]
   d6e38:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6e3a:	68ab      	ldr	r3, [r5, #8]
   d6e3c:	60a3      	str	r3, [r4, #8]
    }
   d6e3e:	4620      	mov	r0, r4
   d6e40:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e46:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6e48:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6e4a:	4668      	mov	r0, sp
   d6e4c:	f7ff ff26 	bl	d6c9c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6e50:	f04f 0302 	mov.w	r3, #2
   d6e54:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6e58:	2a00      	cmp	r2, #0
   d6e5a:	d103      	bne.n	d6e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6e5c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6e60:	2900      	cmp	r1, #0
   d6e62:	d1f7      	bne.n	d6e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6e64:	d125      	bne.n	d6eb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6e66:	f104 050c 	add.w	r5, r4, #12
   d6e6a:	4669      	mov	r1, sp
   d6e6c:	4628      	mov	r0, r5
   d6e6e:	f7ff ff15 	bl	d6c9c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6e72:	f3bf 8f5b 	dmb	ish
   d6e76:	2301      	movs	r3, #1
   d6e78:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6e7a:	2000      	movs	r0, #0
   d6e7c:	f104 0308 	add.w	r3, r4, #8
   d6e80:	f3bf 8f5b 	dmb	ish
   d6e84:	e853 6f00 	ldrex	r6, [r3]
   d6e88:	e843 0200 	strex	r2, r0, [r3]
   d6e8c:	2a00      	cmp	r2, #0
   d6e8e:	d1f9      	bne.n	d6e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6e90:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6e94:	b16e      	cbz	r6, d6eb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6e96:	f7ff fd03 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6e9a:	b178      	cbz	r0, d6ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6e9c:	4629      	mov	r1, r5
   d6e9e:	4630      	mov	r0, r6
   d6ea0:	f7ff ff8b 	bl	d6dba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6ea4:	4630      	mov	r0, r6
   d6ea6:	f7fd f9b1 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6eaa:	2110      	movs	r1, #16
   d6eac:	4630      	mov	r0, r6
   d6eae:	f001 f922 	bl	d80f6 <_ZdlPvj>
        p_->setError(std::move(error));
   d6eb2:	4668      	mov	r0, sp
   d6eb4:	f7ff feff 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
    }
   d6eb8:	b009      	add	sp, #36	; 0x24
   d6eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6ebc:	4631      	mov	r1, r6
   d6ebe:	a802      	add	r0, sp, #8
   d6ec0:	f7ff ffb0 	bl	d6e24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6ec4:	68e0      	ldr	r0, [r4, #12]
   d6ec6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6eca:	b108      	cbz	r0, d6ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6ecc:	f001 feb4 	bl	d8c38 <strdup>
        type_(type) {
   d6ed0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6ed2:	2010      	movs	r0, #16
   d6ed4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6ed8:	f7fd f8dd 	bl	d4096 <_Znwj>
   d6edc:	4605      	mov	r5, r0
   d6ede:	b1e8      	cbz	r0, d6f1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6ee0:	2700      	movs	r7, #0
   d6ee2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ee4:	2018      	movs	r0, #24
   d6ee6:	f7fd f8d6 	bl	d4096 <_Znwj>
   d6eea:	4604      	mov	r4, r0
   d6eec:	b188      	cbz	r0, d6f12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6eee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6ef0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6ef2:	a802      	add	r0, sp, #8
   d6ef4:	f7ff ff4f 	bl	d6d96 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ef8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6efa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6efc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6efe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6f00:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6f02:	a906      	add	r1, sp, #24
   d6f04:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f06:	60e3      	str	r3, [r4, #12]
   d6f08:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6f0c:	9205      	str	r2, [sp, #20]
   d6f0e:	f7ff fec5 	bl	d6c9c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6f12:	4b08      	ldr	r3, [pc, #32]	; (d6f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6f14:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6f16:	4b08      	ldr	r3, [pc, #32]	; (d6f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6f18:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6f1a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6f1c:	a806      	add	r0, sp, #24
   d6f1e:	f7ff feca 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6f22:	a802      	add	r0, sp, #8
   d6f24:	f7fd f972 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6f28:	2200      	movs	r2, #0
   d6f2a:	4629      	mov	r1, r5
   d6f2c:	4803      	ldr	r0, [pc, #12]	; (d6f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6f2e:	f7ff fcbf 	bl	d68b0 <application_thread_invoke>
   d6f32:	e7b7      	b.n	d6ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6f34:	000d6dcd 	.word	0x000d6dcd
   d6f38:	000d7065 	.word	0x000d7065
   d6f3c:	000d6b43 	.word	0x000d6b43

000d6f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f44:	b08a      	sub	sp, #40	; 0x28
   d6f46:	4605      	mov	r5, r0
   d6f48:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6f4c:	460c      	mov	r4, r1
   d6f4e:	4617      	mov	r7, r2
   d6f50:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6f52:	f7ff fcfb 	bl	d694c <spark_cloud_flag_connected>
   d6f56:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6f58:	4682      	mov	sl, r0
   d6f5a:	bb38      	cbnz	r0, d6fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6f5c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6f60:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6f62:	a905      	add	r1, sp, #20
   d6f64:	4630      	mov	r0, r6
   d6f66:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f6a:	f7ff fe97 	bl	d6c9c <_ZN8particle5ErrorC1EOS0_>
   d6f6e:	2014      	movs	r0, #20
   d6f70:	f7fd f891 	bl	d4096 <_Znwj>
   d6f74:	4604      	mov	r4, r0
   d6f76:	b148      	cbz	r0, d6f8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6f78:	2302      	movs	r3, #2
   d6f7a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f7c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6f7e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f82:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6f84:	4631      	mov	r1, r6
   d6f86:	300c      	adds	r0, #12
   d6f88:	f7ff fe88 	bl	d6c9c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f8c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6f8e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f90:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6f94:	f7ff ff32 	bl	d6dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6f98:	4630      	mov	r0, r6
   d6f9a:	f7ff fe8c 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6f9e:	a805      	add	r0, sp, #20
   d6fa0:	f7ff fe89 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6fa4:	4628      	mov	r0, r5
   d6fa6:	b00a      	add	sp, #40	; 0x28
   d6fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6fac:	230c      	movs	r3, #12
   d6fae:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6fb2:	2014      	movs	r0, #20
   d6fb4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6fb8:	9307      	str	r3, [sp, #28]
   d6fba:	f7fd f86c 	bl	d4096 <_Znwj>
   d6fbe:	4601      	mov	r1, r0
   d6fc0:	b128      	cbz	r0, d6fce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6fc2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6fc6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6fca:	f880 a001 	strb.w	sl, [r0, #1]
   d6fce:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6fd0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6fd2:	f7ff ff13 	bl	d6dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6fd6:	4b22      	ldr	r3, [pc, #136]	; (d7060 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6fd8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6fda:	2008      	movs	r0, #8
   d6fdc:	f7fd f85b 	bl	d4096 <_Znwj>
   d6fe0:	4682      	mov	sl, r0
   d6fe2:	b128      	cbz	r0, d6ff0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6fe4:	9b03      	ldr	r3, [sp, #12]
   d6fe6:	f840 3b04 	str.w	r3, [r0], #4
   d6fea:	a904      	add	r1, sp, #16
   d6fec:	f7ff fdd5 	bl	d6b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6ff0:	9600      	str	r6, [sp, #0]
   d6ff2:	fa5f f389 	uxtb.w	r3, r9
   d6ff6:	4642      	mov	r2, r8
   d6ff8:	4639      	mov	r1, r7
   d6ffa:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6ffc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7000:	f7ff fcb4 	bl	d696c <spark_send_event>
   d7004:	b9b8      	cbnz	r0, d7036 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d7006:	9b03      	ldr	r3, [sp, #12]
   d7008:	785b      	ldrb	r3, [r3, #1]
   d700a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d700e:	b993      	cbnz	r3, d7036 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7010:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7014:	a905      	add	r1, sp, #20
   d7016:	a803      	add	r0, sp, #12
   d7018:	9205      	str	r2, [sp, #20]
   d701a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d701e:	f7ff ff11 	bl	d6e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7022:	a805      	add	r0, sp, #20
   d7024:	f7ff fe47 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7028:	a805      	add	r0, sp, #20
   d702a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d702c:	f7ff fe94 	bl	d6d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7030:	a806      	add	r0, sp, #24
   d7032:	f7ff fdb9 	bl	d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7036:	9b03      	ldr	r3, [sp, #12]
   d7038:	9305      	str	r3, [sp, #20]
   d703a:	a904      	add	r1, sp, #16
   d703c:	a806      	add	r0, sp, #24
   d703e:	f7ff fdac 	bl	d6b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7042:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7044:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7046:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7048:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d704a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d704c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d704e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7050:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7052:	f7ff fda9 	bl	d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7056:	a804      	add	r0, sp, #16
   d7058:	f7ff fda6 	bl	d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d705c:	e7a2      	b.n	d6fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d705e:	bf00      	nop
   d7060:	000d7129 	.word	0x000d7129

000d7064 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7064:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7068:	4605      	mov	r5, r0
	  switch (__op)
   d706a:	d007      	beq.n	d707c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d706c:	2a03      	cmp	r2, #3
   d706e:	d018      	beq.n	d70a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7070:	2a01      	cmp	r2, #1
   d7072:	d101      	bne.n	d7078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7074:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7076:	6003      	str	r3, [r0, #0]
	}
   d7078:	2000      	movs	r0, #0
   d707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d707c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d707e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7080:	f7fd f809 	bl	d4096 <_Znwj>
   d7084:	4604      	mov	r4, r0
   d7086:	b150      	cbz	r0, d709e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7088:	4631      	mov	r1, r6
   d708a:	f7ff fecb 	bl	d6e24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d708e:	6930      	ldr	r0, [r6, #16]
   d7090:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7094:	b108      	cbz	r0, d709a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7096:	f001 fdcf 	bl	d8c38 <strdup>
        type_(type) {
   d709a:	6120      	str	r0, [r4, #16]
   d709c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d709e:	602c      	str	r4, [r5, #0]
	}
   d70a0:	e7ea      	b.n	d7078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d70a2:	6804      	ldr	r4, [r0, #0]
   d70a4:	2c00      	cmp	r4, #0
   d70a6:	d0e7      	beq.n	d7078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d70a8:	f104 0010 	add.w	r0, r4, #16
   d70ac:	f7ff fe03 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d70b0:	4620      	mov	r0, r4
   d70b2:	f7fd f8ab 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d70b6:	2118      	movs	r1, #24
   d70b8:	4620      	mov	r0, r4
   d70ba:	f001 f81c 	bl	d80f6 <_ZdlPvj>
   d70be:	e7db      	b.n	d7078 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d70c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d70c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d70c2:	2300      	movs	r3, #0
   d70c4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d70c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d70c8:	4604      	mov	r4, r0
   d70ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d70cc:	b12b      	cbz	r3, d70da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d70ce:	2202      	movs	r2, #2
   d70d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d70d2:	68eb      	ldr	r3, [r5, #12]
   d70d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d70d6:	68ab      	ldr	r3, [r5, #8]
   d70d8:	60a3      	str	r3, [r4, #8]
    }
   d70da:	4620      	mov	r0, r4
   d70dc:	bd38      	pop	{r3, r4, r5, pc}

000d70de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d70de:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d70e0:	b570      	push	{r4, r5, r6, lr}
   d70e2:	4604      	mov	r4, r0
	  switch (__op)
   d70e4:	d007      	beq.n	d70f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d70e6:	2a03      	cmp	r2, #3
   d70e8:	d012      	beq.n	d7110 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d70ea:	2a01      	cmp	r2, #1
   d70ec:	d101      	bne.n	d70f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d70ee:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d70f0:	6003      	str	r3, [r0, #0]
	}
   d70f2:	2000      	movs	r0, #0
   d70f4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d70f6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d70f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d70fa:	f7fc ffcc 	bl	d4096 <_Znwj>
   d70fe:	4605      	mov	r5, r0
   d7100:	b120      	cbz	r0, d710c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7102:	4631      	mov	r1, r6
   d7104:	f7ff ffdc 	bl	d70c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7108:	7c33      	ldrb	r3, [r6, #16]
   d710a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d710c:	6025      	str	r5, [r4, #0]
	}
   d710e:	e7f0      	b.n	d70f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7110:	6804      	ldr	r4, [r0, #0]
   d7112:	2c00      	cmp	r4, #0
   d7114:	d0ed      	beq.n	d70f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7116:	4620      	mov	r0, r4
   d7118:	f7fd f878 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d711c:	2114      	movs	r1, #20
   d711e:	4620      	mov	r0, r4
   d7120:	f000 ffe9 	bl	d80f6 <_ZdlPvj>
   d7124:	e7e5      	b.n	d70f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7128 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7128:	b5f0      	push	{r4, r5, r6, r7, lr}
   d712a:	b089      	sub	sp, #36	; 0x24
   d712c:	4604      	mov	r4, r0
   d712e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7130:	a801      	add	r0, sp, #4
   d7132:	4611      	mov	r1, r2
   d7134:	f7ff fe10 	bl	d6d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7138:	b1a4      	cbz	r4, d7164 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d713a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d713c:	b11d      	cbz	r5, d7146 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d713e:	4628      	mov	r0, r5
   d7140:	f001 fd7a 	bl	d8c38 <strdup>
   d7144:	4605      	mov	r5, r0
   d7146:	a801      	add	r0, sp, #4
   d7148:	a903      	add	r1, sp, #12
        type_(type) {
   d714a:	9503      	str	r5, [sp, #12]
   d714c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7150:	f7ff fe78 	bl	d6e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7154:	a803      	add	r0, sp, #12
   d7156:	f7ff fdae 	bl	d6cb6 <_ZN8particle5ErrorD1Ev>
   d715a:	a802      	add	r0, sp, #8
   d715c:	f7ff fd24 	bl	d6ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7160:	b009      	add	sp, #36	; 0x24
   d7162:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7164:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7166:	2301      	movs	r3, #1
   d7168:	e8d5 2f4f 	ldrexb	r2, [r5]
   d716c:	2a00      	cmp	r2, #0
   d716e:	d103      	bne.n	d7178 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7170:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7174:	2900      	cmp	r1, #0
   d7176:	d1f7      	bne.n	d7168 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7178:	d1ef      	bne.n	d715a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d717a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d717c:	f3bf 8f5b 	dmb	ish
   d7180:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7182:	1d2b      	adds	r3, r5, #4
   d7184:	f3bf 8f5b 	dmb	ish
   d7188:	e853 6f00 	ldrex	r6, [r3]
   d718c:	e843 4200 	strex	r2, r4, [r3]
   d7190:	2a00      	cmp	r2, #0
   d7192:	d1f9      	bne.n	d7188 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7194:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7198:	2e00      	cmp	r6, #0
   d719a:	d0de      	beq.n	d715a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d719c:	4620      	mov	r0, r4
   d719e:	f7ff fb7f 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d71a2:	4607      	mov	r7, r0
   d71a4:	b160      	cbz	r0, d71c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d71a6:	f105 010c 	add.w	r1, r5, #12
   d71aa:	4630      	mov	r0, r6
   d71ac:	f7ff fe15 	bl	d6dda <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d71b0:	4630      	mov	r0, r6
   d71b2:	f7fd f82b 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d71b6:	2110      	movs	r1, #16
   d71b8:	4630      	mov	r0, r6
   d71ba:	f000 ff9c 	bl	d80f6 <_ZdlPvj>
   d71be:	e7cc      	b.n	d715a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d71c0:	4631      	mov	r1, r6
   d71c2:	a803      	add	r0, sp, #12
   d71c4:	f7ff ff7c 	bl	d70c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d71c8:	7b2b      	ldrb	r3, [r5, #12]
   d71ca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d71ce:	2010      	movs	r0, #16
   d71d0:	f7fc ff61 	bl	d4096 <_Znwj>
   d71d4:	4605      	mov	r5, r0
   d71d6:	b1d0      	cbz	r0, d720e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d71d8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d71da:	2014      	movs	r0, #20
   d71dc:	f7fc ff5b 	bl	d4096 <_Znwj>
   d71e0:	4604      	mov	r4, r0
   d71e2:	b178      	cbz	r0, d7204 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d71e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d71e6:	4601      	mov	r1, r0
   d71e8:	a803      	add	r0, sp, #12
   d71ea:	f7ff fdd4 	bl	d6d96 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d71f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d71f2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71f4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d71f6:	9205      	str	r2, [sp, #20]
   d71f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d71fa:	60e3      	str	r3, [r4, #12]
   d71fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7200:	9206      	str	r2, [sp, #24]
   d7202:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7204:	4b06      	ldr	r3, [pc, #24]	; (d7220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7206:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7208:	4b06      	ldr	r3, [pc, #24]	; (d7224 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d720a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d720c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d720e:	a803      	add	r0, sp, #12
   d7210:	f7fc fffc 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7214:	2200      	movs	r2, #0
   d7216:	4629      	mov	r1, r5
   d7218:	4803      	ldr	r0, [pc, #12]	; (d7228 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d721a:	f7ff fb49 	bl	d68b0 <application_thread_invoke>
   d721e:	e7c7      	b.n	d71b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7220:	000d6ded 	.word	0x000d6ded
   d7224:	000d70df 	.word	0x000d70df
   d7228:	000d6b43 	.word	0x000d6b43

000d722c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d722c:	2200      	movs	r2, #0
   d722e:	6840      	ldr	r0, [r0, #4]
   d7230:	4611      	mov	r1, r2
   d7232:	f7ff bc0b 	b.w	d6a4c <network_listening>

000d7236 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7236:	2200      	movs	r2, #0
   d7238:	6840      	ldr	r0, [r0, #4]
   d723a:	4611      	mov	r1, r2
   d723c:	f7ff bc16 	b.w	d6a6c <network_get_listen_timeout>

000d7240 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7240:	6840      	ldr	r0, [r0, #4]
   d7242:	2200      	movs	r2, #0
   d7244:	f7ff bc0a 	b.w	d6a5c <network_set_listen_timeout>

000d7248 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7248:	6840      	ldr	r0, [r0, #4]
   d724a:	2200      	movs	r2, #0
   d724c:	f081 0101 	eor.w	r1, r1, #1
   d7250:	f7ff bbf4 	b.w	d6a3c <network_listen>

000d7254 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7254:	2300      	movs	r3, #0
   d7256:	6840      	ldr	r0, [r0, #4]
   d7258:	461a      	mov	r2, r3
   d725a:	4619      	mov	r1, r3
   d725c:	f7ff bbe6 	b.w	d6a2c <network_off>

000d7260 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7260:	2300      	movs	r3, #0
   d7262:	6840      	ldr	r0, [r0, #4]
   d7264:	461a      	mov	r2, r3
   d7266:	4619      	mov	r1, r3
   d7268:	f7ff bbd8 	b.w	d6a1c <network_on>

000d726c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d726c:	2200      	movs	r2, #0
   d726e:	6840      	ldr	r0, [r0, #4]
   d7270:	4611      	mov	r1, r2
   d7272:	f7ff bbcb 	b.w	d6a0c <network_ready>

000d7276 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7276:	2200      	movs	r2, #0
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	4611      	mov	r1, r2
   d727c:	f7ff bbb6 	b.w	d69ec <network_connecting>

000d7280 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7280:	6840      	ldr	r0, [r0, #4]
   d7282:	2200      	movs	r2, #0
   d7284:	2102      	movs	r1, #2
   d7286:	f7ff bbb9 	b.w	d69fc <network_disconnect>

000d728a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d728a:	2300      	movs	r3, #0
   d728c:	6840      	ldr	r0, [r0, #4]
   d728e:	461a      	mov	r2, r3
   d7290:	f7ff bba4 	b.w	d69dc <network_connect>

000d7294 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7294:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7296:	2203      	movs	r2, #3
   d7298:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d729a:	4a02      	ldr	r2, [pc, #8]	; (d72a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d729c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d729e:	4770      	bx	lr
   d72a0:	2003e60c 	.word	0x2003e60c
   d72a4:	000db0e0 	.word	0x000db0e0

000d72a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d72a8:	4770      	bx	lr

000d72aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d72aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72ac:	4606      	mov	r6, r0
   d72ae:	4615      	mov	r5, r2
   d72b0:	460c      	mov	r4, r1
   d72b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72b4:	42bc      	cmp	r4, r7
   d72b6:	d006      	beq.n	d72c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d72b8:	6833      	ldr	r3, [r6, #0]
   d72ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d72be:	689b      	ldr	r3, [r3, #8]
   d72c0:	4630      	mov	r0, r6
   d72c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d72c4:	e7f6      	b.n	d72b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d72c6:	4628      	mov	r0, r5
   d72c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d72ca:	7c00      	ldrb	r0, [r0, #16]
   d72cc:	2200      	movs	r2, #0
   d72ce:	f7ff b9c5 	b.w	d665c <hal_i2c_write>

000d72d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d72d2:	7c00      	ldrb	r0, [r0, #16]
   d72d4:	2100      	movs	r1, #0
   d72d6:	f7ff b9c9 	b.w	d666c <hal_i2c_available>

000d72da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d72da:	7c00      	ldrb	r0, [r0, #16]
   d72dc:	2100      	movs	r1, #0
   d72de:	f7ff b9cd 	b.w	d667c <hal_i2c_read>

000d72e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d72e2:	7c00      	ldrb	r0, [r0, #16]
   d72e4:	2100      	movs	r1, #0
   d72e6:	f7ff b9d1 	b.w	d668c <hal_i2c_peek>

000d72ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d72ea:	7c00      	ldrb	r0, [r0, #16]
   d72ec:	2100      	movs	r1, #0
   d72ee:	f7ff b9d5 	b.w	d669c <hal_i2c_flush>

000d72f2 <_ZN7TwoWireD0Ev>:
   d72f2:	b510      	push	{r4, lr}
   d72f4:	2114      	movs	r1, #20
   d72f6:	4604      	mov	r4, r0
   d72f8:	f000 fefd 	bl	d80f6 <_ZdlPvj>
   d72fc:	4620      	mov	r0, r4
   d72fe:	bd10      	pop	{r4, pc}

000d7300 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7300:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7306:	4604      	mov	r4, r0
   d7308:	4608      	mov	r0, r1
   d730a:	2100      	movs	r1, #0
   d730c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7310:	4b03      	ldr	r3, [pc, #12]	; (d7320 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7312:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7314:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7316:	4611      	mov	r1, r2
   d7318:	f7ff f9d0 	bl	d66bc <hal_i2c_init>
}
   d731c:	4620      	mov	r0, r4
   d731e:	bd10      	pop	{r4, pc}
   d7320:	000db114 	.word	0x000db114

000d7324 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7324:	2300      	movs	r3, #0
   d7326:	7c00      	ldrb	r0, [r0, #16]
   d7328:	461a      	mov	r2, r3
   d732a:	4619      	mov	r1, r3
   d732c:	f7ff b97e 	b.w	d662c <hal_i2c_begin>

000d7330 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7332:	2200      	movs	r2, #0
   d7334:	2314      	movs	r3, #20
   d7336:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d733a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d733e:	780b      	ldrb	r3, [r1, #0]
   d7340:	f88d 3008 	strb.w	r3, [sp, #8]
   d7344:	684b      	ldr	r3, [r1, #4]
   d7346:	9303      	str	r3, [sp, #12]
   d7348:	68cb      	ldr	r3, [r1, #12]
   d734a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d734c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d734e:	7a0b      	ldrb	r3, [r1, #8]
   d7350:	9305      	str	r3, [sp, #20]
   d7352:	a901      	add	r1, sp, #4
   d7354:	f7ff f9ca 	bl	d66ec <hal_i2c_request_ex>
}
   d7358:	b007      	add	sp, #28
   d735a:	f85d fb04 	ldr.w	pc, [sp], #4

000d735e <_ZN7TwoWire11requestFromEhjh>:
{
   d735e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7360:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7362:	f88d 1000 	strb.w	r1, [sp]
   d7366:	f04f 0164 	mov.w	r1, #100	; 0x64
   d736a:	9103      	str	r1, [sp, #12]
   d736c:	bf18      	it	ne
   d736e:	2301      	movne	r3, #1
   d7370:	4669      	mov	r1, sp
    size_ = size;
   d7372:	9201      	str	r2, [sp, #4]
   d7374:	f88d 3008 	strb.w	r3, [sp, #8]
   d7378:	f7ff ffda 	bl	d7330 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d737c:	b005      	add	sp, #20
   d737e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7382 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7382:	2301      	movs	r3, #1
   d7384:	f7ff bfeb 	b.w	d735e <_ZN7TwoWire11requestFromEhjh>

000d7388 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7388:	7c00      	ldrb	r0, [r0, #16]
   d738a:	2200      	movs	r2, #0
   d738c:	f7ff b956 	b.w	d663c <hal_i2c_begin_transmission>

000d7390 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7390:	b2c9      	uxtb	r1, r1
   d7392:	f7ff bff9 	b.w	d7388 <_ZN7TwoWire17beginTransmissionEh>

000d7396 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7396:	7c00      	ldrb	r0, [r0, #16]
   d7398:	2200      	movs	r2, #0
   d739a:	f7ff b957 	b.w	d664c <hal_i2c_end_transmission>

000d739e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d739e:	2101      	movs	r1, #1
   d73a0:	f7ff bff9 	b.w	d7396 <_ZN7TwoWire15endTransmissionEh>

000d73a4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d73a4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d73a6:	2100      	movs	r1, #0
   d73a8:	7c00      	ldrb	r0, [r0, #16]
   d73aa:	f7ff f98f 	bl	d66cc <hal_i2c_lock>
}
   d73ae:	fab0 f080 	clz	r0, r0
   d73b2:	0940      	lsrs	r0, r0, #5
   d73b4:	bd08      	pop	{r3, pc}

000d73b6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d73b6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d73b8:	2100      	movs	r1, #0
   d73ba:	7c00      	ldrb	r0, [r0, #16]
   d73bc:	f7ff f98e 	bl	d66dc <hal_i2c_unlock>
}
   d73c0:	fab0 f080 	clz	r0, r0
   d73c4:	0940      	lsrs	r0, r0, #5
   d73c6:	bd08      	pop	{r3, pc}

000d73c8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d73c8:	4700      	bx	r0
	...

000d73cc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d73cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d73d0:	2400      	movs	r4, #0
{
   d73d2:	461d      	mov	r5, r3
   d73d4:	460f      	mov	r7, r1
   d73d6:	4690      	mov	r8, r2
   d73d8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d73da:	f7ff f91f 	bl	d661c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d73de:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d73e0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d73e4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d73e8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d73ec:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d73f0:	bfa2      	ittt	ge
   d73f2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d73f6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d73fa:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d73fc:	4907      	ldr	r1, [pc, #28]	; (d741c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d73fe:	9400      	str	r4, [sp, #0]
   d7400:	4643      	mov	r3, r8
   d7402:	463a      	mov	r2, r7
   d7404:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7406:	bfa8      	it	ge
   d7408:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d740c:	f7ff f8fe 	bl	d660c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7410:	fab0 f080 	clz	r0, r0
   d7414:	0940      	lsrs	r0, r0, #5
   d7416:	b004      	add	sp, #16
   d7418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d741c:	000d73c9 	.word	0x000d73c9

000d7420 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7420:	4770      	bx	lr

000d7422 <_ZN9IPAddressD0Ev>:
   d7422:	b510      	push	{r4, lr}
   d7424:	2118      	movs	r1, #24
   d7426:	4604      	mov	r4, r0
   d7428:	f000 fe65 	bl	d80f6 <_ZdlPvj>
   d742c:	4620      	mov	r0, r4
   d742e:	bd10      	pop	{r4, pc}

000d7430 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7430:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7432:	7d03      	ldrb	r3, [r0, #20]
   d7434:	2b06      	cmp	r3, #6
{
   d7436:	b08d      	sub	sp, #52	; 0x34
   d7438:	460e      	mov	r6, r1
   d743a:	f100 0704 	add.w	r7, r0, #4
   d743e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7442:	d012      	beq.n	d746a <_ZNK9IPAddress7printToER5Print+0x3a>
   d7444:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7448:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d744c:	220a      	movs	r2, #10
   d744e:	4630      	mov	r0, r6
   d7450:	f000 f933 	bl	d76ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7454:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7456:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7458:	d019      	beq.n	d748e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d745a:	2c00      	cmp	r4, #0
   d745c:	d0f4      	beq.n	d7448 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d745e:	212e      	movs	r1, #46	; 0x2e
   d7460:	4630      	mov	r0, r6
   d7462:	f000 f927 	bl	d76b4 <_ZN5Print5printEc>
   d7466:	4404      	add	r4, r0
   d7468:	e7ee      	b.n	d7448 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d746a:	232f      	movs	r3, #47	; 0x2f
   d746c:	466a      	mov	r2, sp
   d746e:	4639      	mov	r1, r7
   d7470:	200a      	movs	r0, #10
		buf[0] = 0;
   d7472:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7476:	f7ff f941 	bl	d66fc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d747a:	4668      	mov	r0, sp
   d747c:	f001 fbf9 	bl	d8c72 <strlen>
   d7480:	6833      	ldr	r3, [r6, #0]
   d7482:	4602      	mov	r2, r0
   d7484:	68db      	ldr	r3, [r3, #12]
   d7486:	4669      	mov	r1, sp
   d7488:	4630      	mov	r0, r6
   d748a:	4798      	blx	r3
   d748c:	4604      	mov	r4, r0
    }
    return n;
}
   d748e:	4620      	mov	r0, r4
   d7490:	b00d      	add	sp, #52	; 0x34
   d7492:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7494 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7494:	b510      	push	{r4, lr}
   d7496:	4b05      	ldr	r3, [pc, #20]	; (d74ac <_ZN9IPAddressC1Ev+0x18>)
   d7498:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d749a:	2211      	movs	r2, #17
   d749c:	f840 3b04 	str.w	r3, [r0], #4
   d74a0:	2100      	movs	r1, #0
   d74a2:	f001 fb8b 	bl	d8bbc <memset>
}
   d74a6:	4620      	mov	r0, r4
   d74a8:	bd10      	pop	{r4, pc}
   d74aa:	bf00      	nop
   d74ac:	000db13c 	.word	0x000db13c

000d74b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d74b0:	4603      	mov	r3, r0
   d74b2:	4a07      	ldr	r2, [pc, #28]	; (d74d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d74b4:	b510      	push	{r4, lr}
   d74b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d74ba:	f101 0210 	add.w	r2, r1, #16
   d74be:	f851 4b04 	ldr.w	r4, [r1], #4
   d74c2:	f843 4b04 	str.w	r4, [r3], #4
   d74c6:	4291      	cmp	r1, r2
   d74c8:	d1f9      	bne.n	d74be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d74ca:	780a      	ldrb	r2, [r1, #0]
   d74cc:	701a      	strb	r2, [r3, #0]
}
   d74ce:	bd10      	pop	{r4, pc}
   d74d0:	000db13c 	.word	0x000db13c

000d74d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d74d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d74d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d74da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d74de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d74e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d74e6:	2304      	movs	r3, #4
   d74e8:	6041      	str	r1, [r0, #4]
   d74ea:	7503      	strb	r3, [r0, #20]
}
   d74ec:	bd10      	pop	{r4, pc}

000d74ee <_ZN9IPAddressaSEPKh>:
{
   d74ee:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d74f0:	78cb      	ldrb	r3, [r1, #3]
   d74f2:	9300      	str	r3, [sp, #0]
   d74f4:	788b      	ldrb	r3, [r1, #2]
   d74f6:	784a      	ldrb	r2, [r1, #1]
   d74f8:	7809      	ldrb	r1, [r1, #0]
   d74fa:	f7ff ffeb 	bl	d74d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d74fe:	b002      	add	sp, #8
   d7500:	bd10      	pop	{r4, pc}
	...

000d7504 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7504:	4b01      	ldr	r3, [pc, #4]	; (d750c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7506:	4a02      	ldr	r2, [pc, #8]	; (d7510 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7508:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d750a:	4770      	bx	lr
   d750c:	2003e614 	.word	0x2003e614
   d7510:	000db148 	.word	0x000db148

000d7514 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7514:	2300      	movs	r3, #0
   d7516:	6840      	ldr	r0, [r0, #4]
   d7518:	461a      	mov	r2, r3
   d751a:	f7ff ba5f 	b.w	d69dc <network_connect>

000d751e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d751e:	6840      	ldr	r0, [r0, #4]
   d7520:	2200      	movs	r2, #0
   d7522:	2102      	movs	r1, #2
   d7524:	f7ff ba6a 	b.w	d69fc <network_disconnect>

000d7528 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7528:	2200      	movs	r2, #0
   d752a:	6840      	ldr	r0, [r0, #4]
   d752c:	4611      	mov	r1, r2
   d752e:	f7ff ba5d 	b.w	d69ec <network_connecting>

000d7532 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7532:	2200      	movs	r2, #0
   d7534:	6840      	ldr	r0, [r0, #4]
   d7536:	4611      	mov	r1, r2
   d7538:	f7ff ba68 	b.w	d6a0c <network_ready>

000d753c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d753c:	2300      	movs	r3, #0
   d753e:	6840      	ldr	r0, [r0, #4]
   d7540:	461a      	mov	r2, r3
   d7542:	4619      	mov	r1, r3
   d7544:	f7ff ba6a 	b.w	d6a1c <network_on>

000d7548 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7548:	2300      	movs	r3, #0
   d754a:	6840      	ldr	r0, [r0, #4]
   d754c:	461a      	mov	r2, r3
   d754e:	4619      	mov	r1, r3
   d7550:	f7ff ba6c 	b.w	d6a2c <network_off>

000d7554 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7554:	6840      	ldr	r0, [r0, #4]
   d7556:	2200      	movs	r2, #0
   d7558:	f081 0101 	eor.w	r1, r1, #1
   d755c:	f7ff ba6e 	b.w	d6a3c <network_listen>

000d7560 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7560:	6840      	ldr	r0, [r0, #4]
   d7562:	2200      	movs	r2, #0
   d7564:	f7ff ba7a 	b.w	d6a5c <network_set_listen_timeout>

000d7568 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7568:	2200      	movs	r2, #0
   d756a:	6840      	ldr	r0, [r0, #4]
   d756c:	4611      	mov	r1, r2
   d756e:	f7ff ba7d 	b.w	d6a6c <network_get_listen_timeout>

000d7572 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7572:	2200      	movs	r2, #0
   d7574:	6840      	ldr	r0, [r0, #4]
   d7576:	4611      	mov	r1, r2
   d7578:	f7ff ba68 	b.w	d6a4c <network_listening>

000d757c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d757c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7580:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7582:	b095      	sub	sp, #84	; 0x54
   d7584:	4616      	mov	r6, r2
   d7586:	460d      	mov	r5, r1
   d7588:	4607      	mov	r7, r0
    IPAddress addr;
   d758a:	f7ff ff83 	bl	d7494 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d758e:	4621      	mov	r1, r4
   d7590:	2218      	movs	r2, #24
   d7592:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7594:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7596:	f001 fb11 	bl	d8bbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d759a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d759c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d75a0:	4621      	mov	r1, r4
   d75a2:	466b      	mov	r3, sp
   d75a4:	aa0c      	add	r2, sp, #48	; 0x30
   d75a6:	4630      	mov	r0, r6
   d75a8:	f7ff f8b8 	bl	d671c <netdb_getaddrinfo>
    if (!r) {
   d75ac:	4604      	mov	r4, r0
   d75ae:	2800      	cmp	r0, #0
   d75b0:	d146      	bne.n	d7640 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75b2:	4602      	mov	r2, r0
   d75b4:	2101      	movs	r1, #1
   d75b6:	6868      	ldr	r0, [r5, #4]
   d75b8:	f7ff fa28 	bl	d6a0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75c0:	4622      	mov	r2, r4
   d75c2:	6868      	ldr	r0, [r5, #4]
   d75c4:	f7ff fa22 	bl	d6a0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75ca:	4681      	mov	r9, r0
        bool ok = false;
   d75cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75ce:	2e00      	cmp	r6, #0
   d75d0:	d036      	beq.n	d7640 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d75d2:	2900      	cmp	r1, #0
   d75d4:	d134      	bne.n	d7640 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d75d6:	6873      	ldr	r3, [r6, #4]
   d75d8:	2b02      	cmp	r3, #2
   d75da:	d003      	beq.n	d75e4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d75dc:	2b0a      	cmp	r3, #10
   d75de:	d00b      	beq.n	d75f8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75e0:	69f6      	ldr	r6, [r6, #28]
   d75e2:	e7f4      	b.n	d75ce <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d75e4:	f1b8 0f00 	cmp.w	r8, #0
   d75e8:	d004      	beq.n	d75f4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d75ea:	6971      	ldr	r1, [r6, #20]
   d75ec:	4638      	mov	r0, r7
   d75ee:	3104      	adds	r1, #4
   d75f0:	f7ff ff7d 	bl	d74ee <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d75f4:	4641      	mov	r1, r8
   d75f6:	e7f3      	b.n	d75e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d75f8:	f1b9 0f00 	cmp.w	r9, #0
   d75fc:	d101      	bne.n	d7602 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d75fe:	4649      	mov	r1, r9
   d7600:	e7ee      	b.n	d75e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7602:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7604:	2210      	movs	r2, #16
   d7606:	a801      	add	r0, sp, #4
   d7608:	f001 fad8 	bl	d8bbc <memset>
                    a.v = 6;
   d760c:	2306      	movs	r3, #6
   d760e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7612:	ad01      	add	r5, sp, #4
   d7614:	f104 0308 	add.w	r3, r4, #8
   d7618:	3418      	adds	r4, #24
   d761a:	6818      	ldr	r0, [r3, #0]
   d761c:	6859      	ldr	r1, [r3, #4]
   d761e:	462a      	mov	r2, r5
   d7620:	c203      	stmia	r2!, {r0, r1}
   d7622:	3308      	adds	r3, #8
   d7624:	42a3      	cmp	r3, r4
   d7626:	4615      	mov	r5, r2
   d7628:	d1f7      	bne.n	d761a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d762a:	a901      	add	r1, sp, #4
   d762c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d762e:	ad07      	add	r5, sp, #28
   d7630:	f7ff ff3e 	bl	d74b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7636:	1d3c      	adds	r4, r7, #4
   d7638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d763a:	682b      	ldr	r3, [r5, #0]
   d763c:	7023      	strb	r3, [r4, #0]
   d763e:	e7de      	b.n	d75fe <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7640:	9800      	ldr	r0, [sp, #0]
   d7642:	f7ff f863 	bl	d670c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7646:	4638      	mov	r0, r7
   d7648:	b015      	add	sp, #84	; 0x54
   d764a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7650 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7650:	4b02      	ldr	r3, [pc, #8]	; (d765c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7652:	4a03      	ldr	r2, [pc, #12]	; (d7660 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7654:	601a      	str	r2, [r3, #0]
   d7656:	2200      	movs	r2, #0
   d7658:	605a      	str	r2, [r3, #4]

} // spark
   d765a:	4770      	bx	lr
   d765c:	2003e618 	.word	0x2003e618
   d7660:	000db154 	.word	0x000db154

000d7664 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7666:	4606      	mov	r6, r0
   d7668:	460d      	mov	r5, r1
  size_t n = 0;
   d766a:	188f      	adds	r7, r1, r2
   d766c:	2400      	movs	r4, #0
  while (size--) {
   d766e:	42bd      	cmp	r5, r7
   d7670:	d00c      	beq.n	d768c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7672:	6833      	ldr	r3, [r6, #0]
   d7674:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7678:	689b      	ldr	r3, [r3, #8]
   d767a:	4630      	mov	r0, r6
   d767c:	4798      	blx	r3
     if (chunk>=0)
   d767e:	1e03      	subs	r3, r0, #0
   d7680:	db01      	blt.n	d7686 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7682:	441c      	add	r4, r3
  while (size--) {
   d7684:	e7f3      	b.n	d766e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7686:	2c00      	cmp	r4, #0
   d7688:	bf08      	it	eq
   d768a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d768c:	4620      	mov	r0, r4
   d768e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7690 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7690:	b513      	push	{r0, r1, r4, lr}
   d7692:	4604      	mov	r4, r0
    }
   d7694:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7696:	b159      	cbz	r1, d76b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7698:	9101      	str	r1, [sp, #4]
   d769a:	f001 faea 	bl	d8c72 <strlen>
   d769e:	6823      	ldr	r3, [r4, #0]
   d76a0:	9901      	ldr	r1, [sp, #4]
   d76a2:	68db      	ldr	r3, [r3, #12]
   d76a4:	4602      	mov	r2, r0
   d76a6:	4620      	mov	r0, r4
    }
   d76a8:	b002      	add	sp, #8
   d76aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d76ae:	4718      	bx	r3
    }
   d76b0:	b002      	add	sp, #8
   d76b2:	bd10      	pop	{r4, pc}

000d76b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d76b4:	6803      	ldr	r3, [r0, #0]
   d76b6:	689b      	ldr	r3, [r3, #8]
   d76b8:	4718      	bx	r3

000d76ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76ba:	b530      	push	{r4, r5, lr}
   d76bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d76be:	2300      	movs	r3, #0
   d76c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d76c4:	2a01      	cmp	r2, #1
   d76c6:	bf98      	it	ls
   d76c8:	220a      	movls	r2, #10
   d76ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d76cc:	460d      	mov	r5, r1
   d76ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d76d2:	fb01 5312 	mls	r3, r1, r2, r5
   d76d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76da:	2b09      	cmp	r3, #9
   d76dc:	bf94      	ite	ls
   d76de:	3330      	addls	r3, #48	; 0x30
   d76e0:	3337      	addhi	r3, #55	; 0x37
   d76e2:	b2db      	uxtb	r3, r3
  } while(n);
   d76e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d76ea:	d9ef      	bls.n	d76cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d76ec:	4621      	mov	r1, r4
   d76ee:	f7ff ffcf 	bl	d7690 <_ZN5Print5writeEPKc>
}
   d76f2:	b00b      	add	sp, #44	; 0x2c
   d76f4:	bd30      	pop	{r4, r5, pc}

000d76f6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d76f6:	b510      	push	{r4, lr}
   d76f8:	4604      	mov	r4, r0
   d76fa:	f7fc fd87 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d76fe:	4620      	mov	r0, r4
   d7700:	bd10      	pop	{r4, pc}
	...

000d7704 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7704:	4803      	ldr	r0, [pc, #12]	; (d7714 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7706:	4a04      	ldr	r2, [pc, #16]	; (d7718 <_GLOBAL__sub_I_RGB+0x14>)
   d7708:	4904      	ldr	r1, [pc, #16]	; (d771c <_GLOBAL__sub_I_RGB+0x18>)
   d770a:	2300      	movs	r3, #0
   d770c:	6083      	str	r3, [r0, #8]
   d770e:	f000 bced 	b.w	d80ec <__aeabi_atexit>
   d7712:	bf00      	nop
   d7714:	2003e620 	.word	0x2003e620
   d7718:	2003e418 	.word	0x2003e418
   d771c:	000d76f7 	.word	0x000d76f7

000d7720 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7720:	b510      	push	{r4, lr}
   d7722:	4604      	mov	r4, r0
   d7724:	4608      	mov	r0, r1
{
    _spi = spi;
   d7726:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7728:	f7ff f800 	bl	d672c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d772c:	2300      	movs	r3, #0
   d772e:	6063      	str	r3, [r4, #4]
}
   d7730:	4620      	mov	r0, r4
   d7732:	bd10      	pop	{r4, pc}

000d7734 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7734:	b510      	push	{r4, lr}
   d7736:	4604      	mov	r4, r0
{
	free(buffer);
   d7738:	6800      	ldr	r0, [r0, #0]
   d773a:	f7ff f9a7 	bl	d6a8c <free>
}
   d773e:	4620      	mov	r0, r4
   d7740:	bd10      	pop	{r4, pc}

000d7742 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7742:	b510      	push	{r4, lr}
   d7744:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7746:	6800      	ldr	r0, [r0, #0]
   d7748:	b108      	cbz	r0, d774e <_ZN6String10invalidateEv+0xc>
   d774a:	f7ff f99f 	bl	d6a8c <free>
	buffer = NULL;
   d774e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7750:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7754:	6023      	str	r3, [r4, #0]
}
   d7756:	bd10      	pop	{r4, pc}

000d7758 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7758:	b538      	push	{r3, r4, r5, lr}
   d775a:	4604      	mov	r4, r0
   d775c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d775e:	6800      	ldr	r0, [r0, #0]
   d7760:	3101      	adds	r1, #1
   d7762:	f7ff f99b 	bl	d6a9c <realloc>
	if (newbuffer) {
   d7766:	b110      	cbz	r0, d776e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7768:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d776c:	2001      	movs	r0, #1
	}
	return 0;
}
   d776e:	bd38      	pop	{r3, r4, r5, pc}

000d7770 <_ZN6String7reserveEj>:
{
   d7770:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7772:	6803      	ldr	r3, [r0, #0]
{
   d7774:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7776:	b123      	cbz	r3, d7782 <_ZN6String7reserveEj+0x12>
   d7778:	6843      	ldr	r3, [r0, #4]
   d777a:	428b      	cmp	r3, r1
   d777c:	d301      	bcc.n	d7782 <_ZN6String7reserveEj+0x12>
   d777e:	2001      	movs	r0, #1
}
   d7780:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7782:	4620      	mov	r0, r4
   d7784:	f7ff ffe8 	bl	d7758 <_ZN6String12changeBufferEj>
   d7788:	2800      	cmp	r0, #0
   d778a:	d0f9      	beq.n	d7780 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d778c:	68a3      	ldr	r3, [r4, #8]
   d778e:	2b00      	cmp	r3, #0
   d7790:	d1f5      	bne.n	d777e <_ZN6String7reserveEj+0xe>
   d7792:	6822      	ldr	r2, [r4, #0]
   d7794:	7013      	strb	r3, [r2, #0]
   d7796:	e7f2      	b.n	d777e <_ZN6String7reserveEj+0xe>

000d7798 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7798:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d779a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d779c:	4611      	mov	r1, r2
   d779e:	9201      	str	r2, [sp, #4]
{
   d77a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d77a2:	f7ff ffe5 	bl	d7770 <_ZN6String7reserveEj>
   d77a6:	9a01      	ldr	r2, [sp, #4]
   d77a8:	b928      	cbnz	r0, d77b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d77aa:	4620      	mov	r0, r4
   d77ac:	f7ff ffc9 	bl	d7742 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d77b0:	4620      	mov	r0, r4
   d77b2:	b003      	add	sp, #12
   d77b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d77b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d77b8:	4629      	mov	r1, r5
   d77ba:	6820      	ldr	r0, [r4, #0]
   d77bc:	f001 f9d6 	bl	d8b6c <memcpy>
	buffer[len] = 0;
   d77c0:	6822      	ldr	r2, [r4, #0]
   d77c2:	68a3      	ldr	r3, [r4, #8]
   d77c4:	2100      	movs	r1, #0
   d77c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d77c8:	e7f2      	b.n	d77b0 <_ZN6String4copyEPKcj+0x18>

000d77ca <_ZN6StringC1EPKc>:
	buffer = NULL;
   d77ca:	2300      	movs	r3, #0
String::String(const char *cstr)
   d77cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d77ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d77d2:	4604      	mov	r4, r0
	len = 0;
   d77d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d77d8:	b141      	cbz	r1, d77ec <_ZN6StringC1EPKc+0x22>
   d77da:	4608      	mov	r0, r1
   d77dc:	9101      	str	r1, [sp, #4]
   d77de:	f001 fa48 	bl	d8c72 <strlen>
   d77e2:	9901      	ldr	r1, [sp, #4]
   d77e4:	4602      	mov	r2, r0
   d77e6:	4620      	mov	r0, r4
   d77e8:	f7ff ffd6 	bl	d7798 <_ZN6String4copyEPKcj>
}
   d77ec:	4620      	mov	r0, r4
   d77ee:	b002      	add	sp, #8
   d77f0:	bd10      	pop	{r4, pc}

000d77f2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d77f2:	4288      	cmp	r0, r1
{
   d77f4:	b510      	push	{r4, lr}
   d77f6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d77f8:	d005      	beq.n	d7806 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d77fa:	680b      	ldr	r3, [r1, #0]
   d77fc:	b12b      	cbz	r3, d780a <_ZN6StringaSERKS_+0x18>
   d77fe:	688a      	ldr	r2, [r1, #8]
   d7800:	4619      	mov	r1, r3
   d7802:	f7ff ffc9 	bl	d7798 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7806:	4620      	mov	r0, r4
   d7808:	bd10      	pop	{r4, pc}
	else invalidate();
   d780a:	f7ff ff9a 	bl	d7742 <_ZN6String10invalidateEv>
   d780e:	e7fa      	b.n	d7806 <_ZN6StringaSERKS_+0x14>

000d7810 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7810:	b510      	push	{r4, lr}
	buffer = NULL;
   d7812:	2300      	movs	r3, #0
String::String(const String &value)
   d7814:	4604      	mov	r4, r0
	capacity = 0;
   d7816:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d781a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d781c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d781e:	f7ff ffe8 	bl	d77f2 <_ZN6StringaSERKS_>
}
   d7822:	4620      	mov	r0, r4
   d7824:	bd10      	pop	{r4, pc}

000d7826 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7826:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7828:	6882      	ldr	r2, [r0, #8]
   d782a:	b93a      	cbnz	r2, d783c <_ZNK6String6equalsEPKc+0x16>
   d782c:	b121      	cbz	r1, d7838 <_ZNK6String6equalsEPKc+0x12>
   d782e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7830:	fab0 f080 	clz	r0, r0
   d7834:	0940      	lsrs	r0, r0, #5
   d7836:	e000      	b.n	d783a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7838:	2001      	movs	r0, #1
}
   d783a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d783c:	6800      	ldr	r0, [r0, #0]
   d783e:	b909      	cbnz	r1, d7844 <_ZNK6String6equalsEPKc+0x1e>
   d7840:	7800      	ldrb	r0, [r0, #0]
   d7842:	e7f5      	b.n	d7830 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7844:	f001 f9e6 	bl	d8c14 <strcmp>
   d7848:	e7f2      	b.n	d7830 <_ZNK6String6equalsEPKc+0xa>

000d784a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d784a:	b558      	push	{r3, r4, r6, lr}
   d784c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d784e:	b12a      	cbz	r2, d785c <_ZNK6String8getBytesEPhjj+0x12>
   d7850:	b121      	cbz	r1, d785c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d7852:	6884      	ldr	r4, [r0, #8]
   d7854:	429c      	cmp	r4, r3
   d7856:	d802      	bhi.n	d785e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7858:	2300      	movs	r3, #0
   d785a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d785c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d785e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d7860:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d7862:	6801      	ldr	r1, [r0, #0]
   d7864:	4294      	cmp	r4, r2
   d7866:	bf28      	it	cs
   d7868:	4614      	movcs	r4, r2
   d786a:	4419      	add	r1, r3
   d786c:	4622      	mov	r2, r4
   d786e:	4630      	mov	r0, r6
   d7870:	f001 fa19 	bl	d8ca6 <strncpy>
	buf[n] = 0;
   d7874:	2300      	movs	r3, #0
   d7876:	5533      	strb	r3, [r6, r4]
   d7878:	e7f0      	b.n	d785c <_ZNK6String8getBytesEPhjj+0x12>
	...

000d787c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d787c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d787e:	6800      	ldr	r0, [r0, #0]
   d7880:	b140      	cbz	r0, d7894 <_ZNK6String7toFloatEv+0x18>
   d7882:	f001 f94b 	bl	d8b1c <atof>
   d7886:	ec51 0b10 	vmov	r0, r1, d0
   d788a:	f001 f8b3 	bl	d89f4 <__aeabi_d2f>
   d788e:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d7892:	bd08      	pop	{r3, pc}
	return 0;
   d7894:	ed9f 0a01 	vldr	s0, [pc, #4]	; d789c <_ZNK6String7toFloatEv+0x20>
   d7898:	e7fb      	b.n	d7892 <_ZNK6String7toFloatEv+0x16>
   d789a:	bf00      	nop
   d789c:	00000000 	.word	0x00000000

000d78a0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d78a0:	b507      	push	{r0, r1, r2, lr}
   d78a2:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d78a4:	2100      	movs	r1, #0
{
   d78a6:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d78a8:	9100      	str	r1, [sp, #0]
   d78aa:	2001      	movs	r0, #1
   d78ac:	218c      	movs	r1, #140	; 0x8c
   d78ae:	f7ff f82b 	bl	d6908 <system_reset>
}
   d78b2:	b003      	add	sp, #12
   d78b4:	f85d fb04 	ldr.w	pc, [sp], #4

000d78b8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d78b8:	4601      	mov	r1, r0
    reset(0, flags);
   d78ba:	2000      	movs	r0, #0
   d78bc:	f7ff bff0 	b.w	d78a0 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d78c0 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d78c0:	2000      	movs	r0, #0
   d78c2:	f7ff bff9 	b.w	d78b8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d78c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d78c8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d78ca:	4b09      	ldr	r3, [pc, #36]	; (d78f0 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d78cc:	4c09      	ldr	r4, [pc, #36]	; (d78f4 <_GLOBAL__sub_I_System+0x2c>)
   d78ce:	2202      	movs	r2, #2
   d78d0:	2000      	movs	r0, #0
   d78d2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d78d4:	4b08      	ldr	r3, [pc, #32]	; (d78f8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d78d6:	6020      	str	r0, [r4, #0]
   d78d8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d78da:	71a0      	strb	r0, [r4, #6]
   d78dc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d78de:	f7fe ffc7 	bl	d6870 <set_system_mode>
SystemClass System;
   d78e2:	4620      	mov	r0, r4
   d78e4:	4a05      	ldr	r2, [pc, #20]	; (d78fc <_GLOBAL__sub_I_System+0x34>)
   d78e6:	4906      	ldr	r1, [pc, #24]	; (d7900 <_GLOBAL__sub_I_System+0x38>)
   d78e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d78ec:	f000 bbfe 	b.w	d80ec <__aeabi_atexit>
   d78f0:	2003e63c 	.word	0x2003e63c
   d78f4:	2003e630 	.word	0x2003e630
   d78f8:	ffff0000 	.word	0xffff0000
   d78fc:	2003e418 	.word	0x2003e418
   d7900:	000d41a3 	.word	0x000d41a3

000d7904 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7908:	4a15      	ldr	r2, [pc, #84]	; (d7960 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d790a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d796c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d790e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7912:	18c0      	adds	r0, r0, r3
   d7914:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7918:	4a12      	ldr	r2, [pc, #72]	; (d7964 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d791a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d791e:	18c6      	adds	r6, r0, r3
   d7920:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7924:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7928:	42bb      	cmp	r3, r7
   d792a:	bf08      	it	eq
   d792c:	42b2      	cmpeq	r2, r6
{
   d792e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7930:	d013      	beq.n	d795a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7932:	a903      	add	r1, sp, #12
   d7934:	4668      	mov	r0, sp
   d7936:	e9cd 6700 	strd	r6, r7, [sp]
   d793a:	f7ff f8e7 	bl	d6b0c <localtime_r>
	calendar_time.tm_year += 1900;
   d793e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7940:	4d09      	ldr	r5, [pc, #36]	; (d7968 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7942:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7946:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7948:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d794a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d794c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d794e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7952:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7956:	6823      	ldr	r3, [r4, #0]
   d7958:	602b      	str	r3, [r5, #0]
    }
}
   d795a:	b00c      	add	sp, #48	; 0x30
   d795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7960:	2003e678 	.word	0x2003e678
   d7964:	2003e670 	.word	0x2003e670
   d7968:	2003e648 	.word	0x2003e648
   d796c:	2003e680 	.word	0x2003e680

000d7970 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7970:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7972:	2000      	movs	r0, #0
   d7974:	f7ff f812 	bl	d699c <spark_sync_time_pending>
   d7978:	b128      	cbz	r0, d7986 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d797a:	f7fe ffe7 	bl	d694c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d797e:	f080 0001 	eor.w	r0, r0, #1
   d7982:	b2c0      	uxtb	r0, r0
    }
   d7984:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7986:	2001      	movs	r0, #1
   d7988:	e7fc      	b.n	d7984 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d798a <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d798a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d798c:	4602      	mov	r2, r0
   d798e:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7990:	4668      	mov	r0, sp
    struct timeval tv = {
   d7992:	2100      	movs	r1, #0
    };
   d7994:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d7998:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d799c:	f7fe fe0e 	bl	d65bc <hal_rtc_set_time>
   d79a0:	4602      	mov	r2, r0
   d79a2:	b910      	cbnz	r0, d79aa <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d79a4:	4601      	mov	r1, r0
   d79a6:	f7fe ff93 	bl	d68d0 <system_notify_time_changed>
    }
}
   d79aa:	b005      	add	sp, #20
   d79ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d79b0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d79b0:	b530      	push	{r4, r5, lr}
   d79b2:	4604      	mov	r4, r0
    t += time_zone_cache;
   d79b4:	4818      	ldr	r0, [pc, #96]	; (d7a18 <_ZN9TimeClass7timeStrEx+0x68>)
   d79b6:	e9d0 1000 	ldrd	r1, r0, [r0]
   d79ba:	1852      	adds	r2, r2, r1
   d79bc:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d79c0:	4816      	ldr	r0, [pc, #88]	; (d7a1c <_ZN9TimeClass7timeStrEx+0x6c>)
   d79c2:	e9d0 1000 	ldrd	r1, r0, [r0]
   d79c6:	1852      	adds	r2, r2, r1
{
   d79c8:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d79ca:	eb40 0303 	adc.w	r3, r0, r3
   d79ce:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d79d2:	2224      	movs	r2, #36	; 0x24
   d79d4:	eb0d 0002 	add.w	r0, sp, r2
   d79d8:	2100      	movs	r1, #0
   d79da:	f001 f8ef 	bl	d8bbc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d79de:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d79e0:	a909      	add	r1, sp, #36	; 0x24
   d79e2:	4668      	mov	r0, sp
   d79e4:	f7ff f892 	bl	d6b0c <localtime_r>
    char ascstr[26] = {};
   d79e8:	2216      	movs	r2, #22
   d79ea:	4629      	mov	r1, r5
   d79ec:	a803      	add	r0, sp, #12
   d79ee:	9502      	str	r5, [sp, #8]
   d79f0:	f001 f8e4 	bl	d8bbc <memset>
    asctime_r(&calendar_time, ascstr);
   d79f4:	a902      	add	r1, sp, #8
   d79f6:	a809      	add	r0, sp, #36	; 0x24
   d79f8:	f001 f86a 	bl	d8ad0 <asctime_r>
    int len = strlen(ascstr);
   d79fc:	a802      	add	r0, sp, #8
   d79fe:	f001 f938 	bl	d8c72 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7a02:	ab12      	add	r3, sp, #72	; 0x48
   d7a04:	4418      	add	r0, r3
    return String(ascstr);
   d7a06:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7a08:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	f7ff fedc 	bl	d77ca <_ZN6StringC1EPKc>
}
   d7a12:	4620      	mov	r0, r4
   d7a14:	b013      	add	sp, #76	; 0x4c
   d7a16:	bd30      	pop	{r4, r5, pc}
   d7a18:	2003e678 	.word	0x2003e678
   d7a1c:	2003e670 	.word	0x2003e670

000d7a20 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a24:	b0a5      	sub	sp, #148	; 0x94
   d7a26:	4607      	mov	r7, r0
   d7a28:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a2a:	a814      	add	r0, sp, #80	; 0x50
{
   d7a2c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a2e:	223f      	movs	r2, #63	; 0x3f
{
   d7a30:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a32:	f001 f938 	bl	d8ca6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7a36:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7a38:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7a3a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7a3e:	f001 f918 	bl	d8c72 <strlen>
   d7a42:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d7a44:	bb5d      	cbnz	r5, d7a9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d7a46:	492a      	ldr	r1, [pc, #168]	; (d7af0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d7a48:	a803      	add	r0, sp, #12
   d7a4a:	f001 f8ed 	bl	d8c28 <strcpy>
   d7a4e:	ae14      	add	r6, sp, #80	; 0x50
{
   d7a50:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7a52:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d7a56:	45ab      	cmp	fp, r5
   d7a58:	d936      	bls.n	d7ac8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7a5a:	46b1      	mov	r9, r6
   d7a5c:	f105 0a01 	add.w	sl, r5, #1
   d7a60:	f819 3b01 	ldrb.w	r3, [r9], #1
   d7a64:	2b25      	cmp	r3, #37	; 0x25
   d7a66:	d117      	bne.n	d7a98 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d7a68:	7873      	ldrb	r3, [r6, #1]
   d7a6a:	2b7a      	cmp	r3, #122	; 0x7a
   d7a6c:	d114      	bne.n	d7a98 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d7a6e:	a803      	add	r0, sp, #12
   d7a70:	f001 f8ff 	bl	d8c72 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a74:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d7a76:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a78:	1828      	adds	r0, r5, r0
   d7a7a:	4418      	add	r0, r3
   d7a7c:	ebab 0205 	sub.w	r2, fp, r5
   d7a80:	1cb1      	adds	r1, r6, #2
   d7a82:	f001 f873 	bl	d8b6c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7a86:	4622      	mov	r2, r4
   d7a88:	a903      	add	r1, sp, #12
   d7a8a:	4630      	mov	r0, r6
   d7a8c:	f001 f86e 	bl	d8b6c <memcpy>
            len = strlen(format_str);
   d7a90:	a814      	add	r0, sp, #80	; 0x50
   d7a92:	f001 f8ee 	bl	d8c72 <strlen>
   d7a96:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d7a98:	464e      	mov	r6, r9
   d7a9a:	4655      	mov	r5, sl
   d7a9c:	e7d9      	b.n	d7a52 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7a9e:	213c      	movs	r1, #60	; 0x3c
   d7aa0:	fb95 f3f1 	sdiv	r3, r5, r1
   d7aa4:	2b00      	cmp	r3, #0
   d7aa6:	bfb8      	it	lt
   d7aa8:	425b      	neglt	r3, r3
   d7aaa:	fbb3 f2f1 	udiv	r2, r3, r1
   d7aae:	fb01 3312 	mls	r3, r1, r2, r3
   d7ab2:	9300      	str	r3, [sp, #0]
   d7ab4:	4a0f      	ldr	r2, [pc, #60]	; (d7af4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d7ab6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7aba:	2110      	movs	r1, #16
   d7abc:	a803      	add	r0, sp, #12
   d7abe:	fb95 f3f3 	sdiv	r3, r5, r3
   d7ac2:	f7fe fffb 	bl	d6abc <snprintf>
   d7ac6:	e7c2      	b.n	d7a4e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7ac8:	2100      	movs	r1, #0
   d7aca:	222e      	movs	r2, #46	; 0x2e
   d7acc:	a808      	add	r0, sp, #32
   d7ace:	9107      	str	r1, [sp, #28]
   d7ad0:	f001 f874 	bl	d8bbc <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d7ad4:	4643      	mov	r3, r8
   d7ad6:	aa14      	add	r2, sp, #80	; 0x50
   d7ad8:	2132      	movs	r1, #50	; 0x32
   d7ada:	a807      	add	r0, sp, #28
   d7adc:	f7ff f80e 	bl	d6afc <strftime>
    return String(buf);
   d7ae0:	a907      	add	r1, sp, #28
   d7ae2:	4638      	mov	r0, r7
   d7ae4:	f7ff fe71 	bl	d77ca <_ZN6StringC1EPKc>
}
   d7ae8:	4638      	mov	r0, r7
   d7aea:	b025      	add	sp, #148	; 0x94
   d7aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7af0:	000db180 	.word	0x000db180
   d7af4:	000db182 	.word	0x000db182

000d7af8 <_ZN9TimeClass6formatExPKc>:
{
   d7af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7afa:	b08d      	sub	sp, #52	; 0x34
   d7afc:	e9cd 2300 	strd	r2, r3, [sp]
   d7b00:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d7b02:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d7b04:	b915      	cbnz	r5, d7b0c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d7b06:	4b19      	ldr	r3, [pc, #100]	; (d7b6c <_ZN9TimeClass6formatExPKc+0x74>)
   d7b08:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7b0a:	b12d      	cbz	r5, d7b18 <_ZN9TimeClass6formatExPKc+0x20>
   d7b0c:	4b18      	ldr	r3, [pc, #96]	; (d7b70 <_ZN9TimeClass6formatExPKc+0x78>)
   d7b0e:	4628      	mov	r0, r5
   d7b10:	6819      	ldr	r1, [r3, #0]
   d7b12:	f001 f87f 	bl	d8c14 <strcmp>
   d7b16:	b938      	cbnz	r0, d7b28 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7b18:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	f7ff ff47 	bl	d79b0 <_ZN9TimeClass7timeStrEx>
}
   d7b22:	4620      	mov	r0, r4
   d7b24:	b00d      	add	sp, #52	; 0x34
   d7b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7b28:	4e12      	ldr	r6, [pc, #72]	; (d7b74 <_ZN9TimeClass6formatExPKc+0x7c>)
   d7b2a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7b2c:	4f12      	ldr	r7, [pc, #72]	; (d7b78 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d7b2e:	e9d6 3200 	ldrd	r3, r2, [r6]
   d7b32:	185b      	adds	r3, r3, r1
   d7b34:	9901      	ldr	r1, [sp, #4]
   d7b36:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d7b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7b3e:	181b      	adds	r3, r3, r0
   d7b40:	eb41 0202 	adc.w	r2, r1, r2
   d7b44:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d7b48:	2100      	movs	r1, #0
   d7b4a:	2224      	movs	r2, #36	; 0x24
   d7b4c:	a803      	add	r0, sp, #12
   d7b4e:	f001 f835 	bl	d8bbc <memset>
    localtime_r(&t, &calendar_time);
   d7b52:	a903      	add	r1, sp, #12
   d7b54:	4668      	mov	r0, sp
   d7b56:	f7fe ffd9 	bl	d6b0c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7b5a:	6832      	ldr	r2, [r6, #0]
   d7b5c:	683b      	ldr	r3, [r7, #0]
   d7b5e:	a903      	add	r1, sp, #12
   d7b60:	4413      	add	r3, r2
   d7b62:	4620      	mov	r0, r4
   d7b64:	462a      	mov	r2, r5
   d7b66:	f7ff ff5b 	bl	d7a20 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d7b6a:	e7da      	b.n	d7b22 <_ZN9TimeClass6formatExPKc+0x2a>
   d7b6c:	2003e644 	.word	0x2003e644
   d7b70:	2003e240 	.word	0x2003e240
   d7b74:	2003e678 	.word	0x2003e678
   d7b78:	2003e670 	.word	0x2003e670

000d7b7c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d7b7c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7b7e:	2000      	movs	r0, #0
   d7b80:	f7fe fd0c 	bl	d659c <hal_rtc_time_is_valid>
    if (rtcstate)
   d7b84:	4604      	mov	r4, r0
   d7b86:	b9a0      	cbnz	r0, d7bb2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7b88:	f7fe fe6a 	bl	d6860 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7b8c:	2801      	cmp	r0, #1
   d7b8e:	d110      	bne.n	d7bb2 <_ZN9TimeClass7isValidEv+0x36>
   d7b90:	4620      	mov	r0, r4
   d7b92:	f7fe fe95 	bl	d68c0 <system_thread_get_state>
   d7b96:	b960      	cbnz	r0, d7bb2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7b98:	f7ff feea 	bl	d7970 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7b9c:	b910      	cbnz	r0, d7ba4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7b9e:	f7fe fecd 	bl	d693c <spark_process>
        while (_while() && !_condition()) {
   d7ba2:	e7f9      	b.n	d7b98 <_ZN9TimeClass7isValidEv+0x1c>
   d7ba4:	f7ff fee4 	bl	d7970 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7bac:	2000      	movs	r0, #0
   d7bae:	f7fe bcf5 	b.w	d659c <hal_rtc_time_is_valid>
}
   d7bb2:	4620      	mov	r0, r4
   d7bb4:	bd10      	pop	{r4, pc}

000d7bb6 <_ZN9TimeClass3nowEv>:
{
   d7bb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7bb8:	f7ff ffe0 	bl	d7b7c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7bbc:	2210      	movs	r2, #16
   d7bbe:	2100      	movs	r1, #0
   d7bc0:	4668      	mov	r0, sp
   d7bc2:	f000 fffb 	bl	d8bbc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7bc6:	2100      	movs	r1, #0
   d7bc8:	4668      	mov	r0, sp
   d7bca:	f7fe fcef 	bl	d65ac <hal_rtc_get_time>
}
   d7bce:	9800      	ldr	r0, [sp, #0]
   d7bd0:	b005      	add	sp, #20
   d7bd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7bd8 <_ZN9TimeClass4hourEv>:
{
   d7bd8:	b508      	push	{r3, lr}
	return hour(now());
   d7bda:	f7ff ffec 	bl	d7bb6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7bde:	17c1      	asrs	r1, r0, #31
   d7be0:	f7ff fe90 	bl	d7904 <_ZL22Refresh_UnixTime_Cachex>
}
   d7be4:	4b01      	ldr	r3, [pc, #4]	; (d7bec <_ZN9TimeClass4hourEv+0x14>)
   d7be6:	6898      	ldr	r0, [r3, #8]
   d7be8:	bd08      	pop	{r3, pc}
   d7bea:	bf00      	nop
   d7bec:	2003e648 	.word	0x2003e648

000d7bf0 <_ZN9TimeClass4yearEv>:
{
   d7bf0:	b508      	push	{r3, lr}
	return year(now());
   d7bf2:	f7ff ffe0 	bl	d7bb6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7bf6:	17c1      	asrs	r1, r0, #31
   d7bf8:	f7ff fe84 	bl	d7904 <_ZL22Refresh_UnixTime_Cachex>
}
   d7bfc:	4b01      	ldr	r3, [pc, #4]	; (d7c04 <_ZN9TimeClass4yearEv+0x14>)
   d7bfe:	6958      	ldr	r0, [r3, #20]
   d7c00:	bd08      	pop	{r3, pc}
   d7c02:	bf00      	nop
   d7c04:	2003e648 	.word	0x2003e648

000d7c08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7c08:	4b02      	ldr	r3, [pc, #8]	; (d7c14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7c0a:	681a      	ldr	r2, [r3, #0]
   d7c0c:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7c0e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7c10:	4770      	bx	lr
   d7c12:	bf00      	nop
   d7c14:	2003e240 	.word	0x2003e240
   d7c18:	2003e644 	.word	0x2003e644

000d7c1c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7c1c:	4770      	bx	lr

000d7c1e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c1e:	7441      	strb	r1, [r0, #17]
}
   d7c20:	4770      	bx	lr

000d7c22 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7c22:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7c24:	7c00      	ldrb	r0, [r0, #16]
   d7c26:	f7fe fdc9 	bl	d67bc <hal_usart_available_data_for_write>
}
   d7c2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c2e:	bd08      	pop	{r3, pc}

000d7c30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c30:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7c32:	7c00      	ldrb	r0, [r0, #16]
   d7c34:	f7fe fd9a 	bl	d676c <hal_usart_available>
}
   d7c38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c3c:	bd08      	pop	{r3, pc}

000d7c3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7c40:	7c00      	ldrb	r0, [r0, #16]
   d7c42:	f7fe fda3 	bl	d678c <hal_usart_peek>
}
   d7c46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c4a:	bd08      	pop	{r3, pc}

000d7c4c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7c4c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7c4e:	7c00      	ldrb	r0, [r0, #16]
   d7c50:	f7fe fd94 	bl	d677c <hal_usart_read>
}
   d7c54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c58:	bd08      	pop	{r3, pc}

000d7c5a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7c5a:	7c00      	ldrb	r0, [r0, #16]
   d7c5c:	f7fe bd9e 	b.w	d679c <hal_usart_flush>

000d7c60 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c62:	7c45      	ldrb	r5, [r0, #17]
{
   d7c64:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c66:	b12d      	cbz	r5, d7c74 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7c68:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7c6a:	b003      	add	sp, #12
   d7c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7c70:	f7fe bd74 	b.w	d675c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c74:	7c00      	ldrb	r0, [r0, #16]
   d7c76:	9101      	str	r1, [sp, #4]
   d7c78:	f7fe fda0 	bl	d67bc <hal_usart_available_data_for_write>
   d7c7c:	2800      	cmp	r0, #0
   d7c7e:	9901      	ldr	r1, [sp, #4]
   d7c80:	dcf2      	bgt.n	d7c68 <_ZN11USARTSerial5writeEh+0x8>
}
   d7c82:	4628      	mov	r0, r5
   d7c84:	b003      	add	sp, #12
   d7c86:	bd30      	pop	{r4, r5, pc}

000d7c88 <_ZN11USARTSerialD0Ev>:
   d7c88:	b510      	push	{r4, lr}
   d7c8a:	2114      	movs	r1, #20
   d7c8c:	4604      	mov	r4, r0
   d7c8e:	f000 fa32 	bl	d80f6 <_ZdlPvj>
   d7c92:	4620      	mov	r0, r4
   d7c94:	bd10      	pop	{r4, pc}
	...

000d7c98 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7c98:	b510      	push	{r4, lr}
   d7c9a:	f04f 0c00 	mov.w	ip, #0
   d7c9e:	4604      	mov	r4, r0
   d7ca0:	4608      	mov	r0, r1
   d7ca2:	4611      	mov	r1, r2
   d7ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ca8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7cac:	4a04      	ldr	r2, [pc, #16]	; (d7cc0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7cae:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7cb0:	2201      	movs	r2, #1
  _serial = serial;
   d7cb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7cb4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7cb6:	461a      	mov	r2, r3
   d7cb8:	f7fe fd48 	bl	d674c <hal_usart_init>
}
   d7cbc:	4620      	mov	r0, r4
   d7cbe:	bd10      	pop	{r4, pc}
   d7cc0:	000db1b4 	.word	0x000db1b4

000d7cc4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7cc4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7cc6:	4c0e      	ldr	r4, [pc, #56]	; (d7d00 <_Z22__fetch_global_Serial1v+0x3c>)
   d7cc8:	7821      	ldrb	r1, [r4, #0]
   d7cca:	f3bf 8f5b 	dmb	ish
   d7cce:	f011 0101 	ands.w	r1, r1, #1
   d7cd2:	d112      	bne.n	d7cfa <_Z22__fetch_global_Serial1v+0x36>
   d7cd4:	4620      	mov	r0, r4
   d7cd6:	9101      	str	r1, [sp, #4]
   d7cd8:	f7fc f9ee 	bl	d40b8 <__cxa_guard_acquire>
   d7cdc:	9901      	ldr	r1, [sp, #4]
   d7cde:	b160      	cbz	r0, d7cfa <_Z22__fetch_global_Serial1v+0x36>
   d7ce0:	4a08      	ldr	r2, [pc, #32]	; (d7d04 <_Z22__fetch_global_Serial1v+0x40>)
   d7ce2:	4b09      	ldr	r3, [pc, #36]	; (d7d08 <_Z22__fetch_global_Serial1v+0x44>)
   d7ce4:	4809      	ldr	r0, [pc, #36]	; (d7d0c <_Z22__fetch_global_Serial1v+0x48>)
   d7ce6:	f7ff ffd7 	bl	d7c98 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7cea:	4620      	mov	r0, r4
   d7cec:	f7fc f9e9 	bl	d40c2 <__cxa_guard_release>
   d7cf0:	4a07      	ldr	r2, [pc, #28]	; (d7d10 <_Z22__fetch_global_Serial1v+0x4c>)
   d7cf2:	4908      	ldr	r1, [pc, #32]	; (d7d14 <_Z22__fetch_global_Serial1v+0x50>)
   d7cf4:	4805      	ldr	r0, [pc, #20]	; (d7d0c <_Z22__fetch_global_Serial1v+0x48>)
   d7cf6:	f000 f9f9 	bl	d80ec <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7cfa:	4804      	ldr	r0, [pc, #16]	; (d7d0c <_Z22__fetch_global_Serial1v+0x48>)
   d7cfc:	b002      	add	sp, #8
   d7cfe:	bd10      	pop	{r4, pc}
   d7d00:	2003e688 	.word	0x2003e688
   d7d04:	2003e68c 	.word	0x2003e68c
   d7d08:	2003e710 	.word	0x2003e710
   d7d0c:	2003e794 	.word	0x2003e794
   d7d10:	2003e418 	.word	0x2003e418
   d7d14:	000d7c1d 	.word	0x000d7c1d

000d7d18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d18:	7441      	strb	r1, [r0, #17]
}
   d7d1a:	4770      	bx	lr

000d7d1c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7d1c:	4770      	bx	lr

000d7d1e <_ZN9USBSerial4readEv>:
{
   d7d1e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7d20:	2100      	movs	r1, #0
   d7d22:	7c00      	ldrb	r0, [r0, #16]
   d7d24:	f7fe fd6a 	bl	d67fc <HAL_USB_USART_Receive_Data>
}
   d7d28:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d2c:	bd08      	pop	{r3, pc}

000d7d2e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7d2e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d30:	2101      	movs	r1, #1
   d7d32:	7c00      	ldrb	r0, [r0, #16]
   d7d34:	f7fe fd62 	bl	d67fc <HAL_USB_USART_Receive_Data>
}
   d7d38:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d3c:	bd08      	pop	{r3, pc}

000d7d3e <_ZN9USBSerial17availableForWriteEv>:
{
   d7d3e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7d40:	7c00      	ldrb	r0, [r0, #16]
   d7d42:	f7fe fd53 	bl	d67ec <HAL_USB_USART_Available_Data_For_Write>
}
   d7d46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d4a:	bd08      	pop	{r3, pc}

000d7d4c <_ZN9USBSerial9availableEv>:
{
   d7d4c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7d4e:	7c00      	ldrb	r0, [r0, #16]
   d7d50:	f7fe fd44 	bl	d67dc <HAL_USB_USART_Available_Data>
}
   d7d54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d58:	bd08      	pop	{r3, pc}

000d7d5a <_ZN9USBSerial5writeEh>:
{
   d7d5a:	b513      	push	{r0, r1, r4, lr}
   d7d5c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d5e:	7c00      	ldrb	r0, [r0, #16]
{
   d7d60:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d62:	f7fe fd43 	bl	d67ec <HAL_USB_USART_Available_Data_For_Write>
   d7d66:	2800      	cmp	r0, #0
   d7d68:	9901      	ldr	r1, [sp, #4]
   d7d6a:	dc01      	bgt.n	d7d70 <_ZN9USBSerial5writeEh+0x16>
   d7d6c:	7c60      	ldrb	r0, [r4, #17]
   d7d6e:	b120      	cbz	r0, d7d7a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7d70:	7c20      	ldrb	r0, [r4, #16]
   d7d72:	f7fe fd4b 	bl	d680c <HAL_USB_USART_Send_Data>
   d7d76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7d7a:	b002      	add	sp, #8
   d7d7c:	bd10      	pop	{r4, pc}

000d7d7e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7d7e:	7c00      	ldrb	r0, [r0, #16]
   d7d80:	f7fe bd4c 	b.w	d681c <HAL_USB_USART_Flush_Data>

000d7d84 <_ZN9USBSerialD0Ev>:
   d7d84:	b510      	push	{r4, lr}
   d7d86:	2114      	movs	r1, #20
   d7d88:	4604      	mov	r4, r0
   d7d8a:	f000 f9b4 	bl	d80f6 <_ZdlPvj>
   d7d8e:	4620      	mov	r0, r4
   d7d90:	bd10      	pop	{r4, pc}
	...

000d7d94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d94:	b510      	push	{r4, lr}
   d7d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d9a:	4604      	mov	r4, r0
   d7d9c:	4608      	mov	r0, r1
   d7d9e:	2100      	movs	r1, #0
   d7da0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7da4:	4b04      	ldr	r3, [pc, #16]	; (d7db8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7da6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7da8:	2301      	movs	r3, #1
  _serial = serial;
   d7daa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7dac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7dae:	4611      	mov	r1, r2
   d7db0:	f7fe fd0c 	bl	d67cc <HAL_USB_USART_Init>
}
   d7db4:	4620      	mov	r0, r4
   d7db6:	bd10      	pop	{r4, pc}
   d7db8:	000db1e4 	.word	0x000db1e4

000d7dbc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7dbc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7dbe:	2214      	movs	r2, #20
{
   d7dc0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7dc2:	2100      	movs	r1, #0
   d7dc4:	f000 fefa 	bl	d8bbc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7dc8:	4620      	mov	r0, r4
   d7dca:	bd10      	pop	{r4, pc}

000d7dcc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7dcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7dce:	4c10      	ldr	r4, [pc, #64]	; (d7e10 <_Z16_fetch_usbserialv+0x44>)
{
   d7dd0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7dd2:	a803      	add	r0, sp, #12
   d7dd4:	f7ff fff2 	bl	d7dbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7dd8:	7821      	ldrb	r1, [r4, #0]
   d7dda:	f3bf 8f5b 	dmb	ish
   d7dde:	f011 0101 	ands.w	r1, r1, #1
   d7de2:	d111      	bne.n	d7e08 <_Z16_fetch_usbserialv+0x3c>
   d7de4:	4620      	mov	r0, r4
   d7de6:	9101      	str	r1, [sp, #4]
   d7de8:	f7fc f966 	bl	d40b8 <__cxa_guard_acquire>
   d7dec:	9901      	ldr	r1, [sp, #4]
   d7dee:	b158      	cbz	r0, d7e08 <_Z16_fetch_usbserialv+0x3c>
   d7df0:	aa03      	add	r2, sp, #12
   d7df2:	4808      	ldr	r0, [pc, #32]	; (d7e14 <_Z16_fetch_usbserialv+0x48>)
   d7df4:	f7ff ffce 	bl	d7d94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7df8:	4620      	mov	r0, r4
   d7dfa:	f7fc f962 	bl	d40c2 <__cxa_guard_release>
   d7dfe:	4a06      	ldr	r2, [pc, #24]	; (d7e18 <_Z16_fetch_usbserialv+0x4c>)
   d7e00:	4906      	ldr	r1, [pc, #24]	; (d7e1c <_Z16_fetch_usbserialv+0x50>)
   d7e02:	4804      	ldr	r0, [pc, #16]	; (d7e14 <_Z16_fetch_usbserialv+0x48>)
   d7e04:	f000 f972 	bl	d80ec <__aeabi_atexit>
	return _usbserial;
}
   d7e08:	4802      	ldr	r0, [pc, #8]	; (d7e14 <_Z16_fetch_usbserialv+0x48>)
   d7e0a:	b008      	add	sp, #32
   d7e0c:	bd10      	pop	{r4, pc}
   d7e0e:	bf00      	nop
   d7e10:	2003e7a8 	.word	0x2003e7a8
   d7e14:	2003e7ac 	.word	0x2003e7ac
   d7e18:	2003e418 	.word	0x2003e418
   d7e1c:	000d7d1d 	.word	0x000d7d1d

000d7e20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7e20:	4b01      	ldr	r3, [pc, #4]	; (d7e28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7e22:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7e24:	4770      	bx	lr
   d7e26:	bf00      	nop
   d7e28:	2003e244 	.word	0x2003e244

000d7e2c <serialEventRun>:
{
   d7e2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e2e:	4b0b      	ldr	r3, [pc, #44]	; (d7e5c <serialEventRun+0x30>)
   d7e30:	b143      	cbz	r3, d7e44 <serialEventRun+0x18>
   d7e32:	f7ff ffcb 	bl	d7dcc <_Z16_fetch_usbserialv>
   d7e36:	6803      	ldr	r3, [r0, #0]
   d7e38:	691b      	ldr	r3, [r3, #16]
   d7e3a:	4798      	blx	r3
   d7e3c:	2800      	cmp	r0, #0
   d7e3e:	dd01      	ble.n	d7e44 <serialEventRun+0x18>
        serialEvent();
   d7e40:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7e44:	4b06      	ldr	r3, [pc, #24]	; (d7e60 <serialEventRun+0x34>)
   d7e46:	b143      	cbz	r3, d7e5a <serialEventRun+0x2e>
   d7e48:	f7ff ff3c 	bl	d7cc4 <_Z22__fetch_global_Serial1v>
   d7e4c:	6803      	ldr	r3, [r0, #0]
   d7e4e:	691b      	ldr	r3, [r3, #16]
   d7e50:	4798      	blx	r3
   d7e52:	2800      	cmp	r0, #0
   d7e54:	dd01      	ble.n	d7e5a <serialEventRun+0x2e>
        serialEvent1();
   d7e56:	f3af 8000 	nop.w
}
   d7e5a:	bd08      	pop	{r3, pc}
	...

000d7e64 <_post_loop>:
{
   d7e64:	b508      	push	{r3, lr}
	serialEventRun();
   d7e66:	f7ff ffe1 	bl	d7e2c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e6a:	f7fe fb8f 	bl	d658c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7e6e:	4b01      	ldr	r3, [pc, #4]	; (d7e74 <_post_loop+0x10>)
   d7e70:	6018      	str	r0, [r3, #0]
}
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	2003e7d4 	.word	0x2003e7d4

000d7e78 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7e78:	4802      	ldr	r0, [pc, #8]	; (d7e84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7e7a:	4a03      	ldr	r2, [pc, #12]	; (d7e88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7e7c:	4903      	ldr	r1, [pc, #12]	; (d7e8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7e7e:	1a12      	subs	r2, r2, r0
   d7e80:	f000 be74 	b.w	d8b6c <memcpy>
   d7e84:	2003f400 	.word	0x2003f400
   d7e88:	2003fc04 	.word	0x2003fc04
   d7e8c:	000db510 	.word	0x000db510

000d7e90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e92:	2300      	movs	r3, #0
   d7e94:	9300      	str	r3, [sp, #0]
   d7e96:	461a      	mov	r2, r3
   d7e98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e9c:	f7fe fd2a 	bl	d68f4 <system_ctrl_set_result>
}
   d7ea0:	b003      	add	sp, #12
   d7ea2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7ea8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7ea8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7eaa:	8843      	ldrh	r3, [r0, #2]
   d7eac:	2b0a      	cmp	r3, #10
   d7eae:	d008      	beq.n	d7ec2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7eb0:	2b50      	cmp	r3, #80	; 0x50
   d7eb2:	d10b      	bne.n	d7ecc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7eb4:	4b09      	ldr	r3, [pc, #36]	; (d7edc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7eb6:	681b      	ldr	r3, [r3, #0]
   d7eb8:	b14b      	cbz	r3, d7ece <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7eba:	b003      	add	sp, #12
   d7ebc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7ec0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7ec2:	f7ff ffe5 	bl	d7e90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7ec6:	b003      	add	sp, #12
   d7ec8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ecc:	2300      	movs	r3, #0
   d7ece:	9300      	str	r3, [sp, #0]
   d7ed0:	461a      	mov	r2, r3
   d7ed2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ed6:	f7fe fd0d 	bl	d68f4 <system_ctrl_set_result>
}
   d7eda:	e7f4      	b.n	d7ec6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7edc:	2003e7c4 	.word	0x2003e7c4

000d7ee0 <module_user_init_hook>:
{
   d7ee0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ee2:	4c12      	ldr	r4, [pc, #72]	; (d7f2c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ee4:	4812      	ldr	r0, [pc, #72]	; (d7f30 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ee6:	4d13      	ldr	r5, [pc, #76]	; (d7f34 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ee8:	2100      	movs	r1, #0
   d7eea:	f7fe fdff 	bl	d6aec <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7eee:	6823      	ldr	r3, [r4, #0]
   d7ef0:	42ab      	cmp	r3, r5
   d7ef2:	4b11      	ldr	r3, [pc, #68]	; (d7f38 <module_user_init_hook+0x58>)
   d7ef4:	bf0c      	ite	eq
   d7ef6:	2201      	moveq	r2, #1
   d7ef8:	2200      	movne	r2, #0
   d7efa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7efc:	d002      	beq.n	d7f04 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7efe:	f7ff ffbb 	bl	d7e78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7f02:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7f04:	f7fe fb2a 	bl	d655c <HAL_RNG_GetRandomNumber>
   d7f08:	4604      	mov	r4, r0
    srand(seed);
   d7f0a:	f000 fe5f 	bl	d8bcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7f0e:	4b0b      	ldr	r3, [pc, #44]	; (d7f3c <module_user_init_hook+0x5c>)
   d7f10:	b113      	cbz	r3, d7f18 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7f12:	4620      	mov	r0, r4
   d7f14:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f18:	2100      	movs	r1, #0
   d7f1a:	4808      	ldr	r0, [pc, #32]	; (d7f3c <module_user_init_hook+0x5c>)
   d7f1c:	f7fe fd56 	bl	d69cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f24:	4806      	ldr	r0, [pc, #24]	; (d7f40 <module_user_init_hook+0x60>)
   d7f26:	2100      	movs	r1, #0
   d7f28:	f7fe bcda 	b.w	d68e0 <system_ctrl_set_app_request_handler>
   d7f2c:	2003fc00 	.word	0x2003fc00
   d7f30:	000d7e21 	.word	0x000d7e21
   d7f34:	9a271c1e 	.word	0x9a271c1e
   d7f38:	2003e7c0 	.word	0x2003e7c0
   d7f3c:	00000000 	.word	0x00000000
   d7f40:	000d7ea9 	.word	0x000d7ea9

000d7f44 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <spark_protocol_instance+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	681b      	ldr	r3, [r3, #0]
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	0003025c 	.word	0x0003025c

000d7f54 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <spark_protocol_set_product_id+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	685b      	ldr	r3, [r3, #4]
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	0003025c 	.word	0x0003025c

000d7f64 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <spark_protocol_set_product_firmware_version+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	689b      	ldr	r3, [r3, #8]
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	0003025c 	.word	0x0003025c

000d7f74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7f74:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7f76:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7f78:	d902      	bls.n	d7f80 <pinAvailable+0xc>
    return false;
   d7f7a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7f7c:	b002      	add	sp, #8
   d7f7e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7f80:	f1a0 030b 	sub.w	r3, r0, #11
   d7f84:	2b02      	cmp	r3, #2
   d7f86:	d81a      	bhi.n	d7fbe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7f88:	4c17      	ldr	r4, [pc, #92]	; (d7fe8 <pinAvailable+0x74>)
   d7f8a:	7821      	ldrb	r1, [r4, #0]
   d7f8c:	f3bf 8f5b 	dmb	ish
   d7f90:	f011 0101 	ands.w	r1, r1, #1
   d7f94:	d10b      	bne.n	d7fae <pinAvailable+0x3a>
   d7f96:	4620      	mov	r0, r4
   d7f98:	9101      	str	r1, [sp, #4]
   d7f9a:	f7fc f88d 	bl	d40b8 <__cxa_guard_acquire>
   d7f9e:	9901      	ldr	r1, [sp, #4]
   d7fa0:	b128      	cbz	r0, d7fae <pinAvailable+0x3a>
   d7fa2:	4812      	ldr	r0, [pc, #72]	; (d7fec <pinAvailable+0x78>)
   d7fa4:	f7ff fbbc 	bl	d7720 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7fa8:	4620      	mov	r0, r4
   d7faa:	f7fc f88a 	bl	d40c2 <__cxa_guard_release>
   d7fae:	4b0f      	ldr	r3, [pc, #60]	; (d7fec <pinAvailable+0x78>)
   d7fb0:	7818      	ldrb	r0, [r3, #0]
   d7fb2:	f7fe fbc3 	bl	d673c <hal_spi_is_enabled>
   d7fb6:	2800      	cmp	r0, #0
   d7fb8:	d1df      	bne.n	d7f7a <pinAvailable+0x6>
  return true; // 'pin' is available
   d7fba:	2001      	movs	r0, #1
   d7fbc:	e7de      	b.n	d7f7c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7fbe:	2801      	cmp	r0, #1
   d7fc0:	d809      	bhi.n	d7fd6 <pinAvailable+0x62>
   d7fc2:	f000 f86b 	bl	d809c <_Z19__fetch_global_Wirev>
   d7fc6:	2100      	movs	r1, #0
   d7fc8:	7c00      	ldrb	r0, [r0, #16]
   d7fca:	f7fe fb6f 	bl	d66ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7fce:	f080 0001 	eor.w	r0, r0, #1
   d7fd2:	b2c0      	uxtb	r0, r0
   d7fd4:	e7d2      	b.n	d7f7c <pinAvailable+0x8>
   d7fd6:	3809      	subs	r0, #9
   d7fd8:	2801      	cmp	r0, #1
   d7fda:	d8ee      	bhi.n	d7fba <pinAvailable+0x46>
   d7fdc:	f7ff fe72 	bl	d7cc4 <_Z22__fetch_global_Serial1v>
   d7fe0:	7c00      	ldrb	r0, [r0, #16]
   d7fe2:	f7fe fbe3 	bl	d67ac <hal_usart_is_enabled>
   d7fe6:	e7f2      	b.n	d7fce <pinAvailable+0x5a>
   d7fe8:	2003e7c8 	.word	0x2003e7c8
   d7fec:	2003e7cc 	.word	0x2003e7cc

000d7ff0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ff0:	2823      	cmp	r0, #35	; 0x23
{
   d7ff2:	b538      	push	{r3, r4, r5, lr}
   d7ff4:	4604      	mov	r4, r0
   d7ff6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ff8:	d80a      	bhi.n	d8010 <pinMode+0x20>
   d7ffa:	29ff      	cmp	r1, #255	; 0xff
   d7ffc:	d008      	beq.n	d8010 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7ffe:	f7ff ffb9 	bl	d7f74 <pinAvailable>
   d8002:	b128      	cbz	r0, d8010 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8004:	4629      	mov	r1, r5
   d8006:	4620      	mov	r0, r4
}
   d8008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d800c:	f7fe bade 	b.w	d65cc <HAL_Pin_Mode>
}
   d8010:	bd38      	pop	{r3, r4, r5, pc}

000d8012 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8012:	b538      	push	{r3, r4, r5, lr}
   d8014:	4604      	mov	r4, r0
   d8016:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8018:	f7fe fae0 	bl	d65dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d801c:	28ff      	cmp	r0, #255	; 0xff
   d801e:	d010      	beq.n	d8042 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8020:	2806      	cmp	r0, #6
   d8022:	d804      	bhi.n	d802e <digitalWrite+0x1c>
   d8024:	234d      	movs	r3, #77	; 0x4d
   d8026:	fa23 f000 	lsr.w	r0, r3, r0
   d802a:	07c3      	lsls	r3, r0, #31
   d802c:	d409      	bmi.n	d8042 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d802e:	4620      	mov	r0, r4
   d8030:	f7ff ffa0 	bl	d7f74 <pinAvailable>
   d8034:	b128      	cbz	r0, d8042 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8036:	4629      	mov	r1, r5
   d8038:	4620      	mov	r0, r4
}
   d803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d803e:	f7fe bad5 	b.w	d65ec <HAL_GPIO_Write>
}
   d8042:	bd38      	pop	{r3, r4, r5, pc}

000d8044 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8044:	b510      	push	{r4, lr}
   d8046:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8048:	f7fe fac8 	bl	d65dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d804c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d804e:	b2db      	uxtb	r3, r3
   d8050:	2b01      	cmp	r3, #1
   d8052:	d908      	bls.n	d8066 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8054:	4620      	mov	r0, r4
   d8056:	f7ff ff8d 	bl	d7f74 <pinAvailable>
   d805a:	b120      	cbz	r0, d8066 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d805c:	4620      	mov	r0, r4
}
   d805e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8062:	f7fe bacb 	b.w	d65fc <HAL_GPIO_Read>
}
   d8066:	2000      	movs	r0, #0
   d8068:	bd10      	pop	{r4, pc}
	...

000d806c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d806c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d806e:	2300      	movs	r3, #0
   d8070:	2520      	movs	r5, #32
   d8072:	8043      	strh	r3, [r0, #2]
   d8074:	2314      	movs	r3, #20
{
   d8076:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8078:	8003      	strh	r3, [r0, #0]
   d807a:	6085      	str	r5, [r0, #8]
   d807c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d807e:	4906      	ldr	r1, [pc, #24]	; (d8098 <_Z17acquireWireBufferv+0x2c>)
   d8080:	4628      	mov	r0, r5
   d8082:	f000 f83c 	bl	d80fe <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8086:	4904      	ldr	r1, [pc, #16]	; (d8098 <_Z17acquireWireBufferv+0x2c>)
	};
   d8088:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d808a:	4628      	mov	r0, r5
   d808c:	f000 f837 	bl	d80fe <_ZnajRKSt9nothrow_t>
	};
   d8090:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8092:	4620      	mov	r0, r4
   d8094:	bd38      	pop	{r3, r4, r5, pc}
   d8096:	bf00      	nop
   d8098:	000db20c 	.word	0x000db20c

000d809c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d809c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d809e:	4d0f      	ldr	r5, [pc, #60]	; (d80dc <_Z19__fetch_global_Wirev+0x40>)
   d80a0:	7829      	ldrb	r1, [r5, #0]
   d80a2:	f3bf 8f5b 	dmb	ish
   d80a6:	f011 0401 	ands.w	r4, r1, #1
{
   d80aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d80ac:	d113      	bne.n	d80d6 <_Z19__fetch_global_Wirev+0x3a>
   d80ae:	4628      	mov	r0, r5
   d80b0:	f7fc f802 	bl	d40b8 <__cxa_guard_acquire>
   d80b4:	b178      	cbz	r0, d80d6 <_Z19__fetch_global_Wirev+0x3a>
   d80b6:	a801      	add	r0, sp, #4
   d80b8:	f7ff ffd8 	bl	d806c <_Z17acquireWireBufferv>
   d80bc:	aa01      	add	r2, sp, #4
   d80be:	4621      	mov	r1, r4
   d80c0:	4807      	ldr	r0, [pc, #28]	; (d80e0 <_Z19__fetch_global_Wirev+0x44>)
   d80c2:	f7ff f91d 	bl	d7300 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d80c6:	4628      	mov	r0, r5
   d80c8:	f7fb fffb 	bl	d40c2 <__cxa_guard_release>
   d80cc:	4a05      	ldr	r2, [pc, #20]	; (d80e4 <_Z19__fetch_global_Wirev+0x48>)
   d80ce:	4906      	ldr	r1, [pc, #24]	; (d80e8 <_Z19__fetch_global_Wirev+0x4c>)
   d80d0:	4803      	ldr	r0, [pc, #12]	; (d80e0 <_Z19__fetch_global_Wirev+0x44>)
   d80d2:	f000 f80b 	bl	d80ec <__aeabi_atexit>
	return wire;
}
   d80d6:	4802      	ldr	r0, [pc, #8]	; (d80e0 <_Z19__fetch_global_Wirev+0x44>)
   d80d8:	b007      	add	sp, #28
   d80da:	bd30      	pop	{r4, r5, pc}
   d80dc:	2003e7d8 	.word	0x2003e7d8
   d80e0:	2003e7dc 	.word	0x2003e7dc
   d80e4:	2003e418 	.word	0x2003e418
   d80e8:	000d72a9 	.word	0x000d72a9

000d80ec <__aeabi_atexit>:
   d80ec:	460b      	mov	r3, r1
   d80ee:	4601      	mov	r1, r0
   d80f0:	4618      	mov	r0, r3
   d80f2:	f000 bd1b 	b.w	d8b2c <__cxa_atexit>

000d80f6 <_ZdlPvj>:
   d80f6:	f7fb bfd2 	b.w	d409e <_ZdlPv>

000d80fa <_ZnwjRKSt9nothrow_t>:
   d80fa:	f7fb bfcc 	b.w	d4096 <_Znwj>

000d80fe <_ZnajRKSt9nothrow_t>:
   d80fe:	f7fb bfcc 	b.w	d409a <_Znaj>

000d8102 <_ZSt25__throw_bad_function_callv>:
   d8102:	b508      	push	{r3, lr}
   d8104:	f7fe fce2 	bl	d6acc <abort>

000d8108 <__aeabi_drsub>:
   d8108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d810c:	e002      	b.n	d8114 <__adddf3>
   d810e:	bf00      	nop

000d8110 <__aeabi_dsub>:
   d8110:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8114 <__adddf3>:
   d8114:	b530      	push	{r4, r5, lr}
   d8116:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d811a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d811e:	ea94 0f05 	teq	r4, r5
   d8122:	bf08      	it	eq
   d8124:	ea90 0f02 	teqeq	r0, r2
   d8128:	bf1f      	itttt	ne
   d812a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d812e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8132:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8136:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d813a:	f000 80e2 	beq.w	d8302 <__adddf3+0x1ee>
   d813e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8142:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8146:	bfb8      	it	lt
   d8148:	426d      	neglt	r5, r5
   d814a:	dd0c      	ble.n	d8166 <__adddf3+0x52>
   d814c:	442c      	add	r4, r5
   d814e:	ea80 0202 	eor.w	r2, r0, r2
   d8152:	ea81 0303 	eor.w	r3, r1, r3
   d8156:	ea82 0000 	eor.w	r0, r2, r0
   d815a:	ea83 0101 	eor.w	r1, r3, r1
   d815e:	ea80 0202 	eor.w	r2, r0, r2
   d8162:	ea81 0303 	eor.w	r3, r1, r3
   d8166:	2d36      	cmp	r5, #54	; 0x36
   d8168:	bf88      	it	hi
   d816a:	bd30      	pophi	{r4, r5, pc}
   d816c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8170:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8174:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8178:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d817c:	d002      	beq.n	d8184 <__adddf3+0x70>
   d817e:	4240      	negs	r0, r0
   d8180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8184:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8188:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d818c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8190:	d002      	beq.n	d8198 <__adddf3+0x84>
   d8192:	4252      	negs	r2, r2
   d8194:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8198:	ea94 0f05 	teq	r4, r5
   d819c:	f000 80a7 	beq.w	d82ee <__adddf3+0x1da>
   d81a0:	f1a4 0401 	sub.w	r4, r4, #1
   d81a4:	f1d5 0e20 	rsbs	lr, r5, #32
   d81a8:	db0d      	blt.n	d81c6 <__adddf3+0xb2>
   d81aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d81ae:	fa22 f205 	lsr.w	r2, r2, r5
   d81b2:	1880      	adds	r0, r0, r2
   d81b4:	f141 0100 	adc.w	r1, r1, #0
   d81b8:	fa03 f20e 	lsl.w	r2, r3, lr
   d81bc:	1880      	adds	r0, r0, r2
   d81be:	fa43 f305 	asr.w	r3, r3, r5
   d81c2:	4159      	adcs	r1, r3
   d81c4:	e00e      	b.n	d81e4 <__adddf3+0xd0>
   d81c6:	f1a5 0520 	sub.w	r5, r5, #32
   d81ca:	f10e 0e20 	add.w	lr, lr, #32
   d81ce:	2a01      	cmp	r2, #1
   d81d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d81d4:	bf28      	it	cs
   d81d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d81da:	fa43 f305 	asr.w	r3, r3, r5
   d81de:	18c0      	adds	r0, r0, r3
   d81e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d81e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81e8:	d507      	bpl.n	d81fa <__adddf3+0xe6>
   d81ea:	f04f 0e00 	mov.w	lr, #0
   d81ee:	f1dc 0c00 	rsbs	ip, ip, #0
   d81f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d81f6:	eb6e 0101 	sbc.w	r1, lr, r1
   d81fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d81fe:	d31b      	bcc.n	d8238 <__adddf3+0x124>
   d8200:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8204:	d30c      	bcc.n	d8220 <__adddf3+0x10c>
   d8206:	0849      	lsrs	r1, r1, #1
   d8208:	ea5f 0030 	movs.w	r0, r0, rrx
   d820c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8210:	f104 0401 	add.w	r4, r4, #1
   d8214:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8218:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d821c:	f080 809a 	bcs.w	d8354 <__adddf3+0x240>
   d8220:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8224:	bf08      	it	eq
   d8226:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d822a:	f150 0000 	adcs.w	r0, r0, #0
   d822e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8232:	ea41 0105 	orr.w	r1, r1, r5
   d8236:	bd30      	pop	{r4, r5, pc}
   d8238:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d823c:	4140      	adcs	r0, r0
   d823e:	eb41 0101 	adc.w	r1, r1, r1
   d8242:	3c01      	subs	r4, #1
   d8244:	bf28      	it	cs
   d8246:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d824a:	d2e9      	bcs.n	d8220 <__adddf3+0x10c>
   d824c:	f091 0f00 	teq	r1, #0
   d8250:	bf04      	itt	eq
   d8252:	4601      	moveq	r1, r0
   d8254:	2000      	moveq	r0, #0
   d8256:	fab1 f381 	clz	r3, r1
   d825a:	bf08      	it	eq
   d825c:	3320      	addeq	r3, #32
   d825e:	f1a3 030b 	sub.w	r3, r3, #11
   d8262:	f1b3 0220 	subs.w	r2, r3, #32
   d8266:	da0c      	bge.n	d8282 <__adddf3+0x16e>
   d8268:	320c      	adds	r2, #12
   d826a:	dd08      	ble.n	d827e <__adddf3+0x16a>
   d826c:	f102 0c14 	add.w	ip, r2, #20
   d8270:	f1c2 020c 	rsb	r2, r2, #12
   d8274:	fa01 f00c 	lsl.w	r0, r1, ip
   d8278:	fa21 f102 	lsr.w	r1, r1, r2
   d827c:	e00c      	b.n	d8298 <__adddf3+0x184>
   d827e:	f102 0214 	add.w	r2, r2, #20
   d8282:	bfd8      	it	le
   d8284:	f1c2 0c20 	rsble	ip, r2, #32
   d8288:	fa01 f102 	lsl.w	r1, r1, r2
   d828c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8290:	bfdc      	itt	le
   d8292:	ea41 010c 	orrle.w	r1, r1, ip
   d8296:	4090      	lslle	r0, r2
   d8298:	1ae4      	subs	r4, r4, r3
   d829a:	bfa2      	ittt	ge
   d829c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d82a0:	4329      	orrge	r1, r5
   d82a2:	bd30      	popge	{r4, r5, pc}
   d82a4:	ea6f 0404 	mvn.w	r4, r4
   d82a8:	3c1f      	subs	r4, #31
   d82aa:	da1c      	bge.n	d82e6 <__adddf3+0x1d2>
   d82ac:	340c      	adds	r4, #12
   d82ae:	dc0e      	bgt.n	d82ce <__adddf3+0x1ba>
   d82b0:	f104 0414 	add.w	r4, r4, #20
   d82b4:	f1c4 0220 	rsb	r2, r4, #32
   d82b8:	fa20 f004 	lsr.w	r0, r0, r4
   d82bc:	fa01 f302 	lsl.w	r3, r1, r2
   d82c0:	ea40 0003 	orr.w	r0, r0, r3
   d82c4:	fa21 f304 	lsr.w	r3, r1, r4
   d82c8:	ea45 0103 	orr.w	r1, r5, r3
   d82cc:	bd30      	pop	{r4, r5, pc}
   d82ce:	f1c4 040c 	rsb	r4, r4, #12
   d82d2:	f1c4 0220 	rsb	r2, r4, #32
   d82d6:	fa20 f002 	lsr.w	r0, r0, r2
   d82da:	fa01 f304 	lsl.w	r3, r1, r4
   d82de:	ea40 0003 	orr.w	r0, r0, r3
   d82e2:	4629      	mov	r1, r5
   d82e4:	bd30      	pop	{r4, r5, pc}
   d82e6:	fa21 f004 	lsr.w	r0, r1, r4
   d82ea:	4629      	mov	r1, r5
   d82ec:	bd30      	pop	{r4, r5, pc}
   d82ee:	f094 0f00 	teq	r4, #0
   d82f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d82f6:	bf06      	itte	eq
   d82f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d82fc:	3401      	addeq	r4, #1
   d82fe:	3d01      	subne	r5, #1
   d8300:	e74e      	b.n	d81a0 <__adddf3+0x8c>
   d8302:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8306:	bf18      	it	ne
   d8308:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d830c:	d029      	beq.n	d8362 <__adddf3+0x24e>
   d830e:	ea94 0f05 	teq	r4, r5
   d8312:	bf08      	it	eq
   d8314:	ea90 0f02 	teqeq	r0, r2
   d8318:	d005      	beq.n	d8326 <__adddf3+0x212>
   d831a:	ea54 0c00 	orrs.w	ip, r4, r0
   d831e:	bf04      	itt	eq
   d8320:	4619      	moveq	r1, r3
   d8322:	4610      	moveq	r0, r2
   d8324:	bd30      	pop	{r4, r5, pc}
   d8326:	ea91 0f03 	teq	r1, r3
   d832a:	bf1e      	ittt	ne
   d832c:	2100      	movne	r1, #0
   d832e:	2000      	movne	r0, #0
   d8330:	bd30      	popne	{r4, r5, pc}
   d8332:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8336:	d105      	bne.n	d8344 <__adddf3+0x230>
   d8338:	0040      	lsls	r0, r0, #1
   d833a:	4149      	adcs	r1, r1
   d833c:	bf28      	it	cs
   d833e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8342:	bd30      	pop	{r4, r5, pc}
   d8344:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8348:	bf3c      	itt	cc
   d834a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d834e:	bd30      	popcc	{r4, r5, pc}
   d8350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8354:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8358:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d835c:	f04f 0000 	mov.w	r0, #0
   d8360:	bd30      	pop	{r4, r5, pc}
   d8362:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8366:	bf1a      	itte	ne
   d8368:	4619      	movne	r1, r3
   d836a:	4610      	movne	r0, r2
   d836c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8370:	bf1c      	itt	ne
   d8372:	460b      	movne	r3, r1
   d8374:	4602      	movne	r2, r0
   d8376:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d837a:	bf06      	itte	eq
   d837c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8380:	ea91 0f03 	teqeq	r1, r3
   d8384:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8388:	bd30      	pop	{r4, r5, pc}
   d838a:	bf00      	nop

000d838c <__aeabi_ui2d>:
   d838c:	f090 0f00 	teq	r0, #0
   d8390:	bf04      	itt	eq
   d8392:	2100      	moveq	r1, #0
   d8394:	4770      	bxeq	lr
   d8396:	b530      	push	{r4, r5, lr}
   d8398:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d839c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83a0:	f04f 0500 	mov.w	r5, #0
   d83a4:	f04f 0100 	mov.w	r1, #0
   d83a8:	e750      	b.n	d824c <__adddf3+0x138>
   d83aa:	bf00      	nop

000d83ac <__aeabi_i2d>:
   d83ac:	f090 0f00 	teq	r0, #0
   d83b0:	bf04      	itt	eq
   d83b2:	2100      	moveq	r1, #0
   d83b4:	4770      	bxeq	lr
   d83b6:	b530      	push	{r4, r5, lr}
   d83b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d83c4:	bf48      	it	mi
   d83c6:	4240      	negmi	r0, r0
   d83c8:	f04f 0100 	mov.w	r1, #0
   d83cc:	e73e      	b.n	d824c <__adddf3+0x138>
   d83ce:	bf00      	nop

000d83d0 <__aeabi_f2d>:
   d83d0:	0042      	lsls	r2, r0, #1
   d83d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d83d6:	ea4f 0131 	mov.w	r1, r1, rrx
   d83da:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d83de:	bf1f      	itttt	ne
   d83e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d83e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d83e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d83ec:	4770      	bxne	lr
   d83ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d83f2:	bf08      	it	eq
   d83f4:	4770      	bxeq	lr
   d83f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d83fa:	bf04      	itt	eq
   d83fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8400:	4770      	bxeq	lr
   d8402:	b530      	push	{r4, r5, lr}
   d8404:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d840c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8410:	e71c      	b.n	d824c <__adddf3+0x138>
   d8412:	bf00      	nop

000d8414 <__aeabi_ul2d>:
   d8414:	ea50 0201 	orrs.w	r2, r0, r1
   d8418:	bf08      	it	eq
   d841a:	4770      	bxeq	lr
   d841c:	b530      	push	{r4, r5, lr}
   d841e:	f04f 0500 	mov.w	r5, #0
   d8422:	e00a      	b.n	d843a <__aeabi_l2d+0x16>

000d8424 <__aeabi_l2d>:
   d8424:	ea50 0201 	orrs.w	r2, r0, r1
   d8428:	bf08      	it	eq
   d842a:	4770      	bxeq	lr
   d842c:	b530      	push	{r4, r5, lr}
   d842e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8432:	d502      	bpl.n	d843a <__aeabi_l2d+0x16>
   d8434:	4240      	negs	r0, r0
   d8436:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d843a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d843e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8442:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8446:	f43f aed8 	beq.w	d81fa <__adddf3+0xe6>
   d844a:	f04f 0203 	mov.w	r2, #3
   d844e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8452:	bf18      	it	ne
   d8454:	3203      	addne	r2, #3
   d8456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d845a:	bf18      	it	ne
   d845c:	3203      	addne	r2, #3
   d845e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8462:	f1c2 0320 	rsb	r3, r2, #32
   d8466:	fa00 fc03 	lsl.w	ip, r0, r3
   d846a:	fa20 f002 	lsr.w	r0, r0, r2
   d846e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8472:	ea40 000e 	orr.w	r0, r0, lr
   d8476:	fa21 f102 	lsr.w	r1, r1, r2
   d847a:	4414      	add	r4, r2
   d847c:	e6bd      	b.n	d81fa <__adddf3+0xe6>
   d847e:	bf00      	nop

000d8480 <__aeabi_dmul>:
   d8480:	b570      	push	{r4, r5, r6, lr}
   d8482:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8486:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d848a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d848e:	bf1d      	ittte	ne
   d8490:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8494:	ea94 0f0c 	teqne	r4, ip
   d8498:	ea95 0f0c 	teqne	r5, ip
   d849c:	f000 f8de 	bleq	d865c <__aeabi_dmul+0x1dc>
   d84a0:	442c      	add	r4, r5
   d84a2:	ea81 0603 	eor.w	r6, r1, r3
   d84a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d84aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d84ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d84b2:	bf18      	it	ne
   d84b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d84b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d84c0:	d038      	beq.n	d8534 <__aeabi_dmul+0xb4>
   d84c2:	fba0 ce02 	umull	ip, lr, r0, r2
   d84c6:	f04f 0500 	mov.w	r5, #0
   d84ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   d84ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d84d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d84d6:	f04f 0600 	mov.w	r6, #0
   d84da:	fbe1 5603 	umlal	r5, r6, r1, r3
   d84de:	f09c 0f00 	teq	ip, #0
   d84e2:	bf18      	it	ne
   d84e4:	f04e 0e01 	orrne.w	lr, lr, #1
   d84e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d84ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d84f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d84f4:	d204      	bcs.n	d8500 <__aeabi_dmul+0x80>
   d84f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d84fa:	416d      	adcs	r5, r5
   d84fc:	eb46 0606 	adc.w	r6, r6, r6
   d8500:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8504:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8508:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d850c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8510:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8514:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8518:	bf88      	it	hi
   d851a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d851e:	d81e      	bhi.n	d855e <__aeabi_dmul+0xde>
   d8520:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8524:	bf08      	it	eq
   d8526:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d852a:	f150 0000 	adcs.w	r0, r0, #0
   d852e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8532:	bd70      	pop	{r4, r5, r6, pc}
   d8534:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8538:	ea46 0101 	orr.w	r1, r6, r1
   d853c:	ea40 0002 	orr.w	r0, r0, r2
   d8540:	ea81 0103 	eor.w	r1, r1, r3
   d8544:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8548:	bfc2      	ittt	gt
   d854a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d854e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8552:	bd70      	popgt	{r4, r5, r6, pc}
   d8554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8558:	f04f 0e00 	mov.w	lr, #0
   d855c:	3c01      	subs	r4, #1
   d855e:	f300 80ab 	bgt.w	d86b8 <__aeabi_dmul+0x238>
   d8562:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8566:	bfde      	ittt	le
   d8568:	2000      	movle	r0, #0
   d856a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d856e:	bd70      	pople	{r4, r5, r6, pc}
   d8570:	f1c4 0400 	rsb	r4, r4, #0
   d8574:	3c20      	subs	r4, #32
   d8576:	da35      	bge.n	d85e4 <__aeabi_dmul+0x164>
   d8578:	340c      	adds	r4, #12
   d857a:	dc1b      	bgt.n	d85b4 <__aeabi_dmul+0x134>
   d857c:	f104 0414 	add.w	r4, r4, #20
   d8580:	f1c4 0520 	rsb	r5, r4, #32
   d8584:	fa00 f305 	lsl.w	r3, r0, r5
   d8588:	fa20 f004 	lsr.w	r0, r0, r4
   d858c:	fa01 f205 	lsl.w	r2, r1, r5
   d8590:	ea40 0002 	orr.w	r0, r0, r2
   d8594:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d859c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85a0:	fa21 f604 	lsr.w	r6, r1, r4
   d85a4:	eb42 0106 	adc.w	r1, r2, r6
   d85a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85ac:	bf08      	it	eq
   d85ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85b2:	bd70      	pop	{r4, r5, r6, pc}
   d85b4:	f1c4 040c 	rsb	r4, r4, #12
   d85b8:	f1c4 0520 	rsb	r5, r4, #32
   d85bc:	fa00 f304 	lsl.w	r3, r0, r4
   d85c0:	fa20 f005 	lsr.w	r0, r0, r5
   d85c4:	fa01 f204 	lsl.w	r2, r1, r4
   d85c8:	ea40 0002 	orr.w	r0, r0, r2
   d85cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85d4:	f141 0100 	adc.w	r1, r1, #0
   d85d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85dc:	bf08      	it	eq
   d85de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85e2:	bd70      	pop	{r4, r5, r6, pc}
   d85e4:	f1c4 0520 	rsb	r5, r4, #32
   d85e8:	fa00 f205 	lsl.w	r2, r0, r5
   d85ec:	ea4e 0e02 	orr.w	lr, lr, r2
   d85f0:	fa20 f304 	lsr.w	r3, r0, r4
   d85f4:	fa01 f205 	lsl.w	r2, r1, r5
   d85f8:	ea43 0302 	orr.w	r3, r3, r2
   d85fc:	fa21 f004 	lsr.w	r0, r1, r4
   d8600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8604:	fa21 f204 	lsr.w	r2, r1, r4
   d8608:	ea20 0002 	bic.w	r0, r0, r2
   d860c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8614:	bf08      	it	eq
   d8616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d861a:	bd70      	pop	{r4, r5, r6, pc}
   d861c:	f094 0f00 	teq	r4, #0
   d8620:	d10f      	bne.n	d8642 <__aeabi_dmul+0x1c2>
   d8622:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8626:	0040      	lsls	r0, r0, #1
   d8628:	eb41 0101 	adc.w	r1, r1, r1
   d862c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8630:	bf08      	it	eq
   d8632:	3c01      	subeq	r4, #1
   d8634:	d0f7      	beq.n	d8626 <__aeabi_dmul+0x1a6>
   d8636:	ea41 0106 	orr.w	r1, r1, r6
   d863a:	f095 0f00 	teq	r5, #0
   d863e:	bf18      	it	ne
   d8640:	4770      	bxne	lr
   d8642:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8646:	0052      	lsls	r2, r2, #1
   d8648:	eb43 0303 	adc.w	r3, r3, r3
   d864c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8650:	bf08      	it	eq
   d8652:	3d01      	subeq	r5, #1
   d8654:	d0f7      	beq.n	d8646 <__aeabi_dmul+0x1c6>
   d8656:	ea43 0306 	orr.w	r3, r3, r6
   d865a:	4770      	bx	lr
   d865c:	ea94 0f0c 	teq	r4, ip
   d8660:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8664:	bf18      	it	ne
   d8666:	ea95 0f0c 	teqne	r5, ip
   d866a:	d00c      	beq.n	d8686 <__aeabi_dmul+0x206>
   d866c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8670:	bf18      	it	ne
   d8672:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8676:	d1d1      	bne.n	d861c <__aeabi_dmul+0x19c>
   d8678:	ea81 0103 	eor.w	r1, r1, r3
   d867c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8680:	f04f 0000 	mov.w	r0, #0
   d8684:	bd70      	pop	{r4, r5, r6, pc}
   d8686:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d868a:	bf06      	itte	eq
   d868c:	4610      	moveq	r0, r2
   d868e:	4619      	moveq	r1, r3
   d8690:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8694:	d019      	beq.n	d86ca <__aeabi_dmul+0x24a>
   d8696:	ea94 0f0c 	teq	r4, ip
   d869a:	d102      	bne.n	d86a2 <__aeabi_dmul+0x222>
   d869c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d86a0:	d113      	bne.n	d86ca <__aeabi_dmul+0x24a>
   d86a2:	ea95 0f0c 	teq	r5, ip
   d86a6:	d105      	bne.n	d86b4 <__aeabi_dmul+0x234>
   d86a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d86ac:	bf1c      	itt	ne
   d86ae:	4610      	movne	r0, r2
   d86b0:	4619      	movne	r1, r3
   d86b2:	d10a      	bne.n	d86ca <__aeabi_dmul+0x24a>
   d86b4:	ea81 0103 	eor.w	r1, r1, r3
   d86b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d86c4:	f04f 0000 	mov.w	r0, #0
   d86c8:	bd70      	pop	{r4, r5, r6, pc}
   d86ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d86d2:	bd70      	pop	{r4, r5, r6, pc}

000d86d4 <__aeabi_ddiv>:
   d86d4:	b570      	push	{r4, r5, r6, lr}
   d86d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86e2:	bf1d      	ittte	ne
   d86e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86e8:	ea94 0f0c 	teqne	r4, ip
   d86ec:	ea95 0f0c 	teqne	r5, ip
   d86f0:	f000 f8a7 	bleq	d8842 <__aeabi_ddiv+0x16e>
   d86f4:	eba4 0405 	sub.w	r4, r4, r5
   d86f8:	ea81 0e03 	eor.w	lr, r1, r3
   d86fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8700:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8704:	f000 8088 	beq.w	d8818 <__aeabi_ddiv+0x144>
   d8708:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d870c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8710:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8714:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8718:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d871c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8720:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8724:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8728:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d872c:	429d      	cmp	r5, r3
   d872e:	bf08      	it	eq
   d8730:	4296      	cmpeq	r6, r2
   d8732:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8736:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d873a:	d202      	bcs.n	d8742 <__aeabi_ddiv+0x6e>
   d873c:	085b      	lsrs	r3, r3, #1
   d873e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8742:	1ab6      	subs	r6, r6, r2
   d8744:	eb65 0503 	sbc.w	r5, r5, r3
   d8748:	085b      	lsrs	r3, r3, #1
   d874a:	ea4f 0232 	mov.w	r2, r2, rrx
   d874e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8752:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8756:	ebb6 0e02 	subs.w	lr, r6, r2
   d875a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d875e:	bf22      	ittt	cs
   d8760:	1ab6      	subcs	r6, r6, r2
   d8762:	4675      	movcs	r5, lr
   d8764:	ea40 000c 	orrcs.w	r0, r0, ip
   d8768:	085b      	lsrs	r3, r3, #1
   d876a:	ea4f 0232 	mov.w	r2, r2, rrx
   d876e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8772:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8776:	bf22      	ittt	cs
   d8778:	1ab6      	subcs	r6, r6, r2
   d877a:	4675      	movcs	r5, lr
   d877c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8780:	085b      	lsrs	r3, r3, #1
   d8782:	ea4f 0232 	mov.w	r2, r2, rrx
   d8786:	ebb6 0e02 	subs.w	lr, r6, r2
   d878a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d878e:	bf22      	ittt	cs
   d8790:	1ab6      	subcs	r6, r6, r2
   d8792:	4675      	movcs	r5, lr
   d8794:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8798:	085b      	lsrs	r3, r3, #1
   d879a:	ea4f 0232 	mov.w	r2, r2, rrx
   d879e:	ebb6 0e02 	subs.w	lr, r6, r2
   d87a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87a6:	bf22      	ittt	cs
   d87a8:	1ab6      	subcs	r6, r6, r2
   d87aa:	4675      	movcs	r5, lr
   d87ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d87b0:	ea55 0e06 	orrs.w	lr, r5, r6
   d87b4:	d018      	beq.n	d87e8 <__aeabi_ddiv+0x114>
   d87b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d87ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d87be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d87c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d87c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d87ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d87ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d87d2:	d1c0      	bne.n	d8756 <__aeabi_ddiv+0x82>
   d87d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87d8:	d10b      	bne.n	d87f2 <__aeabi_ddiv+0x11e>
   d87da:	ea41 0100 	orr.w	r1, r1, r0
   d87de:	f04f 0000 	mov.w	r0, #0
   d87e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d87e6:	e7b6      	b.n	d8756 <__aeabi_ddiv+0x82>
   d87e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87ec:	bf04      	itt	eq
   d87ee:	4301      	orreq	r1, r0
   d87f0:	2000      	moveq	r0, #0
   d87f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d87f6:	bf88      	it	hi
   d87f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d87fc:	f63f aeaf 	bhi.w	d855e <__aeabi_dmul+0xde>
   d8800:	ebb5 0c03 	subs.w	ip, r5, r3
   d8804:	bf04      	itt	eq
   d8806:	ebb6 0c02 	subseq.w	ip, r6, r2
   d880a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d880e:	f150 0000 	adcs.w	r0, r0, #0
   d8812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8816:	bd70      	pop	{r4, r5, r6, pc}
   d8818:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d881c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8820:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8824:	bfc2      	ittt	gt
   d8826:	ebd4 050c 	rsbsgt	r5, r4, ip
   d882a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d882e:	bd70      	popgt	{r4, r5, r6, pc}
   d8830:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8834:	f04f 0e00 	mov.w	lr, #0
   d8838:	3c01      	subs	r4, #1
   d883a:	e690      	b.n	d855e <__aeabi_dmul+0xde>
   d883c:	ea45 0e06 	orr.w	lr, r5, r6
   d8840:	e68d      	b.n	d855e <__aeabi_dmul+0xde>
   d8842:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8846:	ea94 0f0c 	teq	r4, ip
   d884a:	bf08      	it	eq
   d884c:	ea95 0f0c 	teqeq	r5, ip
   d8850:	f43f af3b 	beq.w	d86ca <__aeabi_dmul+0x24a>
   d8854:	ea94 0f0c 	teq	r4, ip
   d8858:	d10a      	bne.n	d8870 <__aeabi_ddiv+0x19c>
   d885a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d885e:	f47f af34 	bne.w	d86ca <__aeabi_dmul+0x24a>
   d8862:	ea95 0f0c 	teq	r5, ip
   d8866:	f47f af25 	bne.w	d86b4 <__aeabi_dmul+0x234>
   d886a:	4610      	mov	r0, r2
   d886c:	4619      	mov	r1, r3
   d886e:	e72c      	b.n	d86ca <__aeabi_dmul+0x24a>
   d8870:	ea95 0f0c 	teq	r5, ip
   d8874:	d106      	bne.n	d8884 <__aeabi_ddiv+0x1b0>
   d8876:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d887a:	f43f aefd 	beq.w	d8678 <__aeabi_dmul+0x1f8>
   d887e:	4610      	mov	r0, r2
   d8880:	4619      	mov	r1, r3
   d8882:	e722      	b.n	d86ca <__aeabi_dmul+0x24a>
   d8884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8888:	bf18      	it	ne
   d888a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d888e:	f47f aec5 	bne.w	d861c <__aeabi_dmul+0x19c>
   d8892:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8896:	f47f af0d 	bne.w	d86b4 <__aeabi_dmul+0x234>
   d889a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d889e:	f47f aeeb 	bne.w	d8678 <__aeabi_dmul+0x1f8>
   d88a2:	e712      	b.n	d86ca <__aeabi_dmul+0x24a>

000d88a4 <__gedf2>:
   d88a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d88a8:	e006      	b.n	d88b8 <__cmpdf2+0x4>
   d88aa:	bf00      	nop

000d88ac <__ledf2>:
   d88ac:	f04f 0c01 	mov.w	ip, #1
   d88b0:	e002      	b.n	d88b8 <__cmpdf2+0x4>
   d88b2:	bf00      	nop

000d88b4 <__cmpdf2>:
   d88b4:	f04f 0c01 	mov.w	ip, #1
   d88b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d88bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d88c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88c8:	bf18      	it	ne
   d88ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d88ce:	d01b      	beq.n	d8908 <__cmpdf2+0x54>
   d88d0:	b001      	add	sp, #4
   d88d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d88d6:	bf0c      	ite	eq
   d88d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d88dc:	ea91 0f03 	teqne	r1, r3
   d88e0:	bf02      	ittt	eq
   d88e2:	ea90 0f02 	teqeq	r0, r2
   d88e6:	2000      	moveq	r0, #0
   d88e8:	4770      	bxeq	lr
   d88ea:	f110 0f00 	cmn.w	r0, #0
   d88ee:	ea91 0f03 	teq	r1, r3
   d88f2:	bf58      	it	pl
   d88f4:	4299      	cmppl	r1, r3
   d88f6:	bf08      	it	eq
   d88f8:	4290      	cmpeq	r0, r2
   d88fa:	bf2c      	ite	cs
   d88fc:	17d8      	asrcs	r0, r3, #31
   d88fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8902:	f040 0001 	orr.w	r0, r0, #1
   d8906:	4770      	bx	lr
   d8908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d890c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8910:	d102      	bne.n	d8918 <__cmpdf2+0x64>
   d8912:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8916:	d107      	bne.n	d8928 <__cmpdf2+0x74>
   d8918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d891c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8920:	d1d6      	bne.n	d88d0 <__cmpdf2+0x1c>
   d8922:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8926:	d0d3      	beq.n	d88d0 <__cmpdf2+0x1c>
   d8928:	f85d 0b04 	ldr.w	r0, [sp], #4
   d892c:	4770      	bx	lr
   d892e:	bf00      	nop

000d8930 <__aeabi_cdrcmple>:
   d8930:	4684      	mov	ip, r0
   d8932:	4610      	mov	r0, r2
   d8934:	4662      	mov	r2, ip
   d8936:	468c      	mov	ip, r1
   d8938:	4619      	mov	r1, r3
   d893a:	4663      	mov	r3, ip
   d893c:	e000      	b.n	d8940 <__aeabi_cdcmpeq>
   d893e:	bf00      	nop

000d8940 <__aeabi_cdcmpeq>:
   d8940:	b501      	push	{r0, lr}
   d8942:	f7ff ffb7 	bl	d88b4 <__cmpdf2>
   d8946:	2800      	cmp	r0, #0
   d8948:	bf48      	it	mi
   d894a:	f110 0f00 	cmnmi.w	r0, #0
   d894e:	bd01      	pop	{r0, pc}

000d8950 <__aeabi_dcmpeq>:
   d8950:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8954:	f7ff fff4 	bl	d8940 <__aeabi_cdcmpeq>
   d8958:	bf0c      	ite	eq
   d895a:	2001      	moveq	r0, #1
   d895c:	2000      	movne	r0, #0
   d895e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8962:	bf00      	nop

000d8964 <__aeabi_dcmplt>:
   d8964:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8968:	f7ff ffea 	bl	d8940 <__aeabi_cdcmpeq>
   d896c:	bf34      	ite	cc
   d896e:	2001      	movcc	r0, #1
   d8970:	2000      	movcs	r0, #0
   d8972:	f85d fb08 	ldr.w	pc, [sp], #8
   d8976:	bf00      	nop

000d8978 <__aeabi_dcmple>:
   d8978:	f84d ed08 	str.w	lr, [sp, #-8]!
   d897c:	f7ff ffe0 	bl	d8940 <__aeabi_cdcmpeq>
   d8980:	bf94      	ite	ls
   d8982:	2001      	movls	r0, #1
   d8984:	2000      	movhi	r0, #0
   d8986:	f85d fb08 	ldr.w	pc, [sp], #8
   d898a:	bf00      	nop

000d898c <__aeabi_dcmpge>:
   d898c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8990:	f7ff ffce 	bl	d8930 <__aeabi_cdrcmple>
   d8994:	bf94      	ite	ls
   d8996:	2001      	movls	r0, #1
   d8998:	2000      	movhi	r0, #0
   d899a:	f85d fb08 	ldr.w	pc, [sp], #8
   d899e:	bf00      	nop

000d89a0 <__aeabi_dcmpgt>:
   d89a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89a4:	f7ff ffc4 	bl	d8930 <__aeabi_cdrcmple>
   d89a8:	bf34      	ite	cc
   d89aa:	2001      	movcc	r0, #1
   d89ac:	2000      	movcs	r0, #0
   d89ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d89b2:	bf00      	nop

000d89b4 <__aeabi_d2uiz>:
   d89b4:	004a      	lsls	r2, r1, #1
   d89b6:	d211      	bcs.n	d89dc <__aeabi_d2uiz+0x28>
   d89b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d89bc:	d211      	bcs.n	d89e2 <__aeabi_d2uiz+0x2e>
   d89be:	d50d      	bpl.n	d89dc <__aeabi_d2uiz+0x28>
   d89c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d89c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d89c8:	d40e      	bmi.n	d89e8 <__aeabi_d2uiz+0x34>
   d89ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d89ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d89d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d89d6:	fa23 f002 	lsr.w	r0, r3, r2
   d89da:	4770      	bx	lr
   d89dc:	f04f 0000 	mov.w	r0, #0
   d89e0:	4770      	bx	lr
   d89e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d89e6:	d102      	bne.n	d89ee <__aeabi_d2uiz+0x3a>
   d89e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d89ec:	4770      	bx	lr
   d89ee:	f04f 0000 	mov.w	r0, #0
   d89f2:	4770      	bx	lr

000d89f4 <__aeabi_d2f>:
   d89f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d89f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d89fc:	bf24      	itt	cs
   d89fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8a06:	d90d      	bls.n	d8a24 <__aeabi_d2f+0x30>
   d8a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8a1c:	bf08      	it	eq
   d8a1e:	f020 0001 	biceq.w	r0, r0, #1
   d8a22:	4770      	bx	lr
   d8a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8a28:	d121      	bne.n	d8a6e <__aeabi_d2f+0x7a>
   d8a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8a2e:	bfbc      	itt	lt
   d8a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8a34:	4770      	bxlt	lr
   d8a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8a3e:	f1c2 0218 	rsb	r2, r2, #24
   d8a42:	f1c2 0c20 	rsb	ip, r2, #32
   d8a46:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a4a:	fa20 f002 	lsr.w	r0, r0, r2
   d8a4e:	bf18      	it	ne
   d8a50:	f040 0001 	orrne.w	r0, r0, #1
   d8a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8a60:	ea40 000c 	orr.w	r0, r0, ip
   d8a64:	fa23 f302 	lsr.w	r3, r3, r2
   d8a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8a6c:	e7cc      	b.n	d8a08 <__aeabi_d2f+0x14>
   d8a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8a72:	d107      	bne.n	d8a84 <__aeabi_d2f+0x90>
   d8a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8a78:	bf1e      	ittt	ne
   d8a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8a82:	4770      	bxne	lr
   d8a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8a90:	4770      	bx	lr
   d8a92:	bf00      	nop

000d8a94 <__aeabi_d2ulz>:
   d8a94:	b5d0      	push	{r4, r6, r7, lr}
   d8a96:	4b0c      	ldr	r3, [pc, #48]	; (d8ac8 <__aeabi_d2ulz+0x34>)
   d8a98:	2200      	movs	r2, #0
   d8a9a:	4606      	mov	r6, r0
   d8a9c:	460f      	mov	r7, r1
   d8a9e:	f7ff fcef 	bl	d8480 <__aeabi_dmul>
   d8aa2:	f7ff ff87 	bl	d89b4 <__aeabi_d2uiz>
   d8aa6:	4604      	mov	r4, r0
   d8aa8:	f7ff fc70 	bl	d838c <__aeabi_ui2d>
   d8aac:	4b07      	ldr	r3, [pc, #28]	; (d8acc <__aeabi_d2ulz+0x38>)
   d8aae:	2200      	movs	r2, #0
   d8ab0:	f7ff fce6 	bl	d8480 <__aeabi_dmul>
   d8ab4:	4602      	mov	r2, r0
   d8ab6:	460b      	mov	r3, r1
   d8ab8:	4630      	mov	r0, r6
   d8aba:	4639      	mov	r1, r7
   d8abc:	f7ff fb28 	bl	d8110 <__aeabi_dsub>
   d8ac0:	f7ff ff78 	bl	d89b4 <__aeabi_d2uiz>
   d8ac4:	4621      	mov	r1, r4
   d8ac6:	bdd0      	pop	{r4, r6, r7, pc}
   d8ac8:	3df00000 	.word	0x3df00000
   d8acc:	41f00000 	.word	0x41f00000

000d8ad0 <asctime_r>:
   d8ad0:	b510      	push	{r4, lr}
   d8ad2:	460c      	mov	r4, r1
   d8ad4:	6941      	ldr	r1, [r0, #20]
   d8ad6:	6903      	ldr	r3, [r0, #16]
   d8ad8:	6982      	ldr	r2, [r0, #24]
   d8ada:	b086      	sub	sp, #24
   d8adc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8ae0:	9104      	str	r1, [sp, #16]
   d8ae2:	6801      	ldr	r1, [r0, #0]
   d8ae4:	9103      	str	r1, [sp, #12]
   d8ae6:	6841      	ldr	r1, [r0, #4]
   d8ae8:	9102      	str	r1, [sp, #8]
   d8aea:	6881      	ldr	r1, [r0, #8]
   d8aec:	9101      	str	r1, [sp, #4]
   d8aee:	68c1      	ldr	r1, [r0, #12]
   d8af0:	9100      	str	r1, [sp, #0]
   d8af2:	4907      	ldr	r1, [pc, #28]	; (d8b10 <asctime_r+0x40>)
   d8af4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8af8:	440b      	add	r3, r1
   d8afa:	4906      	ldr	r1, [pc, #24]	; (d8b14 <asctime_r+0x44>)
   d8afc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8b00:	440a      	add	r2, r1
   d8b02:	4620      	mov	r0, r4
   d8b04:	4904      	ldr	r1, [pc, #16]	; (d8b18 <asctime_r+0x48>)
   d8b06:	f7fd ffd1 	bl	d6aac <siprintf>
   d8b0a:	4620      	mov	r0, r4
   d8b0c:	b006      	add	sp, #24
   d8b0e:	bd10      	pop	{r4, pc}
   d8b10:	000db242 	.word	0x000db242
   d8b14:	000db22d 	.word	0x000db22d
   d8b18:	000db20d 	.word	0x000db20d

000d8b1c <atof>:
   d8b1c:	2100      	movs	r1, #0
   d8b1e:	f000 befd 	b.w	d991c <strtod>

000d8b22 <atoi>:
   d8b22:	220a      	movs	r2, #10
   d8b24:	2100      	movs	r1, #0
   d8b26:	f000 bf7f 	b.w	d9a28 <strtol>
	...

000d8b2c <__cxa_atexit>:
   d8b2c:	b510      	push	{r4, lr}
   d8b2e:	4c05      	ldr	r4, [pc, #20]	; (d8b44 <__cxa_atexit+0x18>)
   d8b30:	4613      	mov	r3, r2
   d8b32:	b12c      	cbz	r4, d8b40 <__cxa_atexit+0x14>
   d8b34:	460a      	mov	r2, r1
   d8b36:	4601      	mov	r1, r0
   d8b38:	2002      	movs	r0, #2
   d8b3a:	f3af 8000 	nop.w
   d8b3e:	bd10      	pop	{r4, pc}
   d8b40:	4620      	mov	r0, r4
   d8b42:	e7fc      	b.n	d8b3e <__cxa_atexit+0x12>
   d8b44:	00000000 	.word	0x00000000

000d8b48 <gmtime>:
   d8b48:	b538      	push	{r3, r4, r5, lr}
   d8b4a:	4b07      	ldr	r3, [pc, #28]	; (d8b68 <gmtime+0x20>)
   d8b4c:	681d      	ldr	r5, [r3, #0]
   d8b4e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8b50:	4604      	mov	r4, r0
   d8b52:	b91b      	cbnz	r3, d8b5c <gmtime+0x14>
   d8b54:	2024      	movs	r0, #36	; 0x24
   d8b56:	f7fd ff91 	bl	d6a7c <malloc>
   d8b5a:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8b5c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8b5e:	4620      	mov	r0, r4
   d8b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8b64:	f7fd bfda 	b.w	d6b1c <gmtime_r>
   d8b68:	2003e244 	.word	0x2003e244

000d8b6c <memcpy>:
   d8b6c:	440a      	add	r2, r1
   d8b6e:	4291      	cmp	r1, r2
   d8b70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8b74:	d100      	bne.n	d8b78 <memcpy+0xc>
   d8b76:	4770      	bx	lr
   d8b78:	b510      	push	{r4, lr}
   d8b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b82:	4291      	cmp	r1, r2
   d8b84:	d1f9      	bne.n	d8b7a <memcpy+0xe>
   d8b86:	bd10      	pop	{r4, pc}

000d8b88 <memmove>:
   d8b88:	4288      	cmp	r0, r1
   d8b8a:	b510      	push	{r4, lr}
   d8b8c:	eb01 0402 	add.w	r4, r1, r2
   d8b90:	d902      	bls.n	d8b98 <memmove+0x10>
   d8b92:	4284      	cmp	r4, r0
   d8b94:	4623      	mov	r3, r4
   d8b96:	d807      	bhi.n	d8ba8 <memmove+0x20>
   d8b98:	1e43      	subs	r3, r0, #1
   d8b9a:	42a1      	cmp	r1, r4
   d8b9c:	d008      	beq.n	d8bb0 <memmove+0x28>
   d8b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8ba6:	e7f8      	b.n	d8b9a <memmove+0x12>
   d8ba8:	4402      	add	r2, r0
   d8baa:	4601      	mov	r1, r0
   d8bac:	428a      	cmp	r2, r1
   d8bae:	d100      	bne.n	d8bb2 <memmove+0x2a>
   d8bb0:	bd10      	pop	{r4, pc}
   d8bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8bba:	e7f7      	b.n	d8bac <memmove+0x24>

000d8bbc <memset>:
   d8bbc:	4402      	add	r2, r0
   d8bbe:	4603      	mov	r3, r0
   d8bc0:	4293      	cmp	r3, r2
   d8bc2:	d100      	bne.n	d8bc6 <memset+0xa>
   d8bc4:	4770      	bx	lr
   d8bc6:	f803 1b01 	strb.w	r1, [r3], #1
   d8bca:	e7f9      	b.n	d8bc0 <memset+0x4>

000d8bcc <srand>:
   d8bcc:	b538      	push	{r3, r4, r5, lr}
   d8bce:	4b0d      	ldr	r3, [pc, #52]	; (d8c04 <srand+0x38>)
   d8bd0:	681d      	ldr	r5, [r3, #0]
   d8bd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8bd4:	4604      	mov	r4, r0
   d8bd6:	b97b      	cbnz	r3, d8bf8 <srand+0x2c>
   d8bd8:	2018      	movs	r0, #24
   d8bda:	f7fd ff4f 	bl	d6a7c <malloc>
   d8bde:	4a0a      	ldr	r2, [pc, #40]	; (d8c08 <srand+0x3c>)
   d8be0:	4b0a      	ldr	r3, [pc, #40]	; (d8c0c <srand+0x40>)
   d8be2:	63a8      	str	r0, [r5, #56]	; 0x38
   d8be4:	e9c0 2300 	strd	r2, r3, [r0]
   d8be8:	4b09      	ldr	r3, [pc, #36]	; (d8c10 <srand+0x44>)
   d8bea:	6083      	str	r3, [r0, #8]
   d8bec:	230b      	movs	r3, #11
   d8bee:	8183      	strh	r3, [r0, #12]
   d8bf0:	2201      	movs	r2, #1
   d8bf2:	2300      	movs	r3, #0
   d8bf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8bf8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8bfa:	2200      	movs	r2, #0
   d8bfc:	611c      	str	r4, [r3, #16]
   d8bfe:	615a      	str	r2, [r3, #20]
   d8c00:	bd38      	pop	{r3, r4, r5, pc}
   d8c02:	bf00      	nop
   d8c04:	2003e244 	.word	0x2003e244
   d8c08:	abcd330e 	.word	0xabcd330e
   d8c0c:	e66d1234 	.word	0xe66d1234
   d8c10:	0005deec 	.word	0x0005deec

000d8c14 <strcmp>:
   d8c14:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8c18:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8c1c:	2a01      	cmp	r2, #1
   d8c1e:	bf28      	it	cs
   d8c20:	429a      	cmpcs	r2, r3
   d8c22:	d0f7      	beq.n	d8c14 <strcmp>
   d8c24:	1ad0      	subs	r0, r2, r3
   d8c26:	4770      	bx	lr

000d8c28 <strcpy>:
   d8c28:	4603      	mov	r3, r0
   d8c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8c2e:	f803 2b01 	strb.w	r2, [r3], #1
   d8c32:	2a00      	cmp	r2, #0
   d8c34:	d1f9      	bne.n	d8c2a <strcpy+0x2>
   d8c36:	4770      	bx	lr

000d8c38 <strdup>:
   d8c38:	4b02      	ldr	r3, [pc, #8]	; (d8c44 <strdup+0xc>)
   d8c3a:	4601      	mov	r1, r0
   d8c3c:	6818      	ldr	r0, [r3, #0]
   d8c3e:	f000 b803 	b.w	d8c48 <_strdup_r>
   d8c42:	bf00      	nop
   d8c44:	2003e244 	.word	0x2003e244

000d8c48 <_strdup_r>:
   d8c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c4a:	4604      	mov	r4, r0
   d8c4c:	4608      	mov	r0, r1
   d8c4e:	460d      	mov	r5, r1
   d8c50:	f000 f80f 	bl	d8c72 <strlen>
   d8c54:	1c42      	adds	r2, r0, #1
   d8c56:	4611      	mov	r1, r2
   d8c58:	4620      	mov	r0, r4
   d8c5a:	9201      	str	r2, [sp, #4]
   d8c5c:	f7fd ff3e 	bl	d6adc <_malloc_r>
   d8c60:	4604      	mov	r4, r0
   d8c62:	b118      	cbz	r0, d8c6c <_strdup_r+0x24>
   d8c64:	9a01      	ldr	r2, [sp, #4]
   d8c66:	4629      	mov	r1, r5
   d8c68:	f7ff ff80 	bl	d8b6c <memcpy>
   d8c6c:	4620      	mov	r0, r4
   d8c6e:	b003      	add	sp, #12
   d8c70:	bd30      	pop	{r4, r5, pc}

000d8c72 <strlen>:
   d8c72:	4603      	mov	r3, r0
   d8c74:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8c78:	2a00      	cmp	r2, #0
   d8c7a:	d1fb      	bne.n	d8c74 <strlen+0x2>
   d8c7c:	1a18      	subs	r0, r3, r0
   d8c7e:	3801      	subs	r0, #1
   d8c80:	4770      	bx	lr

000d8c82 <strncmp>:
   d8c82:	b510      	push	{r4, lr}
   d8c84:	b16a      	cbz	r2, d8ca2 <strncmp+0x20>
   d8c86:	3901      	subs	r1, #1
   d8c88:	1884      	adds	r4, r0, r2
   d8c8a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8c8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8c92:	4293      	cmp	r3, r2
   d8c94:	d103      	bne.n	d8c9e <strncmp+0x1c>
   d8c96:	42a0      	cmp	r0, r4
   d8c98:	d001      	beq.n	d8c9e <strncmp+0x1c>
   d8c9a:	2b00      	cmp	r3, #0
   d8c9c:	d1f5      	bne.n	d8c8a <strncmp+0x8>
   d8c9e:	1a98      	subs	r0, r3, r2
   d8ca0:	bd10      	pop	{r4, pc}
   d8ca2:	4610      	mov	r0, r2
   d8ca4:	e7fc      	b.n	d8ca0 <strncmp+0x1e>

000d8ca6 <strncpy>:
   d8ca6:	b510      	push	{r4, lr}
   d8ca8:	3901      	subs	r1, #1
   d8caa:	4603      	mov	r3, r0
   d8cac:	b132      	cbz	r2, d8cbc <strncpy+0x16>
   d8cae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8cb2:	f803 4b01 	strb.w	r4, [r3], #1
   d8cb6:	3a01      	subs	r2, #1
   d8cb8:	2c00      	cmp	r4, #0
   d8cba:	d1f7      	bne.n	d8cac <strncpy+0x6>
   d8cbc:	441a      	add	r2, r3
   d8cbe:	2100      	movs	r1, #0
   d8cc0:	4293      	cmp	r3, r2
   d8cc2:	d100      	bne.n	d8cc6 <strncpy+0x20>
   d8cc4:	bd10      	pop	{r4, pc}
   d8cc6:	f803 1b01 	strb.w	r1, [r3], #1
   d8cca:	e7f9      	b.n	d8cc0 <strncpy+0x1a>

000d8ccc <sulp>:
   d8ccc:	b570      	push	{r4, r5, r6, lr}
   d8cce:	4604      	mov	r4, r0
   d8cd0:	460d      	mov	r5, r1
   d8cd2:	ec45 4b10 	vmov	d0, r4, r5
   d8cd6:	4616      	mov	r6, r2
   d8cd8:	f001 fd1c 	bl	da714 <__ulp>
   d8cdc:	ec51 0b10 	vmov	r0, r1, d0
   d8ce0:	b17e      	cbz	r6, d8d02 <sulp+0x36>
   d8ce2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8ce6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8cea:	2b00      	cmp	r3, #0
   d8cec:	dd09      	ble.n	d8d02 <sulp+0x36>
   d8cee:	051b      	lsls	r3, r3, #20
   d8cf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8cf4:	2400      	movs	r4, #0
   d8cf6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8cfa:	4622      	mov	r2, r4
   d8cfc:	462b      	mov	r3, r5
   d8cfe:	f7ff fbbf 	bl	d8480 <__aeabi_dmul>
   d8d02:	bd70      	pop	{r4, r5, r6, pc}
   d8d04:	0000      	movs	r0, r0
	...

000d8d08 <_strtod_l>:
   d8d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d0c:	b0a3      	sub	sp, #140	; 0x8c
   d8d0e:	461f      	mov	r7, r3
   d8d10:	2300      	movs	r3, #0
   d8d12:	931e      	str	r3, [sp, #120]	; 0x78
   d8d14:	4ba4      	ldr	r3, [pc, #656]	; (d8fa8 <_strtod_l+0x2a0>)
   d8d16:	9219      	str	r2, [sp, #100]	; 0x64
   d8d18:	681b      	ldr	r3, [r3, #0]
   d8d1a:	9307      	str	r3, [sp, #28]
   d8d1c:	4604      	mov	r4, r0
   d8d1e:	4618      	mov	r0, r3
   d8d20:	4688      	mov	r8, r1
   d8d22:	f7ff ffa6 	bl	d8c72 <strlen>
   d8d26:	f04f 0a00 	mov.w	sl, #0
   d8d2a:	4605      	mov	r5, r0
   d8d2c:	f04f 0b00 	mov.w	fp, #0
   d8d30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8d36:	781a      	ldrb	r2, [r3, #0]
   d8d38:	2a2b      	cmp	r2, #43	; 0x2b
   d8d3a:	d04c      	beq.n	d8dd6 <_strtod_l+0xce>
   d8d3c:	d839      	bhi.n	d8db2 <_strtod_l+0xaa>
   d8d3e:	2a0d      	cmp	r2, #13
   d8d40:	d832      	bhi.n	d8da8 <_strtod_l+0xa0>
   d8d42:	2a08      	cmp	r2, #8
   d8d44:	d832      	bhi.n	d8dac <_strtod_l+0xa4>
   d8d46:	2a00      	cmp	r2, #0
   d8d48:	d03c      	beq.n	d8dc4 <_strtod_l+0xbc>
   d8d4a:	2300      	movs	r3, #0
   d8d4c:	930e      	str	r3, [sp, #56]	; 0x38
   d8d4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8d50:	7833      	ldrb	r3, [r6, #0]
   d8d52:	2b30      	cmp	r3, #48	; 0x30
   d8d54:	f040 80b4 	bne.w	d8ec0 <_strtod_l+0x1b8>
   d8d58:	7873      	ldrb	r3, [r6, #1]
   d8d5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8d5e:	2b58      	cmp	r3, #88	; 0x58
   d8d60:	d16c      	bne.n	d8e3c <_strtod_l+0x134>
   d8d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8d64:	9301      	str	r3, [sp, #4]
   d8d66:	ab1e      	add	r3, sp, #120	; 0x78
   d8d68:	9702      	str	r7, [sp, #8]
   d8d6a:	9300      	str	r3, [sp, #0]
   d8d6c:	4a8f      	ldr	r2, [pc, #572]	; (d8fac <_strtod_l+0x2a4>)
   d8d6e:	ab1f      	add	r3, sp, #124	; 0x7c
   d8d70:	a91d      	add	r1, sp, #116	; 0x74
   d8d72:	4620      	mov	r0, r4
   d8d74:	f000 feca 	bl	d9b0c <__gethex>
   d8d78:	f010 0707 	ands.w	r7, r0, #7
   d8d7c:	4605      	mov	r5, r0
   d8d7e:	d005      	beq.n	d8d8c <_strtod_l+0x84>
   d8d80:	2f06      	cmp	r7, #6
   d8d82:	d12a      	bne.n	d8dda <_strtod_l+0xd2>
   d8d84:	3601      	adds	r6, #1
   d8d86:	2300      	movs	r3, #0
   d8d88:	961d      	str	r6, [sp, #116]	; 0x74
   d8d8a:	930e      	str	r3, [sp, #56]	; 0x38
   d8d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8d8e:	2b00      	cmp	r3, #0
   d8d90:	f040 8596 	bne.w	d98c0 <_strtod_l+0xbb8>
   d8d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8d96:	b1db      	cbz	r3, d8dd0 <_strtod_l+0xc8>
   d8d98:	4652      	mov	r2, sl
   d8d9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8d9e:	ec43 2b10 	vmov	d0, r2, r3
   d8da2:	b023      	add	sp, #140	; 0x8c
   d8da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8da8:	2a20      	cmp	r2, #32
   d8daa:	d1ce      	bne.n	d8d4a <_strtod_l+0x42>
   d8dac:	3301      	adds	r3, #1
   d8dae:	931d      	str	r3, [sp, #116]	; 0x74
   d8db0:	e7c0      	b.n	d8d34 <_strtod_l+0x2c>
   d8db2:	2a2d      	cmp	r2, #45	; 0x2d
   d8db4:	d1c9      	bne.n	d8d4a <_strtod_l+0x42>
   d8db6:	2201      	movs	r2, #1
   d8db8:	920e      	str	r2, [sp, #56]	; 0x38
   d8dba:	1c5a      	adds	r2, r3, #1
   d8dbc:	921d      	str	r2, [sp, #116]	; 0x74
   d8dbe:	785b      	ldrb	r3, [r3, #1]
   d8dc0:	2b00      	cmp	r3, #0
   d8dc2:	d1c4      	bne.n	d8d4e <_strtod_l+0x46>
   d8dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8dc6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8dca:	2b00      	cmp	r3, #0
   d8dcc:	f040 8576 	bne.w	d98bc <_strtod_l+0xbb4>
   d8dd0:	4652      	mov	r2, sl
   d8dd2:	465b      	mov	r3, fp
   d8dd4:	e7e3      	b.n	d8d9e <_strtod_l+0x96>
   d8dd6:	2200      	movs	r2, #0
   d8dd8:	e7ee      	b.n	d8db8 <_strtod_l+0xb0>
   d8dda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8ddc:	b13a      	cbz	r2, d8dee <_strtod_l+0xe6>
   d8dde:	2135      	movs	r1, #53	; 0x35
   d8de0:	a820      	add	r0, sp, #128	; 0x80
   d8de2:	f001 fd96 	bl	da912 <__copybits>
   d8de6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8de8:	4620      	mov	r0, r4
   d8dea:	f001 f9cb 	bl	da184 <_Bfree>
   d8dee:	3f01      	subs	r7, #1
   d8df0:	2f05      	cmp	r7, #5
   d8df2:	d807      	bhi.n	d8e04 <_strtod_l+0xfc>
   d8df4:	e8df f007 	tbb	[pc, r7]
   d8df8:	1d180b0e 	.word	0x1d180b0e
   d8dfc:	030e      	.short	0x030e
   d8dfe:	f04f 0b00 	mov.w	fp, #0
   d8e02:	46da      	mov	sl, fp
   d8e04:	0728      	lsls	r0, r5, #28
   d8e06:	d5c1      	bpl.n	d8d8c <_strtod_l+0x84>
   d8e08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8e0c:	e7be      	b.n	d8d8c <_strtod_l+0x84>
   d8e0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8e12:	e7f7      	b.n	d8e04 <_strtod_l+0xfc>
   d8e14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8e18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8e1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8e1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8e22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8e26:	e7ed      	b.n	d8e04 <_strtod_l+0xfc>
   d8e28:	f8df b184 	ldr.w	fp, [pc, #388]	; d8fb0 <_strtod_l+0x2a8>
   d8e2c:	f04f 0a00 	mov.w	sl, #0
   d8e30:	e7e8      	b.n	d8e04 <_strtod_l+0xfc>
   d8e32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8e36:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8e3a:	e7e3      	b.n	d8e04 <_strtod_l+0xfc>
   d8e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e3e:	1c5a      	adds	r2, r3, #1
   d8e40:	921d      	str	r2, [sp, #116]	; 0x74
   d8e42:	785b      	ldrb	r3, [r3, #1]
   d8e44:	2b30      	cmp	r3, #48	; 0x30
   d8e46:	d0f9      	beq.n	d8e3c <_strtod_l+0x134>
   d8e48:	2b00      	cmp	r3, #0
   d8e4a:	d09f      	beq.n	d8d8c <_strtod_l+0x84>
   d8e4c:	2301      	movs	r3, #1
   d8e4e:	f04f 0900 	mov.w	r9, #0
   d8e52:	9304      	str	r3, [sp, #16]
   d8e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e56:	930a      	str	r3, [sp, #40]	; 0x28
   d8e58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8e5c:	464f      	mov	r7, r9
   d8e5e:	220a      	movs	r2, #10
   d8e60:	981d      	ldr	r0, [sp, #116]	; 0x74
   d8e62:	7806      	ldrb	r6, [r0, #0]
   d8e64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8e68:	b2d9      	uxtb	r1, r3
   d8e6a:	2909      	cmp	r1, #9
   d8e6c:	d92a      	bls.n	d8ec4 <_strtod_l+0x1bc>
   d8e6e:	9907      	ldr	r1, [sp, #28]
   d8e70:	462a      	mov	r2, r5
   d8e72:	f7ff ff06 	bl	d8c82 <strncmp>
   d8e76:	b398      	cbz	r0, d8ee0 <_strtod_l+0x1d8>
   d8e78:	2000      	movs	r0, #0
   d8e7a:	4633      	mov	r3, r6
   d8e7c:	463d      	mov	r5, r7
   d8e7e:	9007      	str	r0, [sp, #28]
   d8e80:	4602      	mov	r2, r0
   d8e82:	2b65      	cmp	r3, #101	; 0x65
   d8e84:	d001      	beq.n	d8e8a <_strtod_l+0x182>
   d8e86:	2b45      	cmp	r3, #69	; 0x45
   d8e88:	d118      	bne.n	d8ebc <_strtod_l+0x1b4>
   d8e8a:	b91d      	cbnz	r5, d8e94 <_strtod_l+0x18c>
   d8e8c:	9b04      	ldr	r3, [sp, #16]
   d8e8e:	4303      	orrs	r3, r0
   d8e90:	d098      	beq.n	d8dc4 <_strtod_l+0xbc>
   d8e92:	2500      	movs	r5, #0
   d8e94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8e98:	f108 0301 	add.w	r3, r8, #1
   d8e9c:	931d      	str	r3, [sp, #116]	; 0x74
   d8e9e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d8ea2:	2b2b      	cmp	r3, #43	; 0x2b
   d8ea4:	d075      	beq.n	d8f92 <_strtod_l+0x28a>
   d8ea6:	2b2d      	cmp	r3, #45	; 0x2d
   d8ea8:	d07b      	beq.n	d8fa2 <_strtod_l+0x29a>
   d8eaa:	f04f 0c00 	mov.w	ip, #0
   d8eae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8eb2:	2909      	cmp	r1, #9
   d8eb4:	f240 8082 	bls.w	d8fbc <_strtod_l+0x2b4>
   d8eb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8ebc:	2600      	movs	r6, #0
   d8ebe:	e09d      	b.n	d8ffc <_strtod_l+0x2f4>
   d8ec0:	2300      	movs	r3, #0
   d8ec2:	e7c4      	b.n	d8e4e <_strtod_l+0x146>
   d8ec4:	2f08      	cmp	r7, #8
   d8ec6:	bfd8      	it	le
   d8ec8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d8eca:	f100 0001 	add.w	r0, r0, #1
   d8ece:	bfda      	itte	le
   d8ed0:	fb02 3301 	mlale	r3, r2, r1, r3
   d8ed4:	9309      	strle	r3, [sp, #36]	; 0x24
   d8ed6:	fb02 3909 	mlagt	r9, r2, r9, r3
   d8eda:	3701      	adds	r7, #1
   d8edc:	901d      	str	r0, [sp, #116]	; 0x74
   d8ede:	e7bf      	b.n	d8e60 <_strtod_l+0x158>
   d8ee0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8ee2:	195a      	adds	r2, r3, r5
   d8ee4:	921d      	str	r2, [sp, #116]	; 0x74
   d8ee6:	5d5b      	ldrb	r3, [r3, r5]
   d8ee8:	2f00      	cmp	r7, #0
   d8eea:	d037      	beq.n	d8f5c <_strtod_l+0x254>
   d8eec:	9007      	str	r0, [sp, #28]
   d8eee:	463d      	mov	r5, r7
   d8ef0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d8ef4:	2a09      	cmp	r2, #9
   d8ef6:	d912      	bls.n	d8f1e <_strtod_l+0x216>
   d8ef8:	2201      	movs	r2, #1
   d8efa:	e7c2      	b.n	d8e82 <_strtod_l+0x17a>
   d8efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8efe:	1c5a      	adds	r2, r3, #1
   d8f00:	921d      	str	r2, [sp, #116]	; 0x74
   d8f02:	785b      	ldrb	r3, [r3, #1]
   d8f04:	3001      	adds	r0, #1
   d8f06:	2b30      	cmp	r3, #48	; 0x30
   d8f08:	d0f8      	beq.n	d8efc <_strtod_l+0x1f4>
   d8f0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8f0e:	2a08      	cmp	r2, #8
   d8f10:	f200 84db 	bhi.w	d98ca <_strtod_l+0xbc2>
   d8f14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d8f16:	9007      	str	r0, [sp, #28]
   d8f18:	2000      	movs	r0, #0
   d8f1a:	920a      	str	r2, [sp, #40]	; 0x28
   d8f1c:	4605      	mov	r5, r0
   d8f1e:	3b30      	subs	r3, #48	; 0x30
   d8f20:	f100 0201 	add.w	r2, r0, #1
   d8f24:	d014      	beq.n	d8f50 <_strtod_l+0x248>
   d8f26:	9907      	ldr	r1, [sp, #28]
   d8f28:	4411      	add	r1, r2
   d8f2a:	9107      	str	r1, [sp, #28]
   d8f2c:	462a      	mov	r2, r5
   d8f2e:	eb00 0e05 	add.w	lr, r0, r5
   d8f32:	210a      	movs	r1, #10
   d8f34:	4572      	cmp	r2, lr
   d8f36:	d113      	bne.n	d8f60 <_strtod_l+0x258>
   d8f38:	182a      	adds	r2, r5, r0
   d8f3a:	2a08      	cmp	r2, #8
   d8f3c:	f105 0501 	add.w	r5, r5, #1
   d8f40:	4405      	add	r5, r0
   d8f42:	dc1c      	bgt.n	d8f7e <_strtod_l+0x276>
   d8f44:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8f46:	220a      	movs	r2, #10
   d8f48:	fb02 3301 	mla	r3, r2, r1, r3
   d8f4c:	9309      	str	r3, [sp, #36]	; 0x24
   d8f4e:	2200      	movs	r2, #0
   d8f50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f52:	1c59      	adds	r1, r3, #1
   d8f54:	911d      	str	r1, [sp, #116]	; 0x74
   d8f56:	785b      	ldrb	r3, [r3, #1]
   d8f58:	4610      	mov	r0, r2
   d8f5a:	e7c9      	b.n	d8ef0 <_strtod_l+0x1e8>
   d8f5c:	4638      	mov	r0, r7
   d8f5e:	e7d2      	b.n	d8f06 <_strtod_l+0x1fe>
   d8f60:	2a08      	cmp	r2, #8
   d8f62:	dc04      	bgt.n	d8f6e <_strtod_l+0x266>
   d8f64:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d8f66:	434e      	muls	r6, r1
   d8f68:	9609      	str	r6, [sp, #36]	; 0x24
   d8f6a:	3201      	adds	r2, #1
   d8f6c:	e7e2      	b.n	d8f34 <_strtod_l+0x22c>
   d8f6e:	f102 0c01 	add.w	ip, r2, #1
   d8f72:	f1bc 0f10 	cmp.w	ip, #16
   d8f76:	bfd8      	it	le
   d8f78:	fb01 f909 	mulle.w	r9, r1, r9
   d8f7c:	e7f5      	b.n	d8f6a <_strtod_l+0x262>
   d8f7e:	2d10      	cmp	r5, #16
   d8f80:	bfdc      	itt	le
   d8f82:	220a      	movle	r2, #10
   d8f84:	fb02 3909 	mlale	r9, r2, r9, r3
   d8f88:	e7e1      	b.n	d8f4e <_strtod_l+0x246>
   d8f8a:	2300      	movs	r3, #0
   d8f8c:	9307      	str	r3, [sp, #28]
   d8f8e:	2201      	movs	r2, #1
   d8f90:	e77c      	b.n	d8e8c <_strtod_l+0x184>
   d8f92:	f04f 0c00 	mov.w	ip, #0
   d8f96:	f108 0302 	add.w	r3, r8, #2
   d8f9a:	931d      	str	r3, [sp, #116]	; 0x74
   d8f9c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d8fa0:	e785      	b.n	d8eae <_strtod_l+0x1a6>
   d8fa2:	f04f 0c01 	mov.w	ip, #1
   d8fa6:	e7f6      	b.n	d8f96 <_strtod_l+0x28e>
   d8fa8:	000db3cc 	.word	0x000db3cc
   d8fac:	000db274 	.word	0x000db274
   d8fb0:	7ff00000 	.word	0x7ff00000
   d8fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fb6:	1c59      	adds	r1, r3, #1
   d8fb8:	911d      	str	r1, [sp, #116]	; 0x74
   d8fba:	785b      	ldrb	r3, [r3, #1]
   d8fbc:	2b30      	cmp	r3, #48	; 0x30
   d8fbe:	d0f9      	beq.n	d8fb4 <_strtod_l+0x2ac>
   d8fc0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d8fc4:	2908      	cmp	r1, #8
   d8fc6:	f63f af79 	bhi.w	d8ebc <_strtod_l+0x1b4>
   d8fca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8fce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fd0:	9308      	str	r3, [sp, #32]
   d8fd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fd4:	1c59      	adds	r1, r3, #1
   d8fd6:	911d      	str	r1, [sp, #116]	; 0x74
   d8fd8:	785b      	ldrb	r3, [r3, #1]
   d8fda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8fde:	2e09      	cmp	r6, #9
   d8fe0:	d937      	bls.n	d9052 <_strtod_l+0x34a>
   d8fe2:	9e08      	ldr	r6, [sp, #32]
   d8fe4:	1b89      	subs	r1, r1, r6
   d8fe6:	2908      	cmp	r1, #8
   d8fe8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d8fec:	dc02      	bgt.n	d8ff4 <_strtod_l+0x2ec>
   d8fee:	4576      	cmp	r6, lr
   d8ff0:	bfa8      	it	ge
   d8ff2:	4676      	movge	r6, lr
   d8ff4:	f1bc 0f00 	cmp.w	ip, #0
   d8ff8:	d000      	beq.n	d8ffc <_strtod_l+0x2f4>
   d8ffa:	4276      	negs	r6, r6
   d8ffc:	2d00      	cmp	r5, #0
   d8ffe:	d14f      	bne.n	d90a0 <_strtod_l+0x398>
   d9000:	9904      	ldr	r1, [sp, #16]
   d9002:	4301      	orrs	r1, r0
   d9004:	f47f aec2 	bne.w	d8d8c <_strtod_l+0x84>
   d9008:	2a00      	cmp	r2, #0
   d900a:	f47f aedb 	bne.w	d8dc4 <_strtod_l+0xbc>
   d900e:	2b69      	cmp	r3, #105	; 0x69
   d9010:	d027      	beq.n	d9062 <_strtod_l+0x35a>
   d9012:	dc24      	bgt.n	d905e <_strtod_l+0x356>
   d9014:	2b49      	cmp	r3, #73	; 0x49
   d9016:	d024      	beq.n	d9062 <_strtod_l+0x35a>
   d9018:	2b4e      	cmp	r3, #78	; 0x4e
   d901a:	f47f aed3 	bne.w	d8dc4 <_strtod_l+0xbc>
   d901e:	499e      	ldr	r1, [pc, #632]	; (d9298 <_strtod_l+0x590>)
   d9020:	a81d      	add	r0, sp, #116	; 0x74
   d9022:	f000 ffb9 	bl	d9f98 <__match>
   d9026:	2800      	cmp	r0, #0
   d9028:	f43f aecc 	beq.w	d8dc4 <_strtod_l+0xbc>
   d902c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d902e:	781b      	ldrb	r3, [r3, #0]
   d9030:	2b28      	cmp	r3, #40	; 0x28
   d9032:	d12d      	bne.n	d9090 <_strtod_l+0x388>
   d9034:	4999      	ldr	r1, [pc, #612]	; (d929c <_strtod_l+0x594>)
   d9036:	aa20      	add	r2, sp, #128	; 0x80
   d9038:	a81d      	add	r0, sp, #116	; 0x74
   d903a:	f000 ffc1 	bl	d9fc0 <__hexnan>
   d903e:	2805      	cmp	r0, #5
   d9040:	d126      	bne.n	d9090 <_strtod_l+0x388>
   d9042:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9044:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9048:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d904c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9050:	e69c      	b.n	d8d8c <_strtod_l+0x84>
   d9052:	210a      	movs	r1, #10
   d9054:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9058:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d905c:	e7b9      	b.n	d8fd2 <_strtod_l+0x2ca>
   d905e:	2b6e      	cmp	r3, #110	; 0x6e
   d9060:	e7db      	b.n	d901a <_strtod_l+0x312>
   d9062:	498f      	ldr	r1, [pc, #572]	; (d92a0 <_strtod_l+0x598>)
   d9064:	a81d      	add	r0, sp, #116	; 0x74
   d9066:	f000 ff97 	bl	d9f98 <__match>
   d906a:	2800      	cmp	r0, #0
   d906c:	f43f aeaa 	beq.w	d8dc4 <_strtod_l+0xbc>
   d9070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9072:	498c      	ldr	r1, [pc, #560]	; (d92a4 <_strtod_l+0x59c>)
   d9074:	3b01      	subs	r3, #1
   d9076:	a81d      	add	r0, sp, #116	; 0x74
   d9078:	931d      	str	r3, [sp, #116]	; 0x74
   d907a:	f000 ff8d 	bl	d9f98 <__match>
   d907e:	b910      	cbnz	r0, d9086 <_strtod_l+0x37e>
   d9080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9082:	3301      	adds	r3, #1
   d9084:	931d      	str	r3, [sp, #116]	; 0x74
   d9086:	f8df b22c 	ldr.w	fp, [pc, #556]	; d92b4 <_strtod_l+0x5ac>
   d908a:	f04f 0a00 	mov.w	sl, #0
   d908e:	e67d      	b.n	d8d8c <_strtod_l+0x84>
   d9090:	4885      	ldr	r0, [pc, #532]	; (d92a8 <_strtod_l+0x5a0>)
   d9092:	f001 fc91 	bl	da9b8 <nan>
   d9096:	ed8d 0b04 	vstr	d0, [sp, #16]
   d909a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d909e:	e675      	b.n	d8d8c <_strtod_l+0x84>
   d90a0:	9b07      	ldr	r3, [sp, #28]
   d90a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d90a4:	1af3      	subs	r3, r6, r3
   d90a6:	2f00      	cmp	r7, #0
   d90a8:	bf08      	it	eq
   d90aa:	462f      	moveq	r7, r5
   d90ac:	2d10      	cmp	r5, #16
   d90ae:	9308      	str	r3, [sp, #32]
   d90b0:	46a8      	mov	r8, r5
   d90b2:	bfa8      	it	ge
   d90b4:	f04f 0810 	movge.w	r8, #16
   d90b8:	f7ff f968 	bl	d838c <__aeabi_ui2d>
   d90bc:	2d09      	cmp	r5, #9
   d90be:	4682      	mov	sl, r0
   d90c0:	468b      	mov	fp, r1
   d90c2:	dd13      	ble.n	d90ec <_strtod_l+0x3e4>
   d90c4:	4b79      	ldr	r3, [pc, #484]	; (d92ac <_strtod_l+0x5a4>)
   d90c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d90ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d90ce:	f7ff f9d7 	bl	d8480 <__aeabi_dmul>
   d90d2:	4682      	mov	sl, r0
   d90d4:	4648      	mov	r0, r9
   d90d6:	468b      	mov	fp, r1
   d90d8:	f7ff f958 	bl	d838c <__aeabi_ui2d>
   d90dc:	4602      	mov	r2, r0
   d90de:	460b      	mov	r3, r1
   d90e0:	4650      	mov	r0, sl
   d90e2:	4659      	mov	r1, fp
   d90e4:	f7ff f816 	bl	d8114 <__adddf3>
   d90e8:	4682      	mov	sl, r0
   d90ea:	468b      	mov	fp, r1
   d90ec:	2d0f      	cmp	r5, #15
   d90ee:	dc38      	bgt.n	d9162 <_strtod_l+0x45a>
   d90f0:	9b08      	ldr	r3, [sp, #32]
   d90f2:	2b00      	cmp	r3, #0
   d90f4:	f43f ae4a 	beq.w	d8d8c <_strtod_l+0x84>
   d90f8:	dd24      	ble.n	d9144 <_strtod_l+0x43c>
   d90fa:	2b16      	cmp	r3, #22
   d90fc:	dc0b      	bgt.n	d9116 <_strtod_l+0x40e>
   d90fe:	4d6b      	ldr	r5, [pc, #428]	; (d92ac <_strtod_l+0x5a4>)
   d9100:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9104:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9108:	4652      	mov	r2, sl
   d910a:	465b      	mov	r3, fp
   d910c:	f7ff f9b8 	bl	d8480 <__aeabi_dmul>
   d9110:	4682      	mov	sl, r0
   d9112:	468b      	mov	fp, r1
   d9114:	e63a      	b.n	d8d8c <_strtod_l+0x84>
   d9116:	9a08      	ldr	r2, [sp, #32]
   d9118:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d911c:	4293      	cmp	r3, r2
   d911e:	db20      	blt.n	d9162 <_strtod_l+0x45a>
   d9120:	4c62      	ldr	r4, [pc, #392]	; (d92ac <_strtod_l+0x5a4>)
   d9122:	f1c5 050f 	rsb	r5, r5, #15
   d9126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d912a:	4652      	mov	r2, sl
   d912c:	465b      	mov	r3, fp
   d912e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9132:	f7ff f9a5 	bl	d8480 <__aeabi_dmul>
   d9136:	9b08      	ldr	r3, [sp, #32]
   d9138:	1b5d      	subs	r5, r3, r5
   d913a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d913e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9142:	e7e3      	b.n	d910c <_strtod_l+0x404>
   d9144:	9b08      	ldr	r3, [sp, #32]
   d9146:	3316      	adds	r3, #22
   d9148:	db0b      	blt.n	d9162 <_strtod_l+0x45a>
   d914a:	9b07      	ldr	r3, [sp, #28]
   d914c:	4a57      	ldr	r2, [pc, #348]	; (d92ac <_strtod_l+0x5a4>)
   d914e:	1b9e      	subs	r6, r3, r6
   d9150:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9154:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9158:	4650      	mov	r0, sl
   d915a:	4659      	mov	r1, fp
   d915c:	f7ff faba 	bl	d86d4 <__aeabi_ddiv>
   d9160:	e7d6      	b.n	d9110 <_strtod_l+0x408>
   d9162:	9b08      	ldr	r3, [sp, #32]
   d9164:	eba5 0808 	sub.w	r8, r5, r8
   d9168:	4498      	add	r8, r3
   d916a:	f1b8 0f00 	cmp.w	r8, #0
   d916e:	dd71      	ble.n	d9254 <_strtod_l+0x54c>
   d9170:	f018 030f 	ands.w	r3, r8, #15
   d9174:	d00a      	beq.n	d918c <_strtod_l+0x484>
   d9176:	494d      	ldr	r1, [pc, #308]	; (d92ac <_strtod_l+0x5a4>)
   d9178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d917c:	4652      	mov	r2, sl
   d917e:	465b      	mov	r3, fp
   d9180:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9184:	f7ff f97c 	bl	d8480 <__aeabi_dmul>
   d9188:	4682      	mov	sl, r0
   d918a:	468b      	mov	fp, r1
   d918c:	f038 080f 	bics.w	r8, r8, #15
   d9190:	d04d      	beq.n	d922e <_strtod_l+0x526>
   d9192:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9196:	dd22      	ble.n	d91de <_strtod_l+0x4d6>
   d9198:	2500      	movs	r5, #0
   d919a:	462e      	mov	r6, r5
   d919c:	9509      	str	r5, [sp, #36]	; 0x24
   d919e:	9507      	str	r5, [sp, #28]
   d91a0:	2322      	movs	r3, #34	; 0x22
   d91a2:	f8df b110 	ldr.w	fp, [pc, #272]	; d92b4 <_strtod_l+0x5ac>
   d91a6:	6023      	str	r3, [r4, #0]
   d91a8:	f04f 0a00 	mov.w	sl, #0
   d91ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d91ae:	2b00      	cmp	r3, #0
   d91b0:	f43f adec 	beq.w	d8d8c <_strtod_l+0x84>
   d91b4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d91b6:	4620      	mov	r0, r4
   d91b8:	f000 ffe4 	bl	da184 <_Bfree>
   d91bc:	9907      	ldr	r1, [sp, #28]
   d91be:	4620      	mov	r0, r4
   d91c0:	f000 ffe0 	bl	da184 <_Bfree>
   d91c4:	4631      	mov	r1, r6
   d91c6:	4620      	mov	r0, r4
   d91c8:	f000 ffdc 	bl	da184 <_Bfree>
   d91cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d91ce:	4620      	mov	r0, r4
   d91d0:	f000 ffd8 	bl	da184 <_Bfree>
   d91d4:	4629      	mov	r1, r5
   d91d6:	4620      	mov	r0, r4
   d91d8:	f000 ffd4 	bl	da184 <_Bfree>
   d91dc:	e5d6      	b.n	d8d8c <_strtod_l+0x84>
   d91de:	2300      	movs	r3, #0
   d91e0:	ea4f 1828 	mov.w	r8, r8, asr #4
   d91e4:	4650      	mov	r0, sl
   d91e6:	4659      	mov	r1, fp
   d91e8:	4699      	mov	r9, r3
   d91ea:	f1b8 0f01 	cmp.w	r8, #1
   d91ee:	dc21      	bgt.n	d9234 <_strtod_l+0x52c>
   d91f0:	b10b      	cbz	r3, d91f6 <_strtod_l+0x4ee>
   d91f2:	4682      	mov	sl, r0
   d91f4:	468b      	mov	fp, r1
   d91f6:	4b2e      	ldr	r3, [pc, #184]	; (d92b0 <_strtod_l+0x5a8>)
   d91f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d91fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9200:	4652      	mov	r2, sl
   d9202:	465b      	mov	r3, fp
   d9204:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9208:	f7ff f93a 	bl	d8480 <__aeabi_dmul>
   d920c:	4b29      	ldr	r3, [pc, #164]	; (d92b4 <_strtod_l+0x5ac>)
   d920e:	460a      	mov	r2, r1
   d9210:	400b      	ands	r3, r1
   d9212:	4929      	ldr	r1, [pc, #164]	; (d92b8 <_strtod_l+0x5b0>)
   d9214:	428b      	cmp	r3, r1
   d9216:	4682      	mov	sl, r0
   d9218:	d8be      	bhi.n	d9198 <_strtod_l+0x490>
   d921a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d921e:	428b      	cmp	r3, r1
   d9220:	bf86      	itte	hi
   d9222:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d92bc <_strtod_l+0x5b4>
   d9226:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d922a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d922e:	2300      	movs	r3, #0
   d9230:	9304      	str	r3, [sp, #16]
   d9232:	e081      	b.n	d9338 <_strtod_l+0x630>
   d9234:	f018 0f01 	tst.w	r8, #1
   d9238:	d007      	beq.n	d924a <_strtod_l+0x542>
   d923a:	4b1d      	ldr	r3, [pc, #116]	; (d92b0 <_strtod_l+0x5a8>)
   d923c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9240:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9244:	f7ff f91c 	bl	d8480 <__aeabi_dmul>
   d9248:	2301      	movs	r3, #1
   d924a:	f109 0901 	add.w	r9, r9, #1
   d924e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9252:	e7ca      	b.n	d91ea <_strtod_l+0x4e2>
   d9254:	d0eb      	beq.n	d922e <_strtod_l+0x526>
   d9256:	f1c8 0800 	rsb	r8, r8, #0
   d925a:	f018 020f 	ands.w	r2, r8, #15
   d925e:	d00a      	beq.n	d9276 <_strtod_l+0x56e>
   d9260:	4b12      	ldr	r3, [pc, #72]	; (d92ac <_strtod_l+0x5a4>)
   d9262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9266:	4650      	mov	r0, sl
   d9268:	4659      	mov	r1, fp
   d926a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d926e:	f7ff fa31 	bl	d86d4 <__aeabi_ddiv>
   d9272:	4682      	mov	sl, r0
   d9274:	468b      	mov	fp, r1
   d9276:	ea5f 1828 	movs.w	r8, r8, asr #4
   d927a:	d0d8      	beq.n	d922e <_strtod_l+0x526>
   d927c:	f1b8 0f1f 	cmp.w	r8, #31
   d9280:	dd1e      	ble.n	d92c0 <_strtod_l+0x5b8>
   d9282:	2500      	movs	r5, #0
   d9284:	462e      	mov	r6, r5
   d9286:	9509      	str	r5, [sp, #36]	; 0x24
   d9288:	9507      	str	r5, [sp, #28]
   d928a:	2322      	movs	r3, #34	; 0x22
   d928c:	f04f 0a00 	mov.w	sl, #0
   d9290:	f04f 0b00 	mov.w	fp, #0
   d9294:	6023      	str	r3, [r4, #0]
   d9296:	e789      	b.n	d91ac <_strtod_l+0x4a4>
   d9298:	000db26f 	.word	0x000db26f
   d929c:	000db288 	.word	0x000db288
   d92a0:	000db266 	.word	0x000db266
   d92a4:	000db269 	.word	0x000db269
   d92a8:	000db22c 	.word	0x000db22c
   d92ac:	000db408 	.word	0x000db408
   d92b0:	000db3e0 	.word	0x000db3e0
   d92b4:	7ff00000 	.word	0x7ff00000
   d92b8:	7ca00000 	.word	0x7ca00000
   d92bc:	7fefffff 	.word	0x7fefffff
   d92c0:	f018 0310 	ands.w	r3, r8, #16
   d92c4:	bf18      	it	ne
   d92c6:	236a      	movne	r3, #106	; 0x6a
   d92c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9680 <_strtod_l+0x978>
   d92cc:	9304      	str	r3, [sp, #16]
   d92ce:	4650      	mov	r0, sl
   d92d0:	4659      	mov	r1, fp
   d92d2:	2300      	movs	r3, #0
   d92d4:	f018 0f01 	tst.w	r8, #1
   d92d8:	d004      	beq.n	d92e4 <_strtod_l+0x5dc>
   d92da:	e9d9 2300 	ldrd	r2, r3, [r9]
   d92de:	f7ff f8cf 	bl	d8480 <__aeabi_dmul>
   d92e2:	2301      	movs	r3, #1
   d92e4:	ea5f 0868 	movs.w	r8, r8, asr #1
   d92e8:	f109 0908 	add.w	r9, r9, #8
   d92ec:	d1f2      	bne.n	d92d4 <_strtod_l+0x5cc>
   d92ee:	b10b      	cbz	r3, d92f4 <_strtod_l+0x5ec>
   d92f0:	4682      	mov	sl, r0
   d92f2:	468b      	mov	fp, r1
   d92f4:	9b04      	ldr	r3, [sp, #16]
   d92f6:	b1bb      	cbz	r3, d9328 <_strtod_l+0x620>
   d92f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d92fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9300:	2b00      	cmp	r3, #0
   d9302:	4659      	mov	r1, fp
   d9304:	dd10      	ble.n	d9328 <_strtod_l+0x620>
   d9306:	2b1f      	cmp	r3, #31
   d9308:	f340 8128 	ble.w	d955c <_strtod_l+0x854>
   d930c:	2b34      	cmp	r3, #52	; 0x34
   d930e:	bfde      	ittt	le
   d9310:	3b20      	suble	r3, #32
   d9312:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9316:	fa02 f303 	lslle.w	r3, r2, r3
   d931a:	f04f 0a00 	mov.w	sl, #0
   d931e:	bfcc      	ite	gt
   d9320:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9324:	ea03 0b01 	andle.w	fp, r3, r1
   d9328:	2200      	movs	r2, #0
   d932a:	2300      	movs	r3, #0
   d932c:	4650      	mov	r0, sl
   d932e:	4659      	mov	r1, fp
   d9330:	f7ff fb0e 	bl	d8950 <__aeabi_dcmpeq>
   d9334:	2800      	cmp	r0, #0
   d9336:	d1a4      	bne.n	d9282 <_strtod_l+0x57a>
   d9338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d933a:	9300      	str	r3, [sp, #0]
   d933c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d933e:	462b      	mov	r3, r5
   d9340:	463a      	mov	r2, r7
   d9342:	4620      	mov	r0, r4
   d9344:	f000 ff73 	bl	da22e <__s2b>
   d9348:	9009      	str	r0, [sp, #36]	; 0x24
   d934a:	2800      	cmp	r0, #0
   d934c:	f43f af24 	beq.w	d9198 <_strtod_l+0x490>
   d9350:	9b07      	ldr	r3, [sp, #28]
   d9352:	1b9e      	subs	r6, r3, r6
   d9354:	9b08      	ldr	r3, [sp, #32]
   d9356:	2b00      	cmp	r3, #0
   d9358:	bfb4      	ite	lt
   d935a:	4633      	movlt	r3, r6
   d935c:	2300      	movge	r3, #0
   d935e:	9310      	str	r3, [sp, #64]	; 0x40
   d9360:	9b08      	ldr	r3, [sp, #32]
   d9362:	2500      	movs	r5, #0
   d9364:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9368:	9318      	str	r3, [sp, #96]	; 0x60
   d936a:	462e      	mov	r6, r5
   d936c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d936e:	4620      	mov	r0, r4
   d9370:	6859      	ldr	r1, [r3, #4]
   d9372:	f000 fed3 	bl	da11c <_Balloc>
   d9376:	9007      	str	r0, [sp, #28]
   d9378:	2800      	cmp	r0, #0
   d937a:	f43f af11 	beq.w	d91a0 <_strtod_l+0x498>
   d937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9380:	691a      	ldr	r2, [r3, #16]
   d9382:	3202      	adds	r2, #2
   d9384:	f103 010c 	add.w	r1, r3, #12
   d9388:	0092      	lsls	r2, r2, #2
   d938a:	300c      	adds	r0, #12
   d938c:	f7ff fbee 	bl	d8b6c <memcpy>
   d9390:	ec4b ab10 	vmov	d0, sl, fp
   d9394:	aa20      	add	r2, sp, #128	; 0x80
   d9396:	a91f      	add	r1, sp, #124	; 0x7c
   d9398:	4620      	mov	r0, r4
   d939a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d939e:	f001 fa35 	bl	da80c <__d2b>
   d93a2:	901e      	str	r0, [sp, #120]	; 0x78
   d93a4:	2800      	cmp	r0, #0
   d93a6:	f43f aefb 	beq.w	d91a0 <_strtod_l+0x498>
   d93aa:	2101      	movs	r1, #1
   d93ac:	4620      	mov	r0, r4
   d93ae:	f000 ffcc 	bl	da34a <__i2b>
   d93b2:	4606      	mov	r6, r0
   d93b4:	2800      	cmp	r0, #0
   d93b6:	f43f aef3 	beq.w	d91a0 <_strtod_l+0x498>
   d93ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d93bc:	9904      	ldr	r1, [sp, #16]
   d93be:	2b00      	cmp	r3, #0
   d93c0:	bfab      	itete	ge
   d93c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d93c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d93c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d93c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d93cc:	bfac      	ite	ge
   d93ce:	eb03 0902 	addge.w	r9, r3, r2
   d93d2:	1ad7      	sublt	r7, r2, r3
   d93d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d93d6:	eba3 0801 	sub.w	r8, r3, r1
   d93da:	4490      	add	r8, r2
   d93dc:	4ba3      	ldr	r3, [pc, #652]	; (d966c <_strtod_l+0x964>)
   d93de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d93e2:	4598      	cmp	r8, r3
   d93e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d93e8:	f280 80cc 	bge.w	d9584 <_strtod_l+0x87c>
   d93ec:	eba3 0308 	sub.w	r3, r3, r8
   d93f0:	2b1f      	cmp	r3, #31
   d93f2:	eba2 0203 	sub.w	r2, r2, r3
   d93f6:	f04f 0101 	mov.w	r1, #1
   d93fa:	f300 80b6 	bgt.w	d956a <_strtod_l+0x862>
   d93fe:	fa01 f303 	lsl.w	r3, r1, r3
   d9402:	9311      	str	r3, [sp, #68]	; 0x44
   d9404:	2300      	movs	r3, #0
   d9406:	930c      	str	r3, [sp, #48]	; 0x30
   d9408:	eb09 0802 	add.w	r8, r9, r2
   d940c:	9b04      	ldr	r3, [sp, #16]
   d940e:	45c1      	cmp	r9, r8
   d9410:	4417      	add	r7, r2
   d9412:	441f      	add	r7, r3
   d9414:	464b      	mov	r3, r9
   d9416:	bfa8      	it	ge
   d9418:	4643      	movge	r3, r8
   d941a:	42bb      	cmp	r3, r7
   d941c:	bfa8      	it	ge
   d941e:	463b      	movge	r3, r7
   d9420:	2b00      	cmp	r3, #0
   d9422:	bfc2      	ittt	gt
   d9424:	eba8 0803 	subgt.w	r8, r8, r3
   d9428:	1aff      	subgt	r7, r7, r3
   d942a:	eba9 0903 	subgt.w	r9, r9, r3
   d942e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9430:	2b00      	cmp	r3, #0
   d9432:	dd17      	ble.n	d9464 <_strtod_l+0x75c>
   d9434:	4631      	mov	r1, r6
   d9436:	461a      	mov	r2, r3
   d9438:	4620      	mov	r0, r4
   d943a:	f001 f82b 	bl	da494 <__pow5mult>
   d943e:	4606      	mov	r6, r0
   d9440:	2800      	cmp	r0, #0
   d9442:	f43f aead 	beq.w	d91a0 <_strtod_l+0x498>
   d9446:	4601      	mov	r1, r0
   d9448:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d944a:	4620      	mov	r0, r4
   d944c:	f000 ff86 	bl	da35c <__multiply>
   d9450:	900f      	str	r0, [sp, #60]	; 0x3c
   d9452:	2800      	cmp	r0, #0
   d9454:	f43f aea4 	beq.w	d91a0 <_strtod_l+0x498>
   d9458:	991e      	ldr	r1, [sp, #120]	; 0x78
   d945a:	4620      	mov	r0, r4
   d945c:	f000 fe92 	bl	da184 <_Bfree>
   d9460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9462:	931e      	str	r3, [sp, #120]	; 0x78
   d9464:	f1b8 0f00 	cmp.w	r8, #0
   d9468:	f300 8091 	bgt.w	d958e <_strtod_l+0x886>
   d946c:	9b08      	ldr	r3, [sp, #32]
   d946e:	2b00      	cmp	r3, #0
   d9470:	dd08      	ble.n	d9484 <_strtod_l+0x77c>
   d9472:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9474:	9907      	ldr	r1, [sp, #28]
   d9476:	4620      	mov	r0, r4
   d9478:	f001 f80c 	bl	da494 <__pow5mult>
   d947c:	9007      	str	r0, [sp, #28]
   d947e:	2800      	cmp	r0, #0
   d9480:	f43f ae8e 	beq.w	d91a0 <_strtod_l+0x498>
   d9484:	2f00      	cmp	r7, #0
   d9486:	dd08      	ble.n	d949a <_strtod_l+0x792>
   d9488:	9907      	ldr	r1, [sp, #28]
   d948a:	463a      	mov	r2, r7
   d948c:	4620      	mov	r0, r4
   d948e:	f001 f84f 	bl	da530 <__lshift>
   d9492:	9007      	str	r0, [sp, #28]
   d9494:	2800      	cmp	r0, #0
   d9496:	f43f ae83 	beq.w	d91a0 <_strtod_l+0x498>
   d949a:	f1b9 0f00 	cmp.w	r9, #0
   d949e:	dd08      	ble.n	d94b2 <_strtod_l+0x7aa>
   d94a0:	4631      	mov	r1, r6
   d94a2:	464a      	mov	r2, r9
   d94a4:	4620      	mov	r0, r4
   d94a6:	f001 f843 	bl	da530 <__lshift>
   d94aa:	4606      	mov	r6, r0
   d94ac:	2800      	cmp	r0, #0
   d94ae:	f43f ae77 	beq.w	d91a0 <_strtod_l+0x498>
   d94b2:	9a07      	ldr	r2, [sp, #28]
   d94b4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d94b6:	4620      	mov	r0, r4
   d94b8:	f001 f8b5 	bl	da626 <__mdiff>
   d94bc:	4605      	mov	r5, r0
   d94be:	2800      	cmp	r0, #0
   d94c0:	f43f ae6e 	beq.w	d91a0 <_strtod_l+0x498>
   d94c4:	68c3      	ldr	r3, [r0, #12]
   d94c6:	930f      	str	r3, [sp, #60]	; 0x3c
   d94c8:	2300      	movs	r3, #0
   d94ca:	60c3      	str	r3, [r0, #12]
   d94cc:	4631      	mov	r1, r6
   d94ce:	f001 f88e 	bl	da5ee <__mcmp>
   d94d2:	2800      	cmp	r0, #0
   d94d4:	da65      	bge.n	d95a2 <_strtod_l+0x89a>
   d94d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d94d8:	ea53 030a 	orrs.w	r3, r3, sl
   d94dc:	f040 8087 	bne.w	d95ee <_strtod_l+0x8e6>
   d94e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d94e4:	2b00      	cmp	r3, #0
   d94e6:	f040 8082 	bne.w	d95ee <_strtod_l+0x8e6>
   d94ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d94ee:	0d1b      	lsrs	r3, r3, #20
   d94f0:	051b      	lsls	r3, r3, #20
   d94f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d94f6:	d97a      	bls.n	d95ee <_strtod_l+0x8e6>
   d94f8:	696b      	ldr	r3, [r5, #20]
   d94fa:	b913      	cbnz	r3, d9502 <_strtod_l+0x7fa>
   d94fc:	692b      	ldr	r3, [r5, #16]
   d94fe:	2b01      	cmp	r3, #1
   d9500:	dd75      	ble.n	d95ee <_strtod_l+0x8e6>
   d9502:	4629      	mov	r1, r5
   d9504:	2201      	movs	r2, #1
   d9506:	4620      	mov	r0, r4
   d9508:	f001 f812 	bl	da530 <__lshift>
   d950c:	4631      	mov	r1, r6
   d950e:	4605      	mov	r5, r0
   d9510:	f001 f86d 	bl	da5ee <__mcmp>
   d9514:	2800      	cmp	r0, #0
   d9516:	dd6a      	ble.n	d95ee <_strtod_l+0x8e6>
   d9518:	9904      	ldr	r1, [sp, #16]
   d951a:	4a55      	ldr	r2, [pc, #340]	; (d9670 <_strtod_l+0x968>)
   d951c:	465b      	mov	r3, fp
   d951e:	2900      	cmp	r1, #0
   d9520:	f000 8085 	beq.w	d962e <_strtod_l+0x926>
   d9524:	ea02 010b 	and.w	r1, r2, fp
   d9528:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d952c:	dc7f      	bgt.n	d962e <_strtod_l+0x926>
   d952e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9532:	f77f aeaa 	ble.w	d928a <_strtod_l+0x582>
   d9536:	4a4f      	ldr	r2, [pc, #316]	; (d9674 <_strtod_l+0x96c>)
   d9538:	2300      	movs	r3, #0
   d953a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d953e:	4650      	mov	r0, sl
   d9540:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9544:	4659      	mov	r1, fp
   d9546:	f7fe ff9b 	bl	d8480 <__aeabi_dmul>
   d954a:	460b      	mov	r3, r1
   d954c:	4303      	orrs	r3, r0
   d954e:	bf08      	it	eq
   d9550:	2322      	moveq	r3, #34	; 0x22
   d9552:	4682      	mov	sl, r0
   d9554:	468b      	mov	fp, r1
   d9556:	bf08      	it	eq
   d9558:	6023      	streq	r3, [r4, #0]
   d955a:	e62b      	b.n	d91b4 <_strtod_l+0x4ac>
   d955c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9560:	fa02 f303 	lsl.w	r3, r2, r3
   d9564:	ea03 0a0a 	and.w	sl, r3, sl
   d9568:	e6de      	b.n	d9328 <_strtod_l+0x620>
   d956a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d956e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9572:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9576:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d957a:	fa01 f308 	lsl.w	r3, r1, r8
   d957e:	930c      	str	r3, [sp, #48]	; 0x30
   d9580:	9111      	str	r1, [sp, #68]	; 0x44
   d9582:	e741      	b.n	d9408 <_strtod_l+0x700>
   d9584:	2300      	movs	r3, #0
   d9586:	930c      	str	r3, [sp, #48]	; 0x30
   d9588:	2301      	movs	r3, #1
   d958a:	9311      	str	r3, [sp, #68]	; 0x44
   d958c:	e73c      	b.n	d9408 <_strtod_l+0x700>
   d958e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9590:	4642      	mov	r2, r8
   d9592:	4620      	mov	r0, r4
   d9594:	f000 ffcc 	bl	da530 <__lshift>
   d9598:	901e      	str	r0, [sp, #120]	; 0x78
   d959a:	2800      	cmp	r0, #0
   d959c:	f47f af66 	bne.w	d946c <_strtod_l+0x764>
   d95a0:	e5fe      	b.n	d91a0 <_strtod_l+0x498>
   d95a2:	465f      	mov	r7, fp
   d95a4:	d16e      	bne.n	d9684 <_strtod_l+0x97c>
   d95a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d95a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d95ac:	b342      	cbz	r2, d9600 <_strtod_l+0x8f8>
   d95ae:	4a32      	ldr	r2, [pc, #200]	; (d9678 <_strtod_l+0x970>)
   d95b0:	4293      	cmp	r3, r2
   d95b2:	d128      	bne.n	d9606 <_strtod_l+0x8fe>
   d95b4:	9b04      	ldr	r3, [sp, #16]
   d95b6:	4650      	mov	r0, sl
   d95b8:	b1eb      	cbz	r3, d95f6 <_strtod_l+0x8ee>
   d95ba:	4a2d      	ldr	r2, [pc, #180]	; (d9670 <_strtod_l+0x968>)
   d95bc:	403a      	ands	r2, r7
   d95be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d95c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d95c6:	d819      	bhi.n	d95fc <_strtod_l+0x8f4>
   d95c8:	0d12      	lsrs	r2, r2, #20
   d95ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d95ce:	fa01 f303 	lsl.w	r3, r1, r3
   d95d2:	4298      	cmp	r0, r3
   d95d4:	d117      	bne.n	d9606 <_strtod_l+0x8fe>
   d95d6:	4b29      	ldr	r3, [pc, #164]	; (d967c <_strtod_l+0x974>)
   d95d8:	429f      	cmp	r7, r3
   d95da:	d102      	bne.n	d95e2 <_strtod_l+0x8da>
   d95dc:	3001      	adds	r0, #1
   d95de:	f43f addf 	beq.w	d91a0 <_strtod_l+0x498>
   d95e2:	4b23      	ldr	r3, [pc, #140]	; (d9670 <_strtod_l+0x968>)
   d95e4:	403b      	ands	r3, r7
   d95e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d95ea:	f04f 0a00 	mov.w	sl, #0
   d95ee:	9b04      	ldr	r3, [sp, #16]
   d95f0:	2b00      	cmp	r3, #0
   d95f2:	d1a0      	bne.n	d9536 <_strtod_l+0x82e>
   d95f4:	e5de      	b.n	d91b4 <_strtod_l+0x4ac>
   d95f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d95fa:	e7ea      	b.n	d95d2 <_strtod_l+0x8ca>
   d95fc:	460b      	mov	r3, r1
   d95fe:	e7e8      	b.n	d95d2 <_strtod_l+0x8ca>
   d9600:	ea53 030a 	orrs.w	r3, r3, sl
   d9604:	d088      	beq.n	d9518 <_strtod_l+0x810>
   d9606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9608:	b1db      	cbz	r3, d9642 <_strtod_l+0x93a>
   d960a:	423b      	tst	r3, r7
   d960c:	d0ef      	beq.n	d95ee <_strtod_l+0x8e6>
   d960e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9610:	9a04      	ldr	r2, [sp, #16]
   d9612:	4650      	mov	r0, sl
   d9614:	4659      	mov	r1, fp
   d9616:	b1c3      	cbz	r3, d964a <_strtod_l+0x942>
   d9618:	f7ff fb58 	bl	d8ccc <sulp>
   d961c:	4602      	mov	r2, r0
   d961e:	460b      	mov	r3, r1
   d9620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9624:	f7fe fd76 	bl	d8114 <__adddf3>
   d9628:	4682      	mov	sl, r0
   d962a:	468b      	mov	fp, r1
   d962c:	e7df      	b.n	d95ee <_strtod_l+0x8e6>
   d962e:	4013      	ands	r3, r2
   d9630:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9634:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9638:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d963c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9640:	e7d5      	b.n	d95ee <_strtod_l+0x8e6>
   d9642:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9644:	ea13 0f0a 	tst.w	r3, sl
   d9648:	e7e0      	b.n	d960c <_strtod_l+0x904>
   d964a:	f7ff fb3f 	bl	d8ccc <sulp>
   d964e:	4602      	mov	r2, r0
   d9650:	460b      	mov	r3, r1
   d9652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9656:	f7fe fd5b 	bl	d8110 <__aeabi_dsub>
   d965a:	2200      	movs	r2, #0
   d965c:	2300      	movs	r3, #0
   d965e:	4682      	mov	sl, r0
   d9660:	468b      	mov	fp, r1
   d9662:	f7ff f975 	bl	d8950 <__aeabi_dcmpeq>
   d9666:	2800      	cmp	r0, #0
   d9668:	d0c1      	beq.n	d95ee <_strtod_l+0x8e6>
   d966a:	e60e      	b.n	d928a <_strtod_l+0x582>
   d966c:	fffffc02 	.word	0xfffffc02
   d9670:	7ff00000 	.word	0x7ff00000
   d9674:	39500000 	.word	0x39500000
   d9678:	000fffff 	.word	0x000fffff
   d967c:	7fefffff 	.word	0x7fefffff
   d9680:	000db2a0 	.word	0x000db2a0
   d9684:	4631      	mov	r1, r6
   d9686:	4628      	mov	r0, r5
   d9688:	f001 f910 	bl	da8ac <__ratio>
   d968c:	ec59 8b10 	vmov	r8, r9, d0
   d9690:	ee10 0a10 	vmov	r0, s0
   d9694:	2200      	movs	r2, #0
   d9696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d969a:	4649      	mov	r1, r9
   d969c:	f7ff f96c 	bl	d8978 <__aeabi_dcmple>
   d96a0:	2800      	cmp	r0, #0
   d96a2:	d07c      	beq.n	d979e <_strtod_l+0xa96>
   d96a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d96a6:	2b00      	cmp	r3, #0
   d96a8:	d04c      	beq.n	d9744 <_strtod_l+0xa3c>
   d96aa:	4b95      	ldr	r3, [pc, #596]	; (d9900 <_strtod_l+0xbf8>)
   d96ac:	2200      	movs	r2, #0
   d96ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d96b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9900 <_strtod_l+0xbf8>
   d96b6:	f04f 0800 	mov.w	r8, #0
   d96ba:	4b92      	ldr	r3, [pc, #584]	; (d9904 <_strtod_l+0xbfc>)
   d96bc:	403b      	ands	r3, r7
   d96be:	9311      	str	r3, [sp, #68]	; 0x44
   d96c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d96c2:	4b91      	ldr	r3, [pc, #580]	; (d9908 <_strtod_l+0xc00>)
   d96c4:	429a      	cmp	r2, r3
   d96c6:	f040 80b2 	bne.w	d982e <_strtod_l+0xb26>
   d96ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d96ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d96d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d96d6:	ec4b ab10 	vmov	d0, sl, fp
   d96da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d96de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d96e2:	f001 f817 	bl	da714 <__ulp>
   d96e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d96ea:	ec53 2b10 	vmov	r2, r3, d0
   d96ee:	f7fe fec7 	bl	d8480 <__aeabi_dmul>
   d96f2:	4652      	mov	r2, sl
   d96f4:	465b      	mov	r3, fp
   d96f6:	f7fe fd0d 	bl	d8114 <__adddf3>
   d96fa:	460b      	mov	r3, r1
   d96fc:	4981      	ldr	r1, [pc, #516]	; (d9904 <_strtod_l+0xbfc>)
   d96fe:	4a83      	ldr	r2, [pc, #524]	; (d990c <_strtod_l+0xc04>)
   d9700:	4019      	ands	r1, r3
   d9702:	4291      	cmp	r1, r2
   d9704:	4682      	mov	sl, r0
   d9706:	d95e      	bls.n	d97c6 <_strtod_l+0xabe>
   d9708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d970a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d970e:	4293      	cmp	r3, r2
   d9710:	d103      	bne.n	d971a <_strtod_l+0xa12>
   d9712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9714:	3301      	adds	r3, #1
   d9716:	f43f ad43 	beq.w	d91a0 <_strtod_l+0x498>
   d971a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9918 <_strtod_l+0xc10>
   d971e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9722:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9724:	4620      	mov	r0, r4
   d9726:	f000 fd2d 	bl	da184 <_Bfree>
   d972a:	9907      	ldr	r1, [sp, #28]
   d972c:	4620      	mov	r0, r4
   d972e:	f000 fd29 	bl	da184 <_Bfree>
   d9732:	4631      	mov	r1, r6
   d9734:	4620      	mov	r0, r4
   d9736:	f000 fd25 	bl	da184 <_Bfree>
   d973a:	4629      	mov	r1, r5
   d973c:	4620      	mov	r0, r4
   d973e:	f000 fd21 	bl	da184 <_Bfree>
   d9742:	e613      	b.n	d936c <_strtod_l+0x664>
   d9744:	f1ba 0f00 	cmp.w	sl, #0
   d9748:	d11b      	bne.n	d9782 <_strtod_l+0xa7a>
   d974a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d974e:	b9f3      	cbnz	r3, d978e <_strtod_l+0xa86>
   d9750:	4b6b      	ldr	r3, [pc, #428]	; (d9900 <_strtod_l+0xbf8>)
   d9752:	2200      	movs	r2, #0
   d9754:	4640      	mov	r0, r8
   d9756:	4649      	mov	r1, r9
   d9758:	f7ff f904 	bl	d8964 <__aeabi_dcmplt>
   d975c:	b9d0      	cbnz	r0, d9794 <_strtod_l+0xa8c>
   d975e:	4640      	mov	r0, r8
   d9760:	4649      	mov	r1, r9
   d9762:	4b6b      	ldr	r3, [pc, #428]	; (d9910 <_strtod_l+0xc08>)
   d9764:	2200      	movs	r2, #0
   d9766:	f7fe fe8b 	bl	d8480 <__aeabi_dmul>
   d976a:	4680      	mov	r8, r0
   d976c:	4689      	mov	r9, r1
   d976e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9772:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9776:	931b      	str	r3, [sp, #108]	; 0x6c
   d9778:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d977c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9780:	e79b      	b.n	d96ba <_strtod_l+0x9b2>
   d9782:	f1ba 0f01 	cmp.w	sl, #1
   d9786:	d102      	bne.n	d978e <_strtod_l+0xa86>
   d9788:	2f00      	cmp	r7, #0
   d978a:	f43f ad7e 	beq.w	d928a <_strtod_l+0x582>
   d978e:	4b61      	ldr	r3, [pc, #388]	; (d9914 <_strtod_l+0xc0c>)
   d9790:	2200      	movs	r2, #0
   d9792:	e78c      	b.n	d96ae <_strtod_l+0x9a6>
   d9794:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9910 <_strtod_l+0xc08>
   d9798:	f04f 0800 	mov.w	r8, #0
   d979c:	e7e7      	b.n	d976e <_strtod_l+0xa66>
   d979e:	4b5c      	ldr	r3, [pc, #368]	; (d9910 <_strtod_l+0xc08>)
   d97a0:	4640      	mov	r0, r8
   d97a2:	4649      	mov	r1, r9
   d97a4:	2200      	movs	r2, #0
   d97a6:	f7fe fe6b 	bl	d8480 <__aeabi_dmul>
   d97aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d97ac:	4680      	mov	r8, r0
   d97ae:	4689      	mov	r9, r1
   d97b0:	b933      	cbnz	r3, d97c0 <_strtod_l+0xab8>
   d97b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d97b6:	9012      	str	r0, [sp, #72]	; 0x48
   d97b8:	9313      	str	r3, [sp, #76]	; 0x4c
   d97ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d97be:	e7dd      	b.n	d977c <_strtod_l+0xa74>
   d97c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d97c4:	e7f9      	b.n	d97ba <_strtod_l+0xab2>
   d97c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d97ca:	9b04      	ldr	r3, [sp, #16]
   d97cc:	2b00      	cmp	r3, #0
   d97ce:	d1a8      	bne.n	d9722 <_strtod_l+0xa1a>
   d97d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d97d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d97d6:	0d1b      	lsrs	r3, r3, #20
   d97d8:	051b      	lsls	r3, r3, #20
   d97da:	429a      	cmp	r2, r3
   d97dc:	d1a1      	bne.n	d9722 <_strtod_l+0xa1a>
   d97de:	4640      	mov	r0, r8
   d97e0:	4649      	mov	r1, r9
   d97e2:	f001 f8ff 	bl	da9e4 <__aeabi_d2lz>
   d97e6:	f7fe fe1d 	bl	d8424 <__aeabi_l2d>
   d97ea:	4602      	mov	r2, r0
   d97ec:	460b      	mov	r3, r1
   d97ee:	4640      	mov	r0, r8
   d97f0:	4649      	mov	r1, r9
   d97f2:	f7fe fc8d 	bl	d8110 <__aeabi_dsub>
   d97f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d97f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d97fc:	ea43 030a 	orr.w	r3, r3, sl
   d9800:	4313      	orrs	r3, r2
   d9802:	4680      	mov	r8, r0
   d9804:	4689      	mov	r9, r1
   d9806:	d053      	beq.n	d98b0 <_strtod_l+0xba8>
   d9808:	a335      	add	r3, pc, #212	; (adr r3, d98e0 <_strtod_l+0xbd8>)
   d980a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d980e:	f7ff f8a9 	bl	d8964 <__aeabi_dcmplt>
   d9812:	2800      	cmp	r0, #0
   d9814:	f47f acce 	bne.w	d91b4 <_strtod_l+0x4ac>
   d9818:	a333      	add	r3, pc, #204	; (adr r3, d98e8 <_strtod_l+0xbe0>)
   d981a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d981e:	4640      	mov	r0, r8
   d9820:	4649      	mov	r1, r9
   d9822:	f7ff f8bd 	bl	d89a0 <__aeabi_dcmpgt>
   d9826:	2800      	cmp	r0, #0
   d9828:	f43f af7b 	beq.w	d9722 <_strtod_l+0xa1a>
   d982c:	e4c2      	b.n	d91b4 <_strtod_l+0x4ac>
   d982e:	9b04      	ldr	r3, [sp, #16]
   d9830:	b333      	cbz	r3, d9880 <_strtod_l+0xb78>
   d9832:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9834:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9838:	d822      	bhi.n	d9880 <_strtod_l+0xb78>
   d983a:	a32d      	add	r3, pc, #180	; (adr r3, d98f0 <_strtod_l+0xbe8>)
   d983c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9840:	4640      	mov	r0, r8
   d9842:	4649      	mov	r1, r9
   d9844:	f7ff f898 	bl	d8978 <__aeabi_dcmple>
   d9848:	b1a0      	cbz	r0, d9874 <_strtod_l+0xb6c>
   d984a:	4649      	mov	r1, r9
   d984c:	4640      	mov	r0, r8
   d984e:	f7ff f8b1 	bl	d89b4 <__aeabi_d2uiz>
   d9852:	2801      	cmp	r0, #1
   d9854:	bf38      	it	cc
   d9856:	2001      	movcc	r0, #1
   d9858:	f7fe fd98 	bl	d838c <__aeabi_ui2d>
   d985c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d985e:	4680      	mov	r8, r0
   d9860:	4689      	mov	r9, r1
   d9862:	bb13      	cbnz	r3, d98aa <_strtod_l+0xba2>
   d9864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9868:	9014      	str	r0, [sp, #80]	; 0x50
   d986a:	9315      	str	r3, [sp, #84]	; 0x54
   d986c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9870:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9876:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9878:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d987c:	1a9b      	subs	r3, r3, r2
   d987e:	930d      	str	r3, [sp, #52]	; 0x34
   d9880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9884:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d988c:	f000 ff42 	bl	da714 <__ulp>
   d9890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9894:	ec53 2b10 	vmov	r2, r3, d0
   d9898:	f7fe fdf2 	bl	d8480 <__aeabi_dmul>
   d989c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d98a0:	f7fe fc38 	bl	d8114 <__adddf3>
   d98a4:	4682      	mov	sl, r0
   d98a6:	468b      	mov	fp, r1
   d98a8:	e78f      	b.n	d97ca <_strtod_l+0xac2>
   d98aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d98ae:	e7dd      	b.n	d986c <_strtod_l+0xb64>
   d98b0:	a311      	add	r3, pc, #68	; (adr r3, d98f8 <_strtod_l+0xbf0>)
   d98b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98b6:	f7ff f855 	bl	d8964 <__aeabi_dcmplt>
   d98ba:	e7b4      	b.n	d9826 <_strtod_l+0xb1e>
   d98bc:	2300      	movs	r3, #0
   d98be:	930e      	str	r3, [sp, #56]	; 0x38
   d98c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d98c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d98c4:	6013      	str	r3, [r2, #0]
   d98c6:	f7ff ba65 	b.w	d8d94 <_strtod_l+0x8c>
   d98ca:	2b65      	cmp	r3, #101	; 0x65
   d98cc:	f43f ab5d 	beq.w	d8f8a <_strtod_l+0x282>
   d98d0:	2b45      	cmp	r3, #69	; 0x45
   d98d2:	f43f ab5a 	beq.w	d8f8a <_strtod_l+0x282>
   d98d6:	2201      	movs	r2, #1
   d98d8:	f7ff bb92 	b.w	d9000 <_strtod_l+0x2f8>
   d98dc:	f3af 8000 	nop.w
   d98e0:	94a03595 	.word	0x94a03595
   d98e4:	3fdfffff 	.word	0x3fdfffff
   d98e8:	35afe535 	.word	0x35afe535
   d98ec:	3fe00000 	.word	0x3fe00000
   d98f0:	ffc00000 	.word	0xffc00000
   d98f4:	41dfffff 	.word	0x41dfffff
   d98f8:	94a03595 	.word	0x94a03595
   d98fc:	3fcfffff 	.word	0x3fcfffff
   d9900:	3ff00000 	.word	0x3ff00000
   d9904:	7ff00000 	.word	0x7ff00000
   d9908:	7fe00000 	.word	0x7fe00000
   d990c:	7c9fffff 	.word	0x7c9fffff
   d9910:	3fe00000 	.word	0x3fe00000
   d9914:	bff00000 	.word	0xbff00000
   d9918:	7fefffff 	.word	0x7fefffff

000d991c <strtod>:
   d991c:	460a      	mov	r2, r1
   d991e:	4601      	mov	r1, r0
   d9920:	4802      	ldr	r0, [pc, #8]	; (d992c <strtod+0x10>)
   d9922:	4b03      	ldr	r3, [pc, #12]	; (d9930 <strtod+0x14>)
   d9924:	6800      	ldr	r0, [r0, #0]
   d9926:	f7ff b9ef 	b.w	d8d08 <_strtod_l>
   d992a:	bf00      	nop
   d992c:	2003e244 	.word	0x2003e244
   d9930:	2003e2ac 	.word	0x2003e2ac

000d9934 <_strtol_l.isra.0>:
   d9934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9938:	4e3a      	ldr	r6, [pc, #232]	; (d9a24 <_strtol_l.isra.0+0xf0>)
   d993a:	4686      	mov	lr, r0
   d993c:	468c      	mov	ip, r1
   d993e:	4660      	mov	r0, ip
   d9940:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9944:	5da5      	ldrb	r5, [r4, r6]
   d9946:	f015 0508 	ands.w	r5, r5, #8
   d994a:	d1f8      	bne.n	d993e <_strtol_l.isra.0+0xa>
   d994c:	2c2d      	cmp	r4, #45	; 0x2d
   d994e:	d133      	bne.n	d99b8 <_strtol_l.isra.0+0x84>
   d9950:	f89c 4000 	ldrb.w	r4, [ip]
   d9954:	f04f 0801 	mov.w	r8, #1
   d9958:	f100 0c02 	add.w	ip, r0, #2
   d995c:	2b00      	cmp	r3, #0
   d995e:	d05c      	beq.n	d9a1a <_strtol_l.isra.0+0xe6>
   d9960:	2b10      	cmp	r3, #16
   d9962:	d10c      	bne.n	d997e <_strtol_l.isra.0+0x4a>
   d9964:	2c30      	cmp	r4, #48	; 0x30
   d9966:	d10a      	bne.n	d997e <_strtol_l.isra.0+0x4a>
   d9968:	f89c 0000 	ldrb.w	r0, [ip]
   d996c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9970:	2858      	cmp	r0, #88	; 0x58
   d9972:	d14d      	bne.n	d9a10 <_strtol_l.isra.0+0xdc>
   d9974:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9978:	2310      	movs	r3, #16
   d997a:	f10c 0c02 	add.w	ip, ip, #2
   d997e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9982:	3f01      	subs	r7, #1
   d9984:	2600      	movs	r6, #0
   d9986:	fbb7 f9f3 	udiv	r9, r7, r3
   d998a:	4630      	mov	r0, r6
   d998c:	fb03 7a19 	mls	sl, r3, r9, r7
   d9990:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9994:	2d09      	cmp	r5, #9
   d9996:	d818      	bhi.n	d99ca <_strtol_l.isra.0+0x96>
   d9998:	462c      	mov	r4, r5
   d999a:	42a3      	cmp	r3, r4
   d999c:	dd24      	ble.n	d99e8 <_strtol_l.isra.0+0xb4>
   d999e:	1c75      	adds	r5, r6, #1
   d99a0:	d007      	beq.n	d99b2 <_strtol_l.isra.0+0x7e>
   d99a2:	4581      	cmp	r9, r0
   d99a4:	d31d      	bcc.n	d99e2 <_strtol_l.isra.0+0xae>
   d99a6:	d101      	bne.n	d99ac <_strtol_l.isra.0+0x78>
   d99a8:	45a2      	cmp	sl, r4
   d99aa:	db1a      	blt.n	d99e2 <_strtol_l.isra.0+0xae>
   d99ac:	fb00 4003 	mla	r0, r0, r3, r4
   d99b0:	2601      	movs	r6, #1
   d99b2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d99b6:	e7eb      	b.n	d9990 <_strtol_l.isra.0+0x5c>
   d99b8:	2c2b      	cmp	r4, #43	; 0x2b
   d99ba:	bf08      	it	eq
   d99bc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d99c0:	46a8      	mov	r8, r5
   d99c2:	bf08      	it	eq
   d99c4:	f100 0c02 	addeq.w	ip, r0, #2
   d99c8:	e7c8      	b.n	d995c <_strtol_l.isra.0+0x28>
   d99ca:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d99ce:	2d19      	cmp	r5, #25
   d99d0:	d801      	bhi.n	d99d6 <_strtol_l.isra.0+0xa2>
   d99d2:	3c37      	subs	r4, #55	; 0x37
   d99d4:	e7e1      	b.n	d999a <_strtol_l.isra.0+0x66>
   d99d6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d99da:	2d19      	cmp	r5, #25
   d99dc:	d804      	bhi.n	d99e8 <_strtol_l.isra.0+0xb4>
   d99de:	3c57      	subs	r4, #87	; 0x57
   d99e0:	e7db      	b.n	d999a <_strtol_l.isra.0+0x66>
   d99e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d99e6:	e7e4      	b.n	d99b2 <_strtol_l.isra.0+0x7e>
   d99e8:	1c73      	adds	r3, r6, #1
   d99ea:	d106      	bne.n	d99fa <_strtol_l.isra.0+0xc6>
   d99ec:	2322      	movs	r3, #34	; 0x22
   d99ee:	f8ce 3000 	str.w	r3, [lr]
   d99f2:	4638      	mov	r0, r7
   d99f4:	b942      	cbnz	r2, d9a08 <_strtol_l.isra.0+0xd4>
   d99f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d99fa:	f1b8 0f00 	cmp.w	r8, #0
   d99fe:	d000      	beq.n	d9a02 <_strtol_l.isra.0+0xce>
   d9a00:	4240      	negs	r0, r0
   d9a02:	2a00      	cmp	r2, #0
   d9a04:	d0f7      	beq.n	d99f6 <_strtol_l.isra.0+0xc2>
   d9a06:	b10e      	cbz	r6, d9a0c <_strtol_l.isra.0+0xd8>
   d9a08:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9a0c:	6011      	str	r1, [r2, #0]
   d9a0e:	e7f2      	b.n	d99f6 <_strtol_l.isra.0+0xc2>
   d9a10:	2430      	movs	r4, #48	; 0x30
   d9a12:	2b00      	cmp	r3, #0
   d9a14:	d1b3      	bne.n	d997e <_strtol_l.isra.0+0x4a>
   d9a16:	2308      	movs	r3, #8
   d9a18:	e7b1      	b.n	d997e <_strtol_l.isra.0+0x4a>
   d9a1a:	2c30      	cmp	r4, #48	; 0x30
   d9a1c:	d0a4      	beq.n	d9968 <_strtol_l.isra.0+0x34>
   d9a1e:	230a      	movs	r3, #10
   d9a20:	e7ad      	b.n	d997e <_strtol_l.isra.0+0x4a>
   d9a22:	bf00      	nop
   d9a24:	000db2c9 	.word	0x000db2c9

000d9a28 <strtol>:
   d9a28:	4613      	mov	r3, r2
   d9a2a:	460a      	mov	r2, r1
   d9a2c:	4601      	mov	r1, r0
   d9a2e:	4802      	ldr	r0, [pc, #8]	; (d9a38 <strtol+0x10>)
   d9a30:	6800      	ldr	r0, [r0, #0]
   d9a32:	f7ff bf7f 	b.w	d9934 <_strtol_l.isra.0>
   d9a36:	bf00      	nop
   d9a38:	2003e244 	.word	0x2003e244

000d9a3c <rshift>:
   d9a3c:	6903      	ldr	r3, [r0, #16]
   d9a3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9a46:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9a4a:	f100 0414 	add.w	r4, r0, #20
   d9a4e:	dd45      	ble.n	d9adc <rshift+0xa0>
   d9a50:	f011 011f 	ands.w	r1, r1, #31
   d9a54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9a58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9a5c:	d10c      	bne.n	d9a78 <rshift+0x3c>
   d9a5e:	f100 0710 	add.w	r7, r0, #16
   d9a62:	4629      	mov	r1, r5
   d9a64:	42b1      	cmp	r1, r6
   d9a66:	d334      	bcc.n	d9ad2 <rshift+0x96>
   d9a68:	1a9b      	subs	r3, r3, r2
   d9a6a:	009b      	lsls	r3, r3, #2
   d9a6c:	1eea      	subs	r2, r5, #3
   d9a6e:	4296      	cmp	r6, r2
   d9a70:	bf38      	it	cc
   d9a72:	2300      	movcc	r3, #0
   d9a74:	4423      	add	r3, r4
   d9a76:	e015      	b.n	d9aa4 <rshift+0x68>
   d9a78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9a7c:	f1c1 0820 	rsb	r8, r1, #32
   d9a80:	40cf      	lsrs	r7, r1
   d9a82:	f105 0e04 	add.w	lr, r5, #4
   d9a86:	46a1      	mov	r9, r4
   d9a88:	4576      	cmp	r6, lr
   d9a8a:	46f4      	mov	ip, lr
   d9a8c:	d815      	bhi.n	d9aba <rshift+0x7e>
   d9a8e:	1a9b      	subs	r3, r3, r2
   d9a90:	009a      	lsls	r2, r3, #2
   d9a92:	3a04      	subs	r2, #4
   d9a94:	3501      	adds	r5, #1
   d9a96:	42ae      	cmp	r6, r5
   d9a98:	bf38      	it	cc
   d9a9a:	2200      	movcc	r2, #0
   d9a9c:	18a3      	adds	r3, r4, r2
   d9a9e:	50a7      	str	r7, [r4, r2]
   d9aa0:	b107      	cbz	r7, d9aa4 <rshift+0x68>
   d9aa2:	3304      	adds	r3, #4
   d9aa4:	1b1a      	subs	r2, r3, r4
   d9aa6:	42a3      	cmp	r3, r4
   d9aa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9aac:	bf08      	it	eq
   d9aae:	2300      	moveq	r3, #0
   d9ab0:	6102      	str	r2, [r0, #16]
   d9ab2:	bf08      	it	eq
   d9ab4:	6143      	streq	r3, [r0, #20]
   d9ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9aba:	f8dc c000 	ldr.w	ip, [ip]
   d9abe:	fa0c fc08 	lsl.w	ip, ip, r8
   d9ac2:	ea4c 0707 	orr.w	r7, ip, r7
   d9ac6:	f849 7b04 	str.w	r7, [r9], #4
   d9aca:	f85e 7b04 	ldr.w	r7, [lr], #4
   d9ace:	40cf      	lsrs	r7, r1
   d9ad0:	e7da      	b.n	d9a88 <rshift+0x4c>
   d9ad2:	f851 cb04 	ldr.w	ip, [r1], #4
   d9ad6:	f847 cf04 	str.w	ip, [r7, #4]!
   d9ada:	e7c3      	b.n	d9a64 <rshift+0x28>
   d9adc:	4623      	mov	r3, r4
   d9ade:	e7e1      	b.n	d9aa4 <rshift+0x68>

000d9ae0 <__hexdig_fun>:
   d9ae0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9ae4:	2b09      	cmp	r3, #9
   d9ae6:	d802      	bhi.n	d9aee <__hexdig_fun+0xe>
   d9ae8:	3820      	subs	r0, #32
   d9aea:	b2c0      	uxtb	r0, r0
   d9aec:	4770      	bx	lr
   d9aee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9af2:	2b05      	cmp	r3, #5
   d9af4:	d801      	bhi.n	d9afa <__hexdig_fun+0x1a>
   d9af6:	3847      	subs	r0, #71	; 0x47
   d9af8:	e7f7      	b.n	d9aea <__hexdig_fun+0xa>
   d9afa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9afe:	2b05      	cmp	r3, #5
   d9b00:	d801      	bhi.n	d9b06 <__hexdig_fun+0x26>
   d9b02:	3827      	subs	r0, #39	; 0x27
   d9b04:	e7f1      	b.n	d9aea <__hexdig_fun+0xa>
   d9b06:	2000      	movs	r0, #0
   d9b08:	4770      	bx	lr
	...

000d9b0c <__gethex>:
   d9b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b10:	ed2d 8b02 	vpush	{d8}
   d9b14:	b089      	sub	sp, #36	; 0x24
   d9b16:	ee08 0a10 	vmov	s16, r0
   d9b1a:	9304      	str	r3, [sp, #16]
   d9b1c:	4bbc      	ldr	r3, [pc, #752]	; (d9e10 <__gethex+0x304>)
   d9b1e:	681b      	ldr	r3, [r3, #0]
   d9b20:	9301      	str	r3, [sp, #4]
   d9b22:	4618      	mov	r0, r3
   d9b24:	468b      	mov	fp, r1
   d9b26:	4690      	mov	r8, r2
   d9b28:	f7ff f8a3 	bl	d8c72 <strlen>
   d9b2c:	9b01      	ldr	r3, [sp, #4]
   d9b2e:	f8db 2000 	ldr.w	r2, [fp]
   d9b32:	4403      	add	r3, r0
   d9b34:	4682      	mov	sl, r0
   d9b36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9b3a:	9305      	str	r3, [sp, #20]
   d9b3c:	1c93      	adds	r3, r2, #2
   d9b3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9b42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9b46:	32fe      	adds	r2, #254	; 0xfe
   d9b48:	18d1      	adds	r1, r2, r3
   d9b4a:	461f      	mov	r7, r3
   d9b4c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9b50:	9100      	str	r1, [sp, #0]
   d9b52:	2830      	cmp	r0, #48	; 0x30
   d9b54:	d0f8      	beq.n	d9b48 <__gethex+0x3c>
   d9b56:	f7ff ffc3 	bl	d9ae0 <__hexdig_fun>
   d9b5a:	4604      	mov	r4, r0
   d9b5c:	2800      	cmp	r0, #0
   d9b5e:	d13a      	bne.n	d9bd6 <__gethex+0xca>
   d9b60:	9901      	ldr	r1, [sp, #4]
   d9b62:	4652      	mov	r2, sl
   d9b64:	4638      	mov	r0, r7
   d9b66:	f7ff f88c 	bl	d8c82 <strncmp>
   d9b6a:	4605      	mov	r5, r0
   d9b6c:	2800      	cmp	r0, #0
   d9b6e:	d168      	bne.n	d9c42 <__gethex+0x136>
   d9b70:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9b74:	eb07 060a 	add.w	r6, r7, sl
   d9b78:	f7ff ffb2 	bl	d9ae0 <__hexdig_fun>
   d9b7c:	2800      	cmp	r0, #0
   d9b7e:	d062      	beq.n	d9c46 <__gethex+0x13a>
   d9b80:	4633      	mov	r3, r6
   d9b82:	7818      	ldrb	r0, [r3, #0]
   d9b84:	2830      	cmp	r0, #48	; 0x30
   d9b86:	461f      	mov	r7, r3
   d9b88:	f103 0301 	add.w	r3, r3, #1
   d9b8c:	d0f9      	beq.n	d9b82 <__gethex+0x76>
   d9b8e:	f7ff ffa7 	bl	d9ae0 <__hexdig_fun>
   d9b92:	2301      	movs	r3, #1
   d9b94:	fab0 f480 	clz	r4, r0
   d9b98:	0964      	lsrs	r4, r4, #5
   d9b9a:	4635      	mov	r5, r6
   d9b9c:	9300      	str	r3, [sp, #0]
   d9b9e:	463a      	mov	r2, r7
   d9ba0:	4616      	mov	r6, r2
   d9ba2:	3201      	adds	r2, #1
   d9ba4:	7830      	ldrb	r0, [r6, #0]
   d9ba6:	f7ff ff9b 	bl	d9ae0 <__hexdig_fun>
   d9baa:	2800      	cmp	r0, #0
   d9bac:	d1f8      	bne.n	d9ba0 <__gethex+0x94>
   d9bae:	9901      	ldr	r1, [sp, #4]
   d9bb0:	4652      	mov	r2, sl
   d9bb2:	4630      	mov	r0, r6
   d9bb4:	f7ff f865 	bl	d8c82 <strncmp>
   d9bb8:	b980      	cbnz	r0, d9bdc <__gethex+0xd0>
   d9bba:	b94d      	cbnz	r5, d9bd0 <__gethex+0xc4>
   d9bbc:	eb06 050a 	add.w	r5, r6, sl
   d9bc0:	462a      	mov	r2, r5
   d9bc2:	4616      	mov	r6, r2
   d9bc4:	3201      	adds	r2, #1
   d9bc6:	7830      	ldrb	r0, [r6, #0]
   d9bc8:	f7ff ff8a 	bl	d9ae0 <__hexdig_fun>
   d9bcc:	2800      	cmp	r0, #0
   d9bce:	d1f8      	bne.n	d9bc2 <__gethex+0xb6>
   d9bd0:	1bad      	subs	r5, r5, r6
   d9bd2:	00ad      	lsls	r5, r5, #2
   d9bd4:	e004      	b.n	d9be0 <__gethex+0xd4>
   d9bd6:	2400      	movs	r4, #0
   d9bd8:	4625      	mov	r5, r4
   d9bda:	e7e0      	b.n	d9b9e <__gethex+0x92>
   d9bdc:	2d00      	cmp	r5, #0
   d9bde:	d1f7      	bne.n	d9bd0 <__gethex+0xc4>
   d9be0:	7833      	ldrb	r3, [r6, #0]
   d9be2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9be6:	2b50      	cmp	r3, #80	; 0x50
   d9be8:	d13b      	bne.n	d9c62 <__gethex+0x156>
   d9bea:	7873      	ldrb	r3, [r6, #1]
   d9bec:	2b2b      	cmp	r3, #43	; 0x2b
   d9bee:	d02c      	beq.n	d9c4a <__gethex+0x13e>
   d9bf0:	2b2d      	cmp	r3, #45	; 0x2d
   d9bf2:	d02e      	beq.n	d9c52 <__gethex+0x146>
   d9bf4:	1c71      	adds	r1, r6, #1
   d9bf6:	f04f 0900 	mov.w	r9, #0
   d9bfa:	7808      	ldrb	r0, [r1, #0]
   d9bfc:	f7ff ff70 	bl	d9ae0 <__hexdig_fun>
   d9c00:	1e43      	subs	r3, r0, #1
   d9c02:	b2db      	uxtb	r3, r3
   d9c04:	2b18      	cmp	r3, #24
   d9c06:	d82c      	bhi.n	d9c62 <__gethex+0x156>
   d9c08:	f1a0 0210 	sub.w	r2, r0, #16
   d9c0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9c10:	f7ff ff66 	bl	d9ae0 <__hexdig_fun>
   d9c14:	1e43      	subs	r3, r0, #1
   d9c16:	b2db      	uxtb	r3, r3
   d9c18:	2b18      	cmp	r3, #24
   d9c1a:	d91d      	bls.n	d9c58 <__gethex+0x14c>
   d9c1c:	f1b9 0f00 	cmp.w	r9, #0
   d9c20:	d000      	beq.n	d9c24 <__gethex+0x118>
   d9c22:	4252      	negs	r2, r2
   d9c24:	4415      	add	r5, r2
   d9c26:	f8cb 1000 	str.w	r1, [fp]
   d9c2a:	b1e4      	cbz	r4, d9c66 <__gethex+0x15a>
   d9c2c:	9b00      	ldr	r3, [sp, #0]
   d9c2e:	2b00      	cmp	r3, #0
   d9c30:	bf14      	ite	ne
   d9c32:	2700      	movne	r7, #0
   d9c34:	2706      	moveq	r7, #6
   d9c36:	4638      	mov	r0, r7
   d9c38:	b009      	add	sp, #36	; 0x24
   d9c3a:	ecbd 8b02 	vpop	{d8}
   d9c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c42:	463e      	mov	r6, r7
   d9c44:	4625      	mov	r5, r4
   d9c46:	2401      	movs	r4, #1
   d9c48:	e7ca      	b.n	d9be0 <__gethex+0xd4>
   d9c4a:	f04f 0900 	mov.w	r9, #0
   d9c4e:	1cb1      	adds	r1, r6, #2
   d9c50:	e7d3      	b.n	d9bfa <__gethex+0xee>
   d9c52:	f04f 0901 	mov.w	r9, #1
   d9c56:	e7fa      	b.n	d9c4e <__gethex+0x142>
   d9c58:	230a      	movs	r3, #10
   d9c5a:	fb03 0202 	mla	r2, r3, r2, r0
   d9c5e:	3a10      	subs	r2, #16
   d9c60:	e7d4      	b.n	d9c0c <__gethex+0x100>
   d9c62:	4631      	mov	r1, r6
   d9c64:	e7df      	b.n	d9c26 <__gethex+0x11a>
   d9c66:	1bf3      	subs	r3, r6, r7
   d9c68:	3b01      	subs	r3, #1
   d9c6a:	4621      	mov	r1, r4
   d9c6c:	2b07      	cmp	r3, #7
   d9c6e:	dc52      	bgt.n	d9d16 <__gethex+0x20a>
   d9c70:	ee18 0a10 	vmov	r0, s16
   d9c74:	f000 fa52 	bl	da11c <_Balloc>
   d9c78:	f04f 0b00 	mov.w	fp, #0
   d9c7c:	f100 0914 	add.w	r9, r0, #20
   d9c80:	f1ca 0301 	rsb	r3, sl, #1
   d9c84:	4604      	mov	r4, r0
   d9c86:	f8cd 9008 	str.w	r9, [sp, #8]
   d9c8a:	f8cd b000 	str.w	fp, [sp]
   d9c8e:	9306      	str	r3, [sp, #24]
   d9c90:	42b7      	cmp	r7, r6
   d9c92:	d343      	bcc.n	d9d1c <__gethex+0x210>
   d9c94:	9802      	ldr	r0, [sp, #8]
   d9c96:	9b00      	ldr	r3, [sp, #0]
   d9c98:	f840 3b04 	str.w	r3, [r0], #4
   d9c9c:	eba0 0009 	sub.w	r0, r0, r9
   d9ca0:	1080      	asrs	r0, r0, #2
   d9ca2:	0146      	lsls	r6, r0, #5
   d9ca4:	6120      	str	r0, [r4, #16]
   d9ca6:	4618      	mov	r0, r3
   d9ca8:	f000 faff 	bl	da2aa <__hi0bits>
   d9cac:	1a30      	subs	r0, r6, r0
   d9cae:	f8d8 6000 	ldr.w	r6, [r8]
   d9cb2:	42b0      	cmp	r0, r6
   d9cb4:	dd66      	ble.n	d9d84 <__gethex+0x278>
   d9cb6:	1b87      	subs	r7, r0, r6
   d9cb8:	4639      	mov	r1, r7
   d9cba:	4620      	mov	r0, r4
   d9cbc:	f000 fe4c 	bl	da958 <__any_on>
   d9cc0:	4682      	mov	sl, r0
   d9cc2:	b1a8      	cbz	r0, d9cf0 <__gethex+0x1e4>
   d9cc4:	1e7b      	subs	r3, r7, #1
   d9cc6:	1159      	asrs	r1, r3, #5
   d9cc8:	f003 021f 	and.w	r2, r3, #31
   d9ccc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9cd0:	f04f 0a01 	mov.w	sl, #1
   d9cd4:	fa0a f202 	lsl.w	r2, sl, r2
   d9cd8:	420a      	tst	r2, r1
   d9cda:	d009      	beq.n	d9cf0 <__gethex+0x1e4>
   d9cdc:	4553      	cmp	r3, sl
   d9cde:	dd05      	ble.n	d9cec <__gethex+0x1e0>
   d9ce0:	1eb9      	subs	r1, r7, #2
   d9ce2:	4620      	mov	r0, r4
   d9ce4:	f000 fe38 	bl	da958 <__any_on>
   d9ce8:	2800      	cmp	r0, #0
   d9cea:	d148      	bne.n	d9d7e <__gethex+0x272>
   d9cec:	f04f 0a02 	mov.w	sl, #2
   d9cf0:	4639      	mov	r1, r7
   d9cf2:	4620      	mov	r0, r4
   d9cf4:	f7ff fea2 	bl	d9a3c <rshift>
   d9cf8:	443d      	add	r5, r7
   d9cfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9cfe:	42ab      	cmp	r3, r5
   d9d00:	da4f      	bge.n	d9da2 <__gethex+0x296>
   d9d02:	ee18 0a10 	vmov	r0, s16
   d9d06:	4621      	mov	r1, r4
   d9d08:	f000 fa3c 	bl	da184 <_Bfree>
   d9d0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9d0e:	2300      	movs	r3, #0
   d9d10:	6013      	str	r3, [r2, #0]
   d9d12:	27a3      	movs	r7, #163	; 0xa3
   d9d14:	e78f      	b.n	d9c36 <__gethex+0x12a>
   d9d16:	3101      	adds	r1, #1
   d9d18:	105b      	asrs	r3, r3, #1
   d9d1a:	e7a7      	b.n	d9c6c <__gethex+0x160>
   d9d1c:	1e73      	subs	r3, r6, #1
   d9d1e:	9a05      	ldr	r2, [sp, #20]
   d9d20:	9303      	str	r3, [sp, #12]
   d9d22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9d26:	4293      	cmp	r3, r2
   d9d28:	d019      	beq.n	d9d5e <__gethex+0x252>
   d9d2a:	f1bb 0f20 	cmp.w	fp, #32
   d9d2e:	d107      	bne.n	d9d40 <__gethex+0x234>
   d9d30:	9b02      	ldr	r3, [sp, #8]
   d9d32:	9a00      	ldr	r2, [sp, #0]
   d9d34:	f843 2b04 	str.w	r2, [r3], #4
   d9d38:	9302      	str	r3, [sp, #8]
   d9d3a:	2300      	movs	r3, #0
   d9d3c:	9300      	str	r3, [sp, #0]
   d9d3e:	469b      	mov	fp, r3
   d9d40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9d44:	f7ff fecc 	bl	d9ae0 <__hexdig_fun>
   d9d48:	9b00      	ldr	r3, [sp, #0]
   d9d4a:	f000 000f 	and.w	r0, r0, #15
   d9d4e:	fa00 f00b 	lsl.w	r0, r0, fp
   d9d52:	4303      	orrs	r3, r0
   d9d54:	9300      	str	r3, [sp, #0]
   d9d56:	f10b 0b04 	add.w	fp, fp, #4
   d9d5a:	9b03      	ldr	r3, [sp, #12]
   d9d5c:	e00d      	b.n	d9d7a <__gethex+0x26e>
   d9d5e:	9b03      	ldr	r3, [sp, #12]
   d9d60:	9a06      	ldr	r2, [sp, #24]
   d9d62:	4413      	add	r3, r2
   d9d64:	42bb      	cmp	r3, r7
   d9d66:	d3e0      	bcc.n	d9d2a <__gethex+0x21e>
   d9d68:	4618      	mov	r0, r3
   d9d6a:	9901      	ldr	r1, [sp, #4]
   d9d6c:	9307      	str	r3, [sp, #28]
   d9d6e:	4652      	mov	r2, sl
   d9d70:	f7fe ff87 	bl	d8c82 <strncmp>
   d9d74:	9b07      	ldr	r3, [sp, #28]
   d9d76:	2800      	cmp	r0, #0
   d9d78:	d1d7      	bne.n	d9d2a <__gethex+0x21e>
   d9d7a:	461e      	mov	r6, r3
   d9d7c:	e788      	b.n	d9c90 <__gethex+0x184>
   d9d7e:	f04f 0a03 	mov.w	sl, #3
   d9d82:	e7b5      	b.n	d9cf0 <__gethex+0x1e4>
   d9d84:	da0a      	bge.n	d9d9c <__gethex+0x290>
   d9d86:	1a37      	subs	r7, r6, r0
   d9d88:	4621      	mov	r1, r4
   d9d8a:	ee18 0a10 	vmov	r0, s16
   d9d8e:	463a      	mov	r2, r7
   d9d90:	f000 fbce 	bl	da530 <__lshift>
   d9d94:	1bed      	subs	r5, r5, r7
   d9d96:	4604      	mov	r4, r0
   d9d98:	f100 0914 	add.w	r9, r0, #20
   d9d9c:	f04f 0a00 	mov.w	sl, #0
   d9da0:	e7ab      	b.n	d9cfa <__gethex+0x1ee>
   d9da2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9da6:	42a8      	cmp	r0, r5
   d9da8:	dd6d      	ble.n	d9e86 <__gethex+0x37a>
   d9daa:	1b45      	subs	r5, r0, r5
   d9dac:	42ae      	cmp	r6, r5
   d9dae:	dc31      	bgt.n	d9e14 <__gethex+0x308>
   d9db0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9db4:	2b02      	cmp	r3, #2
   d9db6:	d023      	beq.n	d9e00 <__gethex+0x2f4>
   d9db8:	2b03      	cmp	r3, #3
   d9dba:	d025      	beq.n	d9e08 <__gethex+0x2fc>
   d9dbc:	2b01      	cmp	r3, #1
   d9dbe:	d115      	bne.n	d9dec <__gethex+0x2e0>
   d9dc0:	42ae      	cmp	r6, r5
   d9dc2:	d113      	bne.n	d9dec <__gethex+0x2e0>
   d9dc4:	2e01      	cmp	r6, #1
   d9dc6:	d10b      	bne.n	d9de0 <__gethex+0x2d4>
   d9dc8:	9a04      	ldr	r2, [sp, #16]
   d9dca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9dce:	6013      	str	r3, [r2, #0]
   d9dd0:	2301      	movs	r3, #1
   d9dd2:	6123      	str	r3, [r4, #16]
   d9dd4:	f8c9 3000 	str.w	r3, [r9]
   d9dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9dda:	2762      	movs	r7, #98	; 0x62
   d9ddc:	601c      	str	r4, [r3, #0]
   d9dde:	e72a      	b.n	d9c36 <__gethex+0x12a>
   d9de0:	1e71      	subs	r1, r6, #1
   d9de2:	4620      	mov	r0, r4
   d9de4:	f000 fdb8 	bl	da958 <__any_on>
   d9de8:	2800      	cmp	r0, #0
   d9dea:	d1ed      	bne.n	d9dc8 <__gethex+0x2bc>
   d9dec:	ee18 0a10 	vmov	r0, s16
   d9df0:	4621      	mov	r1, r4
   d9df2:	f000 f9c7 	bl	da184 <_Bfree>
   d9df6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9df8:	2300      	movs	r3, #0
   d9dfa:	6013      	str	r3, [r2, #0]
   d9dfc:	2750      	movs	r7, #80	; 0x50
   d9dfe:	e71a      	b.n	d9c36 <__gethex+0x12a>
   d9e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e02:	2b00      	cmp	r3, #0
   d9e04:	d1f2      	bne.n	d9dec <__gethex+0x2e0>
   d9e06:	e7df      	b.n	d9dc8 <__gethex+0x2bc>
   d9e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e0a:	2b00      	cmp	r3, #0
   d9e0c:	d1dc      	bne.n	d9dc8 <__gethex+0x2bc>
   d9e0e:	e7ed      	b.n	d9dec <__gethex+0x2e0>
   d9e10:	000db3cc 	.word	0x000db3cc
   d9e14:	1e6f      	subs	r7, r5, #1
   d9e16:	f1ba 0f00 	cmp.w	sl, #0
   d9e1a:	d131      	bne.n	d9e80 <__gethex+0x374>
   d9e1c:	b127      	cbz	r7, d9e28 <__gethex+0x31c>
   d9e1e:	4639      	mov	r1, r7
   d9e20:	4620      	mov	r0, r4
   d9e22:	f000 fd99 	bl	da958 <__any_on>
   d9e26:	4682      	mov	sl, r0
   d9e28:	117b      	asrs	r3, r7, #5
   d9e2a:	2101      	movs	r1, #1
   d9e2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9e30:	f007 071f 	and.w	r7, r7, #31
   d9e34:	fa01 f707 	lsl.w	r7, r1, r7
   d9e38:	421f      	tst	r7, r3
   d9e3a:	4629      	mov	r1, r5
   d9e3c:	4620      	mov	r0, r4
   d9e3e:	bf18      	it	ne
   d9e40:	f04a 0a02 	orrne.w	sl, sl, #2
   d9e44:	1b76      	subs	r6, r6, r5
   d9e46:	f7ff fdf9 	bl	d9a3c <rshift>
   d9e4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9e4e:	2702      	movs	r7, #2
   d9e50:	f1ba 0f00 	cmp.w	sl, #0
   d9e54:	d048      	beq.n	d9ee8 <__gethex+0x3dc>
   d9e56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9e5a:	2b02      	cmp	r3, #2
   d9e5c:	d015      	beq.n	d9e8a <__gethex+0x37e>
   d9e5e:	2b03      	cmp	r3, #3
   d9e60:	d017      	beq.n	d9e92 <__gethex+0x386>
   d9e62:	2b01      	cmp	r3, #1
   d9e64:	d109      	bne.n	d9e7a <__gethex+0x36e>
   d9e66:	f01a 0f02 	tst.w	sl, #2
   d9e6a:	d006      	beq.n	d9e7a <__gethex+0x36e>
   d9e6c:	f8d9 0000 	ldr.w	r0, [r9]
   d9e70:	ea4a 0a00 	orr.w	sl, sl, r0
   d9e74:	f01a 0f01 	tst.w	sl, #1
   d9e78:	d10e      	bne.n	d9e98 <__gethex+0x38c>
   d9e7a:	f047 0710 	orr.w	r7, r7, #16
   d9e7e:	e033      	b.n	d9ee8 <__gethex+0x3dc>
   d9e80:	f04f 0a01 	mov.w	sl, #1
   d9e84:	e7d0      	b.n	d9e28 <__gethex+0x31c>
   d9e86:	2701      	movs	r7, #1
   d9e88:	e7e2      	b.n	d9e50 <__gethex+0x344>
   d9e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e8c:	f1c3 0301 	rsb	r3, r3, #1
   d9e90:	9315      	str	r3, [sp, #84]	; 0x54
   d9e92:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9e94:	2b00      	cmp	r3, #0
   d9e96:	d0f0      	beq.n	d9e7a <__gethex+0x36e>
   d9e98:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9e9c:	f104 0314 	add.w	r3, r4, #20
   d9ea0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d9ea4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9ea8:	f04f 0c00 	mov.w	ip, #0
   d9eac:	4618      	mov	r0, r3
   d9eae:	f853 2b04 	ldr.w	r2, [r3], #4
   d9eb2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9eb6:	d01c      	beq.n	d9ef2 <__gethex+0x3e6>
   d9eb8:	3201      	adds	r2, #1
   d9eba:	6002      	str	r2, [r0, #0]
   d9ebc:	2f02      	cmp	r7, #2
   d9ebe:	f104 0314 	add.w	r3, r4, #20
   d9ec2:	d13a      	bne.n	d9f3a <__gethex+0x42e>
   d9ec4:	f8d8 2000 	ldr.w	r2, [r8]
   d9ec8:	3a01      	subs	r2, #1
   d9eca:	42b2      	cmp	r2, r6
   d9ecc:	d10a      	bne.n	d9ee4 <__gethex+0x3d8>
   d9ece:	1171      	asrs	r1, r6, #5
   d9ed0:	2201      	movs	r2, #1
   d9ed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d9ed6:	f006 061f 	and.w	r6, r6, #31
   d9eda:	fa02 f606 	lsl.w	r6, r2, r6
   d9ede:	421e      	tst	r6, r3
   d9ee0:	bf18      	it	ne
   d9ee2:	4617      	movne	r7, r2
   d9ee4:	f047 0720 	orr.w	r7, r7, #32
   d9ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9eea:	601c      	str	r4, [r3, #0]
   d9eec:	9b04      	ldr	r3, [sp, #16]
   d9eee:	601d      	str	r5, [r3, #0]
   d9ef0:	e6a1      	b.n	d9c36 <__gethex+0x12a>
   d9ef2:	4299      	cmp	r1, r3
   d9ef4:	f843 cc04 	str.w	ip, [r3, #-4]
   d9ef8:	d8d8      	bhi.n	d9eac <__gethex+0x3a0>
   d9efa:	68a3      	ldr	r3, [r4, #8]
   d9efc:	4599      	cmp	r9, r3
   d9efe:	db14      	blt.n	d9f2a <__gethex+0x41e>
   d9f00:	6861      	ldr	r1, [r4, #4]
   d9f02:	ee18 0a10 	vmov	r0, s16
   d9f06:	3101      	adds	r1, #1
   d9f08:	f000 f908 	bl	da11c <_Balloc>
   d9f0c:	6922      	ldr	r2, [r4, #16]
   d9f0e:	3202      	adds	r2, #2
   d9f10:	f104 010c 	add.w	r1, r4, #12
   d9f14:	4682      	mov	sl, r0
   d9f16:	0092      	lsls	r2, r2, #2
   d9f18:	300c      	adds	r0, #12
   d9f1a:	f7fe fe27 	bl	d8b6c <memcpy>
   d9f1e:	4621      	mov	r1, r4
   d9f20:	ee18 0a10 	vmov	r0, s16
   d9f24:	f000 f92e 	bl	da184 <_Bfree>
   d9f28:	4654      	mov	r4, sl
   d9f2a:	6923      	ldr	r3, [r4, #16]
   d9f2c:	1c5a      	adds	r2, r3, #1
   d9f2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9f32:	6122      	str	r2, [r4, #16]
   d9f34:	2201      	movs	r2, #1
   d9f36:	615a      	str	r2, [r3, #20]
   d9f38:	e7c0      	b.n	d9ebc <__gethex+0x3b0>
   d9f3a:	6922      	ldr	r2, [r4, #16]
   d9f3c:	454a      	cmp	r2, r9
   d9f3e:	dd0b      	ble.n	d9f58 <__gethex+0x44c>
   d9f40:	2101      	movs	r1, #1
   d9f42:	4620      	mov	r0, r4
   d9f44:	f7ff fd7a 	bl	d9a3c <rshift>
   d9f48:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9f4c:	3501      	adds	r5, #1
   d9f4e:	42ab      	cmp	r3, r5
   d9f50:	f6ff aed7 	blt.w	d9d02 <__gethex+0x1f6>
   d9f54:	2701      	movs	r7, #1
   d9f56:	e7c5      	b.n	d9ee4 <__gethex+0x3d8>
   d9f58:	f016 061f 	ands.w	r6, r6, #31
   d9f5c:	d0fa      	beq.n	d9f54 <__gethex+0x448>
   d9f5e:	449b      	add	fp, r3
   d9f60:	f1c6 0620 	rsb	r6, r6, #32
   d9f64:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d9f68:	f000 f99f 	bl	da2aa <__hi0bits>
   d9f6c:	42b0      	cmp	r0, r6
   d9f6e:	dbe7      	blt.n	d9f40 <__gethex+0x434>
   d9f70:	e7f0      	b.n	d9f54 <__gethex+0x448>
   d9f72:	bf00      	nop

000d9f74 <L_shift>:
   d9f74:	f1c2 0208 	rsb	r2, r2, #8
   d9f78:	0092      	lsls	r2, r2, #2
   d9f7a:	b570      	push	{r4, r5, r6, lr}
   d9f7c:	f1c2 0620 	rsb	r6, r2, #32
   d9f80:	6843      	ldr	r3, [r0, #4]
   d9f82:	6804      	ldr	r4, [r0, #0]
   d9f84:	fa03 f506 	lsl.w	r5, r3, r6
   d9f88:	432c      	orrs	r4, r5
   d9f8a:	40d3      	lsrs	r3, r2
   d9f8c:	6004      	str	r4, [r0, #0]
   d9f8e:	f840 3f04 	str.w	r3, [r0, #4]!
   d9f92:	4288      	cmp	r0, r1
   d9f94:	d3f4      	bcc.n	d9f80 <L_shift+0xc>
   d9f96:	bd70      	pop	{r4, r5, r6, pc}

000d9f98 <__match>:
   d9f98:	b530      	push	{r4, r5, lr}
   d9f9a:	6803      	ldr	r3, [r0, #0]
   d9f9c:	3301      	adds	r3, #1
   d9f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9fa2:	b914      	cbnz	r4, d9faa <__match+0x12>
   d9fa4:	6003      	str	r3, [r0, #0]
   d9fa6:	2001      	movs	r0, #1
   d9fa8:	bd30      	pop	{r4, r5, pc}
   d9faa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9fae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9fb2:	2d19      	cmp	r5, #25
   d9fb4:	bf98      	it	ls
   d9fb6:	3220      	addls	r2, #32
   d9fb8:	42a2      	cmp	r2, r4
   d9fba:	d0f0      	beq.n	d9f9e <__match+0x6>
   d9fbc:	2000      	movs	r0, #0
   d9fbe:	e7f3      	b.n	d9fa8 <__match+0x10>

000d9fc0 <__hexnan>:
   d9fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9fc4:	680b      	ldr	r3, [r1, #0]
   d9fc6:	6801      	ldr	r1, [r0, #0]
   d9fc8:	115e      	asrs	r6, r3, #5
   d9fca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9fce:	f013 031f 	ands.w	r3, r3, #31
   d9fd2:	b087      	sub	sp, #28
   d9fd4:	bf18      	it	ne
   d9fd6:	3604      	addne	r6, #4
   d9fd8:	2500      	movs	r5, #0
   d9fda:	1f37      	subs	r7, r6, #4
   d9fdc:	4682      	mov	sl, r0
   d9fde:	4690      	mov	r8, r2
   d9fe0:	9301      	str	r3, [sp, #4]
   d9fe2:	f846 5c04 	str.w	r5, [r6, #-4]
   d9fe6:	46b9      	mov	r9, r7
   d9fe8:	463c      	mov	r4, r7
   d9fea:	9502      	str	r5, [sp, #8]
   d9fec:	46ab      	mov	fp, r5
   d9fee:	784a      	ldrb	r2, [r1, #1]
   d9ff0:	1c4b      	adds	r3, r1, #1
   d9ff2:	9303      	str	r3, [sp, #12]
   d9ff4:	b342      	cbz	r2, da048 <__hexnan+0x88>
   d9ff6:	4610      	mov	r0, r2
   d9ff8:	9105      	str	r1, [sp, #20]
   d9ffa:	9204      	str	r2, [sp, #16]
   d9ffc:	f7ff fd70 	bl	d9ae0 <__hexdig_fun>
   da000:	2800      	cmp	r0, #0
   da002:	d14f      	bne.n	da0a4 <__hexnan+0xe4>
   da004:	9a04      	ldr	r2, [sp, #16]
   da006:	9905      	ldr	r1, [sp, #20]
   da008:	2a20      	cmp	r2, #32
   da00a:	d818      	bhi.n	da03e <__hexnan+0x7e>
   da00c:	9b02      	ldr	r3, [sp, #8]
   da00e:	459b      	cmp	fp, r3
   da010:	dd13      	ble.n	da03a <__hexnan+0x7a>
   da012:	454c      	cmp	r4, r9
   da014:	d206      	bcs.n	da024 <__hexnan+0x64>
   da016:	2d07      	cmp	r5, #7
   da018:	dc04      	bgt.n	da024 <__hexnan+0x64>
   da01a:	462a      	mov	r2, r5
   da01c:	4649      	mov	r1, r9
   da01e:	4620      	mov	r0, r4
   da020:	f7ff ffa8 	bl	d9f74 <L_shift>
   da024:	4544      	cmp	r4, r8
   da026:	d950      	bls.n	da0ca <__hexnan+0x10a>
   da028:	2300      	movs	r3, #0
   da02a:	f1a4 0904 	sub.w	r9, r4, #4
   da02e:	f844 3c04 	str.w	r3, [r4, #-4]
   da032:	f8cd b008 	str.w	fp, [sp, #8]
   da036:	464c      	mov	r4, r9
   da038:	461d      	mov	r5, r3
   da03a:	9903      	ldr	r1, [sp, #12]
   da03c:	e7d7      	b.n	d9fee <__hexnan+0x2e>
   da03e:	2a29      	cmp	r2, #41	; 0x29
   da040:	d156      	bne.n	da0f0 <__hexnan+0x130>
   da042:	3102      	adds	r1, #2
   da044:	f8ca 1000 	str.w	r1, [sl]
   da048:	f1bb 0f00 	cmp.w	fp, #0
   da04c:	d050      	beq.n	da0f0 <__hexnan+0x130>
   da04e:	454c      	cmp	r4, r9
   da050:	d206      	bcs.n	da060 <__hexnan+0xa0>
   da052:	2d07      	cmp	r5, #7
   da054:	dc04      	bgt.n	da060 <__hexnan+0xa0>
   da056:	462a      	mov	r2, r5
   da058:	4649      	mov	r1, r9
   da05a:	4620      	mov	r0, r4
   da05c:	f7ff ff8a 	bl	d9f74 <L_shift>
   da060:	4544      	cmp	r4, r8
   da062:	d934      	bls.n	da0ce <__hexnan+0x10e>
   da064:	f1a8 0204 	sub.w	r2, r8, #4
   da068:	4623      	mov	r3, r4
   da06a:	f853 1b04 	ldr.w	r1, [r3], #4
   da06e:	f842 1f04 	str.w	r1, [r2, #4]!
   da072:	429f      	cmp	r7, r3
   da074:	d2f9      	bcs.n	da06a <__hexnan+0xaa>
   da076:	1b3b      	subs	r3, r7, r4
   da078:	f023 0303 	bic.w	r3, r3, #3
   da07c:	3304      	adds	r3, #4
   da07e:	3401      	adds	r4, #1
   da080:	3e03      	subs	r6, #3
   da082:	42b4      	cmp	r4, r6
   da084:	bf88      	it	hi
   da086:	2304      	movhi	r3, #4
   da088:	4443      	add	r3, r8
   da08a:	2200      	movs	r2, #0
   da08c:	f843 2b04 	str.w	r2, [r3], #4
   da090:	429f      	cmp	r7, r3
   da092:	d2fb      	bcs.n	da08c <__hexnan+0xcc>
   da094:	683b      	ldr	r3, [r7, #0]
   da096:	b91b      	cbnz	r3, da0a0 <__hexnan+0xe0>
   da098:	4547      	cmp	r7, r8
   da09a:	d127      	bne.n	da0ec <__hexnan+0x12c>
   da09c:	2301      	movs	r3, #1
   da09e:	603b      	str	r3, [r7, #0]
   da0a0:	2005      	movs	r0, #5
   da0a2:	e026      	b.n	da0f2 <__hexnan+0x132>
   da0a4:	3501      	adds	r5, #1
   da0a6:	2d08      	cmp	r5, #8
   da0a8:	f10b 0b01 	add.w	fp, fp, #1
   da0ac:	dd06      	ble.n	da0bc <__hexnan+0xfc>
   da0ae:	4544      	cmp	r4, r8
   da0b0:	d9c3      	bls.n	da03a <__hexnan+0x7a>
   da0b2:	2300      	movs	r3, #0
   da0b4:	f844 3c04 	str.w	r3, [r4, #-4]
   da0b8:	2501      	movs	r5, #1
   da0ba:	3c04      	subs	r4, #4
   da0bc:	6822      	ldr	r2, [r4, #0]
   da0be:	f000 000f 	and.w	r0, r0, #15
   da0c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da0c6:	6022      	str	r2, [r4, #0]
   da0c8:	e7b7      	b.n	da03a <__hexnan+0x7a>
   da0ca:	2508      	movs	r5, #8
   da0cc:	e7b5      	b.n	da03a <__hexnan+0x7a>
   da0ce:	9b01      	ldr	r3, [sp, #4]
   da0d0:	2b00      	cmp	r3, #0
   da0d2:	d0df      	beq.n	da094 <__hexnan+0xd4>
   da0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da0d8:	f1c3 0320 	rsb	r3, r3, #32
   da0dc:	fa22 f303 	lsr.w	r3, r2, r3
   da0e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da0e4:	401a      	ands	r2, r3
   da0e6:	f846 2c04 	str.w	r2, [r6, #-4]
   da0ea:	e7d3      	b.n	da094 <__hexnan+0xd4>
   da0ec:	3f04      	subs	r7, #4
   da0ee:	e7d1      	b.n	da094 <__hexnan+0xd4>
   da0f0:	2004      	movs	r0, #4
   da0f2:	b007      	add	sp, #28
   da0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da0f8 <__ascii_mbtowc>:
   da0f8:	b082      	sub	sp, #8
   da0fa:	b901      	cbnz	r1, da0fe <__ascii_mbtowc+0x6>
   da0fc:	a901      	add	r1, sp, #4
   da0fe:	b142      	cbz	r2, da112 <__ascii_mbtowc+0x1a>
   da100:	b14b      	cbz	r3, da116 <__ascii_mbtowc+0x1e>
   da102:	7813      	ldrb	r3, [r2, #0]
   da104:	600b      	str	r3, [r1, #0]
   da106:	7812      	ldrb	r2, [r2, #0]
   da108:	1e10      	subs	r0, r2, #0
   da10a:	bf18      	it	ne
   da10c:	2001      	movne	r0, #1
   da10e:	b002      	add	sp, #8
   da110:	4770      	bx	lr
   da112:	4610      	mov	r0, r2
   da114:	e7fb      	b.n	da10e <__ascii_mbtowc+0x16>
   da116:	f06f 0001 	mvn.w	r0, #1
   da11a:	e7f8      	b.n	da10e <__ascii_mbtowc+0x16>

000da11c <_Balloc>:
   da11c:	b570      	push	{r4, r5, r6, lr}
   da11e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da120:	4604      	mov	r4, r0
   da122:	460d      	mov	r5, r1
   da124:	b93e      	cbnz	r6, da136 <_Balloc+0x1a>
   da126:	2010      	movs	r0, #16
   da128:	f7fc fca8 	bl	d6a7c <malloc>
   da12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da130:	6260      	str	r0, [r4, #36]	; 0x24
   da132:	6006      	str	r6, [r0, #0]
   da134:	60c6      	str	r6, [r0, #12]
   da136:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da138:	68f3      	ldr	r3, [r6, #12]
   da13a:	b183      	cbz	r3, da15e <_Balloc+0x42>
   da13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da13e:	68db      	ldr	r3, [r3, #12]
   da140:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da144:	b9b8      	cbnz	r0, da176 <_Balloc+0x5a>
   da146:	2101      	movs	r1, #1
   da148:	fa01 f605 	lsl.w	r6, r1, r5
   da14c:	1d72      	adds	r2, r6, #5
   da14e:	0092      	lsls	r2, r2, #2
   da150:	4620      	mov	r0, r4
   da152:	f000 fc22 	bl	da99a <_calloc_r>
   da156:	b160      	cbz	r0, da172 <_Balloc+0x56>
   da158:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da15c:	e00e      	b.n	da17c <_Balloc+0x60>
   da15e:	2221      	movs	r2, #33	; 0x21
   da160:	2104      	movs	r1, #4
   da162:	4620      	mov	r0, r4
   da164:	f000 fc19 	bl	da99a <_calloc_r>
   da168:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da16a:	60f0      	str	r0, [r6, #12]
   da16c:	68db      	ldr	r3, [r3, #12]
   da16e:	2b00      	cmp	r3, #0
   da170:	d1e4      	bne.n	da13c <_Balloc+0x20>
   da172:	2000      	movs	r0, #0
   da174:	bd70      	pop	{r4, r5, r6, pc}
   da176:	6802      	ldr	r2, [r0, #0]
   da178:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da17c:	2300      	movs	r3, #0
   da17e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da182:	e7f7      	b.n	da174 <_Balloc+0x58>

000da184 <_Bfree>:
   da184:	b570      	push	{r4, r5, r6, lr}
   da186:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da188:	4605      	mov	r5, r0
   da18a:	460c      	mov	r4, r1
   da18c:	b93e      	cbnz	r6, da19e <_Bfree+0x1a>
   da18e:	2010      	movs	r0, #16
   da190:	f7fc fc74 	bl	d6a7c <malloc>
   da194:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da198:	6268      	str	r0, [r5, #36]	; 0x24
   da19a:	6006      	str	r6, [r0, #0]
   da19c:	60c6      	str	r6, [r0, #12]
   da19e:	b13c      	cbz	r4, da1b0 <_Bfree+0x2c>
   da1a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da1a2:	6862      	ldr	r2, [r4, #4]
   da1a4:	68db      	ldr	r3, [r3, #12]
   da1a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da1aa:	6021      	str	r1, [r4, #0]
   da1ac:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da1b0:	bd70      	pop	{r4, r5, r6, pc}

000da1b2 <__multadd>:
   da1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da1b6:	690e      	ldr	r6, [r1, #16]
   da1b8:	4607      	mov	r7, r0
   da1ba:	4698      	mov	r8, r3
   da1bc:	460c      	mov	r4, r1
   da1be:	f101 0014 	add.w	r0, r1, #20
   da1c2:	2300      	movs	r3, #0
   da1c4:	6805      	ldr	r5, [r0, #0]
   da1c6:	b2a9      	uxth	r1, r5
   da1c8:	fb02 8101 	mla	r1, r2, r1, r8
   da1cc:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da1d0:	0c2d      	lsrs	r5, r5, #16
   da1d2:	fb02 c505 	mla	r5, r2, r5, ip
   da1d6:	b289      	uxth	r1, r1
   da1d8:	3301      	adds	r3, #1
   da1da:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da1de:	429e      	cmp	r6, r3
   da1e0:	f840 1b04 	str.w	r1, [r0], #4
   da1e4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da1e8:	dcec      	bgt.n	da1c4 <__multadd+0x12>
   da1ea:	f1b8 0f00 	cmp.w	r8, #0
   da1ee:	d01b      	beq.n	da228 <__multadd+0x76>
   da1f0:	68a3      	ldr	r3, [r4, #8]
   da1f2:	42b3      	cmp	r3, r6
   da1f4:	dc12      	bgt.n	da21c <__multadd+0x6a>
   da1f6:	6861      	ldr	r1, [r4, #4]
   da1f8:	4638      	mov	r0, r7
   da1fa:	3101      	adds	r1, #1
   da1fc:	f7ff ff8e 	bl	da11c <_Balloc>
   da200:	6922      	ldr	r2, [r4, #16]
   da202:	3202      	adds	r2, #2
   da204:	f104 010c 	add.w	r1, r4, #12
   da208:	4605      	mov	r5, r0
   da20a:	0092      	lsls	r2, r2, #2
   da20c:	300c      	adds	r0, #12
   da20e:	f7fe fcad 	bl	d8b6c <memcpy>
   da212:	4621      	mov	r1, r4
   da214:	4638      	mov	r0, r7
   da216:	f7ff ffb5 	bl	da184 <_Bfree>
   da21a:	462c      	mov	r4, r5
   da21c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da220:	3601      	adds	r6, #1
   da222:	f8c3 8014 	str.w	r8, [r3, #20]
   da226:	6126      	str	r6, [r4, #16]
   da228:	4620      	mov	r0, r4
   da22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da22e <__s2b>:
   da22e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da232:	460c      	mov	r4, r1
   da234:	4615      	mov	r5, r2
   da236:	461f      	mov	r7, r3
   da238:	2209      	movs	r2, #9
   da23a:	3308      	adds	r3, #8
   da23c:	4606      	mov	r6, r0
   da23e:	fb93 f3f2 	sdiv	r3, r3, r2
   da242:	2100      	movs	r1, #0
   da244:	2201      	movs	r2, #1
   da246:	429a      	cmp	r2, r3
   da248:	db20      	blt.n	da28c <__s2b+0x5e>
   da24a:	4630      	mov	r0, r6
   da24c:	f7ff ff66 	bl	da11c <_Balloc>
   da250:	9b08      	ldr	r3, [sp, #32]
   da252:	6143      	str	r3, [r0, #20]
   da254:	2d09      	cmp	r5, #9
   da256:	f04f 0301 	mov.w	r3, #1
   da25a:	6103      	str	r3, [r0, #16]
   da25c:	dd19      	ble.n	da292 <__s2b+0x64>
   da25e:	f104 0909 	add.w	r9, r4, #9
   da262:	46c8      	mov	r8, r9
   da264:	442c      	add	r4, r5
   da266:	f818 3b01 	ldrb.w	r3, [r8], #1
   da26a:	4601      	mov	r1, r0
   da26c:	3b30      	subs	r3, #48	; 0x30
   da26e:	220a      	movs	r2, #10
   da270:	4630      	mov	r0, r6
   da272:	f7ff ff9e 	bl	da1b2 <__multadd>
   da276:	45a0      	cmp	r8, r4
   da278:	d1f5      	bne.n	da266 <__s2b+0x38>
   da27a:	f1a5 0408 	sub.w	r4, r5, #8
   da27e:	444c      	add	r4, r9
   da280:	1b2d      	subs	r5, r5, r4
   da282:	1963      	adds	r3, r4, r5
   da284:	42bb      	cmp	r3, r7
   da286:	db07      	blt.n	da298 <__s2b+0x6a>
   da288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da28c:	0052      	lsls	r2, r2, #1
   da28e:	3101      	adds	r1, #1
   da290:	e7d9      	b.n	da246 <__s2b+0x18>
   da292:	340a      	adds	r4, #10
   da294:	2509      	movs	r5, #9
   da296:	e7f3      	b.n	da280 <__s2b+0x52>
   da298:	f814 3b01 	ldrb.w	r3, [r4], #1
   da29c:	4601      	mov	r1, r0
   da29e:	3b30      	subs	r3, #48	; 0x30
   da2a0:	220a      	movs	r2, #10
   da2a2:	4630      	mov	r0, r6
   da2a4:	f7ff ff85 	bl	da1b2 <__multadd>
   da2a8:	e7eb      	b.n	da282 <__s2b+0x54>

000da2aa <__hi0bits>:
   da2aa:	0c03      	lsrs	r3, r0, #16
   da2ac:	041b      	lsls	r3, r3, #16
   da2ae:	b9d3      	cbnz	r3, da2e6 <__hi0bits+0x3c>
   da2b0:	0400      	lsls	r0, r0, #16
   da2b2:	2310      	movs	r3, #16
   da2b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da2b8:	bf04      	itt	eq
   da2ba:	0200      	lsleq	r0, r0, #8
   da2bc:	3308      	addeq	r3, #8
   da2be:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da2c2:	bf04      	itt	eq
   da2c4:	0100      	lsleq	r0, r0, #4
   da2c6:	3304      	addeq	r3, #4
   da2c8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da2cc:	bf04      	itt	eq
   da2ce:	0080      	lsleq	r0, r0, #2
   da2d0:	3302      	addeq	r3, #2
   da2d2:	2800      	cmp	r0, #0
   da2d4:	db05      	blt.n	da2e2 <__hi0bits+0x38>
   da2d6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da2da:	f103 0301 	add.w	r3, r3, #1
   da2de:	bf08      	it	eq
   da2e0:	2320      	moveq	r3, #32
   da2e2:	4618      	mov	r0, r3
   da2e4:	4770      	bx	lr
   da2e6:	2300      	movs	r3, #0
   da2e8:	e7e4      	b.n	da2b4 <__hi0bits+0xa>

000da2ea <__lo0bits>:
   da2ea:	6803      	ldr	r3, [r0, #0]
   da2ec:	f013 0207 	ands.w	r2, r3, #7
   da2f0:	4601      	mov	r1, r0
   da2f2:	d00b      	beq.n	da30c <__lo0bits+0x22>
   da2f4:	07da      	lsls	r2, r3, #31
   da2f6:	d424      	bmi.n	da342 <__lo0bits+0x58>
   da2f8:	0798      	lsls	r0, r3, #30
   da2fa:	bf49      	itett	mi
   da2fc:	085b      	lsrmi	r3, r3, #1
   da2fe:	089b      	lsrpl	r3, r3, #2
   da300:	2001      	movmi	r0, #1
   da302:	600b      	strmi	r3, [r1, #0]
   da304:	bf5c      	itt	pl
   da306:	600b      	strpl	r3, [r1, #0]
   da308:	2002      	movpl	r0, #2
   da30a:	4770      	bx	lr
   da30c:	b298      	uxth	r0, r3
   da30e:	b9b0      	cbnz	r0, da33e <__lo0bits+0x54>
   da310:	0c1b      	lsrs	r3, r3, #16
   da312:	2010      	movs	r0, #16
   da314:	f013 0fff 	tst.w	r3, #255	; 0xff
   da318:	bf04      	itt	eq
   da31a:	0a1b      	lsreq	r3, r3, #8
   da31c:	3008      	addeq	r0, #8
   da31e:	071a      	lsls	r2, r3, #28
   da320:	bf04      	itt	eq
   da322:	091b      	lsreq	r3, r3, #4
   da324:	3004      	addeq	r0, #4
   da326:	079a      	lsls	r2, r3, #30
   da328:	bf04      	itt	eq
   da32a:	089b      	lsreq	r3, r3, #2
   da32c:	3002      	addeq	r0, #2
   da32e:	07da      	lsls	r2, r3, #31
   da330:	d403      	bmi.n	da33a <__lo0bits+0x50>
   da332:	085b      	lsrs	r3, r3, #1
   da334:	f100 0001 	add.w	r0, r0, #1
   da338:	d005      	beq.n	da346 <__lo0bits+0x5c>
   da33a:	600b      	str	r3, [r1, #0]
   da33c:	4770      	bx	lr
   da33e:	4610      	mov	r0, r2
   da340:	e7e8      	b.n	da314 <__lo0bits+0x2a>
   da342:	2000      	movs	r0, #0
   da344:	4770      	bx	lr
   da346:	2020      	movs	r0, #32
   da348:	4770      	bx	lr

000da34a <__i2b>:
   da34a:	b510      	push	{r4, lr}
   da34c:	460c      	mov	r4, r1
   da34e:	2101      	movs	r1, #1
   da350:	f7ff fee4 	bl	da11c <_Balloc>
   da354:	2201      	movs	r2, #1
   da356:	6144      	str	r4, [r0, #20]
   da358:	6102      	str	r2, [r0, #16]
   da35a:	bd10      	pop	{r4, pc}

000da35c <__multiply>:
   da35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da360:	4615      	mov	r5, r2
   da362:	690a      	ldr	r2, [r1, #16]
   da364:	692b      	ldr	r3, [r5, #16]
   da366:	429a      	cmp	r2, r3
   da368:	bfb8      	it	lt
   da36a:	460b      	movlt	r3, r1
   da36c:	460c      	mov	r4, r1
   da36e:	bfbc      	itt	lt
   da370:	462c      	movlt	r4, r5
   da372:	461d      	movlt	r5, r3
   da374:	6927      	ldr	r7, [r4, #16]
   da376:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da37a:	68a3      	ldr	r3, [r4, #8]
   da37c:	6861      	ldr	r1, [r4, #4]
   da37e:	eb07 0609 	add.w	r6, r7, r9
   da382:	42b3      	cmp	r3, r6
   da384:	bfb8      	it	lt
   da386:	3101      	addlt	r1, #1
   da388:	b085      	sub	sp, #20
   da38a:	f7ff fec7 	bl	da11c <_Balloc>
   da38e:	f100 0114 	add.w	r1, r0, #20
   da392:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da396:	460b      	mov	r3, r1
   da398:	2200      	movs	r2, #0
   da39a:	4543      	cmp	r3, r8
   da39c:	d31d      	bcc.n	da3da <__multiply+0x7e>
   da39e:	f104 0314 	add.w	r3, r4, #20
   da3a2:	f105 0214 	add.w	r2, r5, #20
   da3a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da3aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da3ae:	9302      	str	r3, [sp, #8]
   da3b0:	1b3b      	subs	r3, r7, r4
   da3b2:	3b15      	subs	r3, #21
   da3b4:	f023 0303 	bic.w	r3, r3, #3
   da3b8:	3304      	adds	r3, #4
   da3ba:	f104 0515 	add.w	r5, r4, #21
   da3be:	42af      	cmp	r7, r5
   da3c0:	bf38      	it	cc
   da3c2:	2304      	movcc	r3, #4
   da3c4:	9301      	str	r3, [sp, #4]
   da3c6:	9b02      	ldr	r3, [sp, #8]
   da3c8:	9203      	str	r2, [sp, #12]
   da3ca:	4293      	cmp	r3, r2
   da3cc:	d808      	bhi.n	da3e0 <__multiply+0x84>
   da3ce:	2e00      	cmp	r6, #0
   da3d0:	dc5a      	bgt.n	da488 <__multiply+0x12c>
   da3d2:	6106      	str	r6, [r0, #16]
   da3d4:	b005      	add	sp, #20
   da3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3da:	f843 2b04 	str.w	r2, [r3], #4
   da3de:	e7dc      	b.n	da39a <__multiply+0x3e>
   da3e0:	f8b2 a000 	ldrh.w	sl, [r2]
   da3e4:	f1ba 0f00 	cmp.w	sl, #0
   da3e8:	d024      	beq.n	da434 <__multiply+0xd8>
   da3ea:	f104 0e14 	add.w	lr, r4, #20
   da3ee:	4689      	mov	r9, r1
   da3f0:	f04f 0c00 	mov.w	ip, #0
   da3f4:	f85e 5b04 	ldr.w	r5, [lr], #4
   da3f8:	f8d9 b000 	ldr.w	fp, [r9]
   da3fc:	b2ab      	uxth	r3, r5
   da3fe:	fa1f fb8b 	uxth.w	fp, fp
   da402:	fb0a b303 	mla	r3, sl, r3, fp
   da406:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da40a:	f8d9 5000 	ldr.w	r5, [r9]
   da40e:	4463      	add	r3, ip
   da410:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da414:	fb0a c50b 	mla	r5, sl, fp, ip
   da418:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da41c:	b29b      	uxth	r3, r3
   da41e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da422:	4577      	cmp	r7, lr
   da424:	f849 3b04 	str.w	r3, [r9], #4
   da428:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da42c:	d8e2      	bhi.n	da3f4 <__multiply+0x98>
   da42e:	9b01      	ldr	r3, [sp, #4]
   da430:	f841 c003 	str.w	ip, [r1, r3]
   da434:	9b03      	ldr	r3, [sp, #12]
   da436:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da43a:	3204      	adds	r2, #4
   da43c:	f1b9 0f00 	cmp.w	r9, #0
   da440:	d020      	beq.n	da484 <__multiply+0x128>
   da442:	680b      	ldr	r3, [r1, #0]
   da444:	f104 0c14 	add.w	ip, r4, #20
   da448:	468e      	mov	lr, r1
   da44a:	f04f 0a00 	mov.w	sl, #0
   da44e:	f8bc 5000 	ldrh.w	r5, [ip]
   da452:	f8be b002 	ldrh.w	fp, [lr, #2]
   da456:	fb09 b505 	mla	r5, r9, r5, fp
   da45a:	44aa      	add	sl, r5
   da45c:	b29b      	uxth	r3, r3
   da45e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da462:	f84e 3b04 	str.w	r3, [lr], #4
   da466:	f85c 3b04 	ldr.w	r3, [ip], #4
   da46a:	f8be 5000 	ldrh.w	r5, [lr]
   da46e:	0c1b      	lsrs	r3, r3, #16
   da470:	fb09 5303 	mla	r3, r9, r3, r5
   da474:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da478:	4567      	cmp	r7, ip
   da47a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da47e:	d8e6      	bhi.n	da44e <__multiply+0xf2>
   da480:	9d01      	ldr	r5, [sp, #4]
   da482:	514b      	str	r3, [r1, r5]
   da484:	3104      	adds	r1, #4
   da486:	e79e      	b.n	da3c6 <__multiply+0x6a>
   da488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da48c:	2b00      	cmp	r3, #0
   da48e:	d1a0      	bne.n	da3d2 <__multiply+0x76>
   da490:	3e01      	subs	r6, #1
   da492:	e79c      	b.n	da3ce <__multiply+0x72>

000da494 <__pow5mult>:
   da494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da498:	4615      	mov	r5, r2
   da49a:	f012 0203 	ands.w	r2, r2, #3
   da49e:	4606      	mov	r6, r0
   da4a0:	460f      	mov	r7, r1
   da4a2:	d007      	beq.n	da4b4 <__pow5mult+0x20>
   da4a4:	4c21      	ldr	r4, [pc, #132]	; (da52c <__pow5mult+0x98>)
   da4a6:	3a01      	subs	r2, #1
   da4a8:	2300      	movs	r3, #0
   da4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da4ae:	f7ff fe80 	bl	da1b2 <__multadd>
   da4b2:	4607      	mov	r7, r0
   da4b4:	10ad      	asrs	r5, r5, #2
   da4b6:	d035      	beq.n	da524 <__pow5mult+0x90>
   da4b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da4ba:	b93c      	cbnz	r4, da4cc <__pow5mult+0x38>
   da4bc:	2010      	movs	r0, #16
   da4be:	f7fc fadd 	bl	d6a7c <malloc>
   da4c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da4c6:	6270      	str	r0, [r6, #36]	; 0x24
   da4c8:	6004      	str	r4, [r0, #0]
   da4ca:	60c4      	str	r4, [r0, #12]
   da4cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da4d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da4d4:	b94c      	cbnz	r4, da4ea <__pow5mult+0x56>
   da4d6:	f240 2171 	movw	r1, #625	; 0x271
   da4da:	4630      	mov	r0, r6
   da4dc:	f7ff ff35 	bl	da34a <__i2b>
   da4e0:	2300      	movs	r3, #0
   da4e2:	f8c8 0008 	str.w	r0, [r8, #8]
   da4e6:	4604      	mov	r4, r0
   da4e8:	6003      	str	r3, [r0, #0]
   da4ea:	f04f 0900 	mov.w	r9, #0
   da4ee:	07eb      	lsls	r3, r5, #31
   da4f0:	d50a      	bpl.n	da508 <__pow5mult+0x74>
   da4f2:	4639      	mov	r1, r7
   da4f4:	4622      	mov	r2, r4
   da4f6:	4630      	mov	r0, r6
   da4f8:	f7ff ff30 	bl	da35c <__multiply>
   da4fc:	4639      	mov	r1, r7
   da4fe:	4680      	mov	r8, r0
   da500:	4630      	mov	r0, r6
   da502:	f7ff fe3f 	bl	da184 <_Bfree>
   da506:	4647      	mov	r7, r8
   da508:	106d      	asrs	r5, r5, #1
   da50a:	d00b      	beq.n	da524 <__pow5mult+0x90>
   da50c:	6820      	ldr	r0, [r4, #0]
   da50e:	b938      	cbnz	r0, da520 <__pow5mult+0x8c>
   da510:	4622      	mov	r2, r4
   da512:	4621      	mov	r1, r4
   da514:	4630      	mov	r0, r6
   da516:	f7ff ff21 	bl	da35c <__multiply>
   da51a:	6020      	str	r0, [r4, #0]
   da51c:	f8c0 9000 	str.w	r9, [r0]
   da520:	4604      	mov	r4, r0
   da522:	e7e4      	b.n	da4ee <__pow5mult+0x5a>
   da524:	4638      	mov	r0, r7
   da526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da52a:	bf00      	nop
   da52c:	000db4d0 	.word	0x000db4d0

000da530 <__lshift>:
   da530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da534:	460c      	mov	r4, r1
   da536:	6849      	ldr	r1, [r1, #4]
   da538:	6923      	ldr	r3, [r4, #16]
   da53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da53e:	68a3      	ldr	r3, [r4, #8]
   da540:	4607      	mov	r7, r0
   da542:	4691      	mov	r9, r2
   da544:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da548:	f108 0601 	add.w	r6, r8, #1
   da54c:	42b3      	cmp	r3, r6
   da54e:	db3f      	blt.n	da5d0 <__lshift+0xa0>
   da550:	4638      	mov	r0, r7
   da552:	f7ff fde3 	bl	da11c <_Balloc>
   da556:	2300      	movs	r3, #0
   da558:	4605      	mov	r5, r0
   da55a:	f100 0114 	add.w	r1, r0, #20
   da55e:	f100 0210 	add.w	r2, r0, #16
   da562:	4618      	mov	r0, r3
   da564:	4553      	cmp	r3, sl
   da566:	db36      	blt.n	da5d6 <__lshift+0xa6>
   da568:	6920      	ldr	r0, [r4, #16]
   da56a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da56e:	f104 0314 	add.w	r3, r4, #20
   da572:	f019 091f 	ands.w	r9, r9, #31
   da576:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da57a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da57e:	d02e      	beq.n	da5de <__lshift+0xae>
   da580:	f1c9 0e20 	rsb	lr, r9, #32
   da584:	468a      	mov	sl, r1
   da586:	2200      	movs	r2, #0
   da588:	6818      	ldr	r0, [r3, #0]
   da58a:	fa00 f009 	lsl.w	r0, r0, r9
   da58e:	4302      	orrs	r2, r0
   da590:	f84a 2b04 	str.w	r2, [sl], #4
   da594:	f853 2b04 	ldr.w	r2, [r3], #4
   da598:	459c      	cmp	ip, r3
   da59a:	fa22 f20e 	lsr.w	r2, r2, lr
   da59e:	d8f3      	bhi.n	da588 <__lshift+0x58>
   da5a0:	ebac 0304 	sub.w	r3, ip, r4
   da5a4:	3b15      	subs	r3, #21
   da5a6:	f023 0303 	bic.w	r3, r3, #3
   da5aa:	3304      	adds	r3, #4
   da5ac:	f104 0015 	add.w	r0, r4, #21
   da5b0:	4560      	cmp	r0, ip
   da5b2:	bf88      	it	hi
   da5b4:	2304      	movhi	r3, #4
   da5b6:	50ca      	str	r2, [r1, r3]
   da5b8:	b10a      	cbz	r2, da5be <__lshift+0x8e>
   da5ba:	f108 0602 	add.w	r6, r8, #2
   da5be:	3e01      	subs	r6, #1
   da5c0:	4638      	mov	r0, r7
   da5c2:	612e      	str	r6, [r5, #16]
   da5c4:	4621      	mov	r1, r4
   da5c6:	f7ff fddd 	bl	da184 <_Bfree>
   da5ca:	4628      	mov	r0, r5
   da5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da5d0:	3101      	adds	r1, #1
   da5d2:	005b      	lsls	r3, r3, #1
   da5d4:	e7ba      	b.n	da54c <__lshift+0x1c>
   da5d6:	f842 0f04 	str.w	r0, [r2, #4]!
   da5da:	3301      	adds	r3, #1
   da5dc:	e7c2      	b.n	da564 <__lshift+0x34>
   da5de:	3904      	subs	r1, #4
   da5e0:	f853 2b04 	ldr.w	r2, [r3], #4
   da5e4:	f841 2f04 	str.w	r2, [r1, #4]!
   da5e8:	459c      	cmp	ip, r3
   da5ea:	d8f9      	bhi.n	da5e0 <__lshift+0xb0>
   da5ec:	e7e7      	b.n	da5be <__lshift+0x8e>

000da5ee <__mcmp>:
   da5ee:	b530      	push	{r4, r5, lr}
   da5f0:	6902      	ldr	r2, [r0, #16]
   da5f2:	690c      	ldr	r4, [r1, #16]
   da5f4:	1b12      	subs	r2, r2, r4
   da5f6:	d10e      	bne.n	da616 <__mcmp+0x28>
   da5f8:	f100 0314 	add.w	r3, r0, #20
   da5fc:	3114      	adds	r1, #20
   da5fe:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da602:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da606:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da60a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da60e:	42a5      	cmp	r5, r4
   da610:	d003      	beq.n	da61a <__mcmp+0x2c>
   da612:	d305      	bcc.n	da620 <__mcmp+0x32>
   da614:	2201      	movs	r2, #1
   da616:	4610      	mov	r0, r2
   da618:	bd30      	pop	{r4, r5, pc}
   da61a:	4283      	cmp	r3, r0
   da61c:	d3f3      	bcc.n	da606 <__mcmp+0x18>
   da61e:	e7fa      	b.n	da616 <__mcmp+0x28>
   da620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da624:	e7f7      	b.n	da616 <__mcmp+0x28>

000da626 <__mdiff>:
   da626:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da62a:	460c      	mov	r4, r1
   da62c:	4606      	mov	r6, r0
   da62e:	4611      	mov	r1, r2
   da630:	4620      	mov	r0, r4
   da632:	4617      	mov	r7, r2
   da634:	f7ff ffdb 	bl	da5ee <__mcmp>
   da638:	1e05      	subs	r5, r0, #0
   da63a:	d108      	bne.n	da64e <__mdiff+0x28>
   da63c:	4629      	mov	r1, r5
   da63e:	4630      	mov	r0, r6
   da640:	f7ff fd6c 	bl	da11c <_Balloc>
   da644:	2301      	movs	r3, #1
   da646:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da64e:	bfa4      	itt	ge
   da650:	463b      	movge	r3, r7
   da652:	4627      	movge	r7, r4
   da654:	4630      	mov	r0, r6
   da656:	6879      	ldr	r1, [r7, #4]
   da658:	bfa6      	itte	ge
   da65a:	461c      	movge	r4, r3
   da65c:	2500      	movge	r5, #0
   da65e:	2501      	movlt	r5, #1
   da660:	f7ff fd5c 	bl	da11c <_Balloc>
   da664:	693e      	ldr	r6, [r7, #16]
   da666:	60c5      	str	r5, [r0, #12]
   da668:	6925      	ldr	r5, [r4, #16]
   da66a:	f107 0114 	add.w	r1, r7, #20
   da66e:	f104 0914 	add.w	r9, r4, #20
   da672:	f100 0e14 	add.w	lr, r0, #20
   da676:	f107 0210 	add.w	r2, r7, #16
   da67a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da67e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da682:	46f2      	mov	sl, lr
   da684:	2700      	movs	r7, #0
   da686:	f859 3b04 	ldr.w	r3, [r9], #4
   da68a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da68e:	fa1f f883 	uxth.w	r8, r3
   da692:	fa17 f78b 	uxtah	r7, r7, fp
   da696:	0c1b      	lsrs	r3, r3, #16
   da698:	eba7 0808 	sub.w	r8, r7, r8
   da69c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da6a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da6a4:	fa1f f888 	uxth.w	r8, r8
   da6a8:	141f      	asrs	r7, r3, #16
   da6aa:	454d      	cmp	r5, r9
   da6ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da6b0:	f84a 3b04 	str.w	r3, [sl], #4
   da6b4:	d8e7      	bhi.n	da686 <__mdiff+0x60>
   da6b6:	1b2b      	subs	r3, r5, r4
   da6b8:	3b15      	subs	r3, #21
   da6ba:	f023 0303 	bic.w	r3, r3, #3
   da6be:	3304      	adds	r3, #4
   da6c0:	3415      	adds	r4, #21
   da6c2:	42a5      	cmp	r5, r4
   da6c4:	bf38      	it	cc
   da6c6:	2304      	movcc	r3, #4
   da6c8:	4419      	add	r1, r3
   da6ca:	4473      	add	r3, lr
   da6cc:	469e      	mov	lr, r3
   da6ce:	460d      	mov	r5, r1
   da6d0:	4565      	cmp	r5, ip
   da6d2:	d30e      	bcc.n	da6f2 <__mdiff+0xcc>
   da6d4:	f10c 0203 	add.w	r2, ip, #3
   da6d8:	1a52      	subs	r2, r2, r1
   da6da:	f022 0203 	bic.w	r2, r2, #3
   da6de:	3903      	subs	r1, #3
   da6e0:	458c      	cmp	ip, r1
   da6e2:	bf38      	it	cc
   da6e4:	2200      	movcc	r2, #0
   da6e6:	441a      	add	r2, r3
   da6e8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da6ec:	b17b      	cbz	r3, da70e <__mdiff+0xe8>
   da6ee:	6106      	str	r6, [r0, #16]
   da6f0:	e7ab      	b.n	da64a <__mdiff+0x24>
   da6f2:	f855 8b04 	ldr.w	r8, [r5], #4
   da6f6:	fa17 f488 	uxtah	r4, r7, r8
   da6fa:	1422      	asrs	r2, r4, #16
   da6fc:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da700:	b2a4      	uxth	r4, r4
   da702:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da706:	f84e 4b04 	str.w	r4, [lr], #4
   da70a:	1417      	asrs	r7, r2, #16
   da70c:	e7e0      	b.n	da6d0 <__mdiff+0xaa>
   da70e:	3e01      	subs	r6, #1
   da710:	e7ea      	b.n	da6e8 <__mdiff+0xc2>
	...

000da714 <__ulp>:
   da714:	b082      	sub	sp, #8
   da716:	ed8d 0b00 	vstr	d0, [sp]
   da71a:	9b01      	ldr	r3, [sp, #4]
   da71c:	4912      	ldr	r1, [pc, #72]	; (da768 <__ulp+0x54>)
   da71e:	4019      	ands	r1, r3
   da720:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da724:	2900      	cmp	r1, #0
   da726:	dd05      	ble.n	da734 <__ulp+0x20>
   da728:	2200      	movs	r2, #0
   da72a:	460b      	mov	r3, r1
   da72c:	ec43 2b10 	vmov	d0, r2, r3
   da730:	b002      	add	sp, #8
   da732:	4770      	bx	lr
   da734:	4249      	negs	r1, r1
   da736:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da73a:	ea4f 5021 	mov.w	r0, r1, asr #20
   da73e:	f04f 0200 	mov.w	r2, #0
   da742:	f04f 0300 	mov.w	r3, #0
   da746:	da04      	bge.n	da752 <__ulp+0x3e>
   da748:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da74c:	fa41 f300 	asr.w	r3, r1, r0
   da750:	e7ec      	b.n	da72c <__ulp+0x18>
   da752:	f1a0 0114 	sub.w	r1, r0, #20
   da756:	291e      	cmp	r1, #30
   da758:	bfda      	itte	le
   da75a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da75e:	fa20 f101 	lsrle.w	r1, r0, r1
   da762:	2101      	movgt	r1, #1
   da764:	460a      	mov	r2, r1
   da766:	e7e1      	b.n	da72c <__ulp+0x18>
   da768:	7ff00000 	.word	0x7ff00000

000da76c <__b2d>:
   da76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da76e:	6905      	ldr	r5, [r0, #16]
   da770:	f100 0714 	add.w	r7, r0, #20
   da774:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da778:	1f2e      	subs	r6, r5, #4
   da77a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da77e:	4620      	mov	r0, r4
   da780:	f7ff fd93 	bl	da2aa <__hi0bits>
   da784:	f1c0 0320 	rsb	r3, r0, #32
   da788:	280a      	cmp	r0, #10
   da78a:	f8df c07c 	ldr.w	ip, [pc, #124]	; da808 <__b2d+0x9c>
   da78e:	600b      	str	r3, [r1, #0]
   da790:	dc14      	bgt.n	da7bc <__b2d+0x50>
   da792:	f1c0 0e0b 	rsb	lr, r0, #11
   da796:	fa24 f10e 	lsr.w	r1, r4, lr
   da79a:	42b7      	cmp	r7, r6
   da79c:	ea41 030c 	orr.w	r3, r1, ip
   da7a0:	bf34      	ite	cc
   da7a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da7a6:	2100      	movcs	r1, #0
   da7a8:	3015      	adds	r0, #21
   da7aa:	fa04 f000 	lsl.w	r0, r4, r0
   da7ae:	fa21 f10e 	lsr.w	r1, r1, lr
   da7b2:	ea40 0201 	orr.w	r2, r0, r1
   da7b6:	ec43 2b10 	vmov	d0, r2, r3
   da7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da7bc:	42b7      	cmp	r7, r6
   da7be:	bf3a      	itte	cc
   da7c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da7c4:	f1a5 0608 	subcc.w	r6, r5, #8
   da7c8:	2100      	movcs	r1, #0
   da7ca:	380b      	subs	r0, #11
   da7cc:	d017      	beq.n	da7fe <__b2d+0x92>
   da7ce:	f1c0 0c20 	rsb	ip, r0, #32
   da7d2:	fa04 f500 	lsl.w	r5, r4, r0
   da7d6:	42be      	cmp	r6, r7
   da7d8:	fa21 f40c 	lsr.w	r4, r1, ip
   da7dc:	ea45 0504 	orr.w	r5, r5, r4
   da7e0:	bf8c      	ite	hi
   da7e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da7e6:	2400      	movls	r4, #0
   da7e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da7ec:	fa01 f000 	lsl.w	r0, r1, r0
   da7f0:	fa24 f40c 	lsr.w	r4, r4, ip
   da7f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da7f8:	ea40 0204 	orr.w	r2, r0, r4
   da7fc:	e7db      	b.n	da7b6 <__b2d+0x4a>
   da7fe:	ea44 030c 	orr.w	r3, r4, ip
   da802:	460a      	mov	r2, r1
   da804:	e7d7      	b.n	da7b6 <__b2d+0x4a>
   da806:	bf00      	nop
   da808:	3ff00000 	.word	0x3ff00000

000da80c <__d2b>:
   da80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da810:	4689      	mov	r9, r1
   da812:	2101      	movs	r1, #1
   da814:	ec57 6b10 	vmov	r6, r7, d0
   da818:	4690      	mov	r8, r2
   da81a:	f7ff fc7f 	bl	da11c <_Balloc>
   da81e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da822:	4604      	mov	r4, r0
   da824:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da828:	bb35      	cbnz	r5, da878 <__d2b+0x6c>
   da82a:	2e00      	cmp	r6, #0
   da82c:	9301      	str	r3, [sp, #4]
   da82e:	d028      	beq.n	da882 <__d2b+0x76>
   da830:	4668      	mov	r0, sp
   da832:	9600      	str	r6, [sp, #0]
   da834:	f7ff fd59 	bl	da2ea <__lo0bits>
   da838:	9900      	ldr	r1, [sp, #0]
   da83a:	b300      	cbz	r0, da87e <__d2b+0x72>
   da83c:	9a01      	ldr	r2, [sp, #4]
   da83e:	f1c0 0320 	rsb	r3, r0, #32
   da842:	fa02 f303 	lsl.w	r3, r2, r3
   da846:	430b      	orrs	r3, r1
   da848:	40c2      	lsrs	r2, r0
   da84a:	6163      	str	r3, [r4, #20]
   da84c:	9201      	str	r2, [sp, #4]
   da84e:	9b01      	ldr	r3, [sp, #4]
   da850:	61a3      	str	r3, [r4, #24]
   da852:	2b00      	cmp	r3, #0
   da854:	bf14      	ite	ne
   da856:	2202      	movne	r2, #2
   da858:	2201      	moveq	r2, #1
   da85a:	6122      	str	r2, [r4, #16]
   da85c:	b1d5      	cbz	r5, da894 <__d2b+0x88>
   da85e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   da862:	4405      	add	r5, r0
   da864:	f8c9 5000 	str.w	r5, [r9]
   da868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da86c:	f8c8 0000 	str.w	r0, [r8]
   da870:	4620      	mov	r0, r4
   da872:	b003      	add	sp, #12
   da874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da87c:	e7d5      	b.n	da82a <__d2b+0x1e>
   da87e:	6161      	str	r1, [r4, #20]
   da880:	e7e5      	b.n	da84e <__d2b+0x42>
   da882:	a801      	add	r0, sp, #4
   da884:	f7ff fd31 	bl	da2ea <__lo0bits>
   da888:	9b01      	ldr	r3, [sp, #4]
   da88a:	6163      	str	r3, [r4, #20]
   da88c:	2201      	movs	r2, #1
   da88e:	6122      	str	r2, [r4, #16]
   da890:	3020      	adds	r0, #32
   da892:	e7e3      	b.n	da85c <__d2b+0x50>
   da894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   da898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da89c:	f8c9 0000 	str.w	r0, [r9]
   da8a0:	6918      	ldr	r0, [r3, #16]
   da8a2:	f7ff fd02 	bl	da2aa <__hi0bits>
   da8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   da8aa:	e7df      	b.n	da86c <__d2b+0x60>

000da8ac <__ratio>:
   da8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8b0:	4688      	mov	r8, r1
   da8b2:	4669      	mov	r1, sp
   da8b4:	4681      	mov	r9, r0
   da8b6:	f7ff ff59 	bl	da76c <__b2d>
   da8ba:	a901      	add	r1, sp, #4
   da8bc:	4640      	mov	r0, r8
   da8be:	ec55 4b10 	vmov	r4, r5, d0
   da8c2:	f7ff ff53 	bl	da76c <__b2d>
   da8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da8ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da8ce:	eba3 0c02 	sub.w	ip, r3, r2
   da8d2:	e9dd 3200 	ldrd	r3, r2, [sp]
   da8d6:	1a9b      	subs	r3, r3, r2
   da8d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   da8dc:	ec51 0b10 	vmov	r0, r1, d0
   da8e0:	2b00      	cmp	r3, #0
   da8e2:	bfd6      	itet	le
   da8e4:	460a      	movle	r2, r1
   da8e6:	462a      	movgt	r2, r5
   da8e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   da8ec:	468b      	mov	fp, r1
   da8ee:	462f      	mov	r7, r5
   da8f0:	bfd4      	ite	le
   da8f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   da8f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   da8fa:	4620      	mov	r0, r4
   da8fc:	ee10 2a10 	vmov	r2, s0
   da900:	465b      	mov	r3, fp
   da902:	4639      	mov	r1, r7
   da904:	f7fd fee6 	bl	d86d4 <__aeabi_ddiv>
   da908:	ec41 0b10 	vmov	d0, r0, r1
   da90c:	b003      	add	sp, #12
   da90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da912 <__copybits>:
   da912:	3901      	subs	r1, #1
   da914:	b570      	push	{r4, r5, r6, lr}
   da916:	1149      	asrs	r1, r1, #5
   da918:	6914      	ldr	r4, [r2, #16]
   da91a:	3101      	adds	r1, #1
   da91c:	f102 0314 	add.w	r3, r2, #20
   da920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da928:	1f05      	subs	r5, r0, #4
   da92a:	42a3      	cmp	r3, r4
   da92c:	d30c      	bcc.n	da948 <__copybits+0x36>
   da92e:	1aa3      	subs	r3, r4, r2
   da930:	3b11      	subs	r3, #17
   da932:	f023 0303 	bic.w	r3, r3, #3
   da936:	3211      	adds	r2, #17
   da938:	42a2      	cmp	r2, r4
   da93a:	bf88      	it	hi
   da93c:	2300      	movhi	r3, #0
   da93e:	4418      	add	r0, r3
   da940:	2300      	movs	r3, #0
   da942:	4288      	cmp	r0, r1
   da944:	d305      	bcc.n	da952 <__copybits+0x40>
   da946:	bd70      	pop	{r4, r5, r6, pc}
   da948:	f853 6b04 	ldr.w	r6, [r3], #4
   da94c:	f845 6f04 	str.w	r6, [r5, #4]!
   da950:	e7eb      	b.n	da92a <__copybits+0x18>
   da952:	f840 3b04 	str.w	r3, [r0], #4
   da956:	e7f4      	b.n	da942 <__copybits+0x30>

000da958 <__any_on>:
   da958:	f100 0214 	add.w	r2, r0, #20
   da95c:	6900      	ldr	r0, [r0, #16]
   da95e:	114b      	asrs	r3, r1, #5
   da960:	4298      	cmp	r0, r3
   da962:	b510      	push	{r4, lr}
   da964:	db11      	blt.n	da98a <__any_on+0x32>
   da966:	dd0a      	ble.n	da97e <__any_on+0x26>
   da968:	f011 011f 	ands.w	r1, r1, #31
   da96c:	d007      	beq.n	da97e <__any_on+0x26>
   da96e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da972:	fa24 f001 	lsr.w	r0, r4, r1
   da976:	fa00 f101 	lsl.w	r1, r0, r1
   da97a:	428c      	cmp	r4, r1
   da97c:	d10b      	bne.n	da996 <__any_on+0x3e>
   da97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da982:	4293      	cmp	r3, r2
   da984:	d803      	bhi.n	da98e <__any_on+0x36>
   da986:	2000      	movs	r0, #0
   da988:	bd10      	pop	{r4, pc}
   da98a:	4603      	mov	r3, r0
   da98c:	e7f7      	b.n	da97e <__any_on+0x26>
   da98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da992:	2900      	cmp	r1, #0
   da994:	d0f5      	beq.n	da982 <__any_on+0x2a>
   da996:	2001      	movs	r0, #1
   da998:	e7f6      	b.n	da988 <__any_on+0x30>

000da99a <_calloc_r>:
   da99a:	b513      	push	{r0, r1, r4, lr}
   da99c:	434a      	muls	r2, r1
   da99e:	4611      	mov	r1, r2
   da9a0:	9201      	str	r2, [sp, #4]
   da9a2:	f7fc f89b 	bl	d6adc <_malloc_r>
   da9a6:	4604      	mov	r4, r0
   da9a8:	b118      	cbz	r0, da9b2 <_calloc_r+0x18>
   da9aa:	9a01      	ldr	r2, [sp, #4]
   da9ac:	2100      	movs	r1, #0
   da9ae:	f7fe f905 	bl	d8bbc <memset>
   da9b2:	4620      	mov	r0, r4
   da9b4:	b002      	add	sp, #8
   da9b6:	bd10      	pop	{r4, pc}

000da9b8 <nan>:
   da9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; da9c0 <nan+0x8>
   da9bc:	4770      	bx	lr
   da9be:	bf00      	nop
   da9c0:	00000000 	.word	0x00000000
   da9c4:	7ff80000 	.word	0x7ff80000

000da9c8 <__ascii_wctomb>:
   da9c8:	b149      	cbz	r1, da9de <__ascii_wctomb+0x16>
   da9ca:	2aff      	cmp	r2, #255	; 0xff
   da9cc:	bf85      	ittet	hi
   da9ce:	238a      	movhi	r3, #138	; 0x8a
   da9d0:	6003      	strhi	r3, [r0, #0]
   da9d2:	700a      	strbls	r2, [r1, #0]
   da9d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   da9d8:	bf98      	it	ls
   da9da:	2001      	movls	r0, #1
   da9dc:	4770      	bx	lr
   da9de:	4608      	mov	r0, r1
   da9e0:	4770      	bx	lr
	...

000da9e4 <__aeabi_d2lz>:
   da9e4:	b538      	push	{r3, r4, r5, lr}
   da9e6:	2200      	movs	r2, #0
   da9e8:	2300      	movs	r3, #0
   da9ea:	4604      	mov	r4, r0
   da9ec:	460d      	mov	r5, r1
   da9ee:	f7fd ffb9 	bl	d8964 <__aeabi_dcmplt>
   da9f2:	b928      	cbnz	r0, daa00 <__aeabi_d2lz+0x1c>
   da9f4:	4620      	mov	r0, r4
   da9f6:	4629      	mov	r1, r5
   da9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da9fc:	f7fe b84a 	b.w	d8a94 <__aeabi_d2ulz>
   daa00:	4620      	mov	r0, r4
   daa02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   daa06:	f7fe f845 	bl	d8a94 <__aeabi_d2ulz>
   daa0a:	4240      	negs	r0, r0
   daa0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daa10:	bd38      	pop	{r3, r4, r5, pc}
   daa12:	bf00      	nop

000daa14 <dynalib_user>:
   daa14:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   daa24:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   daa34:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   daa44:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   daa54:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   daa64:	2a00 4e00 206f 6144 6174 5500 6962 6f64     .*.No Data.Ubido
   daa74:	7374 4820 6f6f 006b 6552 7073 6e6f 6573     ts Hook.Response
   daa84:	5220 6365 6965 6576 0064 7453 7461 0065      Received.State.
   daa94:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   daaa4:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   daab4:	6573 4d20 646f 0065 6553 2074 6f74 3320     se Mode.Set to 3
   daac4:	6472 5020 7261 7974 5320 6d69 5300 7465     rd Party Sim.Set
   daad4:	7420 206f 6150 7472 6369 656c 5320 6d69      to Particle Sim
   daae4:	4b00 6565 2070 6c41 7669 2065 6573 2074     .Keep Alive set 
   daaf4:	6f74 2520 2069 6573 0063 654b 7065 4120     to %i sec.Keep A
   dab04:	696c 6576 4c00 616f 6964 676e 5320 7379     live.Loading Sys
   dab14:	6574 206d 6544 6166 6c75 7374 4c00 616f     tem Defaults.Loa
   dab24:	6964 676e 4120 656c 7472 4420 6665 7561     ding Alert Defau
   dab34:	746c 0073 227b 6554 706d 7265 7461 7275     lts.{"Temperatur
   dab44:	2265 253a 2e34 6631 202c 4822 6d75 6469     e":%4.1f, "Humid
   dab54:	7469 2279 253a 2e34 6631 222c 6142 7474     ity":%4.1f,"Batt
   dab64:	7265 2279 253a 7d69 7300 6f74 6172 6567     ery":%i}.storage
   dab74:	662d 6361 6c69 7469 2d79 6f68 6b6f 4600     -facility-hook.F
   dab84:	6f72 206d 7325 7420 206f 7325 5300 6174     rom %s to %s.Sta
   dab94:	6574 5420 6172 736e 7469 6f69 006e 6554     te Transition.Te
   daba4:	706d 4d5f 7861 3a20 2520 2e33 6631 5400     mp_Max : %3.1f.T
   dabb4:	6d65 5f70 694d 206e 203a 3325 312e 0066     emp_Min : %3.1f.
   dabc4:	7548 696d 6964 7974 4d5f 7861 203a 3325     Humidity_Max: %3
   dabd4:	312e 0066 7548 696d 6964 7974 4d5f 6e69     .1f.Humidity_Min
   dabe4:	3a20 2520 2e33 6631 5500 7070 7265 5420      : %3.1f.Upper T
   dabf4:	7268 7365 6f68 646c 5320 7465 4c00 776f     hreshold Set.Low
   dac04:	7265 5420 7268 7365 6f68 646c 5320 7465     er Threshold Set
   dac14:	2500 2e34 6631 432a 2500 2e34 6631 2525     .%4.1f*C.%4.1f%%
   dac24:	2500 2069 2525 7300 6170 6b72 642f 7665     .%i %%.spark/dev
   dac34:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
   dac44:	7245 6f72 2072 7453 7461 2065 202d 6552     Error State - Re
   dac54:	6573 0074 6552 656c 7361 0065 6574 706d     set.Release.temp
   dac64:	7265 7461 7275 0065 7568 696d 6964 7974     erature.humidity
   dac74:	7400 6d65 6570 6172 7574 6572 552d 7070     .temperature-Upp
   dac84:	7265 7400 6d65 6570 6172 7574 6572 6c2d     er.temperature-l
   dac94:	776f 7265 6800 6d75 6469 7469 2d79 7075     ower.humidity-up
   daca4:	6570 0072 7568 696d 6964 7974 6c2d 776f     per.humidity-low
   dacb4:	7265 4200 7461 6574 7972 4200 7461 6574     er.Battery.Batte
   dacc4:	7972 6f43 746e 7865 0074 654b 7065 4120     ryContext.Keep A
   dacd4:	696c 6576 5320 6365 4d00 6165 7573 6572     live Sec.Measure
   dace4:	4e2d 776f 5600 7265 6f62 6573 4d2d 646f     -Now.Verbose-Mod
   dacf4:	0065 6554 706d 552d 7070 7265 4c2d 6d69     e.Temp-Upper-Lim
   dad04:	7469 5400 6d65 2d70 6f4c 6577 2d72 694c     it.Temp-Lower-Li
   dad14:	696d 0074 7548 696d 6964 7974 4c2d 776f     mit.Humidity-Low
   dad24:	7265 4c2d 6d69 7469 4800 6d75 6469 7974     er-Limit.Humidty
   dad34:	752d 7070 7265 4c2d 6d69 7469 5400 6d69     -upper-Limit.Tim
   dad44:	0065 7245 6f72 2072 202d 4853 3354 2031     e.Error - SHT31 
   dad54:	6e49 7469 6169 696c 617a 6974 6e6f 5300     Initialization.S
   dad64:	6174 7472 7075 0000                         tartup..

000dad6c <_ZTV5Timer>:
	...
   dad74:	4221 000d 4275 000d 410d 000d               !B..uB...A..

000dad80 <_ZTV17PublishQueueAsync>:
	...
   dad88:	4119 000d 412d 000d 5721 000d 58ad 000d     .A..-A..!W...X..
   dad98:	586d 000d 584b 000d 59f3 000d 5893 000d     mX..KX...Y...X..

000dada8 <_ZTV8MB85RC64>:
	...
   dadb0:	4141 000d 4155 000d 54f1 000d 5587 000d     AA..UA...T...U..
   dadc0:	5609 000d aa28 000d aa30 000d aa34 000d     .V..(...0...4...
   dadd0:	aa3d 000d aa45 000d aa51 000d aa57 000d     =...E...Q...W...
   dade0:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dadf0:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dae20 <_ZL13releaseNumber>:
   dae20:	3231 302e 0030 0000                         12.00...

000dae28 <_ZL17FRAMversionNumber>:
   dae28:	0004 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dae38:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dae48:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dae58 <_ZTV6MB85RC>:
	...
   dae60:	5411 000d 5413 000d 54f1 000d 5587 000d     .T...T...T...U..
   dae70:	5609 000d 7550 6c62 7369 5168 6575 6575     .V..PublishQueue
   dae80:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   dae90:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   daea0:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   daeb0:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   daec0:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   daed0:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   daee0:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   daef0:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   daf00:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   daf10:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   daf20:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000daf30 <_ZTV21PublishQueueAsyncBase>:
	...
   daf40:	5721 000d 40a5 000d 40a5 000d 40a5 000d     !W...@...@...@..
   daf50:	40a5 000d 40a5 000d                         .@...@..

000daf58 <_ZTV25PublishQueueAsyncRetained>:
	...
   daf60:	5809 000d 581d 000d 5721 000d 58ad 000d     .X...X..!W...X..
   daf70:	586d 000d 584b 000d 59f3 000d 5893 000d     mX..KX...Y...X..
   daf80:	6564 6976 6563 6552 6461 6620 6961 656c     deviceRead faile
   daf90:	2064 7473 7461 253d 0064 6573 2074 6954     d stat=%d.set Ti
   dafa0:	656d 6620 6f72 206d 5452 2043 7325 6400     me from RTC %s.d
   dafb0:	7665 6369 5765 6972 6574 6620 6961 656c     eviceWrite faile
   dafc0:	2064 7473 7461 253d 0064 6573 2074 5452     d stat=%d.set RT
   dafd0:	2043 7266 6d6f 6320 6f6c 6475 2520 0073     C from cloud %s.
   dafe0:	6c63 756f 2064 6974 656d 6e20 746f 7620     cloud time not v
   daff0:	6c61 6469 6400 7665 6369 5765 6972 6574     alid.deviceWrite
   db000:	4545 5250 4d4f 6620 6961 656c 2064 7473     EEPROM failed st
   db010:	7461 253d 0064 7061 2e70 7472 0063 0000     at=%d.app.rtc...

000db020 <_ZTV12MCP79410SRAM>:
	...
   db028:	5ca5 000d 5cbb 000d 5c95 000d 5c99 000d     .\...\...\...\..
   db038:	5ce5 000d 5fcd 000d 61ed 000d               .\..._...a..

000db044 <_ZTV12MCP79410Time>:
	...
   db04c:	5ca9 000d 5cad 000d                         .\...\..

000db054 <_ZTV14MCP79410EEPROM>:
	...
   db05c:	5ca7 000d 5cc9 000d 5c9d 000d 5ca1 000d     .\...\...\...\..
   db06c:	5ce5 000d 6007 000d 642d 000d               .\...`..-d..

000db078 <_ZTV8MCP79410>:
	...
   db080:	5cab 000d 5cd7 000d                         .\...\..

000db088 <_ZTVN5spark13CellularClassE>:
	...
   db090:	6c47 000d 6c3d 000d 6c33 000d 6be9 000d     Gl..=l..3l...k..
   db0a0:	6c27 000d 6c1b 000d 6c0f 000d 6c07 000d     'l...l...l...l..
   db0b0:	6bfd 000d 6bf3 000d 757d 000d               .k...k..}u..

000db0bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db0c4:	6c81 000d 6c87 000d 6cc5 000d 6c95 000d     .l...l...l...l..
   db0d4:	6c83 000d                                   .l..

000db0d8 <_ZTVN5spark13EthernetClassE>:
	...
   db0e0:	728b 000d 7281 000d 7277 000d 726d 000d     .r...r..wr..mr..
   db0f0:	7261 000d 7255 000d 7249 000d 7241 000d     ar..Ur..Ir..Ar..
   db100:	7237 000d 722d 000d 757d 000d               7r..-r..}u..

000db10c <_ZTV7TwoWire>:
	...
   db114:	72a9 000d 72f3 000d 72cb 000d 72ab 000d     .r...r...r...r..
   db124:	72d3 000d 72db 000d 72e3 000d 72eb 000d     .r...r...r...r..

000db134 <_ZTV9IPAddress>:
	...
   db13c:	7431 000d 7421 000d 7423 000d 7061 0070     1t..!t..#t..app.

000db14c <_ZTVN5spark12NetworkClassE>:
	...
   db154:	7515 000d 751f 000d 7529 000d 7533 000d     .u...u..)u..3u..
   db164:	753d 000d 7549 000d 7555 000d 7561 000d     =u..Iu..Uu..au..
   db174:	7569 000d 7573 000d 757d 000d 005a 2b25     iu..su..}u..Z.%+
   db184:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   db194:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   db1a4:	6974 656d 0000 0000                         time....

000db1ac <_ZTV11USARTSerial>:
	...
   db1b4:	7c1d 000d 7c89 000d 7c61 000d 7665 000d     .|...|..a|..ev..
   db1c4:	7c31 000d 7c4d 000d 7c3f 000d 7c5b 000d     1|..M|..?|..[|..
   db1d4:	7c1f 000d 7c23 000d                         .|..#|..

000db1dc <_ZTV9USBSerial>:
	...
   db1e4:	7d1d 000d 7d85 000d 7d5b 000d 7665 000d     .}...}..[}..ev..
   db1f4:	7d4d 000d 7d1f 000d 7d2f 000d 7d7f 000d     M}...}../}...}..
   db204:	7d3f 000d 7d19 000d                         ?}...}..

000db20c <_ZSt7nothrow>:
   db20c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   db21c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000db22d <day_name.6145>:
   db22d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db23d:	6972 6153                                    riSat

000db242 <mon_name.6146>:
   db242:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db252:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db262:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000db274 <fpi.7566>:
   db274:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db284:	0000 0000                                   ....

000db288 <fpinan.7602>:
   db288:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000db2a0 <tinytens>:
   db2a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db2b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db2c0:	6f43 64ac 0628 1168                         Co.d(.h.

000db2c8 <_ctype_>:
   db2c8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db2d8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db2e8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db2f8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db308:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db318:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db328:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db338:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db348:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   db3c8:	2e00 0000                                   ....

000db3cc <_C_numeric_locale>:
   db3cc:	b3c9 000d b22c 000d e2a8 2003 4f50 4953     ....,...... POSI
   db3dc:	0058 0000                                   X...

000db3e0 <__mprec_bigtens>:
   db3e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db3f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db400:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db408 <__mprec_tens>:
   db408:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db418:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db428:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db438:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db448:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db458:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db468:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db478:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db488:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db498:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db4a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db4b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db4c8:	9db4 79d9 7843 44ea                         ...yCx.D

000db4d0 <p05.7490>:
   db4d0:	0005 0000 0019 0000 007d 0000               ........}...

000db4dc <link_const_variable_data_end>:
   db4dc:	000d50e5 	.word	0x000d50e5
   db4e0:	000d5c85 	.word	0x000d5c85
   db4e4:	000d645d 	.word	0x000d645d
   db4e8:	000d6bc1 	.word	0x000d6bc1
   db4ec:	000d6c51 	.word	0x000d6c51
   db4f0:	000d7295 	.word	0x000d7295
   db4f4:	000d7505 	.word	0x000d7505
   db4f8:	000d7651 	.word	0x000d7651
   db4fc:	000d7705 	.word	0x000d7705
   db500:	000d78c9 	.word	0x000d78c9
   db504:	000d7c09 	.word	0x000d7c09

000db508 <link_constructors_end>:
	...
