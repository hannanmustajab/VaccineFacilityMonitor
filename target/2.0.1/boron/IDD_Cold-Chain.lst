
/Users/chipmc/Documents/Maker/Particle/Projects/IDD_Cold-Chain/target/2.0.1/boron/IDD_Cold-Chain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007700  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000db720  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002a8  2003e180  000dbf24  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003c8  2003e428  2003e428  0002e428  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dc1cc  000dc1cc  0002c1cc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc1f8  000dc1f8  0002c1f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001923a4  00000000  00000000  0002c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a11b  00000000  00000000  001be5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032142  00000000  00000000  001d86bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f38  00000000  00000000  0020a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008900  00000000  00000000  0020d735  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003cdaf  00000000  00000000  00216035  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00042679  00000000  00000000  00252de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011240b  00000000  00000000  0029545d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008970  00000000  00000000  003a7868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe17 	bl	d8c64 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe39 	bl	d8cb4 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e180 	.word	0x2003e180
   d404c:	000dbf24 	.word	0x000dbf24
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e428 	.word	0x2003e428
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 ffb9 	bl	d7fd8 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db6ec 	.word	0x000db6ec
   d4080:	000db718 	.word	0x000db718

000d4084 <module_user_setup>:
   d4084:	f000 bf16 	b.w	d4eb4 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 fe09 	bl	d4ca0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f003 bf63 	b.w	d7f5c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bd6d 	b.w	d6b74 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bd6b 	b.w	d6b74 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bd71 	b.w	d6b84 <free>
	...

000d40a4 <__cxa_pure_virtual>:
   d40a4:	b508      	push	{r3, lr}
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fc3a 	bl	d6924 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6675 	.word	0x000d6675

000d40b8 <__cxa_guard_acquire>:
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
  alertsStatusWriteNeeded = true;
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5c9 	.word	0x2003e5c9

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fc13 	bl	d791e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000dab5b 	.word	0x000dab5b
   d4108:	2003e568 	.word	0x2003e568

000d410c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d410c:	6943      	ldr	r3, [r0, #20]
   d410e:	b113      	cbz	r3, d4116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4110:	6983      	ldr	r3, [r0, #24]
   d4112:	300c      	adds	r0, #12
   d4114:	4718      	bx	r3
            callback();
        }
    }
   d4116:	4770      	bx	lr

000d4118 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f001 fbee 	bl	d5900 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000daf58 	.word	0x000daf58

000d412c <_ZN17PublishQueueAsyncD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN17PublishQueueAsyncD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2138      	movs	r1, #56	; 0x38
   d4138:	f004 f859 	bl	d81ee <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4140:	b510      	push	{r4, lr}
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_ZN8MB85RC64D1Ev+0x10>)
   d4144:	6003      	str	r3, [r0, #0]
   d4146:	4604      	mov	r4, r0
   d4148:	f001 f9de 	bl	d5508 <_ZN6MB85RCD1Ev>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}
   d4150:	000daf80 	.word	0x000daf80

000d4154 <_ZN8MB85RC64D0Ev>:
   d4154:	b510      	push	{r4, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	f7ff fff2 	bl	d4140 <_ZN8MB85RC64D1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	2110      	movs	r1, #16
   d4160:	f004 f845 	bl	d81ee <_ZdlPvj>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}

000d4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d416a:	2100      	movs	r1, #0
   d416c:	4604      	mov	r4, r0
   d416e:	4608      	mov	r0, r1
   d4170:	f002 fa08 	bl	d6584 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4176:	4620      	mov	r0, r4
   d4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d417c:	f002 fa1a 	bl	d65b4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4182:	b10c      	cbz	r4, d4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4184:	2301      	movs	r3, #1
   d4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4188:	2100      	movs	r1, #0
   d418a:	2001      	movs	r0, #1
   d418c:	f002 f9fa 	bl	d6584 <os_thread_scheduling>
            }
        }
        if (t) {
   d4190:	b12c      	cbz	r4, d419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	4620      	mov	r0, r4
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	4798      	blx	r3
            t->running = false;
   d419a:	2300      	movs	r3, #0
   d419c:	7123      	strb	r3, [r4, #4]
        }
    }
   d419e:	b002      	add	sp, #8
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a2:	b510      	push	{r4, lr}
   d41a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a6:	6800      	ldr	r0, [r0, #0]
   d41a8:	b108      	cbz	r0, d41ae <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41aa:	f002 fceb 	bl	d6b84 <free>
class SystemClass {
   d41ae:	4620      	mov	r0, r4
   d41b0:	bd10      	pop	{r4, pc}

000d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41b2:	2300      	movs	r3, #0
   d41b4:	2204      	movs	r2, #4
   d41b6:	f002 bc2d 	b.w	d6a14 <spark_variable>
	...

000d41bc <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d41bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d41be:	4b10      	ldr	r3, [pc, #64]	; (d4200 <_Z16keepAliveMessagev+0x44>)
   d41c0:	4a10      	ldr	r2, [pc, #64]	; (d4204 <_Z16keepAliveMessagev+0x48>)
   d41c2:	781b      	ldrb	r3, [r3, #0]
   d41c4:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41c6:	4910      	ldr	r1, [pc, #64]	; (d4208 <_Z16keepAliveMessagev+0x4c>)
   d41c8:	4313      	orrs	r3, r2
   d41ca:	f88d 3000 	strb.w	r3, [sp]
   d41ce:	2200      	movs	r2, #0
   d41d0:	233c      	movs	r3, #60	; 0x3c
   d41d2:	a802      	add	r0, sp, #8
   d41d4:	f002 ff30 	bl	d7038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41d8:	9c03      	ldr	r4, [sp, #12]
   d41da:	b17c      	cbz	r4, d41fc <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d41dc:	6863      	ldr	r3, [r4, #4]
   d41de:	3b01      	subs	r3, #1
   d41e0:	6063      	str	r3, [r4, #4]
   d41e2:	b95b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	4620      	mov	r0, r4
   d41e8:	689b      	ldr	r3, [r3, #8]
   d41ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41ec:	68a3      	ldr	r3, [r4, #8]
   d41ee:	3b01      	subs	r3, #1
   d41f0:	60a3      	str	r3, [r4, #8]
   d41f2:	b91b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d41f4:	6823      	ldr	r3, [r4, #0]
   d41f6:	4620      	mov	r0, r4
   d41f8:	68db      	ldr	r3, [r3, #12]
   d41fa:	4798      	blx	r3
}
   d41fc:	b004      	add	sp, #16
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	2003e438 	.word	0x2003e438
   d4204:	2003e439 	.word	0x2003e439
   d4208:	000dab5d 	.word	0x000dab5d

000d420c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d420c:	b510      	push	{r4, lr}
      if (_M_manager)
   d420e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4210:	4604      	mov	r4, r0
      if (_M_manager)
   d4212:	b113      	cbz	r3, d421a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4214:	2203      	movs	r2, #3
   d4216:	4601      	mov	r1, r0
   d4218:	4798      	blx	r3
    }
   d421a:	4620      	mov	r0, r4
   d421c:	bd10      	pop	{r4, pc}
	...

000d4220 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4222:	4b13      	ldr	r3, [pc, #76]	; (d4270 <_ZN5TimerD1Ev+0x50>)
   d4224:	6003      	str	r3, [r0, #0]
   d4226:	4604      	mov	r4, r0
        if (handle) {
   d4228:	6880      	ldr	r0, [r0, #8]
   d422a:	b1c8      	cbz	r0, d4260 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d422c:	2500      	movs	r5, #0
   d422e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4232:	e9cd 3500 	strd	r3, r5, [sp]
   d4236:	2102      	movs	r1, #2
   d4238:	462b      	mov	r3, r5
   d423a:	462a      	mov	r2, r5
   d423c:	f002 f9c2 	bl	d65c4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4240:	68a0      	ldr	r0, [r4, #8]
   d4242:	4629      	mov	r1, r5
   d4244:	f002 f9f6 	bl	d6634 <os_timer_set_id>
            while (running) {
   d4248:	7923      	ldrb	r3, [r4, #4]
   d424a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d424e:	b113      	cbz	r3, d4256 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4250:	f002 f990 	bl	d6574 <os_thread_yield>
            while (running) {
   d4254:	e7f8      	b.n	d4248 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4256:	68a0      	ldr	r0, [r4, #8]
   d4258:	4629      	mov	r1, r5
   d425a:	f002 f9a3 	bl	d65a4 <os_timer_destroy>
            handle = nullptr;
   d425e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4260:	f104 000c 	add.w	r0, r4, #12
   d4264:	f7ff ffd2 	bl	d420c <_ZNSt14_Function_baseD1Ev>
    }
   d4268:	4620      	mov	r0, r4
   d426a:	b003      	add	sp, #12
   d426c:	bd30      	pop	{r4, r5, pc}
   d426e:	bf00      	nop
   d4270:	000daf44 	.word	0x000daf44

000d4274 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4274:	b510      	push	{r4, lr}
   d4276:	4604      	mov	r4, r0
    }
   d4278:	f7ff ffd2 	bl	d4220 <_ZN5TimerD1Ev>
   d427c:	4620      	mov	r0, r4
   d427e:	211c      	movs	r1, #28
   d4280:	f003 ffb5 	bl	d81ee <_ZdlPvj>
   d4284:	4620      	mov	r0, r4
   d4286:	bd10      	pop	{r4, pc}

000d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4288:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d428a:	4801      	ldr	r0, [pc, #4]	; (d4290 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d428c:	f002 bdcf 	b.w	d6e2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4290:	000d6e03 	.word	0x000d6e03

000d4294 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4294:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4296:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4298:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d429a:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d429e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d42a2:	2201      	movs	r2, #1
   d42a4:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d42a6:	4341      	muls	r1, r0
   d42a8:	466a      	mov	r2, sp
   d42aa:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d42ac:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d42b0:	f002 fc00 	bl	d6ab4 <spark_set_connection_property>
    }
   d42b4:	b003      	add	sp, #12
   d42b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d42ba <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42ba:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42bc:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42be:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42c0:	2100      	movs	r1, #0
   d42c2:	b140      	cbz	r0, d42d6 <_ZN5Timer12changePeriodEjj+0x1c>
   d42c4:	e9cd 2100 	strd	r2, r1, [sp]
   d42c8:	460a      	mov	r2, r1
   d42ca:	2103      	movs	r1, #3
   d42cc:	f002 f97a 	bl	d65c4 <os_timer_change>
   d42d0:	fab0 f080 	clz	r0, r0
   d42d4:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42d6:	b003      	add	sp, #12
   d42d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42de:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42e4:	f88d 3000 	strb.w	r3, [sp]
   d42e8:	f88d 5004 	strb.w	r5, [sp, #4]
   d42ec:	68e4      	ldr	r4, [r4, #12]
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	47a0      	blx	r4
	}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}
	...

000d42f8 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d42f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42fa:	4d1a      	ldr	r5, [pc, #104]	; (d4364 <_Z14UbidotsHandlerPKcS0_+0x6c>)
  if (!data) {                                                                    // First check to see if there is any data
   d42fc:	460c      	mov	r4, r1
   d42fe:	b959      	cbnz	r1, d4318 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   d4300:	7a6b      	ldrb	r3, [r5, #9]
   d4302:	b31b      	cbz	r3, d434c <_Z14UbidotsHandlerPKcS0_+0x54>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   d4304:	4b18      	ldr	r3, [pc, #96]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4306:	f88d 1000 	strb.w	r1, [sp]
   d430a:	781b      	ldrb	r3, [r3, #0]
   d430c:	4a17      	ldr	r2, [pc, #92]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d430e:	4918      	ldr	r1, [pc, #96]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d4310:	4818      	ldr	r0, [pc, #96]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4312:	f7ff ffe3 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4316:	e019      	b.n	d434c <_Z14UbidotsHandlerPKcS0_+0x54>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4318:	4608      	mov	r0, r1
   d431a:	f004 fc7e 	bl	d8c1a <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d431e:	38c8      	subs	r0, #200	; 0xc8
   d4320:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   d4322:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   d4324:	d814      	bhi.n	d4350 <_Z14UbidotsHandlerPKcS0_+0x58>
    if (sysStatus.verboseMode) {
   d4326:	b14b      	cbz	r3, d433c <_Z14UbidotsHandlerPKcS0_+0x44>
        val_(0) {
   d4328:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   d432a:	f88d 3000 	strb.w	r3, [sp]
   d432e:	4b0e      	ldr	r3, [pc, #56]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4330:	4a11      	ldr	r2, [pc, #68]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4332:	781b      	ldrb	r3, [r3, #0]
   d4334:	4911      	ldr	r1, [pc, #68]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4336:	480f      	ldr	r0, [pc, #60]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4338:	f7ff ffd0 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    alertsStatus.upperTemperatureThresholdCrossed = false;
   d433c:	4a10      	ldr	r2, [pc, #64]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d433e:	2300      	movs	r3, #0
   d4340:	6013      	str	r3, [r2, #0]
    alertsStatusWriteNeeded = true;
   d4342:	4a10      	ldr	r2, [pc, #64]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4344:	2101      	movs	r1, #1
   d4346:	7011      	strb	r1, [r2, #0]
    dataInFlight = false;    
   d4348:	4a0f      	ldr	r2, [pc, #60]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d434a:	7013      	strb	r3, [r2, #0]
}
   d434c:	b003      	add	sp, #12
   d434e:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   d4350:	2b00      	cmp	r3, #0
   d4352:	d0fb      	beq.n	d434c <_Z14UbidotsHandlerPKcS0_+0x54>
   d4354:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4356:	f88d 3000 	strb.w	r3, [sp]
   d435a:	4b03      	ldr	r3, [pc, #12]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d435c:	4622      	mov	r2, r4
   d435e:	781b      	ldrb	r3, [r3, #0]
   d4360:	e7d5      	b.n	d430e <_Z14UbidotsHandlerPKcS0_+0x16>
   d4362:	bf00      	nop
   d4364:	2003e56c 	.word	0x2003e56c
   d4368:	2003e439 	.word	0x2003e439
   d436c:	000dab5f 	.word	0x000dab5f
   d4370:	000dab67 	.word	0x000dab67
   d4374:	2003e4ec 	.word	0x2003e4ec
   d4378:	000dab74 	.word	0x000dab74
   d437c:	000dab86 	.word	0x000dab86
   d4380:	2003e440 	.word	0x2003e440
   d4384:	2003e458 	.word	0x2003e458
   d4388:	2003e479 	.word	0x2003e479

000d438c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d438c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d438e:	4916      	ldr	r1, [pc, #88]	; (d43e8 <_Z14setVerboseMode6String+0x5c>)
   d4390:	4605      	mov	r5, r0
   d4392:	f003 fac4 	bl	d791e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4396:	4604      	mov	r4, r0
   d4398:	b188      	cbz	r0, d43be <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d439a:	4b14      	ldr	r3, [pc, #80]	; (d43ec <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d439c:	4a14      	ldr	r2, [pc, #80]	; (d43f0 <_Z14setVerboseMode6String+0x64>)
   d439e:	4915      	ldr	r1, [pc, #84]	; (d43f4 <_Z14setVerboseMode6String+0x68>)
   d43a0:	4815      	ldr	r0, [pc, #84]	; (d43f8 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d43a2:	2401      	movs	r4, #1
   d43a4:	725c      	strb	r4, [r3, #9]
   d43a6:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d43a8:	f88d 3000 	strb.w	r3, [sp]
   d43ac:	4b13      	ldr	r3, [pc, #76]	; (d43fc <_Z14setVerboseMode6String+0x70>)
   d43ae:	781b      	ldrb	r3, [r3, #0]
   d43b0:	f7ff ff94 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43b4:	4b12      	ldr	r3, [pc, #72]	; (d4400 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d43b6:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d43b8:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d43ba:	b003      	add	sp, #12
   d43bc:	bd30      	pop	{r4, r5, pc}
   d43be:	4911      	ldr	r1, [pc, #68]	; (d4404 <_Z14setVerboseMode6String+0x78>)
   d43c0:	4628      	mov	r0, r5
   d43c2:	f003 faac 	bl	d791e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d43c6:	2800      	cmp	r0, #0
   d43c8:	d0f7      	beq.n	d43ba <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d43ca:	4b08      	ldr	r3, [pc, #32]	; (d43ec <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43cc:	4a0e      	ldr	r2, [pc, #56]	; (d4408 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d43ce:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43d0:	4b0a      	ldr	r3, [pc, #40]	; (d43fc <_Z14setVerboseMode6String+0x70>)
   d43d2:	f88d 4000 	strb.w	r4, [sp]
   d43d6:	781b      	ldrb	r3, [r3, #0]
   d43d8:	4906      	ldr	r1, [pc, #24]	; (d43f4 <_Z14setVerboseMode6String+0x68>)
   d43da:	4807      	ldr	r0, [pc, #28]	; (d43f8 <_Z14setVerboseMode6String+0x6c>)
   d43dc:	f7ff ff7e 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43e0:	4b07      	ldr	r3, [pc, #28]	; (d4400 <_Z14setVerboseMode6String+0x74>)
   d43e2:	2001      	movs	r0, #1
   d43e4:	7018      	strb	r0, [r3, #0]
    return 1;
   d43e6:	e7e8      	b.n	d43ba <_Z14setVerboseMode6String+0x2e>
   d43e8:	000dab5b 	.word	0x000dab5b
   d43ec:	2003e56c 	.word	0x2003e56c
   d43f0:	000dab8c 	.word	0x000dab8c
   d43f4:	000dabaf 	.word	0x000dabaf
   d43f8:	2003e4ec 	.word	0x2003e4ec
   d43fc:	2003e439 	.word	0x2003e439
   d4400:	2003e588 	.word	0x2003e588
   d4404:	000dab9d 	.word	0x000dab9d
   d4408:	000dab9f 	.word	0x000dab9f

000d440c <_Z16setThirdPartySim6String>:
  updateThresholdValue();
  return 1;
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d440c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d440e:	491c      	ldr	r1, [pc, #112]	; (d4480 <_Z16setThirdPartySim6String+0x74>)
   d4410:	4605      	mov	r5, r0
   d4412:	f003 fa84 	bl	d791e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4416:	4604      	mov	r4, r0
   d4418:	b300      	cbz	r0, d445c <_Z16setThirdPartySim6String+0x50>
  {
    sysStatus.thirdPartySim = true;
   d441a:	4c1a      	ldr	r4, [pc, #104]	; (d4484 <_Z16setThirdPartySim6String+0x78>)
   d441c:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d441e:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4420:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4422:	f7ff ff37 	bl	d4294 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4426:	6863      	ldr	r3, [r4, #4]
   d4428:	4817      	ldr	r0, [pc, #92]	; (d4488 <_Z16setThirdPartySim6String+0x7c>)
   d442a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d442e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4432:	4359      	muls	r1, r3
   d4434:	f7ff ff41 	bl	d42ba <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4438:	f002 fb04 	bl	d6a44 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d443c:	b148      	cbz	r0, d4452 <_Z16setThirdPartySim6String+0x46>
   d443e:	2300      	movs	r3, #0
   d4440:	f88d 3000 	strb.w	r3, [sp]
   d4444:	4b11      	ldr	r3, [pc, #68]	; (d448c <_Z16setThirdPartySim6String+0x80>)
   d4446:	4a12      	ldr	r2, [pc, #72]	; (d4490 <_Z16setThirdPartySim6String+0x84>)
   d4448:	781b      	ldrb	r3, [r3, #0]
   d444a:	4912      	ldr	r1, [pc, #72]	; (d4494 <_Z16setThirdPartySim6String+0x88>)
   d444c:	4812      	ldr	r0, [pc, #72]	; (d4498 <_Z16setThirdPartySim6String+0x8c>)
   d444e:	f7ff ff45 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4452:	4b12      	ldr	r3, [pc, #72]	; (d449c <_Z16setThirdPartySim6String+0x90>)
   d4454:	2001      	movs	r0, #1
   d4456:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d4458:	b003      	add	sp, #12
   d445a:	bd30      	pop	{r4, r5, pc}
   d445c:	4910      	ldr	r1, [pc, #64]	; (d44a0 <_Z16setThirdPartySim6String+0x94>)
   d445e:	4628      	mov	r0, r5
   d4460:	f003 fa5d 	bl	d791e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4464:	2800      	cmp	r0, #0
   d4466:	d0f7      	beq.n	d4458 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4468:	4b06      	ldr	r3, [pc, #24]	; (d4484 <_Z16setThirdPartySim6String+0x78>)
   d446a:	705c      	strb	r4, [r3, #1]
   d446c:	f002 faea 	bl	d6a44 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4470:	2800      	cmp	r0, #0
   d4472:	d0ee      	beq.n	d4452 <_Z16setThirdPartySim6String+0x46>
   d4474:	4b05      	ldr	r3, [pc, #20]	; (d448c <_Z16setThirdPartySim6String+0x80>)
   d4476:	f88d 4000 	strb.w	r4, [sp]
   d447a:	781b      	ldrb	r3, [r3, #0]
   d447c:	4a09      	ldr	r2, [pc, #36]	; (d44a4 <_Z16setThirdPartySim6String+0x98>)
   d447e:	e7e4      	b.n	d444a <_Z16setThirdPartySim6String+0x3e>
   d4480:	000dab5b 	.word	0x000dab5b
   d4484:	2003e56c 	.word	0x2003e56c
   d4488:	2003e49c 	.word	0x2003e49c
   d448c:	2003e439 	.word	0x2003e439
   d4490:	000dabb4 	.word	0x000dabb4
   d4494:	000dabaf 	.word	0x000dabaf
   d4498:	2003e4ec 	.word	0x2003e4ec
   d449c:	2003e588 	.word	0x2003e588
   d44a0:	000dab9d 	.word	0x000dab9d
   d44a4:	000dabc9 	.word	0x000dabc9

000d44a8 <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   d44a8:	b510      	push	{r4, lr}
   d44aa:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44ac:	6800      	ldr	r0, [r0, #0]
   d44ae:	220a      	movs	r2, #10
   d44b0:	a903      	add	r1, sp, #12
   d44b2:	f005 fb35 	bl	d9b20 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44b6:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44ba:	d822      	bhi.n	d4502 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d44bc:	4c12      	ldr	r4, [pc, #72]	; (d4508 <_Z12setKeepAlive6String+0x60>)
   d44be:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44c0:	f7ff fee8 	bl	d4294 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44c4:	6863      	ldr	r3, [r4, #4]
   d44c6:	4811      	ldr	r0, [pc, #68]	; (d450c <_Z12setKeepAlive6String+0x64>)
   d44c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44cc:	4359      	muls	r1, r3
   d44ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44d2:	f7ff fef2 	bl	d42ba <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44d6:	6863      	ldr	r3, [r4, #4]
   d44d8:	4a0d      	ldr	r2, [pc, #52]	; (d4510 <_Z12setKeepAlive6String+0x68>)
   d44da:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44de:	a804      	add	r0, sp, #16
   d44e0:	f002 fb68 	bl	d6bb4 <snprintf>
   d44e4:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d44e6:	f88d 3000 	strb.w	r3, [sp]
   d44ea:	4b0a      	ldr	r3, [pc, #40]	; (d4514 <_Z12setKeepAlive6String+0x6c>)
   d44ec:	490a      	ldr	r1, [pc, #40]	; (d4518 <_Z12setKeepAlive6String+0x70>)
   d44ee:	781b      	ldrb	r3, [r3, #0]
   d44f0:	480a      	ldr	r0, [pc, #40]	; (d451c <_Z12setKeepAlive6String+0x74>)
   d44f2:	aa04      	add	r2, sp, #16
   d44f4:	f7ff fef2 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d44f8:	4b09      	ldr	r3, [pc, #36]	; (d4520 <_Z12setKeepAlive6String+0x78>)
   d44fa:	2001      	movs	r0, #1
   d44fc:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d44fe:	b044      	add	sp, #272	; 0x110
   d4500:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4502:	2000      	movs	r0, #0
   d4504:	e7fb      	b.n	d44fe <_Z12setKeepAlive6String+0x56>
   d4506:	bf00      	nop
   d4508:	2003e56c 	.word	0x2003e56c
   d450c:	2003e49c 	.word	0x2003e49c
   d4510:	000dabdd 	.word	0x000dabdd
   d4514:	2003e439 	.word	0x2003e439
   d4518:	000dabf6 	.word	0x000dabf6
   d451c:	2003e4ec 	.word	0x2003e4ec
   d4520:	2003e588 	.word	0x2003e588

000d4524 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4524:	b507      	push	{r0, r1, r2, lr}
   d4526:	f002 fa8d 	bl	d6a44 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d452a:	b148      	cbz	r0, d4540 <_Z18loadSystemDefaultsv+0x1c>
   d452c:	2300      	movs	r3, #0
   d452e:	f88d 3000 	strb.w	r3, [sp]
   d4532:	4b0c      	ldr	r3, [pc, #48]	; (d4564 <_Z18loadSystemDefaultsv+0x40>)
   d4534:	4a0c      	ldr	r2, [pc, #48]	; (d4568 <_Z18loadSystemDefaultsv+0x44>)
   d4536:	781b      	ldrb	r3, [r3, #0]
   d4538:	490c      	ldr	r1, [pc, #48]	; (d456c <_Z18loadSystemDefaultsv+0x48>)
   d453a:	480d      	ldr	r0, [pc, #52]	; (d4570 <_Z18loadSystemDefaultsv+0x4c>)
   d453c:	f7ff fece 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d4540:	4a0c      	ldr	r2, [pc, #48]	; (d4574 <_Z18loadSystemDefaultsv+0x50>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4542:	480d      	ldr	r0, [pc, #52]	; (d4578 <_Z18loadSystemDefaultsv+0x54>)
   d4544:	2378      	movs	r3, #120	; 0x78
   d4546:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d4548:	f240 1301 	movw	r3, #257	; 0x101
   d454c:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d454e:	2300      	movs	r3, #0
   d4550:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d4552:	7293      	strb	r3, [r2, #10]
   d4554:	2101      	movs	r1, #1
   d4556:	231c      	movs	r3, #28
}
   d4558:	b003      	add	sp, #12
   d455a:	f85d eb04 	ldr.w	lr, [sp], #4
   d455e:	f001 b88e 	b.w	d567e <_ZN6MB85RC9writeDataEjPKhj>
   d4562:	bf00      	nop
   d4564:	2003e439 	.word	0x2003e439
   d4568:	000dac01 	.word	0x000dac01
   d456c:	000dabaf 	.word	0x000dabaf
   d4570:	2003e4ec 	.word	0x2003e4ec
   d4574:	2003e56c 	.word	0x2003e56c
   d4578:	2003e47c 	.word	0x2003e47c

000d457c <_Z17loadAlertDefaultsv>:
void loadAlertDefaults() {                                                                  // Default settings for the device - connected, not-low power and always on
   d457c:	b507      	push	{r0, r1, r2, lr}
   d457e:	f002 fa61 	bl	d6a44 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Alert Defaults", PRIVATE);
   d4582:	b148      	cbz	r0, d4598 <_Z17loadAlertDefaultsv+0x1c>
   d4584:	2300      	movs	r3, #0
   d4586:	f88d 3000 	strb.w	r3, [sp]
   d458a:	4b0c      	ldr	r3, [pc, #48]	; (d45bc <_Z17loadAlertDefaultsv+0x40>)
   d458c:	4a0c      	ldr	r2, [pc, #48]	; (d45c0 <_Z17loadAlertDefaultsv+0x44>)
   d458e:	781b      	ldrb	r3, [r3, #0]
   d4590:	490c      	ldr	r1, [pc, #48]	; (d45c4 <_Z17loadAlertDefaultsv+0x48>)
   d4592:	480d      	ldr	r0, [pc, #52]	; (d45c8 <_Z17loadAlertDefaultsv+0x4c>)
   d4594:	f7ff fea2 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  alertsStatus.upperTemperatureThreshold = 30;
   d4598:	4a0c      	ldr	r2, [pc, #48]	; (d45cc <_Z17loadAlertDefaultsv+0x50>)
   d459a:	4b0d      	ldr	r3, [pc, #52]	; (d45d0 <_Z17loadAlertDefaultsv+0x54>)
   d459c:	6093      	str	r3, [r2, #8]
  alertsStatus.lowerTemperatureThreshold = 2;
   d459e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d45a2:	60d3      	str	r3, [r2, #12]
  alertsStatus.upperHumidityThreshold = 90;
   d45a4:	4b0b      	ldr	r3, [pc, #44]	; (d45d4 <_Z17loadAlertDefaultsv+0x58>)
   d45a6:	6113      	str	r3, [r2, #16]
   d45a8:	480b      	ldr	r0, [pc, #44]	; (d45d8 <_Z17loadAlertDefaultsv+0x5c>)
  alertsStatus.lowerHumidityThreshold= 5;
   d45aa:	4b0c      	ldr	r3, [pc, #48]	; (d45dc <_Z17loadAlertDefaultsv+0x60>)
   d45ac:	6153      	str	r3, [r2, #20]
   d45ae:	2150      	movs	r1, #80	; 0x50
   d45b0:	2318      	movs	r3, #24
}
   d45b2:	b003      	add	sp, #12
   d45b4:	f85d eb04 	ldr.w	lr, [sp], #4
   d45b8:	f001 b861 	b.w	d567e <_ZN6MB85RC9writeDataEjPKhj>
   d45bc:	2003e439 	.word	0x2003e439
   d45c0:	000dac19 	.word	0x000dac19
   d45c4:	000dabaf 	.word	0x000dabaf
   d45c8:	2003e4ec 	.word	0x2003e4ec
   d45cc:	2003e440 	.word	0x2003e440
   d45d0:	41f00000 	.word	0x41f00000
   d45d4:	42b40000 	.word	0x42b40000
   d45d8:	2003e47c 	.word	0x2003e47c
   d45dc:	40a00000 	.word	0x40a00000

000d45e0 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d45e0:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d45e2:	4c12      	ldr	r4, [pc, #72]	; (d462c <_Z17checkSystemValuesv+0x4c>)
   d45e4:	7a23      	ldrb	r3, [r4, #8]
   d45e6:	2b01      	cmp	r3, #1
   d45e8:	d904      	bls.n	d45f4 <_Z17checkSystemValuesv+0x14>
   d45ea:	f002 fa2b 	bl	d6a44 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d45ee:	b1d8      	cbz	r0, d4628 <_Z17checkSystemValuesv+0x48>
   d45f0:	2301      	movs	r3, #1
   d45f2:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d45fa:	bf84      	itt	hi
   d45fc:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4600:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4602:	7a63      	ldrb	r3, [r4, #9]
   d4604:	2b01      	cmp	r3, #1
   d4606:	bf84      	itt	hi
   d4608:	2300      	movhi	r3, #0
   d460a:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d460c:	7aa3      	ldrb	r3, [r4, #10]
   d460e:	2b01      	cmp	r3, #1
   d4610:	bf84      	itt	hi
   d4612:	2300      	movhi	r3, #0
   d4614:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4616:	6963      	ldr	r3, [r4, #20]
   d4618:	2bff      	cmp	r3, #255	; 0xff
   d461a:	bf84      	itt	hi
   d461c:	2300      	movhi	r3, #0
   d461e:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d4620:	4b03      	ldr	r3, [pc, #12]	; (d4630 <_Z17checkSystemValuesv+0x50>)
   d4622:	2201      	movs	r2, #1
   d4624:	701a      	strb	r2, [r3, #0]
}
   d4626:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4628:	7220      	strb	r0, [r4, #8]
   d462a:	e7e3      	b.n	d45f4 <_Z17checkSystemValuesv+0x14>
   d462c:	2003e56c 	.word	0x2003e56c
   d4630:	2003e588 	.word	0x2003e588

000d4634 <_Z17checkAlertsValuesv>:
  if (alertsStatus.lowerTemperatureThreshold < 0.0  || alertsStatus.lowerTemperatureThreshold > 20.0) alertsStatus.lowerTemperatureThreshold = 3.0;
   d4634:	4b22      	ldr	r3, [pc, #136]	; (d46c0 <_Z17checkAlertsValuesv+0x8c>)
   d4636:	ed93 7a03 	vldr	s14, [r3, #12]
   d463a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4642:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4646:	d404      	bmi.n	d4652 <_Z17checkAlertsValuesv+0x1e>
   d4648:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4650:	dd01      	ble.n	d4656 <_Z17checkAlertsValuesv+0x22>
   d4652:	4a1c      	ldr	r2, [pc, #112]	; (d46c4 <_Z17checkAlertsValuesv+0x90>)
   d4654:	60da      	str	r2, [r3, #12]
  if (alertsStatus.upperTemperatureThreshold < 20.0 || alertsStatus.upperTemperatureThreshold > 90.0) alertsStatus.upperTemperatureThreshold = 33.0;
   d4656:	ed93 7a02 	vldr	s14, [r3, #8]
   d465a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4662:	d406      	bmi.n	d4672 <_Z17checkAlertsValuesv+0x3e>
   d4664:	eddf 6a18 	vldr	s13, [pc, #96]	; d46c8 <_Z17checkAlertsValuesv+0x94>
   d4668:	eeb4 7ae6 	vcmpe.f32	s14, s13
   d466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4670:	dd01      	ble.n	d4676 <_Z17checkAlertsValuesv+0x42>
   d4672:	4a16      	ldr	r2, [pc, #88]	; (d46cc <_Z17checkAlertsValuesv+0x98>)
   d4674:	609a      	str	r2, [r3, #8]
  if (alertsStatus.lowerHumidityThreshold < 0.0     || alertsStatus.lowerHumidityThreshold > 50.0)    alertsStatus.lowerHumidityThreshold = 13.0;
   d4676:	ed93 7a05 	vldr	s14, [r3, #20]
   d467a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4682:	d406      	bmi.n	d4692 <_Z17checkAlertsValuesv+0x5e>
   d4684:	eddf 6a12 	vldr	s13, [pc, #72]	; d46d0 <_Z17checkAlertsValuesv+0x9c>
   d4688:	eeb4 7ae6 	vcmpe.f32	s14, s13
   d468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4690:	dd01      	ble.n	d4696 <_Z17checkAlertsValuesv+0x62>
   d4692:	4a10      	ldr	r2, [pc, #64]	; (d46d4 <_Z17checkAlertsValuesv+0xa0>)
   d4694:	615a      	str	r2, [r3, #20]
  if (alertsStatus.upperHumidityThreshold < 20.0    || alertsStatus.upperHumidityThreshold > 90.0)    alertsStatus.upperHumidityThreshold = 63.0;
   d4696:	ed93 7a04 	vldr	s14, [r3, #16]
   d469a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46a2:	d406      	bmi.n	d46b2 <_Z17checkAlertsValuesv+0x7e>
   d46a4:	eddf 7a08 	vldr	s15, [pc, #32]	; d46c8 <_Z17checkAlertsValuesv+0x94>
   d46a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d46ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46b0:	dd01      	ble.n	d46b6 <_Z17checkAlertsValuesv+0x82>
   d46b2:	4a09      	ldr	r2, [pc, #36]	; (d46d8 <_Z17checkAlertsValuesv+0xa4>)
   d46b4:	611a      	str	r2, [r3, #16]
  alertsStatusWriteNeeded = true;
   d46b6:	4b09      	ldr	r3, [pc, #36]	; (d46dc <_Z17checkAlertsValuesv+0xa8>)
   d46b8:	2201      	movs	r2, #1
   d46ba:	701a      	strb	r2, [r3, #0]
}
   d46bc:	4770      	bx	lr
   d46be:	bf00      	nop
   d46c0:	2003e440 	.word	0x2003e440
   d46c4:	40400000 	.word	0x40400000
   d46c8:	42b40000 	.word	0x42b40000
   d46cc:	42040000 	.word	0x42040000
   d46d0:	42480000 	.word	0x42480000
   d46d4:	41500000 	.word	0x41500000
   d46d8:	427c0000 	.word	0x427c0000
   d46dc:	2003e458 	.word	0x2003e458

000d46e0 <_Z11petWatchdogv>:
{
   d46e0:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d46e2:	2101      	movs	r1, #1
   d46e4:	2005      	movs	r0, #5
   d46e6:	f003 fd10 	bl	d810a <digitalWrite>
  digitalWrite(donePin, LOW);
   d46ea:	2100      	movs	r1, #0
   d46ec:	2005      	movs	r0, #5
   d46ee:	f003 fd0c 	bl	d810a <digitalWrite>
  watchdogFlag = false;
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <_Z11petWatchdogv+0x1c>)
   d46f4:	2200      	movs	r2, #0
   d46f6:	701a      	strb	r2, [r3, #0]
}
   d46f8:	bd08      	pop	{r3, pc}
   d46fa:	bf00      	nop
   d46fc:	2003e5c9 	.word	0x2003e5c9

000d4700 <_Z9sendEventv>:
{
   d4700:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d4702:	4c13      	ldr	r4, [pc, #76]	; (d4750 <_Z9sendEventv+0x50>)
{
   d4704:	b0a0      	sub	sp, #128	; 0x80
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,\"Battery\":%i}", sensorData.temperatureInC, sensorData.relativeHumidity,sensorData.stateOfCharge);
   d4706:	6923      	ldr	r3, [r4, #16]
   d4708:	68e0      	ldr	r0, [r4, #12]
   d470a:	9304      	str	r3, [sp, #16]
   d470c:	f003 fedc 	bl	d84c8 <__aeabi_f2d>
   d4710:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4714:	68a0      	ldr	r0, [r4, #8]
   d4716:	f003 fed7 	bl	d84c8 <__aeabi_f2d>
   d471a:	4a0e      	ldr	r2, [pc, #56]	; (d4754 <_Z9sendEventv+0x54>)
   d471c:	e9cd 0100 	strd	r0, r1, [sp]
   d4720:	2164      	movs	r1, #100	; 0x64
   d4722:	a807      	add	r0, sp, #28
   d4724:	f002 fa46 	bl	d6bb4 <snprintf>
  publishQueue.publish("storage-facility-hook", data, PRIVATE);
   d4728:	2300      	movs	r3, #0
   d472a:	f88d 3000 	strb.w	r3, [sp]
   d472e:	4b0a      	ldr	r3, [pc, #40]	; (d4758 <_Z9sendEventv+0x58>)
   d4730:	490a      	ldr	r1, [pc, #40]	; (d475c <_Z9sendEventv+0x5c>)
   d4732:	781b      	ldrb	r3, [r3, #0]
   d4734:	480a      	ldr	r0, [pc, #40]	; (d4760 <_Z9sendEventv+0x60>)
   d4736:	aa07      	add	r2, sp, #28
   d4738:	f7ff fdd0 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d473c:	4b09      	ldr	r3, [pc, #36]	; (d4764 <_Z9sendEventv+0x64>)
   d473e:	2201      	movs	r2, #1
   d4740:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4742:	f001 ff9f 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4746:	4b08      	ldr	r3, [pc, #32]	; (d4768 <_Z9sendEventv+0x68>)
   d4748:	6018      	str	r0, [r3, #0]
}
   d474a:	b020      	add	sp, #128	; 0x80
   d474c:	bd10      	pop	{r4, pc}
   d474e:	bf00      	nop
   d4750:	2003e544 	.word	0x2003e544
   d4754:	000dac30 	.word	0x000dac30
   d4758:	2003e439 	.word	0x2003e439
   d475c:	000dac65 	.word	0x000dac65
   d4760:	2003e4ec 	.word	0x2003e4ec
   d4764:	2003e479 	.word	0x2003e479
   d4768:	2003e5cc 	.word	0x2003e5cc

000d476c <_Z8blinkLEDi>:
{
   d476c:	b538      	push	{r3, r4, r5, lr}
  if (millis() - lastStateChange > flashingFrequency) {
   d476e:	4d0b      	ldr	r5, [pc, #44]	; (d479c <_Z8blinkLEDi+0x30>)
{
   d4770:	4604      	mov	r4, r0
   d4772:	f001 ff87 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastStateChange > flashingFrequency) {
   d4776:	682b      	ldr	r3, [r5, #0]
   d4778:	1ac0      	subs	r0, r0, r3
   d477a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d477e:	d90c      	bls.n	d479a <_Z8blinkLEDi+0x2e>
    digitalWrite(LED,!digitalRead(LED));
   d4780:	b2a4      	uxth	r4, r4
   d4782:	4620      	mov	r0, r4
   d4784:	f003 fcda 	bl	d813c <digitalRead>
   d4788:	fab0 f180 	clz	r1, r0
   d478c:	0949      	lsrs	r1, r1, #5
   d478e:	4620      	mov	r0, r4
   d4790:	f003 fcbb 	bl	d810a <digitalWrite>
   d4794:	f001 ff76 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   d4798:	6028      	str	r0, [r5, #0]
}
   d479a:	bd38      	pop	{r3, r4, r5, pc}
   d479c:	2003e43c 	.word	0x2003e43c

000d47a0 <_Z22publishStateTransitionv>:
{
   d47a0:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d47a2:	4d11      	ldr	r5, [pc, #68]	; (d47e8 <_Z22publishStateTransitionv+0x48>)
   d47a4:	4c11      	ldr	r4, [pc, #68]	; (d47ec <_Z22publishStateTransitionv+0x4c>)
   d47a6:	4912      	ldr	r1, [pc, #72]	; (d47f0 <_Z22publishStateTransitionv+0x50>)
   d47a8:	782a      	ldrb	r2, [r5, #0]
   d47aa:	7820      	ldrb	r0, [r4, #0]
{
   d47ac:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d47ae:	231a      	movs	r3, #26
   d47b0:	fb03 1202 	mla	r2, r3, r2, r1
   d47b4:	9200      	str	r2, [sp, #0]
   d47b6:	fb03 1300 	mla	r3, r3, r0, r1
   d47ba:	4a0e      	ldr	r2, [pc, #56]	; (d47f4 <_Z22publishStateTransitionv+0x54>)
   d47bc:	2128      	movs	r1, #40	; 0x28
   d47be:	a802      	add	r0, sp, #8
   d47c0:	f002 f9f8 	bl	d6bb4 <snprintf>
  oldState = state;
   d47c4:	782b      	ldrb	r3, [r5, #0]
   d47c6:	7023      	strb	r3, [r4, #0]
   d47c8:	f002 f93c 	bl	d6a44 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d47cc:	b148      	cbz	r0, d47e2 <_Z22publishStateTransitionv+0x42>
   d47ce:	2300      	movs	r3, #0
   d47d0:	f88d 3000 	strb.w	r3, [sp]
   d47d4:	4b08      	ldr	r3, [pc, #32]	; (d47f8 <_Z22publishStateTransitionv+0x58>)
   d47d6:	4909      	ldr	r1, [pc, #36]	; (d47fc <_Z22publishStateTransitionv+0x5c>)
   d47d8:	781b      	ldrb	r3, [r3, #0]
   d47da:	4809      	ldr	r0, [pc, #36]	; (d4800 <_Z22publishStateTransitionv+0x60>)
   d47dc:	aa02      	add	r2, sp, #8
   d47de:	f7ff fd7d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d47e2:	b00d      	add	sp, #52	; 0x34
   d47e4:	bd30      	pop	{r4, r5, pc}
   d47e6:	bf00      	nop
   d47e8:	2003e568 	.word	0x2003e568
   d47ec:	2003e4e8 	.word	0x2003e4e8
   d47f0:	2003e180 	.word	0x2003e180
   d47f4:	000dac7b 	.word	0x000dac7b
   d47f8:	2003e439 	.word	0x2003e439
   d47fc:	000dac89 	.word	0x000dac89
   d4800:	2003e4ec 	.word	0x2003e4ec

000d4804 <_Z20updateThresholdValuev>:

// This function updates the threshold value string in the console. 
void updateThresholdValue()
{
   d4804:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f", alertsStatus.upperTemperatureThreshold);
   d4806:	4c17      	ldr	r4, [pc, #92]	; (d4864 <_Z20updateThresholdValuev+0x60>)
   d4808:	68a0      	ldr	r0, [r4, #8]
   d480a:	f003 fe5d 	bl	d84c8 <__aeabi_f2d>
   d480e:	4a16      	ldr	r2, [pc, #88]	; (d4868 <_Z20updateThresholdValuev+0x64>)
   d4810:	e9cd 0100 	strd	r0, r1, [sp]
   d4814:	2118      	movs	r1, #24
   d4816:	4815      	ldr	r0, [pc, #84]	; (d486c <_Z20updateThresholdValuev+0x68>)
   d4818:	f002 f9cc 	bl	d6bb4 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Min : %3.1f",alertsStatus.lowerTemperatureThreshold);
   d481c:	68e0      	ldr	r0, [r4, #12]
   d481e:	f003 fe53 	bl	d84c8 <__aeabi_f2d>
   d4822:	4a13      	ldr	r2, [pc, #76]	; (d4870 <_Z20updateThresholdValuev+0x6c>)
   d4824:	e9cd 0100 	strd	r0, r1, [sp]
   d4828:	2118      	movs	r1, #24
   d482a:	4812      	ldr	r0, [pc, #72]	; (d4874 <_Z20updateThresholdValuev+0x70>)
   d482c:	f002 f9c2 	bl	d6bb4 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",alertsStatus.upperHumidityThreshold);
   d4830:	6920      	ldr	r0, [r4, #16]
   d4832:	f003 fe49 	bl	d84c8 <__aeabi_f2d>
   d4836:	4a10      	ldr	r2, [pc, #64]	; (d4878 <_Z20updateThresholdValuev+0x74>)
   d4838:	e9cd 0100 	strd	r0, r1, [sp]
   d483c:	2118      	movs	r1, #24
   d483e:	480f      	ldr	r0, [pc, #60]	; (d487c <_Z20updateThresholdValuev+0x78>)
   d4840:	f002 f9b8 	bl	d6bb4 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",alertsStatus.lowerHumidityThreshold);
   d4844:	6960      	ldr	r0, [r4, #20]
   d4846:	f003 fe3f 	bl	d84c8 <__aeabi_f2d>
   d484a:	4a0d      	ldr	r2, [pc, #52]	; (d4880 <_Z20updateThresholdValuev+0x7c>)
   d484c:	e9cd 0100 	strd	r0, r1, [sp]
   d4850:	2118      	movs	r1, #24
   d4852:	480c      	ldr	r0, [pc, #48]	; (d4884 <_Z20updateThresholdValuev+0x80>)
   d4854:	f002 f9ae 	bl	d6bb4 <snprintf>
    alertsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d4858:	4b0b      	ldr	r3, [pc, #44]	; (d4888 <_Z20updateThresholdValuev+0x84>)
   d485a:	2201      	movs	r2, #1
   d485c:	701a      	strb	r2, [r3, #0]
} 
   d485e:	b002      	add	sp, #8
   d4860:	bd10      	pop	{r4, pc}
   d4862:	bf00      	nop
   d4864:	2003e440 	.word	0x2003e440
   d4868:	000dac9a 	.word	0x000dac9a
   d486c:	2003e5b1 	.word	0x2003e5b1
   d4870:	000dacab 	.word	0x000dacab
   d4874:	2003e4d0 	.word	0x2003e4d0
   d4878:	000dacbc 	.word	0x000dacbc
   d487c:	2003e599 	.word	0x2003e599
   d4880:	000dacd0 	.word	0x000dacd0
   d4884:	2003e4b8 	.word	0x2003e4b8
   d4888:	2003e458 	.word	0x2003e458

000d488c <_Z17setUpperTempLimit6String>:
{
   d488c:	b500      	push	{lr}
   d488e:	b089      	sub	sp, #36	; 0x24
   d4890:	9003      	str	r0, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d4892:	f003 f86f 	bl	d7974 <_ZNK6String7toFloatEv>
   d4896:	4b0d      	ldr	r3, [pc, #52]	; (d48cc <_Z17setUpperTempLimit6String+0x40>)
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   d4898:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperTemperatureThreshold = value.toFloat();
   d489a:	ed83 0a02 	vstr	s0, [r3, #8]
  publishQueue.publish("Upper Temperature Threshold Set",String(value),PRIVATE);
   d489e:	a804      	add	r0, sp, #16
   d48a0:	f003 f832 	bl	d7908 <_ZN6StringC1ERKS_>
   d48a4:	2300      	movs	r3, #0
   d48a6:	f88d 3000 	strb.w	r3, [sp]
   d48aa:	4b09      	ldr	r3, [pc, #36]	; (d48d0 <_Z17setUpperTempLimit6String+0x44>)
   d48ac:	9a04      	ldr	r2, [sp, #16]
   d48ae:	781b      	ldrb	r3, [r3, #0]
   d48b0:	4908      	ldr	r1, [pc, #32]	; (d48d4 <_Z17setUpperTempLimit6String+0x48>)
   d48b2:	4809      	ldr	r0, [pc, #36]	; (d48d8 <_Z17setUpperTempLimit6String+0x4c>)
   d48b4:	f7ff fd12 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d48b8:	a804      	add	r0, sp, #16
   d48ba:	f002 ffb7 	bl	d782c <_ZN6StringD1Ev>
  updateThresholdValue();
   d48be:	f7ff ffa1 	bl	d4804 <_Z20updateThresholdValuev>
}
   d48c2:	2001      	movs	r0, #1
   d48c4:	b009      	add	sp, #36	; 0x24
   d48c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d48ca:	bf00      	nop
   d48cc:	2003e440 	.word	0x2003e440
   d48d0:	2003e439 	.word	0x2003e439
   d48d4:	000dace5 	.word	0x000dace5
   d48d8:	2003e4ec 	.word	0x2003e4ec

000d48dc <_Z17setLowerTempLimit6String>:
{
   d48dc:	b500      	push	{lr}
   d48de:	b089      	sub	sp, #36	; 0x24
   d48e0:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d48e2:	f003 f847 	bl	d7974 <_ZNK6String7toFloatEv>
   d48e6:	4b0d      	ldr	r3, [pc, #52]	; (d491c <_Z17setLowerTempLimit6String+0x40>)
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   d48e8:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerTemperatureThreshold = value.toFloat();
   d48ea:	ed83 0a03 	vstr	s0, [r3, #12]
  publishQueue.publish("Lower Temperature Threshold Set",String(value),PRIVATE);
   d48ee:	a804      	add	r0, sp, #16
   d48f0:	f003 f80a 	bl	d7908 <_ZN6StringC1ERKS_>
   d48f4:	2300      	movs	r3, #0
   d48f6:	f88d 3000 	strb.w	r3, [sp]
   d48fa:	4b09      	ldr	r3, [pc, #36]	; (d4920 <_Z17setLowerTempLimit6String+0x44>)
   d48fc:	9a04      	ldr	r2, [sp, #16]
   d48fe:	781b      	ldrb	r3, [r3, #0]
   d4900:	4908      	ldr	r1, [pc, #32]	; (d4924 <_Z17setLowerTempLimit6String+0x48>)
   d4902:	4809      	ldr	r0, [pc, #36]	; (d4928 <_Z17setLowerTempLimit6String+0x4c>)
   d4904:	f7ff fcea 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4908:	a804      	add	r0, sp, #16
   d490a:	f002 ff8f 	bl	d782c <_ZN6StringD1Ev>
  updateThresholdValue();
   d490e:	f7ff ff79 	bl	d4804 <_Z20updateThresholdValuev>
}
   d4912:	2001      	movs	r0, #1
   d4914:	b009      	add	sp, #36	; 0x24
   d4916:	f85d fb04 	ldr.w	pc, [sp], #4
   d491a:	bf00      	nop
   d491c:	2003e440 	.word	0x2003e440
   d4920:	2003e439 	.word	0x2003e439
   d4924:	000dad05 	.word	0x000dad05
   d4928:	2003e4ec 	.word	0x2003e4ec

000d492c <_Z21setUpperHumidityLimit6String>:
{
   d492c:	b500      	push	{lr}
   d492e:	b089      	sub	sp, #36	; 0x24
   d4930:	9003      	str	r0, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d4932:	f003 f81f 	bl	d7974 <_ZNK6String7toFloatEv>
   d4936:	4b0d      	ldr	r3, [pc, #52]	; (d496c <_Z21setUpperHumidityLimit6String+0x40>)
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   d4938:	9903      	ldr	r1, [sp, #12]
  alertsStatus.upperHumidityThreshold = value.toFloat();
   d493a:	ed83 0a04 	vstr	s0, [r3, #16]
  publishQueue.publish("Upper Humidity Threshold Set",String(value),PRIVATE);
   d493e:	a804      	add	r0, sp, #16
   d4940:	f002 ffe2 	bl	d7908 <_ZN6StringC1ERKS_>
   d4944:	2300      	movs	r3, #0
   d4946:	f88d 3000 	strb.w	r3, [sp]
   d494a:	4b09      	ldr	r3, [pc, #36]	; (d4970 <_Z21setUpperHumidityLimit6String+0x44>)
   d494c:	9a04      	ldr	r2, [sp, #16]
   d494e:	781b      	ldrb	r3, [r3, #0]
   d4950:	4908      	ldr	r1, [pc, #32]	; (d4974 <_Z21setUpperHumidityLimit6String+0x48>)
   d4952:	4809      	ldr	r0, [pc, #36]	; (d4978 <_Z21setUpperHumidityLimit6String+0x4c>)
   d4954:	f7ff fcc2 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4958:	a804      	add	r0, sp, #16
   d495a:	f002 ff67 	bl	d782c <_ZN6StringD1Ev>
  updateThresholdValue();
   d495e:	f7ff ff51 	bl	d4804 <_Z20updateThresholdValuev>
}
   d4962:	2001      	movs	r0, #1
   d4964:	b009      	add	sp, #36	; 0x24
   d4966:	f85d fb04 	ldr.w	pc, [sp], #4
   d496a:	bf00      	nop
   d496c:	2003e440 	.word	0x2003e440
   d4970:	2003e439 	.word	0x2003e439
   d4974:	000dad25 	.word	0x000dad25
   d4978:	2003e4ec 	.word	0x2003e4ec

000d497c <_Z21setLowerHumidityLimit6String>:
{
   d497c:	b500      	push	{lr}
   d497e:	b089      	sub	sp, #36	; 0x24
   d4980:	9003      	str	r0, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d4982:	f002 fff7 	bl	d7974 <_ZNK6String7toFloatEv>
   d4986:	4b0d      	ldr	r3, [pc, #52]	; (d49bc <_Z21setLowerHumidityLimit6String+0x40>)
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   d4988:	9903      	ldr	r1, [sp, #12]
  alertsStatus.lowerHumidityThreshold = value.toFloat();
   d498a:	ed83 0a05 	vstr	s0, [r3, #20]
  publishQueue.publish("Lower Humidity Threshold Set",String(value),PRIVATE);
   d498e:	a804      	add	r0, sp, #16
   d4990:	f002 ffba 	bl	d7908 <_ZN6StringC1ERKS_>
   d4994:	2300      	movs	r3, #0
   d4996:	f88d 3000 	strb.w	r3, [sp]
   d499a:	4b09      	ldr	r3, [pc, #36]	; (d49c0 <_Z21setLowerHumidityLimit6String+0x44>)
   d499c:	9a04      	ldr	r2, [sp, #16]
   d499e:	781b      	ldrb	r3, [r3, #0]
   d49a0:	4908      	ldr	r1, [pc, #32]	; (d49c4 <_Z21setLowerHumidityLimit6String+0x48>)
   d49a2:	4809      	ldr	r0, [pc, #36]	; (d49c8 <_Z21setLowerHumidityLimit6String+0x4c>)
   d49a4:	f7ff fc9a 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d49a8:	a804      	add	r0, sp, #16
   d49aa:	f002 ff3f 	bl	d782c <_ZN6StringD1Ev>
  updateThresholdValue();
   d49ae:	f7ff ff29 	bl	d4804 <_Z20updateThresholdValuev>
}
   d49b2:	2001      	movs	r0, #1
   d49b4:	b009      	add	sp, #36	; 0x24
   d49b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d49ba:	bf00      	nop
   d49bc:	2003e440 	.word	0x2003e440
   d49c0:	2003e439 	.word	0x2003e439
   d49c4:	000dad42 	.word	0x000dad42
   d49c8:	2003e4ec 	.word	0x2003e4ec

000d49cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d49cc:	b530      	push	{r4, r5, lr}
   d49ce:	b085      	sub	sp, #20
   d49d0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d49d2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d49d4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d49d6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d49d8:	f001 ffb4 	bl	d6944 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d49dc:	b9b0      	cbnz	r0, d4a0c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d49de:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d49e0:	b10c      	cbz	r4, d49e6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d49e2:	6923      	ldr	r3, [r4, #16]
   d49e4:	b923      	cbnz	r3, d49f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d49e6:	4a0a      	ldr	r2, [pc, #40]	; (d4a10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d49e8:	2100      	movs	r1, #0
   d49ea:	200a      	movs	r0, #10
   d49ec:	f001 ff9a 	bl	d6924 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d49f0:	2300      	movs	r3, #0
   d49f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   d49f6:	230c      	movs	r3, #12
   d49f8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d49fc:	2304      	movs	r3, #4
   d49fe:	9303      	str	r3, [sp, #12]
   d4a00:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4a02:	6923      	ldr	r3, [r4, #16]
   d4a04:	aa01      	add	r2, sp, #4
   d4a06:	2101      	movs	r1, #1
   d4a08:	4620      	mov	r0, r4
   d4a0a:	4798      	blx	r3
}
   d4a0c:	b005      	add	sp, #20
   d4a0e:	bd30      	pop	{r4, r5, pc}
   d4a10:	000d6675 	.word	0x000d6675

000d4a14 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   d4a14:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a16:	4d11      	ldr	r5, [pc, #68]	; (d4a5c <_Z17getBatteryContextv+0x48>)
   d4a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4a1a:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4a1c:	ac01      	add	r4, sp, #4
   d4a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4a28:	4669      	mov	r1, sp
   d4a2a:	2007      	movs	r0, #7
   d4a2c:	f7ff ffce 	bl	d49cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4a30:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4a32:	bfa8      	it	ge
   d4a34:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  sysStatus.batteryState = System.batteryState();
   d4a36:	4b0a      	ldr	r3, [pc, #40]	; (d4a60 <_Z17getBatteryContextv+0x4c>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a38:	4a0a      	ldr	r2, [pc, #40]	; (d4a64 <_Z17getBatteryContextv+0x50>)
  sysStatus.batteryState = System.batteryState();
   d4a3a:	7418      	strb	r0, [r3, #16]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4a3c:	ab08      	add	r3, sp, #32
   d4a3e:	b2c0      	uxtb	r0, r0
   d4a40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4a44:	2110      	movs	r1, #16
   d4a46:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4a4a:	4807      	ldr	r0, [pc, #28]	; (d4a68 <_Z17getBatteryContextv+0x54>)
   d4a4c:	f002 f8b2 	bl	d6bb4 <snprintf>
  sysStatusWriteNeeded = true;
   d4a50:	4b06      	ldr	r3, [pc, #24]	; (d4a6c <_Z17getBatteryContextv+0x58>)
   d4a52:	2201      	movs	r2, #1
   d4a54:	701a      	strb	r2, [r3, #0]
}
   d4a56:	b009      	add	sp, #36	; 0x24
   d4a58:	bd30      	pop	{r4, r5, pc}
   d4a5a:	bf00      	nop
   d4a5c:	000daf94 	.word	0x000daf94
   d4a60:	2003e56c 	.word	0x2003e56c
   d4a64:	000db1bc 	.word	0x000db1bc
   d4a68:	2003e459 	.word	0x2003e459
   d4a6c:	2003e588 	.word	0x2003e588

000d4a70 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a72:	ed2d 8b02 	vpush	{d8}
  char thresholdMessage[64] = "All within thresholds";
   d4a76:	4b77      	ldr	r3, [pc, #476]	; (d4c54 <_Z16takeMeasurementsv+0x1e4>)
bool takeMeasurements() {
   d4a78:	b097      	sub	sp, #92	; 0x5c
  char thresholdMessage[64] = "All within thresholds";
   d4a7a:	aa06      	add	r2, sp, #24
   d4a7c:	f103 0510 	add.w	r5, r3, #16
   d4a80:	4617      	mov	r7, r2
   d4a82:	6818      	ldr	r0, [r3, #0]
   d4a84:	6859      	ldr	r1, [r3, #4]
   d4a86:	4614      	mov	r4, r2
   d4a88:	c403      	stmia	r4!, {r0, r1}
   d4a8a:	3308      	adds	r3, #8
   d4a8c:	42ab      	cmp	r3, r5
   d4a8e:	4622      	mov	r2, r4
   d4a90:	d1f7      	bne.n	d4a82 <_Z16takeMeasurementsv+0x12>
   d4a92:	6818      	ldr	r0, [r3, #0]
   d4a94:	889b      	ldrh	r3, [r3, #4]
   d4a96:	6020      	str	r0, [r4, #0]
   d4a98:	80a3      	strh	r3, [r4, #4]
   d4a9a:	222a      	movs	r2, #42	; 0x2a
   d4a9c:	2100      	movs	r1, #0
  sensorData.validData = false;
   d4a9e:	4d6e      	ldr	r5, [pc, #440]	; (d4c58 <_Z16takeMeasurementsv+0x1e8>)
  char thresholdMessage[64] = "All within thresholds";
   d4aa0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   d4aa4:	f004 f906 	bl	d8cb4 <memset>
  sensorData.validData = false;
   d4aa8:	2400      	movs	r4, #0
  if (sht31.readTemperature()){
   d4aaa:	486c      	ldr	r0, [pc, #432]	; (d4c5c <_Z16takeMeasurementsv+0x1ec>)
  sensorData.validData = false;
   d4aac:	702c      	strb	r4, [r5, #0]
  if (sht31.readTemperature()){
   d4aae:	f000 fd0f 	bl	d54d0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4ab2:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4aba:	f000 80aa 	beq.w	d4c12 <_Z16takeMeasurementsv+0x1a2>
    sensorData.temperatureInC = sht31.readTemperature();
   d4abe:	4867      	ldr	r0, [pc, #412]	; (d4c5c <_Z16takeMeasurementsv+0x1ec>)
   d4ac0:	f000 fd06 	bl	d54d0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4ac4:	ee10 0a10 	vmov	r0, s0
   d4ac8:	ed85 0a02 	vstr	s0, [r5, #8]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensorData.temperatureInC);
   d4acc:	f003 fcfc 	bl	d84c8 <__aeabi_f2d>
   d4ad0:	4a63      	ldr	r2, [pc, #396]	; (d4c60 <_Z16takeMeasurementsv+0x1f0>)
   d4ad2:	e9cd 0100 	strd	r0, r1, [sp]
   d4ad6:	2110      	movs	r1, #16
   d4ad8:	4862      	ldr	r0, [pc, #392]	; (d4c64 <_Z16takeMeasurementsv+0x1f4>)
   d4ada:	f002 f86b 	bl	d6bb4 <snprintf>
    sensorData.relativeHumidity = sht31.readHumidity();
   d4ade:	485f      	ldr	r0, [pc, #380]	; (d4c5c <_Z16takeMeasurementsv+0x1ec>)
   d4ae0:	f000 fd04 	bl	d54ec <_ZN14Adafruit_SHT3112readHumidityEv>
   d4ae4:	ee10 0a10 	vmov	r0, s0
   d4ae8:	ed85 0a03 	vstr	s0, [r5, #12]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensorData.relativeHumidity);
   d4aec:	f003 fcec 	bl	d84c8 <__aeabi_f2d>
   d4af0:	4a5d      	ldr	r2, [pc, #372]	; (d4c68 <_Z16takeMeasurementsv+0x1f8>)
   d4af2:	e9cd 0100 	strd	r0, r1, [sp]
   d4af6:	2110      	movs	r1, #16
   d4af8:	485c      	ldr	r0, [pc, #368]	; (d4c6c <_Z16takeMeasurementsv+0x1fc>)
   d4afa:	f002 f85b 	bl	d6bb4 <snprintf>
   d4afe:	a905      	add	r1, sp, #20
   d4b00:	2003      	movs	r0, #3
   d4b02:	f7ff ff63 	bl	d49cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4b06:	2800      	cmp	r0, #0
   d4b08:	f040 809e 	bne.w	d4c48 <_Z16takeMeasurementsv+0x1d8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4b0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4b10:	ee07 3a90 	vmov	s15, r3
   d4b14:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4b1c:	4e54      	ldr	r6, [pc, #336]	; (d4c70 <_Z16takeMeasurementsv+0x200>)
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4b1e:	4a55      	ldr	r2, [pc, #340]	; (d4c74 <_Z16takeMeasurementsv+0x204>)
   d4b20:	4855      	ldr	r0, [pc, #340]	; (d4c78 <_Z16takeMeasurementsv+0x208>)
    sensorData.stateOfCharge = int(System.batteryCharge());
   d4b22:	edc5 7a04 	vstr	s15, [r5, #16]
   d4b26:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensorData.stateOfCharge);
   d4b2a:	2110      	movs	r1, #16
   d4b2c:	f002 f842 	bl	d6bb4 <snprintf>
    if (sensorData.temperatureInC < alertsStatus.lowerTemperatureThreshold) {
   d4b30:	ed95 8a02 	vldr	s16, [r5, #8]
   d4b34:	edd6 7a03 	vldr	s15, [r6, #12]
   d4b38:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b40:	f140 8085 	bpl.w	d4c4e <_Z16takeMeasurementsv+0x1de>
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   d4b44:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   d4b46:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerTemperatureThresholdCrossed = true;
   d4b4a:	7074      	strb	r4, [r6, #1]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Temp Alert %4.2f < %4.2f", sensorData.temperatureInC, alertsStatus.lowerTemperatureThreshold);
   d4b4c:	f003 fcbc 	bl	d84c8 <__aeabi_f2d>
   d4b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b54:	ee18 0a10 	vmov	r0, s16
   d4b58:	f003 fcb6 	bl	d84c8 <__aeabi_f2d>
   d4b5c:	4a47      	ldr	r2, [pc, #284]	; (d4c7c <_Z16takeMeasurementsv+0x20c>)
   d4b5e:	e9cd 0100 	strd	r0, r1, [sp]
   d4b62:	2140      	movs	r1, #64	; 0x40
   d4b64:	4638      	mov	r0, r7
   d4b66:	f002 f825 	bl	d6bb4 <snprintf>
    if (sensorData.temperatureInC > alertsStatus.upperTemperatureThreshold) {
   d4b6a:	ed95 8a02 	vldr	s16, [r5, #8]
   d4b6e:	edd6 7a02 	vldr	s15, [r6, #8]
   d4b72:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b7a:	dd12      	ble.n	d4ba2 <_Z16takeMeasurementsv+0x132>
      alertsStatus.upperTemperatureThresholdCrossed = true;
   d4b7c:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   d4b7e:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperTemperatureThresholdCrossed = true;
   d4b82:	7034      	strb	r4, [r6, #0]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Temp Alert %4.2f > %4.2f", sensorData.temperatureInC, alertsStatus.upperTemperatureThreshold);
   d4b84:	f003 fca0 	bl	d84c8 <__aeabi_f2d>
   d4b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4b8c:	ee18 0a10 	vmov	r0, s16
   d4b90:	f003 fc9a 	bl	d84c8 <__aeabi_f2d>
   d4b94:	4a3a      	ldr	r2, [pc, #232]	; (d4c80 <_Z16takeMeasurementsv+0x210>)
   d4b96:	e9cd 0100 	strd	r0, r1, [sp]
   d4b9a:	2140      	movs	r1, #64	; 0x40
   d4b9c:	4638      	mov	r0, r7
   d4b9e:	f002 f809 	bl	d6bb4 <snprintf>
    if (sensorData.relativeHumidity < alertsStatus.lowerHumidityThreshold) {
   d4ba2:	ed95 8a03 	vldr	s16, [r5, #12]
   d4ba6:	edd6 7a05 	vldr	s15, [r6, #20]
   d4baa:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bb2:	d512      	bpl.n	d4bda <_Z16takeMeasurementsv+0x16a>
      alertsStatus.lowerHumidityThresholdCrossed = true;
   d4bb4:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   d4bb6:	ee17 0a90 	vmov	r0, s15
      alertsStatus.lowerHumidityThresholdCrossed = true;
   d4bba:	70f4      	strb	r4, [r6, #3]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "Low Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.lowerHumidityThreshold);
   d4bbc:	f003 fc84 	bl	d84c8 <__aeabi_f2d>
   d4bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4bc4:	ee18 0a10 	vmov	r0, s16
   d4bc8:	f003 fc7e 	bl	d84c8 <__aeabi_f2d>
   d4bcc:	4a2d      	ldr	r2, [pc, #180]	; (d4c84 <_Z16takeMeasurementsv+0x214>)
   d4bce:	e9cd 0100 	strd	r0, r1, [sp]
   d4bd2:	2140      	movs	r1, #64	; 0x40
   d4bd4:	4638      	mov	r0, r7
   d4bd6:	f001 ffed 	bl	d6bb4 <snprintf>
    if (sensorData.relativeHumidity > alertsStatus.upperHumidityThreshold) {
   d4bda:	ed95 8a03 	vldr	s16, [r5, #12]
   d4bde:	edd6 7a04 	vldr	s15, [r6, #16]
   d4be2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bea:	dd12      	ble.n	d4c12 <_Z16takeMeasurementsv+0x1a2>
      alertsStatus.upperHumidityThresholdCrossed = true;
   d4bec:	2401      	movs	r4, #1
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   d4bee:	ee17 0a90 	vmov	r0, s15
      alertsStatus.upperHumidityThresholdCrossed = true;
   d4bf2:	70b4      	strb	r4, [r6, #2]
      snprintf(thresholdMessage, sizeof(thresholdMessage), "High Humidity Alert %4.2f < %4.2f", sensorData.relativeHumidity, alertsStatus.upperHumidityThreshold);
   d4bf4:	f003 fc68 	bl	d84c8 <__aeabi_f2d>
   d4bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4bfc:	ee18 0a10 	vmov	r0, s16
   d4c00:	f003 fc62 	bl	d84c8 <__aeabi_f2d>
   d4c04:	4a20      	ldr	r2, [pc, #128]	; (d4c88 <_Z16takeMeasurementsv+0x218>)
   d4c06:	e9cd 0100 	strd	r0, r1, [sp]
   d4c0a:	2140      	movs	r1, #64	; 0x40
   d4c0c:	4638      	mov	r0, r7
   d4c0e:	f001 ffd1 	bl	d6bb4 <snprintf>
    sensorData.validData = true;
   d4c12:	2601      	movs	r6, #1
    getBatteryContext();                                                                    // Check what the battery is doing.
   d4c14:	f7ff fefe 	bl	d4a14 <_Z17getBatteryContextv>
    sensorData.validData = true;
   d4c18:	702e      	strb	r6, [r5, #0]
    sensorData.timeStamp = Time.now();
   d4c1a:	f003 f848 	bl	d7cae <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d4c1e:	4b1b      	ldr	r3, [pc, #108]	; (d4c8c <_Z16takeMeasurementsv+0x21c>)
    sensorData.timeStamp = Time.now();
   d4c20:	6068      	str	r0, [r5, #4]
    sensorDataWriteNeeded = true;
   d4c22:	701e      	strb	r6, [r3, #0]
    alertsStatusWriteNeeded = true;  
   d4c24:	4b1a      	ldr	r3, [pc, #104]	; (d4c90 <_Z16takeMeasurementsv+0x220>)
   d4c26:	701e      	strb	r6, [r3, #0]
    if (haveAnyAlertsBeenSet) publishQueue.publish("Alerts", thresholdMessage,PRIVATE);
   d4c28:	b14c      	cbz	r4, d4c3e <_Z16takeMeasurementsv+0x1ce>
   d4c2a:	2300      	movs	r3, #0
   d4c2c:	f88d 3000 	strb.w	r3, [sp]
   d4c30:	4b18      	ldr	r3, [pc, #96]	; (d4c94 <_Z16takeMeasurementsv+0x224>)
   d4c32:	4919      	ldr	r1, [pc, #100]	; (d4c98 <_Z16takeMeasurementsv+0x228>)
   d4c34:	781b      	ldrb	r3, [r3, #0]
   d4c36:	4819      	ldr	r0, [pc, #100]	; (d4c9c <_Z16takeMeasurementsv+0x22c>)
   d4c38:	463a      	mov	r2, r7
   d4c3a:	f7ff fb4f 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4c3e:	4620      	mov	r0, r4
   d4c40:	b017      	add	sp, #92	; 0x5c
   d4c42:	ecbd 8b02 	vpop	{d8}
   d4c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   d4c48:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4c4c:	e764      	b.n	d4b18 <_Z16takeMeasurementsv+0xa8>
  bool haveAnyAlertsBeenSet = false;
   d4c4e:	2400      	movs	r4, #0
   d4c50:	e78b      	b.n	d4b6a <_Z16takeMeasurementsv+0xfa>
   d4c52:	bf00      	nop
   d4c54:	000dafb0 	.word	0x000dafb0
   d4c58:	2003e544 	.word	0x2003e544
   d4c5c:	2003e55c 	.word	0x2003e55c
   d4c60:	000dad5f 	.word	0x000dad5f
   d4c64:	2003e589 	.word	0x2003e589
   d4c68:	000dad67 	.word	0x000dad67
   d4c6c:	2003e48c 	.word	0x2003e48c
   d4c70:	2003e440 	.word	0x2003e440
   d4c74:	000dad6f 	.word	0x000dad6f
   d4c78:	2003e469 	.word	0x2003e469
   d4c7c:	000dad75 	.word	0x000dad75
   d4c80:	000dad92 	.word	0x000dad92
   d4c84:	000dadb0 	.word	0x000dadb0
   d4c88:	000dadd1 	.word	0x000dadd1
   d4c8c:	2003e558 	.word	0x2003e558
   d4c90:	2003e458 	.word	0x2003e458
   d4c94:	2003e439 	.word	0x2003e439
   d4c98:	000dadf3 	.word	0x000dadf3
   d4c9c:	2003e4ec 	.word	0x2003e4ec

000d4ca0 <loop>:
{
   d4ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch(state) {
   d4ca2:	4c70      	ldr	r4, [pc, #448]	; (d4e64 <loop+0x1c4>)
   d4ca4:	4e70      	ldr	r6, [pc, #448]	; (d4e68 <loop+0x1c8>)
   d4ca6:	7823      	ldrb	r3, [r4, #0]
   d4ca8:	4d70      	ldr	r5, [pc, #448]	; (d4e6c <loop+0x1cc>)
   d4caa:	3b01      	subs	r3, #1
   d4cac:	2b04      	cmp	r3, #4
   d4cae:	d852      	bhi.n	d4d56 <loop+0xb6>
   d4cb0:	e8df f003 	tbb	[pc, r3]
   d4cb4:	311903b4 	.word	0x311903b4
   d4cb8:	80          	.byte	0x80
   d4cb9:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4cba:	4b6d      	ldr	r3, [pc, #436]	; (d4e70 <loop+0x1d0>)
   d4cbc:	7a5b      	ldrb	r3, [r3, #9]
   d4cbe:	b12b      	cbz	r3, d4ccc <loop+0x2c>
   d4cc0:	4b6c      	ldr	r3, [pc, #432]	; (d4e74 <loop+0x1d4>)
   d4cc2:	781b      	ldrb	r3, [r3, #0]
   d4cc4:	2b02      	cmp	r3, #2
   d4cc6:	d001      	beq.n	d4ccc <loop+0x2c>
   d4cc8:	f7ff fd6a 	bl	d47a0 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   d4ccc:	f002 ffef 	bl	d7cae <_ZN9TimeClass3nowEv>
   d4cd0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4cd4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4cd8:	fb02 0313 	mls	r3, r2, r3, r0
   d4cdc:	2b00      	cmp	r3, #0
   d4cde:	d13a      	bne.n	d4d56 <loop+0xb6>
   d4ce0:	2303      	movs	r3, #3
     state = IDLE_STATE;
   d4ce2:	7023      	strb	r3, [r4, #0]
   d4ce4:	e037      	b.n	d4d56 <loop+0xb6>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ce6:	4b62      	ldr	r3, [pc, #392]	; (d4e70 <loop+0x1d0>)
   d4ce8:	7a5b      	ldrb	r3, [r3, #9]
   d4cea:	b12b      	cbz	r3, d4cf8 <loop+0x58>
   d4cec:	4b61      	ldr	r3, [pc, #388]	; (d4e74 <loop+0x1d4>)
   d4cee:	781b      	ldrb	r3, [r3, #0]
   d4cf0:	2b03      	cmp	r3, #3
   d4cf2:	d001      	beq.n	d4cf8 <loop+0x58>
   d4cf4:	f7ff fd54 	bl	d47a0 <_Z22publishStateTransitionv>
    if (takeMeasurements()) alertsStatus.thresholdCrossedFlag = true;                       // A return of a "true" value indicates that one of the thresholds have been crossed
   d4cf8:	f7ff feba 	bl	d4a70 <_Z16takeMeasurementsv>
   d4cfc:	4601      	mov	r1, r0
   d4cfe:	b128      	cbz	r0, d4d0c <loop+0x6c>
   d4d00:	2301      	movs	r3, #1
   d4d02:	7133      	strb	r3, [r6, #4]
    alertsStatusWriteNeeded = true;
   d4d04:	2301      	movs	r3, #1
   d4d06:	702b      	strb	r3, [r5, #0]
    state = REPORTING_STATE;
   d4d08:	2304      	movs	r3, #4
   d4d0a:	e7ea      	b.n	d4ce2 <loop+0x42>
      alertsStatus.thresholdCrossedFlag = false;
   d4d0c:	7130      	strb	r0, [r6, #4]
      digitalWrite(blueLED,LOW);                                                            // Just in case it was on an on-flash
   d4d0e:	2007      	movs	r0, #7
   d4d10:	f003 f9fb 	bl	d810a <digitalWrite>
   d4d14:	e7f6      	b.n	d4d04 <loop+0x64>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d4d16:	4b56      	ldr	r3, [pc, #344]	; (d4e70 <loop+0x1d0>)
   d4d18:	7a5b      	ldrb	r3, [r3, #9]
   d4d1a:	b12b      	cbz	r3, d4d28 <loop+0x88>
   d4d1c:	4b55      	ldr	r3, [pc, #340]	; (d4e74 <loop+0x1d4>)
   d4d1e:	781b      	ldrb	r3, [r3, #0]
   d4d20:	2b04      	cmp	r3, #4
   d4d22:	d001      	beq.n	d4d28 <loop+0x88>
   d4d24:	f7ff fd3c 	bl	d47a0 <_Z22publishStateTransitionv>
   d4d28:	f001 fe8c 	bl	d6a44 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4d2c:	b168      	cbz	r0, d4d4a <loop+0xaa>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4d2e:	f002 ffcf 	bl	d7cd0 <_ZN9TimeClass4hourEv>
   d4d32:	280c      	cmp	r0, #12
   d4d34:	d105      	bne.n	d4d42 <loop+0xa2>
   d4d36:	f001 fe85 	bl	d6a44 <spark_cloud_flag_connected>
        if (!connected()) {
   d4d3a:	b110      	cbz	r0, d4d42 <loop+0xa2>
        return spark_sync_time(NULL);
   d4d3c:	2000      	movs	r0, #0
   d4d3e:	f001 fea1 	bl	d6a84 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4d42:	f7ff fcdd 	bl	d4700 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4d46:	2305      	movs	r3, #5
   d4d48:	e7cb      	b.n	d4ce2 <loop+0x42>
      state = ERROR_STATE;
   d4d4a:	2301      	movs	r3, #1
   d4d4c:	7023      	strb	r3, [r4, #0]
   d4d4e:	f001 fc99 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4d52:	4b49      	ldr	r3, [pc, #292]	; (d4e78 <loop+0x1d8>)
   d4d54:	6018      	str	r0, [r3, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4d56:	4849      	ldr	r0, [pc, #292]	; (d4e7c <loop+0x1dc>)
   d4d58:	f001 fb5c 	bl	d6414 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4d5c:	4b48      	ldr	r3, [pc, #288]	; (d4e80 <loop+0x1e0>)
   d4d5e:	781b      	ldrb	r3, [r3, #0]
   d4d60:	b10b      	cbz	r3, d4d66 <loop+0xc6>
   d4d62:	f7ff fcbd 	bl	d46e0 <_Z11petWatchdogv>
  if (alertsStatus.thresholdCrossedFlag) blinkLED(blueLED);
   d4d66:	7933      	ldrb	r3, [r6, #4]
   d4d68:	b113      	cbz	r3, d4d70 <loop+0xd0>
   d4d6a:	2007      	movs	r0, #7
   d4d6c:	f7ff fcfe 	bl	d476c <_Z8blinkLEDi>
  if (sysStatusWriteNeeded) {
   d4d70:	4c44      	ldr	r4, [pc, #272]	; (d4e84 <loop+0x1e4>)
   d4d72:	7823      	ldrb	r3, [r4, #0]
   d4d74:	b13b      	cbz	r3, d4d86 <loop+0xe6>
   d4d76:	231c      	movs	r3, #28
   d4d78:	4a3d      	ldr	r2, [pc, #244]	; (d4e70 <loop+0x1d0>)
   d4d7a:	4843      	ldr	r0, [pc, #268]	; (d4e88 <loop+0x1e8>)
   d4d7c:	2101      	movs	r1, #1
   d4d7e:	f000 fc7e 	bl	d567e <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4d82:	2300      	movs	r3, #0
   d4d84:	7023      	strb	r3, [r4, #0]
  if (alertsStatusWriteNeeded) {
   d4d86:	782b      	ldrb	r3, [r5, #0]
   d4d88:	b13b      	cbz	r3, d4d9a <loop+0xfa>
   d4d8a:	2318      	movs	r3, #24
   d4d8c:	4a36      	ldr	r2, [pc, #216]	; (d4e68 <loop+0x1c8>)
   d4d8e:	483e      	ldr	r0, [pc, #248]	; (d4e88 <loop+0x1e8>)
   d4d90:	2150      	movs	r1, #80	; 0x50
   d4d92:	f000 fc74 	bl	d567e <_ZN6MB85RC9writeDataEjPKhj>
    alertsStatusWriteNeeded = false;
   d4d96:	2300      	movs	r3, #0
   d4d98:	702b      	strb	r3, [r5, #0]
  if (sensorDataWriteNeeded) {
   d4d9a:	4c3c      	ldr	r4, [pc, #240]	; (d4e8c <loop+0x1ec>)
   d4d9c:	7823      	ldrb	r3, [r4, #0]
   d4d9e:	b13b      	cbz	r3, d4db0 <loop+0x110>
   d4da0:	2314      	movs	r3, #20
   d4da2:	4a3b      	ldr	r2, [pc, #236]	; (d4e90 <loop+0x1f0>)
   d4da4:	4838      	ldr	r0, [pc, #224]	; (d4e88 <loop+0x1e8>)
   d4da6:	21a0      	movs	r1, #160	; 0xa0
   d4da8:	f000 fc69 	bl	d567e <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4dac:	2300      	movs	r3, #0
   d4dae:	7023      	strb	r3, [r4, #0]
}
   d4db0:	b003      	add	sp, #12
   d4db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4db4:	4b2e      	ldr	r3, [pc, #184]	; (d4e70 <loop+0x1d0>)
   d4db6:	7a5b      	ldrb	r3, [r3, #9]
   d4db8:	b12b      	cbz	r3, d4dc6 <loop+0x126>
   d4dba:	4b2e      	ldr	r3, [pc, #184]	; (d4e74 <loop+0x1d4>)
   d4dbc:	781b      	ldrb	r3, [r3, #0]
   d4dbe:	2b05      	cmp	r3, #5
   d4dc0:	d001      	beq.n	d4dc6 <loop+0x126>
   d4dc2:	f7ff fced 	bl	d47a0 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d4dc6:	4b33      	ldr	r3, [pc, #204]	; (d4e94 <loop+0x1f4>)
   d4dc8:	781b      	ldrb	r3, [r3, #0]
   d4dca:	b953      	cbnz	r3, d4de2 <loop+0x142>
   d4dcc:	f002 ff6f 	bl	d7cae <_ZN9TimeClass3nowEv>
   d4dd0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4dd4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4dd8:	fb02 0313 	mls	r3, r2, r3, r0
   d4ddc:	b10b      	cbz	r3, d4de2 <loop+0x142>
     state = IDLE_STATE;
   d4dde:	2302      	movs	r3, #2
   d4de0:	e77f      	b.n	d4ce2 <loop+0x42>
   d4de2:	f001 fc4f 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d4de6:	4b2c      	ldr	r3, [pc, #176]	; (d4e98 <loop+0x1f8>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	1ac0      	subs	r0, r0, r3
   d4dec:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4df0:	4298      	cmp	r0, r3
   d4df2:	d9b0      	bls.n	d4d56 <loop+0xb6>
   d4df4:	f001 fc46 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
   d4df8:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4dfa:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   d4dfe:	4f1e      	ldr	r7, [pc, #120]	; (d4e78 <loop+0x1d8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4e00:	4b26      	ldr	r3, [pc, #152]	; (d4e9c <loop+0x1fc>)
   d4e02:	4a27      	ldr	r2, [pc, #156]	; (d4ea0 <loop+0x200>)
   d4e04:	781b      	ldrb	r3, [r3, #0]
   d4e06:	4927      	ldr	r1, [pc, #156]	; (d4ea4 <loop+0x204>)
      resetTimeStamp = millis();
   d4e08:	6038      	str	r0, [r7, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4e0a:	4827      	ldr	r0, [pc, #156]	; (d4ea8 <loop+0x208>)
   d4e0c:	f7ff fa66 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d4e10:	2301      	movs	r3, #1
   d4e12:	7023      	strb	r3, [r4, #0]
   d4e14:	f001 fc36 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4e18:	6038      	str	r0, [r7, #0]
   d4e1a:	e79c      	b.n	d4d56 <loop+0xb6>
    if (state != oldState) publishStateTransition();
   d4e1c:	4b15      	ldr	r3, [pc, #84]	; (d4e74 <loop+0x1d4>)
   d4e1e:	781b      	ldrb	r3, [r3, #0]
   d4e20:	2b01      	cmp	r3, #1
   d4e22:	d001      	beq.n	d4e28 <loop+0x188>
   d4e24:	f7ff fcbc 	bl	d47a0 <_Z22publishStateTransitionv>
   d4e28:	f001 fc2c 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4e2c:	4b12      	ldr	r3, [pc, #72]	; (d4e78 <loop+0x1d8>)
   d4e2e:	681b      	ldr	r3, [r3, #0]
   d4e30:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4e34:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4e38:	4283      	cmp	r3, r0
   d4e3a:	d28c      	bcs.n	d4d56 <loop+0xb6>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e3c:	f001 fe02 	bl	d6a44 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d4e40:	b148      	cbz	r0, d4e56 <loop+0x1b6>
   d4e42:	2300      	movs	r3, #0
   d4e44:	f88d 3000 	strb.w	r3, [sp]
   d4e48:	4b14      	ldr	r3, [pc, #80]	; (d4e9c <loop+0x1fc>)
   d4e4a:	4a18      	ldr	r2, [pc, #96]	; (d4eac <loop+0x20c>)
   d4e4c:	781b      	ldrb	r3, [r3, #0]
   d4e4e:	4918      	ldr	r1, [pc, #96]	; (d4eb0 <loop+0x210>)
   d4e50:	4815      	ldr	r0, [pc, #84]	; (d4ea8 <loop+0x208>)
   d4e52:	f7ff fa43 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4e56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4e5a:	f001 feeb 	bl	d6c34 <delay>
      System.reset();
   d4e5e:	f002 fdab 	bl	d79b8 <_ZN11SystemClass5resetEv>
   d4e62:	e778      	b.n	d4d56 <loop+0xb6>
   d4e64:	2003e568 	.word	0x2003e568
   d4e68:	2003e440 	.word	0x2003e440
   d4e6c:	2003e458 	.word	0x2003e458
   d4e70:	2003e56c 	.word	0x2003e56c
   d4e74:	2003e4e8 	.word	0x2003e4e8
   d4e78:	2003e524 	.word	0x2003e524
   d4e7c:	2003e528 	.word	0x2003e528
   d4e80:	2003e5c9 	.word	0x2003e5c9
   d4e84:	2003e588 	.word	0x2003e588
   d4e88:	2003e47c 	.word	0x2003e47c
   d4e8c:	2003e558 	.word	0x2003e558
   d4e90:	2003e544 	.word	0x2003e544
   d4e94:	2003e479 	.word	0x2003e479
   d4e98:	2003e5cc 	.word	0x2003e5cc
   d4e9c:	2003e439 	.word	0x2003e439
   d4ea0:	000db43c 	.word	0x000db43c
   d4ea4:	000dadfa 	.word	0x000dadfa
   d4ea8:	2003e4ec 	.word	0x2003e4ec
   d4eac:	000dae13 	.word	0x000dae13
   d4eb0:	000dab86 	.word	0x000dab86

000d4eb4 <setup>:
{
   d4eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4eb6:	2100      	movs	r1, #0
{
   d4eb8:	b0bb      	sub	sp, #236	; 0xec
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4eba:	2008      	movs	r0, #8
   d4ebc:	f003 f914 	bl	d80e8 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4ec0:	2101      	movs	r1, #1
   d4ec2:	2005      	movs	r0, #5
   d4ec4:	f003 f910 	bl	d80e8 <pinMode>
  pinMode(blueLED, OUTPUT);                                                                 // declare the Blue LED Pin as an output
   d4ec8:	2101      	movs	r1, #1
   d4eca:	2007      	movs	r0, #7
   d4ecc:	f003 f90c 	bl	d80e8 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d4ed0:	f7ff fc06 	bl	d46e0 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	9300      	str	r3, [sp, #0]
   d4ed8:	2201      	movs	r2, #1
   d4eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4ede:	4988      	ldr	r1, [pc, #544]	; (d5100 <setup+0x24c>)
   d4ee0:	2008      	movs	r0, #8
   d4ee2:	f002 faef 	bl	d74c4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4ee6:	4b87      	ldr	r3, [pc, #540]	; (d5104 <setup+0x250>)
   d4ee8:	aa0a      	add	r2, sp, #40	; 0x28
   d4eea:	f103 0510 	add.w	r5, r3, #16
   d4eee:	4616      	mov	r6, r2
   d4ef0:	6818      	ldr	r0, [r3, #0]
   d4ef2:	6859      	ldr	r1, [r3, #4]
   d4ef4:	4614      	mov	r4, r2
   d4ef6:	c403      	stmia	r4!, {r0, r1}
   d4ef8:	3308      	adds	r3, #8
   d4efa:	42ab      	cmp	r3, r5
   d4efc:	4622      	mov	r2, r4
   d4efe:	d1f7      	bne.n	d4ef0 <setup+0x3c>
   d4f00:	8819      	ldrh	r1, [r3, #0]
   d4f02:	789b      	ldrb	r3, [r3, #2]
   d4f04:	70a3      	strb	r3, [r4, #2]
  state = INITIALIZATION_STATE;
   d4f06:	4f80      	ldr	r7, [pc, #512]	; (d5108 <setup+0x254>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4f08:	8021      	strh	r1, [r4, #0]
   d4f0a:	222d      	movs	r2, #45	; 0x2d
   d4f0c:	2100      	movs	r1, #0
   d4f0e:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   d4f12:	2400      	movs	r4, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4f14:	f003 fece 	bl	d8cb4 <memset>
    static String deviceID(void) { return spark_deviceID(); }
   d4f18:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d4f1a:	703c      	strb	r4, [r7, #0]
   d4f1c:	f001 fd9a 	bl	d6a54 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4f20:	4623      	mov	r3, r4
   d4f22:	227d      	movs	r2, #125	; 0x7d
   d4f24:	a91a      	add	r1, sp, #104	; 0x68
   d4f26:	a802      	add	r0, sp, #8
   d4f28:	f002 fd0b 	bl	d7942 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4f2c:	4623      	mov	r3, r4
   d4f2e:	4622      	mov	r2, r4
   d4f30:	e9cd 4400 	strd	r4, r4, [sp]
   d4f34:	4975      	ldr	r1, [pc, #468]	; (d510c <setup+0x258>)
   d4f36:	4d76      	ldr	r5, [pc, #472]	; (d5110 <setup+0x25c>)
   d4f38:	a81a      	add	r0, sp, #104	; 0x68
   d4f3a:	f001 fd9b 	bl	d6a74 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d4f3e:	4975      	ldr	r1, [pc, #468]	; (d5114 <setup+0x260>)
   d4f40:	4875      	ldr	r0, [pc, #468]	; (d5118 <setup+0x264>)
   d4f42:	f7ff f936 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f46:	4975      	ldr	r1, [pc, #468]	; (d511c <setup+0x268>)
   d4f48:	4875      	ldr	r0, [pc, #468]	; (d5120 <setup+0x26c>)
   d4f4a:	f7ff f932 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f4e:	4975      	ldr	r1, [pc, #468]	; (d5124 <setup+0x270>)
   d4f50:	4875      	ldr	r0, [pc, #468]	; (d5128 <setup+0x274>)
   d4f52:	f7ff f92e 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f56:	4975      	ldr	r1, [pc, #468]	; (d512c <setup+0x278>)
   d4f58:	4875      	ldr	r0, [pc, #468]	; (d5130 <setup+0x27c>)
   d4f5a:	f7ff f92a 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f5e:	4975      	ldr	r1, [pc, #468]	; (d5134 <setup+0x280>)
   d4f60:	4875      	ldr	r0, [pc, #468]	; (d5138 <setup+0x284>)
   d4f62:	f7ff f926 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f66:	4975      	ldr	r1, [pc, #468]	; (d513c <setup+0x288>)
   d4f68:	4875      	ldr	r0, [pc, #468]	; (d5140 <setup+0x28c>)
   d4f6a:	f7ff f922 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f6e:	4975      	ldr	r1, [pc, #468]	; (d5144 <setup+0x290>)
   d4f70:	4875      	ldr	r0, [pc, #468]	; (d5148 <setup+0x294>)
   d4f72:	f7ff f91e 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f76:	4975      	ldr	r1, [pc, #468]	; (d514c <setup+0x298>)
   d4f78:	4875      	ldr	r0, [pc, #468]	; (d5150 <setup+0x29c>)
   d4f7a:	f7ff f91a 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4f7e:	4975      	ldr	r1, [pc, #468]	; (d5154 <setup+0x2a0>)
   d4f80:	4875      	ldr	r0, [pc, #468]	; (d5158 <setup+0x2a4>)
   d4f82:	f7ff f916 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4f86:	4623      	mov	r3, r4
   d4f88:	4974      	ldr	r1, [pc, #464]	; (d515c <setup+0x2a8>)
   d4f8a:	4875      	ldr	r0, [pc, #468]	; (d5160 <setup+0x2ac>)
   d4f8c:	2202      	movs	r2, #2
   d4f8e:	f001 fd41 	bl	d6a14 <spark_variable>
   d4f92:	4623      	mov	r3, r4
   d4f94:	2201      	movs	r2, #1
   d4f96:	4973      	ldr	r1, [pc, #460]	; (d5164 <setup+0x2b0>)
   d4f98:	4873      	ldr	r0, [pc, #460]	; (d5168 <setup+0x2b4>)
   d4f9a:	f001 fd3b 	bl	d6a14 <spark_variable>
        return _function(name, args...);
   d4f9e:	4973      	ldr	r1, [pc, #460]	; (d516c <setup+0x2b8>)
   d4fa0:	4873      	ldr	r0, [pc, #460]	; (d5170 <setup+0x2bc>)
   d4fa2:	f7ff f971 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fa6:	4973      	ldr	r1, [pc, #460]	; (d5174 <setup+0x2c0>)
   d4fa8:	4873      	ldr	r0, [pc, #460]	; (d5178 <setup+0x2c4>)
   d4faa:	f7ff f96d 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fae:	4973      	ldr	r1, [pc, #460]	; (d517c <setup+0x2c8>)
   d4fb0:	4873      	ldr	r0, [pc, #460]	; (d5180 <setup+0x2cc>)
   d4fb2:	f7ff f969 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fb6:	4973      	ldr	r1, [pc, #460]	; (d5184 <setup+0x2d0>)
   d4fb8:	4873      	ldr	r0, [pc, #460]	; (d5188 <setup+0x2d4>)
   d4fba:	f7ff f965 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fbe:	4973      	ldr	r1, [pc, #460]	; (d518c <setup+0x2d8>)
   d4fc0:	4873      	ldr	r0, [pc, #460]	; (d5190 <setup+0x2dc>)
   d4fc2:	f7ff f961 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fc6:	4973      	ldr	r1, [pc, #460]	; (d5194 <setup+0x2e0>)
   d4fc8:	4873      	ldr	r0, [pc, #460]	; (d5198 <setup+0x2e4>)
   d4fca:	f7ff f95d 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fce:	4973      	ldr	r1, [pc, #460]	; (d519c <setup+0x2e8>)
   d4fd0:	4873      	ldr	r0, [pc, #460]	; (d51a0 <setup+0x2ec>)
   d4fd2:	f7ff f959 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4fd6:	4973      	ldr	r1, [pc, #460]	; (d51a4 <setup+0x2f0>)
   d4fd8:	4863      	ldr	r0, [pc, #396]	; (d5168 <setup+0x2b4>)
   d4fda:	f7ff f955 	bl	d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d4fde:	4872      	ldr	r0, [pc, #456]	; (d51a8 <setup+0x2f4>)
   d4fe0:	f001 f912 	bl	d6208 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d4fe4:	4621      	mov	r1, r4
   d4fe6:	4870      	ldr	r0, [pc, #448]	; (d51a8 <setup+0x2f4>)
   d4fe8:	f001 fa4b 	bl	d6482 <_ZN8MCP7941010clearAlarmEi>
  publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4fec:	f002 fe5f 	bl	d7cae <_ZN9TimeClass3nowEv>
   d4ff0:	4602      	mov	r2, r0
   d4ff2:	17c3      	asrs	r3, r0, #31
   d4ff4:	a806      	add	r0, sp, #24
   d4ff6:	f002 fd57 	bl	d7aa8 <_ZN9TimeClass7timeStrEx>
   d4ffa:	f88d 4000 	strb.w	r4, [sp]
   d4ffe:	782b      	ldrb	r3, [r5, #0]
   d5000:	9a06      	ldr	r2, [sp, #24]
   d5002:	496a      	ldr	r1, [pc, #424]	; (d51ac <setup+0x2f8>)
   d5004:	486a      	ldr	r0, [pc, #424]	; (d51b0 <setup+0x2fc>)
   d5006:	f7ff f969 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d500a:	a806      	add	r0, sp, #24
   d500c:	f002 fc0e 	bl	d782c <_ZN6StringD1Ev>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   d5010:	4868      	ldr	r0, [pc, #416]	; (d51b4 <setup+0x300>)
   d5012:	2144      	movs	r1, #68	; 0x44
   d5014:	f000 f9c5 	bl	d53a2 <_ZN14Adafruit_SHT315beginEh>
   d5018:	463c      	mov	r4, r7
   d501a:	462f      	mov	r7, r5
   d501c:	b948      	cbnz	r0, d5032 <setup+0x17e>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d501e:	4966      	ldr	r1, [pc, #408]	; (d51b8 <setup+0x304>)
   d5020:	4630      	mov	r0, r6
   d5022:	f003 fe7d 	bl	d8d20 <strcpy>
    state = ERROR_STATE;
   d5026:	2301      	movs	r3, #1
   d5028:	7023      	strb	r3, [r4, #0]
   d502a:	f001 fb2b 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d502e:	4b63      	ldr	r3, [pc, #396]	; (d51bc <setup+0x308>)
   d5030:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   d5032:	4863      	ldr	r0, [pc, #396]	; (d51c0 <setup+0x30c>)
   d5034:	f000 fa96 	bl	d5564 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5038:	2301      	movs	r3, #1
   d503a:	4861      	ldr	r0, [pc, #388]	; (d51c0 <setup+0x30c>)
   d503c:	aa06      	add	r2, sp, #24
   d503e:	2100      	movs	r1, #0
   d5040:	f000 fad2 	bl	d55e8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d5044:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5048:	2b05      	cmp	r3, #5
   d504a:	d026      	beq.n	d509a <setup+0x1e6>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d504c:	485c      	ldr	r0, [pc, #368]	; (d51c0 <setup+0x30c>)
   d504e:	f000 fa93 	bl	d5578 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5052:	4a5c      	ldr	r2, [pc, #368]	; (d51c4 <setup+0x310>)
   d5054:	485a      	ldr	r0, [pc, #360]	; (d51c0 <setup+0x30c>)
   d5056:	2304      	movs	r3, #4
   d5058:	2100      	movs	r1, #0
   d505a:	f000 fb10 	bl	d567e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d505e:	2301      	movs	r3, #1
   d5060:	4857      	ldr	r0, [pc, #348]	; (d51c0 <setup+0x30c>)
   d5062:	aa06      	add	r2, sp, #24
   d5064:	2100      	movs	r1, #0
   d5066:	f000 fabf 	bl	d55e8 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d506a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d506e:	2b05      	cmp	r3, #5
   d5070:	d00e      	beq.n	d5090 <setup+0x1dc>
   d5072:	2301      	movs	r3, #1
   d5074:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d5076:	4d54      	ldr	r5, [pc, #336]	; (d51c8 <setup+0x314>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d5078:	f7ff fab2 	bl	d45e0 <_Z17checkSystemValuesv>
  checkAlertsValues();                                                                      // Make sure that Alerts values are all in a valid range
   d507c:	f7ff fada 	bl	d4634 <_Z17checkAlertsValuesv>
  if (sysStatus.thirdPartySim) {
   d5080:	786b      	ldrb	r3, [r5, #1]
   d5082:	b32b      	cbz	r3, d50d0 <setup+0x21c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5084:	f001 fcde 	bl	d6a44 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   d5088:	b9a0      	cbnz	r0, d50b4 <setup+0x200>
            spark_process();
   d508a:	f001 fcd3 	bl	d6a34 <spark_process>
        while (_while() && !_condition()) {
   d508e:	e7f9      	b.n	d5084 <setup+0x1d0>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d5090:	f7ff fa48 	bl	d4524 <_Z18loadSystemDefaultsv>
      loadAlertDefaults();
   d5094:	f7ff fa72 	bl	d457c <_Z17loadAlertDefaultsv>
   d5098:	e7ed      	b.n	d5076 <setup+0x1c2>
   d509a:	4a4b      	ldr	r2, [pc, #300]	; (d51c8 <setup+0x314>)
   d509c:	4848      	ldr	r0, [pc, #288]	; (d51c0 <setup+0x30c>)
   d509e:	231c      	movs	r3, #28
   d50a0:	2101      	movs	r1, #1
   d50a2:	f000 faa1 	bl	d55e8 <_ZN6MB85RC8readDataEjPhj>
   d50a6:	4a49      	ldr	r2, [pc, #292]	; (d51cc <setup+0x318>)
   d50a8:	4845      	ldr	r0, [pc, #276]	; (d51c0 <setup+0x30c>)
   d50aa:	2318      	movs	r3, #24
   d50ac:	2150      	movs	r1, #80	; 0x50
   d50ae:	f000 fa9b 	bl	d55e8 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d50b2:	e7e0      	b.n	d5076 <setup+0x1c2>
   d50b4:	f001 fcc6 	bl	d6a44 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d50b8:	6868      	ldr	r0, [r5, #4]
   d50ba:	f7ff f8eb 	bl	d4294 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d50be:	686b      	ldr	r3, [r5, #4]
   d50c0:	4843      	ldr	r0, [pc, #268]	; (d51d0 <setup+0x31c>)
   d50c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d50c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d50ca:	4359      	muls	r1, r3
   d50cc:	f7ff f8f5 	bl	d42ba <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d50d0:	f7ff fcce 	bl	d4a70 <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                   // For checking values of each device
   d50d4:	f7ff fb96 	bl	d4804 <_Z20updateThresholdValuev>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d50d8:	7a6b      	ldrb	r3, [r5, #9]
   d50da:	b143      	cbz	r3, d50ee <setup+0x23a>
   d50dc:	2300      	movs	r3, #0
   d50de:	f88d 3000 	strb.w	r3, [sp]
   d50e2:	783b      	ldrb	r3, [r7, #0]
   d50e4:	493b      	ldr	r1, [pc, #236]	; (d51d4 <setup+0x320>)
   d50e6:	4832      	ldr	r0, [pc, #200]	; (d51b0 <setup+0x2fc>)
   d50e8:	4632      	mov	r2, r6
   d50ea:	f7ff f8f7 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d50ee:	7823      	ldrb	r3, [r4, #0]
   d50f0:	b90b      	cbnz	r3, d50f6 <setup+0x242>
   d50f2:	2302      	movs	r3, #2
   d50f4:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d50f6:	a802      	add	r0, sp, #8
   d50f8:	f002 fb98 	bl	d782c <_ZN6StringD1Ev>
}
   d50fc:	b03b      	add	sp, #236	; 0xec
   d50fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5100:	000d40c9 	.word	0x000d40c9
   d5104:	000daff0 	.word	0x000daff0
   d5108:	2003e568 	.word	0x2003e568
   d510c:	000d42f9 	.word	0x000d42f9
   d5110:	2003e439 	.word	0x2003e439
   d5114:	000db030 	.word	0x000db030
   d5118:	000dae27 	.word	0x000dae27
   d511c:	2003e589 	.word	0x2003e589
   d5120:	000dae2f 	.word	0x000dae2f
   d5124:	2003e48c 	.word	0x2003e48c
   d5128:	000dae3b 	.word	0x000dae3b
   d512c:	2003e5b1 	.word	0x2003e5b1
   d5130:	000dae44 	.word	0x000dae44
   d5134:	2003e4d0 	.word	0x2003e4d0
   d5138:	000dae56 	.word	0x000dae56
   d513c:	2003e599 	.word	0x2003e599
   d5140:	000dae68 	.word	0x000dae68
   d5144:	2003e4b8 	.word	0x2003e4b8
   d5148:	000dae77 	.word	0x000dae77
   d514c:	2003e469 	.word	0x2003e469
   d5150:	000dae86 	.word	0x000dae86
   d5154:	2003e459 	.word	0x2003e459
   d5158:	000dae8e 	.word	0x000dae8e
   d515c:	2003e570 	.word	0x2003e570
   d5160:	000dae9d 	.word	0x000dae9d
   d5164:	2003e56d 	.word	0x2003e56d
   d5168:	000dabbb 	.word	0x000dabbb
   d516c:	000d40f1 	.word	0x000d40f1
   d5170:	000daeac 	.word	0x000daeac
   d5174:	000d438d 	.word	0x000d438d
   d5178:	000daeb8 	.word	0x000daeb8
   d517c:	000d488d 	.word	0x000d488d
   d5180:	000daec5 	.word	0x000daec5
   d5184:	000d48dd 	.word	0x000d48dd
   d5188:	000daed6 	.word	0x000daed6
   d518c:	000d497d 	.word	0x000d497d
   d5190:	000daee7 	.word	0x000daee7
   d5194:	000d492d 	.word	0x000d492d
   d5198:	000daefc 	.word	0x000daefc
   d519c:	000d44a9 	.word	0x000d44a9
   d51a0:	000dabf6 	.word	0x000dabf6
   d51a4:	000d440d 	.word	0x000d440d
   d51a8:	2003e528 	.word	0x2003e528
   d51ac:	000daf10 	.word	0x000daf10
   d51b0:	2003e4ec 	.word	0x2003e4ec
   d51b4:	2003e55c 	.word	0x2003e55c
   d51b8:	000daf15 	.word	0x000daf15
   d51bc:	2003e524 	.word	0x2003e524
   d51c0:	2003e47c 	.word	0x2003e47c
   d51c4:	000db038 	.word	0x000db038
   d51c8:	2003e56c 	.word	0x2003e56c
   d51cc:	2003e440 	.word	0x2003e440
   d51d0:	2003e49c 	.word	0x2003e49c
   d51d4:	000daf32 	.word	0x000daf32

000d51d8 <_GLOBAL__sub_I___appProductID>:
}
   d51d8:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d51da:	4b47      	ldr	r3, [pc, #284]	; (d52f8 <_GLOBAL__sub_I___appProductID+0x120>)
              error_(SYSTEM_ERROR_NONE) {
   d51dc:	4c47      	ldr	r4, [pc, #284]	; (d52fc <_GLOBAL__sub_I___appProductID+0x124>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d51de:	4e48      	ldr	r6, [pc, #288]	; (d5300 <_GLOBAL__sub_I___appProductID+0x128>)
   d51e0:	2701      	movs	r7, #1
   d51e2:	701f      	strb	r7, [r3, #0]
   d51e4:	4b47      	ldr	r3, [pc, #284]	; (d5304 <_GLOBAL__sub_I___appProductID+0x12c>)
   d51e6:	2202      	movs	r2, #2
}
   d51e8:	b089      	sub	sp, #36	; 0x24
   d51ea:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d51ec:	f002 ff26 	bl	d803c <spark_protocol_instance>
   d51f0:	2300      	movs	r3, #0
   d51f2:	461a      	mov	r2, r3
   d51f4:	f243 0171 	movw	r1, #12401	; 0x3071
   d51f8:	f002 ff28 	bl	d804c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d51fc:	f002 ff1e 	bl	d803c <spark_protocol_instance>
   d5200:	2300      	movs	r3, #0
   d5202:	461a      	mov	r2, r3
   d5204:	210f      	movs	r1, #15
   d5206:	f002 ff29 	bl	d805c <spark_protocol_set_product_firmware_version>
   d520a:	2500      	movs	r5, #0
    SleepResult() {}
   d520c:	4b3e      	ldr	r3, [pc, #248]	; (d5308 <_GLOBAL__sub_I___appProductID+0x130>)
   d520e:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5210:	6025      	str	r5, [r4, #0]
   d5212:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d5214:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d5216:	4638      	mov	r0, r7
   d5218:	f001 fba6 	bl	d6968 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d521c:	4632      	mov	r2, r6
   d521e:	493b      	ldr	r1, [pc, #236]	; (d530c <_GLOBAL__sub_I___appProductID+0x134>)
   d5220:	4620      	mov	r0, r4
   d5222:	f002 ffdf 	bl	d81e4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5226:	4629      	mov	r1, r5
   d5228:	4638      	mov	r0, r7
   d522a:	f001 fbad 	bl	d6988 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d522e:	4639      	mov	r1, r7
   d5230:	2004      	movs	r0, #4
   d5232:	f001 fa07 	bl	d6644 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d5236:	4836      	ldr	r0, [pc, #216]	; (d5310 <_GLOBAL__sub_I___appProductID+0x138>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5238:	4c36      	ldr	r4, [pc, #216]	; (d5314 <_GLOBAL__sub_I___appProductID+0x13c>)
   d523a:	f000 f88f 	bl	d535c <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d523e:	f002 ffa9 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5242:	462b      	mov	r3, r5
   d5244:	4601      	mov	r1, r0
   d5246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d524a:	4620      	mov	r0, r4
   d524c:	f000 f980 	bl	d5550 <_ZN6MB85RCC1ER7TwoWireji>
   d5250:	4b31      	ldr	r3, [pc, #196]	; (d5318 <_GLOBAL__sub_I___appProductID+0x140>)
   d5252:	6023      	str	r3, [r4, #0]
   d5254:	4632      	mov	r2, r6
   d5256:	4931      	ldr	r1, [pc, #196]	; (d531c <_GLOBAL__sub_I___appProductID+0x144>)
   d5258:	4620      	mov	r0, r4
   d525a:	f002 ffc3 	bl	d81e4 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d525e:	f002 ff99 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5262:	4c2f      	ldr	r4, [pc, #188]	; (d5320 <_GLOBAL__sub_I___appProductID+0x148>)
   d5264:	4601      	mov	r1, r0
   d5266:	4620      	mov	r0, r4
   d5268:	f000 fed6 	bl	d6018 <_ZN8MCP79410C1ER7TwoWire>
   d526c:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d526e:	4c2d      	ldr	r4, [pc, #180]	; (d5324 <_GLOBAL__sub_I___appProductID+0x14c>)
   d5270:	492d      	ldr	r1, [pc, #180]	; (d5328 <_GLOBAL__sub_I___appProductID+0x150>)
   d5272:	4632      	mov	r2, r6
   d5274:	f002 ffb6 	bl	d81e4 <__aeabi_atexit>
   d5278:	492c      	ldr	r1, [pc, #176]	; (d532c <_GLOBAL__sub_I___appProductID+0x154>)
   d527a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d527e:	4620      	mov	r0, r4
   d5280:	f000 fc66 	bl	d5b50 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5284:	4b2a      	ldr	r3, [pc, #168]	; (d5330 <_GLOBAL__sub_I___appProductID+0x158>)
   d5286:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5288:	4632      	mov	r2, r6
   d528a:	492a      	ldr	r1, [pc, #168]	; (d5334 <_GLOBAL__sub_I___appProductID+0x15c>)
   d528c:	4620      	mov	r0, r4
   d528e:	f002 ffa9 	bl	d81e4 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5292:	4b29      	ldr	r3, [pc, #164]	; (d5338 <_GLOBAL__sub_I___appProductID+0x160>)
   d5294:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5296:	af04      	add	r7, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5298:	4c28      	ldr	r4, [pc, #160]	; (d533c <_GLOBAL__sub_I___appProductID+0x164>)
   d529a:	4b29      	ldr	r3, [pc, #164]	; (d5340 <_GLOBAL__sub_I___appProductID+0x168>)
   d529c:	6023      	str	r3, [r4, #0]
   d529e:	e897 0003 	ldmia.w	r7, {r0, r1}
   d52a2:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d52a4:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52a8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d52ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d52b0:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d52b4:	e892 0003 	ldmia.w	r2, {r0, r1}
   d52b8:	e883 0003 	stmia.w	r3, {r0, r1}
   d52bc:	4b21      	ldr	r3, [pc, #132]	; (d5344 <_GLOBAL__sub_I___appProductID+0x16c>)
   d52be:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d52c0:	69a3      	ldr	r3, [r4, #24]
   d52c2:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d52c4:	4b20      	ldr	r3, [pc, #128]	; (d5348 <_GLOBAL__sub_I___appProductID+0x170>)
   d52c6:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d52c8:	4a20      	ldr	r2, [pc, #128]	; (d534c <_GLOBAL__sub_I___appProductID+0x174>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d52ca:	7125      	strb	r5, [r4, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d52cc:	4623      	mov	r3, r4
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d52ce:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d52d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d52d4:	e9cd 5500 	strd	r5, r5, [sp]
   d52d8:	f104 0008 	add.w	r0, r4, #8
      __a = _GLIBCXX_MOVE(__b);
   d52dc:	9506      	str	r5, [sp, #24]
   d52de:	f001 f959 	bl	d6594 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d52e2:	4638      	mov	r0, r7
   d52e4:	f7fe ff92 	bl	d420c <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d52e8:	4919      	ldr	r1, [pc, #100]	; (d5350 <_GLOBAL__sub_I___appProductID+0x178>)
   d52ea:	4632      	mov	r2, r6
   d52ec:	4620      	mov	r0, r4
   d52ee:	f002 ff79 	bl	d81e4 <__aeabi_atexit>
}
   d52f2:	b009      	add	sp, #36	; 0x24
   d52f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52f6:	bf00      	nop
   d52f8:	2003e439 	.word	0x2003e439
   d52fc:	2003e42c 	.word	0x2003e42c
   d5300:	2003e428 	.word	0x2003e428
   d5304:	2003e438 	.word	0x2003e438
   d5308:	ffff0000 	.word	0xffff0000
   d530c:	000d41a3 	.word	0x000d41a3
   d5310:	2003e55c 	.word	0x2003e55c
   d5314:	2003e47c 	.word	0x2003e47c
   d5318:	000daf80 	.word	0x000daf80
   d531c:	000d4141 	.word	0x000d4141
   d5320:	2003e528 	.word	0x2003e528
   d5324:	2003e4ec 	.word	0x2003e4ec
   d5328:	000d5da3 	.word	0x000d5da3
   d532c:	2003f400 	.word	0x2003f400
   d5330:	000daf58 	.word	0x000daf58
   d5334:	000d4119 	.word	0x000d4119
   d5338:	000d41bd 	.word	0x000d41bd
   d533c:	2003e49c 	.word	0x2003e49c
   d5340:	000daf44 	.word	0x000daf44
   d5344:	000d40d9 	.word	0x000d40d9
   d5348:	000d40d5 	.word	0x000d40d5
   d534c:	000d4169 	.word	0x000d4169
   d5350:	000d4221 	.word	0x000d4221

000d5354 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5354:	6803      	ldr	r3, [r0, #0]
   d5356:	b2c9      	uxtb	r1, r1
   d5358:	689b      	ldr	r3, [r3, #8]
   d535a:	4718      	bx	r3

000d535c <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d535c:	4770      	bx	lr

000d535e <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d535e:	b538      	push	{r3, r4, r5, lr}
   d5360:	4605      	mov	r5, r0
   d5362:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5364:	f002 ff16 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5368:	7829      	ldrb	r1, [r5, #0]
   d536a:	f002 f889 	bl	d7480 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d536e:	f002 ff11 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5372:	0a21      	lsrs	r1, r4, #8
   d5374:	f7ff ffee 	bl	d5354 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5378:	f002 ff0c 	bl	d8194 <_Z19__fetch_global_Wirev>
   d537c:	b2e1      	uxtb	r1, r4
   d537e:	f7ff ffe9 	bl	d5354 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5382:	f002 ff07 	bl	d8194 <_Z19__fetch_global_Wirev>
}
   d5386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d538a:	f002 b884 	b.w	d7496 <_ZN7TwoWire15endTransmissionEv>

000d538e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d538e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5390:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5394:	f7ff ffe3 	bl	d535e <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d5398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d539c:	200a      	movs	r0, #10
   d539e:	f001 bc49 	b.w	d6c34 <delay>

000d53a2 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d53a2:	b538      	push	{r3, r4, r5, lr}
   d53a4:	4604      	mov	r4, r0
   d53a6:	460d      	mov	r5, r1
  Wire.begin();
   d53a8:	f002 fef4 	bl	d8194 <_Z19__fetch_global_Wirev>
   d53ac:	f002 f836 	bl	d741c <_ZN7TwoWire5beginEv>
  reset();
   d53b0:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d53b2:	7025      	strb	r5, [r4, #0]
  reset();
   d53b4:	f7ff ffeb 	bl	d538e <_ZN14Adafruit_SHT315resetEv>
}
   d53b8:	2001      	movs	r0, #1
   d53ba:	bd38      	pop	{r3, r4, r5, pc}

000d53bc <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d53bc:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d53be:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d53c0:	4291      	cmp	r1, r2
   d53c2:	d00e      	beq.n	d53e2 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d53c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d53c8:	4058      	eors	r0, r3
   d53ca:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d53cc:	f010 0f80 	tst.w	r0, #128	; 0x80
   d53d0:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d53d4:	bf18      	it	ne
   d53d6:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d53da:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d53dc:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d53de:	d1f5      	bne.n	d53cc <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d53e0:	e7ee      	b.n	d53c0 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d53e2:	4770      	bx	lr
   d53e4:	0000      	movs	r0, r0
	...

000d53e8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d53e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d53ea:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d53ee:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d53f0:	f7ff ffb5 	bl	d535e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d53f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d53f8:	f001 fc1c 	bl	d6c34 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d53fc:	f002 feca 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5400:	7829      	ldrb	r1, [r5, #0]
   d5402:	2206      	movs	r2, #6
   d5404:	f002 f839 	bl	d747a <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5408:	f002 fec4 	bl	d8194 <_Z19__fetch_global_Wirev>
   d540c:	6803      	ldr	r3, [r0, #0]
   d540e:	691b      	ldr	r3, [r3, #16]
   d5410:	4798      	blx	r3
   d5412:	2806      	cmp	r0, #6
   d5414:	d14b      	bne.n	d54ae <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d5416:	466e      	mov	r6, sp
   d5418:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d541a:	f002 febb 	bl	d8194 <_Z19__fetch_global_Wirev>
   d541e:	6803      	ldr	r3, [r0, #0]
   d5420:	695b      	ldr	r3, [r3, #20]
   d5422:	4798      	blx	r3
   d5424:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d5426:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d542a:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d542e:	4669      	mov	r1, sp
   d5430:	d1f3      	bne.n	d541a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5432:	2202      	movs	r2, #2
   d5434:	4628      	mov	r0, r5
   d5436:	f7ff ffc1 	bl	d53bc <_ZN14Adafruit_SHT314crc8EPKhi>
   d543a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d543e:	4286      	cmp	r6, r0
   d5440:	d135      	bne.n	d54ae <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5442:	2202      	movs	r2, #2
   d5444:	f10d 0103 	add.w	r1, sp, #3
   d5448:	4628      	mov	r0, r5
   d544a:	f7ff ffb7 	bl	d53bc <_ZN14Adafruit_SHT314crc8EPKhi>
   d544e:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d5452:	4286      	cmp	r6, r0
   d5454:	d12b      	bne.n	d54ae <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d5456:	f8bd 0000 	ldrh.w	r0, [sp]
   d545a:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d545e:	ba40      	rev16	r0, r0
   d5460:	b280      	uxth	r0, r0
   d5462:	f003 f80f 	bl	d8484 <__aeabi_ui2d>
  stemp *= 175;
   d5466:	a318      	add	r3, pc, #96	; (adr r3, d54c8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5468:	e9d3 2300 	ldrd	r2, r3, [r3]
   d546c:	f003 f884 	bl	d8578 <__aeabi_dmul>
  stemp /= 0xffff;
   d5470:	a311      	add	r3, pc, #68	; (adr r3, d54b8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5472:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5476:	f003 f9a9 	bl	d87cc <__aeabi_ddiv>
  stemp = -45 + stemp;
   d547a:	4b11      	ldr	r3, [pc, #68]	; (d54c0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d547c:	2200      	movs	r2, #0
   d547e:	f002 fec3 	bl	d8208 <__aeabi_dsub>
  temp = stemp;
   d5482:	f003 fb33 	bl	d8aec <__aeabi_d2f>
   d5486:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d5488:	ba60      	rev16	r0, r4
   d548a:	b280      	uxth	r0, r0
   d548c:	f002 fffa 	bl	d8484 <__aeabi_ui2d>
  shum *= 100;
   d5490:	4b0c      	ldr	r3, [pc, #48]	; (d54c4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d5492:	2200      	movs	r2, #0
   d5494:	f003 f870 	bl	d8578 <__aeabi_dmul>
  shum /= 0xFFFF;
   d5498:	a307      	add	r3, pc, #28	; (adr r3, d54b8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d549a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d549e:	f003 f995 	bl	d87cc <__aeabi_ddiv>
  humidity = shum;
   d54a2:	f003 fb23 	bl	d8aec <__aeabi_d2f>
   d54a6:	6068      	str	r0, [r5, #4]
  return true;
   d54a8:	2001      	movs	r0, #1
}
   d54aa:	b002      	add	sp, #8
   d54ac:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d54ae:	2000      	movs	r0, #0
   d54b0:	e7fb      	b.n	d54aa <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d54b2:	bf00      	nop
   d54b4:	f3af 8000 	nop.w
   d54b8:	00000000 	.word	0x00000000
   d54bc:	40efffe0 	.word	0x40efffe0
   d54c0:	40468000 	.word	0x40468000
   d54c4:	40590000 	.word	0x40590000
   d54c8:	00000000 	.word	0x00000000
   d54cc:	4065e000 	.word	0x4065e000

000d54d0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d54d4:	f7ff ff88 	bl	d53e8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d54d8:	b110      	cbz	r0, d54e0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d54da:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d54de:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d54e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d54e8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d54e4:	e7fb      	b.n	d54de <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d54e6:	bf00      	nop
   d54e8:	7fc00000 	.word	0x7fc00000

000d54ec <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d54ec:	b510      	push	{r4, lr}
   d54ee:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d54f0:	f7ff ff7a 	bl	d53e8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d54f4:	b110      	cbz	r0, d54fc <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d54f6:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d54fa:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d54fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5504 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d5500:	e7fb      	b.n	d54fa <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d5502:	bf00      	nop
   d5504:	7fc00000 	.word	0x7fc00000

000d5508 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5508:	4770      	bx	lr

000d550a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d550a:	b510      	push	{r4, lr}
}
   d550c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d550e:	4604      	mov	r4, r0
}
   d5510:	f002 fe6d 	bl	d81ee <_ZdlPvj>
   d5514:	4620      	mov	r0, r4
   d5516:	bd10      	pop	{r4, pc}

000d5518 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5518:	6803      	ldr	r3, [r0, #0]
   d551a:	b2c9      	uxtb	r1, r1
   d551c:	689b      	ldr	r3, [r3, #8]
   d551e:	4718      	bx	r3

000d5520 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5520:	b40e      	push	{r1, r2, r3}
   d5522:	b510      	push	{r4, lr}
   d5524:	b08d      	sub	sp, #52	; 0x34
   d5526:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5528:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d552a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d552e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5530:	2300      	movs	r3, #0
   d5532:	2020      	movs	r0, #32
   d5534:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5538:	e9cd 4200 	strd	r4, r2, [sp]
   d553c:	201e      	movs	r0, #30
   d553e:	aa04      	add	r2, sp, #16
   d5540:	f001 f9f8 	bl	d6934 <log_message_v>
}
   d5544:	b00d      	add	sp, #52	; 0x34
   d5546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d554a:	b003      	add	sp, #12
   d554c:	4770      	bx	lr
	...

000d5550 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5550:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5552:	4d03      	ldr	r5, [pc, #12]	; (d5560 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5554:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5558:	e9c0 5100 	strd	r5, r1, [r0]
}
   d555c:	bd30      	pop	{r4, r5, pc}
   d555e:	bf00      	nop
   d5560:	000db070 	.word	0x000db070

000d5564 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	f001 bf59 	b.w	d741c <_ZN7TwoWire5beginEv>

000d556a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d556a:	b510      	push	{r4, lr}
   d556c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d556e:	6800      	ldr	r0, [r0, #0]
   d5570:	f001 ff9d 	bl	d74ae <_ZN7TwoWire6unlockEv>
   d5574:	4620      	mov	r0, r4
   d5576:	bd10      	pop	{r4, pc}

000d5578 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d557c:	b08a      	sub	sp, #40	; 0x28
   d557e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5580:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5582:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5584:	f001 ff8a 	bl	d749c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5588:	221e      	movs	r2, #30
   d558a:	2100      	movs	r1, #0
   d558c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d558e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5590:	f003 fb90 	bl	d8cb4 <memset>
		size_t framAddr = 0;
   d5594:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5596:	b1ef      	cbz	r7, d55d4 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5598:	6823      	ldr	r3, [r4, #0]
   d559a:	2f1e      	cmp	r7, #30
   d559c:	46b8      	mov	r8, r7
   d559e:	bf28      	it	cs
   d55a0:	f04f 081e 	movcs.w	r8, #30
   d55a4:	68dd      	ldr	r5, [r3, #12]
   d55a6:	aa02      	add	r2, sp, #8
   d55a8:	4643      	mov	r3, r8
   d55aa:	4631      	mov	r1, r6
   d55ac:	4620      	mov	r0, r4
   d55ae:	47a8      	blx	r5
			if (!result) {
   d55b0:	4605      	mov	r5, r0
   d55b2:	b958      	cbnz	r0, d55cc <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d55b4:	480a      	ldr	r0, [pc, #40]	; (d55e0 <_ZN6MB85RC5eraseEv+0x68>)
   d55b6:	490b      	ldr	r1, [pc, #44]	; (d55e4 <_ZN6MB85RC5eraseEv+0x6c>)
   d55b8:	4632      	mov	r2, r6
   d55ba:	f7ff ffb1 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d55be:	a801      	add	r0, sp, #4
   d55c0:	f7ff ffd3 	bl	d556a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d55c4:	4628      	mov	r0, r5
   d55c6:	b00a      	add	sp, #40	; 0x28
   d55c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d55cc:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d55d0:	4446      	add	r6, r8
		while(totalLen > 0) {
   d55d2:	e7e0      	b.n	d5596 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d55d4:	a801      	add	r0, sp, #4
   d55d6:	f7ff ffc8 	bl	d556a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d55da:	2501      	movs	r5, #1
   d55dc:	e7f2      	b.n	d55c4 <_ZN6MB85RC5eraseEv+0x4c>
   d55de:	bf00      	nop
   d55e0:	2003e614 	.word	0x2003e614
   d55e4:	000db03c 	.word	0x000db03c

000d55e8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d55e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d55ec:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d55ee:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d55f0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d55f2:	460d      	mov	r5, r1
   d55f4:	4616      	mov	r6, r2
   d55f6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d55f8:	f001 ff50 	bl	d749c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d55fc:	b1a7      	cbz	r7, d5628 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d55fe:	68e1      	ldr	r1, [r4, #12]
   d5600:	6860      	ldr	r0, [r4, #4]
   d5602:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5606:	f001 ff3f 	bl	d7488 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d560a:	0a29      	lsrs	r1, r5, #8
   d560c:	6860      	ldr	r0, [r4, #4]
   d560e:	f7ff ff83 	bl	d5518 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5612:	4629      	mov	r1, r5
   d5614:	6860      	ldr	r0, [r4, #4]
   d5616:	f7ff ff7f 	bl	d5518 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d561a:	6860      	ldr	r0, [r4, #4]
   d561c:	2100      	movs	r1, #0
   d561e:	f001 ff36 	bl	d748e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5622:	b148      	cbz	r0, d5638 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5624:	2400      	movs	r4, #0
   d5626:	e000      	b.n	d562a <_ZN6MB85RC8readDataEjPhj+0x42>
   d5628:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d562a:	a801      	add	r0, sp, #4
   d562c:	f7ff ff9d 	bl	d556a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5630:	4620      	mov	r0, r4
   d5632:	b003      	add	sp, #12
   d5634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5638:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d563a:	7b21      	ldrb	r1, [r4, #12]
   d563c:	6860      	ldr	r0, [r4, #4]
   d563e:	46b8      	mov	r8, r7
   d5640:	bf28      	it	cs
   d5642:	f04f 0820 	movcs.w	r8, #32
   d5646:	2301      	movs	r3, #1
   d5648:	4642      	mov	r2, r8
   d564a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d564e:	f001 ff02 	bl	d7456 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5652:	f002 fd9f 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5656:	6803      	ldr	r3, [r0, #0]
   d5658:	691b      	ldr	r3, [r3, #16]
   d565a:	4798      	blx	r3
   d565c:	4540      	cmp	r0, r8
   d565e:	dbe1      	blt.n	d5624 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5660:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5664:	f002 fd96 	bl	d8194 <_Z19__fetch_global_Wirev>
   d5668:	6803      	ldr	r3, [r0, #0]
   d566a:	695b      	ldr	r3, [r3, #20]
   d566c:	4798      	blx	r3
   d566e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5672:	454e      	cmp	r6, r9
   d5674:	d1f6      	bne.n	d5664 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5676:	4445      	add	r5, r8
   d5678:	eba7 0708 	sub.w	r7, r7, r8
   d567c:	e7be      	b.n	d55fc <_ZN6MB85RC8readDataEjPhj+0x14>

000d567e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d567e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5682:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5684:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5686:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5688:	460e      	mov	r6, r1
   d568a:	4690      	mov	r8, r2
   d568c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d568e:	f001 ff05 	bl	d749c <_ZN7TwoWire4lockEv>
   d5692:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5696:	f1b9 0f00 	cmp.w	r9, #0
   d569a:	d02a      	beq.n	d56f2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d569c:	b34d      	cbz	r5, d56f2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d569e:	68e1      	ldr	r1, [r4, #12]
   d56a0:	6860      	ldr	r0, [r4, #4]
   d56a2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d56a6:	f001 feef 	bl	d7488 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d56aa:	0a31      	lsrs	r1, r6, #8
   d56ac:	6860      	ldr	r0, [r4, #4]
   d56ae:	f7ff ff33 	bl	d5518 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d56b2:	6860      	ldr	r0, [r4, #4]
   d56b4:	4631      	mov	r1, r6
   d56b6:	f7ff ff2f 	bl	d5518 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d56ba:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d56be:	4647      	mov	r7, r8
   d56c0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d56c4:	6860      	ldr	r0, [r4, #4]
   d56c6:	f817 1b01 	ldrb.w	r1, [r7], #1
   d56ca:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d56cc:	3d01      	subs	r5, #1
				wire.write(*data);
   d56ce:	689b      	ldr	r3, [r3, #8]
   d56d0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d56d2:	4555      	cmp	r5, sl
   d56d4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d56d8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d56da:	d001      	beq.n	d56e0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d56dc:	2d00      	cmp	r5, #0
   d56de:	d1f1      	bne.n	d56c4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d56e0:	6860      	ldr	r0, [r4, #4]
   d56e2:	2101      	movs	r1, #1
   d56e4:	f001 fed3 	bl	d748e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d56e8:	2800      	cmp	r0, #0
   d56ea:	d0d7      	beq.n	d569c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d56ec:	f04f 0900 	mov.w	r9, #0
   d56f0:	e7d1      	b.n	d5696 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d56f2:	a801      	add	r0, sp, #4
   d56f4:	f7ff ff39 	bl	d556a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d56f8:	4648      	mov	r0, r9
   d56fa:	b003      	add	sp, #12
   d56fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5700 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5704:	b08b      	sub	sp, #44	; 0x2c
   d5706:	460e      	mov	r6, r1
   d5708:	4615      	mov	r5, r2
   d570a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d570c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d570e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5710:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5712:	f001 fec3 	bl	d749c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5716:	42ae      	cmp	r6, r5
   d5718:	d229      	bcs.n	d576e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d571a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d571c:	4425      	add	r5, r4
			while(numBytes > 0) {
   d571e:	b18c      	cbz	r4, d5744 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5720:	2c1e      	cmp	r4, #30
   d5722:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5724:	f8d8 3000 	ldr.w	r3, [r8]
   d5728:	bf28      	it	cs
   d572a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d572c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d572e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5732:	aa02      	add	r2, sp, #8
   d5734:	463b      	mov	r3, r7
   d5736:	4631      	mov	r1, r6
   d5738:	4640      	mov	r0, r8
				framAddrTo -= count;
   d573a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d573c:	47c8      	blx	r9
				if (!result) {
   d573e:	b948      	cbnz	r0, d5754 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5740:	2400      	movs	r4, #0
   d5742:	e000      	b.n	d5746 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5744:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5746:	a801      	add	r0, sp, #4
   d5748:	f7ff ff0f 	bl	d556a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d574c:	4620      	mov	r0, r4
   d574e:	b00b      	add	sp, #44	; 0x2c
   d5750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5754:	f8d8 3000 	ldr.w	r3, [r8]
   d5758:	aa02      	add	r2, sp, #8
   d575a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d575e:	4629      	mov	r1, r5
   d5760:	463b      	mov	r3, r7
   d5762:	4640      	mov	r0, r8
   d5764:	47c8      	blx	r9
				if (!result) {
   d5766:	2800      	cmp	r0, #0
   d5768:	d0ea      	beq.n	d5740 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d576a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d576c:	e7d7      	b.n	d571e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d576e:	d9e9      	bls.n	d5744 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5770:	2c00      	cmp	r4, #0
   d5772:	d0e7      	beq.n	d5744 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5774:	f8d8 3000 	ldr.w	r3, [r8]
   d5778:	2c1e      	cmp	r4, #30
   d577a:	4627      	mov	r7, r4
   d577c:	bf28      	it	cs
   d577e:	271e      	movcs	r7, #30
   d5780:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5784:	aa02      	add	r2, sp, #8
   d5786:	463b      	mov	r3, r7
   d5788:	4631      	mov	r1, r6
   d578a:	4640      	mov	r0, r8
   d578c:	47c8      	blx	r9
				if (!result) {
   d578e:	2800      	cmp	r0, #0
   d5790:	d0d6      	beq.n	d5740 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5792:	f8d8 3000 	ldr.w	r3, [r8]
   d5796:	aa02      	add	r2, sp, #8
   d5798:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d579c:	4629      	mov	r1, r5
   d579e:	463b      	mov	r3, r7
   d57a0:	4640      	mov	r0, r8
   d57a2:	47c8      	blx	r9
				if (!result) {
   d57a4:	2800      	cmp	r0, #0
   d57a6:	d0cb      	beq.n	d5740 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d57a8:	443e      	add	r6, r7
				framAddrTo += count;
   d57aa:	443d      	add	r5, r7
				numBytes -= count;
   d57ac:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d57ae:	e7df      	b.n	d5770 <_ZN6MB85RC8moveDataEjjj+0x70>

000d57b0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d57b0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d57b2:	4603      	mov	r3, r0
	switch (__op)
   d57b4:	d102      	bne.n	d57bc <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d57b6:	6001      	str	r1, [r0, #0]
      }
   d57b8:	2000      	movs	r0, #0
   d57ba:	4770      	bx	lr
	  switch (__op)
   d57bc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d57be:	bf04      	itt	eq
   d57c0:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d57c4:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d57c8:	e7f6      	b.n	d57b8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d57ca <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d57ca:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d57cc:	2301      	movs	r3, #1
   d57ce:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d57d0:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d57d2:	4604      	mov	r4, r0
        if (th->func) {
   d57d4:	b143      	cbz	r3, d57e8 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d57d6:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57d8:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d57da:	2301      	movs	r3, #1
   d57dc:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d57de:	2000      	movs	r0, #0
    }
   d57e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d57e4:	f000 bf1e 	b.w	d6624 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d57e8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d57ea:	2800      	cmp	r0, #0
   d57ec:	d0f5      	beq.n	d57da <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d57ee:	6883      	ldr	r3, [r0, #8]
   d57f0:	b90b      	cbnz	r3, d57f6 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d57f2:	f002 fd02 	bl	d81fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57f6:	68c3      	ldr	r3, [r0, #12]
   d57f8:	e7ee      	b.n	d57d8 <_ZN6Thread3runEPv+0xe>

000d57fa <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d57fa:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d57fc:	6842      	ldr	r2, [r0, #4]
   d57fe:	4603      	mov	r3, r0
   d5800:	1054      	asrs	r4, r2, #1
   d5802:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d5806:	07d2      	lsls	r2, r2, #31
   d5808:	bf48      	it	mi
   d580a:	590a      	ldrmi	r2, [r1, r4]
   d580c:	681b      	ldr	r3, [r3, #0]
      }
   d580e:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5812:	bf48      	it	mi
   d5814:	58d3      	ldrmi	r3, [r2, r3]
   d5816:	4718      	bx	r3

000d5818 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5818:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d581a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d581c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d5820:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d5822:	3008      	adds	r0, #8
   d5824:	f000 fed6 	bl	d65d4 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5828:	2004      	movs	r0, #4
   d582a:	f7fe fc34 	bl	d4096 <_Znwj>
   d582e:	4605      	mov	r5, r0
   d5830:	b398      	cbz	r0, d589a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d5832:	491b      	ldr	r1, [pc, #108]	; (d58a0 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d5834:	2014      	movs	r0, #20
   d5836:	f002 fcdc 	bl	d81f2 <_ZnwjRKSt9nothrow_t>
   d583a:	b130      	cbz	r0, d584a <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d583c:	2300      	movs	r3, #0
            exited(false) {
   d583e:	e9c0 3300 	strd	r3, r3, [r0]
   d5842:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5846:	7403      	strb	r3, [r0, #16]
   d5848:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d584a:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d584c:	b1a0      	cbz	r0, d5878 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d584e:	4b15      	ldr	r3, [pc, #84]	; (d58a4 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5850:	4915      	ldr	r1, [pc, #84]	; (d58a8 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d5852:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5856:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d585a:	e9cd 0300 	strd	r0, r3, [sp]
   d585e:	2202      	movs	r2, #2
   d5860:	4b12      	ldr	r3, [pc, #72]	; (d58ac <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d5862:	3004      	adds	r0, #4
   d5864:	f000 fe7e 	bl	d6564 <os_thread_create>
   d5868:	b930      	cbnz	r0, d5878 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d586a:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d586c:	7c1b      	ldrb	r3, [r3, #16]
   d586e:	b9a3      	cbnz	r3, d589a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d5870:	2001      	movs	r0, #1
   d5872:	f000 fef7 	bl	d6664 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5876:	e7f8      	b.n	d586a <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5878:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d587a:	2300      	movs	r3, #0
   d587c:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d587e:	b164      	cbz	r4, d589a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d5880:	6827      	ldr	r7, [r4, #0]
   d5882:	b137      	cbz	r7, d5892 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d5884:	4638      	mov	r0, r7
   d5886:	f7fe fcc1 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d588a:	2110      	movs	r1, #16
   d588c:	4638      	mov	r0, r7
   d588e:	f002 fcae 	bl	d81ee <_ZdlPvj>
   d5892:	2114      	movs	r1, #20
   d5894:	4620      	mov	r0, r4
   d5896:	f002 fcaa 	bl	d81ee <_ZdlPvj>
   d589a:	6075      	str	r5, [r6, #4]
}
   d589c:	b003      	add	sp, #12
   d589e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58a0:	000db41c 	.word	0x000db41c
   d58a4:	000d5ab7 	.word	0x000d5ab7
   d58a8:	000db084 	.word	0x000db084
   d58ac:	000d57cb 	.word	0x000d57cb

000d58b0 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d58b0:	f247 5130 	movw	r1, #30000	; 0x7530
   d58b4:	4a08      	ldr	r2, [pc, #32]	; (d58d8 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d58b6:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d58b8:	4908      	ldr	r1, [pc, #32]	; (d58dc <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d58ba:	6002      	str	r2, [r0, #0]
   d58bc:	2200      	movs	r2, #0
   d58be:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d58c2:	4907      	ldr	r1, [pc, #28]	; (d58e0 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d58c4:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d58c6:	4907      	ldr	r1, [pc, #28]	; (d58e4 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d58c8:	6042      	str	r2, [r0, #4]
   d58ca:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d58ce:	6181      	str	r1, [r0, #24]
   d58d0:	8502      	strh	r2, [r0, #40]	; 0x28
   d58d2:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d58d6:	4770      	bx	lr
   d58d8:	000db148 	.word	0x000db148
   d58dc:	000d5c21 	.word	0x000d5c21
   d58e0:	000d57fb 	.word	0x000d57fb
   d58e4:	000d57b1 	.word	0x000d57b1

000d58e8 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d58e8:	b510      	push	{r4, lr}
   d58ea:	4b04      	ldr	r3, [pc, #16]	; (d58fc <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d58ec:	4604      	mov	r4, r0
   d58ee:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d58f2:	f7fe fc8b 	bl	d420c <_ZNSt14_Function_baseD1Ev>
}
   d58f6:	4620      	mov	r0, r4
   d58f8:	bd10      	pop	{r4, pc}
   d58fa:	bf00      	nop
   d58fc:	000db148 	.word	0x000db148

000d5900 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5900:	b510      	push	{r4, lr}
   d5902:	4b03      	ldr	r3, [pc, #12]	; (d5910 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d5904:	6003      	str	r3, [r0, #0]
   d5906:	4604      	mov	r4, r0
   d5908:	f7ff ffee 	bl	d58e8 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d590c:	4620      	mov	r0, r4
   d590e:	bd10      	pop	{r4, pc}
   d5910:	000db170 	.word	0x000db170

000d5914 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5914:	b510      	push	{r4, lr}
   d5916:	4604      	mov	r4, r0
}
   d5918:	f7ff fff2 	bl	d5900 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d591c:	4620      	mov	r0, r4
   d591e:	2138      	movs	r1, #56	; 0x38
   d5920:	f002 fc65 	bl	d81ee <_ZdlPvj>
   d5924:	4620      	mov	r0, r4
   d5926:	bd10      	pop	{r4, pc}

000d5928 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5928:	6880      	ldr	r0, [r0, #8]
   d592a:	f000 be5b 	b.w	d65e4 <os_mutex_lock>

000d592e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d592e:	6880      	ldr	r0, [r0, #8]
   d5930:	f000 be60 	b.w	d65f4 <os_mutex_unlock>

000d5934 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d5934:	b510      	push	{r4, lr}
   d5936:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d5938:	6800      	ldr	r0, [r0, #0]
   d593a:	f7ff fff8 	bl	d592e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d593e:	4620      	mov	r0, r4
   d5940:	bd10      	pop	{r4, pc}

000d5942 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d5942:	b513      	push	{r0, r1, r4, lr}
   d5944:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5946:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5948:	f7ff ffee 	bl	d5928 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d594c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d594e:	88dc      	ldrh	r4, [r3, #6]
   d5950:	b2a4      	uxth	r4, r4
   d5952:	b10c      	cbz	r4, d5958 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d5954:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d5958:	a801      	add	r0, sp, #4
   d595a:	f7ff ffeb 	bl	d5934 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d595e:	4620      	mov	r0, r4
   d5960:	b002      	add	sp, #8
   d5962:	bd10      	pop	{r4, pc}

000d5964 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d5964:	b513      	push	{r0, r1, r4, lr}
   d5966:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5968:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d596a:	f7ff ffdd 	bl	d5928 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d596e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5972:	b943      	cbnz	r3, d5986 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5974:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d5976:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d5978:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d597a:	a801      	add	r0, sp, #4
   d597c:	f7ff ffda 	bl	d5934 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d5980:	4620      	mov	r0, r4
   d5982:	b002      	add	sp, #8
   d5984:	bd10      	pop	{r4, pc}
	bool result = false;
   d5986:	2400      	movs	r4, #0
   d5988:	e7f7      	b.n	d597a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d598a <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d598a:	b513      	push	{r0, r1, r4, lr}
   d598c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d598e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5990:	f7ff ffca 	bl	d5928 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d5994:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d5996:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d5998:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d599a:	f7ff ffcb 	bl	d5934 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d599e:	4620      	mov	r0, r4
   d59a0:	b002      	add	sp, #8
   d59a2:	bd10      	pop	{r4, pc}

000d59a4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d59a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d59a8:	4699      	mov	r9, r3
   d59aa:	b086      	sub	sp, #24
	if (!haveSetup) {
   d59ac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d59b0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d59b4:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d59b8:	4604      	mov	r4, r0
   d59ba:	460f      	mov	r7, r1
   d59bc:	4616      	mov	r6, r2
	if (!haveSetup) {
   d59be:	b913      	cbnz	r3, d59c6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d59c0:	6803      	ldr	r3, [r0, #0]
   d59c2:	689b      	ldr	r3, [r3, #8]
   d59c4:	4798      	blx	r3
		data = "";
   d59c6:	4b31      	ldr	r3, [pc, #196]	; (d5a8c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d59c8:	4638      	mov	r0, r7
		data = "";
   d59ca:	2e00      	cmp	r6, #0
   d59cc:	bf08      	it	eq
   d59ce:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d59d0:	f003 f9cb 	bl	d8d6a <strlen>
   d59d4:	4605      	mov	r5, r0
   d59d6:	4630      	mov	r0, r6
   d59d8:	f003 f9c7 	bl	d8d6a <strlen>
   d59dc:	4428      	add	r0, r5
   d59de:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d59e2:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d59e4:	bf1c      	itt	ne
   d59e6:	f025 0503 	bicne.w	r5, r5, #3
   d59ea:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d59ec:	4633      	mov	r3, r6
   d59ee:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d59f2:	e9cd 9a00 	strd	r9, sl, [sp]
   d59f6:	4926      	ldr	r1, [pc, #152]	; (d5a90 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d59f8:	4826      	ldr	r0, [pc, #152]	; (d5a94 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d59fa:	463a      	mov	r2, r7
   d59fc:	f7ff fd90 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d5a00:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d5a02:	3b08      	subs	r3, #8
   d5a04:	42ab      	cmp	r3, r5
   d5a06:	d212      	bcs.n	d5a2e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d5a08:	2400      	movs	r4, #0
}
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	b006      	add	sp, #24
   d5a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d5a12:	88cb      	ldrh	r3, [r1, #6]
   d5a14:	2b01      	cmp	r3, #1
   d5a16:	d036      	beq.n	d5a86 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d5a18:	a805      	add	r0, sp, #20
   d5a1a:	f7ff ff8b 	bl	d5934 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d5a1e:	6823      	ldr	r3, [r4, #0]
   d5a20:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d5a24:	699b      	ldr	r3, [r3, #24]
   d5a26:	4620      	mov	r0, r4
   d5a28:	4798      	blx	r3
   d5a2a:	2800      	cmp	r0, #0
   d5a2c:	d0ec      	beq.n	d5a08 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d5a2e:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5a30:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d5a32:	f7ff ff79 	bl	d5928 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5a36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5a38:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d5a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5a3c:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d5a3e:	1ad2      	subs	r2, r2, r3
   d5a40:	42aa      	cmp	r2, r5
   d5a42:	d3e6      	bcc.n	d5a12 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d5a44:	ea48 080a 	orr.w	r8, r8, sl
   d5a48:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d5a4c:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d5a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d5a52:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d5a56:	4639      	mov	r1, r7
   d5a58:	4640      	mov	r0, r8
   d5a5a:	f003 f961 	bl	d8d20 <strcpy>
				cp += strlen(cp) + 1;
   d5a5e:	4640      	mov	r0, r8
   d5a60:	f003 f983 	bl	d8d6a <strlen>
   d5a64:	3001      	adds	r0, #1
				strcpy(cp, data);
   d5a66:	4631      	mov	r1, r6
   d5a68:	4440      	add	r0, r8
   d5a6a:	f003 f959 	bl	d8d20 <strcpy>
				nextFree += size;
   d5a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5a70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d5a72:	441d      	add	r5, r3
   d5a74:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d5a76:	88d3      	ldrh	r3, [r2, #6]
   d5a78:	3301      	adds	r3, #1
   d5a7a:	80d3      	strh	r3, [r2, #6]
				return true;
   d5a7c:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d5a7e:	a805      	add	r0, sp, #20
   d5a80:	f7ff ff58 	bl	d5934 <_ZN11StMutexLockD1Ev>
   d5a84:	e7c1      	b.n	d5a0a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d5a86:	2400      	movs	r4, #0
   d5a88:	e7f9      	b.n	d5a7e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d5a8a:	bf00      	nop
   d5a8c:	000db43c 	.word	0x000db43c
   d5a90:	000db096 	.word	0x000db096
   d5a94:	2003e5d0 	.word	0x2003e5d0

000d5a98 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a9c:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d5aa0:	69a3      	ldr	r3, [r4, #24]
   d5aa2:	b90b      	cbnz	r3, d5aa8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d5aa4:	f002 fba9 	bl	d81fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5aa8:	69e3      	ldr	r3, [r4, #28]
   d5aaa:	4621      	mov	r1, r4
   d5aac:	4628      	mov	r0, r5
   d5aae:	4798      	blx	r3
		os_thread_yield();
   d5ab0:	f000 fd60 	bl	d6574 <os_thread_yield>
	while(true) {
   d5ab4:	e7f4      	b.n	d5aa0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d5ab6 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d5ab6:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d5ab8:	f7ff ffee 	bl	d5a98 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d5abc <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5abc:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d5abe:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5ac2:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5ac4:	4628      	mov	r0, r5
   d5ac6:	f003 f950 	bl	d8d6a <strlen>
   d5aca:	3001      	adds	r0, #1
   d5acc:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5ace:	4628      	mov	r0, r5
   d5ad0:	f003 f94b 	bl	d8d6a <strlen>
	size_t offset = start - retainedBuffer;
   d5ad4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5ad6:	3001      	adds	r0, #1
   d5ad8:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d5ada:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d5adc:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d5ae0:	bf1c      	itt	ne
   d5ae2:	f1c3 0304 	rsbne	r3, r3, #4
   d5ae6:	18c0      	addne	r0, r0, r3
}
   d5ae8:	bd68      	pop	{r3, r5, r6, pc}

000d5aea <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d5aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5aec:	4604      	mov	r4, r0
   d5aee:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5af0:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5af2:	f7ff ff19 	bl	d5928 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5af6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5af8:	88fb      	ldrh	r3, [r7, #6]
   d5afa:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d5afe:	b1e6      	cbz	r6, d5b3a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d5b00:	2b01      	cmp	r3, #1
   d5b02:	d922      	bls.n	d5b4a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d5b04:	4629      	mov	r1, r5
   d5b06:	4620      	mov	r0, r4
   d5b08:	f7ff ffd8 	bl	d5abc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d5b0c:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d5b0e:	4629      	mov	r1, r5
   d5b10:	4620      	mov	r0, r4
   d5b12:	f7ff ffd3 	bl	d5abc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5b16:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d5b18:	443a      	add	r2, r7
	if (after > 0) {
   d5b1a:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d5b1c:	4601      	mov	r1, r0
	size_t len = next - start;
   d5b1e:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d5b22:	d002      	beq.n	d5b2a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d5b24:	4628      	mov	r0, r5
   d5b26:	f003 f8ab 	bl	d8c80 <memmove>
	nextFree -= len;
   d5b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5b2c:	1b9b      	subs	r3, r3, r6
   d5b2e:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d5b30:	88fb      	ldrh	r3, [r7, #6]
   d5b32:	3b01      	subs	r3, #1
   d5b34:	80fb      	strh	r3, [r7, #6]
	return true;
   d5b36:	2601      	movs	r6, #1
   d5b38:	e001      	b.n	d5b3e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d5b3a:	2b00      	cmp	r3, #0
   d5b3c:	d1e7      	bne.n	d5b0e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d5b3e:	a801      	add	r0, sp, #4
   d5b40:	f7ff fef8 	bl	d5934 <_ZN11StMutexLockD1Ev>
}
   d5b44:	4630      	mov	r0, r6
   d5b46:	b003      	add	sp, #12
   d5b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d5b4a:	2600      	movs	r6, #0
   d5b4c:	e7f7      	b.n	d5b3e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d5b50 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b54:	460d      	mov	r5, r1
   d5b56:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5b58:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5b5a:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5b5c:	f7ff fea8 	bl	d58b0 <_ZN21PublishQueueAsyncBaseC1Ev>
   d5b60:	4b15      	ldr	r3, [pc, #84]	; (d5bb8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5b62:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5b66:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5b68:	4b14      	ldr	r3, [pc, #80]	; (d5bbc <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5b6a:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5b6c:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5b6e:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5b70:	4698      	mov	r8, r3
   d5b72:	d117      	bne.n	d5ba4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d5b74:	88ab      	ldrh	r3, [r5, #4]
   d5b76:	b29b      	uxth	r3, r3
   d5b78:	42b3      	cmp	r3, r6
   d5b7a:	d113      	bne.n	d5ba4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5b7c:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5b80:	6367      	str	r7, [r4, #52]	; 0x34
   d5b82:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d5b86:	88eb      	ldrh	r3, [r5, #6]
   d5b88:	fa1f f289 	uxth.w	r2, r9
   d5b8c:	b29b      	uxth	r3, r3
   d5b8e:	429a      	cmp	r2, r3
   d5b90:	d20e      	bcs.n	d5bb0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d5b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5b94:	4620      	mov	r0, r4
   d5b96:	f7ff ff91 	bl	d5abc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d5b9a:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d5b9c:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d5b9e:	f109 0901 	add.w	r9, r9, #1
   d5ba2:	d9f0      	bls.n	d5b86 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d5ba4:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d5ba6:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5baa:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d5bac:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d5bae:	80eb      	strh	r3, [r5, #6]
}
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5bb6:	bf00      	nop
   d5bb8:	000db170 	.word	0x000db170
   d5bbc:	d19cab61 	.word	0xd19cab61

000d5bc0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d5bc0:	b510      	push	{r4, lr}
   d5bc2:	e9d1 2300 	ldrd	r2, r3, [r1]
   d5bc6:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d5bc8:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d5bca:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5bcc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d5bce:	b90a      	cbnz	r2, d5bd4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d5bd0:	07d9      	lsls	r1, r3, #31
   d5bd2:	d505      	bpl.n	d5be0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5bd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5bd8:	4b0f      	ldr	r3, [pc, #60]	; (d5c18 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d5bda:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5bdc:	4b0f      	ldr	r3, [pc, #60]	; (d5c1c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d5bde:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5be0:	ab02      	add	r3, sp, #8
   d5be2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5be6:	466a      	mov	r2, sp
   d5be8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5bec:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5bf0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bf8:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bfa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5bfe:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c00:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c02:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5c04:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d5c06:	4618      	mov	r0, r3
   d5c08:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c0a:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5c0c:	9105      	str	r1, [sp, #20]
   d5c0e:	f7fe fafd 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	}
   d5c12:	4620      	mov	r0, r4
   d5c14:	b006      	add	sp, #24
   d5c16:	bd10      	pop	{r4, pc}
   d5c18:	000d57fb 	.word	0x000d57fb
   d5c1c:	000d57b1 	.word	0x000d57b1

000d5c20 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d5c20:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5c22:	4b05      	ldr	r3, [pc, #20]	; (d5c38 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d5c24:	9300      	str	r3, [sp, #0]
   d5c26:	4669      	mov	r1, sp
   d5c28:	2300      	movs	r3, #0
   d5c2a:	3010      	adds	r0, #16
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	f7ff ffc7 	bl	d5bc0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5c32:	b003      	add	sp, #12
   d5c34:	f85d fb04 	ldr.w	pc, [sp], #4
   d5c38:	000d5c69 	.word	0x000d5c69

000d5c3c <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d5c3c:	b513      	push	{r0, r1, r4, lr}
   d5c3e:	4604      	mov	r4, r0
   d5c40:	f000 fd20 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d5c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c46:	1ac0      	subs	r0, r0, r3
   d5c48:	68e3      	ldr	r3, [r4, #12]
   d5c4a:	4298      	cmp	r0, r3
   d5c4c:	d308      	bcc.n	d5c60 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5c4e:	4b05      	ldr	r3, [pc, #20]	; (d5c64 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d5c50:	9300      	str	r3, [sp, #0]
   d5c52:	4669      	mov	r1, sp
   d5c54:	2300      	movs	r3, #0
   d5c56:	f104 0010 	add.w	r0, r4, #16
   d5c5a:	9301      	str	r3, [sp, #4]
   d5c5c:	f7ff ffb0 	bl	d5bc0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5c60:	b002      	add	sp, #8
   d5c62:	bd10      	pop	{r4, pc}
   d5c64:	000d5c69 	.word	0x000d5c69

000d5c68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d5c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5c6c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d5c70:	b086      	sub	sp, #24
   d5c72:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5c74:	2b00      	cmp	r3, #0
   d5c76:	d164      	bne.n	d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5c78:	f000 fee4 	bl	d6a44 <spark_cloud_flag_connected>
   d5c7c:	2800      	cmp	r0, #0
   d5c7e:	d060      	beq.n	d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5c80:	f000 fd00 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
   d5c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c86:	1ac0      	subs	r0, r0, r3
   d5c88:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d5c8c:	4298      	cmp	r0, r3
   d5c8e:	d958      	bls.n	d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d5c90:	6823      	ldr	r3, [r4, #0]
   d5c92:	4620      	mov	r0, r4
   d5c94:	695b      	ldr	r3, [r3, #20]
   d5c96:	4798      	blx	r3
		if (data) {
   d5c98:	4605      	mov	r5, r0
   d5c9a:	2800      	cmp	r0, #0
   d5c9c:	d051      	beq.n	d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d5c9e:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d5ca2:	2301      	movs	r3, #1
   d5ca4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d5ca8:	4638      	mov	r0, r7
   d5caa:	f003 f85e 	bl	d8d6a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d5cae:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5cb2:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d5cb6:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5cb8:	682b      	ldr	r3, [r5, #0]
   d5cba:	492b      	ldr	r1, [pc, #172]	; (d5d68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d5cbc:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d5cbe:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5cc0:	4633      	mov	r3, r6
   d5cc2:	482a      	ldr	r0, [pc, #168]	; (d5d6c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5cc4:	463a      	mov	r2, r7
   d5cc6:	f7ff fc2b 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d5cca:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5ccc:	f88d 8000 	strb.w	r8, [sp]
   d5cd0:	4632      	mov	r2, r6
   d5cd2:	4639      	mov	r1, r7
   d5cd4:	a802      	add	r0, sp, #8
   d5cd6:	f001 f9af 	bl	d7038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5cda:	9d02      	ldr	r5, [sp, #8]
   d5cdc:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d5cde:	b91b      	cbnz	r3, d5ce8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d5ce0:	2001      	movs	r0, #1
   d5ce2:	f000 ffa7 	bl	d6c34 <delay>
			while(!request.isDone()) {
   d5ce6:	e7f8      	b.n	d5cda <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ce8:	2000      	movs	r0, #0
   d5cea:	f000 fe55 	bl	d6998 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5cee:	b120      	cbz	r0, d5cfa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d5cf0:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5cf2:	b913      	cbnz	r3, d5cfa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d5cf4:	f000 fe9e 	bl	d6a34 <spark_process>
    }
   d5cf8:	e7fa      	b.n	d5cf0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5cfa:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d5cfc:	2b01      	cmp	r3, #1
   d5cfe:	d123      	bne.n	d5d48 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d5d00:	491b      	ldr	r1, [pc, #108]	; (d5d70 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d5d02:	481a      	ldr	r0, [pc, #104]	; (d5d6c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5d04:	f7ff fc0c 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d5d08:	6823      	ldr	r3, [r4, #0]
   d5d0a:	2100      	movs	r1, #0
   d5d0c:	699b      	ldr	r3, [r3, #24]
   d5d0e:	4620      	mov	r0, r4
   d5d10:	4798      	blx	r3
			isSending = false;
   d5d12:	2300      	movs	r3, #0
   d5d14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d5d18:	f000 fcb4 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d5d1c:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d5d1e:	9c03      	ldr	r4, [sp, #12]
   d5d20:	b17c      	cbz	r4, d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d5d22:	6863      	ldr	r3, [r4, #4]
   d5d24:	3b01      	subs	r3, #1
   d5d26:	6063      	str	r3, [r4, #4]
   d5d28:	b95b      	cbnz	r3, d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d5d2a:	6823      	ldr	r3, [r4, #0]
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	689b      	ldr	r3, [r3, #8]
   d5d30:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5d32:	68a3      	ldr	r3, [r4, #8]
   d5d34:	3b01      	subs	r3, #1
   d5d36:	60a3      	str	r3, [r4, #8]
   d5d38:	b91b      	cbnz	r3, d5d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d5d3a:	6823      	ldr	r3, [r4, #0]
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	68db      	ldr	r3, [r3, #12]
   d5d40:	4798      	blx	r3
}
   d5d42:	b006      	add	sp, #24
   d5d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d5d48:	68e2      	ldr	r2, [r4, #12]
   d5d4a:	490a      	ldr	r1, [pc, #40]	; (d5d74 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d5d4c:	4807      	ldr	r0, [pc, #28]	; (d5d6c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5d4e:	f7ff fbe7 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d5d52:	4b09      	ldr	r3, [pc, #36]	; (d5d78 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d5d54:	9304      	str	r3, [sp, #16]
   d5d56:	a904      	add	r1, sp, #16
   d5d58:	2300      	movs	r3, #0
   d5d5a:	f104 0010 	add.w	r0, r4, #16
   d5d5e:	9305      	str	r3, [sp, #20]
   d5d60:	f7ff ff2e 	bl	d5bc0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5d64:	e7d5      	b.n	d5d12 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d5d66:	bf00      	nop
   d5d68:	000db0d7 	.word	0x000db0d7
   d5d6c:	2003e5d0 	.word	0x2003e5d0
   d5d70:	000db0f8 	.word	0x000db0f8
   d5d74:	000db10f 	.word	0x000db10f
   d5d78:	000d5c3d 	.word	0x000d5c3d

000d5d7c <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
   d5d7c:	4b01      	ldr	r3, [pc, #4]	; (d5d84 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d5d7e:	4a02      	ldr	r2, [pc, #8]	; (d5d88 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d5d80:	601a      	str	r2, [r3, #0]
}
   d5d82:	4770      	bx	lr
   d5d84:	2003e5d0 	.word	0x2003e5d0
   d5d88:	000db136 	.word	0x000db136

000d5d8c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5d8c:	2040      	movs	r0, #64	; 0x40
   d5d8e:	4770      	bx	lr

000d5d90 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5d90:	2000      	movs	r0, #0
   d5d92:	4770      	bx	lr

000d5d94 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5d94:	2080      	movs	r0, #128	; 0x80
   d5d96:	4770      	bx	lr

000d5d98 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5d98:	20ff      	movs	r0, #255	; 0xff
   d5d9a:	4770      	bx	lr

000d5d9c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5d9c:	4770      	bx	lr

000d5d9e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5d9e:	4770      	bx	lr

000d5da0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5da0:	4770      	bx	lr

000d5da2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5da2:	4770      	bx	lr

000d5da4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5da4:	b510      	push	{r4, lr}
}
   d5da6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5da8:	4604      	mov	r4, r0
}
   d5daa:	f002 fa20 	bl	d81ee <_ZdlPvj>
   d5dae:	4620      	mov	r0, r4
   d5db0:	bd10      	pop	{r4, pc}

000d5db2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5db2:	b510      	push	{r4, lr}
}
   d5db4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5db6:	4604      	mov	r4, r0
}
   d5db8:	f002 fa19 	bl	d81ee <_ZdlPvj>
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bd10      	pop	{r4, pc}

000d5dc0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5dc0:	b510      	push	{r4, lr}
}
   d5dc2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5dc4:	4604      	mov	r4, r0
}
   d5dc6:	f002 fa12 	bl	d81ee <_ZdlPvj>
   d5dca:	4620      	mov	r0, r4
   d5dcc:	bd10      	pop	{r4, pc}

000d5dce <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5dce:	b510      	push	{r4, lr}
}
   d5dd0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5dd2:	4604      	mov	r4, r0
}
   d5dd4:	f002 fa0b 	bl	d81ee <_ZdlPvj>
   d5dd8:	4620      	mov	r0, r4
   d5dda:	bd10      	pop	{r4, pc}

000d5ddc <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5ddc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5de0:	6803      	ldr	r3, [r0, #0]
   d5de2:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5de4:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5de6:	4798      	blx	r3
   d5de8:	2210      	movs	r2, #16
   d5dea:	4601      	mov	r1, r0
   d5dec:	4668      	mov	r0, sp
   d5dee:	f002 ff61 	bl	d8cb4 <memset>
	size_t len = length();
   d5df2:	6823      	ldr	r3, [r4, #0]
   d5df4:	4620      	mov	r0, r4
   d5df6:	689b      	ldr	r3, [r3, #8]
   d5df8:	4798      	blx	r3
	size_t offset = 0;
   d5dfa:	2500      	movs	r5, #0
	size_t len = length();
   d5dfc:	4607      	mov	r7, r0
	bool bResult = false;
   d5dfe:	4628      	mov	r0, r5
	while(offset < len) {
   d5e00:	42bd      	cmp	r5, r7
   d5e02:	d20e      	bcs.n	d5e22 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5e04:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5e06:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5e08:	2e10      	cmp	r6, #16
   d5e0a:	bf28      	it	cs
   d5e0c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5e0e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5e12:	466a      	mov	r2, sp
   d5e14:	4633      	mov	r3, r6
   d5e16:	4629      	mov	r1, r5
   d5e18:	4620      	mov	r0, r4
   d5e1a:	47c0      	blx	r8
		if (!bResult) {
   d5e1c:	b108      	cbz	r0, d5e22 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5e1e:	4435      	add	r5, r6
	while(offset < len) {
   d5e20:	e7ee      	b.n	d5e00 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5e22:	b004      	add	sp, #16
   d5e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e28 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5e28:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5e2c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5e2e:	f240 1301 	movw	r3, #257	; 0x101
   d5e32:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5e34:	2300      	movs	r3, #0
   d5e36:	8203      	strh	r3, [r0, #16]
}
   d5e38:	4770      	bx	lr
	...

000d5e3c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b06      	ldr	r3, [pc, #24]	; (d5e58 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5e40:	6003      	str	r3, [r0, #0]
   d5e42:	4b06      	ldr	r3, [pc, #24]	; (d5e5c <_ZN12MCP79410TimeC1Ev+0x20>)
   d5e44:	6043      	str	r3, [r0, #4]
   d5e46:	f240 7304 	movw	r3, #1796	; 0x704
   d5e4a:	8103      	strh	r3, [r0, #8]
   d5e4c:	2300      	movs	r3, #0
   d5e4e:	7443      	strb	r3, [r0, #17]
	clear();
   d5e50:	f7ff ffea 	bl	d5e28 <_ZN12MCP79410Time5clearEv>
}
   d5e54:	bd08      	pop	{r3, pc}
   d5e56:	bf00      	nop
   d5e58:	000db25c 	.word	0x000db25c
   d5e5c:	03020100 	.word	0x03020100

000d5e60 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5e60:	0903      	lsrs	r3, r0, #4
}
   d5e62:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5e64:	f000 000f 	and.w	r0, r0, #15
}
   d5e68:	fb02 0003 	mla	r0, r2, r3, r0
   d5e6c:	4770      	bx	lr

000d5e6e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5e6e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5e70:	7a80      	ldrb	r0, [r0, #10]
   d5e72:	f7ff fff5 	bl	d5e60 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5e76:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5e7a:	bd08      	pop	{r3, pc}

000d5e7c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5e7c:	7ac0      	ldrb	r0, [r0, #11]
   d5e7e:	f000 001f 	and.w	r0, r0, #31
   d5e82:	f7ff bfed 	b.w	d5e60 <_ZN12MCP79410Time8bcdToIntEh>

000d5e86 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5e86:	7b00      	ldrb	r0, [r0, #12]
   d5e88:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5e8c:	f7ff bfe8 	b.w	d5e60 <_ZN12MCP79410Time8bcdToIntEh>

000d5e90 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5e90:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5e92:	7b81      	ldrb	r1, [r0, #14]
   d5e94:	064a      	lsls	r2, r1, #25
   d5e96:	d50d      	bpl.n	d5eb4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5e98:	f001 001f 	and.w	r0, r1, #31
   d5e9c:	f7ff ffe0 	bl	d5e60 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5ea0:	068b      	lsls	r3, r1, #26
   d5ea2:	d503      	bpl.n	d5eac <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5ea4:	280c      	cmp	r0, #12
   d5ea6:	d000      	beq.n	d5eaa <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5ea8:	300c      	adds	r0, #12
}
   d5eaa:	bd08      	pop	{r3, pc}
				return 0;
   d5eac:	280c      	cmp	r0, #12
   d5eae:	bf08      	it	eq
   d5eb0:	2000      	moveq	r0, #0
   d5eb2:	e7fa      	b.n	d5eaa <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5eb8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5ebc:	f7ff bfd0 	b.w	d5e60 <_ZN12MCP79410Time8bcdToIntEh>

000d5ec0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5ec0:	7bc0      	ldrb	r0, [r0, #15]
   d5ec2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5ec6:	f7ff bfcb 	b.w	d5e60 <_ZN12MCP79410Time8bcdToIntEh>

000d5eca <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5eca:	7c00      	ldrb	r0, [r0, #16]
   d5ecc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5ed0:	f7ff bfc6 	b.w	d5e60 <_ZN12MCP79410Time8bcdToIntEh>

000d5ed4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5ed4:	b510      	push	{r4, lr}
   d5ed6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5ed8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5eda:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5edc:	2100      	movs	r1, #0
   d5ede:	a801      	add	r0, sp, #4
   d5ee0:	f002 fee8 	bl	d8cb4 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	f7ff ffc2 	bl	d5e6e <_ZNK12MCP79410Time7getYearEv>
   d5eea:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5eee:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	f7ff ffc3 	bl	d5e7c <_ZNK12MCP79410Time8getMonthEv>
   d5ef6:	3801      	subs	r0, #1
   d5ef8:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5efa:	4620      	mov	r0, r4
   d5efc:	f7ff ffc3 	bl	d5e86 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5f00:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5f02:	4620      	mov	r0, r4
   d5f04:	f7ff ffc4 	bl	d5e90 <_ZNK12MCP79410Time7getHourEv>
   d5f08:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	f7ff ffd8 	bl	d5ec0 <_ZNK12MCP79410Time9getMinuteEv>
   d5f10:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5f12:	4620      	mov	r0, r4
   d5f14:	f7ff ffd9 	bl	d5eca <_ZNK12MCP79410Time9getSecondEv>
   d5f18:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5f1a:	a801      	add	r0, sp, #4
   d5f1c:	f000 fe82 	bl	d6c24 <mktime>
}
   d5f20:	b00a      	add	sp, #40	; 0x28
   d5f22:	bd10      	pop	{r4, pc}

000d5f24 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5f24:	210a      	movs	r1, #10
   d5f26:	fb90 f2f1 	sdiv	r2, r0, r1
   d5f2a:	fb92 f3f1 	sdiv	r3, r2, r1
   d5f2e:	fb01 2313 	mls	r3, r1, r3, r2
   d5f32:	011b      	lsls	r3, r3, #4
   d5f34:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5f36:	fb01 0012 	mls	r0, r1, r2, r0
   d5f3a:	4318      	orrs	r0, r3
}
   d5f3c:	b2c0      	uxtb	r0, r0
   d5f3e:	4770      	bx	lr

000d5f40 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5f40:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5f42:	b510      	push	{r4, lr}
   d5f44:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5f46:	fb91 f0f3 	sdiv	r0, r1, r3
   d5f4a:	fb00 1013 	mls	r0, r0, r3, r1
   d5f4e:	f7ff ffe9 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
   d5f52:	72a0      	strb	r0, [r4, #10]
}
   d5f54:	bd10      	pop	{r4, pc}

000d5f56 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5f56:	b510      	push	{r4, lr}
   d5f58:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5f5a:	4608      	mov	r0, r1
   d5f5c:	f7ff ffe2 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
   d5f60:	72e0      	strb	r0, [r4, #11]
}
   d5f62:	bd10      	pop	{r4, pc}

000d5f64 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5f64:	b510      	push	{r4, lr}
   d5f66:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5f68:	4608      	mov	r0, r1
   d5f6a:	f7ff ffdb 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5f6e:	7b23      	ldrb	r3, [r4, #12]
   d5f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5f74:	4318      	orrs	r0, r3
   d5f76:	7320      	strb	r0, [r4, #12]
}
   d5f78:	bd10      	pop	{r4, pc}

000d5f7a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5f7a:	b510      	push	{r4, lr}
   d5f7c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5f7e:	1c48      	adds	r0, r1, #1
   d5f80:	f7ff ffd0 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5f84:	7b63      	ldrb	r3, [r4, #13]
   d5f86:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5f8a:	4318      	orrs	r0, r3
   d5f8c:	7360      	strb	r0, [r4, #13]
}
   d5f8e:	bd10      	pop	{r4, pc}

000d5f90 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5f90:	b510      	push	{r4, lr}
   d5f92:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5f94:	4608      	mov	r0, r1
   d5f96:	f7ff ffc5 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
   d5f9a:	73a0      	strb	r0, [r4, #14]
}
   d5f9c:	bd10      	pop	{r4, pc}

000d5f9e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5f9e:	b510      	push	{r4, lr}
   d5fa0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5fa2:	4608      	mov	r0, r1
   d5fa4:	f7ff ffbe 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
   d5fa8:	73e0      	strb	r0, [r4, #15]
}
   d5faa:	bd10      	pop	{r4, pc}

000d5fac <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5fac:	b510      	push	{r4, lr}
   d5fae:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5fb0:	4608      	mov	r0, r1
   d5fb2:	f7ff ffb7 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5fb6:	7c23      	ldrb	r3, [r4, #16]
   d5fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5fbc:	4318      	orrs	r0, r3
   d5fbe:	7420      	strb	r0, [r4, #16]
}
   d5fc0:	bd10      	pop	{r4, pc}

000d5fc2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fc4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5fc6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5fc8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5fcc:	f002 fe38 	bl	d8c40 <gmtime>
   d5fd0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5fd2:	6941      	ldr	r1, [r0, #20]
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7ff ffb3 	bl	d5f40 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5fda:	6929      	ldr	r1, [r5, #16]
   d5fdc:	4620      	mov	r0, r4
   d5fde:	3101      	adds	r1, #1
   d5fe0:	f7ff ffb9 	bl	d5f56 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5fe4:	68e9      	ldr	r1, [r5, #12]
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	f7ff ffbc 	bl	d5f64 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5fec:	69a9      	ldr	r1, [r5, #24]
   d5fee:	4620      	mov	r0, r4
   d5ff0:	f7ff ffc3 	bl	d5f7a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5ff4:	68a9      	ldr	r1, [r5, #8]
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	f7ff ffca 	bl	d5f90 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5ffc:	6869      	ldr	r1, [r5, #4]
   d5ffe:	4620      	mov	r0, r4
   d6000:	f7ff ffcd 	bl	d5f9e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6004:	6829      	ldr	r1, [r5, #0]
   d6006:	293b      	cmp	r1, #59	; 0x3b
   d6008:	bfa8      	it	ge
   d600a:	213b      	movge	r1, #59	; 0x3b
   d600c:	4620      	mov	r0, r4
   d600e:	f7ff ffcd 	bl	d5fac <_ZN12MCP79410Time9setSecondEi>
}
   d6012:	b003      	add	sp, #12
   d6014:	bd30      	pop	{r4, r5, pc}
	...

000d6018 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6018:	4a05      	ldr	r2, [pc, #20]	; (d6030 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d601a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d601c:	e9c0 2100 	strd	r2, r1, [r0]
   d6020:	4a04      	ldr	r2, [pc, #16]	; (d6034 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6022:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6024:	4a04      	ldr	r2, [pc, #16]	; (d6038 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6026:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6028:	4a04      	ldr	r2, [pc, #16]	; (d603c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d602a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d602c:	6142      	str	r2, [r0, #20]
}
   d602e:	4770      	bx	lr
   d6030:	000db290 	.word	0x000db290
   d6034:	03010000 	.word	0x03010000
   d6038:	000db238 	.word	0x000db238
   d603c:	000db26c 	.word	0x000db26c

000d6040 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6044:	4604      	mov	r4, r0
   d6046:	460f      	mov	r7, r1
   d6048:	4690      	mov	r8, r2
   d604a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d604c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6050:	429e      	cmp	r6, r3
   d6052:	d231      	bcs.n	d60b8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6054:	6860      	ldr	r0, [r4, #4]
   d6056:	4639      	mov	r1, r7
   d6058:	f001 fa12 	bl	d7480 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d605c:	eb08 0106 	add.w	r1, r8, r6
   d6060:	6860      	ldr	r0, [r4, #4]
   d6062:	f7ff fa59 	bl	d5518 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6066:	6860      	ldr	r0, [r4, #4]
   d6068:	2100      	movs	r1, #0
   d606a:	f001 fa10 	bl	d748e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d606e:	4605      	mov	r5, r0
   d6070:	b9d0      	cbnz	r0, d60a8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6074:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6076:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6078:	2a20      	cmp	r2, #32
   d607a:	f04f 0301 	mov.w	r3, #1
   d607e:	bf28      	it	cs
   d6080:	2220      	movcs	r2, #32
   d6082:	4639      	mov	r1, r7
   d6084:	f001 f9e7 	bl	d7456 <_ZN7TwoWire11requestFromEhjh>
   d6088:	eb09 0b06 	add.w	fp, r9, r6
   d608c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d608e:	eb0b 0a00 	add.w	sl, fp, r0
   d6092:	45da      	cmp	sl, fp
   d6094:	d006      	beq.n	d60a4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6096:	6860      	ldr	r0, [r4, #4]
   d6098:	6803      	ldr	r3, [r0, #0]
   d609a:	695b      	ldr	r3, [r3, #20]
   d609c:	4798      	blx	r3
   d609e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d60a2:	e7f6      	b.n	d6092 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d60a4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d60a6:	e7d2      	b.n	d604e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d60a8:	4602      	mov	r2, r0
   d60aa:	4904      	ldr	r1, [pc, #16]	; (d60bc <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d60ac:	4804      	ldr	r0, [pc, #16]	; (d60c0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d60ae:	f7ff fa37 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d60b2:	4628      	mov	r0, r5
   d60b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60b8:	2500      	movs	r5, #0
	return stat;
   d60ba:	e7fa      	b.n	d60b2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d60bc:	000db190 	.word	0x000db190
   d60c0:	2003e5d4 	.word	0x2003e5d4

000d60c4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d60c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d60c8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d60cc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d60ce:	6803      	ldr	r3, [r0, #0]
   d60d0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d60d2:	4605      	mov	r5, r0
   d60d4:	460c      	mov	r4, r1
   d60d6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d60d8:	4798      	blx	r3
   d60da:	4580      	cmp	r8, r0
   d60dc:	d80d      	bhi.n	d60fa <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d60de:	3420      	adds	r4, #32
   d60e0:	6868      	ldr	r0, [r5, #4]
   d60e2:	9600      	str	r6, [sp, #0]
   d60e4:	463b      	mov	r3, r7
   d60e6:	b2e2      	uxtb	r2, r4
   d60e8:	216f      	movs	r1, #111	; 0x6f
   d60ea:	f7ff ffa9 	bl	d6040 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d60ee:	fab0 f080 	clz	r0, r0
   d60f2:	0940      	lsrs	r0, r0, #5
}
   d60f4:	b002      	add	sp, #8
   d60f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d60fa:	2000      	movs	r0, #0
   d60fc:	e7fa      	b.n	d60f4 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d60fe <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d60fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6102:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6106:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6108:	6803      	ldr	r3, [r0, #0]
   d610a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d610c:	4604      	mov	r4, r0
   d610e:	460d      	mov	r5, r1
   d6110:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6112:	4798      	blx	r3
   d6114:	4580      	cmp	r8, r0
   d6116:	d80c      	bhi.n	d6132 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6118:	6860      	ldr	r0, [r4, #4]
   d611a:	9600      	str	r6, [sp, #0]
   d611c:	463b      	mov	r3, r7
   d611e:	b2ea      	uxtb	r2, r5
   d6120:	2157      	movs	r1, #87	; 0x57
   d6122:	f7ff ff8d 	bl	d6040 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6126:	fab0 f080 	clz	r0, r0
   d612a:	0940      	lsrs	r0, r0, #5
}
   d612c:	b002      	add	sp, #8
   d612e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6132:	2000      	movs	r0, #0
   d6134:	e7fa      	b.n	d612c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6136 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6136:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6138:	1e1e      	subs	r6, r3, #0
   d613a:	bf0c      	ite	eq
   d613c:	2307      	moveq	r3, #7
   d613e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6140:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6142:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6144:	ab02      	add	r3, sp, #8
   d6146:	460a      	mov	r2, r1
   d6148:	216f      	movs	r1, #111	; 0x6f
   d614a:	f7ff ff79 	bl	d6040 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d614e:	4605      	mov	r5, r0
   d6150:	b9a8      	cbnz	r0, d617e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6152:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6156:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6158:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d615c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d615e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6162:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6164:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6168:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d616a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d616e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6170:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6174:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6176:	b92e      	cbnz	r6, d6184 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6178:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d617c:	72a3      	strb	r3, [r4, #10]
}
   d617e:	4628      	mov	r0, r5
   d6180:	b004      	add	sp, #16
   d6182:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6184:	f001 fdb0 	bl	d7ce8 <_ZN9TimeClass4yearEv>
   d6188:	f7ff fecc 	bl	d5f24 <_ZN12MCP79410Time8intToBcdEi>
   d618c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d618e:	e7f6      	b.n	d617e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6190 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6192:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6194:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6196:	9300      	str	r3, [sp, #0]
   d6198:	216f      	movs	r1, #111	; 0x6f
   d619a:	ab03      	add	r3, sp, #12
   d619c:	f7ff ff50 	bl	d6040 <_ZNK8MCP7941010deviceReadEhhPhj>
   d61a0:	b920      	cbnz	r0, d61ac <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d61a2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d61a6:	b005      	add	sp, #20
   d61a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d61ac:	2000      	movs	r0, #0
   d61ae:	e7fa      	b.n	d61a6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d61b0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d61b0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d61b2:	2103      	movs	r1, #3
   d61b4:	f7ff ffec 	bl	d6190 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d61b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d61bc:	bd08      	pop	{r3, pc}

000d61be <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d61be:	b538      	push	{r3, r4, r5, lr}
   d61c0:	2300      	movs	r3, #0
   d61c2:	460c      	mov	r4, r1
   d61c4:	460a      	mov	r2, r1
   d61c6:	4619      	mov	r1, r3
   d61c8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d61ca:	f7ff ffb4 	bl	d6136 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d61ce:	b930      	cbnz	r0, d61de <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d61d0:	7aa3      	ldrb	r3, [r4, #10]
   d61d2:	b123      	cbz	r3, d61de <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d61d4:	4628      	mov	r0, r5
}
   d61d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d61da:	f7ff bfe9 	b.w	d61b0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d61de:	2000      	movs	r0, #0
   d61e0:	bd38      	pop	{r3, r4, r5, pc}

000d61e2 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d61e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d61e4:	4602      	mov	r2, r0
	MCP79410Time time;
   d61e6:	a801      	add	r0, sp, #4
   d61e8:	f7ff fe28 	bl	d5e3c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d61ec:	a901      	add	r1, sp, #4
   d61ee:	4610      	mov	r0, r2
   d61f0:	f7ff ffe5 	bl	d61be <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d61f4:	b128      	cbz	r0, d6202 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d61f6:	a801      	add	r0, sp, #4
   d61f8:	f7ff fe6c 	bl	d5ed4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d61fc:	b007      	add	sp, #28
   d61fe:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6202:	2000      	movs	r0, #0
   d6204:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d6206:	e7f9      	b.n	d61fc <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6208 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6208:	b5d0      	push	{r4, r6, r7, lr}
   d620a:	4604      	mov	r4, r0
   d620c:	b086      	sub	sp, #24
	wire.begin();
   d620e:	6840      	ldr	r0, [r0, #4]
   d6210:	f001 f904 	bl	d741c <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6214:	f001 fd2e 	bl	d7c74 <_ZN9TimeClass7isValidEv>
   d6218:	b9e8      	cbnz	r0, d6256 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d621a:	7ae3      	ldrb	r3, [r4, #11]
   d621c:	079b      	lsls	r3, r3, #30
   d621e:	d51a      	bpl.n	d6256 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6220:	4620      	mov	r0, r4
   d6222:	f7ff ffde 	bl	d61e2 <_ZNK8MCP7941010getRTCTimeEv>
   d6226:	4606      	mov	r6, r0
   d6228:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d622a:	ea56 0307 	orrs.w	r3, r6, r7
   d622e:	d012      	beq.n	d6256 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6230:	f001 fc27 	bl	d7a82 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6234:	4b0a      	ldr	r3, [pc, #40]	; (d6260 <_ZN8MCP794105setupEv+0x58>)
   d6236:	490b      	ldr	r1, [pc, #44]	; (d6264 <_ZN8MCP794105setupEv+0x5c>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	9300      	str	r3, [sp, #0]
   d623c:	4632      	mov	r2, r6
   d623e:	463b      	mov	r3, r7
   d6240:	a802      	add	r0, sp, #8
   d6242:	f001 fcd5 	bl	d7bf0 <_ZN9TimeClass6formatExPKc>
   d6246:	4808      	ldr	r0, [pc, #32]	; (d6268 <_ZN8MCP794105setupEv+0x60>)
   d6248:	9a02      	ldr	r2, [sp, #8]
   d624a:	4908      	ldr	r1, [pc, #32]	; (d626c <_ZN8MCP794105setupEv+0x64>)
   d624c:	f7ff f968 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
   d6250:	a802      	add	r0, sp, #8
   d6252:	f001 faeb 	bl	d782c <_ZN6StringD1Ev>
	setupDone = true;
   d6256:	2301      	movs	r3, #1
   d6258:	7223      	strb	r3, [r4, #8]
}
   d625a:	b006      	add	sp, #24
   d625c:	bdd0      	pop	{r4, r6, r7, pc}
   d625e:	bf00      	nop
   d6260:	2003e250 	.word	0x2003e250
   d6264:	2003e640 	.word	0x2003e640
   d6268:	2003e5d4 	.word	0x2003e5d4
   d626c:	000db1aa 	.word	0x000db1aa

000d6270 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6274:	4606      	mov	r6, r0
   d6276:	4688      	mov	r8, r1
   d6278:	4691      	mov	r9, r2
   d627a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d627c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d627e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6280:	429d      	cmp	r5, r3
   d6282:	d229      	bcs.n	d62d8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6284:	6870      	ldr	r0, [r6, #4]
   d6286:	4641      	mov	r1, r8
   d6288:	f001 f8fa 	bl	d7480 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d628c:	6870      	ldr	r0, [r6, #4]
   d628e:	eb09 0105 	add.w	r1, r9, r5
   d6292:	f7ff f941 	bl	d5518 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6298:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d629a:	2f1f      	cmp	r7, #31
   d629c:	bf28      	it	cs
   d629e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d62a0:	eb0a 0405 	add.w	r4, sl, r5
   d62a4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d62a8:	6870      	ldr	r0, [r6, #4]
   d62aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d62ae:	6802      	ldr	r2, [r0, #0]
   d62b0:	6892      	ldr	r2, [r2, #8]
   d62b2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d62b4:	45a3      	cmp	fp, r4
   d62b6:	d1f7      	bne.n	d62a8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d62b8:	6870      	ldr	r0, [r6, #4]
   d62ba:	2101      	movs	r1, #1
   d62bc:	f001 f8e7 	bl	d748e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d62c0:	4604      	mov	r4, r0
   d62c2:	b138      	cbz	r0, d62d4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d62c4:	4602      	mov	r2, r0
   d62c6:	4905      	ldr	r1, [pc, #20]	; (d62dc <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d62c8:	4805      	ldr	r0, [pc, #20]	; (d62e0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d62ca:	f7ff f929 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d62ce:	4620      	mov	r0, r4
   d62d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d62d4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d62d6:	e7d2      	b.n	d627e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d62d8:	2400      	movs	r4, #0
	return stat;
   d62da:	e7f8      	b.n	d62ce <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d62dc:	000db1bf 	.word	0x000db1bf
   d62e0:	2003e5d4 	.word	0x2003e5d4

000d62e4 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d62e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d62e8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d62ec:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d62ee:	6803      	ldr	r3, [r0, #0]
   d62f0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d62f2:	4605      	mov	r5, r0
   d62f4:	460c      	mov	r4, r1
   d62f6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d62f8:	4798      	blx	r3
   d62fa:	4580      	cmp	r8, r0
   d62fc:	d80d      	bhi.n	d631a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d62fe:	3420      	adds	r4, #32
   d6300:	6868      	ldr	r0, [r5, #4]
   d6302:	9600      	str	r6, [sp, #0]
   d6304:	463b      	mov	r3, r7
   d6306:	b2e2      	uxtb	r2, r4
   d6308:	216f      	movs	r1, #111	; 0x6f
   d630a:	f7ff ffb1 	bl	d6270 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d630e:	fab0 f080 	clz	r0, r0
   d6312:	0940      	lsrs	r0, r0, #5
}
   d6314:	b002      	add	sp, #8
   d6316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d631a:	2000      	movs	r0, #0
   d631c:	e7fa      	b.n	d6314 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d631e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d631e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6320:	7c13      	ldrb	r3, [r2, #16]
   d6322:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6326:	7bd3      	ldrb	r3, [r2, #15]
   d6328:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d632c:	7b93      	ldrb	r3, [r2, #14]
   d632e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6332:	7b53      	ldrb	r3, [r2, #13]
   d6334:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6338:	7b13      	ldrb	r3, [r2, #12]
   d633a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d633e:	7ad3      	ldrb	r3, [r2, #11]
   d6340:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6344:	7a93      	ldrb	r3, [r2, #10]
   d6346:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d634a:	2307      	movs	r3, #7
   d634c:	9300      	str	r3, [sp, #0]
   d634e:	460a      	mov	r2, r1
   d6350:	ab02      	add	r3, sp, #8
   d6352:	216f      	movs	r1, #111	; 0x6f
   d6354:	f7ff ff8c 	bl	d6270 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6358:	b005      	add	sp, #20
   d635a:	f85d fb04 	ldr.w	pc, [sp], #4

000d635e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d635e:	b510      	push	{r4, lr}
   d6360:	b088      	sub	sp, #32
   d6362:	4604      	mov	r4, r0
	MCP79410Time time;
   d6364:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6366:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6368:	f7ff fd68 	bl	d5e3c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d636c:	9b01      	ldr	r3, [sp, #4]
   d636e:	a803      	add	r0, sp, #12
   d6370:	f7ff fe27 	bl	d5fc2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6374:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6378:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d637a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d637e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6382:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6386:	b16a      	cbz	r2, d63a4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6388:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d638c:	aa03      	add	r2, sp, #12
   d638e:	2100      	movs	r1, #0
   d6390:	4620      	mov	r0, r4
   d6392:	f88d 3019 	strb.w	r3, [sp, #25]
   d6396:	f7ff ffc2 	bl	d631e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d639a:	fab0 f080 	clz	r0, r0
   d639e:	0940      	lsrs	r0, r0, #5
   d63a0:	b008      	add	sp, #32
   d63a2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d63a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d63a8:	e7f0      	b.n	d638c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d63ac <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d63ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63ae:	b087      	sub	sp, #28
   d63b0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d63b2:	f001 fc5f 	bl	d7c74 <_ZN9TimeClass7isValidEv>
   d63b6:	4604      	mov	r4, r0
   d63b8:	b1e8      	cbz	r0, d63f6 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d63ba:	f001 fc78 	bl	d7cae <_ZN9TimeClass3nowEv>
   d63be:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d63c0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d63c2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d63c4:	463b      	mov	r3, r7
   d63c6:	4628      	mov	r0, r5
   d63c8:	f7ff ffc9 	bl	d635e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d63cc:	4b0c      	ldr	r3, [pc, #48]	; (d6400 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d63ce:	490d      	ldr	r1, [pc, #52]	; (d6404 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	9300      	str	r3, [sp, #0]
   d63d4:	4632      	mov	r2, r6
   d63d6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d63d8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d63da:	a802      	add	r0, sp, #8
   d63dc:	f001 fc08 	bl	d7bf0 <_ZN9TimeClass6formatExPKc>
   d63e0:	4809      	ldr	r0, [pc, #36]	; (d6408 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d63e2:	9a02      	ldr	r2, [sp, #8]
   d63e4:	4909      	ldr	r1, [pc, #36]	; (d640c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d63e6:	f7ff f89b 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
   d63ea:	a802      	add	r0, sp, #8
   d63ec:	f001 fa1e 	bl	d782c <_ZN6StringD1Ev>
}
   d63f0:	4620      	mov	r0, r4
   d63f2:	b007      	add	sp, #28
   d63f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d63f6:	4906      	ldr	r1, [pc, #24]	; (d6410 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d63f8:	4803      	ldr	r0, [pc, #12]	; (d6408 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d63fa:	f7ff f891 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
   d63fe:	e7f7      	b.n	d63f0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6400:	2003e250 	.word	0x2003e250
   d6404:	2003e640 	.word	0x2003e640
   d6408:	2003e5d4 	.word	0x2003e5d4
   d640c:	000db1da 	.word	0x000db1da
   d6410:	000db1f0 	.word	0x000db1f0

000d6414 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6414:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6416:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6418:	4604      	mov	r4, r0
	if (!timeSet) {
   d641a:	b99d      	cbnz	r5, d6444 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d641c:	f001 fc2a 	bl	d7c74 <_ZN9TimeClass7isValidEv>
   d6420:	b180      	cbz	r0, d6444 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6422:	2200      	movs	r2, #0
   d6424:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6426:	4669      	mov	r1, sp
   d6428:	4628      	mov	r0, r5
        tm = 0;
   d642a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d642e:	f000 fb39 	bl	d6aa4 <spark_sync_time_last>
			if (lastSync != 0) {
   d6432:	b138      	cbz	r0, d6444 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6434:	7ae3      	ldrb	r3, [r4, #11]
   d6436:	07db      	lsls	r3, r3, #31
   d6438:	d502      	bpl.n	d6440 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d643a:	4620      	mov	r0, r4
   d643c:	f7ff ffb6 	bl	d63ac <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6440:	2301      	movs	r3, #1
   d6442:	7263      	strb	r3, [r4, #9]
}
   d6444:	b003      	add	sp, #12
   d6446:	bd30      	pop	{r4, r5, pc}

000d6448 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d644a:	2301      	movs	r3, #1
	buf[0] = value;
   d644c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6450:	9300      	str	r3, [sp, #0]
   d6452:	460a      	mov	r2, r1
   d6454:	ab03      	add	r3, sp, #12
   d6456:	216f      	movs	r1, #111	; 0x6f
   d6458:	f7ff ff0a 	bl	d6270 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d645c:	b005      	add	sp, #20
   d645e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6462 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6464:	4604      	mov	r4, r0
   d6466:	460d      	mov	r5, r1
   d6468:	4617      	mov	r7, r2
   d646a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d646c:	f7ff fe90 	bl	d6190 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d6470:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d6474:	4332      	orrs	r2, r6
   d6476:	4629      	mov	r1, r5
   d6478:	4620      	mov	r0, r4
}
   d647a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d647e:	f7ff bfe3 	b.w	d6448 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d6482 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d6482:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d6484:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6486:	d80c      	bhi.n	d64a2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6488:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d648a:	f04f 0300 	mov.w	r3, #0
   d648e:	bf14      	ite	ne
   d6490:	22df      	movne	r2, #223	; 0xdf
   d6492:	22ef      	moveq	r2, #239	; 0xef
   d6494:	2107      	movs	r1, #7
   d6496:	f7ff ffe4 	bl	d6462 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d649a:	fab0 f080 	clz	r0, r0
   d649e:	0940      	lsrs	r0, r0, #5
}
   d64a0:	bd08      	pop	{r3, pc}
		return false;
   d64a2:	2000      	movs	r0, #0
   d64a4:	e7fc      	b.n	d64a0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d64a6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d64a6:	b538      	push	{r3, r4, r5, lr}
   d64a8:	4604      	mov	r4, r0
   d64aa:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d64ac:	6860      	ldr	r0, [r4, #4]
   d64ae:	2157      	movs	r1, #87	; 0x57
   d64b0:	f000 ffe6 	bl	d7480 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d64b4:	6860      	ldr	r0, [r4, #4]
   d64b6:	2101      	movs	r1, #1
   d64b8:	f000 ffe9 	bl	d748e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d64bc:	b108      	cbz	r0, d64c2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d64be:	3d01      	subs	r5, #1
   d64c0:	d1f4      	bne.n	d64ac <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d64c2:	bd38      	pop	{r3, r4, r5, pc}

000d64c4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d64c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64c8:	4604      	mov	r4, r0
   d64ca:	460f      	mov	r7, r1
   d64cc:	4616      	mov	r6, r2
   d64ce:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d64d2:	45b0      	cmp	r8, r6
   d64d4:	d020      	beq.n	d6518 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d64d6:	6860      	ldr	r0, [r4, #4]
   d64d8:	2157      	movs	r1, #87	; 0x57
   d64da:	f000 ffd1 	bl	d7480 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d64de:	4639      	mov	r1, r7
   d64e0:	6860      	ldr	r0, [r4, #4]
   d64e2:	f7ff f819 	bl	d5518 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d64e6:	6860      	ldr	r0, [r4, #4]
   d64e8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d64ec:	6803      	ldr	r3, [r0, #0]
   d64ee:	689b      	ldr	r3, [r3, #8]
   d64f0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d64f2:	6860      	ldr	r0, [r4, #4]
   d64f4:	2101      	movs	r1, #1
   d64f6:	f000 ffca 	bl	d748e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d64fa:	3701      	adds	r7, #1
   d64fc:	4605      	mov	r5, r0
   d64fe:	b138      	cbz	r0, d6510 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6500:	4602      	mov	r2, r0
   d6502:	4906      	ldr	r1, [pc, #24]	; (d651c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6504:	4806      	ldr	r0, [pc, #24]	; (d6520 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d6506:	f7ff f80b 	bl	d5520 <_ZNK5spark6Logger4infoEPKcz>
}
   d650a:	4628      	mov	r0, r5
   d650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6510:	4620      	mov	r0, r4
   d6512:	f7ff ffc8 	bl	d64a6 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d6516:	e7dc      	b.n	d64d2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6518:	2500      	movs	r5, #0
	return stat;
   d651a:	e7f6      	b.n	d650a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d651c:	000db205 	.word	0x000db205
   d6520:	2003e5d4 	.word	0x2003e5d4

000d6524 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d6526:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6528:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d652a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d652c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d652e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6530:	4604      	mov	r4, r0
   d6532:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6534:	4798      	blx	r3
   d6536:	4287      	cmp	r7, r0
   d6538:	d80a      	bhi.n	d6550 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d653a:	9a01      	ldr	r2, [sp, #4]
   d653c:	6860      	ldr	r0, [r4, #4]
   d653e:	4633      	mov	r3, r6
   d6540:	b2e9      	uxtb	r1, r5
   d6542:	f7ff ffbf 	bl	d64c4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d6546:	fab0 f080 	clz	r0, r0
   d654a:	0940      	lsrs	r0, r0, #5
}
   d654c:	b003      	add	sp, #12
   d654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6550:	2000      	movs	r0, #0
   d6552:	e7fb      	b.n	d654c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6554 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
   d6554:	4b01      	ldr	r3, [pc, #4]	; (d655c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d6556:	4a02      	ldr	r2, [pc, #8]	; (d6560 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6558:	601a      	str	r2, [r3, #0]
}
   d655a:	4770      	bx	lr
   d655c:	2003e5d4 	.word	0x2003e5d4
   d6560:	000db226 	.word	0x000db226

000d6564 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <os_thread_create+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	685b      	ldr	r3, [r3, #4]
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	00030248 	.word	0x00030248

000d6574 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <os_thread_yield+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	68db      	ldr	r3, [r3, #12]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030248 	.word	0x00030248

000d6584 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <os_thread_scheduling+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	69db      	ldr	r3, [r3, #28]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030248 	.word	0x00030248

000d6594 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <os_timer_create+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	6a1b      	ldr	r3, [r3, #32]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	00030248 	.word	0x00030248

000d65a4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <os_timer_destroy+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030248 	.word	0x00030248

000d65b4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <os_timer_get_id+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	00030248 	.word	0x00030248

000d65c4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <os_timer_change+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	00030248 	.word	0x00030248

000d65d4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <os_mutex_create+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	00030248 	.word	0x00030248

000d65e4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <os_mutex_lock+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	00030248 	.word	0x00030248

000d65f4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <os_mutex_unlock+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	00030248 	.word	0x00030248

000d6604 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <os_mutex_recursive_create+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	00030248 	.word	0x00030248

000d6614 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <os_mutex_recursive_destroy+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030248 	.word	0x00030248

000d6624 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <os_thread_exit+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030248 	.word	0x00030248

000d6634 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <os_timer_set_id+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030248 	.word	0x00030248

000d6644 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <HAL_Feature_Set+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030234 	.word	0x00030234

000d6654 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <HAL_RNG_GetRandomNumber+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	685b      	ldr	r3, [r3, #4]
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030218 	.word	0x00030218

000d6664 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <HAL_Delay_Milliseconds+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	689b      	ldr	r3, [r3, #8]
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030218 	.word	0x00030218

000d6674 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <HAL_Delay_Microseconds+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	68db      	ldr	r3, [r3, #12]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030218 	.word	0x00030218

000d6684 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	695b      	ldr	r3, [r3, #20]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030218 	.word	0x00030218

000d6694 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <hal_rtc_time_is_valid+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030218 	.word	0x00030218

000d66a4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <hal_rtc_get_time+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	00030218 	.word	0x00030218

000d66b4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <hal_rtc_set_time+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	00030218 	.word	0x00030218

000d66c4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <HAL_Pin_Mode+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	689b      	ldr	r3, [r3, #8]
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	0003022c 	.word	0x0003022c

000d66d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <HAL_Get_Pin_Mode+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	68db      	ldr	r3, [r3, #12]
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	0003022c 	.word	0x0003022c

000d66e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <HAL_GPIO_Write+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	691b      	ldr	r3, [r3, #16]
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	0003022c 	.word	0x0003022c

000d66f4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <HAL_GPIO_Read+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	695b      	ldr	r3, [r3, #20]
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	0003022c 	.word	0x0003022c

000d6704 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <HAL_Interrupts_Attach+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	699b      	ldr	r3, [r3, #24]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	0003022c 	.word	0x0003022c

000d6714 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <HAL_Interrupts_Detach+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	69db      	ldr	r3, [r3, #28]
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	0003022c 	.word	0x0003022c

000d6724 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <hal_i2c_begin+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	68db      	ldr	r3, [r3, #12]
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	00030228 	.word	0x00030228

000d6734 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <hal_i2c_begin_transmission+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	699b      	ldr	r3, [r3, #24]
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	00030228 	.word	0x00030228

000d6744 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <hal_i2c_end_transmission+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	69db      	ldr	r3, [r3, #28]
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	00030228 	.word	0x00030228

000d6754 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <hal_i2c_write+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	6a1b      	ldr	r3, [r3, #32]
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	00030228 	.word	0x00030228

000d6764 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <hal_i2c_available+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	00030228 	.word	0x00030228

000d6774 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <hal_i2c_read+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	00030228 	.word	0x00030228

000d6784 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <hal_i2c_peek+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	00030228 	.word	0x00030228

000d6794 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <hal_i2c_flush+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	00030228 	.word	0x00030228

000d67a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <hal_i2c_is_enabled+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	00030228 	.word	0x00030228

000d67b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b02      	ldr	r3, [pc, #8]	; (d67c0 <hal_i2c_init+0xc>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d67bc:	9301      	str	r3, [sp, #4]
   d67be:	bd08      	pop	{r3, pc}
   d67c0:	00030228 	.word	0x00030228

000d67c4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b02      	ldr	r3, [pc, #8]	; (d67d0 <hal_i2c_lock+0xc>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d67cc:	9301      	str	r3, [sp, #4]
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	00030228 	.word	0x00030228

000d67d4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <hal_i2c_unlock+0xc>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	bd08      	pop	{r3, pc}
   d67e0:	00030228 	.word	0x00030228

000d67e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <hal_i2c_request_ex+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	00030228 	.word	0x00030228

000d67f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <inet_inet_ntop+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	695b      	ldr	r3, [r3, #20]
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	00030264 	.word	0x00030264

000d6804 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <netdb_freeaddrinfo+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	689b      	ldr	r3, [r3, #8]
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	00030268 	.word	0x00030268

000d6814 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <netdb_getaddrinfo+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	68db      	ldr	r3, [r3, #12]
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	00030268 	.word	0x00030268

000d6824 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <hal_spi_init+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	69db      	ldr	r3, [r3, #28]
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	00030230 	.word	0x00030230

000d6834 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <hal_spi_is_enabled+0xc>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	6a1b      	ldr	r3, [r3, #32]
   d683c:	9301      	str	r3, [sp, #4]
   d683e:	bd08      	pop	{r3, pc}
   d6840:	00030230 	.word	0x00030230

000d6844 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6844:	b508      	push	{r3, lr}
   d6846:	4b02      	ldr	r3, [pc, #8]	; (d6850 <hal_usart_init+0xc>)
   d6848:	681b      	ldr	r3, [r3, #0]
   d684a:	681b      	ldr	r3, [r3, #0]
   d684c:	9301      	str	r3, [sp, #4]
   d684e:	bd08      	pop	{r3, pc}
   d6850:	0003023c 	.word	0x0003023c

000d6854 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <hal_usart_write+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	68db      	ldr	r3, [r3, #12]
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	0003023c 	.word	0x0003023c

000d6864 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <hal_usart_available+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	691b      	ldr	r3, [r3, #16]
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	0003023c 	.word	0x0003023c

000d6874 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <hal_usart_read+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	695b      	ldr	r3, [r3, #20]
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	0003023c 	.word	0x0003023c

000d6884 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <hal_usart_peek+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	699b      	ldr	r3, [r3, #24]
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	0003023c 	.word	0x0003023c

000d6894 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <hal_usart_flush+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	69db      	ldr	r3, [r3, #28]
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	0003023c 	.word	0x0003023c

000d68a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <hal_usart_is_enabled+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	6a1b      	ldr	r3, [r3, #32]
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	0003023c 	.word	0x0003023c

000d68b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4b02      	ldr	r3, [pc, #8]	; (d68c0 <hal_usart_available_data_for_write+0xc>)
   d68b8:	681b      	ldr	r3, [r3, #0]
   d68ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d68bc:	9301      	str	r3, [sp, #4]
   d68be:	bd08      	pop	{r3, pc}
   d68c0:	0003023c 	.word	0x0003023c

000d68c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <HAL_USB_USART_Init+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	681b      	ldr	r3, [r3, #0]
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	0003024c 	.word	0x0003024c

000d68d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <HAL_USB_USART_Available_Data+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	691b      	ldr	r3, [r3, #16]
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	0003024c 	.word	0x0003024c

000d68e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	695b      	ldr	r3, [r3, #20]
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	0003024c 	.word	0x0003024c

000d68f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <HAL_USB_USART_Receive_Data+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	699b      	ldr	r3, [r3, #24]
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	0003024c 	.word	0x0003024c

000d6904 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <HAL_USB_USART_Send_Data+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	69db      	ldr	r3, [r3, #28]
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	0003024c 	.word	0x0003024c

000d6914 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <HAL_USB_USART_Flush_Data+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	6a1b      	ldr	r3, [r3, #32]
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	0003024c 	.word	0x0003024c

000d6924 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <panic_+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030260 	.word	0x00030260

000d6934 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <log_message_v+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030260 	.word	0x00030260

000d6944 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b03      	ldr	r3, [pc, #12]	; (d6954 <diag_get_source+0x10>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d694e:	9301      	str	r3, [sp, #4]
   d6950:	bd08      	pop	{r3, pc}
   d6952:	0000      	.short	0x0000
   d6954:	00030260 	.word	0x00030260

000d6958 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <system_mode+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	681b      	ldr	r3, [r3, #0]
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	00030220 	.word	0x00030220

000d6968 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b02      	ldr	r3, [pc, #8]	; (d6974 <set_system_mode+0xc>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	685b      	ldr	r3, [r3, #4]
   d6970:	9301      	str	r3, [sp, #4]
   d6972:	bd08      	pop	{r3, pc}
   d6974:	00030220 	.word	0x00030220

000d6978 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6978:	b508      	push	{r3, lr}
   d697a:	4b02      	ldr	r3, [pc, #8]	; (d6984 <system_delay_ms+0xc>)
   d697c:	681b      	ldr	r3, [r3, #0]
   d697e:	695b      	ldr	r3, [r3, #20]
   d6980:	9301      	str	r3, [sp, #4]
   d6982:	bd08      	pop	{r3, pc}
   d6984:	00030220 	.word	0x00030220

000d6988 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6988:	b508      	push	{r3, lr}
   d698a:	4b02      	ldr	r3, [pc, #8]	; (d6994 <system_thread_set_state+0xc>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6990:	9301      	str	r3, [sp, #4]
   d6992:	bd08      	pop	{r3, pc}
   d6994:	00030220 	.word	0x00030220

000d6998 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6998:	b508      	push	{r3, lr}
   d699a:	4b02      	ldr	r3, [pc, #8]	; (d69a4 <application_thread_current+0xc>)
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d69a0:	9301      	str	r3, [sp, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	00030220 	.word	0x00030220

000d69a8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d69a8:	b508      	push	{r3, lr}
   d69aa:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <application_thread_invoke+0xc>)
   d69ac:	681b      	ldr	r3, [r3, #0]
   d69ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d69b0:	9301      	str	r3, [sp, #4]
   d69b2:	bd08      	pop	{r3, pc}
   d69b4:	00030220 	.word	0x00030220

000d69b8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d69b8:	b508      	push	{r3, lr}
   d69ba:	4b02      	ldr	r3, [pc, #8]	; (d69c4 <system_thread_get_state+0xc>)
   d69bc:	681b      	ldr	r3, [r3, #0]
   d69be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d69c0:	9301      	str	r3, [sp, #4]
   d69c2:	bd08      	pop	{r3, pc}
   d69c4:	00030220 	.word	0x00030220

000d69c8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d69c8:	b508      	push	{r3, lr}
   d69ca:	4b02      	ldr	r3, [pc, #8]	; (d69d4 <system_notify_time_changed+0xc>)
   d69cc:	681b      	ldr	r3, [r3, #0]
   d69ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d69d0:	9301      	str	r3, [sp, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	00030220 	.word	0x00030220

000d69d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d69d8:	b508      	push	{r3, lr}
   d69da:	4b03      	ldr	r3, [pc, #12]	; (d69e8 <system_ctrl_set_app_request_handler+0x10>)
   d69dc:	681b      	ldr	r3, [r3, #0]
   d69de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d69e2:	9301      	str	r3, [sp, #4]
   d69e4:	bd08      	pop	{r3, pc}
   d69e6:	0000      	.short	0x0000
   d69e8:	00030220 	.word	0x00030220

000d69ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b03      	ldr	r3, [pc, #12]	; (d69fc <system_ctrl_set_result+0x10>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d69f6:	9301      	str	r3, [sp, #4]
   d69f8:	bd08      	pop	{r3, pc}
   d69fa:	0000      	.short	0x0000
   d69fc:	00030220 	.word	0x00030220

000d6a00 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b03      	ldr	r3, [pc, #12]	; (d6a10 <system_reset+0x10>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6a0a:	9301      	str	r3, [sp, #4]
   d6a0c:	bd08      	pop	{r3, pc}
   d6a0e:	0000      	.short	0x0000
   d6a10:	00030220 	.word	0x00030220

000d6a14 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6a14:	b508      	push	{r3, lr}
   d6a16:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <spark_variable+0xc>)
   d6a18:	681b      	ldr	r3, [r3, #0]
   d6a1a:	681b      	ldr	r3, [r3, #0]
   d6a1c:	9301      	str	r3, [sp, #4]
   d6a1e:	bd08      	pop	{r3, pc}
   d6a20:	00030244 	.word	0x00030244

000d6a24 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6a24:	b508      	push	{r3, lr}
   d6a26:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <spark_function+0xc>)
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	685b      	ldr	r3, [r3, #4]
   d6a2c:	9301      	str	r3, [sp, #4]
   d6a2e:	bd08      	pop	{r3, pc}
   d6a30:	00030244 	.word	0x00030244

000d6a34 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6a34:	b508      	push	{r3, lr}
   d6a36:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <spark_process+0xc>)
   d6a38:	681b      	ldr	r3, [r3, #0]
   d6a3a:	689b      	ldr	r3, [r3, #8]
   d6a3c:	9301      	str	r3, [sp, #4]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	00030244 	.word	0x00030244

000d6a44 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6a44:	b508      	push	{r3, lr}
   d6a46:	4b02      	ldr	r3, [pc, #8]	; (d6a50 <spark_cloud_flag_connected+0xc>)
   d6a48:	681b      	ldr	r3, [r3, #0]
   d6a4a:	695b      	ldr	r3, [r3, #20]
   d6a4c:	9301      	str	r3, [sp, #4]
   d6a4e:	bd08      	pop	{r3, pc}
   d6a50:	00030244 	.word	0x00030244

000d6a54 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6a54:	b508      	push	{r3, lr}
   d6a56:	4b02      	ldr	r3, [pc, #8]	; (d6a60 <spark_deviceID+0xc>)
   d6a58:	681b      	ldr	r3, [r3, #0]
   d6a5a:	69db      	ldr	r3, [r3, #28]
   d6a5c:	9301      	str	r3, [sp, #4]
   d6a5e:	bd08      	pop	{r3, pc}
   d6a60:	00030244 	.word	0x00030244

000d6a64 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6a64:	b508      	push	{r3, lr}
   d6a66:	4b02      	ldr	r3, [pc, #8]	; (d6a70 <spark_send_event+0xc>)
   d6a68:	681b      	ldr	r3, [r3, #0]
   d6a6a:	6a1b      	ldr	r3, [r3, #32]
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	bd08      	pop	{r3, pc}
   d6a70:	00030244 	.word	0x00030244

000d6a74 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b02      	ldr	r3, [pc, #8]	; (d6a80 <spark_subscribe+0xc>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a7c:	9301      	str	r3, [sp, #4]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	00030244 	.word	0x00030244

000d6a84 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6a84:	b508      	push	{r3, lr}
   d6a86:	4b02      	ldr	r3, [pc, #8]	; (d6a90 <spark_sync_time+0xc>)
   d6a88:	681b      	ldr	r3, [r3, #0]
   d6a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a8c:	9301      	str	r3, [sp, #4]
   d6a8e:	bd08      	pop	{r3, pc}
   d6a90:	00030244 	.word	0x00030244

000d6a94 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6a94:	b508      	push	{r3, lr}
   d6a96:	4b02      	ldr	r3, [pc, #8]	; (d6aa0 <spark_sync_time_pending+0xc>)
   d6a98:	681b      	ldr	r3, [r3, #0]
   d6a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a9c:	9301      	str	r3, [sp, #4]
   d6a9e:	bd08      	pop	{r3, pc}
   d6aa0:	00030244 	.word	0x00030244

000d6aa4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6aa4:	b508      	push	{r3, lr}
   d6aa6:	4b02      	ldr	r3, [pc, #8]	; (d6ab0 <spark_sync_time_last+0xc>)
   d6aa8:	681b      	ldr	r3, [r3, #0]
   d6aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6aac:	9301      	str	r3, [sp, #4]
   d6aae:	bd08      	pop	{r3, pc}
   d6ab0:	00030244 	.word	0x00030244

000d6ab4 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6ab4:	b508      	push	{r3, lr}
   d6ab6:	4b02      	ldr	r3, [pc, #8]	; (d6ac0 <spark_set_connection_property+0xc>)
   d6ab8:	681b      	ldr	r3, [r3, #0]
   d6aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6abc:	9301      	str	r3, [sp, #4]
   d6abe:	bd08      	pop	{r3, pc}
   d6ac0:	00030244 	.word	0x00030244

000d6ac4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6ac4:	b508      	push	{r3, lr}
   d6ac6:	4b02      	ldr	r3, [pc, #8]	; (d6ad0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6ac8:	681b      	ldr	r3, [r3, #0]
   d6aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6acc:	9301      	str	r3, [sp, #4]
   d6ace:	bd08      	pop	{r3, pc}
   d6ad0:	00030244 	.word	0x00030244

000d6ad4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ad4:	b508      	push	{r3, lr}
   d6ad6:	4b02      	ldr	r3, [pc, #8]	; (d6ae0 <network_connect+0xc>)
   d6ad8:	681b      	ldr	r3, [r3, #0]
   d6ada:	685b      	ldr	r3, [r3, #4]
   d6adc:	9301      	str	r3, [sp, #4]
   d6ade:	bd08      	pop	{r3, pc}
   d6ae0:	00030240 	.word	0x00030240

000d6ae4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6ae4:	b508      	push	{r3, lr}
   d6ae6:	4b02      	ldr	r3, [pc, #8]	; (d6af0 <network_connecting+0xc>)
   d6ae8:	681b      	ldr	r3, [r3, #0]
   d6aea:	689b      	ldr	r3, [r3, #8]
   d6aec:	9301      	str	r3, [sp, #4]
   d6aee:	bd08      	pop	{r3, pc}
   d6af0:	00030240 	.word	0x00030240

000d6af4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6af4:	b508      	push	{r3, lr}
   d6af6:	4b02      	ldr	r3, [pc, #8]	; (d6b00 <network_disconnect+0xc>)
   d6af8:	681b      	ldr	r3, [r3, #0]
   d6afa:	68db      	ldr	r3, [r3, #12]
   d6afc:	9301      	str	r3, [sp, #4]
   d6afe:	bd08      	pop	{r3, pc}
   d6b00:	00030240 	.word	0x00030240

000d6b04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6b04:	b508      	push	{r3, lr}
   d6b06:	4b02      	ldr	r3, [pc, #8]	; (d6b10 <network_ready+0xc>)
   d6b08:	681b      	ldr	r3, [r3, #0]
   d6b0a:	691b      	ldr	r3, [r3, #16]
   d6b0c:	9301      	str	r3, [sp, #4]
   d6b0e:	bd08      	pop	{r3, pc}
   d6b10:	00030240 	.word	0x00030240

000d6b14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6b14:	b508      	push	{r3, lr}
   d6b16:	4b02      	ldr	r3, [pc, #8]	; (d6b20 <network_on+0xc>)
   d6b18:	681b      	ldr	r3, [r3, #0]
   d6b1a:	695b      	ldr	r3, [r3, #20]
   d6b1c:	9301      	str	r3, [sp, #4]
   d6b1e:	bd08      	pop	{r3, pc}
   d6b20:	00030240 	.word	0x00030240

000d6b24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6b24:	b508      	push	{r3, lr}
   d6b26:	4b02      	ldr	r3, [pc, #8]	; (d6b30 <network_off+0xc>)
   d6b28:	681b      	ldr	r3, [r3, #0]
   d6b2a:	699b      	ldr	r3, [r3, #24]
   d6b2c:	9301      	str	r3, [sp, #4]
   d6b2e:	bd08      	pop	{r3, pc}
   d6b30:	00030240 	.word	0x00030240

000d6b34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6b34:	b508      	push	{r3, lr}
   d6b36:	4b02      	ldr	r3, [pc, #8]	; (d6b40 <network_listen+0xc>)
   d6b38:	681b      	ldr	r3, [r3, #0]
   d6b3a:	69db      	ldr	r3, [r3, #28]
   d6b3c:	9301      	str	r3, [sp, #4]
   d6b3e:	bd08      	pop	{r3, pc}
   d6b40:	00030240 	.word	0x00030240

000d6b44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6b44:	b508      	push	{r3, lr}
   d6b46:	4b02      	ldr	r3, [pc, #8]	; (d6b50 <network_listening+0xc>)
   d6b48:	681b      	ldr	r3, [r3, #0]
   d6b4a:	6a1b      	ldr	r3, [r3, #32]
   d6b4c:	9301      	str	r3, [sp, #4]
   d6b4e:	bd08      	pop	{r3, pc}
   d6b50:	00030240 	.word	0x00030240

000d6b54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6b54:	b508      	push	{r3, lr}
   d6b56:	4b02      	ldr	r3, [pc, #8]	; (d6b60 <network_set_listen_timeout+0xc>)
   d6b58:	681b      	ldr	r3, [r3, #0]
   d6b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b5c:	9301      	str	r3, [sp, #4]
   d6b5e:	bd08      	pop	{r3, pc}
   d6b60:	00030240 	.word	0x00030240

000d6b64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6b64:	b508      	push	{r3, lr}
   d6b66:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <network_get_listen_timeout+0xc>)
   d6b68:	681b      	ldr	r3, [r3, #0]
   d6b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6b6c:	9301      	str	r3, [sp, #4]
   d6b6e:	bd08      	pop	{r3, pc}
   d6b70:	00030240 	.word	0x00030240

000d6b74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6b74:	b508      	push	{r3, lr}
   d6b76:	4b02      	ldr	r3, [pc, #8]	; (d6b80 <malloc+0xc>)
   d6b78:	681b      	ldr	r3, [r3, #0]
   d6b7a:	681b      	ldr	r3, [r3, #0]
   d6b7c:	9301      	str	r3, [sp, #4]
   d6b7e:	bd08      	pop	{r3, pc}
   d6b80:	0003021c 	.word	0x0003021c

000d6b84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6b84:	b508      	push	{r3, lr}
   d6b86:	4b02      	ldr	r3, [pc, #8]	; (d6b90 <free+0xc>)
   d6b88:	681b      	ldr	r3, [r3, #0]
   d6b8a:	685b      	ldr	r3, [r3, #4]
   d6b8c:	9301      	str	r3, [sp, #4]
   d6b8e:	bd08      	pop	{r3, pc}
   d6b90:	0003021c 	.word	0x0003021c

000d6b94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6b94:	b508      	push	{r3, lr}
   d6b96:	4b02      	ldr	r3, [pc, #8]	; (d6ba0 <realloc+0xc>)
   d6b98:	681b      	ldr	r3, [r3, #0]
   d6b9a:	689b      	ldr	r3, [r3, #8]
   d6b9c:	9301      	str	r3, [sp, #4]
   d6b9e:	bd08      	pop	{r3, pc}
   d6ba0:	0003021c 	.word	0x0003021c

000d6ba4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6ba4:	b508      	push	{r3, lr}
   d6ba6:	4b02      	ldr	r3, [pc, #8]	; (d6bb0 <siprintf+0xc>)
   d6ba8:	681b      	ldr	r3, [r3, #0]
   d6baa:	691b      	ldr	r3, [r3, #16]
   d6bac:	9301      	str	r3, [sp, #4]
   d6bae:	bd08      	pop	{r3, pc}
   d6bb0:	0003021c 	.word	0x0003021c

000d6bb4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6bb4:	b508      	push	{r3, lr}
   d6bb6:	4b02      	ldr	r3, [pc, #8]	; (d6bc0 <snprintf+0xc>)
   d6bb8:	681b      	ldr	r3, [r3, #0]
   d6bba:	69db      	ldr	r3, [r3, #28]
   d6bbc:	9301      	str	r3, [sp, #4]
   d6bbe:	bd08      	pop	{r3, pc}
   d6bc0:	0003021c 	.word	0x0003021c

000d6bc4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6bc4:	b508      	push	{r3, lr}
   d6bc6:	4b02      	ldr	r3, [pc, #8]	; (d6bd0 <abort+0xc>)
   d6bc8:	681b      	ldr	r3, [r3, #0]
   d6bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6bcc:	9301      	str	r3, [sp, #4]
   d6bce:	bd08      	pop	{r3, pc}
   d6bd0:	0003021c 	.word	0x0003021c

000d6bd4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6bd4:	b508      	push	{r3, lr}
   d6bd6:	4b02      	ldr	r3, [pc, #8]	; (d6be0 <_malloc_r+0xc>)
   d6bd8:	681b      	ldr	r3, [r3, #0]
   d6bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6bdc:	9301      	str	r3, [sp, #4]
   d6bde:	bd08      	pop	{r3, pc}
   d6be0:	0003021c 	.word	0x0003021c

000d6be4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6be4:	b508      	push	{r3, lr}
   d6be6:	4b02      	ldr	r3, [pc, #8]	; (d6bf0 <newlib_impure_ptr_callback+0xc>)
   d6be8:	681b      	ldr	r3, [r3, #0]
   d6bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6bec:	9301      	str	r3, [sp, #4]
   d6bee:	bd08      	pop	{r3, pc}
   d6bf0:	0003021c 	.word	0x0003021c

000d6bf4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6bf4:	b508      	push	{r3, lr}
   d6bf6:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <strftime+0xc>)
   d6bf8:	681b      	ldr	r3, [r3, #0]
   d6bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6bfc:	9301      	str	r3, [sp, #4]
   d6bfe:	bd08      	pop	{r3, pc}
   d6c00:	0003021c 	.word	0x0003021c

000d6c04 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6c04:	b508      	push	{r3, lr}
   d6c06:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <localtime_r+0xc>)
   d6c08:	681b      	ldr	r3, [r3, #0]
   d6c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c0c:	9301      	str	r3, [sp, #4]
   d6c0e:	bd08      	pop	{r3, pc}
   d6c10:	0003021c 	.word	0x0003021c

000d6c14 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <gmtime_r+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	0003021c 	.word	0x0003021c

000d6c24 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <mktime+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	0003021c 	.word	0x0003021c

000d6c34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6c34:	2100      	movs	r1, #0
   d6c36:	f7ff be9f 	b.w	d6978 <system_delay_ms>

000d6c3a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6c3a:	b510      	push	{r4, lr}
      if (_M_empty())
   d6c3c:	6883      	ldr	r3, [r0, #8]
   d6c3e:	4604      	mov	r4, r0
   d6c40:	b90b      	cbnz	r3, d6c46 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6c42:	f001 fada 	bl	d81fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c46:	68c3      	ldr	r3, [r0, #12]
   d6c48:	4798      	blx	r3
      if (_M_manager)
   d6c4a:	68a3      	ldr	r3, [r4, #8]
   d6c4c:	b11b      	cbz	r3, d6c56 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6c4e:	2203      	movs	r2, #3
   d6c50:	4621      	mov	r1, r4
   d6c52:	4620      	mov	r0, r4
   d6c54:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6c56:	4620      	mov	r0, r4
   d6c58:	2110      	movs	r1, #16
}
   d6c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6c5e:	f001 bac6 	b.w	d81ee <_ZdlPvj>

000d6c62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6c62:	b510      	push	{r4, lr}
          _M_dispose();
   d6c64:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6c66:	4604      	mov	r4, r0
          _M_dispose();
   d6c68:	689b      	ldr	r3, [r3, #8]
   d6c6a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6c6c:	68a3      	ldr	r3, [r4, #8]
   d6c6e:	3b01      	subs	r3, #1
   d6c70:	60a3      	str	r3, [r4, #8]
   d6c72:	b92b      	cbnz	r3, d6c80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6c74:	6823      	ldr	r3, [r4, #0]
   d6c76:	4620      	mov	r0, r4
   d6c78:	68db      	ldr	r3, [r3, #12]
    }
   d6c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6c7e:	4718      	bx	r3
    }
   d6c80:	bd10      	pop	{r4, pc}

000d6c82 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6c82:	b510      	push	{r4, lr}
   d6c84:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6c86:	6800      	ldr	r0, [r0, #0]
   d6c88:	b108      	cbz	r0, d6c8e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6c8a:	f7ff fcc3 	bl	d6614 <os_mutex_recursive_destroy>
    }
   d6c8e:	4620      	mov	r0, r4
   d6c90:	bd10      	pop	{r4, pc}

000d6c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6c92:	680b      	ldr	r3, [r1, #0]
   d6c94:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6c96:	b113      	cbz	r3, d6c9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6c98:	685a      	ldr	r2, [r3, #4]
   d6c9a:	3201      	adds	r2, #1
   d6c9c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6c9e:	4770      	bx	lr

000d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6ca0:	b510      	push	{r4, lr}
   d6ca2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6ca4:	6800      	ldr	r0, [r0, #0]
   d6ca6:	b128      	cbz	r0, d6cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6ca8:	6843      	ldr	r3, [r0, #4]
   d6caa:	3b01      	subs	r3, #1
   d6cac:	6043      	str	r3, [r0, #4]
   d6cae:	b90b      	cbnz	r3, d6cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6cb0:	f7ff ffd7 	bl	d6c62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	bd10      	pop	{r4, pc}

000d6cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6cb8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6cba:	4c06      	ldr	r4, [pc, #24]	; (d6cd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6cbc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6cbe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6cc0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6cc2:	f7ff fc9f 	bl	d6604 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6cc6:	4620      	mov	r0, r4
   d6cc8:	4a03      	ldr	r2, [pc, #12]	; (d6cd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6cca:	4904      	ldr	r1, [pc, #16]	; (d6cdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6cd0:	f001 ba88 	b.w	d81e4 <__aeabi_atexit>
   d6cd4:	2003e5d8 	.word	0x2003e5d8
   d6cd8:	2003e428 	.word	0x2003e428
   d6cdc:	000d6c83 	.word	0x000d6c83

000d6ce0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6ce0:	2200      	movs	r2, #0
   d6ce2:	6840      	ldr	r0, [r0, #4]
   d6ce4:	4611      	mov	r1, r2
   d6ce6:	f7ff bf0d 	b.w	d6b04 <network_ready>

000d6cea <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6cea:	2200      	movs	r2, #0
   d6cec:	6840      	ldr	r0, [r0, #4]
   d6cee:	4611      	mov	r1, r2
   d6cf0:	f7ff bf28 	b.w	d6b44 <network_listening>

000d6cf4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6cf4:	2200      	movs	r2, #0
   d6cf6:	6840      	ldr	r0, [r0, #4]
   d6cf8:	4611      	mov	r1, r2
   d6cfa:	f7ff bf33 	b.w	d6b64 <network_get_listen_timeout>

000d6cfe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6cfe:	6840      	ldr	r0, [r0, #4]
   d6d00:	2200      	movs	r2, #0
   d6d02:	f7ff bf27 	b.w	d6b54 <network_set_listen_timeout>

000d6d06 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d06:	6840      	ldr	r0, [r0, #4]
   d6d08:	2200      	movs	r2, #0
   d6d0a:	f081 0101 	eor.w	r1, r1, #1
   d6d0e:	f7ff bf11 	b.w	d6b34 <network_listen>

000d6d12 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6d12:	2300      	movs	r3, #0
   d6d14:	6840      	ldr	r0, [r0, #4]
   d6d16:	461a      	mov	r2, r3
   d6d18:	4619      	mov	r1, r3
   d6d1a:	f7ff bf03 	b.w	d6b24 <network_off>

000d6d1e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6d1e:	2300      	movs	r3, #0
   d6d20:	6840      	ldr	r0, [r0, #4]
   d6d22:	461a      	mov	r2, r3
   d6d24:	4619      	mov	r1, r3
   d6d26:	f7ff bef5 	b.w	d6b14 <network_on>

000d6d2a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6d2a:	2200      	movs	r2, #0
   d6d2c:	6840      	ldr	r0, [r0, #4]
   d6d2e:	4611      	mov	r1, r2
   d6d30:	f7ff bed8 	b.w	d6ae4 <network_connecting>

000d6d34 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d34:	6840      	ldr	r0, [r0, #4]
   d6d36:	2200      	movs	r2, #0
   d6d38:	2102      	movs	r1, #2
   d6d3a:	f7ff bedb 	b.w	d6af4 <network_disconnect>

000d6d3e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6d3e:	2300      	movs	r3, #0
   d6d40:	6840      	ldr	r0, [r0, #4]
   d6d42:	461a      	mov	r2, r3
   d6d44:	f7ff bec6 	b.w	d6ad4 <network_connect>

000d6d48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6d48:	4b08      	ldr	r3, [pc, #32]	; (d6d6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6d4a:	b510      	push	{r4, lr}
   d6d4c:	2428      	movs	r4, #40	; 0x28
   d6d4e:	4622      	mov	r2, r4
   d6d50:	4618      	mov	r0, r3
   d6d52:	2100      	movs	r1, #0
   d6d54:	f001 ffae 	bl	d8cb4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6d58:	4b05      	ldr	r3, [pc, #20]	; (d6d70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6d5a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6d60:	6042      	str	r2, [r0, #4]
   d6d62:	2204      	movs	r2, #4
   d6d64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6d66:	4a03      	ldr	r2, [pc, #12]	; (d6d74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6d68:	601a      	str	r2, [r3, #0]
   d6d6a:	bd10      	pop	{r4, pc}
   d6d6c:	2003e5e4 	.word	0x2003e5e4
   d6d70:	2003e5dc 	.word	0x2003e5dc
   d6d74:	000db2a0 	.word	0x000db2a0

000d6d78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6d78:	4770      	bx	lr

000d6d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6d7a:	2000      	movs	r0, #0
   d6d7c:	4770      	bx	lr

000d6d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6d7e:	b510      	push	{r4, lr}
   d6d80:	2110      	movs	r1, #16
   d6d82:	4604      	mov	r4, r0
   d6d84:	f001 fa33 	bl	d81ee <_ZdlPvj>
   d6d88:	4620      	mov	r0, r4
   d6d8a:	bd10      	pop	{r4, pc}

000d6d8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6d8c:	b508      	push	{r3, lr}
      { delete this; }
   d6d8e:	f7ff fff6 	bl	d6d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6d92:	bd08      	pop	{r3, pc}

000d6d94 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6d94:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6d96:	2200      	movs	r2, #0
   d6d98:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6d9c:	6002      	str	r2, [r0, #0]
   d6d9e:	8084      	strh	r4, [r0, #4]
   d6da0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6da2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6da4:	680c      	ldr	r4, [r1, #0]
   d6da6:	8085      	strh	r5, [r0, #4]
   d6da8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6daa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6dac:	bd30      	pop	{r4, r5, pc}

000d6dae <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6dae:	b510      	push	{r4, lr}
   d6db0:	4604      	mov	r4, r0
    free((void*)msg_);
   d6db2:	6800      	ldr	r0, [r0, #0]
   d6db4:	f7ff fee6 	bl	d6b84 <free>
}
   d6db8:	4620      	mov	r0, r4
   d6dba:	bd10      	pop	{r4, pc}

000d6dbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6dbc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6dbe:	68c4      	ldr	r4, [r0, #12]
   d6dc0:	b1f4      	cbz	r4, d6e00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d6dc2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6dc4:	2b02      	cmp	r3, #2
   d6dc6:	d103      	bne.n	d6dd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6dc8:	f104 000c 	add.w	r0, r4, #12
   d6dcc:	f7ff ffef 	bl	d6dae <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6dd0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6dd2:	b135      	cbz	r5, d6de2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6dd4:	4628      	mov	r0, r5
   d6dd6:	f7fd fa19 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6dda:	2110      	movs	r1, #16
   d6ddc:	4628      	mov	r0, r5
   d6dde:	f001 fa06 	bl	d81ee <_ZdlPvj>
   d6de2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6de4:	b135      	cbz	r5, d6df4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6de6:	4628      	mov	r0, r5
   d6de8:	f7fd fa10 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6dec:	2110      	movs	r1, #16
   d6dee:	4628      	mov	r0, r5
   d6df0:	f001 f9fd 	bl	d81ee <_ZdlPvj>
   d6df4:	4620      	mov	r0, r4
   d6df6:	2114      	movs	r1, #20
   d6df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6dfc:	f001 b9f7 	b.w	d81ee <_ZdlPvj>
   d6e00:	bd38      	pop	{r3, r4, r5, pc}

000d6e02 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6e02:	b510      	push	{r4, lr}
   d6e04:	b088      	sub	sp, #32
   d6e06:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6e08:	4668      	mov	r0, sp
   d6e0a:	f000 fd5a 	bl	d78c2 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6e0e:	4669      	mov	r1, sp
   d6e10:	a804      	add	r0, sp, #16
   d6e12:	f000 fd79 	bl	d7908 <_ZN6StringC1ERKS_>
   d6e16:	a804      	add	r0, sp, #16
   d6e18:	47a0      	blx	r4
   d6e1a:	4604      	mov	r4, r0
   d6e1c:	a804      	add	r0, sp, #16
   d6e1e:	f000 fd05 	bl	d782c <_ZN6StringD1Ev>
    String p(param);
   d6e22:	4668      	mov	r0, sp
   d6e24:	f000 fd02 	bl	d782c <_ZN6StringD1Ev>
}
   d6e28:	4620      	mov	r0, r4
   d6e2a:	b008      	add	sp, #32
   d6e2c:	bd10      	pop	{r4, pc}

000d6e2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6e2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6e30:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6e36:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6e38:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6e3a:	461a      	mov	r2, r3
   d6e3c:	4669      	mov	r1, sp
   d6e3e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6e40:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6e44:	f8ad 4000 	strh.w	r4, [sp]
   d6e48:	f7ff fdec 	bl	d6a24 <spark_function>
}
   d6e4c:	b004      	add	sp, #16
   d6e4e:	bd10      	pop	{r4, pc}

000d6e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6e50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e52:	460e      	mov	r6, r1
   d6e54:	4604      	mov	r4, r0
   d6e56:	f856 3b04 	ldr.w	r3, [r6], #4
   d6e5a:	9300      	str	r3, [sp, #0]
   d6e5c:	460d      	mov	r5, r1
   d6e5e:	a801      	add	r0, sp, #4
   d6e60:	4631      	mov	r1, r6
   d6e62:	f7ff ff16 	bl	d6c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6e66:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6e68:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6e6a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6e6c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6e6e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6e70:	2300      	movs	r3, #0
   d6e72:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6e74:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6e76:	f7ff ff13 	bl	d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e7a:	4630      	mov	r0, r6
   d6e7c:	f7ff ff10 	bl	d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6e80:	4628      	mov	r0, r5
   d6e82:	2108      	movs	r1, #8
   d6e84:	f001 f9b3 	bl	d81ee <_ZdlPvj>
        return p;
    }
   d6e88:	4620      	mov	r0, r4
   d6e8a:	b002      	add	sp, #8
   d6e8c:	bd70      	pop	{r4, r5, r6, pc}

000d6e8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6e8e:	b513      	push	{r0, r1, r4, lr}
   d6e90:	460b      	mov	r3, r1
   d6e92:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e94:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6e98:	466c      	mov	r4, sp
   d6e9a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6e9e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6ea2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6eaa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6eae:	b002      	add	sp, #8
   d6eb0:	bd10      	pop	{r4, pc}

000d6eb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6eb2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6eb4:	b510      	push	{r4, lr}
      if (_M_empty())
   d6eb6:	b90a      	cbnz	r2, d6ebc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6eb8:	f001 f99f 	bl	d81fa <_ZSt25__throw_bad_function_callv>
    }
   d6ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ec0:	68c3      	ldr	r3, [r0, #12]
   d6ec2:	4718      	bx	r3

000d6ec4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ec4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6ec6:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6ec8:	f100 0110 	add.w	r1, r0, #16
   d6ecc:	f7ff fff1 	bl	d6eb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6ed0:	bd08      	pop	{r3, pc}

000d6ed2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6ed2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6ed4:	b510      	push	{r4, lr}
      if (_M_empty())
   d6ed6:	b90a      	cbnz	r2, d6edc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6ed8:	f001 f98f 	bl	d81fa <_ZSt25__throw_bad_function_callv>
    }
   d6edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ee0:	68c3      	ldr	r3, [r0, #12]
   d6ee2:	4718      	bx	r3

000d6ee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ee4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6ee6:	6800      	ldr	r0, [r0, #0]
   d6ee8:	f100 0110 	add.w	r1, r0, #16
   d6eec:	f7ff fff1 	bl	d6ed2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6ef0:	bd08      	pop	{r3, pc}
	...

000d6ef4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6ef4:	b538      	push	{r3, r4, r5, lr}
   d6ef6:	2300      	movs	r3, #0
   d6ef8:	4604      	mov	r4, r0
   d6efa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6efc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6efe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6f00:	f7fd f8c9 	bl	d4096 <_Znwj>
   d6f04:	b128      	cbz	r0, d6f12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6f06:	2301      	movs	r3, #1
   d6f08:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6f0c:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6f0e:	6003      	str	r3, [r0, #0]
   d6f10:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6f12:	6020      	str	r0, [r4, #0]
	}
   d6f14:	4620      	mov	r0, r4
   d6f16:	bd38      	pop	{r3, r4, r5, pc}
   d6f18:	000db2d4 	.word	0x000db2d4

000d6f1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6f1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6f1e:	2300      	movs	r3, #0
   d6f20:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6f22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6f24:	4604      	mov	r4, r0
   d6f26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6f28:	b12b      	cbz	r3, d6f36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6f2a:	2202      	movs	r2, #2
   d6f2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6f2e:	68eb      	ldr	r3, [r5, #12]
   d6f30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6f32:	68ab      	ldr	r3, [r5, #8]
   d6f34:	60a3      	str	r3, [r4, #8]
    }
   d6f36:	4620      	mov	r0, r4
   d6f38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f3e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6f40:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6f42:	4668      	mov	r0, sp
   d6f44:	f7ff ff26 	bl	d6d94 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6f48:	f04f 0302 	mov.w	r3, #2
   d6f4c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6f50:	2a00      	cmp	r2, #0
   d6f52:	d103      	bne.n	d6f5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6f54:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6f58:	2900      	cmp	r1, #0
   d6f5a:	d1f7      	bne.n	d6f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6f5c:	d125      	bne.n	d6faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6f5e:	f104 050c 	add.w	r5, r4, #12
   d6f62:	4669      	mov	r1, sp
   d6f64:	4628      	mov	r0, r5
   d6f66:	f7ff ff15 	bl	d6d94 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6f6a:	f3bf 8f5b 	dmb	ish
   d6f6e:	2301      	movs	r3, #1
   d6f70:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6f72:	2000      	movs	r0, #0
   d6f74:	f104 0308 	add.w	r3, r4, #8
   d6f78:	f3bf 8f5b 	dmb	ish
   d6f7c:	e853 6f00 	ldrex	r6, [r3]
   d6f80:	e843 0200 	strex	r2, r0, [r3]
   d6f84:	2a00      	cmp	r2, #0
   d6f86:	d1f9      	bne.n	d6f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6f88:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6f8c:	b16e      	cbz	r6, d6faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6f8e:	f7ff fd03 	bl	d6998 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6f92:	b178      	cbz	r0, d6fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6f94:	4629      	mov	r1, r5
   d6f96:	4630      	mov	r0, r6
   d6f98:	f7ff ff8b 	bl	d6eb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6f9c:	4630      	mov	r0, r6
   d6f9e:	f7fd f935 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6fa2:	2110      	movs	r1, #16
   d6fa4:	4630      	mov	r0, r6
   d6fa6:	f001 f922 	bl	d81ee <_ZdlPvj>
        p_->setError(std::move(error));
   d6faa:	4668      	mov	r0, sp
   d6fac:	f7ff feff 	bl	d6dae <_ZN8particle5ErrorD1Ev>
    }
   d6fb0:	b009      	add	sp, #36	; 0x24
   d6fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6fb4:	4631      	mov	r1, r6
   d6fb6:	a802      	add	r0, sp, #8
   d6fb8:	f7ff ffb0 	bl	d6f1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6fbc:	68e0      	ldr	r0, [r4, #12]
   d6fbe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6fc2:	b108      	cbz	r0, d6fc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6fc4:	f001 feb4 	bl	d8d30 <strdup>
        type_(type) {
   d6fc8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6fca:	2010      	movs	r0, #16
   d6fcc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6fd0:	f7fd f861 	bl	d4096 <_Znwj>
   d6fd4:	4605      	mov	r5, r0
   d6fd6:	b1e8      	cbz	r0, d7014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6fd8:	2700      	movs	r7, #0
   d6fda:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fdc:	2018      	movs	r0, #24
   d6fde:	f7fd f85a 	bl	d4096 <_Znwj>
   d6fe2:	4604      	mov	r4, r0
   d6fe4:	b188      	cbz	r0, d700a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6fe6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6fe8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6fea:	a802      	add	r0, sp, #8
   d6fec:	f7ff ff4f 	bl	d6e8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ff0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6ff2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ff4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ff6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6ff8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6ffa:	a906      	add	r1, sp, #24
   d6ffc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ffe:	60e3      	str	r3, [r4, #12]
   d7000:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7004:	9205      	str	r2, [sp, #20]
   d7006:	f7ff fec5 	bl	d6d94 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d700a:	4b08      	ldr	r3, [pc, #32]	; (d702c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d700c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d700e:	4b08      	ldr	r3, [pc, #32]	; (d7030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7010:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7012:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7014:	a806      	add	r0, sp, #24
   d7016:	f7ff feca 	bl	d6dae <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d701a:	a802      	add	r0, sp, #8
   d701c:	f7fd f8f6 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7020:	2200      	movs	r2, #0
   d7022:	4629      	mov	r1, r5
   d7024:	4803      	ldr	r0, [pc, #12]	; (d7034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7026:	f7ff fcbf 	bl	d69a8 <application_thread_invoke>
   d702a:	e7b7      	b.n	d6f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d702c:	000d6ec5 	.word	0x000d6ec5
   d7030:	000d715d 	.word	0x000d715d
   d7034:	000d6c3b 	.word	0x000d6c3b

000d7038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d703c:	b08a      	sub	sp, #40	; 0x28
   d703e:	4605      	mov	r5, r0
   d7040:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7044:	460c      	mov	r4, r1
   d7046:	4617      	mov	r7, r2
   d7048:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d704a:	f7ff fcfb 	bl	d6a44 <spark_cloud_flag_connected>
   d704e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7050:	4682      	mov	sl, r0
   d7052:	bb38      	cbnz	r0, d70a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7054:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7058:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d705a:	a905      	add	r1, sp, #20
   d705c:	4630      	mov	r0, r6
   d705e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7062:	f7ff fe97 	bl	d6d94 <_ZN8particle5ErrorC1EOS0_>
   d7066:	2014      	movs	r0, #20
   d7068:	f7fd f815 	bl	d4096 <_Znwj>
   d706c:	4604      	mov	r4, r0
   d706e:	b148      	cbz	r0, d7084 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7070:	2302      	movs	r3, #2
   d7072:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7074:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7076:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d707a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d707c:	4631      	mov	r1, r6
   d707e:	300c      	adds	r0, #12
   d7080:	f7ff fe88 	bl	d6d94 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7084:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7086:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7088:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d708c:	f7ff ff32 	bl	d6ef4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7090:	4630      	mov	r0, r6
   d7092:	f7ff fe8c 	bl	d6dae <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7096:	a805      	add	r0, sp, #20
   d7098:	f7ff fe89 	bl	d6dae <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d709c:	4628      	mov	r0, r5
   d709e:	b00a      	add	sp, #40	; 0x28
   d70a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d70a4:	230c      	movs	r3, #12
   d70a6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d70aa:	2014      	movs	r0, #20
   d70ac:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d70b0:	9307      	str	r3, [sp, #28]
   d70b2:	f7fc fff0 	bl	d4096 <_Znwj>
   d70b6:	4601      	mov	r1, r0
   d70b8:	b128      	cbz	r0, d70c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d70ba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d70be:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d70c2:	f880 a001 	strb.w	sl, [r0, #1]
   d70c6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d70c8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d70ca:	f7ff ff13 	bl	d6ef4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d70ce:	4b22      	ldr	r3, [pc, #136]	; (d7158 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d70d0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d70d2:	2008      	movs	r0, #8
   d70d4:	f7fc ffdf 	bl	d4096 <_Znwj>
   d70d8:	4682      	mov	sl, r0
   d70da:	b128      	cbz	r0, d70e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70dc:	9b03      	ldr	r3, [sp, #12]
   d70de:	f840 3b04 	str.w	r3, [r0], #4
   d70e2:	a904      	add	r1, sp, #16
   d70e4:	f7ff fdd5 	bl	d6c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d70e8:	9600      	str	r6, [sp, #0]
   d70ea:	fa5f f389 	uxtb.w	r3, r9
   d70ee:	4642      	mov	r2, r8
   d70f0:	4639      	mov	r1, r7
   d70f2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d70f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d70f8:	f7ff fcb4 	bl	d6a64 <spark_send_event>
   d70fc:	b9b8      	cbnz	r0, d712e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d70fe:	9b03      	ldr	r3, [sp, #12]
   d7100:	785b      	ldrb	r3, [r3, #1]
   d7102:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7106:	b993      	cbnz	r3, d712e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7108:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d710c:	a905      	add	r1, sp, #20
   d710e:	a803      	add	r0, sp, #12
   d7110:	9205      	str	r2, [sp, #20]
   d7112:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7116:	f7ff ff11 	bl	d6f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d711a:	a805      	add	r0, sp, #20
   d711c:	f7ff fe47 	bl	d6dae <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7120:	a805      	add	r0, sp, #20
   d7122:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7124:	f7ff fe94 	bl	d6e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7128:	a806      	add	r0, sp, #24
   d712a:	f7ff fdb9 	bl	d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d712e:	9b03      	ldr	r3, [sp, #12]
   d7130:	9305      	str	r3, [sp, #20]
   d7132:	a904      	add	r1, sp, #16
   d7134:	a806      	add	r0, sp, #24
   d7136:	f7ff fdac 	bl	d6c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d713a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d713c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d713e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7140:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d7142:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7144:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7146:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7148:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d714a:	f7ff fda9 	bl	d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d714e:	a804      	add	r0, sp, #16
   d7150:	f7ff fda6 	bl	d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7154:	e7a2      	b.n	d709c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7156:	bf00      	nop
   d7158:	000d7221 	.word	0x000d7221

000d715c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d715c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d715e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7160:	4605      	mov	r5, r0
	  switch (__op)
   d7162:	d007      	beq.n	d7174 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7164:	2a03      	cmp	r2, #3
   d7166:	d018      	beq.n	d719a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7168:	2a01      	cmp	r2, #1
   d716a:	d101      	bne.n	d7170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d716c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d716e:	6003      	str	r3, [r0, #0]
	}
   d7170:	2000      	movs	r0, #0
   d7172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7174:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7176:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7178:	f7fc ff8d 	bl	d4096 <_Znwj>
   d717c:	4604      	mov	r4, r0
   d717e:	b150      	cbz	r0, d7196 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7180:	4631      	mov	r1, r6
   d7182:	f7ff fecb 	bl	d6f1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7186:	6930      	ldr	r0, [r6, #16]
   d7188:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d718c:	b108      	cbz	r0, d7192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d718e:	f001 fdcf 	bl	d8d30 <strdup>
        type_(type) {
   d7192:	6120      	str	r0, [r4, #16]
   d7194:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7196:	602c      	str	r4, [r5, #0]
	}
   d7198:	e7ea      	b.n	d7170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d719a:	6804      	ldr	r4, [r0, #0]
   d719c:	2c00      	cmp	r4, #0
   d719e:	d0e7      	beq.n	d7170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d71a0:	f104 0010 	add.w	r0, r4, #16
   d71a4:	f7ff fe03 	bl	d6dae <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d71a8:	4620      	mov	r0, r4
   d71aa:	f7fd f82f 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d71ae:	2118      	movs	r1, #24
   d71b0:	4620      	mov	r0, r4
   d71b2:	f001 f81c 	bl	d81ee <_ZdlPvj>
   d71b6:	e7db      	b.n	d7170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d71b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d71b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d71ba:	2300      	movs	r3, #0
   d71bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d71be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d71c0:	4604      	mov	r4, r0
   d71c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d71c4:	b12b      	cbz	r3, d71d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d71c6:	2202      	movs	r2, #2
   d71c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d71ca:	68eb      	ldr	r3, [r5, #12]
   d71cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d71ce:	68ab      	ldr	r3, [r5, #8]
   d71d0:	60a3      	str	r3, [r4, #8]
    }
   d71d2:	4620      	mov	r0, r4
   d71d4:	bd38      	pop	{r3, r4, r5, pc}

000d71d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d71d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d71d8:	b570      	push	{r4, r5, r6, lr}
   d71da:	4604      	mov	r4, r0
	  switch (__op)
   d71dc:	d007      	beq.n	d71ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d71de:	2a03      	cmp	r2, #3
   d71e0:	d012      	beq.n	d7208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d71e2:	2a01      	cmp	r2, #1
   d71e4:	d101      	bne.n	d71ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d71e6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d71e8:	6003      	str	r3, [r0, #0]
	}
   d71ea:	2000      	movs	r0, #0
   d71ec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d71ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d71f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d71f2:	f7fc ff50 	bl	d4096 <_Znwj>
   d71f6:	4605      	mov	r5, r0
   d71f8:	b120      	cbz	r0, d7204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d71fa:	4631      	mov	r1, r6
   d71fc:	f7ff ffdc 	bl	d71b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7200:	7c33      	ldrb	r3, [r6, #16]
   d7202:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7204:	6025      	str	r5, [r4, #0]
	}
   d7206:	e7f0      	b.n	d71ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7208:	6804      	ldr	r4, [r0, #0]
   d720a:	2c00      	cmp	r4, #0
   d720c:	d0ed      	beq.n	d71ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d720e:	4620      	mov	r0, r4
   d7210:	f7fc fffc 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7214:	2114      	movs	r1, #20
   d7216:	4620      	mov	r0, r4
   d7218:	f000 ffe9 	bl	d81ee <_ZdlPvj>
   d721c:	e7e5      	b.n	d71ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7220:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7222:	b089      	sub	sp, #36	; 0x24
   d7224:	4604      	mov	r4, r0
   d7226:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7228:	a801      	add	r0, sp, #4
   d722a:	4611      	mov	r1, r2
   d722c:	f7ff fe10 	bl	d6e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7230:	b1a4      	cbz	r4, d725c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7232:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7234:	b11d      	cbz	r5, d723e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7236:	4628      	mov	r0, r5
   d7238:	f001 fd7a 	bl	d8d30 <strdup>
   d723c:	4605      	mov	r5, r0
   d723e:	a801      	add	r0, sp, #4
   d7240:	a903      	add	r1, sp, #12
        type_(type) {
   d7242:	9503      	str	r5, [sp, #12]
   d7244:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7248:	f7ff fe78 	bl	d6f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d724c:	a803      	add	r0, sp, #12
   d724e:	f7ff fdae 	bl	d6dae <_ZN8particle5ErrorD1Ev>
   d7252:	a802      	add	r0, sp, #8
   d7254:	f7ff fd24 	bl	d6ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7258:	b009      	add	sp, #36	; 0x24
   d725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d725c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d725e:	2301      	movs	r3, #1
   d7260:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7264:	2a00      	cmp	r2, #0
   d7266:	d103      	bne.n	d7270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7268:	e8c5 3f41 	strexb	r1, r3, [r5]
   d726c:	2900      	cmp	r1, #0
   d726e:	d1f7      	bne.n	d7260 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7270:	d1ef      	bne.n	d7252 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7272:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7274:	f3bf 8f5b 	dmb	ish
   d7278:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d727a:	1d2b      	adds	r3, r5, #4
   d727c:	f3bf 8f5b 	dmb	ish
   d7280:	e853 6f00 	ldrex	r6, [r3]
   d7284:	e843 4200 	strex	r2, r4, [r3]
   d7288:	2a00      	cmp	r2, #0
   d728a:	d1f9      	bne.n	d7280 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d728c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7290:	2e00      	cmp	r6, #0
   d7292:	d0de      	beq.n	d7252 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7294:	4620      	mov	r0, r4
   d7296:	f7ff fb7f 	bl	d6998 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d729a:	4607      	mov	r7, r0
   d729c:	b160      	cbz	r0, d72b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d729e:	f105 010c 	add.w	r1, r5, #12
   d72a2:	4630      	mov	r0, r6
   d72a4:	f7ff fe15 	bl	d6ed2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d72a8:	4630      	mov	r0, r6
   d72aa:	f7fc ffaf 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d72ae:	2110      	movs	r1, #16
   d72b0:	4630      	mov	r0, r6
   d72b2:	f000 ff9c 	bl	d81ee <_ZdlPvj>
   d72b6:	e7cc      	b.n	d7252 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d72b8:	4631      	mov	r1, r6
   d72ba:	a803      	add	r0, sp, #12
   d72bc:	f7ff ff7c 	bl	d71b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d72c0:	7b2b      	ldrb	r3, [r5, #12]
   d72c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d72c6:	2010      	movs	r0, #16
   d72c8:	f7fc fee5 	bl	d4096 <_Znwj>
   d72cc:	4605      	mov	r5, r0
   d72ce:	b1d0      	cbz	r0, d7306 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d72d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d72d2:	2014      	movs	r0, #20
   d72d4:	f7fc fedf 	bl	d4096 <_Znwj>
   d72d8:	4604      	mov	r4, r0
   d72da:	b178      	cbz	r0, d72fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d72dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d72de:	4601      	mov	r1, r0
   d72e0:	a803      	add	r0, sp, #12
   d72e2:	f7ff fdd4 	bl	d6e8e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d72e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d72ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d72ee:	9205      	str	r2, [sp, #20]
   d72f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d72f2:	60e3      	str	r3, [r4, #12]
   d72f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d72f8:	9206      	str	r2, [sp, #24]
   d72fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d72fc:	4b06      	ldr	r3, [pc, #24]	; (d7318 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d72fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7300:	4b06      	ldr	r3, [pc, #24]	; (d731c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7302:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7304:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7306:	a803      	add	r0, sp, #12
   d7308:	f7fc ff80 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d730c:	2200      	movs	r2, #0
   d730e:	4629      	mov	r1, r5
   d7310:	4803      	ldr	r0, [pc, #12]	; (d7320 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d7312:	f7ff fb49 	bl	d69a8 <application_thread_invoke>
   d7316:	e7c7      	b.n	d72a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7318:	000d6ee5 	.word	0x000d6ee5
   d731c:	000d71d7 	.word	0x000d71d7
   d7320:	000d6c3b 	.word	0x000d6c3b

000d7324 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7324:	2200      	movs	r2, #0
   d7326:	6840      	ldr	r0, [r0, #4]
   d7328:	4611      	mov	r1, r2
   d732a:	f7ff bc0b 	b.w	d6b44 <network_listening>

000d732e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d732e:	2200      	movs	r2, #0
   d7330:	6840      	ldr	r0, [r0, #4]
   d7332:	4611      	mov	r1, r2
   d7334:	f7ff bc16 	b.w	d6b64 <network_get_listen_timeout>

000d7338 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7338:	6840      	ldr	r0, [r0, #4]
   d733a:	2200      	movs	r2, #0
   d733c:	f7ff bc0a 	b.w	d6b54 <network_set_listen_timeout>

000d7340 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7340:	6840      	ldr	r0, [r0, #4]
   d7342:	2200      	movs	r2, #0
   d7344:	f081 0101 	eor.w	r1, r1, #1
   d7348:	f7ff bbf4 	b.w	d6b34 <network_listen>

000d734c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d734c:	2300      	movs	r3, #0
   d734e:	6840      	ldr	r0, [r0, #4]
   d7350:	461a      	mov	r2, r3
   d7352:	4619      	mov	r1, r3
   d7354:	f7ff bbe6 	b.w	d6b24 <network_off>

000d7358 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7358:	2300      	movs	r3, #0
   d735a:	6840      	ldr	r0, [r0, #4]
   d735c:	461a      	mov	r2, r3
   d735e:	4619      	mov	r1, r3
   d7360:	f7ff bbd8 	b.w	d6b14 <network_on>

000d7364 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7364:	2200      	movs	r2, #0
   d7366:	6840      	ldr	r0, [r0, #4]
   d7368:	4611      	mov	r1, r2
   d736a:	f7ff bbcb 	b.w	d6b04 <network_ready>

000d736e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d736e:	2200      	movs	r2, #0
   d7370:	6840      	ldr	r0, [r0, #4]
   d7372:	4611      	mov	r1, r2
   d7374:	f7ff bbb6 	b.w	d6ae4 <network_connecting>

000d7378 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7378:	6840      	ldr	r0, [r0, #4]
   d737a:	2200      	movs	r2, #0
   d737c:	2102      	movs	r1, #2
   d737e:	f7ff bbb9 	b.w	d6af4 <network_disconnect>

000d7382 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7382:	2300      	movs	r3, #0
   d7384:	6840      	ldr	r0, [r0, #4]
   d7386:	461a      	mov	r2, r3
   d7388:	f7ff bba4 	b.w	d6ad4 <network_connect>

000d738c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d738c:	4b02      	ldr	r3, [pc, #8]	; (d7398 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d738e:	2203      	movs	r2, #3
   d7390:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7392:	4a02      	ldr	r2, [pc, #8]	; (d739c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7394:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7396:	4770      	bx	lr
   d7398:	2003e60c 	.word	0x2003e60c
   d739c:	000db2f0 	.word	0x000db2f0

000d73a0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d73a0:	4770      	bx	lr

000d73a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d73a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73a4:	4606      	mov	r6, r0
   d73a6:	4615      	mov	r5, r2
   d73a8:	460c      	mov	r4, r1
   d73aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d73ac:	42bc      	cmp	r4, r7
   d73ae:	d006      	beq.n	d73be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d73b0:	6833      	ldr	r3, [r6, #0]
   d73b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d73b6:	689b      	ldr	r3, [r3, #8]
   d73b8:	4630      	mov	r0, r6
   d73ba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d73bc:	e7f6      	b.n	d73ac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d73be:	4628      	mov	r0, r5
   d73c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73c2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d73c2:	7c00      	ldrb	r0, [r0, #16]
   d73c4:	2200      	movs	r2, #0
   d73c6:	f7ff b9c5 	b.w	d6754 <hal_i2c_write>

000d73ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d73ca:	7c00      	ldrb	r0, [r0, #16]
   d73cc:	2100      	movs	r1, #0
   d73ce:	f7ff b9c9 	b.w	d6764 <hal_i2c_available>

000d73d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d73d2:	7c00      	ldrb	r0, [r0, #16]
   d73d4:	2100      	movs	r1, #0
   d73d6:	f7ff b9cd 	b.w	d6774 <hal_i2c_read>

000d73da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d73da:	7c00      	ldrb	r0, [r0, #16]
   d73dc:	2100      	movs	r1, #0
   d73de:	f7ff b9d1 	b.w	d6784 <hal_i2c_peek>

000d73e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d73e2:	7c00      	ldrb	r0, [r0, #16]
   d73e4:	2100      	movs	r1, #0
   d73e6:	f7ff b9d5 	b.w	d6794 <hal_i2c_flush>

000d73ea <_ZN7TwoWireD0Ev>:
   d73ea:	b510      	push	{r4, lr}
   d73ec:	2114      	movs	r1, #20
   d73ee:	4604      	mov	r4, r0
   d73f0:	f000 fefd 	bl	d81ee <_ZdlPvj>
   d73f4:	4620      	mov	r0, r4
   d73f6:	bd10      	pop	{r4, pc}

000d73f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d73f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d73fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d73fe:	4604      	mov	r4, r0
   d7400:	4608      	mov	r0, r1
   d7402:	2100      	movs	r1, #0
   d7404:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7408:	4b03      	ldr	r3, [pc, #12]	; (d7418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d740a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d740c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d740e:	4611      	mov	r1, r2
   d7410:	f7ff f9d0 	bl	d67b4 <hal_i2c_init>
}
   d7414:	4620      	mov	r0, r4
   d7416:	bd10      	pop	{r4, pc}
   d7418:	000db324 	.word	0x000db324

000d741c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d741c:	2300      	movs	r3, #0
   d741e:	7c00      	ldrb	r0, [r0, #16]
   d7420:	461a      	mov	r2, r3
   d7422:	4619      	mov	r1, r3
   d7424:	f7ff b97e 	b.w	d6724 <hal_i2c_begin>

000d7428 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d742a:	2200      	movs	r2, #0
   d742c:	2314      	movs	r3, #20
   d742e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7432:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7436:	780b      	ldrb	r3, [r1, #0]
   d7438:	f88d 3008 	strb.w	r3, [sp, #8]
   d743c:	684b      	ldr	r3, [r1, #4]
   d743e:	9303      	str	r3, [sp, #12]
   d7440:	68cb      	ldr	r3, [r1, #12]
   d7442:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7444:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7446:	7a0b      	ldrb	r3, [r1, #8]
   d7448:	9305      	str	r3, [sp, #20]
   d744a:	a901      	add	r1, sp, #4
   d744c:	f7ff f9ca 	bl	d67e4 <hal_i2c_request_ex>
}
   d7450:	b007      	add	sp, #28
   d7452:	f85d fb04 	ldr.w	pc, [sp], #4

000d7456 <_ZN7TwoWire11requestFromEhjh>:
{
   d7456:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7458:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d745a:	f88d 1000 	strb.w	r1, [sp]
   d745e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7462:	9103      	str	r1, [sp, #12]
   d7464:	bf18      	it	ne
   d7466:	2301      	movne	r3, #1
   d7468:	4669      	mov	r1, sp
    size_ = size;
   d746a:	9201      	str	r2, [sp, #4]
   d746c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7470:	f7ff ffda 	bl	d7428 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7474:	b005      	add	sp, #20
   d7476:	f85d fb04 	ldr.w	pc, [sp], #4

000d747a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d747a:	2301      	movs	r3, #1
   d747c:	f7ff bfeb 	b.w	d7456 <_ZN7TwoWire11requestFromEhjh>

000d7480 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7480:	7c00      	ldrb	r0, [r0, #16]
   d7482:	2200      	movs	r2, #0
   d7484:	f7ff b956 	b.w	d6734 <hal_i2c_begin_transmission>

000d7488 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7488:	b2c9      	uxtb	r1, r1
   d748a:	f7ff bff9 	b.w	d7480 <_ZN7TwoWire17beginTransmissionEh>

000d748e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d748e:	7c00      	ldrb	r0, [r0, #16]
   d7490:	2200      	movs	r2, #0
   d7492:	f7ff b957 	b.w	d6744 <hal_i2c_end_transmission>

000d7496 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7496:	2101      	movs	r1, #1
   d7498:	f7ff bff9 	b.w	d748e <_ZN7TwoWire15endTransmissionEh>

000d749c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d749c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d749e:	2100      	movs	r1, #0
   d74a0:	7c00      	ldrb	r0, [r0, #16]
   d74a2:	f7ff f98f 	bl	d67c4 <hal_i2c_lock>
}
   d74a6:	fab0 f080 	clz	r0, r0
   d74aa:	0940      	lsrs	r0, r0, #5
   d74ac:	bd08      	pop	{r3, pc}

000d74ae <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d74ae:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d74b0:	2100      	movs	r1, #0
   d74b2:	7c00      	ldrb	r0, [r0, #16]
   d74b4:	f7ff f98e 	bl	d67d4 <hal_i2c_unlock>
}
   d74b8:	fab0 f080 	clz	r0, r0
   d74bc:	0940      	lsrs	r0, r0, #5
   d74be:	bd08      	pop	{r3, pc}

000d74c0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d74c0:	4700      	bx	r0
	...

000d74c4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d74c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d74c8:	2400      	movs	r4, #0
{
   d74ca:	461d      	mov	r5, r3
   d74cc:	460f      	mov	r7, r1
   d74ce:	4690      	mov	r8, r2
   d74d0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d74d2:	f7ff f91f 	bl	d6714 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d74d6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d74d8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d74dc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d74e0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d74e4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d74e8:	bfa2      	ittt	ge
   d74ea:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d74ee:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d74f2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d74f4:	4907      	ldr	r1, [pc, #28]	; (d7514 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d74f6:	9400      	str	r4, [sp, #0]
   d74f8:	4643      	mov	r3, r8
   d74fa:	463a      	mov	r2, r7
   d74fc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d74fe:	bfa8      	it	ge
   d7500:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7504:	f7ff f8fe 	bl	d6704 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7508:	fab0 f080 	clz	r0, r0
   d750c:	0940      	lsrs	r0, r0, #5
   d750e:	b004      	add	sp, #16
   d7510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7514:	000d74c1 	.word	0x000d74c1

000d7518 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7518:	4770      	bx	lr

000d751a <_ZN9IPAddressD0Ev>:
   d751a:	b510      	push	{r4, lr}
   d751c:	2118      	movs	r1, #24
   d751e:	4604      	mov	r4, r0
   d7520:	f000 fe65 	bl	d81ee <_ZdlPvj>
   d7524:	4620      	mov	r0, r4
   d7526:	bd10      	pop	{r4, pc}

000d7528 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7528:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d752a:	7d03      	ldrb	r3, [r0, #20]
   d752c:	2b06      	cmp	r3, #6
{
   d752e:	b08d      	sub	sp, #52	; 0x34
   d7530:	460e      	mov	r6, r1
   d7532:	f100 0704 	add.w	r7, r0, #4
   d7536:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d753a:	d012      	beq.n	d7562 <_ZNK9IPAddress7printToER5Print+0x3a>
   d753c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7544:	220a      	movs	r2, #10
   d7546:	4630      	mov	r0, r6
   d7548:	f000 f933 	bl	d77b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d754c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d754e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7550:	d019      	beq.n	d7586 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7552:	2c00      	cmp	r4, #0
   d7554:	d0f4      	beq.n	d7540 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7556:	212e      	movs	r1, #46	; 0x2e
   d7558:	4630      	mov	r0, r6
   d755a:	f000 f927 	bl	d77ac <_ZN5Print5printEc>
   d755e:	4404      	add	r4, r0
   d7560:	e7ee      	b.n	d7540 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7562:	232f      	movs	r3, #47	; 0x2f
   d7564:	466a      	mov	r2, sp
   d7566:	4639      	mov	r1, r7
   d7568:	200a      	movs	r0, #10
		buf[0] = 0;
   d756a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d756e:	f7ff f941 	bl	d67f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7572:	4668      	mov	r0, sp
   d7574:	f001 fbf9 	bl	d8d6a <strlen>
   d7578:	6833      	ldr	r3, [r6, #0]
   d757a:	4602      	mov	r2, r0
   d757c:	68db      	ldr	r3, [r3, #12]
   d757e:	4669      	mov	r1, sp
   d7580:	4630      	mov	r0, r6
   d7582:	4798      	blx	r3
   d7584:	4604      	mov	r4, r0
    }
    return n;
}
   d7586:	4620      	mov	r0, r4
   d7588:	b00d      	add	sp, #52	; 0x34
   d758a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d758c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d758c:	b510      	push	{r4, lr}
   d758e:	4b05      	ldr	r3, [pc, #20]	; (d75a4 <_ZN9IPAddressC1Ev+0x18>)
   d7590:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7592:	2211      	movs	r2, #17
   d7594:	f840 3b04 	str.w	r3, [r0], #4
   d7598:	2100      	movs	r1, #0
   d759a:	f001 fb8b 	bl	d8cb4 <memset>
}
   d759e:	4620      	mov	r0, r4
   d75a0:	bd10      	pop	{r4, pc}
   d75a2:	bf00      	nop
   d75a4:	000db34c 	.word	0x000db34c

000d75a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d75a8:	4603      	mov	r3, r0
   d75aa:	4a07      	ldr	r2, [pc, #28]	; (d75c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d75ac:	b510      	push	{r4, lr}
   d75ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d75b2:	f101 0210 	add.w	r2, r1, #16
   d75b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d75ba:	f843 4b04 	str.w	r4, [r3], #4
   d75be:	4291      	cmp	r1, r2
   d75c0:	d1f9      	bne.n	d75b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d75c2:	780a      	ldrb	r2, [r1, #0]
   d75c4:	701a      	strb	r2, [r3, #0]
}
   d75c6:	bd10      	pop	{r4, pc}
   d75c8:	000db34c 	.word	0x000db34c

000d75cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d75cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d75ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d75d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d75d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d75da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d75de:	2304      	movs	r3, #4
   d75e0:	6041      	str	r1, [r0, #4]
   d75e2:	7503      	strb	r3, [r0, #20]
}
   d75e4:	bd10      	pop	{r4, pc}

000d75e6 <_ZN9IPAddressaSEPKh>:
{
   d75e6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d75e8:	78cb      	ldrb	r3, [r1, #3]
   d75ea:	9300      	str	r3, [sp, #0]
   d75ec:	788b      	ldrb	r3, [r1, #2]
   d75ee:	784a      	ldrb	r2, [r1, #1]
   d75f0:	7809      	ldrb	r1, [r1, #0]
   d75f2:	f7ff ffeb 	bl	d75cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d75f6:	b002      	add	sp, #8
   d75f8:	bd10      	pop	{r4, pc}
	...

000d75fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d75fc:	4b01      	ldr	r3, [pc, #4]	; (d7604 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d75fe:	4a02      	ldr	r2, [pc, #8]	; (d7608 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7600:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7602:	4770      	bx	lr
   d7604:	2003e614 	.word	0x2003e614
   d7608:	000db358 	.word	0x000db358

000d760c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d760c:	2300      	movs	r3, #0
   d760e:	6840      	ldr	r0, [r0, #4]
   d7610:	461a      	mov	r2, r3
   d7612:	f7ff ba5f 	b.w	d6ad4 <network_connect>

000d7616 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7616:	6840      	ldr	r0, [r0, #4]
   d7618:	2200      	movs	r2, #0
   d761a:	2102      	movs	r1, #2
   d761c:	f7ff ba6a 	b.w	d6af4 <network_disconnect>

000d7620 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7620:	2200      	movs	r2, #0
   d7622:	6840      	ldr	r0, [r0, #4]
   d7624:	4611      	mov	r1, r2
   d7626:	f7ff ba5d 	b.w	d6ae4 <network_connecting>

000d762a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d762a:	2200      	movs	r2, #0
   d762c:	6840      	ldr	r0, [r0, #4]
   d762e:	4611      	mov	r1, r2
   d7630:	f7ff ba68 	b.w	d6b04 <network_ready>

000d7634 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7634:	2300      	movs	r3, #0
   d7636:	6840      	ldr	r0, [r0, #4]
   d7638:	461a      	mov	r2, r3
   d763a:	4619      	mov	r1, r3
   d763c:	f7ff ba6a 	b.w	d6b14 <network_on>

000d7640 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7640:	2300      	movs	r3, #0
   d7642:	6840      	ldr	r0, [r0, #4]
   d7644:	461a      	mov	r2, r3
   d7646:	4619      	mov	r1, r3
   d7648:	f7ff ba6c 	b.w	d6b24 <network_off>

000d764c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d764c:	6840      	ldr	r0, [r0, #4]
   d764e:	2200      	movs	r2, #0
   d7650:	f081 0101 	eor.w	r1, r1, #1
   d7654:	f7ff ba6e 	b.w	d6b34 <network_listen>

000d7658 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7658:	6840      	ldr	r0, [r0, #4]
   d765a:	2200      	movs	r2, #0
   d765c:	f7ff ba7a 	b.w	d6b54 <network_set_listen_timeout>

000d7660 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7660:	2200      	movs	r2, #0
   d7662:	6840      	ldr	r0, [r0, #4]
   d7664:	4611      	mov	r1, r2
   d7666:	f7ff ba7d 	b.w	d6b64 <network_get_listen_timeout>

000d766a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d766a:	2200      	movs	r2, #0
   d766c:	6840      	ldr	r0, [r0, #4]
   d766e:	4611      	mov	r1, r2
   d7670:	f7ff ba68 	b.w	d6b44 <network_listening>

000d7674 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7678:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d767a:	b095      	sub	sp, #84	; 0x54
   d767c:	4616      	mov	r6, r2
   d767e:	460d      	mov	r5, r1
   d7680:	4607      	mov	r7, r0
    IPAddress addr;
   d7682:	f7ff ff83 	bl	d758c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7686:	4621      	mov	r1, r4
   d7688:	2218      	movs	r2, #24
   d768a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d768c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d768e:	f001 fb11 	bl	d8cb4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7692:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7694:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7698:	4621      	mov	r1, r4
   d769a:	466b      	mov	r3, sp
   d769c:	aa0c      	add	r2, sp, #48	; 0x30
   d769e:	4630      	mov	r0, r6
   d76a0:	f7ff f8b8 	bl	d6814 <netdb_getaddrinfo>
    if (!r) {
   d76a4:	4604      	mov	r4, r0
   d76a6:	2800      	cmp	r0, #0
   d76a8:	d146      	bne.n	d7738 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d76aa:	4602      	mov	r2, r0
   d76ac:	2101      	movs	r1, #1
   d76ae:	6868      	ldr	r0, [r5, #4]
   d76b0:	f7ff fa28 	bl	d6b04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d76b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d76b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d76b8:	4622      	mov	r2, r4
   d76ba:	6868      	ldr	r0, [r5, #4]
   d76bc:	f7ff fa22 	bl	d6b04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d76c2:	4681      	mov	r9, r0
        bool ok = false;
   d76c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76c6:	2e00      	cmp	r6, #0
   d76c8:	d036      	beq.n	d7738 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d76ca:	2900      	cmp	r1, #0
   d76cc:	d134      	bne.n	d7738 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d76ce:	6873      	ldr	r3, [r6, #4]
   d76d0:	2b02      	cmp	r3, #2
   d76d2:	d003      	beq.n	d76dc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d76d4:	2b0a      	cmp	r3, #10
   d76d6:	d00b      	beq.n	d76f0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76d8:	69f6      	ldr	r6, [r6, #28]
   d76da:	e7f4      	b.n	d76c6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d76dc:	f1b8 0f00 	cmp.w	r8, #0
   d76e0:	d004      	beq.n	d76ec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d76e2:	6971      	ldr	r1, [r6, #20]
   d76e4:	4638      	mov	r0, r7
   d76e6:	3104      	adds	r1, #4
   d76e8:	f7ff ff7d 	bl	d75e6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d76ec:	4641      	mov	r1, r8
   d76ee:	e7f3      	b.n	d76d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d76f0:	f1b9 0f00 	cmp.w	r9, #0
   d76f4:	d101      	bne.n	d76fa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d76f6:	4649      	mov	r1, r9
   d76f8:	e7ee      	b.n	d76d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d76fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d76fc:	2210      	movs	r2, #16
   d76fe:	a801      	add	r0, sp, #4
   d7700:	f001 fad8 	bl	d8cb4 <memset>
                    a.v = 6;
   d7704:	2306      	movs	r3, #6
   d7706:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d770a:	ad01      	add	r5, sp, #4
   d770c:	f104 0308 	add.w	r3, r4, #8
   d7710:	3418      	adds	r4, #24
   d7712:	6818      	ldr	r0, [r3, #0]
   d7714:	6859      	ldr	r1, [r3, #4]
   d7716:	462a      	mov	r2, r5
   d7718:	c203      	stmia	r2!, {r0, r1}
   d771a:	3308      	adds	r3, #8
   d771c:	42a3      	cmp	r3, r4
   d771e:	4615      	mov	r5, r2
   d7720:	d1f7      	bne.n	d7712 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7722:	a901      	add	r1, sp, #4
   d7724:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7726:	ad07      	add	r5, sp, #28
   d7728:	f7ff ff3e 	bl	d75a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d772c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d772e:	1d3c      	adds	r4, r7, #4
   d7730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7732:	682b      	ldr	r3, [r5, #0]
   d7734:	7023      	strb	r3, [r4, #0]
   d7736:	e7de      	b.n	d76f6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7738:	9800      	ldr	r0, [sp, #0]
   d773a:	f7ff f863 	bl	d6804 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d773e:	4638      	mov	r0, r7
   d7740:	b015      	add	sp, #84	; 0x54
   d7742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7748 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7748:	4b02      	ldr	r3, [pc, #8]	; (d7754 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d774a:	4a03      	ldr	r2, [pc, #12]	; (d7758 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d774c:	601a      	str	r2, [r3, #0]
   d774e:	2200      	movs	r2, #0
   d7750:	605a      	str	r2, [r3, #4]

} // spark
   d7752:	4770      	bx	lr
   d7754:	2003e618 	.word	0x2003e618
   d7758:	000db364 	.word	0x000db364

000d775c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d775e:	4606      	mov	r6, r0
   d7760:	460d      	mov	r5, r1
  size_t n = 0;
   d7762:	188f      	adds	r7, r1, r2
   d7764:	2400      	movs	r4, #0
  while (size--) {
   d7766:	42bd      	cmp	r5, r7
   d7768:	d00c      	beq.n	d7784 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d776a:	6833      	ldr	r3, [r6, #0]
   d776c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7770:	689b      	ldr	r3, [r3, #8]
   d7772:	4630      	mov	r0, r6
   d7774:	4798      	blx	r3
     if (chunk>=0)
   d7776:	1e03      	subs	r3, r0, #0
   d7778:	db01      	blt.n	d777e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d777a:	441c      	add	r4, r3
  while (size--) {
   d777c:	e7f3      	b.n	d7766 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d777e:	2c00      	cmp	r4, #0
   d7780:	bf08      	it	eq
   d7782:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7784:	4620      	mov	r0, r4
   d7786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7788 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7788:	b513      	push	{r0, r1, r4, lr}
   d778a:	4604      	mov	r4, r0
    }
   d778c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d778e:	b159      	cbz	r1, d77a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7790:	9101      	str	r1, [sp, #4]
   d7792:	f001 faea 	bl	d8d6a <strlen>
   d7796:	6823      	ldr	r3, [r4, #0]
   d7798:	9901      	ldr	r1, [sp, #4]
   d779a:	68db      	ldr	r3, [r3, #12]
   d779c:	4602      	mov	r2, r0
   d779e:	4620      	mov	r0, r4
    }
   d77a0:	b002      	add	sp, #8
   d77a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d77a6:	4718      	bx	r3
    }
   d77a8:	b002      	add	sp, #8
   d77aa:	bd10      	pop	{r4, pc}

000d77ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d77ac:	6803      	ldr	r3, [r0, #0]
   d77ae:	689b      	ldr	r3, [r3, #8]
   d77b0:	4718      	bx	r3

000d77b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d77b2:	b530      	push	{r4, r5, lr}
   d77b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d77b6:	2300      	movs	r3, #0
   d77b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d77bc:	2a01      	cmp	r2, #1
   d77be:	bf98      	it	ls
   d77c0:	220a      	movls	r2, #10
   d77c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d77c4:	460d      	mov	r5, r1
   d77c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d77ca:	fb01 5312 	mls	r3, r1, r2, r5
   d77ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d77d2:	2b09      	cmp	r3, #9
   d77d4:	bf94      	ite	ls
   d77d6:	3330      	addls	r3, #48	; 0x30
   d77d8:	3337      	addhi	r3, #55	; 0x37
   d77da:	b2db      	uxtb	r3, r3
  } while(n);
   d77dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d77de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d77e2:	d9ef      	bls.n	d77c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d77e4:	4621      	mov	r1, r4
   d77e6:	f7ff ffcf 	bl	d7788 <_ZN5Print5writeEPKc>
}
   d77ea:	b00b      	add	sp, #44	; 0x2c
   d77ec:	bd30      	pop	{r4, r5, pc}

000d77ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d77ee:	b510      	push	{r4, lr}
   d77f0:	4604      	mov	r4, r0
   d77f2:	f7fc fd0b 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d77f6:	4620      	mov	r0, r4
   d77f8:	bd10      	pop	{r4, pc}
	...

000d77fc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d77fc:	4803      	ldr	r0, [pc, #12]	; (d780c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d77fe:	4a04      	ldr	r2, [pc, #16]	; (d7810 <_GLOBAL__sub_I_RGB+0x14>)
   d7800:	4904      	ldr	r1, [pc, #16]	; (d7814 <_GLOBAL__sub_I_RGB+0x18>)
   d7802:	2300      	movs	r3, #0
   d7804:	6083      	str	r3, [r0, #8]
   d7806:	f000 bced 	b.w	d81e4 <__aeabi_atexit>
   d780a:	bf00      	nop
   d780c:	2003e620 	.word	0x2003e620
   d7810:	2003e428 	.word	0x2003e428
   d7814:	000d77ef 	.word	0x000d77ef

000d7818 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7818:	b510      	push	{r4, lr}
   d781a:	4604      	mov	r4, r0
   d781c:	4608      	mov	r0, r1
{
    _spi = spi;
   d781e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7820:	f7ff f800 	bl	d6824 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7824:	2300      	movs	r3, #0
   d7826:	6063      	str	r3, [r4, #4]
}
   d7828:	4620      	mov	r0, r4
   d782a:	bd10      	pop	{r4, pc}

000d782c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d782c:	b510      	push	{r4, lr}
   d782e:	4604      	mov	r4, r0
{
	free(buffer);
   d7830:	6800      	ldr	r0, [r0, #0]
   d7832:	f7ff f9a7 	bl	d6b84 <free>
}
   d7836:	4620      	mov	r0, r4
   d7838:	bd10      	pop	{r4, pc}

000d783a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d783a:	b510      	push	{r4, lr}
   d783c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d783e:	6800      	ldr	r0, [r0, #0]
   d7840:	b108      	cbz	r0, d7846 <_ZN6String10invalidateEv+0xc>
   d7842:	f7ff f99f 	bl	d6b84 <free>
	buffer = NULL;
   d7846:	2300      	movs	r3, #0
	capacity = len = 0;
   d7848:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d784c:	6023      	str	r3, [r4, #0]
}
   d784e:	bd10      	pop	{r4, pc}

000d7850 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7850:	b538      	push	{r3, r4, r5, lr}
   d7852:	4604      	mov	r4, r0
   d7854:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7856:	6800      	ldr	r0, [r0, #0]
   d7858:	3101      	adds	r1, #1
   d785a:	f7ff f99b 	bl	d6b94 <realloc>
	if (newbuffer) {
   d785e:	b110      	cbz	r0, d7866 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7860:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7864:	2001      	movs	r0, #1
	}
	return 0;
}
   d7866:	bd38      	pop	{r3, r4, r5, pc}

000d7868 <_ZN6String7reserveEj>:
{
   d7868:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d786a:	6803      	ldr	r3, [r0, #0]
{
   d786c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d786e:	b123      	cbz	r3, d787a <_ZN6String7reserveEj+0x12>
   d7870:	6843      	ldr	r3, [r0, #4]
   d7872:	428b      	cmp	r3, r1
   d7874:	d301      	bcc.n	d787a <_ZN6String7reserveEj+0x12>
   d7876:	2001      	movs	r0, #1
}
   d7878:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d787a:	4620      	mov	r0, r4
   d787c:	f7ff ffe8 	bl	d7850 <_ZN6String12changeBufferEj>
   d7880:	2800      	cmp	r0, #0
   d7882:	d0f9      	beq.n	d7878 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7884:	68a3      	ldr	r3, [r4, #8]
   d7886:	2b00      	cmp	r3, #0
   d7888:	d1f5      	bne.n	d7876 <_ZN6String7reserveEj+0xe>
   d788a:	6822      	ldr	r2, [r4, #0]
   d788c:	7013      	strb	r3, [r2, #0]
   d788e:	e7f2      	b.n	d7876 <_ZN6String7reserveEj+0xe>

000d7890 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7890:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7892:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7894:	4611      	mov	r1, r2
   d7896:	9201      	str	r2, [sp, #4]
{
   d7898:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d789a:	f7ff ffe5 	bl	d7868 <_ZN6String7reserveEj>
   d789e:	9a01      	ldr	r2, [sp, #4]
   d78a0:	b928      	cbnz	r0, d78ae <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d78a2:	4620      	mov	r0, r4
   d78a4:	f7ff ffc9 	bl	d783a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d78a8:	4620      	mov	r0, r4
   d78aa:	b003      	add	sp, #12
   d78ac:	bd30      	pop	{r4, r5, pc}
	len = length;
   d78ae:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d78b0:	4629      	mov	r1, r5
   d78b2:	6820      	ldr	r0, [r4, #0]
   d78b4:	f001 f9d6 	bl	d8c64 <memcpy>
	buffer[len] = 0;
   d78b8:	6822      	ldr	r2, [r4, #0]
   d78ba:	68a3      	ldr	r3, [r4, #8]
   d78bc:	2100      	movs	r1, #0
   d78be:	54d1      	strb	r1, [r2, r3]
	return *this;
   d78c0:	e7f2      	b.n	d78a8 <_ZN6String4copyEPKcj+0x18>

000d78c2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d78c2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d78c4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d78c6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d78ca:	4604      	mov	r4, r0
	len = 0;
   d78cc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d78ce:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d78d0:	b141      	cbz	r1, d78e4 <_ZN6StringC1EPKc+0x22>
   d78d2:	4608      	mov	r0, r1
   d78d4:	9101      	str	r1, [sp, #4]
   d78d6:	f001 fa48 	bl	d8d6a <strlen>
   d78da:	9901      	ldr	r1, [sp, #4]
   d78dc:	4602      	mov	r2, r0
   d78de:	4620      	mov	r0, r4
   d78e0:	f7ff ffd6 	bl	d7890 <_ZN6String4copyEPKcj>
}
   d78e4:	4620      	mov	r0, r4
   d78e6:	b002      	add	sp, #8
   d78e8:	bd10      	pop	{r4, pc}

000d78ea <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d78ea:	4288      	cmp	r0, r1
{
   d78ec:	b510      	push	{r4, lr}
   d78ee:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d78f0:	d005      	beq.n	d78fe <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d78f2:	680b      	ldr	r3, [r1, #0]
   d78f4:	b12b      	cbz	r3, d7902 <_ZN6StringaSERKS_+0x18>
   d78f6:	688a      	ldr	r2, [r1, #8]
   d78f8:	4619      	mov	r1, r3
   d78fa:	f7ff ffc9 	bl	d7890 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d78fe:	4620      	mov	r0, r4
   d7900:	bd10      	pop	{r4, pc}
	else invalidate();
   d7902:	f7ff ff9a 	bl	d783a <_ZN6String10invalidateEv>
   d7906:	e7fa      	b.n	d78fe <_ZN6StringaSERKS_+0x14>

000d7908 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7908:	b510      	push	{r4, lr}
	buffer = NULL;
   d790a:	2300      	movs	r3, #0
String::String(const String &value)
   d790c:	4604      	mov	r4, r0
	capacity = 0;
   d790e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7912:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7914:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7916:	f7ff ffe8 	bl	d78ea <_ZN6StringaSERKS_>
}
   d791a:	4620      	mov	r0, r4
   d791c:	bd10      	pop	{r4, pc}

000d791e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d791e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7920:	6882      	ldr	r2, [r0, #8]
   d7922:	b93a      	cbnz	r2, d7934 <_ZNK6String6equalsEPKc+0x16>
   d7924:	b121      	cbz	r1, d7930 <_ZNK6String6equalsEPKc+0x12>
   d7926:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7928:	fab0 f080 	clz	r0, r0
   d792c:	0940      	lsrs	r0, r0, #5
   d792e:	e000      	b.n	d7932 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7930:	2001      	movs	r0, #1
}
   d7932:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7934:	6800      	ldr	r0, [r0, #0]
   d7936:	b909      	cbnz	r1, d793c <_ZNK6String6equalsEPKc+0x1e>
   d7938:	7800      	ldrb	r0, [r0, #0]
   d793a:	e7f5      	b.n	d7928 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d793c:	f001 f9e6 	bl	d8d0c <strcmp>
   d7940:	e7f2      	b.n	d7928 <_ZNK6String6equalsEPKc+0xa>

000d7942 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7942:	b558      	push	{r3, r4, r6, lr}
   d7944:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7946:	b12a      	cbz	r2, d7954 <_ZNK6String8getBytesEPhjj+0x12>
   d7948:	b121      	cbz	r1, d7954 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d794a:	6884      	ldr	r4, [r0, #8]
   d794c:	429c      	cmp	r4, r3
   d794e:	d802      	bhi.n	d7956 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7950:	2300      	movs	r3, #0
   d7952:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d7954:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d7956:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d7958:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d795a:	6801      	ldr	r1, [r0, #0]
   d795c:	4294      	cmp	r4, r2
   d795e:	bf28      	it	cs
   d7960:	4614      	movcs	r4, r2
   d7962:	4419      	add	r1, r3
   d7964:	4622      	mov	r2, r4
   d7966:	4630      	mov	r0, r6
   d7968:	f001 fa19 	bl	d8d9e <strncpy>
	buf[n] = 0;
   d796c:	2300      	movs	r3, #0
   d796e:	5533      	strb	r3, [r6, r4]
   d7970:	e7f0      	b.n	d7954 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d7974 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d7974:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d7976:	6800      	ldr	r0, [r0, #0]
   d7978:	b140      	cbz	r0, d798c <_ZNK6String7toFloatEv+0x18>
   d797a:	f001 f94b 	bl	d8c14 <atof>
   d797e:	ec51 0b10 	vmov	r0, r1, d0
   d7982:	f001 f8b3 	bl	d8aec <__aeabi_d2f>
   d7986:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d798a:	bd08      	pop	{r3, pc}
	return 0;
   d798c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7994 <_ZNK6String7toFloatEv+0x20>
   d7990:	e7fb      	b.n	d798a <_ZNK6String7toFloatEv+0x16>
   d7992:	bf00      	nop
   d7994:	00000000 	.word	0x00000000

000d7998 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d7998:	b507      	push	{r0, r1, r2, lr}
   d799a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d799c:	2100      	movs	r1, #0
{
   d799e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d79a0:	9100      	str	r1, [sp, #0]
   d79a2:	2001      	movs	r0, #1
   d79a4:	218c      	movs	r1, #140	; 0x8c
   d79a6:	f7ff f82b 	bl	d6a00 <system_reset>
}
   d79aa:	b003      	add	sp, #12
   d79ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d79b0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d79b0:	4601      	mov	r1, r0
    reset(0, flags);
   d79b2:	2000      	movs	r0, #0
   d79b4:	f7ff bff0 	b.w	d7998 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d79b8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d79b8:	2000      	movs	r0, #0
   d79ba:	f7ff bff9 	b.w	d79b0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d79c0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d79c0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d79c2:	4b09      	ldr	r3, [pc, #36]	; (d79e8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d79c4:	4c09      	ldr	r4, [pc, #36]	; (d79ec <_GLOBAL__sub_I_System+0x2c>)
   d79c6:	2202      	movs	r2, #2
   d79c8:	2000      	movs	r0, #0
   d79ca:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d79cc:	4b08      	ldr	r3, [pc, #32]	; (d79f0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d79ce:	6020      	str	r0, [r4, #0]
   d79d0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d79d2:	71a0      	strb	r0, [r4, #6]
   d79d4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d79d6:	f7fe ffc7 	bl	d6968 <set_system_mode>
SystemClass System;
   d79da:	4620      	mov	r0, r4
   d79dc:	4a05      	ldr	r2, [pc, #20]	; (d79f4 <_GLOBAL__sub_I_System+0x34>)
   d79de:	4906      	ldr	r1, [pc, #24]	; (d79f8 <_GLOBAL__sub_I_System+0x38>)
   d79e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d79e4:	f000 bbfe 	b.w	d81e4 <__aeabi_atexit>
   d79e8:	2003e63c 	.word	0x2003e63c
   d79ec:	2003e630 	.word	0x2003e630
   d79f0:	ffff0000 	.word	0xffff0000
   d79f4:	2003e428 	.word	0x2003e428
   d79f8:	000d41a3 	.word	0x000d41a3

000d79fc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d79fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7a00:	4a15      	ldr	r2, [pc, #84]	; (d7a58 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7a02:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7a64 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7a06:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7a0a:	18c0      	adds	r0, r0, r3
   d7a0c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7a10:	4a12      	ldr	r2, [pc, #72]	; (d7a5c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7a12:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7a16:	18c6      	adds	r6, r0, r3
   d7a18:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7a1c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7a20:	42bb      	cmp	r3, r7
   d7a22:	bf08      	it	eq
   d7a24:	42b2      	cmpeq	r2, r6
{
   d7a26:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7a28:	d013      	beq.n	d7a52 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7a2a:	a903      	add	r1, sp, #12
   d7a2c:	4668      	mov	r0, sp
   d7a2e:	e9cd 6700 	strd	r6, r7, [sp]
   d7a32:	f7ff f8e7 	bl	d6c04 <localtime_r>
	calendar_time.tm_year += 1900;
   d7a36:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7a38:	4d09      	ldr	r5, [pc, #36]	; (d7a60 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7a3a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7a3e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7a40:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7a4a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7a4e:	6823      	ldr	r3, [r4, #0]
   d7a50:	602b      	str	r3, [r5, #0]
    }
}
   d7a52:	b00c      	add	sp, #48	; 0x30
   d7a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7a58:	2003e678 	.word	0x2003e678
   d7a5c:	2003e670 	.word	0x2003e670
   d7a60:	2003e648 	.word	0x2003e648
   d7a64:	2003e680 	.word	0x2003e680

000d7a68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7a68:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a6a:	2000      	movs	r0, #0
   d7a6c:	f7ff f812 	bl	d6a94 <spark_sync_time_pending>
   d7a70:	b128      	cbz	r0, d7a7e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7a72:	f7fe ffe7 	bl	d6a44 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a76:	f080 0001 	eor.w	r0, r0, #1
   d7a7a:	b2c0      	uxtb	r0, r0
    }
   d7a7c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a7e:	2001      	movs	r0, #1
   d7a80:	e7fc      	b.n	d7a7c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7a82 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d7a82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7a84:	4602      	mov	r2, r0
   d7a86:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7a88:	4668      	mov	r0, sp
    struct timeval tv = {
   d7a8a:	2100      	movs	r1, #0
    };
   d7a8c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d7a90:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7a94:	f7fe fe0e 	bl	d66b4 <hal_rtc_set_time>
   d7a98:	4602      	mov	r2, r0
   d7a9a:	b910      	cbnz	r0, d7aa2 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7a9c:	4601      	mov	r1, r0
   d7a9e:	f7fe ff93 	bl	d69c8 <system_notify_time_changed>
    }
}
   d7aa2:	b005      	add	sp, #20
   d7aa4:	f85d fb04 	ldr.w	pc, [sp], #4

000d7aa8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7aa8:	b530      	push	{r4, r5, lr}
   d7aaa:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7aac:	4818      	ldr	r0, [pc, #96]	; (d7b10 <_ZN9TimeClass7timeStrEx+0x68>)
   d7aae:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7ab2:	1852      	adds	r2, r2, r1
   d7ab4:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7ab8:	4816      	ldr	r0, [pc, #88]	; (d7b14 <_ZN9TimeClass7timeStrEx+0x6c>)
   d7aba:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7abe:	1852      	adds	r2, r2, r1
{
   d7ac0:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7ac2:	eb40 0303 	adc.w	r3, r0, r3
   d7ac6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d7aca:	2224      	movs	r2, #36	; 0x24
   d7acc:	eb0d 0002 	add.w	r0, sp, r2
   d7ad0:	2100      	movs	r1, #0
   d7ad2:	f001 f8ef 	bl	d8cb4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7ad6:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7ad8:	a909      	add	r1, sp, #36	; 0x24
   d7ada:	4668      	mov	r0, sp
   d7adc:	f7ff f892 	bl	d6c04 <localtime_r>
    char ascstr[26] = {};
   d7ae0:	2216      	movs	r2, #22
   d7ae2:	4629      	mov	r1, r5
   d7ae4:	a803      	add	r0, sp, #12
   d7ae6:	9502      	str	r5, [sp, #8]
   d7ae8:	f001 f8e4 	bl	d8cb4 <memset>
    asctime_r(&calendar_time, ascstr);
   d7aec:	a902      	add	r1, sp, #8
   d7aee:	a809      	add	r0, sp, #36	; 0x24
   d7af0:	f001 f86a 	bl	d8bc8 <asctime_r>
    int len = strlen(ascstr);
   d7af4:	a802      	add	r0, sp, #8
   d7af6:	f001 f938 	bl	d8d6a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7afa:	ab12      	add	r3, sp, #72	; 0x48
   d7afc:	4418      	add	r0, r3
    return String(ascstr);
   d7afe:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7b00:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7b04:	4620      	mov	r0, r4
   d7b06:	f7ff fedc 	bl	d78c2 <_ZN6StringC1EPKc>
}
   d7b0a:	4620      	mov	r0, r4
   d7b0c:	b013      	add	sp, #76	; 0x4c
   d7b0e:	bd30      	pop	{r4, r5, pc}
   d7b10:	2003e678 	.word	0x2003e678
   d7b14:	2003e670 	.word	0x2003e670

000d7b18 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b1c:	b0a5      	sub	sp, #148	; 0x94
   d7b1e:	4607      	mov	r7, r0
   d7b20:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7b22:	a814      	add	r0, sp, #80	; 0x50
{
   d7b24:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7b26:	223f      	movs	r2, #63	; 0x3f
{
   d7b28:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7b2a:	f001 f938 	bl	d8d9e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7b2e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7b30:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7b32:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7b36:	f001 f918 	bl	d8d6a <strlen>
   d7b3a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d7b3c:	bb5d      	cbnz	r5, d7b96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d7b3e:	492a      	ldr	r1, [pc, #168]	; (d7be8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d7b40:	a803      	add	r0, sp, #12
   d7b42:	f001 f8ed 	bl	d8d20 <strcpy>
   d7b46:	ae14      	add	r6, sp, #80	; 0x50
{
   d7b48:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7b4a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d7b4e:	45ab      	cmp	fp, r5
   d7b50:	d936      	bls.n	d7bc0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7b52:	46b1      	mov	r9, r6
   d7b54:	f105 0a01 	add.w	sl, r5, #1
   d7b58:	f819 3b01 	ldrb.w	r3, [r9], #1
   d7b5c:	2b25      	cmp	r3, #37	; 0x25
   d7b5e:	d117      	bne.n	d7b90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d7b60:	7873      	ldrb	r3, [r6, #1]
   d7b62:	2b7a      	cmp	r3, #122	; 0x7a
   d7b64:	d114      	bne.n	d7b90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d7b66:	a803      	add	r0, sp, #12
   d7b68:	f001 f8ff 	bl	d8d6a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7b6c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d7b6e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7b70:	1828      	adds	r0, r5, r0
   d7b72:	4418      	add	r0, r3
   d7b74:	ebab 0205 	sub.w	r2, fp, r5
   d7b78:	1cb1      	adds	r1, r6, #2
   d7b7a:	f001 f873 	bl	d8c64 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7b7e:	4622      	mov	r2, r4
   d7b80:	a903      	add	r1, sp, #12
   d7b82:	4630      	mov	r0, r6
   d7b84:	f001 f86e 	bl	d8c64 <memcpy>
            len = strlen(format_str);
   d7b88:	a814      	add	r0, sp, #80	; 0x50
   d7b8a:	f001 f8ee 	bl	d8d6a <strlen>
   d7b8e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d7b90:	464e      	mov	r6, r9
   d7b92:	4655      	mov	r5, sl
   d7b94:	e7d9      	b.n	d7b4a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7b96:	213c      	movs	r1, #60	; 0x3c
   d7b98:	fb95 f3f1 	sdiv	r3, r5, r1
   d7b9c:	2b00      	cmp	r3, #0
   d7b9e:	bfb8      	it	lt
   d7ba0:	425b      	neglt	r3, r3
   d7ba2:	fbb3 f2f1 	udiv	r2, r3, r1
   d7ba6:	fb01 3312 	mls	r3, r1, r2, r3
   d7baa:	9300      	str	r3, [sp, #0]
   d7bac:	4a0f      	ldr	r2, [pc, #60]	; (d7bec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d7bae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7bb2:	2110      	movs	r1, #16
   d7bb4:	a803      	add	r0, sp, #12
   d7bb6:	fb95 f3f3 	sdiv	r3, r5, r3
   d7bba:	f7fe fffb 	bl	d6bb4 <snprintf>
   d7bbe:	e7c2      	b.n	d7b46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7bc0:	2100      	movs	r1, #0
   d7bc2:	222e      	movs	r2, #46	; 0x2e
   d7bc4:	a808      	add	r0, sp, #32
   d7bc6:	9107      	str	r1, [sp, #28]
   d7bc8:	f001 f874 	bl	d8cb4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d7bcc:	4643      	mov	r3, r8
   d7bce:	aa14      	add	r2, sp, #80	; 0x50
   d7bd0:	2132      	movs	r1, #50	; 0x32
   d7bd2:	a807      	add	r0, sp, #28
   d7bd4:	f7ff f80e 	bl	d6bf4 <strftime>
    return String(buf);
   d7bd8:	a907      	add	r1, sp, #28
   d7bda:	4638      	mov	r0, r7
   d7bdc:	f7ff fe71 	bl	d78c2 <_ZN6StringC1EPKc>
}
   d7be0:	4638      	mov	r0, r7
   d7be2:	b025      	add	sp, #148	; 0x94
   d7be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7be8:	000db390 	.word	0x000db390
   d7bec:	000db392 	.word	0x000db392

000d7bf0 <_ZN9TimeClass6formatExPKc>:
{
   d7bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7bf2:	b08d      	sub	sp, #52	; 0x34
   d7bf4:	e9cd 2300 	strd	r2, r3, [sp]
   d7bf8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d7bfa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d7bfc:	b915      	cbnz	r5, d7c04 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d7bfe:	4b19      	ldr	r3, [pc, #100]	; (d7c64 <_ZN9TimeClass6formatExPKc+0x74>)
   d7c00:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7c02:	b12d      	cbz	r5, d7c10 <_ZN9TimeClass6formatExPKc+0x20>
   d7c04:	4b18      	ldr	r3, [pc, #96]	; (d7c68 <_ZN9TimeClass6formatExPKc+0x78>)
   d7c06:	4628      	mov	r0, r5
   d7c08:	6819      	ldr	r1, [r3, #0]
   d7c0a:	f001 f87f 	bl	d8d0c <strcmp>
   d7c0e:	b938      	cbnz	r0, d7c20 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7c10:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7c14:	4620      	mov	r0, r4
   d7c16:	f7ff ff47 	bl	d7aa8 <_ZN9TimeClass7timeStrEx>
}
   d7c1a:	4620      	mov	r0, r4
   d7c1c:	b00d      	add	sp, #52	; 0x34
   d7c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7c20:	4e12      	ldr	r6, [pc, #72]	; (d7c6c <_ZN9TimeClass6formatExPKc+0x7c>)
   d7c22:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7c24:	4f12      	ldr	r7, [pc, #72]	; (d7c70 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d7c26:	e9d6 3200 	ldrd	r3, r2, [r6]
   d7c2a:	185b      	adds	r3, r3, r1
   d7c2c:	9901      	ldr	r1, [sp, #4]
   d7c2e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d7c32:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7c36:	181b      	adds	r3, r3, r0
   d7c38:	eb41 0202 	adc.w	r2, r1, r2
   d7c3c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d7c40:	2100      	movs	r1, #0
   d7c42:	2224      	movs	r2, #36	; 0x24
   d7c44:	a803      	add	r0, sp, #12
   d7c46:	f001 f835 	bl	d8cb4 <memset>
    localtime_r(&t, &calendar_time);
   d7c4a:	a903      	add	r1, sp, #12
   d7c4c:	4668      	mov	r0, sp
   d7c4e:	f7fe ffd9 	bl	d6c04 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7c52:	6832      	ldr	r2, [r6, #0]
   d7c54:	683b      	ldr	r3, [r7, #0]
   d7c56:	a903      	add	r1, sp, #12
   d7c58:	4413      	add	r3, r2
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	462a      	mov	r2, r5
   d7c5e:	f7ff ff5b 	bl	d7b18 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d7c62:	e7da      	b.n	d7c1a <_ZN9TimeClass6formatExPKc+0x2a>
   d7c64:	2003e644 	.word	0x2003e644
   d7c68:	2003e250 	.word	0x2003e250
   d7c6c:	2003e678 	.word	0x2003e678
   d7c70:	2003e670 	.word	0x2003e670

000d7c74 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d7c74:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7c76:	2000      	movs	r0, #0
   d7c78:	f7fe fd0c 	bl	d6694 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7c7c:	4604      	mov	r4, r0
   d7c7e:	b9a0      	cbnz	r0, d7caa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7c80:	f7fe fe6a 	bl	d6958 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7c84:	2801      	cmp	r0, #1
   d7c86:	d110      	bne.n	d7caa <_ZN9TimeClass7isValidEv+0x36>
   d7c88:	4620      	mov	r0, r4
   d7c8a:	f7fe fe95 	bl	d69b8 <system_thread_get_state>
   d7c8e:	b960      	cbnz	r0, d7caa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7c90:	f7ff feea 	bl	d7a68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7c94:	b910      	cbnz	r0, d7c9c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7c96:	f7fe fecd 	bl	d6a34 <spark_process>
        while (_while() && !_condition()) {
   d7c9a:	e7f9      	b.n	d7c90 <_ZN9TimeClass7isValidEv+0x1c>
   d7c9c:	f7ff fee4 	bl	d7a68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7ca4:	2000      	movs	r0, #0
   d7ca6:	f7fe bcf5 	b.w	d6694 <hal_rtc_time_is_valid>
}
   d7caa:	4620      	mov	r0, r4
   d7cac:	bd10      	pop	{r4, pc}

000d7cae <_ZN9TimeClass3nowEv>:
{
   d7cae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7cb0:	f7ff ffe0 	bl	d7c74 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7cb4:	2210      	movs	r2, #16
   d7cb6:	2100      	movs	r1, #0
   d7cb8:	4668      	mov	r0, sp
   d7cba:	f000 fffb 	bl	d8cb4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7cbe:	2100      	movs	r1, #0
   d7cc0:	4668      	mov	r0, sp
   d7cc2:	f7fe fcef 	bl	d66a4 <hal_rtc_get_time>
}
   d7cc6:	9800      	ldr	r0, [sp, #0]
   d7cc8:	b005      	add	sp, #20
   d7cca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7cd0 <_ZN9TimeClass4hourEv>:
{
   d7cd0:	b508      	push	{r3, lr}
	return hour(now());
   d7cd2:	f7ff ffec 	bl	d7cae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7cd6:	17c1      	asrs	r1, r0, #31
   d7cd8:	f7ff fe90 	bl	d79fc <_ZL22Refresh_UnixTime_Cachex>
}
   d7cdc:	4b01      	ldr	r3, [pc, #4]	; (d7ce4 <_ZN9TimeClass4hourEv+0x14>)
   d7cde:	6898      	ldr	r0, [r3, #8]
   d7ce0:	bd08      	pop	{r3, pc}
   d7ce2:	bf00      	nop
   d7ce4:	2003e648 	.word	0x2003e648

000d7ce8 <_ZN9TimeClass4yearEv>:
{
   d7ce8:	b508      	push	{r3, lr}
	return year(now());
   d7cea:	f7ff ffe0 	bl	d7cae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7cee:	17c1      	asrs	r1, r0, #31
   d7cf0:	f7ff fe84 	bl	d79fc <_ZL22Refresh_UnixTime_Cachex>
}
   d7cf4:	4b01      	ldr	r3, [pc, #4]	; (d7cfc <_ZN9TimeClass4yearEv+0x14>)
   d7cf6:	6958      	ldr	r0, [r3, #20]
   d7cf8:	bd08      	pop	{r3, pc}
   d7cfa:	bf00      	nop
   d7cfc:	2003e648 	.word	0x2003e648

000d7d00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7d00:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7d02:	681a      	ldr	r2, [r3, #0]
   d7d04:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7d06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7d08:	4770      	bx	lr
   d7d0a:	bf00      	nop
   d7d0c:	2003e250 	.word	0x2003e250
   d7d10:	2003e644 	.word	0x2003e644

000d7d14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7d14:	4770      	bx	lr

000d7d16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d16:	7441      	strb	r1, [r0, #17]
}
   d7d18:	4770      	bx	lr

000d7d1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7d1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7d1c:	7c00      	ldrb	r0, [r0, #16]
   d7d1e:	f7fe fdc9 	bl	d68b4 <hal_usart_available_data_for_write>
}
   d7d22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d26:	bd08      	pop	{r3, pc}

000d7d28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7d28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7d2a:	7c00      	ldrb	r0, [r0, #16]
   d7d2c:	f7fe fd9a 	bl	d6864 <hal_usart_available>
}
   d7d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d34:	bd08      	pop	{r3, pc}

000d7d36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7d36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7d38:	7c00      	ldrb	r0, [r0, #16]
   d7d3a:	f7fe fda3 	bl	d6884 <hal_usart_peek>
}
   d7d3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d42:	bd08      	pop	{r3, pc}

000d7d44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7d44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7d46:	7c00      	ldrb	r0, [r0, #16]
   d7d48:	f7fe fd94 	bl	d6874 <hal_usart_read>
}
   d7d4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d50:	bd08      	pop	{r3, pc}

000d7d52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7d52:	7c00      	ldrb	r0, [r0, #16]
   d7d54:	f7fe bd9e 	b.w	d6894 <hal_usart_flush>

000d7d58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7d5a:	7c45      	ldrb	r5, [r0, #17]
{
   d7d5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7d5e:	b12d      	cbz	r5, d7d6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7d60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7d62:	b003      	add	sp, #12
   d7d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7d68:	f7fe bd74 	b.w	d6854 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7d6c:	7c00      	ldrb	r0, [r0, #16]
   d7d6e:	9101      	str	r1, [sp, #4]
   d7d70:	f7fe fda0 	bl	d68b4 <hal_usart_available_data_for_write>
   d7d74:	2800      	cmp	r0, #0
   d7d76:	9901      	ldr	r1, [sp, #4]
   d7d78:	dcf2      	bgt.n	d7d60 <_ZN11USARTSerial5writeEh+0x8>
}
   d7d7a:	4628      	mov	r0, r5
   d7d7c:	b003      	add	sp, #12
   d7d7e:	bd30      	pop	{r4, r5, pc}

000d7d80 <_ZN11USARTSerialD0Ev>:
   d7d80:	b510      	push	{r4, lr}
   d7d82:	2114      	movs	r1, #20
   d7d84:	4604      	mov	r4, r0
   d7d86:	f000 fa32 	bl	d81ee <_ZdlPvj>
   d7d8a:	4620      	mov	r0, r4
   d7d8c:	bd10      	pop	{r4, pc}
	...

000d7d90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7d90:	b510      	push	{r4, lr}
   d7d92:	f04f 0c00 	mov.w	ip, #0
   d7d96:	4604      	mov	r4, r0
   d7d98:	4608      	mov	r0, r1
   d7d9a:	4611      	mov	r1, r2
   d7d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7da0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7da4:	4a04      	ldr	r2, [pc, #16]	; (d7db8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7da6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7da8:	2201      	movs	r2, #1
  _serial = serial;
   d7daa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7dac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7dae:	461a      	mov	r2, r3
   d7db0:	f7fe fd48 	bl	d6844 <hal_usart_init>
}
   d7db4:	4620      	mov	r0, r4
   d7db6:	bd10      	pop	{r4, pc}
   d7db8:	000db3c4 	.word	0x000db3c4

000d7dbc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7dbc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7dbe:	4c0e      	ldr	r4, [pc, #56]	; (d7df8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7dc0:	7821      	ldrb	r1, [r4, #0]
   d7dc2:	f3bf 8f5b 	dmb	ish
   d7dc6:	f011 0101 	ands.w	r1, r1, #1
   d7dca:	d112      	bne.n	d7df2 <_Z22__fetch_global_Serial1v+0x36>
   d7dcc:	4620      	mov	r0, r4
   d7dce:	9101      	str	r1, [sp, #4]
   d7dd0:	f7fc f972 	bl	d40b8 <__cxa_guard_acquire>
   d7dd4:	9901      	ldr	r1, [sp, #4]
   d7dd6:	b160      	cbz	r0, d7df2 <_Z22__fetch_global_Serial1v+0x36>
   d7dd8:	4a08      	ldr	r2, [pc, #32]	; (d7dfc <_Z22__fetch_global_Serial1v+0x40>)
   d7dda:	4b09      	ldr	r3, [pc, #36]	; (d7e00 <_Z22__fetch_global_Serial1v+0x44>)
   d7ddc:	4809      	ldr	r0, [pc, #36]	; (d7e04 <_Z22__fetch_global_Serial1v+0x48>)
   d7dde:	f7ff ffd7 	bl	d7d90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7de2:	4620      	mov	r0, r4
   d7de4:	f7fc f96d 	bl	d40c2 <__cxa_guard_release>
   d7de8:	4a07      	ldr	r2, [pc, #28]	; (d7e08 <_Z22__fetch_global_Serial1v+0x4c>)
   d7dea:	4908      	ldr	r1, [pc, #32]	; (d7e0c <_Z22__fetch_global_Serial1v+0x50>)
   d7dec:	4805      	ldr	r0, [pc, #20]	; (d7e04 <_Z22__fetch_global_Serial1v+0x48>)
   d7dee:	f000 f9f9 	bl	d81e4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7df2:	4804      	ldr	r0, [pc, #16]	; (d7e04 <_Z22__fetch_global_Serial1v+0x48>)
   d7df4:	b002      	add	sp, #8
   d7df6:	bd10      	pop	{r4, pc}
   d7df8:	2003e688 	.word	0x2003e688
   d7dfc:	2003e68c 	.word	0x2003e68c
   d7e00:	2003e710 	.word	0x2003e710
   d7e04:	2003e794 	.word	0x2003e794
   d7e08:	2003e428 	.word	0x2003e428
   d7e0c:	000d7d15 	.word	0x000d7d15

000d7e10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e10:	7441      	strb	r1, [r0, #17]
}
   d7e12:	4770      	bx	lr

000d7e14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7e14:	4770      	bx	lr

000d7e16 <_ZN9USBSerial4readEv>:
{
   d7e16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7e18:	2100      	movs	r1, #0
   d7e1a:	7c00      	ldrb	r0, [r0, #16]
   d7e1c:	f7fe fd6a 	bl	d68f4 <HAL_USB_USART_Receive_Data>
}
   d7e20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e24:	bd08      	pop	{r3, pc}

000d7e26 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7e26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7e28:	2101      	movs	r1, #1
   d7e2a:	7c00      	ldrb	r0, [r0, #16]
   d7e2c:	f7fe fd62 	bl	d68f4 <HAL_USB_USART_Receive_Data>
}
   d7e30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e34:	bd08      	pop	{r3, pc}

000d7e36 <_ZN9USBSerial17availableForWriteEv>:
{
   d7e36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7e38:	7c00      	ldrb	r0, [r0, #16]
   d7e3a:	f7fe fd53 	bl	d68e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7e3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e42:	bd08      	pop	{r3, pc}

000d7e44 <_ZN9USBSerial9availableEv>:
{
   d7e44:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7e46:	7c00      	ldrb	r0, [r0, #16]
   d7e48:	f7fe fd44 	bl	d68d4 <HAL_USB_USART_Available_Data>
}
   d7e4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e50:	bd08      	pop	{r3, pc}

000d7e52 <_ZN9USBSerial5writeEh>:
{
   d7e52:	b513      	push	{r0, r1, r4, lr}
   d7e54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7e56:	7c00      	ldrb	r0, [r0, #16]
{
   d7e58:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7e5a:	f7fe fd43 	bl	d68e4 <HAL_USB_USART_Available_Data_For_Write>
   d7e5e:	2800      	cmp	r0, #0
   d7e60:	9901      	ldr	r1, [sp, #4]
   d7e62:	dc01      	bgt.n	d7e68 <_ZN9USBSerial5writeEh+0x16>
   d7e64:	7c60      	ldrb	r0, [r4, #17]
   d7e66:	b120      	cbz	r0, d7e72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7e68:	7c20      	ldrb	r0, [r4, #16]
   d7e6a:	f7fe fd4b 	bl	d6904 <HAL_USB_USART_Send_Data>
   d7e6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7e72:	b002      	add	sp, #8
   d7e74:	bd10      	pop	{r4, pc}

000d7e76 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7e76:	7c00      	ldrb	r0, [r0, #16]
   d7e78:	f7fe bd4c 	b.w	d6914 <HAL_USB_USART_Flush_Data>

000d7e7c <_ZN9USBSerialD0Ev>:
   d7e7c:	b510      	push	{r4, lr}
   d7e7e:	2114      	movs	r1, #20
   d7e80:	4604      	mov	r4, r0
   d7e82:	f000 f9b4 	bl	d81ee <_ZdlPvj>
   d7e86:	4620      	mov	r0, r4
   d7e88:	bd10      	pop	{r4, pc}
	...

000d7e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7e8c:	b510      	push	{r4, lr}
   d7e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7e92:	4604      	mov	r4, r0
   d7e94:	4608      	mov	r0, r1
   d7e96:	2100      	movs	r1, #0
   d7e98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7e9c:	4b04      	ldr	r3, [pc, #16]	; (d7eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7e9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7ea0:	2301      	movs	r3, #1
  _serial = serial;
   d7ea2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7ea4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7ea6:	4611      	mov	r1, r2
   d7ea8:	f7fe fd0c 	bl	d68c4 <HAL_USB_USART_Init>
}
   d7eac:	4620      	mov	r0, r4
   d7eae:	bd10      	pop	{r4, pc}
   d7eb0:	000db3f4 	.word	0x000db3f4

000d7eb4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7eb4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7eb6:	2214      	movs	r2, #20
{
   d7eb8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7eba:	2100      	movs	r1, #0
   d7ebc:	f000 fefa 	bl	d8cb4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7ec0:	4620      	mov	r0, r4
   d7ec2:	bd10      	pop	{r4, pc}

000d7ec4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7ec4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ec6:	4c10      	ldr	r4, [pc, #64]	; (d7f08 <_Z16_fetch_usbserialv+0x44>)
{
   d7ec8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7eca:	a803      	add	r0, sp, #12
   d7ecc:	f7ff fff2 	bl	d7eb4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ed0:	7821      	ldrb	r1, [r4, #0]
   d7ed2:	f3bf 8f5b 	dmb	ish
   d7ed6:	f011 0101 	ands.w	r1, r1, #1
   d7eda:	d111      	bne.n	d7f00 <_Z16_fetch_usbserialv+0x3c>
   d7edc:	4620      	mov	r0, r4
   d7ede:	9101      	str	r1, [sp, #4]
   d7ee0:	f7fc f8ea 	bl	d40b8 <__cxa_guard_acquire>
   d7ee4:	9901      	ldr	r1, [sp, #4]
   d7ee6:	b158      	cbz	r0, d7f00 <_Z16_fetch_usbserialv+0x3c>
   d7ee8:	aa03      	add	r2, sp, #12
   d7eea:	4808      	ldr	r0, [pc, #32]	; (d7f0c <_Z16_fetch_usbserialv+0x48>)
   d7eec:	f7ff ffce 	bl	d7e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7ef0:	4620      	mov	r0, r4
   d7ef2:	f7fc f8e6 	bl	d40c2 <__cxa_guard_release>
   d7ef6:	4a06      	ldr	r2, [pc, #24]	; (d7f10 <_Z16_fetch_usbserialv+0x4c>)
   d7ef8:	4906      	ldr	r1, [pc, #24]	; (d7f14 <_Z16_fetch_usbserialv+0x50>)
   d7efa:	4804      	ldr	r0, [pc, #16]	; (d7f0c <_Z16_fetch_usbserialv+0x48>)
   d7efc:	f000 f972 	bl	d81e4 <__aeabi_atexit>
	return _usbserial;
}
   d7f00:	4802      	ldr	r0, [pc, #8]	; (d7f0c <_Z16_fetch_usbserialv+0x48>)
   d7f02:	b008      	add	sp, #32
   d7f04:	bd10      	pop	{r4, pc}
   d7f06:	bf00      	nop
   d7f08:	2003e7a8 	.word	0x2003e7a8
   d7f0c:	2003e7ac 	.word	0x2003e7ac
   d7f10:	2003e428 	.word	0x2003e428
   d7f14:	000d7e15 	.word	0x000d7e15

000d7f18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7f18:	4b01      	ldr	r3, [pc, #4]	; (d7f20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7f1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7f1c:	4770      	bx	lr
   d7f1e:	bf00      	nop
   d7f20:	2003e254 	.word	0x2003e254

000d7f24 <serialEventRun>:
{
   d7f24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7f26:	4b0b      	ldr	r3, [pc, #44]	; (d7f54 <serialEventRun+0x30>)
   d7f28:	b143      	cbz	r3, d7f3c <serialEventRun+0x18>
   d7f2a:	f7ff ffcb 	bl	d7ec4 <_Z16_fetch_usbserialv>
   d7f2e:	6803      	ldr	r3, [r0, #0]
   d7f30:	691b      	ldr	r3, [r3, #16]
   d7f32:	4798      	blx	r3
   d7f34:	2800      	cmp	r0, #0
   d7f36:	dd01      	ble.n	d7f3c <serialEventRun+0x18>
        serialEvent();
   d7f38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7f3c:	4b06      	ldr	r3, [pc, #24]	; (d7f58 <serialEventRun+0x34>)
   d7f3e:	b143      	cbz	r3, d7f52 <serialEventRun+0x2e>
   d7f40:	f7ff ff3c 	bl	d7dbc <_Z22__fetch_global_Serial1v>
   d7f44:	6803      	ldr	r3, [r0, #0]
   d7f46:	691b      	ldr	r3, [r3, #16]
   d7f48:	4798      	blx	r3
   d7f4a:	2800      	cmp	r0, #0
   d7f4c:	dd01      	ble.n	d7f52 <serialEventRun+0x2e>
        serialEvent1();
   d7f4e:	f3af 8000 	nop.w
}
   d7f52:	bd08      	pop	{r3, pc}
	...

000d7f5c <_post_loop>:
{
   d7f5c:	b508      	push	{r3, lr}
	serialEventRun();
   d7f5e:	f7ff ffe1 	bl	d7f24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7f62:	f7fe fb8f 	bl	d6684 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7f66:	4b01      	ldr	r3, [pc, #4]	; (d7f6c <_post_loop+0x10>)
   d7f68:	6018      	str	r0, [r3, #0]
}
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	2003e7d4 	.word	0x2003e7d4

000d7f70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7f70:	4802      	ldr	r0, [pc, #8]	; (d7f7c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7f72:	4a03      	ldr	r2, [pc, #12]	; (d7f80 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7f74:	4903      	ldr	r1, [pc, #12]	; (d7f84 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7f76:	1a12      	subs	r2, r2, r0
   d7f78:	f000 be74 	b.w	d8c64 <memcpy>
   d7f7c:	2003f400 	.word	0x2003f400
   d7f80:	2003fc04 	.word	0x2003fc04
   d7f84:	000db720 	.word	0x000db720

000d7f88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7f88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f8a:	2300      	movs	r3, #0
   d7f8c:	9300      	str	r3, [sp, #0]
   d7f8e:	461a      	mov	r2, r3
   d7f90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f94:	f7fe fd2a 	bl	d69ec <system_ctrl_set_result>
}
   d7f98:	b003      	add	sp, #12
   d7f9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7fa0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7fa0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7fa2:	8843      	ldrh	r3, [r0, #2]
   d7fa4:	2b0a      	cmp	r3, #10
   d7fa6:	d008      	beq.n	d7fba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7fa8:	2b50      	cmp	r3, #80	; 0x50
   d7faa:	d10b      	bne.n	d7fc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7fac:	4b09      	ldr	r3, [pc, #36]	; (d7fd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7fae:	681b      	ldr	r3, [r3, #0]
   d7fb0:	b14b      	cbz	r3, d7fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7fb2:	b003      	add	sp, #12
   d7fb4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7fb8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7fba:	f7ff ffe5 	bl	d7f88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7fbe:	b003      	add	sp, #12
   d7fc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7fc4:	2300      	movs	r3, #0
   d7fc6:	9300      	str	r3, [sp, #0]
   d7fc8:	461a      	mov	r2, r3
   d7fca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7fce:	f7fe fd0d 	bl	d69ec <system_ctrl_set_result>
}
   d7fd2:	e7f4      	b.n	d7fbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7fd4:	2003e7c4 	.word	0x2003e7c4

000d7fd8 <module_user_init_hook>:
{
   d7fd8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7fda:	4c12      	ldr	r4, [pc, #72]	; (d8024 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7fdc:	4812      	ldr	r0, [pc, #72]	; (d8028 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7fde:	4d13      	ldr	r5, [pc, #76]	; (d802c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7fe0:	2100      	movs	r1, #0
   d7fe2:	f7fe fdff 	bl	d6be4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7fe6:	6823      	ldr	r3, [r4, #0]
   d7fe8:	42ab      	cmp	r3, r5
   d7fea:	4b11      	ldr	r3, [pc, #68]	; (d8030 <module_user_init_hook+0x58>)
   d7fec:	bf0c      	ite	eq
   d7fee:	2201      	moveq	r2, #1
   d7ff0:	2200      	movne	r2, #0
   d7ff2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ff4:	d002      	beq.n	d7ffc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7ff6:	f7ff ffbb 	bl	d7f70 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7ffa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ffc:	f7fe fb2a 	bl	d6654 <HAL_RNG_GetRandomNumber>
   d8000:	4604      	mov	r4, r0
    srand(seed);
   d8002:	f000 fe5f 	bl	d8cc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8006:	4b0b      	ldr	r3, [pc, #44]	; (d8034 <module_user_init_hook+0x5c>)
   d8008:	b113      	cbz	r3, d8010 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d800a:	4620      	mov	r0, r4
   d800c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8010:	2100      	movs	r1, #0
   d8012:	4808      	ldr	r0, [pc, #32]	; (d8034 <module_user_init_hook+0x5c>)
   d8014:	f7fe fd56 	bl	d6ac4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d801c:	4806      	ldr	r0, [pc, #24]	; (d8038 <module_user_init_hook+0x60>)
   d801e:	2100      	movs	r1, #0
   d8020:	f7fe bcda 	b.w	d69d8 <system_ctrl_set_app_request_handler>
   d8024:	2003fc00 	.word	0x2003fc00
   d8028:	000d7f19 	.word	0x000d7f19
   d802c:	9a271c1e 	.word	0x9a271c1e
   d8030:	2003e7c0 	.word	0x2003e7c0
   d8034:	00000000 	.word	0x00000000
   d8038:	000d7fa1 	.word	0x000d7fa1

000d803c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <spark_protocol_instance+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	681b      	ldr	r3, [r3, #0]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	0003025c 	.word	0x0003025c

000d804c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <spark_protocol_set_product_id+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	685b      	ldr	r3, [r3, #4]
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	0003025c 	.word	0x0003025c

000d805c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <spark_protocol_set_product_firmware_version+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	689b      	ldr	r3, [r3, #8]
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	0003025c 	.word	0x0003025c

000d806c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d806c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d806e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8070:	d902      	bls.n	d8078 <pinAvailable+0xc>
    return false;
   d8072:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8074:	b002      	add	sp, #8
   d8076:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8078:	f1a0 030b 	sub.w	r3, r0, #11
   d807c:	2b02      	cmp	r3, #2
   d807e:	d81a      	bhi.n	d80b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8080:	4c17      	ldr	r4, [pc, #92]	; (d80e0 <pinAvailable+0x74>)
   d8082:	7821      	ldrb	r1, [r4, #0]
   d8084:	f3bf 8f5b 	dmb	ish
   d8088:	f011 0101 	ands.w	r1, r1, #1
   d808c:	d10b      	bne.n	d80a6 <pinAvailable+0x3a>
   d808e:	4620      	mov	r0, r4
   d8090:	9101      	str	r1, [sp, #4]
   d8092:	f7fc f811 	bl	d40b8 <__cxa_guard_acquire>
   d8096:	9901      	ldr	r1, [sp, #4]
   d8098:	b128      	cbz	r0, d80a6 <pinAvailable+0x3a>
   d809a:	4812      	ldr	r0, [pc, #72]	; (d80e4 <pinAvailable+0x78>)
   d809c:	f7ff fbbc 	bl	d7818 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d80a0:	4620      	mov	r0, r4
   d80a2:	f7fc f80e 	bl	d40c2 <__cxa_guard_release>
   d80a6:	4b0f      	ldr	r3, [pc, #60]	; (d80e4 <pinAvailable+0x78>)
   d80a8:	7818      	ldrb	r0, [r3, #0]
   d80aa:	f7fe fbc3 	bl	d6834 <hal_spi_is_enabled>
   d80ae:	2800      	cmp	r0, #0
   d80b0:	d1df      	bne.n	d8072 <pinAvailable+0x6>
  return true; // 'pin' is available
   d80b2:	2001      	movs	r0, #1
   d80b4:	e7de      	b.n	d8074 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d80b6:	2801      	cmp	r0, #1
   d80b8:	d809      	bhi.n	d80ce <pinAvailable+0x62>
   d80ba:	f000 f86b 	bl	d8194 <_Z19__fetch_global_Wirev>
   d80be:	2100      	movs	r1, #0
   d80c0:	7c00      	ldrb	r0, [r0, #16]
   d80c2:	f7fe fb6f 	bl	d67a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d80c6:	f080 0001 	eor.w	r0, r0, #1
   d80ca:	b2c0      	uxtb	r0, r0
   d80cc:	e7d2      	b.n	d8074 <pinAvailable+0x8>
   d80ce:	3809      	subs	r0, #9
   d80d0:	2801      	cmp	r0, #1
   d80d2:	d8ee      	bhi.n	d80b2 <pinAvailable+0x46>
   d80d4:	f7ff fe72 	bl	d7dbc <_Z22__fetch_global_Serial1v>
   d80d8:	7c00      	ldrb	r0, [r0, #16]
   d80da:	f7fe fbe3 	bl	d68a4 <hal_usart_is_enabled>
   d80de:	e7f2      	b.n	d80c6 <pinAvailable+0x5a>
   d80e0:	2003e7c8 	.word	0x2003e7c8
   d80e4:	2003e7cc 	.word	0x2003e7cc

000d80e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80e8:	2823      	cmp	r0, #35	; 0x23
{
   d80ea:	b538      	push	{r3, r4, r5, lr}
   d80ec:	4604      	mov	r4, r0
   d80ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80f0:	d80a      	bhi.n	d8108 <pinMode+0x20>
   d80f2:	29ff      	cmp	r1, #255	; 0xff
   d80f4:	d008      	beq.n	d8108 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d80f6:	f7ff ffb9 	bl	d806c <pinAvailable>
   d80fa:	b128      	cbz	r0, d8108 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d80fc:	4629      	mov	r1, r5
   d80fe:	4620      	mov	r0, r4
}
   d8100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8104:	f7fe bade 	b.w	d66c4 <HAL_Pin_Mode>
}
   d8108:	bd38      	pop	{r3, r4, r5, pc}

000d810a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d810a:	b538      	push	{r3, r4, r5, lr}
   d810c:	4604      	mov	r4, r0
   d810e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8110:	f7fe fae0 	bl	d66d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8114:	28ff      	cmp	r0, #255	; 0xff
   d8116:	d010      	beq.n	d813a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8118:	2806      	cmp	r0, #6
   d811a:	d804      	bhi.n	d8126 <digitalWrite+0x1c>
   d811c:	234d      	movs	r3, #77	; 0x4d
   d811e:	fa23 f000 	lsr.w	r0, r3, r0
   d8122:	07c3      	lsls	r3, r0, #31
   d8124:	d409      	bmi.n	d813a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8126:	4620      	mov	r0, r4
   d8128:	f7ff ffa0 	bl	d806c <pinAvailable>
   d812c:	b128      	cbz	r0, d813a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d812e:	4629      	mov	r1, r5
   d8130:	4620      	mov	r0, r4
}
   d8132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8136:	f7fe bad5 	b.w	d66e4 <HAL_GPIO_Write>
}
   d813a:	bd38      	pop	{r3, r4, r5, pc}

000d813c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d813c:	b510      	push	{r4, lr}
   d813e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8140:	f7fe fac8 	bl	d66d4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8144:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d8146:	b2db      	uxtb	r3, r3
   d8148:	2b01      	cmp	r3, #1
   d814a:	d908      	bls.n	d815e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d814c:	4620      	mov	r0, r4
   d814e:	f7ff ff8d 	bl	d806c <pinAvailable>
   d8152:	b120      	cbz	r0, d815e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8154:	4620      	mov	r0, r4
}
   d8156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d815a:	f7fe bacb 	b.w	d66f4 <HAL_GPIO_Read>
}
   d815e:	2000      	movs	r0, #0
   d8160:	bd10      	pop	{r4, pc}
	...

000d8164 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8164:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8166:	2300      	movs	r3, #0
   d8168:	2520      	movs	r5, #32
   d816a:	8043      	strh	r3, [r0, #2]
   d816c:	2314      	movs	r3, #20
{
   d816e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8170:	8003      	strh	r3, [r0, #0]
   d8172:	6085      	str	r5, [r0, #8]
   d8174:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8176:	4906      	ldr	r1, [pc, #24]	; (d8190 <_Z17acquireWireBufferv+0x2c>)
   d8178:	4628      	mov	r0, r5
   d817a:	f000 f83c 	bl	d81f6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d817e:	4904      	ldr	r1, [pc, #16]	; (d8190 <_Z17acquireWireBufferv+0x2c>)
	};
   d8180:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8182:	4628      	mov	r0, r5
   d8184:	f000 f837 	bl	d81f6 <_ZnajRKSt9nothrow_t>
	};
   d8188:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d818a:	4620      	mov	r0, r4
   d818c:	bd38      	pop	{r3, r4, r5, pc}
   d818e:	bf00      	nop
   d8190:	000db41c 	.word	0x000db41c

000d8194 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8194:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8196:	4d0f      	ldr	r5, [pc, #60]	; (d81d4 <_Z19__fetch_global_Wirev+0x40>)
   d8198:	7829      	ldrb	r1, [r5, #0]
   d819a:	f3bf 8f5b 	dmb	ish
   d819e:	f011 0401 	ands.w	r4, r1, #1
{
   d81a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d81a4:	d113      	bne.n	d81ce <_Z19__fetch_global_Wirev+0x3a>
   d81a6:	4628      	mov	r0, r5
   d81a8:	f7fb ff86 	bl	d40b8 <__cxa_guard_acquire>
   d81ac:	b178      	cbz	r0, d81ce <_Z19__fetch_global_Wirev+0x3a>
   d81ae:	a801      	add	r0, sp, #4
   d81b0:	f7ff ffd8 	bl	d8164 <_Z17acquireWireBufferv>
   d81b4:	aa01      	add	r2, sp, #4
   d81b6:	4621      	mov	r1, r4
   d81b8:	4807      	ldr	r0, [pc, #28]	; (d81d8 <_Z19__fetch_global_Wirev+0x44>)
   d81ba:	f7ff f91d 	bl	d73f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d81be:	4628      	mov	r0, r5
   d81c0:	f7fb ff7f 	bl	d40c2 <__cxa_guard_release>
   d81c4:	4a05      	ldr	r2, [pc, #20]	; (d81dc <_Z19__fetch_global_Wirev+0x48>)
   d81c6:	4906      	ldr	r1, [pc, #24]	; (d81e0 <_Z19__fetch_global_Wirev+0x4c>)
   d81c8:	4803      	ldr	r0, [pc, #12]	; (d81d8 <_Z19__fetch_global_Wirev+0x44>)
   d81ca:	f000 f80b 	bl	d81e4 <__aeabi_atexit>
	return wire;
}
   d81ce:	4802      	ldr	r0, [pc, #8]	; (d81d8 <_Z19__fetch_global_Wirev+0x44>)
   d81d0:	b007      	add	sp, #28
   d81d2:	bd30      	pop	{r4, r5, pc}
   d81d4:	2003e7d8 	.word	0x2003e7d8
   d81d8:	2003e7dc 	.word	0x2003e7dc
   d81dc:	2003e428 	.word	0x2003e428
   d81e0:	000d73a1 	.word	0x000d73a1

000d81e4 <__aeabi_atexit>:
   d81e4:	460b      	mov	r3, r1
   d81e6:	4601      	mov	r1, r0
   d81e8:	4618      	mov	r0, r3
   d81ea:	f000 bd1b 	b.w	d8c24 <__cxa_atexit>

000d81ee <_ZdlPvj>:
   d81ee:	f7fb bf56 	b.w	d409e <_ZdlPv>

000d81f2 <_ZnwjRKSt9nothrow_t>:
   d81f2:	f7fb bf50 	b.w	d4096 <_Znwj>

000d81f6 <_ZnajRKSt9nothrow_t>:
   d81f6:	f7fb bf50 	b.w	d409a <_Znaj>

000d81fa <_ZSt25__throw_bad_function_callv>:
   d81fa:	b508      	push	{r3, lr}
   d81fc:	f7fe fce2 	bl	d6bc4 <abort>

000d8200 <__aeabi_drsub>:
   d8200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8204:	e002      	b.n	d820c <__adddf3>
   d8206:	bf00      	nop

000d8208 <__aeabi_dsub>:
   d8208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d820c <__adddf3>:
   d820c:	b530      	push	{r4, r5, lr}
   d820e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8212:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8216:	ea94 0f05 	teq	r4, r5
   d821a:	bf08      	it	eq
   d821c:	ea90 0f02 	teqeq	r0, r2
   d8220:	bf1f      	itttt	ne
   d8222:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8226:	ea55 0c02 	orrsne.w	ip, r5, r2
   d822a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d822e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8232:	f000 80e2 	beq.w	d83fa <__adddf3+0x1ee>
   d8236:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d823a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d823e:	bfb8      	it	lt
   d8240:	426d      	neglt	r5, r5
   d8242:	dd0c      	ble.n	d825e <__adddf3+0x52>
   d8244:	442c      	add	r4, r5
   d8246:	ea80 0202 	eor.w	r2, r0, r2
   d824a:	ea81 0303 	eor.w	r3, r1, r3
   d824e:	ea82 0000 	eor.w	r0, r2, r0
   d8252:	ea83 0101 	eor.w	r1, r3, r1
   d8256:	ea80 0202 	eor.w	r2, r0, r2
   d825a:	ea81 0303 	eor.w	r3, r1, r3
   d825e:	2d36      	cmp	r5, #54	; 0x36
   d8260:	bf88      	it	hi
   d8262:	bd30      	pophi	{r4, r5, pc}
   d8264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8268:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d826c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8274:	d002      	beq.n	d827c <__adddf3+0x70>
   d8276:	4240      	negs	r0, r0
   d8278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d827c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8280:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8288:	d002      	beq.n	d8290 <__adddf3+0x84>
   d828a:	4252      	negs	r2, r2
   d828c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8290:	ea94 0f05 	teq	r4, r5
   d8294:	f000 80a7 	beq.w	d83e6 <__adddf3+0x1da>
   d8298:	f1a4 0401 	sub.w	r4, r4, #1
   d829c:	f1d5 0e20 	rsbs	lr, r5, #32
   d82a0:	db0d      	blt.n	d82be <__adddf3+0xb2>
   d82a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d82a6:	fa22 f205 	lsr.w	r2, r2, r5
   d82aa:	1880      	adds	r0, r0, r2
   d82ac:	f141 0100 	adc.w	r1, r1, #0
   d82b0:	fa03 f20e 	lsl.w	r2, r3, lr
   d82b4:	1880      	adds	r0, r0, r2
   d82b6:	fa43 f305 	asr.w	r3, r3, r5
   d82ba:	4159      	adcs	r1, r3
   d82bc:	e00e      	b.n	d82dc <__adddf3+0xd0>
   d82be:	f1a5 0520 	sub.w	r5, r5, #32
   d82c2:	f10e 0e20 	add.w	lr, lr, #32
   d82c6:	2a01      	cmp	r2, #1
   d82c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d82cc:	bf28      	it	cs
   d82ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   d82d2:	fa43 f305 	asr.w	r3, r3, r5
   d82d6:	18c0      	adds	r0, r0, r3
   d82d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d82dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82e0:	d507      	bpl.n	d82f2 <__adddf3+0xe6>
   d82e2:	f04f 0e00 	mov.w	lr, #0
   d82e6:	f1dc 0c00 	rsbs	ip, ip, #0
   d82ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   d82ee:	eb6e 0101 	sbc.w	r1, lr, r1
   d82f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d82f6:	d31b      	bcc.n	d8330 <__adddf3+0x124>
   d82f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d82fc:	d30c      	bcc.n	d8318 <__adddf3+0x10c>
   d82fe:	0849      	lsrs	r1, r1, #1
   d8300:	ea5f 0030 	movs.w	r0, r0, rrx
   d8304:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8308:	f104 0401 	add.w	r4, r4, #1
   d830c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8314:	f080 809a 	bcs.w	d844c <__adddf3+0x240>
   d8318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d831c:	bf08      	it	eq
   d831e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8322:	f150 0000 	adcs.w	r0, r0, #0
   d8326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d832a:	ea41 0105 	orr.w	r1, r1, r5
   d832e:	bd30      	pop	{r4, r5, pc}
   d8330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8334:	4140      	adcs	r0, r0
   d8336:	eb41 0101 	adc.w	r1, r1, r1
   d833a:	3c01      	subs	r4, #1
   d833c:	bf28      	it	cs
   d833e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8342:	d2e9      	bcs.n	d8318 <__adddf3+0x10c>
   d8344:	f091 0f00 	teq	r1, #0
   d8348:	bf04      	itt	eq
   d834a:	4601      	moveq	r1, r0
   d834c:	2000      	moveq	r0, #0
   d834e:	fab1 f381 	clz	r3, r1
   d8352:	bf08      	it	eq
   d8354:	3320      	addeq	r3, #32
   d8356:	f1a3 030b 	sub.w	r3, r3, #11
   d835a:	f1b3 0220 	subs.w	r2, r3, #32
   d835e:	da0c      	bge.n	d837a <__adddf3+0x16e>
   d8360:	320c      	adds	r2, #12
   d8362:	dd08      	ble.n	d8376 <__adddf3+0x16a>
   d8364:	f102 0c14 	add.w	ip, r2, #20
   d8368:	f1c2 020c 	rsb	r2, r2, #12
   d836c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8370:	fa21 f102 	lsr.w	r1, r1, r2
   d8374:	e00c      	b.n	d8390 <__adddf3+0x184>
   d8376:	f102 0214 	add.w	r2, r2, #20
   d837a:	bfd8      	it	le
   d837c:	f1c2 0c20 	rsble	ip, r2, #32
   d8380:	fa01 f102 	lsl.w	r1, r1, r2
   d8384:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8388:	bfdc      	itt	le
   d838a:	ea41 010c 	orrle.w	r1, r1, ip
   d838e:	4090      	lslle	r0, r2
   d8390:	1ae4      	subs	r4, r4, r3
   d8392:	bfa2      	ittt	ge
   d8394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8398:	4329      	orrge	r1, r5
   d839a:	bd30      	popge	{r4, r5, pc}
   d839c:	ea6f 0404 	mvn.w	r4, r4
   d83a0:	3c1f      	subs	r4, #31
   d83a2:	da1c      	bge.n	d83de <__adddf3+0x1d2>
   d83a4:	340c      	adds	r4, #12
   d83a6:	dc0e      	bgt.n	d83c6 <__adddf3+0x1ba>
   d83a8:	f104 0414 	add.w	r4, r4, #20
   d83ac:	f1c4 0220 	rsb	r2, r4, #32
   d83b0:	fa20 f004 	lsr.w	r0, r0, r4
   d83b4:	fa01 f302 	lsl.w	r3, r1, r2
   d83b8:	ea40 0003 	orr.w	r0, r0, r3
   d83bc:	fa21 f304 	lsr.w	r3, r1, r4
   d83c0:	ea45 0103 	orr.w	r1, r5, r3
   d83c4:	bd30      	pop	{r4, r5, pc}
   d83c6:	f1c4 040c 	rsb	r4, r4, #12
   d83ca:	f1c4 0220 	rsb	r2, r4, #32
   d83ce:	fa20 f002 	lsr.w	r0, r0, r2
   d83d2:	fa01 f304 	lsl.w	r3, r1, r4
   d83d6:	ea40 0003 	orr.w	r0, r0, r3
   d83da:	4629      	mov	r1, r5
   d83dc:	bd30      	pop	{r4, r5, pc}
   d83de:	fa21 f004 	lsr.w	r0, r1, r4
   d83e2:	4629      	mov	r1, r5
   d83e4:	bd30      	pop	{r4, r5, pc}
   d83e6:	f094 0f00 	teq	r4, #0
   d83ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d83ee:	bf06      	itte	eq
   d83f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d83f4:	3401      	addeq	r4, #1
   d83f6:	3d01      	subne	r5, #1
   d83f8:	e74e      	b.n	d8298 <__adddf3+0x8c>
   d83fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d83fe:	bf18      	it	ne
   d8400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8404:	d029      	beq.n	d845a <__adddf3+0x24e>
   d8406:	ea94 0f05 	teq	r4, r5
   d840a:	bf08      	it	eq
   d840c:	ea90 0f02 	teqeq	r0, r2
   d8410:	d005      	beq.n	d841e <__adddf3+0x212>
   d8412:	ea54 0c00 	orrs.w	ip, r4, r0
   d8416:	bf04      	itt	eq
   d8418:	4619      	moveq	r1, r3
   d841a:	4610      	moveq	r0, r2
   d841c:	bd30      	pop	{r4, r5, pc}
   d841e:	ea91 0f03 	teq	r1, r3
   d8422:	bf1e      	ittt	ne
   d8424:	2100      	movne	r1, #0
   d8426:	2000      	movne	r0, #0
   d8428:	bd30      	popne	{r4, r5, pc}
   d842a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d842e:	d105      	bne.n	d843c <__adddf3+0x230>
   d8430:	0040      	lsls	r0, r0, #1
   d8432:	4149      	adcs	r1, r1
   d8434:	bf28      	it	cs
   d8436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d843a:	bd30      	pop	{r4, r5, pc}
   d843c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8440:	bf3c      	itt	cc
   d8442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8446:	bd30      	popcc	{r4, r5, pc}
   d8448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d844c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8454:	f04f 0000 	mov.w	r0, #0
   d8458:	bd30      	pop	{r4, r5, pc}
   d845a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d845e:	bf1a      	itte	ne
   d8460:	4619      	movne	r1, r3
   d8462:	4610      	movne	r0, r2
   d8464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8468:	bf1c      	itt	ne
   d846a:	460b      	movne	r3, r1
   d846c:	4602      	movne	r2, r0
   d846e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8472:	bf06      	itte	eq
   d8474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8478:	ea91 0f03 	teqeq	r1, r3
   d847c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8480:	bd30      	pop	{r4, r5, pc}
   d8482:	bf00      	nop

000d8484 <__aeabi_ui2d>:
   d8484:	f090 0f00 	teq	r0, #0
   d8488:	bf04      	itt	eq
   d848a:	2100      	moveq	r1, #0
   d848c:	4770      	bxeq	lr
   d848e:	b530      	push	{r4, r5, lr}
   d8490:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8494:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8498:	f04f 0500 	mov.w	r5, #0
   d849c:	f04f 0100 	mov.w	r1, #0
   d84a0:	e750      	b.n	d8344 <__adddf3+0x138>
   d84a2:	bf00      	nop

000d84a4 <__aeabi_i2d>:
   d84a4:	f090 0f00 	teq	r0, #0
   d84a8:	bf04      	itt	eq
   d84aa:	2100      	moveq	r1, #0
   d84ac:	4770      	bxeq	lr
   d84ae:	b530      	push	{r4, r5, lr}
   d84b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d84bc:	bf48      	it	mi
   d84be:	4240      	negmi	r0, r0
   d84c0:	f04f 0100 	mov.w	r1, #0
   d84c4:	e73e      	b.n	d8344 <__adddf3+0x138>
   d84c6:	bf00      	nop

000d84c8 <__aeabi_f2d>:
   d84c8:	0042      	lsls	r2, r0, #1
   d84ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d84ce:	ea4f 0131 	mov.w	r1, r1, rrx
   d84d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d84d6:	bf1f      	itttt	ne
   d84d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d84dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d84e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d84e4:	4770      	bxne	lr
   d84e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d84ea:	bf08      	it	eq
   d84ec:	4770      	bxeq	lr
   d84ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d84f2:	bf04      	itt	eq
   d84f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d84f8:	4770      	bxeq	lr
   d84fa:	b530      	push	{r4, r5, lr}
   d84fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8508:	e71c      	b.n	d8344 <__adddf3+0x138>
   d850a:	bf00      	nop

000d850c <__aeabi_ul2d>:
   d850c:	ea50 0201 	orrs.w	r2, r0, r1
   d8510:	bf08      	it	eq
   d8512:	4770      	bxeq	lr
   d8514:	b530      	push	{r4, r5, lr}
   d8516:	f04f 0500 	mov.w	r5, #0
   d851a:	e00a      	b.n	d8532 <__aeabi_l2d+0x16>

000d851c <__aeabi_l2d>:
   d851c:	ea50 0201 	orrs.w	r2, r0, r1
   d8520:	bf08      	it	eq
   d8522:	4770      	bxeq	lr
   d8524:	b530      	push	{r4, r5, lr}
   d8526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d852a:	d502      	bpl.n	d8532 <__aeabi_l2d+0x16>
   d852c:	4240      	negs	r0, r0
   d852e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8532:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8536:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d853a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d853e:	f43f aed8 	beq.w	d82f2 <__adddf3+0xe6>
   d8542:	f04f 0203 	mov.w	r2, #3
   d8546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d854a:	bf18      	it	ne
   d854c:	3203      	addne	r2, #3
   d854e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8552:	bf18      	it	ne
   d8554:	3203      	addne	r2, #3
   d8556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d855a:	f1c2 0320 	rsb	r3, r2, #32
   d855e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8562:	fa20 f002 	lsr.w	r0, r0, r2
   d8566:	fa01 fe03 	lsl.w	lr, r1, r3
   d856a:	ea40 000e 	orr.w	r0, r0, lr
   d856e:	fa21 f102 	lsr.w	r1, r1, r2
   d8572:	4414      	add	r4, r2
   d8574:	e6bd      	b.n	d82f2 <__adddf3+0xe6>
   d8576:	bf00      	nop

000d8578 <__aeabi_dmul>:
   d8578:	b570      	push	{r4, r5, r6, lr}
   d857a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d857e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8586:	bf1d      	ittte	ne
   d8588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d858c:	ea94 0f0c 	teqne	r4, ip
   d8590:	ea95 0f0c 	teqne	r5, ip
   d8594:	f000 f8de 	bleq	d8754 <__aeabi_dmul+0x1dc>
   d8598:	442c      	add	r4, r5
   d859a:	ea81 0603 	eor.w	r6, r1, r3
   d859e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d85a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d85a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d85aa:	bf18      	it	ne
   d85ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d85b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d85b8:	d038      	beq.n	d862c <__aeabi_dmul+0xb4>
   d85ba:	fba0 ce02 	umull	ip, lr, r0, r2
   d85be:	f04f 0500 	mov.w	r5, #0
   d85c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d85c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d85ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d85ce:	f04f 0600 	mov.w	r6, #0
   d85d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d85d6:	f09c 0f00 	teq	ip, #0
   d85da:	bf18      	it	ne
   d85dc:	f04e 0e01 	orrne.w	lr, lr, #1
   d85e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d85e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d85e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d85ec:	d204      	bcs.n	d85f8 <__aeabi_dmul+0x80>
   d85ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d85f2:	416d      	adcs	r5, r5
   d85f4:	eb46 0606 	adc.w	r6, r6, r6
   d85f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d85fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d860c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8610:	bf88      	it	hi
   d8612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8616:	d81e      	bhi.n	d8656 <__aeabi_dmul+0xde>
   d8618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d861c:	bf08      	it	eq
   d861e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8622:	f150 0000 	adcs.w	r0, r0, #0
   d8626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d862a:	bd70      	pop	{r4, r5, r6, pc}
   d862c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8630:	ea46 0101 	orr.w	r1, r6, r1
   d8634:	ea40 0002 	orr.w	r0, r0, r2
   d8638:	ea81 0103 	eor.w	r1, r1, r3
   d863c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8640:	bfc2      	ittt	gt
   d8642:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d864a:	bd70      	popgt	{r4, r5, r6, pc}
   d864c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8650:	f04f 0e00 	mov.w	lr, #0
   d8654:	3c01      	subs	r4, #1
   d8656:	f300 80ab 	bgt.w	d87b0 <__aeabi_dmul+0x238>
   d865a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d865e:	bfde      	ittt	le
   d8660:	2000      	movle	r0, #0
   d8662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8666:	bd70      	pople	{r4, r5, r6, pc}
   d8668:	f1c4 0400 	rsb	r4, r4, #0
   d866c:	3c20      	subs	r4, #32
   d866e:	da35      	bge.n	d86dc <__aeabi_dmul+0x164>
   d8670:	340c      	adds	r4, #12
   d8672:	dc1b      	bgt.n	d86ac <__aeabi_dmul+0x134>
   d8674:	f104 0414 	add.w	r4, r4, #20
   d8678:	f1c4 0520 	rsb	r5, r4, #32
   d867c:	fa00 f305 	lsl.w	r3, r0, r5
   d8680:	fa20 f004 	lsr.w	r0, r0, r4
   d8684:	fa01 f205 	lsl.w	r2, r1, r5
   d8688:	ea40 0002 	orr.w	r0, r0, r2
   d868c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8698:	fa21 f604 	lsr.w	r6, r1, r4
   d869c:	eb42 0106 	adc.w	r1, r2, r6
   d86a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86a4:	bf08      	it	eq
   d86a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d86aa:	bd70      	pop	{r4, r5, r6, pc}
   d86ac:	f1c4 040c 	rsb	r4, r4, #12
   d86b0:	f1c4 0520 	rsb	r5, r4, #32
   d86b4:	fa00 f304 	lsl.w	r3, r0, r4
   d86b8:	fa20 f005 	lsr.w	r0, r0, r5
   d86bc:	fa01 f204 	lsl.w	r2, r1, r4
   d86c0:	ea40 0002 	orr.w	r0, r0, r2
   d86c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d86cc:	f141 0100 	adc.w	r1, r1, #0
   d86d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86d4:	bf08      	it	eq
   d86d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d86da:	bd70      	pop	{r4, r5, r6, pc}
   d86dc:	f1c4 0520 	rsb	r5, r4, #32
   d86e0:	fa00 f205 	lsl.w	r2, r0, r5
   d86e4:	ea4e 0e02 	orr.w	lr, lr, r2
   d86e8:	fa20 f304 	lsr.w	r3, r0, r4
   d86ec:	fa01 f205 	lsl.w	r2, r1, r5
   d86f0:	ea43 0302 	orr.w	r3, r3, r2
   d86f4:	fa21 f004 	lsr.w	r0, r1, r4
   d86f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86fc:	fa21 f204 	lsr.w	r2, r1, r4
   d8700:	ea20 0002 	bic.w	r0, r0, r2
   d8704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d870c:	bf08      	it	eq
   d870e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8712:	bd70      	pop	{r4, r5, r6, pc}
   d8714:	f094 0f00 	teq	r4, #0
   d8718:	d10f      	bne.n	d873a <__aeabi_dmul+0x1c2>
   d871a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d871e:	0040      	lsls	r0, r0, #1
   d8720:	eb41 0101 	adc.w	r1, r1, r1
   d8724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8728:	bf08      	it	eq
   d872a:	3c01      	subeq	r4, #1
   d872c:	d0f7      	beq.n	d871e <__aeabi_dmul+0x1a6>
   d872e:	ea41 0106 	orr.w	r1, r1, r6
   d8732:	f095 0f00 	teq	r5, #0
   d8736:	bf18      	it	ne
   d8738:	4770      	bxne	lr
   d873a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d873e:	0052      	lsls	r2, r2, #1
   d8740:	eb43 0303 	adc.w	r3, r3, r3
   d8744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8748:	bf08      	it	eq
   d874a:	3d01      	subeq	r5, #1
   d874c:	d0f7      	beq.n	d873e <__aeabi_dmul+0x1c6>
   d874e:	ea43 0306 	orr.w	r3, r3, r6
   d8752:	4770      	bx	lr
   d8754:	ea94 0f0c 	teq	r4, ip
   d8758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d875c:	bf18      	it	ne
   d875e:	ea95 0f0c 	teqne	r5, ip
   d8762:	d00c      	beq.n	d877e <__aeabi_dmul+0x206>
   d8764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8768:	bf18      	it	ne
   d876a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d876e:	d1d1      	bne.n	d8714 <__aeabi_dmul+0x19c>
   d8770:	ea81 0103 	eor.w	r1, r1, r3
   d8774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8778:	f04f 0000 	mov.w	r0, #0
   d877c:	bd70      	pop	{r4, r5, r6, pc}
   d877e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8782:	bf06      	itte	eq
   d8784:	4610      	moveq	r0, r2
   d8786:	4619      	moveq	r1, r3
   d8788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d878c:	d019      	beq.n	d87c2 <__aeabi_dmul+0x24a>
   d878e:	ea94 0f0c 	teq	r4, ip
   d8792:	d102      	bne.n	d879a <__aeabi_dmul+0x222>
   d8794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8798:	d113      	bne.n	d87c2 <__aeabi_dmul+0x24a>
   d879a:	ea95 0f0c 	teq	r5, ip
   d879e:	d105      	bne.n	d87ac <__aeabi_dmul+0x234>
   d87a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d87a4:	bf1c      	itt	ne
   d87a6:	4610      	movne	r0, r2
   d87a8:	4619      	movne	r1, r3
   d87aa:	d10a      	bne.n	d87c2 <__aeabi_dmul+0x24a>
   d87ac:	ea81 0103 	eor.w	r1, r1, r3
   d87b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d87bc:	f04f 0000 	mov.w	r0, #0
   d87c0:	bd70      	pop	{r4, r5, r6, pc}
   d87c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d87ca:	bd70      	pop	{r4, r5, r6, pc}

000d87cc <__aeabi_ddiv>:
   d87cc:	b570      	push	{r4, r5, r6, lr}
   d87ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d87d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d87d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d87da:	bf1d      	ittte	ne
   d87dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d87e0:	ea94 0f0c 	teqne	r4, ip
   d87e4:	ea95 0f0c 	teqne	r5, ip
   d87e8:	f000 f8a7 	bleq	d893a <__aeabi_ddiv+0x16e>
   d87ec:	eba4 0405 	sub.w	r4, r4, r5
   d87f0:	ea81 0e03 	eor.w	lr, r1, r3
   d87f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d87f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d87fc:	f000 8088 	beq.w	d8910 <__aeabi_ddiv+0x144>
   d8800:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d880c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8810:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d881c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8824:	429d      	cmp	r5, r3
   d8826:	bf08      	it	eq
   d8828:	4296      	cmpeq	r6, r2
   d882a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d882e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8832:	d202      	bcs.n	d883a <__aeabi_ddiv+0x6e>
   d8834:	085b      	lsrs	r3, r3, #1
   d8836:	ea4f 0232 	mov.w	r2, r2, rrx
   d883a:	1ab6      	subs	r6, r6, r2
   d883c:	eb65 0503 	sbc.w	r5, r5, r3
   d8840:	085b      	lsrs	r3, r3, #1
   d8842:	ea4f 0232 	mov.w	r2, r2, rrx
   d8846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d884a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d884e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8852:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8856:	bf22      	ittt	cs
   d8858:	1ab6      	subcs	r6, r6, r2
   d885a:	4675      	movcs	r5, lr
   d885c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8860:	085b      	lsrs	r3, r3, #1
   d8862:	ea4f 0232 	mov.w	r2, r2, rrx
   d8866:	ebb6 0e02 	subs.w	lr, r6, r2
   d886a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d886e:	bf22      	ittt	cs
   d8870:	1ab6      	subcs	r6, r6, r2
   d8872:	4675      	movcs	r5, lr
   d8874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8878:	085b      	lsrs	r3, r3, #1
   d887a:	ea4f 0232 	mov.w	r2, r2, rrx
   d887e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8882:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8886:	bf22      	ittt	cs
   d8888:	1ab6      	subcs	r6, r6, r2
   d888a:	4675      	movcs	r5, lr
   d888c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8890:	085b      	lsrs	r3, r3, #1
   d8892:	ea4f 0232 	mov.w	r2, r2, rrx
   d8896:	ebb6 0e02 	subs.w	lr, r6, r2
   d889a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d889e:	bf22      	ittt	cs
   d88a0:	1ab6      	subcs	r6, r6, r2
   d88a2:	4675      	movcs	r5, lr
   d88a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d88a8:	ea55 0e06 	orrs.w	lr, r5, r6
   d88ac:	d018      	beq.n	d88e0 <__aeabi_ddiv+0x114>
   d88ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d88b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d88b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d88ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d88be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d88c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d88c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d88ca:	d1c0      	bne.n	d884e <__aeabi_ddiv+0x82>
   d88cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d88d0:	d10b      	bne.n	d88ea <__aeabi_ddiv+0x11e>
   d88d2:	ea41 0100 	orr.w	r1, r1, r0
   d88d6:	f04f 0000 	mov.w	r0, #0
   d88da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d88de:	e7b6      	b.n	d884e <__aeabi_ddiv+0x82>
   d88e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d88e4:	bf04      	itt	eq
   d88e6:	4301      	orreq	r1, r0
   d88e8:	2000      	moveq	r0, #0
   d88ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d88ee:	bf88      	it	hi
   d88f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d88f4:	f63f aeaf 	bhi.w	d8656 <__aeabi_dmul+0xde>
   d88f8:	ebb5 0c03 	subs.w	ip, r5, r3
   d88fc:	bf04      	itt	eq
   d88fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8906:	f150 0000 	adcs.w	r0, r0, #0
   d890a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d890e:	bd70      	pop	{r4, r5, r6, pc}
   d8910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d891c:	bfc2      	ittt	gt
   d891e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8926:	bd70      	popgt	{r4, r5, r6, pc}
   d8928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d892c:	f04f 0e00 	mov.w	lr, #0
   d8930:	3c01      	subs	r4, #1
   d8932:	e690      	b.n	d8656 <__aeabi_dmul+0xde>
   d8934:	ea45 0e06 	orr.w	lr, r5, r6
   d8938:	e68d      	b.n	d8656 <__aeabi_dmul+0xde>
   d893a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d893e:	ea94 0f0c 	teq	r4, ip
   d8942:	bf08      	it	eq
   d8944:	ea95 0f0c 	teqeq	r5, ip
   d8948:	f43f af3b 	beq.w	d87c2 <__aeabi_dmul+0x24a>
   d894c:	ea94 0f0c 	teq	r4, ip
   d8950:	d10a      	bne.n	d8968 <__aeabi_ddiv+0x19c>
   d8952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8956:	f47f af34 	bne.w	d87c2 <__aeabi_dmul+0x24a>
   d895a:	ea95 0f0c 	teq	r5, ip
   d895e:	f47f af25 	bne.w	d87ac <__aeabi_dmul+0x234>
   d8962:	4610      	mov	r0, r2
   d8964:	4619      	mov	r1, r3
   d8966:	e72c      	b.n	d87c2 <__aeabi_dmul+0x24a>
   d8968:	ea95 0f0c 	teq	r5, ip
   d896c:	d106      	bne.n	d897c <__aeabi_ddiv+0x1b0>
   d896e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8972:	f43f aefd 	beq.w	d8770 <__aeabi_dmul+0x1f8>
   d8976:	4610      	mov	r0, r2
   d8978:	4619      	mov	r1, r3
   d897a:	e722      	b.n	d87c2 <__aeabi_dmul+0x24a>
   d897c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8980:	bf18      	it	ne
   d8982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8986:	f47f aec5 	bne.w	d8714 <__aeabi_dmul+0x19c>
   d898a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d898e:	f47f af0d 	bne.w	d87ac <__aeabi_dmul+0x234>
   d8992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8996:	f47f aeeb 	bne.w	d8770 <__aeabi_dmul+0x1f8>
   d899a:	e712      	b.n	d87c2 <__aeabi_dmul+0x24a>

000d899c <__gedf2>:
   d899c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d89a0:	e006      	b.n	d89b0 <__cmpdf2+0x4>
   d89a2:	bf00      	nop

000d89a4 <__ledf2>:
   d89a4:	f04f 0c01 	mov.w	ip, #1
   d89a8:	e002      	b.n	d89b0 <__cmpdf2+0x4>
   d89aa:	bf00      	nop

000d89ac <__cmpdf2>:
   d89ac:	f04f 0c01 	mov.w	ip, #1
   d89b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d89b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d89b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d89bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d89c0:	bf18      	it	ne
   d89c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d89c6:	d01b      	beq.n	d8a00 <__cmpdf2+0x54>
   d89c8:	b001      	add	sp, #4
   d89ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d89ce:	bf0c      	ite	eq
   d89d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d89d4:	ea91 0f03 	teqne	r1, r3
   d89d8:	bf02      	ittt	eq
   d89da:	ea90 0f02 	teqeq	r0, r2
   d89de:	2000      	moveq	r0, #0
   d89e0:	4770      	bxeq	lr
   d89e2:	f110 0f00 	cmn.w	r0, #0
   d89e6:	ea91 0f03 	teq	r1, r3
   d89ea:	bf58      	it	pl
   d89ec:	4299      	cmppl	r1, r3
   d89ee:	bf08      	it	eq
   d89f0:	4290      	cmpeq	r0, r2
   d89f2:	bf2c      	ite	cs
   d89f4:	17d8      	asrcs	r0, r3, #31
   d89f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d89fa:	f040 0001 	orr.w	r0, r0, #1
   d89fe:	4770      	bx	lr
   d8a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a08:	d102      	bne.n	d8a10 <__cmpdf2+0x64>
   d8a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a0e:	d107      	bne.n	d8a20 <__cmpdf2+0x74>
   d8a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a18:	d1d6      	bne.n	d89c8 <__cmpdf2+0x1c>
   d8a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a1e:	d0d3      	beq.n	d89c8 <__cmpdf2+0x1c>
   d8a20:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8a24:	4770      	bx	lr
   d8a26:	bf00      	nop

000d8a28 <__aeabi_cdrcmple>:
   d8a28:	4684      	mov	ip, r0
   d8a2a:	4610      	mov	r0, r2
   d8a2c:	4662      	mov	r2, ip
   d8a2e:	468c      	mov	ip, r1
   d8a30:	4619      	mov	r1, r3
   d8a32:	4663      	mov	r3, ip
   d8a34:	e000      	b.n	d8a38 <__aeabi_cdcmpeq>
   d8a36:	bf00      	nop

000d8a38 <__aeabi_cdcmpeq>:
   d8a38:	b501      	push	{r0, lr}
   d8a3a:	f7ff ffb7 	bl	d89ac <__cmpdf2>
   d8a3e:	2800      	cmp	r0, #0
   d8a40:	bf48      	it	mi
   d8a42:	f110 0f00 	cmnmi.w	r0, #0
   d8a46:	bd01      	pop	{r0, pc}

000d8a48 <__aeabi_dcmpeq>:
   d8a48:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a4c:	f7ff fff4 	bl	d8a38 <__aeabi_cdcmpeq>
   d8a50:	bf0c      	ite	eq
   d8a52:	2001      	moveq	r0, #1
   d8a54:	2000      	movne	r0, #0
   d8a56:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a5a:	bf00      	nop

000d8a5c <__aeabi_dcmplt>:
   d8a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a60:	f7ff ffea 	bl	d8a38 <__aeabi_cdcmpeq>
   d8a64:	bf34      	ite	cc
   d8a66:	2001      	movcc	r0, #1
   d8a68:	2000      	movcs	r0, #0
   d8a6a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a6e:	bf00      	nop

000d8a70 <__aeabi_dcmple>:
   d8a70:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a74:	f7ff ffe0 	bl	d8a38 <__aeabi_cdcmpeq>
   d8a78:	bf94      	ite	ls
   d8a7a:	2001      	movls	r0, #1
   d8a7c:	2000      	movhi	r0, #0
   d8a7e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a82:	bf00      	nop

000d8a84 <__aeabi_dcmpge>:
   d8a84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a88:	f7ff ffce 	bl	d8a28 <__aeabi_cdrcmple>
   d8a8c:	bf94      	ite	ls
   d8a8e:	2001      	movls	r0, #1
   d8a90:	2000      	movhi	r0, #0
   d8a92:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a96:	bf00      	nop

000d8a98 <__aeabi_dcmpgt>:
   d8a98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a9c:	f7ff ffc4 	bl	d8a28 <__aeabi_cdrcmple>
   d8aa0:	bf34      	ite	cc
   d8aa2:	2001      	movcc	r0, #1
   d8aa4:	2000      	movcs	r0, #0
   d8aa6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8aaa:	bf00      	nop

000d8aac <__aeabi_d2uiz>:
   d8aac:	004a      	lsls	r2, r1, #1
   d8aae:	d211      	bcs.n	d8ad4 <__aeabi_d2uiz+0x28>
   d8ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8ab4:	d211      	bcs.n	d8ada <__aeabi_d2uiz+0x2e>
   d8ab6:	d50d      	bpl.n	d8ad4 <__aeabi_d2uiz+0x28>
   d8ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ac0:	d40e      	bmi.n	d8ae0 <__aeabi_d2uiz+0x34>
   d8ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8ace:	fa23 f002 	lsr.w	r0, r3, r2
   d8ad2:	4770      	bx	lr
   d8ad4:	f04f 0000 	mov.w	r0, #0
   d8ad8:	4770      	bx	lr
   d8ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8ade:	d102      	bne.n	d8ae6 <__aeabi_d2uiz+0x3a>
   d8ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ae4:	4770      	bx	lr
   d8ae6:	f04f 0000 	mov.w	r0, #0
   d8aea:	4770      	bx	lr

000d8aec <__aeabi_d2f>:
   d8aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8af4:	bf24      	itt	cs
   d8af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8afe:	d90d      	bls.n	d8b1c <__aeabi_d2f+0x30>
   d8b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8b14:	bf08      	it	eq
   d8b16:	f020 0001 	biceq.w	r0, r0, #1
   d8b1a:	4770      	bx	lr
   d8b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8b20:	d121      	bne.n	d8b66 <__aeabi_d2f+0x7a>
   d8b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8b26:	bfbc      	itt	lt
   d8b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8b2c:	4770      	bxlt	lr
   d8b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8b36:	f1c2 0218 	rsb	r2, r2, #24
   d8b3a:	f1c2 0c20 	rsb	ip, r2, #32
   d8b3e:	fa10 f30c 	lsls.w	r3, r0, ip
   d8b42:	fa20 f002 	lsr.w	r0, r0, r2
   d8b46:	bf18      	it	ne
   d8b48:	f040 0001 	orrne.w	r0, r0, #1
   d8b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8b54:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8b58:	ea40 000c 	orr.w	r0, r0, ip
   d8b5c:	fa23 f302 	lsr.w	r3, r3, r2
   d8b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8b64:	e7cc      	b.n	d8b00 <__aeabi_d2f+0x14>
   d8b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8b6a:	d107      	bne.n	d8b7c <__aeabi_d2f+0x90>
   d8b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8b70:	bf1e      	ittt	ne
   d8b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8b7a:	4770      	bxne	lr
   d8b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8b88:	4770      	bx	lr
   d8b8a:	bf00      	nop

000d8b8c <__aeabi_d2ulz>:
   d8b8c:	b5d0      	push	{r4, r6, r7, lr}
   d8b8e:	4b0c      	ldr	r3, [pc, #48]	; (d8bc0 <__aeabi_d2ulz+0x34>)
   d8b90:	2200      	movs	r2, #0
   d8b92:	4606      	mov	r6, r0
   d8b94:	460f      	mov	r7, r1
   d8b96:	f7ff fcef 	bl	d8578 <__aeabi_dmul>
   d8b9a:	f7ff ff87 	bl	d8aac <__aeabi_d2uiz>
   d8b9e:	4604      	mov	r4, r0
   d8ba0:	f7ff fc70 	bl	d8484 <__aeabi_ui2d>
   d8ba4:	4b07      	ldr	r3, [pc, #28]	; (d8bc4 <__aeabi_d2ulz+0x38>)
   d8ba6:	2200      	movs	r2, #0
   d8ba8:	f7ff fce6 	bl	d8578 <__aeabi_dmul>
   d8bac:	4602      	mov	r2, r0
   d8bae:	460b      	mov	r3, r1
   d8bb0:	4630      	mov	r0, r6
   d8bb2:	4639      	mov	r1, r7
   d8bb4:	f7ff fb28 	bl	d8208 <__aeabi_dsub>
   d8bb8:	f7ff ff78 	bl	d8aac <__aeabi_d2uiz>
   d8bbc:	4621      	mov	r1, r4
   d8bbe:	bdd0      	pop	{r4, r6, r7, pc}
   d8bc0:	3df00000 	.word	0x3df00000
   d8bc4:	41f00000 	.word	0x41f00000

000d8bc8 <asctime_r>:
   d8bc8:	b510      	push	{r4, lr}
   d8bca:	460c      	mov	r4, r1
   d8bcc:	6941      	ldr	r1, [r0, #20]
   d8bce:	6903      	ldr	r3, [r0, #16]
   d8bd0:	6982      	ldr	r2, [r0, #24]
   d8bd2:	b086      	sub	sp, #24
   d8bd4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8bd8:	9104      	str	r1, [sp, #16]
   d8bda:	6801      	ldr	r1, [r0, #0]
   d8bdc:	9103      	str	r1, [sp, #12]
   d8bde:	6841      	ldr	r1, [r0, #4]
   d8be0:	9102      	str	r1, [sp, #8]
   d8be2:	6881      	ldr	r1, [r0, #8]
   d8be4:	9101      	str	r1, [sp, #4]
   d8be6:	68c1      	ldr	r1, [r0, #12]
   d8be8:	9100      	str	r1, [sp, #0]
   d8bea:	4907      	ldr	r1, [pc, #28]	; (d8c08 <asctime_r+0x40>)
   d8bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8bf0:	440b      	add	r3, r1
   d8bf2:	4906      	ldr	r1, [pc, #24]	; (d8c0c <asctime_r+0x44>)
   d8bf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8bf8:	440a      	add	r2, r1
   d8bfa:	4620      	mov	r0, r4
   d8bfc:	4904      	ldr	r1, [pc, #16]	; (d8c10 <asctime_r+0x48>)
   d8bfe:	f7fd ffd1 	bl	d6ba4 <siprintf>
   d8c02:	4620      	mov	r0, r4
   d8c04:	b006      	add	sp, #24
   d8c06:	bd10      	pop	{r4, pc}
   d8c08:	000db452 	.word	0x000db452
   d8c0c:	000db43d 	.word	0x000db43d
   d8c10:	000db41d 	.word	0x000db41d

000d8c14 <atof>:
   d8c14:	2100      	movs	r1, #0
   d8c16:	f000 befd 	b.w	d9a14 <strtod>

000d8c1a <atoi>:
   d8c1a:	220a      	movs	r2, #10
   d8c1c:	2100      	movs	r1, #0
   d8c1e:	f000 bf7f 	b.w	d9b20 <strtol>
	...

000d8c24 <__cxa_atexit>:
   d8c24:	b510      	push	{r4, lr}
   d8c26:	4c05      	ldr	r4, [pc, #20]	; (d8c3c <__cxa_atexit+0x18>)
   d8c28:	4613      	mov	r3, r2
   d8c2a:	b12c      	cbz	r4, d8c38 <__cxa_atexit+0x14>
   d8c2c:	460a      	mov	r2, r1
   d8c2e:	4601      	mov	r1, r0
   d8c30:	2002      	movs	r0, #2
   d8c32:	f3af 8000 	nop.w
   d8c36:	bd10      	pop	{r4, pc}
   d8c38:	4620      	mov	r0, r4
   d8c3a:	e7fc      	b.n	d8c36 <__cxa_atexit+0x12>
   d8c3c:	00000000 	.word	0x00000000

000d8c40 <gmtime>:
   d8c40:	b538      	push	{r3, r4, r5, lr}
   d8c42:	4b07      	ldr	r3, [pc, #28]	; (d8c60 <gmtime+0x20>)
   d8c44:	681d      	ldr	r5, [r3, #0]
   d8c46:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8c48:	4604      	mov	r4, r0
   d8c4a:	b91b      	cbnz	r3, d8c54 <gmtime+0x14>
   d8c4c:	2024      	movs	r0, #36	; 0x24
   d8c4e:	f7fd ff91 	bl	d6b74 <malloc>
   d8c52:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8c54:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8c56:	4620      	mov	r0, r4
   d8c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8c5c:	f7fd bfda 	b.w	d6c14 <gmtime_r>
   d8c60:	2003e254 	.word	0x2003e254

000d8c64 <memcpy>:
   d8c64:	440a      	add	r2, r1
   d8c66:	4291      	cmp	r1, r2
   d8c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8c6c:	d100      	bne.n	d8c70 <memcpy+0xc>
   d8c6e:	4770      	bx	lr
   d8c70:	b510      	push	{r4, lr}
   d8c72:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c76:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8c7a:	4291      	cmp	r1, r2
   d8c7c:	d1f9      	bne.n	d8c72 <memcpy+0xe>
   d8c7e:	bd10      	pop	{r4, pc}

000d8c80 <memmove>:
   d8c80:	4288      	cmp	r0, r1
   d8c82:	b510      	push	{r4, lr}
   d8c84:	eb01 0402 	add.w	r4, r1, r2
   d8c88:	d902      	bls.n	d8c90 <memmove+0x10>
   d8c8a:	4284      	cmp	r4, r0
   d8c8c:	4623      	mov	r3, r4
   d8c8e:	d807      	bhi.n	d8ca0 <memmove+0x20>
   d8c90:	1e43      	subs	r3, r0, #1
   d8c92:	42a1      	cmp	r1, r4
   d8c94:	d008      	beq.n	d8ca8 <memmove+0x28>
   d8c96:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8c9e:	e7f8      	b.n	d8c92 <memmove+0x12>
   d8ca0:	4402      	add	r2, r0
   d8ca2:	4601      	mov	r1, r0
   d8ca4:	428a      	cmp	r2, r1
   d8ca6:	d100      	bne.n	d8caa <memmove+0x2a>
   d8ca8:	bd10      	pop	{r4, pc}
   d8caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8cb2:	e7f7      	b.n	d8ca4 <memmove+0x24>

000d8cb4 <memset>:
   d8cb4:	4402      	add	r2, r0
   d8cb6:	4603      	mov	r3, r0
   d8cb8:	4293      	cmp	r3, r2
   d8cba:	d100      	bne.n	d8cbe <memset+0xa>
   d8cbc:	4770      	bx	lr
   d8cbe:	f803 1b01 	strb.w	r1, [r3], #1
   d8cc2:	e7f9      	b.n	d8cb8 <memset+0x4>

000d8cc4 <srand>:
   d8cc4:	b538      	push	{r3, r4, r5, lr}
   d8cc6:	4b0d      	ldr	r3, [pc, #52]	; (d8cfc <srand+0x38>)
   d8cc8:	681d      	ldr	r5, [r3, #0]
   d8cca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8ccc:	4604      	mov	r4, r0
   d8cce:	b97b      	cbnz	r3, d8cf0 <srand+0x2c>
   d8cd0:	2018      	movs	r0, #24
   d8cd2:	f7fd ff4f 	bl	d6b74 <malloc>
   d8cd6:	4a0a      	ldr	r2, [pc, #40]	; (d8d00 <srand+0x3c>)
   d8cd8:	4b0a      	ldr	r3, [pc, #40]	; (d8d04 <srand+0x40>)
   d8cda:	63a8      	str	r0, [r5, #56]	; 0x38
   d8cdc:	e9c0 2300 	strd	r2, r3, [r0]
   d8ce0:	4b09      	ldr	r3, [pc, #36]	; (d8d08 <srand+0x44>)
   d8ce2:	6083      	str	r3, [r0, #8]
   d8ce4:	230b      	movs	r3, #11
   d8ce6:	8183      	strh	r3, [r0, #12]
   d8ce8:	2201      	movs	r2, #1
   d8cea:	2300      	movs	r3, #0
   d8cec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8cf0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8cf2:	2200      	movs	r2, #0
   d8cf4:	611c      	str	r4, [r3, #16]
   d8cf6:	615a      	str	r2, [r3, #20]
   d8cf8:	bd38      	pop	{r3, r4, r5, pc}
   d8cfa:	bf00      	nop
   d8cfc:	2003e254 	.word	0x2003e254
   d8d00:	abcd330e 	.word	0xabcd330e
   d8d04:	e66d1234 	.word	0xe66d1234
   d8d08:	0005deec 	.word	0x0005deec

000d8d0c <strcmp>:
   d8d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d10:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8d14:	2a01      	cmp	r2, #1
   d8d16:	bf28      	it	cs
   d8d18:	429a      	cmpcs	r2, r3
   d8d1a:	d0f7      	beq.n	d8d0c <strcmp>
   d8d1c:	1ad0      	subs	r0, r2, r3
   d8d1e:	4770      	bx	lr

000d8d20 <strcpy>:
   d8d20:	4603      	mov	r3, r0
   d8d22:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8d26:	f803 2b01 	strb.w	r2, [r3], #1
   d8d2a:	2a00      	cmp	r2, #0
   d8d2c:	d1f9      	bne.n	d8d22 <strcpy+0x2>
   d8d2e:	4770      	bx	lr

000d8d30 <strdup>:
   d8d30:	4b02      	ldr	r3, [pc, #8]	; (d8d3c <strdup+0xc>)
   d8d32:	4601      	mov	r1, r0
   d8d34:	6818      	ldr	r0, [r3, #0]
   d8d36:	f000 b803 	b.w	d8d40 <_strdup_r>
   d8d3a:	bf00      	nop
   d8d3c:	2003e254 	.word	0x2003e254

000d8d40 <_strdup_r>:
   d8d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d42:	4604      	mov	r4, r0
   d8d44:	4608      	mov	r0, r1
   d8d46:	460d      	mov	r5, r1
   d8d48:	f000 f80f 	bl	d8d6a <strlen>
   d8d4c:	1c42      	adds	r2, r0, #1
   d8d4e:	4611      	mov	r1, r2
   d8d50:	4620      	mov	r0, r4
   d8d52:	9201      	str	r2, [sp, #4]
   d8d54:	f7fd ff3e 	bl	d6bd4 <_malloc_r>
   d8d58:	4604      	mov	r4, r0
   d8d5a:	b118      	cbz	r0, d8d64 <_strdup_r+0x24>
   d8d5c:	9a01      	ldr	r2, [sp, #4]
   d8d5e:	4629      	mov	r1, r5
   d8d60:	f7ff ff80 	bl	d8c64 <memcpy>
   d8d64:	4620      	mov	r0, r4
   d8d66:	b003      	add	sp, #12
   d8d68:	bd30      	pop	{r4, r5, pc}

000d8d6a <strlen>:
   d8d6a:	4603      	mov	r3, r0
   d8d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d70:	2a00      	cmp	r2, #0
   d8d72:	d1fb      	bne.n	d8d6c <strlen+0x2>
   d8d74:	1a18      	subs	r0, r3, r0
   d8d76:	3801      	subs	r0, #1
   d8d78:	4770      	bx	lr

000d8d7a <strncmp>:
   d8d7a:	b510      	push	{r4, lr}
   d8d7c:	b16a      	cbz	r2, d8d9a <strncmp+0x20>
   d8d7e:	3901      	subs	r1, #1
   d8d80:	1884      	adds	r4, r0, r2
   d8d82:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8d86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8d8a:	4293      	cmp	r3, r2
   d8d8c:	d103      	bne.n	d8d96 <strncmp+0x1c>
   d8d8e:	42a0      	cmp	r0, r4
   d8d90:	d001      	beq.n	d8d96 <strncmp+0x1c>
   d8d92:	2b00      	cmp	r3, #0
   d8d94:	d1f5      	bne.n	d8d82 <strncmp+0x8>
   d8d96:	1a98      	subs	r0, r3, r2
   d8d98:	bd10      	pop	{r4, pc}
   d8d9a:	4610      	mov	r0, r2
   d8d9c:	e7fc      	b.n	d8d98 <strncmp+0x1e>

000d8d9e <strncpy>:
   d8d9e:	b510      	push	{r4, lr}
   d8da0:	3901      	subs	r1, #1
   d8da2:	4603      	mov	r3, r0
   d8da4:	b132      	cbz	r2, d8db4 <strncpy+0x16>
   d8da6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8daa:	f803 4b01 	strb.w	r4, [r3], #1
   d8dae:	3a01      	subs	r2, #1
   d8db0:	2c00      	cmp	r4, #0
   d8db2:	d1f7      	bne.n	d8da4 <strncpy+0x6>
   d8db4:	441a      	add	r2, r3
   d8db6:	2100      	movs	r1, #0
   d8db8:	4293      	cmp	r3, r2
   d8dba:	d100      	bne.n	d8dbe <strncpy+0x20>
   d8dbc:	bd10      	pop	{r4, pc}
   d8dbe:	f803 1b01 	strb.w	r1, [r3], #1
   d8dc2:	e7f9      	b.n	d8db8 <strncpy+0x1a>

000d8dc4 <sulp>:
   d8dc4:	b570      	push	{r4, r5, r6, lr}
   d8dc6:	4604      	mov	r4, r0
   d8dc8:	460d      	mov	r5, r1
   d8dca:	ec45 4b10 	vmov	d0, r4, r5
   d8dce:	4616      	mov	r6, r2
   d8dd0:	f001 fd1c 	bl	da80c <__ulp>
   d8dd4:	ec51 0b10 	vmov	r0, r1, d0
   d8dd8:	b17e      	cbz	r6, d8dfa <sulp+0x36>
   d8dda:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8dde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8de2:	2b00      	cmp	r3, #0
   d8de4:	dd09      	ble.n	d8dfa <sulp+0x36>
   d8de6:	051b      	lsls	r3, r3, #20
   d8de8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8dec:	2400      	movs	r4, #0
   d8dee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8df2:	4622      	mov	r2, r4
   d8df4:	462b      	mov	r3, r5
   d8df6:	f7ff fbbf 	bl	d8578 <__aeabi_dmul>
   d8dfa:	bd70      	pop	{r4, r5, r6, pc}
   d8dfc:	0000      	movs	r0, r0
	...

000d8e00 <_strtod_l>:
   d8e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e04:	b0a3      	sub	sp, #140	; 0x8c
   d8e06:	461f      	mov	r7, r3
   d8e08:	2300      	movs	r3, #0
   d8e0a:	931e      	str	r3, [sp, #120]	; 0x78
   d8e0c:	4ba4      	ldr	r3, [pc, #656]	; (d90a0 <_strtod_l+0x2a0>)
   d8e0e:	9219      	str	r2, [sp, #100]	; 0x64
   d8e10:	681b      	ldr	r3, [r3, #0]
   d8e12:	9307      	str	r3, [sp, #28]
   d8e14:	4604      	mov	r4, r0
   d8e16:	4618      	mov	r0, r3
   d8e18:	4688      	mov	r8, r1
   d8e1a:	f7ff ffa6 	bl	d8d6a <strlen>
   d8e1e:	f04f 0a00 	mov.w	sl, #0
   d8e22:	4605      	mov	r5, r0
   d8e24:	f04f 0b00 	mov.w	fp, #0
   d8e28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e2e:	781a      	ldrb	r2, [r3, #0]
   d8e30:	2a2b      	cmp	r2, #43	; 0x2b
   d8e32:	d04c      	beq.n	d8ece <_strtod_l+0xce>
   d8e34:	d839      	bhi.n	d8eaa <_strtod_l+0xaa>
   d8e36:	2a0d      	cmp	r2, #13
   d8e38:	d832      	bhi.n	d8ea0 <_strtod_l+0xa0>
   d8e3a:	2a08      	cmp	r2, #8
   d8e3c:	d832      	bhi.n	d8ea4 <_strtod_l+0xa4>
   d8e3e:	2a00      	cmp	r2, #0
   d8e40:	d03c      	beq.n	d8ebc <_strtod_l+0xbc>
   d8e42:	2300      	movs	r3, #0
   d8e44:	930e      	str	r3, [sp, #56]	; 0x38
   d8e46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8e48:	7833      	ldrb	r3, [r6, #0]
   d8e4a:	2b30      	cmp	r3, #48	; 0x30
   d8e4c:	f040 80b4 	bne.w	d8fb8 <_strtod_l+0x1b8>
   d8e50:	7873      	ldrb	r3, [r6, #1]
   d8e52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8e56:	2b58      	cmp	r3, #88	; 0x58
   d8e58:	d16c      	bne.n	d8f34 <_strtod_l+0x134>
   d8e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8e5c:	9301      	str	r3, [sp, #4]
   d8e5e:	ab1e      	add	r3, sp, #120	; 0x78
   d8e60:	9702      	str	r7, [sp, #8]
   d8e62:	9300      	str	r3, [sp, #0]
   d8e64:	4a8f      	ldr	r2, [pc, #572]	; (d90a4 <_strtod_l+0x2a4>)
   d8e66:	ab1f      	add	r3, sp, #124	; 0x7c
   d8e68:	a91d      	add	r1, sp, #116	; 0x74
   d8e6a:	4620      	mov	r0, r4
   d8e6c:	f000 feca 	bl	d9c04 <__gethex>
   d8e70:	f010 0707 	ands.w	r7, r0, #7
   d8e74:	4605      	mov	r5, r0
   d8e76:	d005      	beq.n	d8e84 <_strtod_l+0x84>
   d8e78:	2f06      	cmp	r7, #6
   d8e7a:	d12a      	bne.n	d8ed2 <_strtod_l+0xd2>
   d8e7c:	3601      	adds	r6, #1
   d8e7e:	2300      	movs	r3, #0
   d8e80:	961d      	str	r6, [sp, #116]	; 0x74
   d8e82:	930e      	str	r3, [sp, #56]	; 0x38
   d8e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8e86:	2b00      	cmp	r3, #0
   d8e88:	f040 8596 	bne.w	d99b8 <_strtod_l+0xbb8>
   d8e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8e8e:	b1db      	cbz	r3, d8ec8 <_strtod_l+0xc8>
   d8e90:	4652      	mov	r2, sl
   d8e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8e96:	ec43 2b10 	vmov	d0, r2, r3
   d8e9a:	b023      	add	sp, #140	; 0x8c
   d8e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ea0:	2a20      	cmp	r2, #32
   d8ea2:	d1ce      	bne.n	d8e42 <_strtod_l+0x42>
   d8ea4:	3301      	adds	r3, #1
   d8ea6:	931d      	str	r3, [sp, #116]	; 0x74
   d8ea8:	e7c0      	b.n	d8e2c <_strtod_l+0x2c>
   d8eaa:	2a2d      	cmp	r2, #45	; 0x2d
   d8eac:	d1c9      	bne.n	d8e42 <_strtod_l+0x42>
   d8eae:	2201      	movs	r2, #1
   d8eb0:	920e      	str	r2, [sp, #56]	; 0x38
   d8eb2:	1c5a      	adds	r2, r3, #1
   d8eb4:	921d      	str	r2, [sp, #116]	; 0x74
   d8eb6:	785b      	ldrb	r3, [r3, #1]
   d8eb8:	2b00      	cmp	r3, #0
   d8eba:	d1c4      	bne.n	d8e46 <_strtod_l+0x46>
   d8ebc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8ebe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8ec2:	2b00      	cmp	r3, #0
   d8ec4:	f040 8576 	bne.w	d99b4 <_strtod_l+0xbb4>
   d8ec8:	4652      	mov	r2, sl
   d8eca:	465b      	mov	r3, fp
   d8ecc:	e7e3      	b.n	d8e96 <_strtod_l+0x96>
   d8ece:	2200      	movs	r2, #0
   d8ed0:	e7ee      	b.n	d8eb0 <_strtod_l+0xb0>
   d8ed2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8ed4:	b13a      	cbz	r2, d8ee6 <_strtod_l+0xe6>
   d8ed6:	2135      	movs	r1, #53	; 0x35
   d8ed8:	a820      	add	r0, sp, #128	; 0x80
   d8eda:	f001 fd96 	bl	daa0a <__copybits>
   d8ede:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8ee0:	4620      	mov	r0, r4
   d8ee2:	f001 f9cb 	bl	da27c <_Bfree>
   d8ee6:	3f01      	subs	r7, #1
   d8ee8:	2f05      	cmp	r7, #5
   d8eea:	d807      	bhi.n	d8efc <_strtod_l+0xfc>
   d8eec:	e8df f007 	tbb	[pc, r7]
   d8ef0:	1d180b0e 	.word	0x1d180b0e
   d8ef4:	030e      	.short	0x030e
   d8ef6:	f04f 0b00 	mov.w	fp, #0
   d8efa:	46da      	mov	sl, fp
   d8efc:	0728      	lsls	r0, r5, #28
   d8efe:	d5c1      	bpl.n	d8e84 <_strtod_l+0x84>
   d8f00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8f04:	e7be      	b.n	d8e84 <_strtod_l+0x84>
   d8f06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8f0a:	e7f7      	b.n	d8efc <_strtod_l+0xfc>
   d8f0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8f10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8f12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8f16:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8f1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8f1e:	e7ed      	b.n	d8efc <_strtod_l+0xfc>
   d8f20:	f8df b184 	ldr.w	fp, [pc, #388]	; d90a8 <_strtod_l+0x2a8>
   d8f24:	f04f 0a00 	mov.w	sl, #0
   d8f28:	e7e8      	b.n	d8efc <_strtod_l+0xfc>
   d8f2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8f2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8f32:	e7e3      	b.n	d8efc <_strtod_l+0xfc>
   d8f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f36:	1c5a      	adds	r2, r3, #1
   d8f38:	921d      	str	r2, [sp, #116]	; 0x74
   d8f3a:	785b      	ldrb	r3, [r3, #1]
   d8f3c:	2b30      	cmp	r3, #48	; 0x30
   d8f3e:	d0f9      	beq.n	d8f34 <_strtod_l+0x134>
   d8f40:	2b00      	cmp	r3, #0
   d8f42:	d09f      	beq.n	d8e84 <_strtod_l+0x84>
   d8f44:	2301      	movs	r3, #1
   d8f46:	f04f 0900 	mov.w	r9, #0
   d8f4a:	9304      	str	r3, [sp, #16]
   d8f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f4e:	930a      	str	r3, [sp, #40]	; 0x28
   d8f50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8f54:	464f      	mov	r7, r9
   d8f56:	220a      	movs	r2, #10
   d8f58:	981d      	ldr	r0, [sp, #116]	; 0x74
   d8f5a:	7806      	ldrb	r6, [r0, #0]
   d8f5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8f60:	b2d9      	uxtb	r1, r3
   d8f62:	2909      	cmp	r1, #9
   d8f64:	d92a      	bls.n	d8fbc <_strtod_l+0x1bc>
   d8f66:	9907      	ldr	r1, [sp, #28]
   d8f68:	462a      	mov	r2, r5
   d8f6a:	f7ff ff06 	bl	d8d7a <strncmp>
   d8f6e:	b398      	cbz	r0, d8fd8 <_strtod_l+0x1d8>
   d8f70:	2000      	movs	r0, #0
   d8f72:	4633      	mov	r3, r6
   d8f74:	463d      	mov	r5, r7
   d8f76:	9007      	str	r0, [sp, #28]
   d8f78:	4602      	mov	r2, r0
   d8f7a:	2b65      	cmp	r3, #101	; 0x65
   d8f7c:	d001      	beq.n	d8f82 <_strtod_l+0x182>
   d8f7e:	2b45      	cmp	r3, #69	; 0x45
   d8f80:	d118      	bne.n	d8fb4 <_strtod_l+0x1b4>
   d8f82:	b91d      	cbnz	r5, d8f8c <_strtod_l+0x18c>
   d8f84:	9b04      	ldr	r3, [sp, #16]
   d8f86:	4303      	orrs	r3, r0
   d8f88:	d098      	beq.n	d8ebc <_strtod_l+0xbc>
   d8f8a:	2500      	movs	r5, #0
   d8f8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8f90:	f108 0301 	add.w	r3, r8, #1
   d8f94:	931d      	str	r3, [sp, #116]	; 0x74
   d8f96:	f898 3001 	ldrb.w	r3, [r8, #1]
   d8f9a:	2b2b      	cmp	r3, #43	; 0x2b
   d8f9c:	d075      	beq.n	d908a <_strtod_l+0x28a>
   d8f9e:	2b2d      	cmp	r3, #45	; 0x2d
   d8fa0:	d07b      	beq.n	d909a <_strtod_l+0x29a>
   d8fa2:	f04f 0c00 	mov.w	ip, #0
   d8fa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8faa:	2909      	cmp	r1, #9
   d8fac:	f240 8082 	bls.w	d90b4 <_strtod_l+0x2b4>
   d8fb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8fb4:	2600      	movs	r6, #0
   d8fb6:	e09d      	b.n	d90f4 <_strtod_l+0x2f4>
   d8fb8:	2300      	movs	r3, #0
   d8fba:	e7c4      	b.n	d8f46 <_strtod_l+0x146>
   d8fbc:	2f08      	cmp	r7, #8
   d8fbe:	bfd8      	it	le
   d8fc0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d8fc2:	f100 0001 	add.w	r0, r0, #1
   d8fc6:	bfda      	itte	le
   d8fc8:	fb02 3301 	mlale	r3, r2, r1, r3
   d8fcc:	9309      	strle	r3, [sp, #36]	; 0x24
   d8fce:	fb02 3909 	mlagt	r9, r2, r9, r3
   d8fd2:	3701      	adds	r7, #1
   d8fd4:	901d      	str	r0, [sp, #116]	; 0x74
   d8fd6:	e7bf      	b.n	d8f58 <_strtod_l+0x158>
   d8fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fda:	195a      	adds	r2, r3, r5
   d8fdc:	921d      	str	r2, [sp, #116]	; 0x74
   d8fde:	5d5b      	ldrb	r3, [r3, r5]
   d8fe0:	2f00      	cmp	r7, #0
   d8fe2:	d037      	beq.n	d9054 <_strtod_l+0x254>
   d8fe4:	9007      	str	r0, [sp, #28]
   d8fe6:	463d      	mov	r5, r7
   d8fe8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d8fec:	2a09      	cmp	r2, #9
   d8fee:	d912      	bls.n	d9016 <_strtod_l+0x216>
   d8ff0:	2201      	movs	r2, #1
   d8ff2:	e7c2      	b.n	d8f7a <_strtod_l+0x17a>
   d8ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8ff6:	1c5a      	adds	r2, r3, #1
   d8ff8:	921d      	str	r2, [sp, #116]	; 0x74
   d8ffa:	785b      	ldrb	r3, [r3, #1]
   d8ffc:	3001      	adds	r0, #1
   d8ffe:	2b30      	cmp	r3, #48	; 0x30
   d9000:	d0f8      	beq.n	d8ff4 <_strtod_l+0x1f4>
   d9002:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9006:	2a08      	cmp	r2, #8
   d9008:	f200 84db 	bhi.w	d99c2 <_strtod_l+0xbc2>
   d900c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d900e:	9007      	str	r0, [sp, #28]
   d9010:	2000      	movs	r0, #0
   d9012:	920a      	str	r2, [sp, #40]	; 0x28
   d9014:	4605      	mov	r5, r0
   d9016:	3b30      	subs	r3, #48	; 0x30
   d9018:	f100 0201 	add.w	r2, r0, #1
   d901c:	d014      	beq.n	d9048 <_strtod_l+0x248>
   d901e:	9907      	ldr	r1, [sp, #28]
   d9020:	4411      	add	r1, r2
   d9022:	9107      	str	r1, [sp, #28]
   d9024:	462a      	mov	r2, r5
   d9026:	eb00 0e05 	add.w	lr, r0, r5
   d902a:	210a      	movs	r1, #10
   d902c:	4572      	cmp	r2, lr
   d902e:	d113      	bne.n	d9058 <_strtod_l+0x258>
   d9030:	182a      	adds	r2, r5, r0
   d9032:	2a08      	cmp	r2, #8
   d9034:	f105 0501 	add.w	r5, r5, #1
   d9038:	4405      	add	r5, r0
   d903a:	dc1c      	bgt.n	d9076 <_strtod_l+0x276>
   d903c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d903e:	220a      	movs	r2, #10
   d9040:	fb02 3301 	mla	r3, r2, r1, r3
   d9044:	9309      	str	r3, [sp, #36]	; 0x24
   d9046:	2200      	movs	r2, #0
   d9048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d904a:	1c59      	adds	r1, r3, #1
   d904c:	911d      	str	r1, [sp, #116]	; 0x74
   d904e:	785b      	ldrb	r3, [r3, #1]
   d9050:	4610      	mov	r0, r2
   d9052:	e7c9      	b.n	d8fe8 <_strtod_l+0x1e8>
   d9054:	4638      	mov	r0, r7
   d9056:	e7d2      	b.n	d8ffe <_strtod_l+0x1fe>
   d9058:	2a08      	cmp	r2, #8
   d905a:	dc04      	bgt.n	d9066 <_strtod_l+0x266>
   d905c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d905e:	434e      	muls	r6, r1
   d9060:	9609      	str	r6, [sp, #36]	; 0x24
   d9062:	3201      	adds	r2, #1
   d9064:	e7e2      	b.n	d902c <_strtod_l+0x22c>
   d9066:	f102 0c01 	add.w	ip, r2, #1
   d906a:	f1bc 0f10 	cmp.w	ip, #16
   d906e:	bfd8      	it	le
   d9070:	fb01 f909 	mulle.w	r9, r1, r9
   d9074:	e7f5      	b.n	d9062 <_strtod_l+0x262>
   d9076:	2d10      	cmp	r5, #16
   d9078:	bfdc      	itt	le
   d907a:	220a      	movle	r2, #10
   d907c:	fb02 3909 	mlale	r9, r2, r9, r3
   d9080:	e7e1      	b.n	d9046 <_strtod_l+0x246>
   d9082:	2300      	movs	r3, #0
   d9084:	9307      	str	r3, [sp, #28]
   d9086:	2201      	movs	r2, #1
   d9088:	e77c      	b.n	d8f84 <_strtod_l+0x184>
   d908a:	f04f 0c00 	mov.w	ip, #0
   d908e:	f108 0302 	add.w	r3, r8, #2
   d9092:	931d      	str	r3, [sp, #116]	; 0x74
   d9094:	f898 3002 	ldrb.w	r3, [r8, #2]
   d9098:	e785      	b.n	d8fa6 <_strtod_l+0x1a6>
   d909a:	f04f 0c01 	mov.w	ip, #1
   d909e:	e7f6      	b.n	d908e <_strtod_l+0x28e>
   d90a0:	000db5dc 	.word	0x000db5dc
   d90a4:	000db484 	.word	0x000db484
   d90a8:	7ff00000 	.word	0x7ff00000
   d90ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d90ae:	1c59      	adds	r1, r3, #1
   d90b0:	911d      	str	r1, [sp, #116]	; 0x74
   d90b2:	785b      	ldrb	r3, [r3, #1]
   d90b4:	2b30      	cmp	r3, #48	; 0x30
   d90b6:	d0f9      	beq.n	d90ac <_strtod_l+0x2ac>
   d90b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d90bc:	2908      	cmp	r1, #8
   d90be:	f63f af79 	bhi.w	d8fb4 <_strtod_l+0x1b4>
   d90c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d90c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d90c8:	9308      	str	r3, [sp, #32]
   d90ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d90cc:	1c59      	adds	r1, r3, #1
   d90ce:	911d      	str	r1, [sp, #116]	; 0x74
   d90d0:	785b      	ldrb	r3, [r3, #1]
   d90d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d90d6:	2e09      	cmp	r6, #9
   d90d8:	d937      	bls.n	d914a <_strtod_l+0x34a>
   d90da:	9e08      	ldr	r6, [sp, #32]
   d90dc:	1b89      	subs	r1, r1, r6
   d90de:	2908      	cmp	r1, #8
   d90e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d90e4:	dc02      	bgt.n	d90ec <_strtod_l+0x2ec>
   d90e6:	4576      	cmp	r6, lr
   d90e8:	bfa8      	it	ge
   d90ea:	4676      	movge	r6, lr
   d90ec:	f1bc 0f00 	cmp.w	ip, #0
   d90f0:	d000      	beq.n	d90f4 <_strtod_l+0x2f4>
   d90f2:	4276      	negs	r6, r6
   d90f4:	2d00      	cmp	r5, #0
   d90f6:	d14f      	bne.n	d9198 <_strtod_l+0x398>
   d90f8:	9904      	ldr	r1, [sp, #16]
   d90fa:	4301      	orrs	r1, r0
   d90fc:	f47f aec2 	bne.w	d8e84 <_strtod_l+0x84>
   d9100:	2a00      	cmp	r2, #0
   d9102:	f47f aedb 	bne.w	d8ebc <_strtod_l+0xbc>
   d9106:	2b69      	cmp	r3, #105	; 0x69
   d9108:	d027      	beq.n	d915a <_strtod_l+0x35a>
   d910a:	dc24      	bgt.n	d9156 <_strtod_l+0x356>
   d910c:	2b49      	cmp	r3, #73	; 0x49
   d910e:	d024      	beq.n	d915a <_strtod_l+0x35a>
   d9110:	2b4e      	cmp	r3, #78	; 0x4e
   d9112:	f47f aed3 	bne.w	d8ebc <_strtod_l+0xbc>
   d9116:	499e      	ldr	r1, [pc, #632]	; (d9390 <_strtod_l+0x590>)
   d9118:	a81d      	add	r0, sp, #116	; 0x74
   d911a:	f000 ffb9 	bl	da090 <__match>
   d911e:	2800      	cmp	r0, #0
   d9120:	f43f aecc 	beq.w	d8ebc <_strtod_l+0xbc>
   d9124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9126:	781b      	ldrb	r3, [r3, #0]
   d9128:	2b28      	cmp	r3, #40	; 0x28
   d912a:	d12d      	bne.n	d9188 <_strtod_l+0x388>
   d912c:	4999      	ldr	r1, [pc, #612]	; (d9394 <_strtod_l+0x594>)
   d912e:	aa20      	add	r2, sp, #128	; 0x80
   d9130:	a81d      	add	r0, sp, #116	; 0x74
   d9132:	f000 ffc1 	bl	da0b8 <__hexnan>
   d9136:	2805      	cmp	r0, #5
   d9138:	d126      	bne.n	d9188 <_strtod_l+0x388>
   d913a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d913c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9140:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9144:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9148:	e69c      	b.n	d8e84 <_strtod_l+0x84>
   d914a:	210a      	movs	r1, #10
   d914c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9150:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9154:	e7b9      	b.n	d90ca <_strtod_l+0x2ca>
   d9156:	2b6e      	cmp	r3, #110	; 0x6e
   d9158:	e7db      	b.n	d9112 <_strtod_l+0x312>
   d915a:	498f      	ldr	r1, [pc, #572]	; (d9398 <_strtod_l+0x598>)
   d915c:	a81d      	add	r0, sp, #116	; 0x74
   d915e:	f000 ff97 	bl	da090 <__match>
   d9162:	2800      	cmp	r0, #0
   d9164:	f43f aeaa 	beq.w	d8ebc <_strtod_l+0xbc>
   d9168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d916a:	498c      	ldr	r1, [pc, #560]	; (d939c <_strtod_l+0x59c>)
   d916c:	3b01      	subs	r3, #1
   d916e:	a81d      	add	r0, sp, #116	; 0x74
   d9170:	931d      	str	r3, [sp, #116]	; 0x74
   d9172:	f000 ff8d 	bl	da090 <__match>
   d9176:	b910      	cbnz	r0, d917e <_strtod_l+0x37e>
   d9178:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d917a:	3301      	adds	r3, #1
   d917c:	931d      	str	r3, [sp, #116]	; 0x74
   d917e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d93ac <_strtod_l+0x5ac>
   d9182:	f04f 0a00 	mov.w	sl, #0
   d9186:	e67d      	b.n	d8e84 <_strtod_l+0x84>
   d9188:	4885      	ldr	r0, [pc, #532]	; (d93a0 <_strtod_l+0x5a0>)
   d918a:	f001 fc91 	bl	daab0 <nan>
   d918e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d9192:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9196:	e675      	b.n	d8e84 <_strtod_l+0x84>
   d9198:	9b07      	ldr	r3, [sp, #28]
   d919a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d919c:	1af3      	subs	r3, r6, r3
   d919e:	2f00      	cmp	r7, #0
   d91a0:	bf08      	it	eq
   d91a2:	462f      	moveq	r7, r5
   d91a4:	2d10      	cmp	r5, #16
   d91a6:	9308      	str	r3, [sp, #32]
   d91a8:	46a8      	mov	r8, r5
   d91aa:	bfa8      	it	ge
   d91ac:	f04f 0810 	movge.w	r8, #16
   d91b0:	f7ff f968 	bl	d8484 <__aeabi_ui2d>
   d91b4:	2d09      	cmp	r5, #9
   d91b6:	4682      	mov	sl, r0
   d91b8:	468b      	mov	fp, r1
   d91ba:	dd13      	ble.n	d91e4 <_strtod_l+0x3e4>
   d91bc:	4b79      	ldr	r3, [pc, #484]	; (d93a4 <_strtod_l+0x5a4>)
   d91be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d91c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d91c6:	f7ff f9d7 	bl	d8578 <__aeabi_dmul>
   d91ca:	4682      	mov	sl, r0
   d91cc:	4648      	mov	r0, r9
   d91ce:	468b      	mov	fp, r1
   d91d0:	f7ff f958 	bl	d8484 <__aeabi_ui2d>
   d91d4:	4602      	mov	r2, r0
   d91d6:	460b      	mov	r3, r1
   d91d8:	4650      	mov	r0, sl
   d91da:	4659      	mov	r1, fp
   d91dc:	f7ff f816 	bl	d820c <__adddf3>
   d91e0:	4682      	mov	sl, r0
   d91e2:	468b      	mov	fp, r1
   d91e4:	2d0f      	cmp	r5, #15
   d91e6:	dc38      	bgt.n	d925a <_strtod_l+0x45a>
   d91e8:	9b08      	ldr	r3, [sp, #32]
   d91ea:	2b00      	cmp	r3, #0
   d91ec:	f43f ae4a 	beq.w	d8e84 <_strtod_l+0x84>
   d91f0:	dd24      	ble.n	d923c <_strtod_l+0x43c>
   d91f2:	2b16      	cmp	r3, #22
   d91f4:	dc0b      	bgt.n	d920e <_strtod_l+0x40e>
   d91f6:	4d6b      	ldr	r5, [pc, #428]	; (d93a4 <_strtod_l+0x5a4>)
   d91f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d91fc:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9200:	4652      	mov	r2, sl
   d9202:	465b      	mov	r3, fp
   d9204:	f7ff f9b8 	bl	d8578 <__aeabi_dmul>
   d9208:	4682      	mov	sl, r0
   d920a:	468b      	mov	fp, r1
   d920c:	e63a      	b.n	d8e84 <_strtod_l+0x84>
   d920e:	9a08      	ldr	r2, [sp, #32]
   d9210:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9214:	4293      	cmp	r3, r2
   d9216:	db20      	blt.n	d925a <_strtod_l+0x45a>
   d9218:	4c62      	ldr	r4, [pc, #392]	; (d93a4 <_strtod_l+0x5a4>)
   d921a:	f1c5 050f 	rsb	r5, r5, #15
   d921e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9222:	4652      	mov	r2, sl
   d9224:	465b      	mov	r3, fp
   d9226:	e9d1 0100 	ldrd	r0, r1, [r1]
   d922a:	f7ff f9a5 	bl	d8578 <__aeabi_dmul>
   d922e:	9b08      	ldr	r3, [sp, #32]
   d9230:	1b5d      	subs	r5, r3, r5
   d9232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9236:	e9d4 2300 	ldrd	r2, r3, [r4]
   d923a:	e7e3      	b.n	d9204 <_strtod_l+0x404>
   d923c:	9b08      	ldr	r3, [sp, #32]
   d923e:	3316      	adds	r3, #22
   d9240:	db0b      	blt.n	d925a <_strtod_l+0x45a>
   d9242:	9b07      	ldr	r3, [sp, #28]
   d9244:	4a57      	ldr	r2, [pc, #348]	; (d93a4 <_strtod_l+0x5a4>)
   d9246:	1b9e      	subs	r6, r3, r6
   d9248:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d924c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9250:	4650      	mov	r0, sl
   d9252:	4659      	mov	r1, fp
   d9254:	f7ff faba 	bl	d87cc <__aeabi_ddiv>
   d9258:	e7d6      	b.n	d9208 <_strtod_l+0x408>
   d925a:	9b08      	ldr	r3, [sp, #32]
   d925c:	eba5 0808 	sub.w	r8, r5, r8
   d9260:	4498      	add	r8, r3
   d9262:	f1b8 0f00 	cmp.w	r8, #0
   d9266:	dd71      	ble.n	d934c <_strtod_l+0x54c>
   d9268:	f018 030f 	ands.w	r3, r8, #15
   d926c:	d00a      	beq.n	d9284 <_strtod_l+0x484>
   d926e:	494d      	ldr	r1, [pc, #308]	; (d93a4 <_strtod_l+0x5a4>)
   d9270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9274:	4652      	mov	r2, sl
   d9276:	465b      	mov	r3, fp
   d9278:	e9d1 0100 	ldrd	r0, r1, [r1]
   d927c:	f7ff f97c 	bl	d8578 <__aeabi_dmul>
   d9280:	4682      	mov	sl, r0
   d9282:	468b      	mov	fp, r1
   d9284:	f038 080f 	bics.w	r8, r8, #15
   d9288:	d04d      	beq.n	d9326 <_strtod_l+0x526>
   d928a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d928e:	dd22      	ble.n	d92d6 <_strtod_l+0x4d6>
   d9290:	2500      	movs	r5, #0
   d9292:	462e      	mov	r6, r5
   d9294:	9509      	str	r5, [sp, #36]	; 0x24
   d9296:	9507      	str	r5, [sp, #28]
   d9298:	2322      	movs	r3, #34	; 0x22
   d929a:	f8df b110 	ldr.w	fp, [pc, #272]	; d93ac <_strtod_l+0x5ac>
   d929e:	6023      	str	r3, [r4, #0]
   d92a0:	f04f 0a00 	mov.w	sl, #0
   d92a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d92a6:	2b00      	cmp	r3, #0
   d92a8:	f43f adec 	beq.w	d8e84 <_strtod_l+0x84>
   d92ac:	991e      	ldr	r1, [sp, #120]	; 0x78
   d92ae:	4620      	mov	r0, r4
   d92b0:	f000 ffe4 	bl	da27c <_Bfree>
   d92b4:	9907      	ldr	r1, [sp, #28]
   d92b6:	4620      	mov	r0, r4
   d92b8:	f000 ffe0 	bl	da27c <_Bfree>
   d92bc:	4631      	mov	r1, r6
   d92be:	4620      	mov	r0, r4
   d92c0:	f000 ffdc 	bl	da27c <_Bfree>
   d92c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d92c6:	4620      	mov	r0, r4
   d92c8:	f000 ffd8 	bl	da27c <_Bfree>
   d92cc:	4629      	mov	r1, r5
   d92ce:	4620      	mov	r0, r4
   d92d0:	f000 ffd4 	bl	da27c <_Bfree>
   d92d4:	e5d6      	b.n	d8e84 <_strtod_l+0x84>
   d92d6:	2300      	movs	r3, #0
   d92d8:	ea4f 1828 	mov.w	r8, r8, asr #4
   d92dc:	4650      	mov	r0, sl
   d92de:	4659      	mov	r1, fp
   d92e0:	4699      	mov	r9, r3
   d92e2:	f1b8 0f01 	cmp.w	r8, #1
   d92e6:	dc21      	bgt.n	d932c <_strtod_l+0x52c>
   d92e8:	b10b      	cbz	r3, d92ee <_strtod_l+0x4ee>
   d92ea:	4682      	mov	sl, r0
   d92ec:	468b      	mov	fp, r1
   d92ee:	4b2e      	ldr	r3, [pc, #184]	; (d93a8 <_strtod_l+0x5a8>)
   d92f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d92f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d92f8:	4652      	mov	r2, sl
   d92fa:	465b      	mov	r3, fp
   d92fc:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9300:	f7ff f93a 	bl	d8578 <__aeabi_dmul>
   d9304:	4b29      	ldr	r3, [pc, #164]	; (d93ac <_strtod_l+0x5ac>)
   d9306:	460a      	mov	r2, r1
   d9308:	400b      	ands	r3, r1
   d930a:	4929      	ldr	r1, [pc, #164]	; (d93b0 <_strtod_l+0x5b0>)
   d930c:	428b      	cmp	r3, r1
   d930e:	4682      	mov	sl, r0
   d9310:	d8be      	bhi.n	d9290 <_strtod_l+0x490>
   d9312:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9316:	428b      	cmp	r3, r1
   d9318:	bf86      	itte	hi
   d931a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d93b4 <_strtod_l+0x5b4>
   d931e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9322:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9326:	2300      	movs	r3, #0
   d9328:	9304      	str	r3, [sp, #16]
   d932a:	e081      	b.n	d9430 <_strtod_l+0x630>
   d932c:	f018 0f01 	tst.w	r8, #1
   d9330:	d007      	beq.n	d9342 <_strtod_l+0x542>
   d9332:	4b1d      	ldr	r3, [pc, #116]	; (d93a8 <_strtod_l+0x5a8>)
   d9334:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9338:	e9d3 2300 	ldrd	r2, r3, [r3]
   d933c:	f7ff f91c 	bl	d8578 <__aeabi_dmul>
   d9340:	2301      	movs	r3, #1
   d9342:	f109 0901 	add.w	r9, r9, #1
   d9346:	ea4f 0868 	mov.w	r8, r8, asr #1
   d934a:	e7ca      	b.n	d92e2 <_strtod_l+0x4e2>
   d934c:	d0eb      	beq.n	d9326 <_strtod_l+0x526>
   d934e:	f1c8 0800 	rsb	r8, r8, #0
   d9352:	f018 020f 	ands.w	r2, r8, #15
   d9356:	d00a      	beq.n	d936e <_strtod_l+0x56e>
   d9358:	4b12      	ldr	r3, [pc, #72]	; (d93a4 <_strtod_l+0x5a4>)
   d935a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d935e:	4650      	mov	r0, sl
   d9360:	4659      	mov	r1, fp
   d9362:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9366:	f7ff fa31 	bl	d87cc <__aeabi_ddiv>
   d936a:	4682      	mov	sl, r0
   d936c:	468b      	mov	fp, r1
   d936e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9372:	d0d8      	beq.n	d9326 <_strtod_l+0x526>
   d9374:	f1b8 0f1f 	cmp.w	r8, #31
   d9378:	dd1e      	ble.n	d93b8 <_strtod_l+0x5b8>
   d937a:	2500      	movs	r5, #0
   d937c:	462e      	mov	r6, r5
   d937e:	9509      	str	r5, [sp, #36]	; 0x24
   d9380:	9507      	str	r5, [sp, #28]
   d9382:	2322      	movs	r3, #34	; 0x22
   d9384:	f04f 0a00 	mov.w	sl, #0
   d9388:	f04f 0b00 	mov.w	fp, #0
   d938c:	6023      	str	r3, [r4, #0]
   d938e:	e789      	b.n	d92a4 <_strtod_l+0x4a4>
   d9390:	000db47f 	.word	0x000db47f
   d9394:	000db498 	.word	0x000db498
   d9398:	000db476 	.word	0x000db476
   d939c:	000db479 	.word	0x000db479
   d93a0:	000db43c 	.word	0x000db43c
   d93a4:	000db618 	.word	0x000db618
   d93a8:	000db5f0 	.word	0x000db5f0
   d93ac:	7ff00000 	.word	0x7ff00000
   d93b0:	7ca00000 	.word	0x7ca00000
   d93b4:	7fefffff 	.word	0x7fefffff
   d93b8:	f018 0310 	ands.w	r3, r8, #16
   d93bc:	bf18      	it	ne
   d93be:	236a      	movne	r3, #106	; 0x6a
   d93c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9778 <_strtod_l+0x978>
   d93c4:	9304      	str	r3, [sp, #16]
   d93c6:	4650      	mov	r0, sl
   d93c8:	4659      	mov	r1, fp
   d93ca:	2300      	movs	r3, #0
   d93cc:	f018 0f01 	tst.w	r8, #1
   d93d0:	d004      	beq.n	d93dc <_strtod_l+0x5dc>
   d93d2:	e9d9 2300 	ldrd	r2, r3, [r9]
   d93d6:	f7ff f8cf 	bl	d8578 <__aeabi_dmul>
   d93da:	2301      	movs	r3, #1
   d93dc:	ea5f 0868 	movs.w	r8, r8, asr #1
   d93e0:	f109 0908 	add.w	r9, r9, #8
   d93e4:	d1f2      	bne.n	d93cc <_strtod_l+0x5cc>
   d93e6:	b10b      	cbz	r3, d93ec <_strtod_l+0x5ec>
   d93e8:	4682      	mov	sl, r0
   d93ea:	468b      	mov	fp, r1
   d93ec:	9b04      	ldr	r3, [sp, #16]
   d93ee:	b1bb      	cbz	r3, d9420 <_strtod_l+0x620>
   d93f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d93f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d93f8:	2b00      	cmp	r3, #0
   d93fa:	4659      	mov	r1, fp
   d93fc:	dd10      	ble.n	d9420 <_strtod_l+0x620>
   d93fe:	2b1f      	cmp	r3, #31
   d9400:	f340 8128 	ble.w	d9654 <_strtod_l+0x854>
   d9404:	2b34      	cmp	r3, #52	; 0x34
   d9406:	bfde      	ittt	le
   d9408:	3b20      	suble	r3, #32
   d940a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d940e:	fa02 f303 	lslle.w	r3, r2, r3
   d9412:	f04f 0a00 	mov.w	sl, #0
   d9416:	bfcc      	ite	gt
   d9418:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d941c:	ea03 0b01 	andle.w	fp, r3, r1
   d9420:	2200      	movs	r2, #0
   d9422:	2300      	movs	r3, #0
   d9424:	4650      	mov	r0, sl
   d9426:	4659      	mov	r1, fp
   d9428:	f7ff fb0e 	bl	d8a48 <__aeabi_dcmpeq>
   d942c:	2800      	cmp	r0, #0
   d942e:	d1a4      	bne.n	d937a <_strtod_l+0x57a>
   d9430:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9432:	9300      	str	r3, [sp, #0]
   d9434:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9436:	462b      	mov	r3, r5
   d9438:	463a      	mov	r2, r7
   d943a:	4620      	mov	r0, r4
   d943c:	f000 ff73 	bl	da326 <__s2b>
   d9440:	9009      	str	r0, [sp, #36]	; 0x24
   d9442:	2800      	cmp	r0, #0
   d9444:	f43f af24 	beq.w	d9290 <_strtod_l+0x490>
   d9448:	9b07      	ldr	r3, [sp, #28]
   d944a:	1b9e      	subs	r6, r3, r6
   d944c:	9b08      	ldr	r3, [sp, #32]
   d944e:	2b00      	cmp	r3, #0
   d9450:	bfb4      	ite	lt
   d9452:	4633      	movlt	r3, r6
   d9454:	2300      	movge	r3, #0
   d9456:	9310      	str	r3, [sp, #64]	; 0x40
   d9458:	9b08      	ldr	r3, [sp, #32]
   d945a:	2500      	movs	r5, #0
   d945c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9460:	9318      	str	r3, [sp, #96]	; 0x60
   d9462:	462e      	mov	r6, r5
   d9464:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9466:	4620      	mov	r0, r4
   d9468:	6859      	ldr	r1, [r3, #4]
   d946a:	f000 fed3 	bl	da214 <_Balloc>
   d946e:	9007      	str	r0, [sp, #28]
   d9470:	2800      	cmp	r0, #0
   d9472:	f43f af11 	beq.w	d9298 <_strtod_l+0x498>
   d9476:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9478:	691a      	ldr	r2, [r3, #16]
   d947a:	3202      	adds	r2, #2
   d947c:	f103 010c 	add.w	r1, r3, #12
   d9480:	0092      	lsls	r2, r2, #2
   d9482:	300c      	adds	r0, #12
   d9484:	f7ff fbee 	bl	d8c64 <memcpy>
   d9488:	ec4b ab10 	vmov	d0, sl, fp
   d948c:	aa20      	add	r2, sp, #128	; 0x80
   d948e:	a91f      	add	r1, sp, #124	; 0x7c
   d9490:	4620      	mov	r0, r4
   d9492:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d9496:	f001 fa35 	bl	da904 <__d2b>
   d949a:	901e      	str	r0, [sp, #120]	; 0x78
   d949c:	2800      	cmp	r0, #0
   d949e:	f43f aefb 	beq.w	d9298 <_strtod_l+0x498>
   d94a2:	2101      	movs	r1, #1
   d94a4:	4620      	mov	r0, r4
   d94a6:	f000 ffcc 	bl	da442 <__i2b>
   d94aa:	4606      	mov	r6, r0
   d94ac:	2800      	cmp	r0, #0
   d94ae:	f43f aef3 	beq.w	d9298 <_strtod_l+0x498>
   d94b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d94b4:	9904      	ldr	r1, [sp, #16]
   d94b6:	2b00      	cmp	r3, #0
   d94b8:	bfab      	itete	ge
   d94ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d94bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d94be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d94c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d94c4:	bfac      	ite	ge
   d94c6:	eb03 0902 	addge.w	r9, r3, r2
   d94ca:	1ad7      	sublt	r7, r2, r3
   d94cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d94ce:	eba3 0801 	sub.w	r8, r3, r1
   d94d2:	4490      	add	r8, r2
   d94d4:	4ba3      	ldr	r3, [pc, #652]	; (d9764 <_strtod_l+0x964>)
   d94d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d94da:	4598      	cmp	r8, r3
   d94dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d94e0:	f280 80cc 	bge.w	d967c <_strtod_l+0x87c>
   d94e4:	eba3 0308 	sub.w	r3, r3, r8
   d94e8:	2b1f      	cmp	r3, #31
   d94ea:	eba2 0203 	sub.w	r2, r2, r3
   d94ee:	f04f 0101 	mov.w	r1, #1
   d94f2:	f300 80b6 	bgt.w	d9662 <_strtod_l+0x862>
   d94f6:	fa01 f303 	lsl.w	r3, r1, r3
   d94fa:	9311      	str	r3, [sp, #68]	; 0x44
   d94fc:	2300      	movs	r3, #0
   d94fe:	930c      	str	r3, [sp, #48]	; 0x30
   d9500:	eb09 0802 	add.w	r8, r9, r2
   d9504:	9b04      	ldr	r3, [sp, #16]
   d9506:	45c1      	cmp	r9, r8
   d9508:	4417      	add	r7, r2
   d950a:	441f      	add	r7, r3
   d950c:	464b      	mov	r3, r9
   d950e:	bfa8      	it	ge
   d9510:	4643      	movge	r3, r8
   d9512:	42bb      	cmp	r3, r7
   d9514:	bfa8      	it	ge
   d9516:	463b      	movge	r3, r7
   d9518:	2b00      	cmp	r3, #0
   d951a:	bfc2      	ittt	gt
   d951c:	eba8 0803 	subgt.w	r8, r8, r3
   d9520:	1aff      	subgt	r7, r7, r3
   d9522:	eba9 0903 	subgt.w	r9, r9, r3
   d9526:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9528:	2b00      	cmp	r3, #0
   d952a:	dd17      	ble.n	d955c <_strtod_l+0x75c>
   d952c:	4631      	mov	r1, r6
   d952e:	461a      	mov	r2, r3
   d9530:	4620      	mov	r0, r4
   d9532:	f001 f82b 	bl	da58c <__pow5mult>
   d9536:	4606      	mov	r6, r0
   d9538:	2800      	cmp	r0, #0
   d953a:	f43f aead 	beq.w	d9298 <_strtod_l+0x498>
   d953e:	4601      	mov	r1, r0
   d9540:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9542:	4620      	mov	r0, r4
   d9544:	f000 ff86 	bl	da454 <__multiply>
   d9548:	900f      	str	r0, [sp, #60]	; 0x3c
   d954a:	2800      	cmp	r0, #0
   d954c:	f43f aea4 	beq.w	d9298 <_strtod_l+0x498>
   d9550:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9552:	4620      	mov	r0, r4
   d9554:	f000 fe92 	bl	da27c <_Bfree>
   d9558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d955a:	931e      	str	r3, [sp, #120]	; 0x78
   d955c:	f1b8 0f00 	cmp.w	r8, #0
   d9560:	f300 8091 	bgt.w	d9686 <_strtod_l+0x886>
   d9564:	9b08      	ldr	r3, [sp, #32]
   d9566:	2b00      	cmp	r3, #0
   d9568:	dd08      	ble.n	d957c <_strtod_l+0x77c>
   d956a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d956c:	9907      	ldr	r1, [sp, #28]
   d956e:	4620      	mov	r0, r4
   d9570:	f001 f80c 	bl	da58c <__pow5mult>
   d9574:	9007      	str	r0, [sp, #28]
   d9576:	2800      	cmp	r0, #0
   d9578:	f43f ae8e 	beq.w	d9298 <_strtod_l+0x498>
   d957c:	2f00      	cmp	r7, #0
   d957e:	dd08      	ble.n	d9592 <_strtod_l+0x792>
   d9580:	9907      	ldr	r1, [sp, #28]
   d9582:	463a      	mov	r2, r7
   d9584:	4620      	mov	r0, r4
   d9586:	f001 f84f 	bl	da628 <__lshift>
   d958a:	9007      	str	r0, [sp, #28]
   d958c:	2800      	cmp	r0, #0
   d958e:	f43f ae83 	beq.w	d9298 <_strtod_l+0x498>
   d9592:	f1b9 0f00 	cmp.w	r9, #0
   d9596:	dd08      	ble.n	d95aa <_strtod_l+0x7aa>
   d9598:	4631      	mov	r1, r6
   d959a:	464a      	mov	r2, r9
   d959c:	4620      	mov	r0, r4
   d959e:	f001 f843 	bl	da628 <__lshift>
   d95a2:	4606      	mov	r6, r0
   d95a4:	2800      	cmp	r0, #0
   d95a6:	f43f ae77 	beq.w	d9298 <_strtod_l+0x498>
   d95aa:	9a07      	ldr	r2, [sp, #28]
   d95ac:	991e      	ldr	r1, [sp, #120]	; 0x78
   d95ae:	4620      	mov	r0, r4
   d95b0:	f001 f8b5 	bl	da71e <__mdiff>
   d95b4:	4605      	mov	r5, r0
   d95b6:	2800      	cmp	r0, #0
   d95b8:	f43f ae6e 	beq.w	d9298 <_strtod_l+0x498>
   d95bc:	68c3      	ldr	r3, [r0, #12]
   d95be:	930f      	str	r3, [sp, #60]	; 0x3c
   d95c0:	2300      	movs	r3, #0
   d95c2:	60c3      	str	r3, [r0, #12]
   d95c4:	4631      	mov	r1, r6
   d95c6:	f001 f88e 	bl	da6e6 <__mcmp>
   d95ca:	2800      	cmp	r0, #0
   d95cc:	da65      	bge.n	d969a <_strtod_l+0x89a>
   d95ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d95d0:	ea53 030a 	orrs.w	r3, r3, sl
   d95d4:	f040 8087 	bne.w	d96e6 <_strtod_l+0x8e6>
   d95d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d95dc:	2b00      	cmp	r3, #0
   d95de:	f040 8082 	bne.w	d96e6 <_strtod_l+0x8e6>
   d95e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d95e6:	0d1b      	lsrs	r3, r3, #20
   d95e8:	051b      	lsls	r3, r3, #20
   d95ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d95ee:	d97a      	bls.n	d96e6 <_strtod_l+0x8e6>
   d95f0:	696b      	ldr	r3, [r5, #20]
   d95f2:	b913      	cbnz	r3, d95fa <_strtod_l+0x7fa>
   d95f4:	692b      	ldr	r3, [r5, #16]
   d95f6:	2b01      	cmp	r3, #1
   d95f8:	dd75      	ble.n	d96e6 <_strtod_l+0x8e6>
   d95fa:	4629      	mov	r1, r5
   d95fc:	2201      	movs	r2, #1
   d95fe:	4620      	mov	r0, r4
   d9600:	f001 f812 	bl	da628 <__lshift>
   d9604:	4631      	mov	r1, r6
   d9606:	4605      	mov	r5, r0
   d9608:	f001 f86d 	bl	da6e6 <__mcmp>
   d960c:	2800      	cmp	r0, #0
   d960e:	dd6a      	ble.n	d96e6 <_strtod_l+0x8e6>
   d9610:	9904      	ldr	r1, [sp, #16]
   d9612:	4a55      	ldr	r2, [pc, #340]	; (d9768 <_strtod_l+0x968>)
   d9614:	465b      	mov	r3, fp
   d9616:	2900      	cmp	r1, #0
   d9618:	f000 8085 	beq.w	d9726 <_strtod_l+0x926>
   d961c:	ea02 010b 	and.w	r1, r2, fp
   d9620:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9624:	dc7f      	bgt.n	d9726 <_strtod_l+0x926>
   d9626:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d962a:	f77f aeaa 	ble.w	d9382 <_strtod_l+0x582>
   d962e:	4a4f      	ldr	r2, [pc, #316]	; (d976c <_strtod_l+0x96c>)
   d9630:	2300      	movs	r3, #0
   d9632:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9636:	4650      	mov	r0, sl
   d9638:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d963c:	4659      	mov	r1, fp
   d963e:	f7fe ff9b 	bl	d8578 <__aeabi_dmul>
   d9642:	460b      	mov	r3, r1
   d9644:	4303      	orrs	r3, r0
   d9646:	bf08      	it	eq
   d9648:	2322      	moveq	r3, #34	; 0x22
   d964a:	4682      	mov	sl, r0
   d964c:	468b      	mov	fp, r1
   d964e:	bf08      	it	eq
   d9650:	6023      	streq	r3, [r4, #0]
   d9652:	e62b      	b.n	d92ac <_strtod_l+0x4ac>
   d9654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9658:	fa02 f303 	lsl.w	r3, r2, r3
   d965c:	ea03 0a0a 	and.w	sl, r3, sl
   d9660:	e6de      	b.n	d9420 <_strtod_l+0x620>
   d9662:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9666:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d966a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d966e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9672:	fa01 f308 	lsl.w	r3, r1, r8
   d9676:	930c      	str	r3, [sp, #48]	; 0x30
   d9678:	9111      	str	r1, [sp, #68]	; 0x44
   d967a:	e741      	b.n	d9500 <_strtod_l+0x700>
   d967c:	2300      	movs	r3, #0
   d967e:	930c      	str	r3, [sp, #48]	; 0x30
   d9680:	2301      	movs	r3, #1
   d9682:	9311      	str	r3, [sp, #68]	; 0x44
   d9684:	e73c      	b.n	d9500 <_strtod_l+0x700>
   d9686:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9688:	4642      	mov	r2, r8
   d968a:	4620      	mov	r0, r4
   d968c:	f000 ffcc 	bl	da628 <__lshift>
   d9690:	901e      	str	r0, [sp, #120]	; 0x78
   d9692:	2800      	cmp	r0, #0
   d9694:	f47f af66 	bne.w	d9564 <_strtod_l+0x764>
   d9698:	e5fe      	b.n	d9298 <_strtod_l+0x498>
   d969a:	465f      	mov	r7, fp
   d969c:	d16e      	bne.n	d977c <_strtod_l+0x97c>
   d969e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d96a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d96a4:	b342      	cbz	r2, d96f8 <_strtod_l+0x8f8>
   d96a6:	4a32      	ldr	r2, [pc, #200]	; (d9770 <_strtod_l+0x970>)
   d96a8:	4293      	cmp	r3, r2
   d96aa:	d128      	bne.n	d96fe <_strtod_l+0x8fe>
   d96ac:	9b04      	ldr	r3, [sp, #16]
   d96ae:	4650      	mov	r0, sl
   d96b0:	b1eb      	cbz	r3, d96ee <_strtod_l+0x8ee>
   d96b2:	4a2d      	ldr	r2, [pc, #180]	; (d9768 <_strtod_l+0x968>)
   d96b4:	403a      	ands	r2, r7
   d96b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d96ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d96be:	d819      	bhi.n	d96f4 <_strtod_l+0x8f4>
   d96c0:	0d12      	lsrs	r2, r2, #20
   d96c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d96c6:	fa01 f303 	lsl.w	r3, r1, r3
   d96ca:	4298      	cmp	r0, r3
   d96cc:	d117      	bne.n	d96fe <_strtod_l+0x8fe>
   d96ce:	4b29      	ldr	r3, [pc, #164]	; (d9774 <_strtod_l+0x974>)
   d96d0:	429f      	cmp	r7, r3
   d96d2:	d102      	bne.n	d96da <_strtod_l+0x8da>
   d96d4:	3001      	adds	r0, #1
   d96d6:	f43f addf 	beq.w	d9298 <_strtod_l+0x498>
   d96da:	4b23      	ldr	r3, [pc, #140]	; (d9768 <_strtod_l+0x968>)
   d96dc:	403b      	ands	r3, r7
   d96de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d96e2:	f04f 0a00 	mov.w	sl, #0
   d96e6:	9b04      	ldr	r3, [sp, #16]
   d96e8:	2b00      	cmp	r3, #0
   d96ea:	d1a0      	bne.n	d962e <_strtod_l+0x82e>
   d96ec:	e5de      	b.n	d92ac <_strtod_l+0x4ac>
   d96ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d96f2:	e7ea      	b.n	d96ca <_strtod_l+0x8ca>
   d96f4:	460b      	mov	r3, r1
   d96f6:	e7e8      	b.n	d96ca <_strtod_l+0x8ca>
   d96f8:	ea53 030a 	orrs.w	r3, r3, sl
   d96fc:	d088      	beq.n	d9610 <_strtod_l+0x810>
   d96fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9700:	b1db      	cbz	r3, d973a <_strtod_l+0x93a>
   d9702:	423b      	tst	r3, r7
   d9704:	d0ef      	beq.n	d96e6 <_strtod_l+0x8e6>
   d9706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9708:	9a04      	ldr	r2, [sp, #16]
   d970a:	4650      	mov	r0, sl
   d970c:	4659      	mov	r1, fp
   d970e:	b1c3      	cbz	r3, d9742 <_strtod_l+0x942>
   d9710:	f7ff fb58 	bl	d8dc4 <sulp>
   d9714:	4602      	mov	r2, r0
   d9716:	460b      	mov	r3, r1
   d9718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d971c:	f7fe fd76 	bl	d820c <__adddf3>
   d9720:	4682      	mov	sl, r0
   d9722:	468b      	mov	fp, r1
   d9724:	e7df      	b.n	d96e6 <_strtod_l+0x8e6>
   d9726:	4013      	ands	r3, r2
   d9728:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d972c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9730:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9734:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9738:	e7d5      	b.n	d96e6 <_strtod_l+0x8e6>
   d973a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d973c:	ea13 0f0a 	tst.w	r3, sl
   d9740:	e7e0      	b.n	d9704 <_strtod_l+0x904>
   d9742:	f7ff fb3f 	bl	d8dc4 <sulp>
   d9746:	4602      	mov	r2, r0
   d9748:	460b      	mov	r3, r1
   d974a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d974e:	f7fe fd5b 	bl	d8208 <__aeabi_dsub>
   d9752:	2200      	movs	r2, #0
   d9754:	2300      	movs	r3, #0
   d9756:	4682      	mov	sl, r0
   d9758:	468b      	mov	fp, r1
   d975a:	f7ff f975 	bl	d8a48 <__aeabi_dcmpeq>
   d975e:	2800      	cmp	r0, #0
   d9760:	d0c1      	beq.n	d96e6 <_strtod_l+0x8e6>
   d9762:	e60e      	b.n	d9382 <_strtod_l+0x582>
   d9764:	fffffc02 	.word	0xfffffc02
   d9768:	7ff00000 	.word	0x7ff00000
   d976c:	39500000 	.word	0x39500000
   d9770:	000fffff 	.word	0x000fffff
   d9774:	7fefffff 	.word	0x7fefffff
   d9778:	000db4b0 	.word	0x000db4b0
   d977c:	4631      	mov	r1, r6
   d977e:	4628      	mov	r0, r5
   d9780:	f001 f910 	bl	da9a4 <__ratio>
   d9784:	ec59 8b10 	vmov	r8, r9, d0
   d9788:	ee10 0a10 	vmov	r0, s0
   d978c:	2200      	movs	r2, #0
   d978e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9792:	4649      	mov	r1, r9
   d9794:	f7ff f96c 	bl	d8a70 <__aeabi_dcmple>
   d9798:	2800      	cmp	r0, #0
   d979a:	d07c      	beq.n	d9896 <_strtod_l+0xa96>
   d979c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d979e:	2b00      	cmp	r3, #0
   d97a0:	d04c      	beq.n	d983c <_strtod_l+0xa3c>
   d97a2:	4b95      	ldr	r3, [pc, #596]	; (d99f8 <_strtod_l+0xbf8>)
   d97a4:	2200      	movs	r2, #0
   d97a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d97aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; d99f8 <_strtod_l+0xbf8>
   d97ae:	f04f 0800 	mov.w	r8, #0
   d97b2:	4b92      	ldr	r3, [pc, #584]	; (d99fc <_strtod_l+0xbfc>)
   d97b4:	403b      	ands	r3, r7
   d97b6:	9311      	str	r3, [sp, #68]	; 0x44
   d97b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d97ba:	4b91      	ldr	r3, [pc, #580]	; (d9a00 <_strtod_l+0xc00>)
   d97bc:	429a      	cmp	r2, r3
   d97be:	f040 80b2 	bne.w	d9926 <_strtod_l+0xb26>
   d97c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d97c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d97ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d97ce:	ec4b ab10 	vmov	d0, sl, fp
   d97d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d97d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d97da:	f001 f817 	bl	da80c <__ulp>
   d97de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d97e2:	ec53 2b10 	vmov	r2, r3, d0
   d97e6:	f7fe fec7 	bl	d8578 <__aeabi_dmul>
   d97ea:	4652      	mov	r2, sl
   d97ec:	465b      	mov	r3, fp
   d97ee:	f7fe fd0d 	bl	d820c <__adddf3>
   d97f2:	460b      	mov	r3, r1
   d97f4:	4981      	ldr	r1, [pc, #516]	; (d99fc <_strtod_l+0xbfc>)
   d97f6:	4a83      	ldr	r2, [pc, #524]	; (d9a04 <_strtod_l+0xc04>)
   d97f8:	4019      	ands	r1, r3
   d97fa:	4291      	cmp	r1, r2
   d97fc:	4682      	mov	sl, r0
   d97fe:	d95e      	bls.n	d98be <_strtod_l+0xabe>
   d9800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9802:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9806:	4293      	cmp	r3, r2
   d9808:	d103      	bne.n	d9812 <_strtod_l+0xa12>
   d980a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d980c:	3301      	adds	r3, #1
   d980e:	f43f ad43 	beq.w	d9298 <_strtod_l+0x498>
   d9812:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9a10 <_strtod_l+0xc10>
   d9816:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d981a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d981c:	4620      	mov	r0, r4
   d981e:	f000 fd2d 	bl	da27c <_Bfree>
   d9822:	9907      	ldr	r1, [sp, #28]
   d9824:	4620      	mov	r0, r4
   d9826:	f000 fd29 	bl	da27c <_Bfree>
   d982a:	4631      	mov	r1, r6
   d982c:	4620      	mov	r0, r4
   d982e:	f000 fd25 	bl	da27c <_Bfree>
   d9832:	4629      	mov	r1, r5
   d9834:	4620      	mov	r0, r4
   d9836:	f000 fd21 	bl	da27c <_Bfree>
   d983a:	e613      	b.n	d9464 <_strtod_l+0x664>
   d983c:	f1ba 0f00 	cmp.w	sl, #0
   d9840:	d11b      	bne.n	d987a <_strtod_l+0xa7a>
   d9842:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9846:	b9f3      	cbnz	r3, d9886 <_strtod_l+0xa86>
   d9848:	4b6b      	ldr	r3, [pc, #428]	; (d99f8 <_strtod_l+0xbf8>)
   d984a:	2200      	movs	r2, #0
   d984c:	4640      	mov	r0, r8
   d984e:	4649      	mov	r1, r9
   d9850:	f7ff f904 	bl	d8a5c <__aeabi_dcmplt>
   d9854:	b9d0      	cbnz	r0, d988c <_strtod_l+0xa8c>
   d9856:	4640      	mov	r0, r8
   d9858:	4649      	mov	r1, r9
   d985a:	4b6b      	ldr	r3, [pc, #428]	; (d9a08 <_strtod_l+0xc08>)
   d985c:	2200      	movs	r2, #0
   d985e:	f7fe fe8b 	bl	d8578 <__aeabi_dmul>
   d9862:	4680      	mov	r8, r0
   d9864:	4689      	mov	r9, r1
   d9866:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d986a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d986e:	931b      	str	r3, [sp, #108]	; 0x6c
   d9870:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9874:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9878:	e79b      	b.n	d97b2 <_strtod_l+0x9b2>
   d987a:	f1ba 0f01 	cmp.w	sl, #1
   d987e:	d102      	bne.n	d9886 <_strtod_l+0xa86>
   d9880:	2f00      	cmp	r7, #0
   d9882:	f43f ad7e 	beq.w	d9382 <_strtod_l+0x582>
   d9886:	4b61      	ldr	r3, [pc, #388]	; (d9a0c <_strtod_l+0xc0c>)
   d9888:	2200      	movs	r2, #0
   d988a:	e78c      	b.n	d97a6 <_strtod_l+0x9a6>
   d988c:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9a08 <_strtod_l+0xc08>
   d9890:	f04f 0800 	mov.w	r8, #0
   d9894:	e7e7      	b.n	d9866 <_strtod_l+0xa66>
   d9896:	4b5c      	ldr	r3, [pc, #368]	; (d9a08 <_strtod_l+0xc08>)
   d9898:	4640      	mov	r0, r8
   d989a:	4649      	mov	r1, r9
   d989c:	2200      	movs	r2, #0
   d989e:	f7fe fe6b 	bl	d8578 <__aeabi_dmul>
   d98a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d98a4:	4680      	mov	r8, r0
   d98a6:	4689      	mov	r9, r1
   d98a8:	b933      	cbnz	r3, d98b8 <_strtod_l+0xab8>
   d98aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d98ae:	9012      	str	r0, [sp, #72]	; 0x48
   d98b0:	9313      	str	r3, [sp, #76]	; 0x4c
   d98b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d98b6:	e7dd      	b.n	d9874 <_strtod_l+0xa74>
   d98b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d98bc:	e7f9      	b.n	d98b2 <_strtod_l+0xab2>
   d98be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d98c2:	9b04      	ldr	r3, [sp, #16]
   d98c4:	2b00      	cmp	r3, #0
   d98c6:	d1a8      	bne.n	d981a <_strtod_l+0xa1a>
   d98c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d98cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d98ce:	0d1b      	lsrs	r3, r3, #20
   d98d0:	051b      	lsls	r3, r3, #20
   d98d2:	429a      	cmp	r2, r3
   d98d4:	d1a1      	bne.n	d981a <_strtod_l+0xa1a>
   d98d6:	4640      	mov	r0, r8
   d98d8:	4649      	mov	r1, r9
   d98da:	f001 f8ff 	bl	daadc <__aeabi_d2lz>
   d98de:	f7fe fe1d 	bl	d851c <__aeabi_l2d>
   d98e2:	4602      	mov	r2, r0
   d98e4:	460b      	mov	r3, r1
   d98e6:	4640      	mov	r0, r8
   d98e8:	4649      	mov	r1, r9
   d98ea:	f7fe fc8d 	bl	d8208 <__aeabi_dsub>
   d98ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d98f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d98f4:	ea43 030a 	orr.w	r3, r3, sl
   d98f8:	4313      	orrs	r3, r2
   d98fa:	4680      	mov	r8, r0
   d98fc:	4689      	mov	r9, r1
   d98fe:	d053      	beq.n	d99a8 <_strtod_l+0xba8>
   d9900:	a335      	add	r3, pc, #212	; (adr r3, d99d8 <_strtod_l+0xbd8>)
   d9902:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9906:	f7ff f8a9 	bl	d8a5c <__aeabi_dcmplt>
   d990a:	2800      	cmp	r0, #0
   d990c:	f47f acce 	bne.w	d92ac <_strtod_l+0x4ac>
   d9910:	a333      	add	r3, pc, #204	; (adr r3, d99e0 <_strtod_l+0xbe0>)
   d9912:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9916:	4640      	mov	r0, r8
   d9918:	4649      	mov	r1, r9
   d991a:	f7ff f8bd 	bl	d8a98 <__aeabi_dcmpgt>
   d991e:	2800      	cmp	r0, #0
   d9920:	f43f af7b 	beq.w	d981a <_strtod_l+0xa1a>
   d9924:	e4c2      	b.n	d92ac <_strtod_l+0x4ac>
   d9926:	9b04      	ldr	r3, [sp, #16]
   d9928:	b333      	cbz	r3, d9978 <_strtod_l+0xb78>
   d992a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d992c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9930:	d822      	bhi.n	d9978 <_strtod_l+0xb78>
   d9932:	a32d      	add	r3, pc, #180	; (adr r3, d99e8 <_strtod_l+0xbe8>)
   d9934:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9938:	4640      	mov	r0, r8
   d993a:	4649      	mov	r1, r9
   d993c:	f7ff f898 	bl	d8a70 <__aeabi_dcmple>
   d9940:	b1a0      	cbz	r0, d996c <_strtod_l+0xb6c>
   d9942:	4649      	mov	r1, r9
   d9944:	4640      	mov	r0, r8
   d9946:	f7ff f8b1 	bl	d8aac <__aeabi_d2uiz>
   d994a:	2801      	cmp	r0, #1
   d994c:	bf38      	it	cc
   d994e:	2001      	movcc	r0, #1
   d9950:	f7fe fd98 	bl	d8484 <__aeabi_ui2d>
   d9954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9956:	4680      	mov	r8, r0
   d9958:	4689      	mov	r9, r1
   d995a:	bb13      	cbnz	r3, d99a2 <_strtod_l+0xba2>
   d995c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9960:	9014      	str	r0, [sp, #80]	; 0x50
   d9962:	9315      	str	r3, [sp, #84]	; 0x54
   d9964:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9968:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d996c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d996e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9970:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9974:	1a9b      	subs	r3, r3, r2
   d9976:	930d      	str	r3, [sp, #52]	; 0x34
   d9978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d997c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9984:	f000 ff42 	bl	da80c <__ulp>
   d9988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d998c:	ec53 2b10 	vmov	r2, r3, d0
   d9990:	f7fe fdf2 	bl	d8578 <__aeabi_dmul>
   d9994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9998:	f7fe fc38 	bl	d820c <__adddf3>
   d999c:	4682      	mov	sl, r0
   d999e:	468b      	mov	fp, r1
   d99a0:	e78f      	b.n	d98c2 <_strtod_l+0xac2>
   d99a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d99a6:	e7dd      	b.n	d9964 <_strtod_l+0xb64>
   d99a8:	a311      	add	r3, pc, #68	; (adr r3, d99f0 <_strtod_l+0xbf0>)
   d99aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99ae:	f7ff f855 	bl	d8a5c <__aeabi_dcmplt>
   d99b2:	e7b4      	b.n	d991e <_strtod_l+0xb1e>
   d99b4:	2300      	movs	r3, #0
   d99b6:	930e      	str	r3, [sp, #56]	; 0x38
   d99b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d99ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d99bc:	6013      	str	r3, [r2, #0]
   d99be:	f7ff ba65 	b.w	d8e8c <_strtod_l+0x8c>
   d99c2:	2b65      	cmp	r3, #101	; 0x65
   d99c4:	f43f ab5d 	beq.w	d9082 <_strtod_l+0x282>
   d99c8:	2b45      	cmp	r3, #69	; 0x45
   d99ca:	f43f ab5a 	beq.w	d9082 <_strtod_l+0x282>
   d99ce:	2201      	movs	r2, #1
   d99d0:	f7ff bb92 	b.w	d90f8 <_strtod_l+0x2f8>
   d99d4:	f3af 8000 	nop.w
   d99d8:	94a03595 	.word	0x94a03595
   d99dc:	3fdfffff 	.word	0x3fdfffff
   d99e0:	35afe535 	.word	0x35afe535
   d99e4:	3fe00000 	.word	0x3fe00000
   d99e8:	ffc00000 	.word	0xffc00000
   d99ec:	41dfffff 	.word	0x41dfffff
   d99f0:	94a03595 	.word	0x94a03595
   d99f4:	3fcfffff 	.word	0x3fcfffff
   d99f8:	3ff00000 	.word	0x3ff00000
   d99fc:	7ff00000 	.word	0x7ff00000
   d9a00:	7fe00000 	.word	0x7fe00000
   d9a04:	7c9fffff 	.word	0x7c9fffff
   d9a08:	3fe00000 	.word	0x3fe00000
   d9a0c:	bff00000 	.word	0xbff00000
   d9a10:	7fefffff 	.word	0x7fefffff

000d9a14 <strtod>:
   d9a14:	460a      	mov	r2, r1
   d9a16:	4601      	mov	r1, r0
   d9a18:	4802      	ldr	r0, [pc, #8]	; (d9a24 <strtod+0x10>)
   d9a1a:	4b03      	ldr	r3, [pc, #12]	; (d9a28 <strtod+0x14>)
   d9a1c:	6800      	ldr	r0, [r0, #0]
   d9a1e:	f7ff b9ef 	b.w	d8e00 <_strtod_l>
   d9a22:	bf00      	nop
   d9a24:	2003e254 	.word	0x2003e254
   d9a28:	2003e2bc 	.word	0x2003e2bc

000d9a2c <_strtol_l.isra.0>:
   d9a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9a30:	4e3a      	ldr	r6, [pc, #232]	; (d9b1c <_strtol_l.isra.0+0xf0>)
   d9a32:	4686      	mov	lr, r0
   d9a34:	468c      	mov	ip, r1
   d9a36:	4660      	mov	r0, ip
   d9a38:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9a3c:	5da5      	ldrb	r5, [r4, r6]
   d9a3e:	f015 0508 	ands.w	r5, r5, #8
   d9a42:	d1f8      	bne.n	d9a36 <_strtol_l.isra.0+0xa>
   d9a44:	2c2d      	cmp	r4, #45	; 0x2d
   d9a46:	d133      	bne.n	d9ab0 <_strtol_l.isra.0+0x84>
   d9a48:	f89c 4000 	ldrb.w	r4, [ip]
   d9a4c:	f04f 0801 	mov.w	r8, #1
   d9a50:	f100 0c02 	add.w	ip, r0, #2
   d9a54:	2b00      	cmp	r3, #0
   d9a56:	d05c      	beq.n	d9b12 <_strtol_l.isra.0+0xe6>
   d9a58:	2b10      	cmp	r3, #16
   d9a5a:	d10c      	bne.n	d9a76 <_strtol_l.isra.0+0x4a>
   d9a5c:	2c30      	cmp	r4, #48	; 0x30
   d9a5e:	d10a      	bne.n	d9a76 <_strtol_l.isra.0+0x4a>
   d9a60:	f89c 0000 	ldrb.w	r0, [ip]
   d9a64:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9a68:	2858      	cmp	r0, #88	; 0x58
   d9a6a:	d14d      	bne.n	d9b08 <_strtol_l.isra.0+0xdc>
   d9a6c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9a70:	2310      	movs	r3, #16
   d9a72:	f10c 0c02 	add.w	ip, ip, #2
   d9a76:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9a7a:	3f01      	subs	r7, #1
   d9a7c:	2600      	movs	r6, #0
   d9a7e:	fbb7 f9f3 	udiv	r9, r7, r3
   d9a82:	4630      	mov	r0, r6
   d9a84:	fb03 7a19 	mls	sl, r3, r9, r7
   d9a88:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9a8c:	2d09      	cmp	r5, #9
   d9a8e:	d818      	bhi.n	d9ac2 <_strtol_l.isra.0+0x96>
   d9a90:	462c      	mov	r4, r5
   d9a92:	42a3      	cmp	r3, r4
   d9a94:	dd24      	ble.n	d9ae0 <_strtol_l.isra.0+0xb4>
   d9a96:	1c75      	adds	r5, r6, #1
   d9a98:	d007      	beq.n	d9aaa <_strtol_l.isra.0+0x7e>
   d9a9a:	4581      	cmp	r9, r0
   d9a9c:	d31d      	bcc.n	d9ada <_strtol_l.isra.0+0xae>
   d9a9e:	d101      	bne.n	d9aa4 <_strtol_l.isra.0+0x78>
   d9aa0:	45a2      	cmp	sl, r4
   d9aa2:	db1a      	blt.n	d9ada <_strtol_l.isra.0+0xae>
   d9aa4:	fb00 4003 	mla	r0, r0, r3, r4
   d9aa8:	2601      	movs	r6, #1
   d9aaa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9aae:	e7eb      	b.n	d9a88 <_strtol_l.isra.0+0x5c>
   d9ab0:	2c2b      	cmp	r4, #43	; 0x2b
   d9ab2:	bf08      	it	eq
   d9ab4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9ab8:	46a8      	mov	r8, r5
   d9aba:	bf08      	it	eq
   d9abc:	f100 0c02 	addeq.w	ip, r0, #2
   d9ac0:	e7c8      	b.n	d9a54 <_strtol_l.isra.0+0x28>
   d9ac2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9ac6:	2d19      	cmp	r5, #25
   d9ac8:	d801      	bhi.n	d9ace <_strtol_l.isra.0+0xa2>
   d9aca:	3c37      	subs	r4, #55	; 0x37
   d9acc:	e7e1      	b.n	d9a92 <_strtol_l.isra.0+0x66>
   d9ace:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9ad2:	2d19      	cmp	r5, #25
   d9ad4:	d804      	bhi.n	d9ae0 <_strtol_l.isra.0+0xb4>
   d9ad6:	3c57      	subs	r4, #87	; 0x57
   d9ad8:	e7db      	b.n	d9a92 <_strtol_l.isra.0+0x66>
   d9ada:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9ade:	e7e4      	b.n	d9aaa <_strtol_l.isra.0+0x7e>
   d9ae0:	1c73      	adds	r3, r6, #1
   d9ae2:	d106      	bne.n	d9af2 <_strtol_l.isra.0+0xc6>
   d9ae4:	2322      	movs	r3, #34	; 0x22
   d9ae6:	f8ce 3000 	str.w	r3, [lr]
   d9aea:	4638      	mov	r0, r7
   d9aec:	b942      	cbnz	r2, d9b00 <_strtol_l.isra.0+0xd4>
   d9aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9af2:	f1b8 0f00 	cmp.w	r8, #0
   d9af6:	d000      	beq.n	d9afa <_strtol_l.isra.0+0xce>
   d9af8:	4240      	negs	r0, r0
   d9afa:	2a00      	cmp	r2, #0
   d9afc:	d0f7      	beq.n	d9aee <_strtol_l.isra.0+0xc2>
   d9afe:	b10e      	cbz	r6, d9b04 <_strtol_l.isra.0+0xd8>
   d9b00:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9b04:	6011      	str	r1, [r2, #0]
   d9b06:	e7f2      	b.n	d9aee <_strtol_l.isra.0+0xc2>
   d9b08:	2430      	movs	r4, #48	; 0x30
   d9b0a:	2b00      	cmp	r3, #0
   d9b0c:	d1b3      	bne.n	d9a76 <_strtol_l.isra.0+0x4a>
   d9b0e:	2308      	movs	r3, #8
   d9b10:	e7b1      	b.n	d9a76 <_strtol_l.isra.0+0x4a>
   d9b12:	2c30      	cmp	r4, #48	; 0x30
   d9b14:	d0a4      	beq.n	d9a60 <_strtol_l.isra.0+0x34>
   d9b16:	230a      	movs	r3, #10
   d9b18:	e7ad      	b.n	d9a76 <_strtol_l.isra.0+0x4a>
   d9b1a:	bf00      	nop
   d9b1c:	000db4d9 	.word	0x000db4d9

000d9b20 <strtol>:
   d9b20:	4613      	mov	r3, r2
   d9b22:	460a      	mov	r2, r1
   d9b24:	4601      	mov	r1, r0
   d9b26:	4802      	ldr	r0, [pc, #8]	; (d9b30 <strtol+0x10>)
   d9b28:	6800      	ldr	r0, [r0, #0]
   d9b2a:	f7ff bf7f 	b.w	d9a2c <_strtol_l.isra.0>
   d9b2e:	bf00      	nop
   d9b30:	2003e254 	.word	0x2003e254

000d9b34 <rshift>:
   d9b34:	6903      	ldr	r3, [r0, #16]
   d9b36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9b3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9b3e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9b42:	f100 0414 	add.w	r4, r0, #20
   d9b46:	dd45      	ble.n	d9bd4 <rshift+0xa0>
   d9b48:	f011 011f 	ands.w	r1, r1, #31
   d9b4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9b50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9b54:	d10c      	bne.n	d9b70 <rshift+0x3c>
   d9b56:	f100 0710 	add.w	r7, r0, #16
   d9b5a:	4629      	mov	r1, r5
   d9b5c:	42b1      	cmp	r1, r6
   d9b5e:	d334      	bcc.n	d9bca <rshift+0x96>
   d9b60:	1a9b      	subs	r3, r3, r2
   d9b62:	009b      	lsls	r3, r3, #2
   d9b64:	1eea      	subs	r2, r5, #3
   d9b66:	4296      	cmp	r6, r2
   d9b68:	bf38      	it	cc
   d9b6a:	2300      	movcc	r3, #0
   d9b6c:	4423      	add	r3, r4
   d9b6e:	e015      	b.n	d9b9c <rshift+0x68>
   d9b70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9b74:	f1c1 0820 	rsb	r8, r1, #32
   d9b78:	40cf      	lsrs	r7, r1
   d9b7a:	f105 0e04 	add.w	lr, r5, #4
   d9b7e:	46a1      	mov	r9, r4
   d9b80:	4576      	cmp	r6, lr
   d9b82:	46f4      	mov	ip, lr
   d9b84:	d815      	bhi.n	d9bb2 <rshift+0x7e>
   d9b86:	1a9b      	subs	r3, r3, r2
   d9b88:	009a      	lsls	r2, r3, #2
   d9b8a:	3a04      	subs	r2, #4
   d9b8c:	3501      	adds	r5, #1
   d9b8e:	42ae      	cmp	r6, r5
   d9b90:	bf38      	it	cc
   d9b92:	2200      	movcc	r2, #0
   d9b94:	18a3      	adds	r3, r4, r2
   d9b96:	50a7      	str	r7, [r4, r2]
   d9b98:	b107      	cbz	r7, d9b9c <rshift+0x68>
   d9b9a:	3304      	adds	r3, #4
   d9b9c:	1b1a      	subs	r2, r3, r4
   d9b9e:	42a3      	cmp	r3, r4
   d9ba0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9ba4:	bf08      	it	eq
   d9ba6:	2300      	moveq	r3, #0
   d9ba8:	6102      	str	r2, [r0, #16]
   d9baa:	bf08      	it	eq
   d9bac:	6143      	streq	r3, [r0, #20]
   d9bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9bb2:	f8dc c000 	ldr.w	ip, [ip]
   d9bb6:	fa0c fc08 	lsl.w	ip, ip, r8
   d9bba:	ea4c 0707 	orr.w	r7, ip, r7
   d9bbe:	f849 7b04 	str.w	r7, [r9], #4
   d9bc2:	f85e 7b04 	ldr.w	r7, [lr], #4
   d9bc6:	40cf      	lsrs	r7, r1
   d9bc8:	e7da      	b.n	d9b80 <rshift+0x4c>
   d9bca:	f851 cb04 	ldr.w	ip, [r1], #4
   d9bce:	f847 cf04 	str.w	ip, [r7, #4]!
   d9bd2:	e7c3      	b.n	d9b5c <rshift+0x28>
   d9bd4:	4623      	mov	r3, r4
   d9bd6:	e7e1      	b.n	d9b9c <rshift+0x68>

000d9bd8 <__hexdig_fun>:
   d9bd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9bdc:	2b09      	cmp	r3, #9
   d9bde:	d802      	bhi.n	d9be6 <__hexdig_fun+0xe>
   d9be0:	3820      	subs	r0, #32
   d9be2:	b2c0      	uxtb	r0, r0
   d9be4:	4770      	bx	lr
   d9be6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9bea:	2b05      	cmp	r3, #5
   d9bec:	d801      	bhi.n	d9bf2 <__hexdig_fun+0x1a>
   d9bee:	3847      	subs	r0, #71	; 0x47
   d9bf0:	e7f7      	b.n	d9be2 <__hexdig_fun+0xa>
   d9bf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9bf6:	2b05      	cmp	r3, #5
   d9bf8:	d801      	bhi.n	d9bfe <__hexdig_fun+0x26>
   d9bfa:	3827      	subs	r0, #39	; 0x27
   d9bfc:	e7f1      	b.n	d9be2 <__hexdig_fun+0xa>
   d9bfe:	2000      	movs	r0, #0
   d9c00:	4770      	bx	lr
	...

000d9c04 <__gethex>:
   d9c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c08:	ed2d 8b02 	vpush	{d8}
   d9c0c:	b089      	sub	sp, #36	; 0x24
   d9c0e:	ee08 0a10 	vmov	s16, r0
   d9c12:	9304      	str	r3, [sp, #16]
   d9c14:	4bbc      	ldr	r3, [pc, #752]	; (d9f08 <__gethex+0x304>)
   d9c16:	681b      	ldr	r3, [r3, #0]
   d9c18:	9301      	str	r3, [sp, #4]
   d9c1a:	4618      	mov	r0, r3
   d9c1c:	468b      	mov	fp, r1
   d9c1e:	4690      	mov	r8, r2
   d9c20:	f7ff f8a3 	bl	d8d6a <strlen>
   d9c24:	9b01      	ldr	r3, [sp, #4]
   d9c26:	f8db 2000 	ldr.w	r2, [fp]
   d9c2a:	4403      	add	r3, r0
   d9c2c:	4682      	mov	sl, r0
   d9c2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9c32:	9305      	str	r3, [sp, #20]
   d9c34:	1c93      	adds	r3, r2, #2
   d9c36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9c3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9c3e:	32fe      	adds	r2, #254	; 0xfe
   d9c40:	18d1      	adds	r1, r2, r3
   d9c42:	461f      	mov	r7, r3
   d9c44:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9c48:	9100      	str	r1, [sp, #0]
   d9c4a:	2830      	cmp	r0, #48	; 0x30
   d9c4c:	d0f8      	beq.n	d9c40 <__gethex+0x3c>
   d9c4e:	f7ff ffc3 	bl	d9bd8 <__hexdig_fun>
   d9c52:	4604      	mov	r4, r0
   d9c54:	2800      	cmp	r0, #0
   d9c56:	d13a      	bne.n	d9cce <__gethex+0xca>
   d9c58:	9901      	ldr	r1, [sp, #4]
   d9c5a:	4652      	mov	r2, sl
   d9c5c:	4638      	mov	r0, r7
   d9c5e:	f7ff f88c 	bl	d8d7a <strncmp>
   d9c62:	4605      	mov	r5, r0
   d9c64:	2800      	cmp	r0, #0
   d9c66:	d168      	bne.n	d9d3a <__gethex+0x136>
   d9c68:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9c6c:	eb07 060a 	add.w	r6, r7, sl
   d9c70:	f7ff ffb2 	bl	d9bd8 <__hexdig_fun>
   d9c74:	2800      	cmp	r0, #0
   d9c76:	d062      	beq.n	d9d3e <__gethex+0x13a>
   d9c78:	4633      	mov	r3, r6
   d9c7a:	7818      	ldrb	r0, [r3, #0]
   d9c7c:	2830      	cmp	r0, #48	; 0x30
   d9c7e:	461f      	mov	r7, r3
   d9c80:	f103 0301 	add.w	r3, r3, #1
   d9c84:	d0f9      	beq.n	d9c7a <__gethex+0x76>
   d9c86:	f7ff ffa7 	bl	d9bd8 <__hexdig_fun>
   d9c8a:	2301      	movs	r3, #1
   d9c8c:	fab0 f480 	clz	r4, r0
   d9c90:	0964      	lsrs	r4, r4, #5
   d9c92:	4635      	mov	r5, r6
   d9c94:	9300      	str	r3, [sp, #0]
   d9c96:	463a      	mov	r2, r7
   d9c98:	4616      	mov	r6, r2
   d9c9a:	3201      	adds	r2, #1
   d9c9c:	7830      	ldrb	r0, [r6, #0]
   d9c9e:	f7ff ff9b 	bl	d9bd8 <__hexdig_fun>
   d9ca2:	2800      	cmp	r0, #0
   d9ca4:	d1f8      	bne.n	d9c98 <__gethex+0x94>
   d9ca6:	9901      	ldr	r1, [sp, #4]
   d9ca8:	4652      	mov	r2, sl
   d9caa:	4630      	mov	r0, r6
   d9cac:	f7ff f865 	bl	d8d7a <strncmp>
   d9cb0:	b980      	cbnz	r0, d9cd4 <__gethex+0xd0>
   d9cb2:	b94d      	cbnz	r5, d9cc8 <__gethex+0xc4>
   d9cb4:	eb06 050a 	add.w	r5, r6, sl
   d9cb8:	462a      	mov	r2, r5
   d9cba:	4616      	mov	r6, r2
   d9cbc:	3201      	adds	r2, #1
   d9cbe:	7830      	ldrb	r0, [r6, #0]
   d9cc0:	f7ff ff8a 	bl	d9bd8 <__hexdig_fun>
   d9cc4:	2800      	cmp	r0, #0
   d9cc6:	d1f8      	bne.n	d9cba <__gethex+0xb6>
   d9cc8:	1bad      	subs	r5, r5, r6
   d9cca:	00ad      	lsls	r5, r5, #2
   d9ccc:	e004      	b.n	d9cd8 <__gethex+0xd4>
   d9cce:	2400      	movs	r4, #0
   d9cd0:	4625      	mov	r5, r4
   d9cd2:	e7e0      	b.n	d9c96 <__gethex+0x92>
   d9cd4:	2d00      	cmp	r5, #0
   d9cd6:	d1f7      	bne.n	d9cc8 <__gethex+0xc4>
   d9cd8:	7833      	ldrb	r3, [r6, #0]
   d9cda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9cde:	2b50      	cmp	r3, #80	; 0x50
   d9ce0:	d13b      	bne.n	d9d5a <__gethex+0x156>
   d9ce2:	7873      	ldrb	r3, [r6, #1]
   d9ce4:	2b2b      	cmp	r3, #43	; 0x2b
   d9ce6:	d02c      	beq.n	d9d42 <__gethex+0x13e>
   d9ce8:	2b2d      	cmp	r3, #45	; 0x2d
   d9cea:	d02e      	beq.n	d9d4a <__gethex+0x146>
   d9cec:	1c71      	adds	r1, r6, #1
   d9cee:	f04f 0900 	mov.w	r9, #0
   d9cf2:	7808      	ldrb	r0, [r1, #0]
   d9cf4:	f7ff ff70 	bl	d9bd8 <__hexdig_fun>
   d9cf8:	1e43      	subs	r3, r0, #1
   d9cfa:	b2db      	uxtb	r3, r3
   d9cfc:	2b18      	cmp	r3, #24
   d9cfe:	d82c      	bhi.n	d9d5a <__gethex+0x156>
   d9d00:	f1a0 0210 	sub.w	r2, r0, #16
   d9d04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9d08:	f7ff ff66 	bl	d9bd8 <__hexdig_fun>
   d9d0c:	1e43      	subs	r3, r0, #1
   d9d0e:	b2db      	uxtb	r3, r3
   d9d10:	2b18      	cmp	r3, #24
   d9d12:	d91d      	bls.n	d9d50 <__gethex+0x14c>
   d9d14:	f1b9 0f00 	cmp.w	r9, #0
   d9d18:	d000      	beq.n	d9d1c <__gethex+0x118>
   d9d1a:	4252      	negs	r2, r2
   d9d1c:	4415      	add	r5, r2
   d9d1e:	f8cb 1000 	str.w	r1, [fp]
   d9d22:	b1e4      	cbz	r4, d9d5e <__gethex+0x15a>
   d9d24:	9b00      	ldr	r3, [sp, #0]
   d9d26:	2b00      	cmp	r3, #0
   d9d28:	bf14      	ite	ne
   d9d2a:	2700      	movne	r7, #0
   d9d2c:	2706      	moveq	r7, #6
   d9d2e:	4638      	mov	r0, r7
   d9d30:	b009      	add	sp, #36	; 0x24
   d9d32:	ecbd 8b02 	vpop	{d8}
   d9d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9d3a:	463e      	mov	r6, r7
   d9d3c:	4625      	mov	r5, r4
   d9d3e:	2401      	movs	r4, #1
   d9d40:	e7ca      	b.n	d9cd8 <__gethex+0xd4>
   d9d42:	f04f 0900 	mov.w	r9, #0
   d9d46:	1cb1      	adds	r1, r6, #2
   d9d48:	e7d3      	b.n	d9cf2 <__gethex+0xee>
   d9d4a:	f04f 0901 	mov.w	r9, #1
   d9d4e:	e7fa      	b.n	d9d46 <__gethex+0x142>
   d9d50:	230a      	movs	r3, #10
   d9d52:	fb03 0202 	mla	r2, r3, r2, r0
   d9d56:	3a10      	subs	r2, #16
   d9d58:	e7d4      	b.n	d9d04 <__gethex+0x100>
   d9d5a:	4631      	mov	r1, r6
   d9d5c:	e7df      	b.n	d9d1e <__gethex+0x11a>
   d9d5e:	1bf3      	subs	r3, r6, r7
   d9d60:	3b01      	subs	r3, #1
   d9d62:	4621      	mov	r1, r4
   d9d64:	2b07      	cmp	r3, #7
   d9d66:	dc52      	bgt.n	d9e0e <__gethex+0x20a>
   d9d68:	ee18 0a10 	vmov	r0, s16
   d9d6c:	f000 fa52 	bl	da214 <_Balloc>
   d9d70:	f04f 0b00 	mov.w	fp, #0
   d9d74:	f100 0914 	add.w	r9, r0, #20
   d9d78:	f1ca 0301 	rsb	r3, sl, #1
   d9d7c:	4604      	mov	r4, r0
   d9d7e:	f8cd 9008 	str.w	r9, [sp, #8]
   d9d82:	f8cd b000 	str.w	fp, [sp]
   d9d86:	9306      	str	r3, [sp, #24]
   d9d88:	42b7      	cmp	r7, r6
   d9d8a:	d343      	bcc.n	d9e14 <__gethex+0x210>
   d9d8c:	9802      	ldr	r0, [sp, #8]
   d9d8e:	9b00      	ldr	r3, [sp, #0]
   d9d90:	f840 3b04 	str.w	r3, [r0], #4
   d9d94:	eba0 0009 	sub.w	r0, r0, r9
   d9d98:	1080      	asrs	r0, r0, #2
   d9d9a:	0146      	lsls	r6, r0, #5
   d9d9c:	6120      	str	r0, [r4, #16]
   d9d9e:	4618      	mov	r0, r3
   d9da0:	f000 faff 	bl	da3a2 <__hi0bits>
   d9da4:	1a30      	subs	r0, r6, r0
   d9da6:	f8d8 6000 	ldr.w	r6, [r8]
   d9daa:	42b0      	cmp	r0, r6
   d9dac:	dd66      	ble.n	d9e7c <__gethex+0x278>
   d9dae:	1b87      	subs	r7, r0, r6
   d9db0:	4639      	mov	r1, r7
   d9db2:	4620      	mov	r0, r4
   d9db4:	f000 fe4c 	bl	daa50 <__any_on>
   d9db8:	4682      	mov	sl, r0
   d9dba:	b1a8      	cbz	r0, d9de8 <__gethex+0x1e4>
   d9dbc:	1e7b      	subs	r3, r7, #1
   d9dbe:	1159      	asrs	r1, r3, #5
   d9dc0:	f003 021f 	and.w	r2, r3, #31
   d9dc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9dc8:	f04f 0a01 	mov.w	sl, #1
   d9dcc:	fa0a f202 	lsl.w	r2, sl, r2
   d9dd0:	420a      	tst	r2, r1
   d9dd2:	d009      	beq.n	d9de8 <__gethex+0x1e4>
   d9dd4:	4553      	cmp	r3, sl
   d9dd6:	dd05      	ble.n	d9de4 <__gethex+0x1e0>
   d9dd8:	1eb9      	subs	r1, r7, #2
   d9dda:	4620      	mov	r0, r4
   d9ddc:	f000 fe38 	bl	daa50 <__any_on>
   d9de0:	2800      	cmp	r0, #0
   d9de2:	d148      	bne.n	d9e76 <__gethex+0x272>
   d9de4:	f04f 0a02 	mov.w	sl, #2
   d9de8:	4639      	mov	r1, r7
   d9dea:	4620      	mov	r0, r4
   d9dec:	f7ff fea2 	bl	d9b34 <rshift>
   d9df0:	443d      	add	r5, r7
   d9df2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9df6:	42ab      	cmp	r3, r5
   d9df8:	da4f      	bge.n	d9e9a <__gethex+0x296>
   d9dfa:	ee18 0a10 	vmov	r0, s16
   d9dfe:	4621      	mov	r1, r4
   d9e00:	f000 fa3c 	bl	da27c <_Bfree>
   d9e04:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9e06:	2300      	movs	r3, #0
   d9e08:	6013      	str	r3, [r2, #0]
   d9e0a:	27a3      	movs	r7, #163	; 0xa3
   d9e0c:	e78f      	b.n	d9d2e <__gethex+0x12a>
   d9e0e:	3101      	adds	r1, #1
   d9e10:	105b      	asrs	r3, r3, #1
   d9e12:	e7a7      	b.n	d9d64 <__gethex+0x160>
   d9e14:	1e73      	subs	r3, r6, #1
   d9e16:	9a05      	ldr	r2, [sp, #20]
   d9e18:	9303      	str	r3, [sp, #12]
   d9e1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9e1e:	4293      	cmp	r3, r2
   d9e20:	d019      	beq.n	d9e56 <__gethex+0x252>
   d9e22:	f1bb 0f20 	cmp.w	fp, #32
   d9e26:	d107      	bne.n	d9e38 <__gethex+0x234>
   d9e28:	9b02      	ldr	r3, [sp, #8]
   d9e2a:	9a00      	ldr	r2, [sp, #0]
   d9e2c:	f843 2b04 	str.w	r2, [r3], #4
   d9e30:	9302      	str	r3, [sp, #8]
   d9e32:	2300      	movs	r3, #0
   d9e34:	9300      	str	r3, [sp, #0]
   d9e36:	469b      	mov	fp, r3
   d9e38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9e3c:	f7ff fecc 	bl	d9bd8 <__hexdig_fun>
   d9e40:	9b00      	ldr	r3, [sp, #0]
   d9e42:	f000 000f 	and.w	r0, r0, #15
   d9e46:	fa00 f00b 	lsl.w	r0, r0, fp
   d9e4a:	4303      	orrs	r3, r0
   d9e4c:	9300      	str	r3, [sp, #0]
   d9e4e:	f10b 0b04 	add.w	fp, fp, #4
   d9e52:	9b03      	ldr	r3, [sp, #12]
   d9e54:	e00d      	b.n	d9e72 <__gethex+0x26e>
   d9e56:	9b03      	ldr	r3, [sp, #12]
   d9e58:	9a06      	ldr	r2, [sp, #24]
   d9e5a:	4413      	add	r3, r2
   d9e5c:	42bb      	cmp	r3, r7
   d9e5e:	d3e0      	bcc.n	d9e22 <__gethex+0x21e>
   d9e60:	4618      	mov	r0, r3
   d9e62:	9901      	ldr	r1, [sp, #4]
   d9e64:	9307      	str	r3, [sp, #28]
   d9e66:	4652      	mov	r2, sl
   d9e68:	f7fe ff87 	bl	d8d7a <strncmp>
   d9e6c:	9b07      	ldr	r3, [sp, #28]
   d9e6e:	2800      	cmp	r0, #0
   d9e70:	d1d7      	bne.n	d9e22 <__gethex+0x21e>
   d9e72:	461e      	mov	r6, r3
   d9e74:	e788      	b.n	d9d88 <__gethex+0x184>
   d9e76:	f04f 0a03 	mov.w	sl, #3
   d9e7a:	e7b5      	b.n	d9de8 <__gethex+0x1e4>
   d9e7c:	da0a      	bge.n	d9e94 <__gethex+0x290>
   d9e7e:	1a37      	subs	r7, r6, r0
   d9e80:	4621      	mov	r1, r4
   d9e82:	ee18 0a10 	vmov	r0, s16
   d9e86:	463a      	mov	r2, r7
   d9e88:	f000 fbce 	bl	da628 <__lshift>
   d9e8c:	1bed      	subs	r5, r5, r7
   d9e8e:	4604      	mov	r4, r0
   d9e90:	f100 0914 	add.w	r9, r0, #20
   d9e94:	f04f 0a00 	mov.w	sl, #0
   d9e98:	e7ab      	b.n	d9df2 <__gethex+0x1ee>
   d9e9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9e9e:	42a8      	cmp	r0, r5
   d9ea0:	dd6d      	ble.n	d9f7e <__gethex+0x37a>
   d9ea2:	1b45      	subs	r5, r0, r5
   d9ea4:	42ae      	cmp	r6, r5
   d9ea6:	dc31      	bgt.n	d9f0c <__gethex+0x308>
   d9ea8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9eac:	2b02      	cmp	r3, #2
   d9eae:	d023      	beq.n	d9ef8 <__gethex+0x2f4>
   d9eb0:	2b03      	cmp	r3, #3
   d9eb2:	d025      	beq.n	d9f00 <__gethex+0x2fc>
   d9eb4:	2b01      	cmp	r3, #1
   d9eb6:	d115      	bne.n	d9ee4 <__gethex+0x2e0>
   d9eb8:	42ae      	cmp	r6, r5
   d9eba:	d113      	bne.n	d9ee4 <__gethex+0x2e0>
   d9ebc:	2e01      	cmp	r6, #1
   d9ebe:	d10b      	bne.n	d9ed8 <__gethex+0x2d4>
   d9ec0:	9a04      	ldr	r2, [sp, #16]
   d9ec2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9ec6:	6013      	str	r3, [r2, #0]
   d9ec8:	2301      	movs	r3, #1
   d9eca:	6123      	str	r3, [r4, #16]
   d9ecc:	f8c9 3000 	str.w	r3, [r9]
   d9ed0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9ed2:	2762      	movs	r7, #98	; 0x62
   d9ed4:	601c      	str	r4, [r3, #0]
   d9ed6:	e72a      	b.n	d9d2e <__gethex+0x12a>
   d9ed8:	1e71      	subs	r1, r6, #1
   d9eda:	4620      	mov	r0, r4
   d9edc:	f000 fdb8 	bl	daa50 <__any_on>
   d9ee0:	2800      	cmp	r0, #0
   d9ee2:	d1ed      	bne.n	d9ec0 <__gethex+0x2bc>
   d9ee4:	ee18 0a10 	vmov	r0, s16
   d9ee8:	4621      	mov	r1, r4
   d9eea:	f000 f9c7 	bl	da27c <_Bfree>
   d9eee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9ef0:	2300      	movs	r3, #0
   d9ef2:	6013      	str	r3, [r2, #0]
   d9ef4:	2750      	movs	r7, #80	; 0x50
   d9ef6:	e71a      	b.n	d9d2e <__gethex+0x12a>
   d9ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9efa:	2b00      	cmp	r3, #0
   d9efc:	d1f2      	bne.n	d9ee4 <__gethex+0x2e0>
   d9efe:	e7df      	b.n	d9ec0 <__gethex+0x2bc>
   d9f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9f02:	2b00      	cmp	r3, #0
   d9f04:	d1dc      	bne.n	d9ec0 <__gethex+0x2bc>
   d9f06:	e7ed      	b.n	d9ee4 <__gethex+0x2e0>
   d9f08:	000db5dc 	.word	0x000db5dc
   d9f0c:	1e6f      	subs	r7, r5, #1
   d9f0e:	f1ba 0f00 	cmp.w	sl, #0
   d9f12:	d131      	bne.n	d9f78 <__gethex+0x374>
   d9f14:	b127      	cbz	r7, d9f20 <__gethex+0x31c>
   d9f16:	4639      	mov	r1, r7
   d9f18:	4620      	mov	r0, r4
   d9f1a:	f000 fd99 	bl	daa50 <__any_on>
   d9f1e:	4682      	mov	sl, r0
   d9f20:	117b      	asrs	r3, r7, #5
   d9f22:	2101      	movs	r1, #1
   d9f24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9f28:	f007 071f 	and.w	r7, r7, #31
   d9f2c:	fa01 f707 	lsl.w	r7, r1, r7
   d9f30:	421f      	tst	r7, r3
   d9f32:	4629      	mov	r1, r5
   d9f34:	4620      	mov	r0, r4
   d9f36:	bf18      	it	ne
   d9f38:	f04a 0a02 	orrne.w	sl, sl, #2
   d9f3c:	1b76      	subs	r6, r6, r5
   d9f3e:	f7ff fdf9 	bl	d9b34 <rshift>
   d9f42:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9f46:	2702      	movs	r7, #2
   d9f48:	f1ba 0f00 	cmp.w	sl, #0
   d9f4c:	d048      	beq.n	d9fe0 <__gethex+0x3dc>
   d9f4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9f52:	2b02      	cmp	r3, #2
   d9f54:	d015      	beq.n	d9f82 <__gethex+0x37e>
   d9f56:	2b03      	cmp	r3, #3
   d9f58:	d017      	beq.n	d9f8a <__gethex+0x386>
   d9f5a:	2b01      	cmp	r3, #1
   d9f5c:	d109      	bne.n	d9f72 <__gethex+0x36e>
   d9f5e:	f01a 0f02 	tst.w	sl, #2
   d9f62:	d006      	beq.n	d9f72 <__gethex+0x36e>
   d9f64:	f8d9 0000 	ldr.w	r0, [r9]
   d9f68:	ea4a 0a00 	orr.w	sl, sl, r0
   d9f6c:	f01a 0f01 	tst.w	sl, #1
   d9f70:	d10e      	bne.n	d9f90 <__gethex+0x38c>
   d9f72:	f047 0710 	orr.w	r7, r7, #16
   d9f76:	e033      	b.n	d9fe0 <__gethex+0x3dc>
   d9f78:	f04f 0a01 	mov.w	sl, #1
   d9f7c:	e7d0      	b.n	d9f20 <__gethex+0x31c>
   d9f7e:	2701      	movs	r7, #1
   d9f80:	e7e2      	b.n	d9f48 <__gethex+0x344>
   d9f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9f84:	f1c3 0301 	rsb	r3, r3, #1
   d9f88:	9315      	str	r3, [sp, #84]	; 0x54
   d9f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9f8c:	2b00      	cmp	r3, #0
   d9f8e:	d0f0      	beq.n	d9f72 <__gethex+0x36e>
   d9f90:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9f94:	f104 0314 	add.w	r3, r4, #20
   d9f98:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d9f9c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9fa0:	f04f 0c00 	mov.w	ip, #0
   d9fa4:	4618      	mov	r0, r3
   d9fa6:	f853 2b04 	ldr.w	r2, [r3], #4
   d9faa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9fae:	d01c      	beq.n	d9fea <__gethex+0x3e6>
   d9fb0:	3201      	adds	r2, #1
   d9fb2:	6002      	str	r2, [r0, #0]
   d9fb4:	2f02      	cmp	r7, #2
   d9fb6:	f104 0314 	add.w	r3, r4, #20
   d9fba:	d13a      	bne.n	da032 <__gethex+0x42e>
   d9fbc:	f8d8 2000 	ldr.w	r2, [r8]
   d9fc0:	3a01      	subs	r2, #1
   d9fc2:	42b2      	cmp	r2, r6
   d9fc4:	d10a      	bne.n	d9fdc <__gethex+0x3d8>
   d9fc6:	1171      	asrs	r1, r6, #5
   d9fc8:	2201      	movs	r2, #1
   d9fca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d9fce:	f006 061f 	and.w	r6, r6, #31
   d9fd2:	fa02 f606 	lsl.w	r6, r2, r6
   d9fd6:	421e      	tst	r6, r3
   d9fd8:	bf18      	it	ne
   d9fda:	4617      	movne	r7, r2
   d9fdc:	f047 0720 	orr.w	r7, r7, #32
   d9fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9fe2:	601c      	str	r4, [r3, #0]
   d9fe4:	9b04      	ldr	r3, [sp, #16]
   d9fe6:	601d      	str	r5, [r3, #0]
   d9fe8:	e6a1      	b.n	d9d2e <__gethex+0x12a>
   d9fea:	4299      	cmp	r1, r3
   d9fec:	f843 cc04 	str.w	ip, [r3, #-4]
   d9ff0:	d8d8      	bhi.n	d9fa4 <__gethex+0x3a0>
   d9ff2:	68a3      	ldr	r3, [r4, #8]
   d9ff4:	4599      	cmp	r9, r3
   d9ff6:	db14      	blt.n	da022 <__gethex+0x41e>
   d9ff8:	6861      	ldr	r1, [r4, #4]
   d9ffa:	ee18 0a10 	vmov	r0, s16
   d9ffe:	3101      	adds	r1, #1
   da000:	f000 f908 	bl	da214 <_Balloc>
   da004:	6922      	ldr	r2, [r4, #16]
   da006:	3202      	adds	r2, #2
   da008:	f104 010c 	add.w	r1, r4, #12
   da00c:	4682      	mov	sl, r0
   da00e:	0092      	lsls	r2, r2, #2
   da010:	300c      	adds	r0, #12
   da012:	f7fe fe27 	bl	d8c64 <memcpy>
   da016:	4621      	mov	r1, r4
   da018:	ee18 0a10 	vmov	r0, s16
   da01c:	f000 f92e 	bl	da27c <_Bfree>
   da020:	4654      	mov	r4, sl
   da022:	6923      	ldr	r3, [r4, #16]
   da024:	1c5a      	adds	r2, r3, #1
   da026:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da02a:	6122      	str	r2, [r4, #16]
   da02c:	2201      	movs	r2, #1
   da02e:	615a      	str	r2, [r3, #20]
   da030:	e7c0      	b.n	d9fb4 <__gethex+0x3b0>
   da032:	6922      	ldr	r2, [r4, #16]
   da034:	454a      	cmp	r2, r9
   da036:	dd0b      	ble.n	da050 <__gethex+0x44c>
   da038:	2101      	movs	r1, #1
   da03a:	4620      	mov	r0, r4
   da03c:	f7ff fd7a 	bl	d9b34 <rshift>
   da040:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da044:	3501      	adds	r5, #1
   da046:	42ab      	cmp	r3, r5
   da048:	f6ff aed7 	blt.w	d9dfa <__gethex+0x1f6>
   da04c:	2701      	movs	r7, #1
   da04e:	e7c5      	b.n	d9fdc <__gethex+0x3d8>
   da050:	f016 061f 	ands.w	r6, r6, #31
   da054:	d0fa      	beq.n	da04c <__gethex+0x448>
   da056:	449b      	add	fp, r3
   da058:	f1c6 0620 	rsb	r6, r6, #32
   da05c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da060:	f000 f99f 	bl	da3a2 <__hi0bits>
   da064:	42b0      	cmp	r0, r6
   da066:	dbe7      	blt.n	da038 <__gethex+0x434>
   da068:	e7f0      	b.n	da04c <__gethex+0x448>
   da06a:	bf00      	nop

000da06c <L_shift>:
   da06c:	f1c2 0208 	rsb	r2, r2, #8
   da070:	0092      	lsls	r2, r2, #2
   da072:	b570      	push	{r4, r5, r6, lr}
   da074:	f1c2 0620 	rsb	r6, r2, #32
   da078:	6843      	ldr	r3, [r0, #4]
   da07a:	6804      	ldr	r4, [r0, #0]
   da07c:	fa03 f506 	lsl.w	r5, r3, r6
   da080:	432c      	orrs	r4, r5
   da082:	40d3      	lsrs	r3, r2
   da084:	6004      	str	r4, [r0, #0]
   da086:	f840 3f04 	str.w	r3, [r0, #4]!
   da08a:	4288      	cmp	r0, r1
   da08c:	d3f4      	bcc.n	da078 <L_shift+0xc>
   da08e:	bd70      	pop	{r4, r5, r6, pc}

000da090 <__match>:
   da090:	b530      	push	{r4, r5, lr}
   da092:	6803      	ldr	r3, [r0, #0]
   da094:	3301      	adds	r3, #1
   da096:	f811 4b01 	ldrb.w	r4, [r1], #1
   da09a:	b914      	cbnz	r4, da0a2 <__match+0x12>
   da09c:	6003      	str	r3, [r0, #0]
   da09e:	2001      	movs	r0, #1
   da0a0:	bd30      	pop	{r4, r5, pc}
   da0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   da0a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da0aa:	2d19      	cmp	r5, #25
   da0ac:	bf98      	it	ls
   da0ae:	3220      	addls	r2, #32
   da0b0:	42a2      	cmp	r2, r4
   da0b2:	d0f0      	beq.n	da096 <__match+0x6>
   da0b4:	2000      	movs	r0, #0
   da0b6:	e7f3      	b.n	da0a0 <__match+0x10>

000da0b8 <__hexnan>:
   da0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da0bc:	680b      	ldr	r3, [r1, #0]
   da0be:	6801      	ldr	r1, [r0, #0]
   da0c0:	115e      	asrs	r6, r3, #5
   da0c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da0c6:	f013 031f 	ands.w	r3, r3, #31
   da0ca:	b087      	sub	sp, #28
   da0cc:	bf18      	it	ne
   da0ce:	3604      	addne	r6, #4
   da0d0:	2500      	movs	r5, #0
   da0d2:	1f37      	subs	r7, r6, #4
   da0d4:	4682      	mov	sl, r0
   da0d6:	4690      	mov	r8, r2
   da0d8:	9301      	str	r3, [sp, #4]
   da0da:	f846 5c04 	str.w	r5, [r6, #-4]
   da0de:	46b9      	mov	r9, r7
   da0e0:	463c      	mov	r4, r7
   da0e2:	9502      	str	r5, [sp, #8]
   da0e4:	46ab      	mov	fp, r5
   da0e6:	784a      	ldrb	r2, [r1, #1]
   da0e8:	1c4b      	adds	r3, r1, #1
   da0ea:	9303      	str	r3, [sp, #12]
   da0ec:	b342      	cbz	r2, da140 <__hexnan+0x88>
   da0ee:	4610      	mov	r0, r2
   da0f0:	9105      	str	r1, [sp, #20]
   da0f2:	9204      	str	r2, [sp, #16]
   da0f4:	f7ff fd70 	bl	d9bd8 <__hexdig_fun>
   da0f8:	2800      	cmp	r0, #0
   da0fa:	d14f      	bne.n	da19c <__hexnan+0xe4>
   da0fc:	9a04      	ldr	r2, [sp, #16]
   da0fe:	9905      	ldr	r1, [sp, #20]
   da100:	2a20      	cmp	r2, #32
   da102:	d818      	bhi.n	da136 <__hexnan+0x7e>
   da104:	9b02      	ldr	r3, [sp, #8]
   da106:	459b      	cmp	fp, r3
   da108:	dd13      	ble.n	da132 <__hexnan+0x7a>
   da10a:	454c      	cmp	r4, r9
   da10c:	d206      	bcs.n	da11c <__hexnan+0x64>
   da10e:	2d07      	cmp	r5, #7
   da110:	dc04      	bgt.n	da11c <__hexnan+0x64>
   da112:	462a      	mov	r2, r5
   da114:	4649      	mov	r1, r9
   da116:	4620      	mov	r0, r4
   da118:	f7ff ffa8 	bl	da06c <L_shift>
   da11c:	4544      	cmp	r4, r8
   da11e:	d950      	bls.n	da1c2 <__hexnan+0x10a>
   da120:	2300      	movs	r3, #0
   da122:	f1a4 0904 	sub.w	r9, r4, #4
   da126:	f844 3c04 	str.w	r3, [r4, #-4]
   da12a:	f8cd b008 	str.w	fp, [sp, #8]
   da12e:	464c      	mov	r4, r9
   da130:	461d      	mov	r5, r3
   da132:	9903      	ldr	r1, [sp, #12]
   da134:	e7d7      	b.n	da0e6 <__hexnan+0x2e>
   da136:	2a29      	cmp	r2, #41	; 0x29
   da138:	d156      	bne.n	da1e8 <__hexnan+0x130>
   da13a:	3102      	adds	r1, #2
   da13c:	f8ca 1000 	str.w	r1, [sl]
   da140:	f1bb 0f00 	cmp.w	fp, #0
   da144:	d050      	beq.n	da1e8 <__hexnan+0x130>
   da146:	454c      	cmp	r4, r9
   da148:	d206      	bcs.n	da158 <__hexnan+0xa0>
   da14a:	2d07      	cmp	r5, #7
   da14c:	dc04      	bgt.n	da158 <__hexnan+0xa0>
   da14e:	462a      	mov	r2, r5
   da150:	4649      	mov	r1, r9
   da152:	4620      	mov	r0, r4
   da154:	f7ff ff8a 	bl	da06c <L_shift>
   da158:	4544      	cmp	r4, r8
   da15a:	d934      	bls.n	da1c6 <__hexnan+0x10e>
   da15c:	f1a8 0204 	sub.w	r2, r8, #4
   da160:	4623      	mov	r3, r4
   da162:	f853 1b04 	ldr.w	r1, [r3], #4
   da166:	f842 1f04 	str.w	r1, [r2, #4]!
   da16a:	429f      	cmp	r7, r3
   da16c:	d2f9      	bcs.n	da162 <__hexnan+0xaa>
   da16e:	1b3b      	subs	r3, r7, r4
   da170:	f023 0303 	bic.w	r3, r3, #3
   da174:	3304      	adds	r3, #4
   da176:	3401      	adds	r4, #1
   da178:	3e03      	subs	r6, #3
   da17a:	42b4      	cmp	r4, r6
   da17c:	bf88      	it	hi
   da17e:	2304      	movhi	r3, #4
   da180:	4443      	add	r3, r8
   da182:	2200      	movs	r2, #0
   da184:	f843 2b04 	str.w	r2, [r3], #4
   da188:	429f      	cmp	r7, r3
   da18a:	d2fb      	bcs.n	da184 <__hexnan+0xcc>
   da18c:	683b      	ldr	r3, [r7, #0]
   da18e:	b91b      	cbnz	r3, da198 <__hexnan+0xe0>
   da190:	4547      	cmp	r7, r8
   da192:	d127      	bne.n	da1e4 <__hexnan+0x12c>
   da194:	2301      	movs	r3, #1
   da196:	603b      	str	r3, [r7, #0]
   da198:	2005      	movs	r0, #5
   da19a:	e026      	b.n	da1ea <__hexnan+0x132>
   da19c:	3501      	adds	r5, #1
   da19e:	2d08      	cmp	r5, #8
   da1a0:	f10b 0b01 	add.w	fp, fp, #1
   da1a4:	dd06      	ble.n	da1b4 <__hexnan+0xfc>
   da1a6:	4544      	cmp	r4, r8
   da1a8:	d9c3      	bls.n	da132 <__hexnan+0x7a>
   da1aa:	2300      	movs	r3, #0
   da1ac:	f844 3c04 	str.w	r3, [r4, #-4]
   da1b0:	2501      	movs	r5, #1
   da1b2:	3c04      	subs	r4, #4
   da1b4:	6822      	ldr	r2, [r4, #0]
   da1b6:	f000 000f 	and.w	r0, r0, #15
   da1ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da1be:	6022      	str	r2, [r4, #0]
   da1c0:	e7b7      	b.n	da132 <__hexnan+0x7a>
   da1c2:	2508      	movs	r5, #8
   da1c4:	e7b5      	b.n	da132 <__hexnan+0x7a>
   da1c6:	9b01      	ldr	r3, [sp, #4]
   da1c8:	2b00      	cmp	r3, #0
   da1ca:	d0df      	beq.n	da18c <__hexnan+0xd4>
   da1cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da1d0:	f1c3 0320 	rsb	r3, r3, #32
   da1d4:	fa22 f303 	lsr.w	r3, r2, r3
   da1d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da1dc:	401a      	ands	r2, r3
   da1de:	f846 2c04 	str.w	r2, [r6, #-4]
   da1e2:	e7d3      	b.n	da18c <__hexnan+0xd4>
   da1e4:	3f04      	subs	r7, #4
   da1e6:	e7d1      	b.n	da18c <__hexnan+0xd4>
   da1e8:	2004      	movs	r0, #4
   da1ea:	b007      	add	sp, #28
   da1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da1f0 <__ascii_mbtowc>:
   da1f0:	b082      	sub	sp, #8
   da1f2:	b901      	cbnz	r1, da1f6 <__ascii_mbtowc+0x6>
   da1f4:	a901      	add	r1, sp, #4
   da1f6:	b142      	cbz	r2, da20a <__ascii_mbtowc+0x1a>
   da1f8:	b14b      	cbz	r3, da20e <__ascii_mbtowc+0x1e>
   da1fa:	7813      	ldrb	r3, [r2, #0]
   da1fc:	600b      	str	r3, [r1, #0]
   da1fe:	7812      	ldrb	r2, [r2, #0]
   da200:	1e10      	subs	r0, r2, #0
   da202:	bf18      	it	ne
   da204:	2001      	movne	r0, #1
   da206:	b002      	add	sp, #8
   da208:	4770      	bx	lr
   da20a:	4610      	mov	r0, r2
   da20c:	e7fb      	b.n	da206 <__ascii_mbtowc+0x16>
   da20e:	f06f 0001 	mvn.w	r0, #1
   da212:	e7f8      	b.n	da206 <__ascii_mbtowc+0x16>

000da214 <_Balloc>:
   da214:	b570      	push	{r4, r5, r6, lr}
   da216:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da218:	4604      	mov	r4, r0
   da21a:	460d      	mov	r5, r1
   da21c:	b93e      	cbnz	r6, da22e <_Balloc+0x1a>
   da21e:	2010      	movs	r0, #16
   da220:	f7fc fca8 	bl	d6b74 <malloc>
   da224:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da228:	6260      	str	r0, [r4, #36]	; 0x24
   da22a:	6006      	str	r6, [r0, #0]
   da22c:	60c6      	str	r6, [r0, #12]
   da22e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da230:	68f3      	ldr	r3, [r6, #12]
   da232:	b183      	cbz	r3, da256 <_Balloc+0x42>
   da234:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da236:	68db      	ldr	r3, [r3, #12]
   da238:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da23c:	b9b8      	cbnz	r0, da26e <_Balloc+0x5a>
   da23e:	2101      	movs	r1, #1
   da240:	fa01 f605 	lsl.w	r6, r1, r5
   da244:	1d72      	adds	r2, r6, #5
   da246:	0092      	lsls	r2, r2, #2
   da248:	4620      	mov	r0, r4
   da24a:	f000 fc22 	bl	daa92 <_calloc_r>
   da24e:	b160      	cbz	r0, da26a <_Balloc+0x56>
   da250:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da254:	e00e      	b.n	da274 <_Balloc+0x60>
   da256:	2221      	movs	r2, #33	; 0x21
   da258:	2104      	movs	r1, #4
   da25a:	4620      	mov	r0, r4
   da25c:	f000 fc19 	bl	daa92 <_calloc_r>
   da260:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da262:	60f0      	str	r0, [r6, #12]
   da264:	68db      	ldr	r3, [r3, #12]
   da266:	2b00      	cmp	r3, #0
   da268:	d1e4      	bne.n	da234 <_Balloc+0x20>
   da26a:	2000      	movs	r0, #0
   da26c:	bd70      	pop	{r4, r5, r6, pc}
   da26e:	6802      	ldr	r2, [r0, #0]
   da270:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da274:	2300      	movs	r3, #0
   da276:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da27a:	e7f7      	b.n	da26c <_Balloc+0x58>

000da27c <_Bfree>:
   da27c:	b570      	push	{r4, r5, r6, lr}
   da27e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da280:	4605      	mov	r5, r0
   da282:	460c      	mov	r4, r1
   da284:	b93e      	cbnz	r6, da296 <_Bfree+0x1a>
   da286:	2010      	movs	r0, #16
   da288:	f7fc fc74 	bl	d6b74 <malloc>
   da28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da290:	6268      	str	r0, [r5, #36]	; 0x24
   da292:	6006      	str	r6, [r0, #0]
   da294:	60c6      	str	r6, [r0, #12]
   da296:	b13c      	cbz	r4, da2a8 <_Bfree+0x2c>
   da298:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da29a:	6862      	ldr	r2, [r4, #4]
   da29c:	68db      	ldr	r3, [r3, #12]
   da29e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da2a2:	6021      	str	r1, [r4, #0]
   da2a4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da2a8:	bd70      	pop	{r4, r5, r6, pc}

000da2aa <__multadd>:
   da2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da2ae:	690e      	ldr	r6, [r1, #16]
   da2b0:	4607      	mov	r7, r0
   da2b2:	4698      	mov	r8, r3
   da2b4:	460c      	mov	r4, r1
   da2b6:	f101 0014 	add.w	r0, r1, #20
   da2ba:	2300      	movs	r3, #0
   da2bc:	6805      	ldr	r5, [r0, #0]
   da2be:	b2a9      	uxth	r1, r5
   da2c0:	fb02 8101 	mla	r1, r2, r1, r8
   da2c4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da2c8:	0c2d      	lsrs	r5, r5, #16
   da2ca:	fb02 c505 	mla	r5, r2, r5, ip
   da2ce:	b289      	uxth	r1, r1
   da2d0:	3301      	adds	r3, #1
   da2d2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da2d6:	429e      	cmp	r6, r3
   da2d8:	f840 1b04 	str.w	r1, [r0], #4
   da2dc:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da2e0:	dcec      	bgt.n	da2bc <__multadd+0x12>
   da2e2:	f1b8 0f00 	cmp.w	r8, #0
   da2e6:	d01b      	beq.n	da320 <__multadd+0x76>
   da2e8:	68a3      	ldr	r3, [r4, #8]
   da2ea:	42b3      	cmp	r3, r6
   da2ec:	dc12      	bgt.n	da314 <__multadd+0x6a>
   da2ee:	6861      	ldr	r1, [r4, #4]
   da2f0:	4638      	mov	r0, r7
   da2f2:	3101      	adds	r1, #1
   da2f4:	f7ff ff8e 	bl	da214 <_Balloc>
   da2f8:	6922      	ldr	r2, [r4, #16]
   da2fa:	3202      	adds	r2, #2
   da2fc:	f104 010c 	add.w	r1, r4, #12
   da300:	4605      	mov	r5, r0
   da302:	0092      	lsls	r2, r2, #2
   da304:	300c      	adds	r0, #12
   da306:	f7fe fcad 	bl	d8c64 <memcpy>
   da30a:	4621      	mov	r1, r4
   da30c:	4638      	mov	r0, r7
   da30e:	f7ff ffb5 	bl	da27c <_Bfree>
   da312:	462c      	mov	r4, r5
   da314:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da318:	3601      	adds	r6, #1
   da31a:	f8c3 8014 	str.w	r8, [r3, #20]
   da31e:	6126      	str	r6, [r4, #16]
   da320:	4620      	mov	r0, r4
   da322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da326 <__s2b>:
   da326:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da32a:	460c      	mov	r4, r1
   da32c:	4615      	mov	r5, r2
   da32e:	461f      	mov	r7, r3
   da330:	2209      	movs	r2, #9
   da332:	3308      	adds	r3, #8
   da334:	4606      	mov	r6, r0
   da336:	fb93 f3f2 	sdiv	r3, r3, r2
   da33a:	2100      	movs	r1, #0
   da33c:	2201      	movs	r2, #1
   da33e:	429a      	cmp	r2, r3
   da340:	db20      	blt.n	da384 <__s2b+0x5e>
   da342:	4630      	mov	r0, r6
   da344:	f7ff ff66 	bl	da214 <_Balloc>
   da348:	9b08      	ldr	r3, [sp, #32]
   da34a:	6143      	str	r3, [r0, #20]
   da34c:	2d09      	cmp	r5, #9
   da34e:	f04f 0301 	mov.w	r3, #1
   da352:	6103      	str	r3, [r0, #16]
   da354:	dd19      	ble.n	da38a <__s2b+0x64>
   da356:	f104 0909 	add.w	r9, r4, #9
   da35a:	46c8      	mov	r8, r9
   da35c:	442c      	add	r4, r5
   da35e:	f818 3b01 	ldrb.w	r3, [r8], #1
   da362:	4601      	mov	r1, r0
   da364:	3b30      	subs	r3, #48	; 0x30
   da366:	220a      	movs	r2, #10
   da368:	4630      	mov	r0, r6
   da36a:	f7ff ff9e 	bl	da2aa <__multadd>
   da36e:	45a0      	cmp	r8, r4
   da370:	d1f5      	bne.n	da35e <__s2b+0x38>
   da372:	f1a5 0408 	sub.w	r4, r5, #8
   da376:	444c      	add	r4, r9
   da378:	1b2d      	subs	r5, r5, r4
   da37a:	1963      	adds	r3, r4, r5
   da37c:	42bb      	cmp	r3, r7
   da37e:	db07      	blt.n	da390 <__s2b+0x6a>
   da380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da384:	0052      	lsls	r2, r2, #1
   da386:	3101      	adds	r1, #1
   da388:	e7d9      	b.n	da33e <__s2b+0x18>
   da38a:	340a      	adds	r4, #10
   da38c:	2509      	movs	r5, #9
   da38e:	e7f3      	b.n	da378 <__s2b+0x52>
   da390:	f814 3b01 	ldrb.w	r3, [r4], #1
   da394:	4601      	mov	r1, r0
   da396:	3b30      	subs	r3, #48	; 0x30
   da398:	220a      	movs	r2, #10
   da39a:	4630      	mov	r0, r6
   da39c:	f7ff ff85 	bl	da2aa <__multadd>
   da3a0:	e7eb      	b.n	da37a <__s2b+0x54>

000da3a2 <__hi0bits>:
   da3a2:	0c03      	lsrs	r3, r0, #16
   da3a4:	041b      	lsls	r3, r3, #16
   da3a6:	b9d3      	cbnz	r3, da3de <__hi0bits+0x3c>
   da3a8:	0400      	lsls	r0, r0, #16
   da3aa:	2310      	movs	r3, #16
   da3ac:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da3b0:	bf04      	itt	eq
   da3b2:	0200      	lsleq	r0, r0, #8
   da3b4:	3308      	addeq	r3, #8
   da3b6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da3ba:	bf04      	itt	eq
   da3bc:	0100      	lsleq	r0, r0, #4
   da3be:	3304      	addeq	r3, #4
   da3c0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da3c4:	bf04      	itt	eq
   da3c6:	0080      	lsleq	r0, r0, #2
   da3c8:	3302      	addeq	r3, #2
   da3ca:	2800      	cmp	r0, #0
   da3cc:	db05      	blt.n	da3da <__hi0bits+0x38>
   da3ce:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da3d2:	f103 0301 	add.w	r3, r3, #1
   da3d6:	bf08      	it	eq
   da3d8:	2320      	moveq	r3, #32
   da3da:	4618      	mov	r0, r3
   da3dc:	4770      	bx	lr
   da3de:	2300      	movs	r3, #0
   da3e0:	e7e4      	b.n	da3ac <__hi0bits+0xa>

000da3e2 <__lo0bits>:
   da3e2:	6803      	ldr	r3, [r0, #0]
   da3e4:	f013 0207 	ands.w	r2, r3, #7
   da3e8:	4601      	mov	r1, r0
   da3ea:	d00b      	beq.n	da404 <__lo0bits+0x22>
   da3ec:	07da      	lsls	r2, r3, #31
   da3ee:	d424      	bmi.n	da43a <__lo0bits+0x58>
   da3f0:	0798      	lsls	r0, r3, #30
   da3f2:	bf49      	itett	mi
   da3f4:	085b      	lsrmi	r3, r3, #1
   da3f6:	089b      	lsrpl	r3, r3, #2
   da3f8:	2001      	movmi	r0, #1
   da3fa:	600b      	strmi	r3, [r1, #0]
   da3fc:	bf5c      	itt	pl
   da3fe:	600b      	strpl	r3, [r1, #0]
   da400:	2002      	movpl	r0, #2
   da402:	4770      	bx	lr
   da404:	b298      	uxth	r0, r3
   da406:	b9b0      	cbnz	r0, da436 <__lo0bits+0x54>
   da408:	0c1b      	lsrs	r3, r3, #16
   da40a:	2010      	movs	r0, #16
   da40c:	f013 0fff 	tst.w	r3, #255	; 0xff
   da410:	bf04      	itt	eq
   da412:	0a1b      	lsreq	r3, r3, #8
   da414:	3008      	addeq	r0, #8
   da416:	071a      	lsls	r2, r3, #28
   da418:	bf04      	itt	eq
   da41a:	091b      	lsreq	r3, r3, #4
   da41c:	3004      	addeq	r0, #4
   da41e:	079a      	lsls	r2, r3, #30
   da420:	bf04      	itt	eq
   da422:	089b      	lsreq	r3, r3, #2
   da424:	3002      	addeq	r0, #2
   da426:	07da      	lsls	r2, r3, #31
   da428:	d403      	bmi.n	da432 <__lo0bits+0x50>
   da42a:	085b      	lsrs	r3, r3, #1
   da42c:	f100 0001 	add.w	r0, r0, #1
   da430:	d005      	beq.n	da43e <__lo0bits+0x5c>
   da432:	600b      	str	r3, [r1, #0]
   da434:	4770      	bx	lr
   da436:	4610      	mov	r0, r2
   da438:	e7e8      	b.n	da40c <__lo0bits+0x2a>
   da43a:	2000      	movs	r0, #0
   da43c:	4770      	bx	lr
   da43e:	2020      	movs	r0, #32
   da440:	4770      	bx	lr

000da442 <__i2b>:
   da442:	b510      	push	{r4, lr}
   da444:	460c      	mov	r4, r1
   da446:	2101      	movs	r1, #1
   da448:	f7ff fee4 	bl	da214 <_Balloc>
   da44c:	2201      	movs	r2, #1
   da44e:	6144      	str	r4, [r0, #20]
   da450:	6102      	str	r2, [r0, #16]
   da452:	bd10      	pop	{r4, pc}

000da454 <__multiply>:
   da454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da458:	4615      	mov	r5, r2
   da45a:	690a      	ldr	r2, [r1, #16]
   da45c:	692b      	ldr	r3, [r5, #16]
   da45e:	429a      	cmp	r2, r3
   da460:	bfb8      	it	lt
   da462:	460b      	movlt	r3, r1
   da464:	460c      	mov	r4, r1
   da466:	bfbc      	itt	lt
   da468:	462c      	movlt	r4, r5
   da46a:	461d      	movlt	r5, r3
   da46c:	6927      	ldr	r7, [r4, #16]
   da46e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da472:	68a3      	ldr	r3, [r4, #8]
   da474:	6861      	ldr	r1, [r4, #4]
   da476:	eb07 0609 	add.w	r6, r7, r9
   da47a:	42b3      	cmp	r3, r6
   da47c:	bfb8      	it	lt
   da47e:	3101      	addlt	r1, #1
   da480:	b085      	sub	sp, #20
   da482:	f7ff fec7 	bl	da214 <_Balloc>
   da486:	f100 0114 	add.w	r1, r0, #20
   da48a:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da48e:	460b      	mov	r3, r1
   da490:	2200      	movs	r2, #0
   da492:	4543      	cmp	r3, r8
   da494:	d31d      	bcc.n	da4d2 <__multiply+0x7e>
   da496:	f104 0314 	add.w	r3, r4, #20
   da49a:	f105 0214 	add.w	r2, r5, #20
   da49e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da4a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da4a6:	9302      	str	r3, [sp, #8]
   da4a8:	1b3b      	subs	r3, r7, r4
   da4aa:	3b15      	subs	r3, #21
   da4ac:	f023 0303 	bic.w	r3, r3, #3
   da4b0:	3304      	adds	r3, #4
   da4b2:	f104 0515 	add.w	r5, r4, #21
   da4b6:	42af      	cmp	r7, r5
   da4b8:	bf38      	it	cc
   da4ba:	2304      	movcc	r3, #4
   da4bc:	9301      	str	r3, [sp, #4]
   da4be:	9b02      	ldr	r3, [sp, #8]
   da4c0:	9203      	str	r2, [sp, #12]
   da4c2:	4293      	cmp	r3, r2
   da4c4:	d808      	bhi.n	da4d8 <__multiply+0x84>
   da4c6:	2e00      	cmp	r6, #0
   da4c8:	dc5a      	bgt.n	da580 <__multiply+0x12c>
   da4ca:	6106      	str	r6, [r0, #16]
   da4cc:	b005      	add	sp, #20
   da4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da4d2:	f843 2b04 	str.w	r2, [r3], #4
   da4d6:	e7dc      	b.n	da492 <__multiply+0x3e>
   da4d8:	f8b2 a000 	ldrh.w	sl, [r2]
   da4dc:	f1ba 0f00 	cmp.w	sl, #0
   da4e0:	d024      	beq.n	da52c <__multiply+0xd8>
   da4e2:	f104 0e14 	add.w	lr, r4, #20
   da4e6:	4689      	mov	r9, r1
   da4e8:	f04f 0c00 	mov.w	ip, #0
   da4ec:	f85e 5b04 	ldr.w	r5, [lr], #4
   da4f0:	f8d9 b000 	ldr.w	fp, [r9]
   da4f4:	b2ab      	uxth	r3, r5
   da4f6:	fa1f fb8b 	uxth.w	fp, fp
   da4fa:	fb0a b303 	mla	r3, sl, r3, fp
   da4fe:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da502:	f8d9 5000 	ldr.w	r5, [r9]
   da506:	4463      	add	r3, ip
   da508:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da50c:	fb0a c50b 	mla	r5, sl, fp, ip
   da510:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da514:	b29b      	uxth	r3, r3
   da516:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da51a:	4577      	cmp	r7, lr
   da51c:	f849 3b04 	str.w	r3, [r9], #4
   da520:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da524:	d8e2      	bhi.n	da4ec <__multiply+0x98>
   da526:	9b01      	ldr	r3, [sp, #4]
   da528:	f841 c003 	str.w	ip, [r1, r3]
   da52c:	9b03      	ldr	r3, [sp, #12]
   da52e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da532:	3204      	adds	r2, #4
   da534:	f1b9 0f00 	cmp.w	r9, #0
   da538:	d020      	beq.n	da57c <__multiply+0x128>
   da53a:	680b      	ldr	r3, [r1, #0]
   da53c:	f104 0c14 	add.w	ip, r4, #20
   da540:	468e      	mov	lr, r1
   da542:	f04f 0a00 	mov.w	sl, #0
   da546:	f8bc 5000 	ldrh.w	r5, [ip]
   da54a:	f8be b002 	ldrh.w	fp, [lr, #2]
   da54e:	fb09 b505 	mla	r5, r9, r5, fp
   da552:	44aa      	add	sl, r5
   da554:	b29b      	uxth	r3, r3
   da556:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da55a:	f84e 3b04 	str.w	r3, [lr], #4
   da55e:	f85c 3b04 	ldr.w	r3, [ip], #4
   da562:	f8be 5000 	ldrh.w	r5, [lr]
   da566:	0c1b      	lsrs	r3, r3, #16
   da568:	fb09 5303 	mla	r3, r9, r3, r5
   da56c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da570:	4567      	cmp	r7, ip
   da572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da576:	d8e6      	bhi.n	da546 <__multiply+0xf2>
   da578:	9d01      	ldr	r5, [sp, #4]
   da57a:	514b      	str	r3, [r1, r5]
   da57c:	3104      	adds	r1, #4
   da57e:	e79e      	b.n	da4be <__multiply+0x6a>
   da580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da584:	2b00      	cmp	r3, #0
   da586:	d1a0      	bne.n	da4ca <__multiply+0x76>
   da588:	3e01      	subs	r6, #1
   da58a:	e79c      	b.n	da4c6 <__multiply+0x72>

000da58c <__pow5mult>:
   da58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da590:	4615      	mov	r5, r2
   da592:	f012 0203 	ands.w	r2, r2, #3
   da596:	4606      	mov	r6, r0
   da598:	460f      	mov	r7, r1
   da59a:	d007      	beq.n	da5ac <__pow5mult+0x20>
   da59c:	4c21      	ldr	r4, [pc, #132]	; (da624 <__pow5mult+0x98>)
   da59e:	3a01      	subs	r2, #1
   da5a0:	2300      	movs	r3, #0
   da5a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da5a6:	f7ff fe80 	bl	da2aa <__multadd>
   da5aa:	4607      	mov	r7, r0
   da5ac:	10ad      	asrs	r5, r5, #2
   da5ae:	d035      	beq.n	da61c <__pow5mult+0x90>
   da5b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da5b2:	b93c      	cbnz	r4, da5c4 <__pow5mult+0x38>
   da5b4:	2010      	movs	r0, #16
   da5b6:	f7fc fadd 	bl	d6b74 <malloc>
   da5ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da5be:	6270      	str	r0, [r6, #36]	; 0x24
   da5c0:	6004      	str	r4, [r0, #0]
   da5c2:	60c4      	str	r4, [r0, #12]
   da5c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da5cc:	b94c      	cbnz	r4, da5e2 <__pow5mult+0x56>
   da5ce:	f240 2171 	movw	r1, #625	; 0x271
   da5d2:	4630      	mov	r0, r6
   da5d4:	f7ff ff35 	bl	da442 <__i2b>
   da5d8:	2300      	movs	r3, #0
   da5da:	f8c8 0008 	str.w	r0, [r8, #8]
   da5de:	4604      	mov	r4, r0
   da5e0:	6003      	str	r3, [r0, #0]
   da5e2:	f04f 0900 	mov.w	r9, #0
   da5e6:	07eb      	lsls	r3, r5, #31
   da5e8:	d50a      	bpl.n	da600 <__pow5mult+0x74>
   da5ea:	4639      	mov	r1, r7
   da5ec:	4622      	mov	r2, r4
   da5ee:	4630      	mov	r0, r6
   da5f0:	f7ff ff30 	bl	da454 <__multiply>
   da5f4:	4639      	mov	r1, r7
   da5f6:	4680      	mov	r8, r0
   da5f8:	4630      	mov	r0, r6
   da5fa:	f7ff fe3f 	bl	da27c <_Bfree>
   da5fe:	4647      	mov	r7, r8
   da600:	106d      	asrs	r5, r5, #1
   da602:	d00b      	beq.n	da61c <__pow5mult+0x90>
   da604:	6820      	ldr	r0, [r4, #0]
   da606:	b938      	cbnz	r0, da618 <__pow5mult+0x8c>
   da608:	4622      	mov	r2, r4
   da60a:	4621      	mov	r1, r4
   da60c:	4630      	mov	r0, r6
   da60e:	f7ff ff21 	bl	da454 <__multiply>
   da612:	6020      	str	r0, [r4, #0]
   da614:	f8c0 9000 	str.w	r9, [r0]
   da618:	4604      	mov	r4, r0
   da61a:	e7e4      	b.n	da5e6 <__pow5mult+0x5a>
   da61c:	4638      	mov	r0, r7
   da61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da622:	bf00      	nop
   da624:	000db6e0 	.word	0x000db6e0

000da628 <__lshift>:
   da628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da62c:	460c      	mov	r4, r1
   da62e:	6849      	ldr	r1, [r1, #4]
   da630:	6923      	ldr	r3, [r4, #16]
   da632:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da636:	68a3      	ldr	r3, [r4, #8]
   da638:	4607      	mov	r7, r0
   da63a:	4691      	mov	r9, r2
   da63c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da640:	f108 0601 	add.w	r6, r8, #1
   da644:	42b3      	cmp	r3, r6
   da646:	db3f      	blt.n	da6c8 <__lshift+0xa0>
   da648:	4638      	mov	r0, r7
   da64a:	f7ff fde3 	bl	da214 <_Balloc>
   da64e:	2300      	movs	r3, #0
   da650:	4605      	mov	r5, r0
   da652:	f100 0114 	add.w	r1, r0, #20
   da656:	f100 0210 	add.w	r2, r0, #16
   da65a:	4618      	mov	r0, r3
   da65c:	4553      	cmp	r3, sl
   da65e:	db36      	blt.n	da6ce <__lshift+0xa6>
   da660:	6920      	ldr	r0, [r4, #16]
   da662:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da666:	f104 0314 	add.w	r3, r4, #20
   da66a:	f019 091f 	ands.w	r9, r9, #31
   da66e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da672:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da676:	d02e      	beq.n	da6d6 <__lshift+0xae>
   da678:	f1c9 0e20 	rsb	lr, r9, #32
   da67c:	468a      	mov	sl, r1
   da67e:	2200      	movs	r2, #0
   da680:	6818      	ldr	r0, [r3, #0]
   da682:	fa00 f009 	lsl.w	r0, r0, r9
   da686:	4302      	orrs	r2, r0
   da688:	f84a 2b04 	str.w	r2, [sl], #4
   da68c:	f853 2b04 	ldr.w	r2, [r3], #4
   da690:	459c      	cmp	ip, r3
   da692:	fa22 f20e 	lsr.w	r2, r2, lr
   da696:	d8f3      	bhi.n	da680 <__lshift+0x58>
   da698:	ebac 0304 	sub.w	r3, ip, r4
   da69c:	3b15      	subs	r3, #21
   da69e:	f023 0303 	bic.w	r3, r3, #3
   da6a2:	3304      	adds	r3, #4
   da6a4:	f104 0015 	add.w	r0, r4, #21
   da6a8:	4560      	cmp	r0, ip
   da6aa:	bf88      	it	hi
   da6ac:	2304      	movhi	r3, #4
   da6ae:	50ca      	str	r2, [r1, r3]
   da6b0:	b10a      	cbz	r2, da6b6 <__lshift+0x8e>
   da6b2:	f108 0602 	add.w	r6, r8, #2
   da6b6:	3e01      	subs	r6, #1
   da6b8:	4638      	mov	r0, r7
   da6ba:	612e      	str	r6, [r5, #16]
   da6bc:	4621      	mov	r1, r4
   da6be:	f7ff fddd 	bl	da27c <_Bfree>
   da6c2:	4628      	mov	r0, r5
   da6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da6c8:	3101      	adds	r1, #1
   da6ca:	005b      	lsls	r3, r3, #1
   da6cc:	e7ba      	b.n	da644 <__lshift+0x1c>
   da6ce:	f842 0f04 	str.w	r0, [r2, #4]!
   da6d2:	3301      	adds	r3, #1
   da6d4:	e7c2      	b.n	da65c <__lshift+0x34>
   da6d6:	3904      	subs	r1, #4
   da6d8:	f853 2b04 	ldr.w	r2, [r3], #4
   da6dc:	f841 2f04 	str.w	r2, [r1, #4]!
   da6e0:	459c      	cmp	ip, r3
   da6e2:	d8f9      	bhi.n	da6d8 <__lshift+0xb0>
   da6e4:	e7e7      	b.n	da6b6 <__lshift+0x8e>

000da6e6 <__mcmp>:
   da6e6:	b530      	push	{r4, r5, lr}
   da6e8:	6902      	ldr	r2, [r0, #16]
   da6ea:	690c      	ldr	r4, [r1, #16]
   da6ec:	1b12      	subs	r2, r2, r4
   da6ee:	d10e      	bne.n	da70e <__mcmp+0x28>
   da6f0:	f100 0314 	add.w	r3, r0, #20
   da6f4:	3114      	adds	r1, #20
   da6f6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da6fa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da6fe:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da702:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da706:	42a5      	cmp	r5, r4
   da708:	d003      	beq.n	da712 <__mcmp+0x2c>
   da70a:	d305      	bcc.n	da718 <__mcmp+0x32>
   da70c:	2201      	movs	r2, #1
   da70e:	4610      	mov	r0, r2
   da710:	bd30      	pop	{r4, r5, pc}
   da712:	4283      	cmp	r3, r0
   da714:	d3f3      	bcc.n	da6fe <__mcmp+0x18>
   da716:	e7fa      	b.n	da70e <__mcmp+0x28>
   da718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da71c:	e7f7      	b.n	da70e <__mcmp+0x28>

000da71e <__mdiff>:
   da71e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da722:	460c      	mov	r4, r1
   da724:	4606      	mov	r6, r0
   da726:	4611      	mov	r1, r2
   da728:	4620      	mov	r0, r4
   da72a:	4617      	mov	r7, r2
   da72c:	f7ff ffdb 	bl	da6e6 <__mcmp>
   da730:	1e05      	subs	r5, r0, #0
   da732:	d108      	bne.n	da746 <__mdiff+0x28>
   da734:	4629      	mov	r1, r5
   da736:	4630      	mov	r0, r6
   da738:	f7ff fd6c 	bl	da214 <_Balloc>
   da73c:	2301      	movs	r3, #1
   da73e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da746:	bfa4      	itt	ge
   da748:	463b      	movge	r3, r7
   da74a:	4627      	movge	r7, r4
   da74c:	4630      	mov	r0, r6
   da74e:	6879      	ldr	r1, [r7, #4]
   da750:	bfa6      	itte	ge
   da752:	461c      	movge	r4, r3
   da754:	2500      	movge	r5, #0
   da756:	2501      	movlt	r5, #1
   da758:	f7ff fd5c 	bl	da214 <_Balloc>
   da75c:	693e      	ldr	r6, [r7, #16]
   da75e:	60c5      	str	r5, [r0, #12]
   da760:	6925      	ldr	r5, [r4, #16]
   da762:	f107 0114 	add.w	r1, r7, #20
   da766:	f104 0914 	add.w	r9, r4, #20
   da76a:	f100 0e14 	add.w	lr, r0, #20
   da76e:	f107 0210 	add.w	r2, r7, #16
   da772:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da776:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da77a:	46f2      	mov	sl, lr
   da77c:	2700      	movs	r7, #0
   da77e:	f859 3b04 	ldr.w	r3, [r9], #4
   da782:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da786:	fa1f f883 	uxth.w	r8, r3
   da78a:	fa17 f78b 	uxtah	r7, r7, fp
   da78e:	0c1b      	lsrs	r3, r3, #16
   da790:	eba7 0808 	sub.w	r8, r7, r8
   da794:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da798:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da79c:	fa1f f888 	uxth.w	r8, r8
   da7a0:	141f      	asrs	r7, r3, #16
   da7a2:	454d      	cmp	r5, r9
   da7a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da7a8:	f84a 3b04 	str.w	r3, [sl], #4
   da7ac:	d8e7      	bhi.n	da77e <__mdiff+0x60>
   da7ae:	1b2b      	subs	r3, r5, r4
   da7b0:	3b15      	subs	r3, #21
   da7b2:	f023 0303 	bic.w	r3, r3, #3
   da7b6:	3304      	adds	r3, #4
   da7b8:	3415      	adds	r4, #21
   da7ba:	42a5      	cmp	r5, r4
   da7bc:	bf38      	it	cc
   da7be:	2304      	movcc	r3, #4
   da7c0:	4419      	add	r1, r3
   da7c2:	4473      	add	r3, lr
   da7c4:	469e      	mov	lr, r3
   da7c6:	460d      	mov	r5, r1
   da7c8:	4565      	cmp	r5, ip
   da7ca:	d30e      	bcc.n	da7ea <__mdiff+0xcc>
   da7cc:	f10c 0203 	add.w	r2, ip, #3
   da7d0:	1a52      	subs	r2, r2, r1
   da7d2:	f022 0203 	bic.w	r2, r2, #3
   da7d6:	3903      	subs	r1, #3
   da7d8:	458c      	cmp	ip, r1
   da7da:	bf38      	it	cc
   da7dc:	2200      	movcc	r2, #0
   da7de:	441a      	add	r2, r3
   da7e0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da7e4:	b17b      	cbz	r3, da806 <__mdiff+0xe8>
   da7e6:	6106      	str	r6, [r0, #16]
   da7e8:	e7ab      	b.n	da742 <__mdiff+0x24>
   da7ea:	f855 8b04 	ldr.w	r8, [r5], #4
   da7ee:	fa17 f488 	uxtah	r4, r7, r8
   da7f2:	1422      	asrs	r2, r4, #16
   da7f4:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da7f8:	b2a4      	uxth	r4, r4
   da7fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da7fe:	f84e 4b04 	str.w	r4, [lr], #4
   da802:	1417      	asrs	r7, r2, #16
   da804:	e7e0      	b.n	da7c8 <__mdiff+0xaa>
   da806:	3e01      	subs	r6, #1
   da808:	e7ea      	b.n	da7e0 <__mdiff+0xc2>
	...

000da80c <__ulp>:
   da80c:	b082      	sub	sp, #8
   da80e:	ed8d 0b00 	vstr	d0, [sp]
   da812:	9b01      	ldr	r3, [sp, #4]
   da814:	4912      	ldr	r1, [pc, #72]	; (da860 <__ulp+0x54>)
   da816:	4019      	ands	r1, r3
   da818:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da81c:	2900      	cmp	r1, #0
   da81e:	dd05      	ble.n	da82c <__ulp+0x20>
   da820:	2200      	movs	r2, #0
   da822:	460b      	mov	r3, r1
   da824:	ec43 2b10 	vmov	d0, r2, r3
   da828:	b002      	add	sp, #8
   da82a:	4770      	bx	lr
   da82c:	4249      	negs	r1, r1
   da82e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da832:	ea4f 5021 	mov.w	r0, r1, asr #20
   da836:	f04f 0200 	mov.w	r2, #0
   da83a:	f04f 0300 	mov.w	r3, #0
   da83e:	da04      	bge.n	da84a <__ulp+0x3e>
   da840:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da844:	fa41 f300 	asr.w	r3, r1, r0
   da848:	e7ec      	b.n	da824 <__ulp+0x18>
   da84a:	f1a0 0114 	sub.w	r1, r0, #20
   da84e:	291e      	cmp	r1, #30
   da850:	bfda      	itte	le
   da852:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da856:	fa20 f101 	lsrle.w	r1, r0, r1
   da85a:	2101      	movgt	r1, #1
   da85c:	460a      	mov	r2, r1
   da85e:	e7e1      	b.n	da824 <__ulp+0x18>
   da860:	7ff00000 	.word	0x7ff00000

000da864 <__b2d>:
   da864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da866:	6905      	ldr	r5, [r0, #16]
   da868:	f100 0714 	add.w	r7, r0, #20
   da86c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da870:	1f2e      	subs	r6, r5, #4
   da872:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da876:	4620      	mov	r0, r4
   da878:	f7ff fd93 	bl	da3a2 <__hi0bits>
   da87c:	f1c0 0320 	rsb	r3, r0, #32
   da880:	280a      	cmp	r0, #10
   da882:	f8df c07c 	ldr.w	ip, [pc, #124]	; da900 <__b2d+0x9c>
   da886:	600b      	str	r3, [r1, #0]
   da888:	dc14      	bgt.n	da8b4 <__b2d+0x50>
   da88a:	f1c0 0e0b 	rsb	lr, r0, #11
   da88e:	fa24 f10e 	lsr.w	r1, r4, lr
   da892:	42b7      	cmp	r7, r6
   da894:	ea41 030c 	orr.w	r3, r1, ip
   da898:	bf34      	ite	cc
   da89a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da89e:	2100      	movcs	r1, #0
   da8a0:	3015      	adds	r0, #21
   da8a2:	fa04 f000 	lsl.w	r0, r4, r0
   da8a6:	fa21 f10e 	lsr.w	r1, r1, lr
   da8aa:	ea40 0201 	orr.w	r2, r0, r1
   da8ae:	ec43 2b10 	vmov	d0, r2, r3
   da8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da8b4:	42b7      	cmp	r7, r6
   da8b6:	bf3a      	itte	cc
   da8b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da8bc:	f1a5 0608 	subcc.w	r6, r5, #8
   da8c0:	2100      	movcs	r1, #0
   da8c2:	380b      	subs	r0, #11
   da8c4:	d017      	beq.n	da8f6 <__b2d+0x92>
   da8c6:	f1c0 0c20 	rsb	ip, r0, #32
   da8ca:	fa04 f500 	lsl.w	r5, r4, r0
   da8ce:	42be      	cmp	r6, r7
   da8d0:	fa21 f40c 	lsr.w	r4, r1, ip
   da8d4:	ea45 0504 	orr.w	r5, r5, r4
   da8d8:	bf8c      	ite	hi
   da8da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da8de:	2400      	movls	r4, #0
   da8e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da8e4:	fa01 f000 	lsl.w	r0, r1, r0
   da8e8:	fa24 f40c 	lsr.w	r4, r4, ip
   da8ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da8f0:	ea40 0204 	orr.w	r2, r0, r4
   da8f4:	e7db      	b.n	da8ae <__b2d+0x4a>
   da8f6:	ea44 030c 	orr.w	r3, r4, ip
   da8fa:	460a      	mov	r2, r1
   da8fc:	e7d7      	b.n	da8ae <__b2d+0x4a>
   da8fe:	bf00      	nop
   da900:	3ff00000 	.word	0x3ff00000

000da904 <__d2b>:
   da904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da908:	4689      	mov	r9, r1
   da90a:	2101      	movs	r1, #1
   da90c:	ec57 6b10 	vmov	r6, r7, d0
   da910:	4690      	mov	r8, r2
   da912:	f7ff fc7f 	bl	da214 <_Balloc>
   da916:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da91a:	4604      	mov	r4, r0
   da91c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da920:	bb35      	cbnz	r5, da970 <__d2b+0x6c>
   da922:	2e00      	cmp	r6, #0
   da924:	9301      	str	r3, [sp, #4]
   da926:	d028      	beq.n	da97a <__d2b+0x76>
   da928:	4668      	mov	r0, sp
   da92a:	9600      	str	r6, [sp, #0]
   da92c:	f7ff fd59 	bl	da3e2 <__lo0bits>
   da930:	9900      	ldr	r1, [sp, #0]
   da932:	b300      	cbz	r0, da976 <__d2b+0x72>
   da934:	9a01      	ldr	r2, [sp, #4]
   da936:	f1c0 0320 	rsb	r3, r0, #32
   da93a:	fa02 f303 	lsl.w	r3, r2, r3
   da93e:	430b      	orrs	r3, r1
   da940:	40c2      	lsrs	r2, r0
   da942:	6163      	str	r3, [r4, #20]
   da944:	9201      	str	r2, [sp, #4]
   da946:	9b01      	ldr	r3, [sp, #4]
   da948:	61a3      	str	r3, [r4, #24]
   da94a:	2b00      	cmp	r3, #0
   da94c:	bf14      	ite	ne
   da94e:	2202      	movne	r2, #2
   da950:	2201      	moveq	r2, #1
   da952:	6122      	str	r2, [r4, #16]
   da954:	b1d5      	cbz	r5, da98c <__d2b+0x88>
   da956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   da95a:	4405      	add	r5, r0
   da95c:	f8c9 5000 	str.w	r5, [r9]
   da960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da964:	f8c8 0000 	str.w	r0, [r8]
   da968:	4620      	mov	r0, r4
   da96a:	b003      	add	sp, #12
   da96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da974:	e7d5      	b.n	da922 <__d2b+0x1e>
   da976:	6161      	str	r1, [r4, #20]
   da978:	e7e5      	b.n	da946 <__d2b+0x42>
   da97a:	a801      	add	r0, sp, #4
   da97c:	f7ff fd31 	bl	da3e2 <__lo0bits>
   da980:	9b01      	ldr	r3, [sp, #4]
   da982:	6163      	str	r3, [r4, #20]
   da984:	2201      	movs	r2, #1
   da986:	6122      	str	r2, [r4, #16]
   da988:	3020      	adds	r0, #32
   da98a:	e7e3      	b.n	da954 <__d2b+0x50>
   da98c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   da990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da994:	f8c9 0000 	str.w	r0, [r9]
   da998:	6918      	ldr	r0, [r3, #16]
   da99a:	f7ff fd02 	bl	da3a2 <__hi0bits>
   da99e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   da9a2:	e7df      	b.n	da964 <__d2b+0x60>

000da9a4 <__ratio>:
   da9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da9a8:	4688      	mov	r8, r1
   da9aa:	4669      	mov	r1, sp
   da9ac:	4681      	mov	r9, r0
   da9ae:	f7ff ff59 	bl	da864 <__b2d>
   da9b2:	a901      	add	r1, sp, #4
   da9b4:	4640      	mov	r0, r8
   da9b6:	ec55 4b10 	vmov	r4, r5, d0
   da9ba:	f7ff ff53 	bl	da864 <__b2d>
   da9be:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da9c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da9c6:	eba3 0c02 	sub.w	ip, r3, r2
   da9ca:	e9dd 3200 	ldrd	r3, r2, [sp]
   da9ce:	1a9b      	subs	r3, r3, r2
   da9d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   da9d4:	ec51 0b10 	vmov	r0, r1, d0
   da9d8:	2b00      	cmp	r3, #0
   da9da:	bfd6      	itet	le
   da9dc:	460a      	movle	r2, r1
   da9de:	462a      	movgt	r2, r5
   da9e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   da9e4:	468b      	mov	fp, r1
   da9e6:	462f      	mov	r7, r5
   da9e8:	bfd4      	ite	le
   da9ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   da9ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   da9f2:	4620      	mov	r0, r4
   da9f4:	ee10 2a10 	vmov	r2, s0
   da9f8:	465b      	mov	r3, fp
   da9fa:	4639      	mov	r1, r7
   da9fc:	f7fd fee6 	bl	d87cc <__aeabi_ddiv>
   daa00:	ec41 0b10 	vmov	d0, r0, r1
   daa04:	b003      	add	sp, #12
   daa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daa0a <__copybits>:
   daa0a:	3901      	subs	r1, #1
   daa0c:	b570      	push	{r4, r5, r6, lr}
   daa0e:	1149      	asrs	r1, r1, #5
   daa10:	6914      	ldr	r4, [r2, #16]
   daa12:	3101      	adds	r1, #1
   daa14:	f102 0314 	add.w	r3, r2, #20
   daa18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   daa1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   daa20:	1f05      	subs	r5, r0, #4
   daa22:	42a3      	cmp	r3, r4
   daa24:	d30c      	bcc.n	daa40 <__copybits+0x36>
   daa26:	1aa3      	subs	r3, r4, r2
   daa28:	3b11      	subs	r3, #17
   daa2a:	f023 0303 	bic.w	r3, r3, #3
   daa2e:	3211      	adds	r2, #17
   daa30:	42a2      	cmp	r2, r4
   daa32:	bf88      	it	hi
   daa34:	2300      	movhi	r3, #0
   daa36:	4418      	add	r0, r3
   daa38:	2300      	movs	r3, #0
   daa3a:	4288      	cmp	r0, r1
   daa3c:	d305      	bcc.n	daa4a <__copybits+0x40>
   daa3e:	bd70      	pop	{r4, r5, r6, pc}
   daa40:	f853 6b04 	ldr.w	r6, [r3], #4
   daa44:	f845 6f04 	str.w	r6, [r5, #4]!
   daa48:	e7eb      	b.n	daa22 <__copybits+0x18>
   daa4a:	f840 3b04 	str.w	r3, [r0], #4
   daa4e:	e7f4      	b.n	daa3a <__copybits+0x30>

000daa50 <__any_on>:
   daa50:	f100 0214 	add.w	r2, r0, #20
   daa54:	6900      	ldr	r0, [r0, #16]
   daa56:	114b      	asrs	r3, r1, #5
   daa58:	4298      	cmp	r0, r3
   daa5a:	b510      	push	{r4, lr}
   daa5c:	db11      	blt.n	daa82 <__any_on+0x32>
   daa5e:	dd0a      	ble.n	daa76 <__any_on+0x26>
   daa60:	f011 011f 	ands.w	r1, r1, #31
   daa64:	d007      	beq.n	daa76 <__any_on+0x26>
   daa66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   daa6a:	fa24 f001 	lsr.w	r0, r4, r1
   daa6e:	fa00 f101 	lsl.w	r1, r0, r1
   daa72:	428c      	cmp	r4, r1
   daa74:	d10b      	bne.n	daa8e <__any_on+0x3e>
   daa76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   daa7a:	4293      	cmp	r3, r2
   daa7c:	d803      	bhi.n	daa86 <__any_on+0x36>
   daa7e:	2000      	movs	r0, #0
   daa80:	bd10      	pop	{r4, pc}
   daa82:	4603      	mov	r3, r0
   daa84:	e7f7      	b.n	daa76 <__any_on+0x26>
   daa86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   daa8a:	2900      	cmp	r1, #0
   daa8c:	d0f5      	beq.n	daa7a <__any_on+0x2a>
   daa8e:	2001      	movs	r0, #1
   daa90:	e7f6      	b.n	daa80 <__any_on+0x30>

000daa92 <_calloc_r>:
   daa92:	b513      	push	{r0, r1, r4, lr}
   daa94:	434a      	muls	r2, r1
   daa96:	4611      	mov	r1, r2
   daa98:	9201      	str	r2, [sp, #4]
   daa9a:	f7fc f89b 	bl	d6bd4 <_malloc_r>
   daa9e:	4604      	mov	r4, r0
   daaa0:	b118      	cbz	r0, daaaa <_calloc_r+0x18>
   daaa2:	9a01      	ldr	r2, [sp, #4]
   daaa4:	2100      	movs	r1, #0
   daaa6:	f7fe f905 	bl	d8cb4 <memset>
   daaaa:	4620      	mov	r0, r4
   daaac:	b002      	add	sp, #8
   daaae:	bd10      	pop	{r4, pc}

000daab0 <nan>:
   daab0:	ed9f 0b01 	vldr	d0, [pc, #4]	; daab8 <nan+0x8>
   daab4:	4770      	bx	lr
   daab6:	bf00      	nop
   daab8:	00000000 	.word	0x00000000
   daabc:	7ff80000 	.word	0x7ff80000

000daac0 <__ascii_wctomb>:
   daac0:	b149      	cbz	r1, daad6 <__ascii_wctomb+0x16>
   daac2:	2aff      	cmp	r2, #255	; 0xff
   daac4:	bf85      	ittet	hi
   daac6:	238a      	movhi	r3, #138	; 0x8a
   daac8:	6003      	strhi	r3, [r0, #0]
   daaca:	700a      	strbls	r2, [r1, #0]
   daacc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   daad0:	bf98      	it	ls
   daad2:	2001      	movls	r0, #1
   daad4:	4770      	bx	lr
   daad6:	4608      	mov	r0, r1
   daad8:	4770      	bx	lr
	...

000daadc <__aeabi_d2lz>:
   daadc:	b538      	push	{r3, r4, r5, lr}
   daade:	2200      	movs	r2, #0
   daae0:	2300      	movs	r3, #0
   daae2:	4604      	mov	r4, r0
   daae4:	460d      	mov	r5, r1
   daae6:	f7fd ffb9 	bl	d8a5c <__aeabi_dcmplt>
   daaea:	b928      	cbnz	r0, daaf8 <__aeabi_d2lz+0x1c>
   daaec:	4620      	mov	r0, r4
   daaee:	4629      	mov	r1, r5
   daaf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daaf4:	f7fe b84a 	b.w	d8b8c <__aeabi_d2ulz>
   daaf8:	4620      	mov	r0, r4
   daafa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   daafe:	f7fe f845 	bl	d8b8c <__aeabi_d2ulz>
   dab02:	4240      	negs	r0, r0
   dab04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dab08:	bd38      	pop	{r3, r4, r5, pc}
   dab0a:	bf00      	nop

000dab0c <dynalib_user>:
   dab0c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dab1c:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dab2c:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dab3c:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dab4c:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dab5c:	2a00 4e00 206f 6144 6174 5500 6962 6f64     .*.No Data.Ubido
   dab6c:	7374 4820 6f6f 006b 6552 7073 6e6f 6573     ts Hook.Response
   dab7c:	5220 6365 6965 6576 0064 7453 7461 0065      Received.State.
   dab8c:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dab9c:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   dabac:	6573 4d20 646f 0065 6553 2074 6f74 3320     se Mode.Set to 3
   dabbc:	6472 5020 7261 7974 5320 6d69 5300 7465     rd Party Sim.Set
   dabcc:	7420 206f 6150 7472 6369 656c 5320 6d69      to Particle Sim
   dabdc:	4b00 6565 2070 6c41 7669 2065 6573 2074     .Keep Alive set 
   dabec:	6f74 2520 2069 6573 0063 654b 7065 4120     to %i sec.Keep A
   dabfc:	696c 6576 4c00 616f 6964 676e 5320 7379     live.Loading Sys
   dac0c:	6574 206d 6544 6166 6c75 7374 4c00 616f     tem Defaults.Loa
   dac1c:	6964 676e 4120 656c 7472 4420 6665 7561     ding Alert Defau
   dac2c:	746c 0073 227b 6554 706d 7265 7461 7275     lts.{"Temperatur
   dac3c:	2265 253a 2e34 6631 202c 4822 6d75 6469     e":%4.1f, "Humid
   dac4c:	7469 2279 253a 2e34 6631 222c 6142 7474     ity":%4.1f,"Batt
   dac5c:	7265 2279 253a 7d69 7300 6f74 6172 6567     ery":%i}.storage
   dac6c:	662d 6361 6c69 7469 2d79 6f68 6b6f 4600     -facility-hook.F
   dac7c:	6f72 206d 7325 7420 206f 7325 5300 6174     rom %s to %s.Sta
   dac8c:	6574 5420 6172 736e 7469 6f69 006e 6554     te Transition.Te
   dac9c:	706d 4d5f 7861 3a20 2520 2e33 6631 5400     mp_Max : %3.1f.T
   dacac:	6d65 5f70 694d 206e 203a 3325 312e 0066     emp_Min : %3.1f.
   dacbc:	7548 696d 6964 7974 4d5f 7861 203a 3325     Humidity_Max: %3
   daccc:	312e 0066 7548 696d 6964 7974 4d5f 6e69     .1f.Humidity_Min
   dacdc:	3a20 2520 2e33 6631 5500 7070 7265 5420      : %3.1f.Upper T
   dacec:	6d65 6570 6172 7574 6572 5420 7268 7365     emperature Thres
   dacfc:	6f68 646c 5320 7465 4c00 776f 7265 5420     hold Set.Lower T
   dad0c:	6d65 6570 6172 7574 6572 5420 7268 7365     emperature Thres
   dad1c:	6f68 646c 5320 7465 5500 7070 7265 4820     hold Set.Upper H
   dad2c:	6d75 6469 7469 2079 6854 6572 6873 6c6f     umidity Threshol
   dad3c:	2064 6553 0074 6f4c 6577 2072 7548 696d     d Set.Lower Humi
   dad4c:	6964 7974 5420 7268 7365 6f68 646c 5320     dity Threshold S
   dad5c:	7465 2500 2e34 6631 432a 2500 2e34 6631     et.%4.1f*C.%4.1f
   dad6c:	2525 2500 2069 2525 4c00 776f 5420 6d65     %%.%i %%.Low Tem
   dad7c:	2070 6c41 7265 2074 3425 322e 2066 203c     p Alert %4.2f < 
   dad8c:	3425 322e 0066 6948 6867 5420 6d65 2070     %4.2f.High Temp 
   dad9c:	6c41 7265 2074 3425 322e 2066 203e 3425     Alert %4.2f > %4
   dadac:	322e 0066 6f4c 2077 7548 696d 6964 7974     .2f.Low Humidity
   dadbc:	4120 656c 7472 2520 2e34 6632 3c20 2520      Alert %4.2f < %
   dadcc:	2e34 6632 4800 6769 2068 7548 696d 6964     4.2f.High Humidi
   daddc:	7974 4120 656c 7472 2520 2e34 6632 3c20     ty Alert %4.2f <
   dadec:	2520 2e34 6632 4100 656c 7472 0073 7073      %4.2f.Alerts.sp
   dadfc:	7261 2f6b 6564 6976 6563 732f 7365 6973     ark/device/sessi
   dae0c:	6e6f 652f 646e 4500 7272 726f 5320 6174     on/end.Error Sta
   dae1c:	6574 2d20 5220 7365 7465 5200 6c65 6165     te - Reset.Relea
   dae2c:	6573 7400 6d65 6570 6172 7574 6572 6800     se.temperature.h
   dae3c:	6d75 6469 7469 0079 6574 706d 7265 7461     umidity.temperat
   dae4c:	7275 2d65 7055 6570 0072 6574 706d 7265     ure-Upper.temper
   dae5c:	7461 7275 2d65 6f6c 6577 0072 7568 696d     ature-lower.humi
   dae6c:	6964 7974 752d 7070 7265 6800 6d75 6469     dity-upper.humid
   dae7c:	7469 2d79 6f6c 6577 0072 6142 7474 7265     ity-lower.Batter
   dae8c:	0079 6142 7474 7265 4379 6e6f 6574 7478     y.BatteryContext
   dae9c:	4b00 6565 2070 6c41 7669 2065 6553 0063     .Keep Alive Sec.
   daeac:	654d 7361 7275 2d65 6f4e 0077 6556 6272     Measure-Now.Verb
   daebc:	736f 2d65 6f4d 6564 5400 6d65 2d70 7055     ose-Mode.Temp-Up
   daecc:	6570 2d72 694c 696d 0074 6554 706d 4c2d     per-Limit.Temp-L
   daedc:	776f 7265 4c2d 6d69 7469 4800 6d75 6469     ower-Limit.Humid
   daeec:	7469 2d79 6f4c 6577 2d72 694c 696d 0074     ity-Lower-Limit.
   daefc:	7548 696d 7464 2d79 7075 6570 2d72 694c     Humidty-upper-Li
   daf0c:	696d 0074 6954 656d 4500 7272 726f 2d20     mit.Time.Error -
   daf1c:	5320 5448 3133 4920 696e 6974 6c61 7a69      SHT31 Initializ
   daf2c:	7461 6f69 006e 7453 7261 7574 0070 0000     ation.Startup...

000daf3c <_ZTV5Timer>:
	...
   daf44:	4221 000d 4275 000d 410d 000d               !B..uB...A..

000daf50 <_ZTV17PublishQueueAsync>:
	...
   daf58:	4119 000d 412d 000d 5819 000d 59a5 000d     .A..-A...X...Y..
   daf68:	5965 000d 5943 000d 5aeb 000d 598b 000d     eY..CY...Z...Y..

000daf78 <_ZTV8MB85RC64>:
	...
   daf80:	4141 000d 4155 000d 55e9 000d 567f 000d     AA..UA...U...V..
   daf90:	5701 000d ab20 000d ab28 000d ab2c 000d     .W.. ...(...,...
   dafa0:	ab35 000d ab3d 000d ab49 000d ab4f 000d     5...=...I...O...
   dafb0:	6c41 206c 6977 6874 6e69 7420 7268 7365     All within thres
   dafc0:	6f68 646c 0073 0000 0000 0000 0000 0000     holds...........
	...
   daff0:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   db000:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000db030 <_ZL13releaseNumber>:
   db030:	3531 302e 0030 0000                         15.00...

000db038 <_ZL17FRAMversionNumber>:
   db038:	0005 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   db048:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   db058:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000db068 <_ZTV6MB85RC>:
	...
   db070:	5509 000d 550b 000d 55e9 000d 567f 000d     .U...U...U...V..
   db080:	5701 000d 7550 6c62 7369 5168 6575 6575     .W..PublishQueue
   db090:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   db0a0:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   db0b0:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   db0c0:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   db0d0:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   db0e0:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   db0f0:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   db100:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   db110:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   db120:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   db130:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000db140 <_ZTV21PublishQueueAsyncBase>:
	...
   db150:	5819 000d 40a5 000d 40a5 000d 40a5 000d     .X...@...@...@..
   db160:	40a5 000d 40a5 000d                         .@...@..

000db168 <_ZTV25PublishQueueAsyncRetained>:
	...
   db170:	5901 000d 5915 000d 5819 000d 59a5 000d     .Y...Y...X...Y..
   db180:	5965 000d 5943 000d 5aeb 000d 598b 000d     eY..CY...Z...Y..
   db190:	6564 6976 6563 6552 6461 6620 6961 656c     deviceRead faile
   db1a0:	2064 7473 7461 253d 0064 6573 2074 6954     d stat=%d.set Ti
   db1b0:	656d 6620 6f72 206d 5452 2043 7325 6400     me from RTC %s.d
   db1c0:	7665 6369 5765 6972 6574 6620 6961 656c     eviceWrite faile
   db1d0:	2064 7473 7461 253d 0064 6573 2074 5452     d stat=%d.set RT
   db1e0:	2043 7266 6d6f 6320 6f6c 6475 2520 0073     C from cloud %s.
   db1f0:	6c63 756f 2064 6974 656d 6e20 746f 7620     cloud time not v
   db200:	6c61 6469 6400 7665 6369 5765 6972 6574     alid.deviceWrite
   db210:	4545 5250 4d4f 6620 6961 656c 2064 7473     EEPROM failed st
   db220:	7461 253d 0064 7061 2e70 7472 0063 0000     at=%d.app.rtc...

000db230 <_ZTV12MCP79410SRAM>:
	...
   db238:	5d9d 000d 5db3 000d 5d8d 000d 5d91 000d     .]...]...]...]..
   db248:	5ddd 000d 60c5 000d 62e5 000d               .]...`...b..

000db254 <_ZTV12MCP79410Time>:
	...
   db25c:	5da1 000d 5da5 000d                         .]...]..

000db264 <_ZTV14MCP79410EEPROM>:
	...
   db26c:	5d9f 000d 5dc1 000d 5d95 000d 5d99 000d     .]...]...]...]..
   db27c:	5ddd 000d 60ff 000d 6525 000d               .]...`..%e..

000db288 <_ZTV8MCP79410>:
	...
   db290:	5da3 000d 5dcf 000d                         .]...]..

000db298 <_ZTVN5spark13CellularClassE>:
	...
   db2a0:	6d3f 000d 6d35 000d 6d2b 000d 6ce1 000d     ?m..5m..+m...l..
   db2b0:	6d1f 000d 6d13 000d 6d07 000d 6cff 000d     .m...m...m...l..
   db2c0:	6cf5 000d 6ceb 000d 7675 000d               .l...l..uv..

000db2cc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db2d4:	6d79 000d 6d7f 000d 6dbd 000d 6d8d 000d     ym...m...m...m..
   db2e4:	6d7b 000d                                   {m..

000db2e8 <_ZTVN5spark13EthernetClassE>:
	...
   db2f0:	7383 000d 7379 000d 736f 000d 7365 000d     .s..ys..os..es..
   db300:	7359 000d 734d 000d 7341 000d 7339 000d     Ys..Ms..As..9s..
   db310:	732f 000d 7325 000d 7675 000d               /s..%s..uv..

000db31c <_ZTV7TwoWire>:
	...
   db324:	73a1 000d 73eb 000d 73c3 000d 73a3 000d     .s...s...s...s..
   db334:	73cb 000d 73d3 000d 73db 000d 73e3 000d     .s...s...s...s..

000db344 <_ZTV9IPAddress>:
	...
   db34c:	7529 000d 7519 000d 751b 000d 7061 0070     )u...u...u..app.

000db35c <_ZTVN5spark12NetworkClassE>:
	...
   db364:	760d 000d 7617 000d 7621 000d 762b 000d     .v...v..!v..+v..
   db374:	7635 000d 7641 000d 764d 000d 7659 000d     5v..Av..Mv..Yv..
   db384:	7661 000d 766b 000d 7675 000d 005a 2b25     av..kv..uv..Z.%+
   db394:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   db3a4:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   db3b4:	6974 656d 0000 0000                         time....

000db3bc <_ZTV11USARTSerial>:
	...
   db3c4:	7d15 000d 7d81 000d 7d59 000d 775d 000d     .}...}..Y}..]w..
   db3d4:	7d29 000d 7d45 000d 7d37 000d 7d53 000d     )}..E}..7}..S}..
   db3e4:	7d17 000d 7d1b 000d                         .}...}..

000db3ec <_ZTV9USBSerial>:
	...
   db3f4:	7e15 000d 7e7d 000d 7e53 000d 775d 000d     .~..}~..S~..]w..
   db404:	7e45 000d 7e17 000d 7e27 000d 7e77 000d     E~...~..'~..w~..
   db414:	7e37 000d 7e11 000d                         7~...~..

000db41c <_ZSt7nothrow>:
   db41c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   db42c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000db43d <day_name.6145>:
   db43d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db44d:	6972 6153                                    riSat

000db452 <mon_name.6146>:
   db452:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db462:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db472:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000db484 <fpi.7566>:
   db484:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db494:	0000 0000                                   ....

000db498 <fpinan.7602>:
   db498:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000db4b0 <tinytens>:
   db4b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db4c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db4d0:	6f43 64ac 0628 1168                         Co.d(.h.

000db4d8 <_ctype_>:
   db4d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db4e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db4f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db508:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db518:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db528:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db538:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db548:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db558:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   db5d8:	2e00 0000                                   ....

000db5dc <_C_numeric_locale>:
   db5dc:	b5d9 000d b43c 000d e2b8 2003 4f50 4953     ....<...... POSI
   db5ec:	0058 0000                                   X...

000db5f0 <__mprec_bigtens>:
   db5f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db600:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db610:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db618 <__mprec_tens>:
   db618:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db628:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db638:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db648:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db658:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db668:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db678:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db688:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db698:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db6a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db6b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db6c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db6d8:	9db4 79d9 7843 44ea                         ...yCx.D

000db6e0 <p05.7490>:
   db6e0:	0005 0000 0019 0000 007d 0000               ........}...

000db6ec <link_const_variable_data_end>:
   db6ec:	000d51d9 	.word	0x000d51d9
   db6f0:	000d5d7d 	.word	0x000d5d7d
   db6f4:	000d6555 	.word	0x000d6555
   db6f8:	000d6cb9 	.word	0x000d6cb9
   db6fc:	000d6d49 	.word	0x000d6d49
   db700:	000d738d 	.word	0x000d738d
   db704:	000d75fd 	.word	0x000d75fd
   db708:	000d7749 	.word	0x000d7749
   db70c:	000d77fd 	.word	0x000d77fd
   db710:	000d79c1 	.word	0x000d79c1
   db714:	000d7d01 	.word	0x000d7d01

000db718 <link_constructors_end>:
	...
