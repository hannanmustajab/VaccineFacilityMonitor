
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/VaccineFacilityMonitor/VaccineFacilityMonitor/target/1.5.0/photon/VaccineFacilityMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000077c0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a77e0  080a77e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a77e8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000258  20000000  080a77ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000728  20000258  20000258  00040258  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a7a44  080a7a44  00037a44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a7a6c  080a7a6c  00037a6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000c304f  00000000  00000000  00037a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00011405  00000000  00000000  000faabf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016718  00000000  00000000  0010bec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002270  00000000  00000000  001225dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000038a0  00000000  00000000  0012484c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00027302  00000000  00000000  001280ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00028af5  00000000  00000000  0014f3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000abc5a  00000000  00000000  00177ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cb40  00000000  00000000  00223b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fd45 	bl	80a4ac0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fd4a 	bl	80a4ad6 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a77ec 	.word	0x080a77ec
 80a0050:	20000258 	.word	0x20000258
 80a0054:	20000258 	.word	0x20000258
 80a0058:	20000980 	.word	0x20000980
 80a005c:	20000980 	.word	0x20000980

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 f975 	bl	80a3350 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a77a4 	.word	0x080a77a4
 80a0088:	080a77d8 	.word	0x080a77d8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f001 b98c 	b.w	80a13a8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 ffe5 	bl	80a1060 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f003 b91b 	b.w	80a32d4 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bf9f 	b.w	80a1fe0 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bfa5 	b.w	80a1ff0 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80a00b6:	b148      	cbz	r0, 80a00cc <null_ptr_check+0x16>
 80a00b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80a00ba:	b13b      	cbz	r3, 80a00cc <null_ptr_check+0x16>
 80a00bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80a00be:	b12b      	cbz	r3, 80a00cc <null_ptr_check+0x16>
 80a00c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4240      	negs	r0, r0
 80a00ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80a00cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80a00d0:	4770      	bx	lr

080a00d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80a00d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a00d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80a00d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80a00d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80a00da:	f7ff ffec 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a00de:	4605      	mov	r5, r0
 80a00e0:	bb50      	cbnz	r0, 80a0138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80a00e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80a00e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80a00e8:	bf14      	ite	ne
 80a00ea:	2300      	movne	r3, #0
 80a00ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80a00ee:	429a      	cmp	r2, r3
 80a00f0:	d022      	beq.n	80a0138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80a00f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80a00f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80a00f6:	2301      	movs	r3, #1
 80a00f8:	f10d 0207 	add.w	r2, sp, #7
 80a00fc:	21f3      	movs	r1, #243	; 0xf3
 80a00fe:	7860      	ldrb	r0, [r4, #1]
 80a0100:	47b0      	blx	r6
 80a0102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 80a0106:	b110      	cbz	r0, 80a010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 80a0108:	f06f 0501 	mvn.w	r5, #1
 80a010c:	e014      	b.n	80a0138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80a010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80a0110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80a0112:	f003 0210 	and.w	r2, r3, #16
 80a0116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80a011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80a011c:	f023 0310 	bic.w	r3, r3, #16
 80a0120:	4313      	orrs	r3, r2
 80a0122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80a0126:	f10d 0207 	add.w	r2, sp, #7
 80a012a:	2301      	movs	r3, #1
 80a012c:	7860      	ldrb	r0, [r4, #1]
 80a012e:	47b0      	blx	r6
 80a0130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80a0134:	2800      	cmp	r0, #0
 80a0136:	d1e7      	bne.n	80a0108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 80a0138:	4628      	mov	r0, r5
 80a013a:	b002      	add	sp, #8
 80a013c:	bd70      	pop	{r4, r5, r6, pc}

080a013e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80a013e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0142:	f7ff ffb8 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a0146:	4605      	mov	r5, r0
 80a0148:	b988      	cbnz	r0, 80a016e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80a014a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80a014c:	2301      	movs	r3, #1
 80a014e:	f10d 0207 	add.w	r2, sp, #7
 80a0152:	21f3      	movs	r1, #243	; 0xf3
 80a0154:	7860      	ldrb	r0, [r4, #1]
 80a0156:	47b0      	blx	r6
 80a0158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 80a015c:	b928      	cbnz	r0, 80a016a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 80a015e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0162:	f003 0310 	and.w	r3, r3, #16
 80a0166:	70e3      	strb	r3, [r4, #3]
 80a0168:	e001      	b.n	80a016e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80a016a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 80a016e:	4628      	mov	r0, r5
 80a0170:	b002      	add	sp, #8
 80a0172:	bd70      	pop	{r4, r5, r6, pc}

080a0174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 80a0174:	b140      	cbz	r0, 80a0188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 80a0176:	7803      	ldrb	r3, [r0, #0]
 80a0178:	428b      	cmp	r3, r1
 80a017a:	d908      	bls.n	80a018e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 80a017c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80a017e:	7813      	ldrb	r3, [r2, #0]
 80a0180:	f043 0302 	orr.w	r3, r3, #2
 80a0184:	7013      	strb	r3, [r2, #0]
 80a0186:	e002      	b.n	80a018e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 80a0188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a018c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 80a018e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 80a0190:	4770      	bx	lr

080a0192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 80a0192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 80a019a:	4688      	mov	r8, r1
 80a019c:	4691      	mov	r9, r2
 80a019e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a01a0:	f7ff ff89 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a01a4:	4604      	mov	r4, r0
 80a01a6:	b9a8      	cbnz	r0, 80a01d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80a01a8:	78ab      	ldrb	r3, [r5, #2]
 80a01aa:	b93b      	cbnz	r3, 80a01bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80a01ac:	4629      	mov	r1, r5
 80a01ae:	4630      	mov	r0, r6
 80a01b0:	f7ff ff8f 	bl	80a00d2 <set_mem_page>
			if (rslt == BME680_OK)
 80a01b4:	4604      	mov	r4, r0
 80a01b6:	b908      	cbnz	r0, 80a01bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80a01b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80a01bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80a01be:	464b      	mov	r3, r9
 80a01c0:	4642      	mov	r2, r8
 80a01c2:	4631      	mov	r1, r6
 80a01c4:	7868      	ldrb	r0, [r5, #1]
 80a01c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80a01c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80a01ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80a01ce:	bf18      	it	ne
 80a01d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80a01d4:	4620      	mov	r0, r4
 80a01d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a01da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80a01da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a01de:	461e      	mov	r6, r3
 80a01e0:	b08b      	sub	sp, #44	; 0x2c
 80a01e2:	4683      	mov	fp, r0
 80a01e4:	468a      	mov	sl, r1
 80a01e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80a01e8:	2100      	movs	r1, #0
 80a01ea:	2228      	movs	r2, #40	; 0x28
 80a01ec:	4668      	mov	r0, sp
 80a01ee:	f004 fc72 	bl	80a4ad6 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a01f2:	4630      	mov	r0, r6
 80a01f4:	f7ff ff5f 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a01f8:	4605      	mov	r5, r0
 80a01fa:	bba8      	cbnz	r0, 80a0268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80a01fc:	1e63      	subs	r3, r4, #1
 80a01fe:	2b12      	cmp	r3, #18
 80a0200:	d830      	bhi.n	80a0264 <bme680_set_regs+0x8a>
 80a0202:	f10d 0801 	add.w	r8, sp, #1
 80a0206:	465f      	mov	r7, fp
 80a0208:	46c1      	mov	r9, r8
 80a020a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80a020e:	b2a4      	uxth	r4, r4
 80a0210:	ebcb 0307 	rsb	r3, fp, r7
 80a0214:	b29b      	uxth	r3, r3
 80a0216:	429c      	cmp	r4, r3
 80a0218:	d913      	bls.n	80a0242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 80a021a:	78b3      	ldrb	r3, [r6, #2]
 80a021c:	b943      	cbnz	r3, 80a0230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80a021e:	4631      	mov	r1, r6
 80a0220:	7838      	ldrb	r0, [r7, #0]
 80a0222:	f7ff ff56 	bl	80a00d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80a0226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80a0228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80a022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80a022e:	e000      	b.n	80a0232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80a0230:	783b      	ldrb	r3, [r7, #0]
 80a0232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80a0236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80a023a:	3701      	adds	r7, #1
 80a023c:	f808 3b02 	strb.w	r3, [r8], #2
 80a0240:	e7e6      	b.n	80a0210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 80a0242:	b98d      	cbnz	r5, 80a0268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80a0244:	0063      	lsls	r3, r4, #1
 80a0246:	3b01      	subs	r3, #1
 80a0248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 80a024a:	b29b      	uxth	r3, r3
 80a024c:	464a      	mov	r2, r9
 80a024e:	f89d 1000 	ldrb.w	r1, [sp]
 80a0252:	7870      	ldrb	r0, [r6, #1]
 80a0254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 80a0256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80a0258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 80a025c:	bf18      	it	ne
 80a025e:	f06f 0501 	mvnne.w	r5, #1
 80a0262:	e001      	b.n	80a0268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80a0264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 80a0268:	4628      	mov	r0, r5
 80a026a:	b00b      	add	sp, #44	; 0x2c
 80a026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80a0270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80a0272:	23e0      	movs	r3, #224	; 0xe0
 80a0274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80a0278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80a027a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80a027c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0280:	f7ff ff19 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a0284:	4604      	mov	r4, r0
 80a0286:	b9d8      	cbnz	r0, 80a02c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 80a0288:	78ab      	ldrb	r3, [r5, #2]
 80a028a:	b16b      	cbz	r3, 80a02a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80a028c:	462b      	mov	r3, r5
 80a028e:	2201      	movs	r2, #1
 80a0290:	f10d 0107 	add.w	r1, sp, #7
 80a0294:	f10d 0006 	add.w	r0, sp, #6
 80a0298:	f7ff ff9f 	bl	80a01da <bme680_set_regs>
 80a029c:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 80a029e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a02a0:	200a      	movs	r0, #10
 80a02a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80a02a4:	b134      	cbz	r4, 80a02b4 <bme680_soft_reset+0x44>
 80a02a6:	e00b      	b.n	80a02c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80a02a8:	4628      	mov	r0, r5
 80a02aa:	f7ff ff48 	bl	80a013e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80a02ae:	4604      	mov	r4, r0
 80a02b0:	b930      	cbnz	r0, 80a02c0 <bme680_soft_reset+0x50>
 80a02b2:	e7eb      	b.n	80a028c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80a02b4:	78ab      	ldrb	r3, [r5, #2]
 80a02b6:	b91b      	cbnz	r3, 80a02c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80a02b8:	4628      	mov	r0, r5
 80a02ba:	f7ff ff40 	bl	80a013e <get_mem_page>
 80a02be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80a02c0:	4620      	mov	r0, r4
 80a02c2:	b003      	add	sp, #12
 80a02c4:	bd30      	pop	{r4, r5, pc}

080a02c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80a02c6:	b530      	push	{r4, r5, lr}
 80a02c8:	b08d      	sub	sp, #52	; 0x34
 80a02ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a02cc:	f7ff fef3 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a02d0:	4605      	mov	r5, r0
 80a02d2:	2800      	cmp	r0, #0
 80a02d4:	f040 80d5 	bne.w	80a0482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80a02d8:	4620      	mov	r0, r4
 80a02da:	f7ff ffc9 	bl	80a0270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80a02de:	4605      	mov	r5, r0
 80a02e0:	2800      	cmp	r0, #0
 80a02e2:	f040 80ce 	bne.w	80a0482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80a02e6:	4623      	mov	r3, r4
 80a02e8:	2201      	movs	r2, #1
 80a02ea:	4621      	mov	r1, r4
 80a02ec:	20d0      	movs	r0, #208	; 0xd0
 80a02ee:	f7ff ff50 	bl	80a0192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80a02f2:	4605      	mov	r5, r0
 80a02f4:	2800      	cmp	r0, #0
 80a02f6:	f040 80c4 	bne.w	80a0482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80a02fa:	7823      	ldrb	r3, [r4, #0]
 80a02fc:	2b61      	cmp	r3, #97	; 0x61
 80a02fe:	f040 80be 	bne.w	80a047e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80a0302:	4601      	mov	r1, r0
 80a0304:	2229      	movs	r2, #41	; 0x29
 80a0306:	a801      	add	r0, sp, #4
 80a0308:	f004 fbe5 	bl	80a4ad6 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a030c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 80a030e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0312:	f7ff fed0 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a0316:	4605      	mov	r5, r0
 80a0318:	2800      	cmp	r0, #0
 80a031a:	f040 80b2 	bne.w	80a0482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80a031e:	4623      	mov	r3, r4
 80a0320:	2219      	movs	r2, #25
 80a0322:	a901      	add	r1, sp, #4
 80a0324:	2089      	movs	r0, #137	; 0x89
 80a0326:	f7ff ff34 	bl	80a0192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 80a032a:	4605      	mov	r5, r0
 80a032c:	b938      	cbnz	r0, 80a033e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80a032e:	4623      	mov	r3, r4
 80a0330:	2210      	movs	r2, #16
 80a0332:	f10d 011d 	add.w	r1, sp, #29
 80a0336:	20e1      	movs	r0, #225	; 0xe1
 80a0338:	f7ff ff2b 	bl	80a0192 <bme680_get_regs>
 80a033c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80a033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80a0342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80a0346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a034a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80a034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80a035a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80a035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80a0362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80a0364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80a0368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a036c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80a036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80a0372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a0376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a037a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80a037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80a0380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80a0384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80a0388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80a0392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a0396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80a039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a039e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80a03a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80a03a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80a03a8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80a03ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80a03b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80a03b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80a03b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a03bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80a03be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80a03c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80a03c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a03ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80a03cc:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80a03d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80a03d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80a03d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80a03dc:	f003 020f 	and.w	r2, r3, #15
 80a03e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80a03e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80a03e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80a03ea:	091b      	lsrs	r3, r3, #4
 80a03ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80a03f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80a03f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80a03f6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80a03fa:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80a03fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a0400:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80a0402:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80a0406:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80a0408:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a040c:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80a040e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a0412:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80a0414:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80a0418:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80a041a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80a041e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80a0424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80a0428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 80a042a:	bb15      	cbnz	r5, 80a0472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80a042c:	4623      	mov	r3, r4
 80a042e:	2201      	movs	r2, #1
 80a0430:	f10d 0103 	add.w	r1, sp, #3
 80a0434:	2002      	movs	r0, #2
 80a0436:	f7ff feac 	bl	80a0192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80a043a:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 80a043e:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80a0440:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80a0444:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 80a0448:	b998      	cbnz	r0, 80a0472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80a044a:	4623      	mov	r3, r4
 80a044c:	2201      	movs	r2, #1
 80a044e:	f10d 0103 	add.w	r1, sp, #3
 80a0452:	f7ff fe9e 	bl	80a0192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 80a0456:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 80a045a:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 80a045c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 80a0460:	b938      	cbnz	r0, 80a0472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80a0462:	4623      	mov	r3, r4
 80a0464:	2201      	movs	r2, #1
 80a0466:	f10d 0103 	add.w	r1, sp, #3
 80a046a:	2004      	movs	r0, #4
 80a046c:	f7ff fe91 	bl	80a0192 <bme680_get_regs>
 80a0470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80a0472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80a0476:	111b      	asrs	r3, r3, #4
 80a0478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a047c:	e001      	b.n	80a0482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 80a047e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 80a0482:	4628      	mov	r0, r5
 80a0484:	b00d      	add	sp, #52	; 0x34
 80a0486:	bd30      	pop	{r4, r5, pc}

080a0488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 80a0488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80a048a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 80a048c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80a048e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0492:	f7ff fe10 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a0496:	bba0      	cbnz	r0, 80a0502 <bme680_set_sensor_mode+0x7a>
 80a0498:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80a049a:	4623      	mov	r3, r4
 80a049c:	2201      	movs	r2, #1
 80a049e:	f10d 0106 	add.w	r1, sp, #6
 80a04a2:	2074      	movs	r0, #116	; 0x74
 80a04a4:	f7ff fe75 	bl	80a0192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80a04a8:	b9a0      	cbnz	r0, 80a04d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80a04aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80a04ae:	f013 0503 	ands.w	r5, r3, #3
 80a04b2:	d011      	beq.n	80a04d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80a04b4:	f023 0303 	bic.w	r3, r3, #3
 80a04b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80a04bc:	2201      	movs	r2, #1
 80a04be:	4623      	mov	r3, r4
 80a04c0:	f10d 0106 	add.w	r1, sp, #6
 80a04c4:	f10d 0007 	add.w	r0, sp, #7
 80a04c8:	f7ff fe87 	bl	80a01da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80a04cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a04ce:	200a      	movs	r0, #10
 80a04d0:	4798      	blx	r3
 80a04d2:	e7e2      	b.n	80a049a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80a04d4:	2d00      	cmp	r5, #0
 80a04d6:	d1e0      	bne.n	80a049a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80a04d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80a04dc:	b18b      	cbz	r3, 80a0502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80a04de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a04e2:	f003 0303 	and.w	r3, r3, #3
 80a04e6:	f022 0203 	bic.w	r2, r2, #3
 80a04ea:	4313      	orrs	r3, r2
 80a04ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80a04f0:	b938      	cbnz	r0, 80a0502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80a04f2:	4623      	mov	r3, r4
 80a04f4:	2201      	movs	r2, #1
 80a04f6:	f10d 0106 	add.w	r1, sp, #6
 80a04fa:	f10d 0007 	add.w	r0, sp, #7
 80a04fe:	f7ff fe6c 	bl	80a01da <bme680_set_regs>
		}
	}

	return rslt;
}
 80a0502:	b003      	add	sp, #12
 80a0504:	bd30      	pop	{r4, r5, pc}

080a0506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80a0506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80a050a:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80a050c:	b088      	sub	sp, #32
 80a050e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80a0512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80a0514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80a0518:	9304      	str	r3, [sp, #16]
 80a051a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80a051e:	9306      	str	r3, [sp, #24]
 80a0520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0524:	f7ff fdc7 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a0528:	2800      	cmp	r0, #0
 80a052a:	f040 8164 	bne.w	80a07f6 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80a052e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80a0530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80a0534:	d56a      	bpl.n	80a060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80a0536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 80a0538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 80a053c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80a0540:	d163      	bne.n	80a060a <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80a0542:	235a      	movs	r3, #90	; 0x5a
 80a0544:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80a0548:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 80a054c:	2bc7      	cmp	r3, #199	; 0xc7
 80a054e:	d905      	bls.n	80a055c <bme680_set_sensor_settings+0x56>
 80a0550:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a0554:	bf28      	it	cs
 80a0556:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 80a055a:	e000      	b.n	80a055e <bme680_set_sensor_settings+0x58>
		temp = 200;
 80a055c:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80a055e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0562:	2114      	movs	r1, #20
 80a0564:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 80a0568:	f202 1299 	addw	r2, r2, #409	; 0x199
 80a056c:	4353      	muls	r3, r2
 80a056e:	fb93 f3f1 	sdiv	r3, r3, r1
 80a0572:	210a      	movs	r1, #10
 80a0574:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 80a0578:	fb93 f3f1 	sdiv	r3, r3, r1
 80a057c:	f994 2011 	ldrsb.w	r2, [r4, #17]
 80a0580:	f994 0014 	ldrsb.w	r0, [r4, #20]
 80a0584:	f502 7244 	add.w	r2, r2, #784	; 0x310
 80a0588:	435a      	muls	r2, r3
 80a058a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80a058e:	4358      	muls	r0, r3
 80a0590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0594:	fb90 f3f3 	sdiv	r3, r0, r3
 80a0598:	021b      	lsls	r3, r3, #8
 80a059a:	eb03 0162 	add.w	r1, r3, r2, asr #1
 80a059e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80a05a2:	3304      	adds	r3, #4
 80a05a4:	fb91 f2f3 	sdiv	r2, r1, r3
 80a05a8:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80a05ac:	2383      	movs	r3, #131	; 0x83
 80a05ae:	434b      	muls	r3, r1
 80a05b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80a05b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80a05b8:	2222      	movs	r2, #34	; 0x22
 80a05ba:	3bfa      	subs	r3, #250	; 0xfa
 80a05bc:	4353      	muls	r3, r2
 80a05be:	2264      	movs	r2, #100	; 0x64
 80a05c0:	3332      	adds	r3, #50	; 0x32
 80a05c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80a05c6:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80a05ca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80a05ce:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80a05d2:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80a05d6:	d20b      	bcs.n	80a05f0 <bme680_set_sensor_settings+0xea>
 80a05d8:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80a05da:	2b3f      	cmp	r3, #63	; 0x3f
 80a05dc:	b2d1      	uxtb	r1, r2
 80a05de:	f102 0201 	add.w	r2, r2, #1
 80a05e2:	d901      	bls.n	80a05e8 <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 80a05e4:	089b      	lsrs	r3, r3, #2
 80a05e6:	e7f8      	b.n	80a05da <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80a05e8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80a05ec:	b2db      	uxtb	r3, r3
 80a05ee:	e000      	b.n	80a05f2 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80a05f0:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80a05f2:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80a05f6:	2300      	movs	r3, #0
 80a05f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80a05fc:	2202      	movs	r2, #2
 80a05fe:	4623      	mov	r3, r4
 80a0600:	a903      	add	r1, sp, #12
 80a0602:	a802      	add	r0, sp, #8
 80a0604:	f7ff fde9 	bl	80a01da <bme680_set_regs>
 80a0608:	e000      	b.n	80a060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80a060a:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80a060c:	2300      	movs	r3, #0
 80a060e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80a0612:	b910      	cbnz	r0, 80a061a <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 80a0614:	4620      	mov	r0, r4
 80a0616:	f7ff ff37 	bl	80a0488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80a061a:	f006 0510 	and.w	r5, r6, #16
 80a061e:	b2ad      	uxth	r5, r5
 80a0620:	b305      	cbz	r5, 80a0664 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80a0622:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80a0626:	2107      	movs	r1, #7
 80a0628:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80a062c:	f7ff fda2 	bl	80a0174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 80a0630:	b930      	cbnz	r0, 80a0640 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80a0632:	4623      	mov	r3, r4
 80a0634:	2201      	movs	r2, #1
 80a0636:	f10d 0107 	add.w	r1, sp, #7
 80a063a:	2075      	movs	r0, #117	; 0x75
 80a063c:	f7ff fda9 	bl	80a0192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80a0640:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 80a0644:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80a0646:	009b      	lsls	r3, r3, #2
 80a0648:	f003 021c 	and.w	r2, r3, #28
 80a064c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0650:	f023 031c 	bic.w	r3, r3, #28
 80a0654:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 80a0656:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80a0658:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80a065c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 80a0660:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 80a0664:	06b3      	lsls	r3, r6, #26
 80a0666:	d522      	bpl.n	80a06ae <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80a0668:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80a066c:	2108      	movs	r1, #8
 80a066e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 80a0672:	f7ff fd7f 	bl	80a0174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 80a0676:	b930      	cbnz	r0, 80a0686 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80a0678:	4623      	mov	r3, r4
 80a067a:	2201      	movs	r2, #1
 80a067c:	f10d 0107 	add.w	r1, sp, #7
 80a0680:	2070      	movs	r0, #112	; 0x70
 80a0682:	f7ff fd86 	bl	80a0192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80a0686:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80a068a:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80a068c:	f023 0208 	bic.w	r2, r3, #8
 80a0690:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80a0694:	f003 0308 	and.w	r3, r3, #8
 80a0698:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 80a069a:	aa08      	add	r2, sp, #32
 80a069c:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 80a069e:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80a06a0:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80a06a4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80a06a8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80a06ac:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80a06ae:	07b1      	lsls	r1, r6, #30
 80a06b0:	d033      	beq.n	80a071a <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80a06b2:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80a06b6:	2105      	movs	r1, #5
 80a06b8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80a06bc:	f7ff fd5a 	bl	80a0174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80a06c0:	b930      	cbnz	r0, 80a06d0 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80a06c2:	4623      	mov	r3, r4
 80a06c4:	2201      	movs	r2, #1
 80a06c6:	f10d 0107 	add.w	r1, sp, #7
 80a06ca:	2074      	movs	r0, #116	; 0x74
 80a06cc:	f7ff fd61 	bl	80a0192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80a06d0:	07f2      	lsls	r2, r6, #31
 80a06d2:	d509      	bpl.n	80a06e8 <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80a06d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a06d8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80a06dc:	f003 031f 	and.w	r3, r3, #31
 80a06e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80a06e4:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80a06e8:	07b3      	lsls	r3, r6, #30
 80a06ea:	d50b      	bpl.n	80a0704 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80a06ec:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80a06f0:	009b      	lsls	r3, r3, #2
 80a06f2:	f003 021c 	and.w	r2, r3, #28
 80a06f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a06fa:	f023 031c 	bic.w	r3, r3, #28
 80a06fe:	4313      	orrs	r3, r2
 80a0700:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80a0704:	ab08      	add	r3, sp, #32
 80a0706:	442b      	add	r3, r5
 80a0708:	2274      	movs	r2, #116	; 0x74
 80a070a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80a070e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80a0712:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 80a0714:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80a0718:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80a071a:	0771      	lsls	r1, r6, #29
 80a071c:	d522      	bpl.n	80a0764 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80a071e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80a0722:	2105      	movs	r1, #5
 80a0724:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0728:	f7ff fd24 	bl	80a0174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 80a072c:	b930      	cbnz	r0, 80a073c <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80a072e:	4623      	mov	r3, r4
 80a0730:	2201      	movs	r2, #1
 80a0732:	f10d 0107 	add.w	r1, sp, #7
 80a0736:	2072      	movs	r0, #114	; 0x72
 80a0738:	f7ff fd2b 	bl	80a0192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80a073c:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80a0740:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80a0742:	f023 0207 	bic.w	r2, r3, #7
 80a0746:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a074a:	f003 0307 	and.w	r3, r3, #7
 80a074e:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 80a0750:	aa08      	add	r2, sp, #32
 80a0752:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 80a0754:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80a0756:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80a075a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80a075e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80a0762:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80a0764:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80a0768:	d03c      	beq.n	80a07e4 <bme680_set_sensor_settings+0x2de>
 80a076a:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80a076e:	4642      	mov	r2, r8
 80a0770:	2101      	movs	r1, #1
 80a0772:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80a0776:	f7ff fcfd 	bl	80a0174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 80a077a:	b968      	cbnz	r0, 80a0798 <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80a077c:	4642      	mov	r2, r8
 80a077e:	210a      	movs	r1, #10
 80a0780:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0784:	f7ff fcf6 	bl	80a0174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 80a0788:	b930      	cbnz	r0, 80a0798 <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80a078a:	4623      	mov	r3, r4
 80a078c:	2201      	movs	r2, #1
 80a078e:	f10d 0107 	add.w	r1, sp, #7
 80a0792:	2071      	movs	r0, #113	; 0x71
 80a0794:	f7ff fcfd 	bl	80a0192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 80a0798:	0672      	lsls	r2, r6, #25
 80a079a:	d50b      	bpl.n	80a07b4 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80a079c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80a07a0:	011b      	lsls	r3, r3, #4
 80a07a2:	f003 0210 	and.w	r2, r3, #16
 80a07a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a07aa:	f023 0310 	bic.w	r3, r3, #16
 80a07ae:	4313      	orrs	r3, r2
 80a07b0:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80a07b4:	0633      	lsls	r3, r6, #24
 80a07b6:	d50a      	bpl.n	80a07ce <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80a07b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a07bc:	f023 020f 	bic.w	r2, r3, #15
 80a07c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a07c4:	f003 030f 	and.w	r3, r3, #15
 80a07c8:	4313      	orrs	r3, r2
 80a07ca:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80a07ce:	ab08      	add	r3, sp, #32
 80a07d0:	442b      	add	r3, r5
 80a07d2:	2271      	movs	r2, #113	; 0x71
 80a07d4:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80a07d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80a07dc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80a07de:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80a07e2:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80a07e4:	b928      	cbnz	r0, 80a07f2 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80a07e6:	4623      	mov	r3, r4
 80a07e8:	462a      	mov	r2, r5
 80a07ea:	a906      	add	r1, sp, #24
 80a07ec:	a804      	add	r0, sp, #16
 80a07ee:	f7ff fcf4 	bl	80a01da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80a07f2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80a07f6:	b008      	add	sp, #32
 80a07f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a07fc <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80a07fc:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80a07fe:	4b18      	ldr	r3, [pc, #96]	; (80a0860 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80a0800:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80a0802:	6818      	ldr	r0, [r3, #0]
 80a0804:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80a0806:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80a0808:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80a080c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80a0810:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80a0812:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80a0814:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80a0818:	a802      	add	r0, sp, #8
 80a081a:	4402      	add	r2, r0
 80a081c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80a0820:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80a0824:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80a0826:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80a082a:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80a082c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a0830:	4413      	add	r3, r2
 80a0832:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80a0836:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80a0838:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80a083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80a0840:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80a0842:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 80a0846:	3301      	adds	r3, #1
 80a0848:	b29b      	uxth	r3, r3
 80a084a:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 80a084c:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 80a0850:	b11a      	cbz	r2, 80a085a <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 80a0852:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 80a0856:	4413      	add	r3, r2
 80a0858:	8023      	strh	r3, [r4, #0]
	}
}
 80a085a:	b002      	add	sp, #8
 80a085c:	bd10      	pop	{r4, pc}
 80a085e:	bf00      	nop
 80a0860:	080a6ed8 	.word	0x080a6ed8

080a0864 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80a0864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0868:	4680      	mov	r8, r0
 80a086a:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a086c:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80a086e:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0870:	f7ff fc21 	bl	80a00b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80a0874:	4605      	mov	r5, r0
 80a0876:	2800      	cmp	r0, #0
 80a0878:	f040 8167 	bne.w	80a0b4a <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80a087c:	af04      	add	r7, sp, #16
 80a087e:	4601      	mov	r1, r0
 80a0880:	220f      	movs	r2, #15
 80a0882:	4638      	mov	r0, r7
 80a0884:	f004 f927 	bl	80a4ad6 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80a0888:	4620      	mov	r0, r4
 80a088a:	f7ff fc14 	bl	80a00b6 <null_ptr_check>
 80a088e:	4605      	mov	r5, r0
 80a0890:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 80a0892:	2d00      	cmp	r5, #0
 80a0894:	f040 8153 	bne.w	80a0b3e <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80a0898:	4623      	mov	r3, r4
 80a089a:	220f      	movs	r2, #15
 80a089c:	4639      	mov	r1, r7
 80a089e:	201d      	movs	r0, #29
 80a08a0:	f7ff fc77 	bl	80a0192 <bme680_get_regs>
 80a08a4:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80a08a6:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80a08aa:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80a08ae:	f000 030f 	and.w	r3, r0, #15
 80a08b2:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80a08b6:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80a08ba:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80a08be:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80a08c2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80a08c6:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80a08ca:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80a08cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80a08d0:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80a08d4:	9301      	str	r3, [sp, #4]
 80a08d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80a08da:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80a08de:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80a08e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80a08e4:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80a08e8:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80a08ea:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80a08ee:	f003 0a20 	and.w	sl, r3, #32
 80a08f2:	ea40 000a 	orr.w	r0, r0, sl
 80a08f6:	f003 0310 	and.w	r3, r3, #16
 80a08fa:	4318      	orrs	r0, r3
 80a08fc:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80a08fe:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80a0900:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80a0904:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80a0908:	f280 8116 	bge.w	80a0b38 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80a090c:	0912      	lsrs	r2, r2, #4
 80a090e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80a0912:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 80a0916:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80a0918:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80a091c:	0049      	lsls	r1, r1, #1
 80a091e:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80a0922:	460a      	mov	r2, r1
 80a0924:	17cb      	asrs	r3, r1, #31
 80a0926:	105b      	asrs	r3, r3, #1
 80a0928:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80a092c:	fb02 f603 	mul.w	r6, r2, r3
 80a0930:	fba2 2302 	umull	r2, r3, r2, r2
 80a0934:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 80a0938:	f994 201a 	ldrsb.w	r2, [r4, #26]
 80a093c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80a0940:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 80a0944:	ea4f 3b23 	mov.w	fp, r3, asr #12
 80a0948:	0113      	lsls	r3, r2, #4
 80a094a:	17df      	asrs	r7, r3, #31
 80a094c:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80a0950:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80a0954:	fb03 660b 	mla	r6, r3, fp, r6
 80a0958:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80a095c:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80a095e:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80a0960:	0b92      	lsrs	r2, r2, #14
 80a0962:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 80a0966:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80a096a:	1883      	adds	r3, r0, r2
 80a096c:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 80a096e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0972:	3380      	adds	r3, #128	; 0x80
 80a0974:	121b      	asrs	r3, r3, #8
 80a0976:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80a097a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80a097c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80a0980:	105b      	asrs	r3, r3, #1
 80a0982:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80a0986:	109a      	asrs	r2, r3, #2
 80a0988:	4352      	muls	r2, r2
 80a098a:	12d1      	asrs	r1, r2, #11
 80a098c:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80a098e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80a0992:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80a0994:	4359      	muls	r1, r3
 80a0996:	0049      	lsls	r1, r1, #1
 80a0998:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80a099c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80a09a0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80a09a4:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80a09a6:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80a09aa:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80a09ae:	0140      	lsls	r0, r0, #5
 80a09b0:	4342      	muls	r2, r0
 80a09b2:	10d2      	asrs	r2, r2, #3
 80a09b4:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80a09b8:	149b      	asrs	r3, r3, #18
 80a09ba:	8ba2      	ldrh	r2, [r4, #28]
 80a09bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80a09c0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80a09c2:	9a00      	ldr	r2, [sp, #0]
 80a09c4:	13db      	asrs	r3, r3, #15
 80a09c6:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 80a09ca:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 80a09ce:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80a09d2:	0412      	lsls	r2, r2, #16
 80a09d4:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 80a09d8:	f640 4235 	movw	r2, #3125	; 0xc35
 80a09dc:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 80a09e0:	4351      	muls	r1, r2
 80a09e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80a09e6:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80a09e8:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80a09ea:	4349      	muls	r1, r1
 80a09ec:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80a09f0:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80a09f4:	1349      	asrs	r1, r1, #13
 80a09f6:	434a      	muls	r2, r1
 80a09f8:	1099      	asrs	r1, r3, #2
 80a09fa:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80a09fc:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80a09fe:	1349      	asrs	r1, r1, #13
 80a0a00:	eb01 3122 	add.w	r1, r1, r2, asr #12
 80a0a04:	fb06 f206 	mul.w	r2, r6, r6
 80a0a08:	4356      	muls	r6, r2
 80a0a0a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a0a0e:	4372      	muls	r2, r6
 80a0a10:	eb01 4262 	add.w	r2, r1, r2, asr #17
 80a0a14:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 80a0a18:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 80a0a1c:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80a0a20:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80a0a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80a0a26:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80a0a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0a2e:	3380      	adds	r3, #128	; 0x80
 80a0a30:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80a0a32:	4359      	muls	r1, r3
 80a0a34:	2264      	movs	r2, #100	; 0x64
 80a0a36:	fb91 f1f2 	sdiv	r1, r1, r2
 80a0a3a:	f994 000d 	ldrsb.w	r0, [r4, #13]
 80a0a3e:	4359      	muls	r1, r3
 80a0a40:	4358      	muls	r0, r3
 80a0a42:	1189      	asrs	r1, r1, #6
 80a0a44:	fb90 f0f2 	sdiv	r0, r0, r2
 80a0a48:	fb91 f1f2 	sdiv	r1, r1, r2
 80a0a4c:	8967      	ldrh	r7, [r4, #10]
 80a0a4e:	4401      	add	r1, r0
 80a0a50:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80a0a54:	4379      	muls	r1, r7
 80a0a56:	9801      	ldr	r0, [sp, #4]
 80a0a58:	128f      	asrs	r7, r1, #10
 80a0a5a:	9902      	ldr	r1, [sp, #8]
 80a0a5c:	8926      	ldrh	r6, [r4, #8]
 80a0a5e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80a0a62:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80a0a66:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 80a0a6a:	4359      	muls	r1, r3
 80a0a6c:	fb91 f1f2 	sdiv	r1, r1, r2
 80a0a70:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 80a0a74:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 80a0a78:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 80a0a7c:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 80a0a80:	4343      	muls	r3, r0
 80a0a82:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80a0a86:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 80a0a8a:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80a0a8c:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 80a0a90:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 80a0a94:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 80a0a96:	435b      	muls	r3, r3
 80a0a98:	1112      	asrs	r2, r2, #4
 80a0a9a:	129b      	asrs	r3, r3, #10
 80a0a9c:	4353      	muls	r3, r2
 80a0a9e:	eb01 0363 	add.w	r3, r1, r3, asr #1
 80a0aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0aa6:	129b      	asrs	r3, r3, #10
 80a0aa8:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 80a0aaa:	4a2a      	ldr	r2, [pc, #168]	; (80a0b54 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 80a0aac:	131b      	asrs	r3, r3, #12
 80a0aae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 80a0ab2:	4293      	cmp	r3, r2
 80a0ab4:	bfd4      	ite	le
 80a0ab6:	f8c8 300c 	strle.w	r3, [r8, #12]
 80a0aba:	f8c8 200c 	strgt.w	r2, [r8, #12]
 80a0abe:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80a0ac2:	2205      	movs	r2, #5
 80a0ac4:	2100      	movs	r1, #0
 80a0ac6:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 80a0aca:	4b23      	ldr	r3, [pc, #140]	; (80a0b58 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80a0acc:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80a0ad0:	fba0 2307 	umull	r2, r3, r0, r7
 80a0ad4:	fb07 3301 	mla	r3, r7, r1, r3
 80a0ad8:	0c10      	lsrs	r0, r2, #16
 80a0ada:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a0ade:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80a0ae0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80a0ae2:	4f1e      	ldr	r7, [pc, #120]	; (80a0b5c <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80a0ae4:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 80a0ae8:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80a0aec:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80a0af0:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80a0af4:	fbae 6700 	umull	r6, r7, lr, r0
 80a0af8:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80a0afc:	f04f 0300 	mov.w	r3, #0
 80a0b00:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80a0b04:	1812      	adds	r2, r2, r0
 80a0b06:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80a0b08:	0a70      	lsrs	r0, r6, #9
 80a0b0a:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80a0b0e:	1279      	asrs	r1, r7, #9
 80a0b10:	105f      	asrs	r7, r3, #1
 80a0b12:	ea4f 0632 	mov.w	r6, r2, rrx
 80a0b16:	1980      	adds	r0, r0, r6
 80a0b18:	4179      	adcs	r1, r7
 80a0b1a:	f003 fcf7 	bl	80a450c <__aeabi_ldivmod>
 80a0b1e:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 80a0b22:	b995      	cbnz	r5, 80a0b4a <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 80a0b24:	f998 3000 	ldrsb.w	r3, [r8]
 80a0b28:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 80a0b2a:	bfba      	itte	lt
 80a0b2c:	2301      	movlt	r3, #1
 80a0b2e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 80a0b32:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 80a0b36:	e008      	b.n	80a0b4a <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80a0b38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0b3a:	200a      	movs	r0, #10
 80a0b3c:	4798      	blx	r3
 80a0b3e:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 80a0b40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80a0b44:	f47f aea5 	bne.w	80a0892 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 80a0b48:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 80a0b4a:	4628      	mov	r0, r5
 80a0b4c:	b009      	add	sp, #36	; 0x24
 80a0b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b52:	bf00      	nop
 80a0b54:	000186a0 	.word	0x000186a0
 80a0b58:	20000000 	.word	0x20000000
 80a0b5c:	20000040 	.word	0x20000040

080a0b60 <_Z10measureNow6String>:


int measureNow(String command) // Function to force sending data in current hour
{
  if (command == "1") {
    state = MEASURING_STATE;
 80a0b60:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0b62:	4904      	ldr	r1, [pc, #16]	; (80a0b74 <_Z10measureNow6String+0x14>)
 80a0b64:	f002 f8f7 	bl	80a2d56 <_ZNK6String6equalsEPKc>
    return 1;
 80a0b68:	b118      	cbz	r0, 80a0b72 <_Z10measureNow6String+0x12>
  }
 80a0b6a:	4b03      	ldr	r3, [pc, #12]	; (80a0b78 <_Z10measureNow6String+0x18>)
 80a0b6c:	2203      	movs	r2, #3
 80a0b6e:	701a      	strb	r2, [r3, #0]
  else return 0;
 80a0b70:	2001      	movs	r0, #1
}

int setVerboseMode(String command) // Function to force sending data in current hour
 80a0b72:	bd08      	pop	{r3, pc}
 80a0b74:	080a7269 	.word	0x080a7269
 80a0b78:	200002c5 	.word	0x200002c5

080a0b7c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0b7c:	b510      	push	{r4, lr}
 80a0b7e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a0b80:	6800      	ldr	r0, [r0, #0]
 80a0b82:	b108      	cbz	r0, 80a0b88 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a0b84:	f001 fa34 	bl	80a1ff0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0b88:	4620      	mov	r0, r4
 80a0b8a:	bd10      	pop	{r4, pc}

080a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a0b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b8e:	4605      	mov	r5, r0
 80a0b90:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0b94:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0b96:	f88d 3000 	strb.w	r3, [sp]
 80a0b9a:	233c      	movs	r3, #60	; 0x3c
 80a0b9c:	f001 fbfe 	bl	80a239c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80a0ba0:	4628      	mov	r0, r5
 80a0ba2:	b003      	add	sp, #12
 80a0ba4:	bd30      	pop	{r4, r5, pc}
	...

080a0ba8 <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {

  bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
 80a0ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  bme.performReading();                                                                       // Take measurement from all the sensors

 80a0bac:	4c35      	ldr	r4, [pc, #212]	; (80a0c84 <_Z16takeMeasurementsv+0xdc>)
 80a0bae:	2296      	movs	r2, #150	; 0x96
 80a0bb0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80a0bb4:	4620      	mov	r0, r4
 80a0bb6:	f000 ff3b 	bl	80a1a30 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  temperatureInC = bme.temperature;
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	f000 fec4 	bl	80a1948 <_ZN15Adafruit_BME68014performReadingEv>
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

 80a0bc0:	6820      	ldr	r0, [r4, #0]
 80a0bc2:	f002 ff99 	bl	80a3af8 <__aeabi_f2d>
 80a0bc6:	4e30      	ldr	r6, [pc, #192]	; (80a0c88 <_Z16takeMeasurementsv+0xe0>)
  relativeHumidity = bme.humidity;
 80a0bc8:	4a30      	ldr	r2, [pc, #192]	; (80a0c8c <_Z16takeMeasurementsv+0xe4>)
  bme.setGasHeater(320, 150);                                                                 // 320*C for 150 ms
  bme.performReading();                                                                       // Take measurement from all the sensors

  temperatureInC = bme.temperature;
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

 80a0bca:	e9c6 0100 	strd	r0, r1, [r6]
  relativeHumidity = bme.humidity;
 80a0bce:	e9cd 0100 	strd	r0, r1, [sp]
 80a0bd2:	2110      	movs	r1, #16
 80a0bd4:	482e      	ldr	r0, [pc, #184]	; (80a0c90 <_Z16takeMeasurementsv+0xe8>)
 80a0bd6:	f001 fa23 	bl	80a2020 <snprintf>
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

 80a0bda:	68a0      	ldr	r0, [r4, #8]
 80a0bdc:	f002 ff8c 	bl	80a3af8 <__aeabi_f2d>
 80a0be0:	4d2c      	ldr	r5, [pc, #176]	; (80a0c94 <_Z16takeMeasurementsv+0xec>)
  pressureHpa = bme.pressure / 100.0;
 80a0be2:	e9cd 0100 	strd	r0, r1, [sp]
  temperatureInC = bme.temperature;
  snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", temperatureInC);

  relativeHumidity = bme.humidity;
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

 80a0be6:	e9c5 0100 	strd	r0, r1, [r5]
  pressureHpa = bme.pressure / 100.0;
 80a0bea:	4a2b      	ldr	r2, [pc, #172]	; (80a0c98 <_Z16takeMeasurementsv+0xf0>)
 80a0bec:	2110      	movs	r1, #16
 80a0bee:	482b      	ldr	r0, [pc, #172]	; (80a0c9c <_Z16takeMeasurementsv+0xf4>)
 80a0bf0:	f001 fa16 	bl	80a2020 <snprintf>
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);

 80a0bf4:	6860      	ldr	r0, [r4, #4]
 80a0bf6:	f002 ff7f 	bl	80a3af8 <__aeabi_f2d>
 80a0bfa:	2200      	movs	r2, #0
 80a0bfc:	4b28      	ldr	r3, [pc, #160]	; (80a0ca0 <_Z16takeMeasurementsv+0xf8>)
 80a0bfe:	f003 f8f9 	bl	80a3df4 <__aeabi_ddiv>
 80a0c02:	4b28      	ldr	r3, [pc, #160]	; (80a0ca4 <_Z16takeMeasurementsv+0xfc>)
  // If lower temperature threshold is crossed, Set the flag true. 
 80a0c04:	4a28      	ldr	r2, [pc, #160]	; (80a0ca8 <_Z16takeMeasurementsv+0x100>)
  relativeHumidity = bme.humidity;
  snprintf(humidityString,sizeof(humidityString),"%4.1f%%", relativeHumidity);

  pressureHpa = bme.pressure / 100.0;
  snprintf(pressureString,sizeof(pressureString),"%4.1fHPa", pressureHpa);

 80a0c06:	e9c3 0100 	strd	r0, r1, [r3]
  // If lower temperature threshold is crossed, Set the flag true. 
 80a0c0a:	e9cd 0100 	strd	r0, r1, [sp]
 80a0c0e:	2110      	movs	r1, #16
 80a0c10:	4826      	ldr	r0, [pc, #152]	; (80a0cac <_Z16takeMeasurementsv+0x104>)
 80a0c12:	f001 fa05 	bl	80a2020 <snprintf>
  if (temperatureInC < lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;

  // If upper temperature threshold is crossed, Set the flag true. 
 80a0c16:	4b26      	ldr	r3, [pc, #152]	; (80a0cb0 <_Z16takeMeasurementsv+0x108>)
 80a0c18:	6818      	ldr	r0, [r3, #0]
 80a0c1a:	f002 ff6d 	bl	80a3af8 <__aeabi_f2d>
 80a0c1e:	cec0      	ldmia	r6, {r6, r7}
 80a0c20:	4632      	mov	r2, r6
 80a0c22:	463b      	mov	r3, r7
 80a0c24:	4680      	mov	r8, r0
 80a0c26:	4689      	mov	r9, r1
 80a0c28:	f003 fa4a 	bl	80a40c0 <__aeabi_dcmpgt>
 80a0c2c:	b110      	cbz	r0, 80a0c34 <_Z16takeMeasurementsv+0x8c>
 80a0c2e:	4b21      	ldr	r3, [pc, #132]	; (80a0cb4 <_Z16takeMeasurementsv+0x10c>)
 80a0c30:	2201      	movs	r2, #1
 80a0c32:	701a      	strb	r2, [r3, #0]
  if (temperatureInC > upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;

  // If lower temperature threshold is crossed, Set the flag true. 
 80a0c34:	4b20      	ldr	r3, [pc, #128]	; (80a0cb8 <_Z16takeMeasurementsv+0x110>)
 80a0c36:	6818      	ldr	r0, [r3, #0]
 80a0c38:	f002 ff5e 	bl	80a3af8 <__aeabi_f2d>
 80a0c3c:	4602      	mov	r2, r0
 80a0c3e:	460b      	mov	r3, r1
 80a0c40:	4630      	mov	r0, r6
 80a0c42:	4639      	mov	r1, r7
 80a0c44:	f003 fa3c 	bl	80a40c0 <__aeabi_dcmpgt>
 80a0c48:	b110      	cbz	r0, 80a0c50 <_Z16takeMeasurementsv+0xa8>
 80a0c4a:	4b1c      	ldr	r3, [pc, #112]	; (80a0cbc <_Z16takeMeasurementsv+0x114>)
 80a0c4c:	2201      	movs	r2, #1
 80a0c4e:	701a      	strb	r2, [r3, #0]
  if (relativeHumidity < lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;

  // If lower temperature threshold is crossed, Set the flag true. 
 80a0c50:	4b1b      	ldr	r3, [pc, #108]	; (80a0cc0 <_Z16takeMeasurementsv+0x118>)
 80a0c52:	6818      	ldr	r0, [r3, #0]
 80a0c54:	f002 ff50 	bl	80a3af8 <__aeabi_f2d>
 80a0c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a0c5c:	f003 fa30 	bl	80a40c0 <__aeabi_dcmpgt>
 80a0c60:	b110      	cbz	r0, 80a0c68 <_Z16takeMeasurementsv+0xc0>
 80a0c62:	4b18      	ldr	r3, [pc, #96]	; (80a0cc4 <_Z16takeMeasurementsv+0x11c>)
 80a0c64:	2201      	movs	r2, #1
 80a0c66:	701a      	strb	r2, [r3, #0]
  if (temperatureInC < lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;

  return 1;
 80a0c68:	4632      	mov	r2, r6
 80a0c6a:	463b      	mov	r3, r7
 80a0c6c:	4640      	mov	r0, r8
 80a0c6e:	4649      	mov	r1, r9
 80a0c70:	f003 fa26 	bl	80a40c0 <__aeabi_dcmpgt>
 80a0c74:	b110      	cbz	r0, 80a0c7c <_Z16takeMeasurementsv+0xd4>
 80a0c76:	4b0f      	ldr	r3, [pc, #60]	; (80a0cb4 <_Z16takeMeasurementsv+0x10c>)
 80a0c78:	2201      	movs	r2, #1
 80a0c7a:	701a      	strb	r2, [r3, #0]
}

// Function to send sms for threshold values
 80a0c7c:	2001      	movs	r0, #1
 80a0c7e:	b003      	add	sp, #12
 80a0c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0c84:	20000318 	.word	0x20000318
 80a0c88:	200002f8 	.word	0x200002f8
 80a0c8c:	080a6f1e 	.word	0x080a6f1e
 80a0c90:	20000260 	.word	0x20000260
 80a0c94:	20000398 	.word	0x20000398
 80a0c98:	080a6f26 	.word	0x080a6f26
 80a0c9c:	20000308 	.word	0x20000308
 80a0ca0:	40590000 	.word	0x40590000
 80a0ca4:	200002c8 	.word	0x200002c8
 80a0ca8:	080a6f2e 	.word	0x080a6f2e
 80a0cac:	200002d2 	.word	0x200002d2
 80a0cb0:	2000015c 	.word	0x2000015c
 80a0cb4:	20000300 	.word	0x20000300
 80a0cb8:	20000154 	.word	0x20000154
 80a0cbc:	200002d1 	.word	0x200002d1
 80a0cc0:	20000164 	.word	0x20000164
 80a0cc4:	200002c7 	.word	0x200002c7

080a0cc8 <_Z17connectToParticlev>:


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
 80a0cc8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a0ccc:	f001 f900 	bl	80a1ed0 <spark_cloud_flag_connect>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0cd0:	f240 36e7 	movw	r6, #999	; 0x3e7
 80a0cd4:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80a0cd8:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0cda:	2000      	movs	r0, #0
 80a0cdc:	f000 ff3c 	bl	80a1b58 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0ce0:	4680      	mov	r8, r0
 80a0ce2:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0ce6:	2000      	movs	r0, #0
 80a0ce8:	f000 ff36 	bl	80a1b58 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0cec:	ebb0 0008 	subs.w	r0, r0, r8
 80a0cf0:	eb61 0109 	sbc.w	r1, r1, r9
 80a0cf4:	428f      	cmp	r7, r1
 80a0cf6:	bf08      	it	eq
 80a0cf8:	4286      	cmpeq	r6, r0
 80a0cfa:	d305      	bcc.n	80a0d08 <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0cfc:	f001 f8f0 	bl	80a1ee0 <spark_cloud_flag_connected>
 80a0d00:	b910      	cbnz	r0, 80a0d08 <_Z17connectToParticlev+0x40>
            spark_process();
 80a0d02:	f001 f8dd 	bl	80a1ec0 <spark_process>
 80a0d06:	e7ee      	b.n	80a0ce6 <_Z17connectToParticlev+0x1e>
 80a0d08:	f001 f8ea 	bl	80a1ee0 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    Particle.process();
  }
 80a0d0c:	b118      	cbz	r0, 80a0d16 <_Z17connectToParticlev+0x4e>
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
 80a0d0e:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80a0d12:	f001 b8e5 	b.w	80a1ee0 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0d16:	f000 ff07 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0d1a:	4b03      	ldr	r3, [pc, #12]	; (80a0d28 <_Z17connectToParticlev+0x60>)
 80a0d1c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0d1e:	f001 f8cf 	bl	80a1ec0 <spark_process>
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    Particle.process();
  }
 80a0d22:	3c01      	subs	r4, #1
 80a0d24:	d0f3      	beq.n	80a0d0e <_Z17connectToParticlev+0x46>
 80a0d26:	e7d8      	b.n	80a0cda <_Z17connectToParticlev+0x12>
 80a0d28:	2000086c 	.word	0x2000086c

080a0d2c <_Z8BlinkLEDi>:
}

// Function to Blink the LED for alerting. 
void BlinkLED(int LED){
  digitalWrite(LED,HIGH);
  delay(1000);
 80a0d2c:	b510      	push	{r4, lr}
  digitalWrite(LED,LOW);
 80a0d2e:	b284      	uxth	r4, r0
 80a0d30:	2101      	movs	r1, #1
 80a0d32:	4620      	mov	r0, r4
 80a0d34:	f002 fb6b 	bl	80a340e <digitalWrite>
  delay(1000);
 80a0d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0d3c:	f001 f988 	bl	80a2050 <delay>
}
 80a0d40:	4620      	mov	r0, r4
 80a0d42:	2100      	movs	r1, #0
 80a0d44:	f002 fb63 	bl	80a340e <digitalWrite>

// These are the particle functions that allow you to configure and run the device
 80a0d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(LED,HIGH);
  delay(1000);
  digitalWrite(LED,LOW);
  delay(1000);
}

 80a0d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0d50:	f001 b97e 	b.w	80a2050 <delay>

080a0d54 <_Z20meterParticlePublishv>:


bool meterParticlePublish(void)
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
 80a0d54:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0d56:	f000 fee7 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
}
 80a0d5a:	4b04      	ldr	r3, [pc, #16]	; (80a0d6c <_Z20meterParticlePublishv+0x18>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	1ac0      	subs	r0, r0, r3

// These function will allow to change the upper and lower limits for alerting the customer. 
 80a0d60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0d64:	bf34      	ite	cc
 80a0d66:	2000      	movcc	r0, #0
 80a0d68:	2001      	movcs	r0, #1
 80a0d6a:	bd08      	pop	{r3, pc}
 80a0d6c:	20000390 	.word	0x20000390

080a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80a0d70:	b508      	push	{r3, lr}
int setLowerHumidityLimit(String value)
{
  lowerHumidityThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
  return 1;
 80a0d72:	f7ff ffef 	bl	80a0d54 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0d76:	b118      	cbz	r0, 80a0d80 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80a0d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0d7c:	f7ff bfea 	b.w	80a0d54 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80a0d80:	f001 f89e 	bl	80a1ec0 <spark_process>
 80a0d84:	e7f5      	b.n	80a0d72 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25+0x2>

080a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d86:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0d88:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d8a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0d8c:	b17c      	cbz	r4, 80a0dae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0d8e:	6863      	ldr	r3, [r4, #4]
 80a0d90:	3b01      	subs	r3, #1
 80a0d92:	6063      	str	r3, [r4, #4]
 80a0d94:	b95b      	cbnz	r3, 80a0dae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0d96:	6823      	ldr	r3, [r4, #0]
 80a0d98:	4620      	mov	r0, r4
 80a0d9a:	689b      	ldr	r3, [r3, #8]
 80a0d9c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0d9e:	68a3      	ldr	r3, [r4, #8]
 80a0da0:	3b01      	subs	r3, #1
 80a0da2:	60a3      	str	r3, [r4, #8]
 80a0da4:	b91b      	cbnz	r3, 80a0dae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0da6:	6823      	ldr	r3, [r4, #0]
 80a0da8:	4620      	mov	r0, r4
 80a0daa:	68db      	ldr	r3, [r3, #12]
 80a0dac:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0dae:	4628      	mov	r0, r5
 80a0db0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0db4 <_Z14UbidotsHandlerPKcS0_>:
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                                            // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                                                // Copy - overflow safe
 80a0db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0db6:	b085      	sub	sp, #20
  if (!strlen(dataCopy)) {                                                                  // First check to see if there is any data
 80a0db8:	4608      	mov	r0, r1
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                                            // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                                                // Copy - overflow safe
 80a0dba:	af02      	add	r7, sp, #8
 80a0dbc:	460e      	mov	r6, r1
  if (!strlen(dataCopy)) {                                                                  // First check to see if there is any data
 80a0dbe:	f003 fee8 	bl	80a4b92 <strlen>
 80a0dc2:	f100 0308 	add.w	r3, r0, #8
 80a0dc6:	f023 0307 	bic.w	r3, r3, #7
    lastPublish = millis();
    dataInFlight = false;                                                                   // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
}

 80a0dca:	466d      	mov	r5, sp

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                                            // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                                                // Copy - overflow safe
  if (!strlen(dataCopy)) {                                                                  // First check to see if there is any data
 80a0dcc:	ebad 0d03 	sub.w	sp, sp, r3
 80a0dd0:	ac02      	add	r4, sp, #8
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 80a0dd2:	1c42      	adds	r2, r0, #1
 80a0dd4:	4631      	mov	r1, r6
 80a0dd6:	4620      	mov	r0, r4
 80a0dd8:	f003 fef8 	bl	80a4bcc <strncpy>
    return;
 80a0ddc:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a0de0:	b94e      	cbnz	r6, 80a0df6 <_Z14UbidotsHandlerPKcS0_+0x42>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0de2:	f001 f87d 	bl	80a1ee0 <spark_cloud_flag_connected>
  }
 80a0de6:	2800      	cmp	r0, #0
 80a0de8:	d033      	beq.n	80a0e52 <_Z14UbidotsHandlerPKcS0_+0x9e>
 80a0dea:	4b1c      	ldr	r3, [pc, #112]	; (80a0e5c <_Z14UbidotsHandlerPKcS0_+0xa8>)
 80a0dec:	4a1c      	ldr	r2, [pc, #112]	; (80a0e60 <_Z14UbidotsHandlerPKcS0_+0xac>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0dee:	781b      	ldrb	r3, [r3, #0]
 80a0df0:	f88d 6000 	strb.w	r6, [sp]
 80a0df4:	e026      	b.n	80a0e44 <_Z14UbidotsHandlerPKcS0_+0x90>
  int responseCode = atoi(dataCopy);                                                        // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
  {
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f003 fd53 	bl	80a48a2 <atoi>
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
 80a0dfc:	38c8      	subs	r0, #200	; 0xc8
 80a0dfe:	2801      	cmp	r0, #1
 80a0e00:	d817      	bhi.n	80a0e32 <_Z14UbidotsHandlerPKcS0_+0x7e>
 80a0e02:	f001 f86d 	bl	80a1ee0 <spark_cloud_flag_connected>
    lastPublish = millis();
    dataInFlight = false;                                                                   // Data has been received
 80a0e06:	b160      	cbz	r0, 80a0e22 <_Z14UbidotsHandlerPKcS0_+0x6e>
 80a0e08:	4b14      	ldr	r3, [pc, #80]	; (80a0e5c <_Z14UbidotsHandlerPKcS0_+0xa8>)
 80a0e0a:	2200      	movs	r2, #0
 80a0e0c:	781b      	ldrb	r3, [r3, #0]
 80a0e0e:	4638      	mov	r0, r7
 80a0e10:	f88d 2000 	strb.w	r2, [sp]
 80a0e14:	4913      	ldr	r1, [pc, #76]	; (80a0e64 <_Z14UbidotsHandlerPKcS0_+0xb0>)
 80a0e16:	4a14      	ldr	r2, [pc, #80]	; (80a0e68 <_Z14UbidotsHandlerPKcS0_+0xb4>)
 80a0e18:	f7ff feb8 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e1c:	1d38      	adds	r0, r7, #4
 80a0e1e:	f7ff ffb2 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e22:	f000 fe81 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
  }
 80a0e26:	4b11      	ldr	r3, [pc, #68]	; (80a0e6c <_Z14UbidotsHandlerPKcS0_+0xb8>)
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
 80a0e28:	2200      	movs	r2, #0
  if ((responseCode == 200) || (responseCode == 201))
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    lastPublish = millis();
    dataInFlight = false;                                                                   // Data has been received
  }
 80a0e2a:	6018      	str	r0, [r3, #0]
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
 80a0e2c:	4b10      	ldr	r3, [pc, #64]	; (80a0e70 <_Z14UbidotsHandlerPKcS0_+0xbc>)
 80a0e2e:	701a      	strb	r2, [r3, #0]
 80a0e30:	e00f      	b.n	80a0e52 <_Z14UbidotsHandlerPKcS0_+0x9e>
 80a0e32:	f001 f855 	bl	80a1ee0 <spark_cloud_flag_connected>
}

 80a0e36:	b160      	cbz	r0, 80a0e52 <_Z14UbidotsHandlerPKcS0_+0x9e>
 80a0e38:	4b08      	ldr	r3, [pc, #32]	; (80a0e5c <_Z14UbidotsHandlerPKcS0_+0xa8>)
 80a0e3a:	2200      	movs	r2, #0
 80a0e3c:	781b      	ldrb	r3, [r3, #0]
 80a0e3e:	f88d 2000 	strb.w	r2, [sp]
 80a0e42:	4622      	mov	r2, r4
 80a0e44:	4638      	mov	r0, r7
 80a0e46:	490b      	ldr	r1, [pc, #44]	; (80a0e74 <_Z14UbidotsHandlerPKcS0_+0xc0>)
 80a0e48:	f7ff fea0 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a0e4c:	1d38      	adds	r0, r7, #4
 80a0e4e:	f7ff ff9a 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  strncpy(dataCopy, data, sizeof(dataCopy));                                                // Copy - overflow safe
  if (!strlen(dataCopy)) {                                                                  // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
  }
  int responseCode = atoi(dataCopy);                                                        // Response is only a single number thanks to Template
 80a0e52:	46ad      	mov	sp, r5
    dataInFlight = false;                                                                   // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
}

// These are the functions that are part of the takeMeasurements call
 80a0e54:	370c      	adds	r7, #12
 80a0e56:	46bd      	mov	sp, r7
 80a0e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0e5a:	bf00      	nop
 80a0e5c:	20000275 	.word	0x20000275
 80a0e60:	080a6f87 	.word	0x080a6f87
 80a0e64:	080a6fae 	.word	0x080a6fae
 80a0e68:	080a6f9c 	.word	0x080a6f9c
 80a0e6c:	20000390 	.word	0x20000390
 80a0e70:	20000158 	.word	0x20000158
 80a0e74:	080a6f8f 	.word	0x080a6f8f

080a0e78 <_Z16ThresholdCrossedv>:

// Function to send sms for threshold values

bool ThresholdCrossed(){
  
  if ((lowerTemperatureThreshold || upperTemperatureThreshold)!=0){                               // If lower or upper threshold conditions are True. 
 80a0e78:	b570      	push	{r4, r5, r6, lr}
    
    BlinkLED(tempLED);                                                                            // Start Blinking LED
 80a0e7a:	4b31      	ldr	r3, [pc, #196]	; (80a0f40 <_Z16ThresholdCrossedv+0xc8>)

// Function to send sms for threshold values

bool ThresholdCrossed(){
  
  if ((lowerTemperatureThreshold || upperTemperatureThreshold)!=0){                               // If lower or upper threshold conditions are True. 
 80a0e7c:	b086      	sub	sp, #24
    
    BlinkLED(tempLED);                                                                            // Start Blinking LED
 80a0e7e:	2100      	movs	r1, #0
 80a0e80:	6818      	ldr	r0, [r3, #0]
 80a0e82:	f003 fb11 	bl	80a44a8 <__aeabi_fcmpeq>
 80a0e86:	2600      	movs	r6, #0
 80a0e88:	4c2e      	ldr	r4, [pc, #184]	; (80a0f44 <_Z16ThresholdCrossedv+0xcc>)
 80a0e8a:	b128      	cbz	r0, 80a0e98 <_Z16ThresholdCrossedv+0x20>
 80a0e8c:	4b2e      	ldr	r3, [pc, #184]	; (80a0f48 <_Z16ThresholdCrossedv+0xd0>)
 80a0e8e:	4631      	mov	r1, r6
 80a0e90:	6818      	ldr	r0, [r3, #0]
 80a0e92:	f003 fb09 	bl	80a44a8 <__aeabi_fcmpeq>
 80a0e96:	b9d8      	cbnz	r0, 80a0ed0 <_Z16ThresholdCrossedv+0x58>
    snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Temperature Threshold Crossed. Current Temperature is: %4.1f",temperatureInC);
    Particle.publish("sms-webhook",smsString,PRIVATE);                                            // Send the webhook . 
 80a0e98:	2005      	movs	r0, #5
 80a0e9a:	f7ff ff47 	bl	80a0d2c <_Z8BlinkLEDi>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
 80a0e9e:	4b2b      	ldr	r3, [pc, #172]	; (80a0f4c <_Z16ThresholdCrossedv+0xd4>)
 80a0ea0:	2140      	movs	r1, #64	; 0x40
 80a0ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ea6:	482a      	ldr	r0, [pc, #168]	; (80a0f50 <_Z16ThresholdCrossedv+0xd8>)
 80a0ea8:	e9cd 2300 	strd	r2, r3, [sp]
 80a0eac:	4a29      	ldr	r2, [pc, #164]	; (80a0f54 <_Z16ThresholdCrossedv+0xdc>)
 80a0eae:	f001 f8b7 	bl	80a2020 <snprintf>
 80a0eb2:	4b29      	ldr	r3, [pc, #164]	; (80a0f58 <_Z16ThresholdCrossedv+0xe0>)
  }
 80a0eb4:	2200      	movs	r2, #0
 80a0eb6:	781b      	ldrb	r3, [r3, #0]
 80a0eb8:	4928      	ldr	r1, [pc, #160]	; (80a0f5c <_Z16ThresholdCrossedv+0xe4>)
 80a0eba:	f88d 2000 	strb.w	r2, [sp]
 80a0ebe:	a804      	add	r0, sp, #16
 80a0ec0:	4a23      	ldr	r2, [pc, #140]	; (80a0f50 <_Z16ThresholdCrossedv+0xd8>)
 80a0ec2:	f7ff fe63 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a0ec6:	a805      	add	r0, sp, #20
 80a0ec8:	f7ff ff5d 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

 80a0ecc:	2301      	movs	r3, #1
 80a0ece:	7023      	strb	r3, [r4, #0]
  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
    
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
 80a0ed0:	4b23      	ldr	r3, [pc, #140]	; (80a0f60 <_Z16ThresholdCrossedv+0xe8>)
 80a0ed2:	781a      	ldrb	r2, [r3, #0]
 80a0ed4:	461d      	mov	r5, r3
 80a0ed6:	b912      	cbnz	r2, 80a0ede <_Z16ThresholdCrossedv+0x66>
 80a0ed8:	4b22      	ldr	r3, [pc, #136]	; (80a0f64 <_Z16ThresholdCrossedv+0xec>)
 80a0eda:	781b      	ldrb	r3, [r3, #0]
 80a0edc:	b303      	cbz	r3, 80a0f20 <_Z16ThresholdCrossedv+0xa8>
    snprintf(smsString,sizeof(smsString),"ALERT FROM KumvaIoT: Humidity Threshold Crossed. Current Humidity is: %4.1f and Current Temperature is: %4.1f",temperatureInC,relativeHumidity);
    Particle.publish("sms-webhook",smsString,PRIVATE);
 80a0ede:	2007      	movs	r0, #7
 80a0ee0:	f7ff ff24 	bl	80a0d2c <_Z8BlinkLEDi>
    thresholdCrossAcknowledged = true;
 80a0ee4:	4b20      	ldr	r3, [pc, #128]	; (80a0f68 <_Z16ThresholdCrossedv+0xf0>)
 80a0ee6:	2140      	movs	r1, #64	; 0x40
 80a0ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0ef0:	4b16      	ldr	r3, [pc, #88]	; (80a0f4c <_Z16ThresholdCrossedv+0xd4>)
 80a0ef2:	4817      	ldr	r0, [pc, #92]	; (80a0f50 <_Z16ThresholdCrossedv+0xd8>)
 80a0ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ef8:	e9cd 2300 	strd	r2, r3, [sp]
 80a0efc:	4a1b      	ldr	r2, [pc, #108]	; (80a0f6c <_Z16ThresholdCrossedv+0xf4>)
 80a0efe:	f001 f88f 	bl	80a2020 <snprintf>
 80a0f02:	4b15      	ldr	r3, [pc, #84]	; (80a0f58 <_Z16ThresholdCrossedv+0xe0>)
  }
 80a0f04:	2200      	movs	r2, #0
 80a0f06:	781b      	ldrb	r3, [r3, #0]
 80a0f08:	4914      	ldr	r1, [pc, #80]	; (80a0f5c <_Z16ThresholdCrossedv+0xe4>)
 80a0f0a:	f88d 2000 	strb.w	r2, [sp]
 80a0f0e:	a804      	add	r0, sp, #16
 80a0f10:	4a0f      	ldr	r2, [pc, #60]	; (80a0f50 <_Z16ThresholdCrossedv+0xd8>)
 80a0f12:	f7ff fe3b 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a0f16:	a805      	add	r0, sp, #20
 80a0f18:	f7ff ff35 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

 80a0f1c:	2301      	movs	r3, #1
 80a0f1e:	7023      	strb	r3, [r4, #0]
  thresholdTimeStamp = Time.minute();

  if (thresholdCrossAcknowledged == true)
 80a0f20:	f001 ffe2 	bl	80a2ee8 <_ZN9TimeClass6minuteEv>
 80a0f24:	4b12      	ldr	r3, [pc, #72]	; (80a0f70 <_Z16ThresholdCrossedv+0xf8>)
 80a0f26:	6018      	str	r0, [r3, #0]
  {
    upperHumidityThresholdCrossed = false;
 80a0f28:	7823      	ldrb	r3, [r4, #0]
 80a0f2a:	b12b      	cbz	r3, 80a0f38 <_Z16ThresholdCrossedv+0xc0>
    lowerHumidityThresholdCrossed = false;
    upperTemperatureThreshold     = false;
    lowerHumidityThresholdCrossed = false;
 80a0f2c:	4a0d      	ldr	r2, [pc, #52]	; (80a0f64 <_Z16ThresholdCrossedv+0xec>)

  if (thresholdCrossAcknowledged == true)
  {
    upperHumidityThresholdCrossed = false;
    lowerHumidityThresholdCrossed = false;
    upperTemperatureThreshold     = false;
 80a0f2e:	2300      	movs	r3, #0
 80a0f30:	702b      	strb	r3, [r5, #0]
    lowerHumidityThresholdCrossed = false;
 80a0f32:	7013      	strb	r3, [r2, #0]
  }
 80a0f34:	4b04      	ldr	r3, [pc, #16]	; (80a0f48 <_Z16ThresholdCrossedv+0xd0>)
 80a0f36:	601e      	str	r6, [r3, #0]


  return 1;
}


 80a0f38:	2001      	movs	r0, #1
 80a0f3a:	b006      	add	sp, #24
 80a0f3c:	bd70      	pop	{r4, r5, r6, pc}
 80a0f3e:	bf00      	nop
 80a0f40:	2000015c 	.word	0x2000015c
 80a0f44:	200002c4 	.word	0x200002c4
 80a0f48:	20000154 	.word	0x20000154
 80a0f4c:	200002f8 	.word	0x200002f8
 80a0f50:	20000284 	.word	0x20000284
 80a0f54:	080a6fb4 	.word	0x080a6fb4
 80a0f58:	20000275 	.word	0x20000275
 80a0f5c:	080a7006 	.word	0x080a7006
 80a0f60:	200002c6 	.word	0x200002c6
 80a0f64:	200002c7 	.word	0x200002c7
 80a0f68:	20000398 	.word	0x20000398
 80a0f6c:	080a7012 	.word	0x080a7012
 80a0f70:	2000025c 	.word	0x2000025c

080a0f74 <_Z14setVerboseMode6String>:
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
 80a0f74:	b530      	push	{r4, r5, lr}
 80a0f76:	4913      	ldr	r1, [pc, #76]	; (80a0fc4 <_Z14setVerboseMode6String+0x50>)
 80a0f78:	b085      	sub	sp, #20
 80a0f7a:	4605      	mov	r5, r0
 80a0f7c:	f001 feeb 	bl	80a2d56 <_ZNK6String6equalsEPKc>
    verboseMode = true;
 80a0f80:	4604      	mov	r4, r0
 80a0f82:	b148      	cbz	r0, 80a0f98 <_Z14setVerboseMode6String+0x24>
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
 80a0f84:	4b10      	ldr	r3, [pc, #64]	; (80a0fc8 <_Z14setVerboseMode6String+0x54>)
 80a0f86:	2401      	movs	r4, #1
 80a0f88:	701c      	strb	r4, [r3, #0]
 80a0f8a:	4b10      	ldr	r3, [pc, #64]	; (80a0fcc <_Z14setVerboseMode6String+0x58>)
  }
 80a0f8c:	2200      	movs	r2, #0
 80a0f8e:	781b      	ldrb	r3, [r3, #0]
 80a0f90:	f88d 2000 	strb.w	r2, [sp]
 80a0f94:	4a0e      	ldr	r2, [pc, #56]	; (80a0fd0 <_Z14setVerboseMode6String+0x5c>)
 80a0f96:	e00b      	b.n	80a0fb0 <_Z14setVerboseMode6String+0x3c>
 80a0f98:	490e      	ldr	r1, [pc, #56]	; (80a0fd4 <_Z14setVerboseMode6String+0x60>)
 80a0f9a:	4628      	mov	r0, r5
 80a0f9c:	f001 fedb 	bl	80a2d56 <_ZNK6String6equalsEPKc>
  else if (command == "0")
  {
    verboseMode = false;
 80a0fa0:	b170      	cbz	r0, 80a0fc0 <_Z14setVerboseMode6String+0x4c>
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
    return 1;
 80a0fa2:	4b09      	ldr	r3, [pc, #36]	; (80a0fc8 <_Z14setVerboseMode6String+0x54>)
  }
 80a0fa4:	4a0c      	ldr	r2, [pc, #48]	; (80a0fd8 <_Z14setVerboseMode6String+0x64>)
  }
  else if (command == "0")
  {
    verboseMode = false;
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
    return 1;
 80a0fa6:	701c      	strb	r4, [r3, #0]
 80a0fa8:	4b08      	ldr	r3, [pc, #32]	; (80a0fcc <_Z14setVerboseMode6String+0x58>)
 80a0faa:	781b      	ldrb	r3, [r3, #0]
  }
 80a0fac:	f88d 4000 	strb.w	r4, [sp]
 80a0fb0:	490a      	ldr	r1, [pc, #40]	; (80a0fdc <_Z14setVerboseMode6String+0x68>)
 80a0fb2:	a802      	add	r0, sp, #8
 80a0fb4:	f7ff fdea 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a0fb8:	a803      	add	r0, sp, #12
 80a0fba:	f7ff fee4 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0fbe:	2001      	movs	r0, #1
  else return 0;
}


 80a0fc0:	b005      	add	sp, #20
 80a0fc2:	bd30      	pop	{r4, r5, pc}
 80a0fc4:	080a7269 	.word	0x080a7269
 80a0fc8:	200002f0 	.word	0x200002f0
 80a0fcc:	20000275 	.word	0x20000275
 80a0fd0:	080a7080 	.word	0x080a7080
 80a0fd4:	080a71f9 	.word	0x080a71f9
 80a0fd8:	080a7091 	.word	0x080a7091
 80a0fdc:	080a70a1 	.word	0x080a70a1

080a0fe0 <_Z22publishStateTransitionv>:
void publishStateTransition(void)
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0fe0:	b530      	push	{r4, r5, lr}
  oldState = state;
  if(Particle.connected()) {
 80a0fe2:	4d18      	ldr	r5, [pc, #96]	; (80a1044 <_Z22publishStateTransitionv+0x64>)
 80a0fe4:	4918      	ldr	r1, [pc, #96]	; (80a1048 <_Z22publishStateTransitionv+0x68>)
 80a0fe6:	782a      	ldrb	r2, [r5, #0]
 80a0fe8:	231a      	movs	r3, #26
 80a0fea:	fb03 1202 	mla	r2, r3, r2, r1
 80a0fee:	4c17      	ldr	r4, [pc, #92]	; (80a104c <_Z22publishStateTransitionv+0x6c>)


void publishStateTransition(void)
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0ff0:	b08f      	sub	sp, #60	; 0x3c
  oldState = state;
  if(Particle.connected()) {
 80a0ff2:	7820      	ldrb	r0, [r4, #0]
 80a0ff4:	9200      	str	r2, [sp, #0]
 80a0ff6:	fb03 1300 	mla	r3, r3, r0, r1
 80a0ffa:	4a15      	ldr	r2, [pc, #84]	; (80a1050 <_Z22publishStateTransitionv+0x70>)
 80a0ffc:	2128      	movs	r1, #40	; 0x28
 80a0ffe:	a804      	add	r0, sp, #16
 80a1000:	f001 f80e 	bl	80a2020 <snprintf>
    waitUntil(meterParticlePublish);
 80a1004:	782b      	ldrb	r3, [r5, #0]
 80a1006:	7023      	strb	r3, [r4, #0]
 80a1008:	f000 ff6a 	bl	80a1ee0 <spark_cloud_flag_connected>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 80a100c:	b190      	cbz	r0, 80a1034 <_Z22publishStateTransitionv+0x54>
    lastPublish = millis();
 80a100e:	f7ff feaf 	bl	80a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>
 80a1012:	4b10      	ldr	r3, [pc, #64]	; (80a1054 <_Z22publishStateTransitionv+0x74>)
  }
 80a1014:	2200      	movs	r2, #0
 80a1016:	781b      	ldrb	r3, [r3, #0]
 80a1018:	490f      	ldr	r1, [pc, #60]	; (80a1058 <_Z22publishStateTransitionv+0x78>)
 80a101a:	f88d 2000 	strb.w	r2, [sp]
 80a101e:	a802      	add	r0, sp, #8
 80a1020:	aa04      	add	r2, sp, #16
 80a1022:	f7ff fdb3 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a1026:	a803      	add	r0, sp, #12
 80a1028:	f7ff fead 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a102c:	f000 fd7c 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
  Serial.println(stateTransitionString);
 80a1030:	4b0a      	ldr	r3, [pc, #40]	; (80a105c <_Z22publishStateTransitionv+0x7c>)
 80a1032:	6018      	str	r0, [r3, #0]
}

 80a1034:	f002 f85a 	bl	80a30ec <_Z16_fetch_usbserialv>
 80a1038:	a904      	add	r1, sp, #16
 80a103a:	f001 fcf6 	bl	80a2a2a <_ZN5Print7printlnEPKc>

 80a103e:	b00f      	add	sp, #60	; 0x3c
 80a1040:	bd30      	pop	{r4, r5, pc}
 80a1042:	bf00      	nop
 80a1044:	200002c5 	.word	0x200002c5
 80a1048:	20000080 	.word	0x20000080
 80a104c:	20000274 	.word	0x20000274
 80a1050:	080a70a6 	.word	0x080a70a6
 80a1054:	20000275 	.word	0x20000275
 80a1058:	080a70b4 	.word	0x080a70b4
 80a105c:	20000390 	.word	0x20000390

080a1060 <loop>:
}

void loop()
{

  switch(state) {
 80a1060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  
  case IDLE_STATE:
 80a1062:	4c6c      	ldr	r4, [pc, #432]	; (80a1214 <loop+0x1b4>)
 80a1064:	7823      	ldrb	r3, [r4, #0]
 80a1066:	3b01      	subs	r3, #1
 80a1068:	2b05      	cmp	r3, #5
 80a106a:	f200 80d1 	bhi.w	80a1210 <loop+0x1b0>
 80a106e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a1072:	008b      	.short	0x008b
 80a1074:	00300006 	.word	0x00300006
 80a1078:	00cf001f 	.word	0x00cf001f
 80a107c:	005d      	.short	0x005d
   
    static int TimePassed = 0;
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 10 ) {
 80a107e:	4b66      	ldr	r3, [pc, #408]	; (80a1218 <loop+0x1b8>)
 80a1080:	781b      	ldrb	r3, [r3, #0]
 80a1082:	b12b      	cbz	r3, 80a1090 <loop+0x30>
 80a1084:	4b65      	ldr	r3, [pc, #404]	; (80a121c <loop+0x1bc>)
 80a1086:	781b      	ldrb	r3, [r3, #0]
 80a1088:	2b02      	cmp	r3, #2
 80a108a:	d001      	beq.n	80a1090 <loop+0x30>
 80a108c:	f7ff ffa8 	bl	80a0fe0 <_Z22publishStateTransitionv>
      TimePassed = Time.minute();
      state = MEASURING_STATE;                                                     
 80a1090:	f001 ff20 	bl	80a2ed4 <_ZN9TimeClass4hourEv>
 80a1094:	4b62      	ldr	r3, [pc, #392]	; (80a1220 <loop+0x1c0>)
 80a1096:	4d63      	ldr	r5, [pc, #396]	; (80a1224 <loop+0x1c4>)
 80a1098:	781b      	ldrb	r3, [r3, #0]
 80a109a:	4298      	cmp	r0, r3
 80a109c:	f040 809e 	bne.w	80a11dc <loop+0x17c>
 80a10a0:	f001 ff22 	bl	80a2ee8 <_ZN9TimeClass6minuteEv>
 80a10a4:	682b      	ldr	r3, [r5, #0]
 80a10a6:	1ac0      	subs	r0, r0, r3
 80a10a8:	2809      	cmp	r0, #9
 80a10aa:	f300 8097 	bgt.w	80a11dc <loop+0x17c>
 80a10ae:	e09a      	b.n	80a11e6 <loop+0x186>
    break;

  case THRESHOLD_CROSSED:
    if (verboseMode && state != oldState) publishStateTransition();
    
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
 80a10b0:	4b59      	ldr	r3, [pc, #356]	; (80a1218 <loop+0x1b8>)
 80a10b2:	781b      	ldrb	r3, [r3, #0]
 80a10b4:	b12b      	cbz	r3, 80a10c2 <loop+0x62>
 80a10b6:	4b59      	ldr	r3, [pc, #356]	; (80a121c <loop+0x1bc>)
 80a10b8:	781b      	ldrb	r3, [r3, #0]
 80a10ba:	2b04      	cmp	r3, #4
 80a10bc:	d001      	beq.n	80a10c2 <loop+0x62>
 80a10be:	f7ff ff8f 	bl	80a0fe0 <_Z22publishStateTransitionv>
      ThresholdCrossed();
      state = IDLE_STATE;
 80a10c2:	f7ff fd71 	bl	80a0ba8 <_Z16takeMeasurementsv>
 80a10c6:	b110      	cbz	r0, 80a10ce <loop+0x6e>
    }else
 80a10c8:	f7ff fed6 	bl	80a0e78 <_Z16ThresholdCrossedv>
 80a10cc:	e03a      	b.n	80a1144 <loop+0xe4>
    {
      state= ERROR_STATE;
    }
    break;
 80a10ce:	2301      	movs	r3, #1
 80a10d0:	e09d      	b.n	80a120e <loop+0x1ae>

  case MEASURING_STATE:                                                                     // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
    if (!takeMeasurements())
    {
 80a10d2:	4b51      	ldr	r3, [pc, #324]	; (80a1218 <loop+0x1b8>)
 80a10d4:	781a      	ldrb	r2, [r3, #0]
 80a10d6:	461d      	mov	r5, r3
 80a10d8:	b12a      	cbz	r2, 80a10e6 <loop+0x86>
 80a10da:	4b50      	ldr	r3, [pc, #320]	; (80a121c <loop+0x1bc>)
 80a10dc:	781b      	ldrb	r3, [r3, #0]
 80a10de:	2b03      	cmp	r3, #3
 80a10e0:	d001      	beq.n	80a10e6 <loop+0x86>
 80a10e2:	f7ff ff7d 	bl	80a0fe0 <_Z22publishStateTransitionv>
      state = ERROR_STATE;
 80a10e6:	f7ff fd5f 	bl	80a0ba8 <_Z16takeMeasurementsv>
 80a10ea:	4606      	mov	r6, r0
 80a10ec:	b9e0      	cbnz	r0, 80a1128 <loop+0xc8>
      resetTimeStamp = millis();
      if (verboseMode) {
 80a10ee:	2301      	movs	r3, #1
 80a10f0:	7023      	strb	r3, [r4, #0]
 80a10f2:	f000 fd19 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
        waitUntil(meterParticlePublish);
 80a10f6:	4b4c      	ldr	r3, [pc, #304]	; (80a1228 <loop+0x1c8>)
 80a10f8:	6018      	str	r0, [r3, #0]
        Particle.publish("State","Error taking Measurements",PRIVATE);
 80a10fa:	782b      	ldrb	r3, [r5, #0]
 80a10fc:	2b00      	cmp	r3, #0
 80a10fe:	f000 8087 	beq.w	80a1210 <loop+0x1b0>
        lastPublish = millis();
 80a1102:	f7ff fe35 	bl	80a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>
 80a1106:	4b49      	ldr	r3, [pc, #292]	; (80a122c <loop+0x1cc>)
      }
 80a1108:	4a49      	ldr	r2, [pc, #292]	; (80a1230 <loop+0x1d0>)
 80a110a:	781b      	ldrb	r3, [r3, #0]
 80a110c:	4949      	ldr	r1, [pc, #292]	; (80a1234 <loop+0x1d4>)
 80a110e:	a802      	add	r0, sp, #8
 80a1110:	f88d 6000 	strb.w	r6, [sp]
 80a1114:	f7ff fd3a 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a1118:	a803      	add	r0, sp, #12
 80a111a:	f7ff fe34 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a111e:	f000 fd03 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
    }
 80a1122:	4b45      	ldr	r3, [pc, #276]	; (80a1238 <loop+0x1d8>)
 80a1124:	6018      	str	r0, [r3, #0]
 80a1126:	e073      	b.n	80a1210 <loop+0x1b0>
    else state = REPORTING_STATE;
    break;

 80a1128:	2305      	movs	r3, #5
 80a112a:	e070      	b.n	80a120e <loop+0x1ae>
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (!dataInFlight)                                                // Response received back to IDLE state
    {
 80a112c:	4b3a      	ldr	r3, [pc, #232]	; (80a1218 <loop+0x1b8>)
 80a112e:	781b      	ldrb	r3, [r3, #0]
 80a1130:	b12b      	cbz	r3, 80a113e <loop+0xde>
 80a1132:	4b3a      	ldr	r3, [pc, #232]	; (80a121c <loop+0x1bc>)
 80a1134:	781b      	ldrb	r3, [r3, #0]
 80a1136:	2b06      	cmp	r3, #6
 80a1138:	d001      	beq.n	80a113e <loop+0xde>
 80a113a:	f7ff ff51 	bl	80a0fe0 <_Z22publishStateTransitionv>
     state = IDLE_STATE;
 80a113e:	4b3f      	ldr	r3, [pc, #252]	; (80a123c <loop+0x1dc>)
 80a1140:	781b      	ldrb	r3, [r3, #0]
 80a1142:	b90b      	cbnz	r3, 80a1148 <loop+0xe8>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 80a1144:	2302      	movs	r3, #2
 80a1146:	e062      	b.n	80a120e <loop+0x1ae>
 80a1148:	f000 fcee 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 80a114c:	4b3c      	ldr	r3, [pc, #240]	; (80a1240 <loop+0x1e0>)
 80a114e:	681b      	ldr	r3, [r3, #0]
 80a1150:	1ac0      	subs	r0, r0, r3
 80a1152:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80a1156:	4298      	cmp	r0, r3
 80a1158:	d95a      	bls.n	80a1210 <loop+0x1b0>
 80a115a:	f000 fce5 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
      state = ERROR_STATE;                                            // Response timed out
 80a115e:	4d32      	ldr	r5, [pc, #200]	; (80a1228 <loop+0x1c8>)
 80a1160:	4b32      	ldr	r3, [pc, #200]	; (80a122c <loop+0x1cc>)
      resetTimeStamp = millis();
 80a1162:	2200      	movs	r2, #0
 80a1164:	781b      	ldrb	r3, [r3, #0]
     state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
      state = ERROR_STATE;                                            // Response timed out
 80a1166:	6028      	str	r0, [r5, #0]
      resetTimeStamp = millis();
 80a1168:	4936      	ldr	r1, [pc, #216]	; (80a1244 <loop+0x1e4>)
 80a116a:	f88d 2000 	strb.w	r2, [sp]
 80a116e:	a802      	add	r0, sp, #8
 80a1170:	4a35      	ldr	r2, [pc, #212]	; (80a1248 <loop+0x1e8>)
 80a1172:	f7ff fd0b 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a1176:	a803      	add	r0, sp, #12
 80a1178:	f7ff fe05 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
 80a117c:	2301      	movs	r3, #1
 80a117e:	7023      	strb	r3, [r4, #0]
 80a1180:	f000 fcd2 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
    break;
 80a1184:	6028      	str	r0, [r5, #0]
 80a1186:	e043      	b.n	80a1210 <loop+0x1b0>

  
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
    if (millis() > resetTimeStamp + resetWait)
    {
 80a1188:	4b23      	ldr	r3, [pc, #140]	; (80a1218 <loop+0x1b8>)
 80a118a:	781b      	ldrb	r3, [r3, #0]
 80a118c:	b12b      	cbz	r3, 80a119a <loop+0x13a>
 80a118e:	4b23      	ldr	r3, [pc, #140]	; (80a121c <loop+0x1bc>)
 80a1190:	781b      	ldrb	r3, [r3, #0]
 80a1192:	2b01      	cmp	r3, #1
 80a1194:	d001      	beq.n	80a119a <loop+0x13a>
 80a1196:	f7ff ff23 	bl	80a0fe0 <_Z22publishStateTransitionv>
 80a119a:	f000 fcc5 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 80a119e:	4b22      	ldr	r3, [pc, #136]	; (80a1228 <loop+0x1c8>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80a11a6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80a11aa:	4283      	cmp	r3, r0
 80a11ac:	d230      	bcs.n	80a1210 <loop+0x1b0>
 80a11ae:	f000 fe97 	bl	80a1ee0 <spark_cloud_flag_connected>
      delay(2000);
      System.reset();
 80a11b2:	b160      	cbz	r0, 80a11ce <loop+0x16e>
 80a11b4:	4b1d      	ldr	r3, [pc, #116]	; (80a122c <loop+0x1cc>)
 80a11b6:	2200      	movs	r2, #0
 80a11b8:	781b      	ldrb	r3, [r3, #0]
 80a11ba:	a802      	add	r0, sp, #8
 80a11bc:	f88d 2000 	strb.w	r2, [sp]
 80a11c0:	491c      	ldr	r1, [pc, #112]	; (80a1234 <loop+0x1d4>)
 80a11c2:	4a22      	ldr	r2, [pc, #136]	; (80a124c <loop+0x1ec>)
 80a11c4:	f7ff fce2 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a11c8:	a803      	add	r0, sp, #12
 80a11ca:	f7ff fddc 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
 80a11ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a11d2:	f000 ff3d 	bl	80a2050 <delay>
    break;
 80a11d6:	f001 fdf7 	bl	80a2dc8 <_ZN11SystemClass5resetEv>
  }
}

void sendEvent()
 80a11da:	e019      	b.n	80a1210 <loop+0x1b0>
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 10 ) {
      TimePassed = Time.minute();
      state = MEASURING_STATE;                                                     
      }
 80a11dc:	f001 fe84 	bl	80a2ee8 <_ZN9TimeClass6minuteEv>
    
 80a11e0:	2303      	movs	r3, #3
    if (verboseMode && state != oldState) publishStateTransition();
   
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 10 ) {
      TimePassed = Time.minute();
      state = MEASURING_STATE;                                                     
      }
 80a11e2:	6028      	str	r0, [r5, #0]
 80a11e4:	e013      	b.n	80a120e <loop+0x1ae>
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
    || upperHumidityThresholdCrossed \
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 10))                 // Send threshold message after every 10 minutes.
    {
      state = THRESHOLD_CROSSED;
 80a11e6:	4b1a      	ldr	r3, [pc, #104]	; (80a1250 <loop+0x1f0>)
 80a11e8:	781b      	ldrb	r3, [r3, #0]
 80a11ea:	b943      	cbnz	r3, 80a11fe <loop+0x19e>
      }
    
    else if ((upperTemperatureThresholdCrossed \
    || lowerTemperatureThresholdCrossed \
    || upperHumidityThresholdCrossed \
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 10))                 // Send threshold message after every 10 minutes.
 80a11ec:	4b19      	ldr	r3, [pc, #100]	; (80a1254 <loop+0x1f4>)
 80a11ee:	781b      	ldrb	r3, [r3, #0]
 80a11f0:	b92b      	cbnz	r3, 80a11fe <loop+0x19e>
    {
 80a11f2:	4b19      	ldr	r3, [pc, #100]	; (80a1258 <loop+0x1f8>)
 80a11f4:	781b      	ldrb	r3, [r3, #0]
 80a11f6:	b913      	cbnz	r3, 80a11fe <loop+0x19e>
      state = THRESHOLD_CROSSED;
 80a11f8:	4b18      	ldr	r3, [pc, #96]	; (80a125c <loop+0x1fc>)
 80a11fa:	781b      	ldrb	r3, [r3, #0]
 80a11fc:	b143      	cbz	r3, 80a1210 <loop+0x1b0>
 80a11fe:	f001 fe73 	bl	80a2ee8 <_ZN9TimeClass6minuteEv>
 80a1202:	4b17      	ldr	r3, [pc, #92]	; (80a1260 <loop+0x200>)
 80a1204:	681b      	ldr	r3, [r3, #0]
 80a1206:	1ac0      	subs	r0, r0, r3
 80a1208:	280a      	cmp	r0, #10
 80a120a:	dd01      	ble.n	80a1210 <loop+0x1b0>
    }
    break;
 80a120c:	2304      	movs	r3, #4
 80a120e:	7023      	strb	r3, [r4, #0]
    }
    break;
  }
}

void sendEvent()
 80a1210:	b004      	add	sp, #16
 80a1212:	bd70      	pop	{r4, r5, r6, pc}
 80a1214:	200002c5 	.word	0x200002c5
 80a1218:	200002f0 	.word	0x200002f0
 80a121c:	20000274 	.word	0x20000274
 80a1220:	200002d0 	.word	0x200002d0
 80a1224:	20000278 	.word	0x20000278
 80a1228:	20000304 	.word	0x20000304
 80a122c:	20000275 	.word	0x20000275
 80a1230:	080a70c5 	.word	0x080a70c5
 80a1234:	080a6fae 	.word	0x080a6fae
 80a1238:	20000390 	.word	0x20000390
 80a123c:	20000158 	.word	0x20000158
 80a1240:	20000270 	.word	0x20000270
 80a1244:	080a70df 	.word	0x080a70df
 80a1248:	080a72fe 	.word	0x080a72fe
 80a124c:	080a70f8 	.word	0x080a70f8
 80a1250:	200002d1 	.word	0x200002d1
 80a1254:	20000300 	.word	0x20000300
 80a1258:	200002c6 	.word	0x200002c6
 80a125c:	200002c7 	.word	0x200002c7
 80a1260:	2000025c 	.word	0x2000025c

080a1264 <_Z17setUpperTempLimit6String>:
// These function will allow to change the upper and lower limits for alerting the customer. 

int setUpperTempLimit(String value)
{
  upperTemperatureThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
 80a1264:	b510      	push	{r4, lr}
 80a1266:	b088      	sub	sp, #32
 80a1268:	4604      	mov	r4, r0
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
 80a126a:	f001 fd9e 	bl	80a2daa <_ZNK6String7toFloatEv>
 80a126e:	4b0d      	ldr	r3, [pc, #52]	; (80a12a4 <_Z17setUpperTempLimit6String+0x40>)
 80a1270:	6018      	str	r0, [r3, #0]
  return 1;
 80a1272:	f7ff fd7d 	bl	80a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>
}
 80a1276:	4621      	mov	r1, r4
 80a1278:	a804      	add	r0, sp, #16
 80a127a:	f001 fd61 	bl	80a2d40 <_ZN6StringC1ERKS_>
 80a127e:	4b0a      	ldr	r3, [pc, #40]	; (80a12a8 <_Z17setUpperTempLimit6String+0x44>)
 80a1280:	2200      	movs	r2, #0
 80a1282:	781b      	ldrb	r3, [r3, #0]
 80a1284:	4909      	ldr	r1, [pc, #36]	; (80a12ac <_Z17setUpperTempLimit6String+0x48>)
 80a1286:	f88d 2000 	strb.w	r2, [sp]
 80a128a:	a802      	add	r0, sp, #8
 80a128c:	9a04      	ldr	r2, [sp, #16]
 80a128e:	f7ff fc7d 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a1292:	a803      	add	r0, sp, #12
 80a1294:	f7ff fd77 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1298:	a804      	add	r0, sp, #16
 80a129a:	f001 fce8 	bl	80a2c6e <_ZN6StringD1Ev>

int setLowerTempLimit(String value)
 80a129e:	2001      	movs	r0, #1
 80a12a0:	b008      	add	sp, #32
 80a12a2:	bd10      	pop	{r4, pc}
 80a12a4:	20000154 	.word	0x20000154
 80a12a8:	20000275 	.word	0x20000275
 80a12ac:	080a710c 	.word	0x080a710c

080a12b0 <_Z17setLowerTempLimit6String>:
{
  lowerTemperatureThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
 80a12b0:	b510      	push	{r4, lr}
 80a12b2:	b088      	sub	sp, #32
 80a12b4:	4604      	mov	r4, r0
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
 80a12b6:	f001 fd78 	bl	80a2daa <_ZNK6String7toFloatEv>
 80a12ba:	4b0d      	ldr	r3, [pc, #52]	; (80a12f0 <_Z17setLowerTempLimit6String+0x40>)
 80a12bc:	6018      	str	r0, [r3, #0]
  return 1;
 80a12be:	f7ff fd57 	bl	80a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>

 80a12c2:	4621      	mov	r1, r4
 80a12c4:	a804      	add	r0, sp, #16
 80a12c6:	f001 fd3b 	bl	80a2d40 <_ZN6StringC1ERKS_>
 80a12ca:	4b0a      	ldr	r3, [pc, #40]	; (80a12f4 <_Z17setLowerTempLimit6String+0x44>)
 80a12cc:	2200      	movs	r2, #0
 80a12ce:	781b      	ldrb	r3, [r3, #0]
 80a12d0:	4909      	ldr	r1, [pc, #36]	; (80a12f8 <_Z17setLowerTempLimit6String+0x48>)
 80a12d2:	f88d 2000 	strb.w	r2, [sp]
 80a12d6:	a802      	add	r0, sp, #8
 80a12d8:	9a04      	ldr	r2, [sp, #16]
 80a12da:	f7ff fc57 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a12de:	a803      	add	r0, sp, #12
 80a12e0:	f7ff fd51 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a12e4:	a804      	add	r0, sp, #16
 80a12e6:	f001 fcc2 	bl	80a2c6e <_ZN6StringD1Ev>
}

int setUpperHumidityLimit(String value)
 80a12ea:	2001      	movs	r0, #1
 80a12ec:	b008      	add	sp, #32
 80a12ee:	bd10      	pop	{r4, pc}
 80a12f0:	2000015c 	.word	0x2000015c
 80a12f4:	20000275 	.word	0x20000275
 80a12f8:	080a7120 	.word	0x080a7120

080a12fc <_Z21setUpperHumidityLimit6String>:
{
  upperHumidityThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
 80a12fc:	b510      	push	{r4, lr}
 80a12fe:	b088      	sub	sp, #32
 80a1300:	4604      	mov	r4, r0
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
 80a1302:	f001 fd52 	bl	80a2daa <_ZNK6String7toFloatEv>
 80a1306:	4b0d      	ldr	r3, [pc, #52]	; (80a133c <_Z21setUpperHumidityLimit6String+0x40>)
 80a1308:	6018      	str	r0, [r3, #0]
  return 1;
 80a130a:	f7ff fd31 	bl	80a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>
}
 80a130e:	4621      	mov	r1, r4
 80a1310:	a804      	add	r0, sp, #16
 80a1312:	f001 fd15 	bl	80a2d40 <_ZN6StringC1ERKS_>
 80a1316:	4b0a      	ldr	r3, [pc, #40]	; (80a1340 <_Z21setUpperHumidityLimit6String+0x44>)
 80a1318:	2200      	movs	r2, #0
 80a131a:	781b      	ldrb	r3, [r3, #0]
 80a131c:	4909      	ldr	r1, [pc, #36]	; (80a1344 <_Z21setUpperHumidityLimit6String+0x48>)
 80a131e:	f88d 2000 	strb.w	r2, [sp]
 80a1322:	a802      	add	r0, sp, #8
 80a1324:	9a04      	ldr	r2, [sp, #16]
 80a1326:	f7ff fc31 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a132a:	a803      	add	r0, sp, #12
 80a132c:	f7ff fd2b 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1330:	a804      	add	r0, sp, #16
 80a1332:	f001 fc9c 	bl	80a2c6e <_ZN6StringD1Ev>

int setLowerHumidityLimit(String value)
 80a1336:	2001      	movs	r0, #1
 80a1338:	b008      	add	sp, #32
 80a133a:	bd10      	pop	{r4, pc}
 80a133c:	20000160 	.word	0x20000160
 80a1340:	20000275 	.word	0x20000275
 80a1344:	080a710c 	.word	0x080a710c

080a1348 <_Z21setLowerHumidityLimit6String>:
{
  lowerHumidityThreshold = value.toFloat();
  waitUntil(meterParticlePublish);
 80a1348:	b510      	push	{r4, lr}
 80a134a:	b088      	sub	sp, #32
 80a134c:	4604      	mov	r4, r0
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
 80a134e:	f001 fd2c 	bl	80a2daa <_ZNK6String7toFloatEv>
 80a1352:	4b0d      	ldr	r3, [pc, #52]	; (80a1388 <_Z21setLowerHumidityLimit6String+0x40>)
 80a1354:	6018      	str	r0, [r3, #0]
  return 1;
 80a1356:	f7ff fd0b 	bl	80a0d70 <_ZN11SystemClass13waitConditionIZ17setLowerTempLimit6StringEUlvE_EEbT_.isra.25>
 80a135a:	4621      	mov	r1, r4
 80a135c:	a804      	add	r0, sp, #16
 80a135e:	f001 fcef 	bl	80a2d40 <_ZN6StringC1ERKS_>
 80a1362:	4b0a      	ldr	r3, [pc, #40]	; (80a138c <_Z21setLowerHumidityLimit6String+0x44>)
 80a1364:	2200      	movs	r2, #0
 80a1366:	781b      	ldrb	r3, [r3, #0]
 80a1368:	4909      	ldr	r1, [pc, #36]	; (80a1390 <_Z21setLowerHumidityLimit6String+0x48>)
 80a136a:	f88d 2000 	strb.w	r2, [sp]
 80a136e:	a802      	add	r0, sp, #8
 80a1370:	9a04      	ldr	r2, [sp, #16]
 80a1372:	f7ff fc0b 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a1376:	a803      	add	r0, sp, #12
 80a1378:	f7ff fd05 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a137c:	a804      	add	r0, sp, #16
 80a137e:	f001 fc76 	bl	80a2c6e <_ZN6StringD1Ev>
 80a1382:	2001      	movs	r0, #1
 80a1384:	b008      	add	sp, #32
 80a1386:	bd10      	pop	{r4, pc}
 80a1388:	20000164 	.word	0x20000164
 80a138c:	20000275 	.word	0x20000275
 80a1390:	080a7120 	.word	0x080a7120

080a1394 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a1394:	2300      	movs	r3, #0
 80a1396:	2204      	movs	r2, #4
 80a1398:	f000 bd82 	b.w	80a1ea0 <spark_variable>

080a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a139c:	4602      	mov	r2, r0
 80a139e:	4801      	ldr	r0, [pc, #4]	; (80a13a4 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a13a0:	f000 bed4 	b.w	80a214c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a13a4:	080a2121 	.word	0x080a2121

080a13a8 <setup>:
double approxAltitudeInM = 0;

void setup()                                                                                // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
  state = IDLE_STATE;
 80a13a8:	b570      	push	{r4, r5, r6, lr}
 80a13aa:	b0b8      	sub	sp, #224	; 0xe0

 80a13ac:	aa08      	add	r2, sp, #32
 80a13ae:	4616      	mov	r6, r2
 80a13b0:	4b56      	ldr	r3, [pc, #344]	; (80a150c <setup+0x164>)
 80a13b2:	f103 0510 	add.w	r5, r3, #16
 80a13b6:	4614      	mov	r4, r2
 80a13b8:	6818      	ldr	r0, [r3, #0]
 80a13ba:	6859      	ldr	r1, [r3, #4]
 80a13bc:	3308      	adds	r3, #8
 80a13be:	c403      	stmia	r4!, {r0, r1}
 80a13c0:	42ab      	cmp	r3, r5
 80a13c2:	4622      	mov	r2, r4
 80a13c4:	d1f7      	bne.n	80a13b6 <setup+0xe>
 80a13c6:	8819      	ldrh	r1, [r3, #0]
 80a13c8:	789b      	ldrb	r3, [r3, #2]
 80a13ca:	222d      	movs	r2, #45	; 0x2d
 80a13cc:	8021      	strh	r1, [r4, #0]
 80a13ce:	70a3      	strb	r3, [r4, #2]
 80a13d0:	2100      	movs	r1, #0
 80a13d2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
 80a13d6:	4c4e      	ldr	r4, [pc, #312]	; (80a1510 <setup+0x168>)

void setup()                                                                                // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
  state = IDLE_STATE;

 80a13d8:	f003 fb7d 	bl	80a4ad6 <memset>
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
 80a13dc:	2302      	movs	r3, #2
  pinMode(tempLED,OUTPUT);
  
 80a13de:	2101      	movs	r1, #1
 80a13e0:	2007      	movs	r0, #7
void setup()                                                                                // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
  state = IDLE_STATE;

  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
 80a13e2:	7023      	strb	r3, [r4, #0]
  pinMode(tempLED,OUTPUT);
  
 80a13e4:	f002 f802 	bl	80a33ec <pinMode>
  char responseTopic[125];
 80a13e8:	2101      	movs	r1, #1
 80a13ea:	2005      	movs	r0, #5
 80a13ec:	f001 fffe 	bl	80a33ec <pinMode>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80a13f0:	a804      	add	r0, sp, #16
 80a13f2:	f000 fd7d 	bl	80a1ef0 <spark_deviceID>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a13f6:	2500      	movs	r5, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a13f8:	2300      	movs	r3, #0
 80a13fa:	227d      	movs	r2, #125	; 0x7d
 80a13fc:	a918      	add	r1, sp, #96	; 0x60
 80a13fe:	a804      	add	r0, sp, #16
 80a1400:	f001 fcbb 	bl	80a2d7a <_ZNK6String8getBytesEPhjj>
 80a1404:	462b      	mov	r3, r5
 80a1406:	462a      	mov	r2, r5
 80a1408:	4942      	ldr	r1, [pc, #264]	; (80a1514 <setup+0x16c>)
 80a140a:	9501      	str	r5, [sp, #4]
 80a140c:	9500      	str	r5, [sp, #0]
 80a140e:	a818      	add	r0, sp, #96	; 0x60
 80a1410:	f000 fd7e 	bl	80a1f10 <spark_subscribe>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a1414:	4940      	ldr	r1, [pc, #256]	; (80a1518 <setup+0x170>)
 80a1416:	462b      	mov	r3, r5
 80a1418:	2204      	movs	r2, #4
 80a141a:	6809      	ldr	r1, [r1, #0]
 80a141c:	483f      	ldr	r0, [pc, #252]	; (80a151c <setup+0x174>)
 80a141e:	f000 fd3f 	bl	80a1ea0 <spark_variable>
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
       
  Particle.variable("Release",releaseNumber);
  Particle.variable("temperature", temperatureString);
  Particle.variable("humidity", humidityString);
  Particle.variable("pressure", pressureString);
 80a1422:	493f      	ldr	r1, [pc, #252]	; (80a1520 <setup+0x178>)
 80a1424:	483f      	ldr	r0, [pc, #252]	; (80a1524 <setup+0x17c>)
 80a1426:	f7ff ffb5 	bl	80a1394 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  
 80a142a:	493f      	ldr	r1, [pc, #252]	; (80a1528 <setup+0x180>)
 80a142c:	483f      	ldr	r0, [pc, #252]	; (80a152c <setup+0x184>)
 80a142e:	f7ff ffb1 	bl	80a1394 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.function("Measure-Now",measureNow);
 80a1432:	493f      	ldr	r1, [pc, #252]	; (80a1530 <setup+0x188>)
 80a1434:	483f      	ldr	r0, [pc, #252]	; (80a1534 <setup+0x18c>)
 80a1436:	f7ff ffad 	bl	80a1394 <_ZN10CloudClass8variableIA9_cIRA16_cEEEbRKT_DpOT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("Temp-Upper-Limit",setUpperTempLimit);
 80a143a:	493f      	ldr	r1, [pc, #252]	; (80a1538 <setup+0x190>)
 80a143c:	483f      	ldr	r0, [pc, #252]	; (80a153c <setup+0x194>)
 80a143e:	f7ff ffad 	bl	80a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Temp-Lower-Limit",setLowerTempLimit);
 80a1442:	493f      	ldr	r1, [pc, #252]	; (80a1540 <setup+0x198>)
 80a1444:	483f      	ldr	r0, [pc, #252]	; (80a1544 <setup+0x19c>)
 80a1446:	f7ff ffa9 	bl	80a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidity-Lower-Limit",setLowerHumidityLimit);
 80a144a:	493f      	ldr	r1, [pc, #252]	; (80a1548 <setup+0x1a0>)
 80a144c:	483f      	ldr	r0, [pc, #252]	; (80a154c <setup+0x1a4>)
 80a144e:	f7ff ffa5 	bl	80a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Humidty-upper-Limit",setUpperHumidityLimit);
 80a1452:	493f      	ldr	r1, [pc, #252]	; (80a1550 <setup+0x1a8>)
 80a1454:	483f      	ldr	r0, [pc, #252]	; (80a1554 <setup+0x1ac>)
 80a1456:	f7ff ffa1 	bl	80a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>

 80a145a:	493f      	ldr	r1, [pc, #252]	; (80a1558 <setup+0x1b0>)
 80a145c:	483f      	ldr	r0, [pc, #252]	; (80a155c <setup+0x1b4>)
 80a145e:	f7ff ff9d 	bl	80a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  // And set the flags from the control register
 80a1462:	493f      	ldr	r1, [pc, #252]	; (80a1560 <setup+0x1b8>)
 80a1464:	483f      	ldr	r0, [pc, #252]	; (80a1564 <setup+0x1bc>)
 80a1466:	f7ff ff99 	bl	80a139c <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (!bme.begin()) {                                                                      // Start the BME680 Sensor
    resetTimeStamp = millis();
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
 80a146a:	2177      	movs	r1, #119	; 0x77
 80a146c:	483e      	ldr	r0, [pc, #248]	; (80a1568 <setup+0x1c0>)
 80a146e:	f000 f9ef 	bl	80a1850 <_ZN15Adafruit_BME6805beginEh>
 80a1472:	b960      	cbnz	r0, 80a148e <setup+0xe6>
 80a1474:	f000 fb58 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
    state = ERROR_STATE;
 80a1478:	4d3c      	ldr	r5, [pc, #240]	; (80a156c <setup+0x1c4>)
    resetTimeStamp = millis();
 80a147a:	493d      	ldr	r1, [pc, #244]	; (80a1570 <setup+0x1c8>)
  // controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);                          // Read the Control Register for system modes so they stick even after reset
  // verboseMode     = (0b00001000 & controlRegister);                                     // Set the verboseMode
  if (!bme.begin()) {                                                                      // Start the BME680 Sensor
    resetTimeStamp = millis();
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - BME680 Initialization");
    state = ERROR_STATE;
 80a147c:	6028      	str	r0, [r5, #0]
    resetTimeStamp = millis();
 80a147e:	4630      	mov	r0, r6
 80a1480:	f003 fb64 	bl	80a4b4c <strcpy>
  }
 80a1484:	2301      	movs	r3, #1
 80a1486:	7023      	strb	r3, [r4, #0]
 80a1488:	f000 fb4e 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>

 80a148c:	6028      	str	r0, [r5, #0]
  // Set up the sampling paramatures
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
 80a148e:	2104      	movs	r1, #4
 80a1490:	4835      	ldr	r0, [pc, #212]	; (80a1568 <setup+0x1c0>)
 80a1492:	f000 fadb 	bl	80a1a4c <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 80a1496:	2102      	movs	r1, #2
 80a1498:	4833      	ldr	r0, [pc, #204]	; (80a1568 <setup+0x1c0>)
 80a149a:	f000 fae4 	bl	80a1a66 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
  bme.setGasHeater(320, 150); // 320*C for 150 ms
 80a149e:	2103      	movs	r1, #3
 80a14a0:	4831      	ldr	r0, [pc, #196]	; (80a1568 <setup+0x1c0>)
 80a14a2:	f000 faed 	bl	80a1a80 <_ZN15Adafruit_BME68023setPressureOversamplingEh>

 80a14a6:	2102      	movs	r1, #2
 80a14a8:	482f      	ldr	r0, [pc, #188]	; (80a1568 <setup+0x1c0>)
 80a14aa:	f000 faf6 	bl	80a1a9a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
  takeMeasurements();                                                                      // For the benefit of monitoring the device
 80a14ae:	2296      	movs	r2, #150	; 0x96
 80a14b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80a14b4:	482c      	ldr	r0, [pc, #176]	; (80a1568 <setup+0x1c0>)
 80a14b6:	f000 fabb 	bl	80a1a30 <_ZN15Adafruit_BME68012setGasHeaterEtt>

 
 80a14ba:	f7ff fb75 	bl	80a0ba8 <_Z16takeMeasurementsv>
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
 80a14be:	f7ff fc03 	bl	80a0cc8 <_Z17connectToParticlev>
 80a14c2:	b948      	cbnz	r0, 80a14d8 <setup+0x130>
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 80a14c4:	2301      	movs	r3, #1
 80a14c6:	7023      	strb	r3, [r4, #0]
 80a14c8:	f000 fb2e 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
  }
 80a14cc:	4b27      	ldr	r3, [pc, #156]	; (80a156c <setup+0x1c4>)

 80a14ce:	4929      	ldr	r1, [pc, #164]	; (80a1574 <setup+0x1cc>)
 
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }
 80a14d0:	6018      	str	r0, [r3, #0]

 80a14d2:	4630      	mov	r0, r6
 80a14d4:	f003 fb3a 	bl	80a4b4c <strcpy>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}
 80a14d8:	4b27      	ldr	r3, [pc, #156]	; (80a1578 <setup+0x1d0>)
 80a14da:	781b      	ldrb	r3, [r3, #0]
 80a14dc:	b163      	cbz	r3, 80a14f8 <setup+0x150>
 80a14de:	4b27      	ldr	r3, [pc, #156]	; (80a157c <setup+0x1d4>)
 80a14e0:	2200      	movs	r2, #0
 80a14e2:	781b      	ldrb	r3, [r3, #0]
 80a14e4:	a802      	add	r0, sp, #8
 80a14e6:	f88d 2000 	strb.w	r2, [sp]
 80a14ea:	4925      	ldr	r1, [pc, #148]	; (80a1580 <setup+0x1d8>)
 80a14ec:	4632      	mov	r2, r6
 80a14ee:	f7ff fb4d 	bl	80a0b8c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.37>
 80a14f2:	a803      	add	r0, sp, #12
 80a14f4:	f7ff fc47 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a14f8:	f000 fb16 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>

 80a14fc:	4b21      	ldr	r3, [pc, #132]	; (80a1584 <setup+0x1dc>)
 80a14fe:	6018      	str	r0, [r3, #0]
  pinMode(tempLED,OUTPUT);
  
  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
 80a1500:	a804      	add	r0, sp, #16
 80a1502:	f001 fbb4 	bl	80a2c6e <_ZN6StringD1Ev>

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
 80a1506:	b038      	add	sp, #224	; 0xe0
 80a1508:	bd70      	pop	{r4, r5, r6, pc}
 80a150a:	bf00      	nop
 80a150c:	080a6ede 	.word	0x080a6ede
 80a1510:	200002c5 	.word	0x200002c5
 80a1514:	080a0db5 	.word	0x080a0db5
 80a1518:	20000150 	.word	0x20000150
 80a151c:	080a7134 	.word	0x080a7134
 80a1520:	20000260 	.word	0x20000260
 80a1524:	080a713c 	.word	0x080a713c
 80a1528:	20000308 	.word	0x20000308
 80a152c:	080a7148 	.word	0x080a7148
 80a1530:	200002d2 	.word	0x200002d2
 80a1534:	080a7151 	.word	0x080a7151
 80a1538:	080a0b61 	.word	0x080a0b61
 80a153c:	080a715a 	.word	0x080a715a
 80a1540:	080a0f75 	.word	0x080a0f75
 80a1544:	080a7166 	.word	0x080a7166
 80a1548:	080a1265 	.word	0x080a1265
 80a154c:	080a7173 	.word	0x080a7173
 80a1550:	080a12b1 	.word	0x080a12b1
 80a1554:	080a7184 	.word	0x080a7184
 80a1558:	080a1349 	.word	0x080a1349
 80a155c:	080a7195 	.word	0x080a7195
 80a1560:	080a12fd 	.word	0x080a12fd
 80a1564:	080a71aa 	.word	0x080a71aa
 80a1568:	20000318 	.word	0x20000318
 80a156c:	20000304 	.word	0x20000304
 80a1570:	080a71be 	.word	0x080a71be
 80a1574:	080a71dc 	.word	0x080a71dc
 80a1578:	200002f0 	.word	0x200002f0
 80a157c:	20000275 	.word	0x20000275
 80a1580:	080a71ee 	.word	0x080a71ee
 80a1584:	20000390 	.word	0x20000390

080a1588 <_GLOBAL__sub_I_bme>:
  waitUntil(meterParticlePublish);
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
  return 1;
 80a1588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a158a:	4b18      	ldr	r3, [pc, #96]	; (80a15ec <_GLOBAL__sub_I_bme+0x64>)
 80a158c:	2601      	movs	r6, #1
 80a158e:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a1590:	f000 faea 	bl	80a1b68 <HAL_Pin_Map>


#define SEALEVELPRESSURE_HPA (1013.25)                                                     // Universal variables

Adafruit_BME680 bme;                                                                       // Instantiate the I2C library

 80a1594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a1598:	4815      	ldr	r0, [pc, #84]	; (80a15f0 <_GLOBAL__sub_I_bme+0x68>)
 80a159a:	f000 f943 	bl	80a1824 <_ZN15Adafruit_BME680C1Ea>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a159e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a15a2:	4d14      	ldr	r5, [pc, #80]	; (80a15f4 <_GLOBAL__sub_I_bme+0x6c>)
 80a15a4:	2400      	movs	r4, #0
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
 80a15a6:	4f14      	ldr	r7, [pc, #80]	; (80a15f8 <_GLOBAL__sub_I_bme+0x70>)
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a15a8:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a15aa:	602c      	str	r4, [r5, #0]
 80a15ac:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a15ae:	71ac      	strb	r4, [r5, #6]
 80a15b0:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a15b2:	2002      	movs	r0, #2
 80a15b4:	f000 fc30 	bl	80a1e18 <set_system_mode>
 80a15b8:	463a      	mov	r2, r7
 80a15ba:	4910      	ldr	r1, [pc, #64]	; (80a15fc <_GLOBAL__sub_I_bme+0x74>)
 80a15bc:	4628      	mov	r0, r5
 80a15be:	f001 ffcb 	bl	80a3558 <__aeabi_atexit>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));

// State Machine Variables
 80a15c2:	4d0f      	ldr	r5, [pc, #60]	; (80a1600 <_GLOBAL__sub_I_bme+0x78>)
Adafruit_BME680 bme;                                                                       // Instantiate the I2C library

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
 80a15c4:	4621      	mov	r1, r4
 80a15c6:	4630      	mov	r0, r6
 80a15c8:	f000 fc36 	bl	80a1e38 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a15cc:	4631      	mov	r1, r6
 80a15ce:	2004      	movs	r0, #4
 80a15d0:	f000 fa92 	bl	80a1af8 <HAL_Feature_Set>

// State Machine Variables
 80a15d4:	4621      	mov	r1, r4
 80a15d6:	4628      	mov	r0, r5
 80a15d8:	f001 f86e 	bl	80a26b8 <_ZN9FuelGaugeC1Eb>
 80a15dc:	463a      	mov	r2, r7
 80a15de:	4628      	mov	r0, r5
  waitUntil(meterParticlePublish);
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
  return 1;
 80a15e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));

// State Machine Variables
 80a15e4:	4907      	ldr	r1, [pc, #28]	; (80a1604 <_GLOBAL__sub_I_bme+0x7c>)
 80a15e6:	f001 bfb7 	b.w	80a3558 <__aeabi_atexit>
 80a15ea:	bf00      	nop
 80a15ec:	20000275 	.word	0x20000275
 80a15f0:	20000318 	.word	0x20000318
 80a15f4:	200002e4 	.word	0x200002e4
 80a15f8:	20000258 	.word	0x20000258
 80a15fc:	080a0b7d 	.word	0x080a0b7d
 80a1600:	2000027c 	.word	0x2000027c
 80a1604:	080a26d7 	.word	0x080a26d7

080a1608 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 80a1608:	f000 bd22 	b.w	80a2050 <delay>

080a160c <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80a160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a160e:	4607      	mov	r7, r0
 80a1610:	4614      	mov	r4, r2
 80a1612:	461d      	mov	r5, r3
 80a1614:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 80a1616:	f001 ff41 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a161a:	4639      	mov	r1, r7
 80a161c:	f001 f8d9 	bl	80a27d2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 80a1620:	f001 ff3c 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a1624:	6803      	ldr	r3, [r0, #0]
 80a1626:	4631      	mov	r1, r6
 80a1628:	689b      	ldr	r3, [r3, #8]
 80a162a:	4798      	blx	r3
 80a162c:	4425      	add	r5, r4
  while (len--) {
 80a162e:	42ac      	cmp	r4, r5
 80a1630:	d007      	beq.n	80a1642 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 80a1632:	f001 ff33 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a1636:	6803      	ldr	r3, [r0, #0]
 80a1638:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a163c:	689b      	ldr	r3, [r3, #8]
 80a163e:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 80a1640:	e7f5      	b.n	80a162e <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 80a1642:	f001 ff2b 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a1646:	f001 f8cc 	bl	80a27e2 <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80a164a:	2000      	movs	r0, #0
 80a164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1650 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 80a1650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 80a1654:	4d1b      	ldr	r5, [pc, #108]	; (80a16c4 <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 80a1656:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 80a1658:	f995 3000 	ldrsb.w	r3, [r5]
 80a165c:	3301      	adds	r3, #1
 80a165e:	d106      	bne.n	80a166e <_ZL12spi_transferh+0x1e>
    return SPI.transfer(x);
 80a1660:	f001 ff5a 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a1664:	4641      	mov	r1, r8
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 80a1666:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 80a166a:	f001 baeb 	b.w	80a2c44 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80a166e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80a16c8 <_ZL12spi_transferh+0x78>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80a1672:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a16cc <_ZL12spi_transferh+0x7c>
 80a1676:	2607      	movs	r6, #7
 80a1678:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 80a167a:	f995 0000 	ldrsb.w	r0, [r5]
 80a167e:	2100      	movs	r1, #0
 80a1680:	b280      	uxth	r0, r0
 80a1682:	f001 fec4 	bl	80a340e <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80a1686:	2701      	movs	r7, #1
 80a1688:	f999 0000 	ldrsb.w	r0, [r9]
 80a168c:	fa07 f106 	lsl.w	r1, r7, r6
 80a1690:	ea01 0108 	and.w	r1, r1, r8
 80a1694:	b280      	uxth	r0, r0
 80a1696:	f001 feba 	bl	80a340e <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 80a169a:	f995 0000 	ldrsb.w	r0, [r5]
 80a169e:	4639      	mov	r1, r7
 80a16a0:	b280      	uxth	r0, r0
 80a16a2:	f001 feb4 	bl	80a340e <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80a16a6:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a16aa:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80a16ac:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a16ae:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80a16b0:	f001 fec6 	bl	80a3440 <digitalRead>
 80a16b4:	b100      	cbz	r0, 80a16b8 <_ZL12spi_transferh+0x68>
      reply |= 1;
 80a16b6:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 80a16b8:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80a16bc:	d2dd      	bcs.n	80a167a <_ZL12spi_transferh+0x2a>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 80a16be:	4620      	mov	r0, r4
 80a16c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a16c4:	200003a1 	.word	0x200003a1
 80a16c8:	200003a2 	.word	0x200003a2
 80a16cc:	200003a0 	.word	0x200003a0

080a16d0 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80a16d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a16d4:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 80a16d6:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80a16d8:	4615      	mov	r5, r2
 80a16da:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 80a16dc:	4607      	mov	r7, r0
 80a16de:	f001 fe96 	bl	80a340e <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 80a16e2:	4b19      	ldr	r3, [pc, #100]	; (80a1748 <_ZL9spi_writehhPht+0x78>)
 80a16e4:	f993 2000 	ldrsb.w	r2, [r3]
 80a16e8:	461c      	mov	r4, r3
 80a16ea:	3201      	adds	r2, #1
 80a16ec:	d112      	bne.n	80a1714 <_ZL9spi_writehhPht+0x44>
    SPI.begin();
 80a16ee:	f001 ff13 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a16f2:	f001 fa05 	bl	80a2b00 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 80a16f6:	f001 ff0f 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a16fa:	2140      	movs	r1, #64	; 0x40
 80a16fc:	f001 fa7e 	bl	80a2bfc <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 80a1700:	f001 ff0a 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a1704:	2101      	movs	r1, #1
 80a1706:	f001 fa0b 	bl	80a2b20 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80a170a:	f001 ff05 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a170e:	2100      	movs	r1, #0
 80a1710:	f001 fa16 	bl	80a2b40 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 80a1714:	4640      	mov	r0, r8
 80a1716:	f7ff ff9b 	bl	80a1650 <_ZL12spi_transferh>
 80a171a:	442e      	add	r6, r5
  while (len--) {
 80a171c:	42b5      	cmp	r5, r6
 80a171e:	d004      	beq.n	80a172a <_ZL9spi_writehhPht+0x5a>
    spi_transfer(*reg_data);
 80a1720:	f815 0b01 	ldrb.w	r0, [r5], #1
 80a1724:	f7ff ff94 	bl	80a1650 <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
 80a1728:	e7f8      	b.n	80a171c <_ZL9spi_writehhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
 80a172a:	f994 3000 	ldrsb.w	r3, [r4]
 80a172e:	3301      	adds	r3, #1
 80a1730:	d103      	bne.n	80a173a <_ZL9spi_writehhPht+0x6a>
    SPI.endTransaction();
 80a1732:	f001 fef1 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a1736:	f001 fa13 	bl	80a2b60 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
 80a173a:	4638      	mov	r0, r7
 80a173c:	2101      	movs	r1, #1
 80a173e:	f001 fe66 	bl	80a340e <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80a1742:	2000      	movs	r0, #0
 80a1744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1748:	200003a1 	.word	0x200003a1

080a174c <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80a174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1750:	4688      	mov	r8, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 80a1752:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80a1754:	4615      	mov	r5, r2
 80a1756:	461e      	mov	r6, r3
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 80a1758:	4607      	mov	r7, r0
 80a175a:	f001 fe58 	bl	80a340e <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 80a175e:	4b1a      	ldr	r3, [pc, #104]	; (80a17c8 <_ZL8spi_readhhPht+0x7c>)
 80a1760:	f993 2000 	ldrsb.w	r2, [r3]
 80a1764:	461c      	mov	r4, r3
 80a1766:	3201      	adds	r2, #1
 80a1768:	d112      	bne.n	80a1790 <_ZL8spi_readhhPht+0x44>
    SPI.begin();
 80a176a:	f001 fed5 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a176e:	f001 f9c7 	bl	80a2b00 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 80a1772:	f001 fed1 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a1776:	2140      	movs	r1, #64	; 0x40
 80a1778:	f001 fa40 	bl	80a2bfc <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 80a177c:	f001 fecc 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a1780:	2101      	movs	r1, #1
 80a1782:	f001 f9cd 	bl	80a2b20 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80a1786:	f001 fec7 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a178a:	2100      	movs	r1, #0
 80a178c:	f001 f9d8 	bl	80a2b40 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 80a1790:	4640      	mov	r0, r8
 80a1792:	f7ff ff5d 	bl	80a1650 <_ZL12spi_transferh>
 80a1796:	442e      	add	r6, r5

  while (len--) {
 80a1798:	42b5      	cmp	r5, r6
 80a179a:	d005      	beq.n	80a17a8 <_ZL8spi_readhhPht+0x5c>
    *reg_data = spi_transfer(0x00);
 80a179c:	2000      	movs	r0, #0
 80a179e:	f7ff ff57 	bl	80a1650 <_ZL12spi_transferh>
 80a17a2:	f805 0b01 	strb.w	r0, [r5], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
 80a17a6:	e7f7      	b.n	80a1798 <_ZL8spi_readhhPht+0x4c>
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }

  if (_BME680_SoftwareSPI_SCK == -1) {
 80a17a8:	f994 3000 	ldrsb.w	r3, [r4]
 80a17ac:	3301      	adds	r3, #1
 80a17ae:	d103      	bne.n	80a17b8 <_ZL8spi_readhhPht+0x6c>
    SPI.endTransaction();
 80a17b0:	f001 feb2 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a17b4:	f001 f9d4 	bl	80a2b60 <_ZN8SPIClass14endTransactionEv>
  }

  digitalWrite(cspin, HIGH);
 80a17b8:	4638      	mov	r0, r7
 80a17ba:	2101      	movs	r1, #1
 80a17bc:	f001 fe27 	bl	80a340e <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80a17c0:	2000      	movs	r0, #0
 80a17c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a17c6:	bf00      	nop
 80a17c8:	200003a1 	.word	0x200003a1

080a17cc <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80a17cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17ce:	4606      	mov	r6, r0
 80a17d0:	4615      	mov	r5, r2
 80a17d2:	461c      	mov	r4, r3
 80a17d4:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 80a17d6:	f001 fe61 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a17da:	4631      	mov	r1, r6
 80a17dc:	f000 fff9 	bl	80a27d2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 80a17e0:	f001 fe5c 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a17e4:	6803      	ldr	r3, [r0, #0]
 80a17e6:	4639      	mov	r1, r7
 80a17e8:	689b      	ldr	r3, [r3, #8]
 80a17ea:	4798      	blx	r3
  Wire.endTransmission();
 80a17ec:	f001 fe56 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a17f0:	f000 fff7 	bl	80a27e2 <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 80a17f4:	f001 fe52 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a17f8:	b2e2      	uxtb	r2, r4
 80a17fa:	4631      	mov	r1, r6
 80a17fc:	f000 ffe6 	bl	80a27cc <_ZN7TwoWire11requestFromEhj>
 80a1800:	4284      	cmp	r4, r0
 80a1802:	d10a      	bne.n	80a181a <_ZL8i2c_readhhPht+0x4e>
 80a1804:	442c      	add	r4, r5
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 80a1806:	42a5      	cmp	r5, r4
 80a1808:	d009      	beq.n	80a181e <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
 80a180a:	f001 fe47 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a180e:	6803      	ldr	r3, [r0, #0]
 80a1810:	695b      	ldr	r3, [r3, #20]
 80a1812:	4798      	blx	r3
 80a1814:	f805 0b01 	strb.w	r0, [r5], #1
 80a1818:	e7f5      	b.n	80a1806 <_ZL8i2c_readhhPht+0x3a>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 80a181a:	2001      	movs	r0, #1
 80a181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 80a181e:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80a1820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1824 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 80a1824:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 80a1826:	4907      	ldr	r1, [pc, #28]	; (80a1844 <_ZN15Adafruit_BME680C1Ea+0x20>)
 80a1828:	22ff      	movs	r2, #255	; 0xff
 80a182a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 80a182c:	4906      	ldr	r1, [pc, #24]	; (80a1848 <_ZN15Adafruit_BME680C1Ea+0x24>)
 80a182e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 80a1830:	4906      	ldr	r1, [pc, #24]	; (80a184c <_ZN15Adafruit_BME680C1Ea+0x28>)
 80a1832:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 80a1834:	2200      	movs	r2, #0
 80a1836:	7502      	strb	r2, [r0, #20]
 80a1838:	74c2      	strb	r2, [r0, #19]
 80a183a:	7482      	strb	r2, [r0, #18]
 80a183c:	7442      	strb	r2, [r0, #17]
 80a183e:	7402      	strb	r2, [r0, #16]
}
 80a1840:	4770      	bx	lr
 80a1842:	bf00      	nop
 80a1844:	200003a2 	.word	0x200003a2
 80a1848:	200003a0 	.word	0x200003a0
 80a184c:	200003a1 	.word	0x200003a1

080a1850 <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 80a1850:	b538      	push	{r3, r4, r5, lr}
 80a1852:	4604      	mov	r4, r0
  _i2caddr = addr;
 80a1854:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 80a1856:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 80a185a:	460d      	mov	r5, r1
  _i2caddr = addr;

  if (_cs == -1) {
 80a185c:	1c42      	adds	r2, r0, #1
 80a185e:	d10c      	bne.n	80a187a <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
 80a1860:	f001 fe1c 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a1864:	f000 ff7e 	bl	80a2764 <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 80a1868:	2301      	movs	r3, #1
 80a186a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 80a186e:	4b2e      	ldr	r3, [pc, #184]	; (80a1928 <_ZN15Adafruit_BME6805beginEh+0xd8>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 80a1870:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 80a1874:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 80a1876:	4b2d      	ldr	r3, [pc, #180]	; (80a192c <_ZN15Adafruit_BME6805beginEh+0xdc>)
 80a1878:	e02e      	b.n	80a18d8 <_ZN15Adafruit_BME6805beginEh+0x88>
  } else {
    digitalWrite(_cs, HIGH);
 80a187a:	2101      	movs	r1, #1
 80a187c:	b280      	uxth	r0, r0
 80a187e:	f001 fdc6 	bl	80a340e <digitalWrite>
    pinMode(_cs, OUTPUT);
 80a1882:	f994 001c 	ldrsb.w	r0, [r4, #28]
 80a1886:	2101      	movs	r1, #1
 80a1888:	b280      	uxth	r0, r0
 80a188a:	f001 fdaf 	bl	80a33ec <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 80a188e:	4b28      	ldr	r3, [pc, #160]	; (80a1930 <_ZN15Adafruit_BME6805beginEh+0xe0>)
 80a1890:	f993 0000 	ldrsb.w	r0, [r3]
 80a1894:	1c43      	adds	r3, r0, #1
 80a1896:	d104      	bne.n	80a18a2 <_ZN15Adafruit_BME6805beginEh+0x52>
      // hardware SPI
      SPI.begin();
 80a1898:	f001 fe3e 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a189c:	f001 f930 	bl	80a2b00 <_ZN8SPIClass5beginEv>
 80a18a0:	e011      	b.n	80a18c6 <_ZN15Adafruit_BME6805beginEh+0x76>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 80a18a2:	2101      	movs	r1, #1
 80a18a4:	b280      	uxth	r0, r0
 80a18a6:	f001 fda1 	bl	80a33ec <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 80a18aa:	4b22      	ldr	r3, [pc, #136]	; (80a1934 <_ZN15Adafruit_BME6805beginEh+0xe4>)
 80a18ac:	2101      	movs	r1, #1
 80a18ae:	f993 0000 	ldrsb.w	r0, [r3]
 80a18b2:	b280      	uxth	r0, r0
 80a18b4:	f001 fd9a 	bl	80a33ec <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 80a18b8:	4b1f      	ldr	r3, [pc, #124]	; (80a1938 <_ZN15Adafruit_BME6805beginEh+0xe8>)
 80a18ba:	2100      	movs	r1, #0
 80a18bc:	f993 0000 	ldrsb.w	r0, [r3]
 80a18c0:	b280      	uxth	r0, r0
 80a18c2:	f001 fd93 	bl	80a33ec <pinMode>
    }

    gas_sensor.dev_id = _cs;
 80a18c6:	7f23      	ldrb	r3, [r4, #28]
 80a18c8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 80a18cc:	2300      	movs	r3, #0
 80a18ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 80a18d2:	4b1a      	ldr	r3, [pc, #104]	; (80a193c <_ZN15Adafruit_BME6805beginEh+0xec>)
 80a18d4:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 80a18d6:	4b1a      	ldr	r3, [pc, #104]	; (80a1940 <_ZN15Adafruit_BME6805beginEh+0xf0>)
 80a18d8:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
 80a18da:	4b1a      	ldr	r3, [pc, #104]	; (80a1944 <_ZN15Adafruit_BME6805beginEh+0xf4>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 80a18dc:	f104 0020 	add.w	r0, r4, #32
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 80a18e0:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 80a18e2:	f7fe fcf0 	bl	80a02c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 80a18e6:	b9e0      	cbnz	r0, 80a1922 <_ZN15Adafruit_BME6805beginEh+0xd2>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 80a18e8:	2304      	movs	r3, #4
 80a18ea:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 80a18ee:	2302      	movs	r3, #2
 80a18f0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 80a18f4:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80a18f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 80a18fc:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 80a18fe:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80a1900:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80a1904:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 80a1906:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 80a1908:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 80a190a:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 80a190e:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 80a1910:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80a1912:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80a1916:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 80a191a:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80a191c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
 80a1920:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 80a1922:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 80a1924:	bd38      	pop	{r3, r4, r5, pc}
 80a1926:	bf00      	nop
 80a1928:	080a17cd 	.word	0x080a17cd
 80a192c:	080a160d 	.word	0x080a160d
 80a1930:	200003a1 	.word	0x200003a1
 80a1934:	200003a2 	.word	0x200003a2
 80a1938:	200003a0 	.word	0x200003a0
 80a193c:	080a174d 	.word	0x080a174d
 80a1940:	080a16d1 	.word	0x080a16d1
 80a1944:	080a1609 	.word	0x080a1609

080a1948 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80a1948:	b530      	push	{r4, r5, lr}
 80a194a:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80a194c:	2301      	movs	r3, #1
 80a194e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80a1952:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80a1954:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 80a1956:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80a1958:	b10b      	cbz	r3, 80a195e <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 80a195a:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 80a195e:	7ce3      	ldrb	r3, [r4, #19]
 80a1960:	b10b      	cbz	r3, 80a1966 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 80a1962:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 80a1966:	7c23      	ldrb	r3, [r4, #16]
 80a1968:	b10b      	cbz	r3, 80a196e <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 80a196a:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 80a196e:	7d23      	ldrb	r3, [r4, #20]
 80a1970:	b10b      	cbz	r3, 80a1976 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 80a1972:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 80a1976:	f104 0520 	add.w	r5, r4, #32
 80a197a:	4629      	mov	r1, r5
 80a197c:	f7fe fdc3 	bl	80a0506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 80a1980:	b108      	cbz	r0, 80a1986 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 80a1982:	2500      	movs	r5, #0
 80a1984:	e04b      	b.n	80a1a1e <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80a1986:	4628      	mov	r0, r5
 80a1988:	f7fe fd7e 	bl	80a0488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 80a198c:	2800      	cmp	r0, #0
 80a198e:	d1f8      	bne.n	80a1982 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 80a1990:	4629      	mov	r1, r5
 80a1992:	f10d 0002 	add.w	r0, sp, #2
 80a1996:	f7fe ff31 	bl	80a07fc <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 80a199a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80a199e:	0040      	lsls	r0, r0, #1
 80a19a0:	f000 fb56 	bl	80a2050 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80a19a4:	4629      	mov	r1, r5
 80a19a6:	a801      	add	r0, sp, #4
 80a19a8:	f7fe ff5c 	bl	80a0864 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 80a19ac:	2800      	cmp	r0, #0
 80a19ae:	d1e8      	bne.n	80a1982 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 80a19b0:	7c63      	ldrb	r3, [r4, #17]
 80a19b2:	b15b      	cbz	r3, 80a19cc <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 80a19b4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80a19b8:	f002 f88c 	bl	80a3ad4 <__aeabi_i2d>
 80a19bc:	2200      	movs	r2, #0
 80a19be:	4b19      	ldr	r3, [pc, #100]	; (80a1a24 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 80a19c0:	f002 fa18 	bl	80a3df4 <__aeabi_ddiv>
 80a19c4:	f002 fbce 	bl	80a4164 <__aeabi_d2f>
 80a19c8:	6020      	str	r0, [r4, #0]
 80a19ca:	e001      	b.n	80a19d0 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 80a19cc:	4b16      	ldr	r3, [pc, #88]	; (80a1a28 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80a19ce:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 80a19d0:	7ca3      	ldrb	r3, [r4, #18]
 80a19d2:	b153      	cbz	r3, 80a19ea <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 80a19d4:	9804      	ldr	r0, [sp, #16]
 80a19d6:	f002 f86d 	bl	80a3ab4 <__aeabi_ui2d>
 80a19da:	2200      	movs	r2, #0
 80a19dc:	4b13      	ldr	r3, [pc, #76]	; (80a1a2c <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 80a19de:	f002 fa09 	bl	80a3df4 <__aeabi_ddiv>
 80a19e2:	f002 fbbf 	bl	80a4164 <__aeabi_d2f>
 80a19e6:	60a0      	str	r0, [r4, #8]
 80a19e8:	e001      	b.n	80a19ee <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 80a19ea:	4b0f      	ldr	r3, [pc, #60]	; (80a1a28 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80a19ec:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 80a19ee:	7ce3      	ldrb	r3, [r4, #19]
 80a19f0:	b123      	cbz	r3, 80a19fc <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 80a19f2:	9803      	ldr	r0, [sp, #12]
 80a19f4:	f002 fcbc 	bl	80a4370 <__aeabi_ui2f>
 80a19f8:	6060      	str	r0, [r4, #4]
 80a19fa:	e001      	b.n	80a1a00 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 80a19fc:	4b0a      	ldr	r3, [pc, #40]	; (80a1a28 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80a19fe:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 80a1a00:	7d25      	ldrb	r5, [r4, #20]
 80a1a02:	b15d      	cbz	r5, 80a1a1c <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 80a1a04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1a08:	06db      	lsls	r3, r3, #27
 80a1a0a:	d504      	bpl.n	80a1a16 <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 80a1a0c:	9805      	ldr	r0, [sp, #20]
 80a1a0e:	f002 fcaf 	bl	80a4370 <__aeabi_ui2f>
 80a1a12:	60e0      	str	r0, [r4, #12]
 80a1a14:	e003      	b.n	80a1a1e <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 80a1a16:	2300      	movs	r3, #0
 80a1a18:	60e3      	str	r3, [r4, #12]
 80a1a1a:	e000      	b.n	80a1a1e <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 80a1a1c:	2501      	movs	r5, #1
}
 80a1a1e:	4628      	mov	r0, r5
 80a1a20:	b007      	add	sp, #28
 80a1a22:	bd30      	pop	{r4, r5, pc}
 80a1a24:	40590000 	.word	0x40590000
 80a1a28:	7fc00000 	.word	0x7fc00000
 80a1a2c:	408f4000 	.word	0x408f4000

080a1a30 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80a1a30:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80a1a34:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 80a1a38:	b101      	cbz	r1, 80a1a3c <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 80a1a3a:	b90a      	cbnz	r2, 80a1a40 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80a1a3c:	2300      	movs	r3, #0
 80a1a3e:	e000      	b.n	80a1a42 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80a1a40:	2301      	movs	r3, #1
 80a1a42:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 80a1a46:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 80a1a48:	2001      	movs	r0, #1
 80a1a4a:	4770      	bx	lr

080a1a4c <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80a1a4c:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80a1a4e:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80a1a50:	d807      	bhi.n	80a1a62 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 80a1a52:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 80a1a56:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80a1a58:	b909      	cbnz	r1, 80a1a5e <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 80a1a5a:	7459      	strb	r1, [r3, #17]
 80a1a5c:	4770      	bx	lr
  else
    _tempEnabled = true;
 80a1a5e:	7458      	strb	r0, [r3, #17]
 80a1a60:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80a1a62:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 80a1a64:	4770      	bx	lr

080a1a66 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80a1a66:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 80a1a68:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80a1a6a:	d807      	bhi.n	80a1a7c <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 80a1a6c:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 80a1a70:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80a1a72:	b909      	cbnz	r1, 80a1a78 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 80a1a74:	7499      	strb	r1, [r3, #18]
 80a1a76:	4770      	bx	lr
  else
    _humEnabled = true;
 80a1a78:	7498      	strb	r0, [r3, #18]
 80a1a7a:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80a1a7c:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 80a1a7e:	4770      	bx	lr

080a1a80 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80a1a80:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 80a1a82:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80a1a84:	d807      	bhi.n	80a1a96 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 80a1a86:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
 80a1a8a:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80a1a8c:	b909      	cbnz	r1, 80a1a92 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 80a1a8e:	74d9      	strb	r1, [r3, #19]
 80a1a90:	4770      	bx	lr
  else
    _presEnabled = true;
 80a1a92:	74d8      	strb	r0, [r3, #19]
 80a1a94:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80a1a96:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 80a1a98:	4770      	bx	lr

080a1a9a <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 80a1a9a:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 80a1a9c:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 80a1a9e:	d807      	bhi.n	80a1ab0 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 80a1aa0:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
 80a1aa4:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 80a1aa6:	b909      	cbnz	r1, 80a1aac <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 80a1aa8:	7419      	strb	r1, [r3, #16]
 80a1aaa:	4770      	bx	lr
  else
    _filterEnabled = true;
 80a1aac:	7418      	strb	r0, [r3, #16]
 80a1aae:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 80a1ab0:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 80a1ab2:	4770      	bx	lr

080a1ab4 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 80a1ab4:	f000 b858 	b.w	80a1b68 <HAL_Pin_Map>

080a1ab8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1ab8:	b508      	push	{r3, lr}
 80a1aba:	4b02      	ldr	r3, [pc, #8]	; (80a1ac4 <os_mutex_recursive_create+0xc>)
 80a1abc:	681b      	ldr	r3, [r3, #0]
 80a1abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1ac0:	9301      	str	r3, [sp, #4]
 80a1ac2:	bd08      	pop	{r3, pc}
 80a1ac4:	080601d0 	.word	0x080601d0

080a1ac8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1ac8:	b508      	push	{r3, lr}
 80a1aca:	4b02      	ldr	r3, [pc, #8]	; (80a1ad4 <os_mutex_recursive_destroy+0xc>)
 80a1acc:	681b      	ldr	r3, [r3, #0]
 80a1ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ad0:	9301      	str	r3, [sp, #4]
 80a1ad2:	bd08      	pop	{r3, pc}
 80a1ad4:	080601d0 	.word	0x080601d0

080a1ad8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1ad8:	b508      	push	{r3, lr}
 80a1ada:	4b02      	ldr	r3, [pc, #8]	; (80a1ae4 <os_mutex_recursive_lock+0xc>)
 80a1adc:	681b      	ldr	r3, [r3, #0]
 80a1ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1ae0:	9301      	str	r3, [sp, #4]
 80a1ae2:	bd08      	pop	{r3, pc}
 80a1ae4:	080601d0 	.word	0x080601d0

080a1ae8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1ae8:	b508      	push	{r3, lr}
 80a1aea:	4b02      	ldr	r3, [pc, #8]	; (80a1af4 <os_mutex_recursive_unlock+0xc>)
 80a1aec:	681b      	ldr	r3, [r3, #0]
 80a1aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1af0:	9301      	str	r3, [sp, #4]
 80a1af2:	bd08      	pop	{r3, pc}
 80a1af4:	080601d0 	.word	0x080601d0

080a1af8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a1af8:	b508      	push	{r3, lr}
 80a1afa:	4b02      	ldr	r3, [pc, #8]	; (80a1b04 <HAL_Feature_Set+0xc>)
 80a1afc:	681b      	ldr	r3, [r3, #0]
 80a1afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1b00:	9301      	str	r3, [sp, #4]
 80a1b02:	bd08      	pop	{r3, pc}
 80a1b04:	080601b8 	.word	0x080601b8

080a1b08 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a1b08:	b508      	push	{r3, lr}
 80a1b0a:	4b02      	ldr	r3, [pc, #8]	; (80a1b14 <HAL_Core_System_Reset_Ex+0xc>)
 80a1b0c:	681b      	ldr	r3, [r3, #0]
 80a1b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1b10:	9301      	str	r3, [sp, #4]
 80a1b12:	bd08      	pop	{r3, pc}
 80a1b14:	080601b8 	.word	0x080601b8

080a1b18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1b18:	b508      	push	{r3, lr}
 80a1b1a:	4b02      	ldr	r3, [pc, #8]	; (80a1b24 <HAL_RNG_GetRandomNumber+0xc>)
 80a1b1c:	681b      	ldr	r3, [r3, #0]
 80a1b1e:	685b      	ldr	r3, [r3, #4]
 80a1b20:	9301      	str	r3, [sp, #4]
 80a1b22:	bd08      	pop	{r3, pc}
 80a1b24:	0806019c 	.word	0x0806019c

080a1b28 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1b28:	b508      	push	{r3, lr}
 80a1b2a:	4b02      	ldr	r3, [pc, #8]	; (80a1b34 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1b2c:	681b      	ldr	r3, [r3, #0]
 80a1b2e:	695b      	ldr	r3, [r3, #20]
 80a1b30:	9301      	str	r3, [sp, #4]
 80a1b32:	bd08      	pop	{r3, pc}
 80a1b34:	0806019c 	.word	0x0806019c

080a1b38 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1b38:	b508      	push	{r3, lr}
 80a1b3a:	4b02      	ldr	r3, [pc, #8]	; (80a1b44 <HAL_RTC_Get_UnixTime+0xc>)
 80a1b3c:	681b      	ldr	r3, [r3, #0]
 80a1b3e:	69db      	ldr	r3, [r3, #28]
 80a1b40:	9301      	str	r3, [sp, #4]
 80a1b42:	bd08      	pop	{r3, pc}
 80a1b44:	0806019c 	.word	0x0806019c

080a1b48 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1b48:	b508      	push	{r3, lr}
 80a1b4a:	4b02      	ldr	r3, [pc, #8]	; (80a1b54 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1b4c:	681b      	ldr	r3, [r3, #0]
 80a1b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1b50:	9301      	str	r3, [sp, #4]
 80a1b52:	bd08      	pop	{r3, pc}
 80a1b54:	0806019c 	.word	0x0806019c

080a1b58 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a1b58:	b508      	push	{r3, lr}
 80a1b5a:	4b02      	ldr	r3, [pc, #8]	; (80a1b64 <hal_timer_millis+0xc>)
 80a1b5c:	681b      	ldr	r3, [r3, #0]
 80a1b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1b60:	9301      	str	r3, [sp, #4]
 80a1b62:	bd08      	pop	{r3, pc}
 80a1b64:	0806019c 	.word	0x0806019c

080a1b68 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1b68:	b508      	push	{r3, lr}
 80a1b6a:	4b02      	ldr	r3, [pc, #8]	; (80a1b74 <HAL_Pin_Map+0xc>)
 80a1b6c:	681b      	ldr	r3, [r3, #0]
 80a1b6e:	681b      	ldr	r3, [r3, #0]
 80a1b70:	9301      	str	r3, [sp, #4]
 80a1b72:	bd08      	pop	{r3, pc}
 80a1b74:	080601b0 	.word	0x080601b0

080a1b78 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1b78:	b508      	push	{r3, lr}
 80a1b7a:	4b02      	ldr	r3, [pc, #8]	; (80a1b84 <HAL_Pin_Mode+0xc>)
 80a1b7c:	681b      	ldr	r3, [r3, #0]
 80a1b7e:	689b      	ldr	r3, [r3, #8]
 80a1b80:	9301      	str	r3, [sp, #4]
 80a1b82:	bd08      	pop	{r3, pc}
 80a1b84:	080601b0 	.word	0x080601b0

080a1b88 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1b88:	b508      	push	{r3, lr}
 80a1b8a:	4b02      	ldr	r3, [pc, #8]	; (80a1b94 <HAL_Get_Pin_Mode+0xc>)
 80a1b8c:	681b      	ldr	r3, [r3, #0]
 80a1b8e:	68db      	ldr	r3, [r3, #12]
 80a1b90:	9301      	str	r3, [sp, #4]
 80a1b92:	bd08      	pop	{r3, pc}
 80a1b94:	080601b0 	.word	0x080601b0

080a1b98 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1b98:	b508      	push	{r3, lr}
 80a1b9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ba4 <HAL_GPIO_Write+0xc>)
 80a1b9c:	681b      	ldr	r3, [r3, #0]
 80a1b9e:	691b      	ldr	r3, [r3, #16]
 80a1ba0:	9301      	str	r3, [sp, #4]
 80a1ba2:	bd08      	pop	{r3, pc}
 80a1ba4:	080601b0 	.word	0x080601b0

080a1ba8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1ba8:	b508      	push	{r3, lr}
 80a1baa:	4b02      	ldr	r3, [pc, #8]	; (80a1bb4 <HAL_GPIO_Read+0xc>)
 80a1bac:	681b      	ldr	r3, [r3, #0]
 80a1bae:	695b      	ldr	r3, [r3, #20]
 80a1bb0:	9301      	str	r3, [sp, #4]
 80a1bb2:	bd08      	pop	{r3, pc}
 80a1bb4:	080601b0 	.word	0x080601b0

080a1bb8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1bb8:	b508      	push	{r3, lr}
 80a1bba:	4b02      	ldr	r3, [pc, #8]	; (80a1bc4 <HAL_I2C_Begin+0xc>)
 80a1bbc:	681b      	ldr	r3, [r3, #0]
 80a1bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1bc0:	9301      	str	r3, [sp, #4]
 80a1bc2:	bd08      	pop	{r3, pc}
 80a1bc4:	080601ac 	.word	0x080601ac

080a1bc8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a1bc8:	b508      	push	{r3, lr}
 80a1bca:	4b02      	ldr	r3, [pc, #8]	; (80a1bd4 <HAL_I2C_Begin_Transmission+0xc>)
 80a1bcc:	681b      	ldr	r3, [r3, #0]
 80a1bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1bd0:	9301      	str	r3, [sp, #4]
 80a1bd2:	bd08      	pop	{r3, pc}
 80a1bd4:	080601ac 	.word	0x080601ac

080a1bd8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1bd8:	b508      	push	{r3, lr}
 80a1bda:	4b02      	ldr	r3, [pc, #8]	; (80a1be4 <HAL_I2C_End_Transmission+0xc>)
 80a1bdc:	681b      	ldr	r3, [r3, #0]
 80a1bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1be0:	9301      	str	r3, [sp, #4]
 80a1be2:	bd08      	pop	{r3, pc}
 80a1be4:	080601ac 	.word	0x080601ac

080a1be8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1be8:	b508      	push	{r3, lr}
 80a1bea:	4b02      	ldr	r3, [pc, #8]	; (80a1bf4 <HAL_I2C_Write_Data+0xc>)
 80a1bec:	681b      	ldr	r3, [r3, #0]
 80a1bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1bf0:	9301      	str	r3, [sp, #4]
 80a1bf2:	bd08      	pop	{r3, pc}
 80a1bf4:	080601ac 	.word	0x080601ac

080a1bf8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1bf8:	b508      	push	{r3, lr}
 80a1bfa:	4b02      	ldr	r3, [pc, #8]	; (80a1c04 <HAL_I2C_Available_Data+0xc>)
 80a1bfc:	681b      	ldr	r3, [r3, #0]
 80a1bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1c00:	9301      	str	r3, [sp, #4]
 80a1c02:	bd08      	pop	{r3, pc}
 80a1c04:	080601ac 	.word	0x080601ac

080a1c08 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c08:	b508      	push	{r3, lr}
 80a1c0a:	4b02      	ldr	r3, [pc, #8]	; (80a1c14 <HAL_I2C_Read_Data+0xc>)
 80a1c0c:	681b      	ldr	r3, [r3, #0]
 80a1c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1c10:	9301      	str	r3, [sp, #4]
 80a1c12:	bd08      	pop	{r3, pc}
 80a1c14:	080601ac 	.word	0x080601ac

080a1c18 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c18:	b508      	push	{r3, lr}
 80a1c1a:	4b02      	ldr	r3, [pc, #8]	; (80a1c24 <HAL_I2C_Peek_Data+0xc>)
 80a1c1c:	681b      	ldr	r3, [r3, #0]
 80a1c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1c20:	9301      	str	r3, [sp, #4]
 80a1c22:	bd08      	pop	{r3, pc}
 80a1c24:	080601ac 	.word	0x080601ac

080a1c28 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1c28:	b508      	push	{r3, lr}
 80a1c2a:	4b02      	ldr	r3, [pc, #8]	; (80a1c34 <HAL_I2C_Flush_Data+0xc>)
 80a1c2c:	681b      	ldr	r3, [r3, #0]
 80a1c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1c30:	9301      	str	r3, [sp, #4]
 80a1c32:	bd08      	pop	{r3, pc}
 80a1c34:	080601ac 	.word	0x080601ac

080a1c38 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1c38:	b508      	push	{r3, lr}
 80a1c3a:	4b02      	ldr	r3, [pc, #8]	; (80a1c44 <HAL_I2C_Is_Enabled+0xc>)
 80a1c3c:	681b      	ldr	r3, [r3, #0]
 80a1c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1c40:	9301      	str	r3, [sp, #4]
 80a1c42:	bd08      	pop	{r3, pc}
 80a1c44:	080601ac 	.word	0x080601ac

080a1c48 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1c48:	b508      	push	{r3, lr}
 80a1c4a:	4b03      	ldr	r3, [pc, #12]	; (80a1c58 <HAL_I2C_Init+0x10>)
 80a1c4c:	681b      	ldr	r3, [r3, #0]
 80a1c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1c52:	9301      	str	r3, [sp, #4]
 80a1c54:	bd08      	pop	{r3, pc}
 80a1c56:	0000      	.short	0x0000
 80a1c58:	080601ac 	.word	0x080601ac

080a1c5c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80a1c5c:	b508      	push	{r3, lr}
 80a1c5e:	4b03      	ldr	r3, [pc, #12]	; (80a1c6c <HAL_I2C_Acquire+0x10>)
 80a1c60:	681b      	ldr	r3, [r3, #0]
 80a1c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80a1c66:	9301      	str	r3, [sp, #4]
 80a1c68:	bd08      	pop	{r3, pc}
 80a1c6a:	0000      	.short	0x0000
 80a1c6c:	080601ac 	.word	0x080601ac

080a1c70 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80a1c70:	b508      	push	{r3, lr}
 80a1c72:	4b03      	ldr	r3, [pc, #12]	; (80a1c80 <HAL_I2C_Release+0x10>)
 80a1c74:	681b      	ldr	r3, [r3, #0]
 80a1c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80a1c7a:	9301      	str	r3, [sp, #4]
 80a1c7c:	bd08      	pop	{r3, pc}
 80a1c7e:	0000      	.short	0x0000
 80a1c80:	080601ac 	.word	0x080601ac

080a1c84 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80a1c84:	b508      	push	{r3, lr}
 80a1c86:	4b03      	ldr	r3, [pc, #12]	; (80a1c94 <HAL_I2C_Request_Data_Ex+0x10>)
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1c8e:	9301      	str	r3, [sp, #4]
 80a1c90:	bd08      	pop	{r3, pc}
 80a1c92:	0000      	.short	0x0000
 80a1c94:	080601ac 	.word	0x080601ac

080a1c98 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1c98:	b508      	push	{r3, lr}
 80a1c9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ca4 <HAL_SPI_Begin+0xc>)
 80a1c9c:	681b      	ldr	r3, [r3, #0]
 80a1c9e:	681b      	ldr	r3, [r3, #0]
 80a1ca0:	9301      	str	r3, [sp, #4]
 80a1ca2:	bd08      	pop	{r3, pc}
 80a1ca4:	080601b4 	.word	0x080601b4

080a1ca8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a1ca8:	b508      	push	{r3, lr}
 80a1caa:	4b02      	ldr	r3, [pc, #8]	; (80a1cb4 <HAL_SPI_Set_Bit_Order+0xc>)
 80a1cac:	681b      	ldr	r3, [r3, #0]
 80a1cae:	689b      	ldr	r3, [r3, #8]
 80a1cb0:	9301      	str	r3, [sp, #4]
 80a1cb2:	bd08      	pop	{r3, pc}
 80a1cb4:	080601b4 	.word	0x080601b4

080a1cb8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a1cb8:	b508      	push	{r3, lr}
 80a1cba:	4b02      	ldr	r3, [pc, #8]	; (80a1cc4 <HAL_SPI_Set_Data_Mode+0xc>)
 80a1cbc:	681b      	ldr	r3, [r3, #0]
 80a1cbe:	68db      	ldr	r3, [r3, #12]
 80a1cc0:	9301      	str	r3, [sp, #4]
 80a1cc2:	bd08      	pop	{r3, pc}
 80a1cc4:	080601b4 	.word	0x080601b4

080a1cc8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a1cc8:	b508      	push	{r3, lr}
 80a1cca:	4b02      	ldr	r3, [pc, #8]	; (80a1cd4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	691b      	ldr	r3, [r3, #16]
 80a1cd0:	9301      	str	r3, [sp, #4]
 80a1cd2:	bd08      	pop	{r3, pc}
 80a1cd4:	080601b4 	.word	0x080601b4

080a1cd8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1cd8:	b508      	push	{r3, lr}
 80a1cda:	4b02      	ldr	r3, [pc, #8]	; (80a1ce4 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	695b      	ldr	r3, [r3, #20]
 80a1ce0:	9301      	str	r3, [sp, #4]
 80a1ce2:	bd08      	pop	{r3, pc}
 80a1ce4:	080601b4 	.word	0x080601b4

080a1ce8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1ce8:	b508      	push	{r3, lr}
 80a1cea:	4b02      	ldr	r3, [pc, #8]	; (80a1cf4 <HAL_SPI_Init+0xc>)
 80a1cec:	681b      	ldr	r3, [r3, #0]
 80a1cee:	69db      	ldr	r3, [r3, #28]
 80a1cf0:	9301      	str	r3, [sp, #4]
 80a1cf2:	bd08      	pop	{r3, pc}
 80a1cf4:	080601b4 	.word	0x080601b4

080a1cf8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1cf8:	b508      	push	{r3, lr}
 80a1cfa:	4b02      	ldr	r3, [pc, #8]	; (80a1d04 <HAL_SPI_Is_Enabled+0xc>)
 80a1cfc:	681b      	ldr	r3, [r3, #0]
 80a1cfe:	6a1b      	ldr	r3, [r3, #32]
 80a1d00:	9301      	str	r3, [sp, #4]
 80a1d02:	bd08      	pop	{r3, pc}
 80a1d04:	080601b4 	.word	0x080601b4

080a1d08 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1d08:	b508      	push	{r3, lr}
 80a1d0a:	4b02      	ldr	r3, [pc, #8]	; (80a1d14 <HAL_SPI_Info+0xc>)
 80a1d0c:	681b      	ldr	r3, [r3, #0]
 80a1d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1d10:	9301      	str	r3, [sp, #4]
 80a1d12:	bd08      	pop	{r3, pc}
 80a1d14:	080601b4 	.word	0x080601b4

080a1d18 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1d18:	b508      	push	{r3, lr}
 80a1d1a:	4b02      	ldr	r3, [pc, #8]	; (80a1d24 <HAL_USART_Init+0xc>)
 80a1d1c:	681b      	ldr	r3, [r3, #0]
 80a1d1e:	699b      	ldr	r3, [r3, #24]
 80a1d20:	9301      	str	r3, [sp, #4]
 80a1d22:	bd08      	pop	{r3, pc}
 80a1d24:	080601c4 	.word	0x080601c4

080a1d28 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1d28:	b508      	push	{r3, lr}
 80a1d2a:	4b02      	ldr	r3, [pc, #8]	; (80a1d34 <HAL_USART_Write_Data+0xc>)
 80a1d2c:	681b      	ldr	r3, [r3, #0]
 80a1d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1d30:	9301      	str	r3, [sp, #4]
 80a1d32:	bd08      	pop	{r3, pc}
 80a1d34:	080601c4 	.word	0x080601c4

080a1d38 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1d38:	b508      	push	{r3, lr}
 80a1d3a:	4b02      	ldr	r3, [pc, #8]	; (80a1d44 <HAL_USART_Available_Data+0xc>)
 80a1d3c:	681b      	ldr	r3, [r3, #0]
 80a1d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1d40:	9301      	str	r3, [sp, #4]
 80a1d42:	bd08      	pop	{r3, pc}
 80a1d44:	080601c4 	.word	0x080601c4

080a1d48 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1d48:	b508      	push	{r3, lr}
 80a1d4a:	4b02      	ldr	r3, [pc, #8]	; (80a1d54 <HAL_USART_Read_Data+0xc>)
 80a1d4c:	681b      	ldr	r3, [r3, #0]
 80a1d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d50:	9301      	str	r3, [sp, #4]
 80a1d52:	bd08      	pop	{r3, pc}
 80a1d54:	080601c4 	.word	0x080601c4

080a1d58 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1d58:	b508      	push	{r3, lr}
 80a1d5a:	4b02      	ldr	r3, [pc, #8]	; (80a1d64 <HAL_USART_Peek_Data+0xc>)
 80a1d5c:	681b      	ldr	r3, [r3, #0]
 80a1d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d60:	9301      	str	r3, [sp, #4]
 80a1d62:	bd08      	pop	{r3, pc}
 80a1d64:	080601c4 	.word	0x080601c4

080a1d68 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1d68:	b508      	push	{r3, lr}
 80a1d6a:	4b02      	ldr	r3, [pc, #8]	; (80a1d74 <HAL_USART_Flush_Data+0xc>)
 80a1d6c:	681b      	ldr	r3, [r3, #0]
 80a1d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d70:	9301      	str	r3, [sp, #4]
 80a1d72:	bd08      	pop	{r3, pc}
 80a1d74:	080601c4 	.word	0x080601c4

080a1d78 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1d78:	b508      	push	{r3, lr}
 80a1d7a:	4b02      	ldr	r3, [pc, #8]	; (80a1d84 <HAL_USART_Is_Enabled+0xc>)
 80a1d7c:	681b      	ldr	r3, [r3, #0]
 80a1d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1d80:	9301      	str	r3, [sp, #4]
 80a1d82:	bd08      	pop	{r3, pc}
 80a1d84:	080601c4 	.word	0x080601c4

080a1d88 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1d88:	b508      	push	{r3, lr}
 80a1d8a:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1d8c:	681b      	ldr	r3, [r3, #0]
 80a1d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d90:	9301      	str	r3, [sp, #4]
 80a1d92:	bd08      	pop	{r3, pc}
 80a1d94:	080601c4 	.word	0x080601c4

080a1d98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1d98:	b508      	push	{r3, lr}
 80a1d9a:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <HAL_USB_USART_Init+0xc>)
 80a1d9c:	681b      	ldr	r3, [r3, #0]
 80a1d9e:	681b      	ldr	r3, [r3, #0]
 80a1da0:	9301      	str	r3, [sp, #4]
 80a1da2:	bd08      	pop	{r3, pc}
 80a1da4:	080601d8 	.word	0x080601d8

080a1da8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1da8:	b508      	push	{r3, lr}
 80a1daa:	4b02      	ldr	r3, [pc, #8]	; (80a1db4 <HAL_USB_USART_Available_Data+0xc>)
 80a1dac:	681b      	ldr	r3, [r3, #0]
 80a1dae:	691b      	ldr	r3, [r3, #16]
 80a1db0:	9301      	str	r3, [sp, #4]
 80a1db2:	bd08      	pop	{r3, pc}
 80a1db4:	080601d8 	.word	0x080601d8

080a1db8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1db8:	b508      	push	{r3, lr}
 80a1dba:	4b02      	ldr	r3, [pc, #8]	; (80a1dc4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1dbc:	681b      	ldr	r3, [r3, #0]
 80a1dbe:	695b      	ldr	r3, [r3, #20]
 80a1dc0:	9301      	str	r3, [sp, #4]
 80a1dc2:	bd08      	pop	{r3, pc}
 80a1dc4:	080601d8 	.word	0x080601d8

080a1dc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1dc8:	b508      	push	{r3, lr}
 80a1dca:	4b02      	ldr	r3, [pc, #8]	; (80a1dd4 <HAL_USB_USART_Receive_Data+0xc>)
 80a1dcc:	681b      	ldr	r3, [r3, #0]
 80a1dce:	699b      	ldr	r3, [r3, #24]
 80a1dd0:	9301      	str	r3, [sp, #4]
 80a1dd2:	bd08      	pop	{r3, pc}
 80a1dd4:	080601d8 	.word	0x080601d8

080a1dd8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1dd8:	b508      	push	{r3, lr}
 80a1dda:	4b02      	ldr	r3, [pc, #8]	; (80a1de4 <HAL_USB_USART_Send_Data+0xc>)
 80a1ddc:	681b      	ldr	r3, [r3, #0]
 80a1dde:	69db      	ldr	r3, [r3, #28]
 80a1de0:	9301      	str	r3, [sp, #4]
 80a1de2:	bd08      	pop	{r3, pc}
 80a1de4:	080601d8 	.word	0x080601d8

080a1de8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1de8:	b508      	push	{r3, lr}
 80a1dea:	4b02      	ldr	r3, [pc, #8]	; (80a1df4 <HAL_USB_USART_Flush_Data+0xc>)
 80a1dec:	681b      	ldr	r3, [r3, #0]
 80a1dee:	6a1b      	ldr	r3, [r3, #32]
 80a1df0:	9301      	str	r3, [sp, #4]
 80a1df2:	bd08      	pop	{r3, pc}
 80a1df4:	080601d8 	.word	0x080601d8

080a1df8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1df8:	b508      	push	{r3, lr}
 80a1dfa:	4b02      	ldr	r3, [pc, #8]	; (80a1e04 <inet_gethostbyname+0xc>)
 80a1dfc:	681b      	ldr	r3, [r3, #0]
 80a1dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e00:	9301      	str	r3, [sp, #4]
 80a1e02:	bd08      	pop	{r3, pc}
 80a1e04:	080601c0 	.word	0x080601c0

080a1e08 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1e08:	b508      	push	{r3, lr}
 80a1e0a:	4b02      	ldr	r3, [pc, #8]	; (80a1e14 <system_mode+0xc>)
 80a1e0c:	681b      	ldr	r3, [r3, #0]
 80a1e0e:	681b      	ldr	r3, [r3, #0]
 80a1e10:	9301      	str	r3, [sp, #4]
 80a1e12:	bd08      	pop	{r3, pc}
 80a1e14:	080601a4 	.word	0x080601a4

080a1e18 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1e18:	b508      	push	{r3, lr}
 80a1e1a:	4b02      	ldr	r3, [pc, #8]	; (80a1e24 <set_system_mode+0xc>)
 80a1e1c:	681b      	ldr	r3, [r3, #0]
 80a1e1e:	685b      	ldr	r3, [r3, #4]
 80a1e20:	9301      	str	r3, [sp, #4]
 80a1e22:	bd08      	pop	{r3, pc}
 80a1e24:	080601a4 	.word	0x080601a4

080a1e28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1e28:	b508      	push	{r3, lr}
 80a1e2a:	4b02      	ldr	r3, [pc, #8]	; (80a1e34 <system_delay_ms+0xc>)
 80a1e2c:	681b      	ldr	r3, [r3, #0]
 80a1e2e:	695b      	ldr	r3, [r3, #20]
 80a1e30:	9301      	str	r3, [sp, #4]
 80a1e32:	bd08      	pop	{r3, pc}
 80a1e34:	080601a4 	.word	0x080601a4

080a1e38 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1e38:	b508      	push	{r3, lr}
 80a1e3a:	4b02      	ldr	r3, [pc, #8]	; (80a1e44 <system_thread_set_state+0xc>)
 80a1e3c:	681b      	ldr	r3, [r3, #0]
 80a1e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e40:	9301      	str	r3, [sp, #4]
 80a1e42:	bd08      	pop	{r3, pc}
 80a1e44:	080601a4 	.word	0x080601a4

080a1e48 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1e48:	b508      	push	{r3, lr}
 80a1e4a:	4b02      	ldr	r3, [pc, #8]	; (80a1e54 <application_thread_current+0xc>)
 80a1e4c:	681b      	ldr	r3, [r3, #0]
 80a1e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1e50:	9301      	str	r3, [sp, #4]
 80a1e52:	bd08      	pop	{r3, pc}
 80a1e54:	080601a4 	.word	0x080601a4

080a1e58 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1e58:	b508      	push	{r3, lr}
 80a1e5a:	4b02      	ldr	r3, [pc, #8]	; (80a1e64 <application_thread_invoke+0xc>)
 80a1e5c:	681b      	ldr	r3, [r3, #0]
 80a1e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1e60:	9301      	str	r3, [sp, #4]
 80a1e62:	bd08      	pop	{r3, pc}
 80a1e64:	080601a4 	.word	0x080601a4

080a1e68 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1e68:	b508      	push	{r3, lr}
 80a1e6a:	4b02      	ldr	r3, [pc, #8]	; (80a1e74 <system_thread_get_state+0xc>)
 80a1e6c:	681b      	ldr	r3, [r3, #0]
 80a1e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1e70:	9301      	str	r3, [sp, #4]
 80a1e72:	bd08      	pop	{r3, pc}
 80a1e74:	080601a4 	.word	0x080601a4

080a1e78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1e78:	b508      	push	{r3, lr}
 80a1e7a:	4b03      	ldr	r3, [pc, #12]	; (80a1e88 <system_ctrl_set_app_request_handler+0x10>)
 80a1e7c:	681b      	ldr	r3, [r3, #0]
 80a1e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1e82:	9301      	str	r3, [sp, #4]
 80a1e84:	bd08      	pop	{r3, pc}
 80a1e86:	0000      	.short	0x0000
 80a1e88:	080601a4 	.word	0x080601a4

080a1e8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1e8c:	b508      	push	{r3, lr}
 80a1e8e:	4b03      	ldr	r3, [pc, #12]	; (80a1e9c <system_ctrl_set_result+0x10>)
 80a1e90:	681b      	ldr	r3, [r3, #0]
 80a1e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1e96:	9301      	str	r3, [sp, #4]
 80a1e98:	bd08      	pop	{r3, pc}
 80a1e9a:	0000      	.short	0x0000
 80a1e9c:	080601a4 	.word	0x080601a4

080a1ea0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <spark_variable+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	681b      	ldr	r3, [r3, #0]
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	080601cc 	.word	0x080601cc

080a1eb0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <spark_function+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	685b      	ldr	r3, [r3, #4]
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	080601cc 	.word	0x080601cc

080a1ec0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <spark_process+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	689b      	ldr	r3, [r3, #8]
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080601cc 	.word	0x080601cc

080a1ed0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a1ed0:	b508      	push	{r3, lr}
 80a1ed2:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <spark_cloud_flag_connect+0xc>)
 80a1ed4:	681b      	ldr	r3, [r3, #0]
 80a1ed6:	68db      	ldr	r3, [r3, #12]
 80a1ed8:	9301      	str	r3, [sp, #4]
 80a1eda:	bd08      	pop	{r3, pc}
 80a1edc:	080601cc 	.word	0x080601cc

080a1ee0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1ee0:	b508      	push	{r3, lr}
 80a1ee2:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <spark_cloud_flag_connected+0xc>)
 80a1ee4:	681b      	ldr	r3, [r3, #0]
 80a1ee6:	695b      	ldr	r3, [r3, #20]
 80a1ee8:	9301      	str	r3, [sp, #4]
 80a1eea:	bd08      	pop	{r3, pc}
 80a1eec:	080601cc 	.word	0x080601cc

080a1ef0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <spark_deviceID+0xc>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	69db      	ldr	r3, [r3, #28]
 80a1ef8:	9301      	str	r3, [sp, #4]
 80a1efa:	bd08      	pop	{r3, pc}
 80a1efc:	080601cc 	.word	0x080601cc

080a1f00 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1f00:	b508      	push	{r3, lr}
 80a1f02:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <spark_send_event+0xc>)
 80a1f04:	681b      	ldr	r3, [r3, #0]
 80a1f06:	6a1b      	ldr	r3, [r3, #32]
 80a1f08:	9301      	str	r3, [sp, #4]
 80a1f0a:	bd08      	pop	{r3, pc}
 80a1f0c:	080601cc 	.word	0x080601cc

080a1f10 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a1f10:	b508      	push	{r3, lr}
 80a1f12:	4b02      	ldr	r3, [pc, #8]	; (80a1f1c <spark_subscribe+0xc>)
 80a1f14:	681b      	ldr	r3, [r3, #0]
 80a1f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1f18:	9301      	str	r3, [sp, #4]
 80a1f1a:	bd08      	pop	{r3, pc}
 80a1f1c:	080601cc 	.word	0x080601cc

080a1f20 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1f20:	b508      	push	{r3, lr}
 80a1f22:	4b02      	ldr	r3, [pc, #8]	; (80a1f2c <spark_sync_time_pending+0xc>)
 80a1f24:	681b      	ldr	r3, [r3, #0]
 80a1f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1f28:	9301      	str	r3, [sp, #4]
 80a1f2a:	bd08      	pop	{r3, pc}
 80a1f2c:	080601cc 	.word	0x080601cc

080a1f30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1f30:	b508      	push	{r3, lr}
 80a1f32:	4b02      	ldr	r3, [pc, #8]	; (80a1f3c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1f34:	681b      	ldr	r3, [r3, #0]
 80a1f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1f38:	9301      	str	r3, [sp, #4]
 80a1f3a:	bd08      	pop	{r3, pc}
 80a1f3c:	080601cc 	.word	0x080601cc

080a1f40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f40:	b508      	push	{r3, lr}
 80a1f42:	4b02      	ldr	r3, [pc, #8]	; (80a1f4c <network_connect+0xc>)
 80a1f44:	681b      	ldr	r3, [r3, #0]
 80a1f46:	685b      	ldr	r3, [r3, #4]
 80a1f48:	9301      	str	r3, [sp, #4]
 80a1f4a:	bd08      	pop	{r3, pc}
 80a1f4c:	080601c8 	.word	0x080601c8

080a1f50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1f50:	b508      	push	{r3, lr}
 80a1f52:	4b02      	ldr	r3, [pc, #8]	; (80a1f5c <network_connecting+0xc>)
 80a1f54:	681b      	ldr	r3, [r3, #0]
 80a1f56:	689b      	ldr	r3, [r3, #8]
 80a1f58:	9301      	str	r3, [sp, #4]
 80a1f5a:	bd08      	pop	{r3, pc}
 80a1f5c:	080601c8 	.word	0x080601c8

080a1f60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1f60:	b508      	push	{r3, lr}
 80a1f62:	4b02      	ldr	r3, [pc, #8]	; (80a1f6c <network_disconnect+0xc>)
 80a1f64:	681b      	ldr	r3, [r3, #0]
 80a1f66:	68db      	ldr	r3, [r3, #12]
 80a1f68:	9301      	str	r3, [sp, #4]
 80a1f6a:	bd08      	pop	{r3, pc}
 80a1f6c:	080601c8 	.word	0x080601c8

080a1f70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1f70:	b508      	push	{r3, lr}
 80a1f72:	4b02      	ldr	r3, [pc, #8]	; (80a1f7c <network_ready+0xc>)
 80a1f74:	681b      	ldr	r3, [r3, #0]
 80a1f76:	691b      	ldr	r3, [r3, #16]
 80a1f78:	9301      	str	r3, [sp, #4]
 80a1f7a:	bd08      	pop	{r3, pc}
 80a1f7c:	080601c8 	.word	0x080601c8

080a1f80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f80:	b508      	push	{r3, lr}
 80a1f82:	4b02      	ldr	r3, [pc, #8]	; (80a1f8c <network_on+0xc>)
 80a1f84:	681b      	ldr	r3, [r3, #0]
 80a1f86:	695b      	ldr	r3, [r3, #20]
 80a1f88:	9301      	str	r3, [sp, #4]
 80a1f8a:	bd08      	pop	{r3, pc}
 80a1f8c:	080601c8 	.word	0x080601c8

080a1f90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f90:	b508      	push	{r3, lr}
 80a1f92:	4b02      	ldr	r3, [pc, #8]	; (80a1f9c <network_off+0xc>)
 80a1f94:	681b      	ldr	r3, [r3, #0]
 80a1f96:	699b      	ldr	r3, [r3, #24]
 80a1f98:	9301      	str	r3, [sp, #4]
 80a1f9a:	bd08      	pop	{r3, pc}
 80a1f9c:	080601c8 	.word	0x080601c8

080a1fa0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1fa0:	b508      	push	{r3, lr}
 80a1fa2:	4b02      	ldr	r3, [pc, #8]	; (80a1fac <network_listen+0xc>)
 80a1fa4:	681b      	ldr	r3, [r3, #0]
 80a1fa6:	69db      	ldr	r3, [r3, #28]
 80a1fa8:	9301      	str	r3, [sp, #4]
 80a1faa:	bd08      	pop	{r3, pc}
 80a1fac:	080601c8 	.word	0x080601c8

080a1fb0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1fb0:	b508      	push	{r3, lr}
 80a1fb2:	4b02      	ldr	r3, [pc, #8]	; (80a1fbc <network_listening+0xc>)
 80a1fb4:	681b      	ldr	r3, [r3, #0]
 80a1fb6:	6a1b      	ldr	r3, [r3, #32]
 80a1fb8:	9301      	str	r3, [sp, #4]
 80a1fba:	bd08      	pop	{r3, pc}
 80a1fbc:	080601c8 	.word	0x080601c8

080a1fc0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1fc0:	b508      	push	{r3, lr}
 80a1fc2:	4b02      	ldr	r3, [pc, #8]	; (80a1fcc <network_set_listen_timeout+0xc>)
 80a1fc4:	681b      	ldr	r3, [r3, #0]
 80a1fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1fc8:	9301      	str	r3, [sp, #4]
 80a1fca:	bd08      	pop	{r3, pc}
 80a1fcc:	080601c8 	.word	0x080601c8

080a1fd0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1fd0:	b508      	push	{r3, lr}
 80a1fd2:	4b02      	ldr	r3, [pc, #8]	; (80a1fdc <network_get_listen_timeout+0xc>)
 80a1fd4:	681b      	ldr	r3, [r3, #0]
 80a1fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1fd8:	9301      	str	r3, [sp, #4]
 80a1fda:	bd08      	pop	{r3, pc}
 80a1fdc:	080601c8 	.word	0x080601c8

080a1fe0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1fe0:	b508      	push	{r3, lr}
 80a1fe2:	4b02      	ldr	r3, [pc, #8]	; (80a1fec <malloc+0xc>)
 80a1fe4:	681b      	ldr	r3, [r3, #0]
 80a1fe6:	681b      	ldr	r3, [r3, #0]
 80a1fe8:	9301      	str	r3, [sp, #4]
 80a1fea:	bd08      	pop	{r3, pc}
 80a1fec:	080601a0 	.word	0x080601a0

080a1ff0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1ff0:	b508      	push	{r3, lr}
 80a1ff2:	4b02      	ldr	r3, [pc, #8]	; (80a1ffc <free+0xc>)
 80a1ff4:	681b      	ldr	r3, [r3, #0]
 80a1ff6:	685b      	ldr	r3, [r3, #4]
 80a1ff8:	9301      	str	r3, [sp, #4]
 80a1ffa:	bd08      	pop	{r3, pc}
 80a1ffc:	080601a0 	.word	0x080601a0

080a2000 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2000:	b508      	push	{r3, lr}
 80a2002:	4b02      	ldr	r3, [pc, #8]	; (80a200c <realloc+0xc>)
 80a2004:	681b      	ldr	r3, [r3, #0]
 80a2006:	689b      	ldr	r3, [r3, #8]
 80a2008:	9301      	str	r3, [sp, #4]
 80a200a:	bd08      	pop	{r3, pc}
 80a200c:	080601a0 	.word	0x080601a0

080a2010 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a2010:	b508      	push	{r3, lr}
 80a2012:	4b02      	ldr	r3, [pc, #8]	; (80a201c <siscanf+0xc>)
 80a2014:	681b      	ldr	r3, [r3, #0]
 80a2016:	699b      	ldr	r3, [r3, #24]
 80a2018:	9301      	str	r3, [sp, #4]
 80a201a:	bd08      	pop	{r3, pc}
 80a201c:	080601a0 	.word	0x080601a0

080a2020 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a2020:	b508      	push	{r3, lr}
 80a2022:	4b02      	ldr	r3, [pc, #8]	; (80a202c <snprintf+0xc>)
 80a2024:	681b      	ldr	r3, [r3, #0]
 80a2026:	69db      	ldr	r3, [r3, #28]
 80a2028:	9301      	str	r3, [sp, #4]
 80a202a:	bd08      	pop	{r3, pc}
 80a202c:	080601a0 	.word	0x080601a0

080a2030 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2030:	b508      	push	{r3, lr}
 80a2032:	4b02      	ldr	r3, [pc, #8]	; (80a203c <abort+0xc>)
 80a2034:	681b      	ldr	r3, [r3, #0]
 80a2036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2038:	9301      	str	r3, [sp, #4]
 80a203a:	bd08      	pop	{r3, pc}
 80a203c:	080601a0 	.word	0x080601a0

080a2040 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2040:	b508      	push	{r3, lr}
 80a2042:	4b02      	ldr	r3, [pc, #8]	; (80a204c <_malloc_r+0xc>)
 80a2044:	681b      	ldr	r3, [r3, #0]
 80a2046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2048:	9301      	str	r3, [sp, #4]
 80a204a:	bd08      	pop	{r3, pc}
 80a204c:	080601a0 	.word	0x080601a0

080a2050 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2050:	2100      	movs	r1, #0
 80a2052:	f7ff bee9 	b.w	80a1e28 <system_delay_ms>

080a2056 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2056:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2058:	6883      	ldr	r3, [r0, #8]
 80a205a:	4604      	mov	r4, r0
 80a205c:	b90b      	cbnz	r3, 80a2062 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a205e:	f001 fa9c 	bl	80a359a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2062:	68c3      	ldr	r3, [r0, #12]
 80a2064:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2066:	68a3      	ldr	r3, [r4, #8]
 80a2068:	b11b      	cbz	r3, 80a2072 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a206a:	2203      	movs	r2, #3
 80a206c:	4621      	mov	r1, r4
 80a206e:	4620      	mov	r0, r4
 80a2070:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2072:	4620      	mov	r0, r4
}
 80a2074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2078:	2110      	movs	r1, #16
 80a207a:	f001 ba72 	b.w	80a3562 <_ZdlPvj>

080a207e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a207e:	4770      	bx	lr

080a2080 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a2080:	2000      	movs	r0, #0
 80a2082:	4770      	bx	lr

080a2084 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2084:	b510      	push	{r4, lr}
 80a2086:	4604      	mov	r4, r0
 80a2088:	2110      	movs	r1, #16
 80a208a:	f001 fa6a 	bl	80a3562 <_ZdlPvj>
 80a208e:	4620      	mov	r0, r4
 80a2090:	bd10      	pop	{r4, pc}

080a2092 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a2092:	b508      	push	{r3, lr}
      { delete this; }
 80a2094:	b108      	cbz	r0, 80a209a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a2096:	f7ff fff5 	bl	80a2084 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a209a:	bd08      	pop	{r3, pc}

080a209c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a209c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a209e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a20a0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a20a2:	b113      	cbz	r3, 80a20aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a20a4:	2203      	movs	r2, #3
 80a20a6:	4601      	mov	r1, r0
 80a20a8:	4798      	blx	r3
    }
 80a20aa:	4620      	mov	r0, r4
 80a20ac:	bd10      	pop	{r4, pc}

080a20ae <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a20ae:	2200      	movs	r2, #0
 80a20b0:	6002      	str	r2, [r0, #0]
 80a20b2:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a20b6:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a20b8:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a20ba:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a20be:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a20c0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a20c2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a20c4:	680c      	ldr	r4, [r1, #0]
 80a20c6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a20c8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a20ca:	bd10      	pop	{r4, pc}

080a20cc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a20cc:	b510      	push	{r4, lr}
 80a20ce:	4604      	mov	r4, r0
    free((void*)msg_);
 80a20d0:	6800      	ldr	r0, [r0, #0]
 80a20d2:	f7ff ff8d 	bl	80a1ff0 <free>
}
 80a20d6:	4620      	mov	r0, r4
 80a20d8:	bd10      	pop	{r4, pc}

080a20da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a20da:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a20dc:	68c4      	ldr	r4, [r0, #12]
 80a20de:	b1f4      	cbz	r4, 80a211e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a20e0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a20e2:	2b02      	cmp	r3, #2
 80a20e4:	d103      	bne.n	80a20ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a20e6:	f104 000c 	add.w	r0, r4, #12
 80a20ea:	f7ff ffef 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a20ee:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a20f0:	b135      	cbz	r5, 80a2100 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a20f2:	4628      	mov	r0, r5
 80a20f4:	f7ff ffd2 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
 80a20f8:	2110      	movs	r1, #16
 80a20fa:	4628      	mov	r0, r5
 80a20fc:	f001 fa31 	bl	80a3562 <_ZdlPvj>
 80a2100:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2102:	b135      	cbz	r5, 80a2112 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2104:	4628      	mov	r0, r5
 80a2106:	f7ff ffc9 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
 80a210a:	2110      	movs	r1, #16
 80a210c:	4628      	mov	r0, r5
 80a210e:	f001 fa28 	bl	80a3562 <_ZdlPvj>
 80a2112:	4620      	mov	r0, r4
 80a2114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2118:	2114      	movs	r1, #20
 80a211a:	f001 ba22 	b.w	80a3562 <_ZdlPvj>
 80a211e:	bd38      	pop	{r3, r4, r5, pc}

080a2120 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a2120:	b510      	push	{r4, lr}
 80a2122:	b088      	sub	sp, #32
 80a2124:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2126:	4668      	mov	r0, sp
 80a2128:	f000 fde8 	bl	80a2cfc <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a212c:	4669      	mov	r1, sp
 80a212e:	a804      	add	r0, sp, #16
 80a2130:	f000 fe06 	bl	80a2d40 <_ZN6StringC1ERKS_>
 80a2134:	a804      	add	r0, sp, #16
 80a2136:	47a0      	blx	r4
 80a2138:	4604      	mov	r4, r0
 80a213a:	a804      	add	r0, sp, #16
 80a213c:	f000 fd97 	bl	80a2c6e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2140:	4668      	mov	r0, sp
 80a2142:	f000 fd94 	bl	80a2c6e <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a2146:	4620      	mov	r0, r4
 80a2148:	b008      	add	sp, #32
 80a214a:	bd10      	pop	{r4, pc}

080a214c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a214e:	4607      	mov	r7, r0
 80a2150:	460e      	mov	r6, r1
 80a2152:	4615      	mov	r5, r2
 80a2154:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a2156:	2410      	movs	r4, #16
 80a2158:	4622      	mov	r2, r4
 80a215a:	2100      	movs	r1, #0
 80a215c:	4668      	mov	r0, sp
 80a215e:	f002 fcba 	bl	80a4ad6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2162:	2200      	movs	r2, #0
 80a2164:	4669      	mov	r1, sp
 80a2166:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a2168:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a216c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a216e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a2170:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2172:	f7ff fe9d 	bl	80a1eb0 <spark_function>
}
 80a2176:	b005      	add	sp, #20
 80a2178:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a217a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a217a:	b513      	push	{r0, r1, r4, lr}
 80a217c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a217e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2182:	2300      	movs	r3, #0
 80a2184:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2186:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2188:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a218a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a218c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a218e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2190:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2192:	f7fe fdf8 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2196:	4620      	mov	r0, r4
 80a2198:	b002      	add	sp, #8
 80a219a:	bd10      	pop	{r4, pc}

080a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a219c:	680b      	ldr	r3, [r1, #0]
 80a219e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a21a0:	b113      	cbz	r3, 80a21a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a21a2:	685a      	ldr	r2, [r3, #4]
 80a21a4:	3201      	adds	r2, #1
 80a21a6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a21a8:	4770      	bx	lr

080a21aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a21aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a21ac:	460c      	mov	r4, r1
 80a21ae:	4606      	mov	r6, r0
 80a21b0:	460f      	mov	r7, r1
 80a21b2:	f854 3b04 	ldr.w	r3, [r4], #4
 80a21b6:	ad02      	add	r5, sp, #8
 80a21b8:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a21bc:	4621      	mov	r1, r4
 80a21be:	a801      	add	r0, sp, #4
 80a21c0:	f7ff ffec 	bl	80a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a21c4:	4629      	mov	r1, r5
 80a21c6:	4630      	mov	r0, r6
 80a21c8:	f7ff ffd7 	bl	80a217a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a21cc:	a801      	add	r0, sp, #4
 80a21ce:	f7fe fdda 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a21d2:	4620      	mov	r0, r4
 80a21d4:	f7fe fdd7 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a21d8:	4638      	mov	r0, r7
 80a21da:	2108      	movs	r1, #8
 80a21dc:	f001 f9c1 	bl	80a3562 <_ZdlPvj>
        return p;
    }
 80a21e0:	4630      	mov	r0, r6
 80a21e2:	b003      	add	sp, #12
 80a21e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a21e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a21e6:	b513      	push	{r0, r1, r4, lr}
 80a21e8:	460b      	mov	r3, r1
 80a21ea:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21ec:	c803      	ldmia	r0, {r0, r1}
 80a21ee:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a21f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a21f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a21fa:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a21fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2202:	b002      	add	sp, #8
 80a2204:	bd10      	pop	{r4, pc}
	...

080a2208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2208:	b538      	push	{r3, r4, r5, lr}
 80a220a:	2300      	movs	r3, #0
 80a220c:	4604      	mov	r4, r0
 80a220e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2210:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2212:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2214:	f7fd ff43 	bl	80a009e <_Znwj>
 80a2218:	b128      	cbz	r0, 80a2226 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a221a:	2301      	movs	r3, #1
 80a221c:	6043      	str	r3, [r0, #4]
 80a221e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2220:	4b02      	ldr	r3, [pc, #8]	; (80a222c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2222:	60c5      	str	r5, [r0, #12]
 80a2224:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2226:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2228:	4620      	mov	r0, r4
 80a222a:	bd38      	pop	{r3, r4, r5, pc}
 80a222c:	080a7204 	.word	0x080a7204

080a2230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2230:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2232:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2234:	b90a      	cbnz	r2, 80a223a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2236:	f001 f9b0 	bl	80a359a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a223a:	68c3      	ldr	r3, [r0, #12]
    }
 80a223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2240:	4718      	bx	r3

080a2242 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2242:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2244:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2246:	f100 0110 	add.w	r1, r0, #16
 80a224a:	f7ff fff1 	bl	80a2230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a224e:	bd08      	pop	{r3, pc}

080a2250 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2250:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2252:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2254:	b90a      	cbnz	r2, 80a225a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2256:	f001 f9a0 	bl	80a359a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a225a:	68c3      	ldr	r3, [r0, #12]
    }
 80a225c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2260:	4718      	bx	r3

080a2262 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2262:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2264:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2266:	f100 0110 	add.w	r1, r0, #16
 80a226a:	f7ff fff1 	bl	80a2250 <_ZNKSt8functionIFvRKbEEclES1_>
 80a226e:	bd08      	pop	{r3, pc}

080a2270 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2270:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2272:	2300      	movs	r3, #0
 80a2274:	6083      	str	r3, [r0, #8]
 80a2276:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2278:	4604      	mov	r4, r0
 80a227a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a227c:	b12b      	cbz	r3, 80a228a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a227e:	2202      	movs	r2, #2
 80a2280:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2282:	68eb      	ldr	r3, [r5, #12]
 80a2284:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2286:	68ab      	ldr	r3, [r5, #8]
 80a2288:	60a3      	str	r3, [r4, #8]
	}
    }
 80a228a:	4620      	mov	r0, r4
 80a228c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2290:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2292:	b089      	sub	sp, #36	; 0x24
 80a2294:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2296:	4668      	mov	r0, sp
 80a2298:	f7ff ff09 	bl	80a20ae <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a229c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a22a0:	2300      	movs	r3, #0
 80a22a2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a22a6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a22aa:	2b00      	cmp	r3, #0
 80a22ac:	d103      	bne.n	80a22b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a22ae:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a22b2:	2900      	cmp	r1, #0
 80a22b4:	d1f7      	bne.n	80a22a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a22b6:	d002      	beq.n	80a22be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a22b8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a22bc:	e063      	b.n	80a2386 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a22be:	f114 050c 	adds.w	r5, r4, #12
 80a22c2:	d003      	beq.n	80a22cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a22c4:	4669      	mov	r1, sp
 80a22c6:	4628      	mov	r0, r5
 80a22c8:	f7ff fef1 	bl	80a20ae <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a22cc:	f3bf 8f5f 	dmb	sy
 80a22d0:	2301      	movs	r3, #1
 80a22d2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a22d4:	f3bf 8f5f 	dmb	sy
 80a22d8:	f104 0308 	add.w	r3, r4, #8
 80a22dc:	2000      	movs	r0, #0
 80a22de:	e853 6f00 	ldrex	r6, [r3]
 80a22e2:	e843 0200 	strex	r2, r0, [r3]
 80a22e6:	2a00      	cmp	r2, #0
 80a22e8:	d1f9      	bne.n	80a22de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a22ea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a22ee:	2e00      	cmp	r6, #0
 80a22f0:	d049      	beq.n	80a2386 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a22f2:	f7ff fda9 	bl	80a1e48 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a22f6:	b120      	cbz	r0, 80a2302 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a22f8:	4629      	mov	r1, r5
 80a22fa:	4630      	mov	r0, r6
 80a22fc:	f7ff ff98 	bl	80a2230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2300:	e03a      	b.n	80a2378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2302:	4631      	mov	r1, r6
 80a2304:	a802      	add	r0, sp, #8
 80a2306:	f7ff ffb3 	bl	80a2270 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a230a:	68e0      	ldr	r0, [r4, #12]
 80a230c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2310:	b108      	cbz	r0, 80a2316 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a2312:	f002 fc23 	bl	80a4b5c <strdup>
 80a2316:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2318:	2010      	movs	r0, #16
 80a231a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a231e:	f7fd febe 	bl	80a009e <_Znwj>
 80a2322:	4605      	mov	r5, r0
 80a2324:	b1e8      	cbz	r0, 80a2362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2326:	2700      	movs	r7, #0
 80a2328:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a232a:	2018      	movs	r0, #24
 80a232c:	f7fd feb7 	bl	80a009e <_Znwj>
 80a2330:	4604      	mov	r4, r0
 80a2332:	b188      	cbz	r0, 80a2358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2334:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2336:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2338:	a802      	add	r0, sp, #8
 80a233a:	f7ff ff54 	bl	80a21e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a233e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2340:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2342:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2344:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2346:	9204      	str	r2, [sp, #16]
 80a2348:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a234a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a234c:	60e3      	str	r3, [r4, #12]
 80a234e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2352:	9205      	str	r2, [sp, #20]
 80a2354:	f7ff feab 	bl	80a20ae <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2358:	4b0d      	ldr	r3, [pc, #52]	; (80a2390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a235a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a235c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a235e:	4b0d      	ldr	r3, [pc, #52]	; (80a2394 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2360:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a2362:	a806      	add	r0, sp, #24
 80a2364:	f7ff feb2 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2368:	a802      	add	r0, sp, #8
 80a236a:	f7ff fe97 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a236e:	2200      	movs	r2, #0
 80a2370:	4629      	mov	r1, r5
 80a2372:	4809      	ldr	r0, [pc, #36]	; (80a2398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2374:	f7ff fd70 	bl	80a1e58 <application_thread_invoke>
 80a2378:	4630      	mov	r0, r6
 80a237a:	f7ff fe8f 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a237e:	2110      	movs	r1, #16
 80a2380:	4630      	mov	r0, r6
 80a2382:	f001 f8ee 	bl	80a3562 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2386:	4668      	mov	r0, sp
 80a2388:	f7ff fea0 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
    }
 80a238c:	b009      	add	sp, #36	; 0x24
 80a238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2390:	080a2243 	.word	0x080a2243
 80a2394:	080a24b9 	.word	0x080a24b9
 80a2398:	080a2057 	.word	0x080a2057

080a239c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a23a0:	b08b      	sub	sp, #44	; 0x2c
 80a23a2:	4606      	mov	r6, r0
 80a23a4:	460f      	mov	r7, r1
 80a23a6:	4690      	mov	r8, r2
 80a23a8:	4699      	mov	r9, r3
 80a23aa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a23ae:	f7ff fd97 	bl	80a1ee0 <spark_cloud_flag_connected>
 80a23b2:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a23b4:	4683      	mov	fp, r0
 80a23b6:	bb30      	cbnz	r0, 80a2406 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a23b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a23bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a23be:	a905      	add	r1, sp, #20
 80a23c0:	4628      	mov	r0, r5
 80a23c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a23c6:	f7ff fe72 	bl	80a20ae <_ZN8particle5ErrorC1EOS0_>
 80a23ca:	2014      	movs	r0, #20
 80a23cc:	f7fd fe67 	bl	80a009e <_Znwj>
 80a23d0:	4604      	mov	r4, r0
 80a23d2:	b158      	cbz	r0, 80a23ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a23d4:	2302      	movs	r3, #2
 80a23d6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a23d8:	2301      	movs	r3, #1
 80a23da:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a23dc:	f8c0 b004 	str.w	fp, [r0, #4]
 80a23e0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a23e4:	4629      	mov	r1, r5
 80a23e6:	300c      	adds	r0, #12
 80a23e8:	f7ff fe61 	bl	80a20ae <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a23ec:	4630      	mov	r0, r6
 80a23ee:	4621      	mov	r1, r4
 80a23f0:	f840 4b04 	str.w	r4, [r0], #4
 80a23f4:	f7ff ff08 	bl	80a2208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a23f8:	4628      	mov	r0, r5
 80a23fa:	f7ff fe67 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a23fe:	a805      	add	r0, sp, #20
 80a2400:	f7ff fe64 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
 80a2404:	e052      	b.n	80a24ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2406:	2400      	movs	r4, #0
 80a2408:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a240a:	2014      	movs	r0, #20
 80a240c:	606c      	str	r4, [r5, #4]
 80a240e:	60ac      	str	r4, [r5, #8]
 80a2410:	9307      	str	r3, [sp, #28]
 80a2412:	f7fd fe44 	bl	80a009e <_Znwj>
 80a2416:	4601      	mov	r1, r0
 80a2418:	b118      	cbz	r0, 80a2422 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a241a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a241c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a241e:	6044      	str	r4, [r0, #4]
 80a2420:	6084      	str	r4, [r0, #8]
 80a2422:	a804      	add	r0, sp, #16
 80a2424:	9103      	str	r1, [sp, #12]
 80a2426:	f7ff feef 	bl	80a2208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a242a:	4b22      	ldr	r3, [pc, #136]	; (80a24b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a242c:	2008      	movs	r0, #8
 80a242e:	9308      	str	r3, [sp, #32]
 80a2430:	f7fd fe35 	bl	80a009e <_Znwj>
 80a2434:	4604      	mov	r4, r0
 80a2436:	b128      	cbz	r0, 80a2444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2438:	9b03      	ldr	r3, [sp, #12]
 80a243a:	a904      	add	r1, sp, #16
 80a243c:	f840 3b04 	str.w	r3, [r0], #4
 80a2440:	f7ff feac 	bl	80a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2444:	9500      	str	r5, [sp, #0]
 80a2446:	fa5f f38a 	uxtb.w	r3, sl
 80a244a:	464a      	mov	r2, r9
 80a244c:	4641      	mov	r1, r8
 80a244e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2450:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2452:	f7ff fd55 	bl	80a1f00 <spark_send_event>
 80a2456:	b920      	cbnz	r0, 80a2462 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2458:	9b03      	ldr	r3, [sp, #12]
 80a245a:	785b      	ldrb	r3, [r3, #1]
 80a245c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2460:	b183      	cbz	r3, 80a2484 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a2462:	9b03      	ldr	r3, [sp, #12]
 80a2464:	a904      	add	r1, sp, #16
 80a2466:	a806      	add	r0, sp, #24
 80a2468:	9305      	str	r3, [sp, #20]
 80a246a:	f7ff fe97 	bl	80a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a246e:	a905      	add	r1, sp, #20
 80a2470:	4630      	mov	r0, r6
 80a2472:	f7ff fe82 	bl	80a217a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2476:	a806      	add	r0, sp, #24
 80a2478:	f7fe fc85 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a247c:	a804      	add	r0, sp, #16
 80a247e:	f7fe fc82 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2482:	e013      	b.n	80a24ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2484:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2488:	a905      	add	r1, sp, #20
 80a248a:	a803      	add	r0, sp, #12
 80a248c:	9205      	str	r2, [sp, #20]
 80a248e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2492:	f7ff fefd 	bl	80a2290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2496:	a805      	add	r0, sp, #20
 80a2498:	f7ff fe18 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a249c:	a805      	add	r0, sp, #20
 80a249e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a24a0:	f7ff fe83 	bl	80a21aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a24a4:	a806      	add	r0, sp, #24
 80a24a6:	f7fe fc6e 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a24aa:	e7da      	b.n	80a2462 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a24ac:	4630      	mov	r0, r6
 80a24ae:	b00b      	add	sp, #44	; 0x2c
 80a24b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a24b4:	080a2629 	.word	0x080a2629

080a24b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a24b8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a24ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24bc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a24be:	d006      	beq.n	80a24ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a24c0:	2a03      	cmp	r2, #3
 80a24c2:	d017      	beq.n	80a24f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a24c4:	2a01      	cmp	r2, #1
 80a24c6:	d122      	bne.n	80a250e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a24c8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a24ca:	6003      	str	r3, [r0, #0]
	      break;
 80a24cc:	e01f      	b.n	80a250e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a24ce:	2018      	movs	r0, #24
 80a24d0:	680e      	ldr	r6, [r1, #0]
 80a24d2:	f7fd fde4 	bl	80a009e <_Znwj>
 80a24d6:	4605      	mov	r5, r0
 80a24d8:	b150      	cbz	r0, 80a24f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a24da:	4631      	mov	r1, r6
 80a24dc:	f7ff fec8 	bl	80a2270 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a24e0:	6930      	ldr	r0, [r6, #16]
 80a24e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a24e6:	b108      	cbz	r0, 80a24ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a24e8:	f002 fb38 	bl	80a4b5c <strdup>
 80a24ec:	6128      	str	r0, [r5, #16]
 80a24ee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a24f0:	6025      	str	r5, [r4, #0]
 80a24f2:	e00c      	b.n	80a250e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a24f4:	6804      	ldr	r4, [r0, #0]
 80a24f6:	b154      	cbz	r4, 80a250e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a24f8:	f104 0010 	add.w	r0, r4, #16
 80a24fc:	f7ff fde6 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2500:	4620      	mov	r0, r4
 80a2502:	f7ff fdcb 	bl	80a209c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2506:	2118      	movs	r1, #24
 80a2508:	4620      	mov	r0, r4
 80a250a:	f001 f82a 	bl	80a3562 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a250e:	2000      	movs	r0, #0
 80a2510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2512 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2512:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2514:	2300      	movs	r3, #0
 80a2516:	6083      	str	r3, [r0, #8]
 80a2518:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a251a:	4604      	mov	r4, r0
 80a251c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a251e:	b12b      	cbz	r3, 80a252c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2520:	2202      	movs	r2, #2
 80a2522:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2524:	68eb      	ldr	r3, [r5, #12]
 80a2526:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2528:	68ab      	ldr	r3, [r5, #8]
 80a252a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a252c:	4620      	mov	r0, r4
 80a252e:	bd38      	pop	{r3, r4, r5, pc}

080a2530 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2530:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2532:	b570      	push	{r4, r5, r6, lr}
 80a2534:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2536:	d006      	beq.n	80a2546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2538:	2a03      	cmp	r2, #3
 80a253a:	d011      	beq.n	80a2560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a253c:	2a01      	cmp	r2, #1
 80a253e:	d118      	bne.n	80a2572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2540:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2542:	6003      	str	r3, [r0, #0]
	      break;
 80a2544:	e015      	b.n	80a2572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2546:	2014      	movs	r0, #20
 80a2548:	680e      	ldr	r6, [r1, #0]
 80a254a:	f7fd fda8 	bl	80a009e <_Znwj>
 80a254e:	4605      	mov	r5, r0
 80a2550:	b120      	cbz	r0, 80a255c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2552:	4631      	mov	r1, r6
 80a2554:	f7ff ffdd 	bl	80a2512 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2558:	7c33      	ldrb	r3, [r6, #16]
 80a255a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a255c:	6025      	str	r5, [r4, #0]
 80a255e:	e008      	b.n	80a2572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2560:	6804      	ldr	r4, [r0, #0]
 80a2562:	b134      	cbz	r4, 80a2572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2564:	4620      	mov	r0, r4
 80a2566:	f7ff fd99 	bl	80a209c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a256a:	2114      	movs	r1, #20
 80a256c:	4620      	mov	r0, r4
 80a256e:	f000 fff8 	bl	80a3562 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2572:	2000      	movs	r0, #0
 80a2574:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2578 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2578:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a257a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a257c:	f3bf 8f5f 	dmb	sy
 80a2580:	b087      	sub	sp, #28
 80a2582:	2300      	movs	r3, #0
 80a2584:	e850 6f00 	ldrex	r6, [r0]
 80a2588:	e840 3200 	strex	r2, r3, [r0]
 80a258c:	2a00      	cmp	r2, #0
 80a258e:	d1f9      	bne.n	80a2584 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2590:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2594:	2e00      	cmp	r6, #0
 80a2596:	d03f      	beq.n	80a2618 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2598:	4618      	mov	r0, r3
 80a259a:	f7ff fc55 	bl	80a1e48 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a259e:	4607      	mov	r7, r0
 80a25a0:	b120      	cbz	r0, 80a25ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a25a2:	4621      	mov	r1, r4
 80a25a4:	4630      	mov	r0, r6
 80a25a6:	f7ff fe53 	bl	80a2250 <_ZNKSt8functionIFvRKbEEclES1_>
 80a25aa:	e02e      	b.n	80a260a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a25ac:	4631      	mov	r1, r6
 80a25ae:	a801      	add	r0, sp, #4
 80a25b0:	f7ff ffaf 	bl	80a2512 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a25b4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a25b6:	2010      	movs	r0, #16
 80a25b8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a25bc:	f7fd fd6f 	bl	80a009e <_Znwj>
 80a25c0:	4605      	mov	r5, r0
 80a25c2:	b1d0      	cbz	r0, 80a25fa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a25c4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a25c6:	2014      	movs	r0, #20
 80a25c8:	f7fd fd69 	bl	80a009e <_Znwj>
 80a25cc:	4604      	mov	r4, r0
 80a25ce:	b178      	cbz	r0, 80a25f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a25d0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a25d2:	4601      	mov	r1, r0
 80a25d4:	a801      	add	r0, sp, #4
 80a25d6:	f7ff fe06 	bl	80a21e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a25da:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a25dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a25de:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a25e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a25e2:	9203      	str	r2, [sp, #12]
 80a25e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a25e6:	60e3      	str	r3, [r4, #12]
 80a25e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a25ec:	9204      	str	r2, [sp, #16]
 80a25ee:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a25f0:	4b0a      	ldr	r3, [pc, #40]	; (80a261c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a25f2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a25f4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a25f6:	4b0a      	ldr	r3, [pc, #40]	; (80a2620 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a25f8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a25fa:	a801      	add	r0, sp, #4
 80a25fc:	f7ff fd4e 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2600:	2200      	movs	r2, #0
 80a2602:	4629      	mov	r1, r5
 80a2604:	4807      	ldr	r0, [pc, #28]	; (80a2624 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a2606:	f7ff fc27 	bl	80a1e58 <application_thread_invoke>
 80a260a:	4630      	mov	r0, r6
 80a260c:	f7ff fd46 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2610:	2110      	movs	r1, #16
 80a2612:	4630      	mov	r0, r6
 80a2614:	f000 ffa5 	bl	80a3562 <_ZdlPvj>
        }
    }
 80a2618:	b007      	add	sp, #28
 80a261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a261c:	080a2263 	.word	0x080a2263
 80a2620:	080a2531 	.word	0x080a2531
 80a2624:	080a2057 	.word	0x080a2057

080a2628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2628:	b530      	push	{r4, r5, lr}
 80a262a:	4604      	mov	r4, r0
 80a262c:	b085      	sub	sp, #20
 80a262e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2630:	4668      	mov	r0, sp
 80a2632:	4611      	mov	r1, r2
 80a2634:	f7ff fdb9 	bl	80a21aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2638:	b17c      	cbz	r4, 80a265a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a263a:	b224      	sxth	r4, r4
 80a263c:	4628      	mov	r0, r5
 80a263e:	b10d      	cbz	r5, 80a2644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2640:	f002 fa8c 	bl	80a4b5c <strdup>
 80a2644:	9002      	str	r0, [sp, #8]
 80a2646:	a902      	add	r1, sp, #8
 80a2648:	4668      	mov	r0, sp
 80a264a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a264e:	f7ff fe1f 	bl	80a2290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2652:	a802      	add	r0, sp, #8
 80a2654:	f7ff fd3a 	bl	80a20cc <_ZN8particle5ErrorD1Ev>
 80a2658:	e01d      	b.n	80a2696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a265a:	f04f 0201 	mov.w	r2, #1
 80a265e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2660:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2664:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2668:	42a3      	cmp	r3, r4
 80a266a:	d103      	bne.n	80a2674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a266c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2670:	2900      	cmp	r1, #0
 80a2672:	d1f7      	bne.n	80a2664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2674:	d002      	beq.n	80a267c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2676:	f88d 3008 	strb.w	r3, [sp, #8]
 80a267a:	e00c      	b.n	80a2696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a267c:	f110 010c 	adds.w	r1, r0, #12
 80a2680:	f04f 0301 	mov.w	r3, #1
 80a2684:	bf18      	it	ne
 80a2686:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2688:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a268c:	3004      	adds	r0, #4
 80a268e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2692:	f7ff ff71 	bl	80a2578 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2696:	a801      	add	r0, sp, #4
 80a2698:	f7fe fb75 	bl	80a0d86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a269c:	b005      	add	sp, #20
 80a269e:	bd30      	pop	{r4, r5, pc}

080a26a0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80a26a0:	6800      	ldr	r0, [r0, #0]
 80a26a2:	f000 b8a5 	b.w	80a27f0 <_ZN7TwoWire4lockEv>

080a26a6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80a26a6:	b510      	push	{r4, lr}
 80a26a8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 80a26aa:	6001      	str	r1, [r0, #0]
 80a26ac:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 80a26ae:	b10a      	cbz	r2, 80a26b4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80a26b0:	f7ff fff6 	bl	80a26a0 <_ZN9FuelGauge4lockEv>
    }
}
 80a26b4:	4620      	mov	r0, r4
 80a26b6:	bd10      	pop	{r4, pc}

080a26b8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 80a26b8:	b538      	push	{r3, r4, r5, lr}
 80a26ba:	4604      	mov	r4, r0
 80a26bc:	460d      	mov	r5, r1
        }
#endif // Wiring_Wire3
    }
#endif // HAL_PLATFORM_FUELGAUGE_MAX17043

    return &Wire;
 80a26be:	f000 feed 	bl	80a349c <_Z19__fetch_global_Wirev>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 80a26c2:	462a      	mov	r2, r5
 80a26c4:	4601      	mov	r1, r0
 80a26c6:	4620      	mov	r0, r4
 80a26c8:	f7ff ffed 	bl	80a26a6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80a26cc:	4620      	mov	r0, r4
 80a26ce:	bd38      	pop	{r3, r4, r5, pc}

080a26d0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80a26d0:	6800      	ldr	r0, [r0, #0]
 80a26d2:	f000 b896 	b.w	80a2802 <_ZN7TwoWire6unlockEv>

080a26d6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80a26d6:	b510      	push	{r4, lr}
{
    if (lock_) {
 80a26d8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80a26da:	4604      	mov	r4, r0
{
    if (lock_) {
 80a26dc:	b10b      	cbz	r3, 80a26e2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80a26de:	f7ff fff7 	bl	80a26d0 <_ZN9FuelGauge6unlockEv>
    }
}
 80a26e2:	4620      	mov	r0, r4
 80a26e4:	bd10      	pop	{r4, pc}

080a26e6 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a26e6:	4770      	bx	lr

080a26e8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a26e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26ea:	4606      	mov	r6, r0
 80a26ec:	4615      	mov	r5, r2
 80a26ee:	460c      	mov	r4, r1
 80a26f0:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a26f2:	42bc      	cmp	r4, r7
 80a26f4:	d006      	beq.n	80a2704 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a26f6:	6833      	ldr	r3, [r6, #0]
 80a26f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a26fc:	689b      	ldr	r3, [r3, #8]
 80a26fe:	4630      	mov	r0, r6
 80a2700:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2702:	e7f6      	b.n	80a26f2 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2704:	4628      	mov	r0, r5
 80a2706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2708 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2708:	2200      	movs	r2, #0
 80a270a:	7c00      	ldrb	r0, [r0, #16]
 80a270c:	f7ff ba6c 	b.w	80a1be8 <HAL_I2C_Write_Data>

080a2710 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2710:	2100      	movs	r1, #0
 80a2712:	7c00      	ldrb	r0, [r0, #16]
 80a2714:	f7ff ba70 	b.w	80a1bf8 <HAL_I2C_Available_Data>

080a2718 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2718:	2100      	movs	r1, #0
 80a271a:	7c00      	ldrb	r0, [r0, #16]
 80a271c:	f7ff ba74 	b.w	80a1c08 <HAL_I2C_Read_Data>

080a2720 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2720:	2100      	movs	r1, #0
 80a2722:	7c00      	ldrb	r0, [r0, #16]
 80a2724:	f7ff ba78 	b.w	80a1c18 <HAL_I2C_Peek_Data>

080a2728 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2728:	2100      	movs	r1, #0
 80a272a:	7c00      	ldrb	r0, [r0, #16]
 80a272c:	f7ff ba7c 	b.w	80a1c28 <HAL_I2C_Flush_Data>

080a2730 <_ZN7TwoWireD0Ev>:
 80a2730:	b510      	push	{r4, lr}
 80a2732:	4604      	mov	r4, r0
 80a2734:	2114      	movs	r1, #20
 80a2736:	f000 ff14 	bl	80a3562 <_ZdlPvj>
 80a273a:	4620      	mov	r0, r4
 80a273c:	bd10      	pop	{r4, pc}
	...

080a2740 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2740:	b510      	push	{r4, lr}
 80a2742:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2744:	2300      	movs	r3, #0
 80a2746:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a274c:	60a3      	str	r3, [r4, #8]
 80a274e:	4b04      	ldr	r3, [pc, #16]	; (80a2760 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a2750:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2752:	4608      	mov	r0, r1
 80a2754:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a2756:	4611      	mov	r1, r2
 80a2758:	f7ff fa76 	bl	80a1c48 <HAL_I2C_Init>
}
 80a275c:	4620      	mov	r0, r4
 80a275e:	bd10      	pop	{r4, pc}
 80a2760:	080a7220 	.word	0x080a7220

080a2764 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2764:	2300      	movs	r3, #0
 80a2766:	461a      	mov	r2, r3
 80a2768:	4619      	mov	r1, r3
 80a276a:	7c00      	ldrb	r0, [r0, #16]
 80a276c:	f7ff ba24 	b.w	80a1bb8 <HAL_I2C_Begin>

080a2770 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a2770:	b570      	push	{r4, r5, r6, lr}
 80a2772:	460c      	mov	r4, r1
 80a2774:	4606      	mov	r6, r0
 80a2776:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80a2778:	2514      	movs	r5, #20
 80a277a:	462a      	mov	r2, r5
 80a277c:	2100      	movs	r1, #0
 80a277e:	a801      	add	r0, sp, #4
 80a2780:	f002 f9a9 	bl	80a4ad6 <memset>
 80a2784:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80a2786:	2200      	movs	r2, #0
 80a2788:	f88d 3008 	strb.w	r3, [sp, #8]
 80a278c:	6863      	ldr	r3, [r4, #4]
 80a278e:	a901      	add	r1, sp, #4
 80a2790:	9303      	str	r3, [sp, #12]
 80a2792:	68e3      	ldr	r3, [r4, #12]
 80a2794:	7c30      	ldrb	r0, [r6, #16]
 80a2796:	9304      	str	r3, [sp, #16]
 80a2798:	7a23      	ldrb	r3, [r4, #8]
 80a279a:	f8ad 5004 	strh.w	r5, [sp, #4]
 80a279e:	9305      	str	r3, [sp, #20]
 80a27a0:	f7ff fa70 	bl	80a1c84 <HAL_I2C_Request_Data_Ex>
}
 80a27a4:	b006      	add	sp, #24
 80a27a6:	bd70      	pop	{r4, r5, r6, pc}

080a27a8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80a27a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a27aa:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a27ac:	f88d 1000 	strb.w	r1, [sp]
 80a27b0:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a27b4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a27b6:	bf18      	it	ne
 80a27b8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a27ba:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80a27bc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a27be:	f88d 3008 	strb.w	r3, [sp, #8]
 80a27c2:	f7ff ffd5 	bl	80a2770 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a27c6:	b005      	add	sp, #20
 80a27c8:	f85d fb04 	ldr.w	pc, [sp], #4

080a27cc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80a27cc:	2301      	movs	r3, #1
 80a27ce:	f7ff bfeb 	b.w	80a27a8 <_ZN7TwoWire11requestFromEhjh>

080a27d2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a27d2:	2200      	movs	r2, #0
 80a27d4:	7c00      	ldrb	r0, [r0, #16]
 80a27d6:	f7ff b9f7 	b.w	80a1bc8 <HAL_I2C_Begin_Transmission>

080a27da <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a27da:	2200      	movs	r2, #0
 80a27dc:	7c00      	ldrb	r0, [r0, #16]
 80a27de:	f7ff b9fb 	b.w	80a1bd8 <HAL_I2C_End_Transmission>

080a27e2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a27e2:	2101      	movs	r1, #1
 80a27e4:	f7ff bff9 	b.w	80a27da <_ZN7TwoWire15endTransmissionEh>

080a27e8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a27e8:	2100      	movs	r1, #0
 80a27ea:	7c00      	ldrb	r0, [r0, #16]
 80a27ec:	f7ff ba24 	b.w	80a1c38 <HAL_I2C_Is_Enabled>

080a27f0 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80a27f0:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80a27f2:	2100      	movs	r1, #0
 80a27f4:	7c00      	ldrb	r0, [r0, #16]
 80a27f6:	f7ff fa31 	bl	80a1c5c <HAL_I2C_Acquire>
}
 80a27fa:	fab0 f080 	clz	r0, r0
 80a27fe:	0940      	lsrs	r0, r0, #5
 80a2800:	bd08      	pop	{r3, pc}

080a2802 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80a2802:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80a2804:	2100      	movs	r1, #0
 80a2806:	7c00      	ldrb	r0, [r0, #16]
 80a2808:	f7ff fa32 	bl	80a1c70 <HAL_I2C_Release>
}
 80a280c:	fab0 f080 	clz	r0, r0
 80a2810:	0940      	lsrs	r0, r0, #5
 80a2812:	bd08      	pop	{r3, pc}

080a2814 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2814:	4770      	bx	lr

080a2816 <_ZN9IPAddressD0Ev>:
 80a2816:	b510      	push	{r4, lr}
 80a2818:	4604      	mov	r4, r0
 80a281a:	2118      	movs	r1, #24
 80a281c:	f000 fea1 	bl	80a3562 <_ZdlPvj>
 80a2820:	4620      	mov	r0, r4
 80a2822:	bd10      	pop	{r4, pc}

080a2824 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2826:	460f      	mov	r7, r1
 80a2828:	f100 0608 	add.w	r6, r0, #8
 80a282c:	1d05      	adds	r5, r0, #4
 80a282e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2830:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2834:	220a      	movs	r2, #10
 80a2836:	4638      	mov	r0, r7
 80a2838:	f000 f901 	bl	80a2a3e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a283c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a283e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2840:	d007      	beq.n	80a2852 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2842:	2c00      	cmp	r4, #0
 80a2844:	d0f4      	beq.n	80a2830 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2846:	212e      	movs	r1, #46	; 0x2e
 80a2848:	4638      	mov	r0, r7
 80a284a:	f000 f8df 	bl	80a2a0c <_ZN5Print5printEc>
 80a284e:	4404      	add	r4, r0
 80a2850:	e7ee      	b.n	80a2830 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2852:	4620      	mov	r0, r4
 80a2854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2858 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2858:	b510      	push	{r4, lr}
 80a285a:	4604      	mov	r4, r0
 80a285c:	4b04      	ldr	r3, [pc, #16]	; (80a2870 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a285e:	2211      	movs	r2, #17
 80a2860:	f840 3b04 	str.w	r3, [r0], #4
 80a2864:	2100      	movs	r1, #0
 80a2866:	f002 f936 	bl	80a4ad6 <memset>
{
    clear();
}
 80a286a:	4620      	mov	r0, r4
 80a286c:	bd10      	pop	{r4, pc}
 80a286e:	bf00      	nop
 80a2870:	080a7248 	.word	0x080a7248

080a2874 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2874:	4603      	mov	r3, r0
 80a2876:	4a07      	ldr	r2, [pc, #28]	; (80a2894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2878:	b510      	push	{r4, lr}
 80a287a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a287e:	f101 0210 	add.w	r2, r1, #16
 80a2882:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2886:	4291      	cmp	r1, r2
 80a2888:	f843 4b04 	str.w	r4, [r3], #4
 80a288c:	d1f9      	bne.n	80a2882 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a288e:	780a      	ldrb	r2, [r1, #0]
 80a2890:	701a      	strb	r2, [r3, #0]
}
 80a2892:	bd10      	pop	{r4, pc}
 80a2894:	080a7248 	.word	0x080a7248

080a2898 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2898:	4a02      	ldr	r2, [pc, #8]	; (80a28a4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a289a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a289c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a289e:	2204      	movs	r2, #4
 80a28a0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a28a2:	4770      	bx	lr
 80a28a4:	080a7248 	.word	0x080a7248

080a28a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a28a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a28aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a28ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a28b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a28b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a28ba:	2304      	movs	r3, #4
 80a28bc:	6041      	str	r1, [r0, #4]
 80a28be:	7503      	strb	r3, [r0, #20]
 80a28c0:	bd10      	pop	{r4, pc}
	...

080a28c4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a28c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a28c6:	4d04      	ldr	r5, [pc, #16]	; (80a28d8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a28c8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a28ca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a28ce:	9500      	str	r5, [sp, #0]
 80a28d0:	f7ff ffea 	bl	80a28a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a28d4:	b003      	add	sp, #12
 80a28d6:	bd30      	pop	{r4, r5, pc}
 80a28d8:	080a7248 	.word	0x080a7248

080a28dc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a28dc:	6800      	ldr	r0, [r0, #0]
 80a28de:	f7ff b8fb 	b.w	80a1ad8 <os_mutex_recursive_lock>
	...

080a28e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a28e4:	4a01      	ldr	r2, [pc, #4]	; (80a28ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a28e6:	4b02      	ldr	r3, [pc, #8]	; (80a28f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a28e8:	601a      	str	r2, [r3, #0]
 80a28ea:	4770      	bx	lr
 80a28ec:	080a72ca 	.word	0x080a72ca
 80a28f0:	200003a4 	.word	0x200003a4

080a28f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a28f4:	2300      	movs	r3, #0
 80a28f6:	461a      	mov	r2, r3
 80a28f8:	6840      	ldr	r0, [r0, #4]
 80a28fa:	f7ff bb21 	b.w	80a1f40 <network_connect>

080a28fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a28fe:	2200      	movs	r2, #0
 80a2900:	2102      	movs	r1, #2
 80a2902:	6840      	ldr	r0, [r0, #4]
 80a2904:	f7ff bb2c 	b.w	80a1f60 <network_disconnect>

080a2908 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2908:	2200      	movs	r2, #0
 80a290a:	4611      	mov	r1, r2
 80a290c:	6840      	ldr	r0, [r0, #4]
 80a290e:	f7ff bb1f 	b.w	80a1f50 <network_connecting>

080a2912 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2912:	2200      	movs	r2, #0
 80a2914:	4611      	mov	r1, r2
 80a2916:	6840      	ldr	r0, [r0, #4]
 80a2918:	f7ff bb2a 	b.w	80a1f70 <network_ready>

080a291c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a291c:	2300      	movs	r3, #0
 80a291e:	461a      	mov	r2, r3
 80a2920:	4619      	mov	r1, r3
 80a2922:	6840      	ldr	r0, [r0, #4]
 80a2924:	f7ff bb2c 	b.w	80a1f80 <network_on>

080a2928 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2928:	2300      	movs	r3, #0
 80a292a:	461a      	mov	r2, r3
 80a292c:	4619      	mov	r1, r3
 80a292e:	6840      	ldr	r0, [r0, #4]
 80a2930:	f7ff bb2e 	b.w	80a1f90 <network_off>

080a2934 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2934:	2200      	movs	r2, #0
 80a2936:	f081 0101 	eor.w	r1, r1, #1
 80a293a:	6840      	ldr	r0, [r0, #4]
 80a293c:	f7ff bb30 	b.w	80a1fa0 <network_listen>

080a2940 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2940:	2200      	movs	r2, #0
 80a2942:	6840      	ldr	r0, [r0, #4]
 80a2944:	f7ff bb3c 	b.w	80a1fc0 <network_set_listen_timeout>

080a2948 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2948:	2200      	movs	r2, #0
 80a294a:	4611      	mov	r1, r2
 80a294c:	6840      	ldr	r0, [r0, #4]
 80a294e:	f7ff bb3f 	b.w	80a1fd0 <network_get_listen_timeout>

080a2952 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2952:	2200      	movs	r2, #0
 80a2954:	4611      	mov	r1, r2
 80a2956:	6840      	ldr	r0, [r0, #4]
 80a2958:	f7ff bb2a 	b.w	80a1fb0 <network_listening>

080a295c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a295c:	b570      	push	{r4, r5, r6, lr}
 80a295e:	4616      	mov	r6, r2
 80a2960:	b08e      	sub	sp, #56	; 0x38
 80a2962:	4604      	mov	r4, r0
    IPAddress addr;
 80a2964:	a808      	add	r0, sp, #32
 80a2966:	f7ff ff77 	bl	80a2858 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a296a:	2211      	movs	r2, #17
 80a296c:	2100      	movs	r1, #0
 80a296e:	a803      	add	r0, sp, #12
 80a2970:	f002 f8b1 	bl	80a4ad6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2974:	4630      	mov	r0, r6
 80a2976:	f002 f90c 	bl	80a4b92 <strlen>
 80a297a:	2500      	movs	r5, #0
 80a297c:	4b0a      	ldr	r3, [pc, #40]	; (80a29a8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a297e:	9500      	str	r5, [sp, #0]
 80a2980:	b281      	uxth	r1, r0
 80a2982:	685b      	ldr	r3, [r3, #4]
 80a2984:	aa03      	add	r2, sp, #12
 80a2986:	4630      	mov	r0, r6
 80a2988:	f7ff fa36 	bl	80a1df8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a298c:	b120      	cbz	r0, 80a2998 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a298e:	4629      	mov	r1, r5
 80a2990:	4620      	mov	r0, r4
 80a2992:	f7ff ff81 	bl	80a2898 <_ZN9IPAddressC1Em>
 80a2996:	e003      	b.n	80a29a0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2998:	a903      	add	r1, sp, #12
 80a299a:	4620      	mov	r0, r4
 80a299c:	f7ff ff6a 	bl	80a2874 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a29a0:	4620      	mov	r0, r4
 80a29a2:	b00e      	add	sp, #56	; 0x38
 80a29a4:	bd70      	pop	{r4, r5, r6, pc}
 80a29a6:	bf00      	nop
 80a29a8:	2000085c 	.word	0x2000085c

080a29ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a29ac:	4b02      	ldr	r3, [pc, #8]	; (80a29b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a29ae:	4a03      	ldr	r2, [pc, #12]	; (80a29bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a29b0:	601a      	str	r2, [r3, #0]
 80a29b2:	2200      	movs	r2, #0
 80a29b4:	605a      	str	r2, [r3, #4]
 80a29b6:	4770      	bx	lr
 80a29b8:	200003a8 	.word	0x200003a8
 80a29bc:	080a7340 	.word	0x080a7340

080a29c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a29c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29c2:	4606      	mov	r6, r0
 80a29c4:	460d      	mov	r5, r1
 80a29c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a29c8:	2400      	movs	r4, #0
  while (size--) {
 80a29ca:	42bd      	cmp	r5, r7
 80a29cc:	d00c      	beq.n	80a29e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a29ce:	6833      	ldr	r3, [r6, #0]
 80a29d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a29d4:	689b      	ldr	r3, [r3, #8]
 80a29d6:	4630      	mov	r0, r6
 80a29d8:	4798      	blx	r3
     if (chunk>=0)
 80a29da:	2800      	cmp	r0, #0
 80a29dc:	db01      	blt.n	80a29e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a29de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a29e0:	e7f3      	b.n	80a29ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a29e2:	2c00      	cmp	r4, #0
 80a29e4:	bf08      	it	eq
 80a29e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a29e8:	4620      	mov	r0, r4
 80a29ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a29ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a29ec:	b570      	push	{r4, r5, r6, lr}
 80a29ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a29f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a29f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a29f4:	b149      	cbz	r1, 80a2a0a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a29f6:	f002 f8cc 	bl	80a4b92 <strlen>
 80a29fa:	682b      	ldr	r3, [r5, #0]
 80a29fc:	4602      	mov	r2, r0
 80a29fe:	4621      	mov	r1, r4
 80a2a00:	4628      	mov	r0, r5
    }
 80a2a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2a06:	68db      	ldr	r3, [r3, #12]
 80a2a08:	4718      	bx	r3
    }
 80a2a0a:	bd70      	pop	{r4, r5, r6, pc}

080a2a0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2a0c:	6803      	ldr	r3, [r0, #0]
 80a2a0e:	689b      	ldr	r3, [r3, #8]
 80a2a10:	4718      	bx	r3

080a2a12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2a12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2a14:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2a16:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2a18:	f7ff fff8 	bl	80a2a0c <_ZN5Print5printEc>
  n += print('\n');
 80a2a1c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2a1e:	4604      	mov	r4, r0
  n += print('\n');
 80a2a20:	4628      	mov	r0, r5
 80a2a22:	f7ff fff3 	bl	80a2a0c <_ZN5Print5printEc>
  return n;
}
 80a2a26:	4420      	add	r0, r4
 80a2a28:	bd38      	pop	{r3, r4, r5, pc}

080a2a2a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2a2a:	b538      	push	{r3, r4, r5, lr}
 80a2a2c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2a2e:	f7ff ffdd 	bl	80a29ec <_ZN5Print5writeEPKc>
 80a2a32:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2a34:	4628      	mov	r0, r5
 80a2a36:	f7ff ffec 	bl	80a2a12 <_ZN5Print7printlnEv>
  return n;
}
 80a2a3a:	4420      	add	r0, r4
 80a2a3c:	bd38      	pop	{r3, r4, r5, pc}

080a2a3e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2a3e:	2a01      	cmp	r2, #1
 80a2a40:	bf98      	it	ls
 80a2a42:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2a44:	b530      	push	{r4, r5, lr}
 80a2a46:	460b      	mov	r3, r1
 80a2a48:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2a4a:	2100      	movs	r1, #0
 80a2a4c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2a50:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2a54:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2a58:	fb05 3312 	mls	r3, r5, r2, r3
 80a2a5c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2a5e:	2b09      	cmp	r3, #9
 80a2a60:	bf94      	ite	ls
 80a2a62:	3330      	addls	r3, #48	; 0x30
 80a2a64:	3337      	addhi	r3, #55	; 0x37
 80a2a66:	b2db      	uxtb	r3, r3
 80a2a68:	4621      	mov	r1, r4
 80a2a6a:	f804 3901 	strb.w	r3, [r4], #-1
 80a2a6e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2a70:	2d00      	cmp	r5, #0
 80a2a72:	d1ef      	bne.n	80a2a54 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2a74:	f7ff ffba 	bl	80a29ec <_ZN5Print5writeEPKc>
}
 80a2a78:	b00b      	add	sp, #44	; 0x2c
 80a2a7a:	bd30      	pop	{r4, r5, pc}

080a2a7c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2a7c:	b510      	push	{r4, lr}
 80a2a7e:	4604      	mov	r4, r0
 80a2a80:	f7ff fb0c 	bl	80a209c <_ZNSt14_Function_baseD1Ev>
 80a2a84:	4620      	mov	r0, r4
 80a2a86:	bd10      	pop	{r4, pc}

080a2a88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2a88:	4803      	ldr	r0, [pc, #12]	; (80a2a98 <_GLOBAL__sub_I_RGB+0x10>)
 80a2a8a:	2300      	movs	r3, #0
 80a2a8c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2a8e:	4a03      	ldr	r2, [pc, #12]	; (80a2a9c <_GLOBAL__sub_I_RGB+0x14>)
 80a2a90:	4903      	ldr	r1, [pc, #12]	; (80a2aa0 <_GLOBAL__sub_I_RGB+0x18>)
 80a2a92:	f000 bd61 	b.w	80a3558 <__aeabi_atexit>
 80a2a96:	bf00      	nop
 80a2a98:	200003b0 	.word	0x200003b0
 80a2a9c:	20000258 	.word	0x20000258
 80a2aa0:	080a2a7d 	.word	0x080a2a7d

080a2aa4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2aa4:	b510      	push	{r4, lr}
 80a2aa6:	4b04      	ldr	r3, [pc, #16]	; (80a2ab8 <_ZN8SPIClassD1Ev+0x14>)
 80a2aa8:	4604      	mov	r4, r0
 80a2aaa:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2aac:	68c0      	ldr	r0, [r0, #12]
 80a2aae:	b108      	cbz	r0, 80a2ab4 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a2ab0:	f7ff f80a 	bl	80a1ac8 <os_mutex_recursive_destroy>
 80a2ab4:	4620      	mov	r0, r4
 80a2ab6:	bd10      	pop	{r4, pc}
 80a2ab8:	080a7374 	.word	0x080a7374

080a2abc <_ZN8SPIClassD0Ev>:
 80a2abc:	b510      	push	{r4, lr}
 80a2abe:	4604      	mov	r4, r0
 80a2ac0:	f7ff fff0 	bl	80a2aa4 <_ZN8SPIClassD1Ev>
 80a2ac4:	4620      	mov	r0, r4
 80a2ac6:	2110      	movs	r1, #16
 80a2ac8:	f000 fd4b 	bl	80a3562 <_ZdlPvj>
 80a2acc:	4620      	mov	r0, r4
 80a2ace:	bd10      	pop	{r4, pc}

080a2ad0 <_ZN14RecursiveMutex6unlockEv>:
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2ad0:	6800      	ldr	r0, [r0, #0]
 80a2ad2:	f7ff b809 	b.w	80a1ae8 <os_mutex_recursive_unlock>
	...

080a2ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2ad8:	b570      	push	{r4, r5, r6, lr}
 80a2ada:	4604      	mov	r4, r0
 80a2adc:	460e      	mov	r6, r1
 80a2ade:	4b07      	ldr	r3, [pc, #28]	; (80a2afc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2ae0:	2500      	movs	r5, #0
 80a2ae2:	6003      	str	r3, [r0, #0]
 80a2ae4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a2ae8:	f7fe ffe6 	bl	80a1ab8 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a2aec:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a2aee:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a2af0:	f7ff f8fa 	bl	80a1ce8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2af4:	60a5      	str	r5, [r4, #8]
}
 80a2af6:	4620      	mov	r0, r4
 80a2af8:	bd70      	pop	{r4, r5, r6, pc}
 80a2afa:	bf00      	nop
 80a2afc:	080a7374 	.word	0x080a7374

080a2b00 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a2b00:	b538      	push	{r3, r4, r5, lr}
 80a2b02:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2b04:	f100 040c 	add.w	r4, r0, #12
 80a2b08:	4620      	mov	r0, r4
 80a2b0a:	f7ff fee7 	bl	80a28dc <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2b0e:	7928      	ldrb	r0, [r5, #4]
 80a2b10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2b14:	f7ff f8c0 	bl	80a1c98 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2b18:	4620      	mov	r0, r4
 80a2b1a:	f7ff ffd9 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
 80a2b1e:	bd38      	pop	{r3, r4, r5, pc}

080a2b20 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a2b20:	b570      	push	{r4, r5, r6, lr}
 80a2b22:	4605      	mov	r5, r0
 80a2b24:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2b26:	f100 040c 	add.w	r4, r0, #12
 80a2b2a:	4620      	mov	r0, r4
 80a2b2c:	f7ff fed6 	bl	80a28dc <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a2b30:	7928      	ldrb	r0, [r5, #4]
 80a2b32:	4631      	mov	r1, r6
 80a2b34:	f7ff f8b8 	bl	80a1ca8 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2b38:	4620      	mov	r0, r4
 80a2b3a:	f7ff ffc9 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
 80a2b3e:	bd70      	pop	{r4, r5, r6, pc}

080a2b40 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80a2b40:	b570      	push	{r4, r5, r6, lr}
 80a2b42:	4605      	mov	r5, r0
 80a2b44:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2b46:	f100 040c 	add.w	r4, r0, #12
 80a2b4a:	4620      	mov	r0, r4
 80a2b4c:	f7ff fec6 	bl	80a28dc <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 80a2b50:	7928      	ldrb	r0, [r5, #4]
 80a2b52:	4631      	mov	r1, r6
 80a2b54:	f7ff f8b0 	bl	80a1cb8 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2b58:	4620      	mov	r0, r4
 80a2b5a:	f7ff ffb9 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
 80a2b5e:	bd70      	pop	{r4, r5, r6, pc}

080a2b60 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a2b60:	b508      	push	{r3, lr}
 80a2b62:	300c      	adds	r0, #12
 80a2b64:	f7ff ffb4 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
 80a2b68:	bd08      	pop	{r3, pc}
	...

080a2b6c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a2b6c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a2b6e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a2b70:	6018      	str	r0, [r3, #0]
 80a2b72:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a2b74:	6818      	ldr	r0, [r3, #0]
 80a2b76:	b2e5      	uxtb	r5, r4
 80a2b78:	4288      	cmp	r0, r1
 80a2b7a:	d906      	bls.n	80a2b8a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2b7c:	3401      	adds	r4, #1
 80a2b7e:	2c08      	cmp	r4, #8
 80a2b80:	d002      	beq.n	80a2b88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a2b82:	0840      	lsrs	r0, r0, #1
 80a2b84:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a2b86:	e7f5      	b.n	80a2b74 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2b88:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2b8a:	4b02      	ldr	r3, [pc, #8]	; (80a2b94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2b8c:	5d5b      	ldrb	r3, [r3, r5]
 80a2b8e:	7013      	strb	r3, [r2, #0]
 80a2b90:	bd30      	pop	{r4, r5, pc}
 80a2b92:	bf00      	nop
 80a2b94:	080a737c 	.word	0x080a737c

080a2b98 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b9c:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2b9e:	f100 060c 	add.w	r6, r0, #12
 80a2ba2:	b088      	sub	sp, #32
    unsigned clock = 0;
 80a2ba4:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a2ba6:	fb02 f701 	mul.w	r7, r2, r1
 80a2baa:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 80a2bac:	9402      	str	r4, [sp, #8]
 80a2bae:	f7ff fe95 	bl	80a28dc <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a2bb2:	f895 8004 	ldrb.w	r8, [r5, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2bb6:	4621      	mov	r1, r4
 80a2bb8:	2214      	movs	r2, #20
 80a2bba:	a803      	add	r0, sp, #12
 80a2bbc:	f001 ff8b 	bl	80a4ad6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2bc0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a2bc2:	4622      	mov	r2, r4
 80a2bc4:	a903      	add	r1, sp, #12
 80a2bc6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2bc8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 80a2bcc:	f7ff f89c 	bl	80a1d08 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a2bd0:	ab02      	add	r3, sp, #8
 80a2bd2:	f10d 0207 	add.w	r2, sp, #7
 80a2bd6:	4639      	mov	r1, r7
 80a2bd8:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 80a2bda:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a2bde:	f7ff ffc5 	bl	80a2b6c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 80a2be2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2be6:	7928      	ldrb	r0, [r5, #4]
 80a2be8:	f7ff f86e 	bl	80a1cc8 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2bec:	4630      	mov	r0, r6
 80a2bee:	f7ff ff6f 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 80a2bf2:	9802      	ldr	r0, [sp, #8]
 80a2bf4:	b008      	add	sp, #32
 80a2bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a2bfc <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2bfc:	b570      	push	{r4, r5, r6, lr}
 80a2bfe:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2c00:	f100 050c 	add.w	r5, r0, #12
 80a2c04:	4628      	mov	r0, r5
 80a2c06:	460e      	mov	r6, r1
 80a2c08:	f7ff fe68 	bl	80a28dc <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        if (_dividerReference)
 80a2c0c:	68a1      	ldr	r1, [r4, #8]
 80a2c0e:	b179      	cbz	r1, 80a2c30 <_ZN8SPIClass15setClockDividerEh+0x34>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
 80a2c10:	4a0b      	ldr	r2, [pc, #44]	; (80a2c40 <_ZN8SPIClass15setClockDividerEh+0x44>)
 80a2c12:	2300      	movs	r3, #0
 80a2c14:	5c98      	ldrb	r0, [r3, r2]
 80a2c16:	42b0      	cmp	r0, r6
 80a2c18:	d002      	beq.n	80a2c20 <_ZN8SPIClass15setClockDividerEh+0x24>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
 80a2c1a:	3301      	adds	r3, #1
 80a2c1c:	2b08      	cmp	r3, #8
 80a2c1e:	d1f9      	bne.n	80a2c14 <_ZN8SPIClass15setClockDividerEh+0x18>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
 80a2c20:	3301      	adds	r3, #1
 80a2c22:	b2db      	uxtb	r3, r3
 80a2c24:	2201      	movs	r2, #1
 80a2c26:	40d9      	lsrs	r1, r3
 80a2c28:	4620      	mov	r0, r4
 80a2c2a:	f7ff ffb5 	bl	80a2b98 <_ZN8SPIClass13setClockSpeedEjj>
 80a2c2e:	e003      	b.n	80a2c38 <_ZN8SPIClass15setClockDividerEh+0x3c>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2c30:	4631      	mov	r1, r6
 80a2c32:	7920      	ldrb	r0, [r4, #4]
 80a2c34:	f7ff f848 	bl	80a1cc8 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2c38:	4628      	mov	r0, r5
 80a2c3a:	f7ff ff49 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
 80a2c3e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c40:	080a737c 	.word	0x080a737c

080a2c44 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2c44:	b570      	push	{r4, r5, r6, lr}
 80a2c46:	4605      	mov	r5, r0
 80a2c48:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2c4a:	f100 040c 	add.w	r4, r0, #12
 80a2c4e:	4620      	mov	r0, r4
 80a2c50:	f7ff fe44 	bl	80a28dc <_ZN14RecursiveMutex4lockEv>
    uint16_t result = 0;
    if (!lock())
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2c54:	4631      	mov	r1, r6
 80a2c56:	7928      	ldrb	r0, [r5, #4]
 80a2c58:	f7ff f83e 	bl	80a1cd8 <HAL_SPI_Send_Receive_Data>
 80a2c5c:	4605      	mov	r5, r0
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2c5e:	4620      	mov	r0, r4
 80a2c60:	f7ff ff36 	bl	80a2ad0 <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }
    return static_cast<byte>(result);
}
 80a2c64:	b2e8      	uxtb	r0, r5
 80a2c66:	bd70      	pop	{r4, r5, r6, pc}

080a2c68 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a2c68:	7900      	ldrb	r0, [r0, #4]
 80a2c6a:	f7ff b845 	b.w	80a1cf8 <HAL_SPI_Is_Enabled>

080a2c6e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2c6e:	b510      	push	{r4, lr}
 80a2c70:	4604      	mov	r4, r0
{
	free(buffer);
 80a2c72:	6800      	ldr	r0, [r0, #0]
 80a2c74:	f7ff f9bc 	bl	80a1ff0 <free>
}
 80a2c78:	4620      	mov	r0, r4
 80a2c7a:	bd10      	pop	{r4, pc}

080a2c7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2c7c:	b510      	push	{r4, lr}
 80a2c7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2c80:	6800      	ldr	r0, [r0, #0]
 80a2c82:	b108      	cbz	r0, 80a2c88 <_ZN6String10invalidateEv+0xc>
 80a2c84:	f7ff f9b4 	bl	80a1ff0 <free>
	buffer = NULL;
 80a2c88:	2300      	movs	r3, #0
 80a2c8a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2c8c:	60a3      	str	r3, [r4, #8]
 80a2c8e:	6063      	str	r3, [r4, #4]
 80a2c90:	bd10      	pop	{r4, pc}

080a2c92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2c92:	b538      	push	{r3, r4, r5, lr}
 80a2c94:	4604      	mov	r4, r0
 80a2c96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2c98:	6800      	ldr	r0, [r0, #0]
 80a2c9a:	3101      	adds	r1, #1
 80a2c9c:	f7ff f9b0 	bl	80a2000 <realloc>
	if (newbuffer) {
 80a2ca0:	b110      	cbz	r0, 80a2ca8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2ca2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2ca6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2ca8:	bd38      	pop	{r3, r4, r5, pc}

080a2caa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2caa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2cac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2cae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2cb0:	b113      	cbz	r3, 80a2cb8 <_ZN6String7reserveEj+0xe>
 80a2cb2:	6843      	ldr	r3, [r0, #4]
 80a2cb4:	428b      	cmp	r3, r1
 80a2cb6:	d207      	bcs.n	80a2cc8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2cb8:	4620      	mov	r0, r4
 80a2cba:	f7ff ffea 	bl	80a2c92 <_ZN6String12changeBufferEj>
 80a2cbe:	b120      	cbz	r0, 80a2cca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2cc0:	68a3      	ldr	r3, [r4, #8]
 80a2cc2:	b90b      	cbnz	r3, 80a2cc8 <_ZN6String7reserveEj+0x1e>
 80a2cc4:	6822      	ldr	r2, [r4, #0]
 80a2cc6:	7013      	strb	r3, [r2, #0]
 80a2cc8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2cca:	bd10      	pop	{r4, pc}

080a2ccc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2ccc:	b570      	push	{r4, r5, r6, lr}
 80a2cce:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2cd0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2cd2:	4604      	mov	r4, r0
 80a2cd4:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2cd6:	f7ff ffe8 	bl	80a2caa <_ZN6String7reserveEj>
 80a2cda:	b918      	cbnz	r0, 80a2ce4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2cdc:	4620      	mov	r0, r4
 80a2cde:	f7ff ffcd 	bl	80a2c7c <_ZN6String10invalidateEv>
		return *this;
 80a2ce2:	e009      	b.n	80a2cf8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2ce4:	462a      	mov	r2, r5
 80a2ce6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2ce8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2cea:	6820      	ldr	r0, [r4, #0]
 80a2cec:	f001 fee8 	bl	80a4ac0 <memcpy>
	buffer[len] = 0;
 80a2cf0:	6822      	ldr	r2, [r4, #0]
 80a2cf2:	68a3      	ldr	r3, [r4, #8]
 80a2cf4:	2100      	movs	r1, #0
 80a2cf6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2cf8:	4620      	mov	r0, r4
 80a2cfa:	bd70      	pop	{r4, r5, r6, pc}

080a2cfc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2cfc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2cfe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2d00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2d02:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2d04:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2d06:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2d08:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2d0a:	460d      	mov	r5, r1
 80a2d0c:	b139      	cbz	r1, 80a2d1e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2d0e:	4608      	mov	r0, r1
 80a2d10:	f001 ff3f 	bl	80a4b92 <strlen>
 80a2d14:	4629      	mov	r1, r5
 80a2d16:	4602      	mov	r2, r0
 80a2d18:	4620      	mov	r0, r4
 80a2d1a:	f7ff ffd7 	bl	80a2ccc <_ZN6String4copyEPKcj>
}
 80a2d1e:	4620      	mov	r0, r4
 80a2d20:	bd38      	pop	{r3, r4, r5, pc}

080a2d22 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2d22:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2d24:	b510      	push	{r4, lr}
 80a2d26:	460b      	mov	r3, r1
 80a2d28:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2d2a:	d007      	beq.n	80a2d3c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2d2c:	6809      	ldr	r1, [r1, #0]
 80a2d2e:	b119      	cbz	r1, 80a2d38 <_ZN6StringaSERKS_+0x16>
 80a2d30:	689a      	ldr	r2, [r3, #8]
 80a2d32:	f7ff ffcb 	bl	80a2ccc <_ZN6String4copyEPKcj>
 80a2d36:	e001      	b.n	80a2d3c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2d38:	f7ff ffa0 	bl	80a2c7c <_ZN6String10invalidateEv>

	return *this;
}
 80a2d3c:	4620      	mov	r0, r4
 80a2d3e:	bd10      	pop	{r4, pc}

080a2d40 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a2d40:	b510      	push	{r4, lr}
 80a2d42:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2d44:	2300      	movs	r3, #0
 80a2d46:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2d48:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2d4a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2d4c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a2d4e:	f7ff ffe8 	bl	80a2d22 <_ZN6StringaSERKS_>
}
 80a2d52:	4620      	mov	r0, r4
 80a2d54:	bd10      	pop	{r4, pc}

080a2d56 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2d56:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2d58:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2d5a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2d5c:	b912      	cbnz	r2, 80a2d64 <_ZNK6String6equalsEPKc+0xe>
 80a2d5e:	b919      	cbnz	r1, 80a2d68 <_ZNK6String6equalsEPKc+0x12>
 80a2d60:	2001      	movs	r0, #1
 80a2d62:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2d64:	b911      	cbnz	r1, 80a2d6c <_ZNK6String6equalsEPKc+0x16>
 80a2d66:	6803      	ldr	r3, [r0, #0]
 80a2d68:	7818      	ldrb	r0, [r3, #0]
 80a2d6a:	e002      	b.n	80a2d72 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a2d6c:	6800      	ldr	r0, [r0, #0]
 80a2d6e:	f001 fee3 	bl	80a4b38 <strcmp>
 80a2d72:	fab0 f080 	clz	r0, r0
 80a2d76:	0940      	lsrs	r0, r0, #5
}
 80a2d78:	bd08      	pop	{r3, pc}

080a2d7a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a2d7a:	b570      	push	{r4, r5, r6, lr}
 80a2d7c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a2d7e:	b19a      	cbz	r2, 80a2da8 <_ZNK6String8getBytesEPhjj+0x2e>
 80a2d80:	b191      	cbz	r1, 80a2da8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80a2d82:	6885      	ldr	r5, [r0, #8]
 80a2d84:	429d      	cmp	r5, r3
 80a2d86:	d802      	bhi.n	80a2d8e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a2d88:	2300      	movs	r3, #0
 80a2d8a:	700b      	strb	r3, [r1, #0]
		return;
 80a2d8c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80a2d8e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80a2d90:	1aed      	subs	r5, r5, r3
 80a2d92:	42ac      	cmp	r4, r5
 80a2d94:	bf28      	it	cs
 80a2d96:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80a2d98:	6801      	ldr	r1, [r0, #0]
 80a2d9a:	4622      	mov	r2, r4
 80a2d9c:	4419      	add	r1, r3
 80a2d9e:	4630      	mov	r0, r6
 80a2da0:	f001 ff14 	bl	80a4bcc <strncpy>
	buf[n] = 0;
 80a2da4:	2300      	movs	r3, #0
 80a2da6:	5533      	strb	r3, [r6, r4]
 80a2da8:	bd70      	pop	{r4, r5, r6, pc}

080a2daa <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
 80a2daa:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a2dac:	6800      	ldr	r0, [r0, #0]
 80a2dae:	b120      	cbz	r0, 80a2dba <_ZNK6String7toFloatEv+0x10>
 80a2db0:	f001 fd74 	bl	80a489c <atof>
 80a2db4:	f001 f9d6 	bl	80a4164 <__aeabi_d2f>
 80a2db8:	bd08      	pop	{r3, pc}
	return 0;
 80a2dba:	2000      	movs	r0, #0
}
 80a2dbc:	bd08      	pop	{r3, pc}

080a2dbe <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a2dbe:	4601      	mov	r1, r0
 80a2dc0:	2200      	movs	r2, #0
 80a2dc2:	208c      	movs	r0, #140	; 0x8c
 80a2dc4:	f7fe bea0 	b.w	80a1b08 <HAL_Core_System_Reset_Ex>

080a2dc8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a2dc8:	2000      	movs	r0, #0
 80a2dca:	f7ff bff8 	b.w	80a2dbe <_ZN11SystemClass5resetEm>
	...

080a2dd0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2dd4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2dd6:	4c08      	ldr	r4, [pc, #32]	; (80a2df8 <_GLOBAL__sub_I_System+0x28>)
 80a2dd8:	2000      	movs	r0, #0
 80a2dda:	6020      	str	r0, [r4, #0]
 80a2ddc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2dde:	71a0      	strb	r0, [r4, #6]
 80a2de0:	8120      	strh	r0, [r4, #8]
 80a2de2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2de4:	f7ff f818 	bl	80a1e18 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2de8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2dee:	4a03      	ldr	r2, [pc, #12]	; (80a2dfc <_GLOBAL__sub_I_System+0x2c>)
 80a2df0:	4903      	ldr	r1, [pc, #12]	; (80a2e00 <_GLOBAL__sub_I_System+0x30>)
 80a2df2:	f000 bbb1 	b.w	80a3558 <__aeabi_atexit>
 80a2df6:	bf00      	nop
 80a2df8:	200003c0 	.word	0x200003c0
 80a2dfc:	20000258 	.word	0x20000258
 80a2e00:	080a0b7d 	.word	0x080a0b7d

080a2e04 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a2e06:	4b14      	ldr	r3, [pc, #80]	; (80a2e58 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2e08:	4f14      	ldr	r7, [pc, #80]	; (80a2e5c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2e0a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a2e0c:	4b14      	ldr	r3, [pc, #80]	; (80a2e60 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2e0e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a2e10:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a2e12:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a2e14:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a2e16:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2e18:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2e1a:	d01b      	beq.n	80a2e54 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a2e1c:	a80a      	add	r0, sp, #40	; 0x28
 80a2e1e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a2e22:	f001 fd51 	bl	80a48c8 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2e26:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2e28:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a2e2a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2e2c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a2e30:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a2e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2e3a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2e3e:	4c09      	ldr	r4, [pc, #36]	; (80a2e64 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2e40:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2e44:	ad01      	add	r5, sp, #4
 80a2e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2e4e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2e50:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a2e54:	b00b      	add	sp, #44	; 0x2c
 80a2e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2e58:	200003fc 	.word	0x200003fc
 80a2e5c:	200003f8 	.word	0x200003f8
 80a2e60:	200003f4 	.word	0x200003f4
 80a2e64:	200003cc 	.word	0x200003cc

080a2e68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2e68:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2e6a:	2000      	movs	r0, #0
 80a2e6c:	f7ff f858 	bl	80a1f20 <spark_sync_time_pending>
 80a2e70:	b128      	cbz	r0, 80a2e7e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2e72:	f7ff f835 	bl	80a1ee0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2e76:	f080 0001 	eor.w	r0, r0, #1
 80a2e7a:	b2c0      	uxtb	r0, r0
 80a2e7c:	bd08      	pop	{r3, pc}
 80a2e7e:	2001      	movs	r0, #1
    }
 80a2e80:	bd08      	pop	{r3, pc}

080a2e82 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2e82:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2e84:	2000      	movs	r0, #0
 80a2e86:	f7fe fe5f 	bl	80a1b48 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2e8a:	4604      	mov	r4, r0
 80a2e8c:	b968      	cbnz	r0, 80a2eaa <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2e8e:	f7fe ffbb 	bl	80a1e08 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2e92:	2801      	cmp	r0, #1
 80a2e94:	d10b      	bne.n	80a2eae <_ZN9TimeClass7isValidEv+0x2c>
 80a2e96:	4620      	mov	r0, r4
 80a2e98:	f7fe ffe6 	bl	80a1e68 <system_thread_get_state>
 80a2e9c:	b938      	cbnz	r0, 80a2eae <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2e9e:	f7ff ffe3 	bl	80a2e68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2ea2:	b930      	cbnz	r0, 80a2eb2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2ea4:	f7ff f80c 	bl	80a1ec0 <spark_process>
 80a2ea8:	e7f9      	b.n	80a2e9e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2eaa:	2001      	movs	r0, #1
 80a2eac:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2eae:	2000      	movs	r0, #0
 80a2eb0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2eb2:	f7ff ffd9 	bl	80a2e68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2eb6:	2000      	movs	r0, #0
 80a2eb8:	f7fe fe46 	bl	80a1b48 <HAL_RTC_Time_Is_Valid>
 80a2ebc:	3000      	adds	r0, #0
 80a2ebe:	bf18      	it	ne
 80a2ec0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2ec2:	bd10      	pop	{r4, pc}

080a2ec4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2ec4:	b508      	push	{r3, lr}
    (void)isValid();
 80a2ec6:	f7ff ffdc 	bl	80a2e82 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2ece:	f7fe be33 	b.w	80a1b38 <HAL_RTC_Get_UnixTime>
	...

080a2ed4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a2ed4:	b508      	push	{r3, lr}
	return hour(now());
 80a2ed6:	f7ff fff5 	bl	80a2ec4 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2eda:	f7ff ff93 	bl	80a2e04 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a2ede:	4b01      	ldr	r3, [pc, #4]	; (80a2ee4 <_ZN9TimeClass4hourEv+0x10>)
 80a2ee0:	6898      	ldr	r0, [r3, #8]
 80a2ee2:	bd08      	pop	{r3, pc}
 80a2ee4:	200003cc 	.word	0x200003cc

080a2ee8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a2ee8:	b508      	push	{r3, lr}
	return minute(now());
 80a2eea:	f7ff ffeb 	bl	80a2ec4 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2eee:	f7ff ff89 	bl	80a2e04 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a2ef2:	4b01      	ldr	r3, [pc, #4]	; (80a2ef8 <_ZN9TimeClass6minuteEv+0x10>)
 80a2ef4:	6858      	ldr	r0, [r3, #4]
 80a2ef6:	bd08      	pop	{r3, pc}
 80a2ef8:	200003cc 	.word	0x200003cc

080a2efc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2efc:	4b02      	ldr	r3, [pc, #8]	; (80a2f08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2efe:	681a      	ldr	r2, [r3, #0]
 80a2f00:	4b02      	ldr	r3, [pc, #8]	; (80a2f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2f02:	601a      	str	r2, [r3, #0]
 80a2f04:	4770      	bx	lr
 80a2f06:	bf00      	nop
 80a2f08:	20000168 	.word	0x20000168
 80a2f0c:	200003f0 	.word	0x200003f0

080a2f10 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2f10:	4770      	bx	lr

080a2f12 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2f12:	7441      	strb	r1, [r0, #17]
 80a2f14:	4770      	bx	lr

080a2f16 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2f16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2f18:	7c00      	ldrb	r0, [r0, #16]
 80a2f1a:	f7fe ff35 	bl	80a1d88 <HAL_USART_Available_Data_For_Write>
}
 80a2f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f22:	bd08      	pop	{r3, pc}

080a2f24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2f24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2f26:	7c00      	ldrb	r0, [r0, #16]
 80a2f28:	f7fe ff06 	bl	80a1d38 <HAL_USART_Available_Data>
}
 80a2f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f30:	bd08      	pop	{r3, pc}

080a2f32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2f32:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2f34:	7c00      	ldrb	r0, [r0, #16]
 80a2f36:	f7fe ff0f 	bl	80a1d58 <HAL_USART_Peek_Data>
}
 80a2f3a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f3e:	bf28      	it	cs
 80a2f40:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2f44:	bd08      	pop	{r3, pc}

080a2f46 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2f46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2f48:	7c00      	ldrb	r0, [r0, #16]
 80a2f4a:	f7fe fefd 	bl	80a1d48 <HAL_USART_Read_Data>
}
 80a2f4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f52:	bf28      	it	cs
 80a2f54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2f58:	bd08      	pop	{r3, pc}

080a2f5a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2f5a:	7c00      	ldrb	r0, [r0, #16]
 80a2f5c:	f7fe bf04 	b.w	80a1d68 <HAL_USART_Flush_Data>

080a2f60 <_ZN11USARTSerialD0Ev>:
 80a2f60:	b510      	push	{r4, lr}
 80a2f62:	4604      	mov	r4, r0
 80a2f64:	2114      	movs	r1, #20
 80a2f66:	f000 fafc 	bl	80a3562 <_ZdlPvj>
 80a2f6a:	4620      	mov	r0, r4
 80a2f6c:	bd10      	pop	{r4, pc}

080a2f6e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2f6e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2f70:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2f72:	4604      	mov	r4, r0
 80a2f74:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2f76:	b925      	cbnz	r5, 80a2f82 <_ZN11USARTSerial5writeEh+0x14>
 80a2f78:	7c00      	ldrb	r0, [r0, #16]
 80a2f7a:	f7fe ff05 	bl	80a1d88 <HAL_USART_Available_Data_For_Write>
 80a2f7e:	2800      	cmp	r0, #0
 80a2f80:	dd05      	ble.n	80a2f8e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2f82:	4631      	mov	r1, r6
 80a2f84:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2f8a:	f7fe becd 	b.w	80a1d28 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2f8e:	4628      	mov	r0, r5
 80a2f90:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2f94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2f94:	b510      	push	{r4, lr}
 80a2f96:	4604      	mov	r4, r0
 80a2f98:	4608      	mov	r0, r1
 80a2f9a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2f9c:	2200      	movs	r2, #0
 80a2f9e:	6062      	str	r2, [r4, #4]
 80a2fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2fa4:	60a2      	str	r2, [r4, #8]
 80a2fa6:	4a05      	ldr	r2, [pc, #20]	; (80a2fbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2fa8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2faa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2fac:	2201      	movs	r2, #1
 80a2fae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2fb0:	461a      	mov	r2, r3
 80a2fb2:	f7fe feb1 	bl	80a1d18 <HAL_USART_Init>
}
 80a2fb6:	4620      	mov	r0, r4
 80a2fb8:	bd10      	pop	{r4, pc}
 80a2fba:	bf00      	nop
 80a2fbc:	080a73b4 	.word	0x080a73b4

080a2fc0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2fc0:	7c00      	ldrb	r0, [r0, #16]
 80a2fc2:	f7fe bed9 	b.w	80a1d78 <HAL_USART_Is_Enabled>
	...

080a2fc8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2fc8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2fca:	4d0c      	ldr	r5, [pc, #48]	; (80a2ffc <_Z22__fetch_global_Serial1v+0x34>)
 80a2fcc:	6829      	ldr	r1, [r5, #0]
 80a2fce:	f011 0401 	ands.w	r4, r1, #1
 80a2fd2:	d111      	bne.n	80a2ff8 <_Z22__fetch_global_Serial1v+0x30>
 80a2fd4:	4628      	mov	r0, r5
 80a2fd6:	f7fd f866 	bl	80a00a6 <__cxa_guard_acquire>
 80a2fda:	b168      	cbz	r0, 80a2ff8 <_Z22__fetch_global_Serial1v+0x30>
 80a2fdc:	4a08      	ldr	r2, [pc, #32]	; (80a3000 <_Z22__fetch_global_Serial1v+0x38>)
 80a2fde:	4621      	mov	r1, r4
 80a2fe0:	4b08      	ldr	r3, [pc, #32]	; (80a3004 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2fe2:	4809      	ldr	r0, [pc, #36]	; (80a3008 <_Z22__fetch_global_Serial1v+0x40>)
 80a2fe4:	f7ff ffd6 	bl	80a2f94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2fe8:	4628      	mov	r0, r5
 80a2fea:	f7fd f861 	bl	80a00b0 <__cxa_guard_release>
 80a2fee:	4a07      	ldr	r2, [pc, #28]	; (80a300c <_Z22__fetch_global_Serial1v+0x44>)
 80a2ff0:	4907      	ldr	r1, [pc, #28]	; (80a3010 <_Z22__fetch_global_Serial1v+0x48>)
 80a2ff2:	4805      	ldr	r0, [pc, #20]	; (80a3008 <_Z22__fetch_global_Serial1v+0x40>)
 80a2ff4:	f000 fab0 	bl	80a3558 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2ff8:	4803      	ldr	r0, [pc, #12]	; (80a3008 <_Z22__fetch_global_Serial1v+0x40>)
 80a2ffa:	bd38      	pop	{r3, r4, r5, pc}
 80a2ffc:	20000498 	.word	0x20000498
 80a3000:	2000049c 	.word	0x2000049c
 80a3004:	20000414 	.word	0x20000414
 80a3008:	20000400 	.word	0x20000400
 80a300c:	20000258 	.word	0x20000258
 80a3010:	080a2f11 	.word	0x080a2f11

080a3014 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3014:	7441      	strb	r1, [r0, #17]
 80a3016:	4770      	bx	lr

080a3018 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3018:	4770      	bx	lr

080a301a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a301a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a301c:	2100      	movs	r1, #0
 80a301e:	7c00      	ldrb	r0, [r0, #16]
 80a3020:	f7fe fed2 	bl	80a1dc8 <HAL_USB_USART_Receive_Data>
}
 80a3024:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3028:	bf28      	it	cs
 80a302a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a302e:	bd08      	pop	{r3, pc}

080a3030 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3030:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3032:	2101      	movs	r1, #1
 80a3034:	7c00      	ldrb	r0, [r0, #16]
 80a3036:	f7fe fec7 	bl	80a1dc8 <HAL_USB_USART_Receive_Data>
}
 80a303a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a303e:	bf28      	it	cs
 80a3040:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a3044:	bd08      	pop	{r3, pc}

080a3046 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3046:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3048:	7c00      	ldrb	r0, [r0, #16]
 80a304a:	f7fe feb5 	bl	80a1db8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a304e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3052:	bd08      	pop	{r3, pc}

080a3054 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3054:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3056:	7c00      	ldrb	r0, [r0, #16]
 80a3058:	f7fe fea6 	bl	80a1da8 <HAL_USB_USART_Available_Data>
}
 80a305c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3060:	bd08      	pop	{r3, pc}

080a3062 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3062:	7c00      	ldrb	r0, [r0, #16]
 80a3064:	f7fe bec0 	b.w	80a1de8 <HAL_USB_USART_Flush_Data>

080a3068 <_ZN9USBSerialD0Ev>:
 80a3068:	b510      	push	{r4, lr}
 80a306a:	4604      	mov	r4, r0
 80a306c:	2114      	movs	r1, #20
 80a306e:	f000 fa78 	bl	80a3562 <_ZdlPvj>
 80a3072:	4620      	mov	r0, r4
 80a3074:	bd10      	pop	{r4, pc}

080a3076 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3076:	b538      	push	{r3, r4, r5, lr}
 80a3078:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a307a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a307c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a307e:	f7fe fe9b 	bl	80a1db8 <HAL_USB_USART_Available_Data_For_Write>
 80a3082:	2800      	cmp	r0, #0
 80a3084:	dc01      	bgt.n	80a308a <_ZN9USBSerial5writeEh+0x14>
 80a3086:	7c60      	ldrb	r0, [r4, #17]
 80a3088:	b128      	cbz	r0, 80a3096 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a308a:	4629      	mov	r1, r5
 80a308c:	7c20      	ldrb	r0, [r4, #16]
 80a308e:	f7fe fea3 	bl	80a1dd8 <HAL_USB_USART_Send_Data>
 80a3092:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3096:	bd38      	pop	{r3, r4, r5, pc}

080a3098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3098:	b510      	push	{r4, lr}
 80a309a:	4604      	mov	r4, r0
 80a309c:	2300      	movs	r3, #0
 80a309e:	6063      	str	r3, [r4, #4]
 80a30a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a30a4:	60a3      	str	r3, [r4, #8]
 80a30a6:	4b05      	ldr	r3, [pc, #20]	; (80a30bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a30a8:	4608      	mov	r0, r1
 80a30aa:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a30ac:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a30ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a30b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a30b2:	4611      	mov	r1, r2
 80a30b4:	f7fe fe70 	bl	80a1d98 <HAL_USB_USART_Init>
}
 80a30b8:	4620      	mov	r0, r4
 80a30ba:	bd10      	pop	{r4, pc}
 80a30bc:	080a73e4 	.word	0x080a73e4

080a30c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a30c0:	b510      	push	{r4, lr}
 80a30c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a30c4:	2214      	movs	r2, #20
 80a30c6:	2100      	movs	r1, #0
 80a30c8:	f001 fd05 	bl	80a4ad6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a30cc:	4b05      	ldr	r3, [pc, #20]	; (80a30e4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a30ce:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a30d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a30d2:	4b05      	ldr	r3, [pc, #20]	; (80a30e8 <_Z19acquireSerialBufferv+0x28>)
 80a30d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a30d6:	f240 1301 	movw	r3, #257	; 0x101
 80a30da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a30dc:	2381      	movs	r3, #129	; 0x81
 80a30de:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a30e0:	bd10      	pop	{r4, pc}
 80a30e2:	bf00      	nop
 80a30e4:	200005a5 	.word	0x200005a5
 80a30e8:	20000524 	.word	0x20000524

080a30ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a30ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a30ee:	4d0e      	ldr	r5, [pc, #56]	; (80a3128 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a30f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a30f2:	a801      	add	r0, sp, #4
 80a30f4:	f7ff ffe4 	bl	80a30c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a30f8:	6829      	ldr	r1, [r5, #0]
 80a30fa:	f011 0401 	ands.w	r4, r1, #1
 80a30fe:	d110      	bne.n	80a3122 <_Z16_fetch_usbserialv+0x36>
 80a3100:	4628      	mov	r0, r5
 80a3102:	f7fc ffd0 	bl	80a00a6 <__cxa_guard_acquire>
 80a3106:	b160      	cbz	r0, 80a3122 <_Z16_fetch_usbserialv+0x36>
 80a3108:	aa01      	add	r2, sp, #4
 80a310a:	4621      	mov	r1, r4
 80a310c:	4807      	ldr	r0, [pc, #28]	; (80a312c <_Z16_fetch_usbserialv+0x40>)
 80a310e:	f7ff ffc3 	bl	80a3098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3112:	4628      	mov	r0, r5
 80a3114:	f7fc ffcc 	bl	80a00b0 <__cxa_guard_release>
 80a3118:	4a05      	ldr	r2, [pc, #20]	; (80a3130 <_Z16_fetch_usbserialv+0x44>)
 80a311a:	4906      	ldr	r1, [pc, #24]	; (80a3134 <_Z16_fetch_usbserialv+0x48>)
 80a311c:	4803      	ldr	r0, [pc, #12]	; (80a312c <_Z16_fetch_usbserialv+0x40>)
 80a311e:	f000 fa1b 	bl	80a3558 <__aeabi_atexit>
	return _usbserial;
}
 80a3122:	4802      	ldr	r0, [pc, #8]	; (80a312c <_Z16_fetch_usbserialv+0x40>)
 80a3124:	b007      	add	sp, #28
 80a3126:	bd30      	pop	{r4, r5, pc}
 80a3128:	20000520 	.word	0x20000520
 80a312c:	200006a8 	.word	0x200006a8
 80a3130:	20000258 	.word	0x20000258
 80a3134:	080a3019 	.word	0x080a3019

080a3138 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3138:	b510      	push	{r4, lr}
 80a313a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a313c:	2214      	movs	r2, #20
 80a313e:	2100      	movs	r1, #0
 80a3140:	f001 fcc9 	bl	80a4ad6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3144:	4b05      	ldr	r3, [pc, #20]	; (80a315c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3146:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3148:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a314a:	4b05      	ldr	r3, [pc, #20]	; (80a3160 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a314c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a314e:	f240 1301 	movw	r3, #257	; 0x101
 80a3152:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3154:	2381      	movs	r3, #129	; 0x81
 80a3156:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3158:	bd10      	pop	{r4, pc}
 80a315a:	bf00      	nop
 80a315c:	20000758 	.word	0x20000758
 80a3160:	200006c0 	.word	0x200006c0

080a3164 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3164:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3166:	4c0e      	ldr	r4, [pc, #56]	; (80a31a0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3168:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a316a:	a801      	add	r0, sp, #4
 80a316c:	f7ff ffe4 	bl	80a3138 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3170:	6823      	ldr	r3, [r4, #0]
 80a3172:	07db      	lsls	r3, r3, #31
 80a3174:	d410      	bmi.n	80a3198 <_Z17_fetch_usbserial1v+0x34>
 80a3176:	4620      	mov	r0, r4
 80a3178:	f7fc ff95 	bl	80a00a6 <__cxa_guard_acquire>
 80a317c:	b160      	cbz	r0, 80a3198 <_Z17_fetch_usbserial1v+0x34>
 80a317e:	aa01      	add	r2, sp, #4
 80a3180:	2101      	movs	r1, #1
 80a3182:	4808      	ldr	r0, [pc, #32]	; (80a31a4 <_Z17_fetch_usbserial1v+0x40>)
 80a3184:	f7ff ff88 	bl	80a3098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3188:	4620      	mov	r0, r4
 80a318a:	f7fc ff91 	bl	80a00b0 <__cxa_guard_release>
 80a318e:	4a06      	ldr	r2, [pc, #24]	; (80a31a8 <_Z17_fetch_usbserial1v+0x44>)
 80a3190:	4906      	ldr	r1, [pc, #24]	; (80a31ac <_Z17_fetch_usbserial1v+0x48>)
 80a3192:	4804      	ldr	r0, [pc, #16]	; (80a31a4 <_Z17_fetch_usbserial1v+0x40>)
 80a3194:	f000 f9e0 	bl	80a3558 <__aeabi_atexit>
  return _usbserial1;
}
 80a3198:	4802      	ldr	r0, [pc, #8]	; (80a31a4 <_Z17_fetch_usbserial1v+0x40>)
 80a319a:	b006      	add	sp, #24
 80a319c:	bd10      	pop	{r4, pc}
 80a319e:	bf00      	nop
 80a31a0:	200006bc 	.word	0x200006bc
 80a31a4:	20000744 	.word	0x20000744
 80a31a8:	20000258 	.word	0x20000258
 80a31ac:	080a3019 	.word	0x080a3019

080a31b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a31b0:	2200      	movs	r2, #0
 80a31b2:	4611      	mov	r1, r2
 80a31b4:	6840      	ldr	r0, [r0, #4]
 80a31b6:	f7fe bedb 	b.w	80a1f70 <network_ready>

080a31ba <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a31ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a31bc:	4616      	mov	r6, r2
 80a31be:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a31c0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a31c2:	460f      	mov	r7, r1
 80a31c4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a31c6:	2100      	movs	r1, #0
 80a31c8:	a803      	add	r0, sp, #12
 80a31ca:	f001 fc84 	bl	80a4ad6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a31ce:	4630      	mov	r0, r6
 80a31d0:	f001 fcdf 	bl	80a4b92 <strlen>
 80a31d4:	2500      	movs	r5, #0
 80a31d6:	9500      	str	r5, [sp, #0]
 80a31d8:	b281      	uxth	r1, r0
 80a31da:	687b      	ldr	r3, [r7, #4]
 80a31dc:	aa03      	add	r2, sp, #12
 80a31de:	4630      	mov	r0, r6
 80a31e0:	f7fe fe0a 	bl	80a1df8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a31e4:	b120      	cbz	r0, 80a31f0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a31e6:	4629      	mov	r1, r5
 80a31e8:	4620      	mov	r0, r4
 80a31ea:	f7ff fb55 	bl	80a2898 <_ZN9IPAddressC1Em>
 80a31ee:	e003      	b.n	80a31f8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a31f0:	a903      	add	r1, sp, #12
 80a31f2:	4620      	mov	r0, r4
 80a31f4:	f7ff fb3e 	bl	80a2874 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a31f8:	4620      	mov	r0, r4
 80a31fa:	b009      	add	sp, #36	; 0x24
 80a31fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a31fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a31fe:	2200      	movs	r2, #0
 80a3200:	4611      	mov	r1, r2
 80a3202:	6840      	ldr	r0, [r0, #4]
 80a3204:	f7fe bed4 	b.w	80a1fb0 <network_listening>

080a3208 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3208:	2200      	movs	r2, #0
 80a320a:	4611      	mov	r1, r2
 80a320c:	6840      	ldr	r0, [r0, #4]
 80a320e:	f7fe bedf 	b.w	80a1fd0 <network_get_listen_timeout>

080a3212 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3212:	2200      	movs	r2, #0
 80a3214:	6840      	ldr	r0, [r0, #4]
 80a3216:	f7fe bed3 	b.w	80a1fc0 <network_set_listen_timeout>

080a321a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a321a:	2200      	movs	r2, #0
 80a321c:	f081 0101 	eor.w	r1, r1, #1
 80a3220:	6840      	ldr	r0, [r0, #4]
 80a3222:	f7fe bebd 	b.w	80a1fa0 <network_listen>

080a3226 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3226:	2300      	movs	r3, #0
 80a3228:	461a      	mov	r2, r3
 80a322a:	4619      	mov	r1, r3
 80a322c:	6840      	ldr	r0, [r0, #4]
 80a322e:	f7fe beaf 	b.w	80a1f90 <network_off>

080a3232 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3232:	2300      	movs	r3, #0
 80a3234:	461a      	mov	r2, r3
 80a3236:	4619      	mov	r1, r3
 80a3238:	6840      	ldr	r0, [r0, #4]
 80a323a:	f7fe bea1 	b.w	80a1f80 <network_on>

080a323e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a323e:	2200      	movs	r2, #0
 80a3240:	4611      	mov	r1, r2
 80a3242:	6840      	ldr	r0, [r0, #4]
 80a3244:	f7fe be84 	b.w	80a1f50 <network_connecting>

080a3248 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3248:	2200      	movs	r2, #0
 80a324a:	2102      	movs	r1, #2
 80a324c:	6840      	ldr	r0, [r0, #4]
 80a324e:	f7fe be87 	b.w	80a1f60 <network_disconnect>

080a3252 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3252:	2300      	movs	r3, #0
 80a3254:	461a      	mov	r2, r3
 80a3256:	6840      	ldr	r0, [r0, #4]
 80a3258:	f7fe be72 	b.w	80a1f40 <network_connect>

080a325c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a325c:	4b02      	ldr	r3, [pc, #8]	; (80a3268 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a325e:	2204      	movs	r2, #4
 80a3260:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3262:	4a02      	ldr	r2, [pc, #8]	; (80a326c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3264:	601a      	str	r2, [r3, #0]
 80a3266:	4770      	bx	lr
 80a3268:	2000085c 	.word	0x2000085c
 80a326c:	080a7414 	.word	0x080a7414

080a3270 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3270:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3272:	4b14      	ldr	r3, [pc, #80]	; (80a32c4 <serialEventRun+0x54>)
 80a3274:	b133      	cbz	r3, 80a3284 <serialEventRun+0x14>
 80a3276:	f7ff ff39 	bl	80a30ec <_Z16_fetch_usbserialv>
 80a327a:	6803      	ldr	r3, [r0, #0]
 80a327c:	691b      	ldr	r3, [r3, #16]
 80a327e:	4798      	blx	r3
 80a3280:	2800      	cmp	r0, #0
 80a3282:	dc16      	bgt.n	80a32b2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3284:	4b10      	ldr	r3, [pc, #64]	; (80a32c8 <serialEventRun+0x58>)
 80a3286:	b133      	cbz	r3, 80a3296 <serialEventRun+0x26>
 80a3288:	f7ff fe9e 	bl	80a2fc8 <_Z22__fetch_global_Serial1v>
 80a328c:	6803      	ldr	r3, [r0, #0]
 80a328e:	691b      	ldr	r3, [r3, #16]
 80a3290:	4798      	blx	r3
 80a3292:	2800      	cmp	r0, #0
 80a3294:	dc10      	bgt.n	80a32b8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3296:	4b0d      	ldr	r3, [pc, #52]	; (80a32cc <serialEventRun+0x5c>)
 80a3298:	b10b      	cbz	r3, 80a329e <serialEventRun+0x2e>
 80a329a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a329e:	4b0c      	ldr	r3, [pc, #48]	; (80a32d0 <serialEventRun+0x60>)
 80a32a0:	b17b      	cbz	r3, 80a32c2 <serialEventRun+0x52>
 80a32a2:	f7ff ff5f 	bl	80a3164 <_Z17_fetch_usbserial1v>
 80a32a6:	6803      	ldr	r3, [r0, #0]
 80a32a8:	691b      	ldr	r3, [r3, #16]
 80a32aa:	4798      	blx	r3
 80a32ac:	2800      	cmp	r0, #0
 80a32ae:	dc06      	bgt.n	80a32be <serialEventRun+0x4e>
 80a32b0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a32b2:	f3af 8000 	nop.w
 80a32b6:	e7e5      	b.n	80a3284 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a32b8:	f3af 8000 	nop.w
 80a32bc:	e7eb      	b.n	80a3296 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a32be:	f3af 8000 	nop.w
 80a32c2:	bd08      	pop	{r3, pc}
	...

080a32d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a32d4:	b508      	push	{r3, lr}
	serialEventRun();
 80a32d6:	f7ff ffcb 	bl	80a3270 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a32da:	f7fe fc25 	bl	80a1b28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a32de:	4b01      	ldr	r3, [pc, #4]	; (80a32e4 <_post_loop+0x10>)
 80a32e0:	6018      	str	r0, [r3, #0]
 80a32e2:	bd08      	pop	{r3, pc}
 80a32e4:	2000086c 	.word	0x2000086c

080a32e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a32e8:	4802      	ldr	r0, [pc, #8]	; (80a32f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a32ea:	4a03      	ldr	r2, [pc, #12]	; (80a32f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a32ec:	4903      	ldr	r1, [pc, #12]	; (80a32fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a32ee:	1a12      	subs	r2, r2, r0
 80a32f0:	f001 bbe6 	b.w	80a4ac0 <memcpy>
 80a32f4:	40024000 	.word	0x40024000
 80a32f8:	40024004 	.word	0x40024004
 80a32fc:	080a77e8 	.word	0x080a77e8

080a3300 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3300:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3302:	2300      	movs	r3, #0
 80a3304:	9300      	str	r3, [sp, #0]
 80a3306:	461a      	mov	r2, r3
 80a3308:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a330c:	f7fe fdbe 	bl	80a1e8c <system_ctrl_set_result>
}
 80a3310:	b003      	add	sp, #12
 80a3312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3318 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3318:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a331a:	8843      	ldrh	r3, [r0, #2]
 80a331c:	2b0a      	cmp	r3, #10
 80a331e:	d008      	beq.n	80a3332 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3320:	2b50      	cmp	r3, #80	; 0x50
 80a3322:	d109      	bne.n	80a3338 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3324:	4b09      	ldr	r3, [pc, #36]	; (80a334c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3326:	681b      	ldr	r3, [r3, #0]
 80a3328:	b13b      	cbz	r3, 80a333a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a332a:	b003      	add	sp, #12
 80a332c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3330:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3332:	f7ff ffe5 	bl	80a3300 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3336:	e006      	b.n	80a3346 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3338:	2300      	movs	r3, #0
 80a333a:	9300      	str	r3, [sp, #0]
 80a333c:	461a      	mov	r2, r3
 80a333e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3342:	f7fe fda3 	bl	80a1e8c <system_ctrl_set_result>
        break;
    }
}
 80a3346:	b003      	add	sp, #12
 80a3348:	f85d fb04 	ldr.w	pc, [sp], #4
 80a334c:	20000864 	.word	0x20000864

080a3350 <module_user_init_hook>:

void module_user_init_hook()
{
 80a3350:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3352:	4c10      	ldr	r4, [pc, #64]	; (80a3394 <module_user_init_hook+0x44>)
 80a3354:	4d10      	ldr	r5, [pc, #64]	; (80a3398 <module_user_init_hook+0x48>)
 80a3356:	6823      	ldr	r3, [r4, #0]
 80a3358:	42ab      	cmp	r3, r5
 80a335a:	4b10      	ldr	r3, [pc, #64]	; (80a339c <module_user_init_hook+0x4c>)
 80a335c:	bf0c      	ite	eq
 80a335e:	2201      	moveq	r2, #1
 80a3360:	2200      	movne	r2, #0
 80a3362:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3364:	d002      	beq.n	80a336c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3366:	f7ff ffbf 	bl	80a32e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a336a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a336c:	f7fe fbd4 	bl	80a1b18 <HAL_RNG_GetRandomNumber>
 80a3370:	4604      	mov	r4, r0
    srand(seed);
 80a3372:	f001 fbb9 	bl	80a4ae8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3376:	4b0a      	ldr	r3, [pc, #40]	; (80a33a0 <module_user_init_hook+0x50>)
 80a3378:	b113      	cbz	r3, 80a3380 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a337a:	4620      	mov	r0, r4
 80a337c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3380:	2100      	movs	r1, #0
 80a3382:	4807      	ldr	r0, [pc, #28]	; (80a33a0 <module_user_init_hook+0x50>)
 80a3384:	f7fe fdd4 	bl	80a1f30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a338c:	2100      	movs	r1, #0
 80a338e:	4805      	ldr	r0, [pc, #20]	; (80a33a4 <module_user_init_hook+0x54>)
 80a3390:	f7fe bd72 	b.w	80a1e78 <system_ctrl_set_app_request_handler>
 80a3394:	40024000 	.word	0x40024000
 80a3398:	9a271c1e 	.word	0x9a271c1e
 80a339c:	20000868 	.word	0x20000868
 80a33a0:	00000000 	.word	0x00000000
 80a33a4:	080a3319 	.word	0x080a3319

080a33a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a33a8:	b510      	push	{r4, lr}
 80a33aa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a33ac:	f000 f8b4 	bl	80a3518 <_ZN8particle7globals11instanceSpiEv>
 80a33b0:	f7ff fc5a 	bl	80a2c68 <_ZN8SPIClass9isEnabledEv>
 80a33b4:	b128      	cbz	r0, 80a33c2 <pinAvailable+0x1a>
 80a33b6:	f1a4 030d 	sub.w	r3, r4, #13
 80a33ba:	2b02      	cmp	r3, #2
 80a33bc:	d801      	bhi.n	80a33c2 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a33be:	2000      	movs	r0, #0
 80a33c0:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a33c2:	f000 f86b 	bl	80a349c <_Z19__fetch_global_Wirev>
 80a33c6:	f7ff fa0f 	bl	80a27e8 <_ZN7TwoWire9isEnabledEv>
 80a33ca:	b108      	cbz	r0, 80a33d0 <pinAvailable+0x28>
 80a33cc:	2c01      	cmp	r4, #1
 80a33ce:	d9f6      	bls.n	80a33be <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a33d0:	f7ff fdfa 	bl	80a2fc8 <_Z22__fetch_global_Serial1v>
 80a33d4:	f7ff fdf4 	bl	80a2fc0 <_ZN11USARTSerial9isEnabledEv>
 80a33d8:	b118      	cbz	r0, 80a33e2 <pinAvailable+0x3a>
 80a33da:	f1a4 0312 	sub.w	r3, r4, #18
 80a33de:	2b01      	cmp	r3, #1
 80a33e0:	d9ed      	bls.n	80a33be <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a33e2:	2c17      	cmp	r4, #23
 80a33e4:	bf8c      	ite	hi
 80a33e6:	2000      	movhi	r0, #0
 80a33e8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a33ea:	bd10      	pop	{r4, pc}

080a33ec <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a33ec:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a33ee:	b538      	push	{r3, r4, r5, lr}
 80a33f0:	4604      	mov	r4, r0
 80a33f2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a33f4:	d80a      	bhi.n	80a340c <pinMode+0x20>
 80a33f6:	29ff      	cmp	r1, #255	; 0xff
 80a33f8:	d008      	beq.n	80a340c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a33fa:	f7ff ffd5 	bl	80a33a8 <pinAvailable>
 80a33fe:	b128      	cbz	r0, 80a340c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3400:	4629      	mov	r1, r5
 80a3402:	4620      	mov	r0, r4
}
 80a3404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3408:	f7fe bbb6 	b.w	80a1b78 <HAL_Pin_Mode>
 80a340c:	bd38      	pop	{r3, r4, r5, pc}

080a340e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a340e:	b538      	push	{r3, r4, r5, lr}
 80a3410:	4604      	mov	r4, r0
 80a3412:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3414:	f7fe fbb8 	bl	80a1b88 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3418:	28ff      	cmp	r0, #255	; 0xff
 80a341a:	d010      	beq.n	80a343e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a341c:	2806      	cmp	r0, #6
 80a341e:	d804      	bhi.n	80a342a <digitalWrite+0x1c>
 80a3420:	234d      	movs	r3, #77	; 0x4d
 80a3422:	fa23 f000 	lsr.w	r0, r3, r0
 80a3426:	07c3      	lsls	r3, r0, #31
 80a3428:	d409      	bmi.n	80a343e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a342a:	4620      	mov	r0, r4
 80a342c:	f7ff ffbc 	bl	80a33a8 <pinAvailable>
 80a3430:	b128      	cbz	r0, 80a343e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3432:	4629      	mov	r1, r5
 80a3434:	4620      	mov	r0, r4
}
 80a3436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a343a:	f7fe bbad 	b.w	80a1b98 <HAL_GPIO_Write>
 80a343e:	bd38      	pop	{r3, r4, r5, pc}

080a3440 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3440:	b510      	push	{r4, lr}
 80a3442:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3444:	f7fe fba0 	bl	80a1b88 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3448:	3804      	subs	r0, #4
 80a344a:	b2c0      	uxtb	r0, r0
 80a344c:	2801      	cmp	r0, #1
 80a344e:	d908      	bls.n	80a3462 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3450:	4620      	mov	r0, r4
 80a3452:	f7ff ffa9 	bl	80a33a8 <pinAvailable>
 80a3456:	b120      	cbz	r0, 80a3462 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3458:	4620      	mov	r0, r4
}
 80a345a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a345e:	f7fe bba3 	b.w	80a1ba8 <HAL_GPIO_Read>
}
 80a3462:	2000      	movs	r0, #0
 80a3464:	bd10      	pop	{r4, pc}
	...

080a3468 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a3468:	b570      	push	{r4, r5, r6, lr}
 80a346a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a346c:	2514      	movs	r5, #20
 80a346e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3470:	4e09      	ldr	r6, [pc, #36]	; (80a3498 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3472:	2100      	movs	r1, #0
 80a3474:	f001 fb2f 	bl	80a4ad6 <memset>
 80a3478:	8025      	strh	r5, [r4, #0]
 80a347a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a347c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a347e:	60a5      	str	r5, [r4, #8]
 80a3480:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3482:	4628      	mov	r0, r5
 80a3484:	f000 f887 	bl	80a3596 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3488:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a348a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a348c:	4628      	mov	r0, r5
 80a348e:	f000 f882 	bl	80a3596 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3492:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a3494:	4620      	mov	r0, r4
 80a3496:	bd70      	pop	{r4, r5, r6, pc}
 80a3498:	080a7440 	.word	0x080a7440

080a349c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a349c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a349e:	4d0e      	ldr	r5, [pc, #56]	; (80a34d8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a34a0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a34a2:	6829      	ldr	r1, [r5, #0]
 80a34a4:	f011 0401 	ands.w	r4, r1, #1
 80a34a8:	d113      	bne.n	80a34d2 <_Z19__fetch_global_Wirev+0x36>
 80a34aa:	4628      	mov	r0, r5
 80a34ac:	f7fc fdfb 	bl	80a00a6 <__cxa_guard_acquire>
 80a34b0:	b178      	cbz	r0, 80a34d2 <_Z19__fetch_global_Wirev+0x36>
 80a34b2:	a801      	add	r0, sp, #4
 80a34b4:	f7ff ffd8 	bl	80a3468 <_Z17acquireWireBufferv>
 80a34b8:	aa01      	add	r2, sp, #4
 80a34ba:	4621      	mov	r1, r4
 80a34bc:	4807      	ldr	r0, [pc, #28]	; (80a34dc <_Z19__fetch_global_Wirev+0x40>)
 80a34be:	f7ff f93f 	bl	80a2740 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a34c2:	4628      	mov	r0, r5
 80a34c4:	f7fc fdf4 	bl	80a00b0 <__cxa_guard_release>
 80a34c8:	4a05      	ldr	r2, [pc, #20]	; (80a34e0 <_Z19__fetch_global_Wirev+0x44>)
 80a34ca:	4906      	ldr	r1, [pc, #24]	; (80a34e4 <_Z19__fetch_global_Wirev+0x48>)
 80a34cc:	4803      	ldr	r0, [pc, #12]	; (80a34dc <_Z19__fetch_global_Wirev+0x40>)
 80a34ce:	f000 f843 	bl	80a3558 <__aeabi_atexit>
	return wire;
}
 80a34d2:	4802      	ldr	r0, [pc, #8]	; (80a34dc <_Z19__fetch_global_Wirev+0x40>)
 80a34d4:	b007      	add	sp, #28
 80a34d6:	bd30      	pop	{r4, r5, pc}
 80a34d8:	20000870 	.word	0x20000870
 80a34dc:	20000874 	.word	0x20000874
 80a34e0:	20000258 	.word	0x20000258
 80a34e4:	080a26e7 	.word	0x080a26e7

080a34e8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a34e8:	b513      	push	{r0, r1, r4, lr}
 80a34ea:	4c08      	ldr	r4, [pc, #32]	; (80a350c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a34ec:	2300      	movs	r3, #0
 80a34ee:	461a      	mov	r2, r3
 80a34f0:	4619      	mov	r1, r3
 80a34f2:	9300      	str	r3, [sp, #0]
 80a34f4:	4620      	mov	r0, r4
 80a34f6:	f7ff f9e5 	bl	80a28c4 <_ZN9IPAddressC1Ehhhh>
 80a34fa:	4620      	mov	r0, r4
 80a34fc:	4a04      	ldr	r2, [pc, #16]	; (80a3510 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a34fe:	4905      	ldr	r1, [pc, #20]	; (80a3514 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3500:	b002      	add	sp, #8
 80a3502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3506:	f000 b827 	b.w	80a3558 <__aeabi_atexit>
 80a350a:	bf00      	nop
 80a350c:	20000888 	.word	0x20000888
 80a3510:	20000258 	.word	0x20000258
 80a3514:	080a2815 	.word	0x080a2815

080a3518 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a3518:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a351a:	4d0b      	ldr	r5, [pc, #44]	; (80a3548 <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a351c:	6829      	ldr	r1, [r5, #0]
 80a351e:	f011 0401 	ands.w	r4, r1, #1
 80a3522:	d10f      	bne.n	80a3544 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a3524:	4628      	mov	r0, r5
 80a3526:	f7fc fdbe 	bl	80a00a6 <__cxa_guard_acquire>
 80a352a:	b158      	cbz	r0, 80a3544 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a352c:	4621      	mov	r1, r4
 80a352e:	4807      	ldr	r0, [pc, #28]	; (80a354c <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a3530:	f7ff fad2 	bl	80a2ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3534:	4628      	mov	r0, r5
 80a3536:	f7fc fdbb 	bl	80a00b0 <__cxa_guard_release>
 80a353a:	4a05      	ldr	r2, [pc, #20]	; (80a3550 <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a353c:	4905      	ldr	r1, [pc, #20]	; (80a3554 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a353e:	4803      	ldr	r0, [pc, #12]	; (80a354c <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a3540:	f000 f80a 	bl	80a3558 <__aeabi_atexit>
    return instance;
}
 80a3544:	4801      	ldr	r0, [pc, #4]	; (80a354c <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a3546:	bd38      	pop	{r3, r4, r5, pc}
 80a3548:	200008b0 	.word	0x200008b0
 80a354c:	200008a0 	.word	0x200008a0
 80a3550:	20000258 	.word	0x20000258
 80a3554:	080a2aa5 	.word	0x080a2aa5

080a3558 <__aeabi_atexit>:
 80a3558:	460b      	mov	r3, r1
 80a355a:	4601      	mov	r1, r0
 80a355c:	4618      	mov	r0, r3
 80a355e:	f001 b9a5 	b.w	80a48ac <__cxa_atexit>

080a3562 <_ZdlPvj>:
 80a3562:	f7fc bd9e 	b.w	80a00a2 <_ZdlPv>
	...

080a3568 <_ZSt15get_new_handlerv>:
 80a3568:	4b02      	ldr	r3, [pc, #8]	; (80a3574 <_ZSt15get_new_handlerv+0xc>)
 80a356a:	6818      	ldr	r0, [r3, #0]
 80a356c:	f3bf 8f5f 	dmb	sy
 80a3570:	4770      	bx	lr
 80a3572:	bf00      	nop
 80a3574:	200008b4 	.word	0x200008b4

080a3578 <_ZnwjRKSt9nothrow_t>:
 80a3578:	b510      	push	{r4, lr}
 80a357a:	2800      	cmp	r0, #0
 80a357c:	bf14      	ite	ne
 80a357e:	4604      	movne	r4, r0
 80a3580:	2401      	moveq	r4, #1
 80a3582:	4620      	mov	r0, r4
 80a3584:	f7fe fd2c 	bl	80a1fe0 <malloc>
 80a3588:	b920      	cbnz	r0, 80a3594 <_ZnwjRKSt9nothrow_t+0x1c>
 80a358a:	f7ff ffed 	bl	80a3568 <_ZSt15get_new_handlerv>
 80a358e:	b108      	cbz	r0, 80a3594 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3590:	4780      	blx	r0
 80a3592:	e7f6      	b.n	80a3582 <_ZnwjRKSt9nothrow_t+0xa>
 80a3594:	bd10      	pop	{r4, pc}

080a3596 <_ZnajRKSt9nothrow_t>:
 80a3596:	f7ff bfef 	b.w	80a3578 <_ZnwjRKSt9nothrow_t>

080a359a <_ZSt25__throw_bad_function_callv>:
 80a359a:	b508      	push	{r3, lr}
 80a359c:	f7fe fd48 	bl	80a2030 <abort>

080a35a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a35a0:	4b24      	ldr	r3, [pc, #144]	; (80a3634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a35a2:	681a      	ldr	r2, [r3, #0]
 80a35a4:	07d0      	lsls	r0, r2, #31
 80a35a6:	bf5c      	itt	pl
 80a35a8:	2201      	movpl	r2, #1
 80a35aa:	601a      	strpl	r2, [r3, #0]
 80a35ac:	4b22      	ldr	r3, [pc, #136]	; (80a3638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a35ae:	681a      	ldr	r2, [r3, #0]
 80a35b0:	07d1      	lsls	r1, r2, #31
 80a35b2:	bf5c      	itt	pl
 80a35b4:	2201      	movpl	r2, #1
 80a35b6:	601a      	strpl	r2, [r3, #0]
 80a35b8:	4b20      	ldr	r3, [pc, #128]	; (80a363c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a35ba:	681a      	ldr	r2, [r3, #0]
 80a35bc:	07d2      	lsls	r2, r2, #31
 80a35be:	bf5c      	itt	pl
 80a35c0:	2201      	movpl	r2, #1
 80a35c2:	601a      	strpl	r2, [r3, #0]
 80a35c4:	4b1e      	ldr	r3, [pc, #120]	; (80a3640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a35c6:	681a      	ldr	r2, [r3, #0]
 80a35c8:	07d0      	lsls	r0, r2, #31
 80a35ca:	bf5c      	itt	pl
 80a35cc:	2201      	movpl	r2, #1
 80a35ce:	601a      	strpl	r2, [r3, #0]
 80a35d0:	4b1c      	ldr	r3, [pc, #112]	; (80a3644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a35d2:	681a      	ldr	r2, [r3, #0]
 80a35d4:	07d1      	lsls	r1, r2, #31
 80a35d6:	bf5c      	itt	pl
 80a35d8:	2201      	movpl	r2, #1
 80a35da:	601a      	strpl	r2, [r3, #0]
 80a35dc:	4b1a      	ldr	r3, [pc, #104]	; (80a3648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a35de:	681a      	ldr	r2, [r3, #0]
 80a35e0:	07d2      	lsls	r2, r2, #31
 80a35e2:	bf5c      	itt	pl
 80a35e4:	2201      	movpl	r2, #1
 80a35e6:	601a      	strpl	r2, [r3, #0]
 80a35e8:	4b18      	ldr	r3, [pc, #96]	; (80a364c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a35ea:	681a      	ldr	r2, [r3, #0]
 80a35ec:	07d0      	lsls	r0, r2, #31
 80a35ee:	bf5c      	itt	pl
 80a35f0:	2201      	movpl	r2, #1
 80a35f2:	601a      	strpl	r2, [r3, #0]
 80a35f4:	4b16      	ldr	r3, [pc, #88]	; (80a3650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a35f6:	681a      	ldr	r2, [r3, #0]
 80a35f8:	07d1      	lsls	r1, r2, #31
 80a35fa:	bf5c      	itt	pl
 80a35fc:	2201      	movpl	r2, #1
 80a35fe:	601a      	strpl	r2, [r3, #0]
 80a3600:	4b14      	ldr	r3, [pc, #80]	; (80a3654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3602:	681a      	ldr	r2, [r3, #0]
 80a3604:	07d2      	lsls	r2, r2, #31
 80a3606:	bf5c      	itt	pl
 80a3608:	2201      	movpl	r2, #1
 80a360a:	601a      	strpl	r2, [r3, #0]
 80a360c:	4b12      	ldr	r3, [pc, #72]	; (80a3658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a360e:	681a      	ldr	r2, [r3, #0]
 80a3610:	07d0      	lsls	r0, r2, #31
 80a3612:	bf5c      	itt	pl
 80a3614:	2201      	movpl	r2, #1
 80a3616:	601a      	strpl	r2, [r3, #0]
 80a3618:	4b10      	ldr	r3, [pc, #64]	; (80a365c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a361a:	681a      	ldr	r2, [r3, #0]
 80a361c:	07d1      	lsls	r1, r2, #31
 80a361e:	bf5c      	itt	pl
 80a3620:	2201      	movpl	r2, #1
 80a3622:	601a      	strpl	r2, [r3, #0]
 80a3624:	4b0e      	ldr	r3, [pc, #56]	; (80a3660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3626:	681a      	ldr	r2, [r3, #0]
 80a3628:	07d2      	lsls	r2, r2, #31
 80a362a:	bf5c      	itt	pl
 80a362c:	2201      	movpl	r2, #1
 80a362e:	601a      	strpl	r2, [r3, #0]
 80a3630:	4770      	bx	lr
 80a3632:	bf00      	nop
 80a3634:	200008e4 	.word	0x200008e4
 80a3638:	200008e0 	.word	0x200008e0
 80a363c:	200008dc 	.word	0x200008dc
 80a3640:	200008d8 	.word	0x200008d8
 80a3644:	200008d4 	.word	0x200008d4
 80a3648:	200008d0 	.word	0x200008d0
 80a364c:	200008cc 	.word	0x200008cc
 80a3650:	200008c8 	.word	0x200008c8
 80a3654:	200008c4 	.word	0x200008c4
 80a3658:	200008c0 	.word	0x200008c0
 80a365c:	200008bc 	.word	0x200008bc
 80a3660:	200008b8 	.word	0x200008b8

080a3664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3664:	4b18      	ldr	r3, [pc, #96]	; (80a36c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3666:	681a      	ldr	r2, [r3, #0]
 80a3668:	07d1      	lsls	r1, r2, #31
 80a366a:	bf5c      	itt	pl
 80a366c:	2201      	movpl	r2, #1
 80a366e:	601a      	strpl	r2, [r3, #0]
 80a3670:	4b16      	ldr	r3, [pc, #88]	; (80a36cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3672:	681a      	ldr	r2, [r3, #0]
 80a3674:	07d2      	lsls	r2, r2, #31
 80a3676:	bf5c      	itt	pl
 80a3678:	2201      	movpl	r2, #1
 80a367a:	601a      	strpl	r2, [r3, #0]
 80a367c:	4b14      	ldr	r3, [pc, #80]	; (80a36d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a367e:	681a      	ldr	r2, [r3, #0]
 80a3680:	07d0      	lsls	r0, r2, #31
 80a3682:	bf5c      	itt	pl
 80a3684:	2201      	movpl	r2, #1
 80a3686:	601a      	strpl	r2, [r3, #0]
 80a3688:	4b12      	ldr	r3, [pc, #72]	; (80a36d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a368a:	681a      	ldr	r2, [r3, #0]
 80a368c:	07d1      	lsls	r1, r2, #31
 80a368e:	bf5c      	itt	pl
 80a3690:	2201      	movpl	r2, #1
 80a3692:	601a      	strpl	r2, [r3, #0]
 80a3694:	4b10      	ldr	r3, [pc, #64]	; (80a36d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3696:	681a      	ldr	r2, [r3, #0]
 80a3698:	07d2      	lsls	r2, r2, #31
 80a369a:	bf5c      	itt	pl
 80a369c:	2201      	movpl	r2, #1
 80a369e:	601a      	strpl	r2, [r3, #0]
 80a36a0:	4b0e      	ldr	r3, [pc, #56]	; (80a36dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a36a2:	681a      	ldr	r2, [r3, #0]
 80a36a4:	07d0      	lsls	r0, r2, #31
 80a36a6:	bf5c      	itt	pl
 80a36a8:	2201      	movpl	r2, #1
 80a36aa:	601a      	strpl	r2, [r3, #0]
 80a36ac:	4b0c      	ldr	r3, [pc, #48]	; (80a36e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a36ae:	681a      	ldr	r2, [r3, #0]
 80a36b0:	07d1      	lsls	r1, r2, #31
 80a36b2:	bf5c      	itt	pl
 80a36b4:	2201      	movpl	r2, #1
 80a36b6:	601a      	strpl	r2, [r3, #0]
 80a36b8:	4b0a      	ldr	r3, [pc, #40]	; (80a36e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a36ba:	681a      	ldr	r2, [r3, #0]
 80a36bc:	07d2      	lsls	r2, r2, #31
 80a36be:	bf5c      	itt	pl
 80a36c0:	2201      	movpl	r2, #1
 80a36c2:	601a      	strpl	r2, [r3, #0]
 80a36c4:	4770      	bx	lr
 80a36c6:	bf00      	nop
 80a36c8:	20000904 	.word	0x20000904
 80a36cc:	20000900 	.word	0x20000900
 80a36d0:	200008fc 	.word	0x200008fc
 80a36d4:	200008f8 	.word	0x200008f8
 80a36d8:	200008f4 	.word	0x200008f4
 80a36dc:	200008f0 	.word	0x200008f0
 80a36e0:	200008ec 	.word	0x200008ec
 80a36e4:	200008e8 	.word	0x200008e8

080a36e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a36e8:	4b18      	ldr	r3, [pc, #96]	; (80a374c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a36ea:	681a      	ldr	r2, [r3, #0]
 80a36ec:	07d1      	lsls	r1, r2, #31
 80a36ee:	bf5c      	itt	pl
 80a36f0:	2201      	movpl	r2, #1
 80a36f2:	601a      	strpl	r2, [r3, #0]
 80a36f4:	4b16      	ldr	r3, [pc, #88]	; (80a3750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a36f6:	681a      	ldr	r2, [r3, #0]
 80a36f8:	07d2      	lsls	r2, r2, #31
 80a36fa:	bf5c      	itt	pl
 80a36fc:	2201      	movpl	r2, #1
 80a36fe:	601a      	strpl	r2, [r3, #0]
 80a3700:	4b14      	ldr	r3, [pc, #80]	; (80a3754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3702:	681a      	ldr	r2, [r3, #0]
 80a3704:	07d0      	lsls	r0, r2, #31
 80a3706:	bf5c      	itt	pl
 80a3708:	2201      	movpl	r2, #1
 80a370a:	601a      	strpl	r2, [r3, #0]
 80a370c:	4b12      	ldr	r3, [pc, #72]	; (80a3758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a370e:	681a      	ldr	r2, [r3, #0]
 80a3710:	07d1      	lsls	r1, r2, #31
 80a3712:	bf5c      	itt	pl
 80a3714:	2201      	movpl	r2, #1
 80a3716:	601a      	strpl	r2, [r3, #0]
 80a3718:	4b10      	ldr	r3, [pc, #64]	; (80a375c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a371a:	681a      	ldr	r2, [r3, #0]
 80a371c:	07d2      	lsls	r2, r2, #31
 80a371e:	bf5c      	itt	pl
 80a3720:	2201      	movpl	r2, #1
 80a3722:	601a      	strpl	r2, [r3, #0]
 80a3724:	4b0e      	ldr	r3, [pc, #56]	; (80a3760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3726:	681a      	ldr	r2, [r3, #0]
 80a3728:	07d0      	lsls	r0, r2, #31
 80a372a:	bf5c      	itt	pl
 80a372c:	2201      	movpl	r2, #1
 80a372e:	601a      	strpl	r2, [r3, #0]
 80a3730:	4b0c      	ldr	r3, [pc, #48]	; (80a3764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3732:	681a      	ldr	r2, [r3, #0]
 80a3734:	07d1      	lsls	r1, r2, #31
 80a3736:	bf5c      	itt	pl
 80a3738:	2201      	movpl	r2, #1
 80a373a:	601a      	strpl	r2, [r3, #0]
 80a373c:	4b0a      	ldr	r3, [pc, #40]	; (80a3768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a373e:	681a      	ldr	r2, [r3, #0]
 80a3740:	07d2      	lsls	r2, r2, #31
 80a3742:	bf5c      	itt	pl
 80a3744:	2201      	movpl	r2, #1
 80a3746:	601a      	strpl	r2, [r3, #0]
 80a3748:	4770      	bx	lr
 80a374a:	bf00      	nop
 80a374c:	20000924 	.word	0x20000924
 80a3750:	20000920 	.word	0x20000920
 80a3754:	2000091c 	.word	0x2000091c
 80a3758:	20000918 	.word	0x20000918
 80a375c:	20000914 	.word	0x20000914
 80a3760:	20000910 	.word	0x20000910
 80a3764:	2000090c 	.word	0x2000090c
 80a3768:	20000908 	.word	0x20000908

080a376c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a376c:	4b24      	ldr	r3, [pc, #144]	; (80a3800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a376e:	681a      	ldr	r2, [r3, #0]
 80a3770:	07d0      	lsls	r0, r2, #31
 80a3772:	bf5c      	itt	pl
 80a3774:	2201      	movpl	r2, #1
 80a3776:	601a      	strpl	r2, [r3, #0]
 80a3778:	4b22      	ldr	r3, [pc, #136]	; (80a3804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a377a:	681a      	ldr	r2, [r3, #0]
 80a377c:	07d1      	lsls	r1, r2, #31
 80a377e:	bf5c      	itt	pl
 80a3780:	2201      	movpl	r2, #1
 80a3782:	601a      	strpl	r2, [r3, #0]
 80a3784:	4b20      	ldr	r3, [pc, #128]	; (80a3808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3786:	681a      	ldr	r2, [r3, #0]
 80a3788:	07d2      	lsls	r2, r2, #31
 80a378a:	bf5c      	itt	pl
 80a378c:	2201      	movpl	r2, #1
 80a378e:	601a      	strpl	r2, [r3, #0]
 80a3790:	4b1e      	ldr	r3, [pc, #120]	; (80a380c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3792:	681a      	ldr	r2, [r3, #0]
 80a3794:	07d0      	lsls	r0, r2, #31
 80a3796:	bf5c      	itt	pl
 80a3798:	2201      	movpl	r2, #1
 80a379a:	601a      	strpl	r2, [r3, #0]
 80a379c:	4b1c      	ldr	r3, [pc, #112]	; (80a3810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a379e:	681a      	ldr	r2, [r3, #0]
 80a37a0:	07d1      	lsls	r1, r2, #31
 80a37a2:	bf5c      	itt	pl
 80a37a4:	2201      	movpl	r2, #1
 80a37a6:	601a      	strpl	r2, [r3, #0]
 80a37a8:	4b1a      	ldr	r3, [pc, #104]	; (80a3814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a37aa:	681a      	ldr	r2, [r3, #0]
 80a37ac:	07d2      	lsls	r2, r2, #31
 80a37ae:	bf5c      	itt	pl
 80a37b0:	2201      	movpl	r2, #1
 80a37b2:	601a      	strpl	r2, [r3, #0]
 80a37b4:	4b18      	ldr	r3, [pc, #96]	; (80a3818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a37b6:	681a      	ldr	r2, [r3, #0]
 80a37b8:	07d0      	lsls	r0, r2, #31
 80a37ba:	bf5c      	itt	pl
 80a37bc:	2201      	movpl	r2, #1
 80a37be:	601a      	strpl	r2, [r3, #0]
 80a37c0:	4b16      	ldr	r3, [pc, #88]	; (80a381c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a37c2:	681a      	ldr	r2, [r3, #0]
 80a37c4:	07d1      	lsls	r1, r2, #31
 80a37c6:	bf5c      	itt	pl
 80a37c8:	2201      	movpl	r2, #1
 80a37ca:	601a      	strpl	r2, [r3, #0]
 80a37cc:	4b14      	ldr	r3, [pc, #80]	; (80a3820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a37ce:	681a      	ldr	r2, [r3, #0]
 80a37d0:	07d2      	lsls	r2, r2, #31
 80a37d2:	bf5c      	itt	pl
 80a37d4:	2201      	movpl	r2, #1
 80a37d6:	601a      	strpl	r2, [r3, #0]
 80a37d8:	4b12      	ldr	r3, [pc, #72]	; (80a3824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a37da:	681a      	ldr	r2, [r3, #0]
 80a37dc:	07d0      	lsls	r0, r2, #31
 80a37de:	bf5c      	itt	pl
 80a37e0:	2201      	movpl	r2, #1
 80a37e2:	601a      	strpl	r2, [r3, #0]
 80a37e4:	4b10      	ldr	r3, [pc, #64]	; (80a3828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a37e6:	681a      	ldr	r2, [r3, #0]
 80a37e8:	07d1      	lsls	r1, r2, #31
 80a37ea:	bf5c      	itt	pl
 80a37ec:	2201      	movpl	r2, #1
 80a37ee:	601a      	strpl	r2, [r3, #0]
 80a37f0:	4b0e      	ldr	r3, [pc, #56]	; (80a382c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a37f2:	681a      	ldr	r2, [r3, #0]
 80a37f4:	07d2      	lsls	r2, r2, #31
 80a37f6:	bf5c      	itt	pl
 80a37f8:	2201      	movpl	r2, #1
 80a37fa:	601a      	strpl	r2, [r3, #0]
 80a37fc:	4770      	bx	lr
 80a37fe:	bf00      	nop
 80a3800:	20000954 	.word	0x20000954
 80a3804:	20000950 	.word	0x20000950
 80a3808:	2000094c 	.word	0x2000094c
 80a380c:	20000948 	.word	0x20000948
 80a3810:	20000944 	.word	0x20000944
 80a3814:	20000940 	.word	0x20000940
 80a3818:	2000093c 	.word	0x2000093c
 80a381c:	20000938 	.word	0x20000938
 80a3820:	20000934 	.word	0x20000934
 80a3824:	20000930 	.word	0x20000930
 80a3828:	2000092c 	.word	0x2000092c
 80a382c:	20000928 	.word	0x20000928

080a3830 <__aeabi_drsub>:
 80a3830:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3834:	e002      	b.n	80a383c <__adddf3>
 80a3836:	bf00      	nop

080a3838 <__aeabi_dsub>:
 80a3838:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a383c <__adddf3>:
 80a383c:	b530      	push	{r4, r5, lr}
 80a383e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3842:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3846:	ea94 0f05 	teq	r4, r5
 80a384a:	bf08      	it	eq
 80a384c:	ea90 0f02 	teqeq	r0, r2
 80a3850:	bf1f      	itttt	ne
 80a3852:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3856:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a385a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a385e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3862:	f000 80e2 	beq.w	80a3a2a <__adddf3+0x1ee>
 80a3866:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a386a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a386e:	bfb8      	it	lt
 80a3870:	426d      	neglt	r5, r5
 80a3872:	dd0c      	ble.n	80a388e <__adddf3+0x52>
 80a3874:	442c      	add	r4, r5
 80a3876:	ea80 0202 	eor.w	r2, r0, r2
 80a387a:	ea81 0303 	eor.w	r3, r1, r3
 80a387e:	ea82 0000 	eor.w	r0, r2, r0
 80a3882:	ea83 0101 	eor.w	r1, r3, r1
 80a3886:	ea80 0202 	eor.w	r2, r0, r2
 80a388a:	ea81 0303 	eor.w	r3, r1, r3
 80a388e:	2d36      	cmp	r5, #54	; 0x36
 80a3890:	bf88      	it	hi
 80a3892:	bd30      	pophi	{r4, r5, pc}
 80a3894:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a389c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a38a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a38a4:	d002      	beq.n	80a38ac <__adddf3+0x70>
 80a38a6:	4240      	negs	r0, r0
 80a38a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a38ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a38b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a38b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a38b8:	d002      	beq.n	80a38c0 <__adddf3+0x84>
 80a38ba:	4252      	negs	r2, r2
 80a38bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a38c0:	ea94 0f05 	teq	r4, r5
 80a38c4:	f000 80a7 	beq.w	80a3a16 <__adddf3+0x1da>
 80a38c8:	f1a4 0401 	sub.w	r4, r4, #1
 80a38cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a38d0:	db0d      	blt.n	80a38ee <__adddf3+0xb2>
 80a38d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a38d6:	fa22 f205 	lsr.w	r2, r2, r5
 80a38da:	1880      	adds	r0, r0, r2
 80a38dc:	f141 0100 	adc.w	r1, r1, #0
 80a38e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a38e4:	1880      	adds	r0, r0, r2
 80a38e6:	fa43 f305 	asr.w	r3, r3, r5
 80a38ea:	4159      	adcs	r1, r3
 80a38ec:	e00e      	b.n	80a390c <__adddf3+0xd0>
 80a38ee:	f1a5 0520 	sub.w	r5, r5, #32
 80a38f2:	f10e 0e20 	add.w	lr, lr, #32
 80a38f6:	2a01      	cmp	r2, #1
 80a38f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a38fc:	bf28      	it	cs
 80a38fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3902:	fa43 f305 	asr.w	r3, r3, r5
 80a3906:	18c0      	adds	r0, r0, r3
 80a3908:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a390c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3910:	d507      	bpl.n	80a3922 <__adddf3+0xe6>
 80a3912:	f04f 0e00 	mov.w	lr, #0
 80a3916:	f1dc 0c00 	rsbs	ip, ip, #0
 80a391a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a391e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3922:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3926:	d31b      	bcc.n	80a3960 <__adddf3+0x124>
 80a3928:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a392c:	d30c      	bcc.n	80a3948 <__adddf3+0x10c>
 80a392e:	0849      	lsrs	r1, r1, #1
 80a3930:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3934:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3938:	f104 0401 	add.w	r4, r4, #1
 80a393c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3940:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3944:	f080 809a 	bcs.w	80a3a7c <__adddf3+0x240>
 80a3948:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a394c:	bf08      	it	eq
 80a394e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3952:	f150 0000 	adcs.w	r0, r0, #0
 80a3956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a395a:	ea41 0105 	orr.w	r1, r1, r5
 80a395e:	bd30      	pop	{r4, r5, pc}
 80a3960:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3964:	4140      	adcs	r0, r0
 80a3966:	eb41 0101 	adc.w	r1, r1, r1
 80a396a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a396e:	f1a4 0401 	sub.w	r4, r4, #1
 80a3972:	d1e9      	bne.n	80a3948 <__adddf3+0x10c>
 80a3974:	f091 0f00 	teq	r1, #0
 80a3978:	bf04      	itt	eq
 80a397a:	4601      	moveq	r1, r0
 80a397c:	2000      	moveq	r0, #0
 80a397e:	fab1 f381 	clz	r3, r1
 80a3982:	bf08      	it	eq
 80a3984:	3320      	addeq	r3, #32
 80a3986:	f1a3 030b 	sub.w	r3, r3, #11
 80a398a:	f1b3 0220 	subs.w	r2, r3, #32
 80a398e:	da0c      	bge.n	80a39aa <__adddf3+0x16e>
 80a3990:	320c      	adds	r2, #12
 80a3992:	dd08      	ble.n	80a39a6 <__adddf3+0x16a>
 80a3994:	f102 0c14 	add.w	ip, r2, #20
 80a3998:	f1c2 020c 	rsb	r2, r2, #12
 80a399c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a39a0:	fa21 f102 	lsr.w	r1, r1, r2
 80a39a4:	e00c      	b.n	80a39c0 <__adddf3+0x184>
 80a39a6:	f102 0214 	add.w	r2, r2, #20
 80a39aa:	bfd8      	it	le
 80a39ac:	f1c2 0c20 	rsble	ip, r2, #32
 80a39b0:	fa01 f102 	lsl.w	r1, r1, r2
 80a39b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a39b8:	bfdc      	itt	le
 80a39ba:	ea41 010c 	orrle.w	r1, r1, ip
 80a39be:	4090      	lslle	r0, r2
 80a39c0:	1ae4      	subs	r4, r4, r3
 80a39c2:	bfa2      	ittt	ge
 80a39c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a39c8:	4329      	orrge	r1, r5
 80a39ca:	bd30      	popge	{r4, r5, pc}
 80a39cc:	ea6f 0404 	mvn.w	r4, r4
 80a39d0:	3c1f      	subs	r4, #31
 80a39d2:	da1c      	bge.n	80a3a0e <__adddf3+0x1d2>
 80a39d4:	340c      	adds	r4, #12
 80a39d6:	dc0e      	bgt.n	80a39f6 <__adddf3+0x1ba>
 80a39d8:	f104 0414 	add.w	r4, r4, #20
 80a39dc:	f1c4 0220 	rsb	r2, r4, #32
 80a39e0:	fa20 f004 	lsr.w	r0, r0, r4
 80a39e4:	fa01 f302 	lsl.w	r3, r1, r2
 80a39e8:	ea40 0003 	orr.w	r0, r0, r3
 80a39ec:	fa21 f304 	lsr.w	r3, r1, r4
 80a39f0:	ea45 0103 	orr.w	r1, r5, r3
 80a39f4:	bd30      	pop	{r4, r5, pc}
 80a39f6:	f1c4 040c 	rsb	r4, r4, #12
 80a39fa:	f1c4 0220 	rsb	r2, r4, #32
 80a39fe:	fa20 f002 	lsr.w	r0, r0, r2
 80a3a02:	fa01 f304 	lsl.w	r3, r1, r4
 80a3a06:	ea40 0003 	orr.w	r0, r0, r3
 80a3a0a:	4629      	mov	r1, r5
 80a3a0c:	bd30      	pop	{r4, r5, pc}
 80a3a0e:	fa21 f004 	lsr.w	r0, r1, r4
 80a3a12:	4629      	mov	r1, r5
 80a3a14:	bd30      	pop	{r4, r5, pc}
 80a3a16:	f094 0f00 	teq	r4, #0
 80a3a1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3a1e:	bf06      	itte	eq
 80a3a20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3a24:	3401      	addeq	r4, #1
 80a3a26:	3d01      	subne	r5, #1
 80a3a28:	e74e      	b.n	80a38c8 <__adddf3+0x8c>
 80a3a2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3a2e:	bf18      	it	ne
 80a3a30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3a34:	d029      	beq.n	80a3a8a <__adddf3+0x24e>
 80a3a36:	ea94 0f05 	teq	r4, r5
 80a3a3a:	bf08      	it	eq
 80a3a3c:	ea90 0f02 	teqeq	r0, r2
 80a3a40:	d005      	beq.n	80a3a4e <__adddf3+0x212>
 80a3a42:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3a46:	bf04      	itt	eq
 80a3a48:	4619      	moveq	r1, r3
 80a3a4a:	4610      	moveq	r0, r2
 80a3a4c:	bd30      	pop	{r4, r5, pc}
 80a3a4e:	ea91 0f03 	teq	r1, r3
 80a3a52:	bf1e      	ittt	ne
 80a3a54:	2100      	movne	r1, #0
 80a3a56:	2000      	movne	r0, #0
 80a3a58:	bd30      	popne	{r4, r5, pc}
 80a3a5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3a5e:	d105      	bne.n	80a3a6c <__adddf3+0x230>
 80a3a60:	0040      	lsls	r0, r0, #1
 80a3a62:	4149      	adcs	r1, r1
 80a3a64:	bf28      	it	cs
 80a3a66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3a6a:	bd30      	pop	{r4, r5, pc}
 80a3a6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3a70:	bf3c      	itt	cc
 80a3a72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3a76:	bd30      	popcc	{r4, r5, pc}
 80a3a78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3a7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3a80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3a84:	f04f 0000 	mov.w	r0, #0
 80a3a88:	bd30      	pop	{r4, r5, pc}
 80a3a8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3a8e:	bf1a      	itte	ne
 80a3a90:	4619      	movne	r1, r3
 80a3a92:	4610      	movne	r0, r2
 80a3a94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3a98:	bf1c      	itt	ne
 80a3a9a:	460b      	movne	r3, r1
 80a3a9c:	4602      	movne	r2, r0
 80a3a9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3aa2:	bf06      	itte	eq
 80a3aa4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3aa8:	ea91 0f03 	teqeq	r1, r3
 80a3aac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3ab0:	bd30      	pop	{r4, r5, pc}
 80a3ab2:	bf00      	nop

080a3ab4 <__aeabi_ui2d>:
 80a3ab4:	f090 0f00 	teq	r0, #0
 80a3ab8:	bf04      	itt	eq
 80a3aba:	2100      	moveq	r1, #0
 80a3abc:	4770      	bxeq	lr
 80a3abe:	b530      	push	{r4, r5, lr}
 80a3ac0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3ac4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3ac8:	f04f 0500 	mov.w	r5, #0
 80a3acc:	f04f 0100 	mov.w	r1, #0
 80a3ad0:	e750      	b.n	80a3974 <__adddf3+0x138>
 80a3ad2:	bf00      	nop

080a3ad4 <__aeabi_i2d>:
 80a3ad4:	f090 0f00 	teq	r0, #0
 80a3ad8:	bf04      	itt	eq
 80a3ada:	2100      	moveq	r1, #0
 80a3adc:	4770      	bxeq	lr
 80a3ade:	b530      	push	{r4, r5, lr}
 80a3ae0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3ae4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3ae8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3aec:	bf48      	it	mi
 80a3aee:	4240      	negmi	r0, r0
 80a3af0:	f04f 0100 	mov.w	r1, #0
 80a3af4:	e73e      	b.n	80a3974 <__adddf3+0x138>
 80a3af6:	bf00      	nop

080a3af8 <__aeabi_f2d>:
 80a3af8:	0042      	lsls	r2, r0, #1
 80a3afa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3afe:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3b02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3b06:	bf1f      	itttt	ne
 80a3b08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3b0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3b10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3b14:	4770      	bxne	lr
 80a3b16:	f092 0f00 	teq	r2, #0
 80a3b1a:	bf14      	ite	ne
 80a3b1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3b20:	4770      	bxeq	lr
 80a3b22:	b530      	push	{r4, r5, lr}
 80a3b24:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3b30:	e720      	b.n	80a3974 <__adddf3+0x138>
 80a3b32:	bf00      	nop

080a3b34 <__aeabi_ul2d>:
 80a3b34:	ea50 0201 	orrs.w	r2, r0, r1
 80a3b38:	bf08      	it	eq
 80a3b3a:	4770      	bxeq	lr
 80a3b3c:	b530      	push	{r4, r5, lr}
 80a3b3e:	f04f 0500 	mov.w	r5, #0
 80a3b42:	e00a      	b.n	80a3b5a <__aeabi_l2d+0x16>

080a3b44 <__aeabi_l2d>:
 80a3b44:	ea50 0201 	orrs.w	r2, r0, r1
 80a3b48:	bf08      	it	eq
 80a3b4a:	4770      	bxeq	lr
 80a3b4c:	b530      	push	{r4, r5, lr}
 80a3b4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3b52:	d502      	bpl.n	80a3b5a <__aeabi_l2d+0x16>
 80a3b54:	4240      	negs	r0, r0
 80a3b56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3b5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3b5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3b62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3b66:	f43f aedc 	beq.w	80a3922 <__adddf3+0xe6>
 80a3b6a:	f04f 0203 	mov.w	r2, #3
 80a3b6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3b72:	bf18      	it	ne
 80a3b74:	3203      	addne	r2, #3
 80a3b76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3b7a:	bf18      	it	ne
 80a3b7c:	3203      	addne	r2, #3
 80a3b7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3b82:	f1c2 0320 	rsb	r3, r2, #32
 80a3b86:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3b8a:	fa20 f002 	lsr.w	r0, r0, r2
 80a3b8e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3b92:	ea40 000e 	orr.w	r0, r0, lr
 80a3b96:	fa21 f102 	lsr.w	r1, r1, r2
 80a3b9a:	4414      	add	r4, r2
 80a3b9c:	e6c1      	b.n	80a3922 <__adddf3+0xe6>
 80a3b9e:	bf00      	nop

080a3ba0 <__aeabi_dmul>:
 80a3ba0:	b570      	push	{r4, r5, r6, lr}
 80a3ba2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3ba6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3baa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3bae:	bf1d      	ittte	ne
 80a3bb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3bb4:	ea94 0f0c 	teqne	r4, ip
 80a3bb8:	ea95 0f0c 	teqne	r5, ip
 80a3bbc:	f000 f8de 	bleq	80a3d7c <__aeabi_dmul+0x1dc>
 80a3bc0:	442c      	add	r4, r5
 80a3bc2:	ea81 0603 	eor.w	r6, r1, r3
 80a3bc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3bca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3bce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3bd2:	bf18      	it	ne
 80a3bd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3be0:	d038      	beq.n	80a3c54 <__aeabi_dmul+0xb4>
 80a3be2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3be6:	f04f 0500 	mov.w	r5, #0
 80a3bea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3bee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3bf2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3bf6:	f04f 0600 	mov.w	r6, #0
 80a3bfa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3bfe:	f09c 0f00 	teq	ip, #0
 80a3c02:	bf18      	it	ne
 80a3c04:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3c08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3c0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3c10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3c14:	d204      	bcs.n	80a3c20 <__aeabi_dmul+0x80>
 80a3c16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3c1a:	416d      	adcs	r5, r5
 80a3c1c:	eb46 0606 	adc.w	r6, r6, r6
 80a3c20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3c24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3c28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3c2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3c30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3c34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3c38:	bf88      	it	hi
 80a3c3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3c3e:	d81e      	bhi.n	80a3c7e <__aeabi_dmul+0xde>
 80a3c40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3c44:	bf08      	it	eq
 80a3c46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3c4a:	f150 0000 	adcs.w	r0, r0, #0
 80a3c4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3c52:	bd70      	pop	{r4, r5, r6, pc}
 80a3c54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3c58:	ea46 0101 	orr.w	r1, r6, r1
 80a3c5c:	ea40 0002 	orr.w	r0, r0, r2
 80a3c60:	ea81 0103 	eor.w	r1, r1, r3
 80a3c64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3c68:	bfc2      	ittt	gt
 80a3c6a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3c6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3c72:	bd70      	popgt	{r4, r5, r6, pc}
 80a3c74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3c78:	f04f 0e00 	mov.w	lr, #0
 80a3c7c:	3c01      	subs	r4, #1
 80a3c7e:	f300 80ab 	bgt.w	80a3dd8 <__aeabi_dmul+0x238>
 80a3c82:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3c86:	bfde      	ittt	le
 80a3c88:	2000      	movle	r0, #0
 80a3c8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3c8e:	bd70      	pople	{r4, r5, r6, pc}
 80a3c90:	f1c4 0400 	rsb	r4, r4, #0
 80a3c94:	3c20      	subs	r4, #32
 80a3c96:	da35      	bge.n	80a3d04 <__aeabi_dmul+0x164>
 80a3c98:	340c      	adds	r4, #12
 80a3c9a:	dc1b      	bgt.n	80a3cd4 <__aeabi_dmul+0x134>
 80a3c9c:	f104 0414 	add.w	r4, r4, #20
 80a3ca0:	f1c4 0520 	rsb	r5, r4, #32
 80a3ca4:	fa00 f305 	lsl.w	r3, r0, r5
 80a3ca8:	fa20 f004 	lsr.w	r0, r0, r4
 80a3cac:	fa01 f205 	lsl.w	r2, r1, r5
 80a3cb0:	ea40 0002 	orr.w	r0, r0, r2
 80a3cb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3cb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3cbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3cc0:	fa21 f604 	lsr.w	r6, r1, r4
 80a3cc4:	eb42 0106 	adc.w	r1, r2, r6
 80a3cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3ccc:	bf08      	it	eq
 80a3cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3cd2:	bd70      	pop	{r4, r5, r6, pc}
 80a3cd4:	f1c4 040c 	rsb	r4, r4, #12
 80a3cd8:	f1c4 0520 	rsb	r5, r4, #32
 80a3cdc:	fa00 f304 	lsl.w	r3, r0, r4
 80a3ce0:	fa20 f005 	lsr.w	r0, r0, r5
 80a3ce4:	fa01 f204 	lsl.w	r2, r1, r4
 80a3ce8:	ea40 0002 	orr.w	r0, r0, r2
 80a3cec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3cf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3cf4:	f141 0100 	adc.w	r1, r1, #0
 80a3cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3cfc:	bf08      	it	eq
 80a3cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3d02:	bd70      	pop	{r4, r5, r6, pc}
 80a3d04:	f1c4 0520 	rsb	r5, r4, #32
 80a3d08:	fa00 f205 	lsl.w	r2, r0, r5
 80a3d0c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3d10:	fa20 f304 	lsr.w	r3, r0, r4
 80a3d14:	fa01 f205 	lsl.w	r2, r1, r5
 80a3d18:	ea43 0302 	orr.w	r3, r3, r2
 80a3d1c:	fa21 f004 	lsr.w	r0, r1, r4
 80a3d20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3d24:	fa21 f204 	lsr.w	r2, r1, r4
 80a3d28:	ea20 0002 	bic.w	r0, r0, r2
 80a3d2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3d30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3d34:	bf08      	it	eq
 80a3d36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3d3a:	bd70      	pop	{r4, r5, r6, pc}
 80a3d3c:	f094 0f00 	teq	r4, #0
 80a3d40:	d10f      	bne.n	80a3d62 <__aeabi_dmul+0x1c2>
 80a3d42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3d46:	0040      	lsls	r0, r0, #1
 80a3d48:	eb41 0101 	adc.w	r1, r1, r1
 80a3d4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3d50:	bf08      	it	eq
 80a3d52:	3c01      	subeq	r4, #1
 80a3d54:	d0f7      	beq.n	80a3d46 <__aeabi_dmul+0x1a6>
 80a3d56:	ea41 0106 	orr.w	r1, r1, r6
 80a3d5a:	f095 0f00 	teq	r5, #0
 80a3d5e:	bf18      	it	ne
 80a3d60:	4770      	bxne	lr
 80a3d62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3d66:	0052      	lsls	r2, r2, #1
 80a3d68:	eb43 0303 	adc.w	r3, r3, r3
 80a3d6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3d70:	bf08      	it	eq
 80a3d72:	3d01      	subeq	r5, #1
 80a3d74:	d0f7      	beq.n	80a3d66 <__aeabi_dmul+0x1c6>
 80a3d76:	ea43 0306 	orr.w	r3, r3, r6
 80a3d7a:	4770      	bx	lr
 80a3d7c:	ea94 0f0c 	teq	r4, ip
 80a3d80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3d84:	bf18      	it	ne
 80a3d86:	ea95 0f0c 	teqne	r5, ip
 80a3d8a:	d00c      	beq.n	80a3da6 <__aeabi_dmul+0x206>
 80a3d8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3d90:	bf18      	it	ne
 80a3d92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3d96:	d1d1      	bne.n	80a3d3c <__aeabi_dmul+0x19c>
 80a3d98:	ea81 0103 	eor.w	r1, r1, r3
 80a3d9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3da0:	f04f 0000 	mov.w	r0, #0
 80a3da4:	bd70      	pop	{r4, r5, r6, pc}
 80a3da6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3daa:	bf06      	itte	eq
 80a3dac:	4610      	moveq	r0, r2
 80a3dae:	4619      	moveq	r1, r3
 80a3db0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3db4:	d019      	beq.n	80a3dea <__aeabi_dmul+0x24a>
 80a3db6:	ea94 0f0c 	teq	r4, ip
 80a3dba:	d102      	bne.n	80a3dc2 <__aeabi_dmul+0x222>
 80a3dbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3dc0:	d113      	bne.n	80a3dea <__aeabi_dmul+0x24a>
 80a3dc2:	ea95 0f0c 	teq	r5, ip
 80a3dc6:	d105      	bne.n	80a3dd4 <__aeabi_dmul+0x234>
 80a3dc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3dcc:	bf1c      	itt	ne
 80a3dce:	4610      	movne	r0, r2
 80a3dd0:	4619      	movne	r1, r3
 80a3dd2:	d10a      	bne.n	80a3dea <__aeabi_dmul+0x24a>
 80a3dd4:	ea81 0103 	eor.w	r1, r1, r3
 80a3dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3ddc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3de0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3de4:	f04f 0000 	mov.w	r0, #0
 80a3de8:	bd70      	pop	{r4, r5, r6, pc}
 80a3dea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3dee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3df2:	bd70      	pop	{r4, r5, r6, pc}

080a3df4 <__aeabi_ddiv>:
 80a3df4:	b570      	push	{r4, r5, r6, lr}
 80a3df6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3dfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3dfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3e02:	bf1d      	ittte	ne
 80a3e04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3e08:	ea94 0f0c 	teqne	r4, ip
 80a3e0c:	ea95 0f0c 	teqne	r5, ip
 80a3e10:	f000 f8a7 	bleq	80a3f62 <__aeabi_ddiv+0x16e>
 80a3e14:	eba4 0405 	sub.w	r4, r4, r5
 80a3e18:	ea81 0e03 	eor.w	lr, r1, r3
 80a3e1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3e20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3e24:	f000 8088 	beq.w	80a3f38 <__aeabi_ddiv+0x144>
 80a3e28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3e2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3e30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3e34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3e38:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3e3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3e40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3e44:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3e48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3e4c:	429d      	cmp	r5, r3
 80a3e4e:	bf08      	it	eq
 80a3e50:	4296      	cmpeq	r6, r2
 80a3e52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3e56:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3e5a:	d202      	bcs.n	80a3e62 <__aeabi_ddiv+0x6e>
 80a3e5c:	085b      	lsrs	r3, r3, #1
 80a3e5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3e62:	1ab6      	subs	r6, r6, r2
 80a3e64:	eb65 0503 	sbc.w	r5, r5, r3
 80a3e68:	085b      	lsrs	r3, r3, #1
 80a3e6a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3e6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3e72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3e76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3e7e:	bf22      	ittt	cs
 80a3e80:	1ab6      	subcs	r6, r6, r2
 80a3e82:	4675      	movcs	r5, lr
 80a3e84:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3e88:	085b      	lsrs	r3, r3, #1
 80a3e8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3e8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3e92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3e96:	bf22      	ittt	cs
 80a3e98:	1ab6      	subcs	r6, r6, r2
 80a3e9a:	4675      	movcs	r5, lr
 80a3e9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3ea0:	085b      	lsrs	r3, r3, #1
 80a3ea2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3ea6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3eae:	bf22      	ittt	cs
 80a3eb0:	1ab6      	subcs	r6, r6, r2
 80a3eb2:	4675      	movcs	r5, lr
 80a3eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3eb8:	085b      	lsrs	r3, r3, #1
 80a3eba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3ebe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3ec6:	bf22      	ittt	cs
 80a3ec8:	1ab6      	subcs	r6, r6, r2
 80a3eca:	4675      	movcs	r5, lr
 80a3ecc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3ed0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3ed4:	d018      	beq.n	80a3f08 <__aeabi_ddiv+0x114>
 80a3ed6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3eda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3ede:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3ee2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3ee6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3eea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3eee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3ef2:	d1c0      	bne.n	80a3e76 <__aeabi_ddiv+0x82>
 80a3ef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3ef8:	d10b      	bne.n	80a3f12 <__aeabi_ddiv+0x11e>
 80a3efa:	ea41 0100 	orr.w	r1, r1, r0
 80a3efe:	f04f 0000 	mov.w	r0, #0
 80a3f02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3f06:	e7b6      	b.n	80a3e76 <__aeabi_ddiv+0x82>
 80a3f08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3f0c:	bf04      	itt	eq
 80a3f0e:	4301      	orreq	r1, r0
 80a3f10:	2000      	moveq	r0, #0
 80a3f12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3f16:	bf88      	it	hi
 80a3f18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3f1c:	f63f aeaf 	bhi.w	80a3c7e <__aeabi_dmul+0xde>
 80a3f20:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3f24:	bf04      	itt	eq
 80a3f26:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3f2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3f2e:	f150 0000 	adcs.w	r0, r0, #0
 80a3f32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3f36:	bd70      	pop	{r4, r5, r6, pc}
 80a3f38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3f3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3f40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3f44:	bfc2      	ittt	gt
 80a3f46:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3f4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3f4e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3f50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3f54:	f04f 0e00 	mov.w	lr, #0
 80a3f58:	3c01      	subs	r4, #1
 80a3f5a:	e690      	b.n	80a3c7e <__aeabi_dmul+0xde>
 80a3f5c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3f60:	e68d      	b.n	80a3c7e <__aeabi_dmul+0xde>
 80a3f62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3f66:	ea94 0f0c 	teq	r4, ip
 80a3f6a:	bf08      	it	eq
 80a3f6c:	ea95 0f0c 	teqeq	r5, ip
 80a3f70:	f43f af3b 	beq.w	80a3dea <__aeabi_dmul+0x24a>
 80a3f74:	ea94 0f0c 	teq	r4, ip
 80a3f78:	d10a      	bne.n	80a3f90 <__aeabi_ddiv+0x19c>
 80a3f7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3f7e:	f47f af34 	bne.w	80a3dea <__aeabi_dmul+0x24a>
 80a3f82:	ea95 0f0c 	teq	r5, ip
 80a3f86:	f47f af25 	bne.w	80a3dd4 <__aeabi_dmul+0x234>
 80a3f8a:	4610      	mov	r0, r2
 80a3f8c:	4619      	mov	r1, r3
 80a3f8e:	e72c      	b.n	80a3dea <__aeabi_dmul+0x24a>
 80a3f90:	ea95 0f0c 	teq	r5, ip
 80a3f94:	d106      	bne.n	80a3fa4 <__aeabi_ddiv+0x1b0>
 80a3f96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3f9a:	f43f aefd 	beq.w	80a3d98 <__aeabi_dmul+0x1f8>
 80a3f9e:	4610      	mov	r0, r2
 80a3fa0:	4619      	mov	r1, r3
 80a3fa2:	e722      	b.n	80a3dea <__aeabi_dmul+0x24a>
 80a3fa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3fa8:	bf18      	it	ne
 80a3faa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3fae:	f47f aec5 	bne.w	80a3d3c <__aeabi_dmul+0x19c>
 80a3fb2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3fb6:	f47f af0d 	bne.w	80a3dd4 <__aeabi_dmul+0x234>
 80a3fba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3fbe:	f47f aeeb 	bne.w	80a3d98 <__aeabi_dmul+0x1f8>
 80a3fc2:	e712      	b.n	80a3dea <__aeabi_dmul+0x24a>

080a3fc4 <__gedf2>:
 80a3fc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3fc8:	e006      	b.n	80a3fd8 <__cmpdf2+0x4>
 80a3fca:	bf00      	nop

080a3fcc <__ledf2>:
 80a3fcc:	f04f 0c01 	mov.w	ip, #1
 80a3fd0:	e002      	b.n	80a3fd8 <__cmpdf2+0x4>
 80a3fd2:	bf00      	nop

080a3fd4 <__cmpdf2>:
 80a3fd4:	f04f 0c01 	mov.w	ip, #1
 80a3fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3fdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3fe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3fe8:	bf18      	it	ne
 80a3fea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3fee:	d01b      	beq.n	80a4028 <__cmpdf2+0x54>
 80a3ff0:	b001      	add	sp, #4
 80a3ff2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3ff6:	bf0c      	ite	eq
 80a3ff8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3ffc:	ea91 0f03 	teqne	r1, r3
 80a4000:	bf02      	ittt	eq
 80a4002:	ea90 0f02 	teqeq	r0, r2
 80a4006:	2000      	moveq	r0, #0
 80a4008:	4770      	bxeq	lr
 80a400a:	f110 0f00 	cmn.w	r0, #0
 80a400e:	ea91 0f03 	teq	r1, r3
 80a4012:	bf58      	it	pl
 80a4014:	4299      	cmppl	r1, r3
 80a4016:	bf08      	it	eq
 80a4018:	4290      	cmpeq	r0, r2
 80a401a:	bf2c      	ite	cs
 80a401c:	17d8      	asrcs	r0, r3, #31
 80a401e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4022:	f040 0001 	orr.w	r0, r0, #1
 80a4026:	4770      	bx	lr
 80a4028:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a402c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4030:	d102      	bne.n	80a4038 <__cmpdf2+0x64>
 80a4032:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4036:	d107      	bne.n	80a4048 <__cmpdf2+0x74>
 80a4038:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a403c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4040:	d1d6      	bne.n	80a3ff0 <__cmpdf2+0x1c>
 80a4042:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4046:	d0d3      	beq.n	80a3ff0 <__cmpdf2+0x1c>
 80a4048:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a404c:	4770      	bx	lr
 80a404e:	bf00      	nop

080a4050 <__aeabi_cdrcmple>:
 80a4050:	4684      	mov	ip, r0
 80a4052:	4610      	mov	r0, r2
 80a4054:	4662      	mov	r2, ip
 80a4056:	468c      	mov	ip, r1
 80a4058:	4619      	mov	r1, r3
 80a405a:	4663      	mov	r3, ip
 80a405c:	e000      	b.n	80a4060 <__aeabi_cdcmpeq>
 80a405e:	bf00      	nop

080a4060 <__aeabi_cdcmpeq>:
 80a4060:	b501      	push	{r0, lr}
 80a4062:	f7ff ffb7 	bl	80a3fd4 <__cmpdf2>
 80a4066:	2800      	cmp	r0, #0
 80a4068:	bf48      	it	mi
 80a406a:	f110 0f00 	cmnmi.w	r0, #0
 80a406e:	bd01      	pop	{r0, pc}

080a4070 <__aeabi_dcmpeq>:
 80a4070:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4074:	f7ff fff4 	bl	80a4060 <__aeabi_cdcmpeq>
 80a4078:	bf0c      	ite	eq
 80a407a:	2001      	moveq	r0, #1
 80a407c:	2000      	movne	r0, #0
 80a407e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4082:	bf00      	nop

080a4084 <__aeabi_dcmplt>:
 80a4084:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4088:	f7ff ffea 	bl	80a4060 <__aeabi_cdcmpeq>
 80a408c:	bf34      	ite	cc
 80a408e:	2001      	movcc	r0, #1
 80a4090:	2000      	movcs	r0, #0
 80a4092:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4096:	bf00      	nop

080a4098 <__aeabi_dcmple>:
 80a4098:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a409c:	f7ff ffe0 	bl	80a4060 <__aeabi_cdcmpeq>
 80a40a0:	bf94      	ite	ls
 80a40a2:	2001      	movls	r0, #1
 80a40a4:	2000      	movhi	r0, #0
 80a40a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a40aa:	bf00      	nop

080a40ac <__aeabi_dcmpge>:
 80a40ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a40b0:	f7ff ffce 	bl	80a4050 <__aeabi_cdrcmple>
 80a40b4:	bf94      	ite	ls
 80a40b6:	2001      	movls	r0, #1
 80a40b8:	2000      	movhi	r0, #0
 80a40ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a40be:	bf00      	nop

080a40c0 <__aeabi_dcmpgt>:
 80a40c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a40c4:	f7ff ffc4 	bl	80a4050 <__aeabi_cdrcmple>
 80a40c8:	bf34      	ite	cc
 80a40ca:	2001      	movcc	r0, #1
 80a40cc:	2000      	movcs	r0, #0
 80a40ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a40d2:	bf00      	nop

080a40d4 <__aeabi_d2iz>:
 80a40d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a40d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a40dc:	d215      	bcs.n	80a410a <__aeabi_d2iz+0x36>
 80a40de:	d511      	bpl.n	80a4104 <__aeabi_d2iz+0x30>
 80a40e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a40e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a40e8:	d912      	bls.n	80a4110 <__aeabi_d2iz+0x3c>
 80a40ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a40ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a40f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a40f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a40fa:	fa23 f002 	lsr.w	r0, r3, r2
 80a40fe:	bf18      	it	ne
 80a4100:	4240      	negne	r0, r0
 80a4102:	4770      	bx	lr
 80a4104:	f04f 0000 	mov.w	r0, #0
 80a4108:	4770      	bx	lr
 80a410a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a410e:	d105      	bne.n	80a411c <__aeabi_d2iz+0x48>
 80a4110:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4114:	bf08      	it	eq
 80a4116:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a411a:	4770      	bx	lr
 80a411c:	f04f 0000 	mov.w	r0, #0
 80a4120:	4770      	bx	lr
 80a4122:	bf00      	nop

080a4124 <__aeabi_d2uiz>:
 80a4124:	004a      	lsls	r2, r1, #1
 80a4126:	d211      	bcs.n	80a414c <__aeabi_d2uiz+0x28>
 80a4128:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a412c:	d211      	bcs.n	80a4152 <__aeabi_d2uiz+0x2e>
 80a412e:	d50d      	bpl.n	80a414c <__aeabi_d2uiz+0x28>
 80a4130:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4134:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4138:	d40e      	bmi.n	80a4158 <__aeabi_d2uiz+0x34>
 80a413a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a413e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4142:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4146:	fa23 f002 	lsr.w	r0, r3, r2
 80a414a:	4770      	bx	lr
 80a414c:	f04f 0000 	mov.w	r0, #0
 80a4150:	4770      	bx	lr
 80a4152:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4156:	d102      	bne.n	80a415e <__aeabi_d2uiz+0x3a>
 80a4158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a415c:	4770      	bx	lr
 80a415e:	f04f 0000 	mov.w	r0, #0
 80a4162:	4770      	bx	lr

080a4164 <__aeabi_d2f>:
 80a4164:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4168:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a416c:	bf24      	itt	cs
 80a416e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4172:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4176:	d90d      	bls.n	80a4194 <__aeabi_d2f+0x30>
 80a4178:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a417c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4180:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4184:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4188:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a418c:	bf08      	it	eq
 80a418e:	f020 0001 	biceq.w	r0, r0, #1
 80a4192:	4770      	bx	lr
 80a4194:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4198:	d121      	bne.n	80a41de <__aeabi_d2f+0x7a>
 80a419a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a419e:	bfbc      	itt	lt
 80a41a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a41a4:	4770      	bxlt	lr
 80a41a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a41aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a41ae:	f1c2 0218 	rsb	r2, r2, #24
 80a41b2:	f1c2 0c20 	rsb	ip, r2, #32
 80a41b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a41ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a41be:	bf18      	it	ne
 80a41c0:	f040 0001 	orrne.w	r0, r0, #1
 80a41c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a41c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a41cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a41d0:	ea40 000c 	orr.w	r0, r0, ip
 80a41d4:	fa23 f302 	lsr.w	r3, r3, r2
 80a41d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a41dc:	e7cc      	b.n	80a4178 <__aeabi_d2f+0x14>
 80a41de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a41e2:	d107      	bne.n	80a41f4 <__aeabi_d2f+0x90>
 80a41e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a41e8:	bf1e      	ittt	ne
 80a41ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a41ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a41f2:	4770      	bxne	lr
 80a41f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a41f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a41fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4200:	4770      	bx	lr
 80a4202:	bf00      	nop

080a4204 <__aeabi_frsub>:
 80a4204:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4208:	e002      	b.n	80a4210 <__addsf3>
 80a420a:	bf00      	nop

080a420c <__aeabi_fsub>:
 80a420c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4210 <__addsf3>:
 80a4210:	0042      	lsls	r2, r0, #1
 80a4212:	bf1f      	itttt	ne
 80a4214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4218:	ea92 0f03 	teqne	r2, r3
 80a421c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4224:	d06a      	beq.n	80a42fc <__addsf3+0xec>
 80a4226:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a422a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a422e:	bfc1      	itttt	gt
 80a4230:	18d2      	addgt	r2, r2, r3
 80a4232:	4041      	eorgt	r1, r0
 80a4234:	4048      	eorgt	r0, r1
 80a4236:	4041      	eorgt	r1, r0
 80a4238:	bfb8      	it	lt
 80a423a:	425b      	neglt	r3, r3
 80a423c:	2b19      	cmp	r3, #25
 80a423e:	bf88      	it	hi
 80a4240:	4770      	bxhi	lr
 80a4242:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a424a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a424e:	bf18      	it	ne
 80a4250:	4240      	negne	r0, r0
 80a4252:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4256:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a425a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a425e:	bf18      	it	ne
 80a4260:	4249      	negne	r1, r1
 80a4262:	ea92 0f03 	teq	r2, r3
 80a4266:	d03f      	beq.n	80a42e8 <__addsf3+0xd8>
 80a4268:	f1a2 0201 	sub.w	r2, r2, #1
 80a426c:	fa41 fc03 	asr.w	ip, r1, r3
 80a4270:	eb10 000c 	adds.w	r0, r0, ip
 80a4274:	f1c3 0320 	rsb	r3, r3, #32
 80a4278:	fa01 f103 	lsl.w	r1, r1, r3
 80a427c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4280:	d502      	bpl.n	80a4288 <__addsf3+0x78>
 80a4282:	4249      	negs	r1, r1
 80a4284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a428c:	d313      	bcc.n	80a42b6 <__addsf3+0xa6>
 80a428e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4292:	d306      	bcc.n	80a42a2 <__addsf3+0x92>
 80a4294:	0840      	lsrs	r0, r0, #1
 80a4296:	ea4f 0131 	mov.w	r1, r1, rrx
 80a429a:	f102 0201 	add.w	r2, r2, #1
 80a429e:	2afe      	cmp	r2, #254	; 0xfe
 80a42a0:	d251      	bcs.n	80a4346 <__addsf3+0x136>
 80a42a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a42a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a42aa:	bf08      	it	eq
 80a42ac:	f020 0001 	biceq.w	r0, r0, #1
 80a42b0:	ea40 0003 	orr.w	r0, r0, r3
 80a42b4:	4770      	bx	lr
 80a42b6:	0049      	lsls	r1, r1, #1
 80a42b8:	eb40 0000 	adc.w	r0, r0, r0
 80a42bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a42c0:	f1a2 0201 	sub.w	r2, r2, #1
 80a42c4:	d1ed      	bne.n	80a42a2 <__addsf3+0x92>
 80a42c6:	fab0 fc80 	clz	ip, r0
 80a42ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80a42ce:	ebb2 020c 	subs.w	r2, r2, ip
 80a42d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a42d6:	bfaa      	itet	ge
 80a42d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a42dc:	4252      	neglt	r2, r2
 80a42de:	4318      	orrge	r0, r3
 80a42e0:	bfbc      	itt	lt
 80a42e2:	40d0      	lsrlt	r0, r2
 80a42e4:	4318      	orrlt	r0, r3
 80a42e6:	4770      	bx	lr
 80a42e8:	f092 0f00 	teq	r2, #0
 80a42ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a42f0:	bf06      	itte	eq
 80a42f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a42f6:	3201      	addeq	r2, #1
 80a42f8:	3b01      	subne	r3, #1
 80a42fa:	e7b5      	b.n	80a4268 <__addsf3+0x58>
 80a42fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4304:	bf18      	it	ne
 80a4306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a430a:	d021      	beq.n	80a4350 <__addsf3+0x140>
 80a430c:	ea92 0f03 	teq	r2, r3
 80a4310:	d004      	beq.n	80a431c <__addsf3+0x10c>
 80a4312:	f092 0f00 	teq	r2, #0
 80a4316:	bf08      	it	eq
 80a4318:	4608      	moveq	r0, r1
 80a431a:	4770      	bx	lr
 80a431c:	ea90 0f01 	teq	r0, r1
 80a4320:	bf1c      	itt	ne
 80a4322:	2000      	movne	r0, #0
 80a4324:	4770      	bxne	lr
 80a4326:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a432a:	d104      	bne.n	80a4336 <__addsf3+0x126>
 80a432c:	0040      	lsls	r0, r0, #1
 80a432e:	bf28      	it	cs
 80a4330:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4334:	4770      	bx	lr
 80a4336:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a433a:	bf3c      	itt	cc
 80a433c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4340:	4770      	bxcc	lr
 80a4342:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4346:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a434a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a434e:	4770      	bx	lr
 80a4350:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4354:	bf16      	itet	ne
 80a4356:	4608      	movne	r0, r1
 80a4358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a435c:	4601      	movne	r1, r0
 80a435e:	0242      	lsls	r2, r0, #9
 80a4360:	bf06      	itte	eq
 80a4362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4366:	ea90 0f01 	teqeq	r0, r1
 80a436a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a436e:	4770      	bx	lr

080a4370 <__aeabi_ui2f>:
 80a4370:	f04f 0300 	mov.w	r3, #0
 80a4374:	e004      	b.n	80a4380 <__aeabi_i2f+0x8>
 80a4376:	bf00      	nop

080a4378 <__aeabi_i2f>:
 80a4378:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a437c:	bf48      	it	mi
 80a437e:	4240      	negmi	r0, r0
 80a4380:	ea5f 0c00 	movs.w	ip, r0
 80a4384:	bf08      	it	eq
 80a4386:	4770      	bxeq	lr
 80a4388:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a438c:	4601      	mov	r1, r0
 80a438e:	f04f 0000 	mov.w	r0, #0
 80a4392:	e01c      	b.n	80a43ce <__aeabi_l2f+0x2a>

080a4394 <__aeabi_ul2f>:
 80a4394:	ea50 0201 	orrs.w	r2, r0, r1
 80a4398:	bf08      	it	eq
 80a439a:	4770      	bxeq	lr
 80a439c:	f04f 0300 	mov.w	r3, #0
 80a43a0:	e00a      	b.n	80a43b8 <__aeabi_l2f+0x14>
 80a43a2:	bf00      	nop

080a43a4 <__aeabi_l2f>:
 80a43a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a43a8:	bf08      	it	eq
 80a43aa:	4770      	bxeq	lr
 80a43ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a43b0:	d502      	bpl.n	80a43b8 <__aeabi_l2f+0x14>
 80a43b2:	4240      	negs	r0, r0
 80a43b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a43b8:	ea5f 0c01 	movs.w	ip, r1
 80a43bc:	bf02      	ittt	eq
 80a43be:	4684      	moveq	ip, r0
 80a43c0:	4601      	moveq	r1, r0
 80a43c2:	2000      	moveq	r0, #0
 80a43c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a43c8:	bf08      	it	eq
 80a43ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a43ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a43d2:	fabc f28c 	clz	r2, ip
 80a43d6:	3a08      	subs	r2, #8
 80a43d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a43dc:	db10      	blt.n	80a4400 <__aeabi_l2f+0x5c>
 80a43de:	fa01 fc02 	lsl.w	ip, r1, r2
 80a43e2:	4463      	add	r3, ip
 80a43e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a43e8:	f1c2 0220 	rsb	r2, r2, #32
 80a43ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a43f0:	fa20 f202 	lsr.w	r2, r0, r2
 80a43f4:	eb43 0002 	adc.w	r0, r3, r2
 80a43f8:	bf08      	it	eq
 80a43fa:	f020 0001 	biceq.w	r0, r0, #1
 80a43fe:	4770      	bx	lr
 80a4400:	f102 0220 	add.w	r2, r2, #32
 80a4404:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4408:	f1c2 0220 	rsb	r2, r2, #32
 80a440c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4410:	fa21 f202 	lsr.w	r2, r1, r2
 80a4414:	eb43 0002 	adc.w	r0, r3, r2
 80a4418:	bf08      	it	eq
 80a441a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a441e:	4770      	bx	lr

080a4420 <__gesf2>:
 80a4420:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4424:	e006      	b.n	80a4434 <__cmpsf2+0x4>
 80a4426:	bf00      	nop

080a4428 <__lesf2>:
 80a4428:	f04f 0c01 	mov.w	ip, #1
 80a442c:	e002      	b.n	80a4434 <__cmpsf2+0x4>
 80a442e:	bf00      	nop

080a4430 <__cmpsf2>:
 80a4430:	f04f 0c01 	mov.w	ip, #1
 80a4434:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4438:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a443c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4440:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4444:	bf18      	it	ne
 80a4446:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a444a:	d011      	beq.n	80a4470 <__cmpsf2+0x40>
 80a444c:	b001      	add	sp, #4
 80a444e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4452:	bf18      	it	ne
 80a4454:	ea90 0f01 	teqne	r0, r1
 80a4458:	bf58      	it	pl
 80a445a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a445e:	bf88      	it	hi
 80a4460:	17c8      	asrhi	r0, r1, #31
 80a4462:	bf38      	it	cc
 80a4464:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4468:	bf18      	it	ne
 80a446a:	f040 0001 	orrne.w	r0, r0, #1
 80a446e:	4770      	bx	lr
 80a4470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4474:	d102      	bne.n	80a447c <__cmpsf2+0x4c>
 80a4476:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a447a:	d105      	bne.n	80a4488 <__cmpsf2+0x58>
 80a447c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4480:	d1e4      	bne.n	80a444c <__cmpsf2+0x1c>
 80a4482:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4486:	d0e1      	beq.n	80a444c <__cmpsf2+0x1c>
 80a4488:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a448c:	4770      	bx	lr
 80a448e:	bf00      	nop

080a4490 <__aeabi_cfrcmple>:
 80a4490:	4684      	mov	ip, r0
 80a4492:	4608      	mov	r0, r1
 80a4494:	4661      	mov	r1, ip
 80a4496:	e7ff      	b.n	80a4498 <__aeabi_cfcmpeq>

080a4498 <__aeabi_cfcmpeq>:
 80a4498:	b50f      	push	{r0, r1, r2, r3, lr}
 80a449a:	f7ff ffc9 	bl	80a4430 <__cmpsf2>
 80a449e:	2800      	cmp	r0, #0
 80a44a0:	bf48      	it	mi
 80a44a2:	f110 0f00 	cmnmi.w	r0, #0
 80a44a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a44a8 <__aeabi_fcmpeq>:
 80a44a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44ac:	f7ff fff4 	bl	80a4498 <__aeabi_cfcmpeq>
 80a44b0:	bf0c      	ite	eq
 80a44b2:	2001      	moveq	r0, #1
 80a44b4:	2000      	movne	r0, #0
 80a44b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44ba:	bf00      	nop

080a44bc <__aeabi_fcmplt>:
 80a44bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44c0:	f7ff ffea 	bl	80a4498 <__aeabi_cfcmpeq>
 80a44c4:	bf34      	ite	cc
 80a44c6:	2001      	movcc	r0, #1
 80a44c8:	2000      	movcs	r0, #0
 80a44ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44ce:	bf00      	nop

080a44d0 <__aeabi_fcmple>:
 80a44d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44d4:	f7ff ffe0 	bl	80a4498 <__aeabi_cfcmpeq>
 80a44d8:	bf94      	ite	ls
 80a44da:	2001      	movls	r0, #1
 80a44dc:	2000      	movhi	r0, #0
 80a44de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44e2:	bf00      	nop

080a44e4 <__aeabi_fcmpge>:
 80a44e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44e8:	f7ff ffd2 	bl	80a4490 <__aeabi_cfrcmple>
 80a44ec:	bf94      	ite	ls
 80a44ee:	2001      	movls	r0, #1
 80a44f0:	2000      	movhi	r0, #0
 80a44f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44f6:	bf00      	nop

080a44f8 <__aeabi_fcmpgt>:
 80a44f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44fc:	f7ff ffc8 	bl	80a4490 <__aeabi_cfrcmple>
 80a4500:	bf34      	ite	cc
 80a4502:	2001      	movcc	r0, #1
 80a4504:	2000      	movcs	r0, #0
 80a4506:	f85d fb08 	ldr.w	pc, [sp], #8
 80a450a:	bf00      	nop

080a450c <__aeabi_ldivmod>:
 80a450c:	b97b      	cbnz	r3, 80a452e <__aeabi_ldivmod+0x22>
 80a450e:	b972      	cbnz	r2, 80a452e <__aeabi_ldivmod+0x22>
 80a4510:	2900      	cmp	r1, #0
 80a4512:	bfbe      	ittt	lt
 80a4514:	2000      	movlt	r0, #0
 80a4516:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a451a:	e006      	blt.n	80a452a <__aeabi_ldivmod+0x1e>
 80a451c:	bf08      	it	eq
 80a451e:	2800      	cmpeq	r0, #0
 80a4520:	bf1c      	itt	ne
 80a4522:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a4526:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a452a:	f000 b9b5 	b.w	80a4898 <__aeabi_idiv0>
 80a452e:	f1ad 0c08 	sub.w	ip, sp, #8
 80a4532:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a4536:	2900      	cmp	r1, #0
 80a4538:	db09      	blt.n	80a454e <__aeabi_ldivmod+0x42>
 80a453a:	2b00      	cmp	r3, #0
 80a453c:	db1a      	blt.n	80a4574 <__aeabi_ldivmod+0x68>
 80a453e:	f000 f835 	bl	80a45ac <__udivmoddi4>
 80a4542:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a454a:	b004      	add	sp, #16
 80a454c:	4770      	bx	lr
 80a454e:	4240      	negs	r0, r0
 80a4550:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4554:	2b00      	cmp	r3, #0
 80a4556:	db1b      	blt.n	80a4590 <__aeabi_ldivmod+0x84>
 80a4558:	f000 f828 	bl	80a45ac <__udivmoddi4>
 80a455c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4564:	b004      	add	sp, #16
 80a4566:	4240      	negs	r0, r0
 80a4568:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a456c:	4252      	negs	r2, r2
 80a456e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4572:	4770      	bx	lr
 80a4574:	4252      	negs	r2, r2
 80a4576:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a457a:	f000 f817 	bl	80a45ac <__udivmoddi4>
 80a457e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4586:	b004      	add	sp, #16
 80a4588:	4240      	negs	r0, r0
 80a458a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a458e:	4770      	bx	lr
 80a4590:	4252      	negs	r2, r2
 80a4592:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4596:	f000 f809 	bl	80a45ac <__udivmoddi4>
 80a459a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a459e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a45a2:	b004      	add	sp, #16
 80a45a4:	4252      	negs	r2, r2
 80a45a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a45aa:	4770      	bx	lr

080a45ac <__udivmoddi4>:
 80a45ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a45b0:	468c      	mov	ip, r1
 80a45b2:	460c      	mov	r4, r1
 80a45b4:	4605      	mov	r5, r0
 80a45b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a45b8:	2b00      	cmp	r3, #0
 80a45ba:	d14f      	bne.n	80a465c <__udivmoddi4+0xb0>
 80a45bc:	428a      	cmp	r2, r1
 80a45be:	4617      	mov	r7, r2
 80a45c0:	d96b      	bls.n	80a469a <__udivmoddi4+0xee>
 80a45c2:	fab2 fe82 	clz	lr, r2
 80a45c6:	f1be 0f00 	cmp.w	lr, #0
 80a45ca:	d00b      	beq.n	80a45e4 <__udivmoddi4+0x38>
 80a45cc:	f1ce 0520 	rsb	r5, lr, #32
 80a45d0:	fa20 f505 	lsr.w	r5, r0, r5
 80a45d4:	fa01 f30e 	lsl.w	r3, r1, lr
 80a45d8:	ea45 0c03 	orr.w	ip, r5, r3
 80a45dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80a45e0:	fa00 f50e 	lsl.w	r5, r0, lr
 80a45e4:	0c39      	lsrs	r1, r7, #16
 80a45e6:	fbbc f0f1 	udiv	r0, ip, r1
 80a45ea:	b2ba      	uxth	r2, r7
 80a45ec:	fb01 c310 	mls	r3, r1, r0, ip
 80a45f0:	fb00 f802 	mul.w	r8, r0, r2
 80a45f4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a45f8:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a45fc:	45a0      	cmp	r8, r4
 80a45fe:	d909      	bls.n	80a4614 <__udivmoddi4+0x68>
 80a4600:	19e4      	adds	r4, r4, r7
 80a4602:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a4606:	f080 8128 	bcs.w	80a485a <__udivmoddi4+0x2ae>
 80a460a:	45a0      	cmp	r8, r4
 80a460c:	f240 8125 	bls.w	80a485a <__udivmoddi4+0x2ae>
 80a4610:	3802      	subs	r0, #2
 80a4612:	443c      	add	r4, r7
 80a4614:	ebc8 0404 	rsb	r4, r8, r4
 80a4618:	fbb4 f3f1 	udiv	r3, r4, r1
 80a461c:	fb01 4c13 	mls	ip, r1, r3, r4
 80a4620:	fb03 f202 	mul.w	r2, r3, r2
 80a4624:	b2ac      	uxth	r4, r5
 80a4626:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a462a:	428a      	cmp	r2, r1
 80a462c:	d909      	bls.n	80a4642 <__udivmoddi4+0x96>
 80a462e:	19c9      	adds	r1, r1, r7
 80a4630:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a4634:	f080 810f 	bcs.w	80a4856 <__udivmoddi4+0x2aa>
 80a4638:	428a      	cmp	r2, r1
 80a463a:	f240 810c 	bls.w	80a4856 <__udivmoddi4+0x2aa>
 80a463e:	3b02      	subs	r3, #2
 80a4640:	4439      	add	r1, r7
 80a4642:	1a8a      	subs	r2, r1, r2
 80a4644:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a4648:	2100      	movs	r1, #0
 80a464a:	2e00      	cmp	r6, #0
 80a464c:	d063      	beq.n	80a4716 <__udivmoddi4+0x16a>
 80a464e:	fa22 f20e 	lsr.w	r2, r2, lr
 80a4652:	2300      	movs	r3, #0
 80a4654:	e886 000c 	stmia.w	r6, {r2, r3}
 80a4658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a465c:	428b      	cmp	r3, r1
 80a465e:	d907      	bls.n	80a4670 <__udivmoddi4+0xc4>
 80a4660:	2e00      	cmp	r6, #0
 80a4662:	d056      	beq.n	80a4712 <__udivmoddi4+0x166>
 80a4664:	2100      	movs	r1, #0
 80a4666:	e886 0011 	stmia.w	r6, {r0, r4}
 80a466a:	4608      	mov	r0, r1
 80a466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4670:	fab3 f183 	clz	r1, r3
 80a4674:	2900      	cmp	r1, #0
 80a4676:	f040 8093 	bne.w	80a47a0 <__udivmoddi4+0x1f4>
 80a467a:	42a3      	cmp	r3, r4
 80a467c:	d302      	bcc.n	80a4684 <__udivmoddi4+0xd8>
 80a467e:	4282      	cmp	r2, r0
 80a4680:	f200 80fe 	bhi.w	80a4880 <__udivmoddi4+0x2d4>
 80a4684:	1a85      	subs	r5, r0, r2
 80a4686:	eb64 0303 	sbc.w	r3, r4, r3
 80a468a:	469c      	mov	ip, r3
 80a468c:	2001      	movs	r0, #1
 80a468e:	2e00      	cmp	r6, #0
 80a4690:	d041      	beq.n	80a4716 <__udivmoddi4+0x16a>
 80a4692:	e886 1020 	stmia.w	r6, {r5, ip}
 80a4696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a469a:	b912      	cbnz	r2, 80a46a2 <__udivmoddi4+0xf6>
 80a469c:	2701      	movs	r7, #1
 80a469e:	fbb7 f7f2 	udiv	r7, r7, r2
 80a46a2:	fab7 fe87 	clz	lr, r7
 80a46a6:	f1be 0f00 	cmp.w	lr, #0
 80a46aa:	d136      	bne.n	80a471a <__udivmoddi4+0x16e>
 80a46ac:	1be4      	subs	r4, r4, r7
 80a46ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a46b2:	fa1f f987 	uxth.w	r9, r7
 80a46b6:	2101      	movs	r1, #1
 80a46b8:	fbb4 f3f8 	udiv	r3, r4, r8
 80a46bc:	fb08 4413 	mls	r4, r8, r3, r4
 80a46c0:	fb09 f203 	mul.w	r2, r9, r3
 80a46c4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a46c8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a46cc:	42a2      	cmp	r2, r4
 80a46ce:	d907      	bls.n	80a46e0 <__udivmoddi4+0x134>
 80a46d0:	19e4      	adds	r4, r4, r7
 80a46d2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a46d6:	d202      	bcs.n	80a46de <__udivmoddi4+0x132>
 80a46d8:	42a2      	cmp	r2, r4
 80a46da:	f200 80d3 	bhi.w	80a4884 <__udivmoddi4+0x2d8>
 80a46de:	4603      	mov	r3, r0
 80a46e0:	1aa4      	subs	r4, r4, r2
 80a46e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80a46e6:	fb08 4810 	mls	r8, r8, r0, r4
 80a46ea:	fb09 f900 	mul.w	r9, r9, r0
 80a46ee:	b2ac      	uxth	r4, r5
 80a46f0:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a46f4:	4591      	cmp	r9, r2
 80a46f6:	d907      	bls.n	80a4708 <__udivmoddi4+0x15c>
 80a46f8:	19d2      	adds	r2, r2, r7
 80a46fa:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a46fe:	d202      	bcs.n	80a4706 <__udivmoddi4+0x15a>
 80a4700:	4591      	cmp	r9, r2
 80a4702:	f200 80ba 	bhi.w	80a487a <__udivmoddi4+0x2ce>
 80a4706:	4620      	mov	r0, r4
 80a4708:	ebc9 0202 	rsb	r2, r9, r2
 80a470c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4710:	e79b      	b.n	80a464a <__udivmoddi4+0x9e>
 80a4712:	4631      	mov	r1, r6
 80a4714:	4630      	mov	r0, r6
 80a4716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a471a:	fa07 f70e 	lsl.w	r7, r7, lr
 80a471e:	f1ce 0c20 	rsb	ip, lr, #32
 80a4722:	fa24 f30c 	lsr.w	r3, r4, ip
 80a4726:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a472a:	fbb3 faf8 	udiv	sl, r3, r8
 80a472e:	fa1f f987 	uxth.w	r9, r7
 80a4732:	fb08 351a 	mls	r5, r8, sl, r3
 80a4736:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a473a:	fa04 f40e 	lsl.w	r4, r4, lr
 80a473e:	fb0a fb09 	mul.w	fp, sl, r9
 80a4742:	ea4c 0c04 	orr.w	ip, ip, r4
 80a4746:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a474a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a474e:	459b      	cmp	fp, r3
 80a4750:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4754:	d90a      	bls.n	80a476c <__udivmoddi4+0x1c0>
 80a4756:	19db      	adds	r3, r3, r7
 80a4758:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a475c:	f080 808b 	bcs.w	80a4876 <__udivmoddi4+0x2ca>
 80a4760:	459b      	cmp	fp, r3
 80a4762:	f240 8088 	bls.w	80a4876 <__udivmoddi4+0x2ca>
 80a4766:	f1aa 0a02 	sub.w	sl, sl, #2
 80a476a:	443b      	add	r3, r7
 80a476c:	ebcb 0303 	rsb	r3, fp, r3
 80a4770:	fbb3 f0f8 	udiv	r0, r3, r8
 80a4774:	fb08 3310 	mls	r3, r8, r0, r3
 80a4778:	fb00 f409 	mul.w	r4, r0, r9
 80a477c:	fa1f fc8c 	uxth.w	ip, ip
 80a4780:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a4784:	429c      	cmp	r4, r3
 80a4786:	d907      	bls.n	80a4798 <__udivmoddi4+0x1ec>
 80a4788:	19db      	adds	r3, r3, r7
 80a478a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a478e:	d26e      	bcs.n	80a486e <__udivmoddi4+0x2c2>
 80a4790:	429c      	cmp	r4, r3
 80a4792:	d96c      	bls.n	80a486e <__udivmoddi4+0x2c2>
 80a4794:	3802      	subs	r0, #2
 80a4796:	443b      	add	r3, r7
 80a4798:	1b1c      	subs	r4, r3, r4
 80a479a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a479e:	e78b      	b.n	80a46b8 <__udivmoddi4+0x10c>
 80a47a0:	f1c1 0e20 	rsb	lr, r1, #32
 80a47a4:	408b      	lsls	r3, r1
 80a47a6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a47aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80a47ae:	fa24 f70e 	lsr.w	r7, r4, lr
 80a47b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a47b6:	fbb7 faf9 	udiv	sl, r7, r9
 80a47ba:	fa1f f38c 	uxth.w	r3, ip
 80a47be:	fb09 771a 	mls	r7, r9, sl, r7
 80a47c2:	fa20 f80e 	lsr.w	r8, r0, lr
 80a47c6:	408c      	lsls	r4, r1
 80a47c8:	fb0a f503 	mul.w	r5, sl, r3
 80a47cc:	ea48 0404 	orr.w	r4, r8, r4
 80a47d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a47d4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a47d8:	42bd      	cmp	r5, r7
 80a47da:	fa02 f201 	lsl.w	r2, r2, r1
 80a47de:	fa00 fb01 	lsl.w	fp, r0, r1
 80a47e2:	d909      	bls.n	80a47f8 <__udivmoddi4+0x24c>
 80a47e4:	eb17 070c 	adds.w	r7, r7, ip
 80a47e8:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a47ec:	d241      	bcs.n	80a4872 <__udivmoddi4+0x2c6>
 80a47ee:	42bd      	cmp	r5, r7
 80a47f0:	d93f      	bls.n	80a4872 <__udivmoddi4+0x2c6>
 80a47f2:	f1aa 0a02 	sub.w	sl, sl, #2
 80a47f6:	4467      	add	r7, ip
 80a47f8:	1b7f      	subs	r7, r7, r5
 80a47fa:	fbb7 f5f9 	udiv	r5, r7, r9
 80a47fe:	fb09 7715 	mls	r7, r9, r5, r7
 80a4802:	fb05 f303 	mul.w	r3, r5, r3
 80a4806:	b2a4      	uxth	r4, r4
 80a4808:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a480c:	42bb      	cmp	r3, r7
 80a480e:	d908      	bls.n	80a4822 <__udivmoddi4+0x276>
 80a4810:	eb17 070c 	adds.w	r7, r7, ip
 80a4814:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a4818:	d227      	bcs.n	80a486a <__udivmoddi4+0x2be>
 80a481a:	42bb      	cmp	r3, r7
 80a481c:	d925      	bls.n	80a486a <__udivmoddi4+0x2be>
 80a481e:	3d02      	subs	r5, #2
 80a4820:	4467      	add	r7, ip
 80a4822:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a4826:	fba0 8902 	umull	r8, r9, r0, r2
 80a482a:	1aff      	subs	r7, r7, r3
 80a482c:	454f      	cmp	r7, r9
 80a482e:	4645      	mov	r5, r8
 80a4830:	464c      	mov	r4, r9
 80a4832:	d314      	bcc.n	80a485e <__udivmoddi4+0x2b2>
 80a4834:	d029      	beq.n	80a488a <__udivmoddi4+0x2de>
 80a4836:	b366      	cbz	r6, 80a4892 <__udivmoddi4+0x2e6>
 80a4838:	ebbb 0305 	subs.w	r3, fp, r5
 80a483c:	eb67 0704 	sbc.w	r7, r7, r4
 80a4840:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a4844:	40cb      	lsrs	r3, r1
 80a4846:	40cf      	lsrs	r7, r1
 80a4848:	ea4e 0303 	orr.w	r3, lr, r3
 80a484c:	e886 0088 	stmia.w	r6, {r3, r7}
 80a4850:	2100      	movs	r1, #0
 80a4852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4856:	4623      	mov	r3, r4
 80a4858:	e6f3      	b.n	80a4642 <__udivmoddi4+0x96>
 80a485a:	4618      	mov	r0, r3
 80a485c:	e6da      	b.n	80a4614 <__udivmoddi4+0x68>
 80a485e:	ebb8 0502 	subs.w	r5, r8, r2
 80a4862:	eb69 040c 	sbc.w	r4, r9, ip
 80a4866:	3801      	subs	r0, #1
 80a4868:	e7e5      	b.n	80a4836 <__udivmoddi4+0x28a>
 80a486a:	4605      	mov	r5, r0
 80a486c:	e7d9      	b.n	80a4822 <__udivmoddi4+0x276>
 80a486e:	4610      	mov	r0, r2
 80a4870:	e792      	b.n	80a4798 <__udivmoddi4+0x1ec>
 80a4872:	4682      	mov	sl, r0
 80a4874:	e7c0      	b.n	80a47f8 <__udivmoddi4+0x24c>
 80a4876:	4692      	mov	sl, r2
 80a4878:	e778      	b.n	80a476c <__udivmoddi4+0x1c0>
 80a487a:	3802      	subs	r0, #2
 80a487c:	443a      	add	r2, r7
 80a487e:	e743      	b.n	80a4708 <__udivmoddi4+0x15c>
 80a4880:	4608      	mov	r0, r1
 80a4882:	e704      	b.n	80a468e <__udivmoddi4+0xe2>
 80a4884:	3b02      	subs	r3, #2
 80a4886:	443c      	add	r4, r7
 80a4888:	e72a      	b.n	80a46e0 <__udivmoddi4+0x134>
 80a488a:	45c3      	cmp	fp, r8
 80a488c:	d3e7      	bcc.n	80a485e <__udivmoddi4+0x2b2>
 80a488e:	463c      	mov	r4, r7
 80a4890:	e7d1      	b.n	80a4836 <__udivmoddi4+0x28a>
 80a4892:	4631      	mov	r1, r6
 80a4894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4898 <__aeabi_idiv0>:
 80a4898:	4770      	bx	lr
 80a489a:	bf00      	nop

080a489c <atof>:
 80a489c:	2100      	movs	r1, #0
 80a489e:	f000 bfcb 	b.w	80a5838 <strtod>

080a48a2 <atoi>:
 80a48a2:	220a      	movs	r2, #10
 80a48a4:	2100      	movs	r1, #0
 80a48a6:	f001 b855 	b.w	80a5954 <strtol>
	...

080a48ac <__cxa_atexit>:
 80a48ac:	b510      	push	{r4, lr}
 80a48ae:	4c05      	ldr	r4, [pc, #20]	; (80a48c4 <__cxa_atexit+0x18>)
 80a48b0:	4613      	mov	r3, r2
 80a48b2:	b12c      	cbz	r4, 80a48c0 <__cxa_atexit+0x14>
 80a48b4:	460a      	mov	r2, r1
 80a48b6:	4601      	mov	r1, r0
 80a48b8:	2002      	movs	r0, #2
 80a48ba:	f3af 8000 	nop.w
 80a48be:	bd10      	pop	{r4, pc}
 80a48c0:	4620      	mov	r0, r4
 80a48c2:	bd10      	pop	{r4, pc}
 80a48c4:	00000000 	.word	0x00000000

080a48c8 <localtime>:
 80a48c8:	b538      	push	{r3, r4, r5, lr}
 80a48ca:	4b07      	ldr	r3, [pc, #28]	; (80a48e8 <localtime+0x20>)
 80a48cc:	4605      	mov	r5, r0
 80a48ce:	681c      	ldr	r4, [r3, #0]
 80a48d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a48d2:	b91b      	cbnz	r3, 80a48dc <localtime+0x14>
 80a48d4:	2024      	movs	r0, #36	; 0x24
 80a48d6:	f7fd fb83 	bl	80a1fe0 <malloc>
 80a48da:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a48dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a48de:	4628      	mov	r0, r5
 80a48e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a48e4:	f000 b802 	b.w	80a48ec <localtime_r>
 80a48e8:	200001d0 	.word	0x200001d0

080a48ec <localtime_r>:
 80a48ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a48f0:	460c      	mov	r4, r1
 80a48f2:	4680      	mov	r8, r0
 80a48f4:	f001 fe52 	bl	80a659c <__gettzinfo>
 80a48f8:	4621      	mov	r1, r4
 80a48fa:	4607      	mov	r7, r0
 80a48fc:	4640      	mov	r0, r8
 80a48fe:	f001 fe51 	bl	80a65a4 <gmtime_r>
 80a4902:	6946      	ldr	r6, [r0, #20]
 80a4904:	4604      	mov	r4, r0
 80a4906:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a490a:	07b3      	lsls	r3, r6, #30
 80a490c:	d105      	bne.n	80a491a <localtime_r+0x2e>
 80a490e:	2264      	movs	r2, #100	; 0x64
 80a4910:	fb96 f3f2 	sdiv	r3, r6, r2
 80a4914:	fb02 6313 	mls	r3, r2, r3, r6
 80a4918:	b94b      	cbnz	r3, 80a492e <localtime_r+0x42>
 80a491a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a491e:	fb96 f3f5 	sdiv	r3, r6, r5
 80a4922:	fb05 6513 	mls	r5, r5, r3, r6
 80a4926:	fab5 f385 	clz	r3, r5
 80a492a:	095b      	lsrs	r3, r3, #5
 80a492c:	e000      	b.n	80a4930 <localtime_r+0x44>
 80a492e:	2301      	movs	r3, #1
 80a4930:	4a5f      	ldr	r2, [pc, #380]	; (80a4ab0 <localtime_r+0x1c4>)
 80a4932:	2530      	movs	r5, #48	; 0x30
 80a4934:	fb05 2503 	mla	r5, r5, r3, r2
 80a4938:	f001 f946 	bl	80a5bc8 <__tz_lock>
 80a493c:	f001 f946 	bl	80a5bcc <_tzset_unlocked>
 80a4940:	4b5c      	ldr	r3, [pc, #368]	; (80a4ab4 <localtime_r+0x1c8>)
 80a4942:	681b      	ldr	r3, [r3, #0]
 80a4944:	b1f3      	cbz	r3, 80a4984 <localtime_r+0x98>
 80a4946:	687b      	ldr	r3, [r7, #4]
 80a4948:	429e      	cmp	r6, r3
 80a494a:	d105      	bne.n	80a4958 <localtime_r+0x6c>
 80a494c:	6839      	ldr	r1, [r7, #0]
 80a494e:	f8d8 3000 	ldr.w	r3, [r8]
 80a4952:	69fa      	ldr	r2, [r7, #28]
 80a4954:	b941      	cbnz	r1, 80a4968 <localtime_r+0x7c>
 80a4956:	e00a      	b.n	80a496e <localtime_r+0x82>
 80a4958:	4630      	mov	r0, r6
 80a495a:	f001 f88d 	bl	80a5a78 <__tzcalc_limits>
 80a495e:	2800      	cmp	r0, #0
 80a4960:	d1f4      	bne.n	80a494c <localtime_r+0x60>
 80a4962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a4966:	e00d      	b.n	80a4984 <localtime_r+0x98>
 80a4968:	4293      	cmp	r3, r2
 80a496a:	db08      	blt.n	80a497e <localtime_r+0x92>
 80a496c:	e001      	b.n	80a4972 <localtime_r+0x86>
 80a496e:	4293      	cmp	r3, r2
 80a4970:	da07      	bge.n	80a4982 <localtime_r+0x96>
 80a4972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a4974:	4293      	cmp	r3, r2
 80a4976:	bfac      	ite	ge
 80a4978:	2300      	movge	r3, #0
 80a497a:	2301      	movlt	r3, #1
 80a497c:	e002      	b.n	80a4984 <localtime_r+0x98>
 80a497e:	2300      	movs	r3, #0
 80a4980:	e000      	b.n	80a4984 <localtime_r+0x98>
 80a4982:	2301      	movs	r3, #1
 80a4984:	6223      	str	r3, [r4, #32]
 80a4986:	6a23      	ldr	r3, [r4, #32]
 80a4988:	203c      	movs	r0, #60	; 0x3c
 80a498a:	2b01      	cmp	r3, #1
 80a498c:	bf0c      	ite	eq
 80a498e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a4990:	6a39      	ldrne	r1, [r7, #32]
 80a4992:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4996:	fb91 f6f3 	sdiv	r6, r1, r3
 80a499a:	fb03 1316 	mls	r3, r3, r6, r1
 80a499e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a49a2:	fb00 3012 	mls	r0, r0, r2, r3
 80a49a6:	6861      	ldr	r1, [r4, #4]
 80a49a8:	6823      	ldr	r3, [r4, #0]
 80a49aa:	1a89      	subs	r1, r1, r2
 80a49ac:	68a2      	ldr	r2, [r4, #8]
 80a49ae:	1a1b      	subs	r3, r3, r0
 80a49b0:	1b92      	subs	r2, r2, r6
 80a49b2:	2b3b      	cmp	r3, #59	; 0x3b
 80a49b4:	6023      	str	r3, [r4, #0]
 80a49b6:	6061      	str	r1, [r4, #4]
 80a49b8:	60a2      	str	r2, [r4, #8]
 80a49ba:	dd03      	ble.n	80a49c4 <localtime_r+0xd8>
 80a49bc:	3101      	adds	r1, #1
 80a49be:	6061      	str	r1, [r4, #4]
 80a49c0:	3b3c      	subs	r3, #60	; 0x3c
 80a49c2:	e004      	b.n	80a49ce <localtime_r+0xe2>
 80a49c4:	2b00      	cmp	r3, #0
 80a49c6:	da03      	bge.n	80a49d0 <localtime_r+0xe4>
 80a49c8:	3901      	subs	r1, #1
 80a49ca:	6061      	str	r1, [r4, #4]
 80a49cc:	333c      	adds	r3, #60	; 0x3c
 80a49ce:	6023      	str	r3, [r4, #0]
 80a49d0:	6863      	ldr	r3, [r4, #4]
 80a49d2:	2b3b      	cmp	r3, #59	; 0x3b
 80a49d4:	dd03      	ble.n	80a49de <localtime_r+0xf2>
 80a49d6:	3201      	adds	r2, #1
 80a49d8:	60a2      	str	r2, [r4, #8]
 80a49da:	3b3c      	subs	r3, #60	; 0x3c
 80a49dc:	e004      	b.n	80a49e8 <localtime_r+0xfc>
 80a49de:	2b00      	cmp	r3, #0
 80a49e0:	da03      	bge.n	80a49ea <localtime_r+0xfe>
 80a49e2:	3a01      	subs	r2, #1
 80a49e4:	60a2      	str	r2, [r4, #8]
 80a49e6:	333c      	adds	r3, #60	; 0x3c
 80a49e8:	6063      	str	r3, [r4, #4]
 80a49ea:	68a3      	ldr	r3, [r4, #8]
 80a49ec:	2b17      	cmp	r3, #23
 80a49ee:	dd22      	ble.n	80a4a36 <localtime_r+0x14a>
 80a49f0:	69e2      	ldr	r2, [r4, #28]
 80a49f2:	3b18      	subs	r3, #24
 80a49f4:	3201      	adds	r2, #1
 80a49f6:	61e2      	str	r2, [r4, #28]
 80a49f8:	69a2      	ldr	r2, [r4, #24]
 80a49fa:	60a3      	str	r3, [r4, #8]
 80a49fc:	3201      	adds	r2, #1
 80a49fe:	2a06      	cmp	r2, #6
 80a4a00:	bfc8      	it	gt
 80a4a02:	2200      	movgt	r2, #0
 80a4a04:	61a2      	str	r2, [r4, #24]
 80a4a06:	68e2      	ldr	r2, [r4, #12]
 80a4a08:	6923      	ldr	r3, [r4, #16]
 80a4a0a:	3201      	adds	r2, #1
 80a4a0c:	60e2      	str	r2, [r4, #12]
 80a4a0e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a4a12:	428a      	cmp	r2, r1
 80a4a14:	dd46      	ble.n	80a4aa4 <localtime_r+0x1b8>
 80a4a16:	3301      	adds	r3, #1
 80a4a18:	2b0c      	cmp	r3, #12
 80a4a1a:	bf08      	it	eq
 80a4a1c:	6963      	ldreq	r3, [r4, #20]
 80a4a1e:	eba2 0201 	sub.w	r2, r2, r1
 80a4a22:	60e2      	str	r2, [r4, #12]
 80a4a24:	bf05      	ittet	eq
 80a4a26:	3301      	addeq	r3, #1
 80a4a28:	2200      	moveq	r2, #0
 80a4a2a:	6123      	strne	r3, [r4, #16]
 80a4a2c:	6122      	streq	r2, [r4, #16]
 80a4a2e:	bf04      	itt	eq
 80a4a30:	6163      	streq	r3, [r4, #20]
 80a4a32:	61e2      	streq	r2, [r4, #28]
 80a4a34:	e036      	b.n	80a4aa4 <localtime_r+0x1b8>
 80a4a36:	2b00      	cmp	r3, #0
 80a4a38:	da34      	bge.n	80a4aa4 <localtime_r+0x1b8>
 80a4a3a:	69e2      	ldr	r2, [r4, #28]
 80a4a3c:	3318      	adds	r3, #24
 80a4a3e:	3a01      	subs	r2, #1
 80a4a40:	61e2      	str	r2, [r4, #28]
 80a4a42:	69a2      	ldr	r2, [r4, #24]
 80a4a44:	60a3      	str	r3, [r4, #8]
 80a4a46:	3a01      	subs	r2, #1
 80a4a48:	bf48      	it	mi
 80a4a4a:	2206      	movmi	r2, #6
 80a4a4c:	61a2      	str	r2, [r4, #24]
 80a4a4e:	68e2      	ldr	r2, [r4, #12]
 80a4a50:	3a01      	subs	r2, #1
 80a4a52:	60e2      	str	r2, [r4, #12]
 80a4a54:	bb32      	cbnz	r2, 80a4aa4 <localtime_r+0x1b8>
 80a4a56:	6923      	ldr	r3, [r4, #16]
 80a4a58:	3b01      	subs	r3, #1
 80a4a5a:	d401      	bmi.n	80a4a60 <localtime_r+0x174>
 80a4a5c:	6123      	str	r3, [r4, #16]
 80a4a5e:	e01d      	b.n	80a4a9c <localtime_r+0x1b0>
 80a4a60:	230b      	movs	r3, #11
 80a4a62:	6123      	str	r3, [r4, #16]
 80a4a64:	6963      	ldr	r3, [r4, #20]
 80a4a66:	1e5a      	subs	r2, r3, #1
 80a4a68:	f012 0f03 	tst.w	r2, #3
 80a4a6c:	6162      	str	r2, [r4, #20]
 80a4a6e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a4a72:	d105      	bne.n	80a4a80 <localtime_r+0x194>
 80a4a74:	2164      	movs	r1, #100	; 0x64
 80a4a76:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4a7a:	fb01 3212 	mls	r2, r1, r2, r3
 80a4a7e:	b94a      	cbnz	r2, 80a4a94 <localtime_r+0x1a8>
 80a4a80:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4a84:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4a88:	fb01 3312 	mls	r3, r1, r2, r3
 80a4a8c:	fab3 f383 	clz	r3, r3
 80a4a90:	095b      	lsrs	r3, r3, #5
 80a4a92:	e000      	b.n	80a4a96 <localtime_r+0x1aa>
 80a4a94:	2301      	movs	r3, #1
 80a4a96:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4a9a:	61e3      	str	r3, [r4, #28]
 80a4a9c:	6923      	ldr	r3, [r4, #16]
 80a4a9e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a4aa2:	60e3      	str	r3, [r4, #12]
 80a4aa4:	f001 f891 	bl	80a5bca <__tz_unlock>
 80a4aa8:	4620      	mov	r0, r4
 80a4aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4aae:	bf00      	nop
 80a4ab0:	080a75ac 	.word	0x080a75ac
 80a4ab4:	20000974 	.word	0x20000974

080a4ab8 <_localeconv_r>:
 80a4ab8:	4800      	ldr	r0, [pc, #0]	; (80a4abc <_localeconv_r+0x4>)
 80a4aba:	4770      	bx	lr
 80a4abc:	200001d4 	.word	0x200001d4

080a4ac0 <memcpy>:
 80a4ac0:	b510      	push	{r4, lr}
 80a4ac2:	1e43      	subs	r3, r0, #1
 80a4ac4:	440a      	add	r2, r1
 80a4ac6:	4291      	cmp	r1, r2
 80a4ac8:	d004      	beq.n	80a4ad4 <memcpy+0x14>
 80a4aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4ad2:	e7f8      	b.n	80a4ac6 <memcpy+0x6>
 80a4ad4:	bd10      	pop	{r4, pc}

080a4ad6 <memset>:
 80a4ad6:	4603      	mov	r3, r0
 80a4ad8:	4402      	add	r2, r0
 80a4ada:	4293      	cmp	r3, r2
 80a4adc:	d002      	beq.n	80a4ae4 <memset+0xe>
 80a4ade:	f803 1b01 	strb.w	r1, [r3], #1
 80a4ae2:	e7fa      	b.n	80a4ada <memset+0x4>
 80a4ae4:	4770      	bx	lr
	...

080a4ae8 <srand>:
 80a4ae8:	b538      	push	{r3, r4, r5, lr}
 80a4aea:	4b12      	ldr	r3, [pc, #72]	; (80a4b34 <srand+0x4c>)
 80a4aec:	4605      	mov	r5, r0
 80a4aee:	681c      	ldr	r4, [r3, #0]
 80a4af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4af2:	b9d3      	cbnz	r3, 80a4b2a <srand+0x42>
 80a4af4:	2018      	movs	r0, #24
 80a4af6:	f7fd fa73 	bl	80a1fe0 <malloc>
 80a4afa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4afe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4b00:	8003      	strh	r3, [r0, #0]
 80a4b02:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4b06:	8043      	strh	r3, [r0, #2]
 80a4b08:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4b0c:	8083      	strh	r3, [r0, #4]
 80a4b0e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4b12:	80c3      	strh	r3, [r0, #6]
 80a4b14:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4b18:	8103      	strh	r3, [r0, #8]
 80a4b1a:	2305      	movs	r3, #5
 80a4b1c:	8143      	strh	r3, [r0, #10]
 80a4b1e:	230b      	movs	r3, #11
 80a4b20:	8183      	strh	r3, [r0, #12]
 80a4b22:	2201      	movs	r2, #1
 80a4b24:	2300      	movs	r3, #0
 80a4b26:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4b2c:	2200      	movs	r2, #0
 80a4b2e:	611d      	str	r5, [r3, #16]
 80a4b30:	615a      	str	r2, [r3, #20]
 80a4b32:	bd38      	pop	{r3, r4, r5, pc}
 80a4b34:	200001d0 	.word	0x200001d0

080a4b38 <strcmp>:
 80a4b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4b40:	2a01      	cmp	r2, #1
 80a4b42:	bf28      	it	cs
 80a4b44:	429a      	cmpcs	r2, r3
 80a4b46:	d0f7      	beq.n	80a4b38 <strcmp>
 80a4b48:	1ad0      	subs	r0, r2, r3
 80a4b4a:	4770      	bx	lr

080a4b4c <strcpy>:
 80a4b4c:	4603      	mov	r3, r0
 80a4b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4b52:	f803 2b01 	strb.w	r2, [r3], #1
 80a4b56:	2a00      	cmp	r2, #0
 80a4b58:	d1f9      	bne.n	80a4b4e <strcpy+0x2>
 80a4b5a:	4770      	bx	lr

080a4b5c <strdup>:
 80a4b5c:	4b02      	ldr	r3, [pc, #8]	; (80a4b68 <strdup+0xc>)
 80a4b5e:	4601      	mov	r1, r0
 80a4b60:	6818      	ldr	r0, [r3, #0]
 80a4b62:	f000 b803 	b.w	80a4b6c <_strdup_r>
 80a4b66:	bf00      	nop
 80a4b68:	200001d0 	.word	0x200001d0

080a4b6c <_strdup_r>:
 80a4b6c:	b570      	push	{r4, r5, r6, lr}
 80a4b6e:	4606      	mov	r6, r0
 80a4b70:	4608      	mov	r0, r1
 80a4b72:	460c      	mov	r4, r1
 80a4b74:	f000 f80d 	bl	80a4b92 <strlen>
 80a4b78:	1c45      	adds	r5, r0, #1
 80a4b7a:	4629      	mov	r1, r5
 80a4b7c:	4630      	mov	r0, r6
 80a4b7e:	f7fd fa5f 	bl	80a2040 <_malloc_r>
 80a4b82:	4606      	mov	r6, r0
 80a4b84:	b118      	cbz	r0, 80a4b8e <_strdup_r+0x22>
 80a4b86:	462a      	mov	r2, r5
 80a4b88:	4621      	mov	r1, r4
 80a4b8a:	f7ff ff99 	bl	80a4ac0 <memcpy>
 80a4b8e:	4630      	mov	r0, r6
 80a4b90:	bd70      	pop	{r4, r5, r6, pc}

080a4b92 <strlen>:
 80a4b92:	4603      	mov	r3, r0
 80a4b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4b98:	2a00      	cmp	r2, #0
 80a4b9a:	d1fb      	bne.n	80a4b94 <strlen+0x2>
 80a4b9c:	1a18      	subs	r0, r3, r0
 80a4b9e:	3801      	subs	r0, #1
 80a4ba0:	4770      	bx	lr

080a4ba2 <strncmp>:
 80a4ba2:	b530      	push	{r4, r5, lr}
 80a4ba4:	b182      	cbz	r2, 80a4bc8 <strncmp+0x26>
 80a4ba6:	1e45      	subs	r5, r0, #1
 80a4ba8:	3901      	subs	r1, #1
 80a4baa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a4bae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a4bb2:	42a3      	cmp	r3, r4
 80a4bb4:	d106      	bne.n	80a4bc4 <strncmp+0x22>
 80a4bb6:	43ec      	mvns	r4, r5
 80a4bb8:	4414      	add	r4, r2
 80a4bba:	42e0      	cmn	r0, r4
 80a4bbc:	d001      	beq.n	80a4bc2 <strncmp+0x20>
 80a4bbe:	2b00      	cmp	r3, #0
 80a4bc0:	d1f3      	bne.n	80a4baa <strncmp+0x8>
 80a4bc2:	461c      	mov	r4, r3
 80a4bc4:	1b18      	subs	r0, r3, r4
 80a4bc6:	bd30      	pop	{r4, r5, pc}
 80a4bc8:	4610      	mov	r0, r2
 80a4bca:	bd30      	pop	{r4, r5, pc}

080a4bcc <strncpy>:
 80a4bcc:	4603      	mov	r3, r0
 80a4bce:	b510      	push	{r4, lr}
 80a4bd0:	b142      	cbz	r2, 80a4be4 <strncpy+0x18>
 80a4bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4bd6:	3a01      	subs	r2, #1
 80a4bd8:	f803 4b01 	strb.w	r4, [r3], #1
 80a4bdc:	2c00      	cmp	r4, #0
 80a4bde:	d1f7      	bne.n	80a4bd0 <strncpy+0x4>
 80a4be0:	441a      	add	r2, r3
 80a4be2:	e000      	b.n	80a4be6 <strncpy+0x1a>
 80a4be4:	bd10      	pop	{r4, pc}
 80a4be6:	4293      	cmp	r3, r2
 80a4be8:	d002      	beq.n	80a4bf0 <strncpy+0x24>
 80a4bea:	f803 4b01 	strb.w	r4, [r3], #1
 80a4bee:	e7fa      	b.n	80a4be6 <strncpy+0x1a>
 80a4bf0:	bd10      	pop	{r4, pc}

080a4bf2 <sulp>:
 80a4bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4bf6:	460f      	mov	r7, r1
 80a4bf8:	4690      	mov	r8, r2
 80a4bfa:	f002 f82f 	bl	80a6c5c <__ulp>
 80a4bfe:	4604      	mov	r4, r0
 80a4c00:	460d      	mov	r5, r1
 80a4c02:	f1b8 0f00 	cmp.w	r8, #0
 80a4c06:	d011      	beq.n	80a4c2c <sulp+0x3a>
 80a4c08:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a4c0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a4c10:	2b00      	cmp	r3, #0
 80a4c12:	dd0b      	ble.n	80a4c2c <sulp+0x3a>
 80a4c14:	051b      	lsls	r3, r3, #20
 80a4c16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a4c1a:	2400      	movs	r4, #0
 80a4c1c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a4c20:	4622      	mov	r2, r4
 80a4c22:	462b      	mov	r3, r5
 80a4c24:	f7fe ffbc 	bl	80a3ba0 <__aeabi_dmul>
 80a4c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4c2c:	4620      	mov	r0, r4
 80a4c2e:	4629      	mov	r1, r5
 80a4c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4c34:	0000      	movs	r0, r0
	...

080a4c38 <_strtod_r>:
 80a4c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4c3c:	4682      	mov	sl, r0
 80a4c3e:	460c      	mov	r4, r1
 80a4c40:	b09d      	sub	sp, #116	; 0x74
 80a4c42:	2300      	movs	r3, #0
 80a4c44:	9213      	str	r2, [sp, #76]	; 0x4c
 80a4c46:	9318      	str	r3, [sp, #96]	; 0x60
 80a4c48:	f04f 0800 	mov.w	r8, #0
 80a4c4c:	f04f 0900 	mov.w	r9, #0
 80a4c50:	9117      	str	r1, [sp, #92]	; 0x5c
 80a4c52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4c54:	781a      	ldrb	r2, [r3, #0]
 80a4c56:	2a0d      	cmp	r2, #13
 80a4c58:	d805      	bhi.n	80a4c66 <_strtod_r+0x2e>
 80a4c5a:	2a09      	cmp	r2, #9
 80a4c5c:	d213      	bcs.n	80a4c86 <_strtod_r+0x4e>
 80a4c5e:	2a00      	cmp	r2, #0
 80a4c60:	f000 81ad 	beq.w	80a4fbe <_strtod_r+0x386>
 80a4c64:	e012      	b.n	80a4c8c <_strtod_r+0x54>
 80a4c66:	2a2b      	cmp	r2, #43	; 0x2b
 80a4c68:	d004      	beq.n	80a4c74 <_strtod_r+0x3c>
 80a4c6a:	2a2d      	cmp	r2, #45	; 0x2d
 80a4c6c:	d004      	beq.n	80a4c78 <_strtod_r+0x40>
 80a4c6e:	2a20      	cmp	r2, #32
 80a4c70:	d10c      	bne.n	80a4c8c <_strtod_r+0x54>
 80a4c72:	e008      	b.n	80a4c86 <_strtod_r+0x4e>
 80a4c74:	2200      	movs	r2, #0
 80a4c76:	e000      	b.n	80a4c7a <_strtod_r+0x42>
 80a4c78:	2201      	movs	r2, #1
 80a4c7a:	920c      	str	r2, [sp, #48]	; 0x30
 80a4c7c:	1c5a      	adds	r2, r3, #1
 80a4c7e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4c80:	785b      	ldrb	r3, [r3, #1]
 80a4c82:	b92b      	cbnz	r3, 80a4c90 <_strtod_r+0x58>
 80a4c84:	e19b      	b.n	80a4fbe <_strtod_r+0x386>
 80a4c86:	3301      	adds	r3, #1
 80a4c88:	9317      	str	r3, [sp, #92]	; 0x5c
 80a4c8a:	e7e2      	b.n	80a4c52 <_strtod_r+0x1a>
 80a4c8c:	2300      	movs	r3, #0
 80a4c8e:	930c      	str	r3, [sp, #48]	; 0x30
 80a4c90:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a4c92:	782b      	ldrb	r3, [r5, #0]
 80a4c94:	2b30      	cmp	r3, #48	; 0x30
 80a4c96:	d15c      	bne.n	80a4d52 <_strtod_r+0x11a>
 80a4c98:	786b      	ldrb	r3, [r5, #1]
 80a4c9a:	2b58      	cmp	r3, #88	; 0x58
 80a4c9c:	d001      	beq.n	80a4ca2 <_strtod_r+0x6a>
 80a4c9e:	2b78      	cmp	r3, #120	; 0x78
 80a4ca0:	d14c      	bne.n	80a4d3c <_strtod_r+0x104>
 80a4ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4ca4:	4aa8      	ldr	r2, [pc, #672]	; (80a4f48 <_strtod_r+0x310>)
 80a4ca6:	9301      	str	r3, [sp, #4]
 80a4ca8:	ab18      	add	r3, sp, #96	; 0x60
 80a4caa:	9300      	str	r3, [sp, #0]
 80a4cac:	a917      	add	r1, sp, #92	; 0x5c
 80a4cae:	ab19      	add	r3, sp, #100	; 0x64
 80a4cb0:	4650      	mov	r0, sl
 80a4cb2:	f001 f95c 	bl	80a5f6e <__gethex>
 80a4cb6:	f010 0607 	ands.w	r6, r0, #7
 80a4cba:	4604      	mov	r4, r0
 80a4cbc:	f000 8585 	beq.w	80a57ca <_strtod_r+0xb92>
 80a4cc0:	2e06      	cmp	r6, #6
 80a4cc2:	d105      	bne.n	80a4cd0 <_strtod_r+0x98>
 80a4cc4:	3501      	adds	r5, #1
 80a4cc6:	2300      	movs	r3, #0
 80a4cc8:	9517      	str	r5, [sp, #92]	; 0x5c
 80a4cca:	930c      	str	r3, [sp, #48]	; 0x30
 80a4ccc:	f000 bd7d 	b.w	80a57ca <_strtod_r+0xb92>
 80a4cd0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a4cd2:	b13a      	cbz	r2, 80a4ce4 <_strtod_r+0xac>
 80a4cd4:	2135      	movs	r1, #53	; 0x35
 80a4cd6:	a81a      	add	r0, sp, #104	; 0x68
 80a4cd8:	f002 f8a7 	bl	80a6e2a <__copybits>
 80a4cdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4cde:	4650      	mov	r0, sl
 80a4ce0:	f001 fd2b 	bl	80a673a <_Bfree>
 80a4ce4:	2e06      	cmp	r6, #6
 80a4ce6:	d822      	bhi.n	80a4d2e <_strtod_r+0xf6>
 80a4ce8:	e8df f006 	tbb	[pc, r6]
 80a4cec:	18080d04 	.word	0x18080d04
 80a4cf0:	0d1d      	.short	0x0d1d
 80a4cf2:	04          	.byte	0x04
 80a4cf3:	00          	.byte	0x00
 80a4cf4:	f04f 0900 	mov.w	r9, #0
 80a4cf8:	46c8      	mov	r8, r9
 80a4cfa:	e018      	b.n	80a4d2e <_strtod_r+0xf6>
 80a4cfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a4d00:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a4d04:	e013      	b.n	80a4d2e <_strtod_r+0xf6>
 80a4d06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a4d08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a4d0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a4d0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a4d12:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a4d16:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a4d1a:	e008      	b.n	80a4d2e <_strtod_r+0xf6>
 80a4d1c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a4f4c <_strtod_r+0x314>
 80a4d20:	f04f 0800 	mov.w	r8, #0
 80a4d24:	e003      	b.n	80a4d2e <_strtod_r+0xf6>
 80a4d26:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a4d2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a4d2e:	0721      	lsls	r1, r4, #28
 80a4d30:	f140 854b 	bpl.w	80a57ca <_strtod_r+0xb92>
 80a4d34:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a4d38:	f000 bd47 	b.w	80a57ca <_strtod_r+0xb92>
 80a4d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4d3e:	1c5a      	adds	r2, r3, #1
 80a4d40:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4d42:	785b      	ldrb	r3, [r3, #1]
 80a4d44:	2b30      	cmp	r3, #48	; 0x30
 80a4d46:	d0f9      	beq.n	80a4d3c <_strtod_r+0x104>
 80a4d48:	2b00      	cmp	r3, #0
 80a4d4a:	f000 853e 	beq.w	80a57ca <_strtod_r+0xb92>
 80a4d4e:	2301      	movs	r3, #1
 80a4d50:	e000      	b.n	80a4d54 <_strtod_r+0x11c>
 80a4d52:	2300      	movs	r3, #0
 80a4d54:	9305      	str	r3, [sp, #20]
 80a4d56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4d58:	220a      	movs	r2, #10
 80a4d5a:	9306      	str	r3, [sp, #24]
 80a4d5c:	2300      	movs	r3, #0
 80a4d5e:	469b      	mov	fp, r3
 80a4d60:	9302      	str	r3, [sp, #8]
 80a4d62:	9304      	str	r3, [sp, #16]
 80a4d64:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a4d66:	782e      	ldrb	r6, [r5, #0]
 80a4d68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a4d6c:	b2d9      	uxtb	r1, r3
 80a4d6e:	2909      	cmp	r1, #9
 80a4d70:	d811      	bhi.n	80a4d96 <_strtod_r+0x15e>
 80a4d72:	f1bb 0f08 	cmp.w	fp, #8
 80a4d76:	bfd5      	itete	le
 80a4d78:	9904      	ldrle	r1, [sp, #16]
 80a4d7a:	9902      	ldrgt	r1, [sp, #8]
 80a4d7c:	fb02 3301 	mlale	r3, r2, r1, r3
 80a4d80:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a4d84:	f105 0501 	add.w	r5, r5, #1
 80a4d88:	bfd4      	ite	le
 80a4d8a:	9304      	strle	r3, [sp, #16]
 80a4d8c:	9302      	strgt	r3, [sp, #8]
 80a4d8e:	f10b 0b01 	add.w	fp, fp, #1
 80a4d92:	9517      	str	r5, [sp, #92]	; 0x5c
 80a4d94:	e7e6      	b.n	80a4d64 <_strtod_r+0x12c>
 80a4d96:	4650      	mov	r0, sl
 80a4d98:	f7ff fe8e 	bl	80a4ab8 <_localeconv_r>
 80a4d9c:	6807      	ldr	r7, [r0, #0]
 80a4d9e:	4650      	mov	r0, sl
 80a4da0:	f7ff fe8a 	bl	80a4ab8 <_localeconv_r>
 80a4da4:	6800      	ldr	r0, [r0, #0]
 80a4da6:	f7ff fef4 	bl	80a4b92 <strlen>
 80a4daa:	4639      	mov	r1, r7
 80a4dac:	4602      	mov	r2, r0
 80a4dae:	4628      	mov	r0, r5
 80a4db0:	f7ff fef7 	bl	80a4ba2 <strncmp>
 80a4db4:	4607      	mov	r7, r0
 80a4db6:	b128      	cbz	r0, 80a4dc4 <_strtod_r+0x18c>
 80a4db8:	2000      	movs	r0, #0
 80a4dba:	4633      	mov	r3, r6
 80a4dbc:	465d      	mov	r5, fp
 80a4dbe:	4602      	mov	r2, r0
 80a4dc0:	4601      	mov	r1, r0
 80a4dc2:	e05a      	b.n	80a4e7a <_strtod_r+0x242>
 80a4dc4:	4650      	mov	r0, sl
 80a4dc6:	f7ff fe77 	bl	80a4ab8 <_localeconv_r>
 80a4dca:	6800      	ldr	r0, [r0, #0]
 80a4dcc:	f7ff fee1 	bl	80a4b92 <strlen>
 80a4dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4dd2:	181a      	adds	r2, r3, r0
 80a4dd4:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4dd6:	5c1b      	ldrb	r3, [r3, r0]
 80a4dd8:	f1bb 0f00 	cmp.w	fp, #0
 80a4ddc:	d145      	bne.n	80a4e6a <_strtod_r+0x232>
 80a4dde:	4658      	mov	r0, fp
 80a4de0:	2b30      	cmp	r3, #48	; 0x30
 80a4de2:	d105      	bne.n	80a4df0 <_strtod_r+0x1b8>
 80a4de4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4de6:	3001      	adds	r0, #1
 80a4de8:	1c5a      	adds	r2, r3, #1
 80a4dea:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4dec:	785b      	ldrb	r3, [r3, #1]
 80a4dee:	e7f7      	b.n	80a4de0 <_strtod_r+0x1a8>
 80a4df0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a4df4:	2a08      	cmp	r2, #8
 80a4df6:	d846      	bhi.n	80a4e86 <_strtod_r+0x24e>
 80a4df8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a4dfa:	9206      	str	r2, [sp, #24]
 80a4dfc:	4602      	mov	r2, r0
 80a4dfe:	2000      	movs	r0, #0
 80a4e00:	4605      	mov	r5, r0
 80a4e02:	3b30      	subs	r3, #48	; 0x30
 80a4e04:	f100 0101 	add.w	r1, r0, #1
 80a4e08:	d029      	beq.n	80a4e5e <_strtod_r+0x226>
 80a4e0a:	440a      	add	r2, r1
 80a4e0c:	4629      	mov	r1, r5
 80a4e0e:	eb05 0c00 	add.w	ip, r5, r0
 80a4e12:	260a      	movs	r6, #10
 80a4e14:	4561      	cmp	r1, ip
 80a4e16:	d00f      	beq.n	80a4e38 <_strtod_r+0x200>
 80a4e18:	3101      	adds	r1, #1
 80a4e1a:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80a4e1e:	f1be 0f08 	cmp.w	lr, #8
 80a4e22:	dc03      	bgt.n	80a4e2c <_strtod_r+0x1f4>
 80a4e24:	9f04      	ldr	r7, [sp, #16]
 80a4e26:	4377      	muls	r7, r6
 80a4e28:	9704      	str	r7, [sp, #16]
 80a4e2a:	e7f3      	b.n	80a4e14 <_strtod_r+0x1dc>
 80a4e2c:	2910      	cmp	r1, #16
 80a4e2e:	bfde      	ittt	le
 80a4e30:	9f02      	ldrle	r7, [sp, #8]
 80a4e32:	4377      	mulle	r7, r6
 80a4e34:	9702      	strle	r7, [sp, #8]
 80a4e36:	e7ed      	b.n	80a4e14 <_strtod_r+0x1dc>
 80a4e38:	4428      	add	r0, r5
 80a4e3a:	2808      	cmp	r0, #8
 80a4e3c:	f100 0501 	add.w	r5, r0, #1
 80a4e40:	dc05      	bgt.n	80a4e4e <_strtod_r+0x216>
 80a4e42:	9804      	ldr	r0, [sp, #16]
 80a4e44:	210a      	movs	r1, #10
 80a4e46:	fb01 3300 	mla	r3, r1, r0, r3
 80a4e4a:	9304      	str	r3, [sp, #16]
 80a4e4c:	e006      	b.n	80a4e5c <_strtod_r+0x224>
 80a4e4e:	2d10      	cmp	r5, #16
 80a4e50:	bfdf      	itttt	le
 80a4e52:	9802      	ldrle	r0, [sp, #8]
 80a4e54:	210a      	movle	r1, #10
 80a4e56:	fb01 3300 	mlale	r3, r1, r0, r3
 80a4e5a:	9302      	strle	r3, [sp, #8]
 80a4e5c:	2100      	movs	r1, #0
 80a4e5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4e60:	1c58      	adds	r0, r3, #1
 80a4e62:	9017      	str	r0, [sp, #92]	; 0x5c
 80a4e64:	785b      	ldrb	r3, [r3, #1]
 80a4e66:	4608      	mov	r0, r1
 80a4e68:	e002      	b.n	80a4e70 <_strtod_r+0x238>
 80a4e6a:	465d      	mov	r5, fp
 80a4e6c:	4638      	mov	r0, r7
 80a4e6e:	463a      	mov	r2, r7
 80a4e70:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a4e74:	2909      	cmp	r1, #9
 80a4e76:	d9c4      	bls.n	80a4e02 <_strtod_r+0x1ca>
 80a4e78:	2101      	movs	r1, #1
 80a4e7a:	2b65      	cmp	r3, #101	; 0x65
 80a4e7c:	d001      	beq.n	80a4e82 <_strtod_r+0x24a>
 80a4e7e:	2b45      	cmp	r3, #69	; 0x45
 80a4e80:	d14f      	bne.n	80a4f22 <_strtod_r+0x2ea>
 80a4e82:	b96d      	cbnz	r5, 80a4ea0 <_strtod_r+0x268>
 80a4e84:	e004      	b.n	80a4e90 <_strtod_r+0x258>
 80a4e86:	2b65      	cmp	r3, #101	; 0x65
 80a4e88:	f040 84ad 	bne.w	80a57e6 <_strtod_r+0xbae>
 80a4e8c:	2200      	movs	r2, #0
 80a4e8e:	2101      	movs	r1, #1
 80a4e90:	b928      	cbnz	r0, 80a4e9e <_strtod_r+0x266>
 80a4e92:	9b05      	ldr	r3, [sp, #20]
 80a4e94:	2b00      	cmp	r3, #0
 80a4e96:	f000 8092 	beq.w	80a4fbe <_strtod_r+0x386>
 80a4e9a:	4605      	mov	r5, r0
 80a4e9c:	e000      	b.n	80a4ea0 <_strtod_r+0x268>
 80a4e9e:	2500      	movs	r5, #0
 80a4ea0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a4ea2:	1c63      	adds	r3, r4, #1
 80a4ea4:	9317      	str	r3, [sp, #92]	; 0x5c
 80a4ea6:	7863      	ldrb	r3, [r4, #1]
 80a4ea8:	2b2b      	cmp	r3, #43	; 0x2b
 80a4eaa:	d006      	beq.n	80a4eba <_strtod_r+0x282>
 80a4eac:	2b2d      	cmp	r3, #45	; 0x2d
 80a4eae:	d002      	beq.n	80a4eb6 <_strtod_r+0x27e>
 80a4eb0:	2600      	movs	r6, #0
 80a4eb2:	9603      	str	r6, [sp, #12]
 80a4eb4:	e006      	b.n	80a4ec4 <_strtod_r+0x28c>
 80a4eb6:	2301      	movs	r3, #1
 80a4eb8:	e000      	b.n	80a4ebc <_strtod_r+0x284>
 80a4eba:	2300      	movs	r3, #0
 80a4ebc:	9303      	str	r3, [sp, #12]
 80a4ebe:	1ca3      	adds	r3, r4, #2
 80a4ec0:	9317      	str	r3, [sp, #92]	; 0x5c
 80a4ec2:	78a3      	ldrb	r3, [r4, #2]
 80a4ec4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a4ec8:	2e09      	cmp	r6, #9
 80a4eca:	d829      	bhi.n	80a4f20 <_strtod_r+0x2e8>
 80a4ecc:	2b30      	cmp	r3, #48	; 0x30
 80a4ece:	d104      	bne.n	80a4eda <_strtod_r+0x2a2>
 80a4ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4ed2:	1c5e      	adds	r6, r3, #1
 80a4ed4:	9617      	str	r6, [sp, #92]	; 0x5c
 80a4ed6:	785b      	ldrb	r3, [r3, #1]
 80a4ed8:	e7f8      	b.n	80a4ecc <_strtod_r+0x294>
 80a4eda:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a4ede:	2e08      	cmp	r6, #8
 80a4ee0:	d81f      	bhi.n	80a4f22 <_strtod_r+0x2ea>
 80a4ee2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a4ee6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4ee8:	461f      	mov	r7, r3
 80a4eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4eec:	1c5e      	adds	r6, r3, #1
 80a4eee:	9617      	str	r6, [sp, #92]	; 0x5c
 80a4ef0:	785b      	ldrb	r3, [r3, #1]
 80a4ef2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a4ef6:	f1bc 0f09 	cmp.w	ip, #9
 80a4efa:	d805      	bhi.n	80a4f08 <_strtod_r+0x2d0>
 80a4efc:	260a      	movs	r6, #10
 80a4efe:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a4f02:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a4f06:	e7f0      	b.n	80a4eea <_strtod_r+0x2b2>
 80a4f08:	1bf6      	subs	r6, r6, r7
 80a4f0a:	2e08      	cmp	r6, #8
 80a4f0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a4f10:	dc02      	bgt.n	80a4f18 <_strtod_r+0x2e0>
 80a4f12:	4576      	cmp	r6, lr
 80a4f14:	bfa8      	it	ge
 80a4f16:	4676      	movge	r6, lr
 80a4f18:	9f03      	ldr	r7, [sp, #12]
 80a4f1a:	b11f      	cbz	r7, 80a4f24 <_strtod_r+0x2ec>
 80a4f1c:	4276      	negs	r6, r6
 80a4f1e:	e001      	b.n	80a4f24 <_strtod_r+0x2ec>
 80a4f20:	9417      	str	r4, [sp, #92]	; 0x5c
 80a4f22:	2600      	movs	r6, #0
 80a4f24:	2d00      	cmp	r5, #0
 80a4f26:	d152      	bne.n	80a4fce <_strtod_r+0x396>
 80a4f28:	2800      	cmp	r0, #0
 80a4f2a:	f040 844e 	bne.w	80a57ca <_strtod_r+0xb92>
 80a4f2e:	9a05      	ldr	r2, [sp, #20]
 80a4f30:	2a00      	cmp	r2, #0
 80a4f32:	f040 844a 	bne.w	80a57ca <_strtod_r+0xb92>
 80a4f36:	2900      	cmp	r1, #0
 80a4f38:	d141      	bne.n	80a4fbe <_strtod_r+0x386>
 80a4f3a:	2b4e      	cmp	r3, #78	; 0x4e
 80a4f3c:	d020      	beq.n	80a4f80 <_strtod_r+0x348>
 80a4f3e:	dc07      	bgt.n	80a4f50 <_strtod_r+0x318>
 80a4f40:	2b49      	cmp	r3, #73	; 0x49
 80a4f42:	d00a      	beq.n	80a4f5a <_strtod_r+0x322>
 80a4f44:	e03b      	b.n	80a4fbe <_strtod_r+0x386>
 80a4f46:	bf00      	nop
 80a4f48:	080a760c 	.word	0x080a760c
 80a4f4c:	7ff00000 	.word	0x7ff00000
 80a4f50:	2b69      	cmp	r3, #105	; 0x69
 80a4f52:	d002      	beq.n	80a4f5a <_strtod_r+0x322>
 80a4f54:	2b6e      	cmp	r3, #110	; 0x6e
 80a4f56:	d013      	beq.n	80a4f80 <_strtod_r+0x348>
 80a4f58:	e031      	b.n	80a4fbe <_strtod_r+0x386>
 80a4f5a:	49aa      	ldr	r1, [pc, #680]	; (80a5204 <_strtod_r+0x5cc>)
 80a4f5c:	a817      	add	r0, sp, #92	; 0x5c
 80a4f5e:	f001 fa37 	bl	80a63d0 <__match>
 80a4f62:	b360      	cbz	r0, 80a4fbe <_strtod_r+0x386>
 80a4f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4f66:	49a8      	ldr	r1, [pc, #672]	; (80a5208 <_strtod_r+0x5d0>)
 80a4f68:	3b01      	subs	r3, #1
 80a4f6a:	a817      	add	r0, sp, #92	; 0x5c
 80a4f6c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a4f6e:	f001 fa2f 	bl	80a63d0 <__match>
 80a4f72:	b910      	cbnz	r0, 80a4f7a <_strtod_r+0x342>
 80a4f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4f76:	3301      	adds	r3, #1
 80a4f78:	9317      	str	r3, [sp, #92]	; 0x5c
 80a4f7a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a5224 <_strtod_r+0x5ec>
 80a4f7e:	e01a      	b.n	80a4fb6 <_strtod_r+0x37e>
 80a4f80:	49a2      	ldr	r1, [pc, #648]	; (80a520c <_strtod_r+0x5d4>)
 80a4f82:	a817      	add	r0, sp, #92	; 0x5c
 80a4f84:	f001 fa24 	bl	80a63d0 <__match>
 80a4f88:	b1c8      	cbz	r0, 80a4fbe <_strtod_r+0x386>
 80a4f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4f8c:	781b      	ldrb	r3, [r3, #0]
 80a4f8e:	2b28      	cmp	r3, #40	; 0x28
 80a4f90:	d10f      	bne.n	80a4fb2 <_strtod_r+0x37a>
 80a4f92:	aa1a      	add	r2, sp, #104	; 0x68
 80a4f94:	499e      	ldr	r1, [pc, #632]	; (80a5210 <_strtod_r+0x5d8>)
 80a4f96:	a817      	add	r0, sp, #92	; 0x5c
 80a4f98:	f001 fa2d 	bl	80a63f6 <__hexnan>
 80a4f9c:	2805      	cmp	r0, #5
 80a4f9e:	d108      	bne.n	80a4fb2 <_strtod_r+0x37a>
 80a4fa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a4fa2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a4fa6:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a4faa:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a4fae:	f000 bc0c 	b.w	80a57ca <_strtod_r+0xb92>
 80a4fb2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a5228 <_strtod_r+0x5f0>
 80a4fb6:	f04f 0800 	mov.w	r8, #0
 80a4fba:	f000 bc06 	b.w	80a57ca <_strtod_r+0xb92>
 80a4fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a4fc0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a4fc2:	2b00      	cmp	r3, #0
 80a4fc4:	f000 840c 	beq.w	80a57e0 <_strtod_r+0xba8>
 80a4fc8:	2300      	movs	r3, #0
 80a4fca:	930c      	str	r3, [sp, #48]	; 0x30
 80a4fcc:	e3ff      	b.n	80a57ce <_strtod_r+0xb96>
 80a4fce:	462c      	mov	r4, r5
 80a4fd0:	f1bb 0f00 	cmp.w	fp, #0
 80a4fd4:	bf08      	it	eq
 80a4fd6:	46ab      	moveq	fp, r5
 80a4fd8:	9804      	ldr	r0, [sp, #16]
 80a4fda:	2d10      	cmp	r5, #16
 80a4fdc:	bfa8      	it	ge
 80a4fde:	2410      	movge	r4, #16
 80a4fe0:	1ab7      	subs	r7, r6, r2
 80a4fe2:	f7fe fd67 	bl	80a3ab4 <__aeabi_ui2d>
 80a4fe6:	2c09      	cmp	r4, #9
 80a4fe8:	4680      	mov	r8, r0
 80a4fea:	4689      	mov	r9, r1
 80a4fec:	dd13      	ble.n	80a5016 <_strtod_r+0x3de>
 80a4fee:	4b89      	ldr	r3, [pc, #548]	; (80a5214 <_strtod_r+0x5dc>)
 80a4ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a4ff4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a4ff8:	f7fe fdd2 	bl	80a3ba0 <__aeabi_dmul>
 80a4ffc:	4680      	mov	r8, r0
 80a4ffe:	9802      	ldr	r0, [sp, #8]
 80a5000:	4689      	mov	r9, r1
 80a5002:	f7fe fd57 	bl	80a3ab4 <__aeabi_ui2d>
 80a5006:	4602      	mov	r2, r0
 80a5008:	460b      	mov	r3, r1
 80a500a:	4640      	mov	r0, r8
 80a500c:	4649      	mov	r1, r9
 80a500e:	f7fe fc15 	bl	80a383c <__adddf3>
 80a5012:	4680      	mov	r8, r0
 80a5014:	4689      	mov	r9, r1
 80a5016:	2d0f      	cmp	r5, #15
 80a5018:	dc33      	bgt.n	80a5082 <_strtod_r+0x44a>
 80a501a:	2f00      	cmp	r7, #0
 80a501c:	f000 83d5 	beq.w	80a57ca <_strtod_r+0xb92>
 80a5020:	dd22      	ble.n	80a5068 <_strtod_r+0x430>
 80a5022:	2f16      	cmp	r7, #22
 80a5024:	dc07      	bgt.n	80a5036 <_strtod_r+0x3fe>
 80a5026:	4d7b      	ldr	r5, [pc, #492]	; (80a5214 <_strtod_r+0x5dc>)
 80a5028:	4642      	mov	r2, r8
 80a502a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a502e:	464b      	mov	r3, r9
 80a5030:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5034:	e013      	b.n	80a505e <_strtod_r+0x426>
 80a5036:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a503a:	429f      	cmp	r7, r3
 80a503c:	dc21      	bgt.n	80a5082 <_strtod_r+0x44a>
 80a503e:	4c75      	ldr	r4, [pc, #468]	; (80a5214 <_strtod_r+0x5dc>)
 80a5040:	f1c5 050f 	rsb	r5, r5, #15
 80a5044:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a5048:	1b7d      	subs	r5, r7, r5
 80a504a:	4642      	mov	r2, r8
 80a504c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5050:	464b      	mov	r3, r9
 80a5052:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a5056:	f7fe fda3 	bl	80a3ba0 <__aeabi_dmul>
 80a505a:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a505e:	f7fe fd9f 	bl	80a3ba0 <__aeabi_dmul>
 80a5062:	4680      	mov	r8, r0
 80a5064:	4689      	mov	r9, r1
 80a5066:	e3b0      	b.n	80a57ca <_strtod_r+0xb92>
 80a5068:	f117 0f16 	cmn.w	r7, #22
 80a506c:	db09      	blt.n	80a5082 <_strtod_r+0x44a>
 80a506e:	4d69      	ldr	r5, [pc, #420]	; (80a5214 <_strtod_r+0x5dc>)
 80a5070:	4640      	mov	r0, r8
 80a5072:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a5076:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a507a:	4649      	mov	r1, r9
 80a507c:	f7fe feba 	bl	80a3df4 <__aeabi_ddiv>
 80a5080:	e7ef      	b.n	80a5062 <_strtod_r+0x42a>
 80a5082:	1b2c      	subs	r4, r5, r4
 80a5084:	443c      	add	r4, r7
 80a5086:	2c00      	cmp	r4, #0
 80a5088:	dd5d      	ble.n	80a5146 <_strtod_r+0x50e>
 80a508a:	f014 010f 	ands.w	r1, r4, #15
 80a508e:	d00a      	beq.n	80a50a6 <_strtod_r+0x46e>
 80a5090:	4b60      	ldr	r3, [pc, #384]	; (80a5214 <_strtod_r+0x5dc>)
 80a5092:	4642      	mov	r2, r8
 80a5094:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a5098:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a509c:	464b      	mov	r3, r9
 80a509e:	f7fe fd7f 	bl	80a3ba0 <__aeabi_dmul>
 80a50a2:	4680      	mov	r8, r0
 80a50a4:	4689      	mov	r9, r1
 80a50a6:	f034 040f 	bics.w	r4, r4, #15
 80a50aa:	f000 80c1 	beq.w	80a5230 <_strtod_r+0x5f8>
 80a50ae:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a50b2:	dd0f      	ble.n	80a50d4 <_strtod_r+0x49c>
 80a50b4:	f04f 0b00 	mov.w	fp, #0
 80a50b8:	f8cd b008 	str.w	fp, [sp, #8]
 80a50bc:	f8cd b014 	str.w	fp, [sp, #20]
 80a50c0:	f8cd b010 	str.w	fp, [sp, #16]
 80a50c4:	2322      	movs	r3, #34	; 0x22
 80a50c6:	f8ca 3000 	str.w	r3, [sl]
 80a50ca:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a5224 <_strtod_r+0x5ec>
 80a50ce:	f04f 0800 	mov.w	r8, #0
 80a50d2:	e189      	b.n	80a53e8 <_strtod_r+0x7b0>
 80a50d4:	4640      	mov	r0, r8
 80a50d6:	4649      	mov	r1, r9
 80a50d8:	2300      	movs	r3, #0
 80a50da:	4e4f      	ldr	r6, [pc, #316]	; (80a5218 <_strtod_r+0x5e0>)
 80a50dc:	1124      	asrs	r4, r4, #4
 80a50de:	9302      	str	r3, [sp, #8]
 80a50e0:	2c01      	cmp	r4, #1
 80a50e2:	dd0c      	ble.n	80a50fe <_strtod_r+0x4c6>
 80a50e4:	07e2      	lsls	r2, r4, #31
 80a50e6:	d504      	bpl.n	80a50f2 <_strtod_r+0x4ba>
 80a50e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a50ec:	f7fe fd58 	bl	80a3ba0 <__aeabi_dmul>
 80a50f0:	2301      	movs	r3, #1
 80a50f2:	9a02      	ldr	r2, [sp, #8]
 80a50f4:	1064      	asrs	r4, r4, #1
 80a50f6:	3201      	adds	r2, #1
 80a50f8:	9202      	str	r2, [sp, #8]
 80a50fa:	3608      	adds	r6, #8
 80a50fc:	e7f0      	b.n	80a50e0 <_strtod_r+0x4a8>
 80a50fe:	b10b      	cbz	r3, 80a5104 <_strtod_r+0x4cc>
 80a5100:	4680      	mov	r8, r0
 80a5102:	4689      	mov	r9, r1
 80a5104:	4b44      	ldr	r3, [pc, #272]	; (80a5218 <_strtod_r+0x5e0>)
 80a5106:	9a02      	ldr	r2, [sp, #8]
 80a5108:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a510c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a5110:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5114:	4642      	mov	r2, r8
 80a5116:	464b      	mov	r3, r9
 80a5118:	f7fe fd42 	bl	80a3ba0 <__aeabi_dmul>
 80a511c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a5120:	4689      	mov	r9, r1
 80a5122:	460a      	mov	r2, r1
 80a5124:	0d1b      	lsrs	r3, r3, #20
 80a5126:	493d      	ldr	r1, [pc, #244]	; (80a521c <_strtod_r+0x5e4>)
 80a5128:	051b      	lsls	r3, r3, #20
 80a512a:	428b      	cmp	r3, r1
 80a512c:	4680      	mov	r8, r0
 80a512e:	d8c1      	bhi.n	80a50b4 <_strtod_r+0x47c>
 80a5130:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a5134:	428b      	cmp	r3, r1
 80a5136:	bf86      	itte	hi
 80a5138:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a522c <_strtod_r+0x5f4>
 80a513c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a5140:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a5144:	e074      	b.n	80a5230 <_strtod_r+0x5f8>
 80a5146:	d073      	beq.n	80a5230 <_strtod_r+0x5f8>
 80a5148:	4264      	negs	r4, r4
 80a514a:	f014 020f 	ands.w	r2, r4, #15
 80a514e:	d00a      	beq.n	80a5166 <_strtod_r+0x52e>
 80a5150:	4b30      	ldr	r3, [pc, #192]	; (80a5214 <_strtod_r+0x5dc>)
 80a5152:	4640      	mov	r0, r8
 80a5154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a5158:	4649      	mov	r1, r9
 80a515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a515e:	f7fe fe49 	bl	80a3df4 <__aeabi_ddiv>
 80a5162:	4680      	mov	r8, r0
 80a5164:	4689      	mov	r9, r1
 80a5166:	1124      	asrs	r4, r4, #4
 80a5168:	d062      	beq.n	80a5230 <_strtod_r+0x5f8>
 80a516a:	2c1f      	cmp	r4, #31
 80a516c:	dd08      	ble.n	80a5180 <_strtod_r+0x548>
 80a516e:	f04f 0b00 	mov.w	fp, #0
 80a5172:	f8cd b008 	str.w	fp, [sp, #8]
 80a5176:	f8cd b014 	str.w	fp, [sp, #20]
 80a517a:	f8cd b010 	str.w	fp, [sp, #16]
 80a517e:	e12c      	b.n	80a53da <_strtod_r+0x7a2>
 80a5180:	4640      	mov	r0, r8
 80a5182:	4649      	mov	r1, r9
 80a5184:	f014 0f10 	tst.w	r4, #16
 80a5188:	bf0c      	ite	eq
 80a518a:	2300      	moveq	r3, #0
 80a518c:	236a      	movne	r3, #106	; 0x6a
 80a518e:	4e24      	ldr	r6, [pc, #144]	; (80a5220 <_strtod_r+0x5e8>)
 80a5190:	9303      	str	r3, [sp, #12]
 80a5192:	2300      	movs	r3, #0
 80a5194:	2c00      	cmp	r4, #0
 80a5196:	dd09      	ble.n	80a51ac <_strtod_r+0x574>
 80a5198:	07e2      	lsls	r2, r4, #31
 80a519a:	d504      	bpl.n	80a51a6 <_strtod_r+0x56e>
 80a519c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a51a0:	f7fe fcfe 	bl	80a3ba0 <__aeabi_dmul>
 80a51a4:	2301      	movs	r3, #1
 80a51a6:	1064      	asrs	r4, r4, #1
 80a51a8:	3608      	adds	r6, #8
 80a51aa:	e7f3      	b.n	80a5194 <_strtod_r+0x55c>
 80a51ac:	b10b      	cbz	r3, 80a51b2 <_strtod_r+0x57a>
 80a51ae:	4680      	mov	r8, r0
 80a51b0:	4689      	mov	r9, r1
 80a51b2:	9b03      	ldr	r3, [sp, #12]
 80a51b4:	b1eb      	cbz	r3, 80a51f2 <_strtod_r+0x5ba>
 80a51b6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a51ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a51be:	2b00      	cmp	r3, #0
 80a51c0:	4649      	mov	r1, r9
 80a51c2:	dd16      	ble.n	80a51f2 <_strtod_r+0x5ba>
 80a51c4:	2b1f      	cmp	r3, #31
 80a51c6:	dd0e      	ble.n	80a51e6 <_strtod_r+0x5ae>
 80a51c8:	2b34      	cmp	r3, #52	; 0x34
 80a51ca:	bfde      	ittt	le
 80a51cc:	3b20      	suble	r3, #32
 80a51ce:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80a51d2:	fa02 f303 	lslle.w	r3, r2, r3
 80a51d6:	f04f 0800 	mov.w	r8, #0
 80a51da:	bfcc      	ite	gt
 80a51dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a51e0:	ea03 0901 	andle.w	r9, r3, r1
 80a51e4:	e005      	b.n	80a51f2 <_strtod_r+0x5ba>
 80a51e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a51ea:	fa02 f303 	lsl.w	r3, r2, r3
 80a51ee:	ea03 0808 	and.w	r8, r3, r8
 80a51f2:	2200      	movs	r2, #0
 80a51f4:	2300      	movs	r3, #0
 80a51f6:	4640      	mov	r0, r8
 80a51f8:	4649      	mov	r1, r9
 80a51fa:	f7fe ff39 	bl	80a4070 <__aeabi_dcmpeq>
 80a51fe:	2800      	cmp	r0, #0
 80a5200:	d1b5      	bne.n	80a516e <_strtod_r+0x536>
 80a5202:	e017      	b.n	80a5234 <_strtod_r+0x5fc>
 80a5204:	080a7620 	.word	0x080a7620
 80a5208:	080a7623 	.word	0x080a7623
 80a520c:	080a7629 	.word	0x080a7629
 80a5210:	080a762c 	.word	0x080a762c
 80a5214:	080a76a8 	.word	0x080a76a8
 80a5218:	080a7770 	.word	0x080a7770
 80a521c:	7ca00000 	.word	0x7ca00000
 80a5220:	080a7640 	.word	0x080a7640
 80a5224:	7ff00000 	.word	0x7ff00000
 80a5228:	fff80000 	.word	0xfff80000
 80a522c:	7fefffff 	.word	0x7fefffff
 80a5230:	2300      	movs	r3, #0
 80a5232:	9303      	str	r3, [sp, #12]
 80a5234:	9b04      	ldr	r3, [sp, #16]
 80a5236:	465a      	mov	r2, fp
 80a5238:	9300      	str	r3, [sp, #0]
 80a523a:	9906      	ldr	r1, [sp, #24]
 80a523c:	462b      	mov	r3, r5
 80a523e:	4650      	mov	r0, sl
 80a5240:	f001 facd 	bl	80a67de <__s2b>
 80a5244:	9005      	str	r0, [sp, #20]
 80a5246:	2800      	cmp	r0, #0
 80a5248:	f43f af34 	beq.w	80a50b4 <_strtod_r+0x47c>
 80a524c:	2f00      	cmp	r7, #0
 80a524e:	f1c7 0300 	rsb	r3, r7, #0
 80a5252:	bfa8      	it	ge
 80a5254:	2300      	movge	r3, #0
 80a5256:	930d      	str	r3, [sp, #52]	; 0x34
 80a5258:	f04f 0b00 	mov.w	fp, #0
 80a525c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a5260:	9312      	str	r3, [sp, #72]	; 0x48
 80a5262:	f8cd b008 	str.w	fp, [sp, #8]
 80a5266:	9b05      	ldr	r3, [sp, #20]
 80a5268:	4650      	mov	r0, sl
 80a526a:	6859      	ldr	r1, [r3, #4]
 80a526c:	f001 fa30 	bl	80a66d0 <_Balloc>
 80a5270:	9004      	str	r0, [sp, #16]
 80a5272:	2800      	cmp	r0, #0
 80a5274:	f43f af26 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a5278:	9b05      	ldr	r3, [sp, #20]
 80a527a:	300c      	adds	r0, #12
 80a527c:	691a      	ldr	r2, [r3, #16]
 80a527e:	f103 010c 	add.w	r1, r3, #12
 80a5282:	3202      	adds	r2, #2
 80a5284:	0092      	lsls	r2, r2, #2
 80a5286:	f7ff fc1b 	bl	80a4ac0 <memcpy>
 80a528a:	ab1a      	add	r3, sp, #104	; 0x68
 80a528c:	9301      	str	r3, [sp, #4]
 80a528e:	ab19      	add	r3, sp, #100	; 0x64
 80a5290:	9300      	str	r3, [sp, #0]
 80a5292:	4642      	mov	r2, r8
 80a5294:	464b      	mov	r3, r9
 80a5296:	4650      	mov	r0, sl
 80a5298:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a529c:	f001 fd4f 	bl	80a6d3e <__d2b>
 80a52a0:	9018      	str	r0, [sp, #96]	; 0x60
 80a52a2:	2800      	cmp	r0, #0
 80a52a4:	f43f af0e 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a52a8:	2101      	movs	r1, #1
 80a52aa:	4650      	mov	r0, sl
 80a52ac:	f001 fb22 	bl	80a68f4 <__i2b>
 80a52b0:	9002      	str	r0, [sp, #8]
 80a52b2:	2800      	cmp	r0, #0
 80a52b4:	f43f af06 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a52b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a52ba:	9903      	ldr	r1, [sp, #12]
 80a52bc:	2b00      	cmp	r3, #0
 80a52be:	bfac      	ite	ge
 80a52c0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a52c2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a52c4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a52c6:	bfac      	ite	ge
 80a52c8:	18d6      	addge	r6, r2, r3
 80a52ca:	1ad2      	sublt	r2, r2, r3
 80a52cc:	eba3 0301 	sub.w	r3, r3, r1
 80a52d0:	4423      	add	r3, r4
 80a52d2:	49b1      	ldr	r1, [pc, #708]	; (80a5598 <_strtod_r+0x960>)
 80a52d4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a52d8:	bfac      	ite	ge
 80a52da:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a52dc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a52de:	428b      	cmp	r3, r1
 80a52e0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a52e4:	f280 8085 	bge.w	80a53f2 <_strtod_r+0x7ba>
 80a52e8:	1ac9      	subs	r1, r1, r3
 80a52ea:	291f      	cmp	r1, #31
 80a52ec:	bfc8      	it	gt
 80a52ee:	4dab      	ldrgt	r5, [pc, #684]	; (80a559c <_strtod_r+0x964>)
 80a52f0:	f04f 0701 	mov.w	r7, #1
 80a52f4:	bfd4      	ite	le
 80a52f6:	fa07 f301 	lslle.w	r3, r7, r1
 80a52fa:	1aed      	subgt	r5, r5, r3
 80a52fc:	eba4 0401 	sub.w	r4, r4, r1
 80a5300:	bfd9      	ittee	le
 80a5302:	9307      	strle	r3, [sp, #28]
 80a5304:	2500      	movle	r5, #0
 80a5306:	fa07 f505 	lslgt.w	r5, r7, r5
 80a530a:	9707      	strgt	r7, [sp, #28]
 80a530c:	1937      	adds	r7, r6, r4
 80a530e:	9b03      	ldr	r3, [sp, #12]
 80a5310:	42be      	cmp	r6, r7
 80a5312:	4414      	add	r4, r2
 80a5314:	441c      	add	r4, r3
 80a5316:	4633      	mov	r3, r6
 80a5318:	bfa8      	it	ge
 80a531a:	463b      	movge	r3, r7
 80a531c:	42a3      	cmp	r3, r4
 80a531e:	bfa8      	it	ge
 80a5320:	4623      	movge	r3, r4
 80a5322:	2b00      	cmp	r3, #0
 80a5324:	bfc2      	ittt	gt
 80a5326:	1aff      	subgt	r7, r7, r3
 80a5328:	1ae4      	subgt	r4, r4, r3
 80a532a:	1af6      	subgt	r6, r6, r3
 80a532c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a532e:	2b00      	cmp	r3, #0
 80a5330:	d163      	bne.n	80a53fa <_strtod_r+0x7c2>
 80a5332:	2f00      	cmp	r7, #0
 80a5334:	dc7a      	bgt.n	80a542c <_strtod_r+0x7f4>
 80a5336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a5338:	2b00      	cmp	r3, #0
 80a533a:	f040 8081 	bne.w	80a5440 <_strtod_r+0x808>
 80a533e:	2c00      	cmp	r4, #0
 80a5340:	f300 8088 	bgt.w	80a5454 <_strtod_r+0x81c>
 80a5344:	2e00      	cmp	r6, #0
 80a5346:	f300 808f 	bgt.w	80a5468 <_strtod_r+0x830>
 80a534a:	9a04      	ldr	r2, [sp, #16]
 80a534c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a534e:	4650      	mov	r0, sl
 80a5350:	f001 fc25 	bl	80a6b9e <__mdiff>
 80a5354:	4683      	mov	fp, r0
 80a5356:	2800      	cmp	r0, #0
 80a5358:	f43f aeb4 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a535c:	68c3      	ldr	r3, [r0, #12]
 80a535e:	2400      	movs	r4, #0
 80a5360:	60c4      	str	r4, [r0, #12]
 80a5362:	9902      	ldr	r1, [sp, #8]
 80a5364:	9306      	str	r3, [sp, #24]
 80a5366:	f001 fbfe 	bl	80a6b66 <__mcmp>
 80a536a:	42a0      	cmp	r0, r4
 80a536c:	f280 808b 	bge.w	80a5486 <_strtod_r+0x84e>
 80a5370:	9b06      	ldr	r3, [sp, #24]
 80a5372:	2b00      	cmp	r3, #0
 80a5374:	f040 8202 	bne.w	80a577c <_strtod_r+0xb44>
 80a5378:	f1b8 0f00 	cmp.w	r8, #0
 80a537c:	f040 81fe 	bne.w	80a577c <_strtod_r+0xb44>
 80a5380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a5384:	2b00      	cmp	r3, #0
 80a5386:	f040 81f9 	bne.w	80a577c <_strtod_r+0xb44>
 80a538a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a538e:	0d1b      	lsrs	r3, r3, #20
 80a5390:	051b      	lsls	r3, r3, #20
 80a5392:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a5396:	f240 81f1 	bls.w	80a577c <_strtod_r+0xb44>
 80a539a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a539e:	2b00      	cmp	r3, #0
 80a53a0:	d06c      	beq.n	80a547c <_strtod_r+0x844>
 80a53a2:	4659      	mov	r1, fp
 80a53a4:	2201      	movs	r2, #1
 80a53a6:	4650      	mov	r0, sl
 80a53a8:	f001 fb8c 	bl	80a6ac4 <__lshift>
 80a53ac:	9902      	ldr	r1, [sp, #8]
 80a53ae:	4683      	mov	fp, r0
 80a53b0:	f001 fbd9 	bl	80a6b66 <__mcmp>
 80a53b4:	2800      	cmp	r0, #0
 80a53b6:	f340 81e1 	ble.w	80a577c <_strtod_r+0xb44>
 80a53ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a53be:	9a03      	ldr	r2, [sp, #12]
 80a53c0:	0d1b      	lsrs	r3, r3, #20
 80a53c2:	051b      	lsls	r3, r3, #20
 80a53c4:	2a00      	cmp	r2, #0
 80a53c6:	f000 808d 	beq.w	80a54e4 <_strtod_r+0x8ac>
 80a53ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a53ce:	f300 8089 	bgt.w	80a54e4 <_strtod_r+0x8ac>
 80a53d2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a53d6:	f300 81d3 	bgt.w	80a5780 <_strtod_r+0xb48>
 80a53da:	2322      	movs	r3, #34	; 0x22
 80a53dc:	f04f 0800 	mov.w	r8, #0
 80a53e0:	f04f 0900 	mov.w	r9, #0
 80a53e4:	f8ca 3000 	str.w	r3, [sl]
 80a53e8:	9b05      	ldr	r3, [sp, #20]
 80a53ea:	2b00      	cmp	r3, #0
 80a53ec:	f040 81d9 	bne.w	80a57a2 <_strtod_r+0xb6a>
 80a53f0:	e1eb      	b.n	80a57ca <_strtod_r+0xb92>
 80a53f2:	2301      	movs	r3, #1
 80a53f4:	2500      	movs	r5, #0
 80a53f6:	9307      	str	r3, [sp, #28]
 80a53f8:	e788      	b.n	80a530c <_strtod_r+0x6d4>
 80a53fa:	461a      	mov	r2, r3
 80a53fc:	9902      	ldr	r1, [sp, #8]
 80a53fe:	4650      	mov	r0, sl
 80a5400:	f001 fb12 	bl	80a6a28 <__pow5mult>
 80a5404:	9002      	str	r0, [sp, #8]
 80a5406:	2800      	cmp	r0, #0
 80a5408:	f43f ae5c 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a540c:	4601      	mov	r1, r0
 80a540e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a5410:	4650      	mov	r0, sl
 80a5412:	f001 fa78 	bl	80a6906 <__multiply>
 80a5416:	9006      	str	r0, [sp, #24]
 80a5418:	2800      	cmp	r0, #0
 80a541a:	f43f ae53 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a541e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a5420:	4650      	mov	r0, sl
 80a5422:	f001 f98a 	bl	80a673a <_Bfree>
 80a5426:	9b06      	ldr	r3, [sp, #24]
 80a5428:	9318      	str	r3, [sp, #96]	; 0x60
 80a542a:	e782      	b.n	80a5332 <_strtod_r+0x6fa>
 80a542c:	463a      	mov	r2, r7
 80a542e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a5430:	4650      	mov	r0, sl
 80a5432:	f001 fb47 	bl	80a6ac4 <__lshift>
 80a5436:	9018      	str	r0, [sp, #96]	; 0x60
 80a5438:	2800      	cmp	r0, #0
 80a543a:	f47f af7c 	bne.w	80a5336 <_strtod_r+0x6fe>
 80a543e:	e641      	b.n	80a50c4 <_strtod_r+0x48c>
 80a5440:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a5442:	9904      	ldr	r1, [sp, #16]
 80a5444:	4650      	mov	r0, sl
 80a5446:	f001 faef 	bl	80a6a28 <__pow5mult>
 80a544a:	9004      	str	r0, [sp, #16]
 80a544c:	2800      	cmp	r0, #0
 80a544e:	f47f af76 	bne.w	80a533e <_strtod_r+0x706>
 80a5452:	e637      	b.n	80a50c4 <_strtod_r+0x48c>
 80a5454:	4622      	mov	r2, r4
 80a5456:	9904      	ldr	r1, [sp, #16]
 80a5458:	4650      	mov	r0, sl
 80a545a:	f001 fb33 	bl	80a6ac4 <__lshift>
 80a545e:	9004      	str	r0, [sp, #16]
 80a5460:	2800      	cmp	r0, #0
 80a5462:	f47f af6f 	bne.w	80a5344 <_strtod_r+0x70c>
 80a5466:	e62d      	b.n	80a50c4 <_strtod_r+0x48c>
 80a5468:	4632      	mov	r2, r6
 80a546a:	9902      	ldr	r1, [sp, #8]
 80a546c:	4650      	mov	r0, sl
 80a546e:	f001 fb29 	bl	80a6ac4 <__lshift>
 80a5472:	9002      	str	r0, [sp, #8]
 80a5474:	2800      	cmp	r0, #0
 80a5476:	f47f af68 	bne.w	80a534a <_strtod_r+0x712>
 80a547a:	e623      	b.n	80a50c4 <_strtod_r+0x48c>
 80a547c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a5480:	2b01      	cmp	r3, #1
 80a5482:	dc8e      	bgt.n	80a53a2 <_strtod_r+0x76a>
 80a5484:	e17a      	b.n	80a577c <_strtod_r+0xb44>
 80a5486:	d161      	bne.n	80a554c <_strtod_r+0x914>
 80a5488:	9a06      	ldr	r2, [sp, #24]
 80a548a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a548e:	b322      	cbz	r2, 80a54da <_strtod_r+0x8a2>
 80a5490:	4943      	ldr	r1, [pc, #268]	; (80a55a0 <_strtod_r+0x968>)
 80a5492:	464a      	mov	r2, r9
 80a5494:	428b      	cmp	r3, r1
 80a5496:	d12e      	bne.n	80a54f6 <_strtod_r+0x8be>
 80a5498:	9b03      	ldr	r3, [sp, #12]
 80a549a:	4641      	mov	r1, r8
 80a549c:	b163      	cbz	r3, 80a54b8 <_strtod_r+0x880>
 80a549e:	4b41      	ldr	r3, [pc, #260]	; (80a55a4 <_strtod_r+0x96c>)
 80a54a0:	4013      	ands	r3, r2
 80a54a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a54a6:	d807      	bhi.n	80a54b8 <_strtod_r+0x880>
 80a54a8:	0d1b      	lsrs	r3, r3, #20
 80a54aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a54ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a54b2:	fa00 f303 	lsl.w	r3, r0, r3
 80a54b6:	e001      	b.n	80a54bc <_strtod_r+0x884>
 80a54b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a54bc:	428b      	cmp	r3, r1
 80a54be:	d11a      	bne.n	80a54f6 <_strtod_r+0x8be>
 80a54c0:	4939      	ldr	r1, [pc, #228]	; (80a55a8 <_strtod_r+0x970>)
 80a54c2:	428a      	cmp	r2, r1
 80a54c4:	d102      	bne.n	80a54cc <_strtod_r+0x894>
 80a54c6:	3301      	adds	r3, #1
 80a54c8:	f43f adfc 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a54cc:	4b35      	ldr	r3, [pc, #212]	; (80a55a4 <_strtod_r+0x96c>)
 80a54ce:	f04f 0800 	mov.w	r8, #0
 80a54d2:	4013      	ands	r3, r2
 80a54d4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a54d8:	e150      	b.n	80a577c <_strtod_r+0xb44>
 80a54da:	b963      	cbnz	r3, 80a54f6 <_strtod_r+0x8be>
 80a54dc:	f1b8 0f00 	cmp.w	r8, #0
 80a54e0:	d109      	bne.n	80a54f6 <_strtod_r+0x8be>
 80a54e2:	e76a      	b.n	80a53ba <_strtod_r+0x782>
 80a54e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a54e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a54ec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a54f0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a54f4:	e142      	b.n	80a577c <_strtod_r+0xb44>
 80a54f6:	b115      	cbz	r5, 80a54fe <_strtod_r+0x8c6>
 80a54f8:	ea15 0f09 	tst.w	r5, r9
 80a54fc:	e002      	b.n	80a5504 <_strtod_r+0x8cc>
 80a54fe:	9b07      	ldr	r3, [sp, #28]
 80a5500:	ea13 0f08 	tst.w	r3, r8
 80a5504:	f000 813a 	beq.w	80a577c <_strtod_r+0xb44>
 80a5508:	9b06      	ldr	r3, [sp, #24]
 80a550a:	9a03      	ldr	r2, [sp, #12]
 80a550c:	4640      	mov	r0, r8
 80a550e:	4649      	mov	r1, r9
 80a5510:	b153      	cbz	r3, 80a5528 <_strtod_r+0x8f0>
 80a5512:	f7ff fb6e 	bl	80a4bf2 <sulp>
 80a5516:	4602      	mov	r2, r0
 80a5518:	460b      	mov	r3, r1
 80a551a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a551e:	f7fe f98d 	bl	80a383c <__adddf3>
 80a5522:	4680      	mov	r8, r0
 80a5524:	4689      	mov	r9, r1
 80a5526:	e129      	b.n	80a577c <_strtod_r+0xb44>
 80a5528:	f7ff fb63 	bl	80a4bf2 <sulp>
 80a552c:	4602      	mov	r2, r0
 80a552e:	460b      	mov	r3, r1
 80a5530:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a5534:	f7fe f980 	bl	80a3838 <__aeabi_dsub>
 80a5538:	2200      	movs	r2, #0
 80a553a:	2300      	movs	r3, #0
 80a553c:	4680      	mov	r8, r0
 80a553e:	4689      	mov	r9, r1
 80a5540:	f7fe fd96 	bl	80a4070 <__aeabi_dcmpeq>
 80a5544:	2800      	cmp	r0, #0
 80a5546:	f47f af48 	bne.w	80a53da <_strtod_r+0x7a2>
 80a554a:	e117      	b.n	80a577c <_strtod_r+0xb44>
 80a554c:	9902      	ldr	r1, [sp, #8]
 80a554e:	4658      	mov	r0, fp
 80a5550:	f001 fc43 	bl	80a6dda <__ratio>
 80a5554:	2200      	movs	r2, #0
 80a5556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a555a:	4606      	mov	r6, r0
 80a555c:	460f      	mov	r7, r1
 80a555e:	f7fe fd9b 	bl	80a4098 <__aeabi_dcmple>
 80a5562:	2800      	cmp	r0, #0
 80a5564:	d03f      	beq.n	80a55e6 <_strtod_r+0x9ae>
 80a5566:	9b06      	ldr	r3, [sp, #24]
 80a5568:	b113      	cbz	r3, 80a5570 <_strtod_r+0x938>
 80a556a:	2600      	movs	r6, #0
 80a556c:	4f0f      	ldr	r7, [pc, #60]	; (80a55ac <_strtod_r+0x974>)
 80a556e:	e010      	b.n	80a5592 <_strtod_r+0x95a>
 80a5570:	f1b8 0f00 	cmp.w	r8, #0
 80a5574:	d103      	bne.n	80a557e <_strtod_r+0x946>
 80a5576:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a557a:	b93b      	cbnz	r3, 80a558c <_strtod_r+0x954>
 80a557c:	e01a      	b.n	80a55b4 <_strtod_r+0x97c>
 80a557e:	f1b8 0f01 	cmp.w	r8, #1
 80a5582:	d103      	bne.n	80a558c <_strtod_r+0x954>
 80a5584:	f1b9 0f00 	cmp.w	r9, #0
 80a5588:	f43f af27 	beq.w	80a53da <_strtod_r+0x7a2>
 80a558c:	4f08      	ldr	r7, [pc, #32]	; (80a55b0 <_strtod_r+0x978>)
 80a558e:	2600      	movs	r6, #0
 80a5590:	2400      	movs	r4, #0
 80a5592:	4d06      	ldr	r5, [pc, #24]	; (80a55ac <_strtod_r+0x974>)
 80a5594:	e03c      	b.n	80a5610 <_strtod_r+0x9d8>
 80a5596:	bf00      	nop
 80a5598:	fffffc02 	.word	0xfffffc02
 80a559c:	fffffbe2 	.word	0xfffffbe2
 80a55a0:	000fffff 	.word	0x000fffff
 80a55a4:	7ff00000 	.word	0x7ff00000
 80a55a8:	7fefffff 	.word	0x7fefffff
 80a55ac:	3ff00000 	.word	0x3ff00000
 80a55b0:	bff00000 	.word	0xbff00000
 80a55b4:	2200      	movs	r2, #0
 80a55b6:	4b9a      	ldr	r3, [pc, #616]	; (80a5820 <_strtod_r+0xbe8>)
 80a55b8:	4630      	mov	r0, r6
 80a55ba:	4639      	mov	r1, r7
 80a55bc:	f7fe fd62 	bl	80a4084 <__aeabi_dcmplt>
 80a55c0:	b940      	cbnz	r0, 80a55d4 <_strtod_r+0x99c>
 80a55c2:	2200      	movs	r2, #0
 80a55c4:	4b97      	ldr	r3, [pc, #604]	; (80a5824 <_strtod_r+0xbec>)
 80a55c6:	4630      	mov	r0, r6
 80a55c8:	4639      	mov	r1, r7
 80a55ca:	f7fe fae9 	bl	80a3ba0 <__aeabi_dmul>
 80a55ce:	4604      	mov	r4, r0
 80a55d0:	460d      	mov	r5, r1
 80a55d2:	e001      	b.n	80a55d8 <_strtod_r+0x9a0>
 80a55d4:	9c06      	ldr	r4, [sp, #24]
 80a55d6:	4d93      	ldr	r5, [pc, #588]	; (80a5824 <_strtod_r+0xbec>)
 80a55d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a55dc:	9414      	str	r4, [sp, #80]	; 0x50
 80a55de:	9315      	str	r3, [sp, #84]	; 0x54
 80a55e0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a55e4:	e014      	b.n	80a5610 <_strtod_r+0x9d8>
 80a55e6:	4b8f      	ldr	r3, [pc, #572]	; (80a5824 <_strtod_r+0xbec>)
 80a55e8:	2200      	movs	r2, #0
 80a55ea:	4630      	mov	r0, r6
 80a55ec:	4639      	mov	r1, r7
 80a55ee:	f7fe fad7 	bl	80a3ba0 <__aeabi_dmul>
 80a55f2:	9b06      	ldr	r3, [sp, #24]
 80a55f4:	4604      	mov	r4, r0
 80a55f6:	460d      	mov	r5, r1
 80a55f8:	b923      	cbnz	r3, 80a5604 <_strtod_r+0x9cc>
 80a55fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a55fe:	900e      	str	r0, [sp, #56]	; 0x38
 80a5600:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5602:	e003      	b.n	80a560c <_strtod_r+0x9d4>
 80a5604:	4602      	mov	r2, r0
 80a5606:	460b      	mov	r3, r1
 80a5608:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a560c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a5610:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a5614:	0d1b      	lsrs	r3, r3, #20
 80a5616:	051b      	lsls	r3, r3, #20
 80a5618:	9307      	str	r3, [sp, #28]
 80a561a:	9a07      	ldr	r2, [sp, #28]
 80a561c:	4b82      	ldr	r3, [pc, #520]	; (80a5828 <_strtod_r+0xbf0>)
 80a561e:	429a      	cmp	r2, r3
 80a5620:	d12b      	bne.n	80a567a <_strtod_r+0xa42>
 80a5622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a5626:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a562a:	4640      	mov	r0, r8
 80a562c:	4649      	mov	r1, r9
 80a562e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a5632:	f001 fb13 	bl	80a6c5c <__ulp>
 80a5636:	4602      	mov	r2, r0
 80a5638:	460b      	mov	r3, r1
 80a563a:	4630      	mov	r0, r6
 80a563c:	4639      	mov	r1, r7
 80a563e:	f7fe faaf 	bl	80a3ba0 <__aeabi_dmul>
 80a5642:	4642      	mov	r2, r8
 80a5644:	464b      	mov	r3, r9
 80a5646:	f7fe f8f9 	bl	80a383c <__adddf3>
 80a564a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a564e:	0d1b      	lsrs	r3, r3, #20
 80a5650:	4a76      	ldr	r2, [pc, #472]	; (80a582c <_strtod_r+0xbf4>)
 80a5652:	051b      	lsls	r3, r3, #20
 80a5654:	4293      	cmp	r3, r2
 80a5656:	4680      	mov	r8, r0
 80a5658:	d90c      	bls.n	80a5674 <_strtod_r+0xa3c>
 80a565a:	4b75      	ldr	r3, [pc, #468]	; (80a5830 <_strtod_r+0xbf8>)
 80a565c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a565e:	429a      	cmp	r2, r3
 80a5660:	d103      	bne.n	80a566a <_strtod_r+0xa32>
 80a5662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5664:	3301      	adds	r3, #1
 80a5666:	f43f ad2d 	beq.w	80a50c4 <_strtod_r+0x48c>
 80a566a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a5830 <_strtod_r+0xbf8>
 80a566e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a5672:	e072      	b.n	80a575a <_strtod_r+0xb22>
 80a5674:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a5678:	e039      	b.n	80a56ee <_strtod_r+0xab6>
 80a567a:	9b03      	ldr	r3, [sp, #12]
 80a567c:	b33b      	cbz	r3, 80a56ce <_strtod_r+0xa96>
 80a567e:	9b07      	ldr	r3, [sp, #28]
 80a5680:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a5684:	d823      	bhi.n	80a56ce <_strtod_r+0xa96>
 80a5686:	a35e      	add	r3, pc, #376	; (adr r3, 80a5800 <_strtod_r+0xbc8>)
 80a5688:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a568c:	4620      	mov	r0, r4
 80a568e:	4629      	mov	r1, r5
 80a5690:	f7fe fd02 	bl	80a4098 <__aeabi_dcmple>
 80a5694:	b1b8      	cbz	r0, 80a56c6 <_strtod_r+0xa8e>
 80a5696:	4629      	mov	r1, r5
 80a5698:	4620      	mov	r0, r4
 80a569a:	f7fe fd43 	bl	80a4124 <__aeabi_d2uiz>
 80a569e:	2800      	cmp	r0, #0
 80a56a0:	bf08      	it	eq
 80a56a2:	2001      	moveq	r0, #1
 80a56a4:	f7fe fa06 	bl	80a3ab4 <__aeabi_ui2d>
 80a56a8:	9b06      	ldr	r3, [sp, #24]
 80a56aa:	4604      	mov	r4, r0
 80a56ac:	460d      	mov	r5, r1
 80a56ae:	b923      	cbnz	r3, 80a56ba <_strtod_r+0xa82>
 80a56b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a56b4:	9010      	str	r0, [sp, #64]	; 0x40
 80a56b6:	9311      	str	r3, [sp, #68]	; 0x44
 80a56b8:	e003      	b.n	80a56c2 <_strtod_r+0xa8a>
 80a56ba:	4602      	mov	r2, r0
 80a56bc:	460b      	mov	r3, r1
 80a56be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a56c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a56c6:	9a07      	ldr	r2, [sp, #28]
 80a56c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a56cc:	1a9f      	subs	r7, r3, r2
 80a56ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a56d2:	f001 fac3 	bl	80a6c5c <__ulp>
 80a56d6:	4602      	mov	r2, r0
 80a56d8:	460b      	mov	r3, r1
 80a56da:	4630      	mov	r0, r6
 80a56dc:	4639      	mov	r1, r7
 80a56de:	f7fe fa5f 	bl	80a3ba0 <__aeabi_dmul>
 80a56e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a56e6:	f7fe f8a9 	bl	80a383c <__adddf3>
 80a56ea:	4680      	mov	r8, r0
 80a56ec:	4689      	mov	r9, r1
 80a56ee:	9b03      	ldr	r3, [sp, #12]
 80a56f0:	bb9b      	cbnz	r3, 80a575a <_strtod_r+0xb22>
 80a56f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a56f6:	0d1b      	lsrs	r3, r3, #20
 80a56f8:	9a07      	ldr	r2, [sp, #28]
 80a56fa:	051b      	lsls	r3, r3, #20
 80a56fc:	429a      	cmp	r2, r3
 80a56fe:	464e      	mov	r6, r9
 80a5700:	d12b      	bne.n	80a575a <_strtod_r+0xb22>
 80a5702:	4629      	mov	r1, r5
 80a5704:	4620      	mov	r0, r4
 80a5706:	f7fe fce5 	bl	80a40d4 <__aeabi_d2iz>
 80a570a:	f7fe f9e3 	bl	80a3ad4 <__aeabi_i2d>
 80a570e:	460b      	mov	r3, r1
 80a5710:	4602      	mov	r2, r0
 80a5712:	4629      	mov	r1, r5
 80a5714:	4620      	mov	r0, r4
 80a5716:	f7fe f88f 	bl	80a3838 <__aeabi_dsub>
 80a571a:	9b06      	ldr	r3, [sp, #24]
 80a571c:	4604      	mov	r4, r0
 80a571e:	460d      	mov	r5, r1
 80a5720:	b92b      	cbnz	r3, 80a572e <_strtod_r+0xaf6>
 80a5722:	f1b8 0f00 	cmp.w	r8, #0
 80a5726:	d102      	bne.n	80a572e <_strtod_r+0xaf6>
 80a5728:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a572c:	b17e      	cbz	r6, 80a574e <_strtod_r+0xb16>
 80a572e:	a336      	add	r3, pc, #216	; (adr r3, 80a5808 <_strtod_r+0xbd0>)
 80a5730:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5734:	4620      	mov	r0, r4
 80a5736:	4629      	mov	r1, r5
 80a5738:	f7fe fca4 	bl	80a4084 <__aeabi_dcmplt>
 80a573c:	bb88      	cbnz	r0, 80a57a2 <_strtod_r+0xb6a>
 80a573e:	a334      	add	r3, pc, #208	; (adr r3, 80a5810 <_strtod_r+0xbd8>)
 80a5740:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5744:	4620      	mov	r0, r4
 80a5746:	4629      	mov	r1, r5
 80a5748:	f7fe fcba 	bl	80a40c0 <__aeabi_dcmpgt>
 80a574c:	e004      	b.n	80a5758 <_strtod_r+0xb20>
 80a574e:	a332      	add	r3, pc, #200	; (adr r3, 80a5818 <_strtod_r+0xbe0>)
 80a5750:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5754:	f7fe fc96 	bl	80a4084 <__aeabi_dcmplt>
 80a5758:	bb18      	cbnz	r0, 80a57a2 <_strtod_r+0xb6a>
 80a575a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a575c:	4650      	mov	r0, sl
 80a575e:	f000 ffec 	bl	80a673a <_Bfree>
 80a5762:	9904      	ldr	r1, [sp, #16]
 80a5764:	4650      	mov	r0, sl
 80a5766:	f000 ffe8 	bl	80a673a <_Bfree>
 80a576a:	9902      	ldr	r1, [sp, #8]
 80a576c:	4650      	mov	r0, sl
 80a576e:	f000 ffe4 	bl	80a673a <_Bfree>
 80a5772:	4659      	mov	r1, fp
 80a5774:	4650      	mov	r0, sl
 80a5776:	f000 ffe0 	bl	80a673a <_Bfree>
 80a577a:	e574      	b.n	80a5266 <_strtod_r+0x62e>
 80a577c:	9b03      	ldr	r3, [sp, #12]
 80a577e:	b183      	cbz	r3, 80a57a2 <_strtod_r+0xb6a>
 80a5780:	4b2c      	ldr	r3, [pc, #176]	; (80a5834 <_strtod_r+0xbfc>)
 80a5782:	4640      	mov	r0, r8
 80a5784:	930b      	str	r3, [sp, #44]	; 0x2c
 80a5786:	2300      	movs	r3, #0
 80a5788:	930a      	str	r3, [sp, #40]	; 0x28
 80a578a:	4649      	mov	r1, r9
 80a578c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a5790:	f7fe fa06 	bl	80a3ba0 <__aeabi_dmul>
 80a5794:	4680      	mov	r8, r0
 80a5796:	4689      	mov	r9, r1
 80a5798:	b919      	cbnz	r1, 80a57a2 <_strtod_r+0xb6a>
 80a579a:	b910      	cbnz	r0, 80a57a2 <_strtod_r+0xb6a>
 80a579c:	2322      	movs	r3, #34	; 0x22
 80a579e:	f8ca 3000 	str.w	r3, [sl]
 80a57a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a57a4:	4650      	mov	r0, sl
 80a57a6:	f000 ffc8 	bl	80a673a <_Bfree>
 80a57aa:	9904      	ldr	r1, [sp, #16]
 80a57ac:	4650      	mov	r0, sl
 80a57ae:	f000 ffc4 	bl	80a673a <_Bfree>
 80a57b2:	9902      	ldr	r1, [sp, #8]
 80a57b4:	4650      	mov	r0, sl
 80a57b6:	f000 ffc0 	bl	80a673a <_Bfree>
 80a57ba:	9905      	ldr	r1, [sp, #20]
 80a57bc:	4650      	mov	r0, sl
 80a57be:	f000 ffbc 	bl	80a673a <_Bfree>
 80a57c2:	4659      	mov	r1, fp
 80a57c4:	4650      	mov	r0, sl
 80a57c6:	f000 ffb8 	bl	80a673a <_Bfree>
 80a57ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a57cc:	b113      	cbz	r3, 80a57d4 <_strtod_r+0xb9c>
 80a57ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a57d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a57d2:	6013      	str	r3, [r2, #0]
 80a57d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a57d6:	b11b      	cbz	r3, 80a57e0 <_strtod_r+0xba8>
 80a57d8:	4642      	mov	r2, r8
 80a57da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a57de:	e007      	b.n	80a57f0 <_strtod_r+0xbb8>
 80a57e0:	4642      	mov	r2, r8
 80a57e2:	464b      	mov	r3, r9
 80a57e4:	e004      	b.n	80a57f0 <_strtod_r+0xbb8>
 80a57e6:	2500      	movs	r5, #0
 80a57e8:	462a      	mov	r2, r5
 80a57ea:	2101      	movs	r1, #1
 80a57ec:	f7ff bb47 	b.w	80a4e7e <_strtod_r+0x246>
 80a57f0:	4610      	mov	r0, r2
 80a57f2:	4619      	mov	r1, r3
 80a57f4:	b01d      	add	sp, #116	; 0x74
 80a57f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a57fa:	bf00      	nop
 80a57fc:	f3af 8000 	nop.w
 80a5800:	ffc00000 	.word	0xffc00000
 80a5804:	41dfffff 	.word	0x41dfffff
 80a5808:	94a03595 	.word	0x94a03595
 80a580c:	3fdfffff 	.word	0x3fdfffff
 80a5810:	35afe535 	.word	0x35afe535
 80a5814:	3fe00000 	.word	0x3fe00000
 80a5818:	94a03595 	.word	0x94a03595
 80a581c:	3fcfffff 	.word	0x3fcfffff
 80a5820:	3ff00000 	.word	0x3ff00000
 80a5824:	3fe00000 	.word	0x3fe00000
 80a5828:	7fe00000 	.word	0x7fe00000
 80a582c:	7c9fffff 	.word	0x7c9fffff
 80a5830:	7fefffff 	.word	0x7fefffff
 80a5834:	39500000 	.word	0x39500000

080a5838 <strtod>:
 80a5838:	4b02      	ldr	r3, [pc, #8]	; (80a5844 <strtod+0xc>)
 80a583a:	460a      	mov	r2, r1
 80a583c:	4601      	mov	r1, r0
 80a583e:	6818      	ldr	r0, [r3, #0]
 80a5840:	f7ff b9fa 	b.w	80a4c38 <_strtod_r>
 80a5844:	200001d0 	.word	0x200001d0

080a5848 <_strtol_r>:
 80a5848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a584c:	460f      	mov	r7, r1
 80a584e:	4680      	mov	r8, r0
 80a5850:	483f      	ldr	r0, [pc, #252]	; (80a5950 <_strtol_r+0x108>)
 80a5852:	f8d0 9000 	ldr.w	r9, [r0]
 80a5856:	463d      	mov	r5, r7
 80a5858:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a585c:	eb09 0004 	add.w	r0, r9, r4
 80a5860:	7840      	ldrb	r0, [r0, #1]
 80a5862:	f000 0008 	and.w	r0, r0, #8
 80a5866:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a586a:	b108      	cbz	r0, 80a5870 <_strtol_r+0x28>
 80a586c:	462f      	mov	r7, r5
 80a586e:	e7f2      	b.n	80a5856 <_strtol_r+0xe>
 80a5870:	2c2d      	cmp	r4, #45	; 0x2d
 80a5872:	d103      	bne.n	80a587c <_strtol_r+0x34>
 80a5874:	1cbd      	adds	r5, r7, #2
 80a5876:	787c      	ldrb	r4, [r7, #1]
 80a5878:	2601      	movs	r6, #1
 80a587a:	e003      	b.n	80a5884 <_strtol_r+0x3c>
 80a587c:	2c2b      	cmp	r4, #43	; 0x2b
 80a587e:	bf04      	itt	eq
 80a5880:	787c      	ldrbeq	r4, [r7, #1]
 80a5882:	1cbd      	addeq	r5, r7, #2
 80a5884:	b113      	cbz	r3, 80a588c <_strtol_r+0x44>
 80a5886:	2b10      	cmp	r3, #16
 80a5888:	d10a      	bne.n	80a58a0 <_strtol_r+0x58>
 80a588a:	e05b      	b.n	80a5944 <_strtol_r+0xfc>
 80a588c:	2c30      	cmp	r4, #48	; 0x30
 80a588e:	d157      	bne.n	80a5940 <_strtol_r+0xf8>
 80a5890:	7828      	ldrb	r0, [r5, #0]
 80a5892:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5896:	2858      	cmp	r0, #88	; 0x58
 80a5898:	d14d      	bne.n	80a5936 <_strtol_r+0xee>
 80a589a:	786c      	ldrb	r4, [r5, #1]
 80a589c:	2310      	movs	r3, #16
 80a589e:	3502      	adds	r5, #2
 80a58a0:	2e00      	cmp	r6, #0
 80a58a2:	bf14      	ite	ne
 80a58a4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a58a8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a58ac:	fbbc faf3 	udiv	sl, ip, r3
 80a58b0:	2700      	movs	r7, #0
 80a58b2:	4638      	mov	r0, r7
 80a58b4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a58b8:	eb09 0e04 	add.w	lr, r9, r4
 80a58bc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a58c0:	f01e 0f04 	tst.w	lr, #4
 80a58c4:	d001      	beq.n	80a58ca <_strtol_r+0x82>
 80a58c6:	3c30      	subs	r4, #48	; 0x30
 80a58c8:	e00b      	b.n	80a58e2 <_strtol_r+0x9a>
 80a58ca:	f01e 0e03 	ands.w	lr, lr, #3
 80a58ce:	d01b      	beq.n	80a5908 <_strtol_r+0xc0>
 80a58d0:	f1be 0f01 	cmp.w	lr, #1
 80a58d4:	bf0c      	ite	eq
 80a58d6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a58da:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a58de:	ebce 0404 	rsb	r4, lr, r4
 80a58e2:	42a3      	cmp	r3, r4
 80a58e4:	dd10      	ble.n	80a5908 <_strtol_r+0xc0>
 80a58e6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a58ea:	d00a      	beq.n	80a5902 <_strtol_r+0xba>
 80a58ec:	4550      	cmp	r0, sl
 80a58ee:	d806      	bhi.n	80a58fe <_strtol_r+0xb6>
 80a58f0:	d101      	bne.n	80a58f6 <_strtol_r+0xae>
 80a58f2:	4564      	cmp	r4, ip
 80a58f4:	dc03      	bgt.n	80a58fe <_strtol_r+0xb6>
 80a58f6:	fb03 4000 	mla	r0, r3, r0, r4
 80a58fa:	2701      	movs	r7, #1
 80a58fc:	e001      	b.n	80a5902 <_strtol_r+0xba>
 80a58fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a5902:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5906:	e7d7      	b.n	80a58b8 <_strtol_r+0x70>
 80a5908:	1c7b      	adds	r3, r7, #1
 80a590a:	d10c      	bne.n	80a5926 <_strtol_r+0xde>
 80a590c:	2e00      	cmp	r6, #0
 80a590e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a5912:	bf14      	ite	ne
 80a5914:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a5918:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a591c:	f8c8 3000 	str.w	r3, [r8]
 80a5920:	b92a      	cbnz	r2, 80a592e <_strtol_r+0xe6>
 80a5922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5926:	b106      	cbz	r6, 80a592a <_strtol_r+0xe2>
 80a5928:	4240      	negs	r0, r0
 80a592a:	b172      	cbz	r2, 80a594a <_strtol_r+0x102>
 80a592c:	b107      	cbz	r7, 80a5930 <_strtol_r+0xe8>
 80a592e:	1e69      	subs	r1, r5, #1
 80a5930:	6011      	str	r1, [r2, #0]
 80a5932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5936:	2430      	movs	r4, #48	; 0x30
 80a5938:	2b00      	cmp	r3, #0
 80a593a:	d1b1      	bne.n	80a58a0 <_strtol_r+0x58>
 80a593c:	2308      	movs	r3, #8
 80a593e:	e7af      	b.n	80a58a0 <_strtol_r+0x58>
 80a5940:	230a      	movs	r3, #10
 80a5942:	e7ad      	b.n	80a58a0 <_strtol_r+0x58>
 80a5944:	2c30      	cmp	r4, #48	; 0x30
 80a5946:	d0a3      	beq.n	80a5890 <_strtol_r+0x48>
 80a5948:	e7aa      	b.n	80a58a0 <_strtol_r+0x58>
 80a594a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a594e:	bf00      	nop
 80a5950:	2000016c 	.word	0x2000016c

080a5954 <strtol>:
 80a5954:	4613      	mov	r3, r2
 80a5956:	460a      	mov	r2, r1
 80a5958:	4601      	mov	r1, r0
 80a595a:	4802      	ldr	r0, [pc, #8]	; (80a5964 <strtol+0x10>)
 80a595c:	6800      	ldr	r0, [r0, #0]
 80a595e:	f7ff bf73 	b.w	80a5848 <_strtol_r>
 80a5962:	bf00      	nop
 80a5964:	200001d0 	.word	0x200001d0

080a5968 <_strtoul_r>:
 80a5968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a596c:	460e      	mov	r6, r1
 80a596e:	4680      	mov	r8, r0
 80a5970:	483b      	ldr	r0, [pc, #236]	; (80a5a60 <_strtoul_r+0xf8>)
 80a5972:	f8d0 9000 	ldr.w	r9, [r0]
 80a5976:	4635      	mov	r5, r6
 80a5978:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a597c:	eb09 0004 	add.w	r0, r9, r4
 80a5980:	7840      	ldrb	r0, [r0, #1]
 80a5982:	f000 0008 	and.w	r0, r0, #8
 80a5986:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a598a:	b108      	cbz	r0, 80a5990 <_strtoul_r+0x28>
 80a598c:	462e      	mov	r6, r5
 80a598e:	e7f2      	b.n	80a5976 <_strtoul_r+0xe>
 80a5990:	2c2d      	cmp	r4, #45	; 0x2d
 80a5992:	d103      	bne.n	80a599c <_strtoul_r+0x34>
 80a5994:	1cb5      	adds	r5, r6, #2
 80a5996:	7874      	ldrb	r4, [r6, #1]
 80a5998:	2701      	movs	r7, #1
 80a599a:	e003      	b.n	80a59a4 <_strtoul_r+0x3c>
 80a599c:	2c2b      	cmp	r4, #43	; 0x2b
 80a599e:	bf04      	itt	eq
 80a59a0:	7874      	ldrbeq	r4, [r6, #1]
 80a59a2:	1cb5      	addeq	r5, r6, #2
 80a59a4:	b113      	cbz	r3, 80a59ac <_strtoul_r+0x44>
 80a59a6:	2b10      	cmp	r3, #16
 80a59a8:	d10a      	bne.n	80a59c0 <_strtoul_r+0x58>
 80a59aa:	e053      	b.n	80a5a54 <_strtoul_r+0xec>
 80a59ac:	2c30      	cmp	r4, #48	; 0x30
 80a59ae:	d14f      	bne.n	80a5a50 <_strtoul_r+0xe8>
 80a59b0:	7828      	ldrb	r0, [r5, #0]
 80a59b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a59b6:	2858      	cmp	r0, #88	; 0x58
 80a59b8:	d145      	bne.n	80a5a46 <_strtoul_r+0xde>
 80a59ba:	786c      	ldrb	r4, [r5, #1]
 80a59bc:	2310      	movs	r3, #16
 80a59be:	3502      	adds	r5, #2
 80a59c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a59c4:	fbbc fcf3 	udiv	ip, ip, r3
 80a59c8:	fb03 fa0c 	mul.w	sl, r3, ip
 80a59cc:	2600      	movs	r6, #0
 80a59ce:	ea6f 0a0a 	mvn.w	sl, sl
 80a59d2:	4630      	mov	r0, r6
 80a59d4:	eb09 0e04 	add.w	lr, r9, r4
 80a59d8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a59dc:	f01e 0f04 	tst.w	lr, #4
 80a59e0:	d001      	beq.n	80a59e6 <_strtoul_r+0x7e>
 80a59e2:	3c30      	subs	r4, #48	; 0x30
 80a59e4:	e00b      	b.n	80a59fe <_strtoul_r+0x96>
 80a59e6:	f01e 0e03 	ands.w	lr, lr, #3
 80a59ea:	d01a      	beq.n	80a5a22 <_strtoul_r+0xba>
 80a59ec:	f1be 0f01 	cmp.w	lr, #1
 80a59f0:	bf0c      	ite	eq
 80a59f2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a59f6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a59fa:	ebce 0404 	rsb	r4, lr, r4
 80a59fe:	42a3      	cmp	r3, r4
 80a5a00:	dd0f      	ble.n	80a5a22 <_strtoul_r+0xba>
 80a5a02:	2e00      	cmp	r6, #0
 80a5a04:	db08      	blt.n	80a5a18 <_strtoul_r+0xb0>
 80a5a06:	4560      	cmp	r0, ip
 80a5a08:	d806      	bhi.n	80a5a18 <_strtoul_r+0xb0>
 80a5a0a:	d101      	bne.n	80a5a10 <_strtoul_r+0xa8>
 80a5a0c:	4554      	cmp	r4, sl
 80a5a0e:	dc03      	bgt.n	80a5a18 <_strtoul_r+0xb0>
 80a5a10:	fb03 4000 	mla	r0, r3, r0, r4
 80a5a14:	2601      	movs	r6, #1
 80a5a16:	e001      	b.n	80a5a1c <_strtoul_r+0xb4>
 80a5a18:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a5a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5a20:	e7d8      	b.n	80a59d4 <_strtoul_r+0x6c>
 80a5a22:	2e00      	cmp	r6, #0
 80a5a24:	da07      	bge.n	80a5a36 <_strtoul_r+0xce>
 80a5a26:	2322      	movs	r3, #34	; 0x22
 80a5a28:	f8c8 3000 	str.w	r3, [r8]
 80a5a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a5a30:	b92a      	cbnz	r2, 80a5a3e <_strtoul_r+0xd6>
 80a5a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5a36:	b107      	cbz	r7, 80a5a3a <_strtoul_r+0xd2>
 80a5a38:	4240      	negs	r0, r0
 80a5a3a:	b172      	cbz	r2, 80a5a5a <_strtoul_r+0xf2>
 80a5a3c:	b106      	cbz	r6, 80a5a40 <_strtoul_r+0xd8>
 80a5a3e:	1e69      	subs	r1, r5, #1
 80a5a40:	6011      	str	r1, [r2, #0]
 80a5a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5a46:	2430      	movs	r4, #48	; 0x30
 80a5a48:	2b00      	cmp	r3, #0
 80a5a4a:	d1b9      	bne.n	80a59c0 <_strtoul_r+0x58>
 80a5a4c:	2308      	movs	r3, #8
 80a5a4e:	e7b7      	b.n	80a59c0 <_strtoul_r+0x58>
 80a5a50:	230a      	movs	r3, #10
 80a5a52:	e7b5      	b.n	80a59c0 <_strtoul_r+0x58>
 80a5a54:	2c30      	cmp	r4, #48	; 0x30
 80a5a56:	d0ab      	beq.n	80a59b0 <_strtoul_r+0x48>
 80a5a58:	e7b2      	b.n	80a59c0 <_strtoul_r+0x58>
 80a5a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5a5e:	bf00      	nop
 80a5a60:	2000016c 	.word	0x2000016c

080a5a64 <strtoul>:
 80a5a64:	4613      	mov	r3, r2
 80a5a66:	460a      	mov	r2, r1
 80a5a68:	4601      	mov	r1, r0
 80a5a6a:	4802      	ldr	r0, [pc, #8]	; (80a5a74 <strtoul+0x10>)
 80a5a6c:	6800      	ldr	r0, [r0, #0]
 80a5a6e:	f7ff bf7b 	b.w	80a5968 <_strtoul_r>
 80a5a72:	bf00      	nop
 80a5a74:	200001d0 	.word	0x200001d0

080a5a78 <__tzcalc_limits>:
 80a5a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5a7c:	4604      	mov	r4, r0
 80a5a7e:	f000 fd8d 	bl	80a659c <__gettzinfo>
 80a5a82:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5a86:	429c      	cmp	r4, r3
 80a5a88:	f340 8096 	ble.w	80a5bb8 <__tzcalc_limits+0x140>
 80a5a8c:	f240 156d 	movw	r5, #365	; 0x16d
 80a5a90:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5a94:	18e3      	adds	r3, r4, r3
 80a5a96:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a5a9a:	109b      	asrs	r3, r3, #2
 80a5a9c:	fb05 3502 	mla	r5, r5, r2, r3
 80a5aa0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a5aa4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a5aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5aac:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a5ab0:	442b      	add	r3, r5
 80a5ab2:	18a5      	adds	r5, r4, r2
 80a5ab4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5ab8:	fb94 f7f2 	sdiv	r7, r4, r2
 80a5abc:	fb95 f5f2 	sdiv	r5, r5, r2
 80a5ac0:	fb02 4717 	mls	r7, r2, r7, r4
 80a5ac4:	441d      	add	r5, r3
 80a5ac6:	2364      	movs	r3, #100	; 0x64
 80a5ac8:	fb94 f6f3 	sdiv	r6, r4, r3
 80a5acc:	fab7 fe87 	clz	lr, r7
 80a5ad0:	4601      	mov	r1, r0
 80a5ad2:	fb03 4616 	mls	r6, r3, r6, r4
 80a5ad6:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a5ada:	9301      	str	r3, [sp, #4]
 80a5adc:	f004 0303 	and.w	r3, r4, #3
 80a5ae0:	6044      	str	r4, [r0, #4]
 80a5ae2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a5ae6:	9300      	str	r3, [sp, #0]
 80a5ae8:	f04f 0c07 	mov.w	ip, #7
 80a5aec:	7a0b      	ldrb	r3, [r1, #8]
 80a5aee:	2b4a      	cmp	r3, #74	; 0x4a
 80a5af0:	d10e      	bne.n	80a5b10 <__tzcalc_limits+0x98>
 80a5af2:	694b      	ldr	r3, [r1, #20]
 80a5af4:	9a00      	ldr	r2, [sp, #0]
 80a5af6:	18ec      	adds	r4, r5, r3
 80a5af8:	b902      	cbnz	r2, 80a5afc <__tzcalc_limits+0x84>
 80a5afa:	b906      	cbnz	r6, 80a5afe <__tzcalc_limits+0x86>
 80a5afc:	b927      	cbnz	r7, 80a5b08 <__tzcalc_limits+0x90>
 80a5afe:	2b3b      	cmp	r3, #59	; 0x3b
 80a5b00:	bfd4      	ite	le
 80a5b02:	2300      	movle	r3, #0
 80a5b04:	2301      	movgt	r3, #1
 80a5b06:	e000      	b.n	80a5b0a <__tzcalc_limits+0x92>
 80a5b08:	2300      	movs	r3, #0
 80a5b0a:	4423      	add	r3, r4
 80a5b0c:	3b01      	subs	r3, #1
 80a5b0e:	e03f      	b.n	80a5b90 <__tzcalc_limits+0x118>
 80a5b10:	2b44      	cmp	r3, #68	; 0x44
 80a5b12:	d102      	bne.n	80a5b1a <__tzcalc_limits+0xa2>
 80a5b14:	694b      	ldr	r3, [r1, #20]
 80a5b16:	442b      	add	r3, r5
 80a5b18:	e03a      	b.n	80a5b90 <__tzcalc_limits+0x118>
 80a5b1a:	9b00      	ldr	r3, [sp, #0]
 80a5b1c:	b92b      	cbnz	r3, 80a5b2a <__tzcalc_limits+0xb2>
 80a5b1e:	2e00      	cmp	r6, #0
 80a5b20:	bf0c      	ite	eq
 80a5b22:	46f0      	moveq	r8, lr
 80a5b24:	f04f 0801 	movne.w	r8, #1
 80a5b28:	e000      	b.n	80a5b2c <__tzcalc_limits+0xb4>
 80a5b2a:	46f0      	mov	r8, lr
 80a5b2c:	46a9      	mov	r9, r5
 80a5b2e:	4b24      	ldr	r3, [pc, #144]	; (80a5bc0 <__tzcalc_limits+0x148>)
 80a5b30:	2230      	movs	r2, #48	; 0x30
 80a5b32:	fb02 3808 	mla	r8, r2, r8, r3
 80a5b36:	68cc      	ldr	r4, [r1, #12]
 80a5b38:	f1a8 0a04 	sub.w	sl, r8, #4
 80a5b3c:	2301      	movs	r3, #1
 80a5b3e:	42a3      	cmp	r3, r4
 80a5b40:	da04      	bge.n	80a5b4c <__tzcalc_limits+0xd4>
 80a5b42:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a5b46:	3301      	adds	r3, #1
 80a5b48:	44d9      	add	r9, fp
 80a5b4a:	e7f8      	b.n	80a5b3e <__tzcalc_limits+0xc6>
 80a5b4c:	f109 0304 	add.w	r3, r9, #4
 80a5b50:	fb93 fbfc 	sdiv	fp, r3, ip
 80a5b54:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a5b58:	ebca 0a03 	rsb	sl, sl, r3
 80a5b5c:	694b      	ldr	r3, [r1, #20]
 80a5b5e:	2c01      	cmp	r4, #1
 80a5b60:	bfb8      	it	lt
 80a5b62:	2401      	movlt	r4, #1
 80a5b64:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a5b68:	690b      	ldr	r3, [r1, #16]
 80a5b6a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a5b6e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a5b72:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a5b76:	bf48      	it	mi
 80a5b78:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5b7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5b80:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a5b84:	4453      	add	r3, sl
 80a5b86:	42a3      	cmp	r3, r4
 80a5b88:	db01      	blt.n	80a5b8e <__tzcalc_limits+0x116>
 80a5b8a:	3b07      	subs	r3, #7
 80a5b8c:	e7fb      	b.n	80a5b86 <__tzcalc_limits+0x10e>
 80a5b8e:	444b      	add	r3, r9
 80a5b90:	698c      	ldr	r4, [r1, #24]
 80a5b92:	4a0c      	ldr	r2, [pc, #48]	; (80a5bc4 <__tzcalc_limits+0x14c>)
 80a5b94:	fb02 4303 	mla	r3, r2, r3, r4
 80a5b98:	6a0c      	ldr	r4, [r1, #32]
 80a5b9a:	4423      	add	r3, r4
 80a5b9c:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a5ba0:	9b01      	ldr	r3, [sp, #4]
 80a5ba2:	4299      	cmp	r1, r3
 80a5ba4:	d1a2      	bne.n	80a5aec <__tzcalc_limits+0x74>
 80a5ba6:	69c3      	ldr	r3, [r0, #28]
 80a5ba8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a5baa:	4293      	cmp	r3, r2
 80a5bac:	bfac      	ite	ge
 80a5bae:	2300      	movge	r3, #0
 80a5bb0:	2301      	movlt	r3, #1
 80a5bb2:	6003      	str	r3, [r0, #0]
 80a5bb4:	2001      	movs	r0, #1
 80a5bb6:	e000      	b.n	80a5bba <__tzcalc_limits+0x142>
 80a5bb8:	2000      	movs	r0, #0
 80a5bba:	b003      	add	sp, #12
 80a5bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5bc0:	080a75ac 	.word	0x080a75ac
 80a5bc4:	00015180 	.word	0x00015180

080a5bc8 <__tz_lock>:
 80a5bc8:	4770      	bx	lr

080a5bca <__tz_unlock>:
 80a5bca:	4770      	bx	lr

080a5bcc <_tzset_unlocked>:
 80a5bcc:	4b01      	ldr	r3, [pc, #4]	; (80a5bd4 <_tzset_unlocked+0x8>)
 80a5bce:	6818      	ldr	r0, [r3, #0]
 80a5bd0:	f000 b802 	b.w	80a5bd8 <_tzset_unlocked_r>
 80a5bd4:	200001d0 	.word	0x200001d0

080a5bd8 <_tzset_unlocked_r>:
 80a5bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5bdc:	b08d      	sub	sp, #52	; 0x34
 80a5bde:	4607      	mov	r7, r0
 80a5be0:	f000 fcdc 	bl	80a659c <__gettzinfo>
 80a5be4:	49b0      	ldr	r1, [pc, #704]	; (80a5ea8 <_tzset_unlocked_r+0x2d0>)
 80a5be6:	4604      	mov	r4, r0
 80a5be8:	4638      	mov	r0, r7
 80a5bea:	f000 fccf 	bl	80a658c <_getenv_r>
 80a5bee:	4eaf      	ldr	r6, [pc, #700]	; (80a5eac <_tzset_unlocked_r+0x2d4>)
 80a5bf0:	4605      	mov	r5, r0
 80a5bf2:	b960      	cbnz	r0, 80a5c0e <_tzset_unlocked_r+0x36>
 80a5bf4:	4bae      	ldr	r3, [pc, #696]	; (80a5eb0 <_tzset_unlocked_r+0x2d8>)
 80a5bf6:	4aaf      	ldr	r2, [pc, #700]	; (80a5eb4 <_tzset_unlocked_r+0x2dc>)
 80a5bf8:	6018      	str	r0, [r3, #0]
 80a5bfa:	4baf      	ldr	r3, [pc, #700]	; (80a5eb8 <_tzset_unlocked_r+0x2e0>)
 80a5bfc:	6018      	str	r0, [r3, #0]
 80a5bfe:	4baf      	ldr	r3, [pc, #700]	; (80a5ebc <_tzset_unlocked_r+0x2e4>)
 80a5c00:	6830      	ldr	r0, [r6, #0]
 80a5c02:	601a      	str	r2, [r3, #0]
 80a5c04:	605a      	str	r2, [r3, #4]
 80a5c06:	f7fc f9f3 	bl	80a1ff0 <free>
 80a5c0a:	6035      	str	r5, [r6, #0]
 80a5c0c:	e148      	b.n	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5c0e:	6831      	ldr	r1, [r6, #0]
 80a5c10:	b979      	cbnz	r1, 80a5c32 <_tzset_unlocked_r+0x5a>
 80a5c12:	6830      	ldr	r0, [r6, #0]
 80a5c14:	f7fc f9ec 	bl	80a1ff0 <free>
 80a5c18:	4628      	mov	r0, r5
 80a5c1a:	f7fe ffba 	bl	80a4b92 <strlen>
 80a5c1e:	1c41      	adds	r1, r0, #1
 80a5c20:	4638      	mov	r0, r7
 80a5c22:	f7fc fa0d 	bl	80a2040 <_malloc_r>
 80a5c26:	6030      	str	r0, [r6, #0]
 80a5c28:	b148      	cbz	r0, 80a5c3e <_tzset_unlocked_r+0x66>
 80a5c2a:	4629      	mov	r1, r5
 80a5c2c:	f7fe ff8e 	bl	80a4b4c <strcpy>
 80a5c30:	e005      	b.n	80a5c3e <_tzset_unlocked_r+0x66>
 80a5c32:	f7fe ff81 	bl	80a4b38 <strcmp>
 80a5c36:	2800      	cmp	r0, #0
 80a5c38:	f000 8132 	beq.w	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5c3c:	e7e9      	b.n	80a5c12 <_tzset_unlocked_r+0x3a>
 80a5c3e:	782b      	ldrb	r3, [r5, #0]
 80a5c40:	ae0a      	add	r6, sp, #40	; 0x28
 80a5c42:	2b3a      	cmp	r3, #58	; 0x3a
 80a5c44:	bf08      	it	eq
 80a5c46:	3501      	addeq	r5, #1
 80a5c48:	4633      	mov	r3, r6
 80a5c4a:	4a9d      	ldr	r2, [pc, #628]	; (80a5ec0 <_tzset_unlocked_r+0x2e8>)
 80a5c4c:	499d      	ldr	r1, [pc, #628]	; (80a5ec4 <_tzset_unlocked_r+0x2ec>)
 80a5c4e:	4628      	mov	r0, r5
 80a5c50:	f7fc f9de 	bl	80a2010 <siscanf>
 80a5c54:	2800      	cmp	r0, #0
 80a5c56:	f340 8123 	ble.w	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5c5c:	18ef      	adds	r7, r5, r3
 80a5c5e:	5ceb      	ldrb	r3, [r5, r3]
 80a5c60:	2b2d      	cmp	r3, #45	; 0x2d
 80a5c62:	d103      	bne.n	80a5c6c <_tzset_unlocked_r+0x94>
 80a5c64:	3701      	adds	r7, #1
 80a5c66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a5c6a:	e003      	b.n	80a5c74 <_tzset_unlocked_r+0x9c>
 80a5c6c:	2b2b      	cmp	r3, #43	; 0x2b
 80a5c6e:	bf08      	it	eq
 80a5c70:	3701      	addeq	r7, #1
 80a5c72:	2501      	movs	r5, #1
 80a5c74:	f10d 0a20 	add.w	sl, sp, #32
 80a5c78:	f10d 0b1e 	add.w	fp, sp, #30
 80a5c7c:	f04f 0800 	mov.w	r8, #0
 80a5c80:	9603      	str	r6, [sp, #12]
 80a5c82:	f8cd a008 	str.w	sl, [sp, #8]
 80a5c86:	9601      	str	r6, [sp, #4]
 80a5c88:	f8cd b000 	str.w	fp, [sp]
 80a5c8c:	4633      	mov	r3, r6
 80a5c8e:	aa07      	add	r2, sp, #28
 80a5c90:	498d      	ldr	r1, [pc, #564]	; (80a5ec8 <_tzset_unlocked_r+0x2f0>)
 80a5c92:	4638      	mov	r0, r7
 80a5c94:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5c98:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a5c9c:	f7fc f9b8 	bl	80a2010 <siscanf>
 80a5ca0:	4540      	cmp	r0, r8
 80a5ca2:	f340 80fd 	ble.w	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5ca6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5caa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5cae:	213c      	movs	r1, #60	; 0x3c
 80a5cb0:	fb01 3302 	mla	r3, r1, r2, r3
 80a5cb4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5cb8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5cbc:	fb01 3302 	mla	r3, r1, r2, r3
 80a5cc0:	435d      	muls	r5, r3
 80a5cc2:	4b7f      	ldr	r3, [pc, #508]	; (80a5ec0 <_tzset_unlocked_r+0x2e8>)
 80a5cc4:	6225      	str	r5, [r4, #32]
 80a5cc6:	4d7d      	ldr	r5, [pc, #500]	; (80a5ebc <_tzset_unlocked_r+0x2e4>)
 80a5cc8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a5ed4 <_tzset_unlocked_r+0x2fc>
 80a5ccc:	602b      	str	r3, [r5, #0]
 80a5cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5cd0:	464a      	mov	r2, r9
 80a5cd2:	441f      	add	r7, r3
 80a5cd4:	497b      	ldr	r1, [pc, #492]	; (80a5ec4 <_tzset_unlocked_r+0x2ec>)
 80a5cd6:	4633      	mov	r3, r6
 80a5cd8:	4638      	mov	r0, r7
 80a5cda:	f7fc f999 	bl	80a2010 <siscanf>
 80a5cde:	4540      	cmp	r0, r8
 80a5ce0:	dc08      	bgt.n	80a5cf4 <_tzset_unlocked_r+0x11c>
 80a5ce2:	682b      	ldr	r3, [r5, #0]
 80a5ce4:	6a22      	ldr	r2, [r4, #32]
 80a5ce6:	606b      	str	r3, [r5, #4]
 80a5ce8:	4b71      	ldr	r3, [pc, #452]	; (80a5eb0 <_tzset_unlocked_r+0x2d8>)
 80a5cea:	601a      	str	r2, [r3, #0]
 80a5cec:	4b72      	ldr	r3, [pc, #456]	; (80a5eb8 <_tzset_unlocked_r+0x2e0>)
 80a5cee:	f8c3 8000 	str.w	r8, [r3]
 80a5cf2:	e0d5      	b.n	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5cf6:	f8c5 9004 	str.w	r9, [r5, #4]
 80a5cfa:	18fd      	adds	r5, r7, r3
 80a5cfc:	5cfb      	ldrb	r3, [r7, r3]
 80a5cfe:	2b2d      	cmp	r3, #45	; 0x2d
 80a5d00:	d103      	bne.n	80a5d0a <_tzset_unlocked_r+0x132>
 80a5d02:	3501      	adds	r5, #1
 80a5d04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a5d08:	e003      	b.n	80a5d12 <_tzset_unlocked_r+0x13a>
 80a5d0a:	2b2b      	cmp	r3, #43	; 0x2b
 80a5d0c:	bf08      	it	eq
 80a5d0e:	3501      	addeq	r5, #1
 80a5d10:	2701      	movs	r7, #1
 80a5d12:	2300      	movs	r3, #0
 80a5d14:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5d18:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5d1c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5d20:	930a      	str	r3, [sp, #40]	; 0x28
 80a5d22:	9603      	str	r6, [sp, #12]
 80a5d24:	f8cd a008 	str.w	sl, [sp, #8]
 80a5d28:	9601      	str	r6, [sp, #4]
 80a5d2a:	f8cd b000 	str.w	fp, [sp]
 80a5d2e:	4633      	mov	r3, r6
 80a5d30:	aa07      	add	r2, sp, #28
 80a5d32:	4965      	ldr	r1, [pc, #404]	; (80a5ec8 <_tzset_unlocked_r+0x2f0>)
 80a5d34:	4628      	mov	r0, r5
 80a5d36:	f7fc f96b 	bl	80a2010 <siscanf>
 80a5d3a:	2800      	cmp	r0, #0
 80a5d3c:	dc04      	bgt.n	80a5d48 <_tzset_unlocked_r+0x170>
 80a5d3e:	6a23      	ldr	r3, [r4, #32]
 80a5d40:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5d44:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a5d46:	e00e      	b.n	80a5d66 <_tzset_unlocked_r+0x18e>
 80a5d48:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5d4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5d50:	213c      	movs	r1, #60	; 0x3c
 80a5d52:	fb01 3302 	mla	r3, r1, r2, r3
 80a5d56:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5d5a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5d5e:	fb01 3302 	mla	r3, r1, r2, r3
 80a5d62:	435f      	muls	r7, r3
 80a5d64:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a5d66:	4627      	mov	r7, r4
 80a5d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d6a:	f04f 0900 	mov.w	r9, #0
 80a5d6e:	441d      	add	r5, r3
 80a5d70:	782b      	ldrb	r3, [r5, #0]
 80a5d72:	2b2c      	cmp	r3, #44	; 0x2c
 80a5d74:	bf08      	it	eq
 80a5d76:	3501      	addeq	r5, #1
 80a5d78:	f895 8000 	ldrb.w	r8, [r5]
 80a5d7c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5d80:	d126      	bne.n	80a5dd0 <_tzset_unlocked_r+0x1f8>
 80a5d82:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5d86:	9302      	str	r3, [sp, #8]
 80a5d88:	ab09      	add	r3, sp, #36	; 0x24
 80a5d8a:	9300      	str	r3, [sp, #0]
 80a5d8c:	9603      	str	r6, [sp, #12]
 80a5d8e:	9601      	str	r6, [sp, #4]
 80a5d90:	4633      	mov	r3, r6
 80a5d92:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5d96:	494d      	ldr	r1, [pc, #308]	; (80a5ecc <_tzset_unlocked_r+0x2f4>)
 80a5d98:	4628      	mov	r0, r5
 80a5d9a:	f7fc f939 	bl	80a2010 <siscanf>
 80a5d9e:	2803      	cmp	r0, #3
 80a5da0:	d17e      	bne.n	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5da2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5da6:	1e4b      	subs	r3, r1, #1
 80a5da8:	2b0b      	cmp	r3, #11
 80a5daa:	d879      	bhi.n	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5dac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5db0:	1e53      	subs	r3, r2, #1
 80a5db2:	2b04      	cmp	r3, #4
 80a5db4:	d874      	bhi.n	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5db6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5dba:	2b06      	cmp	r3, #6
 80a5dbc:	d870      	bhi.n	80a5ea0 <_tzset_unlocked_r+0x2c8>
 80a5dbe:	f887 8008 	strb.w	r8, [r7, #8]
 80a5dc2:	60f9      	str	r1, [r7, #12]
 80a5dc4:	613a      	str	r2, [r7, #16]
 80a5dc6:	617b      	str	r3, [r7, #20]
 80a5dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5dca:	eb05 0803 	add.w	r8, r5, r3
 80a5dce:	e02a      	b.n	80a5e26 <_tzset_unlocked_r+0x24e>
 80a5dd0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5dd4:	bf06      	itte	eq
 80a5dd6:	4643      	moveq	r3, r8
 80a5dd8:	3501      	addeq	r5, #1
 80a5dda:	2344      	movne	r3, #68	; 0x44
 80a5ddc:	220a      	movs	r2, #10
 80a5dde:	a90b      	add	r1, sp, #44	; 0x2c
 80a5de0:	4628      	mov	r0, r5
 80a5de2:	9305      	str	r3, [sp, #20]
 80a5de4:	f7ff fe3e 	bl	80a5a64 <strtoul>
 80a5de8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5dec:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5df0:	4545      	cmp	r5, r8
 80a5df2:	9b05      	ldr	r3, [sp, #20]
 80a5df4:	d114      	bne.n	80a5e20 <_tzset_unlocked_r+0x248>
 80a5df6:	234d      	movs	r3, #77	; 0x4d
 80a5df8:	f1b9 0f00 	cmp.w	r9, #0
 80a5dfc:	d107      	bne.n	80a5e0e <_tzset_unlocked_r+0x236>
 80a5dfe:	7223      	strb	r3, [r4, #8]
 80a5e00:	2303      	movs	r3, #3
 80a5e02:	60e3      	str	r3, [r4, #12]
 80a5e04:	2302      	movs	r3, #2
 80a5e06:	6123      	str	r3, [r4, #16]
 80a5e08:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5e0c:	e00b      	b.n	80a5e26 <_tzset_unlocked_r+0x24e>
 80a5e0e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a5e12:	230b      	movs	r3, #11
 80a5e14:	62a3      	str	r3, [r4, #40]	; 0x28
 80a5e16:	2301      	movs	r3, #1
 80a5e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a5e1a:	2300      	movs	r3, #0
 80a5e1c:	6323      	str	r3, [r4, #48]	; 0x30
 80a5e1e:	e002      	b.n	80a5e26 <_tzset_unlocked_r+0x24e>
 80a5e20:	b280      	uxth	r0, r0
 80a5e22:	723b      	strb	r3, [r7, #8]
 80a5e24:	6178      	str	r0, [r7, #20]
 80a5e26:	2302      	movs	r3, #2
 80a5e28:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5e2c:	2300      	movs	r3, #0
 80a5e2e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5e32:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5e36:	930a      	str	r3, [sp, #40]	; 0x28
 80a5e38:	f898 3000 	ldrb.w	r3, [r8]
 80a5e3c:	2b2f      	cmp	r3, #47	; 0x2f
 80a5e3e:	d10b      	bne.n	80a5e58 <_tzset_unlocked_r+0x280>
 80a5e40:	9603      	str	r6, [sp, #12]
 80a5e42:	f8cd a008 	str.w	sl, [sp, #8]
 80a5e46:	9601      	str	r6, [sp, #4]
 80a5e48:	f8cd b000 	str.w	fp, [sp]
 80a5e4c:	4633      	mov	r3, r6
 80a5e4e:	aa07      	add	r2, sp, #28
 80a5e50:	491f      	ldr	r1, [pc, #124]	; (80a5ed0 <_tzset_unlocked_r+0x2f8>)
 80a5e52:	4640      	mov	r0, r8
 80a5e54:	f7fc f8dc 	bl	80a2010 <siscanf>
 80a5e58:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5e5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5e60:	213c      	movs	r1, #60	; 0x3c
 80a5e62:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5e6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5e6e:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e72:	61bb      	str	r3, [r7, #24]
 80a5e74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5e76:	f109 0901 	add.w	r9, r9, #1
 80a5e7a:	f1b9 0f02 	cmp.w	r9, #2
 80a5e7e:	4445      	add	r5, r8
 80a5e80:	f107 071c 	add.w	r7, r7, #28
 80a5e84:	f47f af74 	bne.w	80a5d70 <_tzset_unlocked_r+0x198>
 80a5e88:	6860      	ldr	r0, [r4, #4]
 80a5e8a:	f7ff fdf5 	bl	80a5a78 <__tzcalc_limits>
 80a5e8e:	6a22      	ldr	r2, [r4, #32]
 80a5e90:	4b07      	ldr	r3, [pc, #28]	; (80a5eb0 <_tzset_unlocked_r+0x2d8>)
 80a5e92:	601a      	str	r2, [r3, #0]
 80a5e94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5e96:	1a9b      	subs	r3, r3, r2
 80a5e98:	4a07      	ldr	r2, [pc, #28]	; (80a5eb8 <_tzset_unlocked_r+0x2e0>)
 80a5e9a:	bf18      	it	ne
 80a5e9c:	2301      	movne	r3, #1
 80a5e9e:	6013      	str	r3, [r2, #0]
 80a5ea0:	b00d      	add	sp, #52	; 0x34
 80a5ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5ea6:	bf00      	nop
 80a5ea8:	080a7668 	.word	0x080a7668
 80a5eac:	20000970 	.word	0x20000970
 80a5eb0:	20000978 	.word	0x20000978
 80a5eb4:	080a766b 	.word	0x080a766b
 80a5eb8:	20000974 	.word	0x20000974
 80a5ebc:	2000020c 	.word	0x2000020c
 80a5ec0:	20000963 	.word	0x20000963
 80a5ec4:	080a766f 	.word	0x080a766f
 80a5ec8:	080a7692 	.word	0x080a7692
 80a5ecc:	080a767e 	.word	0x080a767e
 80a5ed0:	080a7691 	.word	0x080a7691
 80a5ed4:	20000958 	.word	0x20000958

080a5ed8 <rshift>:
 80a5ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5eda:	6906      	ldr	r6, [r0, #16]
 80a5edc:	114b      	asrs	r3, r1, #5
 80a5ede:	42b3      	cmp	r3, r6
 80a5ee0:	f100 0514 	add.w	r5, r0, #20
 80a5ee4:	da27      	bge.n	80a5f36 <rshift+0x5e>
 80a5ee6:	f011 011f 	ands.w	r1, r1, #31
 80a5eea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a5eee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a5ef2:	d101      	bne.n	80a5ef8 <rshift+0x20>
 80a5ef4:	4629      	mov	r1, r5
 80a5ef6:	e016      	b.n	80a5f26 <rshift+0x4e>
 80a5ef8:	1d14      	adds	r4, r2, #4
 80a5efa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a5efe:	462b      	mov	r3, r5
 80a5f00:	f1c1 0e20 	rsb	lr, r1, #32
 80a5f04:	40ca      	lsrs	r2, r1
 80a5f06:	42b4      	cmp	r4, r6
 80a5f08:	d209      	bcs.n	80a5f1e <rshift+0x46>
 80a5f0a:	6827      	ldr	r7, [r4, #0]
 80a5f0c:	fa07 f70e 	lsl.w	r7, r7, lr
 80a5f10:	433a      	orrs	r2, r7
 80a5f12:	f843 2b04 	str.w	r2, [r3], #4
 80a5f16:	f854 2b04 	ldr.w	r2, [r4], #4
 80a5f1a:	40ca      	lsrs	r2, r1
 80a5f1c:	e7f3      	b.n	80a5f06 <rshift+0x2e>
 80a5f1e:	601a      	str	r2, [r3, #0]
 80a5f20:	b152      	cbz	r2, 80a5f38 <rshift+0x60>
 80a5f22:	3304      	adds	r3, #4
 80a5f24:	e008      	b.n	80a5f38 <rshift+0x60>
 80a5f26:	42b2      	cmp	r2, r6
 80a5f28:	460b      	mov	r3, r1
 80a5f2a:	d205      	bcs.n	80a5f38 <rshift+0x60>
 80a5f2c:	f852 3b04 	ldr.w	r3, [r2], #4
 80a5f30:	f841 3b04 	str.w	r3, [r1], #4
 80a5f34:	e7f7      	b.n	80a5f26 <rshift+0x4e>
 80a5f36:	462b      	mov	r3, r5
 80a5f38:	1b5b      	subs	r3, r3, r5
 80a5f3a:	109b      	asrs	r3, r3, #2
 80a5f3c:	6103      	str	r3, [r0, #16]
 80a5f3e:	b903      	cbnz	r3, 80a5f42 <rshift+0x6a>
 80a5f40:	6143      	str	r3, [r0, #20]
 80a5f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a5f44 <__hexdig_fun>:
 80a5f44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a5f48:	2b09      	cmp	r3, #9
 80a5f4a:	d801      	bhi.n	80a5f50 <__hexdig_fun+0xc>
 80a5f4c:	3820      	subs	r0, #32
 80a5f4e:	e00a      	b.n	80a5f66 <__hexdig_fun+0x22>
 80a5f50:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a5f54:	2b05      	cmp	r3, #5
 80a5f56:	d801      	bhi.n	80a5f5c <__hexdig_fun+0x18>
 80a5f58:	3847      	subs	r0, #71	; 0x47
 80a5f5a:	e004      	b.n	80a5f66 <__hexdig_fun+0x22>
 80a5f5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a5f60:	2b05      	cmp	r3, #5
 80a5f62:	d802      	bhi.n	80a5f6a <__hexdig_fun+0x26>
 80a5f64:	3827      	subs	r0, #39	; 0x27
 80a5f66:	b2c0      	uxtb	r0, r0
 80a5f68:	4770      	bx	lr
 80a5f6a:	2000      	movs	r0, #0
 80a5f6c:	4770      	bx	lr

080a5f6e <__gethex>:
 80a5f6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5f72:	b08b      	sub	sp, #44	; 0x2c
 80a5f74:	468a      	mov	sl, r1
 80a5f76:	4690      	mov	r8, r2
 80a5f78:	9306      	str	r3, [sp, #24]
 80a5f7a:	9002      	str	r0, [sp, #8]
 80a5f7c:	f7fe fd9c 	bl	80a4ab8 <_localeconv_r>
 80a5f80:	6803      	ldr	r3, [r0, #0]
 80a5f82:	f04f 0b00 	mov.w	fp, #0
 80a5f86:	4618      	mov	r0, r3
 80a5f88:	9303      	str	r3, [sp, #12]
 80a5f8a:	f7fe fe02 	bl	80a4b92 <strlen>
 80a5f8e:	9b03      	ldr	r3, [sp, #12]
 80a5f90:	9001      	str	r0, [sp, #4]
 80a5f92:	4403      	add	r3, r0
 80a5f94:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a5f98:	9307      	str	r3, [sp, #28]
 80a5f9a:	f8da 3000 	ldr.w	r3, [sl]
 80a5f9e:	3302      	adds	r3, #2
 80a5fa0:	461f      	mov	r7, r3
 80a5fa2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a5fa6:	2830      	cmp	r0, #48	; 0x30
 80a5fa8:	d102      	bne.n	80a5fb0 <__gethex+0x42>
 80a5faa:	f10b 0b01 	add.w	fp, fp, #1
 80a5fae:	e7f7      	b.n	80a5fa0 <__gethex+0x32>
 80a5fb0:	f7ff ffc8 	bl	80a5f44 <__hexdig_fun>
 80a5fb4:	4604      	mov	r4, r0
 80a5fb6:	b9e0      	cbnz	r0, 80a5ff2 <__gethex+0x84>
 80a5fb8:	9a01      	ldr	r2, [sp, #4]
 80a5fba:	9903      	ldr	r1, [sp, #12]
 80a5fbc:	4638      	mov	r0, r7
 80a5fbe:	f7fe fdf0 	bl	80a4ba2 <strncmp>
 80a5fc2:	2800      	cmp	r0, #0
 80a5fc4:	d134      	bne.n	80a6030 <__gethex+0xc2>
 80a5fc6:	9b01      	ldr	r3, [sp, #4]
 80a5fc8:	5cf8      	ldrb	r0, [r7, r3]
 80a5fca:	18fe      	adds	r6, r7, r3
 80a5fcc:	f7ff ffba 	bl	80a5f44 <__hexdig_fun>
 80a5fd0:	b380      	cbz	r0, 80a6034 <__gethex+0xc6>
 80a5fd2:	4633      	mov	r3, r6
 80a5fd4:	7818      	ldrb	r0, [r3, #0]
 80a5fd6:	461f      	mov	r7, r3
 80a5fd8:	2830      	cmp	r0, #48	; 0x30
 80a5fda:	f103 0301 	add.w	r3, r3, #1
 80a5fde:	d0f9      	beq.n	80a5fd4 <__gethex+0x66>
 80a5fe0:	f7ff ffb0 	bl	80a5f44 <__hexdig_fun>
 80a5fe4:	fab0 f580 	clz	r5, r0
 80a5fe8:	4634      	mov	r4, r6
 80a5fea:	096d      	lsrs	r5, r5, #5
 80a5fec:	f04f 0b01 	mov.w	fp, #1
 80a5ff0:	e001      	b.n	80a5ff6 <__gethex+0x88>
 80a5ff2:	2500      	movs	r5, #0
 80a5ff4:	462c      	mov	r4, r5
 80a5ff6:	463a      	mov	r2, r7
 80a5ff8:	4616      	mov	r6, r2
 80a5ffa:	7830      	ldrb	r0, [r6, #0]
 80a5ffc:	3201      	adds	r2, #1
 80a5ffe:	f7ff ffa1 	bl	80a5f44 <__hexdig_fun>
 80a6002:	2800      	cmp	r0, #0
 80a6004:	d1f8      	bne.n	80a5ff8 <__gethex+0x8a>
 80a6006:	9a01      	ldr	r2, [sp, #4]
 80a6008:	9903      	ldr	r1, [sp, #12]
 80a600a:	4630      	mov	r0, r6
 80a600c:	f7fe fdc9 	bl	80a4ba2 <strncmp>
 80a6010:	b950      	cbnz	r0, 80a6028 <__gethex+0xba>
 80a6012:	b954      	cbnz	r4, 80a602a <__gethex+0xbc>
 80a6014:	9b01      	ldr	r3, [sp, #4]
 80a6016:	18f4      	adds	r4, r6, r3
 80a6018:	4622      	mov	r2, r4
 80a601a:	4616      	mov	r6, r2
 80a601c:	7830      	ldrb	r0, [r6, #0]
 80a601e:	3201      	adds	r2, #1
 80a6020:	f7ff ff90 	bl	80a5f44 <__hexdig_fun>
 80a6024:	2800      	cmp	r0, #0
 80a6026:	d1f8      	bne.n	80a601a <__gethex+0xac>
 80a6028:	b134      	cbz	r4, 80a6038 <__gethex+0xca>
 80a602a:	1ba4      	subs	r4, r4, r6
 80a602c:	00a4      	lsls	r4, r4, #2
 80a602e:	e003      	b.n	80a6038 <__gethex+0xca>
 80a6030:	463e      	mov	r6, r7
 80a6032:	e000      	b.n	80a6036 <__gethex+0xc8>
 80a6034:	4604      	mov	r4, r0
 80a6036:	2501      	movs	r5, #1
 80a6038:	7833      	ldrb	r3, [r6, #0]
 80a603a:	2b50      	cmp	r3, #80	; 0x50
 80a603c:	d001      	beq.n	80a6042 <__gethex+0xd4>
 80a603e:	2b70      	cmp	r3, #112	; 0x70
 80a6040:	d12a      	bne.n	80a6098 <__gethex+0x12a>
 80a6042:	7873      	ldrb	r3, [r6, #1]
 80a6044:	2b2b      	cmp	r3, #43	; 0x2b
 80a6046:	d008      	beq.n	80a605a <__gethex+0xec>
 80a6048:	2b2d      	cmp	r3, #45	; 0x2d
 80a604a:	d003      	beq.n	80a6054 <__gethex+0xe6>
 80a604c:	1c71      	adds	r1, r6, #1
 80a604e:	f04f 0900 	mov.w	r9, #0
 80a6052:	e005      	b.n	80a6060 <__gethex+0xf2>
 80a6054:	f04f 0901 	mov.w	r9, #1
 80a6058:	e001      	b.n	80a605e <__gethex+0xf0>
 80a605a:	f04f 0900 	mov.w	r9, #0
 80a605e:	1cb1      	adds	r1, r6, #2
 80a6060:	7808      	ldrb	r0, [r1, #0]
 80a6062:	f7ff ff6f 	bl	80a5f44 <__hexdig_fun>
 80a6066:	1e43      	subs	r3, r0, #1
 80a6068:	b2db      	uxtb	r3, r3
 80a606a:	2b18      	cmp	r3, #24
 80a606c:	d814      	bhi.n	80a6098 <__gethex+0x12a>
 80a606e:	f1a0 0210 	sub.w	r2, r0, #16
 80a6072:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a6076:	f7ff ff65 	bl	80a5f44 <__hexdig_fun>
 80a607a:	1e43      	subs	r3, r0, #1
 80a607c:	b2db      	uxtb	r3, r3
 80a607e:	2b18      	cmp	r3, #24
 80a6080:	d804      	bhi.n	80a608c <__gethex+0x11e>
 80a6082:	230a      	movs	r3, #10
 80a6084:	fb03 0202 	mla	r2, r3, r2, r0
 80a6088:	3a10      	subs	r2, #16
 80a608a:	e7f2      	b.n	80a6072 <__gethex+0x104>
 80a608c:	f1b9 0f00 	cmp.w	r9, #0
 80a6090:	d000      	beq.n	80a6094 <__gethex+0x126>
 80a6092:	4252      	negs	r2, r2
 80a6094:	4414      	add	r4, r2
 80a6096:	e000      	b.n	80a609a <__gethex+0x12c>
 80a6098:	4631      	mov	r1, r6
 80a609a:	f8ca 1000 	str.w	r1, [sl]
 80a609e:	b12d      	cbz	r5, 80a60ac <__gethex+0x13e>
 80a60a0:	f1bb 0f00 	cmp.w	fp, #0
 80a60a4:	bf14      	ite	ne
 80a60a6:	2000      	movne	r0, #0
 80a60a8:	2006      	moveq	r0, #6
 80a60aa:	e17c      	b.n	80a63a6 <__gethex+0x438>
 80a60ac:	4629      	mov	r1, r5
 80a60ae:	1bf3      	subs	r3, r6, r7
 80a60b0:	3b01      	subs	r3, #1
 80a60b2:	2b07      	cmp	r3, #7
 80a60b4:	dd02      	ble.n	80a60bc <__gethex+0x14e>
 80a60b6:	3101      	adds	r1, #1
 80a60b8:	105b      	asrs	r3, r3, #1
 80a60ba:	e7fa      	b.n	80a60b2 <__gethex+0x144>
 80a60bc:	9802      	ldr	r0, [sp, #8]
 80a60be:	f000 fb07 	bl	80a66d0 <_Balloc>
 80a60c2:	f04f 0900 	mov.w	r9, #0
 80a60c6:	4605      	mov	r5, r0
 80a60c8:	46cb      	mov	fp, r9
 80a60ca:	9b01      	ldr	r3, [sp, #4]
 80a60cc:	f100 0a14 	add.w	sl, r0, #20
 80a60d0:	f1c3 0301 	rsb	r3, r3, #1
 80a60d4:	f8cd a010 	str.w	sl, [sp, #16]
 80a60d8:	9308      	str	r3, [sp, #32]
 80a60da:	42b7      	cmp	r7, r6
 80a60dc:	d22f      	bcs.n	80a613e <__gethex+0x1d0>
 80a60de:	1e73      	subs	r3, r6, #1
 80a60e0:	9305      	str	r3, [sp, #20]
 80a60e2:	9a07      	ldr	r2, [sp, #28]
 80a60e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a60e8:	4293      	cmp	r3, r2
 80a60ea:	d00b      	beq.n	80a6104 <__gethex+0x196>
 80a60ec:	f1bb 0f20 	cmp.w	fp, #32
 80a60f0:	d116      	bne.n	80a6120 <__gethex+0x1b2>
 80a60f2:	9b04      	ldr	r3, [sp, #16]
 80a60f4:	f8c3 9000 	str.w	r9, [r3]
 80a60f8:	3304      	adds	r3, #4
 80a60fa:	f04f 0900 	mov.w	r9, #0
 80a60fe:	9304      	str	r3, [sp, #16]
 80a6100:	46cb      	mov	fp, r9
 80a6102:	e00d      	b.n	80a6120 <__gethex+0x1b2>
 80a6104:	9b05      	ldr	r3, [sp, #20]
 80a6106:	9a08      	ldr	r2, [sp, #32]
 80a6108:	4413      	add	r3, r2
 80a610a:	429f      	cmp	r7, r3
 80a610c:	d8ee      	bhi.n	80a60ec <__gethex+0x17e>
 80a610e:	4618      	mov	r0, r3
 80a6110:	9a01      	ldr	r2, [sp, #4]
 80a6112:	9903      	ldr	r1, [sp, #12]
 80a6114:	9309      	str	r3, [sp, #36]	; 0x24
 80a6116:	f7fe fd44 	bl	80a4ba2 <strncmp>
 80a611a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a611c:	b168      	cbz	r0, 80a613a <__gethex+0x1cc>
 80a611e:	e7e5      	b.n	80a60ec <__gethex+0x17e>
 80a6120:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a6124:	f7ff ff0e 	bl	80a5f44 <__hexdig_fun>
 80a6128:	f000 000f 	and.w	r0, r0, #15
 80a612c:	fa00 f00b 	lsl.w	r0, r0, fp
 80a6130:	9b05      	ldr	r3, [sp, #20]
 80a6132:	ea49 0900 	orr.w	r9, r9, r0
 80a6136:	f10b 0b04 	add.w	fp, fp, #4
 80a613a:	461e      	mov	r6, r3
 80a613c:	e7cd      	b.n	80a60da <__gethex+0x16c>
 80a613e:	9804      	ldr	r0, [sp, #16]
 80a6140:	f840 9b04 	str.w	r9, [r0], #4
 80a6144:	ebca 0000 	rsb	r0, sl, r0
 80a6148:	1080      	asrs	r0, r0, #2
 80a614a:	6128      	str	r0, [r5, #16]
 80a614c:	0147      	lsls	r7, r0, #5
 80a614e:	4648      	mov	r0, r9
 80a6150:	f000 fb83 	bl	80a685a <__hi0bits>
 80a6154:	f8d8 6000 	ldr.w	r6, [r8]
 80a6158:	1a38      	subs	r0, r7, r0
 80a615a:	42b0      	cmp	r0, r6
 80a615c:	dd26      	ble.n	80a61ac <__gethex+0x23e>
 80a615e:	1b87      	subs	r7, r0, r6
 80a6160:	4639      	mov	r1, r7
 80a6162:	4628      	mov	r0, r5
 80a6164:	f000 fe7b 	bl	80a6e5e <__any_on>
 80a6168:	b1c8      	cbz	r0, 80a619e <__gethex+0x230>
 80a616a:	1e7b      	subs	r3, r7, #1
 80a616c:	1159      	asrs	r1, r3, #5
 80a616e:	f003 021f 	and.w	r2, r3, #31
 80a6172:	f04f 0901 	mov.w	r9, #1
 80a6176:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a617a:	fa09 f202 	lsl.w	r2, r9, r2
 80a617e:	420a      	tst	r2, r1
 80a6180:	d00e      	beq.n	80a61a0 <__gethex+0x232>
 80a6182:	454b      	cmp	r3, r9
 80a6184:	dc02      	bgt.n	80a618c <__gethex+0x21e>
 80a6186:	f04f 0902 	mov.w	r9, #2
 80a618a:	e009      	b.n	80a61a0 <__gethex+0x232>
 80a618c:	1eb9      	subs	r1, r7, #2
 80a618e:	4628      	mov	r0, r5
 80a6190:	f000 fe65 	bl	80a6e5e <__any_on>
 80a6194:	2800      	cmp	r0, #0
 80a6196:	d0f6      	beq.n	80a6186 <__gethex+0x218>
 80a6198:	f04f 0903 	mov.w	r9, #3
 80a619c:	e000      	b.n	80a61a0 <__gethex+0x232>
 80a619e:	4681      	mov	r9, r0
 80a61a0:	4639      	mov	r1, r7
 80a61a2:	4628      	mov	r0, r5
 80a61a4:	f7ff fe98 	bl	80a5ed8 <rshift>
 80a61a8:	443c      	add	r4, r7
 80a61aa:	e00c      	b.n	80a61c6 <__gethex+0x258>
 80a61ac:	da09      	bge.n	80a61c2 <__gethex+0x254>
 80a61ae:	1a37      	subs	r7, r6, r0
 80a61b0:	4629      	mov	r1, r5
 80a61b2:	463a      	mov	r2, r7
 80a61b4:	9802      	ldr	r0, [sp, #8]
 80a61b6:	f000 fc85 	bl	80a6ac4 <__lshift>
 80a61ba:	4605      	mov	r5, r0
 80a61bc:	1be4      	subs	r4, r4, r7
 80a61be:	f100 0a14 	add.w	sl, r0, #20
 80a61c2:	f04f 0900 	mov.w	r9, #0
 80a61c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a61ca:	429c      	cmp	r4, r3
 80a61cc:	dd08      	ble.n	80a61e0 <__gethex+0x272>
 80a61ce:	9802      	ldr	r0, [sp, #8]
 80a61d0:	4629      	mov	r1, r5
 80a61d2:	f000 fab2 	bl	80a673a <_Bfree>
 80a61d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a61d8:	2300      	movs	r3, #0
 80a61da:	6013      	str	r3, [r2, #0]
 80a61dc:	20a3      	movs	r0, #163	; 0xa3
 80a61de:	e0e2      	b.n	80a63a6 <__gethex+0x438>
 80a61e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a61e4:	4284      	cmp	r4, r0
 80a61e6:	da53      	bge.n	80a6290 <__gethex+0x322>
 80a61e8:	1b04      	subs	r4, r0, r4
 80a61ea:	42a6      	cmp	r6, r4
 80a61ec:	dc2e      	bgt.n	80a624c <__gethex+0x2de>
 80a61ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a61f2:	2b02      	cmp	r3, #2
 80a61f4:	d01a      	beq.n	80a622c <__gethex+0x2be>
 80a61f6:	2b03      	cmp	r3, #3
 80a61f8:	d01c      	beq.n	80a6234 <__gethex+0x2c6>
 80a61fa:	2b01      	cmp	r3, #1
 80a61fc:	d11d      	bne.n	80a623a <__gethex+0x2cc>
 80a61fe:	42a6      	cmp	r6, r4
 80a6200:	d11b      	bne.n	80a623a <__gethex+0x2cc>
 80a6202:	2e01      	cmp	r6, #1
 80a6204:	dc0b      	bgt.n	80a621e <__gethex+0x2b0>
 80a6206:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a620a:	9a06      	ldr	r2, [sp, #24]
 80a620c:	2062      	movs	r0, #98	; 0x62
 80a620e:	6013      	str	r3, [r2, #0]
 80a6210:	2301      	movs	r3, #1
 80a6212:	612b      	str	r3, [r5, #16]
 80a6214:	f8ca 3000 	str.w	r3, [sl]
 80a6218:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a621a:	601d      	str	r5, [r3, #0]
 80a621c:	e0c3      	b.n	80a63a6 <__gethex+0x438>
 80a621e:	1e71      	subs	r1, r6, #1
 80a6220:	4628      	mov	r0, r5
 80a6222:	f000 fe1c 	bl	80a6e5e <__any_on>
 80a6226:	2800      	cmp	r0, #0
 80a6228:	d1ed      	bne.n	80a6206 <__gethex+0x298>
 80a622a:	e006      	b.n	80a623a <__gethex+0x2cc>
 80a622c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a622e:	2b00      	cmp	r3, #0
 80a6230:	d0e9      	beq.n	80a6206 <__gethex+0x298>
 80a6232:	e002      	b.n	80a623a <__gethex+0x2cc>
 80a6234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6236:	2b00      	cmp	r3, #0
 80a6238:	d1e5      	bne.n	80a6206 <__gethex+0x298>
 80a623a:	9802      	ldr	r0, [sp, #8]
 80a623c:	4629      	mov	r1, r5
 80a623e:	f000 fa7c 	bl	80a673a <_Bfree>
 80a6242:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a6244:	2300      	movs	r3, #0
 80a6246:	6013      	str	r3, [r2, #0]
 80a6248:	2050      	movs	r0, #80	; 0x50
 80a624a:	e0ac      	b.n	80a63a6 <__gethex+0x438>
 80a624c:	1e67      	subs	r7, r4, #1
 80a624e:	f1b9 0f00 	cmp.w	r9, #0
 80a6252:	d106      	bne.n	80a6262 <__gethex+0x2f4>
 80a6254:	b13f      	cbz	r7, 80a6266 <__gethex+0x2f8>
 80a6256:	4639      	mov	r1, r7
 80a6258:	4628      	mov	r0, r5
 80a625a:	f000 fe00 	bl	80a6e5e <__any_on>
 80a625e:	4681      	mov	r9, r0
 80a6260:	e001      	b.n	80a6266 <__gethex+0x2f8>
 80a6262:	f04f 0901 	mov.w	r9, #1
 80a6266:	117a      	asrs	r2, r7, #5
 80a6268:	2301      	movs	r3, #1
 80a626a:	f007 071f 	and.w	r7, r7, #31
 80a626e:	fa03 f707 	lsl.w	r7, r3, r7
 80a6272:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a6276:	4621      	mov	r1, r4
 80a6278:	421f      	tst	r7, r3
 80a627a:	4628      	mov	r0, r5
 80a627c:	bf18      	it	ne
 80a627e:	f049 0902 	orrne.w	r9, r9, #2
 80a6282:	1b36      	subs	r6, r6, r4
 80a6284:	f7ff fe28 	bl	80a5ed8 <rshift>
 80a6288:	2702      	movs	r7, #2
 80a628a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a628e:	e000      	b.n	80a6292 <__gethex+0x324>
 80a6290:	2701      	movs	r7, #1
 80a6292:	f1b9 0f00 	cmp.w	r9, #0
 80a6296:	f000 8081 	beq.w	80a639c <__gethex+0x42e>
 80a629a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a629e:	2b02      	cmp	r3, #2
 80a62a0:	d00e      	beq.n	80a62c0 <__gethex+0x352>
 80a62a2:	2b03      	cmp	r3, #3
 80a62a4:	d010      	beq.n	80a62c8 <__gethex+0x35a>
 80a62a6:	2b01      	cmp	r3, #1
 80a62a8:	d176      	bne.n	80a6398 <__gethex+0x42a>
 80a62aa:	f019 0f02 	tst.w	r9, #2
 80a62ae:	d073      	beq.n	80a6398 <__gethex+0x42a>
 80a62b0:	f8da 0000 	ldr.w	r0, [sl]
 80a62b4:	ea49 0900 	orr.w	r9, r9, r0
 80a62b8:	f019 0f01 	tst.w	r9, #1
 80a62bc:	d107      	bne.n	80a62ce <__gethex+0x360>
 80a62be:	e06b      	b.n	80a6398 <__gethex+0x42a>
 80a62c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a62c2:	f1c3 0301 	rsb	r3, r3, #1
 80a62c6:	9315      	str	r3, [sp, #84]	; 0x54
 80a62c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a62ca:	2b00      	cmp	r3, #0
 80a62cc:	d064      	beq.n	80a6398 <__gethex+0x42a>
 80a62ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a62d2:	f105 0314 	add.w	r3, r5, #20
 80a62d6:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a62da:	eb03 0109 	add.w	r1, r3, r9
 80a62de:	2000      	movs	r0, #0
 80a62e0:	681a      	ldr	r2, [r3, #0]
 80a62e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a62e6:	d002      	beq.n	80a62ee <__gethex+0x380>
 80a62e8:	3201      	adds	r2, #1
 80a62ea:	601a      	str	r2, [r3, #0]
 80a62ec:	e020      	b.n	80a6330 <__gethex+0x3c2>
 80a62ee:	f843 0b04 	str.w	r0, [r3], #4
 80a62f2:	4299      	cmp	r1, r3
 80a62f4:	d8f4      	bhi.n	80a62e0 <__gethex+0x372>
 80a62f6:	68ab      	ldr	r3, [r5, #8]
 80a62f8:	459a      	cmp	sl, r3
 80a62fa:	db12      	blt.n	80a6322 <__gethex+0x3b4>
 80a62fc:	6869      	ldr	r1, [r5, #4]
 80a62fe:	9802      	ldr	r0, [sp, #8]
 80a6300:	3101      	adds	r1, #1
 80a6302:	f000 f9e5 	bl	80a66d0 <_Balloc>
 80a6306:	4683      	mov	fp, r0
 80a6308:	692a      	ldr	r2, [r5, #16]
 80a630a:	f105 010c 	add.w	r1, r5, #12
 80a630e:	3202      	adds	r2, #2
 80a6310:	0092      	lsls	r2, r2, #2
 80a6312:	300c      	adds	r0, #12
 80a6314:	f7fe fbd4 	bl	80a4ac0 <memcpy>
 80a6318:	4629      	mov	r1, r5
 80a631a:	9802      	ldr	r0, [sp, #8]
 80a631c:	f000 fa0d 	bl	80a673a <_Bfree>
 80a6320:	465d      	mov	r5, fp
 80a6322:	692b      	ldr	r3, [r5, #16]
 80a6324:	1c5a      	adds	r2, r3, #1
 80a6326:	612a      	str	r2, [r5, #16]
 80a6328:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a632c:	2201      	movs	r2, #1
 80a632e:	615a      	str	r2, [r3, #20]
 80a6330:	2f02      	cmp	r7, #2
 80a6332:	f105 0214 	add.w	r2, r5, #20
 80a6336:	d111      	bne.n	80a635c <__gethex+0x3ee>
 80a6338:	f8d8 3000 	ldr.w	r3, [r8]
 80a633c:	3b01      	subs	r3, #1
 80a633e:	429e      	cmp	r6, r3
 80a6340:	d127      	bne.n	80a6392 <__gethex+0x424>
 80a6342:	1171      	asrs	r1, r6, #5
 80a6344:	2301      	movs	r3, #1
 80a6346:	f006 061f 	and.w	r6, r6, #31
 80a634a:	fa03 f606 	lsl.w	r6, r3, r6
 80a634e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a6352:	421e      	tst	r6, r3
 80a6354:	bf0c      	ite	eq
 80a6356:	2702      	moveq	r7, #2
 80a6358:	2701      	movne	r7, #1
 80a635a:	e01a      	b.n	80a6392 <__gethex+0x424>
 80a635c:	692b      	ldr	r3, [r5, #16]
 80a635e:	459a      	cmp	sl, r3
 80a6360:	da0a      	bge.n	80a6378 <__gethex+0x40a>
 80a6362:	2101      	movs	r1, #1
 80a6364:	4628      	mov	r0, r5
 80a6366:	f7ff fdb7 	bl	80a5ed8 <rshift>
 80a636a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a636e:	3401      	adds	r4, #1
 80a6370:	429c      	cmp	r4, r3
 80a6372:	f73f af2c 	bgt.w	80a61ce <__gethex+0x260>
 80a6376:	e00b      	b.n	80a6390 <__gethex+0x422>
 80a6378:	f016 061f 	ands.w	r6, r6, #31
 80a637c:	d008      	beq.n	80a6390 <__gethex+0x422>
 80a637e:	4491      	add	r9, r2
 80a6380:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a6384:	f000 fa69 	bl	80a685a <__hi0bits>
 80a6388:	f1c6 0620 	rsb	r6, r6, #32
 80a638c:	42b0      	cmp	r0, r6
 80a638e:	dbe8      	blt.n	80a6362 <__gethex+0x3f4>
 80a6390:	2701      	movs	r7, #1
 80a6392:	f047 0720 	orr.w	r7, r7, #32
 80a6396:	e001      	b.n	80a639c <__gethex+0x42e>
 80a6398:	f047 0710 	orr.w	r7, r7, #16
 80a639c:	4638      	mov	r0, r7
 80a639e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a63a0:	601d      	str	r5, [r3, #0]
 80a63a2:	9b06      	ldr	r3, [sp, #24]
 80a63a4:	601c      	str	r4, [r3, #0]
 80a63a6:	b00b      	add	sp, #44	; 0x2c
 80a63a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a63ac <L_shift>:
 80a63ac:	f1c2 0208 	rsb	r2, r2, #8
 80a63b0:	0092      	lsls	r2, r2, #2
 80a63b2:	b570      	push	{r4, r5, r6, lr}
 80a63b4:	f1c2 0620 	rsb	r6, r2, #32
 80a63b8:	6843      	ldr	r3, [r0, #4]
 80a63ba:	6805      	ldr	r5, [r0, #0]
 80a63bc:	fa03 f406 	lsl.w	r4, r3, r6
 80a63c0:	432c      	orrs	r4, r5
 80a63c2:	40d3      	lsrs	r3, r2
 80a63c4:	6004      	str	r4, [r0, #0]
 80a63c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80a63ca:	4288      	cmp	r0, r1
 80a63cc:	d3f4      	bcc.n	80a63b8 <L_shift+0xc>
 80a63ce:	bd70      	pop	{r4, r5, r6, pc}

080a63d0 <__match>:
 80a63d0:	b530      	push	{r4, r5, lr}
 80a63d2:	6803      	ldr	r3, [r0, #0]
 80a63d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a63d8:	3301      	adds	r3, #1
 80a63da:	b14c      	cbz	r4, 80a63f0 <__match+0x20>
 80a63dc:	781a      	ldrb	r2, [r3, #0]
 80a63de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a63e2:	2d19      	cmp	r5, #25
 80a63e4:	bf98      	it	ls
 80a63e6:	3220      	addls	r2, #32
 80a63e8:	42a2      	cmp	r2, r4
 80a63ea:	d0f3      	beq.n	80a63d4 <__match+0x4>
 80a63ec:	2000      	movs	r0, #0
 80a63ee:	bd30      	pop	{r4, r5, pc}
 80a63f0:	6003      	str	r3, [r0, #0]
 80a63f2:	2001      	movs	r0, #1
 80a63f4:	bd30      	pop	{r4, r5, pc}

080a63f6 <__hexnan>:
 80a63f6:	680b      	ldr	r3, [r1, #0]
 80a63f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a63fc:	115e      	asrs	r6, r3, #5
 80a63fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a6402:	f013 031f 	ands.w	r3, r3, #31
 80a6406:	bf18      	it	ne
 80a6408:	3604      	addne	r6, #4
 80a640a:	1f35      	subs	r5, r6, #4
 80a640c:	4617      	mov	r7, r2
 80a640e:	2200      	movs	r2, #0
 80a6410:	4682      	mov	sl, r0
 80a6412:	46a8      	mov	r8, r5
 80a6414:	462c      	mov	r4, r5
 80a6416:	4691      	mov	r9, r2
 80a6418:	b085      	sub	sp, #20
 80a641a:	f8d0 b000 	ldr.w	fp, [r0]
 80a641e:	9301      	str	r3, [sp, #4]
 80a6420:	f846 2c04 	str.w	r2, [r6, #-4]
 80a6424:	9200      	str	r2, [sp, #0]
 80a6426:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a642a:	2900      	cmp	r1, #0
 80a642c:	d03c      	beq.n	80a64a8 <__hexnan+0xb2>
 80a642e:	4608      	mov	r0, r1
 80a6430:	9203      	str	r2, [sp, #12]
 80a6432:	9102      	str	r1, [sp, #8]
 80a6434:	f7ff fd86 	bl	80a5f44 <__hexdig_fun>
 80a6438:	9a03      	ldr	r2, [sp, #12]
 80a643a:	bb00      	cbnz	r0, 80a647e <__hexnan+0x88>
 80a643c:	9902      	ldr	r1, [sp, #8]
 80a643e:	2920      	cmp	r1, #32
 80a6440:	d816      	bhi.n	80a6470 <__hexnan+0x7a>
 80a6442:	9b00      	ldr	r3, [sp, #0]
 80a6444:	4599      	cmp	r9, r3
 80a6446:	ddee      	ble.n	80a6426 <__hexnan+0x30>
 80a6448:	4544      	cmp	r4, r8
 80a644a:	d205      	bcs.n	80a6458 <__hexnan+0x62>
 80a644c:	2a07      	cmp	r2, #7
 80a644e:	dc03      	bgt.n	80a6458 <__hexnan+0x62>
 80a6450:	4641      	mov	r1, r8
 80a6452:	4620      	mov	r0, r4
 80a6454:	f7ff ffaa 	bl	80a63ac <L_shift>
 80a6458:	42bc      	cmp	r4, r7
 80a645a:	d923      	bls.n	80a64a4 <__hexnan+0xae>
 80a645c:	2300      	movs	r3, #0
 80a645e:	f1a4 0804 	sub.w	r8, r4, #4
 80a6462:	f844 3c04 	str.w	r3, [r4, #-4]
 80a6466:	f8cd 9000 	str.w	r9, [sp]
 80a646a:	4644      	mov	r4, r8
 80a646c:	461a      	mov	r2, r3
 80a646e:	e7da      	b.n	80a6426 <__hexnan+0x30>
 80a6470:	2929      	cmp	r1, #41	; 0x29
 80a6472:	d148      	bne.n	80a6506 <__hexnan+0x110>
 80a6474:	f10b 0301 	add.w	r3, fp, #1
 80a6478:	f8ca 3000 	str.w	r3, [sl]
 80a647c:	e014      	b.n	80a64a8 <__hexnan+0xb2>
 80a647e:	3201      	adds	r2, #1
 80a6480:	2a08      	cmp	r2, #8
 80a6482:	f109 0901 	add.w	r9, r9, #1
 80a6486:	dd06      	ble.n	80a6496 <__hexnan+0xa0>
 80a6488:	42bc      	cmp	r4, r7
 80a648a:	d9cc      	bls.n	80a6426 <__hexnan+0x30>
 80a648c:	2300      	movs	r3, #0
 80a648e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a6492:	2201      	movs	r2, #1
 80a6494:	3c04      	subs	r4, #4
 80a6496:	6821      	ldr	r1, [r4, #0]
 80a6498:	f000 000f 	and.w	r0, r0, #15
 80a649c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a64a0:	6020      	str	r0, [r4, #0]
 80a64a2:	e7c0      	b.n	80a6426 <__hexnan+0x30>
 80a64a4:	2208      	movs	r2, #8
 80a64a6:	e7be      	b.n	80a6426 <__hexnan+0x30>
 80a64a8:	f1b9 0f00 	cmp.w	r9, #0
 80a64ac:	d02b      	beq.n	80a6506 <__hexnan+0x110>
 80a64ae:	4544      	cmp	r4, r8
 80a64b0:	d205      	bcs.n	80a64be <__hexnan+0xc8>
 80a64b2:	2a07      	cmp	r2, #7
 80a64b4:	dc03      	bgt.n	80a64be <__hexnan+0xc8>
 80a64b6:	4641      	mov	r1, r8
 80a64b8:	4620      	mov	r0, r4
 80a64ba:	f7ff ff77 	bl	80a63ac <L_shift>
 80a64be:	42bc      	cmp	r4, r7
 80a64c0:	d90c      	bls.n	80a64dc <__hexnan+0xe6>
 80a64c2:	463b      	mov	r3, r7
 80a64c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80a64c8:	42a5      	cmp	r5, r4
 80a64ca:	f843 2b04 	str.w	r2, [r3], #4
 80a64ce:	d2f9      	bcs.n	80a64c4 <__hexnan+0xce>
 80a64d0:	2200      	movs	r2, #0
 80a64d2:	f843 2b04 	str.w	r2, [r3], #4
 80a64d6:	429d      	cmp	r5, r3
 80a64d8:	d2fb      	bcs.n	80a64d2 <__hexnan+0xdc>
 80a64da:	e00b      	b.n	80a64f4 <__hexnan+0xfe>
 80a64dc:	9b01      	ldr	r3, [sp, #4]
 80a64de:	b14b      	cbz	r3, 80a64f4 <__hexnan+0xfe>
 80a64e0:	f1c3 0220 	rsb	r2, r3, #32
 80a64e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a64e8:	40d3      	lsrs	r3, r2
 80a64ea:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a64ee:	4013      	ands	r3, r2
 80a64f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80a64f4:	682b      	ldr	r3, [r5, #0]
 80a64f6:	b943      	cbnz	r3, 80a650a <__hexnan+0x114>
 80a64f8:	42bd      	cmp	r5, r7
 80a64fa:	d102      	bne.n	80a6502 <__hexnan+0x10c>
 80a64fc:	2301      	movs	r3, #1
 80a64fe:	602b      	str	r3, [r5, #0]
 80a6500:	e003      	b.n	80a650a <__hexnan+0x114>
 80a6502:	3d04      	subs	r5, #4
 80a6504:	e7f6      	b.n	80a64f4 <__hexnan+0xfe>
 80a6506:	2004      	movs	r0, #4
 80a6508:	e000      	b.n	80a650c <__hexnan+0x116>
 80a650a:	2005      	movs	r0, #5
 80a650c:	b005      	add	sp, #20
 80a650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a6514 <_findenv_r>:
 80a6514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6518:	4607      	mov	r7, r0
 80a651a:	468b      	mov	fp, r1
 80a651c:	4690      	mov	r8, r2
 80a651e:	f000 fcce 	bl	80a6ebe <__env_lock>
 80a6522:	4b19      	ldr	r3, [pc, #100]	; (80a6588 <_findenv_r+0x74>)
 80a6524:	681d      	ldr	r5, [r3, #0]
 80a6526:	469a      	mov	sl, r3
 80a6528:	b13d      	cbz	r5, 80a653a <_findenv_r+0x26>
 80a652a:	465c      	mov	r4, fp
 80a652c:	4623      	mov	r3, r4
 80a652e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6532:	b142      	cbz	r2, 80a6546 <_findenv_r+0x32>
 80a6534:	2a3d      	cmp	r2, #61	; 0x3d
 80a6536:	461c      	mov	r4, r3
 80a6538:	d1f8      	bne.n	80a652c <_findenv_r+0x18>
 80a653a:	4638      	mov	r0, r7
 80a653c:	f000 fcc0 	bl	80a6ec0 <__env_unlock>
 80a6540:	2000      	movs	r0, #0
 80a6542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6546:	ebcb 0404 	rsb	r4, fp, r4
 80a654a:	46a9      	mov	r9, r5
 80a654c:	f859 0b04 	ldr.w	r0, [r9], #4
 80a6550:	2800      	cmp	r0, #0
 80a6552:	d0f2      	beq.n	80a653a <_findenv_r+0x26>
 80a6554:	4622      	mov	r2, r4
 80a6556:	4659      	mov	r1, fp
 80a6558:	f7fe fb23 	bl	80a4ba2 <strncmp>
 80a655c:	b988      	cbnz	r0, 80a6582 <_findenv_r+0x6e>
 80a655e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a6562:	191e      	adds	r6, r3, r4
 80a6564:	5d1b      	ldrb	r3, [r3, r4]
 80a6566:	2b3d      	cmp	r3, #61	; 0x3d
 80a6568:	d10b      	bne.n	80a6582 <_findenv_r+0x6e>
 80a656a:	f8da 3000 	ldr.w	r3, [sl]
 80a656e:	4638      	mov	r0, r7
 80a6570:	1aed      	subs	r5, r5, r3
 80a6572:	10ad      	asrs	r5, r5, #2
 80a6574:	f8c8 5000 	str.w	r5, [r8]
 80a6578:	f000 fca2 	bl	80a6ec0 <__env_unlock>
 80a657c:	1c70      	adds	r0, r6, #1
 80a657e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6582:	464d      	mov	r5, r9
 80a6584:	e7e1      	b.n	80a654a <_findenv_r+0x36>
 80a6586:	bf00      	nop
 80a6588:	20000254 	.word	0x20000254

080a658c <_getenv_r>:
 80a658c:	b507      	push	{r0, r1, r2, lr}
 80a658e:	aa01      	add	r2, sp, #4
 80a6590:	f7ff ffc0 	bl	80a6514 <_findenv_r>
 80a6594:	b003      	add	sp, #12
 80a6596:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a659c <__gettzinfo>:
 80a659c:	4800      	ldr	r0, [pc, #0]	; (80a65a0 <__gettzinfo+0x4>)
 80a659e:	4770      	bx	lr
 80a65a0:	20000214 	.word	0x20000214

080a65a4 <gmtime_r>:
 80a65a4:	6802      	ldr	r2, [r0, #0]
 80a65a6:	4b46      	ldr	r3, [pc, #280]	; (80a66c0 <gmtime_r+0x11c>)
 80a65a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a65aa:	fb92 f4f3 	sdiv	r4, r2, r3
 80a65ae:	fb03 2214 	mls	r2, r3, r4, r2
 80a65b2:	2a00      	cmp	r2, #0
 80a65b4:	bfbc      	itt	lt
 80a65b6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a65ba:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a65be:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a65c2:	fb92 f3f0 	sdiv	r3, r2, r0
 80a65c6:	fb00 2213 	mls	r2, r0, r3, r2
 80a65ca:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a65ce:	608b      	str	r3, [r1, #8]
 80a65d0:	fb92 f3f0 	sdiv	r3, r2, r0
 80a65d4:	fb00 2213 	mls	r2, r0, r3, r2
 80a65d8:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a65dc:	bfac      	ite	ge
 80a65de:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a65e2:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a65e6:	604b      	str	r3, [r1, #4]
 80a65e8:	600a      	str	r2, [r1, #0]
 80a65ea:	2307      	movs	r3, #7
 80a65ec:	1ce2      	adds	r2, r4, #3
 80a65ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80a65f2:	4d34      	ldr	r5, [pc, #208]	; (80a66c4 <gmtime_r+0x120>)
 80a65f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a65f8:	fb94 f5f5 	sdiv	r5, r4, r5
 80a65fc:	1ad3      	subs	r3, r2, r3
 80a65fe:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a6602:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a6606:	618b      	str	r3, [r1, #24]
 80a6608:	4b2f      	ldr	r3, [pc, #188]	; (80a66c8 <gmtime_r+0x124>)
 80a660a:	4830      	ldr	r0, [pc, #192]	; (80a66cc <gmtime_r+0x128>)
 80a660c:	fb03 4405 	mla	r4, r3, r5, r4
 80a6610:	fbb4 f2f2 	udiv	r2, r4, r2
 80a6614:	fbb4 f3f7 	udiv	r3, r4, r7
 80a6618:	fbb4 f0f0 	udiv	r0, r4, r0
 80a661c:	4422      	add	r2, r4
 80a661e:	1ad2      	subs	r2, r2, r3
 80a6620:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a6624:	1a13      	subs	r3, r2, r0
 80a6626:	f240 126d 	movw	r2, #365	; 0x16d
 80a662a:	fbb3 f6f6 	udiv	r6, r3, r6
 80a662e:	fbb3 f0f2 	udiv	r0, r3, r2
 80a6632:	fbb3 f3f7 	udiv	r3, r3, r7
 80a6636:	4434      	add	r4, r6
 80a6638:	1ae3      	subs	r3, r4, r3
 80a663a:	fb02 3310 	mls	r3, r2, r0, r3
 80a663e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a6642:	2499      	movs	r4, #153	; 0x99
 80a6644:	3202      	adds	r2, #2
 80a6646:	fbb2 f2f4 	udiv	r2, r2, r4
 80a664a:	4354      	muls	r4, r2
 80a664c:	1ca6      	adds	r6, r4, #2
 80a664e:	2405      	movs	r4, #5
 80a6650:	fbb6 f4f4 	udiv	r4, r6, r4
 80a6654:	2a0a      	cmp	r2, #10
 80a6656:	bf34      	ite	cc
 80a6658:	2602      	movcc	r6, #2
 80a665a:	f06f 0609 	mvncs.w	r6, #9
 80a665e:	4416      	add	r6, r2
 80a6660:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6664:	fb02 0505 	mla	r5, r2, r5, r0
 80a6668:	1c5f      	adds	r7, r3, #1
 80a666a:	2e01      	cmp	r6, #1
 80a666c:	bf98      	it	ls
 80a666e:	3501      	addls	r5, #1
 80a6670:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6674:	eba7 0704 	sub.w	r7, r7, r4
 80a6678:	d302      	bcc.n	80a6680 <gmtime_r+0xdc>
 80a667a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a667e:	e014      	b.n	80a66aa <gmtime_r+0x106>
 80a6680:	0782      	lsls	r2, r0, #30
 80a6682:	d105      	bne.n	80a6690 <gmtime_r+0xec>
 80a6684:	2464      	movs	r4, #100	; 0x64
 80a6686:	fbb0 f2f4 	udiv	r2, r0, r4
 80a668a:	fb04 0212 	mls	r2, r4, r2, r0
 80a668e:	b94a      	cbnz	r2, 80a66a4 <gmtime_r+0x100>
 80a6690:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6694:	fbb0 f4f2 	udiv	r4, r0, r2
 80a6698:	fb02 0014 	mls	r0, r2, r4, r0
 80a669c:	fab0 f280 	clz	r2, r0
 80a66a0:	0952      	lsrs	r2, r2, #5
 80a66a2:	e000      	b.n	80a66a6 <gmtime_r+0x102>
 80a66a4:	2201      	movs	r2, #1
 80a66a6:	333b      	adds	r3, #59	; 0x3b
 80a66a8:	441a      	add	r2, r3
 80a66aa:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a66ae:	2300      	movs	r3, #0
 80a66b0:	61ca      	str	r2, [r1, #28]
 80a66b2:	614d      	str	r5, [r1, #20]
 80a66b4:	610e      	str	r6, [r1, #16]
 80a66b6:	60cf      	str	r7, [r1, #12]
 80a66b8:	620b      	str	r3, [r1, #32]
 80a66ba:	4608      	mov	r0, r1
 80a66bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a66be:	bf00      	nop
 80a66c0:	00015180 	.word	0x00015180
 80a66c4:	00023ab1 	.word	0x00023ab1
 80a66c8:	fffdc54f 	.word	0xfffdc54f
 80a66cc:	00023ab0 	.word	0x00023ab0

080a66d0 <_Balloc>:
 80a66d0:	b570      	push	{r4, r5, r6, lr}
 80a66d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a66d4:	4604      	mov	r4, r0
 80a66d6:	460e      	mov	r6, r1
 80a66d8:	b93d      	cbnz	r5, 80a66ea <_Balloc+0x1a>
 80a66da:	2010      	movs	r0, #16
 80a66dc:	f7fb fc80 	bl	80a1fe0 <malloc>
 80a66e0:	6260      	str	r0, [r4, #36]	; 0x24
 80a66e2:	6045      	str	r5, [r0, #4]
 80a66e4:	6085      	str	r5, [r0, #8]
 80a66e6:	6005      	str	r5, [r0, #0]
 80a66e8:	60c5      	str	r5, [r0, #12]
 80a66ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a66ec:	68eb      	ldr	r3, [r5, #12]
 80a66ee:	b143      	cbz	r3, 80a6702 <_Balloc+0x32>
 80a66f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a66f2:	68db      	ldr	r3, [r3, #12]
 80a66f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a66f8:	b178      	cbz	r0, 80a671a <_Balloc+0x4a>
 80a66fa:	6802      	ldr	r2, [r0, #0]
 80a66fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a6700:	e017      	b.n	80a6732 <_Balloc+0x62>
 80a6702:	2221      	movs	r2, #33	; 0x21
 80a6704:	2104      	movs	r1, #4
 80a6706:	4620      	mov	r0, r4
 80a6708:	f000 fbcb 	bl	80a6ea2 <_calloc_r>
 80a670c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a670e:	60e8      	str	r0, [r5, #12]
 80a6710:	68db      	ldr	r3, [r3, #12]
 80a6712:	2b00      	cmp	r3, #0
 80a6714:	d1ec      	bne.n	80a66f0 <_Balloc+0x20>
 80a6716:	2000      	movs	r0, #0
 80a6718:	bd70      	pop	{r4, r5, r6, pc}
 80a671a:	2101      	movs	r1, #1
 80a671c:	fa01 f506 	lsl.w	r5, r1, r6
 80a6720:	1d6a      	adds	r2, r5, #5
 80a6722:	0092      	lsls	r2, r2, #2
 80a6724:	4620      	mov	r0, r4
 80a6726:	f000 fbbc 	bl	80a6ea2 <_calloc_r>
 80a672a:	2800      	cmp	r0, #0
 80a672c:	d0f3      	beq.n	80a6716 <_Balloc+0x46>
 80a672e:	6046      	str	r6, [r0, #4]
 80a6730:	6085      	str	r5, [r0, #8]
 80a6732:	2300      	movs	r3, #0
 80a6734:	6103      	str	r3, [r0, #16]
 80a6736:	60c3      	str	r3, [r0, #12]
 80a6738:	bd70      	pop	{r4, r5, r6, pc}

080a673a <_Bfree>:
 80a673a:	b570      	push	{r4, r5, r6, lr}
 80a673c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a673e:	4606      	mov	r6, r0
 80a6740:	460d      	mov	r5, r1
 80a6742:	b93c      	cbnz	r4, 80a6754 <_Bfree+0x1a>
 80a6744:	2010      	movs	r0, #16
 80a6746:	f7fb fc4b 	bl	80a1fe0 <malloc>
 80a674a:	6270      	str	r0, [r6, #36]	; 0x24
 80a674c:	6044      	str	r4, [r0, #4]
 80a674e:	6084      	str	r4, [r0, #8]
 80a6750:	6004      	str	r4, [r0, #0]
 80a6752:	60c4      	str	r4, [r0, #12]
 80a6754:	b13d      	cbz	r5, 80a6766 <_Bfree+0x2c>
 80a6756:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a6758:	686a      	ldr	r2, [r5, #4]
 80a675a:	68db      	ldr	r3, [r3, #12]
 80a675c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a6760:	6029      	str	r1, [r5, #0]
 80a6762:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a6766:	bd70      	pop	{r4, r5, r6, pc}

080a6768 <__multadd>:
 80a6768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a676c:	4606      	mov	r6, r0
 80a676e:	460c      	mov	r4, r1
 80a6770:	690d      	ldr	r5, [r1, #16]
 80a6772:	461f      	mov	r7, r3
 80a6774:	f101 0e14 	add.w	lr, r1, #20
 80a6778:	2300      	movs	r3, #0
 80a677a:	f8de 0000 	ldr.w	r0, [lr]
 80a677e:	3301      	adds	r3, #1
 80a6780:	b281      	uxth	r1, r0
 80a6782:	fb02 7101 	mla	r1, r2, r1, r7
 80a6786:	0c00      	lsrs	r0, r0, #16
 80a6788:	0c0f      	lsrs	r7, r1, #16
 80a678a:	fb02 7000 	mla	r0, r2, r0, r7
 80a678e:	b289      	uxth	r1, r1
 80a6790:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a6794:	429d      	cmp	r5, r3
 80a6796:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a679a:	f84e 1b04 	str.w	r1, [lr], #4
 80a679e:	dcec      	bgt.n	80a677a <__multadd+0x12>
 80a67a0:	b1d7      	cbz	r7, 80a67d8 <__multadd+0x70>
 80a67a2:	68a3      	ldr	r3, [r4, #8]
 80a67a4:	429d      	cmp	r5, r3
 80a67a6:	db12      	blt.n	80a67ce <__multadd+0x66>
 80a67a8:	6861      	ldr	r1, [r4, #4]
 80a67aa:	4630      	mov	r0, r6
 80a67ac:	3101      	adds	r1, #1
 80a67ae:	f7ff ff8f 	bl	80a66d0 <_Balloc>
 80a67b2:	4680      	mov	r8, r0
 80a67b4:	6922      	ldr	r2, [r4, #16]
 80a67b6:	f104 010c 	add.w	r1, r4, #12
 80a67ba:	3202      	adds	r2, #2
 80a67bc:	0092      	lsls	r2, r2, #2
 80a67be:	300c      	adds	r0, #12
 80a67c0:	f7fe f97e 	bl	80a4ac0 <memcpy>
 80a67c4:	4621      	mov	r1, r4
 80a67c6:	4630      	mov	r0, r6
 80a67c8:	f7ff ffb7 	bl	80a673a <_Bfree>
 80a67cc:	4644      	mov	r4, r8
 80a67ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a67d2:	3501      	adds	r5, #1
 80a67d4:	615f      	str	r7, [r3, #20]
 80a67d6:	6125      	str	r5, [r4, #16]
 80a67d8:	4620      	mov	r0, r4
 80a67da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a67de <__s2b>:
 80a67de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a67e2:	4606      	mov	r6, r0
 80a67e4:	4615      	mov	r5, r2
 80a67e6:	461f      	mov	r7, r3
 80a67e8:	2209      	movs	r2, #9
 80a67ea:	3308      	adds	r3, #8
 80a67ec:	460c      	mov	r4, r1
 80a67ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80a67f2:	2100      	movs	r1, #0
 80a67f4:	2201      	movs	r2, #1
 80a67f6:	429a      	cmp	r2, r3
 80a67f8:	da02      	bge.n	80a6800 <__s2b+0x22>
 80a67fa:	0052      	lsls	r2, r2, #1
 80a67fc:	3101      	adds	r1, #1
 80a67fe:	e7fa      	b.n	80a67f6 <__s2b+0x18>
 80a6800:	4630      	mov	r0, r6
 80a6802:	f7ff ff65 	bl	80a66d0 <_Balloc>
 80a6806:	9b08      	ldr	r3, [sp, #32]
 80a6808:	2d09      	cmp	r5, #9
 80a680a:	6143      	str	r3, [r0, #20]
 80a680c:	f04f 0301 	mov.w	r3, #1
 80a6810:	6103      	str	r3, [r0, #16]
 80a6812:	dd11      	ble.n	80a6838 <__s2b+0x5a>
 80a6814:	f104 0809 	add.w	r8, r4, #9
 80a6818:	46c1      	mov	r9, r8
 80a681a:	442c      	add	r4, r5
 80a681c:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a6820:	4601      	mov	r1, r0
 80a6822:	3b30      	subs	r3, #48	; 0x30
 80a6824:	220a      	movs	r2, #10
 80a6826:	4630      	mov	r0, r6
 80a6828:	f7ff ff9e 	bl	80a6768 <__multadd>
 80a682c:	45a1      	cmp	r9, r4
 80a682e:	d1f5      	bne.n	80a681c <__s2b+0x3e>
 80a6830:	eb08 0405 	add.w	r4, r8, r5
 80a6834:	3c08      	subs	r4, #8
 80a6836:	e001      	b.n	80a683c <__s2b+0x5e>
 80a6838:	340a      	adds	r4, #10
 80a683a:	2509      	movs	r5, #9
 80a683c:	1b2d      	subs	r5, r5, r4
 80a683e:	1963      	adds	r3, r4, r5
 80a6840:	429f      	cmp	r7, r3
 80a6842:	dd08      	ble.n	80a6856 <__s2b+0x78>
 80a6844:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a6848:	4601      	mov	r1, r0
 80a684a:	3b30      	subs	r3, #48	; 0x30
 80a684c:	220a      	movs	r2, #10
 80a684e:	4630      	mov	r0, r6
 80a6850:	f7ff ff8a 	bl	80a6768 <__multadd>
 80a6854:	e7f3      	b.n	80a683e <__s2b+0x60>
 80a6856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a685a <__hi0bits>:
 80a685a:	0c03      	lsrs	r3, r0, #16
 80a685c:	041b      	lsls	r3, r3, #16
 80a685e:	b913      	cbnz	r3, 80a6866 <__hi0bits+0xc>
 80a6860:	0400      	lsls	r0, r0, #16
 80a6862:	2310      	movs	r3, #16
 80a6864:	e000      	b.n	80a6868 <__hi0bits+0xe>
 80a6866:	2300      	movs	r3, #0
 80a6868:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a686c:	bf04      	itt	eq
 80a686e:	0200      	lsleq	r0, r0, #8
 80a6870:	3308      	addeq	r3, #8
 80a6872:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a6876:	bf04      	itt	eq
 80a6878:	0100      	lsleq	r0, r0, #4
 80a687a:	3304      	addeq	r3, #4
 80a687c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a6880:	bf04      	itt	eq
 80a6882:	0080      	lsleq	r0, r0, #2
 80a6884:	3302      	addeq	r3, #2
 80a6886:	2800      	cmp	r0, #0
 80a6888:	db03      	blt.n	80a6892 <__hi0bits+0x38>
 80a688a:	0042      	lsls	r2, r0, #1
 80a688c:	d503      	bpl.n	80a6896 <__hi0bits+0x3c>
 80a688e:	1c58      	adds	r0, r3, #1
 80a6890:	4770      	bx	lr
 80a6892:	4618      	mov	r0, r3
 80a6894:	4770      	bx	lr
 80a6896:	2020      	movs	r0, #32
 80a6898:	4770      	bx	lr

080a689a <__lo0bits>:
 80a689a:	6803      	ldr	r3, [r0, #0]
 80a689c:	f013 0207 	ands.w	r2, r3, #7
 80a68a0:	d00b      	beq.n	80a68ba <__lo0bits+0x20>
 80a68a2:	07d9      	lsls	r1, r3, #31
 80a68a4:	d422      	bmi.n	80a68ec <__lo0bits+0x52>
 80a68a6:	079a      	lsls	r2, r3, #30
 80a68a8:	bf4b      	itete	mi
 80a68aa:	085b      	lsrmi	r3, r3, #1
 80a68ac:	089b      	lsrpl	r3, r3, #2
 80a68ae:	6003      	strmi	r3, [r0, #0]
 80a68b0:	6003      	strpl	r3, [r0, #0]
 80a68b2:	bf4c      	ite	mi
 80a68b4:	2001      	movmi	r0, #1
 80a68b6:	2002      	movpl	r0, #2
 80a68b8:	4770      	bx	lr
 80a68ba:	b299      	uxth	r1, r3
 80a68bc:	b909      	cbnz	r1, 80a68c2 <__lo0bits+0x28>
 80a68be:	0c1b      	lsrs	r3, r3, #16
 80a68c0:	2210      	movs	r2, #16
 80a68c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a68c6:	bf04      	itt	eq
 80a68c8:	0a1b      	lsreq	r3, r3, #8
 80a68ca:	3208      	addeq	r2, #8
 80a68cc:	0719      	lsls	r1, r3, #28
 80a68ce:	bf04      	itt	eq
 80a68d0:	091b      	lsreq	r3, r3, #4
 80a68d2:	3204      	addeq	r2, #4
 80a68d4:	0799      	lsls	r1, r3, #30
 80a68d6:	bf04      	itt	eq
 80a68d8:	089b      	lsreq	r3, r3, #2
 80a68da:	3202      	addeq	r2, #2
 80a68dc:	07d9      	lsls	r1, r3, #31
 80a68de:	d402      	bmi.n	80a68e6 <__lo0bits+0x4c>
 80a68e0:	085b      	lsrs	r3, r3, #1
 80a68e2:	d005      	beq.n	80a68f0 <__lo0bits+0x56>
 80a68e4:	3201      	adds	r2, #1
 80a68e6:	6003      	str	r3, [r0, #0]
 80a68e8:	4610      	mov	r0, r2
 80a68ea:	4770      	bx	lr
 80a68ec:	2000      	movs	r0, #0
 80a68ee:	4770      	bx	lr
 80a68f0:	2020      	movs	r0, #32
 80a68f2:	4770      	bx	lr

080a68f4 <__i2b>:
 80a68f4:	b510      	push	{r4, lr}
 80a68f6:	460c      	mov	r4, r1
 80a68f8:	2101      	movs	r1, #1
 80a68fa:	f7ff fee9 	bl	80a66d0 <_Balloc>
 80a68fe:	2201      	movs	r2, #1
 80a6900:	6144      	str	r4, [r0, #20]
 80a6902:	6102      	str	r2, [r0, #16]
 80a6904:	bd10      	pop	{r4, pc}

080a6906 <__multiply>:
 80a6906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a690a:	4614      	mov	r4, r2
 80a690c:	690a      	ldr	r2, [r1, #16]
 80a690e:	6923      	ldr	r3, [r4, #16]
 80a6910:	4688      	mov	r8, r1
 80a6912:	429a      	cmp	r2, r3
 80a6914:	bfbe      	ittt	lt
 80a6916:	460b      	movlt	r3, r1
 80a6918:	46a0      	movlt	r8, r4
 80a691a:	461c      	movlt	r4, r3
 80a691c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a6920:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a6924:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a6928:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a692c:	eb07 0609 	add.w	r6, r7, r9
 80a6930:	429e      	cmp	r6, r3
 80a6932:	bfc8      	it	gt
 80a6934:	3101      	addgt	r1, #1
 80a6936:	f7ff fecb 	bl	80a66d0 <_Balloc>
 80a693a:	f100 0514 	add.w	r5, r0, #20
 80a693e:	462b      	mov	r3, r5
 80a6940:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a6944:	2200      	movs	r2, #0
 80a6946:	4563      	cmp	r3, ip
 80a6948:	d202      	bcs.n	80a6950 <__multiply+0x4a>
 80a694a:	f843 2b04 	str.w	r2, [r3], #4
 80a694e:	e7fa      	b.n	80a6946 <__multiply+0x40>
 80a6950:	f104 0214 	add.w	r2, r4, #20
 80a6954:	f108 0114 	add.w	r1, r8, #20
 80a6958:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a695c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a6960:	9300      	str	r3, [sp, #0]
 80a6962:	9b00      	ldr	r3, [sp, #0]
 80a6964:	9201      	str	r2, [sp, #4]
 80a6966:	4293      	cmp	r3, r2
 80a6968:	d957      	bls.n	80a6a1a <__multiply+0x114>
 80a696a:	f8b2 b000 	ldrh.w	fp, [r2]
 80a696e:	f1bb 0f00 	cmp.w	fp, #0
 80a6972:	d023      	beq.n	80a69bc <__multiply+0xb6>
 80a6974:	4689      	mov	r9, r1
 80a6976:	46ae      	mov	lr, r5
 80a6978:	f04f 0800 	mov.w	r8, #0
 80a697c:	f859 4b04 	ldr.w	r4, [r9], #4
 80a6980:	f8be a000 	ldrh.w	sl, [lr]
 80a6984:	b2a3      	uxth	r3, r4
 80a6986:	fb0b a303 	mla	r3, fp, r3, sl
 80a698a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a698e:	f8de 4000 	ldr.w	r4, [lr]
 80a6992:	4443      	add	r3, r8
 80a6994:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a6998:	fb0b 840a 	mla	r4, fp, sl, r8
 80a699c:	46f2      	mov	sl, lr
 80a699e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a69a2:	b29b      	uxth	r3, r3
 80a69a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a69a8:	454f      	cmp	r7, r9
 80a69aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a69ae:	f84a 3b04 	str.w	r3, [sl], #4
 80a69b2:	d901      	bls.n	80a69b8 <__multiply+0xb2>
 80a69b4:	46d6      	mov	lr, sl
 80a69b6:	e7e1      	b.n	80a697c <__multiply+0x76>
 80a69b8:	f8ce 8004 	str.w	r8, [lr, #4]
 80a69bc:	9b01      	ldr	r3, [sp, #4]
 80a69be:	3204      	adds	r2, #4
 80a69c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a69c4:	f1ba 0f00 	cmp.w	sl, #0
 80a69c8:	d021      	beq.n	80a6a0e <__multiply+0x108>
 80a69ca:	462c      	mov	r4, r5
 80a69cc:	4689      	mov	r9, r1
 80a69ce:	682b      	ldr	r3, [r5, #0]
 80a69d0:	f04f 0800 	mov.w	r8, #0
 80a69d4:	f8b9 e000 	ldrh.w	lr, [r9]
 80a69d8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a69dc:	b29b      	uxth	r3, r3
 80a69de:	fb0a be0e 	mla	lr, sl, lr, fp
 80a69e2:	46a3      	mov	fp, r4
 80a69e4:	44f0      	add	r8, lr
 80a69e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a69ea:	f84b 3b04 	str.w	r3, [fp], #4
 80a69ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80a69f2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a69f6:	0c1b      	lsrs	r3, r3, #16
 80a69f8:	fb0a e303 	mla	r3, sl, r3, lr
 80a69fc:	454f      	cmp	r7, r9
 80a69fe:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a6a02:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a6a06:	d901      	bls.n	80a6a0c <__multiply+0x106>
 80a6a08:	465c      	mov	r4, fp
 80a6a0a:	e7e3      	b.n	80a69d4 <__multiply+0xce>
 80a6a0c:	6063      	str	r3, [r4, #4]
 80a6a0e:	3504      	adds	r5, #4
 80a6a10:	e7a7      	b.n	80a6962 <__multiply+0x5c>
 80a6a12:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a6a16:	b913      	cbnz	r3, 80a6a1e <__multiply+0x118>
 80a6a18:	3e01      	subs	r6, #1
 80a6a1a:	2e00      	cmp	r6, #0
 80a6a1c:	dcf9      	bgt.n	80a6a12 <__multiply+0x10c>
 80a6a1e:	6106      	str	r6, [r0, #16]
 80a6a20:	b003      	add	sp, #12
 80a6a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a6a28 <__pow5mult>:
 80a6a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6a2c:	4615      	mov	r5, r2
 80a6a2e:	f012 0203 	ands.w	r2, r2, #3
 80a6a32:	4606      	mov	r6, r0
 80a6a34:	460f      	mov	r7, r1
 80a6a36:	d007      	beq.n	80a6a48 <__pow5mult+0x20>
 80a6a38:	4c21      	ldr	r4, [pc, #132]	; (80a6ac0 <__pow5mult+0x98>)
 80a6a3a:	3a01      	subs	r2, #1
 80a6a3c:	2300      	movs	r3, #0
 80a6a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a6a42:	f7ff fe91 	bl	80a6768 <__multadd>
 80a6a46:	4607      	mov	r7, r0
 80a6a48:	10ad      	asrs	r5, r5, #2
 80a6a4a:	d036      	beq.n	80a6aba <__pow5mult+0x92>
 80a6a4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a6a4e:	b93c      	cbnz	r4, 80a6a60 <__pow5mult+0x38>
 80a6a50:	2010      	movs	r0, #16
 80a6a52:	f7fb fac5 	bl	80a1fe0 <malloc>
 80a6a56:	6270      	str	r0, [r6, #36]	; 0x24
 80a6a58:	6044      	str	r4, [r0, #4]
 80a6a5a:	6084      	str	r4, [r0, #8]
 80a6a5c:	6004      	str	r4, [r0, #0]
 80a6a5e:	60c4      	str	r4, [r0, #12]
 80a6a60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a6a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a6a68:	b94c      	cbnz	r4, 80a6a7e <__pow5mult+0x56>
 80a6a6a:	f240 2171 	movw	r1, #625	; 0x271
 80a6a6e:	4630      	mov	r0, r6
 80a6a70:	f7ff ff40 	bl	80a68f4 <__i2b>
 80a6a74:	4604      	mov	r4, r0
 80a6a76:	2300      	movs	r3, #0
 80a6a78:	f8c8 0008 	str.w	r0, [r8, #8]
 80a6a7c:	6003      	str	r3, [r0, #0]
 80a6a7e:	f04f 0800 	mov.w	r8, #0
 80a6a82:	07eb      	lsls	r3, r5, #31
 80a6a84:	d50a      	bpl.n	80a6a9c <__pow5mult+0x74>
 80a6a86:	4639      	mov	r1, r7
 80a6a88:	4622      	mov	r2, r4
 80a6a8a:	4630      	mov	r0, r6
 80a6a8c:	f7ff ff3b 	bl	80a6906 <__multiply>
 80a6a90:	4681      	mov	r9, r0
 80a6a92:	4639      	mov	r1, r7
 80a6a94:	4630      	mov	r0, r6
 80a6a96:	f7ff fe50 	bl	80a673a <_Bfree>
 80a6a9a:	464f      	mov	r7, r9
 80a6a9c:	106d      	asrs	r5, r5, #1
 80a6a9e:	d00c      	beq.n	80a6aba <__pow5mult+0x92>
 80a6aa0:	6820      	ldr	r0, [r4, #0]
 80a6aa2:	b108      	cbz	r0, 80a6aa8 <__pow5mult+0x80>
 80a6aa4:	4604      	mov	r4, r0
 80a6aa6:	e7ec      	b.n	80a6a82 <__pow5mult+0x5a>
 80a6aa8:	4622      	mov	r2, r4
 80a6aaa:	4621      	mov	r1, r4
 80a6aac:	4630      	mov	r0, r6
 80a6aae:	f7ff ff2a 	bl	80a6906 <__multiply>
 80a6ab2:	6020      	str	r0, [r4, #0]
 80a6ab4:	f8c0 8000 	str.w	r8, [r0]
 80a6ab8:	e7f4      	b.n	80a6aa4 <__pow5mult+0x7c>
 80a6aba:	4638      	mov	r0, r7
 80a6abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6ac0:	080a7798 	.word	0x080a7798

080a6ac4 <__lshift>:
 80a6ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6ac8:	460c      	mov	r4, r1
 80a6aca:	4607      	mov	r7, r0
 80a6acc:	4691      	mov	r9, r2
 80a6ace:	6926      	ldr	r6, [r4, #16]
 80a6ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a6ad4:	4456      	add	r6, sl
 80a6ad6:	6849      	ldr	r1, [r1, #4]
 80a6ad8:	68a3      	ldr	r3, [r4, #8]
 80a6ada:	1c75      	adds	r5, r6, #1
 80a6adc:	42ab      	cmp	r3, r5
 80a6ade:	da02      	bge.n	80a6ae6 <__lshift+0x22>
 80a6ae0:	3101      	adds	r1, #1
 80a6ae2:	005b      	lsls	r3, r3, #1
 80a6ae4:	e7fa      	b.n	80a6adc <__lshift+0x18>
 80a6ae6:	4638      	mov	r0, r7
 80a6ae8:	f7ff fdf2 	bl	80a66d0 <_Balloc>
 80a6aec:	2300      	movs	r3, #0
 80a6aee:	4680      	mov	r8, r0
 80a6af0:	461a      	mov	r2, r3
 80a6af2:	f100 0114 	add.w	r1, r0, #20
 80a6af6:	4553      	cmp	r3, sl
 80a6af8:	da03      	bge.n	80a6b02 <__lshift+0x3e>
 80a6afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a6afe:	3301      	adds	r3, #1
 80a6b00:	e7f9      	b.n	80a6af6 <__lshift+0x32>
 80a6b02:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a6b06:	6920      	ldr	r0, [r4, #16]
 80a6b08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a6b0c:	f019 091f 	ands.w	r9, r9, #31
 80a6b10:	f104 0114 	add.w	r1, r4, #20
 80a6b14:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a6b18:	d014      	beq.n	80a6b44 <__lshift+0x80>
 80a6b1a:	f1c9 0c20 	rsb	ip, r9, #32
 80a6b1e:	2200      	movs	r2, #0
 80a6b20:	6808      	ldr	r0, [r1, #0]
 80a6b22:	469a      	mov	sl, r3
 80a6b24:	fa00 f009 	lsl.w	r0, r0, r9
 80a6b28:	4302      	orrs	r2, r0
 80a6b2a:	f843 2b04 	str.w	r2, [r3], #4
 80a6b2e:	f851 2b04 	ldr.w	r2, [r1], #4
 80a6b32:	458e      	cmp	lr, r1
 80a6b34:	fa22 f20c 	lsr.w	r2, r2, ip
 80a6b38:	d8f2      	bhi.n	80a6b20 <__lshift+0x5c>
 80a6b3a:	f8ca 2004 	str.w	r2, [sl, #4]
 80a6b3e:	b142      	cbz	r2, 80a6b52 <__lshift+0x8e>
 80a6b40:	1cb5      	adds	r5, r6, #2
 80a6b42:	e006      	b.n	80a6b52 <__lshift+0x8e>
 80a6b44:	3b04      	subs	r3, #4
 80a6b46:	f851 2b04 	ldr.w	r2, [r1], #4
 80a6b4a:	458e      	cmp	lr, r1
 80a6b4c:	f843 2f04 	str.w	r2, [r3, #4]!
 80a6b50:	d8f9      	bhi.n	80a6b46 <__lshift+0x82>
 80a6b52:	3d01      	subs	r5, #1
 80a6b54:	4638      	mov	r0, r7
 80a6b56:	f8c8 5010 	str.w	r5, [r8, #16]
 80a6b5a:	4621      	mov	r1, r4
 80a6b5c:	f7ff fded 	bl	80a673a <_Bfree>
 80a6b60:	4640      	mov	r0, r8
 80a6b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a6b66 <__mcmp>:
 80a6b66:	6903      	ldr	r3, [r0, #16]
 80a6b68:	690a      	ldr	r2, [r1, #16]
 80a6b6a:	b510      	push	{r4, lr}
 80a6b6c:	1a9b      	subs	r3, r3, r2
 80a6b6e:	d111      	bne.n	80a6b94 <__mcmp+0x2e>
 80a6b70:	0092      	lsls	r2, r2, #2
 80a6b72:	3014      	adds	r0, #20
 80a6b74:	3114      	adds	r1, #20
 80a6b76:	1883      	adds	r3, r0, r2
 80a6b78:	440a      	add	r2, r1
 80a6b7a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a6b7e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a6b82:	428c      	cmp	r4, r1
 80a6b84:	d002      	beq.n	80a6b8c <__mcmp+0x26>
 80a6b86:	d307      	bcc.n	80a6b98 <__mcmp+0x32>
 80a6b88:	2001      	movs	r0, #1
 80a6b8a:	bd10      	pop	{r4, pc}
 80a6b8c:	4298      	cmp	r0, r3
 80a6b8e:	d3f4      	bcc.n	80a6b7a <__mcmp+0x14>
 80a6b90:	2000      	movs	r0, #0
 80a6b92:	bd10      	pop	{r4, pc}
 80a6b94:	4618      	mov	r0, r3
 80a6b96:	bd10      	pop	{r4, pc}
 80a6b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6b9c:	bd10      	pop	{r4, pc}

080a6b9e <__mdiff>:
 80a6b9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6ba2:	460c      	mov	r4, r1
 80a6ba4:	4607      	mov	r7, r0
 80a6ba6:	4611      	mov	r1, r2
 80a6ba8:	4620      	mov	r0, r4
 80a6baa:	4615      	mov	r5, r2
 80a6bac:	f7ff ffdb 	bl	80a6b66 <__mcmp>
 80a6bb0:	1e06      	subs	r6, r0, #0
 80a6bb2:	d108      	bne.n	80a6bc6 <__mdiff+0x28>
 80a6bb4:	4631      	mov	r1, r6
 80a6bb6:	4638      	mov	r0, r7
 80a6bb8:	f7ff fd8a 	bl	80a66d0 <_Balloc>
 80a6bbc:	2301      	movs	r3, #1
 80a6bbe:	6103      	str	r3, [r0, #16]
 80a6bc0:	6146      	str	r6, [r0, #20]
 80a6bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6bc6:	bfbc      	itt	lt
 80a6bc8:	4623      	movlt	r3, r4
 80a6bca:	462c      	movlt	r4, r5
 80a6bcc:	4638      	mov	r0, r7
 80a6bce:	6861      	ldr	r1, [r4, #4]
 80a6bd0:	bfba      	itte	lt
 80a6bd2:	461d      	movlt	r5, r3
 80a6bd4:	2601      	movlt	r6, #1
 80a6bd6:	2600      	movge	r6, #0
 80a6bd8:	f7ff fd7a 	bl	80a66d0 <_Balloc>
 80a6bdc:	692b      	ldr	r3, [r5, #16]
 80a6bde:	60c6      	str	r6, [r0, #12]
 80a6be0:	6926      	ldr	r6, [r4, #16]
 80a6be2:	f105 0914 	add.w	r9, r5, #20
 80a6be6:	f104 0114 	add.w	r1, r4, #20
 80a6bea:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a6bee:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a6bf2:	f100 0514 	add.w	r5, r0, #20
 80a6bf6:	f04f 0c00 	mov.w	ip, #0
 80a6bfa:	f851 2b04 	ldr.w	r2, [r1], #4
 80a6bfe:	f859 4b04 	ldr.w	r4, [r9], #4
 80a6c02:	b293      	uxth	r3, r2
 80a6c04:	449c      	add	ip, r3
 80a6c06:	b2a3      	uxth	r3, r4
 80a6c08:	0c24      	lsrs	r4, r4, #16
 80a6c0a:	ebc3 030c 	rsb	r3, r3, ip
 80a6c0e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a6c12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a6c16:	b29b      	uxth	r3, r3
 80a6c18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a6c1c:	45c8      	cmp	r8, r9
 80a6c1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a6c22:	468e      	mov	lr, r1
 80a6c24:	f845 2b04 	str.w	r2, [r5], #4
 80a6c28:	d8e7      	bhi.n	80a6bfa <__mdiff+0x5c>
 80a6c2a:	45be      	cmp	lr, r7
 80a6c2c:	d20e      	bcs.n	80a6c4c <__mdiff+0xae>
 80a6c2e:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a6c32:	b28a      	uxth	r2, r1
 80a6c34:	4462      	add	r2, ip
 80a6c36:	1413      	asrs	r3, r2, #16
 80a6c38:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a6c3c:	b292      	uxth	r2, r2
 80a6c3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a6c42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a6c46:	f845 2b04 	str.w	r2, [r5], #4
 80a6c4a:	e7ee      	b.n	80a6c2a <__mdiff+0x8c>
 80a6c4c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a6c50:	b90b      	cbnz	r3, 80a6c56 <__mdiff+0xb8>
 80a6c52:	3e01      	subs	r6, #1
 80a6c54:	e7fa      	b.n	80a6c4c <__mdiff+0xae>
 80a6c56:	6106      	str	r6, [r0, #16]
 80a6c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a6c5c <__ulp>:
 80a6c5c:	4b10      	ldr	r3, [pc, #64]	; (80a6ca0 <__ulp+0x44>)
 80a6c5e:	400b      	ands	r3, r1
 80a6c60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a6c64:	2b00      	cmp	r3, #0
 80a6c66:	dd02      	ble.n	80a6c6e <__ulp+0x12>
 80a6c68:	2000      	movs	r0, #0
 80a6c6a:	4619      	mov	r1, r3
 80a6c6c:	4770      	bx	lr
 80a6c6e:	425b      	negs	r3, r3
 80a6c70:	151b      	asrs	r3, r3, #20
 80a6c72:	2b13      	cmp	r3, #19
 80a6c74:	f04f 0000 	mov.w	r0, #0
 80a6c78:	f04f 0100 	mov.w	r1, #0
 80a6c7c:	dc04      	bgt.n	80a6c88 <__ulp+0x2c>
 80a6c7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a6c82:	fa42 f103 	asr.w	r1, r2, r3
 80a6c86:	4770      	bx	lr
 80a6c88:	3b14      	subs	r3, #20
 80a6c8a:	2b1e      	cmp	r3, #30
 80a6c8c:	f04f 0201 	mov.w	r2, #1
 80a6c90:	bfce      	itee	gt
 80a6c92:	4613      	movgt	r3, r2
 80a6c94:	f1c3 031f 	rsble	r3, r3, #31
 80a6c98:	fa02 f303 	lslle.w	r3, r2, r3
 80a6c9c:	4618      	mov	r0, r3
 80a6c9e:	4770      	bx	lr
 80a6ca0:	7ff00000 	.word	0x7ff00000

080a6ca4 <__b2d>:
 80a6ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6ca6:	6905      	ldr	r5, [r0, #16]
 80a6ca8:	f100 0614 	add.w	r6, r0, #20
 80a6cac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a6cb0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a6cb4:	1f2f      	subs	r7, r5, #4
 80a6cb6:	4620      	mov	r0, r4
 80a6cb8:	f7ff fdcf 	bl	80a685a <__hi0bits>
 80a6cbc:	f1c0 0320 	rsb	r3, r0, #32
 80a6cc0:	280a      	cmp	r0, #10
 80a6cc2:	600b      	str	r3, [r1, #0]
 80a6cc4:	dc14      	bgt.n	80a6cf0 <__b2d+0x4c>
 80a6cc6:	f1c0 0e0b 	rsb	lr, r0, #11
 80a6cca:	fa24 f10e 	lsr.w	r1, r4, lr
 80a6cce:	42be      	cmp	r6, r7
 80a6cd0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a6cd4:	bf34      	ite	cc
 80a6cd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a6cda:	2100      	movcs	r1, #0
 80a6cdc:	3015      	adds	r0, #21
 80a6cde:	fa04 f000 	lsl.w	r0, r4, r0
 80a6ce2:	fa21 f10e 	lsr.w	r1, r1, lr
 80a6ce6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a6cea:	ea40 0201 	orr.w	r2, r0, r1
 80a6cee:	e023      	b.n	80a6d38 <__b2d+0x94>
 80a6cf0:	42be      	cmp	r6, r7
 80a6cf2:	bf3a      	itte	cc
 80a6cf4:	f1a5 0708 	subcc.w	r7, r5, #8
 80a6cf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a6cfc:	2100      	movcs	r1, #0
 80a6cfe:	380b      	subs	r0, #11
 80a6d00:	d015      	beq.n	80a6d2e <__b2d+0x8a>
 80a6d02:	4084      	lsls	r4, r0
 80a6d04:	f1c0 0520 	rsb	r5, r0, #32
 80a6d08:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a6d0c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a6d10:	42b7      	cmp	r7, r6
 80a6d12:	fa21 fe05 	lsr.w	lr, r1, r5
 80a6d16:	ea44 030e 	orr.w	r3, r4, lr
 80a6d1a:	bf8c      	ite	hi
 80a6d1c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a6d20:	2400      	movls	r4, #0
 80a6d22:	fa01 f000 	lsl.w	r0, r1, r0
 80a6d26:	40ec      	lsrs	r4, r5
 80a6d28:	ea40 0204 	orr.w	r2, r0, r4
 80a6d2c:	e004      	b.n	80a6d38 <__b2d+0x94>
 80a6d2e:	460a      	mov	r2, r1
 80a6d30:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a6d34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a6d38:	4610      	mov	r0, r2
 80a6d3a:	4619      	mov	r1, r3
 80a6d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a6d3e <__d2b>:
 80a6d3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a6d42:	461c      	mov	r4, r3
 80a6d44:	2101      	movs	r1, #1
 80a6d46:	4690      	mov	r8, r2
 80a6d48:	9e08      	ldr	r6, [sp, #32]
 80a6d4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a6d4c:	f7ff fcc0 	bl	80a66d0 <_Balloc>
 80a6d50:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a6d54:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a6d58:	4607      	mov	r7, r0
 80a6d5a:	b10c      	cbz	r4, 80a6d60 <__d2b+0x22>
 80a6d5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a6d60:	9201      	str	r2, [sp, #4]
 80a6d62:	f1b8 0f00 	cmp.w	r8, #0
 80a6d66:	d019      	beq.n	80a6d9c <__d2b+0x5e>
 80a6d68:	a802      	add	r0, sp, #8
 80a6d6a:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a6d6e:	f7ff fd94 	bl	80a689a <__lo0bits>
 80a6d72:	9b00      	ldr	r3, [sp, #0]
 80a6d74:	b148      	cbz	r0, 80a6d8a <__d2b+0x4c>
 80a6d76:	9a01      	ldr	r2, [sp, #4]
 80a6d78:	f1c0 0120 	rsb	r1, r0, #32
 80a6d7c:	fa02 f101 	lsl.w	r1, r2, r1
 80a6d80:	430b      	orrs	r3, r1
 80a6d82:	40c2      	lsrs	r2, r0
 80a6d84:	617b      	str	r3, [r7, #20]
 80a6d86:	9201      	str	r2, [sp, #4]
 80a6d88:	e000      	b.n	80a6d8c <__d2b+0x4e>
 80a6d8a:	617b      	str	r3, [r7, #20]
 80a6d8c:	9b01      	ldr	r3, [sp, #4]
 80a6d8e:	2b00      	cmp	r3, #0
 80a6d90:	bf14      	ite	ne
 80a6d92:	2102      	movne	r1, #2
 80a6d94:	2101      	moveq	r1, #1
 80a6d96:	61bb      	str	r3, [r7, #24]
 80a6d98:	6139      	str	r1, [r7, #16]
 80a6d9a:	e007      	b.n	80a6dac <__d2b+0x6e>
 80a6d9c:	a801      	add	r0, sp, #4
 80a6d9e:	f7ff fd7c 	bl	80a689a <__lo0bits>
 80a6da2:	9b01      	ldr	r3, [sp, #4]
 80a6da4:	2101      	movs	r1, #1
 80a6da6:	617b      	str	r3, [r7, #20]
 80a6da8:	6139      	str	r1, [r7, #16]
 80a6daa:	3020      	adds	r0, #32
 80a6dac:	b134      	cbz	r4, 80a6dbc <__d2b+0x7e>
 80a6dae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a6db2:	4404      	add	r4, r0
 80a6db4:	6034      	str	r4, [r6, #0]
 80a6db6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a6dba:	e009      	b.n	80a6dd0 <__d2b+0x92>
 80a6dbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a6dc0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a6dc4:	6030      	str	r0, [r6, #0]
 80a6dc6:	6918      	ldr	r0, [r3, #16]
 80a6dc8:	f7ff fd47 	bl	80a685a <__hi0bits>
 80a6dcc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a6dd0:	6028      	str	r0, [r5, #0]
 80a6dd2:	4638      	mov	r0, r7
 80a6dd4:	b002      	add	sp, #8
 80a6dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a6dda <__ratio>:
 80a6dda:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a6dde:	4688      	mov	r8, r1
 80a6de0:	4669      	mov	r1, sp
 80a6de2:	4681      	mov	r9, r0
 80a6de4:	f7ff ff5e 	bl	80a6ca4 <__b2d>
 80a6de8:	460d      	mov	r5, r1
 80a6dea:	4604      	mov	r4, r0
 80a6dec:	a901      	add	r1, sp, #4
 80a6dee:	4640      	mov	r0, r8
 80a6df0:	f7ff ff58 	bl	80a6ca4 <__b2d>
 80a6df4:	460f      	mov	r7, r1
 80a6df6:	4606      	mov	r6, r0
 80a6df8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a6dfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a6e00:	4620      	mov	r0, r4
 80a6e02:	1a9a      	subs	r2, r3, r2
 80a6e04:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a6e08:	1ac9      	subs	r1, r1, r3
 80a6e0a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a6e0e:	2b00      	cmp	r3, #0
 80a6e10:	bfcc      	ite	gt
 80a6e12:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a6e16:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a6e1a:	4632      	mov	r2, r6
 80a6e1c:	463b      	mov	r3, r7
 80a6e1e:	4629      	mov	r1, r5
 80a6e20:	f7fc ffe8 	bl	80a3df4 <__aeabi_ddiv>
 80a6e24:	b003      	add	sp, #12
 80a6e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a6e2a <__copybits>:
 80a6e2a:	3901      	subs	r1, #1
 80a6e2c:	b510      	push	{r4, lr}
 80a6e2e:	1149      	asrs	r1, r1, #5
 80a6e30:	6914      	ldr	r4, [r2, #16]
 80a6e32:	3101      	adds	r1, #1
 80a6e34:	f102 0314 	add.w	r3, r2, #20
 80a6e38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a6e3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a6e40:	42a3      	cmp	r3, r4
 80a6e42:	4602      	mov	r2, r0
 80a6e44:	d204      	bcs.n	80a6e50 <__copybits+0x26>
 80a6e46:	f853 2b04 	ldr.w	r2, [r3], #4
 80a6e4a:	f840 2b04 	str.w	r2, [r0], #4
 80a6e4e:	e7f7      	b.n	80a6e40 <__copybits+0x16>
 80a6e50:	2300      	movs	r3, #0
 80a6e52:	428a      	cmp	r2, r1
 80a6e54:	d202      	bcs.n	80a6e5c <__copybits+0x32>
 80a6e56:	f842 3b04 	str.w	r3, [r2], #4
 80a6e5a:	e7fa      	b.n	80a6e52 <__copybits+0x28>
 80a6e5c:	bd10      	pop	{r4, pc}

080a6e5e <__any_on>:
 80a6e5e:	f100 0214 	add.w	r2, r0, #20
 80a6e62:	6900      	ldr	r0, [r0, #16]
 80a6e64:	114b      	asrs	r3, r1, #5
 80a6e66:	4298      	cmp	r0, r3
 80a6e68:	b510      	push	{r4, lr}
 80a6e6a:	db0c      	blt.n	80a6e86 <__any_on+0x28>
 80a6e6c:	dd0c      	ble.n	80a6e88 <__any_on+0x2a>
 80a6e6e:	f011 011f 	ands.w	r1, r1, #31
 80a6e72:	d009      	beq.n	80a6e88 <__any_on+0x2a>
 80a6e74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a6e78:	fa24 f001 	lsr.w	r0, r4, r1
 80a6e7c:	fa00 f101 	lsl.w	r1, r0, r1
 80a6e80:	428c      	cmp	r4, r1
 80a6e82:	d10c      	bne.n	80a6e9e <__any_on+0x40>
 80a6e84:	e000      	b.n	80a6e88 <__any_on+0x2a>
 80a6e86:	4603      	mov	r3, r0
 80a6e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a6e8c:	4293      	cmp	r3, r2
 80a6e8e:	d904      	bls.n	80a6e9a <__any_on+0x3c>
 80a6e90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a6e94:	2900      	cmp	r1, #0
 80a6e96:	d0f9      	beq.n	80a6e8c <__any_on+0x2e>
 80a6e98:	e001      	b.n	80a6e9e <__any_on+0x40>
 80a6e9a:	2000      	movs	r0, #0
 80a6e9c:	bd10      	pop	{r4, pc}
 80a6e9e:	2001      	movs	r0, #1
 80a6ea0:	bd10      	pop	{r4, pc}

080a6ea2 <_calloc_r>:
 80a6ea2:	b538      	push	{r3, r4, r5, lr}
 80a6ea4:	fb02 f401 	mul.w	r4, r2, r1
 80a6ea8:	4621      	mov	r1, r4
 80a6eaa:	f7fb f8c9 	bl	80a2040 <_malloc_r>
 80a6eae:	4605      	mov	r5, r0
 80a6eb0:	b118      	cbz	r0, 80a6eba <_calloc_r+0x18>
 80a6eb2:	4622      	mov	r2, r4
 80a6eb4:	2100      	movs	r1, #0
 80a6eb6:	f7fd fe0e 	bl	80a4ad6 <memset>
 80a6eba:	4628      	mov	r0, r5
 80a6ebc:	bd38      	pop	{r3, r4, r5, pc}

080a6ebe <__env_lock>:
 80a6ebe:	4770      	bx	lr

080a6ec0 <__env_unlock>:
 80a6ec0:	4770      	bx	lr

080a6ec2 <link_code_end>:
	...

080a6ec4 <dynalib_user>:
 80a6ec4:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a6ed4:	0000 0000 0100 0402 1008 7453 7261 7574     ..........Startu
 80a6ee4:	2070 7553 6363 7365 6673 6c75 0000 0000     p Successful....
	...
 80a6f1c:	0000 3425 312e 2a66 0043 3425 312e 2566     ..%4.1f*C.%4.1f%
 80a6f2c:	0025 3425 312e 4866 6150 7b00 5422 6d65     %.%4.1fHPa.{"Tem
 80a6f3c:	6570 6172 7574 6572 3a22 3425 312e 2c66     perature":%4.1f,
 80a6f4c:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
 80a6f5c:	2c66 2220 7250 7365 7573 6572 3a22 3425     f, "Pressure":%4
 80a6f6c:	312e 7d66 7300 6f74 6172 6567 662d 6361     .1f}.storage-fac
 80a6f7c:	6c69 7469 2d79 6f68 6b6f 4e00 206f 6144     ility-hook.No Da
 80a6f8c:	6174 5500 6962 6f64 7374 4820 6f6f 006b     ta.Ubidots Hook.
 80a6f9c:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
 80a6fac:	0064 7453 7461 0065 4c41 5245 2054 5246     d.State.ALERT FR
 80a6fbc:	4d4f 4b20 6d75 6176 6f49 3a54 5420 6d65     OM KumvaIoT: Tem
 80a6fcc:	6570 6172 7574 6572 5420 7268 7365 6f68     perature Thresho
 80a6fdc:	646c 4320 6f72 7373 6465 202e 7543 7272     ld Crossed. Curr
 80a6fec:	6e65 2074 6554 706d 7265 7461 7275 2065     ent Temperature 
 80a6ffc:	7369 203a 3425 312e 0066 6d73 2d73 6577     is: %4.1f.sms-we
 80a700c:	6862 6f6f 006b 4c41 5245 2054 5246 4d4f     bhook.ALERT FROM
 80a701c:	4b20 6d75 6176 6f49 3a54 4820 6d75 6469      KumvaIoT: Humid
 80a702c:	7469 2079 6854 6572 6873 6c6f 2064 7243     ity Threshold Cr
 80a703c:	736f 6573 2e64 4320 7275 6572 746e 4820     ossed. Current H
 80a704c:	6d75 6469 7469 2079 7369 203a 3425 312e     umidity is: %4.1
 80a705c:	2066 6e61 2064 7543 7272 6e65 2074 6554     f and Current Te
 80a706c:	706d 7265 7461 7275 2065 7369 203a 3425     mperature is: %4
 80a707c:	312e 0066 6553 2074 6556 6272 736f 2065     .1f.Set Verbose 
 80a708c:	6f4d 6564 4300 656c 7261 6465 5620 7265     Mode.Cleared Ver
 80a709c:	6f62 6573 4d20 646f 0065 7246 6d6f 2520     bose Mode.From %
 80a70ac:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
 80a70bc:	6e61 6973 6974 6e6f 4500 7272 726f 7420     ansition.Error t
 80a70cc:	6b61 6e69 2067 654d 7361 7275 6d65 6e65     aking Measuremen
 80a70dc:	7374 7300 6170 6b72 642f 7665 6369 2f65     ts.spark/device/
 80a70ec:	6573 7373 6f69 2f6e 6e65 0064 7245 6f72     session/end.Erro
 80a70fc:	2072 7453 7461 2065 202d 6552 6573 0074     r State - Reset.
 80a710c:	7055 6570 2072 6854 6572 6873 6c6f 2064     Upper Threshold 
 80a711c:	6553 0074 6f4c 6577 2072 6854 6572 6873     Set.Lower Thresh
 80a712c:	6c6f 2064 6553 0074 6552 656c 7361 0065     old Set.Release.
 80a713c:	6574 706d 7265 7461 7275 0065 7568 696d     temperature.humi
 80a714c:	6964 7974 7000 6572 7373 7275 0065 654d     dity.pressure.Me
 80a715c:	7361 7275 2d65 6f4e 0077 6556 6272 736f     asure-Now.Verbos
 80a716c:	2d65 6f4d 6564 5400 6d65 2d70 7055 6570     e-Mode.Temp-Uppe
 80a717c:	2d72 694c 696d 0074 6554 706d 4c2d 776f     r-Limit.Temp-Low
 80a718c:	7265 4c2d 6d69 7469 4800 6d75 6469 7469     er-Limit.Humidit
 80a719c:	2d79 6f4c 6577 2d72 694c 696d 0074 7548     y-Lower-Limit.Hu
 80a71ac:	696d 7464 2d79 7075 6570 2d72 694c 696d     midty-upper-Limi
 80a71bc:	0074 7245 6f72 2072 202d 4d42 3645 3038     t.Error - BME680
 80a71cc:	4920 696e 6974 6c61 7a69 7461 6f69 006e      Initialization.
 80a71dc:	6146 6c69 6465 7420 206f 6f63 6e6e 6365     Failed to connec
 80a71ec:	0074 7453 7261 7574 0070 2e31 3030 0000     t.Startup.1.00..

080a71fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a7204:	207f 080a 2085 080a 20db 080a 2093 080a     . ... ... ... ..
 80a7214:	2081 080a                                   . ..

080a7218 <_ZTV7TwoWire>:
	...
 80a7220:	26e7 080a 2731 080a 2709 080a 26e9 080a     .&..1'...'...&..
 80a7230:	2711 080a 2719 080a 2721 080a 2729 080a     .'...'..!'..)'..

080a7240 <_ZTV9IPAddress>:
	...
 80a7248:	2825 080a 2815 080a 2817 080a 6162 6475     %(...(...(..baud
 80a7258:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a7268:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a7278:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a7288:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a7298:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a72a8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a72b8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a72c8:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a72d8:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a72e8:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a72f8:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a7308:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a7318:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a7328:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a7338 <_ZTVN5spark12NetworkClassE>:
	...
 80a7340:	28f5 080a 28ff 080a 2909 080a 2913 080a     .(...(...)...)..
 80a7350:	291d 080a 2929 080a 2935 080a 2941 080a     .)..))..5)..A)..
 80a7360:	2949 080a 2953 080a 295d 080a               I)..S)..])..

080a736c <_ZTV8SPIClass>:
	...
 80a7374:	2aa5 080a 2abd 080a                         .*...*..

080a737c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a737c:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
 80a738c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a739c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a73ac <_ZTV11USARTSerial>:
	...
 80a73b4:	2f11 080a 2f61 080a 2f6f 080a 29c1 080a     ./..a/..o/...)..
 80a73c4:	2f25 080a 2f47 080a 2f33 080a 2f5b 080a     %/..G/..3/..[/..
 80a73d4:	2f13 080a 2f17 080a                         ./.../..

080a73dc <_ZTV9USBSerial>:
	...
 80a73e4:	3019 080a 3069 080a 3077 080a 29c1 080a     .0..i0..w0...)..
 80a73f4:	3055 080a 301b 080a 3031 080a 3063 080a     U0...0..10..c0..
 80a7404:	3047 080a 3015 080a                         G0...0..

080a740c <_ZTVN5spark9WiFiClassE>:
	...
 80a7414:	3253 080a 3249 080a 323f 080a 31b1 080a     S2..I2..?2...1..
 80a7424:	3233 080a 3227 080a 321b 080a 3213 080a     32..'2...2...2..
 80a7434:	3209 080a 31ff 080a 31bb 080a               .2...1...1..

080a7440 <_ZSt7nothrow>:
	...

080a7441 <_ctype_>:
 80a7441:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a7451:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a7461:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a7471:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a7481:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a7491:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a74a1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a74b1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a74c1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a7544 <__sf_fake_stdin>:
	...

080a7564 <__sf_fake_stdout>:
	...

080a7584 <__sf_fake_stderr>:
	...
 80a75a4:	4f50 4953 0058 002e                         POSIX...

080a75ac <__month_lengths>:
 80a75ac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a75bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a75cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a75dc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a75ec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a75fc:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a760c <fpi.5342>:
 80a760c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a761c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080a762c <fpinan.5378>:
 80a762c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a763c:	0000 0000                                   ....

080a7640 <tinytens>:
 80a7640:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a7650:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a7660:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80a7670:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80a7680:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80a7690:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80a76a0:	2575 006e 0000 0000                         u%n.....

080a76a8 <__mprec_tens>:
 80a76a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a76b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a76c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a76d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a76e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a76f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a7708:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a7718:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a7728:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a7738:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a7748:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a7758:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a7768:	9db4 79d9 7843 44ea                         ...yCx.D

080a7770 <__mprec_bigtens>:
 80a7770:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a7780:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a7790:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a7798 <p05.5385>:
 80a7798:	0005 0000 0019 0000 007d 0000               ........}...

080a77a4 <link_const_variable_data_end>:
 80a77a4:	080a1589 	.word	0x080a1589
 80a77a8:	080a1ab5 	.word	0x080a1ab5
 80a77ac:	080a28e5 	.word	0x080a28e5
 80a77b0:	080a29ad 	.word	0x080a29ad
 80a77b4:	080a2a89 	.word	0x080a2a89
 80a77b8:	080a2dd1 	.word	0x080a2dd1
 80a77bc:	080a2efd 	.word	0x080a2efd
 80a77c0:	080a325d 	.word	0x080a325d
 80a77c4:	080a34e9 	.word	0x080a34e9
 80a77c8:	080a35a1 	.word	0x080a35a1
 80a77cc:	080a3665 	.word	0x080a3665
 80a77d0:	080a36e9 	.word	0x080a36e9
 80a77d4:	080a376d 	.word	0x080a376d

080a77d8 <link_constructors_end>:
	...
